cscope 15 /home/unasaw/sip_project/libexosip2-5.3.0               0004064534
	@/home/unasaw/sip_project/libexosip2-5.3.0/exosip-config.h

8 
	#HAVE_ARPA_INET_H
 1

	)

11 
	#HAVE_ARPA_NAMESER_COMPAT_H
 1

	)

14 
	#HAVE_ARPA_NAMESER_H
 1

	)

17 
	#HAVE_ASSERT_H
 1

	)

20 
	#HAVE_CTYPE_H
 1

	)

23 
	#HAVE_DLFCN_H
 1

	)

26 
	#HAVE_FCNTL_H
 1

	)

29 
	#HAVE_GETIFADDRS
 1

	)

32 
	#HAVE_GMTIME
 1

	)

35 
	#HAVE_GMTIME_R
 1

	)

38 
	#HAVE_INTTYPES_H
 1

	)

41 
	#HAVE_LIMITS_H
 1

	)

44 
	#HAVE_MALLOC_H
 1

	)

47 
	#HAVE_MEMORY_H
 1

	)

53 
	#HAVE_NETDB_H
 1

	)

56 
	#HAVE_NETINET_IN_H
 1

	)

59 
	#HAVE_NETINET_TCP_H
 1

	)

62 
	#HAVE_OPENSSL_SSL_H
 1

	)

65 
	#HAVE_PTHREAD
 1

	)

68 
	#HAVE_PTHREAD_PRIO_INHERIT
 1

	)

71 
	#HAVE_REGEX_H
 1

	)

74 
	#HAVE_RESOLV_H
 1

	)

77 
	#HAVE_SEMAPHORE_H
 1

	)

80 
	#HAVE_SIGNAL_H
 1

	)

83 
	#HAVE_STDARG_H
 1

	)

86 
	#HAVE_STDINT_H
 1

	)

89 
	#HAVE_STDIO_H
 1

	)

92 
	#HAVE_STDLIB_H
 1

	)

95 
	#HAVE_STRINGS_H
 1

	)

98 
	#HAVE_STRING_H
 1

	)

101 
	#HAVE_SYS_EPOLL_H
 1

	)

104 
	#HAVE_SYS_IOCTL_H
 1

	)

107 
	#HAVE_SYS_PARAM_H
 1

	)

110 
	#HAVE_SYS_SELECT_H
 1

	)

113 
	#HAVE_SYS_SEM_H
 1

	)

116 
	#HAVE_SYS_SIGNAL_H
 1

	)

119 
	#HAVE_SYS_SOCKET_H
 1

	)

122 
	#HAVE_SYS_SOUNDCARD_H
 1

	)

125 
	#HAVE_SYS_STAT_H
 1

	)

128 
	#HAVE_SYS_TIME_H
 1

	)

131 
	#HAVE_SYS_TYPES_H
 1

	)

134 
	#HAVE_UNISTD_H
 1

	)

140 
	#LT_OBJDIR
 ".libs/"

	)

143 
	#PACKAGE
 "libexosù2"

	)

146 
	#PACKAGE_BUGREPORT
 ""

	)

149 
	#PACKAGE_NAME
 "libeXosù2"

	)

152 
	#PACKAGE_STRING
 "libeXosù2 5.3.0"

	)

155 
	#PACKAGE_TARNAME
 "libexosù2"

	)

158 
	#PACKAGE_URL
 ""

	)

161 
	#PACKAGE_VERSION
 "5.3.0"

	)

168 
	#SRV_RECORD
 1

	)

173 
	#STDC_HEADERS
 1

	)

176 
	#VERSION
 "5.3.0"

	)

	@/home/unasaw/sip_project/libexosip2-5.3.0/include/eXosip2/eX_call.h

33 #ifde‡
ENABLE_MPATROL


34 
	~<m∑åﬁ.h
>

37 #i‚de‡
__EX_CALL_H__


38 
	#__EX_CALL_H__


	)

40 
	~<osù∑r£r2/osù_∑r£r.h
>

41 
	~<osù∑r£r2/sdp_mesßge.h
>

42 
	~<time.h
>

44 #ifde‡
__˝lu•lus


74 
eXosù_ˇŒ_t
;

83 
eXosù_ˇŒ_£t_ª„ªn˚
(
eXosù_t
 *
exc⁄ãxt
, 
id
, *
ª„ªn˚
);

92 *
eXosù_ˇŒ_gë_ª„ªn˚
(
eXosù_t
 *
exc⁄ãxt
, 
cid
);

104 
eXosù_ˇŒ_buûd_öôül_övôe
(
eXosù_t
 *
exc⁄ãxt
, 
osù_mesßge_t
 **
övôe
, c⁄° *
to
, c⁄° *
‰om
, c⁄° *
rouã
, c⁄° *
subje˘
);

112 
eXosù_ˇŒ_£nd_öôül_övôe
(
eXosù_t
 *
exc⁄ãxt
, 
osù_mesßge_t
 *
övôe
);

122 
eXosù_ˇŒ_buûd_ªque°
(
eXosù_t
 *
exc⁄ãxt
, 
did
, c⁄° *
mëhod
, 
osù_mesßge_t
 **
ªque°
);

131 
eXosù_ˇŒ_buûd_ack
(
eXosù_t
 *
exc⁄ãxt
, 
tid
, 
osù_mesßge_t
 **
ack
);

140 
eXosù_ˇŒ_£nd_ack
(
eXosù_t
 *
exc⁄ãxt
, 
tid
, 
osù_mesßge_t
 *
ack
);

150 
eXosù_ˇŒ_buûd_ª„r
(
eXosù_t
 *
exc⁄ãxt
, 
did
, c⁄° *
ª„r_to
, 
osù_mesßge_t
 **
ªque°
);

159 
eXosù_ˇŒ_buûd_öfo
(
eXosù_t
 *
exc⁄ãxt
, 
did
, 
osù_mesßge_t
 **
ªque°
);

168 
eXosù_ˇŒ_buûd_›ti⁄s
(
eXosù_t
 *
exc⁄ãxt
, 
did
, 
osù_mesßge_t
 **
ªque°
);

177 
eXosù_ˇŒ_buûd_upd©e
(
eXosù_t
 *
exc⁄ãxt
, 
did
, 
osù_mesßge_t
 **
ªque°
);

187 
eXosù_ˇŒ_buûd_nŸify
(
eXosù_t
 *
exc⁄ãxt
, 
did
, 
subs¸ùti⁄_°©us
, 
osù_mesßge_t
 **
ªque°
);

196 
eXosù_ˇŒ_£nd_ªque°
(
eXosù_t
 *
exc⁄ãxt
, 
did
, 
osù_mesßge_t
 *
ªque°
);

206 
eXosù_ˇŒ_buûd_™swî
(
eXosù_t
 *
exc⁄ãxt
, 
tid
, 
°©us
, 
osù_mesßge_t
 **
™swî
);

216 
eXosù_ˇŒ_£nd_™swî
(
eXosù_t
 *
exc⁄ãxt
, 
tid
, 
°©us
, 
osù_mesßge_t
 *
™swî
);

226 
eXosù_ˇŒ_ãrmö©e
(
eXosù_t
 *
exc⁄ãxt
, 
cid
, 
did
);

237 
eXosù_ˇŒ_ãrmö©e_wôh_ªas⁄
(
eXosù_t
 *
exc⁄ãxt
, 
cid
, 
did
, c⁄° *
ªas⁄
);

249 
eXosù_ˇŒ_ãrmö©e_wôh_hódî
(
eXosù_t
 *
exc⁄ãxt
, 
cid
, 
did
, c⁄° *
hódî_«me
, c⁄° *
hódî_vÆue
);

259 
eXosù_ˇŒ_buûd_¥ack
(
eXosù_t
 *
exc⁄ãxt
, 
tid
, 
osù_mesßge_t
 *
ª•⁄£1xx
, osù_mesßge_à**
¥ack
);

268 
eXosù_ˇŒ_£nd_¥ack
(
eXosù_t
 *
exc⁄ãxt
, 
tid
, 
osù_mesßge_t
 *
¥ack
);

278 
eXosù_ˇŒ_gë_ª„πo
(
eXosù_t
 *
exc⁄ãxt
, 
did
, *
ª„r_to
, 
size_t
 
ª„r_to_Àn
);

286 
eXosù_ˇŒ_föd_by_ª∂a˚s
(
eXosù_t
 *
exc⁄ãxt
, *
ª∂a˚s
);

290 #ifde‡
__˝lu•lus


	@/home/unasaw/sip_project/libexosip2-5.3.0/include/eXosip2/eX_message.h

33 #ifde‡
ENABLE_MPATROL


34 
	~<m∑åﬁ.h
>

37 #i‚de‡
__EX_MESSAGE_H__


38 
	#__EX_MESSAGE_H__


	)

40 
	~<osù∑r£r2/osù_∑r£r.h
>

41 
	~<time.h
>

43 #ifde‡
__˝lu•lus


80 
eXosù_mesßge_buûd_ªque°
(
eXosù_t
 *
exc⁄ãxt
, 
osù_mesßge_t
 **
mesßge
, c⁄° *
mëhod
, c⁄° *
to
, c⁄° *
‰om
, c⁄° *
rouã
);

88 
eXosù_mesßge_£nd_ªque°
(
eXosù_t
 *
exc⁄ãxt
, 
osù_mesßge_t
 *
mesßge
);

98 
eXosù_mesßge_buûd_™swî
(
eXosù_t
 *
exc⁄ãxt
, 
tid
, 
°©us
, 
osù_mesßge_t
 **
™swî
);

108 
eXosù_mesßge_£nd_™swî
(
eXosù_t
 *
exc⁄ãxt
, 
tid
, 
°©us
, 
osù_mesßge_t
 *
™swî
);

112 #ifde‡
__˝lu•lus


	@/home/unasaw/sip_project/libexosip2-5.3.0/include/eXosip2/eX_options.h

33 #ifde‡
ENABLE_MPATROL


34 
	~<m∑åﬁ.h
>

37 #i‚de‡
MINISIZE


39 #i‚de‡
__EX_OPTIONS_H__


40 
	#__EX_OPTIONS_H__


	)

42 
	~<osù∑r£r2/osù_∑r£r.h
>

43 
	~<time.h
>

45 #ifde‡
__˝lu•lus


79 
eXosù_›ti⁄s_buûd_ªque°
(
eXosù_t
 *
exc⁄ãxt
, 
osù_mesßge_t
 **
›ti⁄s
, c⁄° *
to
, c⁄° *
‰om
, c⁄° *
rouã
);

87 
eXosù_›ti⁄s_£nd_ªque°
(
eXosù_t
 *
exc⁄ãxt
, 
osù_mesßge_t
 *
›ti⁄s
);

97 
eXosù_›ti⁄s_buûd_™swî
(
eXosù_t
 *
exc⁄ãxt
, 
tid
, 
°©us
, 
osù_mesßge_t
 **
™swî
);

107 
eXosù_›ti⁄s_£nd_™swî
(
eXosù_t
 *
exc⁄ãxt
, 
tid
, 
°©us
, 
osù_mesßge_t
 *
™swî
);

111 #ifde‡
__˝lu•lus


	@/home/unasaw/sip_project/libexosip2-5.3.0/include/eXosip2/eX_publish.h

33 #ifde‡
ENABLE_MPATROL


34 
	~<m∑åﬁ.h
>

37 #i‚de‡
MINISIZE


39 #i‚de‡
__EX_PUBLISH_H__


40 
	#__EX_PUBLISH_H__


	)

42 
	~<osù∑r£r2/osù_∑r£r.h
>

43 
	~<time.h
>

45 #ifde‡
__˝lu•lus


80 
eXosù_buûd_publish
(
eXosù_t
 *
exc⁄ãxt
, 
osù_mesßge_t
 **
mesßge
, c⁄° *
to
, c⁄° *
‰om
, c⁄° *
rouã
, c⁄° *
evít
, c⁄° *
expúes
, c⁄° *
˘y≥
, c⁄° *
body
);

89 
eXosù_publish
(
eXosù_t
 *
exc⁄ãxt
, 
osù_mesßge_t
 *
mesßge
, c⁄° *
to
);

93 #ifde‡
__˝lu•lus


	@/home/unasaw/sip_project/libexosip2-5.3.0/include/eXosip2/eX_register.h

33 #ifde‡
ENABLE_MPATROL


34 
	~<m∑åﬁ.h
>

37 #i‚de‡
__EX_REGISTER_H__


38 
	#__EX_REGISTER_H__


	)

40 
	~<osù∑r£r2/osù_∑r£r.h
>

41 
	~<time.h
>

43 #ifde‡
__˝lu•lus


66 
eXosù_ªg_t
;

78 
eXosù_ªgi°î_buûd_öôül_ªgi°î
(
eXosù_t
 *
exc⁄ãxt
, c⁄° *
‰om
, c⁄° *
¥oxy
, c⁄° *
c⁄è˘
, 
expúes
, 
osù_mesßge_t
 **
ªg
);

91 
eXosù_ªgi°î_buûd_öôül_ªgi°î_wôhqvÆue
(
eXosù_t
 *
exc⁄ãxt
, c⁄° *
‰om
, c⁄° *
¥oxy
, c⁄° *
c⁄è˘
, 
expúes
, c⁄° *
qvÆue
, 
osù_mesßge_t
 **
ªg
);

101 
eXosù_ªgi°î_buûd_ªgi°î
(
eXosù_t
 *
exc⁄ãxt
, 
rid
, 
expúes
, 
osù_mesßge_t
 **
ªg
);

110 
eXosù_ªgi°î_£nd_ªgi°î
(
eXosù_t
 *
exc⁄ãxt
, 
rid
, 
osù_mesßge_t
 *
ªg
);

118 
eXosù_ªgi°î_ªmove
(
eXosù_t
 *
exc⁄ãxt
, 
rid
);

122 #ifde‡
__˝lu•lus


	@/home/unasaw/sip_project/libexosip2-5.3.0/include/eXosip2/eX_setup.h

33 #ifde‡
ENABLE_MPATROL


34 
	~<m∑åﬁ.h
>

37 #i‚de‡
__EX_SETUP_H__


38 
	#__EX_SETUP_H__


	)

40 
	~<eXosù2/eXosù.h
>

41 
	~<osù∑r£r2/osù_mesßge.h
>

43 
	~<time.h
>

45 #ifde‡
__˝lu•lus


49 
eXosù_t
;

50 
osù_§v_ªc‹d
;

51 
osù_«±r
;

73 
eXosù_t
 *
eXosù_mÆloc
();

80 
eXosù_öô
(
eXosù_t
 *
exc⁄ãxt
);

87 
eXosù_quô
(
eXosù_t
 *
exc⁄ãxt
);

94 
eXosù_lock
(
eXosù_t
 *
exc⁄ãxt
);

101 
eXosù_u∆ock
(
eXosù_t
 *
exc⁄ãxt
);

108 
eXosù_execuã
(
eXosù_t
 *
exc⁄ãxt
);

110 
	#EXOSIP_OPT_BASE_OPTION
 0

	)

111 
	#EXOSIP_OPT_UDP_KEEP_ALIVE
 (
EXOSIP_OPT_BASE_OPTION
 + 1Ë

	)

112 
	#EXOSIP_OPT_AUTO_MASQUERADE_CONTACT
 (
EXOSIP_OPT_BASE_OPTION
 + 2Ë

	)

113 
	#EXOSIP_OPT_UDP_LEARN_PORT
 
EXOSIP_OPT_AUTO_MASQUERADE_CONTACT


	)

114 
	#EXOSIP_OPT_USE_RPORT
 (
EXOSIP_OPT_BASE_OPTION
 + 7Ë

	)

115 
	#EXOSIP_OPT_SET_IPV4_FOR_GATEWAY
 (
EXOSIP_OPT_BASE_OPTION
 + 8Ë

	)

116 
	#EXOSIP_OPT_ADD_DNS_CACHE
 (
EXOSIP_OPT_BASE_OPTION
 + 9Ë

	)

117 
	#EXOSIP_OPT_DELETE_DNS_CACHE
 (
EXOSIP_OPT_BASE_OPTION
 + 10Ë

	)

118 
	#EXOSIP_OPT_SET_IPV6_FOR_GATEWAY
 (
EXOSIP_OPT_BASE_OPTION
 + 12Ë

	)

119 
	#EXOSIP_OPT_ADD_ACCOUNT_INFO
 (
EXOSIP_OPT_BASE_OPTION
 + 13Ë

	)

120 
	#EXOSIP_OPT_DNS_CAPABILITIES
 (
EXOSIP_OPT_BASE_OPTION
 + 14Ë

	)

121 
	#EXOSIP_OPT_SET_DSCP
 (
EXOSIP_OPT_BASE_OPTION
 + 15Ë

	)

122 
	#EXOSIP_OPT_REGISTER_WITH_DATE
 (
EXOSIP_OPT_BASE_OPTION
 + 16Ë

	)

123 
	#EXOSIP_OPT_SET_HEADER_USER_AGENT
 (
EXOSIP_OPT_BASE_OPTION
 + 17Ë

	)

124 
	#EXOSIP_OPT_ENABLE_DNS_CACHE
 (
EXOSIP_OPT_BASE_OPTION
 + 18Ë

	)

125 
	#EXOSIP_OPT_ENABLE_AUTOANSWERBYE
 (
EXOSIP_OPT_BASE_OPTION
 + 19Ë

	)

126 
	#EXOSIP_OPT_ENABLE_IPV6
 (
EXOSIP_OPT_BASE_OPTION
 + 20Ë

	)

127 
	#EXOSIP_OPT_ENABLE_REUSE_TCP_PORT
 (
EXOSIP_OPT_BASE_OPTION
 + 21Ë

	)

128 
	#EXOSIP_OPT_ENABLE_USE_EPHEMERAL_PORT
 (
EXOSIP_OPT_BASE_OPTION
 + 22Ë

	)

129 
	#EXOSIP_OPT_SET_CALLBACK_WAKELOCK
 (
EXOSIP_OPT_BASE_OPTION
 + 23Ë

	)

130 
	#EXOSIP_OPT_ENABLE_OUTBOUND
 (
EXOSIP_OPT_BASE_OPTION
 + 24Ë

	)

131 
	#EXOSIP_OPT_SET_OC_LOCAL_ADDRESS
 (
EXOSIP_OPT_BASE_OPTION
 + 25Ë

	)

132 
	#EXOSIP_OPT_SET_OC_PORT_RANGE
 (
EXOSIP_OPT_BASE_OPTION
 + 26Ë

	)

133 
	#EXOSIP_OPT_REMOVE_PREROUTESET
 (
EXOSIP_OPT_BASE_OPTION
 + 27Ë

	)

134 
	#EXOSIP_OPT_SET_SIP_INSTANCE
 (
EXOSIP_OPT_BASE_OPTION
 + 28Ë

	)

135 
	#EXOSIP_OPT_SET_MAX_MESSAGE_TO_READ
 (
EXOSIP_OPT_BASE_OPTION
 + 29Ë

	)

136 
	#EXOSIP_OPT_SET_MAX_READ_TIMEOUT
 (
EXOSIP_OPT_BASE_OPTION
 + 30Ë

	)

137 
	#EXOSIP_OPT_SET_DEFAULT_CONTACT_DISPLAYNAME
 (
EXOSIP_OPT_BASE_OPTION
 + 31Ë

	)

138 
	#EXOSIP_OPT_SET_SESSIONTIMERS_FORCE
 \

139 (
EXOSIP_OPT_BASE_OPTION
 + 32Ë

	)

140 
	#EXOSIP_OPT_FORCE_CONNECTIONREUSE
 (
EXOSIP_OPT_BASE_OPTION
 + 33Ë

	)

141 
	#EXOSIP_OPT_SET_CONTACT_DIALOG_EXTRA_PARAMS
 (
EXOSIP_OPT_BASE_OPTION
 + 34Ë

	)

143 
	#EXOSIP_OPT_SET_TLS_VERIFY_CERTIFICATE
 (
EXOSIP_OPT_BASE_OPTION
 + 500Ë

	)

144 
	#EXOSIP_OPT_SET_TLS_CERTIFICATES_INFO
 (
EXOSIP_OPT_BASE_OPTION
 + 501Ë

	)

145 
	#EXOSIP_OPT_SET_TLS_CLIENT_CERTIFICATE_NAME
 (
EXOSIP_OPT_BASE_OPTION
 + 502Ë

	)

146 
	#EXOSIP_OPT_SET_TLS_SERVER_CERTIFICATE_NAME
 (
EXOSIP_OPT_BASE_OPTION
 + 503Ë

	)

149 
	#EXOSIP_OPT_KEEP_ALIVE_OPTIONS_METHOD
 (
EXOSIP_OPT_BASE_OPTION
 + 1000)

	)

150 
	#EXOSIP_OPT_SET_TSC_SERVER
 (
EXOSIP_OPT_BASE_OPTION
 + 1001Ë

	)

152 
	#EXOSIP_OPT_GET_STATISTICS
 (
EXOSIP_OPT_BASE_OPTION
 + 2000Ë

	)

158 
	seXosù_dns_ˇche
 {

159 
ho°
[1024];

160 
ù
[256];

163 
	seXosù_accou¡_öfo
 {

164 
¥oxy
[1024];

165 
«t_ù
[256];

166 
«t_p‹t
;

169 
	seXosù_hâp_auth
 {

170 
pszCÆlId
[64];

171 
osù_¥oxy_authítiˇã_t
 *
wa
;

172 
pszCN⁄˚
[64];

173 
iN⁄˚Cou¡
;

174 
™swî_code
;

177 #i‚de‡
MINISIZE


186 
	seXosù_°©s
 {

187 
Æloˇãd_å™ß˘i⁄s
;

188 
avîage_å™ß˘i⁄s
;

189 
Æloˇãd_ªgi°øti⁄s
;

190 
avîage_ªgi°øti⁄s
;

191 
Æloˇãd_ˇŒs
;

192 
avîage_ˇŒs
;

193 
Æloˇãd_publiˇti⁄s
;

194 
avîage_publiˇti⁄s
;

195 
Æloˇãd_subs¸ùti⁄s
;

196 
avîage_subs¸ùti⁄s
;

197 
Æloˇãd_ösubs¸ùti⁄s
;

198 
avîage_ösubs¸ùti⁄s
;

200 
ª£rved1
[20];

213 
eXosù_£t_›ti⁄
(
eXosù_t
 *
exc⁄ãxt
, 
›t
, c⁄° *
vÆue
);

230 
	seXosù_és_¸edítüls_s
 {

231 
¥iv_key
[1024];

232 
¥iv_key_pw
[1024];

233 
˚π
[1024];

234 
public_key_pö√d
[1024];

235 } 
	teXosù_és_¸edítüls_t
;

249 
	seXosù_és_˘x_s
 {

250 
øndom_fûe
[1024];

251 
dh_∑øm
[1024];

252 
roŸ_ˇ_˚π
[1024];

253 
cùhî_li°
[2048];

254 
és_Êags
;

255 
dés_Êags
;

256 
eXosù_és_¸edítüls_t
 
˛õ¡
;

257 
eXosù_és_¸edítüls_t
 
£rvî
;

258 } 
	teXosù_és_˘x_t
;

264 
TLS_OK
 = 0,

265 
TLS_ERR_NO_RAND
 = -1,

266 
TLS_ERR_NO_DH_PARAM
 = -2,

267 
TLS_ERR_NO_PW
 = -3,

268 
TLS_ERR_NO_ROOT_CA
 = -4,

269 
TLS_ERR_MISSING_AUTH_PART
 = -5

270 } 
	teXosù_és_˘x_îr‹
;

289 
osù_«±r
 *
eXosù_dnsutûs_«±r
(
eXosù_t
 *
exc⁄ãxt
, c⁄° *
domaö
, c⁄° *
¥Ÿocﬁ
, c⁄° *
å™•‹t
, 
kìp_ö_ˇche
);

298 
eXosù_dnsutûs_ªÀa£
(
osù_«±r
 *
«±r_ªc‹d
);

306 
eXosù_dnsutûs_dns_¥o˚ss
(
osù_«±r
 *
ouçut_ªc‹d
, 
f‹˚
);

313 
eXosù_dnsutûs_rŸ©e_§v
(
osù_§v_ªc‹d
 *
ouçut_ªc‹d
);

325 
eXosù_li°í_addr
(
eXosù_t
 *
exc⁄ãxt
, 
å™•‹t
, c⁄° *
addr
, 
p‹t
, 
Ámûy
, 
£cuª
);

332 
eXosù_ª£t_å™•‹ts
(
eXosù_t
 *
exc⁄ãxt
);

342 
eXosù_£t_sockë
(
eXosù_t
 *
exc⁄ãxt
, 
å™•‹t
, 
sockë
, 
p‹t
);

350 
eXosù_£t_u£r_agít
(
eXosù_t
 *
exc⁄ãxt
, c⁄° *
u£r_agít
);

356 c⁄° *
eXosù_gë_vîsi⁄
();

358 #ifde‡
WIN32


359 (
__°dˇŒ
 *
	tCbSùCÆlback
)(
	tosù_mesßge_t
 *
	tmsg
, 
	tª˚ived
);

360 (
__°dˇŒ
 *
	tCbSùWakeLock
)(
	t°©e
);

362 (*
CbSùCÆlback
)(
	tosù_mesßge_t
 *
	tmsg
, 
	tª˚ived
);

363 (*
CbSùWakeLock
)(
	t°©e
);

372 
eXosù_£t_cbsù_mesßge
(
eXosù_t
 *
exc⁄ãxt
, 
CbSùCÆlback
 
cbsùCÆlback
);

388 
eXosù_masquîade_c⁄è˘
(
eXosù_t
 *
exc⁄ãxt
, c⁄° *
public_addªss
, 
p‹t
);

398 
eXosù_föd_‰ì_p‹t
(
eXosù_t
 *
exc⁄ãxt
, 
‰ì_p‹t
, 
å™•‹t
);

400 #i‚de‡
DOXYGEN


407 
eXosù_wakeup_evít
(
eXosù_t
 *
exc⁄ãxt
);

425 
eXosù_å™•‹t_£t
(
osù_mesßge_t
 *
msg
, c⁄° *
å™•‹t
);

435 
eXosù_guess_loˇlù
(
eXosù_t
 *
exc⁄ãxt
, 
Ámûy
, *
addªss
, 
size
);

439 #ifde‡
__˝lu•lus


	@/home/unasaw/sip_project/libexosip2-5.3.0/include/eXosip2/eX_subscribe.h

33 #ifde‡
ENABLE_MPATROL


34 
	~<m∑åﬁ.h
>

37 #i‚de‡
__EX_SUBSCRIBE_H__


38 
	#__EX_SUBSCRIBE_H__


	)

40 
	~<osù∑r£r2/osù_∑r£r.h
>

41 
	~<time.h
>

43 #ifde‡
__˝lu•lus


71 
	eeXosù_ss
 {

72 
EXOSIP_SUBCRSTATE_UNKNOWN
,

73 
EXOSIP_SUBCRSTATE_PENDING
,

74 
EXOSIP_SUBCRSTATE_ACTIVE
,

75 
EXOSIP_SUBCRSTATE_TERMINATED


82 
	eeXosù_ss_ªas⁄
 {

83 
DEACTIVATED
,

84 
PROBATION
,

85 
REJECTED
,

86 
TIMEOUT
,

87 
GIVEUP
,

88 
NORESOURCE


95 
	eeXosù_ss_°©us
 {

96 
EXOSIP_NOTIFY_UNKNOWN
,

97 
EXOSIP_NOTIFY_PENDING
,

98 
EXOSIP_NOTIFY_ONLINE
,

99 
EXOSIP_NOTIFY_BUSY
,

100 
EXOSIP_NOTIFY_BERIGHTBACK
,

102 
EXOSIP_NOTIFY_AWAY
,

103 
EXOSIP_NOTIFY_ONTHEPHONE
,

104 
EXOSIP_NOTIFY_OUTTOLUNCH
,

105 
EXOSIP_NOTIFY_CLOSED


108 #i‚de‡
MINISIZE


121 
eXosù_subs¸ùti⁄_buûd_öôül_subs¸ibe
(
eXosù_t
 *
exc⁄ãxt
, 
osù_mesßge_t
 **
subs¸ibe
, c⁄° *
to
, c⁄° *
‰om
, c⁄° *
rouã
, c⁄° *
evít
, 
expúes
);

133 
eXosù_subs¸ùti⁄_buûd_öôül_ª„r
(
eXosù_t
 *
exc⁄ãxt
, 
osù_mesßge_t
 **
ª„r
, c⁄° *
to
, c⁄° *
‰om
, c⁄° *
rouã
, c⁄° *
ª„r_to
);

141 
eXosù_subs¸ùti⁄_£nd_öôül_ªque°
(
eXosù_t
 *
exc⁄ãxt
, 
osù_mesßge_t
 *
subs¸ibe
);

150 
eXosù_subs¸ùti⁄_buûd_ª‰esh_ªque°
(
eXosù_t
 *
exc⁄ãxt
, 
did
, 
osù_mesßge_t
 **
sub
);

159 
eXosù_subs¸ùti⁄_£nd_ª‰esh_ªque°
(
eXosù_t
 *
exc⁄ãxt
, 
did
, 
osù_mesßge_t
 *
sub
);

167 
eXosù_subs¸ùti⁄_ªmove
(
eXosù_t
 *
exc⁄ãxt
, 
did
);

185 
eXosù_ösubs¸ùti⁄_buûd_™swî
(
eXosù_t
 *
exc⁄ãxt
, 
tid
, 
°©us
, 
osù_mesßge_t
 **
™swî
);

195 
eXosù_ösubs¸ùti⁄_£nd_™swî
(
eXosù_t
 *
exc⁄ãxt
, 
tid
, 
°©us
, 
osù_mesßge_t
 *
™swî
);

205 
eXosù_ösubs¸ùti⁄_buûd_ªque°
(
eXosù_t
 *
exc⁄ãxt
, 
did
, c⁄° *
mëhod
, 
osù_mesßge_t
 **
ªque°
);

216 
eXosù_ösubs¸ùti⁄_buûd_nŸify
(
eXosù_t
 *
exc⁄ãxt
, 
did
, 
subs¸ùti⁄_°©us
, 
subs¸ùti⁄_ªas⁄
, 
osù_mesßge_t
 **
ªque°
);

225 
eXosù_ösubs¸ùti⁄_£nd_ªque°
(
eXosù_t
 *
exc⁄ãxt
, 
did
, 
osù_mesßge_t
 *
ªque°
);

233 
eXosù_ösubs¸ùti⁄_ªmove
(
eXosù_t
 *
exc⁄ãxt
, 
did
);

239 #ifde‡
__˝lu•lus


	@/home/unasaw/sip_project/libexosip2-5.3.0/include/eXosip2/eXosip.h

33 #ifde‡
ENABLE_MPATROL


34 
	~<m∑åﬁ.h
>

37 #i‚de‡
__EXOSIP_H__


38 
	#__EXOSIP_H__


	)

40 
	~<eXosù2/eX_£tup.h
>

41 
	~<eXosù2/eX_ªgi°î.h
>

42 
	~<eXosù2/eX_ˇŒ.h
>

43 
	~<eXosù2/eX_›ti⁄s.h
>

44 
	~<eXosù2/eX_subs¸ibe.h
>

45 
	~<eXosù2/eX_mesßge.h
>

46 
	~<eXosù2/eX_publish.h
>

48 
	~<osù∑r£r2/osù_∑r£r.h
>

49 
	~<osù∑r£r2/sdp_mesßge.h
>

50 
	~<time.h
>

83 #ifde‡
__˝lu•lus


91 
eXosù_evít
 
	teXosù_evít_t
;

110 
eXosù_add_authítiˇti⁄_öfo
(
eXosù_t
 *
exc⁄ãxt
, c⁄° *
u£∫ame
, c⁄° *
u£rid
, c⁄° *
∑sswd
, c⁄° *
ha1
, c⁄° *
ªÆm
);

119 
eXosù_ªmove_authítiˇti⁄_öfo
(
eXosù_t
 *
exc⁄ãxt
, c⁄° *
u£∫ame
, c⁄° *
ªÆm
);

126 
eXosù_˛ór_authítiˇti⁄_öfo
(
eXosù_t
 *
exc⁄ãxt
);

141 
eXosù_deÁu…_a˘i⁄
(
eXosù_t
 *
exc⁄ãxt
, 
eXosù_evít_t
 *
je
);

154 
eXosù_autom©ic_a˘i⁄
(
eXosù_t
 *
exc⁄ãxt
);

156 #i‚de‡
MINISIZE


163 
eXosù_ösubs¸ùti⁄_autom©ic
(
eXosù_t
 *
exc⁄ãxt
, 
eXosù_evít_t
 *
evt
);

172 
eXosù_gíî©e_øndom
(*
buf
, 
buf_size
);

183 
eXosù_hexa_gíî©e_øndom
(*
buf
, 
buf_size
, *
°r1
, *
°r2
, *
°r3
);

191 
eXosù_byã_gíî©e_øndom
(*
buf
, 
buf_size
);

207 
sdp_mesßge_t
 *
eXosù_gë_ªmŸe_sdp
(
eXosù_t
 *
exc⁄ãxt
, 
did
);

215 
sdp_mesßge_t
 *
eXosù_gë_loˇl_sdp
(
eXosù_t
 *
exc⁄ãxt
, 
did
);

223 
sdp_mesßge_t
 *
eXosù_gë_¥evious_loˇl_sdp
(
eXosù_t
 *
exc⁄ãxt
, 
did
);

231 
sdp_mesßge_t
 *
eXosù_gë_ªmŸe_sdp_‰om_tid
(
eXosù_t
 *
exc⁄ãxt
, 
tid
);

239 
sdp_mesßge_t
 *
eXosù_gë_loˇl_sdp_‰om_tid
(
eXosù_t
 *
exc⁄ãxt
, 
tid
);

246 
sdp_mesßge_t
 *
eXosù_gë_sdp_öfo
(
osù_mesßge_t
 *
mesßge
);

253 
sdp_c⁄√˘i⁄_t
 *
eXosù_gë_audio_c⁄√˘i⁄
(
sdp_mesßge_t
 *
sdp
);

260 
sdp_medü_t
 *
eXosù_gë_audio_medü
(
sdp_mesßge_t
 *
sdp
);

267 
sdp_c⁄√˘i⁄_t
 *
eXosù_gë_video_c⁄√˘i⁄
(
sdp_mesßge_t
 *
sdp
);

274 
sdp_medü_t
 *
eXosù_gë_video_medü
(
sdp_mesßge_t
 *
sdp
);

282 
sdp_c⁄√˘i⁄_t
 *
eXosù_gë_c⁄√˘i⁄
(
sdp_mesßge_t
 *
sdp
, c⁄° *
medü
);

290 
sdp_medü_t
 *
eXosù_gë_medü
(
sdp_mesßge_t
 *
sdp
, c⁄° *
medü
);

304 
	eeXosù_evít_ty≥
 {

306 
EXOSIP_REGISTRATION_SUCCESS
,

307 
EXOSIP_REGISTRATION_FAILURE
,

310 
EXOSIP_CALL_INVITE
,

311 
EXOSIP_CALL_REINVITE
,

313 
EXOSIP_CALL_NOANSWER
,

314 
EXOSIP_CALL_PROCEEDING
,

315 
EXOSIP_CALL_RINGING
,

316 
EXOSIP_CALL_ANSWERED
,

317 
EXOSIP_CALL_REDIRECTED
,

318 
EXOSIP_CALL_REQUESTFAILURE
,

319 
EXOSIP_CALL_SERVERFAILURE
,

320 
EXOSIP_CALL_GLOBALFAILURE
,

321 
EXOSIP_CALL_ACK
,

323 
EXOSIP_CALL_CANCELLED
,

326 
EXOSIP_CALL_MESSAGE_NEW
,

327 
EXOSIP_CALL_MESSAGE_PROCEEDING
,

328 
EXOSIP_CALL_MESSAGE_ANSWERED
,

329 
EXOSIP_CALL_MESSAGE_REDIRECTED
,

330 
EXOSIP_CALL_MESSAGE_REQUESTFAILURE
,

331 
EXOSIP_CALL_MESSAGE_SERVERFAILURE
,

332 
EXOSIP_CALL_MESSAGE_GLOBALFAILURE
,

334 
EXOSIP_CALL_CLOSED
,

337 
EXOSIP_CALL_RELEASED
,

340 
EXOSIP_MESSAGE_NEW
,

341 
EXOSIP_MESSAGE_PROCEEDING
,

342 
EXOSIP_MESSAGE_ANSWERED
,

343 
EXOSIP_MESSAGE_REDIRECTED
,

344 
EXOSIP_MESSAGE_REQUESTFAILURE
,

345 
EXOSIP_MESSAGE_SERVERFAILURE
,

346 
EXOSIP_MESSAGE_GLOBALFAILURE
,

349 
EXOSIP_SUBSCRIPTION_NOANSWER
,

350 
EXOSIP_SUBSCRIPTION_PROCEEDING
,

351 
EXOSIP_SUBSCRIPTION_ANSWERED
,

352 
EXOSIP_SUBSCRIPTION_REDIRECTED
,

353 
EXOSIP_SUBSCRIPTION_REQUESTFAILURE
,

354 
EXOSIP_SUBSCRIPTION_SERVERFAILURE
,

355 
EXOSIP_SUBSCRIPTION_GLOBALFAILURE
,

356 
EXOSIP_SUBSCRIPTION_NOTIFY
,

358 
EXOSIP_IN_SUBSCRIPTION_NEW
,

360 
EXOSIP_NOTIFICATION_NOANSWER
,

361 
EXOSIP_NOTIFICATION_PROCEEDING
,

362 
EXOSIP_NOTIFICATION_ANSWERED
,

363 
EXOSIP_NOTIFICATION_REDIRECTED
,

364 
EXOSIP_NOTIFICATION_REQUESTFAILURE
,

365 
EXOSIP_NOTIFICATION_SERVERFAILURE
,

366 
EXOSIP_NOTIFICATION_GLOBALFAILURE
,

368 
EXOSIP_EVENT_COUNT


369 } 
	teXosù_evít_ty≥_t
;

375 
	seXosù_evít
 {

376 
eXosù_evít_ty≥_t
 
ty≥
;

377 
ãxtöfo
[256];

378 *
exã∫Æ_ª„ªn˚
;

380 
osù_mesßge_t
 *
ªque°
;

381 
osù_mesßge_t
 *
ª•⁄£
;

382 
osù_mesßge_t
 *
ack
;

384 
tid
;

385 
did
;

387 
rid
;

388 
cid
;

389 
sid
;

390 
nid
;

392 
ss_°©us
;

393 
ss_ªas⁄
;

401 
eXosù_evít_‰ì
(
eXosù_evít_t
 *
je
);

410 
eXosù_evít_t
 *
eXosù_evít_waô
(
eXosù_t
 *
exc⁄ãxt
, 
tv_s
, 
tv_ms
);

420 
eXosù_evít_t
 *
eXosù_evít_gë
(
eXosù_t
 *
exc⁄ãxt
);

429 
eXosù_evít_gëevítsockë
(
eXosù_t
 *
exc⁄ãxt
);

433 #ifde‡
__˝lu•lus


	@/home/unasaw/sip_project/libexosip2-5.3.0/src/eXcall_api.c

33 
	~"eXosù2.h
"

35 
eXosù_¸óã_å™ß˘i⁄
(
eXosù_t
 *
exc⁄ãxt
, 
eXosù_ˇŒ_t
 *
jc
, 
eXosù_dülog_t
 *
jd
, 
osù_mesßge_t
 *
ªque°
);

36 
eXosù_¸óã_ˇn˚l_å™ß˘i⁄
(
eXosù_t
 *
exc⁄ãxt
, 
eXosù_ˇŒ_t
 *
jc
, 
eXosù_dülog_t
 *
jd
, 
osù_mesßge_t
 *
ªque°
);

38 
_eXosù_ˇŒ_ªu£_c⁄è˘
(
osù_mesßge_t
 *
övôe
, osù_mesßge_à*
msg
);

40 
	$eXosù_¸óã_å™ß˘i⁄
(
eXosù_t
 *
exc⁄ãxt
, 
eXosù_ˇŒ_t
 *
jc
, 
eXosù_dülog_t
 *
jd
, 
osù_mesßge_t
 *
ªque°
) {

41 
osù_evít_t
 *
sùevít
;

42 
osù_å™ß˘i⁄_t
 *
å
;

43 
i
;

45 
i
 = 
	`_eXosù_å™ß˘i⁄_öô
(
exc⁄ãxt
, &
å
, 
NICT
,Éxc⁄ãxt->
j_osù
, 
ªque°
);

47 i‡(
i
 != 0) {

50 
	`osù_mesßge_‰ì
(
ªque°
);

51  
i
;

54 i‡(
jd
 !
NULL
)

55 
	`osù_li°_add
(
jd
->
d_out_ås
, 
å
, 0);

57 
sùevít
 = 
	`osù_√w_outgoög_sùmesßge
(
ªque°
);

58 
sùevít
->
å™ß˘i⁄id
 = 
å
->transactionid;

60 
	`osù_å™ß˘i⁄_£t_ª£rved2
(
å
, 
jc
);

61 
	`osù_å™ß˘i⁄_£t_ª£rved3
(
å
, 
jd
);

63 
	`osù_å™ß˘i⁄_add_evít
(
å
, 
sùevít
);

64 
	`_eXosù_wakeup
(
exc⁄ãxt
);

65  
OSIP_SUCCESS
;

66 
	}
}

68 
	$eXosù_¸óã_ˇn˚l_å™ß˘i⁄
(
eXosù_t
 *
exc⁄ãxt
, 
eXosù_ˇŒ_t
 *
jc
, 
eXosù_dülog_t
 *
jd
, 
osù_mesßge_t
 *
ªque°
) {

69 
osù_evít_t
 *
sùevít
;

70 
osù_å™ß˘i⁄_t
 *
å
;

71 
i
;

73 i‡(
jc
->
c_ˇn˚l_å
 !
NULL
) {

74 
	`osù_mesßge_‰ì
(
ªque°
);

75  
OSIP_WRONG_STATE
;

78 
i
 = 
	`_eXosù_å™ß˘i⁄_öô
(
exc⁄ãxt
, &
å
, 
NICT
,Éxc⁄ãxt->
j_osù
, 
ªque°
);

80 i‡(
i
 != 0) {

83 
	`osù_mesßge_‰ì
(
ªque°
);

84  
i
;

87 
jc
->
c_ˇn˚l_å
 = 
å
;

88 
	`osù_å™ß˘i⁄_£t_ª£rved2
(
å
, 
jc
);

89 
	`osù_å™ß˘i⁄_£t_ª£rved3
(
å
, 
jd
);

91 
sùevít
 = 
	`osù_√w_outgoög_sùmesßge
(
ªque°
);

92 
sùevít
->
å™ß˘i⁄id
 = 
å
->transactionid;

94 
	`osù_å™ß˘i⁄_add_evít
(
å
, 
sùevít
);

95 
	`_eXosù_wakeup
(
exc⁄ãxt
);

96  
OSIP_SUCCESS
;

97 
	}
}

99 
	$_eXosù_ˇŒ_ªu£_c⁄è˘
(
osù_mesßge_t
 *
övôe
, osù_mesßge_à*
msg
) {

100 
osù_c⁄è˘_t
 *
co_övôe
 = 
NULL
;

101 
osù_c⁄è˘_t
 *
co_msg
 = 
NULL
;

102 
i
;

104 
i
 = 
	`osù_mesßge_gë_c⁄è˘
(
övôe
, 0, &
co_övôe
);

106 i‡(
i
 < 0 || 
co_övôe
 =
NULL
 || co_övôe->
uæ
 == NULL) {

107  
i
;

110 
i
 = 
	`osù_mesßge_gë_c⁄è˘
(
msg
, 0, &
co_msg
);

112 i‡(
i
 >0 && 
co_msg
 !
NULL
) {

113 
	`osù_li°_ªmove
(&
msg
->
c⁄è˘s
, 0);

114 
	`osù_c⁄è˘_‰ì
(
co_msg
);

117 
co_msg
 = 
NULL
;

118 
i
 = 
	`osù_c⁄è˘_˛⁄e
(
co_övôe
, &
co_msg
);

120 i‡(
i
 >0 && 
co_msg
 !
NULL
) {

121 
	`osù_li°_add
(&
msg
->
c⁄è˘s
, 
co_msg
, 0);

122  
OSIP_SUCCESS
;

125  
i
;

126 
	}
}

128 
	$_eXosù_ˇŒ_å™ß˘i⁄_föd
(
eXosù_t
 *
exc⁄ãxt
, 
tid
, 
eXosù_ˇŒ_t
 **
jc
, 
eXosù_dülog_t
 **
jd
, 
osù_å™ß˘i⁄_t
 **
å
) {

129 *
jc
 = 
exc⁄ãxt
->
j_ˇŒs
; *j¯!
NULL
; *j¯(*jc)->
√xt
) {

130 i‡((*
jc
)->
c_öc_å
 !
NULL
 && (*jc)->c_öc_å->
å™ß˘i⁄id
 =
tid
) {

131 *
å
 = (*
jc
)->
c_öc_å
;

132 *
jd
 = (*
jc
)->
c_dülogs
;

133  
OSIP_SUCCESS
;

136 i‡((*
jc
)->
c_out_å
 !
NULL
 && (*jc)->c_out_å->
å™ß˘i⁄id
 =
tid
) {

137 *
å
 = (*
jc
)->
c_out_å
;

138 *
jd
 = (*
jc
)->
c_dülogs
;

139  
OSIP_SUCCESS
;

142 *
jd
 = (*
jc
)->
c_dülogs
; *jd !
NULL
; *jd = (*jd)->
√xt
) {

143 
osù_li°_ôî©‹_t
 
ô
;

144 
osù_å™ß˘i⁄_t
 *
å™ß˘i⁄
;

146 
å™ß˘i⁄
 = (
osù_å™ß˘i⁄_t
 *Ë
	`osù_li°_gë_fú°
((*
jd
)->
d_öc_ås
, &
ô
);

148 
å™ß˘i⁄
 !
OSIP_SUCCESS
) {

149 i‡(
å™ß˘i⁄
 !
NULL
 &&Åønß˘i⁄->
å™ß˘i⁄id
 =
tid
) {

150 *
å
 = 
å™ß˘i⁄
;

151  
OSIP_SUCCESS
;

154 
å™ß˘i⁄
 = (
osù_å™ß˘i⁄_t
 *Ë
	`osù_li°_gë_√xt
(&
ô
);

157 
å™ß˘i⁄
 = (
osù_å™ß˘i⁄_t
 *Ë
	`osù_li°_gë_fú°
((*
jd
)->
d_out_ås
, &
ô
);

159 
å™ß˘i⁄
 !
OSIP_SUCCESS
) {

160 i‡(
å™ß˘i⁄
 !
NULL
 &&Åønß˘i⁄->
å™ß˘i⁄id
 =
tid
) {

161 *
å
 = 
å™ß˘i⁄
;

162  
OSIP_SUCCESS
;

165 
å™ß˘i⁄
 = (
osù_å™ß˘i⁄_t
 *Ë
	`osù_li°_gë_√xt
(&
ô
);

170 *
jd
 = 
NULL
;

171 *
jc
 = 
NULL
;

172  
OSIP_NOTFOUND
;

173 
	}
}

175 
	$eXosù_ˇŒ_£t_ª„ªn˚
(
eXosù_t
 *
exc⁄ãxt
, 
id
, *
ª„ªn˚
) {

176 
eXosù_dülog_t
 *
jd
 = 
NULL
;

177 
eXosù_ˇŒ_t
 *
jc
 = 
NULL
;

179 i‡(
id
 > 0) {

180 
	`_eXosù_ˇŒ_dülog_föd
(
exc⁄ãxt
, 
id
, &
jc
, &
jd
);

182 i‡(
jc
 =
NULL
) {

183 
	`_eXosù_ˇŒ_föd
(
exc⁄ãxt
, 
id
, &
jc
);

187 i‡(
jc
 =
NULL
) {

188 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip]Ço call here\n"));

189  
OSIP_NOTFOUND
;

192 
jc
->
exã∫Æ_ª„ªn˚
 = 
ª„ªn˚
;

193  
OSIP_SUCCESS
;

194 
	}
}

196 *
	$eXosù_ˇŒ_gë_ª„ªn˚
(
eXosù_t
 *
exc⁄ãxt
, 
cid
) {

197 
eXosù_ˇŒ_t
 *
jc
 = 
NULL
;

199 
	`_eXosù_ˇŒ_föd
(
exc⁄ãxt
, 
cid
, &
jc
);

201 i‡(
jc
 =
NULL
) {

202 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip]Ço call here\n"));

203  
NULL
;

206  
jc
->
exã∫Æ_ª„ªn˚
;

207 
	}
}

211 
	$eXosù_ˇŒ_buûd_öôül_övôe
(
eXosù_t
 *
exc⁄ãxt
, 
osù_mesßge_t
 **
övôe
, c⁄° *
to
, c⁄° *
‰om
, c⁄° *
rouã
, c⁄° *
subje˘
) {

212 
i
;

213 
osù_to_t
 *
_to
 = 
NULL
;

214 
osù_hódî_t
 *
subje˘_hódî
;

216 *
övôe
 = 
NULL
;

218 i‡(
to
 !
NULL
 && *to == '\0')

219  
OSIP_BADPARAMETER
;

221 i‡(
rouã
 !
NULL
 && *route == '\0')

222 
rouã
 = 
NULL
;

224 i‡(
subje˘
 !
NULL
 && *subject == '\0')

225 
subje˘
 = 
NULL
;

227 
i
 = 
	`osù_to_öô
(&
_to
);

229 i‡(
i
 != 0)

230  
i
;

232 
i
 = 
	`osù_to_∑r£
(
_to
, 
to
);

234 i‡(
i
 != 0) {

235 
	`osù_to_‰ì
(
_to
);

236  
i
;

239 
i
 = 
	`_eXosù_gíî©ög_ªque°_out_of_dülog
(
exc⁄ãxt
, 
övôe
, "INVITE", 
to
, 
‰om
, 
rouã
);

240 
	`osù_to_‰ì
(
_to
);

242 i‡(
i
 != 0)

243  
i
;

245 
	`_eXosù_dülog_add_c⁄è˘
(
exc⁄ãxt
, *
övôe
);

247 
subje˘_hódî
 = 
NULL
;

248 
	`osù_mesßge_gë_subje˘
(*
övôe
, 0, &
subje˘_hódî
);

250 i‡(
subje˘_hódî
 =
NULL
 && 
subje˘
 != NULL)

251 
	`osù_mesßge_£t_subje˘
(*
övôe
, 
subje˘
);

253  
OSIP_SUCCESS
;

254 
	}
}

256 
	$eXosù_ˇŒ_£nd_öôül_övôe
(
eXosù_t
 *
exc⁄ãxt
, 
osù_mesßge_t
 *
övôe
) {

257 
eXosù_ˇŒ_t
 *
jc
;

258 
osù_å™ß˘i⁄_t
 *
å™ß˘i⁄
;

259 
osù_evít_t
 *
sùevít
;

260 
i
;

262 i‡(
övôe
 =
NULL
) {

263  
OSIP_BADPARAMETER
;

266 
i
 = 
	`_eXosù_ˇŒ_öô
(
exc⁄ãxt
, &
jc
);

268 i‡(
i
 != 0) {

269 
	`osù_mesßge_‰ì
(
övôe
);

270  
i
;

273 
i
 = 
	`_eXosù_å™ß˘i⁄_öô
(
exc⁄ãxt
, &
å™ß˘i⁄
, 
ICT
,Éxc⁄ãxt->
j_osù
, 
övôe
);

275 i‡(
i
 != 0) {

276 
	`_eXosù_ˇŒ_‰ì
(
exc⁄ãxt
, 
jc
);

277 
	`osù_mesßge_‰ì
(
övôe
);

278  
i
;

281 
jc
->
c_out_å
 = 
å™ß˘i⁄
;

283 
sùevít
 = 
	`osù_√w_outgoög_sùmesßge
(
övôe
);

284 
sùevít
->
å™ß˘i⁄id
 = 
å™ß˘i⁄
->transactionid;

286 
	`osù_å™ß˘i⁄_£t_ª£rved2
(
å™ß˘i⁄
, 
jc
);

287 
	`osù_å™ß˘i⁄_add_evít
(
å™ß˘i⁄
, 
sùevít
);

289 
jc
->
exã∫Æ_ª„ªn˚
 = 
NULL
;

290 
	`ADD_ELEMENT
(
exc⁄ãxt
->
j_ˇŒs
, 
jc
);

292 
	`_eXosù_upd©e
(
exc⁄ãxt
);

293 
	`_eXosù_wakeup
(
exc⁄ãxt
);

294  
jc
->
c_id
;

295 
	}
}

297 
	$eXosù_ˇŒ_buûd_ack
(
eXosù_t
 *
exc⁄ãxt
, 
tid
, 
osù_mesßge_t
 **
_ack
) {

298 
eXosù_dülog_t
 *
jd
 = 
NULL
;

299 
eXosù_ˇŒ_t
 *
jc
 = 
NULL
;

300 
osù_å™ß˘i⁄_t
 *
å
 = 
NULL
;

302 
osù_mesßge_t
 *
ack
;

303 
i
;

305 *
_ack
 = 
NULL
;

307 i‡(
tid
 <= 0)

308  
OSIP_BADPARAMETER
;

310 i‡(
tid
 > 0) {

311 
	`_eXosù_ˇŒ_å™ß˘i⁄_föd
(
exc⁄ãxt
, 
tid
, &
jc
, &
jd
, &
å
);

314 i‡(
å
 =
NULL
) {

316 
	`_eXosù_ˇŒ_dülog_föd
(
exc⁄ãxt
, 
tid
, &
jc
, &
jd
);

318 i‡(
jc
 =
NULL
 || 
jd
 =NULL || jd->
d_dülog
 == NULL) {

319 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip]Ço call here\n"));

320  
OSIP_NOTFOUND
;

323 
å
 = 
	`_eXosù_föd_œ°_out_övôe
(
jc
, 
jd
);

326 i‡(
å
 =
NULL
 ||År->
‹ig_ªque°
 == NULL) {

327 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip]ÇoÅransaction for call\n"));

328  
OSIP_NOTFOUND
;

331 i‡(0 !
	`osù_°rˇ£cmp
(
å
->
‹ig_ªque°
->
sù_mëhod
, "INVITE")) {

332 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] ACKáre only sent for inviteÅransactions\n"));

333  
OSIP_BADPARAMETER
;

336 i‡(
jd
 =
NULL
) {

337 
osù_dülog_t
 *
d_dülog
 = 
NULL
;

339 i‡(
å
->
œ°_ª•⁄£
 =
NULL
) {

340 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] ACK can't be sent withoutányánswerÑeceived\n"));

341  
OSIP_NOTFOUND
;

345 
i
 = 
	`osù_dülog_öô_as_uac
(&
d_dülog
, 
å
->
œ°_ª•⁄£
);

347 i‡(
i
 != 0) {

348 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] ACK can't be sent withoutány dialogÉstablished\n"));

349  
OSIP_NOTFOUND
;

352 
i
 = 
	`_eXosù_buûd_ªque°_wôhö_dülog
(
exc⁄ãxt
, &
ack
, "ACK", 
d_dülog
);

353 
	`osù_dülog_‰ì
(
d_dülog
);

356 
i
 = 
	`_eXosù_buûd_ªque°_wôhö_dülog
(
exc⁄ãxt
, &
ack
, "ACK", 
jd
->
d_dülog
);

359 i‡(
i
 != 0) {

360  
i
;

363 
	`_eXosù_ˇŒ_ªu£_c⁄è˘
(
å
->
‹ig_ªque°
, 
ack
);

366 i‡(
å
->
‹ig_ªque°
->
c£q
 !
NULL
 &&År->‹ig_ªque°->c£q->
numbî
 != NULL) {

367 i‡(
ack
 !
NULL
 &&áck->
c£q
 !NULL &&áck->c£q->
numbî
 != NULL) {

368 
	`osù_‰ì
(
ack
->
c£q
->
numbî
);

369 
ack
->
c£q
->
numbî
 = 
	`osù_°rdup
(
å
->
‹ig_ªque°
->cseq->number);

375 
pos
 = 0;

376 
osù_¥oxy_auth‹iz©i⁄_t
 *
∑
 = 
NULL
;

378 
i
 = 
	`osù_mesßge_gë_¥oxy_auth‹iz©i⁄
(
å
->
‹ig_ªque°
, 
pos
, &
∑
);

380 
i
 >0 && 
∑
 !
NULL
) {

381 
osù_¥oxy_auth‹iz©i⁄_t
 *
∑2
;

383 
i
 = 
	`osù_¥oxy_auth‹iz©i⁄_˛⁄e
(
∑
, &
∑2
);

385 i‡(
i
 != 0) {

386 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] cannot copy credentials from INVITE\n"));

390 
	`osù_li°_add
(&
ack
->
¥oxy_auth‹iz©i⁄s
, 
∑2
, -1);

391 
∑
 = 
NULL
;

392 
pos
++;

393 
i
 = 
	`osù_mesßge_gë_¥oxy_auth‹iz©i⁄
(
å
->
‹ig_ªque°
, 
pos
, &
∑
);

397 *
_ack
 = 
ack
;

398  
OSIP_SUCCESS
;

399 
	}
}

401 
	$eXosù_ˇŒ_£nd_ack
(
eXosù_t
 *
exc⁄ãxt
, 
tid
, 
osù_mesßge_t
 *
ack
) {

402 
eXosù_dülog_t
 *
jd
 = 
NULL
;

403 
eXosù_ˇŒ_t
 *
jc
 = 
NULL
;

404 
osù_å™ß˘i⁄_t
 *
å
 = 
NULL
;

405 
i
;

407 i‡(
tid
 <= 0) {

408 i‡(
ack
 !
NULL
)

409 
	`osù_mesßge_‰ì
(
ack
);

411  
OSIP_BADPARAMETER
;

414 i‡(
tid
 > 0) {

415 
	`_eXosù_ˇŒ_å™ß˘i⁄_föd
(
exc⁄ãxt
, 
tid
, &
jc
, &
jd
, &
å
);

418 i‡(
jc
 =
NULL
) {

420 
	`_eXosù_ˇŒ_dülog_föd
(
exc⁄ãxt
, 
tid
, &
jc
, &
jd
);

423 i‡(
jc
 =
NULL
) {

424 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip]Ço call here\n"));

426 i‡(
ack
 !
NULL
)

427 
	`osù_mesßge_‰ì
(
ack
);

429  
OSIP_NOTFOUND
;

432 i‡(
ack
 =
NULL
) {

433 
i
 = 
	`eXosù_ˇŒ_buûd_ack
(
exc⁄ãxt
, 
tid
, &
ack
);

435 i‡(
i
 != 0) {

436  
i
;

440 
i
 = 
	`_eXosù_¢d_mesßge
(
exc⁄ãxt
, 
NULL
, 
ack
, NULL, 0, -1);

442 i‡(
jd
 !
NULL
) {

444 i‡(
jd
->
d_ack
 !
NULL
)

445 
	`osù_mesßge_‰ì
(
jd
->
d_ack
);

447 
jd
->
d_ack
 = 
ack
;

450 
	`_eXosù_wakeup
(
exc⁄ãxt
);

451 i‡(
i
 < 0)

452  
i
;

455  
OSIP_SUCCESS
;

456 
	}
}

458 
	$eXosù_ˇŒ_buûd_ªque°
(
eXosù_t
 *
exc⁄ãxt
, 
jid
, c⁄° *
mëhod
, 
osù_mesßge_t
 **
ªque°
) {

459 
eXosù_dülog_t
 *
jd
 = 
NULL
;

460 
eXosù_ˇŒ_t
 *
jc
 = 
NULL
;

462 
osù_å™ß˘i⁄_t
 *
å™ß˘i⁄
;

463 
i
;

465 *
ªque°
 = 
NULL
;

467 i‡(
jid
 <= 0)

468  
OSIP_BADPARAMETER
;

470 i‡(
mëhod
 =
NULL
 || method[0] == '\0')

471  
OSIP_BADPARAMETER
;

473 i‡(
jid
 > 0) {

474 
	`_eXosù_ˇŒ_dülog_föd
(
exc⁄ãxt
, 
jid
, &
jc
, &
jd
);

477 i‡(
jd
 =
NULL
 || jd->
d_dülog
 == NULL) {

478 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip]Ço call here\n"));

479  
OSIP_NOTFOUND
;

482 
å™ß˘i⁄
 = 
NULL
;

484 i‡(0 =
	`osù_°rˇ£cmp
(
mëhod
, "INVITE")) {

485 
å™ß˘i⁄
 = 
	`_eXosù_föd_œ°_övôe
(
jc
, 
jd
);

489 
å™ß˘i⁄
 = 
	`_eXosù_föd_œ°_å™ß˘i⁄
(
jc
, 
jd
, 
mëhod
);

492 i‡(
å™ß˘i⁄
 !
NULL
) {

493 i‡(0 !
	`osù_°rˇ£cmp
(
mëhod
, "INVITE")) {

494 #i‚de‡
DONOTWAIT_ENDOFTRANSACTION


496 i‡(
å™ß˘i⁄
->
°©e
 !
NICT_TERMINATED
 &&Åønß˘i⁄->°©ê!
NIST_TERMINATED
 &&Åønß˘i⁄->°©ê!
NICT_COMPLETED
 &&Åønß˘i⁄->°©ê!
NIST_COMPLETED
)

497  
OSIP_WRONG_STATE
;

502 i‡(
å™ß˘i⁄
->
°©e
 !
ICT_TERMINATED
 &&Åønß˘i⁄->°©ê!
IST_TERMINATED
 &&Åønß˘i⁄->°©ê!
IST_CONFIRMED
 &&Åønß˘i⁄->°©ê!
ICT_COMPLETED
)

503  
OSIP_WRONG_STATE
;

507 
i
 = 
	`_eXosù_buûd_ªque°_wôhö_dülog
(
exc⁄ãxt
, 
ªque°
, 
mëhod
, 
jd
->
d_dülog
);

509 i‡(
i
 != 0)

510  
i
;

512 
	`_eXosù_add_authítiˇti⁄_öf‹m©i⁄
(
exc⁄ãxt
, *
ªque°
, 
NULL
);

514  
OSIP_SUCCESS
;

515 
	}
}

517 
	$eXosù_ˇŒ_£nd_ªque°
(
eXosù_t
 *
exc⁄ãxt
, 
jid
, 
osù_mesßge_t
 *
ªque°
) {

518 
eXosù_dülog_t
 *
jd
 = 
NULL
;

519 
eXosù_ˇŒ_t
 *
jc
 = 
NULL
;

521 
osù_å™ß˘i⁄_t
 *
å™ß˘i⁄
;

522 
osù_evít_t
 *
sùevít
;

524 
i
;

526 i‡(
ªque°
 =
NULL
)

527  
OSIP_BADPARAMETER
;

529 i‡(
jid
 <= 0) {

530 
	`osù_mesßge_‰ì
(
ªque°
);

531  
OSIP_BADPARAMETER
;

534 i‡(
ªque°
->
sù_mëhod
 =
NULL
) {

535 
	`osù_mesßge_‰ì
(
ªque°
);

536  
OSIP_BADPARAMETER
;

539 i‡(
jid
 > 0) {

540 
	`_eXosù_ˇŒ_dülog_föd
(
exc⁄ãxt
, 
jid
, &
jc
, &
jd
);

543 i‡(
jd
 =
NULL
) {

544 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip]Ço call here\n"));

545 
	`osù_mesßge_‰ì
(
ªque°
);

546  
OSIP_NOTFOUND
;

549 
å™ß˘i⁄
 = 
NULL
;

551 i‡(0 =
	`osù_°rˇ£cmp
(
ªque°
->
sù_mëhod
, "INVITE")) {

552 
å™ß˘i⁄
 = 
	`_eXosù_föd_œ°_övôe
(
jc
, 
jd
);

556 
å™ß˘i⁄
 = 
	`_eXosù_föd_œ°_å™ß˘i⁄
(
jc
, 
jd
, 
ªque°
->
sù_mëhod
);

559 i‡(
å™ß˘i⁄
 !
NULL
) {

560 i‡(0 !
	`osù_°rˇ£cmp
(
ªque°
->
sù_mëhod
, "INVITE")) {

561 #i‚de‡
DONOTWAIT_ENDOFTRANSACTION


563 i‡(
å™ß˘i⁄
->
°©e
 !
NICT_TERMINATED
 &&Åønß˘i⁄->°©ê!
NIST_TERMINATED
 &&Åønß˘i⁄->°©ê!
NICT_COMPLETED
 &&Åønß˘i⁄->°©ê!
NIST_COMPLETED
) {

564 
	`osù_mesßge_‰ì
(
ªque°
);

565  
OSIP_WRONG_STATE
;

571 i‡(
å™ß˘i⁄
->
°©e
 !
ICT_TERMINATED
 &&Åønß˘i⁄->°©ê!
IST_TERMINATED
 &&Åønß˘i⁄->°©ê!
IST_CONFIRMED
 &&Åønß˘i⁄->°©ê!
ICT_COMPLETED
) {

572 
	`osù_mesßge_‰ì
(
ªque°
);

573  
OSIP_WRONG_STATE
;

578 
å™ß˘i⁄
 = 
NULL
;

580 i‡(0 !
	`osù_°rˇ£cmp
(
ªque°
->
sù_mëhod
, "INVITE")) {

581 
i
 = 
	`_eXosù_å™ß˘i⁄_öô
(
exc⁄ãxt
, &
å™ß˘i⁄
, 
NICT
,Éxc⁄ãxt->
j_osù
, 
ªque°
);

584 
i
 = 
	`_eXosù_å™ß˘i⁄_öô
(
exc⁄ãxt
, &
å™ß˘i⁄
, 
ICT
,Éxc⁄ãxt->
j_osù
, 
ªque°
);

587 i‡(
i
 != 0) {

588 
	`osù_mesßge_‰ì
(
ªque°
);

589  
i
;

592 
	`osù_li°_add
(
jd
->
d_out_ås
, 
å™ß˘i⁄
, 0);

594 
sùevít
 = 
	`osù_√w_outgoög_sùmesßge
(
ªque°
);

595 
sùevít
->
å™ß˘i⁄id
 = 
å™ß˘i⁄
->transactionid;

597 
	`osù_å™ß˘i⁄_£t_ª£rved2
(
å™ß˘i⁄
, 
jc
);

598 
	`osù_å™ß˘i⁄_£t_ª£rved3
(
å™ß˘i⁄
, 
jd
);

600 
	`osù_å™ß˘i⁄_add_evít
(
å™ß˘i⁄
, 
sùevít
);

601 
	`_eXosù_wakeup
(
exc⁄ãxt
);

602  
OSIP_SUCCESS
;

603 
	}
}

605 #i‚de‡
MINISIZE


607 
	$eXosù_ˇŒ_buûd_ª„r
(
eXosù_t
 *
exc⁄ãxt
, 
did
, c⁄° *
ª„r_to
, 
osù_mesßge_t
 **
ªque°
) {

608 
i
;

610 *
ªque°
 = 
NULL
;

611 
i
 = 
	`eXosù_ˇŒ_buûd_ªque°
(
exc⁄ãxt
, 
did
, "REFER", 
ªque°
);

613 i‡(
i
 != 0)

614  
i
;

616 i‡(
ª„r_to
 =
NULL
 ||Ñefer_to[0] == '\0')

617  
OSIP_SUCCESS
;

619 
	`osù_mesßge_£t_hódî
(*
ªque°
, "Re„r-to", 
ª„r_to
);

620  
OSIP_SUCCESS
;

621 
	}
}

623 
	$eXosù_ˇŒ_buûd_›ti⁄s
(
eXosù_t
 *
exc⁄ãxt
, 
did
, 
osù_mesßge_t
 **
ªque°
) {

624 
i
;

626 *
ªque°
 = 
NULL
;

627 
i
 = 
	`eXosù_ˇŒ_buûd_ªque°
(
exc⁄ãxt
, 
did
, "OPTIONS", 
ªque°
);

629 i‡(
i
 != 0)

630  
i
;

632  
OSIP_SUCCESS
;

633 
	}
}

635 
	$eXosù_ˇŒ_buûd_öfo
(
eXosù_t
 *
exc⁄ãxt
, 
did
, 
osù_mesßge_t
 **
ªque°
) {

636 
i
;

638 *
ªque°
 = 
NULL
;

639 
i
 = 
	`eXosù_ˇŒ_buûd_ªque°
(
exc⁄ãxt
, 
did
, "INFO", 
ªque°
);

641 i‡(
i
 != 0)

642  
i
;

644  
OSIP_SUCCESS
;

645 
	}
}

647 
	$eXosù_ˇŒ_buûd_upd©e
(
eXosù_t
 *
exc⁄ãxt
, 
did
, 
osù_mesßge_t
 **
ªque°
) {

648 
i
;

650 *
ªque°
 = 
NULL
;

651 
i
 = 
	`eXosù_ˇŒ_buûd_ªque°
(
exc⁄ãxt
, 
did
, "UPDATE", 
ªque°
);

653 i‡(
i
 != 0)

654  
i
;

656  
OSIP_SUCCESS
;

657 
	}
}

659 
	$eXosù_ˇŒ_buûd_nŸify
(
eXosù_t
 *
exc⁄ãxt
, 
did
, 
subs¸ùti⁄_°©us
, 
osù_mesßge_t
 **
ªque°
) {

660 
subs¸ùti⁄_°©e
[50];

661 *
tmp
;

662 
i
;

664 *
ªque°
 = 
NULL
;

665 
i
 = 
	`eXosù_ˇŒ_buûd_ªque°
(
exc⁄ãxt
, 
did
, "NOTIFY", 
ªque°
);

667 i‡(
i
 != 0)

668  
i
;

670 i‡(
subs¸ùti⁄_°©us
 =
EXOSIP_SUBCRSTATE_PENDING
)

671 
	`osù_°∫˝y
(
subs¸ùti⁄_°©e
, "pending;expires=", 16);

673 i‡(
subs¸ùti⁄_°©us
 =
EXOSIP_SUBCRSTATE_ACTIVE
)

674 
	`osù_°∫˝y
(
subs¸ùti⁄_°©e
, "active;expires=", 15);

676 i‡(
subs¸ùti⁄_°©us
 =
EXOSIP_SUBCRSTATE_TERMINATED
) {

678 
ªas⁄
 = 
NORESOURCE
;

680 i‡(
ªas⁄
 =
DEACTIVATED
)

681 
	`osù_°∫˝y
(
subs¸ùti⁄_°©e
, "terminated;reason=deactivated", 29);

683 i‡(
ªas⁄
 =
PROBATION
)

684 
	`osù_°∫˝y
(
subs¸ùti⁄_°©e
, "terminated;reason=probation", 27);

686 i‡(
ªas⁄
 =
REJECTED
)

687 
	`osù_°∫˝y
(
subs¸ùti⁄_°©e
, "terminated;reason=rejected", 26);

689 i‡(
ªas⁄
 =
TIMEOUT
)

690 
	`osù_°∫˝y
(
subs¸ùti⁄_°©e
, "terminated;reason=timeout", 25);

692 i‡(
ªas⁄
 =
GIVEUP
)

693 
	`osù_°∫˝y
(
subs¸ùti⁄_°©e
, "terminated;reason=giveup", 24);

695 i‡(
ªas⁄
 =
NORESOURCE
)

697 
	`osù_°∫˝y
(
subs¸ùti⁄_°©e
, "terminated;reason=noresource", 29);

700 
tmp
 = 
subs¸ùti⁄_°©e
 + 
	`°æí
(subscription_state);

702 i‡(
subs¸ùti⁄_°©us
 !
EXOSIP_SUBCRSTATE_TERMINATED
)

703 
	`¢¥ötf
(
tmp
, 50 - (tm∞- 
subs¸ùti⁄_°©e
), "%i", 180);

705 
	`osù_mesßge_£t_hódî
(*
ªque°
, "Subs¸ùti⁄-Sèã", 
subs¸ùti⁄_°©e
);

707  
OSIP_SUCCESS
;

708 
	}
}

712 
	$eXosù_ˇŒ_buûd_™swî
(
eXosù_t
 *
exc⁄ãxt
, 
tid
, 
°©us
, 
osù_mesßge_t
 **
™swî
) {

713 
i
 = -1;

714 
eXosù_dülog_t
 *
jd
 = 
NULL
;

715 
eXosù_ˇŒ_t
 *
jc
 = 
NULL
;

716 
osù_å™ß˘i⁄_t
 *
å
 = 
NULL
;

718 *
™swî
 = 
NULL
;

720 i‡(
tid
 < 0)

721  
OSIP_BADPARAMETER
;

723 i‡(
°©us
 <= 100)

724  
OSIP_BADPARAMETER
;

726 i‡(
°©us
 > 699)

727  
OSIP_BADPARAMETER
;

729 i‡(
tid
 > 0) {

730 
	`_eXosù_ˇŒ_å™ß˘i⁄_föd
(
exc⁄ãxt
, 
tid
, &
jc
, &
jd
, &
å
);

733 i‡(
å
 =
NULL
 || 
jd
 == NULL) {

734 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip]Ço call here\n"));

735  
OSIP_NOTFOUND
;

738 i‡(0 =
	`osù_°rˇ£cmp
(
å
->
‹ig_ªque°
->
sù_mëhod
, "INVITE")) {

739 
i
 = 
	`_eXosù_™swî_övôe_123456xx
(
exc⁄ãxt
, 
jc
, 
jd
, 
°©us
, 
™swî
, 0);

742 
i
 = 
	`_eXosù_buûd_ª•⁄£_deÁu…
(
exc⁄ãxt
, 
™swî
, 
jd
->
d_dülog
, 
°©us
, 
å
->
‹ig_ªque°
);

744 i‡(
i
 != 0) {

745 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosù] c™nŸ cª©êª•⁄£ f‹ [%s]\n", 
å
->
‹ig_ªque°
->
sù_mëhod
));

746  
i
;

749 i‡(
°©us
 > 100 && status < 300)

750 
i
 = 
	`_eXosù_com∂ëe_™swî_th©_e°ablish_a_dülog
(
exc⁄ãxt
, *
™swî
, 
å
->
‹ig_ªque°
);

753 i‡(
i
 != 0) {

754 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosù] c™nŸ cª©êª•⁄£ f‹ [%s]\n", 
å
->
‹ig_ªque°
->
sù_mëhod
));

755  
i
;

758  
OSIP_SUCCESS
;

759 
	}
}

761 
osù_hódî_t
 *
	$_eXosù_hódî_°rˇ£°r
(
osù_mesßge_t
 *
mesßge
, c⁄° *
h«me
, c⁄° *
h«me_sh‹t
, c⁄° *
vÆue
) {

762 
osù_hódî_t
 *
hódî
;

763 
i
;

765 
i
 = 
	`osù_mesßge_hódî_gë_by«me
(
mesßge
, 
h«me
, 0, &
hódî
);

767 
i
 >= 0) {

768 i‡(
hódî
 =
NULL
)

771 i‡(
hódî
->
hvÆue
 !
NULL
 && 
	`osù_°rˇ£°r
(hódî->hvÆue, 
vÆue
) != NULL) {

776 
hódî
 = 
NULL
;

777 
i
 = 
	`osù_mesßge_hódî_gë_by«me
(
mesßge
, 
h«me
, i + 1, &
hódî
);

780 i‡(
hódî
 =
NULL
) {

781 
i
 = 
	`osù_mesßge_hódî_gë_by«me
(
mesßge
, 
h«me_sh‹t
, 0, &
hódî
);

783 
i
 >= 0) {

784 i‡(
hódî
 =
NULL
)

787 i‡(
hódî
->
hvÆue
 !
NULL
 && 
	`osù_°rˇ£°r
(hódî->hvÆue, 
vÆue
) != NULL) {

792 
hódî
 = 
NULL
;

793 
i
 = 
	`osù_mesßge_hódî_gë_by«me
(
mesßge
, 
h«me_sh‹t
, i + 1, &
hódî
);

797  
hódî
;

798 
	}
}

800 
	$eXosù_ˇŒ_£nd_™swî
(
eXosù_t
 *
exc⁄ãxt
, 
tid
, 
°©us
, 
osù_mesßge_t
 *
™swî
) {

801 
eXosù_dülog_t
 *
jd
 = 
NULL
;

802 
eXosù_ˇŒ_t
 *
jc
 = 
NULL
;

803 
osù_å™ß˘i⁄_t
 *
å
 = 
NULL
;

804 
osù_evít_t
 *
evt_™swî
;

806 i‡(
tid
 < 0) {

807 
	`osù_mesßge_‰ì
(
™swî
);

808  
OSIP_BADPARAMETER
;

811 i‡(
°©us
 <= 100) {

812 
	`osù_mesßge_‰ì
(
™swî
);

813  
OSIP_BADPARAMETER
;

816 i‡(
°©us
 > 699) {

817 
	`osù_mesßge_‰ì
(
™swî
);

818  
OSIP_BADPARAMETER
;

821 i‡(
tid
 > 0) {

822 
	`_eXosù_ˇŒ_å™ß˘i⁄_föd
(
exc⁄ãxt
, 
tid
, &
jc
, &
jd
, &
å
);

825 i‡(
jd
 =
NULL
 || 
å
 =NULL ||År->
‹ig_ªque°
 =NULL ||År->‹ig_ªque°->
sù_mëhod
 == NULL) {

826 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip]Ço call here orÇoÅransaction for call\n"));

827 
	`osù_mesßge_‰ì
(
™swî
);

828  
OSIP_NOTFOUND
;

831 i‡(
™swî
 =
NULL
) {

832 i‡(0 =
	`osù_°rˇ£cmp
(
å
->
‹ig_ªque°
->
sù_mëhod
, "INVITE")) {

833 i‡(
°©us
 >= 200 && status <= 299) {

834 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] wrongÖarameter\n"));

835 
	`osù_mesßge_‰ì
(
™swî
);

836  
OSIP_BADPARAMETER
;

842 i‡(
å
->
°©e
 =
IST_COMPLETED
 ||År->°©ê=
IST_CONFIRMED
 ||År->°©ê=
IST_TERMINATED
 ||År->°©ê=
NIST_COMPLETED
 ||År->°©ê=
NIST_TERMINATED
) {

843 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip]Åransactionálreadyánswered\n"));

844 
	`osù_mesßge_‰ì
(
™swî
);

845  
OSIP_WRONG_STATE
;

848 i‡(
™swî
 =
NULL
) {

849 i‡(0 =
	`osù_°rˇ£cmp
(
å
->
‹ig_ªque°
->
sù_mëhod
, "INVITE")) {

850 
osù_mesßge_t
 *
ª•⁄£
;

852  
	`_eXosù_™swî_övôe_123456xx
(
exc⁄ãxt
, 
jc
, 
jd
, 
°©us
, &
ª•⁄£
, 1);

855 
	`osù_mesßge_‰ì
(
™swî
);

856  
OSIP_BADPARAMETER
;

860 i‡(
	`MSG_IS_NOTIFY
(
å
->
‹ig_ªque°
)) {

861 i‡(
jd
 !
NULL
) {

862 
osù_hódî_t
 *
sub_°©e
;

863 
time_t
 
now
 = 
	`osù_gësy°emtime
(
NULL
);

866 
jd
->
im∂icô_subs¸ùti⁄_expúe_time
 = 0;

867 
	`osù_mesßge_hódî_gë_by«me
(
å
->
‹ig_ªque°
, "subs¸ùti⁄-°©e", 0, &
sub_°©e
);

869 i‡(
sub_°©e
 !
NULL
 && (sub_°©e->
hvÆue
 != NULL)) {

870 i‡(0 =
	`osù_°∫ˇ£cmp
(
sub_°©e
->
hvÆue
, "active", 6) || 0 == osip_strncasecmp(sub_state->hvalue, "pending", 7)) {

871 c⁄° *
tmp
 = 
	`°r°r
(
sub_°©e
->
hvÆue
 + 6, "expires");

872 c⁄° *
ss_expúes
 = 
NULL
;

874 
jd
->
im∂icô_subs¸ùti⁄_expúe_time
 = 
now
 + 
exc⁄ãxt
->
im∂icô_subs¸ùti⁄_expúes
;

876 i‡(
tmp
 !
NULL
) {

877 
ss_expúes
 = 
	`°rchr
(
tmp
 + 7, '=');

879 i‡(
ss_expúes
 !
NULL
) {

880 
exp
;

882 
ss_expúes
++;

883 
exp
 = 
	`osù_©oi
(
ss_expúes
);

885 i‡(
exp
 >= 0 &&Éxp < 600) {

886 
jd
->
im∂icô_subs¸ùti⁄_expúe_time
 = 
now
 + 
exp
;

891 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO3
, 
NULL
, "[eXosù] dülog m¨ked f‹ Im∂icôSubs¸ùti⁄ (did=%i)\n", 
jd
->
d_id
));

896 } i‡(
	`MSG_IS_REFER
(
å
->
‹ig_ªque°
)) {

897 i‡(
jd
 !
NULL
) {

899 
osù_hódî_t
 *
ª„r_sub
;

900 
time_t
 
now
 = 
	`osù_gësy°emtime
(
NULL
);

902 
	`osù_mesßge_hódî_gë_by«me
(
å
->
‹ig_ªque°
, "Re„r-Sub", 0, &
ª„r_sub
);

903 
jd
->
im∂icô_subs¸ùti⁄_expúe_time
 = 
now
 + 
exc⁄ãxt
->
im∂icô_subs¸ùti⁄_expúes
;

905 i‡((
ª„r_sub
 !
NULL
Ë&& (ª„r_sub->
hvÆue
 !NULLË&& (0 =
	`osù_°∫ˇ£cmp
(refer_sub->hvalue, "false", 5))) {

907 
jd
->
im∂icô_subs¸ùti⁄_expúe_time
 = 0;

908 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_WARNING
, 
NULL
, "[eXosù] dülog un-m¨ked f‹ Im∂icôSubs¸ùti⁄ (did=%i)\n", 
jd
->
d_id
));

913 i‡(0 =
	`osù_°rˇ£cmp
(
å
->
‹ig_ªque°
->
sù_mëhod
, "INVITE") || 0 == osip_strcasecmp(tr->orig_request->sip_method, "UPDATE")) {

914 i‡(
	`MSG_IS_STATUS_2XX
(
™swî
Ë&& 
jd
 !
NULL
) {

915 
osù_hódî_t
 *
suµ‹ãd
 = 
NULL
;

918 
suµ‹ãd
 = 
	`_eXosù_hódî_°rˇ£°r
(
™swî
, "supported", "k", "timer");

920 i‡(
suµ‹ãd
 !
NULL
) {

923 
osù_hódî_t
 *
£_exp
 = 
NULL
;

925 
	`osù_mesßge_hódî_gë_by«me
(
å
->
‹ig_ªque°
, "£ssi⁄-expúes", 0, &
£_exp
);

927 i‡(
£_exp
 =
NULL
)

928 
	`osù_mesßge_hódî_gë_by«me
(
å
->
‹ig_ªque°
, "x", 0, &
£_exp
);

930 i‡(
£_exp
 !
NULL
) {

931 
osù_hódî_t
 *
˝
 = 
NULL
;

933 
	`osù_hódî_˛⁄e
(
£_exp
, &
˝
);

935 i‡(
˝
 !
NULL
) {

936 
osù_c⁄ã¡_di•osôi⁄_t
 *
exp_h
 = 
NULL
;

939 
	`osù_c⁄ã¡_di•osôi⁄_öô
(&
exp_h
);

941 i‡(
exp_h
 =
NULL
) {

942 
	`osù_hódî_‰ì
(
˝
);

945 
	`osù_c⁄ã¡_di•osôi⁄_∑r£
(
exp_h
, 
£_exp
->
hvÆue
);

947 i‡(
exp_h
->
ñemít
 =
NULL
) {

948 
	`osù_c⁄ã¡_di•osôi⁄_‰ì
(
exp_h
);

949 
	`osù_hódî_‰ì
(
˝
);

950 
exp_h
 = 
NULL
;

953 
osù_gíîic_∑øm_t
 *
∑øm
 = 
NULL
;

955 
	`osù_gíîic_∑øm_gë_by«me
(&
exp_h
->
gí_∑øms
, "ª‰eshî", &
∑øm
);

957 i‡(
∑øm
 =
NULL
) {

958 
	`osù_gíîic_∑øm_add
(&
exp_h
->
gí_∑øms
, 
	`osù_°rdup
("refresher"), osip_strdup("uas"));

959 
	`osù_‰ì
(
˝
->
hvÆue
);

960 
˝
->
hvÆue
 = 
NULL
;

961 
	`osù_c⁄ã¡_di•osôi⁄_to_°r
(
exp_h
, &
˝
->
hvÆue
);

962 
jd
->
d_ª‰eshî
 = 0;

965 i‡(
	`osù_°rˇ£cmp
(
∑øm
->
gvÆue
, "uas") == 0)

966 
jd
->
d_ª‰eshî
 = 0;

969 
jd
->
d_ª‰eshî
 = 1;

972 
jd
->
d_£ssi⁄_timî_°¨t
 = 
	`osù_gësy°emtime
(
NULL
);

973 
jd
->
d_£ssi⁄_timî_Àngth
 = 
	`©oi
(
exp_h
->
ñemít
);

975 i‡(
jd
->
d_£ssi⁄_timî_Àngth
 <= 90)

976 
jd
->
d_£ssi⁄_timî_Àngth
 = 90;

978 
	`osù_li°_add
(&
™swî
->
hódîs
, 
˝
, 0);

982 i‡(
exp_h
)

983 
	`osù_c⁄ã¡_di•osôi⁄_‰ì
(
exp_h
);

985 
exp_h
 = 
NULL
;

988 
suµ‹ãd
 = 
	`_eXosù_hódî_°rˇ£°r
(
å
->
‹ig_ªque°
, "supported", "k", "timer");

990 i‡(
suµ‹ãd
 !
NULL
) {

991 
	`osù_mesßge_£t_hódî
(
™swî
, "Require", "timer");

999 i‡(0 =
	`osù_°rˇ£cmp
(
å
->
‹ig_ªque°
->
sù_mëhod
, "INVITE")) {

1000 i‡(
	`MSG_IS_STATUS_2XX
(
™swî
Ë&& 
jd
 !
NULL
) {

1001 i‡(
°©us
 >200 && sètu†< 300 && 
jd
 !
NULL
) {

1002 
	`_eXosù_dülog_£t_200ok
(
jd
, 
™swî
);

1004 
	`osù_dülog_£t_°©e
(
jd
->
d_dülog
, 
DIALOG_CONFIRMED
);

1009 
evt_™swî
 = 
	`osù_√w_outgoög_sùmesßge
(
™swî
);

1010 
evt_™swî
->
å™ß˘i⁄id
 = 
å
->transactionid;

1012 
	`osù_å™ß˘i⁄_add_evít
(
å
, 
evt_™swî
);

1013 
	`_eXosù_upd©e
(
exc⁄ãxt
);

1014 
	`_eXosù_wakeup
(
exc⁄ãxt
);

1015  
OSIP_SUCCESS
;

1016 
	}
}

1018 
	$eXosù_ˇŒ_ãrmö©e
(
eXosù_t
 *
exc⁄ãxt
, 
cid
, 
did
) {

1019  
	`eXosù_ˇŒ_ãrmö©e_wôh_hódî
(
exc⁄ãxt
, 
cid
, 
did
, 
NULL
, NULL);

1020 
	}
}

1022 
	$eXosù_ˇŒ_ãrmö©e_wôh_ªas⁄
(
eXosù_t
 *
exc⁄ãxt
, 
cid
, 
did
, c⁄° *
ªas⁄
) {

1023  
	`eXosù_ˇŒ_ãrmö©e_wôh_hódî
(
exc⁄ãxt
, 
cid
, 
did
, "Rós⁄", 
ªas⁄
);

1024 
	}
}

1026 
	$eXosù_ˇŒ_ãrmö©e_wôh_hódî
(
eXosù_t
 *
exc⁄ãxt
, 
cid
, 
did
, c⁄° *
hódî_«me
, c⁄° *
hódî_vÆue
) {

1027 
i
;

1028 
osù_å™ß˘i⁄_t
 *
å
;

1029 
osù_mesßge_t
 *
ªque°
 = 
NULL
;

1030 
eXosù_dülog_t
 *
jd
 = 
NULL
;

1031 
eXosù_ˇŒ_t
 *
jc
 = 
NULL
;

1033 i‡(
did
 <0 && 
cid
 <= 0)

1034  
OSIP_BADPARAMETER
;

1036 i‡(
did
 > 0) {

1037 
	`_eXosù_ˇŒ_dülog_föd
(
exc⁄ãxt
, 
did
, &
jc
, &
jd
);

1039 i‡(
jd
 =
NULL
) {

1040 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip]Ço call here\n"));

1041  
OSIP_NOTFOUND
;

1045 
	`_eXosù_ˇŒ_föd
(
exc⁄ãxt
, 
cid
, &
jc
);

1048 i‡(
jc
 =
NULL
) {

1049  
OSIP_NOTFOUND
;

1052 
å
 = 
	`_eXosù_föd_œ°_out_övôe
(
jc
, 
jd
);

1054 i‡(
jd
 !
NULL
 && jd->
d_dülog
 !NULL && jd->d_dülog->
°©e
 =
DIALOG_CONFIRMED
) {

1056 } i‡(
å
 !
NULL
 &&År->
œ°_ª•⁄£
 !NULL && 
	`MSG_IS_STATUS_1XX
(tr->last_response)) {

1057 
i
 = 
	`_eXosù_gíî©ög_ˇn˚l
(
exc⁄ãxt
, &
ªque°
, 
å
->
‹ig_ªque°
);

1059 i‡(
i
 != 0) {

1060 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] cannotÅerminateÅhis call\n"));

1061  
i
;

1064 i‡(
hódî_«me
 !
NULL
 && 
hódî_vÆue
 != NULL) {

1065 
	`osù_mesßge_£t_hódî
(
ªque°
, 
hódî_«me
, 
hódî_vÆue
);

1068 
i
 = 
	`eXosù_¸óã_ˇn˚l_å™ß˘i⁄
(
exc⁄ãxt
, 
jc
, 
jd
, 
ªque°
);

1070 i‡(
i
 != 0) {

1071 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] cannot initiate SIPÅransaction\n"));

1072  
i
;

1075 i‡(
jd
 !
NULL
) {

1082  
OSIP_SUCCESS
 + 1;

1085 i‡(
jd
 =
NULL
 || jd->
d_dülog
 == NULL) {

1086 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip]ÇoÉstablished dialog\n"));

1087  
OSIP_WRONG_STATE
;

1090 i‡(
å
 =
NULL
) {

1092 
å
 = 
	`_eXosù_föd_œ°_öc_övôe
(
jc
, 
jd
);

1094 i‡(
å
 !
NULL
 &&År->
œ°_ª•⁄£
 !NULL && 
	`MSG_IS_STATUS_1XX
(tr->last_response)) {

1095 
osù_gíîic_∑øm_t
 *
to_èg
;

1097 
	`osù_‰om_∑øm_gë_by«me
(
å
->
‹ig_ªque°
->
to
, "èg", &
to_èg
);

1099 
i
 = 
	`eXosù_ˇŒ_buûd_™swî
(
exc⁄ãxt
, 
å
->
å™ß˘i⁄id
, 603, &
ªque°
);

1101 i‡(
hódî_«me
 !
NULL
 && 
hódî_vÆue
 != NULL) {

1102 
	`osù_mesßge_£t_hódî
(
ªque°
, 
hódî_«me
, 
hódî_vÆue
);

1105 
i
 = 
	`eXosù_ˇŒ_£nd_™swî
(
exc⁄ãxt
, 
å
->
å™ß˘i⁄id
, 603, 
ªque°
);

1107 i‡(
to_èg
 =
NULL
)

1108  
i
;

1112 i‡(
jd
->
d_dülog
 =
NULL
) {

1113 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] cannotÅerminateÅhis call\n"));

1114  
OSIP_WRONG_STATE
;

1117 
i
 = 
	`_eXosù_gíî©ög_bye
(
exc⁄ãxt
, &
ªque°
, 
jd
->
d_dülog
);

1119 i‡(
i
 != 0) {

1120 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] cannotÅerminateÅhis call\n"));

1121  
i
;

1124 i‡(
hódî_«me
 !
NULL
 && 
hódî_vÆue
 != NULL) {

1125 
	`osù_mesßge_£t_hódî
(
ªque°
, 
hódî_«me
, 
hódî_vÆue
);

1128 
	`_eXosù_add_authítiˇti⁄_öf‹m©i⁄
(
exc⁄ãxt
, 
ªque°
, 
NULL
);

1130 
i
 = 
	`eXosù_¸óã_å™ß˘i⁄
(
exc⁄ãxt
, 
jc
, 
jd
, 
ªque°
);

1132 i‡(
i
 != 0) {

1133 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] cannot initiate SIPÅransaction\n"));

1134  
i
;

1137 i‡(
jd
->
im∂icô_subs¸ùti⁄_expúe_time
 == 0) {

1138 
	`osù_dülog_‰ì
(
jd
->
d_dülog
);

1139 
jd
->
d_dülog
 = 
NULL
;

1142 
	`_eXosù_upd©e
(
exc⁄ãxt
);

1143  
OSIP_SUCCESS
;

1144 
	}
}

1146 #i‚de‡
MINISIZE


1148 
	$eXosù_ˇŒ_buûd_¥ack
(
eXosù_t
 *
exc⁄ãxt
, 
tid
, 
osù_mesßge_t
 *
ª•⁄£1xx
, osù_mesßge_à**
¥ack
) {

1149 
osù_li°_ôî©‹_t
 
ô
;

1150 
eXosù_dülog_t
 *
jd
 = 
NULL
;

1151 
eXosù_ˇŒ_t
 *
jc
 = 
NULL
;

1152 
osù_å™ß˘i⁄_t
 *
å
 = 
NULL
;

1153 
osù_å™ß˘i⁄_t
 *
ﬁd_¥ack_å
 = 
NULL
;

1154 
tmp
[128];

1156 
osù_hódî_t
 *
r£q
;

1157 
i
;

1159 *
¥ack
 = 
NULL
;

1161 i‡(
tid
 < 0)

1162  
OSIP_BADPARAMETER
;

1164 i‡(
tid
 > 0) {

1165 
	`_eXosù_ˇŒ_å™ß˘i⁄_föd
(
exc⁄ãxt
, 
tid
, &
jc
, &
jd
, &
å
);

1168 i‡(
jc
 =
NULL
 || 
jd
 =NULL || jd->
d_dülog
 =NULL || 
å
 =NULL ||År->
‹ig_ªque°
 =NULL ||År->‹ig_ªque°->
sù_mëhod
 == NULL) {

1169 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip]Ço call here orÇoÅransaction for call\n"));

1170  
OSIP_NOTFOUND
;

1173 i‡(0 !
	`osù_°rˇ£cmp
(
å
->
‹ig_ªque°
->
sù_mëhod
, "INVITE"))

1174  
OSIP_BADPARAMETER
;

1177 i‡(
å
->
°©e
 !
ICT_PROCEEDING
)

1178  
OSIP_WRONG_STATE
;

1180 i‡(
å
->
‹ig_ªque°
->
c£q
 =
NULL
 ||År->‹ig_ªque°->c£q->
numbî
 =NULL ||År->‹ig_ªque°->c£q->
mëhod
 == NULL)

1181  
OSIP_SYNTAXERROR
;

1183 
	`osù_mesßge_hódî_gë_by«me
(
ª•⁄£1xx
, "RSeq", 0, &
r£q
);

1185 i‡(
r£q
 =
NULL
 ||Ñ£q->
hvÆue
 == NULL) {

1186  
OSIP_WRONG_FORMAT
;

1189 
	`mem£t
(
tmp
, '\0', (tmp));

1190 
	`¢¥ötf
(
tmp
, 127, "%†%†%s", 
r£q
->
hvÆue
, 
å
->
‹ig_ªque°
->
c£q
->
numbî
,År->‹ig_ªque°->c£q->
mëhod
);

1192 
ﬁd_¥ack_å
 = (
osù_å™ß˘i⁄_t
 *Ë
	`osù_li°_gë_fú°
(
jd
->
d_out_ås
, &
ô
);

1194 
ﬁd_¥ack_å
 !
NULL
) {

1195 i‡(
ﬁd_¥ack_å
->
‹ig_ªque°
 !
NULL
 && 0 =
	`osù_°rˇ£cmp
(ﬁd_¥ack_å->‹ig_ªque°->
sù_mëhod
, "PRACK"Ë&& 
OSIP_SUCCESS
 =
	`osù_to_èg_m©ch
(ﬁd_¥ack_å->‹ig_ªque°->
to
, 
ª•⁄£1xx
->to)) {

1196 
osù_hódî_t
 *
øck_hódî
 = 
NULL
;

1198 
	`osù_mesßge_hódî_gë_by«me
(
ﬁd_¥ack_å
->
‹ig_ªque°
, "RAck", 0, &
øck_hódî
);

1200 i‡(
øck_hódî
 !
NULL
 &&Ñack_hódî->
hvÆue
 !NULL && 0 =
	`osù_°rˇ£cmp
‘ack_hódî->hvÆue, 
tmp
)) {

1201 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosip] PRACKálreadyáctive forÜastánswer\n"));

1202  
OSIP_WRONG_STATE
;

1206 
ﬁd_¥ack_å
 = (
osù_å™ß˘i⁄_t
 *Ë
	`osù_li°_gë_√xt
(&
ô
);

1210 
osù_dülog_t
 *
_1xxok_dülog
 = 
NULL
;

1212 
i
 = 
	`osù_dülog_öô_as_uac
(&
_1xxok_dülog
, 
ª•⁄£1xx
);

1214 i‡(
i
 != 0) {

1215 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] cannot buildá dialog forÅhis 1xxánswer\n"));

1216  
OSIP_WRONG_STATE
;

1220 
_1xxok_dülog
->
loˇl_c£q
 = 
jd
->
d_dülog
->local_cseq;

1221 
i
 = 
	`_eXosù_buûd_ªque°_wôhö_dülog
(
exc⁄ãxt
, 
¥ack
, "PRACK", 
_1xxok_dülog
);

1224 
jd
->
d_dülog
->
loˇl_c£q
++;

1226 
	`osù_dülog_‰ì
(
_1xxok_dülog
);

1228 i‡(
i
 != 0)

1229  
i
;

1232 
	`osù_mesßge_£t_hódî
(*
¥ack
, "RAck", 
tmp
);

1234  
OSIP_SUCCESS
;

1235 
	}
}

1237 
	$eXosù_ˇŒ_£nd_¥ack
(
eXosù_t
 *
exc⁄ãxt
, 
tid
, 
osù_mesßge_t
 *
¥ack
) {

1238 
eXosù_dülog_t
 *
jd
 = 
NULL
;

1239 
eXosù_ˇŒ_t
 *
jc
 = 
NULL
;

1240 
osù_å™ß˘i⁄_t
 *
å
 = 
NULL
;

1242 
osù_evít_t
 *
sùevít
;

1243 
i
;

1245 i‡(
tid
 < 0)

1246  
OSIP_BADPARAMETER
;

1248 i‡(
¥ack
 =
NULL
)

1249  
OSIP_BADPARAMETER
;

1251 i‡(
tid
 > 0) {

1252 
	`_eXosù_ˇŒ_å™ß˘i⁄_föd
(
exc⁄ãxt
, 
tid
, &
jc
, &
jd
, &
å
);

1255 i‡(
jc
 =
NULL
 || 
jd
 =NULL || jd->
d_dülog
 =NULL || 
å
 =NULL ||År->
‹ig_ªque°
 =NULL ||År->‹ig_ªque°->
sù_mëhod
 == NULL) {

1256 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip]Ço call here orÇoÅransaction for call\n"));

1257 
	`osù_mesßge_‰ì
(
¥ack
);

1258  
OSIP_NOTFOUND
;

1261 i‡(0 !
	`osù_°rˇ£cmp
(
å
->
‹ig_ªque°
->
sù_mëhod
, "INVITE")) {

1262 
	`osù_mesßge_‰ì
(
¥ack
);

1263  
OSIP_BADPARAMETER
;

1267 i‡(
å
->
°©e
 !
ICT_PROCEEDING
) {

1268 
	`osù_mesßge_‰ì
(
¥ack
);

1269  
OSIP_WRONG_STATE
;

1272 
å
 = 
NULL
;

1273 
i
 = 
	`_eXosù_å™ß˘i⁄_öô
(
exc⁄ãxt
, &
å
, 
NICT
,Éxc⁄ãxt->
j_osù
, 
¥ack
);

1275 i‡(
i
 != 0) {

1276 
	`osù_mesßge_‰ì
(
¥ack
);

1277  
i
;

1280 
	`osù_li°_add
(
jd
->
d_out_ås
, 
å
, 0);

1282 
sùevít
 = 
	`osù_√w_outgoög_sùmesßge
(
¥ack
);

1283 
sùevít
->
å™ß˘i⁄id
 = 
å
->transactionid;

1285 
	`osù_å™ß˘i⁄_£t_ª£rved2
(
å
, 
jc
);

1286 
	`osù_å™ß˘i⁄_£t_ª£rved3
(
å
, 
jd
);

1288 
	`osù_å™ß˘i⁄_add_evít
(
å
, 
sùevít
);

1289 
	`_eXosù_wakeup
(
exc⁄ãxt
);

1290  
OSIP_SUCCESS
;

1291 
	}
}

1295 
	$_eXosù_ˇŒ_ªåy_ªque°
(
eXosù_t
 *
exc⁄ãxt
, 
eXosù_ˇŒ_t
 *
jc
, 
eXosù_dülog_t
 *
jd
, 
osù_å™ß˘i⁄_t
 *
out_å
) {

1296 
osù_å™ß˘i⁄_t
 *
å
 = 
NULL
;

1297 
osù_mesßge_t
 *
msg
 = 
NULL
;

1298 
osù_evít_t
 *
sùevít
;

1300 
c£q
;

1301 
osù_vü_t
 *
vü
;

1302 
osù_c⁄è˘_t
 *
co
;

1303 
i
;

1305 i‡(
jc
 =
NULL
)

1306  
OSIP_BADPARAMETER
;

1308 i‡(
jd
 !
NULL
) {

1309 i‡(
jd
->
d_out_ås
 =
NULL
)

1310  
OSIP_BADPARAMETER
;

1313 i‡(
out_å
 =
NULL
 || out_å->
‹ig_ªque°
 =NULL || out_å->
œ°_ª•⁄£
 == NULL)

1314  
OSIP_BADPARAMETER
;

1316 
i
 = 
	`osù_mesßge_˛⁄e
(
out_å
->
‹ig_ªque°
, &
msg
);

1318 i‡(
i
 != 0) {

1319 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] cannot clone msg foráuthentication\n"));

1320  
i
;

1323 
vü
 = (
osù_vü_t
 *Ë
	`osù_li°_gë
(&
msg
->
vüs
, 0);

1325 i‡(
vü
 =
NULL
 || 
msg
->
c£q
 =NULL || msg->c£q->
numbî
 == NULL) {

1326 
	`osù_mesßge_‰ì
(
msg
);

1327 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] missing via or cseq header\n"));

1328  
OSIP_SYNTAXERROR
;

1331 i‡(
	`MSG_IS_STATUS_3XX
(
out_å
->
œ°_ª•⁄£
)) {

1332 
osù_c⁄è˘_t
 *
co_ußbÀ
 = 
NULL
;

1333 
osù_li°_ôî©‹_t
 
ô
;

1335 
co
 = (
osù_c⁄è˘_t
 *Ë
	`osù_li°_gë_fú°
(&
out_å
->
œ°_ª•⁄£
->
c⁄è˘s
, &
ô
);

1337 
co
 !
NULL
) {

1338 i‡(
co
->
uæ
 !
NULL
 && co->uæ->
scheme
 !NULL && (
	`osù_°rˇ£°r
(co->url->scheme, "sip") != NULL || osip_strcasestr(co->url->scheme, "tel") != NULL)) {

1340 
osù_uri_∑øm_t
 *
u_∑øm
;

1342 
u_∑øm
 = 
NULL
;

1343 
	`osù_uri_u∑øm_gë_by«me
(
co
->
uæ
, "å™•‹t", &
u_∑øm
);

1345 i‡(
u_∑øm
 =
NULL
 || u_∑øm->
g«me
 =NULL || u_∑øm->
gvÆue
 == NULL) {

1346 i‡(0 =
	`osù_°rˇ£cmp
(
exc⁄ãxt
->
å™•‹t
, "udp"))

1349 } i‡(0 =
	`osù_°rˇ£cmp
(
u_∑øm
->
gvÆue
, 
exc⁄ãxt
->
å™•‹t
)) {

1353 i‡(
co_ußbÀ
 =
NULL
)

1354 
co_ußbÀ
 = 
co
;

1357 
co
 = (
osù_c⁄è˘_t
 *Ë
	`osù_li°_gë_√xt
(&
ô
);

1360 i‡(
co
 =
NULL
 || co->
uæ
 =NULL || co->uæ->
scheme
 == NULL) {

1362 
co
 = 
co_ußbÀ
;

1365 i‡(
co
 =
NULL
 || co->
uæ
 =NULL || co->uæ->
scheme
 == NULL) {

1366 
	`osù_mesßge_‰ì
(
msg
);

1367 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_WARNING
, 
NULL
, "[eXosip]Ço contact header usable for SIPÑedirection\n"));

1368  
OSIP_SYNTAXERROR
;

1376 i‡(
msg
->
ªq_uri
 !
NULL
 && msg->ªq_uri->
ho°
 !NULL && 
co
->
uæ
->ho° !NULL && 0 =
	`osù_°rˇ£cmp
(co->url->host, msg->req_uri->host)) {

1377 
osù_uri_∑øm_t
 *
maddr_∑øm
 = 
NULL
;

1379 
	`osù_uri_u∑øm_gë_by«me
(
co
->
uæ
, "maddr", &
maddr_∑øm
);

1381 i‡(
maddr_∑øm
 !
NULL
 && maddr_∑øm->
gvÆue
 != NULL) {

1383 
osù_rouã_t
 *
rouã
 = 
NULL
;

1384 
osù_gíîic_∑øm_t
 *
èg
 = 
NULL
;

1386 
	`osù_mesßge_gë_rouã
(
msg
, 0, &
rouã
);

1388 i‡(
rouã
 !
NULL
) {

1389 
	`osù_to_gë_èg
(
msg
->
to
, &
èg
);

1391 i‡(
èg
 =
NULL
 && 
rouã
 !NULL &&Ñouã->
uæ
 != NULL) {

1392 
	`osù_li°_ªmove
(&
msg
->
rouãs
, 0);

1393 
	`osù_rouã_‰ì
(
rouã
);

1400 
	`osù_uri_‰ì
(
msg
->
ªq_uri
);

1401 
msg
->
ªq_uri
 = 
NULL
;

1402 
i
 = 
	`osù_uri_˛⁄e
(
co
->
uæ
, &
msg
->
ªq_uri
);

1404 i‡(
i
 != 0) {

1405 
	`osù_mesßge_‰ì
(
msg
);

1406  
i
;

1411 
osù_hódî_t
 *
hód
 = (osù_hódî_à*Ë
	`osù_li°_gë_fú°
(&
out_å
->
œ°_ª•⁄£
->
hódîs
, &
ô
);

1413 
hód
 !
NULL
) {

1414 
osù_hódî_t
 *
c›y
 = 
NULL
;

1416 i‡(0 =
	`osù_°rˇ£cmp
(
hód
->
h«me
, "diversion")) {

1417 
i
 = 
	`osù_hódî_˛⁄e
(
hód
, &
c›y
);

1419 i‡(
i
 == 0) {

1420 
	`osù_li°_add
(&
msg
->
hódîs
, 
c›y
, -1);

1424 
hód
 = (
osù_hódî_t
 *Ë
	`osù_li°_gë_√xt
(&
ô
);

1430 
	`osù_li°_•ecül_‰ì
(&
msg
->
auth‹iz©i⁄s
, ((*)(*)Ë& 
osù_auth‹iz©i⁄_‰ì
);

1431 
	`osù_li°_•ecül_‰ì
(&
msg
->
¥oxy_auth‹iz©i⁄s
, ((*)(*)Ë& 
osù_¥oxy_auth‹iz©i⁄_‰ì
);

1434 
c£q
 = 
	`©oi
(
msg
->c£q->
numbî
);

1435 
	`osù_‰ì
(
msg
->
c£q
->
numbî
);

1436 
msg
->
c£q
->
numbî
 = 
	`_eXosù_°rdup_¥ötf
("%i", cseq + 1);

1438 i‡(
jd
 !
NULL
 && jd->
d_dülog
 != NULL) {

1439 
jd
->
d_dülog
->
loˇl_c£q
++;

1442 
i
 = 
	`_eXosù_upd©e_t›_vü
(
msg
);

1444 i‡(
i
 != 0) {

1445 
	`osù_mesßge_‰ì
(
msg
);

1446  
i
;

1449 i‡(
out_å
->
œ°_ª•⁄£
->
°©us_code
 == 422) {

1451 
osù_hódî_t
 *
exp
;

1452 
osù_hódî_t
 *
mö_£
;

1455 
osù_c⁄ã¡_di•osôi⁄_t
 *
exp_h
 = 
NULL
;

1456 
osù_c⁄ã¡_di•osôi⁄_t
 *
mö_£_h
 = 
NULL
;

1458 
	`osù_mesßge_hódî_gë_by«me
(
msg
, "£ssi⁄-expúes", 0, &
exp
);

1460 i‡(
exp
 =
NULL
)

1461 
	`osù_mesßge_hódî_gë_by«me
(
msg
, "x", 0, &
exp
);

1463 
	`osù_mesßge_hódî_gë_by«me
(
out_å
->
œ°_ª•⁄£
, "mö-£", 0, &
mö_£
);

1465 i‡(
exp
 !
NULL
 &&Éxp->
hvÆue
 !NULL && 
mö_£
 != NULL && min_se->hvalue != NULL) {

1466 
	`osù_c⁄ã¡_di•osôi⁄_öô
(&
exp_h
);

1467 
	`osù_c⁄ã¡_di•osôi⁄_öô
(&
mö_£_h
);

1469 i‡(
exp_h
 =
NULL
 || 
mö_£_h
 == NULL) {

1470 
	`osù_c⁄ã¡_di•osôi⁄_‰ì
(
exp_h
);

1471 
	`osù_c⁄ã¡_di•osôi⁄_‰ì
(
mö_£_h
);

1472 
exp_h
 = 
NULL
;

1473 
mö_£_h
 = 
NULL
;

1476 
	`osù_c⁄ã¡_di•osôi⁄_∑r£
(
exp_h
, 
exp
->
hvÆue
);

1477 
	`osù_c⁄ã¡_di•osôi⁄_∑r£
(
mö_£_h
, 
mö_£
->
hvÆue
);

1479 i‡(
exp_h
->
ñemít
 =
NULL
 || 
mö_£_h
->element == NULL) {

1480 
	`osù_c⁄ã¡_di•osôi⁄_‰ì
(
exp_h
);

1481 
	`osù_c⁄ã¡_di•osôi⁄_‰ì
(
mö_£_h
);

1482 
exp_h
 = 
NULL
;

1483 
mö_£_h
 = 
NULL
;

1488 i‡(
exp_h
 !
NULL
 &&Éxp_h->
ñemít
 !NULL && 
mö_£_h
 != NULL && min_se_h->element != NULL) {

1489 
osù_hódî_t
 *
mö_£_√w
 = 
NULL
;

1490 
mö£_√w
[32];

1492 
	`mem£t
(
mö£_√w
, 0, (minse_new));

1494 
	`osù_‰ì
(
exp_h
->
ñemít
);

1495 
exp_h
->
ñemít
 = 
	`osù_°rdup
(
mö_£_h
->element);

1498 
	`osù_‰ì
(
exp
->
hvÆue
);

1499 
exp
->
hvÆue
 = 
NULL
;

1500 
	`osù_c⁄ã¡_di•osôi⁄_to_°r
(
exp_h
, &
exp
->
hvÆue
);

1503 
	`osù_mesßge_hódî_gë_by«me
(
msg
, "mö-£", 0, &
mö_£_√w
);

1505 i‡(
mö_£_√w
 !
NULL
 && mö_£_√w->
hvÆue
 != NULL) {

1506 
	`osù_‰ì
(
mö_£_√w
->
hvÆue
);

1507 
mö_£_√w
->
hvÆue
 = 
	`osù_°rdup
(
mö_£_h
->
ñemít
);

1510 
	`osù_mesßge_£t_hódî
(
msg
, "Mö-SE", 
mö_£_h
->
ñemít
);

1514 
	`osù_mesßge_‰ì
(
msg
);

1515 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] missing Min-SE or Session-Expires in dialog\n"));

1516  
OSIP_SYNTAXERROR
;

1519 
	`osù_c⁄ã¡_di•osôi⁄_‰ì
(
exp_h
);

1520 
	`osù_c⁄ã¡_di•osôi⁄_‰ì
(
mö_£_h
);

1523 
osù_hódî_t
 *
exp
;

1525 
	`osù_mesßge_hódî_gë_by«me
(
msg
, "£ssi⁄-expúes", 0, &
exp
);

1527 i‡(
exp
 =
NULL
) {

1528 
	`osù_mesßge_hódî_gë_by«me
(
msg
, "x", 0, &
exp
);

1531 i‡(
exp
 =
NULL
) {

1536 i‡(
out_å
->
œ°_ª•⁄£
->
°©us_code
 == 401 || out_tr->last_response->status_code == 407)

1537 
	`_eXosù_add_authítiˇti⁄_öf‹m©i⁄
(
exc⁄ãxt
, 
msg
, 
out_å
->
œ°_ª•⁄£
);

1540 
	`_eXosù_add_authítiˇti⁄_öf‹m©i⁄
(
exc⁄ãxt
, 
msg
, 
NULL
);

1542 
	`osù_mesßge_f‹˚_upd©e
(
msg
);

1544 i‡(0 !
	`osù_°rˇ£cmp
(
msg
->
sù_mëhod
, "INVITE")) {

1545 
i
 = 
	`_eXosù_å™ß˘i⁄_öô
(
exc⁄ãxt
, &
å
, 
NICT
,Éxc⁄ãxt->
j_osù
, 
msg
);

1548 
i
 = 
	`_eXosù_å™ß˘i⁄_öô
(
exc⁄ãxt
, &
å
, 
ICT
,Éxc⁄ãxt->
j_osù
, 
msg
);

1551 i‡(
i
 != 0) {

1552 
	`osù_mesßge_‰ì
(
msg
);

1553  
i
;

1556 i‡(
out_å
 =
jc
->
c_out_å
) {

1558 
	`osù_li°_add
(&
exc⁄ãxt
->
j_å™ß˘i⁄s
, 
jc
->
c_out_å
, 0);

1559 
jc
->
c_out_å
 = 
å
;

1562 i‡(
jd
 !
NULL
) {

1563 
	`REMOVE_ELEMENT
(
jc
->
c_dülogs
, 
jd
);

1564 
	`_eXosù_dülog_‰ì
(
exc⁄ãxt
, 
jd
);

1565 
jd
 = 
NULL
;

1570 
	`osù_li°_add
(
jd
->
d_out_ås
, 
å
, 0);

1573 
sùevít
 = 
	`osù_√w_outgoög_sùmesßge
(
msg
);

1575 
	`osù_å™ß˘i⁄_£t_ª£rved2
(
å
, 
jc
);

1576 
	`osù_å™ß˘i⁄_£t_ª£rved3
(
å
, 
jd
);

1578 
	`osù_å™ß˘i⁄_add_evít
(
å
, 
sùevít
);

1580 
	`_eXosù_upd©e
(
exc⁄ãxt
);

1581 
	`_eXosù_wakeup
(
exc⁄ãxt
);

1582  
OSIP_SUCCESS
;

1583 
	}
}

1585 #i‚de‡
MINISIZE


1587 
	$eXosù_ˇŒ_gë_ª„πo
(
eXosù_t
 *
exc⁄ãxt
, 
did
, *
ª„r_to
, 
size_t
 
ª„r_to_Àn
) {

1588 
eXosù_dülog_t
 *
jd
 = 
NULL
;

1589 
eXosù_ˇŒ_t
 *
jc
 = 
NULL
;

1590 
osù_å™ß˘i⁄_t
 *
å
 = 
NULL
;

1591 
osù_uri_t
 *
ª„πo_uri
;

1592 
©mp
[256];

1593 *
ª„πo_tmp
 = 
NULL
;

1594 
i
;

1596 i‡(
did
 <= 0)

1597  
OSIP_BADPARAMETER
;

1599 
	`_eXosù_ˇŒ_dülog_föd
(
exc⁄ãxt
, 
did
, &
jc
, &
jd
);

1601 i‡(
jc
 =
NULL
 || 
jd
 =NULL || jd->
d_dülog
 == NULL) {

1602 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip]Ço call here\n"));

1603  
OSIP_NOTFOUND
;

1606 
å
 = 
	`_eXosù_föd_œ°_övôe
(
jc
, 
jd
);

1608 i‡(
å
 =
NULL
 ||År->
‹ig_ªque°
 == NULL) {

1609 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip]ÇoÅransaction for call\n"));

1610  
OSIP_NOTFOUND
;

1613 
i
 = 
	`osù_uri_˛⁄e
(
jd
->
d_dülog
->
ªmŸe_uri
->
uæ
, &
ª„πo_uri
);

1615 i‡(
i
 != 0)

1616  
i
;

1618 
	`¢¥ötf
(
©mp
, ◊tmp), "%s;to-èg=%s;‰om-èg=%s", 
jd
->
d_dülog
->
ˇŒ_id
, jd->d_dülog->
ªmŸe_èg
, jd->d_dülog->
loˇl_èg
);

1620 
	`osù_uri_uhódî_add
(
ª„πo_uri
, 
	`osù_°rdup
("Rïœ˚s"), osù_°rdup(
©mp
));

1621 
i
 = 
	`osù_uri_to_°r
(
ª„πo_uri
, &
ª„πo_tmp
);

1623 i‡(
i
 != 0) {

1624 
	`osù_uri_‰ì
(
ª„πo_uri
);

1625  
i
;

1628 
	`¢¥ötf
(
ª„r_to
, 
ª„r_to_Àn
, "%s", 
ª„πo_tmp
);

1629 
	`osù_uri_‰ì
(
ª„πo_uri
);

1630 
	`osù_‰ì
(
ª„πo_tmp
);

1632  
OSIP_SUCCESS
;

1633 
	}
}

1635 
	$eXosù_ˇŒ_föd_by_ª∂a˚s
(
eXosù_t
 *
exc⁄ãxt
, *
ª∂a˚s_°r
) {

1636 
eXosù_ˇŒ_t
 *
jc
 = 
NULL
;

1637 
eXosù_dülog_t
 *
jd
 = 
NULL
;

1638 *
ˇŒ_id
;

1639 *
to_èg
;

1640 *
‰om_èg
;

1641 *
óæy_Êag
;

1642 *
£micﬁ⁄
;

1643 *
tŸag_°r
 = (*) "to-tag=";

1644 *
‰omèg_°r
 = (*) "from-tag=";

1645 *
óæy⁄ly_°r
 = (*) "early-only";

1648 i‡(
ª∂a˚s_°r
 =
NULL
)

1649  
OSIP_SYNTAXERROR
;

1651 
ˇŒ_id
 = 
	`osù_°rdup
(
ª∂a˚s_°r
);

1653 i‡(
ˇŒ_id
 =
NULL
)

1654  
OSIP_NOMEM
;

1657 
to_èg
 = 
	`°r°r
(
ˇŒ_id
, 
tŸag_°r
);

1658 
‰om_èg
 = 
	`°r°r
(
ˇŒ_id
, 
‰omèg_°r
);

1659 
óæy_Êag
 = 
	`°r°r
(
ˇŒ_id
, 
óæy⁄ly_°r
);

1661 i‡((
to_èg
 =
NULL
Ë|| (
‰om_èg
 == NULL)) {

1662 
	`osù_‰ì
(
ˇŒ_id
);

1663  
OSIP_SYNTAXERROR
;

1666 
to_èg
 +
	`°æí
(
tŸag_°r
);

1667 
‰om_èg
 +
	`°æí
(
‰omèg_°r
);

1669 (
£micﬁ⁄
 = 
	`°ºchr
(
ˇŒ_id
, ';')Ë!
NULL
) {

1670 *
£micﬁ⁄
 = '\0';

1673 
jc
 = 
exc⁄ãxt
->
j_ˇŒs
; j¯!
NULL
; j¯jc->
√xt
) {

1674 
jd
 = 
jc
->
c_dülogs
; jd !
NULL
; jd = jd->
√xt
) {

1675 i‡(
jd
->
d_dülog
 =
NULL
) {

1677 } i‡(((0 =
	`°rcmp
(
jd
->
d_dülog
->
ˇŒ_id
, cÆl_id)Ë&& (0 =°rcmp(jd->d_dülog->
ªmŸe_èg
, 
to_èg
)Ë&& (0 =°rcmp(jd->d_dülog->
loˇl_èg
, 
‰om_èg
))) ||

1678 ((0 =
	`°rcmp
(
jd
->
d_dülog
->
ˇŒ_id
, cÆl_id)Ë&& (0 =°rcmp(jd->d_dülog->
loˇl_èg
, 
to_èg
)Ë&& (0 =°rcmp(jd->d_dülog->
ªmŸe_èg
, 
‰om_èg
)))) {

1680 i‡(
jd
->
d_dülog
->
°©e
 =
DIALOG_CONFIRMED
 && 
óæy_Êag
 !
NULL
) {

1681 
	`osù_‰ì
(
ˇŒ_id
);

1682  
OSIP_WRONG_STATE
;

1685 i‡(
jd
->
d_dülog
->
°©e
 =
DIALOG_EARLY
 && jd->d_dülog->
ty≥
 =
CALLEE
) {

1686 
	`osù_‰ì
(
ˇŒ_id
);

1687  
OSIP_BADPARAMETER
;

1690 
	`osù_‰ì
(
ˇŒ_id
);

1691  
jc
->
c_id
;

1696 
	`osù_‰ì
(
ˇŒ_id
);

1697  
OSIP_NOTFOUND
;

1698 
	}
}

	@/home/unasaw/sip_project/libexosip2-5.3.0/src/eXconf.c

33 
	~"eXosù2.h
"

34 
	~<eXosù2/eXosù.h
>

36 
	~<osù2/osù_mt.h
>

37 
	~<osù2/osù_c⁄dv.h
>

39 #i‡!
deföed
(
HAVE_INET_NTOP
)

40 
	~"öë_¡›.h
"

43 #i‚de‡
INET6_ADDRSTRLEN


44 
	#INET6_ADDRSTRLEN
 65

	)

47 #i‚de‡
OSIP_MONOTHREAD


48 *
_eXosù_thªad
(*
¨g
);

50 
_eXosù_kìp_Æive
(
eXosù_t
 *
exc⁄ãxt
);

52 c⁄° *
	$eXosù_gë_vîsi⁄
() {

53  
EXOSIP_VERSION
;

54 
	}
}

56 
	$eXosù_£t_cbsù_mesßge
(
eXosù_t
 *
exc⁄ãxt
, 
CbSùCÆlback
 
cbsùCÆlback
) {

57 
exc⁄ãxt
->
cbsùCÆlback
 = cbsipCallback;

59 
	}
}

61 
	$eXosù_masquîade_c⁄è˘
(
eXosù_t
 *
exc⁄ãxt
, c⁄° *
public_addªss
, 
p‹t
) {

62 i‡(
exc⁄ãxt
->
eXé_å™•‹t
.
é_masquîade_c⁄è˘
 =
NULL
) {

63 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_WARNING
, 
NULL
, "[eXosip]ÇoÅransportÖrotocol selected\n"));

65 i‡(
public_addªss
 =
NULL
 ||Öublic_address[0] == '\0') {

66 
	`mem£t
(
exc⁄ãxt
->
udp_fúewÆl_ù
, '\0', (excontext->udp_firewall_ip));

67 
	`mem£t
(
exc⁄ãxt
->
udp_fúewÆl_p‹t
, '\0', (excontext->udp_firewall_port));

68 
	`mem£t
(
exc⁄ãxt
->
t˝_fúewÆl_ù
, '\0', (excontext->tcp_firewall_ip));

69 
	`mem£t
(
exc⁄ãxt
->
t˝_fúewÆl_p‹t
, '\0', (excontext->tcp_firewall_port));

70 
	`mem£t
(
exc⁄ãxt
->
és_fúewÆl_ù
, '\0', (excontext->tls_firewall_ip));

71 
	`mem£t
(
exc⁄ãxt
->
és_fúewÆl_p‹t
, '\0', (excontext->tls_firewall_port));

72 
	`mem£t
(
exc⁄ãxt
->
dés_fúewÆl_ù
, '\0', (excontext->dtls_firewall_ip));

73 
	`mem£t
(
exc⁄ãxt
->
dés_fúewÆl_p‹t
, '\0', (excontext->dtls_firewall_port));

77 
	`¢¥ötf
(
exc⁄ãxt
->
udp_fúewÆl_ù
, ”xc⁄ãxt->udp_fúewÆl_ù), "%s", 
public_addªss
);

78 
	`¢¥ötf
(
exc⁄ãxt
->
t˝_fúewÆl_ù
, ”xc⁄ãxt->t˝_fúewÆl_ù), "%s", 
public_addªss
);

79 
	`¢¥ötf
(
exc⁄ãxt
->
és_fúewÆl_ù
, ”xc⁄ãxt->és_fúewÆl_ù), "%s", 
public_addªss
);

80 
	`¢¥ötf
(
exc⁄ãxt
->
dés_fúewÆl_ù
, ”xc⁄ãxt->dés_fúewÆl_ù), "%s", 
public_addªss
);

82 i‡(
p‹t
 > 0) {

83 
	`¢¥ötf
(
exc⁄ãxt
->
udp_fúewÆl_p‹t
, ”xc⁄ãxt->udp_fúewÆl_p‹t), "%i", 
p‹t
);

84 
	`¢¥ötf
(
exc⁄ãxt
->
t˝_fúewÆl_p‹t
, ”xc⁄ãxt->t˝_fúewÆl_p‹t), "%i", 
p‹t
);

85 
	`¢¥ötf
(
exc⁄ãxt
->
és_fúewÆl_p‹t
, ”xc⁄ãxt->és_fúewÆl_p‹t), "%i", 
p‹t
);

86 
	`¢¥ötf
(
exc⁄ãxt
->
dés_fúewÆl_p‹t
, ”xc⁄ãxt->dés_fúewÆl_p‹t), "%i", 
p‹t
);

92 
exc⁄ãxt
->
eXé_å™•‹t
.
	`é_masquîade_c⁄è˘
”xc⁄ãxt, 
public_addªss
, 
p‹t
);

94 
	}
}

96 
	$eXosù_guess_loˇlù
(
eXosù_t
 *
exc⁄ãxt
, 
Ámûy
, *
addªss
, 
size
) {

97  
	`_eXosù_guess_ù_f‹_vü
(
exc⁄ãxt
, 
Ámûy
, 
addªss
, 
size
);

98 
	}
}

100 
	$_eXosù_is_public_addªss
(c⁄° *
c_addªss
) {

101  (0 !
	`°∫cmp
(
c_addªss
, "192.168", 7) && 0 != strncmp(c_address, "10.", 3) && 0 != strncmp(c_address, "172.16.", 7) && 0 != strncmp(c_address, "172.17.", 7) && 0 != strncmp(c_address, "172.18.", 7) &&

102 0 !
	`°∫cmp
(
c_addªss
, "172.19.", 7) && 0 != strncmp(c_address, "172.20.", 7) && 0 != strncmp(c_address, "172.21.", 7) && 0 != strncmp(c_address, "172.22.", 7) && 0 != strncmp(c_address, "172.23.", 7) &&

103 0 !
	`°∫cmp
(
c_addªss
, "172.24.", 7) && 0 != strncmp(c_address, "172.25.", 7) && 0 != strncmp(c_address, "172.26.", 7) && 0 != strncmp(c_address, "172.27.", 7) && 0 != strncmp(c_address, "172.28.", 7) &&

104 0 !
	`°∫cmp
(
c_addªss
, "172.29.", 7) && 0 != strncmp(c_address, "172.30.", 7) && 0 != strncmp(c_address, "172.31.", 7) && 0 != strncmp(c_address, "169.254", 7));

105 
	}
}

107 
	$eXosù_£t_u£r_agít
(
eXosù_t
 *
exc⁄ãxt
, c⁄° *
u£r_agít
) {

108 
	`osù_‰ì
(
exc⁄ãxt
->
u£r_agít
);

109 
exc⁄ãxt
->
u£r_agít
 = 
	`osù_°rdup
(user_agent);

110 
	}
}

112 
	$_eXosù_kûl_å™ß˘i⁄
(
eXosù_t
 *
exc⁄ãxt
, 
osù_li°_t
 *
å™ß˘i⁄s
) {

113 
osù_å™ß˘i⁄_t
 *
å™ß˘i⁄
;

115 i‡(!
	`osù_li°_eﬁ
(
å™ß˘i⁄s
, 0)) {

118 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_WARNING
, 
NULL
, "[eXosip]Åransactionsáre supposedÅo beálready deallocated\n"));

121 !
	`osù_li°_eﬁ
(
å™ß˘i⁄s
, 0)) {

122 
å™ß˘i⁄
 = (
osù_å™ß˘i⁄_t
 *Ë
	`osù_li°_gë
(
å™ß˘i⁄s
, 0);

123 
	`_eXosù_å™ß˘i⁄_‰ì
(
exc⁄ãxt
, 
å™ß˘i⁄
);

125 
	}
}

127 
	$eXosù_quô
(
eXosù_t
 *
exc⁄ãxt
) {

128 
jauthöfo_t
 *
jauthöfo
;

129 
eXosù_ˇŒ_t
 *
jc
;

130 
eXosù_ªg_t
 *
jªg
;

132 #i‚de‡
MINISIZE


133 
eXosù_nŸify_t
 *
jn
;

134 
eXosù_subs¸ibe_t
 *
js
;

135 
eXosù_pub_t
 *
jpub
;

137 #i‚de‡
OSIP_MONOTHREAD


138 
i
;

141 i‡(
exc⁄ãxt
 =
NULL
)

144 i‡(
exc⁄ãxt
->
j_°›_ua
 == -1) {

145 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_WARNING
, 
NULL
, "[eXosip]álready stopped\n"));

149 
exc⁄ãxt
->
j_°›_ua
 = 1;

150 
	`_eXosù_wakeup
(
exc⁄ãxt
);

151 
	`eXosù_wakeup_evít
(
exc⁄ãxt
);

153 #i‚de‡
OSIP_MONOTHREAD


155 i‡(
exc⁄ãxt
->
j_thªad
 !
NULL
) {

156 
i
 = 
	`osù_thªad_joö
((
osù_thªad
 *Ë
exc⁄ãxt
->
j_thªad
);

158 i‡(
i
 != 0) {

159 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] can'tÅerminateÅhread\n"));

162 
	`osù_‰ì
((
osù_thªad
 *Ë
exc⁄ãxt
->
j_thªad
);

165 
	`jpùe_˛o£
(
exc⁄ãxt
->
j_sockë˘l
);

166 
	`jpùe_˛o£
(
exc⁄ãxt
->
j_sockë˘l_evít
);

169 
	`osù_‰ì
(
exc⁄ãxt
->
u£r_agít
);

171 
jc
 = 
exc⁄ãxt
->
j_ˇŒs
; j¯!
NULL
; jc =Éxcontext->j_calls) {

172 
	`REMOVE_ELEMENT
(
exc⁄ãxt
->
j_ˇŒs
, 
jc
);

173 
	`_eXosù_ˇŒ_‰ì
(
exc⁄ãxt
, 
jc
);

176 #i‚de‡
MINISIZE


178 
js
 = 
exc⁄ãxt
->
j_subs¸ibes
; j†!
NULL
; js =Éxcontext->j_subscribes) {

179 
	`REMOVE_ELEMENT
(
exc⁄ãxt
->
j_subs¸ibes
, 
js
);

180 
	`_eXosù_subs¸ùti⁄_‰ì
(
exc⁄ãxt
, 
js
);

183 
jn
 = 
exc⁄ãxt
->
j_nŸifõs
; j¿!
NULL
; jn =Éxcontext->j_notifies) {

184 
	`REMOVE_ELEMENT
(
exc⁄ãxt
->
j_nŸifõs
, 
jn
);

185 
	`_eXosù_nŸify_‰ì
(
exc⁄ãxt
, 
jn
);

190 #i‚de‡
OSIP_MONOTHREAD


191 
	`osù_muãx_de°roy
((
osù_muãx
 *Ë
exc⁄ãxt
->
j_muãxlock
);

192 #i‡!
	`deföed
(
_WIN32_WCE
)

193 
	`osù_c⁄d_de°roy
((
osù_c⁄d
 *Ë
exc⁄ãxt
->
j_c⁄d
);

197 
jªg
 = 
exc⁄ãxt
->
j_ªg
; jªg !
NULL
; jreg =Éxcontext->j_reg) {

198 
	`REMOVE_ELEMENT
(
exc⁄ãxt
->
j_ªg
, 
jªg
);

199 
	`_eXosù_ªg_‰ì
(
exc⁄ãxt
, 
jªg
);

202 #i‚de‡
MINISIZE


204 
jpub
 = 
exc⁄ãxt
->
j_pub
; jpub !
NULL
; jpub =Éxcontext->j_pub) {

205 
	`REMOVE_ELEMENT
(
exc⁄ãxt
->
j_pub
, 
jpub
);

206 
	`_eXosù_pub_‰ì
(
exc⁄ãxt
, 
jpub
);

211 !
	`osù_li°_eﬁ
(&
exc⁄ãxt
->
j_å™ß˘i⁄s
, 0)) {

212 
osù_å™ß˘i⁄_t
 *
å
 = (osù_å™ß˘i⁄_à*Ë
	`osù_li°_gë
(&
exc⁄ãxt
->
j_å™ß˘i⁄s
, 0);

214 i‡(
å
->
°©e
 =
IST_TERMINATED
 ||År->°©ê=
ICT_TERMINATED
 ||År->°©ê=
NICT_TERMINATED
 ||År->°©ê=
NIST_TERMINATED
) {

215 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO1
, 
NULL
, "[eXosù] [tid=%i]Ññó£áÅîmö©edÅønß˘i⁄\n", 
å
->
å™ß˘i⁄id
));

218 
	`osù_li°_ªmove
(&
exc⁄ãxt
->
j_å™ß˘i⁄s
, 0);

219 
	`_eXosù_å™ß˘i⁄_‰ì
(
exc⁄ãxt
, 
å
);

222 
	`_eXosù_kûl_å™ß˘i⁄
(
exc⁄ãxt
, &exc⁄ãxt->
j_osù
->
osù_i˘_å™ß˘i⁄s
);

223 
	`_eXosù_kûl_å™ß˘i⁄
(
exc⁄ãxt
, &exc⁄ãxt->
j_osù
->
osù_ni˘_å™ß˘i⁄s
);

224 
	`_eXosù_kûl_å™ß˘i⁄
(
exc⁄ãxt
, &exc⁄ãxt->
j_osù
->
osù_i°_å™ß˘i⁄s
);

225 
	`_eXosù_kûl_å™ß˘i⁄
(
exc⁄ãxt
, &exc⁄ãxt->
j_osù
->
osù_ni°_å™ß˘i⁄s
);

226 
	`osù_ªÀa£
(
exc⁄ãxt
->
j_osù
);

229 
eXosù_evít_t
 *
ev
;

231 
ev
 = 
	`osù_fifo_åygë
(
exc⁄ãxt
->
j_evíts
);Év !
NULL
;Év = osip_fifo_tryget(excontext->j_events))

232 
	`eXosù_evít_‰ì
(
ev
);

235 
	`osù_fifo_‰ì
(
exc⁄ãxt
->
j_evíts
);

237 
jauthöfo
 = 
exc⁄ãxt
->
authöfos
; jauthöfÿ!
NULL
; jauthinfo =Éxcontext->authinfos) {

238 
	`REMOVE_ELEMENT
(
exc⁄ãxt
->
authöfos
, 
jauthöfo
);

239 
	`osù_‰ì
(
jauthöfo
);

243 
eXosù_hâp_auth
 *
hâp_auth
;

244 
pos
;

247 
pos
 = 0;Öo†< 
MAX_EXOSIP_HTTP_AUTH
;Öos++) {

248 
hâp_auth
 = &
exc⁄ãxt
->
hâp_auths
[
pos
];

250 i‡(
hâp_auth
->
pszCÆlId
[0] == '\0')

253 
	`osù_¥oxy_authítiˇã_‰ì
(
hâp_auth
->
wa
);

254 
	`mem£t
(
hâp_auth
, 0, (
eXosù_hâp_auth
));

258 i‡(
exc⁄ãxt
->
eXé_å™•‹t
.
é_‰ì
 !
NULL
)

259 
exc⁄ãxt
->
eXé_å™•‹t
.
	`é_‰ì
(excontext);

261 
	`_eXosù_cou¡îs_‰ì
(&
exc⁄ãxt
->
avîage_å™ß˘i⁄s
);

262 
	`_eXosù_cou¡îs_‰ì
(&
exc⁄ãxt
->
avîage_ªgi°øti⁄s
);

263 
	`_eXosù_cou¡îs_‰ì
(&
exc⁄ãxt
->
avîage_ˇŒs
);

264 
	`_eXosù_cou¡îs_‰ì
(&
exc⁄ãxt
->
avîage_publiˇti⁄s
);

265 
	`_eXosù_cou¡îs_‰ì
(&
exc⁄ãxt
->
avîage_subs¸ùti⁄s
);

266 
	`_eXosù_cou¡îs_‰ì
(&
exc⁄ãxt
->
avîage_ösubs¸ùti⁄s
);

268 #ifde‡
HAVE_SYS_EPOLL_H


270 i‡(
exc⁄ãxt
->
ï_¨øy
 !
NULL
)

271 
	`osù_‰ì
(
exc⁄ãxt
->
ï_¨øy
);

273 i‡(
exc⁄ãxt
->
ïfd
 > 0)

274 
	`_eXosù_˛o£sockë
(
exc⁄ãxt
->
ïfd
);

276 i‡(
exc⁄ãxt
->
ïfd˘l
 > 0)

277 
	`_eXosù_˛o£sockë
(
exc⁄ãxt
->
ïfd˘l
);

281 
	`mem£t
(
exc⁄ãxt
, 0, (
eXosù_t
));

282 
exc⁄ãxt
->
j_°›_ua
 = -1;

284 #ifde‡
HAVE_WINSOCK2_H


285 
	`WSACÀ™up
();

288 
	}
}

290 
	$eXosù_£t_sockë
(
eXosù_t
 *
exc⁄ãxt
, 
å™•‹t
, 
sockë
, 
p‹t
) {

291 i‡(
exc⁄ãxt
->
eXé_å™•‹t
.
íabÀd
 > 0) {

293 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip]álreadyÜistening somewhere\n"));

294  
OSIP_WRONG_STATE
;

297 i‡(
å™•‹t
 =
IPPROTO_UDP
) {

298 
	`eXosù_å™•‹t_udp_öô
(
exc⁄ãxt
);

300 i‡(
exc⁄ãxt
->
eXé_å™•‹t
.
é_öô
 !
NULL
)

301 
exc⁄ãxt
->
eXé_å™•‹t
.
	`é_öô
(excontext);

303 
exc⁄ãxt
->
eXé_å™•‹t
.
¥Ÿo_p‹t
 = 
p‹t
;

304 
exc⁄ãxt
->
eXé_å™•‹t
.
	`é_£t_sockë
”xc⁄ãxt, 
sockë
);

305 
	`¢¥ötf
(
exc⁄ãxt
->
å™•‹t
, (excontext->transport), "%s", "UDP");

307 } i‡(
å™•‹t
 =
IPPROTO_TCP
) {

308 
	`eXosù_å™•‹t_t˝_öô
(
exc⁄ãxt
);

310 i‡(
exc⁄ãxt
->
eXé_å™•‹t
.
é_öô
 !
NULL
)

311 
exc⁄ãxt
->
eXé_å™•‹t
.
	`é_öô
(excontext);

313 
exc⁄ãxt
->
eXé_å™•‹t
.
¥Ÿo_p‹t
 = 
p‹t
;

314 
exc⁄ãxt
->
eXé_å™•‹t
.
	`é_£t_sockë
”xc⁄ãxt, 
sockë
);

315 
	`¢¥ötf
(
exc⁄ãxt
->
å™•‹t
, (excontext->transport), "%s", "TCP");

318  
OSIP_BADPARAMETER
;

320 #i‚de‡
OSIP_MONOTHREAD


321 
exc⁄ãxt
->
j_thªad
 = (*Ë
	`osù_thªad_¸óã
(20000, 
_eXosù_thªad
,Éxcontext);

323 i‡(
exc⁄ãxt
->
j_thªad
 =
NULL
) {

324 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] cannot startÅhread\n"));

325  
OSIP_UNDEFINED_ERROR
;

329  
OSIP_SUCCESS
;

330 
	}
}

332 #ifde‡
IPV6_V6ONLY


333 
	$£tsock›t_ùv6⁄ly
(
sock
) {

334 
⁄
 = 1;

336  
	`£tsock›t
(
sock
, 
IPPROTO_IPV6
, 
IPV6_V6ONLY
, (*Ë&
⁄
, (on));

337 
	}
}

340 #i‚de‡
MINISIZE


341 
	$eXosù_föd_‰ì_p‹t
(
eXosù_t
 *
exc⁄ãxt
, 
‰ì_p‹t
, 
å™•‹t
) {

342 
ªs1
;

343 
ªs2
;

344 
addröfo
 *
addröfo_πp
 = 
NULL
;

345 
addröfo
 *
curöfo_πp
;

346 
addröfo
 *
addröfo_π˝
 = 
NULL
;

347 
addröfo
 *
curöfo_π˝
;

348 
sock
;

349 
cou¡
;

351 i‡(
‰ì_p‹t
 > 0) {

352 
cou¡
 = 0; count < 8; count++) {

353 i‡(
exc⁄ãxt
->
ùv6_íabÀ
 == 0)

354 
ªs1
 = 
	`_eXosù_gë_addröfo
(
exc⁄ãxt
, &
addröfo_πp
, "0.0.0.0", 
‰ì_p‹t
 + 
cou¡
 * 2, 
å™•‹t
);

357 
ªs1
 = 
	`_eXosù_gë_addröfo
(
exc⁄ãxt
, &
addröfo_πp
, "::", 
‰ì_p‹t
 + 
cou¡
 * 2, 
å™•‹t
);

359 i‡(
ªs1
 != 0)

360  
ªs1
;

362 i‡(
exc⁄ãxt
->
ùv6_íabÀ
 == 0)

363 
ªs2
 = 
	`_eXosù_gë_addröfo
(
exc⁄ãxt
, &
addröfo_π˝
, "0.0.0.0", 
‰ì_p‹t
 + 
cou¡
 * 2 + 1, 
å™•‹t
);

366 
ªs2
 = 
	`_eXosù_gë_addröfo
(
exc⁄ãxt
, &
addröfo_π˝
, "::", 
‰ì_p‹t
 + 
cou¡
 * 2 + 1, 
å™•‹t
);

368 i‡(
ªs2
 != 0) {

369 
	`_eXosù_‰ìaddröfo
(
addröfo_πp
);

370  
ªs2
;

373 
sock
 = -1;

375 
curöfo_πp
 = 
addröfo_πp
; curöfo_πp; curöfo_π∞curöfo_πp->
ai_√xt
) {

376 
ty≥
;

378 i‡(
curöfo_πp
->
ai_¥Ÿocﬁ
 && curöfo_πp->ai_¥Ÿocﬁ !
å™•‹t
) {

379 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO3
, 
NULL
, "[eXosù] skùpögÖrŸocﬁ [%d]\n", 
curöfo_πp
->
ai_¥Ÿocﬁ
));

383 
ty≥
 = 
curöfo_πp
->
ai_sockty≥
;

384 #i‡
	`deföed
(
SOCK_CLOEXEC
)

385 
ty≥
 = 
SOCK_CLOEXEC
 |Åype;

387 
sock
 = (Ë
	`sockë
(
curöfo_πp
->
ai_Ámûy
, 
ty≥
, curöfo_πp->
ai_¥Ÿocﬁ
);

389 i‡(
sock
 < 0) {

390 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] cannot create socket\n"));

394 i‡(
curöfo_πp
->
ai_Ámûy
 =
AF_INET6
) {

395 #ifde‡
IPV6_V6ONLY


397 i‡(
	`£tsock›t_ùv6⁄ly
(
sock
)) {

398 
	`_eXosù_˛o£sockë
(
sock
);

399 
sock
 = -1;

400 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] cannot set socket option\n"));

407 
ªs1
 = 
	`böd
(
sock
, 
curöfo_πp
->
ai_addr
, (
sockÀn_t
Ëcuröfo_πp->
ai_addæí
);

409 i‡(
ªs1
 < 0) {

410 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_WARNING
, 
NULL
, "[eXosù] c™nŸ böd sockë [0.0.0.0] [Ámûy:%d]\n", 
curöfo_πp
->
ai_Ámûy
));

411 
	`_eXosù_˛o£sockë
(
sock
);

412 
sock
 = -1;

419 
	`_eXosù_‰ìaddröfo
(
addröfo_πp
);

421 i‡(
sock
 == -1) {

422 
	`_eXosù_‰ìaddröfo
(
addröfo_π˝
);

426 
	`_eXosù_˛o£sockë
(
sock
);

427 
sock
 = -1;

429 
curöfo_π˝
 = 
addröfo_π˝
; curöfo_π˝; curöfo_π˝ = curöfo_π˝->
ai_√xt
) {

430 
ty≥
;

432 i‡(
curöfo_π˝
->
ai_¥Ÿocﬁ
 && curöfo_π˝->ai_¥Ÿocﬁ !
å™•‹t
) {

433 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO3
, 
NULL
, "[eXosù] skùpögÖrŸocﬁ [%d]\n", 
curöfo_π˝
->
ai_¥Ÿocﬁ
));

437 
ty≥
 = 
curöfo_π˝
->
ai_sockty≥
;

438 #i‡
	`deföed
(
SOCK_CLOEXEC
)

439 
ty≥
 = 
SOCK_CLOEXEC
 |Åype;

441 
sock
 = (Ë
	`sockë
(
curöfo_π˝
->
ai_Ámûy
, 
ty≥
, curöfo_π˝->
ai_¥Ÿocﬁ
);

443 i‡(
sock
 < 0) {

444 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] cannot create socket\n"));

448 i‡(
curöfo_π˝
->
ai_Ámûy
 =
AF_INET6
) {

449 #ifde‡
IPV6_V6ONLY


451 i‡(
	`£tsock›t_ùv6⁄ly
(
sock
)) {

452 
	`_eXosù_˛o£sockë
(
sock
);

453 
sock
 = -1;

454 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] cannot set socket option\n"));

461 
ªs1
 = 
	`böd
(
sock
, 
curöfo_π˝
->
ai_addr
, (
sockÀn_t
Ëcuröfo_π˝->
ai_addæí
);

463 i‡(
ªs1
 < 0) {

464 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_WARNING
, 
NULL
, "[eXosù] c™nŸ böd sockë [0.0.0.0] [Ámûy:%d]\n", 
curöfo_πp
->
ai_Ámûy
));

465 
	`_eXosù_˛o£sockë
(
sock
);

466 
sock
 = -1;

473 
	`_eXosù_‰ìaddröfo
(
addröfo_π˝
);

476 i‡(
sock
 == -1)

479 
	`_eXosù_˛o£sockë
(
sock
);

480 
sock
 = -1;

481  
‰ì_p‹t
 + 
cou¡
 * 2;

485 
cou¡
 = 0; count < 8; count++) {

487 i‡(
exc⁄ãxt
->
ùv6_íabÀ
 == 0)

488 
ªs1
 = 
	`_eXosù_gë_addröfo
(
exc⁄ãxt
, &
addröfo_πp
, "0.0.0.0", 0, 
å™•‹t
);

491 
ªs1
 = 
	`_eXosù_gë_addröfo
(
exc⁄ãxt
, &
addröfo_πp
, "::", 0, 
å™•‹t
);

493 i‡(
ªs1
)

494  
ªs1
;

496 
sock
 = -1;

498 
curöfo_πp
 = 
addröfo_πp
; curöfo_πp; curöfo_π∞curöfo_πp->
ai_√xt
) {

499 
sockÀn_t
 
Àn
;

500 
sockaddr_°‹age
 
ai_addr
;

501 
ty≥
;

503 i‡(
curöfo_πp
->
ai_¥Ÿocﬁ
 && curöfo_πp->ai_¥Ÿocﬁ !
å™•‹t
) {

504 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO3
, 
NULL
, "[eXosù] skùpögÖrŸocﬁ [%d]\n", 
curöfo_πp
->
ai_¥Ÿocﬁ
));

508 
ty≥
 = 
curöfo_πp
->
ai_sockty≥
;

509 #i‡
	`deföed
(
SOCK_CLOEXEC
)

510 
ty≥
 = 
SOCK_CLOEXEC
 |Åype;

512 
sock
 = (Ë
	`sockë
(
curöfo_πp
->
ai_Ámûy
, 
ty≥
, curöfo_πp->
ai_¥Ÿocﬁ
);

514 i‡(
sock
 < 0) {

515 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] cannot create socket\n"));

519 i‡(
curöfo_πp
->
ai_Ámûy
 =
AF_INET6
) {

520 #ifde‡
IPV6_V6ONLY


522 i‡(
	`£tsock›t_ùv6⁄ly
(
sock
)) {

523 
	`_eXosù_˛o£sockë
(
sock
);

524 
sock
 = -1;

525 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] cannot set socket option\n"));

532 
ªs1
 = 
	`böd
(
sock
, 
curöfo_πp
->
ai_addr
, (
sockÀn_t
Ëcuröfo_πp->
ai_addæí
);

534 i‡(
ªs1
 < 0) {

535 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_WARNING
, 
NULL
, "[eXosù] c™nŸ böd sockë [0.0.0.0] famûy:[%d]\n", 
curöfo_πp
->
ai_Ámûy
));

536 
	`_eXosù_˛o£sockë
(
sock
);

537 
sock
 = -1;

541 
Àn
 = (
ai_addr
);

542 
ªs1
 = 
	`gësock«me
(
sock
, (
sockaddr
 *Ë&
ai_addr
, &
Àn
);

544 i‡(
ªs1
 != 0) {

545 
	`_eXosù_˛o£sockë
(
sock
);

546 
sock
 = -1;

550 
	`_eXosù_˛o£sockë
(
sock
);

551 
sock
 = -1;

554 
p‹t_found
;

556 i‡(
curöfo_πp
->
ai_Ámûy
 =
AF_INET
)

557 
p‹t_found
 = 
	`¡ohs
(((
sockaddr_ö
 *Ë&
ai_addr
)->
sö_p‹t
);

560 
p‹t_found
 = 
	`¡ohs
(((
sockaddr_ö6
 *Ë&
ai_addr
)->
sö6_p‹t
);

562 i‡(
p‹t_found
 % 2 == 0) {

563 
	`_eXosù_‰ìaddröfo
(
addröfo_πp
);

564  
p‹t_found
;

567 i‡(
cou¡
 == 7) {

569  
p‹t_found
;

574 
	`_eXosù_‰ìaddröfo
(
addröfo_πp
);

576 i‡(
sock
 != -1) {

577 
	`_eXosù_˛o£sockë
(
sock
);

578 
sock
 = -1;

582  
OSIP_UNDEFINED_ERROR
;

583 
	}
}

586 
	$eXosù_li°í_addr
(
eXosù_t
 *
exc⁄ãxt
, 
å™•‹t
, c⁄° *
addr
, 
p‹t
, 
Ámûy
, 
£cuª
) {

587 
i
 = -1;

589 i‡(
exc⁄ãxt
->
eXé_å™•‹t
.
íabÀd
 > 0) {

591 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip]álreadyÜistening somewhere\n"));

592  
OSIP_WRONG_STATE
;

595 i‡(
å™•‹t
 =
IPPROTO_UDP
 && 
£cuª
 == 0)

596 
	`eXosù_å™•‹t_udp_öô
(
exc⁄ãxt
);

598 i‡(
å™•‹t
 =
IPPROTO_TCP
 && 
£cuª
 == 0)

599 
	`eXosù_å™•‹t_t˝_öô
(
exc⁄ãxt
);

601 #ifde‡
HAVE_OPENSSL_SSL_H


602 #i‡!(
OPENSSL_VERSION_NUMBER
 < 0x00908000L)

603 i‡(
å™•‹t
 =
IPPROTO_UDP
)

604 
	`eXosù_å™•‹t_dés_öô
(
exc⁄ãxt
);

607 i‡(
å™•‹t
 =
IPPROTO_TCP
)

608 
	`eXosù_å™•‹t_és_öô
(
exc⁄ãxt
);

612  
OSIP_BADPARAMETER
;

614 i‡(
exc⁄ãxt
->
eXé_å™•‹t
.
é_öô
 !
NULL
)

615 
exc⁄ãxt
->
eXé_å™•‹t
.
	`é_öô
(excontext);

617 
exc⁄ãxt
->
eXé_å™•‹t
.
¥Ÿo_Ámûy
 = 
Ámûy
;

618 
exc⁄ãxt
->
eXé_å™•‹t
.
¥Ÿo_p‹t
 = 
p‹t
;

620 i‡(
addr
 !
NULL
)

621 
	`¢¥ötf
(
exc⁄ãxt
->
eXé_å™•‹t
.
¥Ÿo_ifs
, ”xc⁄ãxt->eXé_å™•‹t.¥Ÿo_ifs), "%s", 
addr
);

623 #ifde‡
AF_INET6


625 i‡(
Ámûy
 =
AF_INET6
 && !
addr
)

626 
	`¢¥ötf
(
exc⁄ãxt
->
eXé_å™•‹t
.
¥Ÿo_ifs
, (excontext->eXtl_transport.proto_ifs), "::0");

630 
i
 = 
exc⁄ãxt
->
eXé_å™•‹t
.
	`é_›í
(excontext);

632 i‡(
i
 != 0) {

633 i‡(
exc⁄ãxt
->
eXé_å™•‹t
.
é_‰ì
 !
NULL
)

634 
exc⁄ãxt
->
eXé_å™•‹t
.
	`é_‰ì
(excontext);

636 
exc⁄ãxt
->
eXé_å™•‹t
.
íabÀd
 = 0;

637  
i
;

640 i‡(
å™•‹t
 =
IPPROTO_UDP
 && 
£cuª
 == 0)

641 
	`¢¥ötf
(
exc⁄ãxt
->
å™•‹t
, (excontext->transport), "%s", "UDP");

643 i‡(
å™•‹t
 =
IPPROTO_TCP
 && 
£cuª
 == 0)

644 
	`¢¥ötf
(
exc⁄ãxt
->
å™•‹t
, (excontext->transport), "%s", "TCP");

646 i‡(
å™•‹t
 =
IPPROTO_UDP
)

647 
	`¢¥ötf
(
exc⁄ãxt
->
å™•‹t
, (excontext->transport), "%s", "DTLS-UDP");

649 i‡(
å™•‹t
 =
IPPROTO_TCP
)

650 
	`¢¥ötf
(
exc⁄ãxt
->
å™•‹t
, (excontext->transport), "%s", "TLS");

652 #i‚de‡
OSIP_MONOTHREAD


654 i‡(
exc⁄ãxt
->
j_thªad
 =
NULL
) {

655 
exc⁄ãxt
->
j_thªad
 = (*Ë
	`osù_thªad_¸óã
(20000, 
_eXosù_thªad
,Éxcontext);

657 i‡(
exc⁄ãxt
->
j_thªad
 =
NULL
) {

658 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] cannot startÅhread\n"));

659  
OSIP_UNDEFINED_ERROR
;

665  
OSIP_SUCCESS
;

666 
	}
}

668 
	$eXosù_ª£t_å™•‹ts
(
eXosù_t
 *
exc⁄ãxt
) {

669 
i
 = 
OSIP_WRONG_STATE
;

671 i‡(
exc⁄ãxt
->
eXé_å™•‹t
.
é_ª£t
)

672 
i
 = 
exc⁄ãxt
->
eXé_å™•‹t
.
	`é_ª£t
(excontext);

674  
i
;

675 
	}
}

677 
eXosù_t
 *
	$eXosù_mÆloc
() {

678 
eXosù_t
 *
±r
 = (eXosù_à*Ë
	`osù_mÆloc
((eXosip_t));

680 i‡(
±r
) {

681 
	`mem£t
(
±r
, 0, (
eXosù_t
));

682 
±r
->
j_°›_ua
 = -1;

685  
±r
;

686 
	}
}

688 
	$eXosù_öô
(
eXosù_t
 *
exc⁄ãxt
) {

689 
osù_t
 *
osù
;

690 
i
;

692 
	`mem£t
(
exc⁄ãxt
, 0, (
eXosù_t
));

694 
	`_eXosù_cou¡îs_öô
(&
exc⁄ãxt
->
avîage_å™ß˘i⁄s
, 0, 0);

695 
	`_eXosù_cou¡îs_öô
(&
exc⁄ãxt
->
avîage_ªgi°øti⁄s
, 0, 0);

696 
	`_eXosù_cou¡îs_öô
(&
exc⁄ãxt
->
avîage_ˇŒs
, 0, 0);

697 
	`_eXosù_cou¡îs_öô
(&
exc⁄ãxt
->
avîage_publiˇti⁄s
, 0, 0);

698 
	`_eXosù_cou¡îs_öô
(&
exc⁄ãxt
->
avîage_subs¸ùti⁄s
, 0, 0);

699 
	`_eXosù_cou¡îs_öô
(&
exc⁄ãxt
->
avîage_ösubs¸ùti⁄s
, 0, 0);

701 
exc⁄ãxt
->
max_mesßge_to_ªad
 = 1;

702 
exc⁄ãxt
->
ds˝
 = 0x1A;

703 
exc⁄ãxt
->
im∂icô_subs¸ùti⁄_expúes
 = 60;

705 
	`¢¥ötf
(
exc⁄ãxt
->
ùv4_f‹_g©eway
, 256, "%s", "217.12.3.11");

706 
	`¢¥ötf
(
exc⁄ãxt
->
ùv6_f‹_g©eway
, 256, "%s", "2001:638:500:101:2e0:81ff:fe24:37c6");

708 #ifde‡
HAVE_WINSOCK2_H


711 
WORD
 
wVîsi⁄Reque°ed
;

712 
WSADATA
 
wßD©a
;

714 
wVîsi⁄Reque°ed
 = 
	`MAKEWORD
(2, 0);

715 
i
 = 
	`WSASèπup
(
wVîsi⁄Reque°ed
, &
wßD©a
);

717 i‡(
i
 != 0) {

718 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_WARNING
, 
NULL
, "[eXosù] u«bÀÅÿöôülizêWINSOCK [%d]\n", 
i
));

723 
exc⁄ãxt
->
u£r_agít
 = 
	`osù_°rdup
("eXosù/" 
EXOSIP_VERSION
);

725 i‡(
exc⁄ãxt
->
u£r_agít
 =
NULL
)

726  
OSIP_NOMEM
;

728 
exc⁄ãxt
->
j_ˇŒs
 = 
NULL
;

729 
exc⁄ãxt
->
j_°›_ua
 = 0;

730 #i‚de‡
OSIP_MONOTHREAD


731 
exc⁄ãxt
->
j_thªad
 = 
NULL
;

733 
i
 = 
	`osù_li°_öô
(&
exc⁄ãxt
->
j_å™ß˘i⁄s
);

734 
exc⁄ãxt
->
j_ªg
 = 
NULL
;

736 #i‚de‡
OSIP_MONOTHREAD


737 #i‡!
	`deföed
(
_WIN32_WCE
)

738 
exc⁄ãxt
->
j_c⁄d
 = (
osù_c⁄d
 *Ë
	`osù_c⁄d_öô
();

740 i‡(
exc⁄ãxt
->
j_c⁄d
 =
NULL
) {

741 
	`osù_‰ì
(
exc⁄ãxt
->
u£r_agít
);

742 
exc⁄ãxt
->
u£r_agít
 = 
NULL
;

743  
OSIP_NOMEM
;

748 
exc⁄ãxt
->
j_muãxlock
 = (
osù_muãx
 *Ë
	`osù_muãx_öô
();

750 i‡(
exc⁄ãxt
->
j_muãxlock
 =
NULL
) {

751 
	`osù_‰ì
(
exc⁄ãxt
->
u£r_agít
);

752 
exc⁄ãxt
->
u£r_agít
 = 
NULL
;

753 #i‡!
	`deföed
(
_WIN32_WCE
)

754 
	`osù_c⁄d_de°roy
((
osù_c⁄d
 *Ë
exc⁄ãxt
->
j_c⁄d
);

755 
exc⁄ãxt
->
j_c⁄d
 = 
NULL
;

757  
OSIP_NOMEM
;

762 
i
 = 
	`osù_öô
(&
osù
);

764 i‡(
i
 != 0) {

765 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] cannot initialize osip\n"));

766  
i
;

769 
	`osù_£t_≠∂iˇti⁄_c⁄ãxt
(
osù
, &
exc⁄ãxt
);

771 
	`_eXosù_£t_ˇŒbacks
(
osù
);

773 
exc⁄ãxt
->
j_osù
 = 
osù
;

775 #i‚de‡
OSIP_MONOTHREAD


777 
exc⁄ãxt
->
j_sockë˘l
 = 
	`jpùe
();

779 i‡(
exc⁄ãxt
->
j_sockë˘l
 =
NULL
)

780  
OSIP_UNDEFINED_ERROR
;

782 
exc⁄ãxt
->
j_sockë˘l_evít
 = 
	`jpùe
();

784 i‡(
exc⁄ãxt
->
j_sockë˘l_evít
 =
NULL
)

785  
OSIP_UNDEFINED_ERROR
;

790 
exc⁄ãxt
->
j_evíts
 = (
osù_fifo_t
 *Ë
	`osù_mÆloc
((osip_fifo_t));

792 i‡(
exc⁄ãxt
->
j_evíts
 =
NULL
)

793  
OSIP_NOMEM
;

795 
	`osù_fifo_öô
(
exc⁄ãxt
->
j_evíts
);

797 
exc⁄ãxt
->
u£_Ω‹t
 = 1;

798 
exc⁄ãxt
->
ªmove_¥îouã£t
 = 1;

799 
exc⁄ãxt
->
dns_ˇ∑bûôõs
 = 2;

800 
exc⁄ãxt
->
íabÀ_dns_ˇche
 = 1;

801 
exc⁄ãxt
->
ka_öãrvÆ
 = 17000;

802 
	`¢¥ötf
(
exc⁄ãxt
->
ka_¸lf
, (excontext->ka_crlf), "\r\n\r\n");

803 
exc⁄ãxt
->
ka_›ti⁄s
 = 0;

804 
exc⁄ãxt
->
autﬂnswî_bye
 = 1;

805 
exc⁄ãxt
->
auto_masquîade_c⁄è˘
 = 1;

806 
exc⁄ãxt
->
masquîade_vü
 = 0;

807 
exc⁄ãxt
->
u£_ïhemîÆ_p‹t
 = 1;

809 
exc⁄ãxt
->
pﬁl_mëhod
 = 
EXOSIP_USE_SELECT
;

810 #ifde‡
HAVE_SYS_EPOLL_H


811 
exc⁄ãxt
->
max_fd_no
 = 
EXOSIP_MAX_DESCRIPTOR
;

812 
exc⁄ãxt
->
ïfd
 = 
	`ïﬁl_¸óã
”xc⁄ãxt->
max_fd_no
);

814 i‡(
exc⁄ãxt
->
ïfd
 > 0)

815 
exc⁄ãxt
->
ï_¨øy
 = (
ïﬁl_evít
 *Ë
	`osù_mÆloc
((ïﬁl_evítË*Éxc⁄ãxt->
max_fd_no
);

817 #i‚de‡
OSIP_MONOTHREAD


819 i‡(
exc⁄ãxt
->
ï_¨øy
 !
NULL
) {

820 
ïﬁl_evít
 
ev
;

821 
	`mem£t
(&
ev
, 0, (
ïﬁl_evít
));

822 
ev
.
evíts
 = 
EPOLLIN
;

823 
ev
.
d©a
.
fd
 = 
	`jpùe_gë_ªad_des¸
(
exc⁄ãxt
->
j_sockë˘l
);

824 
i
 = 
	`ïﬁl_˘l
(
exc⁄ãxt
->
ïfd
, 
EPOLL_CTL_ADD
, 
	`jpùe_gë_ªad_des¸
”xc⁄ãxt->
j_sockë˘l
), &
ev
);

826 i‡(
i
 < 0) {

827  
OSIP_UNDEFINED_ERROR
;

833 i‡(
exc⁄ãxt
->
ï_¨øy
 !
NULL
 && 
i
 == 0)

834 
exc⁄ãxt
->
pﬁl_mëhod
 = 
EXOSIP_USE_EPOLL_LT
;

838 i‡(
exc⁄ãxt
->
ï_¨øy
 !
NULL
)

839 
	`osù_‰ì
(
exc⁄ãxt
->
ï_¨øy
);

841 
exc⁄ãxt
->
ï_¨øy
 = 
NULL
;

843 i‡(
exc⁄ãxt
->
ïfd
 > 0)

844 
	`_eXosù_˛o£sockë
(
exc⁄ãxt
->
ïfd
);

846 
exc⁄ãxt
->
ïfd
 = 0;

849 i‡(
exc⁄ãxt
->
pﬁl_mëhod
 =
EXOSIP_USE_EPOLL_LT
) {

850 #i‚de‡
OSIP_MONOTHREAD


851 
ïﬁl_evít
 
ev
;

853 
exc⁄ãxt
->
ïfd˘l
 = 
	`ïﬁl_¸óã
(1);

855 i‡(
exc⁄ãxt
->
ïfd˘l
 < 0) {

856  
OSIP_UNDEFINED_ERROR
;

859 #i‚de‡
OSIP_MONOTHREAD


860 
	`mem£t
(&
ev
, 0, (
ïﬁl_evít
));

861 
ev
.
evíts
 = 
EPOLLIN
;

862 
ev
.
d©a
.
fd
 = 
	`jpùe_gë_ªad_des¸
(
exc⁄ãxt
->
j_sockë˘l_evít
);

863 
i
 = 
	`ïﬁl_˘l
(
exc⁄ãxt
->
ïfd˘l
, 
EPOLL_CTL_ADD
, 
	`jpùe_gë_ªad_des¸
”xc⁄ãxt->
j_sockë˘l_evít
), &
ev
);

865 i‡(
i
 < 0) {

866 
	`_eXosù_˛o£sockë
(
exc⁄ãxt
->
ïfd˘l
);

867  
OSIP_UNDEFINED_ERROR
;

875  
OSIP_SUCCESS
;

876 
	}
}

878 
	$eXosù_execuã
(
eXosù_t
 *
exc⁄ãxt
) {

879 
timevÆ
 
lowî_tv
;

880 
i
;

882 #i‚de‡
OSIP_MONOTHREAD


884 i‡(
exc⁄ãxt
->
max_ªad_timeout
 > 0) {

885 
lowî_tv
.
tv_£c
 = 0;

886 
lowî_tv
.
tv_u£c
 = 
exc⁄ãxt
->
max_ªad_timeout
;

889 
	`osù_timîs_gëtimeout
(
exc⁄ãxt
->
j_osù
, &
lowî_tv
);

891 i‡(
lowî_tv
.
tv_£c
 > 10) {

892 
eXosù_ªg_t
 *
jr
;

893 
time_t
 
now
;

895 
	`osù_com≥nßãtime
();

897 
now
 = 
	`osù_gësy°emtime
(
NULL
);

899 
lowî_tv
.
tv_£c
 = 10;

901 
	`eXosù_lock
(
exc⁄ãxt
);

903 
jr
 = 
exc⁄ãxt
->
j_ªg
; j∏!
NULL
; j∏jr->
√xt
) {

904 i‡(
jr
->
r_id
 >1 && jr->
r_œ°_å
 !
NULL
) {

905 i‡(
jr
->
r_ªg_≥riod
 == 0) {

907 } i‡(
now
 - 
jr
->
r_œ°_å
->
búth_time
 > jr->
r_ªg_≥riod
 - (jr->r_reg_period / 10)) {

909 
lowî_tv
.
tv_£c
 = 1;

914 
	`eXosù_u∆ock
(
exc⁄ãxt
);

916 i‡(
lowî_tv
.
tv_£c
 == 1) {

917 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosip]ÑesetingÅimerÅo 1s before waking up\n"));

920 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosip]ÑesetingÅimerÅo 10s before waking up\n"));

925 i‡(
lowî_tv
.
tv_u£c
 < 990000)

926 
lowî_tv
.
tv_u£c
 += 10000;

928 
lowî_tv
.
tv_u£c
 = 10000;

929 
lowî_tv
.
tv_£c
++;

934 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosù]Åimî [£c:%i] [u£c:%i]\n", 
lowî_tv
.
tv_£c
,Üowî_tv.
tv_u£c
));

939 
lowî_tv
.
tv_£c
 = 0;

940 
lowî_tv
.
tv_u£c
 = 0;

942 
i
 = 
	`_eXosù_ªad_mesßge
(
exc⁄ãxt
,Éxc⁄ãxt->
max_mesßge_to_ªad
, (Ë
lowî_tv
.
tv_£c
, (Ëlowî_tv.
tv_u£c
);

944 i‡(
i
 == -2000) {

948 
	`eXosù_lock
(
exc⁄ãxt
);

949 
	`osù_timîs_i˘_execuã
(
exc⁄ãxt
->
j_osù
);

950 
	`osù_timîs_ni˘_execuã
(
exc⁄ãxt
->
j_osù
);

951 
	`osù_timîs_i°_execuã
(
exc⁄ãxt
->
j_osù
);

952 
	`osù_timîs_ni°_execuã
(
exc⁄ãxt
->
j_osù
);

954 
	`osù_ni°_execuã
(
exc⁄ãxt
->
j_osù
);

955 
	`osù_ni˘_execuã
(
exc⁄ãxt
->
j_osù
);

956 
	`osù_i°_execuã
(
exc⁄ãxt
->
j_osù
);

957 
	`osù_i˘_execuã
(
exc⁄ãxt
->
j_osù
);

960 
	`_eXosù_ªÀa£_ãrmö©ed_ˇŒs
(
exc⁄ãxt
);

961 
	`_eXosù_ªÀa£_ãrmö©ed_ªgi°øti⁄s
(
exc⁄ãxt
);

962 #i‚de‡
MINISIZE


963 
	`_eXosù_ªÀa£_ãrmö©ed_publiˇti⁄s
(
exc⁄ãxt
);

964 
	`_eXosù_ªÀa£_ãrmö©ed_subs¸ùti⁄s
(
exc⁄ãxt
);

965 
	`_eXosù_ªÀa£_ãrmö©ed_ö_subs¸ùti⁄s
(
exc⁄ãxt
);

968 i‡(
exc⁄ãxt
->
cbsùWakeLock
 !
NULL
 &&Éxc⁄ãxt->
outgoög_wake_lock_°©e
 == 0) {

969 
cou¡
 = 
	`osù_li°_size
(&
exc⁄ãxt
->
j_osù
->
osù_i˘_å™ß˘i⁄s
);

971 
cou¡
 +
	`osù_li°_size
(&
exc⁄ãxt
->
j_osù
->
osù_ni˘_å™ß˘i⁄s
);

973 i‡(
cou¡
 > 0) {

974 
exc⁄ãxt
->
	`cbsùWakeLock
(3);

975 
exc⁄ãxt
->
outgoög_wake_lock_°©e
++;

978 } i‡(
exc⁄ãxt
->
cbsùWakeLock
 !
NULL
 &&Éxc⁄ãxt->
outgoög_wake_lock_°©e
 > 0) {

979 
cou¡
 = 
	`osù_li°_size
(&
exc⁄ãxt
->
j_osù
->
osù_i˘_å™ß˘i⁄s
);

981 
cou¡
 +
	`osù_li°_size
(&
exc⁄ãxt
->
j_osù
->
osù_ni˘_å™ß˘i⁄s
);

983 i‡(
cou¡
 == 0) {

984 
exc⁄ãxt
->
	`cbsùWakeLock
(2);

985 
exc⁄ãxt
->
outgoög_wake_lock_°©e
 = 0;

989 
	`_eXosù_kìp_Æive
(
exc⁄ãxt
);

991 
	`eXosù_u∆ock
(
exc⁄ãxt
);

993  
OSIP_SUCCESS
;

994 
	}
}

996 
	$eXosù_£t_›ti⁄
(
eXosù_t
 *
exc⁄ãxt
, 
›t
, c⁄° *
vÆue
) {

997 
vÆ
;

998 *
tmp
;

1000 
›t
) {

1001 
EXOSIP_OPT_ADD_ACCOUNT_INFO
: {

1002 
eXosù_accou¡_öfo
 *
aöfo
;

1003 
i
;

1005 
aöfo
 = (
eXosù_accou¡_öfo
 *Ë
vÆue
;

1007 i‡(
aöfo
 =
NULL
 ||áöfo->
¥oxy
[0] == '\0') {

1008  
OSIP_BADPARAMETER
;

1011 
i
 = 0; i < 
MAX_EXOSIP_ACCOUNT_INFO
; i++) {

1012 i‡(
exc⁄ãxt
->
accou¡_íåõs
[
i
].
¥oxy
[0] !'\0' && 0 =
	`osù_°rˇ£cmp
”xc⁄ãxt->accou¡_íåõs[i].¥oxy, 
aöfo
->proxy)) {

1014 i‡(
aöfo
->
«t_ù
[0] != '\0') {

1015 i‡(0 =
	`osù_°rˇ£cmp
(
exc⁄ãxt
->
accou¡_íåõs
[
i
].
«t_ù
, 
aöfo
->«t_ùË&&Éxc⁄ãxt->accou¡_íåõs[i].
«t_p‹t
 ==áinfo->nat_port)

1016  
OSIP_SUCCESS
 + 1;

1018 
	`¢¥ötf
(
exc⁄ãxt
->
accou¡_íåõs
[
i
].
«t_ù
, ”xc⁄ãxt->accou¡_íåõs[i].«t_ù), "%s", 
aöfo
->nat_ip);

1019 
exc⁄ãxt
->
accou¡_íåõs
[
i
].
«t_p‹t
 = 
aöfo
->nat_port;

1020 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO1
, 
NULL
, "[eXosù] o±i⁄ së:áccou¡ infÿupd©ed [%s] -> [%s][%d]\n", 
aöfo
->
¥oxy
,áöfo->
«t_ù
,áöfo->
«t_p‹t
));

1023 
exc⁄ãxt
->
accou¡_íåõs
[
i
].
¥oxy
[0] = '\0';

1024 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosù] o±i⁄ së:áccou¡ infÿdñëed [%s]\n", 
aöfo
->
¥oxy
));

1027  
OSIP_SUCCESS
;

1031 i‡(
aöfo
->
«t_ù
[0] == '\0') {

1032  
OSIP_BADPARAMETER
;

1036 
i
 = 0; i < 
MAX_EXOSIP_ACCOUNT_INFO
; i++) {

1037 i‡(
exc⁄ãxt
->
accou¡_íåõs
[
i
].
¥oxy
[0] == '\0') {

1039 
	`¢¥ötf
(
exc⁄ãxt
->
accou¡_íåõs
[
i
].
¥oxy
, (
aöfo
->proxy), "%s",áinfo->proxy);

1040 
	`¢¥ötf
(
exc⁄ãxt
->
accou¡_íåõs
[
i
].
«t_ù
, (
aöfo
->nat_ip), "%s",áinfo->nat_ip);

1041 
exc⁄ãxt
->
accou¡_íåõs
[
i
].
«t_p‹t
 = 
aöfo
->nat_port;

1042 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO1
, 
NULL
, "[eXosù] o±i⁄ së:áccou¡ infÿadded [%s] -> [%s][%d]\n", 
aöfo
->
¥oxy
,áöfo->
«t_ù
,áöfo->
«t_p‹t
));

1043  
OSIP_SUCCESS
;

1047  
OSIP_UNDEFINED_ERROR
;

1050 
EXOSIP_OPT_ADD_DNS_CACHE
: {

1051 
eXosù_dns_ˇche
 *
íåy
;

1052 
i
;

1054 
íåy
 = (
eXosù_dns_ˇche
 *Ë
vÆue
;

1056 i‡(
íåy
 =
NULL
 ||É¡ry->
ho°
[0] == '\0') {

1057  
OSIP_BADPARAMETER
;

1060 
i
 = 0; i < 
MAX_EXOSIP_DNS_ENTRY
; i++) {

1061 i‡(
exc⁄ãxt
->
dns_íåõs
[
i
].
ho°
[0] !'\0' && 0 =
	`osù_°rˇ£cmp
”xc⁄ãxt->dns_íåõs[i].ho°, 
íåy
->host)) {

1063 i‡(
íåy
->
ù
[0] != '\0') {

1064 
	`¢¥ötf
(
exc⁄ãxt
->
dns_íåõs
[
i
].
ù
, ”xc⁄ãxt->dns_íåõs[i].ù), "%s", 
íåy
->ip);

1065 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO1
, 
NULL
, "[eXosù] o±i⁄ së: dn†ˇchêupd©ed [%s] -> [%s]\n", 
íåy
->
ho°
,É¡ry->
ù
));

1069 
	`¢¥ötf
(
íåy
->
ù
, ”¡ry->ù), "%s", 
exc⁄ãxt
->
dns_íåõs
[
i
].ip);

1070 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosù] o±i⁄ së: dn†ˇchêªtu∫ed [%s] -> [%s]\n", 
íåy
->
ho°
,É¡ry->
ù
));

1073  
OSIP_SUCCESS
;

1077 i‡(
íåy
->
ù
[0] == '\0') {

1078 
ùbuf
[
INET6_ADDRSTRLEN
];

1079 
__eXosù_sockaddr
 
addr
;

1080 
addröfo
 *addrinfo;

1083 
i
 = 
	`_eXosù_gë_addröfo
(
exc⁄ãxt
, &
addröfo
, 
íåy
->
ho°
, 0, 
IPPROTO_UDP
);

1085 i‡(
i
 != 0)

1086  
OSIP_BADPARAMETER
;

1088 
	`mem˝y
(&
addr
, 
addröfo
->
ai_addr
,áddröfo->
ai_addæí
);

1090 
	`_eXosù_‰ìaddröfo
(
addröfo
);

1092 ((
sockaddr
 *Ë&
addr
)->
ß_Ámûy
) {

1093 
AF_INET
:

1094 
	`öë_¡›
(((
sockaddr
 *Ë&
addr
)->
ß_Ámûy
, &(((
sockaddr_ö
 *Ë&addr)->
sö_addr
), 
ùbuf
, (ipbuf));

1097 
AF_INET6
:

1098 
	`öë_¡›
(((
sockaddr
 *Ë&
addr
)->
ß_Ámûy
, &(((
sockaddr_ö6
 *Ë&addr)->
sö6_addr
), 
ùbuf
, (ipbuf));

1102  
OSIP_BADPARAMETER
;

1105 i‡(
	`osù_°rˇ£cmp
(
ùbuf
, 
íåy
->
ho°
) == 0)

1106  
OSIP_SUCCESS
;

1108 
	`¢¥ötf
(
íåy
->
ù
, ”¡ry->ù), "%s", 
ùbuf
);

1112 
i
 = 0; i < 
MAX_EXOSIP_DNS_ENTRY
; i++) {

1113 i‡(
exc⁄ãxt
->
dns_íåõs
[
i
].
ho°
[0] == '\0') {

1115 
	`¢¥ötf
(
exc⁄ãxt
->
dns_íåõs
[
i
].
ho°
, (
íåy
->host), "%s",Éntry->host);

1116 
	`¢¥ötf
(
exc⁄ãxt
->
dns_íåõs
[
i
].
ù
, (
íåy
->ip), "%s",Éntry->ip);

1117 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosù] o±i⁄ së: dn†ˇchêadded [%s] -> [%s]\n", 
íåy
->
ho°
,É¡ry->
ù
));

1118  
OSIP_SUCCESS
;

1122  
OSIP_UNDEFINED_ERROR
;

1125 
EXOSIP_OPT_DELETE_DNS_CACHE
: {

1126 
eXosù_dns_ˇche
 *
íåy
;

1127 
i
;

1129 
íåy
 = (
eXosù_dns_ˇche
 *Ë
vÆue
;

1131 i‡(
íåy
 =
NULL
 ||É¡ry->
ho°
[0] == '\0') {

1132  
OSIP_BADPARAMETER
;

1135 
i
 = 0; i < 
MAX_EXOSIP_DNS_ENTRY
; i++) {

1136 i‡(
exc⁄ãxt
->
dns_íåõs
[
i
].
ho°
[0] !'\0' && 0 =
	`osù_°rˇ£cmp
”xc⁄ãxt->dns_íåõs[i].ho°, 
íåy
->host)) {

1137 
exc⁄ãxt
->
dns_íåõs
[
i
].
ho°
[0] = '\0';

1138 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosù] o±i⁄ së: dn†ˇchêdñëed [%s]\n", 
íåy
->
ho°
));

1139  
OSIP_SUCCESS
;

1143  
OSIP_UNDEFINED_ERROR
;

1146 
EXOSIP_OPT_UDP_KEEP_ALIVE
:

1147 
vÆ
 = *((*Ë
vÆue
);

1148 
exc⁄ãxt
->
ka_öãrvÆ
 = 
vÆ
;

1150 #ifde‡
ENABLE_KEEP_ALIVE_OPTIONS_METHOD


1152 
EXOSIP_OPT_KEEP_ALIVE_OPTIONS_METHOD
:

1153 
vÆ
 = *((*Ë
vÆue
);

1154 
exc⁄ãxt
->
ka_›ti⁄s
 = 
vÆ
;

1158 
EXOSIP_OPT_AUTO_MASQUERADE_CONTACT
:

1159 
vÆ
 = *((*Ë
vÆue
);

1160 
exc⁄ãxt
->
auto_masquîade_c⁄è˘
 = 
vÆ
;

1163 
EXOSIP_OPT_USE_RPORT
:

1164 
vÆ
 = *((*Ë
vÆue
);

1165 
exc⁄ãxt
->
u£_Ω‹t
 = 
vÆ
;

1168 
EXOSIP_OPT_SET_IPV4_FOR_GATEWAY
:

1169 
tmp
 = (*Ë
vÆue
;

1170 
	`mem£t
(
exc⁄ãxt
->
ùv4_f‹_g©eway
, '\0', (excontext->ipv4_for_gateway));

1172 i‡(
tmp
 !
NULL
 &&Åmp[0] != '\0')

1173 
	`osù_°∫˝y
(
exc⁄ãxt
->
ùv4_f‹_g©eway
, 
tmp
, (excontext->ipv4_for_gateway) - 1);

1175 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO1
, 
NULL
, "[eXosù] o±i⁄ së: ipv4_f‹_g©eway [%s]\n", 
exc⁄ãxt
->
ùv4_f‹_g©eway
));

1177 #i‚de‡
MINISIZE


1179 
EXOSIP_OPT_SET_IPV6_FOR_GATEWAY
:

1180 
tmp
 = (*Ë
vÆue
;

1181 
	`mem£t
(
exc⁄ãxt
->
ùv6_f‹_g©eway
, '\0', (excontext->ipv6_for_gateway));

1183 i‡(
tmp
 !
NULL
 &&Åmp[0] != '\0')

1184 
	`osù_°∫˝y
(
exc⁄ãxt
->
ùv6_f‹_g©eway
, 
tmp
, (excontext->ipv6_for_gateway) - 1);

1186 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO1
, 
NULL
, "[eXosù] o±i⁄ së: ipv6_f‹_g©eway [%s]\n", 
exc⁄ãxt
->
ùv6_f‹_g©eway
));

1190 
EXOSIP_OPT_DNS_CAPABILITIES
:

1191 
vÆ
 = *((*Ë
vÆue
);

1193 
exc⁄ãxt
->
dns_ˇ∑bûôõs
 = 
vÆ
;

1196 
EXOSIP_OPT_REMOVE_PREROUTESET
:

1197 
vÆ
 = *((*Ë
vÆue
);

1199 
exc⁄ãxt
->
ªmove_¥îouã£t
 = 
vÆ
;

1202 
EXOSIP_OPT_SET_SIP_INSTANCE
:

1203 
tmp
 = (*Ë
vÆue
;

1204 
	`mem£t
(
exc⁄ãxt
->
sù_ö°™˚
, '\0', (excontext->sip_instance));

1206 i‡(
tmp
 !
NULL
 &&Åmp[0] != '\0')

1207 
	`osù_°∫˝y
(
exc⁄ãxt
->
sù_ö°™˚
, 
tmp
, (excontext->sip_instance) - 1);

1209 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO1
, 
NULL
, "[eXosù] o±i⁄ së: +sù.ö°™˚ [%s]\n", 
exc⁄ãxt
->
sù_ö°™˚
));

1212 
EXOSIP_OPT_SET_CONTACT_DIALOG_EXTRA_PARAMS
:

1213 
tmp
 = (*Ë
vÆue
;

1214 
	`mem£t
(
exc⁄ãxt
->
co_dülog_exåa_∑øms
, '\0', (excontext->co_dialog_extra_params));

1216 i‡(
tmp
 !
NULL
 &&Åmp[0] != '\0')

1217 
	`osù_°∫˝y
(
exc⁄ãxt
->
co_dülog_exåa_∑øms
, 
tmp
, (excontext->co_dialog_extra_params) - 1);

1219 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO1
, 
NULL
, "[eXosù] o±i⁄ së: co_exåa_dülog_∑øm†[%s]\n", 
exc⁄ãxt
->
co_dülog_exåa_∑øms
));

1222 
EXOSIP_OPT_SET_DEFAULT_CONTACT_DISPLAYNAME
:

1223 
tmp
 = (*Ë
vÆue
;

1224 
	`mem£t
(
exc⁄ãxt
->
deÁu…_c⁄è˘_di•œy«me
, '\0', (excontext->default_contact_displayname));

1226 i‡(
tmp
 !
NULL
 &&Åmp[0] != '\0')

1227 
	`osù_°∫˝y
(
exc⁄ãxt
->
deÁu…_c⁄è˘_di•œy«me
, 
tmp
, (excontext->default_contact_displayname) - 1);

1229 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO1
, 
NULL
, "[eXosù] o±i⁄ së: deÁu…_c⁄è˘_di•œy«mê[%s]\n", 
exc⁄ãxt
->
deÁu…_c⁄è˘_di•œy«me
));

1232 
EXOSIP_OPT_SET_SESSIONTIMERS_FORCE
:

1233 
vÆ
 = *((*Ë
vÆue
);

1234 
exc⁄ãxt
->
›t_£ssi⁄timîs_f‹˚
 = 
vÆ
;

1237 
EXOSIP_OPT_FORCE_CONNECTIONREUSE
:

1238 
vÆ
 = *((*Ë
vÆue
);

1239 
exc⁄ãxt
->
›t_f‹˚_c⁄√˘i⁄ªu£
 = 
vÆ
;

1242 
EXOSIP_OPT_SET_DSCP
:

1243 
vÆ
 = *((*Ë
vÆue
);

1245 
exc⁄ãxt
->
ds˝
 = 
vÆ
;

1248 
EXOSIP_OPT_REGISTER_WITH_DATE
:

1249 
vÆ
 = *((*Ë
vÆue
);

1250 
exc⁄ãxt
->
ªgi°î_wôh_d©e
 = 
vÆ
;

1253 
EXOSIP_OPT_SET_HEADER_USER_AGENT
: {

1254 c⁄° *
u£r_agít
 = (c⁄° *Ë
vÆue
;

1256 
	`osù_‰ì
(
exc⁄ãxt
->
u£r_agít
);

1258 i‡(
u£r_agít
 =
NULL
 || user_agent[0] == '\0')

1259 
exc⁄ãxt
->
u£r_agít
 = 
	`osù_°rdup
("eXosù/" 
EXOSIP_VERSION
);

1262 
exc⁄ãxt
->
u£r_agít
 = 
	`osù_°rdup
(user_agent);

1265 
EXOSIP_OPT_ENABLE_DNS_CACHE
:

1266 
vÆ
 = *((*Ë
vÆue
);

1267 
exc⁄ãxt
->
íabÀ_dns_ˇche
 = 
vÆ
;

1270 
EXOSIP_OPT_SET_TLS_VERIFY_CERTIFICATE
:

1271 
vÆ
 = *((*Ë
vÆue
);

1272 
	`eXosù_és_vîify_˚πifiˇã
(
exc⁄ãxt
, 
vÆ
);

1275 
EXOSIP_OPT_SET_TLS_CERTIFICATES_INFO
: {

1276 
eXosù_és_˘x_t
 *
ésvÆ
 = (eXosù_és_˘x_à*Ë
vÆue
;

1278 
	`eXosù_£t_és_˘x
(
exc⁄ãxt
, 
ésvÆ
);

1281 
EXOSIP_OPT_SET_TLS_CLIENT_CERTIFICATE_NAME
:

1282  
OSIP_UNDEFINED_ERROR
;

1284 
EXOSIP_OPT_SET_TLS_SERVER_CERTIFICATE_NAME
:

1285  
OSIP_UNDEFINED_ERROR
;

1287 
EXOSIP_OPT_SET_TSC_SERVER
:

1288  
OSIP_UNDEFINED_ERROR
;

1290 
EXOSIP_OPT_ENABLE_AUTOANSWERBYE
:

1291 
vÆ
 = *((*Ë
vÆue
);

1292 
exc⁄ãxt
->
autﬂnswî_bye
 = 
vÆ
;

1295 
EXOSIP_OPT_ENABLE_IPV6
:

1296 
vÆ
 = *((*Ë
vÆue
);

1297 
exc⁄ãxt
->
ùv6_íabÀ
 = 
vÆ
;

1300 
EXOSIP_OPT_ENABLE_REUSE_TCP_PORT
:

1301 
vÆ
 = *((*Ë
vÆue
);

1302 
exc⁄ãxt
->
ªu£_t˝_p‹t
 = 
vÆ
;

1305 
EXOSIP_OPT_ENABLE_USE_EPHEMERAL_PORT
:

1306 
vÆ
 = *((*Ë
vÆue
);

1307 
exc⁄ãxt
->
u£_ïhemîÆ_p‹t
 = 
vÆ
;

1310 
EXOSIP_OPT_SET_CALLBACK_WAKELOCK
:

1311 
exc⁄ãxt
->
cbsùWakeLock
 = (
CbSùWakeLock
Ë
vÆue
;

1314 
EXOSIP_OPT_ENABLE_OUTBOUND
:

1315 
vÆ
 = *((*Ë
vÆue
);

1316 
exc⁄ãxt
->
íabÀ_outbound
 = 
vÆ
;

1319 
EXOSIP_OPT_SET_OC_LOCAL_ADDRESS
:

1320 
tmp
 = (*Ë
vÆue
;

1321 
	`mem£t
(
exc⁄ãxt
->
oc_loˇl_addªss
, '\0', (excontext->oc_local_address));

1323 i‡(
tmp
 !
NULL
 &&Åmp[0] != '\0')

1324 
	`osù_°∫˝y
(
exc⁄ãxt
->
oc_loˇl_addªss
, 
tmp
, (excontext->oc_local_address) - 1);

1326 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO1
, 
NULL
, "[eXosù] o±i⁄ së: oc_loˇl_addªs†[%s]\n", 
exc⁄ãxt
->
oc_loˇl_addªss
));

1329 
EXOSIP_OPT_SET_OC_PORT_RANGE
: {

1330 *
ønge
 = ((*Ë
vÆue
);

1332 
exc⁄ãxt
->
oc_loˇl_p‹t_ønge
[0] = 
ønge
[0];

1333 
exc⁄ãxt
->
oc_loˇl_p‹t_ønge
[1] = 
ønge
[1];

1337 
EXOSIP_OPT_SET_MAX_MESSAGE_TO_READ
: {

1338 
exc⁄ãxt
->
max_mesßge_to_ªad
 = *((*Ë
vÆue
);

1342 
EXOSIP_OPT_SET_MAX_READ_TIMEOUT
: {

1343 
exc⁄ãxt
->
max_ªad_timeout
 = *((*Ë
vÆue
);

1347 
EXOSIP_OPT_GET_STATISTICS
: {

1348 
eXosù_°©s
 *
°©s
 = (eXosù_°©†*Ë
vÆue
;

1349 
timevÆ
 
now
;

1351 
	`osù_gëtimeofday
(&
now
, 
NULL
);

1352 
	`_eXosù_cou¡îs_upd©e
(&
exc⁄ãxt
->
avîage_å™ß˘i⁄s
, 0, &
now
);

1353 
	`_eXosù_cou¡îs_upd©e
(&
exc⁄ãxt
->
avîage_ªgi°øti⁄s
, 0, &
now
);

1354 
	`_eXosù_cou¡îs_upd©e
(&
exc⁄ãxt
->
avîage_ˇŒs
, 0, &
now
);

1355 
	`_eXosù_cou¡îs_upd©e
(&
exc⁄ãxt
->
avîage_publiˇti⁄s
, 0, &
now
);

1356 
	`_eXosù_cou¡îs_upd©e
(&
exc⁄ãxt
->
avîage_subs¸ùti⁄s
, 0, &
now
);

1357 
	`_eXosù_cou¡îs_upd©e
(&
exc⁄ãxt
->
avîage_ösubs¸ùti⁄s
, 0, &
now
);

1358 #i‚de‡
MINISIZE


1359 
exc⁄ãxt
->
°©i°ics
.
avîage_å™ß˘i⁄s
 =Éxc⁄ãxt->avîage_å™ß˘i⁄s.
cuºít_avîage
;

1360 
exc⁄ãxt
->
°©i°ics
.
avîage_ªgi°øti⁄s
 =Éxc⁄ãxt->avîage_ªgi°øti⁄s.
cuºít_avîage
;

1361 
exc⁄ãxt
->
°©i°ics
.
avîage_ˇŒs
 =Éxc⁄ãxt->avîage_ˇŒs.
cuºít_avîage
;

1362 
exc⁄ãxt
->
°©i°ics
.
avîage_publiˇti⁄s
 =Éxc⁄ãxt->avîage_publiˇti⁄s.
cuºít_avîage
;

1363 
exc⁄ãxt
->
°©i°ics
.
avîage_subs¸ùti⁄s
 =Éxc⁄ãxt->avîage_subs¸ùti⁄s.
cuºít_avîage
;

1364 
exc⁄ãxt
->
°©i°ics
.
avîage_ösubs¸ùti⁄s
 =Éxc⁄ãxt->avîage_ösubs¸ùti⁄s.
cuºít_avîage
;

1365 
	`mem˝y
(
°©s
, &
exc⁄ãxt
->
°©i°ics
, (
eXosù_°©s
));

1371  
OSIP_BADPARAMETER
;

1374  
OSIP_SUCCESS
;

1375 
	}
}

1377 
	$_eXosù_kìp_Æive
(
eXosù_t
 *
exc⁄ãxt
) {

1378 
timevÆ
 
now
;

1380 
	`osù_gëtimeofday
(&
now
, 
NULL
);

1389 i‡(
exc⁄ãxt
->
cc_timî
.
tv_£c
 =0 &&Éxc⁄ãxt->cc_timî.
tv_u£c
 == 0) {

1391 
	`osù_gëtimeofday
(&
exc⁄ãxt
->
cc_timî
, 
NULL
);

1392 
	`add_gëtimeofday
(&
exc⁄ãxt
->
cc_timî
, 5000);

1395 i‡(
	`osù_timîcmp
(&
now
, &
exc⁄ãxt
->
cc_timî
, >=)) {

1397 
	`osù_gëtimeofday
(&
exc⁄ãxt
->
cc_timî
, 
NULL
);

1398 
	`add_gëtimeofday
(&
exc⁄ãxt
->
cc_timî
, 5000);

1400 i‡(
exc⁄ãxt
->
eXé_å™•‹t
.
é_check_c⁄√˘i⁄
 !
NULL
)

1401 
exc⁄ãxt
->
eXé_å™•‹t
.
	`é_check_c⁄√˘i⁄
(excontext, -1);

1404 i‡(
exc⁄ãxt
->
ka_timî
.
tv_£c
 =0 &&Éxc⁄ãxt->ka_timî.
tv_u£c
 == 0) {

1406 
	`osù_gëtimeofday
(&
exc⁄ãxt
->
ka_timî
, 
NULL
);

1407 
	`add_gëtimeofday
(&
exc⁄ãxt
->
ka_timî
,Éxc⁄ãxt->
ka_öãrvÆ
);

1410 i‡(
	`osù_timîcmp
(&
now
, &
exc⁄ãxt
->
ka_timî
, <)) {

1415 
	`osù_gëtimeofday
(&
exc⁄ãxt
->
ka_timî
, 
NULL
);

1416 
	`add_gëtimeofday
(&
exc⁄ãxt
->
ka_timî
,Éxc⁄ãxt->
ka_öãrvÆ
);

1418 i‡(
exc⁄ãxt
->
eXé_å™•‹t
.
é_kì∑live
 !
NULL
)

1419 
exc⁄ãxt
->
eXé_å™•‹t
.
	`é_kì∑live
(excontext);

1420 
	}
}

1422 #i‚de‡
OSIP_MONOTHREAD


1423 *
	$_eXosù_thªad
(*
¨g
) {

1424 
eXosù_t
 *
exc⁄ãxt
 = (eXosù_à*Ë
¨g
;

1425 
i
;

1427 
exc⁄ãxt
->
j_°›_ua
 == 0) {

1428 
i
 = 
	`eXosù_execuã
(
exc⁄ãxt
);

1430 i‡(
i
 == -2000)

1431 
	`osù_thªad_exô
();

1434 
	`osù_thªad_exô
();

1435  
NULL
;

1436 
	}
}

1440 #i‚de‡
MINISIZE


1442 
	$_eXosù_cou¡îs_öô
(
eXosù_cou¡îs
 *
bw_°©s
, 
≥riod
, 
öãrvÆ
) {

1443 
bw_°©s
->
≥riod
 =Öeriod;

1444 
bw_°©s
->
öãrvÆ
 = interval;

1446 i‡(
bw_°©s
->
≥riod
 <= 0)

1447 
bw_°©s
->
≥riod
 = 
EXOSIP_STATS_PERIOD
;

1449 i‡(
bw_°©s
->
öãrvÆ
 <= 0)

1450 
bw_°©s
->
öãrvÆ
 = 
EXOSIP_STATS_INTERVAL
;

1452 
bw_°©s
->
num_íåõs
 = (bw_°©s->
≥riod
 / bw_°©s->
öãrvÆ
);

1453 
bw_°©s
->
vÆues
 = (*Ë
	`osù_mÆloc
((Ë* bw_°©s->
num_íåõs
);

1454 
	`mem£t
(
bw_°©s
->
vÆues
, 0, (Ë* bw_°©s->
num_íåõs
);

1455 
bw_°©s
->
times
 = (
timevÆ
 *Ë
	`osù_mÆloc
((timevÆË* bw_°©s->
num_íåõs
);

1456 
	`mem£t
(
bw_°©s
->
times
, 0, (
timevÆ
Ë* bw_°©s->
num_íåõs
);

1457 
	}
}

1459 
	$_eXosù_cou¡îs_‰ì
(
eXosù_cou¡îs
 *
bw_°©s
) {

1460 
	`osù_‰ì
(
bw_°©s
->
vÆues
);

1461 
	`osù_‰ì
(
bw_°©s
->
times
);

1462 
bw_°©s
->
vÆues
 = 
NULL
;

1463 
bw_°©s
->
times
 = 
NULL
;

1464 
bw_°©s
->
tŸÆ_vÆues
 = 0;

1465 
bw_°©s
->
ödex_œ°
 = 0;

1466 
	}
}

1468 
	$compuã_avîage
(
timevÆ
 *
‹ig
, 
vÆues
) {

1469 
timevÆ
 
cuºít
;

1470 
time
;

1472 i‡(
vÆues
 == 0)

1475 
	`osù_gëtimeofday
(&
cuºít
, 
NULL
);

1476 
time
 = (Ë(
cuºít
.
tv_£c
 - 
‹ig
->tv_sec) / 3600;

1478 i‡(
time
 == 0)

1481  ((Ë
vÆues
Ë/ (
time
 + 0.000001f);

1482 
	}
}

1484 
	$_eXosù_cou¡îs_upd©e
(
eXosù_cou¡îs
 *
bw_°©s
, 
nvÆues
, 
timevÆ
 *
now
) {

1485 
öãrvÆ
;

1486 
œ°_öãrvÆ
;

1488 i‡(
bw_°©s
->
vÆues
 =
NULL
)

1489 
	`_eXosù_cou¡îs_öô
(
bw_°©s
, 0, 0);

1491 
öãrvÆ
 = (
now
->
tv_£c
 - 
bw_°©s
->
times
[0].tv_sec);

1493 i‡(
bw_°©s
->
ödex_œ°
 > 0 && 
öãrvÆ
 <= bw_stats->interval) {

1494 
bw_°©s
->
vÆues
[0] +
nvÆues
;

1495 
bw_°©s
->
tŸÆ_vÆues
 +
nvÆues
;

1496 
bw_°©s
->
cuºít_avîage
 = 
	`compuã_avîage
(&bw_°©s->
times
[bw_°©s->
ödex_œ°
 - 1], bw_°©s->
tŸÆ_vÆues
);

1500 
œ°_öãrvÆ
 = 0;

1502 
bw_°©s
->
ödex_œ°
 > 0) {

1503 
œ°_öãrvÆ
 = (
now
->
tv_£c
 - 
bw_°©s
->
times
[bw_°©s->
ödex_œ°
 - 1].tv_sec);

1505 i‡(
œ°_öãrvÆ
 < 
bw_°©s
->
≥riod
 && bw_°©s->
ödex_œ°
 < bw_°©s->
num_íåõs
)

1508 
bw_°©s
->
tŸÆ_vÆues
 -bw_°©s->
vÆues
[bw_°©s->
ödex_œ°
 - 1];

1509 
bw_°©s
->
ödex_œ°
--;

1512 i‡(
nvÆues
 > 0) {

1513 
bw_°©s
->
tŸÆ_vÆues
 +
nvÆues
;

1514 
	`memmove
(((*Ë
bw_°©s
->
vÆues
Ë+ (), bw_°©s->vÆues, (Ë* (bw_°©s->
ödex_œ°
));

1515 
	`memmove
(((*Ë
bw_°©s
->
times
Ë+ (
timevÆ
), bw_°©s->times, (timevÆË* (bw_°©s->
ödex_œ°
));

1516 
bw_°©s
->
vÆues
[0] = 
nvÆues
;

1517 
bw_°©s
->
times
[0].
tv_£c
 = 
now
->tv_sec;

1518 
bw_°©s
->
times
[0].
tv_u£c
 = 
now
->tv_usec;

1519 
bw_°©s
->
ödex_œ°
++;

1522 i‡(
bw_°©s
->
ödex_œ°
 > 0) {

1523 
bw_°©s
->
cuºít_avîage
 = 
	`compuã_avîage
(&bw_°©s->
times
[bw_°©s->
ödex_œ°
 - 1], bw_°©s->
tŸÆ_vÆues
);

1526 
bw_°©s
->
cuºít_avîage
 = 0;

1528 
	}
}

	@/home/unasaw/sip_project/libexosip2-5.3.0/src/eXinsubscription_api.c

33 
	~"eXosù2.h
"

35 #i‚de‡
MINISIZE


37 
	$_eXosù_ösubs¸ùti⁄_å™ß˘i⁄_föd
(
eXosù_t
 *
exc⁄ãxt
, 
tid
, 
eXosù_nŸify_t
 **
jn
, 
eXosù_dülog_t
 **
jd
, 
osù_å™ß˘i⁄_t
 **
å
) {

38 *
jn
 = 
exc⁄ãxt
->
j_nŸifõs
; *j¿!
NULL
; *j¿(*jn)->
√xt
) {

39 i‡((*
jn
)->
n_öc_å
 !
NULL
 && (*jn)->n_öc_å->
å™ß˘i⁄id
 =
tid
) {

40 *
å
 = (*
jn
)->
n_öc_å
;

41 *
jd
 = (*
jn
)->
n_dülogs
;

42  
OSIP_SUCCESS
;

45 i‡((*
jn
)->
n_out_å
 !
NULL
 && (*jn)->n_out_å->
å™ß˘i⁄id
 =
tid
) {

46 *
å
 = (*
jn
)->
n_out_å
;

47 *
jd
 = (*
jn
)->
n_dülogs
;

48  
OSIP_SUCCESS
;

51 *
jd
 = (*
jn
)->
n_dülogs
; *jd !
NULL
; *jd = (*jd)->
√xt
) {

52 
osù_li°_ôî©‹_t
 
ô
;

53 
osù_å™ß˘i⁄_t
 *
å™ß˘i⁄
;

55 
å™ß˘i⁄
 = (
osù_å™ß˘i⁄_t
 *Ë
	`osù_li°_gë_fú°
((*
jd
)->
d_öc_ås
, &
ô
);

57 
å™ß˘i⁄
 !
OSIP_SUCCESS
) {

58 i‡(
å™ß˘i⁄
 !
NULL
 &&Åønß˘i⁄->
å™ß˘i⁄id
 =
tid
) {

59 *
å
 = 
å™ß˘i⁄
;

60  
OSIP_SUCCESS
;

63 
å™ß˘i⁄
 = (
osù_å™ß˘i⁄_t
 *Ë
	`osù_li°_gë_√xt
(&
ô
);

66 
å™ß˘i⁄
 = (
osù_å™ß˘i⁄_t
 *Ë
	`osù_li°_gë_fú°
((*
jd
)->
d_out_ås
, &
ô
);

68 
å™ß˘i⁄
 !
OSIP_SUCCESS
) {

69 i‡(
å™ß˘i⁄
 !
NULL
 &&Åønß˘i⁄->
å™ß˘i⁄id
 =
tid
) {

70 *
å
 = 
å™ß˘i⁄
;

71  
OSIP_SUCCESS
;

74 
å™ß˘i⁄
 = (
osù_å™ß˘i⁄_t
 *Ë
	`osù_li°_gë_√xt
(&
ô
);

79 *
jd
 = 
NULL
;

80 *
jn
 = 
NULL
;

81  
OSIP_NOTFOUND
;

82 
	}
}

84 
	$eXosù_ösubs¸ùti⁄_ªmove
(
eXosù_t
 *
exc⁄ãxt
, 
did
) {

85 
eXosù_dülog_t
 *
jd
 = 
NULL
;

86 
eXosù_nŸify_t
 *
jn
 = 
NULL
;

88 i‡(
did
 <= 0)

89  
OSIP_BADPARAMETER
;

91 i‡(
did
 > 0) {

92 
	`_eXosù_nŸify_dülog_föd
(
exc⁄ãxt
, 
did
, &
jn
, &
jd
);

95 i‡(
jd
 =
NULL
 || 
jn
 == NULL) {

96 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip]Ço incoming subscription here\n"));

97  
OSIP_NOTFOUND
;

100 
	`REMOVE_ELEMENT
(
exc⁄ãxt
->
j_nŸifõs
, 
jn
);

101 
	`_eXosù_nŸify_‰ì
(
exc⁄ãxt
, 
jn
);

102  
OSIP_SUCCESS
;

103 
	}
}

105 
	$eXosù_ösubs¸ùti⁄_buûd_™swî
(
eXosù_t
 *
exc⁄ãxt
, 
tid
, 
°©us
, 
osù_mesßge_t
 **
™swî
) {

106 
i
 = -1;

107 
eXosù_dülog_t
 *
jd
 = 
NULL
;

108 
eXosù_nŸify_t
 *
jn
 = 
NULL
;

109 
osù_å™ß˘i⁄_t
 *
å
 = 
NULL
;

111 *
™swî
 = 
NULL
;

113 i‡(
tid
 <= 0)

114  
OSIP_BADPARAMETER
;

116 i‡(
tid
 > 0) {

117 
	`_eXosù_ösubs¸ùti⁄_å™ß˘i⁄_föd
(
exc⁄ãxt
, 
tid
, &
jn
, &
jd
, &
å
);

120 i‡(
å
 =
NULL
 || 
jd
 =NULL || 
jn
 == NULL) {

121 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip]Ço incoming subscription here\n"));

122  
OSIP_NOTFOUND
;

125 i‡(
°©us
 < 101 || status > 699) {

126 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] wrong status code (101<status<699)\n"));

127  
OSIP_BADPARAMETER
;

130 
i
 = 
	`_eXosù_buûd_ª•⁄£_deÁu…
(
exc⁄ãxt
, 
™swî
, 
jd
->
d_dülog
, 
°©us
, 
å
->
‹ig_ªque°
);

132 i‡(
i
 != 0) {

133 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosù] c™nŸ cª©êª•⁄£ f‹ [%s]\n", 
å
->
‹ig_ªque°
->
sù_mëhod
));

134  
i
;

137 i‡(
°©us
 >= 200 && status <= 299)

138 
	`_eXosù_nŸify_add_expúes_ö_2XX_f‹_subs¸ibe
(
jn
, *
™swî
);

140 i‡(
°©us
 < 300)

141 
i
 = 
	`_eXosù_com∂ëe_™swî_th©_e°ablish_a_dülog
(
exc⁄ãxt
, *
™swî
, 
å
->
‹ig_ªque°
);

143  
i
;

144 
	}
}

146 
	$eXosù_ösubs¸ùti⁄_£nd_™swî
(
eXosù_t
 *
exc⁄ãxt
, 
tid
, 
°©us
, 
osù_mesßge_t
 *
™swî
) {

147 
i
 = -1;

148 
eXosù_dülog_t
 *
jd
 = 
NULL
;

149 
eXosù_nŸify_t
 *
jn
 = 
NULL
;

150 
osù_å™ß˘i⁄_t
 *
å
 = 
NULL
;

151 
osù_evít_t
 *
evt_™swî
;

153 i‡(
tid
 <= 0) {

154 
	`osù_mesßge_‰ì
(
™swî
);

155  
OSIP_BADPARAMETER
;

158 i‡(
tid
 > 0) {

159 
	`_eXosù_ösubs¸ùti⁄_å™ß˘i⁄_föd
(
exc⁄ãxt
, 
tid
, &
jn
, &
jd
, &
å
);

162 i‡(
jd
 =
NULL
 || 
å
 =NULL ||År->
‹ig_ªque°
 =NULL ||År->‹ig_ªque°->
sù_mëhod
 == NULL) {

163 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip]Ço incoming subscription here\n"));

164 
	`osù_mesßge_‰ì
(
™swî
);

165  
OSIP_NOTFOUND
;

168 i‡(
™swî
 =
NULL
) {

169 i‡(0 =
	`osù_°rˇ£cmp
(
å
->
‹ig_ªque°
->
sù_mëhod
, "SUBSCRIBE") || 0 == osip_strcasecmp(tr->orig_request->sip_method, "REFER")) {

170 i‡(
°©us
 >= 200 && status <= 299) {

171 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip]ÖrovideáÖreparedánswer\n"));

172  
OSIP_BADPARAMETER
;

178 i‡(
å
->
°©e
 =
NIST_COMPLETED
 ||År->°©ê=
NIST_TERMINATED
) {

179 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip]Åransactionálreadyánswered\n"));

180 
	`osù_mesßge_‰ì
(
™swî
);

181  
OSIP_WRONG_STATE
;

184 i‡(
™swî
 =
NULL
) {

185 i‡(0 =
	`osù_°rˇ£cmp
(
å
->
‹ig_ªque°
->
sù_mëhod
, "SUBSCRIBE") || 0 == osip_strcasecmp(tr->orig_request->sip_method, "REFER")) {

186 i‡(
°©us
 < 200)

187 
i
 = 
	`_eXosù_ösubs¸ùti⁄_™swî_1xx
(
exc⁄ãxt
, 
jn
, 
jd
, 
°©us
);

190 
i
 = 
	`_eXosù_ösubs¸ùti⁄_™swî_3456xx
(
exc⁄ãxt
, 
jn
, 
jd
, 
°©us
);

192 i‡(
i
 != 0) {

193 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] cannot sendÑesponse\n"));

194  
i
;

199 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip]áÑesponse must be given\n"));

200  
OSIP_BADPARAMETER
;

203  
OSIP_SUCCESS
;

206 
i
 = 0;

209 i‡(0 =
	`osù_°rˇ£cmp
(
å
->
‹ig_ªque°
->
sù_mëhod
, "SUBSCRIBE") || 0 == osip_strcasecmp(tr->orig_request->sip_method, "REFER")) {

210 i‡(
	`MSG_IS_STATUS_1XX
(
™swî
)) {

211 } i‡(
	`MSG_IS_STATUS_2XX
(
™swî
)) {

212 
	`_eXosù_dülog_£t_200ok
(
jd
, 
™swî
);

213 
	`osù_dülog_£t_°©e
(
jd
->
d_dülog
, 
DIALOG_CONFIRMED
);

215 } i‡(
™swî
->
°©us_code
 >= 300 &&ánswer->status_code <= 699) {

216 
i
 = 0;

219 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] wrong status code (101<status<699)\n"));

220 
	`osù_mesßge_‰ì
(
™swî
);

221  
OSIP_BADPARAMETER
;

225 
evt_™swî
 = 
	`osù_√w_outgoög_sùmesßge
(
™swî
);

226 
evt_™swî
->
å™ß˘i⁄id
 = 
å
->transactionid;

228 
	`osù_å™ß˘i⁄_add_evít
(
å
, 
evt_™swî
);

229 
	`_eXosù_upd©e
(
exc⁄ãxt
);

230 
	`_eXosù_wakeup
(
exc⁄ãxt
);

231  
OSIP_SUCCESS
;

232 
	}
}

234 
	$eXosù_ösubs¸ùti⁄_buûd_nŸify
(
eXosù_t
 *
exc⁄ãxt
, 
did
, 
subs¸ùti⁄_°©us
, 
subs¸ùti⁄_ªas⁄
, 
osù_mesßge_t
 **
ªque°
) {

235 
eXosù_dülog_t
 *
jd
 = 
NULL
;

236 
eXosù_nŸify_t
 *
jn
 = 
NULL
;

238 
subs¸ùti⁄_°©e
[50];

239 *
tmp
;

240 
time_t
 
now
 = 
	`osù_gësy°emtime
(
NULL
);

242 
i
;

244 *
ªque°
 = 
NULL
;

246 i‡(
did
 <= 0)

247  
OSIP_BADPARAMETER
;

249 i‡(
did
 > 0) {

250 
	`_eXosù_nŸify_dülog_föd
(
exc⁄ãxt
, 
did
, &
jn
, &
jd
);

253 i‡(
jd
 =
NULL
 || 
jn
 == NULL) {

254 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip]Ço incoming subscription here\n"));

255  
OSIP_NOTFOUND
;

258 
i
 = 
	`eXosù_ösubs¸ùti⁄_buûd_ªque°
(
exc⁄ãxt
, 
did
, "NOTIFY", 
ªque°
);

260 i‡(
i
 != 0) {

261  
i
;

264 #i‚de‡
SUPPORT_MSN


266 i‡(
subs¸ùti⁄_°©us
 =
EXOSIP_SUBCRSTATE_PENDING
)

267 
	`osù_°∫˝y
(
subs¸ùti⁄_°©e
, "pending;expires=", 16);

269 i‡(
subs¸ùti⁄_°©us
 =
EXOSIP_SUBCRSTATE_ACTIVE
)

270 
	`osù_°∫˝y
(
subs¸ùti⁄_°©e
, "active;expires=", 15);

272 i‡(
subs¸ùti⁄_°©us
 =
EXOSIP_SUBCRSTATE_TERMINATED
) {

273 i‡(
subs¸ùti⁄_ªas⁄
 =
DEACTIVATED
)

274 
	`osù_°∫˝y
(
subs¸ùti⁄_°©e
, "terminated;reason=deactivated", 29);

276 i‡(
subs¸ùti⁄_ªas⁄
 =
PROBATION
)

277 
	`osù_°∫˝y
(
subs¸ùti⁄_°©e
, "terminated;reason=probation", 27);

279 i‡(
subs¸ùti⁄_ªas⁄
 =
REJECTED
)

280 
	`osù_°∫˝y
(
subs¸ùti⁄_°©e
, "terminated;reason=rejected", 26);

282 i‡(
subs¸ùti⁄_ªas⁄
 =
TIMEOUT
)

283 
	`osù_°∫˝y
(
subs¸ùti⁄_°©e
, "terminated;reason=timeout", 25);

285 i‡(
subs¸ùti⁄_ªas⁄
 =
GIVEUP
)

286 
	`osù_°∫˝y
(
subs¸ùti⁄_°©e
, "terminated;reason=giveup", 24);

288 i‡(
subs¸ùti⁄_ªas⁄
 =
NORESOURCE
)

289 
	`osù_°∫˝y
(
subs¸ùti⁄_°©e
, "terminated;reason=noresource", 28);

292 
	`osù_°∫˝y
(
subs¸ùti⁄_°©e
, "terminated;reason=noresource", 28);

295 
	`osù_°∫˝y
(
subs¸ùti⁄_°©e
, "pending;expires=", 16);

297 
tmp
 = 
subs¸ùti⁄_°©e
 + 
	`°æí
(subscription_state);

299 i‡(
subs¸ùti⁄_°©us
 !
EXOSIP_SUBCRSTATE_TERMINATED
)

300 
	`¢¥ötf
(
tmp
, 50 - (tm∞- 
subs¸ùti⁄_°©e
), "%li", (Ë(
jn
->
n_ss_expúes
 - 
now
));

302 
	`osù_mesßge_£t_hódî
(*
ªque°
, "Subs¸ùti⁄-Sèã", 
subs¸ùti⁄_°©e
);

305  
OSIP_SUCCESS
;

306 
	}
}

308 
	$eXosù_ösubs¸ùti⁄_buûd_ªque°
(
eXosù_t
 *
exc⁄ãxt
, 
did
, c⁄° *
mëhod
, 
osù_mesßge_t
 **
ªque°
) {

309 
eXosù_dülog_t
 *
jd
 = 
NULL
;

310 
eXosù_nŸify_t
 *
jn
 = 
NULL
;

312 
osù_å™ß˘i⁄_t
 *
å™ß˘i⁄
;

313 
i
;

315 *
ªque°
 = 
NULL
;

317 i‡(
mëhod
 =
NULL
 || method[0] == '\0')

318  
OSIP_BADPARAMETER
;

320 i‡(
did
 <= 0)

321  
OSIP_BADPARAMETER
;

323 
	`_eXosù_nŸify_dülog_föd
(
exc⁄ãxt
, 
did
, &
jn
, &
jd
);

325 i‡(
jd
 =
NULL
 || 
jn
 == NULL) {

326 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip]Ço incoming subscription here\n"));

327  
OSIP_NOTFOUND
;

330 
å™ß˘i⁄
 = 
	`_eXosù_föd_œ°_out_nŸify
(
jd
);

332 i‡(
å™ß˘i⁄
 !
NULL
) {

333 i‡(
å™ß˘i⁄
->
°©e
 !
NICT_TERMINATED
 &&Åønß˘i⁄->°©ê!
NIST_TERMINATED
 &&Åønß˘i⁄->°©ê!
NICT_COMPLETED
 &&Åønß˘i⁄->°©ê!
NIST_COMPLETED
)

334  
OSIP_WRONG_STATE
;

337 
i
 = 
	`_eXosù_buûd_ªque°_wôhö_dülog
(
exc⁄ãxt
, 
ªque°
, 
mëhod
, 
jd
->
d_dülog
);

339 i‡(
i
 != 0)

340  
i
;

342  
OSIP_SUCCESS
;

343 
	}
}

345 
	$eXosù_ösubs¸ùti⁄_£nd_ªque°
(
eXosù_t
 *
exc⁄ãxt
, 
did
, 
osù_mesßge_t
 *
ªque°
) {

346 
eXosù_dülog_t
 *
jd
 = 
NULL
;

347 
eXosù_nŸify_t
 *
jn
 = 
NULL
;

349 
osù_å™ß˘i⁄_t
 *
å™ß˘i⁄
;

350 
osù_evít_t
 *
sùevít
;

351 
i
;

353 i‡(
ªque°
 =
NULL
)

354  
OSIP_BADPARAMETER
;

356 i‡(
did
 <= 0) {

357 
	`osù_mesßge_‰ì
(
ªque°
);

358  
OSIP_BADPARAMETER
;

361 i‡(
did
 > 0) {

362 
	`_eXosù_nŸify_dülog_föd
(
exc⁄ãxt
, 
did
, &
jn
, &
jd
);

365 i‡(
jd
 =
NULL
 || 
jn
 == NULL) {

366 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip]Ço incoming subscription here\n"));

367 
	`osù_mesßge_‰ì
(
ªque°
);

368  
OSIP_NOTFOUND
;

371 
å™ß˘i⁄
 = 
	`_eXosù_föd_œ°_out_nŸify
(
jd
);

373 i‡(
å™ß˘i⁄
 !
NULL
) {

374 i‡(
å™ß˘i⁄
->
°©e
 !
NICT_TERMINATED
 &&Åønß˘i⁄->°©ê!
NIST_TERMINATED
 &&Åønß˘i⁄->°©ê!
NICT_COMPLETED
 &&Åønß˘i⁄->°©ê!
NIST_COMPLETED
) {

375 
	`osù_mesßge_‰ì
(
ªque°
);

376  
OSIP_WRONG_STATE
;

379 
å™ß˘i⁄
 = 
NULL
;

382 
i
 = 
	`_eXosù_å™ß˘i⁄_öô
(
exc⁄ãxt
, &
å™ß˘i⁄
, 
NICT
,Éxc⁄ãxt->
j_osù
, 
ªque°
);

384 i‡(
i
 != 0) {

385 
	`osù_mesßge_‰ì
(
ªque°
);

386  
i
;

389 
	`osù_li°_add
(
jd
->
d_out_ås
, 
å™ß˘i⁄
, 0);

391 
sùevít
 = 
	`osù_√w_outgoög_sùmesßge
(
ªque°
);

392 
sùevít
->
å™ß˘i⁄id
 = 
å™ß˘i⁄
->transactionid;

394 
	`osù_å™ß˘i⁄_£t_ª£rved4
(
å™ß˘i⁄
, 
jn
);

395 
	`osù_å™ß˘i⁄_£t_ª£rved3
(
å™ß˘i⁄
, 
jd
);

397 
	`osù_å™ß˘i⁄_add_evít
(
å™ß˘i⁄
, 
sùevít
);

398 
	`_eXosù_wakeup
(
exc⁄ãxt
);

399  
OSIP_SUCCESS
;

400 
	}
}

402 
	$_eXosù_ösubs¸ùti⁄_£nd_ªque°_wôh_¸edítül
(
eXosù_t
 *
exc⁄ãxt
, 
eXosù_nŸify_t
 *
jn
, 
eXosù_dülog_t
 *
jd
, 
osù_å™ß˘i⁄_t
 *
out_å
) {

403 
osù_å™ß˘i⁄_t
 *
å
 = 
NULL
;

404 
osù_mesßge_t
 *
msg
 = 
NULL
;

405 
osù_evít_t
 *
sùevít
;

407 
c£q
;

408 
osù_vü_t
 *
vü
;

409 
i
;

411 i‡(
jn
 =
NULL
)

412  
OSIP_BADPARAMETER
;

414 i‡(
jd
 !
NULL
) {

415 i‡(
jd
->
d_out_ås
 =
NULL
)

416  
OSIP_BADPARAMETER
;

419 i‡(
out_å
 =
NULL
) {

420 
out_å
 = 
	`_eXosù_föd_œ°_out_nŸify
(
jd
);

423 i‡(
out_å
 =
NULL
 || out_å->
‹ig_ªque°
 =NULL || out_å->
œ°_ª•⁄£
 == NULL)

424  
OSIP_NOTFOUND
;

426 
i
 = 
	`osù_mesßge_˛⁄e
(
out_å
->
‹ig_ªque°
, &
msg
);

428 i‡(
i
 != 0) {

429 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] cannot clone msg foráuthentication\n"));

430  
i
;

433 
vü
 = (
osù_vü_t
 *Ë
	`osù_li°_gë
(&
msg
->
vüs
, 0);

435 i‡(
vü
 =
NULL
 || 
msg
->
c£q
 =NULL || msg->c£q->
numbî
 == NULL) {

436 
	`osù_mesßge_‰ì
(
msg
);

437 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] missing via or cseq header\n"));

438  
OSIP_SYNTAXERROR
;

442 
c£q
 = 
	`©oi
(
msg
->c£q->
numbî
);

443 
	`osù_‰ì
(
msg
->
c£q
->
numbî
);

444 
msg
->
c£q
->
numbî
 = 
	`_eXosù_°rdup_¥ötf
("%i", cseq + 1);

446 i‡(
msg
->
c£q
->
numbî
 =
NULL
) {

447 
	`osù_mesßge_‰ì
(
msg
);

448  
OSIP_NOMEM
;

451 i‡(
jd
 !
NULL
 && jd->
d_dülog
 != NULL) {

452 
jd
->
d_dülog
->
loˇl_c£q
++;

455 
i
 = 
	`_eXosù_upd©e_t›_vü
(
msg
);

457 i‡(
i
 != 0) {

458 
	`osù_mesßge_‰ì
(
msg
);

459 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] unsupportedÖrotocol\n"));

460  
i
;

463 i‡(
out_å
->
œ°_ª•⁄£
->
°©us_code
 == 401 || out_tr->last_response->status_code == 407)

464 
	`_eXosù_add_authítiˇti⁄_öf‹m©i⁄
(
exc⁄ãxt
, 
msg
, 
out_å
->
œ°_ª•⁄£
);

467 
	`_eXosù_add_authítiˇti⁄_öf‹m©i⁄
(
exc⁄ãxt
, 
msg
, 
NULL
);

469 
	`osù_mesßge_f‹˚_upd©e
(
msg
);

471 
i
 = 
	`_eXosù_å™ß˘i⁄_öô
(
exc⁄ãxt
, &
å
, 
NICT
,Éxc⁄ãxt->
j_osù
, 
msg
);

473 i‡(
i
 != 0) {

474 
	`osù_mesßge_‰ì
(
msg
);

475  
i
;

479 
	`osù_li°_add
(
jd
->
d_out_ås
, 
å
, 0);

481 
sùevít
 = 
	`osù_√w_outgoög_sùmesßge
(
msg
);

483 
	`osù_å™ß˘i⁄_£t_ª£rved4
(
å
, 
jn
);

484 
	`osù_å™ß˘i⁄_£t_ª£rved3
(
å
, 
jd
);

486 
	`osù_å™ß˘i⁄_add_evít
(
å
, 
sùevít
);

488 
	`_eXosù_upd©e
(
exc⁄ãxt
);

489 
	`_eXosù_wakeup
(
exc⁄ãxt
);

490  
OSIP_SUCCESS
;

491 
	}
}

493 
	$_eXosù_ösubs¸ùti⁄_auto_£nd_nŸify
(
eXosù_t
 *
exc⁄ãxt
, 
did
, 
subs¸ùti⁄_°©us
, 
subs¸ùti⁄_ªas⁄
) {

494 
osù_mesßge_t
 *
nŸify
;

495 
i
;

496 
xml
[4096];

497 *
ítôy
;

498 
eXosù_ˇŒ_t
 *
jc
;

499 
eXosù_dülog_t
 *
jd
;

501 i‡(
did
 <= 0)

502  
OSIP_BADPARAMETER
;

504 
i
 = 
	`eXosù_ösubs¸ùti⁄_buûd_nŸify
(
exc⁄ãxt
, 
did
, 
subs¸ùti⁄_°©us
, 
subs¸ùti⁄_ªas⁄
, &
nŸify
);

506 i‡(
i
 != 0) {

507  
i
;

511 
	`mem£t
(
xml
, 0, (xml));

513 
i
 = 
	`osù_uri_to_°r
(
nŸify
->
‰om
->
uæ
, &
ítôy
);

515 i‡(
i
 !0 || 
ítôy
 =
NULL
) {

516 
	`osù_mesßge_‰ì
(
nŸify
);

517  
i
;

520 
	`¢¥ötf
(
xml
, (xml),

529 
ítôy
);

530 
	`osù_‰ì
(
ítôy
);

533 
jc
 = 
exc⁄ãxt
->
j_ˇŒs
; j¯!
NULL
; j¯jc->
√xt
) {

534 
jd
 = 
jc
->
c_dülogs
; jd !
NULL
; jd = jd->
√xt
) {

535 i‡(
jd
->
d_dülog
 =
NULL
) {

537 
tmp_dülog
[2048];

538 
dúe˘i⁄
[20];

539 
dlg_°©e
[20];

540 *
ªmŸe_uri
 = 
NULL
;

542 i‡(
jd
->
d_dülog
->
ty≥
 =
CALLER
)

543 
	`°r˝y
(
dúe˘i⁄
, "initiator");

546 
	`°r˝y
(
dúe˘i⁄
, "recipient");

548 i‡(
jd
->
d_dülog
->
°©e
 =
DIALOG_CONFIRMED
)

549 
	`°r˝y
(
dlg_°©e
, "confirmed");

552 
	`°r˝y
(
dlg_°©e
, "early");

554 i‡(
jd
->
d_dülog
->
ªmŸe_uri
 !
NULL
 && jd->d_dülog->ªmŸe_uri->
uæ
 != NULL) {

555 
	`osù_uri_to_°r
(
jd
->
d_dülog
->
ªmŸe_uri
->
uæ
, &remote_uri);

558 i‡(
ªmŸe_uri
 !
NULL
) {

560 
	`¢¥ötf
(
tmp_dülog
, (tmp_dialog),

577 
jd
->
d_dülog
->
ˇŒ_id
, jd->d_dülog->ˇŒ_id, jd->d_dülog->
loˇl_èg
, jd->d_dülog->
ªmŸe_èg
, 
dúe˘i⁄
, 
dlg_°©e
, 
ªmŸe_uri
);

579 i‡(
	`°æí
(
xml
Ë+ såÀn(
tmp_dülog
) < (xml))

580 
	`°rˇt
(
xml
, 
tmp_dülog
);

586 i‡(
	`°æí
(
xml
) + 16 < (xml))

587 
	`°rˇt
(
xml
,

591 
	`osù_mesßge_£t_c⁄ã¡_ty≥
(
nŸify
, "application/dialog-info+xml");

592 
	`osù_mesßge_£t_body
(
nŸify
, 
xml
, 
	`°æí
(xml));

594  
	`eXosù_ösubs¸ùti⁄_£nd_ªque°
(
exc⁄ãxt
, 
did
, 
nŸify
);

595 
	}
}

597 
	$eXosù_ösubs¸ùti⁄_autom©ic
(
eXosù_t
 *
exc⁄ãxt
, 
eXosù_evít_t
 *
evt
) {

598 
eXosù_dülog_t
 *
jd
 = 
NULL
;

599 
eXosù_nŸify_t
 *
jn
 = 
NULL
;

601 
osù_hódî_t
 *
evít_hódî
;

603 i‡(
evt
->
did
 <0 ||Évt->
nid
 <= 0)

604  
OSIP_BADPARAMETER
;

606 i‡(
evt
->
ªque°
 =
NULL
)

607  
OSIP_BADPARAMETER
;

609 
	`_eXosù_nŸify_dülog_föd
(
exc⁄ãxt
, 
evt
->
did
, &
jn
, &
jd
);

611 i‡(
jd
 =
NULL
 || 
jn
 == NULL) {

612 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip]Ço incoming subscription here\n"));

613  
OSIP_NOTFOUND
;

616 
	`osù_mesßge_hódî_gë_by«me
(
evt
->
ªque°
, "evít", 0, &
evít_hódî
);

618 i‡(
evít_hódî
 =
NULL
 ||Évít_hódî->
hvÆue
 == NULL) {

619 
	`eXosù_ösubs¸ùti⁄_£nd_™swî
(
exc⁄ãxt
, 
evt
->
tid
, 400, 
NULL
);

620  
OSIP_SUCCESS
;

624 i‡(
	`osù_°rˇ£cmp
(
evít_hódî
->
hvÆue
, "dialog") == 0) {

627 i‡(
evt
->
ty≥
 =
EXOSIP_IN_SUBSCRIPTION_NEW
) {

628 
osù_mesßge_t
 *
™swî
;

629 
i
;

631 
i
 = 
	`eXosù_ösubs¸ùti⁄_buûd_™swî
(
exc⁄ãxt
, 
evt
->
tid
, 202, &
™swî
);

633 i‡(
i
 == 0) {

634 
i
 = 
	`eXosù_ösubs¸ùti⁄_£nd_™swî
(
exc⁄ãxt
, 
evt
->
tid
, 202, 
™swî
);

637 i‡(
i
 != 0) {

638 
i
 = 
	`eXosù_ösubs¸ùti⁄_£nd_™swî
(
exc⁄ãxt
, 
evt
->
tid
, 400, 
NULL
);

639  
OSIP_SUCCESS
;

643 
i
 = 
	`_eXosù_ösubs¸ùti⁄_auto_£nd_nŸify
(
exc⁄ãxt
, 
evt
->
did
, 
EXOSIP_SUBCRSTATE_ACTIVE
, 
PROBATION
);

645 i‡(
i
 != 0) {

647  
OSIP_SUCCESS
;

652 i‡(
evt
->
ty≥
 =
EXOSIP_IN_SUBSCRIPTION_NEW
) {

653 
	`eXosù_ösubs¸ùti⁄_£nd_™swî
(
exc⁄ãxt
, 
evt
->
tid
, 489, 
NULL
);

657  
OSIP_SUCCESS
;

658 
	}
}

	@/home/unasaw/sip_project/libexosip2-5.3.0/src/eXmessage_api.c

33 
	~"eXosù2.h
"

35 
	$eXosù_mesßge_buûd_ªque°
(
eXosù_t
 *
exc⁄ãxt
, 
osù_mesßge_t
 **
mesßge
, c⁄° *
mëhod
, c⁄° *
to
, c⁄° *
‰om
, c⁄° *
rouã
) {

36 
i
;

38 *
mesßge
 = 
NULL
;

40 i‡(
mëhod
 !
NULL
 && *method == '\0')

41  
OSIP_BADPARAMETER
;

43 i‡(
to
 !
NULL
 && *to == '\0')

44  
OSIP_BADPARAMETER
;

46 i‡(
‰om
 !
NULL
 && *from == '\0')

47  
OSIP_BADPARAMETER
;

49 i‡(
rouã
 !
NULL
 && *route == '\0')

50 
rouã
 = 
NULL
;

52 
i
 = 
	`_eXosù_gíî©ög_ªque°_out_of_dülog
(
exc⁄ãxt
, 
mesßge
, 
mëhod
, 
to
, 
‰om
, 
rouã
);

54 i‡(
i
 != 0)

55  
i
;

57  
OSIP_SUCCESS
;

58 
	}
}

60 
	$eXosù_mesßge_£nd_ªque°
(
eXosù_t
 *
exc⁄ãxt
, 
osù_mesßge_t
 *
mesßge
) {

61 
osù_å™ß˘i⁄_t
 *
å™ß˘i⁄
;

62 
osù_evít_t
 *
sùevít
;

63 
i
;

65 
i
 = 
	`_eXosù_å™ß˘i⁄_öô
(
exc⁄ãxt
, &
å™ß˘i⁄
, 
NICT
,Éxc⁄ãxt->
j_osù
, 
mesßge
);

67 i‡(
i
 != 0) {

68 
	`osù_mesßge_‰ì
(
mesßge
);

69  
i
;

72 
	`osù_li°_add
(&
exc⁄ãxt
->
j_å™ß˘i⁄s
, 
å™ß˘i⁄
, 0);

74 
sùevít
 = 
	`osù_√w_outgoög_sùmesßge
(
mesßge
);

75 
sùevít
->
å™ß˘i⁄id
 = 
å™ß˘i⁄
->transactionid;

77 
	`osù_å™ß˘i⁄_add_evít
(
å™ß˘i⁄
, 
sùevít
);

79 
	`_eXosù_wakeup
(
exc⁄ãxt
);

80  
å™ß˘i⁄
->
å™ß˘i⁄id
;

81 
	}
}

83 
	$eXosù_mesßge_buûd_™swî
(
eXosù_t
 *
exc⁄ãxt
, 
tid
, 
°©us
, 
osù_mesßge_t
 **
™swî
) {

84 
osù_å™ß˘i⁄_t
 *
å
 = 
NULL
;

85 
i
;

87 *
™swî
 = 
NULL
;

89 i‡(
tid
 <= 0)

90  
OSIP_BADPARAMETER
;

92 i‡(
°©us
 < 200 || status > 699)

93  
OSIP_BADPARAMETER
;

95 i‡(
tid
 > 0) {

96 
	`_eXosù_å™ß˘i⁄_föd
(
exc⁄ãxt
, 
tid
, &
å
);

99 i‡(
å
 =
NULL
) {

100 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip]Ço call here\n"));

101  
OSIP_NOTFOUND
;

104 
i
 = -1;

106 i‡(
°©us
 < 300) {

107 
i
 = 
	`_eXosù_buûd_ª•⁄£_deÁu…
(
exc⁄ãxt
, 
™swî
, 
NULL
, 
°©us
, 
å
->
‹ig_ªque°
);

109 } i‡(
°©us
 > 300)

110 
i
 = 
	`_eXosù_buûd_ª•⁄£_deÁu…
(
exc⁄ãxt
, 
™swî
, 
NULL
, 
°©us
, 
å
->
‹ig_ªque°
);

112 i‡(
i
 != 0)

113  
i
;

115 i‡(
°©us
 < 300) {

116 
osù_hódî_t
 *
ª„r_sub
;

118 
	`osù_mesßge_hódî_gë_by«me
(
å
->
‹ig_ªque°
, "Re„r-Sub", 0, &
ª„r_sub
);

120 i‡(
ª„r_sub
 !
NULL
 &&Ñe„r_sub->
hvÆue
 !NULL && 
	`osù_°∫ˇ£cmp
(refer_sub->hvalue, "false", 5) == 0) {

121 
	`osù_mesßge_£t_hódî
(*
™swî
, "Refer-Sub", "false");

125  
OSIP_SUCCESS
;

126 
	}
}

128 
	$eXosù_mesßge_£nd_™swî
(
eXosù_t
 *
exc⁄ãxt
, 
tid
, 
°©us
, 
osù_mesßge_t
 *
™swî
) {

129 
osù_å™ß˘i⁄_t
 *
å
 = 
NULL
;

130 
osù_evít_t
 *
evt_™swî
;

131 
i
 = -1;

133 i‡(
tid
 <= 0)

134  
OSIP_BADPARAMETER
;

136 i‡(
°©us
 <= 100 || status > 699)

137  
OSIP_BADPARAMETER
;

139 i‡(
™swî
 =
NULL
 && 
°©us
 > 100 && status < 200)

140  
OSIP_BADPARAMETER
;

142 i‡(
tid
 > 0) {

143 
	`_eXosù_å™ß˘i⁄_föd
(
exc⁄ãxt
, 
tid
, &
å
);

146 i‡(
å
 =
NULL
) {

147 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip]Ço MESSAGEÅransaction found\n"));

148 
	`osù_mesßge_‰ì
(
™swî
);

149  
OSIP_NOTFOUND
;

153 i‡(
å
->
°©e
 =
NIST_COMPLETED
 ||År->°©ê=
NIST_TERMINATED
) {

154 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip]Åransactionálreadyánswered\n"));

155 
	`osù_mesßge_‰ì
(
™swî
);

156  
OSIP_WRONG_STATE
;

159 i‡(
™swî
 =
NULL
) {

160 
i
 = -1;

162 i‡(
°©us
 > 199 && status < 300)

163 
i
 = 
	`_eXosù_buûd_ª•⁄£_deÁu…
(
exc⁄ãxt
, &
™swî
, 
NULL
, 
°©us
, 
å
->
‹ig_ªque°
);

165 i‡(
°©us
 > 300 && status <= 699)

166 
i
 = 
	`_eXosù_buûd_ª•⁄£_deÁu…
(
exc⁄ãxt
, &
™swî
, 
NULL
, 
°©us
, 
å
->
‹ig_ªque°
);

168 i‡(
i
 != 0)

169  
i
;

171 i‡(
°©us
 < 300) {

172 
osù_hódî_t
 *
ª„r_sub
;

174 
	`osù_mesßge_hódî_gë_by«me
(
å
->
‹ig_ªque°
, "Re„r-Sub", 0, &
ª„r_sub
);

176 i‡(
ª„r_sub
 !
NULL
 &&Ñe„r_sub->
hvÆue
 !NULL && 
	`osù_°∫ˇ£cmp
(refer_sub->hvalue, "false", 5) == 0) {

177 
	`osù_mesßge_£t_hódî
(
™swî
, "Refer-Sub", "false");

182 
evt_™swî
 = 
	`osù_√w_outgoög_sùmesßge
(
™swî
);

183 
evt_™swî
->
å™ß˘i⁄id
 = 
å
->transactionid;

185 
	`osù_å™ß˘i⁄_add_evít
(
å
, 
evt_™swî
);

186 
	`_eXosù_wakeup
(
exc⁄ãxt
);

187  
OSIP_SUCCESS
;

188 
	}
}

	@/home/unasaw/sip_project/libexosip2-5.3.0/src/eXoptions_api.c

33 
	~"eXosù2.h
"

35 #i‚de‡
MINISIZE


37 
	$eXosù_›ti⁄s_buûd_ªque°
(
eXosù_t
 *
exc⁄ãxt
, 
osù_mesßge_t
 **
›ti⁄s
, c⁄° *
to
, c⁄° *
‰om
, c⁄° *
rouã
) {

38 
i
;

40 *
›ti⁄s
 = 
NULL
;

42 i‡(
to
 !
NULL
 && *to == '\0')

43  
OSIP_BADPARAMETER
;

45 i‡(
‰om
 !
NULL
 && *from == '\0')

46  
OSIP_BADPARAMETER
;

48 i‡(
rouã
 !
NULL
 && *route == '\0')

49 
rouã
 = 
NULL
;

51 
i
 = 
	`_eXosù_gíî©ög_ªque°_out_of_dülog
(
exc⁄ãxt
, 
›ti⁄s
, "OPTIONS", 
to
, 
‰om
, 
rouã
);

53 i‡(
i
 != 0)

54  
i
;

57  
OSIP_SUCCESS
;

58 
	}
}

60 
	$eXosù_›ti⁄s_£nd_ªque°
(
eXosù_t
 *
exc⁄ãxt
, 
osù_mesßge_t
 *
›ti⁄s
) {

61 
osù_å™ß˘i⁄_t
 *
å™ß˘i⁄
;

62 
osù_evít_t
 *
sùevít
;

63 
i
;

65 
i
 = 
	`_eXosù_å™ß˘i⁄_öô
(
exc⁄ãxt
, &
å™ß˘i⁄
, 
NICT
,Éxc⁄ãxt->
j_osù
, 
›ti⁄s
);

67 i‡(
i
 != 0) {

68 
	`osù_mesßge_‰ì
(
›ti⁄s
);

69  
i
;

72 
	`osù_li°_add
(&
exc⁄ãxt
->
j_å™ß˘i⁄s
, 
å™ß˘i⁄
, 0);

74 
sùevít
 = 
	`osù_√w_outgoög_sùmesßge
(
›ti⁄s
);

75 
sùevít
->
å™ß˘i⁄id
 = 
å™ß˘i⁄
->transactionid;

77 
	`osù_å™ß˘i⁄_add_evít
(
å™ß˘i⁄
, 
sùevít
);

79 
	`_eXosù_wakeup
(
exc⁄ãxt
);

80  
å™ß˘i⁄
->
å™ß˘i⁄id
;

81 
	}
}

83 
	$eXosù_›ti⁄s_buûd_™swî
(
eXosù_t
 *
exc⁄ãxt
, 
tid
, 
°©us
, 
osù_mesßge_t
 **
™swî
) {

84 
osù_å™ß˘i⁄_t
 *
å
 = 
NULL
;

85 
i
;

87 *
™swî
 = 
NULL
;

89 i‡(
tid
 <= 0)

90  
OSIP_BADPARAMETER
;

92 i‡(
°©us
 < 200 || status > 699)

93  
OSIP_BADPARAMETER
;

95 i‡(
tid
 > 0) {

96 
	`_eXosù_å™ß˘i⁄_föd
(
exc⁄ãxt
, 
tid
, &
å
);

99 i‡(
å
 =
NULL
) {

100 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip]Ço call here\n"));

101  
OSIP_NOTFOUND
;

104 
i
 = -1;

106 i‡(
°©us
 > 199 && status < 300)

107 
i
 = 
	`_eXosù_buûd_ª•⁄£_deÁu…
(
exc⁄ãxt
, 
™swî
, 
NULL
, 
°©us
, 
å
->
‹ig_ªque°
);

109 i‡(
°©us
 > 300 && status <= 699)

110 
i
 = 
	`_eXosù_buûd_ª•⁄£_deÁu…
(
exc⁄ãxt
, 
™swî
, 
NULL
, 
°©us
, 
å
->
‹ig_ªque°
);

112 i‡(
i
 != 0)

113  
i
;

115  
OSIP_SUCCESS
;

116 
	}
}

118 
	$eXosù_›ti⁄s_£nd_™swî
(
eXosù_t
 *
exc⁄ãxt
, 
tid
, 
°©us
, 
osù_mesßge_t
 *
™swî
) {

119 
osù_å™ß˘i⁄_t
 *
å
 = 
NULL
;

120 
osù_evít_t
 *
evt_™swî
;

121 
i
 = -1;

123 i‡(
tid
 <= 0)

124  
OSIP_BADPARAMETER
;

126 i‡(
°©us
 <= 100 || status > 699)

127  
OSIP_BADPARAMETER
;

129 i‡(
™swî
 =
NULL
 && 
°©us
 > 100 && status < 200)

130  
OSIP_BADPARAMETER
;

132 i‡(
tid
 > 0) {

133 
	`_eXosù_å™ß˘i⁄_föd
(
exc⁄ãxt
, 
tid
, &
å
);

136 i‡(
å
 =
NULL
) {

137 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip]Ço OPTIONSÅransaction found\n"));

138 
	`osù_mesßge_‰ì
(
™swî
);

139  
OSIP_NOTFOUND
;

143 i‡(
å
->
°©e
 =
NIST_COMPLETED
 ||År->°©ê=
NIST_TERMINATED
) {

144 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip]Åransactionálreadyánswered\n"));

145 
	`osù_mesßge_‰ì
(
™swî
);

146  
OSIP_WRONG_STATE
;

149 i‡(
™swî
 =
NULL
) {

150 
i
 = -1;

152 i‡(
°©us
 > 199 && status < 300)

153 
i
 = 
	`_eXosù_buûd_ª•⁄£_deÁu…
(
exc⁄ãxt
, &
™swî
, 
NULL
, 
°©us
, 
å
->
‹ig_ªque°
);

155 i‡(
°©us
 > 300 && status <= 699)

156 
i
 = 
	`_eXosù_buûd_ª•⁄£_deÁu…
(
exc⁄ãxt
, &
™swî
, 
NULL
, 
°©us
, 
å
->
‹ig_ªque°
);

158 i‡(
i
 != 0)

159  
i
;

162 
evt_™swî
 = 
	`osù_√w_outgoög_sùmesßge
(
™swî
);

163 
evt_™swî
->
å™ß˘i⁄id
 = 
å
->transactionid;

165 
	`osù_å™ß˘i⁄_add_evít
(
å
, 
evt_™swî
);

166 
	`_eXosù_wakeup
(
exc⁄ãxt
);

167  
OSIP_SUCCESS
;

168 
	}
}

	@/home/unasaw/sip_project/libexosip2-5.3.0/src/eXosip.c

33 
	~"eXosù2.h
"

35 #ifde‡
__APPLE__


36 
	~"T¨gëC⁄dôi⁄Æs.h
"

39 
	~<eXosù2/eXosù.h
>

41 #ifde‡
HAVE_MEMORY_H


42 
	~<mem‹y.h
>

44 #ifde‡
HAVE_UNISTD_H


45 
	~<uni°d.h
>

49 
	#TRANSACTION_TIMEOUT_RETRY
 120

	)

52 
jauthöfo_t
 *
eXosù_föd_authítiˇti⁄_öfo
(
eXosù_t
 *
exc⁄ãxt
, c⁄° *
u£∫ame
, c⁄° *
ªÆm
);

54 
	$_eXosù_wakeup
(
eXosù_t
 *
exc⁄ãxt
) {

55 #i‚de‡
OSIP_MONOTHREAD


56 
	`jpùe_wrôe
(
exc⁄ãxt
->
j_sockë˘l
, "w", 1);

58 
	}
}

60 
	$eXosù_wakeup_evít
(
eXosù_t
 *
exc⁄ãxt
) {

61 #i‚de‡
OSIP_MONOTHREAD


62 
	`jpùe_wrôe
(
exc⁄ãxt
->
j_sockë˘l_evít
, "w", 1);

64 
	}
}

66 
	$eXosù_lock
(
eXosù_t
 *
exc⁄ãxt
) {

67 #i‚de‡
OSIP_MONOTHREAD


68  
	`osù_muãx_lock
((
osù_muãx
 *Ë
exc⁄ãxt
->
j_muãxlock
);

70  
OSIP_WRONG_STATE
;

72 
	}
}

74 
	$eXosù_u∆ock
(
eXosù_t
 *
exc⁄ãxt
) {

75 #i‚de‡
OSIP_MONOTHREAD


76  
	`osù_muãx_u∆ock
((
osù_muãx
 *Ë
exc⁄ãxt
->
j_muãxlock
);

78  
OSIP_WRONG_STATE
;

80 
	}
}

82 
	$_eXosù_å™ß˘i⁄_öô
(
eXosù_t
 *
exc⁄ãxt
, 
osù_å™ß˘i⁄_t
 **
å™ß˘i⁄
, 
osù_fsm_ty≥_t
 
˘x_ty≥
, 
osù_t
 *
osù
, 
osù_mesßge_t
 *
mesßge
) {

83 
i
;

85 
i
 = 
	`osù_å™ß˘i⁄_öô
(
å™ß˘i⁄
, 
˘x_ty≥
, 
osù
, 
mesßge
);

87 i‡(
i
 != 0) {

88  
i
;

91 #i‚de‡
MINISIZE


93 
timevÆ
 
now
;

95 
exc⁄ãxt
->
°©i°ics
.
Æloˇãd_å™ß˘i⁄s
++;

96 
	`osù_gëtimeofday
(&
now
, 
NULL
);

97 
	`_eXosù_cou¡îs_upd©e
(&
exc⁄ãxt
->
avîage_å™ß˘i⁄s
, 1, &
now
);

101 
	`osù_å™ß˘i⁄_£t_ª£rved1
(*
å™ß˘i⁄
, 
exc⁄ãxt
);

103 
osù_«±r_t
 *
«±r_ªc‹d
 = 
NULL
;

105 i‡(
˘x_ty≥
 =
NICT
 || ctx_ty≥ =
ICT
)

106 
i
 = 
	`_eXosù_§v_lookup
(
exc⁄ãxt
, 
mesßge
, &
«±r_ªc‹d
);

108 i‡(
i
 < 0) {

110  
OSIP_SUCCESS
;

113 
	`osù_å™ß˘i⁄_£t_«±r_ªc‹d
(*
å™ß˘i⁄
, 
«±r_ªc‹d
);

115  
OSIP_SUCCESS
;

116 
	}
}

118 
	$_eXosù_å™ß˘i⁄_‰ì
(
eXosù_t
 *
exc⁄ãxt
, 
osù_å™ß˘i⁄_t
 *
å™ß˘i⁄
) {

119 
	`_eXosù_dñëe_ª£rved
(
å™ß˘i⁄
);

120 
	`eXosù_dnsutûs_ªÀa£
(
å™ß˘i⁄
->
«±r_ªc‹d
);

121 
å™ß˘i⁄
->
«±r_ªc‹d
 = 
NULL
;

122 
	`osù_å™ß˘i⁄_‰ì
(
å™ß˘i⁄
);

123 #i‚de‡
MINISIZE


124 
exc⁄ãxt
->
°©i°ics
.
Æloˇãd_å™ß˘i⁄s
--;

126 
	}
}

128 
	$_eXosù_å™ß˘i⁄_föd
(
eXosù_t
 *
exc⁄ãxt
, 
tid
, 
osù_å™ß˘i⁄_t
 **
å™ß˘i⁄
) {

129 
osù_li°_ôî©‹_t
 
ô
;

130 
osù_å™ß˘i⁄_t
 *
å
 = (osù_å™ß˘i⁄_à*Ë
	`osù_li°_gë_fú°
(&
exc⁄ãxt
->
j_å™ß˘i⁄s
, &
ô
);

132 
å
 !
OSIP_SUCCESS
) {

133 i‡(
å
->
å™ß˘i⁄id
 =
tid
) {

134 *
å™ß˘i⁄
 = 
å
;

135  
OSIP_SUCCESS
;

138 
å
 = (
osù_å™ß˘i⁄_t
 *Ë
	`osù_li°_gë_√xt
(&
ô
);

141  
OSIP_NOTFOUND
;

142 
	}
}

144 #i‚de‡
MINISIZE


146 
	$_eXosù_ªåy_wôh_auth
(
eXosù_t
 *
exc⁄ãxt
, 
eXosù_dülog_t
 *
jd
, 
osù_å™ß˘i⁄_t
 **
±r
, *
ªåy
) {

147 
osù_å™ß˘i⁄_t
 *
out_å
 = 
NULL
;

148 
osù_å™ß˘i⁄_t
 *
å
 = 
NULL
;

149 
osù_mesßge_t
 *
msg
 = 
NULL
;

150 
osù_evít_t
 *
sùevít
;

151 *
ª£rved1
;

152 
c£q
;

153 
osù_vü_t
 *
vü
;

154 
i
;

156 i‡(!
±r
)

157  
OSIP_BADPARAMETER
;

159 i‡(
jd
 !
NULL
) {

160 i‡(
jd
->
d_out_ås
 =
NULL
)

161  
OSIP_UNDEFINED_ERROR
;

164 
out_å
 = *
±r
;

166 i‡(
out_å
 =
NULL
 || out_å->
‹ig_ªque°
 =NULL || out_å->
œ°_ª•⁄£
 == NULL)

167  
OSIP_BADPARAMETER
;

169 i‡(
ªåy
 && (*retry >= 3))

170  
OSIP_UNDEFINED_ERROR
;

172 
i
 = 
	`osù_mesßge_˛⁄e
(
out_å
->
‹ig_ªque°
, &
msg
);

174 i‡(
i
 != 0) {

175 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] cannot clone msg foráuthentication\n"));

176  
i
;

179 
vü
 = (
osù_vü_t
 *Ë
	`osù_li°_gë
(&
msg
->
vüs
, 0);

181 i‡(
vü
 =
NULL
 || 
msg
->
c£q
 =NULL || msg->c£q->
numbî
 == NULL) {

182 
	`osù_mesßge_‰ì
(
msg
);

183 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] missing via or cseq header\n"));

184  
OSIP_SYNTAXERROR
;

188 
c£q
 = 
	`©oi
(
msg
->c£q->
numbî
);

189 
	`osù_‰ì
(
msg
->
c£q
->
numbî
);

190 
msg
->
c£q
->
numbî
 = 
	`_eXosù_°rdup_¥ötf
("%i", cseq + 1);

192 i‡(
jd
 !
NULL
 && jd->
d_dülog
 != NULL) {

193 
jd
->
d_dülog
->
loˇl_c£q
++;

196 
i
 = 
	`_eXosù_upd©e_t›_vü
(
msg
);

198 i‡(
i
 != 0) {

199 
	`osù_mesßge_‰ì
(
msg
);

200  
i
;

203 
	`osù_li°_•ecül_‰ì
(&
msg
->
auth‹iz©i⁄s
, ((*)(*)Ë& 
osù_auth‹iz©i⁄_‰ì
);

204 
	`osù_li°_•ecül_‰ì
(&
msg
->
¥oxy_auth‹iz©i⁄s
, ((*)(*)Ë& 
osù_¥oxy_auth‹iz©i⁄_‰ì
);

206 i‡(
out_å
 !
NULL
 && out_å->
œ°_ª•⁄£
 !NULL && (out_å->œ°_ª•⁄£->
°©us_code
 == 401 || out_tr->last_response->status_code == 407)) {

207 
i
 = 
	`_eXosù_add_authítiˇti⁄_öf‹m©i⁄
(
exc⁄ãxt
, 
msg
, 
out_å
->
œ°_ª•⁄£
);

209 i‡(
i
 < 0) {

210 
	`osù_mesßge_‰ì
(
msg
);

211  
i
;

215 
i
 = 
	`_eXosù_add_authítiˇti⁄_öf‹m©i⁄
(
exc⁄ãxt
, 
msg
, 
NULL
);

217 i‡(
i
 < 0) {

218 
	`osù_mesßge_‰ì
(
msg
);

219  
i
;

223 
	`osù_mesßge_f‹˚_upd©e
(
msg
);

225 i‡(
	`MSG_IS_INVITE
(
msg
))

226 
i
 = 
	`_eXosù_å™ß˘i⁄_öô
(
exc⁄ãxt
, &
å
, 
ICT
,Éxc⁄ãxt->
j_osù
, 
msg
);

229 
i
 = 
	`_eXosù_å™ß˘i⁄_öô
(
exc⁄ãxt
, &
å
, 
NICT
,Éxc⁄ãxt->
j_osù
, 
msg
);

231 i‡(
i
 != 0) {

232 
	`osù_mesßge_‰ì
(
msg
);

233  
i
;

237 i‡(
	`MSG_IS_PUBLISH
(
msg
)) {

239 
	`osù_li°_add
(&
exc⁄ãxt
->
j_å™ß˘i⁄s
, 
out_å
, 0);

241 *
±r
 = 
å
;

244 
	`osù_li°_add
(&
exc⁄ãxt
->
j_å™ß˘i⁄s
, 
å
, 0);

246 
sùevít
 = 
	`osù_√w_outgoög_sùmesßge
(
msg
);

248 
ª£rved1
 = 
	`osù_å™ß˘i⁄_gë_ª£rved2
(
out_å
);

249 
	`osù_å™ß˘i⁄_£t_ª£rved2
(
out_å
, 
NULL
);

250 
	`osù_å™ß˘i⁄_£t_ª£rved2
(
å
, 
ª£rved1
);

252 
ª£rved1
 = 
	`osù_å™ß˘i⁄_gë_ª£rved3
(
out_å
);

253 
	`osù_å™ß˘i⁄_£t_ª£rved3
(
out_å
, 
NULL
);

254 
	`osù_å™ß˘i⁄_£t_ª£rved3
(
å
, 
ª£rved1
);

256 
ª£rved1
 = 
	`osù_å™ß˘i⁄_gë_ª£rved4
(
out_å
);

257 
	`osù_å™ß˘i⁄_£t_ª£rved4
(
out_å
, 
NULL
);

258 
	`osù_å™ß˘i⁄_£t_ª£rved4
(
å
, 
ª£rved1
);

260 
ª£rved1
 = 
	`osù_å™ß˘i⁄_gë_ª£rved5
(
out_å
);

261 
	`osù_å™ß˘i⁄_£t_ª£rved5
(
out_å
, 
NULL
);

262 
	`osù_å™ß˘i⁄_£t_ª£rved5
(
å
, 
ª£rved1
);

264 
	`osù_å™ß˘i⁄_add_evít
(
å
, 
sùevít
);

266 i‡(
ªåy
)

267 (*
ªåy
)++;

269 
	`_eXosù_upd©e
(
exc⁄ãxt
);

270 
	`_eXosù_wakeup
(
exc⁄ãxt
);

271  
OSIP_SUCCESS
;

272 
	}
}

274 
	$_eXosù_publish_ª‰esh
(
eXosù_t
 *
exc⁄ãxt
, 
eXosù_dülog_t
 *
jd
, 
osù_å™ß˘i⁄_t
 **
±r
, *
ªåy
) {

275 
osù_å™ß˘i⁄_t
 *
out_å
 = 
NULL
;

276 
osù_å™ß˘i⁄_t
 *
å
 = 
NULL
;

277 
osù_mesßge_t
 *
msg
 = 
NULL
;

278 
osù_evít_t
 *
sùevít
;

280 
c£q
;

281 
osù_vü_t
 *
vü
;

282 
i
;

284 i‡(!
±r
)

285  
OSIP_BADPARAMETER
;

287 i‡(
jd
 !
NULL
) {

288 i‡(
jd
->
d_out_ås
 =
NULL
)

289  
OSIP_BADPARAMETER
;

292 
out_å
 = *
±r
;

294 i‡(
out_å
 =
NULL
 || out_å->
‹ig_ªque°
 =NULL || out_å->
œ°_ª•⁄£
 == NULL)

295  
OSIP_BADPARAMETER
;

297 i‡(
ªåy
 && (*retry >= 3))

298  
OSIP_UNDEFINED_ERROR
;

300 
i
 = 
	`osù_mesßge_˛⁄e
(
out_å
->
‹ig_ªque°
, &
msg
);

302 i‡(
i
 != 0) {

303 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] cannot clone msg foráuthentication\n"));

304  
i
;

307 
vü
 = (
osù_vü_t
 *Ë
	`osù_li°_gë
(&
msg
->
vüs
, 0);

309 i‡(
vü
 =
NULL
 || 
msg
->
c£q
 =NULL || msg->c£q->
numbî
 == NULL) {

310 
	`osù_mesßge_‰ì
(
msg
);

311 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] missing via or cseq header\n"));

312  
OSIP_SYNTAXERROR
;

316 
c£q
 = 
	`©oi
(
msg
->c£q->
numbî
);

317 
	`osù_‰ì
(
msg
->
c£q
->
numbî
);

318 
msg
->
c£q
->
numbî
 = 
	`_eXosù_°rdup_¥ötf
("%i", cseq + 1);

320 i‡(
msg
->
c£q
->
numbî
 =
NULL
) {

321 
	`osù_mesßge_‰ì
(
msg
);

322  
OSIP_NOMEM
;

325 i‡(
jd
 !
NULL
 && jd->
d_dülog
 != NULL) {

326 
jd
->
d_dülog
->
loˇl_c£q
++;

329 
i
 = 
	`_eXosù_upd©e_t›_vü
(
msg
);

331 i‡(
i
 != 0) {

332 
	`osù_mesßge_‰ì
(
msg
);

333  
i
;

336 
	`osù_li°_•ecül_‰ì
(&
msg
->
auth‹iz©i⁄s
, ((*)(*)Ë& 
osù_auth‹iz©i⁄_‰ì
);

337 
	`osù_li°_•ecül_‰ì
(&
msg
->
¥oxy_auth‹iz©i⁄s
, ((*)(*)Ë& 
osù_¥oxy_auth‹iz©i⁄_‰ì
);

339 i‡(
out_å
 !
NULL
 && out_å->
œ°_ª•⁄£
 !NULL && (out_å->œ°_ª•⁄£->
°©us_code
 == 401 || out_tr->last_response->status_code == 407)) {

340 
	`_eXosù_add_authítiˇti⁄_öf‹m©i⁄
(
exc⁄ãxt
, 
msg
, 
out_å
->
œ°_ª•⁄£
);

343 
	`_eXosù_add_authítiˇti⁄_öf‹m©i⁄
(
exc⁄ãxt
, 
msg
, 
NULL
);

345 i‡(
out_å
 !
NULL
 && out_å->
œ°_ª•⁄£
 !NULL && out_å->œ°_ª•⁄£->
°©us_code
 == 412) {

347 
osù_li°_ôî©‹_t
 
ô
;

348 
osù_hódî_t
 *
hód
 = (osù_hódî_à*Ë
	`osù_li°_gë_fú°
(&
msg
->
hódîs
, &
ô
);

350 
hód
 !
OSIP_SUCCESS
) {

351 i‡(
hód
 !
NULL
 && 0 =
	`osù_°rˇ£cmp
(hód->
h«me
, "sip-if-match")) {

352 
	`osù_li°_ôî©‹_ªmove
(&
ô
);

353 
	`osù_hódî_‰ì
(
hód
);

357 
hód
 = (
osù_hódî_t
 *Ë
	`osù_li°_gë_√xt
(&
ô
);

361 i‡(
out_å
 !
NULL
 && out_å->
œ°_ª•⁄£
 !NULL && out_å->œ°_ª•⁄£->
°©us_code
 == 423) {

363 
osù_hódî_t
 *
exp
;

364 
osù_hódî_t
 *
mö_exp
;

366 
	`osù_mesßge_hódî_gë_by«me
(
msg
, "expúes", 0, &
exp
);

367 
	`osù_mesßge_hódî_gë_by«me
(
out_å
->
œ°_ª•⁄£
, "mö-expúes", 0, &
mö_exp
);

369 i‡(
exp
 !
NULL
 &&Éxp->
hvÆue
 !NULL && 
mö_exp
 != NULL && min_exp->hvalue != NULL) {

370 
	`osù_‰ì
(
exp
->
hvÆue
);

371 
exp
->
hvÆue
 = 
	`osù_°rdup
(
mö_exp
->hvalue);

374 
	`osù_mesßge_‰ì
(
msg
);

375 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] missing Min-Expires or Expires in PUBLISH\n"));

376  
OSIP_SYNTAXERROR
;

380 
	`osù_mesßge_f‹˚_upd©e
(
msg
);

382 
i
 = 
	`_eXosù_å™ß˘i⁄_öô
(
exc⁄ãxt
, &
å
, 
NICT
,Éxc⁄ãxt->
j_osù
, 
msg
);

384 i‡(
i
 != 0) {

385 
	`osù_mesßge_‰ì
(
msg
);

386  
i
;

391 
	`osù_li°_add
(&
exc⁄ãxt
->
j_å™ß˘i⁄s
, 
out_å
, 0);

393 *
±r
 = 
å
;

395 
sùevít
 = 
	`osù_√w_outgoög_sùmesßge
(
msg
);

397 
	`osù_å™ß˘i⁄_add_evít
(
å
, 
sùevít
);

399 i‡(
ªåy
)

400 (*
ªåy
)++;

402 
	`_eXosù_upd©e
(
exc⁄ãxt
);

403 
	`_eXosù_wakeup
(
exc⁄ãxt
);

404  
OSIP_SUCCESS
;

405 
	}
}

407 
	$_eXosù_ªåy_ªgi°î_wôh_auth
(
eXosù_t
 *
exc⁄ãxt
, 
eXosù_evít_t
 *
je
) {

408 
eXosù_ªg_t
 *
jr
 = 
NULL
;

409 
i
;

411 
i
 = 
	`_eXosù_ªg_föd_id
(
exc⁄ãxt
, &
jr
, 
je
->
rid
);

413 i‡(
i
 < 0) {

414 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip]ÑegistrationÇot found\n"));

415  
i
;

418 i‡(
jr
->
r_ªåy
 < 3) {

419 
jr
->
r_ªåy
++;

420  
	`eXosù_ªgi°î_£nd_ªgi°î
(
exc⁄ãxt
, 
jr
->
r_id
, 
NULL
);

423  
OSIP_RETRY_LIMIT
;

424 
	}
}

426 
	$_eXosù_ªåy_övôe_wôh_auth
(
eXosù_t
 *
exc⁄ãxt
, 
eXosù_evít_t
 *
je
) {

427 
eXosù_dülog_t
 *
jd
 = 
NULL
;

428 
eXosù_ˇŒ_t
 *
jc
 = 
NULL
;

429 *
ªåy
 = 
NULL
;

430 
osù_å™ß˘i⁄_t
 *
å
 = 
NULL
;

431 
i
;

433 
i
 = 
	`_eXosù_ˇŒ_å™ß˘i⁄_föd
(
exc⁄ãxt
, 
je
->
tid
, &
jc
, &
jd
, &
å
);

435 i‡(
i
 != 0) {

436 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] call dialogÇot found\n"));

437  
i
;

440 i‡(
jd
 && jd->
d_dülog
)

441 
ªåy
 = &
jd
->
d_ªåy
;

444 
ªåy
 = &
jc
->
c_ªåy
;

446 i‡(*
ªåy
 < 3) {

447 (*
ªåy
)++;

448  
	`_eXosù_ˇŒ_ªåy_ªque°
(
exc⁄ãxt
, 
jc
, 
jd
, 
å
);

451  
OSIP_RETRY_LIMIT
;

452 
	}
}

454 
	$_eXosù_ªdúe˘_övôe
(
eXosù_t
 *
exc⁄ãxt
, 
eXosù_evít_t
 *
je
) {

455 
eXosù_dülog_t
 *
jd
 = 
NULL
;

456 
eXosù_ˇŒ_t
 *
jc
 = 
NULL
;

457 
osù_å™ß˘i⁄_t
 *
å
 = 
NULL
;

458 
i
;

460 
i
 = 
	`_eXosù_ˇŒ_å™ß˘i⁄_föd
(
exc⁄ãxt
, 
je
->
tid
, &
jc
, &
jd
, &
å
);

462 i‡(
i
 != 0) {

463 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] call dialogÇot found\n"));

464  
i
;

467  
	`_eXosù_ˇŒ_ªåy_ªque°
(
exc⁄ãxt
, 
jc
, 
jd
, 
å
);

468 
	}
}

470 
	$_eXosù_ªåy_subs¸ibe_wôh_auth
(
eXosù_t
 *
exc⁄ãxt
, 
eXosù_evít_t
 *
je
) {

471 
eXosù_dülog_t
 *
jd
 = 
NULL
;

472 
eXosù_subs¸ibe_t
 *
js
 = 
NULL
;

473 *
ªåy
 = 
NULL
;

474 
osù_å™ß˘i⁄_t
 *
å
 = 
NULL
;

475 
i
;

477 
i
 = 
	`_eXosù_subs¸ùti⁄_å™ß˘i⁄_föd
(
exc⁄ãxt
, 
je
->
tid
, &
js
, &
jd
, &
å
);

479 i‡(
i
 != 0) {

480 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] subscribe dialogÇot found\n"));

481  
i
;

484 i‡(
jd
 && jd->
d_dülog
)

485 
ªåy
 = &
jd
->
d_ªåy
;

488 
ªåy
 = &
js
->
s_ªåy
;

490 i‡(*
ªåy
 < 3) {

491 (*
ªåy
)++;

492  
	`_eXosù_subs¸ùti⁄_£nd_ªque°_wôh_¸edítül
(
exc⁄ãxt
, 
js
, 
jd
, 
å
);

495  
OSIP_RETRY_LIMIT
;

496 
	}
}

498 
	$_eXosù_ªåy_publish_wôh_auth
(
eXosù_t
 *
exc⁄ãxt
, 
eXosù_evít_t
 *
je
) {

499 
eXosù_pub_t
 *
jp
 = 
NULL
;

500 
i
;

502 
i
 = 
	`_eXosù_pub_föd_by_tid
(
exc⁄ãxt
, &
jp
, 
je
->
tid
);

504 i‡(
i
 != 0) {

505 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip]ÖublishÅransactionÇot found\n"));

506  
i
;

509  
	`_eXosù_ªåy_wôh_auth
(
exc⁄ãxt
, 
NULL
, &
jp
->
p_œ°_å
, NULL);

510 
	}
}

512 
	$_eXosù_ªåy_nŸify_wôh_auth
(
eXosù_t
 *
exc⁄ãxt
, 
eXosù_evít_t
 *
je
) {

514 
eXosù_dülog_t
 *
jd
 = 
NULL
;

515 
eXosù_nŸify_t
 *
jn
 = 
NULL
;

516 
osù_å™ß˘i⁄_t
 *
å
 = 
NULL
;

517 
i
;

519 
i
 = 
	`_eXosù_ösubs¸ùti⁄_å™ß˘i⁄_föd
(
exc⁄ãxt
, 
je
->
tid
, &
jn
, &
jd
, &
å
);

521 i‡(
i
 != 0) {

522 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip]Çotify dialogÇot found\n"));

523  
i
;

526  
	`_eXosù_ösubs¸ùti⁄_£nd_ªque°_wôh_¸edítül
(
exc⁄ãxt
, 
jn
, 
jd
, 
å
);

527 
	}
}

529 
	$eXosù_ªåy_wôh_auth
(
eXosù_t
 *
exc⁄ãxt
, 
eXosù_evít_t
 *
je
) {

530 
ªs
 = 
OSIP_UNDEFINED_ERROR
;

532 i‡(!
je
 || !je->
ªque°
 || !je->
ª•⁄£
)

533  
OSIP_BADPARAMETER
;

535 i‡(
je
->
rid
 > 0) {

536  
	`_eXosù_ªåy_ªgi°î_wôh_auth
(
exc⁄ãxt
, 
je
);

538 } i‡(
je
->
cid
 > 0) {

539 
ªs
 = 
	`_eXosù_ªåy_övôe_wôh_auth
(
exc⁄ãxt
, 
je
);

541 i‡(
ªs
 =
OSIP_NOTFOUND
) {

542 
osù_å™ß˘i⁄_t
 *
å
 = 
NULL
;

544 
	`_eXosù_å™ß˘i⁄_föd
(
exc⁄ãxt
, 
je
->
tid
, &
å
);

546 i‡(
å
 !
NULL
) {

547  
	`_eXosù_ªåy_wôh_auth
(
exc⁄ãxt
, 
NULL
, &
å
, NULL);

551  
ªs
;

553 #i‚de‡
MINISIZE


555 i‡(
je
->
sid
 > 0) {

556  
	`_eXosù_ªåy_subs¸ibe_wôh_auth
(
exc⁄ãxt
, 
je
);

558 } i‡(
je
->
nid
 > 0) {

559  
	`_eXosù_ªåy_nŸify_wôh_auth
(
exc⁄ãxt
, 
je
);

561 } i‡(
	`MSG_IS_PUBLISH
(
je
->
ªque°
))

562  
	`_eXosù_ªåy_publish_wôh_auth
(
exc⁄ãxt
, 
je
);

566 
osù_å™ß˘i⁄_t
 *
å
 = 
NULL
;

568 
	`_eXosù_å™ß˘i⁄_föd
(
exc⁄ãxt
, 
je
->
tid
, &
å
);

570 i‡(
å
 !
NULL
) {

571  
	`_eXosù_ªåy_wôh_auth
(
exc⁄ãxt
, 
NULL
, &
å
, NULL);

575 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosù] c™nŸÑëryÉvíà[%d] wôháuth\n", 
je
->
ty≥
));

576  
OSIP_UNDEFINED_ERROR
;

577 
	}
}

579 
	$_eXosù_ªdúe˘
(
eXosù_t
 *
exc⁄ãxt
, 
eXosù_evít_t
 *
je
) {

580 
je
->
ty≥
) {

581 
EXOSIP_CALL_REDIRECTED
:

582  
	`_eXosù_ªdúe˘_övôe
(
exc⁄ãxt
, 
je
);

584 
EXOSIP_CALL_MESSAGE_REDIRECTED
:

585 
EXOSIP_MESSAGE_REDIRECTED
:

586 
EXOSIP_SUBSCRIPTION_REDIRECTED
:

587 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip]Çot implemented\n"));

588  
OSIP_UNDEFINED_ERROR
;

591 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosù] c™nŸÑedúe˘Évíà[%d]\n", 
je
->
ty≥
));

592  
OSIP_UNDEFINED_ERROR
;

594 
	}
}

596 
	$eXosù_deÁu…_a˘i⁄
(
eXosù_t
 *
exc⁄ãxt
, 
eXosù_evít_t
 *
je
) {

597 i‡(!
je
 || !je->
ª•⁄£
)

598  
OSIP_BADPARAMETER
;

600 i‡(
je
->
ª•⁄£
->
°©us_code
 == 401 || je->response->status_code == 407)

601  
	`eXosù_ªåy_wôh_auth
(
exc⁄ãxt
, 
je
);

603 i‡(
je
->
ª•⁄£
->
°©us_code
 >= 300 && je->response->status_code <= 399)

604  
	`_eXosù_ªdúe˘
(
exc⁄ãxt
, 
je
);

608 
	}
}

612 
	$_eXosù_ªå™smô_lo°200ok
(
eXosù_t
 *
exc⁄ãxt
) {

613 
eXosù_ˇŒ_t
 *
jc
;

614 
eXosù_dülog_t
 *
jd
;

615 
time_t
 
now
;

617 
now
 = 
	`osù_gësy°emtime
(
NULL
);

619 
jc
 = 
exc⁄ãxt
->
j_ˇŒs
; j¯!
NULL
; j¯jc->
√xt
) {

620 i‡(
jc
->
c_id
 >1 && jc->
c_dülogs
 !
NULL
) {

621 
jd
 = 
jc
->
c_dülogs
; jd !
NULL
; jd = jd->
√xt
) {

622 i‡(
jd
->
d_id
 >1 && jd->
d_dülog
 !
NULL
 && jd->
d_200Ok
 != NULL) {

623 i‡(
jd
->
d_cou¡
 == 9) {

624 
i
;

626 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip]Ço ACKÑeceived during 20s [dropping call]\n"));

628 
jd
->
d_cou¡
 = 0;

629 
	`osù_mesßge_‰ì
(
jd
->
d_200Ok
);

630 
jd
->
d_200Ok
 = 
NULL
;

631 
i
 = 
	`eXosù_ˇŒ_ãrmö©e
(
exc⁄ãxt
, 
jc
->
c_id
, 
jd
->
d_id
);

633 i‡(
i
 =
OSIP_SUCCESS
) {

634 
	`_eXosù_ªp‹t_ˇŒ_evít
(
exc⁄ãxt
, 
EXOSIP_CALL_CLOSED
, 
jc
, 
jd
, 
NULL
);

637 } i‡(
jd
->
d_timî
 < 
now
) {

639 
jd
->
d_cou¡
++;

641 i‡(
jd
->
d_cou¡
 == 1)

642 
jd
->
d_timî
 = 
	`osù_gësy°emtime
(
NULL
) + 1;

644 i‡(
jd
->
d_cou¡
 == 2)

645 
jd
->
d_timî
 = 
	`osù_gësy°emtime
(
NULL
) + 2;

647 i‡(
jd
->
d_cou¡
 >= 3)

648 
jd
->
d_timî
 = 
	`osù_gësy°emtime
(
NULL
) + 4;

650 
jd
 = 
jc
->
c_dülogs
;

652 
	`_eXosù_¢d_mesßge
(
exc⁄ãxt
, 
NULL
, 
jd
->
d_200Ok
, NULL, 0, -1);

660 
	}
}

662 
	$eXosù_autom©ic_a˘i⁄
(
eXosù_t
 *
exc⁄ãxt
) {

663 
eXosù_ˇŒ_t
 *
jc
;

664 
eXosù_dülog_t
 *
jd
;

666 #i‚de‡
MINISIZE


667 
eXosù_subs¸ibe_t
 *
js
;

668 
eXosù_nŸify_t
 *
jn
;

669 
eXosù_pub_t
 *
jpub
;

672 
eXosù_ªg_t
 *
jr
;

674 
time_t
 
now
;

676 
now
 = 
	`osù_gësy°emtime
(
NULL
);

678 
jc
 = 
exc⁄ãxt
->
j_ˇŒs
; j¯!
NULL
; j¯jc->
√xt
) {

679 i‡(
jc
->
c_id
 < 1) {

680 } i‡(
jc
->
c_dülogs
 =
NULL
 || jc->c_dülogs->
d_dülog
 == NULL) {

683 
osù_å™ß˘i⁄_t
 *
out_å
 = 
NULL
;

685 
out_å
 = 
jc
->
c_out_å
;

687 i‡(
out_å
 !
NULL
 && (out_å->
°©e
 =
ICT_TERMINATED
 || out_å->°©ê=
NICT_TERMINATED
 || out_å->°©ê=
ICT_COMPLETED
 || out_å->°©ê=
NICT_COMPLETED
Ë&& 
now
 - out_å->
búth_time
 < 
TRANSACTION_TIMEOUT_RETRY
 &&

688 
out_å
->
‹ig_ªque°
 !
NULL
 && out_å->
œ°_ª•⁄£
 !NULL && (out_å->œ°_ª•⁄£->
°©us_code
 == 401 || out_tr->last_response->status_code == 407)) {

690 i‡(
jc
->
c_ªåy
 < 3) {

691 
i
;

693 
i
 = 
	`_eXosù_ˇŒ_ªåy_ªque°
(
exc⁄ãxt
, 
jc
, 
NULL
, 
out_å
);

695 i‡(
i
 != 0) {

696 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] cannot clone msg foráuthentication\n"));

699 
jc
->
c_ªåy
++;

702 } i‡(
out_å
 !
NULL
 && (out_å->
°©e
 =
ICT_TERMINATED
 || out_å->°©ê=
NICT_TERMINATED
 || out_å->°©ê=
ICT_COMPLETED
 || out_å->°©ê=
NICT_COMPLETED
Ë&& 
now
 - out_å->
búth_time
 < 
TRANSACTION_TIMEOUT_RETRY
 &&

703 
out_å
->
‹ig_ªque°
 !
NULL
 && out_å->
œ°_ª•⁄£
 !NULL && out_å->œ°_ª•⁄£->
°©us_code
 == 422) {

705 i‡(
jc
->
c_ªåy
 < 3) {

706 
i
;

708 
i
 = 
	`_eXosù_ˇŒ_ªåy_ªque°
(
exc⁄ãxt
, 
jc
, 
NULL
, 
out_å
);

710 i‡(
i
 != 0) {

711 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] cannot clone msg for updating Session-Expires\n"));

714 
jc
->
c_ªåy
++;

717 } i‡(
out_å
 !
NULL
 && (out_å->
°©e
 =
ICT_TERMINATED
 || out_å->°©ê=
NICT_TERMINATED
 || out_å->°©ê=
ICT_COMPLETED
 || out_å->°©ê=
NICT_COMPLETED
Ë&& 
now
 - out_å->
búth_time
 < 
TRANSACTION_TIMEOUT_RETRY
 &&

718 
out_å
->
‹ig_ªque°
 !
NULL
 && out_å->
œ°_ª•⁄£
 !NULL && (out_å->œ°_ª•⁄£->
°©us_code
 >= 300 && out_tr->last_response->status_code <= 399)) {

720 
i
;

722 
i
 = 
	`_eXosù_ˇŒ_ªåy_ªque°
(
exc⁄ãxt
, 
jc
, 
NULL
, 
out_å
);

724 i‡(
i
 != 0) {

725 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] cannot clone msg forÑedirection\n"));

730 
jd
 = 
jc
->
c_dülogs
; jd !
NULL
; jd = jd->
√xt
) {

731 i‡(
jd
->
d_dülog
 =
NULL
)

734 
osù_å™ß˘i⁄_t
 *
out_å
 = 
NULL
;

736 
out_å
 = 
	`osù_li°_gë
(
jd
->
d_out_ås
, 0);

738 i‡(
out_å
 =
NULL
)

739 
out_å
 = 
jc
->
c_out_å
;

741 i‡(
out_å
 !
NULL
 && (out_å->
°©e
 =
ICT_TERMINATED
 || out_å->°©ê=
NICT_TERMINATED
 || out_å->°©ê=
ICT_COMPLETED
 || out_å->°©ê=
NICT_COMPLETED
Ë&& 
now
 - out_å->
búth_time
 < 
TRANSACTION_TIMEOUT_RETRY
 &&

742 
out_å
->
‹ig_ªque°
 !
NULL
 && out_å->
œ°_ª•⁄£
 !NULL && (out_å->œ°_ª•⁄£->
°©us_code
 == 401 || out_tr->last_response->status_code == 407)) {

744 i‡(
jd
->
d_ªåy
 < 3) {

745 
i
;

747 
i
 = 
	`_eXosù_ˇŒ_ªåy_ªque°
(
exc⁄ãxt
, 
jc
, 
jd
, 
out_å
);

749 i‡(
i
 != 0) {

750 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] cannot clone msg foráuthentication\n"));

753 
jd
->
d_ªåy
++;

756 } i‡(
out_å
 !
NULL
 && (out_å->
°©e
 =
ICT_TERMINATED
 || out_å->°©ê=
NICT_TERMINATED
 || out_å->°©ê=
ICT_COMPLETED
 || out_å->°©ê=
NICT_COMPLETED
Ë&& 
now
 - out_å->
búth_time
 < 
TRANSACTION_TIMEOUT_RETRY
 &&

757 
out_å
->
‹ig_ªque°
 !
NULL
 && out_å->
œ°_ª•⁄£
 !NULL && out_å->œ°_ª•⁄£->
°©us_code
 == 422) {

759 i‡(
jd
->
d_ªåy
 < 3) {

760 
i
;

762 
i
 = 
	`_eXosù_ˇŒ_ªåy_ªque°
(
exc⁄ãxt
, 
jc
, 
jd
, 
out_å
);

764 i‡(
i
 != 0) {

765 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] cannot clone msg for updating Session-Expires\n"));

768 
jd
->
d_ªåy
++;

771 } i‡(
out_å
 !
NULL
 && (out_å->
°©e
 =
ICT_TERMINATED
 || out_å->°©ê=
NICT_TERMINATED
 || out_å->°©ê=
ICT_COMPLETED
 || out_å->°©ê=
NICT_COMPLETED
Ë&& 
now
 - out_å->
búth_time
 < 
TRANSACTION_TIMEOUT_RETRY
 &&

772 
out_å
->
‹ig_ªque°
 !
NULL
 && out_å->
œ°_ª•⁄£
 !NULL && (out_å->œ°_ª•⁄£->
°©us_code
 >= 300 && out_tr->last_response->status_code <= 399)) {

774 
i
;

776 
i
 = 
	`_eXosù_ˇŒ_ªåy_ªque°
(
exc⁄ãxt
, 
jc
, 
jd
, 
out_å
);

778 i‡(
i
 != 0) {

779 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] cannot clone msg forÑedirection\n"));

784 i‡(
jd
->
d_ª‰eshî
 == -1) {

785 } i‡(
jd
->
d_ª‰eshî
 == 0) {

787 i‡(
now
 - (
jd
->
d_£ssi⁄_timî_°¨t
 + jd->
d_£ssi⁄_timî_Àngth
) > 0) {

789 } i‡((
jd
->
d_£ssi⁄_timî_°¨t
 + jd->
d_£ssi⁄_timî_Àngth
Ë- 
now
 < (jd->d_session_timer_length / 2)) {

790 
osù_mesßge_t
 *
ªque°
 = 
NULL
;

792 i‡(
jd
->
d_£ssi⁄_timî_u£_upd©e
 == 1) {

793 
	`eXosù_ˇŒ_buûd_ªque°
(
exc⁄ãxt
, 
jd
->
d_id
, "UPDATE", &
ªque°
);

795 i‡(
ªque°
 !
NULL
) {

796 
£ssi⁄_exp
[32];

797 
i
;

799 
	`mem£t
(
£ssi⁄_exp
, 0, (session_exp));

800 
	`¢¥ötf
(
£ssi⁄_exp
, (£ssi⁄_expË- 1, "%i;ª‰eshî=uac", 
jd
->
d_£ssi⁄_timî_Àngth
);

801 
	`osù_mesßge_£t_hódî
(
ªque°
, "Sessi⁄-Expúes", 
£ssi⁄_exp
);

802 
	`osù_mesßge_£t_suµ‹ãd
(
ªque°
, "timer");

803 
i
 = 
	`eXosù_ˇŒ_£nd_ªque°
(
exc⁄ãxt
, 
jd
->
d_id
, 
ªque°
);

805 i‡(
i
 == 0) {

807 
jd
->
d_£ssi⁄_timî_°¨t
 = 
	`osù_gësy°emtime
(
NULL
Ë+ jd->
d_£ssi⁄_timî_Àngth
;

812 
	`eXosù_ˇŒ_buûd_ªque°
(
exc⁄ãxt
, 
jd
->
d_id
, "INVITE", &
ªque°
);

814 i‡(
ªque°
 !
NULL
) {

815 
£ssi⁄_exp
[32];

816 
i
;

818 
	`mem£t
(
£ssi⁄_exp
, 0, (session_exp));

819 
	`¢¥ötf
(
£ssi⁄_exp
, (£ssi⁄_expË- 1, "%i;ª‰eshî=uac", 
jd
->
d_£ssi⁄_timî_Àngth
);

820 
	`osù_mesßge_£t_hódî
(
ªque°
, "Sessi⁄-Expúes", 
£ssi⁄_exp
);

821 
	`osù_mesßge_£t_suµ‹ãd
(
ªque°
, "timer");

822 
i
 = 
	`eXosù_ˇŒ_£nd_ªque°
(
exc⁄ãxt
, 
jd
->
d_id
, 
ªque°
);

824 i‡(
i
 == 0) {

826 
jd
->
d_£ssi⁄_timî_°¨t
 = 
	`osù_gësy°emtime
(
NULL
Ë+ jd->
d_£ssi⁄_timî_Àngth
;

832 } i‡(
jd
->
d_ª‰eshî
 == 1) {

839 
jr
 = 
exc⁄ãxt
->
j_ªg
; j∏!
NULL
; j∏jr->
√xt
) {

840 i‡(
jr
->
r_id
 >1 && jr->
r_œ°_å
 !
NULL
) {

842 i‡(
now
 >
jr
->
r_ªåy_a·î_dñay
)

843 
jr
->
r_ªåy_a·î_dñay
 = 0;

845 i‡(
now
 < 
jr
->
r_ªåy_a·î_dñay
) {

847 } i‡(
jr
->
r_ªg_≥riod
 !0 && 
now
 - jr->
r_œ°_å
->
búth_time
 > 900) {

849 
	`eXosù_ªgi°î_£nd_ªgi°î
(
exc⁄ãxt
, 
jr
->
r_id
, 
NULL
);

851 } i‡(
jr
->
r_ªg_≥riod
 !0 && (
now
 - jr->
r_œ°_å
->
búth_time
 > jr->r_reg_period - (jr->r_reg_period / 10) ||Çow - jr->r_last_tr->birth_time > jr->r_reg_period - 6)) {

853 
	`eXosù_ªgi°î_£nd_ªgi°î
(
exc⁄ãxt
, 
jr
->
r_id
, 
NULL
);

855 } i‡(
jr
->
r_ªg_≥riod
 !0 && 
now
 - jr->
r_œ°_å
->
búth_time
 > 
TRANSACTION_TIMEOUT_RETRY
 && (jr->r_œ°_å->
œ°_ª•⁄£
 =
NULL
 || (!
	`MSG_IS_STATUS_2XX
(jr->r_last_tr->last_response)))) {

857 
	`eXosù_ªgi°î_£nd_ªgi°î
(
exc⁄ãxt
, 
jr
->
r_id
, 
NULL
);

859 } i‡(
now
 - 
jr
->
r_œ°_å
->
búth_time
 < 120 && jr->r_œ°_å->
‹ig_ªque°
 !
NULL
 &&

860 (
jr
->
r_œ°_å
->
œ°_ª•⁄£
 !
NULL
 &&

861 (
jr
->
r_œ°_å
->
œ°_ª•⁄£
->
°©us_code
 == 401 || jr->r_last_tr->last_response->status_code == 407 || jr->r_last_tr->last_response->status_code == 423 || jr->r_last_tr->last_response->status_code == 606))) {

862 i‡(
jr
->
r_ªåy
 < 3) {

865 
	`eXosù_ªgi°î_£nd_ªgi°î
(
exc⁄ãxt
, 
jr
->
r_id
, 
NULL
);

866 
jr
->
r_ªåy
++;

869 } i‡(
jr
->
ªgi°øti⁄_°ï
 =
RS_DELETIONREQUIRED
 && jr->
r_œ°_å
->
‹ig_ªque°
 !
NULL
 && jr->r_œ°_å->
œ°_ª•⁄£
 !NULL && 
	`MSG_IS_STATUS_2XX
(jr->r_last_tr->last_response)) {

870 
jr
->
ªgi°øti⁄_°ï
 = 
RS_DELETIONPROCEEDING
;

872 i‡(
OSIP_SUCCESS
 !
	`eXosù_ªgi°î_£nd_ªgi°î
(
exc⁄ãxt
, 
jr
->
r_id
, 
NULL
)) {

873 
jr
->
ªgi°øti⁄_°ï
 = 
RS_DELETIONREQUIRED
;

876 } i‡(
jr
->
ªgi°øti⁄_°ï
 =
RS_MASQUERADINGREQUIRED
 && jr->
r_œ°_å
->
‹ig_ªque°
 !
NULL
 && jr->r_œ°_å->
œ°_ª•⁄£
 !NULL && 
	`MSG_IS_STATUS_2XX
(jr->r_last_tr->last_response)) {

877 
jr
->
ªgi°øti⁄_°ï
 = 
RS_MASQUERADINGPROCEEDING
;

879 i‡(
OSIP_SUCCESS
 !
	`eXosù_ªgi°î_£nd_ªgi°î
(
exc⁄ãxt
, 
jr
->
r_id
, 
NULL
)) {

880 
jr
->
ªgi°øti⁄_°ï
 = 
RS_MASQUERADINGREQUIRED
;

885 i‡(
jr
->
r_œ°_dñëi⁄
 !0 && jr->r_œ°_dñëi⁄ + 60 < 
now
)

886 
jr
->
r_œ°_dñëi⁄
 = 0;

889 #i‚de‡
MINISIZE


891 
js
 = 
exc⁄ãxt
->
j_subs¸ibes
; j†!
NULL
; j†js->
√xt
) {

892 i‡(
js
->
s_id
 < 1) {

893 } i‡(
js
->
s_dülogs
 =
NULL
) {

894 
osù_å™ß˘i⁄_t
 *
out_å
 = 
NULL
;

896 
out_å
 = 
js
->
s_out_å
;

898 i‡(
out_å
 !
NULL
 && (out_å->
°©e
 =
NICT_TERMINATED
 || out_å->°©ê=
NICT_COMPLETED
Ë&& 
now
 - out_å->
búth_time
 < 
TRANSACTION_TIMEOUT_RETRY
 && out_å->
‹ig_ªque°
 !NULL && out_å->
œ°_ª•⁄£
 != NULL &&

899 (
out_å
->
œ°_ª•⁄£
->
°©us_code
 == 401 || out_tr->last_response->status_code == 407 || out_tr->last_response->status_code == 423)) {

901 i‡(
js
->
s_ªåy
 < 3) {

902 
i
;

904 
i
 = 
	`_eXosù_subs¸ùti⁄_£nd_ªque°_wôh_¸edítül
(
exc⁄ãxt
, 
js
, 
NULL
, 
out_å
);

906 i‡(
i
 != 0) {

907 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] cannot clone msg foráuthentication\n"));

910 
js
->
s_ªåy
++;

915 
jd
 = 
js
->
s_dülogs
; jd !
NULL
; jd = jd->
√xt
) {

916 i‡(
jd
->
d_dülog
 !
NULL
) {

917 i‡(
jd
->
d_id
 >= 1) {

918 
osù_å™ß˘i⁄_t
 *
out_å
 = 
NULL
;

920 
out_å
 = 
	`osù_li°_gë
(
jd
->
d_out_ås
, 0);

922 i‡(
out_å
 =
NULL
)

923 
out_å
 = 
js
->
s_out_å
;

925 i‡(
out_å
 !
NULL
 && (out_å->
°©e
 =
NICT_TERMINATED
 || out_å->°©ê=
NICT_COMPLETED
Ë&& 
now
 - out_å->
búth_time
 < 
TRANSACTION_TIMEOUT_RETRY
 && out_å->
‹ig_ªque°
 !NULL && out_å->
œ°_ª•⁄£
 != NULL &&

926 (
out_å
->
œ°_ª•⁄£
->
°©us_code
 == 401 || out_tr->last_response->status_code == 407)) {

928 i‡(
jd
->
d_ªåy
 < 3) {

929 
i
;

931 
i
 = 
	`_eXosù_subs¸ùti⁄_£nd_ªque°_wôh_¸edítül
(
exc⁄ãxt
, 
js
, 
jd
, 
out_å
);

933 i‡(
i
 != 0) {

934 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] cannot clone suscbribe foráuthentication\n"));

937 
jd
->
d_ªåy
++;

940 } i‡(
js
->
s_ªg_≥riod
 =0 || 
out_å
 =
NULL
) {

941 } i‡((
out_å
->
°©e
 =
NICT_TERMINATED
 || out_å->°©ê=
NICT_COMPLETED
Ë&& out_å->
‹ig_ªque°
 !
NULL
 && out_å->
œ°_ª•⁄£
 !NULL && (out_å->œ°_ª•⁄£->
°©us_code
 >= 300)) {

943 } i‡((
out_å
->
°©e
 =
NICT_TERMINATED
 || out_å->°©ê=
NICT_COMPLETED
Ë&& (
now
 - out_å->
búth_time
 > 
js
->
s_ªg_≥riod
 - (js->s_reg_period / 10) ||Çow - out_tr->birth_time > js->s_reg_period - 6)) {

945 
i
;

947 i‡(
out_å
->
‹ig_ªque°
 !
NULL
 && 
	`MSG_IS_REFER
(out_tr->orig_request)) {

948 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] subscription for REFER isÉxpired\n"));

951 
i
 = 
	`_eXosù_subs¸ùti⁄_autom©ic_ª‰esh
(
exc⁄ãxt
, 
js
, 
jd
, 
out_å
);

953 i‡(
i
 != 0) {

954 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] cannot clone subscribe forÑefresh\n"));

963 
jn
 = 
exc⁄ãxt
->
j_nŸifõs
; j¿!
NULL
; j¿jn->
√xt
) {

964 
jd
 = 
jn
->
n_dülogs
; jd !
NULL
; jd = jd->
√xt
) {

965 i‡(
jd
->
d_dülog
 !
NULL
) {

966 i‡(
jd
->
d_id
 >= 1) {

967 
osù_å™ß˘i⁄_t
 *
out_å
 = 
NULL
;

969 
out_å
 = 
	`osù_li°_gë
(
jd
->
d_out_ås
, 0);

971 i‡(
out_å
 !
NULL
 && (out_å->
°©e
 =
NICT_TERMINATED
 || out_å->°©ê=
NICT_COMPLETED
Ë&& 
now
 - out_å->
búth_time
 < 
TRANSACTION_TIMEOUT_RETRY
 && out_å->
‹ig_ªque°
 !NULL && out_å->
œ°_ª•⁄£
 != NULL &&

972 (
out_å
->
œ°_ª•⁄£
->
°©us_code
 == 401 || out_tr->last_response->status_code == 407)) {

974 i‡(
jd
->
d_ªåy
 < 3) {

975 
i
;

977 
i
 = 
	`_eXosù_ösubs¸ùti⁄_£nd_ªque°_wôh_¸edítül
(
exc⁄ãxt
, 
jn
, 
jd
, 
out_å
);

979 i‡(
i
 != 0) {

980 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] cannot cloneÇotify foráuthentication\n"));

983 
jd
->
d_ªåy
++;

991 
jpub
 = 
exc⁄ãxt
->
j_pub
; jpub !
NULL
; jpub = jpub->
√xt
) {

992 i‡(
jpub
->
p_id
 >1 && jpub->
p_œ°_å
 !
NULL
) {

993 i‡(
jpub
->
p_≥riod
 !0 && 
now
 - jpub->
p_œ°_å
->
búth_time
 > 900) {

995 
	`_eXosù_publish_ª‰esh
(
exc⁄ãxt
, 
NULL
, &
jpub
->
p_œ°_å
, NULL);

997 } i‡(
jpub
->
p_≥riod
 !0 && 
now
 - jpub->
p_œ°_å
->
búth_time
 > jpub->p_period - (jpub->p_period / 10)) {

999 
	`_eXosù_publish_ª‰esh
(
exc⁄ãxt
, 
NULL
, &
jpub
->
p_œ°_å
, NULL);

1001 } i‡(
jpub
->
p_≥riod
 !0 && 
now
 - jpub->
p_œ°_å
->
búth_time
 > 120 && (jpub->p_œ°_å->
œ°_ª•⁄£
 =
NULL
 || (!
	`MSG_IS_STATUS_2XX
(jpub->p_last_tr->last_response)))) {

1003 
	`_eXosù_publish_ª‰esh
(
exc⁄ãxt
, 
NULL
, &
jpub
->
p_œ°_å
, NULL);

1005 } i‡(
now
 - 
jpub
->
p_œ°_å
->
búth_time
 < 120 && jpub->p_œ°_å->
‹ig_ªque°
 !
NULL
 &&

1006 (
jpub
->
p_œ°_å
->
œ°_ª•⁄£
 !
NULL
 && (jpub->p_œ°_å->œ°_ª•⁄£->
°©us_code
 == 401 || jpub->p_last_tr->last_response->status_code == 407))) {

1007 i‡(
jpub
->
p_ªåy
 < 3) {

1010 
	`_eXosù_ªåy_wôh_auth
(
exc⁄ãxt
, 
NULL
, &
jpub
->
p_œ°_å
, NULL);

1011 
jpub
->
p_ªåy
++;

1014 } i‡(
now
 - 
jpub
->
p_œ°_å
->
búth_time
 < 120 && jpub->p_œ°_å->
‹ig_ªque°
 !
NULL
 &&

1015 (
jpub
->
p_œ°_å
->
œ°_ª•⁄£
 !
NULL
 && (jpub->p_œ°_å->œ°_ª•⁄£->
°©us_code
 == 412 || jpub->p_last_tr->last_response->status_code == 423))) {

1016 
	`_eXosù_publish_ª‰esh
(
exc⁄ãxt
, 
NULL
, &
jpub
->
p_œ°_å
, NULL);

1022 
	}
}

1024 
	$_eXosù_upd©e
(
eXosù_t
 *
exc⁄ãxt
) {

1025 
°©ic_id
 = 1;

1026 
eXosù_ˇŒ_t
 *
jc
;

1028 #i‚de‡
MINISIZE


1029 
eXosù_subs¸ibe_t
 *
js
;

1030 
eXosù_nŸify_t
 *
jn
;

1032 
eXosù_dülog_t
 *
jd
;

1034 i‡(
°©ic_id
 =
INT_MAX
)

1035 
°©ic_id
 = 1;

1037 
jc
 = 
exc⁄ãxt
->
j_ˇŒs
; j¯!
NULL
; j¯jc->
√xt
) {

1038 i‡(
jc
->
c_id
 < 1) {

1039 
jc
->
c_id
 = 
°©ic_id
;

1040 
°©ic_id
++;

1043 
jd
 = 
jc
->
c_dülogs
; jd !
NULL
; jd = jd->
√xt
) {

1044 i‡(
jd
->
d_dülog
 !
NULL
) {

1045 i‡(
jd
->
d_id
 < 1) {

1046 
jd
->
d_id
 = 
°©ic_id
;

1047 
°©ic_id
++;

1051 
jd
->
d_id
 = -1;

1055 #i‚de‡
MINISIZE


1057 
js
 = 
exc⁄ãxt
->
j_subs¸ibes
; j†!
NULL
; j†js->
√xt
) {

1058 i‡(
js
->
s_id
 < 1) {

1059 
js
->
s_id
 = 
°©ic_id
;

1060 
°©ic_id
++;

1063 
jd
 = 
js
->
s_dülogs
; jd !
NULL
; jd = jd->
√xt
) {

1064 i‡(
jd
->
d_dülog
 !
NULL
) {

1065 i‡(
jd
->
d_id
 < 1) {

1066 
jd
->
d_id
 = 
°©ic_id
;

1067 
°©ic_id
++;

1071 
jd
->
d_id
 = -1;

1075 
jn
 = 
exc⁄ãxt
->
j_nŸifõs
; j¿!
NULL
; j¿jn->
√xt
) {

1076 i‡(
jn
->
n_id
 < 1) {

1077 
jn
->
n_id
 = 
°©ic_id
;

1078 
°©ic_id
++;

1081 
jd
 = 
jn
->
n_dülogs
; jd !
NULL
; jd = jd->
√xt
) {

1082 i‡(
jd
->
d_dülog
 !
NULL
) {

1083 i‡(
jd
->
d_id
 < 1) {

1084 
jd
->
d_id
 = 
°©ic_id
;

1085 
°©ic_id
++;

1089 
jd
->
d_id
 = -1;

1094 
	}
}

1096 
jauthöfo_t
 *
	$eXosù_föd_authítiˇti⁄_öfo
(
eXosù_t
 *
exc⁄ãxt
, c⁄° *
u£∫ame
, c⁄° *
ªÆm
) {

1097 
jauthöfo_t
 *
ÁŒback
 = 
NULL
;

1098 
jauthöfo_t
 *
authöfo
;

1100 
authöfo
 = 
exc⁄ãxt
->
authöfos
;áuthöfÿ!
NULL
;áuthöfÿauthöfo->
√xt
) {

1101 i‡(
ªÆm
 !
NULL
)

1102 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO3
, 
NULL
, "[eXosù] sórchög f‹ [%s] v†authöfÿ[%s]\n", 
ªÆm
, 
authöfo
->realm));

1104 i‡(0 =
	`osù_°rˇ£cmp
(
authöfo
->
u£∫ame
, username)) {

1105 i‡(
authöfo
->
ªÆm
[0] == '\0') {

1106 
ÁŒback
 = 
authöfo
;

1108 } i‡(
ªÆm
 =
NULL
 || 
	`osù_°rˇ£cmp
‘ólm, 
authöfo
->ªÆmË=0 || 0 =
	`osù_°∫ˇ£cmp
‘ólm + 1,áuthöfo->ªÆm, 
	`°æí
(realm) - 2)) {

1109  
authöfo
;

1116 
authöfo
 = 
exc⁄ãxt
->
authöfos
;áuthöfÿ!
NULL
;áuthöfÿauthöfo->
√xt
) {

1117 i‡(
ªÆm
 !
NULL
)

1118 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO3
, 
NULL
, "[eXosù] sórchög f‹ [%s] v†authöfÿ[%s]\n", 
ªÆm
, 
authöfo
->realm));

1120 i‡(
authöfo
->
ªÆm
[0] ='\0' && 
ÁŒback
 =
NULL
) {

1121 
ÁŒback
 = 
authöfo
;

1123 } i‡(
ªÆm
 =
NULL
 || 
	`osù_°rˇ£cmp
‘ólm, 
authöfo
->ªÆmË=0 || 0 =
	`osù_°∫ˇ£cmp
‘ólm + 1,áuthöfo->ªÆm, 
	`°æí
(realm) - 2)) {

1124  
authöfo
;

1128  
ÁŒback
;

1129 
	}
}

1131 
	$eXosù_˛ór_authítiˇti⁄_öfo
(
eXosù_t
 *
exc⁄ãxt
) {

1132 
jauthöfo_t
 *
jauthöfo
;

1134 
jauthöfo
 = 
exc⁄ãxt
->
authöfos
; jauthöfÿ!
NULL
; jauthinfo =Éxcontext->authinfos) {

1135 
	`REMOVE_ELEMENT
(
exc⁄ãxt
->
authöfos
, 
jauthöfo
);

1136 
	`osù_‰ì
(
jauthöfo
);

1139  
OSIP_SUCCESS
;

1140 
	}
}

1142 
	$eXosù_add_authítiˇti⁄_öfo
(
eXosù_t
 *
exc⁄ãxt
, c⁄° *
u£∫ame
, c⁄° *
u£rid
, c⁄° *
∑sswd
, c⁄° *
ha1
, c⁄° *
ªÆm
) {

1143 
jauthöfo_t
 *
authöfos
;

1145 i‡(
u£∫ame
 =
NULL
 || username[0] == '\0')

1146  
OSIP_BADPARAMETER
;

1148 i‡(
u£rid
 =
NULL
 || userid[0] == '\0')

1149  
OSIP_BADPARAMETER
;

1151 i‡(
∑sswd
 !
NULL
 &&Öasswd[0] != '\0') {

1152 } i‡(
ha1
 !
NULL
 && ha1[0] != '\0') {

1154  
OSIP_BADPARAMETER
;

1156 
authöfos
 = (
jauthöfo_t
 *Ë
	`osù_mÆloc
((jauthinfo_t));

1158 i‡(
authöfos
 =
NULL
)

1159  
OSIP_NOMEM
;

1161 
	`mem£t
(
authöfos
, 0, (
jauthöfo_t
));

1163 
	`eXosù_ªmove_authítiˇti⁄_öfo
(
exc⁄ãxt
, 
u£∫ame
, 
ªÆm
);

1165 
	`¢¥ötf
(
authöfos
->
u£∫ame
, 50, "%s", username);

1166 
	`¢¥ötf
(
authöfos
->
u£rid
, 50, "%s", userid);

1168 i‡(
∑sswd
 !
NULL
 &&Öasswd[0] != '\0')

1169 
	`¢¥ötf
(
authöfos
->
∑sswd
, 50, "%s",Öasswd);

1171 i‡(
ha1
 !
NULL
 && ha1[0] != '\0')

1172 
	`¢¥ötf
(
authöfos
->
ha1
, 50, "%s", ha1);

1174 i‡(
ªÆm
 !
NULL
 &&Ñealm[0] != '\0')

1175 
	`¢¥ötf
(
authöfos
->
ªÆm
, 50, "%s",Ñealm);

1177 
	`ADD_ELEMENT
(
exc⁄ãxt
->
authöfos
,áuthinfos);

1178  
OSIP_SUCCESS
;

1179 
	}
}

1181 
	$eXosù_ªmove_authítiˇti⁄_öfo
(
eXosù_t
 *
exc⁄ãxt
, c⁄° *
u£∫ame
, c⁄° *
ªÆm
) {

1182 
jauthöfo_t
 *
authöfo
;

1184 i‡(
u£∫ame
 =
NULL
 || username[0] == '\0')

1185  
OSIP_BADPARAMETER
;

1187 
authöfo
 = 
exc⁄ãxt
->
authöfos
;áuthöfÿ!
NULL
;áuthöfÿauthöfo->
√xt
) {

1188 i‡(
	`osù_°rˇ£cmp
(
u£∫ame
, 
authöfo
->username) == 0) {

1189 i‡(
ªÆm
 !
NULL
 && 
	`osù_°rˇ£cmp
‘ólm, 
authöfo
->realm) != 0)

1192 i‡(
ªÆm
 =
NULL
 && 
authöfo
->realm[0] != '\0')

1195 
	`REMOVE_ELEMENT
(
exc⁄ãxt
->
authöfos
, 
authöfo
);

1196 
	`osù_‰ì
(
authöfo
);

1197  
OSIP_SUCCESS
;

1201  
OSIP_NOTFOUND
;

1202 
	}
}

1204 
	$auth‹iz©i⁄_Æªady_exi°_f‹_ªÆm
(
osù_mesßge_t
 *
ªq
, c⁄° *
ªÆm
) {

1205 
osù_auth‹iz©i⁄_t
 *
aut
 = 
NULL
;

1206 
pos
 = 0;

1207 
	`osù_mesßge_gë_auth‹iz©i⁄
(
ªq
, 
pos
, &
aut
);

1209 
aut
 !
NULL
) {

1210 i‡(
aut
->
ªÆm
 !
NULL
 &&Ñólm !NULL && 
	`osù_°rˇ£cmp
(realm,áut->realm) == 0) {

1212  
OSIP_SUCCESS
;

1215 
pos
++;

1216 
	`osù_mesßge_gë_auth‹iz©i⁄
(
ªq
, 
pos
, &
aut
);

1219  
OSIP_NOTFOUND
;

1220 
	}
}

1222 
	$¥oxyauth‹iz©i⁄_Æªady_exi°_f‹_ªÆm
(
osù_mesßge_t
 *
ªq
, c⁄° *
ªÆm
) {

1223 
osù_¥oxy_auth‹iz©i⁄_t
 *
aut
 = 
NULL
;

1224 
pos
 = 0;

1225 
	`osù_mesßge_gë_¥oxy_auth‹iz©i⁄
(
ªq
, 
pos
, &
aut
);

1227 
aut
 !
NULL
) {

1228 i‡(
aut
->
ªÆm
 !
NULL
 &&Ñólm !NULL && 
	`osù_°rˇ£cmp
(realm,áut->realm) == 0) {

1230  
OSIP_SUCCESS
;

1233 
pos
++;

1234 
	`osù_mesßge_gë_¥oxy_auth‹iz©i⁄
(
ªq
, 
pos
, &
aut
);

1237  
OSIP_NOTFOUND
;

1238 
	}
}

1240 
	$_eXosù_add_authítiˇti⁄_öf‹m©i⁄
(
eXosù_t
 *
exc⁄ãxt
, 
osù_mesßge_t
 *
ªq
, osù_mesßge_à*
œ°_ª•⁄£
) {

1241 
osù_auth‹iz©i⁄_t
 *
aut
 = 
NULL
;

1242 
osù_www_authítiˇã_t
 *
wwwauth
 = 
NULL
;

1243 
osù_¥oxy_auth‹iz©i⁄_t
 *
¥oxy_aut
 = 
NULL
;

1244 
osù_¥oxy_authítiˇã_t
 *
¥oxyauth
 = 
NULL
;

1245 
jauthöfo_t
 *
authöfo
 = 
NULL
;

1246 
pos
;

1247 
i
;

1248 
vÆ_˙⁄˚
 = 
	`osù_buûd_øndom_numbî
();

1250 i‡(
ªq
 =
NULL
 ||Ñeq->
‰om
 =NULL ||Ñeq->‰om->
uæ
 =NULL ||Ñeq->‰om->uæ->
u£∫ame
 == NULL) {

1251 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosip]áuthinfo: Invalid message\n"));

1252  
OSIP_BADPARAMETER
;

1255 i‡(
œ°_ª•⁄£
 =
NULL
) {

1257 
eXosù_hâp_auth
 *
hâp_auth
;

1260 
pos
 = 0;Öo†< 
MAX_EXOSIP_HTTP_AUTH
;Öos++) {

1261 
hâp_auth
 = &
exc⁄ãxt
->
hâp_auths
[
pos
];

1263 i‡(
hâp_auth
->
pszCÆlId
[0] == '\0')

1266 i‡(
	`osù_°rˇ£cmp
(
hâp_auth
->
pszCÆlId
, 
ªq
->
ˇŒ_id
->
numbî
) == 0) {

1267 *
uri
;

1269 
authöfo
 = 
	`eXosù_föd_authítiˇti⁄_öfo
(
exc⁄ãxt
, 
ªq
->
‰om
->
uæ
->
u£∫ame
, 
hâp_auth
->
wa
->
ªÆm
);

1271 i‡(
authöfo
 =
NULL
) {

1272 i‡(
hâp_auth
->
wa
->
ªÆm
 !
NULL
)

1273 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosù]áuthöfo: Nÿauthítiˇti⁄ found f‹ %†%s\n", 
ªq
->
‰om
->
uæ
->
u£∫ame
, 
hâp_auth
->
wa
->
ªÆm
));

1275  
OSIP_NOTFOUND
;

1278 
i
 = 
	`osù_uri_to_°r
(
ªq
->
ªq_uri
, &
uri
);

1280 i‡(
i
 != 0)

1281  
i
;

1283 
hâp_auth
->
iN⁄˚Cou¡
++;

1284 
	`¢¥ötf
(
hâp_auth
->
pszCN⁄˚
, (hâp_auth->pszCN⁄˚), "%x", 
vÆ_˙⁄˚
);

1285 
i
 = 
	`_eXosù_¸óã_¥oxy_auth‹iz©i⁄_hódî
(
hâp_auth
->
wa
, 
uri
, 
authöfo
->
u£rid
,áuthöfo->
∑sswd
,áuthöfo->
ha1
, &
aut
, 
ªq
->
sù_mëhod
, hâp_auth->
pszCN⁄˚
, hâp_auth->
iN⁄˚Cou¡
);

1287 
	`osù_‰ì
(
uri
);

1289 i‡(
i
 != 0)

1290  
i
;

1292 i‡(
aut
 !
NULL
) {

1293 i‡(
hâp_auth
->
™swî_code
 == 401)

1294 
	`osù_li°_add
(&
ªq
->
auth‹iz©i⁄s
, 
aut
, -1);

1297 
	`osù_li°_add
(&
ªq
->
¥oxy_auth‹iz©i⁄s
, 
aut
, -1);

1299 
	`osù_mesßge_f‹˚_upd©e
(
ªq
);

1304  
OSIP_SUCCESS
;

1307 
pos
 = 0;

1308 
	`osù_mesßge_gë_www_authítiˇã
(
œ°_ª•⁄£
, 
pos
, &
wwwauth
);

1309 
	`osù_mesßge_gë_¥oxy_authítiˇã
(
œ°_ª•⁄£
, 
pos
, &
¥oxyauth
);

1311 i‡(
wwwauth
 =
NULL
 && 
¥oxyauth
 == NULL) {

1312 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosip]áuthinfo: No WWW-Authenticate or Proxy-Authenticate\n"));

1313  
OSIP_SYNTAXERROR
;

1316 
wwwauth
 !
NULL
) {

1317 *
uri
;

1318 
_˙⁄˚
[64];

1320 
authöfo
 = 
	`eXosù_föd_authítiˇti⁄_öfo
(
exc⁄ãxt
, 
ªq
->
‰om
->
uæ
->
u£∫ame
, 
wwwauth
->
ªÆm
);

1322 i‡(
authöfo
 =
NULL
) {

1323 i‡(
wwwauth
->
ªÆm
 !
NULL
)

1324 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosù]áuthöfo: Nÿauthítiˇti⁄ found f‹ %†%s\n", 
ªq
->
‰om
->
uæ
->
u£∫ame
, 
wwwauth
->
ªÆm
));

1326 
pos
++;

1327 
	`osù_mesßge_gë_www_authítiˇã
(
œ°_ª•⁄£
, 
pos
, &
wwwauth
);

1332 i‡(
wwwauth
->
ªÆm
 !
NULL
 && 
	`auth‹iz©i⁄_Æªady_exi°_f‹_ªÆm
(
ªq
, wwwauth->realm) == 0) {

1333 
pos
++;

1334 
	`osù_mesßge_gë_www_authítiˇã
(
œ°_ª•⁄£
, 
pos
, &
wwwauth
);

1338 
i
 = 
	`osù_uri_to_°r
(
ªq
->
ªq_uri
, &
uri
);

1340 i‡(
i
 != 0)

1341  
i
;

1343 
	`¢¥ötf
(
_˙⁄˚
, (_˙⁄˚), "%x", 
vÆ_˙⁄˚
);

1344 
i
 = 
	`_eXosù_¸óã_¥oxy_auth‹iz©i⁄_hódî
(
wwwauth
, 
uri
, 
authöfo
->
u£rid
,áuthöfo->
∑sswd
,áuthöfo->
ha1
, &
aut
, 
ªq
->
sù_mëhod
, 
_˙⁄˚
, 1);

1345 
	`osù_‰ì
(
uri
);

1347 i‡(
i
 != 0) {

1348 
pos
++;

1349 
	`osù_mesßge_gë_www_authítiˇã
(
œ°_ª•⁄£
, 
pos
, &
wwwauth
);

1353 i‡(
aut
 !
NULL
) {

1354 
	`osù_li°_add
(&
ªq
->
auth‹iz©i⁄s
, 
aut
, -1);

1355 
	`osù_mesßge_f‹˚_upd©e
(
ªq
);

1358 #i‡
	`deföed
(
AVOID_REFRESH_WITHOUT_CREDENTIAL
)

1360 i‡(
wwwauth
->
q›_›ti⁄s
 !
NULL
) {

1363 i‡(
	`osù_°rˇ£cmp
(
ªq
->
sù_mëhod
, "REGISTER") == 0 || osip_strcasecmp(req->sip_method, "INVITE") == 0 || osip_strcasecmp(req->sip_method, "SUBSCRIBE") == 0 || osip_strcasecmp(req->sip_method, "REFER") == 0)

1364 
	`_eXosù_°‹e_n⁄˚
(
exc⁄ãxt
, 
ªq
->
ˇŒ_id
->
numbî
, 
wwwauth
, 401);

1367 
osù_gíîic_∑øm_t
 *
to_èg
 = 
NULL
;

1369 
	`osù_‰om_∑øm_gë_by«me
(
ªq
->
to
, "èg", &
to_èg
);

1371 i‡(
to_èg
 !
NULL
) {

1373 
	`_eXosù_°‹e_n⁄˚
(
exc⁄ãxt
, 
ªq
->
ˇŒ_id
->
numbî
, 
wwwauth
, 401);

1377 #i‡
	`deföed
(
AVOID_REFRESH_WITHOUT_CREDENTIAL
)

1382 
pos
++;

1383 
	`osù_mesßge_gë_www_authítiˇã
(
œ°_ª•⁄£
, 
pos
, &
wwwauth
);

1386 
pos
 = 0;

1388 
¥oxyauth
 !
NULL
) {

1389 *
uri
;

1390 
_˙⁄˚
[64];

1392 
authöfo
 = 
	`eXosù_föd_authítiˇti⁄_öfo
(
exc⁄ãxt
, 
ªq
->
‰om
->
uæ
->
u£∫ame
, 
¥oxyauth
->
ªÆm
);

1394 i‡(
authöfo
 =
NULL
) {

1395 i‡(
¥oxyauth
->
ªÆm
 !
NULL
)

1396 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosù]áuthöfo: Nÿauthítiˇti⁄ found f‹ %†%s\n", 
ªq
->
‰om
->
uæ
->
u£∫ame
, 
¥oxyauth
->
ªÆm
));

1398 
pos
++;

1399 
	`osù_mesßge_gë_www_authítiˇã
(
œ°_ª•⁄£
, 
pos
, &
¥oxyauth
);

1404 i‡(
¥oxyauth
->
ªÆm
 !
NULL
 && 
	`¥oxyauth‹iz©i⁄_Æªady_exi°_f‹_ªÆm
(
ªq
,Öroxyauth->realm) == 0) {

1405 
pos
++;

1406 
	`osù_mesßge_gë_¥oxy_authítiˇã
(
œ°_ª•⁄£
, 
pos
, &
¥oxyauth
);

1410 
i
 = 
	`osù_uri_to_°r
(
ªq
->
ªq_uri
, &
uri
);

1412 i‡(
i
 != 0)

1413  
i
;

1415 
	`¢¥ötf
(
_˙⁄˚
, (_˙⁄˚), "%x", 
vÆ_˙⁄˚
);

1416 
i
 = 
	`_eXosù_¸óã_¥oxy_auth‹iz©i⁄_hódî
(
¥oxyauth
, 
uri
, 
authöfo
->
u£rid
,áuthöfo->
∑sswd
,áuthöfo->
ha1
, &
¥oxy_aut
, 
ªq
->
sù_mëhod
, 
_˙⁄˚
, 1);

1417 
	`osù_‰ì
(
uri
);

1419 i‡(
i
 != 0) {

1420 
pos
++;

1421 
	`osù_mesßge_gë_¥oxy_authítiˇã
(
œ°_ª•⁄£
, 
pos
, &
¥oxyauth
);

1425 i‡(
¥oxy_aut
 !
NULL
) {

1426 
	`osù_li°_add
(&
ªq
->
¥oxy_auth‹iz©i⁄s
, 
¥oxy_aut
, -1);

1427 
	`osù_mesßge_f‹˚_upd©e
(
ªq
);

1430 #i‡
	`deföed
(
AVOID_REFRESH_WITHOUT_CREDENTIAL
)

1432 i‡(
¥oxyauth
->
q›_›ti⁄s
 !
NULL
) {

1435 i‡(
	`osù_°rˇ£cmp
(
ªq
->
sù_mëhod
, "REGISTER") == 0 || osip_strcasecmp(req->sip_method, "INVITE") == 0 || osip_strcasecmp(req->sip_method, "SUBSCRIBE") == 0 || osip_strcasecmp(req->sip_method, "REFER") == 0)

1436 
	`_eXosù_°‹e_n⁄˚
(
exc⁄ãxt
, 
ªq
->
ˇŒ_id
->
numbî
, 
¥oxyauth
, 407);

1439 
osù_gíîic_∑øm_t
 *
to_èg
 = 
NULL
;

1441 
	`osù_‰om_∑øm_gë_by«me
(
ªq
->
to
, "èg", &
to_èg
);

1443 i‡(
to_èg
 !
NULL
) {

1445 
	`_eXosù_°‹e_n⁄˚
(
exc⁄ãxt
, 
ªq
->
ˇŒ_id
->
numbî
, 
¥oxyauth
, 407);

1449 #i‡
	`deföed
(
AVOID_REFRESH_WITHOUT_CREDENTIAL
)

1454 
pos
++;

1455 
	`osù_mesßge_gë_¥oxy_authítiˇã
(
œ°_ª•⁄£
, 
pos
, &
¥oxyauth
);

1458  
OSIP_SUCCESS
;

1459 
	}
}

1461 
	$_eXosù_upd©e_t›_vü
(
osù_mesßge_t
 *
sù
) {

1462 
numbî
;

1463 
tmp
[40];

1464 
osù_gíîic_∑øm_t
 *
br
 = 
NULL
;

1465 
osù_vü_t
 *
vü
 = (osù_vü_à*Ë
	`osù_li°_gë
(&
sù
->
vüs
, 0);

1467 i‡(
vü
 =
NULL
) {

1468 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] missing via in SIP message\n"));

1469  
OSIP_SYNTAXERROR
;

1472 
	`osù_‰ì
(
vü
->
ho°
);

1474 
vü
->
ho°
 = 
	`osù_°rdup
("999.999.999.999");

1476 i‡(
vü
->
ho°
 =
NULL
)

1477  
OSIP_NOMEM
;

1480 
	`osù_vü_∑øm_gë_by«me
(
vü
, "bønch", &
br
);

1482 i‡(
br
 =
NULL
 || br->
gvÆue
 == NULL) {

1483 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] missing branchÖarameter via in SIP message\n"));

1484  
OSIP_SYNTAXERROR
;

1487 
	`osù_‰ì
(
br
->
gvÆue
);

1488 
numbî
 = 
	`osù_buûd_øndom_numbî
();

1490 
	`¢¥ötf
(
tmp
, 40, "z9hG4bK%u", 
numbî
);

1491 
br
->
gvÆue
 = 
	`osù_°rdup
(
tmp
);

1492  
OSIP_SUCCESS
;

1493 
	}
}

1496 
	$_eXosù_m¨k_Æl_ªgi°øti⁄s_expúed
(
eXosù_t
 *
exc⁄ãxt
) {

1497 
eXosù_ªg_t
 *
jr
;

1498 
wakeup
 = 0;

1500 
jr
 = 
exc⁄ãxt
->
j_ªg
; j∏!
NULL
; j∏jr->
√xt
) {

1501 i‡(
jr
->
r_id
 >1 && jr->
r_œ°_å
 !
NULL
) {

1502 
jr
->
r_œ°_å
->
búth_time
 -jr->
r_ªg_≥riod
;

1503 
wakeup
 = 1;

1507 i‡(
wakeup
) {

1508 
	`_eXosù_wakeup
(
exc⁄ãxt
);

1510 
	}
}

1512 
	$_eXosù_m¨k_Æl_å™ß˘i⁄_å™•‹t_îr‹
(
eXosù_t
 *
exc⁄ãxt
, 
sockë
) {

1513 
osù_li°_ôî©‹_t
 
ô
;

1514 
osù_å™ß˘i⁄_t
 *
å™ß˘i⁄
;

1516 i‡(
exc⁄ãxt
->
j_°›_ua
 == 1)

1519 
å™ß˘i⁄
 = (
osù_å™ß˘i⁄_t
 *Ë
	`osù_li°_gë_fú°
(&
exc⁄ãxt
->
j_osù
->
osù_i˘_å™ß˘i⁄s
, &
ô
);

1521 
å™ß˘i⁄
 !
OSIP_SUCCESS
) {

1522 i‡(
å™ß˘i⁄
->
°©e
 =
ICT_CALLING
 &&Åønß˘i⁄->
out_sockë
 =
sockë
) {

1524 
å™ß˘i⁄
->
out_sockë
 = -999;

1525 
	`osù_gëtimeofday
(&
å™ß˘i⁄
->
i˘_c⁄ãxt
->
timî_b_°¨t
, 
NULL
);

1526 
	`add_gëtimeofday
(&
å™ß˘i⁄
->
i˘_c⁄ãxt
->
timî_b_°¨t
, 0);

1528 
å™ß˘i⁄
 = (
osù_å™ß˘i⁄_t
 *Ë
	`osù_li°_gë_√xt
(&
ô
);

1531 
å™ß˘i⁄
 = (
osù_å™ß˘i⁄_t
 *Ë
	`osù_li°_gë_fú°
(&
exc⁄ãxt
->
j_osù
->
osù_ni˘_å™ß˘i⁄s
, &
ô
);

1533 
å™ß˘i⁄
 !
OSIP_SUCCESS
) {

1534 i‡((
å™ß˘i⁄
->
°©e
 =
NICT_TRYING
 ||Åønß˘i⁄->°©ê=
NICT_PROCEEDING
Ë&&Åønß˘i⁄->
out_sockë
 =
sockë
) {

1536 
å™ß˘i⁄
->
out_sockë
 = -999;

1537 
	`osù_gëtimeofday
(&
å™ß˘i⁄
->
ni˘_c⁄ãxt
->
timî_f_°¨t
, 
NULL
);

1538 
	`add_gëtimeofday
(&
å™ß˘i⁄
->
ni˘_c⁄ãxt
->
timî_f_°¨t
, 0);

1540 
å™ß˘i⁄
 = (
osù_å™ß˘i⁄_t
 *Ë
	`osù_li°_gë_√xt
(&
ô
);

1542 
	}
}

1544 
	$_eXosù_m¨k_Æl_å™ß˘i⁄_f‹˚_£nd
(
eXosù_t
 *
exc⁄ãxt
, 
sockë
) {

1545 
osù_li°_ôî©‹_t
 
ô
;

1546 
osù_å™ß˘i⁄_t
 *
å™ß˘i⁄
;

1548 
å™ß˘i⁄
 = (
osù_å™ß˘i⁄_t
 *Ë
	`osù_li°_gë_fú°
(&
exc⁄ãxt
->
j_osù
->
osù_i˘_å™ß˘i⁄s
, &
ô
);

1550 
å™ß˘i⁄
 !
OSIP_SUCCESS
) {

1551 i‡(
å™ß˘i⁄
->
°©e
 =
ICT_CALLING
 &&Åønß˘i⁄->
out_sockë
 =
sockë
) {

1552 i‡(
å™ß˘i⁄
->
i˘_c⁄ãxt
->
timî_a_Àngth
 > 0) {

1553 
	`osù_gëtimeofday
(&
å™ß˘i⁄
->
i˘_c⁄ãxt
->
timî_a_°¨t
, 
NULL
);

1554 
	`add_gëtimeofday
(&
å™ß˘i⁄
->
i˘_c⁄ãxt
->
timî_a_°¨t
, 0);

1557 
å™ß˘i⁄
 = (
osù_å™ß˘i⁄_t
 *Ë
	`osù_li°_gë_√xt
(&
ô
);

1560 
å™ß˘i⁄
 = (
osù_å™ß˘i⁄_t
 *Ë
	`osù_li°_gë_fú°
(&
exc⁄ãxt
->
j_osù
->
osù_ni˘_å™ß˘i⁄s
, &
ô
);

1562 
å™ß˘i⁄
 !
OSIP_SUCCESS
) {

1563 i‡(
å™ß˘i⁄
->
°©e
 =
NICT_TRYING
 &&Åønß˘i⁄->
out_sockë
 =
sockë
) {

1564 i‡(
å™ß˘i⁄
->
ni˘_c⁄ãxt
->
timî_e_Àngth
 > 0) {

1565 
	`osù_gëtimeofday
(&
å™ß˘i⁄
->
ni˘_c⁄ãxt
->
timî_e_°¨t
, 
NULL
);

1566 
	`add_gëtimeofday
(&
å™ß˘i⁄
->
ni˘_c⁄ãxt
->
timî_e_°¨t
, 0);

1569 
å™ß˘i⁄
 = (
osù_å™ß˘i⁄_t
 *Ë
	`osù_li°_gë_√xt
(&
ô
);

1571 
	}
}

1573 
	$_eXosù_m¨k_ªgi°øti⁄_expúed
(
eXosù_t
 *
exc⁄ãxt
, c⁄° *
ˇŒ_id
) {

1574 
eXosù_ªg_t
 *
jr
;

1575 
wakeup
 = 0;

1577 
jr
 = 
exc⁄ãxt
->
j_ªg
; j∏!
NULL
; j∏jr->
√xt
) {

1578 i‡(
jr
->
r_id
 < 1 || jr->
r_œ°_å
 =
NULL
)

1581 i‡(
jr
->
r_œ°_å
->
‹ig_ªque°
 =
NULL
 || jr->r_œ°_å->‹ig_ªque°->
ˇŒ_id
 =NULL || jr->r_œ°_å->‹ig_ªque°->ˇŒ_id->
numbî
 == NULL)

1584 i‡(
	`osù_°rˇ£cmp
(
jr
->
r_œ°_å
->
‹ig_ªque°
->
ˇŒ_id
->
numbî
, call_id) == 0) {

1585 
time_t
 
now
;

1587 i‡(
jr
->
r_ªg_≥riod
 <= 0)

1590 
now
 = 
	`osù_gësy°emtime
(
NULL
);

1592 i‡(
jr
->
r_œ°_å
->
œ°_ª•⁄£
 =
NULL
 || (!
	`MSG_IS_STATUS_2XX
(jr->r_last_tr->last_response))) {

1594 i‡(
jr
->
r_œ°_å
->
œ°_ª•⁄£
 !
NULL
) {

1595 
osù_hódî_t
 *
ªåy_a·î_hódî
 = 
NULL
;

1596 
	`osù_mesßge_hódî_gë_by«me
(
jr
->
r_œ°_å
->
œ°_ª•⁄£
, (c⁄° *Ë"ªåy-a·î", 0, &
ªåy_a·î_hódî
);

1597 i‡(
ªåy_a·î_hódî
 !
NULL
 &&Ñëry_a·î_hódî->
hvÆue
 != NULL) {

1598 
jr
->
r_ªåy_a·î_dñay
 = 
	`osù_©oi
(
ªåy_a·î_hódî
->
hvÆue
);

1599 i‡(
jr
->
r_ªåy_a·î_dñay
 < 0)

1600 
jr
->
r_ªåy_a·î_dñay
 = 0;

1601 i‡(
jr
->
r_ªåy_a·î_dñay
 > 0)

1602 
jr
->
r_ªåy_a·î_dñay
 +
now
;

1606 
jr
->
r_œ°_å
->
búth_time
 = 
now
 - 120;

1608 } i‡(
jr
->
r_ªg_≥riod
 > 900) {

1609 
jr
->
r_œ°_å
->
búth_time
 = 
now
 - 900;

1612 
jr
->
r_œ°_å
->
búth_time
 = 
now
 - jr->
r_ªg_≥riod
 + (jr->r_reg_period / 10);

1615 i‡(
jr
->
r_ªåyÁûovî
 < 60)

1616 
jr
->
r_ªåyÁûovî
++;

1618 
jr
->
r_œ°_å
->
búth_time
 +jr->
r_ªåyÁûovî
;

1619 
wakeup
 = 1;

1623 i‡(
wakeup
) {

1624 
	`_eXosù_wakeup
(
exc⁄ãxt
);

1626 
	}
}

1628 
	$_eXosù_m¨k_Æl_å™ß˘i⁄_ªady
(
eXosù_t
 *
exc⁄ãxt
, 
fd_£t
 *
osù_fd£t
, fd_£à*
osù_wr£t
, fd_£à*
osù_ex˚±£t
, *
osù_fd_èbÀ
) {

1629 
osù_li°_ôî©‹_t
 
ô
;

1630 
osù_å™ß˘i⁄_t
 *
å™ß˘i⁄
;

1632 
å™ß˘i⁄
 = (
osù_å™ß˘i⁄_t
 *Ë
	`osù_li°_gë_fú°
(&
exc⁄ãxt
->
j_osù
->
osù_i˘_å™ß˘i⁄s
, &
ô
);

1634 
å™ß˘i⁄
 !
OSIP_SUCCESS
) {

1635 i‡(
å™ß˘i⁄
->
°©e
 =
ICT_CALLING
 &&Åønß˘i⁄->
out_sockë
 > 0) {

1636 i‡(
	`FD_ISSET
(
å™ß˘i⁄
->
out_sockë
, 
osù_fd£t
Ë|| FD_ISSET—ønß˘i⁄->out_sockë, 
osù_wr£t
Ë|| FD_ISSET—ønß˘i⁄->out_sockë, 
osù_ex˚±£t
)) {

1638 i‡(
	`FD_ISSET
(
å™ß˘i⁄
->
out_sockë
, 
osù_fd£t
)) {

1639 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO3
, 
NULL
, "[eXosip] [socketÉvent] [ICT]Ñead descriptor is set\n"));

1641 i‡(
	`FD_ISSET
(
å™ß˘i⁄
->
out_sockë
, 
osù_wr£t
)) {

1642 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO3
, 
NULL
, "[eXosip] [socketÉvent] [ICT] write descriptor is set\n"));

1644 i‡(
	`FD_ISSET
(
å™ß˘i⁄
->
out_sockë
, 
osù_ex˚±£t
)) {

1645 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO3
, 
NULL
, "[eXosip] [socketÉvent] [ICT]Éxcept descriptor is set\n"));

1648 i‡(
å™ß˘i⁄
->
i˘_c⁄ãxt
->
timî_a_Àngth
 > 0) {

1649 
	`_eXosù_wakeup
(
exc⁄ãxt
);

1655 
å™ß˘i⁄
 = (
osù_å™ß˘i⁄_t
 *Ë
	`osù_li°_gë_√xt
(&
ô
);

1658 
å™ß˘i⁄
 = (
osù_å™ß˘i⁄_t
 *Ë
	`osù_li°_gë_fú°
(&
exc⁄ãxt
->
j_osù
->
osù_ni˘_å™ß˘i⁄s
, &
ô
);

1660 
å™ß˘i⁄
 !
OSIP_SUCCESS
) {

1661 i‡(
å™ß˘i⁄
->
°©e
 =
NICT_TRYING
 &&Åønß˘i⁄->
out_sockë
 > 0) {

1662 i‡(
	`FD_ISSET
(
å™ß˘i⁄
->
out_sockë
, 
osù_fd£t
Ë|| FD_ISSET—ønß˘i⁄->out_sockë, 
osù_wr£t
Ë|| FD_ISSET—ønß˘i⁄->out_sockë, 
osù_ex˚±£t
)) {

1664 i‡(
	`FD_ISSET
(
å™ß˘i⁄
->
out_sockë
, 
osù_fd£t
)) {

1665 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO3
, 
NULL
, "[eXosip] [socketÉvent] [NICT]Ñead descriptor is set\n"));

1667 i‡(
	`FD_ISSET
(
å™ß˘i⁄
->
out_sockë
, 
osù_wr£t
)) {

1668 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO3
, 
NULL
, "[eXosip] [socketÉvent] [NICT] write descriptor is set\n"));

1670 i‡(
	`FD_ISSET
(
å™ß˘i⁄
->
out_sockë
, 
osù_ex˚±£t
)) {

1671 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO3
, 
NULL
, "[eXosip] [socketÉvent] [NICT]Éxcept descriptor is set\n"));

1674 i‡(
å™ß˘i⁄
->
ni˘_c⁄ãxt
->
timî_e_Àngth
 > 0) {

1675 
	`_eXosù_wakeup
(
exc⁄ãxt
);

1681 
å™ß˘i⁄
 = (
osù_å™ß˘i⁄_t
 *Ë
	`osù_li°_gë_√xt
(&
ô
);

1684  
OSIP_UNDEFINED_ERROR
;

1685 
	}
}

1687 #ifde‡
HAVE_SYS_EPOLL_H


1689 
	$_eXosù_m¨k_Æl_å™ß˘i⁄_ªady_ïﬁl
(
eXosù_t
 *
exc⁄ãxt
, 
nfds
, *
osù_fd_èbÀ
) {

1690 
osù_li°_ôî©‹_t
 
ô
;

1691 
osù_å™ß˘i⁄_t
 *
å™ß˘i⁄
;

1693 
å™ß˘i⁄
 = (
osù_å™ß˘i⁄_t
 *Ë
	`osù_li°_gë_fú°
(&
exc⁄ãxt
->
j_osù
->
osù_i˘_å™ß˘i⁄s
, &
ô
);

1695 
å™ß˘i⁄
 !
OSIP_SUCCESS
) {

1696 i‡(
å™ß˘i⁄
->
°©e
 =
ICT_CALLING
 &&Åønß˘i⁄->
out_sockë
 > 0) {

1697 
n
;

1698 
n
 = 0;Ç < 
nfds
; ++n) {

1699 i‡(
exc⁄ãxt
->
ï_¨øy
[
n
].
d©a
.
fd
 =
å™ß˘i⁄
->
out_sockë
) {

1700 i‡((
exc⁄ãxt
->
ï_¨øy
[
n
].
evíts
 & 
EPOLLIN
Ë||Éxc⁄ãxt->ï_¨øy[n].evít†& 
EPOLLOUT
) {

1701 i‡(
exc⁄ãxt
->
ï_¨øy
[
n
].
evíts
 & 
EPOLLIN
) {

1702 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO3
, 
NULL
, "[eXosip] [socketÉvent] [ICT]Ñead descriptor is set\n"));

1704 i‡(
exc⁄ãxt
->
ï_¨øy
[
n
].
evíts
 & 
EPOLLOUT
) {

1705 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO3
, 
NULL
, "[eXosip] [socketÉvent] [ICT] write descriptor is set\n"));

1709 i‡(
å™ß˘i⁄
->
i˘_c⁄ãxt
->
timî_a_Àngth
 > 0) {

1710 
	`_eXosù_wakeup
(
exc⁄ãxt
);

1717 
å™ß˘i⁄
 = (
osù_å™ß˘i⁄_t
 *Ë
	`osù_li°_gë_√xt
(&
ô
);

1720 
å™ß˘i⁄
 = (
osù_å™ß˘i⁄_t
 *Ë
	`osù_li°_gë_fú°
(&
exc⁄ãxt
->
j_osù
->
osù_ni˘_å™ß˘i⁄s
, &
ô
);

1722 
å™ß˘i⁄
 !
OSIP_SUCCESS
) {

1723 i‡(
å™ß˘i⁄
->
°©e
 =
NICT_TRYING
 &&Åønß˘i⁄->
out_sockë
 > 0) {

1724 
n
;

1725 
n
 = 0;Ç < 
nfds
; ++n) {

1726 i‡(
exc⁄ãxt
->
ï_¨øy
[
n
].
d©a
.
fd
 =
å™ß˘i⁄
->
out_sockë
) {

1727 i‡((
exc⁄ãxt
->
ï_¨øy
[
n
].
evíts
 & 
EPOLLIN
Ë||Éxc⁄ãxt->ï_¨øy[n].evít†& 
EPOLLOUT
) {

1728 i‡(
exc⁄ãxt
->
ï_¨øy
[
n
].
evíts
 & 
EPOLLIN
) {

1729 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO3
, 
NULL
, "[eXosip] [socketÉvent] [NICT]Ñead descriptor is set\n"));

1731 i‡(
exc⁄ãxt
->
ï_¨øy
[
n
].
evíts
 & 
EPOLLOUT
) {

1732 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO3
, 
NULL
, "[eXosip] [socketÉvent] [NICT] write descriptor is set\n"));

1736 i‡(
å™ß˘i⁄
->
ni˘_c⁄ãxt
->
timî_e_Àngth
 > 0) {

1737 
	`_eXosù_wakeup
(
exc⁄ãxt
);

1744 
å™ß˘i⁄
 = (
osù_å™ß˘i⁄_t
 *Ë
	`osù_li°_gë_√xt
(&
ô
);

1746  
OSIP_UNDEFINED_ERROR
;

1747 
	}
}

1750 
	$_eXosù_check_Ælow_hódî
(
eXosù_dülog_t
 *
jd
, 
osù_mesßge_t
 *
mesßge
) {

1751 #i‚de‡
MINISIZE


1752 
osù_li°_ôî©‹_t
 
ô
;

1753 
osù_Ælow_t
 *
de°
 = (osù_Ælow_à*Ë
	`osù_li°_gë_fú°
(&
mesßge
->
Ælows
, &
ô
);

1755 
de°
 !
NULL
) {

1756 i‡(
de°
->
vÆue
 !
NULL
 && 
	`osù_°rˇ£cmp
(dest->value, "update") == 0) {

1757 
jd
->
d_£ssi⁄_timî_u£_upd©e
 = 1;

1758 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosip] Allow header contains UPDATE\n"));

1762 
de°
 = (
osù_Ælow_t
 *Ë
	`osù_li°_gë_√xt
(&
ô
);

1766 
osù_li°_ôî©‹_t
 
ô
;

1767 
osù_hódî_t
 *
de°
 = (osù_hódî_à*Ë
	`osù_li°_gë_fú°
(&
mesßge
->
hódîs
, &
ô
);

1769 
de°
 !
OSIP_SUCCESS
) {

1770 i‡(
de°
->
hvÆue
 !
NULL
 && 
	`osù_°rˇ£cmp
(de°->
h«me
, "allow") == 0) {

1771 i‡(
	`osù_°rˇ£°r
(
de°
->
hvÆue
, "UPDATE"Ë!
NULL
) {

1772 
jd
->
d_£ssi⁄_timî_u£_upd©e
 = 1;

1773 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosip] Allow header contains UPDATE\n"));

1778 
de°
 = (
osù_hódî_t
 *Ë
	`osù_li°_gë_√xt
(&
ô
);

1783 
	}
}

	@/home/unasaw/sip_project/libexosip2-5.3.0/src/eXosip2.h

33 #i‚de‡
__EXOSIP2_H__


34 
	#__EXOSIP2_H__


	)

36 #i‡
deföed
(
HAVE_CONFIG_H
)

37 
	~<exosù-c⁄fig.h
>

40 
	#HAVE_INET_NTOP


	)

42 #i‡
deföed
(
__PALMOS__
) && (__PALMOS__ >= 0x06000000)

43 
	#HAVE_CTYPE_H
 1

	)

44 
	#HAVE_STRING_H
 1

	)

45 
	#HAVE_SYS_TYPES_H
 1

	)

46 
	#HAVE_TIME_H
 1

	)

47 
	#HAVE_STDARG_H
 1

	)

48 
	#HAVE_MEMORY_H
 1

	)

49 
	#HAVE_GMTIME
 1

	)

51 #ñi‡
deföed
(
__VXWORKS_OS__
Ë|| deföed(
__πems__
)

52 
	#HAVE_STRING_H
 1

	)

53 
	#HAVE_TIME_H
 1

	)

54 
	#HAVE_SYS_TIME_H
 1

	)

55 
	#HAVE_SYS_TYPES_H
 1

	)

56 
	#HAVE_STDARG_H
 1

	)

57 
	#HAVE_MEMORY_H
 1

	)

58 
	#HAVE_GMTIME
 1

	)

60 #ñi‡
deföed
(
_WIN32_WCE
)

62 
	#HAVE_WINDOWS_H
 1

	)

63 
	#HAVE_WINSOCK2_H
 1

	)

64 
	#HAVE_WS2TCPIP_H
 1

	)

65 
	#HAVE_CTYPE_H
 1

	)

66 
	#HAVE_STRING_H
 1

	)

67 
	#HAVE_TIME_H
 1

	)

68 
	#HAVE_STDARG_H
 1

	)

70 
	#¢¥ötf
 
_¢¥ötf


	)

72 #unde‡
HAVE_INET_NTOP


74 #ñi‡
deföed
(
WIN32
)

76 
	#HAVE_WINDOWS_H
 1

	)

77 
	#HAVE_WINSOCK2_H
 1

	)

78 
	#HAVE_WS2TCPIP_H
 1

	)

79 
	#HAVE_CTYPE_H
 1

	)

80 
	#HAVE_STRING_H
 1

	)

81 
	#HAVE_SYS_TYPES_H
 1

	)

82 
	#HAVE_TIME_H
 1

	)

83 
	#HAVE_STDARG_H
 1

	)

84 
	#HAVE_SYS_STAT_H


	)

86 #i‡(
_MSC_VER
 < 1900)

87 
	#¢¥ötf
 
_¢¥ötf


	)

92 #i‡
_MSC_VER
 >= 1300

93 
	#WIN32_USE_CRYPTO
 1

	)

96 #i‡
deföed
(
_MSC_VER
)

97 
	#HAVE_MSTCPIP_H


	)

98 #i‡
deföed
(
WINAPI_FAMILY
Ë&& (WINAPI_FAMILY =
WINAPI_FAMILY_PHONE_APP
)

99 #unde‡
HAVE_MSTCPIP_H


103 
	#HAVE_WINCRYPT_H


	)

104 #i‡
deföed
(
WINAPI_FAMILY
Ë&& (WINAPI_FAMILY =
WINAPI_FAMILY_PHONE_APP
)

105 #unde‡
HAVE_WINCRYPT_H


108 #i‡(
_WIN32_WINNT
 >= 0x0600)

109 
	#ENABLE_SIP_QOS


	)

110 #i‡(
_MSC_VER
 >1700Ë&& !
deföed
(
_USING_V110_SDK71_
)

111 #i‡
deföed
(
WINAPI_FAMILY
Ë&& (WINAPI_FAMILY =
WINAPI_FAMILY_PHONE_APP
)

112 #unde‡
ENABLE_SIP_QOS


117 
	#HAVE_WINDNS_H


	)

118 #i‡
deföed
(
WINAPI_FAMILY
Ë&& (WINAPI_FAMILY =
WINAPI_FAMILY_PHONE_APP
)

119 #unde‡
HAVE_WINDNS_H


122 
	#HAVE_IPHLPAPI_H


	)

123 #i‡
deföed
(
WINAPI_FAMILY
Ë&& (WINAPI_FAMILY =
WINAPI_FAMILY_PHONE_APP
)

124 #unde‡
HAVE_IPHLPAPI_H


127 
	#HAVE_GMTIME
 1

	)

128 #unde‡
HAVE_INET_NTOP


132 #i‡
deföed
(
__¨c__
)

133 
	#HAVE_SYS_SOCKET_H


	)

134 
	#HAVE_NETINET_IN_H


	)

135 
	#HAVE_ARPA_INET_H


	)

138 #i‡
deföed
(
HAVE_STRING_H
)

139 
	~<°rög.h
>

140 #ñi‡
deföed
(
HAVE_STRINGS_H
)

141 
	~<°rögs.h
>

143 
	~<°rög.h
>

146 
	~<°dio.h
>

147 
	~<°dlib.h
>

148 #i‡
deföed
(
HAVE_LIMITS_H
)

149 
	~<limôs.h
>

152 #i‡
deföed
(
HAVE_SYS_TYPES_H
)

153 
	~<sys/ty≥s.h
>

156 #ifde‡
HAVE_TIME_H


157 
	~<time.h
>

160 #i‡
deföed
(
HAVE_SYS_TIME_H
)

161 
	~<sys/time.h
>

164 #i‡
deföed
(
__¨c__
)

165 
	~<posix_time_pub.h
>

167 
	~"ö˛udes_≠i.h
"

168 
	~"os_cfg_pub.h
"

169 
	#USE_GETHOSTBYNAME


	)

172 #ifde‡
__PSOS__


173 
	#VA_START
(
a
, 
f
Ë
	`va_°¨t
◊, f)

	)

174 
	~"≤a.h
"

175 
	~"°dlib.h
"

176 
	~"time.h
"

177 
	#timîcmp
(
tvp
, 
uvp
, 
cmp
Ë(—vp)->
tv_£c
 
	`cmp
(uvp)->tv_£¯|| (tvp)->tv_£¯=(uvp)->tv_£¯&& (tvp)->
tv_u£c
 cmp(uvp)->tv_u£c)

	)

178 
	#¢¥ötf
 
osù_¢¥ötf


	)

179 #i‚de‡
INT_MAX


180 
	#INT_MAX
 0x7FFFFFFF

	)

184 #ifde‡
HAVE_WINSOCK2_H


185 
	~<wösock2.h
>

188 #ifde‡
HAVE_WS2TCPIP_H


189 
	~<ws2t˝ù.h
>

192 #ifde‡
HAVE_SYS_SOCKET_H


193 
	~<sys/sockë.h
>

195 #ifde‡
HAVE_NETINET_IN_H


196 
	~<√töë/ö.h
>

198 #ifde‡
HAVE_ARPA_INET_H


199 
	~<¨∑/öë.h
>

201 #ifde‡
HAVE_NETDB_H


202 
	~<√tdb.h
>

204 #ifde‡
HAVE_SYS_EPOLL_H


205 
	~<sys/ïﬁl.h
>

208 
	~<eXosù2/eXosù.h
>

209 
	~<osù2/osù.h
>

210 
	~<osù2/osù_dülog.h
>

212 
	~"eXå™•‹t.h
"

213 
	~"jpùe.h
"

215 
	#EXOSIP_VERSION
 "5.3.0"

	)

217 #ifde‡
HAVE_WINSOCK2_H


218 
	#SOCKET_TYPE
 
SOCKET


	)

220 
	#SOCKET_TYPE
 

	)

223 #i‡(
deföed
(
__STDC__
Ë&& __STDC__ && 
__STDC_VERSION__
 >= 199901L)

224 
	~<°döt.h
>

225 #ñi‡
deföed
(
HAVE_STDINT_H
)

226 
	~<°döt.h
>

227 #ñi‡
deföed
(
_WIN32
Ë&& deföed(
_MSC_VER
) && (_MSC_VER < 1600)

228 
	t__öt8
 
	tuöt8_t
;

229 
	t__öt32
 
	tuöt32_t
;

230 
	t__öt64
 
	tuöt64_t
;

232 
	~<°döt.h
>

235 #ifde‡
__˝lu•lus


240 
	#ERRBSIZ
 64

	)

241 *
_ex_°ªº‹
(
î∫um
, *
buf
, 
size_t
 
buÊí
);

242 *
_ex_gai_°ªº‹
(
î∫um
, *
buf
, 
size_t
 
buÊí
);

244 #i‡
deföed
(
USE_GETHOSTBYNAME
)

246 
	#NI_MAXHOST
 1025

	)

247 
	#NI_MAXSERV
 32

	)

248 
	#NI_NUMERICHOST
 1

	)

250 #i‚de‡
PF_INET6


251 
	#PF_INET6
 
AF_INET6


	)

254 
	#_SS_MAXSIZE
 128

	)

255 
	#_SS_ALIGNSIZE
 ((
öt64_t
))

	)

256 
	#_SS_PAD1SIZE
 (
_SS_ALIGNSIZE
 - ())

	)

257 
	#_SS_PAD2SIZE
 (
_SS_MAXSIZE
 - ((Ë+ 
_SS_PAD1SIZE
 + 
_SS_ALIGNSIZE
))

	)

258 
	ssockaddr_°‹age
 {

259 
ss_Ámûy
;

260 
_ss_∑d1
[
_SS_PAD1SIZE
];

261 
öt64_t
 
_ss_Æign
;

262 
_ss_∑d2
[
_SS_PAD2SIZE
];

265 
	saddröfo
 {

266 
ai_Êags
;

267 
ai_Ámûy
;

268 
ai_sockty≥
;

269 
ai_¥Ÿocﬁ
;

270 
sockÀn_t
 
ai_addæí
;

271 
sockaddr
 *
ai_addr
;

272 *
ai_ˇn⁄«me
;

273 
addröfo
 *
ai_√xt
;

276 
_eXosù_‰ìaddröfo
(
addröfo
 *
ai
);

280 
	#_eXosù_‰ìaddröfo
 
‰ìaddröfo


	)

284 
_eXosù_upd©e
(
eXosù_t
 *
exc⁄ãxt
);

285 
_eXosù_wakeup
(
eXosù_t
 *
exc⁄ãxt
);

287 #i‚de‡
DEFINE_SOCKADDR_STORAGE


288 
	#__eXosù_sockaddr
 
sockaddr_°‹age


	)

290 
	#_SS_MAXSIZE
 128

	)

291 
	#_SS_ALIGNSIZE
 ((
öt64_t
))

	)

292 
	#_SS_PAD1SIZE
 (
_SS_ALIGNSIZE
 - ())

	)

293 
	#_SS_PAD2SIZE
 (
_SS_MAXSIZE
 - ((Ë+ 
_SS_PAD1SIZE
 + 
_SS_ALIGNSIZE
))

	)

294 
	ssockaddr_°‹age
 {

295 
ss_Ámûy
;

296 
_ss_∑d1
[
_SS_PAD1SIZE
];

297 
öt64_t
 
_ss_Æign
;

298 
_ss_∑d2
[
_SS_PAD2SIZE
];

302 
eXosù_dülog_t
 
	teXosù_dülog_t
;

304 
	seXosù_dülog_t
 {

305 
d_id
;

306 
osù_dülog_t
 *
d_dülog
;

308 
time_t
 
d_£ssi⁄_timî_°¨t
;

309 
d_£ssi⁄_timî_Àngth
;

310 
d_ª‰eshî
;

311 
d_£ssi⁄_timî_u£_upd©e
;

313 
time_t
 
d_timî
;

314 
d_cou¡
;

315 
osù_mesßge_t
 *
d_200Ok
;

316 
osù_mesßge_t
 *
d_ack
;

318 
osù_li°_t
 *
d_öc_ås
;

319 
osù_li°_t
 *
d_out_ås
;

320 
d_ªåy
;

321 
d_möc£q
;

323 
time_t
 
im∂icô_subs¸ùti⁄_expúe_time
;

325 
eXosù_dülog_t
 *
√xt
;

326 
eXosù_dülog_t
 *
∑ª¡
;

329 
eXosù_ˇŒ_t
 
	teXosù_ˇŒ_t
;

331 
	seXosù_ˇŒ_t
 {

332 
c_id
;

333 
eXosù_dülog_t
 *
c_dülogs
;

334 
osù_å™ß˘i⁄_t
 *
c_öc_å
;

335 
osù_å™ß˘i⁄_t
 *
c_out_å
;

336 
osù_å™ß˘i⁄_t
 *
c_ˇn˚l_å
;

337 
c_ªåy
;

338 *
exã∫Æ_ª„ªn˚
;

340 
time_t
 
expúe_time
;

342 
eXosù_ˇŒ_t
 *
√xt
;

343 
eXosù_ˇŒ_t
 *
∑ª¡
;

346 
	sosù_°un
 {

347 
uöt16_t
 
ty≥
;

348 
uöt16_t
 
Àngth
;

349 
uöt32_t
 
magic_cookõ
;

350 
å_id
[12];

353 
eXosù_ªg_t
 
	teXosù_ªg_t
;

355 
	seXosù_ªg_t
 {

356 
r_id
;

358 
r_ªg_≥riod
;

359 
r_ªg_expúe
;

361 *
r_a‹
;

362 *
r_ªgi°ør
;

363 *
r_c⁄è˘
;

365 
r_löe
[16];

366 
r_qvÆue
[16];

368 
osù_å™ß˘i⁄_t
 *
r_œ°_å
;

369 
r_ªåy
;

370 
r_ªåyÁûovî
;

371 
time_t
 
r_ªåy_a·î_dñay
;

372 
	#RS_DELETIONREQUIRED
 2

	)

373 
	#RS_DELETIONPROCEEDING
 3

	)

374 
	#RS_MASQUERADINGREQUIRED
 4

	)

375 
	#RS_MASQUERADINGPROCEEDING
 5

	)

376 
ªgi°øti⁄_°ï
;

377 
time_t
 
r_œ°_dñëi⁄
;

380 
__eXosù_sockaddr
 
°un_addr
;

381 
sockÀn_t
 
°un_Àn
;

382 
osù_°un
 
°un_bödög
;

383 
°un_ùbuf
[
INET6_ADDRSTRLEN
];

384 
uöt16_t
 
°un_≈‹t
;

385 
time_t
 
pög_rfc5626
;

386 
p⁄g_suµ‹ãd
;

388 
eXosù_ªg_t
 *
√xt
;

389 
eXosù_ªg_t
 *
∑ª¡
;

392 #i‚de‡
MINISIZE


394 
eXosù_subs¸ibe_t
 
	teXosù_subs¸ibe_t
;

396 
	seXosù_subs¸ibe_t
 {

397 
s_id
;

398 
s_ss_°©us
;

399 
s_ss_ªas⁄
;

400 
s_ªg_≥riod
;

401 
eXosù_dülog_t
 *
s_dülogs
;

403 
s_ªåy
;

404 
osù_å™ß˘i⁄_t
 *
s_öc_å
;

405 
osù_å™ß˘i⁄_t
 *
s_out_å
;

407 
eXosù_subs¸ibe_t
 *
√xt
;

408 
eXosù_subs¸ibe_t
 *
∑ª¡
;

411 
eXosù_nŸify_t
 
	teXosù_nŸify_t
;

413 
	seXosù_nŸify_t
 {

414 
n_id
;

415 
n_⁄löe_°©us
;

417 
n_ss_°©us
;

418 
n_ss_ªas⁄
;

419 
time_t
 
n_ss_expúes
;

420 
eXosù_dülog_t
 *
n_dülogs
;

422 
osù_å™ß˘i⁄_t
 *
n_öc_å
;

423 
osù_å™ß˘i⁄_t
 *
n_out_å
;

425 
eXosù_nŸify_t
 *
√xt
;

426 
eXosù_nŸify_t
 *
∑ª¡
;

429 
eXosù_pub_t
 
	teXosù_pub_t
;

431 
	seXosù_pub_t
 {

432 
p_id
;

434 
p_≥riod
;

435 
p_a‹
[256];

436 
p_sù_ëag
[64];

438 
osù_å™ß˘i⁄_t
 *
p_œ°_å
;

439 
p_ªåy
;

440 
eXosù_pub_t
 *
√xt
;

441 
eXosù_pub_t
 *
∑ª¡
;

444 
_eXosù_pub_upd©e
(
eXosù_t
 *
exc⁄ãxt
, 
eXosù_pub_t
 **
pub
, 
osù_å™ß˘i⁄_t
 *
å
, 
osù_mesßge_t
 *
™swî
);

445 
_eXosù_pub_föd_by_a‹
(
eXosù_t
 *
exc⁄ãxt
, 
eXosù_pub_t
 **
pub
, c⁄° *
a‹
);

446 
_eXosù_pub_föd_by_tid
(
eXosù_t
 *
exc⁄ãxt
, 
eXosù_pub_t
 **
pjp
, 
tid
);

447 
_eXosù_pub_öô
(
eXosù_t
 *
exc⁄ãxt
, 
eXosù_pub_t
 **
pub
, c⁄° *
a‹
, c⁄° *
exp
);

448 
_eXosù_pub_‰ì
(
eXosù_t
 *
exc⁄ãxt
, 
eXosù_pub_t
 *
pub
);

452 
jauthöfo_t
 
	tjauthöfo_t
;

454 
	sjauthöfo_t
 {

455 
u£∫ame
[50];

456 
u£rid
[50];

457 
∑sswd
[50];

458 
ha1
[50];

459 
ªÆm
[50];

460 
jauthöfo_t
 *
∑ª¡
;

461 
jauthöfo_t
 *
√xt
;

464 
_eXosù_¸óã_¥oxy_auth‹iz©i⁄_hódî
(
osù_¥oxy_authítiˇã_t
 *
wa
, c⁄° *
rquri
, c⁄° *
u£∫ame
, c⁄° *
∑sswd
, c⁄° *
ha1
, 
osù_¥oxy_auth‹iz©i⁄_t
 **
auth
, c⁄° *
mëhod
, c⁄° *
pszCN⁄˚
, 
iN⁄˚Cou¡
);

465 
_eXosù_°‹e_n⁄˚
(
eXosù_t
 *
exc⁄ãxt
, c⁄° *
ˇŒ_id
, 
osù_¥oxy_authítiˇã_t
 *
wa
, 
™swî_code
);

466 
_eXosù_dñëe_n⁄˚
(
eXosù_t
 *
exc⁄ãxt
, c⁄° *
ˇŒ_id
);

468 
eXosù_evít_t
 *
_eXosù_evít_öô_f‹_ˇŒ
(
ty≥
, 
eXosù_ˇŒ_t
 *
jc
, 
eXosù_dülog_t
 *
jd
, 
osù_å™ß˘i⁄_t
 *
å
);

470 #i‚de‡
MINISIZE


471 
eXosù_evít_t
 *
_eXosù_evít_öô_f‹_subs¸ùti⁄
(
ty≥
, 
eXosù_subs¸ibe_t
 *
js
, 
eXosù_dülog_t
 *
jd
, 
osù_å™ß˘i⁄_t
 *
å
);

472 
eXosù_evít_t
 *
_eXosù_evít_öô_f‹_nŸify
(
ty≥
, 
eXosù_nŸify_t
 *
jn
, 
eXosù_dülog_t
 *
jd
, 
osù_å™ß˘i⁄_t
 *
å
);

475 
eXosù_evít_t
 *
_eXosù_evít_öô_f‹_ªg
(
ty≥
, 
eXosù_ªg_t
 *
jr
, 
osù_å™ß˘i⁄_t
 *
å
);

476 
eXosù_evít_t
 *
_eXosù_evít_öô_f‹_mesßge
(
ty≥
, 
osù_å™ß˘i⁄_t
 *
å
);

478 
_eXosù_evít_öô
(
eXosù_evít_t
 **
je
, 
ty≥
);

479 
_eXosù_ªp‹t_ˇŒ_evít
(
eXosù_t
 *
exc⁄ãxt
, 
evt
, 
eXosù_ˇŒ_t
 *
jc
, 
eXosù_dülog_t
 *
jd
, 
osù_å™ß˘i⁄_t
 *
å
);

480 
_eXosù_ªp‹t_evít
(
eXosù_t
 *
exc⁄ãxt
, 
eXosù_evít_t
 *
je
);

481 
_eXosù_evít_add
(
eXosù_t
 *
exc⁄ãxt
, 
eXosù_evít_t
 *
je
);

483 (*
eXosù_ˇŒback_t
)(
	tty≥
, 
	teXosù_evít_t
 *);

485 *
_eXosù_°rdup_¥ötf
(c⁄° *
fmt
, ...);

487 *
_eXosù_å™•‹t_¥Ÿocﬁ
(
osù_mesßge_t
 *
msg
);

488 
_eXosù_föd_¥Ÿocﬁ
(
osù_mesßge_t
 *
msg
);

489 
£tsock›t_ùv6⁄ly
(
sock
);

491 #i‚de‡
MAX_EXOSIP_DNS_ENTRY


492 
	#MAX_EXOSIP_DNS_ENTRY
 10

	)

495 #i‚de‡
MAX_EXOSIP_ACCOUNT_INFO


496 
	#MAX_EXOSIP_ACCOUNT_INFO
 10

	)

499 #i‚de‡
MAX_EXOSIP_HTTP_AUTH


500 
	#MAX_EXOSIP_HTTP_AUTH
 100

	)

503 #i‚de‡
EXOSIP_RING_TIMEOUT


504 
	#EXOSIP_RING_TIMEOUT
 180

	)

507 
	seXosù_cou¡îs
 {

508 
cuºít_avîage
;

509 
num_íåõs
;

510 
≥riod
;

511 
öãrvÆ
;

512 *
vÆues
;

513 
timevÆ
 *
times
;

514 
ödex_œ°
;

515 
tŸÆ_vÆues
;

518 
eXosù_t
 
	teXosù_t
;

520 
	seXosù_t
 {

521 #i‚de‡
MINISIZE


522 
eXosù_°©s
 
°©i°ics
;

523 
eXosù_cou¡îs
 
avîage_å™ß˘i⁄s
;

524 
eXosù_cou¡îs
 
avîage_ªgi°øti⁄s
;

525 
eXosù_cou¡îs
 
avîage_ˇŒs
;

526 
eXosù_cou¡îs
 
avîage_publiˇti⁄s
;

527 
eXosù_cou¡îs
 
avîage_subs¸ùti⁄s
;

528 
eXosù_cou¡îs
 
avîage_ösubs¸ùti⁄s
;

531 
eXé_¥Ÿocﬁ
 
eXé_å™•‹t
;

532 *
eXéudp_ª£rved
;

533 *
eXét˝_ª£rved
;

534 #i‚de‡
DISABLE_TLS


535 *
eXéés_ª£rved
;

536 *
eXédés_ª£rved
;

539 
	#EXOSIP_USE_SELECT
 0

	)

540 
	#EXOSIP_USE_EPOLL_LT
 1

	)

542 
pﬁl_mëhod
;

544 #i‚de‡
EXOSIP_MAX_DESCRIPTOR


545 
	#EXOSIP_MAX_DESCRIPTOR
 10000

	)

547 #ifde‡
HAVE_SYS_EPOLL_H


548 
max_fd_no
;

549 
ïfd
;

550 
ïﬁl_evít
 *
ï_¨øy
;

551 
ïfd˘l
;

554 
å™•‹t
[10];

555 *
u£r_agít
;

557 
eXosù_ªg_t
 *
j_ªg
;

558 
eXosù_ˇŒ_t
 *
j_ˇŒs
;

559 #i‚de‡
MINISIZE


560 
eXosù_subs¸ibe_t
 *
j_subs¸ibes
;

561 
eXosù_nŸify_t
 *
j_nŸifõs
;

562 
eXosù_pub_t
 *
j_pub
;

564 
osù_li°_t
 
j_å™ß˘i⁄s
;

566 
osù_t
 *
j_osù
;

567 
j_°›_ua
;

568 #i‚de‡
OSIP_MONOTHREAD


569 *
j_c⁄d
;

570 *
j_muãxlock
;

571 *
j_thªad
;

572 
jpùe_t
 *
j_sockë˘l
;

573 
jpùe_t
 *
j_sockë˘l_evít
;

575 
max_mesßge_to_ªad
;

576 
max_ªad_timeout
;

578 
osù_fifo_t
 *
j_evíts
;

580 
jauthöfo_t
 *
authöfos
;

582 
timevÆ
 
cc_timî
;

583 
timevÆ
 
ka_timî
;

584 
ka_öãrvÆ
;

585 
ka_¸lf
[5];

586 
ka_›ti⁄s
;

587 
À¨n_p‹t
;

588 
u£_Ω‹t
;

589 
ªmove_¥îouã£t
;

590 
dns_ˇ∑bûôõs
;

591 
íabÀ_dns_ˇche
;

592 
ds˝
;

593 
im∂icô_subs¸ùti⁄_expúes
;

594 
ªgi°î_wôh_d©e
;

595 
autﬂnswî_bye
;

596 
ùv6_íabÀ
;

597 
ùv4_f‹_g©eway
[256];

598 
ùv6_f‹_g©eway
[256];

599 
eXosù_dns_ˇche
 
dns_íåõs
[
MAX_EXOSIP_DNS_ENTRY
];

600 
eXosù_accou¡_öfo
 
accou¡_íåõs
[
MAX_EXOSIP_ACCOUNT_INFO
];

601 
eXosù_hâp_auth
 
hâp_auths
[
MAX_EXOSIP_HTTP_AUTH
];

604 
udp_fúewÆl_ù
[64];

605 
udp_fúewÆl_p‹t
[10];

608 
t˝_fúewÆl_ù
[64];

609 
t˝_fúewÆl_p‹t
[10];

612 
és_fúewÆl_ù
[64];

613 
és_fúewÆl_p‹t
[10];

614 
és_vîify_˛õ¡_˚πifiˇã
;

615 
eXosù_és_˘x_t
 
eXosù_és_˘x_∑øms
;

618 
dés_fúewÆl_ù
[64];

619 
dés_fúewÆl_p‹t
[10];

621 
CbSùCÆlback
 
cbsùCÆlback
;

622 
masquîade_vü
;

623 
auto_masquîade_c⁄è˘
;

624 
ªu£_t˝_p‹t
;

625 
u£_ïhemîÆ_p‹t
;

626 
íabÀ_outbound
;

627 
oc_loˇl_addªss
[64];

628 
oc_loˇl_p‹t_ønge
[2];

629 
oc_loˇl_p‹t_cuºít
;

631 
CbSùWakeLock
 
cbsùWakeLock
;

632 
outgoög_wake_lock_°©e
;

633 
öcomög_wake_lock_°©e
;

635 
sù_ö°™˚
[256];

636 
co_ªgi°î_exåa_∑øms
[512];

637 
co_dülog_exåa_∑øms
[512];

638 
deÁu…_c⁄è˘_di•œy«me
[256];

639 
›t_£ssi⁄timîs_f‹˚
;

640 
›t_f‹˚_c⁄√˘i⁄ªu£
;

643 
_eXosù_guess_ù_f‹_vü
(
eXosù_t
 *
exc⁄ãxt
, 
Ámûy
, *
addªss
, 
size
);

644 
_eXosù_guess_ù_f‹_de°ö©i⁄
(
eXosù_t
 *
exc⁄ãxt
, 
Ámûy
, *
de°ö©i⁄
, *
addªss
, 
size
);

645 
_eXosù_guess_ù_f‹_de°ö©i⁄sock
(
eXosù_t
 *
exc⁄ãxt
, 
Ámûy
, 
¥Ÿo
, 
sockaddr_°‹age
 *
udp_loˇl_böd
, 
sock
, *
de°ö©i⁄
, *
addªss
, 
size
);

647 
_eXosù_˛o£sockë
(
SOCKET_TYPE
 
sock
);

648 
_eXosù_gë«meöfo
(c⁄° 
sockaddr
 *
ß
, 
sockÀn_t
 
ßÀn
, *
ho°
, sockÀn_à
ho°Àn
, *
£rv
, sockÀn_à
£rvÀn
, 
Êags
);

649 
_eXosù_gëp‹t
(c⁄° 
sockaddr
 *
ß
);

650 
_eXosù_gë_addröfo
(
eXosù_t
 *
exc⁄ãxt
, 
addröfo
 **addröfo, c⁄° *
ho°«me
, 
£rvi˚
, 
¥Ÿocﬁ
);

652 
_eXosù_£t_ˇŒbacks
(
osù_t
 *
osù
);

653 
_eXosù_¢d_mesßge
(
eXosù_t
 *
exc⁄ãxt
, 
osù_å™ß˘i⁄_t
 *
å
, 
osù_mesßge_t
 *
sù
, *
ho°
, 
p‹t
, 
out_sockë
);

654 *
_eXosù_mÆloc_√w_øndom
();

655 
_eXosù_dñëe_ª£rved
(
osù_å™ß˘i⁄_t
 *
å™ß˘i⁄
);

657 
_eXosù_dülog_öô_as_uac
(
eXosù_dülog_t
 **
jd
, 
osù_mesßge_t
 *
_200Ok
);

658 
_eXosù_dülog_öô_as_uas
(
eXosù_dülog_t
 **
jd
, 
osù_mesßge_t
 *
_övôe
, osù_mesßge_à*
_200Ok
);

659 
_eXosù_dülog_‰ì
(
eXosù_t
 *
exc⁄ãxt
, 
eXosù_dülog_t
 *
jd
);

661 
_eXosù_gíî©ög_ªque°_out_of_dülog
(
eXosù_t
 *
exc⁄ãxt
, 
osù_mesßge_t
 **
de°
, c⁄° *
mëhod
, c⁄° *
to
, c⁄° *
‰om
, c⁄° *
¥oxy
);

662 
_eXosù_gíî©ög_publish
(
eXosù_t
 *
exc⁄ãxt
, 
osù_mesßge_t
 **
mesßge
, c⁄° *
to
, c⁄° *
‰om
, c⁄° *
rouã
);

663 
_eXosù_gíî©ög_ˇn˚l
(
eXosù_t
 *
exc⁄ãxt
, 
osù_mesßge_t
 **
de°
, osù_mesßge_à*
ªque°_ˇn˚Œed
);

664 
_eXosù_gíî©ög_bye
(
eXosù_t
 *
exc⁄ãxt
, 
osù_mesßge_t
 **
bye
, 
osù_dülog_t
 *
dülog
);

665 
_eXosù_ªque°_vüm™agî
(
eXosù_t
 *
exc⁄ãxt
, 
osù_mesßge_t
 *
sù
, 
Ámûy
, 
¥Ÿo
, 
sockaddr_°‹age
 *
udp_loˇl_böd
, 
loˇl_p‹t
, 
sock
, *
ho°
);

666 
_eXosù_mesßge_c⁄è˘m™agî
(
eXosù_t
 *
exc⁄ãxt
, 
osù_mesßge_t
 *
sù
, 
Ámûy
, 
¥Ÿo
, 
sockaddr_°‹age
 *
udp_loˇl_böd
, 
loˇl_p‹t
, 
sock
, *
ho°
);

668 
_eXosù_upd©e_t›_vü
(
osù_mesßge_t
 *
sù
);

669 
_eXosù_ªque°_add_vü
(
eXosù_t
 *
exc⁄ãxt
, 
osù_mesßge_t
 *
ªque°
);

671 
_eXosù_m¨k_Æl_ªgi°øti⁄s_expúed
(
eXosù_t
 *
exc⁄ãxt
);

672 
_eXosù_m¨k_Æl_å™ß˘i⁄_f‹˚_£nd
(
eXosù_t
 *
exc⁄ãxt
, 
sockë
);

673 
_eXosù_m¨k_Æl_å™ß˘i⁄_å™•‹t_îr‹
(
eXosù_t
 *
exc⁄ãxt
, 
sockë
);

674 
_eXosù_m¨k_ªgi°øti⁄_expúed
(
eXosù_t
 *
exc⁄ãxt
, c⁄° *
ˇŒ_id
);

675 
_eXosù_m¨k_Æl_å™ß˘i⁄_ªady
(
eXosù_t
 *
exc⁄ãxt
, 
fd_£t
 *
osù_fd£t
, fd_£à*
osù_wr£t
, fd_£à*
osù_ex˚±£t
, *
osù_fd_èbÀ
);

676 #ifde‡
HAVE_SYS_EPOLL_H


677 
_eXosù_m¨k_Æl_å™ß˘i⁄_ªady_ïﬁl
(
eXosù_t
 *
exc⁄ãxt
, 
nfds
, *
osù_fd_èbÀ
);

679 
_eXosù_check_Ælow_hódî
(
eXosù_dülog_t
 *
jd
, 
osù_mesßge_t
 *
mesßge
);

681 
_eXosù_add_authítiˇti⁄_öf‹m©i⁄
(
eXosù_t
 *
exc⁄ãxt
, 
osù_mesßge_t
 *
ªq
, osù_mesßge_à*
œ°_ª•⁄£
);

682 
_eXosù_ªg_föd
(
eXosù_t
 *
exc⁄ãxt
, 
eXosù_ªg_t
 **
ªg
, 
osù_å™ß˘i⁄_t
 *
å
);

683 
_eXosù_ªg_föd_id
(
eXosù_t
 *
exc⁄ãxt
, 
eXosù_ªg_t
 **
ªg
, 
rid
);

684 
_eXosù_ªg_öô
(
eXosù_t
 *
exc⁄ãxt
, 
eXosù_ªg_t
 **
jr
, c⁄° *
‰om
, c⁄° *
¥oxy
, c⁄° *
c⁄è˘
);

685 
_eXosù_ªg_‰ì
(
eXosù_t
 *
exc⁄ãxt
, 
eXosù_ªg_t
 *
jªg
);

687 
_eXosù_ˇŒ_å™ß˘i⁄_föd
(
eXosù_t
 *
exc⁄ãxt
, 
tid
, 
eXosù_ˇŒ_t
 **
jc
, 
eXosù_dülog_t
 **
jd
, 
osù_å™ß˘i⁄_t
 **
å
);

688 
_eXosù_ˇŒ_ªåy_ªque°
(
eXosù_t
 *
exc⁄ãxt
, 
eXosù_ˇŒ_t
 *
jc
, 
eXosù_dülog_t
 *
jd
, 
osù_å™ß˘i⁄_t
 *
out_å
);

689 
_eXosù_å™ß˘i⁄_föd
(
eXosù_t
 *
exc⁄ãxt
, 
tid
, 
osù_å™ß˘i⁄_t
 **
å™ß˘i⁄
);

690 
_eXosù_ˇŒ_dülog_föd
(
eXosù_t
 *
exc⁄ãxt
, 
jid
, 
eXosù_ˇŒ_t
 **
jc
, 
eXosù_dülog_t
 **
jd
);

691 
_eXosù_ˇŒ_föd
(
eXosù_t
 *
exc⁄ãxt
, 
cid
, 
eXosù_ˇŒ_t
 **
jc
);

692 
_eXosù_dülog_£t_200ok
(
eXosù_dülog_t
 *
_jd
, 
osù_mesßge_t
 *
_200Ok
);

694 
_eXosù_™swî_övôe_123456xx
(
eXosù_t
 *
exc⁄ãxt
, 
eXosù_ˇŒ_t
 *
jc
, 
eXosù_dülog_t
 *
jd
, 
code
, 
osù_mesßge_t
 **
™swî
, 
£nd
);

696 
_eXosù_buûd_ª•⁄£_deÁu…
(
eXosù_t
 *
exc⁄ãxt
, 
osù_mesßge_t
 **
de°
, 
osù_dülog_t
 *
dülog
, 
°©us
, osù_mesßge_à*
ªque°
);

697 
_eXosù_com∂ëe_™swî_th©_e°ablish_a_dülog
(
eXosù_t
 *
exc⁄ãxt
, 
osù_mesßge_t
 *
ª•⁄£
, osù_mesßge_à*
ªque°
);

698 
_eXosù_buûd_ªque°_wôhö_dülog
(
eXosù_t
 *
exc⁄ãxt
, 
osù_mesßge_t
 **
de°
, c⁄° *
mëhod
, 
osù_dülog_t
 *
dülog
);

699 
_eXosù_ªmove_å™ß˘i⁄_‰om_ˇŒ
(
osù_å™ß˘i⁄_t
 *
å
, 
eXosù_ˇŒ_t
 *
jc
);

701 
osù_å™ß˘i⁄_t
 *
_eXosù_föd_œ°_å™ß˘i⁄
(
eXosù_ˇŒ_t
 *
jc
, 
eXosù_dülog_t
 *
jd
, c⁄° *
mëhod
);

702 
osù_å™ß˘i⁄_t
 *
_eXosù_föd_œ°_öc_å™ß˘i⁄
(
eXosù_dülog_t
 *
jd
, c⁄° *
mëhod
);

703 
osù_å™ß˘i⁄_t
 *
_eXosù_föd_œ°_out_å™ß˘i⁄
(
eXosù_ˇŒ_t
 *
jc
, 
eXosù_dülog_t
 *
jd
, c⁄° *
mëhod
);

704 
osù_å™ß˘i⁄_t
 *
_eXosù_föd_œ°_övôe
(
eXosù_ˇŒ_t
 *
jc
, 
eXosù_dülog_t
 *
jd
);

705 
osù_å™ß˘i⁄_t
 *
_eXosù_föd_œ°_öc_övôe
(
eXosù_ˇŒ_t
 *
jc
, 
eXosù_dülog_t
 *
jd
);

706 
osù_å™ß˘i⁄_t
 *
_eXosù_föd_œ°_out_övôe
(
eXosù_ˇŒ_t
 *
jc
, 
eXosù_dülog_t
 *
jd
);

707 
osù_å™ß˘i⁄_t
 *
_eXosù_föd_¥evious_övôe
(
eXosù_ˇŒ_t
 *
jc
, 
eXosù_dülog_t
 *
jd
, osù_å™ß˘i⁄_à*
œ°_övôe
);

709 
_eXosù_ˇŒ_öô
(
eXosù_t
 *
exc⁄ãxt
, 
eXosù_ˇŒ_t
 **
jc
);

710 
_eXosù_ˇŒ_ª√w_expúe_time
(
eXosù_ˇŒ_t
 *
jc
);

711 
_eXosù_ˇŒ_‰ì
(
eXosù_t
 *
exc⁄ãxt
, 
eXosù_ˇŒ_t
 *
jc
);

712 
_eXosù_ˇŒ_ªmove_dülog_ª„ªn˚_ö_ˇŒ
(
eXosù_ˇŒ_t
 *
jc
, 
eXosù_dülog_t
 *
jd
);

713 
_eXosù_ªad_mesßge
(
eXosù_t
 *
exc⁄ãxt
, 
max_mesßge_nb
, 
£c_max
, 
u£c_max
);

714 
_eXosù_ªÀa£_ãrmö©ed_ˇŒs
(
eXosù_t
 *
exc⁄ãxt
);

715 
_eXosù_ªÀa£_ãrmö©ed_ªgi°øti⁄s
(
eXosù_t
 *
exc⁄ãxt
);

716 
_eXosù_ªÀa£_ãrmö©ed_publiˇti⁄s
(
eXosù_t
 *
exc⁄ãxt
);

718 #i‚de‡
MINISIZE


719 
_eXosù_ösubs¸ùti⁄_å™ß˘i⁄_föd
(
eXosù_t
 *
exc⁄ãxt
, 
tid
, 
eXosù_nŸify_t
 **
jn
, 
eXosù_dülog_t
 **
jd
, 
osù_å™ß˘i⁄_t
 **
å
);

720 
_eXosù_nŸify_dülog_föd
(
eXosù_t
 *
exc⁄ãxt
, 
nid
, 
eXosù_nŸify_t
 **
jn
, 
eXosù_dülog_t
 **
jd
);

721 
_eXosù_subs¸ùti⁄_å™ß˘i⁄_föd
(
eXosù_t
 *
exc⁄ãxt
, 
tid
, 
eXosù_subs¸ibe_t
 **
js
, 
eXosù_dülog_t
 **
jd
, 
osù_å™ß˘i⁄_t
 **
å
);

722 
_eXosù_subs¸ùti⁄_dülog_föd
(
eXosù_t
 *
exc⁄ãxt
, 
nid
, 
eXosù_subs¸ibe_t
 **
js
, 
eXosù_dülog_t
 **
jd
);

723 
_eXosù_ösubs¸ùti⁄_™swî_1xx
(
eXosù_t
 *
exc⁄ãxt
, 
eXosù_nŸify_t
 *
jc
, 
eXosù_dülog_t
 *
jd
, 
code
);

724 
_eXosù_ösubs¸ùti⁄_™swî_2xx
(
eXosù_nŸify_t
 *
jn
, 
eXosù_dülog_t
 *
jd
, 
code
);

725 
_eXosù_ösubs¸ùti⁄_™swî_3456xx
(
eXosù_t
 *
exc⁄ãxt
, 
eXosù_nŸify_t
 *
jn
, 
eXosù_dülog_t
 *
jd
, 
code
);

726 
osù_å™ß˘i⁄_t
 *
_eXosù_föd_œ°_öc_nŸify
(
eXosù_dülog_t
 *
jd
);

727 
osù_å™ß˘i⁄_t
 *
_eXosù_föd_œ°_out_nŸify
(
eXosù_dülog_t
 *
jd
);

728 
osù_å™ß˘i⁄_t
 *
_eXosù_föd_œ°_öc_subs¸ibe
(
eXosù_nŸify_t
 *
jn
, 
eXosù_dülog_t
 *
jd
);

729 
osù_å™ß˘i⁄_t
 *
_eXosù_föd_œ°_out_subs¸ibe
(
eXosù_subs¸ibe_t
 *
js
, 
eXosù_dülog_t
 *
jd
);

730 
_eXosù_ªÀa£_ãrmö©ed_subs¸ùti⁄s
(
eXosù_t
 *
exc⁄ãxt
);

731 
_eXosù_ªÀa£_ãrmö©ed_ö_subs¸ùti⁄s
(
eXosù_t
 *
exc⁄ãxt
);

732 
_eXosù_subs¸ùti⁄_öô
(
eXosù_t
 *
exc⁄ãxt
, 
eXosù_subs¸ibe_t
 **
js
);

733 
_eXosù_subs¸ùti⁄_‰ì
(
eXosù_t
 *
exc⁄ãxt
, 
eXosù_subs¸ibe_t
 *
js
);

734 
_eXosù_subs¸ùti⁄_£t_ª‰esh_öãrvÆ
(
eXosù_subs¸ibe_t
 *
js
, 
osù_mesßge_t
 *
öc_subs¸ibe
);

735 
_eXosù_subs¸ùti⁄_£nd_ªque°_wôh_¸edítül
(
eXosù_t
 *
exc⁄ãxt
, 
eXosù_subs¸ibe_t
 *
js
, 
eXosù_dülog_t
 *
jd
, 
osù_å™ß˘i⁄_t
 *
out_å
);

736 
_eXosù_subs¸ùti⁄_autom©ic_ª‰esh
(
eXosù_t
 *
exc⁄ãxt
, 
eXosù_subs¸ibe_t
 *
js
, 
eXosù_dülog_t
 *
jd
, 
osù_å™ß˘i⁄_t
 *
out_å
);

737 
_eXosù_nŸify_öô
(
eXosù_t
 *
exc⁄ãxt
, 
eXosù_nŸify_t
 **
jn
, 
osù_mesßge_t
 *
öc_subs¸ibe
);

738 
_eXosù_nŸify_‰ì
(
eXosù_t
 *
exc⁄ãxt
, 
eXosù_nŸify_t
 *
jn
);

739 
_eXosù_nŸify_£t_c⁄è˘_öfo
(
eXosù_nŸify_t
 *
jn
, *
uri
);

740 
_eXosù_nŸify_£t_ª‰esh_öãrvÆ
(
eXosù_nŸify_t
 *
jn
, 
osù_mesßge_t
 *
öc_subs¸ibe
);

741 
_eXosù_nŸify_add_expúes_ö_2XX_f‹_subs¸ibe
(
eXosù_nŸify_t
 *
jn
, 
osù_mesßge_t
 *
™swî
);

742 
_eXosù_ösubs¸ùti⁄_£nd_ªque°_wôh_¸edítül
(
eXosù_t
 *
exc⁄ãxt
, 
eXosù_nŸify_t
 *
jn
, 
eXosù_dülog_t
 *
jd
, 
osù_å™ß˘i⁄_t
 *
out_å
);

745 
_eXosù_is_public_addªss
(c⁄° *
addr
);

747 
_eXosù_ªå™smô_lo°200ok
(
eXosù_t
 *
exc⁄ãxt
);

748 
_eXosù_dülog_add_c⁄è˘
(
eXosù_t
 *
exc⁄ãxt
, 
osù_mesßge_t
 *
ªque°
);

750 
_eXosù_å™ß˘i⁄_öô
(
eXosù_t
 *
exc⁄ãxt
, 
osù_å™ß˘i⁄_t
 **
å™ß˘i⁄
, 
osù_fsm_ty≥_t
 
˘x_ty≥
, 
osù_t
 *
osù
, 
osù_mesßge_t
 *
mesßge
);

751 
_eXosù_å™ß˘i⁄_‰ì
(
eXosù_t
 *
exc⁄ãxt
, 
osù_å™ß˘i⁄_t
 *
å™ß˘i⁄
);

753 
_eXosù_§v_lookup
(
eXosù_t
 *
exc⁄ãxt
, 
osù_mesßge_t
 *
sù
, 
osù_«±r_t
 **
«±r_ªc‹d
);

754 c⁄° *
_eXosù_dnsutûs_föd_¢i
(
eXosù_t
 *
exc⁄ãxt
, c⁄° *
ho°«me
);

755 
_eXosù_dnsutûs_gësock
(
eXosù_t
 *
exc⁄ãxt
, 
fd_£t
 *
ªad_fds
, fd_£à*
wrôe_fds
);

756 
_eXosù_dnsutûs_checksock
(
eXosù_t
 *
exc⁄ãxt
, 
fd_£t
 *
ªad_fds
, fd_£à*
wrôe_fds
);

757 
_eXosù_dnsutûs_checksock_ïﬁl
(
eXosù_t
 *
exc⁄ãxt
, 
nfds
);

758 
_eXosù_dnsutûs_addsock_ïﬁl
(
eXosù_t
 *
exc⁄ãxt
, *
ˇªs_fd_èbÀ
);

759 
_eXosù_dnsutûs_dñsock_ïﬁl
(
eXosù_t
 *
exc⁄ãxt
, *
ˇªs_fd_èbÀ
);

761 
_eXosù_h™dÀ_öcomög_mesßge
(
eXosù_t
 *
exc⁄ãxt
, *
buf
, 
size_t
 
Àn
, 
sockë
, *
ho°
, 
p‹t
, *
ª˚ived_ho°
, *
Ω‹t_p‹t
);

763 
_eXosù_å™•‹t_£t_ds˝
(
eXosù_t
 *
exc⁄ãxt
, 
Ámûy
, 
sock
);

769 
eXosù_és_˘x_îr‹
 
eXosù_£t_és_˘x
(
eXosù_t
 *
exc⁄ãxt
, 
eXosù_és_˘x_t
 *
˘x
);

774 
eXosù_és_˘x_îr‹
 
eXosù_és_vîify_˚πifiˇã
(
eXosù_t
 *
exc⁄ãxt
, 
_és_vîify_˛õ¡_˚πifiˇã
);

780 
_t˝és_é_is_c⁄√˘ed
(
ïﬁl_mëhod
, 
sock
);

785 
_é_ªsﬁv_«±r_de°ö©i⁄
(
eXosù_t
 *
exc⁄ãxt
, 
osù_å™ß˘i⁄_t
 *
å
, 
osù_mesßge_t
 *
sù
, **
out_ho°
, *
out_p‹t
, 
osù_«±r_t
 **
out_«±r_ªc‹d
);

787 #i‚de‡
EXOSIP_STATS_PERIOD


788 
	#EXOSIP_STATS_PERIOD
 3600

	)

790 #i‚de‡
EXOSIP_STATS_INTERVAL


791 
	#EXOSIP_STATS_INTERVAL
 60

	)

794 #i‚de‡
MINISIZE


795 
_eXosù_cou¡îs_öô
(
eXosù_cou¡îs
 *
bw_°©s
, 
≥riod
, 
öãrvÆ
);

796 
_eXosù_cou¡îs_upd©e
(
eXosù_cou¡îs
 *
bw_°©s
, 
nvÆues
, 
timevÆ
 *
now
);

797 
_eXosù_cou¡îs_‰ì
(
eXosù_cou¡îs
 *
bw_°©s
);

799 
	#_eXosù_cou¡îs_öô
(
A
, 
B
, 
C
)

	)

800 
	#_eXosù_cou¡îs_upd©e
(
A
, 
B
, 
C
)

	)

801 
	#_eXosù_cou¡îs_‰ì
(
A
)

	)

804 #ifde‡
__˝lu•lus


	@/home/unasaw/sip_project/libexosip2-5.3.0/src/eXpublish_api.c

33 
	~"eXosù2.h
"

35 #i‚de‡
MINISIZE


37 
	~<eXosù2/eXosù.h
>

39 
	$eXosù_buûd_publish
(
eXosù_t
 *
exc⁄ãxt
, 
osù_mesßge_t
 **
mesßge
, c⁄° *
to
, c⁄° *
‰om
, c⁄° *
rouã
, c⁄° *
evít
, c⁄° *
expúes
, c⁄° *
˘y≥
, c⁄° *
body
) {

40 
i
;

42 *
mesßge
 = 
NULL
;

44 i‡(
to
 =
NULL
 ||Åo[0] == '\0')

45  
OSIP_BADPARAMETER
;

47 i‡(
‰om
 =
NULL
 || from[0] == '\0')

48  
OSIP_BADPARAMETER
;

50 i‡(
evít
 =
NULL
 ||Évent[0] == '\0')

51  
OSIP_BADPARAMETER
;

53 i‡(
˘y≥
 =
NULL
 || ctype[0] == '\0') {

54 i‡(
body
 !
NULL
 && body[0] != '\0')

55  
OSIP_BADPARAMETER
;

58 i‡(
body
 =
NULL
 || body[0] == '\0')

59  
OSIP_BADPARAMETER
;

62 
i
 = 
	`_eXosù_gíî©ög_publish
(
exc⁄ãxt
, 
mesßge
, 
to
, 
‰om
, 
rouã
);

64 i‡(
i
 != 0) {

65 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] cannot send message (cannot build PUBLISH)\n"));

66  
i
;

69 i‡(
body
 !
NULL
 && body[0] !'\0' && 
˘y≥
 != NULL && ctype[0] != '\0') {

70 
	`osù_mesßge_£t_c⁄ã¡_ty≥
(*
mesßge
, 
˘y≥
);

71 
	`osù_mesßge_£t_body
(*
mesßge
, 
body
, 
	`°æí
(body));

78 i‡(
expúes
 !
NULL
 &&Éxpires[0] != '\0')

79 
	`osù_mesßge_£t_expúes
(*
mesßge
, 
expúes
);

82 
	`osù_mesßge_£t_expúes
(*
mesßge
, "3600");

84 
	`osù_mesßge_£t_hódî
(*
mesßge
, "Evít", 
evít
);

86  
OSIP_SUCCESS
;

87 
	}
}

89 
	$eXosù_publish
(
eXosù_t
 *
exc⁄ãxt
, 
osù_mesßge_t
 *
mesßge
, c⁄° *
to
) {

90 
osù_å™ß˘i⁄_t
 *
å™ß˘i⁄
;

91 
osù_evít_t
 *
sùevít
;

92 
i
;

93 
eXosù_pub_t
 *
pub
 = 
NULL
;

94 
œŒoˇãd
 = 0;

96 i‡(
mesßge
 =
NULL
)

97  
OSIP_BADPARAMETER
;

99 i‡(
mesßge
->
c£q
 =
NULL
 || mesßge->c£q->
numbî
 == NULL) {

100 
	`osù_mesßge_‰ì
(
mesßge
);

101  
OSIP_SYNTAXERROR
;

104 i‡(
to
 =
NULL
) {

105 
	`osù_mesßge_‰ì
(
mesßge
);

106  
OSIP_BADPARAMETER
;

109 
i
 = 
	`_eXosù_pub_föd_by_a‹
(
exc⁄ãxt
, &
pub
, 
to
);

111 i‡(
i
 !0 || 
pub
 =
NULL
) {

112 
osù_hódî_t
 *
expúes
;

114 
	`osù_mesßge_gë_expúes
(
mesßge
, 0, &
expúes
);

116 i‡(
expúes
 =
NULL
 ||Éxpúes->
hvÆue
 == NULL) {

117 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] missingÉxpires header in PUBLISH\n"));

118 
	`osù_mesßge_‰ì
(
mesßge
);

119  
OSIP_SYNTAXERROR
;

123 
i
 = 
	`_eXosù_pub_öô
(
exc⁄ãxt
, &
pub
, 
to
, 
expúes
->
hvÆue
);

125 i‡(
i
 != 0) {

126 
	`osù_mesßge_‰ì
(
mesßge
);

127  
i
;

130 
	`ADD_ELEMENT
(
exc⁄ãxt
->
j_pub
, 
pub
);

131 
œŒoˇãd
 = 1;

135 i‡(
pub
->
p_sù_ëag
[0] != '\0') {

137 
	`osù_mesßge_£t_hódî
(
mesßge
, "SIP-If-M©ch", 
pub
->
p_sù_ëag
);

141 
osù_hódî_t
 *
expúes
;

143 
	`osù_mesßge_gë_expúes
(
mesßge
, 0, &
expúes
);

145 i‡(
expúes
 =
NULL
 ||Éxpúes->
hvÆue
 == NULL) {

146 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] missingÉxpires header in PUBLISH\n"));

147 
	`osù_mesßge_‰ì
(
mesßge
);

148  
OSIP_SYNTAXERROR
;

151 
pub
->
p_≥riod
 = 
	`©oi
(
expúes
->
hvÆue
);

154 i‡(
pub
->
p_œ°_å
 !
NULL
 &&Öub->p_œ°_å->
c£q
 !NULL &&Öub->p_œ°_å->c£q->
numbî
 != NULL) {

155 
osù_c£q_num
 = 
	`osù_©oi
(
pub
->
p_œ°_å
->
c£q
->
numbî
);

156 
Àngth
 = (Ë
	`°æí
(
pub
->
p_œ°_å
->
c£q
->
numbî
);

158 
osù_c£q_num
++;

159 
	`osù_‰ì
(
mesßge
->
c£q
->
numbî
);

160 
mesßge
->
c£q
->
numbî
 = (*Ë
	`osù_mÆloc
(
Àngth
 + 2);

162 i‡(
mesßge
->
c£q
->
numbî
 =
NULL
) {

163 
	`osù_mesßge_‰ì
(
mesßge
);

164  
OSIP_NOMEM
;

167 
	`¢¥ötf
(
mesßge
->
c£q
->
numbî
, 
Àngth
 + 2, "%i", 
osù_c£q_num
);

171 
i
 = 
	`_eXosù_å™ß˘i⁄_öô
(
exc⁄ãxt
, &
å™ß˘i⁄
, 
NICT
,Éxc⁄ãxt->
j_osù
, 
mesßge
);

173 i‡(
i
 != 0) {

174 
	`osù_mesßge_‰ì
(
mesßge
);

176 i‡(
œŒoˇãd
 == 1) {

177 
	`REMOVE_ELEMENT
(
exc⁄ãxt
->
j_pub
, 
pub
);

178 
	`_eXosù_pub_‰ì
(
exc⁄ãxt
, 
pub
);

181  
i
;

184 i‡(
pub
->
p_œ°_å
 !
NULL
)

185 
	`osù_li°_add
(&
exc⁄ãxt
->
j_å™ß˘i⁄s
, 
pub
->
p_œ°_å
, 0);

187 
pub
->
p_œ°_å
 = 
å™ß˘i⁄
;

189 
sùevít
 = 
	`osù_√w_outgoög_sùmesßge
(
mesßge
);

190 
sùevít
->
å™ß˘i⁄id
 = 
å™ß˘i⁄
->transactionid;

192 
	`osù_å™ß˘i⁄_add_evít
(
å™ß˘i⁄
, 
sùevít
);

193 
	`_eXosù_wakeup
(
exc⁄ãxt
);

194  
å™ß˘i⁄
->
å™ß˘i⁄id
;

195 
	}
}

	@/home/unasaw/sip_project/libexosip2-5.3.0/src/eXregister_api.c

33 
	~"eXosù2.h
"

35 
_eXosù_ªgi°î_buûd_ªgi°î
(
eXosù_t
 *
exc⁄ãxt
, 
eXosù_ªg_t
 *
jr
, 
osù_mesßge_t
 **
_ªg
);

37 
eXosù_ªg_t
 *
	$eXosù_ªg_föd
(
eXosù_t
 *
exc⁄ãxt
, 
rid
) {

38 
eXosù_ªg_t
 *
jr
;

40 
jr
 = 
exc⁄ãxt
->
j_ªg
; j∏!
NULL
; j∏jr->
√xt
) {

41 i‡(
jr
->
r_id
 =
rid
) {

42  
jr
;

46  
NULL
;

47 
	}
}

49 
	$eXosù_ªgi°î_ªmove
(
eXosù_t
 *
exc⁄ãxt
, 
rid
) {

50 
eXosù_ªg_t
 *
jr
;

52 i‡(
rid
 <= 0)

53  
OSIP_BADPARAMETER
;

55 
jr
 = 
	`eXosù_ªg_föd
(
exc⁄ãxt
, 
rid
);

57 i‡(
jr
 =
NULL
)

58  
OSIP_NOTFOUND
;

60 
jr
->
r_ªg_≥riod
 = 0;

61 
jr
->
r_ªg_expúe
 = 0;

62 
	`REMOVE_ELEMENT
(
exc⁄ãxt
->
j_ªg
, 
jr
);

63 
	`_eXosù_ªg_‰ì
(
exc⁄ãxt
, 
jr
);

64 
jr
 = 
NULL
;

65  
OSIP_SUCCESS
;

66 
	}
}

68 #i‡
deföed
(
HAVE_GMTIME_R
Ë|| deföed(
HAVE_GMTIME
)

69 c⁄° *
	gdays
[] = {"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"};

70 c⁄° *
	gm⁄ths
[] = {"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"};

72 
	$_eXosù_ªgi°î_£t_d©e
(
osù_mesßge_t
 *
msg
) {

73 
tmp
[256] = {0};

74 
time_t
 
cuπime
 = 
	`time
(
NULL
);

75 
tm
 *
ªt
;

77 #ifde‡
HAVE_GMTIME_R


78 
tm
 
gmt
;

80 
ªt
 = 
	`gmtime_r
(&
cuπime
, &
gmt
);

82 
ªt
 = 
	`gmtime
(&
cuπime
);

85 
	`¢¥ötf
(
tmp
, —mpË- 1, "%s, %ò%†%ò%02i:%02i:%02òGMT", 
days
[
ªt
->
tm_wday
],Ñë->
tm_mday
, 
m⁄ths
[ªt->
tm_m⁄
], 1900 +Ñë->
tm_yór
,Ñë->
tm_hour
,Ñë->
tm_mö
,Ñë->
tm_£c
);

86 
	`osù_mesßge_ª∂a˚_hódî
(
msg
, "D©e", 
tmp
);

87 
	}
}

90 
	$_eXosù_ªgi°î_add_c⁄è˘
(
eXosù_t
 *
exc⁄ãxt
, 
eXosù_ªg_t
 *
jªg
, 
osù_mesßge_t
 *
ªg
) {

91 
i
;

93 
osù_c⁄è˘_t
 *
√w_c⁄è˘
;

94 
osù_uri_t
 *
√w_c⁄è˘_uæ
 = 
NULL
;

96 
	`osù_mesßge_gë_c⁄è˘
(
ªg
, 0, &
√w_c⁄è˘
);

98 i‡(
√w_c⁄è˘
 !
NULL
)

99  
OSIP_SUCCESS
;

101 
i
 = 
	`osù_c⁄è˘_öô
(&
√w_c⁄è˘
);

103 i‡(
i
 == 0)

104 
i
 = 
	`osù_uri_öô
(&
√w_c⁄è˘_uæ
);

106 
√w_c⁄è˘
->
uæ
 = 
√w_c⁄è˘_uæ
;

108 i‡(
i
 =0 && 
ªg
->
‰om
 !
NULL
 &&Ñeg->‰om->
uæ
 !NULL &&Ñeg->‰om->uæ->
u£∫ame
 != NULL) {

109 
√w_c⁄è˘_uæ
->
u£∫ame
 = 
	`osù_°rdup
(
ªg
->
‰om
->
uæ
->username);

112 i‡(
exc⁄ãxt
->
deÁu…_c⁄è˘_di•œy«me
[0] != '\0') {

113 
√w_c⁄è˘
->
di•œy«me
 = 
	`osù_°rdup
(
exc⁄ãxt
->
deÁu…_c⁄è˘_di•œy«me
);

116 i‡(
i
 !0 || 
ªg
->
‰om
 =
NULL
 ||Ñeg->‰om->
uæ
 == NULL) {

117 
	`osù_c⁄è˘_‰ì
(
√w_c⁄è˘
);

118  
OSIP_SYNTAXERROR
;

122 
√w_c⁄è˘_uæ
->
ho°
 = 
	`osù_°rdup
("999.999.999.999");

123 
√w_c⁄è˘_uæ
->
p‹t
 = 
	`osù_°rdup
("99999");

125 i‡(
	`osù_°rˇ£cmp
(
exc⁄ãxt
->
å™•‹t
, "UDP") != 0) {

126 
	`osù_uri_u∑øm_add
(
√w_c⁄è˘_uæ
, 
	`osù_°rdup
("å™•‹t"), osù_°rdup(
exc⁄ãxt
->
å™•‹t
));

129 i‡(
jªg
->
r_löe
[0] != '\0') {

130 
	`osù_uri_u∑øm_add
(
√w_c⁄è˘_uæ
, 
	`osù_°rdup
("löe"), osù_°rdup(
jªg
->
r_löe
));

133 i‡(
jªg
->
r_qvÆue
[0] != 0)

134 
	`osù_c⁄è˘_∑øm_add
(
√w_c⁄è˘
, 
	`osù_°rdup
("q"), osù_°rdup(
jªg
->
r_qvÆue
));

136 i‡(
exc⁄ãxt
->
sù_ö°™˚
[0] != 0) {

137 *
sù_ö°™˚
;

138 
size_t
 
sù_ö°™˚_Àn
 = 
	`°æí
(
exc⁄ãxt
->
sù_ö°™˚
) + 14;

140 
sù_ö°™˚
 = (*Ë
	`osù_mÆloc
(
sù_ö°™˚_Àn
);

142 i‡(
sù_ö°™˚
 !
NULL
) {

143 i‡(
	`°æí
(
exc⁄ãxt
->
sù_ö°™˚
) == 36 &&Éxcontext->sip_instance[8] == '-') {

145 
	`¢¥ötf
(
sù_ö°™˚
, 
sù_ö°™˚_Àn
, "\"<u∫:uuid:%s>\"", 
exc⁄ãxt
->sip_instance);

148 
	`¢¥ötf
(
sù_ö°™˚
, 
sù_ö°™˚_Àn
, "\"<%s>\"", 
exc⁄ãxt
->sip_instance);

150 
	`osù_c⁄è˘_∑øm_add
(
√w_c⁄è˘
, 
	`osù_°rdup
("+sù.ö°™˚"), 
sù_ö°™˚
);

158 i‡(
ªg
->
to
 !
NULL
 &&Ñeg->to->
uæ
 !NULL &&Ñeg->to->uæ->
scheme
 !NULL && 
	`osù_°rˇ£cmp
(reg->to->url->scheme, "sips") == 0) {

159 i‡(
√w_c⁄è˘
->
uæ
->
scheme
 !
NULL
)

160 
	`osù_‰ì
(
√w_c⁄è˘
->
uæ
->
scheme
);

162 
√w_c⁄è˘
->
uæ
->
scheme
 = 
	`osù_°rdup
("sips");

165 
	`osù_li°_add
(&
ªg
->
c⁄è˘s
, 
√w_c⁄è˘
, -1);

166  
OSIP_SUCCESS
;

167 
	}
}

169 
	$_eXosù_gíî©ög_ªgi°î
(
eXosù_t
 *
exc⁄ãxt
, 
eXosù_ªg_t
 *
jªg
, 
osù_mesßge_t
 **
ªg
, *
‰om
, *
¥oxy
, *
c⁄è˘
, 
expúes
) {

170 
i
;

172 i‡(
exc⁄ãxt
->
eXé_å™•‹t
.
íabÀd
 <= 0)

173  
OSIP_NO_NETWORK
;

175 
i
 = 
	`_eXosù_gíî©ög_ªque°_out_of_dülog
(
exc⁄ãxt
, 
ªg
, "REGISTER", 
NULL
, 
‰om
, 
¥oxy
);

177 i‡(
i
 != 0)

178  
i
;

180 i‡(
c⁄è˘
 =
NULL
) {

181 
	`_eXosù_ªgi°î_add_c⁄è˘
(
exc⁄ãxt
, 
jªg
, *
ªg
);

184 
	`osù_mesßge_£t_c⁄è˘
(*
ªg
, 
c⁄è˘
);

188 
exp
[10];

190 
	`¢¥ötf
(
exp
, 9, "%i", 
expúes
);

191 
	`osù_mesßge_£t_expúes
(*
ªg
, 
exp
);

194 
	`osù_mesßge_£t_c⁄ã¡_Àngth
(*
ªg
, "0");

196  
OSIP_SUCCESS
;

197 
	}
}

199 
	$_eXosù_ªgi°î_buûd_ªgi°î
(
eXosù_t
 *
exc⁄ãxt
, 
eXosù_ªg_t
 *
jr
, 
osù_mesßge_t
 **
_ªg
) {

200 
osù_mesßge_t
 *
ªg
 = 
NULL
;

201 
i
;

203 *
_ªg
 = 
NULL
;

205 i‡(
jr
 =
NULL
)

206  
OSIP_BADPARAMETER
;

208 i‡(
jr
->
r_œ°_å
 !
NULL
) {

209 
osù_mesßge_t
 *
œ°_ª•⁄£
 = 
NULL
;

210 
osù_å™ß˘i⁄_t
 *
å
;

212 i‡(
jr
->
r_œ°_å
->
°©e
 !
NICT_TERMINATED
 && jr->r_œ°_å->°©ê!
NICT_COMPLETED
)

213  
OSIP_WRONG_STATE
;

215 
i
 = 
	`osù_mesßge_˛⁄e
(
jr
->
r_œ°_å
->
‹ig_ªque°
, &
ªg
);

217 i‡(
i
 != 0)

218  
i
;

220 i‡(
jr
->
r_œ°_å
->
œ°_ª•⁄£
 !
NULL
) {

221 
i
 = 
	`osù_mesßge_˛⁄e
(
jr
->
r_œ°_å
->
œ°_ª•⁄£
, &last_response);

223 i‡(
i
 != 0) {

224 
	`osù_mesßge_‰ì
(
ªg
);

225  
i
;

229 
	`_eXosù_dñëe_ª£rved
(
jr
->
r_œ°_å
);

230 
å
 = 
jr
->
r_œ°_å
;

231 
jr
->
r_œ°_å
 = 
NULL
;

232 
	`osù_li°_add
(&
exc⁄ãxt
->
j_å™ß˘i⁄s
, 
å
, 0);

236 
osù_c£q_num
 = 
	`osù_©oi
(
ªg
->
c£q
->
numbî
);

237 
Àngth
 = (Ë
	`°æí
(
ªg
->
c£q
->
numbî
);

239 
	`osù_li°_•ecül_‰ì
(&
ªg
->
auth‹iz©i⁄s
, ((*)(*)Ë& 
osù_auth‹iz©i⁄_‰ì
);

240 
	`osù_li°_•ecül_‰ì
(&
ªg
->
¥oxy_auth‹iz©i⁄s
, ((*)(*)Ë& 
osù_¥oxy_auth‹iz©i⁄_‰ì
);

242 
i
 = 
	`_eXosù_upd©e_t›_vü
(
ªg
);

244 i‡(
i
 != 0) {

245 
	`osù_mesßge_‰ì
(
ªg
);

247 i‡(
œ°_ª•⁄£
 !
NULL
)

248 
	`osù_mesßge_‰ì
(
œ°_ª•⁄£
);

250  
i
;

253 
osù_c£q_num
++;

254 
	`osù_‰ì
(
ªg
->
c£q
->
numbî
);

255 
ªg
->
c£q
->
numbî
 = (*Ë
	`osù_mÆloc
(
Àngth
 + 2);

257 i‡(
ªg
->
c£q
->
numbî
 =
NULL
) {

258 
	`osù_mesßge_‰ì
(
ªg
);

260 i‡(
œ°_ª•⁄£
 !
NULL
)

261 
	`osù_mesßge_‰ì
(
œ°_ª•⁄£
);

263  
OSIP_NOMEM
;

266 
	`¢¥ötf
(
ªg
->
c£q
->
numbî
, 
Àngth
 + 2, "%i", 
osù_c£q_num
);

268 i‡(
œ°_ª•⁄£
 !
NULL
 &&Üa°_ª•⁄£->
°©us_code
 == 423) {

270 
osù_hódî_t
 *
exp
;

271 
osù_hódî_t
 *
mö_exp
;

273 
	`osù_mesßge_hódî_gë_by«me
(
ªg
, "expúes", 0, &
exp
);

274 
	`osù_mesßge_hódî_gë_by«me
(
œ°_ª•⁄£
, "mö-expúes", 0, &
mö_exp
);

276 i‡(
exp
 !
NULL
 &&Éxp->
hvÆue
 !NULL && 
mö_exp
 != NULL && min_exp->hvalue != NULL) {

277 
	`osù_‰ì
(
exp
->
hvÆue
);

278 
exp
->
hvÆue
 = 
	`osù_°rdup
(
mö_exp
->hvalue);

279 
jr
->
r_ªg_≥riod
 = 
	`©oi
(
mö_exp
->
hvÆue
);

280 
jr
->
r_ªg_expúe
 = jr->
r_ªg_≥riod
;

283 
	`osù_mesßge_‰ì
(
ªg
);

285 i‡(
œ°_ª•⁄£
 !
NULL
)

286 
	`osù_mesßge_‰ì
(
œ°_ª•⁄£
);

288 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] missing Min-Expires or Expires in REGISTER\n"));

289  
OSIP_SYNTAXERROR
;

293 
osù_hódî_t
 *
exp
;

295 
	`osù_mesßge_hódî_gë_by«me
(
ªg
, "expúes", 0, &
exp
);

297 i‡(
exp
 !
NULL
) {

298 i‡(
exp
->
hvÆue
 !
NULL
)

299 
	`osù_‰ì
(
exp
->
hvÆue
);

301 
exp
->
hvÆue
 = (*Ë
	`osù_mÆloc
(10);

303 i‡(
exp
->
hvÆue
 =
NULL
) {

304 
	`osù_mesßge_‰ì
(
ªg
);

306 i‡(
œ°_ª•⁄£
 !
NULL
)

307 
	`osù_mesßge_‰ì
(
œ°_ª•⁄£
);

309  
OSIP_NOMEM
;

312 
	`¢¥ötf
(
exp
->
hvÆue
, 9, "%i", 
jr
->
r_ªg_expúe
);

316 
	`osù_mesßge_f‹˚_upd©e
(
ªg
);

319 i‡(
jr
->
ªgi°øti⁄_°ï
 =
RS_DELETIONPROCEEDING
) {

321 
osù_c⁄è˘_t
 *
c⁄è˘
;

323 
	`osù_mesßge_gë_c⁄è˘
(
ªg
, 0, &
c⁄è˘
);

325 i‡(
c⁄è˘
 !
NULL
) {

326 
osù_gíîic_∑øm_t
 *
exp_∑øm
 = 
NULL
;

328 
	`osù_c⁄è˘_∑øm_gë_by«me
(
c⁄è˘
, "expúes", &
exp_∑øm
);

330 i‡(
exp_∑øm
 =
NULL
) {

331 
	`osù_c⁄è˘_∑øm_add
(
c⁄è˘
, 
	`osù_°rdup
("expires"), osip_strdup("0"));

335 } i‡(
jr
->
ªgi°øti⁄_°ï
 =
RS_MASQUERADINGPROCEEDING
) {

336 
osù_c⁄è˘_t
 *
c⁄è˘
;

338 
	`osù_mesßge_gë_c⁄è˘
(
ªg
, 0, &
c⁄è˘
);

340 i‡(
c⁄è˘
 !
NULL
) {

341 
osù_li°_ôî©‹_t
 
ô
;

342 
osù_gíîic_∑øm_t
 *
exp_∑øm
 = (osù_gíîic_∑øm_à*Ë
	`osù_li°_gë_fú°
(&
c⁄è˘
->
gí_∑øms
, &
ô
);

344 
exp_∑øm
 !
NULL
) {

345 i‡(
exp_∑øm
->
g«me
 !
NULL
 && 
	`osù_°rˇ£cmp
(exp_param->gname, "expires") == 0) {

346 
	`osù_li°_ôî©‹_ªmove
(&
ô
);

347 
	`osù_gíîic_∑øm_‰ì
(
exp_∑øm
);

351 
exp_∑øm
 = (
osù_gíîic_∑øm_t
 *Ë
	`osù_li°_gë_√xt
(&
ô
);

355 i‡(
exc⁄ãxt
->
eXé_å™•‹t
.
_é_upd©e_c⁄è˘
 !
NULL
)

356 
exc⁄ãxt
->
eXé_å™•‹t
.
	`_é_upd©e_c⁄è˘
”xc⁄ãxt, 
ªg
);

358 
jr
->
ªgi°øti⁄_°ï
 = 
RS_MASQUERADINGPROCEEDING
 + 1;

360 } i‡(
jr
->
ªgi°øti⁄_°ï
 == 0) {

361 i‡(
exc⁄ãxt
->
eXé_å™•‹t
.
_é_upd©e_c⁄è˘
 !
NULL
)

362 
exc⁄ãxt
->
eXé_å™•‹t
.
	`_é_upd©e_c⁄è˘
”xc⁄ãxt, 
ªg
);

365 i‡(
œ°_ª•⁄£
 !
NULL
) {

366 i‡(
œ°_ª•⁄£
->
°©us_code
 == 401 ||Üast_response->status_code == 407) {

367 
	`_eXosù_add_authítiˇti⁄_öf‹m©i⁄
(
exc⁄ãxt
, 
ªg
, 
œ°_ª•⁄£
);

370 
	`_eXosù_add_authítiˇti⁄_öf‹m©i⁄
(
exc⁄ãxt
, 
ªg
, 
NULL
);

372 
	`osù_mesßge_‰ì
(
œ°_ª•⁄£
);

376 i‡(
ªg
 =
NULL
) {

377 
i
 = 
	`_eXosù_gíî©ög_ªgi°î
(
exc⁄ãxt
, 
jr
, &
ªg
, jr->
r_a‹
, jr->
r_ªgi°ør
, jr->
r_c⁄è˘
, jr->
r_ªg_expúe
);

379 i‡(
i
 != 0)

380  
i
;

383 #i‡
	`deföed
(
HAVE_GMTIME_R
Ë|| deföed(
HAVE_GMTIME
)

385 i‡(
ªg
) {

386 i‡(
exc⁄ãxt
->
ªgi°î_wôh_d©e
)

387 
	`_eXosù_ªgi°î_£t_d©e
(
ªg
);

392 *
_ªg
 = 
ªg
;

393  
OSIP_SUCCESS
;

394 
	}
}

396 
	$eXosù_ªgi°î_buûd_öôül_ªgi°î_wôhqvÆue
(
eXosù_t
 *
exc⁄ãxt
, c⁄° *
‰om
, c⁄° *
¥oxy
, c⁄° *
c⁄è˘
, 
expúes
, c⁄° *
qvÆue
, 
osù_mesßge_t
 **
ªg
) {

397 
eXosù_ªg_t
 *
jr
 = 
NULL
;

398 
i
;

399 
œŒoˇãd
 = 0;

401 *
ªg
 = 
NULL
;

403 i‡(
‰om
 =
NULL
 || 
¥oxy
 == NULL)

404  
OSIP_BADPARAMETER
;

406 #ifde‡
REJECT_DOUBLE_REGISTRATION


409 
jr
 = 
exc⁄ãxt
->
j_ªg
; j∏!
NULL
; j∏jr->
√xt
) {

410 i‡(
	`°rcmp
(
jr
->
r_a‹
, 
‰om
Ë=0 && såcmp(jr->
r_ªgi°ør
, 
¥oxy
) == 0) {

411 
	`REMOVE_ELEMENT
(
exc⁄ãxt
->
j_ªg
, 
jr
);

412 
	`_eXosù_ªg_‰ì
(
exc⁄ãxt
, 
jr
);

413 
jr
 = 
NULL
;

420 i‡(
jr
 =
NULL
) {

422 
i
 = 
	`_eXosù_ªg_öô
(
exc⁄ãxt
, &
jr
, 
‰om
, 
¥oxy
, 
c⁄è˘
);

424 i‡(
i
 != 0) {

425 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] cannotÑegister\n"));

426  
i
;

429 
	`ADD_ELEMENT
(
exc⁄ãxt
->
j_ªg
, 
jr
);

430 
œŒoˇãd
 = 1;

434 
jr
->
r_ªg_≥riod
 = 
expúes
;

436 i‡(
jr
->
r_ªg_≥riod
 <= 0)

437 
jr
->
r_ªg_≥riod
 = 0;

439 i‡(
jr
->
r_ªg_≥riod
 < 30)

440 
jr
->
r_ªg_≥riod
 = 30;

442 
jr
->
r_ªg_expúe
 = jr->
r_ªg_≥riod
;

444 i‡(
qvÆue
)

445 
	`osù_°∫˝y
(
jr
->
r_qvÆue
, 
qvÆue
, (jr->r_qvalue));

447 i‡(
exc⁄ãxt
->
auto_masquîade_c⁄è˘
 > 0)

448 
jr
->
ªgi°øti⁄_°ï
 = 
RS_MASQUERADINGPROCEEDING
;

450 
i
 = 
	`_eXosù_ªgi°î_buûd_ªgi°î
(
exc⁄ãxt
, 
jr
, 
ªg
);

452 i‡(
i
 != 0) {

453 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] cannot build REGISTER\n"));

454 *
ªg
 = 
NULL
;

456 i‡(
œŒoˇãd
 == 1) {

457 
	`REMOVE_ELEMENT
(
exc⁄ãxt
->
j_ªg
, 
jr
);

458 
	`_eXosù_ªg_‰ì
(
exc⁄ãxt
, 
jr
);

461  
i
;

464  
jr
->
r_id
;

465 
	}
}

467 
	$eXosù_ªgi°î_buûd_öôül_ªgi°î
(
eXosù_t
 *
exc⁄ãxt
, c⁄° *
‰om
, c⁄° *
¥oxy
, c⁄° *
c⁄è˘
, 
expúes
, 
osù_mesßge_t
 **
ªg
) {

468  
	`eXosù_ªgi°î_buûd_öôül_ªgi°î_wôhqvÆue
(
exc⁄ãxt
, 
‰om
, 
¥oxy
, 
c⁄è˘
, 
expúes
, 
NULL
, 
ªg
);

469 
	}
}

471 
	$eXosù_ªgi°î_buûd_ªgi°î
(
eXosù_t
 *
exc⁄ãxt
, 
rid
, 
expúes
, 
osù_mesßge_t
 **
ªg
) {

472 
eXosù_ªg_t
 *
jr
;

473 
i
;

475 *
ªg
 = 
NULL
;

477 i‡(
rid
 <= 0)

478  
OSIP_BADPARAMETER
;

480 
jr
 = 
	`eXosù_ªg_föd
(
exc⁄ãxt
, 
rid
);

482 i‡(
jr
 =
NULL
)

483  
OSIP_NOTFOUND
;

485 
jr
->
r_ªg_≥riod
 = 
expúes
;

487 i‡(
jr
->
r_ªg_≥riod
 == 0) {

489 i‡(
jr
->
r_ªg_≥riod
 < 30)

490 
jr
->
r_ªg_≥riod
 = 30;

492 
jr
->
r_ªg_expúe
 = jr->
r_ªg_≥riod
;

494 i‡(
jr
->
r_œ°_å
 !
NULL
) {

495 i‡(
jr
->
r_œ°_å
->
°©e
 !
NICT_TERMINATED
 && jr->r_œ°_å->°©ê!
NICT_COMPLETED
) {

496  
OSIP_WRONG_STATE
;

501 
jr
->
r_œ°_dñëi⁄
 = 0;

503 
i
 = 
	`_eXosù_ªgi°î_buûd_ªgi°î
(
exc⁄ãxt
, 
jr
, 
ªg
);

505 i‡(
i
 != 0) {

506 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] cannot build REGISTER\n"));

507 *
ªg
 = 
NULL
;

508  
i
;

511  
OSIP_SUCCESS
;

512 
	}
}

514 
	$eXosù_ªgi°î_£nd_ªgi°î
(
eXosù_t
 *
exc⁄ãxt
, 
rid
, 
osù_mesßge_t
 *
ªg
) {

515 
osù_å™ß˘i⁄_t
 *
å™ß˘i⁄
;

516 
osù_evít_t
 *
sùevít
;

517 
eXosù_ªg_t
 *
jr
;

518 
i
;

520 i‡(
rid
 <= 0) {

521 
	`osù_mesßge_‰ì
(
ªg
);

522  
OSIP_BADPARAMETER
;

525 
jr
 = 
	`eXosù_ªg_föd
(
exc⁄ãxt
, 
rid
);

527 i‡(
jr
 =
NULL
) {

528 
	`osù_mesßge_‰ì
(
ªg
);

529  
OSIP_NOTFOUND
;

532 i‡(
jr
->
r_œ°_å
 !
NULL
) {

533 i‡(
jr
->
r_œ°_å
->
°©e
 !
NICT_TERMINATED
 && jr->r_œ°_å->°©ê!
NICT_COMPLETED
) {

534 
	`osù_mesßge_‰ì
(
ªg
);

535  
OSIP_WRONG_STATE
;

539 i‡(
ªg
 =
NULL
) {

540 
i
 = 
	`_eXosù_ªgi°î_buûd_ªgi°î
(
exc⁄ãxt
, 
jr
, &
ªg
);

542 i‡(
i
 != 0) {

543 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] cannot build REGISTER\n"));

544  
i
;

548 
i
 = 
	`_eXosù_å™ß˘i⁄_öô
(
exc⁄ãxt
, &
å™ß˘i⁄
, 
NICT
,Éxc⁄ãxt->
j_osù
, 
ªg
);

550 i‡(
i
 != 0) {

551 
	`osù_mesßge_‰ì
(
ªg
);

552  
i
;

555 
jr
->
r_œ°_å
 = 
å™ß˘i⁄
;

558 
sùevít
 = 
	`osù_√w_outgoög_sùmesßge
(
ªg
);

559 
sùevít
->
å™ß˘i⁄id
 = 
å™ß˘i⁄
->transactionid;

560 
	`osù_mesßge_f‹˚_upd©e
(
ªg
);

562 
	`osù_å™ß˘i⁄_add_evít
(
å™ß˘i⁄
, 
sùevít
);

563 
	`_eXosù_wakeup
(
exc⁄ãxt
);

564  
OSIP_SUCCESS
;

565 
	}
}

	@/home/unasaw/sip_project/libexosip2-5.3.0/src/eXsubscription_api.c

33 
	~"eXosù2.h
"

35 #i‚de‡
MINISIZE


37 
	$_eXosù_subs¸ùti⁄_å™ß˘i⁄_föd
(
eXosù_t
 *
exc⁄ãxt
, 
tid
, 
eXosù_subs¸ibe_t
 **
js
, 
eXosù_dülog_t
 **
jd
, 
osù_å™ß˘i⁄_t
 **
å
) {

38 *
js
 = 
exc⁄ãxt
->
j_subs¸ibes
; *j†!
NULL
; *j†(*js)->
√xt
) {

39 i‡((*
js
)->
s_öc_å
 !
NULL
 && (*js)->s_öc_å->
å™ß˘i⁄id
 =
tid
) {

40 *
å
 = (*
js
)->
s_öc_å
;

41 *
jd
 = (*
js
)->
s_dülogs
;

42  
OSIP_SUCCESS
;

45 i‡((*
js
)->
s_out_å
 !
NULL
 && (*js)->s_out_å->
å™ß˘i⁄id
 =
tid
) {

46 *
å
 = (*
js
)->
s_out_å
;

47 *
jd
 = (*
js
)->
s_dülogs
;

48  
OSIP_SUCCESS
;

51 *
jd
 = (*
js
)->
s_dülogs
; *jd !
NULL
; *jd = (*jd)->
√xt
) {

52 
osù_li°_ôî©‹_t
 
ô
;

53 
osù_å™ß˘i⁄_t
 *
å™ß˘i⁄
;

55 
å™ß˘i⁄
 = (
osù_å™ß˘i⁄_t
 *Ë
	`osù_li°_gë_fú°
((*
jd
)->
d_öc_ås
, &
ô
);

57 
å™ß˘i⁄
 !
OSIP_SUCCESS
) {

58 i‡(
å™ß˘i⁄
 !
NULL
 &&Åønß˘i⁄->
å™ß˘i⁄id
 =
tid
) {

59 *
å
 = 
å™ß˘i⁄
;

60  
OSIP_SUCCESS
;

63 
å™ß˘i⁄
 = (
osù_å™ß˘i⁄_t
 *Ë
	`osù_li°_gë_√xt
(&
ô
);

66 
å™ß˘i⁄
 = (
osù_å™ß˘i⁄_t
 *Ë
	`osù_li°_gë_fú°
((*
jd
)->
d_out_ås
, &
ô
);

68 
å™ß˘i⁄
 !
OSIP_SUCCESS
) {

69 i‡(
å™ß˘i⁄
 !
NULL
 &&Åønß˘i⁄->
å™ß˘i⁄id
 =
tid
) {

70 *
å
 = 
å™ß˘i⁄
;

71  
OSIP_SUCCESS
;

74 
å™ß˘i⁄
 = (
osù_å™ß˘i⁄_t
 *Ë
	`osù_li°_gë_√xt
(&
ô
);

79 *
jd
 = 
NULL
;

80 *
js
 = 
NULL
;

81  
OSIP_NOTFOUND
;

82 
	}
}

84 
	$eXosù_subs¸ùti⁄_ªmove
(
eXosù_t
 *
exc⁄ãxt
, 
did
) {

85 
eXosù_dülog_t
 *
jd
 = 
NULL
;

86 
eXosù_subs¸ibe_t
 *
js
 = 
NULL
;

88 i‡(
did
 <= 0)

89  
OSIP_BADPARAMETER
;

91 i‡(
did
 > 0) {

92 
	`_eXosù_subs¸ùti⁄_dülog_föd
(
exc⁄ãxt
, 
did
, &
js
, &
jd
);

95 i‡(
js
 =
NULL
) {

96 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip]Ço outgoing subscription here\n"));

97  
OSIP_NOTFOUND
;

100 
	`REMOVE_ELEMENT
(
exc⁄ãxt
->
j_subs¸ibes
, 
js
);

101 
	`_eXosù_subs¸ùti⁄_‰ì
(
exc⁄ãxt
, 
js
);

102  
OSIP_SUCCESS
;

103 
	}
}

105 
	$eXosù_subs¸ùti⁄_buûd_öôül_subs¸ibe
(
eXosù_t
 *
exc⁄ãxt
, 
osù_mesßge_t
 **
sub
, c⁄° *
to
, c⁄° *
‰om
, c⁄° *
rouã
, c⁄° *
_evít
, 
expúes
) {

106 
tmp
[10];

107 
i
;

108 
osù_to_t
 *
_to
 = 
NULL
;

110 *
sub
 = 
NULL
;

112 i‡(
to
 =
NULL
 || *to == '\0')

113  
OSIP_BADPARAMETER
;

115 i‡(
‰om
 =
NULL
 || *from == '\0')

116  
OSIP_BADPARAMETER
;

118 i‡(
_evít
 =
NULL
 || *_event == '\0')

119  
OSIP_BADPARAMETER
;

121 i‡(
rouã
 =
NULL
 || *route == '\0')

122 
rouã
 = 
NULL
;

124 
i
 = 
	`osù_to_öô
(&
_to
);

126 i‡(
i
 != 0)

127  
i
;

129 
i
 = 
	`osù_to_∑r£
(
_to
, 
to
);

131 i‡(
i
 != 0) {

132 
	`osù_to_‰ì
(
_to
);

133  
i
;

136 
i
 = 
	`_eXosù_gíî©ög_ªque°_out_of_dülog
(
exc⁄ãxt
, 
sub
, "SUBSCRIBE", 
to
, 
‰om
, 
rouã
);

137 
	`osù_to_‰ì
(
_to
);

139 i‡(
i
 != 0)

140  
i
;

142 
	`_eXosù_dülog_add_c⁄è˘
(
exc⁄ãxt
, *
sub
);

144 
	`¢¥ötf
(
tmp
, 10, "%i", 
expúes
);

145 
	`osù_mesßge_£t_expúes
(*
sub
, 
tmp
);

147 
	`osù_mesßge_£t_hódî
(*
sub
, "Evít", 
_evít
);

149  
OSIP_SUCCESS
;

150 
	}
}

152 
	$eXosù_subs¸ùti⁄_buûd_öôül_ª„r
(
eXosù_t
 *
exc⁄ãxt
, 
osù_mesßge_t
 **
ª„r
, c⁄° *
to
, c⁄° *
‰om
, c⁄° *
rouã
, c⁄° *
ª„r_to
) {

153 
i
;

154 
osù_to_t
 *
_to
 = 
NULL
;

156 *
ª„r
 = 
NULL
;

158 i‡(
to
 =
NULL
 || *to == '\0')

159  
OSIP_BADPARAMETER
;

161 i‡(
‰om
 =
NULL
 || *from == '\0')

162  
OSIP_BADPARAMETER
;

164 i‡(
ª„r_to
 =
NULL
 || *refer_to == '\0')

165  
OSIP_BADPARAMETER
;

167 i‡(
rouã
 =
NULL
 || *route == '\0')

168 
rouã
 = 
NULL
;

170 
i
 = 
	`osù_to_öô
(&
_to
);

172 i‡(
i
 != 0)

173  
i
;

175 
i
 = 
	`osù_to_∑r£
(
_to
, 
to
);

177 i‡(
i
 != 0) {

178 
	`osù_to_‰ì
(
_to
);

179  
i
;

182 
i
 = 
	`_eXosù_gíî©ög_ªque°_out_of_dülog
(
exc⁄ãxt
, 
ª„r
, "REFER", 
to
, 
‰om
, 
rouã
);

183 
	`osù_to_‰ì
(
_to
);

185 i‡(
i
 != 0)

186  
i
;

188 
	`_eXosù_dülog_add_c⁄è˘
(
exc⁄ãxt
, *
ª„r
);

190 
	`osù_mesßge_£t_hódî
(*
ª„r
, "Re„r-to", 
ª„r_to
);

192  
OSIP_SUCCESS
;

193 
	}
}

195 
	$eXosù_subs¸ùti⁄_£nd_öôül_ªque°
(
eXosù_t
 *
exc⁄ãxt
, 
osù_mesßge_t
 *
subs¸ibe
) {

196 
eXosù_subs¸ibe_t
 *
js
 = 
NULL
;

197 
osù_å™ß˘i⁄_t
 *
å™ß˘i⁄
;

198 
osù_evít_t
 *
sùevít
;

199 
i
;

201 
i
 = 
	`_eXosù_subs¸ùti⁄_öô
(
exc⁄ãxt
, &
js
);

203 i‡(
i
 != 0) {

204 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] cannot subscribe."));

205 
	`osù_mesßge_‰ì
(
subs¸ibe
);

206  
i
;

209 
i
 = 
	`_eXosù_å™ß˘i⁄_öô
(
exc⁄ãxt
, &
å™ß˘i⁄
, 
NICT
,Éxc⁄ãxt->
j_osù
, 
subs¸ibe
);

211 i‡(
i
 != 0) {

212 
	`_eXosù_subs¸ùti⁄_‰ì
(
exc⁄ãxt
, 
js
);

213 
	`osù_mesßge_‰ì
(
subs¸ibe
);

214  
i
;

217 
js
->
s_ªg_≥riod
 = 3600;

218 
	`_eXosù_subs¸ùti⁄_£t_ª‰esh_öãrvÆ
(
js
, 
subs¸ibe
);

219 
js
->
s_out_å
 = 
å™ß˘i⁄
;

221 
sùevít
 = 
	`osù_√w_outgoög_sùmesßge
(
subs¸ibe
);

222 
sùevít
->
å™ß˘i⁄id
 = 
å™ß˘i⁄
->transactionid;

224 
	`osù_å™ß˘i⁄_£t_ª£rved5
(
å™ß˘i⁄
, 
js
);

225 
	`osù_å™ß˘i⁄_add_evít
(
å™ß˘i⁄
, 
sùevít
);

227 
	`ADD_ELEMENT
(
exc⁄ãxt
->
j_subs¸ibes
, 
js
);

228 
	`_eXosù_upd©e
(
exc⁄ãxt
);

229 
	`_eXosù_wakeup
(
exc⁄ãxt
);

230  
js
->
s_id
;

231 
	}
}

233 
	$eXosù_subs¸ùti⁄_buûd_ª‰esh_ªque°
(
eXosù_t
 *
exc⁄ãxt
, 
did
, 
osù_mesßge_t
 **
sub
) {

234 
eXosù_dülog_t
 *
jd
 = 
NULL
;

235 
eXosù_subs¸ibe_t
 *
js
 = 
NULL
;

237 
osù_å™ß˘i⁄_t
 *
å™ß˘i⁄
;

238 
i
;

240 *
sub
 = 
NULL
;

242 i‡(
did
 <= 0)

243  
OSIP_BADPARAMETER
;

245 
	`_eXosù_subs¸ùti⁄_dülog_föd
(
exc⁄ãxt
, 
did
, &
js
, &
jd
);

247 i‡(
jd
 =
NULL
) {

248 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip]Ço subscribe/refer here\n"));

249  
OSIP_NOTFOUND
;

252 
å™ß˘i⁄
 = 
	`_eXosù_föd_œ°_out_subs¸ibe
(
js
, 
jd
);

254 i‡(
å™ß˘i⁄
 !
NULL
) {

255 i‡(
å™ß˘i⁄
->
°©e
 !
NICT_TERMINATED
 &&Åønß˘i⁄->°©ê!
NIST_TERMINATED
 &&Åønß˘i⁄->°©ê!
NICT_COMPLETED
 &&Åønß˘i⁄->°©ê!
NIST_COMPLETED
) {

256  
OSIP_WRONG_STATE
;

260 i‡(
å™ß˘i⁄
 =
NULL
 ||Åønß˘i⁄->
‹ig_ªque°
 =NULL ||Åønß˘i⁄->‹ig_ªque°->
c£q
 =NULL ||Åønß˘i⁄->‹ig_ªque°->c£q->
mëhod
 == NULL) {

261 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_BUG
, 
NULL
, "[eXosip] isÅhisá SUBSCRIBE or REFER\n"));

262  
OSIP_UNDEFINED_ERROR
;

265 
i
 = 
	`_eXosù_buûd_ªque°_wôhö_dülog
(
exc⁄ãxt
, 
sub
, 
å™ß˘i⁄
->
‹ig_ªque°
->
c£q
->
mëhod
, 
jd
->
d_dülog
);

267 i‡(
i
 != 0)

268  
i
;

271 
pos
 = 0;

272 
osù_hódî_t
 *
_hódî
 = 
NULL
;

273 
osù_ˇŒ_öfo_t
 *
_ˇŒ_öfo_hódî
 = 
NULL
;

275 
pos
 = 
	`osù_mesßge_gë_suµ‹ãd
(
å™ß˘i⁄
->
‹ig_ªque°
,Öos, &
_hódî
);

277 
pos
 >0 && 
_hódî
 !
NULL
) {

278 
osù_hódî_t
 *
_hódî2
;

280 
i
 = 
	`osù_hódî_˛⁄e
(
_hódî
, &
_hódî2
);

282 i‡(
i
 != 0) {

283 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip]Érror in Supported header\n"));

287 
	`osù_li°_add
(&(*
sub
)->
hódîs
, 
_hódî2
, -1);

288 
_hódî
 = 
NULL
;

289 
pos
++;

290 
pos
 = 
	`osù_mesßge_gë_suµ‹ãd
(
å™ß˘i⁄
->
‹ig_ªque°
,Öos, &
_hódî
);

293 
pos
 = 0;

294 
pos
 = 
	`osù_mesßge_gë_ˇŒ_öfo
(
å™ß˘i⁄
->
‹ig_ªque°
,Öos, &
_ˇŒ_öfo_hódî
);

296 
pos
 >0 && 
_ˇŒ_öfo_hódî
 !
NULL
) {

297 
osù_ˇŒ_öfo_t
 *
_hódî2
;

299 
i
 = 
	`osù_ˇŒ_öfo_˛⁄e
(
_ˇŒ_öfo_hódî
, &
_hódî2
);

301 i‡(
i
 != 0) {

302 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip]Érror in Call-Info header\n"));

306 
	`osù_li°_add
(&(*
sub
)->
ˇŒ_öfos
, 
_hódî2
, -1);

307 
_ˇŒ_öfo_hódî
 = 
NULL
;

308 
pos
++;

309 
pos
 = 
	`osù_mesßge_gë_ˇŒ_öfo
(
å™ß˘i⁄
->
‹ig_ªque°
,Öos, &
_ˇŒ_öfo_hódî
);

313 
	`_eXosù_add_authítiˇti⁄_öf‹m©i⁄
(
exc⁄ãxt
, *
sub
, 
NULL
);

315  
OSIP_SUCCESS
;

316 
	}
}

318 
	$eXosù_subs¸ùti⁄_£nd_ª‰esh_ªque°
(
eXosù_t
 *
exc⁄ãxt
, 
did
, 
osù_mesßge_t
 *
sub
) {

319 
eXosù_dülog_t
 *
jd
 = 
NULL
;

320 
eXosù_subs¸ibe_t
 *
js
 = 
NULL
;

322 
osù_å™ß˘i⁄_t
 *
å™ß˘i⁄
;

323 
osù_evít_t
 *
sùevít
;

324 
i
;

326 i‡(
did
 <= 0)

327  
OSIP_BADPARAMETER
;

329 i‡(
did
 > 0) {

330 
	`_eXosù_subs¸ùti⁄_dülog_föd
(
exc⁄ãxt
, 
did
, &
js
, &
jd
);

333 i‡(
jd
 =
NULL
) {

334 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip]Ço subscribe here\n"));

335 
	`osù_mesßge_‰ì
(
sub
);

336  
OSIP_NOTFOUND
;

339 
å™ß˘i⁄
 = 
NULL
;

340 
å™ß˘i⁄
 = 
	`_eXosù_föd_œ°_out_subs¸ibe
(
js
, 
jd
);

342 i‡(
å™ß˘i⁄
 !
NULL
) {

343 i‡(
å™ß˘i⁄
->
°©e
 !
NICT_TERMINATED
 &&Åønß˘i⁄->°©ê!
NIST_TERMINATED
 &&Åønß˘i⁄->°©ê!
NICT_COMPLETED
 &&Åønß˘i⁄->°©ê!
NIST_COMPLETED
) {

344 
	`osù_mesßge_‰ì
(
sub
);

345  
OSIP_WRONG_STATE
;

348 
å™ß˘i⁄
 = 
NULL
;

351 
å™ß˘i⁄
 = 
NULL
;

352 
i
 = 
	`_eXosù_å™ß˘i⁄_öô
(
exc⁄ãxt
, &
å™ß˘i⁄
, 
NICT
,Éxc⁄ãxt->
j_osù
, 
sub
);

354 i‡(
i
 != 0) {

355 
	`osù_mesßge_‰ì
(
sub
);

356  
i
;

359 
js
->
s_ªg_≥riod
 = 3600;

360 
	`_eXosù_subs¸ùti⁄_£t_ª‰esh_öãrvÆ
(
js
, 
sub
);

361 
	`osù_li°_add
(
jd
->
d_out_ås
, 
å™ß˘i⁄
, 0);

363 
sùevít
 = 
	`osù_√w_outgoög_sùmesßge
(
sub
);

364 
sùevít
->
å™ß˘i⁄id
 = 
å™ß˘i⁄
->transactionid;

366 
	`osù_å™ß˘i⁄_£t_ª£rved5
(
å™ß˘i⁄
, 
js
);

367 
	`osù_å™ß˘i⁄_£t_ª£rved3
(
å™ß˘i⁄
, 
jd
);

369 
	`osù_å™ß˘i⁄_add_evít
(
å™ß˘i⁄
, 
sùevít
);

370 
	`_eXosù_wakeup
(
exc⁄ãxt
);

371  
OSIP_SUCCESS
;

372 
	}
}

374 
	$_eXosù_subs¸ùti⁄_autom©ic_ª‰esh
(
eXosù_t
 *
exc⁄ãxt
, 
eXosù_subs¸ibe_t
 *
js
, 
eXosù_dülog_t
 *
jd
, 
osù_å™ß˘i⁄_t
 *
out_å
) {

375 
osù_mesßge_t
 *
sub
 = 
NULL
;

376 
osù_hódî_t
 *
expúes
;

377 
i
;

379 i‡(
js
 =
NULL
 || 
jd
 =NULL || 
out_å
 =NULL || out_å->
‹ig_ªque°
 == NULL)

380  
OSIP_BADPARAMETER
;

382 
i
 = 
	`eXosù_subs¸ùti⁄_buûd_ª‰esh_ªque°
(
exc⁄ãxt
, 
jd
->
d_id
, &
sub
);

384 i‡(
i
 != 0)

385  
i
;

387 
i
 = 
	`osù_mesßge_gë_expúes
(
out_å
->
‹ig_ªque°
, 0, &
expúes
);

389 i‡(
expúes
 !
NULL
 &&Éxpúes->
hvÆue
 != NULL) {

390 
	`osù_mesßge_£t_expúes
(
sub
, 
expúes
->
hvÆue
);

394 
pos
 = 0;

395 
osù_ac˚±_t
 *
_ac˚±
 = 
NULL
;

397 
i
 = 
	`osù_mesßge_gë_ac˚±
(
out_å
->
‹ig_ªque°
, 
pos
, &
_ac˚±
);

399 
i
 >0 && 
_ac˚±
 !
NULL
) {

400 
osù_ac˚±_t
 *
_ac˚±2
;

402 
i
 = 
	`osù_ac˚±_˛⁄e
(
_ac˚±
, &
_ac˚±2
);

404 i‡(
i
 != 0) {

405 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip]Érror in Accept header\n"));

409 
	`osù_li°_add
(&
sub
->
ac˚±s
, 
_ac˚±2
, -1);

410 
_ac˚±
 = 
NULL
;

411 
pos
++;

412 
i
 = 
	`osù_mesßge_gë_ac˚±
(
out_å
->
‹ig_ªque°
, 
pos
, &
_ac˚±
);

417 
pos
 = 0;

418 
osù_hódî_t
 *
_evít
 = 
NULL
;

420 
pos
 = 
	`osù_mesßge_hódî_gë_by«me
(
out_å
->
‹ig_ªque°
, "Evít", 0, &
_evít
);

422 
pos
 >0 && 
_evít
 !
NULL
) {

423 
osù_hódî_t
 *
_evít2
;

425 
i
 = 
	`osù_hódî_˛⁄e
(
_evít
, &
_evít2
);

427 i‡(
i
 != 0) {

428 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip]Érror in Event header\n"));

432 
	`osù_li°_add
(&
sub
->
hódîs
, 
_evít2
, -1);

433 
_evít
 = 
NULL
;

434 
pos
++;

435 
pos
 = 
	`osù_mesßge_hódî_gë_by«me
(
out_å
->
‹ig_ªque°
, "Evít",Öos, &
_evít
);

439 
i
 = 
	`eXosù_subs¸ùti⁄_£nd_ª‰esh_ªque°
(
exc⁄ãxt
, 
jd
->
d_id
, 
sub
);

440  
i
;

441 
	}
}

443 
	$_eXosù_subs¸ùti⁄_£nd_ªque°_wôh_¸edítül
(
eXosù_t
 *
exc⁄ãxt
, 
eXosù_subs¸ibe_t
 *
js
, 
eXosù_dülog_t
 *
jd
, 
osù_å™ß˘i⁄_t
 *
out_å
) {

444 
osù_å™ß˘i⁄_t
 *
å
 = 
NULL
;

445 
osù_mesßge_t
 *
msg
 = 
NULL
;

446 
osù_evít_t
 *
sùevít
;

448 
c£q
;

449 
osù_vü_t
 *
vü
;

450 
i
;

452 i‡(
js
 =
NULL
)

453  
OSIP_BADPARAMETER
;

455 i‡(
jd
 !
NULL
) {

456 i‡(
jd
->
d_out_ås
 =
NULL
)

457  
OSIP_BADPARAMETER
;

460 i‡(
out_å
 =
NULL
) {

461 
out_å
 = 
	`_eXosù_föd_œ°_out_subs¸ibe
(
js
, 
jd
);

464 i‡(
out_å
 =
NULL
 || out_å->
‹ig_ªque°
 =NULL || out_å->
œ°_ª•⁄£
 == NULL)

465  
OSIP_NOTFOUND
;

467 
i
 = 
	`osù_mesßge_˛⁄e
(
out_å
->
‹ig_ªque°
, &
msg
);

469 i‡(
i
 != 0) {

470 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] cannot clone msg foráuthentication\n"));

471  
i
;

475 
osù_gíîic_∑øm_t
 *
èg
 = 
NULL
;

477 
	`osù_to_gë_èg
(
msg
->
to
, &
èg
);

479 i‡(
NULL
 =
èg
 && 
jd
 !NULL && jd->
d_dülog
 !NULL && jd->d_dülog->
ªmŸe_èg
 != NULL) {

480 
	`osù_to_£t_èg
(
msg
->
to
, 
	`osù_°rdup
(
jd
->
d_dülog
->
ªmŸe_èg
));

484 
vü
 = (
osù_vü_t
 *Ë
	`osù_li°_gë
(&
msg
->
vüs
, 0);

486 i‡(
vü
 =
NULL
 || 
msg
->
c£q
 =NULL || msg->c£q->
numbî
 == NULL) {

487 
	`osù_mesßge_‰ì
(
msg
);

488 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] missing via or cseq header\n"));

489  
OSIP_SYNTAXERROR
;

493 
c£q
 = 
	`©oi
(
msg
->c£q->
numbî
);

494 
	`osù_‰ì
(
msg
->
c£q
->
numbî
);

495 
msg
->
c£q
->
numbî
 = 
	`_eXosù_°rdup_¥ötf
("%i", cseq + 1);

497 i‡(
msg
->
c£q
->
numbî
 =
NULL
) {

498 
	`osù_mesßge_‰ì
(
msg
);

499  
OSIP_NOMEM
;

502 i‡(
jd
 !
NULL
 && jd->
d_dülog
 != NULL) {

503 
jd
->
d_dülog
->
loˇl_c£q
++;

506 
i
 = 
	`_eXosù_upd©e_t›_vü
(
msg
);

508 i‡(
i
 != 0) {

509 
	`osù_mesßge_‰ì
(
msg
);

510  
i
;

513 
	`osù_li°_•ecül_‰ì
(&
msg
->
auth‹iz©i⁄s
, ((*)(*)Ë& 
osù_auth‹iz©i⁄_‰ì
);

514 
	`osù_li°_•ecül_‰ì
(&
msg
->
¥oxy_auth‹iz©i⁄s
, ((*)(*)Ë& 
osù_¥oxy_auth‹iz©i⁄_‰ì
);

516 i‡(
out_å
->
œ°_ª•⁄£
->
°©us_code
 == 401 || out_tr->last_response->status_code == 407) {

517 
	`_eXosù_add_authítiˇti⁄_öf‹m©i⁄
(
exc⁄ãxt
, 
msg
, 
out_å
->
œ°_ª•⁄£
);

520 
	`_eXosù_add_authítiˇti⁄_öf‹m©i⁄
(
exc⁄ãxt
, 
msg
, 
NULL
);

522 i‡(
out_å
 !
NULL
 && out_å->
œ°_ª•⁄£
 !NULL && out_å->œ°_ª•⁄£->
°©us_code
 == 423) {

524 
osù_hódî_t
 *
exp
;

525 
osù_hódî_t
 *
mö_exp
;

527 
	`osù_mesßge_hódî_gë_by«me
(
msg
, "expúes", 0, &
exp
);

528 
	`osù_mesßge_hódî_gë_by«me
(
out_å
->
œ°_ª•⁄£
, "mö-expúes", 0, &
mö_exp
);

530 i‡(
exp
 !
NULL
 &&Éxp->
hvÆue
 !NULL && 
mö_exp
 != NULL && min_exp->hvalue != NULL) {

531 
	`osù_‰ì
(
exp
->
hvÆue
);

532 
exp
->
hvÆue
 = 
	`osù_°rdup
(
mö_exp
->hvalue);

535 
	`osù_mesßge_‰ì
(
msg
);

536 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] missing Min-Expires or Expires in PUBLISH\n"));

537  
OSIP_SYNTAXERROR
;

541 
	`osù_mesßge_f‹˚_upd©e
(
msg
);

543 
i
 = 
	`_eXosù_å™ß˘i⁄_öô
(
exc⁄ãxt
, &
å
, 
NICT
,Éxc⁄ãxt->
j_osù
, 
msg
);

545 i‡(
i
 != 0) {

546 
	`osù_mesßge_‰ì
(
msg
);

547  
i
;

550 i‡(
out_å
 =
js
->
s_out_å
) {

552 
	`osù_li°_add
(&
exc⁄ãxt
->
j_å™ß˘i⁄s
, 
js
->
s_out_å
, 0);

553 
js
->
s_out_å
 = 
å
;

557 
	`osù_li°_add
(
jd
->
d_out_ås
, 
å
, 0);

560 
sùevít
 = 
	`osù_√w_outgoög_sùmesßge
(
msg
);

562 
	`osù_å™ß˘i⁄_£t_ª£rved5
(
å
, 
js
);

563 
	`osù_å™ß˘i⁄_£t_ª£rved3
(
å
, 
jd
);

565 
	`osù_å™ß˘i⁄_add_evít
(
å
, 
sùevít
);

567 
	`_eXosù_upd©e
(
exc⁄ãxt
);

568 
	`_eXosù_wakeup
(
exc⁄ãxt
);

569  
OSIP_SUCCESS
;

570 
	}
}

	@/home/unasaw/sip_project/libexosip2-5.3.0/src/eXtl_dtls.c

33 
	~"eXosù2.h
"

34 
	~"eXå™•‹t.h
"

36 #i‡!
deföed
(
HAVE_INET_NTOP
)

37 
	~"öë_¡›.h
"

40 #ifde‡
HAVE_SYS_STAT_H


41 
	~<sys/°©.h
>

44 #ifde‡
HAVE_MSTCPIP_H


45 
	~<M°˝ù.h
>

48 #ifde‡
HAVE_FCNTL_H


49 
	~<f˙é.h
>

52 #ifde‡
HAVE_WINCRYPT_H


53 
	~<wö¸y±.h
>

56 #i‡!
deföed
(
_WIN32_WCE
)

57 
	~<î∫o.h
>

60 #i‡
deföed
(
HAVE_NETINET_TCP_H
)

61 
	~<√töë/t˝.h
>

64 #ifde‡
HAVE_UNISTD_H


65 
	~<uni°d.h
>

68 #i‡
deföed
(
HAVE_WINSOCK2_H
)

69 
	#ex_î∫o
 
	`WSAGëLa°Eº‹
()

	)

70 
	#is_wouldblock_îr‹
(
r
Ë(‘Ë=
WSAEINTR
 || (rË=
WSAEWOULDBLOCK
)

	)

71 
	#is_c⁄ƒe£t_îr‹
(
r
Ë(‘Ë=
WSAECONNRESET
 || (rË=
WSAECONNABORTED
 || (rË=
WSAETIMEDOUT
 || (rË=
WSAENETRESET
 || (rË=
WSAENOTCONN
)

	)

73 
	#ex_î∫o
 
î∫o


	)

75 #i‚de‡
is_wouldblock_îr‹


76 
	#is_wouldblock_îr‹
(
r
Ë(‘Ë=
EINTR
 || (rË=
EWOULDBLOCK
 || (rË=
EAGAIN
)

	)

77 
	#is_c⁄ƒe£t_îr‹
(
r
Ë(‘Ë=
ECONNRESET
 || (rË=
ECONNABORTED
 || (rË=
ETIMEDOUT
 || (rË=
ENETRESET
 || (rË=
ENOTCONN
)

	)

80 #ifde‡
HAVE_OPENSSL_SSL_H


82 
	~<›ís¶/s¶.h
>

84 #i‡!(
OPENSSL_VERSION_NUMBER
 < 0x00908000L)

86 
	#SPROTO_TLS
 500

	)

87 
	#SPROTO_DTLS
 501

	)

88 
	~<›ís¶/s¶.h
>

89 
	~<›ís¶/îr.h
>

90 
	~<›ís¶/≥m.h
>

91 
	~<›ís¶/x509.h
>

92 
	~<›ís¶/ønd.h
>

94 
	#SSLDEBUG
 1

	)

96 
	#PASSWORD
 "∑ssw‹d"

	)

97 
	#CLIENT_KEYFILE
 "ckey.≥m"

	)

98 
	#CLIENT_CERTFILE
 "c.≥m"

	)

99 
	#SERVER_KEYFILE
 "skey.≥m"

	)

100 
	#SERVER_CERTFILE
 "s.≥m"

	)

101 
	#CA_LIST
 "ˇ˚π.≥m"

	)

102 
	#RANDOM
 "øndom.≥m"

	)

103 
	#DHFILE
 "dh1024.≥m"

	)

105 #i‡
OPENSSL_VERSION_NUMBER
 < 0x10100000L || 
deföed
(
LIBRESSL_VERSION_NUMBER
)

107 
	$SSL_£t0_rbio
(
SSL
 *
s
, 
BIO
 *
rbio
) {

108 
	`BIO_‰ì_Æl
(
s
->
rbio
);

109 
s
->
rbio
 =Ñbio;

110 
	}
}

114 
SSL_CTX
 *
öôülize_˛õ¡_˘x
(
eXosù_t
 *
exc⁄ãxt
, 
eXosù_és_˘x_t
 *
˛õ¡_˘x
, 
å™•‹t
);

115 
SSL_CTX
 *
öôülize_£rvî_˘x
(
eXosù_t
 *
exc⁄ãxt
, 
eXosù_és_˘x_t
 *
§v_˘x
, 
å™•‹t
);

118 
	s_dés_°ªam
 {

119 
	mªmŸe_ù
[65];

120 
	mªmŸe_p‹t
;

121 
SSL
 *
	ms¶_c⁄n
;

122 
	ms¶_°©e
;

123 
	ms¶_ty≥
;

126 
	seXédés
 {

127 
eXosù_és_˘x_t
 
	meXosù_dés_˘x_∑øms
;

129 
	mdés_sockë
;

130 
sockaddr_°‹age
 
	mai_addr
;

132 
SSL_CTX
 *
	m£rvî_˘x
;

133 
SSL_CTX
 *
	m˛õ¡_˘x
;

134 
_dés_°ªam
 
	msockë_èb
[
EXOSIP_MAX_SOCKETS
];

137 
	$dés_é_öô
(
eXosù_t
 *
exc⁄ãxt
) {

138 
eXédés
 *
ª£rved
 = (eXédé†*Ë
	`osù_mÆloc
((eXtldtls));

140 i‡(
ª£rved
 =
NULL
)

141  
OSIP_NOMEM
;

143 
ª£rved
->
dés_sockë
 = 0;

144 
ª£rved
->
£rvî_˘x
 = 
NULL
;

145 
ª£rved
->
˛õ¡_˘x
 = 
NULL
;

146 
	`mem£t
(&
ª£rved
->
ai_addr
, 0, (
sockaddr_°‹age
));

147 
	`mem£t
(&
ª£rved
->
sockë_èb
, 0, (
_dés_°ªam
Ë* 
EXOSIP_MAX_SOCKETS
);

149 
	`mem£t
(&
ª£rved
->
eXosù_dés_˘x_∑øms
, 0, (
eXosù_és_˘x_t
));

152 
	`osù_°∫˝y
(
ª£rved
->
eXosù_dés_˘x_∑øms
.
˛õ¡
.
¥iv_key
, 
CLIENT_KEYFILE
, (reserved->eXosip_dtls_ctx_params.client.priv_key) - 1);

153 
	`osù_°∫˝y
(
ª£rved
->
eXosù_dés_˘x_∑øms
.
˛õ¡
.
¥iv_key
, 
CLIENT_CERTFILE
, (reserved->eXosip_dtls_ctx_params.client.priv_key) - 1);

154 
	`osù_°∫˝y
(
ª£rved
->
eXosù_dés_˘x_∑øms
.
˛õ¡
.
¥iv_key_pw
, 
PASSWORD
, (reserved->eXosip_dtls_ctx_params.client.priv_key_pw) - 1);

156 
	`osù_°∫˝y
(
ª£rved
->
eXosù_dés_˘x_∑øms
.
£rvî
.
¥iv_key
, 
SERVER_KEYFILE
, (reserved->eXosip_dtls_ctx_params.server.priv_key) - 1);

157 
	`osù_°∫˝y
(
ª£rved
->
eXosù_dés_˘x_∑øms
.
£rvî
.
¥iv_key
, 
SERVER_CERTFILE
, (reserved->eXosip_dtls_ctx_params.server.priv_key) - 1);

158 
	`osù_°∫˝y
(
ª£rved
->
eXosù_dés_˘x_∑øms
.
£rvî
.
¥iv_key_pw
, 
PASSWORD
, (reserved->eXosip_dtls_ctx_params.server.priv_key_pw) - 1);

160 
exc⁄ãxt
->
eXédés_ª£rved
 = 
ª£rved
;

161  
OSIP_SUCCESS
;

162 
	}
}

164 
	$_dés_¥öt_s¶_îr‹
(
îr
) {

165 
îr
) {

166 
SSL_ERROR_NONE
:

167 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] [DTLS] SSL ERROR NONE - OK\n"));

170 
SSL_ERROR_ZERO_RETURN
:

171 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] [DTLS] SSL ERROR ZERO RETURN - SHUTDOWN\n"));

174 
SSL_ERROR_WANT_READ
:

175 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] [DTLS] SSL wantÑead\n"));

178 
SSL_ERROR_WANT_WRITE
:

179 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] [DTLS] SSL want write\n"));

182 
SSL_ERROR_SSL
:

183 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] [DTLS] SSL ERROR\n"));

186 
SSL_ERROR_SYSCALL
:

187 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] [DTLS] SSL ERROR SYSCALL\n"));

191 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] [DTLS] SSLÖroblem\n"));

194  
OSIP_SUCCESS
;

195 
	}
}

197 
	$shutdown_‰ì_£rvî_dés
(
eXosù_t
 *
exc⁄ãxt
, 
pos
) {

198 
eXédés
 *
ª£rved
 = (eXédé†*Ë
exc⁄ãxt
->
eXédés_ª£rved
;

199 
i
, 
îr
;

201 i‡(
ª£rved
->
sockë_èb
[
pos
].
s¶_ty≥
 == 1) {

202 i‡(
ª£rved
->
sockë_èb
[
pos
].
s¶_c⁄n
 !
NULL
) {

203 #ifde‡
SSLDEBUG


204 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO3
, 
NULL
, "[eXosip] [DTLS] DTLS-UDP server SSL_shutdown\n"));

207 
i
 = 
	`SSL_shutdown
(
ª£rved
->
sockë_èb
[
pos
].
s¶_c⁄n
);

209 i‡(
i
 <= 0) {

210 
îr
 = 
	`SSL_gë_îr‹
(
ª£rved
->
sockë_èb
[
pos
].
s¶_c⁄n
, 
i
);

211 
	`_dés_¥öt_s¶_îr‹
(
îr
);

212 #ifde‡
SSLDEBUG


214 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] [DTLS] DTLS-UDP server shutdown <= 0\n"));

218 #ifde‡
SSLDEBUG


219 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO3
, 
NULL
, "[eXosip] [DTLS] DTLS-UDP server shutdown > 0\n"));

223 
	`SSL_‰ì
(
ª£rved
->
sockë_èb
[
pos
].
s¶_c⁄n
);

227 i‡(
ª£rved
->
sockë_èb
[
pos
].
s¶_˘x
 !
NULL
)

228 
	`SSL_CTX_‰ì
(
ª£rved
->
sockë_èb
[
pos
].
s¶_˘x
);

232 
	`mem£t
(&(
ª£rved
->
sockë_èb
[
pos
]), 0, (
_dés_°ªam
));

234  
OSIP_SUCCESS
;

237 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] [DTLS] DTLS-UDP server shutdown: invalid SSL object\n"));

243 
	}
}

245 
	$shutdown_‰ì_˛õ¡_dés
(
eXosù_t
 *
exc⁄ãxt
, 
pos
) {

246 
eXédés
 *
ª£rved
 = (eXédé†*Ë
exc⁄ãxt
->
eXédés_ª£rved
;

247 
i
, 
îr
;

248 
BIO
 *
rbio
;

250 
addröfo
 *addrinfo;

251 
__eXosù_sockaddr
 
addr
;

253 i‡(
ª£rved
->
sockë_èb
[
pos
].
s¶_ty≥
 == 2) {

254 i‡(
ª£rved
->
sockë_èb
[
pos
].
s¶_c⁄n
 !
NULL
) {

255 
i
 = 
	`_eXosù_gë_addröfo
(
exc⁄ãxt
, &
addröfo
, 
ª£rved
->
sockë_èb
[
pos
].
ªmŸe_ù
,Ñe£rved->sockë_èb[pos].
ªmŸe_p‹t
, 
IPPROTO_UDP
);

257 i‡(
i
 != 0) {

261 
	`mem˝y
(&
addr
, 
addröfo
->
ai_addr
,áddröfo->
ai_addæí
);

262 
	`_eXosù_‰ìaddröfo
(
addröfo
);

264 
rbio
 = 
	`BIO_√w_dgøm
(
ª£rved
->
dés_sockë
, 
BIO_NOCLOSE
);

266 
	`BIO_˘æ
(
rbio
, 
BIO_CTRL_DGRAM_SET_PEER
, 0, (*Ë&
addr
);

268 
	`SSL_£t0_rbio
(
ª£rved
->
sockë_èb
[
pos
].
s¶_c⁄n
, 
rbio
);

270 
i
 = 
	`SSL_shutdown
(
ª£rved
->
sockë_èb
[
pos
].
s¶_c⁄n
);

272 i‡(
i
 <= 0) {

273 
îr
 = 
	`SSL_gë_îr‹
(
ª£rved
->
sockë_èb
[
pos
].
s¶_c⁄n
, 
i
);

274 #ifde‡
SSLDEBUG


276 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosù] [DTLS] DTLS-UDP clõ¡ shutdow¿îr‹ [%d] <0\n", 
i
));

279 
	`_dés_¥öt_s¶_îr‹
(
îr
);

282 #ifde‡
SSLDEBUG


283 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO3
, 
NULL
, "[eXosip] [DTLS] DTLS-UDP client shutdown > 0\n"));

287 
	`SSL_‰ì
(
ª£rved
->
sockë_èb
[
pos
].
s¶_c⁄n
);

291 i‡(
ª£rved
->
sockë_èb
[
pos
].
s¶_˘x
 !
NULL
)

292 
	`SSL_CTX_‰ì
(
ª£rved
->
sockë_èb
[
pos
].
s¶_˘x
);

296 
	`mem£t
(&(
ª£rved
->
sockë_èb
[
pos
]), 0, (
_dés_°ªam
));

298  
OSIP_SUCCESS
;

301 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] [DTLS] DTLS-UDP client shutdown: invalid SSL object\n"));

307 
	}
}

309 
	$dés_é_‰ì
(
eXosù_t
 *
exc⁄ãxt
) {

310 
eXédés
 *
ª£rved
 = (eXédé†*Ë
exc⁄ãxt
->
eXédés_ª£rved
;

311 
pos
;

313 i‡(
ª£rved
 =
NULL
)

314  
OSIP_SUCCESS
;

316 i‡(
ª£rved
->
£rvî_˘x
 !
NULL
)

317 
	`SSL_CTX_‰ì
(
ª£rved
->
£rvî_˘x
);

319 i‡(
ª£rved
->
˛õ¡_˘x
 !
NULL
)

320 
	`SSL_CTX_‰ì
(
ª£rved
->
˛õ¡_˘x
);

322 
pos
 = 0;Öo†< 
EXOSIP_MAX_SOCKETS
;Öos++) {

323 i‡(
ª£rved
->
sockë_èb
[
pos
].
s¶_c⁄n
 !
NULL
) {

324 
	`shutdown_‰ì_˛õ¡_dés
(
exc⁄ãxt
, 
pos
);

325 
	`shutdown_‰ì_£rvî_dés
(
exc⁄ãxt
, 
pos
);

329 #i‡
OPENSSL_VERSION_NUMBER
 < 0x10100000L

330 #i‡
OPENSSL_VERSION_NUMBER
 >= 0x10000000L

331 
	`ERR_ªmove_thªad_°©e
(
NULL
);

333 
	`ERR_ªmove_°©e
(0);

337 
	`mem£t
(&
ª£rved
->
sockë_èb
, 0, (
_dés_°ªam
Ë* 
EXOSIP_MAX_SOCKETS
);

339 
	`mem£t
(&
ª£rved
->
ai_addr
, 0, (
sockaddr_°‹age
));

341 i‡(
ª£rved
->
dés_sockë
 > 0)

342 
	`_eXosù_˛o£sockë
(
ª£rved
->
dés_sockë
);

344 
ª£rved
->
dés_sockë
 = 0;

346 
	`osù_‰ì
(
ª£rved
);

347 
exc⁄ãxt
->
eXédés_ª£rved
 = 
NULL
;

348  
OSIP_SUCCESS
;

349 
	}
}

351 
	$dés_é_›í
(
eXosù_t
 *
exc⁄ãxt
) {

352 
eXédés
 *
ª£rved
 = (eXédé†*Ë
exc⁄ãxt
->
eXédés_ª£rved
;

353 
ªs
;

354 
addröfo
 *addröfÿ
NULL
;

355 
addröfo
 *
curöfo
;

356 
sock
 = -1;

357 
eb
[
ERRBSIZ
];

359 i‡(
ª£rved
 =
NULL
) {

360 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] [DTLS] wrong state: createÅransportÜayer first\n"));

361  
OSIP_WRONG_STATE
;

364 
exc⁄ãxt
->
eXé_å™•‹t
.
¥Ÿo_loˇl_p‹t
 =Éxc⁄ãxt->eXé_å™•‹t.
¥Ÿo_p‹t
;

366 i‡(
exc⁄ãxt
->
eXé_å™•‹t
.
¥Ÿo_loˇl_p‹t
 < 0)

367 
exc⁄ãxt
->
eXé_å™•‹t
.
¥Ÿo_loˇl_p‹t
 = 5061;

370 
ª£rved
->
£rvî_˘x
 = 
	`öôülize_£rvî_˘x
(
exc⁄ãxt
 , &Ñe£rved->
eXosù_dés_˘x_∑øms
, 
IPPROTO_UDP
);

371 
ª£rved
->
˛õ¡_˘x
 = 
	`öôülize_˛õ¡_˘x
(
exc⁄ãxt
, &ª£rved->
eXosù_dés_˘x_∑øms
, 
IPPROTO_UDP
);

373 
ªs
 = 
	`_eXosù_gë_addröfo
(
exc⁄ãxt
, &
addröfo
,Éxc⁄ãxt->
eXé_å™•‹t
.
¥Ÿo_ifs
,Éxc⁄ãxt->eXé_å™•‹t.
¥Ÿo_loˇl_p‹t
,Éxc⁄ãxt->eXé_å™•‹t.
¥Ÿo_num
);

375 i‡(
ªs
)

378 
curöfo
 = 
addröfo
; curöfo; curöfÿcuröfo->
ai_√xt
) {

379 
sockÀn_t
 
Àn
;

380 
ty≥
;

382 i‡(
curöfo
->
ai_¥Ÿocﬁ
 && curöfo->ai_¥Ÿocﬁ !
exc⁄ãxt
->
eXé_å™•‹t
.
¥Ÿo_num
) {

383 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO3
, 
NULL
, "[eXosù] [DTLS] skùpögÖrŸocﬁ [%d]\n", 
curöfo
->
ai_¥Ÿocﬁ
));

387 
ty≥
 = 
curöfo
->
ai_sockty≥
;

388 #i‡
	`deföed
(
SOCK_CLOEXEC
)

389 
ty≥
 = 
SOCK_CLOEXEC
 |Åype;

391 
sock
 = (Ë
	`sockë
(
curöfo
->
ai_Ámûy
, 
ty≥
, curöfo->
ai_¥Ÿocﬁ
);

393 i‡(
sock
 < 0) {

394 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosù] [DTLS] c™nŸ cª©êsockë %s\n", 
	`_ex_°ªº‹
(
ex_î∫o
, 
eb
, 
ERRBSIZ
)));

398 i‡(
curöfo
->
ai_Ámûy
 =
AF_INET6
) {

399 #ifde‡
IPV6_V6ONLY


401 i‡(
	`£tsock›t_ùv6⁄ly
(
sock
)) {

402 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosù] [DTLS] c™nŸ së sockë o±i⁄ %s\n", 
	`_ex_°ªº‹
(
ex_î∫o
, 
eb
, 
ERRBSIZ
)));

403 
	`_eXosù_˛o£sockë
(
sock
);

404 
sock
 = -1;

411 
ªs
 = 
	`böd
(
sock
, 
curöfo
->
ai_addr
, (
sockÀn_t
Ëcuröfo->
ai_addæí
);

413 i‡(
ªs
 < 0) {

414 
	`OSIP_TRACE
(

415 
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosù] [DTLS] c™nŸ böd sockë [%s][%s] %s\n", 
exc⁄ãxt
->
eXé_å™•‹t
.
¥Ÿo_ifs
, (
curöfo
->
ai_Ámûy
 =
AF_INET
Ë? "AF_INET" : "AF_INET6", 
	`_ex_°ªº‹
(
ex_î∫o
, 
eb
, 
ERRBSIZ
)));

416 
	`_eXosù_˛o£sockë
(
sock
);

417 
sock
 = -1;

421 
Àn
 = (
ª£rved
->
ai_addr
);

422 
ªs
 = 
	`gësock«me
(
sock
, (
sockaddr
 *Ë&
ª£rved
->
ai_addr
, &
Àn
);

424 i‡(
ªs
 != 0) {

425 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosù] [DTLS] c™nŸ gë sockëÇamê%s\n", 
	`_ex_°ªº‹
(
ex_î∫o
, 
eb
, 
ERRBSIZ
)));

426 
	`mem˝y
(&
ª£rved
->
ai_addr
, 
curöfo
->ai_addr, curöfo->
ai_addæí
);

429 i‡(
exc⁄ãxt
->
eXé_å™•‹t
.
¥Ÿo_num
 =
IPPROTO_TCP
) {

430 
ªs
 = 
	`li°í
(
sock
, 
SOMAXCONN
);

432 i‡(
ªs
 < 0) {

433 
	`OSIP_TRACE
(

434 
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosù] [DTLS] c™nŸ böd sockë [%s][%s] %s\n", 
exc⁄ãxt
->
eXé_å™•‹t
.
¥Ÿo_ifs
, (
curöfo
->
ai_Ámûy
 =
AF_INET
Ë? "AF_INET" : "AF_INET6", 
	`_ex_°ªº‹
(
ex_î∫o
, 
eb
, 
ERRBSIZ
)));

435 
	`_eXosù_˛o£sockë
(
sock
);

436 
sock
 = -1;

444 
	`_eXosù_‰ìaddröfo
(
addröfo
);

446 i‡(
sock
 < 0) {

447 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosù] [DTLS] c™nŸ böd o¿p‹à[%i]\n", 
exc⁄ãxt
->
eXé_å™•‹t
.
¥Ÿo_loˇl_p‹t
));

451 
ª£rved
->
dés_sockë
 = 
sock
;

453 i‡(
exc⁄ãxt
->
eXé_å™•‹t
.
¥Ÿo_loˇl_p‹t
 == 0) {

455 i‡(
ª£rved
->
ai_addr
.
ss_Ámûy
 =
AF_INET
)

456 
exc⁄ãxt
->
eXé_å™•‹t
.
¥Ÿo_loˇl_p‹t
 = 
	`¡ohs
(((
sockaddr_ö
 *Ë&
ª£rved
->
ai_addr
)->
sö_p‹t
);

459 
exc⁄ãxt
->
eXé_å™•‹t
.
¥Ÿo_loˇl_p‹t
 = 
	`¡ohs
(((
sockaddr_ö6
 *Ë&
ª£rved
->
ai_addr
)->
sö6_p‹t
);

461 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO1
, 
NULL
, "[eXosù] [DTLS] bödög o¿p‹à[%i]\n", 
exc⁄ãxt
->
eXé_å™•‹t
.
¥Ÿo_loˇl_p‹t
));

464  
OSIP_SUCCESS
;

465 
	}
}

467 
	#EXOSIP_AS_A_SERVER
 1

	)

468 
	#EXOSIP_AS_A_CLIENT
 2

	)

470 
	$dés_é_£t_fd£t
(
eXosù_t
 *
exc⁄ãxt
, 
fd_£t
 *
osù_fd£t
, fd_£à*
osù_wr£t
, fd_£à*
osù_ex˚±£t
, *
fd_max
, *
osù_fd_èbÀ
) {

471 
eXédés
 *
ª£rved
 = (eXédé†*Ë
exc⁄ãxt
->
eXédés_ª£rved
;

472 
pos_fd
 = 0;

474 i‡(
ª£rved
 =
NULL
) {

475 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] [DTLS] wrong state: createÅransportÜayer first\n"));

476  
OSIP_WRONG_STATE
;

479 i‡(
ª£rved
->
dés_sockë
 <= 0)

482 i‡(
osù_fd£t
 !
NULL
)

483 
	`eXFD_SET
(
ª£rved
->
dés_sockë
, 
osù_fd£t
);

484 
osù_fd_èbÀ
[
pos_fd
] = 
ª£rved
->
dés_sockë
;

485 
pos_fd
++;

487 i‡(
ª£rved
->
dés_sockë
 > *
fd_max
)

488 *
fd_max
 = 
ª£rved
->
dés_sockë
;

490  
OSIP_SUCCESS
;

491 
	}
}

493 
	$_dés_ªad_udp_maö_sockë
(
eXosù_t
 *
exc⁄ãxt
) {

494 
eXédés
 *
ª£rved
 = (eXédé†*Ë
exc⁄ãxt
->
eXédés_ª£rved
;

495 
sockaddr_°‹age
 
ß
;

496 
sockÀn_t
 
¶í
;

497 *
íc_buf
;

498 *
dec_buf
;

499 
i
;

500 
íc_buf_Àn
;

502 i‡(
ª£rved
->
ai_addr
.
ss_Ámûy
 =
AF_INET
)

503 
¶í
 = (
sockaddr_ö
);

506 
¶í
 = (
sockaddr_ö6
);

508 
íc_buf
 = (*Ë
	`osù_mÆloc
(
SIP_MESSAGE_MAX_LENGTH
 * () + 1);

510 i‡(
íc_buf
 =
NULL
)

511  
OSIP_NOMEM
;

513 
íc_buf_Àn
 = (Ë
	`ªcv‰om
(
ª£rved
->
dés_sockë
, 
íc_buf
, 
SIP_MESSAGE_MAX_LENGTH
, 0, (
sockaddr
 *Ë&
ß
, &
¶í
);

515 i‡(
íc_buf_Àn
 > 5) {

516 
§c6ho°
[
NI_MAXHOST
];

517 
ªcvp‹t
 = 0;

518 
îr
;

520 
BIO
 *
rbio
;

521 
_dés_°ªam
 *
_dés_°ªam_u£d
 = 
NULL
;

522 
pos
;

524 
íc_buf
[
íc_buf_Àn
] = '\0';

526 
	`mem£t
(
§c6ho°
, 0, 
NI_MAXHOST
);

527 
ªcvp‹t
 = 
	`_eXosù_gëp‹t
((
sockaddr
 *Ë&
ß
);

528 
	`_eXosù_gë«meöfo
((
sockaddr
 *Ë&
ß
, 
¶í
, 
§c6ho°
, 
NI_MAXHOST
, 
NULL
, 0, 
NI_NUMERICHOST
);

529 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO1
, 
NULL
, "[eXosù] [DTLS] mesßgêª˚ived from [%s][%d]\n", 
§c6ho°
, 
ªcvp‹t
));

531 
pos
 = 0;Öo†< 
EXOSIP_MAX_SOCKETS
;Öos++) {

532 i‡(
ª£rved
->
sockë_èb
[
pos
].
s¶_c⁄n
 !
NULL
) {

533 i‡(
ª£rved
->
sockë_èb
[
pos
].
ªmŸe_p‹t
 =
ªcvp‹t
 && (
	`°rcmp
‘e£rved->sockë_èb[pos].
ªmŸe_ù
, 
§c6ho°
) == 0)) {

534 
_dés_°ªam_u£d
 = &
ª£rved
->
sockë_èb
[
pos
];

540 i‡(
_dés_°ªam_u£d
 =
NULL
) {

541 
pos
 = 0;Öo†< 
EXOSIP_MAX_SOCKETS
;Öos++) {

542 i‡(
ª£rved
->
sockë_èb
[
pos
].
s¶_c⁄n
 =
NULL
) {

548 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO3
, 
NULL
, "[eXosù] [DTLS] cª©ög DTLS-UDP sockëáàödex %i\n", 
pos
));

550 i‡(
pos
 < 0) {

552 
pos
 = 0;

554 i‡(
ª£rved
->
sockë_èb
[
pos
].
s¶_c⁄n
 !
NULL
) {

555 
	`shutdown_‰ì_˛õ¡_dés
(
exc⁄ãxt
, 
pos
);

556 
	`shutdown_‰ì_£rvî_dés
(
exc⁄ãxt
, 
pos
);

559 
	`mem£t
(&
ª£rved
->
sockë_èb
[
pos
], 0, (
_dés_°ªam
));

563 i‡(
ª£rved
->
sockë_èb
[
pos
].
s¶_c⁄n
 =
NULL
) {

564 
BIO
 *
wbio
;

566 i‡(!
	`SSL_CTX_check_¥iv©e_key
(
ª£rved
->
£rvî_˘x
)) {

567 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] [DTLS] SSL CTXÖrivate key checkÉrror\n"));

568 
	`osù_‰ì
(
íc_buf
);

573 
ª£rved
->
sockë_èb
[
pos
].
s¶_c⁄n
 = 
	`SSL_√w
‘e£rved->
£rvî_˘x
);

575 i‡(
ª£rved
->
sockë_èb
[
pos
].
s¶_c⁄n
 =
NULL
) {

576 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] [DTLS] SSL_newÉrror\n"));

577 
	`osù_‰ì
(
íc_buf
);

582 #ifde‡
SSL_OP_NO_QUERY_MTU


583 
	`SSL_£t_›ti⁄s
(
ª£rved
->
sockë_èb
[
pos
].
s¶_c⁄n
, 
SSL_OP_NO_QUERY_MTU
);

584 
	`SSL_£t_mtu
(
ª£rved
->
sockë_èb
[
pos
].
s¶_c⁄n
, 1200);

588 #ifde‡
SSL_OP_COOKIE_EXCHANGE


589 
	`SSL_£t_›ti⁄s
(
ª£rved
->
sockë_èb
[
pos
].
s¶_c⁄n
, 
SSL_OP_COOKIE_EXCHANGE
);

591 
wbio
 = 
	`BIO_√w_dgøm
(
ª£rved
->
dés_sockë
, 
BIO_NOCLOSE
);

592 
	`BIO_˘æ
(
wbio
, 
BIO_CTRL_DGRAM_SET_PEER
, 0, (*Ë&
ß
);

593 
	`SSL_£t_bio
(
ª£rved
->
sockë_èb
[
pos
].
s¶_c⁄n
, 
NULL
, 
wbio
);

595 
	`SSL_£t_ac˚±_°©e
(
ª£rved
->
sockë_èb
[
pos
].
s¶_c⁄n
);

597 
ª£rved
->
sockë_èb
[
pos
].
s¶_°©e
 = 0;

598 
ª£rved
->
sockë_èb
[
pos
].
s¶_ty≥
 = 
EXOSIP_AS_A_SERVER
;

600 
	`osù_°∫˝y
(
ª£rved
->
sockë_èb
[
pos
].
ªmŸe_ù
, 
§c6ho°
, (reserved->socket_tab[pos].remote_ip) - 1);

601 
ª£rved
->
sockë_èb
[
pos
].
ªmŸe_p‹t
 = 
ªcvp‹t
;

603 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO1
, 
NULL
, "[eXosip] [DTLS] incoming DTLS-UDP connectionáccepted\n"));

606 
dec_buf
 = (*Ë
	`osù_mÆloc
(
SIP_MESSAGE_MAX_LENGTH
 * () + 1);

608 i‡(
dec_buf
 =
NULL
) {

609 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] [DTLS]állocationÉrror\n"));

610 
	`osù_‰ì
(
íc_buf
);

611  
OSIP_NOMEM
;

614 
rbio
 = 
	`BIO_√w_mem_buf
(
íc_buf
, 
íc_buf_Àn
);

615 
	`BIO_£t_mem_eof_ªtu∫
(
rbio
, -1);

617 
	`SSL_£t0_rbio
(
ª£rved
->
sockë_èb
[
pos
].
s¶_c⁄n
, 
rbio
);

619 
i
 = 
	`SSL_ªad
(
ª£rved
->
sockë_èb
[
pos
].
s¶_c⁄n
, 
dec_buf
, 
SIP_MESSAGE_MAX_LENGTH
);

621 
rbio
 = 
	`BIO_√w
(
	`BIO_s_mem
());

622 
	`SSL_£t0_rbio
(
ª£rved
->
sockë_èb
[
pos
].
s¶_c⁄n
, 
rbio
);

624 i‡(
i
 > 5) {

625 
dec_buf
[
i
] = '\0';

627 
	`_eXosù_h™dÀ_öcomög_mesßge
(
exc⁄ãxt
, 
dec_buf
, 
i
, 
ª£rved
->
dés_sockë
, 
§c6ho°
, 
ªcvp‹t
, 
NULL
, NULL);

629 } i‡(
i
 <= 0) {

630 
îr
 = 
	`SSL_gë_îr‹
(
ª£rved
->
sockë_èb
[
pos
].
s¶_c⁄n
, 
i
);

631 
	`_dés_¥öt_s¶_îr‹
(
îr
);

633 i‡(
îr
 =
SSL_ERROR_SYSCALL
) {

634 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_WARNING
, 
NULL
, "[eXosip] [DTLS] DTLS-UDP SYSCALL on SSL_read\n"));

636 } i‡(
îr
 =
SSL_ERROR_SSL
 ||Éº =
SSL_ERROR_ZERO_RETURN
) {

637 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_WARNING
, 
NULL
, "[eXosip] [DTLS] DTLS-UDP closed\n"));

639 
	`shutdown_‰ì_˛õ¡_dés
(
exc⁄ãxt
, 
pos
);

640 
	`shutdown_‰ì_£rvî_dés
(
exc⁄ãxt
, 
pos
);

642 
	`mem£t
(&(
ª£rved
->
sockë_èb
[
pos
]), 0, (reserved->socket_tab[pos]));

646 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO1
, 
NULL
, "[eXosip] [DTLS] dummy SIP messageÑeceived\n"));

649 
	`osù_‰ì
(
dec_buf
);

650 
	`osù_‰ì
(
íc_buf
);

653  
OSIP_SUCCESS
;

654 
	}
}

656 
	$dés_é_ªad_mesßge
(
eXosù_t
 *
exc⁄ãxt
, 
fd_£t
 *
osù_fd£t
, fd_£à*
osù_wr£t
, fd_£à*
osù_ex˚±£t
) {

657 
eXédés
 *
ª£rved
 = (eXédé†*Ë
exc⁄ãxt
->
eXédés_ª£rved
;

659 i‡(
ª£rved
 =
NULL
) {

660 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] [DTLS] wrong state: createÅransportÜayer first\n"));

661  
OSIP_WRONG_STATE
;

664 i‡(
ª£rved
->
dés_sockë
 <= 0)

667 i‡(
	`FD_ISSET
(
ª£rved
->
dés_sockë
, 
osù_fd£t
)) {

668 
	`_dés_ªad_udp_maö_sockë
(
exc⁄ãxt
);

671  
OSIP_SUCCESS
;

672 
	}
}

674 
	$dés_é_upd©e_c⁄è˘
(
eXosù_t
 *
exc⁄ãxt
, 
osù_mesßge_t
 *
ªq
) {

675 
ªq
->
≠∂iˇti⁄_d©a
 = (*) 0x1;

676  
OSIP_SUCCESS
;

677 
	}
}

679 
	$_dés_é_upd©e_c⁄è˘
(
eXosù_t
 *
exc⁄ãxt
, 
osù_mesßge_t
 *
ªq
) {

680 
eXosù_accou¡_öfo
 *
aöfo
 = 
NULL
;

681 *
¥oxy
 = 
NULL
;

682 
i
;

683 
osù_vü_t
 *
vü
 = 
NULL
;

685 i‡(
ªq
->
≠∂iˇti⁄_d©a
 != (*) 0x1)

686  
OSIP_SUCCESS
;

688 
ªq
->
≠∂iˇti⁄_d©a
 = (*) 0x0;

690 i‡(
	`MSG_IS_REQUEST
(
ªq
)) {

691 i‡(
ªq
->
‰om
 !
NULL
 &&Ñeq->‰om->
uæ
 !NULL &&Ñeq->‰om->uæ->
ho°
 != NULL)

692 
¥oxy
 = 
ªq
->
‰om
->
uæ
->
ho°
;

694 
	`osù_mesßge_gë_vü
(
ªq
, 0, &
vü
);

697 i‡(
ªq
->
to
 !
NULL
 &&Ñeq->to->
uæ
 !NULL &&Ñeq->to->uæ->
ho°
 != NULL)

698 
¥oxy
 = 
ªq
->
to
->
uæ
->
ho°
;

701 i‡(
¥oxy
 !
NULL
) {

702 
i
 = 0; i < 
MAX_EXOSIP_ACCOUNT_INFO
; i++) {

703 i‡(
exc⁄ãxt
->
accou¡_íåõs
[
i
].
¥oxy
[0] != '\0') {

704 i‡(
	`°r°r
(
exc⁄ãxt
->
accou¡_íåõs
[
i
].
¥oxy
,ÖroxyË!
NULL
 || strstr(proxy,Éxcontext->account_entries[i].proxy) != NULL) {

706 i‡(
exc⁄ãxt
->
accou¡_íåõs
[
i
].
«t_ù
[0] != '\0') {

707 
aöfo
 = &
exc⁄ãxt
->
accou¡_íåõs
[
i
];

715 i‡(
exc⁄ãxt
->
dés_fúewÆl_ù
[0] !'\0' ||Éxc⁄ãxt->
auto_masquîade_c⁄è˘
 > 0) {

716 
osù_li°_ôî©‹_t
 
ô
;

717 
osù_c⁄è˘_t
 *
co
 = (osù_c⁄è˘_à*Ë
	`osù_li°_gë_fú°
(&
ªq
->
c⁄è˘s
, &
ô
);

719 
co
 !
NULL
) {

720 i‡(
co
 !
NULL
 && co->
uæ
 !NULL && co->uæ->
ho°
 != NULL) {

721 i‡(
aöfo
 =
NULL
) {

722 i‡(
exc⁄ãxt
->
dés_fúewÆl_p‹t
[0] == '\0') {

723 } i‡(
co
->
uæ
->
p‹t
 =
NULL
 && 0 !
	`osù_°rˇ£cmp
(
exc⁄ãxt
->
dés_fúewÆl_p‹t
, "5061")) {

724 
co
->
uæ
->
p‹t
 = 
	`osù_°rdup
(
exc⁄ãxt
->
dés_fúewÆl_p‹t
);

725 
	`osù_mesßge_f‹˚_upd©e
(
ªq
);

727 } i‡(
co
->
uæ
->
p‹t
 !
NULL
 && 0 !
	`osù_°rˇ£cmp
(
exc⁄ãxt
->
dés_fúewÆl_p‹t
, co->url->port)) {

728 
	`osù_‰ì
(
co
->
uæ
->
p‹t
);

729 
co
->
uæ
->
p‹t
 = 
	`osù_°rdup
(
exc⁄ãxt
->
dés_fúewÆl_p‹t
);

730 
	`osù_mesßge_f‹˚_upd©e
(
ªq
);

734 i‡(
co
->
uæ
->
p‹t
 =
NULL
 && 
aöfo
->
«t_p‹t
 != 5060) {

735 
co
->
uæ
->
p‹t
 = 
	`osù_mÆloc
(10);

737 i‡(
co
->
uæ
->
p‹t
 =
NULL
)

738  
OSIP_NOMEM
;

740 
	`¢¥ötf
(
co
->
uæ
->
p‹t
, 9, "%i", 
aöfo
->
«t_p‹t
);

741 
	`osù_mesßge_f‹˚_upd©e
(
ªq
);

743 } i‡(
co
->
uæ
->
p‹t
 !
NULL
 && 
aöfo
->
«t_p‹t
 !
	`©oi
(co->url->port)) {

744 
	`osù_‰ì
(
co
->
uæ
->
p‹t
);

745 
co
->
uæ
->
p‹t
 = 
	`osù_mÆloc
(10);

747 i‡(
co
->
uæ
->
p‹t
 =
NULL
)

748  
OSIP_NOMEM
;

750 
	`¢¥ötf
(
co
->
uæ
->
p‹t
, 9, "%i", 
aöfo
->
«t_p‹t
);

751 
	`osù_mesßge_f‹˚_upd©e
(
ªq
);

756 i‡(
aöfo
->
«t_ù
[0] != '\0') {

757 
	`osù_‰ì
(
co
->
uæ
->
ho°
);

758 
co
->
uæ
->
ho°
 = 
	`osù_°rdup
(
aöfo
->
«t_ù
);

759 
	`osù_mesßge_f‹˚_upd©e
(
ªq
);

766 
co
 = (
osù_c⁄è˘_t
 *Ë
	`osù_li°_gë_√xt
(&
ô
);

770 i‡(
exc⁄ãxt
->
masquîade_vü
)

771 i‡(
vü
 !
NULL
) {

772 i‡(
aöfo
 =
NULL
) {

773 i‡(
exc⁄ãxt
->
dés_fúewÆl_p‹t
[0] == '\0') {

774 } i‡(
vü
->
p‹t
 =
NULL
 && 0 !
	`osù_°rˇ£cmp
(
exc⁄ãxt
->
dés_fúewÆl_p‹t
, "5060")) {

775 
vü
->
p‹t
 = 
	`osù_°rdup
(
exc⁄ãxt
->
dés_fúewÆl_p‹t
);

776 
	`osù_mesßge_f‹˚_upd©e
(
ªq
);

778 } i‡(
vü
->
p‹t
 !
NULL
 && 0 !
	`osù_°rˇ£cmp
(
exc⁄ãxt
->
dés_fúewÆl_p‹t
, via->port)) {

779 
	`osù_‰ì
(
vü
->
p‹t
);

780 
vü
->
p‹t
 = 
	`osù_°rdup
(
exc⁄ãxt
->
dés_fúewÆl_p‹t
);

781 
	`osù_mesßge_f‹˚_upd©e
(
ªq
);

785 i‡(
vü
->
p‹t
 =
NULL
 && 
aöfo
->
«t_p‹t
 != 5060) {

786 
vü
->
p‹t
 = 
	`osù_mÆloc
(10);

788 i‡(
vü
->
p‹t
 =
NULL
)

789  
OSIP_NOMEM
;

791 
	`¢¥ötf
(
vü
->
p‹t
, 9, "%i", 
aöfo
->
«t_p‹t
);

792 
	`osù_mesßge_f‹˚_upd©e
(
ªq
);

794 } i‡(
vü
->
p‹t
 !
NULL
 && 
aöfo
->
«t_p‹t
 !
	`©oi
(via->port)) {

795 
	`osù_‰ì
(
vü
->
p‹t
);

796 
vü
->
p‹t
 = 
	`osù_mÆloc
(10);

798 i‡(
vü
->
p‹t
 =
NULL
)

799  
OSIP_NOMEM
;

801 
	`¢¥ötf
(
vü
->
p‹t
, 9, "%i", 
aöfo
->
«t_p‹t
);

802 
	`osù_mesßge_f‹˚_upd©e
(
ªq
);

807 i‡(
aöfo
->
«t_ù
[0] != '\0') {

808 
	`osù_‰ì
(
vü
->
ho°
);

809 
vü
->
ho°
 = 
	`osù_°rdup
(
aöfo
->
«t_ù
);

810 
	`osù_mesßge_f‹˚_upd©e
(
ªq
);

817  
OSIP_SUCCESS
;

818 
	}
}

820 #i‚de‡
INET6_ADDRSTRLEN


821 
	#INET6_ADDRSTRLEN
 65

	)

824 
	$dés_é_£nd_mesßge
(
eXosù_t
 *
exc⁄ãxt
, 
osù_å™ß˘i⁄_t
 *
å
, 
osù_mesßge_t
 *
sù
, *
ho°
, 
p‹t
, 
out_sockë
) {

825 
eXédés
 *
ª£rved
 = (eXédé†*Ë
exc⁄ãxt
->
eXédés_ª£rved
;

826 
sockÀn_t
 
Àn
 = 0;

827 
size_t
 
Àngth
 = 0;

828 
addröfo
 *addrinfo;

829 
__eXosù_sockaddr
 
addr
;

830 *
mesßge
;

832 
ùbuf
[
INET6_ADDRSTRLEN
];

833 
i
;

834 
osù_«±r_t
 *
«±r_ªc‹d
 = 
NULL
;

836 
pos
;

837 
_dés_°ªam
 *
_dés_°ªam_u£d
 = 
NULL
;

838 
BIO
 *
sbio
 = 
NULL
;

839 
tid
 = -1;

841 i‡(
å
 !
NULL
)

842 
tid
 = 
å
->
å™ß˘i⁄id
;

844 i‡(
ª£rved
 =
NULL
) {

845 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosù] [DTLS] [tid=%i] wr⁄g sèã: cª©êå™•‹àœyî fú°\n", 
tid
));

846  
OSIP_WRONG_STATE
;

849 i‡(
ª£rved
->
dés_sockë
 <= 0)

852 i‡(
ho°
 =
NULL
) {

853 
ho°
 = 
sù
->
ªq_uri
->host;

855 i‡(
sù
->
ªq_uri
->
p‹t
 !
NULL
)

856 
p‹t
 = 
	`osù_©oi
(
sù
->
ªq_uri
->port);

859 
p‹t
 = 5061;

862 i‡(
p‹t
 == 5060)

863 
p‹t
 = 5061;

865 
i
 = -1;

867 i‡(
å
 =
NULL
) {

868 
	`_eXosù_§v_lookup
(
exc⁄ãxt
, 
sù
, &
«±r_ªc‹d
);

870 i‡(
«±r_ªc‹d
 !
NULL
) {

871 
	`eXosù_dnsutûs_dns_¥o˚ss
(
«±r_ªc‹d
, 1);

873 i‡(
«±r_ªc‹d
->
«±r_°©e
 =
OSIP_NAPTR_STATE_NAPTRDONE
 ||Ç≠å_ªc‹d->«±r_°©ê=
OSIP_NAPTR_STATE_SRVINPROGRESS
)

874 
	`eXosù_dnsutûs_dns_¥o˚ss
(
«±r_ªc‹d
, 1);

877 i‡(
«±r_ªc‹d
 !
NULL
 &&Ç≠å_ªc‹d->
«±r_°©e
 =
OSIP_NAPTR_STATE_SRVDONE
) {

879 i‡(
«±r_ªc‹d
->
sùdés_ªc‹d
.
«me
[0] !'\0' &&Ç≠å_ªc‹d->sùdés_ªc‹d.
§víåy
[«±r_ªc‹d->sùdés_ªc‹d.
ödex
].
§v
[0] != '\0') {

884 
osù_§v_íåy_t
 *
§v
;

885 
n
 = 0;

887 
§v
 = &
«±r_ªc‹d
->
sùdés_ªc‹d
.
§víåy
[«±r_ªc‹d->sùdés_ªc‹d.
ödex
]; 
n
 < 10 &&Çaptr_record->sipdtls_record.srventry[naptr_record->sipdtls_record.index].srv[0];

888 
§v
 = &
«±r_ªc‹d
->
sùdés_ªc‹d
.
§víåy
[«±r_ªc‹d->sùdés_ªc‹d.
ödex
]) {

889 i‡(
§v
->
ùaddªss
[0])

890 
i
 = 
	`_eXosù_gë_addröfo
(
exc⁄ãxt
, &
addröfo
, 
§v
->
ùaddªss
, srv->
p‹t
, 
IPPROTO_UDP
);

893 
i
 = 
	`_eXosù_gë_addröfo
(
exc⁄ãxt
, &
addröfo
, 
§v
->§v, srv->
p‹t
, 
IPPROTO_UDP
);

895 i‡(
i
 == 0) {

896 
ho°
 = 
§v
->srv;

897 
p‹t
 = 
§v
->port;

901 
i
 = 
	`eXosù_dnsutûs_rŸ©e_§v
(&
«±r_ªc‹d
->
sùdés_ªc‹d
);

903 i‡(
i
 <= 0) {

907 i‡(
i
 >
n
) {

911 
i
 = -1;

913 
n
++;

918 i‡(
«±r_ªc‹d
 !
NULL
 &&Ç≠å_ªc‹d->
kìp_ö_ˇche
 == 0)

919 
	`osù_‰ì
(
«±r_ªc‹d
);

921 
«±r_ªc‹d
 = 
NULL
;

924 
«±r_ªc‹d
 = 
å
->naptr_record;

927 i‡(
«±r_ªc‹d
 !
NULL
) {

929 
	`eXosù_dnsutûs_dns_¥o˚ss
(
«±r_ªc‹d
, 0);

931 i‡(
«±r_ªc‹d
->
«±r_°©e
 =
OSIP_NAPTR_STATE_NAPTRDONE
 ||Ç≠å_ªc‹d->«±r_°©ê=
OSIP_NAPTR_STATE_SRVINPROGRESS
)

932 
	`eXosù_dnsutûs_dns_¥o˚ss
(
«±r_ªc‹d
, 0);

934 i‡(
«±r_ªc‹d
->
«±r_°©e
 =
OSIP_NAPTR_STATE_UNKNOWN
) {

936 i‡(
«±r_ªc‹d
->
kìp_ö_ˇche
 == 0)

937 
	`osù_‰ì
(
«±r_ªc‹d
);

939 
«±r_ªc‹d
 = 
NULL
;

941 i‡(
å
 !
NULL
)

942 
å
->
«±r_ªc‹d
 = 
NULL
;

946 } i‡(
«±r_ªc‹d
->
«±r_°©e
 =
OSIP_NAPTR_STATE_INPROGRESS
) {

948  
OSIP_SUCCESS
 + 1;

950 } i‡(
«±r_ªc‹d
->
«±r_°©e
 =
OSIP_NAPTR_STATE_NAPTRDONE
) {

952  
OSIP_SUCCESS
 + 1;

954 } i‡(
«±r_ªc‹d
->
«±r_°©e
 =
OSIP_NAPTR_STATE_SRVINPROGRESS
) {

956  
OSIP_SUCCESS
 + 1;

958 } i‡(
«±r_ªc‹d
->
«±r_°©e
 =
OSIP_NAPTR_STATE_SRVDONE
) {

960 i‡(
«±r_ªc‹d
->
sùdés_ªc‹d
.
«me
[0] !'\0' &&Ç≠å_ªc‹d->sùdés_ªc‹d.
§víåy
[«±r_ªc‹d->sùdés_ªc‹d.
ödex
].
§v
[0] != '\0') {

965 
osù_§v_íåy_t
 *
§v
;

966 
n
 = 0;

968 
§v
 = &
«±r_ªc‹d
->
sùdés_ªc‹d
.
§víåy
[«±r_ªc‹d->sùdés_ªc‹d.
ödex
]; 
n
 < 10 &&Çaptr_record->sipdtls_record.srventry[naptr_record->sipdtls_record.index].srv[0];

969 
§v
 = &
«±r_ªc‹d
->
sùdés_ªc‹d
.
§víåy
[«±r_ªc‹d->sùdés_ªc‹d.
ödex
]) {

970 i‡(
§v
->
ùaddªss
[0])

971 
i
 = 
	`_eXosù_gë_addröfo
(
exc⁄ãxt
, &
addröfo
, 
§v
->
ùaddªss
, srv->
p‹t
, 
IPPROTO_UDP
);

974 
i
 = 
	`_eXosù_gë_addröfo
(
exc⁄ãxt
, &
addröfo
, 
§v
->§v, srv->
p‹t
, 
IPPROTO_UDP
);

976 i‡(
i
 == 0) {

977 
ho°
 = 
§v
->srv;

978 
p‹t
 = 
§v
->port;

982 
i
 = 
	`eXosù_dnsutûs_rŸ©e_§v
(&
«±r_ªc‹d
->
sùdés_ªc‹d
);

984 i‡(
i
 <= 0) {

988 i‡(
i
 >
n
) {

992 
i
 = -1;

994 
n
++;

998 } i‡(
«±r_ªc‹d
->
«±r_°©e
 =
OSIP_NAPTR_STATE_NOTSUPPORTED
 ||Ç≠å_ªc‹d->«±r_°©ê=
OSIP_NAPTR_STATE_RETRYLATER
) {

1000 i‡(
«±r_ªc‹d
->
kìp_ö_ˇche
 == 0)

1001 
	`osù_‰ì
(
«±r_ªc‹d
);

1003 
«±r_ªc‹d
 = 
NULL
;

1005 i‡(
å
 !
NULL
)

1006 
å
->
«±r_ªc‹d
 = 
NULL
;

1011 i‡(
i
 != 0) {

1012 
i
 = 
	`_eXosù_gë_addröfo
(
exc⁄ãxt
, &
addröfo
, 
ho°
, 
p‹t
, 
IPPROTO_UDP
);

1015 i‡(
i
 != 0) {

1019 
	`mem˝y
(&
addr
, 
addröfo
->
ai_addr
,áddröfo->
ai_addæí
);

1020 
Àn
 = (
sockÀn_t
Ë
addröfo
->
ai_addæí
;

1022 
	`_eXosù_‰ìaddröfo
(
addröfo
);

1024 ((
sockaddr
 *Ë&
addr
)->
ß_Ámûy
) {

1025 
AF_INET
:

1026 
	`öë_¡›
(((
sockaddr
 *Ë&
addr
)->
ß_Ámûy
, &(((
sockaddr_ö
 *Ë&addr)->
sö_addr
), 
ùbuf
, (ipbuf));

1029 
AF_INET6
:

1030 
	`öë_¡›
(((
sockaddr
 *Ë&
addr
)->
ß_Ámûy
, &(((
sockaddr_ö6
 *Ë&addr)->
sö6_addr
), 
ùbuf
, (ipbuf));

1034 
	`°∫˝y
(
ùbuf
, "(unknown)", (ipbuf));

1038 i‡(
	`osù_°rˇ£cmp
(
ho°
, 
ùbuf
Ë!0 && 
	`MSG_IS_REQUEST
(
sù
)) {

1039 i‡(
	`MSG_IS_REGISTER
(
sù
)) {

1040 
eXosù_dns_ˇche
 
íåy
;

1042 
	`mem£t
(&
íåy
, 0, (
eXosù_dns_ˇche
));

1043 
	`¢¥ötf
(
íåy
.
ho°
, (entry.host), "%s", host);

1044 
	`¢¥ötf
(
íåy
.
ù
, ”¡ry.ù), "%s", 
ùbuf
);

1045 
	`eXosù_£t_›ti⁄
(
exc⁄ãxt
, 
EXOSIP_OPT_ADD_DNS_CACHE
, (*Ë&
íåy
);

1049 
pos
 = 0;Öo†< 
EXOSIP_MAX_SOCKETS
;Öos++) {

1050 i‡(
ª£rved
->
sockë_èb
[
pos
].
s¶_c⁄n
 !
NULL
 &&Ñe£rved->sockë_èb[pos].
s¶_ty≥
 =
EXOSIP_AS_A_SERVER
) {

1051 i‡(
ª£rved
->
sockë_èb
[
pos
].
ªmŸe_p‹t
 =
p‹t
 && (
	`°rcmp
‘e£rved->sockë_èb[pos].
ªmŸe_ù
, 
ùbuf
) == 0)) {

1052 
BIO
 *
rbio
;

1054 
_dés_°ªam_u£d
 = &
ª£rved
->
sockë_èb
[
pos
];

1055 
rbio
 = 
	`BIO_√w_dgøm
(
ª£rved
->
dés_sockë
, 
BIO_NOCLOSE
);

1056 
	`BIO_˘æ
(
rbio
, 
BIO_CTRL_DGRAM_SET_PEER
, 0, (*Ë&
addr
);

1057 
	`SSL_£t0_rbio
(
ª£rved
->
sockë_èb
[
pos
].
s¶_c⁄n
, 
rbio
);

1063 i‡(
_dés_°ªam_u£d
 =
NULL
) {

1064 
pos
 = 0;Öo†< 
EXOSIP_MAX_SOCKETS
;Öos++) {

1065 i‡(
ª£rved
->
sockë_èb
[
pos
].
s¶_c⁄n
 !
NULL
 &&Ñe£rved->sockë_èb[pos].
s¶_ty≥
 =
EXOSIP_AS_A_CLIENT
) {

1066 i‡(
ª£rved
->
sockë_èb
[
pos
].
ªmŸe_p‹t
 =
p‹t
 && (
	`°rcmp
‘e£rved->sockë_èb[pos].
ªmŸe_ù
, 
ùbuf
) == 0)) {

1067 
BIO
 *
rbio
;

1069 
_dés_°ªam_u£d
 = &
ª£rved
->
sockë_èb
[
pos
];

1070 
rbio
 = 
	`BIO_√w_dgøm
(
ª£rved
->
dés_sockë
, 
BIO_NOCLOSE
);

1071 
	`BIO_˘æ
(
rbio
, 
BIO_CTRL_DGRAM_SET_PEER
, 0, (*Ë&
addr
);

1072 
	`SSL_£t0_rbio
(
ª£rved
->
sockë_èb
[
pos
].
s¶_c⁄n
, 
rbio
);

1079 i‡(
_dés_°ªam_u£d
 =
NULL
) {

1081 
pos
 = 0;

1083 i‡(
ª£rved
->
sockë_èb
[
pos
].
s¶_c⁄n
 !
NULL
) {

1084 
	`shutdown_‰ì_˛õ¡_dés
(
exc⁄ãxt
, 
pos
);

1085 
	`shutdown_‰ì_£rvî_dés
(
exc⁄ãxt
, 
pos
);

1088 
	`mem£t
(&
ª£rved
->
sockë_èb
[
pos
], 0, (
_dés_°ªam
));

1091 i‡(
ª£rved
->
sockë_èb
[
pos
].
s¶_c⁄n
 =
NULL
) {

1093 
	`SSL_CTX_£t_ªad_ahód
(
ª£rved
->
˛õ¡_˘x
, 1);

1094 
ª£rved
->
sockë_èb
[
pos
].
s¶_c⁄n
 = 
	`SSL_√w
‘e£rved->
˛õ¡_˘x
);

1096 i‡(
ª£rved
->
sockë_èb
[
pos
].
s¶_c⁄n
 =
NULL
) {

1097 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosù] [DTLS] [tid=%i] DTLS-UDP SSL_√wÉº‹\n", 
tid
));

1099 i‡(
ª£rved
->
sockë_èb
[
pos
].
s¶_c⁄n
 !
NULL
) {

1100 
	`shutdown_‰ì_˛õ¡_dés
(
exc⁄ãxt
, 
pos
);

1101 
	`shutdown_‰ì_£rvî_dés
(
exc⁄ãxt
, 
pos
);

1104 
	`mem£t
(&
ª£rved
->
sockë_èb
[
pos
], 0, (
_dés_°ªam
));

1109 i‡(
	`c⁄√˘
(
ª£rved
->
dés_sockë
, (
sockaddr
 *Ë&
addr
, (addr)) == -1) {

1110 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosù] [DTLS] [tid=%i] DTLS-UDP c⁄√˘Éº‹\n", 
tid
));

1112 i‡(
ª£rved
->
sockë_èb
[
pos
].
s¶_c⁄n
 !
NULL
) {

1113 
	`shutdown_‰ì_˛õ¡_dés
(
exc⁄ãxt
, 
pos
);

1114 
	`shutdown_‰ì_£rvî_dés
(
exc⁄ãxt
, 
pos
);

1117 
	`mem£t
(&
ª£rved
->
sockë_èb
[
pos
], 0, (
_dés_°ªam
));

1122 
	`SSL_£t_›ti⁄s
(
ª£rved
->
sockë_èb
[
pos
].
s¶_c⁄n
, 
SSL_OP_NO_QUERY_MTU
);

1123 
	`SSL_£t_mtu
(
ª£rved
->
sockë_èb
[
pos
].
s¶_c⁄n
, 1200);

1124 
	`SSL_£t_c⁄√˘_°©e
(
ª£rved
->
sockë_èb
[
pos
].
s¶_c⁄n
);

1125 
sbio
 = 
	`BIO_√w_dgøm
(
ª£rved
->
dés_sockë
, 
BIO_NOCLOSE
);

1126 
	`BIO_˘æ
(
sbio
, 
BIO_CTRL_DGRAM_SET_CONNECTED
, 1, (*Ë&
addr
);

1127 
	`SSL_£t_bio
(
ª£rved
->
sockë_èb
[
pos
].
s¶_c⁄n
, 
sbio
, sbio);

1129 
ª£rved
->
sockë_èb
[
pos
].
s¶_ty≥
 = 2;

1130 
ª£rved
->
sockë_èb
[
pos
].
s¶_°©e
 = 2;

1132 
	`osù_°∫˝y
(
ª£rved
->
sockë_èb
[
pos
].
ªmŸe_ù
, 
ùbuf
, (reserved->socket_tab[pos].remote_ip) - 1);

1133 
ª£rved
->
sockë_èb
[
pos
].
ªmŸe_p‹t
 = 
p‹t
;

1136 
	`_eXosù_ªque°_vüm™agî
(
exc⁄ãxt
, 
sù
, 
addr
.
ss_Ámûy
, 
IPPROTO_UDP
, &
ª£rved
->
ai_addr
,Éxc⁄ãxt->
eXé_å™•‹t
.
¥Ÿo_loˇl_p‹t
,Ñe£rved->
dés_sockë
, 
ho°
);

1137 
	`_eXosù_mesßge_c⁄è˘m™agî
(
exc⁄ãxt
, 
sù
, 
addr
.
ss_Ámûy
, 
IPPROTO_UDP
, &
ª£rved
->
ai_addr
,Éxc⁄ãxt->
eXé_å™•‹t
.
¥Ÿo_loˇl_p‹t
,Ñe£rved->
dés_sockë
, 
ho°
);

1138 
	`_dés_é_upd©e_c⁄è˘
(
exc⁄ãxt
, 
sù
);

1143 
osù_rouã_t
 *
rouã
 = 
NULL
;

1144 
osù_gíîic_∑øm_t
 *
èg
 = 
NULL
;

1146 i‡(
exc⁄ãxt
->
ªmove_¥îouã£t
 > 0) {

1147 
	`osù_mesßge_gë_rouã
(
sù
, 0, &
rouã
);

1148 
	`osù_to_gë_èg
(
sù
->
to
, &
èg
);

1150 i‡(
èg
 =
NULL
 && 
rouã
 !NULL &&Ñouã->
uæ
 != NULL) {

1151 
	`osù_li°_ªmove
(&
sù
->
rouãs
, 0);

1152 
	`osù_mesßge_f‹˚_upd©e
(
sù
);

1156 
i
 = 
	`osù_mesßge_to_°r
(
sù
, &
mesßge
, &
Àngth
);

1158 i‡(
èg
 =
NULL
 && 
rouã
 !NULL &&Ñouã->
uæ
 != NULL) {

1159 
	`osù_li°_add
(&
sù
->
rouãs
, 
rouã
, 0);

1163 i‡(
i
 !0 || 
Àngth
 <= 0) {

1167 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO1
, 
NULL
, "[eXosù] [DTLS] [tid=%i] mesßgê£¡ [Àn=%d]Åÿ[%s][%d]\n%s\n", 
tid
, 
Àngth
, 
ùbuf
, 
p‹t
, 
mesßge
));

1169 
i
 = 
	`SSL_wrôe
(
ª£rved
->
sockë_èb
[
pos
].
s¶_c⁄n
, 
mesßge
, (Ë
Àngth
);

1171 i‡(
i
 < 0) {

1172 
i
 = 
	`SSL_gë_îr‹
(
ª£rved
->
sockë_èb
[
pos
].
s¶_c⁄n
, i);

1173 
	`_dés_¥öt_s¶_îr‹
(
i
);

1175 i‡(
i
 =
SSL_ERROR_SSL
 || i =
SSL_ERROR_SYSCALL
) {

1176 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosù] [DTLS] [tid=%i] DTLS-UDP SSL_wrôêîr‹\n", 
tid
));

1178 i‡(
ª£rved
->
sockë_èb
[
pos
].
s¶_c⁄n
 !
NULL
) {

1179 
	`shutdown_‰ì_˛õ¡_dés
(
exc⁄ãxt
, 
pos
);

1180 
	`shutdown_‰ì_£rvî_dés
(
exc⁄ãxt
, 
pos
);

1183 
	`mem£t
(&
ª£rved
->
sockë_èb
[
pos
], 0, (
_dés_°ªam
));

1186 i‡(
«±r_ªc‹d
 !
NULL
) {

1188 i‡(
	`eXosù_dnsutûs_rŸ©e_§v
(&
«±r_ªc‹d
->
sùdés_ªc‹d
) > 0) {

1189 
	`osù_‰ì
(
mesßge
);

1190  
OSIP_SUCCESS
;

1195 
	`osù_‰ì
(
mesßge
);

1199 i‡(
exc⁄ãxt
->
ka_öãrvÆ
 > 0) {

1200 i‡(
	`MSG_IS_REGISTER
(
sù
)) {

1201 
eXosù_ªg_t
 *
ªg
 = 
NULL
;

1203 i‡(
	`_eXosù_ªg_föd
(
exc⁄ãxt
, &
ªg
, 
å
) == 0) {

1204 
	`mem˝y
(&(
ªg
->
°un_addr
), &
addr
, 
Àn
);

1205 
ªg
->
°un_Àn
 = 
Àn
;

1210 
	`osù_‰ì
(
mesßge
);

1211  
OSIP_SUCCESS
;

1212 
	}
}

1214 
	$dés_é_kì∑live
(
eXosù_t
 *
exc⁄ãxt
) {

1215 
eXédés
 *
ª£rved
 = (eXédé†*Ë
exc⁄ãxt
->
eXédés_ª£rved
;

1216 
eXosù_ªg_t
 *
jr
;

1218 i‡(
ª£rved
 =
NULL
) {

1219 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] [DTLS] wrong state: createÅransportÜayer first\n"));

1220  
OSIP_WRONG_STATE
;

1223 i‡(
exc⁄ãxt
->
ka_öãrvÆ
 <= 0) {

1227 i‡(
ª£rved
->
dés_sockë
 <= 0)

1228  
OSIP_UNDEFINED_ERROR
;

1230 
jr
 = 
exc⁄ãxt
->
j_ªg
; j∏!
NULL
; j∏jr->
√xt
) {

1231 i‡(
jr
->
°un_Àn
 > 0) {

1232 i‡(
	`£ndto
(
ª£rved
->
dés_sockë
, (c⁄° *Ë
exc⁄ãxt
->
ka_¸lf
, 4, 0, (
sockaddr
 *Ë&(
jr
->
°un_addr
), jr->
°un_Àn
) > 0) {

1233 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO1
, 
NULL
, "[eXosip] [DTLS] [keepalive] keepálive sent on DTLS-UDP\n"));

1238  
OSIP_SUCCESS
;

1239 
	}
}

1241 
	$dés_é_£t_sockë
(
eXosù_t
 *
exc⁄ãxt
, 
sockë
) {

1242 
eXédés
 *
ª£rved
 = (eXédé†*Ë
exc⁄ãxt
->
eXédés_ª£rved
;

1244 i‡(
ª£rved
 =
NULL
) {

1245 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] [DTLS] wrong state: createÅransportÜayer first\n"));

1246  
OSIP_WRONG_STATE
;

1249 
ª£rved
->
dés_sockë
 = 
sockë
;

1251  
OSIP_SUCCESS
;

1252 
	}
}

1254 
	$dés_é_masquîade_c⁄è˘
(
eXosù_t
 *
exc⁄ãxt
, c⁄° *
public_addªss
, 
p‹t
) {

1255 i‡(
public_addªss
 =
NULL
 ||Öublic_address[0] == '\0') {

1256 
	`mem£t
(
exc⁄ãxt
->
dés_fúewÆl_ù
, '\0', (excontext->dtls_firewall_ip));

1257 
	`mem£t
(
exc⁄ãxt
->
dés_fúewÆl_p‹t
, '\0', (excontext->dtls_firewall_port));

1258  
OSIP_SUCCESS
;

1261 
	`¢¥ötf
(
exc⁄ãxt
->
dés_fúewÆl_ù
, ”xc⁄ãxt->dés_fúewÆl_ù), "%s", 
public_addªss
);

1263 i‡(
p‹t
 > 0) {

1264 
	`¢¥ötf
(
exc⁄ãxt
->
dés_fúewÆl_p‹t
, ”xc⁄ãxt->dés_fúewÆl_p‹t), "%i", 
p‹t
);

1267  
OSIP_SUCCESS
;

1268 
	}
}

1270 
	$dés_é_gë_masquîade_c⁄è˘
(
eXosù_t
 *
exc⁄ãxt
, *
ù
, 
ù_size
, *
p‹t
, 
p‹t_size
) {

1271 
eXédés
 *
ª£rved
 = (eXédé†*Ë
exc⁄ãxt
->
eXédés_ª£rved
;

1273 
	`mem£t
(
ù
, 0, 
ù_size
);

1274 
	`mem£t
(
p‹t
, 0, 
p‹t_size
);

1276 i‡(
ª£rved
 =
NULL
) {

1277 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] [DTLS] wrong state: createÅransportÜayer first\n"));

1278  
OSIP_WRONG_STATE
;

1281 i‡(
exc⁄ãxt
->
dés_fúewÆl_ù
[0] != '\0')

1282 
	`¢¥ötf
(
ù
, 
ù_size
, "%s", 
exc⁄ãxt
->
dés_fúewÆl_ù
);

1284 i‡(
exc⁄ãxt
->
dés_fúewÆl_p‹t
[0] != '\0')

1285 
	`¢¥ötf
(
p‹t
, 
p‹t_size
, "%s", 
exc⁄ãxt
->
dés_fúewÆl_p‹t
);

1287  
OSIP_SUCCESS
;

1288 
	}
}

1290 
eXé_¥Ÿocﬁ
 
	geXé_dés
 = {1,

1294 
IPPROTO_UDP
,

1295 
AF_INET
,

1300 &
dés_é_öô
,

1301 &
dés_é_‰ì
,

1302 &
dés_é_›í
,

1303 &
dés_é_£t_fd£t
,

1304 &
dés_é_ªad_mesßge
,

1305 #ifde‡
HAVE_SYS_EPOLL_H


1306 
NULL
,

1308 &
dés_é_£nd_mesßge
,

1309 &
dés_é_kì∑live
,

1310 &
dés_é_£t_sockë
,

1311 &
dés_é_masquîade_c⁄è˘
,

1312 &
dés_é_gë_masquîade_c⁄è˘
,

1313 &
dés_é_upd©e_c⁄è˘
,

1314 
NULL
,

1315 
NULL
};

1317 
	$eXosù_å™•‹t_dés_öô
(
eXosù_t
 *
exc⁄ãxt
) {

1318 
	`mem˝y
(&
exc⁄ãxt
->
eXé_å™•‹t
, &
eXé_dés
, (
eXé_¥Ÿocﬁ
));

1319 
	}
}

	@/home/unasaw/sip_project/libexosip2-5.3.0/src/eXtl_tcp.c

33 
	~"eXosù2.h
"

34 
	~"eXå™•‹t.h
"

36 #ifde‡
HAVE_MSTCPIP_H


37 
	~<M°˝ù.h
>

40 #ifde‡
HAVE_FCNTL_H


41 
	~<f˙é.h
>

44 #i‡!
deföed
(
_WIN32_WCE
)

45 
	~<î∫o.h
>

48 #i‡
deföed
(
HAVE_NETINET_TCP_H
)

49 
	~<√töë/t˝.h
>

52 #i‡
deföed
(
HAVE_WINSOCK2_H
)

53 
	#ex_î∫o
 
	`WSAGëLa°Eº‹
()

	)

54 
	#is_wouldblock_îr‹
(
r
Ë(‘Ë=
WSAEINTR
 || (rË=
WSAEWOULDBLOCK
)

	)

55 
	#is_c⁄ƒe£t_îr‹
(
r
Ë(‘Ë=
WSAECONNRESET
 || (rË=
WSAECONNABORTED
 || (rË=
WSAETIMEDOUT
 || (rË=
WSAENETRESET
 || (rË=
WSAENOTCONN
)

	)

57 
	#ex_î∫o
 
î∫o


	)

59 #i‚de‡
is_wouldblock_îr‹


60 
	#is_wouldblock_îr‹
(
r
Ë(‘Ë=
EINTR
 || (rË=
EWOULDBLOCK
 || (rË=
EAGAIN
)

	)

61 
	#is_c⁄ƒe£t_îr‹
(
r
Ë(‘Ë=
ECONNRESET
 || (rË=
ECONNABORTED
 || (rË=
ETIMEDOUT
 || (rË=
ENETRESET
 || (rË=
ENOTCONN
)

	)

64 #ifde‡
__APPLE_CC__


65 
	~"T¨gëC⁄dôi⁄Æs.h
"

68 #i‡
TARGET_OS_IPHONE


69 
	~<CFNëw‹k/CFSockëSåóm.h
>

70 
	~<C‹eFound©i⁄/CFSåóm.h
>

71 
	#MULTITASKING_ENABLED


	)

75 
	s_t˝_°ªam
 {

76 
	msockë
;

77 
sockaddr
 
	mai_addr
;

78 
sockÀn_t
 
	mai_addæí
;

79 
	mªmŸe_ù
[65];

80 
	mªmŸe_p‹t
;

81 *
	mbuf
;

82 
size_t
 
	mbufsize
;

83 
size_t
 
	mbuÊí
;

84 *
	m£ndbuf
;

85 
size_t
 
	m£ndbufsize
;

86 
size_t
 
	m£ndbuÊí
;

87 #ifde‡
MULTITASKING_ENABLED


88 
CFRódSåómRef
 
	mªadSåóm
;

89 
CFWrôeSåómRef
 
	mwrôeSåóm
;

91 
	m«âed_ù
[65];

92 
	m«âed_p‹t
;

93 
	mïhemîÆ_p‹t
;

94 
	mövÆid
;

95 
	mis_£rvî
;

96 
time_t
 
	mt˝_max_timeout
;

97 
time_t
 
	mt˝_ö¥ogªss_max_timeout
;

98 
	mªg_ˇŒ_id
[64];

99 
time_t
 
	mpög_rfc5626
;

100 
	mp⁄g_suµ‹ãd
;

103 #i‚de‡
SOCKET_TIMEOUT


106 
	#SOCKET_TIMEOUT
 0

	)

109 
_t˝_é_£nd_socköfo
(
eXosù_t
 *
exc⁄ãxt
, 
_t˝_°ªam
 *
socköfo
, c⁄° *
msg
, 
msgÀn
);

111 
	seXét˝
 {

112 
	mt˝_sockë
;

113 
sockaddr_°‹age
 
	mai_addr
;

114 
	mai_addr_Àn
;

116 
_t˝_°ªam
 
	msockë_èb
[
EXOSIP_MAX_SOCKETS
];

119 
	$t˝_é_öô
(
eXosù_t
 *
exc⁄ãxt
) {

120 
eXét˝
 *
ª£rved
 = (eXét˝ *Ë
	`osù_mÆloc
((eXtltcp));

122 i‡(
ª£rved
 =
NULL
)

123  
OSIP_NOMEM
;

125 
ª£rved
->
t˝_sockë
 = 0;

126 
	`mem£t
(&
ª£rved
->
ai_addr
, 0, (
sockaddr_°‹age
));

127 
ª£rved
->
ai_addr_Àn
 = 0;

128 
	`mem£t
(&
ª£rved
->
sockë_èb
, 0, (
_t˝_°ªam
Ë* 
EXOSIP_MAX_SOCKETS
);

130 
exc⁄ãxt
->
eXét˝_ª£rved
 = 
ª£rved
;

131  
OSIP_SUCCESS
;

132 
	}
}

134 
	$_t˝_é_˛o£_socköfo
(
eXosù_t
 *
exc⁄ãxt
, 
_t˝_°ªam
 *
socköfo
) {

136 
	`_eXosù_m¨k_Æl_å™ß˘i⁄_å™•‹t_îr‹
(
exc⁄ãxt
, 
socköfo
->
sockë
);

138 
	`_eXosù_˛o£sockë
(
socköfo
->
sockë
);

140 i‡(
socköfo
->
buf
 !
NULL
)

141 
	`osù_‰ì
(
socköfo
->
buf
);

143 i‡(
socköfo
->
£ndbuf
 !
NULL
)

144 
	`osù_‰ì
(
socköfo
->
£ndbuf
);

146 #ifde‡
MULTITASKING_ENABLED


148 i‡(
socköfo
->
ªadSåóm
 !
NULL
) {

149 
	`CFRódSåómClo£
(
socköfo
->
ªadSåóm
);

150 
	`CFRñó£
(
socköfo
->
ªadSåóm
);

153 i‡(
socköfo
->
wrôeSåóm
 !
NULL
) {

154 
	`CFWrôeSåómClo£
(
socköfo
->
wrôeSåóm
);

155 
	`CFRñó£
(
socköfo
->
wrôeSåóm
);

159 
	`mem£t
(
socköfo
, 0, (*sockinfo));

160 
	}
}

162 
	$t˝_é_‰ì
(
eXosù_t
 *
exc⁄ãxt
) {

163 
eXét˝
 *
ª£rved
 = (eXét˝ *Ë
exc⁄ãxt
->
eXét˝_ª£rved
;

164 
pos
;

166 i‡(
ª£rved
 =
NULL
)

167  
OSIP_SUCCESS
;

169 
	`mem£t
(&
ª£rved
->
ai_addr
, 0, (
sockaddr_°‹age
));

170 
ª£rved
->
ai_addr_Àn
 = 0;

172 i‡(
ª£rved
->
t˝_sockë
 > 0)

173 
	`_eXosù_˛o£sockë
(
ª£rved
->
t˝_sockë
);

175 
pos
 = 0;Öo†< 
EXOSIP_MAX_SOCKETS
;Öos++) {

176 i‡(
ª£rved
->
sockë_èb
[
pos
].
sockë
 > 0) {

177 
	`_t˝_é_˛o£_socköfo
(
exc⁄ãxt
, &
ª£rved
->
sockë_èb
[
pos
]);

181 
	`osù_‰ì
(
ª£rved
);

182 
exc⁄ãxt
->
eXét˝_ª£rved
 = 
NULL
;

183  
OSIP_SUCCESS
;

184 
	}
}

186 
	$t˝_é_›í
(
eXosù_t
 *
exc⁄ãxt
) {

187 
eXét˝
 *
ª£rved
 = (eXét˝ *Ë
exc⁄ãxt
->
eXét˝_ª£rved
;

188 
ªs
;

189 
addröfo
 *addröfÿ
NULL
;

190 
addröfo
 *
curöfo
;

191 
sock
 = -1;

192 *
node
 = 
NULL
;

193 
eb
[
ERRBSIZ
];

195 i‡(
ª£rved
 =
NULL
) {

196 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] [TCP] wrong state: createÅransportÜayer first\n"));

197  
OSIP_WRONG_STATE
;

200 
exc⁄ãxt
->
eXé_å™•‹t
.
¥Ÿo_loˇl_p‹t
 =Éxc⁄ãxt->eXé_å™•‹t.
¥Ÿo_p‹t
;

202 i‡(
exc⁄ãxt
->
eXé_å™•‹t
.
¥Ÿo_loˇl_p‹t
 < 0)

203 
exc⁄ãxt
->
eXé_å™•‹t
.
¥Ÿo_loˇl_p‹t
 = 5060;

205 i‡(
	`osù_°rˇ£cmp
(
exc⁄ãxt
->
eXé_å™•‹t
.
¥Ÿo_ifs
, "0.0.0.0") != 0 && osip_strcasecmp(excontext->eXtl_transport.proto_ifs, "::") != 0)

206 
node
 = 
exc⁄ãxt
->
eXé_å™•‹t
.
¥Ÿo_ifs
;

208 
ªs
 = 
	`_eXosù_gë_addröfo
(
exc⁄ãxt
, &
addröfo
, 
node
,Éxc⁄ãxt->
eXé_å™•‹t
.
¥Ÿo_loˇl_p‹t
,Éxc⁄ãxt->eXé_å™•‹t.
¥Ÿo_num
);

210 i‡(
ªs
)

213 
curöfo
 = 
addröfo
; curöfo; curöfÿcuröfo->
ai_√xt
) {

214 #ifde‡
ENABLE_MAIN_SOCKET


215 
sockÀn_t
 
Àn
;

217 
ty≥
;

219 i‡(
curöfo
->
ai_¥Ÿocﬁ
 && curöfo->ai_¥Ÿocﬁ !
exc⁄ãxt
->
eXé_å™•‹t
.
¥Ÿo_num
) {

220 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO3
, 
NULL
, "[eXosù] [TCP] skùpögÖrŸocﬁ [%d]\n", 
curöfo
->
ai_¥Ÿocﬁ
));

224 
ty≥
 = 
curöfo
->
ai_sockty≥
;

225 #i‡
	`deföed
(
SOCK_CLOEXEC
)

226 
ty≥
 = 
SOCK_CLOEXEC
 |Åype;

228 
sock
 = (Ë
	`sockë
(
curöfo
->
ai_Ámûy
, 
ty≥
, curöfo->
ai_¥Ÿocﬁ
);

230 i‡(
sock
 < 0) {

231 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosù] [TCP] c™nŸ cª©êsockë %s\n", 
	`_ex_°ªº‹
(
ex_î∫o
, 
eb
, 
ERRBSIZ
)));

235 i‡(
curöfo
->
ai_Ámûy
 =
AF_INET6
) {

236 #ifde‡
IPV6_V6ONLY


238 i‡(
	`£tsock›t_ùv6⁄ly
(
sock
)) {

239 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosù] [TCP] c™nŸ së sockë o±i⁄ %s\n", 
	`_ex_°ªº‹
(
ex_î∫o
, 
eb
, 
ERRBSIZ
)));

240 
	`_eXosù_˛o£sockë
(
sock
);

241 
sock
 = -1;

249 
vÆ›t
 = 1;

251 
	`£tsock›t
(
sock
, 
SOL_SOCKET
, 
SO_REUSEADDR
, (*Ë&
vÆ›t
, (valopt));

254 #ifde‡
ENABLE_MAIN_SOCKET


255 
ªs
 = 
	`böd
(
sock
, 
curöfo
->
ai_addr
, (
sockÀn_t
Ëcuröfo->
ai_addæí
);

257 i‡(
ªs
 < 0) {

258 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosù] [TCP] c™nŸ böd sockë [%s][%s] %s\n", 
exc⁄ãxt
->
eXé_å™•‹t
.
¥Ÿo_ifs
, (
curöfo
->
ai_Ámûy
 =
AF_INET
Ë? "AF_INET" : "AF_INET6", 
	`_ex_°ªº‹
(
ex_î∫o
, 
eb
, 
ERRBSIZ
)));

259 
	`_eXosù_˛o£sockë
(
sock
);

260 
sock
 = -1;

264 
Àn
 = (
ª£rved
->
ai_addr
);

265 
ªs
 = 
	`gësock«me
(
sock
, (
sockaddr
 *Ë&
ª£rved
->
ai_addr
, &
Àn
);

267 i‡(
ªs
 != 0) {

268 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosù] [TCP] c™nŸ gë sockëÇamê%s\n", 
	`_ex_°ªº‹
(
ex_î∫o
, 
eb
, 
ERRBSIZ
)));

269 
	`mem˝y
(&
ª£rved
->
ai_addr
, 
curöfo
->ai_addr, curöfo->
ai_addæí
);

272 
ª£rved
->
ai_addr_Àn
 = 
Àn
;

274 i‡(
exc⁄ãxt
->
eXé_å™•‹t
.
¥Ÿo_num
 =
IPPROTO_TCP
) {

275 
ªs
 = 
	`li°í
(
sock
, 
SOMAXCONN
);

277 i‡(
ªs
 < 0) {

278 
	`OSIP_TRACE
(

279 
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosù] [TCP] c™nŸ böd sockë [%s][%s] %s\n", 
exc⁄ãxt
->
eXé_å™•‹t
.
¥Ÿo_ifs
, (
curöfo
->
ai_Ámûy
 =
AF_INET
Ë? "AF_INET" : "AF_INET6", 
	`_ex_°ªº‹
(
ex_î∫o
, 
eb
, 
ERRBSIZ
)));

280 
	`_eXosù_˛o£sockë
(
sock
);

281 
sock
 = -1;

291 
	`_eXosù_‰ìaddröfo
(
addröfo
);

293 i‡(
sock
 < 0) {

294 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosù] [TCP] c™nŸ böd o¿p‹à[%i]\n", 
exc⁄ãxt
->
eXé_å™•‹t
.
¥Ÿo_loˇl_p‹t
));

298 
ª£rved
->
t˝_sockë
 = 
sock
;

300 i‡(
exc⁄ãxt
->
eXé_å™•‹t
.
¥Ÿo_loˇl_p‹t
 == 0) {

302 i‡(
ª£rved
->
ai_addr
.
ss_Ámûy
 =
AF_INET
)

303 
exc⁄ãxt
->
eXé_å™•‹t
.
¥Ÿo_loˇl_p‹t
 = 
	`¡ohs
(((
sockaddr_ö
 *Ë&
ª£rved
->
ai_addr
)->
sö_p‹t
);

306 
exc⁄ãxt
->
eXé_å™•‹t
.
¥Ÿo_loˇl_p‹t
 = 
	`¡ohs
(((
sockaddr_ö6
 *Ë&
ª£rved
->
ai_addr
)->
sö6_p‹t
);

308 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO1
, 
NULL
, "[eXosù] [TCP] bödög o¿p‹à[%i]\n", 
exc⁄ãxt
->
eXé_å™•‹t
.
¥Ÿo_loˇl_p‹t
));

311 #ifde‡
ENABLE_MAIN_SOCKET


312 #ifde‡
HAVE_SYS_EPOLL_H


314 i‡(
exc⁄ãxt
->
pﬁl_mëhod
 =
EXOSIP_USE_EPOLL_LT
) {

315 
ïﬁl_evít
 
ev
;

317 
	`mem£t
(&
ev
, 0, (
ïﬁl_evít
));

318 
ev
.
evíts
 = 
EPOLLIN
;

319 
ev
.
d©a
.
fd
 = 
sock
;

320 
ªs
 = 
	`ïﬁl_˘l
(
exc⁄ãxt
->
ïfd
, 
EPOLL_CTL_ADD
, 
sock
, &
ev
);

322 i‡(
ªs
 < 0) {

323 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosù] [TCP] c™nŸÖﬁ»⁄ maöÅ˝ sockë [%i]\n", 
exc⁄ãxt
->
eXé_å™•‹t
.
¥Ÿo_loˇl_p‹t
));

324 
	`_eXosù_˛o£sockë
(
sock
);

325 
ª£rved
->
t˝_sockë
 = -1;

333  
OSIP_SUCCESS
;

334 
	}
}

336 
	$t˝_é_ª£t
(
eXosù_t
 *
exc⁄ãxt
) {

337 
eXét˝
 *
ª£rved
 = (eXét˝ *Ë
exc⁄ãxt
->
eXét˝_ª£rved
;

338 
pos
;

340 i‡(
ª£rved
 =
NULL
) {

341 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] [TCP] wrong state: createÅransportÜayer first\n"));

342  
OSIP_WRONG_STATE
;

345 
pos
 = 0;Öo†< 
EXOSIP_MAX_SOCKETS
;Öos++) {

346 i‡(
ª£rved
->
sockë_èb
[
pos
].
sockë
 > 0)

347 
ª£rved
->
sockë_èb
[
pos
].
övÆid
 = 1;

350  
OSIP_SUCCESS
;

351 
	}
}

353 
	$t˝_é_£t_fd£t
(
eXosù_t
 *
exc⁄ãxt
, 
fd_£t
 *
osù_fd£t
, fd_£à*
osù_wr£t
, fd_£à*
osù_ex˚±£t
, *
fd_max
, *
osù_fd_èbÀ
) {

354 
eXét˝
 *
ª£rved
 = (eXét˝ *Ë
exc⁄ãxt
->
eXét˝_ª£rved
;

355 
pos
;

356 
pos_fd
 = 0;

358 i‡(
ª£rved
 =
NULL
) {

359 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] [TCP] wrong state: createÅransportÜayer first\n"));

360  
OSIP_WRONG_STATE
;

363 #ifde‡
ENABLE_MAIN_SOCKET


365 i‡(
ª£rved
->
t˝_sockë
 <= 0)

368 i‡(
osù_fd£t
 !
NULL
)

369 
	`eXFD_SET
(
ª£rved
->
t˝_sockë
, 
osù_fd£t
);

371 i‡(
ª£rved
->
t˝_sockë
 > *
fd_max
)

372 *
fd_max
 = 
ª£rved
->
t˝_sockë
;

377 
pos
 = 0;Öo†< 
EXOSIP_MAX_SOCKETS
;Öos++) {

379 i‡(
ª£rved
->
sockë_èb
[
pos
].
övÆid
 > 0) {

380 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosù] [TCP] [fd£t] sockë info:[%s][%d] [sock=%d] [pos=%d] m™uÆÑe£t\n", 
ª£rved
->
sockë_èb
[
pos
].
ªmŸe_ù
,Ñe£rved->sockë_èb[pos].
ªmŸe_p‹t
,Ñe£rved->sockë_èb[pos].
sockë
,Öos));

381 
	`_eXosù_m¨k_ªgi°øti⁄_expúed
(
exc⁄ãxt
, 
ª£rved
->
sockë_èb
[
pos
].
ªg_ˇŒ_id
);

382 
	`_t˝_é_˛o£_socköfo
(
exc⁄ãxt
, &
ª£rved
->
sockë_èb
[
pos
]);

386 i‡(
ª£rved
->
sockë_èb
[
pos
].
sockë
 > 0) {

387 i‡(
osù_fd£t
 !
NULL
)

388 
	`eXFD_SET
(
ª£rved
->
sockë_èb
[
pos
].
sockë
, 
osù_fd£t
);

389 
osù_fd_èbÀ
[
pos_fd
] = 
ª£rved
->
sockë_èb
[
pos
].
sockë
;

390 
pos_fd
++;

392 i‡(
ª£rved
->
sockë_èb
[
pos
].
sockë
 > *
fd_max
)

393 *
fd_max
 = 
ª£rved
->
sockë_èb
[
pos
].
sockë
;

395 i‡(
osù_wr£t
 !
NULL
 && 
ª£rved
->
sockë_èb
[
pos
].
£ndbuÊí
 > 0)

396 
	`eXFD_SET
(
ª£rved
->
sockë_èb
[
pos
].
sockë
, 
osù_wr£t
);

398 i‡(
osù_wr£t
 !
NULL
 && 
ª£rved
->
sockë_èb
[
pos
].
t˝_ö¥ogªss_max_timeout
 > 0)

399 
	`eXFD_SET
(
ª£rved
->
sockë_èb
[
pos
].
sockë
, 
osù_wr£t
);

400 i‡(
osù_ex˚±£t
 !
NULL
 && 
ª£rved
->
sockë_èb
[
pos
].
t˝_ö¥ogªss_max_timeout
 > 0)

401 
	`eXFD_SET
(
ª£rved
->
sockë_èb
[
pos
].
sockë
, 
osù_ex˚±£t
);

405  
OSIP_SUCCESS
;

406 
	}
}

410 *
	$buf„r_föd
(c⁄° *
hay°ack
, 
size_t
 
hay°ack_Àn
, c⁄° *
√edÀ
) {

411 c⁄° *
£¨ch
 = 
hay°ack
, *
íd
 = hay°ack + 
hay°ack_Àn
;

412 *
p
;

413 
size_t
 
Àn
 = 
	`°æí
(
√edÀ
);

415 
£¨ch
 < 
íd
 && (
p
 = 
	`memchr
(£¨ch, *
√edÀ
,Énd - sórch)Ë!
NULL
) {

416 i‡(
p
 + 
Àn
 > 
íd
)

419 i‡(
	`memcmp
(
p
, 
√edÀ
, 
Àn
) == 0)

420  (
p
);

422 
£¨ch
 = 
p
 + 1;

425  (
NULL
);

426 
	}
}

428 
	#END_HEADERS_STR
 "\r\n\r\n"

	)

429 
	#CLEN_HEADER_STR
 "\r\nc⁄ã¡-Àngth:"

	)

430 
	#CLEN_HEADER_COMPACT_STR
 "\r\∆:"

	)

431 
	#CLEN_HEADER_STR2
 "\r\nc⁄ã¡-Àngth "

	)

432 
	#CLEN_HEADER_COMPACT_STR2
 "\r\∆ "

	)

433 
	#c⁄°_°æí
(
x
Ë(((x)Ë- 1)

	)

437 
size_t
 
	$h™dÀ_mesßges
(
eXosù_t
 *
exc⁄ãxt
, 
_t˝_°ªam
 *
socköfo
) {

438 
size_t
 
c⁄sumed
 = 0;

439 *
buf
 = 
socköfo
->buf;

440 
size_t
 
buÊí
 = 
socköfo
->buflen;

441 *
íd_hódîs
;

443 
buÊí
 > 0 && (
íd_hódîs
 = 
	`buf„r_föd
(
buf
, buÊí, 
END_HEADERS_STR
)Ë!
NULL
) {

444 
˛í
;

445 
size_t
 
msgÀn
;

446 *
˛í_hódî
;

448 i‡(
buf
 =
íd_hódîs
) {

450 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO1
, 
NULL
, "[eXosù] [TCP] sockë [%s][%d]Ñfc5626 [doubÀ]p⁄gÑe˚ived [CRLFCRLF]\n", 
socköfo
->
ªmŸe_ù
, socköfo->
ªmŸe_p‹t
));

451 
c⁄sumed
 += 4;

452 
buÊí
 -= 4;

453 
buf
 += 4;

454 
socköfo
->
pög_rfc5626
 = 0;

459 *
íd_hódîs
 = '\0';

462 
˛í_hódî
 = 
	`osù_°rˇ£°r
(
buf
, 
CLEN_HEADER_STR
);

464 i‡(!
˛í_hódî
)

465 
˛í_hódî
 = 
	`osù_°rˇ£°r
(
buf
, 
CLEN_HEADER_STR2
);

467 i‡(!
˛í_hódî
)

468 
˛í_hódî
 = 
	`osù_°rˇ£°r
(
buf
, 
CLEN_HEADER_COMPACT_STR
);

470 i‡(!
˛í_hódî
)

471 
˛í_hódî
 = 
	`osù_°rˇ£°r
(
buf
, 
CLEN_HEADER_COMPACT_STR2
);

473 i‡(
˛í_hódî
 !
NULL
) {

474 
˛í_hódî
 = 
	`°rchr
(clen_header, ':');

475 
˛í_hódî
++;

478 i‡(!
˛í_hódî
) {

482 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO1
, 
NULL
, "[eXosù] [TCP] sockë [%s][%d] mesßgêha†nÿc⁄ã¡-Àngth: <%s>\n", 
socköfo
->
ªmŸe_ù
, socköfo->
ªmŸe_p‹t
, 
buf
));

485 
˛í
 = 
˛í_hódî
 ? 
	`©oi
(clen_header) : 0;

487 i‡(
˛í
 < 0)

488  
socköfo
->
buÊí
;

491 *
íd_hódîs
 = 
END_HEADERS_STR
[0];

492 
íd_hódîs
 +
	`c⁄°_°æí
(
END_HEADERS_STR
);

495 
msgÀn
 = (
íd_hódîs
 - 
buf
 + 
˛í
);

497 i‡(
msgÀn
 > 
buÊí
) {

499  
c⁄sumed
;

503 
	`_eXosù_h™dÀ_öcomög_mesßge
(
exc⁄ãxt
, 
buf
, 
msgÀn
, 
socköfo
->
sockë
, socköfo->
ªmŸe_ù
, socköfo->
ªmŸe_p‹t
, socköfo->
«âed_ù
, &socköfo->
«âed_p‹t
);

504 
c⁄sumed
 +
msgÀn
;

505 
buÊí
 -
msgÀn
;

506 
buf
 +
msgÀn
;

509 i‡(
buÊí
 =2 && 
buf
[0] == '\r' && buf[1] == '\n') {

510 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO1
, 
NULL
, "[eXosù] [TCP] sockë [%s][%d]Ñfc5626Ö⁄gÑe˚ived [CRLF]\n", 
socköfo
->
ªmŸe_ù
, socköfo->
ªmŸe_p‹t
, 
buf
));

511 
c⁄sumed
 += 2;

512 
buÊí
 -= 2;

513 
buf
 += 2;

514 
socköfo
->
pög_rfc5626
 = 0;

515 
socköfo
->
p⁄g_suµ‹ãd
 = 1;

518  
c⁄sumed
;

519 
	}
}

521 
	$_t˝_é_ªcv
(
eXosù_t
 *
exc⁄ãxt
, 
_t˝_°ªam
 *
socköfo
) {

522 
r
;

523 
eb
[
ERRBSIZ
];

525 i‡(!
socköfo
->
buf
) {

526 
socköfo
->
buf
 = (*Ë
	`osù_mÆloc
(
SIP_MESSAGE_MAX_LENGTH
);

528 i‡(
socköfo
->
buf
 =
NULL
)

529  
OSIP_NOMEM
;

531 
socköfo
->
bufsize
 = 
SIP_MESSAGE_MAX_LENGTH
;

532 
socköfo
->
buÊí
 = 0;

536 i‡(
socköfo
->
bufsize
 - socköfo->
buÊí
 <= 0) {

537 
socköfo
->
buf
 = (*Ë
	`osù_ªÆloc
(socköfo->buf, socköfo->
bufsize
 + 1000);

539 i‡(
socköfo
->
buf
 =
NULL
)

540  
OSIP_NOMEM
;

542 
socköfo
->
bufsize
 = sockinfo->bufsize + 1000;

546 i‡(
socköfo
->
buÊí
 =0 && socköfo->
bufsize
 > 
SIP_MESSAGE_MAX_LENGTH
) {

547 
	`osù_‰ì
(
socköfo
->
buf
);

548 
socköfo
->
buf
 = (*Ë
	`osù_mÆloc
(
SIP_MESSAGE_MAX_LENGTH
);

550 i‡(
socköfo
->
buf
 =
NULL
)

551  
OSIP_NOMEM
;

553 
socköfo
->
bufsize
 = 
SIP_MESSAGE_MAX_LENGTH
;

556 
r
 = (Ë
	`ªcv
(
socköfo
->
sockë
, socköfo->
buf
 + socköfo->
buÊí
, (Ë(socköfo->
bufsize
 - sockinfo->buflen), 0);

558 i‡(
r
 == 0) {

559 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO1
, 
NULL
, "[eXosù] [TCP] sockë [%s][%d]Éof\n", 
socköfo
->
ªmŸe_ù
, socköfo->
ªmŸe_p‹t
));

560 
	`_eXosù_m¨k_ªgi°øti⁄_expúed
(
exc⁄ãxt
, 
socköfo
->
ªg_ˇŒ_id
);

561 
	`_t˝_é_˛o£_socköfo
(
exc⁄ãxt
, 
socköfo
);

562  
OSIP_UNDEFINED_ERROR
;

564 } i‡(
r
 < 0) {

565 
vÆ›t
 = 
ex_î∫o
;

567 i‡(
	`is_wouldblock_îr‹
(
vÆ›t
))

568  
OSIP_SUCCESS
;

572 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO1
, 
NULL
, "[eXosù] [TCP] sockë [%s][%d]Éº‹ %s\n", 
socköfo
->
ªmŸe_ù
, socköfo->
ªmŸe_p‹t
, 
	`_ex_°ªº‹
(
vÆ›t
, 
eb
, 
ERRBSIZ
)));

573 
	`_eXosù_m¨k_ªgi°øti⁄_expúed
(
exc⁄ãxt
, 
socköfo
->
ªg_ˇŒ_id
);

574 
	`_t˝_é_˛o£_socköfo
(
exc⁄ãxt
, 
socköfo
);

575  
OSIP_UNDEFINED_ERROR
;

578 
size_t
 
c⁄sumed
;

580 
socköfo
->
t˝_max_timeout
 = 0;

581 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO1
, 
NULL
, "[eXosù] [TCP] sockë [%s][%d]Ñód %d byãs\n", 
socköfo
->
ªmŸe_ù
, socköfo->
ªmŸe_p‹t
, 
r
));

582 
socköfo
->
buÊí
 +
r
;

583 
c⁄sumed
 = 
	`h™dÀ_mesßges
(
exc⁄ãxt
, 
socköfo
);

585 i‡(
c⁄sumed
 == 0) {

586  
OSIP_SUCCESS
;

589 i‡(
socköfo
->
buÊí
 > 
c⁄sumed
) {

590 
	`memmove
(
socköfo
->
buf
, socköfo->bu‡+ 
c⁄sumed
, socköfo->
buÊí
 - consumed);

591 
socköfo
->
buÊí
 -
c⁄sumed
;

594 
socköfo
->
buÊí
 = 0;

597  
OSIP_SUCCESS
;

600 
	}
}

602 
	$_t˝_ªad_t˝_maö_sockë
(
eXosù_t
 *
exc⁄ãxt
) {

603 
eXét˝
 *
ª£rved
 = (eXét˝ *Ë
exc⁄ãxt
->
eXét˝_ª£rved
;

606 
§c6ho°
[
NI_MAXHOST
];

607 
ªcvp‹t
 = 0;

608 
sockaddr_°‹age
 
ß
;

609 
sock
;

610 
i
;

612 
sockÀn_t
 
¶í
;

613 
pos
;

614 
vÆ›t
;

616 i‡(
ª£rved
->
ai_addr
.
ss_Ámûy
 =
AF_INET
)

617 
¶í
 = (
sockaddr_ö
);

620 
¶í
 = (
sockaddr_ö6
);

622 
pos
 = 0;Öo†< 
EXOSIP_MAX_SOCKETS
;Öos++) {

623 i‡(
ª£rved
->
sockë_èb
[
pos
].
sockë
 == 0)

627 i‡(
pos
 =
EXOSIP_MAX_SOCKETS
) {

629 
pos
 = 0;

631 i‡(
ª£rved
->
sockë_èb
[
pos
].
sockë
 > 0) {

632 
	`_eXosù_m¨k_ªgi°øti⁄_expúed
(
exc⁄ãxt
, 
ª£rved
->
sockë_èb
[
pos
].
ªg_ˇŒ_id
);

633 
	`_t˝_é_˛o£_socköfo
(
exc⁄ãxt
, &
ª£rved
->
sockë_èb
[
pos
]);

636 
	`mem£t
(&
ª£rved
->
sockë_èb
[
pos
], 0, (reserved->socket_tab[pos]));

639 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO3
, 
NULL
, "[eXosù] [TCP] cª©ög TCP sockëáàödex [%i]\n", 
pos
));

641 
sock
 = (Ë
	`ac˚±
(
ª£rved
->
t˝_sockë
, (
sockaddr
 *Ë&
ß
, (
sockÀn_t
 *Ë&
¶í
);

643 i‡(
sock
 < 0) {

644 #i‡
	`deföed
(
EBADF
)

645 
vÆ›t
 = 
ex_î∫o
;

647 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] [TCP]Érroráccepting TCP socket\n"));

648 #i‡
	`deföed
(
EBADF
)

650 i‡(
vÆ›t
 =
EBADF
) {

651 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] [TCP]Érroráccepting TCP socket [EBADF]\n"));

652 
	`mem£t
(&
ª£rved
->
ai_addr
, 0, (
sockaddr_°‹age
));

654 i‡(
ª£rved
->
t˝_sockë
 > 0) {

655 
	`_eXosù_˛o£sockë
(
ª£rved
->
t˝_sockë
);

657 
i
 = 0; i < 
EXOSIP_MAX_SOCKETS
; i++) {

658 i‡(
ª£rved
->
sockë_èb
[
i
].
sockë
 > 0 &&Ñe£rved->sockë_èb[i].
is_£rvî
 > 0) {

659 
	`_eXosù_m¨k_ªgi°øti⁄_expúed
(
exc⁄ãxt
, 
ª£rved
->
sockë_èb
[
i
].
ªg_ˇŒ_id
);

660 
	`_t˝_é_˛o£_socköfo
(
exc⁄ãxt
, &
ª£rved
->
sockë_èb
[
i
]);

665 
	`t˝_é_›í
(
exc⁄ãxt
);

671 
ª£rved
->
sockë_èb
[
pos
].
sockë
 = 
sock
;

672 
ª£rved
->
sockë_èb
[
pos
].
is_£rvî
 = 1;

673 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO1
, 
NULL
, "[eXosip] [TCP] incoming TCP connectionáccepted\n"));

675 
vÆ›t
 = 1;

676 
	`£tsock›t
(
sock
, 
SOL_SOCKET
, 
SO_REUSEADDR
, (*Ë&
vÆ›t
, (valopt));

678 
	`mem£t
(
§c6ho°
, 0, 
NI_MAXHOST
);

679 
ªcvp‹t
 = 
	`_eXosù_gëp‹t
((
sockaddr
 *Ë&
ß
);

680 
	`_eXosù_gë«meöfo
((
sockaddr
 *Ë&
ß
, 
¶í
, 
§c6ho°
, 
NI_MAXHOST
, 
NULL
, 0, 
NI_NUMERICHOST
);

682 
	`_eXosù_å™•‹t_£t_ds˝
(
exc⁄ãxt
, 
ß
.
ss_Ámûy
, 
sock
);

684 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO1
, 
NULL
, "[eXosù] [TCP] mesßgêª˚ived from [%s][%d]\n", 
§c6ho°
, 
ªcvp‹t
));

685 
	`osù_°∫˝y
(
ª£rved
->
sockë_èb
[
pos
].
ªmŸe_ù
, 
§c6ho°
, (reserved->socket_tab[pos].remote_ip) - 1);

686 
ª£rved
->
sockë_èb
[
pos
].
ªmŸe_p‹t
 = 
ªcvp‹t
;

688 #ifde‡
HAVE_SYS_EPOLL_H


690 i‡(
exc⁄ãxt
->
pﬁl_mëhod
 =
EXOSIP_USE_EPOLL_LT
) {

691 
ïﬁl_evít
 
ev
;

692 
ªs
;

694 
	`mem£t
(&
ev
, 0, (
ïﬁl_evít
));

695 
ev
.
evíts
 = 
EPOLLIN
;

696 
ev
.
d©a
.
fd
 = 
sock
;

697 
ªs
 = 
	`ïﬁl_˘l
(
exc⁄ãxt
->
ïfd
, 
EPOLL_CTL_ADD
, 
sock
, &
ev
);

699 i‡(
ªs
 < 0) {

700 
	`_t˝_é_˛o£_socköfo
(
exc⁄ãxt
, &
ª£rved
->
sockë_èb
[
pos
]);

708  
OSIP_SUCCESS
;

709 
	}
}

711 #ifde‡
HAVE_SYS_EPOLL_H


713 
	$t˝_é_ïﬁl_ªad_mesßge
(
eXosù_t
 *
exc⁄ãxt
, 
nfds
, 
ïﬁl_evít
 *
ï_¨øy
) {

714 
eXét˝
 *
ª£rved
 = (eXét˝ *Ë
exc⁄ãxt
->
eXét˝_ª£rved
;

715 
pos
 = 0;

716 
n
;

718 i‡(
ª£rved
 =
NULL
) {

719 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] [TCP] wrong state: createÅransportÜayer first\n"));

720  
OSIP_WRONG_STATE
;

723 
n
 = 0;Ç < 
nfds
; ++n) {

724 i‡(
ï_¨øy
[
n
].
d©a
.
fd
 =
ª£rved
->
t˝_sockë
) {

725 
	`_t˝_ªad_t˝_maö_sockë
(
exc⁄ãxt
);

729 
pos
 = 0;Öo†< 
EXOSIP_MAX_SOCKETS
;Öos++) {

730 i‡(
ª£rved
->
sockë_èb
[
pos
].
sockë
 > 0) {

731 i‡(
ï_¨øy
[
n
].
d©a
.
fd
 =
ª£rved
->
sockë_èb
[
pos
].
sockë
) {

732 i‡((
ï_¨øy
[
n
].
evíts
 & 
EPOLLOUT
Ë&& 
ª£rved
->
sockë_èb
[
pos
].
t˝_ö¥ogªss_max_timeout
 > 0) {

733 
	`_eXosù_m¨k_Æl_å™ß˘i⁄_f‹˚_£nd
(
exc⁄ãxt
, 
ª£rved
->
sockë_èb
[
pos
].
sockë
);

734 } i‡((
ï_¨øy
[
n
].
evíts
 & 
EPOLLOUT
Ë&& 
ª£rved
->
sockë_èb
[
pos
].
£ndbuÊí
 > 0) {

735 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO1
, 
NULL
, "[eXosù] [TCP] [tid=-1] mesßgê£¡ [Àn=%d]Åÿ[%s][%d]\n%s\n", 
ª£rved
->
sockë_èb
[
pos
].
£ndbuÊí
,Ñe£rved->sockë_èb[pos].
ªmŸe_ù
,

736 
ª£rved
->
sockë_èb
[
pos
].
ªmŸe_p‹t
,Ñe£rved->sockë_èb[pos].
£ndbuf
));

737 
	`_t˝_é_£nd_socköfo
(
exc⁄ãxt
, &
ª£rved
->
sockë_èb
[
pos
], (c⁄° *Ëª£rved->sockë_èb[pos].
£ndbuf
, (Ëª£rved->sockë_èb[pos].
£ndbuÊí
);

738 
ª£rved
->
sockë_èb
[
pos
].
£ndbuÊí
 = 0;

741 i‡(
ª£rved
->
sockë_èb
[
pos
].
t˝_ö¥ogªss_max_timeout
 =0 && (
ï_¨øy
[
n
].
evíts
 & 
EPOLLIN
)) {

742 
ã°
 = 0;

743 
ã°
++;

745 
	`_t˝_é_ªcv
(
exc⁄ãxt
, &
ª£rved
->
sockë_èb
[
pos
]);

754  
OSIP_SUCCESS
;

755 
	}
}

759 
	$t˝_é_ªad_mesßge
(
eXosù_t
 *
exc⁄ãxt
, 
fd_£t
 *
osù_fd£t
, fd_£à*
osù_wr£t
, fd_£à*
osù_ex˚±£t
) {

760 
eXét˝
 *
ª£rved
 = (eXét˝ *Ë
exc⁄ãxt
->
eXét˝_ª£rved
;

761 
pos
 = 0;

763 i‡(
ª£rved
 =
NULL
) {

764 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] [TCP] wrong state: createÅransportÜayer first\n"));

765  
OSIP_WRONG_STATE
;

768 i‡(
	`FD_ISSET
(
ª£rved
->
t˝_sockë
, 
osù_fd£t
)) {

769 
	`_t˝_ªad_t˝_maö_sockë
(
exc⁄ãxt
);

772 
pos
 = 0;Öo†< 
EXOSIP_MAX_SOCKETS
;Öos++) {

773 i‡(
ª£rved
->
sockë_èb
[
pos
].
sockë
 > 0) {

774 i‡(
	`FD_ISSET
(
ª£rved
->
sockë_èb
[
pos
].
sockë
, 
osù_ex˚±£t
)) {

775 
ªs
 = 
	`_t˝és_é_is_c⁄√˘ed
(
exc⁄ãxt
->
pﬁl_mëhod
, 
ª£rved
->
sockë_èb
[
pos
].
sockë
);

776 i‡(
ªs
 < 0) {

777 
	`_eXosù_m¨k_ªgi°øti⁄_expúed
(
exc⁄ãxt
, 
ª£rved
->
sockë_èb
[
pos
].
ªg_ˇŒ_id
);

778 
	`_t˝_é_˛o£_socköfo
(
exc⁄ãxt
, &
ª£rved
->
sockë_èb
[
pos
]);

781 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_WARNING
, 
NULL
, "[eXosù] [TCP] [tid=-1] sockë [%s][%d]Éx˚± des¸ùt‹ wôhouàîr‹\n", 
ª£rved
->
sockë_èb
[
pos
].
ªmŸe_ù
,Ñe£rved->sockë_èb[pos].
ªmŸe_p‹t
));

783 } i‡(
	`FD_ISSET
(
ª£rved
->
sockë_èb
[
pos
].
sockë
, 
osù_wr£t
Ë&&Ñe£rved->sockë_èb[pos].
t˝_ö¥ogªss_max_timeout
 > 0) {

784 
	`_eXosù_m¨k_Æl_å™ß˘i⁄_f‹˚_£nd
(
exc⁄ãxt
, 
ª£rved
->
sockë_èb
[
pos
].
sockë
);

785 } i‡(
	`FD_ISSET
(
ª£rved
->
sockë_èb
[
pos
].
sockë
, 
osù_wr£t
Ë&&Ñe£rved->sockë_èb[pos].
£ndbuÊí
 > 0) {

786 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO1
, 
NULL
, "[eXosù] [TCP] [tid=-1] mesßgê£¡ [Àn=%d]Åÿ[%s][%d]\n%s\n", 
ª£rved
->
sockë_èb
[
pos
].
£ndbuÊí
,Ñe£rved->sockë_èb[pos].
ªmŸe_ù
,Ñe£rved->sockë_èb[pos].
ªmŸe_p‹t
,

787 
ª£rved
->
sockë_èb
[
pos
].
£ndbuf
));

788 
	`_t˝_é_£nd_socköfo
(
exc⁄ãxt
, &
ª£rved
->
sockë_èb
[
pos
], (c⁄° *Ëª£rved->sockë_èb[pos].
£ndbuf
, (Ëª£rved->sockë_èb[pos].
£ndbuÊí
);

789 
ª£rved
->
sockë_èb
[
pos
].
£ndbuÊí
 = 0;

792 i‡(
ª£rved
->
sockë_èb
[
pos
].
t˝_ö¥ogªss_max_timeout
 =0 && 
	`FD_ISSET
‘e£rved->sockë_èb[pos].
sockë
, 
osù_fd£t
)) {

793 
	`_t˝_é_ªcv
(
exc⁄ãxt
, &
ª£rved
->
sockë_èb
[
pos
]);

798  
OSIP_SUCCESS
;

799 
	}
}

801 
_t˝_°ªam
 *
	$_t˝_é_föd_socköfo
(
eXosù_t
 *
exc⁄ãxt
, 
sock
) {

802 
eXét˝
 *
ª£rved
 = (eXét˝ *Ë
exc⁄ãxt
->
eXét˝_ª£rved
;

803 
pos
;

805 
pos
 = 0;Öo†< 
EXOSIP_MAX_SOCKETS
;Öos++) {

806 i‡(
ª£rved
->
sockë_èb
[
pos
].
sockë
 =
sock
) {

807  &
ª£rved
->
sockë_èb
[
pos
];

811  
NULL
;

812 
	}
}

814 
	$_t˝_é_föd_sockë
(
eXosù_t
 *
exc⁄ãxt
, *
ho°
, 
p‹t
) {

815 
eXét˝
 *
ª£rved
 = (eXét˝ *Ë
exc⁄ãxt
->
eXét˝_ª£rved
;

816 
pos
;

818 
pos
 = 0;Öo†< 
EXOSIP_MAX_SOCKETS
;Öos++) {

819 i‡(
ª£rved
->
sockë_èb
[
pos
].
sockë
 != 0) {

820 i‡(0 =
	`osù_°rˇ£cmp
(
ª£rved
->
sockë_èb
[
pos
].
ªmŸe_ù
, 
ho°
Ë&& 
p‹t
 =ª£rved->sockë_èb[pos].
ªmŸe_p‹t
)

821  
pos
;

826 
	}
}

828 #ifde‡
HAVE_SYS_EPOLL_H


830 
	$_t˝és_é_is_c⁄√˘ed_ïﬁl
(
sock
) {

831 
ªs
;

832 
vÆ›t
;

833 
sockÀn_t
 
sock_Àn
;

834 
nfds
;

835 
ïﬁl_evít
 
ï_¨øy
;

836 
ïfd
;

837 
ïﬁl_evít
 
ev
;

838 
eb
[
ERRBSIZ
];

840 
ïfd
 = 
	`ïﬁl_¸óã
(1);

842 i‡(
ïfd
 < 0) {

846 
	`mem£t
(&
ev
, 0, (
ïﬁl_evít
));

847 
ev
.
evíts
 = 
EPOLLOUT
;

848 
ev
.
d©a
.
fd
 = 
sock
;

849 
ªs
 = 
	`ïﬁl_˘l
(
ïfd
, 
EPOLL_CTL_ADD
, 
sock
, &
ev
);

851 i‡(
ªs
 < 0) {

852 
	`_eXosù_˛o£sockë
(
ïfd
);

856 
nfds
 = 
	`ïﬁl_waô
(
ïfd
, &
ï_¨øy
, 1, 
SOCKET_TIMEOUT
);

858 i‡(
nfds
 > 0) {

859 
sock_Àn
 = ();

861 i‡(
	`gësock›t
(
sock
, 
SOL_SOCKET
, 
SO_ERROR
, (*Ë(&
vÆ›t
), &
sock_Àn
) == 0) {

862 i‡(
vÆ›t
 == 0) {

863 
	`_eXosù_˛o£sockë
(
ïfd
);

867 i‡(
vÆ›t
 =
EINPROGRESS
 || vÆ›à=
EALREADY
) {

868 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosù] [TXX] [ïﬁl] c™nŸ c⁄√˘ sockë [%i] / %s\n", 
sock
, 
	`_ex_°ªº‹
(
vÆ›t
, 
eb
, 
ERRBSIZ
)));

869 
	`_eXosù_˛o£sockë
(
ïfd
);

873 i‡(
	`is_wouldblock_îr‹
(
vÆ›t
)) {

874 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosù] [TXX] [ïﬁl] c™nŸ c⁄√˘ sockë [%i] would block / %s\n", 
sock
, 
	`_ex_°ªº‹
(
vÆ›t
, 
eb
, 
ERRBSIZ
)));

875 
	`_eXosù_˛o£sockë
(
ïfd
);

879 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosù] [TXX] [ïﬁl] c™nŸ c⁄√˘ sockë [%i] /Åîmö©ed %s\n", 
sock
, 
	`_ex_°ªº‹
(
vÆ›t
, 
eb
, 
ERRBSIZ
)));

881 
	`_eXosù_˛o£sockë
(
ïfd
);

885 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosù] [TXX] [ïﬁl] c™nŸ c⁄√˘ sockë /Éº‹ i¿gësock›à%s\n", 
	`_ex_°ªº‹
(
ex_î∫o
, 
eb
, 
ERRBSIZ
)));

886 
	`_eXosù_˛o£sockë
(
ïfd
);

890 } i‡(
ªs
 < 0) {

891 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosù] [TXX] [ïﬁl] c™nŸ c⁄√˘ sockë [%i] /Éº‹ i¿ïﬁ»%s\n", 
sock
, 
	`_ex_°ªº‹
(
ex_î∫o
, 
eb
, 
ERRBSIZ
)));

892 
	`_eXosù_˛o£sockë
(
ïfd
);

896 
	`_eXosù_˛o£sockë
(
ïfd
);

898 
	}
}

902 
	$_t˝és_é_is_c⁄√˘ed
(
ïﬁl_mëhod
, 
sock
) {

903 
ªs
;

904 
timevÆ
 
tv
;

905 
fd_£t
 
wr£t
;

906 
fd_£t
 
ex˚±£t
;

907 
vÆ›t
;

908 
sockÀn_t
 
sock_Àn
;

909 
eb
[
ERRBSIZ
];

911 #ifde‡
HAVE_SYS_EPOLL_H


913 i‡(
ïﬁl_mëhod
 =
EXOSIP_USE_EPOLL_LT
) {

914  
	`_t˝és_é_is_c⁄√˘ed_ïﬁl
(
sock
);

919 
tv
.
tv_£c
 = 
SOCKET_TIMEOUT
 / 1000;

920 
tv
.
tv_u£c
 = (
SOCKET_TIMEOUT
 % 1000) * 1000;

922 
	`FD_ZERO
(&
wr£t
);

923 
	`FD_ZERO
(&
ex˚±£t
);

924 
	`eXFD_SET
(
sock
, &
wr£t
);

925 
	`eXFD_SET
(
sock
, &
ex˚±£t
);

927 
ªs
 = 
	`£À˘
(
sock
 + 1, 
NULL
, &
wr£t
, &
ex˚±£t
, &
tv
);

929 i‡(
ªs
 > 0) {

930 
sock_Àn
 = ();

932 i‡(
	`gësock›t
(
sock
, 
SOL_SOCKET
, 
SO_ERROR
, (*Ë(&
vÆ›t
), &
sock_Àn
) == 0) {

933 i‡(
vÆ›t
 == 0)

936 #i‡!
	`deföed
(
HAVE_WINSOCK2_H
)

937 i‡(
vÆ›t
 =
EINPROGRESS
 || vÆ›à=
EALREADY
) {

938 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosù] [TXX] [£À˘] c™nŸ c⁄√˘ sockë [%i] / %s\n", 
sock
, 
	`_ex_°ªº‹
(
vÆ›t
, 
eb
, 
ERRBSIZ
)));

943 i‡(
	`is_wouldblock_îr‹
(
vÆ›t
)) {

944 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosù] [TXX] [£À˘] c™nŸ c⁄√˘ sockë [%i] would block / %s\n", 
sock
, 
	`_ex_°ªº‹
(
vÆ›t
, 
eb
, 
ERRBSIZ
)));

948 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosù] [TXX] [£À˘] c™nŸ c⁄√˘ sockë [%i] /Åîmö©ed %s\n", 
sock
, 
	`_ex_°ªº‹
(
vÆ›t
, 
eb
, 
ERRBSIZ
)));

952 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosù] [TXX] [£À˘] c™nŸ c⁄√˘ sockë /Éº‹ i¿gësock›à%s\n", 
	`_ex_°ªº‹
(
ex_î∫o
, 
eb
, 
ERRBSIZ
)));

955 } i‡(
ªs
 < 0) {

956 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosù] [TXX] [£À˘] c™nŸ c⁄√˘ sockë [%i] /Éº‹ i¿£À˘ %s\n", 
sock
, 
	`_ex_°ªº‹
(
ex_î∫o
, 
eb
, 
ERRBSIZ
)));

961 
	}
}

963 
	$_t˝_é_√w_sockë
(
eXosù_t
 *
exc⁄ãxt
, *
ho°
, 
p‹t
) {

964 
eXét˝
 *
ª£rved
 = (eXét˝ *Ë
exc⁄ãxt
->
eXét˝_ª£rved
;

965 
pos
;

966 
ªs
;

967 
addröfo
 *addröfÿ
NULL
;

968 
addröfo
 *
curöfo
;

969 
sock
 = -1;

970 
sockaddr
 
£À˘ed_ai_addr
;

971 
sockÀn_t
 
£À˘ed_ai_addæí
;

973 
§c6ho°
[
NI_MAXHOST
];

974 
eb
[
ERRBSIZ
];

976 
	`mem£t
(
§c6ho°
, 0, (src6host));

978 
£À˘ed_ai_addæí
 = 0;

979 
	`mem£t
(&
£À˘ed_ai_addr
, 0, (
sockaddr
));

981 
pos
 = 0;Öo†< 
EXOSIP_MAX_SOCKETS
;Öos++) {

982 i‡(
ª£rved
->
sockë_èb
[
pos
].
sockë
 == 0) {

987 i‡(
pos
 =
EXOSIP_MAX_SOCKETS
) {

988 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] [TCP] [new]Ñeserved->socket_tab is full - cannot createÇew socket\n"));

989 #ifde‡
DELETE_OLD_SOCKETS


991 
pos
 = 0;

993 i‡(
ª£rved
->
sockë_èb
[
pos
].
sockë
 > 0) {

994 
	`_t˝_é_˛o£_socköfo
(
exc⁄ãxt
, &
ª£rved
->
sockë_èb
[
pos
]);

997 
	`mem£t
(&
ª£rved
->
sockë_èb
[
pos
], 0, (reserved->socket_tab[pos]));

1003 
ªs
 = 
	`_eXosù_gë_addröfo
(
exc⁄ãxt
, &
addröfo
, 
ho°
, 
p‹t
, 
IPPROTO_TCP
);

1005 i‡(
ªs
)

1008 
curöfo
 = 
addröfo
; curöfo; curöfÿcuröfo->
ai_√xt
) {

1009 
i
;

1011 i‡(
curöfo
->
ai_¥Ÿocﬁ
 && curöfo->ai_¥Ÿocﬁ !
IPPROTO_TCP
)

1014 
ªs
 = 
	`_eXosù_gë«meöfo
((
sockaddr
 *Ë
curöfo
->
ai_addr
, (
sockÀn_t
Ëcuröfo->
ai_addæí
, 
§c6ho°
, 
NI_MAXHOST
, 
NULL
, 0, 
NI_NUMERICHOST
);

1016 i‡(
ªs
 != 0)

1019 
i
 = 
	`_t˝_é_föd_sockë
(
exc⁄ãxt
, 
§c6ho°
, 
p‹t
);

1021 i‡(
i
 >= 0) {

1022 
	`_eXosù_‰ìaddröfo
(
addröfo
);

1023  
i
;

1027 
curöfo
 = 
addröfo
; curöfo; curöfÿcuröfo->
ai_√xt
) {

1028 
ty≥
;

1030 i‡(
curöfo
->
ai_¥Ÿocﬁ
 && curöfo->ai_¥Ÿocﬁ !
IPPROTO_TCP
) {

1031 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosù] [TCP] [√w] skùpögÖrŸocﬁ [%d]\n", 
curöfo
->
ai_¥Ÿocﬁ
));

1035 
ªs
 = 
	`_eXosù_gë«meöfo
((
sockaddr
 *Ë
curöfo
->
ai_addr
, (
sockÀn_t
Ëcuröfo->
ai_addæí
, 
§c6ho°
, 
NI_MAXHOST
, 
NULL
, 0, 
NI_NUMERICHOST
);

1037 i‡(
ªs
 == 0) {

1038 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO1
, 
NULL
, "[eXosù] [TCP] [√w]Çew bödög wôh [%s][%d]\n", 
§c6ho°
, 
p‹t
));

1041 
ty≥
 = 
curöfo
->
ai_sockty≥
;

1042 #i‡
	`deföed
(
SOCK_CLOEXEC
)

1043 
ty≥
 = 
SOCK_CLOEXEC
 |Åype;

1045 
sock
 = (Ë
	`sockë
(
curöfo
->
ai_Ámûy
, 
ty≥
, curöfo->
ai_¥Ÿocﬁ
);

1047 i‡(
sock
 < 0) {

1048 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosù] [TCP] [√w] c™nŸ cª©êsockë %s\n", 
	`_ex_°ªº‹
(
ex_î∫o
, 
eb
, 
ERRBSIZ
)));

1052 i‡(
curöfo
->
ai_Ámûy
 =
AF_INET6
) {

1053 #ifde‡
IPV6_V6ONLY


1055 i‡(
	`£tsock›t_ùv6⁄ly
(
sock
)) {

1056 
	`_eXosù_˛o£sockë
(
sock
);

1057 
sock
 = -1;

1058 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosù] [TCP] [√w] c™nŸ së sockë o±i⁄ %s\n", 
	`_ex_°ªº‹
(
ex_î∫o
, 
eb
, 
ERRBSIZ
)));

1065 i‡(
ª£rved
->
ai_addr_Àn
 > 0) {

1066 i‡(
exc⁄ãxt
->
ªu£_t˝_p‹t
 > 0) {

1067 
sockaddr_°‹age
 
ai_addr
;

1068 
vÆ›t
 = 1;

1070 
	`£tsock›t
(
sock
, 
SOL_SOCKET
, 
SO_REUSEADDR
, (*Ë&
vÆ›t
, (valopt));

1072 
	`mem˝y
(&
ai_addr
, &
ª£rved
->ai_addr,Ñe£rved->
ai_addr_Àn
);

1074 i‡(
ai_addr
.
ss_Ámûy
 =
AF_INET
)

1075 ((
sockaddr_ö
 *Ë&
ai_addr
)->
sö_p‹t
 = 
	`ht⁄s
(
exc⁄ãxt
->
eXé_å™•‹t
.
¥Ÿo_loˇl_p‹t
);

1078 ((
sockaddr_ö6
 *Ë&
ai_addr
)->
sö6_p‹t
 = 
	`ht⁄s
(
exc⁄ãxt
->
eXé_å™•‹t
.
¥Ÿo_loˇl_p‹t
);

1080 
ªs
 = 
	`böd
(
sock
, (c⁄° 
sockaddr
 *Ë&
ai_addr
, 
ª£rved
->
ai_addr_Àn
);

1082 i‡(
ªs
 < 0) {

1083 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_WARNING
, 
NULL
, "[eXosù] [TCP] [√w] c™nŸ böd sockë [%s][%s] %s\n", 
exc⁄ãxt
->
eXé_å™•‹t
.
¥Ÿo_ifs
, (
ai_addr
.
ss_Ámûy
 =
AF_INET
) ? "AF_INET" : "AF_INET6",

1084 
	`_ex_°ªº‹
(
ex_î∫o
, 
eb
, 
ERRBSIZ
)));

1087 } i‡(
exc⁄ãxt
->
oc_loˇl_addªss
[0] == '\0') {

1088 i‡(
ª£rved
->
ai_addr
.
ss_Ámûy
 =
curöfo
->
ai_Ámûy
) {

1089 
sockaddr_°‹age
 
ai_addr
;

1090 
cou¡
 = 0;

1092 
	`mem˝y
(&
ai_addr
, &
ª£rved
->ai_addr,Ñe£rved->
ai_addr_Àn
);

1094 
cou¡
 < 100) {

1095 i‡(
exc⁄ãxt
->
oc_loˇl_p‹t_ønge
[0] < 1024) {

1096 i‡(
ai_addr
.
ss_Ámûy
 =
AF_INET
)

1097 ((
sockaddr_ö
 *Ë&
ai_addr
)->
sö_p‹t
 = 
	`ht⁄s
(0);

1100 ((
sockaddr_ö6
 *Ë&
ai_addr
)->
sö6_p‹t
 = 
	`ht⁄s
(0);

1103 i‡(
exc⁄ãxt
->
oc_loˇl_p‹t_cuºít
 == 0)

1104 
exc⁄ãxt
->
oc_loˇl_p‹t_cuºít
 =Éxc⁄ãxt->
oc_loˇl_p‹t_ønge
[0];

1107 i‡(
exc⁄ãxt
->
oc_loˇl_p‹t_cuºít
 >exc⁄ãxt->
oc_loˇl_p‹t_ønge
[1])

1108 
exc⁄ãxt
->
oc_loˇl_p‹t_cuºít
 =Éxc⁄ãxt->
oc_loˇl_p‹t_ønge
[0];

1110 i‡(
ai_addr
.
ss_Ámûy
 =
AF_INET
)

1111 ((
sockaddr_ö
 *Ë&
ai_addr
)->
sö_p‹t
 = 
	`ht⁄s
(
exc⁄ãxt
->
oc_loˇl_p‹t_cuºít
);

1114 ((
sockaddr_ö6
 *Ë&
ai_addr
)->
sö6_p‹t
 = 
	`ht⁄s
(
exc⁄ãxt
->
oc_loˇl_p‹t_cuºít
);

1117 
ªs
 = 
	`böd
(
sock
, (c⁄° 
sockaddr
 *Ë&
ai_addr
, 
ª£rved
->
ai_addr_Àn
);

1119 i‡(
ªs
 < 0) {

1120 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_WARNING
, 
NULL
, "[eXosù] [TCP] [√w] c™nŸ böd sockë [%s][%s] (p‹t=%iË%s\n", 
exc⁄ãxt
->
eXé_å™•‹t
.
¥Ÿo_ifs
, (
ai_addr
.
ss_Ámûy
 =
AF_INET
) ? "AF_INET" : "AF_INET6",

1121 
exc⁄ãxt
->
oc_loˇl_p‹t_cuºít
, 
	`_ex_°ªº‹
(
ex_î∫o
, 
eb
, 
ERRBSIZ
)));

1122 
cou¡
++;

1124 i‡(
exc⁄ãxt
->
oc_loˇl_p‹t_ønge
[0] >= 1024)

1125 
exc⁄ãxt
->
oc_loˇl_p‹t_cuºít
++;

1130 i‡(
exc⁄ãxt
->
oc_loˇl_p‹t_ønge
[0] >= 1024)

1131 
exc⁄ãxt
->
oc_loˇl_p‹t_cuºít
++;

1138 
cou¡
 = 0;

1140 i‡(
exc⁄ãxt
->
oc_loˇl_p‹t_ønge
[0] < 1024)

1141 
exc⁄ãxt
->
oc_loˇl_p‹t_ønge
[0] = 0;

1143 
cou¡
 < 100) {

1144 
addröfo
 *
oc_addröfo
 = 
NULL
;

1145 
addröfo
 *
oc_curöfo
;

1147 i‡(
exc⁄ãxt
->
oc_loˇl_p‹t_cuºít
 == 0)

1148 
exc⁄ãxt
->
oc_loˇl_p‹t_cuºít
 =Éxc⁄ãxt->
oc_loˇl_p‹t_ønge
[0];

1150 i‡(
exc⁄ãxt
->
oc_loˇl_p‹t_cuºít
 >exc⁄ãxt->
oc_loˇl_p‹t_ønge
[1])

1151 
exc⁄ãxt
->
oc_loˇl_p‹t_cuºít
 =Éxc⁄ãxt->
oc_loˇl_p‹t_ønge
[0];

1153 
	`_eXosù_gë_addröfo
(
exc⁄ãxt
, &
oc_addröfo
,Éxc⁄ãxt->
oc_loˇl_addªss
,Éxc⁄ãxt->
oc_loˇl_p‹t_cuºít
, 
IPPROTO_TCP
);

1155 
oc_curöfo
 = 
oc_addröfo
; oc_curöfo; oc_curöfÿoc_curöfo->
ai_√xt
) {

1156 i‡(
oc_curöfo
->
ai_¥Ÿocﬁ
 && oc_curöfo->ai_¥Ÿocﬁ !
IPPROTO_TCP
) {

1157 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosù] [TCP] [√w] skùpögÖrŸocﬁ [%d]\n", 
oc_curöfo
->
ai_¥Ÿocﬁ
));

1164 i‡(
oc_curöfo
 =
NULL
) {

1165 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosip] [TCP] [new]ÇotábleÅo findányáddressÅo bind\n"));

1166 
	`_eXosù_‰ìaddröfo
(
oc_addröfo
);

1170 
ªs
 = 
	`böd
(
sock
, (c⁄° 
sockaddr
 *Ë
oc_curöfo
->
ai_addr
, (
sockÀn_t
Ëoc_curöfo->
ai_addæí
);

1172 i‡(
ªs
 < 0) {

1173 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_WARNING
, 
NULL
, "[eXosù] [TCP] [√w] c™nŸ böd sockë [%s][%s] (p‹t=%iË%s\n", 
exc⁄ãxt
->
oc_loˇl_addªss
, (
oc_curöfo
->
ai_addr
->
ß_Ámûy
 =
AF_INET
) ? "AF_INET" : "AF_INET6",

1174 
exc⁄ãxt
->
oc_loˇl_p‹t_cuºít
, 
	`_ex_°ªº‹
(
ex_î∫o
, 
eb
, 
ERRBSIZ
)));

1175 
	`_eXosù_‰ìaddröfo
(
oc_addröfo
);

1176 
cou¡
++;

1178 i‡(
exc⁄ãxt
->
oc_loˇl_p‹t_ønge
[0] != 0)

1179 
exc⁄ãxt
->
oc_loˇl_p‹t_cuºít
++;

1184 
	`_eXosù_‰ìaddröfo
(
oc_addröfo
);

1186 i‡(
exc⁄ãxt
->
oc_loˇl_p‹t_ønge
[0] != 0)

1187 
exc⁄ãxt
->
oc_loˇl_p‹t_cuºít
++;

1195 #i‡
	`deföed
(
HAVE_WINSOCK2_H
)

1197 
n⁄Block
 = 1;

1198 
vÆ
;

1199 
timeout
 = 5000;

1200 
	`io˘lsockë
(
sock
, 
FIONBIO
, &
n⁄Block
);

1202 
vÆ
 = 1;

1204 i‡(
	`£tsock›t
(
sock
, 
SOL_SOCKET
, 
SO_KEEPALIVE
, (*Ë&
vÆ
, (val)) == -1) {

1205 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_WARNING
, 
NULL
, "[eXosip] [TCP] [new] cannot set socket SO_KEEPALIVE\n"));

1208 i‡(
	`£tsock›t
(
sock
, 
SOL_SOCKET
, 
SO_RCVTIMEO
, (c⁄° *Ë&
timeout
, (timeout))) {

1209 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_WARNING
, 
NULL
, "[eXosip] [TCP] [new] cannot set socket SO_RCVTIMEO\n"));

1211 i‡(
	`£tsock›t
(
sock
, 
SOL_SOCKET
, 
SO_SNDTIMEO
, (c⁄° *Ë&
timeout
, (timeout))) {

1212 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_WARNING
, 
NULL
, "[eXosip] [TCP] [new] cannot set socket SO_SNDTIMEO\n"));

1215 #ifde‡
HAVE_MSTCPIP_H


1217 
DWORD
 
îr
 = 0L;

1218 
DWORD
 
dwByãs
 = 0L;

1219 
t˝_kì∑live
 
kÆive
 = {0};

1220 
t˝_kì∑live
 
kÆiveOut
 = {0};

1221 
kÆive
.
⁄off
 = 1;

1222 
kÆive
.
kì∑livëime
 = 30000;

1223 
kÆive
.
kì∑liveöãrvÆ
 = 3000;

1224 
îr
 = 
	`WSAIo˘l
(
sock
, 
SIO_KEEPALIVE_VALS
, &
kÆive
, (kÆive), &
kÆiveOut
, (kÆiveOut), &
dwByãs
, 
NULL
, NULL);

1226 i‡(
îr
 != 0) {

1227 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_WARNING
, 
NULL
, "[eXosip] [TCP] [new] cannot set keepalive interval\n"));

1233 
vÆ
;

1235 
vÆ
 = 
	`f˙é
(
sock
, 
F_GETFL
);

1237 i‡(
vÆ
 < 0) {

1238 
	`_eXosù_˛o£sockë
(
sock
);

1239 
sock
 = -1;

1240 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] [TCP] [new] cannot get socket flag\n"));

1244 
vÆ
 |
O_NONBLOCK
;

1246 i‡(
	`f˙é
(
sock
, 
F_SETFL
, 
vÆ
) < 0) {

1247 
	`_eXosù_˛o£sockë
(
sock
);

1248 
sock
 = -1;

1249 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] [TCP] [new] cannot set socket flag\n"));

1253 #i‡
SO_KEEPALIVE


1254 
vÆ
 = 1;

1256 i‡(
	`£tsock›t
(
sock
, 
SOL_SOCKET
, 
SO_KEEPALIVE
, &
vÆ
, (val)) == -1) {

1261 
vÆ
 = 30;

1262 
	`£tsock›t
(
sock
, 
SOL_TCP
, 
TCP_KEEPIDLE
, &
vÆ
, (val));

1263 
vÆ
 = 2;

1264 
	`£tsock›t
(
sock
, 
SOL_TCP
, 
TCP_KEEPCNT
, &
vÆ
, (val));

1265 
vÆ
 = 10;

1266 
	`£tsock›t
(
sock
, 
SOL_TCP
, 
TCP_KEEPINTVL
, &
vÆ
, (val));

1268 #i‡
SO_NOSIGPIPE


1269 
vÆ
 = 1;

1270 
	`£tsock›t
(
sock
, 
SOL_SOCKET
, 
SO_NOSIGPIPE
, (*Ë&
vÆ
, ());

1275 #i‡
TCP_NODELAY


1277 
vÆ
;

1279 
vÆ
 = 1;

1281 i‡(
	`£tsock›t
(
sock
, 
IPPROTO_TCP
, 
TCP_NODELAY
, (*Ë&
vÆ
, ()) != 0) {

1282 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosip] [TCP] [new] cannot set socket flag (TCP_NODELAY)\n"));

1286 #i‡
TCP_USER_TIMEOUT


1288 
vÆ
 = 9000;

1289 i‡(
	`£tsock›t
(
sock
, 
IPPROTO_TCP
, 
TCP_USER_TIMEOUT
, &
vÆ
, (val)) != 0) {

1290 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosip] [TCP] [new] cannot set socket flag (TCP_USER_TIMEOUT)\n"));

1295 
	`_eXosù_å™•‹t_£t_ds˝
(
exc⁄ãxt
, 
curöfo
->
ai_Ámûy
, 
sock
);

1297 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosù] [TCP] [√w] sockë [%s] [sock=%d] famûy:%d\n", 
ho°
, 
sock
, 
curöfo
->
ai_Ámûy
));

1298 
ªs
 = 
	`c⁄√˘
(
sock
, 
curöfo
->
ai_addr
, (
sockÀn_t
Ëcuröfo->
ai_addæí
);

1300 i‡(
ªs
 < 0) {

1301 
vÆ›t
 = 
ex_î∫o
;

1303 #i‡
	`deföed
(
HAVE_WINSOCK2_H
)

1305 i‡(
vÆ›t
 !
WSAEWOULDBLOCK
) {

1308 i‡(
vÆ›t
 !
EINPROGRESS
) {

1310 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosù] [TCP] [√w] c™nŸ c⁄√˘ sockë [%s] famûy:%d %s\n", 
ho°
, 
curöfo
->
ai_Ámûy
, 
	`_ex_°ªº‹
(
vÆ›t
, 
eb
, 
ERRBSIZ
)));

1311 
	`_eXosù_˛o£sockë
(
sock
);

1312 
sock
 = -1;

1316 
ªs
 = 
	`_t˝és_é_is_c⁄√˘ed
(
exc⁄ãxt
->
pﬁl_mëhod
, 
sock
);

1318 i‡(
ªs
 > 0) {

1319 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosù] [TCP] [√w] sockë [%s] [sock=%d] [pos=%d] famûy:%d, i¿¥ogªss\n", 
ho°
, 
sock
, 
pos
, 
curöfo
->
ai_Ámûy
));

1320 
£À˘ed_ai_addæí
 = (
sockÀn_t
Ë
curöfo
->
ai_addæí
;

1321 
	`mem˝y
(&
£À˘ed_ai_addr
, 
curöfo
->
ai_addr
, (
sockaddr
));

1324 } i‡(
ªs
 == 0) {

1325 #ifde‡
MULTITASKING_ENABLED


1326 
ª£rved
->
sockë_èb
[
pos
].
ªadSåóm
 = 
NULL
;

1327 
ª£rved
->
sockë_èb
[
pos
].
wrôeSåóm
 = 
NULL
;

1328 
	`CFSåómCª©ePaúWôhSockë
(
kCFAŒoˇt‹DeÁu…
, 
sock
, &
ª£rved
->
sockë_èb
[
pos
].
ªadSåóm
, &ª£rved->sockë_èb[pos].
wrôeSåóm
);

1330 i‡(
ª£rved
->
sockë_èb
[
pos
].
ªadSåóm
 !
NULL
)

1331 
	`CFRódSåómSëPr›îty
(
ª£rved
->
sockë_èb
[
pos
].
ªadSåóm
, 
kCFSåómNëw‹kSîvi˚Ty≥
, 
kCFSåómNëw‹kSîvi˚Ty≥VoIP
);

1333 i‡(
ª£rved
->
sockë_èb
[
pos
].
wrôeSåóm
 !
NULL
)

1334 
	`CFWrôeSåómSëPr›îty
(
ª£rved
->
sockë_èb
[
pos
].
wrôeSåóm
, 
kCFSåómNëw‹kSîvi˚Ty≥
, 
kCFSåómNëw‹kSîvi˚Ty≥VoIP
);

1336 i‡(
	`CFRódSåómO≥n
(
ª£rved
->
sockë_èb
[
pos
].
ªadSåóm
)) {

1337 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO1
, 
NULL
, "[eXosip] [TCP] [new] CFReadStreamOpen Succeeded\n"));

1340 
	`CFWrôeSåómO≥n
(
ª£rved
->
sockë_èb
[
pos
].
wrôeSåóm
);

1342 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO1
, 
NULL
, "[eXosù] [TCP] [√w] sockë [%s] [sock=%d] [pos=%d] famûy:%d, c⁄√˘ed\n", 
ho°
, 
sock
, 
pos
, 
curöfo
->
ai_Ámûy
));

1343 
£À˘ed_ai_addæí
 = 0;

1344 
	`mem˝y
(&
£À˘ed_ai_addr
, 
curöfo
->
ai_addr
, (
sockaddr
));

1345 
ª£rved
->
sockë_èb
[
pos
].
t˝_ö¥ogªss_max_timeout
 = 0;

1349 
	`_eXosù_˛o£sockë
(
sock
);

1350 
sock
 = -1;

1359 
	`_eXosù_‰ìaddröfo
(
addröfo
);

1361 i‡(
sock
 > 0) {

1362 
ª£rved
->
sockë_èb
[
pos
].
sockë
 = 
sock
;

1364 
ª£rved
->
sockë_èb
[
pos
].
ai_addæí
 = 
£À˘ed_ai_addæí
;

1365 
	`mem£t
(&
ª£rved
->
sockë_èb
[
pos
].
ai_addr
, 0, (
sockaddr
));

1367 i‡(
£À˘ed_ai_addæí
 > 0)

1368 
	`mem˝y
(&
ª£rved
->
sockë_èb
[
pos
].
ai_addr
, &
£À˘ed_ai_addr
, 
£À˘ed_ai_addæí
);

1370 i‡(
§c6ho°
[0] == '\0')

1371 
	`osù_°∫˝y
(
ª£rved
->
sockë_èb
[
pos
].
ªmŸe_ù
, 
ho°
, (reserved->socket_tab[pos].remote_ip) - 1);

1374 
	`osù_°∫˝y
(
ª£rved
->
sockë_èb
[
pos
].
ªmŸe_ù
, 
§c6ho°
, (reserved->socket_tab[pos].remote_ip) - 1);

1376 
ª£rved
->
sockë_èb
[
pos
].
ªmŸe_p‹t
 = 
p‹t
;

1379 
sockaddr_°‹age
 
loˇl_ai_addr
;

1380 
sockÀn_t
 
£À˘ed_ai_addæí
;

1382 
	`mem£t
(&
loˇl_ai_addr
, 0, (
sockaddr_°‹age
));

1383 
£À˘ed_ai_addæí
 = (
sockaddr_°‹age
);

1384 
ªs
 = 
	`gësock«me
(
sock
, (
sockaddr
 *Ë&
loˇl_ai_addr
, &
£À˘ed_ai_addæí
);

1386 i‡(
ªs
 == 0) {

1387 i‡(
loˇl_ai_addr
.
ss_Ámûy
 =
AF_INET
)

1388 
ª£rved
->
sockë_èb
[
pos
].
ïhemîÆ_p‹t
 = 
	`¡ohs
(((
sockaddr_ö
 *Ë&
loˇl_ai_addr
)->
sö_p‹t
);

1391 
ª£rved
->
sockë_èb
[
pos
].
ïhemîÆ_p‹t
 = 
	`¡ohs
(((
sockaddr_ö6
 *Ë&
loˇl_ai_addr
)->
sö6_p‹t
);

1393 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosù] [TCP] [√w] outgoög sockë cª©ed o¿p‹à[%i]\n", 
ª£rved
->
sockë_èb
[
pos
].
ïhemîÆ_p‹t
));

1397 
ª£rved
->
sockë_èb
[
pos
].
t˝_ö¥ogªss_max_timeout
 = 
	`osù_gësy°emtime
(
NULL
) + 32;

1399 #ifde‡
HAVE_SYS_EPOLL_H


1401 i‡(
exc⁄ãxt
->
pﬁl_mëhod
 =
EXOSIP_USE_EPOLL_LT
) {

1402 
ïﬁl_evít
 
ev
;

1404 
	`mem£t
(&
ev
, 0, (
ïﬁl_evít
));

1405 
ev
.
evíts
 = 
EPOLLIN
 | 
EPOLLOUT
;

1406 
ev
.
d©a
.
fd
 = 
sock
;

1407 
ªs
 = 
	`ïﬁl_˘l
(
exc⁄ãxt
->
ïfd
, 
EPOLL_CTL_ADD
, 
sock
, &
ev
);

1409 i‡(
ªs
 < 0) {

1410 
	`_t˝_é_˛o£_socköfo
(
exc⁄ãxt
, &
ª£rved
->
sockë_èb
[
pos
]);

1417  
pos
;

1421 
	}
}

1423 
	$_t˝_é_£nd_socköfo
(
eXosù_t
 *
exc⁄ãxt
, 
_t˝_°ªam
 *
socköfo
, c⁄° *
msg
, 
msgÀn
) {

1424 
eb
[
ERRBSIZ
];

1425 
i
;

1428 
i
 = (Ë
	`£nd
(
socköfo
->
sockë
, (c⁄° *Ë
msg
, 
msgÀn
, 0);

1430 i‡(
i
 < 0) {

1431 
vÆ›t
 = 
ex_î∫o
;

1433 i‡(
	`is_wouldblock_îr‹
(
vÆ›t
)) {

1434 
timevÆ
 
tv
;

1435 
fd_£t
 
wr£t
;

1437 #ifde‡
HAVE_SYS_EPOLL_H


1439 i‡(
exc⁄ãxt
->
pﬁl_mëhod
 =
EXOSIP_USE_EPOLL_LT
) {

1440 
nfds
;

1441 
ïﬁl_evít
 
ï_¨øy
;

1442 
ïfd
;

1443 
ïﬁl_evít
 
ev
;

1445 
ïfd
 = 
	`ïﬁl_¸óã
(1);

1447 i‡(
ïfd
 < 0) {

1451 
	`mem£t
(&
ev
, 0, (
ïﬁl_evít
));

1452 
ev
.
evíts
 = 
EPOLLOUT
;

1453 
ev
.
d©a
.
fd
 = 
socköfo
->
sockë
;

1454 
i
 = 
	`ïﬁl_˘l
(
ïfd
, 
EPOLL_CTL_ADD
, 
socköfo
->
sockë
, &
ev
);

1456 i‡(
i
 < 0) {

1457 
	`_eXosù_˛o£sockë
(
ïfd
);

1461 
nfds
 = 
	`ïﬁl_waô
(
ïfd
, &
ï_¨øy
, 1, 
SOCKET_TIMEOUT
);

1463 i‡(
nfds
 > 0) {

1464 
	`_eXosù_˛o£sockë
(
ïfd
);

1467 } i‡(
nfds
 < 0) {

1468 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosù] [TCP] TCPÉpﬁ»îr‹: %s\n", 
	`_ex_°ªº‹
(
ex_î∫o
, 
eb
, 
ERRBSIZ
)));

1469 
	`_eXosù_˛o£sockë
(
ïfd
);

1473 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosù] [TCP] TCPÅimeout: %d ms\n", 
SOCKET_TIMEOUT
));

1474 
	`_eXosù_˛o£sockë
(
ïfd
);

1480 
tv
.
tv_£c
 = 
SOCKET_TIMEOUT
 / 1000;

1481 
tv
.
tv_u£c
 = (
SOCKET_TIMEOUT
 % 1000) * 1000;

1483 i‡(
tv
.
tv_u£c
 == 0)

1484 
tv
.
tv_u£c
 += 10000;

1486 
	`FD_ZERO
(&
wr£t
);

1487 
	`FD_SET
(
socköfo
->
sockë
, &
wr£t
);

1489 
i
 = 
	`£À˘
(
socköfo
->
sockë
 + 1, 
NULL
, &
wr£t
, NULL, &
tv
);

1491 i‡(
i
 > 0) {

1494 } i‡(
i
 < 0) {

1495 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosù] [TCP] TCP sñe˘Éº‹: %s\n", 
	`_ex_°ªº‹
(
ex_î∫o
, 
eb
, 
ERRBSIZ
)));

1499 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosù] [TCP] TCPÅimeout: %d ms\n", 
SOCKET_TIMEOUT
));

1504 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosù] [TCP] TCPÉº‹: %s\n", 
	`_ex_°ªº‹
(
vÆ›t
, 
eb
, 
ERRBSIZ
)));

1507 } i‡(
i
 == 0) {

1510 } i‡(
i
 < 
msgÀn
) {

1511 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosù] [TCP] TCPÖ¨tü»wrôe: wrŸê[%i] in°ód o‡[%i]\n", 
i
, 
msgÀn
));

1512 
msgÀn
 -
i
;

1513 
msg
 +
i
;

1520  
OSIP_SUCCESS
;

1521 
	}
}

1523 
	$_t˝_é_£nd
(
eXosù_t
 *
exc⁄ãxt
, 
sock
, c⁄° *
msg
, 
msgÀn
) {

1524 
_t˝_°ªam
 *
socköfo
 = 
	`_t˝_é_föd_socköfo
(
exc⁄ãxt
, 
sock
);

1525 
i
;

1526 i‡(
socköfo
 =
NULL
) {

1527 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO1
, 
NULL
, "[eXosù] [TCP] c™nŸ föd socköfÿf‹ sockë [%d] [dr›pög mesßge]\n", 
sock
));

1531 
i
 = 
	`_t˝_é_£nd_socköfo
(
exc⁄ãxt
, 
socköfo
, 
msg
, 
msgÀn
);

1532  
i
;

1533 
	}
}

1535 
	$_t˝_é_upd©e_c⁄è˘
(
eXosù_t
 *
exc⁄ãxt
, 
osù_mesßge_t
 *
ªq
, *
«âed_ù
, 
«âed_p‹t
) {

1536 i‡(
ªq
->
≠∂iˇti⁄_d©a
 != (*) 0x1)

1537  
OSIP_SUCCESS
;

1539 i‡((
«âed_ù
 !
NULL
 &&Ç©ãd_ù[0] !'\0'Ë|| 
«âed_p‹t
 > 0) {

1540 
osù_li°_ôî©‹_t
 
ô
;

1541 
osù_c⁄è˘_t
 *
co
 = (osù_c⁄è˘_à*Ë
	`osù_li°_gë_fú°
(&
ªq
->
c⁄è˘s
, &
ô
);

1543 
co
 !
NULL
) {

1544 i‡(
co
 !
NULL
 && co->
uæ
 !NULL && co->uæ->
ho°
 != NULL) {

1545 i‡(
«âed_p‹t
 > 0) {

1546 i‡(
co
->
uæ
->
p‹t
)

1547 
	`osù_‰ì
(
co
->
uæ
->
p‹t
);

1549 
co
->
uæ
->
p‹t
 = (*Ë
	`osù_mÆloc
(10);

1550 
	`¢¥ötf
(
co
->
uæ
->
p‹t
, 9, "%i", 
«âed_p‹t
);

1551 
	`osù_mesßge_f‹˚_upd©e
(
ªq
);

1554 i‡(
«âed_ù
 !
NULL
 &&Çatted_ip[0] != '\0') {

1555 
	`osù_‰ì
(
co
->
uæ
->
ho°
);

1556 
co
->
uæ
->
ho°
 = 
	`osù_°rdup
(
«âed_ù
);

1557 
	`osù_mesßge_f‹˚_upd©e
(
ªq
);

1561 
co
 = (
osù_c⁄è˘_t
 *Ë
	`osù_li°_gë_√xt
(&
ô
);

1565  
OSIP_SUCCESS
;

1566 
	}
}

1568 
	$_é_ªsﬁv_«±r_de°ö©i⁄
(
eXosù_t
 *
exc⁄ãxt
, 
osù_å™ß˘i⁄_t
 *
å
, 
osù_mesßge_t
 *
sù
, **
out_ho°
, *
out_p‹t
, 
osù_«±r_t
 **
out_«±r_ªc‹d
) {

1569 *
ho°
 = *
out_ho°
;

1570 
p‹t
 = *
out_p‹t
;

1571 
tid
 = (
å
 =
NULL
Ë? -1 :År->
å™ß˘i⁄id
;

1572 
f‹˚_waôög
 = (
å
 =
NULL
) ? 1 : 0;

1573 
osù_«±r_t
 *
«±r_ªc‹d
 = (
å
 =
NULL
) ? NULL :År->naptr_record;

1575 *
out_«±r_ªc‹d
 = 
NULL
;

1576 i‡(
å
 =
NULL
) {

1577 
	`_eXosù_§v_lookup
(
exc⁄ãxt
, 
sù
, &
«±r_ªc‹d
);

1580 i‡(
«±r_ªc‹d
 =
NULL
) {

1582  
OSIP_SUCCESS
;

1585 
	`eXosù_dnsutûs_dns_¥o˚ss
(
«±r_ªc‹d
, 
f‹˚_waôög
);

1587 i‡(
«±r_ªc‹d
->
«±r_°©e
 =
OSIP_NAPTR_STATE_NAPTRDONE
 ||Ç≠å_ªc‹d->«±r_°©ê=
OSIP_NAPTR_STATE_SRVINPROGRESS
)

1588 
	`eXosù_dnsutûs_dns_¥o˚ss
(
«±r_ªc‹d
, 
f‹˚_waôög
);

1590 i‡(
«±r_ªc‹d
->
«±r_°©e
 =
OSIP_NAPTR_STATE_SRVDONE
) {

1592 
osù_§v_ªc‹d
 *
ªc‹d
 = 
NULL
;

1594 i‡(
	`osù_°rˇ£cmp
(
exc⁄ãxt
->
eXé_å™•‹t
.
¥Ÿo_«me
, "UDP") == 0)

1595 
ªc‹d
 = &
«±r_ªc‹d
->
sùudp_ªc‹d
;

1596 i‡(
	`osù_°rˇ£cmp
(
exc⁄ãxt
->
eXé_å™•‹t
.
¥Ÿo_«me
, "TCP") == 0)

1597 
ªc‹d
 = &
«±r_ªc‹d
->
sùt˝_ªc‹d
;

1598 i‡(
	`osù_°rˇ£cmp
(
exc⁄ãxt
->
eXé_å™•‹t
.
¥Ÿo_«me
, "TLS") == 0)

1599 
ªc‹d
 = &
«±r_ªc‹d
->
sùés_ªc‹d
;

1600 i‡(
	`osù_°rˇ£cmp
(
exc⁄ãxt
->
eXé_å™•‹t
.
¥Ÿo_«me
, "DTLS-UDP") == 0)

1601 
ªc‹d
 = &
«±r_ªc‹d
->
sùdés_ªc‹d
;

1603 i‡(
å
 =
NULL
 && 
«±r_ªc‹d
->
kìp_ö_ˇche
 == 0) {

1604 
	`osù_‰ì
(
«±r_ªc‹d
);

1606  
OSIP_UNDEFINED_ERROR
;

1609 i‡(
ªc‹d
->
«me
[0] !'\0' &&Ñec‹d->
§víåy
[ªc‹d->
ödex
].
§v
[0] != '\0') {

1611 
osù_§v_íåy_t
 *
§v
;

1613 i‡(
	`MSG_IS_REGISTER
(
sù
Ë|| 
	`MSG_IS_OPTIONS
(sip)) {

1615 i‡(
ªc‹d
->
§víåy
[ªc‹d->
ödex
].
§v_is_brokí
.
tv_£c
 > 0) {

1616 
ªc‹d
->
§víåy
[ªc‹d->
ödex
].
§v_is_brokí
.
tv_£c
 = 0;

1617 
ªc‹d
->
§víåy
[ªc‹d->
ödex
].
§v_is_brokí
.
tv_u£c
 = 0;

1619 i‡(
	`eXosù_dnsutûs_rŸ©e_§v
(
ªc‹d
) > 0) {

1620 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO1
, 
NULL
, "[eXosù] [XXX] [tid=%i] doög XXX faûovî [%s][%d] -> [%s][%d]\n", 
tid
, 
ho°
, 
p‹t
, 
ªc‹d
->
§víåy
[ªc‹d->
ödex
].
§v
,Ñecord->srventry[record->index].port));

1625 
§v
 = &
ªc‹d
->
§víåy
[ªc‹d->
ödex
];

1627 i‡(
§v
->
ùaddªss
[0]) {

1628 *
out_ho°
 = 
§v
->
ùaddªss
;

1629 *
out_p‹t
 = 
§v
->
p‹t
;

1632 *
out_ho°
 = 
§v
->srv;

1633 *
out_p‹t
 = 
§v
->
p‹t
;

1638 i‡(
å
 =
NULL
) {

1640 i‡(
«±r_ªc‹d
->
kìp_ö_ˇche
 == 0)

1641 
	`osù_‰ì
(
«±r_ªc‹d
);

1643 *
out_«±r_ªc‹d
 = 
NULL
;

1644  
OSIP_SUCCESS
;

1647 *
out_«±r_ªc‹d
 = 
«±r_ªc‹d
;

1649 i‡(
«±r_ªc‹d
->
«±r_°©e
 =
OSIP_NAPTR_STATE_SRVDONE
) {

1650  
OSIP_SUCCESS
;

1653 i‡(
«±r_ªc‹d
->
«±r_°©e
 =
OSIP_NAPTR_STATE_INPROGRESS
) {

1655  
OSIP_SUCCESS
 + 1;

1658 i‡(
«±r_ªc‹d
->
«±r_°©e
 =
OSIP_NAPTR_STATE_NAPTRDONE
) {

1660  
OSIP_SUCCESS
 + 1;

1663 i‡(
«±r_ªc‹d
->
«±r_°©e
 =
OSIP_NAPTR_STATE_SRVINPROGRESS
) {

1665  
OSIP_SUCCESS
 + 1;

1668 i‡(
«±r_ªc‹d
->
«±r_°©e
 =
OSIP_NAPTR_STATE_NOTSUPPORTED
 ||Ç≠å_ªc‹d->«±r_°©ê=
OSIP_NAPTR_STATE_RETRYLATER
) {

1670 i‡(
«±r_ªc‹d
->
kìp_ö_ˇche
 == 0)

1671 
	`osù_‰ì
(
«±r_ªc‹d
);

1673 *
out_«±r_ªc‹d
 = 
NULL
;

1674 
å
->
«±r_ªc‹d
 = 
NULL
;

1676  
OSIP_SUCCESS
;

1679 i‡(
«±r_ªc‹d
->
«±r_°©e
 =
OSIP_NAPTR_STATE_UNKNOWN
) {

1681 i‡(
«±r_ªc‹d
->
kìp_ö_ˇche
 == 0)

1682 
	`osù_‰ì
(
«±r_ªc‹d
);

1684 *
out_«±r_ªc‹d
 = 
NULL
;

1685 
å
->
«±r_ªc‹d
 = 
NULL
;

1688  
OSIP_SUCCESS
;

1691  
OSIP_SUCCESS
;

1692 
	}
}

1694 
	$_t˝_é_buûd_mesßge
(
eXosù_t
 *
exc⁄ãxt
, 
osù_mesßge_t
 *
sù
, 
pos
, *
ho°
, **
mesßge
, 
size_t
 *
Àngth
) {

1695 
eXét˝
 *
ª£rved
 = (eXét˝ *Ë
exc⁄ãxt
->
eXét˝_ª£rved
;

1696 
i
;

1697 
	`_eXosù_ªque°_vüm™agî
(
exc⁄ãxt
, 
sù
, 
ª£rved
->
sockë_èb
[
pos
].
ai_addr
.
ß_Ámûy
, 
IPPROTO_TCP
, 
NULL
,Ñe£rved->sockë_èb[pos].
ïhemîÆ_p‹t
,Ñe£rved->sockë_èb[pos].
sockë
, 
ho°
);

1699 i‡(
exc⁄ãxt
->
u£_ïhemîÆ_p‹t
 == 1)

1700 
	`_eXosù_mesßge_c⁄è˘m™agî
(
exc⁄ãxt
, 
sù
, 
ª£rved
->
sockë_èb
[
pos
].
ai_addr
.
ß_Ámûy
, 
IPPROTO_TCP
, 
NULL
,Ñe£rved->sockë_èb[pos].
ïhemîÆ_p‹t
,Ñe£rved->sockë_èb[pos].
sockë
, 
ho°
);

1703 
	`_eXosù_mesßge_c⁄è˘m™agî
(
exc⁄ãxt
, 
sù
, 
ª£rved
->
sockë_èb
[
pos
].
ai_addr
.
ß_Ámûy
, 
IPPROTO_TCP
, 
NULL
,Éxc⁄ãxt->
eXé_å™•‹t
.
¥Ÿo_loˇl_p‹t
,Ñe£rved->sockë_èb[pos].
sockë
, 
ho°
);

1705 i‡(
exc⁄ãxt
->
t˝_fúewÆl_ù
[0] !'\0' ||Éxc⁄ãxt->
auto_masquîade_c⁄è˘
 > 0)

1706 
	`_t˝_é_upd©e_c⁄è˘
(
exc⁄ãxt
, 
sù
, 
ª£rved
->
sockë_èb
[
pos
].
«âed_ù
,Ñe£rved->sockë_èb[pos].
«âed_p‹t
);

1711 
osù_rouã_t
 *
rouã
 = 
NULL
;

1712 
osù_gíîic_∑øm_t
 *
èg
 = 
NULL
;

1714 i‡(
exc⁄ãxt
->
ªmove_¥îouã£t
 > 0) {

1715 
	`osù_mesßge_gë_rouã
(
sù
, 0, &
rouã
);

1716 
	`osù_to_gë_èg
(
sù
->
to
, &
èg
);

1718 i‡(
èg
 =
NULL
 && 
rouã
 !NULL &&Ñouã->
uæ
 != NULL) {

1719 
	`osù_li°_ªmove
(&
sù
->
rouãs
, 0);

1720 
	`osù_mesßge_f‹˚_upd©e
(
sù
);

1724 
i
 = 
	`osù_mesßge_to_°r
(
sù
, 
mesßge
, 
Àngth
);

1726 i‡(
èg
 =
NULL
 && 
rouã
 !NULL &&Ñouã->
uæ
 != NULL) {

1727 
	`osù_li°_add
(&
sù
->
rouãs
, 
rouã
, 0);

1730  
i
;

1731 
	}
}

1733 
	$t˝_é_£nd_mesßge
(
eXosù_t
 *
exc⁄ãxt
, 
osù_å™ß˘i⁄_t
 *
å
, 
osù_mesßge_t
 *
sù
, *
ho°
, 
p‹t
, 
out_sockë
) {

1734 
eXét˝
 *
ª£rved
 = (eXét˝ *Ë
exc⁄ãxt
->
eXét˝_ª£rved
;

1735 
size_t
 
Àngth
 = 0;

1736 *
mesßge
 = 
NULL
;

1737 
i
;

1738 
pos
 = -1;

1739 
osù_«±r_t
 *
«±r_ªc‹d
 = 
NULL
;

1740 
tid
 = -1;

1742 i‡(
å
 !
NULL
)

1743 
tid
 = 
å
->
å™ß˘i⁄id
;

1745 i‡(
ª£rved
 =
NULL
) {

1746 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosù] [TCP] [tid=%i] wr⁄g sèã: cª©êå™•‹àœyî fú°\n", 
tid
));

1747  
OSIP_WRONG_STATE
;

1750 i‡(
ho°
 =
NULL
) {

1751 
ho°
 = 
sù
->
ªq_uri
->host;

1753 i‡(
sù
->
ªq_uri
->
p‹t
 !
NULL
)

1754 
p‹t
 = 
	`osù_©oi
(
sù
->
ªq_uri
->port);

1757 
p‹t
 = 5060;

1760 
pos
 = 0;Öo†< 
EXOSIP_MAX_SOCKETS
;Öos++) {

1761 i‡(
ª£rved
->
sockë_èb
[
pos
].
övÆid
 > 0) {

1762 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosù] [TCP] [£nd] sockë info:[%s][%d] [sock=%d] [pos=%d] m™uÆÑe£t\n", 
ª£rved
->
sockë_èb
[
pos
].
ªmŸe_ù
,Ñe£rved->sockë_èb[pos].
ªmŸe_p‹t
,

1763 
ª£rved
->
sockë_èb
[
pos
].
sockë
,Öos));

1764 
	`_eXosù_m¨k_ªgi°øti⁄_expúed
(
exc⁄ãxt
, 
ª£rved
->
sockë_èb
[
pos
].
ªg_ˇŒ_id
);

1765 
	`_t˝_é_˛o£_socköfo
(
exc⁄ãxt
, &
ª£rved
->
sockë_èb
[
pos
]);

1770 
i
 = 
	`_é_ªsﬁv_«±r_de°ö©i⁄
(
exc⁄ãxt
, 
å
, 
sù
, &
ho°
, &
p‹t
, &
«±r_ªc‹d
);

1771 i‡(
i
 =
OSIP_SUCCESS
 + 1)

1772  
i
;

1773 i‡(
i
 < 
OSIP_SUCCESS
)

1774  
i
;

1776 i‡(
out_sockë
 > 0) {

1777 
pos
 = 0;Öo†< 
EXOSIP_MAX_SOCKETS
;Öos++) {

1778 i‡(
ª£rved
->
sockë_èb
[
pos
].
sockë
 != 0) {

1779 i‡(
ª£rved
->
sockë_èb
[
pos
].
sockë
 =
out_sockë
) {

1780 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO1
, 
NULL
, "[eXosù] [TCP] [tid=%i]Ñeusög REQUEST c⁄√˘i⁄Åÿ[%s][%d]\n", 
tid
, 
ª£rved
->
sockë_èb
[
pos
].
ªmŸe_ù
,Ñe£rved->sockë_èb[pos].
ªmŸe_p‹t
));

1786 i‡(
pos
 =
EXOSIP_MAX_SOCKETS
) {

1787 
out_sockë
 = 0;

1788 i‡(
å
 !
NULL
)

1789 
	`osù_å™ß˘i⁄_£t_out_sockë
(
å
, 0);

1792 i‡(
out_sockë
 > 0) {

1793 
pos2
;

1802 
pos2
 = 
	`_t˝_é_föd_sockë
(
exc⁄ãxt
, 
ho°
, 
p‹t
);

1804 i‡(
pos2
 >= 0) {

1805 
out_sockë
 = 
ª£rved
->
sockë_èb
[
pos2
].
sockë
;

1806 
pos
 = 
pos2
;

1807 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO1
, 
NULL
, "[eXosù] [TCP] [tid=%i]Ñeusög c⁄√˘i⁄ --wôhÉxa˘Ö‹t--Åÿ[%s][%d]\n", 
tid
, 
ª£rved
->
sockë_èb
[
pos
].
ªmŸe_ù
,Ñe£rved->sockë_èb[pos].
ªmŸe_p‹t
));

1808 i‡(
å
 !
NULL
)

1809 
	`osù_å™ß˘i⁄_£t_out_sockë
(
å
, 
out_sockë
);

1815 i‡(
out_sockë
 <= 0) {

1816 
pos
 = 
	`_t˝_é_föd_sockë
(
exc⁄ãxt
, 
ho°
, 
p‹t
);

1818 i‡(
pos
 >= 0) {

1819 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO1
, 
NULL
, "[eXosù] [TCP] [tid=%i]Ñeusög c⁄√˘i⁄Åÿ[%s][%d]\n", 
tid
, 
ª£rved
->
sockë_èb
[
pos
].
ªmŸe_ù
,Ñe£rved->sockë_èb[pos].
ªmŸe_p‹t
));

1823 i‡(
pos
 < 0) {

1824 
pos
 = 
	`_t˝_é_√w_sockë
(
exc⁄ãxt
, 
ho°
, 
p‹t
);

1827 i‡(
pos
 >= 0) {

1828 
out_sockë
 = 
ª£rved
->
sockë_èb
[
pos
].
sockë
;

1829 i‡(
å
 !
NULL
)

1830 
	`osù_å™ß˘i⁄_£t_out_sockë
(
å
, 
out_sockë
);

1834 i‡(
out_sockë
 <= 0) {

1835 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosù] [TCP] [tid=%i]Çÿsockë c™ bêfound o∏¸óãd\n", 
tid
));

1837 i‡(
	`MSG_IS_REGISTER
(
sù
Ë|| 
	`MSG_IS_OPTIONS
(sip)) {

1838 
	`_eXosù_m¨k_ªgi°øti⁄_expúed
(
exc⁄ãxt
, 
sù
->
ˇŒ_id
->
numbî
);

1841 i‡(
å
 !
NULL
)

1842 
	`osù_å™ß˘i⁄_£t_out_sockë
(
å
, 0);

1846 i‡(
	`MSG_IS_REGISTER
(
sù
)) {

1848 
	`¢¥ötf
(
ª£rved
->
sockë_èb
[
pos
].
ªg_ˇŒ_id
, ‘e£rved->sockë_èb[pos].ªg_ˇŒ_id), "%s", 
sù
->
ˇŒ_id
->
numbî
);

1851 
i
 = 
	`_t˝és_é_is_c⁄√˘ed
(
exc⁄ãxt
->
pﬁl_mëhod
, 
out_sockë
);

1853 i‡(
i
 > 0) {

1854 
time_t
 
now
;

1856 i‡(
å
 !
NULL
) {

1857 
now
 = 
	`osù_gësy°emtime
(
NULL
);

1859 i‡(
å
 !
NULL
 && 
now
 -År->
búth_time
 > 10) {

1860 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosù] [TCP] [tid=%i] sockë [%s] [sock=%d] [pos=%d]Åimeout\n", 
tid
, 
ho°
, 
out_sockë
, 
pos
));

1861 
	`_eXosù_m¨k_ªgi°øti⁄_expúed
(
exc⁄ãxt
, 
ª£rved
->
sockë_èb
[
pos
].
ªg_ˇŒ_id
);

1862 i‡(
«±r_ªc‹d
 !
NULL
 && (
	`MSG_IS_REGISTER
(
sù
Ë|| 
	`MSG_IS_OPTIONS
(sip))) {

1863 i‡(
pos
 >= 0) {

1864 
	`_t˝_é_˛o£_socköfo
(
exc⁄ãxt
, &
ª£rved
->
sockë_èb
[
pos
]);

1868 i‡(
å
 !
NULL
)

1869 
	`osù_å™ß˘i⁄_£t_out_sockë
(
å
, 0);

1872 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosù] [TCP] [tid=%i] sockë [%s] [sock=%d] [pos=%d] i¿¥ogªss\n", 
tid
, 
ho°
, 
out_sockë
, 
pos
));

1875 i‡(
å
 =
NULL
) {

1877 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_WARNING
, 
NULL
, "[eXosù] [TCP] [tid=%i]á c⁄√˘i⁄ i†missög f‹Åÿ[%s][%d]\n", 
tid
, 
ho°
, 
p‹t
));

1878 
	`_eXosù_m¨k_ªgi°øti⁄_expúed
(
exc⁄ãxt
, 
ª£rved
->
sockë_èb
[
pos
].
ªg_ˇŒ_id
);

1880 
i
 = 
	`_t˝_é_buûd_mesßge
(
exc⁄ãxt
, 
sù
, 
pos
, 
ho°
, &
mesßge
, &
Àngth
);

1882 i‡(
i
 !0 || 
Àngth
 <= 0) {

1883 
	`osù_‰ì
(
mesßge
);

1886 i‡(
ª£rved
->
sockë_èb
[
pos
].
£ndbuÊí
 + 
Àngth
 + 1 >Ñe£rved->sockë_èb[pos].
£ndbufsize
) {

1887 
ª£rved
->
sockë_èb
[
pos
].
£ndbuf
 = 
	`osù_ªÆloc
‘e£rved->sockë_èb[pos].£ndbuf,Ñe£rved->sockë_èb[pos].
£ndbuÊí
 + 
Àngth
 + 1);

1888 
ª£rved
->
sockë_èb
[
pos
].
£ndbufsize
 =Ñe£rved->sockë_èb[pos].
£ndbuÊí
 + 
Àngth
 + 1;

1890 
	`mem˝y
(
ª£rved
->
sockë_èb
[
pos
].
£ndbuf
 +Ñe£rved->sockë_èb[pos].
£ndbuÊí
, 
mesßge
, 
Àngth
 + 1);

1891 
ª£rved
->
sockë_èb
[
pos
].
£ndbuÊí
 =Ñe£rved->sockë_èb[pos].£ndbuÊí + 
Àngth
;

1893 
	`osù_‰ì
(
mesßge
);

1897 } i‡(
i
 == 0) {

1898 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosù] [TCP] [tid=%i] sockë [%s] [sock=%d] [pos=%d] c⁄√˘ed\n", 
tid
, 
ho°
, 
out_sockë
, 
pos
));

1900 #ifde‡
HAVE_SYS_EPOLL_H


1901 i‡(
exc⁄ãxt
->
pﬁl_mëhod
 =
EXOSIP_USE_EPOLL_LT
 && 
ª£rved
->
sockë_èb
[
pos
].
t˝_ö¥ogªss_max_timeout
 > 0) {

1902 
ïﬁl_evít
 
ev
;

1904 
	`mem£t
(&
ev
, 0, (
ïﬁl_evít
));

1905 
ev
.
evíts
 = 
EPOLLIN
;

1906 
ev
.
d©a
.
fd
 = 
ª£rved
->
sockë_èb
[
pos
].
sockë
;

1907 
	`ïﬁl_˘l
(
exc⁄ãxt
->
ïfd
, 
EPOLL_CTL_MOD
, 
ª£rved
->
sockë_èb
[
pos
].
sockë
, &
ev
);

1911 
ª£rved
->
sockë_èb
[
pos
].
t˝_ö¥ogªss_max_timeout
 = 0;

1914 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosù] [TCP] [tid=%i] sockë [%s] [sock=%d] [pos=%d]Éº‹\n", 
tid
, 
ho°
, 
out_sockë
, 
pos
));

1915 
	`_eXosù_m¨k_ªgi°øti⁄_expúed
(
exc⁄ãxt
, 
ª£rved
->
sockë_èb
[
pos
].
ªg_ˇŒ_id
);

1916 
	`_t˝_é_˛o£_socköfo
(
exc⁄ãxt
, &
ª£rved
->
sockë_èb
[
pos
]);

1917 i‡(
å
 !
NULL
)

1918 
	`osù_å™ß˘i⁄_£t_out_sockë
(
å
, 0);

1922 #ifde‡
MULTITASKING_ENABLED


1924 i‡(
pos
 >0 && 
ª£rved
->
sockë_èb
[pos].
ªadSåóm
 =
NULL
) {

1925 
ª£rved
->
sockë_èb
[
pos
].
ªadSåóm
 = 
NULL
;

1926 
ª£rved
->
sockë_èb
[
pos
].
wrôeSåóm
 = 
NULL
;

1927 
	`CFSåómCª©ePaúWôhSockë
(
kCFAŒoˇt‹DeÁu…
, 
out_sockë
, &
ª£rved
->
sockë_èb
[
pos
].
ªadSåóm
, &ª£rved->sockë_èb[pos].
wrôeSåóm
);

1929 i‡(
ª£rved
->
sockë_èb
[
pos
].
ªadSåóm
 !
NULL
)

1930 
	`CFRódSåómSëPr›îty
(
ª£rved
->
sockë_èb
[
pos
].
ªadSåóm
, 
kCFSåómNëw‹kSîvi˚Ty≥
, 
kCFSåómNëw‹kSîvi˚Ty≥VoIP
);

1932 i‡(
ª£rved
->
sockë_èb
[
pos
].
wrôeSåóm
 !
NULL
)

1933 
	`CFWrôeSåómSëPr›îty
(
ª£rved
->
sockë_èb
[
pos
].
wrôeSåóm
, 
kCFSåómNëw‹kSîvi˚Ty≥
, 
kCFSåómNëw‹kSîvi˚Ty≥VoIP
);

1935 i‡(
	`CFRódSåómO≥n
(
ª£rved
->
sockë_èb
[
pos
].
ªadSåóm
)) {

1936 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO1
, 
NULL
, "[eXosù] [TCP] [tid=%i] CFRódSåómO≥¿Suc˚eded\n", 
tid
));

1939 
	`CFWrôeSåómO≥n
(
ª£rved
->
sockë_èb
[
pos
].
wrôeSåóm
);

1940 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO1
, 
NULL
, "[eXosù] [TCP] [tid=%i] sockë info:[%s][%d] [sock=%d] [pos=%d] famûy:?, c⁄√˘ed\n", 
tid
, 
ª£rved
->
sockë_èb
[
pos
].
ªmŸe_ù
,Ñe£rved->sockë_èb[pos].
ªmŸe_p‹t
,

1941 
ª£rved
->
sockë_èb
[
pos
].
sockë
,Öos));

1946 
i
 = 
	`_t˝_é_buûd_mesßge
(
exc⁄ãxt
, 
sù
, 
pos
, 
ho°
, &
mesßge
, &
Àngth
);

1948 i‡(
i
 !0 || 
Àngth
 <= 0) {

1949 i‡(
å
 !
NULL
)

1950 
	`osù_å™ß˘i⁄_£t_out_sockë
(
å
, 0);

1954 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO1
, 
NULL
, "[eXosù] [TCP] [tid=%i] mesßgê£¡ [Àn=%d]Åÿ[%s][%d]\n%s\n", 
tid
, 
Àngth
, 
ho°
, 
p‹t
, 
mesßge
));

1956 i‡(
pos
 >0 && 
exc⁄ãxt
->
íabÀ_dns_ˇche
 =1 && 
	`osù_°rˇ£cmp
(
ho°
, 
ª£rved
->
sockë_èb
[pos].
ªmŸe_ù
Ë!0 && 
	`MSG_IS_REQUEST
(
sù
)) {

1957 i‡(
	`MSG_IS_REGISTER
(
sù
)) {

1958 
eXosù_dns_ˇche
 
íåy
;

1960 
	`mem£t
(&
íåy
, 0, (
eXosù_dns_ˇche
));

1961 
	`¢¥ötf
(
íåy
.
ho°
, (entry.host), "%s", host);

1962 
	`¢¥ötf
(
íåy
.
ù
, ”¡ry.ù), "%s", 
ª£rved
->
sockë_èb
[
pos
].
ªmŸe_ù
);

1963 
	`eXosù_£t_›ti⁄
(
exc⁄ãxt
, 
EXOSIP_OPT_ADD_DNS_CACHE
, (*Ë&
íåy
);

1967 
i
 = 
	`_t˝_é_£nd
(
exc⁄ãxt
, 
out_sockë
, (c⁄° *Ë
mesßge
, (Ë
Àngth
);

1969 i‡(
i
 < 0) {

1970 i‡(
pos
 >= 0) {

1971 
	`_eXosù_m¨k_ªgi°øti⁄_expúed
(
exc⁄ãxt
, 
ª£rved
->
sockë_èb
[
pos
].
ªg_ˇŒ_id
);

1972 
	`_t˝_é_˛o£_socköfo
(
exc⁄ãxt
, &
ª£rved
->
sockë_èb
[
pos
]);

1974 i‡(
å
 !
NULL
)

1975 
	`osù_å™ß˘i⁄_£t_out_sockë
(
å
, 0);

1978 i‡(
i
 =0 && 
å
 !
NULL
 && 
	`MSG_IS_REGISTER
(
sù
Ë&& 
pos
 >= 0) {

1980 
ª£rved
->
sockë_èb
[
pos
].
t˝_max_timeout
 = 
	`osù_gësy°emtime
(
NULL
) + 32;

1983 
	`osù_‰ì
(
mesßge
);

1984  
i
;

1985 
	}
}

1987 #ifde‡
ENABLE_KEEP_ALIVE_OPTIONS_METHOD


1988 
	$_t˝_é_gë_sockë_öfo
(
sockë
, *
ho°
, 
ho°size
, *
p‹t
) {

1989 
sockaddr
 
addr
;

1990 
«meLí
 = (
addr
);

1991 
ªt
;

1993 i‡(
sockë
 <0 || 
ho°
 =
NULL
 || 
ho°size
 <0 || 
p‹t
 == NULL)

1994  
OSIP_BADPARAMETER
;

1996 
ªt
 = 
	`gësock«me
(
sockë
, &
addr
, &
«meLí
);

1998 i‡(
ªt
 != 0) {

2000  
OSIP_UNDEFINED_ERROR
;

2003 
ªt
 = 
	`_eXosù_gë«meöfo
((
sockaddr
 *Ë&
addr
, 
«meLí
, 
ho°
, 
ho°size
, 
NULL
, 0, 
NI_NUMERICHOST
);

2005 i‡(
ªt
 != 0)

2006  
OSIP_UNDEFINED_ERROR
;

2008 i‡(
addr
.
ß_Ámûy
 =
AF_INET
)

2009 (*
p‹t
Ë
	`¡ohs
(((
sockaddr_ö
 *Ë&
addr
)->
sö_p‹t
);

2012 (*
p‹t
Ë
	`¡ohs
(((
sockaddr_ö6
 *Ë&
addr
)->
sö6_p‹t
);

2015  
OSIP_SUCCESS
;

2016 
	}
}

2019 
	$t˝_é_kì∑live
(
eXosù_t
 *
exc⁄ãxt
) {

2020 
eXét˝
 *
ª£rved
 = (eXét˝ *Ë
exc⁄ãxt
->
eXét˝_ª£rved
;

2021 
buf
[5] = "\r\n\r\n";

2022 
pos
;

2023 
i
;

2025 i‡(
ª£rved
 =
NULL
) {

2026 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] [TCP] wrong state: createÅransportÜayer first\n"));

2027  
OSIP_WRONG_STATE
;

2030 i‡(
ª£rved
->
t˝_sockë
 <= 0)

2031  
OSIP_UNDEFINED_ERROR
;

2033 
pos
 = 0;Öo†< 
EXOSIP_MAX_SOCKETS
;Öos++) {

2034 i‡(
ª£rved
->
sockë_èb
[
pos
].
sockë
 > 0) {

2035 
i
 = 
	`_t˝és_é_is_c⁄√˘ed
(
exc⁄ãxt
->
pﬁl_mëhod
, 
ª£rved
->
sockë_èb
[
pos
].
sockë
);

2037 i‡(
i
 > 0) {

2038 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosù] [TCP] [kì∑live] sockë info:[%s][%d] [sock=%d] [pos=%d] i¿¥ogªss\n", 
ª£rved
->
sockë_èb
[
pos
].
ªmŸe_ù
,Ñe£rved->sockë_èb[pos].
ªmŸe_p‹t
,

2039 
ª£rved
->
sockë_èb
[
pos
].
sockë
,Öos));

2042 } i‡(
i
 == 0) {

2043 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosù] [TCP] [kì∑live] sockë info:[%s][%d] [sock=%d] [pos=%d] c⁄√˘ed\n", 
ª£rved
->
sockë_èb
[
pos
].
ªmŸe_ù
,Ñe£rved->sockë_èb[pos].
ªmŸe_p‹t
,

2044 
ª£rved
->
sockë_èb
[
pos
].
sockë
,Öos));

2046 #ifde‡
HAVE_SYS_EPOLL_H


2047 i‡(
exc⁄ãxt
->
pﬁl_mëhod
 =
EXOSIP_USE_EPOLL_LT
 && 
ª£rved
->
sockë_èb
[
pos
].
t˝_ö¥ogªss_max_timeout
 > 0) {

2048 
ïﬁl_evít
 
ev
;

2050 
	`mem£t
(&
ev
, 0, (
ïﬁl_evít
));

2051 
ev
.
evíts
 = 
EPOLLIN
;

2052 
ev
.
d©a
.
fd
 = 
ª£rved
->
sockë_èb
[
pos
].
sockë
;

2053 
	`ïﬁl_˘l
(
exc⁄ãxt
->
ïfd
, 
EPOLL_CTL_MOD
, 
ª£rved
->
sockë_èb
[
pos
].
sockë
, &
ev
);

2057 
ª£rved
->
sockë_èb
[
pos
].
t˝_ö¥ogªss_max_timeout
 = 0;

2060 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosù] [TCP] [kì∑live] sockë info:[%s][%d] [sock=%d] [pos=%d]Éº‹\n", 
ª£rved
->
sockë_èb
[
pos
].
ªmŸe_ù
,Ñe£rved->sockë_èb[pos].
ªmŸe_p‹t
,

2061 
ª£rved
->
sockë_èb
[
pos
].
sockë
,Öos));

2062 
	`_eXosù_m¨k_ªgi°øti⁄_expúed
(
exc⁄ãxt
, 
ª£rved
->
sockë_èb
[
pos
].
ªg_ˇŒ_id
);

2063 
	`_t˝_é_˛o£_socköfo
(
exc⁄ãxt
, &
ª£rved
->
sockë_èb
[
pos
]);

2067 i‡(
exc⁄ãxt
->
ka_öãrvÆ
 > 0) {

2068 #ifde‡
ENABLE_KEEP_ALIVE_OPTIONS_METHOD


2070 i‡(
exc⁄ãxt
->
ka_›ti⁄s
 != 0) {

2071 
osù_mesßge_t
 *
›ti⁄s
;

2072 
‰om
[
NI_MAXHOST
];

2073 
to
[
NI_MAXHOST
];

2074 
locù
[
NI_MAXHOST
];

2075 
lo˝‹t
;

2076 *
mesßge
;

2077 
size_t
 
Àngth
;

2079 
›ti⁄s
 = 
NULL
;

2080 
	`mem£t
(
to
, '\0', (to));

2081 
	`mem£t
(
‰om
, '\0', (from));

2082 
	`mem£t
(
locù
, '\0', (locip));

2083 
lo˝‹t
 = 0;

2085 
	`¢¥ötf
(
to
, —o), "<sù:%s:%d>", 
ª£rved
->
sockë_èb
[
pos
].
ªmŸe_ù
,Ñe£rved->sockë_èb[pos].
ªmŸe_p‹t
);

2086 
	`_t˝_é_gë_sockë_öfo
(
ª£rved
->
sockë_èb
[
pos
].
sockë
, 
locù
, ÷ocù), &
lo˝‹t
);

2088 i‡(
locù
[0] == '\0') {

2089 
	`OSIP_TRACE
(

2090 
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_WARNING
, 
NULL
, "[eXosù] [TCP] [kì∑live] sockë [%s] [sock=%d] [pos=%d] faûedÅÿ¸óã sù o±i⁄†mesßge\n", 
ª£rved
->
sockë_èb
[
pos
].
ªmŸe_ù
,Ñe£rved->sockë_èb[pos].
sockë
,Öos));

2094 
	`¢¥ötf
(
‰om
, (‰om), "<sù:%s:%d>", 
locù
, 
lo˝‹t
);

2097 i‡(
	`eXosù_›ti⁄s_buûd_ªque°
(
exc⁄ãxt
, &
›ti⁄s
, 
to
, 
‰om
, 
NULL
Ë=
OSIP_SUCCESS
) {

2098 
mesßge
 = 
NULL
;

2099 
Àngth
 = 0;

2102 i‡(
	`osù_mesßge_to_°r
(
›ti⁄s
, &
mesßge
, &
Àngth
Ë=
OSIP_SUCCESS
) {

2103 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosù] [TCP] [kì∑live] sockë [%s] [sock=%d] [pos=%d] sídög sù o±i⁄s\n%s", 
ª£rved
->
sockë_èb
[
pos
].
ªmŸe_ù
,Ñe£rved->sockë_èb[pos].
sockë
,Öos, 
mesßge
));

2104 
i
 = (Ë
	`£nd
(
ª£rved
->
sockë_èb
[
pos
].
sockë
, (c⁄° *Ë
mesßge
, 
Àngth
, 0);

2105 
	`osù_‰ì
(
mesßge
);

2107 i‡(
i
 > 0) {

2108 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO1
, 
NULL
, "[eXosip] [TCP] [keepalive] keepálive sent on TCP\n"));

2112 
	`OSIP_TRACE
(

2113 
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_WARNING
, 
NULL
, "[eXosù] [TCP] [kì∑live] sockë [%s] [sock=%d] [pos=%d] faûedÅÿc⁄vîàsù o±i⁄†mesßge\n", 
ª£rved
->
sockë_èb
[
pos
].
ªmŸe_ù
,Ñe£rved->sockë_èb[pos].
sockë
,Öos));

2117 
	`OSIP_TRACE
(

2118 
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_WARNING
, 
NULL
, "[eXosù] [TCP] [kì∑live] sockë [%s] [sock=%d] [pos=%d] faûedÅÿ¸óã sù o±i⁄†mesßge\n", 
ª£rved
->
sockë_èb
[
pos
].
ªmŸe_ù
,Ñe£rved->sockë_èb[pos].
sockë
,Öos));

2125 
i
 = (Ë
	`£nd
(
ª£rved
->
sockë_èb
[
pos
].
sockë
, (c⁄° *Ë
buf
, 4, 0);

2126 
ª£rved
->
sockë_èb
[
pos
].
pög_rfc5626
 = 
	`osù_gësy°emtime
(
NULL
) + 9;

2127 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_WARNING
, 
NULL
, "[eXosù] [TCP] [kì∑live] [ªt=%i] sockë [%s] [sock=%d] [pos=%d]\n", 
i
, 
ª£rved
->
sockë_èb
[
pos
].
ªmŸe_ù
,Ñe£rved->sockë_èb[pos].
sockë
,Öos));

2132  
OSIP_SUCCESS
;

2133 
	}
}

2135 
	$t˝_é_£t_sockë
(
eXosù_t
 *
exc⁄ãxt
, 
sockë
) {

2136 
eXét˝
 *
ª£rved
 = (eXét˝ *Ë
exc⁄ãxt
->
eXét˝_ª£rved
;

2138 i‡(
ª£rved
 =
NULL
) {

2139 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] [TCP] wrong state: createÅransportÜayer first\n"));

2140  
OSIP_WRONG_STATE
;

2143 
ª£rved
->
t˝_sockë
 = 
sockë
;

2145  
OSIP_SUCCESS
;

2146 
	}
}

2148 
	$t˝_é_masquîade_c⁄è˘
(
eXosù_t
 *
exc⁄ãxt
, c⁄° *
public_addªss
, 
p‹t
) {

2149 i‡(
public_addªss
 =
NULL
 ||Öublic_address[0] == '\0') {

2150 
	`mem£t
(
exc⁄ãxt
->
t˝_fúewÆl_ù
, '\0', (excontext->tcp_firewall_ip));

2151 
	`mem£t
(
exc⁄ãxt
->
t˝_fúewÆl_p‹t
, '\0', (excontext->tcp_firewall_port));

2152  
OSIP_SUCCESS
;

2155 
	`¢¥ötf
(
exc⁄ãxt
->
t˝_fúewÆl_ù
, ”xc⁄ãxt->t˝_fúewÆl_ù), "%s", 
public_addªss
);

2157 i‡(
p‹t
 > 0) {

2158 
	`¢¥ötf
(
exc⁄ãxt
->
t˝_fúewÆl_p‹t
, ”xc⁄ãxt->t˝_fúewÆl_p‹t), "%i", 
p‹t
);

2161  
OSIP_SUCCESS
;

2162 
	}
}

2164 
	$t˝_é_gë_masquîade_c⁄è˘
(
eXosù_t
 *
exc⁄ãxt
, *
ù
, 
ù_size
, *
p‹t
, 
p‹t_size
) {

2165 
eXét˝
 *
ª£rved
 = (eXét˝ *Ë
exc⁄ãxt
->
eXét˝_ª£rved
;

2167 
	`mem£t
(
ù
, 0, 
ù_size
);

2168 
	`mem£t
(
p‹t
, 0, 
p‹t_size
);

2170 i‡(
ª£rved
 =
NULL
) {

2171 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] [TCP] wrong state: createÅransportÜayer first\n"));

2172  
OSIP_WRONG_STATE
;

2175 i‡(
exc⁄ãxt
->
t˝_fúewÆl_ù
[0] != '\0')

2176 
	`¢¥ötf
(
ù
, 
ù_size
, "%s", 
exc⁄ãxt
->
t˝_fúewÆl_ù
);

2178 i‡(
exc⁄ãxt
->
t˝_fúewÆl_p‹t
[0] != '\0')

2179 
	`¢¥ötf
(
p‹t
, 
p‹t_size
, "%s", 
exc⁄ãxt
->
t˝_fúewÆl_p‹t
);

2181  
OSIP_SUCCESS
;

2182 
	}
}

2184 
	$t˝_é_upd©e_c⁄è˘
(
eXosù_t
 *
exc⁄ãxt
, 
osù_mesßge_t
 *
ªq
) {

2185 
ªq
->
≠∂iˇti⁄_d©a
 = (*) 0x1;

2186  
OSIP_SUCCESS
;

2187 
	}
}

2189 
	$t˝_é_check_Æl_c⁄√˘i⁄
(
eXosù_t
 *
exc⁄ãxt
) {

2190 
eXét˝
 *
ª£rved
 = (eXét˝ *Ë
exc⁄ãxt
->
eXét˝_ª£rved
;

2191 
pos
;

2193 i‡(
ª£rved
 =
NULL
) {

2194 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] [TCP] wrong state: createÅransportÜayer first\n"));

2195  
OSIP_WRONG_STATE
;

2198 i‡(
ª£rved
->
t˝_sockë
 <= 0)

2199  
OSIP_UNDEFINED_ERROR
;

2201 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosip] [TCP] [checkall] checkingáll connection\n"));

2202 
pos
 = 0;Öo†< 
EXOSIP_MAX_SOCKETS
;Öos++) {

2203 i‡(
ª£rved
->
sockë_èb
[
pos
].
sockë
 > 0) {

2204 i‡(
ª£rved
->
sockë_èb
[
pos
].
t˝_ö¥ogªss_max_timeout
 > 0) {

2205 
time_t
 
now
 = 
	`osù_gësy°emtime
(
NULL
);

2207 i‡(
now
 > 
ª£rved
->
sockë_èb
[
pos
].
t˝_ö¥ogªss_max_timeout
) {

2208 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosip] [TCP] [checkall] socket is inÖrogress since 32 seconds / close socket\n"));

2209 
ª£rved
->
sockë_èb
[
pos
].
t˝_ö¥ogªss_max_timeout
 = 0;

2210 
	`_eXosù_m¨k_ªgi°øti⁄_expúed
(
exc⁄ãxt
, 
ª£rved
->
sockë_èb
[
pos
].
ªg_ˇŒ_id
);

2211 
	`_t˝_é_˛o£_socköfo
(
exc⁄ãxt
, &
ª£rved
->
sockë_èb
[
pos
]);

2215 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosù] [TCP] [checkÆl] sockë info:[%s][%d] [sock=%d] [pos=%d] i¿¥ogªss\n", 
ª£rved
->
sockë_èb
[
pos
].
ªmŸe_ù
,Ñe£rved->sockë_èb[pos].
ªmŸe_p‹t
,

2216 
ª£rved
->
sockë_èb
[
pos
].
sockë
,Öos));

2218 } i‡(
ª£rved
->
sockë_èb
[
pos
].
pög_rfc5626
 > 0 &&Ñe£rved->sockë_èb[pos].
p⁄g_suµ‹ãd
 > 0) {

2219 
time_t
 
now
 = 
	`osù_gësy°emtime
(
NULL
);

2221 i‡(
now
 > 
ª£rved
->
sockë_èb
[
pos
].
pög_rfc5626
) {

2222 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosip] [TCP] [checkall]ÇoÖong[CRLF] forÖing[CRLFCRLF]\n"));

2223 
ª£rved
->
sockë_èb
[
pos
].
t˝_max_timeout
 = 0;

2224 
	`_eXosù_m¨k_ªgi°øti⁄_expúed
(
exc⁄ãxt
, 
ª£rved
->
sockë_èb
[
pos
].
ªg_ˇŒ_id
);

2225 
	`_t˝_é_˛o£_socköfo
(
exc⁄ãxt
, &
ª£rved
->
sockë_èb
[
pos
]);

2229 } i‡(
ª£rved
->
sockë_èb
[
pos
].
t˝_ö¥ogªss_max_timeout
 =0 &&Ñe£rved->sockë_èb[pos].
t˝_max_timeout
 > 0) {

2230 
time_t
 
now
 = 
	`osù_gësy°emtime
(
NULL
);

2232 i‡(
now
 > 
ª£rved
->
sockë_èb
[
pos
].
t˝_max_timeout
) {

2233 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosip] [TCP] [checkall] weÉxpectedáÑeply onÉstablished sockets / close socket\n"));

2234 
ª£rved
->
sockë_èb
[
pos
].
t˝_max_timeout
 = 0;

2235 
	`_eXosù_m¨k_ªgi°øti⁄_expúed
(
exc⁄ãxt
, 
ª£rved
->
sockë_èb
[
pos
].
ªg_ˇŒ_id
);

2236 
	`_t˝_é_˛o£_socköfo
(
exc⁄ãxt
, &
ª£rved
->
sockë_èb
[
pos
]);

2243  
OSIP_SUCCESS
;

2244 
	}
}

2246 
	$t˝_é_check_c⁄√˘i⁄
(
eXosù_t
 *
exc⁄ãxt
, 
sockë
) {

2247 
eXét˝
 *
ª£rved
 = (eXét˝ *Ë
exc⁄ãxt
->
eXét˝_ª£rved
;

2248 
pos
;

2249 
i
;

2251 i‡(
ª£rved
 =
NULL
) {

2252 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] [TCP] wrong state: createÅransportÜayer first\n"));

2253  
OSIP_WRONG_STATE
;

2256 i‡(
sockë
 == -1) {

2257  
	`t˝_é_check_Æl_c⁄√˘i⁄
(
exc⁄ãxt
);

2260 
pos
 = 0;Öo†< 
EXOSIP_MAX_SOCKETS
;Öos++) {

2261 i‡(
ª£rved
->
sockë_èb
[
pos
].
sockë
 == socket)

2264 i‡(
pos
 =
EXOSIP_MAX_SOCKETS
)

2265  
OSIP_NOTFOUND
;

2267 
i
 = 
	`_t˝és_é_is_c⁄√˘ed
(
exc⁄ãxt
->
pﬁl_mëhod
, 
ª£rved
->
sockë_èb
[
pos
].
sockë
);

2269 i‡(
i
 > 0) {

2270 i‡(
ª£rved
->
sockë_èb
[
pos
].
t˝_ö¥ogªss_max_timeout
 > 0) {

2271 
time_t
 
now
 = 
	`osù_gësy°emtime
(
NULL
);

2273 i‡(
now
 > 
ª£rved
->
sockë_èb
[
pos
].
t˝_ö¥ogªss_max_timeout
) {

2274 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosip] [TCP] [check] socket is inÖrogress since 32 seconds / close socket\n"));

2275 
ª£rved
->
sockë_èb
[
pos
].
t˝_ö¥ogªss_max_timeout
 = 0;

2276 
	`_eXosù_m¨k_ªgi°øti⁄_expúed
(
exc⁄ãxt
, 
ª£rved
->
sockë_èb
[
pos
].
ªg_ˇŒ_id
);

2277 
	`_t˝_é_˛o£_socköfo
(
exc⁄ãxt
, &
ª£rved
->
sockë_èb
[
pos
]);

2278  
OSIP_SUCCESS
;

2282 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosù] [TCP] [check] sockë info:[%s][%d] [sock=%d] [pos=%d] i¿¥ogªss\n", 
ª£rved
->
sockë_èb
[
pos
].
ªmŸe_ù
,Ñe£rved->sockë_èb[pos].
ªmŸe_p‹t
,

2283 
ª£rved
->
sockë_èb
[
pos
].
sockë
,Öos));

2284  
OSIP_SUCCESS
;

2286 } i‡(
i
 == 0) {

2287 #ifde‡
HAVE_SYS_EPOLL_H


2288 i‡(
exc⁄ãxt
->
pﬁl_mëhod
 =
EXOSIP_USE_EPOLL_LT
 && 
ª£rved
->
sockë_èb
[
pos
].
t˝_ö¥ogªss_max_timeout
 > 0) {

2289 
ïﬁl_evít
 
ev
;

2291 
	`mem£t
(&
ev
, 0, (
ïﬁl_evít
));

2292 
ev
.
evíts
 = 
EPOLLIN
;

2293 
ev
.
d©a
.
fd
 = 
ª£rved
->
sockë_èb
[
pos
].
sockë
;

2294 
	`ïﬁl_˘l
(
exc⁄ãxt
->
ïfd
, 
EPOLL_CTL_MOD
, 
ª£rved
->
sockë_èb
[
pos
].
sockë
, &
ev
);

2298 
ª£rved
->
sockë_èb
[
pos
].
t˝_ö¥ogªss_max_timeout
 = 0;

2300 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosù] [TCP] [check] sockë info:[%s][%d] [sock=%d] [pos=%d] c⁄√˘ed\n", 
ª£rved
->
sockë_èb
[
pos
].
ªmŸe_ù
,Ñe£rved->sockë_èb[pos].
ªmŸe_p‹t
,

2301 
ª£rved
->
sockë_èb
[
pos
].
sockë
,Öos));

2303 i‡(
ª£rved
->
sockë_èb
[
pos
].
t˝_max_timeout
 > 0) {

2304 
time_t
 
now
 = 
	`osù_gësy°emtime
(
NULL
);

2306 i‡(
now
 > 
ª£rved
->
sockë_èb
[
pos
].
t˝_max_timeout
) {

2307 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosip] [TCP] [check] weÉxceptedáÑeply onÉstablished sockets / close socket\n"));

2308 
ª£rved
->
sockë_èb
[
pos
].
t˝_max_timeout
 = 0;

2309 
	`_eXosù_m¨k_ªgi°øti⁄_expúed
(
exc⁄ãxt
, 
ª£rved
->
sockë_èb
[
pos
].
ªg_ˇŒ_id
);

2310 
	`_t˝_é_˛o£_socköfo
(
exc⁄ãxt
, &
ª£rved
->
sockë_èb
[
pos
]);

2311  
OSIP_SUCCESS
;

2315  
OSIP_SUCCESS
;

2317 
	`OSIP_TRACE
(

2318 
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosù] [TCP] [check] sockë info:[%s][%d] [sock=%d] [pos=%d]Éº‹\n", 
ª£rved
->
sockë_èb
[
pos
].
ªmŸe_ù
,Ñe£rved->sockë_èb[pos].
ªmŸe_p‹t
,Ñe£rved->sockë_èb[pos].
sockë
,Öos));

2319 
	`_eXosù_m¨k_ªgi°øti⁄_expúed
(
exc⁄ãxt
, 
ª£rved
->
sockë_èb
[
pos
].
ªg_ˇŒ_id
);

2320 
	`_t˝_é_˛o£_socköfo
(
exc⁄ãxt
, &
ª£rved
->
sockë_èb
[
pos
]);

2321  
OSIP_SUCCESS
;

2324  
OSIP_SUCCESS
;

2325 
	}
}

2327 
eXé_¥Ÿocﬁ
 
	geXé_t˝
 = {1,

2331 
IPPROTO_TCP
,

2332 
AF_INET
,

2337 &
t˝_é_öô
,

2338 &
t˝_é_‰ì
,

2339 &
t˝_é_›í
,

2340 &
t˝_é_£t_fd£t
,

2341 &
t˝_é_ªad_mesßge
,

2342 #ifde‡
HAVE_SYS_EPOLL_H


2343 &
t˝_é_ïﬁl_ªad_mesßge
,

2345 &
t˝_é_£nd_mesßge
,

2346 &
t˝_é_kì∑live
,

2347 &
t˝_é_£t_sockë
,

2348 &
t˝_é_masquîade_c⁄è˘
,

2349 &
t˝_é_gë_masquîade_c⁄è˘
,

2350 &
t˝_é_upd©e_c⁄è˘
,

2351 &
t˝_é_ª£t
,

2352 &
t˝_é_check_c⁄√˘i⁄
};

2354 
	$eXosù_å™•‹t_t˝_öô
(
eXosù_t
 *
exc⁄ãxt
) {

2355 
	`mem˝y
(&
exc⁄ãxt
->
eXé_å™•‹t
, &
eXé_t˝
, (
eXé_¥Ÿocﬁ
));

2356 
	}
}

	@/home/unasaw/sip_project/libexosip2-5.3.0/src/eXtl_tls.c

33 #ifde‡
WIN32


34 #i‚de‡
UNICODE


35 
	#UNICODE


	)

39 
	~"eXosù2.h
"

40 
	~"eXå™•‹t.h
"

42 #ifde‡
HAVE_SYS_STAT_H


43 
	~<sys/°©.h
>

46 #ifde‡
HAVE_MSTCPIP_H


47 
	~<M°˝ù.h
>

50 #ifde‡
HAVE_FCNTL_H


51 
	~<f˙é.h
>

54 #ifde‡
HAVE_WINCRYPT_H


55 
	~<wö¸y±.h
>

58 #i‡!
deföed
(
_WIN32_WCE
)

59 
	~<î∫o.h
>

62 #i‡
deföed
(
HAVE_NETINET_TCP_H
)

63 
	~<√töë/t˝.h
>

66 #ifde‡
HAVE_UNISTD_H


67 
	~<uni°d.h
>

70 #i‡
deföed
(
HAVE_WINSOCK2_H
)

71 
	#ex_î∫o
 
	`WSAGëLa°Eº‹
()

	)

72 
	#is_wouldblock_îr‹
(
r
Ë(‘Ë=
WSAEINTR
 || (rË=
WSAEWOULDBLOCK
)

	)

73 
	#is_c⁄ƒe£t_îr‹
(
r
Ë(‘Ë=
WSAECONNRESET
 || (rË=
WSAECONNABORTED
 || (rË=
WSAETIMEDOUT
 || (rË=
WSAENETRESET
 || (rË=
WSAENOTCONN
)

	)

75 
	#ex_î∫o
 
î∫o


	)

77 #i‚de‡
is_wouldblock_îr‹


78 
	#is_wouldblock_îr‹
(
r
Ë(‘Ë=
EINTR
 || (rË=
EWOULDBLOCK
 || (rË=
EAGAIN
)

	)

79 
	#is_c⁄ƒe£t_îr‹
(
r
Ë(‘Ë=
ECONNRESET
 || (rË=
ECONNABORTED
 || (rË=
ETIMEDOUT
 || (rË=
ENETRESET
 || (rË=
ENOTCONN
)

	)

82 #ifde‡
HAVE_OPENSSL_SSL_H


84 
	~<›ís¶/›ís¶c⁄f.h
>

85 
	~<›ís¶/›ís¶v.h
>

87 
	#ex_vîify_dïth
 10

	)

88 
	~<›ís¶/bn.h
>

89 #i‚de‡
OPENSSL_NO_DH


90 
	~<›ís¶/dh.h
>

92 
	~<›ís¶/îr.h
>

93 
	~<›ís¶/≥m.h
>

94 
	~<›ís¶/ønd.h
>

95 
	~<›ís¶/s¶.h
>

96 #i‚de‡
OPENSSL_NO_RSA


97 
	~<›ís¶/rß.h
>

99 
	~<›ís¶/és1.h
>

100 
	~<›ís¶/x509.h
>

101 #i‡!(
OPENSSL_VERSION_NUMBER
 < 0x10002000L)

102 
	~<›ís¶/x509v3.h
>

105 
	#SSLDEBUG
 1

	)

117 #ifde‡
__APPLE_CC__


118 
	~"T¨gëC⁄dôi⁄Æs.h
"

121 #i‡
deföed
(
__APPLE__
Ë&& (
TARGET_OS_IPHONE
 == 0)

122 
	~<C‹eFound©i⁄/C‹eFound©i⁄.h
>

123 
	~<C‹eSîvi˚s/C‹eSîvi˚s.h
>

124 
	~<Securôy/Securôy.h
>

127 #i‡
TARGET_OS_IPHONE


128 
	~<CFNëw‹k/CFSockëSåóm.h
>

129 
	~<C‹eFound©i⁄/CFSåóm.h
>

130 
	#MULTITASKING_ENABLED


	)

133 #i‡
OPENSSL_VERSION_NUMBER
 < 0x10100000L

134 
	#X509_STORE_gë0_∑øm
(
°‹e
Ë(°‹e->
∑øm
)

	)

137 
SSL_CTX
 *
öôülize_˛õ¡_˘x
(
eXosù_t
 *
exc⁄ãxt
, 
eXosù_és_˘x_t
 *
˛õ¡_˘x
, 
å™•‹t
, c⁄° *
¢i_£rvî«meödiˇti⁄
);

139 
SSL_CTX
 *
öôülize_£rvî_˘x
(
eXosù_t
 *
exc⁄ãxt
, 
eXosù_és_˘x_t
 *
§v_˘x
, 
å™•‹t
);

141 
vîify_cb
(
¥evîify_ok
, 
X509_STORE_CTX
 *
°‹e
);

144 
	s_és_°ªam
 {

145 
	msockë
;

146 
sockaddr
 
	mai_addr
;

147 
sockÀn_t
 
	mai_addæí
;

148 
	m¢i_£rvî«meödiˇti⁄
[256];

149 
	mªmŸe_ù
[65];

150 
	mªmŸe_p‹t
;

151 *
	m¥evious_c⁄ã¡
;

152 
	m¥evious_c⁄ã¡_Àn
;

153 
SSL
 *
	ms¶_c⁄n
;

154 
SSL_CTX
 *
	ms¶_˘x
;

155 
	ms¶_°©e
;

156 *
	mbuf
;

157 
size_t
 
	mbufsize
;

158 
size_t
 
	mbuÊí
;

159 *
	m£ndbuf
;

160 
size_t
 
	m£ndbufsize
;

161 
size_t
 
	m£ndbuÊí
;

162 #ifde‡
MULTITASKING_ENABLED


163 
CFRódSåómRef
 
	mªadSåóm
;

164 
CFWrôeSåómRef
 
	mwrôeSåóm
;

166 
	m«âed_ù
[65];

167 
	m«âed_p‹t
;

168 
	mïhemîÆ_p‹t
;

169 
	mövÆid
;

170 
	mis_£rvî
;

171 
time_t
 
	mt˝_max_timeout
;

172 
time_t
 
	mt˝_ö¥ogªss_max_timeout
;

173 
	mªg_ˇŒ_id
[64];

174 
time_t
 
	mpög_rfc5626
;

175 
	mp⁄g_suµ‹ãd
;

178 #i‚de‡
SOCKET_TIMEOUT


181 
	#SOCKET_TIMEOUT
 0

	)

184 
_és_é_£nd
(
eXosù_t
 *
exc⁄ãxt
, 
SSL
 *
s¶
, c⁄° *
mesßge
, 
Àngth
);

186 
	seXéés
 {

187 
	més_sockë
;

188 
sockaddr_°‹age
 
	mai_addr
;

189 
	mai_addr_Àn
;

191 
SSL_CTX
 *
	m£rvî_˘x
;

192 
SSL_CTX
 *
	m˛õ¡_˘x
;

194 
_és_°ªam
 
	msockë_èb
[
EXOSIP_MAX_SOCKETS
];

197 
	$és_é_öô
(
eXosù_t
 *
exc⁄ãxt
) {

198 
eXéés
 *
ª£rved
 = (eXéé†*Ë
	`osù_mÆloc
((eXtltls));

200 i‡(
ª£rved
 =
NULL
)

201  
OSIP_NOMEM
;

203 
ª£rved
->
és_sockë
 = 0;

204 
ª£rved
->
£rvî_˘x
 = 
NULL
;

205 
ª£rved
->
˛õ¡_˘x
 = 
NULL
;

206 
	`mem£t
(&
ª£rved
->
ai_addr
, 0, (
sockaddr_°‹age
));

207 
ª£rved
->
ai_addr_Àn
 = 0;

208 
	`mem£t
(&
ª£rved
->
sockë_èb
, 0, (
_és_°ªam
Ë* 
EXOSIP_MAX_SOCKETS
);

210 
exc⁄ãxt
->
eXéés_ª£rved
 = 
ª£rved
;

211  
OSIP_SUCCESS
;

212 
	}
}

214 
	$_és_é_˛o£_socköfo
(
eXosù_t
 *
exc⁄ãxt
, 
_és_°ªam
 *
socköfo
) {

216 
	`_eXosù_m¨k_Æl_å™ß˘i⁄_å™•‹t_îr‹
(
exc⁄ãxt
, 
socköfo
->
sockë
);

218 i‡(
socköfo
->
sockë
 > 0) {

219 i‡(
socköfo
->
s¶_c⁄n
 !
NULL
) {

220 
	`SSL_shutdown
(
socköfo
->
s¶_c⁄n
);

221 
	`SSL_shutdown
(
socköfo
->
s¶_c⁄n
);

222 
	`SSL_‰ì
(
socköfo
->
s¶_c⁄n
);

225 i‡(
socköfo
->
s¶_˘x
 !
NULL
)

226 
	`SSL_CTX_‰ì
(
socköfo
->
s¶_˘x
);

228 
	`_eXosù_˛o£sockë
(
socköfo
->
sockë
);

231 i‡(
socköfo
->
buf
 !
NULL
)

232 
	`osù_‰ì
(
socköfo
->
buf
);

234 i‡(
socköfo
->
£ndbuf
 !
NULL
)

235 
	`osù_‰ì
(
socköfo
->
£ndbuf
);

237 #ifde‡
MULTITASKING_ENABLED


239 i‡(
socköfo
->
ªadSåóm
 !
NULL
) {

240 
	`CFRódSåómClo£
(
socköfo
->
ªadSåóm
);

241 
	`CFRñó£
(
socköfo
->
ªadSåóm
);

244 i‡(
socköfo
->
wrôeSåóm
 !
NULL
) {

245 
	`CFWrôeSåómClo£
(
socköfo
->
wrôeSåóm
);

246 
	`CFRñó£
(
socköfo
->
wrôeSåóm
);

250 
	`mem£t
(
socköfo
, 0, (*sockinfo));

251 
	}
}

253 
	$és_é_‰ì
(
eXosù_t
 *
exc⁄ãxt
) {

254 
eXéés
 *
ª£rved
 = (eXéé†*Ë
exc⁄ãxt
->
eXéés_ª£rved
;

255 
pos
;

257 i‡(
ª£rved
 =
NULL
)

258  
OSIP_SUCCESS
;

260 i‡(
ª£rved
->
£rvî_˘x
 !
NULL
)

261 
	`SSL_CTX_‰ì
(
ª£rved
->
£rvî_˘x
);

263 
ª£rved
->
£rvî_˘x
 = 
NULL
;

265 i‡(
ª£rved
->
˛õ¡_˘x
 !
NULL
)

266 
	`SSL_CTX_‰ì
(
ª£rved
->
˛õ¡_˘x
);

268 
ª£rved
->
˛õ¡_˘x
 = 
NULL
;

270 
pos
 = 0;Öo†< 
EXOSIP_MAX_SOCKETS
;Öos++) {

271 
	`_és_é_˛o£_socköfo
(
exc⁄ãxt
, &
ª£rved
->
sockë_èb
[
pos
]);

274 #i‡
OPENSSL_VERSION_NUMBER
 < 0x10100000L

275 #i‡
OPENSSL_VERSION_NUMBER
 >= 0x10000000L

276 
	`ERR_ªmove_thªad_°©e
(
NULL
);

278 
	`ERR_ªmove_°©e
(0);

282 
	`mem£t
(&
ª£rved
->
sockë_èb
, 0, (
_és_°ªam
Ë* 
EXOSIP_MAX_SOCKETS
);

284 
	`mem£t
(&
ª£rved
->
ai_addr
, 0, (
sockaddr_°‹age
));

285 
ª£rved
->
ai_addr_Àn
 = 0;

287 i‡(
ª£rved
->
és_sockë
 > 0)

288 
	`_eXosù_˛o£sockë
(
ª£rved
->
és_sockë
);

290 
ª£rved
->
és_sockë
 = 0;

292 
	`osù_‰ì
(
ª£rved
);

293 
exc⁄ãxt
->
eXéés_ª£rved
 = 
NULL
;

294  
OSIP_SUCCESS
;

295 
	}
}

297 
	$és_é_ª£t
(
eXosù_t
 *
exc⁄ãxt
) {

298 
eXéés
 *
ª£rved
 = (eXéé†*Ë
exc⁄ãxt
->
eXéés_ª£rved
;

299 
pos
;

301 i‡(
ª£rved
 =
NULL
) {

302 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] [TLS] wrong state: createÅransportÜayer first\n"));

303  
OSIP_WRONG_STATE
;

306 
pos
 = 0;Öo†< 
EXOSIP_MAX_SOCKETS
;Öos++) {

307 i‡(
ª£rved
->
sockë_èb
[
pos
].
sockë
 > 0)

308 
ª£rved
->
sockë_èb
[
pos
].
övÆid
 = 1;

311  
OSIP_SUCCESS
;

312 
	}
}

314 
	$_és_add_˚πifiˇãs
(
eXosù_t
 *
exc⁄ãxt
, 
SSL_CTX
 *
˘x
) {

315 
cou¡
 = 0;

317 i‡(
exc⁄ãxt
->
és_vîify_˛õ¡_˚πifiˇã
 & 0x04) {

321 #ifde‡
HAVE_WINCRYPT_H


322 
PCCERT_CONTEXT
 
pCîtCtx
;

323 
X509
 *
˚π
 = 
NULL
;

324 
HCERTSTORE
 
hSt‹e
 = 
	`CîtO≥nSy°emSt‹e
(0, 
L
"CA");

325 
X509_STORE
 *
x509_°‹e
;

327 
pCîtCtx
 = 
	`CîtEnumCîtifiˇãsInSt‹e
(
hSt‹e
, 
NULL
);ÖCertCtx != NULL;ÖCertCtx = CertEnumCertificatesInStore(hStore,ÖCertCtx)) {

328 
˚π
 = 
	`d2i_X509
(
NULL
, (c⁄° **Ë&
pCîtCtx
->
pbCîtEncoded
,ÖCîtCtx->
cbCîtEncoded
);

330 i‡(
˚π
 =
NULL
) {

334 
x509_°‹e
 = 
	`SSL_CTX_gë_˚π_°‹e
(
˘x
);

336 i‡(
x509_°‹e
 =
NULL
) {

337 
	`X509_‰ì
(
˚π
);

341 i‡(!
	`X509_STORE_add_˚π
(
x509_°‹e
, 
˚π
)) {

342 
	`X509_‰ì
(
˚π
);

346 
cou¡
++;

347 
	`X509_‰ì
(
˚π
);

350 
	`CîtClo£St‹e
(
hSt‹e
, 0);

352 
hSt‹e
 = 
	`CîtO≥nSy°emSt‹e
(0, 
L
"ROOT");

354 
pCîtCtx
 = 
	`CîtEnumCîtifiˇãsInSt‹e
(
hSt‹e
, 
NULL
);ÖCertCtx != NULL;ÖCertCtx = CertEnumCertificatesInStore(hStore,ÖCertCtx)) {

355 
˚π
 = 
	`d2i_X509
(
NULL
, (c⁄° **Ë&
pCîtCtx
->
pbCîtEncoded
,ÖCîtCtx->
cbCîtEncoded
);

357 i‡(
˚π
 =
NULL
) {

361 
x509_°‹e
 = 
	`SSL_CTX_gë_˚π_°‹e
(
˘x
);

363 i‡(
x509_°‹e
 =
NULL
) {

364 
	`X509_‰ì
(
˚π
);

368 i‡(!
	`X509_STORE_add_˚π
(
x509_°‹e
, 
˚π
)) {

369 
	`X509_‰ì
(
˚π
);

373 
cou¡
++;

374 
	`X509_‰ì
(
˚π
);

377 
	`CîtClo£St‹e
(
hSt‹e
, 0);

379 
hSt‹e
 = 
	`CîtO≥nSy°emSt‹e
(0, 
L
"MY");

381 
pCîtCtx
 = 
	`CîtEnumCîtifiˇãsInSt‹e
(
hSt‹e
, 
NULL
);ÖCertCtx != NULL;ÖCertCtx = CertEnumCertificatesInStore(hStore,ÖCertCtx)) {

382 
˚π
 = 
	`d2i_X509
(
NULL
, (c⁄° **Ë&
pCîtCtx
->
pbCîtEncoded
,ÖCîtCtx->
cbCîtEncoded
);

384 i‡(
˚π
 =
NULL
) {

388 
x509_°‹e
 = 
	`SSL_CTX_gë_˚π_°‹e
(
˘x
);

390 i‡(
x509_°‹e
 =
NULL
) {

391 
	`X509_‰ì
(
˚π
);

395 i‡(!
	`X509_STORE_add_˚π
(
x509_°‹e
, 
˚π
)) {

396 
	`X509_‰ì
(
˚π
);

400 
cou¡
++;

401 
	`X509_‰ì
(
˚π
);

404 
	`CîtClo£St‹e
(
hSt‹e
, 0);

406 
hSt‹e
 = 
	`CîtO≥nSy°emSt‹e
(0, 
L
"Trustedpublisher");

408 
pCîtCtx
 = 
	`CîtEnumCîtifiˇãsInSt‹e
(
hSt‹e
, 
NULL
);ÖCertCtx != NULL;ÖCertCtx = CertEnumCertificatesInStore(hStore,ÖCertCtx)) {

409 
˚π
 = 
	`d2i_X509
(
NULL
, (c⁄° **Ë&
pCîtCtx
->
pbCîtEncoded
,ÖCîtCtx->
cbCîtEncoded
);

411 i‡(
˚π
 =
NULL
) {

415 
x509_°‹e
 = 
	`SSL_CTX_gë_˚π_°‹e
(
˘x
);

417 i‡(
x509_°‹e
 =
NULL
) {

418 
	`X509_‰ì
(
˚π
);

422 i‡(!
	`X509_STORE_add_˚π
(
x509_°‹e
, 
˚π
)) {

423 
	`X509_‰ì
(
˚π
);

427 
cou¡
++;

428 
	`X509_‰ì
(
˚π
);

431 
	`CîtClo£St‹e
(
hSt‹e
, 0);

432 #ñi‡
	`deföed
(
__APPLE__
Ë&& (
TARGET_OS_IPHONE
 == 0)

433 
SecKeychaöSórchRef
 
pSecKeychaöSórch
 = 
NULL
;

434 
SecKeychaöRef
 
pSecKeychaö
;

435 
OSSètus
 
°©us
 = 
noEº
;

436 
X509
 *
˚π
 = 
NULL
;

437 
SI¡32
 
osx_vîsi⁄
 = 0;

438 
X509_STORE
 *
x509_°‹e
;

440 i‡(
	`Ge°Æt
(
ge°ÆtSy°emVîsi⁄
, &
osx_vîsi⁄
Ë!
noEº
) {

441 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] [TLS] macosx certificate store: can't get osx version"));

445 i‡(
osx_vîsi⁄
 >= 0x1050) {

447 
°©us
 = 
	`SecKeychaöO≥n
("/Sy°em/Libøry/Keychaös/Sy°emRoŸCîtifiˇãs.keychaö", &
pSecKeychaö
);

451 
°©us
 = 
	`SecKeychaöO≥n
("/Sy°em/Libøry/Keychaös/X509Anch‹s", &
pSecKeychaö
);

454 i‡(
°©us
 !
noEº
) {

455 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] [TLS] macosx certificate store: can't get osx version"));

459 
°©us
 = 
	`SecKeychaöSórchCª©eFromAâribuãs
(
pSecKeychaö
, 
kSecCîtifiˇãIãmCœss
, 
NULL
, &
pSecKeychaöSórch
);

462 
SecKeychaöIãmRef
 
pSecKeychaöIãm
 = 
nû
;

464 
°©us
 = 
	`SecKeychaöSórchC›yNext
(
pSecKeychaöSórch
, &
pSecKeychaöIãm
);

466 i‡(
°©us
 =
îrSecIãmNŸFound
) {

470 i‡(
°©us
 =
noEº
) {

471 *
_pCîtD©a
;

472 
UI¡32
 
_pCîtLígth
;

474 
°©us
 = 
	`SecKeychaöIãmC›yAâribuãsAndD©a
(
pSecKeychaöIãm
, 
NULL
, NULL, NULL, &
_pCîtLígth
, &
_pCîtD©a
);

476 i‡(
°©us
 =
noEº
 && 
_pCîtD©a
 !
NULL
) {

477 *
±r
;

479 
±r
 = 
_pCîtD©a
;

480 
˚π
 = 
	`d2i_X509
(
NULL
, (c⁄° **Ë&
±r
, 
_pCîtLígth
);

482 i‡(
˚π
 =
NULL
) {

486 
x509_°‹e
 = 
	`SSL_CTX_gë_˚π_°‹e
(
˘x
);

488 i‡(
x509_°‹e
 =
NULL
) {

489 
	`X509_‰ì
(
˚π
);

493 i‡(!
	`X509_STORE_add_˚π
(
x509_°‹e
, 
˚π
)) {

494 
	`X509_‰ì
(
˚π
);

498 
cou¡
++;

499 
	`X509_‰ì
(
˚π
);

501 
°©us
 = 
	`SecKeychaöIãmFªeAâribuãsAndD©a
(
NULL
, 
_pCîtD©a
);

505 i‡(
pSecKeychaöIãm
 !
NULL
)

506 
	`CFRñó£
(
pSecKeychaöIãm
);

508 i‡(
°©us
 !
noEº
) {

509 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosù] [TLS] macosx cîtifiˇã st‹e: c™'àadd cîtifiˇã [%i]", 
°©us
));

513 
	`CFRñó£
(
pSecKeychaöSórch
);

514 
	`CFRñó£
(
pSecKeychaö
);

517  
cou¡
;

518 
	}
}

520 
	$vîify_cb
(
¥evîify_ok
, 
X509_STORE_CTX
 *
°‹e
) {

521 
buf
[256];

522 
X509
 *
îr_˚π
;

523 
îr
, 
dïth
;

525 
îr_˚π
 = 
	`X509_STORE_CTX_gë_cuºít_˚π
(
°‹e
);

526 
îr
 = 
	`X509_STORE_CTX_gë_îr‹
(
°‹e
);

527 
dïth
 = 
	`X509_STORE_CTX_gë_îr‹_dïth
(
°‹e
);

529 
	`X509_NAME_⁄ñöe
(
	`X509_gë_subje˘_«me
(
îr_˚π
), 
buf
, 256);

531 i‡(
dïth
 > 
ex_vîify_dïth
 ) {

532 
¥evîify_ok
 = 0;

533 
îr
 = 
X509_V_ERR_CERT_CHAIN_TOO_LONG
;

534 
	`X509_STORE_CTX_£t_îr‹
(
°‹e
, 
îr
);

537 i‡(!
¥evîify_ok
) {

538 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosù] [TLS] invÆid dïth[%d] [%s] [%d:%s]\n", 
dïth
, 
buf
, 
îr
, 
	`X509_vîify_˚π_îr‹_°rög
(err)));

541 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO1
, 
NULL
, "[eXosù] [TLS] vîifõd dïth[%d] [%s]\n", 
dïth
, 
buf
));

548 i‡(!
¥evîify_ok
 && (
îr
 =
X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT
)) {

549 
X509
 *
cuºít_˚π
 = 
	`X509_STORE_CTX_gë_cuºít_˚π
(
°‹e
);

551 
	`X509_NAME_⁄ñöe
(
	`X509_gë_issuî_«me
(
cuºít_˚π
), 
buf
, 256);

552 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosù] [TLS] issuî [%s]\n", 
buf
));

560 i‡(!
¥evîify_ok
 && (
îr
 =
X509_V_ERR_SELF_SIGNED_CERT_IN_CHAIN
)) {

561 
	`X509_NAME_⁄ñöe
(
	`X509_gë_issuî_«me
(
°‹e
->
cuºít_˚π
), 
buf
, 256);

562 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosù] [TLS] issuî [%s]\n", 
buf
));

563 
¥evîify_ok
 = 1;

564 
	`X509_STORE_CTX_£t_îr‹
(
°‹e
, 
X509_V_OK
);

567 i‡(!
¥evîify_ok
 && (
îr
 =
X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT
)) {

568 
	`X509_NAME_⁄ñöe
(
	`X509_gë_issuî_«me
(
°‹e
->
cuºít_˚π
), 
buf
, 256);

569 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosù] [TLS] issuî [%s]\n", 
buf
));

570 
¥evîify_ok
 = 1;

571 
	`X509_STORE_CTX_£t_îr‹
(
°‹e
, 
X509_V_OK
);

574 i‡(!
¥evîify_ok
 && (
îr
 =
X509_V_ERR_CERT_HAS_EXPIRED
)) {

575 
	`X509_NAME_⁄ñöe
(
	`X509_gë_issuî_«me
(
°‹e
->
cuºít_˚π
), 
buf
, 256);

576 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosù] [TLS] issuî [%s]\n", 
buf
));

577 
¥evîify_ok
 = 1;

578 
	`X509_STORE_CTX_£t_îr‹
(
°‹e
, 
X509_V_OK
);

581 i‡(!
¥evîify_ok
 && (
îr
 =
X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY
)) {

582 
	`X509_NAME_⁄ñöe
(
	`X509_gë_issuî_«me
(
°‹e
->
cuºít_˚π
), 
buf
, 256);

583 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosù] [TLS] issuî [%s]\n", 
buf
));

584 
¥evîify_ok
 = 1;

585 
	`X509_STORE_CTX_£t_îr‹
(
°‹e
, 
X509_V_OK
);

588 i‡(!
¥evîify_ok
 && (
îr
 =
X509_V_ERR_CERT_UNTRUSTED
)) {

589 
	`X509_NAME_⁄ñöe
(
	`X509_gë_issuî_«me
(
°‹e
->
cuºít_˚π
), 
buf
, 256);

590 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosù] [TLS] issuî [%s]\n", 
buf
));

591 
¥evîify_ok
 = 1;

592 
	`X509_STORE_CTX_£t_îr‹
(
°‹e
, 
X509_V_OK
);

595 i‡(!
¥evîify_ok
 && (
îr
 =
X509_V_ERR_UNABLE_TO_VERIFY_LEAF_SIGNATURE
)) {

596 
	`X509_NAME_⁄ñöe
(
	`X509_gë_issuî_«me
(
°‹e
->
cuºít_˚π
), 
buf
, 256);

597 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosù] [TLS] issuî [%s]\n", 
buf
));

598 
¥evîify_ok
 = 1;

599 
	`X509_STORE_CTX_£t_îr‹
(
°‹e
, 
X509_V_OK
);

602 
¥evîify_ok
 = 1;

603  
¥evîify_ok
;

605 
	}
}

607 
	$∑ssw‹d_cb
(*
buf
, 
num
, 
rwÊag
, *
u£rd©a
) {

608 *
∑sswd
 = (*Ë
u£rd©a
;

610 i‡(
∑sswd
 =
NULL
 ||Öasswd[0] == '\0') {

612 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] [TLS]ÖasswordÑequired but missing\n"));

616 
	`°∫˝y
(
buf
, 
∑sswd
, 
num
);

617 
buf
[
num
 - 1] = '\0';

618  (Ë
	`°æí
(
buf
);

619 
	}
}

621 
	$lﬂd_dh_∑øms
(
SSL_CTX
 *
˘x
, *
fûe
) {

622 #i‚de‡
OPENSSL_NO_DH


623 
DH
 *
ªt
 = 0;

624 
BIO
 *
bio
;

626 i‡((
bio
 = 
	`BIO_√w_fûe
(
fûe
, "r")Ë=
NULL
) {

627 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] [TLS] cannot open DH file\n"));

630 
ªt
 = 
	`PEM_ªad_bio_DH∑øms
(
bio
, 
NULL
, NULL, NULL);

631 
	`BIO_‰ì
(
bio
);

633 i‡(
	`SSL_CTX_£t_tmp_dh
(
˘x
, 
ªt
) < 0)

634 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] [TLS] cannot set DHÖaram\n"));

638 
	}
}

641 c⁄° 
	gdh2048_¥ime
[] = {0x87, 0xA8, 0xE6, 0x1D, 0xB4, 0xB6, 0x66, 0x3C, 0xFF, 0xBB, 0xD1, 0x9C, 0x65, 0x19, 0x59, 0x99, 0x8C, 0xEE, 0xF6, 0x08, 0x66, 0x0D, 0xD0, 0xF2, 0x5D, 0x2C, 0xEE, 0xD4, 0x43, 0x5E, 0x3B, 0x00,

650 c⁄° 
	gdh2048_gíî©‹
[] = {0x3F, 0xB3, 0x2C, 0x9B, 0x73, 0x13, 0x4D, 0x0B, 0x2E, 0x77, 0x50, 0x66, 0x60, 0xED, 0xBD, 0x48, 0x4C, 0xA7, 0xB1, 0x8F, 0x21, 0xEF, 0x20, 0x54, 0x07, 0xF4, 0x79, 0x3A, 0x1A, 0x0B, 0xA1, 0x25,

659 
	$buûd_dh_∑øms
(
SSL_CTX
 *
˘x
) {

660 #i‚de‡
OPENSSL_NO_DH


661 
DH
 *
dh
 = 
	`DH_√w
();

662 
BIGNUM
 *
p
;

663 
BIGNUM
 *
g
;

665 i‡(!
dh
) {

666 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] [TLS] DH_new failed\n"));

670 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO3
, 
NULL
, "[eXosip] [TLS] building DHÖarams\n"));

672 
p
 = 
	`BN_bö2bn
(
dh2048_¥ime
, (dh2048_¥ime), 
NULL
);

673 
g
 = 
	`BN_bö2bn
(
dh2048_gíî©‹
, (dh2048_gíî©‹), 
NULL
);

674 #i‡
OPENSSL_VERSION_NUMBER
 < 0x10100000L

675 
dh
->
p
 =Ö;

676 
dh
->
g
 = g;

677 
dh
->
Àngth
 = 256;

678 i‡(
dh
->
p
 =
NULL
 || dh->
g
 == NULL) {

679 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] [TLS] DH setÖ g failed\n"));

683 i‡(!
	`DH_£t0_pqg
(
dh
, 
p
, 
NULL
, 
g
)) {

684 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] [TLS] DH_set0_pqg failed\n"));

689 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO3
, 
NULL
, "[eXosip] [TLS] DHÖarams built\n"));

691 
	`SSL_CTX_£t_tmp_dh
(
˘x
, 
dh
);

692 
	`SSL_CTX_£t_›ti⁄s
(
˘x
, 
SSL_OP_SINGLE_DH_USE
);

694 
	`DH_‰ì
(
dh
);

698 
	}
}

700 #i‚de‡
OPENSSL_NO_RSA


701 
RSA
 *
	$__RSA_gíî©e_key
(
bôs
, 
e_vÆue
, (*
ˇŒback
)(, , *), *
cb_¨g
) {

702 
i
;

703 
RSA
 *
rß
 = 
	`RSA_√w
();

704 
BIGNUM
 *
e
 = 
	`BN_√w
();

706 i‡(!
rß
 || !
e
)

707 
îr
;

709 
i
 = 
	`BN_£t_w‹d
(
e
, 
e_vÆue
);

711 i‡(
i
 != 1)

712 
îr
;

714 i‡(
	`RSA_gíî©e_key_ex
(
rß
, 
bôs
, 
e
, 
NULL
)) {

715 
	`BN_‰ì
(
e
);

716  
rß
;

719 
îr
:

721 i‡(
e
)

722 
	`BN_‰ì
(
e
);

724 i‡(
rß
)

725 
	`RSA_‰ì
(
rß
);

728 
	}
}

730 
	$gíî©e_ïh_rß_key
(
SSL_CTX
 *
˘x
) {

731 
RSA
 *
rß
;

733 
rß
 = 
	`__RSA_gíî©e_key
(2048, 
RSA_F4
, 
NULL
, NULL);

735 i‡(
rß
 !
NULL
) {

736 #i‡
OPENSSL_VERSION_NUMBER
 < 0x10100000L

738 i‡(!
	`SSL_CTX_£t_tmp_rß
(
˘x
, 
rß
))

739 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] [TLS] cannot set RSA key\n"));

743 
	`RSA_‰ì
(
rß
);

745 
	}
}

748 
eXosù_és_˘x_îr‹
 
	$eXosù_£t_és_˘x
(
eXosù_t
 *
exc⁄ãxt
, 
eXosù_és_˘x_t
 *
˘x
) {

749 
eXosù_és_¸edítüls_t
 *
ownClõ¡
 = &
exc⁄ãxt
->
eXosù_és_˘x_∑øms
.
˛õ¡
;

750 
eXosù_és_¸edítüls_t
 *
ownSîvî
 = &
exc⁄ãxt
->
eXosù_és_˘x_∑øms
.
£rvî
;

752 
eXosù_és_¸edítüls_t
 *
˛õ¡
 = &
˘x
->client;

753 
eXosù_és_¸edítüls_t
 *
£rvî
 = &
˘x
->server;

756 i‡(
˛õ¡
->
˚π
[0] ='\0' && clõ¡->
¥iv_key
[0] != '\0') {

758  
TLS_ERR_MISSING_AUTH_PART
;

761 i‡(
˛õ¡
->
˚π
[0] !'\0' && clõ¡->
¥iv_key
[0] == '\0') {

763  
TLS_ERR_MISSING_AUTH_PART
;

767 i‡(
£rvî
->
˚π
[0] ='\0' && sîvî->
¥iv_key
[0] != '\0') {

769  
TLS_ERR_MISSING_AUTH_PART
;

772 i‡(
£rvî
->
˚π
[0] !'\0' && sîvî->
¥iv_key
[0] == '\0') {

774  
TLS_ERR_MISSING_AUTH_PART
;

778 
	`mem£t
(&
exc⁄ãxt
->
eXosù_és_˘x_∑øms
, 0, (
eXosù_és_˘x_t
));

780 i‡(
˛õ¡
->
public_key_pö√d
[0] != '\0') {

781 
	`¢¥ötf
(
ownClõ¡
->
public_key_pö√d
, (ownClõ¡->public_key_pö√d), "%s", 
˛õ¡
->public_key_pinned);

785 i‡(
˛õ¡
->
˚π
[0] != '\0') {

786 
	`¢¥ötf
(
ownClõ¡
->
˚π
, (ownClõ¡->˚π), "%s", 
˛õ¡
->cert);

787 
	`¢¥ötf
(
ownClõ¡
->
¥iv_key
, (ownClõ¡->¥iv_key), "%s", 
˛õ¡
->priv_key);

788 
	`¢¥ötf
(
ownClõ¡
->
¥iv_key_pw
, (ownClõ¡->¥iv_key_pw), "%s", 
˛õ¡
->priv_key_pw);

792 i‡(
£rvî
->
˚π
[0] != '\0') {

793 
	`¢¥ötf
(
ownSîvî
->
˚π
, (ownSîvî->˚π), "%s", 
£rvî
->cert);

794 
	`¢¥ötf
(
ownSîvî
->
¥iv_key
, (ownSîvî->¥iv_key), "%s", 
£rvî
->priv_key);

795 
	`¢¥ötf
(
ownSîvî
->
¥iv_key_pw
, (ownSîvî->¥iv_key_pw), "%s", 
£rvî
->priv_key_pw);

798 
	`¢¥ötf
(
exc⁄ãxt
->
eXosù_és_˘x_∑øms
.
dh_∑øm
, (
˘x
->dh_param), "%s", ctx->dh_param);

799 
	`¢¥ötf
(
exc⁄ãxt
->
eXosù_és_˘x_∑øms
.
øndom_fûe
, (
˘x
->random_file), "%s", ctx->random_file);

800 
	`¢¥ötf
(
exc⁄ãxt
->
eXosù_és_˘x_∑øms
.
roŸ_ˇ_˚π
, (
˘x
->root_ca_cert), "%s", ctx->root_ca_cert);

801 
	`¢¥ötf
(
exc⁄ãxt
->
eXosù_és_˘x_∑øms
.
cùhî_li°
, (
˘x
->cipher_list), "%s", ctx->cipher_list);

802 
exc⁄ãxt
->
eXosù_és_˘x_∑øms
.
és_Êags
 = 
˘x
->tls_flags;

803 
exc⁄ãxt
->
eXosù_és_˘x_∑øms
.
dés_Êags
 = 
˘x
->dtls_flags;

805  
TLS_OK
;

806 
	}
}

808 
eXosù_és_˘x_îr‹
 
	$eXosù_és_vîify_˚πifiˇã
(
eXosù_t
 *
exc⁄ãxt
, 
_és_vîify_˛õ¡_˚πifiˇã
) {

809 
exc⁄ãxt
->
és_vîify_˛õ¡_˚πifiˇã
 = 
_és_vîify_˛õ¡_˚πifiˇã
;

810  
TLS_OK
;

811 
	}
}

813 
	$_és_lﬂd_åu°ed_˚πifiˇãs
(
eXosù_t
 *
exc⁄ãxt
, 
eXosù_és_˘x_t
 *
exosù_és_cfg
, 
SSL_CTX
 *
˘x
) {

814 *
ˇFûe
 = 0, *
ˇFﬁdî
 = 0;

816 i‡(
	`_és_add_˚πifiˇãs
(
exc⁄ãxt
, 
˘x
) <= 0) {

817 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_WARNING
, 
NULL
, "[eXosip] [TLS]Ço system certificateÜoaded\n"));

820 i‡(
exosù_és_cfg
->
roŸ_ˇ_˚π
[0] == '\0')

824 #ifde‡
WIN32


825 
WIN32_FIND_DATA
 
FûeD©a
;

826 
HANDLE
 
hSórch
;

827 
szDúP©h
[1024];

828 
WCHAR
 
wUnicodeDúP©h
[2048];

830 
	`¢¥ötf
(
szDúP©h
, (szDúP©h), "%s", 
exosù_és_cfg
->
roŸ_ˇ_˚π
);

832 
	`Mu…iByãToWideCh¨
(
CP_UTF8
, 0, 
szDúP©h
, -1, 
wUnicodeDúP©h
, 2048);

833 
hSórch
 = 
	`FödFú°FûeEx
(
wUnicodeDúP©h
, 
FödExInfoSènd¨d
, &
FûeD©a
, 
FödExSórchNameM©ch
, 
NULL
, 0);

835 i‡(
hSórch
 !
INVALID_HANDLE_VALUE
) {

836 i‡((
FûeD©a
.
dwFûeAâribuãs
 & 
FILE_ATTRIBUTE_DIRECTORY
) == FILE_ATTRIBUTE_DIRECTORY)

837 
ˇFﬁdî
 = 
exosù_és_cfg
->
roŸ_ˇ_˚π
;

840 
ˇFûe
 = 
exosù_és_cfg
->
roŸ_ˇ_˚π
;

841 
	`FödClo£
(
hSórch
);

843 
ˇFûe
 = 
exosù_és_cfg
->
roŸ_ˇ_˚π
;

847 
fd
 = 
	`›í
(
exosù_és_cfg
->
roŸ_ˇ_˚π
, 
O_RDONLY
);

849 i‡(
fd
 >= 0) {

850 
°©
 
fûeSèt
;

852 i‡(
	`f°©
(
fd
, &
fûeSèt
) < 0) {

854 i‡(
	`S_ISDIR
(
fûeSèt
.
°_mode
)) {

855 
ˇFﬁdî
 = 
exosù_és_cfg
->
roŸ_ˇ_˚π
;

858 
ˇFûe
 = 
exosù_és_cfg
->
roŸ_ˇ_˚π
;

862 
	`˛o£
(
fd
);

868 i‡(
exosù_és_cfg
->
roŸ_ˇ_˚π
[0] == '\0') {

870 i‡(
	`SSL_CTX_lﬂd_vîify_loˇti⁄s
(
˘x
, 
ˇFûe
, 
ˇFﬁdî
)) {

871 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosù] [TLS]Åru°ed CA PEM fûêlﬂded [%s]\n", 
exosù_és_cfg
->
roŸ_ˇ_˚π
));

874 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosù] [TLS] c™nŸÑódÅru°ed CAÜi° [%s]\n", 
exosù_és_cfg
->
roŸ_ˇ_˚π
));

877 
	}
}

879 
	$_és_u£_˚πifiˇã_¥iv©e_key
(c⁄° *
log
, 
eXosù_és_¸edítüls_t
 *
xtc
, 
SSL_CTX
 *
˘x
) {

881 i‡(
xtc
->
˚π
[0] !'\0' && xtc->
¥iv_key
[0] != '\0') {

882 
	`SSL_CTX_£t_deÁu…_∑sswd_cb_u£rd©a
(
˘x
, (*Ë
xtc
->
¥iv_key_pw
);

883 
	`SSL_CTX_£t_deÁu…_∑sswd_cb
(
˘x
, 
∑ssw‹d_cb
);

886 i‡(
	`SSL_CTX_u£_˚πifiˇã_fûe
(
˘x
, 
xtc
->
˚π
, 
SSL_FILETYPE_ASN1
)) {

887 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosù] [TLS] [%s] cîtifiˇã ASN1 fûêlﬂded [%s]\n", 
log
, 
xtc
->
˚π
));

889 } i‡(
	`SSL_CTX_u£_˚πifiˇã_fûe
(
˘x
, 
xtc
->
˚π
, 
SSL_FILETYPE_PEM
)) {

890 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosù] [TLS] [%s] cîtifiˇã PEM fûêlﬂded [%s]\n", 
log
, 
xtc
->
˚π
));

893 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosù] [TLS] [%s] c™nŸÑód cîtifiˇã fûê[%s]\n", 
log
, 
xtc
->
˚π
));

896 i‡(
	`SSL_CTX_u£_Priv©eKey_fûe
(
˘x
, 
xtc
->
¥iv_key
, 
SSL_FILETYPE_ASN1
)) {

897 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosù] [TLS] [%s]Öriv©êkey ASN1 fûêlﬂded [%s]\n", 
log
, 
xtc
->
¥iv_key
));

899 } i‡(
	`SSL_CTX_u£_Priv©eKey_fûe
(
˘x
, 
xtc
->
¥iv_key
, 
SSL_FILETYPE_PEM
)) {

900 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosù] [TLS] [%s]Öriv©êkey PEM fûêlﬂded [%s]\n", 
log
, 
xtc
->
¥iv_key
));

903 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosù] [TLS] [%s] c™nŸÑódÖriv©êkey fûê[%s]\n", 
log
, 
xtc
->
¥iv_key
));

906 i‡(!
	`SSL_CTX_check_¥iv©e_key
(
˘x
)) {

907 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosù] [TLS] [%s]Öriv©êkey d€†nŸ m©chÅhêpubli¯key o‡you∏˚πifiˇã\n", 
log
));

910 
	}
}

912 
	$_és_comm⁄_£tup
(
eXosù_és_˘x_t
 *
exosù_és_cfg
, 
SSL_CTX
 *
˘x
) {

913 #i‚de‡
SSL_CTRL_SET_ECDH_AUTO


914 
	#SSL_CTRL_SET_ECDH_AUTO
 94

	)

917 i‡(
exosù_és_cfg
->
dh_∑øm
[0] == '\0')

918 
	`buûd_dh_∑øms
(
˘x
);

921 
	`lﬂd_dh_∑øms
(
˘x
, 
exosù_és_cfg
->
dh_∑øm
);

924 i‡(
	`SSL_CTX_˘æ
(
˘x
, 
SSL_CTRL_SET_ECDH_AUTO
, 1, 
NULL
)) {

925 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosip] [TLS] ctrl_set_ecdh_auto: faster PFS ciphersÉnabled\n"));

926 #i‡!
	`deföed
(
OPENSSL_NO_ECDH
Ë&& !(
OPENSSL_VERSION_NUMBER
 < 0x10000000L) && (OPENSSL_VERSION_NUMBER < 0x10100000L)

930 
EC_KEY
 *
ecdh
 = 
	`EC_KEY_√w_by_curve_«me
(
NID_X9_62_¥ime256v1
);

932 i‡(
ecdh
 !
NULL
) {

933 i‡(
	`SSL_CTX_£t_tmp_ecdh
(
˘x
, 
ecdh
)) {

934 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosip] [TLS] set_tmp_ecdh: faster PFS ciphersÉnabled (secp256r1)\n"));

937 
	`EC_KEY_‰ì
(
ecdh
);

942 
	}
}

944 
SSL_CTX
 *
	$öôülize_˛õ¡_˘x
(
eXosù_t
 *
exc⁄ãxt
, 
eXosù_és_˘x_t
 *
˛õ¡_˘x
, 
å™•‹t
, c⁄° *
¢i_£rvî«meödiˇti⁄
) {

945 c⁄° 
SSL_METHOD
 *
mëh
 = 
NULL
;

946 
SSL_CTX
 *
˘x
;

947 
îr
;

949 i‡(
å™•‹t
 =
IPPROTO_UDP
) {

950 #i‡!(
OPENSSL_VERSION_NUMBER
 < 0x10002000L)

951 
mëh
 = 
	`DTLS_˛õ¡_mëhod
();

952 #ñi‡!(
OPENSSL_VERSION_NUMBER
 < 0x00908000L)

953 
mëh
 = 
	`DTLSv1_˛õ¡_mëhod
();

956 } i‡(
å™•‹t
 =
IPPROTO_TCP
) {

957 
mëh
 = 
	`SSLv23_˛õ¡_mëhod
();

960  
NULL
;

963 
˘x
 = 
	`SSL_CTX_√w
(
mëh
);

965 i‡(
˘x
 =
NULL
) {

966 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] [TLS] cannot create SSL_CTX\n"));

967  
NULL
;

970 
	`_és_u£_˚πifiˇã_¥iv©e_key
("˛õ¡", &
˛õ¡_˘x
->
˛õ¡
, 
˘x
);

973 
	`_és_lﬂd_åu°ed_˚πifiˇãs
(
exc⁄ãxt
, 
˛õ¡_˘x
, 
˘x
);

976 
vîify_mode
 = 
SSL_VERIFY_NONE
;

978 #i‡!(
OPENSSL_VERSION_NUMBER
 < 0x10002000L)

980 i‡(
exc⁄ãxt
->
és_vîify_˛õ¡_˚πifiˇã
 > 0 && 
¢i_£rvî«meödiˇti⁄
 !
NULL
) {

981 
X509_STORE
 *
pkix_vÆid©i⁄_°‹e
 = 
	`SSL_CTX_gë_˚π_°‹e
(
˘x
);

982 c⁄° 
X509_VERIFY_PARAM
 *
∑øm
 = 
	`X509_VERIFY_PARAM_lookup
("ssl_server");

984 i‡(
∑øm
 !
NULL
) {

985 
X509_VERIFY_PARAM
 *
∑øm_to
 = 
	`X509_STORE_gë0_∑øm
(
pkix_vÆid©i⁄_°‹e
);

987 i‡(
	`X509_VERIFY_PARAM_öhîô
(
∑øm_to
, 
∑øm
)) {

988 
	`X509_STORE_£t_Êags
(
pkix_vÆid©i⁄_°‹e
, 
X509_V_FLAG_TRUSTED_FIRST
);

989 
	`X509_STORE_£t_Êags
(
pkix_vÆid©i⁄_°‹e
, 
X509_V_FLAG_PARTIAL_CHAIN
);

992 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] [TLS] PARAM_inherit: failed for ssl_server\n"));

995 i‡(
	`X509_VERIFY_PARAM_£t1_ho°
(
∑øm_to
, 
¢i_£rvî«meödiˇti⁄
, 0)) {

996 i‡(
exc⁄ãxt
->
és_vîify_˛õ¡_˚πifiˇã
 & 0x02) {

997 
	`X509_VERIFY_PARAM_£t_ho°Êags
(
∑øm_to
, 
X509_CHECK_FLAG_MULTI_LABEL_WILDCARDS
);

999 
	`X509_VERIFY_PARAM_£t_ho°Êags
(
∑øm_to
, 
X509_CHECK_FLAG_NO_WILDCARDS
);

1003 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosù] [TLS] PARAM_£t1_ho°: [%s] faûed\n", 
¢i_£rvî«meödiˇti⁄
));

1007 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] [TLS] PARAM_lookup: failed for ssl_server\n"));

1013 
vîify_mode
 = 
SSL_VERIFY_PEER
;

1015 
	`SSL_CTX_£t_vîify
(
˘x
, 
vîify_mode
, &
vîify_cb
);

1016 
	`SSL_CTX_£t_vîify_dïth
(
˘x
, 
ex_vîify_dïth
 + 1);

1020 
Êags
 = 
SSL_OP_NO_SSLv2
 | 
SSL_OP_NO_SSLv3
 | 
SSL_OP_SINGLE_ECDH_USE
 | 
SSL_OP_SINGLE_DH_USE
;

1022 #ifde‡
SSL_OP_NO_COMPRESSION


1023 
Êags
 |
SSL_OP_NO_COMPRESSION
;

1026 #ifde‡
SSL_OP_NO_TICKET


1027 
Êags
 |
SSL_OP_NO_TICKET
;

1030 i‡(
å™•‹t
 =
IPPROTO_UDP
) {

1031 
Êags
 |
˛õ¡_˘x
->
dés_Êags
;

1033 
Êags
 |
˛õ¡_˘x
->
és_Êags
;

1035 
	`SSL_CTX_£t_›ti⁄s
(
˘x
, 
Êags
);

1038 i‡(
˛õ¡_˘x
->
cùhî_li°
[0] != '\0') {

1039 
îr
 = 
	`SSL_CTX_£t_cùhî_li°
(
˘x
, 
˛õ¡_˘x
->
cùhî_li°
);

1040 i‡(!
îr
) {

1041 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_WARNING
, 
NULL
, "[eXosip] [TLS]Érror with cipherÜist\n"));

1044 
îr
 = 
	`SSL_CTX_£t_cùhî_li°
(
˘x
, "HIGH:!COMPLEMENTOFDEFAULT:!kRSA:!PSK:!SRP");

1045 i‡(!
îr
) {

1046 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_WARNING
, 
NULL
, "[eXosip] [TLS]Érror with standard cipherÜist\n"));

1050 
	`_és_comm⁄_£tup
(
˛õ¡_˘x
, 
˘x
);

1052  
˘x
;

1053 
	}
}

1055 
SSL_CTX
 *
	$öôülize_£rvî_˘x
(
eXosù_t
 *
exc⁄ãxt
, 
eXosù_és_˘x_t
 *
§v_˘x
, 
å™•‹t
) {

1056 c⁄° 
SSL_METHOD
 *
mëh
 = 
NULL
;

1057 
SSL_CTX
 *
˘x
;

1058 
îr
;

1060 
s_£rvî_£ssi⁄_id_c⁄ãxt
 = 1;

1062 i‡(
å™•‹t
 =
IPPROTO_UDP
) {

1063 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO3
, 
NULL
, "[eXosip] [TLS] DTLS-UDP server method\n"));

1064 #i‡!(
OPENSSL_VERSION_NUMBER
 < 0x10002000L)

1065 
mëh
 = 
	`DTLS_£rvî_mëhod
();

1066 #ñi‡!(
OPENSSL_VERSION_NUMBER
 < 0x00908000L)

1067 
mëh
 = 
	`DTLSv1_£rvî_mëhod
();

1070 } i‡(
å™•‹t
 =
IPPROTO_TCP
) {

1071 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO3
, 
NULL
, "[eXosip] [TLS] TLS server method\n"));

1072 
mëh
 = 
	`SSLv23_£rvî_mëhod
();

1075  
NULL
;

1078 
˘x
 = 
	`SSL_CTX_√w
(
mëh
);

1080 i‡(
˘x
 =
NULL
) {

1081 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] [TLS] cannot create SSL_CTX\n"));

1082 
	`SSL_CTX_‰ì
(
˘x
);

1083  
NULL
;

1086 i‡(
å™•‹t
 =
IPPROTO_UDP
) {

1087 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO3
, 
NULL
, "[eXosip] [TLS] DTLS-UDPÑeadáhead\n"));

1088 
	`SSL_CTX_£t_ªad_ahód
(
˘x
, 1);

1091 
	`_és_u£_˚πifiˇã_¥iv©e_key
("£rvî", &
§v_˘x
->
£rvî
, 
˘x
);

1094 
	`_és_lﬂd_åu°ed_˚πifiˇãs
(
exc⁄ãxt
, 
§v_˘x
, 
˘x
);

1096 i‡(!
	`SSL_CTX_check_¥iv©e_key
(
˘x
)) {

1097 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_WARNING
, 
NULL
, "[eXosip] [TLS] check_private_key:ÉitherÇo match orÇo cert/key: disable incoming TLS connection\n"));

1098 
	`SSL_CTX_‰ì
(
˘x
);

1099  
NULL
;

1103 
vîify_mode
 = 
SSL_VERIFY_NONE
;

1107 
	`SSL_CTX_£t_vîify
(
˘x
, 
vîify_mode
, &
vîify_cb
);

1108 
	`SSL_CTX_£t_vîify_dïth
(
˘x
, 
ex_vîify_dïth
 + 1);

1112 
Êags
 = 
SSL_OP_NO_SSLv2
 | 
SSL_OP_NO_SSLv3
 | 
SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION
 | 
SSL_OP_SINGLE_ECDH_USE
 | 
SSL_OP_SINGLE_DH_USE
 | 
SSL_OP_CIPHER_SERVER_PREFERENCE
;

1114 #ifde‡
SSL_OP_NO_COMPRESSION


1115 
Êags
 |
SSL_OP_NO_COMPRESSION
;

1118 #ifde‡
SSL_OP_NO_TICKET


1119 
Êags
 |
SSL_OP_NO_TICKET
;

1122 i‡(
å™•‹t
 =
IPPROTO_UDP
) {

1123 
Êags
 |
§v_˘x
->
dés_Êags
;

1125 
Êags
 |
§v_˘x
->
és_Êags
;

1128 
	`SSL_CTX_£t_›ti⁄s
(
˘x
, 
Êags
);

1131 i‡(
§v_˘x
->
cùhî_li°
[0] != '\0') {

1132 
îr
 = 
	`SSL_CTX_£t_cùhî_li°
(
˘x
, 
§v_˘x
->
cùhî_li°
);

1133 i‡(!
îr
) {

1134 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_WARNING
, 
NULL
, "[eXosip] [TLS]Érror with cipherÜist\n"));

1137 
îr
 = 
	`SSL_CTX_£t_cùhî_li°
(
˘x
, "HIGH:!COMPLEMENTOFDEFAULT:!kRSA:!PSK:!SRP");

1138 i‡(!
îr
) {

1139 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_WARNING
, 
NULL
, "[eXosip] [TLS]Érror with standard cipherÜist\n"));

1143 
	`_és_comm⁄_£tup
(
§v_˘x
, 
˘x
);

1145 #i‚de‡
OPENSSL_NO_RSA


1146 
	`gíî©e_ïh_rß_key
(
˘x
);

1149 
	`SSL_CTX_£t_£ssi⁄_id_c⁄ãxt
(
˘x
, (*Ë&
s_£rvî_£ssi⁄_id_c⁄ãxt
,  s_server_session_id_context);

1151  
˘x
;

1152 
	}
}

1171 
	$és_é_›í
(
eXosù_t
 *
exc⁄ãxt
) {

1172 
eXéés
 *
ª£rved
 = (eXéé†*Ë
exc⁄ãxt
->
eXéés_ª£rved
;

1173 
ªs
;

1174 
addröfo
 *addröfÿ
NULL
;

1175 
addröfo
 *
curöfo
;

1176 
sock
 = -1;

1177 *
node
 = 
NULL
;

1178 
eb
[
ERRBSIZ
];

1180 i‡(
ª£rved
 =
NULL
) {

1181 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] [TLS] wrong state: createÅransportÜayer first\n"));

1182  
OSIP_WRONG_STATE
;

1185 
exc⁄ãxt
->
eXé_å™•‹t
.
¥Ÿo_loˇl_p‹t
 =Éxc⁄ãxt->eXé_å™•‹t.
¥Ÿo_p‹t
;

1187 i‡(
exc⁄ãxt
->
eXé_å™•‹t
.
¥Ÿo_loˇl_p‹t
 < 0)

1188 
exc⁄ãxt
->
eXé_å™•‹t
.
¥Ÿo_loˇl_p‹t
 = 5061;

1191 #i‡
OPENSSL_VERSION_NUMBER
 < 0x10100000L

1192 
	`SSL_libøry_öô
();

1193 
	`SSL_lﬂd_îr‹_°rögs
();

1195 
	`OPENSSL_öô_s¶
(
OPENSSL_INIT_LOAD_SSL_STRINGS
 | 
OPENSSL_INIT_LOAD_CRYPTO_STRINGS
, 
NULL
);

1198 
ª£rved
->
£rvî_˘x
 = 
	`öôülize_£rvî_˘x
(
exc⁄ãxt
, &Éxc⁄ãxt->
eXosù_és_˘x_∑øms
, 
IPPROTO_TCP
);

1201 
ª£rved
->
˛õ¡_˘x
 = 
	`öôülize_˛õ¡_˘x
(
exc⁄ãxt
, &exc⁄ãxt->
eXosù_és_˘x_∑øms
, 
IPPROTO_TCP
, 
NULL
);

1204 #i‡
	`deföed
(
HAVE_WINSOCK2_H
)

1209 i‡(
ª£rved
->
eXosù_és_˘x_∑øms
.
øndom_fûe
[0] == '\0') {

1210  
TLS_ERR_NO_RAND
;

1216 i‡(!(
	`RAND_lﬂd_fûe
(
exc⁄ãxt
->
eXosù_és_˘x_∑øms
.
øndom_fûe
, 1024 * 1024)))

1217 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_WARNING
, 
NULL
, "[eXosip] [TLS] cannotÜoadÑandomness\n"));

1221 i‡(
	`osù_°rˇ£cmp
(
exc⁄ãxt
->
eXé_å™•‹t
.
¥Ÿo_ifs
, "0.0.0.0") != 0 && osip_strcasecmp(excontext->eXtl_transport.proto_ifs, "::") != 0)

1222 
node
 = 
exc⁄ãxt
->
eXé_å™•‹t
.
¥Ÿo_ifs
;

1224 
ªs
 = 
	`_eXosù_gë_addröfo
(
exc⁄ãxt
, &
addröfo
, 
node
,Éxc⁄ãxt->
eXé_å™•‹t
.
¥Ÿo_loˇl_p‹t
,Éxc⁄ãxt->eXé_å™•‹t.
¥Ÿo_num
);

1226 i‡(
ªs
)

1229 
curöfo
 = 
addröfo
; curöfo; curöfÿcuröfo->
ai_√xt
) {

1230 #ifde‡
ENABLE_MAIN_SOCKET


1231 
sockÀn_t
 
Àn
;

1233 
ty≥
;

1235 i‡(
curöfo
->
ai_¥Ÿocﬁ
 && curöfo->ai_¥Ÿocﬁ !
exc⁄ãxt
->
eXé_å™•‹t
.
¥Ÿo_num
) {

1236 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO3
, 
NULL
, "[eXosù] [TLS] skùpögÖrŸocﬁ [%d]\n", 
curöfo
->
ai_¥Ÿocﬁ
));

1240 
ty≥
 = 
curöfo
->
ai_sockty≥
;

1241 #i‡
	`deföed
(
SOCK_CLOEXEC
)

1242 
ty≥
 = 
SOCK_CLOEXEC
 |Åype;

1244 
sock
 = (Ë
	`sockë
(
curöfo
->
ai_Ámûy
, 
ty≥
, curöfo->
ai_¥Ÿocﬁ
);

1246 i‡(
sock
 < 0) {

1247 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosù] [TLS] c™nŸ cª©êsockë %s\n", 
	`_ex_°ªº‹
(
ex_î∫o
, 
eb
, 
ERRBSIZ
)));

1251 i‡(
curöfo
->
ai_Ámûy
 =
AF_INET6
) {

1252 #ifde‡
IPV6_V6ONLY


1254 i‡(
	`£tsock›t_ùv6⁄ly
(
sock
)) {

1255 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosù] [TLS] c™nŸ së sockë o±i⁄ %s\n", 
	`_ex_°ªº‹
(
ex_î∫o
, 
eb
, 
ERRBSIZ
)));

1256 
	`_eXosù_˛o£sockë
(
sock
);

1257 
sock
 = -1;

1265 
vÆ›t
 = 1;

1267 
	`£tsock›t
(
sock
, 
SOL_SOCKET
, 
SO_REUSEADDR
, (*Ë&
vÆ›t
, (valopt));

1270 #ifde‡
ENABLE_MAIN_SOCKET


1271 
ªs
 = 
	`böd
(
sock
, 
curöfo
->
ai_addr
, (
sockÀn_t
Ëcuröfo->
ai_addæí
);

1273 i‡(
ªs
 < 0) {

1274 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosù] [TLS] c™nŸ böd sockë [%s][%s] %s\n", 
exc⁄ãxt
->
eXé_å™•‹t
.
¥Ÿo_ifs
, (
curöfo
->
ai_Ámûy
 =
AF_INET
Ë? "AF_INET" : "AF_INET6", 
	`_ex_°ªº‹
(
ex_î∫o
, 
eb
, 
ERRBSIZ
)));

1275 
	`_eXosù_˛o£sockë
(
sock
);

1276 
sock
 = -1;

1280 
Àn
 = (
ª£rved
->
ai_addr
);

1281 
ªs
 = 
	`gësock«me
(
sock
, (
sockaddr
 *Ë&
ª£rved
->
ai_addr
, &
Àn
);

1283 i‡(
ªs
 != 0) {

1284 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosù] [TLS] c™nŸ gë sockëÇamê%s\n", 
	`_ex_°ªº‹
(
ex_î∫o
, 
eb
, 
ERRBSIZ
)));

1285 
	`mem˝y
(&
ª£rved
->
ai_addr
, 
curöfo
->ai_addr, curöfo->
ai_addæí
);

1288 
ª£rved
->
ai_addr_Àn
 = 
Àn
;

1290 i‡(
exc⁄ãxt
->
eXé_å™•‹t
.
¥Ÿo_num
 =
IPPROTO_TCP
) {

1291 
ªs
 = 
	`li°í
(
sock
, 
SOMAXCONN
);

1293 i‡(
ªs
 < 0) {

1294 
	`OSIP_TRACE
(

1295 
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosù] [TLS] c™nŸ böd sockë [%s][%s] %s\n", 
exc⁄ãxt
->
eXé_å™•‹t
.
¥Ÿo_ifs
, (
curöfo
->
ai_Ámûy
 =
AF_INET
Ë? "AF_INET" : "AF_INET6", 
	`_ex_°ªº‹
(
ex_î∫o
, 
eb
, 
ERRBSIZ
)));

1296 
	`_eXosù_˛o£sockë
(
sock
);

1297 
sock
 = -1;

1307 
	`_eXosù_‰ìaddröfo
(
addröfo
);

1309 i‡(
sock
 < 0) {

1310 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosù] [TLS] c™nŸ böd o¿p‹à[%i]\n", 
exc⁄ãxt
->
eXé_å™•‹t
.
¥Ÿo_loˇl_p‹t
));

1314 
ª£rved
->
és_sockë
 = 
sock
;

1316 i‡(
exc⁄ãxt
->
eXé_å™•‹t
.
¥Ÿo_loˇl_p‹t
 == 0) {

1318 i‡(
ª£rved
->
ai_addr
.
ss_Ámûy
 =
AF_INET
)

1319 
exc⁄ãxt
->
eXé_å™•‹t
.
¥Ÿo_loˇl_p‹t
 = 
	`¡ohs
(((
sockaddr_ö
 *Ë&
ª£rved
->
ai_addr
)->
sö_p‹t
);

1322 
exc⁄ãxt
->
eXé_å™•‹t
.
¥Ÿo_loˇl_p‹t
 = 
	`¡ohs
(((
sockaddr_ö6
 *Ë&
ª£rved
->
ai_addr
)->
sö6_p‹t
);

1324 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO1
, 
NULL
, "[eXosù] [TLS] bödög o¿p‹à[%i]\n", 
exc⁄ãxt
->
eXé_å™•‹t
.
¥Ÿo_loˇl_p‹t
));

1327 #ifde‡
ENABLE_MAIN_SOCKET


1328 #ifde‡
HAVE_SYS_EPOLL_H


1330 i‡(
exc⁄ãxt
->
pﬁl_mëhod
 =
EXOSIP_USE_EPOLL_LT
) {

1331 
ïﬁl_evít
 
ev
;

1333 
	`mem£t
(&
ev
, 0, (
ïﬁl_evít
));

1334 
ev
.
evíts
 = 
EPOLLIN
;

1335 
ev
.
d©a
.
fd
 = 
sock
;

1336 
ªs
 = 
	`ïﬁl_˘l
(
exc⁄ãxt
->
ïfd
, 
EPOLL_CTL_ADD
, 
sock
, &
ev
);

1338 i‡(
ªs
 < 0) {

1339 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosù] [TLS] c™nŸÖﬁ»⁄ maöÅl†sockë [%i]\n", 
exc⁄ãxt
->
eXé_å™•‹t
.
¥Ÿo_loˇl_p‹t
));

1340 
	`_eXosù_˛o£sockë
(
sock
);

1341 
ª£rved
->
és_sockë
 = -1;

1349  
OSIP_SUCCESS
;

1350 
	}
}

1352 
	$és_é_£t_fd£t
(
eXosù_t
 *
exc⁄ãxt
, 
fd_£t
 *
osù_fd£t
, fd_£à*
osù_wr£t
, fd_£à*
osù_ex˚±£t
, *
fd_max
, *
osù_fd_èbÀ
) {

1353 
eXéés
 *
ª£rved
 = (eXéé†*Ë
exc⁄ãxt
->
eXéés_ª£rved
;

1354 
pos
;

1355 
pos_fd
 = 0;

1357 i‡(
ª£rved
 =
NULL
) {

1358 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] [TLS] wrong state: createÅransportÜayer first\n"));

1359  
OSIP_WRONG_STATE
;

1362 #ifde‡
ENABLE_MAIN_SOCKET


1364 i‡(
ª£rved
->
és_sockë
 <= 0)

1367 i‡(
osù_fd£t
 !
NULL
)

1368 
	`eXFD_SET
(
ª£rved
->
és_sockë
, 
osù_fd£t
);

1370 i‡(
ª£rved
->
és_sockë
 > *
fd_max
)

1371 *
fd_max
 = 
ª£rved
->
és_sockë
;

1375 
pos
 = 0;Öo†< 
EXOSIP_MAX_SOCKETS
;Öos++) {

1376 i‡(
ª£rved
->
sockë_èb
[
pos
].
övÆid
 > 0) {

1377 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosù] [TLS] [fd£t] sockë info:[%s][%d] [sock=%d] [pos=%d] m™uÆÑe£t\n", 
ª£rved
->
sockë_èb
[
pos
].
ªmŸe_ù
,Ñe£rved->sockë_èb[pos].
ªmŸe_p‹t
,

1378 
ª£rved
->
sockë_èb
[
pos
].
sockë
,Öos));

1379 
	`_eXosù_m¨k_ªgi°øti⁄_expúed
(
exc⁄ãxt
, 
ª£rved
->
sockë_èb
[
pos
].
ªg_ˇŒ_id
);

1380 
	`_és_é_˛o£_socköfo
(
exc⁄ãxt
, &
ª£rved
->
sockë_èb
[
pos
]);

1384 i‡(
ª£rved
->
sockë_èb
[
pos
].
sockë
 > 0) {

1385 i‡(
osù_fd£t
 !
NULL
)

1386 
	`eXFD_SET
(
ª£rved
->
sockë_èb
[
pos
].
sockë
, 
osù_fd£t
);

1387 
osù_fd_èbÀ
[
pos_fd
] = 
ª£rved
->
sockë_èb
[
pos
].
sockë
;

1388 
pos_fd
++;

1390 i‡(
ª£rved
->
sockë_èb
[
pos
].
sockë
 > *
fd_max
)

1391 *
fd_max
 = 
ª£rved
->
sockë_èb
[
pos
].
sockë
;

1393 i‡(
osù_wr£t
 !
NULL
 && (
ª£rved
->
sockë_èb
[
pos
].
£ndbuÊí
 > 0 &&Ñe£rved->sockë_èb[pos].
s¶_°©e
 == 3))

1394 
	`eXFD_SET
(
ª£rved
->
sockë_èb
[
pos
].
sockë
, 
osù_wr£t
);

1397 i‡(
osù_wr£t
 !
NULL
 && 
ª£rved
->
sockë_èb
[
pos
].
s¶_°©e
 == 0)

1398 
	`eXFD_SET
(
ª£rved
->
sockë_èb
[
pos
].
sockë
, 
osù_wr£t
);

1400 i‡(
osù_ex˚±£t
 !
NULL
 && 
ª£rved
->
sockë_èb
[
pos
].
s¶_°©e
 == 0)

1401 
	`eXFD_SET
(
ª£rved
->
sockë_èb
[
pos
].
sockë
, 
osù_ex˚±£t
);

1405  
OSIP_SUCCESS
;

1406 
	}
}

1408 
	$_és_¥öt_s¶_îr‹
(
îr
) {

1409 
îr
) {

1410 
SSL_ERROR_NONE
:

1411 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] [TLS] SSL ERROR NONE - OK\n"));

1414 
SSL_ERROR_ZERO_RETURN
:

1415 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] [TLS] SSL ERROR ZERO RETURN - SHUTDOWN\n"));

1418 
SSL_ERROR_WANT_READ
:

1419 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] [TLS] SSL wantÑead\n"));

1422 
SSL_ERROR_WANT_WRITE
:

1423 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] [TLS] SSL want write\n"));

1426 
SSL_ERROR_SSL
:

1427 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] [TLS] SSL ERROR\n"));

1430 
SSL_ERROR_SYSCALL
:

1431 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] [TLS] SSL ERROR SYSCALL\n"));

1435 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] [TLS] SSLÖroblem\n"));

1438  
OSIP_SUCCESS
;

1439 
	}
}

1441 
	$és_dump_vîifiˇti⁄_Áûuª
(
vîifiˇti⁄_ªsu…
, *
ªas⁄
, 
size_t
 
ªas⁄_Àn
) {

1442 
vîifiˇti⁄_ªsu…
) {

1443 
X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT
:

1444 
	`¢¥ötf
(
ªas⁄
, 
ªas⁄_Àn
, "unableÅo get issuer certificate");

1447 
X509_V_ERR_UNABLE_TO_GET_CRL
:

1448 
	`¢¥ötf
(
ªas⁄
, 
ªas⁄_Àn
, "unableÅo get certificate CRL");

1451 
X509_V_ERR_UNABLE_TO_DECRYPT_CERT_SIGNATURE
:

1452 
	`¢¥ötf
(
ªas⁄
, 
ªas⁄_Àn
, "unableÅo decrypt certificate's signature");

1455 
X509_V_ERR_UNABLE_TO_DECRYPT_CRL_SIGNATURE
:

1456 
	`¢¥ötf
(
ªas⁄
, 
ªas⁄_Àn
, "unableÅo decrypt CRL's signature");

1459 
X509_V_ERR_UNABLE_TO_DECODE_ISSUER_PUBLIC_KEY
:

1460 
	`¢¥ötf
(
ªas⁄
, 
ªas⁄_Àn
, "unableÅo decode issuerÖublic key");

1463 
X509_V_ERR_CERT_SIGNATURE_FAILURE
:

1464 
	`¢¥ötf
(
ªas⁄
, 
ªas⁄_Àn
, "certificate signature failure");

1467 
X509_V_ERR_CRL_SIGNATURE_FAILURE
:

1468 
	`¢¥ötf
(
ªas⁄
, 
ªas⁄_Àn
, "CRL signature failure");

1471 
X509_V_ERR_CERT_NOT_YET_VALID
:

1472 
	`¢¥ötf
(
ªas⁄
, 
ªas⁄_Àn
, "certificate isÇot yet valid");

1475 
X509_V_ERR_CERT_HAS_EXPIRED
:

1476 
	`¢¥ötf
(
ªas⁄
, 
ªas⁄_Àn
, "certificate hasÉxpired");

1479 
X509_V_ERR_CRL_NOT_YET_VALID
:

1480 
	`¢¥ötf
(
ªas⁄
, 
ªas⁄_Àn
, "CRL isÇot yet valid");

1483 
X509_V_ERR_CRL_HAS_EXPIRED
:

1484 
	`¢¥ötf
(
ªas⁄
, 
ªas⁄_Àn
, "CRL hasÉxpired");

1487 
X509_V_ERR_ERROR_IN_CERT_NOT_BEFORE_FIELD
:

1488 
	`¢¥ötf
(
ªas⁄
, 
ªas⁄_Àn
, "formatÉrror in certificate'sÇotBefore field");

1491 
X509_V_ERR_ERROR_IN_CERT_NOT_AFTER_FIELD
:

1492 
	`¢¥ötf
(
ªas⁄
, 
ªas⁄_Àn
, "formatÉrror in certificate'sÇotAfter field");

1495 
X509_V_ERR_ERROR_IN_CRL_LAST_UPDATE_FIELD
:

1496 
	`¢¥ötf
(
ªas⁄
, 
ªas⁄_Àn
, "formatÉrror in CRL'sÜastUpdate field");

1499 
X509_V_ERR_ERROR_IN_CRL_NEXT_UPDATE_FIELD
:

1500 
	`¢¥ötf
(
ªas⁄
, 
ªas⁄_Àn
, "formatÉrror in CRL'sÇextUpdate field");

1503 
X509_V_ERR_OUT_OF_MEM
:

1504 
	`¢¥ötf
(
ªas⁄
, 
ªas⁄_Àn
, "out of memory");

1507 
X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT
:

1508 
	`¢¥ötf
(
ªas⁄
, 
ªas⁄_Àn
, "self signed certificate");

1511 
X509_V_ERR_SELF_SIGNED_CERT_IN_CHAIN
:

1512 
	`¢¥ötf
(
ªas⁄
, 
ªas⁄_Àn
, "self signed certificate in certificate chain");

1515 
X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY
:

1516 
	`¢¥ötf
(
ªas⁄
, 
ªas⁄_Àn
, "unableÅo getÜocal issuer certificate");

1519 
X509_V_ERR_UNABLE_TO_VERIFY_LEAF_SIGNATURE
:

1520 
	`¢¥ötf
(
ªas⁄
, 
ªas⁄_Àn
, "unableÅo verifyÅhe first certificate");

1523 
X509_V_ERR_CERT_CHAIN_TOO_LONG
:

1524 
	`¢¥ötf
(
ªas⁄
, 
ªas⁄_Àn
, "certificate chainÅooÜong");

1527 
X509_V_ERR_CERT_REVOKED
:

1528 
	`¢¥ötf
(
ªas⁄
, 
ªas⁄_Àn
, "certificateÑevoked");

1531 
X509_V_ERR_INVALID_CA
:

1532 
	`¢¥ötf
(
ªas⁄
, 
ªas⁄_Àn
, "invalid CA certificate");

1535 
X509_V_ERR_PATH_LENGTH_EXCEEDED
:

1536 
	`¢¥ötf
(
ªas⁄
, 
ªas⁄_Àn
, "pathÜength constraintÉxceeded");

1539 
X509_V_ERR_INVALID_PURPOSE
:

1540 
	`¢¥ötf
(
ªas⁄
, 
ªas⁄_Àn
, "unsupported certificateÖurpose");

1543 
X509_V_ERR_CERT_UNTRUSTED
:

1544 
	`¢¥ötf
(
ªas⁄
, 
ªas⁄_Àn
, "certificateÇotÅrusted");

1547 
X509_V_ERR_CERT_REJECTED
:

1548 
	`¢¥ötf
(
ªas⁄
, 
ªas⁄_Àn
, "certificateÑejected");

1551 
X509_V_ERR_SUBJECT_ISSUER_MISMATCH
:

1552 
	`¢¥ötf
(
ªas⁄
, 
ªas⁄_Àn
, "subject issuer mismatch");

1555 
X509_V_ERR_AKID_SKID_MISMATCH
:

1556 
	`¢¥ötf
(
ªas⁄
, 
ªas⁄_Àn
, "authorityánd subject key identifier mismatch");

1559 
X509_V_ERR_AKID_ISSUER_SERIAL_MISMATCH
:

1560 
	`¢¥ötf
(
ªas⁄
, 
ªas⁄_Àn
, "authorityánd issuer serialÇumber mismatch");

1563 
X509_V_ERR_KEYUSAGE_NO_CERTSIGN
:

1564 
	`¢¥ötf
(
ªas⁄
, 
ªas⁄_Àn
, "key usage doesÇot include certificate signing");

1567 
X509_V_ERR_APPLICATION_VERIFICATION
:

1568 
	`¢¥ötf
(
ªas⁄
, 
ªas⁄_Àn
, "application verification failure");

1572 
	`¢¥ötf
(
ªas⁄
, 
ªas⁄_Àn
, "unknownÉrror");

1577 
	}
}

1579 
	$pkp_pö_≥î_pubkey
(
eXosù_t
 *
exc⁄ãxt
, 
SSL
 *
s¶
) {

1580 
X509
 *
˚π
 = 
NULL
;

1581 
FILE
 *
Â
 = 
NULL
;

1583 
Àn1
 = 0, 
Àn2
 = 0;

1584 *
buff1
 = 
NULL
, *
buff2
 = NULL;

1586 
ªt
 = 0, 
ªsu…
 = -1;

1588 i‡(
NULL
 =
s¶
)

1591 i‡(
exc⁄ãxt
->
eXosù_és_˘x_∑øms
.
˛õ¡
.
public_key_pö√d
[0] == '\0')

1594 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO1
, 
NULL
, "[eXosù] [TLS] checkögÖö√dÖubli¯key f‹ cîtifiˇã [%s]\n", 
exc⁄ãxt
->
eXosù_és_˘x_∑øms
.
˛õ¡
.
public_key_pö√d
));

1597 *
ãmp
 = 
NULL
;

1598 
size
;

1600 
˚π
 = 
	`SSL_gë_≥î_˚πifiˇã
(
s¶
);

1602 i‡(!(
˚π
 !
NULL
))

1608 
Àn1
 = 
	`i2d_X509_PUBKEY
(
	`X509_gë_X509_PUBKEY
(
˚π
), 
NULL
);

1610 i‡(!(
Àn1
 > 0))

1613 
buff1
 = 
ãmp
 = 
	`OPENSSL_mÆloc
(
Àn1
);

1615 i‡(!(
buff1
 !
NULL
))

1618 
Àn2
 = 
	`i2d_X509_PUBKEY
(
	`X509_gë_X509_PUBKEY
(
˚π
), &
ãmp
);

1620 i‡(!((
Àn1
 =
Àn2
Ë&& (
ãmp
 !
NULL
Ë&& (—em∞- 
buff1
) ==Üen1)))

1625 
Â
 = 
	`f›í
(
exc⁄ãxt
->
eXosù_és_˘x_∑øms
.
˛õ¡
.
public_key_pö√d
, "rb");

1627 i‡(
NULL
 =
Â
)

1628 
Â
 = 
	`f›í
(
exc⁄ãxt
->
eXosù_és_˘x_∑øms
.
˛õ¡
.
public_key_pö√d
, "r");

1630 i‡(!(
NULL
 !
Â
))

1633 
ªt
 = 
	`f£ek
(
Â
, 0, 
SEEK_END
);

1635 i‡(!(0 =
ªt
))

1638 
size
 = 
	`·ñl
(
Â
);

1640 i‡(!(
size
 != -1 && size > 0 && size < 4096))

1643 
ªt
 = 
	`f£ek
(
Â
, 0, 
SEEK_SET
);

1645 i‡(!(0 =
ªt
))

1648 
buff2
 = 
NULL
;

1649 
Àn2
 = (Ë
size
;

1651 
buff2
 = 
	`OPENSSL_mÆloc
(
Àn2
);

1653 i‡(!(
buff2
 !
NULL
))

1656 
ªt
 = (Ë
	`‰ód
(
buff2
, (
size_t
Ë
Àn2
, 1, 
Â
);

1658 i‡(!(
ªt
 == 1))

1661 
size
 = 
Àn1
 < 
Àn2
 ?Üen1 :Üen2;

1663 i‡(
Àn1
 !(Ë
size
 || 
Àn2
 !(Ësizê|| 0 !
	`memcmp
(
buff1
, 
buff2
, (
size_t
) size))

1666 
ªsu…
 = 0;

1670 i‡(
Â
 !
NULL
)

1671 
	`f˛o£
(
Â
);

1673 i‡(
NULL
 !
buff2
)

1674 
	`OPENSSL_‰ì
(
buff2
);

1676 i‡(
NULL
 !
buff1
)

1677 
	`OPENSSL_‰ì
(
buff1
);

1679 i‡(
NULL
 !
˚π
)

1680 
	`X509_‰ì
(
˚π
);

1682  
ªsu…
;

1683 
	}
}

1685 c⁄° *
	$gë_sigty≥
(
nid
) {

1686 
nid
) {

1687 
EVP_PKEY_RSA
:

1690 
EVP_PKEY_DSA
:

1693 
EVP_PKEY_EC
:

1696 #i‡
OPENSSL_VERSION_NUMBER
 >= 0x10101000L

1697 
EVP_PKEY_RSA_PSS
:

1700 #i‡
	`deföed
(
NID_Ed25519
)

1701 
	#NID_ED25519
 
NID_Ed25519


	)

1703 #i‡
	`deföed
(
NID_Ed448
)

1704 
	#NID_ED448
 
NID_Ed448


	)

1707 
NID_ED25519
:

1710 
NID_ED448
:

1714 #i‡
OPENSSL_VERSION_NUMBER
 >= 0x0090809fL

1715 
NID_id_Go°R3410_2001
:

1719 #i‡
OPENSSL_VERSION_NUMBER
 >0x10100000L && !
	`deföed
(
LIBRESSL_VERSION_NUMBER
)

1720 
NID_id_Go°R3410_2012_256
:

1723 
NID_id_Go°R3410_2012_512
:

1728  
NULL
;

1730 
	}
}

1732 
	$és_dump_öfo
(
eXosù_t
 *
exc⁄ãxt
, 
_és_°ªam
 *
socköfo
) {

1733 
tmp_öfo
[2048];

1734 
size_t
 
Àn_öfo
 = 0;

1736 
X509
 *
≥î
 = 
NULL
;

1737 c⁄° 
SSL_CIPHER
 *
c
;

1738 
vîify_îr
;

1739 
nid
;

1741 i‡(
exc⁄ãxt
->
és_vîify_˛õ¡_˚πifiˇã
 > 0) {

1742 
Àn_öfo
 +
	`¢¥ötf
(
tmp_öfo
 +Üen_info, (tmp_info) -Üen_info, " [verification=ENABLED]");

1744 
Àn_öfo
 +
	`¢¥ötf
(
tmp_öfo
 +Üen_info, (tmp_info) -Üen_info, " [verification=DISABLED]");

1747 
≥î
 = 
	`SSL_gë_≥î_˚πifiˇã
(
socköfo
->
s¶_c⁄n
);

1749 
vîify_îr
 = 
	`SSL_gë_vîify_ªsu…
(
socköfo
->
s¶_c⁄n
);

1750 i‡(
≥î
 !
NULL
) {

1751 #i‡
OPENSSL_VERSION_NUMBER
 >0x10100000L && !
	`deföed
(
LIBRESSL_VERSION_NUMBER
)

1752 i‡(
vîify_îr
 =
X509_V_OK
) {

1753 c⁄° *
≥î«me
 = 
	`SSL_gë0_≥î«me
(
socköfo
->
s¶_c⁄n
);

1755 
Àn_öfo
 +
	`¢¥ötf
(
tmp_öfo
 +Üen_info, (tmp_info) -Üen_info, " [SUCCESS");

1756 i‡(
≥î«me
 !
NULL
)

1757 
Àn_öfo
 +
	`¢¥ötf
(
tmp_öfo
 +Üí_öfo, —mp_öfoË-Üí_öfo, "Öì∫ame=%s", 
≥î«me
);

1758 
Àn_öfo
 +
	`¢¥ötf
(
tmp_öfo
 +Üen_info, (tmp_info) -Üen_info, "]");

1760 c⁄° *
ªas⁄
 = 
	`X509_vîify_˚π_îr‹_°rög
(
vîify_îr
);

1762 
Àn_öfo
 +
	`¢¥ötf
(
tmp_öfo
 +Üí_öfo, —mp_öfoË-Üí_öfo, " [FAILURE %s]", 
ªas⁄
);

1765 i‡(
vîify_îr
 =
X509_V_OK
) {

1766 
Àn_öfo
 +
	`¢¥ötf
(
tmp_öfo
 +Üen_info, (tmp_info) -Üen_info, " [SUCCESS]");

1768 
ªas⁄
[64];

1769 
	`és_dump_vîifiˇti⁄_Áûuª
(
vîify_îr
, 
ªas⁄
, (reason));

1771 
Àn_öfo
 +
	`¢¥ötf
(
tmp_öfo
 +Üí_öfo, —mp_öfoË-Üí_öfo, " [FAILURE %s]", 
ªas⁄
);

1775 
Àn_öfo
 +
	`¢¥ötf
(
tmp_öfo
 +Üen_info, (tmp_info) -Üen_info, " [FAILUREÇoÖeer certificate]");

1778 
Àn_öfo
 +
	`¢¥ötf
(
tmp_öfo
 +Üí_öfo, —mp_öfoË-Üí_öfo, " [%s]", 
	`SSL_gë_vîsi⁄
(
socköfo
->
s¶_c⁄n
));

1780 
Àn_öfo
 +
	`¢¥ötf
(
tmp_öfo
 +Üen_info, (tmp_info) -Üen_info, " [peer certificate");

1781 i‡(
≥î
 !
NULL
) {

1782 
tmp_buf„r
[128];

1784 
	`X509_NAME_⁄ñöe
(
	`X509_gë_subje˘_«me
(
≥î
), 
tmp_buf„r
, (tmp_buffer));

1785 
Àn_öfo
 +
	`¢¥ötf
(
tmp_öfo
 +Üí_öfo, —mp_öfoË-Üí_öfo, " sub=%s", 
tmp_buf„r
);

1786 
	`X509_NAME_⁄ñöe
(
	`X509_gë_issuî_«me
(
≥î
), 
tmp_buf„r
, (tmp_buffer));

1787 
Àn_öfo
 +
	`¢¥ötf
(
tmp_öfo
 +Üí_öfo, —mp_öfoË-Üí_öfo, " issuî=%s]", 
tmp_buf„r
);

1790 
Àn_öfo
 +
	`¢¥ötf
(
tmp_öfo
 +Üen_info, (tmp_info) -Üen_info, " NONE]");

1793 #i‡
OPENSSL_VERSION_NUMBER
 >0x10101000L && !
	`deföed
(
LIBRESSL_VERSION_NUMBER
)

1794 
Àn_öfo
 +
	`¢¥ötf
(
tmp_öfo
 +Üen_info, (tmp_info) -Üen_info, " [peer");

1795 i‡(
	`SSL_gë_≥î_sig«tuª_nid
(
socköfo
->
s¶_c⁄n
, &
nid
Ë&&Çid !
NID_undef
)

1796 
Àn_öfo
 +
	`¢¥ötf
(
tmp_öfo
 +Üí_öfo, —mp_öfoË-Üí_öfo, " signög dige°=%s", 
	`OBJ_nid2¢
(
nid
));

1797 i‡(
	`SSL_gë_≥î_sig«tuª_ty≥_nid
(
socköfo
->
s¶_c⁄n
, &
nid
))

1798 
Àn_öfo
 +
	`¢¥ötf
(
tmp_öfo
 +Üí_öfo, —mp_öfoË-Üí_öfo, " sig«tuªÅy≥=%s", 
	`gë_sigty≥
(
nid
));

1801 
EVP_PKEY
 *
key
;

1803 i‡(
	`SSL_gë_≥î_tmp_key
(
socköfo
->
s¶_c⁄n
, &
key
)) {

1804 
Àn_öfo
 +
	`¢¥ötf
(
tmp_öfo
 +Üen_info, (tmp_info) -Üen_info, "Åemp key=");

1805 
	`EVP_PKEY_id
(
key
)) {

1806 
EVP_PKEY_RSA
:

1807 
Àn_öfo
 +
	`¢¥ötf
(
tmp_öfo
 +Üí_öfo, —mp_öfoË-Üí_öfo, "RSA, %dbôs", 
	`EVP_PKEY_bôs
(
key
));

1810 
EVP_PKEY_DH
:

1811 
Àn_öfo
 +
	`¢¥ötf
(
tmp_öfo
 +Üí_öfo, —mp_öfoË-Üí_öfo, "DH, %dbôs", 
	`EVP_PKEY_bôs
(
key
));

1813 #i‚de‡
OPENSSL_NO_EC


1814 
EVP_PKEY_EC
: {

1815 
EC_KEY
 *
ec
 = 
	`EVP_PKEY_gë1_EC_KEY
(
key
);

1816 
nid
;

1817 c⁄° *
˙ame
;

1818 
nid
 = 
	`EC_GROUP_gë_curve_«me
(
	`EC_KEY_gë0_group
(
ec
));

1819 
	`EC_KEY_‰ì
(
ec
);

1820 
˙ame
 = 
	`EC_curve_nid2ni°
(
nid
);

1821 i‡(
˙ame
 =
NULL
)

1822 
˙ame
 = 
	`OBJ_nid2¢
(
nid
);

1823 
Àn_öfo
 +
	`¢¥ötf
(
tmp_öfo
 +Üí_öfo, —mp_öfoË-Üí_öfo, "ECDH, %s, %dbôs", 
˙ame
, 
	`EVP_PKEY_bôs
(
key
));

1827 
Àn_öfo
 +
	`¢¥ötf
(
tmp_öfo
 +Üí_öfo, —mp_öfoË-Üí_öfo, "%s, %dbôs", 
	`OBJ_nid2¢
(
	`EVP_PKEY_id
(
key
)), 
	`EVP_PKEY_bôs
(key));

1829 
	`EVP_PKEY_‰ì
(
key
);

1832 
Àn_öfo
 +
	`¢¥ötf
(
tmp_öfo
 +Üen_info, (tmp_info) -Üen_info, "]");

1835 
c
 = 
	`SSL_gë_cuºít_cùhî
(
socköfo
->
s¶_c⁄n
);

1836 
Àn_öfo
 +
	`¢¥ötf
(
tmp_öfo
 +Üí_öfo, —mp_öfoË-Üí_öfo, " [cùhî %s:%s", 
	`SSL_CIPHER_gë_vîsi⁄
(
c
), 
	`SSL_CIPHER_gë_«me
(c));

1838 i‡(
≥î
 !
NULL
) {

1839 #i‡
OPENSSL_VERSION_NUMBER
 >= 0x10100000L

1840 
EVP_PKEY
 *
pktmp
;

1842 
pktmp
 = 
	`X509_gë0_pubkey
(
≥î
);

1843 
Àn_öfo
 +
	`¢¥ötf
(
tmp_öfo
 +Üí_öfo, —mp_öfoË-Üí_öfo, "Öì∏pub.key=%ubô", 
	`EVP_PKEY_bôs
(
pktmp
));

1845 
	`X509_‰ì
(
≥î
);

1848 #i‚de‡
OPENSSL_NO_COMP


1850 c⁄° 
COMP_METHOD
 *
comp
, *
ex∑nsi⁄
;

1851 
comp
 = 
	`SSL_gë_cuºít_com¥essi⁄
(
socköfo
->
s¶_c⁄n
);

1852 
ex∑nsi⁄
 = 
	`SSL_gë_cuºít_ex∑nsi⁄
(
socköfo
->
s¶_c⁄n
);

1853 
Àn_öfo
 +
	`¢¥ötf
(
tmp_öfo
 +Üí_öfo, —mp_öfoË-Üí_öfo, " Com¥essi⁄: %s", 
comp
 ? 
	`SSL_COMP_gë_«me
(comp) : "NONE");

1854 
Àn_öfo
 +
	`¢¥ötf
(
tmp_öfo
 +Üí_öfo, —mp_öfoË-Üí_öfo, " Ex∑nsi⁄: %s", 
ex∑nsi⁄
 ? 
	`SSL_COMP_gë_«me
(expansion) : "NONE");

1857 
Àn_öfo
 +
	`¢¥ötf
(
tmp_öfo
 +Üen_info, (tmp_info) -Üen_info, "]");

1859 #i‡
OPENSSL_VERSION_NUMBER
 >= 0x10100000L

1860 
Àn_öfo
 +
	`¢¥ötf
(
tmp_öfo
 +Üí_öfo, —mp_öfoË-Üí_öfo, " [h™dshakêªad=%ju wrôe=%ju byãs]", 
	`BIO_numbî_ªad
(
	`SSL_gë_rbio
(
socköfo
->
s¶_c⁄n
)), 
	`BIO_numbî_wrôãn
(
	`SSL_gë_wbio
(sockinfo->ssl_conn)));

1863 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosù] [TLS] [s¶ c⁄√˘]%s\n", 
tmp_öfo
));

1864 
	}
}

1866 
	$_és_é_s¶_c⁄√˘_sockë
(
eXosù_t
 *
exc⁄ãxt
, 
_és_°ªam
 *
socköfo
) {

1867 
X509
 *
≥î
;

1868 
BIO
 *
sbio
;

1869 
ªs
;

1870 
˚π_îr
;

1872 i‡(
socköfo
->
s¶_˘x
 =
NULL
) {

1873 
socköfo
->
s¶_˘x
 = 
	`öôülize_˛õ¡_˘x
(
exc⁄ãxt
, &exc⁄ãxt->
eXosù_és_˘x_∑øms
, 
IPPROTO_TCP
, socköfo->
¢i_£rvî«meödiˇti⁄
);

1876 
socköfo
->
s¶_c⁄n
 = 
	`SSL_√w
(socköfo->
s¶_˘x
);

1878 i‡(
socköfo
->
s¶_c⁄n
 =
NULL
) {

1879 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] [TLS] SSL_newÉrror\n"));

1883 
sbio
 = 
	`BIO_√w_sockë
(
socköfo
->
sockë
, 
BIO_NOCLOSE
);

1885 i‡(
sbio
 =
NULL
) {

1886 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] [TLS] BIO_new_socketÉrror\n"));

1890 
	`SSL_£t_bio
(
socköfo
->
s¶_c⁄n
, 
sbio
, sbio);

1892 #i‚de‡
OPENSSL_NO_TLSEXT


1894 i‡(!
	`SSL_£t_é£xt_ho°_«me
(
socköfo
->
s¶_c⁄n
, socköfo->
¢i_£rvî«meödiˇti⁄
 )) {

1895 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_WARNING
, 
NULL
, "[eXosip] [TLS] set_tlsext_host_name (SNI):Ço servername gets indicated\n"));

1901 
ªs
 = 
	`SSL_c⁄√˘
(
socköfo
->
s¶_c⁄n
);

1902 
ªs
 = 
	`SSL_gë_îr‹
(
socköfo
->
s¶_c⁄n
,Ñes);

1904 i‡(
ªs
 !
SSL_ERROR_NONE
 &&Ñe†!
SSL_ERROR_WANT_READ
 &&Ñe†!
SSL_ERROR_WANT_WRITE
) {

1905 
	`és_dump_öfo
(
exc⁄ãxt
, 
socköfo
);

1906 
	`_és_¥öt_s¶_îr‹
(
ªs
);

1910 i‡(!
	`SSL_is_öô_föished
(
socköfo
->
s¶_c⁄n
)) {

1911 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosip] [TLS] [ssl connect] handshake inÖrogress\n"));

1915 
	`és_dump_öfo
(
exc⁄ãxt
, 
socköfo
);

1917 
˚π_îr
 = 
	`SSL_gë_vîify_ªsu…
(
socköfo
->
s¶_c⁄n
);

1919 i‡(
exc⁄ãxt
->
és_vîify_˛õ¡_˚πifiˇã
 > 0 && 
˚π_îr
 !
X509_V_OK
) {

1923 
≥î
 = 
	`SSL_gë_≥î_˚πifiˇã
(
socköfo
->
s¶_c⁄n
);

1924 i‡(
≥î
 =
NULL
) {

1925 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] [TLS]Ço certificateÑeceived\n"));

1928 
	`X509_‰ì
(
≥î
);

1930 i‡(
	`pkp_pö_≥î_pubkey
(
exc⁄ãxt
, 
socköfo
->
s¶_c⁄n
)) {

1931 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] [TLS] failedÅo verifyÖublic key for certificate\n"));

1935 
	`SSL_£t_mode
(
socköfo
->
s¶_c⁄n
, 
SSL_MODE_AUTO_RETRY
);

1937 
socköfo
->
s¶_°©e
 = 3;

1938 
	`_eXosù_m¨k_Æl_å™ß˘i⁄_f‹˚_£nd
(
exc⁄ãxt
, 
socköfo
->
sockë
);

1940 
	}
}

1944 *
	$_és_buf„r_föd
(c⁄° *
hay°ack
, 
size_t
 
hay°ack_Àn
, c⁄° *
√edÀ
) {

1945 c⁄° *
£¨ch
 = 
hay°ack
, *
íd
 = hay°ack + 
hay°ack_Àn
;

1946 *
p
;

1947 
size_t
 
Àn
 = 
	`°æí
(
√edÀ
);

1949 
£¨ch
 < 
íd
 && (
p
 = 
	`memchr
(£¨ch, *
√edÀ
,Énd - sórch)Ë!
NULL
) {

1950 i‡(
p
 + 
Àn
 > 
íd
)

1953 i‡(
	`memcmp
(
p
, 
√edÀ
, 
Àn
) == 0)

1954  (
p
);

1956 
£¨ch
 = 
p
 + 1;

1959  (
NULL
);

1960 
	}
}

1962 
	#END_HEADERS_STR
 "\r\n\r\n"

	)

1963 
	#CLEN_HEADER_STR
 "\r\nc⁄ã¡-Àngth:"

	)

1964 
	#CLEN_HEADER_COMPACT_STR
 "\r\∆:"

	)

1965 
	#CLEN_HEADER_STR2
 "\r\nc⁄ã¡-Àngth "

	)

1966 
	#CLEN_HEADER_COMPACT_STR2
 "\r\∆ "

	)

1967 
	#c⁄°_°æí
(
x
Ë(((x)Ë- 1)

	)

1971 
size_t
 
	$_és_h™dÀ_mesßges
(
eXosù_t
 *
exc⁄ãxt
, 
_és_°ªam
 *
socköfo
) {

1972 
size_t
 
c⁄sumed
 = 0;

1973 *
buf
 = 
socköfo
->buf;

1974 
size_t
 
buÊí
 = 
socköfo
->buflen;

1975 *
íd_hódîs
;

1977 
buÊí
 > 0 && (
íd_hódîs
 = 
	`_és_buf„r_föd
(
buf
, buÊí, 
END_HEADERS_STR
)Ë!
NULL
) {

1978 
˛í
;

1979 
size_t
 
msgÀn
;

1980 *
˛í_hódî
;

1982 i‡(
buf
 =
íd_hódîs
) {

1984 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO1
, 
NULL
, "[eXosù] [TLS] sockë [%s][%d]Ñfc5626 [doubÀ]p⁄gÑe˚ived [CRLFCRLF]\n", 
socköfo
->
ªmŸe_ù
, socköfo->
ªmŸe_p‹t
));

1985 
c⁄sumed
 += 4;

1986 
buÊí
 -= 4;

1987 
buf
 += 4;

1988 
socköfo
->
pög_rfc5626
 = 0;

1993 *
íd_hódîs
 = '\0';

1996 
˛í_hódî
 = 
	`osù_°rˇ£°r
(
buf
, 
CLEN_HEADER_STR
);

1998 i‡(!
˛í_hódî
)

1999 
˛í_hódî
 = 
	`osù_°rˇ£°r
(
buf
, 
CLEN_HEADER_STR2
);

2001 i‡(!
˛í_hódî
)

2002 
˛í_hódî
 = 
	`osù_°rˇ£°r
(
buf
, 
CLEN_HEADER_COMPACT_STR
);

2004 i‡(!
˛í_hódî
)

2005 
˛í_hódî
 = 
	`osù_°rˇ£°r
(
buf
, 
CLEN_HEADER_COMPACT_STR2
);

2007 i‡(
˛í_hódî
 !
NULL
) {

2008 
˛í_hódî
 = 
	`°rchr
(clen_header, ':');

2009 
˛í_hódî
++;

2012 i‡(!
˛í_hódî
) {

2016 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO1
, 
NULL
, "[eXosù] [TLS] sockë [%s][%d] mesßgêha†nÿc⁄ã¡-Àngth: <%s>\n", 
socköfo
->
ªmŸe_ù
, socköfo->
ªmŸe_p‹t
, 
buf
));

2019 
˛í
 = 
˛í_hódî
 ? 
	`©oi
(clen_header) : 0;

2021 i‡(
˛í
 < 0)

2022  
socköfo
->
buÊí
;

2025 *
íd_hódîs
 = 
END_HEADERS_STR
[0];

2026 
íd_hódîs
 +
	`c⁄°_°æí
(
END_HEADERS_STR
);

2029 
msgÀn
 = (
íd_hódîs
 - 
buf
 + 
˛í
);

2031 i‡(
msgÀn
 > 
buÊí
) {

2033  
c⁄sumed
;

2037 
	`_eXosù_h™dÀ_öcomög_mesßge
(
exc⁄ãxt
, 
buf
, 
msgÀn
, 
socköfo
->
sockë
, socköfo->
ªmŸe_ù
, socköfo->
ªmŸe_p‹t
, socköfo->
«âed_ù
, &socköfo->
«âed_p‹t
);

2038 
c⁄sumed
 +
msgÀn
;

2039 
buÊí
 -
msgÀn
;

2040 
buf
 +
msgÀn
;

2043 i‡(
buÊí
 =2 && 
buf
[0] == '\r' && buf[1] == '\n') {

2044 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO1
, 
NULL
, "[eXosù] [TLS] sockë [%s][%d]Ñfc5626Ö⁄gÑe˚ived [CRLF]\n", 
socköfo
->
ªmŸe_ù
, socköfo->
ªmŸe_p‹t
, 
buf
));

2045 
c⁄sumed
 += 2;

2046 
buÊí
 -= 2;

2047 
buf
 += 2;

2048 
socköfo
->
pög_rfc5626
 = 0;

2049 
socköfo
->
p⁄g_suµ‹ãd
 = 1;

2052  
c⁄sumed
;

2053 
	}
}

2055 
	$_és_é_ªcv
(
eXosù_t
 *
exc⁄ãxt
, 
_és_°ªam
 *
socköfo
) {

2056 
æí
, 
îr
;

2057 
size_t
 
c⁄sumed
;

2059 i‡(!
socköfo
->
buf
) {

2060 
socköfo
->
buf
 = (*Ë
	`osù_mÆloc
(
SIP_MESSAGE_MAX_LENGTH
);

2062 i‡(
socköfo
->
buf
 =
NULL
)

2063  
OSIP_NOMEM
;

2065 
socköfo
->
bufsize
 = 
SIP_MESSAGE_MAX_LENGTH
;

2066 
socköfo
->
buÊí
 = 0;

2070 i‡(
socköfo
->
bufsize
 - socköfo->
buÊí
 <= 0) {

2071 
socköfo
->
buf
 = (*Ë
	`osù_ªÆloc
(socköfo->buf, socköfo->
bufsize
 + 5000);

2073 i‡(
socköfo
->
buf
 =
NULL
)

2074  
OSIP_NOMEM
;

2076 
socköfo
->
bufsize
 = sockinfo->bufsize + 5000;

2080 i‡(
socköfo
->
buÊí
 =0 && socköfo->
bufsize
 > 
SIP_MESSAGE_MAX_LENGTH
) {

2081 
	`osù_‰ì
(
socköfo
->
buf
);

2082 
socköfo
->
buf
 = (*Ë
	`osù_mÆloc
(
SIP_MESSAGE_MAX_LENGTH
);

2084 i‡(
socköfo
->
buf
 =
NULL
)

2085  
OSIP_NOMEM
;

2087 
socköfo
->
bufsize
 = 
SIP_MESSAGE_MAX_LENGTH
;

2090 i‡(
socköfo
->
s¶_°©e
 != 3)

2091  
OSIP_SUCCESS
;

2093 
æí
 = 
	`SSL_ªad
(
socköfo
->
s¶_c⁄n
, socköfo->
buf
 + socköfo->
buÊí
, (Ë(socköfo->
bufsize
 - sockinfo->buflen));

2095 i‡(
æí
 <= 0) {

2096 
îr
 = 
	`SSL_gë_îr‹
(
socköfo
->
s¶_c⁄n
, 
æí
);

2098 i‡(
îr
 !
SSL_ERROR_WANT_READ
 &&Éº !
SSL_ERROR_WANT_WRITE
) {

2099 
	`_és_¥öt_s¶_îr‹
(
îr
);

2107 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_WARNING
, 
NULL
, "[eXosip] [TLS] [recv] TLS closed\n"));

2109 
	`_eXosù_m¨k_ªgi°øti⁄_expúed
(
exc⁄ãxt
, 
socköfo
->
ªg_ˇŒ_id
);

2110 
	`_és_é_˛o£_socköfo
(
exc⁄ãxt
, 
socköfo
);

2112  
OSIP_UNDEFINED_ERROR
;

2115 
îr
 = 
OSIP_SUCCESS
;

2117 i‡(
	`SSL_≥ndög
(
socköfo
->
s¶_c⁄n
))

2118 
îr
 = -999;

2120 
socköfo
->
t˝_max_timeout
 = 0;

2121 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO1
, 
NULL
, "[eXosù] [TLS] [ªcv] sockë [%s][%d]Ñód %d byãs\n", 
socköfo
->
ªmŸe_ù
, socköfo->
ªmŸe_p‹t
, 
æí
));

2122 
socköfo
->
buÊí
 +
æí
;

2123 
c⁄sumed
 = 
	`_és_h™dÀ_mesßges
(
exc⁄ãxt
, 
socköfo
);

2125 i‡(
c⁄sumed
 != 0) {

2126 i‡(
socköfo
->
buÊí
 > 
c⁄sumed
) {

2127 
	`memmove
(
socköfo
->
buf
, socköfo->bu‡+ 
c⁄sumed
, socköfo->
buÊí
 - consumed);

2128 
socköfo
->
buÊí
 -
c⁄sumed
;

2131 
socköfo
->
buÊí
 = 0;

2135  
îr
;

2136 
	}
}

2138 
	$_és_ªad_és_maö_sockë
(
eXosù_t
 *
exc⁄ãxt
) {

2139 
eXéés
 *
ª£rved
 = (eXéé†*Ë
exc⁄ãxt
->
eXéés_ª£rved
;

2142 
§c6ho°
[
NI_MAXHOST
];

2143 
ªcvp‹t
 = 0;

2144 
sockaddr_°‹age
 
ß
;

2145 
sock
;

2146 
i
;

2148 
sockÀn_t
 
¶í
;

2149 
pos
;

2151 
SSL
 *
s¶
 = 
NULL
;

2152 
BIO
 *
sbio
;

2154 i‡(
ª£rved
->
ai_addr
.
ss_Ámûy
 =
AF_INET
)

2155 
¶í
 = (
sockaddr_ö
);

2158 
¶í
 = (
sockaddr_ö6
);

2160 
pos
 = 0;Öo†< 
EXOSIP_MAX_SOCKETS
;Öos++) {

2161 i‡(
ª£rved
->
sockë_èb
[
pos
].
sockë
 <= 0)

2165 i‡(
pos
 =
EXOSIP_MAX_SOCKETS
) {

2167 
pos
 = 0;

2169 i‡(
ª£rved
->
sockë_èb
[
pos
].
sockë
 > 0) {

2170 
	`_eXosù_m¨k_ªgi°øti⁄_expúed
(
exc⁄ãxt
, 
ª£rved
->
sockë_èb
[
pos
].
ªg_ˇŒ_id
);

2171 
	`_és_é_˛o£_socköfo
(
exc⁄ãxt
, &
ª£rved
->
sockë_èb
[
pos
]);

2174 
	`mem£t
(&
ª£rved
->
sockë_èb
[
pos
], 0, (
_és_°ªam
));

2177 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO3
, 
NULL
, "[eXosù] [TLS] cª©ög TLS sockëáàödex [%i]\n", 
pos
));

2179 
sock
 = (Ë
	`ac˚±
(
ª£rved
->
és_sockë
, (
sockaddr
 *Ë&
ß
, (
sockÀn_t
 *Ë&
¶í
);

2181 i‡(
sock
 < 0) {

2182 #i‡
	`deföed
(
EBADF
)

2183 
vÆ›t
 = 
ex_î∫o
;

2185 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] [TLS]Érroráccepting TLS socket\n"));

2186 #i‡
	`deföed
(
EBADF
)

2188 i‡(
vÆ›t
 =
EBADF
) {

2189 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] [TLS]Érroráccepting TLS socket [EBADF]\n"));

2190 
	`mem£t
(&
ª£rved
->
ai_addr
, 0, (
sockaddr_°‹age
));

2192 i‡(
ª£rved
->
és_sockë
 > 0) {

2193 
	`_eXosù_˛o£sockë
(
ª£rved
->
és_sockë
);

2195 
i
 = 0; i < 
EXOSIP_MAX_SOCKETS
; i++) {

2196 i‡(
ª£rved
->
sockë_èb
[
i
].
sockë
 > 0 &&Ñe£rved->sockë_èb[i].
is_£rvî
 > 0) {

2197 
	`_eXosù_m¨k_ªgi°øti⁄_expúed
(
exc⁄ãxt
, 
ª£rved
->
sockë_èb
[
i
].
ªg_ˇŒ_id
);

2198 
	`_és_é_˛o£_socköfo
(
exc⁄ãxt
, &
ª£rved
->
sockë_èb
[
i
]);

2203 
	`és_é_›í
(
exc⁄ãxt
);

2209 i‡(
ª£rved
->
£rvî_˘x
 =
NULL
) {

2210 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO1
, 
NULL
, "[eXosip] [TLS] TLS connectionÑejected\n"));

2211 
	`_eXosù_˛o£sockë
(
sock
);

2215 i‡(!
	`SSL_CTX_check_¥iv©e_key
(
ª£rved
->
£rvî_˘x
)) {

2216 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] [TLS] SSL CTXÖrivate key checkÉrror\n"));

2219 
s¶
 = 
	`SSL_√w
(
ª£rved
->
£rvî_˘x
);

2221 i‡(
s¶
 =
NULL
) {

2222 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] [TLS] cannot create ssl connection context\n"));

2226 i‡(!
	`SSL_check_¥iv©e_key
(
s¶
)) {

2227 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] [TLS] SSLÖrivate key checkÉrror\n"));

2230 
sbio
 = 
	`BIO_√w_sockë
(
sock
, 
BIO_NOCLOSE
);

2232 i‡(
sbio
 =
NULL
) {

2233 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] [TLS] BIO_new_socketÉrror\n"));

2236 
	`SSL_£t_bio
(
s¶
, 
sbio
, sbio);

2238 
i
 = 
	`SSL_ac˚±
(
s¶
);

2240 i‡(
i
 <= 0) {

2241 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosù] [TLS] SSL_ac˚±Éº‹: %s\n", 
	`ERR_îr‹_°rög
(
	`ERR_gë_îr‹
(), NULL)));

2242 
i
 = 
	`SSL_gë_îr‹
(
s¶
, i);

2243 
	`_és_¥öt_s¶_îr‹
(
i
);

2245 
	`SSL_shutdown
(
s¶
);

2246 
	`_eXosù_˛o£sockë
(
sock
);

2247 
	`SSL_‰ì
(
s¶
);

2251 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO1
, 
NULL
, "[eXosip] [TLS] incoming TLS connectionáccepted\n"));

2253 
ª£rved
->
sockë_èb
[
pos
].
sockë
 = 
sock
;

2254 
ª£rved
->
sockë_èb
[
pos
].
is_£rvî
 = 1;

2255 
ª£rved
->
sockë_èb
[
pos
].
s¶_c⁄n
 = 
s¶
;

2256 
ª£rved
->
sockë_èb
[
pos
].
s¶_°©e
 = 2;

2259 
vÆ›t
 = 1;

2261 
	`£tsock›t
(
sock
, 
SOL_SOCKET
, 
SO_REUSEADDR
, (*Ë&
vÆ›t
, (valopt));

2264 
	`mem£t
(
§c6ho°
, 0, 
NI_MAXHOST
);

2265 
ªcvp‹t
 = 
	`_eXosù_gëp‹t
((
sockaddr
 *Ë&
ß
);

2266 
	`_eXosù_gë«meöfo
((
sockaddr
 *Ë&
ß
, 
¶í
, 
§c6ho°
, 
NI_MAXHOST
, 
NULL
, 0, 
NI_NUMERICHOST
);

2268 
	`_eXosù_å™•‹t_£t_ds˝
(
exc⁄ãxt
, 
ß
.
ss_Ámûy
, 
sock
);

2270 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO1
, 
NULL
, "[eXosù] [TLS] mesßgêª˚ived from [%s][%d]\n", 
§c6ho°
, 
ªcvp‹t
));

2271 
	`osù_°∫˝y
(
ª£rved
->
sockë_èb
[
pos
].
ªmŸe_ù
, 
§c6ho°
, (reserved->socket_tab[pos].remote_ip) - 1);

2272 
ª£rved
->
sockë_èb
[
pos
].
ªmŸe_p‹t
 = 
ªcvp‹t
;

2274 #ifde‡
HAVE_SYS_EPOLL_H


2276 i‡(
exc⁄ãxt
->
pﬁl_mëhod
 =
EXOSIP_USE_EPOLL_LT
) {

2277 
ïﬁl_evít
 
ev
;

2278 
ªs
;

2280 
	`mem£t
(&
ev
, 0, (
ïﬁl_evít
));

2281 
ev
.
evíts
 = 
EPOLLIN
;

2282 
ev
.
d©a
.
fd
 = 
sock
;

2283 
ªs
 = 
	`ïﬁl_˘l
(
exc⁄ãxt
->
ïfd
, 
EPOLL_CTL_ADD
, 
sock
, &
ev
);

2285 i‡(
ªs
 < 0) {

2286 
	`_és_é_˛o£_socköfo
(
exc⁄ãxt
, &
ª£rved
->
sockë_èb
[
pos
]);

2294  
OSIP_SUCCESS
;

2295 
	}
}

2297 #ifde‡
HAVE_SYS_EPOLL_H


2299 
	$és_é_ïﬁl_ªad_mesßge
(
eXosù_t
 *
exc⁄ãxt
, 
nfds
, 
ïﬁl_evít
 *
ï_¨øy
) {

2300 
eXéés
 *
ª£rved
 = (eXéé†*Ë
exc⁄ãxt
->
eXéés_ª£rved
;

2301 
pos
 = 0;

2302 
n
;

2304 i‡(
ª£rved
 =
NULL
) {

2305 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] [TLS] wrong state: createÅransportÜayer first\n"));

2306  
OSIP_WRONG_STATE
;

2309 
n
 = 0;Ç < 
nfds
; ++n) {

2310 i‡(
ï_¨øy
[
n
].
d©a
.
fd
 =
ª£rved
->
és_sockë
) {

2311 
	`_és_ªad_és_maö_sockë
(
exc⁄ãxt
);

2315 
pos
 = 0;Öo†< 
EXOSIP_MAX_SOCKETS
;Öos++) {

2316 i‡(
ª£rved
->
sockë_èb
[
pos
].
sockë
 > 0) {

2317 i‡(
ï_¨øy
[
n
].
d©a
.
fd
 =
ª£rved
->
sockë_èb
[
pos
].
sockë
) {

2318 i‡((
ï_¨øy
[
n
].
evíts
 & 
EPOLLIN
Ë&& 
ª£rved
->
sockë_èb
[
pos
].
s¶_°©e
 =2 &&Ñe£rved->sockë_èb[pos].
is_£rvî
 > 0) {

2319 
r
 = 
	`SSL_do_h™dshake
(
ª£rved
->
sockë_èb
[
pos
].
s¶_c⁄n
);

2320 
îr
 = 
	`SSL_gë_îr‹
(
ª£rved
->
sockë_èb
[
pos
].
s¶_c⁄n
, 
r
);

2322 i‡(
îr
 =
SSL_ERROR_WANT_READ
 ||Éº =
SSL_ERROR_WANT_WRITE
)

2325 i‡(
r
 <= 0) {

2326 
	`_és_¥öt_s¶_îr‹
(
îr
);

2327 
	`_eXosù_m¨k_ªgi°øti⁄_expúed
(
exc⁄ãxt
, 
ª£rved
->
sockë_èb
[
pos
].
ªg_ˇŒ_id
);

2328 
	`_és_é_˛o£_socköfo
(
exc⁄ãxt
, &
ª£rved
->
sockë_èb
[
pos
]);

2332 
	`SSL_£t_mode
(
ª£rved
->
sockë_èb
[
pos
].
s¶_c⁄n
, 
SSL_MODE_AUTO_RETRY
);

2333 
ª£rved
->
sockë_èb
[
pos
].
s¶_°©e
 = 3;

2337 i‡((
ï_¨øy
[
n
].
evíts
 & 
EPOLLIN
Ë||Ép_¨øy[n].evít†& 
EPOLLOUT
) {

2338 
îr
 = -999;

2339 
max
 = 5;

2341 
îr
 =-999 && 
max
 > 0) {

2342 
îr
 = 
	`_és_é_ªcv
(
exc⁄ãxt
, &
ª£rved
->
sockë_èb
[
pos
]);

2343 
max
--;

2351  
OSIP_SUCCESS
;

2352 
	}
}

2356 
	$és_é_ªad_mesßge
(
eXosù_t
 *
exc⁄ãxt
, 
fd_£t
 *
osù_fd£t
, fd_£à*
osù_wr£t
, fd_£à*
osù_ex˚±£t
) {

2357 
eXéés
 *
ª£rved
 = (eXéé†*Ë
exc⁄ãxt
->
eXéés_ª£rved
;

2358 
pos
 = 0;

2360 i‡(
ª£rved
 =
NULL
) {

2361 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] [TLS] wrong state: createÅransportÜayer first\n"));

2362  
OSIP_WRONG_STATE
;

2365 i‡(
	`FD_ISSET
(
ª£rved
->
és_sockë
, 
osù_fd£t
)) {

2366 
	`_és_ªad_és_maö_sockë
(
exc⁄ãxt
);

2369 
pos
 = 0;Öo†< 
EXOSIP_MAX_SOCKETS
;Öos++) {

2370 i‡(
ª£rved
->
sockë_èb
[
pos
].
sockë
 > 0) {

2371 i‡(
	`FD_ISSET
(
ª£rved
->
sockë_èb
[
pos
].
sockë
, 
osù_ex˚±£t
)) {

2372 
ªs
 = 
	`_t˝és_é_is_c⁄√˘ed
(
exc⁄ãxt
->
pﬁl_mëhod
, 
ª£rved
->
sockë_èb
[
pos
].
sockë
);

2373 i‡(
ªs
 < 0) {

2374 
	`_eXosù_m¨k_ªgi°øti⁄_expúed
(
exc⁄ãxt
, 
ª£rved
->
sockë_èb
[
pos
].
ªg_ˇŒ_id
);

2375 
	`_és_é_˛o£_socköfo
(
exc⁄ãxt
, &
ª£rved
->
sockë_èb
[
pos
]);

2378 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_WARNING
, 
NULL
, "[eXosù] [TLS] [tid=-1] sockë [%s][%d]Éx˚± des¸ùt‹ wôhouàîr‹\n", 
ª£rved
->
sockë_èb
[
pos
].
ªmŸe_ù
,Ñe£rved->sockë_èb[pos].
ªmŸe_p‹t
));

2380 } i‡(
	`FD_ISSET
(
ª£rved
->
sockë_èb
[
pos
].
sockë
, 
osù_wr£t
Ë&&Ñe£rved->sockë_èb[pos].
s¶_°©e
 < 2) {

2381 } i‡(
	`FD_ISSET
(
ª£rved
->
sockë_èb
[
pos
].
sockë
, 
osù_wr£t
Ë&&Ñe£rved->sockë_èb[pos].
s¶_°©e
 == 2) {

2383 
r
 = 
	`SSL_do_h™dshake
(
ª£rved
->
sockë_èb
[
pos
].
s¶_c⁄n
);

2385 i‡(
r
 <= 0) {

2386 
r
 = 
	`SSL_gë_îr‹
(
ª£rved
->
sockë_èb
[
pos
].
s¶_c⁄n
,Ñ);

2387 
	`_és_¥öt_s¶_îr‹
(
r
);

2389 
	`_eXosù_m¨k_ªgi°øti⁄_expúed
(
exc⁄ãxt
, 
ª£rved
->
sockë_èb
[
pos
].
ªg_ˇŒ_id
);

2390 
	`_és_é_˛o£_socköfo
(
exc⁄ãxt
, &
ª£rved
->
sockë_èb
[
pos
]);

2394 
	`SSL_£t_mode
(
ª£rved
->
sockë_èb
[
pos
].
s¶_c⁄n
, 
SSL_MODE_AUTO_RETRY
);

2395 
ª£rved
->
sockë_èb
[
pos
].
s¶_°©e
 = 3;

2396 } i‡(
	`FD_ISSET
(
ª£rved
->
sockë_èb
[
pos
].
sockë
, 
osù_wr£t
Ë&&Ñe£rved->sockë_èb[pos].
£ndbuÊí
 > 0) {

2397 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO1
, 
NULL
, "[eXosù] [TLS] [tid=-1] mesßgê£¡ [Àn=%d]Åÿ[%s][%d]\n%s\n", 
ª£rved
->
sockë_èb
[
pos
].
£ndbuÊí
,Ñe£rved->sockë_èb[pos].
ªmŸe_ù
,Ñe£rved->sockë_èb[pos].
ªmŸe_p‹t
,

2398 
ª£rved
->
sockë_èb
[
pos
].
£ndbuf
));

2399 
	`_és_é_£nd
(
exc⁄ãxt
, 
ª£rved
->
sockë_èb
[
pos
].
s¶_c⁄n
, (c⁄° *Ëª£rved->sockë_èb[pos].
£ndbuf
, (Ëª£rved->sockë_èb[pos].
£ndbuÊí
);

2400 
ª£rved
->
sockë_èb
[
pos
].
£ndbuÊí
 = 0;

2403 i‡(
	`FD_ISSET
(
ª£rved
->
sockë_èb
[
pos
].
sockë
, 
osù_fd£t
)) {

2404 
îr
 = -999;

2405 
max
 = 5;

2407 
îr
 =-999 && 
max
 > 0) {

2408 
îr
 = 
	`_és_é_ªcv
(
exc⁄ãxt
, &
ª£rved
->
sockë_èb
[
pos
]);

2409 
max
--;

2415  
OSIP_SUCCESS
;

2416 
	}
}

2418 
	$_és_é_föd_sockë
(
eXosù_t
 *
exc⁄ãxt
, *
ho°
, 
p‹t
) {

2419 
eXéés
 *
ª£rved
 = (eXéé†*Ë
exc⁄ãxt
->
eXéés_ª£rved
;

2420 
pos
;

2422 
pos
 = 0;Öo†< 
EXOSIP_MAX_SOCKETS
;Öos++) {

2423 i‡(
ª£rved
->
sockë_èb
[
pos
].
sockë
 != 0) {

2424 i‡(0 =
	`osù_°rˇ£cmp
(
ª£rved
->
sockë_èb
[
pos
].
ªmŸe_ù
, 
ho°
Ë&& 
p‹t
 =ª£rved->sockë_èb[pos].
ªmŸe_p‹t
)

2425  
pos
;

2430 
	}
}

2432 
	$_és_é_√w_sockë
(
eXosù_t
 *
exc⁄ãxt
, *
ho°
, 
p‹t
, 
ªåy
, c⁄° *
¢i_£rvî«meödiˇti⁄
) {

2433 
eXéés
 *
ª£rved
 = (eXéé†*Ë
exc⁄ãxt
->
eXéés_ª£rved
;

2434 
pos
;

2435 
ªs
;

2436 
addröfo
 *addröfÿ
NULL
;

2437 
addröfo
 *
curöfo
;

2438 
sock
 = -1;

2439 
s¶_°©e
 = 0;

2440 
sockaddr
 
£À˘ed_ai_addr
;

2441 
sockÀn_t
 
£À˘ed_ai_addæí
;

2443 
§c6ho°
[
NI_MAXHOST
];

2444 
eb
[
ERRBSIZ
];

2446 
	`mem£t
(
§c6ho°
, 0, (src6host));

2448 
£À˘ed_ai_addæí
 = 0;

2449 
	`mem£t
(&
£À˘ed_ai_addr
, 0, (
sockaddr
));

2451 
pos
 = 0;Öo†< 
EXOSIP_MAX_SOCKETS
;Öos++) {

2452 i‡(
ª£rved
->
sockë_èb
[
pos
].
sockë
 == 0) {

2457 i‡(
pos
 =
EXOSIP_MAX_SOCKETS
) {

2458 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] [TLS] [new]Ñeserved->socket_tab is full - cannot createÇew socket\n"));

2462 
ªs
 = 
	`_eXosù_gë_addröfo
(
exc⁄ãxt
, &
addröfo
, 
ho°
, 
p‹t
, 
IPPROTO_TCP
);

2464 i‡(
ªs
)

2467 
curöfo
 = 
addröfo
; curöfo; curöfÿcuröfo->
ai_√xt
) {

2468 
i
;

2470 i‡(
curöfo
->
ai_¥Ÿocﬁ
 && curöfo->ai_¥Ÿocﬁ !
IPPROTO_TCP
)

2473 
ªs
 = 
	`_eXosù_gë«meöfo
((
sockaddr
 *Ë
curöfo
->
ai_addr
, (
sockÀn_t
Ëcuröfo->
ai_addæí
, 
§c6ho°
, 
NI_MAXHOST
, 
NULL
, 0, 
NI_NUMERICHOST
);

2475 i‡(
ªs
 != 0)

2478 
i
 = 
	`_és_é_föd_sockë
(
exc⁄ãxt
, 
§c6ho°
, 
p‹t
);

2480 i‡(
i
 >= 0) {

2481 
	`_eXosù_‰ìaddröfo
(
addröfo
);

2482  
i
;

2486 i‡(
ªåy
 > 0)

2489 
curöfo
 = 
addröfo
; curöfo; curöfÿcuröfo->
ai_√xt
) {

2490 
ty≥
;

2492 i‡(
curöfo
->
ai_¥Ÿocﬁ
 && curöfo->ai_¥Ÿocﬁ !
IPPROTO_TCP
) {

2493 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosù] [TLS] [√w] skùpögÖrŸocﬁ [%d]\n", 
curöfo
->
ai_¥Ÿocﬁ
));

2497 
ªs
 = 
	`_eXosù_gë«meöfo
((
sockaddr
 *Ë
curöfo
->
ai_addr
, (
sockÀn_t
Ëcuröfo->
ai_addæí
, 
§c6ho°
, 
NI_MAXHOST
, 
NULL
, 0, 
NI_NUMERICHOST
);

2499 i‡(
ªs
 == 0) {

2500 
i
 = 
	`_és_é_föd_sockë
(
exc⁄ãxt
, 
§c6ho°
, 
p‹t
);

2502 i‡(
i
 >= 0) {

2503 
	`_eXosù_‰ìaddröfo
(
addröfo
);

2504  
i
;

2507 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO1
, 
NULL
, "[eXosù] [TLS] [√w]Çew bödög wôh [%s][%d]\n", 
§c6ho°
, 
p‹t
));

2510 
ty≥
 = 
curöfo
->
ai_sockty≥
;

2511 #i‡
	`deföed
(
SOCK_CLOEXEC
)

2512 
ty≥
 = 
SOCK_CLOEXEC
 |Åype;

2514 
sock
 = (Ë
	`sockë
(
curöfo
->
ai_Ámûy
, 
ty≥
, curöfo->
ai_¥Ÿocﬁ
);

2516 i‡(
sock
 < 0) {

2517 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosù] [TLS] [√w] c™nŸ cª©êsockë %s\n", 
	`_ex_°ªº‹
(
ex_î∫o
, 
eb
, 
ERRBSIZ
)));

2521 i‡(
curöfo
->
ai_Ámûy
 =
AF_INET6
) {

2522 #ifde‡
IPV6_V6ONLY


2524 i‡(
	`£tsock›t_ùv6⁄ly
(
sock
)) {

2525 
	`_eXosù_˛o£sockë
(
sock
);

2526 
sock
 = -1;

2527 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosù] [TLS] [√w] c™nŸ së sockë o±i⁄ %s\n", 
	`_ex_°ªº‹
(
ex_î∫o
, 
eb
, 
ERRBSIZ
)));

2534 i‡(
ª£rved
->
ai_addr_Àn
 > 0) {

2535 i‡(
exc⁄ãxt
->
ªu£_t˝_p‹t
 > 0) {

2536 
sockaddr_°‹age
 
ai_addr
;

2537 
vÆ›t
 = 1;

2539 
	`£tsock›t
(
sock
, 
SOL_SOCKET
, 
SO_REUSEADDR
, (*Ë&
vÆ›t
, (valopt));

2541 
	`mem˝y
(&
ai_addr
, &
ª£rved
->ai_addr,Ñe£rved->
ai_addr_Àn
);

2543 i‡(
ai_addr
.
ss_Ámûy
 =
AF_INET
)

2544 ((
sockaddr_ö
 *Ë&
ai_addr
)->
sö_p‹t
 = 
	`ht⁄s
(
exc⁄ãxt
->
eXé_å™•‹t
.
¥Ÿo_loˇl_p‹t
);

2547 ((
sockaddr_ö6
 *Ë&
ai_addr
)->
sö6_p‹t
 = 
	`ht⁄s
(
exc⁄ãxt
->
eXé_å™•‹t
.
¥Ÿo_loˇl_p‹t
);

2549 
ªs
 = 
	`böd
(
sock
, (c⁄° 
sockaddr
 *Ë&
ai_addr
, 
ª£rved
->
ai_addr_Àn
);

2551 i‡(
ªs
 < 0) {

2552 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_WARNING
, 
NULL
, "[eXosù] [TLS] [√w] c™nŸ böd sockë [%s] famûy:%d %s\n", 
exc⁄ãxt
->
eXé_å™•‹t
.
¥Ÿo_ifs
, 
ai_addr
.
ss_Ámûy
, 
	`_ex_°ªº‹
(
ex_î∫o
, 
eb
, 
ERRBSIZ
)));

2555 } i‡(
exc⁄ãxt
->
oc_loˇl_addªss
[0] == '\0') {

2556 i‡(
ª£rved
->
ai_addr
.
ss_Ámûy
 =
curöfo
->
ai_Ámûy
) {

2557 
sockaddr_°‹age
 
ai_addr
;

2558 
cou¡
 = 0;

2560 
	`mem˝y
(&
ai_addr
, &
ª£rved
->ai_addr,Ñe£rved->
ai_addr_Àn
);

2562 
cou¡
 < 100) {

2563 i‡(
exc⁄ãxt
->
oc_loˇl_p‹t_ønge
[0] < 1024) {

2564 i‡(
ai_addr
.
ss_Ámûy
 =
AF_INET
)

2565 ((
sockaddr_ö
 *Ë&
ai_addr
)->
sö_p‹t
 = 
	`ht⁄s
(0);

2568 ((
sockaddr_ö6
 *Ë&
ai_addr
)->
sö6_p‹t
 = 
	`ht⁄s
(0);

2571 i‡(
exc⁄ãxt
->
oc_loˇl_p‹t_cuºít
 == 0)

2572 
exc⁄ãxt
->
oc_loˇl_p‹t_cuºít
 =Éxc⁄ãxt->
oc_loˇl_p‹t_ønge
[0];

2575 i‡(
exc⁄ãxt
->
oc_loˇl_p‹t_cuºít
 >exc⁄ãxt->
oc_loˇl_p‹t_ønge
[1])

2576 
exc⁄ãxt
->
oc_loˇl_p‹t_cuºít
 =Éxc⁄ãxt->
oc_loˇl_p‹t_ønge
[0];

2578 i‡(
ai_addr
.
ss_Ámûy
 =
AF_INET
)

2579 ((
sockaddr_ö
 *Ë&
ai_addr
)->
sö_p‹t
 = 
	`ht⁄s
(
exc⁄ãxt
->
oc_loˇl_p‹t_cuºít
);

2582 ((
sockaddr_ö6
 *Ë&
ai_addr
)->
sö6_p‹t
 = 
	`ht⁄s
(
exc⁄ãxt
->
oc_loˇl_p‹t_cuºít
);

2585 
ªs
 = 
	`böd
(
sock
, (c⁄° 
sockaddr
 *Ë&
ai_addr
, 
ª£rved
->
ai_addr_Àn
);

2587 i‡(
ªs
 < 0) {

2588 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_WARNING
, 
NULL
, "[eXosù] [TLS] [√w] c™nŸ böd sockë [%s] famûy:%d (p‹t=%iË%s\n", 
exc⁄ãxt
->
eXé_å™•‹t
.
¥Ÿo_ifs
, 
ai_addr
.
ss_Ámûy
,Éxc⁄ãxt->
oc_loˇl_p‹t_cuºít
,

2589 
	`_ex_°ªº‹
(
ex_î∫o
, 
eb
, 
ERRBSIZ
)));

2590 
cou¡
++;

2592 i‡(
exc⁄ãxt
->
oc_loˇl_p‹t_ønge
[0] >= 1024)

2593 
exc⁄ãxt
->
oc_loˇl_p‹t_cuºít
++;

2598 i‡(
exc⁄ãxt
->
oc_loˇl_p‹t_ønge
[0] >= 1024)

2599 
exc⁄ãxt
->
oc_loˇl_p‹t_cuºít
++;

2606 
cou¡
 = 0;

2608 i‡(
exc⁄ãxt
->
oc_loˇl_p‹t_ønge
[0] < 1024)

2609 
exc⁄ãxt
->
oc_loˇl_p‹t_ønge
[0] = 0;

2611 
cou¡
 < 100) {

2612 
addröfo
 *
oc_addröfo
 = 
NULL
;

2613 
addröfo
 *
oc_curöfo
;

2615 i‡(
exc⁄ãxt
->
oc_loˇl_p‹t_cuºít
 == 0)

2616 
exc⁄ãxt
->
oc_loˇl_p‹t_cuºít
 =Éxc⁄ãxt->
oc_loˇl_p‹t_ønge
[0];

2618 i‡(
exc⁄ãxt
->
oc_loˇl_p‹t_cuºít
 >exc⁄ãxt->
oc_loˇl_p‹t_ønge
[1])

2619 
exc⁄ãxt
->
oc_loˇl_p‹t_cuºít
 =Éxc⁄ãxt->
oc_loˇl_p‹t_ønge
[0];

2621 
	`_eXosù_gë_addröfo
(
exc⁄ãxt
, &
oc_addröfo
,Éxc⁄ãxt->
oc_loˇl_addªss
,Éxc⁄ãxt->
oc_loˇl_p‹t_cuºít
, 
IPPROTO_TCP
);

2623 
oc_curöfo
 = 
oc_addröfo
; oc_curöfo; oc_curöfÿoc_curöfo->
ai_√xt
) {

2624 i‡(
oc_curöfo
->
ai_¥Ÿocﬁ
 && oc_curöfo->ai_¥Ÿocﬁ !
IPPROTO_TCP
) {

2625 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosù] [TLS] [√w] skùpögÖrŸocﬁ [%d]\n", 
oc_curöfo
->
ai_¥Ÿocﬁ
));

2632 i‡(
oc_curöfo
 =
NULL
) {

2633 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosip] [TLS] [new]ÇotábleÅo findányáddressÅo bind\n"));

2634 
	`_eXosù_‰ìaddröfo
(
oc_addröfo
);

2638 
ªs
 = 
	`böd
(
sock
, (c⁄° 
sockaddr
 *Ë
oc_curöfo
->
ai_addr
, (
sockÀn_t
Ëoc_curöfo->
ai_addæí
);

2640 i‡(
ªs
 < 0) {

2641 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_WARNING
, 
NULL
, "[eXosù] [TLS] [√w] c™nŸ böd sockë [%s] famûy:%d (p‹t=%iË%s\n", 
exc⁄ãxt
->
oc_loˇl_addªss
, 
curöfo
->
ai_addr
->
ß_Ámûy
,Éxc⁄ãxt->
oc_loˇl_p‹t_cuºít
,

2642 
	`_ex_°ªº‹
(
ex_î∫o
, 
eb
, 
ERRBSIZ
)));

2643 
cou¡
++;

2645 i‡(
exc⁄ãxt
->
oc_loˇl_p‹t_ønge
[0] != 0)

2646 
exc⁄ãxt
->
oc_loˇl_p‹t_cuºít
++;

2651 
	`_eXosù_‰ìaddröfo
(
oc_addröfo
);

2653 i‡(
exc⁄ãxt
->
oc_loˇl_p‹t_ønge
[0] != 0)

2654 
exc⁄ãxt
->
oc_loˇl_p‹t_cuºít
++;

2661 #i‡
	`deföed
(
HAVE_WINSOCK2_H
)

2663 
n⁄Block
 = 1;

2664 
vÆ
;

2666 
	`io˘lsockë
(
sock
, 
FIONBIO
, &
n⁄Block
);

2668 
vÆ
 = 1;

2670 i‡(
	`£tsock›t
(
sock
, 
SOL_SOCKET
, 
SO_KEEPALIVE
, (*Ë&
vÆ
, (val)) == -1) {

2671 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosip] [TLS] [new] cannot set socket SO_KEEPALIVE\n"));

2674 #ifde‡
HAVE_MSTCPIP_H


2676 
DWORD
 
îr
 = 0L;

2677 
DWORD
 
dwByãs
 = 0L;

2678 
t˝_kì∑live
 
kÆive
 = {0};

2679 
t˝_kì∑live
 
kÆiveOut
 = {0};

2680 
kÆive
.
⁄off
 = 1;

2681 
kÆive
.
kì∑livëime
 = 30000;

2682 
kÆive
.
kì∑liveöãrvÆ
 = 3000;

2683 
îr
 = 
	`WSAIo˘l
(
sock
, 
SIO_KEEPALIVE_VALS
, &
kÆive
, (kÆive), &
kÆiveOut
, (kÆiveOut), &
dwByãs
, 
NULL
, NULL);

2685 i‡(
îr
 != 0) {

2686 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_WARNING
, 
NULL
, "[eXosip] [TLS] [new] cannot set keepalive interval\n"));

2692 
vÆ
;

2694 
vÆ
 = 
	`f˙é
(
sock
, 
F_GETFL
);

2696 i‡(
vÆ
 < 0) {

2697 
	`_eXosù_˛o£sockë
(
sock
);

2698 
sock
 = -1;

2699 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosip] [TLS] [new] cannot get socket flag\n"));

2703 
vÆ
 |
O_NONBLOCK
;

2705 i‡(
	`f˙é
(
sock
, 
F_SETFL
, 
vÆ
) < 0) {

2706 
	`_eXosù_˛o£sockë
(
sock
);

2707 
sock
 = -1;

2708 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosip] [TLS] [new] cannot set socket flag\n"));

2712 #i‡
SO_KEEPALIVE


2713 
vÆ
 = 1;

2715 i‡(
	`£tsock›t
(
sock
, 
SOL_SOCKET
, 
SO_KEEPALIVE
, &
vÆ
, (val)) == -1) {

2720 
vÆ
 = 30;

2721 
	`£tsock›t
(
sock
, 
SOL_TCP
, 
TCP_KEEPIDLE
, &
vÆ
, (val));

2722 
vÆ
 = 2;

2723 
	`£tsock›t
(
sock
, 
SOL_TCP
, 
TCP_KEEPCNT
, &
vÆ
, (val));

2724 
vÆ
 = 10;

2725 
	`£tsock›t
(
sock
, 
SOL_TCP
, 
TCP_KEEPINTVL
, &
vÆ
, (val));

2727 #i‡
SO_NOSIGPIPE


2728 
vÆ
 = 1;

2729 
	`£tsock›t
(
sock
, 
SOL_SOCKET
, 
SO_NOSIGPIPE
, (*Ë&
vÆ
, ());

2732 #i‡
TCP_NODELAY


2733 
vÆ
 = 1;

2735 i‡(
	`£tsock›t
(
sock
, 
IPPROTO_TCP
, 
TCP_NODELAY
, (*Ë&
vÆ
, ()) != 0) {

2736 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosip] [TLS] [new] cannot set socket flag (TCP_NODELAY)\n"));

2742 #i‡
TCP_USER_TIMEOUT


2744 
vÆ
 = 9000;

2745 i‡(
	`£tsock›t
(
sock
, 
IPPROTO_TCP
, 
TCP_USER_TIMEOUT
, &
vÆ
, (val)) != 0) {

2746 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosip] [TLS] [new] cannot set socket flag (TCP_USER_TIMEOUT)\n"));

2751 
	`_eXosù_å™•‹t_£t_ds˝
(
exc⁄ãxt
, 
curöfo
->
ai_Ámûy
, 
sock
);

2753 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosù] [TLS] [√w] sockë [%s] [sock=%d] famûy:%d\n", 
ho°
, 
sock
, 
curöfo
->
ai_Ámûy
));

2754 
ªs
 = 
	`c⁄√˘
(
sock
, 
curöfo
->
ai_addr
, (
sockÀn_t
Ëcuröfo->
ai_addæí
);

2756 i‡(
ªs
 < 0) {

2757 
vÆ›t
 = 
ex_î∫o
;

2759 #i‡
	`deföed
(
HAVE_WINSOCK2_H
)

2761 i‡(
vÆ›t
 !
WSAEWOULDBLOCK
) {

2764 i‡(
vÆ›t
 !
EINPROGRESS
) {

2766 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosù] [TLS] [√w] c™nŸ c⁄√˘ sockë [%s] famûy:%d %s\n", 
ho°
, 
curöfo
->
ai_Ámûy
, 
	`_ex_°ªº‹
(
vÆ›t
, 
eb
, 
ERRBSIZ
)));

2768 
	`_eXosù_˛o£sockë
(
sock
);

2769 
sock
 = -1;

2773 
ªs
 = 
	`_t˝és_é_is_c⁄√˘ed
(
exc⁄ãxt
->
pﬁl_mëhod
, 
sock
);

2775 i‡(
ªs
 > 0) {

2776 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosù] [TLS] [√w] sockë [%s] [sock=%d] [pos=%d] famûy:%d, i¿¥ogªss\n", 
ho°
, 
sock
, 
pos
, 
curöfo
->
ai_Ámûy
));

2777 
£À˘ed_ai_addæí
 = (
sockÀn_t
Ë
curöfo
->
ai_addæí
;

2778 
	`mem˝y
(&
£À˘ed_ai_addr
, 
curöfo
->
ai_addr
, (
sockaddr
));

2781 } i‡(
ªs
 == 0) {

2782 #ifde‡
MULTITASKING_ENABLED


2783 
ª£rved
->
sockë_èb
[
pos
].
ªadSåóm
 = 
NULL
;

2784 
ª£rved
->
sockë_èb
[
pos
].
wrôeSåóm
 = 
NULL
;

2785 
	`CFSåómCª©ePaúWôhSockë
(
kCFAŒoˇt‹DeÁu…
, 
sock
, &
ª£rved
->
sockë_èb
[
pos
].
ªadSåóm
, &ª£rved->sockë_èb[pos].
wrôeSåóm
);

2787 i‡(
ª£rved
->
sockë_èb
[
pos
].
ªadSåóm
 !
NULL
)

2788 
	`CFRódSåómSëPr›îty
(
ª£rved
->
sockë_èb
[
pos
].
ªadSåóm
, 
kCFSåómNëw‹kSîvi˚Ty≥
, 
kCFSåómNëw‹kSîvi˚Ty≥VoIP
);

2790 i‡(
ª£rved
->
sockë_èb
[
pos
].
wrôeSåóm
 !
NULL
)

2791 
	`CFWrôeSåómSëPr›îty
(
ª£rved
->
sockë_èb
[
pos
].
wrôeSåóm
, 
kCFSåómNëw‹kSîvi˚Ty≥
, 
kCFSåómNëw‹kSîvi˚Ty≥VoIP
);

2793 i‡(
	`CFRódSåómO≥n
(
ª£rved
->
sockë_èb
[
pos
].
ªadSåóm
)) {

2794 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosip] [TLS] [new] CFReadStreamOpen Succeeded\n"));

2797 
	`CFWrôeSåómO≥n
(
ª£rved
->
sockë_èb
[
pos
].
wrôeSåóm
);

2799 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosù] [TLS] [√w] sockë [%s] [sock=%d] [pos=%d] famûy:%d, c⁄√˘ed\n", 
ho°
, 
sock
, 
pos
, 
curöfo
->
ai_Ámûy
));

2800 
£À˘ed_ai_addæí
 = 0;

2801 
	`mem˝y
(&
£À˘ed_ai_addr
, 
curöfo
->
ai_addr
, (
sockaddr
));

2802 
s¶_°©e
 = 1;

2806 
	`_eXosù_˛o£sockë
(
sock
);

2807 
sock
 = -1;

2816 
	`_eXosù_‰ìaddröfo
(
addröfo
);

2818 i‡(
sock
 > 0) {

2819 
ª£rved
->
sockë_èb
[
pos
].
sockë
 = 
sock
;

2821 
ª£rved
->
sockë_èb
[
pos
].
ai_addæí
 = 
£À˘ed_ai_addæí
;

2822 
	`mem£t
(&
ª£rved
->
sockë_èb
[
pos
].
ai_addr
, 0, (
sockaddr
));

2824 i‡(
£À˘ed_ai_addæí
 > 0)

2825 
	`mem˝y
(&
ª£rved
->
sockë_èb
[
pos
].
ai_addr
, &
£À˘ed_ai_addr
, 
£À˘ed_ai_addæí
);

2827 i‡(
§c6ho°
[0] == '\0')

2828 
	`osù_°∫˝y
(
ª£rved
->
sockë_èb
[
pos
].
ªmŸe_ù
, 
ho°
, (reserved->socket_tab[pos].remote_ip) - 1);

2831 
	`osù_°∫˝y
(
ª£rved
->
sockë_èb
[
pos
].
ªmŸe_ù
, 
§c6ho°
, (reserved->socket_tab[pos].remote_ip) - 1);

2833 
ª£rved
->
sockë_èb
[
pos
].
ªmŸe_p‹t
 = 
p‹t
;

2834 
ª£rved
->
sockë_èb
[
pos
].
s¶_c⁄n
 = 
NULL
;

2835 
ª£rved
->
sockë_èb
[
pos
].
s¶_°©e
 = ssl_state;

2836 
ª£rved
->
sockë_èb
[
pos
].
s¶_˘x
 = 
NULL
;

2841 i‡(
¢i_£rvî«meödiˇti⁄
 !
NULL
)

2842 
	`osù_°∫˝y
(
ª£rved
->
sockë_èb
[
pos
].
¢i_£rvî«meödiˇti⁄
, sni_servernameindication, (reserved->socket_tab[pos].sni_servernameindication) - 1);

2845 
	`osù_°∫˝y
(
ª£rved
->
sockë_èb
[
pos
].
¢i_£rvî«meödiˇti⁄
, 
ho°
, (reserved->socket_tab[pos].sni_servernameindication) - 1);

2848 
sockaddr_°‹age
 
loˇl_ai_addr
;

2849 
sockÀn_t
 
£À˘ed_ai_addæí
;

2851 
	`mem£t
(&
loˇl_ai_addr
, 0, (
sockaddr_°‹age
));

2852 
£À˘ed_ai_addæí
 = (
sockaddr_°‹age
);

2853 
ªs
 = 
	`gësock«me
(
sock
, (
sockaddr
 *Ë&
loˇl_ai_addr
, &
£À˘ed_ai_addæí
);

2855 i‡(
ªs
 == 0) {

2856 i‡(
loˇl_ai_addr
.
ss_Ámûy
 =
AF_INET
)

2857 
ª£rved
->
sockë_èb
[
pos
].
ïhemîÆ_p‹t
 = 
	`¡ohs
(((
sockaddr_ö
 *Ë&
loˇl_ai_addr
)->
sö_p‹t
);

2860 
ª£rved
->
sockë_èb
[
pos
].
ïhemîÆ_p‹t
 = 
	`¡ohs
(((
sockaddr_ö6
 *Ë&
loˇl_ai_addr
)->
sö6_p‹t
);

2862 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosù] [TLS] [√w] outgoög sockë cª©ed o¿p‹à[%i]\n", 
ª£rved
->
sockë_èb
[
pos
].
ïhemîÆ_p‹t
));

2866 
ª£rved
->
sockë_èb
[
pos
].
t˝_ö¥ogªss_max_timeout
 = 
	`osù_gësy°emtime
(
NULL
) + 32;

2868 #ifde‡
HAVE_SYS_EPOLL_H


2870 i‡(
exc⁄ãxt
->
pﬁl_mëhod
 =
EXOSIP_USE_EPOLL_LT
) {

2871 
ïﬁl_evít
 
ev
;

2873 
	`mem£t
(&
ev
, 0, (
ïﬁl_evít
));

2875 i‡(
ª£rved
->
sockë_èb
[
pos
].
s¶_°©e
 == 1)

2876 
ev
.
evíts
 = 
EPOLLIN
;

2879 
ev
.
evíts
 = 
EPOLLIN
 | 
EPOLLOUT
;

2881 
ev
.
d©a
.
fd
 = 
sock
;

2882 
ªs
 = 
	`ïﬁl_˘l
(
exc⁄ãxt
->
ïfd
, 
EPOLL_CTL_ADD
, 
sock
, &
ev
);

2884 i‡(
ªs
 < 0) {

2885 
	`_és_é_˛o£_socköfo
(
exc⁄ãxt
, &
ª£rved
->
sockë_èb
[
pos
]);

2892  
pos
;

2896 
	}
}

2898 
	$_és_é_£nd
(
eXosù_t
 *
exc⁄ãxt
, 
SSL
 *
s¶
, c⁄° *
mesßge
, 
Àngth
) {

2899 
i
 = 0;

2901 
Àngth
 > 0) {

2902 
i
 = 
	`SSL_wrôe
(
s¶
, (c⁄° *Ë
mesßge
, (Ë
Àngth
);

2904 i‡(
i
 <= 0) {

2905 
i
 = 
	`SSL_gë_îr‹
(
s¶
, i);

2907 i‡(
i
 =
SSL_ERROR_WANT_READ
 || i =
SSL_ERROR_WANT_WRITE
)

2910 
	`_és_¥öt_s¶_îr‹
(
i
);

2915 
Àngth
 =Üígth - 
i
;

2916 
mesßge
 +
i
;

2919  
OSIP_SUCCESS
;

2920 
	}
}

2922 
	$_és_é_upd©e_c⁄è˘
(
eXosù_t
 *
exc⁄ãxt
, 
osù_mesßge_t
 *
ªq
, *
«âed_ù
, 
«âed_p‹t
) {

2923 i‡(
ªq
->
≠∂iˇti⁄_d©a
 != (*) 0x1)

2924  
OSIP_SUCCESS
;

2926 i‡((
«âed_ù
 !
NULL
 &&Ç©ãd_ù[0] !'\0'Ë|| 
«âed_p‹t
 > 0) {

2927 
osù_li°_ôî©‹_t
 
ô
;

2928 
osù_c⁄è˘_t
 *
co
 = (osù_c⁄è˘_à*Ë
	`osù_li°_gë_fú°
(&
ªq
->
c⁄è˘s
, &
ô
);

2930 
co
 !
NULL
) {

2931 i‡(
co
 !
NULL
 && co->
uæ
 !NULL && co->uæ->
ho°
 != NULL) {

2932 i‡(
«âed_p‹t
 > 0) {

2933 i‡(
co
->
uæ
->
p‹t
)

2934 
	`osù_‰ì
(
co
->
uæ
->
p‹t
);

2936 
co
->
uæ
->
p‹t
 = (*Ë
	`osù_mÆloc
(10);

2937 
	`¢¥ötf
(
co
->
uæ
->
p‹t
, 9, "%i", 
«âed_p‹t
);

2938 
	`osù_mesßge_f‹˚_upd©e
(
ªq
);

2941 i‡(
«âed_ù
 !
NULL
 &&Çatted_ip[0] != '\0') {

2942 
	`osù_‰ì
(
co
->
uæ
->
ho°
);

2943 
co
->
uæ
->
ho°
 = 
	`osù_°rdup
(
«âed_ù
);

2944 
	`osù_mesßge_f‹˚_upd©e
(
ªq
);

2948 
co
 = (
osù_c⁄è˘_t
 *Ë
	`osù_li°_gë_√xt
(&
ô
);

2952  
OSIP_SUCCESS
;

2953 
	}
}

2955 
	$_és_é_buûd_mesßge
(
eXosù_t
 *
exc⁄ãxt
, 
osù_mesßge_t
 *
sù
, 
pos
, *
ho°
, **
mesßge
, 
size_t
 *
Àngth
) {

2956 
eXéés
 *
ª£rved
 = (eXéé†*Ë
exc⁄ãxt
->
eXéés_ª£rved
;

2957 
i
;

2959 
	`_eXosù_ªque°_vüm™agî
(
exc⁄ãxt
, 
sù
, 
ª£rved
->
sockë_èb
[
pos
].
ai_addr
.
ß_Ámûy
, 
IPPROTO_TCP
, 
NULL
,Ñe£rved->sockë_èb[pos].
ïhemîÆ_p‹t
,Ñe£rved->sockë_èb[pos].
sockë
, 
ho°
);

2961 i‡(
exc⁄ãxt
->
u£_ïhemîÆ_p‹t
 == 1)

2962 
	`_eXosù_mesßge_c⁄è˘m™agî
(
exc⁄ãxt
, 
sù
, 
ª£rved
->
sockë_èb
[
pos
].
ai_addr
.
ß_Ámûy
, 
IPPROTO_TCP
, 
NULL
,Ñe£rved->sockë_èb[pos].
ïhemîÆ_p‹t
,Ñe£rved->sockë_èb[pos].
sockë
, 
ho°
);

2965 
	`_eXosù_mesßge_c⁄è˘m™agî
(
exc⁄ãxt
, 
sù
, 
ª£rved
->
sockë_èb
[
pos
].
ai_addr
.
ß_Ámûy
, 
IPPROTO_TCP
, 
NULL
,Éxc⁄ãxt->
eXé_å™•‹t
.
¥Ÿo_loˇl_p‹t
,Ñe£rved->sockë_èb[pos].
sockë
, 
ho°
);

2967 i‡(
exc⁄ãxt
->
és_fúewÆl_ù
[0] !'\0' ||Éxc⁄ãxt->
auto_masquîade_c⁄è˘
 > 0)

2968 
	`_és_é_upd©e_c⁄è˘
(
exc⁄ãxt
, 
sù
, 
ª£rved
->
sockë_èb
[
pos
].
«âed_ù
,Ñe£rved->sockë_èb[pos].
«âed_p‹t
);

2973 
osù_rouã_t
 *
rouã
 = 
NULL
;

2974 
osù_gíîic_∑øm_t
 *
èg
 = 
NULL
;

2976 i‡(
exc⁄ãxt
->
ªmove_¥îouã£t
 > 0) {

2977 
	`osù_mesßge_gë_rouã
(
sù
, 0, &
rouã
);

2978 
	`osù_to_gë_èg
(
sù
->
to
, &
èg
);

2980 i‡(
èg
 =
NULL
 && 
rouã
 !NULL &&Ñouã->
uæ
 != NULL) {

2981 
	`osù_li°_ªmove
(&
sù
->
rouãs
, 0);

2982 
	`osù_mesßge_f‹˚_upd©e
(
sù
);

2986 
i
 = 
	`osù_mesßge_to_°r
(
sù
, 
mesßge
, 
Àngth
);

2988 i‡(
èg
 =
NULL
 && 
rouã
 !NULL &&Ñouã->
uæ
 != NULL) {

2989 
	`osù_li°_add
(&
sù
->
rouãs
, 
rouã
, 0);

2992  
i
;

2993 
	}
}

2995 
	$és_é_£nd_mesßge
(
eXosù_t
 *
exc⁄ãxt
, 
osù_å™ß˘i⁄_t
 *
å
, 
osù_mesßge_t
 *
sù
, *
ho°
, 
p‹t
, 
out_sockë
) {

2996 
eXéés
 *
ª£rved
 = (eXéé†*Ë
exc⁄ãxt
->
eXéés_ª£rved
;

2997 
size_t
 
Àngth
 = 0;

2998 *
mesßge
;

2999 
i
;

3001 
pos
;

3002 
osù_«±r_t
 *
«±r_ªc‹d
 = 
NULL
;

3004 
SSL
 *
s¶
 = 
NULL
;

3005 
tid
 = -1;

3007 i‡(
å
 !
NULL
)

3008 
tid
 = 
å
->
å™ß˘i⁄id
;

3010 i‡(
ª£rved
 =
NULL
) {

3011 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosù] [TLS] [tid=%i] wr⁄g sèã: cª©êå™•‹àœyî fú°\n", 
tid
));

3012  
OSIP_WRONG_STATE
;

3015 i‡(
ho°
 =
NULL
) {

3016 
ho°
 = 
sù
->
ªq_uri
->host;

3018 i‡(
sù
->
ªq_uri
->
p‹t
 !
NULL
)

3019 
p‹t
 = 
	`osù_©oi
(
sù
->
ªq_uri
->port);

3022 
p‹t
 = 5061;

3025 i‡(
p‹t
 == 5060)

3026 
p‹t
 = 5061;

3028 
i
 = 
	`_é_ªsﬁv_«±r_de°ö©i⁄
(
exc⁄ãxt
, 
å
, 
sù
, &
ho°
, &
p‹t
, &
«±r_ªc‹d
);

3029 i‡(
i
 =
OSIP_SUCCESS
 + 1)

3030  
i
;

3031 i‡(
i
 < 
OSIP_SUCCESS
)

3032  
i
;

3034 
pos
 = 0;Öo†< 
EXOSIP_MAX_SOCKETS
;Öos++) {

3035 i‡(
ª£rved
->
sockë_èb
[
pos
].
övÆid
 > 0) {

3036 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosù] [TLS] [£nd] sockë info:[%s][%d] [sock=%d] [pos=%d] m™uÆÑe£t\n", 
ª£rved
->
sockë_èb
[
pos
].
ªmŸe_ù
,Ñe£rved->sockë_èb[pos].
ªmŸe_p‹t
,

3037 
ª£rved
->
sockë_èb
[
pos
].
sockë
,Öos));

3038 
	`_eXosù_m¨k_ªgi°øti⁄_expúed
(
exc⁄ãxt
, 
ª£rved
->
sockë_èb
[
pos
].
ªg_ˇŒ_id
);

3039 
	`_és_é_˛o£_socköfo
(
exc⁄ãxt
, &
ª£rved
->
sockë_èb
[
pos
]);

3044 i‡(
out_sockë
 > 0) {

3045 
pos
 = 0;Öo†< 
EXOSIP_MAX_SOCKETS
;Öos++) {

3046 i‡(
ª£rved
->
sockë_èb
[
pos
].
sockë
 != 0) {

3047 i‡(
ª£rved
->
sockë_èb
[
pos
].
sockë
 =
out_sockë
) {

3048 
out_sockë
 = 
ª£rved
->
sockë_èb
[
pos
].
sockë
;

3049 
s¶
 = 
ª£rved
->
sockë_èb
[
pos
].
s¶_c⁄n
;

3050 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO1
, 
NULL
, "[eXosù] [TLS] [tid=%i]Ñeusög REQUEST c⁄√˘i⁄Åÿ[%s][%d]\n", 
tid
, 
ª£rved
->
sockë_èb
[
pos
].
ªmŸe_ù
,Ñe£rved->sockë_èb[pos].
ªmŸe_p‹t
));

3056 i‡(
pos
 =
EXOSIP_MAX_SOCKETS
) {

3057 
out_sockë
 = 0;

3058 i‡(
å
 !
NULL
)

3059 
	`osù_å™ß˘i⁄_£t_out_sockë
(
å
, 0);

3062 i‡(
out_sockë
 > 0) {

3063 
pos2
;

3072 
pos2
 = 
	`_és_é_föd_sockë
(
exc⁄ãxt
, 
ho°
, 
p‹t
);

3074 i‡(
pos2
 >= 0) {

3075 
out_sockë
 = 
ª£rved
->
sockë_èb
[
pos2
].
sockë
;

3076 
pos
 = 
pos2
;

3077 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO1
, 
NULL
, "[eXosù] [TLS] [tid=%i]Ñeusög c⁄√˘i⁄ --wôhÉxa˘Ö‹t--Åÿ[%s][%d]\n", 
tid
, 
ª£rved
->
sockë_èb
[
pos
].
ªmŸe_ù
,Ñe£rved->sockë_èb[pos].
ªmŸe_p‹t
));

3078 i‡(
å
 !
NULL
)

3079 
	`osù_å™ß˘i⁄_£t_out_sockë
(
å
, 
out_sockë
);

3085 i‡(
out_sockë
 <= 0) {

3086 
pos
 = 
	`_és_é_föd_sockë
(
exc⁄ãxt
, 
ho°
, 
p‹t
);

3089 i‡(
pos
 < 0) {

3090 c⁄° *
¢i
 = 
NULL
;

3092 i‡(
«±r_ªc‹d
 !
NULL
) {

3093 
¢i
 = 
«±r_ªc‹d
->
domaö
;

3095 i‡(
¢i
 =
NULL
) {

3102 
i
 = 0; i < 
MAX_EXOSIP_DNS_ENTRY
; i++) {

3103 i‡(
exc⁄ãxt
->
dns_íåõs
[
i
].
ho°
[0] !'\0' && 0 =
	`osù_°rˇ£cmp
”xc⁄ãxt->dns_íåõs[i].
ù
, host)) {

3105 
¢i
 = 
exc⁄ãxt
->
dns_íåõs
[
i
].
ho°
;

3111 i‡(
¢i
 !
NULL
) {

3112 c⁄° *
domaö
 = 
	`_eXosù_dnsutûs_föd_¢i
(
exc⁄ãxt
, 
¢i
);

3113 i‡(
domaö
 !
NULL
)

3114 
¢i
 = 
domaö
;

3118 i‡(
å
 =
NULL
) {

3119 
pos
 = 
	`_és_é_√w_sockë
(
exc⁄ãxt
, 
ho°
, 
p‹t
, 0, 
¢i
);

3120 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO1
, 
NULL
, "[eXosù] [TLS] [tid=%i] mesßgêouào‡å™ß˘i⁄:ÅryögÅÿ£ndÅÿ[%s][%d]\n", 
tid
, 
ho°
, 
p‹t
));

3122 i‡(
pos
 < 0) {

3127 
pos
 = 
	`_és_é_√w_sockë
(
exc⁄ãxt
, 
ho°
, 
p‹t
, 0, 
¢i
);

3129 i‡(
pos
 < 0) {

3130 i‡(
	`MSG_IS_REGISTER
(
sù
Ë|| 
	`MSG_IS_OPTIONS
(sip)) {

3132 
	`_eXosù_m¨k_ªgi°øti⁄_expúed
(
exc⁄ãxt
, 
sù
->
ˇŒ_id
->
numbî
);

3135 i‡(
å
 !
NULL
)

3136 
	`osù_å™ß˘i⁄_£t_out_sockë
(
å
, 0);

3142 i‡(
pos
 >= 0) {

3143 
out_sockë
 = 
ª£rved
->
sockë_èb
[
pos
].
sockë
;

3144 
s¶
 = 
ª£rved
->
sockë_èb
[
pos
].
s¶_c⁄n
;

3145 i‡(
å
 !
NULL
)

3146 
	`osù_å™ß˘i⁄_£t_out_sockë
(
å
, 
out_sockë
);

3150 i‡(
out_sockë
 <= 0) {

3151 i‡(
«±r_ªc‹d
 !
NULL
 && 
	`MSG_IS_REGISTER
(
sù
)) {

3153 
	`_eXosù_m¨k_ªgi°øti⁄_expúed
(
exc⁄ãxt
, 
sù
->
ˇŒ_id
->
numbî
);

3156 i‡(
å
 !
NULL
)

3157 
	`osù_å™ß˘i⁄_£t_out_sockë
(
å
, 0);

3161 i‡(
	`MSG_IS_REGISTER
(
sù
)) {

3163 
	`¢¥ötf
(
ª£rved
->
sockë_èb
[
pos
].
ªg_ˇŒ_id
, ‘e£rved->sockë_èb[pos].ªg_ˇŒ_id), "%s", 
sù
->
ˇŒ_id
->
numbî
);

3166 i‡(
ª£rved
->
sockë_èb
[
pos
].
s¶_°©e
 < 3) {

3167 
time_t
 
now
;

3169 i‡(
å
 !
NULL
) {

3170 
now
 = 
	`osù_gësy°emtime
(
NULL
);

3172 i‡(
å
 !
NULL
 && 
now
 -År->
búth_time
 > 10) {

3173 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosù] [TLS] [tid=%i] sockë [%s] [sock=%d] [pos=%d]Åimeout\n", 
tid
, 
ho°
, 
out_sockë
, 
pos
));

3174 
	`_eXosù_m¨k_ªgi°øti⁄_expúed
(
exc⁄ãxt
, 
ª£rved
->
sockë_èb
[
pos
].
ªg_ˇŒ_id
);

3175 i‡(
«±r_ªc‹d
 !
NULL
 && (
	`MSG_IS_REGISTER
(
sù
Ë|| 
	`MSG_IS_OPTIONS
(sip))) {

3176 i‡(
pos
 >= 0)

3177 
	`_és_é_˛o£_socköfo
(
exc⁄ãxt
, &
ª£rved
->
sockë_èb
[
pos
]);

3180 i‡(
å
 !
NULL
)

3181 
	`osù_å™ß˘i⁄_£t_out_sockë
(
å
, 0);

3185 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosù] [TLS] [tid=%i] sockë [%s] [sock=%d] [pos=%d]ÇŸ yëÑódy\n", 
tid
, 
ho°
, 
out_sockë
, 
pos
));

3187 i‡(
å
 =
NULL
) {

3189 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_WARNING
, 
NULL
, "[eXosù] [TLS] [tid=%i]á c⁄√˘i⁄ i†missög f‹Åÿ[%s][%d]\n", 
tid
, 
ho°
, 
p‹t
));

3190 
	`_eXosù_m¨k_ªgi°øti⁄_expúed
(
exc⁄ãxt
, 
ª£rved
->
sockë_èb
[
pos
].
ªg_ˇŒ_id
);

3192 
i
 = 
	`_és_é_buûd_mesßge
(
exc⁄ãxt
, 
sù
, 
pos
, 
ho°
, &
mesßge
, &
Àngth
);

3194 i‡(
i
 !0 || 
Àngth
 <= 0) {

3195 
	`osù_‰ì
(
mesßge
);

3198 i‡(
ª£rved
->
sockë_èb
[
pos
].
£ndbuÊí
 + 
Àngth
 + 1 >Ñe£rved->sockë_èb[pos].
£ndbufsize
) {

3199 
ª£rved
->
sockë_èb
[
pos
].
£ndbuf
 = 
	`osù_ªÆloc
‘e£rved->sockë_èb[pos].£ndbuf,Ñe£rved->sockë_èb[pos].
£ndbuÊí
 + 
Àngth
 + 1);

3200 
ª£rved
->
sockë_èb
[
pos
].
£ndbufsize
 =Ñe£rved->sockë_èb[pos].
£ndbuÊí
 + 
Àngth
 + 1;

3202 
	`mem˝y
(
ª£rved
->
sockë_èb
[
pos
].
£ndbuf
 +Ñe£rved->sockë_èb[pos].
£ndbuÊí
, 
mesßge
, 
Àngth
 + 1);

3203 
ª£rved
->
sockë_èb
[
pos
].
£ndbuÊí
 =Ñe£rved->sockë_èb[pos].£ndbuÊí + 
Àngth
;

3205 
	`osù_‰ì
(
mesßge
);

3210 
s¶
 = 
ª£rved
->
sockë_èb
[
pos
].
s¶_c⁄n
;

3212 i‡(
s¶
 =
NULL
) {

3213 i‡(
å
 !
NULL
)

3214 
	`osù_å™ß˘i⁄_£t_out_sockë
(
å
, 0);

3218 #ifde‡
MULTITASKING_ENABLED


3220 i‡(
ª£rved
->
sockë_èb
[
pos
].
ªadSåóm
 =
NULL
) {

3221 
ª£rved
->
sockë_èb
[
pos
].
ªadSåóm
 = 
NULL
;

3222 
ª£rved
->
sockë_èb
[
pos
].
wrôeSåóm
 = 
NULL
;

3223 
	`CFSåómCª©ePaúWôhSockë
(
kCFAŒoˇt‹DeÁu…
, 
ª£rved
->
sockë_èb
[
pos
].
sockë
, &ª£rved->sockë_èb[pos].
ªadSåóm
, &ª£rved->sockë_èb[pos].
wrôeSåóm
);

3225 i‡(
ª£rved
->
sockë_èb
[
pos
].
ªadSåóm
 !
NULL
)

3226 
	`CFRódSåómSëPr›îty
(
ª£rved
->
sockë_èb
[
pos
].
ªadSåóm
, 
kCFSåómNëw‹kSîvi˚Ty≥
, 
kCFSåómNëw‹kSîvi˚Ty≥VoIP
);

3228 i‡(
ª£rved
->
sockë_èb
[
pos
].
wrôeSåóm
 !
NULL
)

3229 
	`CFWrôeSåómSëPr›îty
(
ª£rved
->
sockë_èb
[
pos
].
wrôeSåóm
, 
kCFSåómNëw‹kSîvi˚Ty≥
, 
kCFSåómNëw‹kSîvi˚Ty≥VoIP
);

3231 i‡(
	`CFRódSåómO≥n
(
ª£rved
->
sockë_èb
[
pos
].
ªadSåóm
)) {

3232 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosù] [TLS] [tid=%i] CFRódSåómO≥¿Suc˚eded\n", 
tid
));

3235 
	`CFWrôeSåómO≥n
(
ª£rved
->
sockë_èb
[
pos
].
wrôeSåóm
);

3240 
i
 = 
	`_és_é_buûd_mesßge
(
exc⁄ãxt
, 
sù
, 
pos
, 
ho°
, &
mesßge
, &
Àngth
);

3242 i‡(
i
 !0 || 
Àngth
 <= 0) {

3243 i‡(
å
 !
NULL
)

3244 
	`osù_å™ß˘i⁄_£t_out_sockë
(
å
, 0);

3248 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO1
, 
NULL
, "[eXosù] [TLS] [tid=%i] mesßgê£¡ [Àn=%d]Åÿ[%s][%d]\n%s\n", 
tid
, 
Àngth
, 
ho°
, 
p‹t
, 
mesßge
));

3250 i‡(
pos
 >0 && 
exc⁄ãxt
->
íabÀ_dns_ˇche
 =1 && 
	`osù_°rˇ£cmp
(
ho°
, 
ª£rved
->
sockë_èb
[pos].
ªmŸe_ù
Ë!0 && 
	`MSG_IS_REQUEST
(
sù
)) {

3251 i‡(
	`MSG_IS_REGISTER
(
sù
)) {

3252 
eXosù_dns_ˇche
 
íåy
;

3254 
	`mem£t
(&
íåy
, 0, (
eXosù_dns_ˇche
));

3255 
	`¢¥ötf
(
íåy
.
ho°
, (entry.host), "%s", host);

3256 
	`¢¥ötf
(
íåy
.
ù
, ”¡ry.ù), "%s", 
ª£rved
->
sockë_èb
[
pos
].
ªmŸe_ù
);

3257 
	`eXosù_£t_›ti⁄
(
exc⁄ãxt
, 
EXOSIP_OPT_ADD_DNS_CACHE
, (*Ë&
íåy
);

3261 
i
 = 
	`_és_é_£nd
(
exc⁄ãxt
, 
s¶
, (c⁄° *Ë
mesßge
, (Ë
Àngth
);

3263 i‡(
i
 < 0) {

3264 i‡(
pos
 >= 0) {

3265 
	`_eXosù_m¨k_ªgi°øti⁄_expúed
(
exc⁄ãxt
, 
ª£rved
->
sockë_èb
[
pos
].
ªg_ˇŒ_id
);

3266 
	`_és_é_˛o£_socköfo
(
exc⁄ãxt
, &
ª£rved
->
sockë_èb
[
pos
]);

3268 i‡(
å
 !
NULL
)

3269 
	`osù_å™ß˘i⁄_£t_out_sockë
(
å
, 0);

3272 i‡(
i
 =0 && 
å
 !
NULL
 && 
	`MSG_IS_REGISTER
(
sù
Ë&& 
pos
 >= 0) {

3274 
ª£rved
->
sockë_èb
[
pos
].
t˝_max_timeout
 = 
	`osù_gësy°emtime
(
NULL
) + 32;

3277 
	`osù_‰ì
(
mesßge
);

3278  
OSIP_SUCCESS
;

3279 
	}
}

3281 
	$és_é_kì∑live
(
eXosù_t
 *
exc⁄ãxt
) {

3282 
eXéés
 *
ª£rved
 = (eXéé†*Ë
exc⁄ãxt
->
eXéés_ª£rved
;

3283 
buf
[5] = "\r\n\r\n";

3284 
pos
;

3285 
i
;

3287 i‡(
ª£rved
 =
NULL
) {

3288 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] [TLS] wrong state: createÅransportÜayer first\n"));

3289  
OSIP_WRONG_STATE
;

3292 i‡(
ª£rved
->
és_sockë
 <= 0)

3293  
OSIP_UNDEFINED_ERROR
;

3295 
pos
 = 0;Öo†< 
EXOSIP_MAX_SOCKETS
;Öos++) {

3296 i‡(
exc⁄ãxt
->
ka_öãrvÆ
 > 0) {

3297 i‡(
ª£rved
->
sockë_èb
[
pos
].
sockë
 > 0 &&Ñe£rved->sockë_èb[pos].
s¶_°©e
 > 2) {

3301 
i
 = 
	`SSL_wrôe
(
ª£rved
->
sockë_èb
[
pos
].
s¶_c⁄n
, (c⁄° *Ë
buf
, 4);

3303 i‡(
i
 <= 0) {

3304 
i
 = 
	`SSL_gë_îr‹
(
ª£rved
->
sockë_èb
[
pos
].
s¶_c⁄n
, i);

3306 i‡(
i
 =
SSL_ERROR_WANT_READ
 || i =
SSL_ERROR_WANT_WRITE
)

3309 
	`_és_¥öt_s¶_îr‹
(
i
);

3312 
ª£rved
->
sockë_èb
[
pos
].
pög_rfc5626
 = 
	`osù_gësy°emtime
(
NULL
) + 9;

3313 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_WARNING
, 
NULL
, "[eXosù] [TLS] [kì∑live] [ªt=%i] sockë [%s] [sock=%d] [pos=%d]\n", 
i
, 
ª£rved
->
sockë_èb
[
pos
].
ªmŸe_ù
,Ñe£rved->sockë_èb[pos].
sockë
,Öos));

3320  
OSIP_SUCCESS
;

3321 
	}
}

3323 
	$és_é_£t_sockë
(
eXosù_t
 *
exc⁄ãxt
, 
sockë
) {

3324 
eXéés
 *
ª£rved
 = (eXéé†*Ë
exc⁄ãxt
->
eXéés_ª£rved
;

3326 i‡(
ª£rved
 =
NULL
) {

3327 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] [TLS] wrong state: createÅransportÜayer first\n"));

3328  
OSIP_WRONG_STATE
;

3331 
ª£rved
->
és_sockë
 = 
sockë
;

3333  
OSIP_SUCCESS
;

3334 
	}
}

3336 
	$és_é_masquîade_c⁄è˘
(
eXosù_t
 *
exc⁄ãxt
, c⁄° *
public_addªss
, 
p‹t
) {

3337 i‡(
public_addªss
 =
NULL
 ||Öublic_address[0] == '\0') {

3338 
	`mem£t
(
exc⁄ãxt
->
és_fúewÆl_ù
, '\0', (excontext->tls_firewall_ip));

3339 
	`mem£t
(
exc⁄ãxt
->
és_fúewÆl_p‹t
, '\0', (excontext->tls_firewall_port));

3340  
OSIP_SUCCESS
;

3343 
	`¢¥ötf
(
exc⁄ãxt
->
és_fúewÆl_ù
, ”xc⁄ãxt->és_fúewÆl_ù), "%s", 
public_addªss
);

3345 i‡(
p‹t
 > 0) {

3346 
	`¢¥ötf
(
exc⁄ãxt
->
és_fúewÆl_p‹t
, ”xc⁄ãxt->és_fúewÆl_p‹t), "%i", 
p‹t
);

3349  
OSIP_SUCCESS
;

3350 
	}
}

3352 
	$és_é_gë_masquîade_c⁄è˘
(
eXosù_t
 *
exc⁄ãxt
, *
ù
, 
ù_size
, *
p‹t
, 
p‹t_size
) {

3353 
eXéés
 *
ª£rved
 = (eXéé†*Ë
exc⁄ãxt
->
eXéés_ª£rved
;

3355 
	`mem£t
(
ù
, 0, 
ù_size
);

3356 
	`mem£t
(
p‹t
, 0, 
p‹t_size
);

3358 i‡(
ª£rved
 =
NULL
) {

3359 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] [TLS] wrong state: createÅransportÜayer first\n"));

3360  
OSIP_WRONG_STATE
;

3363 i‡(
exc⁄ãxt
->
és_fúewÆl_ù
[0] != '\0')

3364 
	`¢¥ötf
(
ù
, 
ù_size
, "%s", 
exc⁄ãxt
->
és_fúewÆl_ù
);

3366 i‡(
exc⁄ãxt
->
és_fúewÆl_p‹t
[0] != '\0')

3367 
	`¢¥ötf
(
p‹t
, 
p‹t_size
, "%s", 
exc⁄ãxt
->
és_fúewÆl_p‹t
);

3369  
OSIP_SUCCESS
;

3370 
	}
}

3372 
	$és_é_upd©e_c⁄è˘
(
eXosù_t
 *
exc⁄ãxt
, 
osù_mesßge_t
 *
ªq
) {

3373 
ªq
->
≠∂iˇti⁄_d©a
 = (*) 0x1;

3374  
OSIP_SUCCESS
;

3375 
	}
}

3377 
	$és_é_check_Æl_c⁄√˘i⁄
(
eXosù_t
 *
exc⁄ãxt
) {

3378 
eXéés
 *
ª£rved
 = (eXéé†*Ë
exc⁄ãxt
->
eXéés_ª£rved
;

3379 
pos
;

3380 
i
;

3382 i‡(
ª£rved
 =
NULL
) {

3383 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] [TLS] wrong state: createÅransportÜayer first\n"));

3384  
OSIP_WRONG_STATE
;

3387 i‡(
ª£rved
->
és_sockë
 <= 0)

3388  
OSIP_UNDEFINED_ERROR
;

3390 
pos
 = 0;Öo†< 
EXOSIP_MAX_SOCKETS
;Öos++) {

3391 i‡(
ª£rved
->
sockë_èb
[
pos
].
sockë
 > 0) {

3392 
i
 = 
	`_t˝és_é_is_c⁄√˘ed
(
exc⁄ãxt
->
pﬁl_mëhod
, 
ª£rved
->
sockë_èb
[
pos
].
sockë
);

3394 i‡(
i
 > 0) {

3395 i‡(
ª£rved
->
sockë_èb
[
pos
].
sockë
 > 0 &&Ñe£rved->sockë_èb[pos].
t˝_ö¥ogªss_max_timeout
 > 0) {

3396 
time_t
 
now
 = 
	`osù_gësy°emtime
(
NULL
);

3398 i‡(
now
 > 
ª£rved
->
sockë_èb
[
pos
].
t˝_ö¥ogªss_max_timeout
) {

3399 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosip] [TLS] [checkall] socket is inÖrogress since 32 seconds / close socket\n"));

3400 
ª£rved
->
sockë_èb
[
pos
].
t˝_ö¥ogªss_max_timeout
 = 0;

3401 
	`_eXosù_m¨k_ªgi°øti⁄_expúed
(
exc⁄ãxt
, 
ª£rved
->
sockë_èb
[
pos
].
ªg_ˇŒ_id
);

3402 
	`_és_é_˛o£_socköfo
(
exc⁄ãxt
, &
ª£rved
->
sockë_èb
[
pos
]);

3407 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosù] [TLS] [checkÆl] sockë info:[%s][%d] [sock=%d] [pos=%d] i¿¥ogªss\n", 
ª£rved
->
sockë_èb
[
pos
].
ªmŸe_ù
,Ñe£rved->sockë_èb[pos].
ªmŸe_p‹t
,

3408 
ª£rved
->
sockë_èb
[
pos
].
sockë
,Öos));

3411 } i‡(
i
 == 0) {

3412 #ifde‡
HAVE_SYS_EPOLL_H


3413 i‡(
exc⁄ãxt
->
pﬁl_mëhod
 =
EXOSIP_USE_EPOLL_LT
 && 
ª£rved
->
sockë_èb
[
pos
].
t˝_ö¥ogªss_max_timeout
 > 0) {

3414 
ïﬁl_evít
 
ev
;

3416 
	`mem£t
(&
ev
, 0, (
ïﬁl_evít
));

3417 
ev
.
evíts
 = 
EPOLLIN
;

3418 
ev
.
d©a
.
fd
 = 
ª£rved
->
sockë_èb
[
pos
].
sockë
;

3419 
	`ïﬁl_˘l
(
exc⁄ãxt
->
ïfd
, 
EPOLL_CTL_MOD
, 
ª£rved
->
sockë_èb
[
pos
].
sockë
, &
ev
);

3423 
ª£rved
->
sockë_èb
[
pos
].
t˝_ö¥ogªss_max_timeout
 = 0;

3425 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosù] [TLS] [checkÆl] sockë info:[%s][%d] [sock=%d] [pos=%d] c⁄√˘ed\n", 
ª£rved
->
sockë_èb
[
pos
].
ªmŸe_ù
,Ñe£rved->sockë_èb[pos].
ªmŸe_p‹t
,

3426 
ª£rved
->
sockë_èb
[
pos
].
sockë
,Öos));

3428 i‡(
ª£rved
->
sockë_èb
[
pos
].
sockë
 > 0 &&Ñe£rved->sockë_èb[pos].
s¶_°©e
 > 2 &&Ñe£rved->sockë_èb[pos].
t˝_max_timeout
 > 0) {

3429 
time_t
 
now
 = 
	`osù_gësy°emtime
(
NULL
);

3431 i‡(
now
 > 
ª£rved
->
sockë_èb
[
pos
].
t˝_max_timeout
) {

3432 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosip] [TLS] [checkall] weÉxpectedáÑeply onÉstablished sockets / close socket\n"));

3433 
ª£rved
->
sockë_èb
[
pos
].
t˝_max_timeout
 = 0;

3434 
	`_eXosù_m¨k_ªgi°øti⁄_expúed
(
exc⁄ãxt
, 
ª£rved
->
sockë_èb
[
pos
].
ªg_ˇŒ_id
);

3435 
	`_és_é_˛o£_socköfo
(
exc⁄ãxt
, &
ª£rved
->
sockë_èb
[
pos
]);

3440 i‡(
ª£rved
->
sockë_èb
[
pos
].
s¶_°©e
 == 0 ||Ñeserved->socket_tab[pos].ssl_state == 1) {

3441 
ª£rved
->
sockë_èb
[
pos
].
s¶_°©e
 = 1;

3442 
i
 = 
	`_és_é_s¶_c⁄√˘_sockë
(
exc⁄ãxt
, &
ª£rved
->
sockë_èb
[
pos
]);

3444 i‡(
i
 < 0) {

3445 
	`_eXosù_m¨k_ªgi°øti⁄_expúed
(
exc⁄ãxt
, 
ª£rved
->
sockë_èb
[
pos
].
ªg_ˇŒ_id
);

3446 
	`_és_é_˛o£_socköfo
(
exc⁄ãxt
, &
ª£rved
->
sockë_èb
[
pos
]);

3449 } i‡(
i
 > 0) {

3450 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosù] [TLS] [checkÆl] sockë info:[%s][%d] [sock=%d] [pos=%d] c⁄√˘ed (s¶ i¿¥ogªss)\n", 
ª£rved
->
sockë_èb
[
pos
].
ªmŸe_ù
,Ñe£rved->sockë_èb[pos].
ªmŸe_p‹t
,

3451 
ª£rved
->
sockë_èb
[
pos
].
sockë
,Öos));

3456 i‡(
ª£rved
->
sockë_èb
[
pos
].
pög_rfc5626
 > 0 &&Ñe£rved->sockë_èb[pos].
p⁄g_suµ‹ãd
 > 0) {

3457 
time_t
 
now
 = 
	`osù_gësy°emtime
(
NULL
);

3459 i‡(
now
 > 
ª£rved
->
sockë_èb
[
pos
].
pög_rfc5626
) {

3460 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosip] [TCP] [checkall]ÇoÖong[CRLF] forÖing[CRLFCRLF]\n"));

3461 
ª£rved
->
sockë_èb
[
pos
].
t˝_max_timeout
 = 0;

3462 
	`_eXosù_m¨k_ªgi°øti⁄_expúed
(
exc⁄ãxt
, 
ª£rved
->
sockë_èb
[
pos
].
ªg_ˇŒ_id
);

3463 
	`_és_é_˛o£_socköfo
(
exc⁄ãxt
, &
ª£rved
->
sockë_èb
[
pos
]);

3471 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosù] [TLS] [checkÆl] sockë info:[%s][%d] [sock=%d] [pos=%d]Éº‹\n", 
ª£rved
->
sockë_èb
[
pos
].
ªmŸe_ù
,Ñe£rved->sockë_èb[pos].
ªmŸe_p‹t
,

3472 
ª£rved
->
sockë_èb
[
pos
].
sockë
,Öos));

3473 
	`_eXosù_m¨k_ªgi°øti⁄_expúed
(
exc⁄ãxt
, 
ª£rved
->
sockë_èb
[
pos
].
ªg_ˇŒ_id
);

3474 
	`_és_é_˛o£_socköfo
(
exc⁄ãxt
, &
ª£rved
->
sockë_èb
[
pos
]);

3480  
OSIP_SUCCESS
;

3481 
	}
}

3483 
	$és_é_check_c⁄√˘i⁄
(
eXosù_t
 *
exc⁄ãxt
, 
sockë
) {

3484 
eXéés
 *
ª£rved
 = (eXéé†*Ë
exc⁄ãxt
->
eXéés_ª£rved
;

3485 
pos
;

3486 
i
;

3488 i‡(
ª£rved
 =
NULL
) {

3489 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] [TLS] wrong state: createÅransportÜayer first\n"));

3490  
OSIP_WRONG_STATE
;

3493 i‡(
ª£rved
->
és_sockë
 <= 0)

3494  
OSIP_UNDEFINED_ERROR
;

3496 i‡(
sockë
 == -1) {

3497  
	`és_é_check_Æl_c⁄√˘i⁄
(
exc⁄ãxt
);

3500 
pos
 = 0;Öo†< 
EXOSIP_MAX_SOCKETS
;Öos++) {

3501 i‡(
ª£rved
->
sockë_èb
[
pos
].
sockë
 == socket)

3505 i‡(
pos
 =
EXOSIP_MAX_SOCKETS
)

3506  
OSIP_NOTFOUND
;

3508 
i
 = 
	`_t˝és_é_is_c⁄√˘ed
(
exc⁄ãxt
->
pﬁl_mëhod
, 
ª£rved
->
sockë_èb
[
pos
].
sockë
);

3510 i‡(
i
 > 0) {

3511 i‡(
ª£rved
->
sockë_èb
[
pos
].
sockë
 > 0 &&Ñe£rved->sockë_èb[pos].
t˝_ö¥ogªss_max_timeout
 > 0) {

3512 
time_t
 
now
 = 
	`osù_gësy°emtime
(
NULL
);

3514 i‡(
now
 > 
ª£rved
->
sockë_èb
[
pos
].
t˝_ö¥ogªss_max_timeout
) {

3515 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosip] [TLS] [check] socket is inÖrogress since 32 seconds / close socket\n"));

3516 
ª£rved
->
sockë_èb
[
pos
].
t˝_ö¥ogªss_max_timeout
 = 0;

3517 
	`_eXosù_m¨k_ªgi°øti⁄_expúed
(
exc⁄ãxt
, 
ª£rved
->
sockë_èb
[
pos
].
ªg_ˇŒ_id
);

3518 
	`_és_é_˛o£_socköfo
(
exc⁄ãxt
, &
ª£rved
->
sockë_èb
[
pos
]);

3519  
OSIP_SUCCESS
;

3523 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosù] [TLS] [check] sockë info:[%s][%d] [sock=%d] [pos=%d] i¿¥ogªss\n", 
ª£rved
->
sockë_èb
[
pos
].
ªmŸe_ù
,Ñe£rved->sockë_èb[pos].
ªmŸe_p‹t
,

3524 
ª£rved
->
sockë_èb
[
pos
].
sockë
,Öos));

3525  
OSIP_SUCCESS
;

3527 } i‡(
i
 == 0) {

3528 #ifde‡
HAVE_SYS_EPOLL_H


3529 i‡(
exc⁄ãxt
->
pﬁl_mëhod
 =
EXOSIP_USE_EPOLL_LT
 && 
ª£rved
->
sockë_èb
[
pos
].
t˝_ö¥ogªss_max_timeout
 > 0) {

3530 
ïﬁl_evít
 
ev
;

3532 
	`mem£t
(&
ev
, 0, (
ïﬁl_evít
));

3533 
ev
.
evíts
 = 
EPOLLIN
;

3534 
ev
.
d©a
.
fd
 = 
ª£rved
->
sockë_èb
[
pos
].
sockë
;

3535 
	`ïﬁl_˘l
(
exc⁄ãxt
->
ïfd
, 
EPOLL_CTL_MOD
, 
ª£rved
->
sockë_èb
[
pos
].
sockë
, &
ev
);

3539 
ª£rved
->
sockë_èb
[
pos
].
t˝_ö¥ogªss_max_timeout
 = 0;

3541 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosù] [TLS] [check] sockë info:[%s][%d] [sock=%d] [pos=%d] c⁄√˘ed\n", 
ª£rved
->
sockë_èb
[
pos
].
ªmŸe_ù
,Ñe£rved->sockë_èb[pos].
ªmŸe_p‹t
,

3542 
ª£rved
->
sockë_èb
[
pos
].
sockë
,Öos));

3544 i‡(
ª£rved
->
sockë_èb
[
pos
].
sockë
 > 0 &&Ñe£rved->sockë_èb[pos].
s¶_°©e
 > 2 &&Ñe£rved->sockë_èb[pos].
t˝_max_timeout
 > 0) {

3545 
time_t
 
now
 = 
	`osù_gësy°emtime
(
NULL
);

3547 i‡(
now
 > 
ª£rved
->
sockë_èb
[
pos
].
t˝_max_timeout
) {

3548 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosip] [TLS] [check] weÉxpectedáÑeply onÉstablished sockets / close socket\n"));

3549 
ª£rved
->
sockë_èb
[
pos
].
t˝_max_timeout
 = 0;

3550 
	`_eXosù_m¨k_ªgi°øti⁄_expúed
(
exc⁄ãxt
, 
ª£rved
->
sockë_èb
[
pos
].
ªg_ˇŒ_id
);

3551 
	`_és_é_˛o£_socköfo
(
exc⁄ãxt
, &
ª£rved
->
sockë_èb
[
pos
]);

3552  
OSIP_SUCCESS
;

3556 i‡(
ª£rved
->
sockë_èb
[
pos
].
s¶_°©e
 == 0 ||Ñeserved->socket_tab[pos].ssl_state == 1) {

3557 
ª£rved
->
sockë_èb
[
pos
].
s¶_°©e
 = 1;

3558 
i
 = 
	`_és_é_s¶_c⁄√˘_sockë
(
exc⁄ãxt
, &
ª£rved
->
sockë_èb
[
pos
]);

3560 i‡(
i
 < 0) {

3561 
	`_eXosù_m¨k_ªgi°øti⁄_expúed
(
exc⁄ãxt
, 
ª£rved
->
sockë_èb
[
pos
].
ªg_ˇŒ_id
);

3562 
	`_és_é_˛o£_socköfo
(
exc⁄ãxt
, &
ª£rved
->
sockë_èb
[
pos
]);

3565 } i‡(
i
 > 0) {

3566 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosù] [TLS] [check] sockë info:[%s][%d] [sock=%d] [pos=%d] c⁄√˘ed (s¶ i¿¥ogªss)\n", 
ª£rved
->
sockë_èb
[
pos
].
ªmŸe_ù
,Ñe£rved->sockë_èb[pos].
ªmŸe_p‹t
,

3567 
ª£rved
->
sockë_èb
[
pos
].
sockë
,Öos));

3572  
OSIP_SUCCESS
;

3575 
	`OSIP_TRACE
(

3576 
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosù] [TLS] [check] sockë info:[%s][%d] [sock=%d] [pos=%d]Éº‹\n", 
ª£rved
->
sockë_èb
[
pos
].
ªmŸe_ù
,Ñe£rved->sockë_èb[pos].
ªmŸe_p‹t
,Ñe£rved->sockë_èb[pos].
sockë
,Öos));

3577 
	`_eXosù_m¨k_ªgi°øti⁄_expúed
(
exc⁄ãxt
, 
ª£rved
->
sockë_èb
[
pos
].
ªg_ˇŒ_id
);

3578 
	`_és_é_˛o£_socköfo
(
exc⁄ãxt
, &
ª£rved
->
sockë_èb
[
pos
]);

3579  
OSIP_SUCCESS
;

3582  
OSIP_SUCCESS
;

3583 
	}
}

3585 
eXé_¥Ÿocﬁ
 
	geXé_és
 = {1,

3589 
IPPROTO_TCP
,

3590 
AF_INET
,

3595 &
és_é_öô
,

3596 &
és_é_‰ì
,

3597 &
és_é_›í
,

3598 &
és_é_£t_fd£t
,

3599 &
és_é_ªad_mesßge
,

3600 #ifde‡
HAVE_SYS_EPOLL_H


3601 &
és_é_ïﬁl_ªad_mesßge
,

3603 &
és_é_£nd_mesßge
,

3604 &
és_é_kì∑live
,

3605 &
és_é_£t_sockë
,

3606 &
és_é_masquîade_c⁄è˘
,

3607 &
és_é_gë_masquîade_c⁄è˘
,

3608 &
és_é_upd©e_c⁄è˘
,

3609 &
és_é_ª£t
,

3610 &
és_é_check_c⁄√˘i⁄
};

3612 
	$eXosù_å™•‹t_és_öô
(
eXosù_t
 *
exc⁄ãxt
) {

3613 
	`mem˝y
(&
exc⁄ãxt
->
eXé_å™•‹t
, &
eXé_és
, (
eXé_¥Ÿocﬁ
));

3614 
	}
}

3618 
eXosù_és_˘x_îr‹
 
	$eXosù_és_vîify_˚πifiˇã
(
eXosù_t
* 
exc⁄ãxt
, 
_és_vîify_˛õ¡_˚πifiˇã
) {

3620 
	}
}

3622 
eXosù_és_˘x_îr‹
 
	$eXosù_£t_és_˘x
(
eXosù_t
* 
exc⁄ãxt
, 
eXosù_és_˘x_t
* 
˘x
) {

3624 
	}
}

	@/home/unasaw/sip_project/libexosip2-5.3.0/src/eXtl_udp.c

33 
	~"eXosù2.h
"

34 
	~"eXå™•‹t.h
"

36 #i‡!
deföed
(
HAVE_INET_NTOP
)

37 
	~"öë_¡›.h
"

40 #i‡!
deföed
(
_WIN32_WCE
)

41 
	~<î∫o.h
>

44 #i‡
deföed
(
HAVE_WINSOCK2_H
)

45 
	#ex_î∫o
 
	`WSAGëLa°Eº‹
()

	)

46 
	#is_wouldblock_îr‹
(
r
Ë(‘Ë=
WSAEINTR
 || (rË=
WSAEWOULDBLOCK
)

	)

47 
	#is_c⁄ƒe£t_îr‹
(
r
Ë(‘Ë=
WSAECONNRESET
 || (rË=
WSAECONNABORTED
 || (rË=
WSAETIMEDOUT
 || (rË=
WSAENETRESET
 || (rË=
WSAENOTCONN
)

	)

49 
	#ex_î∫o
 
î∫o


	)

51 #i‚de‡
is_wouldblock_îr‹


52 
	#is_wouldblock_îr‹
(
r
Ë(‘Ë=
EINTR
 || (rË=
EWOULDBLOCK
 || (rË=
EAGAIN
)

	)

53 
	#is_c⁄ƒe£t_îr‹
(
r
Ë(‘Ë=
ECONNRESET
 || (rË=
ECONNABORTED
 || (rË=
ETIMEDOUT
 || (rË=
ENETRESET
 || (rË=
ENOTCONN
)

	)

56 #ifde‡
__APPLE_CC__


57 
	~"T¨gëC⁄dôi⁄Æs.h
"

60 #ifde‡
ENABLE_SIP_QOS


61 
	~<dñayimp.h
>

62 #unde‡
Exã∫C


63 
	~<QOS2.h
>

66 
	s_udp_°ªam
 {

67 
	mªmŸe_ho°
[256];

68 
	mªmŸe_ù
[64];

69 
	mªmŸe_p‹t
;

70 
	mout_sockë
;

74 #i‡!
deföed
(
HAVE_WINSOCK2_H
)

75 
	#SOCKET_OPTION_VALUE
 *

	)

76 
size_t
 
	gudp_mesßge_max_Àngth
 = 
SIP_MESSAGE_MAX_LENGTH
;

78 
	gudp_mesßge_max_Àngth
 = 
SIP_MESSAGE_MAX_LENGTH
;

80 
	#SOCKET_OPTION_VALUE
 *

	)

83 
	seXéudp
 {

84 
	mudp_sockë
;

85 
sockaddr_°‹age
 
	mai_addr
;

86 
	mudp_sockë_Ámûy
;

87 *
	mbuf
;

88 *
	mQoSH™dÀ
;

89 
	mQoSFlowID
;

91 
	mudp_sockë_oc
;

92 
sockaddr_°‹age
 
	mai_addr_oc
;

93 
	mudp_sockë_oc_Ámûy
;

95 
_udp_°ªam
 
	msockë_èb
[
EXOSIP_MAX_SOCKETS
];

98 
	$udp_é_öô
(
eXosù_t
 *
exc⁄ãxt
) {

99 
eXéudp
 *
ª£rved
 = (eXéud∞*Ë
	`osù_mÆloc
((eXtludp));

101 i‡(
ª£rved
 =
NULL
)

102  
OSIP_NOMEM
;

104 
	`mem£t
(
ª£rved
, 0, (
eXéudp
));

105 
ª£rved
->
udp_sockë
 = -1;

106 
ª£rved
->
udp_sockë_oc
 = -1;

108 
exc⁄ãxt
->
eXéudp_ª£rved
 = 
ª£rved
;

109  
OSIP_SUCCESS
;

110 
	}
}

112 
	$udp_é_‰ì
(
eXosù_t
 *
exc⁄ãxt
) {

113 
eXéudp
 *
ª£rved
 = (eXéud∞*Ë
exc⁄ãxt
->
eXéudp_ª£rved
;

115 i‡(
ª£rved
 =
NULL
)

116  
OSIP_SUCCESS
;

118 #ifde‡
ENABLE_SIP_QOS


120 i‡(
ª£rved
->
QoSFlowID
 != 0) {

121 
OSVERSIONINFOEX
 
ovi
;

123 
	`mem£t
(&
ovi
, 0, (ovi));

124 
ovi
.
dwOSVîsi⁄InfoSize
 = (ovi);

125 
	`GëVîsi⁄Ex
((
LPOSVERSIONINFO
Ë&
ovi
);

127 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosù] [UDP] [qos] check OS suµ‹àf‹ qwave.lib: [v%i.%i.%i]\n", 
ovi
.
dwMaj‹Vîsi⁄
, ovi.
dwMö‹Vîsi⁄
, ovi.
dwBuûdNumbî
));

129 i‡(
ovi
.
dwMaj‹Vîsi⁄
 > 5) {

130 
HRESULT
 
hr
 = 
E_FAIL
;

132 
__åy
 {

133 
hr
 = 
	`__HrLﬂdAŒImp‹tsF‹DŒ
("qwave.dll");

135 } 
	`__ex˚±
 (
EXCEPTION_EXECUTE_HANDLER
) {

136 
hr
 = 
E_FAIL
;

139 i‡(!
	`SUCCEEDED
(
hr
)) {

140 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_WARNING
, 
NULL
, "[eXosip] [UDP] [qos] failedÅoÜoad qwave.dll:Ço QoSávailable\n"));

143 
BOOL
 
QoSResu…
;

145 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosip] [UDP] [qos] QoS API detected\n"));

146 
QoSResu…
 = 
	`QOSRemoveSockëFromFlow
(
ª£rved
->
QoSH™dÀ
, 0,Ñe£rved->
QoSFlowID
, 0);

148 i‡(
QoSResu…
 !
TRUE
) {

149 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] [UDP] [qos] QOSRemoveSocketFromFlow failedÅoÉndá flow withÉrror\n"));

152 
ª£rved
->
QoSFlowID
 = 0;

157 i‡(
ª£rved
->
QoSH™dÀ
 !
NULL
) {

158 
	`QOSClo£H™dÀ
(
ª£rved
->
QoSH™dÀ
);

159 
ª£rved
->
QoSH™dÀ
 = 
NULL
;

164 
	`mem£t
(&
ª£rved
->
ai_addr
, 0, (
sockaddr_°‹age
));

166 i‡(
ª£rved
->
udp_sockë
 >= 0)

167 
	`_eXosù_˛o£sockë
(
ª£rved
->
udp_sockë
);

169 i‡(
ª£rved
->
udp_sockë_oc
 >= 0)

170 
	`_eXosù_˛o£sockë
(
ª£rved
->
udp_sockë_oc
);

172 i‡(
ª£rved
->
buf
 !
NULL
)

173 
	`osù_‰ì
(
ª£rved
->
buf
);

175 
	`osù_‰ì
(
ª£rved
);

176 
exc⁄ãxt
->
eXéudp_ª£rved
 = 
NULL
;

177  
OSIP_SUCCESS
;

178 
	}
}

180 #ifde‡
ENABLE_SIP_QOS


181 
	$_udp_é_å™•‹t_£t_ds˝_qos
(
eXosù_t
 *
exc⁄ãxt
, 
sockaddr
 *
ªm_addr
, 
ªm_addæí
) {

182 
ªs
 = 0;

183 
QOS_TRAFFIC_TYPE
 
tos
;

184 
OSVERSIONINFOEX
 
ovi
;

186 
eXéudp
 *
ª£rved
 = (eXéud∞*Ë
exc⁄ãxt
->
eXéudp_ª£rved
;

188 i‡(
ª£rved
 =
NULL
) {

189 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] [UDP] [qos] wrong state: createÅransportÜayer first\n"));

190  
OSIP_WRONG_STATE
;

193 i‡(
exc⁄ãxt
->
ds˝
 <= 0)

196 
	`mem£t
(&
ovi
, 0, (ovi));

197 
ovi
.
dwOSVîsi⁄InfoSize
 = (ovi);

198 
	`GëVîsi⁄Ex
((
LPOSVERSIONINFO
Ë&
ovi
);

200 i‡(
ovi
.
dwMaj‹Vîsi⁄
 > 5) {

201 
HRESULT
 
hr
 = 
E_FAIL
;

203 i‡(
exc⁄ãxt
->
ds˝
 <= 0x8)

204 
tos
 = 
QOSTøfficTy≥Background
;

206 i‡(
exc⁄ãxt
->
ds˝
 <= 0x28)

207 
tos
 = 
QOSTøfficTy≥AudioVideo
;

209 i‡(
exc⁄ãxt
->
ds˝
 <= 0x38)

210 
tos
 = 
QOSTøfficTy≥Voi˚
;

213 
tos
 = 
QOSTøfficTy≥Ex˚ŒítEff‹t
;

215 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosù] [UDP] [qos] check OS suµ‹àf‹ qwave.lib: [v%i.%i.%i]\n", 
ovi
.
dwMaj‹Vîsi⁄
, ovi.
dwMö‹Vîsi⁄
, ovi.
dwBuûdNumbî
));

217 
__åy
 {

218 
hr
 = 
	`__HrLﬂdAŒImp‹tsF‹DŒ
("qwave.dll");

220 } 
	`__ex˚±
 (
EXCEPTION_EXECUTE_HANDLER
) {

221 
hr
 = 
E_FAIL
;

224 i‡(!
	`SUCCEEDED
(
hr
)) {

225 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_WARNING
, 
NULL
, "[eXosip] [UDP] [qos] failedÅoÜoad qwave.dll:Ço QoSávailable\n"));

228 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosip] [UDP] QoS API detected\n"));

230 i‡(
exc⁄ãxt
->
ds˝
 == 0)

231 
tos
 = 
QOSTøfficTy≥Be°Eff‹t
;

233 i‡(
exc⁄ãxt
->
ds˝
 <= 0x8)

234 
tos
 = 
QOSTøfficTy≥Background
;

236 i‡(
exc⁄ãxt
->
ds˝
 <= 0x28)

237 
tos
 = 
QOSTøfficTy≥AudioVideo
;

239 i‡(
exc⁄ãxt
->
ds˝
 <= 0x38)

240 
tos
 = 
QOSTøfficTy≥Voi˚
;

243 
tos
 = 
QOSTøfficTy≥Ex˚ŒítEff‹t
;

245 i‡(
ª£rved
->
QoSH™dÀ
 =
NULL
) {

246 
QOS_VERSION
 
vîsi⁄
;

247 
BOOL
 
QoSResu…
;

249 
vîsi⁄
.
Maj‹Vîsi⁄
 = 1;

250 
vîsi⁄
.
Mö‹Vîsi⁄
 = 0;

252 
QoSResu…
 = 
	`QOSCª©eH™dÀ
(&
vîsi⁄
, &
ª£rved
->
QoSH™dÀ
);

254 i‡(
QoSResu…
 !
TRUE
) {

255 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] [UDP] [qos] QOSCreateHandle failedÅo create handle withÉrror\n"));

256 
ªs
 = -1;

260 i‡(
ª£rved
->
QoSH™dÀ
 !
NULL
 && 
ªm_addæí
 > 0) {

261 
BOOL
 
QoSResu…
;

263 
QoSResu…
 = 
	`QOSAddSockëToFlow
(
ª£rved
->
QoSH™dÀ
,Ñe£rved->
udp_sockë
, 
ªm_addr
, 
tos
, 
QOS_NON_ADAPTIVE_FLOW
, &ª£rved->
QoSFlowID
);

265 i‡(
QoSResu…
 !
TRUE
) {

266 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] [UDP] [qos] QOSAddSocketToFlow failedÅoáddá flow withÉrror\n"));

267 
ªs
 = -1;

272 i‡(
ªs
 < 0)

273 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] [UDP] [qos] failedÅo set DSCP value on socket\n"));

275  
ªs
;

278  
OSIP_SUCCESS
;

279 
	}
}

282 
	$_eXosù_å™•‹t_£t_ds˝
(
eXosù_t
 *
exc⁄ãxt
, 
Ámûy
, 
sock
) {

283 #ifde‡
IPPROTO_IP


284 
ªs
;

286 i‡(
Ámûy
 =
AF_INET
) {

287 
tos
 = (
exc⁄ãxt
->
ds˝
 << 2) & 0xFC;

289 
ªs
 = 
	`£tsock›t
(
sock
, 
IPPROTO_IP
, 
IP_TOS
, (
SOCKET_OPTION_VALUE
Ë&
tos
, (tos));

292 
tos
 = (
exc⁄ãxt
->
ds˝
 << 2) & 0xFC;

294 #ifde‡
IPV6_TCLASS


295 
ªs
 = 
	`£tsock›t
(
sock
, 
IPPROTO_IPV6
, 
IPV6_TCLASS
, (
SOCKET_OPTION_VALUE
Ë&
tos
, (tos));

297 
ªs
 = 
	`£tsock›t
(
sock
, 
IPPROTO_IPV6
, 
IP_TOS
, (
SOCKET_OPTION_VALUE
Ë&
tos
, (tos));

301  
ªs
;

305 
	}
}

307 
	$_udp_é_›í
(
eXosù_t
 *
exc⁄ãxt
, 
f‹˚_Ámûy
) {

308 
eXéudp
 *
ª£rved
 = (eXéud∞*Ë
exc⁄ãxt
->
eXéudp_ª£rved
;

309 
ªs
;

310 
addröfo
 *addröfÿ
NULL
;

311 
addröfo
 *
curöfo
;

312 
sock
 = -1;

313 *
node
 = 
NULL
;

314 
eb
[
ERRBSIZ
];

316 i‡(
ª£rved
 =
NULL
) {

317 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] [UDP] wrong state: createÅransportÜayer first\n"));

318  
OSIP_WRONG_STATE
;

321 
exc⁄ãxt
->
eXé_å™•‹t
.
¥Ÿo_loˇl_p‹t
 =Éxc⁄ãxt->eXé_å™•‹t.
¥Ÿo_p‹t
;

323 i‡(
exc⁄ãxt
->
eXé_å™•‹t
.
¥Ÿo_loˇl_p‹t
 < 0)

324 
exc⁄ãxt
->
eXé_å™•‹t
.
¥Ÿo_loˇl_p‹t
 = 5060;

326 i‡(
	`osù_°rˇ£cmp
(
exc⁄ãxt
->
eXé_å™•‹t
.
¥Ÿo_ifs
, "0.0.0.0") != 0 && osip_strcasecmp(excontext->eXtl_transport.proto_ifs, "::") != 0)

327 
node
 = 
exc⁄ãxt
->
eXé_å™•‹t
.
¥Ÿo_ifs
;

329 
ªs
 = 
	`_eXosù_gë_addröfo
(
exc⁄ãxt
, &
addröfo
, 
node
,Éxc⁄ãxt->
eXé_å™•‹t
.
¥Ÿo_loˇl_p‹t
,Éxc⁄ãxt->eXé_å™•‹t.
¥Ÿo_num
);

331 i‡(
ªs
)

334 
curöfo
 = 
addröfo
; curöfo; curöfÿcuröfo->
ai_√xt
) {

335 
sockÀn_t
 
Àn
;

336 
ty≥
;

338 i‡(
curöfo
->
ai_¥Ÿocﬁ
 && curöfo->ai_¥Ÿocﬁ !
exc⁄ãxt
->
eXé_å™•‹t
.
¥Ÿo_num
) {

339 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO3
, 
NULL
, "[eXosù] [UDP] skùpögÖrŸocﬁ [%d]\n", 
curöfo
->
ai_¥Ÿocﬁ
));

343 i‡(
f‹˚_Ámûy
 > 0 && f‹˚_Ámûy !
curöfo
->
ai_Ámûy
)

346 
ty≥
 = 
curöfo
->
ai_sockty≥
;

347 #i‡
	`deföed
(
SOCK_CLOEXEC
)

348 
ty≥
 = 
SOCK_CLOEXEC
 |Åype;

351 
sock
 = (Ë
	`sockë
(
curöfo
->
ai_Ámûy
, 
ty≥
, curöfo->
ai_¥Ÿocﬁ
);

353 i‡(
sock
 < 0) {

354 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosù] [UDP] c™nŸ cª©êsockë %s\n", 
	`_ex_°ªº‹
(
ex_î∫o
, 
eb
, 
ERRBSIZ
)));

358 i‡(
curöfo
->
ai_Ámûy
 =
AF_INET6
) {

359 #ifde‡
IPV6_V6ONLY


361 i‡(
	`£tsock›t_ùv6⁄ly
(
sock
)) {

362 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosù] [UDP] c™nŸ së sockë o±i⁄ %s\n", 
	`_ex_°ªº‹
(
ex_î∫o
, 
eb
, 
ERRBSIZ
)));

363 
	`_eXosù_˛o£sockë
(
sock
);

364 
sock
 = -1;

372 
vÆ›t
 = 1;

374 
	`£tsock›t
(
sock
, 
SOL_SOCKET
, 
SO_REUSEADDR
, (*Ë&
vÆ›t
, (valopt));

377 #i‡
SO_NOSIGPIPE


379 
vÆ
;

381 
vÆ
 = 1;

382 
	`£tsock›t
(
sock
, 
SOL_SOCKET
, 
SO_NOSIGPIPE
, (*Ë&
vÆ
, ());

386 
ªs
 = 
	`böd
(
sock
, 
curöfo
->
ai_addr
, (
sockÀn_t
Ëcuröfo->
ai_addæí
);

388 i‡(
ªs
 < 0) {

389 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosù] [UDP] c™nŸ böd sockë [%s][%s] %s\n", 
exc⁄ãxt
->
eXé_å™•‹t
.
¥Ÿo_ifs
, (
curöfo
->
ai_Ámûy
 =
AF_INET
Ë? "AF_INET" : "AF_INET6", 
	`_ex_°ªº‹
(
ex_î∫o
, 
eb
, 
ERRBSIZ
)));

390 
	`_eXosù_˛o£sockë
(
sock
);

391 
sock
 = -1;

395 
Àn
 = (
ª£rved
->
ai_addr
);

396 
ªs
 = 
	`gësock«me
(
sock
, (
sockaddr
 *Ë&
ª£rved
->
ai_addr
, &
Àn
);

398 i‡(
ªs
 != 0) {

399 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosù] [UDP] c™nŸ gë sockëÇamê%s\n", 
	`_ex_°ªº‹
(
ex_î∫o
, 
eb
, 
ERRBSIZ
)));

400 
	`mem˝y
(&
ª£rved
->
ai_addr
, 
curöfo
->ai_addr, curöfo->
ai_addæí
);

403 
ª£rved
->
udp_sockë_Ámûy
 = 
curöfo
->
ai_Ámûy
;

407 
	`_eXosù_‰ìaddröfo
(
addröfo
);

409 i‡(
sock
 < 0) {

410 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosù] [UDP] c™nŸ böd o¿p‹à[%i]\n", 
exc⁄ãxt
->
eXé_å™•‹t
.
¥Ÿo_loˇl_p‹t
));

414 
ª£rved
->
udp_sockë
 = 
sock
;

416 
	`_eXosù_å™•‹t_£t_ds˝
(
exc⁄ãxt
, 
ª£rved
->
udp_sockë_Ámûy
, 
sock
);

418 i‡(
exc⁄ãxt
->
eXé_å™•‹t
.
¥Ÿo_loˇl_p‹t
 == 0) {

420 i‡(
ª£rved
->
udp_sockë_Ámûy
 =
AF_INET
)

421 
exc⁄ãxt
->
eXé_å™•‹t
.
¥Ÿo_loˇl_p‹t
 = 
	`¡ohs
(((
sockaddr_ö
 *Ë&
ª£rved
->
ai_addr
)->
sö_p‹t
);

424 
exc⁄ãxt
->
eXé_å™•‹t
.
¥Ÿo_loˇl_p‹t
 = 
	`¡ohs
(((
sockaddr_ö6
 *Ë&
ª£rved
->
ai_addr
)->
sö6_p‹t
);

426 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO1
, 
NULL
, "[eXosù] [UDP] bödög o¿p‹à[%i]\n", 
exc⁄ãxt
->
eXé_å™•‹t
.
¥Ÿo_loˇl_p‹t
));

429 #ifde‡
HAVE_SYS_EPOLL_H


431 i‡(
exc⁄ãxt
->
pﬁl_mëhod
 =
EXOSIP_USE_EPOLL_LT
) {

432 
ïﬁl_evít
 
ev
;

433 
	`mem£t
(&
ev
, 0, (
ïﬁl_evít
));

434 
ev
.
evíts
 = 
EPOLLIN
;

435 
ev
.
d©a
.
fd
 = 
sock
;

436 
ªs
 = 
	`ïﬁl_˘l
(
exc⁄ãxt
->
ïfd
, 
EPOLL_CTL_ADD
, 
sock
, &
ev
);

438 i‡(
ªs
 < 0) {

439 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosù] [UDP] c™nŸÖﬁ»⁄ maö ud∞sockë [%i]\n", 
exc⁄ãxt
->
eXé_å™•‹t
.
¥Ÿo_loˇl_p‹t
));

440 
	`_eXosù_˛o£sockë
(
sock
);

441 
ª£rved
->
udp_sockë
 = -1;

448  
OSIP_SUCCESS
;

449 
	}
}

451 
	$_udp_é_›í_oc
(
eXosù_t
 *
exc⁄ãxt
, 
f‹˚_Ámûy
) {

452 
eXéudp
 *
ª£rved
 = (eXéud∞*Ë
exc⁄ãxt
->
eXéudp_ª£rved
;

453 
ªs
;

454 
addröfo
 *addröfÿ
NULL
;

455 
addröfo
 *
curöfo
;

456 
sock
 = -1;

457 
eb
[
ERRBSIZ
];

459 i‡(
exc⁄ãxt
->
oc_loˇl_addªss
[0] == '\0')

460  
OSIP_SUCCESS
;

462 
ªs
 = 
	`_eXosù_gë_addröfo
(
exc⁄ãxt
, &
addröfo
,Éxc⁄ãxt->
oc_loˇl_addªss
,Éxc⁄ãxt->
oc_loˇl_p‹t_ønge
[0],Éxc⁄ãxt->
eXé_å™•‹t
.
¥Ÿo_num
);

464 i‡(
ªs
)

467 
curöfo
 = 
addröfo
; curöfo; curöfÿcuröfo->
ai_√xt
) {

468 
sockÀn_t
 
Àn
;

469 
ty≥
;

471 i‡(
curöfo
->
ai_¥Ÿocﬁ
 && curöfo->ai_¥Ÿocﬁ !
exc⁄ãxt
->
eXé_å™•‹t
.
¥Ÿo_num
) {

472 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO3
, 
NULL
, "[eXosù] [UDP] skùpögÖrŸocﬁ %d\n", 
curöfo
->
ai_¥Ÿocﬁ
));

476 i‡(
f‹˚_Ámûy
 > 0 && f‹˚_Ámûy =
curöfo
->
ai_Ámûy
)

479 
ty≥
 = 
curöfo
->
ai_sockty≥
;

480 #i‡
	`deföed
(
SOCK_CLOEXEC
)

481 
ty≥
 = 
SOCK_CLOEXEC
 |Åype;

483 
sock
 = (Ë
	`sockë
(
curöfo
->
ai_Ámûy
, 
ty≥
, curöfo->
ai_¥Ÿocﬁ
);

485 i‡(
sock
 < 0) {

486 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosù] [UDP] c™nŸ cª©êsockë %s\n", 
	`_ex_°ªº‹
(
ex_î∫o
, 
eb
, 
ERRBSIZ
)));

490 i‡(
curöfo
->
ai_Ámûy
 =
AF_INET6
) {

491 #ifde‡
IPV6_V6ONLY


493 i‡(
	`£tsock›t_ùv6⁄ly
(
sock
)) {

494 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosù] [UDP] c™nŸ së sockë o±i⁄ %s\n", 
	`_ex_°ªº‹
(
ex_î∫o
, 
eb
, 
ERRBSIZ
)));

495 
	`_eXosù_˛o£sockë
(
sock
);

496 
sock
 = -1;

504 
vÆ›t
 = 1;

506 
	`£tsock›t
(
sock
, 
SOL_SOCKET
, 
SO_REUSEADDR
, (*Ë&
vÆ›t
, (valopt));

509 #i‡
SO_NOSIGPIPE


511 
vÆ
;

513 
vÆ
 = 1;

514 
	`£tsock›t
(
sock
, 
SOL_SOCKET
, 
SO_NOSIGPIPE
, (*Ë&
vÆ
, ());

518 
ªs
 = 
	`böd
(
sock
, 
curöfo
->
ai_addr
, (
sockÀn_t
Ëcuröfo->
ai_addæí
);

520 i‡(
ªs
 < 0) {

521 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosù] [UDP] c™nŸ böd sockë [%s][%s] %s\n", 
exc⁄ãxt
->
eXé_å™•‹t
.
¥Ÿo_ifs
, (
curöfo
->
ai_Ámûy
 =
AF_INET
Ë? "AF_INET" : "AF_INET6", 
	`_ex_°ªº‹
(
ex_î∫o
, 
eb
, 
ERRBSIZ
)));

522 
	`_eXosù_˛o£sockë
(
sock
);

523 
sock
 = -1;

527 
Àn
 = (
ª£rved
->
ai_addr_oc
);

528 
ªs
 = 
	`gësock«me
(
sock
, (
sockaddr
 *Ë&
ª£rved
->
ai_addr_oc
, &
Àn
);

530 i‡(
ªs
 != 0) {

531 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosù] [UDP] c™nŸ gë sockëÇamê%s\n", 
	`_ex_°ªº‹
(
ex_î∫o
, 
eb
, 
ERRBSIZ
)));

532 
	`mem˝y
(&
ª£rved
->
ai_addr_oc
, 
curöfo
->
ai_addr
, curöfo->
ai_addæí
);

535 
ª£rved
->
udp_sockë_oc_Ámûy
 = 
curöfo
->
ai_Ámûy
;

539 
	`_eXosù_‰ìaddröfo
(
addröfo
);

541 i‡(
sock
 < 0) {

542 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosù] [UDP] c™nŸ böd o¿o¯p‹à[%i]\n", 
exc⁄ãxt
->
oc_loˇl_p‹t_ønge
[0]));

546 
ª£rved
->
udp_sockë_oc
 = 
sock
;

548 
	`_eXosù_å™•‹t_£t_ds˝
(
exc⁄ãxt
, 
ª£rved
->
udp_sockë_oc_Ámûy
, 
sock
);

550 #ifde‡
HAVE_SYS_EPOLL_H


552 i‡(
exc⁄ãxt
->
pﬁl_mëhod
 =
EXOSIP_USE_EPOLL_LT
) {

553 
ïﬁl_evít
 
ev
;

554 
	`mem£t
(&
ev
, 0, (
ïﬁl_evít
));

555 
ev
.
evíts
 = 
EPOLLIN
;

556 
ev
.
d©a
.
fd
 = 
sock
;

557 
ªs
 = 
	`ïﬁl_˘l
(
exc⁄ãxt
->
ïfd
, 
EPOLL_CTL_ADD
, 
sock
, &
ev
);

559 i‡(
ªs
 < 0) {

560 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosù] [UDP] c™nŸÖﬁ»⁄ o¯ud∞sockë [%i]\n", 
exc⁄ãxt
->
eXé_å™•‹t
.
¥Ÿo_loˇl_p‹t
));

561 
	`_eXosù_˛o£sockë
(
sock
);

562 
ª£rved
->
udp_sockë_oc
 = -1;

569  
OSIP_SUCCESS
;

570 
	}
}

572 
	$udp_é_›í
(
eXosù_t
 *
exc⁄ãxt
) {

573 
eXéudp
 *
ª£rved
 = (eXéud∞*Ë
exc⁄ãxt
->
eXéudp_ª£rved
;

574 
ªs
;

576 i‡(
ª£rved
 =
NULL
) {

577 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] [UDP] wrong state: createÅransportÜayer first\n"));

578  
OSIP_WRONG_STATE
;

581 
ªs
 = 
	`_udp_é_›í
(
exc⁄ãxt
, 0);

582 
	`_udp_é_›í_oc
(
exc⁄ãxt
, 0);

583  
ªs
;

584 
	}
}

586 
	$_udp_é_ª£t
(
eXosù_t
 *
exc⁄ãxt
, 
af_Ámûy
) {

587 
eXéudp
 *
ª£rved
 = (eXéud∞*Ë
exc⁄ãxt
->
eXéudp_ª£rved
;

589 i‡(
ª£rved
->
udp_sockë
 >= 0)

590 
	`_eXosù_˛o£sockë
(
ª£rved
->
udp_sockë
);

592 
ª£rved
->
udp_sockë
 = -1;

593  
	`_udp_é_›í
(
exc⁄ãxt
, 
af_Ámûy
);

594 
	}
}

596 
	$_udp_é_ª£t_oc
(
eXosù_t
 *
exc⁄ãxt
, 
af_Ámûy
) {

597 
eXéudp
 *
ª£rved
 = (eXéud∞*Ë
exc⁄ãxt
->
eXéudp_ª£rved
;

599 i‡(
ª£rved
->
udp_sockë_oc
 >= 0)

600 
	`_eXosù_˛o£sockë
(
ª£rved
->
udp_sockë_oc
);

602 
ª£rved
->
udp_sockë_oc
 = -1;

603  
	`_udp_é_›í_oc
(
exc⁄ãxt
, 
af_Ámûy
);

604 
	}
}

606 
	$udp_é_£t_fd£t
(
eXosù_t
 *
exc⁄ãxt
, 
fd_£t
 *
osù_fd£t
, fd_£à*
osù_wr£t
, fd_£à*
osù_ex˚±£t
, *
fd_max
, *
osù_fd_èbÀ
) {

607 
eXéudp
 *
ª£rved
 = (eXéud∞*Ë
exc⁄ãxt
->
eXéudp_ª£rved
;

608 
pos_fd
 = 0;

610 i‡(
ª£rved
 =
NULL
) {

611 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] [UDP] wrong state: createÅransportÜayer first\n"));

612  
OSIP_WRONG_STATE
;

615 i‡(
ª£rved
->
udp_sockë
 < 0)

618 i‡(
osù_fd£t
 !
NULL
)

619 
	`eXFD_SET
(
ª£rved
->
udp_sockë
, 
osù_fd£t
);

620 
osù_fd_èbÀ
[
pos_fd
] = 
ª£rved
->
udp_sockë
;

621 
pos_fd
++;

623 i‡(
ª£rved
->
udp_sockë
 > *
fd_max
)

624 *
fd_max
 = 
ª£rved
->
udp_sockë
;

626 i‡(
ª£rved
->
udp_sockë_oc
 >= 0) {

627 i‡(
osù_fd£t
 !
NULL
)

628 
	`eXFD_SET
(
ª£rved
->
udp_sockë_oc
, 
osù_fd£t
);

629 
osù_fd_èbÀ
[
pos_fd
] = 
ª£rved
->
udp_sockë_oc
;

630 
pos_fd
++;

632 i‡(
ª£rved
->
udp_sockë_oc
 > *
fd_max
)

633 *
fd_max
 = 
ª£rved
->
udp_sockë_oc
;

636  
OSIP_SUCCESS
;

637 
	}
}

639 
	$_°un_decode_x‹_addªss_ùv4
(c⁄° *
å_id
, 
uöt16_t
 *
x‹_p‹t
, 
uöt32_t
 *
x‹_addr
) {

640 
uöt32_t
 
cookõ
 = 0x2112A442;

641 
uöt16_t
 
cookõ16
 = 0x2112A442 >> 16;

642 *
x‹_p‹t
 = (*x‹_p‹tË^ 
cookõ16
;

643 *
x‹_addr
 = (*x‹_addrË^ 
cookõ
;

644 
	}
}

646 
	$_°un_decode_x‹_addªss_ùv6
(c⁄° *
å_id
, 
uöt16_t
 *
x‹_p‹t
, 
uöt8_t
 *
x‹_addr
) {

647 
uöt16_t
 
cookõ16
 = 0x2112A442 >> 16;

648 
uöt8_t
 
x‹Id
[16];

649 
x‹Id
[0] = 0x21;

650 
x‹Id
[1] = 0x12;

651 
x‹Id
[2] = 0xA4;

652 
x‹Id
[3] = 0x42;

653 
	`mem˝y
(
x‹Id
 + 4, 
å_id
, 12);

655 *
x‹_p‹t
 = (*x‹_p‹tË^ 
cookõ16
;

657 
x‹_addr
[0] = x‹_addr[0] ^ 
x‹Id
[0];

658 
x‹_addr
[1] = x‹_addr[1] ^ 
x‹Id
[1];

659 
x‹_addr
[2] = x‹_addr[2] ^ 
x‹Id
[2];

660 
x‹_addr
[3] = x‹_addr[3] ^ 
x‹Id
[3];

661 
x‹_addr
[4] = x‹_addr[4] ^ 
x‹Id
[4];

662 
x‹_addr
[5] = x‹_addr[5] ^ 
x‹Id
[5];

663 
x‹_addr
[6] = x‹_addr[6] ^ 
x‹Id
[6];

664 
x‹_addr
[7] = x‹_addr[7] ^ 
x‹Id
[7];

665 
x‹_addr
[8] = x‹_addr[8] ^ 
x‹Id
[8];

666 
x‹_addr
[9] = x‹_addr[9] ^ 
x‹Id
[9];

667 
x‹_addr
[10] = x‹_addr[10] ^ 
x‹Id
[10];

668 
x‹_addr
[11] = x‹_addr[11] ^ 
x‹Id
[11];

669 
x‹_addr
[12] = x‹_addr[12] ^ 
x‹Id
[12];

670 
x‹_addr
[13] = x‹_addr[13] ^ 
x‹Id
[13];

671 
x‹_addr
[14] = x‹_addr[14] ^ 
x‹Id
[14];

672 
x‹_addr
[15] = x‹_addr[15] ^ 
x‹Id
[15];

673 
	}
}

675 
	$_udp_ªad_udp_maö_sockë
(
eXosù_t
 *
exc⁄ãxt
) {

676 
eXéudp
 *
ª£rved
 = (eXéud∞*Ë
exc⁄ãxt
->
eXéudp_ª£rved
;

677 
sockÀn_t
 
¶í
;

678 
sockaddr_°‹age
 
ß
;

679 
i
;

680 
eb
[
ERRBSIZ
];

682 i‡(
ª£rved
->
udp_sockë_Ámûy
 =
AF_INET
)

683 
¶í
 = (
sockaddr_ö
);

686 
¶í
 = (
sockaddr_ö6
);

688 i‡(
ª£rved
->
buf
 =
NULL
)

689 
ª£rved
->
buf
 = (*Ë
	`osù_mÆloc
(
udp_mesßge_max_Àngth
 * () + 1);

691 i‡(
ª£rved
->
buf
 =
NULL
)

692  
OSIP_NOMEM
;

694 
i
 = (Ë
	`ªcv‰om
(
ª£rved
->
udp_sockë
,Ñe£rved->
buf
, 
udp_mesßge_max_Àngth
, 0, (
sockaddr
 *Ë&
ß
, &
¶í
);

696 i‡(
i
 >= 32) {

697 
§c6ho°
[64];

698 
ªcvp‹t
 = 0;

700 
ª£rved
->
buf
[
i
] = '\0';

702 
	`mem£t
(
§c6ho°
, 0, 64);

703 
ªcvp‹t
 = 
	`_eXosù_gëp‹t
((
sockaddr
 *Ë&
ß
);

704 
	`_eXosù_gë«meöfo
((
sockaddr
 *Ë&
ß
, 
¶í
, 
§c6ho°
, 64, 
NULL
, 0, 
NI_NUMERICHOST
);

706 i‡((
ª£rved
->
buf
[0] == 0 ||Ñeserved->buf[0] == 1)) {

707 
eXosù_ªg_t
 *
jr
;

708 
osù_°un
 *
d©a
 = (osù_°u¿*Ë
ª£rved
->
buf
;

709 i‡(
	`¡ohs
(
d©a
->
Àngth
Ë+ 20 !
i
) {

710 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_WARNING
, 
NULL
, "[eXosù] [UDP] d©®ªje˘ed -Ñe˚ived from [%s][%d] [wr⁄g stu¿Àngth] [Àngth=%i]\n", 
§c6ho°
, 
ªcvp‹t
, 
i
));

711  
OSIP_SUCCESS
;

714 
jr
 = 
exc⁄ãxt
->
j_ªg
; j∏!
NULL
; j∏jr->
√xt
) {

715 i‡(
	`memcmp
(
ª£rved
->
buf
 + (
uöt32_t
), 
jr
->
°un_bödög
.
å_id
, 12)) {

716 
	sosù_°un_©r
 {

717 
uöt16_t
 
©r_typ
;

718 
uöt16_t
 
©r_Àn
;

719 
uöt8_t
 
©r_ª£rved
;

720 
uöt8_t
 
©r_Ámûy
;

722 
osù_°un_©r
 *
©r
 = (osù_°un_©∏*Ë(
ª£rved
->
buf
 + 20);

723 
uöt16_t
 
©r_Àn
 = 
	`¡ohs
(
©r
->atr_len);

724 
uöt16_t
 
©r_typ
 = 
	`¡ohs
(
©r
->atr_typ);

725 i‡((
©r_typ
 =0x0020 ||áå_ty∞=0x8020Ë&& (
©r_Àn
 == 8 ||átr_len == 20)) {

727 
ùbuf
[
INET6_ADDRSTRLEN
];

729 
uöt16_t
 
≈‹t
;

730 i‡(
©r
->
©r_Ámûy
 != 0x01 &&átr->atr_family != 0x02)

733 
	`mem˝y
(&
≈‹t
, 
ª£rved
->
buf
 + 26, 2);

734 
≈‹t
 = 
	`¡ohs
(nport);

736 i‡(
©r_Àn
 == 8) {

737 
uöt32_t
 
«ddr
;

738 
	`mem˝y
(&
«ddr
, 
ª£rved
->
buf
 + 28, 4);

739 
«ddr
 = 
	`¡ohl
(naddr);

740 
	`_°un_decode_x‹_addªss_ùv4
(
jr
->
°un_bödög
.
å_id
, &
≈‹t
, &
«ddr
);

741 
«ddr
 = 
	`ht⁄l
(naddr);

742 
	`öë_¡›
(
AF_INET
, &
«ddr
, 
ùbuf
, (ipbuf));

744 
uöt8_t
 
«ddr
[16];

745 
	`mem˝y
(
«ddr
, 
ª£rved
->
buf
 + 28, (naddr));

746 
	`_°un_decode_x‹_addªss_ùv6
(
jr
->
°un_bödög
.
å_id
, &
≈‹t
, 
«ddr
);

747 
	`öë_¡›
(
AF_INET6
, &
«ddr
, 
ùbuf
, (ipbuf));

749 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO1
, 
NULL
, "[eXosù] [UDP] [STUNánswî]Ñe˚ived from [%s][%d] [Àngth=%i] [XOR=%†%i]\n", 
§c6ho°
, 
ªcvp‹t
, 
i
, 
ùbuf
, 
≈‹t
));

750 
jr
->
pög_rfc5626
 = 0;

751 i‡(
jr
->
°un_≈‹t
 == 0) {

752 
jr
->
°un_≈‹t
 = 
≈‹t
;

753 
	`mem˝y
(
jr
->
°un_ùbuf
, 
ùbuf
, (jr->stun_ipbuf));

754 
jr
->
p⁄g_suµ‹ãd
 = 1;

755 } i‡(
jr
->
°un_≈‹t
 !
≈‹t
 || 
	`osù_°rˇ£cmp
(jr->
°un_ùbuf
, 
ùbuf
) != 0) {

756 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO1
, 
NULL
, "[eXosù] [UDP] [STUNánswî]Ñe˚ived from [%s][%d] [Àngth=%i] [NEW XOR=%†%i]\n", 
§c6ho°
, 
ªcvp‹t
, 
i
, 
ùbuf
, 
≈‹t
));

757 
jr
->
°un_≈‹t
 = 
≈‹t
;

758 
	`mem˝y
(
jr
->
°un_ùbuf
, 
ùbuf
, (jr->stun_ipbuf));

759 i‡(
jr
->
r_œ°_å
->
‹ig_ªque°
 =
NULL
 || jr->r_œ°_å->‹ig_ªque°->
ˇŒ_id
 =NULL || jr->r_œ°_å->‹ig_ªque°->ˇŒ_id->
numbî
 == NULL)

761 
	`_eXosù_m¨k_ªgi°øti⁄_expúed
(
exc⁄ãxt
, 
jr
->
r_œ°_å
->
‹ig_ªque°
->
ˇŒ_id
->
numbî
);

763  
OSIP_SUCCESS
;

768 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_WARNING
, 
NULL
, "[eXosù] [UDP] d©®ªje˘ed -Ñe˚ived from [%s][%d] [bad stun] [Àngth=%i]\n", 
§c6ho°
, 
ªcvp‹t
, 
i
));

769  
OSIP_SUCCESS
;

772 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO1
, 
NULL
, "[eXosù] [UDP] mesßgêª˚ived from [%s][%d]\n", 
§c6ho°
, 
ªcvp‹t
));

774 
	`_eXosù_h™dÀ_öcomög_mesßge
(
exc⁄ãxt
, 
ª£rved
->
buf
, 
i
,Ñe£rved->
udp_sockë
, 
§c6ho°
, 
ªcvp‹t
, 
NULL
, NULL);

777 i‡(
ª£rved
->
udp_sockë_oc
 >= 0) {

778 
pos
;

780 
pos
 = 0;Öo†< 
EXOSIP_MAX_SOCKETS
;Öos++) {

782 i‡(
ª£rved
->
sockë_èb
[
pos
].
ªmŸe_p‹t
 =
ªcvp‹t
 && 
	`osù_°rˇ£cmp
‘e£rved->sockë_èb[pos].
ªmŸe_ù
, 
§c6ho°
) == 0) {

783 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO1
, 
NULL
, "[eXosip] [UDP] inboundÅraffic/connectionálready inÅable\n"));

788 i‡(
pos
 =
EXOSIP_MAX_SOCKETS
) {

789 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO1
, 
NULL
, "[eXosù] [UDP] inboundÅøffic/√w c⁄√˘i⁄ dëe˘ed [%s][%d]\n", 
§c6ho°
, 
ªcvp‹t
));

791 
pos
 = 0;Öo†< 
EXOSIP_MAX_SOCKETS
;Öos++) {

792 i‡(
ª£rved
->
sockë_èb
[
pos
].
out_sockë
 == -1) {

793 
ª£rved
->
sockë_èb
[
pos
].
out_sockë
 =Ñe£rved->
udp_sockë
;

794 
	`¢¥ötf
(
ª£rved
->
sockë_èb
[
pos
].
ªmŸe_ù
, ‘e£rved->sockë_èb[pos].ªmŸe_ù), "%s", 
§c6ho°
);

795 
ª£rved
->
sockë_èb
[
pos
].
ªmŸe_p‹t
 = 
ªcvp‹t
;

796 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO1
, 
NULL
, "[eXosip] [UDP] inboundÅraffic/new connectionádded inÅable\n"));

803 } i‡(
i
 < 0) {

804 
vÆ›t
 = 
ex_î∫o
;

805 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosù] [UDP] c™nŸÑód sockë [%i] %s\n", 
i
, 
	`_ex_°ªº‹
(
vÆ›t
, 
eb
, 
ERRBSIZ
)));

807 i‡(
vÆ›t
 == 0 || valopt == 34 || valopt == 10040 ) {

808 i‡(
udp_mesßge_max_Àngth
 < 65536) {

809 
udp_mesßge_max_Àngth
 = udp_message_max_length * 2;

811 i‡(
udp_mesßge_max_Àngth
 > 65536)

812 
udp_mesßge_max_Àngth
 = 65536;

814 
	`osù_‰ì
(
ª£rved
->
buf
);

815 
ª£rved
->
buf
 = (*Ë
	`osù_mÆloc
(
udp_mesßge_max_Àngth
 * () + 1);

819 i‡(
vÆ›t
 == 57) {

820 
	`_udp_é_ª£t
(
exc⁄ãxt
, 
ª£rved
->
udp_sockë_Ámûy
);

824 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO1
, 
NULL
, "[eXosip] [UDP] dummy SIP messageÑeceived\n"));

827  
OSIP_SUCCESS
;

828 
	}
}

830 
	$_udp_ªad_udp_oc_sockë
(
eXosù_t
 *
exc⁄ãxt
) {

831 
eXéudp
 *
ª£rved
 = (eXéud∞*Ë
exc⁄ãxt
->
eXéudp_ª£rved
;

832 
sockÀn_t
 
¶í
;

833 
sockaddr_°‹age
 
ß
;

834 
i
;

835 
eb
[
ERRBSIZ
];

837 i‡(
ª£rved
->
buf
 =
NULL
)

838 
ª£rved
->
buf
 = (*Ë
	`osù_mÆloc
(
udp_mesßge_max_Àngth
 * () + 1);

840 i‡(
ª£rved
->
buf
 =
NULL
)

841  
OSIP_NOMEM
;

843 i‡(
ª£rved
->
udp_sockë_oc_Ámûy
 =
AF_INET
)

844 
¶í
 = (
sockaddr_ö
);

847 
¶í
 = (
sockaddr_ö6
);

849 
i
 = (Ë
	`ªcv‰om
(
ª£rved
->
udp_sockë_oc
,Ñe£rved->
buf
, 
udp_mesßge_max_Àngth
, 0, (
sockaddr
 *Ë&
ß
, &
¶í
);

851 i‡(
i
 > 32) {

852 
§c6ho°
[
NI_MAXHOST
];

853 
ªcvp‹t
 = 0;

855 
ª£rved
->
buf
[
i
] = '\0';

857 
	`mem£t
(
§c6ho°
, 0, 
NI_MAXHOST
);

858 
ªcvp‹t
 = 
	`_eXosù_gëp‹t
((
sockaddr
 *Ë&
ß
);

859 
	`_eXosù_gë«meöfo
((
sockaddr
 *Ë&
ß
, 
¶í
, 
§c6ho°
, 
NI_MAXHOST
, 
NULL
, 0, 
NI_NUMERICHOST
);

860 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO1
, 
NULL
, "[eXosù] [UDP] mesßgêª˚ived from: [%s][%d]\n", 
§c6ho°
, 
ªcvp‹t
));

862 
	`_eXosù_h™dÀ_öcomög_mesßge
(
exc⁄ãxt
, 
ª£rved
->
buf
, 
i
,Ñe£rved->
udp_sockë_oc
, 
§c6ho°
, 
ªcvp‹t
, 
NULL
, NULL);

864 } i‡(
i
 < 0) {

865 
vÆ›t
 = 
ex_î∫o
;

866 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosù] [UDP] c™nŸÑód sockë [%i] %s\n", 
i
, 
	`_ex_°ªº‹
(
vÆ›t
, 
eb
, 
ERRBSIZ
)));

868 i‡(
vÆ›t
 == 0 || valopt == 34) {

869 i‡(
udp_mesßge_max_Àngth
 < 65536) {

870 
udp_mesßge_max_Àngth
 = udp_message_max_length * 2;

872 i‡(
udp_mesßge_max_Àngth
 > 65536)

873 
udp_mesßge_max_Àngth
 = 65536;

875 
	`osù_‰ì
(
ª£rved
->
buf
);

876 
ª£rved
->
buf
 = (*Ë
	`osù_mÆloc
(
udp_mesßge_max_Àngth
 * () + 1);

880 i‡(
vÆ›t
 == 57) {

881 
	`_udp_é_ª£t_oc
(
exc⁄ãxt
, 
ª£rved
->
udp_sockë_oc_Ámûy
);

885 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO1
, 
NULL
, "[eXosip] [UDP] dummy SIP messageÑeceived\n"));

888  
OSIP_SUCCESS
;

889 
	}
}

891 #ifde‡
HAVE_SYS_EPOLL_H


893 
	$udp_é_ïﬁl_ªad_mesßge
(
eXosù_t
 *
exc⁄ãxt
, 
nfds
, 
ïﬁl_evít
 *
ï_¨øy
) {

894 
eXéudp
 *
ª£rved
 = (eXéud∞*Ë
exc⁄ãxt
->
eXéudp_ª£rved
;

895 
n
;

897 i‡(
ª£rved
 =
NULL
) {

898 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] [UDP] wrong state: createÅransportÜayer first\n"));

899  
OSIP_WRONG_STATE
;

902 i‡(
ª£rved
->
udp_sockë
 < 0)

905 
n
 = 0;Ç < 
nfds
; ++n) {

906 i‡(
ï_¨øy
[
n
].
d©a
.
fd
 =
ª£rved
->
udp_sockë
) {

907 
	`_udp_ªad_udp_maö_sockë
(
exc⁄ãxt
);

910 i‡(
ª£rved
->
udp_sockë_oc
 >0 && 
ï_¨øy
[
n
].
d©a
.
fd
 ==Ñeserved->udp_socket_oc) {

911 
	`_udp_ªad_udp_oc_sockë
(
exc⁄ãxt
);

915  
OSIP_SUCCESS
;

916 
	}
}

920 
	$udp_é_ªad_mesßge
(
eXosù_t
 *
exc⁄ãxt
, 
fd_£t
 *
osù_fd£t
, fd_£à*
osù_wr£t
, fd_£à*
osù_ex˚±£t
) {

921 
eXéudp
 *
ª£rved
 = (eXéud∞*Ë
exc⁄ãxt
->
eXéudp_ª£rved
;

923 i‡(
ª£rved
 =
NULL
) {

924 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] [UDP] wrong state: createÅransportÜayer first\n"));

925  
OSIP_WRONG_STATE
;

928 i‡(
ª£rved
->
udp_sockë
 < 0)

931 i‡(
	`FD_ISSET
(
ª£rved
->
udp_sockë
, 
osù_fd£t
)) {

932 
	`_udp_ªad_udp_maö_sockë
(
exc⁄ãxt
);

935 i‡(
ª£rved
->
udp_sockë_oc
 >0 && 
	`FD_ISSET
‘e£rved->udp_sockë_oc, 
osù_fd£t
)) {

936 
	`_udp_ªad_udp_oc_sockë
(
exc⁄ãxt
);

939  
OSIP_SUCCESS
;

940 
	}
}

942 
	$udp_é_upd©e_c⁄è˘
(
eXosù_t
 *
exc⁄ãxt
, 
osù_mesßge_t
 *
ªq
) {

943 
ªq
->
≠∂iˇti⁄_d©a
 = (*) 0x1;

944  
OSIP_SUCCESS
;

945 
	}
}

947 
	$_udp_é_upd©e_c⁄è˘
(
eXosù_t
 *
exc⁄ãxt
, 
osù_mesßge_t
 *
ªq
) {

948 
eXosù_accou¡_öfo
 *
aöfo
 = 
NULL
;

949 *
¥oxy
 = 
NULL
;

950 
i
;

951 
osù_vü_t
 *
vü
 = 
NULL
;

953 i‡(
ªq
->
≠∂iˇti⁄_d©a
 != (*) 0x1)

954  
OSIP_SUCCESS
;

956 
ªq
->
≠∂iˇti⁄_d©a
 = (*) 0x0;

958 i‡(
	`MSG_IS_REQUEST
(
ªq
)) {

959 i‡(
ªq
->
‰om
 !
NULL
 &&Ñeq->‰om->
uæ
 !NULL &&Ñeq->‰om->uæ->
ho°
 != NULL)

960 
¥oxy
 = 
ªq
->
‰om
->
uæ
->
ho°
;

962 
	`osù_mesßge_gë_vü
(
ªq
, 0, &
vü
);

965 i‡(
ªq
->
to
 !
NULL
 &&Ñeq->to->
uæ
 !NULL &&Ñeq->to->uæ->
ho°
 != NULL)

966 
¥oxy
 = 
ªq
->
to
->
uæ
->
ho°
;

969 i‡(
¥oxy
 !
NULL
) {

970 
i
 = 0; i < 
MAX_EXOSIP_ACCOUNT_INFO
; i++) {

971 i‡(
exc⁄ãxt
->
accou¡_íåõs
[
i
].
¥oxy
[0] != '\0') {

972 i‡(
	`°r°r
(
exc⁄ãxt
->
accou¡_íåõs
[
i
].
¥oxy
,ÖroxyË!
NULL
 || strstr(proxy,Éxcontext->account_entries[i].proxy) != NULL) {

974 i‡(
exc⁄ãxt
->
accou¡_íåõs
[
i
].
«t_ù
[0] != '\0') {

975 
aöfo
 = &
exc⁄ãxt
->
accou¡_íåõs
[
i
];

983 i‡(
exc⁄ãxt
->
udp_fúewÆl_ù
[0] !'\0' ||Éxc⁄ãxt->
auto_masquîade_c⁄è˘
 > 0) {

984 
osù_li°_ôî©‹_t
 
ô
;

985 
osù_c⁄è˘_t
 *
co
 = (osù_c⁄è˘_à*Ë
	`osù_li°_gë_fú°
(&
ªq
->
c⁄è˘s
, &
ô
);

987 
co
 !
NULL
) {

988 i‡(
co
 !
NULL
 && co->
uæ
 !NULL && co->uæ->
ho°
 != NULL) {

989 i‡(
aöfo
 =
NULL
) {

990 i‡(
exc⁄ãxt
->
udp_fúewÆl_p‹t
[0] == '\0') {

991 } i‡(
co
->
uæ
->
p‹t
 =
NULL
 && 0 !
	`osù_°rˇ£cmp
(
exc⁄ãxt
->
udp_fúewÆl_p‹t
, "5060")) {

992 
co
->
uæ
->
p‹t
 = 
	`osù_°rdup
(
exc⁄ãxt
->
udp_fúewÆl_p‹t
);

993 
	`osù_mesßge_f‹˚_upd©e
(
ªq
);

995 } i‡(
co
->
uæ
->
p‹t
 !
NULL
 && 0 !
	`osù_°rˇ£cmp
(
exc⁄ãxt
->
udp_fúewÆl_p‹t
, co->url->port)) {

996 
	`osù_‰ì
(
co
->
uæ
->
p‹t
);

997 
co
->
uæ
->
p‹t
 = 
	`osù_°rdup
(
exc⁄ãxt
->
udp_fúewÆl_p‹t
);

998 
	`osù_mesßge_f‹˚_upd©e
(
ªq
);

1002 i‡(
co
->
uæ
->
p‹t
 =
NULL
 && 
aöfo
->
«t_p‹t
 != 5060) {

1003 
co
->
uæ
->
p‹t
 = 
	`osù_mÆloc
(10);

1005 i‡(
co
->
uæ
->
p‹t
 =
NULL
)

1006  
OSIP_NOMEM
;

1008 
	`¢¥ötf
(
co
->
uæ
->
p‹t
, 9, "%i", 
aöfo
->
«t_p‹t
);

1009 
	`osù_mesßge_f‹˚_upd©e
(
ªq
);

1011 } i‡(
co
->
uæ
->
p‹t
 !
NULL
 && 
aöfo
->
«t_p‹t
 !
	`©oi
(co->url->port)) {

1012 
	`osù_‰ì
(
co
->
uæ
->
p‹t
);

1013 
co
->
uæ
->
p‹t
 = 
	`osù_mÆloc
(10);

1015 i‡(
co
->
uæ
->
p‹t
 =
NULL
)

1016  
OSIP_NOMEM
;

1018 
	`¢¥ötf
(
co
->
uæ
->
p‹t
, 9, "%i", 
aöfo
->
«t_p‹t
);

1019 
	`osù_mesßge_f‹˚_upd©e
(
ªq
);

1024 i‡(
aöfo
->
«t_ù
[0] != '\0') {

1025 
	`osù_‰ì
(
co
->
uæ
->
ho°
);

1026 
co
->
uæ
->
ho°
 = 
	`osù_°rdup
(
aöfo
->
«t_ù
);

1027 
	`osù_mesßge_f‹˚_upd©e
(
ªq
);

1034 
co
 = (
osù_c⁄è˘_t
 *Ë
	`osù_li°_gë_√xt
(&
ô
);

1038 i‡(
exc⁄ãxt
->
masquîade_vü
)

1039 i‡(
vü
 !
NULL
) {

1040 i‡(
aöfo
 =
NULL
) {

1041 i‡(
exc⁄ãxt
->
udp_fúewÆl_p‹t
[0] == '\0') {

1042 } i‡(
vü
->
p‹t
 =
NULL
 && 0 !
	`osù_°rˇ£cmp
(
exc⁄ãxt
->
udp_fúewÆl_p‹t
, "5060")) {

1043 
vü
->
p‹t
 = 
	`osù_°rdup
(
exc⁄ãxt
->
udp_fúewÆl_p‹t
);

1044 
	`osù_mesßge_f‹˚_upd©e
(
ªq
);

1046 } i‡(
vü
->
p‹t
 !
NULL
 && 0 !
	`osù_°rˇ£cmp
(
exc⁄ãxt
->
udp_fúewÆl_p‹t
, via->port)) {

1047 
	`osù_‰ì
(
vü
->
p‹t
);

1048 
vü
->
p‹t
 = 
	`osù_°rdup
(
exc⁄ãxt
->
udp_fúewÆl_p‹t
);

1049 
	`osù_mesßge_f‹˚_upd©e
(
ªq
);

1053 i‡(
vü
->
p‹t
 =
NULL
 && 
aöfo
->
«t_p‹t
 != 5060) {

1054 
vü
->
p‹t
 = 
	`osù_mÆloc
(10);

1056 i‡(
vü
->
p‹t
 =
NULL
)

1057  
OSIP_NOMEM
;

1059 
	`¢¥ötf
(
vü
->
p‹t
, 9, "%i", 
aöfo
->
«t_p‹t
);

1060 
	`osù_mesßge_f‹˚_upd©e
(
ªq
);

1062 } i‡(
vü
->
p‹t
 !
NULL
 && 
aöfo
->
«t_p‹t
 !
	`©oi
(via->port)) {

1063 
	`osù_‰ì
(
vü
->
p‹t
);

1064 
vü
->
p‹t
 = 
	`osù_mÆloc
(10);

1066 i‡(
vü
->
p‹t
 =
NULL
)

1067  
OSIP_NOMEM
;

1069 
	`¢¥ötf
(
vü
->
p‹t
, 9, "%i", 
aöfo
->
«t_p‹t
);

1070 
	`osù_mesßge_f‹˚_upd©e
(
ªq
);

1075 i‡(
aöfo
->
«t_ù
[0] != '\0') {

1076 
	`osù_‰ì
(
vü
->
ho°
);

1077 
vü
->
ho°
 = 
	`osù_°rdup
(
aöfo
->
«t_ù
);

1078 
	`osù_mesßge_f‹˚_upd©e
(
ªq
);

1085  
OSIP_SUCCESS
;

1086 
	}
}

1088 #i‚de‡
INET6_ADDRSTRLEN


1089 
	#INET6_ADDRSTRLEN
 65

	)

1092 
	$udp_é_£nd_mesßge
(
eXosù_t
 *
exc⁄ãxt
, 
osù_å™ß˘i⁄_t
 *
å
, 
osù_mesßge_t
 *
sù
, *
ho°
, 
p‹t
, 
out_sockë
) {

1093 
eXéudp
 *
ª£rved
 = (eXéud∞*Ë
exc⁄ãxt
->
eXéudp_ª£rved
;

1094 
sockÀn_t
 
Àn
 = 0;

1095 
size_t
 
Àngth
 = 0;

1096 
addröfo
 *addrinfo;

1097 
__eXosù_sockaddr
 
addr
;

1098 *
mesßge
 = 
NULL
;

1100 
ùbuf
[
INET6_ADDRSTRLEN
];

1101 
i
;

1102 
osù_«±r_t
 *
«±r_ªc‹d
 = 
NULL
;

1103 
sock
;

1104 
sockaddr_°‹age
 *
loˇl_ai_addr
;

1105 
loˇl_p‹t
;

1106 
tid
 = -1;

1108 i‡(
å
 !
NULL
)

1109 
tid
 = 
å
->
å™ß˘i⁄id
;

1111 i‡(
ª£rved
 =
NULL
) {

1112 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosù] [UDP] [tid=%i] wr⁄g sèã: cª©êå™•‹àœyî fú°\n", 
tid
));

1113  
OSIP_WRONG_STATE
;

1116 i‡(
ª£rved
->
udp_sockë
 < 0)

1119 i‡(
ho°
 =
NULL
) {

1120 
ho°
 = 
sù
->
ªq_uri
->host;

1122 i‡(
sù
->
ªq_uri
->
p‹t
 !
NULL
)

1123 
p‹t
 = 
	`osù_©oi
(
sù
->
ªq_uri
->port);

1126 
p‹t
 = 5060;

1129 
i
 = 
	`_é_ªsﬁv_«±r_de°ö©i⁄
(
exc⁄ãxt
, 
å
, 
sù
, &
ho°
, &
p‹t
, &
«±r_ªc‹d
);

1130 i‡(
i
 =
OSIP_SUCCESS
 + 1)

1131  
i
;

1132 i‡(
i
 < 
OSIP_SUCCESS
)

1133  
i
;

1135 
i
 = 
	`_eXosù_gë_addröfo
(
exc⁄ãxt
, &
addröfo
, 
ho°
, 
p‹t
, 
IPPROTO_UDP
);

1137 i‡(
i
 != 0) {

1138 i‡(
	`MSG_IS_REGISTER
(
sù
)) {

1139 
	`_eXosù_m¨k_ªgi°øti⁄_expúed
(
exc⁄ãxt
, 
sù
->
ˇŒ_id
->
numbî
);

1147 
addröfo
 *
curöfo
 = 
NULL
;

1149 
curöfo
 = 
addröfo
; curöfo; curöfÿcuröfo->
ai_√xt
) {

1150 i‡(
curöfo
->
ai_Ámûy
 =
ª£rved
->
udp_sockë_Ámûy
) {

1155 i‡(
exc⁄ãxt
->
ùv6_íabÀ
 > 1 && 
curöfo
 =
NULL
) {

1157 
curöfo
 = 
addröfo
;

1159 i‡(
curöfo
) {

1160 i‡(
curöfo
->
ai_Ámûy
 =
AF_INET
 && 
ª£rved
->
udp_sockë_Ámûy
 =
AF_INET6
) {

1162 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosù] [UDP] [tid=%i] swôchögÅÿIPv4\n", 
tid
));

1163 
	`_udp_é_ª£t
(
exc⁄ãxt
, 
curöfo
->
ai_Ámûy
);

1164  
OSIP_SUCCESS
;

1167 i‡(
curöfo
->
ai_Ámûy
 =
AF_INET6
 && 
ª£rved
->
udp_sockë_Ámûy
 =
AF_INET
) {

1169 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosù] [UDP] [tid=%i] swôchögÅÿIPv6\n", 
tid
));

1170 
	`_udp_é_ª£t
(
exc⁄ãxt
, 
curöfo
->
ai_Ámûy
);

1171  
OSIP_SUCCESS
;

1176 i‡(
curöfo
 =
NULL
) {

1177 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_BUG
, 
NULL
, "[eXosù] [UDP] [tid=%i] missög m©chög famûy\n", 
tid
));

1181 
	`mem˝y
(&
addr
, 
curöfo
->
ai_addr
, curöfo->
ai_addæí
);

1182 
Àn
 = (
sockÀn_t
Ë
curöfo
->
ai_addæí
;

1185 
	`_eXosù_‰ìaddröfo
(
addröfo
);

1188 
sock
 = 
ª£rved
->
udp_sockë
;

1189 
loˇl_p‹t
 = 
exc⁄ãxt
->
eXé_å™•‹t
.
¥Ÿo_loˇl_p‹t
;

1190 
loˇl_ai_addr
 = &
ª£rved
->
ai_addr
;

1192 ((
sockaddr
 *Ë&
addr
)->
ß_Ámûy
) {

1193 
AF_INET
:

1194 
	`öë_¡›
(((
sockaddr
 *Ë&
addr
)->
ß_Ámûy
, &(((
sockaddr_ö
 *Ë&addr)->
sö_addr
), 
ùbuf
, (ipbuf));

1197 
AF_INET6
:

1198 
	`öë_¡›
(((
sockaddr
 *Ë&
addr
)->
ß_Ámûy
, &(((
sockaddr_ö6
 *Ë&addr)->
sö6_addr
), 
ùbuf
, (ipbuf));

1202 
	`°∫˝y
(
ùbuf
, "(unknown)", (ipbuf));

1207 i‡(
ª£rved
->
udp_sockë_oc
 >= 0) {

1208 
pos
;

1210 
sock
 = 
ª£rved
->
udp_sockë_oc
;

1211 
loˇl_p‹t
 = 
exc⁄ãxt
->
oc_loˇl_p‹t_ønge
[0];

1212 
loˇl_ai_addr
 = &
ª£rved
->
ai_addr_oc
;

1214 
pos
 = 0;Öo†< 
EXOSIP_MAX_SOCKETS
;Öos++) {

1215 i‡(
ª£rved
->
sockë_èb
[
pos
].
out_sockë
 == -1)

1219 i‡(
ª£rved
->
sockë_èb
[
pos
].
ªmŸe_p‹t
 =
p‹t
 && 
	`osù_°rˇ£cmp
‘e£rved->sockë_èb[pos].
ªmŸe_ù
, 
ùbuf
) == 0) {

1220 
sock
 = 
ª£rved
->
sockë_èb
[
pos
].
out_sockë
;

1221 
loˇl_p‹t
 = 
exc⁄ãxt
->
eXé_å™•‹t
.
¥Ÿo_loˇl_p‹t
;

1222 
loˇl_ai_addr
 = &
ª£rved
->
ai_addr
;

1228 
	`_eXosù_ªque°_vüm™agî
(
exc⁄ãxt
, 
sù
, 
addr
.
ss_Ámûy
, 
IPPROTO_UDP
, 
loˇl_ai_addr
, 
loˇl_p‹t
, 
sock
, 
ùbuf
);

1229 
	`_eXosù_mesßge_c⁄è˘m™agî
(
exc⁄ãxt
, 
sù
, 
addr
.
ss_Ámûy
, 
IPPROTO_UDP
, 
loˇl_ai_addr
, 
loˇl_p‹t
, 
sock
, 
ùbuf
);

1230 
	`_udp_é_upd©e_c⁄è˘
(
exc⁄ãxt
, 
sù
);

1235 
osù_rouã_t
 *
rouã
 = 
NULL
;

1236 
osù_gíîic_∑øm_t
 *
èg
 = 
NULL
;

1238 i‡(
exc⁄ãxt
->
ªmove_¥îouã£t
 > 0) {

1239 
	`osù_mesßge_gë_rouã
(
sù
, 0, &
rouã
);

1240 
	`osù_to_gë_èg
(
sù
->
to
, &
èg
);

1242 i‡(
èg
 =
NULL
 && 
rouã
 !NULL &&Ñouã->
uæ
 != NULL) {

1243 
	`osù_li°_ªmove
(&
sù
->
rouãs
, 0);

1244 
	`osù_mesßge_f‹˚_upd©e
(
sù
);

1248 
i
 = 
	`osù_mesßge_to_°r
(
sù
, &
mesßge
, &
Àngth
);

1250 i‡(
èg
 =
NULL
 && 
rouã
 !NULL &&Ñouã->
uæ
 != NULL) {

1251 
	`osù_li°_add
(&
sù
->
rouãs
, 
rouã
, 0);

1255 i‡(
i
 !0 || 
Àngth
 <= 0) {

1256 
	`osù_‰ì
(
mesßge
);

1260 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO1
, 
NULL
, "[eXosù] [UDP] [tid=%i] mesßgê£¡ [Àn=%d]Åÿ[%s][%d]\n%s\n", 
tid
, 
Àngth
, 
ùbuf
, 
p‹t
, 
mesßge
));

1262 i‡(
exc⁄ãxt
->
íabÀ_dns_ˇche
 =1 && 
	`osù_°rˇ£cmp
(
ho°
, 
ùbuf
Ë!0 && 
	`MSG_IS_REQUEST
(
sù
)) {

1263 i‡(
	`MSG_IS_REGISTER
(
sù
)) {

1264 
eXosù_dns_ˇche
 
íåy
;

1266 
	`mem£t
(&
íåy
, 0, (
eXosù_dns_ˇche
));

1267 
	`¢¥ötf
(
íåy
.
ho°
, (entry.host), "%s", host);

1268 
	`¢¥ötf
(
íåy
.
ù
, ”¡ry.ù), "%s", 
ùbuf
);

1269 
	`eXosù_£t_›ti⁄
(
exc⁄ãxt
, 
EXOSIP_OPT_ADD_DNS_CACHE
, (*Ë&
íåy
);

1273 i‡(
å
 !
NULL
) {

1274 i‡(
å
->
i˘_c⁄ãxt
 !
NULL
)

1275 
	`osù_i˘_£t_de°ö©i⁄
(
å
->
i˘_c⁄ãxt
, 
	`osù_°rdup
(
ùbuf
), 
p‹t
);

1277 i‡(
å
->
ni˘_c⁄ãxt
 !
NULL
)

1278 
	`osù_ni˘_£t_de°ö©i⁄
(
å
->
ni˘_c⁄ãxt
, 
	`osù_°rdup
(
ùbuf
), 
p‹t
);

1281 #ifde‡
ENABLE_SIP_QOS


1282 
	`_udp_é_å™•‹t_£t_ds˝_qos
(
exc⁄ãxt
, (
sockaddr
 *Ë&
addr
, 
Àn
);

1285 #ifde‡
HAVE_WINSOCK2_H


1286 
	#CAST_RECV_LEN
(
L
Ë((Ë(L))

	)

1288 
	#CAST_RECV_LEN
(
L
Ë
	)
L

1291 
i
 = (Ë
	`£ndto
(
sock
, (c⁄° *Ë
mesßge
, 
	`CAST_RECV_LEN
(
Àngth
), 0, (
sockaddr
 *Ë&
addr
, 
Àn
);

1293 i‡(
i
 < 0) {

1294 
eb
[
ERRBSIZ
];

1295 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO1
, 
NULL
, "[eXosù] [UDP] [tid=%i] [%s][%d] faûuª %s\n", 
tid
, 
ho°
, 
p‹t
, 
	`_ex_°ªº‹
(
ex_î∫o
, 
eb
, 
ERRBSIZ
)));

1296 i‡(
	`MSG_IS_REGISTER
(
sù
)) {

1297 
	`_eXosù_m¨k_ªgi°øti⁄_expúed
(
exc⁄ãxt
, 
sù
->
ˇŒ_id
->
numbî
);

1301 
	`osù_‰ì
(
mesßge
);

1305 i‡(
exc⁄ãxt
->
ka_öãrvÆ
 > 0) {

1306 i‡(
	`MSG_IS_REGISTER
(
sù
)) {

1307 
eXosù_ªg_t
 *
ªg
 = 
NULL
;

1309 i‡(
	`_eXosù_ªg_föd
(
exc⁄ãxt
, &
ªg
, 
å
) == 0) {

1310 
	`mem˝y
(&(
ªg
->
°un_addr
), &
addr
, 
Àn
);

1311 
ªg
->
°un_Àn
 = 
Àn
;

1312 
ªg
->
°un_≈‹t
 = 0;

1313 
ªg
->
pög_rfc5626
 = 0;

1318 i‡(
«±r_ªc‹d
 !
NULL
) {

1319 i‡(
å
 !
NULL
 && 
	`MSG_IS_REGISTER
(
sù
Ë&&År->
œ°_ª•⁄£
 == NULL) {

1321 
time_t
 
now
;

1323 
now
 = 
	`osù_gësy°emtime
(
NULL
);

1325 i‡(
å
 !
NULL
 && 
now
 -År->
búth_time
 > 10) {

1326 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosù] [UDP] [tid=%i] [%s][%d]Åimeout\n", 
tid
, 
ho°
, 
p‹t
));

1327 
	`_eXosù_m¨k_ªgi°øti⁄_expúed
(
exc⁄ãxt
, 
sù
->
ˇŒ_id
->
numbî
);

1328 
	`osù_‰ì
(
mesßge
);

1334 
	`osù_‰ì
(
mesßge
);

1335  
OSIP_SUCCESS
;

1336 
	}
}

1338 
	$udp_é_kì∑live
(
eXosù_t
 *
exc⁄ãxt
) {

1339 
eXéudp
 *
ª£rved
 = (eXéud∞*Ë
exc⁄ãxt
->
eXéudp_ª£rved
;

1340 
eXosù_ªg_t
 *
jr
;

1342 i‡(
ª£rved
 =
NULL
) {

1343 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] [UDP] wrong state: createÅransportÜayer first\n"));

1344  
OSIP_WRONG_STATE
;

1347 i‡(
exc⁄ãxt
->
ka_öãrvÆ
 <= 0) {

1351 i‡(
ª£rved
->
udp_sockë
 < 0)

1352  
OSIP_UNDEFINED_ERROR
;

1354 
jr
 = 
exc⁄ãxt
->
j_ªg
; j∏!
NULL
; j∏jr->
√xt
) {

1355 i‡(
jr
->
°un_Àn
 > 0) {

1356 
idx
;

1358 
jr
->
°un_bödög
.
ty≥
 = 
	`ht⁄s
(0x0001);

1359 
jr
->
°un_bödög
.
Àngth
 = 
	`ht⁄s
(0);

1360 
jr
->
°un_bödög
.
magic_cookõ
 = 
	`ht⁄l
(0x2112A442);

1362 
idx
 = 0; idx < 12; idx = idx + 4) {

1364 
r
 = 
	`osù_buûd_øndom_numbî
();

1365 
jr
->
°un_bödög
.
å_id
[
idx
 + 0] = 
r
 >> 0;

1366 
jr
->
°un_bödög
.
å_id
[
idx
 + 1] = 
r
 >> 8;

1367 
jr
->
°un_bödög
.
å_id
[
idx
 + 2] = 
r
 >> 16;

1368 
jr
->
°un_bödög
.
å_id
[
idx
 + 3] = 
r
 >> 24;

1371 i‡(
	`£ndto
(
ª£rved
->
udp_sockë
, (c⁄° *Ë&
jr
->
°un_bödög
, (jr->°un_bödög), 0, (
sockaddr
 *Ë&(jr->
°un_addr
), jr->
°un_Àn
) > 0) {

1372 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO1
, 
NULL
, "[eXosip] [UDP] [keepalive] STUN sent on UDP\n"));

1373 
jr
->
pög_rfc5626
 = 
	`osù_gësy°emtime
(
NULL
) + 9;

1375 
eb
[
ERRBSIZ
];

1376 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO1
, 
NULL
, "[eXosù] [UDP] [kì∑live] faûuª %s\n", 
	`_ex_°ªº‹
(
ex_î∫o
, 
eb
, 
ERRBSIZ
)));

1381  
OSIP_SUCCESS
;

1382 
	}
}

1384 
	$udp_é_£t_sockë
(
eXosù_t
 *
exc⁄ãxt
, 
sockë
) {

1385 
eXéudp
 *
ª£rved
 = (eXéud∞*Ë
exc⁄ãxt
->
eXéudp_ª£rved
;

1387 i‡(
ª£rved
 =
NULL
) {

1388 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] [UDP] wrong state: createÅransportÜayer first\n"));

1389  
OSIP_WRONG_STATE
;

1392 
ª£rved
->
udp_sockë
 = 
sockë
;

1394  
OSIP_SUCCESS
;

1395 
	}
}

1397 
	$udp_é_masquîade_c⁄è˘
(
eXosù_t
 *
exc⁄ãxt
, c⁄° *
public_addªss
, 
p‹t
) {

1398 i‡(
public_addªss
 =
NULL
 ||Öublic_address[0] == '\0') {

1399 
	`mem£t
(
exc⁄ãxt
->
udp_fúewÆl_ù
, '\0', (excontext->udp_firewall_ip));

1400 
	`mem£t
(
exc⁄ãxt
->
udp_fúewÆl_p‹t
, '\0', (excontext->udp_firewall_port));

1401  
OSIP_SUCCESS
;

1404 
	`¢¥ötf
(
exc⁄ãxt
->
udp_fúewÆl_ù
, ”xc⁄ãxt->udp_fúewÆl_ù), "%s", 
public_addªss
);

1406 i‡(
p‹t
 > 0) {

1407 
	`¢¥ötf
(
exc⁄ãxt
->
udp_fúewÆl_p‹t
, ”xc⁄ãxt->udp_fúewÆl_p‹t), "%i", 
p‹t
);

1410  
OSIP_SUCCESS
;

1411 
	}
}

1413 
	$udp_é_gë_masquîade_c⁄è˘
(
eXosù_t
 *
exc⁄ãxt
, *
ù
, 
ù_size
, *
p‹t
, 
p‹t_size
) {

1414 
eXéudp
 *
ª£rved
 = (eXéud∞*Ë
exc⁄ãxt
->
eXéudp_ª£rved
;

1416 
	`mem£t
(
ù
, 0, 
ù_size
);

1417 
	`mem£t
(
p‹t
, 0, 
p‹t_size
);

1419 i‡(
ª£rved
 =
NULL
) {

1420 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] [UDP] wrong state: createÅransportÜayer first\n"));

1421  
OSIP_WRONG_STATE
;

1424 i‡(
exc⁄ãxt
->
udp_fúewÆl_ù
[0] != '\0')

1425 
	`¢¥ötf
(
ù
, 
ù_size
, "%s", 
exc⁄ãxt
->
udp_fúewÆl_ù
);

1427 i‡(
exc⁄ãxt
->
udp_fúewÆl_p‹t
[0] != '\0')

1428 
	`¢¥ötf
(
p‹t
, 
p‹t_size
, "%s", 
exc⁄ãxt
->
udp_fúewÆl_p‹t
);

1430  
OSIP_SUCCESS
;

1431 
	}
}

1433 
	$udp_é_check_c⁄√˘i⁄
(
eXosù_t
 *
exc⁄ãxt
, 
sockë
) {

1434 
eXéudp
 *
ª£rved
 = (eXéud∞*Ë
exc⁄ãxt
->
eXéudp_ª£rved
;

1436 i‡(
ª£rved
 =
NULL
) {

1437 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] [UDP] wrong state: createÅransportÜayer first\n"));

1438  
OSIP_WRONG_STATE
;

1441 i‡(
sockë
 == -1) {

1442 
eXosù_ªg_t
 *
jr
;

1444 
time_t
 
now
 = 
	`osù_gësy°emtime
(
NULL
);

1446 
jr
 = 
exc⁄ãxt
->
j_ªg
; j∏!
NULL
; j∏jr->
√xt
) {

1447 i‡(
jr
->
pög_rfc5626
 > 0 && 
now
 > jr->pög_rfc5626 && jr->
p⁄g_suµ‹ãd
 > 0) {

1448 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosip] [UDP] [checkall]ÇoÖong[STUN] forÖing[STUN]\n"));

1450 i‡(
jr
->
r_œ°_å
->
‹ig_ªque°
 =
NULL
 || jr->r_œ°_å->‹ig_ªque°->
ˇŒ_id
 =NULL || jr->r_œ°_å->‹ig_ªque°->ˇŒ_id->
numbî
 == NULL)

1453 
jr
->
pög_rfc5626
 = 0;

1454 
jr
->
°un_≈‹t
 = 0;

1455 
	`_eXosù_m¨k_ªgi°øti⁄_expúed
(
exc⁄ãxt
, 
jr
->
r_œ°_å
->
‹ig_ªque°
->
ˇŒ_id
->
numbî
);

1460  
OSIP_SUCCESS
;

1463  
OSIP_SUCCESS
;

1464 
	}
}

1466 
eXé_¥Ÿocﬁ
 
	geXé_udp
 = {1,

1470 
IPPROTO_UDP
,

1471 
AF_INET
,

1476 &
udp_é_öô
,

1477 &
udp_é_‰ì
,

1478 &
udp_é_›í
,

1479 &
udp_é_£t_fd£t
,

1480 &
udp_é_ªad_mesßge
,

1481 #ifde‡
HAVE_SYS_EPOLL_H


1482 &
udp_é_ïﬁl_ªad_mesßge
,

1484 &
udp_é_£nd_mesßge
,

1485 &
udp_é_kì∑live
,

1486 &
udp_é_£t_sockë
,

1487 &
udp_é_masquîade_c⁄è˘
,

1488 &
udp_é_gë_masquîade_c⁄è˘
,

1489 &
udp_é_upd©e_c⁄è˘
,

1490 
NULL
,

1491 &
udp_é_check_c⁄√˘i⁄
};

1493 
	$eXosù_å™•‹t_udp_öô
(
eXosù_t
 *
exc⁄ãxt
) {

1494 
	`mem˝y
(&
exc⁄ãxt
->
eXé_å™•‹t
, &
eXé_udp
, (
eXé_¥Ÿocﬁ
));

1495 
	}
}

	@/home/unasaw/sip_project/libexosip2-5.3.0/src/eXtransport.c

33 
	~"eXosù2.h
"

35 *
	$_eXosù_å™•‹t_¥Ÿocﬁ
(
osù_mesßge_t
 *
msg
) {

36 
osù_vü_t
 *
vü
;

38 
vü
 = (
osù_vü_t
 *Ë
	`osù_li°_gë
(&
msg
->
vüs
, 0);

40 i‡(
vü
 =
NULL
 || vü->
¥Ÿocﬁ
 == NULL)

41  
NULL
;

43  
vü
->
¥Ÿocﬁ
;

44 
	}
}

46 
	$_eXosù_föd_¥Ÿocﬁ
(
osù_mesßge_t
 *
msg
) {

47 
osù_vü_t
 *
vü
;

49 
vü
 = (
osù_vü_t
 *Ë
	`osù_li°_gë
(&
msg
->
vüs
, 0);

51 i‡(
vü
 =
NULL
 || vü->
¥Ÿocﬁ
 == NULL)

54 i‡(0 =
	`osù_°rˇ£cmp
(
vü
->
¥Ÿocﬁ
, "UDP"))

55  
IPPROTO_UDP
;

57 i‡(0 =
	`osù_°rˇ£cmp
(
vü
->
¥Ÿocﬁ
, "TCP"))

58  
IPPROTO_TCP
;

62 
	}
}

64 
	$eXosù_å™•‹t_£t
(
osù_mesßge_t
 *
msg
, c⁄° *
å™•‹t
) {

65 
osù_vü_t
 *
vü
;

67 
vü
 = (
osù_vü_t
 *Ë
	`osù_li°_gë
(&
msg
->
vüs
, 0);

69 i‡(
vü
 =
NULL
 || vü->
¥Ÿocﬁ
 == NULL)

72 i‡(0 =
	`osù_°rˇ£cmp
(
vü
->
¥Ÿocﬁ
, 
å™•‹t
))

73  
OSIP_SUCCESS
;

75 
	`osù_‰ì
(
vü
->
¥Ÿocﬁ
);

76 
vü
->
¥Ÿocﬁ
 = 
	`osù_°rdup
(
å™•‹t
);

77  
OSIP_SUCCESS
;

78 
	}
}

	@/home/unasaw/sip_project/libexosip2-5.3.0/src/eXtransport.h

33 #i‚de‡
__EXTRANSPORT_H__


34 
	#__EXTRANSPORT_H__


	)

36 #ifde‡
ENABLE_MPATROL


37 
	~<m∑åﬁ.h
>

40 
	~"eXosù2.h
"

42 #ifde‡
HAVE_OPENSSL_SSL_H


44 
	~<›ís¶/›ís¶v.h
>

47 #i‡
deföed
(
HAVE_SYS_SELECT_H
)

48 
	~<sys/£À˘.h
>

51 #i‚de‡
EXOSIP_MAX_SOCKETS


52 
	#EXOSIP_MAX_SOCKETS
 
FD_SETSIZE


	)

55 
	seXé_¥Ÿocﬁ
 {

56 
	míabÀd
;

58 
	m¥Ÿo_p‹t
;

59 
	m¥Ÿo_«me
[10];

60 
	m¥Ÿo_ifs
[64];

61 
	m¥Ÿo_num
;

62 
	m¥Ÿo_Ámûy
;

63 
	m¥Ÿo_£cuª
;

64 
	m¥Ÿo_ªlübÀ
;

65 
	m¥Ÿo_loˇl_p‹t
;

67 (*
	mé_öô
)(
eXosù_t
 *
	mexc⁄ãxt
);

68 (*
	mé_‰ì
)(
eXosù_t
 *
	mexc⁄ãxt
);

69 (*
	mé_›í
)(
eXosù_t
 *
	mexc⁄ãxt
);

70 (*
	mé_£t_fd£t
)(
eXosù_t
 *
	mexc⁄ãxt
, 
fd_£t
 *
	mosù_fd£t
, fd_£à*
	mosù_wr£t
, fd_£à*
	mosù_ex˚±£t
, *
	mfd_max
, *
	mosù_fd_èbÀ
);

71 (*
	mé_ªad_mesßge
)(
eXosù_t
 *
	mexc⁄ãxt
, 
fd_£t
 *
	mosù_fd£t
, fd_£à*
	mosù_wr£t
, fd_£à*
	mosù_ex˚±£t
);

73 #ifde‡
HAVE_SYS_EPOLL_H


74 (*
	mé_ïﬁl_ªad_mesßge
)(
eXosù_t
 *
	mexc⁄ãxt
, 
	mnfds
, 
ïﬁl_evít
 *
	mï_¨øy
);

76 (*
	mé_£nd_mesßge
)(
eXosù_t
 *
	mexc⁄ãxt
, 
osù_å™ß˘i⁄_t
 *
	må
, 
osù_mesßge_t
 *
	msù
, *
	mho°
, 
	mp‹t
, 
	mout_sockë
);

77 (*
	mé_kì∑live
)(
eXosù_t
 *
	mexc⁄ãxt
);

78 (*
	mé_£t_sockë
)(
eXosù_t
 *
	mexc⁄ãxt
, 
	msockë
);

79 (*
	mé_masquîade_c⁄è˘
)(
eXosù_t
 *
	mexc⁄ãxt
, c⁄° *
	mù
, 
	mp‹t
);

80 (*
	mé_gë_masquîade_c⁄è˘
)(
eXosù_t
 *
	mexc⁄ãxt
, *
	mù
, 
	mù_size
, *
	mp‹t
, 
	mp‹t_size
);

81 (*
	m_é_upd©e_c⁄è˘
)(
eXosù_t
 *
	mexc⁄ãxt
, 
osù_mesßge_t
 *
	msù
);

82 (*
	mé_ª£t
)(
eXosù_t
 *
	mexc⁄ãxt
);

83 (*
	mé_check_c⁄√˘i⁄
)(
eXosù_t
 *
	mexc⁄ãxt
, 
	msockë
);

86 
eXosù_å™•‹t_udp_öô
(
eXosù_t
 *
exc⁄ãxt
);

87 
eXosù_å™•‹t_t˝_öô
(
eXosù_t
 *
exc⁄ãxt
);

88 
eXosù_å™•‹t_és_öô
(
eXosù_t
 *
exc⁄ãxt
);

89 
eXosù_å™•‹t_dés_öô
(
eXosù_t
 *
exc⁄ãxt
);

91 #i‡
deföed
(
HAVE_WINSOCK2_H
)

92 
	#eXFD_SET
(
A
, 
B
Ë
	`FD_SET
((ËA, B)

	)

94 
	#eXFD_SET
(
A
, 
B
Ë
	`FD_SET
(A, B)

	)

	@/home/unasaw/sip_project/libexosip2-5.3.0/src/eXutils.c

33 
	~"eXosù2.h
"

35 #i‡
deföed
(
HAVE_STDARG_H
)

36 
	~<°d¨g.h
>

37 
	#VA_START
(
a
, 
f
Ë
	`va_°¨t
◊, f)

	)

39 #i‡
deföed
(
HAVE_VARARGS_H
)

40 
	~<v¨¨gs.h
>

41 
	#VA_START
(
a
, 
f
Ë
	`va_°¨t
◊)

	)

43 
	~<°d¨g.h
>

44 
	#VA_START
(
a
, 
f
Ë
	`va_°¨t
◊, f)

	)

48 
	~<osù∑r£r2/osù_p‹t.h
>

50 #i‡
deföed
(
HAVE_WINDNS_H
)

51 
	~<mÆloc.h
>

52 
	~<wödns.h
>

55 #ifde‡
HAVE_ARPA_NAMESER_H


56 
	~<¨∑/«me£r.h
>

59 #ifde‡
HAVE_NAMESER8_COMPAT_H


60 
	~<«me£r8_com∑t.h
>

61 
	~<ªsﬁv8_com∑t.h
>

62 #ñi‡
deföed
(
HAVE_RESOLV_H
Ë|| deföed(
O≥nBSD
Ë|| deföed(
FªeBSD
Ë|| deföed(
NëBSD
)

63 #ifde‡
HAVE_ARPA_NAMESER_COMPAT_H


64 
	~<¨∑/«me£r_com∑t.h
>

66 
	~<ªsﬁv.h
>

69 
	~<˘y≥.h
>

71 #ifde‡
HAVE_REGEX_H


72 
	~<ªgex.h
>

73 #ñi‡
deföed
(
HAVE_PCRE2POSIX_H
)

74 
	#PCRE2_STATIC
 1

	)

75 
	~"p¸e2posix.h
"

78 #ifde‡
HAVE_UNISTD_H


79 
	~<uni°d.h
>

82 
	$_eXosù_˛o£sockë
(
SOCKET_TYPE
 
sock
) {

83 #i‡!
	`deföed
(
HAVE_WINSOCK2_H
)

84  
	`˛o£
(
sock
);

86  
	`˛o£sockë
(
sock
);

88 
	}
}

90 #i‡
deföed
(
WIN32
Ë|| deföed(
_WIN32_WCE
)

92 *
	$_ex_°ªº‹
(
î∫um
, *
buf
, 
size_t
 
buÊí
) {

93 
î∫um
) {

94 
WSAEINTR
:

95 
	`¢¥ötf
(
buf
, 
buÊí
, "[%d:I¡îru±ed sy°em cÆl]", 
î∫um
);

98 
WSAEBADF
:

99 
	`¢¥ötf
(
buf
, 
buÊí
, "[%d:Bad fûênumbî]", 
î∫um
);

102 
WSAEACCES
:

103 
	`¢¥ötf
(
buf
, 
buÊí
, "[%d:Pîmissi⁄ díõd]", 
î∫um
);

106 
WSAEFAULT
:

107 
	`¢¥ötf
(
buf
, 
buÊí
, "[%d:Badáddªss]", 
î∫um
);

110 
WSAEINVAL
:

111 
	`¢¥ötf
(
buf
, 
buÊí
, "[%d:InvÆidárgumít]", 
î∫um
);

114 
WSAEMFILE
:

115 
	`¢¥ötf
(
buf
, 
buÊí
, "[%d:Toÿm™y o≥¿sockës]", 
î∫um
);

118 
WSAEWOULDBLOCK
:

119 
	`¢¥ötf
(
buf
, 
buÊí
, "[%d:O≥øti⁄ would block]", 
î∫um
);

122 
WSAEINPROGRESS
:

123 
	`¢¥ötf
(
buf
, 
buÊí
, "[%d:O≥øti⁄Çow i¿¥ogªss]", 
î∫um
);

126 
WSAEALREADY
:

127 
	`¢¥ötf
(
buf
, 
buÊí
, "[%d:O≥øti⁄áÃódy i¿¥ogªss]", 
î∫um
);

130 
WSAENOTSOCK
:

131 
	`¢¥ötf
(
buf
, 
buÊí
, "[%d:Sockë o≥øti⁄ o¿n⁄-sockë]", 
î∫um
);

134 
WSAEDESTADDRREQ
:

135 
	`¢¥ötf
(
buf
, 
buÊí
, "[%d:De°ö©i⁄áddªs†ªquúed]", 
î∫um
);

138 
WSAEMSGSIZE
:

139 
	`¢¥ötf
(
buf
, 
buÊí
, "[%d:Mesßgêtoÿl⁄g]", 
î∫um
);

142 
WSAEPROTOTYPE
:

143 
	`¢¥ötf
(
buf
, 
buÊí
, "[%d:PrŸocﬁ wr⁄gÅy≥ f‹ sockë]", 
î∫um
);

146 
WSAENOPROTOOPT
:

147 
	`¢¥ötf
(
buf
, 
buÊí
, "[%d:BadÖrŸocﬁ o±i⁄]", 
î∫um
);

150 
WSAEPROTONOSUPPORT
:

151 
	`¢¥ötf
(
buf
, 
buÊí
, "[%d:PrŸocﬁÇŸ suµ‹ãd]", 
î∫um
);

154 
WSAESOCKTNOSUPPORT
:

155 
	`¢¥ötf
(
buf
, 
buÊí
, "[%d:SockëÅy≥ÇŸ suµ‹ãd]", 
î∫um
);

158 
WSAEOPNOTSUPP
:

159 
	`¢¥ötf
(
buf
, 
buÊí
, "[%d:O≥øti⁄ÇŸ suµ‹ãd o¿sockë]", 
î∫um
);

162 
WSAEPFNOSUPPORT
:

163 
	`¢¥ötf
(
buf
, 
buÊí
, "[%d:PrŸocﬁ famûyÇŸ suµ‹ãd]", 
î∫um
);

166 
WSAEAFNOSUPPORT
:

167 
	`¢¥ötf
(
buf
, 
buÊí
, "[%d:Addªs†ÁmûyÇŸ suµ‹ãd]", 
î∫um
);

170 
WSAEADDRINUSE
:

171 
	`¢¥ötf
(
buf
, 
buÊí
, "[%d:Addªs†Æªady i¿u£]", 
î∫um
);

174 
WSAEADDRNOTAVAIL
:

175 
	`¢¥ötf
(
buf
, 
buÊí
, "[%d:C™'àassig¿ªque°edáddªss]", 
î∫um
);

178 
WSAENETDOWN
:

179 
	`¢¥ötf
(
buf
, 
buÊí
, "[%d:Nëw‹k i†down]", 
î∫um
);

182 
WSAENETUNREACH
:

183 
	`¢¥ötf
(
buf
, 
buÊí
, "[%d:Nëw‹k i†uƒóchabÀ]", 
î∫um
);

186 
WSAENETRESET
:

187 
	`¢¥ötf
(
buf
, 
buÊí
, "[%d:Në c⁄√˘i⁄Ñe£t]", 
î∫um
);

190 
WSAECONNABORTED
:

191 
	`¢¥ötf
(
buf
, 
buÊí
, "[%d:So·w¨êˇu£d c⁄√˘i⁄áb‹t]", 
î∫um
);

194 
WSAECONNRESET
:

195 
	`¢¥ötf
(
buf
, 
buÊí
, "[%d:C⁄√˘i⁄Ñe£àbyÖìr]", 
î∫um
);

198 
WSAENOBUFS
:

199 
	`¢¥ötf
(
buf
, 
buÊí
, "[%d:Nÿbuf„∏•a˚ávaûabÀ]", 
î∫um
);

202 
WSAEISCONN
:

203 
	`¢¥ötf
(
buf
, 
buÊí
, "[%d:Sockë i†Æªady c⁄√˘ed]", 
î∫um
);

206 
WSAENOTCONN
:

207 
	`¢¥ötf
(
buf
, 
buÊí
, "[%d:Sockë i†nŸ c⁄√˘ed]", 
î∫um
);

210 
WSAESHUTDOWN
:

211 
	`¢¥ötf
(
buf
, 
buÊí
, "[%d:C™'à£ndá·î sockë shutdown]", 
î∫um
);

214 
WSAETOOMANYREFS
:

215 
	`¢¥ötf
(
buf
, 
buÊí
, "[%d:Toÿm™yÑe„ªn˚s: c™'à•li˚]", 
î∫um
);

218 
WSAETIMEDOUT
:

219 
	`¢¥ötf
(
buf
, 
buÊí
, "[%d:C⁄√˘i⁄Åimed out]", 
î∫um
);

222 
WSAECONNREFUSED
:

223 
	`¢¥ötf
(
buf
, 
buÊí
, "[%d:C⁄√˘i⁄Ñefu£d]", 
î∫um
);

226 
WSAELOOP
:

227 
	`¢¥ötf
(
buf
, 
buÊí
, "[%d:Toÿm™yÜevñ†o‡symbﬁi¯löks]", 
î∫um
);

230 
WSAENAMETOOLONG
:

231 
	`¢¥ötf
(
buf
, 
buÊí
, "[%d:Fûê«mêtoÿl⁄g]", 
î∫um
);

234 
WSAEHOSTDOWN
:

235 
	`¢¥ötf
(
buf
, 
buÊí
, "[%d:Ho° i†down]", 
î∫um
);

238 
WSAEHOSTUNREACH
:

239 
	`¢¥ötf
(
buf
, 
buÊí
, "[%d:NÿrouãÅÿho°]", 
î∫um
);

242 
WSAENOTEMPTY
:

243 
	`¢¥ötf
(
buf
, 
buÊí
, "[%d:Dúe˘‹yÇŸÉm±y]", 
î∫um
);

246 
WSAEPROCLIM
:

247 
	`¢¥ötf
(
buf
, 
buÊí
, "[%d:Toÿm™yÖro˚s£s]", 
î∫um
);

250 
WSAEUSERS
:

251 
	`¢¥ötf
(
buf
, 
buÊí
, "[%d:Toÿm™y u£rs]", 
î∫um
);

254 
WSAEDQUOT
:

255 
	`¢¥ötf
(
buf
, 
buÊí
, "[%d:Dis¯quŸ®ex˚eded]", 
î∫um
);

258 
WSAESTALE
:

259 
	`¢¥ötf
(
buf
, 
buÊí
, "[%d:SèÀ NFS fûêh™dÀ]", 
î∫um
);

262 
WSAEREMOTE
:

263 
	`¢¥ötf
(
buf
, 
buÊí
, "[%d:Toÿm™yÜevñ†o‡ªmŸêöÖ©h]", 
î∫um
);

266 
WSASYSNOTREADY
:

267 
	`¢¥ötf
(
buf
, 
buÊí
, "[%d:Nëw‹k sy°em i†u«vaûabÀ]", 
î∫um
);

270 
WSAVERNOTSUPPORTED
:

271 
	`¢¥ötf
(
buf
, 
buÊí
, "[%d:Wösock vîsi⁄ ouào‡ønge]", 
î∫um
);

274 
WSANOTINITIALISED
:

275 
	`¢¥ötf
(
buf
, 
buÊí
, "[%d:WSASèπu∞nŸ yë cÆÀd]", 
î∫um
);

278 
WSAEDISCON
:

279 
	`¢¥ötf
(
buf
, 
buÊí
, "[%d:Gø˚fu»shutdow¿öÖrogªss]", 
î∫um
);

283 
	`¢¥ötf
(
buf
, 
buÊí
, "[%d:unknow¿îr‹]", 
î∫um
);

286  
buf
;

287 
	}
}

289 #ñi‡(
_POSIX_C_SOURCE
 >200112L || 
_XOPEN_SOURCE
 >600 || 
__APPLE__
 || 
deföed
(
ANDROID
)Ë&& !
_GNU_SOURCE


291 *
	$_ex_°ªº‹
(
î∫um
, *
buf
, 
size_t
 
buÊí
) {

292 
ö
 = 
	`¢¥ötf
(
buf
, 
buÊí
, "[%d:", 
î∫um
);

293 
îr
 = 
	`°ªº‹_r
(
î∫um
, 
buf
 + 
ö
, 
buÊí
 - in);

294 i‡(
îr
) {

295 
	`¢¥ötf
(
buf
, 
buÊí
, "[%d:övÆidÉº‹]", 
î∫um
);

296  
buf
;

298 i‡(
buÊí
 - 
	`°æí
(
buf
) > 1)

299 
	`¢¥ötf
(
buf
 + 
	`°æí
(buf), 
buÊí
 - strlen(buf), "]");

300  
buf
;

301 
	}
}

305 *
	$_ex_°ªº‹
(
î∫um
, *
buf
, 
size_t
 
buÊí
) {

306 
ö
 = 
	`¢¥ötf
(
buf
, 
buÊí
, "[%d:", 
î∫um
);

308 *
tmp
 = 
	`°ªº‹_r
(
î∫um
, 
buf
 + 
ö
, 
buÊí
 - in);

309 i‡(
tmp
 !
buf
) {

310 
	`°∫ˇt
(
buf
 + 
	`°æí
(buf), 
tmp
, 
buÊí
 - strlen(buf) - 1);

312 i‡(
buÊí
 - 
	`°æí
(
buf
) > 1)

313 
	`¢¥ötf
(
buf
 + 
	`°æí
(buf), 
buÊí
 - strlen(buf), "]");

314  
buf
;

315 
	}
}

320 #i‡
deföed
(
WIN32
Ë|| deföed(
_WIN32_WCE
)

322 *
	$_ex_gai_°ªº‹
(
î∫um
, *
buf
, 
size_t
 
buÊí
) {

323 
	`¢¥ötf
(
buf
, 
buÊí
, "[%d:%s]", 
î∫um
, 
	`gai_°ªº‹A
(errnum));

324  
buf
;

325 
	}
}

327 #ñi‡(
_POSIX_C_SOURCE
 >1 || 
_XOPEN_SOURCE
 || 
_POSIX_SOURCE
)

329 *
	$_ex_gai_°ªº‹
(
î∫um
, *
buf
, 
size_t
 
buÊí
) {

330 
	`¢¥ötf
(
buf
, 
buÊí
, "[%d:%s]", 
î∫um
, 
	`gai_°ªº‹
(errnum));

331  
buf
;

332 
	}
}

336 *
	$_ex_gai_°ªº‹
(
î∫um
, *
buf
, 
size_t
 
buÊí
) {

337 
	`¢¥ötf
(
buf
, 
buÊí
, "[%d:--]", 
î∫um
);

338  
buf
;

339 
	}
}

342 
	$«±r_íum_m©ch_™d_ª∂a˚
(
osù_«±r_t
 *
ouçut_ªc‹d
, 
osù_§v_ªc‹d_t
 *
§vªc‹d
) {

343 
ª_ªgexp
[1024];

346 *
ª_dñim
 = 
NULL
;

347 *
ª_dñim2
 = 
NULL
;

348 *
ª_dñim3
 = 
NULL
;

349 *
tmp_±r
;

350 *
de°_±r
;

352 
	`mem£t
(
§vªc‹d
->
«me
, 0, (srvrecord->name));

354 
	`mem£t
(
ª_ªgexp
, 0, (re_regexp));

355 
	`mem˝y
(
ª_ªgexp
, 
§vªc‹d
->
ªgexp
, (re_regexp));

357 
ª_dñim
 = 
ª_ªgexp
;

358 
ª_dñim
++;

359 
ª_dñim2
 = 
	`°rchr
(
ª_dñim
, 
ª_ªgexp
[0]);

361 i‡(
ª_dñim2
 =
NULL
)

364 
ª_dñim2
[0] = '\0';

365 
ª_dñim2
++;

366 
ª_dñim3
 = 
	`°rchr
(
ª_dñim2
, 
ª_ªgexp
[0]);

368 i‡(
ª_dñim3
 =
NULL
)

371 
ª_dñim3
[0] = '\0';

372 
ª_dñim3
++;

374 #i‡
	`deföed
(
HAVE_REGEX_H
Ë|| deföed(
HAVE_PCRE2POSIX_H
)

376 
ªgex_t
 
ªgex
;

377 
ªgm©ch_t
 
pm©ch
[10];

378 
ªsu…
;

379 
size_t
 
nm©ch
;

381 
ªsu…
 = 
	`ªgcomp
(&
ªgex
, 
ª_dñim
, 
REG_EXTENDED
);

383 i‡(
ªsu…
) {

384 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosù] [NAPTR ENUM] [%s] ->Ñegex compû©i⁄ faûuª [%s]\n", 
ouçut_ªc‹d
->
domaö
, 
§vªc‹d
->
ªgexp
));

388 
nm©ch
 = 
ªgex
.
ª_nsub
 + 1;

390 i‡(
nm©ch
 > 9) {

391 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosù] [NAPTR ENUM] [%s] ->ÑegexÅoÿmuch m©ch [%s]\n", 
ouçut_ªc‹d
->
domaö
, 
§vªc‹d
->
ªgexp
));

395 
	`mem£t
(&
pm©ch
, 0, (pmatch));

396 
ªsu…
 = 
	`ªgexec
(&
ªgex
, 
ouçut_ªc‹d
->
AUS
, 
nm©ch
, 
pm©ch
, 0);

398 i‡(
ªsu…
) {

399 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosù] [NAPTR ENUM] [%s] ->ÑegexÇÿm©ch [%s|aus=%s]\n", 
ouçut_ªc‹d
->
domaö
, 
§vªc‹d
->
ªgexp
, ouçut_ªc‹d->
AUS
));

403 
	`ªg‰ì
(&
ªgex
);

405 
tmp_±r
 = 
ª_dñim2
;

406 
de°_±r
 = 
§vªc‹d
->
«me
;

408 
tmp_±r
[0] != '\0') {

409 i‡(
tmp_±r
[0] ='\\' && 
	`isdigô
(tmp_ptr[1])) {

410 
size_t
 
idx
 = (
tmp_±r
[1] - '0');

412 i‡(
idx
 >
nm©ch
) {

413 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosù] [NAPTR ENUM] [%s] ->Ñegex wr⁄g backÑe„ªn˚ index [%s|AUS=%s|%i:%i]\n", 
ouçut_ªc‹d
->
domaö
, 
§vªc‹d
->
ªgexp
, ouçut_ªc‹d->
AUS
, 
idx
, 
nm©ch
));

417 
	`°∫˝y
(
de°_±r
, 
ouçut_ªc‹d
->
AUS
 + 
pm©ch
[
idx
].
rm_so
,Öm©ch[idx].
rm_eo
 -Ömatch[idx].rm_so);

418 
de°_±r
 +
pm©ch
[
idx
].
rm_eo
 -Öm©ch[idx].
rm_so
;

419 
tmp_±r
++;

420 
tmp_±r
++;

423 
de°_±r
[0] = 
tmp_±r
[0];

424 
de°_±r
++;

425 
tmp_±r
++;

431 *
backªf
 = 
	`°rchr
(
ª_dñim2
, '\\');

433 
backªf
 !
NULL
) {

434 i‡(
	`isdigô
(
backªf
[1]))

437 
backªf
 = 
	`°rchr
(backref + 1, '\\');

440 i‡(
ª_dñim
[0] == '(' || (re_delim[0] == '^' &&Ñe_delim[1] == '(')) {

441 
size_t
 
Àn
 = 
	`°æí
(
ª_dñim
);

443 i‡(
Àn
 > 2) {

444 i‡(
ª_dñim
[
Àn
 - 1] == ')' || (re_delim[len - 2] == ')' &&Ñe_delim[len - 1] == '$')) {

447 
tmp_±r
 = 
ª_dñim2
;

448 
de°_±r
 = 
§vªc‹d
->
«me
;

450 
tmp_±r
[0] != '\0') {

451 i‡(
tmp_±r
[0] ='\\' && 
	`isdigô
(tmp_ptr[1])) {

452 
size_t
 
idx
 = (
tmp_±r
[1] - '0');

454 i‡(
idx
 >= 2) {

455 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosù] [NAPTR ENUM] [%s] ->Ñegex wr⁄g backÑe„ªn˚ index [%s|AUS=%s|%i]\n", 
ouçut_ªc‹d
->
domaö
, 
§vªc‹d
->
ªgexp
, ouçut_ªc‹d->
AUS
, 
idx
));

459 
	`¢¥ötf
(
de°_±r
, (
ouçut_ªc‹d
->
AUS
), "%s", output_record->AUS);

460 
de°_±r
 +
	`°æí
(
ouçut_ªc‹d
->
AUS
);

461 
tmp_±r
++;

462 
tmp_±r
++;

465 
de°_±r
[0] = 
tmp_±r
[0];

466 
de°_±r
++;

467 
tmp_±r
++;

473 } i‡(
backªf
 =
NULL
) {

475 
	`¢¥ötf
(
§vªc‹d
->
«me
, (§vªc‹d->«me), "%s", 
ª_dñim2
);

479 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosù] [NAPTR ENUM] [%s] ->Ñegex d⁄ê[%s]\n", 
ouçut_ªc‹d
->
domaö
, 
§vªc‹d
->
«me
));

481 
	}
}

483 #i‡
deföed
(
USE_GETHOSTBYNAME
)

485 
	$_eXosù_‰ìaddröfo
(
addröfo
 *
ai
) {

486 
addröfo
 *
√xt
;

488 
ai
) {

489 
√xt
 = 
ai
->
ai_√xt
;

490 
	`‰ì
(
ai
);

491 
ai
 = 
√xt
;

493 
	}
}

495 
	s«mebuf
 {

496 
ho°ít
 
	mho°íåy
;

497 *
	mh_addr_li°
[2];

498 
ö_addr
 
	maddª¡ry
;

499 
	mh_«me
[16];

502 
addröfo
 *
	$osù_he2ai
(
ho°ít
 *
he
, 
p‹t
, 
¥Ÿocﬁ
) {

503 
addröfo
 *
ai
;

505 
addröfo
 *
¥evai
 = 
NULL
;

507 
addröfo
 *
fú°ai
 = 
NULL
;

509 
sockaddr_ö
 *
addr
;

511 
i
;

513 
ö_addr
 *
cuº
;

515 i‡(!
he
)

516  
NULL
;

518 
i
 = 0; (
cuº
 = (
ö_addr
 *Ë
he
->
h_addr_li°
[i]); i++) {

519 
ai
 = 
	`ˇŒoc
(1, (
addröfo
Ë+ (
sockaddr_ö
));

521 i‡(!
ai
)

524 i‡(!
fú°ai
)

525 
fú°ai
 = 
ai
;

527 i‡(
¥evai
)

528 
¥evai
->
ai_√xt
 = 
ai
;

530 
ai
->
ai_Ámûy
 = 
AF_INET
;

532 i‡(
¥Ÿocﬁ
 =
IPPROTO_UDP
)

533 
ai
->
ai_sockty≥
 = 
SOCK_DGRAM
;

536 
ai
->
ai_sockty≥
 = 
SOCK_STREAM
;

538 
ai
->
ai_addæí
 = (
sockaddr_ö
);

541 
ai
->
ai_addr
 = (
sockaddr
 *Ë((*Ëaò+ (
addröfo
));

545 
addr
 = (
sockaddr_ö
 *Ë
ai
->
ai_addr
;

547 
	`mem˝y
((*Ë&(
addr
->
sö_addr
), 
cuº
, (
ö_addr
));

548 
addr
->
sö_Ámûy
 = 
he
->
h_addπy≥
;

549 
addr
->
sö_p‹t
 = 
	`ht⁄s
((Ë
p‹t
);

551 
¥evai
 = 
ai
;

554  
fú°ai
;

555 
	}
}

566 
addröfo
 *
	$osù_ù2addr
(
ö_addr_t
 
num
, c⁄° *
ho°«me
, 
p‹t
, 
¥Ÿocﬁ
) {

567 
addröfo
 *
ai
;

568 
ho°ít
 *
h
;

569 
ö_addr
 *
addª¡ry
;

570 
«mebuf
 
buf„r
;

571 
«mebuf
 *
buf
 = &
buf„r
;

573 
h
 = &
buf
->
ho°íåy
;

574 
h
->
h_addr_li°
 = &
buf
->h_addr_list[0];

575 
addª¡ry
 = &
buf
->addrentry;

576 
addª¡ry
->
s_addr
 = 
num
;

577 
h
->
h_addr_li°
[0] = (*Ë
addª¡ry
;

578 
h
->
h_addr_li°
[1] = 
NULL
;

579 
h
->
h_addπy≥
 = 
AF_INET
;

580 
h
->
h_Àngth
 = (*
addª¡ry
);

581 
h
->
h_«me
 = &
buf
->h_name[0];

582 
h
->
h_Æü£s
 = 
NULL
;

585 
	`¢¥ötf
((*Ë
h
->
h_«me
, 16, "%s", 
ho°«me
);

587 
ai
 = 
	`osù_he2ai
(
h
, 
p‹t
, 
¥Ÿocﬁ
);

588  
ai
;

589 
	}
}

591 
	$eXosù_öë_±⁄
(
Ámûy
, c⁄° *
§c
, *
d°
) {

592 i‡(
	`°rchr
(
§c
, ':'))

593  
OSIP_UNDEFINED_ERROR
;

594 i‡(
	`°rchr
(
§c
, '.')) {

595 
ö_addr
 *
tmp
 = 
d°
;

597 
tmp
->
s_addr
 = 
	`öë_addr
(
§c
);

599 i‡(
tmp
->
s_addr
 =
INADDR_NONE
)

605  
INADDR_NONE
;

606 
	}
}

624 
	$_eXosù_gë_addröfo
(
eXosù_t
 *
exc⁄ãxt
, 
addröfo
 **addröfo, c⁄° *
ho°«me
, 
p‹t
, 
¥Ÿocﬁ
) {

625 
ho°ít
 *
h
 = 
NULL
;

627 
ö_addr_t
 
ö
;

629 
ho°ít
 *
buf
 = 
NULL
;

631 *
addröfo
 = 
NULL
;

633 i‡(
p‹t
 < 0)

634  
OSIP_BADPARAMETER
;

636 i‡(1 =
	`eXosù_öë_±⁄
(
AF_INET
, 
ho°«me
, &
ö
))

639 *
addröfo
 = 
	`osù_ù2addr
(
ö
, 
ho°«me
, 
p‹t
, 
¥Ÿocﬁ
);

640  
OSIP_SUCCESS
;

642 #i‡
	`deföed
(
HAVE_GETHOSTBYNAME_R
)

649 
h_î∫›
;

651 
ªs
 = 
ERANGE
;

653 
buf
 = (
ho°ít
 *Ë
	`ˇŒoc
(
CURL_HOSTENT_SIZE
, 1);

655 i‡(!
buf
)

656  
NULL
;

664 #ifde‡
HAVE_GETHOSTBYNAME_R_5


666 (Ë
ªs
;

667 
h
 = 
	`gëho°by«me_r
(
ho°«me
, (
ho°ít
 *Ë
buf
, (*Ëbu‡+ (ho°ít), 
CURL_HOSTENT_SIZE
 - (ho°ít), &
h_î∫›
);

675 i‡(
h
) {

680 #ifde‡
HAVE_GETHOSTBYNAME_R_6


683 
ªs
 = 
	`gëho°by«me_r
(
ho°«me
, (
ho°ít
 *Ë
buf
, (*Ëbu‡+ (ho°ít), 
CURL_HOSTENT_SIZE
 - (ho°ít), &
h
,

684 &
h_î∫›
);

717 i‡(!
h
)

719 #ifde‡
HAVE_GETHOSTBYNAME_R_3


741 i‡(
CURL_HOSTENT_SIZE
 >((
ho°ít
Ë+ (
ho°ít_d©a
))) {

747 
ªs
 = 
	`gëho°by«me_r
(
ho°«me
, (
ho°ít
 *Ë
buf
, (
ho°ít_d©a
 *) ((*) buf + (hostent)));

748 
h_î∫›
 = 
î∫o
;

751 
ªs
 = -1;

753 i‡(!
ªs
) {

755 
h
 = 
buf
;

769 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosù] [gëaddröfo] gëho°by«mêÁûuª [%s][%d]\n", 
ho°«me
, 
p‹t
));

770 
h
 = 
NULL
;

771 
	`‰ì
(
buf
);

780 
h
 = 
NULL
;

781 #i‡!
	`deföed
(
__¨c__
)

782 
h
 = 
	`gëho°by«me
(
ho°«me
);

785 i‡(!
h
) {

786 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosù] [gëaddröfo] gëho°by«mêÁûuª [%s][%d]\n", 
ho°«me
, 
p‹t
));

792 i‡(
h
) {

793 *
addröfo
 = 
	`osù_he2ai
(
h
, 
p‹t
, 
¥Ÿocﬁ
);

795 i‡(
buf
)

796 
	`‰ì
(
buf
);

799  
OSIP_SUCCESS
;

800 
	}
}

804 
	$_eXosù_gëp‹t
(c⁄° 
sockaddr
 *
ß
) {

805 i‡(
ß
->
ß_Ámûy
 =
AF_INET
)

806  
	`¡ohs
(((
sockaddr_ö
 *Ë
ß
)->
sö_p‹t
);

808  
	`¡ohs
(((
sockaddr_ö6
 *Ë
ß
)->
sö6_p‹t
);

809 
	}
}

811 #i‡
deföed
(
__¨c__
)

813 
	$_eXosù_gë«meöfo
(c⁄° 
sockaddr
 *
ß
, 
sockÀn_t
 
ßÀn
, *
ho°
, sockÀn_à
ho°Àn
, *
£rv
, sockÀn_à
£rvÀn
, 
Êags
) {

814 
sockaddr_ö
 *
‰omß
 = (sockaddr_ö *Ë
ß
;

815 *
tmp
;

817 
tmp
 = 
	`öë_¡ﬂ
(
‰omß
->
sö_addr
);

819 i‡(
tmp
 =
NULL
) {

820 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] [getnameinfo] failure [?]\n"));

821 
	`¢¥ötf
(
ho°
, 
ho°Àn
, "127.0.0.1");

822  
OSIP_UNDEFINED_ERROR
;

825 
	`¢¥ötf
(
ho°
, 
ho°Àn
, "%s", 
tmp
);

826  
OSIP_SUCCESS
;

827 
	}
}

830 
	$_eXosù_gë«meöfo
(c⁄° 
sockaddr
 *
ß
, 
sockÀn_t
 
ßÀn
, *
ho°
, sockÀn_à
ho°Àn
, *
£rv
, sockÀn_à
£rvÀn
, 
Êags
) {

831 
îr
;

833 
îr
 = 
	`gë«meöfo
((
sockaddr
 *Ë
ß
, 
ßÀn
, 
ho°
, 
ho°Àn
, 
£rv
, 
£rvÀn
, 
Êags
);

835 i‡(
îr
 != 0) {

836 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosù] [gë«meöfo] faûuª [%i]\n", 
îr
));

837 
	`¢¥ötf
(
ho°
, 
ho°Àn
, "127.0.0.1");

838  
OSIP_UNDEFINED_ERROR
;

841  
OSIP_SUCCESS
;

842 
	}
}

845 
	$_eXosù_guess_ù_f‹_vü
(
eXosù_t
 *
exc⁄ãxt
, 
Ámûy
, *
addªss
, 
size
) {

846 i‡(
Ámûy
 =
AF_INET
)

847  
	`_eXosù_guess_ù_f‹_de°ö©i⁄
(
exc⁄ãxt
, 
Ámûy
,Éxc⁄ãxt->
ùv4_f‹_g©eway
, 
addªss
, 
size
);

849  
	`_eXosù_guess_ù_f‹_de°ö©i⁄
(
exc⁄ãxt
, 
Ámûy
,Éxc⁄ãxt->
ùv6_f‹_g©eway
, 
addªss
, 
size
);

850 
	}
}

852 #i‡
deföed
(
HAVE_WINSOCK2_H
)

854 
	$_eXosù_guess_ù_f‹_de°ö©i⁄
(
eXosù_t
 *
exc⁄ãxt
, 
Ámûy
, *
de°ö©i⁄
, *
addªss
, 
size
) {

855 
SOCKET
 
sock
;

857 
SOCKADDR_STORAGE
 
loˇl_addr
;

859 
loˇl_addr_Àn
;

861 
addröfo
 *
addrf
 = 
NULL
;

862 
ty≥
;

864 
addªss
[0] = '\0';

866 i‡(
de°ö©i⁄
 =
NULL
 && 
Ámûy
 =
AF_INET
)

867 
de°ö©i⁄
 = 
exc⁄ãxt
->
ùv4_f‹_g©eway
;

869 i‡(
de°ö©i⁄
 =
NULL
 && 
Ámûy
 =
AF_INET6
)

870 
de°ö©i⁄
 = 
exc⁄ãxt
->
ùv6_f‹_g©eway
;

872 
ty≥
 = 
SOCK_DGRAM
;

873 #i‡
	`deföed
(
SOCK_CLOEXEC
)

874 
ty≥
 = 
SOCK_CLOEXEC
 | 
SOCK_DGRAM
;

876 
sock
 = 
	`sockë
(
Ámûy
, 
ty≥
, 0);

878 
	`_eXosù_gë_addröfo
(
exc⁄ãxt
, &
addrf
, 
de°ö©i⁄
, 0, 
IPPROTO_UDP
);

880 i‡(
addrf
 =
NULL
) {

881 i‡(
Ámûy
 =
AF_INET
) {

882 
	`_eXosù_gë_addröfo
(
exc⁄ãxt
, &
addrf
, "217.12.3.11", 0, 
IPPROTO_UDP
);

884 } i‡(
Ámûy
 =
AF_INET6
) {

885 
	`_eXosù_gë_addröfo
(
exc⁄ãxt
, &
addrf
, "2001:638:500:101:2e0:81ff:„24:37c6", 0, 
IPPROTO_UDP
);

889 i‡(
addrf
 =
NULL
) {

890 
	`_eXosù_˛o£sockë
(
sock
);

891 
	`¢¥ötf
(
addªss
, 
size
, (
Ámûy
 =
AF_INET
) ? "127.0.0.1" : "::1");

892  
OSIP_NO_NETWORK
;

895 i‡(
	`WSAIo˘l
(
sock
, 
SIO_ROUTING_INTERFACE_QUERY
, 
addrf
->
ai_addr
, (
DWORD
Ëaddrf->
ai_addæí
, &
loˇl_addr
, ÷oˇl_addr), &
loˇl_addr_Àn
, 
NULL
, NULL) != 0) {

896 
	`_eXosù_˛o£sockë
(
sock
);

897 
	`_eXosù_‰ìaddröfo
(
addrf
);

898 
	`¢¥ötf
(
addªss
, 
size
, (
Ámûy
 =
AF_INET
) ? "127.0.0.1" : "::1");

899  
OSIP_NO_NETWORK
;

902 
	`_eXosù_˛o£sockë
(
sock
);

903 
	`_eXosù_‰ìaddröfo
(
addrf
);

905 i‡(
	`_eXosù_gë«meöfo
((c⁄° 
sockaddr
 *Ë&
loˇl_addr
, 
loˇl_addr_Àn
, 
addªss
, 
size
, 
NULL
, 0, 
NI_NUMERICHOST
)) {

906 
	`¢¥ötf
(
addªss
, 
size
, (
Ámûy
 =
AF_INET
) ? "127.0.0.1" : "::1");

907  
OSIP_NO_NETWORK
;

910  
OSIP_SUCCESS
;

911 
	}
}

913 
	$_eXosù_guess_ù_f‹_de°ö©i⁄sock
(
eXosù_t
 *
exc⁄ãxt
, 
Ámûy
, 
¥Ÿo
, 
sockaddr_°‹age
 *
udp_loˇl_böd
, 
sock
, *
de°ö©i⁄
, *
addªss
, 
size
) {

914 
SOCKADDR_STORAGE
 
loˇl_addr
;

916 
DWORD
 
loˇl_addr_Àn
;

918 
addröfo
 *
addrf
 = 
NULL
;

920 
addªss
[0] = '\0';

922 i‡(
de°ö©i⁄
 =
NULL
 && 
Ámûy
 =
AF_INET
)

923 
de°ö©i⁄
 = 
exc⁄ãxt
->
ùv4_f‹_g©eway
;

925 i‡(
de°ö©i⁄
 =
NULL
 && 
Ámûy
 =
AF_INET6
)

926 
de°ö©i⁄
 = 
exc⁄ãxt
->
ùv6_f‹_g©eway
;

928 
	`_eXosù_gë_addröfo
(
exc⁄ãxt
, &
addrf
, 
de°ö©i⁄
, 0, 
¥Ÿo
);

930 i‡(
addrf
 =
NULL
) {

931 i‡(
Ámûy
 =
AF_INET
) {

932 
	`_eXosù_gë_addröfo
(
exc⁄ãxt
, &
addrf
, "217.12.3.11", 0, 
¥Ÿo
);

934 } i‡(
Ámûy
 =
AF_INET6
) {

935 
	`_eXosù_gë_addröfo
(
exc⁄ãxt
, &
addrf
, "2001:638:500:101:2e0:81ff:„24:37c6", 0, 
¥Ÿo
);

939 i‡(
addrf
 =
NULL
) {

940 
	`¢¥ötf
(
addªss
, 
size
, (
Ámûy
 =
AF_INET
) ? "127.0.0.1" : "::1");

941  
OSIP_NO_NETWORK
;

944 i‡(
	`WSAIo˘l
(
sock
, 
SIO_ROUTING_INTERFACE_QUERY
, 
addrf
->
ai_addr
, (
DWORD
Ëaddrf->
ai_addæí
, &
loˇl_addr
, ÷oˇl_addr), &
loˇl_addr_Àn
, 
NULL
, NULL) != 0) {

945 
	`_eXosù_‰ìaddröfo
(
addrf
);

946 
	`¢¥ötf
(
addªss
, 
size
, (
Ámûy
 =
AF_INET
) ? "127.0.0.1" : "::1");

947  
OSIP_NO_NETWORK
;

950 
	`_eXosù_‰ìaddröfo
(
addrf
);

952 i‡(
	`_eXosù_gë«meöfo
((c⁄° 
sockaddr
 *Ë&
loˇl_addr
, (
sockÀn_t
Ë
loˇl_addr_Àn
, 
addªss
, 
size
, 
NULL
, 0, 
NI_NUMERICHOST
)) {

953 
	`¢¥ötf
(
addªss
, 
size
, (
Ámûy
 =
AF_INET
) ? "127.0.0.1" : "::1");

954  
OSIP_NO_NETWORK
;

957  
OSIP_SUCCESS
;

958 
	}
}

962 #ifde‡
HAVE_SYS_IOCTL_H


963 
	~<sys/io˘l.h
>

965 #ifde‡
HAVE_SYS_PARAM_H


966 
	~<sys/∑øm.h
>

969 #ifde‡
HAVE_GETIFADDRS


971 
	~<iÁddrs.h
>

972 
	~<√t/if.h
>

973 
	$_eXosù_deÁu…_g©eway_wôh_gëiÁddrs
(
ty≥
, *
addªss
, 
size
) {

974 
iÁddrs
 *
iÂ
;

976 
iÁddrs
 *
iÂ°¨t
;

978 
ªt
 = -1;

980 i‡(
	`gëiÁddrs
(&
iÂ°¨t
) < 0) {

981  
OSIP_NO_NETWORK
;

984 
iÂ
 = 
iÂ°¨t
; iÂ !
NULL
; iÂ = iÂ->
iÁ_√xt
) {

985 i‡(
iÂ
->
iÁ_addr
 && iÂ->iÁ_addr->
ß_Ámûy
 =
ty≥
 && (iÂ->
iÁ_Êags
 & 
IFF_RUNNING
Ë&& !(iÂ->iÁ_Êag†& 
IFF_LOOPBACK
)) {

986 
	`_eXosù_gë«meöfo
(
iÂ
->
iÁ_addr
, (
ty≥
 =
AF_INET6
Ë? (
sockaddr_ö6
Ë: (
sockaddr_ö
), 
addªss
, 
size
, 
NULL
, 0, 
NI_NUMERICHOST
);

988 i‡(
	`°rchr
(
addªss
, '%'Ë=
NULL
) {

989 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosù] [deÁu… g©eway:gëiÁddrs] found [%s:%s]\n", (
ty≥
 =
AF_INET6
Ë? "AF_INET6" : "AF_INET", 
addªss
));

990 
ªt
 = 0;

996 
	`‰ìiÁddrs
(
iÂ°¨t
);

997  
ªt
;

998 
	}
}

1004 
	$_eXosù_deÁu…_g©eway_ùv4
(*
de°ö©i⁄
, *
addªss
, 
size
) {

1005 
sockÀn_t
 
Àn
;

1006 
sock_π
, 
⁄
 = 1;

1008 
sockaddr_ö
 
iÁ˚_out
;

1010 
sockaddr_ö
 
ªmŸe
;

1011 
ty≥
;

1013 
	`mem£t
(&
ªmŸe
, 0, (
sockaddr_ö
));

1015 
ªmŸe
.
sö_Ámûy
 = 
AF_INET
;

1016 
ªmŸe
.
sö_addr
.
s_addr
 = 
	`öë_addr
(
de°ö©i⁄
);

1017 
ªmŸe
.
sö_p‹t
 = 
	`ht⁄s
(11111);

1019 
	`mem£t
(&
iÁ˚_out
, 0, (iface_out));

1021 
ty≥
 = 
SOCK_DGRAM
;

1022 #i‡
	`deföed
(
SOCK_CLOEXEC
)

1023 
ty≥
 = 
SOCK_CLOEXEC
 | 
SOCK_DGRAM
;

1025 
sock_π
 = 
	`sockë
(
AF_INET
, 
ty≥
, 0);

1027 i‡(
	`£tsock›t
(
sock_π
, 
SOL_SOCKET
, 
SO_BROADCAST
, &
⁄
, (on)) == -1) {

1028 
	`_eXosù_˛o£sockë
(
sock_π
);

1029 
	`¢¥ötf
(
addªss
, 
size
, "127.0.0.1");

1030  
OSIP_NO_NETWORK
;

1033 i‡(
	`c⁄√˘
(
sock_π
, (
sockaddr
 *Ë&
ªmŸe
, (
sockaddr_ö
)) == -1) {

1034 
	`_eXosù_˛o£sockë
(
sock_π
);

1035 
	`¢¥ötf
(
addªss
, 
size
, "127.0.0.1");

1036  
OSIP_NO_NETWORK
;

1039 
Àn
 = (
iÁ˚_out
);

1041 i‡(
	`gësock«me
(
sock_π
, (
sockaddr
 *Ë&
iÁ˚_out
, &
Àn
) == -1) {

1042 
	`_eXosù_˛o£sockë
(
sock_π
);

1043 
	`¢¥ötf
(
addªss
, 
size
, "127.0.0.1");

1044  
OSIP_NO_NETWORK
;

1047 
	`_eXosù_˛o£sockë
(
sock_π
);

1049 i‡(
iÁ˚_out
.
sö_addr
.
s_addr
 == 0) {

1050 
	`¢¥ötf
(
addªss
, 
size
, "127.0.0.1");

1051  
OSIP_NO_NETWORK
;

1054 
	`osù_°∫˝y
(
addªss
, 
	`öë_¡ﬂ
(
iÁ˚_out
.
sö_addr
), 
size
 - 1);

1055  
OSIP_SUCCESS
;

1056 
	}
}

1061 
	$_eXosù_deÁu…_g©eway_ùv6
(*
de°ö©i⁄
, *
addªss
, 
size
) {

1062 
sockÀn_t
 
Àn
;

1063 
sock_π
, 
⁄
 = 1;

1065 
sockaddr_ö6
 
iÁ˚_out
;

1067 
sockaddr_ö6
 
ªmŸe
;

1068 
ty≥
;

1070 
	`mem£t
(&
ªmŸe
, 0, (
sockaddr_ö6
));

1072 
ªmŸe
.
sö6_Ámûy
 = 
AF_INET6
;

1073 
	`öë_±⁄
(
AF_INET6
, 
de°ö©i⁄
, &
ªmŸe
.
sö6_addr
);

1074 
ªmŸe
.
sö6_p‹t
 = 
	`ht⁄s
(11111);

1076 
	`mem£t
(&
iÁ˚_out
, 0, (iface_out));

1077 
ty≥
 = 
SOCK_DGRAM
;

1078 #i‡
	`deföed
(
SOCK_CLOEXEC
)

1079 
ty≥
 = 
SOCK_CLOEXEC
 | 
SOCK_DGRAM
;

1081 
sock_π
 = 
	`sockë
(
AF_INET6
, 
ty≥
, 0);

1083 
	`¢¥ötf
(
addªss
, 
size
, "::1");

1085 i‡(
	`£tsock›t
(
sock_π
, 
SOL_SOCKET
, 
SO_BROADCAST
, &
⁄
, (on)) == -1) {

1086 
	`_eXosù_˛o£sockë
(
sock_π
);

1087  
OSIP_NO_NETWORK
;

1090 i‡(
	`c⁄√˘
(
sock_π
, (
sockaddr
 *Ë&
ªmŸe
, (
sockaddr_ö6
)) == -1) {

1091 
	`_eXosù_˛o£sockë
(
sock_π
);

1092  
OSIP_NO_NETWORK
;

1095 
Àn
 = (
iÁ˚_out
);

1097 i‡(
	`gësock«me
(
sock_π
, (
sockaddr
 *Ë&
iÁ˚_out
, &
Àn
) == -1) {

1098 
	`_eXosù_˛o£sockë
(
sock_π
);

1099  
OSIP_NO_NETWORK
;

1102 
	`_eXosù_˛o£sockë
(
sock_π
);

1104 
	`öë_¡›
(
AF_INET6
, (c⁄° *Ë&
iÁ˚_out
.
sö6_addr
, 
addªss
, 
size
 - 1);

1105  
OSIP_SUCCESS
;

1106 
	}
}

1108 
	$_eXosù_guess_ù_f‹_de°ö©i⁄
(
eXosù_t
 *
exc⁄ãxt
, 
Ámûy
, *
de°ö©i⁄
, *
addªss
, 
size
) {

1109 
îr
;

1111 i‡(
Ámûy
 =
AF_INET6
) {

1112 
îr
 = 
	`_eXosù_deÁu…_g©eway_ùv6
(
de°ö©i⁄
, 
addªss
, 
size
);

1115 
îr
 = 
	`_eXosù_deÁu…_g©eway_ùv4
(
de°ö©i⁄
, 
addªss
, 
size
);

1118 #ifde‡
HAVE_GETIFADDRS


1120 i‡(
îr
 < 0)

1121 
îr
 = 
	`_eXosù_deÁu…_g©eway_wôh_gëiÁddrs
(
Ámûy
, 
addªss
, 
size
);

1124  
îr
;

1125 
	}
}

1130 
	$_eXosù_deÁu…_g©eway_ùv4sock
(
¥Ÿo
, 
sockaddr_°‹age
 *
udp_loˇl_böd
, 
sock
, *
de°ö©i⁄
, *
addªss
, 
size
) {

1131 
sockÀn_t
 
Àn
;

1132 
sockaddr_ö
 
iÁ˚_out
;

1133 
ty≥
;

1135 
	`¢¥ötf
(
addªss
, 
size
, "127.0.0.1");

1137 i‡(
udp_loˇl_böd
 !
NULL
) {

1138 
sockaddr_ö
 
ªmŸe
;

1142 
	`mem£t
(&
ªmŸe
, 0, (
sockaddr_ö
));

1143 
ªmŸe
.
sö_Ámûy
 = 
AF_INET
;

1144 
ªmŸe
.
sö_addr
.
s_addr
 = 
	`öë_addr
(
de°ö©i⁄
);

1145 
ªmŸe
.
sö_p‹t
 = 
	`ht⁄s
(11111);

1147 
	`mem˝y
(&
iÁ˚_out
, 
udp_loˇl_böd
, (iface_out));

1148 
Àn
 = (
iÁ˚_out
);

1149 
iÁ˚_out
.
sö_p‹t
 = 
	`ht⁄s
(0);

1151 
ty≥
 = 
SOCK_DGRAM
;

1152 #i‡
	`deföed
(
SOCK_CLOEXEC
)

1153 
ty≥
 = 
SOCK_CLOEXEC
 | 
SOCK_DGRAM
;

1155 
sock
 = 
	`sockë
(
AF_INET
, 
ty≥
, 
¥Ÿo
);

1157 i‡(
	`böd
(
sock
, (
sockaddr
 *Ë&
iÁ˚_out
, 
Àn
) < 0) {

1158 
	`_eXosù_˛o£sockë
(
sock
);

1159  
OSIP_NO_NETWORK
;

1162 i‡(
	`c⁄√˘
(
sock
, (
sockaddr
 *Ë&
ªmŸe
, (
sockaddr_ö
)) == -1) {

1163 
	`_eXosù_˛o£sockë
(
sock
);

1164  
OSIP_NO_NETWORK
;

1167 
Àn
 = (
iÁ˚_out
);

1169 i‡(
	`gësock«me
(
sock
, (
sockaddr
 *Ë&
iÁ˚_out
, &
Àn
) == -1) {

1170 
	`_eXosù_˛o£sockë
(
sock
);

1171  
OSIP_NO_NETWORK
;

1174 
	`_eXosù_˛o£sockë
(
sock
);

1176 i‡(
iÁ˚_out
.
sö_addr
.
s_addr
 == 0) {

1177  
OSIP_NO_NETWORK
;

1180 
	`osù_°∫˝y
(
addªss
, 
	`öë_¡ﬂ
(
iÁ˚_out
.
sö_addr
), 
size
 - 1);

1181  
OSIP_SUCCESS
;

1184 
	`mem£t
(&
iÁ˚_out
, 0, (iface_out));

1185 
Àn
 = (
iÁ˚_out
);

1187 i‡(
	`gësock«me
(
sock
, (
sockaddr
 *Ë&
iÁ˚_out
, &
Àn
) == -1) {

1188  
OSIP_NO_NETWORK
;

1191 i‡(
iÁ˚_out
.
sö_addr
.
s_addr
 == 0) {

1192  
OSIP_NO_NETWORK
;

1195 
	`osù_°∫˝y
(
addªss
, 
	`öë_¡ﬂ
(
iÁ˚_out
.
sö_addr
), 
size
 - 1);

1196  
OSIP_SUCCESS
;

1197 
	}
}

1202 
	$_eXosù_deÁu…_g©eway_ùv6sock
(
¥Ÿo
, 
sockaddr_°‹age
 *
udp_loˇl_böd
, 
sock
, *
de°ö©i⁄
, *
addªss
, 
size
) {

1203 
sockÀn_t
 
Àn
;

1204 
sockaddr_ö6
 
iÁ˚_out
;

1205 
ty≥
;

1207 
	`¢¥ötf
(
addªss
, 
size
, "::1");

1209 i‡(
udp_loˇl_böd
 !
NULL
) {

1211 
sockaddr_ö6
 
ªmŸe
;

1213 
	`mem£t
(&
ªmŸe
, 0, (
sockaddr_ö6
));

1214 
ªmŸe
.
sö6_Ámûy
 = 
AF_INET6
;

1215 
	`öë_±⁄
(
AF_INET6
, 
de°ö©i⁄
, &
ªmŸe
.
sö6_addr
);

1216 
ªmŸe
.
sö6_p‹t
 = 
	`ht⁄s
(11111);

1218 
	`mem˝y
(&
iÁ˚_out
, 
udp_loˇl_böd
, (iface_out));

1219 
Àn
 = (
iÁ˚_out
);

1220 
iÁ˚_out
.
sö6_p‹t
 = 
	`ht⁄s
(0);

1222 
ty≥
 = 
SOCK_DGRAM
;

1223 #i‡
	`deföed
(
SOCK_CLOEXEC
)

1224 
ty≥
 = 
SOCK_CLOEXEC
 | 
SOCK_DGRAM
;

1226 
sock
 = 
	`sockë
(
AF_INET6
, 
ty≥
, 
¥Ÿo
);

1228 i‡(
	`böd
(
sock
, (
sockaddr
 *Ë&
iÁ˚_out
, 
Àn
) < 0) {

1229 
	`_eXosù_˛o£sockë
(
sock
);

1230  
OSIP_NO_NETWORK
;

1233 i‡(
	`c⁄√˘
(
sock
, (
sockaddr
 *Ë&
ªmŸe
, (
sockaddr_ö6
)) == -1) {

1234 
	`_eXosù_˛o£sockë
(
sock
);

1235  
OSIP_NO_NETWORK
;

1238 
Àn
 = (
iÁ˚_out
);

1240 i‡(
	`gësock«me
(
sock
, (
sockaddr
 *Ë&
iÁ˚_out
, &
Àn
) == -1) {

1241 
	`_eXosù_˛o£sockë
(
sock
);

1242  
OSIP_NO_NETWORK
;

1245 
	`_eXosù_˛o£sockë
(
sock
);

1247 
	`öë_¡›
(
AF_INET6
, (c⁄° *Ë&
iÁ˚_out
.
sö6_addr
, 
addªss
, 
size
 - 1);

1248  
OSIP_SUCCESS
;

1251 
	`mem£t
(&
iÁ˚_out
, 0, (iface_out));

1252 
Àn
 = (
iÁ˚_out
);

1254 i‡(
	`gësock«me
(
sock
, (
sockaddr
 *Ë&
iÁ˚_out
, &
Àn
) == -1) {

1255  
OSIP_NO_NETWORK
;

1258 
	`öë_¡›
(
AF_INET6
, (c⁄° *Ë&
iÁ˚_out
.
sö6_addr
, 
addªss
, 
size
 - 1);

1259  
OSIP_SUCCESS
;

1260 
	}
}

1262 
	$_eXosù_guess_ù_f‹_de°ö©i⁄sock
(
eXosù_t
 *
exc⁄ãxt
, 
Ámûy
, 
¥Ÿo
, 
sockaddr_°‹age
 *
udp_loˇl_böd
, 
sock
, *
de°ö©i⁄
, *
addªss
, 
size
) {

1263 
îr
;

1265 i‡(
Ámûy
 =
AF_INET6
) {

1266 
îr
 = 
	`_eXosù_deÁu…_g©eway_ùv6sock
(
¥Ÿo
, 
udp_loˇl_böd
, 
sock
, 
de°ö©i⁄
, 
addªss
, 
size
);

1269 
îr
 = 
	`_eXosù_deÁu…_g©eway_ùv4sock
(
¥Ÿo
, 
udp_loˇl_böd
, 
sock
, 
de°ö©i⁄
, 
addªss
, 
size
);

1272 #ifde‡
HAVE_GETIFADDRS


1274 i‡(
îr
 < 0)

1275 
îr
 = 
	`_eXosù_deÁu…_g©eway_wôh_gëiÁddrs
(
Ámûy
, 
addªss
, 
size
);

1278  
îr
;

1279 
	}
}

1283 *
	$_eXosù_°rdup_¥ötf
(c⁄° *
fmt
, ...) {

1285 
n
, 
size
 = 100;

1287 *
p
;

1289 
va_li°
 
≠
;

1291 i‡((
p
 = 
	`osù_mÆloc
(
size
)Ë=
NULL
)

1292  
NULL
;

1296 
	`VA_START
(
≠
, 
fmt
);

1297 #ifde‡
WIN32


1298 
n
 = 
	`_v¢¥ötf
(
p
, 
size
, 
fmt
, 
≠
);

1300 
n
 = 
	`v¢¥ötf
(
p
, 
size
, 
fmt
, 
≠
);

1302 
	`va_íd
(
≠
);

1305 i‡(
n
 > -1 &&Ç < 
size
)

1306  
p
;

1309 i‡(
n
 > -1)

1310 
size
 = 
n
 + 1;

1312 
size
 *= 2;

1314 i‡((
p
 = 
	`osù_ªÆloc
’, 
size
)Ë=
NULL
)

1315  
NULL
;

1317 
	}
}

1319 #i‡!
deföed
(
USE_GETHOSTBYNAME
)

1321 
	$_exosù_isùv4addr
(c⁄° *
ù
) {

1322 
i
;

1324 
i
 = 0; i < 4 && *
ù
 != '\0'; i++) {

1325 *
ù
 != '\0' && (*ip >= '0') && (*ip <= '9'))

1326 
ù
++;

1328 i‡(*
ù
 != '\0') {

1329 i‡(*
ù
 ='.' && 
i
 < 3)

1330 
ù
++;

1337 i‡(
i
 =4 && *
ù
 == '\0')

1341 
	}
}

1343 
	$_eXosù_gë_addröfo
(
eXosù_t
 *
exc⁄ãxt
, 
addröfo
 **addröfo, c⁄° *
ho°«me
, 
£rvi˚
, 
¥Ÿocﬁ
) {

1344 
addröfo
 
höts
;

1345 
p‹tbuf
[10];

1346 
îr‹
;

1347 
i
;

1349 
tm∂og
[512] = {'\0'};

1350 
size_log
 = 0;

1352 i‡(
£rvi˚
 == -1) {

1354 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO1
, 
NULL
, "[eXosip] [getaddrinfo] obsolete code\n"));

1358 
size_log
 = 
	`¢¥ötf
(
tm∂og
, (tmplog), "[eXosip] [getaddrinfo]");

1359 i‡(
ho°«me
 !
NULL
)

1360 
size_log
 +
	`¢¥ötf
(
tm∂og
 + size_log, —m∂ogË- size_log, " dn†[%s][%d]", 
ho°«me
, 
£rvi˚
);

1362 i‡(
exc⁄ãxt
 !
NULL
 && 
ho°«me
 != NULL) {

1363 
i
 = 0; i < 
MAX_EXOSIP_DNS_ENTRY
; i++) {

1364 i‡(
exc⁄ãxt
->
dns_íåõs
[
i
].
ho°
[0] !'\0' && 0 =
	`osù_°rˇ£cmp
”xc⁄ãxt->dns_íåõs[i].ho°, 
ho°«me
)) {

1366 i‡(
exc⁄ãxt
->
dns_íåõs
[
i
].
ù
[0] != '\0') {

1367 
ho°«me
 = 
exc⁄ãxt
->
dns_íåõs
[
i
].
ù
;

1368 
size_log
 +
	`¢¥ötf
(
tm∂og
 + size_log, —m∂ogË- size_log, " cached[%s]", 
exc⁄ãxt
->
dns_íåõs
[
i
].
ù
);

1375 
	`¢¥ötf
(
p‹tbuf
, ’‹tbuf), "%i", 
£rvi˚
);

1377 
	`mem£t
(&
höts
, 0, (hints));

1379 
höts
.
ai_Êags
 = 0;

1381 i‡(
ho°«me
 =
NULL
) {

1382 
höts
.
ai_Êags
 = 
AI_PASSIVE
;

1385 i‡(
exc⁄ãxt
->
ùv6_íabÀ
 > 1)

1386 
höts
.
ai_Ámûy
 = 
AF_UNSPEC
;

1388 i‡(
exc⁄ãxt
->
ùv6_íabÀ
)

1389 
höts
.
ai_Ámûy
 = 
PF_INET6
;

1392 
höts
.
ai_Ámûy
 = 
PF_INET
;

1394 i‡(
ho°«me
 =
NULL
) {

1395 } i‡(
	`°rchr
(
ho°«me
, ':'Ë!
NULL
)

1396 
höts
.
ai_Ámûy
 = 
PF_INET6
;

1398 i‡(
	`_exosù_isùv4addr
(
ho°«me
))

1399 
höts
.
ai_Ámûy
 = 
PF_INET
;

1401 i‡(
¥Ÿocﬁ
 =
IPPROTO_UDP
)

1402 
höts
.
ai_sockty≥
 = 
SOCK_DGRAM
;

1405 
höts
.
ai_sockty≥
 = 
SOCK_STREAM
;

1407 
höts
.
ai_¥Ÿocﬁ
 = 
¥Ÿocﬁ
;

1408 
îr‹
 = 
	`gëaddröfo
(
ho°«me
, 
p‹tbuf
, &
höts
, 
addröfo
);

1410 i‡(
îr‹
 || *
addröfo
 =
NULL
) {

1411 
eb
[
ERRBSIZ
];

1412 #i‡
	`deföed
(
HAVE_RESOLV_H
)

1418 i‡(
îr‹
 =
EAI_AGAIN
)

1419 
	`ªs_öô
();

1422 
size_log
 +
	`¢¥ötf
(
tm∂og
 + size_log, —m∂ogË- size_log, " faûuª %s", 
	`_ex_gai_°ªº‹
(
îr‹
, 
eb
, 
ERRBSIZ
));

1423 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "%s\n", 
tm∂og
));

1424  
OSIP_UNKNOWN_HOST
;

1427 
addröfo
 *
ñem
;

1429 
tmp
[
INET6_ADDRSTRLEN
];

1431 
p‹âmp
[10];

1433 
size_log
 +
	`¢¥ötf
(
tm∂og
 + size_log, (tmplog) - size_log, " = ");

1435 
ñem
 = *
addröfo
;ÉÀm !
NULL
;ÉÀm =ÉÀm->
ai_√xt
) {

1436 
	`_eXosù_gë«meöfo
(
ñem
->
ai_addr
, (
sockÀn_t
Ëñem->
ai_addæí
, 
tmp
, —mp), 
p‹âmp
, ’‹âmp), 
NI_NUMERICHOST
 | 
NI_NUMERICSERV
);

1437 
size_log
 +
	`¢¥ötf
(
tm∂og
 + size_log, —m∂ogË- size_log, " [%s][%s]", 
tmp
, 
p‹âmp
);

1440 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO1
, 
NULL
, "%s\n", 
tm∂og
));

1443  
OSIP_SUCCESS
;

1444 
	}
}

1447 
	$osù_§v_ªc‹d_s‹t
(
osù_§v_ªc‹d
 *
ªc
, 
n
) {

1448 
i
;

1449 
≥rmuts
;

1450 
osù_§v_íåy
 
sw≠
;

1453 
osù_§v_íåy
 *
s1
, *
s2
;

1455 
≥rmuts
 = 0;

1457 
i
 = 0; i < 
n
 - 1; ++i) {

1458 
s1
 = &
ªc
->
§víåy
[
i
];

1459 
s2
 = &
ªc
->
§víåy
[
i
 + 1];

1461 i‡(
s1
->
¥i‹ôy
 > 
s2
->priority) {

1462 
	`mem˝y
(&
sw≠
, 
s1
, (swap));

1463 
	`mem˝y
(
s1
, 
s2
, (
sw≠
));

1464 
	`mem˝y
(
s2
, &
sw≠
, (swap));

1465 
≥rmuts
++;

1468 } 
≥rmuts
 != 0);

1469 
	}
}

1471 
	$_eXosù_§v_lookup
(
eXosù_t
 *
exc⁄ãxt
, 
osù_mesßge_t
 *
sù
, 
osù_«±r_t
 **
«±r_ªc‹d
) {

1472 
u£_§v
 = 1;

1473 *
ho°
;

1474 
osù_vü_t
 *
vü
;

1476 
vü
 = (
osù_vü_t
 *Ë
	`osù_li°_gë
(&
sù
->
vüs
, 0);

1478 i‡(
vü
 =
NULL
 || vü->
¥Ÿocﬁ
 == NULL)

1479  
OSIP_BADPARAMETER
;

1481 i‡(
	`MSG_IS_REQUEST
(
sù
)) {

1482 
osù_rouã_t
 *
rouã
;

1484 i‡(
sù
->
sù_mëhod
 =
NULL
)

1485  
OSIP_BADPARAMETER
;

1487 
	`osù_mesßge_gë_rouã
(
sù
, 0, &
rouã
);

1489 i‡(
rouã
 !
NULL
) {

1490 
osù_uri_∑øm_t
 *
Ã_∑øm
 = 
NULL
;

1492 
	`osù_uri_u∑øm_gë_by«me
(
rouã
->
uæ
, "Ã", &
Ã_∑øm
);

1494 i‡(
Ã_∑øm
 =
NULL
)

1495 
rouã
 = 
NULL
;

1498 i‡(
rouã
 !
NULL
) {

1499 i‡(
rouã
->
uæ
->
p‹t
 !
NULL
) {

1500 
u£_§v
 = 0;

1503 
ho°
 = 
rouã
->
uæ
->host;

1507 
osù_uri_∑øm_t
 *
maddr_∑øm
 = 
NULL
;

1509 
	`osù_uri_u∑øm_gë_by«me
(
sù
->
ªq_uri
, "maddr", &
maddr_∑øm
);

1510 
ho°
 = 
NULL
;

1512 i‡(
maddr_∑øm
 !
NULL
 && maddr_∑øm->
gvÆue
 != NULL)

1513 
ho°
 = 
maddr_∑øm
->
gvÆue
;

1515 i‡(
sù
->
ªq_uri
->
p‹t
 !
NULL
) {

1516 
u£_§v
 = 0;

1519 i‡(
ho°
 =
NULL
)

1520 
ho°
 = 
sù
->
ªq_uri
->host;

1524 
osù_gíîic_∑øm_t
 *
maddr
;

1526 
osù_gíîic_∑øm_t
 *
ª˚ived
;

1528 
osù_gíîic_∑øm_t
 *
Ω‹t
;

1530 
	`osù_vü_∑øm_gë_by«me
(
vü
, "maddr", &
maddr
);

1531 
	`osù_vü_∑øm_gë_by«me
(
vü
, "ª˚ived", &
ª˚ived
);

1532 
	`osù_vü_∑øm_gë_by«me
(
vü
, "Ω‹t", &
Ω‹t
);

1534 i‡(
maddr
 !
NULL
)

1535 
ho°
 = 
maddr
->
gvÆue
;

1537 i‡(
ª˚ived
 !
NULL
)

1538 
ho°
 = 
ª˚ived
->
gvÆue
;

1541 
ho°
 = 
vü
->host;

1543 i‡(
vü
->
p‹t
 =
NULL
)

1544 
u£_§v
 = 0;

1547 i‡(
ho°
 =
NULL
) {

1548  
OSIP_UNKNOWN_HOST
;

1552 i‡(
	`°rchr
(
ho°
, ':'Ë|| (
INADDR_NONE
 !
	`öë_addr
(host))) {

1553  
OSIP_UNDEFINED_ERROR
;

1556 i‡(
u£_§v
 == 1) {

1557 
kìp_ö_ˇche
 = 
	`MSG_IS_REGISTER
(
sù
) ? 1 : 0;

1567 
osù_gíîic_∑øm_t
 *
èg
 = 
NULL
;

1569 i‡(
exc⁄ãxt
->
dns_ˇ∑bûôõs
 <= 0) {

1570 *
«±r_ªc‹d
 = 
NULL
;

1571  
OSIP_SUCCESS
;

1574 
	`osù_to_gë_èg
(
sù
->
to
, &
èg
);

1576 i‡(
èg
 !
NULL
)

1577 *
«±r_ªc‹d
 = 
	`eXosù_dnsutûs_«±r
(
exc⁄ãxt
, 
ho°
, "sù", 
vü
->
¥Ÿocﬁ
, -1);

1580 *
«±r_ªc‹d
 = 
	`eXosù_dnsutûs_«±r
(
exc⁄ãxt
, 
ho°
, "sù", 
vü
->
¥Ÿocﬁ
, 
kìp_ö_ˇche
);

1582  
OSIP_SUCCESS
;

1585  
OSIP_UNDEFINED_ERROR
;

1586 
	}
}

1588 
	$eXosù_dnsutûs_rŸ©e_§v
(
osù_§v_ªc‹d_t
 *
§v_ªc‹d
) {

1589 
n
;

1590 
¥ev_idx
 = 
§v_ªc‹d
->
ödex
;

1592 i‡(
§v_ªc‹d
->
§víåy
[0].
§v
[0] == '\0')

1595 
§v_ªc‹d
->
ödex
++;

1597 i‡(
§v_ªc‹d
->
§víåy
[§v_ªc‹d->
ödex
].
§v
[0] == '\0')

1598 
§v_ªc‹d
->
ödex
 = 0;

1600 
n
 = 1;Ç < 10 && 
§v_ªc‹d
->
§víåy
[n].
§v
[0] != '\0';Ç++) {

1603 i‡(
¥ev_idx
 !
§v_ªc‹d
->
ödex
) {

1604 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO1
, 
NULL
, "[eXosù] faûovî wôh SRV [%s][%d] -> [%s][%d]\n", 
§v_ªc‹d
->
§víåy
[
¥ev_idx
].
§v
, srv_ªc‹d->§víåy[¥ev_idx].
p‹t
,

1605 
§v_ªc‹d
->
§víåy
[§v_ªc‹d->
ödex
].
§v
, srv_ªc‹d->§víåy[§v_ªc‹d->ödex].
p‹t
));

1608  
n
 - 1;

1609 
	}
}

1611 #ifde‡
SRV_RECORD


1613 
osù_li°_t
 *
	gdnsutûs_li°
 = 
NULL
;

1615 
	#EXOSIP_DNSUTILS_FIND_SNI_DEFINED


	)

1616 c⁄° *
	$_eXosù_dnsutûs_föd_¢i
(
eXosù_t
 *
exc⁄ãxt
, c⁄° *
ho°«me
) {

1617 
osù_li°_ôî©‹_t
 
ô
;

1618 
osù_«±r
 *
«±r_ªc‹d
;

1620 i‡(
dnsutûs_li°
 =
NULL
)

1621  
NULL
;

1623 
«±r_ªc‹d
 = (
osù_«±r_t
 *Ë
	`osù_li°_gë_fú°
(
dnsutûs_li°
, &
ô
);

1625 
«±r_ªc‹d
 !
NULL
) {

1626 i‡(
«±r_ªc‹d
->
«±r_°©e
 =
OSIP_NAPTR_STATE_SRVDONE
) {

1627 
idx
;

1628 
idx
 = 1; idx < 10 && 
«±r_ªc‹d
->
sùés_ªc‹d
.
§víåy
[idx].
§v
[0] != '\0'; idx++) {

1629 i‡(
	`osù_°rˇ£cmp
(
ho°«me
, 
«±r_ªc‹d
->
sùés_ªc‹d
.
§víåy
[
idx
].
§v
) == 0)

1630  
«±r_ªc‹d
->
domaö
;

1634 
«±r_ªc‹d
 = (
osù_«±r_t
 *Ë
	`osù_li°_gë_√xt
(&
ô
);

1637  
NULL
;

1638 
	}
}

1640 #i‡!
deföed
(
EXOSIP_DNSUTILS_DEFINED
Ë&& (deföed(
HAVE_CARES_H
Ë|| deföed(
HAVE_ARES_H
))

1641 
	#EXOSIP_DNSUTILS_DEFINED


	)

1643 #ifde‡
HAVE_ARPA_NAMESER_H


1644 
	~<¨∑/«me£r.h
>

1646 
	~"«me£r.h
"

1648 #ifde‡
HAVE_ARPA_NAMESER_COMPAT_H


1649 
	~<¨∑/«me£r_com∑t.h
>

1652 #i‚de‡
HFIXEDSZ


1653 
	#HFIXEDSZ
 12

	)

1655 #i‚de‡
QFIXEDSZ


1656 
	#QFIXEDSZ
 4

	)

1658 #i‚de‡
RRFIXEDSZ


1659 
	#RRFIXEDSZ
 10

	)

1662 #i‚de‡
T_A


1663 
	#T_A
 1

	)

1666 #i‚de‡
T_AAAA


1667 
	#T_AAAA
 28

	)

1670 #i‚de‡
T_SRV


1671 
	#T_SRV
 33

	)

1674 #i‚de‡
T_NAPTR


1675 
	#T_NAPTR
 35

	)

1678 #i‚de‡
C_IN


1679 
	#C_IN
 1

	)

1682 #ifde‡
HAVE_SYS_TIME_H


1683 
	~<sys/time.h
>

1685 #ifde‡
HAVE_STRINGS_H


1686 
	~<°rögs.h
>

1689 
	~<¨es.h
>

1690 
	~<¨es_dns.h
>

1691 
	~<˘y≥.h
>

1692 
	~<î∫o.h
>

1693 
	~<°dio.h
>

1694 
	~<°dlib.h
>

1695 
	~<°rög.h
>

1697 #i‡!
deföed
(
HAVE_INET_NTOP
)

1698 
	~"öë_¡›.h
"

1701 #ifde‡
USE_WINSOCK


1702 
	#SOCKERRNO
 ((Ë
	`WSAGëLa°Eº‹
())

	)

1703 
	#SET_SOCKERRNO
(
x
Ë(
	`WSASëLa°Eº‹
((Ë(x)))

	)

1705 
	#SOCKERRNO
 (
î∫o
)

	)

1706 
	#SET_SOCKERRNO
(
x
Ë(
î∫o
 = (x))

	)

1709 c⁄° *
	$skù_que°i⁄
(c⁄° *
≠å
, c⁄° *
abuf
, 
Æí
) {

1710 *
«me
;

1711 
°©us
;

1712 
Àn
;

1714 
°©us
 = 
	`¨es_ex∑nd_«me
(
≠å
, 
abuf
, 
Æí
, &
«me
, &
Àn
);

1716 i‡(
°©us
 !
ARES_SUCCESS
)

1717  
NULL
;

1719 
≠å
 +
Àn
;

1721 
	`¨es_‰ì_°rög
(
«me
);

1723 i‡(
≠å
 + 
QFIXEDSZ
 > 
abuf
 + 
Æí
) {

1724  
NULL
;

1727 
≠å
 +
QFIXEDSZ
;

1728  
≠å
;

1729 
	}
}

1731 c⁄° *
	$ßve_A
(
osù_«±r_t
 *
ouçut_ªc‹d
, c⁄° *
≠å
, c⁄° *
abuf
, 
Æí
) {

1732 
º_«me
[512];

1735 
ty≥
, 
dÀn
, 
°©us
;

1736 
Àn
;

1737 
addr
[46];

1739 *
as_uch¨
;

1740 *
as_ch¨
;

1741 } 
«me
;

1744 
°©us
 = 
	`¨es_ex∑nd_«me
(
≠å
, 
abuf
, 
Æí
, &
«me
.
as_ch¨
, &
Àn
);

1746 i‡(
°©us
 !
ARES_SUCCESS
)

1747  
NULL
;

1749 
≠å
 +
Àn
;

1751 i‡(
≠å
 + 
RRFIXEDSZ
 > 
abuf
 + 
Æí
) {

1752 
	`¨es_‰ì_°rög
(
«me
.
as_ch¨
);

1753  
NULL
;

1756 
ty≥
 = 
	`DNS_RR_TYPE
(
≠å
);

1759 
dÀn
 = 
	`DNS_RR_LEN
(
≠å
);

1760 
≠å
 +
RRFIXEDSZ
;

1762 i‡(
≠å
 + 
dÀn
 > 
abuf
 + 
Æí
) {

1763 
	`¨es_‰ì_°rög
(
«me
.
as_ch¨
);

1764  
NULL
;

1767 
	`¢¥ötf
(
º_«me
, ‘r_«me), "%s", 
«me
.
as_ch¨
);

1768 
	`¨es_‰ì_°rög
(
«me
.
as_ch¨
);

1770 
ty≥
) {

1771 
T_A
:

1774 
n
;

1775 
osù_§v_íåy_t
 *
§víåy
;

1777 i‡(
dÀn
 != 4)

1778  
NULL
;

1780 
	`öë_¡›
(
AF_INET
, 
≠å
, 
addr
, (addr));

1781 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosù] [ßve_AÑec‹d] [%s] -> [%s]\n", 
º_«me
, 
addr
));

1783 
n
 = 0;Ç < 10;Ç++) {

1784 i‡(
	`osù_°rˇ£cmp
(
º_«me
, 
ouçut_ªc‹d
->
sùudp_ªc‹d
.
§víåy
[
n
].
§v
) == 0) {

1785 
§víåy
 = &
ouçut_ªc‹d
->
sùudp_ªc‹d
.§víåy[
n
];

1786 
	`¢¥ötf
(
§víåy
->
ùaddªss
, (§víåy->ùaddªss), "%s", 
addr
);

1789 i‡(
	`osù_°rˇ£cmp
(
º_«me
, 
ouçut_ªc‹d
->
sùt˝_ªc‹d
.
§víåy
[
n
].
§v
) == 0) {

1790 
§víåy
 = &
ouçut_ªc‹d
->
sùt˝_ªc‹d
.§víåy[
n
];

1791 
	`¢¥ötf
(
§víåy
->
ùaddªss
, (§víåy->ùaddªss), "%s", 
addr
);

1794 i‡(
	`osù_°rˇ£cmp
(
º_«me
, 
ouçut_ªc‹d
->
sùés_ªc‹d
.
§víåy
[
n
].
§v
) == 0) {

1795 
§víåy
 = &
ouçut_ªc‹d
->
sùés_ªc‹d
.§víåy[
n
];

1796 
	`¢¥ötf
(
§víåy
->
ùaddªss
, (§víåy->ùaddªss), "%s", 
addr
);

1799 i‡(
	`osù_°rˇ£cmp
(
º_«me
, 
ouçut_ªc‹d
->
sùdés_ªc‹d
.
§víåy
[
n
].
§v
) == 0) {

1800 
§víåy
 = &
ouçut_ªc‹d
->
sùdés_ªc‹d
.§víåy[
n
];

1801 
	`¢¥ötf
(
§víåy
->
ùaddªss
, (§víåy->ùaddªss), "%s", 
addr
);

1804 i‡(
	`osù_°rˇ£cmp
(
º_«me
, 
ouçut_ªc‹d
->
sùs˘p_ªc‹d
.
§víåy
[
n
].
§v
) == 0) {

1805 
§víåy
 = &
ouçut_ªc‹d
->
sùs˘p_ªc‹d
.§víåy[
n
];

1806 
	`¢¥ötf
(
§víåy
->
ùaddªss
, (§víåy->ùaddªss), "%s", 
addr
);

1813 
T_AAAA
:

1816 i‡(
dÀn
 != 16)

1817  
NULL
;

1819 
	`öë_¡›
(
AF_INET6
, 
≠å
, 
addr
, (addr));

1820 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosù] [ßve_AAAAÑec‹d] [%s] -> [%s]\n", 
º_«me
, 
addr
));

1827  
≠å
 + 
dÀn
;

1828 
	}
}

1830 c⁄° *
	$ßve_SRV
(
osù_«±r_t
 *
ouçut_ªc‹d
, c⁄° *
≠å
, c⁄° *
abuf
, 
Æí
) {

1831 
º_«me
[512];

1834 
ty≥
, 
dÀn
, 
°©us
;

1835 
Àn
;

1837 *
as_uch¨
;

1838 *
as_ch¨
;

1839 } 
«me
;

1841 
°©us
 = 
	`¨es_ex∑nd_«me
(
≠å
, 
abuf
, 
Æí
, &
«me
.
as_ch¨
, &
Àn
);

1843 i‡(
°©us
 !
ARES_SUCCESS
)

1844  
NULL
;

1846 
≠å
 +
Àn
;

1848 i‡(
≠å
 + 
RRFIXEDSZ
 > 
abuf
 + 
Æí
) {

1849 
	`¨es_‰ì_°rög
(
«me
.
as_ch¨
);

1850  
NULL
;

1853 
ty≥
 = 
	`DNS_RR_TYPE
(
≠å
);

1856 
dÀn
 = 
	`DNS_RR_LEN
(
≠å
);

1857 
≠å
 +
RRFIXEDSZ
;

1859 i‡(
≠å
 + 
dÀn
 > 
abuf
 + 
Æí
) {

1860 
	`¨es_‰ì_°rög
(
«me
.
as_ch¨
);

1861  
NULL
;

1864 
	`¢¥ötf
(
º_«me
, ‘r_«me), "%s", 
«me
.
as_ch¨
);

1865 
	`¨es_‰ì_°rög
(
«me
.
as_ch¨
);

1867 
ty≥
) {

1868 
T_SRV
:

1873 
osù_§v_ªc‹d_t
 *
§vªc‹d
 = 
NULL
;

1874 
osù_§v_íåy_t
 *
§víåy
 = 
NULL
;

1875 
n
;

1877 i‡(
	`osù_°rˇ£cmp
(
º_«me
, 
ouçut_ªc‹d
->
sùudp_ªc‹d
.
«me
) == 0)

1878 
§vªc‹d
 = &
ouçut_ªc‹d
->
sùudp_ªc‹d
;

1880 i‡(
	`osù_°rˇ£cmp
(
º_«me
, 
ouçut_ªc‹d
->
sùt˝_ªc‹d
.
«me
) == 0)

1881 
§vªc‹d
 = &
ouçut_ªc‹d
->
sùt˝_ªc‹d
;

1883 i‡(
	`osù_°rˇ£cmp
(
º_«me
, 
ouçut_ªc‹d
->
sùés_ªc‹d
.
«me
) == 0)

1884 
§vªc‹d
 = &
ouçut_ªc‹d
->
sùés_ªc‹d
;

1886 i‡(
	`osù_°rˇ£cmp
(
º_«me
, 
ouçut_ªc‹d
->
sùdés_ªc‹d
.
«me
) == 0)

1887 
§vªc‹d
 = &
ouçut_ªc‹d
->
sùdés_ªc‹d
;

1889 i‡(
	`osù_°rˇ£cmp
(
º_«me
, 
ouçut_ªc‹d
->
sùs˘p_ªc‹d
.
«me
) == 0)

1890 
§vªc‹d
 = &
ouçut_ªc‹d
->
sùs˘p_ªc‹d
;

1895 
n
 = 0;

1897 
n
 < 10 && 
§vªc‹d
->
§víåy
[n].
§v
[0] != '\0')

1898 
n
++;

1900 i‡(
n
 == 10)

1903 
§víåy
 = &
§vªc‹d
->§víåy[
n
];

1905 
§víåy
->
¥i‹ôy
 = 
	`DNS__16BIT
(
≠å
);

1906 
§víåy
->
weight
 = 
	`DNS__16BIT
(
≠å
 + 2);

1907 
§víåy
->
p‹t
 = 
	`DNS__16BIT
(
≠å
 + 4);

1909 i‡(
§víåy
->
weight
)

1910 
§víåy
->
rweight
 = 1 + 
	`ønd
(Ë% (10000 * srvíåy->
weight
);

1913 
§víåy
->
rweight
 = 0;

1915 
°©us
 = 
	`¨es_ex∑nd_«me
(
≠å
 + 6, 
abuf
, 
Æí
, &
«me
.
as_ch¨
, &
Àn
);

1917 i‡(
°©us
 !
ARES_SUCCESS
)

1918  
NULL
;

1920 
	`¢¥ötf
(
§víåy
->
§v
, (§víåy->§v), "%s", 
«me
.
as_ch¨
);

1922 
§vªc‹d
->
§v_°©e
 = 
OSIP_SRV_STATE_COMPLETED
;

1924 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosù] [ßve_SRVÑec‹d] [%s] IN SRV -> [%s][%i][%i][%i][%i]\n", 
º_«me
, 
§víåy
->
§v
, srvíåy->
p‹t
, srvíåy->
¥i‹ôy
, srvíåy->
weight
, srvíåy->
rweight
));

1926 
	`osù_§v_ªc‹d_s‹t
(
§vªc‹d
, 
n
 + 1);

1927 
	`¨es_‰ì_°rög
(
«me
.
as_ch¨
);

1935  
≠å
 + 
dÀn
;

1936 
	}
}

1938 c⁄° *
	$ßve_NAPTR
(
osù_«±r_t
 *
ouçut_ªc‹d
, c⁄° *
≠å
, c⁄° *
abuf
, 
Æí
) {

1939 
º_«me
[512];

1940 c⁄° *
p
;

1943 
ty≥
, 
dÀn
, 
°©us
;

1944 
Àn
;

1946 *
as_uch¨
;

1947 *
as_ch¨
;

1948 } 
«me
;

1950 
°©us
 = 
	`¨es_ex∑nd_«me
(
≠å
, 
abuf
, 
Æí
, &
«me
.
as_ch¨
, &
Àn
);

1952 i‡(
°©us
 !
ARES_SUCCESS
)

1953  
NULL
;

1955 
≠å
 +
Àn
;

1957 i‡(
≠å
 + 
RRFIXEDSZ
 > 
abuf
 + 
Æí
) {

1958 
	`¨es_‰ì_°rög
(
«me
.
as_ch¨
);

1959  
NULL
;

1962 
ty≥
 = 
	`DNS_RR_TYPE
(
≠å
);

1965 
dÀn
 = 
	`DNS_RR_LEN
(
≠å
);

1966 
≠å
 +
RRFIXEDSZ
;

1968 i‡(
≠å
 + 
dÀn
 > 
abuf
 + 
Æí
) {

1969 
	`¨es_‰ì_°rög
(
«me
.
as_ch¨
);

1970  
NULL
;

1973 
	`¢¥ötf
(
º_«me
, ‘r_«me), "%s", 
«me
.
as_ch¨
);

1974 
	`¨es_‰ì_°rög
(
«me
.
as_ch¨
);

1976 
ty≥
) {

1977 
T_NAPTR
: {

1978 
osù_§v_ªc‹d_t
 
§vªc‹d
;

1980 
	`mem£t
(&
§vªc‹d
, 0, (
osù_§v_ªc‹d_t
));

1982 
§vªc‹d
.
‹dî
 = 
	`DNS__16BIT
(
≠å
);

1983 
§vªc‹d
.
¥e„ªn˚
 = 
	`DNS__16BIT
(
≠å
 + 2);

1985 
p
 = 
≠å
 + 4;

1987 
°©us
 = 
	`¨es_ex∑nd_°rög
(
p
, 
abuf
, 
Æí
, &
«me
.
as_uch¨
, &
Àn
);

1989 i‡(
°©us
 !
ARES_SUCCESS
)

1990  
NULL
;

1992 
	`¢¥ötf
(
§vªc‹d
.
Êag
, (§vªc‹d.Êag), "%s", 
«me
.
as_ch¨
);

1993 
	`¨es_‰ì_°rög
(
«me
.
as_ch¨
);

1994 
p
 +
Àn
;

1996 
°©us
 = 
	`¨es_ex∑nd_°rög
(
p
, 
abuf
, 
Æí
, &
«me
.
as_uch¨
, &
Àn
);

1998 i‡(
°©us
 !
ARES_SUCCESS
)

1999  
NULL
;

2001 
	`¢¥ötf
(
§vªc‹d
.
¥Ÿocﬁ
, (§vªc‹d.¥Ÿocﬁ), "%s", 
«me
.
as_ch¨
);

2002 
	`¨es_‰ì_°rög
(
«me
.
as_ch¨
);

2003 
p
 +
Àn
;

2005 
°©us
 = 
	`¨es_ex∑nd_°rög
(
p
, 
abuf
, 
Æí
, &
«me
.
as_uch¨
, &
Àn
);

2007 i‡(
°©us
 !
ARES_SUCCESS
)

2008  
NULL
;

2010 
	`¢¥ötf
(
§vªc‹d
.
ªgexp
, (§vªc‹d.ªgexp), "%s", 
«me
.
as_uch¨
);

2011 
	`¨es_‰ì_°rög
(
«me
.
as_ch¨
);

2012 
p
 +
Àn
;

2014 
°©us
 = 
	`¨es_ex∑nd_«me
(
p
, 
abuf
, 
Æí
, &
«me
.
as_ch¨
, &
Àn
);

2016 i‡(
°©us
 !
ARES_SUCCESS
)

2017  
NULL
;

2019 
	`¢¥ötf
(
§vªc‹d
.
ª∂a˚mít
, (§vªc‹d.ª∂a˚mít), "%s", 
«me
.
as_ch¨
);

2020 
	`¨es_‰ì_°rög
(
«me
.
as_ch¨
);

2022 i‡(
§vªc‹d
.
Êag
[0] == 's' || srvrecord.flag[0] == 'S') {

2023 
	`¢¥ötf
(
§vªc‹d
.
«me
, (§vªc‹d.«me), "%s", srvªc‹d.
ª∂a˚mít
);

2026 i‡(
§vªc‹d
.
Êag
[0] == 'a' || srvrecord.flag[0] == 'A') {

2027 
	`¢¥ötf
(
§vªc‹d
.
«me
, (§vªc‹d.«me), "%s", srvªc‹d.
ª∂a˚mít
);

2030 i‡(
§vªc‹d
.
Êag
[0] == 'u' || srvrecord.flag[0] == 'U') {

2031 
	`«±r_íum_m©ch_™d_ª∂a˚
(
ouçut_ªc‹d
, &
§vªc‹d
);

2034 
§vªc‹d
.
§v_°©e
 = 
OSIP_SRV_STATE_UNKNOWN
;

2036 i‡(
	`osù_°∫ˇ£cmp
(
§vªc‹d
.
«me
, "_sù._udp.", 10Ë=0 || osù_°∫ˇ£cmp(§vªc‹d.
¥Ÿocﬁ
, "SIP+D2U", 8) == 0) {

2037 
	`mem˝y
(&
ouçut_ªc‹d
->
sùudp_ªc‹d
, &
§vªc‹d
, (
osù_§v_ªc‹d_t
));

2039 } i‡(
	`osù_°∫ˇ£cmp
(
§vªc‹d
.
«me
, "_sù._t˝.", 10Ë=0 || osù_°∫ˇ£cmp(§vªc‹d.
¥Ÿocﬁ
, "SIP+D2T", 8) == 0) {

2040 
	`mem˝y
(&
ouçut_ªc‹d
->
sùt˝_ªc‹d
, &
§vªc‹d
, (
osù_§v_ªc‹d_t
));

2042 } i‡(
	`osù_°∫ˇ£cmp
(
§vªc‹d
.
¥Ÿocﬁ
, "SIPS+D2T", 9) == 0) {

2043 
	`mem˝y
(&
ouçut_ªc‹d
->
sùés_ªc‹d
, &
§vªc‹d
, (
osù_§v_ªc‹d_t
));

2045 } i‡(
	`osù_°∫ˇ£cmp
(
§vªc‹d
.
¥Ÿocﬁ
, "SIPS+D2U", 9) == 0) {

2046 
	`mem˝y
(&
ouçut_ªc‹d
->
sùdés_ªc‹d
, &
§vªc‹d
, (
osù_§v_ªc‹d_t
));

2048 } i‡(
	`osù_°∫ˇ£cmp
(
§vªc‹d
.
¥Ÿocﬁ
, "SIP+D2S", 8) == 0) {

2049 
	`mem˝y
(&
ouçut_ªc‹d
->
sùs˘p_ªc‹d
, &
§vªc‹d
, (
osù_§v_ªc‹d_t
));

2051 } i‡(
	`osù_°∫ˇ£cmp
(
§vªc‹d
.
¥Ÿocﬁ
, "E2U+SIP", 8) == 0 || osip_strncasecmp(srvrecord.protocol, "SIP+E2U", 8) == 0) {

2052 
§vªc‹d
.
§v_°©e
 = 
OSIP_SRV_STATE_COMPLETED
;

2053 
	`mem˝y
(&
ouçut_ªc‹d
->
sùíum_ªc‹d
, &
§vªc‹d
, (
osù_§v_ªc‹d_t
));

2056 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosù] [ßve_NAPTRÑec‹d] [%s] -> [%i][%i][%s][%s][%s]\n", 
º_«me
, 
§vªc‹d
.
‹dî
, srvªc‹d.
¥e„ªn˚
, srvªc‹d.
¥Ÿocﬁ
, srvªc‹d.
ªgexp
, srvªc‹d.
«me
));

2063  
≠å
 + 
dÀn
;

2064 
	}
}

2066 
	$_°‹e_A
(*
¨g
, 
°©us
, 
timeouts
, *
abuf
, 
Æí
, 
vîbo£
) {

2067 
osù_«±r_t
 *
ouçut_ªc‹d
 = (osù_«±r_à*Ë
¨g
;

2070 
qr
, 
Ø
, 
tc
, 
rd
, 
ø
, 
›code
, 
rcode
;

2072 
qdcou¡
, 
™cou¡
, 
nscou¡
, 
¨cou¡
, 
i
;

2073 c⁄° *
≠å
;

2075 (Ë
timeouts
;

2077 i‡(
°©us
 !
ARES_SUCCESS
) {

2078 i‡(
vîbo£
) {

2079 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_WARNING
, 
NULL
, "[eXosù] [DNS AÑec‹d] [%s] [%s]\n", 
ouçut_ªc‹d
->
domaö
, 
	`¨es_°ªº‹
(
°©us
)));

2082 i‡(!
abuf
)

2086 i‡(
Æí
 < 
HFIXEDSZ
)

2091 
qr
 = 
	`DNS_HEADER_QR
(
abuf
);

2092 
›code
 = 
	`DNS_HEADER_OPCODE
(
abuf
);

2093 
Ø
 = 
	`DNS_HEADER_AA
(
abuf
);

2094 
tc
 = 
	`DNS_HEADER_TC
(
abuf
);

2095 
rd
 = 
	`DNS_HEADER_RD
(
abuf
);

2096 
ø
 = 
	`DNS_HEADER_RA
(
abuf
);

2097 
rcode
 = 
	`DNS_HEADER_RCODE
(
abuf
);

2099 
qdcou¡
 = 
	`DNS_HEADER_QDCOUNT
(
abuf
);

2100 
™cou¡
 = 
	`DNS_HEADER_ANCOUNT
(
abuf
);

2101 
nscou¡
 = 
	`DNS_HEADER_NSCOUNT
(
abuf
);

2102 
¨cou¡
 = 
	`DNS_HEADER_ARCOUNT
(
abuf
);

2105 
≠å
 = 
abuf
 + 
HFIXEDSZ
;

2107 
i
 = 0; i < 
qdcou¡
; i++) {

2108 
≠å
 = 
	`skù_que°i⁄
◊±r, 
abuf
, 
Æí
);

2110 i‡(
≠å
 =
NULL
)

2115 
i
 = 0; i < 
™cou¡
; i++) {

2116 
≠å
 = 
	`ßve_A
(
ouçut_ªc‹d
,á±r, 
abuf
, 
Æí
);

2118 i‡(
≠å
 =
NULL
)

2123 
i
 = 0; i < 
nscou¡
; i++) {

2124 
≠å
 = 
	`ßve_A
(
ouçut_ªc‹d
,á±r, 
abuf
, 
Æí
);

2126 i‡(
≠å
 =
NULL
)

2131 
i
 = 0; i < 
¨cou¡
; i++) {

2132 
≠å
 = 
	`ßve_A
(
ouçut_ªc‹d
,á±r, 
abuf
, 
Æí
);

2134 i‡(
≠å
 =
NULL
)

2137 
	}
}

2139 
	$_°‹e_§v
(*
¨g
, 
°©us
, 
timeouts
, *
abuf
, 
Æí
, 
vîbo£
) {

2140 
osù_«±r_t
 *
ouçut_ªc‹d
 = (osù_«±r_à*Ë
¨g
;

2143 
qr
, 
Ø
, 
tc
, 
rd
, 
ø
, 
›code
, 
rcode
;

2145 
qdcou¡
, 
™cou¡
, 
nscou¡
, 
¨cou¡
, 
i
;

2146 c⁄° *
≠å
;

2148 (Ë
timeouts
;

2150 i‡(
°©us
 !
ARES_SUCCESS
) {

2151 i‡(
vîbo£
) {

2152 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_WARNING
, 
NULL
, "[eXosù] [DNS SRVÑec‹d] [%s] [%s]\n", 
ouçut_ªc‹d
->
domaö
, 
	`¨es_°ªº‹
(
°©us
)));

2155 i‡(!
abuf
)

2159 i‡(
Æí
 < 
HFIXEDSZ
)

2164 
qr
 = 
	`DNS_HEADER_QR
(
abuf
);

2165 
›code
 = 
	`DNS_HEADER_OPCODE
(
abuf
);

2166 
Ø
 = 
	`DNS_HEADER_AA
(
abuf
);

2167 
tc
 = 
	`DNS_HEADER_TC
(
abuf
);

2168 
rd
 = 
	`DNS_HEADER_RD
(
abuf
);

2169 
ø
 = 
	`DNS_HEADER_RA
(
abuf
);

2170 
rcode
 = 
	`DNS_HEADER_RCODE
(
abuf
);

2172 
qdcou¡
 = 
	`DNS_HEADER_QDCOUNT
(
abuf
);

2173 
™cou¡
 = 
	`DNS_HEADER_ANCOUNT
(
abuf
);

2174 
nscou¡
 = 
	`DNS_HEADER_NSCOUNT
(
abuf
);

2175 
¨cou¡
 = 
	`DNS_HEADER_ARCOUNT
(
abuf
);

2178 
≠å
 = 
abuf
 + 
HFIXEDSZ
;

2180 
i
 = 0; i < 
qdcou¡
; i++) {

2181 
≠å
 = 
	`skù_que°i⁄
◊±r, 
abuf
, 
Æí
);

2183 i‡(
≠å
 =
NULL
)

2188 
i
 = 0; i < 
™cou¡
; i++) {

2189 
≠å
 = 
	`ßve_SRV
(
ouçut_ªc‹d
,á±r, 
abuf
, 
Æí
);

2191 i‡(
≠å
 =
NULL
)

2196 
i
 = 0; i < 
nscou¡
; i++) {

2197 
≠å
 = 
	`ßve_SRV
(
ouçut_ªc‹d
,á±r, 
abuf
, 
Æí
);

2199 i‡(
≠å
 =
NULL
)

2204 
i
 = 0; i < 
¨cou¡
; i++) {

2205 
≠å
 = 
	`ßve_SRV
(
ouçut_ªc‹d
,á±r, 
abuf
, 
Æí
);

2207 i‡(
≠å
 =
NULL
)

2210 
	}
}

2212 
	$_°‹e_«±r
(*
¨g
, 
°©us
, 
timeouts
, *
abuf
, 
Æí
, 
vîbo£
) {

2213 
osù_«±r_t
 *
ouçut_ªc‹d
 = (osù_«±r_à*Ë
¨g
;

2216 
qr
, 
Ø
, 
tc
, 
rd
, 
ø
, 
›code
, 
rcode
;

2218 
qdcou¡
, 
™cou¡
, 
nscou¡
, 
¨cou¡
, 
i
;

2219 c⁄° *
≠å
;

2221 (Ë
timeouts
;

2223 i‡(
°©us
 !
ARES_SUCCESS
) {

2224 i‡(
vîbo£
) {

2225 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_WARNING
, 
NULL
, "[eXosù] [DNS NAPTRÑec‹d] [%s] [%s]\n", 
ouçut_ªc‹d
->
domaö
, 
	`¨es_°ªº‹
(
°©us
)));

2228 i‡(!
abuf
)

2232 i‡(
Æí
 < 
HFIXEDSZ
)

2237 
qr
 = 
	`DNS_HEADER_QR
(
abuf
);

2238 
›code
 = 
	`DNS_HEADER_OPCODE
(
abuf
);

2239 
Ø
 = 
	`DNS_HEADER_AA
(
abuf
);

2240 
tc
 = 
	`DNS_HEADER_TC
(
abuf
);

2241 
rd
 = 
	`DNS_HEADER_RD
(
abuf
);

2242 
ø
 = 
	`DNS_HEADER_RA
(
abuf
);

2243 
rcode
 = 
	`DNS_HEADER_RCODE
(
abuf
);

2245 
qdcou¡
 = 
	`DNS_HEADER_QDCOUNT
(
abuf
);

2246 
™cou¡
 = 
	`DNS_HEADER_ANCOUNT
(
abuf
);

2247 
nscou¡
 = 
	`DNS_HEADER_NSCOUNT
(
abuf
);

2248 
¨cou¡
 = 
	`DNS_HEADER_ARCOUNT
(
abuf
);

2251 
≠å
 = 
abuf
 + 
HFIXEDSZ
;

2253 
i
 = 0; i < 
qdcou¡
; i++) {

2254 
≠å
 = 
	`skù_que°i⁄
◊±r, 
abuf
, 
Æí
);

2256 i‡(
≠å
 =
NULL
)

2261 
i
 = 0; i < 
™cou¡
; i++) {

2262 
≠å
 = 
	`ßve_NAPTR
(
ouçut_ªc‹d
,á±r, 
abuf
, 
Æí
);

2264 i‡(
≠å
 =
NULL
)

2269 
i
 = 0; i < 
nscou¡
; i++) {

2270 
≠å
 = 
	`ßve_NAPTR
(
ouçut_ªc‹d
,á±r, 
abuf
, 
Æí
);

2272 i‡(
≠å
 =
NULL
)

2277 
i
 = 0; i < 
¨cou¡
; i++) {

2278 
≠å
 = 
	`ßve_NAPTR
(
ouçut_ªc‹d
,á±r, 
abuf
, 
Æí
);

2280 i‡(
≠å
 =
NULL
)

2283 
	}
}

2285 
	$_§v_ˇŒback
(*
¨g
, 
°©us
, 
timeouts
, *
abuf
, 
Æí
) {

2286 
	`_°‹e_§v
(
¨g
, 
°©us
, 
timeouts
, 
abuf
, 
Æí
, 1);

2287 
	`_°‹e_A
(
¨g
, 
°©us
, 
timeouts
, 
abuf
, 
Æí
, 0);

2288 
	}
}

2290 
	$_«±r_ˇŒback
(*
¨g
, 
°©us
, 
timeouts
, *
abuf
, 
Æí
) {

2291 
osù_«±r_t
 *
ouçut_ªc‹d
 = (osù_«±r_à*Ë
¨g
;

2293 i‡(
°©us
 !
ARES_SUCCESS
 && 
ouçut_ªc‹d
->
AUS
[0] != '\0') {

2294 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosù] [NAPTR cÆlback] [%s] [%s]\n", 
ouçut_ªc‹d
->
domaö
, 
	`¨es_°ªº‹
(
°©us
)));

2296 i‡(
°©us
 =
ARES_ENODATA
)

2297 
ouçut_ªc‹d
->
«±r_°©e
 = 
OSIP_NAPTR_STATE_NOTSUPPORTED
;

2299 i‡(
°©us
 =
ARES_ENOTFOUND
)

2300 
ouçut_ªc‹d
->
«±r_°©e
 = 
OSIP_NAPTR_STATE_RETRYLATER
;

2302 i‡(
°©us
 =
ARES_ETIMEOUT
)

2303 
ouçut_ªc‹d
->
«±r_°©e
 = 
OSIP_NAPTR_STATE_RETRYLATER
;

2305 i‡(
°©us
 =
ARES_ESERVFAIL
)

2306 
ouçut_ªc‹d
->
«±r_°©e
 = 
OSIP_NAPTR_STATE_RETRYLATER
;

2308 i‡(
°©us
 =
ARES_ENOTIMP
)

2309 
ouçut_ªc‹d
->
«±r_°©e
 = 
OSIP_NAPTR_STATE_RETRYLATER
;

2311 i‡(
°©us
 =
ARES_EREFUSED
)

2312 
ouçut_ªc‹d
->
«±r_°©e
 = 
OSIP_NAPTR_STATE_RETRYLATER
;

2315 
ouçut_ªc‹d
->
«±r_°©e
 = 
OSIP_NAPTR_STATE_RETRYLATER
;

2317 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosù] [NAPTR cÆlback] [%s] [%s]\n", 
ouçut_ªc‹d
->
domaö
, 
	`¨es_°ªº‹
(
°©us
)));

2321 i‡(
°©us
 !
ARES_SUCCESS
) {

2322 i‡(
°©us
 =
ARES_ENODATA
 || sètu†=
ARES_ENOTFOUND
) {

2323 
osù_§v_ªc‹d_t
 
§vªc‹d
;

2325 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosù] [NAPTR cÆlback] [%s] [%s]\n", 
ouçut_ªc‹d
->
domaö
, 
	`¨es_°ªº‹
(
°©us
)));

2327 
ouçut_ªc‹d
->
«±r_°©e
 = 
OSIP_NAPTR_STATE_NAPTRDONE
;

2329 
ouçut_ªc‹d
->
sùudp_ªc‹d
.
§v_°©e
 = 
OSIP_SRV_STATE_NOTSUPPORTED
;

2330 
ouçut_ªc‹d
->
sùt˝_ªc‹d
.
§v_°©e
 = 
OSIP_SRV_STATE_NOTSUPPORTED
;

2331 
ouçut_ªc‹d
->
sùés_ªc‹d
.
§v_°©e
 = 
OSIP_SRV_STATE_NOTSUPPORTED
;

2332 
ouçut_ªc‹d
->
sùdés_ªc‹d
.
§v_°©e
 = 
OSIP_SRV_STATE_NOTSUPPORTED
;

2333 
ouçut_ªc‹d
->
sùs˘p_ªc‹d
.
§v_°©e
 = 
OSIP_SRV_STATE_NOTSUPPORTED
;

2334 
ouçut_ªc‹d
->
sùíum_ªc‹d
.
§v_°©e
 = 
OSIP_SRV_STATE_NOTSUPPORTED
;

2336 
	`mem£t
(&
§vªc‹d
, 0, (
osù_§v_ªc‹d_t
));

2338 
§vªc‹d
.
‹dî
 = 49;

2339 
§vªc‹d
.
¥e„ªn˚
 = 49;

2340 
§vªc‹d
.
§v_°©e
 = 
OSIP_SRV_STATE_UNKNOWN
;

2342 
	`¢¥ötf
(
§vªc‹d
.
¥Ÿocﬁ
, (srvrecord.protocol), "%s", "SIP+D2U");

2343 
	`¢¥ötf
(
§vªc‹d
.
«me
, (§vªc‹d.«me), "_sù._udp.%s", 
ouçut_ªc‹d
->
domaö
);

2344 
	`mem˝y
(&
ouçut_ªc‹d
->
sùudp_ªc‹d
, &
§vªc‹d
, (
osù_§v_ªc‹d_t
));

2346 
	`¢¥ötf
(
§vªc‹d
.
¥Ÿocﬁ
, (srvrecord.protocol), "%s", "SIP+D2T");

2347 
	`¢¥ötf
(
§vªc‹d
.
«me
, (§vªc‹d.«me), "_sù._t˝.%s", 
ouçut_ªc‹d
->
domaö
);

2348 
	`mem˝y
(&
ouçut_ªc‹d
->
sùt˝_ªc‹d
, &
§vªc‹d
, (
osù_§v_ªc‹d_t
));

2350 
	`¢¥ötf
(
§vªc‹d
.
¥Ÿocﬁ
, (srvrecord.protocol), "%s", "SIPS+D2T");

2351 
	`¢¥ötf
(
§vªc‹d
.
«me
, (§vªc‹d.«me), "_sùs._t˝.%s", 
ouçut_ªc‹d
->
domaö
);

2352 
	`mem˝y
(&
ouçut_ªc‹d
->
sùés_ªc‹d
, &
§vªc‹d
, (
osù_§v_ªc‹d_t
));

2354 
	`¢¥ötf
(
§vªc‹d
.
¥Ÿocﬁ
, (srvrecord.protocol), "%s", "SIPS+D2U");

2355 
	`¢¥ötf
(
§vªc‹d
.
«me
, (§vªc‹d.«me), "_sùs._udp.%s", 
ouçut_ªc‹d
->
domaö
);

2356 
	`mem˝y
(&
ouçut_ªc‹d
->
sùdés_ªc‹d
, &
§vªc‹d
, (
osù_§v_ªc‹d_t
));

2358 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosù] [NAPTR cÆlback]ÇÿNAPTRánswî // SRVÑec‹d cª©ed m™uÆly -> [%i][%i][%s]\n", 
§vªc‹d
.
‹dî
, srvªc‹d.
¥e„ªn˚
, srvªc‹d.
«me
));

2364 i‡(
°©us
 !
ARES_SUCCESS
) {

2365 i‡(
°©us
 =
ARES_ENODATA
)

2366 
ouçut_ªc‹d
->
«±r_°©e
 = 
OSIP_NAPTR_STATE_NOTSUPPORTED
;

2368 i‡(
°©us
 =
ARES_ENOTFOUND
)

2369 
ouçut_ªc‹d
->
«±r_°©e
 = 
OSIP_NAPTR_STATE_RETRYLATER
;

2371 i‡(
°©us
 =
ARES_ETIMEOUT
)

2372 
ouçut_ªc‹d
->
«±r_°©e
 = 
OSIP_NAPTR_STATE_RETRYLATER
;

2374 i‡(
°©us
 =
ARES_ESERVFAIL
)

2375 
ouçut_ªc‹d
->
«±r_°©e
 = 
OSIP_NAPTR_STATE_RETRYLATER
;

2377 i‡(
°©us
 =
ARES_ENOTIMP
)

2378 
ouçut_ªc‹d
->
«±r_°©e
 = 
OSIP_NAPTR_STATE_RETRYLATER
;

2380 i‡(
°©us
 =
ARES_EREFUSED
)

2381 
ouçut_ªc‹d
->
«±r_°©e
 = 
OSIP_NAPTR_STATE_RETRYLATER
;

2384 
ouçut_ªc‹d
->
«±r_°©e
 = 
OSIP_NAPTR_STATE_RETRYLATER
;

2386 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosù] [NAPTR cÆlback] [%s] [%s]\n", 
ouçut_ªc‹d
->
domaö
, 
	`¨es_°ªº‹
(
°©us
)));

2392 
ouçut_ªc‹d
->
sùudp_ªc‹d
.
§v_°©e
 = 
OSIP_SRV_STATE_NOTSUPPORTED
;

2393 
ouçut_ªc‹d
->
sùt˝_ªc‹d
.
§v_°©e
 = 
OSIP_SRV_STATE_NOTSUPPORTED
;

2394 
ouçut_ªc‹d
->
sùés_ªc‹d
.
§v_°©e
 = 
OSIP_SRV_STATE_NOTSUPPORTED
;

2395 
ouçut_ªc‹d
->
sùdés_ªc‹d
.
§v_°©e
 = 
OSIP_SRV_STATE_NOTSUPPORTED
;

2396 
ouçut_ªc‹d
->
sùs˘p_ªc‹d
.
§v_°©e
 = 
OSIP_SRV_STATE_NOTSUPPORTED
;

2397 
ouçut_ªc‹d
->
sùíum_ªc‹d
.
§v_°©e
 = 
OSIP_SRV_STATE_NOTSUPPORTED
;

2399 
	`_°‹e_«±r
(
¨g
, 
°©us
, 
timeouts
, 
abuf
, 
Æí
, 1);

2400 
	`_°‹e_§v
(
¨g
, 
°©us
, 
timeouts
, 
abuf
, 
Æí
, 0);

2401 
	`_°‹e_A
(
¨g
, 
°©us
, 
timeouts
, 
abuf
, 
Æí
, 0);

2402 
ouçut_ªc‹d
->
«±r_°©e
 = 
OSIP_NAPTR_STATE_NAPTRDONE
;

2404 i‡(
°©us
 =
ARES_SUCCESS
 && 
ouçut_ªc‹d
->
sùíum_ªc‹d
.
§v_°©e
 =
OSIP_SRV_STATE_COMPLETED
) {

2405 
ouçut_ªc‹d
->
«±r_°©e
 = 
OSIP_NAPTR_STATE_SRVDONE
;

2410 i‡(
°©us
 =
ARES_SUCCESS
 && 
ouçut_ªc‹d
->
sùudp_ªc‹d
.
«me
[0] ='\0' && ouçut_ªc‹d->
sùt˝_ªc‹d
.«me[0] ='\0' && ouçut_ªc‹d->
sùés_ªc‹d
.«me[0] ='\0' && ouçut_ªc‹d->
sùdés_ªc‹d
.name[0] == '\0' &&

2411 
ouçut_ªc‹d
->
sùs˘p_ªc‹d
.
«me
[0] ='\0' && ouçut_ªc‹d->
sùíum_ªc‹d
.name[0] == '\0') {

2412 
osù_§v_ªc‹d_t
 
§vªc‹d
;

2414 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosù] [NAPTR cÆlback] [%s] [%s] [buàmissög NAPTR d©a]\n", 
ouçut_ªc‹d
->
domaö
, 
	`¨es_°ªº‹
(
°©us
)));

2416 
ouçut_ªc‹d
->
«±r_°©e
 = 
OSIP_NAPTR_STATE_NAPTRDONE
;

2418 
ouçut_ªc‹d
->
sùudp_ªc‹d
.
§v_°©e
 = 
OSIP_SRV_STATE_NOTSUPPORTED
;

2419 
ouçut_ªc‹d
->
sùt˝_ªc‹d
.
§v_°©e
 = 
OSIP_SRV_STATE_NOTSUPPORTED
;

2420 
ouçut_ªc‹d
->
sùés_ªc‹d
.
§v_°©e
 = 
OSIP_SRV_STATE_NOTSUPPORTED
;

2421 
ouçut_ªc‹d
->
sùdés_ªc‹d
.
§v_°©e
 = 
OSIP_SRV_STATE_NOTSUPPORTED
;

2422 
ouçut_ªc‹d
->
sùs˘p_ªc‹d
.
§v_°©e
 = 
OSIP_SRV_STATE_NOTSUPPORTED
;

2423 
ouçut_ªc‹d
->
sùíum_ªc‹d
.
§v_°©e
 = 
OSIP_SRV_STATE_NOTSUPPORTED
;

2425 
	`mem£t
(&
§vªc‹d
, 0, (
osù_§v_ªc‹d_t
));

2427 
§vªc‹d
.
‹dî
 = 49;

2428 
§vªc‹d
.
¥e„ªn˚
 = 49;

2429 
§vªc‹d
.
§v_°©e
 = 
OSIP_SRV_STATE_UNKNOWN
;

2431 
	`¢¥ötf
(
§vªc‹d
.
¥Ÿocﬁ
, (srvrecord.protocol), "%s", "SIP+D2U");

2432 
	`¢¥ötf
(
§vªc‹d
.
«me
, (§vªc‹d.«me), "_sù._udp.%s", 
ouçut_ªc‹d
->
domaö
);

2433 
	`mem˝y
(&
ouçut_ªc‹d
->
sùudp_ªc‹d
, &
§vªc‹d
, (
osù_§v_ªc‹d_t
));

2435 
	`¢¥ötf
(
§vªc‹d
.
¥Ÿocﬁ
, (srvrecord.protocol), "%s", "SIP+D2T");

2436 
	`¢¥ötf
(
§vªc‹d
.
«me
, (§vªc‹d.«me), "_sù._t˝.%s", 
ouçut_ªc‹d
->
domaö
);

2437 
	`mem˝y
(&
ouçut_ªc‹d
->
sùt˝_ªc‹d
, &
§vªc‹d
, (
osù_§v_ªc‹d_t
));

2439 
	`¢¥ötf
(
§vªc‹d
.
¥Ÿocﬁ
, (srvrecord.protocol), "%s", "SIPS+D2T");

2440 
	`¢¥ötf
(
§vªc‹d
.
«me
, (§vªc‹d.«me), "_sùs._t˝.%s", 
ouçut_ªc‹d
->
domaö
);

2441 
	`mem˝y
(&
ouçut_ªc‹d
->
sùés_ªc‹d
, &
§vªc‹d
, (
osù_§v_ªc‹d_t
));

2443 
	`¢¥ötf
(
§vªc‹d
.
¥Ÿocﬁ
, (srvrecord.protocol), "%s", "SIPS+D2U");

2444 
	`¢¥ötf
(
§vªc‹d
.
«me
, (§vªc‹d.«me), "_sùs._udp.%s", 
ouçut_ªc‹d
->
domaö
);

2445 
	`mem˝y
(&
ouçut_ªc‹d
->
sùdés_ªc‹d
, &
§vªc‹d
, (
osù_§v_ªc‹d_t
));

2447 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosù] [NAPTR cÆlback]ÇÿNAPTRánswî // SRVÑec‹d cª©ed m™uÆly -> [%i][%i][%s]\n", 
§vªc‹d
.
‹dî
, srvªc‹d.
¥e„ªn˚
, srvªc‹d.
«me
));

2450 
	}
}

2452 #ifde‡
HAVE_SYS_EPOLL_H


2453 
	#EXOSIP_DNSUTILS_CARES_PROCESS_DEFINED


	)

2455 
	$eXosù_dnsutûs_ˇªs_¥o˚ss
(
osù_«±r
 *
ouçut_ªc‹d
, 
¨es_ch™√l
 
ch™√l
) {

2456 
¨es_sockë_t
 
socks
[16] = {

2457 
ARES_SOCKET_BAD
, ARES_SOCKET_BAD, ARES_SOCKET_BAD, ARES_SOCKET_BAD, ARES_SOCKET_BAD, ARES_SOCKET_BAD, ARES_SOCKET_BAD, ARES_SOCKET_BAD,

2458 
ARES_SOCKET_BAD
, ARES_SOCKET_BAD, ARES_SOCKET_BAD, ARES_SOCKET_BAD, ARES_SOCKET_BAD, ARES_SOCKET_BAD, ARES_SOCKET_BAD, ARES_SOCKET_BAD,

2461 
bômask
 = 
	`¨es_gësock
(
ch™√l
, 
socks
, 16);

2463 i‡(
bômask
 != 0) {

2464 
num
;

2466 
nfds
;

2467 
ïfd
;

2468 
n
;

2469 
ïﬁl_evít
 
ï_¨øy
[16];

2471 
ïfd
 = 
	`ïﬁl_¸óã
(16);

2473 i‡(
ïfd
 < 0) {

2474 
ouçut_ªc‹d
->
¨g
 = 
NULL
;

2475 
	`¨es_de°roy
(
ch™√l
);

2476  
OSIP_UNDEFINED_ERROR
;

2479 
num
 = 0;Çum < 
ARES_GETSOCK_MAXNUM
;Çum++) {

2480 
ïﬁl_evít
 
ev
;

2482 
	`mem£t
(&
ev
, 0, (
ïﬁl_evít
));

2484 i‡(
socks
[
num
] =
ARES_SOCKET_BAD
)

2487 
ev
.
evíts
 = 
EPOLLIN
;

2489 i‡(
	`ARES_GETSOCK_READABLE
(
bômask
, 
num
)) {

2490 
ev
.
evíts
 |
EPOLLIN
;

2492 } i‡(
	`ARES_GETSOCK_WRITABLE
(
bômask
, 
num
)) {

2493 
ev
.
evíts
 |
EPOLLOUT
;

2496 
ev
.
d©a
.
fd
 = 
socks
[
num
];

2497 
	`ïﬁl_˘l
(
ïfd
, 
EPOLL_CTL_ADD
, 
socks
[
num
], &
ev
);

2500 
nfds
 = 
	`ïﬁl_waô
(
ïfd
, 
ï_¨øy
, 16, 0);

2502 i‡(
nfds
 < 0 && 
SOCKERRNO
 !
EINVAL
) {

2503 
ouçut_ªc‹d
->
¨g
 = 
NULL
;

2504 
	`¨es_de°roy
(
ch™√l
);

2505  
OSIP_UNDEFINED_ERROR
;

2508 
n
 = 0;Ç < 
nfds
; ++n) {

2509 
	`¨es_¥o˚ss_fd
(
ch™√l
, 
ï_¨øy
[
n
].
d©a
.
fd
,Ép_array[n].data.fd);

2514 
num
 = 0;Çum < 
ARES_GETSOCK_MAXNUM
;Çum++) {

2515 i‡(
socks
[
num
] =
ARES_SOCKET_BAD
)

2518 
	`¨es_¥o˚ss_fd
(
ch™√l
, 
socks
[
num
], socks[num]);

2522 
bômask
 = 
	`¨es_gësock
(
ch™√l
, 
socks
, 16);

2525  
bômask
;

2526 
	}
}

2530 #i‚de‡
EXOSIP_DNSUTILS_CARES_PROCESS_DEFINED


2533 
	#EXOSIP_DNSUTILS_CARES_PROCESS_DEFINED


	)

2534 
	$eXosù_dnsutûs_ˇªs_¥o˚ss
(
osù_«±r
 *
ouçut_ªc‹d
, 
¨es_ch™√l
 
ch™√l
) {

2535 
fd_£t
 
ªad_fds
, 
wrôe_fds
;

2536 
timevÆ
 *
tvp
, 
tv
;

2537 
nfds
;

2538 
cou¡
;

2540 
	`FD_ZERO
(&
ªad_fds
);

2541 
	`FD_ZERO
(&
wrôe_fds
);

2542 
nfds
 = 
	`¨es_fds
(
ch™√l
, &
ªad_fds
, &
wrôe_fds
);

2544 i‡(
nfds
 != 0) {

2545 
tvp
 = 
	`¨es_timeout
(
ch™√l
, 
NULL
, &
tv
);

2546 
tvp
->
tv_£c
 = 0;

2547 
tvp
->
tv_u£c
 = 0;

2548 
cou¡
 = 
	`£À˘
(
nfds
, &
ªad_fds
, &
wrôe_fds
, 
NULL
, 
tvp
);

2550 i‡(
cou¡
 < 0 && 
SOCKERRNO
 !
EINVAL
) {

2551 
ouçut_ªc‹d
->
¨g
 = 
NULL
;

2552 
	`¨es_de°roy
(
ch™√l
);

2553  
OSIP_UNDEFINED_ERROR
;

2556 
	`¨es_¥o˚ss
(
ch™√l
, &
ªad_fds
, &
wrôe_fds
);

2558 
	`FD_ZERO
(&
ªad_fds
);

2559 
	`FD_ZERO
(&
wrôe_fds
);

2560 
nfds
 = 
	`¨es_fds
(
ch™√l
, &
ªad_fds
, &
wrôe_fds
);

2563  
nfds
;

2564 
	}
}

2568 #ifde‡
HAVE_SYS_EPOLL_H


2570 
	#EXOSIP_DNSUTILS_ADDSOCK_EPOLL_DEFINED


	)

2571 
	$_eXosù_dnsutûs_addsock_ïﬁl
(
eXosù_t
 *
exc⁄ãxt
, *
ˇªs_fd_èbÀ
) {

2572 
¨es_sockë_t
 
socks
[16] = {

2573 
ARES_SOCKET_BAD
, ARES_SOCKET_BAD, ARES_SOCKET_BAD, ARES_SOCKET_BAD, ARES_SOCKET_BAD, ARES_SOCKET_BAD, ARES_SOCKET_BAD, ARES_SOCKET_BAD,

2574 
ARES_SOCKET_BAD
, ARES_SOCKET_BAD, ARES_SOCKET_BAD, ARES_SOCKET_BAD, ARES_SOCKET_BAD, ARES_SOCKET_BAD, ARES_SOCKET_BAD, ARES_SOCKET_BAD,

2576 
osù_li°_ôî©‹_t
 
ôî©‹
;

2577 
osù_å™ß˘i⁄_t
 *
å
;

2578 
pos_fd
 = 0;

2580 
å
 = (
osù_å™ß˘i⁄_t
 *Ë
	`osù_li°_gë_fú°
(&
exc⁄ãxt
->
j_osù
->
osù_i˘_å™ß˘i⁄s
, &
ôî©‹
);

2582 
	`osù_li°_ôî©‹_has_ñem
(
ôî©‹
)) {

2583 
¨es_ch™√l
 
ch™√l
 = 
NULL
;

2584 i‡(
å
->
«±r_ªc‹d
 !
NULL
 &&År->«±r_ªc‹d->
¨g
 != NULL) {

2585 i‡(
å
->
°©e
 =
ICT_CALLING
) {

2586 
ch™√l
 = 
å
->
«±r_ªc‹d
->
¨g
;

2588 
bômask
 = 
	`¨es_gësock
(
ch™√l
, 
socks
, 16);

2590 i‡(
bômask
 != 0) {

2591 
num
;

2593 
num
 = 0;Çum < 
ARES_GETSOCK_MAXNUM
;Çum++) {

2594 
ïﬁl_evít
 
ev
;

2596 
	`mem£t
(&
ev
, 0, (
ïﬁl_evít
));

2598 i‡(
socks
[
num
] =
ARES_SOCKET_BAD
)

2601 
ev
.
evíts
 = 
EPOLLIN
;

2603 i‡(
	`ARES_GETSOCK_READABLE
(
bômask
, 
num
)) {

2604 
ev
.
evíts
 |
EPOLLIN
;

2606 } i‡(
	`ARES_GETSOCK_WRITABLE
(
bômask
, 
num
)) {

2607 
ev
.
evíts
 |
EPOLLOUT
;

2610 
ev
.
d©a
.
fd
 = 
socks
[
num
];

2611 
	`ïﬁl_˘l
(
exc⁄ãxt
->
ïfd
, 
EPOLL_CTL_ADD
, 
socks
[
num
], &
ev
);

2612 
ˇªs_fd_èbÀ
[
pos_fd
] = 
socks
[
num
];

2613 
pos_fd
++;

2618 
å
 = (
osù_å™ß˘i⁄_t
 *Ë
	`osù_li°_gë_√xt
(&
ôî©‹
);

2621 
å
 = (
osù_å™ß˘i⁄_t
 *Ë
	`osù_li°_gë_fú°
(&
exc⁄ãxt
->
j_osù
->
osù_ni˘_å™ß˘i⁄s
, &
ôî©‹
);

2623 
	`osù_li°_ôî©‹_has_ñem
(
ôî©‹
)) {

2624 
¨es_ch™√l
 
ch™√l
 = 
NULL
;

2625 i‡(
å
->
«±r_ªc‹d
 !
NULL
 &&År->«±r_ªc‹d->
¨g
 != NULL) {

2626 i‡(
å
->
°©e
 =
NICT_TRYING
) {

2627 
ch™√l
 = 
å
->
«±r_ªc‹d
->
¨g
;

2629 
bômask
 = 
	`¨es_gësock
(
ch™√l
, 
socks
, 16);

2631 i‡(
bômask
 != 0) {

2632 
num
;

2634 
num
 = 0;Çum < 
ARES_GETSOCK_MAXNUM
;Çum++) {

2635 
ïﬁl_evít
 
ev
;

2637 
	`mem£t
(&
ev
, 0, (
ïﬁl_evít
));

2639 i‡(
socks
[
num
] =
ARES_SOCKET_BAD
)

2642 
ev
.
evíts
 = 
EPOLLIN
;

2644 i‡(
	`ARES_GETSOCK_READABLE
(
bômask
, 
num
)) {

2645 
ev
.
evíts
 |
EPOLLIN
;

2647 } i‡(
	`ARES_GETSOCK_WRITABLE
(
bômask
, 
num
)) {

2648 
ev
.
evíts
 |
EPOLLOUT
;

2651 
ev
.
d©a
.
fd
 = 
socks
[
num
];

2652 
	`ïﬁl_˘l
(
exc⁄ãxt
->
ïfd
, 
EPOLL_CTL_ADD
, 
socks
[
num
], &
ev
);

2653 
ˇªs_fd_èbÀ
[
pos_fd
] = 
socks
[
num
];

2654 
pos_fd
++;

2659 
å
 = (
osù_å™ß˘i⁄_t
 *Ë
	`osù_li°_gë_√xt
(&
ôî©‹
);

2662  
OSIP_SUCCESS
;

2663 
	}
}

2665 
	#EXOSIP_DNSUTILS_CHECKSOCK_EPOLL_DEFINED


	)

2666 
	$_eXosù_dnsutûs_checksock_ïﬁl
(
eXosù_t
 *
exc⁄ãxt
, 
nfds
) {

2667 
osù_li°_ôî©‹_t
 
ôî©‹
;

2668 
osù_å™ß˘i⁄_t
 *
å
;

2669 
nbå™ß˘i⁄
 = 0;

2671 
å
 = (
osù_å™ß˘i⁄_t
 *Ë
	`osù_li°_gë_fú°
(&
exc⁄ãxt
->
j_osù
->
osù_i˘_å™ß˘i⁄s
, &
ôî©‹
);

2673 
	`osù_li°_ôî©‹_has_ñem
(
ôî©‹
)) {

2674 
¨es_ch™√l
 
ch™√l
 = 
NULL
;

2675 i‡(
å
->
«±r_ªc‹d
 !
NULL
 &&År->«±r_ªc‹d->
¨g
 != NULL) {

2676 i‡(
å
->
°©e
 =
ICT_CALLING
) {

2677 
¨es_sockë_t
 
socks
[16] = {

2678 
ARES_SOCKET_BAD
, ARES_SOCKET_BAD, ARES_SOCKET_BAD, ARES_SOCKET_BAD, ARES_SOCKET_BAD, ARES_SOCKET_BAD, ARES_SOCKET_BAD, ARES_SOCKET_BAD,

2679 
ARES_SOCKET_BAD
, ARES_SOCKET_BAD, ARES_SOCKET_BAD, ARES_SOCKET_BAD, ARES_SOCKET_BAD, ARES_SOCKET_BAD, ARES_SOCKET_BAD, ARES_SOCKET_BAD,

2681 
num
;

2683 
ch™√l
 = 
å
->
«±r_ªc‹d
->
¨g
;

2685 
bômask
 = 
	`¨es_gësock
(
ch™√l
, 
socks
, 16);

2687 i‡(
bômask
 != 0) {

2688 
num
 = 0;Çum < 
ARES_GETSOCK_MAXNUM
;Çum++) {

2689 i‡(
	`ARES_GETSOCK_READABLE
(
bômask
, 
num
)) {

2690 
n
;

2691 
n
 = 0;Ç < 
nfds
; ++n) {

2692 i‡(
exc⁄ãxt
->
ï_¨øy
[
n
].
d©a
.
fd
 =
socks
[
num
]) {

2693 i‡(
exc⁄ãxt
->
ï_¨øy
[
n
].
evíts
 & 
EPOLLIN
) {

2695 
	`osù_gëtimeofday
(&
å
->
i˘_c⁄ãxt
->
timî_a_°¨t
, 
NULL
);

2696 
	`add_gëtimeofday
(&
å
->
i˘_c⁄ãxt
->
timî_a_°¨t
, 0);

2697 
nbå™ß˘i⁄
++;

2701 } i‡(
	`ARES_GETSOCK_WRITABLE
(
bômask
, 
num
)) {

2702 
n
;

2703 
n
 = 0;Ç < 
nfds
; ++n) {

2704 i‡(
exc⁄ãxt
->
ï_¨øy
[
n
].
d©a
.
fd
 =
socks
[
num
]) {

2705 i‡(
exc⁄ãxt
->
ï_¨øy
[
n
].
evíts
 & 
EPOLLOUT
) {

2707 
	`osù_gëtimeofday
(&
å
->
i˘_c⁄ãxt
->
timî_a_°¨t
, 
NULL
);

2708 
	`add_gëtimeofday
(&
å
->
i˘_c⁄ãxt
->
timî_a_°¨t
, 0);

2709 
nbå™ß˘i⁄
++;

2718 
å
 = (
osù_å™ß˘i⁄_t
 *Ë
	`osù_li°_gë_√xt
(&
ôî©‹
);

2721 
å
 = (
osù_å™ß˘i⁄_t
 *Ë
	`osù_li°_gë_fú°
(&
exc⁄ãxt
->
j_osù
->
osù_ni˘_å™ß˘i⁄s
, &
ôî©‹
);

2723 
	`osù_li°_ôî©‹_has_ñem
(
ôî©‹
)) {

2724 
¨es_ch™√l
 
ch™√l
 = 
NULL
;

2725 i‡(
å
->
«±r_ªc‹d
 !
NULL
 &&År->«±r_ªc‹d->
¨g
 != NULL) {

2726 i‡(
å
->
°©e
 =
NICT_TRYING
) {

2727 
¨es_sockë_t
 
socks
[16] = {

2728 
ARES_SOCKET_BAD
, ARES_SOCKET_BAD, ARES_SOCKET_BAD, ARES_SOCKET_BAD, ARES_SOCKET_BAD, ARES_SOCKET_BAD, ARES_SOCKET_BAD, ARES_SOCKET_BAD,

2729 
ARES_SOCKET_BAD
, ARES_SOCKET_BAD, ARES_SOCKET_BAD, ARES_SOCKET_BAD, ARES_SOCKET_BAD, ARES_SOCKET_BAD, ARES_SOCKET_BAD, ARES_SOCKET_BAD,

2731 
num
;

2733 
ch™√l
 = 
å
->
«±r_ªc‹d
->
¨g
;

2735 
bômask
 = 
	`¨es_gësock
(
ch™√l
, 
socks
, 16);

2737 i‡(
bômask
 != 0) {

2738 
num
 = 0;Çum < 
ARES_GETSOCK_MAXNUM
;Çum++) {

2739 i‡(
	`ARES_GETSOCK_READABLE
(
bômask
, 
num
)) {

2740 
n
;

2741 
n
 = 0;Ç < 
nfds
; ++n) {

2742 i‡(
exc⁄ãxt
->
ï_¨øy
[
n
].
d©a
.
fd
 =
socks
[
num
]) {

2743 i‡(
exc⁄ãxt
->
ï_¨øy
[
n
].
evíts
 & 
EPOLLIN
) {

2745 
	`osù_gëtimeofday
(&
å
->
ni˘_c⁄ãxt
->
timî_e_°¨t
, 
NULL
);

2746 
	`add_gëtimeofday
(&
å
->
ni˘_c⁄ãxt
->
timî_e_°¨t
, 0);

2747 
nbå™ß˘i⁄
++;

2752 } i‡(
	`ARES_GETSOCK_WRITABLE
(
bômask
, 
num
)) {

2753 
n
;

2754 
n
 = 0;Ç < 
nfds
; ++n) {

2755 i‡(
exc⁄ãxt
->
ï_¨øy
[
n
].
d©a
.
fd
 =
socks
[
num
]) {

2756 i‡(
exc⁄ãxt
->
ï_¨øy
[
n
].
evíts
 & 
EPOLLOUT
) {

2758 
	`osù_gëtimeofday
(&
å
->
ni˘_c⁄ãxt
->
timî_e_°¨t
, 
NULL
);

2759 
	`add_gëtimeofday
(&
å
->
ni˘_c⁄ãxt
->
timî_e_°¨t
, 0);

2760 
nbå™ß˘i⁄
++;

2769 
å
 = (
osù_å™ß˘i⁄_t
 *Ë
	`osù_li°_gë_√xt
(&
ôî©‹
);

2772  
nbå™ß˘i⁄
;

2773 
	}
}

2775 
	#EXOSIP_DNSUTILS_DELSOCK_EPOLL_DEFINED


	)

2776 
	$_eXosù_dnsutûs_dñsock_ïﬁl
(
eXosù_t
 *
exc⁄ãxt
, *
ˇªs_fd_èbÀ
) {

2777 
idx
;

2778 
i
;

2779 
eb
[
ERRBSIZ
];

2781 
idx
 = 0; idx < 
EXOSIP_MAX_SOCKETS
; idx++) {

2782 i‡(
ˇªs_fd_èbÀ
[
idx
] > 0) {

2783 
ïﬁl_evít
 
ev
;

2784 
	`mem£t
(&
ev
, 0, (
ïﬁl_evít
));

2785 
i
 = 
	`ïﬁl_˘l
(
exc⁄ãxt
->
ïfd
, 
EPOLL_CTL_DEL
, 
ˇªs_fd_èbÀ
[
idx
], &
ev
);

2786 i‡(
i
 < 0) {

2787 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosù] [ïﬁl] c¨e†sockÇŸÑemoved %s\n", 
	`_ex_°ªº‹
(
î∫o
, 
eb
, 
ERRBSIZ
)));

2791  
OSIP_SUCCESS
;

2792 
	}
}

2796 
	#EXOSIP_DNSUTILS_GETSOCK_DEFINED


	)

2797 
	$_eXosù_dnsutûs_gësock
(
eXosù_t
 *
exc⁄ãxt
, 
fd_£t
 *
ªad_fds
, fd_£à*
wrôe_fds
) {

2798 
osù_li°_ôî©‹_t
 
ôî©‹
;

2799 
osù_å™ß˘i⁄_t
 *
å
;

2800 
nfds
 = 0;

2801 
max
 = 0;

2802 
å
 = (
osù_å™ß˘i⁄_t
 *Ë
	`osù_li°_gë_fú°
(&
exc⁄ãxt
->
j_osù
->
osù_i˘_å™ß˘i⁄s
, &
ôî©‹
);

2804 
	`osù_li°_ôî©‹_has_ñem
(
ôî©‹
)) {

2805 
¨es_ch™√l
 
ch™√l
 = 
NULL
;

2806 i‡(
å
->
«±r_ªc‹d
 !
NULL
 &&År->«±r_ªc‹d->
¨g
 != NULL) {

2807 i‡(
å
->
°©e
 =
ICT_CALLING
) {

2808 
ch™√l
 = 
å
->
«±r_ªc‹d
->
¨g
;

2809 
nfds
 = 
	`¨es_fds
(
ch™√l
, 
ªad_fds
, 
wrôe_fds
);

2810 i‡(
nfds
 > 
max
)

2811 
max
 = 
nfds
;

2814 
å
 = (
osù_å™ß˘i⁄_t
 *Ë
	`osù_li°_gë_√xt
(&
ôî©‹
);

2817 
å
 = (
osù_å™ß˘i⁄_t
 *Ë
	`osù_li°_gë_fú°
(&
exc⁄ãxt
->
j_osù
->
osù_ni˘_å™ß˘i⁄s
, &
ôî©‹
);

2819 
	`osù_li°_ôî©‹_has_ñem
(
ôî©‹
)) {

2820 
¨es_ch™√l
 
ch™√l
 = 
NULL
;

2821 i‡(
å
->
«±r_ªc‹d
 !
NULL
 &&År->«±r_ªc‹d->
¨g
 != NULL) {

2822 i‡(
å
->
°©e
 =
NICT_TRYING
) {

2823 
ch™√l
 = 
å
->
«±r_ªc‹d
->
¨g
;

2824 
nfds
 = 
	`¨es_fds
(
ch™√l
, 
ªad_fds
, 
wrôe_fds
);

2825 i‡(
nfds
 > 
max
)

2826 
max
 = 
nfds
;

2829 
å
 = (
osù_å™ß˘i⁄_t
 *Ë
	`osù_li°_gë_√xt
(&
ôî©‹
);

2832  
max
;

2833 
	}
}

2835 
	#EXOSIP_DNSUTILS_CHECKSOCK_DEFINED


	)

2836 
	$_eXosù_dnsutûs_checksock
(
eXosù_t
 *
exc⁄ãxt
, 
fd_£t
 *
ªad_fds
, fd_£à*
wrôe_fds
) {

2837 
osù_li°_ôî©‹_t
 
ôî©‹
;

2838 
osù_å™ß˘i⁄_t
 *
å
;

2839 
nbå™ß˘i⁄
 = 0;

2841 
å
 = (
osù_å™ß˘i⁄_t
 *Ë
	`osù_li°_gë_fú°
(&
exc⁄ãxt
->
j_osù
->
osù_i˘_å™ß˘i⁄s
, &
ôî©‹
);

2843 
	`osù_li°_ôî©‹_has_ñem
(
ôî©‹
)) {

2844 
¨es_ch™√l
 
ch™√l
 = 
NULL
;

2845 i‡(
å
->
«±r_ªc‹d
 !
NULL
 &&År->«±r_ªc‹d->
¨g
 != NULL) {

2846 i‡(
å
->
°©e
 =
ICT_CALLING
) {

2847 
¨es_sockë_t
 
socks
[16] = {

2848 
ARES_SOCKET_BAD
, ARES_SOCKET_BAD, ARES_SOCKET_BAD, ARES_SOCKET_BAD, ARES_SOCKET_BAD, ARES_SOCKET_BAD, ARES_SOCKET_BAD, ARES_SOCKET_BAD,

2849 
ARES_SOCKET_BAD
, ARES_SOCKET_BAD, ARES_SOCKET_BAD, ARES_SOCKET_BAD, ARES_SOCKET_BAD, ARES_SOCKET_BAD, ARES_SOCKET_BAD, ARES_SOCKET_BAD,

2851 
num
;

2853 
ch™√l
 = 
å
->
«±r_ªc‹d
->
¨g
;

2855 
bômask
 = 
	`¨es_gësock
(
ch™√l
, 
socks
, 16);

2857 i‡(
bômask
 != 0) {

2858 
num
 = 0;Çum < 
ARES_GETSOCK_MAXNUM
;Çum++) {

2859 i‡(
	`ARES_GETSOCK_READABLE
(
bômask
, 
num
)) {

2860 i‡(
	`FD_ISSET
(
socks
[
num
], 
ªad_fds
)) {

2862 
nbå™ß˘i⁄
++;

2863 
	`osù_gëtimeofday
(&
å
->
i˘_c⁄ãxt
->
timî_a_°¨t
, 
NULL
);

2864 
	`add_gëtimeofday
(&
å
->
i˘_c⁄ãxt
->
timî_a_°¨t
, 0);

2867 } i‡(
	`ARES_GETSOCK_WRITABLE
(
bômask
, 
num
)) {

2868 i‡(
	`FD_ISSET
(
socks
[
num
], 
wrôe_fds
)) {

2870 
nbå™ß˘i⁄
++;

2871 
	`osù_gëtimeofday
(&
å
->
i˘_c⁄ãxt
->
timî_a_°¨t
, 
NULL
);

2872 
	`add_gëtimeofday
(&
å
->
i˘_c⁄ãxt
->
timî_a_°¨t
, 0);

2879 
å
 = (
osù_å™ß˘i⁄_t
 *Ë
	`osù_li°_gë_√xt
(&
ôî©‹
);

2882 
å
 = (
osù_å™ß˘i⁄_t
 *Ë
	`osù_li°_gë_fú°
(&
exc⁄ãxt
->
j_osù
->
osù_ni˘_å™ß˘i⁄s
, &
ôî©‹
);

2884 
	`osù_li°_ôî©‹_has_ñem
(
ôî©‹
)) {

2885 
¨es_ch™√l
 
ch™√l
 = 
NULL
;

2886 i‡(
å
->
«±r_ªc‹d
 !
NULL
 &&År->«±r_ªc‹d->
¨g
 != NULL) {

2887 i‡(
å
->
°©e
 =
NICT_TRYING
) {

2888 
¨es_sockë_t
 
socks
[16] = {

2889 
ARES_SOCKET_BAD
, ARES_SOCKET_BAD, ARES_SOCKET_BAD, ARES_SOCKET_BAD, ARES_SOCKET_BAD, ARES_SOCKET_BAD, ARES_SOCKET_BAD, ARES_SOCKET_BAD,

2890 
ARES_SOCKET_BAD
, ARES_SOCKET_BAD, ARES_SOCKET_BAD, ARES_SOCKET_BAD, ARES_SOCKET_BAD, ARES_SOCKET_BAD, ARES_SOCKET_BAD, ARES_SOCKET_BAD,

2892 
num
;

2894 
ch™√l
 = 
å
->
«±r_ªc‹d
->
¨g
;

2896 
bômask
 = 
	`¨es_gësock
(
ch™√l
, 
socks
, 16);

2898 i‡(
bômask
 != 0) {

2899 
num
 = 0;Çum < 
ARES_GETSOCK_MAXNUM
;Çum++) {

2900 i‡(
	`ARES_GETSOCK_READABLE
(
bômask
, 
num
)) {

2901 i‡(
	`FD_ISSET
(
socks
[
num
], 
ªad_fds
)) {

2903 
	`osù_gëtimeofday
(&
å
->
ni˘_c⁄ãxt
->
timî_e_°¨t
, 
NULL
);

2904 
	`add_gëtimeofday
(&
å
->
ni˘_c⁄ãxt
->
timî_e_°¨t
, 0);

2905 
nbå™ß˘i⁄
++;

2908 } i‡(
	`ARES_GETSOCK_WRITABLE
(
bômask
, 
num
)) {

2909 i‡(
	`FD_ISSET
(
socks
[
num
], 
wrôe_fds
)) {

2911 
	`osù_gëtimeofday
(&
å
->
ni˘_c⁄ãxt
->
timî_e_°¨t
, 
NULL
);

2912 
	`add_gëtimeofday
(&
å
->
ni˘_c⁄ãxt
->
timî_e_°¨t
, 0);

2913 
nbå™ß˘i⁄
++;

2920 
å
 = (
osù_å™ß˘i⁄_t
 *Ë
	`osù_li°_gë_√xt
(&
ôî©‹
);

2923  
nbå™ß˘i⁄
;

2924 
	}
}

2926 
	$eXosù_dnsutûs_§v_lookup
(
osù_«±r
 *
ouçut_ªc‹d
, c⁄° *
dns£rvî
) {

2927 
¨es_ch™√l
 
ch™√l
 = 
NULL
;

2928 
¨es_›ti⁄s
 
›ti⁄s
;

2929 
i
;

2931 i‡(
ouçut_ªc‹d
->
«±r_°©e
 =
OSIP_NAPTR_STATE_SRVINPROGRESS
) {

2933 i‡(
ouçut_ªc‹d
->
¨g
 =
NULL
)

2934  
OSIP_SUCCESS
;

2936 
ch™√l
 = 
ouçut_ªc‹d
->
¨g
;

2938 
nfds
;

2940 
nfds
 = 
	`eXosù_dnsutûs_ˇªs_¥o˚ss
(
ouçut_ªc‹d
, 
ch™√l
);

2942 i‡(
nfds
 < 0) {

2943 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosù] [SRV LOOKUP] sñe˘ faûed [%†SRV]\n", 
ouçut_ªc‹d
->
domaö
));

2944 
ouçut_ªc‹d
->
«±r_°©e
 = 
OSIP_NAPTR_STATE_RETRYLATER
;

2945  
OSIP_UNDEFINED_ERROR
;

2948 i‡(
nfds
 == 0) {

2950 i‡(
ouçut_ªc‹d
->
sùudp_ªc‹d
.
§v_°©e
 =
OSIP_SRV_STATE_COMPLETED
)

2951 
ouçut_ªc‹d
->
«±r_°©e
 = 
OSIP_NAPTR_STATE_SRVDONE
;

2953 i‡(
ouçut_ªc‹d
->
sùt˝_ªc‹d
.
§v_°©e
 =
OSIP_SRV_STATE_COMPLETED
)

2954 
ouçut_ªc‹d
->
«±r_°©e
 = 
OSIP_NAPTR_STATE_SRVDONE
;

2956 i‡(
ouçut_ªc‹d
->
sùés_ªc‹d
.
§v_°©e
 =
OSIP_SRV_STATE_COMPLETED
)

2957 
ouçut_ªc‹d
->
«±r_°©e
 = 
OSIP_NAPTR_STATE_SRVDONE
;

2959 i‡(
ouçut_ªc‹d
->
sùdés_ªc‹d
.
§v_°©e
 =
OSIP_SRV_STATE_COMPLETED
)

2960 
ouçut_ªc‹d
->
«±r_°©e
 = 
OSIP_NAPTR_STATE_SRVDONE
;

2962 i‡(
ouçut_ªc‹d
->
sùs˘p_ªc‹d
.
§v_°©e
 =
OSIP_SRV_STATE_COMPLETED
)

2963 
ouçut_ªc‹d
->
«±r_°©e
 = 
OSIP_NAPTR_STATE_SRVDONE
;

2966 i‡(
ouçut_ªc‹d
->
sùudp_ªc‹d
.
‹dî
 =49 && ouçut_ªc‹d->sùudp_ªc‹d.
¥e„ªn˚
 == 49)

2967 
ouçut_ªc‹d
->
«±r_°©e
 = 
OSIP_NAPTR_STATE_NOTSUPPORTED
;

2970 
ouçut_ªc‹d
->
«±r_°©e
 = 
OSIP_NAPTR_STATE_RETRYLATER
;

2973 
ouçut_ªc‹d
->
¨g
 = 
NULL
;

2974 
	`¨es_de°roy
(
ch™√l
);

2975  
OSIP_SUCCESS
;

2979  
OSIP_SUCCESS
;

2982 i‡(
ouçut_ªc‹d
->
«±r_°©e
 !
OSIP_NAPTR_STATE_NAPTRDONE
)

2983  
OSIP_SUCCESS
;

2985 i‡(
ouçut_ªc‹d
->
sùudp_ªc‹d
.
«me
[0] ='\0' && ouçut_ªc‹d->
sùt˝_ªc‹d
.«me[0] ='\0' && ouçut_ªc‹d->
sùés_ªc‹d
.«me[0] ='\0' && ouçut_ªc‹d->
sùdés_ªc‹d
.«me[0] ='\0' && ouçut_ªc‹d->
sùs˘p_ªc‹d
.name[0] == '\0') {

2986 
ouçut_ªc‹d
->
«±r_°©e
 = 
OSIP_NAPTR_STATE_NOTSUPPORTED
;

2988 i‡(
ouçut_ªc‹d
->
¨g
 !
NULL
) {

2989 
ouçut_ªc‹d
->
¨g
 = 
NULL
;

2990 
	`¨es_de°roy
(
ch™√l
);

2993  
OSIP_SUCCESS
;

2996 i‡(
ouçut_ªc‹d
->
¨g
 =
NULL
) {

2997 
›ti⁄s
.
timeout
 = 1500;

2998 
›ti⁄s
.
åõs
 = 2;

3000 i‡(
dns£rvî
 !
NULL
 && dns£rvî[0] !'\0' && 
	`°rchr
(dnsserver, ',')) {

3001 
›ti⁄s
.
timeout
 = 750;

3002 
›ti⁄s
.
åõs
 = 2;

3005 
›ti⁄s
.
Êags
 = 
ARES_FLAG_NOALIASES
;

3006 
i
 = 
	`¨es_öô_›ti⁄s
(&
ch™√l
, &
›ti⁄s
, 
ARES_OPT_TIMEOUTMS
 | 
ARES_OPT_TRIES
 | 
ARES_OPT_FLAGS
);

3008 i‡(
i
 !
ARES_SUCCESS
) {

3009 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosù] [SRV LOOKUP]áªs_öô_›ti⁄†Áûed [%†SRV]\n", 
ouçut_ªc‹d
->
domaö
));

3010 
ouçut_ªc‹d
->
«±r_°©e
 = 
OSIP_NAPTR_STATE_RETRYLATER
;

3011  
OSIP_BADPARAMETER
;

3014 i‡(
dns£rvî
 !
NULL
 && dnsserver[0] != '\0') {

3015 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO1
, 
NULL
, "[eXosù] [SRV LOOKUP] u£ dns£rvî: [%†SRV]\n", 
dns£rvî
));

3016 
i
 = 
	`¨es_£t_£rvîs_csv
(
ch™√l
, 
dns£rvî
);

3019 #ifde‡
ANDROID


3020 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO1
, 
NULL
, "[eXosip] [SRV LOOKUP]ÑevertÅo [8.8.8.8,8.8.4.4]\n"));

3021 
i
 = 
	`¨es_£t_£rvîs_csv
(
ch™√l
, "8.8.8.8,8.8.4.4");

3025 
ouçut_ªc‹d
->
¨g
 = 
ch™√l
;

3028 
ch™√l
 = 
ouçut_ªc‹d
->
¨g
;

3031 
ouçut_ªc‹d
->
«±r_°©e
 = 
OSIP_NAPTR_STATE_SRVINPROGRESS
;

3033 i‡(
ouçut_ªc‹d
->
sùudp_ªc‹d
.
«me
[0] !'\0' && ouçut_ªc‹d->sùudp_ªc‹d.
§v_°©e
 !
OSIP_SRV_STATE_COMPLETED
) {

3034 
	`¨es_quîy
(
ch™√l
, 
ouçut_ªc‹d
->
sùudp_ªc‹d
.
«me
, 
C_IN
, 
T_SRV
, 
_§v_ˇŒback
, (*) output_record);

3035 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosù] [SRV LOOKUP]ábouàtÿask f‹ [%†SRV]\n", 
ouçut_ªc‹d
->
sùudp_ªc‹d
.
«me
));

3038 i‡(
ouçut_ªc‹d
->
sùt˝_ªc‹d
.
«me
[0] !'\0' && ouçut_ªc‹d->sùt˝_ªc‹d.
§v_°©e
 !
OSIP_SRV_STATE_COMPLETED
) {

3039 
	`¨es_quîy
(
ch™√l
, 
ouçut_ªc‹d
->
sùt˝_ªc‹d
.
«me
, 
C_IN
, 
T_SRV
, 
_§v_ˇŒback
, (*) output_record);

3040 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosù] [SRV LOOKUP]ábouàtÿask f‹ [%†SRV]\n", 
ouçut_ªc‹d
->
sùt˝_ªc‹d
.
«me
));

3043 i‡(
ouçut_ªc‹d
->
sùés_ªc‹d
.
«me
[0] !'\0' && ouçut_ªc‹d->sùés_ªc‹d.
§v_°©e
 !
OSIP_SRV_STATE_COMPLETED
) {

3044 
	`¨es_quîy
(
ch™√l
, 
ouçut_ªc‹d
->
sùés_ªc‹d
.
«me
, 
C_IN
, 
T_SRV
, 
_§v_ˇŒback
, (*) output_record);

3045 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosù] [SRV LOOKUP]ábouàtÿask f‹ [%†SRV]\n", 
ouçut_ªc‹d
->
sùés_ªc‹d
.
«me
));

3048 i‡(
ouçut_ªc‹d
->
sùdés_ªc‹d
.
«me
[0] !'\0' && ouçut_ªc‹d->sùdés_ªc‹d.
§v_°©e
 !
OSIP_SRV_STATE_COMPLETED
) {

3049 
	`¨es_quîy
(
ch™√l
, 
ouçut_ªc‹d
->
sùdés_ªc‹d
.
«me
, 
C_IN
, 
T_SRV
, 
_§v_ˇŒback
, (*) output_record);

3050 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosù] [SRV LOOKUP]ábouàtÿask f‹ [%†SRV]\n", 
ouçut_ªc‹d
->
sùdés_ªc‹d
.
«me
));

3054 
nfds
;

3056 
nfds
 = 
	`eXosù_dnsutûs_ˇªs_¥o˚ss
(
ouçut_ªc‹d
, 
ch™√l
);

3058 i‡(
nfds
 < 0) {

3059 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosù] [SRV LOOKUP] sñe˘ faûed [%†SRV]\n", 
ouçut_ªc‹d
->
domaö
));

3060 
ouçut_ªc‹d
->
«±r_°©e
 = 
OSIP_NAPTR_STATE_RETRYLATER
;

3061  
OSIP_UNDEFINED_ERROR
;

3064 i‡(
nfds
 == 0) {

3066 i‡(
ouçut_ªc‹d
->
sùudp_ªc‹d
.
§v_°©e
 =
OSIP_SRV_STATE_COMPLETED
)

3067 
ouçut_ªc‹d
->
«±r_°©e
 = 
OSIP_NAPTR_STATE_SRVDONE
;

3069 i‡(
ouçut_ªc‹d
->
sùt˝_ªc‹d
.
§v_°©e
 =
OSIP_SRV_STATE_COMPLETED
)

3070 
ouçut_ªc‹d
->
«±r_°©e
 = 
OSIP_NAPTR_STATE_SRVDONE
;

3072 i‡(
ouçut_ªc‹d
->
sùés_ªc‹d
.
§v_°©e
 =
OSIP_SRV_STATE_COMPLETED
)

3073 
ouçut_ªc‹d
->
«±r_°©e
 = 
OSIP_NAPTR_STATE_SRVDONE
;

3075 i‡(
ouçut_ªc‹d
->
sùdés_ªc‹d
.
§v_°©e
 =
OSIP_SRV_STATE_COMPLETED
)

3076 
ouçut_ªc‹d
->
«±r_°©e
 = 
OSIP_NAPTR_STATE_SRVDONE
;

3078 i‡(
ouçut_ªc‹d
->
sùs˘p_ªc‹d
.
§v_°©e
 =
OSIP_SRV_STATE_COMPLETED
)

3079 
ouçut_ªc‹d
->
«±r_°©e
 = 
OSIP_NAPTR_STATE_SRVDONE
;

3082 i‡(
ouçut_ªc‹d
->
sùudp_ªc‹d
.
‹dî
 =49 && ouçut_ªc‹d->sùudp_ªc‹d.
¥e„ªn˚
 == 49)

3083 
ouçut_ªc‹d
->
«±r_°©e
 = 
OSIP_NAPTR_STATE_NOTSUPPORTED
;

3086 
ouçut_ªc‹d
->
«±r_°©e
 = 
OSIP_NAPTR_STATE_RETRYLATER
;

3089 
ouçut_ªc‹d
->
¨g
 = 
NULL
;

3090 
	`¨es_de°roy
(
ch™√l
);

3091  
OSIP_SUCCESS
;

3095  
OSIP_SUCCESS
;

3096 
	}
}

3098 
	$eXosù_dnsutûs_«±r_lookup
(
osù_«±r_t
 *
ouçut_ªc‹d
, c⁄° *
domaö
, c⁄° *
dns£rvî
) {

3099 
¨es_ch™√l
 
ch™√l
 = 
NULL
;

3100 
¨es_›ti⁄s
 
›ti⁄s
;

3101 
i
;

3103 i‡(
ouçut_ªc‹d
->
¨g
 !
NULL
) {

3104 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosù] [NAPTR LOOKUP] wr⁄g codê∑th [%†NAPTR]\n", 
domaö
));

3105  
OSIP_UNDEFINED_ERROR
;

3108 
ouçut_ªc‹d
->
«±r_°©e
 = 
OSIP_NAPTR_STATE_RETRYLATER
;

3110 i‡(
domaö
 =
NULL
)

3111  
OSIP_BADPARAMETER
;

3113 i‡(
	`°æí
(
domaö
) > 512)

3114  
OSIP_BADPARAMETER
;

3116 
	`¢¥ötf
(
ouçut_ªc‹d
->
domaö
, (output_record->domain), "%s", domain);

3118 
›ti⁄s
.
timeout
 = 1500;

3119 
›ti⁄s
.
åõs
 = 2;

3121 i‡(
dns£rvî
 !
NULL
 && dns£rvî[0] !'\0' && 
	`°rchr
(dnsserver, ',')) {

3122 
›ti⁄s
.
timeout
 = 750;

3123 
›ti⁄s
.
åõs
 = 2;

3126 
›ti⁄s
.
Êags
 = 
ARES_FLAG_NOALIASES
;

3127 
i
 = 
	`¨es_öô_›ti⁄s
(&
ch™√l
, &
›ti⁄s
, 
ARES_OPT_TIMEOUTMS
 | 
ARES_OPT_TRIES
 | 
ARES_OPT_FLAGS
);

3129 i‡(
i
 !
ARES_SUCCESS
) {

3130 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosù] [NAPTR LOOKUP]áªs_öô_›ti⁄†Áûed [%†NAPTR]\n", 
domaö
));

3131  
OSIP_BADPARAMETER
;

3134 i‡(
dns£rvî
 !
NULL
 && dnsserver[0] != '\0') {

3135 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO1
, 
NULL
, "[eXosù] [NAPTR LOOKUP] u£ dns£rvî: [%†NAPTR]\n", 
dns£rvî
));

3136 
i
 = 
	`¨es_£t_£rvîs_csv
(
ch™√l
, 
dns£rvî
);

3139 #ifde‡
ANDROID


3140 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO1
, 
NULL
, "[eXosip] [NAPTR LOOKUP]ÑevertÅo 8.8.8.8,8.8.4.4\n"));

3141 
i
 = 
	`¨es_£t_£rvîs_csv
(
ch™√l
, "8.8.8.8,8.8.4.4");

3145 
ouçut_ªc‹d
->
¨g
 = 
ch™√l
;

3146 
ouçut_ªc‹d
->
«±r_°©e
 = 
OSIP_NAPTR_STATE_INPROGRESS
;

3147 
	`¨es_quîy
(
ch™√l
, 
domaö
, 
C_IN
, 
T_NAPTR
, 
_«±r_ˇŒback
, (*Ë
ouçut_ªc‹d
);

3149 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosù] [NAPTR LOOKUP]ábouàtÿask f‹ [%†NAPTR]\n", 
domaö
));

3152 
nfds
;

3154 
nfds
 = 
	`eXosù_dnsutûs_ˇªs_¥o˚ss
(
ouçut_ªc‹d
, 
ch™√l
);

3156 i‡(
nfds
 < 0) {

3157 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosù] [NAPTR LOOKUP] sñe˘ faûed [%†NAPTR]\n", 
domaö
));

3158 
ouçut_ªc‹d
->
«±r_°©e
 = 
OSIP_NAPTR_STATE_RETRYLATER
;

3159  
OSIP_UNDEFINED_ERROR
;

3162 i‡(
nfds
 == 0) {

3163 i‡(
ouçut_ªc‹d
->
«±r_°©e
 !
OSIP_NAPTR_STATE_NAPTRDONE
) {

3165 
	`¨es_de°roy
(
ch™√l
);

3166 
ouçut_ªc‹d
->
¨g
 = 
NULL
;

3169  
OSIP_SUCCESS
;

3173  
OSIP_SUCCESS
;

3174 
	}
}

3176 
osù_«±r
 *
	$eXosù_dnsutûs_«±r
(
eXosù_t
 *
exc⁄ãxt
, c⁄° *
_domaö
, c⁄° *
¥Ÿocﬁ
, c⁄° *
å™•‹t
, 
kìp_ö_ˇche
) {

3177 
osù_li°_ôî©‹_t
 
ô
;

3178 
osù_«±r
 *
«±r_ªc‹d
;

3179 
i
;

3181 #i‡
	`deföed
(
HAVE_WINDNS_H
)

3182 
DNS_STATUS
 
îr
;

3183 
DWORD
 
buf_Àngth
 = 0;

3184 
IP4_ARRAY
 *
dns_£rvîs
;

3186 
nŸ_ö_li°
 = 0;

3188 
domaö
[
NI_MAXHOST
 * 2];

3189 
AUS
[64];

3190 
dns£rvî
[
NI_MAXHOST
];

3191 *
dñim_aus
;

3192 *
dñim_dns£rvî
;

3194 i‡(
_domaö
 =
NULL
)

3195  
NULL
;

3197 
	`mem£t
(
domaö
, 0, (domain));

3198 
	`mem£t
(
AUS
, 0, (AUS));

3199 
	`mem£t
(
dns£rvî
, 0, (dnsserver));

3200 
dñim_aus
 = 
	`°rchr
(
_domaö
, '!');

3202 i‡(
dñim_aus
 !
NULL
 && delim_aus[1] != '\0') {

3205 
size_t
 
idx
;

3206 
size_t
 
idx_domaö
 = 0;

3207 
size_t
 
idx_AUS
 = 0;

3208 
size_t
 
aus_Àngth
;

3210 
dñim_aus
++;

3211 
dñim_dns£rvî
 = 
	`°rchr
(
dñim_aus
, '!');

3212 
aus_Àngth
 = 
	`°æí
(
dñim_aus
);

3214 i‡(
dñim_dns£rvî
 !
NULL
)

3215 
aus_Àngth
 = 
dñim_dns£rvî
 - 
dñim_aus
;

3217 i‡(
dñim_dns£rvî
 !
NULL
 && delim_dnsserver[1] != '\0') {

3218 
dñim_dns£rvî
++;

3219 
	`¢¥ötf
(
dns£rvî
, (dns£rvî), "%s", 
dñim_dns£rvî
);

3222 
idx
 = 0; idx + 1 <
aus_Àngth
; idx++) {

3223 i‡(
dñim_aus
[
idx
] ='+' || 
	`isdigô
(delim_aus[idx])) {

3224 
AUS
[
idx_AUS
] = 
dñim_aus
[
idx
];

3225 
idx_AUS
++;

3229 
AUS
[
idx_AUS
] = '\0';

3231 
idx
 = 0; idx + 1 <
aus_Àngth
; idx++) {

3232 i‡(
	`isdigô
(
dñim_aus
[
aus_Àngth
 - 
idx
 - 1])) {

3233 
domaö
[
idx_domaö
] = 
dñim_aus
[
aus_Àngth
 - 
idx
 - 1];

3234 
idx_domaö
++;

3235 
domaö
[
idx_domaö
] = '.';

3236 
idx_domaö
++;

3240 
domaö
[
idx_domaö
] = '\0';

3241 
	`¢¥ötf
(
domaö
 + 
idx_domaö
, 
dñim_aus
 - 
_domaö
, "%s", _domain);

3243 } i‡(
dñim_aus
 !
NULL
 && delim_aus[1] == '\0') {

3244 
	`¢¥ötf
(
domaö
, 
dñim_aus
 - 
_domaö
 + 1, "%s", _domain);

3247 
dñim_aus
 = 
NULL
;

3248 
	`¢¥ötf
(
domaö
, (domaö), "%s", 
_domaö
);

3251 i‡(
dnsutûs_li°
 =
NULL
) {

3252 
dnsutûs_li°
 = (
osù_li°_t
 *Ë
	`osù_mÆloc
((osip_list_t));

3253 
	`osù_li°_öô
(
dnsutûs_li°
);

3255 
i
 = 
	`¨es_libøry_öô
(
ARES_LIB_INIT_ALL
);

3257 i‡(
i
 !
ARES_SUCCESS
) {

3258 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] [NAPTR LOOKUP]áres cannot be initialized\n"));

3259  
NULL
;

3263 i‡(
kìp_ö_ˇche
 < 0) {

3264 
«±r_ªc‹d
 = (
osù_«±r_t
 *Ë
	`osù_li°_gë_fú°
(
dnsutûs_li°
, &
ô
);

3266 
«±r_ªc‹d
 !
NULL
) {

3267 i‡(
	`osù_°rˇ£cmp
(
domaö
, 
«±r_ªc‹d
->domain) == 0) {

3268 i‡(
«±r_ªc‹d
->
«±r_°©e
 =
OSIP_NAPTR_STATE_RETRYLATER
)

3271 i‡(
«±r_ªc‹d
->
«±r_°©e
 =
OSIP_NAPTR_STATE_NOTSUPPORTED
)

3274  
«±r_ªc‹d
;

3277 
«±r_ªc‹d
 = 
NULL
;

3279 i‡(
ô
.
pos
 == 9)

3282 
«±r_ªc‹d
 = (
osù_«±r_t
 *Ë
	`osù_li°_gë_√xt
(&
ô
);

3285  
NULL
;

3288 #i‡
	`deföed
(
HAVE_WINDNS_H
)

3289 
îr
 = 
	`DnsQuîyC⁄fig
(
DnsC⁄figDnsSîvîLi°
, 0, 
NULL
, NULL, NULL, &
buf_Àngth
);

3291 i‡(
îr
 =
DNS_ERROR_NO_DNS_SERVERS
) {

3292 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] [NAPTR LOOKUP]Ço dns server configured\n"));

3293  
NULL
;

3296 i‡(
îr
 !
ERROR_MORE_DATA
 &&Érr != 0) {

3297 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] [NAPTR LOOKUP]Érror with DnsQueryConfig / DnsConfigDnsServerList\n"));

3298  
NULL
;

3301 
dns_£rvîs
 = 
	`osù_mÆloc
(
buf_Àngth
);

3302 
îr
 = 
	`DnsQuîyC⁄fig
(
DnsC⁄figDnsSîvîLi°
, 0, 
NULL
, NULL, 
dns_£rvîs
, &
buf_Àngth
);

3304 i‡(
îr
 != 0) {

3305 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] [NAPTR LOOKUP]Érror with DnsQueryConfig / DnsConfigDnsServerList\n"));

3306 
	`osù_‰ì
(
dns_£rvîs
);

3307  
NULL
;

3310 i‡(
dns_£rvîs
->
AddrCou¡
 == 0) {

3311 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosip] [NAPTR LOOKUP]Ço dns server configured\n"));

3312 
	`osù_‰ì
(
dns_£rvîs
);

3313  
NULL
;

3316 
i
 = 0; (
DWORD
Ëò< 
dns_£rvîs
->
AddrCou¡
; i++) {

3317 
ùaddªss
[512];

3318 
DWORD
 
vÆ
 = 
dns_£rvîs
->
AddrAºay
[
i
];

3320 
	`¢¥ötf
(
ùaddªss
, (ùaddªss), "%d.%d.%d.%d", (
vÆ
 >> 0) & 0x000000FF, (val >> 8) & 0x000000FF, (val >> 16) & 0x000000FF, (val >> 24) & 0x000000FF);

3321 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosù] [NAPTR LOOKUP] dn†£rvî [%i] [%s]\n", 
i
, 
ùaddªss
));

3324 
	`osù_‰ì
(
dns_£rvîs
);

3327 
«±r_ªc‹d
 = (
osù_«±r_t
 *Ë
	`osù_li°_gë_fú°
(
dnsutûs_li°
, &
ô
);

3329 
«±r_ªc‹d
 !
NULL
) {

3331 i‡(
«±r_ªc‹d
->
«±r_°©e
 =
OSIP_NAPTR_STATE_NAPTRDONE
 ||Ç≠å_ªc‹d->«±r_°©ê=
OSIP_NAPTR_STATE_SRVINPROGRESS
)

3332 
	`eXosù_dnsutûs_§v_lookup
(
«±r_ªc‹d
, 
dns£rvî
);

3334 
«±r_ªc‹d
 = 
NULL
;

3336 i‡(
ô
.
pos
 == 9)

3339 
«±r_ªc‹d
 = (
osù_«±r_t
 *Ë
	`osù_li°_gë_√xt
(&
ô
);

3342 
ô
.
pos
 = 0;

3343 
«±r_ªc‹d
 = (
osù_«±r_t
 *Ë
	`osù_li°_gë_fú°
(
dnsutûs_li°
, &
ô
);

3345 
«±r_ªc‹d
 !
NULL
) {

3346 i‡(
	`osù_°rˇ£cmp
(
domaö
, 
«±r_ªc‹d
->domain) == 0) {

3347 i‡(
«±r_ªc‹d
->
«±r_°©e
 =
OSIP_NAPTR_STATE_RETRYLATER
)

3350 i‡(
«±r_ªc‹d
->
«±r_°©e
 =
OSIP_NAPTR_STATE_NAPTRDONE
 ||Ç≠å_ªc‹d->«±r_°©ê=
OSIP_NAPTR_STATE_SRVINPROGRESS
)

3351 
	`eXosù_dnsutûs_§v_lookup
(
«±r_ªc‹d
, 
dns£rvî
);

3353  
«±r_ªc‹d
;

3356 
«±r_ªc‹d
 = 
NULL
;

3358 i‡(
ô
.
pos
 == 9)

3361 
«±r_ªc‹d
 = (
osù_«±r_t
 *Ë
	`osù_li°_gë_√xt
(&
ô
);

3364 i‡(
ô
.
pos
 =9 && 
kìp_ö_ˇche
 > 0) {

3379 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosù] [NAPTR LOOKUP]Åimêwû»ãŒ how much you gÿthîê[%s] - it'†wr⁄g codê∑th, fix it\n", 
domaö
));

3381 
kìp_ö_ˇche
 = 0;

3383 
«±r_ªc‹d
 = (
osù_«±r_t
 *Ë
	`osù_mÆloc
((osip_naptr_t));

3384 
	`mem£t
(
«±r_ªc‹d
, 0, (
osù_«±r_t
));

3385 
«±r_ªc‹d
->
kìp_ö_ˇche
 = keep_in_cache;

3386 
	`¢¥ötf
(
«±r_ªc‹d
->
AUS
, (naptr_record->AUS), "%s", AUS);

3388 } i‡(
«±r_ªc‹d
 =
NULL
) {

3389 
«±r_ªc‹d
 = (
osù_«±r_t
 *Ë
	`osù_mÆloc
((osip_naptr_t));

3390 
	`mem£t
(
«±r_ªc‹d
, 0, (
osù_«±r_t
));

3391 
«±r_ªc‹d
->
kìp_ö_ˇche
 = keep_in_cache;

3392 
nŸ_ö_li°
 = 1;

3393 
	`¢¥ötf
(
«±r_ªc‹d
->
AUS
, (naptr_record->AUS), "%s", AUS);

3397 
	`mem£t
(
«±r_ªc‹d
, 0, (
osù_«±r_t
));

3398 
«±r_ªc‹d
->
kìp_ö_ˇche
 = 1;

3399 
	`¢¥ötf
(
«±r_ªc‹d
->
AUS
, (naptr_record->AUS), "%s", AUS);

3402 
i
 = 
	`eXosù_dnsutûs_«±r_lookup
(
«±r_ªc‹d
, 
domaö
, 
dns£rvî
);

3404 i‡(
i
 < 0) {

3405 i‡(
kìp_ö_ˇche
 <= 0) {

3406  
«±r_ªc‹d
;

3409 i‡(
nŸ_ö_li°
 == 1) {

3410 
	`osù_li°_add
(
dnsutûs_li°
, 
«±r_ªc‹d
, -1);

3413  
«±r_ªc‹d
;

3416 i‡(
«±r_ªc‹d
->
«±r_°©e
 =
OSIP_NAPTR_STATE_NAPTRDONE
 ||Ç≠å_ªc‹d->«±r_°©ê=
OSIP_NAPTR_STATE_SRVINPROGRESS
)

3417 
	`eXosù_dnsutûs_§v_lookup
(
«±r_ªc‹d
, 
dns£rvî
);

3419 i‡(
kìp_ö_ˇche
 <= 0) {

3420  
«±r_ªc‹d
;

3423 i‡(
nŸ_ö_li°
 == 1)

3424 
	`osù_li°_add
(
dnsutûs_li°
, 
«±r_ªc‹d
, -1);

3426  
«±r_ªc‹d
;

3427 
	}
}

3429 
	#EXOSIP_DNSUTILS_DNS_PROCESS


	)

3430 
	$eXosù_dnsutûs_dns_¥o˚ss
(
osù_«±r_t
 *
«±r_ªc‹d
, 
f‹˚
) {

3431 
¨es_ch™√l
 
ch™√l
 = 
NULL
;

3433 i‡(
«±r_ªc‹d
->
«±r_°©e
 =
OSIP_NAPTR_STATE_NAPTRDONE
 ||Ç≠å_ªc‹d->«±r_°©ê=
OSIP_NAPTR_STATE_SRVINPROGRESS
)

3434 
	`eXosù_dnsutûs_§v_lookup
(
«±r_ªc‹d
, 
NULL
);

3436 i‡(
«±r_ªc‹d
->
¨g
 !
NULL
)

3437 
ch™√l
 = 
«±r_ªc‹d
->
¨g
;

3439 i‡(
ch™√l
 =
NULL
)

3440  
OSIP_SUCCESS
;

3444 
nfds
;

3446 
nfds
 = 
	`eXosù_dnsutûs_ˇªs_¥o˚ss
(
«±r_ªc‹d
, 
ch™√l
);

3448 i‡(
nfds
 < 0) {

3449 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosù] [SRV LOOKUP] sñe˘ faûed ('%s')\n", 
«±r_ªc‹d
->
domaö
));

3450  
OSIP_UNDEFINED_ERROR
;

3453 i‡(
nfds
 == 0) {

3454 i‡(
«±r_ªc‹d
->
«±r_°©e
 =
OSIP_NAPTR_STATE_NAPTRDONE
 ||Ç≠å_ªc‹d->«±r_°©ê=
OSIP_NAPTR_STATE_SRVINPROGRESS
) {

3456 
	`eXosù_dnsutûs_§v_lookup
(
«±r_ªc‹d
, 
NULL
);

3458 i‡(
«±r_ªc‹d
->
¨g
 =
NULL
)

3459  
OSIP_SUCCESS
;

3461 } i‡(
«±r_ªc‹d
->
«±r_°©e
 =
OSIP_NAPTR_STATE_INPROGRESS
) {

3462 i‡(
«±r_ªc‹d
->
sùudp_ªc‹d
.
§v_°©e
 =
OSIP_SRV_STATE_COMPLETED
)

3463 
«±r_ªc‹d
->
«±r_°©e
 = 
OSIP_NAPTR_STATE_SRVDONE
;

3465 i‡(
«±r_ªc‹d
->
sùt˝_ªc‹d
.
§v_°©e
 =
OSIP_SRV_STATE_COMPLETED
)

3466 
«±r_ªc‹d
->
«±r_°©e
 = 
OSIP_NAPTR_STATE_SRVDONE
;

3468 i‡(
«±r_ªc‹d
->
sùés_ªc‹d
.
§v_°©e
 =
OSIP_SRV_STATE_COMPLETED
)

3469 
«±r_ªc‹d
->
«±r_°©e
 = 
OSIP_NAPTR_STATE_SRVDONE
;

3471 i‡(
«±r_ªc‹d
->
sùdés_ªc‹d
.
§v_°©e
 =
OSIP_SRV_STATE_COMPLETED
)

3472 
«±r_ªc‹d
->
«±r_°©e
 = 
OSIP_NAPTR_STATE_SRVDONE
;

3474 i‡(
«±r_ªc‹d
->
sùs˘p_ªc‹d
.
§v_°©e
 =
OSIP_SRV_STATE_COMPLETED
)

3475 
«±r_ªc‹d
->
«±r_°©e
 = 
OSIP_NAPTR_STATE_SRVDONE
;

3478 
«±r_ªc‹d
->
«±r_°©e
 = 
OSIP_NAPTR_STATE_RETRYLATER
;

3481 
«±r_ªc‹d
->
¨g
 = 
NULL
;

3482 
	`¨es_de°roy
(
ch™√l
);

3483  
OSIP_SUCCESS
;

3487 
«±r_ªc‹d
->
¨g
 = 
NULL
;

3488 
	`¨es_de°roy
(
ch™√l
);

3489  
OSIP_SUCCESS
;

3493 i‡(
f‹˚
 <= 0)

3497  
OSIP_SUCCESS
;

3498 
	}
}

3500 
	#EXOSIP_DNSUTILS_RELEASE


	)

3501 
	$eXosù_dnsutûs_ªÀa£
(
osù_«±r
 *
«±r_ªc‹d
) {

3502 
¨es_ch™√l
 
ch™√l
;

3504 i‡(
«±r_ªc‹d
 =
NULL
)

3507 i‡(
«±r_ªc‹d
->
kìp_ö_ˇche
 > 0)

3510 i‡(
«±r_ªc‹d
->
¨g
 !
NULL
) {

3511 
ch™√l
 = 
«±r_ªc‹d
->
¨g
;

3512 
	`¨es_de°roy
(
ch™√l
);

3513 
«±r_ªc‹d
->
¨g
 = 
NULL
;

3516 
	`osù_‰ì
(
«±r_ªc‹d
);

3517 
	}
}

3521 #i‡!
deföed
(
EXOSIP_DNSUTILS_DEFINED
Ë&& (deföed(
WIN32
Ë&& !deföed(
_WIN32_WCE
))

3522 
	#EXOSIP_DNSUTILS_DEFINED


	)

3524 
	$_eXosù_dnsutûs_§v_lookup
(
osù_§v_ªc‹d
 *
ouçut_§v
) {

3525 
PDNS_RECORD
 
™swî
;

3526 
PDNS_RECORDA
 
tmp
;

3527 
n
;

3529 i‡(
ouçut_§v
->
«me
[0] == '\0') {

3530  
OSIP_SUCCESS
;

3533 i‡(
ouçut_§v
->
§víåy
[0].
§v
[0] != '\0') {

3536  
OSIP_SUCCESS
;

3539 i‡(
	`DnsQuîy_UTF8
(
ouçut_§v
->
«me
, 
DNS_TYPE_SRV
, 
DNS_QUERY_STANDARD
, 
NULL
, &
™swî
, NULL) != 0) {

3540  
OSIP_UNKNOWN_HOST
;

3543 
n
 = 0;

3545 
tmp
 = (
PDNS_RECORDA
Ë
™swî
;Åm∞!
NULL
;Åm∞tmp->
pNext
) {

3546 
osù_§v_íåy
 *
§víåy
;

3548 
DNS_SRV_DATAA
 *
d©a
;

3550 i‡(
tmp
->
wTy≥
 !
DNS_TYPE_SRV
)

3553 
§víåy
 = &
ouçut_§v
->§víåy[
n
];

3554 
d©a
 = &
tmp
->
D©a
.
SRV
;

3555 
	`¢¥ötf
(
§víåy
->
§v
, (§víåy->§v), "%s", 
d©a
->
pNameT¨gë
);

3557 
§víåy
->
¥i‹ôy
 = 
d©a
->
wPri‹ôy
;

3558 
§víåy
->
weight
 = 
d©a
->
wWeight
;

3560 i‡(
§víåy
->
weight
)

3561 
§víåy
->
rweight
 = 1 + 
	`ønd
(Ë% (10000 * srvíåy->
weight
);

3564 
§víåy
->
rweight
 = 0;

3566 
§víåy
->
p‹t
 = 
d©a
->
wP‹t
;

3568 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosù] [ßve_SRVÑec‹d] [%s] IN SRV -> [%s/%i/%i/%i/%i]\n", 
ouçut_§v
->
«me
, 
§víåy
->
§v
, srvíåy->
p‹t
, srvíåy->
¥i‹ôy
, srvíåy->
weight
, srvíåy->
rweight
));

3570 
ouçut_§v
->
§v_°©e
 = 
OSIP_SRV_STATE_COMPLETED
;

3572 
n
++;

3574 i‡(
n
 == 10)

3578 
	`DnsRec‹dLi°Fªe
(
™swî
, 
DnsFªeRec‹dLi°
);

3580 i‡(
n
 == 0)

3581  
OSIP_UNKNOWN_HOST
;

3583 
	`osù_§v_ªc‹d_s‹t
(
ouçut_§v
, 
n
);

3584  
OSIP_SUCCESS
;

3585 
	}
}

3587 
	$eXosù_dnsutûs_§v_lookup
(
osù_«±r
 *
ouçut_ªc‹d
, c⁄° *
dns£rvî
) {

3588 i‡(
ouçut_ªc‹d
->
«±r_°©e
 =
OSIP_NAPTR_STATE_SRVDONE
)

3589  
OSIP_SUCCESS
;

3591 
ouçut_ªc‹d
->
sùudp_ªc‹d
.
§v_°©e
 = 
OSIP_SRV_STATE_NOTSUPPORTED
;

3592 
ouçut_ªc‹d
->
sùt˝_ªc‹d
.
§v_°©e
 = 
OSIP_SRV_STATE_NOTSUPPORTED
;

3593 
ouçut_ªc‹d
->
sùés_ªc‹d
.
§v_°©e
 = 
OSIP_SRV_STATE_NOTSUPPORTED
;

3594 
ouçut_ªc‹d
->
sùdés_ªc‹d
.
§v_°©e
 = 
OSIP_SRV_STATE_NOTSUPPORTED
;

3595 
ouçut_ªc‹d
->
sùs˘p_ªc‹d
.
§v_°©e
 = 
OSIP_SRV_STATE_NOTSUPPORTED
;

3597 
	`_eXosù_dnsutûs_§v_lookup
(&
ouçut_ªc‹d
->
sùudp_ªc‹d
);

3598 
	`_eXosù_dnsutûs_§v_lookup
(&
ouçut_ªc‹d
->
sùt˝_ªc‹d
);

3599 
	`_eXosù_dnsutûs_§v_lookup
(&
ouçut_ªc‹d
->
sùés_ªc‹d
);

3600 
	`_eXosù_dnsutûs_§v_lookup
(&
ouçut_ªc‹d
->
sùdés_ªc‹d
);

3603 i‡(
ouçut_ªc‹d
->
sùudp_ªc‹d
.
§v_°©e
 =
OSIP_SRV_STATE_COMPLETED
)

3604 
ouçut_ªc‹d
->
«±r_°©e
 = 
OSIP_NAPTR_STATE_SRVDONE
;

3606 i‡(
ouçut_ªc‹d
->
sùt˝_ªc‹d
.
§v_°©e
 =
OSIP_SRV_STATE_COMPLETED
)

3607 
ouçut_ªc‹d
->
«±r_°©e
 = 
OSIP_NAPTR_STATE_SRVDONE
;

3609 i‡(
ouçut_ªc‹d
->
sùés_ªc‹d
.
§v_°©e
 =
OSIP_SRV_STATE_COMPLETED
)

3610 
ouçut_ªc‹d
->
«±r_°©e
 = 
OSIP_NAPTR_STATE_SRVDONE
;

3612 i‡(
ouçut_ªc‹d
->
sùdés_ªc‹d
.
§v_°©e
 =
OSIP_SRV_STATE_COMPLETED
)

3613 
ouçut_ªc‹d
->
«±r_°©e
 = 
OSIP_NAPTR_STATE_SRVDONE
;

3615 i‡(
ouçut_ªc‹d
->
sùs˘p_ªc‹d
.
§v_°©e
 =
OSIP_SRV_STATE_COMPLETED
)

3616 
ouçut_ªc‹d
->
«±r_°©e
 = 
OSIP_NAPTR_STATE_SRVDONE
;

3619 
ouçut_ªc‹d
->
«±r_°©e
 = 
OSIP_NAPTR_STATE_RETRYLATER
;

3622 
	}
}

3624 
	$_eX_dn_ex∑nd
(*
msg
, *
eom‹ig
, *
comp_dn
, *
exp_dn
, 
Àngth
) {

3625 *
˝
;

3626 *
de°
;

3627 *
eom
;

3628 
Àn
 = -1;

3629 
Àn_c›õd
 = 0;

3631 
de°
 = 
exp_dn
;

3632 
˝
 = 
comp_dn
;

3633 
eom
 = 
exp_dn
 + 
Àngth
;

3635 *
˝
 != '\0') {

3636 
w
 = *
˝
;

3637 
comp
 = 
w
 & 0xc0;

3639 
˝
++;

3641 i‡(
comp
 == 0) {

3642 i‡(
de°
 !
exp_dn
) {

3643 i‡(
de°
 >
eom
)

3646 *
de°
 = '.';

3647 
de°
++;

3650 i‡(
de°
 + 
w
 >
eom
)

3653 
Àn_c›õd
++;

3654 
Àn_c›õd
 =Üí_c›õd + 
w
;

3655 
w
--;

3657 ; 
w
 >0; w--, 
˝
++) {

3658 i‡((*
˝
 == '.') || (*cp == '\\')) {

3659 i‡(
de°
 + 
w
 + 2 >
eom
)

3662 *
de°
 = '\\';

3663 
de°
++;

3666 *
de°
 = *
˝
;

3667 
de°
++;

3669 i‡(
˝
 >
eom‹ig
)

3673 } i‡(
comp
 == 0xc0) {

3674 i‡(
Àn
 < 0)

3675 
Àn
 = 
˝
 - 
comp_dn
 + 1;

3677 
˝
 = 
msg
 + (((
w
 & 0x3f) << 8) | (*cp & 0xff));

3679 i‡(
˝
 < 
msg
 || c∞>
eom‹ig
)

3682 
Àn_c›õd
 =Üen_copied + 2;

3684 i‡(
Àn_c›õd
 >
eom‹ig
 - 
msg
)

3691 *
de°
 = '\0';

3693 i‡(
Àn
 < 0)

3694 
Àn
 = 
˝
 - 
comp_dn
;

3696  
Àn
;

3697 
	}
}

3699 
	$eXosù_dnsutûs_«±r_lookup
(
osù_«±r_t
 *
ouçut_ªc‹d
, c⁄° *
domaö
, c⁄° *
dns£rvî
) {

3700 
PDNS_RECORD
 
™swî
;

3701 
PDNS_RECORDA
 
tmp
;

3702 
DNS_STATUS
 
ªt
;

3704 i‡(
domaö
 =
NULL
)

3705  
OSIP_BADPARAMETER
;

3707 i‡(
	`°æí
(
domaö
) > 512)

3708  
OSIP_BADPARAMETER
;

3710 
	`¢¥ötf
(
ouçut_ªc‹d
->
domaö
, (output_record->domain), "%s", domain);

3712 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosù] [NAPTR LOOKUP]ábouàtÿask f‹ [%†NAPTR]\n", 
domaö
));

3714 
ªt
 = 
	`DnsQuîy_UTF8
(
domaö
, 
DNS_TYPE_NAPTR
, 
DNS_QUERY_STANDARD
, 
NULL
, &
™swî
, NULL);

3716 i‡(
ªt
 =
DNS_ERROR_NO_DNS_SERVERS
)

3717  
OSIP_NO_NETWORK
;

3719 i‡(
ªt
 =
ERROR_TIMEOUT
)

3720  
OSIP_TIMEOUT
;

3722 i‡(
ªt
 =
DNS_INFO_NO_RECORDS
)

3723  
OSIP_UNKNOWN_HOST
;

3725 i‡(
ªt
 =
DNS_ERROR_RCODE_SERVER_FAILURE
)

3726  
OSIP_NOTFOUND
;

3728 i‡(
ªt
 != 0) {

3729 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosù] [NAPTR LOOKUP] DnsQuîy faûed f‹ [%†NAPTR] [%d]\n", 
domaö
, 
ªt
));

3730  
OSIP_UNDEFINED_ERROR
;

3733 
tmp
 = (
PDNS_RECORDA
Ë
™swî
;Åm∞!
NULL
;Åm∞tmp->
pNext
) {

3734 *
buf
 = (*Ë&
tmp
->
D©a
;

3736 
Àn
;

3737 
OSVERSIONINFOEX
 
ovi
;

3738 
osù_§v_ªc‹d_t
 
§vªc‹d
;

3740 i‡(
tmp
->
wTy≥
 !
DNS_TYPE_NAPTR
)

3743 
	`mem£t
(&
§vªc‹d
, 0, (
osù_§v_ªc‹d_t
));

3744 
	`mem£t
(&
ovi
, 0, (ovi));

3745 
ovi
.
dwOSVîsi⁄InfoSize
 = (ovi);

3746 
	`GëVîsi⁄Ex
((
LPOSVERSIONINFO
Ë&
ovi
);

3750 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosù] [NAPTR LOOKUP] check OS suµ‹àf‹ NAPTR [v=%i.%i.%i]\n", 
ovi
.
dwMaj‹Vîsi⁄
, ovi.
dwMö‹Vîsi⁄
, ovi.
dwBuûdNumbî
));

3752 i‡(
ovi
.
dwMaj‹Vîsi⁄
 > 5) {

3753 #i‡(
_WIN32_WINNT
 >= 0x0600)

3756 
§vªc‹d
.
‹dî
 = 
tmp
->
D©a
.
NAPTR
.
wOrdî
;

3757 
§vªc‹d
.
¥e„ªn˚
 = 
tmp
->
D©a
.
NAPTR
.
wPª„ªn˚
;

3758 
	`°∫˝y
(
§vªc‹d
.
¥Ÿocﬁ
, 
tmp
->
D©a
.
NAPTR
.
pSîvi˚
, (srvrecord.protocol) - 1);

3759 
	`°∫˝y
(
§vªc‹d
.
ªgexp
, 
tmp
->
D©a
.
NAPTR
.
pReguœrEx¥essi⁄
, (srvrecord.regexp) - 1);

3760 
	`°∫˝y
(
§vªc‹d
.
ª∂a˚mít
, 
tmp
->
D©a
.
NAPTR
.
pRïœ˚mít
, (srvrecord.replacement) - 1);

3761 
	`°∫˝y
(
§vªc‹d
.
Êag
, 
tmp
->
D©a
.
NAPTR
.
pFœgs
, (srvrecord.flag) - 1);

3765 
	`mem˝y
((*Ë&
§vªc‹d
.
‹dî
, 
buf
, 2);

3766 
§vªc‹d
.
‹dî
 = 
	`¡ohs
(srvrecord.order);

3767 
buf
 += ();

3768 
	`mem˝y
((*Ë&
§vªc‹d
.
¥e„ªn˚
, 
buf
, 2);

3769 
§vªc‹d
.
¥e„ªn˚
 = 
	`¡ohs
(srvrecord.preference);

3770 
buf
 += ();

3772 
Àn
 = *
buf
;

3774 i‡(
Àn
 < 0 ||Üen > 255)

3777 
buf
++;

3778 
	`°∫˝y
(
§vªc‹d
.
Êag
, 
buf
, 
Àn
);

3779 
§vªc‹d
.
Êag
[
Àn
] = '\0';

3780 
buf
 +
Àn
;

3782 
Àn
 = *
buf
;

3784 i‡(
Àn
 < 0 ||Üen > 1023)

3787 
buf
++;

3788 
	`°∫˝y
(
§vªc‹d
.
¥Ÿocﬁ
, 
buf
, 
Àn
);

3789 
§vªc‹d
.
¥Ÿocﬁ
[
Àn
] = '\0';

3790 
buf
 +
Àn
;

3792 
Àn
 = *
buf
;

3794 i‡(
Àn
 < 0 ||Üen > 1023)

3797 
buf
++;

3798 
	`°∫˝y
(
§vªc‹d
.
ªgexp
, 
buf
, 
Àn
);

3799 
§vªc‹d
.
ªgexp
[
Àn
] = '\0';

3800 
buf
 +
Àn
;

3802 
Àn
 = 
	`_eX_dn_ex∑nd
((*Ë&
tmp
->
D©a
, ((*Ë&tmp->D©aË+Åmp->
wD©aLígth
, 
buf
, 
§vªc‹d
.
ª∂a˚mít
, 1024 - 1);

3804 i‡(
Àn
 < 0)

3807 
buf
 +
Àn
;

3810 i‡(
§vªc‹d
.
Êag
[0] == 's' || srvrecord.flag[0] == 'S') {

3811 
	`¢¥ötf
(
§vªc‹d
.
«me
, (§vªc‹d.«me), "%s", srvªc‹d.
ª∂a˚mít
);

3814 i‡(
§vªc‹d
.
Êag
[0] == 'a' || srvrecord.flag[0] == 'A') {

3815 
	`¢¥ötf
(
§vªc‹d
.
«me
, (§vªc‹d.«me), "%s", srvªc‹d.
ª∂a˚mít
);

3818 i‡(
§vªc‹d
.
Êag
[0] == 'u' || srvrecord.flag[0] == 'U') {

3819 
	`«±r_íum_m©ch_™d_ª∂a˚
(
ouçut_ªc‹d
, &
§vªc‹d
);

3822 
§vªc‹d
.
§v_°©e
 = 
OSIP_SRV_STATE_UNKNOWN
;

3824 i‡(
	`osù_°∫ˇ£cmp
(
§vªc‹d
.
«me
, "_sù._udp.", 10Ë=0 || osù_°∫ˇ£cmp(§vªc‹d.
¥Ÿocﬁ
, "SIP+D2U", 8) == 0) {

3825 
	`mem˝y
(&
ouçut_ªc‹d
->
sùudp_ªc‹d
, &
§vªc‹d
, (
osù_§v_ªc‹d_t
));

3826 
ouçut_ªc‹d
->
«±r_°©e
 = 
OSIP_NAPTR_STATE_NAPTRDONE
;

3828 } i‡(
	`osù_°∫ˇ£cmp
(
§vªc‹d
.
«me
, "_sù._t˝.", 10Ë=0 || osù_°∫ˇ£cmp(§vªc‹d.
¥Ÿocﬁ
, "SIP+D2T", 8) == 0) {

3829 
	`mem˝y
(&
ouçut_ªc‹d
->
sùt˝_ªc‹d
, &
§vªc‹d
, (
osù_§v_ªc‹d_t
));

3830 
ouçut_ªc‹d
->
«±r_°©e
 = 
OSIP_NAPTR_STATE_NAPTRDONE
;

3832 } i‡(
	`osù_°∫ˇ£cmp
(
§vªc‹d
.
¥Ÿocﬁ
, "SIPS+D2T", 9) == 0) {

3833 
	`mem˝y
(&
ouçut_ªc‹d
->
sùés_ªc‹d
, &
§vªc‹d
, (
osù_§v_ªc‹d_t
));

3834 
ouçut_ªc‹d
->
«±r_°©e
 = 
OSIP_NAPTR_STATE_NAPTRDONE
;

3836 } i‡(
	`osù_°∫ˇ£cmp
(
§vªc‹d
.
¥Ÿocﬁ
, "SIPS+D2U", 9) == 0) {

3837 
	`mem˝y
(&
ouçut_ªc‹d
->
sùdés_ªc‹d
, &
§vªc‹d
, (
osù_§v_ªc‹d_t
));

3838 
ouçut_ªc‹d
->
«±r_°©e
 = 
OSIP_NAPTR_STATE_NAPTRDONE
;

3840 } i‡(
	`osù_°∫ˇ£cmp
(
§vªc‹d
.
¥Ÿocﬁ
, "SIP+D2S", 8) == 0) {

3841 
	`mem˝y
(&
ouçut_ªc‹d
->
sùs˘p_ªc‹d
, &
§vªc‹d
, (
osù_§v_ªc‹d_t
));

3842 
ouçut_ªc‹d
->
«±r_°©e
 = 
OSIP_NAPTR_STATE_NAPTRDONE
;

3844 } i‡(
	`osù_°∫ˇ£cmp
(
§vªc‹d
.
¥Ÿocﬁ
, "E2U+SIP", 8) == 0 || osip_strncasecmp(srvrecord.protocol, "SIP+E2U", 8) == 0) {

3845 
§vªc‹d
.
§v_°©e
 = 
OSIP_SRV_STATE_COMPLETED
;

3846 
	`mem˝y
(&
ouçut_ªc‹d
->
sùíum_ªc‹d
, &
§vªc‹d
, (
osù_§v_ªc‹d_t
));

3847 
ouçut_ªc‹d
->
«±r_°©e
 = 
OSIP_NAPTR_STATE_SRVDONE
;

3850 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosù] [ßve_NAPTRÑec‹d] [%s] -> [%i][%i][%s][%s][%s]\n", 
ouçut_ªc‹d
->
domaö
, 
§vªc‹d
.
‹dî
, srvªc‹d.
¥e„ªn˚
, srvªc‹d.
¥Ÿocﬁ
, srvªc‹d.
ªgexp
, srvªc‹d.
«me
));

3853 
tmp
 = (
PDNS_RECORDA
Ë
™swî
;Åm∞!
NULL
;Åm∞tmp->
pNext
) {

3854 
osù_§v_íåy
 *
§víåy
;

3855 
osù_§v_ªc‹d
 *
§vªc‹d
;

3856 
DNS_SRV_DATAA
 *
d©a
;

3857 
n
;

3859 i‡(
tmp
->
wTy≥
 !
DNS_TYPE_SRV
)

3862 i‡(
	`osù_°rˇ£cmp
(
tmp
->
pName
, 
ouçut_ªc‹d
->
sùudp_ªc‹d
.
«me
) == 0)

3863 
§vªc‹d
 = &
ouçut_ªc‹d
->
sùudp_ªc‹d
;

3865 i‡(
	`osù_°rˇ£cmp
(
tmp
->
pName
, 
ouçut_ªc‹d
->
sùt˝_ªc‹d
.
«me
) == 0)

3866 
§vªc‹d
 = &
ouçut_ªc‹d
->
sùt˝_ªc‹d
;

3868 i‡(
	`osù_°rˇ£cmp
(
tmp
->
pName
, 
ouçut_ªc‹d
->
sùés_ªc‹d
.
«me
) == 0)

3869 
§vªc‹d
 = &
ouçut_ªc‹d
->
sùés_ªc‹d
;

3871 i‡(
	`osù_°rˇ£cmp
(
tmp
->
pName
, 
ouçut_ªc‹d
->
sùdés_ªc‹d
.
«me
) == 0)

3872 
§vªc‹d
 = &
ouçut_ªc‹d
->
sùdés_ªc‹d
;

3874 i‡(
	`osù_°rˇ£cmp
(
tmp
->
pName
, 
ouçut_ªc‹d
->
sùs˘p_ªc‹d
.
«me
) == 0)

3875 
§vªc‹d
 = &
ouçut_ªc‹d
->
sùs˘p_ªc‹d
;

3880 
n
 = 0;

3882 
n
 < 10 && 
§vªc‹d
->
§víåy
[n].
§v
[0] != '\0')

3883 
n
++;

3885 i‡(
n
 == 10)

3888 
§víåy
 = &
§vªc‹d
->§víåy[
n
];

3890 
d©a
 = &
tmp
->
D©a
.
SRV
;

3891 
	`¢¥ötf
(
§víåy
->
§v
, (§víåy->§v), "%s", 
d©a
->
pNameT¨gë
);

3893 
§víåy
->
¥i‹ôy
 = 
d©a
->
wPri‹ôy
;

3894 
§víåy
->
weight
 = 
d©a
->
wWeight
;

3896 i‡(
§víåy
->
weight
)

3897 
§víåy
->
rweight
 = 1 + 
	`ønd
(Ë% (10000 * srvíåy->
weight
);

3900 
§víåy
->
rweight
 = 0;

3902 
§víåy
->
p‹t
 = 
d©a
->
wP‹t
;

3904 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosù] [ßve_SRVÑec‹d] [%s] IN SRV -> [%s/%i/%i/%i/%i]\n", 
tmp
->
pName
, 
§víåy
->
§v
, srvíåy->
p‹t
, srvíåy->
¥i‹ôy
, srvíåy->
weight
, srvíåy->
rweight
));

3905 
	`osù_§v_ªc‹d_s‹t
(
§vªc‹d
, 
n
 + 1);

3907 
ouçut_ªc‹d
->
«±r_°©e
 = 
OSIP_NAPTR_STATE_SRVDONE
;

3910 
tmp
 = (
PDNS_RECORDA
Ë
™swî
;Åm∞!
NULL
;Åm∞tmp->
pNext
) {

3911 
osù_§v_íåy
 *
§víåy
;

3912 
DNS_A_DATA
 *
d©a
;

3913 
DWORD
 
vÆ
;

3914 
n
;

3916 i‡(
tmp
->
wTy≥
 !
DNS_TYPE_A
)

3919 
d©a
 = &
tmp
->
D©a
.
A
;

3921 
vÆ
 = 
d©a
->
IpAddªss
;

3924 
n
 = 0;Ç < 10;Ç++) {

3925 i‡(
	`osù_°rˇ£cmp
(
tmp
->
pName
, 
ouçut_ªc‹d
->
sùudp_ªc‹d
.
§víåy
[
n
].
§v
) == 0)

3926 
§víåy
 = &
ouçut_ªc‹d
->
sùudp_ªc‹d
.§víåy[
n
];

3928 i‡(
	`osù_°rˇ£cmp
(
tmp
->
pName
, 
ouçut_ªc‹d
->
sùt˝_ªc‹d
.
§víåy
[
n
].
§v
) == 0)

3929 
§víåy
 = &
ouçut_ªc‹d
->
sùt˝_ªc‹d
.§víåy[
n
];

3931 i‡(
	`osù_°rˇ£cmp
(
tmp
->
pName
, 
ouçut_ªc‹d
->
sùés_ªc‹d
.
§víåy
[
n
].
§v
) == 0)

3932 
§víåy
 = &
ouçut_ªc‹d
->
sùés_ªc‹d
.§víåy[
n
];

3934 i‡(
	`osù_°rˇ£cmp
(
tmp
->
pName
, 
ouçut_ªc‹d
->
sùdés_ªc‹d
.
§víåy
[
n
].
§v
) == 0)

3935 
§víåy
 = &
ouçut_ªc‹d
->
sùdés_ªc‹d
.§víåy[
n
];

3937 i‡(
	`osù_°rˇ£cmp
(
tmp
->
pName
, 
ouçut_ªc‹d
->
sùs˘p_ªc‹d
.
§víåy
[
n
].
§v
) == 0)

3938 
§víåy
 = &
ouçut_ªc‹d
->
sùs˘p_ªc‹d
.§víåy[
n
];

3943 
	`¢¥ötf
(
§víåy
->
ùaddªss
, (§víåy->ùaddªss), "%d.%d.%d.%d", (
vÆ
 >> 0) & 0x000000FF, (val >> 8) & 0x000000FF, (val >> 16) & 0x000000FF, (val >> 24) & 0x000000FF);

3946 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosù] AÑec‹d [%s] -> [%d.%d.%d.%d]\n", 
tmp
->
pName
, (
vÆ
 >> 0) & 0x000000FF, (val >> 8) & 0x000000FF, (val >> 16) & 0x000000FF, (val >> 24) & 0x000000FF));

3949 
	`DnsRec‹dLi°Fªe
(
™swî
, 
DnsFªeRec‹dLi°
);

3951  
OSIP_SUCCESS
;

3952 
	}
}

3954 
osù_«±r
 *
	$eXosù_dnsutûs_«±r
(
eXosù_t
 *
exc⁄ãxt
, c⁄° *
_domaö
, c⁄° *
¥Ÿocﬁ
, c⁄° *
å™•‹t
, 
kìp_ö_ˇche
) {

3955 
osù_li°_ôî©‹_t
 
ô
;

3956 
osù_«±r
 *
«±r_ªc‹d
;

3957 
i
;

3958 
DNS_STATUS
 
îr
;

3959 
DWORD
 
buf_Àngth
 = 0;

3960 
IP4_ARRAY
 *
dns_£rvîs
;

3961 
nŸ_ö_li°
 = 0;

3963 
domaö
[
NI_MAXHOST
 * 2];

3964 
AUS
[64];

3965 
dns£rvî
[
NI_MAXHOST
];

3966 *
dñim_aus
;

3967 *
dñim_dns£rvî
;

3969 i‡(
_domaö
 =
NULL
)

3970  
NULL
;

3972 
	`mem£t
(
domaö
, 0, (domain));

3973 
	`mem£t
(
AUS
, 0, (AUS));

3974 
	`mem£t
(
dns£rvî
, 0, (dnsserver));

3975 
dñim_aus
 = 
	`°rchr
(
_domaö
, '!');

3977 i‡(
dñim_aus
 !
NULL
 && delim_aus[1] != '\0') {

3980 
size_t
 
idx
;

3981 
size_t
 
idx_domaö
 = 0;

3982 
size_t
 
idx_AUS
 = 0;

3983 
size_t
 
aus_Àngth
;

3985 
dñim_aus
++;

3986 
dñim_dns£rvî
 = 
	`°rchr
(
dñim_aus
, '!');

3987 
aus_Àngth
 = 
	`°æí
(
dñim_aus
);

3989 i‡(
dñim_dns£rvî
 !
NULL
)

3990 
aus_Àngth
 = 
dñim_dns£rvî
 - 
dñim_aus
;

3992 i‡(
dñim_dns£rvî
 !
NULL
 && delim_dnsserver[1] != '\0') {

3993 
dñim_dns£rvî
++;

3994 
	`¢¥ötf
(
dns£rvî
, (dns£rvî), "%s", 
dñim_dns£rvî
);

3997 
idx
 = 0; idx + 1 <
aus_Àngth
; idx++) {

3998 i‡(
dñim_aus
[
idx
] ='+' || 
	`isdigô
(delim_aus[idx])) {

3999 
AUS
[
idx_AUS
] = 
dñim_aus
[
idx
];

4000 
idx_AUS
++;

4004 
AUS
[
idx_AUS
] = '\0';

4006 
idx
 = 0; idx + 1 <
aus_Àngth
; idx++) {

4007 i‡(
	`isdigô
(
dñim_aus
[
aus_Àngth
 - 
idx
 - 1])) {

4008 
domaö
[
idx_domaö
] = 
dñim_aus
[
aus_Àngth
 - 
idx
 - 1];

4009 
idx_domaö
++;

4010 
domaö
[
idx_domaö
] = '.';

4011 
idx_domaö
++;

4015 
domaö
[
idx_domaö
] = '\0';

4016 
	`¢¥ötf
(
domaö
 + 
idx_domaö
, 
dñim_aus
 - 
_domaö
, "%s", _domain);

4018 } i‡(
dñim_aus
 !
NULL
 && delim_aus[1] == '\0') {

4019 
	`¢¥ötf
(
domaö
, 
dñim_aus
 - 
_domaö
 + 1, "%s", _domain);

4022 
	`¢¥ötf
(
domaö
, (domaö), "%s", 
_domaö
);

4025 i‡(
dnsutûs_li°
 =
NULL
) {

4026 
dnsutûs_li°
 = (
osù_li°_t
 *Ë
	`osù_mÆloc
((osip_list_t));

4027 
	`osù_li°_öô
(
dnsutûs_li°
);

4030 i‡(
kìp_ö_ˇche
 < 0) {

4031 
«±r_ªc‹d
 = (
osù_«±r_t
 *Ë
	`osù_li°_gë_fú°
(
dnsutûs_li°
, &
ô
);

4033 
«±r_ªc‹d
 !
NULL
) {

4034 i‡(
	`osù_°rˇ£cmp
(
domaö
, 
«±r_ªc‹d
->domain) == 0) {

4035 i‡(
«±r_ªc‹d
->
«±r_°©e
 =
OSIP_NAPTR_STATE_RETRYLATER
)

4038 i‡(
«±r_ªc‹d
->
«±r_°©e
 =
OSIP_NAPTR_STATE_NOTSUPPORTED
)

4041  
«±r_ªc‹d
;

4044 
«±r_ªc‹d
 = 
NULL
;

4046 i‡(
ô
.
pos
 == 9)

4049 
«±r_ªc‹d
 = (
osù_«±r_t
 *Ë
	`osù_li°_gë_√xt
(&
ô
);

4052  
NULL
;

4055 
îr
 = 
	`DnsQuîyC⁄fig
(
DnsC⁄figDnsSîvîLi°
, 0, 
NULL
, NULL, NULL, &
buf_Àngth
);

4057 i‡(
îr
 =
DNS_ERROR_NO_DNS_SERVERS
) {

4058 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] [NAPTR LOOKUP]Ço dns server configured\n"));

4059  
NULL
;

4062 i‡(
îr
 !
ERROR_MORE_DATA
 &&Érr != 0) {

4063 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] [NAPTR LOOKUP]Érror with DnsQueryConfig / DnsConfigDnsServerList\n"));

4064  
NULL
;

4067 
dns_£rvîs
 = 
	`osù_mÆloc
(
buf_Àngth
);

4068 
îr
 = 
	`DnsQuîyC⁄fig
(
DnsC⁄figDnsSîvîLi°
, 0, 
NULL
, NULL, 
dns_£rvîs
, &
buf_Àngth
);

4070 i‡(
îr
 != 0) {

4071 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] [NAPTR LOOKUP]Érror with DnsQueryConfig / DnsConfigDnsServerList\n"));

4072 
	`osù_‰ì
(
dns_£rvîs
);

4073  
NULL
;

4076 i‡(
dns_£rvîs
->
AddrCou¡
 == 0) {

4077 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosip] [NAPTR LOOKUP]Ço dns server configured\n"));

4078 
	`osù_‰ì
(
dns_£rvîs
);

4079  
NULL
;

4082 
i
 = 0; (
DWORD
Ëò< 
dns_£rvîs
->
AddrCou¡
; i++) {

4083 
ùaddªss
[512];

4084 
DWORD
 
vÆ
 = 
dns_£rvîs
->
AddrAºay
[
i
];

4086 
	`¢¥ötf
(
ùaddªss
, (ùaddªss), "%d.%d.%d.%d", (
vÆ
 >> 0) & 0x000000FF, (val >> 8) & 0x000000FF, (val >> 16) & 0x000000FF, (val >> 24) & 0x000000FF);

4087 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosù] [NAPTR LOOKUP] dn†£rvî [%i] [%s]\n", 
i
, 
ùaddªss
));

4090 
«±r_ªc‹d
 = (
osù_«±r_t
 *Ë
	`osù_li°_gë_fú°
(
dnsutûs_li°
, &
ô
);

4092 
«±r_ªc‹d
 !
NULL
) {

4094 i‡(
«±r_ªc‹d
->
«±r_°©e
 =
OSIP_NAPTR_STATE_NAPTRDONE
 ||Ç≠å_ªc‹d->«±r_°©ê=
OSIP_NAPTR_STATE_SRVINPROGRESS
)

4095 
	`eXosù_dnsutûs_§v_lookup
(
«±r_ªc‹d
, 
dns£rvî
);

4097 
«±r_ªc‹d
 = 
NULL
;

4099 i‡(
ô
.
pos
 == 9)

4102 
«±r_ªc‹d
 = (
osù_«±r_t
 *Ë
	`osù_li°_gë_√xt
(&
ô
);

4105 
ô
.
pos
 = 0;

4106 
«±r_ªc‹d
 = (
osù_«±r_t
 *Ë
	`osù_li°_gë_fú°
(
dnsutûs_li°
, &
ô
);

4108 
«±r_ªc‹d
 !
NULL
) {

4109 i‡(
	`osù_°rˇ£cmp
(
domaö
, 
«±r_ªc‹d
->domain) == 0) {

4110 i‡(
«±r_ªc‹d
->
«±r_°©e
 =
OSIP_NAPTR_STATE_RETRYLATER
)

4113 i‡(
«±r_ªc‹d
->
«±r_°©e
 =
OSIP_NAPTR_STATE_NAPTRDONE
 ||Ç≠å_ªc‹d->«±r_°©ê=
OSIP_NAPTR_STATE_SRVINPROGRESS
)

4114 
	`eXosù_dnsutûs_§v_lookup
(
«±r_ªc‹d
, 
dns£rvî
);

4116  
«±r_ªc‹d
;

4119 
«±r_ªc‹d
 = 
NULL
;

4121 i‡(
ô
.
pos
 == 9)

4124 
«±r_ªc‹d
 = (
osù_«±r_t
 *Ë
	`osù_li°_gë_√xt
(&
ô
);

4127 i‡(
ô
.
pos
 =9 && 
kìp_ö_ˇche
 > 0) {

4142 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosù] [NAPTR LOOKUP]Åimêwû»ãŒ how much you gÿthîê[%s] - it'†wr⁄g codê∑th, fix it\n", 
domaö
));

4144 
kìp_ö_ˇche
 = 0;

4146 
«±r_ªc‹d
 = (
osù_«±r_t
 *Ë
	`osù_mÆloc
((osip_naptr_t));

4147 
	`mem£t
(
«±r_ªc‹d
, 0, (
osù_«±r_t
));

4148 
«±r_ªc‹d
->
kìp_ö_ˇche
 = keep_in_cache;

4149 
	`¢¥ötf
(
«±r_ªc‹d
->
AUS
, (naptr_record->AUS), "%s", AUS);

4151 } i‡(
«±r_ªc‹d
 =
NULL
) {

4152 
«±r_ªc‹d
 = (
osù_«±r_t
 *Ë
	`osù_mÆloc
((osip_naptr_t));

4153 
	`mem£t
(
«±r_ªc‹d
, 0, (
osù_«±r_t
));

4154 
«±r_ªc‹d
->
kìp_ö_ˇche
 = keep_in_cache;

4155 
nŸ_ö_li°
 = 1;

4156 
	`¢¥ötf
(
«±r_ªc‹d
->
AUS
, (naptr_record->AUS), "%s", AUS);

4160 
	`mem£t
(
«±r_ªc‹d
, 0, (
osù_«±r_t
));

4161 
«±r_ªc‹d
->
kìp_ö_ˇche
 = 1;

4162 
	`¢¥ötf
(
«±r_ªc‹d
->
AUS
, (naptr_record->AUS), "%s", AUS);

4165 
i
 = 
	`eXosù_dnsutûs_«±r_lookup
(
«±r_ªc‹d
, 
domaö
, 
dns£rvî
);

4167 i‡(
i
 < 0) {

4168 i‡(
kìp_ö_ˇche
 <= 0) {

4169  
«±r_ªc‹d
;

4172 i‡(
nŸ_ö_li°
 == 1) {

4173 
	`osù_li°_add
(
dnsutûs_li°
, 
«±r_ªc‹d
, -1);

4176  
«±r_ªc‹d
;

4179 i‡(
«±r_ªc‹d
->
«±r_°©e
 =
OSIP_NAPTR_STATE_NAPTRDONE
 ||Ç≠å_ªc‹d->«±r_°©ê=
OSIP_NAPTR_STATE_SRVINPROGRESS
)

4180 
	`eXosù_dnsutûs_§v_lookup
(
«±r_ªc‹d
, 
dns£rvî
);

4182 i‡(
kìp_ö_ˇche
 <= 0) {

4183  
«±r_ªc‹d
;

4186 i‡(
nŸ_ö_li°
 == 1)

4187 
	`osù_li°_add
(
dnsutûs_li°
, 
«±r_ªc‹d
, -1);

4189  
«±r_ªc‹d
;

4190 
	}
}

4194 #i‡!
deföed
(
EXOSIP_DNSUTILS_DEFINED
Ë&& (deföed(
__löux
Ë|| deföed(
__APPLE_CC__
))

4195 
	#EXOSIP_DNSUTILS_DEFINED


	)

4198 #i‡
PACKETSZ
 > 1024

4199 
	#MAXPACKET
 
PACKETSZ


	)

4201 
	#MAXPACKET
 1024

	)

4206 
HEADER
 
	mhdr
;

4207 
u_ch¨
 
	mbuf
[
MAXPACKET
];

4208 } 
	tquîybuf
;

4210 #i‚de‡
T_SRV


4211 
	#T_SRV
 33

	)

4214 #i‚de‡
T_NAPTR


4215 
	#T_NAPTR
 35

	)

4218 
	$_eXosù_dnsutûs_§v_lookup
(
osù_§v_ªc‹d
 *
ouçut_§v
) {

4219 
quîybuf
 
™swî
;

4220 
n
;

4221 
™cou¡
, 
qdcou¡
;

4222 
HEADER
 *
hp
;

4223 
ho°buf
[256];

4224 *
msg
, *
eom
, *
˝
;

4225 
dÀn
, 
ty≥
, 
a˛ass
, 
¥ef
, 
weight
, 
p‹t
;

4226 
âl
;

4227 
™swîno
;

4229 i‡(
ouçut_§v
->
«me
[0] == '\0') {

4230  
OSIP_SUCCESS
;

4233 i‡(
ouçut_§v
->
§víåy
[0].
§v
[0] != '\0') {

4236  
OSIP_SUCCESS
;

4239 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosù]ábouàtÿask f‹ [%†SRV]\n", 
ouçut_§v
->
«me
));

4241 
n
 = 
	`ªs_quîy
(
ouçut_§v
->
«me
, 
C_IN
, 
T_SRV
, (*Ë&
™swî
, (answer));

4243 i‡(
n
 < (Ë(
HEADER
)) {

4244  
OSIP_UNKNOWN_HOST
;

4248 
hp
 = (
HEADER
 *Ë&
™swî
;

4249 
qdcou¡
 = 
	`¡ohs
(
hp
->qdcount);

4250 
™cou¡
 = 
	`¡ohs
(
hp
->ancount);

4252 
msg
 = (*Ë(&
™swî
);

4253 
eom
 = (*Ë(&
™swî
Ë+ 
n
;

4254 
˝
 = (*Ë(&
™swî
Ë+ (
HEADER
);

4256 
qdcou¡
-- > 0 && 
˝
 < 
eom
) {

4257 
n
 = 
	`dn_ex∑nd
(
msg
, 
eom
, 
˝
, (*Ë
ho°buf
, 256);

4259 i‡(
n
 < 0) {

4260 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosù] invÆid SRVÑec‹dánswî f‹ [%†SRV] [bad f‹m©]\n", 
ouçut_§v
->
«me
));

4261  
OSIP_UNDEFINED_ERROR
;

4264 
˝
 +
n
 + 
QFIXEDSZ
;

4268 
™swîno
 = 0;

4271 
™cou¡
-- > 0 && 
˝
 < 
eom
) {

4272 
osù_§v_íåy
 *
§víåy
;

4274 
n
 = 
	`dn_ex∑nd
(
msg
, 
eom
, 
˝
, (*Ë
ho°buf
, 256);

4276 i‡(
n
 < 0) {

4277 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosù] invÆid SRVÑec‹dánswî f‹ [%†SRV] [bad f‹m©]\n", 
ouçut_§v
->
«me
));

4278  
OSIP_UNDEFINED_ERROR
;

4281 
˝
 +
n
;

4283 #i‡
	`deföed
(
__NëBSD__
Ë|| deföed(
__O≥nBSD__
Ë|| deföed(
OLD_NAMESER
Ë|| deföed(
__FªeBSD__
)

4284 
ty≥
 = 
	`_gë_sh‹t
(
˝
);

4285 
˝
 +(
u_sh‹t
);

4286 #ñi‡
	`deföed
(
__APPLE_CC__
)

4287 
	`GETSHORT
(
ty≥
, 
˝
);

4289 
	`NS_GET16
(
ty≥
, 
˝
);

4292 #i‡
	`deföed
(
__NëBSD__
Ë|| deföed(
__O≥nBSD__
Ë|| deföed(
OLD_NAMESER
Ë|| deföed(
__FªeBSD__
)

4293 
a˛ass
 = 
	`_gë_sh‹t
(
˝
);

4294 
˝
 +(
u_sh‹t
);

4295 #ñi‡
	`deföed
(
__APPLE_CC__
)

4296 
a˛ass
++;

4297 
	`GETSHORT
(
a˛ass
, 
˝
);

4299 
a˛ass
++;

4300 
	`NS_GET16
(
a˛ass
, 
˝
);

4303 #i‡
	`deföed
(
__NëBSD__
Ë|| deföed(
__O≥nBSD__
Ë|| deföed(
OLD_NAMESER
Ë|| deföed(
__FªeBSD__
)

4304 
âl
 = 
	`_gë_l⁄g
(
˝
);

4305 
˝
 +(
u_l⁄g
);

4306 #ñi‡
	`deföed
(
__APPLE_CC__
)

4307 
âl
++;

4308 
	`GETLONG
(
âl
, 
˝
);

4310 
âl
++;

4311 
	`NS_GET32
(
âl
, 
˝
);

4314 #i‡
	`deföed
(
__NëBSD__
Ë|| deföed(
__O≥nBSD__
Ë|| deföed(
OLD_NAMESER
Ë|| deföed(
__FªeBSD__
)

4315 
dÀn
 = 
	`_gë_sh‹t
(
˝
);

4316 
˝
 +(
u_sh‹t
);

4317 #ñi‡
	`deföed
(
__APPLE_CC__
)

4318 
	`GETSHORT
(
dÀn
, 
˝
);

4320 
	`NS_GET16
(
dÀn
, 
˝
);

4323 i‡(
ty≥
 !
T_SRV
) {

4324 
˝
 +
dÀn
;

4328 #i‡
	`deföed
(
__NëBSD__
Ë|| deföed(
__O≥nBSD__
Ë|| deföed(
OLD_NAMESER
Ë|| deföed(
__FªeBSD__
)

4329 
¥ef
 = 
	`_gë_sh‹t
(
˝
);

4330 
˝
 +(
u_sh‹t
);

4331 #ñi‡
	`deföed
(
__APPLE_CC__
)

4332 
	`GETSHORT
(
¥ef
, 
˝
);

4334 
	`NS_GET16
(
¥ef
, 
˝
);

4337 #i‡
	`deföed
(
__NëBSD__
Ë|| deföed(
__O≥nBSD__
Ë|| deföed(
OLD_NAMESER
Ë|| deföed(
__FªeBSD__
)

4338 
weight
 = 
	`_gë_sh‹t
(
˝
);

4339 
˝
 +(
u_sh‹t
);

4340 #ñi‡
	`deföed
(
__APPLE_CC__
)

4341 
	`GETSHORT
(
weight
, 
˝
);

4343 
	`NS_GET16
(
weight
, 
˝
);

4346 #i‡
	`deföed
(
__NëBSD__
Ë|| deföed(
__O≥nBSD__
Ë|| deföed(
OLD_NAMESER
Ë|| deföed(
__FªeBSD__
)

4347 
p‹t
 = 
	`_gë_sh‹t
(
˝
);

4348 
˝
 +(
u_sh‹t
);

4349 #ñi‡
	`deföed
(
__APPLE_CC__
)

4350 
	`GETSHORT
(
p‹t
, 
˝
);

4352 
	`NS_GET16
(
p‹t
, 
˝
);

4355 
n
 = 
	`dn_ex∑nd
(
msg
, 
eom
, 
˝
, (*Ë
ho°buf
, 256);

4357 i‡(
n
 < 0)

4360 
˝
 +
n
;

4362 
§víåy
 = &
ouçut_§v
->§víåy[
™swîno
];

4363 
	`¢¥ötf
(
§víåy
->
§v
, (§víåy->§v), "%s", 
ho°buf
);

4365 
§víåy
->
¥i‹ôy
 = 
¥ef
;

4366 
§víåy
->
weight
 = weight;

4368 i‡(
weight
)

4369 
§víåy
->
rweight
 = (Ë(1 + 
	`øndom
(Ë% (10000 * srvíåy->
weight
));

4372 
§víåy
->
rweight
 = 0;

4374 
§víåy
->
p‹t
 =Öort;

4376 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosù] [ßve_SRVÑec‹d] [%s] IN SRV -> [%s/%i/%i/%i/%i]\n", 
ouçut_§v
->
«me
, 
§víåy
->
§v
, srvíåy->
p‹t
, srvíåy->
¥i‹ôy
, srvíåy->
weight
, srvíåy->
rweight
));

4378 
ouçut_§v
->
§v_°©e
 = 
OSIP_SRV_STATE_COMPLETED
;

4380 
™swîno
++;

4382 i‡(
™swîno
 == 10)

4386 i‡(
™swîno
 == 0)

4387  
OSIP_UNKNOWN_HOST
;

4389 
	`osù_§v_ªc‹d_s‹t
(
ouçut_§v
, 
™swîno
);

4390  
OSIP_SUCCESS
;

4391 
	}
}

4393 
	$eXosù_dnsutûs_§v_lookup
(
osù_«±r
 *
ouçut_ªc‹d
, c⁄° *
dns£rvî
) {

4394 i‡(
ouçut_ªc‹d
->
«±r_°©e
 =
OSIP_NAPTR_STATE_SRVDONE
)

4395  
OSIP_SUCCESS
;

4397 
ouçut_ªc‹d
->
sùudp_ªc‹d
.
§v_°©e
 = 
OSIP_SRV_STATE_NOTSUPPORTED
;

4398 
ouçut_ªc‹d
->
sùt˝_ªc‹d
.
§v_°©e
 = 
OSIP_SRV_STATE_NOTSUPPORTED
;

4399 
ouçut_ªc‹d
->
sùés_ªc‹d
.
§v_°©e
 = 
OSIP_SRV_STATE_NOTSUPPORTED
;

4400 
ouçut_ªc‹d
->
sùdés_ªc‹d
.
§v_°©e
 = 
OSIP_SRV_STATE_NOTSUPPORTED
;

4401 
ouçut_ªc‹d
->
sùs˘p_ªc‹d
.
§v_°©e
 = 
OSIP_SRV_STATE_NOTSUPPORTED
;

4403 
	`_eXosù_dnsutûs_§v_lookup
(&
ouçut_ªc‹d
->
sùudp_ªc‹d
);

4404 
	`_eXosù_dnsutûs_§v_lookup
(&
ouçut_ªc‹d
->
sùt˝_ªc‹d
);

4405 
	`_eXosù_dnsutûs_§v_lookup
(&
ouçut_ªc‹d
->
sùés_ªc‹d
);

4406 
	`_eXosù_dnsutûs_§v_lookup
(&
ouçut_ªc‹d
->
sùdés_ªc‹d
);

4409 i‡(
ouçut_ªc‹d
->
sùudp_ªc‹d
.
§v_°©e
 =
OSIP_SRV_STATE_COMPLETED
)

4410 
ouçut_ªc‹d
->
«±r_°©e
 = 
OSIP_NAPTR_STATE_SRVDONE
;

4412 i‡(
ouçut_ªc‹d
->
sùt˝_ªc‹d
.
§v_°©e
 =
OSIP_SRV_STATE_COMPLETED
)

4413 
ouçut_ªc‹d
->
«±r_°©e
 = 
OSIP_NAPTR_STATE_SRVDONE
;

4415 i‡(
ouçut_ªc‹d
->
sùés_ªc‹d
.
§v_°©e
 =
OSIP_SRV_STATE_COMPLETED
)

4416 
ouçut_ªc‹d
->
«±r_°©e
 = 
OSIP_NAPTR_STATE_SRVDONE
;

4418 i‡(
ouçut_ªc‹d
->
sùdés_ªc‹d
.
§v_°©e
 =
OSIP_SRV_STATE_COMPLETED
)

4419 
ouçut_ªc‹d
->
«±r_°©e
 = 
OSIP_NAPTR_STATE_SRVDONE
;

4421 i‡(
ouçut_ªc‹d
->
sùs˘p_ªc‹d
.
§v_°©e
 =
OSIP_SRV_STATE_COMPLETED
)

4422 
ouçut_ªc‹d
->
«±r_°©e
 = 
OSIP_NAPTR_STATE_SRVDONE
;

4425 
ouçut_ªc‹d
->
«±r_°©e
 = 
OSIP_NAPTR_STATE_RETRYLATER
;

4428 
	}
}

4430 
	$eXosù_dnsutûs_«±r_lookup
(
osù_«±r_t
 *
ouçut_ªc‹d
, c⁄° *
domaö
, c⁄° *
dns£rvî
) {

4431 
quîybuf
 
™swî
;

4432 
n
;

4433 
™cou¡
, 
qdcou¡
;

4436 
HEADER
 *
hp
;

4437 
º_«me
[512];

4438 *
msg
, *
eom
, *
˝
;

4439 
dÀn
, 
ty≥
, 
a˛ass
;

4440 
âl
;

4441 
™swîno
;

4443 
ouçut_ªc‹d
->
«±r_°©e
 = 
OSIP_NAPTR_STATE_RETRYLATER
;

4445 i‡(
domaö
 =
NULL
)

4446  
OSIP_BADPARAMETER
;

4448 i‡(
	`°æí
(
domaö
) > 512)

4449  
OSIP_BADPARAMETER
;

4451 
	`¢¥ötf
(
ouçut_ªc‹d
->
domaö
, (output_record->domain), "%s", domain);

4453 
ouçut_ªc‹d
->
«±r_°©e
 = 
OSIP_NAPTR_STATE_INPROGRESS
;

4455 
n
 = 
	`ªs_quîy
(
domaö
, 
C_IN
, 
T_NAPTR
, (*Ë&
™swî
, (answer));

4457 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosù] [NAPTR LOOKUP]ábouàtÿask f‹ [%†NAPTR]\n", 
domaö
));

4459 i‡(
n
 < (Ë(
HEADER
)) {

4460 
h°©us
 = 
h_î∫o
;

4462 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosù] [NAPTR LOOKUP]Ñes_quîy faûed [%†NAPTR]\n", 
domaö
));

4464 i‡(
h°©us
 =
NO_DATA
)

4465 
ouçut_ªc‹d
->
«±r_°©e
 = 
OSIP_NAPTR_STATE_NOTSUPPORTED
;

4467 i‡(
h°©us
 =
HOST_NOT_FOUND
)

4468 
ouçut_ªc‹d
->
«±r_°©e
 = 
OSIP_NAPTR_STATE_NOTSUPPORTED
;

4471 
ouçut_ªc‹d
->
«±r_°©e
 = 
OSIP_NAPTR_STATE_RETRYLATER
;

4473  
OSIP_UNDEFINED_ERROR
;

4477 
hp
 = (
HEADER
 *Ë&
™swî
;

4478 
qdcou¡
 = 
	`¡ohs
(
hp
->qdcount);

4479 
™cou¡
 = 
	`¡ohs
(
hp
->ancount);

4483 
msg
 = (*Ë(&
™swî
);

4484 
eom
 = (*Ë(&
™swî
Ë+ 
n
;

4485 
˝
 = (*Ë(&
™swî
Ë+ (
HEADER
);

4487 
qdcou¡
-- > 0 && 
˝
 < 
eom
) {

4488 
n
 = 
	`dn_ex∑nd
(
msg
, 
eom
, 
˝
, (*Ë
º_«me
, 512);

4490 i‡(
n
 < 0) {

4491 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosù] [NAPTR LOOKUP] invÆid SRVÑec‹dánswî f‹ [%†NAPTR] [bad f‹m©]\n", 
domaö
));

4492 
ouçut_ªc‹d
->
«±r_°©e
 = 
OSIP_NAPTR_STATE_RETRYLATER
;

4493  
OSIP_UNDEFINED_ERROR
;

4496 
˝
 +
n
 + 
QFIXEDSZ
;

4500 
™swîno
 = 0;

4503 
™cou¡
-- > 0 && 
˝
 < 
eom
) {

4504 
Àn
;

4505 
osù_§v_ªc‹d_t
 
§vªc‹d
;

4507 
n
 = 
	`dn_ex∑nd
(
msg
, 
eom
, 
˝
, (*Ë
º_«me
, 512);

4509 i‡(
n
 < 0) {

4510 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosù] [NAPTR LOOKUP] invÆid NAPTRánswî f‹ [%†NAPTR] [bad f‹m©]\n", 
domaö
));

4511 
ouçut_ªc‹d
->
«±r_°©e
 = 
OSIP_NAPTR_STATE_RETRYLATER
;

4512  
OSIP_UNDEFINED_ERROR
;

4515 
˝
 +
n
;

4517 #i‡
	`deföed
(
__NëBSD__
Ë|| deföed(
__O≥nBSD__
Ë|| deföed(
OLD_NAMESER
Ë|| deföed(
__FªeBSD__
)

4518 
ty≥
 = 
	`_gë_sh‹t
(
˝
);

4519 
˝
 +(
u_sh‹t
);

4520 #ñi‡
	`deföed
(
__APPLE_CC__
)

4521 
	`GETSHORT
(
ty≥
, 
˝
);

4523 
	`NS_GET16
(
ty≥
, 
˝
);

4526 #i‡
	`deföed
(
__NëBSD__
Ë|| deföed(
__O≥nBSD__
Ë|| deföed(
OLD_NAMESER
Ë|| deföed(
__FªeBSD__
)

4527 
a˛ass
 = 
	`_gë_sh‹t
(
˝
);

4528 
˝
 +(
u_sh‹t
);

4529 #ñi‡
	`deföed
(
__APPLE_CC__
)

4530 
a˛ass
++;

4531 
	`GETSHORT
(
a˛ass
, 
˝
);

4533 
a˛ass
++;

4534 
	`NS_GET16
(
a˛ass
, 
˝
);

4537 #i‡
	`deföed
(
__NëBSD__
Ë|| deföed(
__O≥nBSD__
Ë|| deföed(
OLD_NAMESER
Ë|| deföed(
__FªeBSD__
)

4538 
âl
 = 
	`_gë_l⁄g
(
˝
);

4539 
˝
 +(
u_l⁄g
);

4540 #ñi‡
	`deföed
(
__APPLE_CC__
)

4541 
âl
++;

4542 
	`GETLONG
(
âl
, 
˝
);

4544 
âl
++;

4545 
	`NS_GET32
(
âl
, 
˝
);

4548 #i‡
	`deföed
(
__NëBSD__
Ë|| deföed(
__O≥nBSD__
Ë|| deföed(
OLD_NAMESER
Ë|| deföed(
__FªeBSD__
)

4549 
dÀn
 = 
	`_gë_sh‹t
(
˝
);

4550 
˝
 +(
u_sh‹t
);

4551 #ñi‡
	`deföed
(
__APPLE_CC__
)

4552 
	`GETSHORT
(
dÀn
, 
˝
);

4554 
	`NS_GET16
(
dÀn
, 
˝
);

4557 i‡(
ty≥
 !
T_NAPTR
) {

4558 
˝
 +
dÀn
;

4562 
	`mem£t
(&
§vªc‹d
, 0, (
osù_§v_ªc‹d_t
));

4564 
	`mem˝y
((*Ë&
§vªc‹d
.
‹dî
, 
˝
, 2);

4565 
§vªc‹d
.
‹dî
 = 
	`¡ohs
(srvrecord.order);

4566 
˝
 += ();

4567 
	`mem˝y
((*Ë&
§vªc‹d
.
¥e„ªn˚
, 
˝
, 2);

4568 
§vªc‹d
.
¥e„ªn˚
 = 
	`¡ohs
(srvrecord.preference);

4569 
˝
 += ();

4571 
Àn
 = *
˝
;

4572 
˝
++;

4573 
	`°∫˝y
(
§vªc‹d
.
Êag
, (*Ë
˝
, 
Àn
);

4574 
§vªc‹d
.
Êag
[
Àn
] = '\0';

4575 
˝
 +
Àn
;

4577 
Àn
 = *
˝
;

4578 
˝
++;

4579 
	`°∫˝y
(
§vªc‹d
.
¥Ÿocﬁ
, (*Ë
˝
, 
Àn
);

4580 
§vªc‹d
.
¥Ÿocﬁ
[
Àn
] = '\0';

4581 
˝
 +
Àn
;

4583 
Àn
 = *
˝
;

4584 
˝
++;

4585 
	`°∫˝y
(
§vªc‹d
.
ªgexp
, (*Ë
˝
, 
Àn
);

4586 
§vªc‹d
.
ªgexp
[
Àn
] = '\0';

4587 
˝
 +
Àn
;

4589 
n
 = 
	`dn_ex∑nd
(
msg
, 
eom
, 
˝
, 
§vªc‹d
.
ª∂a˚mít
, 1024 - 1);

4591 i‡(
n
 < 0)

4594 
˝
 +
n
;

4596 i‡(
§vªc‹d
.
Êag
[0] == 's' || srvrecord.flag[0] == 'S') {

4597 
	`¢¥ötf
(
§vªc‹d
.
«me
, (§vªc‹d.«me), "%s", srvªc‹d.
ª∂a˚mít
);

4600 i‡(
§vªc‹d
.
Êag
[0] == 'a' || srvrecord.flag[0] == 'A') {

4601 
	`¢¥ötf
(
§vªc‹d
.
«me
, (§vªc‹d.«me), "%s", srvªc‹d.
ª∂a˚mít
);

4604 i‡(
§vªc‹d
.
Êag
[0] == 'u' || srvrecord.flag[0] == 'U') {

4605 
	`«±r_íum_m©ch_™d_ª∂a˚
(
ouçut_ªc‹d
, &
§vªc‹d
);

4608 
§vªc‹d
.
§v_°©e
 = 
OSIP_SRV_STATE_UNKNOWN
;

4610 i‡(
	`osù_°∫ˇ£cmp
(
§vªc‹d
.
«me
, "_sù._udp.", 10Ë=0 || osù_°∫ˇ£cmp(§vªc‹d.
¥Ÿocﬁ
, "SIP+D2U", 8) == 0) {

4611 
	`mem˝y
(&
ouçut_ªc‹d
->
sùudp_ªc‹d
, &
§vªc‹d
, (
osù_§v_ªc‹d_t
));

4612 
ouçut_ªc‹d
->
«±r_°©e
 = 
OSIP_NAPTR_STATE_NAPTRDONE
;

4614 } i‡(
	`osù_°∫ˇ£cmp
(
§vªc‹d
.
«me
, "_sù._t˝.", 10Ë=0 || osù_°∫ˇ£cmp(§vªc‹d.
¥Ÿocﬁ
, "SIP+D2T", 8) == 0) {

4615 
	`mem˝y
(&
ouçut_ªc‹d
->
sùt˝_ªc‹d
, &
§vªc‹d
, (
osù_§v_ªc‹d_t
));

4616 
ouçut_ªc‹d
->
«±r_°©e
 = 
OSIP_NAPTR_STATE_NAPTRDONE
;

4618 } i‡(
	`osù_°∫ˇ£cmp
(
§vªc‹d
.
¥Ÿocﬁ
, "SIPS+D2T", 9) == 0) {

4619 
	`mem˝y
(&
ouçut_ªc‹d
->
sùés_ªc‹d
, &
§vªc‹d
, (
osù_§v_ªc‹d_t
));

4620 
ouçut_ªc‹d
->
«±r_°©e
 = 
OSIP_NAPTR_STATE_NAPTRDONE
;

4622 } i‡(
	`osù_°∫ˇ£cmp
(
§vªc‹d
.
¥Ÿocﬁ
, "SIPS+D2U", 9) == 0) {

4623 
	`mem˝y
(&
ouçut_ªc‹d
->
sùdés_ªc‹d
, &
§vªc‹d
, (
osù_§v_ªc‹d_t
));

4624 
ouçut_ªc‹d
->
«±r_°©e
 = 
OSIP_NAPTR_STATE_NAPTRDONE
;

4626 } i‡(
	`osù_°∫ˇ£cmp
(
§vªc‹d
.
¥Ÿocﬁ
, "SIP+D2S", 8) == 0) {

4627 
	`mem˝y
(&
ouçut_ªc‹d
->
sùs˘p_ªc‹d
, &
§vªc‹d
, (
osù_§v_ªc‹d_t
));

4628 
ouçut_ªc‹d
->
«±r_°©e
 = 
OSIP_NAPTR_STATE_NAPTRDONE
;

4630 } i‡(
	`osù_°∫ˇ£cmp
(
§vªc‹d
.
¥Ÿocﬁ
, "E2U+SIP", 8) == 0 || osip_strncasecmp(srvrecord.protocol, "SIP+E2U", 8) == 0) {

4631 
§vªc‹d
.
§v_°©e
 = 
OSIP_SRV_STATE_COMPLETED
;

4632 
	`mem˝y
(&
ouçut_ªc‹d
->
sùíum_ªc‹d
, &
§vªc‹d
, (
osù_§v_ªc‹d_t
));

4633 
ouçut_ªc‹d
->
«±r_°©e
 = 
OSIP_NAPTR_STATE_NAPTRDONE
;

4636 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosù] [ßve_NAPTRÑec‹d] [%s] -> [%i][%i][%s][%s][%s]\n", 
º_«me
, 
§vªc‹d
.
‹dî
, srvªc‹d.
¥e„ªn˚
, srvªc‹d.
¥Ÿocﬁ
, srvªc‹d.
ªgexp
, srvªc‹d.
«me
));

4638 
™swîno
++;

4641 i‡(
™swîno
 == 0) {

4642 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosù] [NAPTR LOOKUP]ÇÿNAPTR f‹ SIP f‹ domaö [%s]\n", 
domaö
));

4643 
ouçut_ªc‹d
->
«±r_°©e
 = 
OSIP_NAPTR_STATE_NOTSUPPORTED
;

4644  
OSIP_SUCCESS
;

4647 i‡(
ouçut_ªc‹d
->
«±r_°©e
 !
OSIP_NAPTR_STATE_NAPTRDONE
)

4648 
ouçut_ªc‹d
->
«±r_°©e
 = 
OSIP_NAPTR_STATE_NOTSUPPORTED
;

4650 i‡(
ouçut_ªc‹d
->
sùíum_ªc‹d
.
§v_°©e
 =
OSIP_SRV_STATE_COMPLETED
)

4651 
ouçut_ªc‹d
->
«±r_°©e
 = 
OSIP_NAPTR_STATE_SRVDONE
;

4653  
OSIP_SUCCESS
;

4654 
	}
}

4656 
osù_«±r
 *
	$eXosù_dnsutûs_«±r
(
eXosù_t
 *
exc⁄ãxt
, c⁄° *
_domaö
, c⁄° *
¥Ÿocﬁ
, c⁄° *
å™•‹t
, 
kìp_ö_ˇche
) {

4657 
osù_li°_ôî©‹_t
 
ô
;

4658 
osù_«±r
 *
«±r_ªc‹d
;

4659 
i
;

4660 
nŸ_ö_li°
 = 0;

4662 
domaö
[
NI_MAXHOST
 * 2];

4663 
AUS
[64];

4664 
dns£rvî
[
NI_MAXHOST
];

4665 *
dñim_aus
;

4666 *
dñim_dns£rvî
;

4668 i‡(
_domaö
 =
NULL
)

4669  
NULL
;

4671 
	`mem£t
(
domaö
, 0, (domain));

4672 
	`mem£t
(
AUS
, 0, (AUS));

4673 
	`mem£t
(
dns£rvî
, 0, (dnsserver));

4674 
dñim_aus
 = 
	`°rchr
(
_domaö
, '!');

4676 i‡(
dñim_aus
 !
NULL
 && delim_aus[1] != '\0') {

4679 
size_t
 
idx
;

4680 
size_t
 
idx_domaö
 = 0;

4681 
size_t
 
idx_AUS
 = 0;

4682 
size_t
 
aus_Àngth
;

4684 
dñim_aus
++;

4685 
dñim_dns£rvî
 = 
	`°rchr
(
dñim_aus
, '!');

4686 
aus_Àngth
 = 
	`°æí
(
dñim_aus
);

4688 i‡(
dñim_dns£rvî
 !
NULL
)

4689 
aus_Àngth
 = 
dñim_dns£rvî
 - 
dñim_aus
;

4691 i‡(
dñim_dns£rvî
 !
NULL
 && delim_dnsserver[1] != '\0') {

4692 
dñim_dns£rvî
++;

4693 
	`¢¥ötf
(
dns£rvî
, (dns£rvî), "%s", 
dñim_dns£rvî
);

4696 
idx
 = 0; idx + 1 <
aus_Àngth
; idx++) {

4697 i‡(
dñim_aus
[
idx
] ='+' || 
	`isdigô
(delim_aus[idx])) {

4698 
AUS
[
idx_AUS
] = 
dñim_aus
[
idx
];

4699 
idx_AUS
++;

4703 
AUS
[
idx_AUS
] = '\0';

4705 
idx
 = 0; idx + 1 <
aus_Àngth
; idx++) {

4706 i‡(
	`isdigô
(
dñim_aus
[
aus_Àngth
 - 
idx
 - 1])) {

4707 
domaö
[
idx_domaö
] = 
dñim_aus
[
aus_Àngth
 - 
idx
 - 1];

4708 
idx_domaö
++;

4709 
domaö
[
idx_domaö
] = '.';

4710 
idx_domaö
++;

4714 
domaö
[
idx_domaö
] = '\0';

4715 
	`¢¥ötf
(
domaö
 + 
idx_domaö
, 
dñim_aus
 - 
_domaö
, "%s", _domain);

4717 } i‡(
dñim_aus
 !
NULL
 && delim_aus[1] == '\0') {

4718 
	`¢¥ötf
(
domaö
, 
dñim_aus
 - 
_domaö
 + 1, "%s", _domain);

4721 
dñim_aus
 = 
NULL
;

4722 
	`¢¥ötf
(
domaö
, (domaö), "%s", 
_domaö
);

4725 i‡(
dnsutûs_li°
 =
NULL
) {

4726 
dnsutûs_li°
 = (
osù_li°_t
 *Ë
	`osù_mÆloc
((osip_list_t));

4727 
	`osù_li°_öô
(
dnsutûs_li°
);

4730 i‡(
kìp_ö_ˇche
 < 0) {

4731 
«±r_ªc‹d
 = (
osù_«±r_t
 *Ë
	`osù_li°_gë_fú°
(
dnsutûs_li°
, &
ô
);

4733 
«±r_ªc‹d
 !
NULL
) {

4734 i‡(
	`osù_°rˇ£cmp
(
domaö
, 
«±r_ªc‹d
->domain) == 0) {

4735 i‡(
«±r_ªc‹d
->
«±r_°©e
 =
OSIP_NAPTR_STATE_RETRYLATER
)

4738 i‡(
«±r_ªc‹d
->
«±r_°©e
 =
OSIP_NAPTR_STATE_NOTSUPPORTED
)

4741  
«±r_ªc‹d
;

4744 
«±r_ªc‹d
 = 
NULL
;

4746 i‡(
ô
.
pos
 == 9)

4749 
«±r_ªc‹d
 = (
osù_«±r_t
 *Ë
	`osù_li°_gë_√xt
(&
ô
);

4752  
NULL
;

4755 
«±r_ªc‹d
 = (
osù_«±r_t
 *Ë
	`osù_li°_gë_fú°
(
dnsutûs_li°
, &
ô
);

4757 
«±r_ªc‹d
 !
NULL
) {

4759 i‡(
«±r_ªc‹d
->
«±r_°©e
 =
OSIP_NAPTR_STATE_NAPTRDONE
 ||Ç≠å_ªc‹d->«±r_°©ê=
OSIP_NAPTR_STATE_SRVINPROGRESS
)

4760 
	`eXosù_dnsutûs_§v_lookup
(
«±r_ªc‹d
, 
dns£rvî
);

4762 
«±r_ªc‹d
 = 
NULL
;

4764 i‡(
ô
.
pos
 == 9)

4767 
«±r_ªc‹d
 = (
osù_«±r_t
 *Ë
	`osù_li°_gë_√xt
(&
ô
);

4770 
ô
.
pos
 = 0;

4771 
«±r_ªc‹d
 = (
osù_«±r_t
 *Ë
	`osù_li°_gë_fú°
(
dnsutûs_li°
, &
ô
);

4773 
«±r_ªc‹d
 !
NULL
) {

4774 i‡(
	`osù_°rˇ£cmp
(
domaö
, 
«±r_ªc‹d
->domain) == 0) {

4775 i‡(
«±r_ªc‹d
->
«±r_°©e
 =
OSIP_NAPTR_STATE_RETRYLATER
)

4778 i‡(
«±r_ªc‹d
->
«±r_°©e
 =
OSIP_NAPTR_STATE_NAPTRDONE
 ||Ç≠å_ªc‹d->«±r_°©ê=
OSIP_NAPTR_STATE_SRVINPROGRESS
)

4779 
	`eXosù_dnsutûs_§v_lookup
(
«±r_ªc‹d
, 
dns£rvî
);

4781  
«±r_ªc‹d
;

4784 
«±r_ªc‹d
 = 
NULL
;

4786 i‡(
ô
.
pos
 == 9)

4789 
«±r_ªc‹d
 = (
osù_«±r_t
 *Ë
	`osù_li°_gë_√xt
(&
ô
);

4792 i‡(
ô
.
pos
 =9 && 
kìp_ö_ˇche
 > 0) {

4807 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosù] [NAPTR LOOKUP]Åimêwû»ãŒ how much you gÿthîê[%s] - it'†wr⁄g codê∑th, fix it\n", 
domaö
));

4809 
kìp_ö_ˇche
 = 0;

4811 
«±r_ªc‹d
 = (
osù_«±r_t
 *Ë
	`osù_mÆloc
((osip_naptr_t));

4812 
	`mem£t
(
«±r_ªc‹d
, 0, (
osù_«±r_t
));

4813 
«±r_ªc‹d
->
kìp_ö_ˇche
 = keep_in_cache;

4814 
	`¢¥ötf
(
«±r_ªc‹d
->
AUS
, (naptr_record->AUS), "%s", AUS);

4816 } i‡(
«±r_ªc‹d
 =
NULL
) {

4817 
«±r_ªc‹d
 = (
osù_«±r_t
 *Ë
	`osù_mÆloc
((osip_naptr_t));

4818 
	`mem£t
(
«±r_ªc‹d
, 0, (
osù_«±r_t
));

4819 
«±r_ªc‹d
->
kìp_ö_ˇche
 = keep_in_cache;

4820 
nŸ_ö_li°
 = 1;

4821 
	`¢¥ötf
(
«±r_ªc‹d
->
AUS
, (naptr_record->AUS), "%s", AUS);

4825 
	`mem£t
(
«±r_ªc‹d
, 0, (
osù_«±r_t
));

4826 
«±r_ªc‹d
->
kìp_ö_ˇche
 = 1;

4827 
	`¢¥ötf
(
«±r_ªc‹d
->
AUS
, (naptr_record->AUS), "%s", AUS);

4830 
i
 = 
	`eXosù_dnsutûs_«±r_lookup
(
«±r_ªc‹d
, 
domaö
, 
dns£rvî
);

4832 i‡(
i
 < 0) {

4833 i‡(
kìp_ö_ˇche
 <= 0) {

4834  
«±r_ªc‹d
;

4837 i‡(
nŸ_ö_li°
 == 1) {

4838 
	`osù_li°_add
(
dnsutûs_li°
, 
«±r_ªc‹d
, -1);

4841  
«±r_ªc‹d
;

4844 i‡(
«±r_ªc‹d
->
«±r_°©e
 =
OSIP_NAPTR_STATE_NAPTRDONE
 ||Ç≠å_ªc‹d->«±r_°©ê=
OSIP_NAPTR_STATE_SRVINPROGRESS
)

4845 
	`eXosù_dnsutûs_§v_lookup
(
«±r_ªc‹d
, 
dns£rvî
);

4847 i‡(
kìp_ö_ˇche
 <= 0) {

4848  
«±r_ªc‹d
;

4851 i‡(
nŸ_ö_li°
 == 1)

4852 
	`osù_li°_add
(
dnsutûs_li°
, 
«±r_ªc‹d
, -1);

4854  
«±r_ªc‹d
;

4855 
	}
}

4861 #i‡
deföed
(
EXOSIP_DNSUTILS_DEFINED
Ë&& !deföed(
EXOSIP_DNSUTILS_RELEASE
)

4862 
	#EXOSIP_DNSUTILS_RELEASE


	)

4863 
	$eXosù_dnsutûs_ªÀa£
(
osù_«±r
 *
«±r_ªc‹d
) {

4864 i‡(
«±r_ªc‹d
 =
NULL
)

4867 i‡(
«±r_ªc‹d
->
kìp_ö_ˇche
 > 0)

4870 
	`osù_‰ì
(
«±r_ªc‹d
);

4871 
	}
}

4875 #i‡!
deföed
(
EXOSIP_DNSUTILS_DEFINED
)

4877 
osù_«±r
 *
	$eXosù_dnsutûs_«±r
(
eXosù_t
 *
exc⁄ãxt
, c⁄° *
domaö
, c⁄° *
¥Ÿocﬁ
, c⁄° *
å™•‹t
, 
kìp_ö_ˇche
) {

4878  
NULL
;

4879 
	}
}

4883 #i‡!
deföed
(
EXOSIP_DNSUTILS_DNS_PROCESS
)

4884 
	$eXosù_dnsutûs_dns_¥o˚ss
(
osù_«±r_t
 *
«±r_ªc‹d
, 
f‹˚
) {

4885  
OSIP_UNDEFINED_ERROR
;

4886 
	}
}

4889 #i‡!
deföed
(
EXOSIP_DNSUTILS_RELEASE
)

4890 
	$eXosù_dnsutûs_ªÀa£
(
osù_«±r
 *
«±r_ªc‹d
) {

4892 
	}
}

4895 #i‡!
deföed
(
EXOSIP_DNSUTILS_FIND_SNI_DEFINED
)

4896 c⁄° *
	$_eXosù_dnsutûs_föd_¢i
(
eXosù_t
 *
exc⁄ãxt
, c⁄° *
ho°«me
) {

4897  
NULL
;

4898 
	}
}

4901 #i‡!
deföed
(
EXOSIP_DNSUTILS_GETSOCK_DEFINED
)

4902 
	$_eXosù_dnsutûs_gësock
(
eXosù_t
 *
exc⁄ãxt
, 
fd_£t
 *
ªad_fds
, fd_£à*
wrôe_fds
) {

4904 
	}
}

4907 #i‡!
deföed
(
EXOSIP_DNSUTILS_CHECKSOCK_DEFINED
)

4908 
	$_eXosù_dnsutûs_checksock
(
eXosù_t
 *
exc⁄ãxt
, 
fd_£t
 *
ªad_fds
, fd_£à*
wrôe_fds
) {

4910 
	}
}

4913 #i‡!
deföed
(
EXOSIP_DNSUTILS_ADDSOCK_EPOLL_DEFINED
)

4914 
	$_eXosù_dnsutûs_addsock_ïﬁl
(
eXosù_t
 *
exc⁄ãxt
, *
ˇªs_fd_èbÀ
) {

4916 
	}
}

4919 #i‡!
deföed
(
EXOSIP_DNSUTILS_CHECKSOCK_EPOLL_DEFINED
)

4920 
	$_eXosù_dnsutûs_checksock_ïﬁl
(
eXosù_t
 *
exc⁄ãxt
, 
nfds
) {

4922 
	}
}

4925 #i‡!
deföed
(
EXOSIP_DNSUTILS_DELSOCK_EPOLL_DEFINED
)

4926 
	$_eXosù_dnsutûs_dñsock_ïﬁl
(
eXosù_t
 *
exc⁄ãxt
, *
ˇªs_fd_èbÀ
) {

4928 
	}
}

	@/home/unasaw/sip_project/libexosip2-5.3.0/src/inet_ntop.c

51 
	~"eXosù2.h
"

53 #i‡!
deföed
(
HAVE_INET_NTOP
)

56 
	~"öë_¡›.h
"

58 #i‡!
deföed
(
_WIN32_WCE
)

59 
	~<î∫o.h
>

63 
	t__öt32
 
	tuöt32_t
;

67 
	#IN6ADDRSZ
 16

	)

68 
	#INT16SZ
 2

	)

70 #i‚de‡
AF_INET6


71 
	#AF_INET6
 
AF_MAX
 + 1

	)

79 c⁄° *
_öë_¡›4
(c⁄° 
u_ch¨
 *
§c
, *
d°
, 
size_t
 
size
);

80 c⁄° *
_öë_¡›6
(c⁄° 
u_ch¨
 *
§c
, *
d°
, 
size_t
 
size
);

90 c⁄° *
	$_öë_¡›
(
af
, 
§c
, 
d°
, 
size
) af;

91 c⁄° *
§c
;

92 *
d°
;

93 
size_t
 
size
;

95 
af
) {

96 
AF_INET
:

97  (
	`_öë_¡›4
(
§c
, 
d°
, 
size
));

99 
AF_INET6
:

100  (
	`_öë_¡›6
(
§c
, 
d°
, 
size
));

103 #i‚de‡
_WIN32_WCE


104 
î∫o
 = 
WSAEAFNOSUPPORT
;

106  (
NULL
);

110 
	}
}

123 c⁄° *
	$_öë_¡›4
(
§c
, 
d°
, 
size
Ëc⁄° 
u_ch¨
 *src;

124 *
d°
;

125 
size_t
 
size
;

127 c⁄° 
fmt
[] = "%u.%u.%u.%u";

128 
tmp
[ "255.255.255.255"];

130 
	`•rötf
(
tmp
, 
fmt
, 
§c
[0], src[1], src[2], src[3]);

132 i‡((
size_t
Ë
	`°æí
(
tmp
Ë>
size
) {

133 #i‚de‡
_WIN32_WCE


134 
î∫o
 = 
ENOSPC
;

136  (
NULL
);

139 
	`°r˝y
(
d°
, 
tmp
);

140  (
d°
);

141 
	}
}

149 c⁄° *
	$_öë_¡›6
(
§c
, 
d°
, 
size
Ëc⁄° 
u_ch¨
 *src;

150 *
d°
;

151 
size_t
 
size
;

160 
tmp
[ "ffff:ffff:ffff:ffff:ffff:ffff:255.255.255.255"], *
ç
;

162 
ba£
, 
Àn
;

163 } 
be°
, 
cur
;

164 
uöt32_t
 
w‹ds
[
IN6ADDRSZ
 / 
INT16SZ
];

165 
i
;

172 
	`mem£t
(
w‹ds
, 0,  words);

174 
i
 = 0; i < 
IN6ADDRSZ
; i++)

175 
w‹ds
[
i
 / 2] |(
§c
[i] << ((1 - (i % 2)) << 3));

177 
be°
.
ba£
 = -1;

178 
be°
.
Àn
 = 0;

179 
cur
.
ba£
 = -1;

180 
cur
.
Àn
 = 0;

182 
i
 = 0; i < (
IN6ADDRSZ
 / 
INT16SZ
); i++) {

183 i‡(
w‹ds
[
i
] == 0) {

184 i‡(
cur
.
ba£
 == -1)

185 
cur
.
ba£
 = 
i
, cur.
Àn
 = 1;

188 
cur
.
Àn
++;

191 i‡(
cur
.
ba£
 != -1) {

192 i‡(
be°
.
ba£
 =-1 || 
cur
.
Àn
 > best.len)

193 
be°
 = 
cur
;

195 
cur
.
ba£
 = -1;

200 i‡(
cur
.
ba£
 != -1) {

201 i‡(
be°
.
ba£
 =-1 || 
cur
.
Àn
 > best.len)

202 
be°
 = 
cur
;

205 i‡(
be°
.
ba£
 !-1 && be°.
Àn
 < 2)

206 
be°
.
ba£
 = -1;

211 
ç
 = 
tmp
;

213 
i
 = 0; i < (
IN6ADDRSZ
 / 
INT16SZ
); i++) {

215 i‡(
be°
.
ba£
 !-1 && 
i
 >be°.ba£ && i < (be°.ba£ + be°.
Àn
)) {

216 i‡(
i
 =
be°
.
ba£
)

217 *
ç
++ = ':';

223 i‡(
i
 != 0)

224 *
ç
++ = ':';

227 i‡(
i
 =6 && 
be°
.
ba£
 =0 && (be°.
Àn
 =6 || (be°.À¿=5 && 
w‹ds
[5] == 0xffff))) {

228 i‡(!
	`_öë_¡›4
(
§c
 + 12, 
ç
,  
tmp
 - (tp -Åmp)))

229  (
NULL
);

231 
ç
 +
	`°æí
(tp);

235 
	`•rötf
(
ç
, "%x", 
w‹ds
[
i
]);

236 
ç
 +
	`°æí
(tp);

240 i‡(
be°
.
ba£
 !-1 && (be°.ba£ + be°.
Àn
Ë=(
IN6ADDRSZ
 / 
INT16SZ
))

241 *
ç
++ = ':';

243 *
ç
++ = '\0';

248 i‡((
size_t
)(
ç
 - 
tmp
Ë> 
size
) {

249 #i‡!
	`deföed
(
_WIN32_WCE
)

250 
î∫o
 = 
ENOSPC
;

252  (
NULL
);

255 
	`°r˝y
(
d°
, 
tmp
);

256  (
d°
);

257 
	}
}

	@/home/unasaw/sip_project/libexosip2-5.3.0/src/inet_ntop.h

33 
	~"eXosù2.h
"

35 #i‡!
deföed
(
HAVE_INET_NTOP
)

38 #i‡
deföed
(
__˝lu•lus
)

42 c⁄° *
_öë_¡›
(
af
, c⁄° *
§c
, *
d°
, 
size_t
 
size
);

44 
	#öë_¡›
 
_öë_¡›


	)

46 #i‡
deföed
(
__˝lu•lus
)

	@/home/unasaw/sip_project/libexosip2-5.3.0/src/jauth.c

33 
	~"eXosù2.h
"

34 
	~<eXosù2/eXosù.h
>

36 
	~<osù2/osù_mt.h
>

37 
	~<osù2/osù_c⁄dv.h
>

39 
	~<osù∑r£r2/osù_md5.h
>

40 
	~"mûíage.h
"

42 #ifde‡
HAVE_OPENSSL_SSL_H


43 
	~<›ís¶/sha.h
>

48 
	#MD5HASHLEN
 16

	)

49 
	#MD5HEXLEN
 32

	)

51 
	#SHA256HASHLEN
 32

	)

52 
	#SHA256HEXLEN
 64

	)

54 
	#MAXHEXLEN
 64

	)

57 
	#MAX_HEADER_LEN
 2049

	)

58 
	#KLEN
 16

	)

59 
	tK
[
KLEN
];

61 
	#RANDLEN
 16

	)

62 
	tRAND
[
RANDLEN
];

64 
	#AUTNLEN
 16

	)

65 
	tAUTN
[
AUTNLEN
];

67 
	#AKLEN
 6

	)

68 
	tAK
[
AKLEN
];

70 
	#AMFLEN
 2

	)

71 
	tAMF
[
AMFLEN
];

73 
	#MACLEN
 8

	)

74 
	tMAC
[
MACLEN
];

76 
	#CKLEN
 16

	)

77 
	tCK
[
CKLEN
];

79 
	#IKLEN
 16

	)

80 
	tIK
[
IKLEN
];

82 
	#SQNLEN
 6

	)

83 
	tSQN
[
SQNLEN
];

85 
	#AUTSLEN
 14

	)

86 
	tAUTS
[
AUTSLEN
];

88 
	#AKA1HEXLEN
 16

	)

89 
	#AKA2HEXLEN
 80

	)

91 
AMF
 
	gamf
 = "\0\0";

96 
CvtHex
(*
öput_bö¨y
, 
size_t
 
öput_Àn
, *
ouçut_hexa
);

97 
Dige°CÆcHA1
(c⁄° *
pszAlg
, c⁄° *
pszU£rName
, c⁄° *
pszRólm
, c⁄° *
pszPassw‹d
, c⁄° *
pszN⁄˚
, c⁄° *
pszCN⁄˚
, 
Sessi⁄Key
[
MD5HEXLEN
 + 1]);

98 
Dige°CÆcRe•⁄£
(
HA1
[
MD5HEXLEN
 + 1], c⁄° *
pszN⁄˚
, c⁄° *
pszN⁄˚Cou¡
, c⁄° *
pszCN⁄˚
, c⁄° *
pszQ›
, 
Aka
, c⁄° *
pszMëhod
, c⁄° *
pszDige°Uri
, 
HE¡ôy
[MD5HEXLEN + 1],

99 
Re•⁄£
[
MD5HEXLEN
 + 1]);

100 
Dige°CÆcRe•⁄£Aka
(c⁄° *
pszPassw‹d
, c⁄° *
pszN⁄˚
, c⁄° *
pszCN⁄˚
, c⁄° *
pszQ›
, c⁄° *
pszMëhod
, c⁄° *
pszDige°Uri
, 
vîsi⁄
, 
ª•_hex
[
AKA2HEXLEN
 + 1]);

102 
	$CvtHex
(*
öput_bö¨y
, 
size_t
 
öput_Àn
, *
ouçut_hexa
) {

103 
i
;

104 
j
;

106 
i
 = 0; i < 
öput_Àn
; i++) {

107 
j
 = (
öput_bö¨y
[
i
] >> 4) & 0xf;

109 i‡(
j
 <= 9)

110 
ouçut_hexa
[
i
 * 2] = (
j
 + '0');

113 
ouçut_hexa
[
i
 * 2] = (
j
 + 'a' - 10);

115 
j
 = 
öput_bö¨y
[
i
] & 0xf;

117 i‡(
j
 <= 9)

118 
ouçut_hexa
[
i
 * 2 + 1] = (
j
 + '0');

121 
ouçut_hexa
[
i
 * 2 + 1] = (
j
 + 'a' - 10);

124 
ouçut_hexa
[
i
 * 2] = '\0';

125 
	}
}

127 #ifde‡
HAVE_OPENSSL_SSL_H


129 
SHA256Dige°CÆcHA1
(c⁄° *
pszAlg
, c⁄° *
pszU£rName
, c⁄° *
pszRólm
, c⁄° *
pszPassw‹d
, c⁄° *
pszN⁄˚
, c⁄° *
pszCN⁄˚
, 
Sessi⁄Key
[
SHA256HEXLEN
 + 1]) {

130 
SHA256_CTX
 
	gSHA256Ctx
;

131 
	gHA1
[
SHA256HASHLEN
];

132 
	gHA1Hex
[
SHA256HEXLEN
 + 1];

134 
SHA256_Inô
(&
SHA256Ctx
);

135 
SHA256_Upd©e
(&
SHA256Ctx
, (*Ë
pszU£rName
, (Ë
°æí
(pszUserName));

136 
SHA256_Upd©e
(&
SHA256Ctx
, (*) ":", 1);

137 
SHA256_Upd©e
(&
SHA256Ctx
, (*Ë
pszRólm
, (Ë
°æí
(pszRealm));

138 
SHA256_Upd©e
(&
SHA256Ctx
, (*) ":", 1);

139 
SHA256_Upd©e
(&
SHA256Ctx
, (*Ë
pszPassw‹d
, (Ë
°æí
(pszPassword));

140 
SHA256_FöÆ
((*Ë
HA1
, &
SHA256Ctx
);

142 i‡((
	gpszAlg
 !
NULL
Ë&& 
osù_°rˇ£cmp
(
pszAlg
, "sha256-sess") == 0) {

143 
CvtHex
(
HA1
, 
SHA256HASHLEN
, 
HA1Hex
);

144 
SHA256_Inô
(&
SHA256Ctx
);

145 
SHA256_Upd©e
(&
SHA256Ctx
, (*Ë
HA1Hex
, 
SHA256HEXLEN
);

146 
SHA256_Upd©e
(&
SHA256Ctx
, (*) ":", 1);

147 
SHA256_Upd©e
(&
SHA256Ctx
, (*Ë
pszN⁄˚
, (Ë
°æí
(pszNonce));

148 
SHA256_Upd©e
(&
SHA256Ctx
, (*) ":", 1);

149 
SHA256_Upd©e
(&
SHA256Ctx
, (*Ë
pszCN⁄˚
, (Ë
°æí
(pszCNonce));

150 
SHA256_FöÆ
((*Ë
HA1
, &
SHA256Ctx
);

153 
CvtHex
(
HA1
, 
SHA256HASHLEN
, 
Sessi⁄Key
);

156 
SHA256Dige°CÆcRe•⁄£
(
HA1
[
SHA256HEXLEN
 + 1], c⁄° *
pszN⁄˚
, c⁄° *
pszN⁄˚Cou¡
, c⁄° *
pszCN⁄˚
, c⁄° *
pszQ›
, 
Aka
, c⁄° *
pszMëhod
, c⁄° *
pszDige°Uri
, 
HE¡ôy
[SHA256HEXLEN + 1],

157 
Re•⁄£
[
SHA256HEXLEN
 + 1]) {

158 
SHA256_CTX
 
	gSHA256Ctx
;

159 
	gHA2
[
SHA256HASHLEN
];

160 
	gRe•Hash
[
SHA256HASHLEN
];

161 
	gHA2Hex
[
SHA256HEXLEN
 + 1];

164 
SHA256_Inô
(&
SHA256Ctx
);

165 
SHA256_Upd©e
(&
SHA256Ctx
, (*Ë
pszMëhod
, (Ë
°æí
(pszMethod));

166 
SHA256_Upd©e
(&
SHA256Ctx
, (*) ":", 1);

167 
SHA256_Upd©e
(&
SHA256Ctx
, (*Ë
pszDige°Uri
, (Ë
°æí
(pszDigestUri));

169 i‡(
	gpszQ›
 =
NULL
) {

170 
auth_wôhoutq›
;

172 } i‡(0 =
osù_°rˇ£cmp
(
pszQ›
, "auth-int")) {

173 
	gauth_wôhauth_öt
;

175 } i‡(0 =
osù_°rˇ£cmp
(
pszQ›
, "auth")) {

176 
	gauth_wôhauth
;

179 
	gauth_wôhoutq›
:

180 
SHA256_FöÆ
((*Ë
HA2
, &
SHA256Ctx
);

181 
CvtHex
(
HA2
, 
SHA256HASHLEN
, 
HA2Hex
);

184 
SHA256_Inô
(&
SHA256Ctx
);

185 
SHA256_Upd©e
(&
SHA256Ctx
, (*Ë
HA1
, 
SHA256HEXLEN
);

186 
SHA256_Upd©e
(&
SHA256Ctx
, (*) ":", 1);

187 
SHA256_Upd©e
(&
SHA256Ctx
, (*Ë
pszN⁄˚
, (Ë
°æí
(pszNonce));

188 
SHA256_Upd©e
(&
SHA256Ctx
, (*) ":", 1);

190 
	gíd
;

192 
	gauth_wôhauth_öt
:

194 
SHA256_Upd©e
(&
SHA256Ctx
, (*) ":", 1);

195 
SHA256_Upd©e
(&
SHA256Ctx
, (*Ë
HE¡ôy
, 
SHA256HEXLEN
);

197 
	gauth_wôhauth
:

198 
SHA256_FöÆ
((*Ë
HA2
, &
SHA256Ctx
);

199 
CvtHex
(
HA2
, 
SHA256HASHLEN
, 
HA2Hex
);

202 
SHA256_Inô
(&
SHA256Ctx
);

203 
SHA256_Upd©e
(&
SHA256Ctx
, (*Ë
HA1
, 
SHA256HEXLEN
);

204 
SHA256_Upd©e
(&
SHA256Ctx
, (*) ":", 1);

205 
SHA256_Upd©e
(&
SHA256Ctx
, (*Ë
pszN⁄˚
, (Ë
°æí
(pszNonce));

206 
SHA256_Upd©e
(&
SHA256Ctx
, (*) ":", 1);

208 i‡(
	gAka
 == 0) {

209 
SHA256_Upd©e
(&
SHA256Ctx
, (*Ë
pszN⁄˚Cou¡
, (Ë
°æí
(pszNonceCount));

210 
SHA256_Upd©e
(&
SHA256Ctx
, (*) ":", 1);

211 
SHA256_Upd©e
(&
SHA256Ctx
, (*Ë
pszCN⁄˚
, (Ë
°æí
(pszCNonce));

212 
SHA256_Upd©e
(&
SHA256Ctx
, (*) ":", 1);

213 
SHA256_Upd©e
(&
SHA256Ctx
, (*Ë
pszQ›
, (Ë
°æí
(pszQop));

214 
SHA256_Upd©e
(&
SHA256Ctx
, (*) ":", 1);

217 
	gíd
:

218 
SHA256_Upd©e
(&
SHA256Ctx
, (*Ë
HA2Hex
, 
SHA256HEXLEN
);

219 
SHA256_FöÆ
((*Ë
Re•Hash
, &
SHA256Ctx
);

220 
CvtHex
(
Re•Hash
, 
SHA256HASHLEN
, 
Re•⁄£
);

225 
Dige°CÆcHA1
(c⁄° *
pszAlg
, c⁄° *
pszU£rName
, c⁄° *
pszRólm
, c⁄° *
pszPassw‹d
, c⁄° *
pszN⁄˚
, c⁄° *
pszCN⁄˚
, 
Sessi⁄Key
[
MD5HEXLEN
 + 1]) {

226 
osù_MD5_CTX
 
	gMd5Ctx
;

227 
	gHA1
[
MD5HASHLEN
];

228 
	gHA1Hex
[
MD5HEXLEN
 + 1];

230 
osù_MD5Inô
(&
Md5Ctx
);

231 
osù_MD5Upd©e
(&
Md5Ctx
, (*Ë
pszU£rName
, (Ë
°æí
(pszUserName));

232 
osù_MD5Upd©e
(&
Md5Ctx
, (*) ":", 1);

233 
osù_MD5Upd©e
(&
Md5Ctx
, (*Ë
pszRólm
, (Ë
°æí
(pszRealm));

234 
osù_MD5Upd©e
(&
Md5Ctx
, (*) ":", 1);

235 
osù_MD5Upd©e
(&
Md5Ctx
, (*Ë
pszPassw‹d
, (Ë
°æí
(pszPassword));

236 
osù_MD5FöÆ
((*Ë
HA1
, &
Md5Ctx
);

238 i‡((
	gpszAlg
 !
NULL
Ë&& 
osù_°rˇ£cmp
(
pszAlg
, "md5-sess") == 0) {

239 
CvtHex
(
HA1
, 
MD5HASHLEN
, 
HA1Hex
);

240 
osù_MD5Inô
(&
Md5Ctx
);

241 
osù_MD5Upd©e
(&
Md5Ctx
, (*Ë
HA1Hex
, 
MD5HEXLEN
);

242 
osù_MD5Upd©e
(&
Md5Ctx
, (*) ":", 1);

243 
osù_MD5Upd©e
(&
Md5Ctx
, (*Ë
pszN⁄˚
, (Ë
°æí
(pszNonce));

244 
osù_MD5Upd©e
(&
Md5Ctx
, (*) ":", 1);

245 
osù_MD5Upd©e
(&
Md5Ctx
, (*Ë
pszCN⁄˚
, (Ë
°æí
(pszCNonce));

246 
osù_MD5FöÆ
((*Ë
HA1
, &
Md5Ctx
);

249 
CvtHex
(
HA1
, 
MD5HASHLEN
, 
Sessi⁄Key
);

253 
Dige°CÆcRe•⁄£
(
HA1
[
MD5HEXLEN
 + 1],

254 c⁄° *
pszN⁄˚
,

255 c⁄° *
pszN⁄˚Cou¡
,

256 c⁄° *
pszCN⁄˚
,

257 c⁄° *
pszQ›
,

258 
Aka
,

259 c⁄° *
pszMëhod
,

260 c⁄° *
pszDige°Uri
,

261 
HE¡ôy
[
MD5HEXLEN
 + 1],

262 
Re•⁄£
[
MD5HEXLEN
 + 1]

264 
osù_MD5_CTX
 
	gMd5Ctx
;

265 
	gHA2
[
MD5HASHLEN
];

266 
	gRe•Hash
[
MD5HASHLEN
];

267 
	gHA2Hex
[
MD5HEXLEN
 + 1];

270 
osù_MD5Inô
(&
Md5Ctx
);

271 
osù_MD5Upd©e
(&
Md5Ctx
, (*Ë
pszMëhod
, (Ë
°æí
(pszMethod));

272 
osù_MD5Upd©e
(&
Md5Ctx
, (*) ":", 1);

273 
osù_MD5Upd©e
(&
Md5Ctx
, (*Ë
pszDige°Uri
, (Ë
°æí
(pszDigestUri));

275 i‡(
	gpszQ›
 =
NULL
) {

276 
auth_wôhoutq›
;

278 } i‡(0 =
osù_°rˇ£cmp
(
pszQ›
, "auth-int")) {

279 
	gauth_wôhauth_öt
;

281 } i‡(0 =
osù_°rˇ£cmp
(
pszQ›
, "auth")) {

282 
	gauth_wôhauth
;

285 
	gauth_wôhoutq›
:

286 
osù_MD5FöÆ
((*Ë
HA2
, &
Md5Ctx
);

287 
CvtHex
(
HA2
, 
MD5HASHLEN
, 
HA2Hex
);

290 
osù_MD5Inô
(&
Md5Ctx
);

291 
osù_MD5Upd©e
(&
Md5Ctx
, (*Ë
HA1
, 
MD5HEXLEN
);

292 
osù_MD5Upd©e
(&
Md5Ctx
, (*) ":", 1);

293 
osù_MD5Upd©e
(&
Md5Ctx
, (*Ë
pszN⁄˚
, (Ë
°æí
(pszNonce));

294 
osù_MD5Upd©e
(&
Md5Ctx
, (*) ":", 1);

296 
	gíd
;

298 
	gauth_wôhauth_öt
:

300 
osù_MD5Upd©e
(&
Md5Ctx
, (*) ":", 1);

301 
osù_MD5Upd©e
(&
Md5Ctx
, (*Ë
HE¡ôy
, 
MD5HEXLEN
);

303 
	gauth_wôhauth
:

304 
osù_MD5FöÆ
((*Ë
HA2
, &
Md5Ctx
);

305 
CvtHex
(
HA2
, 
MD5HASHLEN
, 
HA2Hex
);

308 
osù_MD5Inô
(&
Md5Ctx
);

309 
osù_MD5Upd©e
(&
Md5Ctx
, (*Ë
HA1
, 
MD5HEXLEN
);

310 
osù_MD5Upd©e
(&
Md5Ctx
, (*) ":", 1);

311 
osù_MD5Upd©e
(&
Md5Ctx
, (*Ë
pszN⁄˚
, (Ë
°æí
(pszNonce));

312 
osù_MD5Upd©e
(&
Md5Ctx
, (*) ":", 1);

314 i‡(
	gAka
 == 0) {

315 
osù_MD5Upd©e
(&
Md5Ctx
, (*Ë
pszN⁄˚Cou¡
, (Ë
°æí
(pszNonceCount));

316 
osù_MD5Upd©e
(&
Md5Ctx
, (*) ":", 1);

317 
osù_MD5Upd©e
(&
Md5Ctx
, (*Ë
pszCN⁄˚
, (Ë
°æí
(pszCNonce));

318 
osù_MD5Upd©e
(&
Md5Ctx
, (*) ":", 1);

319 
osù_MD5Upd©e
(&
Md5Ctx
, (*Ë
pszQ›
, (Ë
°æí
(pszQop));

320 
osù_MD5Upd©e
(&
Md5Ctx
, (*) ":", 1);

323 
	gíd
:

324 
osù_MD5Upd©e
(&
Md5Ctx
, (*Ë
HA2Hex
, 
MD5HEXLEN
);

325 
osù_MD5FöÆ
((*Ë
Re•Hash
, &
Md5Ctx
);

326 
CvtHex
(
Re•Hash
, 
MD5HASHLEN
, 
Re•⁄£
);

331 
	$ba£64_vÆ
(
x
) {

332 
x
) {

529  
OSIP_SUCCESS
;

530 
	}
}

532 *
	$ba£64_decode_°rög
(c⁄° *
buf
, 
Àn
, *
√wÀn
) {

533 
i
, 
j
;

534 
x1
, 
x2
, 
x3
, 
x4
;

535 *
out
;

537 
out
 = (*Ë
	`osù_mÆloc
((
Àn
 * 3 / 4) + 8);

539 i‡(
out
 =
NULL
)

540  
NULL
;

542 
i
 = 0, 
j
 = 0; i + 4 < 
Àn
; i += 4) {

543 
x1
 = 
	`ba£64_vÆ
(
buf
[
i
]);

544 
x2
 = 
	`ba£64_vÆ
(
buf
[
i
 + 1]);

545 
x3
 = 
	`ba£64_vÆ
(
buf
[
i
 + 2]);

546 
x4
 = 
	`ba£64_vÆ
(
buf
[
i
 + 3]);

547 
out
[
j
++] = (
x1
 << 2Ë| ((
x2
 & 0x30) >> 4);

548 
out
[
j
++] = ((
x2
 & 0x0FË<< 4Ë| ((
x3
 & 0x3C) >> 2);

549 
out
[
j
++] = ((
x3
 & 0x03Ë<< 6Ë| (
x4
 & 0x3F);

552 i‡(
i
 <
Àn
) {

553 
x1
 = 
	`ba£64_vÆ
(
buf
[
i
]);

555 i‡(
i
 + 1 < 
Àn
)

556 
x2
 = 
	`ba£64_vÆ
(
buf
[
i
 + 1]);

559 
x2
 = -1;

561 i‡(
i
 + 2 < 
Àn
)

562 
x3
 = 
	`ba£64_vÆ
(
buf
[
i
 + 2]);

565 
x3
 = -1;

567 i‡(
i
 + 3 < 
Àn
)

568 
x4
 = 
	`ba£64_vÆ
(
buf
[
i
 + 3]);

571 
x4
 = -1;

573 i‡(
x2
 != -1) {

574 
out
[
j
++] = (
x1
 << 2Ë| ((
x2
 & 0x30) >> 4);

576 i‡(
x3
 != -1) {

577 
out
[
j
++] = ((
x2
 & 0x0FË<< 4Ë| ((
x3
 & 0x3C) >> 2);

579 i‡(
x4
 != -1) {

580 
out
[
j
++] = ((
x3
 & 0x03Ë<< 6Ë| (
x4
 & 0x3F);

586 
out
[
j
++] = 0;

587 *
√wÀn
 = 
j
 - 1;

588  
out
;

589 
	}
}

592 
	gba£64
[65] = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";

593 *
	$ba£64_ícode_°rög
(c⁄° *
buf
, 
Àn
, *
√wÀn
) {

594 
i
, 
k
;

595 
åùÀts
, 
ª°
;

596 *
out
, *
±r
;

598 
åùÀts
 = 
Àn
 / 3;

599 
ª°
 = 
Àn
 % 3;

600 
out
 = (*Ë
	`osù_mÆloc
((
åùÀts
 * 4) + 8);

602 i‡(
out
 =
NULL
)

603  
NULL
;

605 
±r
 = 
out
;

607 
i
 = 0; i < 
åùÀts
 * 3; i += 3) {

608 
k
 = (((Ë
buf
[
i
]) & 0xFC) >> 2;

609 *
±r
 = 
ba£64
[
k
];

610 
±r
++;

612 
k
 = (((Ë
buf
[
i
]) & 0x03) << 4;

613 
k
 |(((Ë
buf
[
i
 + 1]) & 0xF0) >> 4;

614 *
±r
 = 
ba£64
[
k
];

615 
±r
++;

617 
k
 = (((Ë
buf
[
i
 + 1]) & 0x0F) << 2;

618 
k
 |(((Ë
buf
[
i
 + 2]) & 0xC0) >> 6;

619 *
±r
 = 
ba£64
[
k
];

620 
±r
++;

622 
k
 = (((Ë
buf
[
i
 + 2]) & 0x3F);

623 *
±r
 = 
ba£64
[
k
];

624 
±r
++;

627 
i
 = 
åùÀts
 * 3;

629 
ª°
) {

634 
k
 = (((Ë
buf
[
i
]) & 0xFC) >> 2;

635 *
±r
 = 
ba£64
[
k
];

636 
±r
++;

638 
k
 = (((Ë
buf
[
i
]) & 0x03) << 4;

639 *
±r
 = 
ba£64
[
k
];

640 
±r
++;

642 *
±r
 = '=';

643 
±r
++;

645 *
±r
 = '=';

646 
±r
++;

650 
k
 = (((Ë
buf
[
i
]) & 0xFC) >> 2;

651 *
±r
 = 
ba£64
[
k
];

652 
±r
++;

654 
k
 = (((Ë
buf
[
i
]) & 0x03) << 4;

655 
k
 |(((Ë
buf
[
i
 + 1]) & 0xF0) >> 4;

656 *
±r
 = 
ba£64
[
k
];

657 
±r
++;

659 
k
 = (((Ë
buf
[
i
 + 1]) & 0x0F) << 2;

660 *
±r
 = 
ba£64
[
k
];

661 
±r
++;

663 *
±r
 = '=';

664 
±r
++;

668 *
±r
 = '\0';

669 *
√wÀn
 = ()(
±r
 - 
out
);

670  
out
;

671 
	}
}

674 
	ghexa
[16] = "0123456789abcdef";

676 
Dige°CÆcRe•⁄£Aka
(c⁄° *
pszPassw‹d
, c⁄° *
pszN⁄˚
, c⁄° *
pszCN⁄˚
, c⁄° *
pszQ›
, c⁄° *
pszMëhod
, c⁄° *
pszDige°Uri
, 
vîsi⁄
, 
ª•_hex
[
AKA2HEXLEN
 + 1]) {

677 
	gtmp
[
MAX_HEADER_LEN
];

679 *
	gn⁄˚64
, *
	gn⁄˚
;

680 
	gn⁄˚Àn
;

681 
RAND
 
	g∫d
;

682 
MAC
 
	gmac
, 
	gxmac
;

683 
SQN
 
	gsqn_he
;

684 
K
 
	gk
;

685 
	gªs
[
AKA1HEXLEN
 / 2];

686 
CK
 
	gck
;

687 
IK
 
	gik
;

688 
AK
 
	gak
;

689 
	gi
, 
	gj
;

692 
	gª•_hex
[0] = 0;

693 
¢¥ötf
(
tmp
, 
MAX_HEADER_LEN
 - 1, "%s", 
pszN⁄˚
);

694 
	gtmp
[
MAX_HEADER_LEN
 - 1] = 0;

695 
	gn⁄˚64
 = 
tmp
;

696 
	gn⁄˚
 = 
ba£64_decode_°rög
(
n⁄˚64
, (Ë
°æí
(
tmp
), &
n⁄˚Àn
);

698 i‡(
	gn⁄˚
 =
NULL
)

701 i‡(
	gn⁄˚Àn
 < 
	gRANDLEN
 + 
	gAUTNLEN
) {

703 
osù_‰ì
(
n⁄˚
);

704 
	gd⁄e
;

707 
mem˝y
(
∫d
, 
n⁄˚
, 
RANDLEN
);

708 
mem˝y
(
sqn_he
, 
n⁄˚
 + 
RANDLEN
, 
SQNLEN
);

709 
mem˝y
(
mac
, 
n⁄˚
 + 
RANDLEN
 + 
SQNLEN
 + 
AMFLEN
, 
MACLEN
);

711 
osù_‰ì
(
n⁄˚
);

713 
	gj
 = (Ë
°æí
(
pszPassw‹d
);

714 
mem˝y
(
k
, 
pszPassw‹d
, 
j
);

715 
mem£t
(
k
 + 
j
, 0, 
KLEN
 - j);

718 
f1
(
k
, 
∫d
, 
sqn_he
, 
amf
, 
xmac
);

720 i‡(
memcmp
(
mac
, 
xmac
, 
MACLEN
) != 0) {

729 
f2345
(
k
, 
∫d
, (
u8
 *Ë
ªs
, 
ck
, 
ik
, 
ak
);

733 
	gi
 = 0; i < 
	gAKA1HEXLEN
 / 2; i++) {

734 
	gª•_hex
[2 * 
i
] = 
hexa
[(
ªs
[i] & 0xF0) >> 4];

735 
	gª•_hex
[2 * 
i
 + 1] = 
hexa
[
ªs
[i] & 0x0F];

738 
	gª•_hex
[
AKA1HEXLEN
] = 0;

740 
	gd⁄e
:

742 
vîsi⁄
) {

750 
ª•_hex
[
AKA2HEXLEN
] = 0;

752 
	gi
 = 0; i < 
	gIKLEN
; i++) {

753 
	gª•_hex
[
AKA1HEXLEN
 + 2 * 
i
] = 
hexa
[(
ik
[i] & 0xF0) >> 4];

754 
	gª•_hex
[
AKA1HEXLEN
 + 2 * 
i
 + 1] = 
hexa
[
ik
[i] & 0x0F];

757 
	gi
 = 0; i < 
	gCKLEN
; i++) {

758 
	gª•_hex
[
AKA1HEXLEN
 + 
IKLEN
 * 2 + 2 * 
i
] = 
hexa
[(
ck
[i] & 0xF0) >> 4];

759 
	gª•_hex
[
AKA1HEXLEN
 + 
IKLEN
 * 2 + 2 * 
i
 + 1] = 
hexa
[
ck
[i] & 0x0F];

766 
	$_eXosù_¸óã_¥oxy_auth‹iz©i⁄_hódî
(
osù_¥oxy_authítiˇã_t
 *
wa
, c⁄° *
rquri
, c⁄° *
u£∫ame
, c⁄° *
∑sswd
, c⁄° *
ha1
, 
osù_¥oxy_auth‹iz©i⁄_t
 **
auth
, c⁄° *
mëhod
, c⁄° *
pCN⁄˚
, 
iN⁄˚Cou¡
) {

767 
osù_¥oxy_auth‹iz©i⁄_t
 *
aut
;

769 *
q›
 = 
NULL
;

770 *
Alg
 = "MD5";

771 
vîsi⁄
 = 0;

772 
i
;

775 i‡(
∑sswd
 =
NULL
)

776  
OSIP_BADPARAMETER
;

778 i‡(
wa
 =
NULL
)

779  
OSIP_BADPARAMETER
;

781 i‡(
wa
->
auth_ty≥
 =
NULL
 || wa->
n⁄˚
 == NULL) {

782 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] www_authenticate header isÇotácceptable\n"));

783  
OSIP_SYNTAXERROR
;

786 i‡(
wa
->
ªÆm
 =
NULL
) {

787 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] www_authenticate header containsánÉmptyÑealm [contact yourádmin]\n"));

790 i‡(0 !
	`osù_°rˇ£cmp
("Dige°", 
wa
->
auth_ty≥
)) {

791 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip]áuthenticationáuth_typeÇot supported [Digest only]\n"));

792  
OSIP_UNDEFINED_ERROR
;

796 i‡(
wa
->
Æg‹ôhm
 !
NULL
) {

797 i‡(0 =
	`osù_°rˇ£cmp
("MD5", 
wa
->
Æg‹ôhm
) || 0 == osip_strcasecmp("\"MD5\"", wa->algorithm)) {

798 #ifde‡
HAVE_OPENSSL_SSL_H


800 } i‡(0 =
	`osù_°rˇ£cmp
("SHA-256", 
wa
->
Æg‹ôhm
) || 0 == osip_strcasecmp("\"SHA-256\"", wa->algorithm)) {

801 
Alg
 = "SHA-256";

804 } i‡(0 =
	`osù_°rˇ£cmp
("AKAv1-MD5", 
wa
->
Æg‹ôhm
) || 0 == osip_strcasecmp("\"AKAv1-MD5\"", wa->algorithm)) {

805 
Alg
 = "AKAv1-MD5";

807 } i‡(0 =
	`osù_°rˇ£cmp
("AKAv2-MD5", 
wa
->
Æg‹ôhm
) || 0 == osip_strcasecmp("\"AKAv2-MD5\"", wa->algorithm)) {

808 
Alg
 = "AKAv2-MD5";

811 #ifde‡
HAVE_OPENSSL_SSL_H


812 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] skipáuthentication [algorithmÇot supported] [SHA-256, MD5, AKAv1-MD5, AKAv2-MD5]\n"));

814 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] skipáuthentication [algorithmÇot supported] [MD5, AKAv1-MD5, AKAv2-MD5]\n"));

816  
OSIP_UNDEFINED_ERROR
;

820 
i
 = 
	`osù_¥oxy_auth‹iz©i⁄_öô
(&
aut
);

822 i‡(
i
 != 0) {

823 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip]állocation failed [osip_proxy_authorization_init]\n"));

824  
i
;

828 
	`osù_¥oxy_auth‹iz©i⁄_£t_auth_ty≥
(
aut
, 
	`osù_°rdup
("Digest"));

829 
	`osù_¥oxy_auth‹iz©i⁄_£t_ªÆm
(
aut
, 
	`osù_°rdup
(
	`osù_¥oxy_authítiˇã_gë_ªÆm
(
wa
)));

831 i‡(
aut
->
ªÆm
 =
NULL
) {

832 
aut
->
ªÆm
 = (*Ë
	`osù_mÆloc
(3);

833 
aut
->
ªÆm
[0] = '"';

834 
aut
->
ªÆm
[1] = '"';

835 
aut
->
ªÆm
[2] = '\0';

838 
	`osù_¥oxy_auth‹iz©i⁄_£t_n⁄˚
(
aut
, 
	`osù_°rdup
(
	`osù_¥oxy_authítiˇã_gë_n⁄˚
(
wa
)));

840 i‡(
	`osù_¥oxy_authítiˇã_gë_›aque
(
wa
Ë!
NULL
)

841 
	`osù_¥oxy_auth‹iz©i⁄_£t_›aque
(
aut
, 
	`osù_°rdup
(
	`osù_¥oxy_authítiˇã_gë_›aque
(
wa
)));

844 
aut
->
u£∫ame
 = 
	`osù_mÆloc
(
	`°æí
(username) + 3);

846 i‡(
aut
->
u£∫ame
 =
NULL
) {

847 
	`osù_auth‹iz©i⁄_‰ì
(
aut
);

848  
OSIP_NOMEM
;

851 
	`•rötf
(
aut
->
u£∫ame
, "\"%s\"", username);

854 *
tmp
 = 
	`osù_mÆloc
(
	`°æí
(
rquri
) + 3);

856 i‡(
tmp
 =
NULL
) {

857 
	`osù_auth‹iz©i⁄_‰ì
(
aut
);

858  
OSIP_NOMEM
;

861 
	`•rötf
(
tmp
, "\"%s\"", 
rquri
);

862 
	`osù_¥oxy_auth‹iz©i⁄_£t_uri
(
aut
, 
tmp
);

864 
	`osù_¥oxy_auth‹iz©i⁄_£t_Æg‹ôhm
(
aut
, 
	`osù_°rdup
(
Alg
));

866 
q›
 = 
	`osù_www_authítiˇã_gë_q›_›ti⁄s
(
wa
);

868 i‡(
q›
 =
NULL
 || q›[0] ='\0' || 
	`°æí
(qop) < 4)

869 
q›
 = 
NULL
;

872 *
pszN⁄˚
 = 
NULL
;

873 *
pszCN⁄˚
 = 
NULL
;

874 c⁄° *
pszU£r
 = 
u£∫ame
;

875 *
pszRólm
 = 
NULL
;

876 c⁄° *
pszPass
 = 
NULL
;

877 *
szN⁄˚Cou¡
 = 
NULL
;

878 *
pszMëhod
 = (*Ë
mëhod
;

879 *
pszQ›
 = 
NULL
;

880 c⁄° *
pszURI
 = 
rquri
;

882 
HA1
[
MAXHEXLEN
 + 1];

883 
HA2
[
MAXHEXLEN
 + 1] = "";

884 
Re•⁄£
[
MAXHEXLEN
 + 1];

885 
Re•⁄£2
[
AKA2HEXLEN
 + 1];

886 c⁄° *
pha1
 = 
NULL
;

887 
size_t
 
ª•p⁄£_Àn
 = 0;

889 i‡(
	`osù_¥oxy_auth‹iz©i⁄_gë_ªÆm
(
aut
Ë=
NULL
) {

890 
pszRólm
 = 
	`osù_°rdup
("");

893 
pszRólm
 = 
	`osù_°rdup_wôhout_quŸe
(
	`osù_¥oxy_auth‹iz©i⁄_gë_ªÆm
(
aut
));

896 
pszPass
 = 
∑sswd
;

898 i‡(
	`osù_www_authítiˇã_gë_n⁄˚
(
wa
Ë=
NULL
) {

899 
	`osù_auth‹iz©i⁄_‰ì
(
aut
);

900 
	`osù_‰ì
(
pszRólm
);

901  
OSIP_SYNTAXERROR
;

904 
pszN⁄˚
 = 
	`osù_°rdup_wôhout_quŸe
(
	`osù_www_authítiˇã_gë_n⁄˚
(
wa
));

906 i‡(
q›
 !
NULL
 || 0 =
	`osù_°rˇ£cmp
(
Alg
, "SHA-256")) {

908 
pszQ›
 = 
	`osù_°rdup
("auth");

910 i‡(
pszQ›
 =
NULL
) {

911 
	`osù_auth‹iz©i⁄_‰ì
(
aut
);

912 
	`osù_‰ì
(
pszN⁄˚
);

913 
	`osù_‰ì
(
pszRólm
);

914  
OSIP_NOMEM
;

917 
szN⁄˚Cou¡
 = 
	`osù_mÆloc
(10);

919 i‡(
szN⁄˚Cou¡
 =
NULL
) {

920 
	`osù_auth‹iz©i⁄_‰ì
(
aut
);

921 
	`osù_‰ì
(
pszN⁄˚
);

922 
	`osù_‰ì
(
pszRólm
);

923 
	`osù_‰ì
(
pszQ›
);

924  
OSIP_NOMEM
;

927 
	`¢¥ötf
(
szN⁄˚Cou¡
, 9, "%.8i", 
iN⁄˚Cou¡
);

929 
pszCN⁄˚
 = 
	`osù_°rdup
(
pCN⁄˚
);

931 i‡(
pszCN⁄˚
 =
NULL
) {

932 
	`osù_auth‹iz©i⁄_‰ì
(
aut
);

933 
	`osù_‰ì
(
pszN⁄˚
);

934 
	`osù_‰ì
(
pszRólm
);

935 
	`osù_‰ì
(
pszQ›
);

936 
	`osù_‰ì
(
szN⁄˚Cou¡
);

937  
OSIP_NOMEM
;

940 
	`osù_¥oxy_auth‹iz©i⁄_£t_mesßge_q›
(
aut
, 
	`osù_°rdup
("auth"));

941 
	`osù_¥oxy_auth‹iz©i⁄_£t_n⁄˚_cou¡
(
aut
, 
	`osù_°rdup
(
szN⁄˚Cou¡
));

944 *
tmp
 = 
	`osù_mÆloc
(
	`°æí
(
pszCN⁄˚
) + 3);

946 i‡(
tmp
 =
NULL
) {

947 
	`osù_auth‹iz©i⁄_‰ì
(
aut
);

948 
	`osù_‰ì
(
pszN⁄˚
);

949 
	`osù_‰ì
(
pszCN⁄˚
);

950 
	`osù_‰ì
(
pszRólm
);

951 
	`osù_‰ì
(
pszQ›
);

952 
	`osù_‰ì
(
szN⁄˚Cou¡
);

953  
OSIP_NOMEM
;

956 
	`•rötf
(
tmp
, "\"%s\"", 
pszCN⁄˚
);

957 
	`osù_¥oxy_auth‹iz©i⁄_£t_˙⁄˚
(
aut
, 
tmp
);

961 i‡(0 =
	`osù_°rˇ£cmp
(
Alg
, "MD5")) {

962 i‡(
ha1
 && ha1[0]) {

964 
pha1
 = 
ha1
;

967 
	`Dige°CÆcHA1
("MD5", 
pszU£r
, 
pszRólm
, 
pszPass
, 
pszN⁄˚
, 
pszCN⁄˚
, 
HA1
);

968 
pha1
 = 
HA1
;

971 
vîsi⁄
 = 0;

972 
	`Dige°CÆcRe•⁄£
((*Ë
pha1
, 
pszN⁄˚
, 
szN⁄˚Cou¡
, 
pszCN⁄˚
, 
pszQ›
, 
vîsi⁄
, 
pszMëhod
, 
pszURI
, 
HA2
, 
Re•⁄£
);

973 
ª•p⁄£_Àn
 = 
MD5HEXLEN
 + 1;

974 #ifde‡
HAVE_OPENSSL_SSL_H


976 } i‡(0 =
	`osù_°rˇ£cmp
(
Alg
, "SHA-256")) {

977 
	`SHA256Dige°CÆcHA1
("SHA-256", 
pszU£r
, 
pszRólm
, 
pszPass
, 
pszN⁄˚
, 
pszCN⁄˚
, 
HA1
);

978 
vîsi⁄
 = 0;

979 
pha1
 = 
HA1
;

980 
	`SHA256Dige°CÆcRe•⁄£
((*Ë
pha1
, 
pszN⁄˚
, 
szN⁄˚Cou¡
, 
pszCN⁄˚
, 
pszQ›
, 
vîsi⁄
, 
pszMëhod
, 
pszURI
, 
HA2
, 
Re•⁄£
);

981 
ª•p⁄£_Àn
 = 
SHA256HEXLEN
 + 1;

985 i‡(0 =
	`osù_°rˇ£cmp
(
Alg
, "AKAv1-MD5"))

986 
vîsi⁄
 = 1;

989 
vîsi⁄
 = 2;

991 
	`Dige°CÆcRe•⁄£Aka
(
pszPass
, 
pszN⁄˚
, 
pszCN⁄˚
, 
pszQ›
, 
pszMëhod
, 
pszURI
, 
vîsi⁄
, 
Re•⁄£2
);

993 i‡(
ha1
 && ha1[0]) {

995 
pha1
 = 
ha1
;

998 
	`Dige°CÆcHA1
("MD5", 
pszU£r
, 
pszRólm
, 
Re•⁄£2
, 
pszN⁄˚
, 
pszCN⁄˚
, 
HA1
);

999 
pha1
 = 
HA1
;

1002 
	`Dige°CÆcRe•⁄£
((*Ë
pha1
, 
pszN⁄˚
, 
szN⁄˚Cou¡
, 
pszCN⁄˚
, 
pszQ›
, 
vîsi⁄
, 
pszMëhod
, 
pszURI
, 
HA2
, 
Re•⁄£
);

1003 
ª•p⁄£_Àn
 = 
MD5HEXLEN
 + 1;

1006 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO4
, 
NULL
, "[eXosù]Ñe•⁄£ i¿¥oxy_auth‹iz©i⁄ |%s|\n", 
Re•⁄£
));

1008 *
ª•
 = 
	`osù_mÆloc
(
ª•p⁄£_Àn
 + 2);

1010 i‡(
ª•
 =
NULL
) {

1011 
	`osù_auth‹iz©i⁄_‰ì
(
aut
);

1012 
	`osù_‰ì
(
pszN⁄˚
);

1013 
	`osù_‰ì
(
pszCN⁄˚
);

1014 
	`osù_‰ì
(
pszRólm
);

1015 
	`osù_‰ì
(
pszQ›
);

1016 
	`osù_‰ì
(
szN⁄˚Cou¡
);

1017  
OSIP_NOMEM
;

1020 
	`¢¥ötf
(
ª•
, 
ª•p⁄£_Àn
 + 2, "\"%s\"", 
Re•⁄£
);

1021 
ª•
[
ª•p⁄£_Àn
 + 1] = 0;

1022 
	`osù_¥oxy_auth‹iz©i⁄_£t_ª•⁄£
(
aut
, 
ª•
);

1024 
	`osù_‰ì
(
pszN⁄˚
);

1025 
	`osù_‰ì
(
pszCN⁄˚
);

1026 
	`osù_‰ì
(
pszRólm
);

1027 
	`osù_‰ì
(
pszQ›
);

1028 
	`osù_‰ì
(
szN⁄˚Cou¡
);

1031 *
auth
 = 
aut
;

1032  
OSIP_SUCCESS
;

1033 
	}
}

1035 
	$_eXosù_°‹e_n⁄˚
(
eXosù_t
 *
exc⁄ãxt
, c⁄° *
ˇŒ_id
, 
osù_¥oxy_authítiˇã_t
 *
wa
, 
™swî_code
) {

1036 
eXosù_hâp_auth
 *
hâp_auth
;

1037 
pos
;

1040 
pos
 = 0;Öo†< 
MAX_EXOSIP_HTTP_AUTH
;Öos++) {

1041 
hâp_auth
 = &
exc⁄ãxt
->
hâp_auths
[
pos
];

1043 i‡(
hâp_auth
->
pszCÆlId
[0] == '\0')

1046 i‡(
	`osù_°rˇ£cmp
(
hâp_auth
->
pszCÆlId
, 
ˇŒ_id
Ë=0 && ((hâp_auth->
wa
->
ªÆm
 =
NULL
 && wa->realm == NULL) || (http_auth->wa->realm != NULL && wa->realm != NULL && osip_strcasecmp(http_auth->wa->realm, wa->realm) == 0))) {

1047 
	`osù_¥oxy_authítiˇã_‰ì
(
hâp_auth
->
wa
);

1048 
hâp_auth
->
wa
 = 
NULL
;

1049 
	`osù_¥oxy_authítiˇã_˛⁄e
(
wa
, &(
hâp_auth
->wa));

1050 
hâp_auth
->
iN⁄˚Cou¡
 = 1;

1052 i‡(
hâp_auth
->
wa
 =
NULL
)

1053 
	`mem£t
(
hâp_auth
, 0, (
eXosù_hâp_auth
));

1055  
OSIP_SUCCESS
;

1060 
pos
 = 0;Öo†< 
MAX_EXOSIP_HTTP_AUTH
;Öos++) {

1061 
hâp_auth
 = &
exc⁄ãxt
->
hâp_auths
[
pos
];

1063 i‡(
hâp_auth
->
pszCÆlId
[0] == '\0') {

1064 
	`¢¥ötf
(
hâp_auth
->
pszCÆlId
, (hâp_auth->pszCÆlId), "%s", 
ˇŒ_id
);

1065 
	`mem£t
(
hâp_auth
->
pszCN⁄˚
, 0, (http_auth->pszCNonce));

1066 
hâp_auth
->
iN⁄˚Cou¡
 = 1;

1067 
	`osù_¥oxy_authítiˇã_˛⁄e
(
wa
, &(
hâp_auth
->wa));

1068 
hâp_auth
->
™swî_code
 =ánswer_code;

1070 i‡(
hâp_auth
->
wa
 =
NULL
)

1071 
	`mem£t
(
hâp_auth
, 0, (
eXosù_hâp_auth
));

1073  
OSIP_SUCCESS
;

1077 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosù] compûêwôh highî MAX_EXOSIP_HTTP_AUTH vÆuê(cuºít=%i)\n", 
MAX_EXOSIP_HTTP_AUTH
));

1078  
OSIP_UNDEFINED_ERROR
;

1079 
	}
}

1081 
	$_eXosù_dñëe_n⁄˚
(
eXosù_t
 *
exc⁄ãxt
, c⁄° *
ˇŒ_id
) {

1082 
eXosù_hâp_auth
 *
hâp_auth
;

1083 
pos
;

1086 
pos
 = 0;Öo†< 
MAX_EXOSIP_HTTP_AUTH
;Öos++) {

1087 
hâp_auth
 = &
exc⁄ãxt
->
hâp_auths
[
pos
];

1089 i‡(
hâp_auth
->
pszCÆlId
[0] == '\0')

1092 i‡(
	`osù_°rˇ£cmp
(
hâp_auth
->
pszCÆlId
, 
ˇŒ_id
) == 0) {

1093 
	`osù_¥oxy_authítiˇã_‰ì
(
hâp_auth
->
wa
);

1094 
	`mem£t
(
hâp_auth
, 0, (
eXosù_hâp_auth
));

1095  
OSIP_SUCCESS
;

1099  
OSIP_NOTFOUND
;

1100 
	}
}

	@/home/unasaw/sip_project/libexosip2-5.3.0/src/jcall.c

33 
	~"eXosù2.h
"

35 
	$_eXosù_ˇŒ_föd
(
eXosù_t
 *
exc⁄ãxt
, 
cid
, 
eXosù_ˇŒ_t
 **
jc
) {

36 i‡(
cid
 <= 0)

37  
OSIP_BADPARAMETER
;

39 *
jc
 = 
exc⁄ãxt
->
j_ˇŒs
; *j¯!
NULL
; *j¯(*jc)->
√xt
) {

40 i‡((*
jc
)->
c_id
 =
cid
) {

41  
OSIP_SUCCESS
;

45 *
jc
 = 
NULL
;

46  
OSIP_NOTFOUND
;

47 
	}
}

49 
	$_eXosù_ˇŒ_ª√w_expúe_time
(
eXosù_ˇŒ_t
 *
jc
) {

50 
time_t
 
now
 = 
	`osù_gësy°emtime
(
NULL
);

52 
jc
->
expúe_time
 = 
now
 + 180;

53 
	}
}

55 
	$_eXosù_ˇŒ_öô
(
eXosù_t
 *
exc⁄ãxt
, 
eXosù_ˇŒ_t
 **
jc
) {

56 *
jc
 = (
eXosù_ˇŒ_t
 *Ë
	`osù_mÆloc
((eXosip_call_t));

58 i‡(*
jc
 =
NULL
)

59  
OSIP_NOMEM
;

61 
	`mem£t
(*
jc
, 0, (
eXosù_ˇŒ_t
));

63 (*
jc
)->
c_id
 = -1;

65 #i‚de‡
MINISIZE


67 
timevÆ
 
now
;

69 
exc⁄ãxt
->
°©i°ics
.
Æloˇãd_ˇŒs
++;

70 
	`osù_gëtimeofday
(&
now
, 
NULL
);

71 
	`_eXosù_cou¡îs_upd©e
(&
exc⁄ãxt
->
avîage_ˇŒs
, 1, &
now
);

74  
OSIP_SUCCESS
;

75 
	}
}

77 
	$_eXosù_ˇŒ_ªmove_dülog_ª„ªn˚_ö_ˇŒ
(
eXosù_ˇŒ_t
 *
jc
, 
eXosù_dülog_t
 *
jd
) {

78 
eXosù_dülog_t
 *
_jd
;

80 i‡(
jc
 =
NULL
)

83 i‡(
jd
 =
NULL
)

86 
_jd
 = 
jc
->
c_dülogs
; _jd !
NULL
; _jd = _jd->
√xt
) {

87 i‡(
jd
 =
_jd
)

91 i‡(
_jd
 =
NULL
) {

95 
_jd
 = (
eXosù_dülog_t
 *Ë
	`osù_å™ß˘i⁄_gë_ª£rved3
(
jc
->
c_öc_å
);

97 i‡(
_jd
 !
NULL
 && _jd =
jd
)

98 
	`osù_å™ß˘i⁄_£t_ª£rved3
(
jc
->
c_öc_å
, 
NULL
);

100 
_jd
 = (
eXosù_dülog_t
 *Ë
	`osù_å™ß˘i⁄_gë_ª£rved3
(
jc
->
c_out_å
);

102 i‡(
_jd
 !
NULL
 && _jd =
jd
)

103 
	`osù_å™ß˘i⁄_£t_ª£rved3
(
jc
->
c_out_å
, 
NULL
);

105 
_jd
 = (
eXosù_dülog_t
 *Ë
	`osù_å™ß˘i⁄_gë_ª£rved3
(
jc
->
c_ˇn˚l_å
);

107 i‡(
_jd
 !
NULL
 && _jd =
jd
)

108 
	`osù_å™ß˘i⁄_£t_ª£rved3
(
jc
->
c_ˇn˚l_å
, 
NULL
);

109 
	}
}

111 
	$_eXosù_ˇŒ_‰ì
(
eXosù_t
 *
exc⁄ãxt
, 
eXosù_ˇŒ_t
 *
jc
) {

112 
eXosù_dülog_t
 *
jd
;

114 i‡(
jc
->
c_öc_å
 !
NULL
 && jc->c_öc_å->
‹ig_ªque°
 !NULL && jc->c_öc_å->‹ig_ªque°->
ˇŒ_id
 !NULL && jc->c_öc_å->‹ig_ªque°->ˇŒ_id->
numbî
 != NULL)

115 
	`_eXosù_dñëe_n⁄˚
(
exc⁄ãxt
, 
jc
->
c_öc_å
->
‹ig_ªque°
->
ˇŒ_id
->
numbî
);

117 i‡(
jc
->
c_out_å
 !
NULL
 && jc->c_out_å->
‹ig_ªque°
 !NULL && jc->c_out_å->‹ig_ªque°->
ˇŒ_id
 !NULL && jc->c_out_å->‹ig_ªque°->ˇŒ_id->
numbî
 != NULL)

118 
	`_eXosù_dñëe_n⁄˚
(
exc⁄ãxt
, 
jc
->
c_out_å
->
‹ig_ªque°
->
ˇŒ_id
->
numbî
);

120 
jd
 = 
jc
->
c_dülogs
; jd !
NULL
; jd = jc->c_dialogs) {

121 
	`REMOVE_ELEMENT
(
jc
->
c_dülogs
, 
jd
);

122 
	`_eXosù_dülog_‰ì
(
exc⁄ãxt
, 
jd
);

125 
	`_eXosù_dñëe_ª£rved
(
jc
->
c_öc_å
);

126 
	`_eXosù_dñëe_ª£rved
(
jc
->
c_out_å
);

127 
	`_eXosù_dñëe_ª£rved
(
jc
->
c_ˇn˚l_å
);

129 i‡(
jc
->
c_öc_å
 !
NULL
)

130 
	`osù_li°_add
(&
exc⁄ãxt
->
j_å™ß˘i⁄s
, 
jc
->
c_öc_å
, 0);

132 i‡(
jc
->
c_out_å
 !
NULL
)

133 
	`osù_li°_add
(&
exc⁄ãxt
->
j_å™ß˘i⁄s
, 
jc
->
c_out_å
, 0);

135 i‡(
jc
->
c_ˇn˚l_å
 !
NULL
)

136 
	`osù_li°_add
(&
exc⁄ãxt
->
j_å™ß˘i⁄s
, 
jc
->
c_ˇn˚l_å
, 0);

138 
	`osù_‰ì
(
jc
);

139 #i‚de‡
MINISIZE


140 
exc⁄ãxt
->
°©i°ics
.
Æloˇãd_ˇŒs
--;

142 
	}
}

	@/home/unasaw/sip_project/libexosip2-5.3.0/src/jcallback.c

33 
	~"eXosù2.h
"

35 
	~<eXosù2/eXosù.h
>

38 
rcvªgi°î_Áûuª
(
osù_å™ß˘i⁄_t
 *
å
, 
osù_mesßge_t
 *
sù
);

40 
	$_eXosù_ªgi°î_c⁄è˘_is_modifõd
(
eXosù_ªg_t
 *
jr
, 
osù_mesßge_t
 *
ªque°
, osù_mesßge_à*
ª•⁄£
) {

41 
osù_vü_t
 *
vü
;

42 
osù_gíîic_∑øm_t
 *
br
 = 
NULL
;

44 *
ª˚ived_vüho°
 = 
NULL
;

45 *
Ω‹t_vüp‹t
 = 
NULL
;

46 *
p‹t_5061
 = "5061";

47 *
p‹t_5060
 = "5060";

49 
osù_c⁄è˘_t
 *
c⁄è˘
;

50 *
c⁄è˘_p‹t
 = 
NULL
;

53 i‡(
jr
->
r_ªg_≥riod
 == 0)

56 
	`osù_mesßge_gë_vü
(
ª•⁄£
, 0, &
vü
);

58 i‡(
vü
 =
NULL
 || vü->
¥Ÿocﬁ
 =NULL || vü->
ho°
 == NULL)

61 
	`osù_mesßge_gë_c⁄è˘
(
ªque°
, 0, &
c⁄è˘
);

63 i‡(
c⁄è˘
 =
NULL
 || c⁄è˘->
uæ
 =NULL || c⁄è˘->uæ->
ho°
 == NULL)

68 
	`osù_vü_∑øm_gë_by«me
(
vü
, "ª˚ived", &
br
);

70 i‡(
br
 !
NULL
 && br->
gvÆue
 != NULL)

71 
ª˚ived_vüho°
 = 
br
->
gvÆue
;

73 
	`osù_vü_∑øm_gë_by«me
(
vü
, "Ω‹t", &
br
);

75 i‡(
br
 !
NULL
 && br->
gvÆue
 == NULL)

78 i‡(
br
 !
NULL
 && br->
gvÆue
 != NULL)

79 
Ω‹t_vüp‹t
 = 
br
->
gvÆue
;

81 i‡(
Ω‹t_vüp‹t
 =
NULL
)

82 
Ω‹t_vüp‹t
 = 
vü
->
p‹t
;

84 i‡(
Ω‹t_vüp‹t
 =
NULL
) {

86 i‡(
	`osù_°rˇ£cmp
(
vü
->
¥Ÿocﬁ
, "DTLS") == 0 || osip_strcasecmp(via->protocol, "TLS") == 0)

87 
Ω‹t_vüp‹t
 = 
p‹t_5061
;

90 
Ω‹t_vüp‹t
 = 
p‹t_5060
;

94 
c⁄è˘_p‹t
 = 
c⁄è˘
->
uæ
->
p‹t
;

96 i‡(
c⁄è˘_p‹t
 =
NULL
) {

98 i‡(
	`osù_°rˇ£cmp
(
vü
->
¥Ÿocﬁ
, "DTLS") == 0 || osip_strcasecmp(via->protocol, "TLS") == 0)

99 
c⁄è˘_p‹t
 = 
p‹t_5061
;

102 
c⁄è˘_p‹t
 = 
p‹t_5060
;

105 i‡(
jr
->
r_œ°_dñëi⁄
 > 0)

108 i‡(
	`osù_°rˇ£cmp
(
c⁄è˘_p‹t
, 
Ω‹t_vüp‹t
) != 0) {

110 
jr
->
ªgi°øti⁄_°ï
 = 
RS_DELETIONREQUIRED
;

111 
jr
->
r_œ°_dñëi⁄
 = 
	`osù_gësy°emtime
(
NULL
);

115 i‡(
ª˚ived_vüho°
 !
NULL
 && 
	`osù_°rˇ£cmp
‘e˚ived_vüho°, 
c⁄è˘
->
uæ
->
ho°
) != 0) {

117 
jr
->
ªgi°øti⁄_°ï
 = 
RS_DELETIONREQUIRED
;

118 
jr
->
r_œ°_dñëi⁄
 = 
	`osù_gësy°emtime
(
NULL
);

122 i‡(
ª˚ived_vüho°
 =
NULL
) {

123 i‡(
	`osù_°rˇ£cmp
(
vü
->
ho°
, 
c⁄è˘
->
uæ
->host) != 0) {

125 
jr
->
ªgi°øti⁄_°ï
 = 
RS_DELETIONREQUIRED
;

126 
jr
->
r_œ°_dñëi⁄
 = 
	`osù_gësy°emtime
(
NULL
);

131 
	}
}

133 
	$_eXosù_¢d_mesßge
(
eXosù_t
 *
exc⁄ãxt
, 
osù_å™ß˘i⁄_t
 *
å
, 
osù_mesßge_t
 *
sù
, *
ho°
, 
p‹t
, 
out_sockë
) {

134 
i
;

135 
osù_vü_t
 *
vü
;

137 i‡(
sù
->
°©us_code
 == 101)

138  
OSIP_SUCCESS
;

140 
vü
 = (
osù_vü_t
 *Ë
	`osù_li°_gë
(&
sù
->
vüs
, 0);

142 i‡(
vü
 =
NULL
 || vü->
¥Ÿocﬁ
 == NULL)

145 i‡(
ho°
 =
NULL
) {

146 i‡(
	`MSG_IS_REQUEST
(
sù
)) {

147 
osù_rouã_t
 *
rouã
;

149 
	`osù_mesßge_gë_rouã
(
sù
, 0, &
rouã
);

151 i‡(
rouã
 !
NULL
) {

152 
osù_uri_∑øm_t
 *
Ã_∑øm
 = 
NULL
;

154 
	`osù_uri_u∑øm_gë_by«me
(
rouã
->
uæ
, "Ã", &
Ã_∑øm
);

156 i‡(
Ã_∑øm
 =
NULL
)

157 
rouã
 = 
NULL
;

160 i‡(
rouã
 !
NULL
) {

161 
p‹t
 = 5060;

163 i‡(
rouã
->
uæ
->
p‹t
 !
NULL
)

164 
p‹t
 = 
	`osù_©oi
(
rouã
->
uæ
->port);

166 
ho°
 = 
rouã
->
uæ
->host;

170 
osù_uri_∑øm_t
 *
maddr_∑øm
 = 
NULL
;

171 
osù_uri_∑øm_t
 *
obr_∑øm
 = 
NULL
;

172 
osù_uri_∑øm_t
 *
obp_∑øm
 = 
NULL
;

174 
	`osù_uri_u∑øm_gë_by«me
(
sù
->
ªq_uri
, "maddr", &
maddr_∑øm
);

175 
ho°
 = 
NULL
;

177 i‡(
maddr_∑øm
 !
NULL
 && maddr_∑øm->
gvÆue
 != NULL)

178 
ho°
 = 
maddr_∑øm
->
gvÆue
;

180 
p‹t
 = 5060;

182 i‡(
sù
->
ªq_uri
->
p‹t
 !
NULL
)

183 
p‹t
 = 
	`osù_©oi
(
sù
->
ªq_uri
->port);

185 i‡(
ho°
 =
NULL
) {

188 
	`osù_uri_u∑øm_gë_by«me
(
sù
->
ªq_uri
, "x-obr", &
obr_∑øm
);

189 
	`osù_uri_u∑øm_gë_by«me
(
sù
->
ªq_uri
, "x-obp", &
obp_∑øm
);

191 i‡(
obr_∑øm
 !
NULL
 && obr_∑øm->
gvÆue
 !NULL && 
obp_∑øm
 != NULL && obp_param->gvalue != NULL) {

192 
ho°
 = 
obr_∑øm
->
gvÆue
;

193 
p‹t
 = 
	`©oi
(
obp_∑øm
->
gvÆue
);

197 i‡(
ho°
 =
NULL
)

198 
ho°
 = 
sù
->
ªq_uri
->host;

202 
osù_gíîic_∑øm_t
 *
maddr
;

203 
osù_gíîic_∑øm_t
 *
ª˚ived
;

204 
osù_gíîic_∑øm_t
 *
Ω‹t
;

206 
	`osù_vü_∑øm_gë_by«me
(
vü
, "maddr", &
maddr
);

207 
	`osù_vü_∑øm_gë_by«me
(
vü
, "ª˚ived", &
ª˚ived
);

208 
	`osù_vü_∑øm_gë_by«me
(
vü
, "Ω‹t", &
Ω‹t
);

210 i‡(
maddr
 !
NULL
 && maddr->
gvÆue
 != NULL)

211 
ho°
 = 
maddr
->
gvÆue
;

213 i‡(
ª˚ived
 !
NULL
 &&Ñe˚ived->
gvÆue
 != NULL)

214 
ho°
 = 
ª˚ived
->
gvÆue
;

217 
ho°
 = 
vü
->host;

219 i‡(
Ω‹t
 =
NULL
 ||Ñp‹t->
gvÆue
 == NULL) {

220 i‡(
vü
->
p‹t
 !
NULL
)

221 
p‹t
 = 
	`osù_©oi
(
vü
->port);

224 
p‹t
 = 5060;

227 
p‹t
 = 
	`osù_©oi
(
Ω‹t
->
gvÆue
);

231 i‡(
exc⁄ãxt
->
cbsùCÆlback
 !
NULL
) {

232 
exc⁄ãxt
->
	`cbsùCÆlback
(
sù
, 0);

235 
i
 = -1;

236 
i
 = 
exc⁄ãxt
->
eXé_å™•‹t
.
	`é_£nd_mesßge
”xc⁄ãxt, 
å
, 
sù
, 
ho°
, 
p‹t
, 
out_sockë
);

238 i‡(
i
 != 0) {

239  
i
;

242  
OSIP_SUCCESS
;

243 
	}
}

245 
	$cb_¢d_mesßge
(
osù_å™ß˘i⁄_t
 *
å
, 
osù_mesßge_t
 *
sù
, *
ho°
, 
p‹t
, 
out_sockë
) {

246 
eXosù_t
 *
exc⁄ãxt
 = (eXosù_à*Ë
	`osù_å™ß˘i⁄_gë_ª£rved1
(
å
);

248  
	`_eXosù_¢d_mesßge
(
exc⁄ãxt
, 
å
, 
sù
, 
ho°
, 
p‹t
, 
out_sockë
);

249 
	}
}

251 
	$cb_xixt_kûl_å™ß˘i⁄
(
ty≥
, 
osù_å™ß˘i⁄_t
 *
å
) {

252 
i
;

253 
eXosù_t
 *
exc⁄ãxt
 = (eXosù_à*Ë
	`osù_å™ß˘i⁄_gë_ª£rved1
(
å
);

254 
timevÆ
 
time_sub
;

255 
	`osù_timîsub
(&
å
->
de°royed_time
, &å->
¸óãd_time
, &
time_sub
);

257 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO1
, 
NULL
, "[eXosù] [tid=%i] [cb_xixt_kûl_å™ß˘i⁄] [duøti⁄=%3li,%03lis]\n", 
å
->
å™ß˘i⁄id
, 
time_sub
.
tv_£c
,Åime_sub.
tv_u£c
 / 1000));

258 
i
 = 
	`osù_ªmove_å™ß˘i⁄
(
exc⁄ãxt
->
j_osù
, 
å
);

260 i‡(
i
 != 0) {

261 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_BUG
, 
NULL
, "[eXosù] [tid=%i] [cb_xixt_kûl_å™ß˘i⁄] **ˇ¬ŸÑemovêå™ß˘i⁄ fromÅhêoSIP sèck**\n", 
å
->
å™ß˘i⁄id
));

264 i‡(
	`MSG_IS_REGISTER
(
å
->
‹ig_ªque°
Ë&& 
ty≥
 =
OSIP_NICT_KILL_TRANSACTION
 &&År->
œ°_ª•⁄£
 =
NULL
) {

265 
	`rcvªgi°î_Áûuª
(
å
, 
NULL
);

269 #i‚de‡
MINISIZE


271 i‡(
ty≥
 =
OSIP_NICT_KILL_TRANSACTION
) {

272 
eXosù_ˇŒ_t
 *
jc
 = (eXosù_ˇŒ_à*Ë
	`osù_å™ß˘i⁄_gë_ª£rved2
(
å
);

273 
eXosù_dülog_t
 *
jd
 = (eXosù_dülog_à*Ë
	`osù_å™ß˘i⁄_gë_ª£rved3
(
å
);

274 
eXosù_subs¸ibe_t
 *
js
 = (eXosù_subs¸ibe_à*Ë
	`osù_å™ß˘i⁄_gë_ª£rved5
(
å
);

275 
eXosù_nŸify_t
 *
jn
 = (eXosù_nŸify_à*Ë
	`osù_å™ß˘i⁄_gë_ª£rved4
(
å
);

277 i‡(
jc
 =
NULL
 && 
jn
 =NULL && 
js
 =NULL && 
å
->
œ°_ª•⁄£
 == NULL) {

278 
eXosù_evít_t
 *
je
;

280 
je
 = 
	`_eXosù_evít_öô_f‹_mesßge
(
EXOSIP_MESSAGE_REQUESTFAILURE
, 
å
);

281 
	`_eXosù_ªp‹t_evít
(
exc⁄ãxt
, 
je
);

285 i‡(
jc
 !
NULL
 && 
jn
 =NULL && 
js
 =NULL && 
å
->
œ°_ª•⁄£
 == NULL) {

286 
	`_eXosù_ªp‹t_ˇŒ_evít
(
exc⁄ãxt
, 
EXOSIP_CALL_MESSAGE_REQUESTFAILURE
, 
jc
, 
jd
, 
å
);

291 i‡(
jn
 !
NULL
 && 
	`MSG_IS_NOTIFY
(
å
->
‹ig_ªque°
Ë&&År->
œ°_ª•⁄£
 == NULL) {

293 
eXosù_evít_t
 *
je
;

295 
je
 = 
	`_eXosù_evít_öô_f‹_nŸify
(
EXOSIP_NOTIFICATION_REQUESTFAILURE
, 
jn
, 
jd
, 
å
);

296 
	`_eXosù_ªp‹t_evít
(
exc⁄ãxt
, 
je
);

298 
	`REMOVE_ELEMENT
(
exc⁄ãxt
->
j_nŸifõs
, 
jn
);

299 
	`_eXosù_nŸify_‰ì
(
exc⁄ãxt
, 
jn
);

303 i‡(
jn
 !
NULL
 && 
	`MSG_IS_NOTIFY
(
å
->
‹ig_ªque°
Ë&&År->
œ°_ª•⁄£
 !NULL &&År->œ°_ª•⁄£->
°©us_code
 > 299) {

305 i‡(
å
->
œ°_ª•⁄£
->
°©us_code
 != 407 &&År->last_response->status_code != 401) {

306 
	`REMOVE_ELEMENT
(
exc⁄ãxt
->
j_nŸifõs
, 
jn
);

307 
	`_eXosù_nŸify_‰ì
(
exc⁄ãxt
, 
jn
);

312 i‡(
jn
 !
NULL
 && 
	`MSG_IS_NOTIFY
(
å
->
‹ig_ªque°
Ë&&År->
œ°_ª•⁄£
 !NULL &&År->œ°_ª•⁄£->
°©us_code
 > 199 &&År->last_response->status_code < 300) {

313 i‡(
jn
->
n_ss_°©us
 =
EXOSIP_SUBCRSTATE_TERMINATED
) {

315 
	`REMOVE_ELEMENT
(
exc⁄ãxt
->
j_nŸifõs
, 
jn
);

316 
	`_eXosù_nŸify_‰ì
(
exc⁄ãxt
, 
jn
);

322 i‡(
js
 !
NULL
 && (
	`MSG_IS_SUBSCRIBE
(
å
->
‹ig_ªque°
Ë|| 
	`MSG_IS_REFER
—r->‹ig_ªque°)Ë&& (å->
œ°_ª•⁄£
 =NULL ||År->œ°_ª•⁄£->
°©us_code
 <= 199)) {

323 
eXosù_evít_t
 *
je
;

325 
je
 = 
	`_eXosù_evít_öô_f‹_subs¸ùti⁄
(
EXOSIP_SUBSCRIPTION_REQUESTFAILURE
, 
js
, 
jd
, 
å
);

326 
	`_eXosù_ªp‹t_evít
(
exc⁄ãxt
, 
je
);

329 
	`REMOVE_ELEMENT
(
exc⁄ãxt
->
j_subs¸ibes
, 
js
);

330 
	`_eXosù_subs¸ùti⁄_‰ì
(
exc⁄ãxt
, 
js
);

335 i‡(
js
 !
NULL
 && (
	`MSG_IS_SUBSCRIBE
(
å
->
‹ig_ªque°
Ë|| 
	`MSG_IS_REFER
—r->‹ig_ªque°)Ë&&År->
œ°_ª•⁄£
 !NULL && (å->œ°_ª•⁄£->
°©us_code
 == 401 ||År->last_response->status_code == 407)) {

337 } i‡(
js
 !
NULL
 && (
	`MSG_IS_SUBSCRIBE
(
å
->
‹ig_ªque°
Ë|| 
	`MSG_IS_REFER
(tr->orig_request))) {

338 
osù_hódî_t
 *
expúes
;

340 
	`osù_mesßge_gë_expúes
(
å
->
‹ig_ªque°
, 0, &
expúes
);

342 i‡(
expúes
 =
NULL
 ||Éxpúes->
hvÆue
 == NULL) {

343 } i‡(0 =
	`°rcmp
(
expúes
->
hvÆue
, "0")) {

344 
	`REMOVE_ELEMENT
(
exc⁄ãxt
->
j_subs¸ibes
, 
js
);

345 
	`_eXosù_subs¸ùti⁄_‰ì
(
exc⁄ãxt
, 
js
);

352 
	}
}

354 
	$cb_rcvˇn˚l
(
ty≥
, 
osù_å™ß˘i⁄_t
 *
å
, 
osù_mesßge_t
 *
sù
) {

355 
eXosù_t
 *
exc⁄ãxt
 = (eXosù_à*Ë
	`osù_å™ß˘i⁄_gë_ª£rved1
(
å
);

356 
eXosù_ˇŒ_t
 *
jc
 = (eXosù_ˇŒ_à*Ë
	`osù_å™ß˘i⁄_gë_ª£rved2
(
å
);

357 
eXosù_dülog_t
 *
jd
 = (eXosù_dülog_à*Ë
	`osù_å™ß˘i⁄_gë_ª£rved3
(
å
);

359 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO3
, 
NULL
, "[eXosù] [tid=%i] [cb_rcvˇn˚l]\n", 
å
->
å™ß˘i⁄id
));

361 i‡((
jd
 !
NULL
Ë&& (
jc
 != NULL)) {

363 
	`_eXosù_ªp‹t_ˇŒ_evít
(
exc⁄ãxt
, 
EXOSIP_CALL_CANCELLED
, 
jc
, 
jd
, 
å
);

365 
	}
}

367 
	$cb_rcvªgi°î
(
ty≥
, 
osù_å™ß˘i⁄_t
 *
å
, 
osù_mesßge_t
 *
sù
) {

368 
eXosù_t
 *
exc⁄ãxt
 = (eXosù_à*Ë
	`osù_å™ß˘i⁄_gë_ª£rved1
(
å
);

369 
eXosù_evít_t
 *
je
;

371 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO3
, 
NULL
, "[eXosù] [tid=%i] [cb_rcvªgi°î]\n", 
å
->
å™ß˘i⁄id
));

373 
je
 = 
	`_eXosù_evít_öô_f‹_mesßge
(
EXOSIP_MESSAGE_NEW
, 
å
);

374 
	`_eXosù_evít_add
(
exc⁄ãxt
, 
je
);

376 
	}
}

378 
	$cb_rcvªque°
(
ty≥
, 
osù_å™ß˘i⁄_t
 *
å
, 
osù_mesßge_t
 *
sù
) {

379 
eXosù_t
 *
exc⁄ãxt
 = (eXosù_à*Ë
	`osù_å™ß˘i⁄_gë_ª£rved1
(
å
);

380 
eXosù_ˇŒ_t
 *
jc
 = (eXosù_ˇŒ_à*Ë
	`osù_å™ß˘i⁄_gë_ª£rved2
(
å
);

381 
eXosù_dülog_t
 *
jd
 = (eXosù_dülog_à*Ë
	`osù_å™ß˘i⁄_gë_ª£rved3
(
å
);

383 #i‚de‡
MINISIZE


384 
eXosù_subs¸ibe_t
 *
js
 = (eXosù_subs¸ibe_à*Ë
	`osù_å™ß˘i⁄_gë_ª£rved5
(
å
);

385 
eXosù_nŸify_t
 *
jn
 = (eXosù_nŸify_à*Ë
	`osù_å™ß˘i⁄_gë_ª£rved4
(
å
);

388 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO3
, 
NULL
, "[eXosù] [tid=%i] [cb_rcvªque°]\n", 
å
->
å™ß˘i⁄id
));

390 i‡(
jc
 !
NULL
) {

391 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO3
, 
NULL
, "[eXosù] [tid=%i] [cb_rcvªque°]\n", 
å
->
å™ß˘i⁄id
));

393 i‡(
	`MSG_IS_BYE
(
sù
)) {

394 i‡(
exc⁄ãxt
->
autﬂnswî_bye
 == 0) {

396 
	`_eXosù_ªp‹t_ˇŒ_evít
(
exc⁄ãxt
, 
EXOSIP_CALL_MESSAGE_NEW
, 
jc
, 
jd
, 
å
);

397 
	`_eXosù_ªp‹t_ˇŒ_evít
(
exc⁄ãxt
, 
EXOSIP_CALL_CLOSED
, 
jc
, 
jd
, 
å
);

401 
	`_eXosù_ªp‹t_ˇŒ_evít
(
exc⁄ãxt
, 
EXOSIP_CALL_MESSAGE_NEW
, 
jc
, 
jd
, 
å
);

405 #i‚de‡
MINISIZE


407 i‡(
jn
 !
NULL
) {

408 i‡(
	`MSG_IS_SUBSCRIBE
(
sù
Ë|| 
	`MSG_IS_REFER
(sip)) {

409 
eXosù_evít_t
 *
je
;

411 
je
 = 
	`_eXosù_evít_öô_f‹_nŸify
(
EXOSIP_IN_SUBSCRIPTION_NEW
, 
jn
, 
jd
, 
å
);

412 
	`_eXosù_ªp‹t_evít
(
exc⁄ãxt
, 
je
);

418 } i‡(
js
 !
NULL
) {

419 i‡(
	`MSG_IS_NOTIFY
(
sù
)) {

420 
eXosù_evít_t
 *
je
;

422 
je
 = 
	`_eXosù_evít_öô_f‹_subs¸ùti⁄
(
EXOSIP_SUBSCRIPTION_NOTIFY
, 
js
, 
jd
, 
å
);

423 
	`_eXosù_ªp‹t_evít
(
exc⁄ãxt
, 
je
);

432 
eXosù_evít_t
 *
je
;

434 
je
 = 
	`_eXosù_evít_öô_f‹_mesßge
(
EXOSIP_MESSAGE_NEW
, 
å
);

435 
	`_eXosù_evít_add
(
exc⁄ãxt
, 
je
);

438 
	}
}

440 
	$_eXosù_dñëe_ª£rved
(
osù_å™ß˘i⁄_t
 *
å™ß˘i⁄
) {

441 i‡(
å™ß˘i⁄
 =
NULL
)

444 
	`osù_å™ß˘i⁄_£t_ª£rved2
(
å™ß˘i⁄
, 
NULL
);

445 
	`osù_å™ß˘i⁄_£t_ª£rved3
(
å™ß˘i⁄
, 
NULL
);

446 
	`osù_å™ß˘i⁄_£t_ª£rved4
(
å™ß˘i⁄
, 
NULL
);

447 
	`osù_å™ß˘i⁄_£t_ª£rved5
(
å™ß˘i⁄
, 
NULL
);

448 
	}
}

450 
	$cb_rcv1xx
(
ty≥
, 
osù_å™ß˘i⁄_t
 *
å
, 
osù_mesßge_t
 *
sù
) {

451 
eXosù_t
 *
exc⁄ãxt
 = (eXosù_à*Ë
	`osù_å™ß˘i⁄_gë_ª£rved1
(
å
);

452 
eXosù_ˇŒ_t
 *
jc
 = (eXosù_ˇŒ_à*Ë
	`osù_å™ß˘i⁄_gë_ª£rved2
(
å
);

453 
eXosù_dülog_t
 *
jd
 = (eXosù_dülog_à*Ë
	`osù_å™ß˘i⁄_gë_ª£rved3
(
å
);

455 #i‚de‡
MINISIZE


456 
eXosù_subs¸ibe_t
 *
js
 = (eXosù_subs¸ibe_à*Ë
	`osù_å™ß˘i⁄_gë_ª£rved5
(
å
);

457 
eXosù_nŸify_t
 *
jn
 = (eXosù_nŸify_à*Ë
	`osù_å™ß˘i⁄_gë_ª£rved4
(
å
);

460 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO3
, 
NULL
, "[eXosù] [tid=%i] [cb_rcv1xx]\n", 
å
->
å™ß˘i⁄id
));

462 i‡(
	`MSG_IS_RESPONSE_FOR
(
sù
, "OPTIONS")) {

463 i‡(
jc
 =
NULL
) {

464 
eXosù_evít_t
 *
je
;

466 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO3
, 
NULL
, "[eXosù] [tid=%i] [cb_rcv1xx] OPTIONS outsidêo‡™y cÆl\n", 
å
->
å™ß˘i⁄id
));

468 
je
 = 
	`_eXosù_evít_öô_f‹_mesßge
(
EXOSIP_MESSAGE_PROCEEDING
, 
å
);

469 
	`_eXosù_evít_add
(
exc⁄ãxt
, 
je
);

473 
	`_eXosù_ªp‹t_ˇŒ_evít
(
exc⁄ãxt
, 
EXOSIP_CALL_MESSAGE_PROCEEDING
, 
jc
, 
jd
, 
å
);

477 i‡(
	`MSG_IS_RESPONSE_FOR
(
sù
, "INVITE"Ë&& 
	`MSG_TEST_CODE
(sip, 100)) {

478 
	`_eXosù_ªp‹t_ˇŒ_evít
(
exc⁄ãxt
, 
EXOSIP_CALL_PROCEEDING
, 
jc
, 
jd
, 
å
);

482 #i‚de‡
MINISIZE


484 i‡(
	`MSG_IS_RESPONSE_FOR
(
sù
, "SUBSCRIBE"Ë&& 
	`MSG_TEST_CODE
(sip, 100)) {

485 
eXosù_evít_t
 *
je
;

487 
je
 = 
	`_eXosù_evít_öô_f‹_subs¸ùti⁄
(
EXOSIP_SUBSCRIPTION_PROCEEDING
, 
js
, 
jd
, 
å
);

488 
	`_eXosù_ªp‹t_evít
(
exc⁄ãxt
, 
je
);

494 i‡(
	`MSG_IS_RESPONSE_FOR
(
sù
, "REFER"Ë&& 
	`MSG_TEST_CODE
(sip, 100)) {

499 i‡(
	`MSG_IS_RESPONSE_FOR
(
sù
, "INVITE")

500 #i‚de‡
MINISIZE


501 || 
	`MSG_IS_RESPONSE_FOR
(
sù
, "REFER") || MSG_IS_RESPONSE_FOR(sip, "SUBSCRIBE")

504 
i
;

506 #i‚de‡
MINISIZE


510 i‡(
jd
 =
NULL
 && 
js
 !NULL && js->
s_dülogs
 !NULL && (
	`MSG_IS_RESPONSE_FOR
(
sù
, "SUBSCRIBE") || MSG_IS_RESPONSE_FOR(sip, "REFER"))) {

512 
osù_gíîic_∑øm_t
 *
èg
;

513 
i
;

515 
i
 = 
	`osù_to_gë_èg
(
sù
->
to
, &
èg
);

517 i‡(
i
 =0 && 
èg
 !
NULL
 &&Åag->
gvÆue
 != NULL) {

518 
jd
 = 
js
->
s_dülogs
; jd !
NULL
; jd = jd->
√xt
) {

519 i‡(0 =
	`°rcmp
(
jd
->
d_dülog
->
ªmŸe_èg
, 
èg
->
gvÆue
)) {

520 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO1
, 
NULL
, "[eXosù] [tid=%i] [cb_rcv1xx] foundÉ°ablishedÉ¨ly dülog f‹Åhi†subs¸ùti⁄\n", 
å
->
å™ß˘i⁄id
));

521 
	`osù_å™ß˘i⁄_£t_ª£rved3
(
å
, 
jd
);

530 i‡(
jd
 =
NULL
) {

535 
i
 = 
	`_eXosù_dülog_öô_as_uac
(&
jd
, 
sù
);

537 i‡(
i
 != 0) {

538 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosù] [tid=%i] [cb_rcv1xx] c™nŸÉ°ablishá dülog\n", 
å
->
å™ß˘i⁄id
));

542 i‡(
jc
 !
NULL
) {

543 
	`ADD_ELEMENT
(
jc
->
c_dülogs
, 
jd
);

544 
	`osù_å™ß˘i⁄_£t_ª£rved3
(
å
, 
jd
);

545 
	`_eXosù_upd©e
(
exc⁄ãxt
);

547 #i‚de‡
MINISIZE


549 i‡(
js
 !
NULL
) {

550 
	`ADD_ELEMENT
(
js
->
s_dülogs
, 
jd
);

551 
	`osù_å™ß˘i⁄_£t_ª£rved3
(
å
, 
jd
);

552 
	`_eXosù_upd©e
(
exc⁄ãxt
);

554 } i‡(
jn
 !
NULL
) {

555 
	`ADD_ELEMENT
(
jn
->
n_dülogs
, 
jd
);

556 
	`osù_å™ß˘i⁄_£t_ª£rved3
(
å
, 
jd
);

557 
	`_eXosù_upd©e
(
exc⁄ãxt
);

564 i‡(
jd
->
d_dülog
 =
NULL
) {

565 } i‡(
jd
->
d_dülog
->
ªmŸe_èg
 =
NULL
) {

566 
	`osù_dülog_upd©e_rouã_£t_as_uac
(
jd
->
d_dülog
, 
sù
);

567 
	`osù_dülog_upd©e_èg_as_uac
(
jd
->
d_dülog
, 
sù
);

570 
osù_gíîic_∑øm_t
 *
èg
;

571 
i
;

573 
i
 = 
	`osù_to_gë_èg
(
sù
->
to
, &
èg
);

575 i‡(
èg
 !
NULL
 &&Åag->
gvÆue
 !NULL && 0 =
	`°rcmp
(
jd
->
d_dülog
->
ªmŸe_èg
,Åag->gvalue)) {

577 
	`osù_dülog_upd©e_rouã_£t_as_uac
(
jd
->
d_dülog
, 
sù
);

584 
cuºít_loˇl_c£q
 = 
jd
->
d_dülog
->
loˇl_c£q
;

586 
	`osù_dülog_‰ì
(
jd
->
d_dülog
);

587 
i
 = 
	`osù_dülog_öô_as_uac
(&(
jd
->
d_dülog
), 
sù
);

589 i‡(
i
 != 0) {

590 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosù] [tid=%i] [cb_rcv1xx] c™nŸÑïœ˚Åhêdülog\n", 
å
->
å™ß˘i⁄id
));

593 
jd
->
d_dülog
->
loˇl_c£q
 = 
cuºít_loˇl_c£q
;

594 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_WARNING
, 
NULL
, "[eXosù] [tid=%i] [cb_rcv1xx]Åhêdülog ha†bì¿ª∂a˚d wôhÅhê√w o√ from 1xx\n", 
å
->
å™ß˘i⁄id
));

602 i‡(
jd
 !
NULL
 && 
	`MSG_IS_RESPONSE_FOR
(
sù
, "INVITE"Ë&& sù->
°©us_code
 < 180) {

603 
	`_eXosù_check_Ælow_hódî
(
jd
, 
sù
);

604 
	`_eXosù_ªp‹t_ˇŒ_evít
(
exc⁄ãxt
, 
EXOSIP_CALL_PROCEEDING
, 
jc
, 
jd
, 
å
);

606 } i‡(
jd
 !
NULL
 && 
	`MSG_IS_RESPONSE_FOR
(
sù
, "INVITE"Ë&& sù->
°©us_code
 >= 180) {

607 
	`_eXosù_check_Ælow_hódî
(
jd
, 
sù
);

608 
	`_eXosù_ªp‹t_ˇŒ_evít
(
exc⁄ãxt
, 
EXOSIP_CALL_RINGING
, 
jc
, 
jd
, 
å
);

610 #i‚de‡
MINISIZE


612 i‡(
jd
 !
NULL
 && (
	`MSG_IS_RESPONSE_FOR
(
sù
, "SUBSCRIBE") || MSG_IS_RESPONSE_FOR(sip, "REFER"))) {

613 
eXosù_evít_t
 *
je
;

615 
je
 = 
	`_eXosù_evít_öô_f‹_subs¸ùti⁄
(
EXOSIP_SUBSCRIPTION_PROCEEDING
, 
js
, 
jd
, 
å
);

616 
	`_eXosù_ªp‹t_evít
(
exc⁄ãxt
, 
je
);

621 i‡(
jc
 !
NULL
 && 
	`MSG_IS_RESPONSE_FOR
(
sù
, "INVITE")) {

622 
	`_eXosù_ˇŒ_ª√w_expúe_time
(
jc
);

625 
	}
}

627 
	$cb_rcv2xx_4övôe
(
osù_å™ß˘i⁄_t
 *
å
, 
osù_mesßge_t
 *
sù
) {

628 
eXosù_t
 *
exc⁄ãxt
 = (eXosù_à*Ë
	`osù_å™ß˘i⁄_gë_ª£rved1
(
å
);

629 
i
;

630 
eXosù_ˇŒ_t
 *
jc
 = (eXosù_ˇŒ_à*Ë
	`osù_å™ß˘i⁄_gë_ª£rved2
(
å
);

631 
eXosù_dülog_t
 *
jd
 = (eXosù_dülog_à*Ë
	`osù_å™ß˘i⁄_gë_ª£rved3
(
å
);

633 i‡(
jc
 =
NULL
)

636 i‡(
jd
 =
NULL
) {

640 
i
 = 
	`_eXosù_dülog_öô_as_uac
(&
jd
, 
sù
);

642 i‡(
i
 != 0) {

643 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosù] [tid=%i] [cb_rcv2xx_4övôe] c™nŸÉ°ablishá dülog\n", 
å
->
å™ß˘i⁄id
));

647 
	`ADD_ELEMENT
(
jc
->
c_dülogs
, 
jd
);

648 
	`osù_å™ß˘i⁄_£t_ª£rved3
(
å
, 
jd
);

649 
	`_eXosù_upd©e
(
exc⁄ãxt
);

663 
osù_gíîic_∑øm_t
 *
èg
;

664 
i
;

666 
i
 = 
	`osù_to_gë_èg
(
sù
->
to
, &
èg
);

667 
i
 = 1;

669 i‡(
jd
->
d_dülog
 =
NULL
) {

677 i‡(
jd
->
d_dülog
->
ªmŸe_èg
 =
NULL
 && 
èg
 == NULL) {

679 i‡(
jd
->
d_dülog
->
ªmŸe_èg
 !
NULL
 && 
èg
 == NULL) {

680 
i
 = 0;

683 i‡(
jd
->
d_dülog
->
ªmŸe_èg
 =
NULL
 && 
èg
 != NULL) {

684 
i
 = 0;

687 i‡(
jd
->
d_dülog
->
ªmŸe_èg
 !
NULL
 && 
èg
 !NULL &&Åag->
gvÆue
 !NULL && 0 !
	`°rcmp
(jd->d_dialog->remote_tag,Åag->gvalue)) {

688 
i
 = 0;

692 i‡(
i
 == 1) {

693 
	`osù_dülog_upd©e_rouã_£t_as_uac
(
jd
->
d_dülog
, 
sù
);

695 i‡(
jd
->
d_dülog
->
ªmŸe_èg
 =
NULL
)

696 
	`osù_dülog_upd©e_èg_as_uac
(
jd
->
d_dülog
, 
sù
);

698 
	`osù_dülog_£t_°©e
(
jd
->
d_dülog
, 
DIALOG_CONFIRMED
);

703 
cuºít_loˇl_c£q
 = 
jd
->
d_dülog
->
loˇl_c£q
;

705 
	`osù_dülog_‰ì
(
jd
->
d_dülog
);

706 
i
 = 
	`osù_dülog_öô_as_uac
(&(
jd
->
d_dülog
), 
sù
);

708 i‡(
i
 != 0) {

709 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosù] [tid=%i] [cb_rcv2xx_4övôe] c™nŸÑïœ˚Åhêdülog\n", 
å
->
å™ß˘i⁄id
));

712 
jd
->
d_dülog
->
loˇl_c£q
 = 
cuºít_loˇl_c£q
;

713 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_WARNING
, 
NULL
, "[eXosù] [tid=%i] [cb_rcv2xx_4övôe]Åhêdülog ha†bì¿ª∂a˚d wôhÅhê√w o√ from 200ok\n", 
å
->
å™ß˘i⁄id
));

718 i‡(
jd
 !
NULL
) {

719 
osù_hódî_t
 *
£_exp
 = 
NULL
;

720 
osù_hódî_t
 *
£_exp_™swî
 = 
NULL
;

722 
	`_eXosù_check_Ælow_hódî
(
jd
, 
sù
);

724 
	`osù_mesßge_hódî_gë_by«me
(
å
->
‹ig_ªque°
, "£ssi⁄-expúes", 0, &
£_exp
);

726 i‡(
£_exp
 =
NULL
)

727 
	`osù_mesßge_hódî_gë_by«me
(
å
->
‹ig_ªque°
, "x", 0, &
£_exp
);

729 
	`osù_mesßge_hódî_gë_by«me
(
sù
, "£ssi⁄-expúes", 0, &
£_exp_™swî
);

731 i‡(
£_exp_™swî
 =
NULL
)

732 
	`osù_mesßge_hódî_gë_by«me
(
sù
, "x", 0, &
£_exp_™swî
);

734 i‡(
£_exp
 !
NULL
 && 
£_exp_™swî
 != NULL) {

735 
osù_c⁄ã¡_di•osôi⁄_t
 *
exp_h
 = 
NULL
;

738 
	`osù_c⁄ã¡_di•osôi⁄_öô
(&
exp_h
);

740 i‡(
exp_h
 !
NULL
) {

741 
	`osù_c⁄ã¡_di•osôi⁄_∑r£
(
exp_h
, 
£_exp_™swî
->
hvÆue
);

743 i‡(
exp_h
->
ñemít
 !
NULL
) {

744 
osù_gíîic_∑øm_t
 *
∑øm
 = 
NULL
;

746 
	`osù_gíîic_∑øm_gë_by«me
(&
exp_h
->
gí_∑øms
, "ª‰eshî", &
∑øm
);

748 i‡(
∑øm
 =
NULL
) {

749 
jd
->
d_ª‰eshî
 = 0;

752 i‡(
	`osù_°rˇ£cmp
(
∑øm
->
gvÆue
, "uac") == 0)

753 
jd
->
d_ª‰eshî
 = 0;

756 
jd
->
d_ª‰eshî
 = 1;

759 
jd
->
d_£ssi⁄_timî_°¨t
 = 
	`osù_gësy°emtime
(
NULL
);

760 
jd
->
d_£ssi⁄_timî_Àngth
 = 
	`©oi
(
exp_h
->
ñemít
);

762 i‡(
jd
->
d_£ssi⁄_timî_Àngth
 <= 90)

763 
jd
->
d_£ssi⁄_timî_Àngth
 = 90;

766 
	`osù_c⁄ã¡_di•osôi⁄_‰ì
(
exp_h
);

767 
exp_h
 = 
NULL
;

770 } i‡(
£_exp
 !
NULL
 && 
£_exp_™swî
 =NULL && 
exc⁄ãxt
->
›t_£ssi⁄timîs_f‹˚
 > 0) {

772 
osù_c⁄ã¡_di•osôi⁄_t
 *
exp_h
 = 
NULL
;

775 
	`osù_c⁄ã¡_di•osôi⁄_öô
(&
exp_h
);

777 i‡(
exp_h
 !
NULL
) {

778 
	`osù_c⁄ã¡_di•osôi⁄_∑r£
(
exp_h
, 
£_exp
->
hvÆue
);

780 i‡(
exp_h
->
ñemít
 !
NULL
) {

781 
jd
->
d_ª‰eshî
 = 0;

782 
jd
->
d_£ssi⁄_timî_°¨t
 = 
	`osù_gësy°emtime
(
NULL
);

783 
jd
->
d_£ssi⁄_timî_Àngth
 = 
	`©oi
(
exp_h
->
ñemít
);

785 i‡(
jd
->
d_£ssi⁄_timî_Àngth
 <= 90)

786 
jd
->
d_£ssi⁄_timî_Àngth
 = 90;

789 
	`osù_c⁄ã¡_di•osôi⁄_‰ì
(
exp_h
);

790 
exp_h
 = 
NULL
;

797 
	`_eXosù_ªp‹t_ˇŒ_evít
(
exc⁄ãxt
, 
EXOSIP_CALL_ANSWERED
, 
jc
, 
jd
, 
å
);

804 
	}
}

806 #i‚de‡
MINISIZE


807 
	$cb_rcv2xx_4subs¸ibe
(
osù_å™ß˘i⁄_t
 *
å
, 
osù_mesßge_t
 *
sù
) {

808 
eXosù_t
 *
exc⁄ãxt
 = (eXosù_à*Ë
	`osù_å™ß˘i⁄_gë_ª£rved1
(
å
);

809 
i
;

810 
eXosù_dülog_t
 *
jd
 = (eXosù_dülog_à*Ë
	`osù_å™ß˘i⁄_gë_ª£rved3
(
å
);

811 
eXosù_subs¸ibe_t
 *
js
 = (eXosù_subs¸ibe_à*Ë
	`osù_å™ß˘i⁄_gë_ª£rved5
(
å
);

813 i‡(
	`MSG_IS_RESPONSE_FOR
(
sù
, "REFER")) {

814 
osù_hódî_t
 *
ª„r_sub
;

816 
	`osù_mesßge_hódî_gë_by«me
(
sù
, "Re„r-Sub", 0, &
ª„r_sub
);

818 i‡(
ª„r_sub
 !
NULL
 &&Ñe„r_sub->
hvÆue
 !NULL && 
	`osù_°∫ˇ£cmp
(refer_sub->hvalue, "false", 5) == 0) {

820 
eXosù_evít_t
 *
je
;

822 
je
 = 
	`_eXosù_evít_öô_f‹_subs¸ùti⁄
(
EXOSIP_SUBSCRIPTION_ANSWERED
, 
js
, 
jd
, 
å
);

823 
	`_eXosù_ªp‹t_evít
(
exc⁄ãxt
, 
je
);

828 
	`_eXosù_subs¸ùti⁄_£t_ª‰esh_öãrvÆ
(
js
, 
sù
);

832 i‡(
jd
 =
NULL
 && 
js
 !NULL && js->
s_dülogs
 !NULL && (
	`MSG_IS_RESPONSE_FOR
(
sù
, "SUBSCRIBE") || MSG_IS_RESPONSE_FOR(sip, "REFER"))) {

834 
osù_gíîic_∑øm_t
 *
èg
;

835 
i
;

837 
i
 = 
	`osù_to_gë_èg
(
sù
->
to
, &
èg
);

839 i‡(
i
 =0 && 
èg
 !
NULL
 &&Åag->
gvÆue
 != NULL) {

840 
jd
 = 
js
->
s_dülogs
; jd !
NULL
; jd = jd->
√xt
) {

841 i‡(0 =
	`°rcmp
(
jd
->
d_dülog
->
ªmŸe_èg
, 
èg
->
gvÆue
)) {

842 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO1
, 
NULL
, "[eXosù] [tid=%i] [cb_rcv2xx_4subs¸ibe] foundÉ°ablishedÉ¨ly dülog f‹Åhi†subs¸ùti⁄\n", 
å
->
å™ß˘i⁄id
));

843 
	`osù_å™ß˘i⁄_£t_ª£rved3
(
å
, 
jd
);

850 i‡(
jd
 =
NULL
) {

854 
i
 = 
	`_eXosù_dülog_öô_as_uac
(&
jd
, 
sù
);

856 i‡(
i
 != 0) {

857 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosù] [tid=%i] [cb_rcv2xx_4subs¸ibe] c™nŸÉ°ablishá dülog\n", 
å
->
å™ß˘i⁄id
));

861 
	`ADD_ELEMENT
(
js
->
s_dülogs
, 
jd
);

862 
	`osù_å™ß˘i⁄_£t_ª£rved3
(
å
, 
jd
);

863 
	`_eXosù_upd©e
(
exc⁄ãxt
);

866 
	`osù_dülog_upd©e_rouã_£t_as_uac
(
jd
->
d_dülog
, 
sù
);

868 i‡(
jd
->
d_dülog
->
ªmŸe_èg
 =
NULL
)

869 
	`osù_dülog_upd©e_èg_as_uac
(
jd
->
d_dülog
, 
sù
);

871 
	`osù_dülog_£t_°©e
(
jd
->
d_dülog
, 
DIALOG_CONFIRMED
);

877 
eXosù_evít_t
 *
je
;

879 
je
 = 
	`_eXosù_evít_öô_f‹_subs¸ùti⁄
(
EXOSIP_SUBSCRIPTION_ANSWERED
, 
js
, 
jd
, 
å
);

880 
	`_eXosù_ªp‹t_evít
(
exc⁄ãxt
, 
je
);

882 
	}
}

886 
	$_eXosù_upd©e_expúes_acc‹dög_to_c⁄è˘
(
eXosù_ªg_t
 *
jªg
, 
osù_å™ß˘i⁄_t
 *
å
, 
osù_mesßge_t
 *
sù
) {

887 
osù_li°_ôî©‹_t
 
ô
;

888 
osù_c⁄è˘_t
 *
co_ªgi°î
;

889 
maxvÆ
 = 0;

891 i‡(
jªg
 =
NULL
)

892  
OSIP_BADPARAMETER
;

895 i‡(
å
->
‹ig_ªque°
 =
NULL
)

896  
OSIP_BADPARAMETER
;

898 i‡(
	`osù_li°_size
(&
å
->
‹ig_ªque°
->
c⁄è˘s
) != 1)

899  
OSIP_SUCCESS
;

902 
co_ªgi°î
 = (
osù_c⁄è˘_t
 *Ë
	`osù_li°_gë_fú°
(&
sù
->
c⁄è˘s
, &
ô
);

904 
co_ªgi°î
 !
OSIP_SUCCESS
) {

905 
osù_uri_∑øm_t
 *
löe_∑øm
 = 
NULL
;

907 i‡(
co_ªgi°î
->
uæ
 !
NULL
)

908 
	`osù_uri_u∑øm_gë_by«me
(
co_ªgi°î
->
uæ
, "löe", &
löe_∑øm
);

910 i‡(
löe_∑øm
 !
NULL
 &&Üöe_∑øm->
gvÆue
 != NULL) {

911 i‡(
	`osù_°rˇ£cmp
(
jªg
->
r_löe
, 
löe_∑øm
->
gvÆue
) == 0) {

913 
vÆ
;

914 
osù_gíîic_∑øm_t
 *
exp_∑øm
 = 
NULL
;

916 
	`osù_c⁄è˘_∑øm_gë_by«me
(
co_ªgi°î
, "expúes", &
exp_∑øm
);

918 i‡(
exp_∑øm
 !
NULL
 &&Éxp_∑øm->
gvÆue
 != NULL) {

919 
vÆ
 = 
	`©oi
(
exp_∑øm
->
gvÆue
);

921 i‡(
vÆ
 > 
maxvÆ
) {

922 
maxvÆ
 = 
vÆ
;

928 
co_ªgi°î
 = (
osù_c⁄è˘_t
 *Ë
	`osù_li°_gë_√xt
(&
ô
);

931 i‡(
maxvÆ
 == 0)

932  
OSIP_NOTFOUND
;

938 i‡(
maxvÆ
 < 
jªg
->
r_ªg_≥riod
 - 15) {

939 
jªg
->
r_ªg_≥riod
 = 
maxvÆ
;

941 } i‡(
maxvÆ
 > 
jªg
->
r_ªg_≥riod
) {

942 
jªg
->
r_ªg_≥riod
 = 
maxvÆ
;

945  
OSIP_SUCCESS
;

946 
	}
}

948 
	$cb_rcv2xx
(
ty≥
, 
osù_å™ß˘i⁄_t
 *
å
, 
osù_mesßge_t
 *
sù
) {

949 
eXosù_t
 *
exc⁄ãxt
 = (eXosù_à*Ë
	`osù_å™ß˘i⁄_gë_ª£rved1
(
å
);

950 
eXosù_ˇŒ_t
 *
jc
 = (eXosù_ˇŒ_à*Ë
	`osù_å™ß˘i⁄_gë_ª£rved2
(
å
);

951 
eXosù_dülog_t
 *
jd
 = (eXosù_dülog_à*Ë
	`osù_å™ß˘i⁄_gë_ª£rved3
(
å
);

953 #i‚de‡
MINISIZE


954 
eXosù_subs¸ibe_t
 *
js
 = (eXosù_subs¸ibe_à*Ë
	`osù_å™ß˘i⁄_gë_ª£rved5
(
å
);

955 
eXosù_nŸify_t
 *
jn
 = (eXosù_nŸify_à*Ë
	`osù_å™ß˘i⁄_gë_ª£rved4
(
å
);

957 
osù_hódî_t
 *
sub_°©e
;

958 
osù_hódî_t
 *
ª„r_sub
;

959 
time_t
 
now
 = 
	`osù_gësy°emtime
(
NULL
);

961 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO3
, 
NULL
, "[eXosù] [tid=%i] [cb_rcv2xx]\n", 
å
->
å™ß˘i⁄id
));

963 #i‚de‡
MINISIZE


965 i‡(
	`MSG_IS_RESPONSE_FOR
(
sù
, "PUBLISH")) {

966 
eXosù_pub_t
 *
pub
 = 
NULL
;

967 
eXosù_evít_t
 *
je
;

968 
i
;

970 
i
 = 
	`_eXosù_pub_upd©e
(
exc⁄ãxt
, &
pub
, 
å
, 
sù
);

972 i‡(
i
 != 0) {

973 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosù] [tid=%i] [cb_rcv2xx]Çÿpubliˇti⁄Åÿupd©e\n", 
å
->
å™ß˘i⁄id
));

976 i‡(
pub
 !
NULL
) {

978 
osù_hódî_t
 *
exp
;

980 
	`osù_mesßge_hódî_gë_by«me
(
sù
, "expúes", 0, &
exp
);

982 i‡(
exp
 !
NULL
 &&Éxp->
hvÆue
 != NULL) {

983 
vÆ
 = 
	`©oi
(
exp
->
hvÆue
);

985 i‡(
vÆ
 > 0) {

990 i‡(
vÆ
 < 
pub
->
p_≥riod
 - 15) {

991 
pub
->
p_≥riod
 = 
vÆ
;

996 
pub
->
p_ªåy
 = 0;

999 
je
 = 
	`_eXosù_evít_öô_f‹_mesßge
(
EXOSIP_MESSAGE_ANSWERED
, 
å
);

1000 
	`_eXosù_ªp‹t_evít
(
exc⁄ãxt
, 
je
);

1006 i‡(
	`MSG_IS_RESPONSE_FOR
(
sù
, "REGISTER")) {

1007 
eXosù_evít_t
 *
je
;

1008 
eXosù_ªg_t
 *
jªg
 = 
NULL
;

1011 
	`_eXosù_ªg_föd
(
exc⁄ãxt
, &
jªg
, 
å
);

1013 i‡(
jªg
 !
NULL
) {

1014 i‡(
jªg
->
ªgi°øti⁄_°ï
 !
RS_DELETIONPROCEEDING
) {

1016 
osù_hódî_t
 *
exp
;

1018 
	`osù_mesßge_hódî_gë_by«me
(
sù
, "expúes", 0, &
exp
);

1020 i‡(
exp
 !
NULL
 &&Éxp->
hvÆue
 != NULL) {

1021 
vÆ
 = 
	`©oi
(
exp
->
hvÆue
);

1023 i‡(
vÆ
 > 0) {

1028 i‡(
vÆ
 < 
jªg
->
r_ªg_≥riod
 - 15) {

1029 
jªg
->
r_ªg_≥riod
 = 
vÆ
;

1034 
	`_eXosù_upd©e_expúes_acc‹dög_to_c⁄è˘
(
jªg
, 
å
, 
sù
);

1037 i‡(
jªg
->
ªgi°øti⁄_°ï
 =
RS_DELETIONPROCEEDING
)

1038 
jªg
->
ªgi°øti⁄_°ï
 = 
RS_MASQUERADINGREQUIRED
;

1040 i‡(
jªg
->
ªgi°øti⁄_°ï
 > 
RS_MASQUERADINGREQUIRED
)

1041 
	`_eXosù_ªgi°î_c⁄è˘_is_modifõd
(
jªg
, 
å
->
‹ig_ªque°
, 
sù
);

1043 
je
 = 
	`_eXosù_evít_öô_f‹_ªg
(
EXOSIP_REGISTRATION_SUCCESS
, 
jªg
, 
å
);

1044 
	`_eXosù_ªp‹t_evít
(
exc⁄ãxt
, 
je
);

1045 
jªg
->
r_ªåy
 = 0;

1046 
jªg
->
r_ªåyÁûovî
 = 0;

1052 i‡(
jd
 !
NULL
)

1053 
jd
->
d_ªåy
 = 0;

1055 i‡(
jc
 !
NULL
)

1056 
jc
->
c_ªåy
 = 0;

1058 #i‚de‡
MINISIZE


1060 i‡(
js
 !
NULL
)

1061 
js
->
s_ªåy
 = 0;

1065 i‡(
	`MSG_IS_RESPONSE_FOR
(
sù
, "INVITE")) {

1066 
	`cb_rcv2xx_4övôe
(
å
, 
sù
);

1070 i‡(
jc
 !
NULL
) {

1071 i‡(
	`MSG_IS_RESPONSE_FOR
(
sù
, "BYE")) {

1072 
	`_eXosù_ªp‹t_ˇŒ_evít
(
exc⁄ãxt
, 
EXOSIP_CALL_MESSAGE_ANSWERED
, 
jc
, 
jd
, 
å
);

1076 i‡(
jd
 !
NULL
)

1077 
	`_eXosù_check_Ælow_hódî
(
jd
, 
sù
);

1079 i‡(
	`MSG_IS_RESPONSE_FOR
(
sù
, "UPDATE")) {

1080 i‡(
jd
 !
NULL
) {

1081 
osù_hódî_t
 *
£_exp
 = 
NULL
;

1082 
osù_hódî_t
 *
£_exp_™swî
 = 
NULL
;

1084 
	`osù_mesßge_hódî_gë_by«me
(
å
->
‹ig_ªque°
, "£ssi⁄-expúes", 0, &
£_exp
);

1086 i‡(
£_exp
 =
NULL
)

1087 
	`osù_mesßge_hódî_gë_by«me
(
å
->
‹ig_ªque°
, "x", 0, &
£_exp
);

1089 
	`osù_mesßge_hódî_gë_by«me
(
sù
, "£ssi⁄-expúes", 0, &
£_exp_™swî
);

1091 i‡(
£_exp_™swî
 =
NULL
)

1092 
	`osù_mesßge_hódî_gë_by«me
(
sù
, "x", 0, &
£_exp_™swî
);

1094 i‡(
£_exp
 !
NULL
 && 
£_exp_™swî
 != NULL) {

1095 
osù_c⁄ã¡_di•osôi⁄_t
 *
exp_h
 = 
NULL
;

1098 
	`osù_c⁄ã¡_di•osôi⁄_öô
(&
exp_h
);

1100 i‡(
exp_h
 !
NULL
) {

1101 
	`osù_c⁄ã¡_di•osôi⁄_∑r£
(
exp_h
, 
£_exp_™swî
->
hvÆue
);

1103 i‡(
exp_h
->
ñemít
 !
NULL
) {

1104 
osù_gíîic_∑øm_t
 *
∑øm
 = 
NULL
;

1106 
	`osù_gíîic_∑øm_gë_by«me
(&
exp_h
->
gí_∑øms
, "ª‰eshî", &
∑øm
);

1108 i‡(
∑øm
 =
NULL
) {

1109 
jd
->
d_ª‰eshî
 = 0;

1112 i‡(
	`osù_°rˇ£cmp
(
∑øm
->
gvÆue
, "uac") == 0)

1113 
jd
->
d_ª‰eshî
 = 0;

1116 
jd
->
d_ª‰eshî
 = 1;

1119 
jd
->
d_£ssi⁄_timî_°¨t
 = 
	`osù_gësy°emtime
(
NULL
);

1120 
jd
->
d_£ssi⁄_timî_Àngth
 = 
	`©oi
(
exp_h
->
ñemít
);

1122 i‡(
jd
->
d_£ssi⁄_timî_Àngth
 <= 90)

1123 
jd
->
d_£ssi⁄_timî_Àngth
 = 90;

1126 
	`osù_c⁄ã¡_di•osôi⁄_‰ì
(
exp_h
);

1127 
exp_h
 = 
NULL
;

1130 } i‡(
£_exp
 !
NULL
 && 
£_exp_™swî
 =NULL && 
exc⁄ãxt
->
›t_£ssi⁄timîs_f‹˚
 > 0) {

1132 
osù_c⁄ã¡_di•osôi⁄_t
 *
exp_h
 = 
NULL
;

1135 
	`osù_c⁄ã¡_di•osôi⁄_öô
(&
exp_h
);

1137 i‡(
exp_h
 !
NULL
) {

1138 
	`osù_c⁄ã¡_di•osôi⁄_∑r£
(
exp_h
, 
£_exp
->
hvÆue
);

1140 i‡(
exp_h
->
ñemít
 !
NULL
) {

1141 
jd
->
d_ª‰eshî
 = 0;

1142 
jd
->
d_£ssi⁄_timî_°¨t
 = 
	`osù_gësy°emtime
(
NULL
);

1143 
jd
->
d_£ssi⁄_timî_Àngth
 = 
	`©oi
(
exp_h
->
ñemít
);

1145 i‡(
jd
->
d_£ssi⁄_timî_Àngth
 <= 90)

1146 
jd
->
d_£ssi⁄_timî_Àngth
 = 90;

1149 
	`osù_c⁄ã¡_di•osôi⁄_‰ì
(
exp_h
);

1150 
exp_h
 = 
NULL
;

1155 } i‡(
	`MSG_IS_RESPONSE_FOR
(
sù
, "NOTIFY")) {

1156 i‡(
jd
 !
NULL
) {

1158 
jd
->
im∂icô_subs¸ùti⁄_expúe_time
 = 0;

1159 
	`osù_mesßge_hódî_gë_by«me
(
å
->
‹ig_ªque°
, "subs¸ùti⁄-°©e", 0, &
sub_°©e
);

1161 i‡(
sub_°©e
 !
NULL
 && sub_°©e->
hvÆue
 != NULL) {

1162 i‡(0 =
	`osù_°∫ˇ£cmp
(
sub_°©e
->
hvÆue
, "active", 6) || 0 == osip_strncasecmp(sub_state->hvalue, "pending", 7)) {

1163 c⁄° *
tmp
 = 
	`°r°r
(
sub_°©e
->
hvÆue
 + 6, "expires");

1164 c⁄° *
ss_expúes
 = 
NULL
;

1166 i‡(
tmp
 !
NULL
) {

1167 
ss_expúes
 = 
	`°rchr
(
tmp
 + 7, '=');

1168 
jd
->
im∂icô_subs¸ùti⁄_expúe_time
 = 
now
 + 
exc⁄ãxt
->
im∂icô_subs¸ùti⁄_expúes
;

1170 i‡(
ss_expúes
 !
NULL
) {

1171 
exp
;

1173 
ss_expúes
++;

1174 
exp
 = 
	`osù_©oi
(
ss_expúes
);

1176 i‡(
exp
 >= 0 &&Éxp < 600) {

1177 
jd
->
im∂icô_subs¸ùti⁄_expúe_time
 = 
now
 + 
exp
;

1182 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO3
, 
NULL
, "[eXosù] [tid=%i] [cb_rcv2xx] dülog m¨ked f‹ im∂icô-subs¸ùti⁄ [did=%i]\n", 
å
->
å™ß˘i⁄id
, 
jd
->
d_id
));

1187 } i‡(
	`MSG_IS_RESPONSE_FOR
(
sù
, "REFER")) {

1188 i‡(
jd
 !
NULL
) {

1190 
	`osù_mesßge_hódî_gë_by«me
(
å
->
‹ig_ªque°
, "Re„r-Sub", 0, &
ª„r_sub
);

1191 
jd
->
im∂icô_subs¸ùti⁄_expúe_time
 = 
now
 + 
exc⁄ãxt
->
im∂icô_subs¸ùti⁄_expúes
;

1193 i‡((
ª„r_sub
 !
NULL
Ë&& (ª„r_sub->
hvÆue
 !NULLË&& (0 =
	`osù_°∫ˇ£cmp
(refer_sub->hvalue, "false", 5))) {

1195 
jd
->
im∂icô_subs¸ùti⁄_expúe_time
 = 0;

1196 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_WARNING
, 
NULL
, "[eXosù] [tid=%i] [cb_rcv2xx] dülog un-m¨ked f‹ im∂icô-subs¸ùti⁄ [did=%i]\n", 
å
->
å™ß˘i⁄id
, 
jd
->
d_id
));

1201 
	`_eXosù_ªp‹t_ˇŒ_evít
(
exc⁄ãxt
, 
EXOSIP_CALL_MESSAGE_ANSWERED
, 
jc
, 
jd
, 
å
);

1205 #i‚de‡
MINISIZE


1207 i‡(
js
 !
NULL
) {

1208 i‡(
	`MSG_IS_RESPONSE_FOR
(
sù
, "SUBSCRIBE") || MSG_IS_RESPONSE_FOR(sip, "REFER")) {

1209 
	`cb_rcv2xx_4subs¸ibe
(
å
, 
sù
);

1216 i‡(
jn
 !
NULL
) {

1217 i‡(
	`MSG_IS_RESPONSE_FOR
(
sù
, "NOTIFY"Ë&& 
jn
 !
NULL
) {

1218 
eXosù_evít_t
 *
je
;

1219 
osù_hódî_t
 *
sub_°©e
;

1221 
je
 = 
	`_eXosù_evít_öô_f‹_nŸify
(
EXOSIP_NOTIFICATION_ANSWERED
, 
jn
, 
jd
, 
å
);

1222 
	`_eXosù_ªp‹t_evít
(
exc⁄ãxt
, 
je
);

1224 
	`osù_mesßge_hódî_gë_by«me
(
å
->
‹ig_ªque°
, "subs¸ùti⁄-°©e", 0, &
sub_°©e
);

1226 i‡(
sub_°©e
 =
NULL
 || sub_°©e->
hvÆue
 == NULL) {

1228 } i‡(0 =
	`osù_°∫ˇ£cmp
(
sub_°©e
->
hvÆue
, "terminated", 10)) {

1230 i‡(
jn
 !
NULL
) {

1231 
	`REMOVE_ELEMENT
(
exc⁄ãxt
->
j_nŸifõs
, 
jn
);

1232 
	`_eXosù_nŸify_‰ì
(
exc⁄ãxt
, 
jn
);

1245 
eXosù_evít_t
 *
je
;

1248 
je
 = 
	`_eXosù_evít_öô_f‹_mesßge
(
EXOSIP_MESSAGE_ANSWERED
, 
å
);

1249 
	`_eXosù_ªp‹t_evít
(
exc⁄ãxt
, 
je
);

1252 
	}
}

1254 
	$_eXosù_dñëe_óæy_dülog
(
eXosù_t
 *
exc⁄ãxt
, 
eXosù_dülog_t
 *
jd
) {

1255 i‡(
jd
 =
NULL
)

1259 i‡(
jd
->
d_dülog
 !
NULL
 && jd->d_dülog->
°©e
 =
DIALOG_EARLY
) {

1260 
	`osù_dülog_‰ì
(
jd
->
d_dülog
);

1261 
jd
->
d_dülog
 = 
NULL
;

1262 
	`_eXosù_upd©e
(
exc⁄ãxt
);

1264 
	}
}

1266 
	$rcvªgi°î_Áûuª
(
osù_å™ß˘i⁄_t
 *
å
, 
osù_mesßge_t
 *
sù
) {

1267 
eXosù_t
 *
exc⁄ãxt
 = (eXosù_à*Ë
	`osù_å™ß˘i⁄_gë_ª£rved1
(
å
);

1268 
eXosù_evít_t
 *
je
;

1269 
eXosù_ªg_t
 *
jªg
 = 
NULL
;

1272 
	`_eXosù_ªg_föd
(
exc⁄ãxt
, &
jªg
, 
å
);

1274 i‡(
jªg
 !
NULL
) {

1276 i‡(
jªg
->
ªgi°øti⁄_°ï
 > 
RS_MASQUERADINGREQUIRED
 && 
sù
 !
NULL
)

1277 
	`_eXosù_ªgi°î_c⁄è˘_is_modifõd
(
jªg
, 
å
->
‹ig_ªque°
, 
sù
);

1279 
je
 = 
	`_eXosù_evít_öô_f‹_ªg
(
EXOSIP_REGISTRATION_FAILURE
, 
jªg
, 
å
);

1280 
	`_eXosù_ªp‹t_evít
(
exc⁄ãxt
, 
je
);

1282 i‡(
å
->
«±r_ªc‹d
 !
NULL
 && 
sù
 !NULL && sù->
°©us_code
 == 503) {

1284 
	`osù_gëtimeofday
(&
å
->
«±r_ªc‹d
->
sùudp_ªc‹d
.
§víåy
[å->«±r_ªc‹d->sùudp_ªc‹d.
ödex
].
§v_is_brokí
, 
NULL
);

1285 
	`osù_gëtimeofday
(&
å
->
«±r_ªc‹d
->
sùt˝_ªc‹d
.
§víåy
[å->«±r_ªc‹d->sùt˝_ªc‹d.
ödex
].
§v_is_brokí
, 
NULL
);

1286 
	`osù_gëtimeofday
(&
å
->
«±r_ªc‹d
->
sùés_ªc‹d
.
§víåy
[å->«±r_ªc‹d->sùés_ªc‹d.
ödex
].
§v_is_brokí
, 
NULL
);

1287 
	`osù_gëtimeofday
(&
å
->
«±r_ªc‹d
->
sùdés_ªc‹d
.
§víåy
[å->«±r_ªc‹d->sùdés_ªc‹d.
ödex
].
§v_is_brokí
, 
NULL
);

1288 
	`osù_gëtimeofday
(&
å
->
«±r_ªc‹d
->
sùs˘p_ªc‹d
.
§víåy
[å->«±r_ªc‹d->sùs˘p_ªc‹d.
ödex
].
§v_is_brokí
, 
NULL
);

1289 
	`_eXosù_m¨k_ªgi°øti⁄_expúed
(
exc⁄ãxt
, 
sù
->
ˇŒ_id
->
numbî
);

1292 
	}
}

1294 #i‚de‡
MINISIZE


1296 
	$cb_rcv3xx
(
ty≥
, 
osù_å™ß˘i⁄_t
 *
å
, 
osù_mesßge_t
 *
sù
) {

1297 
eXosù_t
 *
exc⁄ãxt
 = (eXosù_à*Ë
	`osù_å™ß˘i⁄_gë_ª£rved1
(
å
);

1298 
eXosù_ˇŒ_t
 *
jc
 = (eXosù_ˇŒ_à*Ë
	`osù_å™ß˘i⁄_gë_ª£rved2
(
å
);

1299 
eXosù_dülog_t
 *
jd
 = (eXosù_dülog_à*Ë
	`osù_å™ß˘i⁄_gë_ª£rved3
(
å
);

1300 
eXosù_subs¸ibe_t
 *
js
 = (eXosù_subs¸ibe_à*Ë
	`osù_å™ß˘i⁄_gë_ª£rved5
(
å
);

1301 
eXosù_nŸify_t
 *
jn
 = (eXosù_nŸify_à*Ë
	`osù_å™ß˘i⁄_gë_ª£rved4
(
å
);

1303 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO3
, 
NULL
, "[eXosù] [tid=%i] [cb_rcv3xx]\n", 
å
->
å™ß˘i⁄id
));

1305 i‡(
	`MSG_IS_RESPONSE_FOR
(
sù
, "PUBLISH")) {

1306 
eXosù_evít_t
 *
je
;

1307 
eXosù_pub_t
 *
pub
;

1308 
i
;

1310 
i
 = 
	`_eXosù_pub_upd©e
(
exc⁄ãxt
, &
pub
, 
å
, 
sù
);

1312 i‡(
i
 != 0) {

1313 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosù] [tid=%i] [cb_rcv3xx]Çÿpubliˇti⁄Åÿupd©e\n", 
å
->
å™ß˘i⁄id
));

1316 
je
 = 
	`_eXosù_evít_öô_f‹_mesßge
(
EXOSIP_MESSAGE_REDIRECTED
, 
å
);

1317 
	`_eXosù_ªp‹t_evít
(
exc⁄ãxt
, 
je
);

1321 i‡(
	`MSG_IS_RESPONSE_FOR
(
sù
, "REGISTER")) {

1322 
	`rcvªgi°î_Áûuª
(
å
, 
sù
);

1326 i‡(
	`MSG_IS_RESPONSE_FOR
(
sù
, "INVITE")) {

1327 
	`_eXosù_ªp‹t_ˇŒ_evít
(
exc⁄ãxt
, 
EXOSIP_CALL_REDIRECTED
, 
jc
, 
jd
, 
å
);

1329 } i‡(
	`MSG_IS_RESPONSE_FOR
(
sù
, "NOTIFY"Ë&& 
jn
 !
NULL
) {

1330 
eXosù_evít_t
 *
je
;

1332 
je
 = 
	`_eXosù_evít_öô_f‹_nŸify
(
EXOSIP_NOTIFICATION_REDIRECTED
, 
jn
, 
jd
, 
å
);

1333 
	`_eXosù_ªp‹t_evít
(
exc⁄ãxt
, 
je
);

1335 } i‡(
js
 !
NULL
 && (
	`MSG_IS_RESPONSE_FOR
(
sù
, "SUBSCRIBE") || MSG_IS_RESPONSE_FOR(sip, "REFER"))) {

1336 
eXosù_evít_t
 *
je
;

1338 
je
 = 
	`_eXosù_evít_öô_f‹_subs¸ùti⁄
(
EXOSIP_SUBSCRIPTION_REDIRECTED
, 
js
, 
jd
, 
å
);

1339 
	`_eXosù_ªp‹t_evít
(
exc⁄ãxt
, 
je
);

1341 } i‡(
jc
 !
NULL
) {

1342 
	`_eXosù_ªp‹t_ˇŒ_evít
(
exc⁄ãxt
, 
EXOSIP_CALL_MESSAGE_REDIRECTED
, 
jc
, 
jd
, 
å
);

1345 } i‡(
jc
 =
NULL
 && 
js
 =NULL && 
jn
 == NULL) {

1346 
eXosù_evít_t
 *
je
;

1349 
je
 = 
	`_eXosù_evít_öô_f‹_mesßge
(
EXOSIP_MESSAGE_REDIRECTED
, 
å
);

1350 
	`_eXosù_ªp‹t_evít
(
exc⁄ãxt
, 
je
);

1354 i‡(
jd
 =
NULL
)

1357 i‡(
	`MSG_IS_RESPONSE_FOR
(
sù
, "INVITE") || MSG_IS_RESPONSE_FOR(sip, "REFER") || MSG_IS_RESPONSE_FOR(sip, "SUBSCRIBE")) {

1358 
	`_eXosù_dñëe_óæy_dülog
(
exc⁄ãxt
, 
jd
);

1360 
	}
}

1362 
	$cb_rcv4xx
(
ty≥
, 
osù_å™ß˘i⁄_t
 *
å
, 
osù_mesßge_t
 *
sù
) {

1363 
eXosù_t
 *
exc⁄ãxt
 = (eXosù_à*Ë
	`osù_å™ß˘i⁄_gë_ª£rved1
(
å
);

1364 
eXosù_ˇŒ_t
 *
jc
 = (eXosù_ˇŒ_à*Ë
	`osù_å™ß˘i⁄_gë_ª£rved2
(
å
);

1365 
eXosù_dülog_t
 *
jd
 = (eXosù_dülog_à*Ë
	`osù_å™ß˘i⁄_gë_ª£rved3
(
å
);

1366 
eXosù_subs¸ibe_t
 *
js
 = (eXosù_subs¸ibe_à*Ë
	`osù_å™ß˘i⁄_gë_ª£rved5
(
å
);

1367 
eXosù_nŸify_t
 *
jn
 = (eXosù_nŸify_à*Ë
	`osù_å™ß˘i⁄_gë_ª£rved4
(
å
);

1369 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO3
, 
NULL
, "[eXosù] [tid=%i] [cb_rcv4xx]\n", 
å
->
å™ß˘i⁄id
));

1371 i‡(
	`MSG_IS_RESPONSE_FOR
(
sù
, "PUBLISH")) {

1372 
eXosù_pub_t
 *
pub
;

1373 
eXosù_evít_t
 *
je
;

1374 
i
;

1376 
i
 = 
	`_eXosù_pub_upd©e
(
exc⁄ãxt
, &
pub
, 
å
, 
sù
);

1378 i‡(
i
 != 0) {

1379 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosù] [tid=%i] [cb_rcv4xx]Çÿpubliˇti⁄Åÿupd©e\n", 
å
->
å™ß˘i⁄id
));

1383 
je
 = 
	`_eXosù_evít_öô_f‹_mesßge
(
EXOSIP_MESSAGE_REQUESTFAILURE
, 
å
);

1384 
	`_eXosù_ªp‹t_evít
(
exc⁄ãxt
, 
je
);

1388 i‡(
	`MSG_IS_RESPONSE_FOR
(
sù
, "REGISTER")) {

1389 
	`rcvªgi°î_Áûuª
(
å
, 
sù
);

1393 i‡(
	`MSG_IS_RESPONSE_FOR
(
sù
, "INVITE")) {

1394 
	`_eXosù_ªp‹t_ˇŒ_evít
(
exc⁄ãxt
, 
EXOSIP_CALL_REQUESTFAILURE
, 
jc
, 
jd
, 
å
);

1396 } i‡(
	`MSG_IS_RESPONSE_FOR
(
sù
, "NOTIFY"Ë&& 
jn
 !
NULL
) {

1397 
eXosù_evít_t
 *
je
;

1399 
je
 = 
	`_eXosù_evít_öô_f‹_nŸify
(
EXOSIP_NOTIFICATION_REQUESTFAILURE
, 
jn
, 
jd
, 
å
);

1400 
	`_eXosù_ªp‹t_evít
(
exc⁄ãxt
, 
je
);

1402 } i‡(
js
 !
NULL
 && (
	`MSG_IS_RESPONSE_FOR
(
sù
, "SUBSCRIBE") || MSG_IS_RESPONSE_FOR(sip, "REFER"))) {

1403 
eXosù_evít_t
 *
je
;

1405 
je
 = 
	`_eXosù_evít_öô_f‹_subs¸ùti⁄
(
EXOSIP_SUBSCRIPTION_REQUESTFAILURE
, 
js
, 
jd
, 
å
);

1406 
	`_eXosù_ªp‹t_evít
(
exc⁄ãxt
, 
je
);

1408 } i‡(
jc
 !
NULL
) {

1409 
	`_eXosù_ªp‹t_ˇŒ_evít
(
exc⁄ãxt
, 
EXOSIP_CALL_MESSAGE_REQUESTFAILURE
, 
jc
, 
jd
, 
å
);

1412 } i‡(
jc
 =
NULL
 && 
js
 =NULL && 
jn
 == NULL) {

1413 
eXosù_evít_t
 *
je
;

1416 
je
 = 
	`_eXosù_evít_öô_f‹_mesßge
(
EXOSIP_MESSAGE_REQUESTFAILURE
, 
å
);

1417 
	`_eXosù_ªp‹t_evít
(
exc⁄ãxt
, 
je
);

1421 i‡(
jd
 =
NULL
)

1424 i‡(
	`MSG_IS_RESPONSE_FOR
(
sù
, "INVITE") || MSG_IS_RESPONSE_FOR(sip, "REFER") || MSG_IS_RESPONSE_FOR(sip, "SUBSCRIBE")) {

1425 
	`_eXosù_dñëe_óæy_dülog
(
exc⁄ãxt
, 
jd
);

1427 
	}
}

1429 
	$cb_rcv5xx
(
ty≥
, 
osù_å™ß˘i⁄_t
 *
å
, 
osù_mesßge_t
 *
sù
) {

1430 
eXosù_t
 *
exc⁄ãxt
 = (eXosù_à*Ë
	`osù_å™ß˘i⁄_gë_ª£rved1
(
å
);

1431 
eXosù_ˇŒ_t
 *
jc
 = (eXosù_ˇŒ_à*Ë
	`osù_å™ß˘i⁄_gë_ª£rved2
(
å
);

1432 
eXosù_dülog_t
 *
jd
 = (eXosù_dülog_à*Ë
	`osù_å™ß˘i⁄_gë_ª£rved3
(
å
);

1433 
eXosù_subs¸ibe_t
 *
js
 = (eXosù_subs¸ibe_à*Ë
	`osù_å™ß˘i⁄_gë_ª£rved5
(
å
);

1434 
eXosù_nŸify_t
 *
jn
 = (eXosù_nŸify_à*Ë
	`osù_å™ß˘i⁄_gë_ª£rved4
(
å
);

1436 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO3
, 
NULL
, "[eXosù] [tid=%i] [cb_rcv5xx]\n", 
å
->
å™ß˘i⁄id
));

1438 i‡(
	`MSG_IS_RESPONSE_FOR
(
sù
, "PUBLISH")) {

1439 
eXosù_pub_t
 *
pub
;

1440 
eXosù_evít_t
 *
je
;

1441 
i
;

1443 
i
 = 
	`_eXosù_pub_upd©e
(
exc⁄ãxt
, &
pub
, 
å
, 
sù
);

1445 i‡(
i
 != 0) {

1446 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosù] [tid=%i] [cb_rcv5xx]Çÿpubliˇti⁄Åÿupd©e\n", 
å
->
å™ß˘i⁄id
));

1449 
je
 = 
	`_eXosù_evít_öô_f‹_mesßge
(
EXOSIP_MESSAGE_SERVERFAILURE
, 
å
);

1450 
	`_eXosù_ªp‹t_evít
(
exc⁄ãxt
, 
je
);

1454 i‡(
	`MSG_IS_RESPONSE_FOR
(
sù
, "REGISTER")) {

1455 
	`rcvªgi°î_Áûuª
(
å
, 
sù
);

1459 i‡(
	`MSG_IS_RESPONSE_FOR
(
sù
, "INVITE")) {

1460 
	`_eXosù_ªp‹t_ˇŒ_evít
(
exc⁄ãxt
, 
EXOSIP_CALL_SERVERFAILURE
, 
jc
, 
jd
, 
å
);

1462 } i‡(
	`MSG_IS_RESPONSE_FOR
(
sù
, "NOTIFY"Ë&& 
jn
 !
NULL
) {

1463 
eXosù_evít_t
 *
je
;

1465 
je
 = 
	`_eXosù_evít_öô_f‹_nŸify
(
EXOSIP_NOTIFICATION_SERVERFAILURE
, 
jn
, 
jd
, 
å
);

1466 
	`_eXosù_ªp‹t_evít
(
exc⁄ãxt
, 
je
);

1468 } i‡(
js
 !
NULL
 && (
	`MSG_IS_RESPONSE_FOR
(
sù
, "SUBSCRIBE") || MSG_IS_RESPONSE_FOR(sip, "REFER"))) {

1469 
eXosù_evít_t
 *
je
;

1471 
je
 = 
	`_eXosù_evít_öô_f‹_subs¸ùti⁄
(
EXOSIP_SUBSCRIPTION_SERVERFAILURE
, 
js
, 
jd
, 
å
);

1472 
	`_eXosù_ªp‹t_evít
(
exc⁄ãxt
, 
je
);

1474 } i‡(
jc
 !
NULL
) {

1475 
	`_eXosù_ªp‹t_ˇŒ_evít
(
exc⁄ãxt
, 
EXOSIP_CALL_MESSAGE_SERVERFAILURE
, 
jc
, 
jd
, 
å
);

1478 } i‡(
jc
 =
NULL
 && 
js
 =NULL && 
jn
 == NULL) {

1479 
eXosù_evít_t
 *
je
;

1482 
je
 = 
	`_eXosù_evít_öô_f‹_mesßge
(
EXOSIP_MESSAGE_SERVERFAILURE
, 
å
);

1483 
	`_eXosù_ªp‹t_evít
(
exc⁄ãxt
, 
je
);

1487 i‡(
jd
 =
NULL
)

1490 i‡(
	`MSG_IS_RESPONSE_FOR
(
sù
, "INVITE") || MSG_IS_RESPONSE_FOR(sip, "REFER") || MSG_IS_RESPONSE_FOR(sip, "SUBSCRIBE")) {

1491 
	`_eXosù_dñëe_óæy_dülog
(
exc⁄ãxt
, 
jd
);

1493 
	}
}

1495 
	$cb_rcv6xx
(
ty≥
, 
osù_å™ß˘i⁄_t
 *
å
, 
osù_mesßge_t
 *
sù
) {

1496 
eXosù_t
 *
exc⁄ãxt
 = (eXosù_à*Ë
	`osù_å™ß˘i⁄_gë_ª£rved1
(
å
);

1497 
eXosù_ˇŒ_t
 *
jc
 = (eXosù_ˇŒ_à*Ë
	`osù_å™ß˘i⁄_gë_ª£rved2
(
å
);

1498 
eXosù_dülog_t
 *
jd
 = (eXosù_dülog_à*Ë
	`osù_å™ß˘i⁄_gë_ª£rved3
(
å
);

1499 
eXosù_subs¸ibe_t
 *
js
 = (eXosù_subs¸ibe_à*Ë
	`osù_å™ß˘i⁄_gë_ª£rved5
(
å
);

1500 
eXosù_nŸify_t
 *
jn
 = (eXosù_nŸify_à*Ë
	`osù_å™ß˘i⁄_gë_ª£rved4
(
å
);

1502 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO3
, 
NULL
, "[eXosù] [tid=%i] [cb_rcv6xx]\n", 
å
->
å™ß˘i⁄id
));

1504 i‡(
	`MSG_IS_RESPONSE_FOR
(
sù
, "PUBLISH")) {

1505 
eXosù_pub_t
 *
pub
;

1506 
eXosù_evít_t
 *
je
;

1507 
i
;

1509 
i
 = 
	`_eXosù_pub_upd©e
(
exc⁄ãxt
, &
pub
, 
å
, 
sù
);

1511 i‡(
i
 != 0) {

1512 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosù] [tid=%i] [cb_rcv6xx]Çÿpubliˇti⁄Åÿupd©e\n", 
å
->
å™ß˘i⁄id
));

1515 
je
 = 
	`_eXosù_evít_öô_f‹_mesßge
(
EXOSIP_MESSAGE_GLOBALFAILURE
, 
å
);

1516 
	`_eXosù_ªp‹t_evít
(
exc⁄ãxt
, 
je
);

1520 i‡(
	`MSG_IS_RESPONSE_FOR
(
sù
, "REGISTER")) {

1521 
	`rcvªgi°î_Áûuª
(
å
, 
sù
);

1525 i‡(
	`MSG_IS_RESPONSE_FOR
(
sù
, "INVITE")) {

1526 
	`_eXosù_ªp‹t_ˇŒ_evít
(
exc⁄ãxt
, 
EXOSIP_CALL_GLOBALFAILURE
, 
jc
, 
jd
, 
å
);

1528 } i‡(
	`MSG_IS_RESPONSE_FOR
(
sù
, "NOTIFY"Ë&& 
jn
 !
NULL
) {

1529 
eXosù_evít_t
 *
je
;

1531 
je
 = 
	`_eXosù_evít_öô_f‹_nŸify
(
EXOSIP_NOTIFICATION_GLOBALFAILURE
, 
jn
, 
jd
, 
å
);

1532 
	`_eXosù_ªp‹t_evít
(
exc⁄ãxt
, 
je
);

1534 } i‡(
js
 !
NULL
 && (
	`MSG_IS_RESPONSE_FOR
(
sù
, "SUBSCRIBE") || MSG_IS_RESPONSE_FOR(sip, "REFER"))) {

1535 
eXosù_evít_t
 *
je
;

1537 
je
 = 
	`_eXosù_evít_öô_f‹_subs¸ùti⁄
(
EXOSIP_SUBSCRIPTION_GLOBALFAILURE
, 
js
, 
jd
, 
å
);

1538 
	`_eXosù_ªp‹t_evít
(
exc⁄ãxt
, 
je
);

1540 } i‡(
jc
 !
NULL
) {

1541 
	`_eXosù_ªp‹t_ˇŒ_evít
(
exc⁄ãxt
, 
EXOSIP_CALL_MESSAGE_GLOBALFAILURE
, 
jc
, 
jd
, 
å
);

1544 } i‡(
jc
 =
NULL
 && 
js
 =NULL && 
jn
 == NULL) {

1545 
eXosù_evít_t
 *
je
;

1548 
je
 = 
	`_eXosù_evít_öô_f‹_mesßge
(
EXOSIP_MESSAGE_GLOBALFAILURE
, 
å
);

1549 
	`_eXosù_ªp‹t_evít
(
exc⁄ãxt
, 
je
);

1553 i‡(
jd
 =
NULL
)

1556 i‡(
	`MSG_IS_RESPONSE_FOR
(
sù
, "INVITE") || MSG_IS_RESPONSE_FOR(sip, "REFER") || MSG_IS_RESPONSE_FOR(sip, "SUBSCRIBE")) {

1557 
	`_eXosù_dñëe_óæy_dülog
(
exc⁄ãxt
, 
jd
);

1559 
	}
}

1563 
cb_rcv3456xx
(
ty≥
, 
osù_å™ß˘i⁄_t
 *
å
, 
osù_mesßge_t
 *
sù
, 
övôe_evít
, 
ˇŒ_evít
, 
outˇŒ_evít
);

1565 
	$cb_rcv3456xx
(
ty≥
, 
osù_å™ß˘i⁄_t
 *
å
, 
osù_mesßge_t
 *
sù
, 
övôe_evít
, 
ˇŒ_evít
, 
outˇŒ_evít
) {

1566 
eXosù_t
 *
exc⁄ãxt
 = (eXosù_à*Ë
	`osù_å™ß˘i⁄_gë_ª£rved1
(
å
);

1567 
eXosù_ˇŒ_t
 *
jc
 = (eXosù_ˇŒ_à*Ë
	`osù_å™ß˘i⁄_gë_ª£rved2
(
å
);

1568 
eXosù_dülog_t
 *
jd
 = (eXosù_dülog_à*Ë
	`osù_å™ß˘i⁄_gë_ª£rved3
(
å
);

1570 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO3
, 
NULL
, "[eXosù] [tid=%i] [cb_rcv3456xx]\n", 
å
->
å™ß˘i⁄id
));

1572 i‡(
	`MSG_IS_RESPONSE_FOR
(
sù
, "REGISTER")) {

1573 
	`rcvªgi°î_Áûuª
(
å
, 
sù
);

1577 i‡(
	`MSG_IS_RESPONSE_FOR
(
sù
, "INVITE")) {

1578 
	`_eXosù_ªp‹t_ˇŒ_evít
(
exc⁄ãxt
, 
övôe_evít
, 
jc
, 
jd
, 
å
);

1580 } i‡(
jc
 !
NULL
) {

1581 
	`_eXosù_ªp‹t_ˇŒ_evít
(
exc⁄ãxt
, 
ˇŒ_evít
, 
jc
, 
jd
, 
å
);

1584 } i‡(
jc
 =
NULL
) {

1585 
eXosù_evít_t
 *
je
;

1588 
je
 = 
	`_eXosù_evít_öô_f‹_mesßge
(
outˇŒ_evít
, 
å
);

1589 
	`_eXosù_ªp‹t_evít
(
exc⁄ãxt
, 
je
);

1593 i‡(
jd
 =
NULL
)

1596 i‡(
	`MSG_IS_RESPONSE_FOR
(
sù
, "INVITE")) {

1597 
	`_eXosù_dñëe_óæy_dülog
(
exc⁄ãxt
, 
jd
);

1599 
	}
}

1601 
	$cb_rcv3xx
(
ty≥
, 
osù_å™ß˘i⁄_t
 *
å
, 
osù_mesßge_t
 *
sù
) {

1602 
	`cb_rcv3456xx
(
ty≥
, 
å
, 
sù
, 
EXOSIP_CALL_REDIRECTED
, 
EXOSIP_CALL_MESSAGE_REDIRECTED
, 
EXOSIP_MESSAGE_REDIRECTED
);

1603 
	}
}

1605 
	$cb_rcv4xx
(
ty≥
, 
osù_å™ß˘i⁄_t
 *
å
, 
osù_mesßge_t
 *
sù
) {

1606 
	`cb_rcv3456xx
(
ty≥
, 
å
, 
sù
, 
EXOSIP_CALL_REQUESTFAILURE
, 
EXOSIP_CALL_MESSAGE_REQUESTFAILURE
, 
EXOSIP_MESSAGE_REQUESTFAILURE
);

1607 
	}
}

1609 
	$cb_rcv5xx
(
ty≥
, 
osù_å™ß˘i⁄_t
 *
å
, 
osù_mesßge_t
 *
sù
) {

1610 
	`cb_rcv3456xx
(
ty≥
, 
å
, 
sù
, 
EXOSIP_CALL_SERVERFAILURE
, 
EXOSIP_CALL_MESSAGE_SERVERFAILURE
, 
EXOSIP_MESSAGE_SERVERFAILURE
);

1611 
	}
}

1613 
	$cb_rcv6xx
(
ty≥
, 
osù_å™ß˘i⁄_t
 *
å
, 
osù_mesßge_t
 *
sù
) {

1614 
	`cb_rcv3456xx
(
ty≥
, 
å
, 
sù
, 
EXOSIP_CALL_GLOBALFAILURE
, 
EXOSIP_CALL_MESSAGE_GLOBALFAILURE
, 
EXOSIP_MESSAGE_GLOBALFAILURE
);

1615 
	}
}

1619 
	$cb_¢d123456xx
(
ty≥
, 
osù_å™ß˘i⁄_t
 *
å
, 
osù_mesßge_t
 *
sù
) {

1620 
eXosù_t
 *
exc⁄ãxt
 = (eXosù_à*Ë
	`osù_å™ß˘i⁄_gë_ª£rved1
(
å
);

1621 
eXosù_ˇŒ_t
 *
jc
 = (eXosù_ˇŒ_à*Ë
	`osù_å™ß˘i⁄_gë_ª£rved2
(
å
);

1622 
eXosù_dülog_t
 *
jd
 = (eXosù_dülog_à*Ë
	`osù_å™ß˘i⁄_gë_ª£rved3
(
å
);

1624 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO3
, 
NULL
, "[eXosù] [tid=%i] [cb_¢d123456xx]\n", 
å
->
å™ß˘i⁄id
));

1626 i‡(
jd
 =
NULL
)

1629 i‡(
ty≥
 =
OSIP_IST_STATUS_1XX_SENT
 ||Åy≥ =
OSIP_NIST_STATUS_1XX_SENT
) {

1633 i‡(
ty≥
 =
OSIP_IST_STATUS_2XX_SENT
 ||Åy≥ =
OSIP_NIST_STATUS_2XX_SENT
) {

1637 i‡(
	`MSG_IS_RESPONSE_FOR
(
sù
, "INVITE") || MSG_IS_RESPONSE_FOR(sip, "REFER") || MSG_IS_RESPONSE_FOR(sip, "SUBSCRIBE")) {

1638 
	`_eXosù_dñëe_óæy_dülog
(
exc⁄ãxt
, 
jd
);

1641 i‡(
	`MSG_IS_RESPONSE_FOR
(
sù
, "INVITE")) {

1643 i‡(
jc
 !
NULL
 && 
å
 =jc->
c_öc_å
) {

1644 
	`_eXosù_ªp‹t_ˇŒ_evít
(
exc⁄ãxt
, 
EXOSIP_CALL_CLOSED
, 
jc
, 
jd
, 
å
);

1647 
	}
}

1649 #i‚de‡
MINISIZE


1651 
	$cb_rcvövôe
(
ty≥
, 
osù_å™ß˘i⁄_t
 *
å
, 
osù_mesßge_t
 *
sù
) {

1652 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO3
, 
NULL
, "[eXosù] [tid=%i] [cb_rcvövôe]\n", 
å
->
å™ß˘i⁄id
));

1653 
	}
}

1655 
	$cb_rcvack
(
ty≥
, 
osù_å™ß˘i⁄_t
 *
å
, 
osù_mesßge_t
 *
sù
) {

1656 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO3
, 
NULL
, "[eXosù] [tid=%i] [cb_rcvack]\n", 
å
->
å™ß˘i⁄id
));

1657 
	}
}

1659 
	$cb_rcvack2
(
ty≥
, 
osù_å™ß˘i⁄_t
 *
å
, 
osù_mesßge_t
 *
sù
) {

1660 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO3
, 
NULL
, "[eXosù] [tid=%i] [cb_rcvack2]\n", 
å
->
å™ß˘i⁄id
));

1661 
	}
}

1663 
	$cb_¢dövôe
(
ty≥
, 
osù_å™ß˘i⁄_t
 *
å
, 
osù_mesßge_t
 *
sù
) {

1664 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO3
, 
NULL
, "[eXosù] [tid=%i] [cb_¢dövôe]\n", 
å
->
å™ß˘i⁄id
));

1665 
	}
}

1667 
	$cb_¢dack
(
ty≥
, 
osù_å™ß˘i⁄_t
 *
å
, 
osù_mesßge_t
 *
sù
) {

1668 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO3
, 
NULL
, "[eXosù] [tid=%i] [cb_¢dack]\n", 
å
->
å™ß˘i⁄id
));

1669 
	}
}

1671 
	$cb_¢dªgi°î
(
ty≥
, 
osù_å™ß˘i⁄_t
 *
å
, 
osù_mesßge_t
 *
sù
) {

1672 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO3
, 
NULL
, "[eXosù] [tid=%i] [cb_¢dªgi°î]\n", 
å
->
å™ß˘i⁄id
));

1673 
	}
}

1675 
	$cb_¢dbye
(
ty≥
, 
osù_å™ß˘i⁄_t
 *
å
, 
osù_mesßge_t
 *
sù
) {

1676 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO3
, 
NULL
, "[eXosù] [tid=%i] [cb_¢dbye]\n", 
å
->
å™ß˘i⁄id
));

1677 
	}
}

1679 
	$cb_¢dˇn˚l
(
ty≥
, 
osù_å™ß˘i⁄_t
 *
å
, 
osù_mesßge_t
 *
sù
) {

1680 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO3
, 
NULL
, "[eXosù] [tid=%i] [cb_¢dˇn˚l]\n", 
å
->
å™ß˘i⁄id
));

1681 
	}
}

1683 
	$cb_¢döfo
(
ty≥
, 
osù_å™ß˘i⁄_t
 *
å
, 
osù_mesßge_t
 *
sù
) {

1684 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO3
, 
NULL
, "[eXosù] [tid=%i] [cb_¢döfo]\n", 
å
->
å™ß˘i⁄id
));

1685 
	}
}

1687 
	$cb_¢d›ti⁄s
(
ty≥
, 
osù_å™ß˘i⁄_t
 *
å
, 
osù_mesßge_t
 *
sù
) {

1688 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO3
, 
NULL
, "[eXosù] [tid=%i] [cb_¢d›ti⁄s]\n", 
å
->
å™ß˘i⁄id
));

1689 
	}
}

1691 
	$cb_¢dnŸify
(
ty≥
, 
osù_å™ß˘i⁄_t
 *
å
, 
osù_mesßge_t
 *
sù
) {

1692 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO3
, 
NULL
, "[eXosù] [tid=%i] [cb_¢dnŸify]\n", 
å
->
å™ß˘i⁄id
));

1693 
	}
}

1695 
	$cb_¢dsubs¸ibe
(
ty≥
, 
osù_å™ß˘i⁄_t
 *
å
, 
osù_mesßge_t
 *
sù
) {

1696 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO3
, 
NULL
, "[eXosù] [tid=%i] [cb_¢dsubs¸ibe]\n", 
å
->
å™ß˘i⁄id
));

1697 
	}
}

1699 
	$cb_¢dunkªque°
(
ty≥
, 
osù_å™ß˘i⁄_t
 *
å
, 
osù_mesßge_t
 *
sù
) {

1700 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO3
, 
NULL
, "[eXosù] [tid=%i] [cb_¢dunkªque°]\n", 
å
->
å™ß˘i⁄id
));

1701 
	}
}

1703 
	$cb_rcvª•_ªå™smissi⁄
(
ty≥
, 
osù_å™ß˘i⁄_t
 *
å
, 
osù_mesßge_t
 *
sù
) {

1704 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO1
, 
NULL
, "[eXosù] [tid=%i] [cb_rcvª•_ªå™smissi⁄]\n", 
å
->
å™ß˘i⁄id
));

1705 
	}
}

1707 
	$cb_¢dªq_ªå™smissi⁄
(
ty≥
, 
osù_å™ß˘i⁄_t
 *
å
, 
osù_mesßge_t
 *
sù
) {

1708 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO1
, 
NULL
, "[eXosù] [tid=%i] [cb_¢dªq_ªå™smissi⁄]\n", 
å
->
å™ß˘i⁄id
));

1709 
	}
}

1711 
	$cb_¢dª•_ªå™smissi⁄
(
ty≥
, 
osù_å™ß˘i⁄_t
 *
å
, 
osù_mesßge_t
 *
sù
) {

1712 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO1
, 
NULL
, "[eXosù] [tid=%i] [cb_¢dª•_ªå™smissi⁄]\n", 
å
->
å™ß˘i⁄id
));

1713 
	}
}

1715 
	$cb_rcvªq_ªå™smissi⁄
(
ty≥
, 
osù_å™ß˘i⁄_t
 *
å
, 
osù_mesßge_t
 *
sù
) {

1716 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO1
, 
NULL
, "[eXosù] [tid=%i] [cb_rcvªq_ªå™smissi⁄]\n", 
å
->
å™ß˘i⁄id
));

1717 
	}
}

1721 
	$cb_å™•‹t_îr‹
(
ty≥
, 
osù_å™ß˘i⁄_t
 *
å
, 
îr‹
) {

1722 
eXosù_t
 *
exc⁄ãxt
 = (eXosù_à*Ë
	`osù_å™ß˘i⁄_gë_ª£rved1
(
å
);

1724 #i‚de‡
MINISIZE


1725 
eXosù_subs¸ibe_t
 *
js
 = (eXosù_subs¸ibe_à*Ë
	`osù_å™ß˘i⁄_gë_ª£rved5
(
å
);

1726 
eXosù_nŸify_t
 *
jn
 = (eXosù_nŸify_à*Ë
	`osù_å™ß˘i⁄_gë_ª£rved4
(
å
);

1729 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO1
, 
NULL
, "[eXosù] [tid=%i] [cb_å™•‹t_îr‹]\n", 
å
->
å™ß˘i⁄id
));

1731 i‡(
ty≥
 =
OSIP_ICT_TRANSPORT_ERROR
) {

1732 
eXosù_ˇŒ_t
 *
jc
 = (eXosù_ˇŒ_à*Ë
	`osù_å™ß˘i⁄_gë_ª£rved2
(
å
);

1733 
eXosù_dülog_t
 *
jd
 = (eXosù_dülog_à*Ë
	`osù_å™ß˘i⁄_gë_ª£rved3
(
å
);

1735 i‡(
jc
 =
NULL
 && 
jd
 == NULL)

1738 
	`_eXosù_ªp‹t_ˇŒ_evít
(
exc⁄ãxt
, 
EXOSIP_CALL_NOANSWER
, 
jc
, 
jd
, 
å
);

1741 i‡(
ty≥
 =
OSIP_NICT_TRANSPORT_ERROR
) {

1742 
osù_«±r_t
 *
«±r_ªc‹d
 = 
å
->naptr_record;

1743 i‡(
«±r_ªc‹d
 !
NULL
 &&Ç≠å_ªc‹d->
«±r_°©e
 =
OSIP_NAPTR_STATE_SRVDONE
 && (
	`MSG_IS_REGISTER
(
å
->
‹ig_ªque°
Ë|| 
	`MSG_IS_OPTIONS
(tr->orig_request))) {

1745 i‡(
	`osù_°rˇ£cmp
(
exc⁄ãxt
->
eXé_å™•‹t
.
¥Ÿo_«me
, "UDP") == 0)

1746 
	`eXosù_dnsutûs_rŸ©e_§v
(&
«±r_ªc‹d
->
sùudp_ªc‹d
);

1747 i‡(
	`osù_°rˇ£cmp
(
exc⁄ãxt
->
eXé_å™•‹t
.
¥Ÿo_«me
, "TCP") == 0)

1748 
	`eXosù_dnsutûs_rŸ©e_§v
(&
«±r_ªc‹d
->
sùt˝_ªc‹d
);

1749 i‡(
	`osù_°rˇ£cmp
(
exc⁄ãxt
->
eXé_å™•‹t
.
¥Ÿo_«me
, "TLS") == 0)

1750 
	`eXosù_dnsutûs_rŸ©e_§v
(&
«±r_ªc‹d
->
sùés_ªc‹d
);

1751 i‡(
	`osù_°rˇ£cmp
(
exc⁄ãxt
->
eXé_å™•‹t
.
¥Ÿo_«me
, "DTLS-UDP") == 0)

1752 
	`eXosù_dnsutûs_rŸ©e_§v
(&
«±r_ªc‹d
->
sùdés_ªc‹d
);

1755 #i‚de‡
MINISIZE


1757 i‡(
jn
 =
NULL
 && 
js
 == NULL)

1760 i‡(
jn
 !
NULL
 && 
	`MSG_IS_NOTIFY
(
å
->
‹ig_ªque°
Ë&& 
ty≥
 =
OSIP_NICT_TRANSPORT_ERROR
) {

1762 
	`REMOVE_ELEMENT
(
exc⁄ãxt
->
j_nŸifõs
, 
jn
);

1763 
	`_eXosù_nŸify_‰ì
(
exc⁄ãxt
, 
jn
);

1766 i‡(
js
 !
NULL
 && (
	`MSG_IS_SUBSCRIBE
(
å
->
‹ig_ªque°
Ë|| 
	`MSG_IS_REFER
—r->‹ig_ªque°)Ë&& 
ty≥
 =
OSIP_NICT_TRANSPORT_ERROR
) {

1768 
	`REMOVE_ELEMENT
(
exc⁄ãxt
->
j_subs¸ibes
, 
js
);

1769 
	`_eXosù_subs¸ùti⁄_‰ì
(
exc⁄ãxt
, 
js
);

1773 
	}
}

1775 
	$_eXosù_£t_ˇŒbacks
(
osù_t
 *
osù
) {

1778 
	`osù_£t_cb_£nd_mesßge
(
osù
, &
cb_¢d_mesßge
);

1780 
	`osù_£t_kûl_å™ß˘i⁄_ˇŒback
(
osù
, 
OSIP_ICT_KILL_TRANSACTION
, &
cb_xixt_kûl_å™ß˘i⁄
);

1781 
	`osù_£t_kûl_å™ß˘i⁄_ˇŒback
(
osù
, 
OSIP_IST_KILL_TRANSACTION
, &
cb_xixt_kûl_å™ß˘i⁄
);

1782 
	`osù_£t_kûl_å™ß˘i⁄_ˇŒback
(
osù
, 
OSIP_NICT_KILL_TRANSACTION
, &
cb_xixt_kûl_å™ß˘i⁄
);

1783 
	`osù_£t_kûl_å™ß˘i⁄_ˇŒback
(
osù
, 
OSIP_NIST_KILL_TRANSACTION
, &
cb_xixt_kûl_å™ß˘i⁄
);

1785 
	`osù_£t_mesßge_ˇŒback
(
osù
, 
OSIP_ICT_STATUS_1XX_RECEIVED
, &
cb_rcv1xx
);

1786 
	`osù_£t_mesßge_ˇŒback
(
osù
, 
OSIP_ICT_STATUS_2XX_RECEIVED
, &
cb_rcv2xx
);

1787 
	`osù_£t_mesßge_ˇŒback
(
osù
, 
OSIP_ICT_STATUS_3XX_RECEIVED
, &
cb_rcv3xx
);

1788 
	`osù_£t_mesßge_ˇŒback
(
osù
, 
OSIP_ICT_STATUS_4XX_RECEIVED
, &
cb_rcv4xx
);

1789 
	`osù_£t_mesßge_ˇŒback
(
osù
, 
OSIP_ICT_STATUS_5XX_RECEIVED
, &
cb_rcv5xx
);

1790 
	`osù_£t_mesßge_ˇŒback
(
osù
, 
OSIP_ICT_STATUS_6XX_RECEIVED
, &
cb_rcv6xx
);

1792 
	`osù_£t_mesßge_ˇŒback
(
osù
, 
OSIP_IST_STATUS_1XX_SENT
, &
cb_¢d123456xx
);

1793 
	`osù_£t_mesßge_ˇŒback
(
osù
, 
OSIP_IST_STATUS_2XX_SENT
, &
cb_¢d123456xx
);

1794 
	`osù_£t_mesßge_ˇŒback
(
osù
, 
OSIP_IST_STATUS_3XX_SENT
, &
cb_¢d123456xx
);

1795 
	`osù_£t_mesßge_ˇŒback
(
osù
, 
OSIP_IST_STATUS_4XX_SENT
, &
cb_¢d123456xx
);

1796 
	`osù_£t_mesßge_ˇŒback
(
osù
, 
OSIP_IST_STATUS_5XX_SENT
, &
cb_¢d123456xx
);

1797 
	`osù_£t_mesßge_ˇŒback
(
osù
, 
OSIP_IST_STATUS_6XX_SENT
, &
cb_¢d123456xx
);

1799 
	`osù_£t_mesßge_ˇŒback
(
osù
, 
OSIP_NICT_STATUS_1XX_RECEIVED
, &
cb_rcv1xx
);

1800 
	`osù_£t_mesßge_ˇŒback
(
osù
, 
OSIP_NICT_STATUS_2XX_RECEIVED
, &
cb_rcv2xx
);

1801 
	`osù_£t_mesßge_ˇŒback
(
osù
, 
OSIP_NICT_STATUS_3XX_RECEIVED
, &
cb_rcv3xx
);

1802 
	`osù_£t_mesßge_ˇŒback
(
osù
, 
OSIP_NICT_STATUS_4XX_RECEIVED
, &
cb_rcv4xx
);

1803 
	`osù_£t_mesßge_ˇŒback
(
osù
, 
OSIP_NICT_STATUS_5XX_RECEIVED
, &
cb_rcv5xx
);

1804 
	`osù_£t_mesßge_ˇŒback
(
osù
, 
OSIP_NICT_STATUS_6XX_RECEIVED
, &
cb_rcv6xx
);

1806 
	`osù_£t_mesßge_ˇŒback
(
osù
, 
OSIP_NIST_STATUS_1XX_SENT
, &
cb_¢d123456xx
);

1807 
	`osù_£t_mesßge_ˇŒback
(
osù
, 
OSIP_NIST_STATUS_2XX_SENT
, &
cb_¢d123456xx
);

1808 
	`osù_£t_mesßge_ˇŒback
(
osù
, 
OSIP_NIST_STATUS_3XX_SENT
, &
cb_¢d123456xx
);

1809 
	`osù_£t_mesßge_ˇŒback
(
osù
, 
OSIP_NIST_STATUS_4XX_SENT
, &
cb_¢d123456xx
);

1810 
	`osù_£t_mesßge_ˇŒback
(
osù
, 
OSIP_NIST_STATUS_5XX_SENT
, &
cb_¢d123456xx
);

1811 
	`osù_£t_mesßge_ˇŒback
(
osù
, 
OSIP_NIST_STATUS_6XX_SENT
, &
cb_¢d123456xx
);

1813 
	`osù_£t_mesßge_ˇŒback
(
osù
, 
OSIP_NIST_CANCEL_RECEIVED
, &
cb_rcvˇn˚l
);

1814 
	`osù_£t_mesßge_ˇŒback
(
osù
, 
OSIP_NIST_REGISTER_RECEIVED
, &
cb_rcvªgi°î
);

1815 
	`osù_£t_mesßge_ˇŒback
(
osù
, 
OSIP_NIST_BYE_RECEIVED
, &
cb_rcvªque°
);

1816 
	`osù_£t_mesßge_ˇŒback
(
osù
, 
OSIP_NIST_INFO_RECEIVED
, &
cb_rcvªque°
);

1817 
	`osù_£t_mesßge_ˇŒback
(
osù
, 
OSIP_NIST_OPTIONS_RECEIVED
, &
cb_rcvªque°
);

1818 
	`osù_£t_mesßge_ˇŒback
(
osù
, 
OSIP_NIST_SUBSCRIBE_RECEIVED
, &
cb_rcvªque°
);

1819 
	`osù_£t_mesßge_ˇŒback
(
osù
, 
OSIP_NIST_NOTIFY_RECEIVED
, &
cb_rcvªque°
);

1820 
	`osù_£t_mesßge_ˇŒback
(
osù
, 
OSIP_NIST_UNKNOWN_REQUEST_RECEIVED
, &
cb_rcvªque°
);

1822 
	`osù_£t_å™•‹t_îr‹_ˇŒback
(
osù
, 
OSIP_ICT_TRANSPORT_ERROR
, &
cb_å™•‹t_îr‹
);

1823 
	`osù_£t_å™•‹t_îr‹_ˇŒback
(
osù
, 
OSIP_IST_TRANSPORT_ERROR
, &
cb_å™•‹t_îr‹
);

1824 
	`osù_£t_å™•‹t_îr‹_ˇŒback
(
osù
, 
OSIP_NICT_TRANSPORT_ERROR
, &
cb_å™•‹t_îr‹
);

1825 
	`osù_£t_å™•‹t_îr‹_ˇŒback
(
osù
, 
OSIP_NIST_TRANSPORT_ERROR
, &
cb_å™•‹t_îr‹
);

1827 #i‚de‡
MINISIZE


1829 
	`osù_£t_mesßge_ˇŒback
(
osù
, 
OSIP_ICT_STATUS_2XX_RECEIVED_AGAIN
, &
cb_rcvª•_ªå™smissi⁄
);

1830 
	`osù_£t_mesßge_ˇŒback
(
osù
, 
OSIP_ICT_STATUS_3456XX_RECEIVED_AGAIN
, &
cb_rcvª•_ªå™smissi⁄
);

1831 
	`osù_£t_mesßge_ˇŒback
(
osù
, 
OSIP_ICT_INVITE_SENT_AGAIN
, &
cb_¢dªq_ªå™smissi⁄
);

1832 
	`osù_£t_mesßge_ˇŒback
(
osù
, 
OSIP_IST_STATUS_2XX_SENT_AGAIN
, &
cb_¢dª•_ªå™smissi⁄
);

1833 
	`osù_£t_mesßge_ˇŒback
(
osù
, 
OSIP_IST_STATUS_3456XX_SENT_AGAIN
, &
cb_¢dª•_ªå™smissi⁄
);

1834 
	`osù_£t_mesßge_ˇŒback
(
osù
, 
OSIP_IST_INVITE_RECEIVED_AGAIN
, &
cb_rcvªq_ªå™smissi⁄
);

1835 
	`osù_£t_mesßge_ˇŒback
(
osù
, 
OSIP_NICT_STATUS_2XX_RECEIVED_AGAIN
, &
cb_rcvª•_ªå™smissi⁄
);

1836 
	`osù_£t_mesßge_ˇŒback
(
osù
, 
OSIP_NICT_STATUS_3456XX_RECEIVED_AGAIN
, &
cb_rcvª•_ªå™smissi⁄
);

1837 
	`osù_£t_mesßge_ˇŒback
(
osù
, 
OSIP_NICT_REQUEST_SENT_AGAIN
, &
cb_¢dªq_ªå™smissi⁄
);

1838 
	`osù_£t_mesßge_ˇŒback
(
osù
, 
OSIP_NIST_STATUS_2XX_SENT_AGAIN
, &
cb_¢dª•_ªå™smissi⁄
);

1839 
	`osù_£t_mesßge_ˇŒback
(
osù
, 
OSIP_NIST_STATUS_3456XX_SENT_AGAIN
, &
cb_¢dª•_ªå™smissi⁄
);

1840 
	`osù_£t_mesßge_ˇŒback
(
osù
, 
OSIP_NIST_REQUEST_RECEIVED_AGAIN
, &
cb_rcvªq_ªå™smissi⁄
);

1842 
	`osù_£t_mesßge_ˇŒback
(
osù
, 
OSIP_ICT_INVITE_SENT
, &
cb_¢dövôe
);

1843 
	`osù_£t_mesßge_ˇŒback
(
osù
, 
OSIP_ICT_ACK_SENT
, &
cb_¢dack
);

1844 
	`osù_£t_mesßge_ˇŒback
(
osù
, 
OSIP_NICT_REGISTER_SENT
, &
cb_¢dªgi°î
);

1845 
	`osù_£t_mesßge_ˇŒback
(
osù
, 
OSIP_NICT_BYE_SENT
, &
cb_¢dbye
);

1846 
	`osù_£t_mesßge_ˇŒback
(
osù
, 
OSIP_NICT_CANCEL_SENT
, &
cb_¢dˇn˚l
);

1847 
	`osù_£t_mesßge_ˇŒback
(
osù
, 
OSIP_NICT_INFO_SENT
, &
cb_¢döfo
);

1848 
	`osù_£t_mesßge_ˇŒback
(
osù
, 
OSIP_NICT_OPTIONS_SENT
, &
cb_¢d›ti⁄s
);

1849 
	`osù_£t_mesßge_ˇŒback
(
osù
, 
OSIP_NICT_SUBSCRIBE_SENT
, &
cb_¢dsubs¸ibe
);

1850 
	`osù_£t_mesßge_ˇŒback
(
osù
, 
OSIP_NICT_NOTIFY_SENT
, &
cb_¢dnŸify
);

1851 
	`osù_£t_mesßge_ˇŒback
(
osù
, 
OSIP_NICT_UNKNOWN_REQUEST_SENT
, &
cb_¢dunkªque°
);

1853 
	`osù_£t_mesßge_ˇŒback
(
osù
, 
OSIP_IST_INVITE_RECEIVED
, &
cb_rcvövôe
);

1854 
	`osù_£t_mesßge_ˇŒback
(
osù
, 
OSIP_IST_ACK_RECEIVED
, &
cb_rcvack
);

1855 
	`osù_£t_mesßge_ˇŒback
(
osù
, 
OSIP_IST_ACK_RECEIVED_AGAIN
, &
cb_rcvack2
);

1857  
OSIP_SUCCESS
;

1858 
	}
}

	@/home/unasaw/sip_project/libexosip2-5.3.0/src/jdialog.c

33 
	~"eXosù2.h
"

35 
	$_eXosù_ˇŒ_dülog_föd
(
eXosù_t
 *
exc⁄ãxt
, 
jid
, 
eXosù_ˇŒ_t
 **
jc
, 
eXosù_dülog_t
 **
jd
) {

36 i‡(
jid
 <= 0)

37  
OSIP_BADPARAMETER
;

39 *
jc
 = 
exc⁄ãxt
->
j_ˇŒs
; *j¯!
NULL
; *j¯(*jc)->
√xt
) {

40 *
jd
 = (*
jc
)->
c_dülogs
; *jd !
NULL
; *jd = (*jd)->
√xt
) {

41 i‡((*
jd
)->
d_id
 =
jid
)

42  
OSIP_SUCCESS
;

46 *
jd
 = 
NULL
;

47 *
jc
 = 
NULL
;

48  
OSIP_NOTFOUND
;

49 
	}
}

51 #i‚de‡
MINISIZE


53 
	$_eXosù_nŸify_dülog_föd
(
eXosù_t
 *
exc⁄ãxt
, 
nid
, 
eXosù_nŸify_t
 **
jn
, 
eXosù_dülog_t
 **
jd
) {

54 i‡(
nid
 <= 0)

55  
OSIP_BADPARAMETER
;

57 *
jn
 = 
exc⁄ãxt
->
j_nŸifõs
; *j¿!
NULL
; *j¿(*jn)->
√xt
) {

58 *
jd
 = (*
jn
)->
n_dülogs
; *jd !
NULL
; *jd = (*jd)->
√xt
) {

59 i‡((*
jd
)->
d_id
 =
nid
)

60  
OSIP_SUCCESS
;

64 *
jd
 = 
NULL
;

65 *
jn
 = 
NULL
;

66  
OSIP_NOTFOUND
;

67 
	}
}

69 
	$_eXosù_subs¸ùti⁄_dülog_föd
(
eXosù_t
 *
exc⁄ãxt
, 
sid
, 
eXosù_subs¸ibe_t
 **
js
, 
eXosù_dülog_t
 **
jd
) {

70 i‡(
sid
 <= 0)

71  
OSIP_BADPARAMETER
;

73 *
js
 = 
exc⁄ãxt
->
j_subs¸ibes
; *j†!
NULL
; *j†(*js)->
√xt
) {

74 *
jd
 = 
NULL
;

76 i‡((*
js
)->
s_id
 =
sid
)

77  
OSIP_SUCCESS
;

79 *
jd
 = (*
js
)->
s_dülogs
; *jd !
NULL
; *jd = (*jd)->
√xt
) {

80 i‡((*
jd
)->
d_id
 =
sid
)

81  
OSIP_SUCCESS
;

85 *
jd
 = 
NULL
;

86 *
js
 = 
NULL
;

87  
OSIP_NOTFOUND
;

88 
	}
}

92 
	$_eXosù_dülog_£t_200ok
(
eXosù_dülog_t
 *
jd
, 
osù_mesßge_t
 *
_200Ok
) {

93 
i
;

95 i‡(
jd
 =
NULL
)

96  
OSIP_BADPARAMETER
;

98 i‡(
jd
->
d_200Ok
 !
NULL
)

99 
	`osù_mesßge_‰ì
(
jd
->
d_200Ok
);

101 
jd
->
d_timî
 = 
	`osù_gësy°emtime
(
NULL
) + 1;

102 
jd
->
d_cou¡
 = 0;

103 
i
 = 
	`osù_mesßge_˛⁄e
(
_200Ok
, &(
jd
->
d_200Ok
));

105 i‡(
i
 != 0)

106  
i
;

108  
OSIP_SUCCESS
;

109 
	}
}

111 
	$_eXosù_dülog_öô_as_uac
(
eXosù_dülog_t
 **
_jd
, 
osù_mesßge_t
 *
_200Ok
) {

112 
i
;

113 
eXosù_dülog_t
 *
jd
;

115 *
_jd
 = 
NULL
;

116 
jd
 = (
eXosù_dülog_t
 *Ë
	`osù_mÆloc
((eXosip_dialog_t));

118 i‡(
jd
 =
NULL
)

119  
OSIP_NOMEM
;

121 
	`mem£t
(
jd
, 0, (
eXosù_dülog_t
));

123 
jd
->
d_id
 = -1;

125 i‡(
	`MSG_IS_REQUEST
(
_200Ok
)) {

126 
i
 = 
	`osù_dülog_öô_as_uac_wôh_ªmŸe_ªque°
(&(
jd
->
d_dülog
), 
_200Ok
, -1);

129 
i
 = 
	`osù_dülog_öô_as_uac
(&(
jd
->
d_dülog
), 
_200Ok
);

132 i‡(
i
 != 0) {

133 
	`osù_‰ì
(
jd
);

134  
i
;

137 
jd
->
d_cou¡
 = 0;

138 
jd
->
d_£ssi⁄_timî_°¨t
 = 0;

139 
jd
->
d_£ssi⁄_timî_Àngth
 = 0;

140 
jd
->
d_ª‰eshî
 = -1;

141 
jd
->
d_timî
 = 
	`osù_gësy°emtime
(
NULL
);

142 
jd
->
d_200Ok
 = 
NULL
;

143 
jd
->
d_ack
 = 
NULL
;

144 
jd
->
√xt
 = 
NULL
;

145 
jd
->
∑ª¡
 = 
NULL
;

146 
jd
->
d_out_ås
 = (
osù_li°_t
 *Ë
	`osù_mÆloc
((osip_list_t));

148 i‡(
jd
->
d_out_ås
 =
NULL
) {

149 
	`osù_dülog_‰ì
(
jd
->
d_dülog
);

150 
	`osù_‰ì
(
jd
);

151  
OSIP_NOMEM
;

154 
	`osù_li°_öô
(
jd
->
d_out_ås
);

155 
jd
->
d_öc_ås
 = (
osù_li°_t
 *Ë
	`osù_mÆloc
((osip_list_t));

157 i‡(
jd
->
d_öc_ås
 =
NULL
) {

158 
	`osù_dülog_‰ì
(
jd
->
d_dülog
);

159 
	`osù_‰ì
(
jd
->
d_out_ås
);

160 
	`osù_‰ì
(
jd
);

161  
OSIP_NOMEM
;

164 
	`osù_li°_öô
(
jd
->
d_öc_ås
);

166 
jd
->
im∂icô_subs¸ùti⁄_expúe_time
 = 0;

168 *
_jd
 = 
jd
;

169  
OSIP_SUCCESS
;

170 
	}
}

172 
	$_eXosù_dülog_öô_as_uas
(
eXosù_dülog_t
 **
_jd
, 
osù_mesßge_t
 *
_övôe
, osù_mesßge_à*
_200Ok
) {

173 
i
;

174 
eXosù_dülog_t
 *
jd
;

176 *
_jd
 = 
NULL
;

177 
jd
 = (
eXosù_dülog_t
 *Ë
	`osù_mÆloc
((eXosip_dialog_t));

179 i‡(
jd
 =
NULL
)

180  
OSIP_NOMEM
;

182 
	`mem£t
(
jd
, 0, (
eXosù_dülog_t
));

183 
jd
->
d_id
 = -1;

184 
i
 = 
	`osù_dülog_öô_as_uas
(&(
jd
->
d_dülog
), 
_övôe
, 
_200Ok
);

186 i‡(
i
 != 0) {

187 
	`osù_‰ì
(
jd
);

188  
i
;

191 
jd
->
d_cou¡
 = 0;

192 
jd
->
d_£ssi⁄_timî_°¨t
 = 0;

193 
jd
->
d_£ssi⁄_timî_Àngth
 = 0;

194 
jd
->
d_£ssi⁄_timî_u£_upd©e
 = -1;

195 
jd
->
d_ª‰eshî
 = -1;

196 
jd
->
d_timî
 = 
	`osù_gësy°emtime
(
NULL
);

197 
jd
->
d_200Ok
 = 
NULL
;

198 
jd
->
d_ack
 = 
NULL
;

199 
jd
->
√xt
 = 
NULL
;

200 
jd
->
∑ª¡
 = 
NULL
;

201 
jd
->
d_out_ås
 = (
osù_li°_t
 *Ë
	`osù_mÆloc
((osip_list_t));

203 i‡(
jd
->
d_out_ås
 =
NULL
) {

204 
	`osù_dülog_‰ì
(
jd
->
d_dülog
);

205 
	`osù_‰ì
(
jd
);

206  
OSIP_NOMEM
;

209 
	`osù_li°_öô
(
jd
->
d_out_ås
);

210 
jd
->
d_öc_ås
 = (
osù_li°_t
 *Ë
	`osù_mÆloc
((osip_list_t));

212 i‡(
jd
->
d_öc_ås
 =
NULL
) {

213 
	`osù_dülog_‰ì
(
jd
->
d_dülog
);

214 
	`osù_‰ì
(
jd
->
d_out_ås
);

215 
	`osù_‰ì
(
jd
);

216  
OSIP_NOMEM
;

219 
	`osù_li°_öô
(
jd
->
d_öc_ås
);

221 
jd
->
d_dülog
->
loˇl_c£q
 = 1;

223 
jd
->
im∂icô_subs¸ùti⁄_expúe_time
 = 0;

225 *
_jd
 = 
jd
;

226  
OSIP_SUCCESS
;

227 
	}
}

229 
	$_eXosù_dülog_‰ì
(
eXosù_t
 *
exc⁄ãxt
, 
eXosù_dülog_t
 *
jd
) {

230 !
	`osù_li°_eﬁ
(
jd
->
d_öc_ås
, 0)) {

231 
osù_å™ß˘i⁄_t
 *
å
;

233 
å
 = (
osù_å™ß˘i⁄_t
 *Ë
	`osù_li°_gë
(
jd
->
d_öc_ås
, 0);

234 
	`osù_li°_ªmove
(
jd
->
d_öc_ås
, 0);

235 
	`_eXosù_dñëe_ª£rved
(
å
);

236 
	`osù_li°_add
(&
exc⁄ãxt
->
j_å™ß˘i⁄s
, 
å
, 0);

239 !
	`osù_li°_eﬁ
(
jd
->
d_out_ås
, 0)) {

240 
osù_å™ß˘i⁄_t
 *
å
;

242 
å
 = (
osù_å™ß˘i⁄_t
 *Ë
	`osù_li°_gë
(
jd
->
d_out_ås
, 0);

243 
	`osù_li°_ªmove
(
jd
->
d_out_ås
, 0);

244 
	`_eXosù_dñëe_ª£rved
(
å
);

245 
	`osù_li°_add
(&
exc⁄ãxt
->
j_å™ß˘i⁄s
, 
å
, 0);

248 
	`osù_mesßge_‰ì
(
jd
->
d_200Ok
);

249 
	`osù_mesßge_‰ì
(
jd
->
d_ack
);

251 
	`osù_dülog_‰ì
(
jd
->
d_dülog
);

253 
	`osù_‰ì
(
jd
->
d_out_ås
);

254 
	`osù_‰ì
(
jd
->
d_öc_ås
);

255 
	`osù_‰ì
(
jd
);

257 
	`_eXosù_upd©e
(
exc⁄ãxt
);

258 
	}
}

	@/home/unasaw/sip_project/libexosip2-5.3.0/src/jevents.c

33 
	~"eXosù2.h
"

34 
	~<eXosù2/eXosù.h
>

35 
	~<osù2/osù_c⁄dv.h
>

37 
_eXosù_evít_fûl_mesßges
(
eXosù_evít_t
 *
je
, 
osù_å™ß˘i⁄_t
 *
å
);

39 
	$_eXosù_evít_fûl_mesßges
(
eXosù_evít_t
 *
je
, 
osù_å™ß˘i⁄_t
 *
å
) {

40 
i
;

42 i‡(
å
 !
NULL
 &&År->
‹ig_ªque°
 != NULL) {

43 
i
 = 
	`osù_mesßge_˛⁄e
(
å
->
‹ig_ªque°
, &
je
->
ªque°
);

45 i‡(
i
 != 0) {

46 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] failedÅo cloneÑequest forÉvent\n"));

50 i‡(
å
 !
NULL
 &&År->
œ°_ª•⁄£
 != NULL) {

51 
i
 = 
	`osù_mesßge_˛⁄e
(
å
->
œ°_ª•⁄£
, &
je
->
ª•⁄£
);

53 i‡(
i
 != 0) {

54 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] failedÅo cloneÑesponse forÉvent\n"));

58 i‡(
å
 !
NULL
 &&År->
ack
 != NULL) {

59 
i
 = 
	`osù_mesßge_˛⁄e
(
å
->
ack
, &
je
->ack);

61 i‡(
i
 != 0) {

62 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] failedÅo clone ACK forÉvent\n"));

66  
OSIP_SUCCESS
;

67 
	}
}

69 
eXosù_evít_t
 *
	$_eXosù_evít_öô_f‹_ˇŒ
(
ty≥
, 
eXosù_ˇŒ_t
 *
jc
, 
eXosù_dülog_t
 *
jd
, 
osù_å™ß˘i⁄_t
 *
å
) {

70 
eXosù_evít_t
 *
je
;

72 i‡(
jc
 =
NULL
)

73  
NULL
;

75 
	`_eXosù_evít_öô
(&
je
, 
ty≥
);

77 i‡(
je
 =
NULL
)

78  
NULL
;

80 
je
->
cid
 = 
jc
->
c_id
;

82 i‡(
jd
 !
NULL
)

83 
je
->
did
 = 
jd
->
d_id
;

85 i‡(
å
 !
NULL
)

86 
je
->
tid
 = 
å
->
å™ß˘i⁄id
;

88 
je
->
exã∫Æ_ª„ªn˚
 = 
jc
->external_reference;

90 
	`_eXosù_evít_fûl_mesßges
(
je
, 
å
);

91  
je
;

92 
	}
}

94 #i‚de‡
MINISIZE


96 
eXosù_evít_t
 *
	$_eXosù_evít_öô_f‹_subs¸ùti⁄
(
ty≥
, 
eXosù_subs¸ibe_t
 *
js
, 
eXosù_dülog_t
 *
jd
, 
osù_å™ß˘i⁄_t
 *
å
) {

97 
eXosù_evít_t
 *
je
;

99 i‡(
js
 =
NULL
)

100  
NULL
;

102 
	`_eXosù_evít_öô
(&
je
, 
ty≥
);

104 i‡(
je
 =
NULL
)

105  
NULL
;

107 
je
->
sid
 = 
js
->
s_id
;

109 i‡(
jd
 !
NULL
)

110 
je
->
did
 = 
jd
->
d_id
;

112 i‡(
å
 !
NULL
)

113 
je
->
tid
 = 
å
->
å™ß˘i⁄id
;

115 
je
->
ss_°©us
 = 
js
->
s_ss_°©us
;

116 
je
->
ss_ªas⁄
 = 
js
->
s_ss_ªas⁄
;

120 
	`_eXosù_evít_fûl_mesßges
(
je
, 
å
);

122  
je
;

123 
	}
}

125 
eXosù_evít_t
 *
	$_eXosù_evít_öô_f‹_nŸify
(
ty≥
, 
eXosù_nŸify_t
 *
jn
, 
eXosù_dülog_t
 *
jd
, 
osù_å™ß˘i⁄_t
 *
å
) {

126 
eXosù_evít_t
 *
je
;

128 i‡(
jn
 =
NULL
)

129  
NULL
;

131 
	`_eXosù_evít_öô
(&
je
, 
ty≥
);

133 i‡(
je
 =
NULL
)

134  
NULL
;

136 
je
->
nid
 = 
jn
->
n_id
;

138 i‡(
jd
 !
NULL
)

139 
je
->
did
 = 
jd
->
d_id
;

141 i‡(
å
 !
NULL
)

142 
je
->
tid
 = 
å
->
å™ß˘i⁄id
;

144 
je
->
ss_°©us
 = 
jn
->
n_ss_°©us
;

145 
je
->
ss_ªas⁄
 = 
jn
->
n_ss_ªas⁄
;

149 
	`_eXosù_evít_fûl_mesßges
(
je
, 
å
);

151  
je
;

152 
	}
}

156 
eXosù_evít_t
 *
	$_eXosù_evít_öô_f‹_ªg
(
ty≥
, 
eXosù_ªg_t
 *
jr
, 
osù_å™ß˘i⁄_t
 *
å
) {

157 
eXosù_evít_t
 *
je
;

159 i‡(
jr
 =
NULL
)

160  
NULL
;

162 
	`_eXosù_evít_öô
(&
je
, 
ty≥
);

164 i‡(
je
 =
NULL
)

165  
NULL
;

167 
je
->
rid
 = 
jr
->
r_id
;

169 
	`_eXosù_evít_fûl_mesßges
(
je
, 
å
);

170  
je
;

171 
	}
}

173 
eXosù_evít_t
 *
	$_eXosù_evít_öô_f‹_mesßge
(
ty≥
, 
osù_å™ß˘i⁄_t
 *
å
) {

174 
eXosù_evít_t
 *
je
;

176 
	`_eXosù_evít_öô
(&
je
, 
ty≥
);

178 i‡(
je
 =
NULL
)

179  
NULL
;

181 i‡(
å
 !
NULL
)

182 
je
->
tid
 = 
å
->
å™ß˘i⁄id
;

184 
	`_eXosù_evít_fûl_mesßges
(
je
, 
å
);

186  
je
;

187 
	}
}

189 
	$_eXosù_evít_öô
(
eXosù_evít_t
 **
je
, 
ty≥
) {

190 *
je
 = (
eXosù_evít_t
 *Ë
	`osù_mÆloc
((eXosip_event_t));

192 i‡(*
je
 =
NULL
)

193  
OSIP_NOMEM
;

195 
	`mem£t
(*
je
, 0, (
eXosù_evít_t
));

196 (*
je
)->
ty≥
 =Åype;

198 #i‡!
	`deföed
(
_WIN32_WCE
)

200 i‡(
ty≥
 =
EXOSIP_CALL_NOANSWER
) {

201 
	`•rötf
((*
je
)->
ãxtöfo
, "Noánswer forÅhis Call!");

203 } i‡(
ty≥
 =
EXOSIP_CALL_PROCEEDING
) {

204 
	`•rötf
((*
je
)->
ãxtöfo
, "Call is beingÖrocessed!");

206 } i‡(
ty≥
 =
EXOSIP_CALL_RINGING
) {

207 
	`•rötf
((*
je
)->
ãxtöfo
, "RemoteÖhone isÑinging!");

209 } i‡(
ty≥
 =
EXOSIP_CALL_ANSWERED
) {

210 
	`•rötf
((*
je
)->
ãxtöfo
, "RemoteÖhone hasánswered!");

212 } i‡(
ty≥
 =
EXOSIP_CALL_REDIRECTED
) {

213 
	`•rötf
((*
je
)->
ãxtöfo
, "Call isÑedirected!");

215 } i‡(
ty≥
 =
EXOSIP_CALL_REQUESTFAILURE
) {

216 
	`•rötf
((*
je
)->
ãxtöfo
, "4xxÑeceived for Call!");

218 } i‡(
ty≥
 =
EXOSIP_CALL_SERVERFAILURE
) {

219 
	`•rötf
((*
je
)->
ãxtöfo
, "5xxÑeceived for Call!");

221 } i‡(
ty≥
 =
EXOSIP_CALL_GLOBALFAILURE
) {

222 
	`•rötf
((*
je
)->
ãxtöfo
, "6xxÑeceived for Call!");

224 } i‡(
ty≥
 =
EXOSIP_CALL_INVITE
) {

225 
	`•rötf
((*
je
)->
ãxtöfo
, "New callÑeceived!");

227 } i‡(
ty≥
 =
EXOSIP_CALL_ACK
) {

228 
	`•rötf
((*
je
)->
ãxtöfo
, "ACKÑeceived!");

230 } i‡(
ty≥
 =
EXOSIP_CALL_CANCELLED
) {

231 
	`•rötf
((*
je
)->
ãxtöfo
, "Call has been cancelled!");

233 } i‡(
ty≥
 =
EXOSIP_CALL_REINVITE
) {

234 
	`•rötf
((*
je
)->
ãxtöfo
, "INVITE within callÑeceived!");

236 } i‡(
ty≥
 =
EXOSIP_CALL_CLOSED
) {

237 
	`•rötf
((*
je
)->
ãxtöfo
, "Bye Received!");

239 } i‡(
ty≥
 =
EXOSIP_CALL_RELEASED
) {

240 
	`•rötf
((*
je
)->
ãxtöfo
, "Call Context isÑeleased!");

242 } i‡(
ty≥
 =
EXOSIP_REGISTRATION_SUCCESS
) {

243 
	`•rötf
((*
je
)->
ãxtöfo
, "User is successfullyÑegistred!");

245 } i‡(
ty≥
 =
EXOSIP_REGISTRATION_FAILURE
) {

246 
	`•rötf
((*
je
)->
ãxtöfo
, "Registration failed!");

248 } i‡(
ty≥
 =
EXOSIP_CALL_MESSAGE_NEW
) {

249 
	`•rötf
((*
je
)->
ãxtöfo
, "NewÑequestÑeceived!");

251 } i‡(
ty≥
 =
EXOSIP_CALL_MESSAGE_PROCEEDING
) {

252 
	`•rötf
((*
je
)->
ãxtöfo
, "request is beingÖrocessed!");

254 } i‡(
ty≥
 =
EXOSIP_CALL_MESSAGE_ANSWERED
) {

255 
	`•rötf
((*
je
)->
ãxtöfo
, "2xxÑeceived forÑequest!");

257 } i‡(
ty≥
 =
EXOSIP_CALL_MESSAGE_REDIRECTED
) {

258 
	`•rötf
((*
je
)->
ãxtöfo
, "3xxÑeceived forÑequest!");

260 } i‡(
ty≥
 =
EXOSIP_CALL_MESSAGE_REQUESTFAILURE
) {

261 
	`•rötf
((*
je
)->
ãxtöfo
, "4xxÑeceived forÑequest!");

263 } i‡(
ty≥
 =
EXOSIP_CALL_MESSAGE_SERVERFAILURE
) {

264 
	`•rötf
((*
je
)->
ãxtöfo
, "5xxÑeceived forÑequest!");

266 } i‡(
ty≥
 =
EXOSIP_CALL_MESSAGE_GLOBALFAILURE
) {

267 
	`•rötf
((*
je
)->
ãxtöfo
, "5xxÑeceived forÑequest!");

269 } i‡(
ty≥
 =
EXOSIP_MESSAGE_NEW
) {

270 
	`•rötf
((*
je
)->
ãxtöfo
, "NewÑequest outside callÑeceived!");

272 } i‡(
ty≥
 =
EXOSIP_MESSAGE_PROCEEDING
) {

273 
	`•rötf
((*
je
)->
ãxtöfo
, "request outside call is beingÖrocessed!");

275 } i‡(
ty≥
 =
EXOSIP_MESSAGE_ANSWERED
) {

276 
	`•rötf
((*
je
)->
ãxtöfo
, "2xxÑeceived forÑequest outside call!");

278 } i‡(
ty≥
 =
EXOSIP_MESSAGE_REDIRECTED
) {

279 
	`•rötf
((*
je
)->
ãxtöfo
, "3xxÑeceived forÑequest outside call!");

281 } i‡(
ty≥
 =
EXOSIP_MESSAGE_REQUESTFAILURE
) {

282 
	`•rötf
((*
je
)->
ãxtöfo
, "4xxÑeceived forÑequest outside call!");

284 } i‡(
ty≥
 =
EXOSIP_MESSAGE_SERVERFAILURE
) {

285 
	`•rötf
((*
je
)->
ãxtöfo
, "5xxÑeceived forÑequest outside call!");

287 } i‡(
ty≥
 =
EXOSIP_MESSAGE_GLOBALFAILURE
) {

288 
	`•rötf
((*
je
)->
ãxtöfo
, "5xxÑeceived forÑequest outside call!");

290 } i‡(
ty≥
 =
EXOSIP_SUBSCRIPTION_NOANSWER
) {

291 
	`•rötf
((*
je
)->
ãxtöfo
, "Noánswer forÅhis SUBSCRIBE!");

293 } i‡(
ty≥
 =
EXOSIP_SUBSCRIPTION_PROCEEDING
) {

294 
	`•rötf
((*
je
)->
ãxtöfo
, "SUBSCRIBE is beingÖrocessed!");

296 } i‡(
ty≥
 =
EXOSIP_SUBSCRIPTION_ANSWERED
) {

297 
	`•rötf
((*
je
)->
ãxtöfo
, "2xxÑeceived for SUBSCRIBE!");

299 } i‡(
ty≥
 =
EXOSIP_SUBSCRIPTION_REDIRECTED
) {

300 
	`•rötf
((*
je
)->
ãxtöfo
, "3xxÑeceived for SUBSCRIBE!");

302 } i‡(
ty≥
 =
EXOSIP_SUBSCRIPTION_REQUESTFAILURE
) {

303 
	`•rötf
((*
je
)->
ãxtöfo
, "4xxÑeceived for SUBSCRIBE!");

305 } i‡(
ty≥
 =
EXOSIP_SUBSCRIPTION_SERVERFAILURE
) {

306 
	`•rötf
((*
je
)->
ãxtöfo
, "5xxÑeceived for SUBSCRIBE!");

308 } i‡(
ty≥
 =
EXOSIP_SUBSCRIPTION_GLOBALFAILURE
) {

309 
	`•rötf
((*
je
)->
ãxtöfo
, "5xxÑeceived for SUBSCRIBE!");

311 } i‡(
ty≥
 =
EXOSIP_SUBSCRIPTION_NOTIFY
) {

312 
	`•rötf
((*
je
)->
ãxtöfo
, "NOTIFYÑequest for subscription!");

314 } i‡(
ty≥
 =
EXOSIP_IN_SUBSCRIPTION_NEW
) {

315 
	`•rötf
((*
je
)->
ãxtöfo
, "New incoming SUBSCRIBE!");

318 (*
je
)->
ãxtöfo
[0] = '\0';

322  
OSIP_SUCCESS
;

323 
	}
}

325 
	$eXosù_evít_‰ì
(
eXosù_evít_t
 *
je
) {

326 i‡(
je
 =
NULL
)

329 i‡(
je
->
ªque°
 !
NULL
)

330 
	`osù_mesßge_‰ì
(
je
->
ªque°
);

332 i‡(
je
->
ª•⁄£
 !
NULL
)

333 
	`osù_mesßge_‰ì
(
je
->
ª•⁄£
);

335 i‡(
je
->
ack
 !
NULL
)

336 
	`osù_mesßge_‰ì
(
je
->
ack
);

338 
	`osù_‰ì
(
je
);

339 
	}
}

341 
	$_eXosù_ªp‹t_evít
(
eXosù_t
 *
exc⁄ãxt
, 
eXosù_evít_t
 *
je
) {

342 i‡(
je
 !
NULL
) {

343 
	`_eXosù_evít_add
(
exc⁄ãxt
, 
je
);

345 
	}
}

347 
	$_eXosù_ªp‹t_ˇŒ_evít
(
eXosù_t
 *
exc⁄ãxt
, 
evt
, 
eXosù_ˇŒ_t
 *
jc
, 
eXosù_dülog_t
 *
jd
, 
osù_å™ß˘i⁄_t
 *
å
) {

348 
eXosù_evít_t
 *
je
;

350 
je
 = 
	`_eXosù_evít_öô_f‹_ˇŒ
(
evt
, 
jc
, 
jd
, 
å
);

351 
	`_eXosù_ªp‹t_evít
(
exc⁄ãxt
, 
je
);

352 
	}
}

354 
	$_eXosù_evít_add
(
eXosù_t
 *
exc⁄ãxt
, 
eXosù_evít_t
 *
je
) {

355 
i
 = 
	`osù_fifo_add
(
exc⁄ãxt
->
j_evíts
, (*Ë
je
);

357 #i‚de‡
OSIP_MONOTHREAD


358 #i‡!
	`deföed
(
_WIN32_WCE
)

359 
	`osù_c⁄d_sig«l
((
osù_c⁄d
 *Ë
exc⁄ãxt
->
j_c⁄d
);

363 
	`eXosù_wakeup_evít
(
exc⁄ãxt
);

364  
i
;

365 
	}
}

367 #ifde‡
OSIP_MONOTHREAD


369 
eXosù_evít_t
 *
	$eXosù_evít_waô
(
eXosù_t
 *
exc⁄ãxt
, 
tv_s
, 
tv_ms
) {

370 
eXosù_evít_t
 *
je
 = 
NULL
;

372 
je
 = (
eXosù_evít_t
 *Ë
	`osù_fifo_åygë
(
exc⁄ãxt
->
j_evíts
);

374 i‡(
je
 !
NULL
)

375  
je
;

377 
	`eXosù_lock
(
exc⁄ãxt
);

378 
	`_eXosù_ªå™smô_lo°200ok
(
exc⁄ãxt
);

379 
	`eXosù_u∆ock
(
exc⁄ãxt
);

381  
NULL
;

382 
	}
}

386 #ifde‡
HAVE_SYS_EPOLL_H


388 
eXosù_evít_t
 *
	$eXosù_evít_waô_ïﬁl
(
eXosù_t
 *
exc⁄ãxt
, 
tv_s
, 
tv_ms
) {

389 
eXosù_evít_t
 *
je
 = 
NULL
;

390 
ïﬁl_evít
 
ï_¨øy
;

392 
nfds
;

394 
	`eXosù_lock
(
exc⁄ãxt
);

395 
	`_eXosù_ªå™smô_lo°200ok
(
exc⁄ãxt
);

396 
	`eXosù_u∆ock
(
exc⁄ãxt
);

398 i‡(
tv_s
 =0 && 
tv_ms
 == 0)

399  
NULL
;

401 
nfds
 = 
	`ïﬁl_waô
(
exc⁄ãxt
->
ïfd˘l
, &
ï_¨øy
, 1, 
tv_s
 * 1000 + 
tv_ms
);

403 i‡(
nfds
 <= 0)

404  
OSIP_SUCCESS
;

406 i‡(
exc⁄ãxt
->
j_°›_ua
)

407  
NULL
;

409 i‡(
nfds
 > 0) {

410 
buf
[500];

412 
	`jpùe_ªad
(
exc⁄ãxt
->
j_sockë˘l_evít
, 
buf
, 499);

415 
je
 = (
eXosù_evít_t
 *Ë
	`osù_fifo_åygë
(
exc⁄ãxt
->
j_evíts
);

417 i‡(
je
 !
NULL
)

418  
je
;

420  
je
;

421 
	}
}

425 
eXosù_evít_t
 *
	$eXosù_evít_waô
(
eXosù_t
 *
exc⁄ãxt
, 
tv_s
, 
tv_ms
) {

426 
eXosù_evít_t
 *
je
 = 
NULL
;

428 
fd_£t
 
fd£t
;

429 
timevÆ
 
tv
;

430 
max
, 
i
;

432 i‡(
exc⁄ãxt
 =
NULL
) {

433  
NULL
;

436 
je
 = (
eXosù_evít_t
 *Ë
	`osù_fifo_åygë
(
exc⁄ãxt
->
j_evíts
);

438 i‡(
je
 !
NULL
)

439  
je
;

441 #ifde‡
HAVE_SYS_EPOLL_H


443 i‡(
exc⁄ãxt
->
pﬁl_mëhod
 =
EXOSIP_USE_EPOLL_LT
) {

444  
	`eXosù_evít_waô_ïﬁl
(
exc⁄ãxt
, 
tv_s
, 
tv_ms
);

449 
	`FD_ZERO
(&
fd£t
);

450 
	`eXFD_SET
(
	`jpùe_gë_ªad_des¸
(
exc⁄ãxt
->
j_sockë˘l_evít
), &
fd£t
);

451 
max
 = 
	`jpùe_gë_ªad_des¸
(
exc⁄ãxt
->
j_sockë˘l_evít
);

453 
tv
.
tv_£c
 = 0;

454 
tv
.
tv_u£c
 = 0;

455 
i
 = 
	`£À˘
(
max
 + 1, &
fd£t
, 
NULL
, NULL, &
tv
);

457 i‡(
	`FD_ISSET
(
	`jpùe_gë_ªad_des¸
(
exc⁄ãxt
->
j_sockë˘l_evít
), &
fd£t
)) {

458 
buf
[500];

460 
	`jpùe_ªad
(
exc⁄ãxt
->
j_sockë˘l_evít
, 
buf
, 499);

463 
	`eXosù_lock
(
exc⁄ãxt
);

464 
	`_eXosù_ªå™smô_lo°200ok
(
exc⁄ãxt
);

465 
	`eXosù_u∆ock
(
exc⁄ãxt
);

467 
	`FD_ZERO
(&
fd£t
);

468 
	`eXFD_SET
(
	`jpùe_gë_ªad_des¸
(
exc⁄ãxt
->
j_sockë˘l_evít
), &
fd£t
);

469 
tv
.
tv_£c
 = 
tv_s
;

470 
tv
.
tv_u£c
 = 
tv_ms
 * 1000;

472 i‡(
tv_s
 =0 && 
tv_ms
 == 0)

473  
NULL
;

475 
i
 = 
	`£À˘
(
max
 + 1, &
fd£t
, 
NULL
, NULL, &
tv
);

477 i‡(
i
 <= 0)

478  
OSIP_SUCCESS
;

480 i‡(
exc⁄ãxt
->
j_°›_ua
)

481  
NULL
;

483 i‡(
	`FD_ISSET
(
	`jpùe_gë_ªad_des¸
(
exc⁄ãxt
->
j_sockë˘l_evít
), &
fd£t
)) {

484 
buf
[500];

486 
	`jpùe_ªad
(
exc⁄ãxt
->
j_sockë˘l_evít
, 
buf
, 499);

489 
je
 = (
eXosù_evít_t
 *Ë
	`osù_fifo_åygë
(
exc⁄ãxt
->
j_evíts
);

491 i‡(
je
 !
NULL
)

492  
je
;

494  
je
;

495 
	}
}

497 
	$eXosù_evít_gëevítsockë
(
eXosù_t
 *
exc⁄ãxt
) {

498  
	`jpùe_gë_ªad_des¸
(
exc⁄ãxt
->
j_sockë˘l_evít
);

499 
	}
}

501 #ifde‡
HAVE_SYS_EPOLL_H


503 
eXosù_evít_t
 *
	$eXosù_evít_gë_ïﬁl
(
eXosù_t
 *
exc⁄ãxt
) {

504 
ïﬁl_evít
 
ï_¨øy
;

506 
nfds
 = 
	`ïﬁl_waô
(
exc⁄ãxt
->
ïfd˘l
, &
ï_¨øy
, 1, 0);

508 i‡(
nfds
 > 0) {

509 
buf
[500];

511 
	`jpùe_ªad
(
exc⁄ãxt
->
j_sockë˘l_evít
, 
buf
, 499);

514  (
eXosù_evít_t
 *Ë
	`osù_fifo_gë
(
exc⁄ãxt
->
j_evíts
);

515 
	}
}

519 
eXosù_evít_t
 *
	$eXosù_evít_gë
(
eXosù_t
 *
exc⁄ãxt
) {

520 
fd_£t
 
fd£t
;

521 
timevÆ
 
tv
;

522 
max
;

524 #ifde‡
HAVE_SYS_EPOLL_H


526 i‡(
exc⁄ãxt
->
pﬁl_mëhod
 =
EXOSIP_USE_EPOLL_LT
) {

527  
	`eXosù_evít_gë_ïﬁl
(
exc⁄ãxt
);

532 
	`FD_ZERO
(&
fd£t
);

533 
	`eXFD_SET
(
	`jpùe_gë_ªad_des¸
(
exc⁄ãxt
->
j_sockë˘l_evít
), &
fd£t
);

534 
max
 = 
	`jpùe_gë_ªad_des¸
(
exc⁄ãxt
->
j_sockë˘l_evít
);

536 
tv
.
tv_£c
 = 0;

537 
tv
.
tv_u£c
 = 0;

538 
	`£À˘
(
max
 + 1, &
fd£t
, 
NULL
, NULL, &
tv
);

540 i‡(
	`FD_ISSET
(
	`jpùe_gë_ªad_des¸
(
exc⁄ãxt
->
j_sockë˘l_evít
), &
fd£t
)) {

541 
buf
[500];

543 
	`jpùe_ªad
(
exc⁄ãxt
->
j_sockë˘l_evít
, 
buf
, 499);

546  (
eXosù_evít_t
 *Ë
	`osù_fifo_gë
(
exc⁄ãxt
->
j_evíts
);

547 
	}
}

	@/home/unasaw/sip_project/libexosip2-5.3.0/src/jnotify.c

33 
	~"eXosù2.h
"

35 #i‚de‡
MINISIZE


37 
osù_å™ß˘i⁄_t
 *
	$_eXosù_föd_œ°_öc_subs¸ibe
(
eXosù_nŸify_t
 *
jn
, 
eXosù_dülog_t
 *
jd
) {

38 
osù_å™ß˘i⁄_t
 *
öc_å
;

40 
öc_å
 = 
NULL
;

42 i‡(
jd
 !
NULL
) {

43 
osù_li°_ôî©‹_t
 
ô
;

45 
öc_å
 = (
osù_å™ß˘i⁄_t
 *Ë
	`osù_li°_gë_fú°
(
jd
->
d_öc_ås
, &
ô
);

47 
öc_å
 !
NULL
) {

48 i‡(0 =
	`°rcmp
(
öc_å
->
c£q
->
mëhod
, "SUBSCRIBE"))

51 i‡(0 =
	`°rcmp
(
öc_å
->
c£q
->
mëhod
, "REFER"))

54 
öc_å
 = (
osù_å™ß˘i⁄_t
 *Ë
	`osù_li°_gë_√xt
(&
ô
);

58 i‡(
öc_å
 =
NULL
)

59  
jn
->
n_öc_å
;

61  
öc_å
;

62 
	}
}

64 
osù_å™ß˘i⁄_t
 *
	$_eXosù_föd_œ°_out_nŸify
(
eXosù_dülog_t
 *
jd
) {

65 
osù_å™ß˘i⁄_t
 *
out_å
;

67 
out_å
 = 
NULL
;

69 i‡(
jd
 !
NULL
) {

70 
osù_li°_ôî©‹_t
 
ô
;

72 
out_å
 = (
osù_å™ß˘i⁄_t
 *Ë
	`osù_li°_gë_fú°
(
jd
->
d_out_ås
, &
ô
);

74 
out_å
 !
OSIP_SUCCESS
) {

75 i‡(0 =
	`°rcmp
(
out_å
->
c£q
->
mëhod
, "NOTIFY"))

76  
out_å
;

78 
out_å
 = (
osù_å™ß˘i⁄_t
 *Ë
	`osù_li°_gë_√xt
(&
ô
);

82  
NULL
;

83 
	}
}

85 
	$_eXosù_nŸify_öô
(
eXosù_t
 *
exc⁄ãxt
, 
eXosù_nŸify_t
 **
jn
, 
osù_mesßge_t
 *
öc_subs¸ibe
) {

86 
osù_c⁄è˘_t
 *
co
;

88 *
jn
 = 
NULL
;

89 
co
 = (
osù_c⁄è˘_t
 *Ë
	`osù_li°_gë
(&
öc_subs¸ibe
->
c⁄è˘s
, 0);

91 i‡(
co
 =
NULL
 || co->
uæ
 == NULL)

94 *
jn
 = (
eXosù_nŸify_t
 *Ë
	`osù_mÆloc
((eXosip_notify_t));

96 i‡(*
jn
 =
NULL
)

97  
OSIP_NOMEM
;

99 
	`mem£t
(*
jn
, 0, (
eXosù_nŸify_t
));

101 #i‚de‡
MINISIZE


103 
timevÆ
 
now
;

105 
exc⁄ãxt
->
°©i°ics
.
Æloˇãd_ösubs¸ùti⁄s
++;

106 
	`osù_gëtimeofday
(&
now
, 
NULL
);

107 
	`_eXosù_cou¡îs_upd©e
(&
exc⁄ãxt
->
avîage_ösubs¸ùti⁄s
, 1, &
now
);

110  
OSIP_SUCCESS
;

111 
	}
}

113 
	$_eXosù_nŸify_‰ì
(
eXosù_t
 *
exc⁄ãxt
, 
eXosù_nŸify_t
 *
jn
) {

116 
eXosù_dülog_t
 *
jd
;

118 i‡(
jn
->
n_öc_å
 !
NULL
 && jn->n_öc_å->
‹ig_ªque°
 !NULL && jn->n_öc_å->‹ig_ªque°->
ˇŒ_id
 !NULL && jn->n_öc_å->‹ig_ªque°->ˇŒ_id->
numbî
 != NULL)

119 
	`_eXosù_dñëe_n⁄˚
(
exc⁄ãxt
, 
jn
->
n_öc_å
->
‹ig_ªque°
->
ˇŒ_id
->
numbî
);

121 i‡(
jn
->
n_out_å
 !
NULL
 && jn->n_out_å->
‹ig_ªque°
 !NULL && jn->n_out_å->‹ig_ªque°->
ˇŒ_id
 !NULL && jn->n_out_å->‹ig_ªque°->ˇŒ_id->
numbî
 != NULL)

122 
	`_eXosù_dñëe_n⁄˚
(
exc⁄ãxt
, 
jn
->
n_out_å
->
‹ig_ªque°
->
ˇŒ_id
->
numbî
);

124 
jd
 = 
jn
->
n_dülogs
; jd !
NULL
; jd = jn->n_dialogs) {

125 
	`REMOVE_ELEMENT
(
jn
->
n_dülogs
, 
jd
);

126 
	`_eXosù_dülog_‰ì
(
exc⁄ãxt
, 
jd
);

129 
	`_eXosù_dñëe_ª£rved
(
jn
->
n_öc_å
);

130 
	`_eXosù_dñëe_ª£rved
(
jn
->
n_out_å
);

132 i‡(
jn
->
n_öc_å
 !
NULL
)

133 
	`osù_li°_add
(&
exc⁄ãxt
->
j_å™ß˘i⁄s
, 
jn
->
n_öc_å
, 0);

135 i‡(
jn
->
n_out_å
 !
NULL
)

136 
	`osù_li°_add
(&
exc⁄ãxt
->
j_å™ß˘i⁄s
, 
jn
->
n_out_å
, 0);

138 
	`osù_‰ì
(
jn
);

140 #i‚de‡
MINISIZE


141 
exc⁄ãxt
->
°©i°ics
.
Æloˇãd_ösubs¸ùti⁄s
--;

143 
	}
}

145 
	$_eXosù_nŸify_£t_ª‰esh_öãrvÆ
(
eXosù_nŸify_t
 *
jn
, 
osù_mesßge_t
 *
öc_subs¸ibe
) {

146 
osù_hódî_t
 *
exp
;

147 
time_t
 
now
;

148 
deÁu…_expúes
 = 600;

150 
now
 = 
	`osù_gësy°emtime
(
NULL
);

152 i‡(
jn
 =
NULL
 || 
öc_subs¸ibe
 == NULL)

155 i‡(
	`MSG_IS_REFER
(
öc_subs¸ibe
))

156 
deÁu…_expúes
 = 120;

158 
	`osù_mesßge_gë_expúes
(
öc_subs¸ibe
, 0, &
exp
);

160 i‡(
exp
 =
NULL
 ||Éxp->
hvÆue
 == NULL)

161 
jn
->
n_ss_expúes
 = 
now
 + 
deÁu…_expúes
;

164 
jn
->
n_ss_expúes
 = 
	`osù_©oi
(
exp
->
hvÆue
);

166 i‡(
jn
->
n_ss_expúes
 != -1)

167 
jn
->
n_ss_expúes
 = 
now
 + jn->n_ss_expires;

170 
jn
->
n_ss_expúes
 = 
now
 + 
deÁu…_expúes
;

173  
OSIP_SUCCESS
;

174 
	}
}

176 
	$_eXosù_nŸify_add_expúes_ö_2XX_f‹_subs¸ibe
(
eXosù_nŸify_t
 *
jn
, 
osù_mesßge_t
 *
™swî
) {

177 
tmp
[20];

178 
time_t
 
now
;

180 
now
 = 
	`osù_gësy°emtime
(
NULL
);

182 i‡(
jn
->
n_ss_expúes
 - 
now
 < 0) {

183 
tmp
[0] = '0';

184 
tmp
[1] = '\0';

187 
	`¢¥ötf
(
tmp
, 20, "%li", (Ë(
jn
->
n_ss_expúes
 - 
now
));

190 
	`osù_mesßge_£t_expúes
(
™swî
, 
tmp
);

191 
	}
}

	@/home/unasaw/sip_project/libexosip2-5.3.0/src/jpipe.c

33 
	~"eXosù2.h
"

35 #i‚de‡
OSIP_MONOTHREAD


37 
	~"jpùe.h
"

39 #ifde‡
HAVE_UNISTD_H


40 
	~<uni°d.h
>

43 #i‡!
deföed
(
WIN32
Ë&& !deföed(
__¨c__
)

45 
	~<f˙é.h
>

47 
jpùe_t
 *
	$jpùe
() {

48 
jpùe_t
 *
my_pùe
 = (jpùe_à*Ë
	`osù_mÆloc
((jpipe_t));

50 i‡(
my_pùe
 =
NULL
)

51  
NULL
;

53 i‡(0 !
	`pùe
(
my_pùe
->
pùes
)) {

54 
	`osù_‰ì
(
my_pùe
);

55  
NULL
;

58 i‡(
	`f˙é
(
my_pùe
->
pùes
[1], 
F_SETFL
, 
O_NONBLOCK
) == -1) {

60 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] cannot set O_NONBLOCKÅoÅheÖipe[1]\n"));

63  
my_pùe
;

64 
	}
}

66 
	$jpùe_˛o£
(
jpùe_t
 *
≠ùe
) {

67 i‡(
≠ùe
 =
NULL
)

68  
OSIP_BADPARAMETER
;

70 
	`_eXosù_˛o£sockë
(
≠ùe
->
pùes
[0]);

71 
	`_eXosù_˛o£sockë
(
≠ùe
->
pùes
[1]);

72 
	`osù_‰ì
(
≠ùe
);

73  
OSIP_SUCCESS
;

74 
	}
}

79 
	$jpùe_wrôe
(
jpùe_t
 *
≠ùe
, c⁄° *
buf
, 
cou¡
) {

80 i‡(
≠ùe
 =
NULL
)

81  
OSIP_BADPARAMETER
;

83  (Ë
	`wrôe
(
≠ùe
->
pùes
[1], 
buf
, 
cou¡
);

84 
	}
}

89 
	$jpùe_ªad
(
jpùe_t
 *
≠ùe
, *
buf
, 
cou¡
) {

90 i‡(
≠ùe
 =
NULL
)

91  
OSIP_BADPARAMETER
;

93  (Ë
	`ªad
(
≠ùe
->
pùes
[0], 
buf
, 
cou¡
);

94 
	}
}

99 
	$jpùe_gë_ªad_des¸
(
jpùe_t
 *
≠ùe
) {

100 i‡(
≠ùe
 =
NULL
)

101  
OSIP_BADPARAMETER
;

103  
≠ùe
->
pùes
[0];

104 
	}
}

108 
	$£tN⁄Blockög
(
SOCKET_TYPE
 
fd
) {

109 
Êags
;

112 #i‡
	`deföed
(
O_NONBLOCK
)

115 i‡(-1 =(
Êags
 = 
	`f˙é
(
fd
, 
F_GETFL
, 0)))

116 
Êags
 = 0;

118  
	`f˙é
(
fd
, 
F_SETFL
, 
Êags
 | 
O_NONBLOCK
);

121 
Êags
 = 1;

122  
	`io˘lsockë
(
fd
, 
FIONBIO
, &
Êags
);

124 
	}
}

126 
jpùe_t
 *
	$jpùe
() {

127 
s
 = 0;

128 
timeout
 = 0;

129 
sockaddr_ö
 
øddr
;

130 
j
;

131 
sockÀn_t
 
Àn
;

133 
jpùe_t
 *
my_pùe
 = (jpùe_à*Ë
	`osù_mÆloc
((jpipe_t));

135 i‡(
my_pùe
 =
NULL
)

136  
NULL
;

138 
s
 = (Ë
	`sockë
(
AF_INET
, 
SOCK_STREAM
, 
IPPROTO_TCP
);

140 i‡(
s
 < 0) {

141 
	`osù_‰ì
(
my_pùe
);

142  
NULL
;

145 
my_pùe
->
pùes
[1] = (Ë
	`sockë
(
PF_INET
, 
SOCK_STREAM
, 
IPPROTO_TCP
);

147 i‡(
my_pùe
->
pùes
[1] < 0) {

148 
	`_eXosù_˛o£sockë
(
s
);

149 
	`osù_‰ì
(
my_pùe
);

150  
NULL
;

153 
øddr
.
sö_addr
.
s_addr
 = 
	`öë_addr
("127.0.0.1");

154 
øddr
.
sö_Ámûy
 = 
AF_INET
;

155 
øddr
.
sö_p‹t
 = 0;

157 i‡(
	`böd
(
s
, (
sockaddr
 *Ë&
øddr
, (raddr)) < 0) {

158 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] failedÅo bindáÜocal socket (port=0),áborting\n"));

159 
	`_eXosù_˛o£sockë
(
s
);

160 
	`_eXosù_˛o£sockë
(
my_pùe
->
pùes
[1]);

161 
	`osù_‰ì
(
my_pùe
);

162  
NULL
;

166 
Àn
 = (
øddr
);

167 
j
 = 
	`gësock«me
(
s
, (
sockaddr
 *Ë&
øddr
, &
Àn
);

169 i‡(
j
 != 0) {

170 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] failedÅo getsockname onáÜocal socket,áborting\n"));

171 
	`_eXosù_˛o£sockë
(
s
);

172 
	`_eXosù_˛o£sockë
(
my_pùe
->
pùes
[1]);

173 
	`osù_‰ì
(
my_pùe
);

174  
NULL
;

177 
j
 = 
	`li°í
(
s
, 1);

179 i‡(
j
 != 0) {

180 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] failedÅoÜisten onáÜocal socket,áborting\n"));

181 
	`_eXosù_˛o£sockë
(
s
);

182 
	`_eXosù_˛o£sockë
(
my_pùe
->
pùes
[1]);

183 
	`osù_‰ì
(
my_pùe
);

184  
NULL
;

187 
j
 = 
	`£tsock›t
(
my_pùe
->
pùes
[1], 
SOL_SOCKET
, 
SO_RCVTIMEO
, (c⁄° *Ë&
timeout
, (timeout));

188 #i‡
	`deföed
(
__¨c__
)

190 i‡(
j
 != 0) {

192 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] cannot set O_NONBLOCKÅoÅhe file desciptor\n"));

193 
	`_eXosù_˛o£sockë
(
s
);

194 
	`_eXosù_˛o£sockë
(
my_pùe
->
pùes
[1]);

195 
	`osù_‰ì
(
my_pùe
);

196  
NULL
;

199 #ñi‡!
	`deföed
(
_WIN32_WCE
)

201 i‡(
j
 !
NO_ERROR
) {

203 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] cannot set O_NONBLOCKÅoÅhe file desciptor\n"));

204 
	`_eXosù_˛o£sockë
(
s
);

205 
	`_eXosù_˛o£sockë
(
my_pùe
->
pùes
[1]);

206 
	`osù_‰ì
(
my_pùe
);

207  
NULL
;

212 
	`c⁄√˘
(
my_pùe
->
pùes
[1], (
sockaddr
 *Ë&
øddr
, (raddr));

214 
my_pùe
->
pùes
[0] = (Ë
	`ac˚±
(
s
, 
NULL
, NULL);

216 i‡(
my_pùe
->
pùes
[0] < 0) {

217 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] failedÅo calláccept\n"));

218 
	`_eXosù_˛o£sockë
(
s
);

219 
	`_eXosù_˛o£sockë
(
my_pùe
->
pùes
[1]);

220 
	`osù_‰ì
(
my_pùe
);

221  
NULL
;

225 
	`£tN⁄Blockög
(
my_pùe
->
pùes
[1]);

227 
	`_eXosù_˛o£sockë
(
s
);

229  
my_pùe
;

230 
	}
}

232 
	$jpùe_˛o£
(
jpùe_t
 *
≠ùe
) {

233 i‡(
≠ùe
 =
NULL
)

234  
OSIP_BADPARAMETER
;

236 
	`_eXosù_˛o£sockë
(
≠ùe
->
pùes
[0]);

237 
	`_eXosù_˛o£sockë
(
≠ùe
->
pùes
[1]);

238 
	`osù_‰ì
(
≠ùe
);

239  
OSIP_SUCCESS
;

240 
	}
}

245 
	$jpùe_wrôe
(
jpùe_t
 *
≠ùe
, c⁄° *
buf
, 
cou¡
) {

246 i‡(
≠ùe
 =
NULL
)

247  
OSIP_BADPARAMETER
;

249  
	`£nd
(
≠ùe
->
pùes
[1], 
buf
, 
cou¡
, 0);

250 
	}
}

255 
	$jpùe_ªad
(
jpùe_t
 *
≠ùe
, *
buf
, 
cou¡
) {

256 i‡(
≠ùe
 =
NULL
)

257  
OSIP_BADPARAMETER
;

259  
	`ªcv
(
≠ùe
->
pùes
[0], 
buf
, 
cou¡
, 0 );

260 
	}
}

265 
	$jpùe_gë_ªad_des¸
(
jpùe_t
 *
≠ùe
) {

266 i‡(
≠ùe
 =
NULL
)

267  
OSIP_BADPARAMETER
;

269  (Ë
≠ùe
->
pùes
[0];

270 
	}
}

	@/home/unasaw/sip_project/libexosip2-5.3.0/src/jpipe.h

33 #i‚de‡
_JPIPE_H_


34 
	#_JPIPE_H_


	)

36 #i‚de‡
OSIP_MONOTHREAD


49 #ifde‡
__˝lu•lus


57 
jpùe_t
 
	tjpùe_t
;

59 
	sjpùe_t
 {

60 
pùes
[2];

66 
jpùe_t
 *
jpùe
();

71 
jpùe_˛o£
(
jpùe_t
 *
≠ùe
);

76 
jpùe_wrôe
(
jpùe_t
 *
pùe
, c⁄° *
buf
, 
cou¡
);

81 
jpùe_ªad
(
jpùe_t
 *
pùe
, *
buf
, 
cou¡
);

86 
jpùe_gë_ªad_des¸
(
jpùe_t
 *
pùe
);

88 #ifde‡
__˝lu•lus


	@/home/unasaw/sip_project/libexosip2-5.3.0/src/jpublish.c

33 
	~"eXosù2.h
"

35 #i‚de‡
MINISIZE


37 
	$_eXosù_pub_upd©e
(
eXosù_t
 *
exc⁄ãxt
, 
eXosù_pub_t
 **
pub
, 
osù_å™ß˘i⁄_t
 *
å
, 
osù_mesßge_t
 *
™swî
) {

38 
eXosù_pub_t
 *
jpub
;

40 *
pub
 = 
NULL
;

42 
jpub
 = 
exc⁄ãxt
->
j_pub
; jpub !
NULL
; jpub = jpub->
√xt
) {

43 i‡(
jpub
->
p_œ°_å
 =
NULL
) {

44 } i‡(
å
 =
jpub
->
p_œ°_å
) {

46 i‡(
™swî
 =
NULL
) {

47 } i‡(
	`MSG_IS_STATUS_2XX
(
™swî
)) {

48 
osù_hódî_t
 *
sù_ëag
 = 
NULL
;

50 
	`osù_mesßge_hódî_gë_by«me
(
™swî
, "SIP-ETag", 0, &
sù_ëag
);

52 i‡(
sù_ëag
 !
NULL
 && sù_ëag->
hvÆue
 != NULL)

53 
	`¢¥ötf
(
jpub
->
p_sù_ëag
, 64, "%s", 
sù_ëag
->
hvÆue
);

56 *
pub
 = 
jpub
;

57  
OSIP_SUCCESS
;

61  
OSIP_NOTFOUND
;

62 
	}
}

64 
	$_eXosù_pub_föd_by_a‹
(
eXosù_t
 *
exc⁄ãxt
, 
eXosù_pub_t
 **
pub
, c⁄° *
a‹
) {

65 
eXosù_pub_t
 *
jpub
;

67 *
pub
 = 
NULL
;

69 
jpub
 = 
exc⁄ãxt
->
j_pub
; jpub !
NULL
; jpub = jpub->
√xt
) {

70 i‡(
	`osù_°rˇ£cmp
(
a‹
, 
jpub
->
p_a‹
) == 0) {

71 *
pub
 = 
jpub
;

72  
OSIP_SUCCESS
;

76  
OSIP_NOTFOUND
;

77 
	}
}

79 
	$_eXosù_pub_föd_by_tid
(
eXosù_t
 *
exc⁄ãxt
, 
eXosù_pub_t
 **
pjp
, 
tid
) {

80 
eXosù_pub_t
 *
pub
 = 
exc⁄ãxt
->
j_pub
;

82 *
pjp
 = 
NULL
;

84 
pub
) {

85 i‡(
pub
->
p_œ°_å
 &&Öub->p_œ°_å->
å™ß˘i⁄id
 =
tid
) {

86 *
pjp
 = 
pub
;

87  
OSIP_SUCCESS
;

90 
pub
 =Öub->
√xt
;

93  
OSIP_NOTFOUND
;

94 
	}
}

96 
	$_eXosù_pub_öô
(
eXosù_t
 *
exc⁄ãxt
, 
eXosù_pub_t
 **
pub
, c⁄° *
a‹
, c⁄° *
exp
) {

97 
p_id
 = 0;

98 
eXosù_pub_t
 *
jpub
;

100 i‡(
p_id
 =
INT_MAX
)

101 
p_id
 = 0;

103 *
pub
 = 
NULL
;

105 
jpub
 = (
eXosù_pub_t
 *Ë
	`osù_mÆloc
((eXosip_pub_t));

107 i‡(
jpub
 == 0)

108  
OSIP_NOMEM
;

110 
	`mem£t
(
jpub
, 0, (
eXosù_pub_t
));

111 
	`¢¥ötf
(
jpub
->
p_a‹
, 256, "%s", 
a‹
);

113 
jpub
->
p_≥riod
 = 
	`©oi
(
exp
);

114 
jpub
->
p_id
 = ++p_id;

116 *
pub
 = 
jpub
;

118 #i‚de‡
MINISIZE


120 
timevÆ
 
now
;

122 
exc⁄ãxt
->
°©i°ics
.
Æloˇãd_publiˇti⁄s
++;

123 
	`osù_gëtimeofday
(&
now
, 
NULL
);

124 
	`_eXosù_cou¡îs_upd©e
(&
exc⁄ãxt
->
avîage_publiˇti⁄s
, 1, &
now
);

127  
OSIP_SUCCESS
;

128 
	}
}

130 
	$_eXosù_pub_‰ì
(
eXosù_t
 *
exc⁄ãxt
, 
eXosù_pub_t
 *
pub
) {

131 i‡(
pub
->
p_œ°_å
 !
NULL
) {

132 i‡(
pub
->
p_œ°_å
 !
NULL
 &&Öub->p_œ°_å->
‹ig_ªque°
 !NULL &&Öub->p_œ°_å->‹ig_ªque°->
ˇŒ_id
 !NULL &&Öub->p_œ°_å->‹ig_ªque°->ˇŒ_id->
numbî
 != NULL)

133 
	`_eXosù_dñëe_n⁄˚
(
exc⁄ãxt
, 
pub
->
p_œ°_å
->
‹ig_ªque°
->
ˇŒ_id
->
numbî
);

135 
	`osù_li°_add
(&
exc⁄ãxt
->
j_å™ß˘i⁄s
, 
pub
->
p_œ°_å
, 0);

138 
	`osù_‰ì
(
pub
);

139 #i‚de‡
MINISIZE


140 
exc⁄ãxt
->
°©i°ics
.
Æloˇãd_publiˇti⁄s
--;

142 
	}
}

	@/home/unasaw/sip_project/libexosip2-5.3.0/src/jreg.c

33 
	~"eXosù2.h
"

35 
	~<osù∑r£r2/osù_md5.h
>

37 
	#MD5HASHLEN
 16

	)

38 
	#MD5HEXLEN
 32

	)

40 
CvtHex
(*
öput_bö¨y
, 
size_t
 
öput_Àn
, *
ouçut_hexa
);

42 
	$_eXosù_ªg_öô
(
eXosù_t
 *
exc⁄ãxt
, 
eXosù_ªg_t
 **
jr
, c⁄° *
‰om
, c⁄° *
¥oxy
, c⁄° *
c⁄è˘
) {

43 
r_id
 = 0;

45 *
jr
 = (
eXosù_ªg_t
 *Ë
	`osù_mÆloc
((eXosip_reg_t));

47 i‡(*
jr
 =
NULL
)

48  
OSIP_NOMEM
;

50 i‡(
r_id
 =
INT_MAX
)

51 
r_id
 = 0;

53 
	`mem£t
(*
jr
, '\0', (
eXosù_ªg_t
));

55 (*
jr
)->
r_id
 = ++r_id;

56 (*
jr
)->
r_ªg_≥riod
 = 3600;

57 (*
jr
)->
r_a‹
 = 
	`osù_°rdup
(
‰om
);

59 i‡((*
jr
)->
r_a‹
 =
NULL
) {

60 
	`osù_‰ì
(*
jr
);

61 *
jr
 = 
NULL
;

62  
OSIP_NOMEM
;

65 (*
jr
)->
r_c⁄è˘
 = 
	`osù_°rdup
(
c⁄è˘
);

66 (*
jr
)->
r_ªgi°ør
 = 
	`osù_°rdup
(
¥oxy
);

68 i‡((*
jr
)->
r_ªgi°ør
 =
NULL
) {

69 
	`osù_‰ì
((*
jr
)->
r_c⁄è˘
);

70 
	`osù_‰ì
((*
jr
)->
r_a‹
);

71 
	`osù_‰ì
(*
jr
);

72 *
jr
 = 
NULL
;

73  
OSIP_NOMEM
;

77 
osù_MD5_CTX
 
Md5Ctx
;

78 
hvÆ
[
MD5HASHLEN
];

79 
key_löe
[
MD5HEXLEN
 + 1];

80 
loˇlù
[128];

81 
fúewÆl_ù
[65];

82 
fúewÆl_p‹t
[10];

83 
somî™dom
[31];

85 
	`mem£t
(
somî™dom
, 0, (somerandom));

86 
	`eXosù_gíî©e_øndom
(
somî™dom
, 16);

88 
	`mem£t
(
loˇlù
, '\0', (localip));

89 
	`mem£t
(
fúewÆl_ù
, '\0', (firewall_ip));

90 
	`mem£t
(
fúewÆl_p‹t
, '\0', (firewall_port));

92 
	`eXosù_guess_loˇlù
(
exc⁄ãxt
, 
AF_INET
, 
loˇlù
, 128);

94 i‡(
exc⁄ãxt
->
eXé_å™•‹t
.
é_gë_masquîade_c⁄è˘
 !
NULL
) {

95 
exc⁄ãxt
->
eXé_å™•‹t
.
	`é_gë_masquîade_c⁄è˘
”xc⁄ãxt, 
fúewÆl_ù
, (fúewÆl_ù), 
fúewÆl_p‹t
, (firewall_port));

98 
	`osù_MD5Inô
(&
Md5Ctx
);

99 
	`osù_MD5Upd©e
(&
Md5Ctx
, (*Ë
‰om
, (Ë
	`°æí
(from));

100 
	`osù_MD5Upd©e
(&
Md5Ctx
, (*) ":", 1);

101 
	`osù_MD5Upd©e
(&
Md5Ctx
, (*Ë
¥oxy
, (Ë
	`°æí
(proxy));

102 
	`osù_MD5Upd©e
(&
Md5Ctx
, (*) ":", 1);

103 
	`osù_MD5Upd©e
(&
Md5Ctx
, (*Ë
loˇlù
, (Ë
	`°æí
(localip));

104 
	`osù_MD5Upd©e
(&
Md5Ctx
, (*) ":", 1);

105 
	`osù_MD5Upd©e
(&
Md5Ctx
, (*Ë
fúewÆl_ù
, (Ë
	`°æí
(firewall_ip));

106 
	`osù_MD5Upd©e
(&
Md5Ctx
, (*) ":", 1);

107 
	`osù_MD5Upd©e
(&
Md5Ctx
, (*Ë
fúewÆl_p‹t
, (Ë
	`°æí
(firewall_port));

112 
	`osù_MD5Upd©e
(&
Md5Ctx
, (*) ":", 1);

113 
	`osù_MD5Upd©e
(&
Md5Ctx
, (*Ë
somî™dom
, (Ë
	`°æí
(somerandom));

115 
	`osù_MD5FöÆ
((*Ë
hvÆ
, &
Md5Ctx
);

116 
	`CvtHex
(
hvÆ
, 
MD5HASHLEN
, 
key_löe
);

118 
	`osù_°∫˝y
((*
jr
)->
r_löe
, 
key_löe
, ((*jr)->r_line) - 1);

121 #i‚de‡
MINISIZE


123 
timevÆ
 
now
;

125 
exc⁄ãxt
->
°©i°ics
.
Æloˇãd_ªgi°øti⁄s
++;

126 
	`osù_gëtimeofday
(&
now
, 
NULL
);

127 
	`_eXosù_cou¡îs_upd©e
(&
exc⁄ãxt
->
avîage_ªgi°øti⁄s
, 1, &
now
);

130  
OSIP_SUCCESS
;

131 
	}
}

133 
	$_eXosù_ªg_‰ì
(
eXosù_t
 *
exc⁄ãxt
, 
eXosù_ªg_t
 *
jªg
) {

134 
	`osù_‰ì
(
jªg
->
r_a‹
);

135 
	`osù_‰ì
(
jªg
->
r_c⁄è˘
);

136 
	`osù_‰ì
(
jªg
->
r_ªgi°ør
);

138 i‡(
jªg
->
r_œ°_å
 !
NULL
) {

139 i‡(
jªg
->
r_œ°_å
 !
NULL
 && jªg->r_œ°_å->
‹ig_ªque°
 !NULL && jªg->r_œ°_å->‹ig_ªque°->
ˇŒ_id
 !NULL && jªg->r_œ°_å->‹ig_ªque°->ˇŒ_id->
numbî
 != NULL)

140 
	`_eXosù_dñëe_n⁄˚
(
exc⁄ãxt
, 
jªg
->
r_œ°_å
->
‹ig_ªque°
->
ˇŒ_id
->
numbî
);

142 i‡(
jªg
->
r_œ°_å
->
°©e
 =
IST_TERMINATED
 || jªg->r_œ°_å->°©ê=
ICT_TERMINATED
 || jªg->r_œ°_å->°©ê=
NICT_TERMINATED
 || jªg->r_œ°_å->°©ê=
NIST_TERMINATED
) {

143 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO1
, 
NULL
, "[eXosù] [tid=%i]Ññó£áÅîmö©edÅønß˘i⁄\n", 
jªg
->
r_œ°_å
->
å™ß˘i⁄id
));

144 
	`_eXosù_dñëe_ª£rved
(
jªg
->
r_œ°_å
);

146 i‡(
jªg
->
r_œ°_å
 !
NULL
)

147 
	`osù_li°_add
(&
exc⁄ãxt
->
j_å™ß˘i⁄s
, 
jªg
->
r_œ°_å
, 0);

150 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO1
, 
NULL
, "[eXosù] [tid=%i]Ññó£áÇ⁄-ãrmö©edÅønß˘i⁄\n", 
jªg
->
r_œ°_å
->
å™ß˘i⁄id
));

151 
	`_eXosù_dñëe_ª£rved
(
jªg
->
r_œ°_å
);

153 i‡(
jªg
->
r_œ°_å
 !
NULL
)

154 
	`osù_li°_add
(&
exc⁄ãxt
->
j_å™ß˘i⁄s
, 
jªg
->
r_œ°_å
, 0);

158 
	`osù_‰ì
(
jªg
);

160 #i‚de‡
MINISIZE


161 
exc⁄ãxt
->
°©i°ics
.
Æloˇãd_ªgi°øti⁄s
--;

163 
	}
}

165 
	$_eXosù_ªg_föd
(
eXosù_t
 *
exc⁄ãxt
, 
eXosù_ªg_t
 **
ªg
, 
osù_å™ß˘i⁄_t
 *
å
) {

166 
eXosù_ªg_t
 *
jªg
;

168 *
ªg
 = 
NULL
;

170 i‡(
å
 =
NULL
)

171  
OSIP_BADPARAMETER
;

173 
jªg
 = 
exc⁄ãxt
->
j_ªg
; jªg !
NULL
; jªg = jªg->
√xt
) {

174 i‡(
jªg
->
r_œ°_å
 =
å
) {

175 *
ªg
 = 
jªg
;

176  
OSIP_SUCCESS
;

180  
OSIP_NOTFOUND
;

181 
	}
}

183 
	$_eXosù_ªg_föd_id
(
eXosù_t
 *
exc⁄ãxt
, 
eXosù_ªg_t
 **
ªg
, 
rid
) {

184 
eXosù_ªg_t
 *
jªg
;

186 *
ªg
 = 
NULL
;

188 i‡(
rid
 <= 0)

189  
OSIP_BADPARAMETER
;

191 
jªg
 = 
exc⁄ãxt
->
j_ªg
; jªg !
NULL
; jªg = jªg->
√xt
) {

192 i‡(
jªg
->
r_id
 =
rid
) {

193 *
ªg
 = 
jªg
;

194  
OSIP_SUCCESS
;

198  
OSIP_NOTFOUND
;

199 
	}
}

	@/home/unasaw/sip_project/libexosip2-5.3.0/src/jrequest.c

33 
	~"eXosù2.h
"

35 #ifde‡
HAVE_UNISTD_H


36 
	~<uni°d.h
>

39 #ifde‡
HAVE_WINDOWS_H


40 
	~<wödows.h
>

43 #ifde‡
HAVE_OPENSSL_SSL_H


44 
	~<›ís¶/ønd.h
>

47 
	~<osù∑r£r2/osù_md5.h
>

50 
dülog_fûl_rouã_£t
(
osù_dülog_t
 *
dülog
, 
osù_mesßge_t
 *
ªque°
);

55 *
	$_eXosù_mÆloc_√w_øndom
() {

56 *
tmp
 = (*Ë
	`osù_mÆloc
(33);

57 
numbî
 = 
	`osù_buûd_øndom_numbî
();

59 i‡(
tmp
 =
NULL
)

60  
NULL
;

62 
	`•rötf
(
tmp
, "%u", 
numbî
);

63  
tmp
;

64 
	}
}

66 
	$eXosù_gíî©e_øndom
(*
buf
, 
buf_size
) {

67 
numbî
 = 
	`osù_buûd_øndom_numbî
();

69 
	`¢¥ötf
(
buf
, 
buf_size
, "%u", 
numbî
);

70  
OSIP_SUCCESS
;

71 
	}
}

73 
	#MD5HASHLEN
 16

	)

74 
	#MD5HEXLEN
 32

	)

76 
CvtHex
(*
öput_bö¨y
, 
size_t
 
öput_Àn
, *
ouçut_hexa
);

78 
	$eXosù_hexa_gíî©e_øndom
(*
vÆ
, 
vÆ_size
, *
°r1
, *
°r2
, *
°r3
) {

79 
osù_MD5_CTX
 
Md5Ctx
;

80 
HA1
[
MD5HASHLEN
];

81 
Key
[
MD5HEXLEN
 + 1];

83 
	`osù_MD5Inô
(&
Md5Ctx
);

84 
	`osù_MD5Upd©e
(&
Md5Ctx
, (*Ë
°r1
, (Ë
	`°æí
(str1));

85 
	`osù_MD5Upd©e
(&
Md5Ctx
, (*) ":", 1);

86 
	`osù_MD5Upd©e
(&
Md5Ctx
, (*Ë
°r2
, (Ë
	`°æí
(str2));

87 
	`osù_MD5Upd©e
(&
Md5Ctx
, (*) ":", 1);

88 
	`osù_MD5Upd©e
(&
Md5Ctx
, (*Ë
°r3
, (Ë
	`°æí
(str3));

89 
	`osù_MD5FöÆ
((*Ë
HA1
, &
Md5Ctx
);

90 
	`CvtHex
(
HA1
, 
MD5HASHLEN
, 
Key
);

91 
	`osù_°∫˝y
(
vÆ
, 
Key
, 
vÆ_size
 - 1);

93 
	}
}

95 
	$eXosù_byã_gíî©e_øndom
(*
buf
, 
buf_size
) {

96 #ifde‡
HAVE_OPENSSL_SSL_H


97  
	`RAND_byãs
((*Ë
buf
, 
buf_size
) > 0 ? 0 : -1;

99 
	`eXosù_gíî©e_øndom
(
buf
, 16);

100 
	`eXosù_hexa_gíî©e_øndom
(
buf
, 
buf_size
, buf, "key", "crypto");

103 
	}
}

105 
	$_eXosù_dülog_add_c⁄è˘
(
eXosù_t
 *
exc⁄ãxt
, 
osù_mesßge_t
 *
ªque°
) {

106 
osù_‰om_t
 *
a_‰om
;

107 *
c⁄è˘
 = 
NULL
;

108 
scheme
[10];

109 
Àn
;

111 i‡(
exc⁄ãxt
->
eXé_å™•‹t
.
íabÀd
 <= 0)

112  
OSIP_NO_NETWORK
;

114 i‡(
ªque°
 =
NULL
)

115  
OSIP_BADPARAMETER
;

117 
a_‰om
 = 
ªque°
->
‰om
;

119 i‡(
a_‰om
 =
NULL
 ||á_‰om->
uæ
 == NULL)

120  
OSIP_SYNTAXERROR
;

123 i‡(
ªque°
->
ªq_uri
 !
NULL
 &&Ñeque°->ªq_uri->
scheme
 !NULL && 
	`osù_°rˇ£cmp
(request->req_uri->scheme, "sips") == 0)

124 
	`¢¥ötf
(
scheme
, (scheme), "sips");

127 
	`¢¥ötf
(
scheme
, (scheme), "sip");

129 i‡(
a_‰om
->
uæ
->
u£∫ame
 !
NULL
)

130 
Àn
 = (Ë(2 + 4 + (
	`°æí
(
a_‰om
->
uæ
->
u£∫ame
Ë* 3Ë+ 1 + 100 + 6 + 10 + 3 + såÀn(
exc⁄ãxt
->
å™•‹t
));

133 
Àn
 = (Ë(2 + 4 + 100 + 6 + 10 + 3 + 
	`°æí
(
exc⁄ãxt
->
å™•‹t
));

135 
Àn
++;

137 i‡(
exc⁄ãxt
->
sù_ö°™˚
[0] != 0)

138 
Àn
 += 285;

139 i‡(
exc⁄ãxt
->
co_dülog_exåa_∑øms
[0] != 0)

140 
Àn
 += 542;

142 
c⁄è˘
 = (*Ë
	`osù_mÆloc
(
Àn
 + 1);

144 i‡(
c⁄è˘
 =
NULL
)

145  
OSIP_NOMEM
;

148 i‡(
a_‰om
->
uæ
->
u£∫ame
 !
NULL
) {

149 *
tmp2
 = 
	`__osù_uri_esˇ≥_u£röfo
(
a_‰om
->
uæ
->
u£∫ame
);

151 
	`¢¥ötf
(
c⁄è˘
, 
Àn
, "<%s:%s@999.999.999.999:99999>", 
scheme
, 
tmp2
);

152 
	`osù_‰ì
(
tmp2
);

155 
	`¢¥ötf
(
c⁄è˘
, 
Àn
 - 
	`°æí
(
exc⁄ãxt
->
å™•‹t
Ë- 10, "<%s:999.999.999.999:99999>", 
scheme
);

157 i‡(
exc⁄ãxt
->
íabÀ_outbound
 == 1) {

158 
c⁄è˘
[
	`°æí
(contact) - 1] = '\0';

159 
	`°rˇt
(
c⁄è˘
, ";ob");

160 
	`°rˇt
(
c⁄è˘
, ">");

163 i‡(
	`osù_°rˇ£cmp
(
exc⁄ãxt
->
å™•‹t
, "UDP") != 0) {

164 
c⁄è˘
[
	`°æí
(contact) - 1] = '\0';

165 
	`°rˇt
(
c⁄è˘
, ";transport=");

166 
	`°rˇt
(
c⁄è˘
, 
exc⁄ãxt
->
å™•‹t
);

167 
	`°rˇt
(
c⁄è˘
, ">");

170 i‡(
exc⁄ãxt
->
sù_ö°™˚
[0] != 0) {

171 
	`°rˇt
(
c⁄è˘
, ";+sip.instance=\"<");

172 i‡(
	`°æí
(
exc⁄ãxt
->
sù_ö°™˚
) == 36 &&Éxcontext->sip_instance[8] == '-') {

173 
	`°rˇt
(
c⁄è˘
, "urn:uuid:");

175 
	`°rˇt
(
c⁄è˘
, 
exc⁄ãxt
->
sù_ö°™˚
);

176 
	`°rˇt
(
c⁄è˘
, ">\"");

179 i‡(
exc⁄ãxt
->
co_dülog_exåa_∑øms
[0] != 0) {

180 
	`°rˇt
(
c⁄è˘
, ";");

181 
	`°rˇt
(
c⁄è˘
, 
exc⁄ãxt
->
co_dülog_exåa_∑øms
);

184 
	`osù_mesßge_£t_c⁄è˘
(
ªque°
, 
c⁄è˘
);

185 
	`osù_‰ì
(
c⁄è˘
);

187 i‡(
exc⁄ãxt
->
deÁu…_c⁄è˘_di•œy«me
[0] != '\0') {

188 
osù_c⁄è˘_t
 *
√w_c⁄è˘
;

190 
	`osù_mesßge_gë_c⁄è˘
(
ªque°
, 0, &
√w_c⁄è˘
);

192 i‡(
√w_c⁄è˘
 !
NULL
) {

193 
√w_c⁄è˘
->
di•œy«me
 = 
	`osù_°rdup
(
exc⁄ãxt
->
deÁu…_c⁄è˘_di•œy«me
);

197 i‡(
exc⁄ãxt
->
eXé_å™•‹t
.
_é_upd©e_c⁄è˘
 !
NULL
)

198 
exc⁄ãxt
->
eXé_å™•‹t
.
	`_é_upd©e_c⁄è˘
”xc⁄ãxt, 
ªque°
);

200  
OSIP_SUCCESS
;

201 
	}
}

203 
	$_eXosù_ªque°_add_vü
(
eXosù_t
 *
exc⁄ãxt
, 
osù_mesßge_t
 *
ªque°
) {

204 
tmp
[200];

206 i‡(
exc⁄ãxt
->
eXé_å™•‹t
.
íabÀd
 <= 0)

207  
OSIP_NO_NETWORK
;

209 i‡(
ªque°
 =
NULL
)

210  
OSIP_BADPARAMETER
;

212 i‡(
ªque°
->
ˇŒ_id
 =
NULL
)

213  
OSIP_SYNTAXERROR
;

216 i‡(
exc⁄ãxt
->
u£_Ω‹t
 !0 &&Éxc⁄ãxt->
eXé_å™•‹t
.
¥Ÿo_Ámûy
 =
AF_INET
)

217 
	`¢¥ötf
(
tmp
, 200, "SIP/2.0/%†999.999.999.999:99999;Ω‹t;bønch=z9hG4bK%u", 
exc⁄ãxt
->
å™•‹t
, 
	`osù_buûd_øndom_numbî
());

220 
	`¢¥ötf
(
tmp
, 200, "SIP/2.0/%†999.999.999.999:99999;bønch=z9hG4bK%u", 
exc⁄ãxt
->
å™•‹t
, 
	`osù_buûd_øndom_numbî
());

222 
	`osù_mesßge_£t_vü
(
ªque°
, 
tmp
);

224  
OSIP_SUCCESS
;

225 
	}
}

233 
	$_eXosù_gíî©ög_ªque°_out_of_dülog
(
eXosù_t
 *
exc⁄ãxt
, 
osù_mesßge_t
 **
de°
, c⁄° *
mëhod
, c⁄° *
to
, c⁄° *
‰om
, c⁄° *
¥oxy
) {

238 
i
;

239 
osù_mesßge_t
 *
ªque°
;

240 
doög_ªgi°î
;

242 *
de°
 = 
NULL
;

244 i‡(!
mëhod
 || !*method)

245  
OSIP_BADPARAMETER
;

247 i‡(
exc⁄ãxt
->
eXé_å™•‹t
.
íabÀd
 <= 0)

248  
OSIP_NO_NETWORK
;

250 
i
 = 
	`osù_mesßge_öô
(&
ªque°
);

252 i‡(
i
 != 0)

253  
i
;

256 
	`osù_mesßge_£t_mëhod
(
ªque°
, 
	`osù_°rdup
(
mëhod
));

257 
	`osù_mesßge_£t_vîsi⁄
(
ªque°
, 
	`osù_°rdup
("SIP/2.0"));

258 
	`osù_mesßge_£t_°©us_code
(
ªque°
, 0);

259 
	`osù_mesßge_£t_ªas⁄_phø£
(
ªque°
, 
NULL
);

261 
doög_ªgi°î
 = 0 =
	`°rcmp
("REGISTER", 
mëhod
);

263 i‡(
doög_ªgi°î
) {

264 
i
 = 
	`osù_uri_öô
(&(
ªque°
->
ªq_uri
));

266 i‡(
i
 != 0) {

267 
	`osù_mesßge_‰ì
(
ªque°
);

268  
i
;

271 
i
 = 
	`osù_uri_∑r£
(
ªque°
->
ªq_uri
, 
¥oxy
);

273 i‡(
i
 != 0) {

274 
	`osù_mesßge_‰ì
(
ªque°
);

275  
i
;

278 
i
 = 
	`osù_mesßge_£t_to
(
ªque°
, 
‰om
);

280 i‡(
i
 !0 || 
ªque°
->
to
 =
NULL
) {

281 i‡(
i
 >= 0)

282 
i
 = 
OSIP_SYNTAXERROR
;

284 
	`osù_mesßge_‰ì
(
ªque°
);

285  
i
;

289 i‡(
ªque°
->
to
 !
NULL
 &&Ñeque°->to->
uæ
 != NULL) {

290 
osù_uri_t
 *
uæ
 = 
ªque°
->
to
->url;

292 
	`osù_li°_size
(&
uæ
->
uæ_hódîs
) > 0) {

293 
osù_uri_hódî_t
 *
u_hódî
;

295 
u_hódî
 = (
osù_uri_∑øm_t
 *Ë
	`osù_li°_gë
(&
uæ
->
uæ_hódîs
, 0);

297 i‡(
u_hódî
 =
NULL
)

300 i‡(
	`osù_°rˇ£cmp
(
u_hódî
->
g«me
, "from") == 0) {

301 } i‡(
	`osù_°rˇ£cmp
(
u_hódî
->
g«me
, "to") == 0) {

302 } i‡(
	`osù_°rˇ£cmp
(
u_hódî
->
g«me
, "call-id") == 0) {

303 } i‡(
	`osù_°rˇ£cmp
(
u_hódî
->
g«me
, "cseq") == 0) {

304 } i‡(
	`osù_°rˇ£cmp
(
u_hódî
->
g«me
, "via") == 0) {

305 } i‡(
	`osù_°rˇ£cmp
(
u_hódî
->
g«me
, "contact") == 0) {

306 } i‡(
	`osù_°rˇ£cmp
(
u_hódî
->
g«me
, "route") == 0) {

307 
	`osù_mesßge_£t_rouã
(
ªque°
, 
u_hódî
->
gvÆue
);

309 } i‡(
	`osù_°rˇ£cmp
(
u_hódî
->
g«me
, "call-info") == 0) {

310 
	`osù_mesßge_£t_ˇŒ_öfo
(
ªque°
, 
u_hódî
->
gvÆue
);

312 } i‡(
	`osù_°rˇ£cmp
(
u_hódî
->
g«me
, "accept") == 0) {

313 
	`osù_mesßge_£t_ac˚±
(
ªque°
, 
u_hódî
->
gvÆue
);

315 } i‡(
	`osù_°rˇ£cmp
(
u_hódî
->
g«me
, "accept-encoding") == 0) {

316 
	`osù_mesßge_£t_ac˚±_ícodög
(
ªque°
, 
u_hódî
->
gvÆue
);

318 } i‡(
	`osù_°rˇ£cmp
(
u_hódî
->
g«me
, "accept-language") == 0) {

319 
	`osù_mesßge_£t_ac˚±_œnguage
(
ªque°
, 
u_hódî
->
gvÆue
);

321 } i‡(
	`osù_°rˇ£cmp
(
u_hódî
->
g«me
, "alert-info") == 0) {

322 
	`osù_mesßge_£t_Æît_öfo
(
ªque°
, 
u_hódî
->
gvÆue
);

324 } i‡(
	`osù_°rˇ£cmp
(
u_hódî
->
g«me
, "allow") == 0) {

325 
	`osù_mesßge_£t_Ælow
(
ªque°
, 
u_hódî
->
gvÆue
);

327 } i‡(
	`osù_°rˇ£cmp
(
u_hódî
->
g«me
, "content-type") == 0) {

328 
	`osù_mesßge_£t_c⁄ã¡_ty≥
(
ªque°
, 
u_hódî
->
gvÆue
);

331 
	`osù_mesßge_£t_hódî
(
ªque°
, 
u_hódî
->
g«me
, u_hódî->
gvÆue
);

333 
	`osù_li°_ªmove
(&
uæ
->
uæ_hódîs
, 0);

334 
	`osù_uri_∑øm_‰ì
(
u_hódî
);

340 
i
 = 
	`osù_mesßge_£t_to
(
ªque°
, 
to
);

342 i‡(
i
 !0 || 
ªque°
->
to
 =
NULL
) {

343 i‡(
i
 >= 0)

344 
i
 = 
OSIP_SYNTAXERROR
;

346 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosù] cÆÀêaddªs†d€†nŸ sìm†tÿbê®sùuæ: [%s]\n", 
to
));

347 
	`osù_mesßge_‰ì
(
ªque°
);

348  
i
;

352 i‡(
ªque°
->
to
 !
NULL
 &&Ñeque°->to->
uæ
 != NULL) {

353 
osù_uri_t
 *
uæ
 = 
ªque°
->
to
->url;

355 
	`osù_li°_size
(&
uæ
->
uæ_hódîs
) > 0) {

356 
osù_uri_hódî_t
 *
u_hódî
;

358 
u_hódî
 = (
osù_uri_∑øm_t
 *Ë
	`osù_li°_gë
(&
uæ
->
uæ_hódîs
, 0);

360 i‡(
u_hódî
 =
NULL
)

363 i‡(
	`osù_°rˇ£cmp
(
u_hódî
->
g«me
, "from") == 0) {

364 } i‡(
	`osù_°rˇ£cmp
(
u_hódî
->
g«me
, "to") == 0) {

365 } i‡(
	`osù_°rˇ£cmp
(
u_hódî
->
g«me
, "call-id") == 0) {

366 } i‡(
	`osù_°rˇ£cmp
(
u_hódî
->
g«me
, "cseq") == 0) {

367 } i‡(
	`osù_°rˇ£cmp
(
u_hódî
->
g«me
, "via") == 0) {

368 } i‡(
	`osù_°rˇ£cmp
(
u_hódî
->
g«me
, "contact") == 0) {

369 } i‡(
	`osù_°rˇ£cmp
(
u_hódî
->
g«me
, "route") == 0) {

370 
	`osù_mesßge_£t_rouã
(
ªque°
, 
u_hódî
->
gvÆue
);

372 } i‡(
	`osù_°rˇ£cmp
(
u_hódî
->
g«me
, "call-info") == 0) {

373 
	`osù_mesßge_£t_ˇŒ_öfo
(
ªque°
, 
u_hódî
->
gvÆue
);

375 } i‡(
	`osù_°rˇ£cmp
(
u_hódî
->
g«me
, "accept") == 0) {

376 
	`osù_mesßge_£t_ac˚±
(
ªque°
, 
u_hódî
->
gvÆue
);

378 } i‡(
	`osù_°rˇ£cmp
(
u_hódî
->
g«me
, "accept-encoding") == 0) {

379 
	`osù_mesßge_£t_ac˚±_ícodög
(
ªque°
, 
u_hódî
->
gvÆue
);

381 } i‡(
	`osù_°rˇ£cmp
(
u_hódî
->
g«me
, "accept-language") == 0) {

382 
	`osù_mesßge_£t_ac˚±_œnguage
(
ªque°
, 
u_hódî
->
gvÆue
);

384 } i‡(
	`osù_°rˇ£cmp
(
u_hódî
->
g«me
, "alert-info") == 0) {

385 
	`osù_mesßge_£t_Æît_öfo
(
ªque°
, 
u_hódî
->
gvÆue
);

387 } i‡(
	`osù_°rˇ£cmp
(
u_hódî
->
g«me
, "allow") == 0) {

388 
	`osù_mesßge_£t_Ælow
(
ªque°
, 
u_hódî
->
gvÆue
);

390 } i‡(
	`osù_°rˇ£cmp
(
u_hódî
->
g«me
, "content-type") == 0) {

391 
	`osù_mesßge_£t_c⁄ã¡_ty≥
(
ªque°
, 
u_hódî
->
gvÆue
);

394 
	`osù_mesßge_£t_hódî
(
ªque°
, 
u_hódî
->
g«me
, u_hódî->
gvÆue
);

396 
	`osù_li°_ªmove
(&
uæ
->
uæ_hódîs
, 0);

397 
	`osù_uri_∑øm_‰ì
(
u_hódî
);

401 i‡(
¥oxy
 !
NULL
 &&Öroxy[0] != 0) {

405 
osù_uri_∑øm_t
 *
Ã_∑øm
;

406 
osù_rouã_t
 *
o_¥oxy
;

408 
	`osù_rouã_öô
(&
o_¥oxy
);

409 
i
 = 
	`osù_rouã_∑r£
(
o_¥oxy
, 
¥oxy
);

411 i‡(
i
 != 0) {

412 
	`osù_rouã_‰ì
(
o_¥oxy
);

413 
	`osù_mesßge_‰ì
(
ªque°
);

414  
i
;

417 
	`osù_uri_u∑øm_gë_by«me
(
o_¥oxy
->
uæ
, "Ã", &
Ã_∑øm
);

419 i‡(
Ã_∑øm
 !
NULL
) {

420 
i
 = 
	`osù_uri_˛⁄e
(
ªque°
->
to
->
uæ
, &‘eque°->
ªq_uri
));

422 i‡(
i
 != 0) {

423 
	`osù_rouã_‰ì
(
o_¥oxy
);

424 
	`osù_mesßge_‰ì
(
ªque°
);

425  
i
;

430 
	`osù_li°_add
(&
ªque°
->
rouãs
, 
o_¥oxy
, 0);

436 
ªque°
->
ªq_uri
 = 
o_¥oxy
->
uæ
;

437 
o_¥oxy
->
uæ
 = 
NULL
;

438 
	`osù_rouã_‰ì
(
o_¥oxy
);

445 
	`osù_mesßge_£t_rouã
(
ªque°
, 
to
);

451 
i
 = 
	`osù_uri_˛⁄e
(
ªque°
->
to
->
uæ
, &‘eque°->
ªq_uri
));

453 i‡(
i
 != 0) {

454 
	`osù_mesßge_‰ì
(
ªque°
);

455  
i
;

461 
i
 = 
	`osù_mesßge_£t_‰om
(
ªque°
, 
‰om
);

463 i‡(
i
 !0 || 
ªque°
->
‰om
 =
NULL
) {

464 i‡(
i
 >= 0)

465 
i
 = 
OSIP_SYNTAXERROR
;

467 
	`osù_mesßge_‰ì
(
ªque°
);

468  
i
;

472 i‡(
doög_ªgi°î
 && 
ªque°
->
‰om
 !
NULL
 &&Ñeque°->‰om->
uæ
 != NULL) {

473 
osù_uri_t
 *
uæ
 = 
ªque°
->
‰om
->url;

475 
	`osù_li°_size
(&
uæ
->
uæ_hódîs
) > 0) {

476 
osù_uri_hódî_t
 *
u_hódî
;

478 
u_hódî
 = (
osù_uri_∑øm_t
 *Ë
	`osù_li°_gë
(&
uæ
->
uæ_hódîs
, 0);

480 i‡(
u_hódî
 =
NULL
)

483 
	`osù_li°_ªmove
(&
uæ
->
uæ_hódîs
, 0);

484 
	`osù_uri_∑øm_‰ì
(
u_hódî
);

488 i‡(
ªque°
->
to
 !
NULL
 &&Ñeque°->to->
uæ
 != NULL) {

489 
osù_li°_ôî©‹_t
 
ô
;

490 
osù_uri_∑øm_t
 *
u_∑øm
 = (osù_uri_∑øm_à*Ë
	`osù_li°_gë_fú°
(&
ªque°
->
to
->
uæ
->
uæ_∑øms
, &
ô
);

492 
u_∑øm
 !
NULL
) {

493 i‡(
u_∑øm
->
gvÆue
 !
NULL
 && u_∑øm->
g«me
 !NULL && 
	`osù_°rˇ£cmp
(u_param->gname, "method") == 0) {

494 
	`osù_li°_ôî©‹_ªmove
(&
ô
);

495 
	`osù_uri_∑øm_‰ì
(
u_∑øm
);

499 
u_∑øm
 = (
osù_uri_∑øm_t
 *Ë
	`osù_li°_gë_√xt
(&
ô
);

503 i‡(
ªque°
->
‰om
 !
NULL
 &&Ñeque°->‰om->
uæ
 != NULL) {

504 
osù_li°_ôî©‹_t
 
ô
;

505 
osù_uri_∑øm_t
 *
u_∑øm
 = (osù_uri_∑øm_à*Ë
	`osù_li°_gë_fú°
(&
ªque°
->
‰om
->
uæ
->
uæ_∑øms
, &
ô
);

507 
u_∑øm
 !
NULL
) {

508 i‡(
u_∑øm
->
gvÆue
 !
NULL
 && u_∑øm->
g«me
 !NULL && 
	`osù_°rˇ£cmp
(u_param->gname, "method") == 0) {

509 
	`osù_li°_ôî©‹_ªmove
(&
ô
);

510 
	`osù_uri_∑øm_‰ì
(
u_∑øm
);

514 
u_∑øm
 = (
osù_uri_∑øm_t
 *Ë
	`osù_li°_gë_√xt
(&
ô
);

518 i‡(
ªque°
->
ªq_uri
) {

519 
osù_li°_ôî©‹_t
 
ô
;

520 
osù_uri_∑øm_t
 *
u_∑øm
 = (osù_uri_∑øm_à*Ë
	`osù_li°_gë_fú°
(&
ªque°
->
ªq_uri
->
uæ_∑øms
, &
ô
);

522 
u_∑øm
 !
NULL
) {

523 i‡(
u_∑øm
->
gvÆue
 !
NULL
 && u_∑øm->
g«me
 !NULL && 
	`osù_°rˇ£cmp
(u_param->gname, "method") == 0) {

524 
	`osù_li°_ôî©‹_ªmove
(&
ô
);

525 
	`osù_uri_∑øm_‰ì
(
u_∑øm
);

529 
u_∑øm
 = (
osù_uri_∑øm_t
 *Ë
	`osù_li°_gë_√xt
(&
ô
);

534 
	`osù_‰om_£t_èg
(
ªque°
->
‰om
, 
	`_eXosù_mÆloc_√w_øndom
());

538 
osù_ˇŒ_id_t
 *
ˇŒid
;

539 
osù_c£q_t
 *
c£q
;

540 *
num
;

541 *
cidønd
;

544 
i
 = 
	`osù_ˇŒ_id_öô
(&
ˇŒid
);

546 i‡(
i
 != 0) {

547 
	`osù_mesßge_‰ì
(
ªque°
);

548  
i
;

551 
cidønd
 = 
	`_eXosù_mÆloc_√w_øndom
();

552 
	`osù_ˇŒ_id_£t_numbî
(
ˇŒid
, 
cidønd
);

554 
ªque°
->
ˇŒ_id
 = 
ˇŒid
;

556 
i
 = 
	`osù_c£q_öô
(&
c£q
);

558 i‡(
i
 != 0) {

559 
	`osù_mesßge_‰ì
(
ªque°
);

560  
i
;

563 
num
 = 
	`osù_°rdup
(
doög_ªgi°î
 ? "1" : "20");

564 
	`osù_c£q_£t_numbî
(
c£q
, 
num
);

565 
	`osù_c£q_£t_mëhod
(
c£q
, 
	`osù_°rdup
(
mëhod
));

566 
ªque°
->
c£q
 = cseq;

568 i‡(
c£q
->
mëhod
 =
NULL
 || c£q->
numbî
 == NULL) {

569 
	`osù_mesßge_‰ì
(
ªque°
);

570  
OSIP_NOMEM
;

574 
i
 = 
	`_eXosù_ªque°_add_vü
(
exc⁄ãxt
, 
ªque°
);

576 i‡(
i
 != 0) {

577 
	`osù_mesßge_‰ì
(
ªque°
);

578  
i
;

582 
	`osù_mesßge_£t_max_f‹w¨ds
(
ªque°
, "70");

584 i‡(0 =
	`°rcmp
("REGISTER", 
mëhod
)) {

585 } i‡(0 =
	`°rcmp
("INFO", 
mëhod
)) {

586 } i‡(0 =
	`°rcmp
("OPTIONS", 
mëhod
)) {

587 
	`osù_mesßge_£t_ac˚±
(
ªque°
, "application/sdp");

590 
	`osù_mesßge_£t_u£r_agít
(
ªque°
, 
exc⁄ãxt
->
u£r_agít
);

592 *
de°
 = 
ªque°
;

593  
OSIP_SUCCESS
;

594 
	}
}

596 #i‚de‡
MINISIZE


598 
	$_eXosù_gíî©ög_publish
(
eXosù_t
 *
exc⁄ãxt
, 
osù_mesßge_t
 **
mesßge
, c⁄° *
to
, c⁄° *
‰om
, c⁄° *
rouã
) {

599 
i
;

601 i‡(
to
 !
NULL
 && *to == '\0')

602  
OSIP_BADPARAMETER
;

604 i‡(
rouã
 !
NULL
 && *route == '\0')

605 
rouã
 = 
NULL
;

607 
i
 = 
	`_eXosù_gíî©ög_ªque°_out_of_dülog
(
exc⁄ãxt
, 
mesßge
, "PUBLISH", 
to
, 
‰om
, 
rouã
);

609 i‡(
i
 != 0)

610  
i
;

612 i‡(
exc⁄ãxt
->
sù_ö°™˚
[0] != 0)

613 
	`_eXosù_dülog_add_c⁄è˘
(
exc⁄ãxt
, *
mesßge
);

617  
OSIP_SUCCESS
;

618 
	}
}

622 
	$dülog_fûl_rouã_£t
(
osù_dülog_t
 *
dülog
, 
osù_mesßge_t
 *
ªque°
) {

626 
osù_li°_ôî©‹_t
 
ô
;

627 
i
;

628 
osù_uri_∑øm_t
 *
Ã_∑øm
;

629 
osù_rouã_t
 *
rouã
;

631 
rouã
 = (
osù_rouã_t
 *Ë
	`osù_li°_gë_fú°
(&
dülog
->
rouã_£t
, &
ô
);

633 
	`osù_uri_u∑øm_gë_by«me
(
rouã
->
uæ
, "Ã", &
Ã_∑øm
);

635 i‡(
Ã_∑øm
 !
NULL
) {

636 
i
 = 
	`osù_uri_˛⁄e
(
dülog
->
ªmŸe_c⁄è˘_uri
->
uæ
, &(
ªque°
->
ªq_uri
));

638 i‡(
i
 != 0)

639  
i
;

644 
rouã
 !
NULL
) {

645 
osù_rouã_t
 *
rouã2
;

647 
i
 = 
	`osù_rouã_˛⁄e
(
rouã
, &
rouã2
);

649 i‡(
i
 != 0)

650  
i
;

652 
	`osù_li°_add
(&
ªque°
->
rouãs
, 
rouã2
, -1);

653 
rouã
 = (
osù_rouã_t
 *Ë
	`osù_li°_gë_√xt
(&
ô
);

656  
OSIP_SUCCESS
;

662 
i
 = 
	`osù_uri_˛⁄e
(
rouã
->
uæ
, &(
ªque°
->
ªq_uri
));

664 i‡(
i
 != 0)

665  
i
;

670 
rouã
 = (
osù_rouã_t
 *Ë
	`osù_li°_gë_√xt
(&
ô
);

672 
rouã
 !
NULL
) {

673 
osù_rouã_t
 *
rouã2
;

675 
i
 = 
	`osù_rouã_˛⁄e
(
rouã
, &
rouã2
);

677 i‡(
i
 != 0)

678  
i
;

680 
	`osù_li°_add
(&
ªque°
->
rouãs
, 
rouã2
, -1);

681 
rouã
 = (
osù_rouã_t
 *Ë
	`osù_li°_gë_√xt
(&
ô
);

687 
osù_uri_t
 *
√w_uæ
;

690 
i
 = 
	`osù_uri_˛⁄e
(
dülog
->
ªmŸe_c⁄è˘_uri
->
uæ
, &
√w_uæ
);

692 i‡(
i
 != 0)

693  
i
;

695 
i
 = 
	`osù_rouã_öô
(&
rouã
);

697 i‡(
i
 != 0) {

698 
	`osù_uri_‰ì
(
√w_uæ
);

699  
i
;

702 
	`osù_uri_‰ì
(
rouã
->
uæ
);

703 
rouã
->
uæ
 = 
√w_uæ
;

707  
OSIP_SUCCESS
;

708 
	}
}

710 
	$_eXosù_buûd_ªque°_wôhö_dülog
(
eXosù_t
 *
exc⁄ãxt
, 
osù_mesßge_t
 **
de°
, c⁄° *
mëhod
, 
osù_dülog_t
 *
dülog
) {

711 
i
;

712 
osù_mesßge_t
 *
ªque°
;

714 *
de°
 = 
NULL
;

716 i‡(
dülog
 =
NULL
)

717  
OSIP_BADPARAMETER
;

719 i‡(
exc⁄ãxt
->
eXé_å™•‹t
.
íabÀd
 <= 0)

720  
OSIP_NO_NETWORK
;

722 
i
 = 
	`osù_mesßge_öô
(&
ªque°
);

724 i‡(
i
 != 0)

725  
i
;

727 i‡(
dülog
->
ªmŸe_c⁄è˘_uri
 =
NULL
) {

731 
	`osù_mesßge_‰ì
(
ªque°
);

732  
OSIP_SYNTAXERROR
;

736 
ªque°
->
sù_mëhod
 = 
	`osù_°rdup
(
mëhod
);

738 i‡(
ªque°
->
sù_mëhod
 =
NULL
) {

739 
	`osù_mesßge_‰ì
(
ªque°
);

740  
OSIP_NOMEM
;

743 
ªque°
->
sù_vîsi⁄
 = 
	`osù_°rdup
("SIP/2.0");

745 i‡(
ªque°
->
sù_vîsi⁄
 =
NULL
) {

746 
	`osù_mesßge_‰ì
(
ªque°
);

747  
OSIP_NOMEM
;

750 
ªque°
->
°©us_code
 = 0;

751 
ªque°
->
ªas⁄_phø£
 = 
NULL
;

754 i‡(
	`osù_li°_eﬁ
(&
dülog
->
rouã_£t
, 0)) {

756 
i
 = 
	`osù_uri_˛⁄e
(
dülog
->
ªmŸe_c⁄è˘_uri
->
uæ
, &(
ªque°
->
ªq_uri
));

758 i‡(
i
 != 0) {

759 
	`osù_mesßge_‰ì
(
ªque°
);

760  
i
;

765 
i
 = 
	`dülog_fûl_rouã_£t
(
dülog
, 
ªque°
);

767 i‡(
i
 != 0) {

768 
	`osù_mesßge_‰ì
(
ªque°
);

769  
i
;

774 
i
 = 
	`osù_to_˛⁄e
(
dülog
->
ªmŸe_uri
, &(
ªque°
->
to
));

776 i‡(
i
 != 0) {

777 
	`osù_mesßge_‰ì
(
ªque°
);

778  
i
;

781 
i
 = 
	`osù_‰om_˛⁄e
(
dülog
->
loˇl_uri
, &(
ªque°
->
‰om
));

783 i‡(
i
 != 0) {

784 
	`osù_mesßge_‰ì
(
ªque°
);

785  
i
;

789 
	`osù_mesßge_£t_ˇŒ_id
(
ªque°
, 
dülog
->
ˇŒ_id
);

791 i‡(0 =
	`°rcmp
("ACK", 
mëhod
)) {

792 
osù_c£q_t
 *
c£q
;

793 *
tmp
;

795 
i
 = 
	`osù_c£q_öô
(&
c£q
);

797 i‡(
i
 != 0) {

798 
	`osù_mesßge_‰ì
(
ªque°
);

799  
i
;

802 
tmp
 = 
	`osù_mÆloc
(20);

804 i‡(
tmp
 =
NULL
) {

805 
	`osù_mesßge_‰ì
(
ªque°
);

806 
	`osù_c£q_‰ì
(
c£q
);

807  
OSIP_NOMEM
;

810 
	`•rötf
(
tmp
, "%i", 
dülog
->
loˇl_c£q
);

811 
	`osù_c£q_£t_numbî
(
c£q
, 
tmp
);

812 
	`osù_c£q_£t_mëhod
(
c£q
, 
	`osù_°rdup
(
mëhod
));

813 
ªque°
->
c£q
 = cseq;

816 
osù_c£q_t
 *
c£q
;

817 *
tmp
;

819 
i
 = 
	`osù_c£q_öô
(&
c£q
);

821 i‡(
i
 != 0) {

822 
	`osù_mesßge_‰ì
(
ªque°
);

823  
i
;

826 
dülog
->
loˇl_c£q
++;

827 
tmp
 = 
	`osù_mÆloc
(20);

829 i‡(
tmp
 =
NULL
) {

830 
	`osù_mesßge_‰ì
(
ªque°
);

831 
	`osù_c£q_‰ì
(
c£q
);

832  
OSIP_NOMEM
;

835 
	`¢¥ötf
(
tmp
, 20, "%i", 
dülog
->
loˇl_c£q
);

836 
	`osù_c£q_£t_numbî
(
c£q
, 
tmp
);

837 
	`osù_c£q_£t_mëhod
(
c£q
, 
	`osù_°rdup
(
mëhod
));

838 
ªque°
->
c£q
 = cseq;

842 
	`osù_mesßge_£t_max_f‹w¨ds
(
ªque°
, "70");

844 
i
 = 
	`_eXosù_ªque°_add_vü
(
exc⁄ãxt
, 
ªque°
);

846 i‡(
i
 != 0) {

847 
	`osù_mesßge_‰ì
(
ªque°
);

848  
i
;

852 i‡((0 !
	`°rcmp
("BYE", 
mëhod
)) && (0 != strcmp("CANCEL", method))) {

853 
	`_eXosù_dülog_add_c⁄è˘
(
exc⁄ãxt
, 
ªque°
);

856 i‡(0 =
	`°rcmp
("NOTIFY", 
mëhod
)) {

857 } i‡(0 =
	`°rcmp
("INFO", 
mëhod
)) {

858 } i‡(0 =
	`°rcmp
("OPTIONS", 
mëhod
)) {

859 
	`osù_mesßge_£t_ac˚±
(
ªque°
, "application/sdp");

861 } i‡(0 =
	`°rcmp
("ACK", 
mëhod
)) {

866 
	`osù_mesßge_£t_u£r_agít
(
ªque°
, 
exc⁄ãxt
->
u£r_agít
);

868 *
de°
 = 
ªque°
;

869  
OSIP_SUCCESS
;

870 
	}
}

873 
	$_eXosù_gíî©ög_bye
(
eXosù_t
 *
exc⁄ãxt
, 
osù_mesßge_t
 **
bye
, 
osù_dülog_t
 *
dülog
) {

874 
i
;

876 
i
 = 
	`_eXosù_buûd_ªque°_wôhö_dülog
(
exc⁄ãxt
, 
bye
, "BYE", 
dülog
);

878 i‡(
i
 != 0)

879  
i
;

881  
OSIP_SUCCESS
;

882 
	}
}

885 
	$_eXosù_gíî©ög_ˇn˚l
(
eXosù_t
 *
exc⁄ãxt
, 
osù_mesßge_t
 **
de°
, osù_mesßge_à*
ªque°_ˇn˚Œed
) {

886 
i
;

887 
osù_mesßge_t
 *
ªque°
;

889 
i
 = 
	`osù_mesßge_öô
(&
ªque°
);

891 i‡(
i
 != 0)

892  
i
;

895 
	`osù_mesßge_£t_mëhod
(
ªque°
, 
	`osù_°rdup
("CANCEL"));

896 
	`osù_mesßge_£t_vîsi⁄
(
ªque°
, 
	`osù_°rdup
("SIP/2.0"));

897 
	`osù_mesßge_£t_°©us_code
(
ªque°
, 0);

898 
	`osù_mesßge_£t_ªas⁄_phø£
(
ªque°
, 
NULL
);

900 
i
 = 
	`osù_uri_˛⁄e
(
ªque°_ˇn˚Œed
->
ªq_uri
, &(
ªque°
->req_uri));

902 i‡(
i
 != 0) {

903 
	`osù_mesßge_‰ì
(
ªque°
);

904 *
de°
 = 
NULL
;

905  
i
;

908 
i
 = 
	`osù_to_˛⁄e
(
ªque°_ˇn˚Œed
->
to
, &(
ªque°
->to));

910 i‡(
i
 != 0) {

911 
	`osù_mesßge_‰ì
(
ªque°
);

912 *
de°
 = 
NULL
;

913  
i
;

916 
i
 = 
	`osù_‰om_˛⁄e
(
ªque°_ˇn˚Œed
->
‰om
, &(
ªque°
->from));

918 i‡(
i
 != 0) {

919 
	`osù_mesßge_‰ì
(
ªque°
);

920 *
de°
 = 
NULL
;

921  
i
;

925 
i
 = 
	`osù_ˇŒ_id_˛⁄e
(
ªque°_ˇn˚Œed
->
ˇŒ_id
, &(
ªque°
->call_id));

927 i‡(
i
 != 0) {

928 
	`osù_mesßge_‰ì
(
ªque°
);

929 *
de°
 = 
NULL
;

930  
i
;

933 
i
 = 
	`osù_c£q_˛⁄e
(
ªque°_ˇn˚Œed
->
c£q
, &(
ªque°
->cseq));

935 i‡(
i
 != 0) {

936 
	`osù_mesßge_‰ì
(
ªque°
);

937 *
de°
 = 
NULL
;

938  
i
;

941 
	`osù_‰ì
(
ªque°
->
c£q
->
mëhod
);

942 
ªque°
->
c£q
->
mëhod
 = 
	`osù_°rdup
("CANCEL");

944 i‡(
ªque°
->
c£q
->
mëhod
 =
NULL
) {

945 
	`osù_mesßge_‰ì
(
ªque°
);

946 *
de°
 = 
NULL
;

947  
OSIP_NOMEM
;

952 
osù_vü_t
 *
vü
;

953 
osù_vü_t
 *
vü2
;

955 
i
 = 
	`osù_mesßge_gë_vü
(
ªque°_ˇn˚Œed
, 0, &
vü
);

957 i‡(
i
 < 0) {

958 
	`osù_mesßge_‰ì
(
ªque°
);

959 *
de°
 = 
NULL
;

960  
i
;

963 
i
 = 
	`osù_vü_˛⁄e
(
vü
, &
vü2
);

965 i‡(
i
 != 0) {

966 
	`osù_mesßge_‰ì
(
ªque°
);

967 *
de°
 = 
NULL
;

968  
i
;

971 
	`osù_li°_add
(&
ªque°
->
vüs
, 
vü2
, -1);

976 
osù_li°_ôî©‹_t
 
ô
;

977 
osù_rouã_t
 *
rouã
 = (osù_rouã_à*Ë
	`osù_li°_gë_fú°
(&
ªque°_ˇn˚Œed
->
rouãs
, &
ô
);

978 
osù_rouã_t
 *
rouã2
;

980 
rouã
 !
NULL
) {

981 
i
 = 
	`osù_rouã_˛⁄e
(
rouã
, &
rouã2
);

983 i‡(
i
 != 0) {

984 
	`osù_mesßge_‰ì
(
ªque°
);

985 *
de°
 = 
NULL
;

986  
i
;

989 
	`osù_li°_add
(&
ªque°
->
rouãs
, 
rouã2
, -1);

990 
rouã
 = (
osù_rouã_t
 *Ë
	`osù_li°_gë_√xt
(&
ô
);

994 
	`osù_mesßge_£t_max_f‹w¨ds
(
ªque°
, "70");

995 
	`osù_mesßge_£t_u£r_agít
(
ªque°
, 
exc⁄ãxt
->
u£r_agít
);

997 *
de°
 = 
ªque°
;

998  
OSIP_SUCCESS
;

999 
	}
}

1001 
	$_eXosù_ªque°_vüm™agî
(
eXosù_t
 *
exc⁄ãxt
, 
osù_mesßge_t
 *
sù
, 
Ámûy
, 
¥Ÿo
, 
sockaddr_°‹age
 *
udp_loˇl_böd
, 
ïhemîÆ_p‹t
, 
t˝_sock
, *
ho°
) {

1008 
masquîade_ù
[65];

1009 
masquîade_p‹t
[10];

1010 
osù_vü_t
 *
vü
;

1011 *
vü_ù
 = 
NULL
;

1012 *
vü_p‹t
 = 
NULL
;

1014 i‡(
	`MSG_IS_RESPONSE
(
sù
))

1015  
OSIP_SUCCESS
;

1017 
vü
 = (
osù_vü_t
 *Ë
	`osù_li°_gë
(&
sù
->
vüs
, 0);

1019 i‡(
vü
 =
NULL
 || vü->
ho°
 == NULL)

1020  
OSIP_SYNTAXERROR
;

1022 i‡(
	`osù_°rˇ£cmp
(
vü
->
ho°
, "999.999.999.999"Ë!0 && vü->
p‹t
 !
NULL
 && osip_strcasecmp(via->port, "99999") != 0)

1023  
OSIP_SUCCESS
;

1025 
masquîade_ù
[0] = '\0';

1026 
masquîade_p‹t
[0] = '\0';

1028 i‡(
exc⁄ãxt
->
eXé_å™•‹t
.
é_gë_masquîade_c⁄è˘
 !
NULL
) {

1029 
exc⁄ãxt
->
eXé_å™•‹t
.
	`é_gë_masquîade_c⁄è˘
”xc⁄ãxt, 
masquîade_ù
, (masquîade_ù), 
masquîade_p‹t
, (masquerade_port));

1032 i‡(
masquîade_p‹t
[0] != '\0') {

1033 
vü_p‹t
 = 
masquîade_p‹t
;

1036 i‡(
vü_p‹t
 =
NULL
 && 
ïhemîÆ_p‹t
 > 0) {

1037 
	`¢¥ötf
(
masquîade_p‹t
, (masquîade_p‹t), "%i", 
ïhemîÆ_p‹t
);

1038 
vü_p‹t
 = 
masquîade_p‹t
;

1041 i‡(
vü_p‹t
 =
NULL
 && 
exc⁄ãxt
->
eXé_å™•‹t
.
¥Ÿo_loˇl_p‹t
 > 0) {

1042 
	`¢¥ötf
(
masquîade_p‹t
, (masquîade_p‹t), "%i", 
exc⁄ãxt
->
eXé_å™•‹t
.
¥Ÿo_loˇl_p‹t
);

1043 
vü_p‹t
 = 
masquîade_p‹t
;

1046 #ifde‡
MASQUERADE_VIA


1048 i‡(
masquîade_ù
[0] != '\0') {

1049 
vü_ù
 = 
masquîade_ù
;

1053 i‡(
exc⁄ãxt
->
masquîade_vü
 > 0) {

1054 i‡(
masquîade_ù
[0] != '\0') {

1055 
vü_ù
 = 
masquîade_ù
;

1059 i‡(
vü_ù
 =
NULL
) {

1060 
masquîade_ù
[0] = '\0';

1061 
	`_eXosù_guess_ù_f‹_de°ö©i⁄sock
(
exc⁄ãxt
, 
Ámûy
, 
¥Ÿo
, 
udp_loˇl_böd
, 
t˝_sock
, 
ho°
, 
masquîade_ù
, 49);

1063 i‡(
masquîade_ù
[0] != '\0') {

1064 
vü_ù
 = 
masquîade_ù
;

1068 i‡(
vü_ù
 =
NULL
) {

1069 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] missing ip for Via header\n"));

1072 i‡(
vü_p‹t
 =
NULL
) {

1073 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] missingÖort for Via header\n"));

1076 i‡(
vü_ù
 =
NULL
 || 
vü_p‹t
 == NULL) {

1077  
OSIP_UNDEFINED_ERROR
;

1080 i‡(
	`osù_°rˇ£cmp
(
vü
->
ho°
, "999.999.999.999") == 0) {

1081 
	`osù_‰ì
(
vü
->
ho°
);

1082 
vü
->
ho°
 = 
	`osù_°rdup
(
vü_ù
);

1085 i‡(
vü
->
p‹t
 !
NULL
 && 
	`osù_°rˇ£cmp
(via->port, "99999") == 0) {

1086 
	`osù_‰ì
(
vü
->
p‹t
);

1087 
vü
->
p‹t
 = 
	`osù_°rdup
(
vü_p‹t
);

1090 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO1
, 
NULL
, "[eXosù] upd©ög: Vü hódîÅÿ[%s][%s]\n", 
vü_ù
, 
vü_p‹t
));

1091 
	`osù_mesßge_f‹˚_upd©e
(
sù
);

1092  
OSIP_SUCCESS
;

1093 
	}
}

1095 
	$_eXosù_mesßge_c⁄è˘m™agî
(
eXosù_t
 *
exc⁄ãxt
, 
osù_mesßge_t
 *
sù
, 
Ámûy
, 
¥Ÿo
, 
sockaddr_°‹age
 *
udp_loˇl_böd
, 
ïhemîÆ_p‹t
, 
sock
, *
ho°
) {

1099 
locù
[65];

1100 
masquîade_ù
[65];

1101 
masquîade_p‹t
[10];

1102 
osù_c⁄è˘_t
 *
ac⁄è˘
;

1103 *
c⁄è˘_ù
 = 
NULL
;

1104 *
c⁄è˘_p‹t
 = 
NULL
;

1106 
ac⁄è˘
 = (
osù_c⁄è˘_t
 *Ë
	`osù_li°_gë
(&
sù
->
c⁄è˘s
, 0);

1108 i‡(
ac⁄è˘
 =
NULL
 ||ác⁄è˘->
uæ
 =NULL ||ác⁄è˘->uæ->
ho°
 == NULL)

1109  
OSIP_SUCCESS
;

1111 i‡(
	`osù_°rˇ£cmp
(
ac⁄è˘
->
uæ
->
ho°
, "999.999.999.999"Ë!0 &&ác⁄è˘->uæ->
p‹t
 !
NULL
 && osip_strcasecmp(acontact->url->port, "99999") != 0)

1112  
OSIP_SUCCESS
;

1115 
masquîade_ù
[0] = '\0';

1116 
masquîade_p‹t
[0] = '\0';

1118 i‡(
exc⁄ãxt
->
eXé_å™•‹t
.
é_gë_masquîade_c⁄è˘
 !
NULL
) {

1119 
exc⁄ãxt
->
eXé_å™•‹t
.
	`é_gë_masquîade_c⁄è˘
”xc⁄ãxt, 
masquîade_ù
, (masquîade_ù), 
masquîade_p‹t
, (masquerade_port));

1122 i‡(
masquîade_p‹t
[0] != '\0') {

1123 
c⁄è˘_p‹t
 = 
masquîade_p‹t
;

1126 i‡(
c⁄è˘_p‹t
 =
NULL
 && 
ïhemîÆ_p‹t
 > 0) {

1127 
	`¢¥ötf
(
masquîade_p‹t
, (masquîade_p‹t), "%i", 
ïhemîÆ_p‹t
);

1128 
c⁄è˘_p‹t
 = 
masquîade_p‹t
;

1131 i‡(
c⁄è˘_p‹t
 =
NULL
 && 
exc⁄ãxt
->
eXé_å™•‹t
.
¥Ÿo_loˇl_p‹t
 > 0) {

1132 
	`¢¥ötf
(
masquîade_p‹t
, (masquîade_p‹t), "%i", 
exc⁄ãxt
->
eXé_å™•‹t
.
¥Ÿo_loˇl_p‹t
);

1133 
c⁄è˘_p‹t
 = 
masquîade_p‹t
;

1136 i‡(
masquîade_ù
[0] != '\0') {

1137 
c⁄è˘_ù
 = 
masquîade_ù
;

1140 
locù
[0] = '\0';

1141 
	`_eXosù_guess_ù_f‹_de°ö©i⁄sock
(
exc⁄ãxt
, 
Ámûy
, 
¥Ÿo
, 
udp_loˇl_böd
, 
sock
, 
ho°
, 
locù
, 49);

1143 i‡(
locù
[0] == '\0') {

1144 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip]ÇoÇetwork interface found\n"));

1145  
OSIP_NO_NETWORK
;

1149 i‡(
masquîade_ù
[0] !'\0' && 
sù
->
ªq_uri
 !
NULL
 && sù->ªq_uri->
ho°
 != NULL) {

1150 
c⁄è˘_ù
 = 
masquîade_ù
;

1153 i‡(
c⁄è˘_ù
 =
NULL
 || contact_ip[0] == '\0') {

1154 
c⁄è˘_ù
 = 
locù
;

1157 i‡(
c⁄è˘_ù
 =
NULL
) {

1158 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] missing ip for Contact header\n"));

1161 i‡(
c⁄è˘_p‹t
 =
NULL
) {

1162 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] missingÖort for Contact header\n"));

1165 i‡(
c⁄è˘_ù
 =
NULL
 || 
c⁄è˘_p‹t
 == NULL) {

1166  
OSIP_UNDEFINED_ERROR
;

1169 i‡(
	`osù_°rˇ£cmp
(
ac⁄è˘
->
uæ
->
ho°
, "999.999.999.999") == 0) {

1170 
	`osù_‰ì
(
ac⁄è˘
->
uæ
->
ho°
);

1171 
ac⁄è˘
->
uæ
->
ho°
 = 
	`osù_°rdup
(
c⁄è˘_ù
);

1174 i‡(
ac⁄è˘
->
uæ
->
p‹t
 !
NULL
 && 
	`osù_°rˇ£cmp
(acontact->url->port, "99999") == 0) {

1175 
	`osù_‰ì
(
ac⁄è˘
->
uæ
->
p‹t
);

1176 
ac⁄è˘
->
uæ
->
p‹t
 = 
	`osù_°rdup
(
c⁄è˘_p‹t
);

1179 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO1
, 
NULL
, "[eXosù] upd©ög: C⁄è˘ hódîÅÿ[%s][%s]\n", 
c⁄è˘_ù
, 
c⁄è˘_p‹t
));

1180 
	`osù_mesßge_f‹˚_upd©e
(
sù
);

1181  
OSIP_SUCCESS
;

1182 
	}
}

	@/home/unasaw/sip_project/libexosip2-5.3.0/src/jresponse.c

33 
	~"eXosù2.h
"

35 
	$_eXosù_buûd_ª•⁄£_deÁu…
(
eXosù_t
 *
exc⁄ãxt
, 
osù_mesßge_t
 **
de°
, 
osù_dülog_t
 *
dülog
, 
°©us
, osù_mesßge_à*
ªque°
) {

36 
osù_gíîic_∑øm_t
 *
èg
;

37 
osù_mesßge_t
 *
ª•⁄£
;

38 
i
;

40 *
de°
 = 
NULL
;

42 i‡(
ªque°
 =
NULL
)

43  
OSIP_BADPARAMETER
;

45 
i
 = 
	`osù_mesßge_öô
(&
ª•⁄£
);

47 i‡(
i
 != 0)

48  
i
;

53 
ª•⁄£
->
sù_vîsi⁄
 = (*Ë
	`osù_mÆloc
(8 * ());

55 i‡(
ª•⁄£
->
sù_vîsi⁄
 =
NULL
) {

56 
	`osù_mesßge_‰ì
(
ª•⁄£
);

57  
OSIP_NOMEM
;

60 
	`•rötf
(
ª•⁄£
->
sù_vîsi⁄
, "SIP/2.0");

61 
	`osù_mesßge_£t_°©us_code
(
ª•⁄£
, 
°©us
);

63 #i‚de‡
MINISIZE


66 i‡(
	`MSG_IS_NOTIFY
(
ªque°
Ë&& 
°©us
 == 481) {

67 
ª•⁄£
->
ªas⁄_phø£
 = 
	`osù_°rdup
("Subscription Does Not Exist");

69 } i‡(
	`MSG_IS_SUBSCRIBE
(
ªque°
Ë&& 
°©us
 == 202) {

70 
ª•⁄£
->
ªas⁄_phø£
 = 
	`osù_°rdup
("Accepted subscription");

73 
ª•⁄£
->
ªas⁄_phø£
 = 
	`osù_°rdup
(
	`osù_mesßge_gë_ªas⁄
(
°©us
));

75 i‡(
ª•⁄£
->
ªas⁄_phø£
 =
NULL
) {

76 i‡(
ª•⁄£
->
°©us_code
 == 101)

77 
ª•⁄£
->
ªas⁄_phø£
 = 
	`osù_°rdup
("Dialog Establishement");

80 
ª•⁄£
->
ªas⁄_phø£
 = 
	`osù_°rdup
("Unknown code");

83 
ª•⁄£
->
ªq_uri
 = 
NULL
;

84 
ª•⁄£
->
sù_mëhod
 = 
NULL
;

88 
ª•⁄£
->
ªas⁄_phø£
 = 
	`osù_°rdup
(
	`osù_mesßge_gë_ªas⁄
(
°©us
));

90 i‡(
ª•⁄£
->
ªas⁄_phø£
 =
NULL
) {

91 i‡(
ª•⁄£
->
°©us_code
 == 101)

92 
ª•⁄£
->
ªas⁄_phø£
 = 
	`osù_°rdup
("Dialog Establishement");

95 
ª•⁄£
->
ªas⁄_phø£
 = 
	`osù_°rdup
("Unknown code");

98 
ª•⁄£
->
ªq_uri
 = 
NULL
;

99 
ª•⁄£
->
sù_mëhod
 = 
NULL
;

102 i‡(
ª•⁄£
->
ªas⁄_phø£
 =
NULL
) {

103 
	`osù_mesßge_‰ì
(
ª•⁄£
);

104  
OSIP_NOMEM
;

107 
i
 = 
	`osù_to_˛⁄e
(
ªque°
->
to
, &(
ª•⁄£
->to));

109 i‡(
i
 != 0) {

110 
	`osù_mesßge_‰ì
(
ª•⁄£
);

111  
i
;

114 
i
 = 
	`osù_to_gë_èg
(
ª•⁄£
->
to
, &
èg
);

116 i‡(
i
 != 0) {

117 i‡((
dülog
 !
NULL
Ë&& (dülog->
loˇl_èg
 != NULL))

120 
	`osù_to_£t_èg
(
ª•⁄£
->
to
, 
	`osù_°rdup
(
dülog
->
loˇl_èg
));

123 i‡(
°©us
 != 100)

124 
	`osù_to_£t_èg
(
ª•⁄£
->
to
, 
	`_eXosù_mÆloc_√w_øndom
());

128 
i
 = 
	`osù_‰om_˛⁄e
(
ªque°
->
‰om
, &(
ª•⁄£
->from));

130 i‡(
i
 != 0) {

131 
	`osù_mesßge_‰ì
(
ª•⁄£
);

132  
i
;

136 
osù_li°_ôî©‹_t
 
ô
;

137 
osù_vü_t
 *
vü
 = (osù_vü_à*Ë
	`osù_li°_gë_fú°
(&
ªque°
->
vüs
, &
ô
);

139 
vü
 !
NULL
) {

140 
osù_vü_t
 *
vü2
;

142 
i
 = 
	`osù_vü_˛⁄e
(
vü
, &
vü2
);

144 i‡(
i
 != 0) {

145 
	`osù_mesßge_‰ì
(
ª•⁄£
);

146  
i
;

149 
	`osù_li°_add
(&
ª•⁄£
->
vüs
, 
vü2
, -1);

150 
vü
 = (
osù_vü_t
 *Ë
	`osù_li°_gë_√xt
(&
ô
);

154 
i
 = 
	`osù_ˇŒ_id_˛⁄e
(
ªque°
->
ˇŒ_id
, &(
ª•⁄£
->call_id));

156 i‡(
i
 != 0) {

157 
	`osù_mesßge_‰ì
(
ª•⁄£
);

158  
i
;

161 
i
 = 
	`osù_c£q_˛⁄e
(
ªque°
->
c£q
, &(
ª•⁄£
->cseq));

163 i‡(
i
 != 0) {

164 
	`osù_mesßge_‰ì
(
ª•⁄£
);

165  
i
;

168 #i‚de‡
MINISIZE


170 i‡(
	`MSG_IS_SUBSCRIBE
(
ªque°
)) {

171 
osù_hódî_t
 *
exp
;

172 
osù_hódî_t
 *
evt_hdr
;

174 
	`osù_mesßge_hódî_gë_by«me
(
ªque°
, "evít", 0, &
evt_hdr
);

176 i‡(
evt_hdr
 !
NULL
 &&Évt_hdr->
hvÆue
 != NULL)

177 
	`osù_mesßge_£t_hódî
(
ª•⁄£
, "Evít", 
evt_hdr
->
hvÆue
);

180 
	`osù_mesßge_£t_hódî
(
ª•⁄£
, "Event", "presence");

182 
i
 = 
	`osù_mesßge_gë_expúes
(
ªque°
, 0, &
exp
);

184 i‡(
exp
 =
NULL
) {

185 
osù_hódî_t
 *
˝
;

187 
i
 = 
	`osù_hódî_˛⁄e
(
exp
, &
˝
);

189 i‡(
˝
 !
NULL
)

190 
	`osù_li°_add
(&
ª•⁄£
->
hódîs
, 
˝
, 0);

196 
	`osù_mesßge_£t_u£r_agít
(
ª•⁄£
, 
exc⁄ãxt
->
u£r_agít
);

198 *
de°
 = 
ª•⁄£
;

199  
OSIP_SUCCESS
;

200 
	}
}

202 
	$_eXosù_com∂ëe_™swî_th©_e°ablish_a_dülog
(
eXosù_t
 *
exc⁄ãxt
, 
osù_mesßge_t
 *
ª•⁄£
, osù_mesßge_à*
ªque°
) {

203 
i
;

204 
rouã_found
 = 0;

205 
c⁄è˘
[1600];

206 
scheme
[10];

207 
osù_li°_ôî©‹_t
 
ô
;

208 
osù_ªc‹d_rouã_t
 *
º
;

210 
	`¢¥ötf
(
scheme
, (scheme), "sip");

216 
º
 = (
osù_ªc‹d_rouã_t
 *Ë
	`osù_li°_gë_fú°
(&
ªque°
->
ªc‹d_rouãs
, &
ô
);

218 
º
 !
NULL
) {

219 
osù_ªc‹d_rouã_t
 *
º2
;

221 
i
 = 
	`osù_ªc‹d_rouã_˛⁄e
(
º
, &
º2
);

223 i‡(
i
 != 0)

224  
i
;

226 
	`osù_li°_add
(&
ª•⁄£
->
ªc‹d_rouãs
, 
º2
, -1);

229 i‡(
ô
.
pos
 =0 && 
º2
 !
NULL
 &&Ñr2->
uæ
 !NULL &&Ñr2->uæ->
scheme
 !NULL && 
	`osù_°rˇ£cmp
(rr2->url->scheme, "sips") == 0)

230 
	`¢¥ötf
(
scheme
, (scheme), "sips");

232 
º
 = (
osù_ªc‹d_rouã_t
 *Ë
	`osù_li°_gë_√xt
(&
ô
);

233 
rouã_found
 = 1;

236 i‡(
	`MSG_IS_BYE
(
ªque°
)) {

237  
OSIP_SUCCESS
;

240 i‡(
rouã_found
 == 0) {

242 
osù_c⁄è˘_t
 *
co
 = (osù_c⁄è˘_à*Ë
	`osù_li°_gë
(&
ªque°
->
c⁄è˘s
, 0);

244 i‡(
co
 !
NULL
 && co->
uæ
 !NULL && co->uæ->
scheme
 !NULL && 
	`osù_°rˇ£cmp
(co->url->scheme, "sips") == 0)

245 
	`¢¥ötf
(
scheme
, (scheme), "sips");

249 i‡(
ªque°
->
ªq_uri
->
scheme
 !
NULL
 && 
	`osù_°rˇ£cmp
(request->req_uri->scheme, "sips") == 0)

250 
	`¢¥ötf
(
scheme
, (scheme), "sips");

253 i‡(
ªque°
->
to
->
uæ
->
u£∫ame
 =
NULL
)

254 
	`¢¥ötf
(
c⁄è˘
, 1000, "<%s:999.999.999.999:99999>", 
scheme
);

257 *
tmp2
 = 
	`__osù_uri_esˇ≥_u£röfo
(
ªque°
->
to
->
uæ
->
u£∫ame
);

259 
	`¢¥ötf
(
c⁄è˘
, 1000, "<%s:%s@999.999.999.999:99999>", 
scheme
, 
tmp2
);

260 
	`osù_‰ì
(
tmp2
);

264 
osù_vü_t
 *
vü
;

266 
vü
 = (
osù_vü_t
 *Ë
	`osù_li°_gë
(&
ª•⁄£
->
vüs
, 0);

268 i‡(
vü
 =
NULL
 || vü->
¥Ÿocﬁ
 == NULL)

269  
OSIP_SYNTAXERROR
;

271 i‡(
exc⁄ãxt
->
íabÀ_outbound
 == 1) {

272 
c⁄è˘
[
	`°æí
(contact) - 1] = '\0';

273 
	`°rˇt
(
c⁄è˘
, ";ob");

274 
	`°rˇt
(
c⁄è˘
, ">");

277 i‡(
	`°æí
(
c⁄è˘
Ë+ såÀn(
vü
->
¥Ÿocﬁ
Ë+ såÀn(";å™•‹t=>"Ë< 1024 && 0 !
	`osù_°rˇ£cmp
(via->protocol, "UDP")) {

278 
c⁄è˘
[
	`°æí
(contact) - 1] = '\0';

279 
	`°rˇt
(
c⁄è˘
, ";transport=");

280 
	`°rˇt
(
c⁄è˘
, 
vü
->
¥Ÿocﬁ
);

281 
	`°rˇt
(
c⁄è˘
, ">");

284 i‡(
exc⁄ãxt
->
sù_ö°™˚
[0] !0 && 
	`°æí
(
c⁄è˘
) + 285 < 1600) {

285 
	`°rˇt
(
c⁄è˘
, ";+sip.instance=\"<");

286 i‡(
	`°æí
(
exc⁄ãxt
->
sù_ö°™˚
) == 36 &&Éxcontext->sip_instance[8] == '-') {

287 
	`°rˇt
(
c⁄è˘
, "urn:uuid:");

289 
	`°rˇt
(
c⁄è˘
, 
exc⁄ãxt
->
sù_ö°™˚
);

290 
	`°rˇt
(
c⁄è˘
, ">\"");

293 i‡(
exc⁄ãxt
->
co_dülog_exåa_∑øms
[0] !0 && 
	`°æí
(
c⁄è˘
) + 542 < 1600) {

294 
	`°rˇt
(
c⁄è˘
, ";");

295 
	`°rˇt
(
c⁄è˘
, 
exc⁄ãxt
->
co_dülog_exåa_∑øms
);

299 
	`osù_mesßge_£t_c⁄è˘
(
ª•⁄£
, 
c⁄è˘
);

301 i‡(
exc⁄ãxt
->
deÁu…_c⁄è˘_di•œy«me
[0] != '\0') {

302 
osù_c⁄è˘_t
 *
√w_c⁄è˘
;

304 
	`osù_mesßge_gë_c⁄è˘
(
ª•⁄£
, 0, &
√w_c⁄è˘
);

306 i‡(
√w_c⁄è˘
 !
NULL
) {

307 
√w_c⁄è˘
->
di•œy«me
 = 
	`osù_°rdup
(
exc⁄ãxt
->
deÁu…_c⁄è˘_di•œy«me
);

311 i‡(
exc⁄ãxt
->
eXé_å™•‹t
.
_é_upd©e_c⁄è˘
 !
NULL
)

312 
exc⁄ãxt
->
eXé_å™•‹t
.
	`_é_upd©e_c⁄è˘
”xc⁄ãxt, 
ª•⁄£
);

314  
OSIP_SUCCESS
;

315 
	}
}

317 
	$_eXosù_™swî_övôe_123456xx
(
eXosù_t
 *
exc⁄ãxt
, 
eXosù_ˇŒ_t
 *
jc
, 
eXosù_dülog_t
 *
jd
, 
code
, 
osù_mesßge_t
 **
™swî
, 
£nd
) {

318 
i
;

319 
osù_å™ß˘i⁄_t
 *
å
;

321 *
™swî
 = 
NULL
;

322 
å
 = 
	`_eXosù_föd_œ°_öc_övôe
(
jc
, 
jd
);

324 i‡(
å
 =
NULL
 ||År->
‹ig_ªque°
 == NULL) {

325 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] cannot findÅransactionÅoánswer\n"));

326  
OSIP_NOTFOUND
;

329 i‡(
code
 >200 && codê< 300 && 
jd
 !
NULL
 && jd->
d_dülog
 == NULL) {

330 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] cannotánswerÅhis closedÅransaction\n"));

331  
OSIP_WRONG_STATE
;

335 i‡(
å
->
°©e
 =
IST_COMPLETED
 ||År->°©ê=
IST_CONFIRMED
 ||År->°©ê=
IST_TERMINATED
) {

336 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip]Åransactionálreadyánswered\n"));

337  
OSIP_WRONG_STATE
;

340 i‡(
jd
 =
NULL
)

341 
i
 = 
	`_eXosù_buûd_ª•⁄£_deÁu…
(
exc⁄ãxt
, 
™swî
, 
NULL
, 
code
, 
å
->
‹ig_ªque°
);

344 
i
 = 
	`_eXosù_buûd_ª•⁄£_deÁu…
(
exc⁄ãxt
, 
™swî
, 
jd
->
d_dülog
, 
code
, 
å
->
‹ig_ªque°
);

346 i‡(
i
 != 0) {

347 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO1
, 
NULL
, "[eXosip] cannot createÑesponse for invite\n"));

348 *
™swî
 = 
NULL
;

349  
i
;

354 i‡(
code
 > 100 && code < 300) {

355 
i
 = 
	`_eXosù_com∂ëe_™swî_th©_e°ablish_a_dülog
(
exc⁄ãxt
, *
™swî
, 
å
->
‹ig_ªque°
);

357 i‡(
i
 != 0) {

358 
	`osù_mesßge_‰ì
(*
™swî
);

359 *
™swî
 = 
NULL
;

360  
i
;

364 i‡(
£nd
 == 1) {

365 
osù_evít_t
 *
evt_™swî
;

367 i‡(
code
 >200 && codê< 300 && 
jd
 !
NULL
) {

368 
	`_eXosù_dülog_£t_200ok
(
jd
, *
™swî
);

370 
	`osù_dülog_£t_°©e
(
jd
->
d_dülog
, 
DIALOG_CONFIRMED
);

373 
evt_™swî
 = 
	`osù_√w_outgoög_sùmesßge
(*
™swî
);

374 
evt_™swî
->
å™ß˘i⁄id
 = 
å
->transactionid;

376 
	`osù_å™ß˘i⁄_add_evít
(
å
, 
evt_™swî
);

377 
	`_eXosù_wakeup
(
exc⁄ãxt
);

378 *
™swî
 = 
NULL
;

381  
OSIP_SUCCESS
;

382 
	}
}

384 #i‚de‡
MINISIZE


386 
	$_eXosù_ösubs¸ùti⁄_™swî_1xx
(
eXosù_t
 *
exc⁄ãxt
, 
eXosù_nŸify_t
 *
jn
, 
eXosù_dülog_t
 *
jd
, 
code
) {

387 
osù_evít_t
 *
evt_™swî
;

388 
osù_mesßge_t
 *
ª•⁄£
;

389 
i
;

390 
osù_å™ß˘i⁄_t
 *
å
;

392 
å
 = 
	`_eXosù_föd_œ°_öc_subs¸ibe
(
jn
, 
jd
);

394 i‡(
å
 =
NULL
) {

395 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] cannot findÅransactionÅoánswer"));

396  
OSIP_NOTFOUND
;

399 i‡(
jd
 =
NULL
)

400 
i
 = 
	`_eXosù_buûd_ª•⁄£_deÁu…
(
exc⁄ãxt
, &
ª•⁄£
, 
NULL
, 
code
, 
å
->
‹ig_ªque°
);

403 
i
 = 
	`_eXosù_buûd_ª•⁄£_deÁu…
(
exc⁄ãxt
, &
ª•⁄£
, 
jd
->
d_dülog
, 
code
, 
å
->
‹ig_ªque°
);

405 i‡(
i
 != 0) {

406 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] cannot createÑesponse for subscribe\n"));

407  
i
;

410 i‡(
code
 > 100) {

413 
i
 = 
	`_eXosù_com∂ëe_™swî_th©_e°ablish_a_dülog
(
exc⁄ãxt
, 
ª•⁄£
, 
å
->
‹ig_ªque°
);

415 i‡(
i
 != 0) {

418 i‡(
jd
 =
NULL
) {

419 
i
 = 
	`_eXosù_dülog_öô_as_uas
(&
jd
, 
å
->
‹ig_ªque°
, 
ª•⁄£
);

421 i‡(
i
 != 0) {

422 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] cannot create dialog\n"));

425 
	`ADD_ELEMENT
(
jn
->
n_dülogs
, 
jd
);

429 
evt_™swî
 = 
	`osù_√w_outgoög_sùmesßge
(
ª•⁄£
);

430 
evt_™swî
->
å™ß˘i⁄id
 = 
å
->transactionid;

432 
	`osù_å™ß˘i⁄_add_evít
(
å
, 
evt_™swî
);

433 
	`_eXosù_wakeup
(
exc⁄ãxt
);

434  
i
;

435 
	}
}

437 
	$_eXosù_ösubs¸ùti⁄_™swî_3456xx
(
eXosù_t
 *
exc⁄ãxt
, 
eXosù_nŸify_t
 *
jn
, 
eXosù_dülog_t
 *
jd
, 
code
) {

438 
osù_evít_t
 *
evt_™swî
;

439 
osù_mesßge_t
 *
ª•⁄£
;

440 
i
;

441 
osù_å™ß˘i⁄_t
 *
å
;

443 
å
 = 
	`_eXosù_föd_œ°_öc_subs¸ibe
(
jn
, 
jd
);

445 i‡(
å
 =
NULL
) {

446 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] cannot findÅransactionÅoánswer"));

447  
OSIP_NOTFOUND
;

450 i‡(
jd
 =
NULL
)

451 
i
 = 
	`_eXosù_buûd_ª•⁄£_deÁu…
(
exc⁄ãxt
, &
ª•⁄£
, 
NULL
, 
code
, 
å
->
‹ig_ªque°
);

454 
i
 = 
	`_eXosù_buûd_ª•⁄£_deÁu…
(
exc⁄ãxt
, &
ª•⁄£
, 
jd
->
d_dülog
, 
code
, 
å
->
‹ig_ªque°
);

456 i‡(
i
 != 0) {

457 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO1
, 
NULL
, "[eXosip] cannot createÑesponse for subscribe\n"));

458  
i
;

461 i‡((300 <
code
) && (code <= 399)) {

466 
evt_™swî
 = 
	`osù_√w_outgoög_sùmesßge
(
ª•⁄£
);

467 
evt_™swî
->
å™ß˘i⁄id
 = 
å
->transactionid;

469 
	`osù_å™ß˘i⁄_add_evít
(
å
, 
evt_™swî
);

470 
	`_eXosù_wakeup
(
exc⁄ãxt
);

471  
OSIP_SUCCESS
;

472 
	}
}

	@/home/unasaw/sip_project/libexosip2-5.3.0/src/jsubscribe.c

33 
	~"eXosù2.h
"

35 #i‚de‡
MINISIZE


37 
osù_å™ß˘i⁄_t
 *
	$_eXosù_föd_œ°_out_subs¸ibe
(
eXosù_subs¸ibe_t
 *
js
, 
eXosù_dülog_t
 *
jd
) {

38 
osù_å™ß˘i⁄_t
 *
out_å
;

40 
out_å
 = 
NULL
;

42 i‡(
jd
 !
NULL
) {

43 
osù_li°_ôî©‹_t
 
ô
;

45 
out_å
 = (
osù_å™ß˘i⁄_t
 *Ë
	`osù_li°_gë_fú°
(
jd
->
d_out_ås
, &
ô
);

47 
out_å
 !
OSIP_SUCCESS
) {

48 i‡(0 =
	`°rcmp
(
out_å
->
c£q
->
mëhod
, "SUBSCRIBE"))

51 i‡(0 =
	`°rcmp
(
out_å
->
c£q
->
mëhod
, "REFER"))

54 
out_å
 = (
osù_å™ß˘i⁄_t
 *Ë
	`osù_li°_gë_√xt
(&
ô
);

58 i‡(
out_å
 =
NULL
)

59  
js
->
s_out_å
;

61  
out_å
;

62 
	}
}

64 
osù_å™ß˘i⁄_t
 *
	$_eXosù_föd_œ°_öc_nŸify
(
eXosù_dülog_t
 *
jd
) {

65 
osù_å™ß˘i⁄_t
 *
out_å
;

67 
out_å
 = 
NULL
;

69 i‡(
jd
 !
NULL
) {

70 
osù_li°_ôî©‹_t
 
ô
;

72 
out_å
 = (
osù_å™ß˘i⁄_t
 *Ë
	`osù_li°_gë_fú°
(
jd
->
d_out_ås
, &
ô
);

74 
out_å
 !
OSIP_SUCCESS
) {

75 i‡(0 =
	`°rcmp
(
out_å
->
c£q
->
mëhod
, "NOTIFY"))

76  
out_å
;

78 
out_å
 = (
osù_å™ß˘i⁄_t
 *Ë
	`osù_li°_gë_√xt
(&
ô
);

82  
NULL
;

83 
	}
}

85 
	$_eXosù_subs¸ùti⁄_öô
(
eXosù_t
 *
exc⁄ãxt
, 
eXosù_subs¸ibe_t
 **
js
) {

86 *
js
 = (
eXosù_subs¸ibe_t
 *Ë
	`osù_mÆloc
((eXosip_subscribe_t));

88 i‡(*
js
 =
NULL
)

89  
OSIP_NOMEM
;

91 
	`mem£t
(*
js
, 0, (
eXosù_subs¸ibe_t
));

93 #i‚de‡
MINISIZE


95 
timevÆ
 
now
;

97 
exc⁄ãxt
->
°©i°ics
.
Æloˇãd_subs¸ùti⁄s
++;

98 
	`osù_gëtimeofday
(&
now
, 
NULL
);

99 
	`_eXosù_cou¡îs_upd©e
(&
exc⁄ãxt
->
avîage_subs¸ùti⁄s
, 1, &
now
);

102  
OSIP_SUCCESS
;

103 
	}
}

105 
	$_eXosù_subs¸ùti⁄_‰ì
(
eXosù_t
 *
exc⁄ãxt
, 
eXosù_subs¸ibe_t
 *
js
) {

106 
eXosù_dülog_t
 *
jd
;

108 i‡(
js
->
s_öc_å
 !
NULL
 && js->s_öc_å->
‹ig_ªque°
 !NULL && js->s_öc_å->‹ig_ªque°->
ˇŒ_id
 !NULL && js->s_öc_å->‹ig_ªque°->ˇŒ_id->
numbî
 != NULL)

109 
	`_eXosù_dñëe_n⁄˚
(
exc⁄ãxt
, 
js
->
s_öc_å
->
‹ig_ªque°
->
ˇŒ_id
->
numbî
);

111 i‡(
js
->
s_out_å
 !
NULL
 && js->s_out_å->
‹ig_ªque°
 !NULL && js->s_out_å->‹ig_ªque°->
ˇŒ_id
 !NULL && js->s_out_å->‹ig_ªque°->ˇŒ_id->
numbî
 != NULL)

112 
	`_eXosù_dñëe_n⁄˚
(
exc⁄ãxt
, 
js
->
s_out_å
->
‹ig_ªque°
->
ˇŒ_id
->
numbî
);

114 
jd
 = 
js
->
s_dülogs
; jd !
NULL
; jd = js->s_dialogs) {

115 
	`REMOVE_ELEMENT
(
js
->
s_dülogs
, 
jd
);

116 
	`_eXosù_dülog_‰ì
(
exc⁄ãxt
, 
jd
);

119 
	`_eXosù_dñëe_ª£rved
(
js
->
s_öc_å
);

120 
	`_eXosù_dñëe_ª£rved
(
js
->
s_out_å
);

122 i‡(
js
->
s_öc_å
 !
NULL
)

123 
	`osù_li°_add
(&
exc⁄ãxt
->
j_å™ß˘i⁄s
, 
js
->
s_öc_å
, 0);

125 i‡(
js
->
s_out_å
 !
NULL
)

126 
	`osù_li°_add
(&
exc⁄ãxt
->
j_å™ß˘i⁄s
, 
js
->
s_out_å
, 0);

128 
	`osù_‰ì
(
js
);

129 #i‚de‡
MINISIZE


130 
exc⁄ãxt
->
°©i°ics
.
Æloˇãd_subs¸ùti⁄s
--;

132 
	}
}

134 
	$_eXosù_subs¸ùti⁄_£t_ª‰esh_öãrvÆ
(
eXosù_subs¸ibe_t
 *
js
, 
osù_mesßge_t
 *
out_subs¸ibe
) {

135 
osù_hódî_t
 *
exp
;

137 i‡(
js
 =
NULL
 || 
out_subs¸ibe
 == NULL)

138  
OSIP_BADPARAMETER
;

140 
	`osù_mesßge_gë_expúes
(
out_subs¸ibe
, 0, &
exp
);

142 i‡(
exp
 !
NULL
 &&Éxp->
hvÆue
 != NULL) {

143 
vÆ
 = 
	`osù_©oi
(
exp
->
hvÆue
);

145 i‡(
vÆ
 == 0)

146 
js
->
s_ªg_≥riod
 = 0;

148 i‡(
vÆ
 < 
js
->
s_ªg_≥riod
 - 15)

149 
js
->
s_ªg_≥riod
 = 
vÆ
;

152  
OSIP_SUCCESS
;

153 
	}
}

	@/home/unasaw/sip_project/libexosip2-5.3.0/src/milenage.c

18 
	~"mûíage.h
"

19 
	~"rijnd´l.h
"

27 
u8
 
	gOP
[16] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

43 
	$f1
(
u8
 
k
[16], u8 
ønd
[16], u8 
sqn
[6], u8 
amf
[2], u8 
mac_a
[8]) {

44 
u8
 
›_c
[16];

45 
u8
 
ãmp
[16];

46 
u8
 
ö1
[16];

47 
u8
 
out1
[16];

48 
u8
 
rijnd´lI≈ut
[16];

49 
u8
 
i
;

51 
	`Rijnd´lKeyScheduÀ
(
k
);

53 
	`CompuãOPc
(
›_c
);

55 
i
 = 0; i < 16; i++)

56 
rijnd´lI≈ut
[
i
] = 
ønd
[i] ^ 
›_c
[i];

58 
	`Rijnd´lEn¸y±
(
rijnd´lI≈ut
, 
ãmp
);

60 
i
 = 0; i < 6; i++) {

61 
ö1
[
i
] = 
sqn
[i];

62 
ö1
[
i
 + 8] = 
sqn
[i];

65 
i
 = 0; i < 2; i++) {

66 
ö1
[
i
 + 6] = 
amf
[i];

67 
ö1
[
i
 + 14] = 
amf
[i];

73 
i
 = 0; i < 16; i++)

74 
rijnd´lI≈ut
[(
i
 + 8Ë% 16] = 
ö1
[i] ^ 
›_c
[i];

78 
i
 = 0; i < 16; i++)

79 
rijnd´lI≈ut
[
i
] ^
ãmp
[i];

81 
	`Rijnd´lEn¸y±
(
rijnd´lI≈ut
, 
out1
);

83 
i
 = 0; i < 16; i++)

84 
out1
[
i
] ^
›_c
[i];

86 
i
 = 0; i < 8; i++)

87 
mac_a
[
i
] = 
out1
[i];

90 
	}
}

101 
	$f2345
(
u8
 
k
[16], u8 
ønd
[16], u8 
ªs
[8], u8 
ck
[16], u8 
ik
[16], u8 
ak
[6]) {

102 
u8
 
›_c
[16];

103 
u8
 
ãmp
[16];

104 
u8
 
out
[16];

105 
u8
 
rijnd´lI≈ut
[16];

106 
u8
 
i
;

108 
	`Rijnd´lKeyScheduÀ
(
k
);

110 
	`CompuãOPc
(
›_c
);

112 
i
 = 0; i < 16; i++)

113 
rijnd´lI≈ut
[
i
] = 
ønd
[i] ^ 
›_c
[i];

115 
	`Rijnd´lEn¸y±
(
rijnd´lI≈ut
, 
ãmp
);

121 
i
 = 0; i < 16; i++)

122 
rijnd´lI≈ut
[
i
] = 
ãmp
[i] ^ 
›_c
[i];

124 
rijnd´lI≈ut
[15] ^= 1;

126 
	`Rijnd´lEn¸y±
(
rijnd´lI≈ut
, 
out
);

128 
i
 = 0; i < 16; i++)

129 
out
[
i
] ^
›_c
[i];

131 
i
 = 0; i < 8; i++)

132 
ªs
[
i
] = 
out
[i + 8];

134 
i
 = 0; i < 6; i++)

135 
ak
[
i
] = 
out
[i];

141 
i
 = 0; i < 16; i++)

142 
rijnd´lI≈ut
[(
i
 + 12Ë% 16] = 
ãmp
[i] ^ 
›_c
[i];

144 
rijnd´lI≈ut
[15] ^= 2;

146 
	`Rijnd´lEn¸y±
(
rijnd´lI≈ut
, 
out
);

148 
i
 = 0; i < 16; i++)

149 
out
[
i
] ^
›_c
[i];

151 
i
 = 0; i < 16; i++)

152 
ck
[
i
] = 
out
[i];

158 
i
 = 0; i < 16; i++)

159 
rijnd´lI≈ut
[(
i
 + 8Ë% 16] = 
ãmp
[i] ^ 
›_c
[i];

161 
rijnd´lI≈ut
[15] ^= 4;

163 
	`Rijnd´lEn¸y±
(
rijnd´lI≈ut
, 
out
);

165 
i
 = 0; i < 16; i++)

166 
out
[
i
] ^
›_c
[i];

168 
i
 = 0; i < 16; i++)

169 
ik
[
i
] = 
out
[i];

172 
	}
}

184 
	$f1°¨
(
u8
 
k
[16], u8 
ønd
[16], u8 
sqn
[6], u8 
amf
[2], u8 
mac_s
[8]) {

185 
u8
 
›_c
[16];

186 
u8
 
ãmp
[16];

187 
u8
 
ö1
[16];

188 
u8
 
out1
[16];

189 
u8
 
rijnd´lI≈ut
[16];

190 
u8
 
i
;

192 
	`Rijnd´lKeyScheduÀ
(
k
);

194 
	`CompuãOPc
(
›_c
);

196 
i
 = 0; i < 16; i++)

197 
rijnd´lI≈ut
[
i
] = 
ønd
[i] ^ 
›_c
[i];

199 
	`Rijnd´lEn¸y±
(
rijnd´lI≈ut
, 
ãmp
);

201 
i
 = 0; i < 6; i++) {

202 
ö1
[
i
] = 
sqn
[i];

203 
ö1
[
i
 + 8] = 
sqn
[i];

206 
i
 = 0; i < 2; i++) {

207 
ö1
[
i
 + 6] = 
amf
[i];

208 
ö1
[
i
 + 14] = 
amf
[i];

214 
i
 = 0; i < 16; i++)

215 
rijnd´lI≈ut
[(
i
 + 8Ë% 16] = 
ö1
[i] ^ 
›_c
[i];

219 
i
 = 0; i < 16; i++)

220 
rijnd´lI≈ut
[
i
] ^
ãmp
[i];

222 
	`Rijnd´lEn¸y±
(
rijnd´lI≈ut
, 
out1
);

224 
i
 = 0; i < 16; i++)

225 
out1
[
i
] ^
›_c
[i];

227 
i
 = 0; i < 8; i++)

228 
mac_s
[
i
] = 
out1
[i + 8];

231 
	}
}

242 
	$f5°¨
(
u8
 
k
[16], u8 
ønd
[16], u8 
ak
[6]) {

243 
u8
 
›_c
[16];

244 
u8
 
ãmp
[16];

245 
u8
 
out
[16];

246 
u8
 
rijnd´lI≈ut
[16];

247 
u8
 
i
;

249 
	`Rijnd´lKeyScheduÀ
(
k
);

251 
	`CompuãOPc
(
›_c
);

253 
i
 = 0; i < 16; i++)

254 
rijnd´lI≈ut
[
i
] = 
ønd
[i] ^ 
›_c
[i];

256 
	`Rijnd´lEn¸y±
(
rijnd´lI≈ut
, 
ãmp
);

262 
i
 = 0; i < 16; i++)

263 
rijnd´lI≈ut
[(
i
 + 4Ë% 16] = 
ãmp
[i] ^ 
›_c
[i];

265 
rijnd´lI≈ut
[15] ^= 8;

267 
	`Rijnd´lEn¸y±
(
rijnd´lI≈ut
, 
out
);

269 
i
 = 0; i < 16; i++)

270 
out
[
i
] ^
›_c
[i];

272 
i
 = 0; i < 6; i++)

273 
ak
[
i
] = 
out
[i];

276 
	}
}

283 
	$CompuãOPc
(
u8
 
›_c
[16]) {

284 
u8
 
i
;

286 
	`Rijnd´lEn¸y±
(
OP
, 
›_c
);

288 
i
 = 0; i < 16; i++)

289 
›_c
[
i
] ^
OP
[i];

292 
	}
}

	@/home/unasaw/sip_project/libexosip2-5.3.0/src/milenage.h

18 #i‚de‡
MILENAGE_H


19 
	#MILENAGE_H


	)

21 
	tu8
;

23 
f1
(
u8
 
k
[16], u8 
ønd
[16], u8 
sqn
[6], u8 
amf
[2], u8 
mac_a
[8]);

24 
f2345
(
u8
 
k
[16], u8 
ønd
[16], u8 
ªs
[8], u8 
ck
[16], u8 
ik
[16], u8 
ak
[6]);

25 
f1°¨
(
u8
 
k
[16], u8 
ønd
[16], u8 
sqn
[6], u8 
amf
[2], u8 
mac_s
[8]);

26 
f5°¨
(
u8
 
k
[16], u8 
ønd
[16], u8 
ak
[6]);

27 
CompuãOPc
(
u8
 
›_c
[16]);

	@/home/unasaw/sip_project/libexosip2-5.3.0/src/misc.c

33 
	~"eXosù2.h
"

37 
	$_eXosù_ªmove_å™ß˘i⁄_‰om_ˇŒ
(
osù_å™ß˘i⁄_t
 *
å
, 
eXosù_ˇŒ_t
 *
jc
) {

38 
osù_å™ß˘i⁄_t
 *
öc_å
;

39 
osù_å™ß˘i⁄_t
 *
out_å
;

40 
eXosù_dülog_t
 *
jd
;

42 i‡(
jc
->
c_öc_å
 =
å
) {

43 
jc
->
c_öc_å
 = 
NULL
;

44  
OSIP_SUCCESS
;

47 
jd
 = 
jc
->
c_dülogs
; jd !
NULL
; jd = jd->
√xt
) {

48 
osù_li°_ôî©‹_t
 
ô
;

50 
öc_å
 = (
osù_å™ß˘i⁄_t
 *Ë
	`osù_li°_gë_fú°
(
jd
->
d_öc_ås
, &
ô
);

52 
öc_å
 !
OSIP_SUCCESS
) {

53 i‡(
öc_å
 =
å
) {

54 
	`osù_li°_ôî©‹_ªmove
(&
ô
);

55  
OSIP_SUCCESS
;

58 
öc_å
 = (
osù_å™ß˘i⁄_t
 *Ë
	`osù_li°_gë_√xt
(&
ô
);

62 i‡(
jc
->
c_out_å
 =
å
) {

63 
jc
->
c_out_å
 = 
NULL
;

64  
OSIP_SUCCESS
;

67 
jd
 = 
jc
->
c_dülogs
; jd !
NULL
; jd = jd->
√xt
) {

68 
osù_li°_ôî©‹_t
 
ô
;

70 
out_å
 = (
osù_å™ß˘i⁄_t
 *Ë
	`osù_li°_gë_fú°
(
jd
->
d_out_ås
, &
ô
);

72 
out_å
 !
OSIP_SUCCESS
) {

73 i‡(
out_å
 =
å
) {

74 
	`osù_li°_ôî©‹_ªmove
(&
ô
);

75  
OSIP_SUCCESS
;

78 
out_å
 = (
osù_å™ß˘i⁄_t
 *Ë
	`osù_li°_gë_√xt
(&
ô
);

82 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO1
, 
NULL
, "[eXosip]Ço information\n"));

83  
OSIP_NOTFOUND
;

84 
	}
}

86 
osù_å™ß˘i⁄_t
 *
	$_eXosù_föd_œ°_å™ß˘i⁄
(
eXosù_ˇŒ_t
 *
jc
, 
eXosù_dülog_t
 *
jd
, c⁄° *
mëhod
) {

87 
osù_å™ß˘i⁄_t
 *
öc_å
;

88 
osù_å™ß˘i⁄_t
 *
out_å
;

90 
öc_å
 = 
	`_eXosù_föd_œ°_öc_å™ß˘i⁄
(
jd
, 
mëhod
);

91 
out_å
 = 
	`_eXosù_föd_œ°_out_å™ß˘i⁄
(
jc
, 
jd
, 
mëhod
);

93 i‡(
öc_å
 =
NULL
)

94  
out_å
;

96 i‡(
out_å
 =
NULL
)

97  
öc_å
;

99 i‡(
öc_å
->
búth_time
 > 
out_å
->birth_time)

100  
öc_å
;

102  
out_å
;

103 
	}
}

105 
osù_å™ß˘i⁄_t
 *
	$_eXosù_föd_œ°_öc_å™ß˘i⁄
(
eXosù_dülog_t
 *
jd
, c⁄° *
mëhod
) {

106 
osù_å™ß˘i⁄_t
 *
öc_å
;

108 
öc_å
 = 
NULL
;

110 i‡(
mëhod
 =
NULL
 || method[0] == '\0')

111  
NULL
;

113 i‡(
jd
 !
NULL
) {

114 
osù_li°_ôî©‹_t
 
ô
;

116 
öc_å
 = (
osù_å™ß˘i⁄_t
 *Ë
	`osù_li°_gë_fú°
(
jd
->
d_öc_ås
, &
ô
);

118 
öc_å
 !
OSIP_SUCCESS
) {

119 i‡(0 =
	`osù_°rˇ£cmp
(
öc_å
->
c£q
->
mëhod
, method))

122 
öc_å
 = (
osù_å™ß˘i⁄_t
 *Ë
	`osù_li°_gë_√xt
(&
ô
);

126  
öc_å
;

127 
	}
}

129 
osù_å™ß˘i⁄_t
 *
	$_eXosù_föd_œ°_out_å™ß˘i⁄
(
eXosù_ˇŒ_t
 *
jc
, 
eXosù_dülog_t
 *
jd
, c⁄° *
mëhod
) {

130 
osù_å™ß˘i⁄_t
 *
out_å
;

132 
out_å
 = 
NULL
;

134 i‡(
jd
 =
NULL
 && 
jc
 == NULL)

135  
NULL
;

137 i‡(
mëhod
 =
NULL
 || method[0] == '\0')

138  
NULL
;

140 i‡(
jd
 !
NULL
) {

141 
osù_li°_ôî©‹_t
 
ô
;

143 
out_å
 = (
osù_å™ß˘i⁄_t
 *Ë
	`osù_li°_gë_fú°
(
jd
->
d_out_ås
, &
ô
);

145 
out_å
 !
OSIP_SUCCESS
) {

146 i‡(0 =
	`osù_°rˇ£cmp
(
out_å
->
c£q
->
mëhod
, method))

149 
out_å
 = (
osù_å™ß˘i⁄_t
 *Ë
	`osù_li°_gë_√xt
(&
ô
);

153  
out_å
;

154 
	}
}

156 
osù_å™ß˘i⁄_t
 *
	$_eXosù_föd_œ°_övôe
(
eXosù_ˇŒ_t
 *
jc
, 
eXosù_dülog_t
 *
jd
) {

157 
osù_å™ß˘i⁄_t
 *
öc_å
;

158 
osù_å™ß˘i⁄_t
 *
out_å
;

160 
öc_å
 = 
	`_eXosù_föd_œ°_öc_övôe
(
jc
, 
jd
);

161 
out_å
 = 
	`_eXosù_föd_œ°_out_övôe
(
jc
, 
jd
);

163 i‡(
öc_å
 =
NULL
)

164  
out_å
;

166 i‡(
out_å
 =
NULL
)

167  
öc_å
;

169 i‡(
öc_å
->
búth_time
 > 
out_å
->birth_time)

170  
öc_å
;

172  
out_å
;

173 
	}
}

175 
osù_å™ß˘i⁄_t
 *
	$_eXosù_föd_œ°_öc_övôe
(
eXosù_ˇŒ_t
 *
jc
, 
eXosù_dülog_t
 *
jd
) {

176 
osù_å™ß˘i⁄_t
 *
öc_å
;

178 
öc_å
 = 
NULL
;

180 i‡(
jd
 !
NULL
) {

181 
osù_li°_ôî©‹_t
 
ô
;

183 
öc_å
 = (
osù_å™ß˘i⁄_t
 *Ë
	`osù_li°_gë_fú°
(
jd
->
d_öc_ås
, &
ô
);

185 
öc_å
 !
OSIP_SUCCESS
) {

186 i‡(0 =
	`°rcmp
(
öc_å
->
c£q
->
mëhod
, "INVITE"))

189 
öc_å
 = (
osù_å™ß˘i⁄_t
 *Ë
	`osù_li°_gë_√xt
(&
ô
);

193 i‡(
öc_å
 =
NULL
)

194  
jc
->
c_öc_å
;

196  
öc_å
;

197 
	}
}

199 
osù_å™ß˘i⁄_t
 *
	$_eXosù_föd_œ°_out_övôe
(
eXosù_ˇŒ_t
 *
jc
, 
eXosù_dülog_t
 *
jd
) {

200 
osù_å™ß˘i⁄_t
 *
out_å
;

202 
out_å
 = 
NULL
;

204 i‡(
jd
 =
NULL
 && 
jc
 == NULL)

205  
NULL
;

207 i‡(
jd
 !
NULL
) {

208 
osù_li°_ôî©‹_t
 
ô
;

210 
out_å
 = (
osù_å™ß˘i⁄_t
 *Ë
	`osù_li°_gë_fú°
(
jd
->
d_out_ås
, &
ô
);

212 
out_å
 !
OSIP_SUCCESS
) {

213 i‡(0 =
	`°rcmp
(
out_å
->
c£q
->
mëhod
, "INVITE"))

216 
out_å
 = (
osù_å™ß˘i⁄_t
 *Ë
	`osù_li°_gë_√xt
(&
ô
);

220 i‡(
out_å
 =
NULL
)

221  
jc
->
c_out_å
;

223  
out_å
;

224 
	}
}

226 #i‚de‡
MINISIZE


228 
osù_å™ß˘i⁄_t
 *
	$_eXosù_föd_¥evious_övôe
(
eXosù_ˇŒ_t
 *
jc
, 
eXosù_dülog_t
 *
jd
, 
osù_å™ß˘i⁄_t
 *
œ°_övôe
) {

229 
osù_å™ß˘i⁄_t
 *
öc_å
;

230 
osù_å™ß˘i⁄_t
 *
out_å
;

232 
öc_å
 = 
NULL
;

234 i‡(
jd
 !
NULL
) {

235 
osù_li°_ôî©‹_t
 
ô
;

237 
öc_å
 = (
osù_å™ß˘i⁄_t
 *Ë
	`osù_li°_gë_fú°
(
jd
->
d_öc_ås
, &
ô
);

239 
öc_å
 !
OSIP_SUCCESS
) {

240 i‡(
öc_å
 !
œ°_övôe
) {

242 i‡(0 =
	`°rcmp
(
öc_å
->
c£q
->
mëhod
, "INVITE"))

246 
öc_å
 = (
osù_å™ß˘i⁄_t
 *Ë
	`osù_li°_gë_√xt
(&
ô
);

250 i‡(
öc_å
 =
NULL
)

251 
öc_å
 = 
jc
->
c_öc_å
;

253 i‡(
öc_å
 =
œ°_övôe
) {

255 
öc_å
 = 
NULL
;

258 
out_å
 = 
NULL
;

260 i‡(
jd
 !
NULL
) {

261 
osù_li°_ôî©‹_t
 
ô
;

263 
out_å
 = (
osù_å™ß˘i⁄_t
 *Ë
	`osù_li°_gë_fú°
(
jd
->
d_out_ås
, &
ô
);

265 
out_å
 !
OSIP_SUCCESS
) {

266 i‡(
out_å
 =
œ°_övôe
) {

268 
out_å
 = 
NULL
;

270 } i‡(0 =
	`°rcmp
(
out_å
->
c£q
->
mëhod
, "INVITE"))

273 
out_å
 = (
osù_å™ß˘i⁄_t
 *Ë
	`osù_li°_gë_√xt
(&
ô
);

277 i‡(
out_å
 =
NULL
)

278 
out_å
 = 
jc
->
c_out_å
;

280 i‡(
out_å
 =
œ°_övôe
) {

282 
out_å
 = 
NULL
;

285 i‡(
öc_å
 =
NULL
)

286  
out_å
;

288 i‡(
out_å
 =
NULL
)

289  
öc_å
;

291 i‡(
öc_å
->
búth_time
 > 
out_å
->birth_time)

292  
öc_å
;

294  
out_å
;

295 
	}
}

	@/home/unasaw/sip_project/libexosip2-5.3.0/src/rijndael.c

21 
	#LITTLE_ENDIAN


	)

23 
	tu8
;

24 
	tu32
;

26 
	~"rijnd´l.h
"

30 
	#rŸ1
(
x
Ë((x << 8Ë| (x >> 24))

	)

31 
	#rŸ2
(
x
Ë((x << 16Ë| (x >> 16))

	)

32 
	#rŸ3
(
x
Ë((x << 24Ë| (x >> 8))

	)

36 
	#byã0
(
x
Ë((
u8
)(x))

	)

37 
	#byã1
(
x
Ë((
u8
)(x >> 8))

	)

38 
	#byã2
(
x
Ë((
u8
)(x >> 16))

	)

39 
	#byã3
(
x
Ë((
u8
)(x >> 24))

	)

44 #ifde‡
LITTLE_ENDIAN


46 
	#u32_ö
(
x
Ë(*(
u32
 *Ë(x))

	)

47 
	#u32_out
(
x
, 
y
Ë(*(
u32
 *Ë(xËy)

	)

53 
__ölöe
 
u32
 
	$byã_sw≠
(c⁄° 
u32
 
x
) {

54  
	`rŸ1
(
x
Ë& 0x00ff00f‡| 
	`rŸ3
(x) & 0xff00ff00;

55 
	}
}

57 
__ölöe
 
u32
 
	$u32_ö
(c⁄° 
u8
 
x
[]) {

58  
	`byã_sw≠
(*(
u32
 *Ë
x
);

59 
	}
};

61 
__ölöe
 
	$u32_out
(
u8
 
x
[], c⁄° 
u32
 
v
) {

62 *(
u32
 *Ë
x
 = 
	`byã_sw≠
(
v
);

63 
	}
};

69 
u32
 
	g∫d_c⁄
[10] = {0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1B, 0x36};

71 
u32
 
	g·_èb
[4][256] = {

125 
u32
 
	gÊ_èb
[4][256] = {

181 
u32
 
	gEkey
[44];

184 
	#f_∫d
(
x
, 
n
Ë(
·_èb
[0][
	`byã0
(x[n])] ^ ft_èb[1][
	`byã1
(x[“ + 1Ë& 3])] ^ ft_èb[2][
	`byã2
(x[“ + 2Ë& 3])] ^ ft_èb[3][
	`byã3
(x[“ + 3Ë& 3])])

	)

186 
	#f_round
(
bo
, 
bi
, 
k
) \

187 
bo
[0] = 
	`f_∫d
(
bi
, 0Ë^ 
k
[0]; \

188 
bo
[1] = 
	`f_∫d
(
bi
, 1Ë^ 
k
[1]; \

189 
bo
[2] = 
	`f_∫d
(
bi
, 2Ë^ 
k
[2]; \

190 
bo
[3] = 
	`f_∫d
(
bi
, 3Ë^ 
k
[3]; \

191 
k
 +4

	)

194 
	#ls_box
(
x
Ë(
Ê_èb
[0][
	`byã0
(x)] ^ fl_èb[1][
	`byã1
(x)] ^ fl_èb[2][
	`byã2
(x)] ^ fl_èb[3][
	`byã3
(x)])

	)

197 
	#lf_∫d
(
x
, 
n
Ë(
Ê_èb
[0][
	`byã0
(x[n])] ^ fl_èb[1][
	`byã1
(x[“ + 1Ë& 3])] ^ fl_èb[2][
	`byã2
(x[“ + 2Ë& 3])] ^ fl_èb[3][
	`byã3
(x[“ + 3Ë& 3])])

	)

203 
	$Rijnd´lKeyScheduÀ
(
u8
 
key
[16]) {

204 
u32
 
t
;

205 
u32
 *
ek
 = 
Ekey
,

206 *
rc
 = 
∫d_c⁄
;

208 
Ekey
[0] = 
	`u32_ö
(
key
);

209 
Ekey
[1] = 
	`u32_ö
(
key
 + 4);

210 
Ekey
[2] = 
	`u32_ö
(
key
 + 8);

211 
Ekey
[3] = 
	`u32_ö
(
key
 + 12);

213 
ek
 < 
Ekey
 + 40) {

214 
t
 = 
	`rŸ3
(
ek
[3]);

215 
ek
[4] =Ék[0] ^ 
	`ls_box
(
t
Ë^ *
rc
++;

216 
ek
[5] =Ék[1] ^Ék[4];

217 
ek
[6] =Ék[2] ^Ék[5];

218 
ek
[7] =Ék[3] ^Ék[6];

219 
ek
 += 4;

221 
	}
}

227 
	$Rijnd´lEn¸y±
(
u8
 
ö
[16], u8 
out
[16]) {

228 
u32
 
b0
[4], 
b1
[4], *
kp
 = 
Ekey
;

230 
b0
[0] = 
	`u32_ö
(
ö
Ë^ *
kp
++;

231 
b0
[1] = 
	`u32_ö
(
ö
 + 4Ë^ *
kp
++;

232 
b0
[2] = 
	`u32_ö
(
ö
 + 8Ë^ *
kp
++;

233 
b0
[3] = 
	`u32_ö
(
ö
 + 12Ë^ *
kp
++;

235 
	`f_round
(
b1
, 
b0
, 
kp
);

236 
	`f_round
(
b0
, 
b1
, 
kp
);

237 
	`f_round
(
b1
, 
b0
, 
kp
);

238 
	`f_round
(
b0
, 
b1
, 
kp
);

239 
	`f_round
(
b1
, 
b0
, 
kp
);

240 
	`f_round
(
b0
, 
b1
, 
kp
);

241 
	`f_round
(
b1
, 
b0
, 
kp
);

242 
	`f_round
(
b0
, 
b1
, 
kp
);

243 
	`f_round
(
b1
, 
b0
, 
kp
);

245 
	`u32_out
(
out
, 
	`lf_∫d
(
b1
, 0Ë^ 
kp
[0]);

246 
	`u32_out
(
out
 + 4, 
	`lf_∫d
(
b1
, 1Ë^ 
kp
[1]);

247 
	`u32_out
(
out
 + 8, 
	`lf_∫d
(
b1
, 2Ë^ 
kp
[2]);

248 
	`u32_out
(
out
 + 12, 
	`lf_∫d
(
b1
, 3Ë^ 
kp
[3]);

249 
	}
}

	@/home/unasaw/sip_project/libexosip2-5.3.0/src/rijndael.h

18 #i‚de‡
RIJNDAEL_H


19 
	#RIJNDAEL_H


	)

21 
Rijnd´lKeyScheduÀ
(
u8
 
key
[16]);

22 
Rijnd´lEn¸y±
(
u8
 
öput
[16], u8 
ouçut
[16]);

	@/home/unasaw/sip_project/libexosip2-5.3.0/src/sdp_offans.c

33 
	~"eXosù2.h
"

35 
sdp_mesßge_t
 *
_eXosù_gë_ªmŸe_sdp
(
osù_å™ß˘i⁄_t
 *
övôe_å
);

36 
sdp_mesßge_t
 *
_eXosù_gë_loˇl_sdp
(
osù_å™ß˘i⁄_t
 *
övôe_å
);

38 
sdp_mesßge_t
 *
	$eXosù_gë_ªmŸe_sdp_‰om_tid
(
eXosù_t
 *
exc⁄ãxt
, 
tid
) {

39 
eXosù_dülog_t
 *
jd
 = 
NULL
;

40 
eXosù_ˇŒ_t
 *
jc
 = 
NULL
;

41 
osù_å™ß˘i⁄_t
 *
å
 = 
NULL
;

43 i‡(
tid
 > 0) {

44 
	`_eXosù_ˇŒ_å™ß˘i⁄_föd
(
exc⁄ãxt
, 
tid
, &
jc
, &
jd
, &
å
);

47 i‡(
jc
 =
NULL
) {

48 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip]Ço call here\n"));

49  
NULL
;

52 i‡(
å
 =
NULL
)

53  
NULL
;

55  
	`_eXosù_gë_ªmŸe_sdp
(
å
);

56 
	}
}

58 
sdp_mesßge_t
 *
	$eXosù_gë_loˇl_sdp_‰om_tid
(
eXosù_t
 *
exc⁄ãxt
, 
tid
) {

59 
eXosù_dülog_t
 *
jd
 = 
NULL
;

60 
eXosù_ˇŒ_t
 *
jc
 = 
NULL
;

61 
osù_å™ß˘i⁄_t
 *
å
 = 
NULL
;

63 i‡(
tid
 > 0) {

64 
	`_eXosù_ˇŒ_å™ß˘i⁄_föd
(
exc⁄ãxt
, 
tid
, &
jc
, &
jd
, &
å
);

67 i‡(
jc
 =
NULL
) {

68 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip]Ço call here\n"));

69  
NULL
;

72 i‡(
å
 =
NULL
)

73  
NULL
;

75  
	`_eXosù_gë_loˇl_sdp
(
å
);

76 
	}
}

78 
sdp_mesßge_t
 *
	$eXosù_gë_ªmŸe_sdp
(
eXosù_t
 *
exc⁄ãxt
, 
jid
) {

79 
eXosù_dülog_t
 *
jd
 = 
NULL
;

80 
eXosù_ˇŒ_t
 *
jc
 = 
NULL
;

81 
osù_å™ß˘i⁄_t
 *
övôe_å
 = 
NULL
;

83 i‡(
jid
 > 0) {

84 
	`_eXosù_ˇŒ_dülog_föd
(
exc⁄ãxt
, 
jid
, &
jc
, &
jd
);

87 i‡(
jc
 =
NULL
) {

88 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip]Ço call here\n"));

89  
NULL
;

92 
övôe_å
 = 
	`_eXosù_föd_œ°_övôe
(
jc
, 
jd
);

94 i‡(
övôe_å
 =
NULL
)

95  
NULL
;

97  
	`_eXosù_gë_ªmŸe_sdp
(
övôe_å
);

98 
	}
}

100 
sdp_mesßge_t
 *
	$eXosù_gë_¥evious_loˇl_sdp
(
eXosù_t
 *
exc⁄ãxt
, 
jid
) {

101 
eXosù_dülog_t
 *
jd
 = 
NULL
;

102 
eXosù_ˇŒ_t
 *
jc
 = 
NULL
;

103 
osù_å™ß˘i⁄_t
 *
övôe_å
 = 
NULL
;

105 i‡(
jid
 > 0) {

106 
	`_eXosù_ˇŒ_dülog_föd
(
exc⁄ãxt
, 
jid
, &
jc
, &
jd
);

109 i‡(
jc
 =
NULL
) {

110 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip]Ço call here\n"));

111  
NULL
;

114 
övôe_å
 = 
	`_eXosù_föd_œ°_övôe
(
jc
, 
jd
);

116 i‡(
övôe_å
 =
NULL
)

117  
NULL
;

118 #i‚de‡
MINISIZE


119 
övôe_å
 = 
	`_eXosù_föd_¥evious_övôe
(
jc
, 
jd
, invite_tr);

120 i‡(
övôe_å
 =
NULL
)

121  
NULL
;

124  
	`_eXosù_gë_loˇl_sdp
(
övôe_å
);

125 
	}
}

127 
sdp_mesßge_t
 *
	$eXosù_gë_loˇl_sdp
(
eXosù_t
 *
exc⁄ãxt
, 
jid
) {

128 
eXosù_dülog_t
 *
jd
 = 
NULL
;

129 
eXosù_ˇŒ_t
 *
jc
 = 
NULL
;

130 
osù_å™ß˘i⁄_t
 *
övôe_å
 = 
NULL
;

132 i‡(
jid
 > 0) {

133 
	`_eXosù_ˇŒ_dülog_föd
(
exc⁄ãxt
, 
jid
, &
jc
, &
jd
);

136 i‡(
jc
 =
NULL
) {

137 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip]Ço call here\n"));

138  
NULL
;

141 
övôe_å
 = 
	`_eXosù_föd_œ°_övôe
(
jc
, 
jd
);

143 i‡(
övôe_å
 =
NULL
)

144  
NULL
;

146  
	`_eXosù_gë_loˇl_sdp
(
övôe_å
);

147 
	}
}

149 
sdp_mesßge_t
 *
	$_eXosù_gë_ªmŸe_sdp
(
osù_å™ß˘i⁄_t
 *
övôe_å
) {

150 i‡(
övôe_å
 =
NULL
)

151  
NULL
;

153 i‡(
övôe_å
->
˘x_ty≥
 =
IST
 || invôe_å->˘x_ty≥ =
NIST
) {

154 
sdp_mesßge_t
 *
sdp
;

156 
sdp
 = 
	`eXosù_gë_sdp_öfo
(
övôe_å
->
‹ig_ªque°
);

158 i‡(
sdp
 =
NULL
) {

159 
sdp
 = 
	`eXosù_gë_sdp_öfo
(
övôe_å
->
ack
);

162  
sdp
;

165 i‡(
övôe_å
->
˘x_ty≥
 =
ICT
 || invôe_å->˘x_ty≥ =
NICT
)

166  
	`eXosù_gë_sdp_öfo
(
övôe_å
->
œ°_ª•⁄£
);

168  
NULL
;

169 
	}
}

171 
sdp_mesßge_t
 *
	$_eXosù_gë_loˇl_sdp
(
osù_å™ß˘i⁄_t
 *
övôe_å
) {

172 i‡(
övôe_å
 =
NULL
)

173  
NULL
;

175 i‡(
övôe_å
->
˘x_ty≥
 =
IST
 || invôe_å->˘x_ty≥ =
NIST
)

176  
	`eXosù_gë_sdp_öfo
(
övôe_å
->
œ°_ª•⁄£
);

178 i‡(
övôe_å
->
˘x_ty≥
 =
ICT
 || invôe_å->˘x_ty≥ =
NICT
) {

179 
sdp_mesßge_t
 *
sdp
;

181 
sdp
 = 
	`eXosù_gë_sdp_öfo
(
övôe_å
->
‹ig_ªque°
);

183 i‡(
sdp
 =
NULL
) {

184 
sdp
 = 
	`eXosù_gë_sdp_öfo
(
övôe_å
->
ack
);

187  
sdp
;

190  
NULL
;

191 
	}
}

193 
sdp_mesßge_t
 *
	$eXosù_gë_sdp_öfo
(
osù_mesßge_t
 *
mesßge
) {

194 
osù_c⁄ã¡_ty≥_t
 *
˘t
;

195 
sdp_mesßge_t
 *
sdp
;

196 
osù_body_t
 *
ﬁdbody
;

197 
osù_li°_ôî©‹_t
 
ô
;

199 i‡(
mesßge
 =
NULL
)

200  
NULL
;

203 
˘t
 = 
	`osù_mesßge_gë_c⁄ã¡_ty≥
(
mesßge
);

205 i‡(
˘t
 =
NULL
)

206  
NULL
;

208 i‡(
˘t
->
ty≥
 =
NULL
 || câ->
subty≥
 == NULL)

209  
NULL
;

211 i‡(
	`osù_°rˇ£cmp
(
˘t
->
ty≥
, "≠∂iˇti⁄"Ë=0 && osù_°rˇ£cmp(˘t->
subty≥
, "sdp") == 0) {

212 
i
;

214 
ﬁdbody
 = (
osù_body_t
 *Ë
	`osù_li°_gë_fú°
(&
mesßge
->
bodõs
, &
ô
);

215 i‡(
ﬁdbody
 =
NULL
)

216  
NULL
;

218 
	`sdp_mesßge_öô
(&
sdp
);

219 
i
 = 
	`sdp_mesßge_∑r£
(
sdp
, 
ﬁdbody
->
body
);

220 i‡(
i
 == 0)

221  
sdp
;

223 
	`sdp_mesßge_‰ì
(
sdp
);

224  
NULL
;

227 i‡(
	`osù_°rˇ£cmp
(
˘t
->
ty≥
, "multipart") != 0)

228  
NULL
;

230 
ﬁdbody
 = (
osù_body_t
 *Ë
	`osù_li°_gë_fú°
(&
mesßge
->
bodõs
, &
ô
);

232 
ﬁdbody
 !
NULL
) {

233 
i
;

234 
˘t
 = 
ﬁdbody
->
c⁄ã¡_ty≥
;

235 i‡(
˘t
 =
NULL
) {

236 
ﬁdbody
 = (
osù_body_t
 *Ë
	`osù_li°_gë_√xt
(&
ô
);

239 i‡(
	`osù_°rˇ£cmp
(
˘t
->
ty≥
, "≠∂iˇti⁄"Ë!0 || osù_°rˇ£cmp(˘t->
subty≥
, "sdp") != 0) {

240 
ﬁdbody
 = (
osù_body_t
 *Ë
	`osù_li°_gë_√xt
(&
ô
);

244 
	`sdp_mesßge_öô
(&
sdp
);

245 
i
 = 
	`sdp_mesßge_∑r£
(
sdp
, 
ﬁdbody
->
body
);

247 i‡(
i
 == 0)

248  
sdp
;

250 
	`sdp_mesßge_‰ì
(
sdp
);

251  
NULL
;

254  
NULL
;

255 
	}
}

257 
sdp_c⁄√˘i⁄_t
 *
	$eXosù_gë_audio_c⁄√˘i⁄
(
sdp_mesßge_t
 *
sdp
) {

258 
pos
 = 0;

259 
sdp_medü_t
 *
med
 = (sdp_medü_à*Ë
	`osù_li°_gë
(&
sdp
->
m_medüs
, 0);

261 
med
 !
NULL
) {

262 i‡(
med
->
m_medü
 !
NULL
 && 
	`osù_°rˇ£cmp
(med->m_media, "audio") == 0)

265 
pos
++;

266 
med
 = (
sdp_medü_t
 *Ë
	`osù_li°_gë
(&
sdp
->
m_medüs
, 
pos
);

269 i‡(
med
 =
NULL
)

270  
NULL
;

272 i‡(
	`osù_li°_eﬁ
(&
med
->
c_c⁄√˘i⁄s
, 0))

273  
sdp
->
c_c⁄√˘i⁄
;

276  (
sdp_c⁄√˘i⁄_t
 *Ë
	`osù_li°_gë
(&
med
->
c_c⁄√˘i⁄s
, 0);

277 
	}
}

279 
sdp_medü_t
 *
	$eXosù_gë_audio_medü
(
sdp_mesßge_t
 *
sdp
) {

280 
pos
 = 0;

281 
sdp_medü_t
 *
med
 = (sdp_medü_à*Ë
	`osù_li°_gë
(&
sdp
->
m_medüs
, 0);

283 
med
 !
NULL
) {

284 i‡(
med
->
m_medü
 !
NULL
 && 
	`osù_°rˇ£cmp
(med->m_media, "audio") == 0)

285  
med
;

287 
pos
++;

288 
med
 = (
sdp_medü_t
 *Ë
	`osù_li°_gë
(&
sdp
->
m_medüs
, 
pos
);

291  
NULL
;

292 
	}
}

294 
sdp_c⁄√˘i⁄_t
 *
	$eXosù_gë_video_c⁄√˘i⁄
(
sdp_mesßge_t
 *
sdp
) {

295 
pos
 = 0;

296 
sdp_medü_t
 *
med
 = (sdp_medü_à*Ë
	`osù_li°_gë
(&
sdp
->
m_medüs
, 0);

298 
med
 !
NULL
) {

299 i‡(
med
->
m_medü
 !
NULL
 && 
	`osù_°rˇ£cmp
(med->m_media, "video") == 0)

302 
pos
++;

303 
med
 = (
sdp_medü_t
 *Ë
	`osù_li°_gë
(&
sdp
->
m_medüs
, 
pos
);

306 i‡(
med
 =
NULL
)

307  
NULL
;

309 i‡(
	`osù_li°_eﬁ
(&
med
->
c_c⁄√˘i⁄s
, 0))

310  
sdp
->
c_c⁄√˘i⁄
;

313  (
sdp_c⁄√˘i⁄_t
 *Ë
	`osù_li°_gë
(&
med
->
c_c⁄√˘i⁄s
, 0);

314 
	}
}

316 
sdp_medü_t
 *
	$eXosù_gë_video_medü
(
sdp_mesßge_t
 *
sdp
) {

317 
pos
 = 0;

318 
sdp_medü_t
 *
med
 = (sdp_medü_à*Ë
	`osù_li°_gë
(&
sdp
->
m_medüs
, 0);

320 
med
 !
NULL
) {

321 i‡(
med
->
m_medü
 !
NULL
 && 
	`osù_°rˇ£cmp
(med->m_media, "video") == 0)

322  
med
;

324 
pos
++;

325 
med
 = (
sdp_medü_t
 *Ë
	`osù_li°_gë
(&
sdp
->
m_medüs
, 
pos
);

328  
NULL
;

329 
	}
}

331 
sdp_c⁄√˘i⁄_t
 *
	$eXosù_gë_c⁄√˘i⁄
(
sdp_mesßge_t
 *
sdp
, c⁄° *
medü
) {

332 
pos
 = 0;

333 
sdp_medü_t
 *
med
 = (sdp_medü_à*Ë
	`osù_li°_gë
(&
sdp
->
m_medüs
, 0);

335 
med
 !
NULL
) {

336 i‡(
med
->
m_medü
 !
NULL
 && 
	`osù_°rˇ£cmp
(med->m_medü, 
medü
) == 0)

339 
pos
++;

340 
med
 = (
sdp_medü_t
 *Ë
	`osù_li°_gë
(&
sdp
->
m_medüs
, 
pos
);

343 i‡(
med
 =
NULL
)

344  
NULL
;

346 i‡(
	`osù_li°_eﬁ
(&
med
->
c_c⁄√˘i⁄s
, 0))

347  
sdp
->
c_c⁄√˘i⁄
;

350  (
sdp_c⁄√˘i⁄_t
 *Ë
	`osù_li°_gë
(&
med
->
c_c⁄√˘i⁄s
, 0);

351 
	}
}

353 
sdp_medü_t
 *
	$eXosù_gë_medü
(
sdp_mesßge_t
 *
sdp
, c⁄° *
medü
) {

354 
pos
 = 0;

355 
sdp_medü_t
 *
med
 = (sdp_medü_à*Ë
	`osù_li°_gë
(&
sdp
->
m_medüs
, 0);

357 
med
 !
NULL
) {

358 i‡(
med
->
m_medü
 !
NULL
 && 
	`osù_°rˇ£cmp
(med->m_medü, 
medü
) == 0)

359  
med
;

361 
pos
++;

362 
med
 = (
sdp_medü_t
 *Ë
	`osù_li°_gë
(&
sdp
->
m_medüs
, 
pos
);

365  
NULL
;

366 
	}
}

	@/home/unasaw/sip_project/libexosip2-5.3.0/src/udp.c

33 #ifde‡
WIN32


34 #i‚de‡
UNICODE


35 
	#UNICODE


	)

39 
	~<eXosù2/eXosù.h
>

41 
	~"eXosù2.h
"

43 #ifde‡
HAVE_UNISTD_H


44 
	~<uni°d.h
>

47 #ifde‡
HAVE_WINDOWS_H


48 
	~<wödows.h
>

51 #i‡!
deföed
(
_WIN32_WCE
)

52 
	~<î∫o.h
>

55 
	$_eXosù_£nd_deÁu…_™swî
(
eXosù_t
 *
exc⁄ãxt
, 
eXosù_dülog_t
 *
jd
, 
osù_å™ß˘i⁄_t
 *
å™ß˘i⁄
, 
osù_evít_t
 *
evt
, 
°©us
, *
ªas⁄_phø£
, *
w¨nög
, 
löe
) {

56 
osù_evít_t
 *
evt_™swî
;

57 
osù_mesßge_t
 *
™swî
;

58 
i
;

60 
	`osù_å™ß˘i⁄_£t_ª£rved2
(
å™ß˘i⁄
, 
NULL
);

63 i‡(
°©us
 > 100 && sètu†< 299 && 
	`MSG_IS_INVITE
(
evt
->
sù
))

66 i‡(
jd
 !
NULL
)

67 
i
 = 
	`_eXosù_buûd_ª•⁄£_deÁu…
(
exc⁄ãxt
, &
™swî
, 
jd
->
d_dülog
, 
°©us
, 
evt
->
sù
);

70 
i
 = 
	`_eXosù_buûd_ª•⁄£_deÁu…
(
exc⁄ãxt
, &
™swî
, 
NULL
, 
°©us
, 
evt
->
sù
);

72 i‡(
i
 !0 || 
™swî
 =
NULL
) {

76 i‡(
ªas⁄_phø£
 !
NULL
) {

77 *
_ªas⁄
;

79 
_ªas⁄
 = 
	`osù_mesßge_gë_ªas⁄_phø£
(
™swî
);

81 i‡(
_ªas⁄
 !
NULL
)

82 
	`osù_‰ì
(
_ªas⁄
);

84 
_ªas⁄
 = 
	`osù_°rdup
(
ªas⁄_phø£
);

85 
	`osù_mesßge_£t_ªas⁄_phø£
(
™swî
, 
_ªas⁄
);

88 
	`osù_mesßge_£t_c⁄ã¡_Àngth
(
™swî
, "0");

90 i‡(
°©us
 == 500)

91 
	`osù_mesßge_£t_ªåy_a·î
(
™swî
, "10");

93 
evt_™swî
 = 
	`osù_√w_outgoög_sùmesßge
(
™swî
);

94 
evt_™swî
->
å™ß˘i⁄id
 = 
å™ß˘i⁄
->transactionid;

95 
	`osù_å™ß˘i⁄_add_evít
(
å™ß˘i⁄
, 
evt_™swî
);

96 
	`_eXosù_wakeup
(
exc⁄ãxt
);

97 
	}
}

99 
	$_eXosù_¥o˚ss_bye
(
eXosù_t
 *
exc⁄ãxt
, 
eXosù_ˇŒ_t
 *
jc
, 
eXosù_dülog_t
 *
jd
, 
osù_å™ß˘i⁄_t
 *
å™ß˘i⁄
, 
osù_evít_t
 *
evt
) {

100 
osù_evít_t
 *
evt_™swî
;

101 
osù_mesßge_t
 *
™swî
;

102 
i
;

104 
	`osù_å™ß˘i⁄_£t_ª£rved2
(
å™ß˘i⁄
, 
jc
);

106 i‡(
exc⁄ãxt
->
autﬂnswî_bye
 == 0) {

108 
	`osù_å™ß˘i⁄_£t_ª£rved3
(
å™ß˘i⁄
, 
jd
);

109 
	`osù_li°_add
(
jd
->
d_öc_ås
, 
å™ß˘i⁄
, 0);

110 
	`_eXosù_wakeup
(
exc⁄ãxt
);

114 
i
 = 
	`_eXosù_buûd_ª•⁄£_deÁu…
(
exc⁄ãxt
, &
™swî
, 
jd
->
d_dülog
, 200, 
evt
->
sù
);

116 i‡(
i
 != 0) {

117 
	`osù_li°_add
(&
exc⁄ãxt
->
j_å™ß˘i⁄s
, 
å™ß˘i⁄
, 0);

121 
	`osù_mesßge_£t_c⁄ã¡_Àngth
(
™swî
, "0");

123 
evt_™swî
 = 
	`osù_√w_outgoög_sùmesßge
(
™swî
);

124 
evt_™swî
->
å™ß˘i⁄id
 = 
å™ß˘i⁄
->transactionid;

126 
	`osù_li°_add
(
jd
->
d_öc_ås
, 
å™ß˘i⁄
, 0);

129 i‡(
jd
->
im∂icô_subs¸ùti⁄_expúe_time
 == 0) {

130 
	`osù_dülog_‰ì
(
jd
->
d_dülog
);

131 
jd
->
d_dülog
 = 
NULL
;

134 
	`osù_å™ß˘i⁄_add_evít
(
å™ß˘i⁄
, 
evt_™swî
);

136 
	`osù_ni°_execuã
(
exc⁄ãxt
->
j_osù
);

137 
	`_eXosù_ªp‹t_ˇŒ_evít
(
exc⁄ãxt
, 
EXOSIP_CALL_MESSAGE_NEW
, 
jc
, 
jd
, 
å™ß˘i⁄
);

138 
	`_eXosù_ªp‹t_ˇŒ_evít
(
exc⁄ãxt
, 
EXOSIP_CALL_CLOSED
, 
jc
, 
jd
, 
å™ß˘i⁄
);

139 
	`_eXosù_upd©e
(
exc⁄ãxt
);

141 
	`_eXosù_wakeup
(
exc⁄ãxt
);

142 
	}
}

144 
	$_eXosù_¥o˚ss_ack
(
eXosù_t
 *
exc⁄ãxt
, 
eXosù_ˇŒ_t
 *
jc
, 
eXosù_dülog_t
 *
jd
, 
osù_evít_t
 *
evt
) {

147 
eXosù_evít_t
 *
je
;

148 
i
;

150 
je
 = 
	`_eXosù_evít_öô_f‹_ˇŒ
(
EXOSIP_CALL_ACK
, 
jc
, 
jd
, 
NULL
);

152 i‡(
je
 !
NULL
) {

153 
osù_å™ß˘i⁄_t
 *
å
;

155 
å
 = 
	`_eXosù_föd_œ°_öc_övôe
(
jc
, 
jd
);

157 i‡(
å
 !
NULL
) {

158 
je
->
tid
 = 
å
->
å™ß˘i⁄id
;

161 i‡(
å
->
‹ig_ªque°
 !
NULL
) {

162 
i
 = 
	`osù_mesßge_˛⁄e
(
å
->
‹ig_ªque°
, &
je
->
ªque°
);

164 i‡(
i
 != 0) {

165 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] failedÅo cloneÑequest forÉvent\n"));

169 i‡(
å
->
œ°_ª•⁄£
 !
NULL
) {

170 
i
 = 
	`osù_mesßge_˛⁄e
(
å
->
œ°_ª•⁄£
, &
je
->
ª•⁄£
);

172 i‡(
i
 != 0) {

173 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] failedÅo cloneÑesponse forÉvent\n"));

178 
i
 = 
	`osù_mesßge_˛⁄e
(
evt
->
sù
, &
je
->
ack
);

180 i‡(
i
 != 0) {

181 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] failedÅo clone ACK forÉvent\n"));

186 
jd
->
d_cou¡
 = 0;

187 
	`osù_mesßge_‰ì
(
jd
->
d_200Ok
);

188 
jd
->
d_200Ok
 = 
NULL
;

190 i‡(
je
 !
NULL
)

191 
	`_eXosù_ªp‹t_evít
(
exc⁄ãxt
, 
je
);

193 
	`osù_evít_‰ì
(
evt
);

194 
	}
}

196 
	$_ˇn˚l_m©ch_övôe
(
osù_å™ß˘i⁄_t
 *
övôe
, 
osù_mesßge_t
 *
ˇn˚l
) {

197 
osù_gíîic_∑øm_t
 *
br
;

198 
osù_gíîic_∑øm_t
 *
br2
;

199 
osù_vü_t
 *
vü
;

201 
	`osù_vü_∑øm_gë_by«me
(
övôe
->
t›vü
, "bønch", &
br
);

202 
vü
 = 
	`osù_li°_gë
(&
ˇn˚l
->
vüs
, 0);

204 i‡(
vü
 =
NULL
)

205  
OSIP_SYNTAXERROR
;

207 
	`osù_vü_∑øm_gë_by«me
(
vü
, "bønch", &
br2
);

209 i‡(
br
 !
NULL
 && 
br2
 == NULL)

210  
OSIP_UNDEFINED_ERROR
;

212 i‡(
br2
 !
NULL
 && 
br
 == NULL)

213  
OSIP_UNDEFINED_ERROR
;

215 i‡(
br2
 !
NULL
 && 
br
 != NULL) {

216 i‡(
br
->
gvÆue
 !
NULL
 && 
br2
->gvÆuê!NULL && 0 =
	`°rcmp
(br->gvalue, br2->gvalue))

217  
OSIP_SUCCESS
;

219  
OSIP_UNDEFINED_ERROR
;

223 i‡(0 !
	`osù_ˇŒ_id_m©ch
(
övôe
->
ˇŒid
, 
ˇn˚l
->
ˇŒ_id
))

224  
OSIP_UNDEFINED_ERROR
;

226 i‡(0 !
	`osù_to_èg_m©ch
(
övôe
->
to
, 
ˇn˚l
->to))

227  
OSIP_UNDEFINED_ERROR
;

229 i‡(0 !
	`osù_‰om_èg_m©ch
(
övôe
->
‰om
, 
ˇn˚l
->from))

230  
OSIP_UNDEFINED_ERROR
;

232 i‡(0 !
	`osù_vü_m©ch
(
övôe
->
t›vü
, 
vü
))

233  
OSIP_UNDEFINED_ERROR
;

235  
OSIP_SUCCESS
;

236 
	}
}

238 
	$_eXosù_¥o˚ss_ˇn˚l
(
eXosù_t
 *
exc⁄ãxt
, 
osù_å™ß˘i⁄_t
 *
å™ß˘i⁄
, 
osù_evít_t
 *
evt
) {

239 
osù_å™ß˘i⁄_t
 *
å
;

240 
osù_evít_t
 *
evt_™swî
;

241 
osù_mesßge_t
 *
™swî
;

242 
i
;

244 
eXosù_ˇŒ_t
 *
jc
;

245 
eXosù_dülog_t
 *
jd
;

247 
å
 = 
NULL
;

248 
jd
 = 
NULL
;

251 
jc
 = 
exc⁄ãxt
->
j_ˇŒs
; j¯!
NULL
; j¯jc->
√xt
) {

252 i‡(
jc
->
c_öc_å
 !
NULL
) {

253 
i
 = 
	`_ˇn˚l_m©ch_övôe
(
jc
->
c_öc_å
, 
evt
->
sù
);

255 i‡(
i
 == 0) {

256 
å
 = 
jc
->
c_öc_å
;

259 i‡(
jc
->
c_dülogs
 !
NULL
)

260 
jd
 = 
jc
->
c_dülogs
;

266 
å
 = 
NULL
;

268 
jd
 = 
jc
->
c_dülogs
; jd !
NULL
; jd = jd->
√xt
) {

269 
osù_li°_ôî©‹_t
 
ô
;

271 
å
 = (
osù_å™ß˘i⁄_t
 *Ë
	`osù_li°_gë_fú°
(
jd
->
d_öc_ås
, &
ô
);

273 
å
 !
OSIP_SUCCESS
) {

274 
i
 = 
	`_ˇn˚l_m©ch_övôe
(
å
, 
evt
->
sù
);

276 i‡(
i
 == 0)

279 
å
 = (
osù_å™ß˘i⁄_t
 *Ë
	`osù_li°_gë_√xt
(&
ô
);

283 i‡(
å
 !
NULL
)

287 i‡(
jd
 !
NULL
)

291 i‡(
å
 =
NULL
) {

292 
i
 = 
	`_eXosù_buûd_ª•⁄£_deÁu…
(
exc⁄ãxt
, &
™swî
, 
NULL
, 481, 
evt
->
sù
);

294 i‡(
i
 != 0) {

295 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] cannot cancelÅransaction\n"));

300 
	`osù_li°_add
(&
exc⁄ãxt
->
j_å™ß˘i⁄s
, 
å™ß˘i⁄
, 0);

301 
	`osù_å™ß˘i⁄_£t_ª£rved2
(
å™ß˘i⁄
, 
NULL
);

305 
	`osù_mesßge_£t_c⁄ã¡_Àngth
(
™swî
, "0");

306 
evt_™swî
 = 
	`osù_√w_outgoög_sùmesßge
(
™swî
);

307 
evt_™swî
->
å™ß˘i⁄id
 = 
å™ß˘i⁄
->transactionid;

308 
	`osù_å™ß˘i⁄_add_evít
(
å™ß˘i⁄
, 
evt_™swî
);

310 
	`osù_li°_add
(&
exc⁄ãxt
->
j_å™ß˘i⁄s
, 
å™ß˘i⁄
, 0);

311 
	`osù_å™ß˘i⁄_£t_ª£rved2
(
å™ß˘i⁄
, 
NULL
);

312 
	`_eXosù_wakeup
(
exc⁄ãxt
);

316 i‡(
å
->
°©e
 =
IST_TERMINATED
 ||År->°©ê=
IST_CONFIRMED
 ||År->°©ê=
IST_COMPLETED
) {

321 i‡(
jd
 =
NULL
)

322 
i
 = 
	`_eXosù_buûd_ª•⁄£_deÁu…
(
exc⁄ãxt
, &
™swî
, 
NULL
, 481, 
evt
->
sù
);

325 
i
 = 
	`_eXosù_buûd_ª•⁄£_deÁu…
(
exc⁄ãxt
, &
™swî
, 
jd
->
d_dülog
, 481, 
evt
->
sù
);

327 i‡(
i
 != 0) {

328 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] cannot cancelÅransaction\n"));

333 
	`osù_li°_add
(&
exc⁄ãxt
->
j_å™ß˘i⁄s
, 
å™ß˘i⁄
, 0);

334 
	`osù_å™ß˘i⁄_£t_ª£rved2
(
å™ß˘i⁄
, 
NULL
);

338 
	`osù_mesßge_£t_c⁄ã¡_Àngth
(
™swî
, "0");

339 
evt_™swî
 = 
	`osù_√w_outgoög_sùmesßge
(
™swî
);

340 
evt_™swî
->
å™ß˘i⁄id
 = 
å™ß˘i⁄
->transactionid;

341 
	`osù_å™ß˘i⁄_add_evít
(
å™ß˘i⁄
, 
evt_™swî
);

343 i‡(
jd
 !
NULL
)

344 
	`osù_li°_add
(
jd
->
d_öc_ås
, 
å™ß˘i⁄
, 0);

347 
	`osù_li°_add
(&
exc⁄ãxt
->
j_å™ß˘i⁄s
, 
å™ß˘i⁄
, 0);

349 
	`osù_å™ß˘i⁄_£t_ª£rved2
(
å™ß˘i⁄
, 
NULL
);

350 
	`_eXosù_wakeup
(
exc⁄ãxt
);

356 i‡(
jd
 =
NULL
)

357 
i
 = 
	`_eXosù_buûd_ª•⁄£_deÁu…
(
exc⁄ãxt
, &
™swî
, 
NULL
, 200, 
evt
->
sù
);

360 
i
 = 
	`_eXosù_buûd_ª•⁄£_deÁu…
(
exc⁄ãxt
, &
™swî
, 
jd
->
d_dülog
, 200, 
evt
->
sù
);

362 i‡(
i
 != 0) {

363 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] cannot cancelÅransaction\n"));

368 
	`osù_li°_add
(&
exc⁄ãxt
->
j_å™ß˘i⁄s
, 
å™ß˘i⁄
, 0);

369 
	`osù_å™ß˘i⁄_£t_ª£rved2
(
å™ß˘i⁄
, 
NULL
);

373 
	`osù_mesßge_£t_c⁄ã¡_Àngth
(
™swî
, "0");

374 
evt_™swî
 = 
	`osù_√w_outgoög_sùmesßge
(
™swî
);

375 
evt_™swî
->
å™ß˘i⁄id
 = 
å™ß˘i⁄
->transactionid;

376 
	`osù_å™ß˘i⁄_add_evít
(
å™ß˘i⁄
, 
evt_™swî
);

377 
	`_eXosù_wakeup
(
exc⁄ãxt
);

379 i‡(
jd
 !
NULL
)

380 
	`osù_li°_add
(
jd
->
d_öc_ås
, 
å™ß˘i⁄
, 0);

383 
	`osù_li°_add
(&
exc⁄ãxt
->
j_å™ß˘i⁄s
, 
å™ß˘i⁄
, 0);

385 
	`osù_å™ß˘i⁄_£t_ª£rved2
(
å™ß˘i⁄
, 
jc
);

386 
	`osù_å™ß˘i⁄_£t_ª£rved3
(
å™ß˘i⁄
, 
jd
);

389 i‡(
jd
 =
NULL
)

390 
i
 = 
	`_eXosù_buûd_ª•⁄£_deÁu…
(
exc⁄ãxt
, &
™swî
, 
NULL
, 487, 
å
->
‹ig_ªque°
);

393 
i
 = 
	`_eXosù_buûd_ª•⁄£_deÁu…
(
exc⁄ãxt
, &
™swî
, 
jd
->
d_dülog
, 487, 
å
->
‹ig_ªque°
);

395 i‡(
i
 != 0) {

396 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] cannot cancelÅransaction\n"));

403 
	`osù_mesßge_£t_c⁄ã¡_Àngth
(
™swî
, "0");

404 
evt_™swî
 = 
	`osù_√w_outgoög_sùmesßge
(
™swî
);

405 
evt_™swî
->
å™ß˘i⁄id
 = 
å
->transactionid;

406 
	`osù_å™ß˘i⁄_add_evít
(
å
, 
evt_™swî
);

407 
	`_eXosù_wakeup
(
exc⁄ãxt
);

409 
	}
}

411 
	$_eXosù_¥o˚ss_ªövôe
(
eXosù_t
 *
exc⁄ãxt
, 
eXosù_ˇŒ_t
 *
jc
, 
eXosù_dülog_t
 *
jd
, 
osù_å™ß˘i⁄_t
 *
å™ß˘i⁄
) {

412 
	`osù_å™ß˘i⁄_£t_ª£rved2
(
å™ß˘i⁄
, 
jc
);

413 
	`osù_å™ß˘i⁄_£t_ª£rved3
(
å™ß˘i⁄
, 
jd
);

415 
	`osù_li°_add
(
jd
->
d_öc_ås
, 
å™ß˘i⁄
, 0);

416 
	`osù_i°_execuã
(
exc⁄ãxt
->
j_osù
);

417 
	`_eXosù_ªp‹t_ˇŒ_evít
(
exc⁄ãxt
, 
EXOSIP_CALL_REINVITE
, 
jc
, 
jd
, 
å™ß˘i⁄
);

418 
	}
}

420 
	$_eXosù_¥o˚ss_√w_övôe
(
eXosù_t
 *
exc⁄ãxt
, 
osù_å™ß˘i⁄_t
 *
å™ß˘i⁄
, 
osù_evít_t
 *
evt
) {

421 
osù_evít_t
 *
evt_™swî
;

422 
i
;

423 
eXosù_ˇŒ_t
 *
jc
;

424 
eXosù_dülog_t
 *
jd
;

425 
osù_mesßge_t
 *
™swî
;

426 
osù_gíîic_∑øm_t
 *
to_èg
 = 
NULL
;

428 i‡(
evt
->
sù
 !
NULL
 &&Évt->sù->
to
 != NULL)

429 
	`osù_‰om_∑øm_gë_by«me
(
evt
->
sù
->
to
, "èg", &
to_èg
);

431 i‡(
to_èg
 !
NULL
) {

432 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip]Éxisting To-Tag inÇew INVITE [reject with 481]\n"));

433 
i
 = 
	`_eXosù_buûd_ª•⁄£_deÁu…
(
exc⁄ãxt
, &
™swî
, 
NULL
, 481, 
evt
->
sù
);

435 i‡(
i
 == 0) {

436 
evt_™swî
 = 
	`osù_√w_outgoög_sùmesßge
(
™swî
);

437 
evt_™swî
->
å™ß˘i⁄id
 = 
å™ß˘i⁄
->transactionid;

438 
	`_eXosù_upd©e
(
exc⁄ãxt
);

439 
	`osù_å™ß˘i⁄_add_evít
(
å™ß˘i⁄
, 
evt_™swî
);

443 
	`osù_mesßge_£t_c⁄ã¡_Àngth
(
™swî
, "0");

444 
	`osù_li°_add
(&
exc⁄ãxt
->
j_å™ß˘i⁄s
, 
å™ß˘i⁄
, 0);

445 
	`osù_å™ß˘i⁄_£t_ª£rved2
(
å™ß˘i⁄
, 
NULL
);

449 
	`_eXosù_ˇŒ_öô
(
exc⁄ãxt
, &
jc
);

451 
	`ADD_ELEMENT
(
exc⁄ãxt
->
j_ˇŒs
, 
jc
);

453 
i
 = 
	`_eXosù_buûd_ª•⁄£_deÁu…
(
exc⁄ãxt
, &
™swî
, 
NULL
, 101, 
evt
->
sù
);

455 i‡(
i
 != 0) {

456 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] cannot create dialog."));

457 
	`osù_li°_add
(&
exc⁄ãxt
->
j_å™ß˘i⁄s
, 
å™ß˘i⁄
, 0);

458 
	`osù_å™ß˘i⁄_£t_ª£rved2
(
å™ß˘i⁄
, 
NULL
);

459 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] cannot createÑesponse for invite\n"));

463 
	`osù_mesßge_£t_c⁄ã¡_Àngth
(
™swî
, "0");

464 
i
 = 
	`_eXosù_com∂ëe_™swî_th©_e°ablish_a_dülog
(
exc⁄ãxt
, 
™swî
, 
evt
->
sù
);

466 i‡(
i
 != 0) {

467 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] cannot completeánswer\n"));

468 
	`osù_li°_add
(&
exc⁄ãxt
->
j_å™ß˘i⁄s
, 
å™ß˘i⁄
, 0);

469 
	`osù_å™ß˘i⁄_£t_ª£rved2
(
å™ß˘i⁄
, 
NULL
);

470 
	`osù_mesßge_‰ì
(
™swî
);

474 
i
 = 
	`_eXosù_dülog_öô_as_uas
(&
jd
, 
evt
->
sù
, 
™swî
);

475 
	`osù_mesßge_‰ì
(
™swî
);

477 i‡(
i
 != 0) {

478 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] cannot create dialog\n"));

479 
	`osù_li°_add
(&
exc⁄ãxt
->
j_å™ß˘i⁄s
, 
å™ß˘i⁄
, 0);

480 
	`osù_å™ß˘i⁄_£t_ª£rved2
(
å™ß˘i⁄
, 
NULL
);

484 
	`_eXosù_check_Ælow_hódî
(
jd
, 
evt
->
sù
);

486 
	`ADD_ELEMENT
(
jc
->
c_dülogs
, 
jd
);

488 
	`osù_å™ß˘i⁄_£t_ª£rved2
(
å™ß˘i⁄
, 
jc
);

489 
	`osù_å™ß˘i⁄_£t_ª£rved3
(
å™ß˘i⁄
, 
jd
);

491 
	`_eXosù_upd©e
(
exc⁄ãxt
);

492 
jc
->
c_öc_å
 = 
å™ß˘i⁄
;

496 
	`osù_i°_execuã
(
exc⁄ãxt
->
j_osù
);

498 i‡(
å™ß˘i⁄
->
‹ig_ªque°
 !
NULL
) {

499 
	`_eXosù_ªp‹t_ˇŒ_evít
(
exc⁄ãxt
, 
EXOSIP_CALL_INVITE
, 
jc
, 
jd
, 
å™ß˘i⁄
);

502 
	`_eXosù_wakeup
(
exc⁄ãxt
);

503 
	}
}

505 #i‚de‡
MINISIZE


507 
	$_eXosù_¥o˚ss_√w_subs¸ùti⁄
(
eXosù_t
 *
exc⁄ãxt
, 
osù_å™ß˘i⁄_t
 *
å™ß˘i⁄
, 
osù_evít_t
 *
evt
) {

508 
osù_evít_t
 *
evt_™swî
;

509 
eXosù_nŸify_t
 *
jn
;

510 
eXosù_dülog_t
 *
jd
;

511 
osù_mesßge_t
 *
™swî
;

512 
i
;

513 
osù_gíîic_∑øm_t
 *
to_èg
 = 
NULL
;

515 i‡(
evt
->
sù
 !
NULL
 &&Évt->sù->
to
 != NULL)

516 
	`osù_‰om_∑øm_gë_by«me
(
evt
->
sù
->
to
, "èg", &
to_èg
);

518 i‡(
to_èg
 !
NULL
) {

519 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip]Éxisting To-Tag inÇew SUBSCRIBE/REFER [reject with 481]\n"));

520 
i
 = 
	`_eXosù_buûd_ª•⁄£_deÁu…
(
exc⁄ãxt
, &
™swî
, 
NULL
, 481, 
evt
->
sù
);

522 i‡(
i
 == 0) {

523 
evt_™swî
 = 
	`osù_√w_outgoög_sùmesßge
(
™swî
);

524 
evt_™swî
->
å™ß˘i⁄id
 = 
å™ß˘i⁄
->transactionid;

525 
	`_eXosù_upd©e
(
exc⁄ãxt
);

526 
	`osù_mesßge_£t_c⁄ã¡_Àngth
(
™swî
, "0");

527 
	`osù_å™ß˘i⁄_add_evít
(
å™ß˘i⁄
, 
evt_™swî
);

530 
	`osù_li°_add
(&
exc⁄ãxt
->
j_å™ß˘i⁄s
, 
å™ß˘i⁄
, 0);

531 
	`osù_å™ß˘i⁄_£t_ª£rved2
(
å™ß˘i⁄
, 
NULL
);

535 
i
 = 
	`_eXosù_nŸify_öô
(
exc⁄ãxt
, &
jn
, 
evt
->
sù
);

537 i‡(
i
 != 0) {

538 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] missing contact or memory\n"));

539 
i
 = 
	`_eXosù_buûd_ª•⁄£_deÁu…
(
exc⁄ãxt
, &
™swî
, 
NULL
, 400, 
evt
->
sù
);

541 i‡(
i
 == 0) {

542 
evt_™swî
 = 
	`osù_√w_outgoög_sùmesßge
(
™swî
);

543 
evt_™swî
->
å™ß˘i⁄id
 = 
å™ß˘i⁄
->transactionid;

544 
	`_eXosù_upd©e
(
exc⁄ãxt
);

545 
	`osù_mesßge_£t_c⁄ã¡_Àngth
(
™swî
, "0");

546 
	`osù_å™ß˘i⁄_add_evít
(
å™ß˘i⁄
, 
evt_™swî
);

549 
	`osù_li°_add
(&
exc⁄ãxt
->
j_å™ß˘i⁄s
, 
å™ß˘i⁄
, 0);

550 
	`osù_å™ß˘i⁄_£t_ª£rved2
(
å™ß˘i⁄
, 
NULL
);

554 
	`_eXosù_nŸify_£t_ª‰esh_öãrvÆ
(
jn
, 
evt
->
sù
);

556 
i
 = 
	`_eXosù_buûd_ª•⁄£_deÁu…
(
exc⁄ãxt
, &
™swî
, 
NULL
, 101, 
evt
->
sù
);

558 i‡(
i
 != 0) {

559 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] cannot createÑesponse for SUBSCRIBE/REFER\n"));

560 
	`osù_li°_add
(&
exc⁄ãxt
->
j_å™ß˘i⁄s
, 
å™ß˘i⁄
, 0);

561 
	`_eXosù_nŸify_‰ì
(
exc⁄ãxt
, 
jn
);

565 
i
 = 
	`_eXosù_com∂ëe_™swî_th©_e°ablish_a_dülog
(
exc⁄ãxt
, 
™swî
, 
evt
->
sù
);

567 i‡(
i
 != 0) {

568 
	`osù_mesßge_‰ì
(
™swî
);

569 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] cannot completeánswer\n"));

570 
	`osù_li°_add
(&
exc⁄ãxt
->
j_å™ß˘i⁄s
, 
å™ß˘i⁄
, 0);

571 
	`_eXosù_nŸify_‰ì
(
exc⁄ãxt
, 
jn
);

575 
i
 = 
	`_eXosù_dülog_öô_as_uas
(&
jd
, 
evt
->
sù
, 
™swî
);

577 i‡(
i
 != 0) {

578 
	`osù_mesßge_‰ì
(
™swî
);

579 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] cannot create dialog\n"));

580 
	`osù_li°_add
(&
exc⁄ãxt
->
j_å™ß˘i⁄s
, 
å™ß˘i⁄
, 0);

581 
	`_eXosù_nŸify_‰ì
(
exc⁄ãxt
, 
jn
);

585 
	`ADD_ELEMENT
(
jn
->
n_dülogs
, 
jd
);

587 
	`osù_å™ß˘i⁄_£t_ª£rved4
(
å™ß˘i⁄
, 
jn
);

588 
	`osù_å™ß˘i⁄_£t_ª£rved3
(
å™ß˘i⁄
, 
jd
);

590 
evt_™swî
 = 
	`osù_√w_outgoög_sùmesßge
(
™swî
);

591 
evt_™swî
->
å™ß˘i⁄id
 = 
å™ß˘i⁄
->transactionid;

592 
	`osù_å™ß˘i⁄_add_evít
(
å™ß˘i⁄
, 
evt_™swî
);

594 
	`ADD_ELEMENT
(
exc⁄ãxt
->
j_nŸifõs
, 
jn
);

595 
	`_eXosù_wakeup
(
exc⁄ãxt
);

597 
jn
->
n_öc_å
 = 
å™ß˘i⁄
;

599 
	`_eXosù_upd©e
(
exc⁄ãxt
);

600 
	`_eXosù_wakeup
(
exc⁄ãxt
);

601 
	}
}

603 
	$_eXosù_¥o˚ss_subs¸ibe_wôhö_ˇŒ
(
eXosù_t
 *
exc⁄ãxt
, 
eXosù_nŸify_t
 *
jn
, 
eXosù_dülog_t
 *
jd
, 
osù_å™ß˘i⁄_t
 *
å™ß˘i⁄
, 
osù_evít_t
 *
evt
) {

604 
	`_eXosù_nŸify_£t_ª‰esh_öãrvÆ
(
jn
, 
evt
->
sù
);

605 
	`osù_å™ß˘i⁄_£t_ª£rved4
(
å™ß˘i⁄
, 
jn
);

606 
	`osù_å™ß˘i⁄_£t_ª£rved3
(
å™ß˘i⁄
, 
jd
);

610 
time_t
 
now
 = 
	`osù_gësy°emtime
(
NULL
);

612 i‡(
jn
->
n_ss_expúes
 - 
now
 <= 0) {

613 
jn
->
n_ss_°©us
 = 
EXOSIP_SUBCRSTATE_TERMINATED
;

614 
jn
->
n_ss_ªas⁄
 = 
TIMEOUT
;

618 
	`osù_li°_add
(
jd
->
d_öc_ås
, 
å™ß˘i⁄
, 0);

619 
	`_eXosù_wakeup
(
exc⁄ãxt
);

621 
	}
}

623 
	$_eXosù_¥o˚ss_nŸify_wôhö_dülog
(
eXosù_t
 *
exc⁄ãxt
, 
eXosù_subs¸ibe_t
 *
js
, 
eXosù_dülog_t
 *
jd
, 
osù_å™ß˘i⁄_t
 *
å™ß˘i⁄
, 
osù_evít_t
 *
evt
) {

624 
osù_mesßge_t
 *
™swî
;

625 
osù_evít_t
 *
sùevít
;

626 
osù_hódî_t
 *
sub_°©e
;

628 #ifde‡
SUPPORT_MSN


629 
osù_hódî_t
 *
expúes
;

631 
i
;

633 i‡(
jd
 =
NULL
) {

634 
	`osù_li°_add
(&
exc⁄ãxt
->
j_å™ß˘i⁄s
, 
å™ß˘i⁄
, 0);

635 
	`_eXosù_£nd_deÁu…_™swî
(
exc⁄ãxt
, 
jd
, 
å™ß˘i⁄
, 
evt
, 500, "I¡î«»SIP Eº‹", "Nÿdülog f‹Åhi†NOTIFY", 
__LINE__
);

641 #i‚de‡
SUPPORT_MSN


642 
	`osù_mesßge_hódî_gë_by«me
(
evt
->
sù
, "subs¸ùti⁄-°©e", 0, &
sub_°©e
);

644 i‡(
sub_°©e
 =
NULL
 || sub_°©e->
hvÆue
 == NULL) {

645 
	`osù_li°_add
(&
exc⁄ãxt
->
j_å™ß˘i⁄s
, 
å™ß˘i⁄
, 0);

646 
	`_eXosù_£nd_deÁu…_™swî
(
exc⁄ãxt
, 
jd
, 
å™ß˘i⁄
, 
evt
, 400, 
NULL
, NULL, 
__LINE__
);

652 
i
 = 
	`_eXosù_buûd_ª•⁄£_deÁu…
(
exc⁄ãxt
, &
™swî
, 
jd
->
d_dülog
, 200, 
evt
->
sù
);

654 i‡(
i
 != 0) {

655 
	`osù_li°_add
(&
exc⁄ãxt
->
j_å™ß˘i⁄s
, 
å™ß˘i⁄
, 0);

656 
	`_eXosù_£nd_deÁu…_™swî
(
exc⁄ãxt
, 
jd
, 
å™ß˘i⁄
, 
evt
, 500, "I¡î«»SIP Eº‹", "FaûedÅÿbuûdánswî f‹ NOTIFY", 
__LINE__
);

660 #ifde‡
SUPPORT_MSN


661 
	`osù_mesßge_hódî_gë_by«me
(
evt
->
sù
, "expúes", 0, &
expúes
);

663 i‡(
expúes
 !
NULL
 &&Éxpúes->
hvÆue
 !NULL && 0 =
	`osù_°rˇ£cmp
(expires->hvalue, "0")) {

665 
js
->
s_ss_°©us
 = 
EXOSIP_SUBCRSTATE_TERMINATED
;

667 
eXosù_evít_t
 *
je
;

669 
je
 = 
	`_eXosù_evít_öô_f‹_subs¸ùti⁄
(
EXOSIP_SUBSCRIPTION_NOTIFY
, 
js
, 
jd
);

670 
	`_eXosù_evít_add
(
exc⁄ãxt
, 
je
);

673 
sùevít
 = 
	`osù_√w_outgoög_sùmesßge
(
™swî
);

674 
sùevít
->
å™ß˘i⁄id
 = 
å™ß˘i⁄
->transactionid;

675 
	`osù_å™ß˘i⁄_add_evít
(
å™ß˘i⁄
, 
sùevít
);

677 
	`osù_li°_add
(&
exc⁄ãxt
->
j_å™ß˘i⁄s
, 
å™ß˘i⁄
, 0);

679 
	`REMOVE_ELEMENT
(
exc⁄ãxt
->
j_subs¸ibes
, 
js
);

680 
	`_eXosù_subs¸ùti⁄_‰ì
(
exc⁄ãxt
, 
js
);

681 
	`_eXosù_wakeup
(
exc⁄ãxt
);

686 
	`osù_å™ß˘i⁄_£t_ª£rved5
(
å™ß˘i⁄
, 
js
);

687 
	`osù_å™ß˘i⁄_£t_ª£rved3
(
å™ß˘i⁄
, 
jd
);

688 
js
->
s_ss_°©us
 = 
EXOSIP_SUBCRSTATE_ACTIVE
;

694 i‡(0 =
	`osù_°∫ˇ£cmp
(
sub_°©e
->
hvÆue
, "active", 6)) {

695 
js
->
s_ss_°©us
 = 
EXOSIP_SUBCRSTATE_ACTIVE
;

697 } i‡(0 =
	`osù_°∫ˇ£cmp
(
sub_°©e
->
hvÆue
, "pending", 7)) {

698 
js
->
s_ss_°©us
 = 
EXOSIP_SUBCRSTATE_PENDING
;

701 i‡(0 =
	`osù_°∫ˇ£cmp
(
sub_°©e
->
hvÆue
, "terminated", 10)) {

703 
js
->
s_ss_°©us
 = 
EXOSIP_SUBCRSTATE_TERMINATED
;

706 
eXosù_evít_t
 *
je
;

708 
je
 = 
	`_eXosù_evít_öô_f‹_subs¸ùti⁄
(
EXOSIP_SUBSCRIPTION_NOTIFY
, 
js
, 
jd
, 
å™ß˘i⁄
);

710 i‡(
je
->
ªque°
 =
NULL
 && 
evt
->
sù
 != NULL) {

711 
i
 = 
	`osù_mesßge_˛⁄e
(
evt
->
sù
, &
je
->
ªque°
);

713 i‡(
i
 != 0) {

714 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] failedÅo cloneÑequest forÉvent\n"));

718 
	`_eXosù_evít_add
(
exc⁄ãxt
, 
je
);

721 
sùevít
 = 
	`osù_√w_outgoög_sùmesßge
(
™swî
);

722 
sùevít
->
å™ß˘i⁄id
 = 
å™ß˘i⁄
->transactionid;

723 
	`osù_å™ß˘i⁄_add_evít
(
å™ß˘i⁄
, 
sùevít
);

725 
	`osù_li°_add
(&
exc⁄ãxt
->
j_å™ß˘i⁄s
, 
å™ß˘i⁄
, 0);

727 
	`REMOVE_ELEMENT
(
exc⁄ãxt
->
j_subs¸ibes
, 
js
);

728 
	`_eXosù_subs¸ùti⁄_‰ì
(
exc⁄ãxt
, 
js
);

729 
	`_eXosù_wakeup
(
exc⁄ãxt
);

733 
	`osù_å™ß˘i⁄_£t_ª£rved5
(
å™ß˘i⁄
, 
js
);

734 
	`osù_å™ß˘i⁄_£t_ª£rved3
(
å™ß˘i⁄
, 
jd
);

739 
	`osù_li°_add
(
jd
->
d_öc_ås
, 
å™ß˘i⁄
, 0);

741 
sùevít
 = 
	`osù_√w_outgoög_sùmesßge
(
™swî
);

742 
sùevít
->
å™ß˘i⁄id
 = 
å™ß˘i⁄
->transactionid;

743 
	`osù_å™ß˘i⁄_add_evít
(
å™ß˘i⁄
, 
sùevít
);

745 
	`_eXosù_wakeup
(
exc⁄ãxt
);

747 
	}
}

749 
	$_eXosù_m©ch_upd©e_f‹_övôe
(
eXosù_ˇŒ_t
 *
jc
, 
osù_mesßge_t
 *
upd©e
) {

750 
osù_å™ß˘i⁄_t
 *
out_öv
;

752 i‡(
jc
 =
NULL
)

753  
OSIP_BADPARAMETER
;

755 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO1
, 
NULL
, "[eXosip]ÅryingÅo match update with invite\n"));

757 
out_öv
 = 
	`_eXosù_föd_œ°_out_övôe
(
jc
, 
NULL
);

759 i‡(
out_öv
 =
NULL
 || out_öv->
‹ig_ªque°
 == NULL)

760  
OSIP_NOTFOUND
;

762 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO1
, 
NULL
, "[eXosip] inviteÅransaction found\n"));

765 i‡(
upd©e
 =
NULL
)

766  
OSIP_BADPARAMETER
;

768 i‡(
upd©e
->
c£q
 =
NULL
 || upd©e->c£q->
mëhod
 =NULL || upd©e->
to
 == NULL)

769  
OSIP_SYNTAXERROR
;

771 i‡(0 !
	`osù_ˇŒ_id_m©ch
(
out_öv
->
ˇŒid
, 
upd©e
->
ˇŒ_id
))

772  
OSIP_UNDEFINED_ERROR
;

778 
osù_gíîic_∑øm_t
 *
èg_‰om
;

779 
osù_gíîic_∑øm_t
 *
èg_to
;

781 
	`osù_‰om_∑øm_gë_by«me
(
out_öv
->
‰om
, "èg", &
èg_‰om
);

782 
	`osù_‰om_∑øm_gë_by«me
(
upd©e
->
to
, "èg", &
èg_to
);

784 i‡(
èg_‰om
 =
NULL
 ||Åag_‰om->
gvÆue
 == NULL) {

785 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] uncompliant userágent [missingÅag in From of outgoingÑequest]\n"));

786  
OSIP_SYNTAXERROR
;

789 i‡(
èg_to
 =
NULL
 ||Åag_to->
gvÆue
 == NULL) {

790 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] uncompliant userágent [missingÅag in To of incomingÑequest]\n"));

791  
OSIP_SYNTAXERROR
;

794 i‡(0 !
	`°rcmp
(
èg_‰om
->
gvÆue
, 
èg_to
->gvalue))

795  
OSIP_UNDEFINED_ERROR
;

798  
OSIP_SUCCESS
;

799 
	}
}

801 
	$_eXosù_m©ch_nŸify_f‹_subs¸ibe
(
eXosù_subs¸ibe_t
 *
js
, 
osù_mesßge_t
 *
nŸify
) {

802 
osù_å™ß˘i⁄_t
 *
out_sub
;

804 i‡(
js
 =
NULL
)

805  
OSIP_BADPARAMETER
;

807 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO1
, 
NULL
, "[eXosip]ÅryingÅo matchÇotify with subscribe\n"));

809 
out_sub
 = 
js
->
s_out_å
;

811 i‡(
out_sub
 =
NULL
 || out_sub->
‹ig_ªque°
 == NULL)

812  
OSIP_NOTFOUND
;

814 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO1
, 
NULL
, "[eXosip] subscribeÅransaction found\n"));

817 i‡(
nŸify
 =
NULL
)

818  
OSIP_BADPARAMETER
;

820 i‡(
nŸify
->
c£q
 =
NULL
 ||ÇŸify->c£q->
mëhod
 =NULL ||ÇŸify->
to
 == NULL)

821  
OSIP_SYNTAXERROR
;

823 i‡(0 !
	`osù_ˇŒ_id_m©ch
(
out_sub
->
ˇŒid
, 
nŸify
->
ˇŒ_id
))

824  
OSIP_UNDEFINED_ERROR
;

830 
osù_gíîic_∑øm_t
 *
èg_‰om
;

831 
osù_gíîic_∑øm_t
 *
èg_to
;

833 
	`osù_‰om_∑øm_gë_by«me
(
out_sub
->
‰om
, "èg", &
èg_‰om
);

834 
	`osù_‰om_∑øm_gë_by«me
(
nŸify
->
to
, "èg", &
èg_to
);

836 i‡(
èg_‰om
 =
NULL
 ||Åag_‰om->
gvÆue
 == NULL) {

837 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] uncompliant userágent [missingÅag in From of outgoingÑequest]\n"));

838  
OSIP_SYNTAXERROR
;

841 i‡(
èg_to
 =
NULL
 ||Åag_to->
gvÆue
 == NULL) {

842 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] uncompliant userágent [missingÅag in To of incomingÑequest]\n"));

843  
OSIP_SYNTAXERROR
;

846 i‡(0 !
	`°rcmp
(
èg_‰om
->
gvÆue
, 
èg_to
->gvalue))

847  
OSIP_UNDEFINED_ERROR
;

850  
OSIP_SUCCESS
;

851 
	}
}

855 
	$_eXosù_¥o˚ss_mesßge_wôhö_dülog
(
eXosù_t
 *
exc⁄ãxt
, 
eXosù_ˇŒ_t
 *
jc
, 
eXosù_dülog_t
 *
jd
, 
osù_å™ß˘i⁄_t
 *
å™ß˘i⁄
) {

856 
	`osù_li°_add
(
jd
->
d_öc_ås
, 
å™ß˘i⁄
, 0);

857 
	`osù_å™ß˘i⁄_£t_ª£rved2
(
å™ß˘i⁄
, 
jc
);

858 
	`osù_å™ß˘i⁄_£t_ª£rved3
(
å™ß˘i⁄
, 
jd
);

859 
	`_eXosù_wakeup
(
exc⁄ãxt
);

861 
	}
}

863 
	$_eXosù_¥o˚ss_√wªque°
(
eXosù_t
 *
exc⁄ãxt
, 
osù_evít_t
 *
evt
, 
sockë
) {

864 
osù_å™ß˘i⁄_t
 *
å™ß˘i⁄
;

865 
i
;

866 
˘x_ty≥
;

867 
eXosù_ˇŒ_t
 *
jc
;

868 
eXosù_dülog_t
 *
jd
;

870 #i‚de‡
MINISIZE


871 
eXosù_subs¸ibe_t
 *
js
;

872 
eXosù_nŸify_t
 *
jn
;

873 
osù_evít_t
 *
evt_™swî
;

874 
osù_mesßge_t
 *
™swî
;

877 i‡(
	`MSG_IS_INVITE
(
evt
->
sù
)) {

878 
˘x_ty≥
 = 
IST
;

880 } i‡(
	`MSG_IS_ACK
(
evt
->
sù
)) {

881 
˘x_ty≥
 = -1;

883 } i‡(
	`MSG_IS_REQUEST
(
evt
->
sù
)) {

884 
˘x_ty≥
 = 
NIST
;

887 
˘x_ty≥
 = -1;

888 
	`osù_evít_‰ì
(
evt
);

892 
å™ß˘i⁄
 = 
NULL
;

894 i‡(
˘x_ty≥
 != -1) {

895 
i
 = 
	`_eXosù_å™ß˘i⁄_öô
(
exc⁄ãxt
, &
å™ß˘i⁄
, (
osù_fsm_ty≥_t
Ë
˘x_ty≥
,Éxc⁄ãxt->
j_osù
, 
evt
->
sù
);

897 i‡(
i
 != 0) {

898 
	`osù_evít_‰ì
(
evt
);

903 
	`osù_å™ß˘i⁄_£t_out_sockë
(
å™ß˘i⁄
, 
sockë
);

905 
evt
->
å™ß˘i⁄id
 = 
å™ß˘i⁄
->transactionid;

906 
	`osù_å™ß˘i⁄_£t_ª£rved2
(
å™ß˘i⁄
, 
NULL
);

908 
	`osù_å™ß˘i⁄_add_evít
(
å™ß˘i⁄
, 
evt
);

911 i‡(
	`MSG_IS_CANCEL
(
evt
->
sù
)) {

915 
	`_eXosù_¥o˚ss_ˇn˚l
(
exc⁄ãxt
, 
å™ß˘i⁄
, 
evt
);

919 
jd
 = 
NULL
;

922 
jc
 = 
exc⁄ãxt
->
j_ˇŒs
; j¯!
NULL
; j¯jc->
√xt
) {

923 
jd
 = 
jc
->
c_dülogs
; jd !
NULL
; jd = jd->
√xt
) {

924 i‡(
jd
->
d_dülog
 !
NULL
) {

925 i‡(
	`osù_dülog_m©ch_as_uas
(
jd
->
d_dülog
, 
evt
->
sù
) == 0)

930 i‡(
jd
 !
NULL
)

935 i‡(
jd
 !
NULL
 && 
å™ß˘i⁄
 !NULL && 
evt
->
sù
 !NULL &&Évt->sù->
c£q
 !NULL &&Évt->sù->c£q->
numbî
 != NULL) {

936 i‡(
jd
->
d_dülog
 !
NULL
 && jd->d_dülog->
ªmŸe_c£q
 > 0) {

937 
c£q
 = 
	`osù_©oi
(
evt
->
sù
->c£q->
numbî
);

939 i‡(
c£q
 < 
jd
->
d_dülog
->
ªmŸe_c£q
) {

940 
	`osù_li°_add
(&
exc⁄ãxt
->
j_å™ß˘i⁄s
, 
å™ß˘i⁄
, 0);

941 
	`_eXosù_£nd_deÁu…_™swî
(
exc⁄ãxt
, 
jd
, 
å™ß˘i⁄
, 
evt
, 500, 
NULL
, "Wr⁄g Lowî CSeq", 
__LINE__
);

945 i‡(
c£q
 =
jd
->
d_dülog
->
ªmŸe_c£q
) {

948 i‡(
	`MSG_IS_INVITE
(
evt
->
sù
Ë&& 
jc
->
c_öc_å
 !
NULL
) {

949 
osù_gíîic_∑øm_t
 *
èg_∑øm_loˇl
 = 
NULL
;

951 
i
 = 
	`osù_to_gë_èg
(
evt
->
sù
->
to
, &
èg_∑øm_loˇl
);

953 i‡(
i
 != 0) {

954 
osù_gíîic_∑øm_t
 *
br
;

955 
osù_gíîic_∑øm_t
 *
br2
;

957 
	`osù_vü_∑øm_gë_by«me
(
å™ß˘i⁄
->
t›vü
, "bønch", &
br
);

958 
	`osù_vü_∑øm_gë_by«me
(
jc
->
c_öc_å
->
t›vü
, "bønch", &
br2
);

960 i‡(
br
 !
NULL
 && 
br2
 !NULL && br->
gvÆue
 != NULL && br2->gvalue != NULL) {

961 i‡(
	`osù_°rˇ£cmp
(
br
->
gvÆue
, 
br2
->gvalue) == 0) {

963 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] drop INVITEÑetransmissionáfter INVITEÑeply\n"));

964 
	`_eXosù_å™ß˘i⁄_‰ì
(
exc⁄ãxt
, 
å™ß˘i⁄
);

968 
jc
 = 
NULL
;

969 
jd
 = 
NULL
;

970 #ifde‡
ACCEPT_DUPLICATE_INVITE


973 
	`osù_li°_add
(&
exc⁄ãxt
->
j_å™ß˘i⁄s
, 
å™ß˘i⁄
, 0);

974 
	`_eXosù_£nd_deÁu…_™swî
(
exc⁄ãxt
, 
NULL
, 
å™ß˘i⁄
, 
evt
, 486, NULL, "övôêf‹ du∂iˇãÑegi°øti⁄", 
__LINE__
);

982 i‡(
jd
 !
NULL
) {

983 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip]ÑeceiveáÑequest with same cseq\n"));

984 
	`_eXosù_å™ß˘i⁄_‰ì
(
exc⁄ãxt
, 
å™ß˘i⁄
);

991 #i‚de‡
MINISIZE


993 i‡(
˘x_ty≥
 =
IST
) {

994 
i
 = 
	`_eXosù_buûd_ª•⁄£_deÁu…
(
exc⁄ãxt
, &
™swî
, 
NULL
, 100, 
evt
->
sù
);

996 i‡(
i
 != 0) {

997 
	`_eXosù_å™ß˘i⁄_‰ì
(
exc⁄ãxt
, 
å™ß˘i⁄
);

1001 
	`osù_mesßge_£t_c⁄ã¡_Àngth
(
™swî
, "0");

1004 
evt_™swî
 = 
	`osù_√w_outgoög_sùmesßge
(
™swî
);

1005 
evt_™swî
->
å™ß˘i⁄id
 = 
å™ß˘i⁄
->transactionid;

1008 
	`osù_å™ß˘i⁄_add_evít
(
å™ß˘i⁄
, 
evt_™swî
);

1009 
	`_eXosù_wakeup
(
exc⁄ãxt
);

1014 i‡(
jc
 =
NULL
 && 
jd
 =NULL && 
	`MSG_IS_UPDATE
(
evt
->
sù
)) {

1017 
jc
 = 
NULL
;

1020 
jc
 = 
exc⁄ãxt
->
j_ˇŒs
; j¯!
NULL
; j¯jc->
√xt
) {

1021 #i‚de‡
MINISIZE


1022 i‡(
	`_eXosù_m©ch_upd©e_f‹_övôe
(
jc
, 
evt
->
sù
) == 0) {

1026 
ﬁd_c£q
 = -1;

1029 
jd
 = 
jc
->
c_dülogs
;

1031 i‡(
jd
 !
NULL
 && jd->
d_dülog
 !NULL && jd->d_dülog->
°©e
 !
DIALOG_EARLY
) {

1033 
	`osù_li°_add
(&
exc⁄ãxt
->
j_å™ß˘i⁄s
, 
å™ß˘i⁄
, 0);

1034 
	`_eXosù_£nd_deÁu…_™swî
(
exc⁄ãxt
, 
jd
, 
å™ß˘i⁄
, 
evt
, 481, 
NULL
, "CÆ»D€†NŸ Exi°", 
__LINE__
);

1040 i‡(
jd
->
d_dülog
) {

1041 
ﬁd_c£q
 = 
jd
->
d_dülog
->
loˇl_c£q
;

1042 
	`osù_dülog_‰ì
(
jd
->
d_dülog
);

1045 
i
 = 
	`osù_dülog_öô_as_uac_wôh_ªmŸe_ªque°
(&(
jd
->
d_dülog
), 
evt
->
sù
, 
ﬁd_c£q
);

1047 i‡(
i
 != 0) {

1048 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] cannotÉstablishá dialog with UPDATE\n"));

1049 
	`osù_li°_add
(&
exc⁄ãxt
->
j_å™ß˘i⁄s
, 
å™ß˘i⁄
, 0);

1050 
	`_eXosù_£nd_deÁu…_™swî
(
exc⁄ãxt
, 
jd
, 
å™ß˘i⁄
, 
evt
, 500, 
NULL
, NULL, 
__LINE__
);

1054 
jd
->
d_dülog
->
°©e
 = 
DIALOG_EARLY
;

1056 i‡(
ﬁd_c£q
 == -1) {

1057 
jd
->
d_dülog
->
loˇl_c£q
 = 22;

1066 i‡(
jd
 !
NULL
) {

1067 
osù_å™ß˘i⁄_t
 *
ﬁd_ån
;

1077 i‡(
å™ß˘i⁄
 =
NULL
) {

1079 } i‡(
	`MSG_IS_NOTIFY
(
evt
->
sù
)) {

1081 } i‡(!
	`MSG_IS_BYE
(
evt
->
sù
)) {

1083 
ﬁd_ån
 = 
	`_eXosù_föd_œ°_öc_å™ß˘i⁄
(
jd
, "BYE");

1085 i‡(
ﬁd_ån
 =
NULL
)

1086 
ﬁd_ån
 = 
	`_eXosù_föd_œ°_out_å™ß˘i⁄
(
jc
, 
jd
, "BYE");

1088 i‡(
ﬁd_ån
 !
NULL
) {

1089 
	`osù_li°_add
(&
exc⁄ãxt
->
j_å™ß˘i⁄s
, 
å™ß˘i⁄
, 0);

1090 
	`_eXosù_£nd_deÁu…_™swî
(
exc⁄ãxt
, 
jd
, 
å™ß˘i⁄
, 
evt
, 481, 
NULL
, NULL, 
__LINE__
);

1095 i‡(
å™ß˘i⁄
 !
NULL
)

1096 
	`osù_dülog_upd©e_osù_c£q_as_uas
(
jd
->
d_dülog
, 
evt
->
sù
);

1098 i‡(
	`MSG_IS_INVITE
(
evt
->
sù
)) {

1100 
ﬁd_ån
 = 
	`_eXosù_föd_œ°_öc_övôe
(
jc
, 
jd
);

1102 i‡(
ﬁd_ån
 !
NULL
 && old_ån->
°©e
 !
IST_COMPLETED
 && old_ån->°©ê!
IST_CONFIRMED
 && old_ån->°©ê!
IST_TERMINATED
) {

1103 
	`osù_li°_add
(&
exc⁄ãxt
->
j_å™ß˘i⁄s
, 
å™ß˘i⁄
, 0);

1104 
	`_eXosù_£nd_deÁu…_™swî
(
exc⁄ãxt
, 
jd
, 
å™ß˘i⁄
, 
evt
, 500, "Rëry L©î", "A¿INVITE i†nŸÅîmö©ed", 
__LINE__
);

1108 
ﬁd_ån
 = 
	`_eXosù_föd_œ°_out_övôe
(
jc
, 
jd
);

1110 i‡(
ﬁd_ån
 !
NULL
 && old_ån->
°©e
 !
ICT_COMPLETED
 && old_ån->°©ê!
ICT_TERMINATED
) {

1111 
	`osù_li°_add
(&
exc⁄ãxt
->
j_å™ß˘i⁄s
, 
å™ß˘i⁄
, 0);

1112 
	`_eXosù_£nd_deÁu…_™swî
(
exc⁄ãxt
, 
jd
, 
å™ß˘i⁄
, 
evt
, 491, 
NULL
, NULL, 
__LINE__
);

1117 
	`osù_dülog_upd©e_rouã_£t_as_uas
(
jd
->
d_dülog
, 
evt
->
sù
);

1119 
	`_eXosù_¥o˚ss_ªövôe
(
exc⁄ãxt
, 
jc
, 
jd
, 
å™ß˘i⁄
);

1121 } i‡(
	`MSG_IS_BYE
(
evt
->
sù
)) {

1122 
osù_gíîic_∑øm_t
 *
èg_to
 = 
NULL
;

1124 i‡(
evt
->
sù
->
to
 !
NULL
)

1125 
	`osù_‰om_∑øm_gë_by«me
(
evt
->
sù
->
to
, "èg", &
èg_to
);

1127 i‡(
èg_to
 =
NULL
 ||Åag_to->
gvÆue
 == NULL) {

1128 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] uncompliant userágent [missingÅag in To of incoming BYE]\n"));

1129 
	`osù_li°_add
(&
exc⁄ãxt
->
j_å™ß˘i⁄s
, 
å™ß˘i⁄
, 0);

1130 
	`_eXosù_£nd_deÁu…_™swî
(
exc⁄ãxt
, 
jd
, 
å™ß˘i⁄
, 
evt
, 481, "MissögÅag i¿BYE", "MissögÅag i¿BYE", 
__LINE__
);

1134 
ﬁd_ån
 = 
	`_eXosù_föd_œ°_öc_å™ß˘i⁄
(
jd
, "BYE");

1136 i‡(
ﬁd_ån
 !
NULL
) {

1139 
	`osù_li°_add
(&
exc⁄ãxt
->
j_å™ß˘i⁄s
, 
å™ß˘i⁄
, 0);

1140 
	`_eXosù_£nd_deÁu…_™swî
(
exc⁄ãxt
, 
jd
, 
å™ß˘i⁄
, 
evt
, 500, "CÆ»AÃódy Tîmö©ed", "AÖídög BYE ha†ÆªadyÅîmö©êthi†ˇŒ", 
__LINE__
);

1144 
	`_eXosù_¥o˚ss_bye
(
exc⁄ãxt
, 
jc
, 
jd
, 
å™ß˘i⁄
, 
evt
);

1146 } i‡(
	`MSG_IS_ACK
(
evt
->
sù
)) {

1147 
	`_eXosù_¥o˚ss_ack
(
exc⁄ãxt
, 
jc
, 
jd
, 
evt
);

1150 
	`_eXosù_¥o˚ss_mesßge_wôhö_dülog
(
exc⁄ãxt
, 
jc
, 
jd
, 
å™ß˘i⁄
);

1156 i‡(
	`MSG_IS_ACK
(
evt
->
sù
)) {

1158 
	`osù_evít_‰ì
(
evt
);

1162 i‡(
	`MSG_IS_INFO
(
evt
->
sù
)) {

1163 
	`osù_li°_add
(&
exc⁄ãxt
->
j_å™ß˘i⁄s
, 
å™ß˘i⁄
, 0);

1164 
	`_eXosù_£nd_deÁu…_™swî
(
exc⁄ãxt
, 
jd
, 
å™ß˘i⁄
, 
evt
, 481, 
NULL
, NULL, 
__LINE__
);

1168 i‡(
	`MSG_IS_INVITE
(
evt
->
sù
)) {

1169 
	`_eXosù_¥o˚ss_√w_övôe
(
exc⁄ãxt
, 
å™ß˘i⁄
, 
evt
);

1172 } i‡(
	`MSG_IS_BYE
(
evt
->
sù
)) {

1173 
	`osù_li°_add
(&
exc⁄ãxt
->
j_å™ß˘i⁄s
, 
å™ß˘i⁄
, 0);

1174 
	`_eXosù_£nd_deÁu…_™swî
(
exc⁄ãxt
, 
jd
, 
å™ß˘i⁄
, 
evt
, 481, 
NULL
, NULL, 
__LINE__
);

1178 #i‚de‡
MINISIZE


1179 
js
 = 
NULL
;

1182 
js
 = 
exc⁄ãxt
->
j_subs¸ibes
; j†!
NULL
; j†js->
√xt
) {

1183 
jd
 = 
js
->
s_dülogs
; jd !
NULL
; jd = jd->
√xt
) {

1184 i‡(
jd
->
d_dülog
 !
NULL
) {

1185 i‡(
	`osù_dülog_m©ch_as_uas
(
jd
->
d_dülog
, 
evt
->
sù
) == 0)

1190 i‡(
jd
 !
NULL
)

1194 i‡(
js
 !
NULL
) {

1196 
osù_å™ß˘i⁄_t
 *
ﬁd_ån
;

1201 i‡(
	`MSG_IS_NOTIFY
(
evt
->
sù
)) {

1203 
ﬁd_ån
 = 
	`_eXosù_föd_œ°_öc_nŸify
(
jd
);

1206 i‡(
ﬁd_ån
 !
NULL
 && old_ån->
°©e
 !
NIST_TERMINATED
) {

1208 
	`osù_li°_add
(&
exc⁄ãxt
->
j_å™ß˘i⁄s
, 
å™ß˘i⁄
, 0);

1209 
	`_eXosù_£nd_deÁu…_™swî
(
exc⁄ãxt
, 
jd
, 
å™ß˘i⁄
, 
evt
, 
SIP_INTERNAL_SERVER_ERROR
, "Rëry L©î", "AÖídög NOTIFY i†nŸÅîmö©ed", 
__LINE__
);

1213 
	`osù_dülog_upd©e_osù_c£q_as_uas
(
jd
->
d_dülog
, 
evt
->
sù
);

1214 
	`osù_dülog_upd©e_rouã_£t_as_uas
(
jd
->
d_dülog
, 
evt
->
sù
);

1216 
	`_eXosù_¥o˚ss_nŸify_wôhö_dülog
(
exc⁄ãxt
, 
js
, 
jd
, 
å™ß˘i⁄
, 
evt
);

1219 
	`osù_li°_add
(&
exc⁄ãxt
->
j_å™ß˘i⁄s
, 
å™ß˘i⁄
, 0);

1220 
	`_eXosù_£nd_deÁu…_™swî
(
exc⁄ãxt
, 
jd
, 
å™ß˘i⁄
, 
evt
, 
SIP_NOT_IMPLEMENTED
, 
NULL
, "Ju° NŸ Im∂emíãd", 
__LINE__
);

1226 i‡(
	`MSG_IS_NOTIFY
(
evt
->
sù
)) {

1229 
js
 = 
NULL
;

1232 
js
 = 
exc⁄ãxt
->
j_subs¸ibes
; j†!
NULL
; j†js->
√xt
) {

1233 i‡(
	`_eXosù_m©ch_nŸify_f‹_subs¸ibe
(
js
, 
evt
->
sù
) == 0) {

1234 i‡(
js
->
s_out_å
 !
NULL
) {

1235 
time_t
 
now
 = 
	`osù_gësy°emtime
(
NULL
);

1237 i‡(
now
 - 
js
->
s_out_å
->
búth_time
 > 64) {

1239 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_WARNING
, 
NULL
, "[eXosip] outoftime NOTIFYÇoÖart ofányÉstablished dialogs\n"));

1240 
	`osù_li°_add
(&
exc⁄ãxt
->
j_å™ß˘i⁄s
, 
å™ß˘i⁄
, 0);

1241 
	`_eXosù_£nd_deÁu…_™swî
(
exc⁄ãxt
, 
jd
, 
å™ß˘i⁄
, 
evt
, 
SIP_INTERNAL_SERVER_ERROR
, 
NULL
, "Outo·imêNŸifiˇti⁄", 
__LINE__
);

1246 
i
 = 
	`_eXosù_dülog_öô_as_uac
(&
jd
, 
evt
->
sù
);

1248 i‡(
i
 != 0) {

1249 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] cannotÉstablishá dialog\n"));

1254 i‡(
js
->
s_out_å
 !
NULL
 && js->s_out_å->
c£q
 !NULL && js->s_out_å->c£q->
numbî
 != NULL) {

1255 
jd
->
d_dülog
->
loˇl_c£q
 = 
	`©oi
(
js
->
s_out_å
->
c£q
->
numbî
);

1256 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosip]Üocal cseq has been updated\n"));

1259 
	`ADD_ELEMENT
(
js
->
s_dülogs
, 
jd
);

1260 
	`_eXosù_upd©e
(
exc⁄ãxt
);

1262 
	`_eXosù_¥o˚ss_nŸify_wôhö_dülog
(
exc⁄ãxt
, 
js
, 
jd
, 
å™ß˘i⁄
, 
evt
);

1267 
	`osù_li°_add
(&
exc⁄ãxt
->
j_å™ß˘i⁄s
, 
å™ß˘i⁄
, 0);

1271 
jn
 = 
NULL
;

1274 
jn
 = 
exc⁄ãxt
->
j_nŸifõs
; j¿!
NULL
; j¿jn->
√xt
) {

1275 
jd
 = 
jn
->
n_dülogs
; jd !
NULL
; jd = jd->
√xt
) {

1276 i‡(
jd
->
d_dülog
 !
NULL
) {

1277 i‡(
	`osù_dülog_m©ch_as_uas
(
jd
->
d_dülog
, 
evt
->
sù
) == 0)

1282 i‡(
jd
 !
NULL
)

1286 i‡(
jn
 !
NULL
) {

1288 
osù_å™ß˘i⁄_t
 *
ﬁd_ån
;

1294 i‡(
	`MSG_IS_SUBSCRIBE
(
evt
->
sù
Ë|| 
	`MSG_IS_REFER
(evt->sip)) {

1296 
ﬁd_ån
 = 
	`_eXosù_föd_œ°_öc_subs¸ibe
(
jn
, 
jd
);

1299 i‡(
ﬁd_ån
 !
NULL
 && old_ån->
°©e
 !
NIST_TERMINATED
 && old_ån->°©ê!
NIST_COMPLETED
) {

1301 
	`osù_li°_add
(&
exc⁄ãxt
->
j_å™ß˘i⁄s
, 
å™ß˘i⁄
, 0);

1302 
	`_eXosù_£nd_deÁu…_™swî
(
exc⁄ãxt
, 
jd
, 
å™ß˘i⁄
, 
evt
, 
SIP_INTERNAL_SERVER_ERROR
, "Rëry L©î", "A SUBSCRIBE o∏REFER i†nŸÅîmö©ed", 
__LINE__
);

1306 
	`osù_dülog_upd©e_osù_c£q_as_uas
(
jd
->
d_dülog
, 
evt
->
sù
);

1307 
	`osù_dülog_upd©e_rouã_£t_as_uas
(
jd
->
d_dülog
, 
evt
->
sù
);

1309 
	`_eXosù_¥o˚ss_subs¸ibe_wôhö_ˇŒ
(
exc⁄ãxt
, 
jn
, 
jd
, 
å™ß˘i⁄
, 
evt
);

1312 
	`osù_li°_add
(&
exc⁄ãxt
->
j_å™ß˘i⁄s
, 
å™ß˘i⁄
, 0);

1313 
	`_eXosù_£nd_deÁu…_™swî
(
exc⁄ãxt
, 
jd
, 
å™ß˘i⁄
, 
evt
, 
SIP_NOT_IMPLEMENTED
, 
NULL
, NULL, 
__LINE__
);

1319 i‡(
	`MSG_IS_REFER
(
evt
->
sù
)) {

1320 
osù_hódî_t
 *
ª„r_sub
;

1322 
	`osù_mesßge_hódî_gë_by«me
(
evt
->
sù
, "Re„r-Sub", 0, &
ª„r_sub
);

1324 i‡(
ª„r_sub
 =
NULL
 ||Ñe„r_sub->
hvÆue
 =NULL || 
	`osù_°∫ˇ£cmp
(refer_sub->hvalue, "true", 4) == 0) {

1325 
	`_eXosù_¥o˚ss_√w_subs¸ùti⁄
(
exc⁄ãxt
, 
å™ß˘i⁄
, 
evt
);

1331 } i‡(
	`MSG_IS_SUBSCRIBE
(
evt
->
sù
)) {

1332 
	`_eXosù_¥o˚ss_√w_subs¸ùti⁄
(
exc⁄ãxt
, 
å™ß˘i⁄
, 
evt
);

1339 
	`osù_li°_add
(&
exc⁄ãxt
->
j_å™ß˘i⁄s
, 
å™ß˘i⁄
, 0);

1340 
	`_eXosù_wakeup
(
exc⁄ãxt
);

1341 
	}
}

1343 
	$_eXosù_¥o˚ss_ª•⁄£_out_of_å™ß˘i⁄
(
eXosù_t
 *
exc⁄ãxt
, 
osù_evít_t
 *
evt
) {

1344 
eXosù_ˇŒ_t
 *
jc
 = 
NULL
;

1345 
eXosù_dülog_t
 *
jd
 = 
NULL
;

1347 i‡(
evt
->
sù
 =
NULL
 ||Évt->sù->
c£q
 =NULL ||Évt->sù->c£q->
numbî
 =NULL ||Évt->sù->
to
 =NULL ||Évt->sù->
‰om
 == NULL) {

1348 
	`osù_evít_‰ì
(
evt
);

1352 i‡(!
	`MSG_IS_RESPONSE_FOR
(
evt
->
sù
, "INVITE")) {

1353 
	`osù_evít_‰ì
(
evt
);

1358 i‡(
evt
->
sù
->
°©us_code
 < 200) {

1359 
	`osù_evít_‰ì
(
evt
);

1363 i‡(
evt
->
sù
->
°©us_code
 > 299) {

1365 
	`osù_evít_‰ì
(
evt
);

1370 
jc
 = 
exc⁄ãxt
->
j_ˇŒs
; j¯!
NULL
; j¯jc->
√xt
) {

1372 i‡(
jc
->
c_id
 >1 && jc->
c_dülogs
 !
NULL
) {

1373 
jd
 = 
jc
->
c_dülogs
; jd !
NULL
; jd = jd->
√xt
) {

1374 i‡(
jd
->
d_id
 >1 && jd->
d_dülog
 !
NULL
) {

1376 
osù_gíîic_∑øm_t
 *
èg
;

1378 
	`osù_‰om_gë_èg
(
evt
->
sù
->
to
, &
èg
);

1380 i‡(
jd
->
d_dülog
->
ªmŸe_èg
 =
NULL
 || 
èg
 == NULL)

1383 i‡(
jd
->
d_dülog
->
ªmŸe_èg
 !
NULL
 && 
èg
 !NULL &&Åag->
gvÆue
 !NULL && 0 =
	`°rcmp
(jd->d_dialog->remote_tag,Åag->gvalue))

1388 i‡(
jd
 !
NULL
)

1392 i‡(
jc
->
c_out_å
 !
NULL
 && jc->c_out_å->
‹ig_ªque°
 !NULL && jc->c_out_å->‹ig_ªque°->
‰om
 != NULL) {

1393 
osù_gíîic_∑øm_t
 *
èg_övôe
;

1394 
osù_gíîic_∑øm_t
 *
èg
;

1396 
	`osù_‰om_gë_èg
(
jc
->
c_out_å
->
‹ig_ªque°
->
‰om
, &
èg_övôe
);

1397 
	`osù_‰om_gë_èg
(
evt
->
sù
->
‰om
, &
èg
);

1399 i‡(
èg_övôe
 =
NULL
 || 
èg
 == NULL)

1402 i‡(
èg_övôe
->
gvÆue
 !
NULL
 && 
èg
->gvÆuê!NULL && 0 =
	`°rcmp
(tag_invite->gvalue,Åag->gvalue))

1408 i‡(
jc
 !
NULL
 && 
jd
 != NULL) {

1410 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO1
, 
NULL
, "[eXosip] 2xxÑestransmissionÑeceived forÉstablished dialog\n"));

1413 i‡(
jd
->
d_ack
 !
NULL
 && jd->d_ack->
c£q
 !NULL && jd->d_ack->c£q->
numbî
 != NULL) {

1414 i‡(0 =
	`osù_°rˇ£cmp
(
jd
->
d_ack
->
c£q
->
numbî
, 
evt
->
sù
->cseq->number)) {

1415 
	`_eXosù_¢d_mesßge
(
exc⁄ãxt
, 
NULL
, 
jd
->
d_ack
, NULL, 0, -1);

1416 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO1
, 
NULL
, "[eXosip] ACKÑestransmission sent\n"));

1417 
	`osù_evít_‰ì
(
evt
);

1424 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO1
, 
NULL
, "[eXosip] ACK for -old-ÑestransmissionÇot sent\n"));

1425 
	`osù_evít_‰ì
(
evt
);

1432 
osù_dülog_t
 *
dlg
;

1433 
osù_å™ß˘i⁄_t
 *
œ°_å
;

1435 
i
;

1438 
i
 = 
	`osù_dülog_öô_as_uac
(&
dlg
, 
evt
->
sù
);

1440 i‡(
i
 !0 || 
dlg
 =
NULL
) {

1441 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] cannot build dialog for 200ok\n"));

1442 
	`osù_evít_‰ì
(
evt
);

1446 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO1
, 
NULL
, "[eXosip] sending ACK for 2xx out ofÅransaction\n"));

1449 
osù_mesßge_t
 *
bye
 = 
NULL
;

1450 
osù_mesßge_t
 *
ack
;

1452 
i
 = 
	`_eXosù_buûd_ªque°_wôhö_dülog
(
exc⁄ãxt
, &
ack
, "ACK", 
dlg
);

1454 i‡(
i
 != 0) {

1455 
	`osù_dülog_‰ì
(
dlg
);

1456 
	`osù_evít_‰ì
(
evt
);

1462 
œ°_å
 = 
NULL
;

1464 i‡(
jc
 !
NULL
)

1465 
œ°_å
 = 
jc
->
c_out_å
;

1467 i‡(
œ°_å
 !
NULL
) {

1468 
pos
 = 0;

1469 
i
;

1470 
osù_¥oxy_auth‹iz©i⁄_t
 *
∑
 = 
NULL
;

1472 
i
 = 
	`osù_mesßge_gë_¥oxy_auth‹iz©i⁄
(
œ°_å
->
‹ig_ªque°
, 
pos
, &
∑
);

1474 
i
 >0 && 
∑
 !
NULL
) {

1475 
osù_¥oxy_auth‹iz©i⁄_t
 *
∑2
;

1477 
i
 = 
	`osù_¥oxy_auth‹iz©i⁄_˛⁄e
(
∑
, &
∑2
);

1479 i‡(
i
 != 0) {

1480 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip]Érror in credential from INVITE\n"));

1484 
	`osù_li°_add
(&
ack
->
¥oxy_auth‹iz©i⁄s
, 
∑2
, -1);

1485 
∑
 = 
NULL
;

1486 
pos
++;

1487 
i
 = 
	`osù_mesßge_gë_¥oxy_auth‹iz©i⁄
(
œ°_å
->
‹ig_ªque°
, 
pos
, &
∑
);

1491 
	`_eXosù_¢d_mesßge
(
exc⁄ãxt
, 
NULL
, 
ack
, NULL, 0, -1);

1492 
	`osù_mesßge_‰ì
(
ack
);

1497 
dlg
->
loˇl_c£q
 = dlg->local_cseq + 4;

1500 
i
 = 
	`_eXosù_gíî©ög_bye
(
exc⁄ãxt
, &
bye
, 
dlg
);

1502 i‡(
bye
 !
NULL
 && 
i
 =
OSIP_SUCCESS
)

1503 
	`_eXosù_¢d_mesßge
(
exc⁄ãxt
, 
NULL
, 
bye
, NULL, 0, -1);

1505 
	`osù_mesßge_‰ì
(
bye
);

1508 
	`osù_dülog_‰ì
(
dlg
);

1511 
	`osù_evít_‰ì
(
evt
);

1513 
	}
}

1515 
	$_eXosù_h™dÀ_rfc5626_ob
(
eXosù_t
 *
exc⁄ãxt
, 
osù_mesßge_t
 *
mesßge
, *
ªmŸe_ho°
, 
ªmŸe_p‹t
) {

1516 
osù_c⁄è˘_t
 *
co
;

1517 
osù_uri_∑øm_t
 *
u_∑øm
 = 
NULL
;

1518 
_ªmŸe_p‹t
[10];

1520 i‡(
mesßge
 =
NULL
)

1521  
OSIP_BADPARAMETER
;

1523 i‡(
mesßge
->
c£q
 =
NULL
)

1524  
OSIP_SYNTAXERROR
;

1526 i‡(
mesßge
->
c£q
->
mëhod
 =
NULL
)

1527  
OSIP_SYNTAXERROR
;

1529 i‡(0 =
	`°rcmp
(
mesßge
->
c£q
->
mëhod
, "REGISTER"))

1530  
OSIP_SUCCESS
;

1532 i‡(
	`osù_li°_size
(&
mesßge
->
ªc‹d_rouãs
) > 0)

1533  
OSIP_SYNTAXERROR
;

1535 
	`¢¥ötf
(
_ªmŸe_p‹t
, (_ªmŸe_p‹t), "%i", 
ªmŸe_p‹t
);

1537 
co
 = (
osù_c⁄è˘_t
 *Ë
	`osù_li°_gë
(&
mesßge
->
c⁄è˘s
, 0);

1539 i‡(
co
 =
NULL
 || co->
uæ
 == NULL)

1540  
OSIP_SUCCESS
;

1542 
	`osù_uri_u∑øm_gë_by«me
(
co
->
uæ
, "ob", &
u_∑øm
);

1544 i‡(
u_∑øm
 =
NULL
 || u_∑øm->
g«me
 == NULL) {

1545 i‡(
exc⁄ãxt
->
›t_f‹˚_c⁄√˘i⁄ªu£
 > 0)

1546 
	`osù_uri_u∑øm_add
(
co
->
uæ
, 
	`osù_°rdup
("ob"), 
NULL
);

1548  
OSIP_SUCCESS
;

1552 
	`osù_uri_u∑øm_add
(
co
->
uæ
, 
	`osù_°rdup
("x-obr"), osù_°rdup(
ªmŸe_ho°
));

1553 
	`osù_uri_u∑øm_add
(
co
->
uæ
, 
	`osù_°rdup
("x-obp"), osù_°rdup(
_ªmŸe_p‹t
));

1554  
OSIP_SUCCESS
;

1555 
	}
}

1557 
	$_eXosù_h™dÀ_ª˚ived_Ω‹t
(
osù_mesßge_t
 *
ª•⁄£
, *
ª˚ived_ho°
, *
Ω‹t_p‹t
) {

1558 
osù_gíîic_∑øm_t
 *
Ω‹t
;

1559 
osù_gíîic_∑øm_t
 *
ª˚ived
;

1560 
osù_vü_t
 *
vü
;

1563 i‡(
ª•⁄£
 =
NULL
)

1564  
OSIP_BADPARAMETER
;

1566 i‡(
	`MSG_IS_REQUEST
(
ª•⁄£
))

1567  
OSIP_SUCCESS
;

1569 i‡(
ª˚ived_ho°
 =
NULL
)

1570  
OSIP_SUCCESS
;

1572 i‡(
Ω‹t_p‹t
 =
NULL
)

1573  
OSIP_SUCCESS
;

1575 
vü
 = 
	`osù_li°_gë
(&
ª•⁄£
->
vüs
, 0);

1577 i‡(
vü
 =
NULL
 || vü->
ho°
 == NULL)

1578  
OSIP_BADPARAMETER
;

1580 
	`osù_vü_∑øm_gë_by«me
(
vü
, "Ω‹t", &
Ω‹t
);

1582 i‡(
Ω‹t
 !
NULL
) {

1583 i‡(
Ω‹t
->
gvÆue
 !
NULL
) {

1584 *
Ω‹t_p‹t
 = 
	`©oi
(
Ω‹t
->
gvÆue
);

1588 
	`osù_vü_∑øm_gë_by«me
(
vü
, "ª˚ived", &
ª˚ived
);

1590 i‡(
ª˚ived
 !
NULL
) {

1591 i‡(
ª˚ived
->
gvÆue
 !
NULL
 && 
	`°æí
(received->gvalue) > 0) {

1592 
	`¢¥ötf
(
ª˚ived_ho°
, 65, "%s", 
ª˚ived
->
gvÆue
);

1596 
	`¢¥ötf
(
ª˚ived_ho°
, 65, "%s", 
vü
->
ho°
);

1600 
	}
}

1602 
	$udp_é_À¨n_p‹t_‰om_vü
(
eXosù_t
 *
exc⁄ãxt
, 
osù_mesßge_t
 *
sù
) {

1603 
eXéudp
 *
ª£rved
 = (eXéud∞*Ë
exc⁄ãxt
->
eXéudp_ª£rved
;

1605 i‡(
ª£rved
 =
NULL
) {

1610 i‡(
exc⁄ãxt
->
auto_masquîade_c⁄è˘
 > 0) {

1611 
osù_vü_t
 *
vü
 = 
NULL
;

1612 
osù_gíîic_∑øm_t
 *
br_Ω‹t
;

1613 
osù_gíîic_∑øm_t
 *
br_ª˚ived
;

1614 
i
;

1616 
i
 = 
	`osù_mesßge_gë_vü
(
sù
, 0, &
vü
);

1618 i‡(
i
 >0 && 
vü
 !
NULL
 && vü->
¥Ÿocﬁ
 !NULL && (
	`osù_°rˇ£cmp
(via->protocol, "udp") == 0 || osip_strcasecmp(via->protocol, "dtls") == 0)) {

1619 
eXosù_accou¡_öfo
 
aöfo
;

1621 
	`osù_vü_∑øm_gë_by«me
(
vü
, "Ω‹t", &
br_Ω‹t
);

1622 
	`osù_vü_∑øm_gë_by«me
(
vü
, "ª˚ived", &
br_ª˚ived
);

1624 i‡(
br_Ω‹t
 =
NULL
 && 
br_ª˚ived
 == NULL)

1627 i‡(
br_Ω‹t
 !
NULL
 && br_Ω‹t->
gvÆue
 =NULL && 
br_ª˚ived
 == NULL)

1630 
	`mem£t
(&
aöfo
, 0, (
eXosù_accou¡_öfo
));

1632 i‡(
br_Ω‹t
 !
NULL
 && br_Ω‹t->
gvÆue
 != NULL) {

1633 
aöfo
.
«t_p‹t
 = 
	`©oi
(
br_Ω‹t
->
gvÆue
);

1635 } i‡(
vü
->
p‹t
 !
NULL
) {

1636 
aöfo
.
«t_p‹t
 = 
	`©oi
(
vü
->
p‹t
);

1639 i‡(
	`osù_°rˇ£cmp
(
vü
->
¥Ÿocﬁ
, "DTLS") == 0 || osip_strcasecmp(via->protocol, "TLS") == 0)

1640 
aöfo
.
«t_p‹t
 = 5061;

1643 
aöfo
.
«t_p‹t
 = 5060;

1646 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO1
, 
NULL
, "[eXosip] SIPÖort modified fromÑport in SIPánswer\n"));

1648 i‡(
br_ª˚ived
 !
NULL
 && br_ª˚ived->
gvÆue
 != NULL) {

1649 
	`¢¥ötf
(
aöfo
.
«t_ù
, ◊öfo.«t_ù), "%s", 
br_ª˚ived
->
gvÆue
);

1652 
	`¢¥ötf
(
aöfo
.
«t_ù
, ◊öfo.«t_ù), "%s", 
vü
->
ho°
);

1655 i‡(
sù
->
‰om
 !
NULL
 && sù->‰om->
uæ
 !NULL && sù->‰om->uæ->
ho°
 != NULL) {

1656 
	`¢¥ötf
(
aöfo
.
¥oxy
, ◊öfo.¥oxy), "%s", 
sù
->
‰om
->
uæ
->
ho°
);

1658 i‡(
	`eXosù_£t_›ti⁄
(
exc⁄ãxt
, 
EXOSIP_OPT_ADD_ACCOUNT_INFO
, &
aöfo
Ë=
OSIP_SUCCESS
) {

1659 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO1
, 
NULL
, "[eXosù] wênowáµó∏a†[%s][%d] f‹ sîvî [%s]\n", 
aöfo
.
«t_ù
,áöfo.
«t_p‹t
,áöfo.
¥oxy
));

1666 
	}
}

1668 
	$_eXosù_h™dÀ_öcomög_mesßge
(
eXosù_t
 *
exc⁄ãxt
, *
buf
, 
size_t
 
Àngth
, 
sockë
, *
ho°
, 
p‹t
, *
ª˚ived_ho°
, *
Ω‹t_p‹t
) {

1669 
i
;

1670 
osù_evít_t
 *
£
;

1671 
tmp
;

1673 
£
 = (
osù_evít_t
 *Ë
	`osù_mÆloc
((osip_event_t));

1675 i‡(
£
 =
NULL
)

1676  
OSIP_NOMEM
;

1678 
£
->
ty≥
 = 
UNKNOWN_EVT
;

1679 
£
->
sù
 = 
NULL
;

1680 
£
->
å™ß˘i⁄id
 = 0;

1682 
tmp
 = 
buf
[
Àngth
];

1683 
buf
[
Àngth
] = 0;

1684 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO1
, 
NULL
, "[eXosù]Ñe˚ived mesßgê[Àn=%i] from [%s][%d]\n%s\n", 
Àngth
, 
ho°
, 
p‹t
, 
buf
));

1685 
buf
[
Àngth
] = 
tmp
;

1688 
i
 = 
	`osù_mesßge_öô
(&(
£
->
sù
));

1690 i‡(
i
 != 0) {

1691 
	`osù_‰ì
(
£
);

1692  
i
;

1695 
i
 = 
	`osù_mesßge_∑r£
(
£
->
sù
, 
buf
, 
Àngth
);

1697 i‡(
i
 != 0) {

1698 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_ERROR
, 
NULL
, "[eXosip] cannotÖarse message\n"));

1699 
	`osù_mesßge_‰ì
(
£
->
sù
);

1700 
	`osù_‰ì
(
£
);

1701  
i
;

1704 i‡(
£
->
sù
->
ˇŒ_id
 !
NULL
 && se->sù->ˇŒ_id->
numbî
 != NULL) {

1705 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO3
, 
NULL
, "[eXosù] CÆl-ID i†vÆid [%s]\n", 
£
->
sù
->
ˇŒ_id
->
numbî
));

1708 i‡(
exc⁄ãxt
->
cbsùCÆlback
 !
NULL
) {

1709 
exc⁄ãxt
->
	`cbsùCÆlback
(
£
->
sù
, 1);

1712 i‡(
	`MSG_IS_REQUEST
(
£
->
sù
)) {

1713 i‡(
£
->
sù
->
sù_mëhod
 =
NULL
 || se->sù->
ªq_uri
 == NULL) {

1714 
	`osù_mesßge_‰ì
(
£
->
sù
);

1715 
	`osù_‰ì
(
£
);

1716  
OSIP_SYNTAXERROR
;

1720 i‡(
	`MSG_IS_REQUEST
(
£
->
sù
)) {

1721 i‡(
	`MSG_IS_INVITE
(
£
->
sù
))

1722 
£
->
ty≥
 = 
RCV_REQINVITE
;

1724 i‡(
	`MSG_IS_ACK
(
£
->
sù
))

1725 
£
->
ty≥
 = 
RCV_REQACK
;

1728 
£
->
ty≥
 = 
RCV_REQUEST
;

1731 i‡(
£
->
sù
->
°©us_code
 < 100 || se->sip->status_code > 699) {

1732 
	`osù_mesßge_‰ì
(
£
->
sù
);

1733 
	`osù_‰ì
(
£
);

1734  
OSIP_SYNTAXERROR
;

1736 } i‡(
	`MSG_IS_STATUS_1XX
(
£
->
sù
))

1737 
£
->
ty≥
 = 
RCV_STATUS_1XX
;

1739 i‡(
	`MSG_IS_STATUS_2XX
(
£
->
sù
))

1740 
£
->
ty≥
 = 
RCV_STATUS_2XX
;

1743 
£
->
ty≥
 = 
RCV_STATUS_3456XX
;

1746 
	`osù_mesßge_fix_œ°_vü_hódî
(
£
->
sù
, 
ho°
, 
p‹t
);

1747 
	`_eXosù_h™dÀ_rfc5626_ob
(
exc⁄ãxt
, 
£
->
sù
, 
ho°
, 
p‹t
);

1749 i‡(
	`MSG_IS_RESPONSE
(
£
->
sù
)) {

1750 
	`_eXosù_h™dÀ_ª˚ived_Ω‹t
(
£
->
sù
, 
ª˚ived_ho°
, 
Ω‹t_p‹t
);

1751 
	`udp_é_À¨n_p‹t_‰om_vü
(
exc⁄ãxt
, 
£
->
sù
);

1754 
i
 = 
	`osù_föd_å™ß˘i⁄_™d_add_evít
(
exc⁄ãxt
->
j_osù
, 
£
);

1756 i‡(
i
 != 0) {

1758 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO1
, 
NULL
, "[eXosip]ÇoÅransaction for message\n"));

1761 i‡(
	`MSG_IS_REQUEST
(
£
->
sù
))

1762 
	`_eXosù_¥o˚ss_√wªque°
(
exc⁄ãxt
, 
£
, 
sockë
);

1764 i‡(
	`MSG_IS_RESPONSE
(
£
->
sù
))

1765 
	`_eXosù_¥o˚ss_ª•⁄£_out_of_å™ß˘i⁄
(
exc⁄ãxt
, 
£
);

1771  
OSIP_SUCCESS
;

1774  
OSIP_SUCCESS
;

1775 
	}
}

1777 
	$_wakñock_h™dÀ_öcomög
(
eXosù_t
 *
exc⁄ãxt
, 
îr
, 
my_î∫o
) {

1778 #i‡!
	`deföed
(
_WIN32_WCE
)

1781 i‡((
îr
 =-1Ë&& (
my_î∫o
 =
EINTR
 || my_î∫ÿ=
EAGAIN
)) {

1782 i‡(
exc⁄ãxt
->
cbsùWakeLock
 !
NULL
 &&Éxc⁄ãxt->
öcomög_wake_lock_°©e
 > 0) {

1783 
cou¡
 = 
	`osù_li°_size
(&
exc⁄ãxt
->
j_osù
->
osù_i°_å™ß˘i⁄s
);

1785 
cou¡
 +
	`osù_li°_size
(&
exc⁄ãxt
->
j_osù
->
osù_ni°_å™ß˘i⁄s
);

1787 i‡(
cou¡
 == 0) {

1788 
exc⁄ãxt
->
	`cbsùWakeLock
(0);

1789 
exc⁄ãxt
->
öcomög_wake_lock_°©e
 = 0;

1793  
OSIP_SUCCESS
;

1797  
OSIP_UNDEFINED_ERROR
;

1798 
	}
}

1802 
	$_eXosù_ªad_mesßge
(
eXosù_t
 *
exc⁄ãxt
, 
max_mesßge_nb
, 
£c_max
, 
u£c_max
) {

1803 
fd_£t
 
osù_fd£t
;

1804 
fd_£t
 
osù_wr£t
;

1805 
fd_£t
 
osù_ex˚±£t
;

1806 
timevÆ
 
tv
;

1808 
tv
.
tv_£c
 = 
£c_max
;

1809 
tv
.
tv_u£c
 = 
u£c_max
;

1811 
max_mesßge_nb
 !0 && 
exc⁄ãxt
->
j_°›_ua
 == 0) {

1812 
i
;

1813 
max
 = 0;

1815 #i‚de‡
OSIP_MONOTHREAD


1816 
wakeup_sockë
 = 
	`jpùe_gë_ªad_des¸
(
exc⁄ãxt
->
j_sockë˘l
);

1819 #ifde‡
HAVE_SYS_EPOLL_H


1821 i‡(
exc⁄ãxt
->
pﬁl_mëhod
 =
EXOSIP_USE_EPOLL_LT
) {

1822 
osù_fd_èbÀ
[
EXOSIP_MAX_SOCKETS
];

1823 
ˇªs_fd_èbÀ
[
EXOSIP_MAX_SOCKETS
];

1824 
nfds
;

1826 
	`mem£t
(
osù_fd_èbÀ
, -1, (osip_fd_table));

1827 
	`mem£t
(
ˇªs_fd_èbÀ
, -1, (cares_fd_table));

1828 
exc⁄ãxt
->
eXé_å™•‹t
.
	`é_£t_fd£t
”xc⁄ãxt, 
NULL
, NULL, NULL, &
max
, 
osù_fd_èbÀ
);

1830 
	`eXosù_lock
(
exc⁄ãxt
);

1831 
	`_eXosù_dnsutûs_addsock_ïﬁl
(
exc⁄ãxt
, 
ˇªs_fd_èbÀ
);

1832 
	`eXosù_u∆ock
(
exc⁄ãxt
);

1834 
nfds
 = 
	`ïﬁl_waô
(
exc⁄ãxt
->
ïfd
,Éxc⁄ãxt->
ï_¨øy
,Éxc⁄ãxt->
max_fd_no
, 
£c_max
 * 1000 + 
u£c_max
 / 1000);

1835 
n
;

1837 i‡(
	`_wakñock_h™dÀ_öcomög
(
exc⁄ãxt
, 
nfds
, 
î∫o
Ë=
OSIP_SUCCESS
)

1840 
	`osù_com≥nßãtime
();

1842 i‡(0 =
nfds
 || 
exc⁄ãxt
->
j_°›_ua
 != 0)

1843  
OSIP_SUCCESS
;

1845 i‡(-1 =
nfds
)

1848 #i‚de‡
OSIP_MONOTHREAD


1849 
n
 = 0;Ç < 
nfds
; ++n) {

1850 i‡((
exc⁄ãxt
->
ï_¨øy
[
n
].
evíts
 & 
EPOLLIN
Ë&&Éxc⁄ãxt->ï_¨øy[n].
d©a
.
fd
 =
wakeup_sockë
) {

1851 
buf2
[500];

1853 
	`jpùe_ªad
(
exc⁄ãxt
->
j_sockë˘l
, 
buf2
, 499);

1858 
	`eXosù_lock
(
exc⁄ãxt
);

1859 #ifde‡
ENABLE_MAIN_SOCKET


1862 
exc⁄ãxt
->
eXé_å™•‹t
.
	`é_ïﬁl_ªad_mesßge
”xc⁄ãxt, 
nfds
,Éxc⁄ãxt->
ï_¨øy
);

1864 
i
 = 0; 
osù_fd_èbÀ
[i] != -1; i++) {

1865 
n
 = 0;Ç < 
nfds
; ++n) {

1866 i‡(((
exc⁄ãxt
->
ï_¨øy
[
n
].
evíts
 & 
EPOLLIN
Ë|| (exc⁄ãxt->ï_¨øy[n].evít†& 
EPOLLOUT
)Ë&&Éxc⁄ãxt->ï_¨øy[n].
d©a
.
fd
 =
osù_fd_èbÀ
[
i
]) {

1867 i‡(
exc⁄ãxt
->
cbsùWakeLock
 !
NULL
 &&Éxc⁄ãxt->
öcomög_wake_lock_°©e
 == 0)

1868 
exc⁄ãxt
->
	`cbsùWakeLock
(++exc⁄ãxt->
öcomög_wake_lock_°©e
);

1870 
exc⁄ãxt
->
eXé_å™•‹t
.
	`é_ïﬁl_ªad_mesßge
”xc⁄ãxt, 
nfds
,Éxc⁄ãxt->
ï_¨øy
);

1878 
i
 = 
	`_eXosù_dnsutûs_checksock_ïﬁl
(
exc⁄ãxt
, 
nfds
);

1879 i‡(
i
 > 0) {

1880 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO3
, 
NULL
, "[eXosip] [socketÉvent]á DNSÑesult isÑeady\n"));

1883 
i
 = 
	`_eXosù_m¨k_Æl_å™ß˘i⁄_ªady_ïﬁl
(
exc⁄ãxt
, 
nfds
, 
osù_fd_èbÀ
);

1888 
	`_eXosù_dnsutûs_dñsock_ïﬁl
(
exc⁄ãxt
, 
ˇªs_fd_èbÀ
);

1890 
i
 = 0; i < 
EXOSIP_MAX_SOCKETS
; i++) {

1891 i‡(
osù_fd_èbÀ
[
i
] > 0) {

1892 
n
 = 0;Ç < 
nfds
; ++n) {

1893 i‡(
exc⁄ãxt
->
ï_¨øy
[
n
].
evíts
 & 
EPOLLIN
 &&Éxc⁄ãxt->ï_¨øy[n].
d©a
.
fd
 =
osù_fd_èbÀ
[
i
]) {

1894 
exc⁄ãxt
->
eXé_å™•‹t
.
	`é_check_c⁄√˘i⁄
”xc⁄ãxt, 
osù_fd_èbÀ
[
i
]);

1895 } i‡(
exc⁄ãxt
->
ï_¨øy
[
n
].
evíts
 & 
EPOLLOUT
 &&Éxc⁄ãxt->ï_¨øy[n].
d©a
.
fd
 =
osù_fd_èbÀ
[
i
]) {

1896 
exc⁄ãxt
->
eXé_å™•‹t
.
	`é_check_c⁄√˘i⁄
”xc⁄ãxt, 
osù_fd_èbÀ
[
i
]);

1901 
	`eXosù_u∆ock
(
exc⁄ãxt
);

1904 
	`osù_gëtimeofday
(&
exc⁄ãxt
->
cc_timî
, 
NULL
);

1905 
	`add_gëtimeofday
(&
exc⁄ãxt
->
cc_timî
, 5000);

1906 
	`osù_gëtimeofday
(&
exc⁄ãxt
->
ka_timî
, 
NULL
);

1907 
	`add_gëtimeofday
(&
exc⁄ãxt
->
ka_timî
,Éxc⁄ãxt->
ka_öãrvÆ
);

1912 i‡(
exc⁄ãxt
->
pﬁl_mëhod
 =
EXOSIP_USE_SELECT
) {

1913 
osù_fd_èbÀ
[
EXOSIP_MAX_SOCKETS
];

1914 
	`FD_ZERO
(&
osù_fd£t
);

1915 
	`FD_ZERO
(&
osù_wr£t
);

1916 
	`FD_ZERO
(&
osù_ex˚±£t
);

1917 
	`mem£t
(
osù_fd_èbÀ
, -1, (osip_fd_table));

1918 
exc⁄ãxt
->
eXé_å™•‹t
.
	`é_£t_fd£t
”xc⁄ãxt, &
osù_fd£t
, &
osù_wr£t
, &
osù_ex˚±£t
, &
max
, 
osù_fd_èbÀ
);

1919 #i‚de‡
OSIP_MONOTHREAD


1920 
	`eXFD_SET
(
wakeup_sockë
, &
osù_fd£t
);

1922 i‡(
wakeup_sockë
 > 
max
)

1923 
max
 = 
wakeup_sockë
;

1927 
	`eXosù_lock
(
exc⁄ãxt
);

1928 
i
 = 
	`_eXosù_dnsutûs_gësock
(
exc⁄ãxt
, &
osù_fd£t
, &
osù_wr£t
);

1929 
	`eXosù_u∆ock
(
exc⁄ãxt
);

1930 i‡(
i
 > 
max
)

1931 
max
 = 
i
;

1933 i‡((
£c_max
 =-1Ë|| (
u£c_max
 == -1))

1934 
i
 = 
	`£À˘
(
max
 + 1, &
osù_fd£t
, &
osù_wr£t
, &
osù_ex˚±£t
, 
NULL
);

1937 
i
 = 
	`£À˘
(
max
 + 1, &
osù_fd£t
, &
osù_wr£t
, &
osù_ex˚±£t
, &
tv
);

1939 i‡(
	`_wakñock_h™dÀ_öcomög
(
exc⁄ãxt
, 
i
, 
î∫o
Ë=
OSIP_SUCCESS
)

1942 
	`osù_com≥nßãtime
();

1944 #i‚de‡
OSIP_MONOTHREAD


1946 i‡((
i
 > 0Ë&& 
	`FD_ISSET
(
wakeup_sockë
, &
osù_fd£t
)) {

1947 
buf2
[500];

1949 
	`jpùe_ªad
(
exc⁄ãxt
->
j_sockë˘l
, 
buf2
, 499);

1950 
	`FD_CLR
(
wakeup_sockë
, &
osù_fd£t
);

1955 i‡(0 =
i
 || 
exc⁄ãxt
->
j_°›_ua
 != 0)

1956  
OSIP_SUCCESS
;

1958 i‡(-1 =
i
) {

1959 #i‡!
	`deföed
(
_WIN32_WCE
)

1964 
	`eXosù_lock
(
exc⁄ãxt
);

1965 
i
 = 0; 
osù_fd_èbÀ
[i] != -1; i++) {

1966 i‡(
	`FD_ISSET
(
osù_fd_èbÀ
[
i
], &
osù_fd£t
Ë|| FD_ISSET(osù_fd_èbÀ[i], &
osù_wr£t
Ë|| FD_ISSET(osù_fd_èbÀ[i], &
osù_ex˚±£t
)) {

1967 i‡(
exc⁄ãxt
->
cbsùWakeLock
 !
NULL
 &&Éxc⁄ãxt->
öcomög_wake_lock_°©e
 == 0)

1968 
exc⁄ãxt
->
	`cbsùWakeLock
(++exc⁄ãxt->
öcomög_wake_lock_°©e
);

1970 
exc⁄ãxt
->
eXé_å™•‹t
.
	`é_ªad_mesßge
”xc⁄ãxt, &
osù_fd£t
, &
osù_wr£t
, &
osù_ex˚±£t
);

1976 
i
 = 
	`_eXosù_dnsutûs_checksock
(
exc⁄ãxt
, &
osù_fd£t
, &
osù_wr£t
);

1977 i‡(
i
 > 0) {

1978 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO3
, 
NULL
, "[eXosip] [socketÉvent]á DNSÑesult isÑeady\n"));

1981 
i
 = 
	`_eXosù_m¨k_Æl_å™ß˘i⁄_ªady
(
exc⁄ãxt
, &
osù_fd£t
, &
osù_wr£t
, &
osù_ex˚±£t
, 
osù_fd_èbÀ
);

1986 
i
 = 0; i < 
EXOSIP_MAX_SOCKETS
; i++) {

1987 i‡(
osù_fd_èbÀ
[
i
] > 0) {

1988 i‡(
	`FD_ISSET
(
osù_fd_èbÀ
[
i
], &
osù_fd£t
))

1989 
exc⁄ãxt
->
eXé_å™•‹t
.
	`é_check_c⁄√˘i⁄
”xc⁄ãxt, 
osù_fd_èbÀ
[
i
]);

1990 i‡(
	`FD_ISSET
(
osù_fd_èbÀ
[
i
], &
osù_wr£t
))

1991 
exc⁄ãxt
->
eXé_å™•‹t
.
	`é_check_c⁄√˘i⁄
”xc⁄ãxt, 
osù_fd_èbÀ
[
i
]);

1992 i‡(
	`FD_ISSET
(
osù_fd_èbÀ
[
i
], &
osù_ex˚±£t
))

1993 
exc⁄ãxt
->
eXé_å™•‹t
.
	`é_check_c⁄√˘i⁄
”xc⁄ãxt, 
osù_fd_èbÀ
[
i
]);

1996 
	`eXosù_u∆ock
(
exc⁄ãxt
);

1999 
	`osù_gëtimeofday
(&
exc⁄ãxt
->
cc_timî
, 
NULL
);

2000 
	`add_gëtimeofday
(&
exc⁄ãxt
->
cc_timî
, 5000);

2001 
	`osù_gëtimeofday
(&
exc⁄ãxt
->
ka_timî
, 
NULL
);

2002 
	`add_gëtimeofday
(&
exc⁄ãxt
->
ka_timî
,Éxc⁄ãxt->
ka_öãrvÆ
);

2006 i‡(
exc⁄ãxt
->
cbsùWakeLock
 !
NULL
 &&Éxc⁄ãxt->
öcomög_wake_lock_°©e
 > 0) {

2007 
cou¡
 = 
	`osù_li°_size
(&
exc⁄ãxt
->
j_osù
->
osù_i°_å™ß˘i⁄s
);

2009 
cou¡
 +
	`osù_li°_size
(&
exc⁄ãxt
->
j_osù
->
osù_ni°_å™ß˘i⁄s
);

2011 i‡(
cou¡
 == 0) {

2012 
exc⁄ãxt
->
	`cbsùWakeLock
(0);

2013 
exc⁄ãxt
->
öcomög_wake_lock_°©e
 = 0;

2018 i‡(
tv
.
tv_£c
 =0 &&Åv.
tv_u£c
 =0 && (
£c_max
 !0 || 
u£c_max
 != 0)) {

2019  
OSIP_SUCCESS
;

2022 
max_mesßge_nb
--;

2025  
OSIP_SUCCESS
;

2026 
	}
}

2028 
	$_eXosù_≥ndögosù_å™ß˘i⁄_exi°
(
eXosù_t
 *
exc⁄ãxt
, 
eXosù_ˇŒ_t
 *
jc
, 
eXosù_dülog_t
 *
jd
) {

2029 
osù_å™ß˘i⁄_t
 *
å
;

2030 
time_t
 
now
 = 
	`osù_gësy°emtime
(
NULL
);

2032 
å
 = 
	`_eXosù_föd_œ°_öc_å™ß˘i⁄
(
jd
, "BYE");

2034 i‡(
å
 !
NULL
 &&År->
°©e
 !
NIST_TERMINATED
) {

2035 i‡(
å
->
búth_time
 + 180 < 
now
) {

2037 
	`osù_ªmove_å™ß˘i⁄
(
exc⁄ãxt
->
j_osù
, 
å
);

2038 
	`_eXosù_ªmove_å™ß˘i⁄_‰om_ˇŒ
(
å
, 
jc
);

2039 
	`osù_li°_add
(&
exc⁄ãxt
->
j_å™ß˘i⁄s
, 
å
, 0);

2042  
OSIP_SUCCESS
;

2045 
å
 = 
	`_eXosù_föd_œ°_out_å™ß˘i⁄
(
jc
, 
jd
, "BYE");

2047 i‡(
å
 !
NULL
 &&År->
°©e
 !
NICT_TERMINATED
) {

2048 i‡(
å
->
búth_time
 + 180 < 
now
) {

2050 
	`osù_ªmove_å™ß˘i⁄
(
exc⁄ãxt
->
j_osù
, 
å
);

2051 
	`_eXosù_ªmove_å™ß˘i⁄_‰om_ˇŒ
(
å
, 
jc
);

2052 
	`osù_li°_add
(&
exc⁄ãxt
->
j_å™ß˘i⁄s
, 
å
, 0);

2055  
OSIP_SUCCESS
;

2058 
å
 = 
	`_eXosù_föd_œ°_öc_övôe
(
jc
, 
jd
);

2060 i‡(
å
 !
NULL
 &&År->
°©e
 !
IST_TERMINATED
) {

2061 i‡(
å
->
búth_time
 + 180 < 
now
) {

2063  
OSIP_SUCCESS
;

2066 
å
 = 
	`_eXosù_föd_œ°_out_övôe
(
jc
, 
jd
);

2068 i‡(
å
 !
NULL
 &&År->
°©e
 !
ICT_TERMINATED
) {

2069 i‡(
jc
->
expúe_time
 < 
now
) {

2071  
OSIP_SUCCESS
;

2074 
å
 = 
	`_eXosù_föd_œ°_öc_å™ß˘i⁄
(
jd
, "REFER");

2076 i‡(
å
 !
NULL
 &&År->
°©e
 !
NIST_TERMINATED
) {

2077 i‡(
å
->
búth_time
 + 180 < 
now
) {

2079 
	`osù_ªmove_å™ß˘i⁄
(
exc⁄ãxt
->
j_osù
, 
å
);

2080 
	`_eXosù_ªmove_å™ß˘i⁄_‰om_ˇŒ
(
å
, 
jc
);

2081 
	`osù_li°_add
(&
exc⁄ãxt
->
j_å™ß˘i⁄s
, 
å
, 0);

2084  
OSIP_SUCCESS
;

2087 
å
 = 
	`_eXosù_föd_œ°_out_å™ß˘i⁄
(
jc
, 
jd
, "REFER");

2089 i‡(
å
 !
NULL
 &&År->
°©e
 !
NICT_TERMINATED
) {

2090 i‡(
å
->
búth_time
 + 180 < 
now
) {

2092 
	`osù_ªmove_å™ß˘i⁄
(
exc⁄ãxt
->
j_osù
, 
å
);

2093 
	`_eXosù_ªmove_å™ß˘i⁄_‰om_ˇŒ
(
å
, 
jc
);

2094 
	`osù_li°_add
(&
exc⁄ãxt
->
j_å™ß˘i⁄s
, 
å
, 0);

2097  
OSIP_SUCCESS
;

2100  
OSIP_UNDEFINED_ERROR
;

2101 
	}
}

2103 
	$_eXosù_≥ndög_subs¸ùti⁄_exi°
(
eXosù_dülog_t
 *
jd
) {

2104 
time_t
 
now
 = 
	`osù_gësy°emtime
(
NULL
);

2106 i‡(
now
 < 
jd
->
im∂icô_subs¸ùti⁄_expúe_time
) {

2108  
OSIP_SUCCESS
;

2111  
OSIP_UNDEFINED_ERROR
;

2112 
	}
}

2114 
	$_eXosù_ªÀa£_föished_å™ß˘i⁄s
(
eXosù_t
 *
exc⁄ãxt
, 
eXosù_ˇŒ_t
 *
jc
, 
eXosù_dülog_t
 *
jd
) {

2115 
osù_li°_ôî©‹_t
 
ô
;

2116 
time_t
 
now
 = 
	`osù_gësy°emtime
(
NULL
);

2117 
osù_å™ß˘i⁄_t
 *
öc_å
;

2118 
osù_å™ß˘i⁄_t
 *
out_å
;

2119 
osù_å™ß˘i⁄_t
 *
œ°_övôe
;

2120 
ªt
;

2122 
ªt
 = -1;

2124 
œ°_övôe
 = 
	`_eXosù_föd_œ°_öc_övôe
(
jc
, 
jd
);

2126 i‡(
jd
 !
NULL
) {

2128 
öc_å
 = (
osù_å™ß˘i⁄_t
 *Ë
	`osù_li°_gë_fú°
(
jd
->
d_öc_ås
, &
ô
);

2130 i‡(
öc_å
 !
NULL
)

2131 
öc_å
 = (
osù_å™ß˘i⁄_t
 *Ë
	`osù_li°_gë_√xt
(&
ô
);

2133 
öc_å
 !
OSIP_SUCCESS
) {

2134 i‡(0 =
	`osù_°rˇ£cmp
(
öc_å
->
c£q
->
mëhod
, "BYE")) {

2136 } i‡(0 !
	`osù_°rˇ£cmp
(
öc_å
->
c£q
->
mëhod
, "INVITE")) {

2138 i‡((
öc_å
->
°©e
 =
NIST_TERMINATED
Ë&& (öc_å->
búth_time
 + 30 < 
now
)) {

2140 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosù] [cid=%i][did=%i][tid=%i]Ññó£Ç⁄-INVITE sîvîÅønß˘i⁄\n", 
jc
->
c_id
, 
jd
->
d_id
, 
öc_å
->
å™ß˘i⁄id
));

2141 
	`osù_ªmove_å™ß˘i⁄
(
exc⁄ãxt
->
j_osù
, 
öc_å
);

2142 
	`osù_li°_ôî©‹_ªmove
(&
ô
);

2143 
	`osù_li°_add
(&
exc⁄ãxt
->
j_å™ß˘i⁄s
, 
öc_å
, 0);

2145 
ªt
 = 0;

2151 i‡(
œ°_övôe
 !
öc_å
 && (öc_å->
°©e
 =
IST_TERMINATED
Ë&& (öc_å->
búth_time
 + 30 < 
now
)) {

2153 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosù] [cid=%i][did=%i][tid=%i]Ññó£ INVITE sîvîÅønß˘i⁄\n", 
jc
->
c_id
, 
jd
->
d_id
, 
öc_å
->
å™ß˘i⁄id
));

2154 
	`osù_ªmove_å™ß˘i⁄
(
exc⁄ãxt
->
j_osù
, 
öc_å
);

2155 
	`osù_li°_ôî©‹_ªmove
(&
ô
);

2156 
	`osù_li°_add
(&
exc⁄ãxt
->
j_å™ß˘i⁄s
, 
öc_å
, 0);

2158 
ªt
 = 0;

2163 
öc_å
 = (
osù_å™ß˘i⁄_t
 *Ë
	`osù_li°_gë_√xt
(&
ô
);

2166 
œ°_övôe
 = 
	`_eXosù_föd_œ°_out_övôe
(
jc
, 
jd
);

2169 
out_å
 = (
osù_å™ß˘i⁄_t
 *Ë
	`osù_li°_gë_fú°
(
jd
->
d_out_ås
, &
ô
);

2171 i‡(
out_å
 !
NULL
)

2172 
out_å
 = (
osù_å™ß˘i⁄_t
 *Ë
	`osù_li°_gë_√xt
(&
ô
);

2174 
out_å
 !
OSIP_SUCCESS
) {

2175 i‡(0 =
	`osù_°rˇ£cmp
(
out_å
->
c£q
->
mëhod
, "BYE")) {

2177 } i‡(0 !
	`osù_°rˇ£cmp
(
out_å
->
c£q
->
mëhod
, "INVITE")) {

2179 i‡((
out_å
->
°©e
 =
NICT_TERMINATED
Ë&& (out_å->
búth_time
 + 30 < 
now
)) {

2181 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosù] [cid=%i][did=%i][tid=%i]Ññó£Ç⁄ INVITE clõ¡Åønß˘i⁄\n", 
jc
->
c_id
, 
jd
->
d_id
, 
out_å
->
å™ß˘i⁄id
));

2182 
	`osù_ªmove_å™ß˘i⁄
(
exc⁄ãxt
->
j_osù
, 
out_å
);

2183 
	`osù_li°_ôî©‹_ªmove
(&
ô
);

2184 
	`osù_li°_add
(&
exc⁄ãxt
->
j_å™ß˘i⁄s
, 
out_å
, 0);

2186 
ªt
 = 0;

2192 i‡(
œ°_övôe
 !
out_å
 && (out_å->
°©e
 =
ICT_TERMINATED
Ë&& (out_å->
búth_time
 + 30 < 
now
)) {

2194 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosù] [cid=%i][did=%i][tid=%i]Ññó£ INVITE clõ¡Åønß˘i⁄\n", 
jc
->
c_id
, 
jd
->
d_id
, 
out_å
->
å™ß˘i⁄id
));

2195 
	`osù_ªmove_å™ß˘i⁄
(
exc⁄ãxt
->
j_osù
, 
out_å
);

2196 
	`osù_li°_ôî©‹_ªmove
(&
ô
);

2197 
	`osù_li°_add
(&
exc⁄ãxt
->
j_å™ß˘i⁄s
, 
out_å
, 0);

2199 
ªt
 = 0;

2204 
out_å
 = (
osù_å™ß˘i⁄_t
 *Ë
	`osù_li°_gë_√xt
(&
ô
);

2208  
ªt
;

2209 
	}
}

2211 
	$_eXosù_ªÀa£_föished_ˇŒs
(
eXosù_t
 *
exc⁄ãxt
, 
eXosù_ˇŒ_t
 *
jc
, 
eXosù_dülog_t
 *
jd
) {

2212 
osù_å™ß˘i⁄_t
 *
å
;

2214 
å
 = 
	`_eXosù_föd_œ°_öc_å™ß˘i⁄
(
jd
, "BYE");

2216 i‡(
å
 =
NULL
)

2217 
å
 = 
	`_eXosù_föd_œ°_out_å™ß˘i⁄
(
jc
, 
jd
, "BYE");

2219 i‡(
å
 !
NULL
 && (å->
°©e
 =
NIST_TERMINATED
 ||År->°©ê=
NICT_TERMINATED
)) {

2220 
did
 = -2;

2222 i‡(
jd
 !
NULL
)

2223 
did
 = 
jd
->
d_id
;

2225 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosù] [cid=%i][did=%i]Ññó£ föished cÆl†[ªmovê®dülog]\n", 
jc
->
c_id
, 
did
));

2228 
	`_eXosù_ˇŒ_ªmove_dülog_ª„ªn˚_ö_ˇŒ
(
jc
, 
jd
);

2229 
	`REMOVE_ELEMENT
(
jc
->
c_dülogs
, 
jd
);

2230 
	`_eXosù_dülog_‰ì
(
exc⁄ãxt
, 
jd
);

2231  
OSIP_SUCCESS
;

2234  
OSIP_UNDEFINED_ERROR
;

2235 
	}
}

2237 
	$_eXosù_ªÀa£_ˇŒ
(
eXosù_t
 *
exc⁄ãxt
, 
eXosù_ˇŒ_t
 *
jc
, 
eXosù_dülog_t
 *
jd
) {

2238 
	`REMOVE_ELEMENT
(
exc⁄ãxt
->
j_ˇŒs
, 
jc
);

2239 
	`_eXosù_ªp‹t_ˇŒ_evít
(
exc⁄ãxt
, 
EXOSIP_CALL_RELEASED
, 
jc
, 
jd
, 
NULL
);

2240 
	`_eXosù_ˇŒ_‰ì
(
exc⁄ãxt
, 
jc
);

2241 
	`_eXosù_wakeup
(
exc⁄ãxt
);

2242 
	}
}

2244 
	$_eXosù_ªÀa£_ab‹ãd_ˇŒs
(
eXosù_t
 *
exc⁄ãxt
, 
eXosù_ˇŒ_t
 *
jc
, 
eXosù_dülog_t
 *
jd
) {

2245 
time_t
 
now
 = 
	`osù_gësy°emtime
(
NULL
);

2246 
osù_å™ß˘i⁄_t
 *
å
;

2249 
å
 = 
jc
->
c_öc_å
;

2251 i‡(
å
 =
NULL
)

2252 
å
 = 
jc
->
c_out_å
;

2254 i‡(
å
 =
NULL
) {

2255 i‡(
jd
 !
NULL
) {

2256 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosù] [cid=%i][did=%i]Ññó£áb‹ãd cÆl†[ªmovê™Ém±y dülog\n", 
jc
->
c_id
, 
jd
->
d_id
));

2257 
	`_eXosù_ˇŒ_ªmove_dülog_ª„ªn˚_ö_ˇŒ
(
jc
, 
jd
);

2258 
	`REMOVE_ELEMENT
(
jc
->
c_dülogs
, 
jd
);

2259 
	`_eXosù_dülog_‰ì
(
exc⁄ãxt
, 
jd
);

2260  
OSIP_SUCCESS
;

2263  
OSIP_UNDEFINED_ERROR
;

2266 i‡(
å
 !
NULL
 &&År->
°©e
 !
IST_TERMINATED
 &&År->°©ê!
ICT_TERMINATED
 &&År->
búth_time
 + 
EXOSIP_RING_TIMEOUT
 < 
now
) {

2267 i‡(
jd
 !
NULL
) {

2268 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosù] [cid=%i][did=%i]Ññó£áb‹ãd cÆl†[ªmovê®dülog f‹á¿unföishedÅønß˘i⁄]\n", 
jc
->
c_id
, 
jd
->
d_id
));

2269 
	`_eXosù_ˇŒ_ªmove_dülog_ª„ªn˚_ö_ˇŒ
(
jc
, 
jd
);

2270 
	`REMOVE_ELEMENT
(
jc
->
c_dülogs
, 
jd
);

2272 
	`_eXosù_ªp‹t_ˇŒ_evít
(
exc⁄ãxt
, 
EXOSIP_CALL_NOANSWER
, 
jc
, 
jd
, 
å
);

2273 
	`_eXosù_dülog_‰ì
(
exc⁄ãxt
, 
jd
);

2274 
	`_eXosù_wakeup
(
exc⁄ãxt
);

2275  
OSIP_SUCCESS
;

2279 i‡(
å
 !
NULL
 && (å->
°©e
 =
IST_TERMINATED
 ||År->°©ê=
ICT_TERMINATED
)) {

2280 i‡(
å
 =
jc
->
c_öc_å
) {

2281 i‡(
jc
->
c_öc_å
->
œ°_ª•⁄£
 =
NULL
) {

2283 } i‡(
jc
->
c_öc_å
->
œ°_ª•⁄£
->
°©us_code
 >= 300) {

2284 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosù] [cid=%i]Ññó£áb‹ãd cÆl†[™swî sít=%ò%s]\n", 
jc
->
c_id
, jc->
c_öc_å
->
œ°_ª•⁄£
->
°©us_code
, jc->c_öc_å->œ°_ª•⁄£->
ªas⁄_phø£
));

2285 
	`_eXosù_ªÀa£_ˇŒ
(
exc⁄ãxt
, 
jc
, 
jd
);

2286  
OSIP_SUCCESS
;

2289 } i‡(
å
 =
jc
->
c_out_å
) {

2290 i‡(
jc
->
c_out_å
->
œ°_ª•⁄£
 =
NULL
) {

2291 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosù] [cid=%i]Ññó£áb‹ãd cÆl†[™swîÑe˚ived=0 Timeout]\n", 
jc
->
c_id
));

2292 
	`_eXosù_ªÀa£_ˇŒ
(
exc⁄ãxt
, 
jc
, 
jd
);

2293  
OSIP_SUCCESS
;

2295 } i‡(
jc
->
c_out_å
->
œ°_ª•⁄£
->
°©us_code
 >300 && 
å
->
com∂ëed_time
 + 2 < 
now
) {

2297 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosù] [cid=%i]Ññó£áb‹ãd cÆl†[™swîÑe˚ived=%ò%s]\n", 
jc
->
c_id
, jc->
c_out_å
->
œ°_ª•⁄£
->
°©us_code
, jc->c_out_å->œ°_ª•⁄£->
ªas⁄_phø£
));

2298 
	`_eXosù_ªÀa£_ˇŒ
(
exc⁄ãxt
, 
jc
, 
jd
);

2299  
OSIP_SUCCESS
;

2301 } i‡(
jc
->
c_out_å
->
œ°_ª•⁄£
->
°©us_code
 >= 400) {

2302 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosù] [cid=%i]Ññó£áb‹ãd cÆl†[™swîÑe˚ived=%ò%s]\n", 
jc
->
c_id
, jc->
c_out_å
->
œ°_ª•⁄£
->
°©us_code
, jc->c_out_å->œ°_ª•⁄£->
ªas⁄_phø£
));

2303 
	`_eXosù_ªÀa£_ˇŒ
(
exc⁄ãxt
, 
jc
, 
jd
);

2304  
OSIP_SUCCESS
;

2309  
OSIP_UNDEFINED_ERROR
;

2310 
	}
}

2312 
	$_eXosù_ªÀa£_ãrmö©ed_ˇŒs
(
eXosù_t
 *
exc⁄ãxt
) {

2313 
osù_li°_ôî©‹_t
 
ô
;

2314 
osù_å™ß˘i⁄_t
 *
å
;

2315 
eXosù_dülog_t
 *
jd
;

2316 
eXosù_dülog_t
 *
jd√xt
;

2317 
eXosù_ˇŒ_t
 *
jc
;

2318 
eXosù_ˇŒ_t
 *
j˙ext
;

2319 
time_t
 
now
 = 
	`osù_gësy°emtime
(
NULL
);

2321 
jc
 = 
exc⁄ãxt
->
j_ˇŒs
; j¯!
NULL
;) {

2322 
j˙ext
 = 
jc
->
√xt
;

2325 
jd
 = 
jc
->
c_dülogs
; jd !
NULL
;) {

2326 
jd√xt
 = 
jd
->
√xt
;

2328 i‡(0 =
	`_eXosù_≥ndögosù_å™ß˘i⁄_exi°
(
exc⁄ãxt
, 
jc
, 
jd
)) {

2329 } i‡(0 =
	`_eXosù_ªÀa£_föished_å™ß˘i⁄s
(
exc⁄ãxt
, 
jc
, 
jd
)) {

2330 } i‡(0 =
	`_eXosù_≥ndög_subs¸ùti⁄_exi°
(
jd
)) {

2331 } i‡(0 =
	`_eXosù_ªÀa£_föished_ˇŒs
(
exc⁄ãxt
, 
jc
, 
jd
)) {

2332 
jd
 = 
jc
->
c_dülogs
;

2334 } i‡(0 =
	`_eXosù_ªÀa£_ab‹ãd_ˇŒs
(
exc⁄ãxt
, 
jc
, 
jd
)) {

2335 
jd√xt
 = 
NULL
;

2337 } i‡(
jd
->
d_id
 == -1) {

2338 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosù] [cid=%i][did=%i]Ññó£Åîmö©ed cÆl†[dñëê®ªmoved dülog]\n", 
jc
->
c_id
, 
jd
->
d_id
));

2340 
	`_eXosù_ˇŒ_ªmove_dülog_ª„ªn˚_ö_ˇŒ
(
jc
, 
jd
);

2341 
	`REMOVE_ELEMENT
(
jc
->
c_dülogs
, 
jd
);

2342 
	`_eXosù_dülog_‰ì
(
exc⁄ãxt
, 
jd
);

2344 
jd
 = 
jc
->
c_dülogs
;

2347 
jd
 = 
jd√xt
;

2350 
jc
 = 
j˙ext
;

2353 
jc
 = 
exc⁄ãxt
->
j_ˇŒs
; j¯!
NULL
;) {

2354 
j˙ext
 = 
jc
->
√xt
;

2356 i‡(
jc
->
c_dülogs
 =
NULL
) {

2357 i‡(
jc
->
c_öc_å
 !
NULL
 && jc->c_öc_å->
°©e
 !
IST_TERMINATED
 && jc->c_öc_å->
búth_time
 + 180 < 
now
) {

2358 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO1
, 
NULL
, "[eXosù] [cid=%i]Ññó£Åîmö©ed cÆl†[ªmovê™ incomög cÆl][nÿföÆánswî]\n", 
jc
->
c_id
));

2359 
	`_eXosù_ªÀa£_ˇŒ
(
exc⁄ãxt
, 
jc
, 
NULL
);

2361 } i‡(
jc
->
c_out_å
 !
NULL
 && jc->c_out_å->
°©e
 !
ICT_TERMINATED
 && jc->c_out_å->
búth_time
 + 180 < 
now
) {

2362 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO1
, 
NULL
, "[eXosù] [cid=%i]Ññó£Åîmö©ed cÆl†[ªmovê™ outgoög cÆl][nÿföÆánswî]\n", 
jc
->
c_id
));

2363 
	`_eXosù_ªÀa£_ˇŒ
(
exc⁄ãxt
, 
jc
, 
NULL
);

2365 } i‡(
jc
->
c_öc_å
 !
NULL
 && jc->c_öc_å->
°©e
 !
IST_TERMINATED
) {

2366 } i‡(
jc
->
c_out_å
 !
NULL
 && jc->c_out_å->
°©e
 !
ICT_TERMINATED
) {

2367 } i‡(
jc
->
c_out_å
 !
NULL
 && jc->c_out_å->
°©e
 =
ICT_TERMINATED
 && jc->c_out_å->
com∂ëed_time
 + 5 > 
now
) {

2376 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO1
, 
NULL
, "[eXosù] [cid=%i]Ññó£Åîmö©ed cÆl†[ªmovê®ˇŒ]\n", 
jc
->
c_id
));

2377 
	`_eXosù_ªÀa£_ˇŒ
(
exc⁄ãxt
, 
jc
, 
NULL
);

2381 
jc
 = 
j˙ext
;

2384 
å
 = (
osù_å™ß˘i⁄_t
 *Ë
	`osù_li°_gë_fú°
(&
exc⁄ãxt
->
j_å™ß˘i⁄s
, &
ô
);

2386 
å
 !
NULL
) {

2387 i‡(
å
->
°©e
 =
NICT_TERMINATED
 &&År->
œ°_ª•⁄£
 !
NULL
 &&År->
com∂ëed_time
 + 5 > 
now
) {

2389 } i‡(
å
->
°©e
 =
IST_TERMINATED
 ||År->°©ê=
ICT_TERMINATED
 ||År->°©ê=
NICT_TERMINATED
 ||År->°©ê=
NIST_TERMINATED
) {

2390 
	`_eXosù_å™ß˘i⁄_‰ì
(
exc⁄ãxt
, 
å
);

2391 
å
 = (
osù_å™ß˘i⁄_t
 *Ë
	`osù_li°_ôî©‹_ªmove
(&
ô
);

2394 } i‡(
å
->
búth_time
 + 180 < 
now
) {

2395 
	`_eXosù_å™ß˘i⁄_‰ì
(
exc⁄ãxt
, 
å
);

2396 
å
 = (
osù_å™ß˘i⁄_t
 *Ë
	`osù_li°_ôî©‹_ªmove
(&
ô
);

2400 
å
 = (
osù_å™ß˘i⁄_t
 *Ë
	`osù_li°_gë_√xt
(&
ô
);

2402 
	}
}

2404 
	$_eXosù_ªÀa£_ãrmö©ed_ªgi°øti⁄s
(
eXosù_t
 *
exc⁄ãxt
) {

2405 
eXosù_ªg_t
 *
jr
;

2406 
eXosù_ªg_t
 *
j∫ext
;

2407 
time_t
 
now
 = 
	`osù_gësy°emtime
(
NULL
);

2409 
jr
 = 
exc⁄ãxt
->
j_ªg
; j∏!
NULL
;) {

2410 
j∫ext
 = 
jr
->
√xt
;

2412 i‡(
jr
->
r_ªg_≥riod
 =0 && jr->
r_œ°_å
 !
NULL
) {

2413 i‡(
now
 - 
jr
->
r_œ°_å
->
búth_time
 > 75) {

2414 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO1
, 
NULL
, "[eXosù] [rid=%i]Ññó£áÅîmö©edÑegi°øti⁄\n", 
jr
->
r_id
));

2415 
	`REMOVE_ELEMENT
(
exc⁄ãxt
->
j_ªg
, 
jr
);

2416 
	`_eXosù_ªg_‰ì
(
exc⁄ãxt
, 
jr
);

2418 } i‡(
jr
->
r_œ°_å
->
œ°_ª•⁄£
 !
NULL
 && jr->r_œ°_å->œ°_ª•⁄£->
°©us_code
 >= 200 && jr->r_last_tr->last_response->status_code <= 299) {

2419 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO1
, 
NULL
, "[eXosù] [rid=%i]Ññó£áÅîmö©edÑegi°øti⁄ wôh 2xx\n", 
jr
->
r_id
));

2420 
	`REMOVE_ELEMENT
(
exc⁄ãxt
->
j_ªg
, 
jr
);

2421 
	`_eXosù_ªg_‰ì
(
exc⁄ãxt
, 
jr
);

2425 
jr
 = 
j∫ext
;

2429 
	}
}

2431 #i‚de‡
MINISIZE


2433 
	$_eXosù_ªÀa£_ãrmö©ed_publiˇti⁄s
(
eXosù_t
 *
exc⁄ãxt
) {

2434 
eXosù_pub_t
 *
jpub
;

2435 
eXosù_pub_t
 *
jpub√xt
;

2436 
time_t
 
now
 = 
	`osù_gësy°emtime
(
NULL
);

2438 
jpub
 = 
exc⁄ãxt
->
j_pub
; jpub !
NULL
;) {

2439 
jpub√xt
 = 
jpub
->
√xt
;

2441 i‡(
jpub
->
p_≥riod
 =0 && jpub->
p_œ°_å
 !
NULL
) {

2442 i‡(
now
 - 
jpub
->
p_œ°_å
->
búth_time
 > 75) {

2443 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO1
, 
NULL
, "[eXosù] [pid=%i]Ññó£áÅîmö©edÖubliˇti⁄\n", 
jpub
->
p_id
));

2444 
	`REMOVE_ELEMENT
(
exc⁄ãxt
->
j_pub
, 
jpub
);

2445 
	`_eXosù_pub_‰ì
(
exc⁄ãxt
, 
jpub
);

2447 } i‡(
jpub
->
p_œ°_å
->
œ°_ª•⁄£
 !
NULL
 && jpub->p_œ°_å->œ°_ª•⁄£->
°©us_code
 >= 200 && jpub->p_last_tr->last_response->status_code <= 299) {

2448 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO1
, 
NULL
, "[eXosù] [pid=%i]Ññó£áÅîmö©edÖubliˇti⁄ wôh 2xx\n", 
jpub
->
p_id
));

2449 
	`REMOVE_ELEMENT
(
exc⁄ãxt
->
j_pub
, 
jpub
);

2450 
	`_eXosù_pub_‰ì
(
exc⁄ãxt
, 
jpub
);

2454 
jpub
 = 
jpub√xt
;

2456 
	}
}

2458 
	$_eXosù_ªÀa£_föished_å™ß˘i⁄s_f‹_subs¸ùti⁄
(
eXosù_t
 *
exc⁄ãxt
, 
eXosù_dülog_t
 *
jd
) {

2459 
osù_li°_ôî©‹_t
 
ô
;

2460 
time_t
 
now
 = 
	`osù_gësy°emtime
(
NULL
);

2461 
osù_å™ß˘i⁄_t
 *
öc_å
;

2462 
osù_å™ß˘i⁄_t
 *
out_å
;

2463 
skù_fú°
 = 0;

2464 
ªt
;

2466 
ªt
 = 
OSIP_UNDEFINED_ERROR
;

2468 i‡(
jd
 !
NULL
) {

2470 
öc_å
 = (
osù_å™ß˘i⁄_t
 *Ë
	`osù_li°_gë_fú°
(
jd
->
d_öc_ås
, &
ô
);

2472 
öc_å
 !
OSIP_SUCCESS
) {

2474 i‡((
skù_fú°
 =1Ë&& (
öc_å
->
°©e
 =
NIST_TERMINATED
Ë&& (öc_å->
búth_time
 + 30 < 
now
)) {

2476 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosù] [did=%i][tid=%i] subs¸ùti⁄ [ªÀa£Ç⁄-INVITE sîvîÅønß˘i⁄]\n", 
jd
->
d_id
, 
öc_å
->
å™ß˘i⁄id
));

2477 
	`osù_ªmove_å™ß˘i⁄
(
exc⁄ãxt
->
j_osù
, 
öc_å
);

2478 
	`osù_li°_ôî©‹_ªmove
(&
ô
);

2479 
	`osù_li°_add
(&
exc⁄ãxt
->
j_å™ß˘i⁄s
, 
öc_å
, 0);

2481 
ªt
 = 
OSIP_SUCCESS
;

2485 i‡(0 =
	`osù_°rˇ£cmp
(
öc_å
->
c£q
->
mëhod
, "SUBSCRIBE"))

2486 
skù_fú°
 = 1;

2488 i‡(0 =
	`osù_°rˇ£cmp
(
öc_å
->
c£q
->
mëhod
, "REFER"))

2489 
skù_fú°
 = 1;

2491 i‡(0 =
	`osù_°rˇ£cmp
(
öc_å
->
c£q
->
mëhod
, "NOTIFY"))

2492 
skù_fú°
 = 1;

2494 
öc_å
 = (
osù_å™ß˘i⁄_t
 *Ë
	`osù_li°_gë_√xt
(&
ô
);

2497 
skù_fú°
 = 0;

2501 
out_å
 = (
osù_å™ß˘i⁄_t
 *Ë
	`osù_li°_gë_fú°
(
jd
->
d_out_ås
, &
ô
);

2503 
out_å
 !
OSIP_SUCCESS
) {

2505 i‡((
skù_fú°
 =1Ë&& (
out_å
->
°©e
 =
NICT_TERMINATED
Ë&& (out_å->
búth_time
 + 30 < 
now
)) {

2507 
	`OSIP_TRACE
(
	`osù_åa˚
(
__FILE__
, 
__LINE__
, 
OSIP_INFO2
, 
NULL
, "[eXosù] [did=%i][tid=%i] subs¸ùti⁄ [ªÀa£Ç⁄ INVITE clõ¡Åønß˘i⁄]\n", 
jd
->
d_id
, 
out_å
->
å™ß˘i⁄id
));

2508 
	`osù_ªmove_å™ß˘i⁄
(
exc⁄ãxt
->
j_osù
, 
out_å
);

2509 
	`osù_li°_ôî©‹_ªmove
(&
ô
);

2510 
	`osù_li°_add
(&
exc⁄ãxt
->
j_å™ß˘i⁄s
, 
out_å
, 0);

2512 
ªt
 = 
OSIP_SUCCESS
;

2516 i‡(0 =
	`osù_°rˇ£cmp
(
out_å
->
c£q
->
mëhod
, "SUBSCRIBE"))

2517 
skù_fú°
 = 1;

2519 i‡(0 =
	`osù_°rˇ£cmp
(
out_å
->
c£q
->
mëhod
, "REFER"))

2520 
skù_fú°
 = 1;

2522 i‡(0 =
	`osù_°rˇ£cmp
(
out_å
->
c£q
->
mëhod
, "NOTIFY"))

2523 
skù_fú°
 = 1;

2525 
out_å
 = (
osù_å™ß˘i⁄_t
 *Ë
	`osù_li°_gë_√xt
(&
ô
);

2529  
ªt
;

2530 
	}
}

2532 
	$_eXosù_ªÀa£_ãrmö©ed_subs¸ùti⁄s
(
eXosù_t
 *
exc⁄ãxt
) {

2533 
time_t
 
now
 = 
	`osù_gësy°emtime
(
NULL
);

2534 
eXosù_dülog_t
 *
jd
;

2535 
eXosù_dülog_t
 *
jd√xt
;

2536 
eXosù_subs¸ibe_t
 *
js
;

2537 
eXosù_subs¸ibe_t
 *
j¢ext
;

2539 
js
 = 
exc⁄ãxt
->
j_subs¸ibes
; j†!
NULL
;) {

2540 
j¢ext
 = 
js
->
√xt
;

2542 i‡(
js
->
s_dülogs
 =
NULL
) {

2543 i‡(
js
->
s_out_å
 !
NULL
 && js->s_out_å->
búth_time
 + 64 < 
now
) {

2545 
	`REMOVE_ELEMENT
(
exc⁄ãxt
->
j_subs¸ibes
, 
js
);

2546 
	`_eXosù_subs¸ùti⁄_‰ì
(
exc⁄ãxt
, 
js
);

2547 
	`_eXosù_wakeup
(
exc⁄ãxt
);

2553 
jd
 = 
js
->
s_dülogs
;

2555 i‡(
jd
 !
NULL
) {

2556 
osù_å™ß˘i⁄_t
 *
å™ß˘i⁄
 = 
	`_eXosù_föd_œ°_out_subs¸ibe
(
js
, 
jd
);

2558 i‡(
å™ß˘i⁄
 !
NULL
 &&Åønß˘i⁄->
‹ig_ªque°
 !NULL &&Åønß˘i⁄->
°©e
 =
NICT_TERMINATED
 &&Åønß˘i⁄->
búth_time
 + 15 < 
now
) {

2559 
osù_hódî_t
 *
expúes
;

2561 i‡(
	`MSG_IS_REFER
(
å™ß˘i⁄
->
‹ig_ªque°
)) {

2563 i‡(
now
 - 
å™ß˘i⁄
->
búth_time
 > 
js
->
s_ªg_≥riod
) {

2564 
osù_å™ß˘i⁄_t
 *
å™ß˘i⁄_nŸify
 = 
	`_eXosù_föd_œ°_öc_nŸify
(
jd
);

2566 i‡(
å™ß˘i⁄_nŸify
 =
NULL
 || (å™ß˘i⁄_nŸify->
°©e
 =
NIST_TERMINATED
 && 
now
 -Åønß˘i⁄_nŸify->
búth_time
 > 
js
->
s_ªg_≥riod
)) {

2568 
	`REMOVE_ELEMENT
(
exc⁄ãxt
->
j_subs¸ibes
, 
js
);

2569 
	`_eXosù_subs¸ùti⁄_‰ì
(
exc⁄ãxt
, 
js
);

2570 
	`_eXosù_wakeup
(
exc⁄ãxt
);

2576 
	`osù_mesßge_gë_expúes
(
å™ß˘i⁄
->
‹ig_ªque°
, 0, &
expúes
);

2578 i‡(
expúes
 =
NULL
 ||Éxpúes->
hvÆue
 == NULL) {

2579 } i‡(0 =
	`°rcmp
(
expúes
->
hvÆue
, "0")) {

2581 
	`REMOVE_ELEMENT
(
exc⁄ãxt
->
j_subs¸ibes
, 
js
);

2582 
	`_eXosù_subs¸ùti⁄_‰ì
(
exc⁄ãxt
, 
js
);

2583 
	`_eXosù_wakeup
(
exc⁄ãxt
);

2590 
jd
 = 
js
->
s_dülogs
; jd !
NULL
;) {

2591 
jd√xt
 = 
jd
->
√xt
;

2592 
	`_eXosù_ªÀa£_föished_å™ß˘i⁄s_f‹_subs¸ùti⁄
(
exc⁄ãxt
, 
jd
);

2594 i‡(
jd
->
d_dülog
 =
NULL
 || jd->d_dülog->
°©e
 =
DIALOG_EARLY
) {

2595 i‡(
js
->
s_out_å
 !
NULL
 && js->s_out_å->
búth_time
 + 64 < 
now
) {

2597 
	`REMOVE_ELEMENT
(
exc⁄ãxt
->
j_subs¸ibes
, 
js
);

2598 
	`_eXosù_subs¸ùti⁄_‰ì
(
exc⁄ãxt
, 
js
);

2599 
	`_eXosù_wakeup
(
exc⁄ãxt
);

2604 
jd
 = 
jd√xt
;

2608 
js
 = 
j¢ext
;

2610 
	}
}

2612 
	$_eXosù_ªÀa£_ãrmö©ed_ö_subs¸ùti⁄s
(
eXosù_t
 *
exc⁄ãxt
) {

2613 
time_t
 
now
 = 
	`osù_gësy°emtime
(
NULL
);

2614 
eXosù_dülog_t
 *
jd
;

2615 
eXosù_dülog_t
 *
jd√xt
;

2616 
eXosù_nŸify_t
 *
jn
;

2617 
eXosù_nŸify_t
 *
j¬ext
;

2619 
jn
 = 
exc⁄ãxt
->
j_nŸifõs
; j¿!
NULL
;) {

2620 
j¬ext
 = 
jn
->
√xt
;

2622 
jd
 = 
jn
->
n_dülogs
; jd !
NULL
;) {

2623 
osù_å™ß˘i⁄_t
 *
å™ß˘i⁄_nŸify
;

2625 
jd√xt
 = 
jd
->
√xt
;

2628 i‡(
jn
->
n_öc_å
->
°©e
 =
NIST_TERMINATED
) {

2629 i‡(
jn
->
n_öc_å
->
œ°_ª•⁄£
 =
NULL
) {

2630 
	`REMOVE_ELEMENT
(
exc⁄ãxt
->
j_nŸifõs
, 
jn
);

2631 
	`_eXosù_nŸify_‰ì
(
exc⁄ãxt
, 
jn
);

2634 } i‡(
jn
->
n_öc_å
->
œ°_ª•⁄£
->
°©us_code
 >= 300) {

2635 
	`REMOVE_ELEMENT
(
exc⁄ãxt
->
j_nŸifõs
, 
jn
);

2636 
	`_eXosù_nŸify_‰ì
(
exc⁄ãxt
, 
jn
);

2641 
	`_eXosù_ªÀa£_föished_å™ß˘i⁄s_f‹_subs¸ùti⁄
(
exc⁄ãxt
, 
jd
);

2643 
å™ß˘i⁄_nŸify
 = 
	`_eXosù_föd_œ°_out_nŸify
(
jd
);

2645 i‡(
å™ß˘i⁄_nŸify
 !
NULL
 &&Åønß˘i⁄_nŸify->
°©e
 =
NICT_TERMINATED
 && 
now
 > 
jn
->
n_ss_expúes
) {

2646 
	`REMOVE_ELEMENT
(
exc⁄ãxt
->
j_nŸifõs
, 
jn
);

2647 
	`_eXosù_nŸify_‰ì
(
exc⁄ãxt
, 
jn
);

2651 
jd
 = 
jd√xt
;

2654 
jn
 = 
j¬ext
;

2656 
	}
}

	@/home/unasaw/sip_project/libexosip2-5.3.0/tools/sip_monitor.c

11 #i‡!
deföed
(
WIN32
)

12 
	~<°dio.h
>

13 
	~<°dlib.h
>

14 
	~<uni°d.h
>

15 
	~<sys/ty≥s.h
>

16 
	~<sys/sockë.h
>

17 
	~<√töë/ö.h
>

18 
	~<√tdb.h
>

19 
	~<sy¶og.h
>

20 #i‚de‡
OSIP_MONOTHREAD


21 
	~<±hªad.h
>

23 
	~<°rög.h
>

24 #ifde‡
__löux


25 
	~<sig«l.h
>

29 
	~<sys/time.h
>

31 
	~<osù2/osù_mt.h
>

32 
	~<eXosù2/eXosù.h
>

33 
	~<osù2/osù.h
>

35 #i‡!
deföed
(
WIN32
)

36 
	#_GNU_SOURCE


	)

37 
	~<gë›t.h
>

40 
	#PROG_NAME
 "sù_m⁄ô‹"

	)

41 
	#SYSLOG_FACILITY
 
LOG_DAEMON


	)

43 
	sm⁄ô‹ed_log
 {

44 
	mlog_Àvñ
;

45 
	mcou¡
;

46 
	mlog
[1024];

49 vﬁ©ûê
	gkìpRu¬ög
 = 2;

50 
	gdebug
 = 0;

51 
osù_li°_t
 
	gm⁄ô‹ed_logs
;

52 
	gîr‹_ªas⁄
[1024] = {'\0'};

53 #ifde‡
__löux


55 
	$ötH™dÀr
(
dummy
) {

56 
kìpRu¬ög
 = 0;

57 
	}
}

60 #i‡
deföed
(
WIN32
)

61 
	$sy¶og_wøµî
(
a
, c⁄° *
fmt
, ...) {

62 
va_li°
 
¨gs
;

64 
	`va_°¨t
(
¨gs
, 
fmt
);

65 
	`vÂrötf
(
°dout
, 
fmt
, 
¨gs
);

66 
	`va_íd
(
¨gs
);

67 
	}
}

69 
	#LOG_INFO
 0

	)

70 
	#LOG_ERR
 0

	)

71 
	#LOG_WARNING
 0

	)

72 
	#LOG_DEBUG
 0

	)

74 #ñi‡
deföed
(
LOG_PERROR
)

76 
	#sy¶og_wøµî
 
sy¶og


	)

78 
	#sy¶og_wøµî
(
a
, 
b
...) \

79 
	`Ârötf
(
°dîr
, 
b
); \

80 
	`Ârötf
(
°dîr
, "\n")

	)

83 
ußge
();

85 
	$ußge
() {

86 
	`¥ötf
(
PROG_NAME


88 "\nUßge: " 
PROG_NAME


110 
	`eXosù_gë_vîsi⁄
());

111 
	}
}

113 
	sªg∑øm_t
 {

114 
	mªgid
;

115 
	mexpúy
;

116 
	mauth
;

117 } 
	tªg∑øm_t
;

119 
eXosù_t
 *
	gc⁄ãxt_eXosù
;

121 
	$add_log
(
Àvñ
, *
_log
) {

122 
osù_li°_ôî©‹_t
 
ô
;

123 
m⁄ô‹ed_log
 *
ml
;

125 
ml
 = (
m⁄ô‹ed_log
 *Ë
	`osù_li°_gë_fú°
(&
m⁄ô‹ed_logs
, &
ô
);

127 
ml
 !
OSIP_SUCCESS
) {

128 i‡(
ml
 !
NULL
 && 
	`°rcmp
(ml->
log
, 
_log
) == 0) {

129 
ml
->
cou¡
++;

133 
ml
 = (
m⁄ô‹ed_log
 *Ë
	`osù_li°_gë_√xt
(&
ô
);

136 
ml
 = (
m⁄ô‹ed_log
 *Ë
	`osù_mÆloc
((monitored_log));

137 
ml
->
log_Àvñ
 = 
Àvñ
;

138 
ml
->
cou¡
 = 1;

139 
	`¢¥ötf
(
ml
->
log
, (ml->log), "%s", 
_log
);

140 
	`osù_li°_add
(&
m⁄ô‹ed_logs
, 
ml
, -1);

141 
	}
}

143 
	$dump_logs
() {

144 !
	`osù_li°_eﬁ
(&
m⁄ô‹ed_logs
, 0)) {

145 
m⁄ô‹ed_log
 *
ml
 = (m⁄ô‹ed_log *Ë
	`osù_li°_gë
(&
m⁄ô‹ed_logs
, 0);

146 
	`sy¶og_wøµî
(
ml
->
log_Àvñ
, "[cou¡=%i] %s", ml->
cou¡
, ml->
log
);

147 
	`osù_li°_ªmove
(&
m⁄ô‹ed_logs
, 0);

148 
	`osù_‰ì
(
ml
);

150 
	}
}

152 #i‡
deföed
(
WIN32
Ë|| deföed(
__löux
)

153 
	#HAVE_LOCALTIME


	)

155 
	#MAX_LENGTH_TR
 2024

	)

157 
	$__osù_åa˚_func
(c⁄° *
fi
, 
li
, 
osù_åa˚_Àvñ_t
 
Àvñ
, c⁄° *
ch‰
, 
va_li°
 
¨gs
) {

158 
time_buf„r
[80] = {'\0'};

159 #i‡
	`deföed
(
HAVE_LOCALTIME
)

161 
time_t
 
time°amp
;

162 
timevÆ
 
now
;

163 
tm
 *
±m
;

164 #ifde‡
__USE_POSIX


165 
tm
 
loˇl_tm
;

167 
ã¡hs_ms
;

168 
	`osù_gëtimeofday
(&
now
, 
NULL
);

170 
time°amp
 = 
now
.
tv_£c
;

171 
ã¡hs_ms
 = 
now
.
tv_u£c
 / (100L);

172 #ifde‡
__USE_POSIX


173 
±m
 = 
	`loˇ…ime_r
(&
time°amp
, &
loˇl_tm
);

175 
±m
 = 
	`loˇ…ime
(&
time°amp
);

178 
	`¢¥ötf
(
time_buf„r
, 80, "%04d-%02d-%02d %02d:%02d:%02d.%04d", 1900 + 
±m
->
tm_yór
,Ötm->
tm_m⁄
 + 1,Ötm->
tm_mday
,Ötm->
tm_hour
,Ötm->
tm_mö
,Ötm->
tm_£c
, 
ã¡hs_ms
);

183 
buf„r
[
MAX_LENGTH_TR
];

184 
ö
 = 0;

186 
	`mem£t
(
buf„r
, 0, (buffer));

188 i‡(
Àvñ
 =
OSIP_FATAL
) {

189 
ö
 = 
	`¢¥ötf
(
buf„r
, 
MAX_LENGTH_TR
 - 1, "| FATAL | %†<%10.10s:%5i> ", 
time_buf„r
, 
fi
, 
li
);

191 } i‡(
Àvñ
 =
OSIP_BUG
) {

192 
ö
 = 
	`¢¥ötf
(
buf„r
, 
MAX_LENGTH_TR
 - 1, "| BUG | %†<%10.10s:%5i> ", 
time_buf„r
, 
fi
, 
li
);

194 } i‡(
Àvñ
 =
OSIP_ERROR
) {

195 
ö
 = 
	`¢¥ötf
(
buf„r
, 
MAX_LENGTH_TR
 - 1, "| ERROR | %†<%10.10s:%5i> ", 
time_buf„r
, 
fi
, 
li
);

197 } i‡(
Àvñ
 =
OSIP_WARNING
) {

198 
ö
 = 
	`¢¥ötf
(
buf„r
, 
MAX_LENGTH_TR
 - 1, "|WARNING| %†<%10.10s:%5i> ", 
time_buf„r
, 
fi
, 
li
);

200 } i‡(
Àvñ
 =
OSIP_INFO1
) {

201 
ö
 = 
	`¢¥ötf
(
buf„r
, 
MAX_LENGTH_TR
 - 1, "| INFO1 | %†<%10.10s:%5i> ", 
time_buf„r
, 
fi
, 
li
);

203 } i‡(
Àvñ
 =
OSIP_INFO2
) {

204 
ö
 = 
	`¢¥ötf
(
buf„r
, 
MAX_LENGTH_TR
 - 1, "| INFO2 | %†<%10.10s:%5i> ", 
time_buf„r
, 
fi
, 
li
);

206 } i‡(
Àvñ
 =
OSIP_INFO3
) {

207 
ö
 = 
	`¢¥ötf
(
buf„r
, 
MAX_LENGTH_TR
 - 1, "| INFO3 | %†<%10.10s:%5i> ", 
time_buf„r
, 
fi
, 
li
);

209 } i‡(
Àvñ
 =
OSIP_INFO4
) {

210 
ö
 = 
	`¢¥ötf
(
buf„r
, 
MAX_LENGTH_TR
 - 1, "| INFO4 | %†<%10.10s:%5i> ", 
time_buf„r
, 
fi
, 
li
);

213 
	`v¢¥ötf
(
buf„r
 + 
ö
, 
MAX_LENGTH_TR
 - 1 - in, 
ch‰
, 
¨gs
);

214 
buf„r
[
MAX_LENGTH_TR
 - 1] = '\0';

216 i‡(
debug
 > (Ë
Àvñ
) {

217 
	`¥ötf
("%s", 
buf„r
);

220 i‡(
	`°r°r
(
buf„r
, "[gëaddröfo] dns"Ë!
NULL
 && strstr(buffer, "failure") != NULL) {

221 *
tmp
 = 
	`°r°r
(
buf„r
, "[getaddrinfo");

222 
	`add_log
(
LOG_ERR
, 
tmp
);

224 i‡(
îr‹_ªas⁄
[0] == '\0') {

225 
	`¢¥ötf
(
îr‹_ªas⁄
, ”º‹_ªas⁄), "%s", 
tmp
);

228 } i‡(
	`°r°r
(
buf„r
, "sockë ["Ë!
NULL
 && strstr(buffer, "] connected")) {

229 *
tmp
 = 
	`°r°r
(
buf„r
, "socket [");

230 
	`add_log
(
LOG_ERR
, 
tmp
);

232 } i‡(
	`°r°r
(
buf„r
, "[s¶ c⁄√˘] [vîifiˇti⁄="Ë!
NULL
) {

233 *
tmp
 = 
	`°r°r
(
buf„r
, "[ssl connect] ");

234 
	`add_log
(
LOG_INFO
, 
tmp
);

236 i‡(
îr‹_ªas⁄
[0] == '\0') {

237 i‡(
	`°r°r
(
buf„r
, "[s¶ c⁄√˘] [vîifiˇti⁄=ENABLED] [FAILURE"Ë!
NULL
) {

238 
	`¢¥ötf
(
îr‹_ªas⁄
, ”º‹_ªas⁄), "%s", 
tmp
);

242 } i‡(
	`°r°r
(
buf„r
, "[TLS] invÆid dïth["Ë!
NULL
) {

243 *
tmp
 = 
	`°r°r
(
buf„r
, "[TLS] invalid depth[");

244 
	`add_log
(
LOG_ERR
, 
tmp
);

246 i‡(
îr‹_ªas⁄
[0] == '\0') {

247 
	`¢¥ötf
(
îr‹_ªas⁄
, ”º‹_ªas⁄), "%s", 
tmp
);

250 } i‡(
	`°r°r
(
buf„r
, "ˇ¬Ÿ c⁄√˘ sockë "Ë!
NULL
 && strstr(buffer, "terminated") != NULL) {

251 *
tmp
 = 
	`°r°r
(
buf„r
, "cannot connect socket ");

252 
	`add_log
(
LOG_ERR
, 
tmp
);

254 i‡(
îr‹_ªas⁄
[0] == '\0') {

255 
	`¢¥ötf
(
îr‹_ªas⁄
, ”º‹_ªas⁄), "%s", 
tmp
);

259 
	}
}

261 #ifde‡
TEST_NAPTR


263 
	$_«±r_lookup
(c⁄° *
sù_£rvî
, 
osù_«±r
 *
«±r_lookup
, 
kìp_ö_ˇche
) {

264 
osù_«±r_t
 *
«±r_ªc‹d
;

265 
«±r_ªc‹d
 = 
	`eXosù_dnsutûs_«±r
(
c⁄ãxt_eXosù
, 
sù_£rvî
, "sù", "t˝", 
kìp_ö_ˇche
);

267 i‡(
«±r_ªc‹d
 !
NULL
) {

270 
	`eXosù_dnsutûs_dns_¥o˚ss
(
«±r_ªc‹d
, 1);

272 i‡(
«±r_ªc‹d
->
«±r_°©e
 =
OSIP_NAPTR_STATE_NAPTRDONE
 ||Ç≠å_ªc‹d->«±r_°©ê=
OSIP_NAPTR_STATE_SRVINPROGRESS
) {

273 
	`eXosù_dnsutûs_dns_¥o˚ss
(
«±r_ªc‹d
, 1);

276 i‡(
«±r_ªc‹d
->
«±r_°©e
 =
OSIP_NAPTR_STATE_UNKNOWN
) {

279 
	`eXosù_dnsutûs_ªÀa£
(
«±r_ªc‹d
);

280  
OSIP_NOTFOUND
;

282 } i‡(
«±r_ªc‹d
->
«±r_°©e
 =
OSIP_NAPTR_STATE_INPROGRESS
) {

284 
	`osù_u¶ìp
(10000);

287 } i‡(
«±r_ªc‹d
->
«±r_°©e
 =
OSIP_NAPTR_STATE_NAPTRDONE
) {

289 
	`osù_u¶ìp
(1000);

292 } i‡(
«±r_ªc‹d
->
«±r_°©e
 =
OSIP_NAPTR_STATE_SRVINPROGRESS
) {

294 
	`osù_u¶ìp
(1000);

297 } i‡(
«±r_ªc‹d
->
«±r_°©e
 =
OSIP_NAPTR_STATE_SRVDONE
) {

299 i‡(
«±r_lookup
 !
NULL
) {

300 
	`mem˝y
(
«±r_lookup
, 
«±r_ªc‹d
, (
osù_«±r
));

303 
	`eXosù_dnsutûs_ªÀa£
(
«±r_ªc‹d
);

304  
OSIP_SUCCESS
;

306 } i‡(
«±r_ªc‹d
->
«±r_°©e
 =
OSIP_NAPTR_STATE_NOTSUPPORTED
) {

308 
	`eXosù_dnsutûs_ªÀa£
(
«±r_ªc‹d
);

309  
OSIP_NOTFOUND
;

311 } i‡(
«±r_ªc‹d
->
«±r_°©e
 =
OSIP_NAPTR_STATE_RETRYLATER
) {

313 
	`eXosù_dnsutûs_ªÀa£
(
«±r_ªc‹d
);

314  
OSIP_TIMEOUT
;

320 
	}
}

322 
	$_ªsﬁv_«±r
(c⁄° *
domaö
) {

323 
timevÆ
 
time_°¨t
;

324 
timevÆ
 
time_íd
;

325 
timevÆ
 
time_sub
;

327 
îr
;

328 
osù_«±r
 
«±r_lookup
;

330 
	`osù_gëtimeofday
(&
time_°¨t
, 
NULL
);

332 
	`mem£t
(&
«±r_lookup
, 0, (
osù_«±r
));

333 
îr
 = 
	`_«±r_lookup
(
domaö
, &
«±r_lookup
, 1);

335 i‡(
îr
 =
OSIP_SUCCESS
) {

336 i‡(
«±r_lookup
.
sùíum_ªc‹d
.
«me
[0] != '\0') {

338 
	`sy¶og_wøµî
(
LOG_INFO
, "ENUM: %†-> %s", 
domaö
, 
«±r_lookup
.
sùíum_ªc‹d
.
«me
);

341 
osù_§v_ªc‹d
 *
be°
 = 
NULL
;

343 i‡(
«±r_lookup
.
sùudp_ªc‹d
.
§víåy
[0].
p‹t
 > 0) {

344 
be°
 = &
«±r_lookup
.
sùudp_ªc‹d
;

346 } i‡(
«±r_lookup
.
sùt˝_ªc‹d
.
§víåy
[0].
p‹t
 > 0) {

347 
be°
 = &
«±r_lookup
.
sùt˝_ªc‹d
;

349 } i‡(
«±r_lookup
.
sùés_ªc‹d
.
§víåy
[0].
p‹t
 > 0) {

350 
be°
 = &
«±r_lookup
.
sùés_ªc‹d
;

353 i‡(
be°
 !
NULL
) {

354 i‡(
«±r_lookup
.
sùt˝_ªc‹d
.
§víåy
[0].
p‹t
 > 0) {

355 i‡(
«±r_lookup
.
sùt˝_ªc‹d
.
‹dî
 <
be°
->order) {

356 
be°
 = &
«±r_lookup
.
sùt˝_ªc‹d
;

360 i‡(
«±r_lookup
.
sùés_ªc‹d
.
§víåy
[0].
p‹t
 > 0) {

361 i‡(
«±r_lookup
.
sùés_ªc‹d
.
‹dî
 <
be°
->order) {

362 
be°
 = &
«±r_lookup
.
sùés_ªc‹d
;

366 
	`osù_gëtimeofday
(&
time_íd
, 
NULL
);

367 
	`osù_timîsub
(&
time_íd
, &
time_°¨t
, &
time_sub
);

368 
	`sy¶og_wøµî
(
LOG_INFO
, "NAPTR REPORT:[SUCCESS] [duøti⁄:%li,%03lis] be° sîvi˚ f‹ %†-> [%s] [%s:%i]", 
time_sub
.
tv_£c
,Åime_sub.
tv_u£c
 / 1000, 
«±r_lookup
.
domaö
, 
be°
->
¥Ÿocﬁ
, be°->
§víåy
[0].
§v
, be°->§víåy[0].
p‹t
);

374 
	`osù_gëtimeofday
(&
time_íd
, 
NULL
);

375 
	`osù_timîsub
(&
time_íd
, &
time_°¨t
, &
time_sub
);

376 
	`sy¶og_wøµî
(
LOG_ERR
, "NAPTR REPORT:[FAILURE] [duøti⁄:%li,%03lis]ÇÿNAPTR/nÿSRVÑec‹d f‹ %s", 
time_sub
.
tv_£c
,Åime_sub.
tv_u£c
 / 1000, 
domaö
);

378 
	}
}

382 
	$_am_›ti⁄_rouã_add_Ã
(c⁄° *
‹ig_rouã
, *
d°_rouã
, 
d°_rouã_size
) {

383 
osù_rouã_t
 *
rouã_hódî
 = 
NULL
;

384 *
√w_rouã
 = 
NULL
;

385 c⁄° *
tmp
;

386 c⁄° *
tmp2
;

387 
i
;

389 
	`mem£t
(
d°_rouã
, '\0', 
d°_rouã_size
);

390 i‡(
‹ig_rouã
 =
NULL
 || orig_route[0] == '\0')

393 
tmp
 = 
	`°r°r
(
‹ig_rouã
, "sip:");

394 
tmp2
 = 
	`°r°r
(
‹ig_rouã
, "sips:");

395 i‡(
tmp
 =
NULL
 && 
tmp2
 == NULL) {

396 
	`¢¥ötf
(
d°_rouã
, 
d°_rouã_size
, "<sù:%s;Ã>", 
‹ig_rouã
);

400 
i
 = 
	`osù_rouã_öô
(&
rouã_hódî
);

401 i‡(
i
 !0 || 
rouã_hódî
 =
NULL
)

402  
OSIP_NOMEM
;

403 
i
 = 
	`osù_rouã_∑r£
(
rouã_hódî
, 
‹ig_rouã
);

404 i‡(
i
 !0 || 
rouã_hódî
->
uæ
 =
NULL
 ||Ñouã_hódî->uæ->
ho°
 == NULL) {

405 
	`osù_rouã_‰ì
(
rouã_hódî
);

406 
	`¢¥ötf
(
d°_rouã
, 
d°_rouã_size
, "%s", 
‹ig_rouã
);

407  
i
;

410 
tmp
 = 
	`°r°r
(
‹ig_rouã
, ";lr");

411 i‡(
tmp
 =
NULL
)

412 
	`osù_uri_u∑øm_add
(
rouã_hódî
->
uæ
, 
	`osù_°rdup
("Ã"), 
NULL
);

414 
i
 = 
	`osù_rouã_to_°r
(
rouã_hódî
, &
√w_rouã
);

415 
	`osù_rouã_‰ì
(
rouã_hódî
);

416 i‡(
i
 !0 || 
√w_rouã
 =
NULL
) {

417  
i
;

419 
	`¢¥ötf
(
d°_rouã
, 
d°_rouã_size
, "%s", 
√w_rouã
);

420 
	`osù_‰ì
(
√w_rouã
);

422 
	}
}

424 
	$_¥ïíd_rouã
(
osù_mesßge_t
 *
sù
, c⁄° *
hvÆue
) {

425 
osù_rouã_t
 *
rouã
;

426 
i
;

427 
outbound_rouã
[256];

429 i‡(
hvÆue
 =
NULL
 || hvalue[0] == '\0')

430  
OSIP_SUCCESS
;

432 
	`mem£t
(
outbound_rouã
, '\0', (outbound_route));

433 
i
 = 
	`_am_›ti⁄_rouã_add_Ã
(
hvÆue
, 
outbound_rouã
, (outbound_route));

434 i‡(
i
 != 0)

435  
i
;

437 
i
 = 
	`osù_rouã_öô
(&
rouã
);

439 i‡(
i
 != 0)

440  
i
;

441 
i
 = 
	`osù_rouã_∑r£
(
rouã
, 
outbound_rouã
);

442 i‡(
i
 != 0) {

443 
	`osù_rouã_‰ì
(
rouã
);

444  
i
;

446 
sù
->
mesßge_¥›îty
 = 2;

447 
	`osù_li°_add
(&
sù
->
rouãs
, 
rouã
, 0);

448  
OSIP_SUCCESS
;

449 
	}
}

451 
	$maö
(
¨gc
, *
¨gv
[]) {

452 
exô_code
 = 1;

453 
c
;

454 
p‹t
 = 0;

455 *
c⁄è˘
 = 
NULL
;

456 *
‰omu£r
 = 
NULL
;

457 
automasquîade
 = 0;

458 *
¥oxy
 = 
NULL
;

459 *
outbound
 = 
NULL
;

460 
å™•‹t
[5];

462 
£rvít
 *
£rvi˚
;

463 *
u£∫ame
 = 
NULL
;

464 *
∑ssw‹d
 = 
NULL
;

465 
s¶roŸˇ∑th
[1024];

466 
ªg∑øm_t
 
ªg∑øm
 = {0, -1, 0};

467 
f‹k
 = 0;

468 
log_≥º‹
 = 0;

469 
îr
;

471 
¥og_«me
[32];

472 
›tvÆ
;

474 
timevÆ
 
time_°¨t
;

475 
timevÆ
 
time_íd
;

476 
timevÆ
 
time_sub
;

478 
	`¢¥ötf
(
¥og_«me
, ’rog_«me), "%†(%s)", 
PROG_NAME
, 
	`eXosù_gë_vîsi⁄
());

480 #ifde‡
SIGPIPE


481 
	`sig«l
(
SIGPIPE
, 
SIG_IGN
);

483 #ifde‡
__löux


484 
	`sig«l
(
SIGINT
, 
ötH™dÀr
);

487 
	`¢¥ötf
(
å™•‹t
, (transport), "%s", "UDP");

488 
	`¢¥ötf
(
s¶roŸˇ∑th
, (sslrootcapath), "%s", "/etc/ssl/certs/");

491 
	#sh‹t_›ti⁄s
 "du:r:U:P:o:S:t:p:c:e:mv:sh"

	)

492 #ifde‡
_GNU_SOURCE


493 
›ti⁄_ödex
 = 0;

495 
›ti⁄
 
l⁄g_›ti⁄s
[] = {{"dóm⁄", 
no_¨gumít
, 
NULL
, 'd'},

496 {"‰om", 
ªquúed_¨gumít
, 
NULL
, 'u'},

497 {"¥oxy", 
ªquúed_¨gumít
, 
NULL
, 'r'},

498 {"u£∫ame", 
ªquúed_¨gumít
, 
NULL
, 'U'},

499 {"∑ssw‹d", 
ªquúed_¨gumít
, 
NULL
, 'P'},

500 {"outbound", 
ªquúed_¨gumít
, 
NULL
, 'o'},

502 {"s¶roŸˇ∑th", 
ªquúed_¨gumít
, 
NULL
, 'S'},

503 {"å™•‹t", 
ªquúed_¨gumít
, 
NULL
, 't'},

504 {"p‹t", 
ªquúed_¨gumít
, 
NULL
, 'p'},

505 {"c⁄è˘", 
ªquúed_¨gumít
, 
NULL
, 'c'},

506 {"expúy", 
ªquúed_¨gumít
, 
NULL
, 'e'},

507 {"automasquîade", 
no_¨gumít
, 
NULL
, 'm'},

508 {"sy¶og™dc⁄sﬁe", 
no_¨gumít
, 
NULL
, 's'},

509 {"vîbo£", 
ªquúed_¨gumít
, 
NULL
, 'v'},

511 {"hñp", 
no_¨gumít
, 
NULL
, 'h'},

513 {
NULL
, 0, NULL, 0}};

515 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, 
sh‹t_›ti⁄s
, 
l⁄g_›ti⁄s
, &
›ti⁄_ödex
);

517 
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, 
sh‹t_›ti⁄s
);

520 i‡(
c
 == -1) {

524 
c
) {

526 
c⁄è˘
 = 
›èrg
;

530 
f‹k
 = 1;

534 
debug
 = 
	`©oi
(
›èrg
);

538 #ifde‡
LOG_PERROR


539 
log_≥º‹
 = 
LOG_PERROR
;

544 
ªg∑øm
.
expúy
 = 
	`©oi
(
›èrg
);

548 
automasquîade
 = 1;

552 
	`ußge
();

553 
	`exô
(0);

556 
£rvi˚
 = 
	`gë£rvby«me
(
›èrg
, "udp");

558 i‡(
£rvi˚
) {

559 
p‹t
 = 
	`¡ohs
(
£rvi˚
->
s_p‹t
);

562 
p‹t
 = 
	`©oi
(
›èrg
);

568 
	`¢¥ötf
(
å™•‹t
, —øn•‹t), "%s", 
›èrg
);

572 
¥oxy
 = 
›èrg
;

576 
‰omu£r
 = 
›èrg
;

580 
u£∫ame
 = 
›èrg
;

584 
∑ssw‹d
 = 
›èrg
;

588 
outbound
 = 
›èrg
;

592 
	`¢¥ötf
(
s¶roŸˇ∑th
, (s¶roŸˇ∑th), "%s", 
›èrg
);

600 #ifde‡
LOG_PERROR


601 
	`›ílog
(
PROG_NAME
, 
LOG_PID
 | 
log_≥º‹
, 
SYSLOG_FACILITY
);

604 
	`sy¶og_wøµî
(
LOG_INFO
, "%†u∞™dÑu¬ög [ã°ög o¿[%s] REGISTER [%s] From: [%s]%s%s%†%s%s%s", 
¥og_«me
, 
å™•‹t
, 
¥oxy
, 
‰omu£r
, (
u£∫ame
 && 
∑ssw‹d
) ? " Username: [" : "", (username &&Öassword) ? username : "",

605 (
u£∫ame
 && 
∑ssw‹d
Ë? ":*****]" : "", 
outbound
? "Route: [" : "", outbound? outbound : "", outbound ? "]" : "");

607 i‡(!
¥oxy
 || !
‰omu£r
 || 
	`°æí
(proxy) < 7 || strlen(fromuser) < 7) {

608 
	`sy¶og_wøµî
(
LOG_ERR
, "REGISTRATION REPORT:[FAILURE] [%s][duøti⁄:0,000s] missög o∏brokí m™d©‹yÖ¨amëî", 
å™•‹t
);

609 
	`ußge
();

610 
	`exô
(1);

613 i‡(
	`osù_°rˇ£cmp
(
å™•‹t
, "UDP") != 0 && osip_strcasecmp(transport, "TCP") != 0 && osip_strcasecmp(transport, "TLS") != 0 && osip_strcasecmp(transport, "DTLS") != 0) {

614 
	`sy¶og_wøµî
(
LOG_ERR
, "REGISTRATION REPORT:[FAILURE] [%s][duøti⁄:0,000s] wr⁄gÅøn•‹à∑ømëî", 
å™•‹t
);

615 
	`ußge
();

616 
	`exô
(1);

619 i‡(
f‹k
) {

620 
îr
 = 
	`d´m⁄
(1, 0);

621 i‡(
îr
 < 0) {

622 
	`sy¶og_wøµî
(
LOG_ERR
, "REGISTRATION REPORT:[FAILURE] [%s][duøti⁄:0,000s] d´m⁄ modêÁûed", 
å™•‹t
);

623 
	`exô
(1);

627 
	`osù_li°_öô
(&
m⁄ô‹ed_logs
);

628 
	`osù_åa˚_öôülize_func
(
TRACE_LEVEL6
, 
__osù_åa˚_func
);

630 
c⁄ãxt_eXosù
 = 
	`eXosù_mÆloc
();

631 
îr
 = 
	`eXosù_öô
(
c⁄ãxt_eXosù
);

633 i‡(
îr
) {

634 
	`sy¶og_wøµî
(
LOG_ERR
, "REGISTRATION REPORT:[FAILURE] [%s][duøti⁄:0,000s]ÉXosù_öô faûuª [%i]", 
å™•‹t
, 
îr
);

635 
	`dump_logs
();

636 
	`exô
(1);

639 
	`eXosù_£t_u£r_agít
(
c⁄ãxt_eXosù
, 
¥og_«me
);

641 i‡(
u£∫ame
 && 
∑ssw‹d
) {

642 
îr
 = 
	`eXosù_add_authítiˇti⁄_öfo
(
c⁄ãxt_eXosù
, 
u£∫ame
, u£∫ame, 
∑ssw‹d
, 
NULL
, NULL);

644 i‡(
îr
) {

645 
	`sy¶og_wøµî
(
LOG_ERR
, "REGISTRATION REPORT:[FAILURE] [%s][duøti⁄:0,000s] c™nŸádd cªdítü»[%i]", 
å™•‹t
, 
îr
);

646 
	`eXosù_quô
(
c⁄ãxt_eXosù
);

647 
	`osù_‰ì
(
c⁄ãxt_eXosù
);

648 
	`dump_logs
();

649 
	`exô
(1);

653 
›tvÆ
 = 1;

654 
	`eXosù_£t_›ti⁄
(
c⁄ãxt_eXosù
, 
EXOSIP_OPT_SET_TLS_VERIFY_CERTIFICATE
, &
›tvÆ
);

657 
eXosù_és_˘x_t
 
és_des¸ùti⁄
;

658 
	`mem£t
(&
és_des¸ùti⁄
, 0, (
eXosù_és_˘x_t
));

659 
	`¢¥ötf
(
és_des¸ùti⁄
.
roŸ_ˇ_˚π
, —ls_des¸ùti⁄.roŸ_ˇ_˚π), "%s", 
s¶roŸˇ∑th
);

660 
	`eXosù_£t_›ti⁄
(
c⁄ãxt_eXosù
, 
EXOSIP_OPT_SET_TLS_CERTIFICATES_INFO
, &
és_des¸ùti⁄
);

663 
›tvÆ
 = 
automasquîade
;

664 
	`eXosù_£t_›ti⁄
(
c⁄ãxt_eXosù
, 
EXOSIP_OPT_AUTO_MASQUERADE_CONTACT
, &
›tvÆ
);

666 i‡(
automasquîade
) {

667 
	`sy¶og_wøµî
(
LOG_INFO
, "automasqueradeÉnabled");

670 #ifde‡
TEST_NAPTR


671 i‡(
	`osù_°∫ˇ£cmp
(
¥oxy
, "sip:", 4) == 0) {

672 
	`_ªsﬁv_«±r
(
¥oxy
 + 4);

674 } i‡(
	`osù_°∫ˇ£cmp
(
¥oxy
, "sips:", 4) == 0) {

675 
	`_ªsﬁv_«±r
(
¥oxy
 + 4);

679 
	`osù_gëtimeofday
(&
time_°¨t
, 
NULL
);

681 
îr
 = -1;

683 i‡(
	`osù_°rˇ£cmp
(
å™•‹t
, "UDP") == 0) {

684 
îr
 = 
	`eXosù_li°í_addr
(
c⁄ãxt_eXosù
, 
IPPROTO_UDP
, 
NULL
, 
p‹t
, 
AF_INET
, 0);

686 } i‡(
	`osù_°rˇ£cmp
(
å™•‹t
, "TCP") == 0) {

687 
îr
 = 
	`eXosù_li°í_addr
(
c⁄ãxt_eXosù
, 
IPPROTO_TCP
, 
NULL
, 
p‹t
, 
AF_INET
, 0);

689 } i‡(
	`osù_°rˇ£cmp
(
å™•‹t
, "TLS") == 0) {

690 
îr
 = 
	`eXosù_li°í_addr
(
c⁄ãxt_eXosù
, 
IPPROTO_TCP
, 
NULL
, 
p‹t
, 
AF_INET
, 1);

692 } i‡(
	`osù_°rˇ£cmp
(
å™•‹t
, "DTLS") == 0) {

693 
îr
 = 
	`eXosù_li°í_addr
(
c⁄ãxt_eXosù
, 
IPPROTO_UDP
, 
NULL
, 
p‹t
, 
AF_INET
, 1);

696 i‡(
îr
) {

697 
	`sy¶og_wøµî
(
LOG_ERR
, "REGISTRATION REPORT:[FAILURE] [%s][duøti⁄:0,000s] c™nŸÖª∑ª sùÇëw‹kÜayî [%i]", 
å™•‹t
, 
îr
);

698 
	`eXosù_quô
(
c⁄ãxt_eXosù
);

699 
	`osù_‰ì
(
c⁄ãxt_eXosù
);

700 
	`dump_logs
();

701 
	`exô
(1);

705 
osù_mesßge_t
 *
ªg
 = 
NULL
;

707 i‡(
c⁄è˘
 !
NULL
 && 
ªg∑øm
.
expúy
 == -1) {

708 
ªg∑øm
.
expúy
 = 300;

711 
	`eXosù_lock
(
c⁄ãxt_eXosù
);

712 i‡(
c⁄è˘
 =
NULL
 && 
ªg∑øm
.
expúy
 == -1) {

713 
ªg∑øm
.
ªgid
 = 
	`eXosù_ªgi°î_buûd_öôül_ªgi°î
(
c⁄ãxt_eXosù
, 
‰omu£r
, 
¥oxy
, 
c⁄è˘
, 0, &
ªg
);

716 
ªg∑øm
.
ªgid
 = 
	`eXosù_ªgi°î_buûd_öôül_ªgi°î
(
c⁄ãxt_eXosù
, 
‰omu£r
, 
¥oxy
, 
c⁄è˘
,Ñeg∑øm.
expúy
, &
ªg
);

719 i‡(
ªg∑øm
.
ªgid
 < 1) {

720 
	`eXosù_u∆ock
(
c⁄ãxt_eXosù
);

721 
	`sy¶og_wøµî
(
LOG_ERR
, "REGISTRATION REPORT:[FAILURE] [%s][duøti⁄:0,000s] c™nŸÖª∑ª sù REGISTER [%i]", 
å™•‹t
, 
îr
);

722 
	`eXosù_quô
(
c⁄ãxt_eXosù
);

723 
	`osù_‰ì
(
c⁄ãxt_eXosù
);

724 
	`dump_logs
();

725 
	`exô
(1);

728 
	`_¥ïíd_rouã
(
ªg
, 
outbound
);

730 i‡(
c⁄è˘
 =
NULL
 && 
ªg∑øm
.
expúy
 == -1) {

731 
pos
 = 0;

733 !
	`osù_li°_eﬁ
(&
ªg
->
c⁄è˘s
, 
pos
)) {

734 
osù_c⁄è˘_t
 *
co
;

736 
co
 = (
osù_c⁄è˘_t
 *Ë
	`osù_li°_gë
(&
ªg
->
c⁄è˘s
, 
pos
);

737 
	`osù_li°_ªmove
(&
ªg
->
c⁄è˘s
, 
pos
);

738 
	`osù_c⁄è˘_‰ì
(
co
);

742 
îr
 = 
	`eXosù_ªgi°î_£nd_ªgi°î
(
c⁄ãxt_eXosù
, 
ªg∑øm
.
ªgid
, 
ªg
);

743 
	`eXosù_u∆ock
(
c⁄ãxt_eXosù
);

745 i‡(
îr
 != 0) {

746 
	`sy¶og_wøµî
(
LOG_ERR
, "REGISTRATION REPORT:[FAILURE] [%s][duøti⁄:0,000s] c™nŸ síd sù REGISTER [%i]", 
å™•‹t
, 
îr
);

747 
	`eXosù_quô
(
c⁄ãxt_eXosù
);

748 
	`osù_‰ì
(
c⁄ãxt_eXosù
);

749 
	`dump_logs
();

750 
	`exô
(1);

754 
exô_code
 = 1;

756 ; 
kìpRu¬ög
;) {

757 
eXosù_evít_t
 *
evít
;

759 i‡(!(
evít
 = 
	`eXosù_evít_waô
(
c⁄ãxt_eXosù
, 0, 1))) {

760 #ifde‡
OSIP_MONOTHREAD


761 
	`eXosù_execuã
(
c⁄ãxt_eXosù
);

763 
	`eXosù_lock
(
c⁄ãxt_eXosù
);

764 
	`eXosù_autom©ic_a˘i⁄
(
c⁄ãxt_eXosù
);

765 
	`eXosù_u∆ock
(
c⁄ãxt_eXosù
);

766 
	`osù_u¶ìp
(10000);

770 #ifde‡
OSIP_MONOTHREAD


771 
	`eXosù_execuã
(
c⁄ãxt_eXosù
);

774 
	`eXosù_lock
(
c⁄ãxt_eXosù
);

775 
	`eXosù_autom©ic_a˘i⁄
(
c⁄ãxt_eXosù
);

777 
evít
->
ty≥
) {

778 
EXOSIP_REGISTRATION_SUCCESS
:

779 
	`osù_gëtimeofday
(&
time_íd
, 
NULL
);

780 
	`osù_timîsub
(&
time_íd
, &
time_°¨t
, &
time_sub
);

782 
	`dump_logs
();

783 
	`sy¶og_wøµî
(
LOG_INFO
, "REGISTRATION REPORT:[SUCCESS] [%s][duøti⁄:%li,%03lis] REGISTER [%i][%s]", 
å™•‹t
, 
time_sub
.
tv_£c
,Åime_sub.
tv_u£c
 / 1000, 
evít
->
ª•⁄£
->
°©us_code
,Évít->ª•⁄£->
ªas⁄_phø£
);

784 
kìpRu¬ög
 = 0;

785 
exô_code
 = 0;

788 
EXOSIP_REGISTRATION_FAILURE
:

789 
	`osù_gëtimeofday
(&
time_íd
, 
NULL
);

790 
	`osù_timîsub
(&
time_íd
, &
time_°¨t
, &
time_sub
);

792 
	`dump_logs
();

794 i‡(
evít
->
ª•⁄£
 =
NULL
) {

795 
	`sy¶og_wøµî
(
LOG_INFO
, "REGISTRATION REPORT:[FAILURE] [%s][duøti⁄:%li,%03lis] REGISTER [408][ ]Éº=%s", 
å™•‹t
, 
time_sub
.
tv_£c
,Åime_sub.
tv_u£c
 / 1000, 
îr‹_ªas⁄
[0] == '\0' ? "noánswer" :Érror_reason);

796 
kìpRu¬ög
 = 0;

799 i‡(
evít
->
ª•⁄£
->
°©us_code
 == 401 ||Évent->response->status_code == 407) {

800 
osù_auth‹iz©i⁄_t
 *
auth
 = 
NULL
;

801 
îr
 = 
	`osù_mesßge_gë_auth‹iz©i⁄
(
evít
->
ªque°
, 0, &
auth
);

803 i‡(
îr
 < 0) {

804 
kìpRu¬ög
--;

806 i‡(
kìpRu¬ög
 == 0) {

807 
	`sy¶og_wøµî
(
LOG_INFO
, "REGISTRATION REPORT:[FAILURE] [%s][duøti⁄:%li,%03lis] REGISTER [%i][%s]ÉºÚÿ∑ssw‹d o∏unsuµ‹ãdálg‹ôhm", 
å™•‹t
, 
time_sub
.
tv_£c
,Åime_sub.
tv_u£c
 / 1000, 
evít
->
ª•⁄£
->
°©us_code
,

808 
evít
->
ª•⁄£
->
ªas⁄_phø£
);

811 
	`sy¶og_wøµî
(
LOG_INFO
, "[%s][duøti⁄:%li,%03lis] REGISTER [%i][%s]", 
å™•‹t
, 
time_sub
.
tv_£c
,Åime_sub.
tv_u£c
 / 1000, 
evít
->
ª•⁄£
->
°©us_code
,Évít->ª•⁄£->
ªas⁄_phø£
);

815 
	`sy¶og_wøµî
(
LOG_INFO
, "REGISTRATION REPORT:[FAILURE] [%s][duøti⁄:%li,%03lis] REGISTER [%i][%s] -Éº=badÖassw‹d", 
å™•‹t
, 
time_sub
.
tv_£c
,Åime_sub.
tv_u£c
 / 1000, 
evít
->
ª•⁄£
->
°©us_code
,Évít->ª•⁄£->
ªas⁄_phø£
);

816 
kìpRu¬ög
 = 0;

820 
	`sy¶og_wøµî
(
LOG_INFO
, "REGISTRATION REPORT:[FAILURE] [%s][duøti⁄:%li,%03lis] REGISTER [%i][%s]Éº=%s", 
å™•‹t
, 
time_sub
.
tv_£c
,Åime_sub.
tv_u£c
 / 1000, 
evít
->
ª•⁄£
->
°©us_code
,Évít->ª•⁄£->
ªas⁄_phø£
,

821 
evít
->
ª•⁄£
->
ªas⁄_phø£
);

822 
kìpRu¬ög
 = 0;

828 
EXOSIP_CALL_INVITE
: {

829 
osù_mesßge_t
 *
™swî
;

830 
i
;

832 
i
 = 
	`eXosù_ˇŒ_buûd_™swî
(
c⁄ãxt_eXosù
, 
evít
->
tid
, 405, &
™swî
);

834 i‡(
i
 != 0) {

835 
	`sy¶og_wøµî
(
LOG_ERR
, "failedÅoÑeject INVITE");

839 
	`osù_‰ì
(
™swî
->
ªas⁄_phø£
);

840 
™swî
->
ªas⁄_phø£
 = 
	`osù_°rdup
("No Support for Incoming Calls");

841 
i
 = 
	`eXosù_ˇŒ_£nd_™swî
(
c⁄ãxt_eXosù
, 
evít
->
tid
, 405, 
™swî
);

843 i‡(
i
 != 0) {

844 
	`sy¶og_wøµî
(
LOG_ERR
, "failedÅoÑeject INVITE");

848 
	`sy¶og_wøµî
(
LOG_INFO
, "INVITEÑejected with 405");

852 
EXOSIP_MESSAGE_NEW
: {

853 
osù_mesßge_t
 *
™swî
;

854 
i
;

856 
i
 = 
	`eXosù_mesßge_buûd_™swî
(
c⁄ãxt_eXosù
, 
evít
->
tid
, 405, &
™swî
);

858 i‡(
i
 != 0) {

859 
	`sy¶og_wøµî
(
LOG_ERR
, "ÁûedÅÿªje˘ %s", 
evít
->
ªque°
->
sù_mëhod
);

863 
i
 = 
	`eXosù_mesßge_£nd_™swî
(
c⁄ãxt_eXosù
, 
evít
->
tid
, 405, 
™swî
);

865 i‡(
i
 != 0) {

866 
	`sy¶og_wøµî
(
LOG_ERR
, "ÁûedÅÿªje˘ %s", 
evít
->
ªque°
->
sù_mëhod
);

870 
	`sy¶og_wøµî
(
LOG_INFO
, "%†ªje˘ed wôh 405", 
evít
->
ªque°
->
sù_mëhod
);

874 
EXOSIP_IN_SUBSCRIPTION_NEW
: {

875 
osù_mesßge_t
 *
™swî
;

876 
i
;

878 #i‚de‡
MINISIZE


879 
i
 = 
	`eXosù_ösubs¸ùti⁄_buûd_™swî
(
c⁄ãxt_eXosù
, 
evít
->
tid
, 405, &
™swî
);

881 i‡(
i
 != 0) {

882 
	`sy¶og_wøµî
(
LOG_ERR
, "ÁûedÅÿªje˘ %s", 
evít
->
ªque°
->
sù_mëhod
);

886 #i‚de‡
MINISIZE


887 
i
 = 
	`eXosù_ösubs¸ùti⁄_£nd_™swî
(
c⁄ãxt_eXosù
, 
evít
->
tid
, 405, 
™swî
);

889 i‡(
i
 != 0) {

890 
	`sy¶og_wøµî
(
LOG_ERR
, "ÁûedÅÿªje˘ %s", 
evít
->
ªque°
->
sù_mëhod
);

894 
	`sy¶og_wøµî
(
LOG_INFO
, "%†ªje˘ed wôh 405", 
evít
->
ªque°
->
sù_mëhod
);

898 
EXOSIP_CALL_CLOSED
:

899 
EXOSIP_CALL_RELEASED
:

903 
	`sy¶og_wøµî
(
LOG_DEBUG
, "ª˚ived unknow¿eXosùÉvíà—y≥, did, cidË(%d, %d, %d)", 
evít
->
ty≥
,Évít->
did
,Évít->
cid
);

906 
	`eXosù_u∆ock
(
c⁄ãxt_eXosù
);

907 
	`eXosù_evít_‰ì
(
evít
);

910 
	`eXosù_quô
(
c⁄ãxt_eXosù
);

911 
	`osù_‰ì
(
c⁄ãxt_eXosù
);

912 
	`dump_logs
();

913  
exô_code
;

914 
	}
}

	@/home/unasaw/sip_project/libexosip2-5.3.0/tools/sip_reg.c

28 #i‡!
deföed
(
WIN32
Ë&& !deföed(
_WIN32_WCE
)

29 
	~<°dio.h
>

30 
	~<°dlib.h
>

31 
	~<uni°d.h
>

32 
	~<sys/ty≥s.h
>

33 
	~<sys/sockë.h
>

34 
	~<√töë/ö.h
>

35 
	~<√tdb.h
>

36 
	~<sy¶og.h
>

37 #i‚de‡
OSIP_MONOTHREAD


38 
	~<±hªad.h
>

40 
	~<°rög.h
>

41 #ifde‡
__löux


42 
	~<sig«l.h
>

46 
	~<osù2/osù_mt.h
>

47 
	~<eXosù2/eXosù.h
>

49 #i‡!
deföed
(
WIN32
)

50 
	#_GNU_SOURCE


	)

51 
	~<gë›t.h
>

54 
	#PROG_NAME
 "sù_ªg"

	)

55 
	#SYSLOG_FACILITY
 
LOG_DAEMON


	)

57 vﬁ©ûê
	gkìpRu¬ög
 = 1;

59 #ifde‡
__löux


61 
	$ötH™dÀr
(
dummy
) {

62 
kìpRu¬ög
 = 0;

63 
	}
}

66 #i‡
deföed
(
WIN32
)

67 
	$sy¶og_wøµî
(
a
, c⁄° *
fmt
, ...) {

68 
va_li°
 
¨gs
;

70 
	`va_°¨t
(
¨gs
, 
fmt
);

71 
	`vÂrötf
(
°dout
, 
fmt
, 
¨gs
);

72 
	`va_íd
(
¨gs
);

73 
	}
}

75 
	#LOG_INFO
 0

	)

76 
	#LOG_ERR
 0

	)

77 
	#LOG_WARNING
 0

	)

78 
	#LOG_DEBUG
 0

	)

80 #ñi‡
deföed
(
LOG_PERROR
)

82 
	#sy¶og_wøµî
 
sy¶og


	)

84 
	#sy¶og_wøµî
(
a
, 
b
...) \

85 
	`Ârötf
(
°dîr
, 
b
); \

86 
	`Ârötf
(
°dîr
, "\n")

	)

89 
ußge
();

91 
	$ußge
() {

92 
	`¥ötf
(
PROG_NAME


94 "\nUßge: " 
PROG_NAME


113 
	`eXosù_gë_vîsi⁄
());

114 
	}
}

116 
	sªg∑øm_t
 {

117 
	mªgid
;

118 
	mexpúy
;

119 
	mauth
;

120 } 
	tªg∑øm_t
;

122 
eXosù_t
 *
	gc⁄ãxt_eXosù
;

124 
	$maö
(
¨gc
, *
¨gv
[]) {

125 
c
;

126 
p‹t
 = 5060;

127 *
c⁄è˘
 = 
NULL
;

128 *
‰omu£r
 = 
NULL
;

129 
automasquîade
 = 0;

130 c⁄° *
fúewÆlù
 = 
NULL
;

131 *
¥oxy
 = 
NULL
;

132 
å™•‹t
[5];

134 
£rvít
 *
£rvi˚
;

135 *
u£∫ame
 = 
NULL
;

136 *
∑ssw‹d
 = 
NULL
;

137 
ªg∑øm_t
 
ªg∑øm
 = {0, 3600, 0};

138 
debug
 = 0;

139 
nof‹k
 = 0;

140 
îr
;

142 
¥og_«me
[32];

143 
›tvÆ
;

145 
	`¢¥ötf
(
¥og_«me
, ’rog_«me), "%†(%s)", 
PROG_NAME
, 
	`eXosù_gë_vîsi⁄
());

147 #ifde‡
SIGPIPE


148 
	`sig«l
(
SIGPIPE
, 
SIG_IGN
);

150 #ifde‡
__löux


151 
	`sig«l
(
SIGINT
, 
ötH™dÀr
);

154 
	`¢¥ötf
(
å™•‹t
, (transport), "%s", "UDP");

157 
	#sh‹t_›ti⁄s
 "du:r:U:P:t:p:c:e:mf:h"

	)

158 #ifde‡
_GNU_SOURCE


159 
›ti⁄_ödex
 = 0;

161 
›ti⁄
 
l⁄g_›ti⁄s
[] = {{"debug", 
no_¨gumít
, 
NULL
, 'd'},

162 {"‰om", 
ªquúed_¨gumít
, 
NULL
, 'u'},

163 {"¥oxy", 
ªquúed_¨gumít
, 
NULL
, 'r'},

164 {"u£∫ame", 
ªquúed_¨gumít
, 
NULL
, 'U'},

165 {"∑ssw‹d", 
ªquúed_¨gumít
, 
NULL
, 'P'},

167 {"å™•‹t", 
ªquúed_¨gumít
, 
NULL
, 't'},

168 {"p‹t", 
ªquúed_¨gumít
, 
NULL
, 'p'},

169 {"c⁄è˘", 
ªquúed_¨gumít
, 
NULL
, 'c'},

170 {"expúy", 
ªquúed_¨gumít
, 
NULL
, 'e'},

171 {"automasquîade", 
no_¨gumít
, 
NULL
, 'm'},

172 {"fúewÆlù", 
ªquúed_¨gumít
, 
NULL
, 'f'},

174 {"hñp", 
no_¨gumít
, 
NULL
, 'h'},

176 {
NULL
, 0, NULL, 0}};

178 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, 
sh‹t_›ti⁄s
, 
l⁄g_›ti⁄s
, &
›ti⁄_ödex
);

180 
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, 
sh‹t_›ti⁄s
);

183 i‡(
c
 == -1)

186 
c
) {

188 
c⁄è˘
 = 
›èrg
;

192 
nof‹k
 = 1;

193 #ifde‡
LOG_PERROR


194 
debug
 = 
LOG_PERROR
;

199 
ªg∑øm
.
expúy
 = 
	`©oi
(
›èrg
);

203 
automasquîade
 = 1;

207 
fúewÆlù
 = 
›èrg
;

211 
	`ußge
();

212 
	`exô
(0);

215 
£rvi˚
 = 
	`gë£rvby«me
(
›èrg
, "udp");

217 i‡(
£rvi˚
)

218 
p‹t
 = 
	`¡ohs
(
£rvi˚
->
s_p‹t
);

221 
p‹t
 = 
	`©oi
(
›èrg
);

226 
	`¢¥ötf
(
å™•‹t
, —øn•‹t), "%s", 
›èrg
);

230 
¥oxy
 = 
›èrg
;

234 
‰omu£r
 = 
›èrg
;

238 
u£∫ame
 = 
›èrg
;

242 
∑ssw‹d
 = 
›èrg
;

250 i‡(!
¥oxy
 || !
‰omu£r
) {

251 
	`ußge
();

252 
	`exô
(1);

255 i‡(!
nof‹k
) {

256 
îr
 = 
	`d´m⁄
(1, 0);

257 i‡(
îr
 < 0) {

258 
	`exô
(1);

262 #ifde‡
LOG_PERROR


263 
	`›ílog
(
PROG_NAME
, 
LOG_PID
 | 
debug
, 
SYSLOG_FACILITY
);

266 
	`sy¶og_wøµî
(
LOG_INFO
, "%†u∞™dÑu¬ög [ã°ög o¿[%s] REGISTER [%s] Expúe†[%d] From: [%s]%s%s%s]", 
¥og_«me
, 
å™•‹t
, 
¥oxy
, 
ªg∑øm
.
expúy
, 
‰omu£r
, (
u£∫ame
 && 
∑ssw‹d
) ? " Username: [" : "",

267 (
u£∫ame
 && 
∑ssw‹d
) ? username : "", (username &&Öassword) ? ":*****]" : "");

269 i‡(
c⁄è˘
 !
NULL
)

270 
	`sy¶og_wøµî
(
LOG_INFO
, "c⁄è˘: %s", 
c⁄è˘
);

272 
	`sy¶og_wøµî
(
LOG_INFO
, "loˇ»p‹t: %d", 
p‹t
);

274 i‡(
	`osù_°rˇ£cmp
(
å™•‹t
, "UDP") != 0 && osip_strcasecmp(transport, "TCP") != 0 && osip_strcasecmp(transport, "TLS") != 0 && osip_strcasecmp(transport, "DTLS") != 0) {

275 
	`sy¶og_wøµî
(
LOG_ERR
, "wrongÅransportÖarameter");

276 
	`ußge
();

277 
	`exô
(1);

280 i‡(
debug
 > 0)

281 
	`TRACE_INITIALIZE
(6, 
NULL
);

283 
c⁄ãxt_eXosù
 = 
	`eXosù_mÆloc
();

285 i‡(
	`eXosù_öô
(
c⁄ãxt_eXosù
)) {

286 
	`sy¶og_wøµî
(
LOG_ERR
, "eXosip_init failed");

287 
	`exô
(1);

290 
îr
 = -1;

292 i‡(
	`osù_°rˇ£cmp
(
å™•‹t
, "UDP") == 0) {

293 
îr
 = 
	`eXosù_li°í_addr
(
c⁄ãxt_eXosù
, 
IPPROTO_UDP
, 
NULL
, 
p‹t
, 
AF_INET
, 0);

295 } i‡(
	`osù_°rˇ£cmp
(
å™•‹t
, "TCP") == 0) {

296 
îr
 = 
	`eXosù_li°í_addr
(
c⁄ãxt_eXosù
, 
IPPROTO_TCP
, 
NULL
, 
p‹t
, 
AF_INET
, 0);

298 } i‡(
	`osù_°rˇ£cmp
(
å™•‹t
, "TLS") == 0) {

299 
îr
 = 
	`eXosù_li°í_addr
(
c⁄ãxt_eXosù
, 
IPPROTO_TCP
, 
NULL
, 
p‹t
, 
AF_INET
, 1);

301 } i‡(
	`osù_°rˇ£cmp
(
å™•‹t
, "DTLS") == 0) {

302 
îr
 = 
	`eXosù_li°í_addr
(
c⁄ãxt_eXosù
, 
IPPROTO_UDP
, 
NULL
, 
p‹t
, 
AF_INET
, 1);

305 i‡(
îr
) {

306 
	`sy¶og_wøµî
(
LOG_ERR
, "eXosip_listen_addr failed");

307 
	`eXosù_quô
(
c⁄ãxt_eXosù
);

308 
	`osù_‰ì
(
c⁄ãxt_eXosù
);

309 
	`exô
(1);

312 i‡(
fúewÆlù
) {

313 
	`sy¶og_wøµî
(
LOG_INFO
, "fúewÆ»addªss: %s:%i", 
fúewÆlù
, 
p‹t
);

314 
	`eXosù_masquîade_c⁄è˘
(
c⁄ãxt_eXosù
, 
fúewÆlù
, 
p‹t
);

317 
›tvÆ
 = 
automasquîade
;

318 
	`eXosù_£t_›ti⁄
(
c⁄ãxt_eXosù
, 
EXOSIP_OPT_AUTO_MASQUERADE_CONTACT
, &
›tvÆ
);

320 i‡(
automasquîade
) {

321 
	`sy¶og_wøµî
(
LOG_INFO
, "automasqueradeÉnabled");

324 
	`eXosù_£t_u£r_agít
(
c⁄ãxt_eXosù
, 
¥og_«me
);

326 i‡(
u£∫ame
 && 
∑ssw‹d
) {

327 i‡(
	`eXosù_add_authítiˇti⁄_öfo
(
c⁄ãxt_eXosù
, 
u£∫ame
, u£∫ame, 
∑ssw‹d
, 
NULL
, NULL)) {

328 
	`sy¶og_wøµî
(
LOG_ERR
, "eXosip_add_authentication_info failed");

329 
	`eXosù_quô
(
c⁄ãxt_eXosù
);

330 
	`osù_‰ì
(
c⁄ãxt_eXosù
);

331 
	`exô
(1);

336 
osù_mesßge_t
 *
ªg
 = 
NULL
;

337 
i
;

339 
	`eXosù_lock
(
c⁄ãxt_eXosù
);

340 
ªg∑øm
.
ªgid
 = 
	`eXosù_ªgi°î_buûd_öôül_ªgi°î
(
c⁄ãxt_eXosù
, 
‰omu£r
, 
¥oxy
, 
c⁄è˘
,Ñeg∑øm.
expúy
 * 2, &
ªg
);

342 i‡(
ªg∑øm
.
ªgid
 < 1) {

343 
	`eXosù_u∆ock
(
c⁄ãxt_eXosù
);

344 
	`sy¶og_wøµî
(
LOG_ERR
, "eXosip_register_build_initial_register failed");

345 
	`eXosù_quô
(
c⁄ãxt_eXosù
);

346 
	`osù_‰ì
(
c⁄ãxt_eXosù
);

347 
	`exô
(1);

350 
i
 = 
	`eXosù_ªgi°î_£nd_ªgi°î
(
c⁄ãxt_eXosù
, 
ªg∑øm
.
ªgid
, 
ªg
);

351 
	`eXosù_u∆ock
(
c⁄ãxt_eXosù
);

353 i‡(
i
 != 0) {

354 
	`sy¶og_wøµî
(
LOG_ERR
, "eXosip_register_send_register failed");

355 
	`eXosù_quô
(
c⁄ãxt_eXosù
);

356 
	`osù_‰ì
(
c⁄ãxt_eXosù
);

357 
	`exô
(1);

361 ; 
kìpRu¬ög
;) {

362 
cou¡î
 = 0;

363 
eXosù_evít_t
 *
evít
;

365 
cou¡î
++;

367 i‡(
cou¡î
 % 60000 == 0) {

368 #i‚de‡
MINISIZE


369 
eXosù_°©s
 
°©s
;

371 
	`mem£t
(&
°©s
, 0, (
eXosù_°©s
));

372 
	`eXosù_lock
(
c⁄ãxt_eXosù
);

373 
	`eXosù_£t_›ti⁄
(
c⁄ãxt_eXosù
, 
EXOSIP_OPT_GET_STATISTICS
, &
°©s
);

374 
	`eXosù_u∆ock
(
c⁄ãxt_eXosù
);

375 
	`sy¶og_wøµî
(
LOG_INFO
, "eXosù sèts: inmem‹y=—r:%i//ªg:%iËavîage=—r:%f//ªg:%f)", 
°©s
.
Æloˇãd_å™ß˘i⁄s
, sèts.
Æloˇãd_ªgi°øti⁄s
, sèts.
avîage_å™ß˘i⁄s
, sèts.
avîage_ªgi°øti⁄s
);

379 i‡(!(
evít
 = 
	`eXosù_evít_waô
(
c⁄ãxt_eXosù
, 0, 1))) {

380 #ifde‡
OSIP_MONOTHREAD


381 
	`eXosù_execuã
(
c⁄ãxt_eXosù
);

383 
	`eXosù_lock
(
c⁄ãxt_eXosù
);

384 
	`eXosù_autom©ic_a˘i⁄
(
c⁄ãxt_eXosù
);

385 
	`eXosù_u∆ock
(
c⁄ãxt_eXosù
);

386 
	`osù_u¶ìp
(10000);

390 #ifde‡
OSIP_MONOTHREAD


391 
	`eXosù_execuã
(
c⁄ãxt_eXosù
);

394 
	`eXosù_lock
(
c⁄ãxt_eXosù
);

395 
	`eXosù_autom©ic_a˘i⁄
(
c⁄ãxt_eXosù
);

397 
evít
->
ty≥
) {

398 
EXOSIP_REGISTRATION_SUCCESS
:

399 
	`sy¶og_wøµî
(
LOG_INFO
, "registrered successfully");

402 
EXOSIP_REGISTRATION_FAILURE
:

405 
EXOSIP_CALL_INVITE
: {

406 
osù_mesßge_t
 *
™swî
;

407 
i
;

409 
i
 = 
	`eXosù_ˇŒ_buûd_™swî
(
c⁄ãxt_eXosù
, 
evít
->
tid
, 405, &
™swî
);

411 i‡(
i
 != 0) {

412 
	`sy¶og_wøµî
(
LOG_ERR
, "failedÅoÑeject INVITE");

416 
	`osù_‰ì
(
™swî
->
ªas⁄_phø£
);

417 
™swî
->
ªas⁄_phø£
 = 
	`osù_°rdup
("No Support for Incoming Calls");

418 
i
 = 
	`eXosù_ˇŒ_£nd_™swî
(
c⁄ãxt_eXosù
, 
evít
->
tid
, 405, 
™swî
);

420 i‡(
i
 != 0) {

421 
	`sy¶og_wøµî
(
LOG_ERR
, "failedÅoÑeject INVITE");

425 
	`sy¶og_wøµî
(
LOG_INFO
, "INVITEÑejected with 405");

429 
EXOSIP_MESSAGE_NEW
: {

430 
osù_mesßge_t
 *
™swî
;

431 
i
;

433 
i
 = 
	`eXosù_mesßge_buûd_™swî
(
c⁄ãxt_eXosù
, 
evít
->
tid
, 405, &
™swî
);

435 i‡(
i
 != 0) {

436 
	`sy¶og_wøµî
(
LOG_ERR
, "ÁûedÅÿªje˘ %s", 
evít
->
ªque°
->
sù_mëhod
);

440 
i
 = 
	`eXosù_mesßge_£nd_™swî
(
c⁄ãxt_eXosù
, 
evít
->
tid
, 405, 
™swî
);

442 i‡(
i
 != 0) {

443 
	`sy¶og_wøµî
(
LOG_ERR
, "ÁûedÅÿªje˘ %s", 
evít
->
ªque°
->
sù_mëhod
);

447 
	`sy¶og_wøµî
(
LOG_INFO
, "%†ªje˘ed wôh 405", 
evít
->
ªque°
->
sù_mëhod
);

450 #i‚de‡
MINISIZE


451 
EXOSIP_IN_SUBSCRIPTION_NEW
: {

452 
osù_mesßge_t
 *
™swî
;

453 
i
;

455 
i
 = 
	`eXosù_ösubs¸ùti⁄_buûd_™swî
(
c⁄ãxt_eXosù
, 
evít
->
tid
, 405, &
™swî
);

457 i‡(
i
 != 0) {

458 
	`sy¶og_wøµî
(
LOG_ERR
, "ÁûedÅÿªje˘ %s", 
evít
->
ªque°
->
sù_mëhod
);

462 
i
 = 
	`eXosù_ösubs¸ùti⁄_£nd_™swî
(
c⁄ãxt_eXosù
, 
evít
->
tid
, 405, 
™swî
);

464 i‡(
i
 != 0) {

465 
	`sy¶og_wøµî
(
LOG_ERR
, "ÁûedÅÿªje˘ %s", 
evít
->
ªque°
->
sù_mëhod
);

469 
	`sy¶og_wøµî
(
LOG_INFO
, "%†ªje˘ed wôh 405", 
evít
->
ªque°
->
sù_mëhod
);

473 
EXOSIP_CALL_CLOSED
:

474 
EXOSIP_CALL_RELEASED
:

478 
	`sy¶og_wøµî
(
LOG_DEBUG
, "ª˚ived unknow¿eXosùÉvíà—y≥, did, cidË(%d, %d, %d)", 
evít
->
ty≥
,Évít->
did
,Évít->
cid
);

481 
	`eXosù_u∆ock
(
c⁄ãxt_eXosù
);

482 
	`eXosù_evít_‰ì
(
evít
);

485 
	`eXosù_quô
(
c⁄ãxt_eXosù
);

486 
	`osù_‰ì
(
c⁄ãxt_eXosù
);

488 
	}
}

	@/home/unasaw/sip_project/libexosip2-5.3.0/tools/sip_storm.c

11 #i‡!
deföed
(
WIN32
)

12 
	~<°dio.h
>

13 
	~<°dlib.h
>

14 
	~<uni°d.h
>

15 
	~<sys/ty≥s.h
>

16 
	~<sys/sockë.h
>

17 
	~<√töë/ö.h
>

18 
	~<√tdb.h
>

19 
	~<sy¶og.h
>

20 #i‚de‡
OSIP_MONOTHREAD


21 
	~<±hªad.h
>

23 
	~<°rög.h
>

24 #ifde‡
__löux


25 
	~<sig«l.h
>

29 
	~<sys/time.h
>

31 
	~<osù2/osù_mt.h
>

32 
	~<eXosù2/eXosù.h
>

33 
	~<osù2/osù.h
>

35 #i‡!
deföed
(
WIN32
)

36 
	#_GNU_SOURCE


	)

37 
	~<gë›t.h
>

40 
	#PROG_NAME
 "sù_°‹m"

	)

41 
	#SYSLOG_FACILITY
 
LOG_DAEMON


	)

43 vﬁ©ûê
	gkìpRu¬ög
 = 2;

44 
	gdebug
 = 0;

45 
	gå™•‹t
[5];

47 #ifde‡
__löux


49 
	$ötH™dÀr
(
dummy
) {

50 
kìpRu¬ög
 = 0;

51 
	}
}

54 #i‡
deföed
(
WIN32
)

55 
	$sy¶og_wøµî
(
a
, c⁄° *
fmt
, ...) {

56 
va_li°
 
¨gs
;

58 
	`va_°¨t
(
¨gs
, 
fmt
);

59 
	`vÂrötf
(
°dout
, 
fmt
, 
¨gs
);

60 
	`va_íd
(
¨gs
);

61 
	}
}

63 
	#LOG_INFO
 0

	)

64 
	#LOG_ERR
 0

	)

65 
	#LOG_WARNING
 0

	)

66 
	#LOG_DEBUG
 0

	)

68 #ñi‡
deföed
(
LOG_PERROR
)

70 
	#sy¶og_wøµî
 
sy¶og


	)

72 
	#sy¶og_wøµî
(
a
, 
b
...) \

73 
	`Ârötf
(
°dîr
, 
b
); \

74 
	`Ârötf
(
°dîr
, "\n")

	)

77 
ußge
();

79 
	$ußge
() {

80 
	`¥ötf
(
PROG_NAME


82 "\nUßge: " 
PROG_NAME


107 
	`eXosù_gë_vîsi⁄
());

108 
	}
}

110 
	sªg_∑øm
 {

111 
	mªgid
;

112 
	mexpúy
;

113 
	mauth
;

116 
	#MAX_SIP_CONFIG
 10

	)

118 
	ssù_c⁄fig_ua
 {

119 *
	m‰omu£r
;

120 *
	mtou£r
;

121 *
	m¥oxy
;

122 *
	moutbound
;

123 *
	mu£∫ame
;

124 *
	m∑ssw‹d
;

125 
ªg_∑øm
 
	mªg∑øm
;

128 
eXosù_t
 *
	gc⁄ãxt_eXosù
;

130 #i‡
deföed
(
WIN32
Ë|| deföed(
__löux
)

131 
	#HAVE_LOCALTIME


	)

133 
	#MAX_LENGTH_TR
 2024

	)

135 
	$__osù_åa˚_func
(c⁄° *
fi
, 
li
, 
osù_åa˚_Àvñ_t
 
Àvñ
, c⁄° *
ch‰
, 
va_li°
 
¨gs
) {

136 
time_buf„r
[80] = {'\0'};

137 #i‡
	`deföed
(
HAVE_LOCALTIME
)

139 
time_t
 
time°amp
;

140 
timevÆ
 
now
;

141 
tm
 *
±m
;

142 #ifde‡
__USE_POSIX


143 
tm
 
loˇl_tm
;

145 
ã¡hs_ms
;

146 
	`osù_gëtimeofday
(&
now
, 
NULL
);

148 
time°amp
 = 
now
.
tv_£c
;

149 
ã¡hs_ms
 = 
now
.
tv_u£c
 / (100L);

150 #ifde‡
__USE_POSIX


151 
±m
 = 
	`loˇ…ime_r
(&
time°amp
, &
loˇl_tm
);

153 
±m
 = 
	`loˇ…ime
(&
time°amp
);

156 
	`¢¥ötf
(
time_buf„r
, 80, "%04d-%02d-%02d %02d:%02d:%02d.%04d", 1900 + 
±m
->
tm_yór
,Ötm->
tm_m⁄
 + 1,Ötm->
tm_mday
,Ötm->
tm_hour
,Ötm->
tm_mö
,Ötm->
tm_£c
, 
ã¡hs_ms
);

161 
buf„r
[
MAX_LENGTH_TR
];

162 
ö
 = 0;

164 
	`mem£t
(
buf„r
, 0, (buffer));

166 i‡(
Àvñ
 =
OSIP_FATAL
) {

167 
ö
 = 
	`¢¥ötf
(
buf„r
, 
MAX_LENGTH_TR
 - 1, "| FATAL | %†<%10.10s:%5i> ", 
time_buf„r
, 
fi
, 
li
);

169 } i‡(
Àvñ
 =
OSIP_BUG
) {

170 
ö
 = 
	`¢¥ötf
(
buf„r
, 
MAX_LENGTH_TR
 - 1, "| BUG | %†<%10.10s:%5i> ", 
time_buf„r
, 
fi
, 
li
);

172 } i‡(
Àvñ
 =
OSIP_ERROR
) {

173 
ö
 = 
	`¢¥ötf
(
buf„r
, 
MAX_LENGTH_TR
 - 1, "| ERROR | %†<%10.10s:%5i> ", 
time_buf„r
, 
fi
, 
li
);

175 } i‡(
Àvñ
 =
OSIP_WARNING
) {

176 
ö
 = 
	`¢¥ötf
(
buf„r
, 
MAX_LENGTH_TR
 - 1, "|WARNING| %†<%10.10s:%5i> ", 
time_buf„r
, 
fi
, 
li
);

178 } i‡(
Àvñ
 =
OSIP_INFO1
) {

179 
ö
 = 
	`¢¥ötf
(
buf„r
, 
MAX_LENGTH_TR
 - 1, "| INFO1 | %†<%10.10s:%5i> ", 
time_buf„r
, 
fi
, 
li
);

181 } i‡(
Àvñ
 =
OSIP_INFO2
) {

182 
ö
 = 
	`¢¥ötf
(
buf„r
, 
MAX_LENGTH_TR
 - 1, "| INFO2 | %†<%10.10s:%5i> ", 
time_buf„r
, 
fi
, 
li
);

184 } i‡(
Àvñ
 =
OSIP_INFO3
) {

185 
ö
 = 
	`¢¥ötf
(
buf„r
, 
MAX_LENGTH_TR
 - 1, "| INFO3 | %†<%10.10s:%5i> ", 
time_buf„r
, 
fi
, 
li
);

187 } i‡(
Àvñ
 =
OSIP_INFO4
) {

188 
ö
 = 
	`¢¥ötf
(
buf„r
, 
MAX_LENGTH_TR
 - 1, "| INFO4 | %†<%10.10s:%5i> ", 
time_buf„r
, 
fi
, 
li
);

191 
	`v¢¥ötf
(
buf„r
 + 
ö
, 
MAX_LENGTH_TR
 - 1 - in, 
ch‰
, 
¨gs
);

192 
buf„r
[
MAX_LENGTH_TR
 - 1] = '\0';

194 i‡(
debug
 > (Ë
Àvñ
) {

195 
	`¥ötf
("%s", 
buf„r
);

199 
	}
}

201 #ifde‡
TEST_NAPTR


203 
	$_«±r_lookup
(c⁄° *
sù_£rvî
, 
osù_«±r
 *
«±r_lookup
, 
kìp_ö_ˇche
) {

204 
osù_«±r_t
 *
«±r_ªc‹d
;

205 
«±r_ªc‹d
 = 
	`eXosù_dnsutûs_«±r
(
c⁄ãxt_eXosù
, 
sù_£rvî
, "sù", "t˝", 
kìp_ö_ˇche
);

207 i‡(
«±r_ªc‹d
 !
NULL
) {

210 
	`eXosù_dnsutûs_dns_¥o˚ss
(
«±r_ªc‹d
, 1);

212 i‡(
«±r_ªc‹d
->
«±r_°©e
 =
OSIP_NAPTR_STATE_NAPTRDONE
 ||Ç≠å_ªc‹d->«±r_°©ê=
OSIP_NAPTR_STATE_SRVINPROGRESS
) {

213 
	`eXosù_dnsutûs_dns_¥o˚ss
(
«±r_ªc‹d
, 1);

216 i‡(
«±r_ªc‹d
->
«±r_°©e
 =
OSIP_NAPTR_STATE_UNKNOWN
) {

219 
	`eXosù_dnsutûs_ªÀa£
(
«±r_ªc‹d
);

220  
OSIP_NOTFOUND
;

222 } i‡(
«±r_ªc‹d
->
«±r_°©e
 =
OSIP_NAPTR_STATE_INPROGRESS
) {

224 
	`osù_u¶ìp
(10000);

227 } i‡(
«±r_ªc‹d
->
«±r_°©e
 =
OSIP_NAPTR_STATE_NAPTRDONE
) {

229 
	`osù_u¶ìp
(1000);

232 } i‡(
«±r_ªc‹d
->
«±r_°©e
 =
OSIP_NAPTR_STATE_SRVINPROGRESS
) {

234 
	`osù_u¶ìp
(1000);

237 } i‡(
«±r_ªc‹d
->
«±r_°©e
 =
OSIP_NAPTR_STATE_SRVDONE
) {

239 i‡(
«±r_lookup
 !
NULL
) {

240 
	`mem˝y
(
«±r_lookup
, 
«±r_ªc‹d
, (
osù_«±r
));

243 
	`eXosù_dnsutûs_ªÀa£
(
«±r_ªc‹d
);

244  
OSIP_SUCCESS
;

246 } i‡(
«±r_ªc‹d
->
«±r_°©e
 =
OSIP_NAPTR_STATE_NOTSUPPORTED
) {

248 
	`eXosù_dnsutûs_ªÀa£
(
«±r_ªc‹d
);

249  
OSIP_NOTFOUND
;

251 } i‡(
«±r_ªc‹d
->
«±r_°©e
 =
OSIP_NAPTR_STATE_RETRYLATER
) {

253 
	`eXosù_dnsutûs_ªÀa£
(
«±r_ªc‹d
);

254  
OSIP_TIMEOUT
;

260 
	}
}

262 
	$_ªsﬁv_«±r
(c⁄° *
domaö
) {

263 
timevÆ
 
time_°¨t
;

264 
timevÆ
 
time_íd
;

265 
timevÆ
 
time_sub
;

267 
îr
;

268 
osù_«±r
 
«±r_lookup
;

270 
	`osù_gëtimeofday
(&
time_°¨t
, 
NULL
);

272 
	`mem£t
(&
«±r_lookup
, 0, (
osù_«±r
));

273 
îr
 = 
	`_«±r_lookup
(
domaö
, &
«±r_lookup
, 1);

275 i‡(
îr
 =
OSIP_SUCCESS
) {

276 i‡(
«±r_lookup
.
sùíum_ªc‹d
.
«me
[0] != '\0') {

278 
	`sy¶og_wøµî
(
LOG_INFO
, "ENUM: %†-> %s", 
domaö
, 
«±r_lookup
.
sùíum_ªc‹d
.
«me
);

281 
osù_§v_ªc‹d
 *
be°
 = 
NULL
;

283 i‡(
«±r_lookup
.
sùudp_ªc‹d
.
§víåy
[0].
p‹t
 > 0) {

284 
be°
 = &
«±r_lookup
.
sùudp_ªc‹d
;

286 } i‡(
«±r_lookup
.
sùt˝_ªc‹d
.
§víåy
[0].
p‹t
 > 0) {

287 
be°
 = &
«±r_lookup
.
sùt˝_ªc‹d
;

289 } i‡(
«±r_lookup
.
sùés_ªc‹d
.
§víåy
[0].
p‹t
 > 0) {

290 
be°
 = &
«±r_lookup
.
sùés_ªc‹d
;

293 i‡(
be°
 !
NULL
) {

294 i‡(
«±r_lookup
.
sùt˝_ªc‹d
.
§víåy
[0].
p‹t
 > 0) {

295 i‡(
«±r_lookup
.
sùt˝_ªc‹d
.
‹dî
 <
be°
->order) {

296 
be°
 = &
«±r_lookup
.
sùt˝_ªc‹d
;

300 i‡(
«±r_lookup
.
sùés_ªc‹d
.
§víåy
[0].
p‹t
 > 0) {

301 i‡(
«±r_lookup
.
sùés_ªc‹d
.
‹dî
 <
be°
->order) {

302 
be°
 = &
«±r_lookup
.
sùés_ªc‹d
;

306 
	`osù_gëtimeofday
(&
time_íd
, 
NULL
);

307 
	`osù_timîsub
(&
time_íd
, &
time_°¨t
, &
time_sub
);

308 
	`sy¶og_wøµî
(
LOG_INFO
, "NAPTR REPORT:[SUCCESS] [duøti⁄:%li,%03lis] be° sîvi˚ f‹ %†-> [%s] [%s:%i]", 
time_sub
.
tv_£c
,Åime_sub.
tv_u£c
 / 1000, 
«±r_lookup
.
domaö
, 
be°
->
¥Ÿocﬁ
, be°->
§víåy
[0].
§v
, be°->§víåy[0].
p‹t
);

314 
	`osù_gëtimeofday
(&
time_íd
, 
NULL
);

315 
	`osù_timîsub
(&
time_íd
, &
time_°¨t
, &
time_sub
);

316 
	`sy¶og_wøµî
(
LOG_ERR
, "NAPTR REPORT:[FAILURE] [duøti⁄:%li,%03lis]ÇÿNAPTR/nÿSRVÑec‹d f‹ %s", 
time_sub
.
tv_£c
,Åime_sub.
tv_u£c
 / 1000, 
domaö
);

318 
	}
}

322 
	$_am_›ti⁄_rouã_add_Ã
(c⁄° *
‹ig_rouã
, *
d°_rouã
, 
d°_rouã_size
) {

323 
osù_rouã_t
 *
rouã_hódî
 = 
NULL
;

324 *
√w_rouã
 = 
NULL
;

325 c⁄° *
tmp
;

326 c⁄° *
tmp2
;

327 
i
;

329 
	`mem£t
(
d°_rouã
, '\0', 
d°_rouã_size
);

330 i‡(
‹ig_rouã
 =
NULL
 || orig_route[0] == '\0')

333 
tmp
 = 
	`°r°r
(
‹ig_rouã
, "sip:");

334 
tmp2
 = 
	`°r°r
(
‹ig_rouã
, "sips:");

335 i‡(
tmp
 =
NULL
 && 
tmp2
 == NULL) {

336 
	`¢¥ötf
(
d°_rouã
, 
d°_rouã_size
, "<sù:%s;Ã>", 
‹ig_rouã
);

340 
i
 = 
	`osù_rouã_öô
(&
rouã_hódî
);

341 i‡(
i
 !0 || 
rouã_hódî
 =
NULL
)

342  
OSIP_NOMEM
;

343 
i
 = 
	`osù_rouã_∑r£
(
rouã_hódî
, 
‹ig_rouã
);

344 i‡(
i
 !0 || 
rouã_hódî
->
uæ
 =
NULL
 ||Ñouã_hódî->uæ->
ho°
 == NULL) {

345 
	`osù_rouã_‰ì
(
rouã_hódî
);

346 
	`¢¥ötf
(
d°_rouã
, 
d°_rouã_size
, "%s", 
‹ig_rouã
);

347  
i
;

350 
tmp
 = 
	`°r°r
(
‹ig_rouã
, ";lr");

351 i‡(
tmp
 =
NULL
)

352 
	`osù_uri_u∑øm_add
(
rouã_hódî
->
uæ
, 
	`osù_°rdup
("Ã"), 
NULL
);

354 
i
 = 
	`osù_rouã_to_°r
(
rouã_hódî
, &
√w_rouã
);

355 
	`osù_rouã_‰ì
(
rouã_hódî
);

356 i‡(
i
 !0 || 
√w_rouã
 =
NULL
) {

357  
i
;

359 
	`¢¥ötf
(
d°_rouã
, 
d°_rouã_size
, "%s", 
√w_rouã
);

360 
	`osù_‰ì
(
√w_rouã
);

362 
	}
}

364 
	$_¥ïíd_rouã
(
osù_mesßge_t
 *
sù
, c⁄° *
hvÆue
) {

365 
osù_rouã_t
 *
rouã
;

366 
i
;

367 
outbound_rouã
[256];

369 i‡(
hvÆue
 =
NULL
 || hvalue[0] == '\0')

370  
OSIP_SUCCESS
;

372 
	`mem£t
(
outbound_rouã
, '\0', (outbound_route));

373 
i
 = 
	`_am_›ti⁄_rouã_add_Ã
(
hvÆue
, 
outbound_rouã
, (outbound_route));

374 i‡(
i
 != 0)

375  
i
;

377 
i
 = 
	`osù_rouã_öô
(&
rouã
);

379 i‡(
i
 != 0)

380  
i
;

381 
i
 = 
	`osù_rouã_∑r£
(
rouã
, 
outbound_rouã
);

382 i‡(
i
 != 0) {

383 
	`osù_rouã_‰ì
(
rouã
);

384  
i
;

386 
sù
->
mesßge_¥›îty
 = 2;

387 
	`osù_li°_add
(&
sù
->
rouãs
, 
rouã
, 0);

388  
OSIP_SUCCESS
;

389 
	}
}

392 
	$°¨t_ªgi°î
(
sù_c⁄fig_ua
 *
c⁄fig_ua
, c⁄° *
c⁄è˘
) {

393 
osù_mesßge_t
 *
ªg
 = 
NULL
;

394 
îr
;

396 i‡(
c⁄è˘
 !
NULL
 && 
c⁄fig_ua
->
ªg∑øm
.
expúy
 == -1) {

397 
c⁄fig_ua
->
ªg∑øm
.
expúy
 = 300;

400 
	`eXosù_lock
(
c⁄ãxt_eXosù
);

402 i‡(
c⁄è˘
 =
NULL
 && 
c⁄fig_ua
->
ªg∑øm
.
expúy
 == -1) {

403 
c⁄fig_ua
->
ªg∑øm
.
ªgid
 = 
	`eXosù_ªgi°î_buûd_öôül_ªgi°î
(
c⁄ãxt_eXosù
, c⁄fig_ua->
‰omu£r
, c⁄fig_ua->
¥oxy
, 
c⁄è˘
, 0, &
ªg
);

406 
c⁄fig_ua
->
ªg∑øm
.
ªgid
 = 
	`eXosù_ªgi°î_buûd_öôül_ªgi°î
(
c⁄ãxt_eXosù
, c⁄fig_ua->
‰omu£r
, c⁄fig_ua->
¥oxy
, 
c⁄è˘
, c⁄fig_ua->ªg∑øm.
expúy
, &
ªg
);

409 i‡(
c⁄fig_ua
->
ªg∑øm
.
ªgid
 < 1) {

410 
	`eXosù_u∆ock
(
c⁄ãxt_eXosù
);

411 
	`sy¶og_wøµî
(
LOG_ERR
, "REGISTRATION REPORT:[FAILURE] [%s][duøti⁄:0,000s] c™nŸÖª∑ª sù REGISTER [%i]", 
å™•‹t
, 
c⁄fig_ua
->
ªg∑øm
.
ªgid
);

415 
	`_¥ïíd_rouã
(
ªg
, 
c⁄fig_ua
->
outbound
);

417 i‡(
c⁄è˘
 =
NULL
 && 
c⁄fig_ua
->
ªg∑øm
.
expúy
 == -1) {

418 
pos
 = 0;

420 !
	`osù_li°_eﬁ
(&
ªg
->
c⁄è˘s
, 
pos
)) {

421 
osù_c⁄è˘_t
 *
co
;

423 
co
 = (
osù_c⁄è˘_t
 *Ë
	`osù_li°_gë
(&
ªg
->
c⁄è˘s
, 
pos
);

424 
	`osù_li°_ªmove
(&
ªg
->
c⁄è˘s
, 
pos
);

425 
	`osù_c⁄è˘_‰ì
(
co
);

429 
îr
 = 
	`eXosù_ªgi°î_£nd_ªgi°î
(
c⁄ãxt_eXosù
, 
c⁄fig_ua
->
ªg∑øm
.
ªgid
, 
ªg
);

430 
	`eXosù_u∆ock
(
c⁄ãxt_eXosù
);

432 i‡(
îr
 != 0) {

433 
	`sy¶og_wøµî
(
LOG_ERR
, "REGISTRATION REPORT:[FAILURE] [%s][duøti⁄:0,000s] c™nŸ síd sù REGISTER [%i]", 
å™•‹t
, 
îr
);

437 
	}
}

439 
	$°¨t_mesßge
(c⁄° *
mëhod
, 
sù_c⁄fig_ua
 *
c⁄fig_ua
, c⁄° *
d©a
) {

440 
osù_mesßge_t
 *
mesßge
 = 
NULL
;

441 
tid
;

443 
	`eXosù_lock
(
c⁄ãxt_eXosù
);

445 
tid
 = 
	`eXosù_mesßge_buûd_ªque°
(
c⁄ãxt_eXosù
, &
mesßge
, 
mëhod
, 
c⁄fig_ua
->
tou£r
, c⁄fig_ua->
‰omu£r
, 
NULL
);

447 i‡(
tid
 < 0) {

448 
	`eXosù_u∆ock
(
c⁄ãxt_eXosù
);

449 
	`sy¶og_wøµî
(
LOG_ERR
, "MESSAGE REPORT:[FAILURE] [%s][duøti⁄:0,000s] c™nŸÖª∑ª sù %†[%i]", 
å™•‹t
, 
mëhod
, 
tid
);

453 
	`_¥ïíd_rouã
(
mesßge
, 
c⁄fig_ua
->
¥oxy
);

454 
	`_¥ïíd_rouã
(
mesßge
, 
c⁄fig_ua
->
outbound
);

456 
tid
 = 
	`eXosù_mesßge_£nd_ªque°
(
c⁄ãxt_eXosù
, 
mesßge
);

457 
	`eXosù_u∆ock
(
c⁄ãxt_eXosù
);

459 i‡(
tid
 < 0) {

460 
	`sy¶og_wøµî
(
LOG_ERR
, "REGISTRATION REPORT:[FAILURE] [%s][duøti⁄:0,000s] c™nŸ síd sù REGISTER [%i]", 
å™•‹t
, 
tid
);

464 
	}
}

466 
	$maö
(
¨gc
, *
¨gv
[]) {

467 
c
;

468 
p‹t
 = 0;

469 *
c⁄è˘
 = 
NULL
;

470 
sù_c⁄fig_ua
 
c⁄fig_ua
[
MAX_SIP_CONFIG
];

471 
idx
;

472 
automasquîade
 = 0;

473 
øã
 = 2000;

475 
£rvít
 *
£rvi˚
;

476 
s¶roŸˇ∑th
[1024];

477 
f‹k
 = 0;

478 
log_≥º‹
 = 0;

479 
îr
;

481 
¥og_«me
[32];

482 
›tvÆ
;

483 *
cur
;

484 *
√xt
;

486 
timevÆ
 
time_öãrvÆ
;

488 
	`¢¥ötf
(
¥og_«me
, ’rog_«me), "%†(%s)", 
PROG_NAME
, 
	`eXosù_gë_vîsi⁄
());

490 
	`mem£t
(&
c⁄fig_ua
, 0, (
sù_c⁄fig_ua
Ë* 
MAX_SIP_CONFIG
);

491 
idx
 = 0; idx < 
MAX_SIP_CONFIG
; idx++) {

492 
c⁄fig_ua
[
idx
].
ªg∑øm
.
expúy
 = -1;

494 #ifde‡
SIGPIPE


495 
	`sig«l
(
SIGPIPE
, 
SIG_IGN
);

497 #ifde‡
__löux


498 
	`sig«l
(
SIGINT
, 
ötH™dÀr
);

501 
	`¢¥ötf
(
å™•‹t
, (transport), "%s", "UDP");

502 
	`¢¥ötf
(
s¶roŸˇ∑th
, (sslrootcapath), "%s", "/etc/ssl/certs/");

505 
	#sh‹t_›ti⁄s
 "du:x:t:r:U:P:o:S:t:p:c:e:mv:f:sh"

	)

506 #ifde‡
_GNU_SOURCE


507 
›ti⁄_ödex
 = 0;

509 
›ti⁄
 
l⁄g_›ti⁄s
[] = {{"dóm⁄", 
no_¨gumít
, 
NULL
, 'd'},

510 {"‰om", 
ªquúed_¨gumít
, 
NULL
, 'u'},

511 {"to", 
ªquúed_¨gumít
, 
NULL
, 'x'},

512 {"¥oxy", 
ªquúed_¨gumít
, 
NULL
, 'r'},

513 {"u£∫ame", 
ªquúed_¨gumít
, 
NULL
, 'U'},

514 {"∑ssw‹d", 
ªquúed_¨gumít
, 
NULL
, 'P'},

515 {"outbound", 
ªquúed_¨gumít
, 
NULL
, 'o'},

517 {"s¶roŸˇ∑th", 
ªquúed_¨gumít
, 
NULL
, 'S'},

518 {"å™•‹t", 
ªquúed_¨gumít
, 
NULL
, 't'},

519 {"p‹t", 
ªquúed_¨gumít
, 
NULL
, 'p'},

520 {"c⁄è˘", 
ªquúed_¨gumít
, 
NULL
, 'c'},

521 {"expúy", 
ªquúed_¨gumít
, 
NULL
, 'e'},

522 {"automasquîade", 
no_¨gumít
, 
NULL
, 'm'},

523 {"sy¶og™dc⁄sﬁe", 
no_¨gumít
, 
NULL
, 's'},

524 {"vîbo£", 
ªquúed_¨gumít
, 
NULL
, 'v'},

525 {"øã", 
ªquúed_¨gumít
, 
NULL
, 'f'},

527 {"hñp", 
no_¨gumít
, 
NULL
, 'h'},

529 {
NULL
, 0, NULL, 0}};

531 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, 
sh‹t_›ti⁄s
, 
l⁄g_›ti⁄s
, &
›ti⁄_ödex
);

533 
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, 
sh‹t_›ti⁄s
);

536 i‡(
c
 == -1) {

540 
c
) {

542 
c⁄è˘
 = 
›èrg
;

546 
f‹k
 = 1;

550 
debug
 = 
	`©oi
(
›èrg
);

554 
øã
 = 
	`©oi
(
›èrg
);

558 #ifde‡
LOG_PERROR


559 
log_≥º‹
 = 
LOG_PERROR
;

564 
idx
 = 0; idx < 
MAX_SIP_CONFIG
; idx++) {

565 
c⁄fig_ua
[
idx
].
ªg∑øm
.
expúy
 = 
	`©oi
(
›èrg
);

570 
automasquîade
 = 1;

574 
	`ußge
();

575 
	`exô
(0);

578 
£rvi˚
 = 
	`gë£rvby«me
(
›èrg
, "udp");

580 i‡(
£rvi˚
) {

581 
p‹t
 = 
	`¡ohs
(
£rvi˚
->
s_p‹t
);

584 
p‹t
 = 
	`©oi
(
›èrg
);

590 
	`¢¥ötf
(
å™•‹t
, —øn•‹t), "%s", 
›èrg
);

594 
idx
=0;

595 
cur
 = 
›èrg
;

596 
√xt
 = 
	`°rchr
(
cur
, ',');

597 
idx
 = 0; idx < 
MAX_SIP_CONFIG
; idx++) {

598 i‡(
cur
 =
NULL
) {

601 i‡(
√xt
 =
NULL
) {

602 
c⁄fig_ua
[
idx
].
¥oxy
 = 
cur
;

605 
c⁄fig_ua
[
idx
].
¥oxy
 = 
cur
;

606 
√xt
[0] = '\0';

607 
cur
 = 
√xt
 + 1;

608 
√xt
 = 
	`°rchr
(
cur
, ',');

614 
idx
=0;

615 
cur
 = 
›èrg
;

616 
√xt
 = 
	`°rchr
(
cur
, ',');

617 
idx
 = 0; idx < 
MAX_SIP_CONFIG
; idx++) {

618 i‡(
cur
 =
NULL
) {

621 i‡(
√xt
 =
NULL
) {

622 
c⁄fig_ua
[
idx
].
‰omu£r
 = 
cur
;

625 
c⁄fig_ua
[
idx
].
‰omu£r
 = 
cur
;

626 
√xt
[0] = '\0';

627 
cur
 = 
√xt
 + 1;

628 
√xt
 = 
	`°rchr
(
cur
, ',');

634 
idx
=0;

635 
cur
 = 
›èrg
;

636 
√xt
 = 
	`°rchr
(
cur
, ',');

637 
idx
 = 0; idx < 
MAX_SIP_CONFIG
; idx++) {

638 i‡(
cur
 =
NULL
) {

641 i‡(
√xt
 =
NULL
) {

642 
c⁄fig_ua
[
idx
].
tou£r
 = 
cur
;

645 
c⁄fig_ua
[
idx
].
tou£r
 = 
cur
;

646 
√xt
[0] = '\0';

647 
cur
 = 
√xt
 + 1;

648 
√xt
 = 
	`°rchr
(
cur
, ',');

654 
idx
=0;

655 
cur
 = 
›èrg
;

656 
√xt
 = 
	`°rchr
(
cur
, ',');

657 
idx
 = 0; idx < 
MAX_SIP_CONFIG
; idx++) {

658 i‡(
cur
 =
NULL
) {

661 i‡(
√xt
 =
NULL
) {

662 
c⁄fig_ua
[
idx
].
u£∫ame
 = 
cur
;

665 
c⁄fig_ua
[
idx
].
u£∫ame
 = 
cur
;

666 
√xt
[0] = '\0';

667 
cur
 = 
√xt
 + 1;

668 
√xt
 = 
	`°rchr
(
cur
, ',');

674 
idx
=0;

675 
cur
 = 
›èrg
;

676 
√xt
 = 
	`°rchr
(
cur
, ',');

677 
idx
 = 0; idx < 
MAX_SIP_CONFIG
; idx++) {

678 i‡(
cur
 =
NULL
) {

681 i‡(
√xt
 =
NULL
) {

682 
c⁄fig_ua
[
idx
].
∑ssw‹d
 = 
cur
;

685 
c⁄fig_ua
[
idx
].
∑ssw‹d
 = 
cur
;

686 
√xt
[0] = '\0';

687 
cur
 = 
√xt
 + 1;

688 
√xt
 = 
	`°rchr
(
cur
, ',');

694 
idx
=0;

695 
cur
 = 
›èrg
;

696 
√xt
 = 
	`°rchr
(
cur
, ',');

697 
idx
 = 0; idx < 
MAX_SIP_CONFIG
; idx++) {

698 i‡(
cur
 =
NULL
) {

701 i‡(
√xt
 =
NULL
) {

702 
c⁄fig_ua
[
idx
].
outbound
 = 
cur
;

705 
c⁄fig_ua
[
idx
].
outbound
 = 
cur
;

706 
√xt
[0] = '\0';

707 
cur
 = 
√xt
 + 1;

708 
√xt
 = 
	`°rchr
(
cur
, ',');

714 
	`¢¥ötf
(
s¶roŸˇ∑th
, (s¶roŸˇ∑th), "%s", 
›èrg
);

722 #ifde‡
LOG_PERROR


723 
	`›ílog
(
PROG_NAME
, 
LOG_PID
 | 
log_≥º‹
, 
SYSLOG_FACILITY
);

726 
idx
 = 0; idx < 
MAX_SIP_CONFIG
; idx++) {

727 i‡(
c⁄fig_ua
[
idx
].
‰omu£r
 =
NULL
)

729 
	`sy¶og_wøµî
(
LOG_INFO
, "%†u∞™dÑu¬ög [ã°ög o¿[%s] REGISTER [%s] From: [%s]%s%s%†%s%s%s", 
¥og_«me
, 
å™•‹t
, 
c⁄fig_ua
[
idx
].
¥oxy
, c⁄fig_ua[idx].
‰omu£r
, (c⁄fig_ua[idx].
u£∫ame
 && c⁄fig_ua[idx].
∑ssw‹d
) ? " Username: [" : "", (config_ua[idx].username && config_ua[idx].password) ? config_ua[idx].username : "",

730 (
c⁄fig_ua
[
idx
].
u£∫ame
 && c⁄fig_ua[idx].
∑ssw‹d
Ë? ":*****]" : "", c⁄fig_ua[idx].
outbound
? "Route: [" : "", config_ua[idx].outbound? config_ua[idx].outbound : "", config_ua[idx].outbound ? "]" : "");

732 i‡(!
c⁄fig_ua
[
idx
].
¥oxy
 || !c⁄fig_ua[idx].
‰omu£r
 || 
	`°æí
(config_ua[idx].proxy) < 7 || strlen(config_ua[idx].fromuser) < 7) {

733 
	`sy¶og_wøµî
(
LOG_ERR
, "REGISTRATION REPORT:[FAILURE] [%s][duøti⁄:0,000s] missög o∏brokí m™d©‹yÖ¨amëî", 
å™•‹t
);

734 
	`ußge
();

735 
	`exô
(1);

739 i‡(
	`osù_°rˇ£cmp
(
å™•‹t
, "UDP") != 0 && osip_strcasecmp(transport, "TCP") != 0 && osip_strcasecmp(transport, "TLS") != 0 && osip_strcasecmp(transport, "DTLS") != 0) {

740 
	`sy¶og_wøµî
(
LOG_ERR
, "REGISTRATION REPORT:[FAILURE] [%s][duøti⁄:0,000s] wr⁄gÅøn•‹à∑ømëî", 
å™•‹t
);

741 
	`ußge
();

742 
	`exô
(1);

745 i‡(
f‹k
) {

746 
îr
 = 
	`d´m⁄
(1, 0);

747 i‡(
îr
 < 0) {

748 
	`sy¶og_wøµî
(
LOG_ERR
, "REGISTRATION REPORT:[FAILURE] [%s][duøti⁄:0,000s] d´m⁄ modêÁûed", 
å™•‹t
);

749 
	`exô
(1);

753 
	`osù_åa˚_öôülize_func
(
TRACE_LEVEL7
, 
__osù_åa˚_func
);

755 
c⁄ãxt_eXosù
 = 
	`eXosù_mÆloc
();

756 
îr
 = 
	`eXosù_öô
(
c⁄ãxt_eXosù
);

758 i‡(
îr
) {

759 
	`sy¶og_wøµî
(
LOG_ERR
, "REGISTRATION REPORT:[FAILURE] [%s][duøti⁄:0,000s]ÉXosù_öô faûuª [%i]", 
å™•‹t
, 
îr
);

760 
	`exô
(1);

763 
	`eXosù_£t_u£r_agít
(
c⁄ãxt_eXosù
, 
¥og_«me
);

765 
idx
 = 0; idx < 
MAX_SIP_CONFIG
; idx++) {

766 i‡(
c⁄fig_ua
[
idx
].
u£∫ame
 && c⁄fig_ua[idx].
∑ssw‹d
) {

767 
îr
 = 
	`eXosù_add_authítiˇti⁄_öfo
(
c⁄ãxt_eXosù
, 
c⁄fig_ua
[
idx
].
u£∫ame
, c⁄fig_ua[idx].u£∫ame, c⁄fig_ua[idx].
∑ssw‹d
, 
NULL
, NULL);

769 i‡(
îr
) {

770 
	`sy¶og_wøµî
(
LOG_ERR
, "REGISTRATION REPORT:[FAILURE] [%s][duøti⁄:0,000s] c™nŸádd cªdítü»[%i]", 
å™•‹t
, 
îr
);

771 
	`eXosù_quô
(
c⁄ãxt_eXosù
);

772 
	`osù_‰ì
(
c⁄ãxt_eXosù
);

773 
	`exô
(1);

778 
›tvÆ
 = 1;

779 
	`eXosù_£t_›ti⁄
(
c⁄ãxt_eXosù
, 
EXOSIP_OPT_SET_TLS_VERIFY_CERTIFICATE
, &
›tvÆ
);

782 
eXosù_és_˘x_t
 
és_des¸ùti⁄
;

783 
	`mem£t
(&
és_des¸ùti⁄
, 0, (
eXosù_és_˘x_t
));

784 
	`¢¥ötf
(
és_des¸ùti⁄
.
roŸ_ˇ_˚π
, —ls_des¸ùti⁄.roŸ_ˇ_˚π), "%s", 
s¶roŸˇ∑th
);

785 
	`eXosù_£t_›ti⁄
(
c⁄ãxt_eXosù
, 
EXOSIP_OPT_SET_TLS_CERTIFICATES_INFO
, &
és_des¸ùti⁄
);

788 
›tvÆ
 = 
automasquîade
;

789 
	`eXosù_£t_›ti⁄
(
c⁄ãxt_eXosù
, 
EXOSIP_OPT_AUTO_MASQUERADE_CONTACT
, &
›tvÆ
);

791 i‡(
automasquîade
) {

792 
	`sy¶og_wøµî
(
LOG_INFO
, "automasqueradeÉnabled");

795 #ifde‡
TEST_NAPTR


796 i‡(
	`osù_°∫ˇ£cmp
(
¥oxy
, "sip:", 4) == 0) {

797 
	`_ªsﬁv_«±r
(
¥oxy
 + 4);

799 } i‡(
	`osù_°∫ˇ£cmp
(
¥oxy
, "sips:", 4) == 0) {

800 
	`_ªsﬁv_«±r
(
¥oxy
 + 4);

804 
îr
 = -1;

806 i‡(
	`osù_°rˇ£cmp
(
å™•‹t
, "UDP") == 0) {

807 
îr
 = 
	`eXosù_li°í_addr
(
c⁄ãxt_eXosù
, 
IPPROTO_UDP
, 
NULL
, 
p‹t
, 
AF_INET
, 0);

809 } i‡(
	`osù_°rˇ£cmp
(
å™•‹t
, "TCP") == 0) {

810 
îr
 = 
	`eXosù_li°í_addr
(
c⁄ãxt_eXosù
, 
IPPROTO_TCP
, 
NULL
, 
p‹t
, 
AF_INET
, 0);

812 } i‡(
	`osù_°rˇ£cmp
(
å™•‹t
, "TLS") == 0) {

813 
îr
 = 
	`eXosù_li°í_addr
(
c⁄ãxt_eXosù
, 
IPPROTO_TCP
, 
NULL
, 
p‹t
, 
AF_INET
, 1);

815 } i‡(
	`osù_°rˇ£cmp
(
å™•‹t
, "DTLS") == 0) {

816 
îr
 = 
	`eXosù_li°í_addr
(
c⁄ãxt_eXosù
, 
IPPROTO_UDP
, 
NULL
, 
p‹t
, 
AF_INET
, 1);

819 i‡(
îr
) {

820 
	`sy¶og_wøµî
(
LOG_ERR
, "REGISTRATION REPORT:[FAILURE] [%s][duøti⁄:0,000s] c™nŸÖª∑ª sùÇëw‹kÜayî [%i]", 
å™•‹t
, 
îr
);

821 
	`eXosù_quô
(
c⁄ãxt_eXosù
);

822 
	`osù_‰ì
(
c⁄ãxt_eXosù
);

823 
	`exô
(1);

826 
	`osù_gëtimeofday
(&
time_öãrvÆ
, 
NULL
);

828 
idx
 = 0; idx < 
MAX_SIP_CONFIG
; idx++) {

829 i‡(
c⁄fig_ua
[
idx
].
‰omu£r
 =
NULL
)

831 
	`°¨t_ªgi°î
(&
c⁄fig_ua
[
idx
], 
c⁄è˘
);

834 
idx
 = 0; idx < 
MAX_SIP_CONFIG
; idx++) {

835 i‡(
c⁄fig_ua
[
idx
].
tou£r
 =
NULL
)

837 
	`°¨t_mesßge
("MESSAGE", &
c⁄fig_ua
[
idx
], "Hello World");

840 ; 
kìpRu¬ög
;) {

841 
eXosù_evít_t
 *
evít
;

842 
timevÆ
 
now
;

843 
timevÆ
 
duøti⁄
;

845 
	`osù_gëtimeofday
(&
now
, 
NULL
);

846 
	`osù_timîsub
(&
now
, &
time_öãrvÆ
, &
duøti⁄
);

848 i‡((
duøti⁄
.
tv_£c
 * 1000 + duøti⁄.
tv_u£c
 / 1000Ë> 
øã
) {

849 
idx
 = 0; idx < 
MAX_SIP_CONFIG
; idx++) {

850 i‡(
c⁄fig_ua
[
idx
].
tou£r
 =
NULL
)

852 
	`°¨t_mesßge
("MESSAGE", &
c⁄fig_ua
[
idx
], "Hello World");

854 
	`osù_gëtimeofday
(&
time_öãrvÆ
, 
NULL
);

857 i‡(!(
evít
 = 
	`eXosù_evít_waô
(
c⁄ãxt_eXosù
, 0, 1))) {

858 #ifde‡
OSIP_MONOTHREAD


859 
	`eXosù_execuã
(
c⁄ãxt_eXosù
);

861 
	`eXosù_lock
(
c⁄ãxt_eXosù
);

862 
	`eXosù_autom©ic_a˘i⁄
(
c⁄ãxt_eXosù
);

863 
	`eXosù_u∆ock
(
c⁄ãxt_eXosù
);

864 
	`osù_u¶ìp
(10000);

868 #ifde‡
OSIP_MONOTHREAD


869 
	`eXosù_execuã
(
c⁄ãxt_eXosù
);

872 
	`eXosù_lock
(
c⁄ãxt_eXosù
);

873 
	`eXosù_autom©ic_a˘i⁄
(
c⁄ãxt_eXosù
);

875 
evít
->
ty≥
) {

876 
EXOSIP_REGISTRATION_SUCCESS
:

877 
	`sy¶og_wøµî
(
LOG_INFO
, "REGISTRATION REPORT:[SUCCESS] [%s] REGISTER [%i][%s]", 
å™•‹t
, 
evít
->
ª•⁄£
->
°©us_code
,Évít->ª•⁄£->
ªas⁄_phø£
);

880 
EXOSIP_REGISTRATION_FAILURE
:

882 i‡(
evít
->
ª•⁄£
 =
NULL
) {

883 
	`sy¶og_wøµî
(
LOG_INFO
, "REGISTRATION REPORT:[FAILURE] [%s]REGISTER [408][ ]", 
å™•‹t
);

886 i‡(
evít
->
ª•⁄£
->
°©us_code
 == 401 ||Évent->response->status_code == 407) {

887 
osù_auth‹iz©i⁄_t
 *
auth
 = 
NULL
;

888 
îr
 = 
	`osù_mesßge_gë_auth‹iz©i⁄
(
evít
->
ªque°
, 0, &
auth
);

890 i‡(
îr
 < 0) {

892 
	`sy¶og_wøµî
(
LOG_INFO
, "[%s] REGISTER [%i][%s]", 
å™•‹t
, 
evít
->
ª•⁄£
->
°©us_code
,Évít->ª•⁄£->
ªas⁄_phø£
);

895 
	`sy¶og_wøµî
(
LOG_INFO
, "REGISTRATION REPORT:[FAILURE] [%s] REGISTER [%i][%s] -Éº=badÖassw‹d", 
å™•‹t
, 
evít
->
ª•⁄£
->
°©us_code
,Évít->ª•⁄£->
ªas⁄_phø£
);

899 
	`sy¶og_wøµî
(
LOG_INFO
, "REGISTRATION REPORT:[FAILURE] [%s] REGISTER [%i][%s]Éº=%s", 
å™•‹t
, 
evít
->
ª•⁄£
->
°©us_code
,Évít->ª•⁄£->
ªas⁄_phø£
,Évent->response->reason_phrase);

905 
EXOSIP_CALL_INVITE
: {

906 
osù_mesßge_t
 *
™swî
;

907 
i
;

909 
i
 = 
	`eXosù_ˇŒ_buûd_™swî
(
c⁄ãxt_eXosù
, 
evít
->
tid
, 405, &
™swî
);

911 i‡(
i
 != 0) {

912 
	`sy¶og_wøµî
(
LOG_ERR
, "failedÅoÑeject INVITE");

916 
	`osù_‰ì
(
™swî
->
ªas⁄_phø£
);

917 
™swî
->
ªas⁄_phø£
 = 
	`osù_°rdup
("No Support for Incoming Calls");

918 
i
 = 
	`eXosù_ˇŒ_£nd_™swî
(
c⁄ãxt_eXosù
, 
evít
->
tid
, 405, 
™swî
);

920 i‡(
i
 != 0) {

921 
	`sy¶og_wøµî
(
LOG_ERR
, "failedÅoÑeject INVITE");

925 
	`sy¶og_wøµî
(
LOG_INFO
, "INVITEÑejected with 405");

929 
EXOSIP_MESSAGE_NEW
: {

930 
osù_mesßge_t
 *
™swî
;

931 
i
;

933 
i
 = 
	`eXosù_mesßge_buûd_™swî
(
c⁄ãxt_eXosù
, 
evít
->
tid
, 405, &
™swî
);

935 i‡(
i
 != 0) {

936 
	`sy¶og_wøµî
(
LOG_ERR
, "ÁûedÅÿªje˘ %s", 
evít
->
ªque°
->
sù_mëhod
);

940 
i
 = 
	`eXosù_mesßge_£nd_™swî
(
c⁄ãxt_eXosù
, 
evít
->
tid
, 405, 
™swî
);

942 i‡(
i
 != 0) {

943 
	`sy¶og_wøµî
(
LOG_ERR
, "ÁûedÅÿªje˘ %s", 
evít
->
ªque°
->
sù_mëhod
);

947 
	`sy¶og_wøµî
(
LOG_INFO
, "%†ªje˘ed wôh 405", 
evít
->
ªque°
->
sù_mëhod
);

951 
EXOSIP_IN_SUBSCRIPTION_NEW
: {

952 
osù_mesßge_t
 *
™swî
;

953 
i
;

955 
i
 = 
	`eXosù_ösubs¸ùti⁄_buûd_™swî
(
c⁄ãxt_eXosù
, 
evít
->
tid
, 405, &
™swî
);

957 i‡(
i
 != 0) {

958 
	`sy¶og_wøµî
(
LOG_ERR
, "ÁûedÅÿªje˘ %s", 
evít
->
ªque°
->
sù_mëhod
);

962 
i
 = 
	`eXosù_ösubs¸ùti⁄_£nd_™swî
(
c⁄ãxt_eXosù
, 
evít
->
tid
, 405, 
™swî
);

964 i‡(
i
 != 0) {

965 
	`sy¶og_wøµî
(
LOG_ERR
, "ÁûedÅÿªje˘ %s", 
evít
->
ªque°
->
sù_mëhod
);

969 
	`sy¶og_wøµî
(
LOG_INFO
, "%†ªje˘ed wôh 405", 
evít
->
ªque°
->
sù_mëhod
);

973 
EXOSIP_CALL_CLOSED
:

974 
EXOSIP_CALL_RELEASED
:

977 
EXOSIP_CALL_MESSAGE_REQUESTFAILURE
:

978 i‡(
evít
->
did
 < 0 &&Évít->
ª•⁄£
 !
NULL
 && (evít->ª•⁄£->
°©us_code
 == 407 ||Évent->response->status_code == 401))

979 
	`eXosù_deÁu…_a˘i⁄
(
c⁄ãxt_eXosù
, 
evít
);

981 
EXOSIP_MESSAGE_REQUESTFAILURE
:

982 i‡(
evít
->
ªque°
 !
NULL
 &&Évít->
ª•⁄£
 !NULL && !
	`MSG_IS_PUBLISH
”vít->ªque°Ë&& (evít->ª•⁄£->
°©us_code
 == 407 ||Évent->response->status_code == 401))

983 
	`eXosù_deÁu…_a˘i⁄
(
c⁄ãxt_eXosù
, 
evít
);

986 
	`sy¶og_wøµî
(
LOG_DEBUG
, "ª˚ived unknow¿eXosùÉvíà—y≥, did, cidË(%d, %d, %d)", 
evít
->
ty≥
,Évít->
did
,Évít->
cid
);

989 
	`eXosù_u∆ock
(
c⁄ãxt_eXosù
);

990 
	`eXosù_evít_‰ì
(
evít
);

993 
	`eXosù_quô
(
c⁄ãxt_eXosù
);

994 
	`osù_‰ì
(
c⁄ãxt_eXosù
);

996 
	}
}

	@/usr/include/MQTTAsync.h

88 #i‡!
deföed
(
MQTTASYNC_H
)

89 
	#MQTTASYNC_H


	)

91 #i‡
deföed
(
__˝lu•lus
)

95 
	~<°dio.h
>

100 
	~"MQTTExp‹tDe˛¨©i⁄s.h
"

102 
	~"MQTTPr›îtõs.h
"

103 
	~"MQTTRós⁄Codes.h
"

104 
	~"MQTTSubs¸ibeO±s.h
"

105 #i‡!
deföed
(
NO_PERSISTENCE
)

106 
	~"MQTTClõ¡Pîsi°í˚.h
"

113 
	#MQTTASYNC_SUCCESS
 0

	)

118 
	#MQTTASYNC_FAILURE
 -1

	)

122 
	#MQTTASYNC_PERSISTENCE_ERROR
 -2

	)

127 
	#MQTTASYNC_DISCONNECTED
 -3

	)

132 
	#MQTTASYNC_MAX_MESSAGES_INFLIGHT
 -4

	)

136 
	#MQTTASYNC_BAD_UTF8_STRING
 -5

	)

140 
	#MQTTASYNC_NULL_PARAMETER
 -6

	)

146 
	#MQTTASYNC_TOPICNAME_TRUNCATED
 -7

	)

151 
	#MQTTASYNC_BAD_STRUCTURE
 -8

	)

155 
	#MQTTASYNC_BAD_QOS
 -9

	)

159 
	#MQTTASYNC_NO_MORE_MSGIDS
 -10

	)

163 
	#MQTTASYNC_OPERATION_INCOMPLETE
 -11

	)

167 
	#MQTTASYNC_MAX_BUFFERED_MESSAGES
 -12

	)

171 
	#MQTTASYNC_SSL_NOT_SUPPORTED
 -13

	)

177 
	#MQTTASYNC_BAD_PROTOCOL
 -14

	)

181 
	#MQTTASYNC_BAD_MQTT_OPTION
 -15

	)

185 
	#MQTTASYNC_WRONG_MQTT_VERSION
 -16

	)

189 
	#MQTTASYNC_0_LEN_WILL_TOPIC
 -17

	)

195 
	#MQTTASYNC_COMMAND_IGNORED
 -18

	)

199 
	#MQTTVERSION_DEFAULT
 0

	)

203 
	#MQTTVERSION_3_1
 3

	)

207 
	#MQTTVERSION_3_1_1
 4

	)

211 
	#MQTTVERSION_5
 5

	)

215 
	#MQTT_BAD_SUBSCRIBE
 0x80

	)

224 
°ru˘_id
[4];

226 
°ru˘_vîsi⁄
;

228 
do_›ís¶_öô
;

229 } 
	tMQTTAsync_öô_›ti⁄s
;

231 
	#MQTTAsync_öô_›ti⁄s_öôülizî
 { {'M', 'Q', 'T', 'G'}, 0, 0 }

	)

237 
LIBMQTT_API
 
MQTTAsync_globÆ_öô
(
MQTTAsync_öô_›ti⁄s
* 
öôs
);

243 * 
	tMQTTAsync
;

253 
	tMQTTAsync_tokí
;

264 
°ru˘_id
[4];

267 
°ru˘_vîsi⁄
;

269 
∑ylﬂdÀn
;

271 * 
∑ylﬂd
;

285 
qos
;

304 
ªèöed
;

311 
dup
;

317 
msgid
;

321 
MQTTPr›îtõs
 
¥›îtõs
;

322 } 
	tMQTTAsync_mesßge
;

324 
	#MQTTAsync_mesßge_öôülizî
 { {'M', 'Q', 'T', 'M'}, 1, 0, 
NULL
, 0, 0, 0, 0, 
MQTTPr›îtõs_öôülizî
 }

	)

359 
	tMQTTAsync_mesßgeAºived
(* 
	tc⁄ãxt
, * 
	tt›icName
, 
	tt›icLí
, 
	tMQTTAsync_mesßge
* 
	tmesßge
);

382 
	tMQTTAsync_dñivîyCom∂ëe
(* 
	tc⁄ãxt
, 
	tMQTTAsync_tokí
 
	ttokí
);

402 
	tMQTTAsync_c⁄√˘i⁄Lo°
(* 
	tc⁄ãxt
, * 
	tˇu£
);

420 
	tMQTTAsync_c⁄√˘ed
(* 
	tc⁄ãxt
, * 
	tˇu£
);

434 
	tMQTTAsync_disc⁄√˘ed
(* 
	tc⁄ãxt
, 
	tMQTTPr›îtõs
* 
	t¥›îtõs
,

435 
	tMQTTRós⁄Codes
 
	tªas⁄Code
);

452 
LIBMQTT_API
 
MQTTAsync_£tDisc⁄√˘ed
(
MQTTAsync
 
h™dÀ
, * 
c⁄ãxt
, 
MQTTAsync_disc⁄√˘ed
* 
co
);

458 
°ru˘_id
[4];

460 
°ru˘_vîsi⁄
;

467 c⁄° * 
u£∫ame
;

474 
Àn
;

475 c⁄° * 
d©a
;

476 } 
bö¨ypwd
;

477 } 
	tMQTTAsync_c⁄√˘D©a
;

479 
	#MQTTAsync_c⁄√˘D©a_öôülizî
 {{'M', 'Q', 'C', 'D'}, 0, 
NULL
, {0, NULL}}

	)

487 
	tMQTTAsync_upd©eC⁄√˘O±i⁄s
(* 
	tc⁄ãxt
, 
	tMQTTAsync_c⁄√˘D©a
* 
	td©a
);

498 
LIBMQTT_API
 
MQTTAsync_£tUpd©eC⁄√˘O±i⁄s
(
MQTTAsync
 
h™dÀ
, * 
c⁄ãxt
, 
MQTTAsync_upd©eC⁄√˘O±i⁄s
* 
co
);

509 
LIBMQTT_API
 
MQTTAsync_£tBef‹ePîsi°í˚Wrôe
(
MQTTAsync
 
h™dÀ
, * 
c⁄ãxt
, 
MQTTPîsi°í˚_bef‹eWrôe
* 
co
);

521 
LIBMQTT_API
 
MQTTAsync_£tA·îPîsi°í˚Ród
(
MQTTAsync
 
h™dÀ
, * 
c⁄ãxt
, 
MQTTPîsi°í˚_a·îRód
* 
co
);

528 
MQTTAsync_tokí
 
tokí
;

530 
code
;

532 c⁄° *
mesßge
;

533 } 
	tMQTTAsync_ÁûuªD©a
;

540 
°ru˘_id
[4];

542 
°ru˘_vîsi⁄
;

544 
MQTTAsync_tokí
 
tokí
;

546 
MQTTRós⁄Codes
 
ªas⁄Code
;

548 
MQTTPr›îtõs
 
¥›îtõs
;

550 
code
;

552 c⁄° *
mesßge
;

554 
∑ckë_ty≥
;

555 } 
	tMQTTAsync_ÁûuªD©a5
;

557 
	#MQTTAsync_ÁûuªD©a5_öôülizî
 {{'M', 'Q', 'F', 'D'}, 0, 0, 
MQTTREASONCODE_SUCCESS
, 
MQTTPr›îtõs_öôülizî
, 0, 
NULL
, 0}

	)

563 
MQTTAsync_tokí
 
tokí
;

569 
qos
;

572 * 
qosLi°
;

576 
MQTTAsync_mesßge
 
mesßge
;

577 * 
de°ö©i⁄Name
;

578 } 
pub
;

582 * 
£rvîURI
;

583 
MQTTVîsi⁄
;

584 
£ssi⁄Pª£¡
;

585 } 
c⁄√˘
;

586 } 
Æt
;

587 } 
	tMQTTAsync_suc˚ssD©a
;

593 
°ru˘_id
[4];

594 
°ru˘_vîsi⁄
;

596 
MQTTAsync_tokí
 
tokí
;

597 
MQTTRós⁄Codes
 
ªas⁄Code
;

598 
MQTTPr›îtõs
 
¥›îtõs
;

605 
ªas⁄CodeCou¡
;

606 
MQTTRós⁄Codes
* 
ªas⁄Codes
;

607 } 
sub
;

611 
MQTTAsync_mesßge
 
mesßge
;

612 * 
de°ö©i⁄Name
;

613 } 
pub
;

617 * 
£rvîURI
;

618 
MQTTVîsi⁄
;

619 
£ssi⁄Pª£¡
;

620 } 
c⁄√˘
;

624 
ªas⁄CodeCou¡
;

625 
MQTTRós⁄Codes
* 
ªas⁄Codes
;

626 } 
unsub
;

627 } 
Æt
;

628 } 
	tMQTTAsync_suc˚ssD©a5
;

630 
	#MQTTAsync_suc˚ssD©a5_öôülizî
 {{'M', 'Q', 'S', 'D'}, 0, 0, 
MQTTREASONCODE_SUCCESS
, 
MQTTPr›îtõs_öôülizî
, {.
sub
={0,0}}}

	)

645 
	tMQTTAsync_⁄Suc˚ss
(* 
	tc⁄ãxt
, 
	tMQTTAsync_suc˚ssD©a
* 
	tª•⁄£
);

661 
	tMQTTAsync_⁄Suc˚ss5
(* 
	tc⁄ãxt
, 
	tMQTTAsync_suc˚ssD©a5
* 
	tª•⁄£
);

676 
	tMQTTAsync_⁄Faûuª
(* 
	tc⁄ãxt
, 
	tMQTTAsync_ÁûuªD©a
* 
	tª•⁄£
);

691 
	tMQTTAsync_⁄Faûuª5
(* 
	tc⁄ãxt
, 
	tMQTTAsync_ÁûuªD©a5
* 
	tª•⁄£
);

698 
	sMQTTAsync_ª•⁄£O±i⁄s


701 
°ru˘_id
[4];

704 
°ru˘_vîsi⁄
;

710 
MQTTAsync_⁄Suc˚ss
* 
⁄Suc˚ss
;

716 
MQTTAsync_⁄Faûuª
* 
⁄Faûuª
;

722 * 
c⁄ãxt
;

728 
MQTTAsync_tokí
 
tokí
;

734 
MQTTAsync_⁄Suc˚ss5
* 
⁄Suc˚ss5
;

740 
MQTTAsync_⁄Faûuª5
* 
⁄Faûuª5
;

744 
MQTTPr›îtõs
 
¥›îtõs
;

748 
MQTTSubs¸ibe_›ti⁄s
 
subs¸ibeO±i⁄s
;

753 
subs¸ibeO±i⁄sCou¡
;

757 
MQTTSubs¸ibe_›ti⁄s
* 
subs¸ibeO±i⁄sLi°
;

758 } 
	tMQTTAsync_ª•⁄£O±i⁄s
;

760 
	#MQTTAsync_ª•⁄£O±i⁄s_öôülizî
 { {'M', 'Q', 'T', 'R'}, 1, 
NULL
, NULL, 0, 0, NULL, NULL, 
MQTTPr›îtõs_öôülizî
, 
MQTTSubs¸ibe_›ti⁄s_öôülizî
, 0, NULL}

	)

763 
MQTTAsync_ª•⁄£O±i⁄s
 
	tMQTTAsync_ˇŒO±i⁄s
;

764 
	#MQTTAsync_ˇŒO±i⁄s_öôülizî
 
MQTTAsync_ª•⁄£O±i⁄s_öôülizî


	)

795 
LIBMQTT_API
 
MQTTAsync_£tCÆlbacks
(
MQTTAsync
 
h™dÀ
, * 
c⁄ãxt
, 
MQTTAsync_c⁄√˘i⁄Lo°
* 
˛
,

796 
MQTTAsync_mesßgeAºived
* 
ma
, 
MQTTAsync_dñivîyCom∂ëe
* 
dc
);

818 
LIBMQTT_API
 
MQTTAsync_£tC⁄√˘i⁄Lo°CÆlback
(
MQTTAsync
 
h™dÀ
, * 
c⁄ãxt
,

819 
MQTTAsync_c⁄√˘i⁄Lo°
* 
˛
);

842 
LIBMQTT_API
 
MQTTAsync_£tMesßgeAºivedCÆlback
(
MQTTAsync
 
h™dÀ
, * 
c⁄ãxt
,

843 
MQTTAsync_mesßgeAºived
* 
ma
);

864 
LIBMQTT_API
 
MQTTAsync_£tDñivîyCom∂ëeCÆlback
(
MQTTAsync
 
h™dÀ
, * 
c⁄ãxt
,

865 
MQTTAsync_dñivîyCom∂ëe
* 
dc
);

879 
LIBMQTT_API
 
MQTTAsync_£tC⁄√˘ed
(
MQTTAsync
 
h™dÀ
, * 
c⁄ãxt
, 
MQTTAsync_c⁄√˘ed
* 
co
);

890 
LIBMQTT_API
 
MQTTAsync_ªc⁄√˘
(
MQTTAsync
 
h™dÀ
);

937 
LIBMQTT_API
 
MQTTAsync_¸óã
(
MQTTAsync
* 
h™dÀ
, c⁄° * 
£rvîURI
, c⁄° * 
˛õ¡Id
,

938 
≥rsi°í˚_ty≥
, * 
≥rsi°í˚_c⁄ãxt
);

944 
°ru˘_id
[4];

950 
°ru˘_vîsi⁄
;

952 
£ndWhûeDisc⁄√˘ed
;

954 
maxBuf„ªdMesßges
;

960 
MQTTVîsi⁄
;

964 
ÆlowDisc⁄√˘edSídAtAnyTime
;

968 
dñëeOlde°Mesßges
;

972 
ª°‹eMesßges
;

976 
≥rsi°QoS0
;

977 } 
	tMQTTAsync_¸óãO±i⁄s
;

979 
	#MQTTAsync_¸óãO±i⁄s_öôülizî
 { {'M', 'Q', 'C', 'O'}, 2, 0, 100, 
MQTTVERSION_DEFAULT
, 0, 0, 1, 1}

	)

981 
	#MQTTAsync_¸óãO±i⁄s_öôülizî5
 { {'M', 'Q', 'C', 'O'}, 2, 0, 100, 
MQTTVERSION_5
, 0, 0, 1, 1}

	)

984 
LIBMQTT_API
 
MQTTAsync_¸óãWôhO±i⁄s
(
MQTTAsync
* 
h™dÀ
, c⁄° * 
£rvîURI
, c⁄° * 
˛õ¡Id
,

985 
≥rsi°í˚_ty≥
, * 
≥rsi°í˚_c⁄ãxt
, 
MQTTAsync_¸óãO±i⁄s
* 
›ti⁄s
);

1002 
°ru˘_id
[4];

1006 
°ru˘_vîsi⁄
;

1008 c⁄° * 
t›icName
;

1010 c⁄° * 
mesßge
;

1014 
ªèöed
;

1019 
qos
;

1023 
Àn
;

1024 c⁄° * 
d©a
;

1025 } 
∑ylﬂd
;

1026 } 
	tMQTTAsync_wûlO±i⁄s
;

1028 
	#MQTTAsync_wûlO±i⁄s_öôülizî
 { {'M', 'Q', 'T', 'W'}, 1, 
NULL
, NULL, 0, 0, { 0, NULL } }

	)

1030 
	#MQTT_SSL_VERSION_DEFAULT
 0

	)

1031 
	#MQTT_SSL_VERSION_TLS_1_0
 1

	)

1032 
	#MQTT_SSL_VERSION_TLS_1_1
 2

	)

1033 
	#MQTT_SSL_VERSION_TLS_1_2
 3

	)

1050 
°ru˘_id
[4];

1059 
°ru˘_vîsi⁄
;

1062 c⁄° * 
åu°St‹e
;

1067 c⁄° * 
keySt‹e
;

1072 c⁄° * 
¥iv©eKey
;

1075 c⁄° * 
¥iv©eKeyPassw‹d
;

1085 c⁄° * 
íabÀdCùhîSuôes
;

1088 
íabÀSîvîCîtAuth
;

1094 
s¶Vîsi⁄
;

1101 
vîify
;

1108 c⁄° * 
CA∑th
;

1114 (*
s¶_îr‹_cb
Ë(c⁄° *
°r
, 
size_t
 
Àn
, *
u
);

1120 * 
s¶_îr‹_c⁄ãxt
;

1127 (*
s¶_psk_cb
Ë(c⁄° *
höt
, *
idítôy
, 
max_idítôy_Àn
, *
psk
, 
max_psk_Àn
, *
u
);

1133 * 
s¶_psk_c⁄ãxt
;

1140 
dißbÀDeÁu…Tru°St‹e
;

1149 c⁄° *
¥Ÿos
;

1155 
¥Ÿos_Àn
;

1156 } 
	tMQTTAsync_SSLO±i⁄s
;

1158 
	#MQTTAsync_SSLO±i⁄s_öôülizî
 { {'M', 'Q', 'T', 'S'}, 5, 
NULL
, NULL, NULL, NULL, NULL, 1, 
MQTT_SSL_VERSION_DEFAULT
, 0, NULL, NULL, NULL, NULL, NULL, 0, NULL, 0 }

	)

1163 c⁄° * 
«me
;

1164 c⁄° * 
vÆue
;

1165 } 
	tMQTTAsync_«meVÆue
;

1175 
°ru˘_id
[4];

1186 
°ru˘_vîsi⁄
;

1197 
kìpAliveI¡îvÆ
;

1219 
˛ón£ssi⁄
;

1223 
maxInÊight
;

1229 
MQTTAsync_wûlO±i⁄s
* 
wûl
;

1235 c⁄° * 
u£∫ame
;

1241 c⁄° * 
∑ssw‹d
;

1245 
c⁄√˘Timeout
;

1253 
ªåyI¡îvÆ
;

1258 
MQTTAsync_SSLO±i⁄s
* 
s¶
;

1264 
MQTTAsync_⁄Suc˚ss
* 
⁄Suc˚ss
;

1270 
MQTTAsync_⁄Faûuª
* 
⁄Faûuª
;

1276 * 
c⁄ãxt
;

1280 
£rvîURIcou¡
;

1292 * c⁄°* 
£rvîURIs
;

1299 
MQTTVîsi⁄
;

1303 
autom©icRec⁄√˘
;

1307 
möRëryI¡îvÆ
;

1311 
maxRëryI¡îvÆ
;

1316 
Àn
;

1317 c⁄° * 
d©a
;

1318 } 
bö¨ypwd
;

1322 
˛ón°¨t
;

1326 
MQTTPr›îtõs
 *
c⁄√˘Pr›îtõs
;

1330 
MQTTPr›îtõs
 *
wûlPr›îtõs
;

1336 
MQTTAsync_⁄Suc˚ss5
* 
⁄Suc˚ss5
;

1342 
MQTTAsync_⁄Faûuª5
* 
⁄Faûuª5
;

1346 c⁄° 
MQTTAsync_«meVÆue
* 
hâpHódîs
;

1350 c⁄° * 
hâpProxy
;

1354 c⁄° * 
hâpsProxy
;

1355 } 
	tMQTTAsync_c⁄√˘O±i⁄s
;

1358 
	#MQTTAsync_c⁄√˘O±i⁄s_öôülizî
 { {'M', 'Q', 'T', 'C'}, 8, 60, 1, 65535, 
NULL
, NULL, NULL, 30, 0,\

1359 
NULL
, NULL, NULL, NULL, 0, NULL, 
MQTTVERSION_DEFAULT
, 0, 1, 60, {0, NULL}, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL}

	)

1361 
	#MQTTAsync_c⁄√˘O±i⁄s_öôülizî5
 { {'M', 'Q', 'T', 'C'}, 8, 60, 0, 65535, 
NULL
, NULL, NULL, 30, 0,\

1362 
NULL
, NULL, NULL, NULL, 0, NULL, 
MQTTVERSION_5
, 0, 1, 60, {0, NULL}, 1, NULL, NULL, NULL, NULL, NULL, NULL, NULL}

	)

1364 
	#MQTTAsync_c⁄√˘O±i⁄s_öôülizî_ws
 { {'M', 'Q', 'T', 'C'}, 8, 45, 1, 65535, 
NULL
, NULL, NULL, 30, 0,\

1365 
NULL
, NULL, NULL, NULL, 0, NULL, 
MQTTVERSION_DEFAULT
, 0, 1, 60, {0, NULL}, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL}

	)

1367 
	#MQTTAsync_c⁄√˘O±i⁄s_öôülizî5_ws
 { {'M', 'Q', 'T', 'C'}, 8, 45, 0, 65535, 
NULL
, NULL, NULL, 30, 0,\

1368 
NULL
, NULL, NULL, NULL, 0, NULL, 
MQTTVERSION_5
, 0, 1, 60, {0, NULL}, 1, NULL, NULL, NULL, NULL, NULL, NULL, NULL}

	)

1391 
LIBMQTT_API
 
MQTTAsync_c⁄√˘
(
MQTTAsync
 
h™dÀ
, c⁄° 
MQTTAsync_c⁄√˘O±i⁄s
* 
›ti⁄s
);

1397 
°ru˘_id
[4];

1399 
°ru˘_vîsi⁄
;

1404 
timeout
;

1410 
MQTTAsync_⁄Suc˚ss
* 
⁄Suc˚ss
;

1416 
MQTTAsync_⁄Faûuª
* 
⁄Faûuª
;

1422 * 
c⁄ãxt
;

1426 
MQTTPr›îtõs
 
¥›îtõs
;

1430 
MQTTRós⁄Codes
 
ªas⁄Code
;

1436 
MQTTAsync_⁄Suc˚ss5
* 
⁄Suc˚ss5
;

1442 
MQTTAsync_⁄Faûuª5
* 
⁄Faûuª5
;

1443 } 
	tMQTTAsync_disc⁄√˘O±i⁄s
;

1445 
	#MQTTAsync_disc⁄√˘O±i⁄s_öôülizî
 { {'M', 'Q', 'T', 'D'}, 0, 0, 
NULL
, NULL, NULL,\

1446 
MQTTPr›îtõs_öôülizî
, 
MQTTREASONCODE_SUCCESS
, 
NULL
, NULL }

	)

1448 
	#MQTTAsync_disc⁄√˘O±i⁄s_öôülizî5
 { {'M', 'Q', 'T', 'D'}, 1, 0, 
NULL
, NULL, NULL,\

1449 
MQTTPr›îtõs_öôülizî
, 
MQTTREASONCODE_SUCCESS
, 
NULL
, NULL }

	)

1469 
LIBMQTT_API
 
MQTTAsync_disc⁄√˘
(
MQTTAsync
 
h™dÀ
, c⁄° 
MQTTAsync_disc⁄√˘O±i⁄s
* 
›ti⁄s
);

1479 
LIBMQTT_API
 
MQTTAsync_isC⁄√˘ed
(
MQTTAsync
 
h™dÀ
);

1496 
LIBMQTT_API
 
MQTTAsync_subs¸ibe
(
MQTTAsync
 
h™dÀ
, c⁄° * 
t›ic
, 
qos
, 
MQTTAsync_ª•⁄£O±i⁄s
* 
ª•⁄£
);

1516 
LIBMQTT_API
 
MQTTAsync_subs¸ibeM™y
(
MQTTAsync
 
h™dÀ
, 
cou¡
, * c⁄°* 
t›ic
, c⁄° * 
qos
, 
MQTTAsync_ª•⁄£O±i⁄s
* 
ª•⁄£
);

1530 
LIBMQTT_API
 
MQTTAsync_unsubs¸ibe
(
MQTTAsync
 
h™dÀ
, c⁄° * 
t›ic
, 
MQTTAsync_ª•⁄£O±i⁄s
* 
ª•⁄£
);

1544 
LIBMQTT_API
 
MQTTAsync_unsubs¸ibeM™y
(
MQTTAsync
 
h™dÀ
, 
cou¡
, * c⁄°* 
t›ic
, 
MQTTAsync_ª•⁄£O±i⁄s
* 
ª•⁄£
);

1566 
LIBMQTT_API
 
MQTTAsync_£nd
(
MQTTAsync
 
h™dÀ
, c⁄° * 
de°ö©i⁄Name
, 
∑ylﬂdÀn
, c⁄° * 
∑ylﬂd
, 
qos
,

1567 
ªèöed
, 
MQTTAsync_ª•⁄£O±i⁄s
* 
ª•⁄£
);

1585 
LIBMQTT_API
 
MQTTAsync_£ndMesßge
(
MQTTAsync
 
h™dÀ
, c⁄° * 
de°ö©i⁄Name
, c⁄° 
MQTTAsync_mesßge
* 
msg
, 
MQTTAsync_ª•⁄£O±i⁄s
* 
ª•⁄£
);

1606 
LIBMQTT_API
 
MQTTAsync_gëPídögTokís
(
MQTTAsync
 
h™dÀ
, 
MQTTAsync_tokí
 **
tokís
);

1616 
	#MQTTASYNC_TRUE
 1

	)

1617 
LIBMQTT_API
 
MQTTAsync_isCom∂ëe
(
MQTTAsync
 
h™dÀ
, 
MQTTAsync_tokí
 
tokí
);

1632 
LIBMQTT_API
 
MQTTAsync_waôF‹Com∂ëi⁄
(
MQTTAsync
 
h™dÀ
, 
MQTTAsync_tokí
 
tokí
, 
timeout
);

1645 
LIBMQTT_API
 
MQTTAsync_‰ìMesßge
(
MQTTAsync_mesßge
** 
msg
);

1655 
LIBMQTT_API
 
MQTTAsync_‰ì
(* 
±r
);

1664 
LIBMQTT_API
 * 
MQTTAsync_mÆloc
(
size_t
 
size
);

1673 
LIBMQTT_API
 
MQTTAsync_de°roy
(
MQTTAsync
* 
h™dÀ
);

1677 
	eMQTTASYNC_TRACE_LEVELS


1679 
MQTTASYNC_TRACE_MAXIMUM
 = 1,

1680 
MQTTASYNC_TRACE_MEDIUM
,

1681 
MQTTASYNC_TRACE_MINIMUM
,

1682 
MQTTASYNC_TRACE_PROTOCOL
,

1683 
MQTTASYNC_TRACE_ERROR
,

1684 
MQTTASYNC_TRACE_SEVERE
,

1685 
MQTTASYNC_TRACE_FATAL
,

1694 
LIBMQTT_API
 
MQTTAsync_£tTø˚Levñ
(
MQTTASYNC_TRACE_LEVELS
 
Àvñ
);

1705 
	tMQTTAsync_åa˚CÆlback
(
	tMQTTASYNC_TRACE_LEVELS
 
	tÀvñ
, * 
	tmesßge
);

1713 
LIBMQTT_API
 
MQTTAsync_£tTø˚CÆlback
(
MQTTAsync_åa˚CÆlback
* 
ˇŒback
);

1721 
LIBMQTT_API
 
MQTTAsync_«meVÆue
* 
MQTTAsync_gëVîsi⁄Info
();

1729 
LIBMQTT_API
 c⁄° * 
MQTTAsync_°ªº‹
(
code
);

2345 #i‡
deföed
(
__˝lu•lus
)

	@/usr/include/MQTTClient.h

107 #i‡!
deföed
(
MQTTCLIENT_H
)

108 
	#MQTTCLIENT_H


	)

110 #i‡
deföed
(
__˝lu•lus
)

114 
	~<°dio.h
>

119 
	~"MQTTExp‹tDe˛¨©i⁄s.h
"

121 
	~"MQTTPr›îtõs.h
"

122 
	~"MQTTRós⁄Codes.h
"

123 
	~"MQTTSubs¸ibeO±s.h
"

124 #i‡!
deföed
(
NO_PERSISTENCE
)

125 
	~"MQTTClõ¡Pîsi°í˚.h
"

132 
	#MQTTCLIENT_SUCCESS
 0

	)

137 
	#MQTTCLIENT_FAILURE
 -1

	)

144 
	#MQTTCLIENT_DISCONNECTED
 -3

	)

149 
	#MQTTCLIENT_MAX_MESSAGES_INFLIGHT
 -4

	)

153 
	#MQTTCLIENT_BAD_UTF8_STRING
 -5

	)

157 
	#MQTTCLIENT_NULL_PARAMETER
 -6

	)

163 
	#MQTTCLIENT_TOPICNAME_TRUNCATED
 -7

	)

168 
	#MQTTCLIENT_BAD_STRUCTURE
 -8

	)

172 
	#MQTTCLIENT_BAD_QOS
 -9

	)

176 
	#MQTTCLIENT_SSL_NOT_SUPPORTED
 -10

	)

180 
	#MQTTCLIENT_BAD_MQTT_VERSION
 -11

	)

186 
	#MQTTCLIENT_BAD_PROTOCOL
 -14

	)

190 
	#MQTTCLIENT_BAD_MQTT_OPTION
 -15

	)

194 
	#MQTTCLIENT_WRONG_MQTT_VERSION
 -16

	)

198 
	#MQTTCLIENT_0_LEN_WILL_TOPIC
 -17

	)

204 
	#MQTTVERSION_DEFAULT
 0

	)

208 
	#MQTTVERSION_3_1
 3

	)

212 
	#MQTTVERSION_3_1_1
 4

	)

216 
	#MQTTVERSION_5
 5

	)

220 
	#MQTT_BAD_SUBSCRIBE
 0x80

	)

228 
°ru˘_id
[4];

230 
°ru˘_vîsi⁄
;

232 
do_›ís¶_öô
;

233 } 
	tMQTTClõ¡_öô_›ti⁄s
;

235 
	#MQTTClõ¡_öô_›ti⁄s_öôülizî
 { {'M', 'Q', 'T', 'G'}, 0, 0 }

	)

241 
LIBMQTT_API
 
MQTTClõ¡_globÆ_öô
(
MQTTClõ¡_öô_›ti⁄s
* 
öôs
);

247 * 
	tMQTTClõ¡
;

258 
	tMQTTClõ¡_dñivîyTokí
;

259 
	tMQTTClõ¡_tokí
;

270 
°ru˘_id
[4];

273 
°ru˘_vîsi⁄
;

275 
∑ylﬂdÀn
;

277 * 
∑ylﬂd
;

291 
qos
;

310 
ªèöed
;

317 
dup
;

321 
msgid
;

325 
MQTTPr›îtõs
 
¥›îtõs
;

326 } 
	tMQTTClõ¡_mesßge
;

328 
	#MQTTClõ¡_mesßge_öôülizî
 { {'M', 'Q', 'T', 'M'}, 1, 0, 
NULL
, 0, 0, 0, 0, 
MQTTPr›îtõs_öôülizî
 }

	)

360 
	tMQTTClõ¡_mesßgeAºived
(* 
	tc⁄ãxt
, * 
	tt›icName
, 
	tt›icLí
, 
	tMQTTClõ¡_mesßge
* 
	tmesßge
);

382 
	tMQTTClõ¡_dñivîyCom∂ëe
(* 
	tc⁄ãxt
, 
	tMQTTClõ¡_dñivîyTokí
 
	tdt
);

399 
	tMQTTClõ¡_c⁄√˘i⁄Lo°
(* 
	tc⁄ãxt
, * 
	tˇu£
);

429 
LIBMQTT_API
 
MQTTClõ¡_£tCÆlbacks
(
MQTTClõ¡
 
h™dÀ
, * 
c⁄ãxt
, 
MQTTClõ¡_c⁄√˘i⁄Lo°
* 
˛
,

430 
MQTTClõ¡_mesßgeAºived
* 
ma
, 
MQTTClõ¡_dñivîyCom∂ëe
* 
dc
);

442 
	tMQTTClõ¡_disc⁄√˘ed
(* 
	tc⁄ãxt
, 
	tMQTTPr›îtõs
* 
	t¥›îtõs
,

443 
	tMQTTRós⁄Codes
 
	tªas⁄Code
);

458 
LIBMQTT_API
 
MQTTClõ¡_£tDisc⁄√˘ed
(
MQTTClõ¡
 
h™dÀ
, * 
c⁄ãxt
, 
MQTTClõ¡_disc⁄√˘ed
* 
co
);

483 
	tMQTTClõ¡_published
(* 
	tc⁄ãxt
, 
	tdt
, 
	t∑ckë_ty≥
, 
	tMQTTPr›îtõs
* 
	t¥›îtõs
,

484 
	tMQTTRós⁄Codes
 
	tªas⁄Code
);

486 
LIBMQTT_API
 
MQTTClõ¡_£tPublished
(
MQTTClõ¡
 
h™dÀ
, * 
c⁄ãxt
, 
MQTTClõ¡_published
* 
co
);

532 
LIBMQTT_API
 
MQTTClõ¡_¸óã
(
MQTTClõ¡
* 
h™dÀ
, c⁄° * 
£rvîURI
, c⁄° * 
˛õ¡Id
,

533 
≥rsi°í˚_ty≥
, * 
≥rsi°í˚_c⁄ãxt
);

539 
°ru˘_id
[4];

541 
°ru˘_vîsi⁄
;

547 
MQTTVîsi⁄
;

548 } 
	tMQTTClõ¡_¸óãO±i⁄s
;

550 
	#MQTTClõ¡_¸óãO±i⁄s_öôülizî
 { {'M', 'Q', 'C', 'O'}, 0, 
MQTTVERSION_DEFAULT
 }

	)

596 
LIBMQTT_API
 
MQTTClõ¡_¸óãWôhO±i⁄s
(
MQTTClõ¡
* 
h™dÀ
, c⁄° * 
£rvîURI
, c⁄° * 
˛õ¡Id
,

597 
≥rsi°í˚_ty≥
, * 
≥rsi°í˚_c⁄ãxt
, 
MQTTClõ¡_¸óãO±i⁄s
* 
›ti⁄s
);

614 
°ru˘_id
[4];

618 
°ru˘_vîsi⁄
;

620 c⁄° * 
t›icName
;

622 c⁄° * 
mesßge
;

626 
ªèöed
;

631 
qos
;

635 
Àn
;

636 c⁄° * 
d©a
;

637 } 
∑ylﬂd
;

638 } 
	tMQTTClõ¡_wûlO±i⁄s
;

640 
	#MQTTClõ¡_wûlO±i⁄s_öôülizî
 { {'M', 'Q', 'T', 'W'}, 1, 
NULL
, NULL, 0, 0, {0, NULL} }

	)

642 
	#MQTT_SSL_VERSION_DEFAULT
 0

	)

643 
	#MQTT_SSL_VERSION_TLS_1_0
 1

	)

644 
	#MQTT_SSL_VERSION_TLS_1_1
 2

	)

645 
	#MQTT_SSL_VERSION_TLS_1_2
 3

	)

662 
°ru˘_id
[4];

671 
°ru˘_vîsi⁄
;

674 c⁄° * 
åu°St‹e
;

679 c⁄° * 
keySt‹e
;

684 c⁄° * 
¥iv©eKey
;

687 c⁄° * 
¥iv©eKeyPassw‹d
;

697 c⁄° * 
íabÀdCùhîSuôes
;

700 
íabÀSîvîCîtAuth
;

706 
s¶Vîsi⁄
;

713 
vîify
;

720 c⁄° * 
CA∑th
;

726 (*
s¶_îr‹_cb
Ë(c⁄° *
°r
, 
size_t
 
Àn
, *
u
);

732 * 
s¶_îr‹_c⁄ãxt
;

739 (*
s¶_psk_cb
Ë(c⁄° *
höt
, *
idítôy
, 
max_idítôy_Àn
, *
psk
, 
max_psk_Àn
, *
u
);

745 * 
s¶_psk_c⁄ãxt
;

752 
dißbÀDeÁu…Tru°St‹e
;

761 c⁄° *
¥Ÿos
;

767 
¥Ÿos_Àn
;

768 } 
	tMQTTClõ¡_SSLO±i⁄s
;

770 
	#MQTTClõ¡_SSLO±i⁄s_öôülizî
 { {'M', 'Q', 'T', 'S'}, 5, 
NULL
, NULL, NULL, NULL, NULL, 1, 
MQTT_SSL_VERSION_DEFAULT
, 0, NULL, NULL, NULL, NULL, NULL, 0, NULL, 0 }

	)

781 c⁄° * 
«me
;

782 c⁄° * 
vÆue
;

783 } 
	tMQTTClõ¡_«meVÆue
;

790 
LIBMQTT_API
 
MQTTClõ¡_«meVÆue
* 
MQTTClõ¡_gëVîsi⁄Info
();

809 
°ru˘_id
[4];

820 
°ru˘_vîsi⁄
;

830 
kìpAliveI¡îvÆ
;

852 
˛ón£ssi⁄
;

862 
ªlübÀ
;

868 
MQTTClõ¡_wûlO±i⁄s
* 
wûl
;

874 c⁄° * 
u£∫ame
;

880 c⁄° * 
∑ssw‹d
;

884 
c⁄√˘Timeout
;

892 
ªåyI¡îvÆ
;

897 
MQTTClõ¡_SSLO±i⁄s
* 
s¶
;

901 
£rvîURIcou¡
;

915 * c⁄°* 
£rvîURIs
;

923 
MQTTVîsi⁄
;

929 c⁄° * 
£rvîURI
;

930 
MQTTVîsi⁄
;

931 
£ssi⁄Pª£¡
;

932 } 
ªtu∫ed
;

938 
Àn
;

939 c⁄° * 
d©a
;

940 } 
bö¨ypwd
;

944 
maxInÊightMesßges
;

948 
˛ón°¨t
;

952 c⁄° 
MQTTClõ¡_«meVÆue
* 
hâpHódîs
;

956 c⁄° * 
hâpProxy
;

960 c⁄° * 
hâpsProxy
;

961 } 
	tMQTTClõ¡_c⁄√˘O±i⁄s
;

963 
	#MQTTClõ¡_c⁄√˘O±i⁄s_öôülizî
 { {'M', 'Q', 'T', 'C'}, 8, 60, 1, 1, 
NULL
, NULL, NULL, 30, 0, NULL,\

964 0, 
NULL
, 
MQTTVERSION_DEFAULT
, {NULL, 0, 0}, {0, NULL}, -1, 0, NULL, NULL, NULL}

	)

966 
	#MQTTClõ¡_c⁄√˘O±i⁄s_öôülizî5
 { {'M', 'Q', 'T', 'C'}, 8, 60, 0, 1, 
NULL
, NULL, NULL, 30, 0, NULL,\

967 0, 
NULL
, 
MQTTVERSION_5
, {NULL, 0, 0}, {0, NULL}, -1, 1, NULL, NULL, NULL}

	)

969 
	#MQTTClõ¡_c⁄√˘O±i⁄s_öôülizî_ws
 { {'M', 'Q', 'T', 'C'}, 8, 45, 1, 1, 
NULL
, NULL, NULL, 30, 0, NULL,\

970 0, 
NULL
, 
MQTTVERSION_DEFAULT
, {NULL, 0, 0}, {0, NULL}, -1, 0, NULL, NULL, NULL}

	)

972 
	#MQTTClõ¡_c⁄√˘O±i⁄s_öôülizî5_ws
 { {'M', 'Q', 'T', 'C'}, 8, 45, 0, 1, 
NULL
, NULL, NULL, 30, 0, NULL,\

973 0, 
NULL
, 
MQTTVERSION_5
, {NULL, 0, 0}, {0, NULL}, -1, 1, NULL, NULL, NULL}

	)

995 
LIBMQTT_API
 
MQTTClõ¡_c⁄√˘
(
MQTTClõ¡
 
h™dÀ
, 
MQTTClõ¡_c⁄√˘O±i⁄s
* 
›ti⁄s
);

998 
	sMQTTRe•⁄£


1000 
vîsi⁄
;

1001 
MQTTRós⁄Codes
 
ªas⁄Code
;

1002 
ªas⁄CodeCou¡
;

1003 
MQTTRós⁄Codes
* 
ªas⁄Codes
;

1004 
MQTTPr›îtõs
* 
¥›îtõs
;

1005 } 
	tMQTTRe•⁄£
;

1007 
	#MQTTRe•⁄£_öôülizî
 {1, 
MQTTREASONCODE_SUCCESS
, 0, 
NULL
, NULL}

	)

1013 
LIBMQTT_API
 
MQTTRe•⁄£_‰ì
(
MQTTRe•⁄£
 
ª•⁄£
);

1028 
LIBMQTT_API
 
MQTTRe•⁄£
 
MQTTClõ¡_c⁄√˘5
(
MQTTClõ¡
 
h™dÀ
, 
MQTTClõ¡_c⁄√˘O±i⁄s
* 
›ti⁄s
,

1029 
MQTTPr›îtõs
* 
c⁄√˘Pr›îtõs
, MQTTPr›îtõs* 
wûlPr›îtõs
);

1049 
LIBMQTT_API
 
MQTTClõ¡_disc⁄√˘
(
MQTTClõ¡
 
h™dÀ
, 
timeout
);

1051 
LIBMQTT_API
 
MQTTClõ¡_disc⁄√˘5
(
MQTTClõ¡
 
h™dÀ
, 
timeout
, 
MQTTRós⁄Codes
 
ªas⁄
, 
MQTTPr›îtõs
* 
¥›s
);

1060 
LIBMQTT_API
 
MQTTClõ¡_isC⁄√˘ed
(
MQTTClõ¡
 
h™dÀ
);

1079 
LIBMQTT_API
 
MQTTClõ¡_subs¸ibe
(
MQTTClõ¡
 
h™dÀ
, c⁄° * 
t›ic
, 
qos
);

1094 
LIBMQTT_API
 
MQTTRe•⁄£
 
MQTTClõ¡_subs¸ibe5
(
MQTTClõ¡
 
h™dÀ
, c⁄° * 
t›ic
, 
qos
,

1095 
MQTTSubs¸ibe_›ti⁄s
* 
›ts
, 
MQTTPr›îtõs
* 
¥›s
);

1113 
LIBMQTT_API
 
MQTTClõ¡_subs¸ibeM™y
(
MQTTClõ¡
 
h™dÀ
, 
cou¡
, * c⁄°* 
t›ic
, * 
qos
);

1131 
LIBMQTT_API
 
MQTTRe•⁄£
 
MQTTClõ¡_subs¸ibeM™y5
(
MQTTClõ¡
 
h™dÀ
, 
cou¡
, * c⁄°* 
t›ic
,

1132 * 
qos
, 
MQTTSubs¸ibe_›ti⁄s
* 
›ts
, 
MQTTPr›îtõs
* 
¥›s
);

1145 
LIBMQTT_API
 
MQTTClõ¡_unsubs¸ibe
(
MQTTClõ¡
 
h™dÀ
, c⁄° * 
t›ic
);

1157 
LIBMQTT_API
 
MQTTRe•⁄£
 
MQTTClõ¡_unsubs¸ibe5
(
MQTTClõ¡
 
h™dÀ
, c⁄° * 
t›ic
, 
MQTTPr›îtõs
* 
¥›s
);

1170 
LIBMQTT_API
 
MQTTClõ¡_unsubs¸ibeM™y
(
MQTTClõ¡
 
h™dÀ
, 
cou¡
, * c⁄°* 
t›ic
);

1183 
LIBMQTT_API
 
MQTTRe•⁄£
 
MQTTClõ¡_unsubs¸ibeM™y5
(
MQTTClõ¡
 
h™dÀ
, 
cou¡
, * c⁄°* 
t›ic
, 
MQTTPr›îtõs
* 
¥›s
);

1206 
LIBMQTT_API
 
MQTTClõ¡_publish
(
MQTTClõ¡
 
h™dÀ
, c⁄° * 
t›icName
, 
∑ylﬂdÀn
, c⁄° * 
∑ylﬂd
, 
qos
, 
ªèöed
,

1207 
MQTTClõ¡_dñivîyTokí
* 
dt
);

1230 
LIBMQTT_API
 
MQTTRe•⁄£
 
MQTTClõ¡_publish5
(
MQTTClõ¡
 
h™dÀ
, c⁄° * 
t›icName
, 
∑ylﬂdÀn
, c⁄° * 
∑ylﬂd
,

1231 
qos
, 
ªèöed
, 
MQTTPr›îtõs
* 
¥›îtõs
, 
MQTTClõ¡_dñivîyTokí
* 
dt
);

1251 
LIBMQTT_API
 
MQTTClõ¡_publishMesßge
(
MQTTClõ¡
 
h™dÀ
, c⁄° * 
t›icName
, 
MQTTClõ¡_mesßge
* 
msg
, 
MQTTClõ¡_dñivîyTokí
* 
dt
);

1273 
LIBMQTT_API
 
MQTTRe•⁄£
 
MQTTClõ¡_publishMesßge5
(
MQTTClõ¡
 
h™dÀ
, c⁄° * 
t›icName
, 
MQTTClõ¡_mesßge
* 
msg
,

1274 
MQTTClõ¡_dñivîyTokí
* 
dt
);

1291 
LIBMQTT_API
 
MQTTClõ¡_waôF‹Com∂ëi⁄
(
MQTTClõ¡
 
h™dÀ
, 
MQTTClõ¡_dñivîyTokí
 
dt
, 
timeout
);

1312 
LIBMQTT_API
 
MQTTClõ¡_gëPídögDñivîyTokís
(
MQTTClõ¡
 
h™dÀ
, 
MQTTClõ¡_dñivîyTokí
 **
tokís
);

1320 
LIBMQTT_API
 
MQTTClõ¡_yõld
();

1353 
LIBMQTT_API
 
MQTTClõ¡_ª˚ive
(
MQTTClõ¡
 
h™dÀ
, ** 
t›icName
, * 
t›icLí
, 
MQTTClõ¡_mesßge
** 
mesßge
,

1354 
timeout
);

1366 
LIBMQTT_API
 
MQTTClõ¡_‰ìMesßge
(
MQTTClõ¡_mesßge
** 
msg
);

1376 
LIBMQTT_API
 
MQTTClõ¡_‰ì
(* 
±r
);

1385 
LIBMQTT_API
 
MQTTClõ¡_de°roy
(
MQTTClõ¡
* 
h™dÀ
);

1388 
	eMQTTCLIENT_TRACE_LEVELS


1390 
MQTTCLIENT_TRACE_MAXIMUM
 = 1,

1391 
MQTTCLIENT_TRACE_MEDIUM
,

1392 
MQTTCLIENT_TRACE_MINIMUM
,

1393 
MQTTCLIENT_TRACE_PROTOCOL
,

1394 
MQTTCLIENT_TRACE_ERROR
,

1395 
MQTTCLIENT_TRACE_SEVERE
,

1396 
MQTTCLIENT_TRACE_FATAL
,

1405 
LIBMQTT_API
 
MQTTClõ¡_£tTø˚Levñ
(
MQTTCLIENT_TRACE_LEVELS
 
Àvñ
);

1416 
	tMQTTClõ¡_åa˚CÆlback
(
	tMQTTCLIENT_TRACE_LEVELS
 
	tÀvñ
, * 
	tmesßge
);

1424 
LIBMQTT_API
 
MQTTClõ¡_£tTø˚CÆlback
(
MQTTClõ¡_åa˚CÆlback
* 
ˇŒback
);

1433 
LIBMQTT_API
 
MQTTClõ¡_£tComm™dTimeout
(
MQTTClõ¡
 
h™dÀ
, 
mûliSec⁄ds
);

1440 
LIBMQTT_API
 c⁄° * 
MQTTClõ¡_°ªº‹
(
code
);

1442 #i‡
deföed
(
__˝lu•lus
)

	@/usr/include/MQTTClientPersistence.h

59 #i‡!
deföed
(
MQTTCLIENTPERSISTENCE_H
)

60 
	#MQTTCLIENTPERSISTENCE_H


	)

69 
	#MQTTCLIENT_PERSISTENCE_DEFAULT
 0

	)

74 
	#MQTTCLIENT_PERSISTENCE_NONE
 1

	)

79 
	#MQTTCLIENT_PERSISTENCE_USER
 2

	)

85 
	#MQTTCLIENT_PERSISTENCE_ERROR
 -2

	)

113 (*
	tPîsi°í˚_›í
)(** 
	th™dÀ
, c⁄° * 
	t˛õ¡ID
, c⁄° * 
	t£rvîURI
, * 
	tc⁄ãxt
);

123 (*
	tPîsi°í˚_˛o£
)(* 
	th™dÀ
);

140 (*
	tPîsi°í˚_put
)(* 
	th™dÀ
, * 
	tkey
, 
	tbufcou¡
, * 
	tbuf„rs
[], 
	tbuÊís
[]);

156 (*
	tPîsi°í˚_gë
)(* 
	th™dÀ
, * 
	tkey
, ** 
	tbuf„r
, * 
	tbuÊí
);

169 (*
	tPîsi°í˚_ªmove
)(* 
	th™dÀ
, * 
	tkey
);

186 (*
	tPîsi°í˚_keys
)(* 
	th™dÀ
, *** 
	tkeys
, * 
	tnkeys
);

197 (*
	tPîsi°í˚_˛ór
)(* 
	th™dÀ
);

208 (*
	tPîsi°í˚_c⁄èöskey
)(* 
	th™dÀ
, * 
	tkey
);

219 * 
c⁄ãxt
;

223 
Pîsi°í˚_›í
 
p›í
;

227 
Pîsi°í˚_˛o£
 
p˛o£
;

231 
Pîsi°í˚_put
 
µut
;

235 
Pîsi°í˚_gë
 
pgë
;

239 
Pîsi°í˚_ªmove
 
¥emove
;

243 
Pîsi°í˚_keys
 
pkeys
;

247 
Pîsi°í˚_˛ór
 
p˛ór
;

251 
Pîsi°í˚_c⁄èöskey
 
pc⁄èöskey
;

252 } 
	tMQTTClõ¡_≥rsi°í˚
;

264 
	tMQTTPîsi°í˚_bef‹eWrôe
(* 
	tc⁄ãxt
, 
	tbufcou¡
, * 
	tbuf„rs
[], 
	tbuÊís
[]);

275 
	tMQTTPîsi°í˚_a·îRód
(* 
	tc⁄ãxt
, ** 
	tbuf„r
, * 
	tbuÊí
);

	@/usr/include/MQTTExportDeclarations.h

17 #i‡!
deföed
(
EXPORTDECLARATIONS_H
)

18 
	#EXPORTDECLARATIONS_H


	)

20 #i‡
deföed
(
_WIN32
Ë|| deföed(
_WIN64
)

21 #i‡
deföed
(
PAHO_MQTT_EXPORTS
)

22 
	#LIBMQTT_API
 
	`__de˛•ec
(
dŒexp‹t
)

	)

23 #ñi‡
deföed
(
PAHO_MQTT_IMPORTS
)

24 
	#LIBMQTT_API
 
	`__de˛•ec
(
dŒimp‹t
)

	)

26 
	#LIBMQTT_API


	)

29 #i‡
deföed
(
PAHO_MQTT_EXPORTS
)

30 
	#LIBMQTT_API
 
	`__©åibuã__
 ((
	`visibûôy
 ("deÁu…")))

	)

32 
	#LIBMQTT_API
 

	)

	@/usr/include/MQTTProperties.h

17 #i‡!
deföed
(
MQTTPROPERTIES_H
)

18 
	#MQTTPROPERTIES_H


	)

20 
	~"MQTTExp‹tDe˛¨©i⁄s.h
"

22 
	#MQTT_INVALID_PROPERTY_ID
 -2

	)

25 
	eMQTTPr›îtyCodes
 {

26 
	mMQTTPROPERTY_CODE_PAYLOAD_FORMAT_INDICATOR
 = 1,

27 
	mMQTTPROPERTY_CODE_MESSAGE_EXPIRY_INTERVAL
 = 2,

28 
	mMQTTPROPERTY_CODE_CONTENT_TYPE
 = 3,

29 
	mMQTTPROPERTY_CODE_RESPONSE_TOPIC
 = 8,

30 
	mMQTTPROPERTY_CODE_CORRELATION_DATA
 = 9,

31 
	mMQTTPROPERTY_CODE_SUBSCRIPTION_IDENTIFIER
 = 11,

32 
	mMQTTPROPERTY_CODE_SESSION_EXPIRY_INTERVAL
 = 17,

33 
	mMQTTPROPERTY_CODE_ASSIGNED_CLIENT_IDENTIFER
 = 18,

34 
	mMQTTPROPERTY_CODE_SERVER_KEEP_ALIVE
 = 19,

35 
	mMQTTPROPERTY_CODE_AUTHENTICATION_METHOD
 = 21,

36 
	mMQTTPROPERTY_CODE_AUTHENTICATION_DATA
 = 22,

37 
	mMQTTPROPERTY_CODE_REQUEST_PROBLEM_INFORMATION
 = 23,

38 
	mMQTTPROPERTY_CODE_WILL_DELAY_INTERVAL
 = 24,

39 
	mMQTTPROPERTY_CODE_REQUEST_RESPONSE_INFORMATION
 = 25,

40 
	mMQTTPROPERTY_CODE_RESPONSE_INFORMATION
 = 26,

41 
	mMQTTPROPERTY_CODE_SERVER_REFERENCE
 = 28,

42 
	mMQTTPROPERTY_CODE_REASON_STRING
 = 31,

43 
	mMQTTPROPERTY_CODE_RECEIVE_MAXIMUM
 = 33,

44 
	mMQTTPROPERTY_CODE_TOPIC_ALIAS_MAXIMUM
 = 34,

45 
	mMQTTPROPERTY_CODE_TOPIC_ALIAS
 = 35,

46 
	mMQTTPROPERTY_CODE_MAXIMUM_QOS
 = 36,

47 
	mMQTTPROPERTY_CODE_RETAIN_AVAILABLE
 = 37,

48 
	mMQTTPROPERTY_CODE_USER_PROPERTY
 = 38,

49 
	mMQTTPROPERTY_CODE_MAXIMUM_PACKET_SIZE
 = 39,

50 
	mMQTTPROPERTY_CODE_WILDCARD_SUBSCRIPTION_AVAILABLE
 = 40,

51 
	mMQTTPROPERTY_CODE_SUBSCRIPTION_IDENTIFIERS_AVAILABLE
 = 41,

52 
	mMQTTPROPERTY_CODE_SHARED_SUBSCRIPTION_AVAILABLE
 = 42

61 
LIBMQTT_API
 c⁄° * 
MQTTPr›îtyName
(
MQTTPr›îtyCodes
 
vÆue
);

64 
	eMQTTPr›îtyTy≥s
 {

65 
	mMQTTPROPERTY_TYPE_BYTE
,

66 
	mMQTTPROPERTY_TYPE_TWO_BYTE_INTEGER
,

67 
	mMQTTPROPERTY_TYPE_FOUR_BYTE_INTEGER
,

68 
	mMQTTPROPERTY_TYPE_VARIABLE_BYTE_INTEGER
,

69 
	mMQTTPROPERTY_TYPE_BINARY_DATA
,

70 
	mMQTTPROPERTY_TYPE_UTF_8_ENCODED_STRING
,

71 
	mMQTTPROPERTY_TYPE_UTF_8_STRING_PAIR


79 
LIBMQTT_API
 
MQTTPr›îty_gëTy≥
(
MQTTPr›îtyCodes
 
vÆue
);

86 
	mÀn
;

87 * 
	md©a
;

88 } 
	tMQTTLíSåög
;

96 
MQTTPr›îtyCodes
 
	midítifõr
;

99 
	mbyã
;

100 
	möãgî2
;

101 
	möãgî4
;

103 
MQTTLíSåög
 
	md©a
;

104 
MQTTLíSåög
 
	mvÆue
;

106 } 
	mvÆue
;

107 } 
	tMQTTPr›îty
;

112 
	sMQTTPr›îtõs


114 
	mcou¡
;

115 
	mmax_cou¡
;

116 
	mÀngth
;

117 
MQTTPr›îty
 *
	m¨øy
;

118 } 
	tMQTTPr›îtõs
;

120 
	#MQTTPr›îtõs_öôülizî
 {0, 0, 0, 
NULL
}

	)

127 
MQTTPr›îtõs_Àn
(
MQTTPr›îtõs
* 
¥›s
);

135 
LIBMQTT_API
 
MQTTPr›îtõs_add
(
MQTTPr›îtõs
* 
¥›s
, c⁄° 
MQTTPr›îty
* 
¥›
);

143 
MQTTPr›îtõs_wrôe
(** 
µå
, c⁄° 
MQTTPr›îtõs
* 
¥›îtõs
);

152 
MQTTPr›îtõs_ªad
(
MQTTPr›îtõs
* 
¥›îtõs
, ** 
µå
, * 
ídd©a
);

158 
LIBMQTT_API
 
MQTTPr›îtõs_‰ì
(
MQTTPr›îtõs
* 
¥›îtõs
);

165 
LIBMQTT_API
 
MQTTPr›îtõs
 
MQTTPr›îtõs_c›y
(c⁄° MQTTPr›îtõs* 
¥›s
);

173 
LIBMQTT_API
 
MQTTPr›îtõs_hasPr›îty
(
MQTTPr›îtõs
 *
¥›s
, 
MQTTPr›îtyCodes
 
¥›id
);

182 
LIBMQTT_API
 
MQTTPr›îtõs_¥›îtyCou¡
(
MQTTPr›îtõs
 *
¥›s
, 
MQTTPr›îtyCodes
 
¥›id
);

190 
LIBMQTT_API
 
MQTTPr›îtõs_gëNumîicVÆue
(
MQTTPr›îtõs
 *
¥›s
, 
MQTTPr›îtyCodes
 
¥›id
);

200 
LIBMQTT_API
 
MQTTPr›îtõs_gëNumîicVÆueAt
(
MQTTPr›îtõs
 *
¥›s
, 
MQTTPr›îtyCodes
 
¥›id
, 
ödex
);

208 
LIBMQTT_API
 
MQTTPr›îty
* 
MQTTPr›îtõs_gëPr›îty
(
MQTTPr›îtõs
 *
¥›s
, 
MQTTPr›îtyCodes
 
¥›id
);

217 
LIBMQTT_API
 
MQTTPr›îty
* 
MQTTPr›îtõs_gëPr›îtyAt
(
MQTTPr›îtõs
 *
¥›s
, 
MQTTPr›îtyCodes
 
¥›id
, 
ödex
);

	@/usr/include/MQTTReasonCodes.h

17 #i‡!
deföed
(
MQTTREASONCODES_H
)

18 
	#MQTTREASONCODES_H


	)

20 
	~"MQTTExp‹tDe˛¨©i⁄s.h
"

23 
	eMQTTRós⁄Codes
 {

24 
	mMQTTREASONCODE_SUCCESS
 = 0,

25 
	mMQTTREASONCODE_NORMAL_DISCONNECTION
 = 0,

26 
	mMQTTREASONCODE_GRANTED_QOS_0
 = 0,

27 
	mMQTTREASONCODE_GRANTED_QOS_1
 = 1,

28 
	mMQTTREASONCODE_GRANTED_QOS_2
 = 2,

29 
	mMQTTREASONCODE_DISCONNECT_WITH_WILL_MESSAGE
 = 4,

30 
	mMQTTREASONCODE_NO_MATCHING_SUBSCRIBERS
 = 16,

31 
	mMQTTREASONCODE_NO_SUBSCRIPTION_FOUND
 = 17,

32 
	mMQTTREASONCODE_CONTINUE_AUTHENTICATION
 = 24,

33 
	mMQTTREASONCODE_RE_AUTHENTICATE
 = 25,

34 
	mMQTTREASONCODE_UNSPECIFIED_ERROR
 = 128,

35 
	mMQTTREASONCODE_MALFORMED_PACKET
 = 129,

36 
	mMQTTREASONCODE_PROTOCOL_ERROR
 = 130,

37 
	mMQTTREASONCODE_IMPLEMENTATION_SPECIFIC_ERROR
 = 131,

38 
	mMQTTREASONCODE_UNSUPPORTED_PROTOCOL_VERSION
 = 132,

39 
	mMQTTREASONCODE_CLIENT_IDENTIFIER_NOT_VALID
 = 133,

40 
	mMQTTREASONCODE_BAD_USER_NAME_OR_PASSWORD
 = 134,

41 
	mMQTTREASONCODE_NOT_AUTHORIZED
 = 135,

42 
	mMQTTREASONCODE_SERVER_UNAVAILABLE
 = 136,

43 
	mMQTTREASONCODE_SERVER_BUSY
 = 137,

44 
	mMQTTREASONCODE_BANNED
 = 138,

45 
	mMQTTREASONCODE_SERVER_SHUTTING_DOWN
 = 139,

46 
	mMQTTREASONCODE_BAD_AUTHENTICATION_METHOD
 = 140,

47 
	mMQTTREASONCODE_KEEP_ALIVE_TIMEOUT
 = 141,

48 
	mMQTTREASONCODE_SESSION_TAKEN_OVER
 = 142,

49 
	mMQTTREASONCODE_TOPIC_FILTER_INVALID
 = 143,

50 
	mMQTTREASONCODE_TOPIC_NAME_INVALID
 = 144,

51 
	mMQTTREASONCODE_PACKET_IDENTIFIER_IN_USE
 = 145,

52 
	mMQTTREASONCODE_PACKET_IDENTIFIER_NOT_FOUND
 = 146,

53 
	mMQTTREASONCODE_RECEIVE_MAXIMUM_EXCEEDED
 = 147,

54 
	mMQTTREASONCODE_TOPIC_ALIAS_INVALID
 = 148,

55 
	mMQTTREASONCODE_PACKET_TOO_LARGE
 = 149,

56 
	mMQTTREASONCODE_MESSAGE_RATE_TOO_HIGH
 = 150,

57 
	mMQTTREASONCODE_QUOTA_EXCEEDED
 = 151,

58 
	mMQTTREASONCODE_ADMINISTRATIVE_ACTION
 = 152,

59 
	mMQTTREASONCODE_PAYLOAD_FORMAT_INVALID
 = 153,

60 
	mMQTTREASONCODE_RETAIN_NOT_SUPPORTED
 = 154,

61 
	mMQTTREASONCODE_QOS_NOT_SUPPORTED
 = 155,

62 
	mMQTTREASONCODE_USE_ANOTHER_SERVER
 = 156,

63 
	mMQTTREASONCODE_SERVER_MOVED
 = 157,

64 
	mMQTTREASONCODE_SHARED_SUBSCRIPTIONS_NOT_SUPPORTED
 = 158,

65 
	mMQTTREASONCODE_CONNECTION_RATE_EXCEEDED
 = 159,

66 
	mMQTTREASONCODE_MAXIMUM_CONNECT_TIME
 = 160,

67 
	mMQTTREASONCODE_SUBSCRIPTION_IDENTIFIERS_NOT_SUPPORTED
 = 161,

68 
	mMQTTREASONCODE_WILDCARD_SUBSCRIPTIONS_NOT_SUPPORTED
 = 162

77 
LIBMQTT_API
 c⁄° * 
MQTTRós⁄Code_toSåög
(
MQTTRós⁄Codes
 
vÆue
);

	@/usr/include/MQTTSubscribeOpts.h

17 #i‡!
deföed
(
SUBOPTS_H
)

18 
	#SUBOPTS_H


	)

21 
	sMQTTSubs¸ibe_›ti⁄s


24 
	m°ru˘_id
[4];

27 
	m°ru˘_vîsi⁄
;

31 
	mnoLoˇl
;

36 
	mªèöAsPublished
;

41 
	mªèöH™dlög
;

42 } 
	tMQTTSubs¸ibe_›ti⁄s
;

44 
	#MQTTSubs¸ibe_›ti⁄s_öôülizî
 { {'M', 'Q', 'S', 'O'}, 0, 0, 0, 0 }

	)

	@/usr/include/aio.h

22 #i‚de‡
_AIO_H


23 
	#_AIO_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<sys/ty≥s.h
>

27 
	~<bôs/ty≥s/sigevít_t.h
>

28 
	~<bôs/sigevít-c⁄°s.h
>

29 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

31 
__BEGIN_DECLS


34 
	saiocb


36 
	maio_fûdes
;

37 
	maio_lio_›code
;

38 
	maio_ªq¥io
;

39 vﬁ©ûê*
	maio_buf
;

40 
size_t
 
	maio_nbyãs
;

41 
sigevít
 
	maio_sigevít
;

44 
aiocb
 *
	m__√xt_¥io
;

45 
	m__abs_¥io
;

46 
	m__pﬁicy
;

47 
	m__îr‹_code
;

48 
__ssize_t
 
	m__ªtu∫_vÆue
;

50 #i‚de‡
__USE_FILE_OFFSET64


51 
__off_t
 
	maio_off£t
;

52 
	m__∑d
[ (
__off64_t
Ë-  (
__off_t
)];

54 
__off64_t
 
	maio_off£t
;

56 
	m__glibc_ª£rved
[32];

61 #ifde‡
__USE_LARGEFILE64


62 
	saiocb64


64 
	maio_fûdes
;

65 
	maio_lio_›code
;

66 
	maio_ªq¥io
;

67 vﬁ©ûê*
	maio_buf
;

68 
size_t
 
	maio_nbyãs
;

69 
sigevít
 
	maio_sigevít
;

72 
aiocb
 *
	m__√xt_¥io
;

73 
	m__abs_¥io
;

74 
	m__pﬁicy
;

75 
	m__îr‹_code
;

76 
__ssize_t
 
	m__ªtu∫_vÆue
;

78 
__off64_t
 
	maio_off£t
;

79 
	m__glibc_ª£rved
[32];

84 #ifde‡
__USE_GNU


86 
	saioöô


88 
	maio_thªads
;

89 
	maio_num
;

90 
	maio_locks
;

91 
	maio_u£dba
;

92 
	maio_debug
;

93 
	maio_numu£rs
;

94 
	maio_idÀ_time
;

96 
	maio_ª£rved
;

104 
	mAIO_CANCELED
,

105 
	#AIO_CANCELED
 
AIO_CANCELED


	)

106 
	mAIO_NOTCANCELED
,

107 
	#AIO_NOTCANCELED
 
AIO_NOTCANCELED


	)

108 
	mAIO_ALLDONE


109 
	#AIO_ALLDONE
 
AIO_ALLDONE


	)

116 
	mLIO_READ
,

117 
	#LIO_READ
 
LIO_READ


	)

118 
	mLIO_WRITE
,

119 
	#LIO_WRITE
 
LIO_WRITE


	)

120 
	mLIO_NOP


121 
	#LIO_NOP
 
LIO_NOP


	)

128 
	mLIO_WAIT
,

129 
	#LIO_WAIT
 
LIO_WAIT


	)

130 
	mLIO_NOWAIT


131 
	#LIO_NOWAIT
 
LIO_NOWAIT


	)

136 #ifde‡
__USE_GNU


137 
	$aio_öô
 (c⁄° 
aioöô
 *
__öô
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

141 #i‚de‡
__USE_FILE_OFFSET64


143 
	$aio_ªad
 (
aiocb
 *
__aiocbp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

145 
	$aio_wrôe
 (
aiocb
 *
__aiocbp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

148 
	$lio_li°io
 (
__mode
,

149 
aiocb
 *c⁄° 
__li°
[
__ª°ri˘_¨r
],

150 
__√¡
, 
sigevít
 *
__ª°ri˘
 
__sig
)

151 
__THROW
 
	`__n⁄nuŒ
 ((2));

154 
	$aio_îr‹
 (c⁄° 
aiocb
 *
__aiocbp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

156 
__ssize_t
 
	$aio_ªtu∫
 (
aiocb
 *
__aiocbp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

160 
	$aio_ˇn˚l
 (
__fûdes
, 
aiocb
 *
__aiocbp
Ë
__THROW
;

167 
	$aio_su•íd
 (c⁄° 
aiocb
 *c⁄° 
__li°
[], 
__√¡
,

168 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
)

169 
	`__n⁄nuŒ
 ((1));

173 
	$aio_fsync
 (
__›î©i⁄
, 
aiocb
 *
__aiocbp
)

174 
__THROW
 
	`__n⁄nuŒ
 ((2));

176 #ifde‡
__REDIRECT_NTH


177 
	`__REDIRECT_NTH
 (
aio_ªad
, (
aiocb
 *
__aiocbp
), 
aio_ªad64
)

178 
	`__n⁄nuŒ
 ((1));

179 
	`__REDIRECT_NTH
 (
aio_wrôe
, (
aiocb
 *
__aiocbp
), 
aio_wrôe64
)

180 
	`__n⁄nuŒ
 ((1));

182 
	`__REDIRECT_NTH
 (
lio_li°io
,

183 (
__mode
,

184 
aiocb
 *c⁄° 
__li°
[
__ª°ri˘_¨r
],

185 
__√¡
, 
sigevít
 *
__ª°ri˘
 
__sig
),

186 
lio_li°io64
Ë
	`__n⁄nuŒ
 ((2));

188 
	`__REDIRECT_NTH
 (
aio_îr‹
, (c⁄° 
aiocb
 *
__aiocbp
),

189 
aio_îr‹64
Ë
	`__n⁄nuŒ
 ((1));

190 
__ssize_t
 
	`__REDIRECT_NTH
 (
aio_ªtu∫
, (
aiocb
 *
__aiocbp
),

191 
aio_ªtu∫64
Ë
	`__n⁄nuŒ
 ((1));

193 
	`__REDIRECT_NTH
 (
aio_ˇn˚l
,

194 (
__fûdes
, 
aiocb
 *
__aiocbp
),

195 
aio_ˇn˚l64
);

196 #ifde‡
__USE_TIME_BITS64


197 
	`__REDIRECT_NTH
 (
aio_su•íd
,

198 (c⁄° 
aiocb
 *c⁄° 
__li°
[], 
__√¡
,

199 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
),

200 
__aio_su•íd_time64
Ë
	`__n⁄nuŒ
 ((1));

202 
	`__REDIRECT_NTH
 (
aio_su•íd
,

203 (c⁄° 
aiocb
 *c⁄° 
__li°
[], 
__√¡
,

204 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
),

205 
aio_su•íd64
Ë
	`__n⁄nuŒ
 ((1));

207 
	`__REDIRECT_NTH
 (
aio_fsync
,

208 (
__›î©i⁄
, 
aiocb
 *
__aiocbp
),

209 
aio_fsync64
Ë
	`__n⁄nuŒ
 ((2));

212 
	#aio_ªad
 
aio_ªad64


	)

213 
	#aio_wrôe
 
aio_wrôe64


	)

214 
	#lio_li°io
 
lio_li°io64


	)

215 
	#aio_îr‹
 
aio_îr‹64


	)

216 
	#aio_ªtu∫
 
aio_ªtu∫64


	)

217 
	#aio_ˇn˚l
 
aio_ˇn˚l64


	)

218 #ifde‡
__USE_TIME_BITS64


219 
	#aio_su•íd
 
__aio_su•íd_time64


	)

221 
	#aio_su•íd
 
aio_su•íd64


	)

223 
	#aio_fsync
 
aio_fsync64


	)

227 #ifde‡
__USE_LARGEFILE64


228 
	$aio_ªad64
 (
aiocb64
 *
__aiocbp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

229 
	$aio_wrôe64
 (
aiocb64
 *
__aiocbp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

231 
	$lio_li°io64
 (
__mode
,

232 
aiocb64
 *c⁄° 
__li°
[
__ª°ri˘_¨r
],

233 
__√¡
, 
sigevít
 *
__ª°ri˘
 
__sig
)

234 
__THROW
 
	`__n⁄nuŒ
 ((2));

236 
	$aio_îr‹64
 (c⁄° 
aiocb64
 *
__aiocbp
)

237 
__THROW
 
	`__n⁄nuŒ
 ((1));

238 
__ssize_t
 
	$aio_ªtu∫64
 (
aiocb64
 *
__aiocbp
)

239 
__THROW
 
	`__n⁄nuŒ
 ((1));

241 
	$aio_ˇn˚l64
 (
__fûdes
, 
aiocb64
 *
__aiocbp
Ë
__THROW
;

243 
	$aio_su•íd64
 (c⁄° 
aiocb64
 *c⁄° 
__li°
[], 
__√¡
,

244 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
)

245 
__THROW
 
	`__n⁄nuŒ
 ((1));

247 
	$aio_fsync64
 (
__›î©i⁄
, 
aiocb64
 *
__aiocbp
)

248 
__THROW
 
	`__n⁄nuŒ
 ((2));

251 
__END_DECLS


	@/usr/include/aliases.h

18 #i‚de‡
_ALIASES_H


19 
	#_ALIASES_H
 1

	)

21 
	~<„©uªs.h
>

23 
	~<sys/ty≥s.h
>

26 
__BEGIN_DECLS


29 
	sÆü£¡


31 *
	mÆüs_«me
;

32 
size_t
 
	mÆüs_membîs_Àn
;

33 **
	mÆüs_membîs
;

34 
	mÆüs_loˇl
;

39 
	$£èlü£¡
 (Ë
__THROW
;

42 
	$ídÆü£¡
 (Ë
__THROW
;

45 
Æü£¡
 *
	$gëÆü£¡
 (Ë
__THROW
;

48 
	$gëÆü£¡_r
 (
Æü£¡
 *
__ª°ri˘
 
__ªsu…_buf
,

49 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

50 
Æü£¡
 **
__ª°ri˘
 
__ªsu…
Ë
__THROW
;

53 
Æü£¡
 *
	$gëÆüsby«me
 (c⁄° *
__«me
Ë
__THROW
;

56 
	$gëÆüsby«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

57 
Æü£¡
 *
__ª°ri˘
 
__ªsu…_buf
,

58 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

59 
Æü£¡
 **
__ª°ri˘
 
__ªsu…
Ë
__THROW
;

61 
__END_DECLS


	@/usr/include/alloca.h

18 #i‚def 
_ALLOCA_H


19 
	#_ALLOCA_H
 1

	)

21 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

26 
	g__BEGIN_DECLS


29 #unde‡
Æloˇ


32 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

34 #ifdef 
__GNUC__


35 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

38 
__END_DECLS


	@/usr/include/ar.h

19 #i‚de‡
_AR_H


20 
	#_AR_H
 1

	)

22 
	~<sys/cdefs.h
>

28 
	#ARMAG
 "!<¨ch>\n"

	)

29 
	#SARMAG
 8

	)

31 
	#ARFMAG
 "`\n"

	)

33 
__BEGIN_DECLS


35 
	s¨_hdr


37 
	m¨_«me
[16];

38 
	m¨_d©e
[12];

39 
	m¨_uid
[6], 
	m¨_gid
[6];

40 
	m¨_mode
[8];

41 
	m¨_size
[10];

42 
	m¨_fmag
[2];

45 
	g__END_DECLS


	@/usr/include/argp.h

20 #i‚de‡
_ARGP_H


21 
	#_ARGP_H


	)

23 
	~<°dio.h
>

24 
	~<˘y≥.h
>

25 
	~<gë›t.h
>

26 
	~<limôs.h
>

27 
	~<î∫o.h
>

29 
	g__BEGIN_DECLS


33 #i‚de‡
__îr‹_t_deföed


34 
	#__îr‹_t_deföed
 1

	)

35 
	tîr‹_t
;

43 
	s¨gp_›ti⁄


47 c⁄° *
	m«me
;

51 
	mkey
;

55 c⁄° *
	m¨g
;

58 
	mÊags
;

64 c⁄° *
	mdoc
;

73 
	mgroup
;

77 
	#OPTION_ARG_OPTIONAL
 0x1

	)

80 
	#OPTION_HIDDEN
 0x2

	)

85 
	#OPTION_ALIAS
 0x4

	)

97 
	#OPTION_DOC
 0x8

	)

106 
	#OPTION_NO_USAGE
 0x10

	)

108 
	g¨gp
;

109 
	g¨gp_°©e
;

110 
	g¨gp_chûd
;

113 
	$îr‹_t
 (*
	t¨gp_∑r£r_t
Ë(
	t__key
, *
	t__¨g
,

114 
	t¨gp_°©e
 *
	t__°©e
);

121 
	#ARGP_ERR_UNKNOWN
 
E2BIG


	)

149 
	#ARGP_KEY_ARG
 0

	)

155 
	#ARGP_KEY_ARGS
 0x1000006

	)

157 
	#ARGP_KEY_END
 0x1000001

	)

163 
	#ARGP_KEY_NO_ARGS
 0x1000002

	)

167 
	#ARGP_KEY_INIT
 0x1000003

	)

169 
	#ARGP_KEY_FINI
 0x1000007

	)

172 
	#ARGP_KEY_SUCCESS
 0x1000004

	)

174 
	#ARGP_KEY_ERROR
 0x1000005

	)

182 
	s¨gp


186 c⁄° 
¨gp_›ti⁄
 *
›ti⁄s
;

195 
¨gp_∑r£r_t
 
∑r£r
;

202 c⁄° *
¨gs_doc
;

207 c⁄° *
doc
;

215 c⁄° 
¨gp_chûd
 *
chûdªn
;

227 *(*
hñp_fûãr
Ë(
__key
, c⁄° *
__ãxt
, *
__öput
);

232 c⁄° *
¨gp_domaö
;

236 
	#ARGP_KEY_HELP_PRE_DOC
 0x2000001

	)

237 
	#ARGP_KEY_HELP_POST_DOC
 0x2000002

	)

238 
	#ARGP_KEY_HELP_HEADER
 0x2000003

	)

239 
	#ARGP_KEY_HELP_EXTRA
 0x2000004

	)

243 
	#ARGP_KEY_HELP_DUP_ARGS_NOTE
 0x2000005

	)

244 
	#ARGP_KEY_HELP_ARGS_DOC
 0x2000006

	)

248 
	s¨gp_chûd


251 c⁄° 
¨gp
 *argp;

254 
Êags
;

260 c⁄° *
hódî
;

268 
group
;

273 
	s¨gp_°©e


276 c⁄° 
¨gp
 *
roŸ_¨gp
;

279 
¨gc
;

280 **
¨gv
;

283 
√xt
;

286 
Êags
;

292 
¨g_num
;

297 
quŸed
;

300 *
öput
;

303 **
chûd_öputs
;

306 *
hook
;

310 *
«me
;

313 
FILE
 *
îr_°ªam
;

314 
FILE
 *
out_°ªam
;

316 *
p°©e
;

326 
	#ARGP_PARSE_ARGV0
 0x01

	)

332 
	#ARGP_NO_ERRS
 0x02

	)

344 
	#ARGP_NO_ARGS
 0x04

	)

348 
	#ARGP_IN_ORDER
 0x08

	)

352 
	#ARGP_NO_HELP
 0x10

	)

355 
	#ARGP_NO_EXIT
 0x20

	)

358 
	#ARGP_LONG_ONLY
 0x40

	)

361 
	#ARGP_SILENT
 (
ARGP_NO_EXIT
 | 
ARGP_NO_ERRS
 | 
ARGP_NO_HELP
)

	)

370 
îr‹_t
 
	`¨gp_∑r£
 (c⁄° 
¨gp
 *
__ª°ri˘
 
__¨gp
,

371 
__¨gc
, **
__ª°ri˘
 
__¨gv
,

372 
__Êags
, *
__ª°ri˘
 
__¨g_ödex
,

373 *
__ª°ri˘
 
__öput
);

374 
îr‹_t
 
	`__¨gp_∑r£
 (c⁄° 
¨gp
 *
__ª°ri˘
 
__¨gp
,

375 
__¨gc
, **
__ª°ri˘
 
__¨gv
,

376 
__Êags
, *
__ª°ri˘
 
__¨g_ödex
,

377 *
__ª°ri˘
 
__öput
);

385 c⁄° *
¨gp_¥ogøm_vîsi⁄
;

392 (*
¨gp_¥ogøm_vîsi⁄_hook
Ë(
FILE
 *
__ª°ri˘
 
__°ªam
,

393 
¨gp_°©e
 *
__ª°ri˘


394 
__°©e
);

401 c⁄° *
¨gp_¥ogøm_bug_addªss
;

406 
îr‹_t
 
¨gp_îr_exô_°©us
;

409 
	#ARGP_HELP_USAGE
 0x01

	)

410 
	#ARGP_HELP_SHORT_USAGE
 0x02

	)

411 
	#ARGP_HELP_SEE
 0x04

	)

412 
	#ARGP_HELP_LONG
 0x08

	)

413 
	#ARGP_HELP_PRE_DOC
 0x10

	)

414 
	#ARGP_HELP_POST_DOC
 0x20

	)

415 
	#ARGP_HELP_DOC
 (
ARGP_HELP_PRE_DOC
 | 
ARGP_HELP_POST_DOC
)

	)

416 
	#ARGP_HELP_BUG_ADDR
 0x40

	)

417 
	#ARGP_HELP_LONG_ONLY
 0x80

	)

421 
	#ARGP_HELP_EXIT_ERR
 0x100

	)

422 
	#ARGP_HELP_EXIT_OK
 0x200

	)

426 
	#ARGP_HELP_STD_ERR
 \

427 (
ARGP_HELP_SEE
 | 
ARGP_HELP_EXIT_ERR
)

	)

430 
	#ARGP_HELP_STD_USAGE
 \

431 (
ARGP_HELP_SHORT_USAGE
 | 
ARGP_HELP_SEE
 | 
ARGP_HELP_EXIT_ERR
)

	)

433 
	#ARGP_HELP_STD_HELP
 \

434 (
ARGP_HELP_SHORT_USAGE
 | 
ARGP_HELP_LONG
 | 
ARGP_HELP_EXIT_OK
 \

435 | 
ARGP_HELP_DOC
 | 
ARGP_HELP_BUG_ADDR
)

	)

439 
	`¨gp_hñp
 (c⁄° 
¨gp
 *
__ª°ri˘
 
__¨gp
,

440 
FILE
 *
__ª°ri˘
 
__°ªam
,

441 
__Êags
, *
__ª°ri˘
 
__«me
);

442 
	`__¨gp_hñp
 (c⁄° 
¨gp
 *
__ª°ri˘
 
__¨gp
,

443 
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êags
,

444 *
__«me
);

456 
	`¨gp_°©e_hñp
 (c⁄° 
¨gp_°©e
 *
__ª°ri˘
 
__°©e
,

457 
FILE
 *
__ª°ri˘
 
__°ªam
,

458 
__Êags
);

459 
	`__¨gp_°©e_hñp
 (c⁄° 
¨gp_°©e
 *
__ª°ri˘
 
__°©e
,

460 
FILE
 *
__ª°ri˘
 
__°ªam
,

461 
__Êags
);

464 
	`¨gp_ußge
 (c⁄° 
¨gp_°©e
 *
__°©e
);

465 
	`__¨gp_ußge
 (c⁄° 
¨gp_°©e
 *
__°©e
);

470 
	$¨gp_îr‹
 (c⁄° 
¨gp_°©e
 *
__ª°ri˘
 
__°©e
,

471 c⁄° *
__ª°ri˘
 
__fmt
, ...)

472 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

473 
	$__¨gp_îr‹
 (c⁄° 
¨gp_°©e
 *
__ª°ri˘
 
__°©e
,

474 c⁄° *
__ª°ri˘
 
__fmt
, ...)

475 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

485 
	$¨gp_Áûuª
 (c⁄° 
¨gp_°©e
 *
__ª°ri˘
 
__°©e
,

486 
__°©us
, 
__î∫um
,

487 c⁄° *
__ª°ri˘
 
__fmt
, ...)

488 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 4, 5)));

489 
	$__¨gp_Áûuª
 (c⁄° 
¨gp_°©e
 *
__ª°ri˘
 
__°©e
,

490 
__°©us
, 
__î∫um
,

491 c⁄° *
__ª°ri˘
 
__fmt
, ...)

492 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 4, 5)));

495 
	$_›ti⁄_is_sh‹t
 (c⁄° 
¨gp_›ti⁄
 *
__›t
Ë
__THROW
;

496 
	$__›ti⁄_is_sh‹t
 (c⁄° 
¨gp_›ti⁄
 *
__›t
Ë
__THROW
;

500 
	$_›ti⁄_is_íd
 (c⁄° 
¨gp_›ti⁄
 *
__›t
Ë
__THROW
;

501 
	$__›ti⁄_is_íd
 (c⁄° 
¨gp_›ti⁄
 *
__›t
Ë
__THROW
;

505 *
	$_¨gp_öput
 (c⁄° 
¨gp
 *
__ª°ri˘
 
__¨gp
,

506 c⁄° 
¨gp_°©e
 *
__ª°ri˘
 
__°©e
)

507 
__THROW
;

508 *
	$__¨gp_öput
 (c⁄° 
¨gp
 *
__ª°ri˘
 
__¨gp
,

509 c⁄° 
¨gp_°©e
 *
__ª°ri˘
 
__°©e
)

510 
__THROW
;

512 #ifde‡
__USE_EXTERN_INLINES


514 #i‡!(
deföed
 
_LIBC
 && _LIBC)

515 
	#__¨gp_ußge
 
¨gp_ußge


	)

516 
	#__¨gp_°©e_hñp
 
¨gp_°©e_hñp


	)

517 
	#__›ti⁄_is_sh‹t
 
_›ti⁄_is_sh‹t


	)

518 
	#__›ti⁄_is_íd
 
_›ti⁄_is_íd


	)

521 #i‚de‡
ARGP_EI


522 
	#ARGP_EI
 
__exã∫_ölöe


	)

525 
ARGP_EI
 

526 
	$__¨gp_ußge
 (c⁄° 
¨gp_°©e
 *
__°©e
)

528 
	`__¨gp_°©e_hñp
 (
__°©e
, 
°dîr
, 
ARGP_HELP_STD_USAGE
);

529 
	}
}

531 
ARGP_EI
 

532 
__NTH
 (
	$__›ti⁄_is_sh‹t
 (c⁄° 
¨gp_›ti⁄
 *
__›t
))

534 i‡(
__›t
->
Êags
 & 
OPTION_DOC
)

538 
__key
 = 
__›t
->
key
;

539  
__key
 > 0 && __key <
UCHAR_MAX
 && 
	`i•röt
 (__key);

541 
	}
}

543 
ARGP_EI
 

544 
__NTH
 (
	$__›ti⁄_is_íd
 (c⁄° 
¨gp_›ti⁄
 *
__›t
))

546  !
__›t
->
key
 && !__›t->
«me
 && !__›t->
doc
 && !__›t->
group
;

547 
	}
}

549 #i‡!(
deföed
 
_LIBC
 && _LIBC)

550 #unde‡
__¨gp_ußge


551 #unde‡
__¨gp_°©e_hñp


552 #unde‡
__›ti⁄_is_sh‹t


553 #unde‡
__›ti⁄_is_íd


557 
	~<bôs/Êﬂä.h
>

558 #i‡
deföed
 
__LDBL_COMPAT
 || 
__LDOUBLE_REDIRECTS_TO_FLOAT128_ABI
 == 1

559 
	~<bôs/¨gp-ldbl.h
>

562 
	g__END_DECLS


	@/usr/include/argz.h

19 #i‚de‡
_ARGZ_H


20 
	#_ARGZ_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<î∫o.h
>

24 
	~<°rög.h
>

26 
	g__BEGIN_DECLS


30 #i‚de‡
__îr‹_t_deföed


31 
	#__îr‹_t_deföed
 1

	)

32 
	tîr‹_t
;

38 
îr‹_t
 
	$__¨gz_¸óã
 (*c⁄° 
__¨gv
[], **
__ª°ri˘
 
__¨gz
,

39 
size_t
 *
__ª°ri˘
 
__Àn
Ë
__THROW
;

40 
îr‹_t
 
	$¨gz_¸óã
 (*c⁄° 
__¨gv
[], **
__ª°ri˘
 
__¨gz
,

41 
size_t
 *
__ª°ri˘
 
__Àn
Ë
__THROW
;

47 
îr‹_t
 
	$¨gz_¸óã_£p
 (c⁄° *
__ª°ri˘
 
__°rög
,

48 
__£p
, **
__ª°ri˘
 
__¨gz
,

49 
size_t
 *
__ª°ri˘
 
__Àn
Ë
__THROW
;

52 
size_t
 
	$__¨gz_cou¡
 (c⁄° *
__¨gz
, 
size_t
 
__Àn
)

53 
__THROW
 
__©åibuã_puª__
;

54 
size_t
 
	$¨gz_cou¡
 (c⁄° *
__¨gz
, 
size_t
 
__Àn
)

55 
__THROW
 
__©åibuã_puª__
;

59 
	$__¨gz_exåa˘
 (c⁄° *
__ª°ri˘
 
__¨gz
, 
size_t
 
__Àn
,

60 **
__ª°ri˘
 
__¨gv
Ë
__THROW
;

61 
	$¨gz_exåa˘
 (c⁄° *
__ª°ri˘
 
__¨gz
, 
size_t
 
__Àn
,

62 **
__ª°ri˘
 
__¨gv
Ë
__THROW
;

66 
	$__¨gz_°rögify
 (*
__¨gz
, 
size_t
 
__Àn
, 
__£p
Ë
__THROW
;

67 
	$¨gz_°rögify
 (*
__¨gz
, 
size_t
 
__Àn
, 
__£p
Ë
__THROW
;

70 
îr‹_t
 
	$¨gz_≠≥nd
 (**
__ª°ri˘
 
__¨gz
,

71 
size_t
 *
__ª°ri˘
 
__¨gz_Àn
,

72 c⁄° *
__ª°ri˘
 
__buf
, 
size_t
 
__buf_Àn
)

73 
__THROW
;

76 
îr‹_t
 
	$¨gz_add
 (**
__ª°ri˘
 
__¨gz
,

77 
size_t
 *
__ª°ri˘
 
__¨gz_Àn
,

78 c⁄° *
__ª°ri˘
 
__°r
Ë
__THROW
;

82 
îr‹_t
 
	$¨gz_add_£p
 (**
__ª°ri˘
 
__¨gz
,

83 
size_t
 *
__ª°ri˘
 
__¨gz_Àn
,

84 c⁄° *
__ª°ri˘
 
__°rög
, 
__dñim
)

85 
__THROW
;

88 
	$¨gz_dñëe
 (**
__ª°ri˘
 
__¨gz
,

89 
size_t
 *
__ª°ri˘
 
__¨gz_Àn
,

90 *
__ª°ri˘
 
__íåy
Ë
__THROW
;

98 
îr‹_t
 
	$¨gz_ö£π
 (**
__ª°ri˘
 
__¨gz
,

99 
size_t
 *
__ª°ri˘
 
__¨gz_Àn
,

100 *
__ª°ri˘
 
__bef‹e
,

101 c⁄° *
__ª°ri˘
 
__íåy
Ë
__THROW
;

106 
îr‹_t
 
	`¨gz_ª∂a˚
 (**
__ª°ri˘
 
__¨gz
,

107 
size_t
 *
__ª°ri˘
 
__¨gz_Àn
,

108 c⁄° *
__ª°ri˘
 
__°r
,

109 c⁄° *
__ª°ri˘
 
__wôh
,

110 *
__ª°ri˘
 
__ª∂a˚_cou¡
);

126 *
	$__¨gz_√xt
 (c⁄° *
__ª°ri˘
 
__¨gz
, 
size_t
 
__¨gz_Àn
,

127 c⁄° *
__ª°ri˘
 
__íåy
Ë
__THROW
;

128 *
	$¨gz_√xt
 (c⁄° *
__ª°ri˘
 
__¨gz
, 
size_t
 
__¨gz_Àn
,

129 c⁄° *
__ª°ri˘
 
__íåy
Ë
__THROW
;

131 #ifde‡
__USE_EXTERN_INLINES


132 
__exã∫_ölöe
 *

133 
	`__NTH
 (
	$__¨gz_√xt
 (c⁄° *
__¨gz
, 
size_t
 
__¨gz_Àn
,

134 c⁄° *
__íåy
))

136 i‡(
__íåy
)

138 i‡(
__íåy
 < 
__¨gz
 + 
__¨gz_Àn
)

139 
__íåy
 = 
	`°rchr
 (__entry, '\0') + 1;

141  
__íåy
 >
__¨gz
 + 
__¨gz_Àn
 ? (*Ë
NULL
 : (*) __entry;

144  
__¨gz_Àn
 > 0 ? (*Ë
__¨gz
 : 0;

145 
	}
}

146 
__exã∫_ölöe
 *

147 
__NTH
 (
	$¨gz_√xt
 (c⁄° *
__¨gz
, 
size_t
 
__¨gz_Àn
,

148 c⁄° *
__íåy
))

150  
	`__¨gz_√xt
 (
__¨gz
, 
__¨gz_Àn
, 
__íåy
);

151 
	}
}

154 
	g__END_DECLS


	@/usr/include/assert.h

22 #ifdef 
_ASSERT_H


24 #unde‡
_ASSERT_H


25 #unde‡
as£π


26 #unde‡
__ASSERT_VOID_CAST


28 #ifdef 
__USE_GNU


29 #unde‡
as£π_≥º‹


34 
	#_ASSERT_H
 1

	)

35 
	~<„©uªs.h
>

37 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,95)

38 
	#__ASSERT_VOID_CAST
 
°©ic_ˇ°
<>

	)

40 
	#__ASSERT_VOID_CAST
 ()

	)

48 #ifdef 
NDEBUG


50 
	#as£π
(
ex¥
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

58 #ifdef 
__USE_GNU


59 
	#as£π_≥º‹
(
î∫um
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

64 #i‚de‡
_ASSERT_H_DECLS


65 
	#_ASSERT_H_DECLS


	)

66 
__BEGIN_DECLS


69 
	$__as£π_Áû
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
,

70 
__löe
, c⁄° *
__fun˘i⁄
)

71 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

74 
	$__as£π_≥º‹_Áû
 (
__î∫um
, c⁄° *
__fûe
,

75 
__löe
, c⁄° *
__fun˘i⁄
)

76 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

81 
	$__as£π
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
, 
__löe
)

82 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

85 
__END_DECLS


91 #i‡
deföed
 
__˝lu•lus


92 
	#as£π
(
ex¥
) \

93 (
°©ic_ˇ°
 <
boﬁ
> (
ex¥
) \

95 : 
	`__as£π_Áû
 (#ex¥, 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

96 #ñi‡!
deföed
 
__GNUC__
 || deföed 
__STRICT_ANSI__


97 
	#as£π
(
ex¥
) \

98 ((
ex¥
) \

99 ? 
	`__ASSERT_VOID_CAST
 (0) \

100 : 
	`__as£π_Áû
 (#ex¥, 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

107 
	#as£π
(
ex¥
) \

108 ((Ë ((
ex¥
Ë? 1 : 0), 
	`__exãnsi⁄__
 ({ \

109 i‡(
ex¥
) \

112 
	`__as£π_Áû
 (#ex¥, 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
); \

113 
	}
}))

	)

116 #ifdef 
__USE_GNU


117 
	#as£π_≥º‹
(
î∫um
) \

118 (!(
î∫um
) \

119 ? 
	`__ASSERT_VOID_CAST
 (0) \

120 : 
	`__as£π_≥º‹_Áû
 ((
î∫um
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

128 #i‡
deföed
 
__˝lu•lus
 ? 
__GNUC_PREREQ
 (2, 6) : __GNUC_PREREQ (2, 4)

129 
	#__ASSERT_FUNCTION
 
__exãnsi⁄__
 
__PRETTY_FUNCTION__


	)

131 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

132 
	#__ASSERT_FUNCTION
 
__func__


	)

134 
	#__ASSERT_FUNCTION
 ((c⁄° *Ë0)

	)

141 #i‡
deföed
 
__USE_ISOC11
 && !deföed 
__˝lu•lus


142 #unde‡
°©ic_as£π


143 
	#°©ic_as£π
 
_Sètic_as£π


	)

	@/usr/include/byteswap.h

19 #i‚de‡
_BYTESWAP_H


20 
	#_BYTESWAP_H
 1

	)

22 
	~<„©uªs.h
>

25 
	~<bôs/byãsw≠.h
>

32 
	#bsw≠_16
(
x
Ë
	`__bsw≠_16
 (x)

	)

35 
	#bsw≠_32
(
x
Ë
	`__bsw≠_32
 (x)

	)

38 
	#bsw≠_64
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/clif.h

9 #i‚de‡
_CLIF_H


10 
	#_CLIF_H


	)

13 
CLIF_›ti⁄_°ru˘
 
	tCLIF_›ti⁄
;

14 
	sCLIF_›ti⁄_°ru˘
 {

15 c⁄° *
	msh‹t_›t
;

16 c⁄° *
	ml⁄g_›t
;

17 c⁄° *
	m¨g_«me
;

18 c⁄° *
	mhñp_°rög
;

19 (*
	mfun˘i⁄
Ë(
CLIF_›ti⁄
 *
	m›ä
, *
	m¨g
);

20 *
	md©a
;

21 (*
	mfun˘i⁄_∂us
Ë(
CLIF_›ti⁄
 *
	m›ä
, *
	m¨g
);

22 
	mÊags
;

24 
	#CLIF_END_OPTION
 { 0, 0, 0, 0, 0, 0, 0, 0 }

	)

26 
CLIF_¨gumít_°ru˘
 
	tCLIF_¨gumít
;

27 
	sCLIF_¨gumít_°ru˘
 {

28 c⁄° *
	m«me
;

29 c⁄° *
	mhñp_°rög
;

30 (*
	mfun˘i⁄
Ë(
CLIF_¨gumít
 *
	m¨gm
, *
	m¨g
, 
	mödex
);

31 *
	md©a
;

32 
	mÊags
;

34 
	#CLIF_END_ARGUMENT
 { 0, 0, 0, 0, 0 }

	)

37 
	#CLIF_MORE
 (0x01Ë

	)

38 
	#CLIF_STRICT
 (0x02Ë

	)

39 
	#CLIF_ACC_PREV
 (0x04Ë

	)

45 
	#CLIF_EXTRA
 (0x0001Ë

	)

46 
	#CLIF_EXIT
 (0x0002Ë

	)

47 
	#CLIF_EXCL
 (0x0004Ë

	)

53 
	#CLIF_MAY_JOIN_ARG
 (0x0010)

	)

54 
	#_CLIF_STRICT_JOIN_ARG
 (0x0020)

	)

55 
	#CLIF_JOIN_ARG
 (
CLIF_MAY_JOIN_ARG
|
_CLIF_STRICT_JOIN_ARG
)

	)

56 
	#CLIF_MAY_NOEQUAL
 (0x0040)

	)

57 
	#_CLIF_STRICT_NOEQUAL
 (0x0080)

	)

58 
	#CLIF_NOEQUAL
 (
CLIF_MAY_NOEQUAL
|
_CLIF_STRICT_NOEQUAL
)

	)

59 
	#CLIF_MAY_KEYWORD
 (0x0100)

	)

60 
	#_CLIF_STRICT_KEYWORD
 (0x0200)

	)

61 
	#CLIF_KEYWORD
 (
CLIF_MAY_KEYWORD
|
_CLIF_STRICT_KEYWORD
)

	)

62 
	#CLIF_MAY_ONEDASH
 (0x0400)

	)

63 
	#_CLIF_STRICT_ONEDASH
 (0x0800)

	)

64 
	#CLIF_ONEDASH
 (
CLIF_MAY_ONEDASH
|
_CLIF_STRICT_ONEDASH
)

	)

65 
	#CLIF_OPTARG
 (0x1000Ë

	)

66 
	#CLIF_ABBREV
 (0x2000Ë

	)

67 
	#CLIF_SEVERAL
 (0x4000Ë

	)

70 
	#CLIF_HELP_EMPTY
 (0x10000Ë

	)

71 
	#CLIF_POSIX
 (0x20000Ë

	)

72 
	#CLIF_FIRST_GROUP
 (0x40000Ë

	)

73 
	#CLIF_STRICT_EXCL
 (0x80000Ë

	)

74 
	#CLIF_SILENT
 (0x100000Ë

	)

76 
	#CLIF_MIN_ABBREV
 2

	)

79 
CLIF_∑r£
 (
¨gc
, **
¨gv
, 
CLIF_›ti⁄
 *
›ti⁄_li°
,

80 
CLIF_¨gumít
 *
¨g_li°
, 
∑r£_Êags
);

82 
	#CLIF_∑r£_cmdlöe
(
ARGC
,
ARGV
,
OPTN
,
ARGS
,
FLAGS
) \

83 
	`CLIF_∑r£
 (
ARGC
, 
ARGV
, 
OPTN
, 
ARGS
, 
FLAGS
)

	)

85 
CLIF_¥öt_›ti⁄s
 (c⁄° *
hódî
,

86 c⁄° 
CLIF_›ti⁄
 *
›ti⁄_li°
);

87 
CLIF_¥öt_¨gumíts
 (c⁄° *
hódî
,

88 c⁄° 
CLIF_¨gumít
 *
¨gumít_li°
);

89 
CLIF_¥öt_ußge
 (c⁄° *
hódî
, c⁄° *
¥og«me
,

90 c⁄° 
CLIF_›ti⁄
 *
›ti⁄_li°
,

91 c⁄° 
CLIF_¨gumít
 *
¨gumít_li°
);

93 
CLIF_cuºít_hñp
 ();

96 
CLIF_vîsi⁄_h™dÀr
 (
CLIF_›ti⁄
 *
›ä
, *
¨g
);

97 
CLIF_£t_Êag
 (
CLIF_›ti⁄
 *
›ä
, *
¨g
);

98 
CLIF_un£t_Êag
 (
CLIF_›ti⁄
 *
›ä
, *
¨g
);

99 
CLIF_£t_°rög
 (
CLIF_›ti⁄
 *
›ä
, *
¨g
);

100 
CLIF_£t_öt
 (
CLIF_›ti⁄
 *
›ä
, *
¨g
);

101 
CLIF_£t_uöt
 (
CLIF_›ti⁄
 *
›ä
, *
¨g
);

102 
CLIF_£t_doubÀ
 (
CLIF_›ti⁄
 *
›ä
, *
¨g
);

103 
CLIF_ˇŒ_func
 (
CLIF_›ti⁄
 *
›ä
, *
¨g
);

105 
CLIF_¨g_°rög
 (
CLIF_¨gumít
 *
¨gm
, *
¨g
, 
ödex
);

106 
CLIF_¨g_öt
 (
CLIF_¨gumít
 *
¨gm
, *
¨g
, 
ödex
);

107 
CLIF_¨g_uöt
 (
CLIF_¨gumít
 *
¨gm
, *
¨g
, 
ödex
);

108 
CLIF_¨g_doubÀ
 (
CLIF_¨gumít
 *
¨gm
, *
¨g
, 
ödex
);

109 
CLIF_¨g_func
 (
CLIF_¨gumít
 *
¨gm
, *
¨g
, 
ödex
);

114 
	#CLIF_HELP_OPTION
 \

116 
CLIF_ˇŒ_func
, 
CLIF_cuºít_hñp
, 0, 
CLIF_EXTRA
 | 
CLIF_EXIT
 }

	)

117 
	#CLIF_VERSION_OPTION
(
STR
) \

119 
CLIF_vîsi⁄_h™dÀr
, 
STR
, 0, 
CLIF_EXTRA
 | 
CLIF_EXIT
 }

	)

	@/usr/include/complex.h

22 #i‚de‡
_COMPLEX_H


23 
	#_COMPLEX_H
 1

	)

25 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

26 
	~<bôs/libc-hódî-°¨t.h
>

29 
	~<bôs/m©hdef.h
>

32 
	~<bôs/Êﬂä.h
>

34 
	g__BEGIN_DECLS


39 #i‡
__GNUC_PREREQ
 (2, 7) && !__GNUC_PREREQ (2, 97)

40 
	#_Com∂ex
 
__com∂ex__


	)

43 
	#com∂ex
 
_Com∂ex


	)

48 
	#_Com∂ex_I
 (
__exãnsi⁄__
 1.0
iF
)

	)

52 #unde‡
I


53 
	#I
 
_Com∂ex_I


	)

55 #i‡
deföed
 
__USE_ISOC11
 && 
__GNUC_PREREQ
 (4, 7)

57 
	#CMPLX
(
x
, 
y
Ë
	`__buûtö_com∂ex
 ((Ë(x), (Ë(y))

	)

58 
	#CMPLXF
(
x
, 
y
Ë
	`__buûtö_com∂ex
 ((Ë(x), (Ë(y))

	)

59 
	#CMPLXL
(
x
, 
y
Ë
	`__buûtö_com∂ex
 ((Ë(x), (Ë(y))

	)

62 #i‡
__HAVE_FLOAT16
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

63 
	#CMPLXF16
(
x
, 
y
Ë
	`__buûtö_com∂ex
 ((
_Flﬂt16
Ë(x), (_Flﬂt16Ë(y))

	)

66 #i‡
__HAVE_FLOAT32
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

67 
	#CMPLXF32
(
x
, 
y
Ë
	`__buûtö_com∂ex
 ((
_Flﬂt32
Ë(x), (_Flﬂt32Ë(y))

	)

70 #i‡
__HAVE_FLOAT64
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

71 
	#CMPLXF64
(
x
, 
y
Ë
	`__buûtö_com∂ex
 ((
_Flﬂt64
Ë(x), (_Flﬂt64Ë(y))

	)

74 #i‡
__HAVE_FLOAT128
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

75 
	#CMPLXF128
(
x
, 
y
Ë
	`__buûtö_com∂ex
 ((
_Flﬂt128
Ë(x), (_Flﬂt128Ë(y))

	)

78 #i‡
__HAVE_FLOAT32X
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

79 
	#CMPLXF32X
(
x
, 
y
Ë
	`__buûtö_com∂ex
 ((
_Flﬂt32x
Ë(x), (_Flﬂt32xË(y))

	)

82 #i‡
__HAVE_FLOAT64X
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

83 
	#CMPLXF64X
(
x
, 
y
Ë
	`__buûtö_com∂ex
 ((
_Flﬂt64x
Ë(x), (_Flﬂt64xË(y))

	)

86 #i‡
__HAVE_FLOAT128X
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

87 
	#CMPLXF128X
(
x
, 
y
) \

88 
	`__buûtö_com∂ex
 ((
_Flﬂt128x
Ë(
x
), (_Flﬂt128xË(
y
))

	)

96 
	#__MATHCALL
(
fun˘i⁄
, 
¨gs
) \

97 
	`__MATHDECL
 (
_MdoubÀ_com∂ex_
,
fun˘i⁄
, 
¨gs
)

	)

98 
	#__MATHDECL_IMPL
(
ty≥
, 
fun˘i⁄
, 
¨gs
) \

99 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
, 
¨gs
); \

100 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
), 
¨gs
)

	)

101 
	#__MATHDECL
(
ty≥
, 
fun˘i⁄
, 
¨gs
) \

102 
	`__MATHDECL_IMPL
(
ty≥
, 
fun˘i⁄
, 
¨gs
)

	)

103 
	#__MATHDECL_1_IMPL
(
ty≥
, 
fun˘i⁄
, 
¨gs
) \

104 
ty≥
 
	`__MATH_PRECNAME
(
fun˘i⁄
Ë
¨gs
 
__THROW


	)

105 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
, 
¨gs
) \

106 
	`__MATHDECL_1_IMPL
(
ty≥
, 
fun˘i⁄
, 
¨gs
)

	)

108 
	#_MdoubÀ_
 

	)

109 
	#__MATH_PRECNAME
(
«me
Ë
	)
name

110 
	~<bôs/cm©hˇŒs.h
>

111 #unde‡
_MdoubÀ_


112 #unde‡
__MATH_PRECNAME


115 
	#_MdoubÀ_
 

	)

116 
	#__MATH_PRECNAME
(
«me
Ë«me##
f


	)

117 
	~<bôs/cm©hˇŒs.h
>

118 #unde‡
_MdoubÀ_


119 #unde‡
__MATH_PRECNAME


123 #i‡!(
deföed
 
__NO_LONG_DOUBLE_MATH
 && deföed 
_LIBC
) \

124 || 
deföed
 
__LDBL_COMPAT


125 #ifde‡
__LDBL_COMPAT


126 #unde‡
__MATHDECL_1


127 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
, 
¨gs
) \

128 
ty≥
 
	`__REDIRECT_NTH
(
	`__MATH_PRECNAME
(
fun˘i⁄
), 
¨gs
, fun˘i⁄)

	)

129 #ñi‡
__LDOUBLE_REDIRECTS_TO_FLOAT128_ABI
 == 1

130 #unde‡
__MATHDECL_1


131 #unde‡
__MATHDECL


132 
	#__REDIR_TO
(
fun˘i⁄
) \

133 
__
 ## 
fun˘i⁄
 ## 
õì128


	)

134 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
, 
Æüs
, 
¨gs
) \

135 
ty≥
 
	`__REDIRECT_NTH
(
	`__MATH_PRECNAME
(
fun˘i⁄
), 
¨gs
, 
Æüs
)

	)

136 
	#__MATHDECL
(
ty≥
, 
fun˘i⁄
, 
¨gs
) \

137 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
, 
	`__REDIR_TO
(fun˘i⁄), 
¨gs
); \

138 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
), 
	`__REDIR_TO
(fun˘i⁄), 
¨gs
)

	)

141 
	#_MdoubÀ_
 

	)

142 
	#__MATH_PRECNAME
(
«me
Ë«me##
l


	)

143 
	~<bôs/cm©hˇŒs.h
>

144 #i‡
deföed
 
__LDBL_COMPAT
 \

145 || 
	g__LDOUBLE_REDIRECTS_TO_FLOAT128_ABI
 == 1

146 #unde‡
__REDIR_TO


147 #unde‡
__MATHDECL_1


148 #unde‡
__MATHDECL


149 
	#__MATHDECL
(
ty≥
, 
fun˘i⁄
, 
¨gs
) \

150 
	`__MATHDECL_IMPL
(
ty≥
, 
fun˘i⁄
, 
¨gs
)

	)

151 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
, 
¨gs
) \

152 
	`__MATHDECL_1_IMPL
(
ty≥
, 
fun˘i⁄
, 
¨gs
)

	)

155 #unde‡
_MdoubÀ_


156 #unde‡
__MATH_PRECNAME


158 #i‡(
__HAVE_DISTINCT_FLOAT16
 || (
__HAVE_FLOAT16
 && !
deföed
 
_LIBC
)) \

159 && 
	$__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

160 #unde‡
_MdoubÀ_com∂ex_


161 
	#_MdoubÀ_com∂ex_
 
__CFLOAT16


	)

162 
	#_MdoubÀ_
 
_Flﬂt16


	)

163 
	#__MATH_PRECNAME
(
«me
Ë«me##
f16


	)

164 
	~<bôs/cm©hˇŒs.h
>

165 #unde‡
_MdoubÀ_


166 #unde‡
__MATH_PRECNAME


167 #unde‡
_MdoubÀ_com∂ex_


170 #i‡(
__HAVE_DISTINCT_FLOAT32
 || (
__HAVE_FLOAT32
 && !
deföed
 
_LIBC
)) \

171 && 
	$__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

172 #unde‡
_MdoubÀ_com∂ex_


173 
	#_MdoubÀ_com∂ex_
 
__CFLOAT32


	)

174 
	#_MdoubÀ_
 
_Flﬂt32


	)

175 
	#__MATH_PRECNAME
(
«me
Ë«me##
f32


	)

176 
	~<bôs/cm©hˇŒs.h
>

177 #unde‡
_MdoubÀ_


178 #unde‡
__MATH_PRECNAME


179 #unde‡
_MdoubÀ_com∂ex_


182 #i‡(
__HAVE_DISTINCT_FLOAT64
 || (
__HAVE_FLOAT64
 && !
deföed
 
_LIBC
)) \

183 && 
	$__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

184 #unde‡
_MdoubÀ_com∂ex_


185 
	#_MdoubÀ_com∂ex_
 
__CFLOAT64


	)

186 
	#_MdoubÀ_
 
_Flﬂt64


	)

187 
	#__MATH_PRECNAME
(
«me
Ë«me##
f64


	)

188 
	~<bôs/cm©hˇŒs.h
>

189 #unde‡
_MdoubÀ_


190 #unde‡
__MATH_PRECNAME


191 #unde‡
_MdoubÀ_com∂ex_


194 #i‡(
__HAVE_DISTINCT_FLOAT128
 || (
__HAVE_FLOAT128
 && !
deföed
 
_LIBC
)) \

195 && 
	$__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

196 #unde‡
_MdoubÀ_com∂ex_


197 
	#_MdoubÀ_com∂ex_
 
__CFLOAT128


	)

198 
	#_MdoubÀ_
 
_Flﬂt128


	)

199 
	#__MATH_PRECNAME
(
«me
Ë«me##
f128


	)

200 
	~<bôs/cm©hˇŒs.h
>

201 #unde‡
_MdoubÀ_


202 #unde‡
__MATH_PRECNAME


203 #unde‡
_MdoubÀ_com∂ex_


206 #i‡(
__HAVE_DISTINCT_FLOAT32X
 || (
__HAVE_FLOAT32X
 && !
deföed
 
_LIBC
)) \

207 && 
	$__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

208 #unde‡
_MdoubÀ_com∂ex_


209 
	#_MdoubÀ_com∂ex_
 
__CFLOAT32X


	)

210 
	#_MdoubÀ_
 
_Flﬂt32x


	)

211 
	#__MATH_PRECNAME
(
«me
Ë«me##
f32x


	)

212 
	~<bôs/cm©hˇŒs.h
>

213 #unde‡
_MdoubÀ_


214 #unde‡
__MATH_PRECNAME


215 #unde‡
_MdoubÀ_com∂ex_


218 #i‡(
__HAVE_DISTINCT_FLOAT64X
 || (
__HAVE_FLOAT64X
 && !
deföed
 
_LIBC
)) \

219 && 
	$__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

220 #unde‡
_MdoubÀ_com∂ex_


221 
	#_MdoubÀ_com∂ex_
 
__CFLOAT64X


	)

222 
	#_MdoubÀ_
 
_Flﬂt64x


	)

223 
	#__MATH_PRECNAME
(
«me
Ë«me##
f64x


	)

224 
	~<bôs/cm©hˇŒs.h
>

225 #unde‡
_MdoubÀ_


226 #unde‡
__MATH_PRECNAME


227 #unde‡
_MdoubÀ_com∂ex_


230 #i‡(
__HAVE_DISTINCT_FLOAT128X
 || (
__HAVE_FLOAT128X
 && !
deföed
 
_LIBC
)) \

231 && 
	$__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

232 #unde‡
_MdoubÀ_com∂ex_


233 
	#_MdoubÀ_com∂ex_
 
__CFLOAT128X


	)

234 
	#_MdoubÀ_
 
_Flﬂt128x


	)

235 
	#__MATH_PRECNAME
(
«me
Ë«me##
f128x


	)

236 
	~<bôs/cm©hˇŒs.h
>

237 #unde‡
_MdoubÀ_


238 #unde‡
__MATH_PRECNAME


239 #unde‡
_MdoubÀ_com∂ex_


242 #unde‡
__MATHDECL_1_IMPL


243 #unde‡
__MATHDECL_1


244 #unde‡
__MATHDECL


245 #unde‡
__MATHCALL


247 
__END_DECLS


	@/usr/include/cpio.h

20 #i‚de‡
_CPIO_H


21 
	#_CPIO_H
 1

	)

46 
	#MAGIC
 "070707"

	)

50 
	#C_IRUSR
 000400

	)

51 
	#C_IWUSR
 000200

	)

52 
	#C_IXUSR
 000100

	)

53 
	#C_IRGRP
 000040

	)

54 
	#C_IWGRP
 000020

	)

55 
	#C_IXGRP
 000010

	)

56 
	#C_IROTH
 000004

	)

57 
	#C_IWOTH
 000002

	)

58 
	#C_IXOTH
 000001

	)

60 
	#C_ISUID
 004000

	)

61 
	#C_ISGID
 002000

	)

62 
	#C_ISVTX
 001000

	)

64 
	#C_ISBLK
 060000

	)

65 
	#C_ISCHR
 020000

	)

66 
	#C_ISDIR
 040000

	)

67 
	#C_ISFIFO
 010000

	)

68 
	#C_ISSOCK
 0140000

	)

69 
	#C_ISLNK
 0120000

	)

70 
	#C_ISCTG
 0110000

	)

71 
	#C_ISREG
 0100000

	)

	@/usr/include/crypt.h

19 #i‚de‡
_CRYPT_H


20 
	#_CRYPT_H
 1

	)

22 
	~<sys/cdefs.h
>

24 
	g__BEGIN_DECLS


32 
	#CRYPT_OUTPUT_SIZE
 384

	)

36 
	#CRYPT_MAX_PASSPHRASE_SIZE
 512

	)

44 
	#CRYPT_GENSALT_OUTPUT_SIZE
 192

	)

63 *
	$¸y±
 (c⁄° *
__phø£
, c⁄° *
__£âög
)

64 
__THROW
;

68 
	#CRYPT_DATA_RESERVED_SIZE
 767

	)

69 
	#CRYPT_DATA_INTERNAL_SIZE
 30720

	)

72 
	s¸y±_d©a


77 
ouçut
[
CRYPT_OUTPUT_SIZE
];

86 
£âög
[
CRYPT_OUTPUT_SIZE
];

91 
öput
[
CRYPT_MAX_PASSPHRASE_SIZE
];

98 
ª£rved
[
CRYPT_DATA_RESERVED_SIZE
];

105 
öôülized
;

110 
öã∫Æ
[
CRYPT_DATA_INTERNAL_SIZE
];

116 *
	$¸y±_r
 (c⁄° *
__phø£
, c⁄° *
__£âög
,

117 
¸y±_d©a
 *
__ª°ri˘
 
__d©a
)

118 
__THROW
;

128 *
	$¸y±_∫
 (c⁄° *
__phø£
, c⁄° *
__£âög
,

129 *
__d©a
, 
__size
)

130 
__THROW
;

142 *
	$¸y±_ø
 (c⁄° *
__phø£
, c⁄° *
__£âög
,

143 **
__d©a
, *
__size
)

144 
__THROW
;

167 *
	$¸y±_gíß…
 (c⁄° *
__¥efix
, 
__cou¡
,

168 c⁄° *
__rbyãs
, 
__ƒbyãs
)

169 
__THROW
;

178 *
	$¸y±_gíß…_∫
 (c⁄° *
__¥efix
, 
__cou¡
,

179 c⁄° *
__rbyãs
, 
__ƒbyãs
,

180 *
__ouçut
, 
__ouçut_size
)

181 
__THROW
;

187 #i‚de‡
IN_LIBCRYPT


188 #ifde‡
__REDIRECT_NTH


189 * 
	`__REDIRECT_NTH
 (
¸y±_gíß…_r
, (c⁄° *
__¥efix
,

190 
__cou¡
, c⁄° *
__rbyãs
,

191 
__ƒbyãs
, *
__ouçut
,

192 
__ouçut_size
), 
¸y±_gíß…_∫
);

194 
	#¸y±_gíß…_r
 
¸y±_gíß…_∫


	)

201 *
	$¸y±_gíß…_ø
 (c⁄° *
__¥efix
, 
__cou¡
,

202 c⁄° *
__rbyãs
, 
__ƒbyãs
)

203 
__THROW
;

209 
	`¸y±_checkß…
 (c⁄° *
__£âög
);

213 
	#CRYPT_SALT_OK
 0

	)

214 
	#CRYPT_SALT_INVALID
 1

	)

215 
	#CRYPT_SALT_METHOD_DISABLED
 2

	)

216 
	#CRYPT_SALT_METHOD_LEGACY
 3

	)

217 
	#CRYPT_SALT_TOO_CHEAP
 4

	)

225 c⁄° *
	`¸y±_¥e„ºed_mëhod
 ();

230 
	#CRYPT_GENSALT_IMPLEMENTS_DEFAULT_PREFIX
 1

	)

231 
	#CRYPT_GENSALT_IMPLEMENTS_AUTO_ENTROPY
 1

	)

235 
	#CRYPT_CHECKSALT_AVAILABLE
 1

	)

236 
	#CRYPT_PREFERRED_METHOD_AVAILABLE
 1

	)

239 
	#XCRYPT_VERSION_MAJOR
 4

	)

240 
	#XCRYPT_VERSION_MINOR
 4

	)

243 
	#XCRYPT_VERSION_NUM
 ((
XCRYPT_VERSION_MAJOR
 << 16) | \

244 
XCRYPT_VERSION_MINOR
)

	)

247 
	#XCRYPT_VERSION_STR
 "4.4.27"

	)

249 
__END_DECLS


	@/usr/include/ctype.h

22 #i‚def 
_CTYPE_H


23 
	#_CTYPE_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 
	g__BEGIN_DECLS


30 #i‚de‡
_ISbô


39 
	~<bôs/ídün.h
>

40 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


41 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

43 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

48 
	m_ISuµî
 = 
_ISbô
 (0),

49 
	m_ISlowî
 = 
_ISbô
 (1),

50 
	m_ISÆpha
 = 
_ISbô
 (2),

51 
	m_ISdigô
 = 
_ISbô
 (3),

52 
	m_ISxdigô
 = 
_ISbô
 (4),

53 
	m_IS•a˚
 = 
_ISbô
 (5),

54 
	m_IS¥öt
 = 
_ISbô
 (6),

55 
	m_ISgøph
 = 
_ISbô
 (7),

56 
	m_ISbœnk
 = 
_ISbô
 (8),

57 
	m_IS˙ål
 = 
_ISbô
 (9),

58 
	m_ISpun˘
 = 
_ISbô
 (10),

59 
	m_ISÆnum
 = 
_ISbô
 (11)

79 c⁄° **
	$__˘y≥_b_loc
 ()

80 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

81 c⁄° 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

83 c⁄° 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

87 #i‚de‡
__˝lu•lus


88 
	#__is˘y≥
(
c
, 
ty≥
) \

89 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

90 #ñi‡
deföed
 
__USE_EXTERN_INLINES


91 
	#__is˘y≥_f
(
ty≥
) \

92 
__exã∫_ölöe
 \

93 
is
##
	`ty≥
 (
__c
Ë
__THROW
 \

95  (*
	`__˘y≥_b_loc
 ())[(Ë(
__c
)] & (Ë
_IS
##
ty≥
; \

96 
	}

	)
}

99 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

100 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

102 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

108 
__ex˘y≥
 (
iß um
);

109 
__ex˘y≥
 (
ißÕha
);

110 
__ex˘y≥
 (
is˙ål
);

111 
__ex˘y≥
 (
isdigô
);

112 
__ex˘y≥
 (
i¶owî
);

113 
__ex˘y≥
 (
isgøph
);

114 
__ex˘y≥
 (
i•röt
);

115 
__ex˘y≥
 (
i•un˘
);

116 
__ex˘y≥
 (
is•a˚
);

117 
__ex˘y≥
 (
isuµî
);

118 
__ex˘y≥
 (
isxdigô
);

122 
	$tﬁowî
 (
__c
Ë
__THROW
;

125 
	$touµî
 (
__c
Ë
__THROW
;

129 #ifdef 
__USE_ISOC99


130 
	`__ex˘y≥
 (
isbœnk
);

133 #ifde‡
__USE_GNU


135 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

138 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


142 
	$ißscii
 (
__c
Ë
__THROW
;

146 
	$tﬂscii
 (
__c
Ë
__THROW
;

150 
	`__ex˘y≥
 (
_touµî
);

151 
	`__ex˘y≥
 (
_tﬁowî
);

155 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

156 (
__exãnsi⁄__
 \

157 ({ 
__ªs
; \

158 i‡( (
c
) > 1) \

160 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

162 
__c
 = (
c
); \

163 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

166 
__ªs
 = 
f
 
¨gs
; \

169 
__ªs
 = (
a
)[(Ë(
c
)]; \

170 
__ªs
; 
	}
}))

	)

172 #i‡!
deföed
 
__NO_CTYPE


173 #ifde‡
__is˘y≥_f


174 
	$__is˘y≥_f
 (
Ænum
)

175 
	$__is˘y≥_f
 (
Æpha
)

176 
	$__is˘y≥_f
 (
˙ål
)

177 
	$__is˘y≥_f
 (
digô
)

178 
	$__is˘y≥_f
 (
lowî
)

179 
	$__is˘y≥_f
 (
gøph
)

180 
	$__is˘y≥_f
 (
¥öt
)

181 
	$__is˘y≥_f
 (
pun˘
)

182 
	$__is˘y≥_f
 (
•a˚
)

183 
	$__is˘y≥_f
 (
uµî
)

184 
	$__is˘y≥_f
 (
xdigô
)

185 #ifde‡
__USE_ISOC99


186 
	$__is˘y≥_f
 (
bœnk
)

188 #ñi‡
deföed
 
__is˘y≥


189 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

190 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

191 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

192 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

193 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

194 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

195 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

196 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

197 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

198 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

199 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

200 #ifde‡
__USE_ISOC99


201 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

205 #ifde‡
__USE_EXTERN_INLINES


206 
__exã∫_ölöe
 

207 
	`__NTH
 (
	$tﬁowî
 (
__c
))

209  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

210 
	}
}

212 
__exã∫_ölöe
 

213 
__NTH
 (
	$touµî
 (
__c
))

215  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

216 
	}
}

219 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


220 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

221 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

224 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


225 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

226 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

228 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

229 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

235 #ifde‡
__USE_XOPEN2K8


237 
	~<bôs/ty≥s/loˇÀ_t.h
>

241 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

242 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

244 
	#__ex˘y≥_l
(
«me
) \

245 
	`«me
 (, 
loˇÀ_t
Ë
__THROW


	)

251 
__ex˘y≥_l
 (
iß um_l
);

252 
__ex˘y≥_l
 (
ißÕha_l
);

253 
__ex˘y≥_l
 (
is˙ål_l
);

254 
__ex˘y≥_l
 (
isdigô_l
);

255 
__ex˘y≥_l
 (
i¶owî_l
);

256 
__ex˘y≥_l
 (
isgøph_l
);

257 
__ex˘y≥_l
 (
i•röt_l
);

258 
__ex˘y≥_l
 (
i•un˘_l
);

259 
__ex˘y≥_l
 (
is•a˚_l
);

260 
__ex˘y≥_l
 (
isuµî_l
);

261 
__ex˘y≥_l
 (
isxdigô_l
);

263 
__ex˘y≥_l
 (
isbœnk_l
);

267 
	$__tﬁowî_l
 (
__c
, 
loˇÀ_t
 
__l
Ë
__THROW
;

268 
	$tﬁowî_l
 (
__c
, 
loˇÀ_t
 
__l
Ë
__THROW
;

271 
	$__touµî_l
 (
__c
, 
loˇÀ_t
 
__l
Ë
__THROW
;

272 
	$touµî_l
 (
__c
, 
loˇÀ_t
 
__l
Ë
__THROW
;

274 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


275 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

276 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

277 
	#__touµî_l
(
c
, 
loˇÀ
) \

278 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

279 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

280 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

284 #i‚de‡
__NO_CTYPE


285 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

286 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

287 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

288 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

289 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

290 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

291 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

292 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

293 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

294 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

295 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

297 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

299 #ifde‡
__USE_MISC


300 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

301 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

304 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

305 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

306 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

307 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

308 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

309 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

310 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

311 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

312 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

313 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

314 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

316 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

318 #ifde‡
__USE_MISC


319 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

320 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

327 
__END_DECLS


	@/usr/include/curses.h

38 #i‚de‡
__NCURSES_H


39 
	#__NCURSES_H


	)

69 
	#CURSES
 1

	)

70 
	#CURSES_H
 1

	)

73 
	#NCURSES_VERSION_MAJOR
 6

	)

74 
	#NCURSES_VERSION_MINOR
 3

	)

75 
	#NCURSES_VERSION_PATCH
 20211021

	)

78 #unde‡
NCURSES_VERSION


79 
	#NCURSES_VERSION
 "6.3"

	)

84 
	#NCURSES_MOUSE_VERSION
 2

	)

89 
	~<ncur£s_dŒ.h
>

95 
	~<°döt.h
>

98 #ifde‡
__˝lu•lus


101 
	~<°dn‹ëu∫.h
>

102 #unde‡
GCC_NORETURN


103 
	#GCC_NORETURN
 
_N‹ëu∫


	)

110 #i‚de‡
NCURSES_ENABLE_STDBOOL_H


111 
	#NCURSES_ENABLE_STDBOOL_H
 1

	)

118 #i‚de‡
NCURSES_ATTR_T


119 
	#NCURSES_ATTR_T
 

	)

126 #unde‡
NCURSES_CONST


127 
	#NCURSES_CONST
 c⁄°

	)

129 #unde‡
NCURSES_INLINE


130 
	#NCURSES_INLINE
 
ölöe


	)

141 #unde‡
NCURSES_COLOR_T


142 
	#NCURSES_COLOR_T
 

	)

144 #unde‡
NCURSES_PAIRS_T


145 
	#NCURSES_PAIRS_T
 

	)

150 #i‚de‡
NCURSES_INTERNALS


151 
	#NCURSES_OPAQUE
 0

	)

152 
	#NCURSES_OPAQUE_FORM
 0

	)

153 
	#NCURSES_OPAQUE_MENU
 0

	)

154 
	#NCURSES_OPAQUE_PANEL
 0

	)

162 #i‚de‡
NCURSES_WATTR_MACROS


163 
	#NCURSES_WATTR_MACROS
 0

	)

169 #i‚de‡
NCURSES_REENTRANT


170 
	#NCURSES_REENTRANT
 0

	)

176 #unde‡
NCURSES_BROKEN_LINKER


178 
	#NCURSES_BROKEN_LINKER
 1

	)

184 #unde‡
NCURSES_INTEROP_FUNCS


185 
	#NCURSES_INTEROP_FUNCS
 1

	)

190 #unde‡
NCURSES_SIZE_T


191 
	#NCURSES_SIZE_T
 

	)

196 #unde‡
NCURSES_TPARM_VARARGS


197 
	#NCURSES_TPARM_VARARGS
 1

	)

203 #unde‡
NCURSES_TPARM_ARG


204 
	#NCURSES_TPARM_ARG
 
öçå_t


	)

210 #unde‡
NCURSES_WCWIDTH_GRAPHICS


211 
	#NCURSES_WCWIDTH_GRAPHICS
 1

	)

218 #unde‡
NCURSES_CH_T


219 
	#NCURSES_CH_T
 
cch¨_t


	)

221 #i‡1 && 
deföed
(
_LP64
)

222 
	tchty≥
;

223 
	tmmask_t
;

225 
uöt32_t
 
	tchty≥
;

226 
uöt32_t
 
	tmmask_t
;

232 
	~<°dio.h
>

241 #i‚de‡
NCURSES_WIDECHAR


242 #i‡
deföed
(
_XOPEN_SOURCE_EXTENDED
Ë|| (deföed(
_XOPEN_SOURCE
) && (_XOPEN_SOURCE - 0 >= 500))

243 
	#NCURSES_WIDECHAR
 1

	)

245 
	#NCURSES_WIDECHAR
 0

	)

249 
	~<°d¨g.h
>

250 #i‡
NCURSES_WIDECHAR


251 
	~<°ddef.h
>

266 #unde‡
TRUE


267 
	#TRUE
 1

	)

269 #unde‡
FALSE


270 
	#FALSE
 0

	)

272 
	tNCURSES_BOOL
;

274 #i‡
deföed
(
__˝lu•lus
)

277 
	#NCURSES_BOOL
 
boﬁ


	)

281 #i‡
NCURSES_ENABLE_STDBOOL_H


282 
	~<°dboﬁ.h
>

284 
	#NCURSES_BOOL
 
boﬁ


	)

287 #unde‡
boﬁ


288 
	#boﬁ
 
NCURSES_BOOL


	)

293 #ifde‡
__˝lu•lus


295 
	#NCURSES_CAST
(
ty≥
,
vÆue
Ë
°©ic_ˇ°
<ty≥>(vÆue)

	)

297 
	#NCURSES_CAST
(
ty≥
,
vÆue
Ë—y≥)(vÆue)

	)

300 
	#NCURSES_OK_ADDR
(
p
Ë(0 !
	`NCURSES_CAST
(c⁄° *, (p)))

	)

306 
	#WA_ATTRIBUTES
 
A_ATTRIBUTES


	)

307 
	#WA_NORMAL
 
A_NORMAL


	)

308 
	#WA_STANDOUT
 
A_STANDOUT


	)

309 
	#WA_UNDERLINE
 
A_UNDERLINE


	)

310 
	#WA_REVERSE
 
A_REVERSE


	)

311 
	#WA_BLINK
 
A_BLINK


	)

312 
	#WA_DIM
 
A_DIM


	)

313 
	#WA_BOLD
 
A_BOLD


	)

314 
	#WA_ALTCHARSET
 
A_ALTCHARSET


	)

315 
	#WA_INVIS
 
A_INVIS


	)

316 
	#WA_PROTECT
 
A_PROTECT


	)

317 
	#WA_HORIZONTAL
 
A_HORIZONTAL


	)

318 
	#WA_LEFT
 
A_LEFT


	)

319 
	#WA_LOW
 
A_LOW


	)

320 
	#WA_RIGHT
 
A_RIGHT


	)

321 
	#WA_TOP
 
A_TOP


	)

322 
	#WA_VERTICAL
 
A_VERTICAL


	)

325 
	#WA_ITALIC
 
A_ITALIC


	)

329 
	#COLOR_BLACK
 0

	)

330 
	#COLOR_RED
 1

	)

331 
	#COLOR_GREEN
 2

	)

332 
	#COLOR_YELLOW
 3

	)

333 
	#COLOR_BLUE
 4

	)

334 
	#COLOR_MAGENTA
 5

	)

335 
	#COLOR_CYAN
 6

	)

336 
	#COLOR_WHITE
 7

	)

340 #i‡0 || 
NCURSES_REENTRANT


341 
NCURSES_WRAPPED_VAR
(
chty≥
*, 
acs_m≠
);

342 
	#acs_m≠
 
	`NCURSES_PUBLIC_VAR
(
	`acs_m≠
())

	)

344 
NCURSES_EXPORT_VAR
(
chty≥
Ë
acs_m≠
[];

347 
	#NCURSES_ACS
(
c
Ë(
acs_m≠
[
	`NCURSES_CAST
(,(c))])

	)

350 
	#ACS_ULCORNER
 
	`NCURSES_ACS
('l'Ë

	)

351 
	#ACS_LLCORNER
 
	`NCURSES_ACS
('m'Ë

	)

352 
	#ACS_URCORNER
 
	`NCURSES_ACS
('k'Ë

	)

353 
	#ACS_LRCORNER
 
	`NCURSES_ACS
('j'Ë

	)

354 
	#ACS_LTEE
 
	`NCURSES_ACS
('t'Ë

	)

355 
	#ACS_RTEE
 
	`NCURSES_ACS
('u'Ë

	)

356 
	#ACS_BTEE
 
	`NCURSES_ACS
('v'Ë

	)

357 
	#ACS_TTEE
 
	`NCURSES_ACS
('w'Ë

	)

358 
	#ACS_HLINE
 
	`NCURSES_ACS
('q'Ë

	)

359 
	#ACS_VLINE
 
	`NCURSES_ACS
('x'Ë

	)

360 
	#ACS_PLUS
 
	`NCURSES_ACS
('n'Ë

	)

361 
	#ACS_S1
 
	`NCURSES_ACS
('o'Ë

	)

362 
	#ACS_S9
 
	`NCURSES_ACS
('s'Ë

	)

363 
	#ACS_DIAMOND
 
	`NCURSES_ACS
('`'Ë

	)

364 
	#ACS_CKBOARD
 
	`NCURSES_ACS
('a'Ë

	)

365 
	#ACS_DEGREE
 
	`NCURSES_ACS
('f'Ë

	)

366 
	#ACS_PLMINUS
 
	`NCURSES_ACS
('g'Ë

	)

367 
	#ACS_BULLET
 
	`NCURSES_ACS
('~'Ë

	)

369 
	#ACS_LARROW
 
	`NCURSES_ACS
(','Ë

	)

370 
	#ACS_RARROW
 
	`NCURSES_ACS
('+'Ë

	)

371 
	#ACS_DARROW
 
	`NCURSES_ACS
('.'Ë

	)

372 
	#ACS_UARROW
 
	`NCURSES_ACS
('-'Ë

	)

373 
	#ACS_BOARD
 
	`NCURSES_ACS
('h'Ë

	)

374 
	#ACS_LANTERN
 
	`NCURSES_ACS
('i'Ë

	)

375 
	#ACS_BLOCK
 
	`NCURSES_ACS
('0'Ë

	)

381 
	#ACS_S3
 
	`NCURSES_ACS
('p'Ë

	)

382 
	#ACS_S7
 
	`NCURSES_ACS
('r'Ë

	)

383 
	#ACS_LEQUAL
 
	`NCURSES_ACS
('y'Ë

	)

384 
	#ACS_GEQUAL
 
	`NCURSES_ACS
('z'Ë

	)

385 
	#ACS_PI
 
	`NCURSES_ACS
('{'Ë

	)

386 
	#ACS_NEQUAL
 
	`NCURSES_ACS
('|'Ë

	)

387 
	#ACS_STERLING
 
	`NCURSES_ACS
('}'Ë

	)

395 
	#ACS_BSSB
 
ACS_ULCORNER


	)

396 
	#ACS_SSBB
 
ACS_LLCORNER


	)

397 
	#ACS_BBSS
 
ACS_URCORNER


	)

398 
	#ACS_SBBS
 
ACS_LRCORNER


	)

399 
	#ACS_SBSS
 
ACS_RTEE


	)

400 
	#ACS_SSSB
 
ACS_LTEE


	)

401 
	#ACS_SSBS
 
ACS_BTEE


	)

402 
	#ACS_BSSS
 
ACS_TTEE


	)

403 
	#ACS_BSBS
 
ACS_HLINE


	)

404 
	#ACS_SBSB
 
ACS_VLINE


	)

405 
	#ACS_SSSS
 
ACS_PLUS


	)

407 #unde‡
ERR


408 
	#ERR
 (-1)

	)

410 #unde‡
OK


411 
	#OK
 (0)

	)

414 
	#_SUBWIN
 0x01

	)

415 
	#_ENDLINE
 0x02

	)

416 
	#_FULLWIN
 0x04

	)

417 
	#_SCROLLWIN
 0x08

	)

418 
	#_ISPAD
 0x10

	)

419 
	#_HASMOVED
 0x20

	)

420 
	#_WRAPPED
 0x40

	)

426 
	#_NOCHANGE
 -1

	)

432 
	#_NEWINDEX
 -1

	)

434 #ifde‡
NCURSES_INTERNALS


435 #unde‡
SCREEN


436 
	#SCREEN
 
s¸ìn


	)

437 
	gSCREEN
;

439 
s¸ìn
 
	tSCREEN
;

442 
_wö_°
 
	tWINDOW
;

444 
chty≥
 
	t©å_t
;

446 #i‡
NCURSES_WIDECHAR


449 #ifde‡
mbÀn


450 #unde‡
mbÀn


452 
	~<libutf8.h
>

456 
	~<wch¨.h
>

460 
	twch¨_t1
;

464 
	twöt_t1
;

473 
	#CCHARW_MAX
 5

	)

476 
©å_t
 
	g©å
;

477 
wch¨_t
 
	gch¨s
[
CCHARW_MAX
];

479 #unde‡
NCURSES_EXT_COLORS


480 
	#NCURSES_EXT_COLORS
 20211021

	)

481 
	gext_cﬁ‹
;

484 
	tcch¨_t
;

488 #i‡!
NCURSES_OPAQUE


489 
	gld©
;

491 
	s_wö_°


493 
NCURSES_SIZE_T
 
	g_cury
, 
	g_curx
;

496 
NCURSES_SIZE_T
 
	g_maxy
, 
	g_maxx
;

497 
NCURSES_SIZE_T
 
	g_begy
, 
	g_begx
;

499 
	g_Êags
;

502 
©å_t
 
	g_©ås
;

503 
chty≥
 
	g_bkgd
;

506 
boﬁ
 
	g_nŸimeout
;

507 
boﬁ
 
	g_˛ór
;

508 
boﬁ
 
	g_Àaveok
;

509 
boﬁ
 
	g_s¸ﬁl
;

510 
boﬁ
 
	g_idlok
;

511 
boﬁ
 
	g_idcok
;

512 
boﬁ
 
	g_immed
;

513 
boﬁ
 
	g_sync
;

514 
boﬁ
 
	g_u£_key∑d
;

515 
	g_dñay
;

517 
ld©
 *
	g_löe
;

520 
NCURSES_SIZE_T
 
	g_ªgt›
;

521 
NCURSES_SIZE_T
 
	g_ªgbŸtom
;

524 
	g_∑rx
;

525 
	g_∑ry
;

526 
WINDOW
 *
	g_∑ª¡
;

529 
	spd©


531 
NCURSES_SIZE_T
 
	g_∑d_y
, 
	g_∑d_x
;

532 
NCURSES_SIZE_T
 
	g_∑d_t›
, 
	g_∑d_À·
;

533 
NCURSES_SIZE_T
 
	g_∑d_bŸtom
, 
	g_∑d_right
;

534 } 
	g_∑d
;

536 
NCURSES_SIZE_T
 
	g_yoff£t
;

538 #i‡
NCURSES_WIDECHAR


539 
cch¨_t
 
	g_bkg∫d
;

541 
	g_cﬁ‹
;

554 #i‡!(
deföed
(
__GNUC__
Ë|| deföed(
__GNUG__
Ë|| deföed(
__©åibuã__
))

555 
	#__©åibuã__
(
p
Ë

	)

562 #i‚de‡
GCC_PRINTFLIKE


563 #i‚de‡
¥ötf


564 
	#GCC_PRINTFLIKE
(
fmt
,
v¨
Ë
	`__©åibuã__
((
	`f‹m©
(
¥ötf
,fmt,v¨)))

	)

566 
	#GCC_PRINTFLIKE
(
fmt
,
v¨
Ë

	)

570 #i‚de‡
GCC_SCANFLIKE


571 #i‚de‡
sˇnf


572 
	#GCC_SCANFLIKE
(
fmt
,
v¨
Ë
	`__©åibuã__
((
	`f‹m©
(
sˇnf
,fmt,v¨)))

	)

574 
	#GCC_SCANFLIKE
(
fmt
,
v¨
Ë

	)

578 #i‚def 
GCC_NORETURN


579 
	#GCC_NORETURN


	)

582 #i‚def 
GCC_UNUSED


583 
	#GCC_UNUSED


	)

586 #unde‡
GCC_DEPRECATED


587 #i‡(
__GNUC__
 - 0 > 3 || (__GNUC__ - 0 =3 && 
__GNUC_MINOR__
 - 0 >2)Ë&& !
deföed
(
NCURSES_INTERNALS
)

588 
	#GCC_DEPRECATED
(
msg
Ë
	`__©åibuã__
((
dïªˇãd
))

	)

590 
	#GCC_DEPRECATED
(
msg
Ë

	)

597 (*
	gNCURSES_OUTC
)();

606 
NCURSES_EXPORT
(Ë
addch
 (c⁄° 
chty≥
);

607 
NCURSES_EXPORT
(Ë
addchn°r
 (c⁄° 
chty≥
 *, );

608 
NCURSES_EXPORT
(Ë
addch°r
 (c⁄° 
chty≥
 *);

609 
NCURSES_EXPORT
(Ë
addn°r
 (const *, );

610 
NCURSES_EXPORT
(Ë
add°r
 (const *);

611 
NCURSES_EXPORT
(Ë
©åoff
 (
NCURSES_ATTR_T
);

612 
NCURSES_EXPORT
(Ë
©å⁄
 (
NCURSES_ATTR_T
);

613 
NCURSES_EXPORT
(Ë
©å£t
 (
NCURSES_ATTR_T
);

614 
NCURSES_EXPORT
(Ë
©å_gë
 (
©å_t
 *, 
NCURSES_PAIRS_T
 *, *);

615 
NCURSES_EXPORT
(Ë
©å_off
 (
©å_t
, *);

616 
NCURSES_EXPORT
(Ë
©å_⁄
 (
©å_t
, *);

617 
NCURSES_EXPORT
(Ë
©å_£t
 (
©å_t
, 
NCURSES_PAIRS_T
, *);

618 
NCURSES_EXPORT
(Ë
baudøã
 ();

619 
NCURSES_EXPORT
(Ë
bìp
 ();

620 
NCURSES_EXPORT
(Ë
bkgd
 (
chty≥
);

621 
NCURSES_EXPORT
(Ë
bkgd£t
 (
chty≥
);

622 
NCURSES_EXPORT
(Ë
b‹dî
 (
chty≥
,chtype,chtype,chtype,chtype,chtype,chtype,chtype);

623 
NCURSES_EXPORT
(Ë
box
 (
WINDOW
 *, 
chty≥
, chtype);

624 
NCURSES_EXPORT
(
boﬁ
Ë
ˇn_ch™ge_cﬁ‹
 ();

625 
NCURSES_EXPORT
(Ë
cbªak
 ();

626 
NCURSES_EXPORT
(Ë
chg©
 (, 
©å_t
, 
NCURSES_PAIRS_T
, const *);

627 
NCURSES_EXPORT
(Ë
˛ór
 ();

628 
NCURSES_EXPORT
(Ë
˛órok
 (
WINDOW
 *,
boﬁ
);

629 
NCURSES_EXPORT
(Ë
˛πobŸ
 ();

630 
NCURSES_EXPORT
(Ë
˛π€ﬁ
 ();

631 
NCURSES_EXPORT
(Ë
cﬁ‹_c⁄ã¡
 (
NCURSES_COLOR_T
,NCURSES_COLOR_T*,NCURSES_COLOR_T*,NCURSES_COLOR_T*);

632 
NCURSES_EXPORT
(Ë
cﬁ‹_£t
 (
NCURSES_PAIRS_T
,*);

633 
NCURSES_EXPORT
(Ë
COLOR_PAIR
 ();

634 
NCURSES_EXPORT
(Ë
c›ywö
 (c⁄° 
WINDOW
*,WINDOW*,,,,,,,);

635 
NCURSES_EXPORT
(Ë
curs_£t
 ();

636 
NCURSES_EXPORT
(Ë
def_¥og_mode
 ();

637 
NCURSES_EXPORT
(Ë
def_shñl_mode
 ();

638 
NCURSES_EXPORT
(Ë
dñay_ouçut
 ();

639 
NCURSES_EXPORT
(Ë
dñch
 ();

640 
NCURSES_EXPORT
(Ë
dñs¸ìn
 (
SCREEN
 *);

641 
NCURSES_EXPORT
(Ë
dñwö
 (
WINDOW
 *);

642 
NCURSES_EXPORT
(Ë
dñëñn
 ();

643 
NCURSES_EXPORT
(
WINDOW
 *Ë
dîwö
 (WINDOW *,,,,);

644 
NCURSES_EXPORT
(Ë
doupd©e
 ();

645 
NCURSES_EXPORT
(
WINDOW
 *Ë
dupwö
 (WINDOW *);

646 
NCURSES_EXPORT
(Ë
echo
 ();

647 
NCURSES_EXPORT
(Ë
echoch¨
 (c⁄° 
chty≥
);

648 
NCURSES_EXPORT
(Ë
îa£
 ();

649 
NCURSES_EXPORT
(Ë
ídwö
 ();

650 
NCURSES_EXPORT
(Ë
îa£ch¨
 ();

651 
NCURSES_EXPORT
(Ë
fûãr
 ();

652 
NCURSES_EXPORT
(Ë
Êash
 ();

653 
NCURSES_EXPORT
(Ë
Êushöp
 ();

654 
NCURSES_EXPORT
(
chty≥
Ë
gëbkgd
 (
WINDOW
 *);

655 
NCURSES_EXPORT
(Ë
gëch
 ();

656 
NCURSES_EXPORT
(Ë
gën°r
 (*, );

657 
NCURSES_EXPORT
(Ë
gë°r
 (*);

658 
NCURSES_EXPORT
(
WINDOW
 *Ë
gëwö
 (
FILE
 *);

659 
NCURSES_EXPORT
(Ë
hÆfdñay
 ();

660 
NCURSES_EXPORT
(
boﬁ
Ë
has_cﬁ‹s
 ();

661 
NCURSES_EXPORT
(
boﬁ
Ë
has_ic
 ();

662 
NCURSES_EXPORT
(
boﬁ
Ë
has_û
 ();

663 
NCURSES_EXPORT
(Ë
hlöe
 (
chty≥
, );

664 
NCURSES_EXPORT
(Ë
idcok
 (
WINDOW
 *, 
boﬁ
);

665 
NCURSES_EXPORT
(Ë
idlok
 (
WINDOW
 *, 
boﬁ
);

666 
NCURSES_EXPORT
(Ë
immedok
 (
WINDOW
 *, 
boﬁ
);

667 
NCURSES_EXPORT
(
chty≥
Ë
öch
 ();

668 
NCURSES_EXPORT
(Ë
öchn°r
 (
chty≥
 *, );

669 
NCURSES_EXPORT
(Ë
öch°r
 (
chty≥
 *);

670 
NCURSES_EXPORT
(
WINDOW
 *Ë
öôs¸
 ();

671 
NCURSES_EXPORT
(Ë
öô_cﬁ‹
 (
NCURSES_COLOR_T
,NCURSES_COLOR_T,NCURSES_COLOR_T,NCURSES_COLOR_T);

672 
NCURSES_EXPORT
(Ë
öô_∑ú
 (
NCURSES_PAIRS_T
,
NCURSES_COLOR_T
,NCURSES_COLOR_T);

673 
NCURSES_EXPORT
(Ë
ön°r
 (*, );

674 
NCURSES_EXPORT
(Ë
ösch
 (
chty≥
);

675 
NCURSES_EXPORT
(Ë
ösdñ 
 ();

676 
NCURSES_EXPORT
(Ë
ö£π 
 ();

677 
NCURSES_EXPORT
(Ë
ö¢°r
 (const *, );

678 
NCURSES_EXPORT
(Ë
ös°r
 (const *);

679 
NCURSES_EXPORT
(Ë
ö°r
 (*);

680 
NCURSES_EXPORT
(Ë
öåÊush
 (
WINDOW
 *,
boﬁ
);

681 
NCURSES_EXPORT
(
boﬁ
Ë
i£ndwö
 ();

682 
NCURSES_EXPORT
(
boﬁ
Ë
is_löëouched
 (
WINDOW
 *,);

683 
NCURSES_EXPORT
(
boﬁ
Ë
is_wötouched
 (
WINDOW
 *);

684 
NCURSES_EXPORT
(
NCURSES_CONST
 *Ë
key«me
 ();

685 
NCURSES_EXPORT
(Ë
key∑d
 (
WINDOW
 *,
boﬁ
);

686 
NCURSES_EXPORT
(Ë
kûlch¨
 ();

687 
NCURSES_EXPORT
(Ë
Àaveok
 (
WINDOW
 *,
boﬁ
);

688 
NCURSES_EXPORT
(*Ë
l⁄g«me
 ();

689 
NCURSES_EXPORT
(Ë
mëa
 (
WINDOW
 *,
boﬁ
);

690 
NCURSES_EXPORT
(Ë
move
 (, );

691 
NCURSES_EXPORT
(Ë
mvaddch
 (, , c⁄° 
chty≥
);

692 
NCURSES_EXPORT
(Ë
mvaddchn°r
 (, , c⁄° 
chty≥
 *, );

693 
NCURSES_EXPORT
(Ë
mvaddch°r
 (, , c⁄° 
chty≥
 *);

694 
NCURSES_EXPORT
(Ë
mvaddn°r
 (, , const *, );

695 
NCURSES_EXPORT
(Ë
mvadd°r
 (, , const *);

696 
NCURSES_EXPORT
(Ë
mvchg©
 (, , , 
©å_t
, 
NCURSES_PAIRS_T
, const *);

697 
NCURSES_EXPORT
(Ë
mvcur
 (,,,);

698 
NCURSES_EXPORT
(Ë
mvdñch
 (, );

699 
NCURSES_EXPORT
(Ë
mvdîwö
 (
WINDOW
 *, , );

700 
NCURSES_EXPORT
(Ë
mvgëch
 (, );

701 
NCURSES_EXPORT
(Ë
mvgën°r
 (, , *, );

702 
NCURSES_EXPORT
(Ë
mvgë°r
 (, , *);

703 
NCURSES_EXPORT
(Ë
mvhlöe
 (, , 
chty≥
, );

704 
NCURSES_EXPORT
(
chty≥
Ë
mvöch
 (, );

705 
NCURSES_EXPORT
(Ë
mvöchn°r
 (, , 
chty≥
 *, );

706 
NCURSES_EXPORT
(Ë
mvöch°r
 (, , 
chty≥
 *);

707 
NCURSES_EXPORT
(Ë
mvön°r
 (, , *, );

708 
NCURSES_EXPORT
(Ë
mvösch
 (, , 
chty≥
);

709 
NCURSES_EXPORT
(Ë
mvö¢°r
 (, , const *, );

710 
NCURSES_EXPORT
(Ë
mvös°r
 (, , const *);

711 
NCURSES_EXPORT
(Ë
mvö°r
 (, , *);

712 
NCURSES_EXPORT
(Ë
mv¥ötw
 (,, const *,...)

713 
GCC_PRINTFLIKE
(3,4);

714 
NCURSES_EXPORT
(Ë
mvsˇnw
 (,, const *,...)

715 
GCC_SCANFLIKE
(3,4);

716 
NCURSES_EXPORT
(Ë
mvvlöe
 (, , 
chty≥
, );

717 
NCURSES_EXPORT
(Ë
mvwaddch
 (
WINDOW
 *, , , c⁄° 
chty≥
);

718 
NCURSES_EXPORT
(Ë
mvwaddchn°r
 (
WINDOW
 *, , , c⁄° 
chty≥
 *, );

719 
NCURSES_EXPORT
(Ë
mvwaddch°r
 (
WINDOW
 *, , , c⁄° 
chty≥
 *);

720 
NCURSES_EXPORT
(Ë
mvwaddn°r
 (
WINDOW
 *, , , const *, );

721 
NCURSES_EXPORT
(Ë
mvwadd°r
 (
WINDOW
 *, , , const *);

722 
NCURSES_EXPORT
(Ë
mvwchg©
 (
WINDOW
 *, , , , 
©å_t
, 
NCURSES_PAIRS_T
, const *);

723 
NCURSES_EXPORT
(Ë
mvwdñch
 (
WINDOW
 *, , );

724 
NCURSES_EXPORT
(Ë
mvwgëch
 (
WINDOW
 *, , );

725 
NCURSES_EXPORT
(Ë
mvwgën°r
 (
WINDOW
 *, , , *, );

726 
NCURSES_EXPORT
(Ë
mvwgë°r
 (
WINDOW
 *, , , *);

727 
NCURSES_EXPORT
(Ë
mvwhlöe
 (
WINDOW
 *, , , 
chty≥
, );

728 
NCURSES_EXPORT
(Ë
mvwö
 (
WINDOW
 *,,);

729 
NCURSES_EXPORT
(
chty≥
Ë
mvwöch
 (
WINDOW
 *, , );

730 
NCURSES_EXPORT
(Ë
mvwöchn°r
 (
WINDOW
 *, , , 
chty≥
 *, );

731 
NCURSES_EXPORT
(Ë
mvwöch°r
 (
WINDOW
 *, , , 
chty≥
 *);

732 
NCURSES_EXPORT
(Ë
mvwön°r
 (
WINDOW
 *, , , *, );

733 
NCURSES_EXPORT
(Ë
mvwösch
 (
WINDOW
 *, , , 
chty≥
);

734 
NCURSES_EXPORT
(Ë
mvwö¢°r
 (
WINDOW
 *, , , const *, );

735 
NCURSES_EXPORT
(Ë
mvwös°r
 (
WINDOW
 *, , , const *);

736 
NCURSES_EXPORT
(Ë
mvwö°r
 (
WINDOW
 *, , , *);

737 
NCURSES_EXPORT
(Ë
mvw¥ötw
 (
WINDOW
*,,, const *,...)

738 
GCC_PRINTFLIKE
(4,5);

739 
NCURSES_EXPORT
(Ë
mvwsˇnw
 (
WINDOW
 *,,, const *,...)

740 
GCC_SCANFLIKE
(4,5);

741 
NCURSES_EXPORT
(Ë
mvwvlöe
 (
WINDOW
 *,, , 
chty≥
, );

742 
NCURSES_EXPORT
(Ë
«pms
 ();

743 
NCURSES_EXPORT
(
WINDOW
 *Ë
√w∑d
 (,);

744 
NCURSES_EXPORT
(
SCREEN
 *Ë
√wãrm
 (c⁄° *,
FILE
 *,FILE *);

745 
NCURSES_EXPORT
(
WINDOW
 *Ë
√wwö
 (,,,);

746 
NCURSES_EXPORT
(Ë
∆
 ();

747 
NCURSES_EXPORT
(Ë
nocbªak
 ();

748 
NCURSES_EXPORT
(Ë
nodñay
 (
WINDOW
 *,
boﬁ
);

749 
NCURSES_EXPORT
(Ë
n€cho
 ();

750 
NCURSES_EXPORT
(Ë
n⁄l
 ();

751 
NCURSES_EXPORT
(Ë
noqiÊush
 ();

752 
NCURSES_EXPORT
(Ë
n‹aw
 ();

753 
NCURSES_EXPORT
(Ë
nŸimeout
 (
WINDOW
 *,
boﬁ
);

754 
NCURSES_EXPORT
(Ë
ovîœy
 (c⁄° 
WINDOW
*,WINDOW *);

755 
NCURSES_EXPORT
(Ë
ovîwrôe
 (c⁄° 
WINDOW
*,WINDOW *);

756 
NCURSES_EXPORT
(Ë
∑ú_c⁄ã¡
 (
NCURSES_PAIRS_T
,
NCURSES_COLOR_T
*,NCURSES_COLOR_T*);

757 
NCURSES_EXPORT
(Ë
PAIR_NUMBER
 ();

758 
NCURSES_EXPORT
(Ë
≥choch¨
 (
WINDOW
 *, c⁄° 
chty≥
);

759 
NCURSES_EXPORT
(Ë
≤ouåe‰esh
 (
WINDOW
*,,,,,,);

760 
NCURSES_EXPORT
(Ë
¥e‰esh
 (
WINDOW
 *,,,,,,);

761 
NCURSES_EXPORT
(Ë
¥ötw
 (const *,...)

762 
GCC_PRINTFLIKE
(1,2);

763 
NCURSES_EXPORT
(Ë
putwö
 (
WINDOW
 *, 
FILE
 *);

764 
NCURSES_EXPORT
(Ë
qiÊush
 ();

765 
NCURSES_EXPORT
(Ë
øw
 ();

766 
NCURSES_EXPORT
(Ë
ªdøwwö
 (
WINDOW
 *);

767 
NCURSES_EXPORT
(Ë
ª‰esh
 ();

768 
NCURSES_EXPORT
(Ë
ª£ây
 ();

769 
NCURSES_EXPORT
(Ë
ª£t_¥og_mode
 ();

770 
NCURSES_EXPORT
(Ë
ª£t_shñl_mode
 ();

771 
NCURSES_EXPORT
(Ë
rùofÊöe
 (, (*)(
WINDOW
 *, ));

772 
NCURSES_EXPORT
(Ë
ßvëty
 ();

773 
NCURSES_EXPORT
(Ë
sˇnw
 (const *,...)

774 
GCC_SCANFLIKE
(1,2);

775 
NCURSES_EXPORT
(Ë
s¸_dump
 (const *);

776 
NCURSES_EXPORT
(Ë
s¸_öô
 (const *);

777 
NCURSES_EXPORT
(Ë
s¸l
 ();

778 
NCURSES_EXPORT
(Ë
s¸ﬁl
 (
WINDOW
 *);

779 
NCURSES_EXPORT
(Ë
s¸ﬁlok
 (
WINDOW
 *,
boﬁ
);

780 
NCURSES_EXPORT
(Ë
s¸_ª°‹e
 (const *);

781 
NCURSES_EXPORT
(Ë
s¸_£t
 (const *);

782 
NCURSES_EXPORT
(Ë
£ts¸ªg
 (,);

783 
NCURSES_EXPORT
(
SCREEN
 *Ë
£t_ãrm
 (SCREEN *);

784 
NCURSES_EXPORT
(Ë
¶k_©åoff
 (c⁄° 
chty≥
);

785 
NCURSES_EXPORT
(Ë
¶k_©å_off
 (c⁄° 
©å_t
, *);

786 
NCURSES_EXPORT
(Ë
¶k_©å⁄
 (c⁄° 
chty≥
);

787 
NCURSES_EXPORT
(Ë
¶k_©å_⁄
 (
©å_t
,*);

788 
NCURSES_EXPORT
(Ë
¶k_©å£t
 (c⁄° 
chty≥
);

789 
NCURSES_EXPORT
(
©å_t
Ë
¶k_©å
 ();

790 
NCURSES_EXPORT
(Ë
¶k_©å_£t
 (c⁄° 
©å_t
,
NCURSES_PAIRS_T
,*);

791 
NCURSES_EXPORT
(Ë
¶k_˛ór
 ();

792 
NCURSES_EXPORT
(Ë
¶k_cﬁ‹
 (
NCURSES_PAIRS_T
);

793 
NCURSES_EXPORT
(Ë
¶k_öô
 ();

794 
NCURSES_EXPORT
(*Ë
¶k_œbñ
 ();

795 
NCURSES_EXPORT
(Ë
¶k_nouåe‰esh
 ();

796 
NCURSES_EXPORT
(Ë
¶k_ª‰esh
 ();

797 
NCURSES_EXPORT
(Ë
¶k_ª°‹e
 ();

798 
NCURSES_EXPORT
(Ë
¶k_£t
 (,const *,);

799 
NCURSES_EXPORT
(Ë
¶k_touch
 ();

800 
NCURSES_EXPORT
(Ë
°™dout
 ();

801 
NCURSES_EXPORT
(Ë
°™díd
 ();

802 
NCURSES_EXPORT
(Ë
°¨t_cﬁ‹
 ();

803 
NCURSES_EXPORT
(
WINDOW
 *Ë
sub∑d
 (WINDOW *, , , , );

804 
NCURSES_EXPORT
(
WINDOW
 *Ë
subwö
 (WINDOW *, , , , );

805 
NCURSES_EXPORT
(Ë
syncok
 (
WINDOW
 *, 
boﬁ
);

806 
NCURSES_EXPORT
(
chty≥
Ë
ãrm©ås
 ();

807 
NCURSES_EXPORT
(*Ë
ãrm«me
 ();

808 
NCURSES_EXPORT
(Ë
timeout
 ();

809 
NCURSES_EXPORT
(Ë
touchlöe
 (
WINDOW
 *, , );

810 
NCURSES_EXPORT
(Ë
touchwö
 (
WINDOW
 *);

811 
NCURSES_EXPORT
(Ë
ty≥ahód
 ();

812 
NCURSES_EXPORT
(Ë
ungëch
 ();

813 
NCURSES_EXPORT
(Ë
u¡ouchwö
 (
WINDOW
 *);

814 
NCURSES_EXPORT
(Ë
u£_ív
 (
boﬁ
);

815 
NCURSES_EXPORT
(Ë
u£_tio˘l
 (
boﬁ
);

816 
NCURSES_EXPORT
(Ë
vid©å
 (
chty≥
);

817 
NCURSES_EXPORT
(Ë
vidputs
 (
chty≥
, 
NCURSES_OUTC
);

818 
NCURSES_EXPORT
(Ë
vlöe
 (
chty≥
, );

819 
NCURSES_EXPORT
(Ë
vw¥ötw
 (
WINDOW
 *, c⁄° *, 
va_li°
Ë
GCC_DEPRECATED
(
u£
 
vw_¥ötw
)

820 
GCC_PRINTFLIKE
(2,0);

821 
NCURSES_EXPORT
(Ë
vw_¥ötw
 (
WINDOW
 *, c⁄° *, 
va_li°
)

822 
GCC_PRINTFLIKE
(2,0);

823 
NCURSES_EXPORT
(Ë
vwsˇnw
 (
WINDOW
 *, c⁄° *, 
va_li°
Ë
GCC_DEPRECATED
(
u£
 
vw_sˇnw
)

824 
GCC_SCANFLIKE
(2,0);

825 
NCURSES_EXPORT
(Ë
vw_sˇnw
 (
WINDOW
 *, c⁄° *, 
va_li°
)

826 
GCC_SCANFLIKE
(2,0);

827 
NCURSES_EXPORT
(Ë
waddch
 (
WINDOW
 *, c⁄° 
chty≥
);

828 
NCURSES_EXPORT
(Ë
waddchn°r
 (
WINDOW
 *,c⁄° 
chty≥
 *,);

829 
NCURSES_EXPORT
(Ë
waddch°r
 (
WINDOW
 *,c⁄° 
chty≥
 *);

830 
NCURSES_EXPORT
(Ë
waddn°r
 (
WINDOW
 *,const *,);

831 
NCURSES_EXPORT
(Ë
wadd°r
 (
WINDOW
 *,const *);

832 
NCURSES_EXPORT
(Ë
w©å⁄
 (
WINDOW
 *, );

833 
NCURSES_EXPORT
(Ë
w©åoff
 (
WINDOW
 *, );

834 
NCURSES_EXPORT
(Ë
w©å£t
 (
WINDOW
 *, );

835 
NCURSES_EXPORT
(Ë
w©å_gë
 (
WINDOW
 *, 
©å_t
 *, 
NCURSES_PAIRS_T
 *, *);

836 
NCURSES_EXPORT
(Ë
w©å_⁄
 (
WINDOW
 *, 
©å_t
, *);

837 
NCURSES_EXPORT
(Ë
w©å_off
 (
WINDOW
 *, 
©å_t
, *);

838 
NCURSES_EXPORT
(Ë
w©å_£t
 (
WINDOW
 *, 
©å_t
, 
NCURSES_PAIRS_T
, *);

839 
NCURSES_EXPORT
(Ë
wbkgd
 (
WINDOW
 *, 
chty≥
);

840 
NCURSES_EXPORT
(Ë
wbkgd£t
 (
WINDOW
 *,
chty≥
);

841 
NCURSES_EXPORT
(Ë
wb‹dî
 (
WINDOW
 *,
chty≥
,chtype,chtype,chtype,chtype,chtype,chtype,chtype);

842 
NCURSES_EXPORT
(Ë
wchg©
 (
WINDOW
 *, , 
©å_t
, 
NCURSES_PAIRS_T
, const *);

843 
NCURSES_EXPORT
(Ë
w˛ór
 (
WINDOW
 *);

844 
NCURSES_EXPORT
(Ë
w˛πobŸ
 (
WINDOW
 *);

845 
NCURSES_EXPORT
(Ë
w˛π€ﬁ
 (
WINDOW
 *);

846 
NCURSES_EXPORT
(Ë
wcﬁ‹_£t
 (
WINDOW
*,
NCURSES_PAIRS_T
,*);

847 
NCURSES_EXPORT
(Ë
wcursyncup
 (
WINDOW
 *);

848 
NCURSES_EXPORT
(Ë
wdñch
 (
WINDOW
 *);

849 
NCURSES_EXPORT
(Ë
wdñëñn
 (
WINDOW
 *);

850 
NCURSES_EXPORT
(Ë
wechoch¨
 (
WINDOW
 *, c⁄° 
chty≥
);

851 
NCURSES_EXPORT
(Ë
wîa£
 (
WINDOW
 *);

852 
NCURSES_EXPORT
(Ë
wgëch
 (
WINDOW
 *);

853 
NCURSES_EXPORT
(Ë
wgën°r
 (
WINDOW
 *,*,);

854 
NCURSES_EXPORT
(Ë
wgë°r
 (
WINDOW
 *, *);

855 
NCURSES_EXPORT
(Ë
whlöe
 (
WINDOW
 *, 
chty≥
, );

856 
NCURSES_EXPORT
(
chty≥
Ë
wöch
 (
WINDOW
 *);

857 
NCURSES_EXPORT
(Ë
wöchn°r
 (
WINDOW
 *, 
chty≥
 *, );

858 
NCURSES_EXPORT
(Ë
wöch°r
 (
WINDOW
 *, 
chty≥
 *);

859 
NCURSES_EXPORT
(Ë
wön°r
 (
WINDOW
 *, *, );

860 
NCURSES_EXPORT
(Ë
wösch
 (
WINDOW
 *, 
chty≥
);

861 
NCURSES_EXPORT
(Ë
wösdñ 
 (
WINDOW
 *,);

862 
NCURSES_EXPORT
(Ë
wö£π 
 (
WINDOW
 *);

863 
NCURSES_EXPORT
(Ë
wö¢°r
 (
WINDOW
 *, const *,);

864 
NCURSES_EXPORT
(Ë
wös°r
 (
WINDOW
 *, const *);

865 
NCURSES_EXPORT
(Ë
wö°r
 (
WINDOW
 *, *);

866 
NCURSES_EXPORT
(Ë
wmove
 (
WINDOW
 *,,);

867 
NCURSES_EXPORT
(Ë
wnouåe‰esh
 (
WINDOW
 *);

868 
NCURSES_EXPORT
(Ë
w¥ötw
 (
WINDOW
 *, const *,...)

869 
GCC_PRINTFLIKE
(2,3);

870 
NCURSES_EXPORT
(Ë
wªdøw 
 (
WINDOW
 *,,);

871 
NCURSES_EXPORT
(Ë
wª‰esh
 (
WINDOW
 *);

872 
NCURSES_EXPORT
(Ë
wsˇnw
 (
WINDOW
 *, const *,...)

873 
GCC_SCANFLIKE
(2,3);

874 
NCURSES_EXPORT
(Ë
ws¸l
 (
WINDOW
 *,);

875 
NCURSES_EXPORT
(Ë
w£ts¸ªg
 (
WINDOW
 *,,);

876 
NCURSES_EXPORT
(Ë
w°™dout
 (
WINDOW
 *);

877 
NCURSES_EXPORT
(Ë
w°™díd
 (
WINDOW
 *);

878 
NCURSES_EXPORT
(Ë
wsyncdown
 (
WINDOW
 *);

879 
NCURSES_EXPORT
(Ë
wsyncup
 (
WINDOW
 *);

880 
NCURSES_EXPORT
(Ë
wtimeout
 (
WINDOW
 *,);

881 
NCURSES_EXPORT
(Ë
wtouch 
 (
WINDOW
 *,,,);

882 
NCURSES_EXPORT
(Ë
wvlöe
 (
WINDOW
 *,
chty≥
,);

887 
NCURSES_EXPORT
(Ë
tigëÊag
 (const *);

888 
NCURSES_EXPORT
(Ë
tigënum
 (const *);

889 
NCURSES_EXPORT
(*Ë
tigë°r
 (const *);

890 
NCURSES_EXPORT
(Ë
puç
 (const *);

892 #i‡
NCURSES_TPARM_VARARGS


893 
NCURSES_EXPORT
(*Ë
ç¨m
 (const *, ...);

895 
NCURSES_EXPORT
(*Ë
ç¨m
 (c⁄° *, 
NCURSES_TPARM_ARG
,NCURSES_TPARM_ARG,NCURSES_TPARM_ARG,NCURSES_TPARM_ARG,NCURSES_TPARM_ARG,NCURSES_TPARM_ARG,NCURSES_TPARM_ARG,NCURSES_TPARM_ARG,NCURSES_TPARM_ARG);

898 
NCURSES_EXPORT
(*Ë
tù¨m
 (const *, ...);

903 
NCURSES_EXPORT
(Ë
gë©ås
 (c⁄° 
WINDOW
 *);

904 
NCURSES_EXPORT
(Ë
gëcurx
 (c⁄° 
WINDOW
 *);

905 
NCURSES_EXPORT
(Ë
gëcury
 (c⁄° 
WINDOW
 *);

906 
NCURSES_EXPORT
(Ë
gëbegx
 (c⁄° 
WINDOW
 *);

907 
NCURSES_EXPORT
(Ë
gëbegy
 (c⁄° 
WINDOW
 *);

908 
NCURSES_EXPORT
(Ë
gëmaxx
 (c⁄° 
WINDOW
 *);

909 
NCURSES_EXPORT
(Ë
gëmaxy
 (c⁄° 
WINDOW
 *);

910 
NCURSES_EXPORT
(Ë
gë∑rx
 (c⁄° 
WINDOW
 *);

911 
NCURSES_EXPORT
(Ë
gë∑ry
 (c⁄° 
WINDOW
 *);

916 #i‡!
NCURSES_WIDECHAR


917 
	#vid_©å
(
a
,
∑ú
,
›ts
Ë
	`vid©å
◊)

	)

924 #unde‡
NCURSES_EXT_FUNCS


925 
	#NCURSES_EXT_FUNCS
 20211021

	)

926 (*
	gNCURSES_WINDOW_CB
)(
	tWINDOW
 *, *);

927 (*
	gNCURSES_SCREEN_CB
)(
	tSCREEN
 *, *);

928 
NCURSES_EXPORT
(
boﬁ
Ë
is_ãrm_ªsized
 (, );

929 
NCURSES_EXPORT
(*Ë
keybound
 (, );

930 
NCURSES_EXPORT
(c⁄° *Ë
cur£s_vîsi⁄
 ();

931 
NCURSES_EXPORT
(Ë
Æloc_∑ú
 (, );

932 
NCURSES_EXPORT
(Ë
assume_deÁu…_cﬁ‹s
 (, );

933 
NCURSES_EXPORT
(Ë
deföe_key
 (const *, );

934 
NCURSES_EXPORT
(Ë
exãnded_cﬁ‹_c⁄ã¡
(, *, *, *);

935 
NCURSES_EXPORT
(Ë
exãnded_∑ú_c⁄ã¡
(, *, *);

936 
NCURSES_EXPORT
(Ë
exãnded_¶k_cﬁ‹
();

937 
NCURSES_EXPORT
(Ë
föd_∑ú
 (, );

938 
NCURSES_EXPORT
(Ë
‰ì_∑ú
 ();

939 
NCURSES_EXPORT
(Ë
gë_escdñay
 ();

940 
NCURSES_EXPORT
(Ë
öô_exãnded_cﬁ‹
(, , , );

941 
NCURSES_EXPORT
(Ë
öô_exãnded_∑ú
(, , );

942 
NCURSES_EXPORT
(Ë
key_deföed
 (const *);

943 
NCURSES_EXPORT
(Ë
keyok
 (, 
boﬁ
);

944 
NCURSES_EXPORT
(Ë
ª£t_cﬁ‹_∑ús
 ();

945 
NCURSES_EXPORT
(Ë
ªsize_ãrm
 (, );

946 
NCURSES_EXPORT
(Ë
ªsizëîm
 (, );

947 
NCURSES_EXPORT
(Ë
£t_escdñay
 ();

948 
NCURSES_EXPORT
(Ë
£t_èbsize
 ();

949 
NCURSES_EXPORT
(Ë
u£_deÁu…_cﬁ‹s
 ();

950 
NCURSES_EXPORT
(Ë
u£_exãnded_«mes
 (
boﬁ
);

951 
NCURSES_EXPORT
(Ë
u£_Àgacy_codög
 ();

952 
NCURSES_EXPORT
(Ë
u£_s¸ìn
 (
SCREEN
 *, 
NCURSES_SCREEN_CB
, *);

953 
NCURSES_EXPORT
(Ë
u£_wödow
 (
WINDOW
 *, 
NCURSES_WINDOW_CB
, *);

954 
NCURSES_EXPORT
(Ë
wªsize
 (
WINDOW
 *, , );

955 
NCURSES_EXPORT
(Ë
nofûãr
();

961 
NCURSES_EXPORT
(
WINDOW
 *Ë
wgë∑ª¡
 (const WINDOW *);

962 
NCURSES_EXPORT
(
boﬁ
Ë
is_˛óªd
 (c⁄° 
WINDOW
 *);

963 
NCURSES_EXPORT
(
boﬁ
Ë
is_idcok
 (c⁄° 
WINDOW
 *);

964 
NCURSES_EXPORT
(
boﬁ
Ë
is_idlok
 (c⁄° 
WINDOW
 *);

965 
NCURSES_EXPORT
(
boﬁ
Ë
is_immedok
 (c⁄° 
WINDOW
 *);

966 
NCURSES_EXPORT
(
boﬁ
Ë
is_key∑d
 (c⁄° 
WINDOW
 *);

967 
NCURSES_EXPORT
(
boﬁ
Ë
is_Àaveok
 (c⁄° 
WINDOW
 *);

968 
NCURSES_EXPORT
(
boﬁ
Ë
is_nodñay
 (c⁄° 
WINDOW
 *);

969 
NCURSES_EXPORT
(
boﬁ
Ë
is_nŸimeout
 (c⁄° 
WINDOW
 *);

970 
NCURSES_EXPORT
(
boﬁ
Ë
is_∑d
 (c⁄° 
WINDOW
 *);

971 
NCURSES_EXPORT
(
boﬁ
Ë
is_s¸ﬁlok
 (c⁄° 
WINDOW
 *);

972 
NCURSES_EXPORT
(
boﬁ
Ë
is_subwö
 (c⁄° 
WINDOW
 *);

973 
NCURSES_EXPORT
(
boﬁ
Ë
is_syncok
 (c⁄° 
WINDOW
 *);

974 
NCURSES_EXPORT
(Ë
wgëdñay
 (c⁄° 
WINDOW
 *);

975 
NCURSES_EXPORT
(Ë
wgës¸ªg
 (c⁄° 
WINDOW
 *, *, *);

978 
	#cur£s_vîsi⁄
(Ë
NCURSES_VERSION


	)

986 #unde‡
NCURSES_SP_FUNCS


987 
	#NCURSES_SP_FUNCS
 20211021

	)

988 
	#NCURSES_SP_NAME
(
«me
Ë«me##
_•


	)

991 
	#NCURSES_SP_OUTC
 
	`NCURSES_SP_NAME
(
NCURSES_OUTC
)

	)

992 (*
	gNCURSES_SP_OUTC
)(
	tSCREEN
*, );

994 
NCURSES_EXPORT
(
SCREEN
 *Ë
√w_¥es¸
 ();

996 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
baudøã
Ë(
SCREEN
*);

997 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
bìp
Ë(
SCREEN
*);

998 
NCURSES_EXPORT
(
boﬁ
Ë
NCURSES_SP_NAME
(
ˇn_ch™ge_cﬁ‹
Ë(
SCREEN
*);

999 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
cbªak
Ë(
SCREEN
*);

1000 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
curs_£t
Ë(
SCREEN
*, );

1001 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
cﬁ‹_c⁄ã¡
Ë(
SCREEN
*, 
NCURSES_PAIRS_T
, 
NCURSES_COLOR_T
*, NCURSES_COLOR_T*, NCURSES_COLOR_T*);

1002 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
def_¥og_mode
Ë(
SCREEN
*);

1003 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
def_shñl_mode
Ë(
SCREEN
*);

1004 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
dñay_ouçut
Ë(
SCREEN
*, );

1005 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
doupd©e
Ë(
SCREEN
*);

1006 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
echo
Ë(
SCREEN
*);

1007 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
ídwö
Ë(
SCREEN
*);

1008 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
îa£ch¨
Ë(
SCREEN
*);

1009 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
fûãr
Ë(
SCREEN
*);

1010 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
Êash
Ë(
SCREEN
*);

1011 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
Êushöp
Ë(
SCREEN
*);

1012 
NCURSES_EXPORT
(
WINDOW
 *Ë
NCURSES_SP_NAME
(
gëwö
Ë(
SCREEN
*, 
FILE
 *);

1013 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
hÆfdñay
Ë(
SCREEN
*, );

1014 
NCURSES_EXPORT
(
boﬁ
Ë
NCURSES_SP_NAME
(
has_cﬁ‹s
Ë(
SCREEN
*);

1015 
NCURSES_EXPORT
(
boﬁ
Ë
NCURSES_SP_NAME
(
has_ic
Ë(
SCREEN
*);

1016 
NCURSES_EXPORT
(
boﬁ
Ë
NCURSES_SP_NAME
(
has_û
Ë(
SCREEN
*);

1017 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
öô_cﬁ‹
Ë(
SCREEN
*, 
NCURSES_COLOR_T
, NCURSES_COLOR_T, NCURSES_COLOR_T, NCURSES_COLOR_T);

1018 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
öô_∑ú
Ë(
SCREEN
*, 
NCURSES_PAIRS_T
, 
NCURSES_COLOR_T
, NCURSES_COLOR_T);

1019 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
öåÊush
Ë(
SCREEN
*, 
WINDOW
*, 
boﬁ
);

1020 
NCURSES_EXPORT
(
boﬁ
Ë
NCURSES_SP_NAME
(
i£ndwö
Ë(
SCREEN
*);

1021 
NCURSES_EXPORT
(
NCURSES_CONST
 *Ë
NCURSES_SP_NAME
(
key«me
Ë(
SCREEN
*, );

1022 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
kûlch¨
Ë(
SCREEN
*);

1023 
NCURSES_EXPORT
(*Ë
NCURSES_SP_NAME
(
l⁄g«me
Ë(
SCREEN
*);

1024 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
mvcur
Ë(
SCREEN
*, , , , );

1025 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
«pms
Ë(
SCREEN
*, );

1026 
NCURSES_EXPORT
(
WINDOW
 *Ë
NCURSES_SP_NAME
(
√w∑d
Ë(
SCREEN
*, , );

1027 
NCURSES_EXPORT
(
SCREEN
 *Ë
NCURSES_SP_NAME
(
√wãrm
Ë(SCREEN*, c⁄° *, 
FILE
 *, FILE *);

1028 
NCURSES_EXPORT
(
WINDOW
 *Ë
NCURSES_SP_NAME
(
√wwö
Ë(
SCREEN
*, , , , );

1029 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
∆
Ë(
SCREEN
*);

1030 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
nocbªak
Ë(
SCREEN
*);

1031 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
n€cho
Ë(
SCREEN
*);

1032 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
n⁄l
Ë(
SCREEN
*);

1033 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
noqiÊush
Ë(
SCREEN
*);

1034 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
n‹aw
Ë(
SCREEN
*);

1035 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
∑ú_c⁄ã¡
Ë(
SCREEN
*, 
NCURSES_PAIRS_T
, 
NCURSES_COLOR_T
*, NCURSES_COLOR_T*);

1036 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
qiÊush
Ë(
SCREEN
*);

1037 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
øw
Ë(
SCREEN
*);

1038 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
ª£t_¥og_mode
Ë(
SCREEN
*);

1039 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
ª£t_shñl_mode
Ë(
SCREEN
*);

1040 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
ª£ây
Ë(
SCREEN
*);

1041 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
rùofÊöe
Ë(
SCREEN
*, , (*)(
WINDOW
 *, ));

1042 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
ßvëty
Ë(
SCREEN
*);

1043 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
s¸_öô
Ë(
SCREEN
*, const *);

1044 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
s¸_ª°‹e
Ë(
SCREEN
*, const *);

1045 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
s¸_£t
Ë(
SCREEN
*, const *);

1046 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
¶k_©åoff
Ë(
SCREEN
*, c⁄° 
chty≥
);

1047 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
¶k_©å⁄
Ë(
SCREEN
*, c⁄° 
chty≥
);

1048 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
¶k_©å£t
Ë(
SCREEN
*, c⁄° 
chty≥
);

1049 
NCURSES_EXPORT
(
©å_t
Ë
NCURSES_SP_NAME
(
¶k_©å
Ë(
SCREEN
*);

1050 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
¶k_©å_£t
Ë(
SCREEN
*, c⁄° 
©å_t
, 
NCURSES_PAIRS_T
, *);

1051 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
¶k_˛ór
Ë(
SCREEN
*);

1052 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
¶k_cﬁ‹
Ë(
SCREEN
*, 
NCURSES_PAIRS_T
);

1053 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
¶k_öô
Ë(
SCREEN
*, );

1054 
NCURSES_EXPORT
(*Ë
NCURSES_SP_NAME
(
¶k_œbñ
Ë(
SCREEN
*, );

1055 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
¶k_nouåe‰esh
Ë(
SCREEN
*);

1056 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
¶k_ª‰esh
Ë(
SCREEN
*);

1057 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
¶k_ª°‹e
Ë(
SCREEN
*);

1058 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
¶k_£t
Ë(
SCREEN
*, , const *, );

1059 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
¶k_touch
Ë(
SCREEN
*);

1060 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
°¨t_cﬁ‹
Ë(
SCREEN
*);

1061 
NCURSES_EXPORT
(
chty≥
Ë
NCURSES_SP_NAME
(
ãrm©ås
Ë(
SCREEN
*);

1062 
NCURSES_EXPORT
(*Ë
NCURSES_SP_NAME
(
ãrm«me
Ë(
SCREEN
*);

1063 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
ty≥ahód
Ë(
SCREEN
*, );

1064 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
ungëch
Ë(
SCREEN
*, );

1065 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
u£_ív
Ë(
SCREEN
*, 
boﬁ
);

1066 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
u£_tio˘l
Ë(
SCREEN
*, 
boﬁ
);

1067 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
vid©å
Ë(
SCREEN
*, 
chty≥
);

1068 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
vidputs
Ë(
SCREEN
*, 
chty≥
, 
NCURSES_SP_OUTC
);

1070 
NCURSES_EXPORT
(*Ë
NCURSES_SP_NAME
(
keybound
Ë(
SCREEN
*, , );

1071 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
Æloc_∑ú
Ë(
SCREEN
*, , );

1072 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
assume_deÁu…_cﬁ‹s
Ë(
SCREEN
*, , );

1073 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
deföe_key
Ë(
SCREEN
*, const *, );

1074 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
exãnded_cﬁ‹_c⁄ã¡
Ë(
SCREEN
*, , *, *, *);

1075 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
exãnded_∑ú_c⁄ã¡
Ë(
SCREEN
*, , *, *);

1076 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
exãnded_¶k_cﬁ‹
Ë(
SCREEN
*, );

1077 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
gë_escdñay
Ë(
SCREEN
*);

1078 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
föd_∑ú
Ë(
SCREEN
*, , );

1079 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
‰ì_∑ú
Ë(
SCREEN
*, );

1080 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
öô_exãnded_cﬁ‹
Ë(
SCREEN
*, , , , );

1081 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
öô_exãnded_∑ú
Ë(
SCREEN
*, , , );

1082 
NCURSES_EXPORT
(
boﬁ
Ë
NCURSES_SP_NAME
(
is_ãrm_ªsized
Ë(
SCREEN
*, , );

1083 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
key_deföed
Ë(
SCREEN
*, const *);

1084 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
keyok
Ë(
SCREEN
*, , 
boﬁ
);

1085 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
nofûãr
Ë(
SCREEN
*);

1086 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
ª£t_cﬁ‹_∑ús
Ë(
SCREEN
*);

1087 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
ªsize_ãrm
Ë(
SCREEN
*, , );

1088 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
ªsizëîm
Ë(
SCREEN
*, , );

1089 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
£t_escdñay
Ë(
SCREEN
*, );

1090 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
£t_èbsize
Ë(
SCREEN
*, );

1091 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
u£_deÁu…_cﬁ‹s
Ë(
SCREEN
*);

1092 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
u£_Àgacy_codög
Ë(
SCREEN
*, );

1095 #unde‡
NCURSES_SP_FUNCS


1096 
	#NCURSES_SP_FUNCS
 0

	)

1097 
	#NCURSES_SP_NAME
(
«me
Ë
	)
name

1098 
	#NCURSES_SP_OUTC
 
NCURSES_OUTC


	)

1103 
	#NCURSES_ATTR_SHIFT
 8

	)

1104 
	#NCURSES_BITS
(
mask
,
shi·
Ë(
	`NCURSES_CAST
(
chty≥
,(mask)Ë<< ((shi·Ë+ 
NCURSES_ATTR_SHIFT
))

	)

1106 
	#A_NORMAL
 (1U - 1U)

	)

1107 
	#A_ATTRIBUTES
 
	`NCURSES_BITS
(~(1U - 1U),0)

	)

1108 
	#A_CHARTEXT
 (
	`NCURSES_BITS
(1U,0Ë- 1U)

	)

1109 
	#A_COLOR
 
	`NCURSES_BITS
(((1UË<< 8Ë- 1U,0)

	)

1110 
	#A_STANDOUT
 
	`NCURSES_BITS
(1U,8)

	)

1111 
	#A_UNDERLINE
 
	`NCURSES_BITS
(1U,9)

	)

1112 
	#A_REVERSE
 
	`NCURSES_BITS
(1U,10)

	)

1113 
	#A_BLINK
 
	`NCURSES_BITS
(1U,11)

	)

1114 
	#A_DIM
 
	`NCURSES_BITS
(1U,12)

	)

1115 
	#A_BOLD
 
	`NCURSES_BITS
(1U,13)

	)

1116 
	#A_ALTCHARSET
 
	`NCURSES_BITS
(1U,14)

	)

1117 
	#A_INVIS
 
	`NCURSES_BITS
(1U,15)

	)

1118 
	#A_PROTECT
 
	`NCURSES_BITS
(1U,16)

	)

1119 
	#A_HORIZONTAL
 
	`NCURSES_BITS
(1U,17)

	)

1120 
	#A_LEFT
 
	`NCURSES_BITS
(1U,18)

	)

1121 
	#A_LOW
 
	`NCURSES_BITS
(1U,19)

	)

1122 
	#A_RIGHT
 
	`NCURSES_BITS
(1U,20)

	)

1123 
	#A_TOP
 
	`NCURSES_BITS
(1U,21)

	)

1124 
	#A_VERTICAL
 
	`NCURSES_BITS
(1U,22)

	)

1127 
	#A_ITALIC
 
	`NCURSES_BITS
(1U,23Ë

	)

1140 
	#gëyx
(
wö
,
y
,
x
Ë(y = 
	`gëcury
(wö), x = 
	`gëcurx
(wö))

	)

1141 
	#gëbegyx
(
wö
,
y
,
x
Ë(y = 
	`gëbegy
(wö), x = 
	`gëbegx
(wö))

	)

1142 
	#gëmaxyx
(
wö
,
y
,
x
Ë(y = 
	`gëmaxy
(wö), x = 
	`gëmaxx
(wö))

	)

1143 
	#gë∑ryx
(
wö
,
y
,
x
Ë(y = 
	`gë∑ry
(wö), x = 
	`gë∑rx
(wö))

	)

1145 
	#gësyx
(
y
,
x
Ëdÿ{ i‡(
√ws¸
) { \

1146 i‡(
	`is_Àaveok
(
√ws¸
)) \

1147 (
y
Ë(
x
) = -1; \

1149 
	`gëyx
(
√ws¸
,(
y
), (
x
)); \

1151 } 0)

	)

1153 
	#£tsyx
(
y
,
x
Ëdÿ{ i‡(
√ws¸
) { \

1154 i‡((
y
Ë=-1 && (
x
) == -1) \

1155 
	`Àaveok
(
√ws¸
, 
TRUE
); \

1157 
	`Àaveok
(
√ws¸
, 
FALSE
); \

1158 
	`wmove
(
√ws¸
, (
y
), (
x
)); \

1161 } 0)

	)

1163 #i‚de‡
NCURSES_NOMACROS


1169 
	#wgë°r
(
w
, 
s
Ë
	`wgën°r
(w, s, -1)

	)

1170 
	#gën°r
(
s
, 
n
Ë
	`wgën°r
(
°ds¸
, s, (n))

	)

1172 
	#£âîm
(
ãrm
Ë
	`£tu±îm
—îm, 1, (*)0)

	)

1174 
	#fixãrm
(Ë
	`ª£t_¥og_mode
()

	)

1175 
	#ª£âîm
(Ë
	`ª£t_shñl_mode
()

	)

1176 
	#ßvëîm
(Ë
	`def_¥og_mode
()

	)

1177 
	#¸mode
(Ë
	`cbªak
()

	)

1178 
	#no¸mode
(Ë
	`nocbªak
()

	)

1179 
	#gëtmode
()

	)

1182 #i‡!
NCURSES_OPAQUE


1183 
	#gë©ås
(
wö
Ë
	`NCURSES_CAST
(, 
	`NCURSES_OK_ADDR
(wöË? (wö)->
_©ås
 : 
A_NORMAL
)

	)

1184 
	#gëcurx
(
wö
Ë(
	`NCURSES_OK_ADDR
(wöË? (wö)->
_curx
 : 
ERR
)

	)

1185 
	#gëcury
(
wö
Ë(
	`NCURSES_OK_ADDR
(wöË? (wö)->
_cury
 : 
ERR
)

	)

1186 
	#gëbegx
(
wö
Ë(
	`NCURSES_OK_ADDR
(wöË? (wö)->
_begx
 : 
ERR
)

	)

1187 
	#gëbegy
(
wö
Ë(
	`NCURSES_OK_ADDR
(wöË? (wö)->
_begy
 : 
ERR
)

	)

1188 
	#gëmaxx
(
wö
Ë(
	`NCURSES_OK_ADDR
(wöË? ((wö)->
_maxx
 + 1Ë: 
ERR
)

	)

1189 
	#gëmaxy
(
wö
Ë(
	`NCURSES_OK_ADDR
(wöË? ((wö)->
_maxy
 + 1Ë: 
ERR
)

	)

1190 
	#gë∑rx
(
wö
Ë(
	`NCURSES_OK_ADDR
(wöË? (wö)->
_∑rx
 : 
ERR
)

	)

1191 
	#gë∑ry
(
wö
Ë(
	`NCURSES_OK_ADDR
(wöË? (wö)->
_∑ry
 : 
ERR
)

	)

1194 
	#w°™dout
(
wö
Ë(
	`w©å£t
(wö,
A_STANDOUT
))

	)

1195 
	#w°™díd
(
wö
Ë(
	`w©å£t
(wö,
A_NORMAL
))

	)

1197 
	#w©å⁄
(
wö
,
©
Ë
	`w©å_⁄
(wö, 
	`NCURSES_CAST
(
©å_t
,át), 
NULL
)

	)

1198 
	#w©åoff
(
wö
,
©
Ë
	`w©å_off
(wö, 
	`NCURSES_CAST
(
©å_t
,át), 
NULL
)

	)

1200 #i‡!
NCURSES_OPAQUE


1201 #i‡
NCURSES_WATTR_MACROS


1202 #i‡
NCURSES_WIDECHAR
 && 1

1203 
	#w©å£t
(
wö
,
©
) \

1204 (
	`NCURSES_OK_ADDR
(
wö
) \

1205 ? ((
wö
)->
_cﬁ‹
 = 
	`NCURSES_CAST
(, 
	`PAIR_NUMBER
(
©
)), \

1206 (
wö
)->
_©ås
 = 
	`NCURSES_CAST
(
©å_t
, 
©
), \

1207 
OK
) \

1208 : 
ERR
)

	)

1210 
	#w©å£t
(
wö
,
©
) \

1211 (
	`NCURSES_OK_ADDR
(
wö
) \

1212 ? ((
wö
)->
_©ås
 = 
	`NCURSES_CAST
(
©å_t
, 
©
), \

1213 
OK
) \

1214 : 
ERR
)

	)

1219 
	#s¸ﬁl
(
wö
Ë
	`ws¸l
(wö,1)

	)

1221 
	#touchwö
(
wö
Ë
	`wtouch 
((wö), 0, 
	`gëmaxy
(wö), 1)

	)

1222 
	#touchlöe
(
wö
, 
s
, 
c
Ë
	`wtouch 
((wö), s, c, 1)

	)

1223 
	#u¡ouchwö
(
wö
Ë
	`wtouch 
((wö), 0, 
	`gëmaxy
(wö), 0)

	)

1225 
	#box
(
wö
, 
v
, 
h
Ë
	`wb‹dî
(wö, v, v, h, h, 0, 0, 0, 0)

	)

1226 
	#b‹dî
(
ls
, 
rs
, 
ts
, 
bs
, 
é
, 
å
, 
bl
, 
br
Ë
	`wb‹dî
(
°ds¸
,Üs,Ñs,Ås, bs,Ål,År, bl, br)

	)

1227 
	#hlöe
(
ch
, 
n
Ë
	`whlöe
(
°ds¸
, ch, (n))

	)

1228 
	#vlöe
(
ch
, 
n
Ë
	`wvlöe
(
°ds¸
, ch, (n))

	)

1230 
	#wö°r
(
w
, 
s
Ë
	`wön°r
(w, s, -1)

	)

1231 
	#wöch°r
(
w
, 
s
Ë
	`wöchn°r
(w, s, -1)

	)

1232 
	#wös°r
(
w
, 
s
Ë
	`wö¢°r
(w, s, -1)

	)

1234 #i‡!
NCURSES_OPAQUE


1235 
	#ªdøwwö
(
wö
Ë
	`wªdøw 
(wö, 0, (
	`NCURSES_OK_ADDR
(wöË? (wö)->
_maxy
+1 : -1))

	)

1238 
	#wadd°r
(
wö
,
°r
Ë
	`waddn°r
(wö,°r,-1)

	)

1239 
	#waddch°r
(
wö
,
°r
Ë
	`waddchn°r
(wö,°r,-1)

	)

1244 
	#COLOR_PAIR
(
n
Ë(
	`NCURSES_BITS
(“), 0Ë& 
A_COLOR
)

	)

1245 
	#PAIR_NUMBER
(
a
Ë(
	`NCURSES_CAST
(,((NCURSES_CAST(,◊)Ë& 
A_COLOR
Ë>> 
NCURSES_ATTR_SHIFT
)))

	)

1251 
	#addch
(
ch
Ë
	`waddch
(
°ds¸
,(ch))

	)

1252 
	#addchn°r
(
°r
,
n
Ë
	`waddchn°r
(
°ds¸
,(°r),“))

	)

1253 
	#addch°r
(
°r
Ë
	`waddch°r
(
°ds¸
,(°r))

	)

1254 
	#addn°r
(
°r
,
n
Ë
	`waddn°r
(
°ds¸
,(°r),“))

	)

1255 
	#add°r
(
°r
Ë
	`waddn°r
(
°ds¸
,(°r),-1)

	)

1256 
	#©å_gë
(
≠
,
˝
,
o
Ë
	`w©å_gë
(
°ds¸
,◊p),(˝),(o))

	)

1257 
	#©å_off
(
a
,
o
Ë
	`w©å_off
(
°ds¸
,◊),(o))

	)

1258 
	#©å_⁄
(
a
,
o
Ë
	`w©å_⁄
(
°ds¸
,◊),(o))

	)

1259 
	#©å_£t
(
a
,
c
,
o
Ë
	`w©å_£t
(
°ds¸
,◊),(c),(o))

	)

1260 
	#©åoff
(
©
Ë
	`w©åoff
(
°ds¸
,◊t))

	)

1261 
	#©å⁄
(
©
Ë
	`w©å⁄
(
°ds¸
,◊t))

	)

1262 
	#©å£t
(
©
Ë
	`w©å£t
(
°ds¸
,◊t))

	)

1263 
	#bkgd
(
ch
Ë
	`wbkgd
(
°ds¸
,(ch))

	)

1264 
	#bkgd£t
(
ch
Ë
	`wbkgd£t
(
°ds¸
,(ch))

	)

1265 
	#chg©
(
n
,
a
,
c
,
o
Ë
	`wchg©
(
°ds¸
,“),◊),(c),(o))

	)

1266 
	#˛ór
(Ë
	`w˛ór
(
°ds¸
)

	)

1267 
	#˛πobŸ
(Ë
	`w˛πobŸ
(
°ds¸
)

	)

1268 
	#˛π€ﬁ
(Ë
	`w˛π€ﬁ
(
°ds¸
)

	)

1269 
	#cﬁ‹_£t
(
c
,
o
Ë
	`wcﬁ‹_£t
(
°ds¸
,(c),(o))

	)

1270 
	#dñch
(Ë
	`wdñch
(
°ds¸
)

	)

1271 
	#dñëñn
(Ë
	`wösdñ 
(
°ds¸
,-1)

	)

1272 
	#echoch¨
(
c
Ë
	`wechoch¨
(
°ds¸
,(c))

	)

1273 
	#îa£
(Ë
	`wîa£
(
°ds¸
)

	)

1274 
	#gëch
(Ë
	`wgëch
(
°ds¸
)

	)

1275 
	#gë°r
(
°r
Ë
	`wgë°r
(
°ds¸
,(°r))

	)

1276 
	#öch
(Ë
	`wöch
(
°ds¸
)

	)

1277 
	#öchn°r
(
s
,
n
Ë
	`wöchn°r
(
°ds¸
,(s),“))

	)

1278 
	#öch°r
(
s
Ë
	`wöch°r
(
°ds¸
,(s))

	)

1279 
	#ön°r
(
s
,
n
Ë
	`wön°r
(
°ds¸
,(s),“))

	)

1280 
	#ösch
(
c
Ë
	`wösch
(
°ds¸
,(c))

	)

1281 
	#ösdñ 
(
n
Ë
	`wösdñ 
(
°ds¸
,“))

	)

1282 
	#ö£π 
(Ë
	`wösdñ 
(
°ds¸
,1)

	)

1283 
	#ö¢°r
(
s
,
n
Ë
	`wö¢°r
(
°ds¸
,(s),“))

	)

1284 
	#ös°r
(
s
Ë
	`wös°r
(
°ds¸
,(s))

	)

1285 
	#ö°r
(
s
Ë
	`wö°r
(
°ds¸
,(s))

	)

1286 
	#move
(
y
,
x
Ë
	`wmove
(
°ds¸
,(y),(x))

	)

1287 
	#ª‰esh
(Ë
	`wª‰esh
(
°ds¸
)

	)

1288 
	#s¸l
(
n
Ë
	`ws¸l
(
°ds¸
,“))

	)

1289 
	#£ts¸ªg
(
t
,
b
Ë
	`w£ts¸ªg
(
°ds¸
,—),(b))

	)

1290 
	#°™díd
(Ë
	`w°™díd
(
°ds¸
)

	)

1291 
	#°™dout
(Ë
	`w°™dout
(
°ds¸
)

	)

1292 
	#timeout
(
dñay
Ë
	`wtimeout
(
°ds¸
,(dñay))

	)

1293 
	#wdñëñn
(
wö
Ë
	`wösdñ 
(wö,-1)

	)

1294 
	#wö£π 
(
wö
Ë
	`wösdñ 
(wö,1)

	)

1300 
	#mvwaddch
(
wö
,
y
,
x
,
ch
Ë(
	`wmove
((wö),(y),(x)Ë=
ERR
 ? ERR : 
	`waddch
((wö),(ch)))

	)

1301 
	#mvwaddchn°r
(
wö
,
y
,
x
,
°r
,
n
Ë(
	`wmove
((wö),(y),(x)Ë=
ERR
 ? ERR : 
	`waddchn°r
((wö),(°r),“)))

	)

1302 
	#mvwaddch°r
(
wö
,
y
,
x
,
°r
Ë(
	`wmove
((wö),(y),(x)Ë=
ERR
 ? ERR : 
	`waddchn°r
((wö),(°r),-1))

	)

1303 
	#mvwaddn°r
(
wö
,
y
,
x
,
°r
,
n
Ë(
	`wmove
((wö),(y),(x)Ë=
ERR
 ? ERR : 
	`waddn°r
((wö),(°r),“)))

	)

1304 
	#mvwadd°r
(
wö
,
y
,
x
,
°r
Ë(
	`wmove
((wö),(y),(x)Ë=
ERR
 ? ERR : 
	`waddn°r
((wö),(°r),-1))

	)

1305 
	#mvwchg©
(
wö
,
y
,
x
,
n
,
a
,
c
,
o
Ë(
	`wmove
((wö),(y),(x)Ë=
ERR
 ? ERR : 
	`wchg©
((wö),“),◊),(c),(o)))

	)

1306 
	#mvwdñch
(
wö
,
y
,
x
Ë(
	`wmove
((wö),(y),(x)Ë=
ERR
 ? ERR : 
	`wdñch
(wö))

	)

1307 
	#mvwgëch
(
wö
,
y
,
x
Ë(
	`wmove
((wö),(y),(x)Ë=
ERR
 ? ERR : 
	`wgëch
(wö))

	)

1308 
	#mvwgën°r
(
wö
,
y
,
x
,
°r
,
n
Ë(
	`wmove
((wö),(y),(x)Ë=
ERR
 ? ERR : 
	`wgën°r
((wö),(°r),“)))

	)

1309 
	#mvwgë°r
(
wö
,
y
,
x
,
°r
Ë(
	`wmove
((wö),(y),(x)Ë=
ERR
 ? ERR : 
	`wgë°r
((wö),(°r)))

	)

1310 
	#mvwhlöe
(
wö
,
y
,
x
,
c
,
n
Ë(
	`wmove
((wö),(y),(x)Ë=
ERR
 ? ERR : 
	`whlöe
((wö),(c),“)))

	)

1311 
	#mvwöch
(
wö
,
y
,
x
Ë(
	`wmove
((wö),(y),(x)Ë=
ERR
 ? 
	`NCURSES_CAST
(
chty≥
, ERRË: 
	`wöch
(wö))

	)

1312 
	#mvwöchn°r
(
wö
,
y
,
x
,
s
,
n
Ë(
	`wmove
((wö),(y),(x)Ë=
ERR
 ? ERR : 
	`wöchn°r
((wö),(s),“)))

	)

1313 
	#mvwöch°r
(
wö
,
y
,
x
,
s
Ë(
	`wmove
((wö),(y),(x)Ë=
ERR
 ? ERR : 
	`wöch°r
((wö),(s)))

	)

1314 
	#mvwön°r
(
wö
,
y
,
x
,
s
,
n
Ë(
	`wmove
((wö),(y),(x)Ë=
ERR
 ? ERR : 
	`wön°r
((wö),(s),“)))

	)

1315 
	#mvwösch
(
wö
,
y
,
x
,
c
Ë(
	`wmove
((wö),(y),(x)Ë=
ERR
 ? ERR : 
	`wösch
((wö),(c)))

	)

1316 
	#mvwö¢°r
(
wö
,
y
,
x
,
s
,
n
Ë(
	`wmove
((wö),(y),(x)Ë=
ERR
 ? ERR : 
	`wö¢°r
((wö),(s),“)))

	)

1317 
	#mvwös°r
(
wö
,
y
,
x
,
s
Ë(
	`wmove
((wö),(y),(x)Ë=
ERR
 ? ERR : 
	`wös°r
((wö),(s)))

	)

1318 
	#mvwö°r
(
wö
,
y
,
x
,
s
Ë(
	`wmove
((wö),(y),(x)Ë=
ERR
 ? ERR : 
	`wö°r
((wö),(s)))

	)

1319 
	#mvwvlöe
(
wö
,
y
,
x
,
c
,
n
Ë(
	`wmove
((wö),(y),(x)Ë=
ERR
 ? ERR : 
	`wvlöe
((wö),(c),“)))

	)

1321 
	#mvaddch
(
y
,
x
,
ch
Ë
	`mvwaddch
(
°ds¸
,(y),(x),(ch))

	)

1322 
	#mvaddchn°r
(
y
,
x
,
°r
,
n
Ë
	`mvwaddchn°r
(
°ds¸
,(y),(x),(°r),“))

	)

1323 
	#mvaddch°r
(
y
,
x
,
°r
Ë
	`mvwaddch°r
(
°ds¸
,(y),(x),(°r))

	)

1324 
	#mvaddn°r
(
y
,
x
,
°r
,
n
Ë
	`mvwaddn°r
(
°ds¸
,(y),(x),(°r),“))

	)

1325 
	#mvadd°r
(
y
,
x
,
°r
Ë
	`mvwadd°r
(
°ds¸
,(y),(x),(°r))

	)

1326 
	#mvchg©
(
y
,
x
,
n
,
a
,
c
,
o
Ë
	`mvwchg©
(
°ds¸
,(y),(x),“),◊),(c),(o))

	)

1327 
	#mvdñch
(
y
,
x
Ë
	`mvwdñch
(
°ds¸
,(y),(x))

	)

1328 
	#mvgëch
(
y
,
x
Ë
	`mvwgëch
(
°ds¸
,(y),(x))

	)

1329 
	#mvgën°r
(
y
,
x
,
°r
,
n
Ë
	`mvwgën°r
(
°ds¸
,(y),(x),(°r),“))

	)

1330 
	#mvgë°r
(
y
,
x
,
°r
Ë
	`mvwgë°r
(
°ds¸
,(y),(x),(°r))

	)

1331 
	#mvhlöe
(
y
,
x
,
c
,
n
Ë
	`mvwhlöe
(
°ds¸
,(y),(x),(c),“))

	)

1332 
	#mvöch
(
y
,
x
Ë
	`mvwöch
(
°ds¸
,(y),(x))

	)

1333 
	#mvöchn°r
(
y
,
x
,
s
,
n
Ë
	`mvwöchn°r
(
°ds¸
,(y),(x),(s),“))

	)

1334 
	#mvöch°r
(
y
,
x
,
s
Ë
	`mvwöch°r
(
°ds¸
,(y),(x),(s))

	)

1335 
	#mvön°r
(
y
,
x
,
s
,
n
Ë
	`mvwön°r
(
°ds¸
,(y),(x),(s),“))

	)

1336 
	#mvösch
(
y
,
x
,
c
Ë
	`mvwösch
(
°ds¸
,(y),(x),(c))

	)

1337 
	#mvö¢°r
(
y
,
x
,
s
,
n
Ë
	`mvwö¢°r
(
°ds¸
,(y),(x),(s),“))

	)

1338 
	#mvös°r
(
y
,
x
,
s
Ë
	`mvwös°r
(
°ds¸
,(y),(x),(s))

	)

1339 
	#mvö°r
(
y
,
x
,
s
Ë
	`mvwö°r
(
°ds¸
,(y),(x),(s))

	)

1340 
	#mvvlöe
(
y
,
x
,
c
,
n
Ë
	`mvwvlöe
(
°ds¸
,(y),(x),(c),“))

	)

1345 #i‡!
NCURSES_OPAQUE


1346 
	#gëbkgd
(
wö
Ë(
	`NCURSES_OK_ADDR
(wöË? ((wö)->
_bkgd
Ë: 0)

	)

1349 
	#¶k_©å_off
(
a
,
v
Ë((vË? 
ERR
 : 
	`¶k_©åoff
◊))

	)

1350 
	#¶k_©å_⁄
(
a
,
v
Ë((vË? 
ERR
 : 
	`¶k_©å⁄
◊))

	)

1352 #i‡!
NCURSES_OPAQUE


1353 #i‡
NCURSES_WATTR_MACROS


1354 #i‡
NCURSES_WIDECHAR
 && 1

1355 
	#w©å_£t
(
wö
,
a
,
p
,
›ts
) \

1356 (
	`NCURSES_OK_ADDR
(
wö
) \

1357 ? (()((
wö
)->
_©ås
 = ((
a
Ë& ~
A_COLOR
), \

1358 (
wö
)->
_cﬁ‹
 = (
›ts
Ë? *(*)(›tsË: (
p
)), \

1359 
OK
) \

1360 : 
ERR
)

	)

1361 
	#w©å_gë
(
wö
,
a
,
p
,
›ts
) \

1362 (
	`NCURSES_OK_ADDR
(
wö
) \

1363 ? (()(
	`NCURSES_OK_ADDR
(
a
) \

1364 ? (*(
a
Ë(
wö
)->
_©ås
) \

1365 : 
OK
), \

1366 ()(
	`NCURSES_OK_ADDR
(
p
) \

1367 ? (*(
p
Ë(
NCURSES_PAIRS_T
Ë(
wö
)->
_cﬁ‹
) \

1368 : 
OK
), \

1369 ()(
	`NCURSES_OK_ADDR
(
›ts
) \

1370 ? (*(*)(
›ts
Ë(
wö
)->
_cﬁ‹
) \

1371 : 
OK
), \

1372 
OK
) \

1373 : 
ERR
)

	)

1375 
	#w©å_£t
(
wö
,
a
,
p
,
›ts
) \

1376 (
	`NCURSES_OK_ADDR
(
wö
) \

1377 ? (()((
wö
)->
_©ås
 = (((
a
Ë& ~
A_COLOR
) | \

1378 (
©å_t
)
	`COLOR_PAIR
(
p
))), \

1379 
OK
) \

1380 : 
ERR
)

	)

1381 
	#w©å_gë
(
wö
,
a
,
p
,
›ts
) \

1382 (
	`NCURSES_OK_ADDR
(
wö
) \

1383 ? (()(
	`NCURSES_OK_ADDR
(
a
) \

1384 ? (*(
a
Ë(
wö
)->
_©ås
) \

1385 : 
OK
), \

1386 ()(
	`NCURSES_OK_ADDR
(
p
) \

1387 ? (*(
p
Ë(
NCURSES_PAIRS_T
Ë
	`PAIR_NUMBER
((
wö
)->
_©ås
)) \

1388 : 
OK
), \

1389 
OK
) \

1390 : 
ERR
)

	)

1408 
	#vssˇnf
(
a
,
b
,
c
Ë
	`_nc_vssˇnf
◊,b,c)

	)

1409 
NCURSES_EXPORT
(Ë
vssˇnf
(c⁄° *, c⁄° *, 
va_li°
);

1416 #i‡!
NCURSES_OPAQUE


1417 
	#is_˛óªd
(
wö
Ë(
	`NCURSES_OK_ADDR
(wöË? (wö)->
_˛ór
 : 
FALSE
)

	)

1418 
	#is_idcok
(
wö
Ë(
	`NCURSES_OK_ADDR
(wöË? (wö)->
_idcok
 : 
FALSE
)

	)

1419 
	#is_idlok
(
wö
Ë(
	`NCURSES_OK_ADDR
(wöË? (wö)->
_idlok
 : 
FALSE
)

	)

1420 
	#is_immedok
(
wö
Ë(
	`NCURSES_OK_ADDR
(wöË? (wö)->
_immed
 : 
FALSE
)

	)

1421 
	#is_key∑d
(
wö
Ë(
	`NCURSES_OK_ADDR
(wöË? (wö)->
_u£_key∑d
 : 
FALSE
)

	)

1422 
	#is_Àaveok
(
wö
Ë(
	`NCURSES_OK_ADDR
(wöË? (wö)->
_Àaveok
 : 
FALSE
)

	)

1423 
	#is_nodñay
(
wö
Ë(
	`NCURSES_OK_ADDR
(wöË? ((wö)->
_dñay
 =0Ë: 
FALSE
)

	)

1424 
	#is_nŸimeout
(
wö
Ë(
	`NCURSES_OK_ADDR
(wöË? (wö)->
_nŸimeout
 : 
FALSE
)

	)

1425 
	#is_∑d
(
wö
Ë(
	`NCURSES_OK_ADDR
(wöË? ((wö)->
_Êags
 & 
_ISPAD
Ë!0 : 
FALSE
)

	)

1426 
	#is_s¸ﬁlok
(
wö
Ë(
	`NCURSES_OK_ADDR
(wöË? (wö)->
_s¸ﬁl
 : 
FALSE
)

	)

1427 
	#is_subwö
(
wö
Ë(
	`NCURSES_OK_ADDR
(wöË? ((wö)->
_Êags
 & 
_SUBWIN
Ë!0 : 
FALSE
)

	)

1428 
	#is_syncok
(
wö
Ë(
	`NCURSES_OK_ADDR
(wöË? (wö)->
_sync
 : 
FALSE
)

	)

1429 
	#wgëdñay
(
wö
Ë(
	`NCURSES_OK_ADDR
(wöË? (wö)->
_dñay
 : 0)

	)

1430 
	#wgë∑ª¡
(
wö
Ë(
	`NCURSES_OK_ADDR
(wöË? (wö)->
_∑ª¡
 : 0)

	)

1431 
	#wgës¸ªg
(
wö
,
t
,
b
Ë(
	`NCURSES_OK_ADDR
(wöË? (*—Ë(wö)->
_ªgt›
, *(bË(wö)->
_ªgbŸtom
, 
OK
Ë: 
ERR
)

	)

1439 
	#is_löëouched
(
w
,
l
Ë((!(wË|| (÷Ë> 
	`gëmaxy
(w)Ë|| (÷Ë< 0)Ë? 
ERR
 : (
is_löëouched
)((w),÷)))

	)

1451 #i‡
NCURSES_REENTRANT


1453 
NCURSES_WRAPPED_VAR
(
WINDOW
 *, 
curs¸
);

1454 
NCURSES_WRAPPED_VAR
(
WINDOW
 *, 
√ws¸
);

1455 
NCURSES_WRAPPED_VAR
(
WINDOW
 *, 
°ds¸
);

1456 
NCURSES_WRAPPED_VAR
(*, 
âyty≥
);

1457 
NCURSES_WRAPPED_VAR
(, 
COLORS
);

1458 
NCURSES_WRAPPED_VAR
(, 
COLOR_PAIRS
);

1459 
NCURSES_WRAPPED_VAR
(, 
COLS
);

1460 
NCURSES_WRAPPED_VAR
(, 
ESCDELAY
);

1461 
NCURSES_WRAPPED_VAR
(, 
LINES
);

1462 
NCURSES_WRAPPED_VAR
(, 
TABSIZE
);

1464 
	#curs¸
 
	`NCURSES_PUBLIC_VAR
(
	`curs¸
())

	)

1465 
	#√ws¸
 
	`NCURSES_PUBLIC_VAR
(
	`√ws¸
())

	)

1466 
	#°ds¸
 
	`NCURSES_PUBLIC_VAR
(
	`°ds¸
())

	)

1467 
	#âyty≥
 
	`NCURSES_PUBLIC_VAR
(
	`âyty≥
())

	)

1468 
	#COLORS
 
	`NCURSES_PUBLIC_VAR
(
	`COLORS
())

	)

1469 
	#COLOR_PAIRS
 
	`NCURSES_PUBLIC_VAR
(
	`COLOR_PAIRS
())

	)

1470 
	#COLS
 
	`NCURSES_PUBLIC_VAR
(
	`COLS
())

	)

1471 
	#ESCDELAY
 
	`NCURSES_PUBLIC_VAR
(
	`ESCDELAY
())

	)

1472 
	#LINES
 
	`NCURSES_PUBLIC_VAR
(
	`LINES
())

	)

1473 
	#TABSIZE
 
	`NCURSES_PUBLIC_VAR
(
	`TABSIZE
())

	)

1477 
NCURSES_EXPORT_VAR
(
WINDOW
 *Ë
curs¸
;

1478 
NCURSES_EXPORT_VAR
(
WINDOW
 *Ë
√ws¸
;

1479 
NCURSES_EXPORT_VAR
(
WINDOW
 *Ë
°ds¸
;

1480 
NCURSES_EXPORT_VAR
(Ë
âyty≥
[];

1481 
NCURSES_EXPORT_VAR
(Ë
COLORS
;

1482 
NCURSES_EXPORT_VAR
(Ë
COLOR_PAIRS
;

1483 
NCURSES_EXPORT_VAR
(Ë
COLS
;

1484 
NCURSES_EXPORT_VAR
(Ë
ESCDELAY
;

1485 
NCURSES_EXPORT_VAR
(Ë
LINES
;

1486 
NCURSES_EXPORT_VAR
(Ë
TABSIZE
;

1502 
	#KEY_CODE_YES
 0400

	)

1503 
	#KEY_MIN
 0401

	)

1504 
	#KEY_BREAK
 0401

	)

1505 
	#KEY_SRESET
 0530

	)

1506 
	#KEY_RESET
 0531

	)

1510 
	#KEY_DOWN
 0402

	)

1511 
	#KEY_UP
 0403

	)

1512 
	#KEY_LEFT
 0404

	)

1513 
	#KEY_RIGHT
 0405

	)

1514 
	#KEY_HOME
 0406

	)

1515 
	#KEY_BACKSPACE
 0407

	)

1516 
	#KEY_F0
 0410

	)

1517 
	#KEY_F
(
n
Ë(
KEY_F0
+“)Ë

	)

1518 
	#KEY_DL
 0510

	)

1519 
	#KEY_IL
 0511

	)

1520 
	#KEY_DC
 0512

	)

1521 
	#KEY_IC
 0513

	)

1522 
	#KEY_EIC
 0514

	)

1523 
	#KEY_CLEAR
 0515

	)

1524 
	#KEY_EOS
 0516

	)

1525 
	#KEY_EOL
 0517

	)

1526 
	#KEY_SF
 0520

	)

1527 
	#KEY_SR
 0521

	)

1528 
	#KEY_NPAGE
 0522

	)

1529 
	#KEY_PPAGE
 0523

	)

1530 
	#KEY_STAB
 0524

	)

1531 
	#KEY_CTAB
 0525

	)

1532 
	#KEY_CATAB
 0526

	)

1533 
	#KEY_ENTER
 0527

	)

1534 
	#KEY_PRINT
 0532

	)

1535 
	#KEY_LL
 0533

	)

1536 
	#KEY_A1
 0534

	)

1537 
	#KEY_A3
 0535

	)

1538 
	#KEY_B2
 0536

	)

1539 
	#KEY_C1
 0537

	)

1540 
	#KEY_C3
 0540

	)

1541 
	#KEY_BTAB
 0541

	)

1542 
	#KEY_BEG
 0542

	)

1543 
	#KEY_CANCEL
 0543

	)

1544 
	#KEY_CLOSE
 0544

	)

1545 
	#KEY_COMMAND
 0545

	)

1546 
	#KEY_COPY
 0546

	)

1547 
	#KEY_CREATE
 0547

	)

1548 
	#KEY_END
 0550

	)

1549 
	#KEY_EXIT
 0551

	)

1550 
	#KEY_FIND
 0552

	)

1551 
	#KEY_HELP
 0553

	)

1552 
	#KEY_MARK
 0554

	)

1553 
	#KEY_MESSAGE
 0555

	)

1554 
	#KEY_MOVE
 0556

	)

1555 
	#KEY_NEXT
 0557

	)

1556 
	#KEY_OPEN
 0560

	)

1557 
	#KEY_OPTIONS
 0561

	)

1558 
	#KEY_PREVIOUS
 0562

	)

1559 
	#KEY_REDO
 0563

	)

1560 
	#KEY_REFERENCE
 0564

	)

1561 
	#KEY_REFRESH
 0565

	)

1562 
	#KEY_REPLACE
 0566

	)

1563 
	#KEY_RESTART
 0567

	)

1564 
	#KEY_RESUME
 0570

	)

1565 
	#KEY_SAVE
 0571

	)

1566 
	#KEY_SBEG
 0572

	)

1567 
	#KEY_SCANCEL
 0573

	)

1568 
	#KEY_SCOMMAND
 0574

	)

1569 
	#KEY_SCOPY
 0575

	)

1570 
	#KEY_SCREATE
 0576

	)

1571 
	#KEY_SDC
 0577

	)

1572 
	#KEY_SDL
 0600

	)

1573 
	#KEY_SELECT
 0601

	)

1574 
	#KEY_SEND
 0602

	)

1575 
	#KEY_SEOL
 0603

	)

1576 
	#KEY_SEXIT
 0604

	)

1577 
	#KEY_SFIND
 0605

	)

1578 
	#KEY_SHELP
 0606

	)

1579 
	#KEY_SHOME
 0607

	)

1580 
	#KEY_SIC
 0610

	)

1581 
	#KEY_SLEFT
 0611

	)

1582 
	#KEY_SMESSAGE
 0612

	)

1583 
	#KEY_SMOVE
 0613

	)

1584 
	#KEY_SNEXT
 0614

	)

1585 
	#KEY_SOPTIONS
 0615

	)

1586 
	#KEY_SPREVIOUS
 0616

	)

1587 
	#KEY_SPRINT
 0617

	)

1588 
	#KEY_SREDO
 0620

	)

1589 
	#KEY_SREPLACE
 0621

	)

1590 
	#KEY_SRIGHT
 0622

	)

1591 
	#KEY_SRSUME
 0623

	)

1592 
	#KEY_SSAVE
 0624

	)

1593 
	#KEY_SSUSPEND
 0625

	)

1594 
	#KEY_SUNDO
 0626

	)

1595 
	#KEY_SUSPEND
 0627

	)

1596 
	#KEY_UNDO
 0630

	)

1597 
	#KEY_MOUSE
 0631

	)

1599 #ifde‡
NCURSES_EXT_FUNCS


1600 
	#KEY_RESIZE
 0632

	)

1603 
	#KEY_MAX
 0777

	)

1610 
	#_XOPEN_CURSES
 1

	)

1612 #i‡
NCURSES_WIDECHAR


1614 
NCURSES_EXPORT_VAR
(
cch¨_t
 *Ë
_nc_wacs
;

1616 
	#NCURSES_WACS
(
c
Ë(&
_nc_wacs
[
	`NCURSES_CAST
(,(c))])

	)

1618 
	#WACS_BSSB
 
	`NCURSES_WACS
('l')

	)

1619 
	#WACS_SSBB
 
	`NCURSES_WACS
('m')

	)

1620 
	#WACS_BBSS
 
	`NCURSES_WACS
('k')

	)

1621 
	#WACS_SBBS
 
	`NCURSES_WACS
('j')

	)

1622 
	#WACS_SBSS
 
	`NCURSES_WACS
('u')

	)

1623 
	#WACS_SSSB
 
	`NCURSES_WACS
('t')

	)

1624 
	#WACS_SSBS
 
	`NCURSES_WACS
('v')

	)

1625 
	#WACS_BSSS
 
	`NCURSES_WACS
('w')

	)

1626 
	#WACS_BSBS
 
	`NCURSES_WACS
('q')

	)

1627 
	#WACS_SBSB
 
	`NCURSES_WACS
('x')

	)

1628 
	#WACS_SSSS
 
	`NCURSES_WACS
('n')

	)

1630 
	#WACS_ULCORNER
 
WACS_BSSB


	)

1631 
	#WACS_LLCORNER
 
WACS_SSBB


	)

1632 
	#WACS_URCORNER
 
WACS_BBSS


	)

1633 
	#WACS_LRCORNER
 
WACS_SBBS


	)

1634 
	#WACS_RTEE
 
WACS_SBSS


	)

1635 
	#WACS_LTEE
 
WACS_SSSB


	)

1636 
	#WACS_BTEE
 
WACS_SSBS


	)

1637 
	#WACS_TTEE
 
WACS_BSSS


	)

1638 
	#WACS_HLINE
 
WACS_BSBS


	)

1639 
	#WACS_VLINE
 
WACS_SBSB


	)

1640 
	#WACS_PLUS
 
WACS_SSSS


	)

1642 
	#WACS_S1
 
	`NCURSES_WACS
('o'Ë

	)

1643 
	#WACS_S9
 
	`NCURSES_WACS
('s'Ë

	)

1644 
	#WACS_DIAMOND
 
	`NCURSES_WACS
('`'Ë

	)

1645 
	#WACS_CKBOARD
 
	`NCURSES_WACS
('a'Ë

	)

1646 
	#WACS_DEGREE
 
	`NCURSES_WACS
('f'Ë

	)

1647 
	#WACS_PLMINUS
 
	`NCURSES_WACS
('g'Ë

	)

1648 
	#WACS_BULLET
 
	`NCURSES_WACS
('~'Ë

	)

1651 
	#WACS_LARROW
 
	`NCURSES_WACS
(','Ë

	)

1652 
	#WACS_RARROW
 
	`NCURSES_WACS
('+'Ë

	)

1653 
	#WACS_DARROW
 
	`NCURSES_WACS
('.'Ë

	)

1654 
	#WACS_UARROW
 
	`NCURSES_WACS
('-'Ë

	)

1655 
	#WACS_BOARD
 
	`NCURSES_WACS
('h'Ë

	)

1656 
	#WACS_LANTERN
 
	`NCURSES_WACS
('i'Ë

	)

1657 
	#WACS_BLOCK
 
	`NCURSES_WACS
('0'Ë

	)

1660 
	#WACS_S3
 
	`NCURSES_WACS
('p'Ë

	)

1661 
	#WACS_S7
 
	`NCURSES_WACS
('r'Ë

	)

1662 
	#WACS_LEQUAL
 
	`NCURSES_WACS
('y'Ë

	)

1663 
	#WACS_GEQUAL
 
	`NCURSES_WACS
('z'Ë

	)

1664 
	#WACS_PI
 
	`NCURSES_WACS
('{'Ë

	)

1665 
	#WACS_NEQUAL
 
	`NCURSES_WACS
('|'Ë

	)

1666 
	#WACS_STERLING
 
	`NCURSES_WACS
('}'Ë

	)

1669 
	#WACS_BDDB
 
	`NCURSES_WACS
('C')

	)

1670 
	#WACS_DDBB
 
	`NCURSES_WACS
('D')

	)

1671 
	#WACS_BBDD
 
	`NCURSES_WACS
('B')

	)

1672 
	#WACS_DBBD
 
	`NCURSES_WACS
('A')

	)

1673 
	#WACS_DBDD
 
	`NCURSES_WACS
('G')

	)

1674 
	#WACS_DDDB
 
	`NCURSES_WACS
('F')

	)

1675 
	#WACS_DDBD
 
	`NCURSES_WACS
('H')

	)

1676 
	#WACS_BDDD
 
	`NCURSES_WACS
('I')

	)

1677 
	#WACS_BDBD
 
	`NCURSES_WACS
('R')

	)

1678 
	#WACS_DBDB
 
	`NCURSES_WACS
('Y')

	)

1679 
	#WACS_DDDD
 
	`NCURSES_WACS
('E')

	)

1681 
	#WACS_D_ULCORNER
 
WACS_BDDB


	)

1682 
	#WACS_D_LLCORNER
 
WACS_DDBB


	)

1683 
	#WACS_D_URCORNER
 
WACS_BBDD


	)

1684 
	#WACS_D_LRCORNER
 
WACS_DBBD


	)

1685 
	#WACS_D_RTEE
 
WACS_DBDD


	)

1686 
	#WACS_D_LTEE
 
WACS_DDDB


	)

1687 
	#WACS_D_BTEE
 
WACS_DDBD


	)

1688 
	#WACS_D_TTEE
 
WACS_BDDD


	)

1689 
	#WACS_D_HLINE
 
WACS_BDBD


	)

1690 
	#WACS_D_VLINE
 
WACS_DBDB


	)

1691 
	#WACS_D_PLUS
 
WACS_DDDD


	)

1694 
	#WACS_BTTB
 
	`NCURSES_WACS
('L')

	)

1695 
	#WACS_TTBB
 
	`NCURSES_WACS
('M')

	)

1696 
	#WACS_BBTT
 
	`NCURSES_WACS
('K')

	)

1697 
	#WACS_TBBT
 
	`NCURSES_WACS
('J')

	)

1698 
	#WACS_TBTT
 
	`NCURSES_WACS
('U')

	)

1699 
	#WACS_TTTB
 
	`NCURSES_WACS
('T')

	)

1700 
	#WACS_TTBT
 
	`NCURSES_WACS
('V')

	)

1701 
	#WACS_BTTT
 
	`NCURSES_WACS
('W')

	)

1702 
	#WACS_BTBT
 
	`NCURSES_WACS
('Q')

	)

1703 
	#WACS_TBTB
 
	`NCURSES_WACS
('X')

	)

1704 
	#WACS_TTTT
 
	`NCURSES_WACS
('N')

	)

1706 
	#WACS_T_ULCORNER
 
WACS_BTTB


	)

1707 
	#WACS_T_LLCORNER
 
WACS_TTBB


	)

1708 
	#WACS_T_URCORNER
 
WACS_BBTT


	)

1709 
	#WACS_T_LRCORNER
 
WACS_TBBT


	)

1710 
	#WACS_T_RTEE
 
WACS_TBTT


	)

1711 
	#WACS_T_LTEE
 
WACS_TTTB


	)

1712 
	#WACS_T_BTEE
 
WACS_TTBT


	)

1713 
	#WACS_T_TTEE
 
WACS_BTTT


	)

1714 
	#WACS_T_HLINE
 
WACS_BTBT


	)

1715 
	#WACS_T_VLINE
 
WACS_TBTB


	)

1716 
	#WACS_T_PLUS
 
WACS_TTTT


	)

1727 
NCURSES_EXPORT
(Ë
add_wch
 (c⁄° 
cch¨_t
 *);

1728 
NCURSES_EXPORT
(Ë
add_wchn°r
 (c⁄° 
cch¨_t
 *, );

1729 
NCURSES_EXPORT
(Ë
add_wch°r
 (c⁄° 
cch¨_t
 *);

1730 
NCURSES_EXPORT
(Ë
addnw°r
 (c⁄° 
wch¨_t
 *, );

1731 
NCURSES_EXPORT
(Ë
addw°r
 (c⁄° 
wch¨_t
 *);

1732 
NCURSES_EXPORT
(Ë
bkg∫d
 (c⁄° 
cch¨_t
 *);

1733 
NCURSES_EXPORT
(Ë
bkg∫d£t
 (c⁄° 
cch¨_t
 *);

1734 
NCURSES_EXPORT
(Ë
b‹dî_£t
 (c⁄° 
cch¨_t
*,const cchar_t*,const cchar_t*,const cchar_t*,const cchar_t*,const cchar_t*,const cchar_t*,const cchar_t*);

1735 
NCURSES_EXPORT
(Ë
box_£t
 (
WINDOW
 *, c⁄° 
cch¨_t
 *, const cchar_t *);

1736 
NCURSES_EXPORT
(Ë
echo_wch¨
 (c⁄° 
cch¨_t
 *);

1737 
NCURSES_EXPORT
(Ë
îa£wch¨
 (
wch¨_t
*);

1738 
NCURSES_EXPORT
(Ë
gë_wch
 (
wöt_t
 *);

1739 
NCURSES_EXPORT
(Ë
gë_w°r
 (
wöt_t
 *);

1740 
NCURSES_EXPORT
(Ë
gëbkg∫d
 (
cch¨_t
 *);

1741 
NCURSES_EXPORT
(Ë
gëcch¨
 (c⁄° 
cch¨_t
 *, 
wch¨_t
*, 
©å_t
*, 
NCURSES_PAIRS_T
*, *);

1742 
NCURSES_EXPORT
(Ë
gën_w°r
 (
wöt_t
 *, );

1743 
NCURSES_EXPORT
(Ë
hlöe_£t
 (c⁄° 
cch¨_t
 *, );

1744 
NCURSES_EXPORT
(Ë
ö_wch
 (
cch¨_t
 *);

1745 
NCURSES_EXPORT
(Ë
ö_wchn°r
 (
cch¨_t
 *, );

1746 
NCURSES_EXPORT
(Ë
ö_wch°r
 (
cch¨_t
 *);

1747 
NCURSES_EXPORT
(Ë
önw°r
 (
wch¨_t
 *, );

1748 
NCURSES_EXPORT
(Ë
ös_nw°r
 (c⁄° 
wch¨_t
 *, );

1749 
NCURSES_EXPORT
(Ë
ös_wch
 (c⁄° 
cch¨_t
 *);

1750 
NCURSES_EXPORT
(Ë
ös_w°r
 (c⁄° 
wch¨_t
 *);

1751 
NCURSES_EXPORT
(Ë
öw°r
 (
wch¨_t
 *);

1752 
NCURSES_EXPORT
(
NCURSES_CONST
 *Ë
key_«me
 (
wch¨_t
);

1753 
NCURSES_EXPORT
(Ë
kûlwch¨
 (
wch¨_t
 *);

1754 
NCURSES_EXPORT
(Ë
mvadd_wch
 (, , c⁄° 
cch¨_t
 *);

1755 
NCURSES_EXPORT
(Ë
mvadd_wchn°r
 (, , c⁄° 
cch¨_t
 *, );

1756 
NCURSES_EXPORT
(Ë
mvadd_wch°r
 (, , c⁄° 
cch¨_t
 *);

1757 
NCURSES_EXPORT
(Ë
mvaddnw°r
 (, , c⁄° 
wch¨_t
 *, );

1758 
NCURSES_EXPORT
(Ë
mvaddw°r
 (, , c⁄° 
wch¨_t
 *);

1759 
NCURSES_EXPORT
(Ë
mvgë_wch
 (, , 
wöt_t
 *);

1760 
NCURSES_EXPORT
(Ë
mvgë_w°r
 (, , 
wöt_t
 *);

1761 
NCURSES_EXPORT
(Ë
mvgën_w°r
 (, , 
wöt_t
 *, );

1762 
NCURSES_EXPORT
(Ë
mvhlöe_£t
 (, , c⁄° 
cch¨_t
 *, );

1763 
NCURSES_EXPORT
(Ë
mvö_wch
 (, , 
cch¨_t
 *);

1764 
NCURSES_EXPORT
(Ë
mvö_wchn°r
 (, , 
cch¨_t
 *, );

1765 
NCURSES_EXPORT
(Ë
mvö_wch°r
 (, , 
cch¨_t
 *);

1766 
NCURSES_EXPORT
(Ë
mvönw°r
 (, , 
wch¨_t
 *, );

1767 
NCURSES_EXPORT
(Ë
mvös_nw°r
 (, , c⁄° 
wch¨_t
 *, );

1768 
NCURSES_EXPORT
(Ë
mvös_wch
 (, , c⁄° 
cch¨_t
 *);

1769 
NCURSES_EXPORT
(Ë
mvös_w°r
 (, , c⁄° 
wch¨_t
 *);

1770 
NCURSES_EXPORT
(Ë
mvöw°r
 (, , 
wch¨_t
 *);

1771 
NCURSES_EXPORT
(Ë
mvvlöe_£t
 (, , c⁄° 
cch¨_t
 *, );

1772 
NCURSES_EXPORT
(Ë
mvwadd_wch
 (
WINDOW
 *, , , c⁄° 
cch¨_t
 *);

1773 
NCURSES_EXPORT
(Ë
mvwadd_wchn°r
 (
WINDOW
 *, , , c⁄° 
cch¨_t
 *, );

1774 
NCURSES_EXPORT
(Ë
mvwadd_wch°r
 (
WINDOW
 *, , , c⁄° 
cch¨_t
 *);

1775 
NCURSES_EXPORT
(Ë
mvwaddnw°r
 (
WINDOW
 *, , , c⁄° 
wch¨_t
 *, );

1776 
NCURSES_EXPORT
(Ë
mvwaddw°r
 (
WINDOW
 *, , , c⁄° 
wch¨_t
 *);

1777 
NCURSES_EXPORT
(Ë
mvwgë_wch
 (
WINDOW
 *, , , 
wöt_t
 *);

1778 
NCURSES_EXPORT
(Ë
mvwgë_w°r
 (
WINDOW
 *, , , 
wöt_t
 *);

1779 
NCURSES_EXPORT
(Ë
mvwgën_w°r
 (
WINDOW
 *, , , 
wöt_t
 *, );

1780 
NCURSES_EXPORT
(Ë
mvwhlöe_£t
 (
WINDOW
 *, , , c⁄° 
cch¨_t
 *, );

1781 
NCURSES_EXPORT
(Ë
mvwö_wch
 (
WINDOW
 *, , , 
cch¨_t
 *);

1782 
NCURSES_EXPORT
(Ë
mvwö_wchn°r
 (
WINDOW
 *, ,, 
cch¨_t
 *,);

1783 
NCURSES_EXPORT
(Ë
mvwö_wch°r
 (
WINDOW
 *, , , 
cch¨_t
 *);

1784 
NCURSES_EXPORT
(Ë
mvwönw°r
 (
WINDOW
 *, , , 
wch¨_t
 *, );

1785 
NCURSES_EXPORT
(Ë
mvwös_nw°r
 (
WINDOW
 *, ,, c⁄° 
wch¨_t
 *,);

1786 
NCURSES_EXPORT
(Ë
mvwös_wch
 (
WINDOW
 *, , , c⁄° 
cch¨_t
 *);

1787 
NCURSES_EXPORT
(Ë
mvwös_w°r
 (
WINDOW
 *, , , c⁄° 
wch¨_t
 *);

1788 
NCURSES_EXPORT
(Ë
mvwöw°r
 (
WINDOW
 *, , , 
wch¨_t
 *);

1789 
NCURSES_EXPORT
(Ë
mvwvlöe_£t
 (
WINDOW
 *, ,, c⁄° 
cch¨_t
 *,);

1790 
NCURSES_EXPORT
(Ë
≥cho_wch¨
 (
WINDOW
 *, c⁄° 
cch¨_t
 *);

1791 
NCURSES_EXPORT
(Ë
£tcch¨
 (
cch¨_t
 *, c⁄° 
wch¨_t
 *, c⁄° 
©å_t
, 
NCURSES_PAIRS_T
, const *);

1792 
NCURSES_EXPORT
(Ë
¶k_w£t
 (, c⁄° 
wch¨_t
 *, );

1793 
NCURSES_EXPORT
(
©å_t
Ë
ãrm_©ås
 ();

1794 
NCURSES_EXPORT
(Ë
ungë_wch
 (c⁄° 
wch¨_t
);

1795 
NCURSES_EXPORT
(Ë
vid_©å
 (
©å_t
, 
NCURSES_PAIRS_T
, *);

1796 
NCURSES_EXPORT
(Ë
vid_puts
 (
©å_t
, 
NCURSES_PAIRS_T
, *, 
NCURSES_OUTC
);

1797 
NCURSES_EXPORT
(Ë
vlöe_£t
 (c⁄° 
cch¨_t
 *, );

1798 
NCURSES_EXPORT
(Ë
wadd_wch
 (
WINDOW
 *,c⁄° 
cch¨_t
 *);

1799 
NCURSES_EXPORT
(Ë
wadd_wchn°r
 (
WINDOW
 *,c⁄° 
cch¨_t
 *,);

1800 
NCURSES_EXPORT
(Ë
wadd_wch°r
 (
WINDOW
 *,c⁄° 
cch¨_t
 *);

1801 
NCURSES_EXPORT
(Ë
waddnw°r
 (
WINDOW
 *,c⁄° 
wch¨_t
 *,);

1802 
NCURSES_EXPORT
(Ë
waddw°r
 (
WINDOW
 *,c⁄° 
wch¨_t
 *);

1803 
NCURSES_EXPORT
(Ë
wbkg∫d
 (
WINDOW
 *,c⁄° 
cch¨_t
 *);

1804 
NCURSES_EXPORT
(Ë
wbkg∫d£t
 (
WINDOW
 *,c⁄° 
cch¨_t
 *);

1805 
NCURSES_EXPORT
(Ë
wb‹dî_£t
 (
WINDOW
 *,c⁄° 
cch¨_t
*,const cchar_t*,const cchar_t*,const cchar_t*,const cchar_t*,const cchar_t*,const cchar_t*,const cchar_t*);

1806 
NCURSES_EXPORT
(Ë
wecho_wch¨
 (
WINDOW
 *, c⁄° 
cch¨_t
 *);

1807 
NCURSES_EXPORT
(Ë
wgë_wch
 (
WINDOW
 *, 
wöt_t
 *);

1808 
NCURSES_EXPORT
(Ë
wgë_w°r
 (
WINDOW
 *, 
wöt_t
 *);

1809 
NCURSES_EXPORT
(Ë
wgëbkg∫d
 (
WINDOW
 *, 
cch¨_t
 *);

1810 
NCURSES_EXPORT
(Ë
wgën_w°r
 (
WINDOW
 *, 
wöt_t
 *, );

1811 
NCURSES_EXPORT
(Ë
whlöe_£t
 (
WINDOW
 *, c⁄° 
cch¨_t
 *, );

1812 
NCURSES_EXPORT
(Ë
wö_wch
 (
WINDOW
 *, 
cch¨_t
 *);

1813 
NCURSES_EXPORT
(Ë
wö_wchn°r
 (
WINDOW
 *, 
cch¨_t
 *, );

1814 
NCURSES_EXPORT
(Ë
wö_wch°r
 (
WINDOW
 *, 
cch¨_t
 *);

1815 
NCURSES_EXPORT
(Ë
wönw°r
 (
WINDOW
 *, 
wch¨_t
 *, );

1816 
NCURSES_EXPORT
(Ë
wös_nw°r
 (
WINDOW
 *, c⁄° 
wch¨_t
 *, );

1817 
NCURSES_EXPORT
(Ë
wös_wch
 (
WINDOW
 *, c⁄° 
cch¨_t
 *);

1818 
NCURSES_EXPORT
(Ë
wös_w°r
 (
WINDOW
 *, c⁄° 
wch¨_t
 *);

1819 
NCURSES_EXPORT
(Ë
wöw°r
 (
WINDOW
 *, 
wch¨_t
 *);

1820 
NCURSES_EXPORT
(
wch¨_t
*Ë
wun˘æ
 (
cch¨_t
 *);

1821 
NCURSES_EXPORT
(Ë
wvlöe_£t
 (
WINDOW
 *, c⁄° 
cch¨_t
 *, );

1823 #i‡
NCURSES_SP_FUNCS


1824 
NCURSES_EXPORT
(
©å_t
Ë
NCURSES_SP_NAME
(
ãrm_©ås
Ë(
SCREEN
*);

1825 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
îa£wch¨
Ë(
SCREEN
*, 
wch¨_t
 *);

1826 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
kûlwch¨
Ë(
SCREEN
*, 
wch¨_t
 *);

1827 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
ungë_wch
Ë(
SCREEN
*, c⁄° 
wch¨_t
);

1828 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
vid_©å
Ë(
SCREEN
*, 
©å_t
, 
NCURSES_PAIRS_T
, *);

1829 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
vid_puts
Ë(
SCREEN
*, 
©å_t
, 
NCURSES_PAIRS_T
, *, 
NCURSES_SP_OUTC
);

1830 
NCURSES_EXPORT
(
wch¨_t
*Ë
NCURSES_SP_NAME
(
wun˘æ
Ë(
SCREEN
*, 
cch¨_t
 *);

1833 #i‚de‡
NCURSES_NOMACROS


1838 
	#add_wch
(
c
Ë
	`wadd_wch
(
°ds¸
,(c))

	)

1839 
	#add_wchn°r
(
°r
,
n
Ë
	`wadd_wchn°r
(
°ds¸
,(°r),“))

	)

1840 
	#add_wch°r
(
°r
Ë
	`wadd_wch°r
(
°ds¸
,(°r))

	)

1841 
	#addnw°r
(
w°r
,
n
Ë
	`waddnw°r
(
°ds¸
,(w°r),“))

	)

1842 
	#addw°r
(
w°r
Ë
	`waddw°r
(
°ds¸
,(w°r))

	)

1843 
	#bkg∫d
(
c
Ë
	`wbkg∫d
(
°ds¸
,(c))

	)

1844 
	#bkg∫d£t
(
c
Ë
	`wbkg∫d£t
(
°ds¸
,(c))

	)

1845 
	#b‹dî_£t
(
l
,
r
,
t
,
b
,
é
,
å
,
bl
,
br
Ë
	`wb‹dî_£t
(
°ds¸
,÷),‘),—),(b),é,å,bl,br)

	)

1846 
	#box_£t
(
w
,
v
,
h
Ë
	`wb‹dî_£t
((w),(v),(v),(h),(h),0,0,0,0)

	)

1847 
	#echo_wch¨
(
c
Ë
	`wecho_wch¨
(
°ds¸
,(c))

	)

1848 
	#gë_wch
(
c
Ë
	`wgë_wch
(
°ds¸
,(c))

	)

1849 
	#gë_w°r
(
t
Ë
	`wgë_w°r
(
°ds¸
,—))

	)

1850 
	#gëbkg∫d
(
wch
Ë
	`wgëbkg∫d
(
°ds¸
,(wch))

	)

1851 
	#gën_w°r
(
t
,
n
Ë
	`wgën_w°r
(
°ds¸
,—),“))

	)

1852 
	#hlöe_£t
(
c
,
n
Ë
	`whlöe_£t
(
°ds¸
,(c),“))

	)

1853 
	#ö_wch
(
c
Ë
	`wö_wch
(
°ds¸
,(c))

	)

1854 
	#ö_wchn°r
(
c
,
n
Ë
	`wö_wchn°r
(
°ds¸
,(c),“))

	)

1855 
	#ö_wch°r
(
c
Ë
	`wö_wch°r
(
°ds¸
,(c))

	)

1856 
	#önw°r
(
c
,
n
Ë
	`wönw°r
(
°ds¸
,(c),“))

	)

1857 
	#ös_nw°r
(
t
,
n
Ë
	`wös_nw°r
(
°ds¸
,—),“))

	)

1858 
	#ös_wch
(
c
Ë
	`wös_wch
(
°ds¸
,(c))

	)

1859 
	#ös_w°r
(
t
Ë
	`wös_w°r
(
°ds¸
,—))

	)

1860 
	#öw°r
(
c
Ë
	`wöw°r
(
°ds¸
,(c))

	)

1861 
	#vlöe_£t
(
c
,
n
Ë
	`wvlöe_£t
(
°ds¸
,(c),“))

	)

1862 
	#wadd_wch°r
(
wö
,
°r
Ë
	`wadd_wchn°r
((wö),(°r),-1)

	)

1863 
	#waddw°r
(
wö
,
w°r
Ë
	`waddnw°r
((wö),(w°r),-1)

	)

1864 
	#wgë_w°r
(
w
,
t
Ë
	`wgën_w°r
((w),—),-1)

	)

1865 
	#wö_wch°r
(
w
,
c
Ë
	`wö_wchn°r
((w),(c),-1)

	)

1866 
	#wös_w°r
(
w
,
t
Ë
	`wös_nw°r
((w),—),-1)

	)

1868 #i‡!
NCURSES_OPAQUE


1869 
	#wgëbkg∫d
(
wö
,
wch
Ë(
	`NCURSES_OK_ADDR
(wchË? ((wöË? (*(wchË(wö)->
_bkg∫d
Ë: *(wch), 
OK
Ë: 
ERR
)

	)

1872 
	#mvadd_wch
(
y
,
x
,
c
Ë
	`mvwadd_wch
(
°ds¸
,(y),(x),(c))

	)

1873 
	#mvadd_wchn°r
(
y
,
x
,
s
,
n
Ë
	`mvwadd_wchn°r
(
°ds¸
,(y),(x),(s),“))

	)

1874 
	#mvadd_wch°r
(
y
,
x
,
s
Ë
	`mvwadd_wch°r
(
°ds¸
,(y),(x),(s))

	)

1875 
	#mvaddnw°r
(
y
,
x
,
w°r
,
n
Ë
	`mvwaddnw°r
(
°ds¸
,(y),(x),(w°r),“))

	)

1876 
	#mvaddw°r
(
y
,
x
,
w°r
Ë
	`mvwaddw°r
(
°ds¸
,(y),(x),(w°r))

	)

1877 
	#mvgë_wch
(
y
,
x
,
c
Ë
	`mvwgë_wch
(
°ds¸
,(y),(x),(c))

	)

1878 
	#mvgë_w°r
(
y
,
x
,
t
Ë
	`mvwgë_w°r
(
°ds¸
,(y),(x),—))

	)

1879 
	#mvgën_w°r
(
y
,
x
,
t
,
n
Ë
	`mvwgën_w°r
(
°ds¸
,(y),(x),—),“))

	)

1880 
	#mvhlöe_£t
(
y
,
x
,
c
,
n
Ë
	`mvwhlöe_£t
(
°ds¸
,(y),(x),(c),“))

	)

1881 
	#mvö_wch
(
y
,
x
,
c
Ë
	`mvwö_wch
(
°ds¸
,(y),(x),(c))

	)

1882 
	#mvö_wchn°r
(
y
,
x
,
c
,
n
Ë
	`mvwö_wchn°r
(
°ds¸
,(y),(x),(c),“))

	)

1883 
	#mvö_wch°r
(
y
,
x
,
c
Ë
	`mvwö_wch°r
(
°ds¸
,(y),(x),(c))

	)

1884 
	#mvönw°r
(
y
,
x
,
c
,
n
Ë
	`mvwönw°r
(
°ds¸
,(y),(x),(c),“))

	)

1885 
	#mvös_nw°r
(
y
,
x
,
t
,
n
Ë
	`mvwös_nw°r
(
°ds¸
,(y),(x),—),“))

	)

1886 
	#mvös_wch
(
y
,
x
,
c
Ë
	`mvwös_wch
(
°ds¸
,(y),(x),(c))

	)

1887 
	#mvös_w°r
(
y
,
x
,
t
Ë
	`mvwös_w°r
(
°ds¸
,(y),(x),—))

	)

1888 
	#mvöw°r
(
y
,
x
,
c
Ë
	`mvwöw°r
(
°ds¸
,(y),(x),(c))

	)

1889 
	#mvvlöe_£t
(
y
,
x
,
c
,
n
Ë
	`mvwvlöe_£t
(
°ds¸
,(y),(x),(c),“))

	)

1891 
	#mvwadd_wch
(
wö
,
y
,
x
,
c
Ë(
	`wmove
(wö,(y),(x)Ë=
ERR
 ? ERR : 
	`wadd_wch
((wö),(c)))

	)

1892 
	#mvwadd_wchn°r
(
wö
,
y
,
x
,
s
,
n
Ë(
	`wmove
(wö,(y),(x)Ë=
ERR
 ? ERR : 
	`wadd_wchn°r
((wö),(s),“)))

	)

1893 
	#mvwadd_wch°r
(
wö
,
y
,
x
,
s
Ë(
	`wmove
(wö,(y),(x)Ë=
ERR
 ? ERR : 
	`wadd_wch°r
((wö),(s)))

	)

1894 
	#mvwaddnw°r
(
wö
,
y
,
x
,
w°r
,
n
Ë(
	`wmove
(wö,(y),(x)Ë=
ERR
 ? ERR : 
	`waddnw°r
((wö),(w°r),“)))

	)

1895 
	#mvwaddw°r
(
wö
,
y
,
x
,
w°r
Ë(
	`wmove
(wö,(y),(x)Ë=
ERR
 ? ERR : 
	`waddw°r
((wö),(w°r)))

	)

1896 
	#mvwgë_wch
(
wö
,
y
,
x
,
c
Ë(
	`wmove
(wö,(y),(x)Ë=
ERR
 ? ERR : 
	`wgë_wch
((wö),(c)))

	)

1897 
	#mvwgë_w°r
(
wö
,
y
,
x
,
t
Ë(
	`wmove
(wö,(y),(x)Ë=
ERR
 ? ERR : 
	`wgë_w°r
((wö),—)))

	)

1898 
	#mvwgën_w°r
(
wö
,
y
,
x
,
t
,
n
Ë(
	`wmove
(wö,(y),(x)Ë=
ERR
 ? ERR : 
	`wgën_w°r
((wö),—),“)))

	)

1899 
	#mvwhlöe_£t
(
wö
,
y
,
x
,
c
,
n
Ë(
	`wmove
(wö,(y),(x)Ë=
ERR
 ? ERR : 
	`whlöe_£t
((wö),(c),“)))

	)

1900 
	#mvwö_wch
(
wö
,
y
,
x
,
c
Ë(
	`wmove
(wö,(y),(x)Ë=
ERR
 ? ERR : 
	`wö_wch
((wö),(c)))

	)

1901 
	#mvwö_wchn°r
(
wö
,
y
,
x
,
c
,
n
Ë(
	`wmove
(wö,(y),(x)Ë=
ERR
 ? ERR : 
	`wö_wchn°r
((wö),(c),“)))

	)

1902 
	#mvwö_wch°r
(
wö
,
y
,
x
,
c
Ë(
	`wmove
(wö,(y),(x)Ë=
ERR
 ? ERR : 
	`wö_wch°r
((wö),(c)))

	)

1903 
	#mvwönw°r
(
wö
,
y
,
x
,
c
,
n
Ë(
	`wmove
(wö,(y),(x)Ë=
ERR
 ? ERR : 
	`wönw°r
((wö),(c),“)))

	)

1904 
	#mvwös_nw°r
(
wö
,
y
,
x
,
t
,
n
Ë(
	`wmove
(wö,(y),(x)Ë=
ERR
 ? ERR : 
	`wös_nw°r
((wö),—),“)))

	)

1905 
	#mvwös_wch
(
wö
,
y
,
x
,
c
Ë(
	`wmove
(wö,(y),(x)Ë=
ERR
 ? ERR : 
	`wös_wch
((wö),(c)))

	)

1906 
	#mvwös_w°r
(
wö
,
y
,
x
,
t
Ë(
	`wmove
(wö,(y),(x)Ë=
ERR
 ? ERR : 
	`wös_w°r
((wö),—)))

	)

1907 
	#mvwöw°r
(
wö
,
y
,
x
,
c
Ë(
	`wmove
(wö,(y),(x)Ë=
ERR
 ? ERR : 
	`wöw°r
((wö),(c)))

	)

1908 
	#mvwvlöe_£t
(
wö
,
y
,
x
,
c
,
n
Ë(
	`wmove
(wö,(y),(x)Ë=
ERR
 ? ERR : 
	`wvlöe_£t
((wö),(c),“)))

	)

1912 #i‡
deföed
(
TRACE
Ë|| deföed(
NCURSES_TEST
)

1913 
NCURSES_EXPORT
(c⁄° *Ë
_nc_viswbuf
(c⁄° 
wch¨_t
 *);

1914 
NCURSES_EXPORT
(c⁄° *Ë
_nc_viswibuf
(c⁄° 
wöt_t
 *);

1927 #i‡
NCURSES_MOUSE_VERSION
 > 1

1928 
	#NCURSES_MOUSE_MASK
(
b
,
m
Ë((mË<< (((bË- 1Ë* 5))

	)

1930 
	#NCURSES_MOUSE_MASK
(
b
,
m
Ë((mË<< (((bË- 1Ë* 6))

	)

1933 
	#NCURSES_BUTTON_RELEASED
 001L

	)

1934 
	#NCURSES_BUTTON_PRESSED
 002L

	)

1935 
	#NCURSES_BUTTON_CLICKED
 004L

	)

1936 
	#NCURSES_DOUBLE_CLICKED
 010L

	)

1937 
	#NCURSES_TRIPLE_CLICKED
 020L

	)

1938 
	#NCURSES_RESERVED_EVENT
 040L

	)

1941 
	#BUTTON1_RELEASED
 
	`NCURSES_MOUSE_MASK
(1, 
NCURSES_BUTTON_RELEASED
)

	)

1942 
	#BUTTON1_PRESSED
 
	`NCURSES_MOUSE_MASK
(1, 
NCURSES_BUTTON_PRESSED
)

	)

1943 
	#BUTTON1_CLICKED
 
	`NCURSES_MOUSE_MASK
(1, 
NCURSES_BUTTON_CLICKED
)

	)

1944 
	#BUTTON1_DOUBLE_CLICKED
 
	`NCURSES_MOUSE_MASK
(1, 
NCURSES_DOUBLE_CLICKED
)

	)

1945 
	#BUTTON1_TRIPLE_CLICKED
 
	`NCURSES_MOUSE_MASK
(1, 
NCURSES_TRIPLE_CLICKED
)

	)

1947 
	#BUTTON2_RELEASED
 
	`NCURSES_MOUSE_MASK
(2, 
NCURSES_BUTTON_RELEASED
)

	)

1948 
	#BUTTON2_PRESSED
 
	`NCURSES_MOUSE_MASK
(2, 
NCURSES_BUTTON_PRESSED
)

	)

1949 
	#BUTTON2_CLICKED
 
	`NCURSES_MOUSE_MASK
(2, 
NCURSES_BUTTON_CLICKED
)

	)

1950 
	#BUTTON2_DOUBLE_CLICKED
 
	`NCURSES_MOUSE_MASK
(2, 
NCURSES_DOUBLE_CLICKED
)

	)

1951 
	#BUTTON2_TRIPLE_CLICKED
 
	`NCURSES_MOUSE_MASK
(2, 
NCURSES_TRIPLE_CLICKED
)

	)

1953 
	#BUTTON3_RELEASED
 
	`NCURSES_MOUSE_MASK
(3, 
NCURSES_BUTTON_RELEASED
)

	)

1954 
	#BUTTON3_PRESSED
 
	`NCURSES_MOUSE_MASK
(3, 
NCURSES_BUTTON_PRESSED
)

	)

1955 
	#BUTTON3_CLICKED
 
	`NCURSES_MOUSE_MASK
(3, 
NCURSES_BUTTON_CLICKED
)

	)

1956 
	#BUTTON3_DOUBLE_CLICKED
 
	`NCURSES_MOUSE_MASK
(3, 
NCURSES_DOUBLE_CLICKED
)

	)

1957 
	#BUTTON3_TRIPLE_CLICKED
 
	`NCURSES_MOUSE_MASK
(3, 
NCURSES_TRIPLE_CLICKED
)

	)

1959 
	#BUTTON4_RELEASED
 
	`NCURSES_MOUSE_MASK
(4, 
NCURSES_BUTTON_RELEASED
)

	)

1960 
	#BUTTON4_PRESSED
 
	`NCURSES_MOUSE_MASK
(4, 
NCURSES_BUTTON_PRESSED
)

	)

1961 
	#BUTTON4_CLICKED
 
	`NCURSES_MOUSE_MASK
(4, 
NCURSES_BUTTON_CLICKED
)

	)

1962 
	#BUTTON4_DOUBLE_CLICKED
 
	`NCURSES_MOUSE_MASK
(4, 
NCURSES_DOUBLE_CLICKED
)

	)

1963 
	#BUTTON4_TRIPLE_CLICKED
 
	`NCURSES_MOUSE_MASK
(4, 
NCURSES_TRIPLE_CLICKED
)

	)

1969 #i‡
NCURSES_MOUSE_VERSION
 > 1

1971 
	#BUTTON5_RELEASED
 
	`NCURSES_MOUSE_MASK
(5, 
NCURSES_BUTTON_RELEASED
)

	)

1972 
	#BUTTON5_PRESSED
 
	`NCURSES_MOUSE_MASK
(5, 
NCURSES_BUTTON_PRESSED
)

	)

1973 
	#BUTTON5_CLICKED
 
	`NCURSES_MOUSE_MASK
(5, 
NCURSES_BUTTON_CLICKED
)

	)

1974 
	#BUTTON5_DOUBLE_CLICKED
 
	`NCURSES_MOUSE_MASK
(5, 
NCURSES_DOUBLE_CLICKED
)

	)

1975 
	#BUTTON5_TRIPLE_CLICKED
 
	`NCURSES_MOUSE_MASK
(5, 
NCURSES_TRIPLE_CLICKED
)

	)

1977 
	#BUTTON_CTRL
 
	`NCURSES_MOUSE_MASK
(6, 0001L)

	)

1978 
	#BUTTON_SHIFT
 
	`NCURSES_MOUSE_MASK
(6, 0002L)

	)

1979 
	#BUTTON_ALT
 
	`NCURSES_MOUSE_MASK
(6, 0004L)

	)

1980 
	#REPORT_MOUSE_POSITION
 
	`NCURSES_MOUSE_MASK
(6, 0010L)

	)

1984 
	#BUTTON1_RESERVED_EVENT
 
	`NCURSES_MOUSE_MASK
(1, 
NCURSES_RESERVED_EVENT
)

	)

1985 
	#BUTTON2_RESERVED_EVENT
 
	`NCURSES_MOUSE_MASK
(2, 
NCURSES_RESERVED_EVENT
)

	)

1986 
	#BUTTON3_RESERVED_EVENT
 
	`NCURSES_MOUSE_MASK
(3, 
NCURSES_RESERVED_EVENT
)

	)

1987 
	#BUTTON4_RESERVED_EVENT
 
	`NCURSES_MOUSE_MASK
(4, 
NCURSES_RESERVED_EVENT
)

	)

1989 
	#BUTTON_CTRL
 
	`NCURSES_MOUSE_MASK
(5, 0001L)

	)

1990 
	#BUTTON_SHIFT
 
	`NCURSES_MOUSE_MASK
(5, 0002L)

	)

1991 
	#BUTTON_ALT
 
	`NCURSES_MOUSE_MASK
(5, 0004L)

	)

1992 
	#REPORT_MOUSE_POSITION
 
	`NCURSES_MOUSE_MASK
(5, 0010L)

	)

1996 
	#ALL_MOUSE_EVENTS
 (
REPORT_MOUSE_POSITION
 - 1)

	)

1999 
	#BUTTON_RELEASE
(
e
, 
x
Ë(”Ë& 
	`NCURSES_MOUSE_MASK
(x, 001))

	)

2000 
	#BUTTON_PRESS
(
e
, 
x
Ë(”Ë& 
	`NCURSES_MOUSE_MASK
(x, 002))

	)

2001 
	#BUTTON_CLICK
(
e
, 
x
Ë(”Ë& 
	`NCURSES_MOUSE_MASK
(x, 004))

	)

2002 
	#BUTTON_DOUBLE_CLICK
(
e
, 
x
Ë(”Ë& 
	`NCURSES_MOUSE_MASK
(x, 010))

	)

2003 
	#BUTTON_TRIPLE_CLICK
(
e
, 
x
Ë(”Ë& 
	`NCURSES_MOUSE_MASK
(x, 020))

	)

2004 
	#BUTTON_RESERVED_EVENT
(
e
, 
x
Ë(”Ë& 
	`NCURSES_MOUSE_MASK
(x, 040))

	)

2008 
	gid
;

2009 
	gx
, 
	gy
, 
	gz
;

2010 
mmask_t
 
	gb°©e
;

2012 
	tMEVENT
;

2014 
NCURSES_EXPORT
(
boﬁ
Ë
has_mou£
();

2015 
NCURSES_EXPORT
(Ë
gëmou£
 (
MEVENT
 *);

2016 
NCURSES_EXPORT
(Ë
ungëmou£
 (
MEVENT
 *);

2017 
NCURSES_EXPORT
(
mmask_t
Ë
mou£mask
 (mmask_t, mmask_t *);

2018 
NCURSES_EXPORT
(
boﬁ
Ë
wí˛o£
 (c⁄° 
WINDOW
 *, , );

2019 
NCURSES_EXPORT
(Ë
mou£öãrvÆ
 ();

2020 
NCURSES_EXPORT
(
boﬁ
Ë
wmou£_åafo
 (c⁄° 
WINDOW
*, *, *, bool);

2021 
NCURSES_EXPORT
(
boﬁ
Ë
mou£_åafo
 (*, *, bool);

2023 #i‡
NCURSES_SP_FUNCS


2024 
NCURSES_EXPORT
(
boﬁ
Ë
NCURSES_SP_NAME
(
has_mou£
Ë(
SCREEN
*);

2025 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
gëmou£
Ë(
SCREEN
*, 
MEVENT
 *);

2026 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
ungëmou£
Ë(
SCREEN
*,
MEVENT
 *);

2027 
NCURSES_EXPORT
(
mmask_t
Ë
NCURSES_SP_NAME
(
mou£mask
Ë(
SCREEN
*, mmask_t, mmask_t *);

2028 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
mou£öãrvÆ
Ë(
SCREEN
*, );

2031 #i‚de‡
NCURSES_NOMACROS


2032 
	#mou£_åafo
(
y
,
x
,
to_s¸ìn
Ë
	`wmou£_åafo
(
°ds¸
,y,x,to_s¸ìn)

	)

2037 
NCURSES_EXPORT
(Ë
m˝röt
 (*, );

2038 
NCURSES_EXPORT
(Ë
has_key
 ();

2040 #i‡
NCURSES_SP_FUNCS


2041 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
has_key
Ë(
SCREEN
*, );

2042 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
m˝röt
Ë(
SCREEN
*, *, );

2047 
NCURSES_EXPORT
(Ë
_åa˚f
 (c⁄° *, ...Ë
GCC_PRINTFLIKE
(1,2);

2048 
NCURSES_EXPORT
(*Ë
_åa˚©å
 (
©å_t
);

2049 
NCURSES_EXPORT
(*Ë
_åa˚©å2
 (, 
chty≥
);

2050 
NCURSES_EXPORT
(*Ë
_åa˚ch¨
 ();

2051 
NCURSES_EXPORT
(*Ë
_åa˚chty≥
 (
chty≥
);

2052 
NCURSES_EXPORT
(*Ë
_åa˚chty≥2
 (, 
chty≥
);

2053 #i‡
NCURSES_WIDECHAR


2054 
	#_åa˚ch_t
 
_åa˚cch¨_t


	)

2055 
NCURSES_EXPORT
(*Ë
_åa˚cch¨_t
 (c⁄° 
cch¨_t
 *);

2056 
	#_åa˚ch_t2
 
_åa˚cch¨_t2


	)

2057 
NCURSES_EXPORT
(*Ë
_åa˚cch¨_t2
 (, c⁄° 
cch¨_t
 *);

2059 
	#_åa˚ch_t
 
_åa˚chty≥


	)

2060 
	#_åa˚ch_t2
 
_åa˚chty≥2


	)

2062 
NCURSES_EXPORT
(Ë
åa˚
 (c⁄° Ë
GCC_DEPRECATED
("use curses_trace");

2063 
NCURSES_EXPORT
(Ë
cur£s_åa˚
 (const );

2066 
	#TRACE_DISABLE
 0x0000

	)

2067 
	#TRACE_TIMES
 0x0001

	)

2068 
	#TRACE_TPUTS
 0x0002

	)

2069 
	#TRACE_UPDATE
 0x0004

	)

2070 
	#TRACE_MOVE
 0x0008

	)

2071 
	#TRACE_CHARPUT
 0x0010

	)

2072 
	#TRACE_ORDINARY
 0x001F

	)

2073 
	#TRACE_CALLS
 0x0020

	)

2074 
	#TRACE_VIRTPUT
 0x0040

	)

2075 
	#TRACE_IEVENT
 0x0080

	)

2076 
	#TRACE_BITS
 0x0100

	)

2077 
	#TRACE_ICALLS
 0x0200

	)

2078 
	#TRACE_CCALLS
 0x0400

	)

2079 
	#TRACE_DATABASE
 0x0800

	)

2080 
	#TRACE_ATTRS
 0x1000

	)

2082 
	#TRACE_SHIFT
 13

	)

2083 
	#TRACE_MAXIMUM
 ((1 << 
TRACE_SHIFT
Ë- 1Ë

	)

2085 #i‡
deföed
(
TRACE
Ë|| deföed(
NCURSES_TEST
)

2086 
NCURSES_EXPORT_VAR
(Ë
_nc_›timize_íabÀ
;

2087 
NCURSES_EXPORT
(c⁄° *Ë
_nc_visbuf
 (const *);

2088 
	#OPTIMIZE_MVCUR
 0x01

	)

2089 
	#OPTIMIZE_HASHMAP
 0x02

	)

2090 
	#OPTIMIZE_SCROLL
 0x04

	)

2091 
	#OPTIMIZE_ALL
 0xf‡

	)

2094 
GCC_NORETURN
 
NCURSES_EXPORT
(Ë
exô_cur£s
 ();

2096 
	~<un˘æ.h
>

2098 #ifde‡
__˝lu•lus


2100 #i‚de‡
NCURSES_NOMACROS


2103 #unde‡
box


2104 #unde‡
˛ór


2105 #unde‡
îa£


2106 #unde‡
move


2107 #unde‡
ª‰esh


	@/usr/include/cursesapp.h

37 #i‚de‡
NCURSES_CURSESAPP_H_ö˛


38 
	#NCURSES_CURSESAPP_H_ö˛


	)

40 
	~<curs¶k.h
>

42 #i‡(
deföed
(
_WIN32
Ë|| deföed(
_WIN64
))

43 
	#NCURSES_CXX_MAIN_NAME
 
cur£•p_maö


	)

44 
	#NCURSES_CXX_MAIN
 \

45 
	`maö
(
¨gc
, *
¨gv
[]) { \

46  
	`NCURSES_CXX_MAIN_NAME
(
¨gc
, 
¨gv
); \

47 }

	)

49 
	#NCURSES_CXX_MAIN_NAME
 
maö


	)

51 
NCURSES_CXX_IMPEXP
 
NCURSES_CXX_MAIN_NAME
(
¨gc
, *
¨gv
[]);

53 ˛as†
	cNCURSES_CXX_IMPEXP
 
	mNCur£sAµliˇti⁄
 {

54 
	mpublic
:

55 
	s_¶k_lök
 {

56 
_¶k_lök
* 
¥ev
;

57 
So·_Labñ_Key_Së
* 
	mSLKs
;

58 } 
	tSLK_Lök
;

59 
	g¥iv©e
:

60 
röô
(
NCur£sWödow
& 
w
);

61 
NCur£sAµliˇti⁄
* 
	gtheAµ
;

63 
SLK_Lök
* 
	g¶k_°ack
;

65 
	g¥Ÿe˘ed
:

66 
NCur£sWödow
* 
tôÀWödow
;

68 
boﬁ
 
	gb_Cﬁ‹s
;

69 
NCur£sWödow
* 
	gRoŸ_Wödow
;

73 
vútuÆ
 
öô
(
boﬁ
 
bCﬁ‹s
);

77 
vútuÆ
 
	$tôÀsize
() const {

79 
	}
}

83 
vútuÆ
 
	$tôÀ
() {

84 
	}
}

88 
vútuÆ
 
	gSo·_Labñ_Key_Së
::
Labñ_Layout
 
	$u£SLKs
() const {

89  
So·_Labñ_Key_Së
::
N⁄e
;

90 
	}
}

94 
vútuÆ
 
	$öô_œbñs
(
So·_Labñ_Key_Së
& 
S
) const {

95 (Ë
S
;

96 
	}
}

100 
vútuÆ
 
run
() = 0;

104 
NCur£sAµliˇti⁄
(
boﬁ
 
w™tCﬁ‹s
 = 
FALSE
);

106 
	gNCur£sAµliˇti⁄
& 
	g›î©‹
=(c⁄° 
NCur£sAµliˇti⁄
& 
rhs
)

108 i‡(
this
 !&
rhs
) {

109 *
this
 = 
rhs
;

111  *
	gthis
;

114 
	$NCur£sAµliˇti⁄
(c⁄° 
NCur£sAµliˇti⁄
& 
rhs
)

115 : 
	`b_Cﬁ‹s
(
rhs
.
b_Cﬁ‹s
),

116 
	$RoŸ_Wödow
(
rhs
.
RoŸ_Wödow
)

118 
	}
}

120 
	gNCur£sWödow
 *&
gëTôÀWödow
();

122 
	gpublic
:

123 
vútuÆ
 ~
	$NCur£sAµliˇti⁄
(Ë
	`THROWS
(
NCur£sEx˚±i⁄
);

126 
NCur£sAµliˇti⁄
* 
	`gëAµliˇti⁄
();

129 
	$›î©‹
()();

133 
vútuÆ
 
	$h™dÀArgs
(
¨gc
, * 
¨gv
[]) {

134 (Ë
¨gc
;

135 (Ë
¨gv
;

136 
	}
}

139 
ölöe
 
boﬁ
 
	$u£Cﬁ‹s
() const {

140  
b_Cﬁ‹s
;

141 
	}
}

145 
push
(
So·_Labñ_Key_Së
& 
S
);

149 
boﬁ
 
p›
();

152 
So·_Labñ_Key_Së
* 
	$t›
() const;

155 
vútuÆ
 
chty≥
 
	$f‹egrounds
() const {

156  
b_Cﬁ‹s
 ? 
°©ic_ˇ°
<
chty≥
>(
	`COLOR_PAIR
(1)Ë: 
A_BOLD
;

157 
	}
}

160 
vútuÆ
 
chty≥
 
	$backgrounds
() const {

161  
b_Cﬁ‹s
 ? 
°©ic_ˇ°
<
chty≥
>(
	`COLOR_PAIR
(2)Ë: 
A_NORMAL
;

162 
	}
}

165 
vútuÆ
 
chty≥
 
	$öa˘ives
() const {

166  
b_Cﬁ‹s
 ? 
°©ic_ˇ°
<
chty≥
>(
	`COLOR_PAIR
(3)|
A_DIM
) : A_DIM;

167 
	}
}

170 
vútuÆ
 
chty≥
 
	$œbñs
() const {

171  
b_Cﬁ‹s
 ? 
°©ic_ˇ°
<
chty≥
>(
	`COLOR_PAIR
(4)Ë: 
A_NORMAL
;

172 
	}
}

175 
vútuÆ
 
chty≥
 
	$dülog_backgrounds
() const {

176  
b_Cﬁ‹s
 ? 
°©ic_ˇ°
<
chty≥
>(
	`COLOR_PAIR
(4)Ë: 
A_NORMAL
;

177 
	}
}

180 
vútuÆ
 
chty≥
 
	$wödow_backgrounds
() const {

181  
b_Cﬁ‹s
 ? 
°©ic_ˇ°
<
chty≥
>(
	`COLOR_PAIR
(5)Ë: 
A_NORMAL
;

182 
	}
}

185 
vútuÆ
 
chty≥
 
	$s¸ìn_tôÀs
() const {

186  
b_Cﬁ‹s
 ? 
°©ic_ˇ°
<
chty≥
>(
	`COLOR_PAIR
(6)Ë: 
A_BOLD
;

187 
	}
}

	@/usr/include/cursesf.h

38 #i‚de‡
NCURSES_CURSESF_H_ö˛


39 
	#NCURSES_CURSESF_H_ö˛
 1

	)

41 
	~<cur£•.h
>

43 #i‚de‡
__EXT_QNX


44 
	~<°rög.h
>

48 
	~<f‹m.h
>

55 
˛ass
 
NCURSES_CXX_IMPEXP
 
NCur£sF‹mFõld
;

59 ˛as†
	cNCURSES_CXX_IMPEXP
 
	mNCur£sFõldTy≥


61 
‰õnd
 
˛ass
 
	mNCur£sF‹mFõld
;

63 
	m¥Ÿe˘ed
:

64 
FIELDTYPE
* 
fõldty≥
;

66 
ölöe
 
	$OnEº‹
(
îr
Ëc⁄° 
	$THROW2
(
NCur£sEx˚±i⁄
 c⁄°, 
NCur£sF‹mEx˚±i⁄
) {

67 i‡(
îr
!=
E_OK
)

68 
	`THROW
(
√w
 
	`NCur£sF‹mEx˚±i⁄
 (
îr
));

71 
	$NCur£sFõldTy≥
(
FIELDTYPE
 *
f
Ë: 
	$fõldty≥
(
f
) {

72 
	}
}

74 
vútuÆ
 ~
	$NCur£sFõldTy≥
(Ë{
	}
}

77 
vútuÆ
 
£t
(
NCur£sF‹mFõld
& 
f
) = 0;

79 
	gpublic
:

80 
	$NCur£sFõldTy≥
()

81 : 
	`fõldty≥
(
	`STATIC_CAST
(
FIELDTYPE
*)(0))

83 
	}
}

85 
NCur£sFõldTy≥
& 
›î©‹
=(c⁄° NCur£sFõldTy≥& 
rhs
)

87 i‡(
this
 !&
rhs
) {

88 *
this
 = 
rhs
;

90  *
	gthis
;

93 
	$NCur£sFõldTy≥
(c⁄° 
NCur£sFõldTy≥
& 
rhs
)

94 : 
	$fõldty≥
(
rhs
.
fõldty≥
)

96 
	}
}

105 ˛as†
	cNCURSES_CXX_IMPEXP
 
	mNCur£sF‹mFõld


107 
‰õnd
 
˛ass
 
	mNCur£sF‹m
;

109 
	m¥Ÿe˘ed
:

110 
FIELD
 *
fõld
;

111 
NCur£sFõldTy≥
* 
	m·y≥
;

114 
ölöe
 
	$OnEº‹
 (
îr
Ëc⁄° 
	$THROW2
(
NCur£sEx˚±i⁄
 c⁄°, 
NCur£sF‹mEx˚±i⁄
) {

115 i‡(
îr
 !
E_OK
)

116 
	`THROW
(
√w
 
	`NCur£sF‹mEx˚±i⁄
 (
îr
));

119 
public
:

121 
	$NCur£sF‹mFõld
()

122 : 
	`fõld
(
	`STATIC_CAST
(
FIELD
*)(0)),

123 
	`·y≥
(
	`STATIC_CAST
(
NCur£sFõldTy≥
*)(0))

125 
	}
}

128 
	$NCur£sF‹mFõld
 (
rows
,

129 
ncﬁs
,

130 
fú°_row
 = 0,

131 
fú°_cﬁ
 = 0,

132 
offs¸ìn_rows
 = 0,

133 
addôi⁄Æ_buf„rs
 = 0)

134 : 
	`fõld
(0),

135 
	`·y≥
(
	`STATIC_CAST
(
NCur£sFõldTy≥
*)(0))

137 
fõld
 = ::
	`√w_fõld
(
rows
, 
ncﬁs
, 
fú°_row
, 
fú°_cﬁ
,

138 
offs¸ìn_rows
, 
addôi⁄Æ_buf„rs
);

139 i‡(!
fõld
)

140 
	`OnEº‹
(
î∫o
);

141 
	}
}

143 
	gNCur£sF‹mFõld
& 
	g›î©‹
=(c⁄° 
NCur£sF‹mFõld
& 
rhs
)

145 i‡(
this
 !&
rhs
) {

146 *
this
 = 
rhs
;

148  *
	gthis
;

151 
	$NCur£sF‹mFõld
(c⁄° 
NCur£sF‹mFõld
& 
rhs
)

152 : 
	`fõld
(
rhs
.
fõld
), 
	$·y≥
(
rhs
.
·y≥
)

154 
	}
}

156 
	gvútuÆ
 ~
	$NCur£sF‹mFõld
 (Ë
	`THROWS
(
NCur£sEx˚±i⁄
);

159 
ölöe
 
NCur£sF‹mFõld
* 
	$dup
(
fú°_row
, 
fú°_cﬁ
)

161 
NCur£sF‹mFõld
* 
f
 = 
√w
 
	`NCur£sF‹mFõld
();

162 i‡(!
f
)

163 
	`OnEº‹
(
E_SYSTEM_ERROR
);

165 
f
->
·y≥
 = ftype;

166 
f
->
fõld
 = ::
	`dup_fõld
(fõld,
fú°_row
,
fú°_cﬁ
);

167 i‡(!
f
->
fõld
)

168 
	`OnEº‹
(
î∫o
);

170  
f
;

171 
	}
}

174 
ölöe
 
NCur£sF‹mFõld
* 
	$lök
(
fú°_row
, 
fú°_cﬁ
) {

175 
NCur£sF‹mFõld
* 
f
 = 
√w
 
	`NCur£sF‹mFõld
();

176 i‡(!
f
)

177 
	`OnEº‹
(
E_SYSTEM_ERROR
);

179 
f
->
·y≥
 = ftype;

180 
f
->
fõld
 = ::
	`lök_fõld
(fõld,
fú°_row
,
fú°_cﬁ
);

181 i‡(!
f
->
fõld
)

182 
	`OnEº‹
(
î∫o
);

184  
f
;

185 
	}
}

188 
ölöe
 
FIELD
* 
	$gë_fõld
() const {

189  
fõld
;

190 
	}
}

193 
ölöe
 
	$öfo
(& 
rows
, & 
ncﬁs
,

194 & 
fú°_row
, & 
fú°_cﬁ
,

195 & 
offs¸ìn_rows
, & 
addôi⁄Æ_buf„rs
) const {

196 
	`OnEº‹
(::
	`fõld_öfo
(
fõld
, &
rows
, &
ncﬁs
,

197 &
fú°_row
, &
fú°_cﬁ
,

198 &
offs¸ìn_rows
, &
addôi⁄Æ_buf„rs
));

199 
	}
}

202 
ölöe
 
	$dy«mic_öfo
(& 
dy«mic_rows
, & 
dy«mic_cﬁs
,

203 & 
max_growth
) const {

204 
	`OnEº‹
(::
	`dy«mic_fõld_öfo
(
fõld
, &
dy«mic_rows
, &
dy«mic_cﬁs
,

205 &
max_growth
));

206 
	}
}

210 
ölöe
 
	$£t_maximum_growth
(
growth
 = 0) {

211 
	`OnEº‹
(::
	`£t_max_fõld
(
fõld
,
growth
));

212 
	}
}

215 
ölöe
 
	$move
(
row
, 
cﬁ
) {

216 
	`OnEº‹
(::
	`move_fõld
(
fõld
,
row
,
cﬁ
));

217 
	}
}

220 
ölöe
 
	$√w_∑ge
(
boﬁ
 
∑geFœg
 = 
FALSE
) {

221 
	`OnEº‹
(::
	`£t_√w_∑ge
(
fõld
,
∑geFœg
));

222 
	}
}

225 
ölöe
 
boﬁ
 
	$is_√w_∑ge
() const {

226  ::
	`√w_∑ge
(
fõld
);

227 
	}
}

230 
ölöe
 
	$£t_ju°ifiˇti⁄
(
ju°
) {

231 
	`OnEº‹
(::
	`£t_fõld_ju°
(
fõld
,
ju°
));

232 
	}
}

235 
ölöe
 
	$ju°ifiˇti⁄
() const {

236  ::
	`fõld_ju°
(
fõld
);

237 
	}
}

239 
ölöe
 
	$£t_f‹eground
(
chty≥
 
f‹eground
) {

240 
	`OnEº‹
(::
	`£t_fõld_f‹e
(
fõld
,
f‹eground
));

241 
	}
}

244 
ölöe
 
chty≥
 
	$f‹e
() const {

245  ::
	`fõld_f‹e
(
fõld
);

246 
	}
}

249 
ölöe
 
	$£t_background
(
chty≥
 
background
) {

250 
	`OnEº‹
(::
	`£t_fõld_back
(
fõld
,
background
));

251 
	}
}

254 
ölöe
 
chty≥
 
	$back
() const {

255  ::
	`fõld_back
(
fõld
);

256 
	}
}

259 
ölöe
 
	$£t_∑d_ch¨a˘î
(
∑ddög
) {

260 
	`OnEº‹
(::
	`£t_fõld_∑d
(
fõld
, 
∑ddög
));

261 
	}
}

264 
ölöe
 
	$∑d
() const {

265  ::
	`fõld_∑d
(
fõld
);

266 
	}
}

269 
ölöe
 
	$›ti⁄s_⁄
 (
Fõld_O±i⁄s
 
›ts
) {

270 
	`OnEº‹
 (::
	`fõld_›ts_⁄
 (
fõld
, 
›ts
));

271 
	}
}

274 
ölöe
 
	$›ti⁄s_off
 (
Fõld_O±i⁄s
 
›ts
) {

275 
	`OnEº‹
 (::
	`fõld_›ts_off
 (
fõld
, 
›ts
));

276 
	}
}

279 
ölöe
 
Fõld_O±i⁄s
 
	$›ti⁄s
 () const {

280  ::
	`fõld_›ts
 (
fõld
);

281 
	}
}

284 
ölöe
 
	$£t_›ti⁄s
 (
Fõld_O±i⁄s
 
›ts
) {

285 
	`OnEº‹
 (::
	`£t_fõld_›ts
 (
fõld
, 
›ts
));

286 
	}
}

289 
ölöe
 
	$£t_ch™ged
(
boﬁ
 
ch™geFœg
 = 
TRUE
) {

290 
	`OnEº‹
(::
	`£t_fõld_°©us
(
fõld
,
ch™geFœg
));

291 
	}
}

294 
ölöe
 
boﬁ
 
	$ch™ged
() const {

295  ::
	`fõld_°©us
(
fõld
);

296 
	}
}

300 
ölöe
 (
ödex
)() const {

301  ::
	`fõld_ödex
(
fõld
);

302 
	}
}

305 
ölöe
 
	$£t_vÆue
(c⁄° *
vÆ
, 
buf„r
 = 0) {

306 
	`OnEº‹
(::
	`£t_fõld_buf„r
(
fõld
,
buf„r
,
vÆ
));

307 
	}
}

310 
ölöe
 * 
	$vÆue
(
buf„r
 = 0) const {

311  ::
	`fõld_buf„r
(
fõld
,
buf„r
);

312 
	}
}

315 
ölöe
 
	$£t_fõldty≥
(
NCur£sFõldTy≥
& 
f
) {

316 
·y≥
 = &
f
;

317 
f
.
	`£t
(*
this
);

318 
	}
}

321 
ölöe
 
NCur£sFõldTy≥
* 
	$fõldty≥
() const {

322  
·y≥
;

323 
	}
}

331 
_nc_xx_‰m_öô
(
FORM
 *);

332 
_nc_xx_‰m_ãrm
(
FORM
 *);

333 
_nc_xx_Êd_öô
(
FORM
 *);

334 
_nc_xx_Êd_ãrm
(
FORM
 *);

342 ˛as†
	cNCURSES_CXX_IMPEXP
 
NCur£sF‹m
 : 
public
 
NCur£sP™ñ


344 
¥Ÿe˘ed
:

345 
FORM
* 
f‹m
;

347 
¥iv©e
:

348 
NCur£sWödow
* 
sub
;

349 
boﬁ
 
b_sub_ow√r
;

350 
boﬁ
 
b_‰amed
;

351 
boﬁ
 
b_autoDñëe
;

353 
NCur£sF‹mFõld
** 
my_fõlds
;

358 * 
m_u£r
;

359 c⁄° 
NCur£sF‹m
* 
m_back
;

360 c⁄° 
FORM
* 
m_ow√r
;

361 } 
	tU£rHook
;

364 
ölöe
 
NCur£sF‹m
* 
	$gëHook
(c⁄° 
FORM
 *
f
) {

365 
U£rHook
* 
hook
 = 
ªöãΩªt_ˇ°
<U£rHook*>(::
	`f‹m_u£Ωå
(
f
));

366 
	`as£π
(
hook
 !0 && hook->
m_ow√r
==
f
);

367  
c⁄°_ˇ°
<
NCur£sF‹m
*>(
hook
->
m_back
);

368 
	}
}

370 
‰õnd
 
_nc_xx_‰m_öô
(
FORM
 *);

371 
‰õnd
 
_nc_xx_‰m_ãrm
(
FORM
 *);

372 
‰õnd
 
_nc_xx_Êd_öô
(
FORM
 *);

373 
‰õnd
 
_nc_xx_Êd_ãrm
(
FORM
 *);

376 
FIELD
** 
m≠Fõlds
(
NCur£sF‹mFõld
* 
nfõlds
[]);

378 
¥Ÿe˘ed
:

380 
ölöe
 
	$£t_u£r
(*
u£r
) {

381 
U£rHook
* 
u±r
 = 
ªöãΩªt_ˇ°
<U£rHook*>(::
	`f‹m_u£Ωå
 (
f‹m
));

382 
	`as£π
 (
u±r
 !0 && u±r->
m_back
==
this
 && u±r->
m_ow√r
==
f‹m
);

383 
u±r
->
m_u£r
 = 
u£r
;

384 
	}
}

386 
ölöe
 *
	$gë_u£r
() {

387 
U£rHook
* 
u±r
 = 
ªöãΩªt_ˇ°
<U£rHook*>(::
	`f‹m_u£Ωå
 (
f‹m
));

388 
	`as£π
 (
u±r
 !0 && u±r->
m_back
==
this
 && u±r->
m_ow√r
==
f‹m
);

389  
u±r
->
m_u£r
;

390 
	}
}

392 
InôF‹m
 (
NCur£sF‹mFõld
* 
Fõlds
[],

393 
boﬁ
 
wôh_‰ame
,

394 
boﬁ
 
autoDñëeFõlds
);

396 
ölöe
 
	$OnEº‹
 (
îr
Ëc⁄° 
	$THROW2
(
NCur£sEx˚±i⁄
 c⁄°, 
NCur£sF‹mEx˚±i⁄
) {

397 i‡(
îr
 !
E_OK
)

398 
	`THROW
(
√w
 
	`NCur£sF‹mEx˚±i⁄
 (
îr
));

399 
	}
}

402 
vútuÆ
 
drivî
 (
c
) ;

406 
	$NCur£sF‹m
–
∆öes
,

407 
ncﬁs
,

408 
begö_y
 = 0,

409 
begö_x
 = 0)

410 : 
	`NCur£sP™ñ
(
∆öes
, 
ncﬁs
, 
begö_y
, 
begö_x
),

411 
	`f‹m
 (
	`STATIC_CAST
(
FORM
*)(0)),

412 
	`sub
(0),

413 
	`b_sub_ow√r
(0),

414 
	`b_‰amed
(0),

415 
	`b_autoDñëe
(0),

416 
	$my_fõlds
(0)

418 
	}
}

420 
public
:

422 
	$NCur£sF‹m
 (
NCur£sF‹mFõld
* 
Fõlds
[],

423 
boﬁ
 
wôh_‰ame
=
FALSE
,

424 
boﬁ
 
autoDñëe_Fõlds
=
FALSE
)

425 : 
	`NCur£sP™ñ
(),

426 
	`f‹m
(0),

427 
	`sub
(0),

428 
	`b_sub_ow√r
(0),

429 
	`b_‰amed
(0),

430 
	`b_autoDñëe
(0),

431 
	$my_fõlds
(0)

433 
	`InôF‹m
(
Fõlds
, 
wôh_‰ame
, 
autoDñëe_Fõlds
);

434 
	}
}

437 
	$NCur£sF‹m
 (
NCur£sF‹mFõld
* 
Fõlds
[],

438 
∆öes
,

439 
ncﬁs
,

440 
begö_y
,

441 
begö_x
,

442 
boﬁ
 
wôh_‰ame
=
FALSE
,

443 
boﬁ
 
autoDñëe_Fõlds
=
FALSE
)

444 : 
	`NCur£sP™ñ
(
∆öes
, 
ncﬁs
, 
begö_y
, 
begö_x
),

445 
	`f‹m
(0),

446 
	`sub
(0),

447 
	`b_sub_ow√r
(0),

448 
	`b_‰amed
(0),

449 
	`b_autoDñëe
(0),

450 
	$my_fõlds
(0)

452 
	`InôF‹m
(
Fõlds
, 
wôh_‰ame
, 
autoDñëe_Fõlds
);

453 
	}
}

455 
NCur£sF‹m
& 
›î©‹
=(c⁄° NCur£sF‹m& 
rhs
)

457 i‡(
this
 !&
rhs
) {

458 *
this
 = 
rhs
;

459 
NCur£sP™ñ
::
›î©‹
=(
rhs
);

461  *
this
;

464 
	$NCur£sF‹m
(c⁄° 
NCur£sF‹m
& 
rhs
)

465 : 
	`NCur£sP™ñ
(
rhs
),

466 
	`f‹m
(
rhs
.
f‹m
),

467 
	`sub
(
rhs
.
sub
),

468 
	`b_sub_ow√r
(
rhs
.
b_sub_ow√r
),

469 
	`b_‰amed
(
rhs
.
b_‰amed
),

470 
	`b_autoDñëe
(
rhs
.
b_autoDñëe
),

471 
	$my_fõlds
(
rhs
.
my_fõlds
)

473 
	}
}

475 
vútuÆ
 ~
	$NCur£sF‹m
(Ë
	`THROWS
(
NCur£sEx˚±i⁄
);

478 
vútuÆ
 
	`£tDeÁu…Aâribuãs
();

481 
ölöe
 
NCur£sF‹mFõld
* 
	$cuºít_fõld
() const {

482  
my_fõlds
[::
	`fõld_ödex
(::
	`cuºít_fõld
(
f‹m
))];

483 
	}
}

486 
£tSubWödow
(
NCur£sWödow
& 
sub
);

489 
ölöe
 
	$£tFõlds
(
NCur£sF‹mFõld
* 
Fõlds
[]) {

490 
	`OnEº‹
(::
	`£t_f‹m_fõlds
(
f‹m
,
	`m≠Fõlds
(
Fõlds
)));

491 
	}
}

494 
ölöe
 
	$u≈o°
 () {

495 
	`OnEº‹
 (::
	`u≈o°_f‹m
 (
f‹m
));

496 
	}
}

499 
ölöe
 
	$po°
(
boﬁ
 
Êag
 = 
TRUE
) {

500 
	`OnEº‹
 (
Êag
 ? ::
	`po°_f‹m
(
f‹m
Ë: ::
	`u≈o°_f‹m
 (form));

501 
	}
}

504 
ölöe
 
	$‰ame
(c⁄° *
tôÀ
=
NULL
, c⁄° * 
btôÀ
=NULL) {

505 i‡(
b_‰amed
)

506 
NCur£sP™ñ
::
	`‰ame
(
tôÀ
,
btôÀ
);

508 
	`OnEº‹
(
E_SYSTEM_ERROR
);

509 
	}
}

511 
ölöe
 
	$bﬁd‰ame
(c⁄° *
tôÀ
=
NULL
, c⁄° * 
btôÀ
=NULL) {

512 i‡(
b_‰amed
)

513 
NCur£sP™ñ
::
	`bﬁd‰ame
(
tôÀ
,
btôÀ
);

515 
	`OnEº‹
(
E_SYSTEM_ERROR
);

516 
	}
}

518 
ölöe
 
	$œbñ
(c⁄° *
t›Labñ
, c⁄° *
bŸtomLabñ
) {

519 i‡(
b_‰amed
)

520 
NCur£sP™ñ
::
	`œbñ
(
t›Labñ
,
bŸtomLabñ
);

522 
	`OnEº‹
(
E_SYSTEM_ERROR
);

523 
	}
}

531 
vútuÆ
 
On_F‹m_Inô
();

535 
vútuÆ
 
On_F‹m_Tîmö©i⁄
();

538 
vútuÆ
 
On_Fõld_Inô
(
NCur£sF‹mFõld
& 
fõld
);

541 
vútuÆ
 
On_Fõld_Tîmö©i⁄
(
NCur£sF‹mFõld
& 
fõld
);

544 
	$sˇÀ
(& 
rows
, & 
ncﬁs
) const {

545 
	`OnEº‹
(::
	`sˇÀ_f‹m
(
f‹m
,&
rows
,&
ncﬁs
));

546 
	}
}

549 
	$cou¡
() const {

550  ::
	`fõld_cou¡
(
f‹m
);

551 
	}
}

554 
	$£t_∑ge
(
∑geNum
) {

555 
	`OnEº‹
(::
	`£t_f‹m_∑ge
(
f‹m
, 
∑geNum
));

556 
	}
}

559 
	$∑ge
() const {

560  ::
	`f‹m_∑ge
(
f‹m
);

561 
	}
}

564 
ölöe
 
	$›ti⁄s_⁄
 (
F‹m_O±i⁄s
 
›ts
) {

565 
	`OnEº‹
 (::
	`f‹m_›ts_⁄
 (
f‹m
, 
›ts
));

566 
	}
}

569 
ölöe
 
	$›ti⁄s_off
 (
F‹m_O±i⁄s
 
›ts
) {

570 
	`OnEº‹
 (::
	`f‹m_›ts_off
 (
f‹m
, 
›ts
));

571 
	}
}

574 
ölöe
 
F‹m_O±i⁄s
 
	$›ti⁄s
 () const {

575  ::
	`f‹m_›ts
 (
f‹m
);

576 
	}
}

579 
ölöe
 
	$£t_›ti⁄s
 (
F‹m_O±i⁄s
 
›ts
) {

580 
	`OnEº‹
 (::
	`£t_f‹m_›ts
 (
f‹m
, 
›ts
));

581 
	}
}

584 
ölöe
 
boﬁ
 
	$d©a_ahód
() const {

585  ::
	`d©a_ahód
(
f‹m
);

586 
	}
}

589 
ölöe
 
boﬁ
 
	$d©a_behöd
() const {

590  ::
	`d©a_behöd
(
f‹m
);

591 
	}
}

594 
ölöe
 
	$posôi⁄_curs‹
 () {

595 
	`OnEº‹
 (::
	`pos_f‹m_curs‹
 (
f‹m
));

596 
	}
}

598 
ölöe
 
	$£t_cuºít
(
NCur£sF‹mFõld
& 
F
) {

599 
	`OnEº‹
 (::
	`£t_cuºít_fõld
(
f‹m
, 
F
.
fõld
));

600 
	}
}

606 
vútuÆ
 
vútuÆize
(
c
);

609 
ölöe
 
NCur£sF‹mFõld
* 
›î©‹
[](
i
) const {

610 i‡–(
i
 < 0Ë|| (ò>::
fõld_cou¡
 (
f‹m
)) )

611 
OnEº‹
 (
E_BAD_ARGUMENT
);

612  
my_fõlds
[
i
];

617 
vútuÆ
 
NCur£sF‹mFõld
* 
	$›î©‹
()();

620 
vútuÆ
 
	$On_Reque°_Díõd
(
c
) const;

621 
vútuÆ
 
	$On_InvÆid_Fõld
(
c
) const;

622 
vútuÆ
 
	$On_Unknown_Comm™d
(
c
) const;

624 
	}
};

633 
	gãm∂©e
<
˛ass
 
	gT
> cœs†
	cNCURSES_CXX_IMPEXP
 
	mNCur£sU£rFõld
 : 
public
 
NCur£sF‹mFõld


635 
public
:

636 
NCur£sU£rFõld
 (
rows
,

637 
ncﬁs
,

638 
fú°_row
 = 0,

639 
fú°_cﬁ
 = 0,

640 c⁄° 
T
* 
p_U£rD©a
 = 
STATIC_CAST
(T*)(0),

641 
offs¸ìn_rows
 = 0,

642 
addôi⁄Æ_buf„rs
 = 0)

643 : 
	$NCur£sF‹mFõld
 (
rows
, 
ncﬁs
,

644 
fú°_row
, 
fú°_cﬁ
,

645 
offs¸ìn_rows
, 
addôi⁄Æ_buf„rs
) {

646 i‡(
fõld
)

647 
	`OnEº‹
(::
	`£t_fõld_u£Ωå
(
fõld
, 
	`STATIC_CAST
(*)(
p_U£rD©a
)));

650 
vútuÆ
 ~
	$NCur£sU£rFõld
(Ë
	$THROWS
(
NCur£sEx˚±i⁄
Ë{
	}
};

652 
ölöe
 c⁄° 
T
* 
	$U£rD©a
 () const {

653  
ªöãΩªt_ˇ°
<c⁄° 
T
*>(::
	`fõld_u£Ωå
 (
fõld
));

654 
	}
}

656 
ölöe
 
vútuÆ
 
	$£tU£rD©a
(c⁄° 
T
* 
p_U£rD©a
) {

657 i‡(
fõld
)

658 
	`OnEº‹
 (::
	`£t_fõld_u£Ωå
 (
fõld
, 
	`STATIC_CAST
(*)(
p_U£rD©a
)));

659 
	}
}

666 
	gãm∂©e
<
˛ass
 
	gT
> cœs†
	cNCURSES_CXX_IMPEXP
 
	mNCur£sU£rF‹m
 : 
public
 
NCur£sF‹m


668 
¥Ÿe˘ed
:

671 
NCur£sU£rF‹m
–
∆öes
,

672 
ncﬁs
,

673 
begö_y
 = 0,

674 
begö_x
 = 0,

675 c⁄° 
T
* 
p_U£rD©a
 = 
STATIC_CAST
(T*)(0))

676 : 
	$NCur£sF‹m
(
∆öes
,
ncﬁs
,
begö_y
,
begö_x
) {

677 i‡(
f‹m
)

678 
	`£t_u£r
 (
c⁄°_ˇ°
<*>(
ªöãΩªt_ˇ°
<const *>

679 (
p_U£rD©a
)));

682 
public
:

683 
	`NCur£sU£rF‹m
 (
NCur£sF‹mFõld
* 
Fõlds
[],

684 c⁄° 
T
* 
p_U£rD©a
 = 
	`STATIC_CAST
(T*)(0),

685 
boﬁ
 
wôh_‰ame
=
FALSE
,

686 
boﬁ
 
autoDñëe_Fõlds
=
FALSE
)

687 : 
	$NCur£sF‹m
 (
Fõlds
, 
wôh_‰ame
, 
autoDñëe_Fõlds
) {

688 i‡(
f‹m
)

689 
	`£t_u£r
 (
c⁄°_ˇ°
<*>(
ªöãΩªt_ˇ°
<c⁄° *>(
p_U£rD©a
)));

690 
	}
};

692 
NCur£sU£rF‹m
 (
NCur£sF‹mFõld
* 
Fõlds
[],

693 
∆öes
,

694 
ncﬁs
,

695 
begö_y
 = 0,

696 
begö_x
 = 0,

697 c⁄° 
T
* 
p_U£rD©a
 = 
STATIC_CAST
(T*)(0),

698 
boﬁ
 
wôh_‰ame
=
FALSE
,

699 
boﬁ
 
autoDñëe_Fõlds
=
FALSE
)

700 : 
	$NCur£sF‹m
 (
Fõlds
, 
∆öes
, 
ncﬁs
, 
begö_y
, 
begö_x
,

701 
wôh_‰ame
, 
autoDñëe_Fõlds
) {

702 i‡(
f‹m
)

703 
	`£t_u£r
 (
c⁄°_ˇ°
<*>(
ªöãΩªt_ˇ°
<const *>

704 (
p_U£rD©a
)));

705 
	}
};

707 
	gvútuÆ
 ~
	$NCur£sU£rF‹m
(Ë
	$THROWS
(
NCur£sEx˚±i⁄
) {

708 
	}
};

710 
ölöe
 
T
* 
	$U£rD©a
 () {

711  
ªöãΩªt_ˇ°
<
T
*>(
	`gë_u£r
 ());

712 
	}
};

714 
ölöe
 
vútuÆ
 
	$£tU£rD©a
 (c⁄° 
T
* 
p_U£rD©a
) {

715 i‡(
f‹m
)

716 
	`£t_u£r
 (
c⁄°_ˇ°
<*>(
ªöãΩªt_ˇ°
<c⁄° *>(
p_U£rD©a
)));

717 
	}
}

725 ˛as†
	cNCURSES_CXX_IMPEXP
 
	mAÕha_Fõld
 : 
public
 
NCur£sFõldTy≥


727 
¥iv©e
:

728 
mö_fõld_width
;

730 
	$£t
(
NCur£sF‹mFõld
& 
f
) {

731 
	`OnEº‹
(::
	`£t_fõld_ty≥
(
f
.
	`gë_fõld
(),
fõldty≥
,
mö_fõld_width
));

734 
public
:

735 
ex∂icô
 
	$AÕha_Fõld
(
width
)

736 : 
	`NCur£sFõldTy≥
(
TYPE_ALPHA
),

737 
	$mö_fõld_width
(
width
) {

738 
	}
}

741 ˛as†
	cNCURSES_CXX_IMPEXP
 
	mAÕh™umîic_Fõld
 : 
public
 
NCur£sFõldTy≥


743 
¥iv©e
:

744 
mö_fõld_width
;

746 
	$£t
(
NCur£sF‹mFõld
& 
f
) {

747 
	`OnEº‹
(::
	`£t_fõld_ty≥
(
f
.
	`gë_fõld
(),
fõldty≥
,
mö_fõld_width
));

750 
public
:

751 
ex∂icô
 
	$AÕh™umîic_Fõld
(
width
)

752 : 
	`NCur£sFõldTy≥
(
TYPE_ALNUM
),

753 
	$mö_fõld_width
(
width
) {

754 
	}
}

757 ˛as†
	cNCURSES_CXX_IMPEXP
 
	mI¡egî_Fõld
 : 
public
 
NCur£sFõldTy≥


759 
¥iv©e
:

760 
¥ecisi⁄
;

761 
	mlowî_limô
, 
	muµî_limô
;

763 
	$£t
(
NCur£sF‹mFõld
& 
f
) {

764 
	`OnEº‹
(::
	`£t_fõld_ty≥
(
f
.
	`gë_fõld
(),
fõldty≥
,

765 
¥ecisi⁄
,
lowî_limô
,
uµî_limô
));

768 
public
:

769 
	$I¡egî_Fõld
(
¥ec
, 
low
=0L, 
high
=0L)

770 : 
	`NCur£sFõldTy≥
(
TYPE_INTEGER
),

771 
	`¥ecisi⁄
(
¥ec
), 
	`lowî_limô
(
low
), 
	$uµî_limô
(
high
) {

772 
	}
}

775 ˛as†
	cNCURSES_CXX_IMPEXP
 
	mNumîic_Fõld
 : 
public
 
NCur£sFõldTy≥


777 
¥iv©e
:

778 
¥ecisi⁄
;

779 
	mlowî_limô
, 
	muµî_limô
;

781 
	$£t
(
NCur£sF‹mFõld
& 
f
) {

782 
	`OnEº‹
(::
	`£t_fõld_ty≥
(
f
.
	`gë_fõld
(),
fõldty≥
,

783 
¥ecisi⁄
,
lowî_limô
,
uµî_limô
));

786 
public
:

787 
	$Numîic_Fõld
(
¥ec
, 
low
=0.0, 
high
=0.0)

788 : 
	`NCur£sFõldTy≥
(
TYPE_NUMERIC
),

789 
	`¥ecisi⁄
(
¥ec
), 
	`lowî_limô
(
low
), 
	$uµî_limô
(
high
) {

790 
	}
}

793 ˛as†
	cNCURSES_CXX_IMPEXP
 
	mReguœr_Ex¥essi⁄_Fõld
 : 
public
 
NCur£sFõldTy≥


795 
¥iv©e
:

796 * 
ªgex
;

798 
	$£t
(
NCur£sF‹mFõld
& 
f
) {

799 
	`OnEº‹
(::
	`£t_fõld_ty≥
(
f
.
	`gë_fõld
(),
fõldty≥
,
ªgex
));

802 
	$c›y_ªgex
(c⁄° *
sour˚
)

804 
ªgex
 = 
√w
 [1 + ::
	`°æí
(
sour˚
)];

805 (::
°r˝y
)(
ªgex
, 
sour˚
);

806 
	}
}

808 
	gpublic
:

809 
ex∂icô
 
	$Reguœr_Ex¥essi⁄_Fõld
(c⁄° *
ex¥
)

810 : 
	`NCur£sFõldTy≥
(
TYPE_REGEXP
),

811 
	$ªgex
(
NULL
)

813 
	`c›y_ªgex
(
ex¥
);

814 
	}
}

816 
	gReguœr_Ex¥essi⁄_Fõld
& 
	g›î©‹
=(c⁄° 
Reguœr_Ex¥essi⁄_Fõld
& 
rhs
)

818 i‡(
this
 !&
rhs
) {

819 *
this
 = 
rhs
;

820 
c›y_ªgex
(
rhs
.
ªgex
);

821 
	gNCur£sFõldTy≥
::
›î©‹
=(
rhs
);

823  *
	gthis
;

826 
	$Reguœr_Ex¥essi⁄_Fõld
(c⁄° 
Reguœr_Ex¥essi⁄_Fõld
& 
rhs
)

827 : 
	`NCur£sFõldTy≥
(
rhs
),

828 
	$ªgex
(
NULL
)

830 
	`c›y_ªgex
(
rhs
.
ªgex
);

831 
	}
}

833 ~
	$Reguœr_Ex¥essi⁄_Fõld
() {

834 
dñëe
[] 
ªgex
;

835 
	}
}

838 ˛as†
	cNCURSES_CXX_IMPEXP
 
	mEnumî©i⁄_Fõld
 : 
public
 
NCur£sFõldTy≥


840 
¥iv©e
:

841 c⁄° ** 
li°
;

842 
	mˇ£_£nsôive
;

843 
	mn⁄_unique_m©ches
;

845 
	$£t
(
NCur£sF‹mFõld
& 
f
) {

846 
	`OnEº‹
(::
	`£t_fõld_ty≥
(
f
.
	`gë_fõld
(),
fõldty≥
,

847 
li°
,
ˇ£_£nsôive
,
n⁄_unique_m©ches
));

849 
public
:

850 
	$Enumî©i⁄_Fõld
(c⁄° * 
íums
[],

851 
boﬁ
 
ˇ£_£ns
=
FALSE
,

852 
boﬁ
 
n⁄_unique
=
FALSE
)

853 : 
	`NCur£sFõldTy≥
(
TYPE_ENUM
),

854 
	`li°
(
íums
),

855 
	`ˇ£_£nsôive
(
ˇ£_£ns
 ? -1 : 0),

856 
	`n⁄_unique_m©ches
(
n⁄_unique
 ? -1 : 0) {

857 
	}
}

859 
Enumî©i⁄_Fõld
& 
›î©‹
=(c⁄° Enumî©i⁄_Fõld& 
rhs
)

861 i‡(
this
 !&
rhs
) {

862 *
this
 = 
rhs
;

863 
	gNCur£sFõldTy≥
::
›î©‹
=(
rhs
);

865  *
	gthis
;

868 
	$Enumî©i⁄_Fõld
(c⁄° 
Enumî©i⁄_Fõld
& 
rhs
)

869 : 
	`NCur£sFõldTy≥
(
rhs
),

870 
	`li°
(
rhs
.
li°
),

871 
	`ˇ£_£nsôive
(
rhs
.
ˇ£_£nsôive
),

872 
	$n⁄_unique_m©ches
(
rhs
.
n⁄_unique_m©ches
)

874 
	}
}

877 ˛as†
	cNCURSES_CXX_IMPEXP
 
	mIPV4_Addªss_Fõld
 : 
public
 
NCur£sFõldTy≥


879 
¥iv©e
:

880 
	$£t
(
NCur£sF‹mFõld
& 
f
) {

881 
	`OnEº‹
(::
	`£t_fõld_ty≥
(
f
.
	`gë_fõld
(),
fõldty≥
));

884 
public
:

885 
	$IPV4_Addªss_Fõld
(Ë: 
	$NCur£sFõldTy≥
(
TYPE_IPV4
) {

886 
	}
}

890 
boﬁ
 
_nc_xx_Êd_fcheck
(
FIELD
 *, const *);

891 
boﬁ
 
_nc_xx_Êd_ccheck
(
c
, const *);

892 * 
_nc_xx_Êd_makórg
(
va_li°
*);

900 ˛as†
	cNCURSES_CXX_IMPEXP
 
U£rDeföedFõldTy≥
 : 
public
 
NCur£sFõldTy≥


902 
‰õnd
 
˛ass
 
UDF_Inô
;

903 
¥iv©e
:

906 
FIELDTYPE
* 
gíîic_fõldty≥
;

908 
¥Ÿe˘ed
:

911 
‰õnd
 
boﬁ
 
_nc_xx_Êd_fcheck
(
FIELD
 *, const *);

912 
‰õnd
 
boﬁ
 
_nc_xx_Êd_ccheck
(
c
, const *);

913 
‰õnd
 * 
_nc_xx_Êd_makórg
(
va_li°
*);

915 
	$£t
(
NCur£sF‹mFõld
& 
f
) {

916 
	`OnEº‹
(::
	`£t_fõld_ty≥
(
f
.
	`gë_fõld
(),
fõldty≥
,&f));

919 
¥Ÿe˘ed
:

922 
vútuÆ
 
boﬁ
 
	`fõld_check
(
NCur£sF‹mFõld
& 
f
) = 0;

926 
vútuÆ
 
boﬁ
 
	`ch¨_check
 (
c
) = 0;

928 
public
:

929 
	`U£rDeföedFõldTy≥
();

930 
	}
};

933 
boﬁ
 
_nc_xx_√xt_choi˚
(
FIELD
*, const *);

934 
boﬁ
 
_nc_xx_¥ev_choi˚
(
FIELD
*, const *);

942 ˛as†
	cNCURSES_CXX_IMPEXP
 
U£rDeföedFõldTy≥_Wôh_Choi˚
 : 
public
 
U£rDeföedFõldTy≥


944 
‰õnd
 
˛ass
 
UDF_Inô
;

945 
¥iv©e
:

948 
FIELDTYPE
* 
gíîic_fõldty≥_wôh_choi˚
;

952 
‰õnd
 
boﬁ
 
_nc_xx_√xt_choi˚
(
FIELD
*, const *);

953 
‰õnd
 
boﬁ
 
_nc_xx_¥ev_choi˚
(
FIELD
*, const *);

955 
¥Ÿe˘ed
:

958 
vútuÆ
 
boﬁ
 
√xt
 (
NCur£sF‹mFõld
& 
f
) = 0;

962 
vútuÆ
 
boﬁ
 
¥evious
(
NCur£sF‹mFõld
& 
f
) = 0;

964 
public
:

965 
U£rDeföedFõldTy≥_Wôh_Choi˚
();

	@/usr/include/cursesm.h

37 #i‚de‡
NCURSES_CURSESM_H_ö˛


38 
	#NCURSES_CURSESM_H_ö˛
 1

	)

40 
	~<cur£•.h
>

43 
	~<míu.h
>

50 ˛as†
	cNCURSES_CXX_IMPEXP
 
NCur£sMíuIãm


52 
‰õnd
 
˛ass
 
NCur£sMíu
;

54 
¥Ÿe˘ed
:

55 
ITEM
 *
ôem
;

57 
ölöe
 
	$OnEº‹
 (
îr
Ëc⁄° 
	$THROW2
(
NCur£sEx˚±i⁄
 c⁄°, 
NCur£sMíuEx˚±i⁄
) {

58 i‡(
îr
 !
E_OK
)

59 
	`THROW
(
√w
 
	`NCur£sMíuEx˚±i⁄
 (
îr
));

62 
public
:

63 
	$NCur£sMíuIãm
 (c⁄° * 
p_«me
 = 
NULL
,

64 c⁄° * 
p_des¸ùt
 = 
NULL
)

65 : 
	$ôem
(0)

67 
ôem
 = 
p_«me
 ? ::
	`√w_ôem
 (p_«me, 
p_des¸ùt
Ë: 
	`STATIC_CAST
(
ITEM
*)(0);

68 i‡(
p_«me
 && !
ôem
)

69 
	`OnEº‹
 (
E_SYSTEM_ERROR
);

70 
	}
}

75 
NCur£sMíuIãm
& 
›î©‹
=(c⁄° NCur£sMíuIãm& 
rhs
)

77 i‡(
this
 !&
rhs
) {

78 *
this
 = 
rhs
;

80  *
this
;

83 
	$NCur£sMíuIãm
(c⁄° 
NCur£sMíuIãm
& 
rhs
)

84 : 
	$ôem
(0)

86 (Ë
rhs
;

87 
	}
}

89 
vútuÆ
 ~
	$NCur£sMíuIãm
 (Ë
	`THROWS
(
NCur£sEx˚±i⁄
);

92 
ölöe
 c⁄° * 
	$«me
 () const {

93  ::
	`ôem_«me
 (
ôem
);

94 
	}
}

97 
ölöe
 c⁄° * 
	$des¸ùti⁄
 () const {

98  ::
	`ôem_des¸ùti⁄
 (
ôem
);

99 
	}
}

102 
ölöe
 (
ödex
) () const {

103  ::
	`ôem_ödex
 (
ôem
);

104 
	}
}

107 
ölöe
 
	$›ti⁄s_⁄
 (
Iãm_O±i⁄s
 
›ts
) {

108 
	`OnEº‹
 (::
	`ôem_›ts_⁄
 (
ôem
, 
›ts
));

109 
	}
}

112 
ölöe
 
	$›ti⁄s_off
 (
Iãm_O±i⁄s
 
›ts
) {

113 
	`OnEº‹
 (::
	`ôem_›ts_off
 (
ôem
, 
›ts
));

114 
	}
}

117 
ölöe
 
Iãm_O±i⁄s
 
	$›ti⁄s
 () const {

118  ::
	`ôem_›ts
 (
ôem
);

119 
	}
}

122 
ölöe
 
	$£t_›ti⁄s
 (
Iãm_O±i⁄s
 
›ts
) {

123 
	`OnEº‹
 (::
	`£t_ôem_›ts
 (
ôem
, 
›ts
));

124 
	}
}

127 
ölöe
 
	$£t_vÆue
 (
boﬁ
 
f
) {

128 
	`OnEº‹
 (::
	`£t_ôem_vÆue
 (
ôem
,
f
));

129 
	}
}

132 
ölöe
 
boﬁ
 
	$vÆue
 () const {

133  ::
	`ôem_vÆue
 (
ôem
);

134 
	}
}

137 
ölöe
 
boﬁ
 
	$visibÀ
 () const {

138  ::
	`ôem_visibÀ
 (
ôem
);

139 
	}
}

142 
vútuÆ
 
boﬁ
 
a˘i⁄
();

151 
boﬁ
 
	tITEMCALLBACK
(
	tNCur£sMíuIãm
&);

156 ˛as†
	cNCURSES_CXX_IMPEXP
 
	mNCur£sMíuCÆlbackIãm
 : 
public
 
NCur£sMíuIãm


158 
¥iv©e
:

159 
ITEMCALLBACK
* 
p_f˘
;

161 
	mpublic
:

162 
	$NCur£sMíuCÆlbackIãm
(
ITEMCALLBACK
* 
f˘
 = 
NULL
,

163 c⁄° * 
p_«me
 = 
NULL
,

164 c⁄° * 
p_des¸ùt
 = 
NULL
 )

165 : 
	`NCur£sMíuIãm
 (
p_«me
, 
p_des¸ùt
),

166 
	$p_f˘
 (
f˘
) {

169 
NCur£sMíuCÆlbackIãm
& 
›î©‹
=(c⁄° NCur£sMíuCÆlbackIãm& 
rhs
)

171 i‡(
this
 !&
rhs
) {

172 *
this
 = 
rhs
;

174  *
this
;

175 
	}
}

177 
	$NCur£sMíuCÆlbackIãm
(c⁄° 
NCur£sMíuCÆlbackIãm
& 
rhs
)

178 : 
	`NCur£sMíuIãm
(
rhs
),

179 
	$p_f˘
(0)

181 
	}
}

183 
	gvútuÆ
 ~
	$NCur£sMíuCÆlbackIãm
(Ë
	`THROWS
(
NCur£sEx˚±i⁄
);

185 
boﬁ
 
	`a˘i⁄
();

186 
	}
};

192 
_nc_xx_mnu_öô
(
MENU
 *);

193 
_nc_xx_mnu_ãrm
(
MENU
 *);

194 
_nc_xx_ôm_öô
(
MENU
 *);

195 
_nc_xx_ôm_ãrm
(
MENU
 *);

203 ˛as†
	cNCURSES_CXX_IMPEXP
 
NCur£sMíu
 : 
public
 
NCur£sP™ñ


205 
¥Ÿe˘ed
:

206 
MENU
 *
míu
;

208 
¥iv©e
:

209 
NCur£sWödow
* 
sub
;

210 
boﬁ
 
b_sub_ow√r
;

211 
boﬁ
 
b_‰amed
;

212 
boﬁ
 
b_autoDñëe
;

214 
NCur£sMíuIãm
** 
my_ôems
;

219 * 
m_u£r
;

220 c⁄° 
NCur£sMíu
* 
m_back
;

221 c⁄° 
MENU
* 
m_ow√r
;

222 } 
	tU£rHook
;

225 
ölöe
 
NCur£sMíu
* 
	$gëHook
(c⁄° 
MENU
 *
m
) {

226 
U£rHook
* 
hook
 = 
	`STATIC_CAST
(U£rHook*)(::
	`míu_u£Ωå
(
m
));

227 
	`as£π
(
hook
 !0 && hook->
m_ow√r
==
m
);

228  
c⁄°_ˇ°
<
NCur£sMíu
*>(
hook
->
m_back
);

229 
	}
}

231 
‰õnd
 
_nc_xx_mnu_öô
(
MENU
 *);

232 
‰õnd
 
_nc_xx_mnu_ãrm
(
MENU
 *);

233 
‰õnd
 
_nc_xx_ôm_öô
(
MENU
 *);

234 
‰õnd
 
_nc_xx_ôm_ãrm
(
MENU
 *);

237 
ITEM
** 
m≠Iãms
(
NCur£sMíuIãm
* 
nôems
[]);

239 
¥Ÿe˘ed
:

241 
ölöe
 
	$£t_u£r
(*
u£r
) {

242 
U£rHook
* 
u±r
 = 
	`STATIC_CAST
(U£rHook*)(::
	`míu_u£Ωå
 (
míu
));

243 
	`as£π
 (
u±r
 !0 && u±r->
m_back
==
this
 && u±r->
m_ow√r
==
míu
);

244 
u±r
->
m_u£r
 = 
u£r
;

245 
	}
}

247 
ölöe
 *
	$gë_u£r
() {

248 
U£rHook
* 
u±r
 = 
	`STATIC_CAST
(U£rHook*)(::
	`míu_u£Ωå
 (
míu
));

249 
	`as£π
 (
u±r
 !0 && u±r->
m_back
==
this
 && u±r->
m_ow√r
==
míu
);

250  
u±r
->
m_u£r
;

251 
	}
}

253 
InôMíu
 (
NCur£sMíuIãm
* 
míu
[],

254 
boﬁ
 
wôh_‰ame
,

255 
boﬁ
 
autoDñëeIãms
);

257 
ölöe
 
	$OnEº‹
 (
îr
Ëc⁄° 
	$THROW2
(
NCur£sEx˚±i⁄
 c⁄°, 
NCur£sMíuEx˚±i⁄
) {

258 i‡(
îr
 !
E_OK
)

259 
	`THROW
(
√w
 
	`NCur£sMíuEx˚±i⁄
 (
this
, 
îr
));

260 
	}
}

263 
vútuÆ
 
drivî
 (
c
) ;

267 
	$NCur£sMíu
–
∆öes
,

268 
ncﬁs
,

269 
begö_y
 = 0,

270 
begö_x
 = 0)

271 : 
	`NCur£sP™ñ
(
∆öes
,
ncﬁs
,
begö_y
,
begö_x
),

272 
	`míu
 (
	`STATIC_CAST
(
MENU
*)(0)),

273 
	`sub
(0),

274 
	`b_sub_ow√r
(0),

275 
	`b_‰amed
(0),

276 
	`b_autoDñëe
(0),

277 
	$my_ôems
(0)

279 
	}
}

281 
public
:

283 
	$NCur£sMíu
 (
NCur£sMíuIãm
* 
Iãms
[],

284 
boﬁ
 
wôh_‰ame
=
FALSE
,

285 
boﬁ
 
autoDñëe_Iãms
=
FALSE
)

286 : 
	`NCur£sP™ñ
(),

287 
	`míu
(0),

288 
	`sub
(0),

289 
	`b_sub_ow√r
(0),

290 
	`b_‰amed
(0),

291 
	`b_autoDñëe
(0),

292 
	$my_ôems
(0)

294 
	`InôMíu
(
Iãms
, 
wôh_‰ame
, 
autoDñëe_Iãms
);

295 
	}
}

298 
	$NCur£sMíu
 (
NCur£sMíuIãm
* 
Iãms
[],

299 
∆öes
,

300 
ncﬁs
,

301 
begö_y
 = 0,

302 
begö_x
 = 0,

303 
boﬁ
 
wôh_‰ame
=
FALSE
,

304 
boﬁ
 
autoDñëe_Iãms
=
FALSE
)

305 : 
	`NCur£sP™ñ
(
∆öes
, 
ncﬁs
, 
begö_y
, 
begö_x
),

306 
	`míu
(0),

307 
	`sub
(0),

308 
	`b_sub_ow√r
(0),

309 
	`b_‰amed
(0),

310 
	`b_autoDñëe
(0),

311 
	$my_ôems
(0)

313 
	`InôMíu
(
Iãms
, 
wôh_‰ame
, 
autoDñëe_Iãms
);

314 
	}
}

316 
NCur£sMíu
& 
›î©‹
=(c⁄° NCur£sMíu& 
rhs
)

318 i‡(
this
 !&
rhs
) {

319 *
this
 = 
rhs
;

320 
NCur£sP™ñ
::
›î©‹
=(
rhs
);

322  *
this
;

325 
	$NCur£sMíu
(c⁄° 
NCur£sMíu
& 
rhs
)

326 : 
	`NCur£sP™ñ
(
rhs
),

327 
	`míu
(
rhs
.
míu
),

328 
	`sub
(
rhs
.
sub
),

329 
	`b_sub_ow√r
(
rhs
.
b_sub_ow√r
),

330 
	`b_‰amed
(
rhs
.
b_‰amed
),

331 
	`b_autoDñëe
(
rhs
.
b_autoDñëe
),

332 
	$my_ôems
(
rhs
.
my_ôems
)

334 
	}
}

336 
vútuÆ
 ~
	$NCur£sMíu
 (Ë
	`THROWS
(
NCur£sEx˚±i⁄
);

339 
ölöe
 
NCur£sWödow
& 
	$subWödow
() const {

340 
	`as£π
(
sub
!=
NULL
);

341  *
sub
;

342 
	}
}

345 
£tSubWödow
(
NCur£sWödow
& 
sub
);

348 
ölöe
 
	$£tIãms
(
NCur£sMíuIãm
* 
Iãms
[]) {

349 
	`OnEº‹
(::
	`£t_míu_ôems
(
míu
,
	`m≠Iãms
(
Iãms
)));

350 
	}
}

353 
ölöe
 
	$u≈o°
 () {

354 
	`OnEº‹
 (::
	`u≈o°_míu
 (
míu
));

355 
	}
}

358 
ölöe
 
	$po°
(
boﬁ
 
Êag
 = 
TRUE
) {

359 
Êag
 ? 
	`OnEº‹
 (::
	`po°_míu
(
míu
)Ë: OnEº‹ (::
	`u≈o°_míu
 (menu));

360 
	}
}

363 
ölöe
 
	$sˇÀ
 (& 
mrows
, & 
mcﬁs
) const {

364 
	`OnEº‹
 (::
	`sˇÀ_míu
 (
míu
, &
mrows
, &
mcﬁs
));

365 
	}
}

368 
ölöe
 
	$£t_f‹m©
(
mrows
, 
mcﬁs
) {

369 
	`OnEº‹
 (::
	`£t_míu_f‹m©
(
míu
, 
mrows
, 
mcﬁs
));

370 
	}
}

373 
ölöe
 
	$míu_f‹m©
(& 
rows
,& 
ncﬁs
) {

374 ::
	`míu_f‹m©
(
míu
,&
rows
,&
ncﬁs
);

375 
	}
}

378 
ölöe
 
NCur£sMíuIãm
* 
	$ôems
() const {

379  *
my_ôems
;

380 
	}
}

383 
ölöe
 
	$cou¡
() const {

384  ::
	`ôem_cou¡
(
míu
);

385 
	}
}

388 
ölöe
 
NCur£sMíuIãm
* 
	$cuºít_ôem
() const {

389  
my_ôems
[::
	`ôem_ödex
(::
	`cuºít_ôem
(
míu
))];

390 
	}
}

393 
ölöe
 c⁄° * 
	$m¨k
() const {

394  ::
	`míu_m¨k
(
míu
);

395 
	}
}

398 
ölöe
 
	$£t_m¨k
(c⁄° *
m¨kî
) {

399 
	`OnEº‹
 (::
	`£t_míu_m¨k
 (
míu
, 
m¨kî
));

400 
	}
}

403 
ölöe
 c⁄° * 
	$ªque°_«me
(
c
) {

404  ::
	`míu_ªque°_«me
(
c
);

405 
	}
}

408 
ölöe
 * 
	$∑âîn
() const {

409  ::
	`míu_∑âîn
(
míu
);

410 
	}
}

413 
boﬁ
 
£t_∑âîn
 (c⁄° *
∑t
);

417 
vútuÆ
 
£tDeÁu…Aâribuãs
();

420 
ölöe
 
chty≥
 
	$back
() const {

421  ::
	`míu_back
(
míu
);

422 
	}
}

425 
ölöe
 
chty≥
 
	$f‹e
() const {

426  ::
	`míu_f‹e
(
míu
);

427 
	}
}

430 
ölöe
 
chty≥
 
	$gªy
() const {

431  ::
	`míu_gªy
(
míu
);

432 
	}
}

435 
ölöe
 
chty≥
 
	$£t_background
(
chty≥
 
a
) {

436  ::
	`£t_míu_back
(
míu
,
a
);

437 
	}
}

440 
ölöe
 
chty≥
 
	$£t_f‹eground
(
chty≥
 
a
) {

441  ::
	`£t_míu_f‹e
(
míu
,
a
);

442 
	}
}

445 
ölöe
 
chty≥
 
	$£t_gªy
(
chty≥
 
a
) {

446  ::
	`£t_míu_gªy
(
míu
,
a
);

447 
	}
}

449 
ölöe
 
	$›ti⁄s_⁄
 (
Míu_O±i⁄s
 
›ts
) {

450 
	`OnEº‹
 (::
	`míu_›ts_⁄
 (
míu
,
›ts
));

451 
	}
}

453 
ölöe
 
	$›ti⁄s_off
(
Míu_O±i⁄s
 
›ts
) {

454 
	`OnEº‹
 (::
	`míu_›ts_off
(
míu
,
›ts
));

455 
	}
}

457 
ölöe
 
Míu_O±i⁄s
 
	$›ti⁄s
() const {

458  ::
	`míu_›ts
(
míu
);

459 
	}
}

461 
ölöe
 
	$£t_›ti⁄s
 (
Míu_O±i⁄s
 
›ts
) {

462 
	`OnEº‹
 (::
	`£t_míu_›ts
 (
míu
,
›ts
));

463 
	}
}

465 
ölöe
 
	$∑d
() const {

466  ::
	`míu_∑d
(
míu
);

467 
	}
}

469 
ölöe
 
	$£t_∑d
 (
∑dch
) {

470 
	`OnEº‹
 (::
	`£t_míu_∑d
 (
míu
, 
∑dch
));

471 
	}
}

474 
ölöe
 
	$posôi⁄_curs‹
 () const {

475 
	`OnEº‹
 (::
	`pos_míu_curs‹
 (
míu
));

476 
	}
}

479 
ölöe
 
	$£t_cuºít
(
NCur£sMíuIãm
& 
I
) {

480 
	`OnEº‹
 (::
	`£t_cuºít_ôem
(
míu
, 
I
.
ôem
));

481 
	}
}

484 
ölöe
 
	$t›_row
 () const {

485  ::
	`t›_row
 (
míu
);

486 
	}
}

489 
ölöe
 
	$£t_t›_row
 (
row
) {

490 
	`OnEº‹
 (::
	`£t_t›_row
 (
míu
, 
row
));

491 
	}
}

495 
ölöe
 
	$£tS∑cög
(
•c_des¸ùti⁄
,

496 
•c_rows
,

497 
•c_cﬁumns
) {

498 
	`OnEº‹
(::
	`£t_míu_•acög
(
míu
,

499 
•c_des¸ùti⁄
,

500 
•c_rows
,

501 
•c_cﬁumns
));

502 
	}
}

505 
ölöe
 
	$S∑cög
(& 
•c_des¸ùti⁄
,

506 & 
•c_rows
,

507 & 
•c_cﬁumns
) const {

508 
	`OnEº‹
(::
	`míu_•acög
(
míu
,

509 &
•c_des¸ùti⁄
,

510 &
•c_rows
,

511 &
•c_cﬁumns
));

512 
	}
}

515 
ölöe
 
	$‰ame
(c⁄° *
tôÀ
=
NULL
, c⁄° * 
btôÀ
=NULL) {

516 i‡(
b_‰amed
)

517 
NCur£sP™ñ
::
	`‰ame
(
tôÀ
,
btôÀ
);

519 
	`OnEº‹
(
E_SYSTEM_ERROR
);

520 
	}
}

522 
ölöe
 
	$bﬁd‰ame
(c⁄° *
tôÀ
=
NULL
, c⁄° * 
btôÀ
=NULL) {

523 i‡(
b_‰amed
)

524 
NCur£sP™ñ
::
	`bﬁd‰ame
(
tôÀ
,
btôÀ
);

526 
	`OnEº‹
(
E_SYSTEM_ERROR
);

527 
	}
}

529 
ölöe
 
	$œbñ
(c⁄° *
t›Labñ
, c⁄° *
bŸtomLabñ
) {

530 i‡(
b_‰amed
)

531 
NCur£sP™ñ
::
	`œbñ
(
t›Labñ
,
bŸtomLabñ
);

533 
	`OnEº‹
(
E_SYSTEM_ERROR
);

534 
	}
}

542 
vútuÆ
 
On_Míu_Inô
();

546 
vútuÆ
 
On_Míu_Tîmö©i⁄
();

549 
vútuÆ
 
On_Iãm_Inô
(
NCur£sMíuIãm
& 
ôem
);

552 
vútuÆ
 
On_Iãm_Tîmö©i⁄
(
NCur£sMíuIãm
& 
ôem
);

558 
vútuÆ
 
vútuÆize
(
c
);

562 
ölöe
 
NCur£sMíuIãm
* 
›î©‹
[](
i
) const {

563 i‡–(
i
 < 0Ë|| (ò>::
ôem_cou¡
 (
míu
)) )

564 
OnEº‹
 (
E_BAD_ARGUMENT
);

565  (
my_ôems
[
i
]);

571 
vútuÆ
 
NCur£sMíuIãm
* 
	$›î©‹
()();

579 
vútuÆ
 
	$On_Reque°_Díõd
(
c
) const;

582 
vútuÆ
 
	$On_NŸ_Sñe˘abÀ
(
c
) const;

585 
vútuÆ
 
	$On_No_M©ch
(
c
) const;

588 
vútuÆ
 
	$On_Unknown_Comm™d
(
c
) const;

590 
	}
};

599 
	gãm∂©e
<
˛ass
 
	gT
> cœs†
	cNCURSES_CXX_IMPEXP
 
	mNCur£sU£rIãm
 : 
public
 
NCur£sMíuIãm


601 
public
:

602 
NCur£sU£rIãm
 (c⁄° * 
p_«me
,

603 c⁄° * 
p_des¸ùt
 = 
NULL
,

604 c⁄° 
T
* 
p_U£rD©a
 = 
STATIC_CAST
(T*)(0))

605 : 
	$NCur£sMíuIãm
 (
p_«me
, 
p_des¸ùt
) {

606 i‡(
ôem
)

607 
	`OnEº‹
 (::
	`£t_ôem_u£Ωå
 (
ôem
, 
c⁄°_ˇ°
<*>(
ªöãΩªt_ˇ°
<c⁄° *>(
p_U£rD©a
))));

610 
vútuÆ
 ~
	$NCur£sU£rIãm
(Ë
	$THROWS
(
NCur£sEx˚±i⁄
Ë{
	}
}

612 
ölöe
 c⁄° 
T
* 
	$U£rD©a
 () const {

613  
ªöãΩªt_ˇ°
<c⁄° 
T
*>(::
	`ôem_u£Ωå
 (
ôem
));

614 
	}
};

616 
ölöe
 
vútuÆ
 
	$£tU£rD©a
(c⁄° 
T
* 
p_U£rD©a
) {

617 i‡(
ôem
)

618 
	`OnEº‹
 (::
	`£t_ôem_u£Ωå
 (
ôem
, 
c⁄°_ˇ°
<*>(
ªöãΩªt_ˇ°
<c⁄° *>(
p_U£rD©a
))));

619 
	}
}

626 
	gãm∂©e
<
˛ass
 
	gT
> cœs†
	cNCURSES_CXX_IMPEXP
 
	mNCur£sU£rMíu
 : 
public
 
NCur£sMíu


628 
¥Ÿe˘ed
:

629 
NCur£sU£rMíu
–
∆öes
,

630 
ncﬁs
,

631 
begö_y
 = 0,

632 
begö_x
 = 0,

633 c⁄° 
T
* 
p_U£rD©a
 = 
STATIC_CAST
(T*)(0))

634 : 
	$NCur£sMíu
(
∆öes
,
ncﬁs
,
begö_y
,
begö_x
) {

635 i‡(
míu
)

636 
	`£t_u£r
 (
c⁄°_ˇ°
<*>(
ªöãΩªt_ˇ°
<c⁄° *>(
p_U£rD©a
)));

639 
public
:

640 
	`NCur£sU£rMíu
 (
NCur£sMíuIãm
* 
Iãms
[],

641 c⁄° 
T
* 
p_U£rD©a
 = 
	`STATIC_CAST
(T*)(0),

642 
boﬁ
 
wôh_‰ame
=
FALSE
,

643 
boﬁ
 
autoDñëe_Iãms
=
FALSE
)

644 : 
	$NCur£sMíu
 (
Iãms
, 
wôh_‰ame
, 
autoDñëe_Iãms
) {

645 i‡(
míu
)

646 
	`£t_u£r
 (
c⁄°_ˇ°
<*>(
ªöãΩªt_ˇ°
<c⁄° *>(
p_U£rD©a
)));

647 
	}
};

649 
NCur£sU£rMíu
 (
NCur£sMíuIãm
* 
Iãms
[],

650 
∆öes
,

651 
ncﬁs
,

652 
begö_y
 = 0,

653 
begö_x
 = 0,

654 c⁄° 
T
* 
p_U£rD©a
 = 
STATIC_CAST
(T*)(0),

655 
boﬁ
 
wôh_‰ame
=
FALSE
)

656 : 
	$NCur£sMíu
 (
Iãms
, 
∆öes
, 
ncﬁs
, 
begö_y
, 
begö_x
, 
wôh_‰ame
) {

657 i‡(
míu
)

658 
	`£t_u£r
 (
c⁄°_ˇ°
<*>(
ªöãΩªt_ˇ°
<c⁄° *>(
p_U£rD©a
)));

659 
	}
};

661 
	gvútuÆ
 ~
	$NCur£sU£rMíu
(Ë
	$THROWS
(
NCur£sEx˚±i⁄
) {

662 
	}
};

664 
ölöe
 
T
* 
	$U£rD©a
 () {

665  
ªöãΩªt_ˇ°
<
T
*>(
	`gë_u£r
 ());

666 
	}
};

668 
ölöe
 
vútuÆ
 
	$£tU£rD©a
 (c⁄° 
T
* 
p_U£rD©a
) {

669 i‡(
míu
)

670 
	`£t_u£r
 (
c⁄°_ˇ°
<*>(
ªöãΩªt_ˇ°
<c⁄° *>(
p_U£rD©a
)));

671 
	}
}

	@/usr/include/cursesp.h

36 #i‚de‡
NCURSES_CURSESP_H_ö˛


37 
	#NCURSES_CURSESP_H_ö˛
 1

	)

41 
	~<cur£sw.h
>

44 
	~<∑√l.h
>

47 ˛as†
	cNCURSES_CXX_IMPEXP
 
NCur£sP™ñ


48 : 
public
 
NCur£sWödow


50 
¥Ÿe˘ed
:

51 
PANEL
 *
p
;

52 
NCur£sP™ñ
 *
dummy
;

54 
¥iv©e
:

58 * 
m_u£r
;

59 c⁄° 
NCur£sP™ñ
* 
m_back
;

60 c⁄° 
PANEL
* 
m_ow√r
;

61 } 
	tU£rHook
;

63 
ölöe
 
U£rHook
 *
	$U£rPoöãr
()

65 
U£rHook
* 
u±r
 = 
ªöãΩªt_ˇ°
<UserHook*>(

66 
c⁄°_ˇ°
<*>(::
	`∑√l_u£Ωå
 (
p
)));

67  
u±r
;

68 
	}
}

70 
öô
();

72 
¥Ÿe˘ed
:

73 
	$£t_u£r
(*
u£r
)

75 
U£rHook
* 
u±r
 = 
	`U£rPoöãr
();

76 i‡(
u±r
 !0 && u±r->
m_back
==
this
 && u±r->
m_ow√r
==
p
) {

77 
u±r
->
m_u£r
 = 
u£r
;

79 
	}
}

82 *
	$gë_u£r
()

84 
U£rHook
* 
u±r
 = 
	`U£rPoöãr
();

85 *
ªsu…
 = 0;

86 i‡(
u±r
 !0 && u±r->
m_back
==
this
 && u±r->
m_ow√r
==
p
)

87 
ªsu…
 = 
u±r
->
m_u£r
;

88  
ªsu…
;

89 
	}
}

91 
	$OnEº‹
 (
îr
Ëc⁄° 
	$THROW2
(
NCur£sEx˚±i⁄
 c⁄°, 
NCur£sP™ñEx˚±i⁄
)

93 i‡(
îr
==
ERR
)

94 
	`THROW
(
√w
 
	`NCur£sP™ñEx˚±i⁄
 (
this
, 
îr
));

95 
	}
}

100 
vútuÆ
 
gëKey
();

102 
public
:

103 
	$NCur£sP™ñ
(
∆öes
,

104 
ncﬁs
,

105 
begö_y
 = 0,

106 
begö_x
 = 0)

107 : 
	`NCur£sWödow
(
∆öes
,
ncﬁs
,
begö_y
,
begö_x
), 
	$p
(0)

109 
	`öô
();

110 
	}
}

113 
	$NCur£sP™ñ
()

114 : 
	`NCur£sWödow
(::
°ds¸
), 
	$p
(0)

116 
	`öô
();

117 
	}
}

121 
NCur£sP™ñ
& 
›î©‹
=(c⁄° NCur£sP™ñ& 
rhs
)

123 i‡(
this
 !&
rhs
) {

124 *
this
 = 
rhs
;

125 
NCur£sWödow
::
›î©‹
=(
rhs
);

127  *
this
;

130 
	$NCur£sP™ñ
(c⁄° 
NCur£sP™ñ
& 
rhs
)

131 : 
	`NCur£sWödow
(
rhs
),

132 
	$p
(
rhs
.
p
)

134 
	}
}

136 
vútuÆ
 ~
	$NCur£sP™ñ
(Ë
	`THROWS
(
NCur£sEx˚±i⁄
);

139 
ölöe
 
	$hide
()

141 
	`OnEº‹
 (::
	`hide_∑√l
(
p
));

142 
	}
}

145 
ölöe
 
	$show
()

147 
	`OnEº‹
 (::
	`show_∑√l
(
p
));

148 
	}
}

151 
ölöe
 
	$t›
()

153 
	`OnEº‹
 (::
	`t›_∑√l
(
p
));

154 
	}
}

157 
ölöe
 
	$bŸtom
()

159 
	`OnEº‹
 (::
	`bŸtom_∑√l
(
p
));

160 
	}
}

165 
vútuÆ
 
	$mvwö
(
y
, 
x
)

167 
	`OnEº‹
(::
	`move_∑√l
(
p
, 
y
, 
x
));

168  
OK
;

169 
	}
}

171 
ölöe
 
boﬁ
 
	$hiddí
() const

173  (::
	`∑√l_hiddí
 (
p
Ë? 
TRUE
 : 
FALSE
);

174 
	}
}

184 
ölöe
 
NCur£sP™ñ
& 
	$above
() const

186 
	`OnEº‹
(
ERR
);

187  *
dummy
;

188 
	}
}

190 
ölöe
 
NCur£sP™ñ
& 
	$bñow
() const

192 
	`OnEº‹
(
ERR
);

193  *
dummy
;

194 
	}
}

198 
vútuÆ
 
ª‰esh
();

202 
vútuÆ
 
nouåe‰esh
();

205 
ªdøw
();

209 
vútuÆ
 
‰ame
(c⁄° * 
tôÀ
=
NULL
,

210 c⁄° * 
btôÀ
=
NULL
);

214 
vútuÆ
 
bﬁd‰ame
(c⁄° * 
tôÀ
=
NULL
,

215 c⁄° * 
btôÀ
=
NULL
);

218 
vútuÆ
 
œbñ
(c⁄° * 
t›Labñ
,

219 c⁄° * 
bŸtomLabñ
);

222 
vútuÆ
 
˚¡îãxt
(
row
,c⁄° * 
œbñ
);

230 
	gãm∂©e
<
˛ass
 
	gT
> cœs†
	cNCur£sU£rP™ñ
 : 
public
 
NCur£sP™ñ


232 
public
:

233 
NCur£sU£rP™ñ
 (
∆öes
,

234 
ncﬁs
,

235 
begö_y
 = 0,

236 
begö_x
 = 0,

237 c⁄° 
T
* 
p_U£rD©a
 = 
STATIC_CAST
(T*)(0))

238 : 
	$NCur£sP™ñ
 (
∆öes
, 
ncﬁs
, 
begö_y
, 
begö_x
)

240 i‡(
p
)

241 
	`£t_u£r
 (
c⁄°_ˇ°
<*>(
ªöãΩªt_ˇ°
<const *>

242 (
p_U£rD©a
)));

247 
ex∂icô
 
	`NCur£sU£rP™ñ
(c⁄° 
T
* 
p_U£rD©a
 = 
	`STATIC_CAST
(T*)(0)Ë: 
	$NCur£sP™ñ
()

249 i‡(
p
)

250 
	`£t_u£r
(
c⁄°_ˇ°
<*>(
ªöãΩªt_ˇ°
<c⁄° *>(
p_U£rD©a
)));

251 
	}
};

255 
	gvútuÆ
 ~
	$NCur£sU£rP™ñ
(Ë
	$THROWS
(
NCur£sEx˚±i⁄
Ë{
	}
};

257 
T
* 
	$U£rD©a
 ()

259  
ªöãΩªt_ˇ°
<
T
*>(
	`gë_u£r
 ());

260 
	}
};

263 
vútuÆ
 
	$£tU£rD©a
 (c⁄° 
T
* 
p_U£rD©a
)

265 i‡(
p
)

266 
	`£t_u£r
 (
c⁄°_ˇ°
<*>(
ªöãΩªt_ˇ°
<c⁄° *>(
p_U£rD©a
)));

267 
	}
}

	@/usr/include/cursesw.h

32 #i‚de‡
NCURSES_CURSESW_H_ö˛


33 
	#NCURSES_CURSESW_H_ö˛
 1

	)

38 
	~<cur£s.h
>

41 #i‡
deföed
(
BUILDING_NCURSES_CXX
)

42 
	#NCURSES_CXX_IMPEXP
 
NCURSES_EXPORT_GENERAL_EXPORT


	)

44 
	#NCURSES_CXX_IMPEXP
 
NCURSES_EXPORT_GENERAL_IMPORT


	)

47 
	#NCURSES_CXX_WRAPPED_VAR
(
ty≥
,
«me
Ë
NCURSES_CXX_IMPEXP
Åy≥ 
	`NCURSES_PUBLIC_VAR
“ame)()

	)

49 
	#NCURSES_CXX_EXPORT
(
ty≥
Ë
NCURSES_CXX_IMPEXP
Åy≥ 
NCURSES_API


	)

50 
	#NCURSES_CXX_EXPORT_VAR
(
ty≥
Ë
NCURSES_CXX_IMPEXP
 
	)
type

52 
	~<ëù.h
>

56 #unde‡
löes


61 #unde‡
UNDEF


62 
	#UNDEF
(
«me
Ë
CUR_
 ##
	)
name

64 #ifde‡
addch


65 
ölöe
 
	$UNDEF
(
addch
)(
chty≥
 
ch
Ë{  
	`addch
(ch); 
	}
}

66 #unde‡
addch


67 
	#addch
 
	`UNDEF
(
addch
)

	)

70 #ifde‡
addch°r


71 
ölöe
 
	$UNDEF
(
addch°r
)(
chty≥
 *
©
Ë{  
	`addch°r
◊t); 
	}
}

72 #unde‡
addch°r


73 
	#addch°r
 
	`UNDEF
(
addch°r
)

	)

76 #ifde‡
addn°r


77 
ölöe
 
	$UNDEF
(
addn°r
)(c⁄° *
°r
, 
n
)

78 {  
	`addn°r
(
°r
, 
n
); 
	}
}

79 #unde‡
addn°r


80 
	#addn°r
 
	`UNDEF
(
addn°r
)

	)

83 #ifde‡
add°r


84 
ölöe
 
	$UNDEF
(
add°r
)(c⁄° * 
°r
Ë{  
	`add°r
(°r); 
	}
}

85 #unde‡
add°r


86 
	#add°r
 
	`UNDEF
(
add°r
)

	)

89 #ifde‡
©åoff


90 
ölöe
 
	$UNDEF
(
©åoff
)(
chty≥
 
©
Ë{  
	`©åoff
◊t); 
	}
}

91 #unde‡
©åoff


92 
	#©åoff
 
	`UNDEF
(
©åoff
)

	)

95 #ifde‡
©å⁄


96 
ölöe
 
	$UNDEF
(
©å⁄
)(
chty≥
 
©
Ë{  
	`©å⁄
◊t); 
	}
}

97 #unde‡
©å⁄


98 
	#©å⁄
 
	`UNDEF
(
©å⁄
)

	)

101 #ifde‡
©å£t


102 
ölöe
 
chty≥
 
	$UNDEF
(
©å£t
)(
chty≥
 
©
Ë{  
	`©å£t
◊t); 
	}
}

103 #unde‡
©å£t


104 
	#©å£t
 
	`UNDEF
(
©å£t
)

	)

107 #ifde‡
bkgd


108 
ölöe
 
	$UNDEF
(
bkgd
)(
chty≥
 
ch
Ë{  
	`bkgd
(ch); 
	}
}

109 #unde‡
bkgd


110 
	#bkgd
 
	`UNDEF
(
bkgd
)

	)

113 #ifde‡
bkgd£t


114 
ölöe
 
	$UNDEF
(
bkgd£t
)(
chty≥
 
ch
Ë{ 
	`bkgd£t
(ch); 
	}
}

115 #unde‡
bkgd£t


116 
	#bkgd£t
 
	`UNDEF
(
bkgd£t
)

	)

119 #ifde‡
b‹dî


120 
ölöe
 
	$UNDEF
(
b‹dî
)(
chty≥
 
ls
, chty≥ 
rs
, chty≥ 
ts
, chty≥ 
bs
, chty≥ 
é
, chty≥ 
å
, chty≥ 
bl
, chty≥ 
br
)

121 {  
	`b‹dî
(
ls
, 
rs
, 
ts
, 
bs
, 
é
, 
å
, 
bl
, 
br
); 
	}
}

122 #unde‡
b‹dî


123 
	#b‹dî
 
	`UNDEF
(
b‹dî
)

	)

126 #ifde‡
box


127 
ölöe
 
	$UNDEF
(
box
)(
WINDOW
 *
wö
, 
v
, 
h
Ë{  
	`box
(wö, v, h); 
	}
}

128 #unde‡
box


129 
	#box
 
	`UNDEF
(
box
)

	)

132 #ifde‡
chg©


133 
ölöe
 
	$UNDEF
(
chg©
)(
n
, 
©å_t
 
©å
, 
NCURSES_PAIRS_T
 
cﬁ‹
, c⁄° *
›ts
) {

134  
	`chg©
(
n
, 
©å
, 
cﬁ‹
, 
›ts
); 
	}
}

135 #unde‡
chg©


136 
	#chg©
 
	`UNDEF
(
chg©
)

	)

139 #ifde‡
˛ór


140 
ölöe
 
	$UNDEF
(
˛ór
)(Ë{  
	`˛ór
(); 
	}
}

141 #unde‡
˛ór


142 
	#˛ór
 
	`UNDEF
(
˛ór
)

	)

145 #ifde‡
˛órok


146 
ölöe
 
	$UNDEF
(
˛órok
)(
WINDOW
* 
wö
, 
boﬁ
 
bf
Ë{  
	`˛órok
(wö, bf); 
	}
}

147 #unde‡
˛órok


148 
	#˛órok
 
	`UNDEF
(
˛órok
)

	)

150 "C" 
NCURSES_IMPEXP
 
NCURSES_API
 
˛órok
(
WINDOW
*, 
boﬁ
);

153 #ifde‡
˛πobŸ


154 
ölöe
 
	$UNDEF
(
˛πobŸ
)(Ë{  
	`˛πobŸ
(); 
	}
}

155 #unde‡
˛πobŸ


156 
	#˛πobŸ
 
	`UNDEF
(
˛πobŸ
)

	)

159 #ifde‡
˛π€ﬁ


160 
ölöe
 
	$UNDEF
(
˛π€ﬁ
)(Ë{  
	`˛π€ﬁ
(); 
	}
}

161 #unde‡
˛π€ﬁ


162 
	#˛π€ﬁ
 
	`UNDEF
(
˛π€ﬁ
)

	)

165 #ifde‡
cﬁ‹_£t


166 
ölöe
 
chty≥
 
	$UNDEF
(
cﬁ‹_£t
)(
NCURSES_PAIRS_T
 
p
, * 
›ts
Ë{  
	`cﬁ‹_£t
’, o±s); 
	}
}

167 #unde‡
cﬁ‹_£t


168 
	#cﬁ‹_£t
 
	`UNDEF
(
cﬁ‹_£t
)

	)

171 #ifde‡
¸mode


172 
ölöe
 
	$UNDEF
(
¸mode
)(Ë{  
	`¸mode
(); 
	}
}

173 #unde‡
¸mode


174 
	#¸mode
 
	`UNDEF
(
¸mode
)

	)

177 #ifde‡
dñch


178 
ölöe
 
	$UNDEF
(
dñch
)(Ë{  
	`dñch
(); 
	}
}

179 #unde‡
dñch


180 
	#dñch
 
	`UNDEF
(
dñch
)

	)

183 #ifde‡
dñëñn


184 
ölöe
 
	$UNDEF
(
dñëñn
)(Ë{  
	`dñëñn
(); 
	}
}

185 #unde‡
dñëñn


186 
	#dñëñn
 
	`UNDEF
(
dñëñn
)

	)

189 #ifde‡
echoch¨


190 
ölöe
 
	$UNDEF
(
echoch¨
)(
chty≥
 
ch
Ë{  
	`echoch¨
(ch); 
	}
}

191 #unde‡
echoch¨


192 
	#echoch¨
 
	`UNDEF
(
echoch¨
)

	)

195 #ifde‡
îa£


196 
ölöe
 
	$UNDEF
(
îa£
)(Ë{  
	`îa£
(); 
	}
}

197 #unde‡
îa£


198 
	#îa£
 
	`UNDEF
(
îa£
)

	)

201 #ifde‡
fixãrm


202 
ölöe
 
	$UNDEF
(
fixãrm
)(Ë{  
	`fixãrm
(); 
	}
}

203 #unde‡
fixãrm


204 
	#fixãrm
 
	`UNDEF
(
fixãrm
)

	)

207 #ifde‡
Êushok


208 
ölöe
 
	$UNDEF
(
Êushok
)(
WINDOW
* 
_wö
, 
boﬁ
 
_bf
) {

209  
	`Êushok
(
_wö
, 
_bf
); 
	}
}

210 #unde‡
Êushok


211 
	#Êushok
 
	`UNDEF
(
Êushok
)

	)

213 
	#_no_Êushok


	)

216 #ifde‡
gë©ås


217 
ölöe
 
	$UNDEF
(
gë©ås
)(
WINDOW
 *
wö
Ë{  
	`gë©ås
(wö); 
	}
}

218 #unde‡
gë©ås


219 
	#gë©ås
 
	`UNDEF
(
gë©ås
)

	)

222 #ifde‡
gëbegyx


223 
ölöe
 
	$UNDEF
(
gëbegyx
)(
WINDOW
* 
wö
, & 
y
, & 
x
Ë{ 
	`gëbegyx
(wö, y, x); 
	}
}

224 #unde‡
gëbegyx


225 
	#gëbegyx
 
	`UNDEF
(
gëbegyx
)

	)

228 #ifde‡
gëbkgd


229 
ölöe
 
chty≥
 
	$UNDEF
(
gëbkgd
)(c⁄° 
WINDOW
 *
wö
Ë{  
	`gëbkgd
(wö); 
	}
}

230 #unde‡
gëbkgd


231 
	#gëbkgd
 
	`UNDEF
(
gëbkgd
)

	)

234 #ifde‡
gëch


235 
ölöe
 
	$UNDEF
(
gëch
)(Ë{  
	`gëch
(); 
	}
}

236 #unde‡
gëch


237 
	#gëch
 
	`UNDEF
(
gëch
)

	)

240 #ifde‡
gëmaxyx


241 
ölöe
 
	$UNDEF
(
gëmaxyx
)(
WINDOW
* 
wö
, & 
y
, & 
x
Ë{ 
	`gëmaxyx
(wö, y, x); 
	}
}

242 #unde‡
gëmaxyx


243 
	#gëmaxyx
 
	`UNDEF
(
gëmaxyx
)

	)

246 #ifde‡
gën°r


247 
ölöe
 
	$UNDEF
(
gën°r
)(*
_°r
, 
n
Ë{  
	`gën°r
(_°r,Ç); 
	}
}

248 #unde‡
gën°r


249 
	#gën°r
 
	`UNDEF
(
gën°r
)

	)

252 #ifde‡
gë∑ryx


253 
ölöe
 
	$UNDEF
(
gë∑ryx
)(
WINDOW
* 
wö
, & 
y
, & 
x
Ë{ 
	`gë∑ryx
(wö, y, x); 
	}
}

254 #unde‡
gë∑ryx


255 
	#gë∑ryx
 
	`UNDEF
(
gë∑ryx
)

	)

258 #ifde‡
gë°r


259 
ölöe
 
	$UNDEF
(
gë°r
)(*
_°r
Ë{  
	`gë°r
(_°r); 
	}
}

260 #unde‡
gë°r


261 
	#gë°r
 
	`UNDEF
(
gë°r
)

	)

264 #ifde‡
gëyx


265 
ölöe
 
	$UNDEF
(
gëyx
)(c⁄° 
WINDOW
* 
wö
, & 
y
, & 
x
) {

266 
	`gëyx
(
wö
, 
y
, 
x
); 
	}
}

267 #unde‡
gëyx


268 
	#gëyx
 
	`UNDEF
(
gëyx
)

	)

271 #ifde‡
hlöe


272 
ölöe
 
	$UNDEF
(
hlöe
)(
chty≥
 
ch
, 
n
Ë{  
	`hlöe
(ch,Ç); 
	}
}

273 #unde‡
hlöe


274 
	#hlöe
 
	`UNDEF
(
hlöe
)

	)

277 #ifde‡
öch


278 
ölöe
 
chty≥
 
	$UNDEF
(
öch
)(Ë{  
	`öch
(); 
	}
}

279 #unde‡
öch


280 
	#öch
 
	`UNDEF
(
öch
)

	)

283 #ifde‡
öch°r


284 
ölöe
 
	$UNDEF
(
öch°r
)(
chty≥
 *
°r
Ë{  
	`öch°r
(°r); 
	}
}

285 #unde‡
öch°r


286 
	#öch°r
 
	`UNDEF
(
öch°r
)

	)

289 #ifde‡
ön°r


290 
ölöe
 
	$UNDEF
(
ön°r
)(*
_°r
, 
n
Ë{  
	`ön°r
(_°r,Ç); 
	}
}

291 #unde‡
ön°r


292 
	#ön°r
 
	`UNDEF
(
ön°r
)

	)

295 #ifde‡
ösch


296 
ölöe
 
	$UNDEF
(
ösch
)(
chty≥
 
c
Ë{  
	`ösch
(c); 
	}
}

297 #unde‡
ösch


298 
	#ösch
 
	`UNDEF
(
ösch
)

	)

301 #ifde‡
ösdñ 


302 
ölöe
 
	$UNDEF
(
ösdñ 
)(
n
Ë{  
	`ösdñ 
“); 
	}
}

303 #unde‡
ösdñ 


304 
	#ösdñ 
 
	`UNDEF
(
ösdñ 
)

	)

307 #ifde‡
ö£π 


308 
ölöe
 
	$UNDEF
(
ö£π 
)(Ë{  
	`ö£π 
(); 
	}
}

309 #unde‡
ö£π 


310 
	#ö£π 
 
	`UNDEF
(
ö£π 
)

	)

313 #ifde‡
ö¢°r


314 
ölöe
 
	$UNDEF
(
ö¢°r
)(c⁄° *
_°r
, 
n
) {

315  
	`ö¢°r
(
_°r
, 
n
); 
	}
}

316 #unde‡
ö¢°r


317 
	#ö¢°r
 
	`UNDEF
(
ö¢°r
)

	)

320 #ifde‡
ös°r


321 
ölöe
 
	$UNDEF
(
ös°r
)(c⁄° *
_°r
) {

322  
	`ös°r
(
_°r
); 
	}
}

323 #unde‡
ös°r


324 
	#ös°r
 
	`UNDEF
(
ös°r
)

	)

327 #ifde‡
ö°r


328 
ölöe
 
	$UNDEF
(
ö°r
)(*
_°r
Ë{  
	`ö°r
(_°r); 
	}
}

329 #unde‡
ö°r


330 
	#ö°r
 
	`UNDEF
(
ö°r
)

	)

333 #ifde‡
öåÊush


334 
ölöe
 
	$UNDEF
(
öåÊush
)(
WINDOW
 *
wö
, 
boﬁ
 
bf
Ë{ 
	`öåÊush
(); 
	}
}

335 #unde‡
öåÊush


336 
	#öåÊush
 
	`UNDEF
(
öåÊush
)

	)

339 #ifde‡
is_löëouched


340 
ölöe
 
	$UNDEF
(
is_löëouched
)(
WINDOW
 *
w
, 
l
Ë{  
	`is_löëouched
(w,l); 
	}
}

341 #unde‡
is_löëouched


342 
	#is_löëouched
 
	`UNDEF
(
is_löëouched
)

	)

345 #ifde‡
Àaveok


346 
ölöe
 
	$UNDEF
(
Àaveok
)(
WINDOW
* 
wö
, 
boﬁ
 
bf
Ë{  
	`Àaveok
(wö, bf); 
	}
}

347 #unde‡
Àaveok


348 
	#Àaveok
 
	`UNDEF
(
Àaveok
)

	)

350 "C" 
NCURSES_IMPEXP
 
NCURSES_API
 
Àaveok
(
WINDOW
* 
wö
, 
boﬁ
 
bf
);

353 #ifde‡
move


354 
ölöe
 
	$UNDEF
(
move
)(
x
, 
y
Ë{  
	`move
(x, y); 
	}
}

355 #unde‡
move


356 
	#move
 
	`UNDEF
(
move
)

	)

359 #ifde‡
mvaddch


360 
ölöe
 
	$UNDEF
(
mvaddch
)(
y
, 
x
, 
chty≥
 
ch
)

361 {  
	`mvaddch
(
y
, 
x
, 
ch
); 
	}
}

362 #unde‡
mvaddch


363 
	#mvaddch
 
	`UNDEF
(
mvaddch
)

	)

366 #ifde‡
mvaddn°r


367 
ölöe
 
	$UNDEF
(
mvaddn°r
)(
y
, 
x
, c⁄° *
°r
, 
n
)

368 {  
	`mvaddn°r
(
y
, 
x
, 
°r
, 
n
); 
	}
}

369 #unde‡
mvaddn°r


370 
	#mvaddn°r
 
	`UNDEF
(
mvaddn°r
)

	)

373 #ifde‡
mvadd°r


374 
ölöe
 
	$UNDEF
(
mvadd°r
)(
y
, 
x
, c⁄° * 
°r
)

375 {  
	`mvadd°r
(
y
, 
x
, 
°r
); 
	}
}

376 #unde‡
mvadd°r


377 
	#mvadd°r
 
	`UNDEF
(
mvadd°r
)

	)

380 #ifde‡
mvchg©


381 
ölöe
 
	$UNDEF
(
mvchg©
)(
y
, 
x
, 
n
,

382 
©å_t
 
©å
, 
NCURSES_PAIRS_T
 
cﬁ‹
, c⁄° *
›ts
) {

383  
	`mvchg©
(
y
, 
x
, 
n
, 
©å
, 
cﬁ‹
, 
›ts
); 
	}
}

384 #unde‡
mvchg©


385 
	#mvchg©
 
	`UNDEF
(
mvchg©
)

	)

388 #ifde‡
mvdñch


389 
ölöe
 
	$UNDEF
(
mvdñch
)(
y
, 
x
Ë{  
	`mvdñch
(y, x);
	}
}

390 #unde‡
mvdñch


391 
	#mvdñch
 
	`UNDEF
(
mvdñch
)

	)

394 #ifde‡
mvgëch


395 
ölöe
 
	$UNDEF
(
mvgëch
)(
y
, 
x
Ë{  
	`mvgëch
(y, x);
	}
}

396 #unde‡
mvgëch


397 
	#mvgëch
 
	`UNDEF
(
mvgëch
)

	)

400 #ifde‡
mvgën°r


401 
ölöe
 
	$UNDEF
(
mvgën°r
)(
y
, 
x
, *
°r
, 
n
) {

402  
	`mvgën°r
(
y
, 
x
, 
°r
, 
n
);
	}
}

403 #unde‡
mvgën°r


404 
	#mvgën°r
 
	`UNDEF
(
mvgën°r
)

	)

407 #ifde‡
mvgë°r


408 
ölöe
 
	$UNDEF
(
mvgë°r
)(
y
, 
x
, *
°r
Ë{ 
	`mvgë°r
(y, x, så);
	}
}

409 #unde‡
mvgë°r


410 
	#mvgë°r
 
	`UNDEF
(
mvgë°r
)

	)

413 #ifde‡
mvöch


414 
ölöe
 
chty≥
 
	$UNDEF
(
mvöch
)(
y
, 
x
Ë{  
	`mvöch
(y, x);
	}
}

415 #unde‡
mvöch


416 
	#mvöch
 
	`UNDEF
(
mvöch
)

	)

419 #ifde‡
mvön°r


420 
ölöe
 
	$UNDEF
(
mvön°r
)(
y
, 
x
, *
_°r
, 
n
) {

421  
	`mvön°r
(
y
, 
x
, 
_°r
, 
n
); 
	}
}

422 #unde‡
mvön°r


423 
	#mvön°r
 
	`UNDEF
(
mvön°r
)

	)

426 #ifde‡
mvösch


427 
ölöe
 
	$UNDEF
(
mvösch
)(
y
, 
x
, 
chty≥
 
c
)

428 {  
	`mvösch
(
y
, 
x
, 
c
); 
	}
}

429 #unde‡
mvösch


430 
	#mvösch
 
	`UNDEF
(
mvösch
)

	)

433 #ifde‡
mvö¢°r


434 
ölöe
 
	$UNDEF
(
mvö¢°r
)(
y
, 
x
, c⁄° *
_°r
, 
n
) {

435  
	`mvö¢°r
(
y
, 
x
, 
_°r
, 
n
); 
	}
}

436 #unde‡
mvö¢°r


437 
	#mvö¢°r
 
	`UNDEF
(
mvö¢°r
)

	)

440 #ifde‡
mvös°r


441 
ölöe
 
	$UNDEF
(
mvös°r
)(
y
, 
x
, c⁄° *
_°r
) {

442  
	`mvös°r
(
y
, 
x
, 
_°r
); 
	}
}

443 #unde‡
mvös°r


444 
	#mvös°r
 
	`UNDEF
(
mvös°r
)

	)

447 #ifde‡
mvwaddch


448 
ölöe
 
	$UNDEF
(
mvwaddch
)(
WINDOW
 *
wö
, 
y
, 
x
, c⁄° 
chty≥
 
ch
)

449 {  
	`mvwaddch
(
wö
, 
y
, 
x
, 
ch
); 
	}
}

450 #unde‡
mvwaddch


451 
	#mvwaddch
 
	`UNDEF
(
mvwaddch
)

	)

454 #ifde‡
mvwaddchn°r


455 
ölöe
 
	$UNDEF
(
mvwaddchn°r
)(
WINDOW
 *
wö
, 
y
, 
x
, c⁄° 
chty≥
 *
°r
, 
n
)

456 {  
	`mvwaddchn°r
(
wö
, 
y
, 
x
, 
°r
, 
n
); 
	}
}

457 #unde‡
mvwaddchn°r


458 
	#mvwaddchn°r
 
	`UNDEF
(
mvwaddchn°r
)

	)

461 #ifde‡
mvwaddch°r


462 
ölöe
 
	$UNDEF
(
mvwaddch°r
)(
WINDOW
 *
wö
, 
y
, 
x
, c⁄° 
chty≥
 *
°r
)

463 {  
	`mvwaddch°r
(
wö
, 
y
, 
x
, 
°r
); 
	}
}

464 #unde‡
mvwaddch°r


465 
	#mvwaddch°r
 
	`UNDEF
(
mvwaddch°r
)

	)

468 #ifde‡
mvwaddn°r


469 
ölöe
 
	$UNDEF
(
mvwaddn°r
)(
WINDOW
 *
wö
, 
y
, 
x
, c⁄° *
°r
, 
n
)

470 {  
	`mvwaddn°r
(
wö
, 
y
, 
x
, 
°r
, 
n
); 
	}
}

471 #unde‡
mvwaddn°r


472 
	#mvwaddn°r
 
	`UNDEF
(
mvwaddn°r
)

	)

475 #ifde‡
mvwadd°r


476 
ölöe
 
	$UNDEF
(
mvwadd°r
)(
WINDOW
 *
wö
, 
y
, 
x
, c⁄° * 
°r
)

477 {  
	`mvwadd°r
(
wö
, 
y
, 
x
, 
°r
); 
	}
}

478 #unde‡
mvwadd°r


479 
	#mvwadd°r
 
	`UNDEF
(
mvwadd°r
)

	)

482 #ifde‡
mvwchg©


483 
ölöe
 
	$UNDEF
(
mvwchg©
)(
WINDOW
 *
wö
, 
y
, 
x
, 
n
,

484 
©å_t
 
©å
, 
NCURSES_PAIRS_T
 
cﬁ‹
, c⁄° *
›ts
) {

485  
	`mvwchg©
(
wö
, 
y
, 
x
, 
n
, 
©å
, 
cﬁ‹
, 
›ts
); 
	}
}

486 #unde‡
mvwchg©


487 
	#mvwchg©
 
	`UNDEF
(
mvwchg©
)

	)

490 #ifde‡
mvwdñch


491 
ölöe
 
	$UNDEF
(
mvwdñch
)(
WINDOW
 *
wö
, 
y
, 
x
)

492 {  
	`mvwdñch
(
wö
, 
y
, 
x
); 
	}
}

493 #unde‡
mvwdñch


494 
	#mvwdñch
 
	`UNDEF
(
mvwdñch
)

	)

497 #ifde‡
mvwgëch


498 
ölöe
 
	$UNDEF
(
mvwgëch
)(
WINDOW
 *
wö
, 
y
, 
x
Ë{  
	`mvwgëch
(wö, y, x);
	}
}

499 #unde‡
mvwgëch


500 
	#mvwgëch
 
	`UNDEF
(
mvwgëch
)

	)

503 #ifde‡
mvwgën°r


504 
ölöe
 
	$UNDEF
(
mvwgën°r
)(
WINDOW
 *
wö
, 
y
, 
x
, *
°r
, 
n
)

505 { 
	`mvwgën°r
(
wö
, 
y
, 
x
, 
°r
, 
n
);
	}
}

506 #unde‡
mvwgën°r


507 
	#mvwgën°r
 
	`UNDEF
(
mvwgën°r
)

	)

510 #ifde‡
mvwgë°r


511 
ölöe
 
	$UNDEF
(
mvwgë°r
)(
WINDOW
 *
wö
, 
y
, 
x
, *
°r
)

512 { 
	`mvwgë°r
(
wö
, 
y
, 
x
, 
°r
);
	}
}

513 #unde‡
mvwgë°r


514 
	#mvwgë°r
 
	`UNDEF
(
mvwgë°r
)

	)

517 #ifde‡
mvwhlöe


518 
ölöe
 
	$UNDEF
(
mvwhlöe
)(
WINDOW
 *
wö
, 
y
, 
x
, 
chty≥
 
c
, 
n
) {

519  
	`mvwhlöe
(
wö
, 
y
, 
x
, 
c
, 
n
); 
	}
}

520 #unde‡
mvwhlöe


521 
	#mvwhlöe
 
	`UNDEF
(
mvwhlöe
)

	)

524 #ifde‡
mvwöch


525 
ölöe
 
chty≥
 
	$UNDEF
(
mvwöch
)(
WINDOW
 *
wö
, 
y
, 
x
) {

526  
	`mvwöch
(
wö
, 
y
, 
x
);
	}
}

527 #unde‡
mvwöch


528 
	#mvwöch
 
	`UNDEF
(
mvwöch
)

	)

531 #ifde‡
mvwöchn°r


532 
ölöe
 
	$UNDEF
(
mvwöchn°r
)(
WINDOW
 *
wö
, 
y
, 
x
, 
chty≥
 *
°r
, 
n
Ë{  
	`mvwöchn°r
(wö, y, x, så,Ç); 
	}
}

533 #unde‡
mvwöchn°r


534 
	#mvwöchn°r
 
	`UNDEF
(
mvwöchn°r
)

	)

537 #ifde‡
mvwöch°r


538 
ölöe
 
	$UNDEF
(
mvwöch°r
)(
WINDOW
 *
wö
, 
y
, 
x
, 
chty≥
 *
°r
Ë{  
	`mvwöch°r
(wö, y, x, så); 
	}
}

539 #unde‡
mvwöch°r


540 
	#mvwöch°r
 
	`UNDEF
(
mvwöch°r
)

	)

543 #ifde‡
mvwön°r


544 
ölöe
 
	$UNDEF
(
mvwön°r
)(
WINDOW
 *
wö
, 
y
, 
x
, *
_°r
, 
n
) {

545  
	`mvwön°r
(
wö
, 
y
, 
x
, 
_°r
, 
n
); 
	}
}

546 #unde‡
mvwön°r


547 
	#mvwön°r
 
	`UNDEF
(
mvwön°r
)

	)

550 #ifde‡
mvwösch


551 
ölöe
 
	$UNDEF
(
mvwösch
)(
WINDOW
 *
wö
, 
y
, 
x
, 
chty≥
 
c
)

552 {  
	`mvwösch
(
wö
, 
y
, 
x
, 
c
); 
	}
}

553 #unde‡
mvwösch


554 
	#mvwösch
 
	`UNDEF
(
mvwösch
)

	)

557 #ifde‡
mvwö¢°r


558 
ölöe
 
	$UNDEF
(
mvwö¢°r
)(
WINDOW
 *
w
, 
y
, 
x
, c⁄° *
_°r
, 
n
) {

559  
	`mvwö¢°r
(
w
, 
y
, 
x
, 
_°r
, 
n
); 
	}
}

560 #unde‡
mvwö¢°r


561 
	#mvwö¢°r
 
	`UNDEF
(
mvwö¢°r
)

	)

564 #ifde‡
mvwös°r


565 
ölöe
 
	$UNDEF
(
mvwös°r
)(
WINDOW
 *
w
, 
y
, 
x
, c⁄° *
_°r
) {

566  
	`mvwös°r
(
w
, 
y
, 
x
, 
_°r
); 
	}
}

567 #unde‡
mvwös°r


568 
	#mvwös°r
 
	`UNDEF
(
mvwös°r
)

	)

571 #ifde‡
mvwvlöe


572 
ölöe
 
	$UNDEF
(
mvwvlöe
)(
WINDOW
 *
wö
, 
y
, 
x
, 
chty≥
 
c
, 
n
) {

573  
	`mvwvlöe
(
wö
, 
y
, 
x
, 
c
, 
n
); 
	}
}

574 #unde‡
mvwvlöe


575 
	#mvwvlöe
 
	`UNDEF
(
mvwvlöe
)

	)

578 #ifde‡
«pms


579 
ölöe
 
	$UNDEF
(
«pms
)(
x
Ë{ 
	`«pms
(x); 
	}
}

580 #unde‡
«pms


581 
	#«pms
 
	`UNDEF
(
«pms
)

	)

584 #ifde‡
no¸mode


585 
ölöe
 
	$UNDEF
(
no¸mode
)(Ë{  
	`no¸mode
(); 
	}
}

586 #unde‡
no¸mode


587 
	#no¸mode
 
	`UNDEF
(
no¸mode
)

	)

590 #ifde‡
nodñay


591 
ölöe
 
	$UNDEF
(
nodñay
)(Ë{ 
	`nodñay
(); 
	}
}

592 #unde‡
nodñay


593 
	#nodñay
 
	`UNDEF
(
nodñay
)

	)

596 #ifde‡
ªdøwwö


597 
ölöe
 
	$UNDEF
(
ªdøwwö
)(
WINDOW
 *
wö
Ë{  
	`ªdøwwö
(wö); 
	}
}

598 #unde‡
ªdøwwö


599 
	#ªdøwwö
 
	`UNDEF
(
ªdøwwö
)

	)

602 #ifde‡
ª‰esh


603 
ölöe
 
	$UNDEF
(
ª‰esh
)(Ë{  
	`ª‰esh
(); 
	}
}

604 #unde‡
ª‰esh


605 
	#ª‰esh
 
	`UNDEF
(
ª‰esh
)

	)

608 #ifde‡
ª£âîm


609 
ölöe
 
	$UNDEF
(
ª£âîm
)(Ë{  
	`ª£âîm
(); 
	}
}

610 #unde‡
ª£âîm


611 
	#ª£âîm
 
	`UNDEF
(
ª£âîm
)

	)

614 #ifde‡
ßvëîm


615 
ölöe
 
	$UNDEF
(
ßvëîm
)(Ë{  
	`ßvëîm
(); 
	}
}

616 #unde‡
ßvëîm


617 
	#ßvëîm
 
	`UNDEF
(
ßvëîm
)

	)

620 #ifde‡
s¸l


621 
ölöe
 
	$UNDEF
(
s¸l
)(
l
Ë{  
	`s¸l
÷); 
	}
}

622 #unde‡
s¸l


623 
	#s¸l
 
	`UNDEF
(
s¸l
)

	)

626 #ifde‡
s¸ﬁl


627 
ölöe
 
	$UNDEF
(
s¸ﬁl
)(
WINDOW
 *
wö
Ë{  
	`s¸ﬁl
(wö); 
	}
}

628 #unde‡
s¸ﬁl


629 
	#s¸ﬁl
 
	`UNDEF
(
s¸ﬁl
)

	)

632 #ifde‡
s¸ﬁlok


633 
ölöe
 
	$UNDEF
(
s¸ﬁlok
)(
WINDOW
* 
wö
, 
boﬁ
 
bf
Ë{  
	`s¸ﬁlok
(wö, bf); 
	}
}

634 #unde‡
s¸ﬁlok


635 
	#s¸ﬁlok
 
	`UNDEF
(
s¸ﬁlok
)

	)

637 #if 
deföed
(
__NCURSES_H
)

638 "C" 
NCURSES_IMPEXP
 
NCURSES_API
 
s¸ﬁlok
(
WINDOW
*, 
boﬁ
);

640 "C" 
NCURSES_IMPEXP
 
NCURSES_API
 
s¸ﬁlok
(
WINDOW
*, );

644 #ifde‡
£ts¸ªg


645 
ölöe
 
	$UNDEF
(
£ts¸ªg
)(
t
, 
b
Ë{  
	`£ts¸ªg
—, b); 
	}
}

646 #unde‡
£ts¸ªg


647 
	#£ts¸ªg
 
	`UNDEF
(
£ts¸ªg
)

	)

650 #ifde‡
°™díd


651 
ölöe
 
	$UNDEF
(
°™díd
)(Ë{  
	`°™díd
(); 
	}
}

652 #unde‡
°™díd


653 
	#°™díd
 
	`UNDEF
(
°™díd
)

	)

656 #ifde‡
°™dout


657 
ölöe
 
	$UNDEF
(
°™dout
)(Ë{  
	`°™dout
(); 
	}
}

658 #unde‡
°™dout


659 
	#°™dout
 
	`UNDEF
(
°™dout
)

	)

662 #ifde‡
sub∑d


663 
ölöe
 
WINDOW
 *
	$UNDEF
(
sub∑d
)(
WINDOW
 *
p
, 
l
, 
c
, 
y
, 
x
)

664 {  
	`dîwö
(
p
, 
l
, 
c
, 
y
, 
x
); 
	}
}

665 #unde‡
sub∑d


666 
	#sub∑d
 
	`UNDEF
(
sub∑d
)

	)

669 #ifde‡
timeout


670 
ölöe
 
	$UNDEF
(
timeout
)(
dñay
Ë{ 
	`timeout
(dñay); 
	}
}

671 #unde‡
timeout


672 
	#timeout
 
	`UNDEF
(
timeout
)

	)

675 #ifde‡
touchlöe


676 
ölöe
 
	$UNDEF
(
touchlöe
)(
WINDOW
 *
wö
, 
s
, 
c
)

677 {  
	`touchlöe
(
wö
, 
s
, 
c
); 
	}
}

678 #unde‡
touchlöe


679 
	#touchlöe
 
	`UNDEF
(
touchlöe
)

	)

682 #ifde‡
touchwö


683 
ölöe
 
	$UNDEF
(
touchwö
)(
WINDOW
 *
wö
Ë{  
	`touchwö
(wö); 
	}
}

684 #unde‡
touchwö


685 
	#touchwö
 
	`UNDEF
(
touchwö
)

	)

688 #ifde‡
u¡ouchwö


689 
ölöe
 
	$UNDEF
(
u¡ouchwö
)(
WINDOW
 *
wö
Ë{  
	`u¡ouchwö
(wö); 
	}
}

690 #unde‡
u¡ouchwö


691 
	#u¡ouchwö
 
	`UNDEF
(
u¡ouchwö
)

	)

694 #ifde‡
vlöe


695 
ölöe
 
	$UNDEF
(
vlöe
)(
chty≥
 
ch
, 
n
Ë{  
	`vlöe
(ch,Ç); 
	}
}

696 #unde‡
vlöe


697 
	#vlöe
 
	`UNDEF
(
vlöe
)

	)

700 #ifde‡
waddch°r


701 
ölöe
 
	$UNDEF
(
waddch°r
)(
WINDOW
 *
wö
, 
chty≥
 *
©
Ë{  
	`waddch°r
(wö,át); 
	}
}

702 #unde‡
waddch°r


703 
	#waddch°r
 
	`UNDEF
(
waddch°r
)

	)

706 #ifde‡
wadd°r


707 
ölöe
 
	$UNDEF
(
wadd°r
)(
WINDOW
 *
wö
, *
°r
Ë{  
	`wadd°r
(wö, så); 
	}
}

708 #unde‡
wadd°r


709 
	#wadd°r
 
	`UNDEF
(
wadd°r
)

	)

712 #ifde‡
w©åoff


713 
ölöe
 
	$UNDEF
(
w©åoff
)(
WINDOW
 *
wö
, 
©t
Ë{  
	`w©åoff
(wö,áâ); 
	}
}

714 #unde‡
w©åoff


715 
	#w©åoff
 
	`UNDEF
(
w©åoff
)

	)

718 #ifde‡
w©å£t


719 
ölöe
 
	$UNDEF
(
w©å£t
)(
WINDOW
 *
wö
, 
©t
Ë{  
	`w©å£t
(wö,áâ); 
	}
}

720 #unde‡
w©å£t


721 
	#w©å£t
 
	`UNDEF
(
w©å£t
)

	)

724 #ifde‡
wöch


725 
ölöe
 
chty≥
 
	$UNDEF
(
wöch
)(c⁄° 
WINDOW
* 
wö
Ë{  
	`wöch
(wö); 
	}
}

726 #unde‡
wöch


727 
	#wöch
 
	`UNDEF
(
wöch
)

	)

730 #ifde‡
wöchn°r


731 
ölöe
 
	$UNDEF
(
wöchn°r
)(
WINDOW
 *
wö
, 
chty≥
 *
°r
, 
n
Ë{  
	`wöchn°r
(wö, så,Ç); 
	}
}

732 #unde‡
wöchn°r


733 
	#wöchn°r
 
	`UNDEF
(
wöchn°r
)

	)

736 #ifde‡
wöch°r


737 
ölöe
 
	$UNDEF
(
wöch°r
)(
WINDOW
 *
wö
, 
chty≥
 *
°r
Ë{  
	`wöch°r
(wö, så); 
	}
}

738 #unde‡
wöch°r


739 
	#wöch°r
 
	`UNDEF
(
wöch°r
)

	)

742 #ifde‡
wös°r


743 
ölöe
 
	$UNDEF
(
wös°r
)(
WINDOW
 *
w
, c⁄° *
_°r
) {

744  
	`wös°r
(
w
, 
_°r
); 
	}
}

745 #unde‡
wös°r


746 
	#wös°r
 
	`UNDEF
(
wös°r
)

	)

749 #ifde‡
w°™díd


750 
ölöe
 
	$UNDEF
(
w°™díd
)(
WINDOW
 *
wö
Ë{  
	`w°™díd
(wö); 
	}
}

751 #unde‡
w°™díd


752 
	#w°™díd
 
	`UNDEF
(
w°™díd
)

	)

755 #ifde‡
w°™dout


756 
ölöe
 
	$UNDEF
(
w°™dout
)(
WINDOW
 *
wö
Ë{  
	`w°™dout
(wö); 
	}
}

757 #unde‡
w°™dout


758 
	#w°™dout
 
	`UNDEF
(
w°™dout
)

	)

767 "C" 
_nc_rùofÊöe
(, (*
öô
)(
WINDOW
*, ));

768 "C" 
	`_nc_xx_rùoff_öô
(
WINDOW
 *, );

769 "C" 
	`_nc_has_mou£
();

771 ˛as†
	cNCURSES_CXX_IMPEXP
 
NCur£sWödow


773 
‰õnd
 
˛ass
 
NCur£sMíu
;

774 
‰õnd
 
˛ass
 
NCur£sF‹m
;

776 
¥iv©e
:

777 
boﬁ
 
b_öôülized
;

778 
	`öôülize
();

779 
	`c⁄°ru˘ög
();

780 
‰õnd
 
	`_nc_xx_rùoff_öô
(
WINDOW
 *, );

782 
	`£t_keybﬂrd
();

784 
NCURSES_COLOR_T
 
	$gëcﬁ‹
(
gëback
) const;

785 
NCURSES_PAIRS_T
 
	$gëPaú
() const;

787 
	`£çÆëã
(
NCURSES_COLOR_T
 
f‹e
, NCURSES_COLOR_T 
back
, 
NCURSES_PAIRS_T
 
∑ú
);

788 
cﬁ‹Inôülized
;

792 
	`NCur£sWödow
(
WINDOW
* 
wö
, 
ncﬁs
);

794 
¥Ÿe˘ed
:

795 
vútuÆ
 
	$îr_h™dÀr
(c⁄° *Ëc⁄° 
	`THROWS
(
NCur£sEx˚±i⁄
);

798 
cou¡
;

803 
WINDOW
* 
w
;

805 
boﬁ
 
Ælo˚d
;

807 
NCur£sWödow
* 
∑r
;

808 
NCur£sWödow
* 
subwös
;

809 
NCur£sWödow
* 
sib
;

811 
	`kûl_subwödows
();

816 
	`NCur£sWödow
();

818 
public
:

819 
ex∂icô
 
	`NCur£sWödow
(
WINDOW
* 
wödow
);

821 
	`NCur£sWödow
(
∆öes
,

822 
ncﬁs
,

823 
begö_y
,

824 
begö_x
);

826 
	`NCur£sWödow
(
NCur£sWödow
& 
∑r
,

827 
∆öes
,

828 
ncﬁs
,

829 
begö_y
,

830 
begö_x
,

831 
ab§ñ
 = 'a');

834 
	`NCur£sWödow
(
NCur£sWödow
& 
∑r
,

835 
boﬁ
 
do_box
 = 
TRUE
);

840 
NCur£sWödow
& 
›î©‹
=(c⁄° NCur£sWödow& 
rhs
)

842 i‡(
this
 !&
rhs
)

843 *
this
 = 
rhs
;

844  *
this
;

847 
	$NCur£sWödow
(c⁄° 
NCur£sWödow
& 
rhs
)

848 : 
	`w
(
rhs
.
w
), 
	`Ælo˚d
‘hs.
Ælo˚d
), 
	`∑r
‘hs.
∑r
), 
	`subwös
‘hs.
subwös
), 
	$sib
(
rhs
.
sib
)

850 
	}
}

852 
	gvútuÆ
 ~
	$NCur£sWödow
(Ë
	`THROWS
(
NCur£sEx˚±i⁄
);

854 
NCur£sWödow
 
	`Cl⁄e
();

858 
	`u£Cﬁ‹s
();

861 
	`rùofÊöe
(
rùoff_löes
,

862 (*
öô
)(
NCur£sWödow
& 
wö
));

875 
	$löes
(Ëc⁄° { 
	`öôülize
();  
LINES
; 
	}
}

878 
	$cﬁs
(Ëc⁄° { 
	`öôülize
();  
COLS
; 
	}
}

881 
	$èbsize
(Ëc⁄° { 
	`öôülize
();  
TABSIZE
; 
	}
}

884 
NumbîOfCﬁ‹s
();

887 
	$cﬁ‹s
(Ëc⁄° {  
	`NumbîOfCﬁ‹s
(); 
	}
}

893 
	$height
(Ëc⁄° {  
	`maxy
(Ë+ 1; 
	}
}

896 
	$width
(Ëc⁄° {  
	`maxx
(Ë+ 1; 
	}
}

899 
	$begx
(Ëc⁄° {  
	`gëbegx
(
w
); 
	}
}

902 
	$begy
(Ëc⁄° {  
	`gëbegy
(
w
); 
	}
}

905 
	$curx
(Ëc⁄° {  
	`gëcurx
(
w
); 
	}
}

908 
	$cury
(Ëc⁄° {  
	`gëcury
(
w
); 
	}
}

911 
	$maxx
(Ëc⁄° {  
	`gëmaxx
(
w
Ë=
ERR
 ? ERR : gëmaxx(w)-1; 
	}
}

914 
	$maxy
(Ëc⁄° {  
	`gëmaxy
(
w
Ë=
ERR
 ? ERR : gëmaxy(w)-1; 
	}
}

917 
NCURSES_PAIRS_T
 
	$gëcﬁ‹
() const;

920 
NCURSES_COLOR_T
 
	$f‹eground
(Ëc⁄° {  
	`gëcﬁ‹
(0); 
	}
}

923 
NCURSES_COLOR_T
 
	$background
(Ëc⁄° {  
	`gëcﬁ‹
(1); 
	}
}

926 
£çÆëã
(
NCURSES_COLOR_T
 
f‹e
, NCURSES_COLOR_T 
back
);

929 
£tcﬁ‹
(
NCURSES_PAIRS_T
 
∑ú
);

935 
vútuÆ
 
	$mvwö
(
begö_y
, 
begö_x
) {

936  ::
	`mvwö
(
w
, 
begö_y
, 
begö_x
); 
	}
}

943 
	$move
(
y
, 
x
Ë{  ::
	`wmove
(
w
, y, x); 
	}
}

946 
	$gëyx
(& 
y
, & 
x
Ëc⁄° { ::
	`gëyx
(
w
, y, x); 
	}
}

949 
	$gëbegyx
(& 
y
, & 
x
Ëc⁄° { ::
	`gëbegyx
(
w
, y, x); 
	}
}

952 
	$gëmaxyx
(& 
y
, & 
x
Ëc⁄° { ::
	`gëmaxyx
(
w
, y, x); 
	}
}

955 
	$gë∑ryx
(& 
y
, & 
x
Ëc⁄° { ::
	`gë∑ryx
(
w
, y, x); 
	}
}

958 
	$mvcur
(
ﬁdrow
, 
ﬁdcﬁ
, 
√wrow
, 
√wcﬁ
) const {

959  ::
	`mvcur
(
ﬁdrow
, 
ﬁdcﬁ
, 
√wrow
, 
√wcﬁ
); 
	}
}

965 
	$gëch
(Ë{  ::
	`wgëch
(
w
); 
	}
}

968 
	$gëch
(
y
, 
x
Ë{  ::
	`mvwgëch
(
w
, y, x); 
	}
}

971 
gë°r
(* 
°r
, 
n
=-1) {

972  ::
wgën°r
(
w
, 
°r
, 
n
); }

977 
gë°r
(
y
, 
x
, * 
°r
, 
n
=-1) {

978  ::
mvwgën°r
(
w
, 
y
, 
x
, 
°r
, 
n
); }

982 
ö°r
(*
s
, 
n
=-1Ë{  ::
wön°r
(
w
, s,Ç); }

987 
ö°r
(
y
, 
x
, *
s
, 
n
=-1) {

988  ::
mvwön°r
(
w
, 
y
, 
x
, 
s
, 
n
); }

992 
	$sˇnw
(c⁄° * 
fmt
, ...)

994 #i‡
__GNUG__
 >= 2

995 
	`__©åibuã__
 ((
	`f‹m©
 (
sˇnf
, 2, 3)));

1000 
	`sˇnw
(c⁄° *, 
va_li°
);

1003 
	$sˇnw
(
y
, 
x
, c⁄° * 
fmt
, ...)

1006 #i‡
__GNUG__
 >= 2

1007 
	`__©åibuã__
 ((
	`f‹m©
 (
sˇnf
, 4, 5)));

1012 
	`sˇnw
(
y
, 
x
, c⁄° * 
fmt
, 
va_li°
);

1019 
	$addch
(c⁄° 
chty≥
 
ch
Ë{  ::
	`waddch
(
w
, ch); 
	}
}

1022 
	$addch
(
y
, 
x
, c⁄° 
chty≥
 
ch
) {

1023  ::
	`mvwaddch
(
w
, 
y
, 
x
, 
ch
); 
	}
}

1027 
	$echoch¨
(c⁄° 
chty≥
 
ch
Ë{  ::
	`wechoch¨
(
w
, ch); 
	}
}

1030 
add°r
(c⁄° * 
°r
, 
n
=-1) {

1031  ::
waddn°r
(
w
, 
°r
, 
n
); }

1035 
add°r
(
y
, 
x
, c⁄° * 
°r
, 
n
=-1) {

1036  ::
mvwaddn°r
(
w
, 
y
, 
x
, 
°r
, 
n
); }

1040 
addch°r
(c⁄° 
chty≥
* 
°r
, 
n
=-1) {

1041  ::
waddchn°r
(
w
, 
°r
, 
n
); }

1045 
addch°r
(
y
, 
x
, c⁄° 
chty≥
 * 
°r
, 
n
=-1) {

1046  ::
mvwaddchn°r
(
w
, 
y
, 
x
, 
°r
, 
n
); }

1050 
	$¥ötw
(c⁄° * 
fmt
, ...)

1052 #i‡(
__GNUG__
 >2Ë&& !
	$deföed
(
¥ötf
)

1053 
	`__©åibuã__
 ((
	`f‹m©
 (
¥ötf
, 2, 3)));

1058 
	$¥ötw
(
y
, 
x
, c⁄° * 
fmt
, ...)

1060 #i‡(
__GNUG__
 >2Ë&& !
	$deföed
(
¥ötf
)

1061 
	`__©åibuã__
 ((
	`f‹m©
 (
¥ötf
, 4, 5)));

1066 
	`¥ötw
(c⁄° * 
fmt
, 
va_li°
 
¨gs
);

1069 
	`¥ötw
(
y
, 
x
, c⁄° * 
fmt
, 
va_li°
 
¨gs
);

1072 
chty≥
 
	$öch
(Ëc⁄° {  ::
	`wöch
(
w
); 
	}
}

1075 
chty≥
 
	$öch
(
y
, 
x
Ë{  ::
	`mvwöch
(
w
, y, x); 
	}
}

1079 
öch°r
(
chty≥
* 
°r
, 
n
=-1) {

1080  ::
wöchn°r
(
w
, 
°r
, 
n
); }

1084 
öch°r
(
y
, 
x
, 
chty≥
 * 
°r
, 
n
=-1) {

1085  ::
mvwöchn°r
(
w
, 
y
, 
x
, 
°r
, 
n
); }

1089 
	$ösch
(
chty≥
 
ch
Ë{  ::
	`wösch
(
w
, ch); 
	}
}

1093 
	$ösch
(
y
, 
x
, 
chty≥
 
ch
) {

1094  ::
	`mvwösch
(
w
, 
y
, 
x
, 
ch
); 
	}
}

1098 
	$ö£π 
(Ë{  ::
	`wösdñ 
(
w
, 1); 
	}
}

1101 
	$ösdñ 
(
n
=1Ë{  ::
	`wösdñ 
(
w
,Ç); 
	}
}

1105 
ös°r
(c⁄° *
s
, 
n
=-1) {

1106  ::
wö¢°r
(
w
, 
s
, 
n
); }

1111 
ös°r
(
y
, 
x
, c⁄° *
s
, 
n
=-1) {

1112  ::
mvwö¢°r
(
w
, 
y
, 
x
, 
s
, 
n
); }

1116 
	$©å⁄
 (
chty≥
 
©
Ë{  ::
	`w©å⁄
 (
w
,át); 
	}
}

1119 
	$©åoff
(
chty≥
 
©
Ë{  ::
	`w©åoff
(
w
, 
°©ic_ˇ°
<>◊t)); 
	}
}

1122 
	$©å£t
(
chty≥
 
©
Ë{  ::
	`w©å£t
(
w
, 
°©ic_ˇ°
<>◊t)); 
	}
}

1125 
chty≥
 
	$©ågë
(Ë{  ::
	`gë©ås
(
w
); 
	}
}

1128 
	$cﬁ‹_£t
(
NCURSES_PAIRS_T
 
cﬁ‹_∑ú_numbî
, * 
›ts
=
NULL
) {

1129  ::
	`wcﬁ‹_£t
(
w
, 
cﬁ‹_∑ú_numbî
, 
›ts
); 
	}
}

1132 
	$chg©
(
n
, 
©å_t
 
©å
, 
NCURSES_PAIRS_T
 
cﬁ‹
, c⁄° *
›ts
=
NULL
) {

1133  ::
	`wchg©
(
w
, 
n
, 
©å
, 
cﬁ‹
, 
›ts
); 
	}
}

1138 
	$chg©
(
y
, 
x
,

1139 
n
, 
©å_t
 
©å
, 
NCURSES_PAIRS_T
 
cﬁ‹
, c⁄° *
›ts
=
NULL
) {

1140  ::
	`mvwchg©
(
w
, 
y
, 
x
, 
n
, 
©å
, 
cﬁ‹
, 
›ts
); 
	}
}

1147 
chty≥
 
	$gëbkgd
(Ëc⁄° {  ::
	`gëbkgd
(
w
); 
	}
}

1150 
	$bkgd
(c⁄° 
chty≥
 
ch
Ë{  ::
	`wbkgd
(
w
, ch); 
	}
}

1153 
	$bkgd£t
(
chty≥
 
ch
Ë{ ::
	`wbkgd£t
(
w
, ch); 
	}
}

1159 
	$box
(
chty≥
 
vît
=0, chty≥ 
h‹
=0) {

1160  ::
	`wb‹dî
(
w
, 
vît
, vît, 
h‹
, h‹, 0, 0, 0, 0); 
	}
}

1165 
	$b‹dî
(
chty≥
 
À·
=0, chty≥ 
right
=0,

1166 
chty≥
 
t›
 =0, chty≥ 
bŸtom
=0,

1167 
chty≥
 
t›_À·
 =0, chty≥ 
t›_right
=0,

1168 
chty≥
 
bŸtom_À·
 =0, chty≥ 
bŸtom_right
=0) {

1169  ::
	`wb‹dî
(
w
, 
À·
, 
right
, 
t›
, 
bŸtom
, 
t›_À·
, 
t›_right
,

1170 
bŸtom_À·
, 
bŸtom_right
); 
	}
}

1178 
	$hlöe
(
Àn
, 
chty≥
 
ch
=0Ë{  ::
	`whlöe
(
w
, ch,Üí); 
	}
}

1182 
	$hlöe
(
y
, 
x
, 
Àn
, 
chty≥
 
ch
=0) {

1183  ::
	`mvwhlöe
(
w
, 
y
, 
x
, 
ch
, 
Àn
); 
	}
}

1186 
	$vlöe
(
Àn
, 
chty≥
 
ch
=0Ë{  ::
	`wvlöe
(
w
, ch,Üí); 
	}
}

1190 
	$vlöe
(
y
, 
x
, 
Àn
, 
chty≥
 
ch
=0) {

1191  ::
	`mvwvlöe
(
w
, 
y
, 
x
, 
ch
, 
Àn
); 
	}
}

1197 
	$îa£
(Ë{  ::
	`wîa£
(
w
); 
	}
}

1200 
	$˛ór
(Ë{  ::
	`w˛ór
(
w
); 
	}
}

1203 
	$˛órok
(
boﬁ
 
bf
Ë{  ::
	`˛órok
(
w
, bf); 
	}
}

1207 
	$˛πobŸ
(Ë{  ::
	`w˛πobŸ
(
w
); 
	}
}

1210 
	$˛π€ﬁ
(Ë{  ::
	`w˛π€ﬁ
(
w
); 
	}
}

1213 
	$dñch
(Ë{  ::
	`wdñch
(
w
); 
	}
}

1216 
	$dñch
(
y
, 
x
Ë{  ::
	`mvwdñch
(
w
, y, x); 
	}
}

1220 
	$dñëñn
(Ë{  ::
	`wösdñ 
(
w
, -1); 
	}
}

1226 
	$s¸ﬁl
(
amou¡
=1Ë{  ::
	`ws¸l
(
w
,ámou¡); 
	}
}

1230 
	$s¸ﬁlok
(
boﬁ
 
bf
Ë{  ::
	`s¸ﬁlok
(
w
, bf); 
	}
}

1235 
	$£ts¸ªg
(
‰om
, 
to
) {

1236  ::
	`w£ts¸ªg
(
w
, 
‰om
, 
to
); 
	}
}

1239 
	$idlok
(
boﬁ
 
bf
Ë{  ::
	`idlok
(
w
, bf); 
	}
}

1243 
	$idcok
(
boﬁ
 
bf
Ë{ ::
	`idcok
(
w
, bf); 
	}
}

1247 
	$touchlöe
(
s
, 
c
Ë{  ::
	`touchlöe
(
w
, s, c); 
	}
}

1250 
	$touchwö
(Ë{  ::
	`wtouch 
(
w
, 0, 
	`height
(), 1); 
	}
}

1253 
	$u¡ouchwö
(Ë{  ::
	`wtouch 
(
w
, 0, 
	`height
(), 0); 
	}
}

1256 
	$touch 
(
s
, 
˙t
, 
boﬁ
 
ch™ged
=
TRUE
) {

1257  ::
	`wtouch 
(
w
, 
s
, 
˙t
, 
°©ic_ˇ°
<>(
ch™ged
 ? 1 : 0)); 
	}
}

1261 
boﬁ
 
	$is_löëouched
(
löe
) const {

1262  (::
	`is_löëouched
(
w
, 
löe
Ë=
TRUE
 ? TRUE:
FALSE
); 
	}
}

1265 
boﬁ
 
	$is_wötouched
() const {

1266  (::
	`is_wötouched
(
w
Ë? 
TRUE
:
FALSE
); 
	}
}

1269 
	$Àaveok
(
boﬁ
 
bf
Ë{  ::
	`Àaveok
(
w
, bf); 
	}
}

1273 
	$ªdøw 
(
‰om
, 
n
Ë{  ::
	`wªdøw 
(
w
, from,Ç); 
	}
}

1276 
	$ªdøwwö
(Ë{  ::
	`wªdøw 
(
w
, 0, 
	`height
()); 
	}
}

1279 
	$doupd©e
(Ë{  ::
	`doupd©e
(); 
	}
}

1282 
	$syncdown
(Ë{ ::
	`wsyncdown
(
w
); 
	}
}

1285 
	$syncup
(Ë{ ::
	`wsyncup
(
w
); 
	}
}

1288 
	$cursyncup
(Ë{ ::
	`wcursyncup
(
w
); 
	}
}

1291 
	$syncok
(
boﬁ
 
bf
Ë{  ::
	`syncok
(
w
, bf); 
	}
}

1294 #i‚de‡
_no_Êushok


1295 
	$Êushok
(
boﬁ
 
bf
Ë{  ::
	`Êushok
(
w
, bf); 
	}
}

1298 
	$immedok
(
boﬁ
 
bf
Ë{ ::
	`immedok
(
w
, bf); 
	}
}

1302 
	$öåÊush
(
boﬁ
 
bf
Ë{  ::
	`öåÊush
(
w
, bf); 
	}
}

1304 
	$key∑d
(
boﬁ
 
bf
Ë{  ::
	`key∑d
(
w
, bf); 
	}
}

1307 
	$nodñay
(
boﬁ
 
bf
Ë{  ::
	`nodñay
(
w
, bf); 
	}
}

1309 
	$mëa
(
boﬁ
 
bf
Ë{  ::
	`mëa
(
w
, bf); 
	}
}

1313 
	$°™dout
(Ë{  ::
	`w°™dout
(
w
); 
	}
}

1316 
	$°™díd
(Ë{  ::
	`w°™díd
(
w
); 
	}
}

1323 
vútuÆ
 
	$ª‰esh
(Ë{  ::
	`wª‰esh
(
w
); 
	}
}

1327 
vútuÆ
 
	$nouåe‰esh
(Ë{  ::
	`wnouåe‰esh
(
w
); 
	}
}

1334 
	$ovîœy
(
NCur£sWödow
& 
wö
) {

1335  ::
	`ovîœy
(
w
, 
wö
.w); 
	}
}

1338 
	$ovîwrôe
(
NCur£sWödow
& 
wö
) {

1339  ::
	`ovîwrôe
(
w
, 
wö
.w); 
	}
}

1342 
	$c›ywö
(
NCur£sWödow
& 
wö
,

1343 
smörow
, 
smöcﬁ
,

1344 
dmörow
, 
dmöcﬁ
,

1345 
dmaxrow
, 
dmaxcﬁ
, 
boﬁ
 
ovîœywö
=
TRUE
) {

1346  ::
	`c›ywö
(
w
, 
wö
.w, 
smörow
, 
smöcﬁ
, 
dmörow
, 
dmöcﬁ
,

1347 
dmaxrow
, 
dmaxcﬁ
, 
°©ic_ˇ°
<>(
ovîœywö
 ? 1 : 0)); 
	}
}

1355 #i‡
deföed
(
NCURSES_EXT_FUNCS
) && (NCURSES_EXT_FUNCS != 0)

1356 
	$wªsize
(
√wLöes
, 
√wCﬁumns
) {

1357  ::
	`wªsize
(
w
, 
√wLöes
, 
√wCﬁumns
); 
	}
}

1363 
boﬁ
 
	$has_mou£
() const;

1369 
NCur£sWödow
* 
	$chûd
(Ë{  
subwös
; 
	}
}

1372 
NCur£sWödow
* 
	$siblög
(Ë{  
sib
; 
	}
}

1375 
NCur£sWödow
* 
	$∑ª¡
(Ë{  
∑r
; 
	}
}

1378 
boﬁ
 
isDes˚nd™t
(
NCur£sWödow
& 
wö
);

1385 ˛as†
	cNCURSES_CXX_IMPEXP
 
	mNCur£sCﬁ‹Wödow
 : 
public
 
NCur£sWödow


1387 
public
:

1388 
ex∂icô
 
	$NCur£sCﬁ‹Wödow
(
WINDOW
* &
wödow
)

1389 : 
	$NCur£sWödow
(
wödow
) {

1390 
	`u£Cﬁ‹s
(); }

1392 
	$NCur£sCﬁ‹Wödow
(
∆öes
,

1393 
ncﬁs
,

1394 
begö_y
,

1395 
begö_x
)

1396 : 
	$NCur£sWödow
(
∆öes
, 
ncﬁs
, 
begö_y
, 
begö_x
) {

1397 
	`u£Cﬁ‹s
(); 
	}
}

1399 
NCur£sCﬁ‹Wödow
(
NCur£sWödow
& 
∑ª¡Wö
,

1400 
∆öes
,

1401 
ncﬁs
,

1402 
begö_y
,

1403 
begö_x
,

1404 
ab§ñ
 = 'a')

1405 : 
	$NCur£sWödow
(
∑ª¡Wö
,

1406 
∆öes
, 
ncﬁs
,

1407 
begö_y
, 
begö_x
,

1408 
ab§ñ
 ) {

1409 
	`u£Cﬁ‹s
(); 
	}
}

1416 
	mREQ_PAD_REFRESH
 = 
KEY_MAX
 + 1,

1417 
	mREQ_PAD_UP
,

1418 
	mREQ_PAD_DOWN
,

1419 
	mREQ_PAD_LEFT
,

1420 
	mREQ_PAD_RIGHT
,

1421 
	mREQ_PAD_EXIT


1422 } 
	tPad_Reque°
;

1424 c⁄° 
Pad_Reque°
 
	gPAD_LOW
 = 
REQ_PAD_REFRESH
;

1425 c⁄° 
Pad_Reque°
 
	gPAD_HIGH
 = 
REQ_PAD_EXIT
;

1431 ˛as†
	cNCURSES_CXX_IMPEXP
 
	mNCur£sPad
 : 
public
 
NCur£sWödow


1433 
¥iv©e
:

1434 
NCur£sWödow
* 
võwWö
;

1435 
NCur£sWödow
* 
	mvõwSub
;

1437 
	mh_gridsize
, 
	mv_gridsize
;

1439 
	m¥Ÿe˘ed
:

1440 
mö_row
, 
	mmö_cﬁ
;

1442 
NCur£sWödow
* 
	$Wö
() const {

1444  (
võwSub
?võwSub:(
võwWö
?viewWin:0));

1447 
NCur£sWödow
* 
	$gëWödow
() const {

1448  
võwWö
;

1449 
	}
}

1451 
NCur£sWödow
* 
	$gëSubWödow
() const {

1452  
võwSub
;

1453 
	}
}

1455 
vútuÆ
 
drivî
 (
key
);

1458 
vútuÆ
 
	$OnUnknownO≥øti⁄
(
∑d_ªq
) {

1459 (Ë
∑d_ªq
;

1460 ::
	`bìp
();

1461 
	}
}

1464 
vútuÆ
 
	$OnNavig©i⁄Eº‹
(
∑d_ªq
) {

1465 (Ë
∑d_ªq
;

1466 ::
	`bìp
();

1467 
	}
}

1470 
vútuÆ
 
	$OnO≥øti⁄
(
∑d_ªq
) {

1471 (Ë
∑d_ªq
;

1472 
	}
};

1476 
	gpublic
:

1477 
NCur£sPad
(
∆öes
, 
ncﬁs
);

1480 
	gNCur£sPad
& 
	g›î©‹
=(c⁄° 
NCur£sPad
& 
rhs
)

1482 i‡(
this
 !&
rhs
) {

1483 *
this
 = 
rhs
;

1484 
	gNCur£sWödow
::
›î©‹
=(
rhs
);

1486  *
	gthis
;

1489 
	$NCur£sPad
(c⁄° 
NCur£sPad
& 
rhs
)

1490 : 
	`NCur£sWödow
(
rhs
),

1491 
	`võwWö
(
rhs
.
võwWö
),

1492 
	`võwSub
(
rhs
.
võwSub
),

1493 
	`h_gridsize
(
rhs
.
h_gridsize
),

1494 
	`v_gridsize
(
rhs
.
v_gridsize
),

1495 
	`mö_row
(
rhs
.
mö_row
),

1496 
	$mö_cﬁ
(
rhs
.
mö_cﬁ
)

1498 
	}
}

1500 
	gvútuÆ
 ~
	$NCur£sPad
(Ë
	$THROWS
(
NCur£sEx˚±i⁄
Ë{
	}
}

1502 
	$echoch¨
(c⁄° 
chty≥
 
ch
Ë{  ::
	`≥choch¨
(
w
, ch); 
	}
}

1506 
ª‰esh
();

1510 
	$ª‰esh
(
pmörow
, 
pmöcﬁ
,

1511 
smörow
, 
smöcﬁ
,

1512 
smaxrow
, 
smaxcﬁ
) {

1513  ::
	`¥e‰esh
(
w
, 
pmörow
, 
pmöcﬁ
,

1514 
smörow
, 
smöcﬁ
, 
smaxrow
, 
smaxcﬁ
);

1515 
	}
}

1520 
nouåe‰esh
();

1524 
	$nouåe‰esh
(
pmörow
, 
pmöcﬁ
,

1525 
smörow
, 
smöcﬁ
,

1526 
smaxrow
, 
smaxcﬁ
) {

1527  ::
	`≤ouåe‰esh
(
w
, 
pmörow
, 
pmöcﬁ
,

1528 
smörow
, 
smöcﬁ
, 
smaxrow
, 
smaxcﬁ
);

1529 
	}
}

1532 
vútuÆ
 
£tWödow
(
NCur£sWödow
& 
võw
, 
v_grid
 = 1, 
h_grid
 = 1);

1535 
vútuÆ
 
£tSubWödow
(
NCur£sWödow
& 
sub
);

1540 
vútuÆ
 
	$›î©‹
() ();

1542 
	}
};

1547 ˛as†
	cNCURSES_CXX_IMPEXP
 
	mNCur£sFømedPad
 : 
public
 
NCur£sPad


1549 
¥Ÿe˘ed
:

1550 
vútuÆ
 
OnO≥øti⁄
(
∑d_ªq
);

1552 
	mpublic
:

1553 
	$NCur£sFømedPad
(
NCur£sWödow
& 
wö
, 
∆öes
, 
ncﬁs
,

1554 
v_grid
 = 1, 
h_grid
 = 1)

1555 : 
	$NCur£sPad
(
∆öes
, 
ncﬁs
) {

1556 
NCur£sPad
::
	`£tWödow
(
wö
, 
v_grid
, 
h_grid
);

1557 
NCur£sPad
::
	`£tSubWödow
(*(
√w
 
	`NCur£sWödow
(
wö
)));

1561 
vútuÆ
 ~
	$NCur£sFømedPad
(Ë
	$THROWS
(
NCur£sEx˚±i⁄
) {

1562 
dñëe
 
	`gëSubWödow
();

1563 
	}
}

1565 
	$£tWödow
(
NCur£sWödow
& 
võw
, 
v_grid
 = 1, 
h_grid
 = 1) {

1566 (Ë
võw
;

1567 (Ë
v_grid
;

1568 (Ë
h_grid
;

1569 
	`îr_h™dÀr
("OperationÇotállowed");

1570 
	}
}

1573 
	$£tSubWödow
(
NCur£sWödow
& 
sub
) {

1574 (Ë
sub
;

1575 
	`îr_h™dÀr
("OperationÇotállowed");

1576 
	}
}

	@/usr/include/cursslk.h

38 #i‚de‡
NCURSES_CURSSLK_H_ö˛


39 
	#NCURSES_CURSSLK_H_ö˛


	)

41 
	~<cur£sw.h
>

43 ˛as†
	cNCURSES_CXX_IMPEXP
 
	mSo·_Labñ_Key_Së
 {

44 
	mpublic
:

46 ˛as†
	cNCURSES_CXX_IMPEXP
 
So·_Labñ_Key
 {

47 
‰õnd
 
˛ass
 
So·_Labñ_Key_Së
;

48 
	mpublic
:

49 íum { 
Le·
=0, 
	mCíãr
=1, 
	mRight
=2 } 
	tJu°ifiˇti⁄
;

51 
	m¥iv©e
:

52 *
œbñ
;

53 
Ju°ifiˇti⁄
 
	mf‹m©
;

54 
	mnum
;

56 
So·_Labñ_Key
(Ë: 
œbñ
(
NULL
), 
f‹m©
(
Le·
), 
num
(-1) {

59 
	mvútuÆ
 ~
So·_Labñ_Key
() {

60 
	mdñëe
[] 
	mœbñ
;

63 
	mpublic
:

65 
So·_Labñ_Key
& 
›î©‹
=(*
ãxt
);

68 
	mSo·_Labñ_Key
& 
	m›î©‹
=(
Ju°ifiˇti⁄
 
ju°
) {

69 
f‹m©
 = 
ju°
;

70  *
	mthis
;

74 
ölöe
 * 
›î©‹
()() const {

75  
	mœbñ
;

78 
	mSo·_Labñ_Key
& 
	m›î©‹
=(c⁄° 
So·_Labñ_Key
& 
rhs
)

80 i‡(
this
 !&
rhs
) {

81 *
this
 = 
rhs
;

83  *
	mthis
;

86 
So·_Labñ_Key
(c⁄° So·_Labñ_Key& 
rhs
)

87 : 
œbñ
(
NULL
),

88 
f‹m©
(
rhs
.format),

89 
num
(
rhs
.num)

91 *
	mthis
 = 
rhs
.
œbñ
;

95 
	gpublic
:

97 
N⁄e
 = -1,

98 
	gThªe_Two_Thªe
 = 0,

99 
	gFour_Four
 = 1,

100 
	gPC_StyÀ
 = 2,

101 
	gPC_StyÀ_Wôh_Index
 = 3

102 } 
	tLabñ_Layout
;

104 
	g¥iv©e
:

105 
cou¡
;

106 
Labñ_Layout
 
	gf‹m©
;

107 
	gnum_œbñs
;

108 
boﬁ
 
	gb_©åInô
;

110 
So·_Labñ_Key
 *
	g¶k_¨øy
;

113 
öô
();

116 
a˘iv©e_œbñ
(
i
, 
boﬁ
 
bf
=
TRUE
);

119 
a˘iv©e_œbñs
(
boﬁ
 
bf
);

121 
	g¥Ÿe˘ed
:

122 
ölöe
 
	$Eº‹
 (c⁄° * 
msg
Ëc⁄° 
	$THROWS
(
NCur£sEx˚±i⁄
) {

123 
	`THROW
(
√w
 
	`NCur£sEx˚±i⁄
 (
msg
));

124 
	}
}

127 
	$˛ór
() {

128 i‡(
ERR
==::
	`¶k_˛ór
())

129 
	`Eº‹
("slk_clear");

130 
	}
}

133 
	$ª°‹e
() {

134 i‡(
ERR
==::
	`¶k_ª°‹e
())

135 
	`Eº‹
("slk_restore");

136 
	}
}

138 
	gpublic
:

144 
ex∂icô
 
So·_Labñ_Key_Së
(
Labñ_Layout
 
fmt
);

148 
So·_Labñ_Key_Së
();

150 
	gSo·_Labñ_Key_Së
& 
	g›î©‹
=(c⁄° 
So·_Labñ_Key_Së
& 
rhs
)

152 i‡(
this
 !&
rhs
) {

153 *
this
 = 
rhs
;

154 
öô
();

156  *
	gthis
;

159 
	$So·_Labñ_Key_Së
(c⁄° 
So·_Labñ_Key_Së
& 
rhs
)

160 : 
	`b_©åInô
(
rhs
.
b_©åInô
),

161 
	$¶k_¨øy
(
NULL
)

163 
	`öô
();

164 
	}
}

166 
	gvútuÆ
 ~
	$So·_Labñ_Key_Së
(Ë
	`THROWS
(
NCur£sEx˚±i⁄
);

169 
So·_Labñ_Key
& 
›î©‹
[](
i
);

172 
	$œbñs
() const;

175 
ölöe
 
	$ª‰esh
() {

176 i‡(
ERR
==::
	`¶k_ª‰esh
())

177 
	`Eº‹
("slk_refresh");

178 
	}
}

182 
ölöe
 
	$nouåe‰esh
() {

183 i‡(
ERR
==::
	`¶k_nouåe‰esh
())

184 
	`Eº‹
("slk_noutrefresh");

185 
	}
}

188 
ölöe
 
	$touch
() {

189 i‡(
ERR
==::
	`¶k_touch
())

190 
	`Eº‹
("slk_touch");

191 
	}
}

194 
ölöe
 
	$show
(
i
) {

195 
	`a˘iv©e_œbñ
(
i
,
FALSE
);

196 
	`a˘iv©e_œbñ
(
i
,
TRUE
);

197 
	}
}

200 
ölöe
 
	$hide
(
i
) {

201 
	`a˘iv©e_œbñ
(
i
,
FALSE
);

202 
	}
}

205 
ölöe
 
	$show
() {

206 
	`a˘iv©e_œbñs
(
FALSE
);

207 
	`a˘iv©e_œbñs
(
TRUE
);

208 
	}
}

211 
ölöe
 
	$hide
() {

212 
	`a˘iv©e_œbñs
(
FALSE
);

213 
	}
}

215 
ölöe
 
	$©å⁄
(
©å_t
 
©ås
) {

216 i‡(
ERR
==::
	`¶k_©å⁄
(
©ås
))

217 
	`Eº‹
("slk_attron");

218 
	}
}

220 
ölöe
 
	$©åoff
(
©å_t
 
©ås
) {

221 i‡(
ERR
==::
	`¶k_©åoff
(
©ås
))

222 
	`Eº‹
("slk_attroff");

223 
	}
}

225 
ölöe
 
	$©å£t
(
©å_t
 
©ås
) {

226 i‡(
ERR
==::
	`¶k_©å£t
(
©ås
))

227 
	`Eº‹
("slk_attrset");

228 
	}
}

230 
ölöe
 
	$cﬁ‹
(
cﬁ‹_∑ú_numbî
) {

231 i‡(
ERR
==::
	`¶k_cﬁ‹
(
cﬁ‹_∑ú_numbî
))

232 
	`Eº‹
("slk_color");

233 
	}
}

235 
ölöe
 
©å_t
 
	$©å
() const {

236  ::
	`¶k_©å
();

237 
	}
}

	@/usr/include/dirent.h

22 #i‚def 
_DIRENT_H


23 
	#_DIRENT_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

31 #ifde‡
__USE_XOPEN


32 #i‚de‡
__öo_t_deföed


33 #i‚de‡
__USE_FILE_OFFSET64


34 
__öo_t
 
	töo_t
;

36 
__öo64_t
 
	töo_t
;

38 
	#__öo_t_deföed


	)

40 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


41 
__öo64_t
 
	töo64_t
;

42 
	#__öo64_t_deföed


	)

61 
	~<bôs/dúít.h
>

63 #i‡
deföed
 
__USE_MISC
 && !deföed 
d_fûío


64 
	#d_öo
 
d_fûío


	)

81 #ifde‡
_DIRENT_HAVE_D_NAMLEN


82 
	#_D_EXACT_NAMLEN
(
d
Ë((d)->
d_«mÀn
)

	)

83 
	#_D_ALLOC_NAMLEN
(
d
Ë(
	`_D_EXACT_NAMLEN
 (dË+ 1)

	)

85 
	#_D_EXACT_NAMLEN
(
d
Ë(
	`°æí
 ((d)->
d_«me
))

	)

86 #ifde‡
_DIRENT_HAVE_D_RECLEN


87 
	#_D_ALLOC_NAMLEN
(
d
Ë(((*Ë(dË+ (d)->
d_ª˛í
Ë- &(d)->
d_«me
[0])

	)

89 
	#_D_ALLOC_NAMLEN
(
d
Ë( (d)->
d_«me
 > 1 ?  (d)->d_name \

90 : 
	`_D_EXACT_NAMLEN
 (
d
Ë+ 1)

	)

95 #ifde‡
__USE_MISC


99 
	mDT_UNKNOWN
 = 0,

100 
	#DT_UNKNOWN
 
DT_UNKNOWN


	)

101 
	mDT_FIFO
 = 1,

102 
	#DT_FIFO
 
DT_FIFO


	)

103 
	mDT_CHR
 = 2,

104 
	#DT_CHR
 
DT_CHR


	)

105 
	mDT_DIR
 = 4,

106 
	#DT_DIR
 
DT_DIR


	)

107 
	mDT_BLK
 = 6,

108 
	#DT_BLK
 
DT_BLK


	)

109 
	mDT_REG
 = 8,

110 
	#DT_REG
 
DT_REG


	)

111 
	mDT_LNK
 = 10,

112 
	#DT_LNK
 
DT_LNK


	)

113 
	mDT_SOCK
 = 12,

114 
	#DT_SOCK
 
DT_SOCK


	)

115 
	mDT_WHT
 = 14

116 
	#DT_WHT
 
DT_WHT


	)

120 
	#IFTODT
(
mode
Ë(((modeË& 0170000Ë>> 12)

	)

121 
	#DTTOIF
(
dúty≥
Ë((dúty≥Ë<< 12)

	)

127 
__dú°ªam
 
	tDIR
;

134 
DIR
 *
	$›ídú
 (c⁄° *
__«me
Ë
	`__n⁄nuŒ
 ((1));

136 #ifde‡
__USE_XOPEN2K8


141 
DIR
 *
	`fd›ídú
 (
__fd
);

149 
	$˛o£dú
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

161 #i‚de‡
__USE_FILE_OFFSET64


162 
dúít
 *
	$ªaddú
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

164 #ifde‡
__REDIRECT


165 
dúít
 *
	`__REDIRECT
 (
ªaddú
, (
DIR
 *
__dúp
), 
ªaddú64
)

166 
	`__n⁄nuŒ
 ((1));

168 
	#ªaddú
 
ªaddú64


	)

172 #ifde‡
__USE_LARGEFILE64


173 
dúít64
 *
	$ªaddú64
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

176 #ifde‡
__USE_POSIX


182 #i‚de‡
__USE_FILE_OFFSET64


183 
	$ªaddú_r
 (
DIR
 *
__ª°ri˘
 
__dúp
,

184 
dúít
 *
__ª°ri˘
 
__íåy
,

185 
dúít
 **
__ª°ri˘
 
__ªsu…
)

186 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__©åibuã_dïªˇãd__
;

188 #ifde‡
__REDIRECT


189 
	`__REDIRECT
 (
ªaddú_r
,

190 (
DIR
 *
__ª°ri˘
 
__dúp
,

191 
dúít
 *
__ª°ri˘
 
__íåy
,

192 
dúít
 **
__ª°ri˘
 
__ªsu…
),

193 
ªaddú64_r
)

194 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__©åibuã_dïªˇãd__
;

196 
	#ªaddú_r
 
ªaddú64_r


	)

200 #ifde‡
__USE_LARGEFILE64


201 
	$ªaddú64_r
 (
DIR
 *
__ª°ri˘
 
__dúp
,

202 
dúít64
 *
__ª°ri˘
 
__íåy
,

203 
dúít64
 **
__ª°ri˘
 
__ªsu…
)

204 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__©åibuã_dïªˇãd__
;

209 
	$ªwöddú
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

211 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


212 
	~<bôs/ty≥s.h
>

215 
	$£ekdú
 (
DIR
 *
__dúp
, 
__pos
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

218 
	$ãŒdú
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

221 #ifde‡
__USE_XOPEN2K8


224 
	$dúfd
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

226 #i‡
deföed
 
__OPTIMIZE__
 && deföed 
_DIR_dúfd


227 
	#dúfd
(
dúp
Ë
	`_DIR_dúfd
 (dúp)

	)

230 #ifde‡
__USE_MISC


231 #i‚de‡
MAXNAMLEN


233 
	~<bôs/posix1_lim.h
>

236 #ifde‡
NAME_MAX


237 
	#MAXNAMLEN
 
NAME_MAX


	)

239 
	#MAXNAMLEN
 255

	)

244 
	#__√ed_size_t


	)

245 
	~<°ddef.h
>

254 #i‚de‡
__USE_FILE_OFFSET64


255 
	$sˇndú
 (c⁄° *
__ª°ri˘
 
__dú
,

256 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

257 (*
__£À˘‹
Ë(c⁄° 
dúít
 *),

258 (*
__cmp
Ë(c⁄° 
dúít
 **,

259 c⁄° 
dúít
 **))

260 
	`__n⁄nuŒ
 ((1, 2));

262 #ifde‡
__REDIRECT


263 
	`__REDIRECT
 (
sˇndú
,

264 (c⁄° *
__ª°ri˘
 
__dú
,

265 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

266 (*
__£À˘‹
Ë(c⁄° 
dúít
 *),

267 (*
__cmp
Ë(c⁄° 
dúít
 **,

268 c⁄° 
dúít
 **)),

269 
sˇndú64
Ë
	`__n⁄nuŒ
 ((1, 2));

271 
	#sˇndú
 
sˇndú64


	)

275 #i‡
deföed
 
__USE_GNU
 && deföed 
__USE_LARGEFILE64


278 
	$sˇndú64
 (c⁄° *
__ª°ri˘
 
__dú
,

279 
dúít64
 ***
__ª°ri˘
 
__«mñi°
,

280 (*
__£À˘‹
Ë(c⁄° 
dúít64
 *),

281 (*
__cmp
Ë(c⁄° 
dúít64
 **,

282 c⁄° 
dúít64
 **))

283 
	`__n⁄nuŒ
 ((1, 2));

286 #ifde‡
__USE_GNU


292 #i‚de‡
__USE_FILE_OFFSET64


293 
	$sˇndú©
 (
__dfd
, c⁄° *
__ª°ri˘
 
__dú
,

294 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

295 (*
__£À˘‹
Ë(c⁄° 
dúít
 *),

296 (*
__cmp
Ë(c⁄° 
dúít
 **,

297 c⁄° 
dúít
 **))

298 
	`__n⁄nuŒ
 ((2, 3));

300 #ifde‡
__REDIRECT


301 
	`__REDIRECT
 (
sˇndú©
,

302 (
__dfd
, c⁄° *
__ª°ri˘
 
__dú
,

303 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

304 (*
__£À˘‹
Ë(c⁄° 
dúít
 *),

305 (*
__cmp
Ë(c⁄° 
dúít
 **,

306 c⁄° 
dúít
 **)),

307 
sˇndú©64
Ë
	`__n⁄nuŒ
 ((2, 3));

309 
	#sˇndú©
 
sˇndú©64


	)

315 
	$sˇndú©64
 (
__dfd
, c⁄° *
__ª°ri˘
 
__dú
,

316 
dúít64
 ***
__ª°ri˘
 
__«mñi°
,

317 (*
__£À˘‹
Ë(c⁄° 
dúít64
 *),

318 (*
__cmp
Ë(c⁄° 
dúít64
 **,

319 c⁄° 
dúít64
 **))

320 
	`__n⁄nuŒ
 ((2, 3));

324 #i‚de‡
__USE_FILE_OFFSET64


325 
	$Æphas‹t
 (c⁄° 
dúít
 **
__e1
,

326 c⁄° 
dúít
 **
__e2
)

327 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

329 #ifde‡
__REDIRECT


330 
	`__REDIRECT_NTH
 (
Æphas‹t
,

331 (c⁄° 
dúít
 **
__e1
,

332 c⁄° 
dúít
 **
__e2
),

333 
Æphas‹t64
Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

335 
	#Æphas‹t
 
Æphas‹t64


	)

339 #i‡
deföed
 
__USE_GNU
 && deföed 
__USE_LARGEFILE64


340 
	$Æphas‹t64
 (c⁄° 
dúít64
 **
__e1
,

341 c⁄° 
dúít64
 **
__e2
)

342 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

347 #ifde‡
__USE_MISC


352 #i‚de‡
__USE_FILE_OFFSET64


353 
__ssize_t
 
	$gëdúíåõs
 (
__fd
, *
__ª°ri˘
 
__buf
,

354 
size_t
 
__nbyãs
,

355 
__off_t
 *
__ª°ri˘
 
__ba£p
)

356 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

358 #ifde‡
__REDIRECT


359 
__ssize_t
 
	`__REDIRECT_NTH
 (
gëdúíåõs
,

360 (
__fd
, *
__ª°ri˘
 
__buf
,

361 
size_t
 
__nbyãs
,

362 
__off64_t
 *
__ª°ri˘
 
__ba£p
),

363 
gëdúíåõs64
Ë
	`__n⁄nuŒ
 ((2, 4));

365 
	#gëdúíåõs
 
gëdúíåõs64


	)

369 #ifde‡
__USE_LARGEFILE64


370 
__ssize_t
 
	$gëdúíåõs64
 (
__fd
, *
__ª°ri˘
 
__buf
,

371 
size_t
 
__nbyãs
,

372 
__off64_t
 *
__ª°ri˘
 
__ba£p
)

373 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

377 #ifde‡
__USE_GNU


379 #i‚de‡
__USE_FILE_OFFSET64


380 
	$vîsi⁄s‹t
 (c⁄° 
dúít
 **
__e1
,

381 c⁄° 
dúít
 **
__e2
)

382 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

384 #ifde‡
__REDIRECT


385 
	`__REDIRECT_NTH
 (
vîsi⁄s‹t
,

386 (c⁄° 
dúít
 **
__e1
,

387 c⁄° 
dúít
 **
__e2
),

388 
vîsi⁄s‹t64
)

389 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

391 
	#vîsi⁄s‹t
 
vîsi⁄s‹t64


	)

395 #ifde‡
__USE_LARGEFILE64


396 
	$vîsi⁄s‹t64
 (c⁄° 
dúít64
 **
__e1
,

397 c⁄° 
dúít64
 **
__e2
)

398 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

402 
__END_DECLS


404 
	~<bôs/dúít_ext.h
>

	@/usr/include/dlfcn.h

19 #i‚def 
_DLFCN_H


20 
	#_DLFCN_H
 1

	)

22 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

27 
	~<bôs/dlf˙.h
>

30 #ifde‡
__USE_GNU


31 
	~<bôs/dl_föd_obje˘.h
>

37 
	#RTLD_NEXT
 ((*Ë-1l)

	)

42 
	#RTLD_DEFAULT
 ((*Ë0)

	)

46 
	tLmid_t
;

49 
	#LM_ID_BASE
 0

	)

50 
	#LM_ID_NEWLM
 -1

	)

54 
__BEGIN_DECLS


58 *
	$dl›í
 (c⁄° *
__fûe
, 
__mode
Ë
__THROWNL
;

62 
	$dl˛o£
 (*
__h™dÀ
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1));

66 *
	$dlsym
 (*
__ª°ri˘
 
__h™dÀ
,

67 c⁄° *
__ª°ri˘
 
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

69 #ifde‡
__USE_GNU


71 *
	$dlm›í
 (
Lmid_t
 
__nsid
, c⁄° *
__fûe
, 
__mode
Ë
__THROWNL
;

75 *
	$dlvsym
 (*
__ª°ri˘
 
__h™dÀ
,

76 c⁄° *
__ª°ri˘
 
__«me
,

77 c⁄° *
__ª°ri˘
 
__vîsi⁄
)

78 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

84 *
	$dÀº‹
 (Ë
__THROW
;

87 #ifde‡
__USE_GNU


92 c⁄° *
dli_‚ame
;

93 *
dli_fba£
;

94 c⁄° *
dli_¢ame
;

95 *
dli_ßddr
;

96 } 
	tDl_öfo
;

100 
	$dœddr
 (c⁄° *
__addªss
, 
Dl_öfo
 *
__öfo
)

101 
__THROW
 
	`__n⁄nuŒ
 ((2));

104 
	$dœddr1
 (c⁄° *
__addªss
, 
Dl_öfo
 *
__öfo
,

105 **
__exåa_öfo
, 
__Êags
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

113 
RTLD_DL_SYMENT
 = 1,

116 
RTLD_DL_LINKMAP
 = 2

125 
	$dlöfo
 (*
__ª°ri˘
 
__h™dÀ
,

126 
__ªque°
, *
__ª°ri˘
 
__¨g
)

127 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

133 
RTLD_DI_LMID
 = 1,

137 
RTLD_DI_LINKMAP
 = 2,

139 
RTLD_DI_CONFIGADDR
 = 3,

146 
RTLD_DI_SERINFO
 = 4,

147 
RTLD_DI_SERINFOSIZE
 = 5,

151 
RTLD_DI_ORIGIN
 = 6,

153 
RTLD_DI_PROFILENAME
 = 7,

154 
RTLD_DI_PROFILEOUT
 = 8,

159 
RTLD_DI_TLS_MODID
 = 9,

165 
RTLD_DI_TLS_DATA
 = 10,

167 
RTLD_DI_MAX
 = 10

175 *
dls_«me
;

176 
dls_Êags
;

177 } 
	tDl_£Ω©h
;

183 
size_t
 
dls_size
;

184 
dls_˙t
;

185 #i‡
	`__GNUC_PREREQ
 (3, 0)

190 
__exãnsi⁄__
 union

192 
Dl_£Ω©h
 
dls_£Ω©h
[0];

193 
Dl_£Ω©h
 
__dls_£Ω©h_∑d
[1];

196 
Dl_£Ω©h
 
dls_£Ω©h
[1];

198 } 
	tDl_£röfo
;

200 
	sdl_föd_obje˘


202 
__exãnsi⁄__
 
dlfo_Êags
;

203 *
dlfo_m≠_°¨t
;

204 *
dlfo_m≠_íd
;

205 
lök_m≠
 *
dlfo_lök_m≠
;

206 *
dlfo_eh_‰ame
;

207 #i‡
DLFO_STRUCT_HAS_EH_DBASE


208 *
dlfo_eh_dba£
;

209 #i‡
__WORDSIZE
 == 32

210 
__dlfo_eh_dba£_∑d
;

213 #i‡
DLFO_STRUCT_HAS_EH_COUNT


214 
dlfo_eh_cou¡
;

215 
__dlfo_eh_cou¡_∑d
;

217 
__exãnsi⁄__
 
__dÊo_ª£rved
[7];

222 
	$_dl_föd_obje˘
 (*
__addªss
, 
dl_föd_obje˘
 *
__ªsu…
Ë
__THROW
;

227 
__END_DECLS


	@/usr/include/elf.h

19 #i‚de‡
_ELF_H


20 
	#_ELF_H
 1

	)

24 
	~<°döt.h
>

27 
uöt16_t
 
	tElf32_HÆf
;

28 
uöt16_t
 
	tElf64_HÆf
;

31 
uöt32_t
 
	tElf32_W‹d
;

32 
öt32_t
 
	tElf32_Sw‹d
;

33 
uöt32_t
 
	tElf64_W‹d
;

34 
öt32_t
 
	tElf64_Sw‹d
;

37 
uöt64_t
 
	tElf32_Xw‹d
;

38 
öt64_t
 
	tElf32_Sxw‹d
;

39 
uöt64_t
 
	tElf64_Xw‹d
;

40 
öt64_t
 
	tElf64_Sxw‹d
;

43 
uöt32_t
 
	tElf32_Addr
;

44 
uöt64_t
 
	tElf64_Addr
;

47 
uöt32_t
 
	tElf32_Off
;

48 
uöt64_t
 
	tElf64_Off
;

51 
uöt16_t
 
	tElf32_Se˘i⁄
;

52 
uöt16_t
 
	tElf64_Se˘i⁄
;

55 
Elf32_HÆf
 
	tElf32_Vîsym
;

56 
Elf64_HÆf
 
	tElf64_Vîsym
;

61 
	#EI_NIDENT
 (16)

	)

65 
	me_idít
[
EI_NIDENT
];

66 
Elf32_HÆf
 
	me_ty≥
;

67 
Elf32_HÆf
 
	me_machöe
;

68 
Elf32_W‹d
 
	me_vîsi⁄
;

69 
Elf32_Addr
 
	me_íåy
;

70 
Elf32_Off
 
	me_phoff
;

71 
Elf32_Off
 
	me_shoff
;

72 
Elf32_W‹d
 
	me_Êags
;

73 
Elf32_HÆf
 
	me_ehsize
;

74 
Elf32_HÆf
 
	me_phítsize
;

75 
Elf32_HÆf
 
	me_phnum
;

76 
Elf32_HÆf
 
	me_shítsize
;

77 
Elf32_HÆf
 
	me_shnum
;

78 
Elf32_HÆf
 
	me_sh°∫dx
;

79 } 
	tElf32_Ehdr
;

83 
	me_idít
[
EI_NIDENT
];

84 
Elf64_HÆf
 
	me_ty≥
;

85 
Elf64_HÆf
 
	me_machöe
;

86 
Elf64_W‹d
 
	me_vîsi⁄
;

87 
Elf64_Addr
 
	me_íåy
;

88 
Elf64_Off
 
	me_phoff
;

89 
Elf64_Off
 
	me_shoff
;

90 
Elf64_W‹d
 
	me_Êags
;

91 
Elf64_HÆf
 
	me_ehsize
;

92 
Elf64_HÆf
 
	me_phítsize
;

93 
Elf64_HÆf
 
	me_phnum
;

94 
Elf64_HÆf
 
	me_shítsize
;

95 
Elf64_HÆf
 
	me_shnum
;

96 
Elf64_HÆf
 
	me_sh°∫dx
;

97 } 
	tElf64_Ehdr
;

103 
	#EI_MAG0
 0

	)

104 
	#ELFMAG0
 0x7‡

	)

106 
	#EI_MAG1
 1

	)

107 
	#ELFMAG1
 'E'

	)

109 
	#EI_MAG2
 2

	)

110 
	#ELFMAG2
 'L'

	)

112 
	#EI_MAG3
 3

	)

113 
	#ELFMAG3
 'F'

	)

116 
	#ELFMAG
 "\177ELF"

	)

117 
	#SELFMAG
 4

	)

119 
	#EI_CLASS
 4

	)

120 
	#ELFCLASSNONE
 0

	)

121 
	#ELFCLASS32
 1

	)

122 
	#ELFCLASS64
 2

	)

123 
	#ELFCLASSNUM
 3

	)

125 
	#EI_DATA
 5

	)

126 
	#ELFDATANONE
 0

	)

127 
	#ELFDATA2LSB
 1

	)

128 
	#ELFDATA2MSB
 2

	)

129 
	#ELFDATANUM
 3

	)

131 
	#EI_VERSION
 6

	)

134 
	#EI_OSABI
 7

	)

135 
	#ELFOSABI_NONE
 0

	)

136 
	#ELFOSABI_SYSV
 0

	)

137 
	#ELFOSABI_HPUX
 1

	)

138 
	#ELFOSABI_NETBSD
 2

	)

139 
	#ELFOSABI_GNU
 3

	)

140 
	#ELFOSABI_LINUX
 
ELFOSABI_GNU


	)

141 
	#ELFOSABI_SOLARIS
 6

	)

142 
	#ELFOSABI_AIX
 7

	)

143 
	#ELFOSABI_IRIX
 8

	)

144 
	#ELFOSABI_FREEBSD
 9

	)

145 
	#ELFOSABI_TRU64
 10

	)

146 
	#ELFOSABI_MODESTO
 11

	)

147 
	#ELFOSABI_OPENBSD
 12

	)

148 
	#ELFOSABI_ARM_AEABI
 64

	)

149 
	#ELFOSABI_ARM
 97

	)

150 
	#ELFOSABI_STANDALONE
 255

	)

152 
	#EI_ABIVERSION
 8

	)

154 
	#EI_PAD
 9

	)

158 
	#ET_NONE
 0

	)

159 
	#ET_REL
 1

	)

160 
	#ET_EXEC
 2

	)

161 
	#ET_DYN
 3

	)

162 
	#ET_CORE
 4

	)

163 
	#ET_NUM
 5

	)

164 
	#ET_LOOS
 0x„00

	)

165 
	#ET_HIOS
 0x„f‡

	)

166 
	#ET_LOPROC
 0xff00

	)

167 
	#ET_HIPROC
 0xfff‡

	)

171 
	#EM_NONE
 0

	)

172 
	#EM_M32
 1

	)

173 
	#EM_SPARC
 2

	)

174 
	#EM_386
 3

	)

175 
	#EM_68K
 4

	)

176 
	#EM_88K
 5

	)

177 
	#EM_IAMCU
 6

	)

178 
	#EM_860
 7

	)

179 
	#EM_MIPS
 8

	)

180 
	#EM_S370
 9

	)

181 
	#EM_MIPS_RS3_LE
 10

	)

183 
	#EM_PARISC
 15

	)

185 
	#EM_VPP500
 17

	)

186 
	#EM_SPARC32PLUS
 18

	)

187 
	#EM_960
 19

	)

188 
	#EM_PPC
 20

	)

189 
	#EM_PPC64
 21

	)

190 
	#EM_S390
 22

	)

191 
	#EM_SPU
 23

	)

193 
	#EM_V800
 36

	)

194 
	#EM_FR20
 37

	)

195 
	#EM_RH32
 38

	)

196 
	#EM_RCE
 39

	)

197 
	#EM_ARM
 40

	)

198 
	#EM_FAKE_ALPHA
 41

	)

199 
	#EM_SH
 42

	)

200 
	#EM_SPARCV9
 43

	)

201 
	#EM_TRICORE
 44

	)

202 
	#EM_ARC
 45

	)

203 
	#EM_H8_300
 46

	)

204 
	#EM_H8_300H
 47

	)

205 
	#EM_H8S
 48

	)

206 
	#EM_H8_500
 49

	)

207 
	#EM_IA_64
 50

	)

208 
	#EM_MIPS_X
 51

	)

209 
	#EM_COLDFIRE
 52

	)

210 
	#EM_68HC12
 53

	)

211 
	#EM_MMA
 54

	)

212 
	#EM_PCP
 55

	)

213 
	#EM_NCPU
 56

	)

214 
	#EM_NDR1
 57

	)

215 
	#EM_STARCORE
 58

	)

216 
	#EM_ME16
 59

	)

217 
	#EM_ST100
 60

	)

218 
	#EM_TINYJ
 61

	)

219 
	#EM_X86_64
 62

	)

220 
	#EM_PDSP
 63

	)

221 
	#EM_PDP10
 64

	)

222 
	#EM_PDP11
 65

	)

223 
	#EM_FX66
 66

	)

224 
	#EM_ST9PLUS
 67

	)

225 
	#EM_ST7
 68

	)

226 
	#EM_68HC16
 69

	)

227 
	#EM_68HC11
 70

	)

228 
	#EM_68HC08
 71

	)

229 
	#EM_68HC05
 72

	)

230 
	#EM_SVX
 73

	)

231 
	#EM_ST19
 74

	)

232 
	#EM_VAX
 75

	)

233 
	#EM_CRIS
 76

	)

234 
	#EM_JAVELIN
 77

	)

235 
	#EM_FIREPATH
 78

	)

236 
	#EM_ZSP
 79

	)

237 
	#EM_MMIX
 80

	)

238 
	#EM_HUANY
 81

	)

239 
	#EM_PRISM
 82

	)

240 
	#EM_AVR
 83

	)

241 
	#EM_FR30
 84

	)

242 
	#EM_D10V
 85

	)

243 
	#EM_D30V
 86

	)

244 
	#EM_V850
 87

	)

245 
	#EM_M32R
 88

	)

246 
	#EM_MN10300
 89

	)

247 
	#EM_MN10200
 90

	)

248 
	#EM_PJ
 91

	)

249 
	#EM_OPENRISC
 92

	)

250 
	#EM_ARC_COMPACT
 93

	)

251 
	#EM_XTENSA
 94

	)

252 
	#EM_VIDEOCORE
 95

	)

253 
	#EM_TMM_GPP
 96

	)

254 
	#EM_NS32K
 97

	)

255 
	#EM_TPC
 98

	)

256 
	#EM_SNP1K
 99

	)

257 
	#EM_ST200
 100

	)

258 
	#EM_IP2K
 101

	)

259 
	#EM_MAX
 102

	)

260 
	#EM_CR
 103

	)

261 
	#EM_F2MC16
 104

	)

262 
	#EM_MSP430
 105

	)

263 
	#EM_BLACKFIN
 106

	)

264 
	#EM_SE_C33
 107

	)

265 
	#EM_SEP
 108

	)

266 
	#EM_ARCA
 109

	)

267 
	#EM_UNICORE
 110

	)

268 
	#EM_EXCESS
 111

	)

269 
	#EM_DXP
 112

	)

270 
	#EM_ALTERA_NIOS2
 113

	)

271 
	#EM_CRX
 114

	)

272 
	#EM_XGATE
 115

	)

273 
	#EM_C166
 116

	)

274 
	#EM_M16C
 117

	)

275 
	#EM_DSPIC30F
 118

	)

276 
	#EM_CE
 119

	)

277 
	#EM_M32C
 120

	)

279 
	#EM_TSK3000
 131

	)

280 
	#EM_RS08
 132

	)

281 
	#EM_SHARC
 133

	)

282 
	#EM_ECOG2
 134

	)

283 
	#EM_SCORE7
 135

	)

284 
	#EM_DSP24
 136

	)

285 
	#EM_VIDEOCORE3
 137

	)

286 
	#EM_LATTICEMICO32
 138

	)

287 
	#EM_SE_C17
 139

	)

288 
	#EM_TI_C6000
 140

	)

289 
	#EM_TI_C2000
 141

	)

290 
	#EM_TI_C5500
 142

	)

291 
	#EM_TI_ARP32
 143

	)

292 
	#EM_TI_PRU
 144

	)

294 
	#EM_MMDSP_PLUS
 160

	)

295 
	#EM_CYPRESS_M8C
 161

	)

296 
	#EM_R32C
 162

	)

297 
	#EM_TRIMEDIA
 163

	)

298 
	#EM_QDSP6
 164

	)

299 
	#EM_8051
 165

	)

300 
	#EM_STXP7X
 166

	)

301 
	#EM_NDS32
 167

	)

302 
	#EM_ECOG1X
 168

	)

303 
	#EM_MAXQ30
 169

	)

304 
	#EM_XIMO16
 170

	)

305 
	#EM_MANIK
 171

	)

306 
	#EM_CRAYNV2
 172

	)

307 
	#EM_RX
 173

	)

308 
	#EM_METAG
 174

	)

309 
	#EM_MCST_ELBRUS
 175

	)

310 
	#EM_ECOG16
 176

	)

311 
	#EM_CR16
 177

	)

312 
	#EM_ETPU
 178

	)

313 
	#EM_SLE9X
 179

	)

314 
	#EM_L10M
 180

	)

315 
	#EM_K10M
 181

	)

317 
	#EM_AARCH64
 183

	)

319 
	#EM_AVR32
 185

	)

320 
	#EM_STM8
 186

	)

321 
	#EM_TILE64
 187

	)

322 
	#EM_TILEPRO
 188

	)

323 
	#EM_MICROBLAZE
 189

	)

324 
	#EM_CUDA
 190

	)

325 
	#EM_TILEGX
 191

	)

326 
	#EM_CLOUDSHIELD
 192

	)

327 
	#EM_COREA_1ST
 193

	)

328 
	#EM_COREA_2ND
 194

	)

329 
	#EM_ARCV2
 195

	)

330 
	#EM_OPEN8
 196

	)

331 
	#EM_RL78
 197

	)

332 
	#EM_VIDEOCORE5
 198

	)

333 
	#EM_78KOR
 199

	)

334 
	#EM_56800EX
 200

	)

335 
	#EM_BA1
 201

	)

336 
	#EM_BA2
 202

	)

337 
	#EM_XCORE
 203

	)

338 
	#EM_MCHP_PIC
 204

	)

339 
	#EM_INTELGT
 205

	)

341 
	#EM_KM32
 210

	)

342 
	#EM_KMX32
 211

	)

343 
	#EM_EMX16
 212

	)

344 
	#EM_EMX8
 213

	)

345 
	#EM_KVARC
 214

	)

346 
	#EM_CDP
 215

	)

347 
	#EM_COGE
 216

	)

348 
	#EM_COOL
 217

	)

349 
	#EM_NORC
 218

	)

350 
	#EM_CSR_KALIMBA
 219

	)

351 
	#EM_Z80
 220

	)

352 
	#EM_VISIUM
 221

	)

353 
	#EM_FT32
 222

	)

354 
	#EM_MOXIE
 223

	)

355 
	#EM_AMDGPU
 224

	)

357 
	#EM_RISCV
 243

	)

359 
	#EM_BPF
 247

	)

360 
	#EM_CSKY
 252

	)

362 
	#EM_NUM
 253

	)

366 
	#EM_ARC_A5
 
EM_ARC_COMPACT


	)

372 
	#EM_ALPHA
 0x9026

	)

376 
	#EV_NONE
 0

	)

377 
	#EV_CURRENT
 1

	)

378 
	#EV_NUM
 2

	)

384 
Elf32_W‹d
 
	msh_«me
;

385 
Elf32_W‹d
 
	msh_ty≥
;

386 
Elf32_W‹d
 
	msh_Êags
;

387 
Elf32_Addr
 
	msh_addr
;

388 
Elf32_Off
 
	msh_off£t
;

389 
Elf32_W‹d
 
	msh_size
;

390 
Elf32_W‹d
 
	msh_lök
;

391 
Elf32_W‹d
 
	msh_öfo
;

392 
Elf32_W‹d
 
	msh_addølign
;

393 
Elf32_W‹d
 
	msh_ítsize
;

394 } 
	tElf32_Shdr
;

398 
Elf64_W‹d
 
	msh_«me
;

399 
Elf64_W‹d
 
	msh_ty≥
;

400 
Elf64_Xw‹d
 
	msh_Êags
;

401 
Elf64_Addr
 
	msh_addr
;

402 
Elf64_Off
 
	msh_off£t
;

403 
Elf64_Xw‹d
 
	msh_size
;

404 
Elf64_W‹d
 
	msh_lök
;

405 
Elf64_W‹d
 
	msh_öfo
;

406 
Elf64_Xw‹d
 
	msh_addølign
;

407 
Elf64_Xw‹d
 
	msh_ítsize
;

408 } 
	tElf64_Shdr
;

412 
	#SHN_UNDEF
 0

	)

413 
	#SHN_LORESERVE
 0xff00

	)

414 
	#SHN_LOPROC
 0xff00

	)

415 
	#SHN_BEFORE
 0xff00

	)

417 
	#SHN_AFTER
 0xff01

	)

419 
	#SHN_HIPROC
 0xff1‡

	)

420 
	#SHN_LOOS
 0xff20

	)

421 
	#SHN_HIOS
 0xff3‡

	)

422 
	#SHN_ABS
 0xfff1

	)

423 
	#SHN_COMMON
 0xfff2

	)

424 
	#SHN_XINDEX
 0xfff‡

	)

425 
	#SHN_HIRESERVE
 0xfff‡

	)

429 
	#SHT_NULL
 0

	)

430 
	#SHT_PROGBITS
 1

	)

431 
	#SHT_SYMTAB
 2

	)

432 
	#SHT_STRTAB
 3

	)

433 
	#SHT_RELA
 4

	)

434 
	#SHT_HASH
 5

	)

435 
	#SHT_DYNAMIC
 6

	)

436 
	#SHT_NOTE
 7

	)

437 
	#SHT_NOBITS
 8

	)

438 
	#SHT_REL
 9

	)

439 
	#SHT_SHLIB
 10

	)

440 
	#SHT_DYNSYM
 11

	)

441 
	#SHT_INIT_ARRAY
 14

	)

442 
	#SHT_FINI_ARRAY
 15

	)

443 
	#SHT_PREINIT_ARRAY
 16

	)

444 
	#SHT_GROUP
 17

	)

445 
	#SHT_SYMTAB_SHNDX
 18

	)

446 
	#SHT_NUM
 19

	)

447 
	#SHT_LOOS
 0x60000000

	)

448 
	#SHT_GNU_ATTRIBUTES
 0x6ffffff5

	)

449 
	#SHT_GNU_HASH
 0x6ffffff6

	)

450 
	#SHT_GNU_LIBLIST
 0x6ffffff7

	)

451 
	#SHT_CHECKSUM
 0x6ffffff8

	)

452 
	#SHT_LOSUNW
 0x6fffffÁ

	)

453 
	#SHT_SUNW_move
 0x6fffffÁ

	)

454 
	#SHT_SUNW_COMDAT
 0x6ffffffb

	)

455 
	#SHT_SUNW_symöfo
 0x6ffffffc

	)

456 
	#SHT_GNU_vîdef
 0x6ffffffd

	)

457 
	#SHT_GNU_vî√ed
 0x6fffff„

	)

458 
	#SHT_GNU_vîsym
 0x6ffffff‡

	)

459 
	#SHT_HISUNW
 0x6ffffff‡

	)

460 
	#SHT_HIOS
 0x6ffffff‡

	)

461 
	#SHT_LOPROC
 0x70000000

	)

462 
	#SHT_HIPROC
 0x7ffffff‡

	)

463 
	#SHT_LOUSER
 0x80000000

	)

464 
	#SHT_HIUSER
 0x8ffffff‡

	)

468 
	#SHF_WRITE
 (1 << 0Ë

	)

469 
	#SHF_ALLOC
 (1 << 1Ë

	)

470 
	#SHF_EXECINSTR
 (1 << 2Ë

	)

471 
	#SHF_MERGE
 (1 << 4Ë

	)

472 
	#SHF_STRINGS
 (1 << 5Ë

	)

473 
	#SHF_INFO_LINK
 (1 << 6Ë

	)

474 
	#SHF_LINK_ORDER
 (1 << 7Ë

	)

475 
	#SHF_OS_NONCONFORMING
 (1 << 8Ë

	)

477 
	#SHF_GROUP
 (1 << 9Ë

	)

478 
	#SHF_TLS
 (1 << 10Ë

	)

479 
	#SHF_COMPRESSED
 (1 << 11Ë

	)

480 
	#SHF_MASKOS
 0x0ff00000

	)

481 
	#SHF_MASKPROC
 0xf0000000

	)

482 
	#SHF_GNU_RETAIN
 (1 << 21Ë

	)

483 
	#SHF_ORDERED
 (1 << 30Ë

	)

485 
	#SHF_EXCLUDE
 (1U << 31Ë

	)

492 
Elf32_W‹d
 
	mch_ty≥
;

493 
Elf32_W‹d
 
	mch_size
;

494 
Elf32_W‹d
 
	mch_addølign
;

495 } 
	tElf32_Chdr
;

499 
Elf64_W‹d
 
	mch_ty≥
;

500 
Elf64_W‹d
 
	mch_ª£rved
;

501 
Elf64_Xw‹d
 
	mch_size
;

502 
Elf64_Xw‹d
 
	mch_addølign
;

503 } 
	tElf64_Chdr
;

506 
	#ELFCOMPRESS_ZLIB
 1

	)

507 
	#ELFCOMPRESS_LOOS
 0x60000000

	)

508 
	#ELFCOMPRESS_HIOS
 0x6ffffff‡

	)

509 
	#ELFCOMPRESS_LOPROC
 0x70000000

	)

510 
	#ELFCOMPRESS_HIPROC
 0x7ffffff‡

	)

513 
	#GRP_COMDAT
 0x1

	)

519 
Elf32_W‹d
 
	m°_«me
;

520 
Elf32_Addr
 
	m°_vÆue
;

521 
Elf32_W‹d
 
	m°_size
;

522 
	m°_öfo
;

523 
	m°_Ÿhî
;

524 
Elf32_Se˘i⁄
 
	m°_shndx
;

525 } 
	tElf32_Sym
;

529 
Elf64_W‹d
 
	m°_«me
;

530 
	m°_öfo
;

531 
	m°_Ÿhî
;

532 
Elf64_Se˘i⁄
 
	m°_shndx
;

533 
Elf64_Addr
 
	m°_vÆue
;

534 
Elf64_Xw‹d
 
	m°_size
;

535 } 
	tElf64_Sym
;

542 
Elf32_HÆf
 
	msi_boundto
;

543 
Elf32_HÆf
 
	msi_Êags
;

544 } 
	tElf32_Symöfo
;

548 
Elf64_HÆf
 
	msi_boundto
;

549 
Elf64_HÆf
 
	msi_Êags
;

550 } 
	tElf64_Symöfo
;

553 
	#SYMINFO_BT_SELF
 0xfff‡

	)

554 
	#SYMINFO_BT_PARENT
 0xff„

	)

555 
	#SYMINFO_BT_LOWRESERVE
 0xff00

	)

558 
	#SYMINFO_FLG_DIRECT
 0x0001

	)

559 
	#SYMINFO_FLG_PASSTHRU
 0x0002

	)

560 
	#SYMINFO_FLG_COPY
 0x0004

	)

561 
	#SYMINFO_FLG_LAZYLOAD
 0x0008

	)

564 
	#SYMINFO_NONE
 0

	)

565 
	#SYMINFO_CURRENT
 1

	)

566 
	#SYMINFO_NUM
 2

	)

571 
	#ELF32_ST_BIND
(
vÆ
Ë(((Ë(vÆ)Ë>> 4)

	)

572 
	#ELF32_ST_TYPE
(
vÆ
Ë((vÆË& 0xf)

	)

573 
	#ELF32_ST_INFO
(
böd
, 
ty≥
Ë(((bödË<< 4Ë+ (—y≥Ë& 0xf))

	)

576 
	#ELF64_ST_BIND
(
vÆ
Ë
	`ELF32_ST_BIND
 (vÆ)

	)

577 
	#ELF64_ST_TYPE
(
vÆ
Ë
	`ELF32_ST_TYPE
 (vÆ)

	)

578 
	#ELF64_ST_INFO
(
böd
, 
ty≥
Ë
	`ELF32_ST_INFO
 ((böd), (ty≥))

	)

582 
	#STB_LOCAL
 0

	)

583 
	#STB_GLOBAL
 1

	)

584 
	#STB_WEAK
 2

	)

585 
	#STB_NUM
 3

	)

586 
	#STB_LOOS
 10

	)

587 
	#STB_GNU_UNIQUE
 10

	)

588 
	#STB_HIOS
 12

	)

589 
	#STB_LOPROC
 13

	)

590 
	#STB_HIPROC
 15

	)

594 
	#STT_NOTYPE
 0

	)

595 
	#STT_OBJECT
 1

	)

596 
	#STT_FUNC
 2

	)

597 
	#STT_SECTION
 3

	)

598 
	#STT_FILE
 4

	)

599 
	#STT_COMMON
 5

	)

600 
	#STT_TLS
 6

	)

601 
	#STT_NUM
 7

	)

602 
	#STT_LOOS
 10

	)

603 
	#STT_GNU_IFUNC
 10

	)

604 
	#STT_HIOS
 12

	)

605 
	#STT_LOPROC
 13

	)

606 
	#STT_HIPROC
 15

	)

613 
	#STN_UNDEF
 0

	)

618 
	#ELF32_ST_VISIBILITY
(
o
Ë((oË& 0x03)

	)

621 
	#ELF64_ST_VISIBILITY
(
o
Ë
	`ELF32_ST_VISIBILITY
 (o)

	)

624 
	#STV_DEFAULT
 0

	)

625 
	#STV_INTERNAL
 1

	)

626 
	#STV_HIDDEN
 2

	)

627 
	#STV_PROTECTED
 3

	)

634 
Elf32_Addr
 
	mr_off£t
;

635 
Elf32_W‹d
 
	mr_öfo
;

636 } 
	tElf32_Rñ
;

645 
Elf64_Addr
 
	mr_off£t
;

646 
Elf64_Xw‹d
 
	mr_öfo
;

647 } 
	tElf64_Rñ
;

653 
Elf32_Addr
 
	mr_off£t
;

654 
Elf32_W‹d
 
	mr_öfo
;

655 
Elf32_Sw‹d
 
	mr_addíd
;

656 } 
	tElf32_Rña
;

660 
Elf64_Addr
 
	mr_off£t
;

661 
Elf64_Xw‹d
 
	mr_öfo
;

662 
Elf64_Sxw‹d
 
	mr_addíd
;

663 } 
	tElf64_Rña
;

667 
	#ELF32_R_SYM
(
vÆ
Ë((vÆË>> 8)

	)

668 
	#ELF32_R_TYPE
(
vÆ
Ë((vÆË& 0xff)

	)

669 
	#ELF32_R_INFO
(
sym
, 
ty≥
Ë(((symË<< 8Ë+ (—y≥Ë& 0xff))

	)

671 
	#ELF64_R_SYM
(
i
Ë((iË>> 32)

	)

672 
	#ELF64_R_TYPE
(
i
Ë((iË& 0xffffffff)

	)

673 
	#ELF64_R_INFO
(
sym
,
ty≥
Ë((((
Elf64_Xw‹d
Ë(sym)Ë<< 32Ë+ (ty≥))

	)

679 
Elf32_W‹d
 
	mp_ty≥
;

680 
Elf32_Off
 
	mp_off£t
;

681 
Elf32_Addr
 
	mp_vaddr
;

682 
Elf32_Addr
 
	mp_∑ddr
;

683 
Elf32_W‹d
 
	mp_fûesz
;

684 
Elf32_W‹d
 
	mp_memsz
;

685 
Elf32_W‹d
 
	mp_Êags
;

686 
Elf32_W‹d
 
	mp_Æign
;

687 } 
	tElf32_Phdr
;

691 
Elf64_W‹d
 
	mp_ty≥
;

692 
Elf64_W‹d
 
	mp_Êags
;

693 
Elf64_Off
 
	mp_off£t
;

694 
Elf64_Addr
 
	mp_vaddr
;

695 
Elf64_Addr
 
	mp_∑ddr
;

696 
Elf64_Xw‹d
 
	mp_fûesz
;

697 
Elf64_Xw‹d
 
	mp_memsz
;

698 
Elf64_Xw‹d
 
	mp_Æign
;

699 } 
	tElf64_Phdr
;

705 
	#PN_XNUM
 0xffff

	)

709 
	#PT_NULL
 0

	)

710 
	#PT_LOAD
 1

	)

711 
	#PT_DYNAMIC
 2

	)

712 
	#PT_INTERP
 3

	)

713 
	#PT_NOTE
 4

	)

714 
	#PT_SHLIB
 5

	)

715 
	#PT_PHDR
 6

	)

716 
	#PT_TLS
 7

	)

717 
	#PT_NUM
 8

	)

718 
	#PT_LOOS
 0x60000000

	)

719 
	#PT_GNU_EH_FRAME
 0x6474e550

	)

720 
	#PT_GNU_STACK
 0x6474e551

	)

721 
	#PT_GNU_RELRO
 0x6474e552

	)

722 
	#PT_GNU_PROPERTY
 0x6474e553

	)

723 
	#PT_LOSUNW
 0x6fffffÁ

	)

724 
	#PT_SUNWBSS
 0x6fffffÁ

	)

725 
	#PT_SUNWSTACK
 0x6ffffffb

	)

726 
	#PT_HISUNW
 0x6fffffff

	)

727 
	#PT_HIOS
 0x6ffffff‡

	)

728 
	#PT_LOPROC
 0x70000000

	)

729 
	#PT_HIPROC
 0x7ffffff‡

	)

733 
	#PF_X
 (1 << 0Ë

	)

734 
	#PF_W
 (1 << 1Ë

	)

735 
	#PF_R
 (1 << 2Ë

	)

736 
	#PF_MASKOS
 0x0ff00000

	)

737 
	#PF_MASKPROC
 0xf0000000

	)

741 
	#NT_PRSTATUS
 1

	)

742 
	#NT_PRFPREG
 2

	)

744 
	#NT_FPREGSET
 2

	)

745 
	#NT_PRPSINFO
 3

	)

746 
	#NT_PRXREG
 4

	)

747 
	#NT_TASKSTRUCT
 4

	)

748 
	#NT_PLATFORM
 5

	)

749 
	#NT_AUXV
 6

	)

750 
	#NT_GWINDOWS
 7

	)

751 
	#NT_ASRS
 8

	)

752 
	#NT_PSTATUS
 10

	)

753 
	#NT_PSINFO
 13

	)

754 
	#NT_PRCRED
 14

	)

755 
	#NT_UTSNAME
 15

	)

756 
	#NT_LWPSTATUS
 16

	)

757 
	#NT_LWPSINFO
 17

	)

758 
	#NT_PRFPXREG
 20

	)

759 
	#NT_SIGINFO
 0x53494749

	)

761 
	#NT_FILE
 0x46494c45

	)

763 
	#NT_PRXFPREG
 0x46e62b7‡

	)

764 
	#NT_PPC_VMX
 0x100

	)

765 
	#NT_PPC_SPE
 0x101

	)

766 
	#NT_PPC_VSX
 0x102

	)

767 
	#NT_PPC_TAR
 0x103

	)

768 
	#NT_PPC_PPR
 0x104

	)

769 
	#NT_PPC_DSCR
 0x105

	)

770 
	#NT_PPC_EBB
 0x106

	)

771 
	#NT_PPC_PMU
 0x107

	)

772 
	#NT_PPC_TM_CGPR
 0x108

	)

773 
	#NT_PPC_TM_CFPR
 0x109

	)

774 
	#NT_PPC_TM_CVMX
 0x10®

	)

775 
	#NT_PPC_TM_CVSX
 0x10b

	)

776 
	#NT_PPC_TM_SPR
 0x10¯

	)

777 
	#NT_PPC_TM_CTAR
 0x10d

	)

779 
	#NT_PPC_TM_CPPR
 0x10ê

	)

781 
	#NT_PPC_TM_CDSCR
 0x10‡

	)

783 
	#NT_PPC_PKEY
 0x110

	)

785 
	#NT_386_TLS
 0x200

	)

786 
	#NT_386_IOPERM
 0x201

	)

787 
	#NT_X86_XSTATE
 0x202

	)

788 
	#NT_S390_HIGH_GPRS
 0x300

	)

789 
	#NT_S390_TIMER
 0x301

	)

790 
	#NT_S390_TODCMP
 0x302

	)

791 
	#NT_S390_TODPREG
 0x303

	)

792 
	#NT_S390_CTRS
 0x304

	)

793 
	#NT_S390_PREFIX
 0x305

	)

794 
	#NT_S390_LAST_BREAK
 0x306

	)

795 
	#NT_S390_SYSTEM_CALL
 0x307

	)

796 
	#NT_S390_TDB
 0x308

	)

797 
	#NT_S390_VXRS_LOW
 0x309

	)

799 
	#NT_S390_VXRS_HIGH
 0x30®

	)

800 
	#NT_S390_GS_CB
 0x30b

	)

801 
	#NT_S390_GS_BC
 0x30¯

	)

803 
	#NT_S390_RI_CB
 0x30d

	)

804 
	#NT_ARM_VFP
 0x400

	)

805 
	#NT_ARM_TLS
 0x401

	)

806 
	#NT_ARM_HW_BREAK
 0x402

	)

807 
	#NT_ARM_HW_WATCH
 0x403

	)

808 
	#NT_ARM_SYSTEM_CALL
 0x404

	)

809 
	#NT_ARM_SVE
 0x405

	)

811 
	#NT_ARM_PAC_MASK
 0x406

	)

813 
	#NT_ARM_PACA_KEYS
 0x407

	)

815 
	#NT_ARM_PACG_KEYS
 0x408

	)

817 
	#NT_ARM_TAGGED_ADDR_CTRL
 0x409

	)

819 
	#NT_ARM_PAC_ENABLED_KEYS
 0x40®

	)

821 
	#NT_VMCOREDD
 0x700

	)

822 
	#NT_MIPS_DSP
 0x800

	)

823 
	#NT_MIPS_FP_MODE
 0x801

	)

824 
	#NT_MIPS_MSA
 0x802

	)

828 
	#NT_VERSION
 1

	)

835 
Elf32_Sw‹d
 
	md_èg
;

838 
Elf32_W‹d
 
	md_vÆ
;

839 
Elf32_Addr
 
	md_±r
;

840 } 
	md_un
;

841 } 
	tElf32_Dyn
;

845 
Elf64_Sxw‹d
 
	md_èg
;

848 
Elf64_Xw‹d
 
	md_vÆ
;

849 
Elf64_Addr
 
	md_±r
;

850 } 
	md_un
;

851 } 
	tElf64_Dyn
;

855 
	#DT_NULL
 0

	)

856 
	#DT_NEEDED
 1

	)

857 
	#DT_PLTRELSZ
 2

	)

858 
	#DT_PLTGOT
 3

	)

859 
	#DT_HASH
 4

	)

860 
	#DT_STRTAB
 5

	)

861 
	#DT_SYMTAB
 6

	)

862 
	#DT_RELA
 7

	)

863 
	#DT_RELASZ
 8

	)

864 
	#DT_RELAENT
 9

	)

865 
	#DT_STRSZ
 10

	)

866 
	#DT_SYMENT
 11

	)

867 
	#DT_INIT
 12

	)

868 
	#DT_FINI
 13

	)

869 
	#DT_SONAME
 14

	)

870 
	#DT_RPATH
 15

	)

871 
	#DT_SYMBOLIC
 16

	)

872 
	#DT_REL
 17

	)

873 
	#DT_RELSZ
 18

	)

874 
	#DT_RELENT
 19

	)

875 
	#DT_PLTREL
 20

	)

876 
	#DT_DEBUG
 21

	)

877 
	#DT_TEXTREL
 22

	)

878 
	#DT_JMPREL
 23

	)

879 
	#DT_BIND_NOW
 24

	)

880 
	#DT_INIT_ARRAY
 25

	)

881 
	#DT_FINI_ARRAY
 26

	)

882 
	#DT_INIT_ARRAYSZ
 27

	)

883 
	#DT_FINI_ARRAYSZ
 28

	)

884 
	#DT_RUNPATH
 29

	)

885 
	#DT_FLAGS
 30

	)

886 
	#DT_ENCODING
 32

	)

887 
	#DT_PREINIT_ARRAY
 32

	)

888 
	#DT_PREINIT_ARRAYSZ
 33

	)

889 
	#DT_SYMTAB_SHNDX
 34

	)

890 
	#DT_NUM
 35

	)

891 
	#DT_LOOS
 0x6000000d

	)

892 
	#DT_HIOS
 0x6ffff000

	)

893 
	#DT_LOPROC
 0x70000000

	)

894 
	#DT_HIPROC
 0x7ffffff‡

	)

895 
	#DT_PROCNUM
 
DT_MIPS_NUM


	)

900 
	#DT_VALRNGLO
 0x6ffffd00

	)

901 
	#DT_GNU_PRELINKED
 0x6ffffdf5

	)

902 
	#DT_GNU_CONFLICTSZ
 0x6ffffdf6

	)

903 
	#DT_GNU_LIBLISTSZ
 0x6ffffdf7

	)

904 
	#DT_CHECKSUM
 0x6ffffdf8

	)

905 
	#DT_PLTPADSZ
 0x6ffffdf9

	)

906 
	#DT_MOVEENT
 0x6ffffdÁ

	)

907 
	#DT_MOVESZ
 0x6ffffdfb

	)

908 
	#DT_FEATURE_1
 0x6ffffdf¯

	)

909 
	#DT_POSFLAG_1
 0x6ffffdfd

	)

911 
	#DT_SYMINSZ
 0x6ffffd„

	)

912 
	#DT_SYMINENT
 0x6ffffdf‡

	)

913 
	#DT_VALRNGHI
 0x6ffffdff

	)

914 
	#DT_VALTAGIDX
(
èg
Ë(
DT_VALRNGHI
 - (èg)Ë

	)

915 
	#DT_VALNUM
 12

	)

922 
	#DT_ADDRRNGLO
 0x6fff„00

	)

923 
	#DT_GNU_HASH
 0x6fff„f5

	)

924 
	#DT_TLSDESC_PLT
 0x6fff„f6

	)

925 
	#DT_TLSDESC_GOT
 0x6fff„f7

	)

926 
	#DT_GNU_CONFLICT
 0x6fff„f8

	)

927 
	#DT_GNU_LIBLIST
 0x6fff„f9

	)

928 
	#DT_CONFIG
 0x6fff„Á

	)

929 
	#DT_DEPAUDIT
 0x6fff„fb

	)

930 
	#DT_AUDIT
 0x6fff„f¯

	)

931 
	#DT_PLTPAD
 0x6fff„fd

	)

932 
	#DT_MOVETAB
 0x6fff„„

	)

933 
	#DT_SYMINFO
 0x6fff„f‡

	)

934 
	#DT_ADDRRNGHI
 0x6fff„ff

	)

935 
	#DT_ADDRTAGIDX
(
èg
Ë(
DT_ADDRRNGHI
 - (èg)Ë

	)

936 
	#DT_ADDRNUM
 11

	)

940 
	#DT_VERSYM
 0x6ffffff0

	)

942 
	#DT_RELACOUNT
 0x6ffffff9

	)

943 
	#DT_RELCOUNT
 0x6fffffÁ

	)

946 
	#DT_FLAGS_1
 0x6ffffffb

	)

947 
	#DT_VERDEF
 0x6ffffff¯

	)

949 
	#DT_VERDEFNUM
 0x6ffffffd

	)

950 
	#DT_VERNEED
 0x6fffff„

	)

952 
	#DT_VERNEEDNUM
 0x6ffffff‡

	)

953 
	#DT_VERSIONTAGIDX
(
èg
Ë(
DT_VERNEEDNUM
 - (èg)Ë

	)

954 
	#DT_VERSIONTAGNUM
 16

	)

958 
	#DT_AUXILIARY
 0x7ffffffd

	)

959 
	#DT_FILTER
 0x7ffffff‡

	)

960 
	#DT_EXTRATAGIDX
(
èg
Ë((
Elf32_W‹d
)-((
Elf32_Sw‹d
Ë—agË<<1>>1)-1)

	)

961 
	#DT_EXTRANUM
 3

	)

964 
	#DF_ORIGIN
 0x00000001

	)

965 
	#DF_SYMBOLIC
 0x00000002

	)

966 
	#DF_TEXTREL
 0x00000004

	)

967 
	#DF_BIND_NOW
 0x00000008

	)

968 
	#DF_STATIC_TLS
 0x00000010

	)

972 
	#DF_1_NOW
 0x00000001

	)

973 
	#DF_1_GLOBAL
 0x00000002

	)

974 
	#DF_1_GROUP
 0x00000004

	)

975 
	#DF_1_NODELETE
 0x00000008

	)

976 
	#DF_1_LOADFLTR
 0x00000010

	)

977 
	#DF_1_INITFIRST
 0x00000020

	)

978 
	#DF_1_NOOPEN
 0x00000040

	)

979 
	#DF_1_ORIGIN
 0x00000080

	)

980 
	#DF_1_DIRECT
 0x00000100

	)

981 
	#DF_1_TRANS
 0x00000200

	)

982 
	#DF_1_INTERPOSE
 0x00000400

	)

983 
	#DF_1_NODEFLIB
 0x00000800

	)

984 
	#DF_1_NODUMP
 0x00001000

	)

985 
	#DF_1_CONFALT
 0x00002000

	)

986 
	#DF_1_ENDFILTEE
 0x00004000

	)

987 
	#DF_1_DISPRELDNE
 0x00008000

	)

988 
	#DF_1_DISPRELPND
 0x00010000

	)

989 
	#DF_1_NODIRECT
 0x00020000

	)

990 
	#DF_1_IGNMULDEF
 0x00040000

	)

991 
	#DF_1_NOKSYMS
 0x00080000

	)

992 
	#DF_1_NOHDR
 0x00100000

	)

993 
	#DF_1_EDITED
 0x00200000

	)

994 
	#DF_1_NORELOC
 0x00400000

	)

995 
	#DF_1_SYMINTPOSE
 0x00800000

	)

996 
	#DF_1_GLOBAUDIT
 0x01000000

	)

997 
	#DF_1_SINGLETON
 0x02000000

	)

998 
	#DF_1_STUB
 0x04000000

	)

999 
	#DF_1_PIE
 0x08000000

	)

1000 
	#DF_1_KMOD
 0x10000000

	)

1001 
	#DF_1_WEAKFILTER
 0x20000000

	)

1002 
	#DF_1_NOCOMMON
 0x40000000

	)

1005 
	#DTF_1_PARINIT
 0x00000001

	)

1006 
	#DTF_1_CONFEXP
 0x00000002

	)

1009 
	#DF_P1_LAZYLOAD
 0x00000001

	)

1010 
	#DF_P1_GROUPPERM
 0x00000002

	)

1017 
Elf32_HÆf
 
	mvd_vîsi⁄
;

1018 
Elf32_HÆf
 
	mvd_Êags
;

1019 
Elf32_HÆf
 
	mvd_ndx
;

1020 
Elf32_HÆf
 
	mvd_˙t
;

1021 
Elf32_W‹d
 
	mvd_hash
;

1022 
Elf32_W‹d
 
	mvd_aux
;

1023 
Elf32_W‹d
 
	mvd_√xt
;

1025 } 
	tElf32_Vîdef
;

1029 
Elf64_HÆf
 
	mvd_vîsi⁄
;

1030 
Elf64_HÆf
 
	mvd_Êags
;

1031 
Elf64_HÆf
 
	mvd_ndx
;

1032 
Elf64_HÆf
 
	mvd_˙t
;

1033 
Elf64_W‹d
 
	mvd_hash
;

1034 
Elf64_W‹d
 
	mvd_aux
;

1035 
Elf64_W‹d
 
	mvd_√xt
;

1037 } 
	tElf64_Vîdef
;

1041 
	#VER_DEF_NONE
 0

	)

1042 
	#VER_DEF_CURRENT
 1

	)

1043 
	#VER_DEF_NUM
 2

	)

1046 
	#VER_FLG_BASE
 0x1

	)

1047 
	#VER_FLG_WEAK
 0x2

	)

1050 
	#VER_NDX_LOCAL
 0

	)

1051 
	#VER_NDX_GLOBAL
 1

	)

1052 
	#VER_NDX_LORESERVE
 0xff00

	)

1053 
	#VER_NDX_ELIMINATE
 0xff01

	)

1059 
Elf32_W‹d
 
	mvda_«me
;

1060 
Elf32_W‹d
 
	mvda_√xt
;

1062 } 
	tElf32_Vîdaux
;

1066 
Elf64_W‹d
 
	mvda_«me
;

1067 
Elf64_W‹d
 
	mvda_√xt
;

1069 } 
	tElf64_Vîdaux
;

1076 
Elf32_HÆf
 
	mvn_vîsi⁄
;

1077 
Elf32_HÆf
 
	mvn_˙t
;

1078 
Elf32_W‹d
 
	mvn_fûe
;

1080 
Elf32_W‹d
 
	mvn_aux
;

1081 
Elf32_W‹d
 
	mvn_√xt
;

1083 } 
	tElf32_Vî√ed
;

1087 
Elf64_HÆf
 
	mvn_vîsi⁄
;

1088 
Elf64_HÆf
 
	mvn_˙t
;

1089 
Elf64_W‹d
 
	mvn_fûe
;

1091 
Elf64_W‹d
 
	mvn_aux
;

1092 
Elf64_W‹d
 
	mvn_√xt
;

1094 } 
	tElf64_Vî√ed
;

1098 
	#VER_NEED_NONE
 0

	)

1099 
	#VER_NEED_CURRENT
 1

	)

1100 
	#VER_NEED_NUM
 2

	)

1106 
Elf32_W‹d
 
	mv«_hash
;

1107 
Elf32_HÆf
 
	mv«_Êags
;

1108 
Elf32_HÆf
 
	mv«_Ÿhî
;

1109 
Elf32_W‹d
 
	mv«_«me
;

1110 
Elf32_W‹d
 
	mv«_√xt
;

1112 } 
	tElf32_Vî«ux
;

1116 
Elf64_W‹d
 
	mv«_hash
;

1117 
Elf64_HÆf
 
	mv«_Êags
;

1118 
Elf64_HÆf
 
	mv«_Ÿhî
;

1119 
Elf64_W‹d
 
	mv«_«me
;

1120 
Elf64_W‹d
 
	mv«_√xt
;

1122 } 
	tElf64_Vî«ux
;

1126 
	#VER_FLG_WEAK
 0x2

	)

1140 
uöt32_t
 
	ma_ty≥
;

1143 
uöt32_t
 
	ma_vÆ
;

1147 } 
	ma_un
;

1148 } 
	tElf32_auxv_t
;

1152 
uöt64_t
 
	ma_ty≥
;

1155 
uöt64_t
 
	ma_vÆ
;

1159 } 
	ma_un
;

1160 } 
	tElf64_auxv_t
;

1164 
	#AT_NULL
 0

	)

1165 
	#AT_IGNORE
 1

	)

1166 
	#AT_EXECFD
 2

	)

1167 
	#AT_PHDR
 3

	)

1168 
	#AT_PHENT
 4

	)

1169 
	#AT_PHNUM
 5

	)

1170 
	#AT_PAGESZ
 6

	)

1171 
	#AT_BASE
 7

	)

1172 
	#AT_FLAGS
 8

	)

1173 
	#AT_ENTRY
 9

	)

1174 
	#AT_NOTELF
 10

	)

1175 
	#AT_UID
 11

	)

1176 
	#AT_EUID
 12

	)

1177 
	#AT_GID
 13

	)

1178 
	#AT_EGID
 14

	)

1179 
	#AT_CLKTCK
 17

	)

1182 
	#AT_PLATFORM
 15

	)

1183 
	#AT_HWCAP
 16

	)

1188 
	#AT_FPUCW
 18

	)

1191 
	#AT_DCACHEBSIZE
 19

	)

1192 
	#AT_ICACHEBSIZE
 20

	)

1193 
	#AT_UCACHEBSIZE
 21

	)

1197 
	#AT_IGNOREPPC
 22

	)

1199 
	#AT_SECURE
 23

	)

1201 
	#AT_BASE_PLATFORM
 24

	)

1203 
	#AT_RANDOM
 25

	)

1205 
	#AT_HWCAP2
 26

	)

1208 
	#AT_EXECFN
 31

	)

1212 
	#AT_SYSINFO
 32

	)

1213 
	#AT_SYSINFO_EHDR
 33

	)

1217 
	#AT_L1I_CACHESHAPE
 34

	)

1218 
	#AT_L1D_CACHESHAPE
 35

	)

1219 
	#AT_L2_CACHESHAPE
 36

	)

1220 
	#AT_L3_CACHESHAPE
 37

	)

1225 
	#AT_L1I_CACHESIZE
 40

	)

1226 
	#AT_L1I_CACHEGEOMETRY
 41

	)

1227 
	#AT_L1D_CACHESIZE
 42

	)

1228 
	#AT_L1D_CACHEGEOMETRY
 43

	)

1229 
	#AT_L2_CACHESIZE
 44

	)

1230 
	#AT_L2_CACHEGEOMETRY
 45

	)

1231 
	#AT_L3_CACHESIZE
 46

	)

1232 
	#AT_L3_CACHEGEOMETRY
 47

	)

1234 
	#AT_MINSIGSTKSZ
 51

	)

1241 
Elf32_W‹d
 
	mn_«mesz
;

1242 
Elf32_W‹d
 
	mn_descsz
;

1243 
Elf32_W‹d
 
	mn_ty≥
;

1244 } 
	tElf32_Nhdr
;

1248 
Elf64_W‹d
 
	mn_«mesz
;

1249 
Elf64_W‹d
 
	mn_descsz
;

1250 
Elf64_W‹d
 
	mn_ty≥
;

1251 } 
	tElf64_Nhdr
;

1256 
	#ELF_NOTE_SOLARIS
 "SUNW Sﬁ¨is"

	)

1259 
	#ELF_NOTE_GNU
 "GNU"

	)

1262 
	#ELF_NOTE_FDO
 "FDO"

	)

1267 
	#ELF_NOTE_PAGESIZE_HINT
 1

	)

1278 
	#NT_GNU_ABI_TAG
 1

	)

1279 
	#ELF_NOTE_ABI
 
NT_GNU_ABI_TAG


	)

1283 
	#ELF_NOTE_OS_LINUX
 0

	)

1284 
	#ELF_NOTE_OS_GNU
 1

	)

1285 
	#ELF_NOTE_OS_SOLARIS2
 2

	)

1286 
	#ELF_NOTE_OS_FREEBSD
 3

	)

1294 
	#NT_GNU_HWCAP
 2

	)

1298 
	#NT_GNU_BUILD_ID
 3

	)

1301 
	#NT_GNU_GOLD_VERSION
 4

	)

1304 
	#NT_GNU_PROPERTY_TYPE_0
 5

	)

1308 
	#NT_FDO_PACKAGING_METADATA
 0xˇ„1a7e

	)

1311 
	#NOTE_GNU_PROPERTY_SECTION_NAME
 ".nŸe.gnu.¥›îty"

	)

1316 
	#GNU_PROPERTY_STACK_SIZE
 1

	)

1318 
	#GNU_PROPERTY_NO_COPY_ON_PROTECTED
 2

	)

1322 
	#GNU_PROPERTY_UINT32_AND_LO
 0xb0000000

	)

1323 
	#GNU_PROPERTY_UINT32_AND_HI
 0xb0007fff

	)

1327 
	#GNU_PROPERTY_UINT32_OR_LO
 0xb0008000

	)

1328 
	#GNU_PROPERTY_UINT32_OR_HI
 0xb000ffff

	)

1331 
	#GNU_PROPERTY_1_NEEDED
 
GNU_PROPERTY_UINT32_OR_LO


	)

1335 
	#GNU_PROPERTY_1_NEEDED_INDIRECT_EXTERN_ACCESS
 (1U << 0)

	)

1338 
	#GNU_PROPERTY_LOPROC
 0xc0000000

	)

1340 
	#GNU_PROPERTY_HIPROC
 0xdfffffff

	)

1342 
	#GNU_PROPERTY_LOUSER
 0xe0000000

	)

1344 
	#GNU_PROPERTY_HIUSER
 0xffffffff

	)

1347 
	#GNU_PROPERTY_AARCH64_FEATURE_1_AND
 0xc0000000

	)

1349 
	#GNU_PROPERTY_AARCH64_FEATURE_1_BTI
 (1U << 0)

	)

1350 
	#GNU_PROPERTY_AARCH64_FEATURE_1_PAC
 (1U << 1)

	)

1354 
	#GNU_PROPERTY_X86_ISA_1_USED
 0xc0010002

	)

1357 
	#GNU_PROPERTY_X86_ISA_1_NEEDED
 0xc0008002

	)

1359 
	#GNU_PROPERTY_X86_FEATURE_1_AND
 0xc0000002

	)

1363 
	#GNU_PROPERTY_X86_ISA_1_BASELINE
 (1U << 0)

	)

1367 
	#GNU_PROPERTY_X86_ISA_1_V2
 (1U << 1)

	)

1370 
	#GNU_PROPERTY_X86_ISA_1_V3
 (1U << 2)

	)

1373 
	#GNU_PROPERTY_X86_ISA_1_V4
 (1U << 3)

	)

1377 
	#GNU_PROPERTY_X86_FEATURE_1_IBT
 (1U << 0)

	)

1380 
	#GNU_PROPERTY_X86_FEATURE_1_SHSTK
 (1U << 1)

	)

1385 
Elf32_Xw‹d
 
	mm_vÆue
;

1386 
Elf32_W‹d
 
	mm_öfo
;

1387 
Elf32_W‹d
 
	mm_poff£t
;

1388 
Elf32_HÆf
 
	mm_ª≥©
;

1389 
Elf32_HÆf
 
	mm_°ride
;

1390 } 
	tElf32_Move
;

1394 
Elf64_Xw‹d
 
	mm_vÆue
;

1395 
Elf64_Xw‹d
 
	mm_öfo
;

1396 
Elf64_Xw‹d
 
	mm_poff£t
;

1397 
Elf64_HÆf
 
	mm_ª≥©
;

1398 
Elf64_HÆf
 
	mm_°ride
;

1399 } 
	tElf64_Move
;

1402 
	#ELF32_M_SYM
(
öfo
Ë((öfoË>> 8)

	)

1403 
	#ELF32_M_SIZE
(
öfo
Ë((Ë(öfo))

	)

1404 
	#ELF32_M_INFO
(
sym
, 
size
Ë(((symË<< 8Ë+ (Ë(size))

	)

1406 
	#ELF64_M_SYM
(
öfo
Ë
	`ELF32_M_SYM
 (öfo)

	)

1407 
	#ELF64_M_SIZE
(
öfo
Ë
	`ELF32_M_SIZE
 (öfo)

	)

1408 
	#ELF64_M_INFO
(
sym
, 
size
Ë
	`ELF32_M_INFO
 (sym, size)

	)

1414 
	#EF_CPU32
 0x00810000

	)

1418 
	#R_68K_NONE
 0

	)

1419 
	#R_68K_32
 1

	)

1420 
	#R_68K_16
 2

	)

1421 
	#R_68K_8
 3

	)

1422 
	#R_68K_PC32
 4

	)

1423 
	#R_68K_PC16
 5

	)

1424 
	#R_68K_PC8
 6

	)

1425 
	#R_68K_GOT32
 7

	)

1426 
	#R_68K_GOT16
 8

	)

1427 
	#R_68K_GOT8
 9

	)

1428 
	#R_68K_GOT32O
 10

	)

1429 
	#R_68K_GOT16O
 11

	)

1430 
	#R_68K_GOT8O
 12

	)

1431 
	#R_68K_PLT32
 13

	)

1432 
	#R_68K_PLT16
 14

	)

1433 
	#R_68K_PLT8
 15

	)

1434 
	#R_68K_PLT32O
 16

	)

1435 
	#R_68K_PLT16O
 17

	)

1436 
	#R_68K_PLT8O
 18

	)

1437 
	#R_68K_COPY
 19

	)

1438 
	#R_68K_GLOB_DAT
 20

	)

1439 
	#R_68K_JMP_SLOT
 21

	)

1440 
	#R_68K_RELATIVE
 22

	)

1441 
	#R_68K_TLS_GD32
 25

	)

1442 
	#R_68K_TLS_GD16
 26

	)

1443 
	#R_68K_TLS_GD8
 27

	)

1444 
	#R_68K_TLS_LDM32
 28

	)

1445 
	#R_68K_TLS_LDM16
 29

	)

1446 
	#R_68K_TLS_LDM8
 30

	)

1447 
	#R_68K_TLS_LDO32
 31

	)

1448 
	#R_68K_TLS_LDO16
 32

	)

1449 
	#R_68K_TLS_LDO8
 33

	)

1450 
	#R_68K_TLS_IE32
 34

	)

1451 
	#R_68K_TLS_IE16
 35

	)

1452 
	#R_68K_TLS_IE8
 36

	)

1453 
	#R_68K_TLS_LE32
 37

	)

1455 
	#R_68K_TLS_LE16
 38

	)

1457 
	#R_68K_TLS_LE8
 39

	)

1459 
	#R_68K_TLS_DTPMOD32
 40

	)

1460 
	#R_68K_TLS_DTPREL32
 41

	)

1461 
	#R_68K_TLS_TPREL32
 42

	)

1463 
	#R_68K_NUM
 43

	)

1469 
	#R_386_NONE
 0

	)

1470 
	#R_386_32
 1

	)

1471 
	#R_386_PC32
 2

	)

1472 
	#R_386_GOT32
 3

	)

1473 
	#R_386_PLT32
 4

	)

1474 
	#R_386_COPY
 5

	)

1475 
	#R_386_GLOB_DAT
 6

	)

1476 
	#R_386_JMP_SLOT
 7

	)

1477 
	#R_386_RELATIVE
 8

	)

1478 
	#R_386_GOTOFF
 9

	)

1479 
	#R_386_GOTPC
 10

	)

1480 
	#R_386_32PLT
 11

	)

1481 
	#R_386_TLS_TPOFF
 14

	)

1482 
	#R_386_TLS_IE
 15

	)

1484 
	#R_386_TLS_GOTIE
 16

	)

1486 
	#R_386_TLS_LE
 17

	)

1488 
	#R_386_TLS_GD
 18

	)

1490 
	#R_386_TLS_LDM
 19

	)

1493 
	#R_386_16
 20

	)

1494 
	#R_386_PC16
 21

	)

1495 
	#R_386_8
 22

	)

1496 
	#R_386_PC8
 23

	)

1497 
	#R_386_TLS_GD_32
 24

	)

1499 
	#R_386_TLS_GD_PUSH
 25

	)

1500 
	#R_386_TLS_GD_CALL
 26

	)

1502 
	#R_386_TLS_GD_POP
 27

	)

1503 
	#R_386_TLS_LDM_32
 28

	)

1505 
	#R_386_TLS_LDM_PUSH
 29

	)

1506 
	#R_386_TLS_LDM_CALL
 30

	)

1508 
	#R_386_TLS_LDM_POP
 31

	)

1509 
	#R_386_TLS_LDO_32
 32

	)

1510 
	#R_386_TLS_IE_32
 33

	)

1512 
	#R_386_TLS_LE_32
 34

	)

1514 
	#R_386_TLS_DTPMOD32
 35

	)

1515 
	#R_386_TLS_DTPOFF32
 36

	)

1516 
	#R_386_TLS_TPOFF32
 37

	)

1517 
	#R_386_SIZE32
 38

	)

1518 
	#R_386_TLS_GOTDESC
 39

	)

1519 
	#R_386_TLS_DESC_CALL
 40

	)

1522 
	#R_386_TLS_DESC
 41

	)

1526 
	#R_386_IRELATIVE
 42

	)

1527 
	#R_386_GOT32X
 43

	)

1530 
	#R_386_NUM
 44

	)

1536 
	#STT_SPARC_REGISTER
 13

	)

1540 
	#EF_SPARCV9_MM
 3

	)

1541 
	#EF_SPARCV9_TSO
 0

	)

1542 
	#EF_SPARCV9_PSO
 1

	)

1543 
	#EF_SPARCV9_RMO
 2

	)

1544 
	#EF_SPARC_LEDATA
 0x800000

	)

1545 
	#EF_SPARC_EXT_MASK
 0xFFFF00

	)

1546 
	#EF_SPARC_32PLUS
 0x000100

	)

1547 
	#EF_SPARC_SUN_US1
 0x000200

	)

1548 
	#EF_SPARC_HAL_R1
 0x000400

	)

1549 
	#EF_SPARC_SUN_US3
 0x000800

	)

1553 
	#R_SPARC_NONE
 0

	)

1554 
	#R_SPARC_8
 1

	)

1555 
	#R_SPARC_16
 2

	)

1556 
	#R_SPARC_32
 3

	)

1557 
	#R_SPARC_DISP8
 4

	)

1558 
	#R_SPARC_DISP16
 5

	)

1559 
	#R_SPARC_DISP32
 6

	)

1560 
	#R_SPARC_WDISP30
 7

	)

1561 
	#R_SPARC_WDISP22
 8

	)

1562 
	#R_SPARC_HI22
 9

	)

1563 
	#R_SPARC_22
 10

	)

1564 
	#R_SPARC_13
 11

	)

1565 
	#R_SPARC_LO10
 12

	)

1566 
	#R_SPARC_GOT10
 13

	)

1567 
	#R_SPARC_GOT13
 14

	)

1568 
	#R_SPARC_GOT22
 15

	)

1569 
	#R_SPARC_PC10
 16

	)

1570 
	#R_SPARC_PC22
 17

	)

1571 
	#R_SPARC_WPLT30
 18

	)

1572 
	#R_SPARC_COPY
 19

	)

1573 
	#R_SPARC_GLOB_DAT
 20

	)

1574 
	#R_SPARC_JMP_SLOT
 21

	)

1575 
	#R_SPARC_RELATIVE
 22

	)

1576 
	#R_SPARC_UA32
 23

	)

1580 
	#R_SPARC_PLT32
 24

	)

1581 
	#R_SPARC_HIPLT22
 25

	)

1582 
	#R_SPARC_LOPLT10
 26

	)

1583 
	#R_SPARC_PCPLT32
 27

	)

1584 
	#R_SPARC_PCPLT22
 28

	)

1585 
	#R_SPARC_PCPLT10
 29

	)

1586 
	#R_SPARC_10
 30

	)

1587 
	#R_SPARC_11
 31

	)

1588 
	#R_SPARC_64
 32

	)

1589 
	#R_SPARC_OLO10
 33

	)

1590 
	#R_SPARC_HH22
 34

	)

1591 
	#R_SPARC_HM10
 35

	)

1592 
	#R_SPARC_LM22
 36

	)

1593 
	#R_SPARC_PC_HH22
 37

	)

1594 
	#R_SPARC_PC_HM10
 38

	)

1595 
	#R_SPARC_PC_LM22
 39

	)

1596 
	#R_SPARC_WDISP16
 40

	)

1597 
	#R_SPARC_WDISP19
 41

	)

1598 
	#R_SPARC_GLOB_JMP
 42

	)

1599 
	#R_SPARC_7
 43

	)

1600 
	#R_SPARC_5
 44

	)

1601 
	#R_SPARC_6
 45

	)

1602 
	#R_SPARC_DISP64
 46

	)

1603 
	#R_SPARC_PLT64
 47

	)

1604 
	#R_SPARC_HIX22
 48

	)

1605 
	#R_SPARC_LOX10
 49

	)

1606 
	#R_SPARC_H44
 50

	)

1607 
	#R_SPARC_M44
 51

	)

1608 
	#R_SPARC_L44
 52

	)

1609 
	#R_SPARC_REGISTER
 53

	)

1610 
	#R_SPARC_UA64
 54

	)

1611 
	#R_SPARC_UA16
 55

	)

1612 
	#R_SPARC_TLS_GD_HI22
 56

	)

1613 
	#R_SPARC_TLS_GD_LO10
 57

	)

1614 
	#R_SPARC_TLS_GD_ADD
 58

	)

1615 
	#R_SPARC_TLS_GD_CALL
 59

	)

1616 
	#R_SPARC_TLS_LDM_HI22
 60

	)

1617 
	#R_SPARC_TLS_LDM_LO10
 61

	)

1618 
	#R_SPARC_TLS_LDM_ADD
 62

	)

1619 
	#R_SPARC_TLS_LDM_CALL
 63

	)

1620 
	#R_SPARC_TLS_LDO_HIX22
 64

	)

1621 
	#R_SPARC_TLS_LDO_LOX10
 65

	)

1622 
	#R_SPARC_TLS_LDO_ADD
 66

	)

1623 
	#R_SPARC_TLS_IE_HI22
 67

	)

1624 
	#R_SPARC_TLS_IE_LO10
 68

	)

1625 
	#R_SPARC_TLS_IE_LD
 69

	)

1626 
	#R_SPARC_TLS_IE_LDX
 70

	)

1627 
	#R_SPARC_TLS_IE_ADD
 71

	)

1628 
	#R_SPARC_TLS_LE_HIX22
 72

	)

1629 
	#R_SPARC_TLS_LE_LOX10
 73

	)

1630 
	#R_SPARC_TLS_DTPMOD32
 74

	)

1631 
	#R_SPARC_TLS_DTPMOD64
 75

	)

1632 
	#R_SPARC_TLS_DTPOFF32
 76

	)

1633 
	#R_SPARC_TLS_DTPOFF64
 77

	)

1634 
	#R_SPARC_TLS_TPOFF32
 78

	)

1635 
	#R_SPARC_TLS_TPOFF64
 79

	)

1636 
	#R_SPARC_GOTDATA_HIX22
 80

	)

1637 
	#R_SPARC_GOTDATA_LOX10
 81

	)

1638 
	#R_SPARC_GOTDATA_OP_HIX22
 82

	)

1639 
	#R_SPARC_GOTDATA_OP_LOX10
 83

	)

1640 
	#R_SPARC_GOTDATA_OP
 84

	)

1641 
	#R_SPARC_H34
 85

	)

1642 
	#R_SPARC_SIZE32
 86

	)

1643 
	#R_SPARC_SIZE64
 87

	)

1644 
	#R_SPARC_WDISP10
 88

	)

1645 
	#R_SPARC_JMP_IREL
 248

	)

1646 
	#R_SPARC_IRELATIVE
 249

	)

1647 
	#R_SPARC_GNU_VTINHERIT
 250

	)

1648 
	#R_SPARC_GNU_VTENTRY
 251

	)

1649 
	#R_SPARC_REV32
 252

	)

1651 
	#R_SPARC_NUM
 253

	)

1655 
	#DT_SPARC_REGISTER
 0x70000001

	)

1656 
	#DT_SPARC_NUM
 2

	)

1662 
	#EF_MIPS_NOREORDER
 1

	)

1663 
	#EF_MIPS_PIC
 2

	)

1664 
	#EF_MIPS_CPIC
 4

	)

1665 
	#EF_MIPS_XGOT
 8

	)

1666 
	#EF_MIPS_64BIT_WHIRL
 16

	)

1667 
	#EF_MIPS_ABI2
 32

	)

1668 
	#EF_MIPS_ABI_ON32
 64

	)

1669 
	#EF_MIPS_FP64
 512

	)

1670 
	#EF_MIPS_NAN2008
 1024

	)

1671 
	#EF_MIPS_ARCH
 0xf0000000

	)

1675 
	#EF_MIPS_ARCH_1
 0x00000000

	)

1676 
	#EF_MIPS_ARCH_2
 0x10000000

	)

1677 
	#EF_MIPS_ARCH_3
 0x20000000

	)

1678 
	#EF_MIPS_ARCH_4
 0x30000000

	)

1679 
	#EF_MIPS_ARCH_5
 0x40000000

	)

1680 
	#EF_MIPS_ARCH_32
 0x50000000

	)

1681 
	#EF_MIPS_ARCH_64
 0x60000000

	)

1682 
	#EF_MIPS_ARCH_32R2
 0x70000000

	)

1683 
	#EF_MIPS_ARCH_64R2
 0x80000000

	)

1687 
	#E_MIPS_ARCH_1
 
EF_MIPS_ARCH_1


	)

1688 
	#E_MIPS_ARCH_2
 
EF_MIPS_ARCH_2


	)

1689 
	#E_MIPS_ARCH_3
 
EF_MIPS_ARCH_3


	)

1690 
	#E_MIPS_ARCH_4
 
EF_MIPS_ARCH_4


	)

1691 
	#E_MIPS_ARCH_5
 
EF_MIPS_ARCH_5


	)

1692 
	#E_MIPS_ARCH_32
 
EF_MIPS_ARCH_32


	)

1693 
	#E_MIPS_ARCH_64
 
EF_MIPS_ARCH_64


	)

1697 
	#SHN_MIPS_ACOMMON
 0xff00

	)

1698 
	#SHN_MIPS_TEXT
 0xff01

	)

1699 
	#SHN_MIPS_DATA
 0xff02

	)

1700 
	#SHN_MIPS_SCOMMON
 0xff03

	)

1701 
	#SHN_MIPS_SUNDEFINED
 0xff04

	)

1705 
	#SHT_MIPS_LIBLIST
 0x70000000

	)

1706 
	#SHT_MIPS_MSYM
 0x70000001

	)

1707 
	#SHT_MIPS_CONFLICT
 0x70000002

	)

1708 
	#SHT_MIPS_GPTAB
 0x70000003

	)

1709 
	#SHT_MIPS_UCODE
 0x70000004

	)

1710 
	#SHT_MIPS_DEBUG
 0x70000005

	)

1711 
	#SHT_MIPS_REGINFO
 0x70000006

	)

1712 
	#SHT_MIPS_PACKAGE
 0x70000007

	)

1713 
	#SHT_MIPS_PACKSYM
 0x70000008

	)

1714 
	#SHT_MIPS_RELD
 0x70000009

	)

1715 
	#SHT_MIPS_IFACE
 0x7000000b

	)

1716 
	#SHT_MIPS_CONTENT
 0x7000000c

	)

1717 
	#SHT_MIPS_OPTIONS
 0x7000000d

	)

1718 
	#SHT_MIPS_SHDR
 0x70000010

	)

1719 
	#SHT_MIPS_FDESC
 0x70000011

	)

1720 
	#SHT_MIPS_EXTSYM
 0x70000012

	)

1721 
	#SHT_MIPS_DENSE
 0x70000013

	)

1722 
	#SHT_MIPS_PDESC
 0x70000014

	)

1723 
	#SHT_MIPS_LOCSYM
 0x70000015

	)

1724 
	#SHT_MIPS_AUXSYM
 0x70000016

	)

1725 
	#SHT_MIPS_OPTSYM
 0x70000017

	)

1726 
	#SHT_MIPS_LOCSTR
 0x70000018

	)

1727 
	#SHT_MIPS_LINE
 0x70000019

	)

1728 
	#SHT_MIPS_RFDESC
 0x7000001a

	)

1729 
	#SHT_MIPS_DELTASYM
 0x7000001b

	)

1730 
	#SHT_MIPS_DELTAINST
 0x7000001c

	)

1731 
	#SHT_MIPS_DELTACLASS
 0x7000001d

	)

1732 
	#SHT_MIPS_DWARF
 0x7000001ê

	)

1733 
	#SHT_MIPS_DELTADECL
 0x7000001f

	)

1734 
	#SHT_MIPS_SYMBOL_LIB
 0x70000020

	)

1735 
	#SHT_MIPS_EVENTS
 0x70000021

	)

1736 
	#SHT_MIPS_TRANSLATE
 0x70000022

	)

1737 
	#SHT_MIPS_PIXIE
 0x70000023

	)

1738 
	#SHT_MIPS_XLATE
 0x70000024

	)

1739 
	#SHT_MIPS_XLATE_DEBUG
 0x70000025

	)

1740 
	#SHT_MIPS_WHIRL
 0x70000026

	)

1741 
	#SHT_MIPS_EH_REGION
 0x70000027

	)

1742 
	#SHT_MIPS_XLATE_OLD
 0x70000028

	)

1743 
	#SHT_MIPS_PDR_EXCEPTION
 0x70000029

	)

1744 
	#SHT_MIPS_XHASH
 0x7000002b

	)

1748 
	#SHF_MIPS_GPREL
 0x10000000

	)

1749 
	#SHF_MIPS_MERGE
 0x20000000

	)

1750 
	#SHF_MIPS_ADDR
 0x40000000

	)

1751 
	#SHF_MIPS_STRINGS
 0x80000000

	)

1752 
	#SHF_MIPS_NOSTRIP
 0x08000000

	)

1753 
	#SHF_MIPS_LOCAL
 0x04000000

	)

1754 
	#SHF_MIPS_NAMES
 0x02000000

	)

1755 
	#SHF_MIPS_NODUPE
 0x01000000

	)

1761 
	#STO_MIPS_DEFAULT
 0x0

	)

1762 
	#STO_MIPS_INTERNAL
 0x1

	)

1763 
	#STO_MIPS_HIDDEN
 0x2

	)

1764 
	#STO_MIPS_PROTECTED
 0x3

	)

1765 
	#STO_MIPS_PLT
 0x8

	)

1766 
	#STO_MIPS_SC_ALIGN_UNUSED
 0xff

	)

1769 
	#STB_MIPS_SPLIT_COMMON
 13

	)

1777 
Elf32_W‹d
 
	mgt_cuºít_g_vÆue
;

1778 
Elf32_W‹d
 
	mgt_unu£d
;

1779 } 
	mgt_hódî
;

1782 
Elf32_W‹d
 
	mgt_g_vÆue
;

1783 
Elf32_W‹d
 
	mgt_byãs
;

1784 } 
	mgt_íåy
;

1785 } 
	tElf32_g±ab
;

1791 
Elf32_W‹d
 
	mri_g¥mask
;

1792 
Elf32_W‹d
 
	mri_˝rmask
[4];

1793 
Elf32_Sw‹d
 
	mri_gp_vÆue
;

1794 } 
	tElf32_RegInfo
;

1800 
	mköd
;

1802 
	msize
;

1803 
Elf32_Se˘i⁄
 
	m£˘i⁄
;

1805 
Elf32_W‹d
 
	möfo
;

1806 } 
	tElf_O±i⁄s
;

1810 
	#ODK_NULL
 0

	)

1811 
	#ODK_REGINFO
 1

	)

1812 
	#ODK_EXCEPTIONS
 2

	)

1813 
	#ODK_PAD
 3

	)

1814 
	#ODK_HWPATCH
 4

	)

1815 
	#ODK_FILL
 5

	)

1816 
	#ODK_TAGS
 6

	)

1817 
	#ODK_HWAND
 7

	)

1818 
	#ODK_HWOR
 8

	)

1822 
	#OEX_FPU_MIN
 0x1‡

	)

1823 
	#OEX_FPU_MAX
 0x1f00

	)

1824 
	#OEX_PAGE0
 0x10000

	)

1825 
	#OEX_SMM
 0x20000

	)

1826 
	#OEX_FPDBUG
 0x40000

	)

1827 
	#OEX_PRECISEFP
 
OEX_FPDBUG


	)

1828 
	#OEX_DISMISS
 0x80000

	)

1830 
	#OEX_FPU_INVAL
 0x10

	)

1831 
	#OEX_FPU_DIV0
 0x08

	)

1832 
	#OEX_FPU_OFLO
 0x04

	)

1833 
	#OEX_FPU_UFLO
 0x02

	)

1834 
	#OEX_FPU_INEX
 0x01

	)

1838 
	#OHW_R4KEOP
 0x1

	)

1839 
	#OHW_R8KPFETCH
 0x2

	)

1840 
	#OHW_R5KEOP
 0x4

	)

1841 
	#OHW_R5KCVTL
 0x8

	)

1843 
	#OPAD_PREFIX
 0x1

	)

1844 
	#OPAD_POSTFIX
 0x2

	)

1845 
	#OPAD_SYMBOL
 0x4

	)

1851 
Elf32_W‹d
 
	mhwp_Êags1
;

1852 
Elf32_W‹d
 
	mhwp_Êags2
;

1853 } 
	tElf_O±i⁄s_Hw
;

1857 
	#OHWA0_R4KEOP_CHECKED
 0x00000001

	)

1858 
	#OHWA1_R4KEOP_CLEAN
 0x00000002

	)

1862 
	#R_MIPS_NONE
 0

	)

1863 
	#R_MIPS_16
 1

	)

1864 
	#R_MIPS_32
 2

	)

1865 
	#R_MIPS_REL32
 3

	)

1866 
	#R_MIPS_26
 4

	)

1867 
	#R_MIPS_HI16
 5

	)

1868 
	#R_MIPS_LO16
 6

	)

1869 
	#R_MIPS_GPREL16
 7

	)

1870 
	#R_MIPS_LITERAL
 8

	)

1871 
	#R_MIPS_GOT16
 9

	)

1872 
	#R_MIPS_PC16
 10

	)

1873 
	#R_MIPS_CALL16
 11

	)

1874 
	#R_MIPS_GPREL32
 12

	)

1876 
	#R_MIPS_SHIFT5
 16

	)

1877 
	#R_MIPS_SHIFT6
 17

	)

1878 
	#R_MIPS_64
 18

	)

1879 
	#R_MIPS_GOT_DISP
 19

	)

1880 
	#R_MIPS_GOT_PAGE
 20

	)

1881 
	#R_MIPS_GOT_OFST
 21

	)

1882 
	#R_MIPS_GOT_HI16
 22

	)

1883 
	#R_MIPS_GOT_LO16
 23

	)

1884 
	#R_MIPS_SUB
 24

	)

1885 
	#R_MIPS_INSERT_A
 25

	)

1886 
	#R_MIPS_INSERT_B
 26

	)

1887 
	#R_MIPS_DELETE
 27

	)

1888 
	#R_MIPS_HIGHER
 28

	)

1889 
	#R_MIPS_HIGHEST
 29

	)

1890 
	#R_MIPS_CALL_HI16
 30

	)

1891 
	#R_MIPS_CALL_LO16
 31

	)

1892 
	#R_MIPS_SCN_DISP
 32

	)

1893 
	#R_MIPS_REL16
 33

	)

1894 
	#R_MIPS_ADD_IMMEDIATE
 34

	)

1895 
	#R_MIPS_PJUMP
 35

	)

1896 
	#R_MIPS_RELGOT
 36

	)

1897 
	#R_MIPS_JALR
 37

	)

1898 
	#R_MIPS_TLS_DTPMOD32
 38

	)

1899 
	#R_MIPS_TLS_DTPREL32
 39

	)

1900 
	#R_MIPS_TLS_DTPMOD64
 40

	)

1901 
	#R_MIPS_TLS_DTPREL64
 41

	)

1902 
	#R_MIPS_TLS_GD
 42

	)

1903 
	#R_MIPS_TLS_LDM
 43

	)

1904 
	#R_MIPS_TLS_DTPREL_HI16
 44

	)

1905 
	#R_MIPS_TLS_DTPREL_LO16
 45

	)

1906 
	#R_MIPS_TLS_GOTTPREL
 46

	)

1907 
	#R_MIPS_TLS_TPREL32
 47

	)

1908 
	#R_MIPS_TLS_TPREL64
 48

	)

1909 
	#R_MIPS_TLS_TPREL_HI16
 49

	)

1910 
	#R_MIPS_TLS_TPREL_LO16
 50

	)

1911 
	#R_MIPS_GLOB_DAT
 51

	)

1912 
	#R_MIPS_COPY
 126

	)

1913 
	#R_MIPS_JUMP_SLOT
 127

	)

1915 
	#R_MIPS_NUM
 128

	)

1919 
	#PT_MIPS_REGINFO
 0x70000000

	)

1920 
	#PT_MIPS_RTPROC
 0x70000001

	)

1921 
	#PT_MIPS_OPTIONS
 0x70000002

	)

1922 
	#PT_MIPS_ABIFLAGS
 0x70000003

	)

1926 
	#PF_MIPS_LOCAL
 0x10000000

	)

1930 
	#DT_MIPS_RLD_VERSION
 0x70000001

	)

1931 
	#DT_MIPS_TIME_STAMP
 0x70000002

	)

1932 
	#DT_MIPS_ICHECKSUM
 0x70000003

	)

1933 
	#DT_MIPS_IVERSION
 0x70000004

	)

1934 
	#DT_MIPS_FLAGS
 0x70000005

	)

1935 
	#DT_MIPS_BASE_ADDRESS
 0x70000006

	)

1936 
	#DT_MIPS_MSYM
 0x70000007

	)

1937 
	#DT_MIPS_CONFLICT
 0x70000008

	)

1938 
	#DT_MIPS_LIBLIST
 0x70000009

	)

1939 
	#DT_MIPS_LOCAL_GOTNO
 0x7000000®

	)

1940 
	#DT_MIPS_CONFLICTNO
 0x7000000b

	)

1941 
	#DT_MIPS_LIBLISTNO
 0x70000010

	)

1942 
	#DT_MIPS_SYMTABNO
 0x70000011

	)

1943 
	#DT_MIPS_UNREFEXTNO
 0x70000012

	)

1944 
	#DT_MIPS_GOTSYM
 0x70000013

	)

1945 
	#DT_MIPS_HIPAGENO
 0x70000014

	)

1946 
	#DT_MIPS_RLD_MAP
 0x70000016

	)

1947 
	#DT_MIPS_DELTA_CLASS
 0x70000017

	)

1948 
	#DT_MIPS_DELTA_CLASS_NO
 0x70000018

	)

1950 
	#DT_MIPS_DELTA_INSTANCE
 0x70000019

	)

1951 
	#DT_MIPS_DELTA_INSTANCE_NO
 0x7000001®

	)

1953 
	#DT_MIPS_DELTA_RELOC
 0x7000001b

	)

1954 
	#DT_MIPS_DELTA_RELOC_NO
 0x7000001¯

	)

1956 
	#DT_MIPS_DELTA_SYM
 0x7000001d

	)

1958 
	#DT_MIPS_DELTA_SYM_NO
 0x7000001ê

	)

1960 
	#DT_MIPS_DELTA_CLASSSYM
 0x70000020

	)

1962 
	#DT_MIPS_DELTA_CLASSSYM_NO
 0x70000021

	)

1964 
	#DT_MIPS_CXX_FLAGS
 0x70000022

	)

1965 
	#DT_MIPS_PIXIE_INIT
 0x70000023

	)

1966 
	#DT_MIPS_SYMBOL_LIB
 0x70000024

	)

1967 
	#DT_MIPS_LOCALPAGE_GOTIDX
 0x70000025

	)

1968 
	#DT_MIPS_LOCAL_GOTIDX
 0x70000026

	)

1969 
	#DT_MIPS_HIDDEN_GOTIDX
 0x70000027

	)

1970 
	#DT_MIPS_PROTECTED_GOTIDX
 0x70000028

	)

1971 
	#DT_MIPS_OPTIONS
 0x70000029

	)

1972 
	#DT_MIPS_INTERFACE
 0x7000002®

	)

1973 
	#DT_MIPS_DYNSTR_ALIGN
 0x7000002b

	)

1974 
	#DT_MIPS_INTERFACE_SIZE
 0x7000002¯

	)

1975 
	#DT_MIPS_RLD_TEXT_RESOLVE_ADDR
 0x7000002d

	)

1977 
	#DT_MIPS_PERF_SUFFIX
 0x7000002ê

	)

1979 
	#DT_MIPS_COMPACT_SIZE
 0x7000002‡

	)

1980 
	#DT_MIPS_GP_VALUE
 0x70000030

	)

1981 
	#DT_MIPS_AUX_DYNAMIC
 0x70000031

	)

1983 
	#DT_MIPS_PLTGOT
 0x70000032

	)

1987 
	#DT_MIPS_RWPLT
 0x70000034

	)

1991 
	#DT_MIPS_RLD_MAP_REL
 0x70000035

	)

1993 
	#DT_MIPS_XHASH
 0x70000036

	)

1994 
	#DT_MIPS_NUM
 0x37

	)

1998 
	#RHF_NONE
 0

	)

1999 
	#RHF_QUICKSTART
 (1 << 0Ë

	)

2000 
	#RHF_NOTPOT
 (1 << 1Ë

	)

2001 
	#RHF_NO_LIBRARY_REPLACEMENT
 (1 << 2Ë

	)

2002 
	#RHF_NO_MOVE
 (1 << 3)

	)

2003 
	#RHF_SGI_ONLY
 (1 << 4)

	)

2004 
	#RHF_GUARANTEE_INIT
 (1 << 5)

	)

2005 
	#RHF_DELTA_C_PLUS_PLUS
 (1 << 6)

	)

2006 
	#RHF_GUARANTEE_START_INIT
 (1 << 7)

	)

2007 
	#RHF_PIXIE
 (1 << 8)

	)

2008 
	#RHF_DEFAULT_DELAY_LOAD
 (1 << 9)

	)

2009 
	#RHF_REQUICKSTART
 (1 << 10)

	)

2010 
	#RHF_REQUICKSTARTED
 (1 << 11)

	)

2011 
	#RHF_CORD
 (1 << 12)

	)

2012 
	#RHF_NO_UNRES_UNDEF
 (1 << 13)

	)

2013 
	#RHF_RLD_ORDER_SAFE
 (1 << 14)

	)

2019 
Elf32_W‹d
 
	ml_«me
;

2020 
Elf32_W‹d
 
	ml_time_°amp
;

2021 
Elf32_W‹d
 
	ml_checksum
;

2022 
Elf32_W‹d
 
	ml_vîsi⁄
;

2023 
Elf32_W‹d
 
	ml_Êags
;

2024 } 
	tElf32_Lib
;

2028 
Elf64_W‹d
 
	ml_«me
;

2029 
Elf64_W‹d
 
	ml_time_°amp
;

2030 
Elf64_W‹d
 
	ml_checksum
;

2031 
Elf64_W‹d
 
	ml_vîsi⁄
;

2032 
Elf64_W‹d
 
	ml_Êags
;

2033 } 
	tElf64_Lib
;

2038 
	#LL_NONE
 0

	)

2039 
	#LL_EXACT_MATCH
 (1 << 0Ë

	)

2040 
	#LL_IGNORE_INT_VER
 (1 << 1Ë

	)

2041 
	#LL_REQUIRE_MINOR
 (1 << 2)

	)

2042 
	#LL_EXPORTS
 (1 << 3)

	)

2043 
	#LL_DELAY_LOAD
 (1 << 4)

	)

2044 
	#LL_DELTA
 (1 << 5)

	)

2048 
Elf32_Addr
 
	tElf32_C⁄Êi˘
;

2053 
Elf32_HÆf
 
	mvîsi⁄
;

2055 
	miß_Àvñ
;

2057 
	miß_ªv
;

2059 
	mg¥_size
;

2061 
	m˝r1_size
;

2063 
	m˝r2_size
;

2065 
	mÂ_abi
;

2067 
Elf32_W‹d
 
	miß_ext
;

2069 
Elf32_W‹d
 
	ma£s
;

2071 
Elf32_W‹d
 
	mÊags1
;

2072 
Elf32_W‹d
 
	mÊags2
;

2073 } 
	tElf_MIPS_ABIFœgs_v0
;

2077 
	#MIPS_AFL_REG_NONE
 0x00

	)

2078 
	#MIPS_AFL_REG_32
 0x01

	)

2079 
	#MIPS_AFL_REG_64
 0x02

	)

2080 
	#MIPS_AFL_REG_128
 0x03

	)

2084 
	#MIPS_AFL_ASE_DSP
 0x00000001

	)

2085 
	#MIPS_AFL_ASE_DSPR2
 0x00000002

	)

2086 
	#MIPS_AFL_ASE_EVA
 0x00000004

	)

2087 
	#MIPS_AFL_ASE_MCU
 0x00000008

	)

2088 
	#MIPS_AFL_ASE_MDMX
 0x00000010

	)

2089 
	#MIPS_AFL_ASE_MIPS3D
 0x00000020

	)

2090 
	#MIPS_AFL_ASE_MT
 0x00000040

	)

2091 
	#MIPS_AFL_ASE_SMARTMIPS
 0x00000080

	)

2092 
	#MIPS_AFL_ASE_VIRT
 0x00000100

	)

2093 
	#MIPS_AFL_ASE_MSA
 0x00000200

	)

2094 
	#MIPS_AFL_ASE_MIPS16
 0x00000400

	)

2095 
	#MIPS_AFL_ASE_MICROMIPS
 0x00000800

	)

2096 
	#MIPS_AFL_ASE_XPA
 0x00001000

	)

2097 
	#MIPS_AFL_ASE_MASK
 0x00001ff‡

	)

2101 
	#MIPS_AFL_EXT_XLR
 1

	)

2102 
	#MIPS_AFL_EXT_OCTEON2
 2

	)

2103 
	#MIPS_AFL_EXT_OCTEONP
 3

	)

2104 
	#MIPS_AFL_EXT_LOONGSON_3A
 4

	)

2105 
	#MIPS_AFL_EXT_OCTEON
 5

	)

2106 
	#MIPS_AFL_EXT_5900
 6

	)

2107 
	#MIPS_AFL_EXT_4650
 7

	)

2108 
	#MIPS_AFL_EXT_4010
 8

	)

2109 
	#MIPS_AFL_EXT_4100
 9

	)

2110 
	#MIPS_AFL_EXT_3900
 10

	)

2111 
	#MIPS_AFL_EXT_10000
 11

	)

2112 
	#MIPS_AFL_EXT_SB1
 12

	)

2113 
	#MIPS_AFL_EXT_4111
 13

	)

2114 
	#MIPS_AFL_EXT_4120
 14

	)

2115 
	#MIPS_AFL_EXT_5400
 15

	)

2116 
	#MIPS_AFL_EXT_5500
 16

	)

2117 
	#MIPS_AFL_EXT_LOONGSON_2E
 17

	)

2118 
	#MIPS_AFL_EXT_LOONGSON_2F
 18

	)

2121 
	#MIPS_AFL_FLAGS1_ODDSPREG
 1

	)

2127 
	mVÆ_GNU_MIPS_ABI_FP_ANY
 = 0,

2129 
	mVÆ_GNU_MIPS_ABI_FP_DOUBLE
 = 1,

2131 
	mVÆ_GNU_MIPS_ABI_FP_SINGLE
 = 2,

2133 
	mVÆ_GNU_MIPS_ABI_FP_SOFT
 = 3,

2135 
	mVÆ_GNU_MIPS_ABI_FP_OLD_64
 = 4,

2137 
	mVÆ_GNU_MIPS_ABI_FP_XX
 = 5,

2139 
	mVÆ_GNU_MIPS_ABI_FP_64
 = 6,

2141 
	mVÆ_GNU_MIPS_ABI_FP_64A
 = 7,

2143 
	mVÆ_GNU_MIPS_ABI_FP_MAX
 = 7

2150 
	#EF_PARISC_TRAPNIL
 0x00010000

	)

2151 
	#EF_PARISC_EXT
 0x00020000

	)

2152 
	#EF_PARISC_LSB
 0x00040000

	)

2153 
	#EF_PARISC_WIDE
 0x00080000

	)

2154 
	#EF_PARISC_NO_KABP
 0x00100000

	)

2156 
	#EF_PARISC_LAZYSWAP
 0x00400000

	)

2157 
	#EF_PARISC_ARCH
 0x0000fff‡

	)

2161 
	#EFA_PARISC_1_0
 0x020b

	)

2162 
	#EFA_PARISC_1_1
 0x0210

	)

2163 
	#EFA_PARISC_2_0
 0x0214

	)

2167 
	#SHN_PARISC_ANSI_COMMON
 0xff00

	)

2169 
	#SHN_PARISC_HUGE_COMMON
 0xff01

	)

2173 
	#SHT_PARISC_EXT
 0x70000000

	)

2174 
	#SHT_PARISC_UNWIND
 0x70000001

	)

2175 
	#SHT_PARISC_DOC
 0x70000002

	)

2179 
	#SHF_PARISC_SHORT
 0x20000000

	)

2180 
	#SHF_PARISC_HUGE
 0x40000000

	)

2181 
	#SHF_PARISC_SBP
 0x80000000

	)

2185 
	#STT_PARISC_MILLICODE
 13

	)

2187 
	#STT_HP_OPAQUE
 (
STT_LOOS
 + 0x1)

	)

2188 
	#STT_HP_STUB
 (
STT_LOOS
 + 0x2)

	)

2192 
	#R_PARISC_NONE
 0

	)

2193 
	#R_PARISC_DIR32
 1

	)

2194 
	#R_PARISC_DIR21L
 2

	)

2195 
	#R_PARISC_DIR17R
 3

	)

2196 
	#R_PARISC_DIR17F
 4

	)

2197 
	#R_PARISC_DIR14R
 6

	)

2198 
	#R_PARISC_PCREL32
 9

	)

2199 
	#R_PARISC_PCREL21L
 10

	)

2200 
	#R_PARISC_PCREL17R
 11

	)

2201 
	#R_PARISC_PCREL17F
 12

	)

2202 
	#R_PARISC_PCREL14R
 14

	)

2203 
	#R_PARISC_DPREL21L
 18

	)

2204 
	#R_PARISC_DPREL14R
 22

	)

2205 
	#R_PARISC_GPREL21L
 26

	)

2206 
	#R_PARISC_GPREL14R
 30

	)

2207 
	#R_PARISC_LTOFF21L
 34

	)

2208 
	#R_PARISC_LTOFF14R
 38

	)

2209 
	#R_PARISC_SECREL32
 41

	)

2210 
	#R_PARISC_SEGBASE
 48

	)

2211 
	#R_PARISC_SEGREL32
 49

	)

2212 
	#R_PARISC_PLTOFF21L
 50

	)

2213 
	#R_PARISC_PLTOFF14R
 54

	)

2214 
	#R_PARISC_LTOFF_FPTR32
 57

	)

2215 
	#R_PARISC_LTOFF_FPTR21L
 58

	)

2216 
	#R_PARISC_LTOFF_FPTR14R
 62

	)

2217 
	#R_PARISC_FPTR64
 64

	)

2218 
	#R_PARISC_PLABEL32
 65

	)

2219 
	#R_PARISC_PLABEL21L
 66

	)

2220 
	#R_PARISC_PLABEL14R
 70

	)

2221 
	#R_PARISC_PCREL64
 72

	)

2222 
	#R_PARISC_PCREL22F
 74

	)

2223 
	#R_PARISC_PCREL14WR
 75

	)

2224 
	#R_PARISC_PCREL14DR
 76

	)

2225 
	#R_PARISC_PCREL16F
 77

	)

2226 
	#R_PARISC_PCREL16WF
 78

	)

2227 
	#R_PARISC_PCREL16DF
 79

	)

2228 
	#R_PARISC_DIR64
 80

	)

2229 
	#R_PARISC_DIR14WR
 83

	)

2230 
	#R_PARISC_DIR14DR
 84

	)

2231 
	#R_PARISC_DIR16F
 85

	)

2232 
	#R_PARISC_DIR16WF
 86

	)

2233 
	#R_PARISC_DIR16DF
 87

	)

2234 
	#R_PARISC_GPREL64
 88

	)

2235 
	#R_PARISC_GPREL14WR
 91

	)

2236 
	#R_PARISC_GPREL14DR
 92

	)

2237 
	#R_PARISC_GPREL16F
 93

	)

2238 
	#R_PARISC_GPREL16WF
 94

	)

2239 
	#R_PARISC_GPREL16DF
 95

	)

2240 
	#R_PARISC_LTOFF64
 96

	)

2241 
	#R_PARISC_LTOFF14WR
 99

	)

2242 
	#R_PARISC_LTOFF14DR
 100

	)

2243 
	#R_PARISC_LTOFF16F
 101

	)

2244 
	#R_PARISC_LTOFF16WF
 102

	)

2245 
	#R_PARISC_LTOFF16DF
 103

	)

2246 
	#R_PARISC_SECREL64
 104

	)

2247 
	#R_PARISC_SEGREL64
 112

	)

2248 
	#R_PARISC_PLTOFF14WR
 115

	)

2249 
	#R_PARISC_PLTOFF14DR
 116

	)

2250 
	#R_PARISC_PLTOFF16F
 117

	)

2251 
	#R_PARISC_PLTOFF16WF
 118

	)

2252 
	#R_PARISC_PLTOFF16DF
 119

	)

2253 
	#R_PARISC_LTOFF_FPTR64
 120

	)

2254 
	#R_PARISC_LTOFF_FPTR14WR
 123

	)

2255 
	#R_PARISC_LTOFF_FPTR14DR
 124

	)

2256 
	#R_PARISC_LTOFF_FPTR16F
 125

	)

2257 
	#R_PARISC_LTOFF_FPTR16WF
 126

	)

2258 
	#R_PARISC_LTOFF_FPTR16DF
 127

	)

2259 
	#R_PARISC_LORESERVE
 128

	)

2260 
	#R_PARISC_COPY
 128

	)

2261 
	#R_PARISC_IPLT
 129

	)

2262 
	#R_PARISC_EPLT
 130

	)

2263 
	#R_PARISC_TPREL32
 153

	)

2264 
	#R_PARISC_TPREL21L
 154

	)

2265 
	#R_PARISC_TPREL14R
 158

	)

2266 
	#R_PARISC_LTOFF_TP21L
 162

	)

2267 
	#R_PARISC_LTOFF_TP14R
 166

	)

2268 
	#R_PARISC_LTOFF_TP14F
 167

	)

2269 
	#R_PARISC_TPREL64
 216

	)

2270 
	#R_PARISC_TPREL14WR
 219

	)

2271 
	#R_PARISC_TPREL14DR
 220

	)

2272 
	#R_PARISC_TPREL16F
 221

	)

2273 
	#R_PARISC_TPREL16WF
 222

	)

2274 
	#R_PARISC_TPREL16DF
 223

	)

2275 
	#R_PARISC_LTOFF_TP64
 224

	)

2276 
	#R_PARISC_LTOFF_TP14WR
 227

	)

2277 
	#R_PARISC_LTOFF_TP14DR
 228

	)

2278 
	#R_PARISC_LTOFF_TP16F
 229

	)

2279 
	#R_PARISC_LTOFF_TP16WF
 230

	)

2280 
	#R_PARISC_LTOFF_TP16DF
 231

	)

2281 
	#R_PARISC_GNU_VTENTRY
 232

	)

2282 
	#R_PARISC_GNU_VTINHERIT
 233

	)

2283 
	#R_PARISC_TLS_GD21L
 234

	)

2284 
	#R_PARISC_TLS_GD14R
 235

	)

2285 
	#R_PARISC_TLS_GDCALL
 236

	)

2286 
	#R_PARISC_TLS_LDM21L
 237

	)

2287 
	#R_PARISC_TLS_LDM14R
 238

	)

2288 
	#R_PARISC_TLS_LDMCALL
 239

	)

2289 
	#R_PARISC_TLS_LDO21L
 240

	)

2290 
	#R_PARISC_TLS_LDO14R
 241

	)

2291 
	#R_PARISC_TLS_DTPMOD32
 242

	)

2292 
	#R_PARISC_TLS_DTPMOD64
 243

	)

2293 
	#R_PARISC_TLS_DTPOFF32
 244

	)

2294 
	#R_PARISC_TLS_DTPOFF64
 245

	)

2295 
	#R_PARISC_TLS_LE21L
 
R_PARISC_TPREL21L


	)

2296 
	#R_PARISC_TLS_LE14R
 
R_PARISC_TPREL14R


	)

2297 
	#R_PARISC_TLS_IE21L
 
R_PARISC_LTOFF_TP21L


	)

2298 
	#R_PARISC_TLS_IE14R
 
R_PARISC_LTOFF_TP14R


	)

2299 
	#R_PARISC_TLS_TPREL32
 
R_PARISC_TPREL32


	)

2300 
	#R_PARISC_TLS_TPREL64
 
R_PARISC_TPREL64


	)

2301 
	#R_PARISC_HIRESERVE
 255

	)

2305 
	#PT_HP_TLS
 (
PT_LOOS
 + 0x0)

	)

2306 
	#PT_HP_CORE_NONE
 (
PT_LOOS
 + 0x1)

	)

2307 
	#PT_HP_CORE_VERSION
 (
PT_LOOS
 + 0x2)

	)

2308 
	#PT_HP_CORE_KERNEL
 (
PT_LOOS
 + 0x3)

	)

2309 
	#PT_HP_CORE_COMM
 (
PT_LOOS
 + 0x4)

	)

2310 
	#PT_HP_CORE_PROC
 (
PT_LOOS
 + 0x5)

	)

2311 
	#PT_HP_CORE_LOADABLE
 (
PT_LOOS
 + 0x6)

	)

2312 
	#PT_HP_CORE_STACK
 (
PT_LOOS
 + 0x7)

	)

2313 
	#PT_HP_CORE_SHM
 (
PT_LOOS
 + 0x8)

	)

2314 
	#PT_HP_CORE_MMF
 (
PT_LOOS
 + 0x9)

	)

2315 
	#PT_HP_PARALLEL
 (
PT_LOOS
 + 0x10)

	)

2316 
	#PT_HP_FASTBIND
 (
PT_LOOS
 + 0x11)

	)

2317 
	#PT_HP_OPT_ANNOT
 (
PT_LOOS
 + 0x12)

	)

2318 
	#PT_HP_HSL_ANNOT
 (
PT_LOOS
 + 0x13)

	)

2319 
	#PT_HP_STACK
 (
PT_LOOS
 + 0x14)

	)

2321 
	#PT_PARISC_ARCHEXT
 0x70000000

	)

2322 
	#PT_PARISC_UNWIND
 0x70000001

	)

2326 
	#PF_PARISC_SBP
 0x08000000

	)

2328 
	#PF_HP_PAGE_SIZE
 0x00100000

	)

2329 
	#PF_HP_FAR_SHARED
 0x00200000

	)

2330 
	#PF_HP_NEAR_SHARED
 0x00400000

	)

2331 
	#PF_HP_CODE
 0x01000000

	)

2332 
	#PF_HP_MODIFY
 0x02000000

	)

2333 
	#PF_HP_LAZYSWAP
 0x04000000

	)

2334 
	#PF_HP_SBP
 0x08000000

	)

2341 
	#EF_ALPHA_32BIT
 1

	)

2342 
	#EF_ALPHA_CANRELAX
 2

	)

2347 
	#SHT_ALPHA_DEBUG
 0x70000001

	)

2348 
	#SHT_ALPHA_REGINFO
 0x70000002

	)

2352 
	#SHF_ALPHA_GPREL
 0x10000000

	)

2355 
	#STO_ALPHA_NOPV
 0x80

	)

2356 
	#STO_ALPHA_STD_GPLOAD
 0x88

	)

2360 
	#R_ALPHA_NONE
 0

	)

2361 
	#R_ALPHA_REFLONG
 1

	)

2362 
	#R_ALPHA_REFQUAD
 2

	)

2363 
	#R_ALPHA_GPREL32
 3

	)

2364 
	#R_ALPHA_LITERAL
 4

	)

2365 
	#R_ALPHA_LITUSE
 5

	)

2366 
	#R_ALPHA_GPDISP
 6

	)

2367 
	#R_ALPHA_BRADDR
 7

	)

2368 
	#R_ALPHA_HINT
 8

	)

2369 
	#R_ALPHA_SREL16
 9

	)

2370 
	#R_ALPHA_SREL32
 10

	)

2371 
	#R_ALPHA_SREL64
 11

	)

2372 
	#R_ALPHA_GPRELHIGH
 17

	)

2373 
	#R_ALPHA_GPRELLOW
 18

	)

2374 
	#R_ALPHA_GPREL16
 19

	)

2375 
	#R_ALPHA_COPY
 24

	)

2376 
	#R_ALPHA_GLOB_DAT
 25

	)

2377 
	#R_ALPHA_JMP_SLOT
 26

	)

2378 
	#R_ALPHA_RELATIVE
 27

	)

2379 
	#R_ALPHA_TLS_GD_HI
 28

	)

2380 
	#R_ALPHA_TLSGD
 29

	)

2381 
	#R_ALPHA_TLS_LDM
 30

	)

2382 
	#R_ALPHA_DTPMOD64
 31

	)

2383 
	#R_ALPHA_GOTDTPREL
 32

	)

2384 
	#R_ALPHA_DTPREL64
 33

	)

2385 
	#R_ALPHA_DTPRELHI
 34

	)

2386 
	#R_ALPHA_DTPRELLO
 35

	)

2387 
	#R_ALPHA_DTPREL16
 36

	)

2388 
	#R_ALPHA_GOTTPREL
 37

	)

2389 
	#R_ALPHA_TPREL64
 38

	)

2390 
	#R_ALPHA_TPRELHI
 39

	)

2391 
	#R_ALPHA_TPRELLO
 40

	)

2392 
	#R_ALPHA_TPREL16
 41

	)

2394 
	#R_ALPHA_NUM
 46

	)

2397 
	#LITUSE_ALPHA_ADDR
 0

	)

2398 
	#LITUSE_ALPHA_BASE
 1

	)

2399 
	#LITUSE_ALPHA_BYTOFF
 2

	)

2400 
	#LITUSE_ALPHA_JSR
 3

	)

2401 
	#LITUSE_ALPHA_TLS_GD
 4

	)

2402 
	#LITUSE_ALPHA_TLS_LDM
 5

	)

2405 
	#DT_ALPHA_PLTRO
 (
DT_LOPROC
 + 0)

	)

2406 
	#DT_ALPHA_NUM
 1

	)

2411 
	#EF_PPC_EMB
 0x80000000

	)

2414 
	#EF_PPC_RELOCATABLE
 0x00010000

	)

2415 
	#EF_PPC_RELOCATABLE_LIB
 0x00008000

	)

2419 
	#R_PPC_NONE
 0

	)

2420 
	#R_PPC_ADDR32
 1

	)

2421 
	#R_PPC_ADDR24
 2

	)

2422 
	#R_PPC_ADDR16
 3

	)

2423 
	#R_PPC_ADDR16_LO
 4

	)

2424 
	#R_PPC_ADDR16_HI
 5

	)

2425 
	#R_PPC_ADDR16_HA
 6

	)

2426 
	#R_PPC_ADDR14
 7

	)

2427 
	#R_PPC_ADDR14_BRTAKEN
 8

	)

2428 
	#R_PPC_ADDR14_BRNTAKEN
 9

	)

2429 
	#R_PPC_REL24
 10

	)

2430 
	#R_PPC_REL14
 11

	)

2431 
	#R_PPC_REL14_BRTAKEN
 12

	)

2432 
	#R_PPC_REL14_BRNTAKEN
 13

	)

2433 
	#R_PPC_GOT16
 14

	)

2434 
	#R_PPC_GOT16_LO
 15

	)

2435 
	#R_PPC_GOT16_HI
 16

	)

2436 
	#R_PPC_GOT16_HA
 17

	)

2437 
	#R_PPC_PLTREL24
 18

	)

2438 
	#R_PPC_COPY
 19

	)

2439 
	#R_PPC_GLOB_DAT
 20

	)

2440 
	#R_PPC_JMP_SLOT
 21

	)

2441 
	#R_PPC_RELATIVE
 22

	)

2442 
	#R_PPC_LOCAL24PC
 23

	)

2443 
	#R_PPC_UADDR32
 24

	)

2444 
	#R_PPC_UADDR16
 25

	)

2445 
	#R_PPC_REL32
 26

	)

2446 
	#R_PPC_PLT32
 27

	)

2447 
	#R_PPC_PLTREL32
 28

	)

2448 
	#R_PPC_PLT16_LO
 29

	)

2449 
	#R_PPC_PLT16_HI
 30

	)

2450 
	#R_PPC_PLT16_HA
 31

	)

2451 
	#R_PPC_SDAREL16
 32

	)

2452 
	#R_PPC_SECTOFF
 33

	)

2453 
	#R_PPC_SECTOFF_LO
 34

	)

2454 
	#R_PPC_SECTOFF_HI
 35

	)

2455 
	#R_PPC_SECTOFF_HA
 36

	)

2458 
	#R_PPC_TLS
 67

	)

2459 
	#R_PPC_DTPMOD32
 68

	)

2460 
	#R_PPC_TPREL16
 69

	)

2461 
	#R_PPC_TPREL16_LO
 70

	)

2462 
	#R_PPC_TPREL16_HI
 71

	)

2463 
	#R_PPC_TPREL16_HA
 72

	)

2464 
	#R_PPC_TPREL32
 73

	)

2465 
	#R_PPC_DTPREL16
 74

	)

2466 
	#R_PPC_DTPREL16_LO
 75

	)

2467 
	#R_PPC_DTPREL16_HI
 76

	)

2468 
	#R_PPC_DTPREL16_HA
 77

	)

2469 
	#R_PPC_DTPREL32
 78

	)

2470 
	#R_PPC_GOT_TLSGD16
 79

	)

2471 
	#R_PPC_GOT_TLSGD16_LO
 80

	)

2472 
	#R_PPC_GOT_TLSGD16_HI
 81

	)

2473 
	#R_PPC_GOT_TLSGD16_HA
 82

	)

2474 
	#R_PPC_GOT_TLSLD16
 83

	)

2475 
	#R_PPC_GOT_TLSLD16_LO
 84

	)

2476 
	#R_PPC_GOT_TLSLD16_HI
 85

	)

2477 
	#R_PPC_GOT_TLSLD16_HA
 86

	)

2478 
	#R_PPC_GOT_TPREL16
 87

	)

2479 
	#R_PPC_GOT_TPREL16_LO
 88

	)

2480 
	#R_PPC_GOT_TPREL16_HI
 89

	)

2481 
	#R_PPC_GOT_TPREL16_HA
 90

	)

2482 
	#R_PPC_GOT_DTPREL16
 91

	)

2483 
	#R_PPC_GOT_DTPREL16_LO
 92

	)

2484 
	#R_PPC_GOT_DTPREL16_HI
 93

	)

2485 
	#R_PPC_GOT_DTPREL16_HA
 94

	)

2486 
	#R_PPC_TLSGD
 95

	)

2487 
	#R_PPC_TLSLD
 96

	)

2491 
	#R_PPC_EMB_NADDR32
 101

	)

2492 
	#R_PPC_EMB_NADDR16
 102

	)

2493 
	#R_PPC_EMB_NADDR16_LO
 103

	)

2494 
	#R_PPC_EMB_NADDR16_HI
 104

	)

2495 
	#R_PPC_EMB_NADDR16_HA
 105

	)

2496 
	#R_PPC_EMB_SDAI16
 106

	)

2497 
	#R_PPC_EMB_SDA2I16
 107

	)

2498 
	#R_PPC_EMB_SDA2REL
 108

	)

2499 
	#R_PPC_EMB_SDA21
 109

	)

2500 
	#R_PPC_EMB_MRKREF
 110

	)

2501 
	#R_PPC_EMB_RELSEC16
 111

	)

2502 
	#R_PPC_EMB_RELST_LO
 112

	)

2503 
	#R_PPC_EMB_RELST_HI
 113

	)

2504 
	#R_PPC_EMB_RELST_HA
 114

	)

2505 
	#R_PPC_EMB_BIT_FLD
 115

	)

2506 
	#R_PPC_EMB_RELSDA
 116

	)

2509 
	#R_PPC_DIAB_SDA21_LO
 180

	)

2510 
	#R_PPC_DIAB_SDA21_HI
 181

	)

2511 
	#R_PPC_DIAB_SDA21_HA
 182

	)

2512 
	#R_PPC_DIAB_RELSDA_LO
 183

	)

2513 
	#R_PPC_DIAB_RELSDA_HI
 184

	)

2514 
	#R_PPC_DIAB_RELSDA_HA
 185

	)

2517 
	#R_PPC_IRELATIVE
 248

	)

2520 
	#R_PPC_REL16
 249

	)

2521 
	#R_PPC_REL16_LO
 250

	)

2522 
	#R_PPC_REL16_HI
 251

	)

2523 
	#R_PPC_REL16_HA
 252

	)

2527 
	#R_PPC_TOC16
 255

	)

2530 
	#DT_PPC_GOT
 (
DT_LOPROC
 + 0)

	)

2531 
	#DT_PPC_OPT
 (
DT_LOPROC
 + 1)

	)

2532 
	#DT_PPC_NUM
 2

	)

2535 
	#PPC_OPT_TLS
 1

	)

2538 
	#R_PPC64_NONE
 
R_PPC_NONE


	)

2539 
	#R_PPC64_ADDR32
 
R_PPC_ADDR32


	)

2540 
	#R_PPC64_ADDR24
 
R_PPC_ADDR24


	)

2541 
	#R_PPC64_ADDR16
 
R_PPC_ADDR16


	)

2542 
	#R_PPC64_ADDR16_LO
 
R_PPC_ADDR16_LO


	)

2543 
	#R_PPC64_ADDR16_HI
 
R_PPC_ADDR16_HI


	)

2544 
	#R_PPC64_ADDR16_HA
 
R_PPC_ADDR16_HA


	)

2545 
	#R_PPC64_ADDR14
 
R_PPC_ADDR14


	)

2546 
	#R_PPC64_ADDR14_BRTAKEN
 
R_PPC_ADDR14_BRTAKEN


	)

2547 
	#R_PPC64_ADDR14_BRNTAKEN
 
R_PPC_ADDR14_BRNTAKEN


	)

2548 
	#R_PPC64_REL24
 
R_PPC_REL24


	)

2549 
	#R_PPC64_REL14
 
R_PPC_REL14


	)

2550 
	#R_PPC64_REL14_BRTAKEN
 
R_PPC_REL14_BRTAKEN


	)

2551 
	#R_PPC64_REL14_BRNTAKEN
 
R_PPC_REL14_BRNTAKEN


	)

2552 
	#R_PPC64_GOT16
 
R_PPC_GOT16


	)

2553 
	#R_PPC64_GOT16_LO
 
R_PPC_GOT16_LO


	)

2554 
	#R_PPC64_GOT16_HI
 
R_PPC_GOT16_HI


	)

2555 
	#R_PPC64_GOT16_HA
 
R_PPC_GOT16_HA


	)

2557 
	#R_PPC64_COPY
 
R_PPC_COPY


	)

2558 
	#R_PPC64_GLOB_DAT
 
R_PPC_GLOB_DAT


	)

2559 
	#R_PPC64_JMP_SLOT
 
R_PPC_JMP_SLOT


	)

2560 
	#R_PPC64_RELATIVE
 
R_PPC_RELATIVE


	)

2562 
	#R_PPC64_UADDR32
 
R_PPC_UADDR32


	)

2563 
	#R_PPC64_UADDR16
 
R_PPC_UADDR16


	)

2564 
	#R_PPC64_REL32
 
R_PPC_REL32


	)

2565 
	#R_PPC64_PLT32
 
R_PPC_PLT32


	)

2566 
	#R_PPC64_PLTREL32
 
R_PPC_PLTREL32


	)

2567 
	#R_PPC64_PLT16_LO
 
R_PPC_PLT16_LO


	)

2568 
	#R_PPC64_PLT16_HI
 
R_PPC_PLT16_HI


	)

2569 
	#R_PPC64_PLT16_HA
 
R_PPC_PLT16_HA


	)

2571 
	#R_PPC64_SECTOFF
 
R_PPC_SECTOFF


	)

2572 
	#R_PPC64_SECTOFF_LO
 
R_PPC_SECTOFF_LO


	)

2573 
	#R_PPC64_SECTOFF_HI
 
R_PPC_SECTOFF_HI


	)

2574 
	#R_PPC64_SECTOFF_HA
 
R_PPC_SECTOFF_HA


	)

2575 
	#R_PPC64_ADDR30
 37

	)

2576 
	#R_PPC64_ADDR64
 38

	)

2577 
	#R_PPC64_ADDR16_HIGHER
 39

	)

2578 
	#R_PPC64_ADDR16_HIGHERA
 40

	)

2579 
	#R_PPC64_ADDR16_HIGHEST
 41

	)

2580 
	#R_PPC64_ADDR16_HIGHESTA
 42

	)

2581 
	#R_PPC64_UADDR64
 43

	)

2582 
	#R_PPC64_REL64
 44

	)

2583 
	#R_PPC64_PLT64
 45

	)

2584 
	#R_PPC64_PLTREL64
 46

	)

2585 
	#R_PPC64_TOC16
 47

	)

2586 
	#R_PPC64_TOC16_LO
 48

	)

2587 
	#R_PPC64_TOC16_HI
 49

	)

2588 
	#R_PPC64_TOC16_HA
 50

	)

2589 
	#R_PPC64_TOC
 51

	)

2590 
	#R_PPC64_PLTGOT16
 52

	)

2591 
	#R_PPC64_PLTGOT16_LO
 53

	)

2592 
	#R_PPC64_PLTGOT16_HI
 54

	)

2593 
	#R_PPC64_PLTGOT16_HA
 55

	)

2595 
	#R_PPC64_ADDR16_DS
 56

	)

2596 
	#R_PPC64_ADDR16_LO_DS
 57

	)

2597 
	#R_PPC64_GOT16_DS
 58

	)

2598 
	#R_PPC64_GOT16_LO_DS
 59

	)

2599 
	#R_PPC64_PLT16_LO_DS
 60

	)

2600 
	#R_PPC64_SECTOFF_DS
 61

	)

2601 
	#R_PPC64_SECTOFF_LO_DS
 62

	)

2602 
	#R_PPC64_TOC16_DS
 63

	)

2603 
	#R_PPC64_TOC16_LO_DS
 64

	)

2604 
	#R_PPC64_PLTGOT16_DS
 65

	)

2605 
	#R_PPC64_PLTGOT16_LO_DS
 66

	)

2608 
	#R_PPC64_TLS
 67

	)

2609 
	#R_PPC64_DTPMOD64
 68

	)

2610 
	#R_PPC64_TPREL16
 69

	)

2611 
	#R_PPC64_TPREL16_LO
 70

	)

2612 
	#R_PPC64_TPREL16_HI
 71

	)

2613 
	#R_PPC64_TPREL16_HA
 72

	)

2614 
	#R_PPC64_TPREL64
 73

	)

2615 
	#R_PPC64_DTPREL16
 74

	)

2616 
	#R_PPC64_DTPREL16_LO
 75

	)

2617 
	#R_PPC64_DTPREL16_HI
 76

	)

2618 
	#R_PPC64_DTPREL16_HA
 77

	)

2619 
	#R_PPC64_DTPREL64
 78

	)

2620 
	#R_PPC64_GOT_TLSGD16
 79

	)

2621 
	#R_PPC64_GOT_TLSGD16_LO
 80

	)

2622 
	#R_PPC64_GOT_TLSGD16_HI
 81

	)

2623 
	#R_PPC64_GOT_TLSGD16_HA
 82

	)

2624 
	#R_PPC64_GOT_TLSLD16
 83

	)

2625 
	#R_PPC64_GOT_TLSLD16_LO
 84

	)

2626 
	#R_PPC64_GOT_TLSLD16_HI
 85

	)

2627 
	#R_PPC64_GOT_TLSLD16_HA
 86

	)

2628 
	#R_PPC64_GOT_TPREL16_DS
 87

	)

2629 
	#R_PPC64_GOT_TPREL16_LO_DS
 88

	)

2630 
	#R_PPC64_GOT_TPREL16_HI
 89

	)

2631 
	#R_PPC64_GOT_TPREL16_HA
 90

	)

2632 
	#R_PPC64_GOT_DTPREL16_DS
 91

	)

2633 
	#R_PPC64_GOT_DTPREL16_LO_DS
 92

	)

2634 
	#R_PPC64_GOT_DTPREL16_HI
 93

	)

2635 
	#R_PPC64_GOT_DTPREL16_HA
 94

	)

2636 
	#R_PPC64_TPREL16_DS
 95

	)

2637 
	#R_PPC64_TPREL16_LO_DS
 96

	)

2638 
	#R_PPC64_TPREL16_HIGHER
 97

	)

2639 
	#R_PPC64_TPREL16_HIGHERA
 98

	)

2640 
	#R_PPC64_TPREL16_HIGHEST
 99

	)

2641 
	#R_PPC64_TPREL16_HIGHESTA
 100

	)

2642 
	#R_PPC64_DTPREL16_DS
 101

	)

2643 
	#R_PPC64_DTPREL16_LO_DS
 102

	)

2644 
	#R_PPC64_DTPREL16_HIGHER
 103

	)

2645 
	#R_PPC64_DTPREL16_HIGHERA
 104

	)

2646 
	#R_PPC64_DTPREL16_HIGHEST
 105

	)

2647 
	#R_PPC64_DTPREL16_HIGHESTA
 106

	)

2648 
	#R_PPC64_TLSGD
 107

	)

2649 
	#R_PPC64_TLSLD
 108

	)

2650 
	#R_PPC64_TOCSAVE
 109

	)

2653 
	#R_PPC64_ADDR16_HIGH
 110

	)

2654 
	#R_PPC64_ADDR16_HIGHA
 111

	)

2655 
	#R_PPC64_TPREL16_HIGH
 112

	)

2656 
	#R_PPC64_TPREL16_HIGHA
 113

	)

2657 
	#R_PPC64_DTPREL16_HIGH
 114

	)

2658 
	#R_PPC64_DTPREL16_HIGHA
 115

	)

2661 
	#R_PPC64_JMP_IREL
 247

	)

2662 
	#R_PPC64_IRELATIVE
 248

	)

2663 
	#R_PPC64_REL16
 249

	)

2664 
	#R_PPC64_REL16_LO
 250

	)

2665 
	#R_PPC64_REL16_HI
 251

	)

2666 
	#R_PPC64_REL16_HA
 252

	)

2672 
	#EF_PPC64_ABI
 3

	)

2675 
	#DT_PPC64_GLINK
 (
DT_LOPROC
 + 0)

	)

2676 
	#DT_PPC64_OPD
 (
DT_LOPROC
 + 1)

	)

2677 
	#DT_PPC64_OPDSZ
 (
DT_LOPROC
 + 2)

	)

2678 
	#DT_PPC64_OPT
 (
DT_LOPROC
 + 3)

	)

2679 
	#DT_PPC64_NUM
 4

	)

2682 
	#PPC64_OPT_TLS
 1

	)

2683 
	#PPC64_OPT_MULTI_TOC
 2

	)

2684 
	#PPC64_OPT_LOCALENTRY
 4

	)

2687 
	#STO_PPC64_LOCAL_BIT
 5

	)

2688 
	#STO_PPC64_LOCAL_MASK
 (7 << 
STO_PPC64_LOCAL_BIT
)

	)

2689 
	#PPC64_LOCAL_ENTRY_OFFSET
(
Ÿhî
) \

2690 (((1 << (((
Ÿhî
Ë& 
STO_PPC64_LOCAL_MASK
Ë>> 
STO_PPC64_LOCAL_BIT
)Ë>> 2Ë<< 2)

	)

2696 
	#EF_ARM_RELEXEC
 0x01

	)

2697 
	#EF_ARM_HASENTRY
 0x02

	)

2698 
	#EF_ARM_INTERWORK
 0x04

	)

2699 
	#EF_ARM_APCS_26
 0x08

	)

2700 
	#EF_ARM_APCS_FLOAT
 0x10

	)

2701 
	#EF_ARM_PIC
 0x20

	)

2702 
	#EF_ARM_ALIGN8
 0x40

	)

2703 
	#EF_ARM_NEW_ABI
 0x80

	)

2704 
	#EF_ARM_OLD_ABI
 0x100

	)

2705 
	#EF_ARM_SOFT_FLOAT
 0x200

	)

2706 
	#EF_ARM_VFP_FLOAT
 0x400

	)

2707 
	#EF_ARM_MAVERICK_FLOAT
 0x800

	)

2709 
	#EF_ARM_ABI_FLOAT_SOFT
 0x200

	)

2710 
	#EF_ARM_ABI_FLOAT_HARD
 0x400

	)

2715 
	#EF_ARM_SYMSARESORTED
 0x04

	)

2716 
	#EF_ARM_DYNSYMSUSESEGIDX
 0x08

	)

2717 
	#EF_ARM_MAPSYMSFIRST
 0x10

	)

2718 
	#EF_ARM_EABIMASK
 0XFF000000

	)

2721 
	#EF_ARM_BE8
 0x00800000

	)

2722 
	#EF_ARM_LE8
 0x00400000

	)

2724 
	#EF_ARM_EABI_VERSION
(
Êags
Ë((ÊagsË& 
EF_ARM_EABIMASK
)

	)

2725 
	#EF_ARM_EABI_UNKNOWN
 0x00000000

	)

2726 
	#EF_ARM_EABI_VER1
 0x01000000

	)

2727 
	#EF_ARM_EABI_VER2
 0x02000000

	)

2728 
	#EF_ARM_EABI_VER3
 0x03000000

	)

2729 
	#EF_ARM_EABI_VER4
 0x04000000

	)

2730 
	#EF_ARM_EABI_VER5
 0x05000000

	)

2733 
	#STT_ARM_TFUNC
 
STT_LOPROC


	)

2734 
	#STT_ARM_16BIT
 
STT_HIPROC


	)

2737 
	#SHF_ARM_ENTRYSECT
 0x10000000

	)

2738 
	#SHF_ARM_COMDEF
 0x80000000

	)

2742 
	#PF_ARM_SB
 0x10000000

	)

2744 
	#PF_ARM_PI
 0x20000000

	)

2745 
	#PF_ARM_ABS
 0x40000000

	)

2748 
	#PT_ARM_EXIDX
 (
PT_LOPROC
 + 1Ë

	)

2751 
	#SHT_ARM_EXIDX
 (
SHT_LOPROC
 + 1Ë

	)

2752 
	#SHT_ARM_PREEMPTMAP
 (
SHT_LOPROC
 + 2Ë

	)

2753 
	#SHT_ARM_ATTRIBUTES
 (
SHT_LOPROC
 + 3Ë

	)

2758 
	#R_AARCH64_NONE
 0

	)

2761 
	#R_AARCH64_P32_ABS32
 1

	)

2762 
	#R_AARCH64_P32_COPY
 180

	)

2763 
	#R_AARCH64_P32_GLOB_DAT
 181

	)

2764 
	#R_AARCH64_P32_JUMP_SLOT
 182

	)

2765 
	#R_AARCH64_P32_RELATIVE
 183

	)

2766 
	#R_AARCH64_P32_TLS_DTPMOD
 184

	)

2767 
	#R_AARCH64_P32_TLS_DTPREL
 185

	)

2768 
	#R_AARCH64_P32_TLS_TPREL
 186

	)

2769 
	#R_AARCH64_P32_TLSDESC
 187

	)

2770 
	#R_AARCH64_P32_IRELATIVE
 188

	)

2773 
	#R_AARCH64_ABS64
 257

	)

2774 
	#R_AARCH64_ABS32
 258

	)

2775 
	#R_AARCH64_ABS16
 259

	)

2776 
	#R_AARCH64_PREL64
 260

	)

2777 
	#R_AARCH64_PREL32
 261

	)

2778 
	#R_AARCH64_PREL16
 262

	)

2779 
	#R_AARCH64_MOVW_UABS_G0
 263

	)

2780 
	#R_AARCH64_MOVW_UABS_G0_NC
 264

	)

2781 
	#R_AARCH64_MOVW_UABS_G1
 265

	)

2782 
	#R_AARCH64_MOVW_UABS_G1_NC
 266

	)

2783 
	#R_AARCH64_MOVW_UABS_G2
 267

	)

2784 
	#R_AARCH64_MOVW_UABS_G2_NC
 268

	)

2785 
	#R_AARCH64_MOVW_UABS_G3
 269

	)

2786 
	#R_AARCH64_MOVW_SABS_G0
 270

	)

2787 
	#R_AARCH64_MOVW_SABS_G1
 271

	)

2788 
	#R_AARCH64_MOVW_SABS_G2
 272

	)

2789 
	#R_AARCH64_LD_PREL_LO19
 273

	)

2790 
	#R_AARCH64_ADR_PREL_LO21
 274

	)

2791 
	#R_AARCH64_ADR_PREL_PG_HI21
 275

	)

2792 
	#R_AARCH64_ADR_PREL_PG_HI21_NC
 276

	)

2793 
	#R_AARCH64_ADD_ABS_LO12_NC
 277

	)

2794 
	#R_AARCH64_LDST8_ABS_LO12_NC
 278

	)

2795 
	#R_AARCH64_TSTBR14
 279

	)

2796 
	#R_AARCH64_CONDBR19
 280

	)

2797 
	#R_AARCH64_JUMP26
 282

	)

2798 
	#R_AARCH64_CALL26
 283

	)

2799 
	#R_AARCH64_LDST16_ABS_LO12_NC
 284

	)

2800 
	#R_AARCH64_LDST32_ABS_LO12_NC
 285

	)

2801 
	#R_AARCH64_LDST64_ABS_LO12_NC
 286

	)

2802 
	#R_AARCH64_MOVW_PREL_G0
 287

	)

2803 
	#R_AARCH64_MOVW_PREL_G0_NC
 288

	)

2804 
	#R_AARCH64_MOVW_PREL_G1
 289

	)

2805 
	#R_AARCH64_MOVW_PREL_G1_NC
 290

	)

2806 
	#R_AARCH64_MOVW_PREL_G2
 291

	)

2807 
	#R_AARCH64_MOVW_PREL_G2_NC
 292

	)

2808 
	#R_AARCH64_MOVW_PREL_G3
 293

	)

2809 
	#R_AARCH64_LDST128_ABS_LO12_NC
 299

	)

2810 
	#R_AARCH64_MOVW_GOTOFF_G0
 300

	)

2811 
	#R_AARCH64_MOVW_GOTOFF_G0_NC
 301

	)

2812 
	#R_AARCH64_MOVW_GOTOFF_G1
 302

	)

2813 
	#R_AARCH64_MOVW_GOTOFF_G1_NC
 303

	)

2814 
	#R_AARCH64_MOVW_GOTOFF_G2
 304

	)

2815 
	#R_AARCH64_MOVW_GOTOFF_G2_NC
 305

	)

2816 
	#R_AARCH64_MOVW_GOTOFF_G3
 306

	)

2817 
	#R_AARCH64_GOTREL64
 307

	)

2818 
	#R_AARCH64_GOTREL32
 308

	)

2819 
	#R_AARCH64_GOT_LD_PREL19
 309

	)

2820 
	#R_AARCH64_LD64_GOTOFF_LO15
 310

	)

2821 
	#R_AARCH64_ADR_GOT_PAGE
 311

	)

2822 
	#R_AARCH64_LD64_GOT_LO12_NC
 312

	)

2823 
	#R_AARCH64_LD64_GOTPAGE_LO15
 313

	)

2824 
	#R_AARCH64_TLSGD_ADR_PREL21
 512

	)

2825 
	#R_AARCH64_TLSGD_ADR_PAGE21
 513

	)

2826 
	#R_AARCH64_TLSGD_ADD_LO12_NC
 514

	)

2827 
	#R_AARCH64_TLSGD_MOVW_G1
 515

	)

2828 
	#R_AARCH64_TLSGD_MOVW_G0_NC
 516

	)

2829 
	#R_AARCH64_TLSLD_ADR_PREL21
 517

	)

2830 
	#R_AARCH64_TLSLD_ADR_PAGE21
 518

	)

2831 
	#R_AARCH64_TLSLD_ADD_LO12_NC
 519

	)

2832 
	#R_AARCH64_TLSLD_MOVW_G1
 520

	)

2833 
	#R_AARCH64_TLSLD_MOVW_G0_NC
 521

	)

2834 
	#R_AARCH64_TLSLD_LD_PREL19
 522

	)

2835 
	#R_AARCH64_TLSLD_MOVW_DTPREL_G2
 523

	)

2836 
	#R_AARCH64_TLSLD_MOVW_DTPREL_G1
 524

	)

2837 
	#R_AARCH64_TLSLD_MOVW_DTPREL_G1_NC
 525

	)

2838 
	#R_AARCH64_TLSLD_MOVW_DTPREL_G0
 526

	)

2839 
	#R_AARCH64_TLSLD_MOVW_DTPREL_G0_NC
 527

	)

2840 
	#R_AARCH64_TLSLD_ADD_DTPREL_HI12
 528

	)

2841 
	#R_AARCH64_TLSLD_ADD_DTPREL_LO12
 529

	)

2842 
	#R_AARCH64_TLSLD_ADD_DTPREL_LO12_NC
 530

	)

2843 
	#R_AARCH64_TLSLD_LDST8_DTPREL_LO12
 531

	)

2844 
	#R_AARCH64_TLSLD_LDST8_DTPREL_LO12_NC
 532

	)

2845 
	#R_AARCH64_TLSLD_LDST16_DTPREL_LO12
 533

	)

2846 
	#R_AARCH64_TLSLD_LDST16_DTPREL_LO12_NC
 534

	)

2847 
	#R_AARCH64_TLSLD_LDST32_DTPREL_LO12
 535

	)

2848 
	#R_AARCH64_TLSLD_LDST32_DTPREL_LO12_NC
 536

	)

2849 
	#R_AARCH64_TLSLD_LDST64_DTPREL_LO12
 537

	)

2850 
	#R_AARCH64_TLSLD_LDST64_DTPREL_LO12_NC
 538

	)

2851 
	#R_AARCH64_TLSIE_MOVW_GOTTPREL_G1
 539

	)

2852 
	#R_AARCH64_TLSIE_MOVW_GOTTPREL_G0_NC
 540

	)

2853 
	#R_AARCH64_TLSIE_ADR_GOTTPREL_PAGE21
 541

	)

2854 
	#R_AARCH64_TLSIE_LD64_GOTTPREL_LO12_NC
 542

	)

2855 
	#R_AARCH64_TLSIE_LD_GOTTPREL_PREL19
 543

	)

2856 
	#R_AARCH64_TLSLE_MOVW_TPREL_G2
 544

	)

2857 
	#R_AARCH64_TLSLE_MOVW_TPREL_G1
 545

	)

2858 
	#R_AARCH64_TLSLE_MOVW_TPREL_G1_NC
 546

	)

2859 
	#R_AARCH64_TLSLE_MOVW_TPREL_G0
 547

	)

2860 
	#R_AARCH64_TLSLE_MOVW_TPREL_G0_NC
 548

	)

2861 
	#R_AARCH64_TLSLE_ADD_TPREL_HI12
 549

	)

2862 
	#R_AARCH64_TLSLE_ADD_TPREL_LO12
 550

	)

2863 
	#R_AARCH64_TLSLE_ADD_TPREL_LO12_NC
 551

	)

2864 
	#R_AARCH64_TLSLE_LDST8_TPREL_LO12
 552

	)

2865 
	#R_AARCH64_TLSLE_LDST8_TPREL_LO12_NC
 553

	)

2866 
	#R_AARCH64_TLSLE_LDST16_TPREL_LO12
 554

	)

2867 
	#R_AARCH64_TLSLE_LDST16_TPREL_LO12_NC
 555

	)

2868 
	#R_AARCH64_TLSLE_LDST32_TPREL_LO12
 556

	)

2869 
	#R_AARCH64_TLSLE_LDST32_TPREL_LO12_NC
 557

	)

2870 
	#R_AARCH64_TLSLE_LDST64_TPREL_LO12
 558

	)

2871 
	#R_AARCH64_TLSLE_LDST64_TPREL_LO12_NC
 559

	)

2872 
	#R_AARCH64_TLSDESC_LD_PREL19
 560

	)

2873 
	#R_AARCH64_TLSDESC_ADR_PREL21
 561

	)

2874 
	#R_AARCH64_TLSDESC_ADR_PAGE21
 562

	)

2875 
	#R_AARCH64_TLSDESC_LD64_LO12
 563

	)

2876 
	#R_AARCH64_TLSDESC_ADD_LO12
 564

	)

2877 
	#R_AARCH64_TLSDESC_OFF_G1
 565

	)

2878 
	#R_AARCH64_TLSDESC_OFF_G0_NC
 566

	)

2879 
	#R_AARCH64_TLSDESC_LDR
 567

	)

2880 
	#R_AARCH64_TLSDESC_ADD
 568

	)

2881 
	#R_AARCH64_TLSDESC_CALL
 569

	)

2882 
	#R_AARCH64_TLSLE_LDST128_TPREL_LO12
 570

	)

2883 
	#R_AARCH64_TLSLE_LDST128_TPREL_LO12_NC
 571

	)

2884 
	#R_AARCH64_TLSLD_LDST128_DTPREL_LO12
 572

	)

2885 
	#R_AARCH64_TLSLD_LDST128_DTPREL_LO12_NC
 573

	)

2886 
	#R_AARCH64_COPY
 1024

	)

2887 
	#R_AARCH64_GLOB_DAT
 1025

	)

2888 
	#R_AARCH64_JUMP_SLOT
 1026

	)

2889 
	#R_AARCH64_RELATIVE
 1027

	)

2890 
	#R_AARCH64_TLS_DTPMOD
 1028

	)

2891 
	#R_AARCH64_TLS_DTPREL
 1029

	)

2892 
	#R_AARCH64_TLS_TPREL
 1030

	)

2893 
	#R_AARCH64_TLSDESC
 1031

	)

2894 
	#R_AARCH64_IRELATIVE
 1032

	)

2897 
	#DT_AARCH64_BTI_PLT
 (
DT_LOPROC
 + 1)

	)

2898 
	#DT_AARCH64_PAC_PLT
 (
DT_LOPROC
 + 3)

	)

2899 
	#DT_AARCH64_VARIANT_PCS
 (
DT_LOPROC
 + 5)

	)

2900 
	#DT_AARCH64_NUM
 6

	)

2903 
	#STO_AARCH64_VARIANT_PCS
 0x80

	)

2907 
	#R_ARM_NONE
 0

	)

2908 
	#R_ARM_PC24
 1

	)

2910 
	#R_ARM_ABS32
 2

	)

2911 
	#R_ARM_REL32
 3

	)

2912 
	#R_ARM_PC13
 4

	)

2913 
	#R_ARM_ABS16
 5

	)

2914 
	#R_ARM_ABS12
 6

	)

2915 
	#R_ARM_THM_ABS5
 7

	)

2916 
	#R_ARM_ABS8
 8

	)

2917 
	#R_ARM_SBREL32
 9

	)

2918 
	#R_ARM_THM_PC22
 10

	)

2919 
	#R_ARM_THM_PC8
 11

	)

2921 
	#R_ARM_AMP_VCALL9
 12

	)

2922 
	#R_ARM_SWI24
 13

	)

2923 
	#R_ARM_TLS_DESC
 13

	)

2924 
	#R_ARM_THM_SWI8
 14

	)

2925 
	#R_ARM_XPC25
 15

	)

2926 
	#R_ARM_THM_XPC22
 16

	)

2927 
	#R_ARM_TLS_DTPMOD32
 17

	)

2928 
	#R_ARM_TLS_DTPOFF32
 18

	)

2929 
	#R_ARM_TLS_TPOFF32
 19

	)

2930 
	#R_ARM_COPY
 20

	)

2931 
	#R_ARM_GLOB_DAT
 21

	)

2932 
	#R_ARM_JUMP_SLOT
 22

	)

2933 
	#R_ARM_RELATIVE
 23

	)

2934 
	#R_ARM_GOTOFF
 24

	)

2935 
	#R_ARM_GOTPC
 25

	)

2936 
	#R_ARM_GOT32
 26

	)

2937 
	#R_ARM_PLT32
 27

	)

2938 
	#R_ARM_CALL
 28

	)

2939 
	#R_ARM_JUMP24
 29

	)

2941 
	#R_ARM_THM_JUMP24
 30

	)

2942 
	#R_ARM_BASE_ABS
 31

	)

2943 
	#R_ARM_ALU_PCREL_7_0
 32

	)

2944 
	#R_ARM_ALU_PCREL_15_8
 33

	)

2945 
	#R_ARM_ALU_PCREL_23_15
 34

	)

2946 
	#R_ARM_LDR_SBREL_11_0
 35

	)

2947 
	#R_ARM_ALU_SBREL_19_12
 36

	)

2948 
	#R_ARM_ALU_SBREL_27_20
 37

	)

2949 
	#R_ARM_TARGET1
 38

	)

2950 
	#R_ARM_SBREL31
 39

	)

2951 
	#R_ARM_V4BX
 40

	)

2952 
	#R_ARM_TARGET2
 41

	)

2953 
	#R_ARM_PREL31
 42

	)

2954 
	#R_ARM_MOVW_ABS_NC
 43

	)

2955 
	#R_ARM_MOVT_ABS
 44

	)

2956 
	#R_ARM_MOVW_PREL_NC
 45

	)

2957 
	#R_ARM_MOVT_PREL
 46

	)

2958 
	#R_ARM_THM_MOVW_ABS_NC
 47

	)

2959 
	#R_ARM_THM_MOVT_ABS
 48

	)

2961 
	#R_ARM_THM_MOVW_PREL_NC
 49

	)

2963 
	#R_ARM_THM_MOVT_PREL
 50

	)

2965 
	#R_ARM_THM_JUMP19
 51

	)

2967 
	#R_ARM_THM_JUMP6
 52

	)

2969 
	#R_ARM_THM_ALU_PREL_11_0
 53

	)

2971 
	#R_ARM_THM_PC12
 54

	)

2973 
	#R_ARM_ABS32_NOI
 55

	)

2974 
	#R_ARM_REL32_NOI
 56

	)

2975 
	#R_ARM_ALU_PC_G0_NC
 57

	)

2976 
	#R_ARM_ALU_PC_G0
 58

	)

2977 
	#R_ARM_ALU_PC_G1_NC
 59

	)

2978 
	#R_ARM_ALU_PC_G1
 60

	)

2979 
	#R_ARM_ALU_PC_G2
 61

	)

2980 
	#R_ARM_LDR_PC_G1
 62

	)

2981 
	#R_ARM_LDR_PC_G2
 63

	)

2982 
	#R_ARM_LDRS_PC_G0
 64

	)

2984 
	#R_ARM_LDRS_PC_G1
 65

	)

2986 
	#R_ARM_LDRS_PC_G2
 66

	)

2988 
	#R_ARM_LDC_PC_G0
 67

	)

2989 
	#R_ARM_LDC_PC_G1
 68

	)

2990 
	#R_ARM_LDC_PC_G2
 69

	)

2991 
	#R_ARM_ALU_SB_G0_NC
 70

	)

2992 
	#R_ARM_ALU_SB_G0
 71

	)

2993 
	#R_ARM_ALU_SB_G1_NC
 72

	)

2994 
	#R_ARM_ALU_SB_G1
 73

	)

2995 
	#R_ARM_ALU_SB_G2
 74

	)

2996 
	#R_ARM_LDR_SB_G0
 75

	)

2998 
	#R_ARM_LDR_SB_G1
 76

	)

3000 
	#R_ARM_LDR_SB_G2
 77

	)

3002 
	#R_ARM_LDRS_SB_G0
 78

	)

3004 
	#R_ARM_LDRS_SB_G1
 79

	)

3006 
	#R_ARM_LDRS_SB_G2
 80

	)

3008 
	#R_ARM_LDC_SB_G0
 81

	)

3009 
	#R_ARM_LDC_SB_G1
 82

	)

3010 
	#R_ARM_LDC_SB_G2
 83

	)

3011 
	#R_ARM_MOVW_BREL_NC
 84

	)

3013 
	#R_ARM_MOVT_BREL
 85

	)

3015 
	#R_ARM_MOVW_BREL
 86

	)

3017 
	#R_ARM_THM_MOVW_BREL_NC
 87

	)

3019 
	#R_ARM_THM_MOVT_BREL
 88

	)

3021 
	#R_ARM_THM_MOVW_BREL
 89

	)

3023 
	#R_ARM_TLS_GOTDESC
 90

	)

3024 
	#R_ARM_TLS_CALL
 91

	)

3025 
	#R_ARM_TLS_DESCSEQ
 92

	)

3026 
	#R_ARM_THM_TLS_CALL
 93

	)

3027 
	#R_ARM_PLT32_ABS
 94

	)

3028 
	#R_ARM_GOT_ABS
 95

	)

3029 
	#R_ARM_GOT_PREL
 96

	)

3030 
	#R_ARM_GOT_BREL12
 97

	)

3032 
	#R_ARM_GOTOFF12
 98

	)

3034 
	#R_ARM_GOTRELAX
 99

	)

3035 
	#R_ARM_GNU_VTENTRY
 100

	)

3036 
	#R_ARM_GNU_VTINHERIT
 101

	)

3037 
	#R_ARM_THM_PC11
 102

	)

3038 
	#R_ARM_THM_PC9
 103

	)

3040 
	#R_ARM_TLS_GD32
 104

	)

3042 
	#R_ARM_TLS_LDM32
 105

	)

3044 
	#R_ARM_TLS_LDO32
 106

	)

3046 
	#R_ARM_TLS_IE32
 107

	)

3048 
	#R_ARM_TLS_LE32
 108

	)

3050 
	#R_ARM_TLS_LDO12
 109

	)

3052 
	#R_ARM_TLS_LE12
 110

	)

3054 
	#R_ARM_TLS_IE12GP
 111

	)

3056 
	#R_ARM_ME_TOO
 128

	)

3057 
	#R_ARM_THM_TLS_DESCSEQ
 129

	)

3058 
	#R_ARM_THM_TLS_DESCSEQ16
 129

	)

3059 
	#R_ARM_THM_TLS_DESCSEQ32
 130

	)

3060 
	#R_ARM_THM_GOT_BREL12
 131

	)

3062 
	#R_ARM_IRELATIVE
 160

	)

3063 
	#R_ARM_RXPC25
 249

	)

3064 
	#R_ARM_RSBREL32
 250

	)

3065 
	#R_ARM_THM_RPC22
 251

	)

3066 
	#R_ARM_RREL32
 252

	)

3067 
	#R_ARM_RABS22
 253

	)

3068 
	#R_ARM_RPC24
 254

	)

3069 
	#R_ARM_RBASE
 255

	)

3071 
	#R_ARM_NUM
 256

	)

3074 
	#R_CKCORE_NONE
 0

	)

3075 
	#R_CKCORE_ADDR32
 1

	)

3076 
	#R_CKCORE_PCRELIMM8BY4
 2

	)

3077 
	#R_CKCORE_PCRELIMM11BY2
 3

	)

3078 
	#R_CKCORE_PCREL32
 5

	)

3079 
	#R_CKCORE_PCRELJSR_IMM11BY2
 6

	)

3080 
	#R_CKCORE_RELATIVE
 9

	)

3081 
	#R_CKCORE_COPY
 10

	)

3082 
	#R_CKCORE_GLOB_DAT
 11

	)

3083 
	#R_CKCORE_JUMP_SLOT
 12

	)

3084 
	#R_CKCORE_GOTOFF
 13

	)

3085 
	#R_CKCORE_GOTPC
 14

	)

3086 
	#R_CKCORE_GOT32
 15

	)

3087 
	#R_CKCORE_PLT32
 16

	)

3088 
	#R_CKCORE_ADDRGOT
 17

	)

3089 
	#R_CKCORE_ADDRPLT
 18

	)

3090 
	#R_CKCORE_PCREL_IMM26BY2
 19

	)

3091 
	#R_CKCORE_PCREL_IMM16BY2
 20

	)

3092 
	#R_CKCORE_PCREL_IMM16BY4
 21

	)

3093 
	#R_CKCORE_PCREL_IMM10BY2
 22

	)

3094 
	#R_CKCORE_PCREL_IMM10BY4
 23

	)

3095 
	#R_CKCORE_ADDR_HI16
 24

	)

3097 
	#R_CKCORE_ADDR_LO16
 25

	)

3098 
	#R_CKCORE_GOTPC_HI16
 26

	)

3100 
	#R_CKCORE_GOTPC_LO16
 27

	)

3101 
	#R_CKCORE_GOTOFF_HI16
 28

	)

3103 
	#R_CKCORE_GOTOFF_LO16
 29

	)

3104 
	#R_CKCORE_GOT12
 30

	)

3105 
	#R_CKCORE_GOT_HI16
 31

	)

3107 
	#R_CKCORE_GOT_LO16
 32

	)

3108 
	#R_CKCORE_PLT12
 33

	)

3109 
	#R_CKCORE_PLT_HI16
 34

	)

3111 
	#R_CKCORE_PLT_LO16
 35

	)

3112 
	#R_CKCORE_ADDRGOT_HI16
 36

	)

3114 
	#R_CKCORE_ADDRGOT_LO16
 37

	)

3115 
	#R_CKCORE_ADDRPLT_HI16
 38

	)

3117 
	#R_CKCORE_ADDRPLT_LO16
 39

	)

3118 
	#R_CKCORE_PCREL_JSR_IMM26BY2
 40

	)

3119 
	#R_CKCORE_TOFFSET_LO16
 41

	)

3120 
	#R_CKCORE_DOFFSET_LO16
 42

	)

3121 
	#R_CKCORE_PCREL_IMM18BY2
 43

	)

3122 
	#R_CKCORE_DOFFSET_IMM18
 44

	)

3123 
	#R_CKCORE_DOFFSET_IMM18BY2
 45

	)

3124 
	#R_CKCORE_DOFFSET_IMM18BY4
 46

	)

3125 
	#R_CKCORE_GOT_IMM18BY4
 48

	)

3126 
	#R_CKCORE_PLT_IMM18BY4
 49

	)

3127 
	#R_CKCORE_PCREL_IMM7BY4
 50

	)

3128 
	#R_CKCORE_TLS_LE32
 51

	)

3129 
	#R_CKCORE_TLS_IE32
 52

	)

3130 
	#R_CKCORE_TLS_GD32
 53

	)

3131 
	#R_CKCORE_TLS_LDM32
 54

	)

3132 
	#R_CKCORE_TLS_LDO32
 55

	)

3133 
	#R_CKCORE_TLS_DTPMOD32
 56

	)

3134 
	#R_CKCORE_TLS_DTPOFF32
 57

	)

3135 
	#R_CKCORE_TLS_TPOFF32
 58

	)

3138 
	#EF_CSKY_ABIMASK
 0XF0000000

	)

3139 
	#EF_CSKY_OTHER
 0X0FFF0000

	)

3140 
	#EF_CSKY_PROCESSOR
 0X0000FFFF

	)

3142 
	#EF_CSKY_ABIV1
 0X10000000

	)

3143 
	#EF_CSKY_ABIV2
 0X20000000

	)

3146 
	#SHT_CSKY_ATTRIBUTES
 (
SHT_LOPROC
 + 1)

	)

3151 
	#EF_IA_64_MASKOS
 0x0000000‡

	)

3152 
	#EF_IA_64_ABI64
 0x00000010

	)

3153 
	#EF_IA_64_ARCH
 0xff000000

	)

3156 
	#PT_IA_64_ARCHEXT
 (
PT_LOPROC
 + 0Ë

	)

3157 
	#PT_IA_64_UNWIND
 (
PT_LOPROC
 + 1Ë

	)

3158 
	#PT_IA_64_HP_OPT_ANOT
 (
PT_LOOS
 + 0x12)

	)

3159 
	#PT_IA_64_HP_HSL_ANOT
 (
PT_LOOS
 + 0x13)

	)

3160 
	#PT_IA_64_HP_STACK
 (
PT_LOOS
 + 0x14)

	)

3163 
	#PF_IA_64_NORECOV
 0x80000000

	)

3166 
	#SHT_IA_64_EXT
 (
SHT_LOPROC
 + 0Ë

	)

3167 
	#SHT_IA_64_UNWIND
 (
SHT_LOPROC
 + 1Ë

	)

3170 
	#SHF_IA_64_SHORT
 0x10000000

	)

3171 
	#SHF_IA_64_NORECOV
 0x20000000

	)

3174 
	#DT_IA_64_PLT_RESERVE
 (
DT_LOPROC
 + 0)

	)

3175 
	#DT_IA_64_NUM
 1

	)

3178 
	#R_IA64_NONE
 0x00

	)

3179 
	#R_IA64_IMM14
 0x21

	)

3180 
	#R_IA64_IMM22
 0x22

	)

3181 
	#R_IA64_IMM64
 0x23

	)

3182 
	#R_IA64_DIR32MSB
 0x24

	)

3183 
	#R_IA64_DIR32LSB
 0x25

	)

3184 
	#R_IA64_DIR64MSB
 0x26

	)

3185 
	#R_IA64_DIR64LSB
 0x27

	)

3186 
	#R_IA64_GPREL22
 0x2®

	)

3187 
	#R_IA64_GPREL64I
 0x2b

	)

3188 
	#R_IA64_GPREL32MSB
 0x2¯

	)

3189 
	#R_IA64_GPREL32LSB
 0x2d

	)

3190 
	#R_IA64_GPREL64MSB
 0x2ê

	)

3191 
	#R_IA64_GPREL64LSB
 0x2‡

	)

3192 
	#R_IA64_LTOFF22
 0x32

	)

3193 
	#R_IA64_LTOFF64I
 0x33

	)

3194 
	#R_IA64_PLTOFF22
 0x3®

	)

3195 
	#R_IA64_PLTOFF64I
 0x3b

	)

3196 
	#R_IA64_PLTOFF64MSB
 0x3ê

	)

3197 
	#R_IA64_PLTOFF64LSB
 0x3‡

	)

3198 
	#R_IA64_FPTR64I
 0x43

	)

3199 
	#R_IA64_FPTR32MSB
 0x44

	)

3200 
	#R_IA64_FPTR32LSB
 0x45

	)

3201 
	#R_IA64_FPTR64MSB
 0x46

	)

3202 
	#R_IA64_FPTR64LSB
 0x47

	)

3203 
	#R_IA64_PCREL60B
 0x48

	)

3204 
	#R_IA64_PCREL21B
 0x49

	)

3205 
	#R_IA64_PCREL21M
 0x4®

	)

3206 
	#R_IA64_PCREL21F
 0x4b

	)

3207 
	#R_IA64_PCREL32MSB
 0x4¯

	)

3208 
	#R_IA64_PCREL32LSB
 0x4d

	)

3209 
	#R_IA64_PCREL64MSB
 0x4ê

	)

3210 
	#R_IA64_PCREL64LSB
 0x4‡

	)

3211 
	#R_IA64_LTOFF_FPTR22
 0x52

	)

3212 
	#R_IA64_LTOFF_FPTR64I
 0x53

	)

3213 
	#R_IA64_LTOFF_FPTR32MSB
 0x54

	)

3214 
	#R_IA64_LTOFF_FPTR32LSB
 0x55

	)

3215 
	#R_IA64_LTOFF_FPTR64MSB
 0x56

	)

3216 
	#R_IA64_LTOFF_FPTR64LSB
 0x57

	)

3217 
	#R_IA64_SEGREL32MSB
 0x5¯

	)

3218 
	#R_IA64_SEGREL32LSB
 0x5d

	)

3219 
	#R_IA64_SEGREL64MSB
 0x5ê

	)

3220 
	#R_IA64_SEGREL64LSB
 0x5‡

	)

3221 
	#R_IA64_SECREL32MSB
 0x64

	)

3222 
	#R_IA64_SECREL32LSB
 0x65

	)

3223 
	#R_IA64_SECREL64MSB
 0x66

	)

3224 
	#R_IA64_SECREL64LSB
 0x67

	)

3225 
	#R_IA64_REL32MSB
 0x6¯

	)

3226 
	#R_IA64_REL32LSB
 0x6d

	)

3227 
	#R_IA64_REL64MSB
 0x6ê

	)

3228 
	#R_IA64_REL64LSB
 0x6‡

	)

3229 
	#R_IA64_LTV32MSB
 0x74

	)

3230 
	#R_IA64_LTV32LSB
 0x75

	)

3231 
	#R_IA64_LTV64MSB
 0x76

	)

3232 
	#R_IA64_LTV64LSB
 0x77

	)

3233 
	#R_IA64_PCREL21BI
 0x79

	)

3234 
	#R_IA64_PCREL22
 0x7®

	)

3235 
	#R_IA64_PCREL64I
 0x7b

	)

3236 
	#R_IA64_IPLTMSB
 0x80

	)

3237 
	#R_IA64_IPLTLSB
 0x81

	)

3238 
	#R_IA64_COPY
 0x84

	)

3239 
	#R_IA64_SUB
 0x85

	)

3240 
	#R_IA64_LTOFF22X
 0x86

	)

3241 
	#R_IA64_LDXMOV
 0x87

	)

3242 
	#R_IA64_TPREL14
 0x91

	)

3243 
	#R_IA64_TPREL22
 0x92

	)

3244 
	#R_IA64_TPREL64I
 0x93

	)

3245 
	#R_IA64_TPREL64MSB
 0x96

	)

3246 
	#R_IA64_TPREL64LSB
 0x97

	)

3247 
	#R_IA64_LTOFF_TPREL22
 0x9®

	)

3248 
	#R_IA64_DTPMOD64MSB
 0xa6

	)

3249 
	#R_IA64_DTPMOD64LSB
 0xa7

	)

3250 
	#R_IA64_LTOFF_DTPMOD22
 0xØ

	)

3251 
	#R_IA64_DTPREL14
 0xb1

	)

3252 
	#R_IA64_DTPREL22
 0xb2

	)

3253 
	#R_IA64_DTPREL64I
 0xb3

	)

3254 
	#R_IA64_DTPREL32MSB
 0xb4

	)

3255 
	#R_IA64_DTPREL32LSB
 0xb5

	)

3256 
	#R_IA64_DTPREL64MSB
 0xb6

	)

3257 
	#R_IA64_DTPREL64LSB
 0xb7

	)

3258 
	#R_IA64_LTOFF_DTPREL22
 0xb®

	)

3263 
	#EF_SH_MACH_MASK
 0x1f

	)

3264 
	#EF_SH_UNKNOWN
 0x0

	)

3265 
	#EF_SH1
 0x1

	)

3266 
	#EF_SH2
 0x2

	)

3267 
	#EF_SH3
 0x3

	)

3268 
	#EF_SH_DSP
 0x4

	)

3269 
	#EF_SH3_DSP
 0x5

	)

3270 
	#EF_SH4AL_DSP
 0x6

	)

3271 
	#EF_SH3E
 0x8

	)

3272 
	#EF_SH4
 0x9

	)

3273 
	#EF_SH2E
 0xb

	)

3274 
	#EF_SH4A
 0xc

	)

3275 
	#EF_SH2A
 0xd

	)

3276 
	#EF_SH4_NOFPU
 0x10

	)

3277 
	#EF_SH4A_NOFPU
 0x11

	)

3278 
	#EF_SH4_NOMMU_NOFPU
 0x12

	)

3279 
	#EF_SH2A_NOFPU
 0x13

	)

3280 
	#EF_SH3_NOMMU
 0x14

	)

3281 
	#EF_SH2A_SH4_NOFPU
 0x15

	)

3282 
	#EF_SH2A_SH3_NOFPU
 0x16

	)

3283 
	#EF_SH2A_SH4
 0x17

	)

3284 
	#EF_SH2A_SH3E
 0x18

	)

3287 
	#R_SH_NONE
 0

	)

3288 
	#R_SH_DIR32
 1

	)

3289 
	#R_SH_REL32
 2

	)

3290 
	#R_SH_DIR8WPN
 3

	)

3291 
	#R_SH_IND12W
 4

	)

3292 
	#R_SH_DIR8WPL
 5

	)

3293 
	#R_SH_DIR8WPZ
 6

	)

3294 
	#R_SH_DIR8BP
 7

	)

3295 
	#R_SH_DIR8W
 8

	)

3296 
	#R_SH_DIR8L
 9

	)

3297 
	#R_SH_SWITCH16
 25

	)

3298 
	#R_SH_SWITCH32
 26

	)

3299 
	#R_SH_USES
 27

	)

3300 
	#R_SH_COUNT
 28

	)

3301 
	#R_SH_ALIGN
 29

	)

3302 
	#R_SH_CODE
 30

	)

3303 
	#R_SH_DATA
 31

	)

3304 
	#R_SH_LABEL
 32

	)

3305 
	#R_SH_SWITCH8
 33

	)

3306 
	#R_SH_GNU_VTINHERIT
 34

	)

3307 
	#R_SH_GNU_VTENTRY
 35

	)

3308 
	#R_SH_TLS_GD_32
 144

	)

3309 
	#R_SH_TLS_LD_32
 145

	)

3310 
	#R_SH_TLS_LDO_32
 146

	)

3311 
	#R_SH_TLS_IE_32
 147

	)

3312 
	#R_SH_TLS_LE_32
 148

	)

3313 
	#R_SH_TLS_DTPMOD32
 149

	)

3314 
	#R_SH_TLS_DTPOFF32
 150

	)

3315 
	#R_SH_TLS_TPOFF32
 151

	)

3316 
	#R_SH_GOT32
 160

	)

3317 
	#R_SH_PLT32
 161

	)

3318 
	#R_SH_COPY
 162

	)

3319 
	#R_SH_GLOB_DAT
 163

	)

3320 
	#R_SH_JMP_SLOT
 164

	)

3321 
	#R_SH_RELATIVE
 165

	)

3322 
	#R_SH_GOTOFF
 166

	)

3323 
	#R_SH_GOTPC
 167

	)

3325 
	#R_SH_NUM
 256

	)

3331 
	#EF_S390_HIGH_GPRS
 0x00000001

	)

3335 
	#R_390_NONE
 0

	)

3336 
	#R_390_8
 1

	)

3337 
	#R_390_12
 2

	)

3338 
	#R_390_16
 3

	)

3339 
	#R_390_32
 4

	)

3340 
	#R_390_PC32
 5

	)

3341 
	#R_390_GOT12
 6

	)

3342 
	#R_390_GOT32
 7

	)

3343 
	#R_390_PLT32
 8

	)

3344 
	#R_390_COPY
 9

	)

3345 
	#R_390_GLOB_DAT
 10

	)

3346 
	#R_390_JMP_SLOT
 11

	)

3347 
	#R_390_RELATIVE
 12

	)

3348 
	#R_390_GOTOFF32
 13

	)

3349 
	#R_390_GOTPC
 14

	)

3350 
	#R_390_GOT16
 15

	)

3351 
	#R_390_PC16
 16

	)

3352 
	#R_390_PC16DBL
 17

	)

3353 
	#R_390_PLT16DBL
 18

	)

3354 
	#R_390_PC32DBL
 19

	)

3355 
	#R_390_PLT32DBL
 20

	)

3356 
	#R_390_GOTPCDBL
 21

	)

3357 
	#R_390_64
 22

	)

3358 
	#R_390_PC64
 23

	)

3359 
	#R_390_GOT64
 24

	)

3360 
	#R_390_PLT64
 25

	)

3361 
	#R_390_GOTENT
 26

	)

3362 
	#R_390_GOTOFF16
 27

	)

3363 
	#R_390_GOTOFF64
 28

	)

3364 
	#R_390_GOTPLT12
 29

	)

3365 
	#R_390_GOTPLT16
 30

	)

3366 
	#R_390_GOTPLT32
 31

	)

3367 
	#R_390_GOTPLT64
 32

	)

3368 
	#R_390_GOTPLTENT
 33

	)

3369 
	#R_390_PLTOFF16
 34

	)

3370 
	#R_390_PLTOFF32
 35

	)

3371 
	#R_390_PLTOFF64
 36

	)

3372 
	#R_390_TLS_LOAD
 37

	)

3373 
	#R_390_TLS_GDCALL
 38

	)

3375 
	#R_390_TLS_LDCALL
 39

	)

3377 
	#R_390_TLS_GD32
 40

	)

3379 
	#R_390_TLS_GD64
 41

	)

3381 
	#R_390_TLS_GOTIE12
 42

	)

3383 
	#R_390_TLS_GOTIE32
 43

	)

3385 
	#R_390_TLS_GOTIE64
 44

	)

3387 
	#R_390_TLS_LDM32
 45

	)

3389 
	#R_390_TLS_LDM64
 46

	)

3391 
	#R_390_TLS_IE32
 47

	)

3393 
	#R_390_TLS_IE64
 48

	)

3395 
	#R_390_TLS_IEENT
 49

	)

3397 
	#R_390_TLS_LE32
 50

	)

3399 
	#R_390_TLS_LE64
 51

	)

3401 
	#R_390_TLS_LDO32
 52

	)

3403 
	#R_390_TLS_LDO64
 53

	)

3405 
	#R_390_TLS_DTPMOD
 54

	)

3406 
	#R_390_TLS_DTPOFF
 55

	)

3407 
	#R_390_TLS_TPOFF
 56

	)

3409 
	#R_390_20
 57

	)

3410 
	#R_390_GOT20
 58

	)

3411 
	#R_390_GOTPLT20
 59

	)

3412 
	#R_390_TLS_GOTIE20
 60

	)

3414 
	#R_390_IRELATIVE
 61

	)

3416 
	#R_390_NUM
 62

	)

3420 
	#R_CRIS_NONE
 0

	)

3421 
	#R_CRIS_8
 1

	)

3422 
	#R_CRIS_16
 2

	)

3423 
	#R_CRIS_32
 3

	)

3424 
	#R_CRIS_8_PCREL
 4

	)

3425 
	#R_CRIS_16_PCREL
 5

	)

3426 
	#R_CRIS_32_PCREL
 6

	)

3427 
	#R_CRIS_GNU_VTINHERIT
 7

	)

3428 
	#R_CRIS_GNU_VTENTRY
 8

	)

3429 
	#R_CRIS_COPY
 9

	)

3430 
	#R_CRIS_GLOB_DAT
 10

	)

3431 
	#R_CRIS_JUMP_SLOT
 11

	)

3432 
	#R_CRIS_RELATIVE
 12

	)

3433 
	#R_CRIS_16_GOT
 13

	)

3434 
	#R_CRIS_32_GOT
 14

	)

3435 
	#R_CRIS_16_GOTPLT
 15

	)

3436 
	#R_CRIS_32_GOTPLT
 16

	)

3437 
	#R_CRIS_32_GOTREL
 17

	)

3438 
	#R_CRIS_32_PLT_GOTREL
 18

	)

3439 
	#R_CRIS_32_PLT_PCREL
 19

	)

3441 
	#R_CRIS_NUM
 20

	)

3445 
	#R_X86_64_NONE
 0

	)

3446 
	#R_X86_64_64
 1

	)

3447 
	#R_X86_64_PC32
 2

	)

3448 
	#R_X86_64_GOT32
 3

	)

3449 
	#R_X86_64_PLT32
 4

	)

3450 
	#R_X86_64_COPY
 5

	)

3451 
	#R_X86_64_GLOB_DAT
 6

	)

3452 
	#R_X86_64_JUMP_SLOT
 7

	)

3453 
	#R_X86_64_RELATIVE
 8

	)

3454 
	#R_X86_64_GOTPCREL
 9

	)

3456 
	#R_X86_64_32
 10

	)

3457 
	#R_X86_64_32S
 11

	)

3458 
	#R_X86_64_16
 12

	)

3459 
	#R_X86_64_PC16
 13

	)

3460 
	#R_X86_64_8
 14

	)

3461 
	#R_X86_64_PC8
 15

	)

3462 
	#R_X86_64_DTPMOD64
 16

	)

3463 
	#R_X86_64_DTPOFF64
 17

	)

3464 
	#R_X86_64_TPOFF64
 18

	)

3465 
	#R_X86_64_TLSGD
 19

	)

3467 
	#R_X86_64_TLSLD
 20

	)

3469 
	#R_X86_64_DTPOFF32
 21

	)

3470 
	#R_X86_64_GOTTPOFF
 22

	)

3472 
	#R_X86_64_TPOFF32
 23

	)

3473 
	#R_X86_64_PC64
 24

	)

3474 
	#R_X86_64_GOTOFF64
 25

	)

3475 
	#R_X86_64_GOTPC32
 26

	)

3477 
	#R_X86_64_GOT64
 27

	)

3478 
	#R_X86_64_GOTPCREL64
 28

	)

3480 
	#R_X86_64_GOTPC64
 29

	)

3481 
	#R_X86_64_GOTPLT64
 30

	)

3482 
	#R_X86_64_PLTOFF64
 31

	)

3484 
	#R_X86_64_SIZE32
 32

	)

3485 
	#R_X86_64_SIZE64
 33

	)

3486 
	#R_X86_64_GOTPC32_TLSDESC
 34

	)

3487 
	#R_X86_64_TLSDESC_CALL
 35

	)

3489 
	#R_X86_64_TLSDESC
 36

	)

3490 
	#R_X86_64_IRELATIVE
 37

	)

3491 
	#R_X86_64_RELATIVE64
 38

	)

3494 
	#R_X86_64_GOTPCRELX
 41

	)

3497 
	#R_X86_64_REX_GOTPCRELX
 42

	)

3500 
	#R_X86_64_NUM
 43

	)

3503 
	#SHT_X86_64_UNWIND
 0x70000001

	)

3507 
	#R_MN10300_NONE
 0

	)

3508 
	#R_MN10300_32
 1

	)

3509 
	#R_MN10300_16
 2

	)

3510 
	#R_MN10300_8
 3

	)

3511 
	#R_MN10300_PCREL32
 4

	)

3512 
	#R_MN10300_PCREL16
 5

	)

3513 
	#R_MN10300_PCREL8
 6

	)

3514 
	#R_MN10300_GNU_VTINHERIT
 7

	)

3515 
	#R_MN10300_GNU_VTENTRY
 8

	)

3516 
	#R_MN10300_24
 9

	)

3517 
	#R_MN10300_GOTPC32
 10

	)

3518 
	#R_MN10300_GOTPC16
 11

	)

3519 
	#R_MN10300_GOTOFF32
 12

	)

3520 
	#R_MN10300_GOTOFF24
 13

	)

3521 
	#R_MN10300_GOTOFF16
 14

	)

3522 
	#R_MN10300_PLT32
 15

	)

3523 
	#R_MN10300_PLT16
 16

	)

3524 
	#R_MN10300_GOT32
 17

	)

3525 
	#R_MN10300_GOT24
 18

	)

3526 
	#R_MN10300_GOT16
 19

	)

3527 
	#R_MN10300_COPY
 20

	)

3528 
	#R_MN10300_GLOB_DAT
 21

	)

3529 
	#R_MN10300_JMP_SLOT
 22

	)

3530 
	#R_MN10300_RELATIVE
 23

	)

3531 
	#R_MN10300_TLS_GD
 24

	)

3532 
	#R_MN10300_TLS_LD
 25

	)

3533 
	#R_MN10300_TLS_LDO
 26

	)

3534 
	#R_MN10300_TLS_GOTIE
 27

	)

3536 
	#R_MN10300_TLS_IE
 28

	)

3538 
	#R_MN10300_TLS_LE
 29

	)

3540 
	#R_MN10300_TLS_DTPMOD
 30

	)

3541 
	#R_MN10300_TLS_DTPOFF
 31

	)

3542 
	#R_MN10300_TLS_TPOFF
 32

	)

3543 
	#R_MN10300_SYM_DIFF
 33

	)

3545 
	#R_MN10300_ALIGN
 34

	)

3547 
	#R_MN10300_NUM
 35

	)

3551 
	#R_M32R_NONE
 0

	)

3552 
	#R_M32R_16
 1

	)

3553 
	#R_M32R_32
 2

	)

3554 
	#R_M32R_24
 3

	)

3555 
	#R_M32R_10_PCREL
 4

	)

3556 
	#R_M32R_18_PCREL
 5

	)

3557 
	#R_M32R_26_PCREL
 6

	)

3558 
	#R_M32R_HI16_ULO
 7

	)

3559 
	#R_M32R_HI16_SLO
 8

	)

3560 
	#R_M32R_LO16
 9

	)

3561 
	#R_M32R_SDA16
 10

	)

3562 
	#R_M32R_GNU_VTINHERIT
 11

	)

3563 
	#R_M32R_GNU_VTENTRY
 12

	)

3565 
	#R_M32R_16_RELA
 33

	)

3566 
	#R_M32R_32_RELA
 34

	)

3567 
	#R_M32R_24_RELA
 35

	)

3568 
	#R_M32R_10_PCREL_RELA
 36

	)

3569 
	#R_M32R_18_PCREL_RELA
 37

	)

3570 
	#R_M32R_26_PCREL_RELA
 38

	)

3571 
	#R_M32R_HI16_ULO_RELA
 39

	)

3572 
	#R_M32R_HI16_SLO_RELA
 40

	)

3573 
	#R_M32R_LO16_RELA
 41

	)

3574 
	#R_M32R_SDA16_RELA
 42

	)

3575 
	#R_M32R_RELA_GNU_VTINHERIT
 43

	)

3576 
	#R_M32R_RELA_GNU_VTENTRY
 44

	)

3577 
	#R_M32R_REL32
 45

	)

3579 
	#R_M32R_GOT24
 48

	)

3580 
	#R_M32R_26_PLTREL
 49

	)

3581 
	#R_M32R_COPY
 50

	)

3582 
	#R_M32R_GLOB_DAT
 51

	)

3583 
	#R_M32R_JMP_SLOT
 52

	)

3584 
	#R_M32R_RELATIVE
 53

	)

3585 
	#R_M32R_GOTOFF
 54

	)

3586 
	#R_M32R_GOTPC24
 55

	)

3587 
	#R_M32R_GOT16_HI_ULO
 56

	)

3589 
	#R_M32R_GOT16_HI_SLO
 57

	)

3591 
	#R_M32R_GOT16_LO
 58

	)

3592 
	#R_M32R_GOTPC_HI_ULO
 59

	)

3594 
	#R_M32R_GOTPC_HI_SLO
 60

	)

3596 
	#R_M32R_GOTPC_LO
 61

	)

3598 
	#R_M32R_GOTOFF_HI_ULO
 62

	)

3600 
	#R_M32R_GOTOFF_HI_SLO
 63

	)

3602 
	#R_M32R_GOTOFF_LO
 64

	)

3603 
	#R_M32R_NUM
 256

	)

3606 
	#R_MICROBLAZE_NONE
 0

	)

3607 
	#R_MICROBLAZE_32
 1

	)

3608 
	#R_MICROBLAZE_32_PCREL
 2

	)

3609 
	#R_MICROBLAZE_64_PCREL
 3

	)

3610 
	#R_MICROBLAZE_32_PCREL_LO
 4

	)

3611 
	#R_MICROBLAZE_64
 5

	)

3612 
	#R_MICROBLAZE_32_LO
 6

	)

3613 
	#R_MICROBLAZE_SRO32
 7

	)

3614 
	#R_MICROBLAZE_SRW32
 8

	)

3615 
	#R_MICROBLAZE_64_NONE
 9

	)

3616 
	#R_MICROBLAZE_32_SYM_OP_SYM
 10

	)

3617 
	#R_MICROBLAZE_GNU_VTINHERIT
 11

	)

3618 
	#R_MICROBLAZE_GNU_VTENTRY
 12

	)

3619 
	#R_MICROBLAZE_GOTPC_64
 13

	)

3620 
	#R_MICROBLAZE_GOT_64
 14

	)

3621 
	#R_MICROBLAZE_PLT_64
 15

	)

3622 
	#R_MICROBLAZE_REL
 16

	)

3623 
	#R_MICROBLAZE_JUMP_SLOT
 17

	)

3624 
	#R_MICROBLAZE_GLOB_DAT
 18

	)

3625 
	#R_MICROBLAZE_GOTOFF_64
 19

	)

3626 
	#R_MICROBLAZE_GOTOFF_32
 20

	)

3627 
	#R_MICROBLAZE_COPY
 21

	)

3628 
	#R_MICROBLAZE_TLS
 22

	)

3629 
	#R_MICROBLAZE_TLSGD
 23

	)

3630 
	#R_MICROBLAZE_TLSLD
 24

	)

3631 
	#R_MICROBLAZE_TLSDTPMOD32
 25

	)

3632 
	#R_MICROBLAZE_TLSDTPREL32
 26

	)

3633 
	#R_MICROBLAZE_TLSDTPREL64
 27

	)

3634 
	#R_MICROBLAZE_TLSGOTTPREL32
 28

	)

3635 
	#R_MICROBLAZE_TLSTPREL32
 29

	)

3638 
	#DT_NIOS2_GP
 0x70000002

	)

3641 
	#R_NIOS2_NONE
 0

	)

3642 
	#R_NIOS2_S16
 1

	)

3643 
	#R_NIOS2_U16
 2

	)

3644 
	#R_NIOS2_PCREL16
 3

	)

3645 
	#R_NIOS2_CALL26
 4

	)

3646 
	#R_NIOS2_IMM5
 5

	)

3647 
	#R_NIOS2_CACHE_OPX
 6

	)

3648 
	#R_NIOS2_IMM6
 7

	)

3649 
	#R_NIOS2_IMM8
 8

	)

3650 
	#R_NIOS2_HI16
 9

	)

3651 
	#R_NIOS2_LO16
 10

	)

3652 
	#R_NIOS2_HIADJ16
 11

	)

3653 
	#R_NIOS2_BFD_RELOC_32
 12

	)

3654 
	#R_NIOS2_BFD_RELOC_16
 13

	)

3655 
	#R_NIOS2_BFD_RELOC_8
 14

	)

3656 
	#R_NIOS2_GPREL
 15

	)

3657 
	#R_NIOS2_GNU_VTINHERIT
 16

	)

3658 
	#R_NIOS2_GNU_VTENTRY
 17

	)

3659 
	#R_NIOS2_UJMP
 18

	)

3660 
	#R_NIOS2_CJMP
 19

	)

3661 
	#R_NIOS2_CALLR
 20

	)

3662 
	#R_NIOS2_ALIGN
 21

	)

3664 
	#R_NIOS2_GOT16
 22

	)

3665 
	#R_NIOS2_CALL16
 23

	)

3666 
	#R_NIOS2_GOTOFF_LO
 24

	)

3667 
	#R_NIOS2_GOTOFF_HA
 25

	)

3668 
	#R_NIOS2_PCREL_LO
 26

	)

3669 
	#R_NIOS2_PCREL_HA
 27

	)

3670 
	#R_NIOS2_TLS_GD16
 28

	)

3671 
	#R_NIOS2_TLS_LDM16
 29

	)

3672 
	#R_NIOS2_TLS_LDO16
 30

	)

3673 
	#R_NIOS2_TLS_IE16
 31

	)

3674 
	#R_NIOS2_TLS_LE16
 32

	)

3675 
	#R_NIOS2_TLS_DTPMOD
 33

	)

3676 
	#R_NIOS2_TLS_DTPREL
 34

	)

3677 
	#R_NIOS2_TLS_TPREL
 35

	)

3678 
	#R_NIOS2_COPY
 36

	)

3679 
	#R_NIOS2_GLOB_DAT
 37

	)

3680 
	#R_NIOS2_JUMP_SLOT
 38

	)

3681 
	#R_NIOS2_RELATIVE
 39

	)

3682 
	#R_NIOS2_GOTOFF
 40

	)

3683 
	#R_NIOS2_CALL26_NOAT
 41

	)

3684 
	#R_NIOS2_GOT_LO
 42

	)

3685 
	#R_NIOS2_GOT_HA
 43

	)

3686 
	#R_NIOS2_CALL_LO
 44

	)

3687 
	#R_NIOS2_CALL_HA
 45

	)

3690 
	#R_TILEPRO_NONE
 0

	)

3691 
	#R_TILEPRO_32
 1

	)

3692 
	#R_TILEPRO_16
 2

	)

3693 
	#R_TILEPRO_8
 3

	)

3694 
	#R_TILEPRO_32_PCREL
 4

	)

3695 
	#R_TILEPRO_16_PCREL
 5

	)

3696 
	#R_TILEPRO_8_PCREL
 6

	)

3697 
	#R_TILEPRO_LO16
 7

	)

3698 
	#R_TILEPRO_HI16
 8

	)

3699 
	#R_TILEPRO_HA16
 9

	)

3700 
	#R_TILEPRO_COPY
 10

	)

3701 
	#R_TILEPRO_GLOB_DAT
 11

	)

3702 
	#R_TILEPRO_JMP_SLOT
 12

	)

3703 
	#R_TILEPRO_RELATIVE
 13

	)

3704 
	#R_TILEPRO_BROFF_X1
 14

	)

3705 
	#R_TILEPRO_JOFFLONG_X1
 15

	)

3706 
	#R_TILEPRO_JOFFLONG_X1_PLT
 16

	)

3707 
	#R_TILEPRO_IMM8_X0
 17

	)

3708 
	#R_TILEPRO_IMM8_Y0
 18

	)

3709 
	#R_TILEPRO_IMM8_X1
 19

	)

3710 
	#R_TILEPRO_IMM8_Y1
 20

	)

3711 
	#R_TILEPRO_MT_IMM15_X1
 21

	)

3712 
	#R_TILEPRO_MF_IMM15_X1
 22

	)

3713 
	#R_TILEPRO_IMM16_X0
 23

	)

3714 
	#R_TILEPRO_IMM16_X1
 24

	)

3715 
	#R_TILEPRO_IMM16_X0_LO
 25

	)

3716 
	#R_TILEPRO_IMM16_X1_LO
 26

	)

3717 
	#R_TILEPRO_IMM16_X0_HI
 27

	)

3718 
	#R_TILEPRO_IMM16_X1_HI
 28

	)

3719 
	#R_TILEPRO_IMM16_X0_HA
 29

	)

3720 
	#R_TILEPRO_IMM16_X1_HA
 30

	)

3721 
	#R_TILEPRO_IMM16_X0_PCREL
 31

	)

3722 
	#R_TILEPRO_IMM16_X1_PCREL
 32

	)

3723 
	#R_TILEPRO_IMM16_X0_LO_PCREL
 33

	)

3724 
	#R_TILEPRO_IMM16_X1_LO_PCREL
 34

	)

3725 
	#R_TILEPRO_IMM16_X0_HI_PCREL
 35

	)

3726 
	#R_TILEPRO_IMM16_X1_HI_PCREL
 36

	)

3727 
	#R_TILEPRO_IMM16_X0_HA_PCREL
 37

	)

3728 
	#R_TILEPRO_IMM16_X1_HA_PCREL
 38

	)

3729 
	#R_TILEPRO_IMM16_X0_GOT
 39

	)

3730 
	#R_TILEPRO_IMM16_X1_GOT
 40

	)

3731 
	#R_TILEPRO_IMM16_X0_GOT_LO
 41

	)

3732 
	#R_TILEPRO_IMM16_X1_GOT_LO
 42

	)

3733 
	#R_TILEPRO_IMM16_X0_GOT_HI
 43

	)

3734 
	#R_TILEPRO_IMM16_X1_GOT_HI
 44

	)

3735 
	#R_TILEPRO_IMM16_X0_GOT_HA
 45

	)

3736 
	#R_TILEPRO_IMM16_X1_GOT_HA
 46

	)

3737 
	#R_TILEPRO_MMSTART_X0
 47

	)

3738 
	#R_TILEPRO_MMEND_X0
 48

	)

3739 
	#R_TILEPRO_MMSTART_X1
 49

	)

3740 
	#R_TILEPRO_MMEND_X1
 50

	)

3741 
	#R_TILEPRO_SHAMT_X0
 51

	)

3742 
	#R_TILEPRO_SHAMT_X1
 52

	)

3743 
	#R_TILEPRO_SHAMT_Y0
 53

	)

3744 
	#R_TILEPRO_SHAMT_Y1
 54

	)

3745 
	#R_TILEPRO_DEST_IMM8_X1
 55

	)

3747 
	#R_TILEPRO_TLS_GD_CALL
 60

	)

3748 
	#R_TILEPRO_IMM8_X0_TLS_GD_ADD
 61

	)

3749 
	#R_TILEPRO_IMM8_X1_TLS_GD_ADD
 62

	)

3750 
	#R_TILEPRO_IMM8_Y0_TLS_GD_ADD
 63

	)

3751 
	#R_TILEPRO_IMM8_Y1_TLS_GD_ADD
 64

	)

3752 
	#R_TILEPRO_TLS_IE_LOAD
 65

	)

3753 
	#R_TILEPRO_IMM16_X0_TLS_GD
 66

	)

3754 
	#R_TILEPRO_IMM16_X1_TLS_GD
 67

	)

3755 
	#R_TILEPRO_IMM16_X0_TLS_GD_LO
 68

	)

3756 
	#R_TILEPRO_IMM16_X1_TLS_GD_LO
 69

	)

3757 
	#R_TILEPRO_IMM16_X0_TLS_GD_HI
 70

	)

3758 
	#R_TILEPRO_IMM16_X1_TLS_GD_HI
 71

	)

3759 
	#R_TILEPRO_IMM16_X0_TLS_GD_HA
 72

	)

3760 
	#R_TILEPRO_IMM16_X1_TLS_GD_HA
 73

	)

3761 
	#R_TILEPRO_IMM16_X0_TLS_IE
 74

	)

3762 
	#R_TILEPRO_IMM16_X1_TLS_IE
 75

	)

3763 
	#R_TILEPRO_IMM16_X0_TLS_IE_LO
 76

	)

3764 
	#R_TILEPRO_IMM16_X1_TLS_IE_LO
 77

	)

3765 
	#R_TILEPRO_IMM16_X0_TLS_IE_HI
 78

	)

3766 
	#R_TILEPRO_IMM16_X1_TLS_IE_HI
 79

	)

3767 
	#R_TILEPRO_IMM16_X0_TLS_IE_HA
 80

	)

3768 
	#R_TILEPRO_IMM16_X1_TLS_IE_HA
 81

	)

3769 
	#R_TILEPRO_TLS_DTPMOD32
 82

	)

3770 
	#R_TILEPRO_TLS_DTPOFF32
 83

	)

3771 
	#R_TILEPRO_TLS_TPOFF32
 84

	)

3772 
	#R_TILEPRO_IMM16_X0_TLS_LE
 85

	)

3773 
	#R_TILEPRO_IMM16_X1_TLS_LE
 86

	)

3774 
	#R_TILEPRO_IMM16_X0_TLS_LE_LO
 87

	)

3775 
	#R_TILEPRO_IMM16_X1_TLS_LE_LO
 88

	)

3776 
	#R_TILEPRO_IMM16_X0_TLS_LE_HI
 89

	)

3777 
	#R_TILEPRO_IMM16_X1_TLS_LE_HI
 90

	)

3778 
	#R_TILEPRO_IMM16_X0_TLS_LE_HA
 91

	)

3779 
	#R_TILEPRO_IMM16_X1_TLS_LE_HA
 92

	)

3781 
	#R_TILEPRO_GNU_VTINHERIT
 128

	)

3782 
	#R_TILEPRO_GNU_VTENTRY
 129

	)

3784 
	#R_TILEPRO_NUM
 130

	)

3788 
	#R_TILEGX_NONE
 0

	)

3789 
	#R_TILEGX_64
 1

	)

3790 
	#R_TILEGX_32
 2

	)

3791 
	#R_TILEGX_16
 3

	)

3792 
	#R_TILEGX_8
 4

	)

3793 
	#R_TILEGX_64_PCREL
 5

	)

3794 
	#R_TILEGX_32_PCREL
 6

	)

3795 
	#R_TILEGX_16_PCREL
 7

	)

3796 
	#R_TILEGX_8_PCREL
 8

	)

3797 
	#R_TILEGX_HW0
 9

	)

3798 
	#R_TILEGX_HW1
 10

	)

3799 
	#R_TILEGX_HW2
 11

	)

3800 
	#R_TILEGX_HW3
 12

	)

3801 
	#R_TILEGX_HW0_LAST
 13

	)

3802 
	#R_TILEGX_HW1_LAST
 14

	)

3803 
	#R_TILEGX_HW2_LAST
 15

	)

3804 
	#R_TILEGX_COPY
 16

	)

3805 
	#R_TILEGX_GLOB_DAT
 17

	)

3806 
	#R_TILEGX_JMP_SLOT
 18

	)

3807 
	#R_TILEGX_RELATIVE
 19

	)

3808 
	#R_TILEGX_BROFF_X1
 20

	)

3809 
	#R_TILEGX_JUMPOFF_X1
 21

	)

3810 
	#R_TILEGX_JUMPOFF_X1_PLT
 22

	)

3811 
	#R_TILEGX_IMM8_X0
 23

	)

3812 
	#R_TILEGX_IMM8_Y0
 24

	)

3813 
	#R_TILEGX_IMM8_X1
 25

	)

3814 
	#R_TILEGX_IMM8_Y1
 26

	)

3815 
	#R_TILEGX_DEST_IMM8_X1
 27

	)

3816 
	#R_TILEGX_MT_IMM14_X1
 28

	)

3817 
	#R_TILEGX_MF_IMM14_X1
 29

	)

3818 
	#R_TILEGX_MMSTART_X0
 30

	)

3819 
	#R_TILEGX_MMEND_X0
 31

	)

3820 
	#R_TILEGX_SHAMT_X0
 32

	)

3821 
	#R_TILEGX_SHAMT_X1
 33

	)

3822 
	#R_TILEGX_SHAMT_Y0
 34

	)

3823 
	#R_TILEGX_SHAMT_Y1
 35

	)

3824 
	#R_TILEGX_IMM16_X0_HW0
 36

	)

3825 
	#R_TILEGX_IMM16_X1_HW0
 37

	)

3826 
	#R_TILEGX_IMM16_X0_HW1
 38

	)

3827 
	#R_TILEGX_IMM16_X1_HW1
 39

	)

3828 
	#R_TILEGX_IMM16_X0_HW2
 40

	)

3829 
	#R_TILEGX_IMM16_X1_HW2
 41

	)

3830 
	#R_TILEGX_IMM16_X0_HW3
 42

	)

3831 
	#R_TILEGX_IMM16_X1_HW3
 43

	)

3832 
	#R_TILEGX_IMM16_X0_HW0_LAST
 44

	)

3833 
	#R_TILEGX_IMM16_X1_HW0_LAST
 45

	)

3834 
	#R_TILEGX_IMM16_X0_HW1_LAST
 46

	)

3835 
	#R_TILEGX_IMM16_X1_HW1_LAST
 47

	)

3836 
	#R_TILEGX_IMM16_X0_HW2_LAST
 48

	)

3837 
	#R_TILEGX_IMM16_X1_HW2_LAST
 49

	)

3838 
	#R_TILEGX_IMM16_X0_HW0_PCREL
 50

	)

3839 
	#R_TILEGX_IMM16_X1_HW0_PCREL
 51

	)

3840 
	#R_TILEGX_IMM16_X0_HW1_PCREL
 52

	)

3841 
	#R_TILEGX_IMM16_X1_HW1_PCREL
 53

	)

3842 
	#R_TILEGX_IMM16_X0_HW2_PCREL
 54

	)

3843 
	#R_TILEGX_IMM16_X1_HW2_PCREL
 55

	)

3844 
	#R_TILEGX_IMM16_X0_HW3_PCREL
 56

	)

3845 
	#R_TILEGX_IMM16_X1_HW3_PCREL
 57

	)

3846 
	#R_TILEGX_IMM16_X0_HW0_LAST_PCREL
 58

	)

3847 
	#R_TILEGX_IMM16_X1_HW0_LAST_PCREL
 59

	)

3848 
	#R_TILEGX_IMM16_X0_HW1_LAST_PCREL
 60

	)

3849 
	#R_TILEGX_IMM16_X1_HW1_LAST_PCREL
 61

	)

3850 
	#R_TILEGX_IMM16_X0_HW2_LAST_PCREL
 62

	)

3851 
	#R_TILEGX_IMM16_X1_HW2_LAST_PCREL
 63

	)

3852 
	#R_TILEGX_IMM16_X0_HW0_GOT
 64

	)

3853 
	#R_TILEGX_IMM16_X1_HW0_GOT
 65

	)

3854 
	#R_TILEGX_IMM16_X0_HW0_PLT_PCREL
 66

	)

3855 
	#R_TILEGX_IMM16_X1_HW0_PLT_PCREL
 67

	)

3856 
	#R_TILEGX_IMM16_X0_HW1_PLT_PCREL
 68

	)

3857 
	#R_TILEGX_IMM16_X1_HW1_PLT_PCREL
 69

	)

3858 
	#R_TILEGX_IMM16_X0_HW2_PLT_PCREL
 70

	)

3859 
	#R_TILEGX_IMM16_X1_HW2_PLT_PCREL
 71

	)

3860 
	#R_TILEGX_IMM16_X0_HW0_LAST_GOT
 72

	)

3861 
	#R_TILEGX_IMM16_X1_HW0_LAST_GOT
 73

	)

3862 
	#R_TILEGX_IMM16_X0_HW1_LAST_GOT
 74

	)

3863 
	#R_TILEGX_IMM16_X1_HW1_LAST_GOT
 75

	)

3864 
	#R_TILEGX_IMM16_X0_HW3_PLT_PCREL
 76

	)

3865 
	#R_TILEGX_IMM16_X1_HW3_PLT_PCREL
 77

	)

3866 
	#R_TILEGX_IMM16_X0_HW0_TLS_GD
 78

	)

3867 
	#R_TILEGX_IMM16_X1_HW0_TLS_GD
 79

	)

3868 
	#R_TILEGX_IMM16_X0_HW0_TLS_LE
 80

	)

3869 
	#R_TILEGX_IMM16_X1_HW0_TLS_LE
 81

	)

3870 
	#R_TILEGX_IMM16_X0_HW0_LAST_TLS_LE
 82

	)

3871 
	#R_TILEGX_IMM16_X1_HW0_LAST_TLS_LE
 83

	)

3872 
	#R_TILEGX_IMM16_X0_HW1_LAST_TLS_LE
 84

	)

3873 
	#R_TILEGX_IMM16_X1_HW1_LAST_TLS_LE
 85

	)

3874 
	#R_TILEGX_IMM16_X0_HW0_LAST_TLS_GD
 86

	)

3875 
	#R_TILEGX_IMM16_X1_HW0_LAST_TLS_GD
 87

	)

3876 
	#R_TILEGX_IMM16_X0_HW1_LAST_TLS_GD
 88

	)

3877 
	#R_TILEGX_IMM16_X1_HW1_LAST_TLS_GD
 89

	)

3879 
	#R_TILEGX_IMM16_X0_HW0_TLS_IE
 92

	)

3880 
	#R_TILEGX_IMM16_X1_HW0_TLS_IE
 93

	)

3881 
	#R_TILEGX_IMM16_X0_HW0_LAST_PLT_PCREL
 94

	)

3882 
	#R_TILEGX_IMM16_X1_HW0_LAST_PLT_PCREL
 95

	)

3883 
	#R_TILEGX_IMM16_X0_HW1_LAST_PLT_PCREL
 96

	)

3884 
	#R_TILEGX_IMM16_X1_HW1_LAST_PLT_PCREL
 97

	)

3885 
	#R_TILEGX_IMM16_X0_HW2_LAST_PLT_PCREL
 98

	)

3886 
	#R_TILEGX_IMM16_X1_HW2_LAST_PLT_PCREL
 99

	)

3887 
	#R_TILEGX_IMM16_X0_HW0_LAST_TLS_IE
 100

	)

3888 
	#R_TILEGX_IMM16_X1_HW0_LAST_TLS_IE
 101

	)

3889 
	#R_TILEGX_IMM16_X0_HW1_LAST_TLS_IE
 102

	)

3890 
	#R_TILEGX_IMM16_X1_HW1_LAST_TLS_IE
 103

	)

3892 
	#R_TILEGX_TLS_DTPMOD64
 106

	)

3893 
	#R_TILEGX_TLS_DTPOFF64
 107

	)

3894 
	#R_TILEGX_TLS_TPOFF64
 108

	)

3895 
	#R_TILEGX_TLS_DTPMOD32
 109

	)

3896 
	#R_TILEGX_TLS_DTPOFF32
 110

	)

3897 
	#R_TILEGX_TLS_TPOFF32
 111

	)

3898 
	#R_TILEGX_TLS_GD_CALL
 112

	)

3899 
	#R_TILEGX_IMM8_X0_TLS_GD_ADD
 113

	)

3900 
	#R_TILEGX_IMM8_X1_TLS_GD_ADD
 114

	)

3901 
	#R_TILEGX_IMM8_Y0_TLS_GD_ADD
 115

	)

3902 
	#R_TILEGX_IMM8_Y1_TLS_GD_ADD
 116

	)

3903 
	#R_TILEGX_TLS_IE_LOAD
 117

	)

3904 
	#R_TILEGX_IMM8_X0_TLS_ADD
 118

	)

3905 
	#R_TILEGX_IMM8_X1_TLS_ADD
 119

	)

3906 
	#R_TILEGX_IMM8_Y0_TLS_ADD
 120

	)

3907 
	#R_TILEGX_IMM8_Y1_TLS_ADD
 121

	)

3909 
	#R_TILEGX_GNU_VTINHERIT
 128

	)

3910 
	#R_TILEGX_GNU_VTENTRY
 129

	)

3912 
	#R_TILEGX_NUM
 130

	)

3915 
	#EF_RISCV_RVC
 0x0001

	)

3916 
	#EF_RISCV_FLOAT_ABI
 0x0006

	)

3917 
	#EF_RISCV_FLOAT_ABI_SOFT
 0x0000

	)

3918 
	#EF_RISCV_FLOAT_ABI_SINGLE
 0x0002

	)

3919 
	#EF_RISCV_FLOAT_ABI_DOUBLE
 0x0004

	)

3920 
	#EF_RISCV_FLOAT_ABI_QUAD
 0x0006

	)

3923 
	#R_RISCV_NONE
 0

	)

3924 
	#R_RISCV_32
 1

	)

3925 
	#R_RISCV_64
 2

	)

3926 
	#R_RISCV_RELATIVE
 3

	)

3927 
	#R_RISCV_COPY
 4

	)

3928 
	#R_RISCV_JUMP_SLOT
 5

	)

3929 
	#R_RISCV_TLS_DTPMOD32
 6

	)

3930 
	#R_RISCV_TLS_DTPMOD64
 7

	)

3931 
	#R_RISCV_TLS_DTPREL32
 8

	)

3932 
	#R_RISCV_TLS_DTPREL64
 9

	)

3933 
	#R_RISCV_TLS_TPREL32
 10

	)

3934 
	#R_RISCV_TLS_TPREL64
 11

	)

3935 
	#R_RISCV_BRANCH
 16

	)

3936 
	#R_RISCV_JAL
 17

	)

3937 
	#R_RISCV_CALL
 18

	)

3938 
	#R_RISCV_CALL_PLT
 19

	)

3939 
	#R_RISCV_GOT_HI20
 20

	)

3940 
	#R_RISCV_TLS_GOT_HI20
 21

	)

3941 
	#R_RISCV_TLS_GD_HI20
 22

	)

3942 
	#R_RISCV_PCREL_HI20
 23

	)

3943 
	#R_RISCV_PCREL_LO12_I
 24

	)

3944 
	#R_RISCV_PCREL_LO12_S
 25

	)

3945 
	#R_RISCV_HI20
 26

	)

3946 
	#R_RISCV_LO12_I
 27

	)

3947 
	#R_RISCV_LO12_S
 28

	)

3948 
	#R_RISCV_TPREL_HI20
 29

	)

3949 
	#R_RISCV_TPREL_LO12_I
 30

	)

3950 
	#R_RISCV_TPREL_LO12_S
 31

	)

3951 
	#R_RISCV_TPREL_ADD
 32

	)

3952 
	#R_RISCV_ADD8
 33

	)

3953 
	#R_RISCV_ADD16
 34

	)

3954 
	#R_RISCV_ADD32
 35

	)

3955 
	#R_RISCV_ADD64
 36

	)

3956 
	#R_RISCV_SUB8
 37

	)

3957 
	#R_RISCV_SUB16
 38

	)

3958 
	#R_RISCV_SUB32
 39

	)

3959 
	#R_RISCV_SUB64
 40

	)

3960 
	#R_RISCV_GNU_VTINHERIT
 41

	)

3961 
	#R_RISCV_GNU_VTENTRY
 42

	)

3962 
	#R_RISCV_ALIGN
 43

	)

3963 
	#R_RISCV_RVC_BRANCH
 44

	)

3964 
	#R_RISCV_RVC_JUMP
 45

	)

3965 
	#R_RISCV_RVC_LUI
 46

	)

3966 
	#R_RISCV_GPREL_I
 47

	)

3967 
	#R_RISCV_GPREL_S
 48

	)

3968 
	#R_RISCV_TPREL_I
 49

	)

3969 
	#R_RISCV_TPREL_S
 50

	)

3970 
	#R_RISCV_RELAX
 51

	)

3971 
	#R_RISCV_SUB6
 52

	)

3972 
	#R_RISCV_SET6
 53

	)

3973 
	#R_RISCV_SET8
 54

	)

3974 
	#R_RISCV_SET16
 55

	)

3975 
	#R_RISCV_SET32
 56

	)

3976 
	#R_RISCV_32_PCREL
 57

	)

3977 
	#R_RISCV_IRELATIVE
 58

	)

3979 
	#R_RISCV_NUM
 59

	)

3983 
	#R_BPF_NONE
 0

	)

3984 
	#R_BPF_64_64
 1

	)

3985 
	#R_BPF_64_32
 10

	)

3989 
	#R_METAG_HIADDR16
 0

	)

3990 
	#R_METAG_LOADDR16
 1

	)

3991 
	#R_METAG_ADDR32
 2

	)

3992 
	#R_METAG_NONE
 3

	)

3993 
	#R_METAG_RELBRANCH
 4

	)

3994 
	#R_METAG_GETSETOFF
 5

	)

3997 
	#R_METAG_REG32OP1
 6

	)

3998 
	#R_METAG_REG32OP2
 7

	)

3999 
	#R_METAG_REG32OP3
 8

	)

4000 
	#R_METAG_REG16OP1
 9

	)

4001 
	#R_METAG_REG16OP2
 10

	)

4002 
	#R_METAG_REG16OP3
 11

	)

4003 
	#R_METAG_REG32OP4
 12

	)

4005 
	#R_METAG_HIOG
 13

	)

4006 
	#R_METAG_LOOG
 14

	)

4008 
	#R_METAG_REL8
 15

	)

4009 
	#R_METAG_REL16
 16

	)

4012 
	#R_METAG_GNU_VTINHERIT
 30

	)

4013 
	#R_METAG_GNU_VTENTRY
 31

	)

4016 
	#R_METAG_HI16_GOTOFF
 32

	)

4017 
	#R_METAG_LO16_GOTOFF
 33

	)

4018 
	#R_METAG_GETSET_GOTOFF
 34

	)

4019 
	#R_METAG_GETSET_GOT
 35

	)

4020 
	#R_METAG_HI16_GOTPC
 36

	)

4021 
	#R_METAG_LO16_GOTPC
 37

	)

4022 
	#R_METAG_HI16_PLT
 38

	)

4023 
	#R_METAG_LO16_PLT
 39

	)

4024 
	#R_METAG_RELBRANCH_PLT
 40

	)

4025 
	#R_METAG_GOTOFF
 41

	)

4026 
	#R_METAG_PLT
 42

	)

4027 
	#R_METAG_COPY
 43

	)

4028 
	#R_METAG_JMP_SLOT
 44

	)

4029 
	#R_METAG_RELATIVE
 45

	)

4030 
	#R_METAG_GLOB_DAT
 46

	)

4033 
	#R_METAG_TLS_GD
 47

	)

4034 
	#R_METAG_TLS_LDM
 48

	)

4035 
	#R_METAG_TLS_LDO_HI16
 49

	)

4036 
	#R_METAG_TLS_LDO_LO16
 50

	)

4037 
	#R_METAG_TLS_LDO
 51

	)

4038 
	#R_METAG_TLS_IE
 52

	)

4039 
	#R_METAG_TLS_IENONPIC
 53

	)

4040 
	#R_METAG_TLS_IENONPIC_HI16
 54

	)

4041 
	#R_METAG_TLS_IENONPIC_LO16
 55

	)

4042 
	#R_METAG_TLS_TPOFF
 56

	)

4043 
	#R_METAG_TLS_DTPMOD
 57

	)

4044 
	#R_METAG_TLS_DTPOFF
 58

	)

4045 
	#R_METAG_TLS_LE
 59

	)

4046 
	#R_METAG_TLS_LE_HI16
 60

	)

4047 
	#R_METAG_TLS_LE_LO16
 61

	)

4050 
	#R_NDS32_NONE
 0

	)

4051 
	#R_NDS32_32_RELA
 20

	)

4052 
	#R_NDS32_COPY
 39

	)

4053 
	#R_NDS32_GLOB_DAT
 40

	)

4054 
	#R_NDS32_JMP_SLOT
 41

	)

4055 
	#R_NDS32_RELATIVE
 42

	)

4056 
	#R_NDS32_TLS_TPOFF
 102

	)

4057 
	#R_NDS32_TLS_DESC
 119

	)

4060 
	#R_ARC_NONE
 0x0

	)

4061 
	#R_ARC_8
 0x1

	)

4062 
	#R_ARC_16
 0x2

	)

4063 
	#R_ARC_24
 0x3

	)

4064 
	#R_ARC_32
 0x4

	)

4065 
	#R_ARC_B26
 0x5

	)

4066 
	#R_ARC_B22_PCREL
 0x6

	)

4067 
	#R_ARC_H30
 0x7

	)

4068 
	#R_ARC_N8
 0x8

	)

4069 
	#R_ARC_N16
 0x9

	)

4070 
	#R_ARC_N24
 0xA

	)

4071 
	#R_ARC_N32
 0xB

	)

4072 
	#R_ARC_SDA
 0xC

	)

4073 
	#R_ARC_SECTOFF
 0xD

	)

4074 
	#R_ARC_S21H_PCREL
 0xE

	)

4075 
	#R_ARC_S21W_PCREL
 0xF

	)

4076 
	#R_ARC_S25H_PCREL
 0x10

	)

4077 
	#R_ARC_S25W_PCREL
 0x11

	)

4078 
	#R_ARC_SDA32
 0x12

	)

4079 
	#R_ARC_SDA_LDST
 0x13

	)

4080 
	#R_ARC_SDA_LDST1
 0x14

	)

4081 
	#R_ARC_SDA_LDST2
 0x15

	)

4082 
	#R_ARC_SDA16_LD
 0x16

	)

4083 
	#R_ARC_SDA16_LD1
 0x17

	)

4084 
	#R_ARC_SDA16_LD2
 0x18

	)

4085 
	#R_ARC_S13_PCREL
 0x19

	)

4086 
	#R_ARC_W
 0x1A

	)

4087 
	#R_ARC_32_ME
 0x1B

	)

4088 
	#R_ARC_N32_ME
 0x1C

	)

4089 
	#R_ARC_SECTOFF_ME
 0x1D

	)

4090 
	#R_ARC_SDA32_ME
 0x1E

	)

4091 
	#R_ARC_W_ME
 0x1F

	)

4092 
	#R_ARC_H30_ME
 0x20

	)

4093 
	#R_ARC_SECTOFF_U8
 0x21

	)

4094 
	#R_ARC_SECTOFF_S9
 0x22

	)

4095 
	#R_AC_SECTOFF_U8
 0x23

	)

4096 
	#R_AC_SECTOFF_U8_1
 0x24

	)

4097 
	#R_AC_SECTOFF_U8_2
 0x25

	)

4098 
	#R_AC_SECTOFF_S9
 0x26

	)

4099 
	#R_AC_SECTOFF_S9_1
 0x27

	)

4100 
	#R_AC_SECTOFF_S9_2
 0x28

	)

4101 
	#R_ARC_SECTOFF_ME_1
 0x29

	)

4102 
	#R_ARC_SECTOFF_ME_2
 0x2A

	)

4103 
	#R_ARC_SECTOFF_1
 0x2B

	)

4104 
	#R_ARC_SECTOFF_2
 0x2C

	)

4105 
	#R_ARC_PC32
 0x32

	)

4106 
	#R_ARC_GOTPC32
 0x33

	)

4107 
	#R_ARC_PLT32
 0x34

	)

4108 
	#R_ARC_COPY
 0x35

	)

4109 
	#R_ARC_GLOB_DAT
 0x36

	)

4110 
	#R_ARC_JUMP_SLOT
 0x37

	)

4111 
	#R_ARC_RELATIVE
 0x38

	)

4112 
	#R_ARC_GOTOFF
 0x39

	)

4113 
	#R_ARC_GOTPC
 0x3A

	)

4114 
	#R_ARC_GOT32
 0x3B

	)

4116 
	#R_ARC_TLS_DTPMOD
 0x42

	)

4117 
	#R_ARC_TLS_DTPOFF
 0x43

	)

4118 
	#R_ARC_TLS_TPOFF
 0x44

	)

4119 
	#R_ARC_TLS_GD_GOT
 0x45

	)

4120 
	#R_ARC_TLS_GD_LD
 0x46

	)

4121 
	#R_ARC_TLS_GD_CALL
 0x47

	)

4122 
	#R_ARC_TLS_IE_GOT
 0x48

	)

4123 
	#R_ARC_TLS_DTPOFF_S9
 0x4a

	)

4124 
	#R_ARC_TLS_LE_S9
 0x4a

	)

4125 
	#R_ARC_TLS_LE_32
 0x4b

	)

4128 
	#R_OR1K_NONE
 0

	)

4129 
	#R_OR1K_32
 1

	)

4130 
	#R_OR1K_16
 2

	)

4131 
	#R_OR1K_8
 3

	)

4132 
	#R_OR1K_LO_16_IN_INSN
 4

	)

4133 
	#R_OR1K_HI_16_IN_INSN
 5

	)

4134 
	#R_OR1K_INSN_REL_26
 6

	)

4135 
	#R_OR1K_GNU_VTENTRY
 7

	)

4136 
	#R_OR1K_GNU_VTINHERIT
 8

	)

4137 
	#R_OR1K_32_PCREL
 9

	)

4138 
	#R_OR1K_16_PCREL
 10

	)

4139 
	#R_OR1K_8_PCREL
 11

	)

4140 
	#R_OR1K_GOTPC_HI16
 12

	)

4141 
	#R_OR1K_GOTPC_LO16
 13

	)

4142 
	#R_OR1K_GOT16
 14

	)

4143 
	#R_OR1K_PLT26
 15

	)

4144 
	#R_OR1K_GOTOFF_HI16
 16

	)

4145 
	#R_OR1K_GOTOFF_LO16
 17

	)

4146 
	#R_OR1K_COPY
 18

	)

4147 
	#R_OR1K_GLOB_DAT
 19

	)

4148 
	#R_OR1K_JMP_SLOT
 20

	)

4149 
	#R_OR1K_RELATIVE
 21

	)

4150 
	#R_OR1K_TLS_GD_HI16
 22

	)

4151 
	#R_OR1K_TLS_GD_LO16
 23

	)

4152 
	#R_OR1K_TLS_LDM_HI16
 24

	)

4153 
	#R_OR1K_TLS_LDM_LO16
 25

	)

4154 
	#R_OR1K_TLS_LDO_HI16
 26

	)

4155 
	#R_OR1K_TLS_LDO_LO16
 27

	)

4156 
	#R_OR1K_TLS_IE_HI16
 28

	)

4157 
	#R_OR1K_TLS_IE_LO16
 29

	)

4158 
	#R_OR1K_TLS_LE_HI16
 30

	)

4159 
	#R_OR1K_TLS_LE_LO16
 31

	)

4160 
	#R_OR1K_TLS_TPOFF
 32

	)

4161 
	#R_OR1K_TLS_DTPOFF
 33

	)

4162 
	#R_OR1K_TLS_DTPMOD
 34

	)

	@/usr/include/endian.h

18 #i‚def 
_ENDIAN_H


19 
	#_ENDIAN_H
 1

	)

21 
	~<„©uªs.h
>

24 
	~<bôs/ídün.h
>

26 #ifde‡
__USE_MISC


27 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

28 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

29 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

30 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

33 #i‡
deföed
 
__USE_MISC
 && !deföed 
__ASSEMBLER__


35 
	~<bôs/byãsw≠.h
>

36 
	~<bôs/uöä-idítôy.h
>

38 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


39 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

40 
	#htﬁe16
(
x
Ë
	`__uöt16_idítôy
 (x)

	)

41 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

42 
	#À16toh
(
x
Ë
	`__uöt16_idítôy
 (x)

	)

44 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

45 
	#htﬁe32
(
x
Ë
	`__uöt32_idítôy
 (x)

	)

46 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

47 
	#À32toh
(
x
Ë
	`__uöt32_idítôy
 (x)

	)

49 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

50 
	#htﬁe64
(
x
Ë
	`__uöt64_idítôy
 (x)

	)

51 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

52 
	#À64toh
(
x
Ë
	`__uöt64_idítôy
 (x)

	)

55 
	#htobe16
(
x
Ë
	`__uöt16_idítôy
 (x)

	)

56 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

57 
	#be16toh
(
x
Ë
	`__uöt16_idítôy
 (x)

	)

58 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

60 
	#htobe32
(
x
Ë
	`__uöt32_idítôy
 (x)

	)

61 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

62 
	#be32toh
(
x
Ë
	`__uöt32_idítôy
 (x)

	)

63 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

65 
	#htobe64
(
x
Ë
	`__uöt64_idítôy
 (x)

	)

66 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

67 
	#be64toh
(
x
Ë
	`__uöt64_idítôy
 (x)

	)

68 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/envz.h

19 #i‚de‡
_ENVZ_H


20 
	#_ENVZ_H
 1

	)

22 
	~<„©uªs.h
>

24 
	~<î∫o.h
>

28 
	~<¨gz.h
>

30 
__BEGIN_DECLS


33 *
	$ívz_íåy
 (c⁄° *
__ª°ri˘
 
__ívz
, 
size_t
 
__ívz_Àn
,

34 c⁄° *
__ª°ri˘
 
__«me
)

35 
__THROW
 
__©åibuã_puª__
;

39 *
	$ívz_gë
 (c⁄° *
__ª°ri˘
 
__ívz
, 
size_t
 
__ívz_Àn
,

40 c⁄° *
__ª°ri˘
 
__«me
)

41 
__THROW
 
__©åibuã_puª__
;

49 
îr‹_t
 
	$ívz_add
 (**
__ª°ri˘
 
__ívz
,

50 
size_t
 *
__ª°ri˘
 
__ívz_Àn
,

51 c⁄° *
__ª°ri˘
 
__«me
,

52 c⁄° *
__ª°ri˘
 
__vÆue
Ë
__THROW
;

57 
îr‹_t
 
	$ívz_mîge
 (**
__ª°ri˘
 
__ívz
,

58 
size_t
 *
__ª°ri˘
 
__ívz_Àn
,

59 c⁄° *
__ª°ri˘
 
__ívz2
,

60 
size_t
 
__ívz2_Àn
, 
__ovîride
Ë
__THROW
;

63 
	$ívz_ªmove
 (**
__ª°ri˘
 
__ívz
,

64 
size_t
 *
__ª°ri˘
 
__ívz_Àn
,

65 c⁄° *
__ª°ri˘
 
__«me
Ë
__THROW
;

68 
	$ívz_°rù
 (**
__ª°ri˘
 
__ívz
,

69 
size_t
 *
__ª°ri˘
 
__ívz_Àn
Ë
__THROW
;

71 
__END_DECLS


	@/usr/include/err.h

19 #i‚def 
_ERR_H


20 
	#_ERR_H
 1

	)

22 
	~<„©uªs.h
>

24 
	#__√ed___va_li°


	)

25 
	~<°d¨g.h
>

26 #i‚def 
__GNUC_VA_LIST


27 
	#__gnuc_va_li°
 *

	)

30 
__BEGIN_DECLS


34 
	$w¨n
 (c⁄° *
__f‹m©
, ...)

35 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 1, 2)));

36 
	$vw¨n
 (c⁄° *
__f‹m©
, 
__gnuc_va_li°
)

37 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 1, 0)));

40 
	$w¨nx
 (c⁄° *
__f‹m©
, ...)

41 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 1, 2)));

42 
	$vw¨nx
 (c⁄° *
__f‹m©
, 
__gnuc_va_li°
)

43 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 1, 0)));

46 
	$îr
 (
__°©us
, c⁄° *
__f‹m©
, ...)

47 
	`__©åibuã__
 ((
__n‹ëu∫__
, 
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

48 
	$vîr
 (
__°©us
, c⁄° *
__f‹m©
, 
__gnuc_va_li°
)

49 
	`__©åibuã__
 ((
__n‹ëu∫__
, 
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

50 
	$îrx
 (
__°©us
, c⁄° *
__f‹m©
, ...)

51 
	`__©åibuã__
 ((
__n‹ëu∫__
, 
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

52 
	$vîrx
 (
__°©us
, c⁄° *, 
__gnuc_va_li°
)

53 
	`__©åibuã__
 ((
__n‹ëu∫__
, 
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

55 
	~<bôs/Êﬂä.h
>

56 #i‡
deföed
 
__LDBL_COMPAT
 || 
__LDOUBLE_REDIRECTS_TO_FLOAT128_ABI
 == 1

57 
	~<bôs/îr-ldbl.h
>

60 
__END_DECLS


	@/usr/include/errno.h

22 #i‚def 
_ERRNO_H


23 
	#_ERRNO_H
 1

	)

25 
	~<„©uªs.h
>

28 
	~<bôs/î∫o.h
>

32 #i‚de‡
__ASSEMBLER__


34 
__BEGIN_DECLS


37 *
	$__î∫o_loˇti⁄
 (Ë
__THROW
 
__©åibuã_c⁄°__
;

38 
	#î∫o
 (*
	`__î∫o_loˇti⁄
 ())

	)

40 #ifde‡
__USE_GNU


45 *
¥ogøm_övoˇti⁄_«me
;

46 *
¥ogøm_övoˇti⁄_sh‹t_«me
;

48 
	~<bôs/ty≥s/îr‹_t.h
>

52 
__END_DECLS


	@/usr/include/error.h

19 #i‚de‡
_ERROR_H


20 
	#_ERROR_H
 1

	)

22 
	~<„©uªs.h
>

25 
__BEGIN_DECLS


31 
	$îr‹
 (
__°©us
, 
__î∫um
, c⁄° *
__f‹m©
, ...)

32 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

34 
	$îr‹_©_löe
 (
__°©us
, 
__î∫um
, c⁄° *
__‚ame
,

35 
__löío
, c⁄° *
__f‹m©
, ...)

36 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 5, 6)));

41 (*
îr‹_¥öt_¥og«me
) ();

44 
îr‹_mesßge_cou¡
;

48 
îr‹_⁄e_≥r_löe
;

50 
	~<bôs/Êﬂä.h
>

51 #i‡
deföed
 
__LDBL_COMPAT
 || 
__LDOUBLE_REDIRECTS_TO_FLOAT128_ABI
 == 1

52 
	~<bôs/îr‹-ldbl.h
>

58 #i‡
deföed
 
__exã∫_Æways_ölöe
 && deföed 
__va_¨g_∑ck


59 
	~<bôs/îr‹.h
>

63 
__END_DECLS


	@/usr/include/eti.h

36 #i‚de‡
NCURSES_ETI_H_ö˛


37 
	#NCURSES_ETI_H_ö˛
 1

	)

39 
	#E_OK
 (0)

	)

40 
	#E_SYSTEM_ERROR
 (-1)

	)

41 
	#E_BAD_ARGUMENT
 (-2)

	)

42 
	#E_POSTED
 (-3)

	)

43 
	#E_CONNECTED
 (-4)

	)

44 
	#E_BAD_STATE
 (-5)

	)

45 
	#E_NO_ROOM
 (-6)

	)

46 
	#E_NOT_POSTED
 (-7)

	)

47 
	#E_UNKNOWN_COMMAND
 (-8)

	)

48 
	#E_NO_MATCH
 (-9)

	)

49 
	#E_NOT_SELECTABLE
 (-10)

	)

50 
	#E_NOT_CONNECTED
 (-11)

	)

51 
	#E_REQUEST_DENIED
 (-12)

	)

52 
	#E_INVALID_FIELD
 (-13)

	)

53 
	#E_CURRENT
 (-14)

	)

	@/usr/include/etip.h

37 #i‚de‡
NCURSES_ETIP_H_ö˛


38 
	#NCURSES_ETIP_H_ö˛
 1

	)

41 #i‚de‡
HAVE_BUILTIN_H


42 
	#HAVE_BUILTIN_H
 0

	)

45 #i‚de‡
HAVE_GXX_BUILTIN_H


46 
	#HAVE_GXX_BUILTIN_H
 0

	)

49 #i‚de‡
HAVE_GPP_BUILTIN_H


50 
	#HAVE_GPP_BUILTIN_H
 0

	)

53 #i‚de‡
HAVE_IOSTREAM


54 
	#HAVE_IOSTREAM
 1

	)

57 #i‚de‡
HAVE_TYPEINFO


58 
	#HAVE_TYPEINFO
 1

	)

61 #i‚de‡
HAVE_VALUES_H


62 
	#HAVE_VALUES_H
 0

	)

65 #i‚de‡
ETIP_NEEDS_MATH_H


66 
	#ETIP_NEEDS_MATH_H
 0

	)

69 #i‚de‡
ETIP_NEEDS_MATH_EXCEPTION


70 
	#ETIP_NEEDS_MATH_EXCEPTION
 0

	)

73 #i‚de‡
CPP_HAS_PARAM_INIT


74 
	#CPP_HAS_PARAM_INIT
 0

	)

77 #i‚de‡
CPP_HAS_STATIC_CAST


78 
	#CPP_HAS_STATIC_CAST
 1

	)

81 #i‚de‡
IOSTREAM_NAMESPACE


82 
	#IOSTREAM_NAMESPACE
 1

	)

85 #ifde‡
__GNUG__


86 #i‡((
__GNUG__
 <2Ë&& (
__GNUC_MINOR__
 < 8))

87 #i‡
HAVE_TYPEINFO


88 
	~<ty≥öfo
>

93 #i‡
deföed
(
__GNUG__
)

94 #i‡
HAVE_BUILTIN_H
 || 
HAVE_GXX_BUILTIN_H
 || 
HAVE_GPP_BUILTIN_H


95 #i‡
ETIP_NEEDS_MATH_H


96 #i‡
ETIP_NEEDS_MATH_EXCEPTION


97 #unde‡
ex˚±i⁄


98 
	#ex˚±i⁄
 
m©h_ex˚±i⁄


	)

100 
	~<m©h.h
>

102 #unde‡
ex˚±i⁄


103 
	#ex˚±i⁄
 
buûtö_ex˚±i⁄


	)

104 #i‡
HAVE_GPP_BUILTIN_H


105 
	~<gµ/buûtö.h
>

106 #ñi‡
HAVE_GXX_BUILTIN_H


107 
	~<g++/buûtö.h
>

109 
	~<buûtö.h
>

111 #unde‡
ex˚±i⁄


113 #ñi‡
deföed
 (
__SUNPRO_CC
)

114 
	~<gíîic.h
>

117 
	~<cur£s.h
>

120 #i‡
HAVE_VALUES_H


121 
	~<vÆues.h
>

124 
	~<as£π.h
>

125 
	~<ëi.h
>

126 
	~<î∫o.h
>

130 #i‡
CPP_HAS_PARAM_INIT


131 
	#NCURSES_PARAM_INIT
(
vÆue
Ë
	)
value

133 
	#NCURSES_PARAM_INIT
(
vÆue
Ë

	)

136 #i‡
CPP_HAS_STATIC_CAST


137 
	#STATIC_CAST
(
s
Ë
°©ic_ˇ°
<s>

	)

139 
	#STATIC_CAST
(
s
Ë(s)

	)

142 #i‚de‡
NCURSES_CXX_IMPEXP


143 
	#NCURSES_CXX_IMPEXP


	)

147 
˛ass
 
NCURSES_CXX_IMPEXP
 
NCur£sP™ñ
;

148 
˛ass
 
NCURSES_CXX_IMPEXP
 
	gNCur£sMíu
;

149 
˛ass
 
NCURSES_CXX_IMPEXP
 
	gNCur£sF‹m
;

151 ˛as†
	cNCURSES_CXX_IMPEXP
 
	mNCur£sEx˚±i⁄


153 
	mpublic
:

154 c⁄° *
mesßge
;

155 
	mîr‹no
;

157 
	$NCur£sEx˚±i⁄
 (c⁄° * 
msg
, 
îr
)

158 : 
	`mesßge
(
msg
), 
	$îr‹no
 (
îr
)

161 
ex∂icô
 
	$NCur£sEx˚±i⁄
 (c⁄° * 
msg
)

162 : 
	`mesßge
(
msg
), 
	$îr‹no
 (
E_SYSTEM_ERROR
)

163 {
	}
};

165 
	gNCur£sEx˚±i⁄
& 
	g›î©‹
=(c⁄° 
NCur£sEx˚±i⁄
& 
rhs
)

167 
mesßge
 = 
rhs
.message;

168 
	gîr‹no
 = 
rhs
.
îr‹no
;

169  *
	gthis
;

172 
	$NCur£sEx˚±i⁄
(c⁄° 
NCur£sEx˚±i⁄
& 
rhs
)

173 : 
	`mesßge
(
rhs
.
mesßge
), 
	$îr‹no
(
rhs
.
îr‹no
)

175 
	}
}

177 
vútuÆ
 c⁄° *
	$˛as¢ame
() const {

179 
	}
}

181 
	gvútuÆ
 ~
	$NCur£sEx˚±i⁄
()

183 
	}
}

186 ˛as†
	cNCURSES_CXX_IMPEXP
 
	mNCur£sP™ñEx˚±i⁄
 : 
public
 
NCur£sEx˚±i⁄


188 
public
:

189 c⁄° 
NCur£sP™ñ
* 
p
;

191 
	$NCur£sP™ñEx˚±i⁄
 (c⁄° *
msg
, 
îr
) :

192 
	`NCur£sEx˚±i⁄
 (
msg
, 
îr
),

193 
	$p
 (0)

196 
	$NCur£sP™ñEx˚±i⁄
 (c⁄° 
NCur£sP™ñ
* 
∑√l
,

197 c⁄° *
msg
,

198 
îr
) :

199 
	`NCur£sEx˚±i⁄
 (
msg
, 
îr
),

200 
	$p
 (
∑√l
)

201 {
	}
};

203 
ex∂icô
 
	$NCur£sP™ñEx˚±i⁄
 (
îr
) :

204 
	`NCur£sEx˚±i⁄
 ("∑√»libøryÉº‹", 
îr
),

205 
	$p
 (0)

206 {
	}
};

208 
	$NCur£sP™ñEx˚±i⁄
 (c⁄° 
NCur£sP™ñ
* 
∑√l
,

209 
îr
) :

210 
	`NCur£sEx˚±i⁄
 ("∑√»libøryÉº‹", 
îr
),

211 
	$p
 (
∑√l
)

212 {
	}
};

214 
	gNCur£sP™ñEx˚±i⁄
& 
	g›î©‹
=(c⁄° 
NCur£sP™ñEx˚±i⁄
& 
rhs
)

216 i‡(
this
 !&
rhs
) {

217 
NCur£sEx˚±i⁄
::
›î©‹
=(
rhs
);

218 
	gp
 = 
rhs
.
p
;

220  *
	gthis
;

223 
	$NCur£sP™ñEx˚±i⁄
(c⁄° 
NCur£sP™ñEx˚±i⁄
& 
rhs
)

224 : 
	`NCur£sEx˚±i⁄
(
rhs
), 
	$p
(
rhs
.
p
)

226 
	}
}

228 
vútuÆ
 c⁄° *
	$˛as¢ame
() const {

230 
	}
}

232 
	gvútuÆ
 ~
	$NCur£sP™ñEx˚±i⁄
()

234 
	}
}

237 ˛as†
	cNCURSES_CXX_IMPEXP
 
	mNCur£sMíuEx˚±i⁄
 : 
public
 
NCur£sEx˚±i⁄


239 
public
:

240 c⁄° 
NCur£sMíu
* 
m
;

242 
	$NCur£sMíuEx˚±i⁄
 (c⁄° *
msg
, 
îr
) :

243 
	`NCur£sEx˚±i⁄
 (
msg
, 
îr
),

244 
	$m
 (0)

247 
	$NCur£sMíuEx˚±i⁄
 (c⁄° 
NCur£sMíu
* 
míu
,

248 c⁄° *
msg
,

249 
îr
) :

250 
	`NCur£sEx˚±i⁄
 (
msg
, 
îr
),

251 
	$m
 (
míu
)

252 {
	}
};

254 
ex∂icô
 
	$NCur£sMíuEx˚±i⁄
 (
îr
) :

255 
	`NCur£sEx˚±i⁄
 ("míuÜibøryÉº‹", 
îr
),

256 
	$m
 (0)

257 {
	}
};

259 
	$NCur£sMíuEx˚±i⁄
 (c⁄° 
NCur£sMíu
* 
míu
,

260 
îr
) :

261 
	`NCur£sEx˚±i⁄
 ("míuÜibøryÉº‹", 
îr
),

262 
	$m
 (
míu
)

263 {
	}
};

265 
	gNCur£sMíuEx˚±i⁄
& 
	g›î©‹
=(c⁄° 
NCur£sMíuEx˚±i⁄
& 
rhs
)

267 i‡(
this
 !&
rhs
) {

268 
NCur£sEx˚±i⁄
::
›î©‹
=(
rhs
);

269 
	gm
 = 
rhs
.
m
;

271  *
	gthis
;

274 
	$NCur£sMíuEx˚±i⁄
(c⁄° 
NCur£sMíuEx˚±i⁄
& 
rhs
)

275 : 
	`NCur£sEx˚±i⁄
(
rhs
), 
	$m
(
rhs
.
m
)

277 
	}
}

279 
vútuÆ
 c⁄° *
	$˛as¢ame
() const {

281 
	}
}

283 
	gvútuÆ
 ~
	$NCur£sMíuEx˚±i⁄
()

285 
	}
}

288 ˛as†
	cNCURSES_CXX_IMPEXP
 
	mNCur£sF‹mEx˚±i⁄
 : 
public
 
NCur£sEx˚±i⁄


290 
public
:

291 c⁄° 
NCur£sF‹m
* 
f
;

293 
	$NCur£sF‹mEx˚±i⁄
 (c⁄° *
msg
, 
îr
) :

294 
	`NCur£sEx˚±i⁄
 (
msg
, 
îr
),

295 
	$f
 (0)

298 
	$NCur£sF‹mEx˚±i⁄
 (c⁄° 
NCur£sF‹m
* 
f‹m
,

299 c⁄° *
msg
,

300 
îr
) :

301 
	`NCur£sEx˚±i⁄
 (
msg
, 
îr
),

302 
	$f
 (
f‹m
)

303 {
	}
};

305 
ex∂icô
 
	$NCur£sF‹mEx˚±i⁄
 (
îr
) :

306 
	`NCur£sEx˚±i⁄
 ("f‹mÜibøryÉº‹", 
îr
),

307 
	$f
 (0)

308 {
	}
};

310 
	$NCur£sF‹mEx˚±i⁄
 (c⁄° 
NCur£sF‹m
* 
f‹m
,

311 
îr
) :

312 
	`NCur£sEx˚±i⁄
 ("f‹mÜibøryÉº‹", 
îr
),

313 
	$f
 (
f‹m
)

314 {
	}
};

316 
	gNCur£sF‹mEx˚±i⁄
& 
	g›î©‹
=(c⁄° 
NCur£sF‹mEx˚±i⁄
& 
rhs
)

318 i‡(
this
 !&
rhs
) {

319 
NCur£sEx˚±i⁄
::
›î©‹
=(
rhs
);

320 
	gf
 = 
rhs
.
f
;

322  *
	gthis
;

325 
	$NCur£sF‹mEx˚±i⁄
(c⁄° 
NCur£sF‹mEx˚±i⁄
& 
rhs
)

326 : 
	`NCur£sEx˚±i⁄
(
rhs
), 
	$f
(
rhs
.
f
)

328 
	}
}

330 
vútuÆ
 c⁄° *
	$˛as¢ame
() const {

332 
	}
}

334 
	gvútuÆ
 ~
	$NCur£sF‹mEx˚±i⁄
()

336 
	}
}

339 #i‡!((
deföed
(
__GNUG__
Ë&& deföed(
__EXCEPTIONS
Ë&& (__GNUG__ < 7)Ë|| deföed(
__SUNPRO_CC
))

340 #i‡
HAVE_IOSTREAM


341 
	~<io°ªam
>

342 #i‡
IOSTREAM_NAMESPACE


343 
usög
 
	g°d
::
˚º
;

344 
usög
 
	g°d
::
ídl
;

347 
	~<io°ªam.h
>

351 
ölöe
 
	$THROW
(c⁄° 
NCur£sEx˚±i⁄
 *
e
) {

352 #i‡
	`deföed
(
__GNUG__
Ë&& deföed(
__EXCEPTIONS
)

353 #i‡((
__GNUG__
 <2Ë&& (
__GNUC_MINOR__
 < 8))

354 (*
lib_îr‹_h™dÀr
)(
e
 ?É->
	`˛as¢ame
(Ë: "",É ?É->
mesßge
 : "");

355 #ñi‡(
__GNUG__
 >= 7)

357 ::
	`ídwö
();

358 
°d
::
˚º
 << "FoundáÖrobÀm - goodbye" << std::
ídl
;

359 
	`exô
(
EXIT_FAILURE
);

361 
	#CPP_HAS_TRY_CATCH
 1

	)

363 #ñi‡
	`deföed
(
__SUNPRO_CC
)

364 #i‡!
	`deföed
(
__SUNPRO_CC_COMPAT
) || (__SUNPRO_CC_COMPAT < 5)

365 
	`gíîi˚º‹
(1, ((
e
 !0Ë? (*)”->
mesßge
) : ""));

367 
	#CPP_HAS_TRY_CATCH
 1

	)

370 i‡(
e
)

371 
˚º
 << 
e
->
mesßge
 << 
ídl
;

372 
	`exô
(0);

375 #i‚de‡
CPP_HAS_TRY_CATCH


376 
	#CPP_HAS_TRY_CATCH
 0

	)

377 
	#NCURSES_CPP_TRY


	)

378 
	#NCURSES_CPP_CATCH
(
e
Ëi‡(
Ál£
)

	)

379 
	#THROWS
(
s
Ë

	)

380 
	#THROW2
(
s
,
t
Ë

	)

381 #ñi‡
CPP_HAS_TRY_CATCH


382 
throw
 *
e
;

383 
	#NCURSES_CPP_TRY
 
åy


	)

384 
	#NCURSES_CPP_CATCH
(
e
Ë
	`ˇtch
”)

	)

385 #i‡
	`deföed
(
__˝p_n€x˚±_fun˘i⁄_ty≥
) && (__cpp_noexcept_function_type >= 201510)

387 
	#THROWS
(
s
Ë

	)

388 
	#THROW2
(
s
,
t
Ë

	)

390 
	#THROWS
(
s
Ë
	`throw
(s)

	)

391 
	#THROW2
(
s
,
t
Ë
	`throw
(s,t)

	)

394 
	}
}

	@/usr/include/execinfo.h

18 #i‚de‡
_EXECINFO_H


19 
	#_EXECINFO_H
 1

	)

21 
	~<„©uªs.h
>

23 
__BEGIN_DECLS


27 
	$backåa˚
 (**
__¨øy
, 
__size
Ë
	`__n⁄nuŒ
 ((1));

32 **
	$backåa˚_symbﬁs
 (*c⁄° *
__¨øy
, 
__size
)

33 
__THROW
 
	`__n⁄nuŒ
 ((1));

38 
	$backåa˚_symbﬁs_fd
 (*c⁄° *
__¨øy
, 
__size
, 
__fd
)

39 
__THROW
 
	`__n⁄nuŒ
 ((1));

41 
__END_DECLS


	@/usr/include/expat.h

41 #i‚de‡
Ex∑t_INCLUDED


42 
	#Ex∑t_INCLUDED
 1

	)

44 
	~<°dlib.h
>

45 
	~"ex∑t_exã∫Æ.h
"

47 #ifde‡
__˝lu•lus


51 
XML_P¨£rSåu˘
;

52 
XML_P¨£rSåu˘
 *
	tXML_P¨£r
;

54 
	tXML_Boﬁ
;

55 
	#XML_TRUE
 ((
XML_Boﬁ
)1)

	)

56 
	#XML_FALSE
 ((
XML_Boﬁ
)0)

	)

71 
	eXML_Sètus
 {

72 
XML_STATUS_ERROR
 = 0,

73 
	#XML_STATUS_ERROR
 
XML_STATUS_ERROR


	)

74 
XML_STATUS_OK
 = 1,

75 
	#XML_STATUS_OK
 
XML_STATUS_OK


	)

76 
XML_STATUS_SUSPENDED
 = 2

77 
	#XML_STATUS_SUSPENDED
 
XML_STATUS_SUSPENDED


	)

80 
	eXML_Eº‹
 {

81 
XML_ERROR_NONE
,

82 
XML_ERROR_NO_MEMORY
,

83 
XML_ERROR_SYNTAX
,

84 
XML_ERROR_NO_ELEMENTS
,

85 
XML_ERROR_INVALID_TOKEN
,

86 
XML_ERROR_UNCLOSED_TOKEN
,

87 
XML_ERROR_PARTIAL_CHAR
,

88 
XML_ERROR_TAG_MISMATCH
,

89 
XML_ERROR_DUPLICATE_ATTRIBUTE
,

90 
XML_ERROR_JUNK_AFTER_DOC_ELEMENT
,

91 
XML_ERROR_PARAM_ENTITY_REF
,

92 
XML_ERROR_UNDEFINED_ENTITY
,

93 
XML_ERROR_RECURSIVE_ENTITY_REF
,

94 
XML_ERROR_ASYNC_ENTITY
,

95 
XML_ERROR_BAD_CHAR_REF
,

96 
XML_ERROR_BINARY_ENTITY_REF
,

97 
XML_ERROR_ATTRIBUTE_EXTERNAL_ENTITY_REF
,

98 
XML_ERROR_MISPLACED_XML_PI
,

99 
XML_ERROR_UNKNOWN_ENCODING
,

100 
XML_ERROR_INCORRECT_ENCODING
,

101 
XML_ERROR_UNCLOSED_CDATA_SECTION
,

102 
XML_ERROR_EXTERNAL_ENTITY_HANDLING
,

103 
XML_ERROR_NOT_STANDALONE
,

104 
XML_ERROR_UNEXPECTED_STATE
,

105 
XML_ERROR_ENTITY_DECLARED_IN_PE
,

106 
XML_ERROR_FEATURE_REQUIRES_XML_DTD
,

107 
XML_ERROR_CANT_CHANGE_FEATURE_ONCE_PARSING
,

109 
XML_ERROR_UNBOUND_PREFIX
,

111 
XML_ERROR_UNDECLARING_PREFIX
,

112 
XML_ERROR_INCOMPLETE_PE
,

113 
XML_ERROR_XML_DECL
,

114 
XML_ERROR_TEXT_DECL
,

115 
XML_ERROR_PUBLICID
,

116 
XML_ERROR_SUSPENDED
,

117 
XML_ERROR_NOT_SUSPENDED
,

118 
XML_ERROR_ABORTED
,

119 
XML_ERROR_FINISHED
,

120 
XML_ERROR_SUSPEND_PE
,

122 
XML_ERROR_RESERVED_PREFIX_XML
,

123 
XML_ERROR_RESERVED_PREFIX_XMLNS
,

124 
XML_ERROR_RESERVED_NAMESPACE_URI
,

126 
XML_ERROR_INVALID_ARGUMENT
,

128 
XML_ERROR_NO_BUFFER
,

130 
XML_ERROR_AMPLIFICATION_LIMIT_BREACH


133 
	eXML_C⁄ã¡_Ty≥
 {

134 
XML_CTYPE_EMPTY
 = 1,

135 
XML_CTYPE_ANY
,

136 
XML_CTYPE_MIXED
,

137 
XML_CTYPE_NAME
,

138 
XML_CTYPE_CHOICE
,

139 
XML_CTYPE_SEQ


142 
	eXML_C⁄ã¡_Qu™t
 {

143 
XML_CQUANT_NONE
,

144 
XML_CQUANT_OPT
,

145 
XML_CQUANT_REP
,

146 
XML_CQUANT_PLUS


167 
XML_˝
 
	tXML_C⁄ã¡
;

169 
	sXML_˝
 {

170 
XML_C⁄ã¡_Ty≥
 
ty≥
;

171 
XML_C⁄ã¡_Qu™t
 
qu™t
;

172 
XML_Ch¨
 *
«me
;

173 
numchûdªn
;

174 
XML_C⁄ã¡
 *
chûdªn
;

183 (
XMLCALL
 *
	tXML_EÀmítDe˛H™dÀr
)(*
	tu£rD©a
,

184 c⁄° 
	tXML_Ch¨
 *
	t«me
,

185 
	tXML_C⁄ã¡
 *
	tmodñ
);

187 
XMLPARSEAPI
()

188 
XML_SëEÀmítDe˛H™dÀr
(
XML_P¨£r
 
∑r£r
, 
XML_EÀmítDe˛H™dÀr
 
ñde˛
);

198 (
XMLCALL
 *
	tXML_Aâli°De˛H™dÀr
)(

199 *
	tu£rD©a
, c⁄° 
	tXML_Ch¨
 *
	tñ«me
, c⁄° XML_Ch¨ *
	t©äame
,

200 c⁄° 
	tXML_Ch¨
 *
	t©t_ty≥
, c⁄° XML_Ch¨ *
	tdÊt
, 
	ti§equúed
);

202 
XMLPARSEAPI
()

203 
XML_SëAâli°De˛H™dÀr
(
XML_P¨£r
 
∑r£r
, 
XML_Aâli°De˛H™dÀr
 
©tde˛
);

213 (
XMLCALL
 *
	tXML_XmlDe˛H™dÀr
)(*
	tu£rD©a
,

214 c⁄° 
	tXML_Ch¨
 *
	tvîsi⁄
,

215 c⁄° 
	tXML_Ch¨
 *
	tícodög
,

216 
	t°™dÆ⁄e
);

218 
XMLPARSEAPI
()

219 
XML_SëXmlDe˛H™dÀr
(
XML_P¨£r
 
∑r£r
, 
XML_XmlDe˛H™dÀr
 
xmlde˛
);

222 *(*
mÆloc_f˙
)(
size_t
 
size
);

223 *(*
ªÆloc_f˙
)(*
±r
, 
size_t
 
size
);

224 (*
‰ì_f˙
)(*
±r
);

225 } 
	tXML_Mem‹y_H™dlög_Suôe
;

230 
XMLPARSEAPI
(
XML_P¨£r
)

231 
XML_P¨£rCª©e
(c⁄° 
XML_Ch¨
 *
ícodög
);

255 
XMLPARSEAPI
(
XML_P¨£r
)

256 
XML_P¨£rCª©eNS
(c⁄° 
XML_Ch¨
 *
ícodög
, XML_Ch¨ 
«me•a˚Sï¨©‹
);

267 
XMLPARSEAPI
(
XML_P¨£r
)

268 
XML_P¨£rCª©e_MM
(c⁄° 
XML_Ch¨
 *
ícodög
,

269 c⁄° 
XML_Mem‹y_H™dlög_Suôe
 *
memsuôe
,

270 c⁄° 
XML_Ch¨
 *
«me•a˚Sï¨©‹
);

281 
XMLPARSEAPI
(
XML_Boﬁ
)

282 
XML_P¨£rRe£t
(
XML_P¨£r
 
∑r£r
, c⁄° 
XML_Ch¨
 *
ícodög
);

287 (
XMLCALL
 *
	tXML_SèπEÀmítH™dÀr
)(*
	tu£rD©a
,

288 c⁄° 
	tXML_Ch¨
 *
	t«me
,

289 c⁄° 
	tXML_Ch¨
 **
	t©ts
);

291 (
XMLCALL
 *
	tXML_EndEÀmítH™dÀr
)(*
	tu£rD©a
,

292 c⁄° 
	tXML_Ch¨
 *
	t«me
);

295 (
XMLCALL
 *
	tXML_Ch¨a˘îD©aH™dÀr
)(*
	tu£rD©a
,

296 c⁄° 
	tXML_Ch¨
 *
	ts
, 
	tÀn
);

299 (
XMLCALL
 *
	tXML_Pro˚ssögIn°ru˘i⁄H™dÀr
)(*
	tu£rD©a
,

300 c⁄° 
	tXML_Ch¨
 *
	tèrgë
,

301 c⁄° 
	tXML_Ch¨
 *
	td©a
);

304 (
XMLCALL
 *
	tXML_CommítH™dÀr
)(*
	tu£rD©a
, c⁄° 
	tXML_Ch¨
 *
	td©a
);

306 (
XMLCALL
 *
	tXML_SèπCd©aSe˘i⁄H™dÀr
)(*
	tu£rD©a
);

307 (
XMLCALL
 *
	tXML_EndCd©aSe˘i⁄H™dÀr
)(*
	tu£rD©a
);

322 (
XMLCALL
 *
	tXML_DeÁu…H™dÀr
)(*
	tu£rD©a
, c⁄° 
	tXML_Ch¨
 *
	ts
,

323 
	tÀn
);

328 (
XMLCALL
 *
	tXML_SèπDo˘y≥De˛H™dÀr
)(*
	tu£rD©a
,

329 c⁄° 
	tXML_Ch¨
 *
	tdo˘y≥Name
,

330 c⁄° 
	tXML_Ch¨
 *
	tsysid
,

331 c⁄° 
	tXML_Ch¨
 *
	tpubid
,

332 
	thas_öã∫Æ_sub£t
);

338 (
XMLCALL
 *
	tXML_EndDo˘y≥De˛H™dÀr
)(*
	tu£rD©a
);

358 (
XMLCALL
 *
	tXML_E¡ôyDe˛H™dÀr
)(

359 *
	tu£rD©a
, c⁄° 
	tXML_Ch¨
 *
	títôyName
, 
	tis_∑ømëî_ítôy
,

360 c⁄° 
	tXML_Ch¨
 *
	tvÆue
, 
	tvÆue_Àngth
, c⁄° XML_Ch¨ *
	tba£
,

361 c⁄° 
	tXML_Ch¨
 *
	tsy°emId
, c⁄° XML_Ch¨ *
	tpublicId
,

362 c⁄° 
	tXML_Ch¨
 *
	tnŸ©i⁄Name
);

364 
XMLPARSEAPI
()

365 
XML_SëE¡ôyDe˛H™dÀr
(
XML_P¨£r
 
∑r£r
, 
XML_E¡ôyDe˛H™dÀr
 
h™dÀr
);

376 (
XMLCALL
 *
	tXML_U≈¨£dE¡ôyDe˛H™dÀr
)(

377 *
	tu£rD©a
, c⁄° 
	tXML_Ch¨
 *
	títôyName
, c⁄° XML_Ch¨ *
	tba£
,

378 c⁄° 
	tXML_Ch¨
 *
	tsy°emId
, c⁄° XML_Ch¨ *
	tpublicId
,

379 c⁄° 
	tXML_Ch¨
 *
	tnŸ©i⁄Name
);

385 (
XMLCALL
 *
	tXML_NŸ©i⁄De˛H™dÀr
)(*
	tu£rD©a
,

386 c⁄° 
	tXML_Ch¨
 *
	tnŸ©i⁄Name
,

387 c⁄° 
	tXML_Ch¨
 *
	tba£
,

388 c⁄° 
	tXML_Ch¨
 *
	tsy°emId
,

389 c⁄° 
	tXML_Ch¨
 *
	tpublicId
);

397 (
XMLCALL
 *
	tXML_SèπName•a˚De˛H™dÀr
)(*
	tu£rD©a
,

398 c⁄° 
	tXML_Ch¨
 *
	t¥efix
,

399 c⁄° 
	tXML_Ch¨
 *
	turi
);

401 (
XMLCALL
 *
	tXML_EndName•a˚De˛H™dÀr
)(*
	tu£rD©a
,

402 c⁄° 
	tXML_Ch¨
 *
	t¥efix
);

413 (
XMLCALL
 *
	tXML_NŸSèndÆ⁄eH™dÀr
)(*
	tu£rD©a
);

449 (
XMLCALL
 *
	tXML_Exã∫ÆE¡ôyRefH™dÀr
)(
	tXML_P¨£r
 
	t∑r£r
,

450 c⁄° 
	tXML_Ch¨
 *
	tc⁄ãxt
,

451 c⁄° 
	tXML_Ch¨
 *
	tba£
,

452 c⁄° 
	tXML_Ch¨
 *
	tsy°emId
,

453 c⁄° 
	tXML_Ch¨
 *
	tpublicId
);

465 (
XMLCALL
 *
	tXML_Skù≥dE¡ôyH™dÀr
)(*
	tu£rD©a
,

466 c⁄° 
	tXML_Ch¨
 *
	títôyName
,

467 
	tis_∑ømëî_ítôy
);

522 
m≠
[256];

523 *
d©a
;

524 (
XMLCALL
 *
c⁄vît
)(*
d©a
, c⁄° *
s
);

525 (
XMLCALL
 *
ªÀa£
)(*
d©a
);

526 } 
	tXML_Encodög
;

543 (
XMLCALL
 *
	tXML_UnknownEncodögH™dÀr
)(*
	tícodögH™dÀrD©a
,

544 c⁄° 
	tXML_Ch¨
 *
	t«me
,

545 
	tXML_Encodög
 *
	töfo
);

547 
XMLPARSEAPI
()

548 
XML_SëEÀmítH™dÀr
(
XML_P¨£r
 
∑r£r
, 
XML_SèπEÀmítH™dÀr
 
°¨t
,

549 
XML_EndEÀmítH™dÀr
 
íd
);

551 
XMLPARSEAPI
()

552 
XML_SëSèπEÀmítH™dÀr
(
XML_P¨£r
 
∑r£r
, 
XML_SèπEÀmítH™dÀr
 
h™dÀr
);

554 
XMLPARSEAPI
()

555 
XML_SëEndEÀmítH™dÀr
(
XML_P¨£r
 
∑r£r
, 
XML_EndEÀmítH™dÀr
 
h™dÀr
);

557 
XMLPARSEAPI
()

558 
XML_SëCh¨a˘îD©aH™dÀr
(
XML_P¨£r
 
∑r£r
,

559 
XML_Ch¨a˘îD©aH™dÀr
 
h™dÀr
);

561 
XMLPARSEAPI
()

562 
XML_SëPro˚ssögIn°ru˘i⁄H™dÀr
(
XML_P¨£r
 
∑r£r
,

563 
XML_Pro˚ssögIn°ru˘i⁄H™dÀr
 
h™dÀr
);

564 
XMLPARSEAPI
()

565 
XML_SëCommítH™dÀr
(
XML_P¨£r
 
∑r£r
, 
XML_CommítH™dÀr
 
h™dÀr
);

567 
XMLPARSEAPI
()

568 
XML_SëCd©aSe˘i⁄H™dÀr
(
XML_P¨£r
 
∑r£r
,

569 
XML_SèπCd©aSe˘i⁄H™dÀr
 
°¨t
,

570 
XML_EndCd©aSe˘i⁄H™dÀr
 
íd
);

572 
XMLPARSEAPI
()

573 
XML_SëSèπCd©aSe˘i⁄H™dÀr
(
XML_P¨£r
 
∑r£r
,

574 
XML_SèπCd©aSe˘i⁄H™dÀr
 
°¨t
);

576 
XMLPARSEAPI
()

577 
XML_SëEndCd©aSe˘i⁄H™dÀr
(
XML_P¨£r
 
∑r£r
,

578 
XML_EndCd©aSe˘i⁄H™dÀr
 
íd
);

584 
XMLPARSEAPI
()

585 
XML_SëDeÁu…H™dÀr
(
XML_P¨£r
 
∑r£r
, 
XML_DeÁu…H™dÀr
 
h™dÀr
);

591 
XMLPARSEAPI
()

592 
XML_SëDeÁu…H™dÀrEx∑nd
(
XML_P¨£r
 
∑r£r
, 
XML_DeÁu…H™dÀr
 
h™dÀr
);

594 
XMLPARSEAPI
()

595 
XML_SëDo˘y≥De˛H™dÀr
(
XML_P¨£r
 
∑r£r
, 
XML_SèπDo˘y≥De˛H™dÀr
 
°¨t
,

596 
XML_EndDo˘y≥De˛H™dÀr
 
íd
);

598 
XMLPARSEAPI
()

599 
XML_SëSèπDo˘y≥De˛H™dÀr
(
XML_P¨£r
 
∑r£r
,

600 
XML_SèπDo˘y≥De˛H™dÀr
 
°¨t
);

602 
XMLPARSEAPI
()

603 
XML_SëEndDo˘y≥De˛H™dÀr
(
XML_P¨£r
 
∑r£r
, 
XML_EndDo˘y≥De˛H™dÀr
 
íd
);

605 
XMLPARSEAPI
()

606 
XML_SëU≈¨£dE¡ôyDe˛H™dÀr
(
XML_P¨£r
 
∑r£r
,

607 
XML_U≈¨£dE¡ôyDe˛H™dÀr
 
h™dÀr
);

609 
XMLPARSEAPI
()

610 
XML_SëNŸ©i⁄De˛H™dÀr
(
XML_P¨£r
 
∑r£r
, 
XML_NŸ©i⁄De˛H™dÀr
 
h™dÀr
);

612 
XMLPARSEAPI
()

613 
XML_SëName•a˚De˛H™dÀr
(
XML_P¨£r
 
∑r£r
,

614 
XML_SèπName•a˚De˛H™dÀr
 
°¨t
,

615 
XML_EndName•a˚De˛H™dÀr
 
íd
);

617 
XMLPARSEAPI
()

618 
XML_SëSèπName•a˚De˛H™dÀr
(
XML_P¨£r
 
∑r£r
,

619 
XML_SèπName•a˚De˛H™dÀr
 
°¨t
);

621 
XMLPARSEAPI
()

622 
XML_SëEndName•a˚De˛H™dÀr
(
XML_P¨£r
 
∑r£r
,

623 
XML_EndName•a˚De˛H™dÀr
 
íd
);

625 
XMLPARSEAPI
()

626 
XML_SëNŸSèndÆ⁄eH™dÀr
(
XML_P¨£r
 
∑r£r
,

627 
XML_NŸSèndÆ⁄eH™dÀr
 
h™dÀr
);

629 
XMLPARSEAPI
()

630 
XML_SëExã∫ÆE¡ôyRefH™dÀr
(
XML_P¨£r
 
∑r£r
,

631 
XML_Exã∫ÆE¡ôyRefH™dÀr
 
h™dÀr
);

637 
XMLPARSEAPI
()

638 
XML_SëExã∫ÆE¡ôyRefH™dÀrArg
(
XML_P¨£r
 
∑r£r
, *
¨g
);

640 
XMLPARSEAPI
()

641 
XML_SëSkù≥dE¡ôyH™dÀr
(
XML_P¨£r
 
∑r£r
,

642 
XML_Skù≥dE¡ôyH™dÀr
 
h™dÀr
);

644 
XMLPARSEAPI
()

645 
XML_SëUnknownEncodögH™dÀr
(
XML_P¨£r
 
∑r£r
,

646 
XML_UnknownEncodögH™dÀr
 
h™dÀr
,

647 *
ícodögH™dÀrD©a
);

653 
XMLPARSEAPI
()

654 
XML_DeÁu…Cuºít
(
XML_P¨£r
 
∑r£r
);

670 
XMLPARSEAPI
()

671 
XML_SëRëu∫NSTrùÀt
(
XML_P¨£r
 
∑r£r
, 
do_n°
);

674 
XMLPARSEAPI
()

675 
XML_SëU£rD©a
(
XML_P¨£r
 
∑r£r
, *
u£rD©a
);

678 
	#XML_GëU£rD©a
(
∑r£r
Ë(*(**)’¨£r))

	)

686 
XMLPARSEAPI
(
XML_Sètus
)

687 
XML_SëEncodög
(
XML_P¨£r
 
∑r£r
, c⁄° 
XML_Ch¨
 *
ícodög
);

693 
XMLPARSEAPI
()

694 
XML_U£P¨£rAsH™dÀrArg
(
XML_P¨£r
 
∑r£r
);

715 
XMLPARSEAPI
(
XML_Eº‹
)

716 
XML_U£F‹eignDTD
(
XML_P¨£r
 
∑r£r
, 
XML_Boﬁ
 
u£DTD
);

726 
XMLPARSEAPI
(
XML_Sètus
)

727 
XML_SëBa£
(
XML_P¨£r
 
∑r£r
, c⁄° 
XML_Ch¨
 *
ba£
);

729 
XMLPARSEAPI
(c⁄° 
XML_Ch¨
 *)

730 
XML_GëBa£
(
XML_P¨£r
 
∑r£r
);

738 
XMLPARSEAPI
()

739 
XML_GëS≥cifõdAâribuãCou¡
(
XML_P¨£r
 
∑r£r
);

747 
XMLPARSEAPI
()

748 
XML_GëIdAâribuãIndex
(
XML_P¨£r
 
∑r£r
);

750 #ifde‡
XML_ATTR_INFO


757 
XML_Index
 
«meSèπ
;

758 
XML_Index
 
«meEnd
;

759 
XML_Index
 
vÆueSèπ
;

760 
XML_Index
 
vÆueEnd
;

761 } 
	tXML_AârInfo
;

769 
XMLPARSEAPI
(c⁄° 
XML_AârInfo
 *)

770 
XML_GëAâribuãInfo
(
XML_P¨£r
 
∑r£r
);

782 
XMLPARSEAPI
(
XML_Sètus
)

783 
XML_P¨£
(
XML_P¨£r
 
∑r£r
, c⁄° *
s
, 
Àn
, 
isFöÆ
);

785 
XMLPARSEAPI
(*)

786 
XML_GëBuf„r
(
XML_P¨£r
 
∑r£r
, 
Àn
);

788 
XMLPARSEAPI
(
XML_Sètus
)

789 
XML_P¨£Buf„r
(
XML_P¨£r
 
∑r£r
, 
Àn
, 
isFöÆ
);

822 
XMLPARSEAPI
(
XML_Sètus
)

823 
XML_St›P¨£r
(
XML_P¨£r
 
∑r£r
, 
XML_Boﬁ
 
ªsumabÀ
);

837 
XMLPARSEAPI
(
XML_Sètus
)

838 
XML_ResumeP¨£r
(
XML_P¨£r
 
∑r£r
);

840 
	eXML_P¨sög
 { 
XML_INITIALIZED
, 
XML_PARSING
, 
XML_FINISHED
, 
XML_SUSPENDED
 };

843 
XML_P¨sög
 
∑rsög
;

844 
XML_Boﬁ
 
föÆBuf„r
;

845 } 
	tXML_P¨sögSètus
;

852 
XMLPARSEAPI
()

853 
XML_GëP¨sögSètus
(
XML_P¨£r
 
∑r£r
, 
XML_P¨sögSètus
 *
°©us
);

871 
XMLPARSEAPI
(
XML_P¨£r
)

872 
XML_Exã∫ÆE¡ôyP¨£rCª©e
(
XML_P¨£r
 
∑r£r
, c⁄° 
XML_Ch¨
 *
c⁄ãxt
,

873 c⁄° 
XML_Ch¨
 *
ícodög
);

875 
	eXML_P¨amE¡ôyP¨sög
 {

876 
XML_PARAM_ENTITY_PARSING_NEVER
,

877 
XML_PARAM_ENTITY_PARSING_UNLESS_STANDALONE
,

878 
XML_PARAM_ENTITY_PARSING_ALWAYS


905 
XMLPARSEAPI
()

906 
XML_SëP¨amE¡ôyP¨sög
(
XML_P¨£r
 
∑r£r
,

907 
XML_P¨amE¡ôyP¨sög
 
∑rsög
);

915 
XMLPARSEAPI
()

916 
XML_SëHashSÆt
(
XML_P¨£r
 
∑r£r
, 
hash_ß…
);

921 
XMLPARSEAPI
(
XML_Eº‹
)

922 
XML_GëEº‹Code
(
XML_P¨£r
 
∑r£r
);

944 
XMLPARSEAPI
(
XML_Size
Ë
XML_GëCuºítLöeNumbî
(
XML_P¨£r
 
∑r£r
);

945 
XMLPARSEAPI
(
XML_Size
Ë
XML_GëCuºítCﬁumnNumbî
(
XML_P¨£r
 
∑r£r
);

946 
XMLPARSEAPI
(
XML_Index
Ë
XML_GëCuºítByãIndex
(
XML_P¨£r
 
∑r£r
);

951 
XMLPARSEAPI
()

952 
XML_GëCuºítByãCou¡
(
XML_P¨£r
 
∑r£r
);

964 
XMLPARSEAPI
(const *)

965 
XML_GëI≈utC⁄ãxt
(
XML_P¨£r
 
∑r£r
, *
off£t
, *
size
);

968 
	#XML_GëEº‹LöeNumbî
 
XML_GëCuºítLöeNumbî


	)

969 
	#XML_GëEº‹CﬁumnNumbî
 
XML_GëCuºítCﬁumnNumbî


	)

970 
	#XML_GëEº‹ByãIndex
 
XML_GëCuºítByãIndex


	)

973 
XMLPARSEAPI
()

974 
XML_FªeC⁄ã¡Modñ
(
XML_P¨£r
 
∑r£r
, 
XML_C⁄ã¡
 *
modñ
);

977 
XMLPARSEAPI
(*)

978 
XML_ATTR_MALLOC


979 
XML_ATTR_ALLOC_SIZE
(2)

980 
XML_MemMÆloc
(
XML_P¨£r
 
∑r£r
, 
size_t
 
size
);

982 
XMLPARSEAPI
(*)

983 
XML_ATTR_ALLOC_SIZE
(3)

984 
XML_MemRóŒoc
(
XML_P¨£r
 
∑r£r
, *
±r
, 
size_t
 
size
);

986 
XMLPARSEAPI
()

987 
XML_MemFªe
(
XML_P¨£r
 
∑r£r
, *
±r
);

990 
XMLPARSEAPI
()

991 
XML_P¨£rFªe
(
XML_P¨£r
 
∑r£r
);

994 
XMLPARSEAPI
(c⁄° 
XML_LCh¨
 *)

995 
XML_Eº‹Såög
(
XML_Eº‹
 
code
);

998 
XMLPARSEAPI
(c⁄° 
XML_LCh¨
 *)

999 
XML_Ex∑tVîsi⁄
();

1002 
maj‹
;

1003 
mö‹
;

1004 
mi¸o
;

1005 } 
	tXML_Ex∑t_Vîsi⁄
;

1010 
XMLPARSEAPI
(
XML_Ex∑t_Vîsi⁄
)

1011 
XML_Ex∑tVîsi⁄Info
();

1014 
	eXML_FótuªEnum
 {

1015 
XML_FEATURE_END
 = 0,

1016 
XML_FEATURE_UNICODE
,

1017 
XML_FEATURE_UNICODE_WCHAR_T
,

1018 
XML_FEATURE_DTD
,

1019 
XML_FEATURE_CONTEXT_BYTES
,

1020 
XML_FEATURE_MIN_SIZE
,

1021 
XML_FEATURE_SIZEOF_XML_CHAR
,

1022 
XML_FEATURE_SIZEOF_XML_LCHAR
,

1023 
XML_FEATURE_NS
,

1024 
XML_FEATURE_LARGE_SIZE
,

1025 
XML_FEATURE_ATTR_INFO
,

1027 
XML_FEATURE_BILLION_LAUGHS_ATTACK_PROTECTION_MAXIMUM_AMPLIFICATION_DEFAULT
,

1028 
XML_FEATURE_BILLION_LAUGHS_ATTACK_PROTECTION_ACTIVATION_THRESHOLD_DEFAULT


1033 
XML_FótuªEnum
 
„©uª
;

1034 c⁄° 
XML_LCh¨
 *
«me
;

1035 
vÆue
;

1036 } 
	tXML_Fótuª
;

1038 
XMLPARSEAPI
(c⁄° 
XML_Fótuª
 *)

1039 
XML_GëFótuªLi°
();

1041 #ifde‡
XML_DTD


1043 
XMLPARSEAPI
(
XML_Boﬁ
)

1044 
XML_SëBûli⁄LaughsAâackPrŸe˘i⁄MaximumAm∂ifiˇti⁄
(

1045 
XML_P¨£r
 
∑r£r
, 
maximumAm∂ifiˇti⁄Fa˘‹
);

1048 
XMLPARSEAPI
(
XML_Boﬁ
)

1049 
XML_SëBûli⁄LaughsAâackPrŸe˘i⁄A˘iv©i⁄Thªshﬁd
(

1050 
XML_P¨£r
 
∑r£r
, 
a˘iv©i⁄ThªshﬁdByãs
);

1056 
	#XML_MAJOR_VERSION
 2

	)

1057 
	#XML_MINOR_VERSION
 4

	)

1058 
	#XML_MICRO_VERSION
 7

	)

1060 #ifde‡
__˝lu•lus


	@/usr/include/expat_external.h

40 #i‚de‡
Ex∑t_Exã∫Æ_INCLUDED


41 
	#Ex∑t_Exã∫Æ_INCLUDED
 1

	)

67 #i‚de‡
XMLCALL


68 #i‡
deföed
(
_MSC_VER
)

69 
	#XMLCALL
 
__cde˛


	)

70 #ñi‡
deföed
(
__GNUC__
Ë&& deföed(
__i386
Ë&& ! deföed(
__INTEL_COMPILER
)

71 
	#XMLCALL
 
	`__©åibuã__
((
cde˛
))

	)

83 
	#XMLCALL


	)

87 #i‡! 
deföed
(
XML_STATIC
Ë&& ! deföed(
XMLIMPORT
)

88 #i‚de‡
XML_BUILDING_EXPAT


91 #i‡
deföed
(
_MSC_EXTENSIONS
Ë&& ! deföed(
__BEOS__
Ë&& ! deföed(
__CYGWIN__
)

92 
	#XMLIMPORT
 
	`__de˛•ec
(
dŒimp‹t
)

	)

98 #i‚de‡
XML_ENABLE_VISIBILITY


99 
	#XML_ENABLE_VISIBILITY
 0

	)

102 #i‡! 
deföed
(
XMLIMPORT
Ë&& 
XML_ENABLE_VISIBILITY


103 
	#XMLIMPORT
 
	`__©åibuã__
((
	`visibûôy
("deÁu…")))

	)

107 #i‚de‡
XMLIMPORT


108 
	#XMLIMPORT


	)

111 #i‡
deföed
(
__GNUC__
) \

112 && (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 96))

113 
	#XML_ATTR_MALLOC
 
	`__©åibuã__
((
__mÆloc__
))

	)

115 
	#XML_ATTR_MALLOC


	)

118 #i‡
deföed
(
__GNUC__
) \

119 && ((
__GNUC__
 > 4Ë|| (__GNUC__ =4 && 
__GNUC_MINOR__
 >= 3))

120 
	#XML_ATTR_ALLOC_SIZE
(
x
Ë
	`__©åibuã__
((
	`__Æloc_size__
(x)))

	)

122 
	#XML_ATTR_ALLOC_SIZE
(
x
)

	)

125 
	#XMLPARSEAPI
(
ty≥
Ë
XMLIMPORT
Åy≥ 
XMLCALL


	)

127 #ifde‡
__˝lu•lus


131 #ifde‡
XML_UNICODE_WCHAR_T


132 #i‚de‡
XML_UNICODE


133 
	#XML_UNICODE


	)

135 #i‡
deföed
(
__SIZEOF_WCHAR_T__
) && (__SIZEOF_WCHAR_T__ != 2)

140 #ifde‡
XML_UNICODE


141 #ifde‡
XML_UNICODE_WCHAR_T


142 
wch¨_t
 
	tXML_Ch¨
;

143 
wch¨_t
 
	tXML_LCh¨
;

145 
	tXML_Ch¨
;

146 
	tXML_LCh¨
;

149 
	tXML_Ch¨
;

150 
	tXML_LCh¨
;

153 #ifde‡
XML_LARGE_SIZE


154 
	tXML_Index
;

155 
	tXML_Size
;

157 
	tXML_Index
;

158 
	tXML_Size
;

161 #ifde‡
__˝lu•lus


	@/usr/include/fcntl.h

22 #i‚def 
_FCNTL_H


23 
	#_FCNTL_H
 1

	)

25 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


31 
	~<bôs/ty≥s.h
>

35 
	~<bôs/f˙é.h
>

39 #ifde‡
__O_TMPFILE


40 
	#__OPEN_NEEDS_MODE
(
oÊag
) \

41 (((
oÊag
Ë& 
O_CREAT
Ë!0 || ((oÊagË& 
__O_TMPFILE
Ë=__O_TMPFILE)

	)

43 
	#__OPEN_NEEDS_MODE
(
oÊag
Ë(((oÊagË& 
O_CREAT
Ë!0)

	)

49 #i‚de‡
__mode_t_deföed


50 
__mode_t
 
	tmode_t
;

51 
	#__mode_t_deföed


	)

54 #i‚de‡
__off_t_deföed


55 #i‚de‡
__USE_FILE_OFFSET64


56 
__off_t
 
	toff_t
;

58 
__off64_t
 
	toff_t
;

60 
	#__off_t_deföed


	)

63 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


64 
__off64_t
 
	toff64_t
;

65 
	#__off64_t_deföed


	)

68 #i‚de‡
__pid_t_deföed


69 
__pid_t
 
	tpid_t
;

70 
	#__pid_t_deföed


	)

74 #ifde‡
__USE_XOPEN2K8


75 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

77 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


78 
	~<bôs/°©.h
>

80 
	#S_IFMT
 
__S_IFMT


	)

81 
	#S_IFDIR
 
__S_IFDIR


	)

82 
	#S_IFCHR
 
__S_IFCHR


	)

83 
	#S_IFBLK
 
__S_IFBLK


	)

84 
	#S_IFREG
 
__S_IFREG


	)

85 #ifde‡
__S_IFIFO


86 
	#S_IFIFO
 
__S_IFIFO


	)

88 #ifde‡
__S_IFLNK


89 
	#S_IFLNK
 
__S_IFLNK


	)

91 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
Ë&& deföed 
__S_IFSOCK


92 
	#S_IFSOCK
 
__S_IFSOCK


	)

97 
	#S_ISUID
 
__S_ISUID


	)

98 
	#S_ISGID
 
__S_ISGID


	)

100 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


102 
	#S_ISVTX
 
__S_ISVTX


	)

105 
	#S_IRUSR
 
__S_IREAD


	)

106 
	#S_IWUSR
 
__S_IWRITE


	)

107 
	#S_IXUSR
 
__S_IEXEC


	)

109 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

111 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

112 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

113 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

115 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

117 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

118 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

119 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

121 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

124 #ifdef 
__USE_MISC


125 #i‚de‡
R_OK


128 
	#R_OK
 4

	)

129 
	#W_OK
 2

	)

130 
	#X_OK
 1

	)

131 
	#F_OK
 0

	)

136 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


137 
	#SEEK_SET
 0

	)

138 
	#SEEK_CUR
 1

	)

139 
	#SEEK_END
 2

	)

147 #i‚de‡
__USE_TIME_BITS64


148 #i‚de‡
__USE_FILE_OFFSET64


149 
f˙é
 (
__fd
, 
__cmd
, ...);

151 #ifde‡
__REDIRECT


152 
__REDIRECT
 (
f˙é
, (
__fd
, 
__cmd
, ...), 
f˙é64
);

154 
	#f˙é
 
f˙é64


	)

157 #ifde‡
__USE_LARGEFILE64


158 
f˙é64
 (
__fd
, 
__cmd
, ...);

161 #ifde‡
__REDIRECT


162 
__REDIRECT_NTH
 (
f˙é
, (
__fd
, 
__ªque°
, ...),

163 
__f˙é_time64
);

164 
__REDIRECT_NTH
 (
f˙é64
, (
__fd
, 
__ªque°
, ...),

165 
__f˙é_time64
);

167 
	$__f˙é_time64
 (
__fd
, 
__ªque°
, ...Ë
__THROW
;

168 
	#f˙é64
 
__f˙é_time64


	)

169 
	#f˙é
 
__f˙é_time64


	)

180 #i‚de‡
__USE_FILE_OFFSET64


181 
	$›í
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

183 #ifde‡
__REDIRECT


184 
	`__REDIRECT
 (
›í
, (c⁄° *
__fûe
, 
__oÊag
, ...), 
›í64
)

185 
	`__n⁄nuŒ
 ((1));

187 
	#›í
 
›í64


	)

190 #ifde‡
__USE_LARGEFILE64


191 
	$›í64
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

194 #ifde‡
__USE_ATFILE


204 #i‚de‡
__USE_FILE_OFFSET64


205 
	$›í©
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

206 
	`__n⁄nuŒ
 ((2));

208 #ifde‡
__REDIRECT


209 
	`__REDIRECT
 (
›í©
, (
__fd
, c⁄° *
__fûe
, 
__oÊag
,

210 ...), 
›í©64
Ë
	`__n⁄nuŒ
 ((2));

212 
	#›í©
 
›í©64


	)

215 #ifde‡
__USE_LARGEFILE64


216 
	$›í©64
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

217 
	`__n⁄nuŒ
 ((2));

226 #i‚de‡
__USE_FILE_OFFSET64


227 
	$¸ót
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

229 #ifde‡
__REDIRECT


230 
	`__REDIRECT
 (
¸ót
, (c⁄° *
__fûe
, 
mode_t
 
__mode
),

231 
¸ót64
Ë
	`__n⁄nuŒ
 ((1));

233 
	#¸ót
 
¸ót64


	)

236 #ifde‡
__USE_LARGEFILE64


237 
	$¸ót64
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

240 #i‡!
deföed
 
F_LOCK
 && (deföed 
__USE_MISC
 || (deföed 
__USE_XOPEN_EXTENDED
 \

241 && !
deföed
 
__USE_POSIX
))

250 
	#F_ULOCK
 0

	)

251 
	#F_LOCK
 1

	)

252 
	#F_TLOCK
 2

	)

253 
	#F_TEST
 3

	)

255 #i‚de‡
__USE_FILE_OFFSET64


256 
	`lockf
 (
__fd
, 
__cmd
, 
off_t
 
__Àn
);

258 #ifde‡
__REDIRECT


259 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
), 
lockf64
);

261 
	#lockf
 
lockf64


	)

264 #ifde‡
__USE_LARGEFILE64


265 
	`lockf64
 (
__fd
, 
__cmd
, 
off64_t
 
__Àn
);

269 #ifde‡
__USE_XOPEN2K


272 #i‚de‡
__USE_FILE_OFFSET64


273 
	$posix_Ádvi£
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
,

274 
__advi£
Ë
__THROW
;

276 #ifde‡
__REDIRECT_NTH


277 
	`__REDIRECT_NTH
 (
posix_Ádvi£
, (
__fd
, 
__off64_t
 
__off£t
,

278 
__off64_t
 
__Àn
, 
__advi£
),

279 
posix_Ádvi£64
);

281 
	#posix_Ádvi£
 
posix_Ádvi£64


	)

284 #ifde‡
__USE_LARGEFILE64


285 
	$posix_Ádvi£64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
,

286 
__advi£
Ë
__THROW
;

294 #i‚de‡
__USE_FILE_OFFSET64


295 
	`posix_ÁŒoˇã
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
);

297 #ifde‡
__REDIRECT


298 
	`__REDIRECT
 (
posix_ÁŒoˇã
, (
__fd
, 
__off64_t
 
__off£t
,

299 
__off64_t
 
__Àn
),

300 
posix_ÁŒoˇã64
);

302 
	#posix_ÁŒoˇã
 
posix_ÁŒoˇã64


	)

305 #ifde‡
__USE_LARGEFILE64


306 
	`posix_ÁŒoˇã64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
);

312 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄
 \

313 && 
deföed
 
__va_¨g_∑ck_Àn


314 
	~<bôs/f˙é2.h
>

317 
__END_DECLS


	@/usr/include/features-time64.h

20 
	~<bôs/w‹dsize.h
>

21 
	~<bôs/timesize.h
>

23 #i‡
deföed
 
_TIME_BITS


24 #i‡
_TIME_BITS
 == 64

25 #i‡! 
deföed
 (
_FILE_OFFSET_BITS
) || _FILE_OFFSET_BITS != 64

27 #ñi‡
__TIMESIZE
 == 32

28 
	#__USE_TIME_BITS64
 1

	)

30 #ñi‡
_TIME_BITS
 == 32

31 #i‡
__TIMESIZE
 > 32

35 #îr‹ 
InvÆid
 
_TIME_BITS
 
vÆue
 (
ˇn
 
⁄ly
 
be
 32 
‹
 64-
bô
)

	@/usr/include/features.h

18 #i‚def 
_FEATURES_H


19 
	#_FEATURES_H
 1

	)

126 #unde‡
__USE_ISOC11


127 #unde‡
__USE_ISOC99


128 #unde‡
__USE_ISOC95


129 #unde‡
__USE_ISOCXX11


130 #unde‡
__USE_POSIX


131 #unde‡
__USE_POSIX2


132 #unde‡
__USE_POSIX199309


133 #unde‡
__USE_POSIX199506


134 #unde‡
__USE_XOPEN


135 #unde‡
__USE_XOPEN_EXTENDED


136 #unde‡
__USE_UNIX98


137 #unde‡
__USE_XOPEN2K


138 #unde‡
__USE_XOPEN2KXSI


139 #unde‡
__USE_XOPEN2K8


140 #unde‡
__USE_XOPEN2K8XSI


141 #unde‡
__USE_LARGEFILE


142 #unde‡
__USE_LARGEFILE64


143 #unde‡
__USE_FILE_OFFSET64


144 #unde‡
__USE_MISC


145 #unde‡
__USE_ATFILE


146 #unde‡
__USE_DYNAMIC_STACK_SIZE


147 #unde‡
__USE_GNU


148 #unde‡
__USE_FORTIFY_LEVEL


149 #unde‡
__KERNEL_STRICT_NAMES


150 #unde‡
__GLIBC_USE_ISOC2X


151 #unde‡
__GLIBC_USE_DEPRECATED_GETS


152 #unde‡
__GLIBC_USE_DEPRECATED_SCANF


156 #i‚de‡
_LOOSE_KERNEL_NAMES


157 
	#__KERNEL_STRICT_NAMES


	)

167 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


168 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

169 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

171 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

178 #i‡
deföed
 
__˛™g_maj‹__
 && deföed 
__˛™g_mö‹__


179 
	#__glibc_˛™g_¥îeq
(
maj
, 
mö
) \

180 ((
__˛™g_maj‹__
 << 16Ë+ 
__˛™g_mö‹__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

182 
	#__glibc_˛™g_¥îeq
(
maj
, 
mö
Ë0

	)

186 
	#__GLIBC_USE
(
F
Ë
__GLIBC_USE_
 ## 
	)
F

192 #i‡(
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE
) \

193 && !
deföed
 
	g_DEFAULT_SOURCE


195 #unde‡
_DEFAULT_SOURCE


196 
	#_DEFAULT_SOURCE
 1

	)

200 #ifde‡
_GNU_SOURCE


201 #unde‡
_ISOC95_SOURCE


202 
	#_ISOC95_SOURCE
 1

	)

203 #unde‡
_ISOC99_SOURCE


204 
	#_ISOC99_SOURCE
 1

	)

205 #unde‡
_ISOC11_SOURCE


206 
	#_ISOC11_SOURCE
 1

	)

207 #unde‡
_ISOC2X_SOURCE


208 
	#_ISOC2X_SOURCE
 1

	)

209 #unde‡
_POSIX_SOURCE


210 
	#_POSIX_SOURCE
 1

	)

211 #unde‡
_POSIX_C_SOURCE


212 
	#_POSIX_C_SOURCE
 200809L

	)

213 #unde‡
_XOPEN_SOURCE


214 
	#_XOPEN_SOURCE
 700

	)

215 #unde‡
_XOPEN_SOURCE_EXTENDED


216 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

217 #unde‡
_LARGEFILE64_SOURCE


218 
	#_LARGEFILE64_SOURCE
 1

	)

219 #unde‡
_DEFAULT_SOURCE


220 
	#_DEFAULT_SOURCE
 1

	)

221 #unde‡
_ATFILE_SOURCE


222 
	#_ATFILE_SOURCE
 1

	)

223 #unde‡
_DYNAMIC_STACK_SIZE_SOURCE


224 
	#_DYNAMIC_STACK_SIZE_SOURCE
 1

	)

229 #i‡(
deföed
 
_DEFAULT_SOURCE
 \

230 || (!
deföed
 
	g__STRICT_ANSI__
 \

231 && !
deföed
 
	g_ISOC99_SOURCE
 && !deföed 
	g_ISOC11_SOURCE
 \

232 && !
deföed
 
	g_ISOC2X_SOURCE
 \

233 && !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 \

234 && !
deföed
 
	g_XOPEN_SOURCE
))

235 #unde‡
_DEFAULT_SOURCE


236 
	#_DEFAULT_SOURCE
 1

	)

240 #i‡(
deföed
 
_ISOC2X_SOURCE
 \

241 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ > 201710L))

242 
	#__GLIBC_USE_ISOC2X
 1

	)

244 
	#__GLIBC_USE_ISOC2X
 0

	)

248 #i‡(
deföed
 
_ISOC11_SOURCE
 || deföed 
_ISOC2X_SOURCE
 \

249 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

250 
	#__USE_ISOC11
 1

	)

254 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

255 || 
deföed
 
_ISOC2X_SOURCE
 \

256 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

257 
	#__USE_ISOC99
 1

	)

261 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

262 || 
deföed
 
_ISOC2X_SOURCE
 \

263 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

264 
	#__USE_ISOC95
 1

	)

267 #ifde‡
__˝lu•lus


269 #i‡
__˝lu•lus
 >= 201703L

270 
	#__USE_ISOC11
 1

	)

274 #i‡
__˝lu•lus
 >201103L || 
deföed
 
__GXX_EXPERIMENTAL_CXX0X__


275 
	#__USE_ISOCXX11
 1

	)

276 
	#__USE_ISOC99
 1

	)

283 #ifde‡
_DEFAULT_SOURCE


284 #i‡!
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE


285 
	#__USE_POSIX_IMPLICITLY
 1

	)

287 #unde‡
_POSIX_SOURCE


288 
	#_POSIX_SOURCE
 1

	)

289 #unde‡
_POSIX_C_SOURCE


290 
	#_POSIX_C_SOURCE
 200809L

	)

293 #i‡((!
deföed
 
__STRICT_ANSI__
 \

294 || (
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) >= 500)) \

295 && !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

296 
	#_POSIX_SOURCE
 1

	)

297 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

298 
	#_POSIX_C_SOURCE
 2

	)

299 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

300 
	#_POSIX_C_SOURCE
 199506L

	)

301 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

302 
	#_POSIX_C_SOURCE
 200112L

	)

304 
	#_POSIX_C_SOURCE
 200809L

	)

306 
	#__USE_POSIX_IMPLICITLY
 1

	)

315 #i‡((!
deföed
 
_POSIX_C_SOURCE
 || (_POSIX_C_SOURCE - 0) < 199506L) \

316 && (
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE
))

317 
	#_POSIX_SOURCE
 1

	)

318 #unde‡
_POSIX_C_SOURCE


319 
	#_POSIX_C_SOURCE
 199506L

	)

322 #i‡(
deföed
 
_POSIX_SOURCE
 \

323 || (
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >= 1) \

324 || 
deföed
 
_XOPEN_SOURCE
)

325 
	#__USE_POSIX
 1

	)

328 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


329 
	#__USE_POSIX2
 1

	)

332 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199309L

333 
	#__USE_POSIX199309
 1

	)

336 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199506L

337 
	#__USE_POSIX199506
 1

	)

340 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200112L

341 
	#__USE_XOPEN2K
 1

	)

342 #unde‡
__USE_ISOC95


343 
	#__USE_ISOC95
 1

	)

344 #unde‡
__USE_ISOC99


345 
	#__USE_ISOC99
 1

	)

348 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200809L

349 
	#__USE_XOPEN2K8
 1

	)

350 #unde‡
_ATFILE_SOURCE


351 
	#_ATFILE_SOURCE
 1

	)

354 #ifdef 
_XOPEN_SOURCE


355 
	#__USE_XOPEN
 1

	)

356 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

357 
	#__USE_XOPEN_EXTENDED
 1

	)

358 
	#__USE_UNIX98
 1

	)

359 #unde‡
_LARGEFILE_SOURCE


360 
	#_LARGEFILE_SOURCE
 1

	)

361 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

362 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

363 
	#__USE_XOPEN2K8
 1

	)

364 
	#__USE_XOPEN2K8XSI
 1

	)

366 
	#__USE_XOPEN2K
 1

	)

367 
	#__USE_XOPEN2KXSI
 1

	)

368 #unde‡
__USE_ISOC95


369 
	#__USE_ISOC95
 1

	)

370 #unde‡
__USE_ISOC99


371 
	#__USE_ISOC99
 1

	)

374 #ifde‡
_XOPEN_SOURCE_EXTENDED


375 
	#__USE_XOPEN_EXTENDED
 1

	)

380 #ifde‡
_LARGEFILE_SOURCE


381 
	#__USE_LARGEFILE
 1

	)

384 #ifde‡
_LARGEFILE64_SOURCE


385 
	#__USE_LARGEFILE64
 1

	)

388 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

389 
	#__USE_FILE_OFFSET64
 1

	)

392 
	~<„©uªs-time64.h
>

394 #i‡
deföed
 
_DEFAULT_SOURCE


395 
	#__USE_MISC
 1

	)

398 #ifdef 
_ATFILE_SOURCE


399 
	#__USE_ATFILE
 1

	)

402 #ifdef 
_DYNAMIC_STACK_SIZE_SOURCE


403 
	#__USE_DYNAMIC_STACK_SIZE
 1

	)

406 #ifdef 
_GNU_SOURCE


407 
	#__USE_GNU
 1

	)

410 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0

411 #i‡!
deföed
 
__OPTIMIZE__
 || __OPTIMIZE__ <= 0

412 #ñi‡!
__GNUC_PREREQ
 (4, 1)

413 #ñi‡
_FORTIFY_SOURCE
 > 2 && (
__glibc_˛™g_¥îeq
 (9, 0) \

414 || 
	$__GNUC_PREREQ
 (12, 0))

416 #i‡
_FORTIFY_SOURCE
 > 3

418 
	#__USE_FORTIFY_LEVEL
 3

	)

419 #ñi‡
_FORTIFY_SOURCE
 > 1

420 #i‡
_FORTIFY_SOURCE
 > 2

422 
	#__USE_FORTIFY_LEVEL
 2

	)

424 
	#__USE_FORTIFY_LEVEL
 1

	)

427 #i‚de‡
__USE_FORTIFY_LEVEL


428 
	#__USE_FORTIFY_LEVEL
 0

	)

435 #i‡
deföed
 
__˝lu•lus
 ? __˝lu•lu†>201402L : deföed 
__USE_ISOC11


436 
	#__GLIBC_USE_DEPRECATED_GETS
 0

	)

438 
	#__GLIBC_USE_DEPRECATED_GETS
 1

	)

453 #i‡(
deföed
 
__USE_GNU
 \

454 && (
deföed
 
__˝lu•lus
 \

455 ? (
__˝lu•lus
 < 201103L && !
deföed
 
__GXX_EXPERIMENTAL_CXX0X__
) \

456 : (!
deföed
 
__STDC_VERSION__
 || __STDC_VERSION__ < 199901L)))

457 
	#__GLIBC_USE_DEPRECATED_SCANF
 1

	)

459 
	#__GLIBC_USE_DEPRECATED_SCANF
 0

	)

464 
	~<°dc-¥edef.h
>

472 #unde‡
__GNU_LIBRARY__


473 
	#__GNU_LIBRARY__
 6

	)

477 
	#__GLIBC__
 2

	)

478 
	#__GLIBC_MINOR__
 35

	)

480 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

481 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

484 #i‚de‡
__ASSEMBLER__


485 #i‚de‡
_SYS_CDEFS_H


486 
	~<sys/cdefs.h
>

491 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


492 
	#__USE_LARGEFILE
 1

	)

493 
	#__USE_LARGEFILE64
 1

	)

499 #i‡
	`__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

500 && !
deföed
 
__OPTIMIZE_SIZE__
 && !deföed 
__NO_INLINE__
 \

501 && 
deföed
 
__exã∫_ölöe


502 
	#__USE_EXTERN_INLINES
 1

	)

510 
	~<gnu/°ubs.h
>

	@/usr/include/fenv.h

22 #i‚de‡
_FENV_H


23 
	#_FENV_H
 1

	)

25 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

26 
	~<bôs/libc-hódî-°¨t.h
>

64 
	~<bôs/„nv.h
>

66 
__BEGIN_DECLS


71 
	$„˛óªx˚±
 (
__ex˚±s
Ë
__THROW
;

75 
	$„gëex˚±Êag
 (
„x˚±_t
 *
__Êagp
, 
__ex˚±s
Ë
__THROW
;

78 
	$„øi£ex˚±
 (
__ex˚±s
Ë
__THROW
;

80 #i‡
	`__GLIBC_USE
 (
IEC_60559_BFP_EXT_C2X
)

83 
	$„£ãx˚±
 (
__ex˚±s
Ë
__THROW
;

88 
	$„£ãx˚±Êag
 (c⁄° 
„x˚±_t
 *
__Êagp
, 
__ex˚±s
Ë
__THROW
;

92 
	$„ã°ex˚±
 (
__ex˚±s
Ë
__THROW
;

94 #i‡
	`__GLIBC_USE
 (
IEC_60559_BFP_EXT_C2X
)

97 
	$„ã°ex˚±Êag
 (c⁄° 
„x˚±_t
 *
__Êagp
, 
__ex˚±s
Ë
__THROW
;

104 
	$„gëround
 (Ë
__THROW
 
__©åibuã_puª__
;

107 
	$„£åound
 (
__roundög_dúe˘i⁄
Ë
__THROW
;

114 
	$„gëív
 (
„nv_t
 *
__ívp
Ë
__THROW
;

119 
	$„hﬁdex˚±
 (
„nv_t
 *
__ívp
Ë
__THROW
;

123 
	$„£ãnv
 (c⁄° 
„nv_t
 *
__ívp
Ë
__THROW
;

128 
	$„upd©ìnv
 (c⁄° 
„nv_t
 *
__ívp
Ë
__THROW
;

133 #i‡
	`__GLIBC_USE
 (
IEC_60559_BFP_EXT_C2X
)

136 
	$„gëmode
 (
„mode_t
 *
__modï
Ë
__THROW
;

140 
	$„£tmode
 (c⁄° 
„mode_t
 *
__modï
Ë
__THROW
;

146 #i‡(
	`__GLIBC_USE
 (
IEC_60559_BFP_EXT_C2X
) \

147 && 
deföed
 
FE_INVALID
 \

148 && 
deföed
 
__SUPPORT_SNAN__
)

149 
	#FE_SNANS_ALWAYS_SIGNAL
 1

	)

152 #ifde‡
__USE_GNU


157 
	$„íabÀex˚±
 (
__ex˚±s
Ë
__THROW
;

162 
	$„dißbÀex˚±
 (
__ex˚±s
Ë
__THROW
;

165 
	$„gëex˚±
 (Ë
__THROW
;

168 
__END_DECLS


	@/usr/include/fmtmsg.h

19 #i‚de‡
__FMTMSG_H


20 
	#__FMTMSG_H
 1

	)

22 
	~<„©uªs.h
>

25 
__BEGIN_DECLS


30 
	mMM_HARD
 = 0x001,

31 
	#MM_HARD
 
MM_HARD


	)

32 
	mMM_SOFT
 = 0x002,

33 
	#MM_SOFT
 
MM_SOFT


	)

34 
	mMM_FIRM
 = 0x004,

35 
	#MM_FIRM
 
MM_FIRM


	)

36 
	mMM_APPL
 = 0x008,

37 
	#MM_APPL
 
MM_APPL


	)

38 
	mMM_UTIL
 = 0x010,

39 
	#MM_UTIL
 
MM_UTIL


	)

40 
	mMM_OPSYS
 = 0x020,

41 
	#MM_OPSYS
 
MM_OPSYS


	)

42 
	mMM_RECOVER
 = 0x040,

43 
	#MM_RECOVER
 
MM_RECOVER


	)

44 
	mMM_NRECOV
 = 0x080,

45 
	#MM_NRECOV
 
MM_NRECOV


	)

46 
	mMM_PRINT
 = 0x100,

47 
	#MM_PRINT
 
MM_PRINT


	)

48 
	mMM_CONSOLE
 = 0x200

49 
	#MM_CONSOLE
 
MM_CONSOLE


	)

55 
	mMM_NOSEV
 = 0,

56 
	#MM_NOSEV
 
MM_NOSEV


	)

57 
	mMM_HALT
,

58 
	#MM_HALT
 
MM_HALT


	)

59 
	mMM_ERROR
,

60 
	#MM_ERROR
 
MM_ERROR


	)

61 
	mMM_WARNING
,

63 
	#MM_WARNING
 
MM_WARNING


	)

64 
	mMM_INFO


65 
	#MM_INFO
 
MM_INFO


	)

70 
	#MM_NULLLBL
 ((*Ë0)

	)

71 
	#MM_NULLSEV
 0

	)

72 
	#MM_NULLMC
 ((Ë0)

	)

73 
	#MM_NULLTXT
 ((*Ë0)

	)

74 
	#MM_NULLACT
 ((*Ë0)

	)

75 
	#MM_NULLTAG
 ((*Ë0)

	)

81 
	mMM_NOTOK
 = -1,

82 
	#MM_NOTOK
 
MM_NOTOK


	)

83 
	mMM_OK
 = 0,

84 
	#MM_OK
 
MM_OK


	)

85 
	mMM_NOMSG
 = 1,

86 
	#MM_NOMSG
 
MM_NOMSG


	)

87 
	mMM_NOCON
 = 4

88 
	#MM_NOCON
 
MM_NOCON


	)

94 
fmtmsg
 (
__˛assifiˇti⁄
, c⁄° *
__œbñ
,

95 
__£vîôy
, c⁄° *
__ãxt
,

96 c⁄° *
__a˘i⁄
, c⁄° *
__èg
);

98 #ifde‡
__USE_MISC


100 
	$add£vîôy
 (
__£vîôy
, c⁄° *
__°rög
Ë
__THROW
;

103 
__END_DECLS


	@/usr/include/fnmatch.h

18 #i‚def 
_FNMATCH_H


19 
	#_FNMATCH_H
 1

	)

21 #ifdef 
__˝lu•lus


27 #unde‡
FNM_PATHNAME


28 #unde‡
FNM_NOESCAPE


29 #unde‡
FNM_PERIOD


32 
	#FNM_PATHNAME
 (1 << 0Ë

	)

33 
	#FNM_NOESCAPE
 (1 << 1Ë

	)

34 
	#FNM_PERIOD
 (1 << 2Ë

	)

36 #i‡!
deföed
 
_POSIX_C_SOURCE
 || _POSIX_C_SOURCE < 2 || deföed 
_GNU_SOURCE


37 
	#FNM_FILE_NAME
 
FNM_PATHNAME


	)

38 
	#FNM_LEADING_DIR
 (1 << 3Ë

	)

39 
	#FNM_CASEFOLD
 (1 << 4Ë

	)

40 
	#FNM_EXTMATCH
 (1 << 5Ë

	)

44 
	#FNM_NOMATCH
 1

	)

50 #ifde‡
_XOPEN_SOURCE


51 
	#FNM_NOSYS
 (-1)

	)

56 
‚m©ch
 (c⁄° *
__∑âîn
, c⁄° *
__«me
, 
__Êags
);

58 #ifdef 
__˝lu•lus


	@/usr/include/form.h

36 #i‚de‡
FORM_H


37 
	#FORM_H


	)

40 
	~<cur£s.h
>

41 
	~<ëi.h
>

43 #ifde‡
__˝lu•lus


47 #i‡
deföed
(
BUILDING_FORM
)

48 
	#FORM_IMPEXP
 
NCURSES_EXPORT_GENERAL_EXPORT


	)

50 
	#FORM_IMPEXP
 
NCURSES_EXPORT_GENERAL_IMPORT


	)

53 
	#FORM_WRAPPED_VAR
(
ty≥
,
«me
Ë
FORM_IMPEXP
Åy≥ 
	`NCURSES_PUBLIC_VAR
“ame)()

	)

55 
	#FORM_EXPORT
(
ty≥
Ë
FORM_IMPEXP
Åy≥ 
NCURSES_API


	)

56 
	#FORM_EXPORT_VAR
(
ty≥
Ë
FORM_IMPEXP
 
	)
type

58 #i‚de‡
FORM_PRIV_H


59 *
	tFIELD_CELL
;

62 #i‚de‡
NCURSES_FIELD_INTERNALS


63 
	#NCURSES_FIELD_INTERNALS


	)

66 
	tF‹m_O±i⁄s
;

67 
	tFõld_O±i⁄s
;

73 
	g∑gíode


74 #i‡!
	tNCURSES_OPAQUE_FORM


76 
	gpmö
;

77 
	gpmax
;

78 
	gsmö
;

79 
	gsmax
;

82 
	t_PAGE
;

88 
	gfõldnode


91 
	g°©us
;

92 
	grows
;

93 
	gcﬁs
;

94 
	g‰ow
;

95 
	gfcﬁ
;

96 
	gdrows
;

97 
	gdcﬁs
;

98 
	gmaxgrow
;

99 
	gƒow
;

100 
	gnbuf
;

101 
	gju°
;

102 
	g∑ge
;

103 
	gödex
;

104 
	g∑d
;

105 
chty≥
 
	gf‹e
;

106 
chty≥
 
	gback
;

107 
Fõld_O±i⁄s
 
	g›ts
;

108 
fõldnode
 * 
	g¢ext
;

109 
fõldnode
 * 
	g•ªv
;

110 
fõldnode
 * 
	glök
;

111 
f‹mnode
 * 
	gf‹m
;

112 
ty≥node
 * 
	gty≥
;

113 * 
	g¨g
;

114 
FIELD_CELL
 * 
	gbuf
;

115 * 
	gu§±r
;

124 
	gNCURSES_FIELD_INTERNALS


127 
	tFIELD
;

134 
	gf‹mnode


137 
	g°©us
;

138 
	grows
;

139 
	gcﬁs
;

140 
	gcuºow
;

141 
	gcurcﬁ
;

142 
	gt›row
;

143 
	gbegöcﬁ
;

144 
	gmaxfõld
;

145 
	gmax∑ge
;

146 
	gcuΩage
;

147 
F‹m_O±i⁄s
 
	g›ts
;

148 
WINDOW
 * 
	gwö
;

149 
WINDOW
 * 
	gsub
;

150 
WINDOW
 * 
	gw
;

151 
FIELD
 ** 
	gfõld
;

152 
FIELD
 * 
	gcuºít
;

153 
_PAGE
 * 
	g∑ge
;

154 * 
	gu§±r
;

156 (*
	gf‹möô
)(
	gf‹mnode
 *);

157 (*
	gf‹mãrm
)(
	gf‹mnode
 *);

158 (*
	gfõldöô
)(
	gf‹mnode
 *);

159 (*
	gfõldãrm
)(
	gf‹mnode
 *);

163 
	tFORM
;

170 
	gty≥node


171 #i‡!
	tNCURSES_OPAQUE_FORM


173 
	g°©us
;

174 
	gªf
;

175 
ty≥node
 * 
	gÀ·
;

176 
ty≥node
 * 
	gright
;

178 * (*
	gmakórg
)(
	gva_li°
 *);

179 * (*
	gc›y¨g
)(const *);

180 (*
	g‰ì¨g
)(*);

182 #i‡
NCURSES_INTEROP_FUNCS


184 
boﬁ
 (*
ofcheck
)(
	gFIELD
 *,const *);

185 
boﬁ
 (*
gfcheck
)(
	gFORM
*,
	gFIELD
 *,const *);

186 } 
	gfõldcheck
;

188 
boﬁ
 (*
occheck
)(,const *);

189 
boﬁ
 (*
gccheck
)(,
	gFORM
*,

190 
	gFIELD
*,const *);

191 } 
	gch¨check
;

193 
boﬁ
 (*
⁄ext
)(
	gFIELD
 *,const *);

194 
boﬁ
 (*
g√xt
)(
	gFORM
*,
	gFIELD
*,const *);

195 } 
	gíum_√xt
;

197 
boﬁ
 (*
›ªv
)(
	gFIELD
 *,const *);

198 
boﬁ
 (*
g¥ev
)(
	gFORM
*,
	gFIELD
*,const *);

199 } 
	gíum_¥ev
;

200 * (*
	ggíîiˇrg
)(*);

202 
boﬁ
 (*
fcheck
)(
	gFIELD
 *,const *);

203 
boﬁ
 (*
ccheck
)(,const *);

205 
boﬁ
 (*
√xt
)(
	gFIELD
 *,const *);

206 
boﬁ
 (*
¥ev
)(
	gFIELD
 *,const *);

210 
	tFIELDTYPE
;

212 (*
	gF‹m_Hook
)(
	tFORM
 *);

219 
	#NO_JUSTIFICATION
 (0)

	)

220 
	#JUSTIFY_LEFT
 (1)

	)

221 
	#JUSTIFY_CENTER
 (2)

	)

222 
	#JUSTIFY_RIGHT
 (3)

	)

225 
	#O_VISIBLE
 (0x0001U)

	)

226 
	#O_ACTIVE
 (0x0002U)

	)

227 
	#O_PUBLIC
 (0x0004U)

	)

228 
	#O_EDIT
 (0x0008U)

	)

229 
	#O_WRAP
 (0x0010U)

	)

230 
	#O_BLANK
 (0x0020U)

	)

231 
	#O_AUTOSKIP
 (0x0040U)

	)

232 
	#O_NULLOK
 (0x0080U)

	)

233 
	#O_PASSOK
 (0x0100U)

	)

234 
	#O_STATIC
 (0x0200U)

	)

235 
	#O_DYNAMIC_JUSTIFY
 (0x0400UË

	)

236 
	#O_NO_LEFT_STRIP
 (0x0800UË

	)

237 
	#O_EDGE_INSERT_STAY
 (0x1000UË

	)

238 
	#O_INPUT_LIMIT
 (0x2000UË

	)

241 
	#O_NL_OVERLOAD
 (0x0001U)

	)

242 
	#O_BS_OVERLOAD
 (0x0002U)

	)

245 
	#REQ_NEXT_PAGE
 (
KEY_MAX
 + 1Ë

	)

246 
	#REQ_PREV_PAGE
 (
KEY_MAX
 + 2Ë

	)

247 
	#REQ_FIRST_PAGE
 (
KEY_MAX
 + 3Ë

	)

248 
	#REQ_LAST_PAGE
 (
KEY_MAX
 + 4Ë

	)

250 
	#REQ_NEXT_FIELD
 (
KEY_MAX
 + 5Ë

	)

251 
	#REQ_PREV_FIELD
 (
KEY_MAX
 + 6Ë

	)

252 
	#REQ_FIRST_FIELD
 (
KEY_MAX
 + 7Ë

	)

253 
	#REQ_LAST_FIELD
 (
KEY_MAX
 + 8Ë

	)

254 
	#REQ_SNEXT_FIELD
 (
KEY_MAX
 + 9Ë

	)

255 
	#REQ_SPREV_FIELD
 (
KEY_MAX
 + 10Ë

	)

256 
	#REQ_SFIRST_FIELD
 (
KEY_MAX
 + 11Ë

	)

257 
	#REQ_SLAST_FIELD
 (
KEY_MAX
 + 12Ë

	)

258 
	#REQ_LEFT_FIELD
 (
KEY_MAX
 + 13Ë

	)

259 
	#REQ_RIGHT_FIELD
 (
KEY_MAX
 + 14Ë

	)

260 
	#REQ_UP_FIELD
 (
KEY_MAX
 + 15Ë

	)

261 
	#REQ_DOWN_FIELD
 (
KEY_MAX
 + 16Ë

	)

263 
	#REQ_NEXT_CHAR
 (
KEY_MAX
 + 17Ë

	)

264 
	#REQ_PREV_CHAR
 (
KEY_MAX
 + 18Ë

	)

265 
	#REQ_NEXT_LINE
 (
KEY_MAX
 + 19Ë

	)

266 
	#REQ_PREV_LINE
 (
KEY_MAX
 + 20Ë

	)

267 
	#REQ_NEXT_WORD
 (
KEY_MAX
 + 21Ë

	)

268 
	#REQ_PREV_WORD
 (
KEY_MAX
 + 22Ë

	)

269 
	#REQ_BEG_FIELD
 (
KEY_MAX
 + 23Ë

	)

270 
	#REQ_END_FIELD
 (
KEY_MAX
 + 24Ë

	)

271 
	#REQ_BEG_LINE
 (
KEY_MAX
 + 25Ë

	)

272 
	#REQ_END_LINE
 (
KEY_MAX
 + 26Ë

	)

273 
	#REQ_LEFT_CHAR
 (
KEY_MAX
 + 27Ë

	)

274 
	#REQ_RIGHT_CHAR
 (
KEY_MAX
 + 28Ë

	)

275 
	#REQ_UP_CHAR
 (
KEY_MAX
 + 29Ë

	)

276 
	#REQ_DOWN_CHAR
 (
KEY_MAX
 + 30Ë

	)

278 
	#REQ_NEW_LINE
 (
KEY_MAX
 + 31Ë

	)

279 
	#REQ_INS_CHAR
 (
KEY_MAX
 + 32Ë

	)

280 
	#REQ_INS_LINE
 (
KEY_MAX
 + 33Ë

	)

281 
	#REQ_DEL_CHAR
 (
KEY_MAX
 + 34Ë

	)

282 
	#REQ_DEL_PREV
 (
KEY_MAX
 + 35Ë

	)

283 
	#REQ_DEL_LINE
 (
KEY_MAX
 + 36Ë

	)

284 
	#REQ_DEL_WORD
 (
KEY_MAX
 + 37Ë

	)

285 
	#REQ_CLR_EOL
 (
KEY_MAX
 + 38Ë

	)

286 
	#REQ_CLR_EOF
 (
KEY_MAX
 + 39Ë

	)

287 
	#REQ_CLR_FIELD
 (
KEY_MAX
 + 40Ë

	)

288 
	#REQ_OVL_MODE
 (
KEY_MAX
 + 41Ë

	)

289 
	#REQ_INS_MODE
 (
KEY_MAX
 + 42Ë

	)

290 
	#REQ_SCR_FLINE
 (
KEY_MAX
 + 43Ë

	)

291 
	#REQ_SCR_BLINE
 (
KEY_MAX
 + 44Ë

	)

292 
	#REQ_SCR_FPAGE
 (
KEY_MAX
 + 45Ë

	)

293 
	#REQ_SCR_BPAGE
 (
KEY_MAX
 + 46Ë

	)

294 
	#REQ_SCR_FHPAGE
 (
KEY_MAX
 + 47Ë

	)

295 
	#REQ_SCR_BHPAGE
 (
KEY_MAX
 + 48Ë

	)

296 
	#REQ_SCR_FCHAR
 (
KEY_MAX
 + 49Ë

	)

297 
	#REQ_SCR_BCHAR
 (
KEY_MAX
 + 50Ë

	)

298 
	#REQ_SCR_HFLINE
 (
KEY_MAX
 + 51Ë

	)

299 
	#REQ_SCR_HBLINE
 (
KEY_MAX
 + 52Ë

	)

300 
	#REQ_SCR_HFHALF
 (
KEY_MAX
 + 53Ë

	)

301 
	#REQ_SCR_HBHALF
 (
KEY_MAX
 + 54Ë

	)

303 
	#REQ_VALIDATION
 (
KEY_MAX
 + 55Ë

	)

304 
	#REQ_NEXT_CHOICE
 (
KEY_MAX
 + 56Ë

	)

305 
	#REQ_PREV_CHOICE
 (
KEY_MAX
 + 57Ë

	)

307 
	#MIN_FORM_COMMAND
 (
KEY_MAX
 + 1Ë

	)

308 
	#MAX_FORM_COMMAND
 (
KEY_MAX
 + 57Ë

	)

310 #i‡
deföed
(
MAX_COMMAND
)

311 #i‡(
MAX_FORM_COMMAND
 > 
MAX_COMMAND
)

312 #îr‹ 
Somëhög
 
is
 
wr⁄g
 -- 
MAX_FORM_COMMAND
 i†
gª©î
 
th™
 
MAX_COMMAND


313 #ñi‡(
MAX_COMMAND
 !(
KEY_MAX
 + 128))

314 #îr‹ 
Somëhög
 
is
 
wr⁄g
 -- 
MAX_COMMAND
 i†
Æªady
 
öc⁄si°íéy
 
deföed
.

317 
	#MAX_COMMAND
 (
KEY_MAX
 + 128)

	)

323 
FORM_EXPORT_VAR
(
FIELDTYPE
 *Ë
TYPE_ALPHA
;

324 
FORM_EXPORT_VAR
(
FIELDTYPE
 *Ë
TYPE_ALNUM
;

325 
FORM_EXPORT_VAR
(
FIELDTYPE
 *Ë
TYPE_ENUM
;

326 
FORM_EXPORT_VAR
(
FIELDTYPE
 *Ë
TYPE_INTEGER
;

327 
FORM_EXPORT_VAR
(
FIELDTYPE
 *Ë
TYPE_NUMERIC
;

328 
FORM_EXPORT_VAR
(
FIELDTYPE
 *Ë
TYPE_REGEXP
;

334 
FORM_EXPORT_VAR
(
FIELDTYPE
 *Ë
TYPE_IPV4
;

339 
FORM_EXPORT
(
FIELDTYPE
 *Ë
√w_fõldty≥
 (

340 
boﬁ
 (* c⁄° 
fõld_check
)(
FIELD
 *,const *),

341 
boﬁ
 (* c⁄° 
ch¨_check
)(,const *));

342 
FORM_EXPORT
(
FIELDTYPE
 *Ë
lök_fõldty≥
(

343 
FIELDTYPE
 *, FIELDTYPE *);

345 
FORM_EXPORT
(Ë
‰ì_fõldty≥
 (
FIELDTYPE
 *);

346 
FORM_EXPORT
(Ë
£t_fõldty≥_¨g
 (
FIELDTYPE
 *,

347 * (* c⁄° 
make_¨g
)(
va_li°
 *),

348 * (* c⁄° 
c›y_¨g
)(const *),

349 (* c⁄° 
‰ì_¨g
)(*));

350 
FORM_EXPORT
(Ë
£t_fõldty≥_choi˚
 (
FIELDTYPE
 *,

351 
boﬁ
 (* c⁄° 
√xt_choi˚
)(
FIELD
 *,const *),

352 
boﬁ
 (* c⁄° 
¥ev_choi˚
)(
FIELD
 *,const *));

357 
FORM_EXPORT
(
FIELD
 *Ë
√w_fõld
 (,,,,,);

358 
FORM_EXPORT
(
FIELD
 *Ë
dup_fõld
 (FIELD *,,);

359 
FORM_EXPORT
(
FIELD
 *Ë
lök_fõld
 (FIELD *,,);

361 
FORM_EXPORT
(Ë
‰ì_fõld
 (
FIELD
 *);

362 
FORM_EXPORT
(Ë
fõld_öfo
 (c⁄° 
FIELD
 *,*,*,*,*,*,*);

363 
FORM_EXPORT
(Ë
dy«mic_fõld_öfo
 (c⁄° 
FIELD
 *,*,*,*);

364 
FORM_EXPORT
(Ë
£t_max_fõld
 ( 
FIELD
 *,);

365 
FORM_EXPORT
(Ë
move_fõld
 (
FIELD
 *,,);

366 
FORM_EXPORT
(Ë
£t_fõld_ty≥
 (
FIELD
 *,
FIELDTYPE
 *,...);

367 
FORM_EXPORT
(Ë
£t_√w_∑ge
 (
FIELD
 *,
boﬁ
);

368 
FORM_EXPORT
(Ë
£t_fõld_ju°
 (
FIELD
 *,);

369 
FORM_EXPORT
(Ë
fõld_ju°
 (c⁄° 
FIELD
 *);

370 
FORM_EXPORT
(Ë
£t_fõld_f‹e
 (
FIELD
 *,
chty≥
);

371 
FORM_EXPORT
(Ë
£t_fõld_back
 (
FIELD
 *,
chty≥
);

372 
FORM_EXPORT
(Ë
£t_fõld_∑d
 (
FIELD
 *,);

373 
FORM_EXPORT
(Ë
fõld_∑d
 (c⁄° 
FIELD
 *);

374 
FORM_EXPORT
(Ë
£t_fõld_buf„r
 (
FIELD
 *,,const *);

375 
FORM_EXPORT
(Ë
£t_fõld_°©us
 (
FIELD
 *,
boﬁ
);

376 
FORM_EXPORT
(Ë
£t_fõld_u£Ωå
 (
FIELD
 *, *);

377 
FORM_EXPORT
(Ë
£t_fõld_›ts
 (
FIELD
 *,
Fõld_O±i⁄s
);

378 
FORM_EXPORT
(Ë
fõld_›ts_⁄
 (
FIELD
 *,
Fõld_O±i⁄s
);

379 
FORM_EXPORT
(Ë
fõld_›ts_off
 (
FIELD
 *,
Fõld_O±i⁄s
);

381 
FORM_EXPORT
(
chty≥
Ë
fõld_f‹e
 (c⁄° 
FIELD
 *);

382 
FORM_EXPORT
(
chty≥
Ë
fõld_back
 (c⁄° 
FIELD
 *);

384 
FORM_EXPORT
(
boﬁ
Ë
√w_∑ge
 (c⁄° 
FIELD
 *);

385 
FORM_EXPORT
(
boﬁ
Ë
fõld_°©us
 (c⁄° 
FIELD
 *);

387 
FORM_EXPORT
(*Ë
fõld_¨g
 (c⁄° 
FIELD
 *);

389 
FORM_EXPORT
(*Ë
fõld_u£Ωå
 (c⁄° 
FIELD
 *);

391 
FORM_EXPORT
(
FIELDTYPE
 *Ë
fõld_ty≥
 (c⁄° 
FIELD
 *);

393 
FORM_EXPORT
(*Ë
fõld_buf„r
 (c⁄° 
FIELD
 *,);

395 
FORM_EXPORT
(
Fõld_O±i⁄s
Ë
fõld_›ts
 (c⁄° 
FIELD
 *);

401 
FORM_EXPORT
(
FORM
 *Ë
√w_f‹m
 (
FIELD
 **);

403 
FORM_EXPORT
(
FIELD
 **Ë
f‹m_fõlds
 (c⁄° 
FORM
 *);

404 
FORM_EXPORT
(
FIELD
 *Ë
cuºít_fõld
 (c⁄° 
FORM
 *);

406 
FORM_EXPORT
(
WINDOW
 *Ë
f‹m_wö
 (c⁄° 
FORM
 *);

407 
FORM_EXPORT
(
WINDOW
 *Ë
f‹m_sub
 (c⁄° 
FORM
 *);

409 
FORM_EXPORT
(
F‹m_Hook
Ë
f‹m_öô
 (c⁄° 
FORM
 *);

410 
FORM_EXPORT
(
F‹m_Hook
Ë
f‹m_ãrm
 (c⁄° 
FORM
 *);

411 
FORM_EXPORT
(
F‹m_Hook
Ë
fõld_öô
 (c⁄° 
FORM
 *);

412 
FORM_EXPORT
(
F‹m_Hook
Ë
fõld_ãrm
 (c⁄° 
FORM
 *);

414 
FORM_EXPORT
(Ë
‰ì_f‹m
 (
FORM
 *);

415 
FORM_EXPORT
(Ë
£t_f‹m_fõlds
 (
FORM
 *,
FIELD
 **);

416 
FORM_EXPORT
(Ë
fõld_cou¡
 (c⁄° 
FORM
 *);

417 
FORM_EXPORT
(Ë
£t_f‹m_wö
 (
FORM
 *,
WINDOW
 *);

418 
FORM_EXPORT
(Ë
£t_f‹m_sub
 (
FORM
 *,
WINDOW
 *);

419 
FORM_EXPORT
(Ë
£t_cuºít_fõld
 (
FORM
 *,
FIELD
 *);

420 
FORM_EXPORT
(Ë
unfocus_cuºít_fõld
 (
FORM
 *);

421 
FORM_EXPORT
(Ë
fõld_ödex
 (c⁄° 
FIELD
 *);

422 
FORM_EXPORT
(Ë
£t_f‹m_∑ge
 (
FORM
 *,);

423 
FORM_EXPORT
(Ë
f‹m_∑ge
 (c⁄° 
FORM
 *);

424 
FORM_EXPORT
(Ë
sˇÀ_f‹m
 (c⁄° 
FORM
 *,*,*);

425 
FORM_EXPORT
(Ë
£t_f‹m_öô
 (
FORM
 *,
F‹m_Hook
);

426 
FORM_EXPORT
(Ë
£t_f‹m_ãrm
 (
FORM
 *,
F‹m_Hook
);

427 
FORM_EXPORT
(Ë
£t_fõld_öô
 (
FORM
 *,
F‹m_Hook
);

428 
FORM_EXPORT
(Ë
£t_fõld_ãrm
 (
FORM
 *,
F‹m_Hook
);

429 
FORM_EXPORT
(Ë
po°_f‹m
 (
FORM
 *);

430 
FORM_EXPORT
(Ë
u≈o°_f‹m
 (
FORM
 *);

431 
FORM_EXPORT
(Ë
pos_f‹m_curs‹
 (
FORM
 *);

432 
FORM_EXPORT
(Ë
f‹m_drivî
 (
FORM
 *,);

433 #i‡
NCURSES_WIDECHAR


434 
FORM_EXPORT
(Ë
f‹m_drivî_w
 (
FORM
 *,,
wch¨_t
);

436 
FORM_EXPORT
(Ë
£t_f‹m_u£Ωå
 (
FORM
 *,*);

437 
FORM_EXPORT
(Ë
£t_f‹m_›ts
 (
FORM
 *,
F‹m_O±i⁄s
);

438 
FORM_EXPORT
(Ë
f‹m_›ts_⁄
 (
FORM
 *,
F‹m_O±i⁄s
);

439 
FORM_EXPORT
(Ë
f‹m_›ts_off
 (
FORM
 *,
F‹m_O±i⁄s
);

440 
FORM_EXPORT
(Ë
f‹m_ªque°_by_«me
 (const *);

442 
FORM_EXPORT
(c⁄° *Ë
f‹m_ªque°_«me
 ();

444 
FORM_EXPORT
(*Ë
f‹m_u£Ωå
 (c⁄° 
FORM
 *);

446 
FORM_EXPORT
(
F‹m_O±i⁄s
Ë
f‹m_›ts
 (c⁄° 
FORM
 *);

448 
FORM_EXPORT
(
boﬁ
Ë
d©a_ahód
 (c⁄° 
FORM
 *);

449 
FORM_EXPORT
(
boﬁ
Ë
d©a_behöd
 (c⁄° 
FORM
 *);

451 #i‡
NCURSES_SP_FUNCS


452 
FORM_EXPORT
(
FORM
 *Ë
NCURSES_SP_NAME
(
√w_f‹m
Ë(
SCREEN
*, 
FIELD
 **);

455 #ifde‡
__˝lu•lus


	@/usr/include/fstab.h

32 #i‚de‡
_FSTAB_H


33 
	#_FSTAB_H
 1

	)

35 
	~<„©uªs.h
>

48 
	#_PATH_FSTAB
 "/ëc/f°ab"

	)

49 
	#FSTAB
 "/ëc/f°ab"

	)

51 
	#FSTAB_RW
 "rw"

	)

52 
	#FSTAB_RQ
 "rq"

	)

53 
	#FSTAB_RO
 "ro"

	)

54 
	#FSTAB_SW
 "sw"

	)

55 
	#FSTAB_XX
 "xx"

	)

57 
	sf°ab


59 *
	mfs_•ec
;

60 *
	mfs_fûe
;

61 *
	mfs_vf°y≥
;

62 *
	mfs_m¡›s
;

63 c⁄° *
	mfs_ty≥
;

64 
	mfs_‰eq
;

65 
	mfs_∑s¢o
;

69 
__BEGIN_DECLS


71 
f°ab
 *
	$gëf£¡
 (Ë
__THROW
;

72 
f°ab
 *
	$gëfs•ec
 (c⁄° *
__«me
Ë
__THROW
;

73 
f°ab
 *
	$gëfsfûe
 (c⁄° *
__«me
Ë
__THROW
;

74 
	$£tf£¡
 (Ë
__THROW
;

75 
	$ídf£¡
 (Ë
__THROW
;

77 
__END_DECLS


	@/usr/include/fts.h

50 #i‚def 
_FTS_H


51 
	#_FTS_H
 1

	)

53 
	~<„©uªs.h
>

54 
	~<sys/ty≥s.h
>

58 
_·£¡
 *
	m·s_cur
;

59 
_·£¡
 *
	m·s_chûd
;

60 
_·£¡
 **
	m·s_¨øy
;

61 
dev_t
 
	m·s_dev
;

62 *
	m·s_∑th
;

63 
	m·s_rfd
;

64 
	m·s_∑thÀn
;

65 
	m·s_nôems
;

66 (*
	m·s_com∑r
) (const *, const *);

68 
	#FTS_COMFOLLOW
 0x0001

	)

69 
	#FTS_LOGICAL
 0x0002

	)

70 
	#FTS_NOCHDIR
 0x0004

	)

71 
	#FTS_NOSTAT
 0x0008

	)

72 
	#FTS_PHYSICAL
 0x0010

	)

73 
	#FTS_SEEDOT
 0x0020

	)

74 
	#FTS_XDEV
 0x0040

	)

75 
	#FTS_WHITEOUT
 0x0080

	)

76 
	#FTS_OPTIONMASK
 0x00f‡

	)

78 
	#FTS_NAMEONLY
 0x0100

	)

79 
	#FTS_STOP
 0x0200

	)

80 
	m·s_›ti⁄s
;

81 } 
	tFTS
;

83 #ifde‡
__USE_LARGEFILE64


85 
_·£¡64
 *
	m·s_cur
;

86 
_·£¡64
 *
	m·s_chûd
;

87 
_·£¡64
 **
	m·s_¨øy
;

88 
dev_t
 
	m·s_dev
;

89 *
	m·s_∑th
;

90 
	m·s_rfd
;

91 
	m·s_∑thÀn
;

92 
	m·s_nôems
;

93 (*
	m·s_com∑r
) (const *, const *);

94 
	m·s_›ti⁄s
;

95 } 
	tFTS64
;

98 
	s_·£¡
 {

99 
_·£¡
 *
	m·s_cy˛e
;

100 
_·£¡
 *
	m·s_∑ª¡
;

101 
_·£¡
 *
	m·s_lök
;

102 
	m·s_numbî
;

103 *
	m·s_poöãr
;

104 *
	m·s_ac˝©h
;

105 *
	m·s_∑th
;

106 
	m·s_î∫o
;

107 
	m·s_symfd
;

108 
	m·s_∑thÀn
;

109 
	m·s_«mñí
;

111 
öo_t
 
	m·s_öo
;

112 
dev_t
 
	m·s_dev
;

113 
∆ök_t
 
	m·s_∆ök
;

115 
	#FTS_ROOTPARENTLEVEL
 -1

	)

116 
	#FTS_ROOTLEVEL
 0

	)

117 
	m·s_Àvñ
;

119 
	#FTS_D
 1

	)

120 
	#FTS_DC
 2

	)

121 
	#FTS_DEFAULT
 3

	)

122 
	#FTS_DNR
 4

	)

123 
	#FTS_DOT
 5

	)

124 
	#FTS_DP
 6

	)

125 
	#FTS_ERR
 7

	)

126 
	#FTS_F
 8

	)

127 
	#FTS_INIT
 9

	)

128 
	#FTS_NS
 10

	)

129 
	#FTS_NSOK
 11

	)

130 
	#FTS_SL
 12

	)

131 
	#FTS_SLNONE
 13

	)

132 
	#FTS_W
 14

	)

133 
	m·s_öfo
;

135 
	#FTS_DONTCHDIR
 0x01

	)

136 
	#FTS_SYMFOLLOW
 0x02

	)

137 
	m·s_Êags
;

139 
	#FTS_AGAIN
 1

	)

140 
	#FTS_FOLLOW
 2

	)

141 
	#FTS_NOINSTR
 3

	)

142 
	#FTS_SKIP
 4

	)

143 
	m·s_ö°r
;

145 
°©
 *
	m·s_°©p
;

146 
	m·s_«me
[1];

147 } 
	tFTSENT
;

149 #ifde‡
__USE_LARGEFILE64


150 
	s_·£¡64
 {

151 
_·£¡64
 *
	m·s_cy˛e
;

152 
_·£¡64
 *
	m·s_∑ª¡
;

153 
_·£¡64
 *
	m·s_lök
;

154 
	m·s_numbî
;

155 *
	m·s_poöãr
;

156 *
	m·s_ac˝©h
;

157 *
	m·s_∑th
;

158 
	m·s_î∫o
;

159 
	m·s_symfd
;

160 
	m·s_∑thÀn
;

161 
	m·s_«mñí
;

163 
öo64_t
 
	m·s_öo
;

164 
dev_t
 
	m·s_dev
;

165 
∆ök_t
 
	m·s_∆ök
;

167 
	m·s_Àvñ
;

169 
	m·s_öfo
;

171 
	m·s_Êags
;

173 
	m·s_ö°r
;

175 
°©64
 *
	m·s_°©p
;

176 
	m·s_«me
[1];

177 } 
	tFTSENT64
;

180 
	g__BEGIN_DECLS


181 #i‚de‡
__USE_FILE_OFFSET64


182 
FTSENT
 *
·s_chûdªn
 (
FTS
 *, );

183 
·s_˛o£
 (
FTS
 *);

184 
FTS
 *
·s_›í
 (* const *, ,

185 (*)(c⁄° 
FTSENT
 **, const FTSENT **));

186 
FTSENT
 *
	`·s_ªad
 (
FTS
 *);

187 
	$·s_£t
 (
FTS
 *, 
FTSENT
 *, Ë
__THROW
;

189 #ifde‡
__REDIRECT


190 #i‚de‡
__USE_TIME_BITS64


191 
FTSENT
 *
	`__REDIRECT
 (
·s_chûdªn
, (
FTS
 *, ), 
·s64_chûdªn
);

192 
	`__REDIRECT
 (
·s_˛o£
, (
FTS
 *), 
·s64_˛o£
);

193 
FTS
 *
	`__REDIRECT
 (
·s_›í
, (* const *, ,

194 (*)(c⁄° 
FTSENT
 **, const FTSENT **)),

195 
·s64_›í
);

196 
FTSENT
 *
	`__REDIRECT
 (
·s_ªad
, (
FTS
 *), 
·s64_ªad
);

197 
	`__REDIRECT_NTH
 (
·s_£t
, (
FTS
 *, 
FTSENT
 *, ), 
·s64_£t
);

199 
FTSENT
 *
	`__REDIRECT
 (
·s_chûdªn
, (
FTS
 *, ), 
__·s64_chûdªn_time64
);

200 
	`__REDIRECT
 (
·s_˛o£
, (
FTS
 *), 
__·s64_˛o£_time64
);

201 
FTS
 *
	`__REDIRECT
 (
·s_›í
, (* const *, ,

202 (*)(c⁄° 
FTSENT
 **, const FTSENT **)),

203 
__·s64_›í_time64
);

204 
FTSENT
 *
	`__REDIRECT
 (
·s_ªad
, (
FTS
 *), 
__·s64_ªad_time64
);

205 
	`__REDIRECT_NTH
 (
·s_£t
, (
FTS
 *, 
FTSENT
 *, ),

206 
__·s64_£t_time64
);

209 #i‚de‡
__USE_TIME_BITS64


210 
	#·s_chûdªn
 
·s64_chûdªn


	)

211 
	#·s_˛o£
 
·s64_˛o£


	)

212 
	#·s_›í
 
·s64_›í


	)

213 
	#·s_ªad
 
·s64_ªad


	)

214 
	#·s_£t
 
·s64_£t


	)

219 #ifde‡
__USE_LARGEFILE64


220 #i‚de‡
__USE_TIME_BITS64


221 
FTSENT64
 *
	`·s64_chûdªn
 (
FTS64
 *, );

222 
	`·s64_˛o£
 (
FTS64
 *);

223 
FTS64
 *
	`·s64_›í
 (* const *, ,

224 (*)(c⁄° 
FTSENT64
 **, const FTSENT64 **));

225 
FTSENT64
 *
	`·s64_ªad
 (
FTS64
 *);

226 
	$·s64_£t
 (
FTS64
 *, 
FTSENT64
 *, Ë
__THROW
;

228 #ifde‡
__REDIRECT


229 
FTSENT
 *
	`__REDIRECT
 (
·s64_chûdªn
, (
FTS64
 *, ), 
__·s64_chûdªn_time64
);

230 
	`__REDIRECT
 (
·s64_˛o£
, (
FTS64
 *), 
__·s64_˛o£_time64
);

231 
FTS
 *
	`__REDIRECT
 (
·s64_›í
, (* const *, ,

232 (*)(c⁄° 
FTSENT64
 **, const FTSENT64 **)),

233 
__·s64_›í_time64
);

234 
FTSENT
 *
	`__REDIRECT
 (
·s64_ªad
, (
FTS64
 *), 
__·s64_ªad_time64
);

235 
	`__REDIRECT_NTH
 (
·s64_£t
, (
FTS64
 *, 
FTSENT64
 *, ),

236 
__·s64_£t_time64
);

238 
	#·s_chûdªn
 
__·s64_chûdªn_time64


	)

239 
	#·s_˛o£
 
__·s64_˛o£_time64


	)

240 
	#·s_›í
 
__·s64_›í_time64


	)

241 
	#·s_ªad
 
__·s64_ªad_time64


	)

242 
	#·s_£t
 
__·s64_£t_time64


	)

246 
__END_DECLS


	@/usr/include/ftw.h

22 #i‚de‡
_FTW_H


23 
	#_FTW_H
 1

	)

25 
	~<„©uªs.h
>

27 
	~<sys/ty≥s.h
>

28 
	~<sys/°©.h
>

31 
__BEGIN_DECLS


37 
	mFTW_F
,

38 
	#FTW_F
 
FTW_F


	)

39 
	mFTW_D
,

40 
	#FTW_D
 
FTW_D


	)

41 
	mFTW_DNR
,

42 
	#FTW_DNR
 
FTW_DNR


	)

43 
	mFTW_NS
,

44 
	#FTW_NS
 
FTW_NS


	)

46 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


48 
	mFTW_SL
,

49 
	#FTW_SL
 
FTW_SL


	)

52 #ifde‡
__USE_XOPEN_EXTENDED


54 
	mFTW_DP
,

55 
	#FTW_DP
 
FTW_DP


	)

56 
	mFTW_SLN


57 
	#FTW_SLN
 
FTW_SLN


	)

63 #ifde‡
__USE_XOPEN_EXTENDED


67 
	mFTW_PHYS
 = 1,

68 
	#FTW_PHYS
 
FTW_PHYS


	)

69 
	mFTW_MOUNT
 = 2,

71 
	#FTW_MOUNT
 
FTW_MOUNT


	)

72 
	mFTW_CHDIR
 = 4,

73 
	#FTW_CHDIR
 
FTW_CHDIR


	)

74 
	mFTW_DEPTH
 = 8

75 
	#FTW_DEPTH
 
FTW_DEPTH


	)

76 #ifde‡
__USE_GNU


78 
	mFTW_ACTIONRETVAL
 = 16

80 
	#FTW_ACTIONRETVAL
 
FTW_ACTIONRETVAL


	)

84 #ifde‡
__USE_GNU


88 
	mFTW_CONTINUE
 = 0,

90 
	#FTW_CONTINUE
 
FTW_CONTINUE


	)

91 
	mFTW_STOP
 = 1,

93 
	#FTW_STOP
 
FTW_STOP


	)

94 
	mFTW_SKIP_SUBTREE
 = 2,

97 
	#FTW_SKIP_SUBTREE
 
FTW_SKIP_SUBTREE


	)

98 
	mFTW_SKIP_SIBLINGS
 = 3,

100 
	#FTW_SKIP_SIBLINGS
 
FTW_SKIP_SIBLINGS


	)

105 
	sFTW


107 
	mba£
;

108 
	mÀvñ
;

114 (*
	t__·w_func_t
Ë(c⁄° *
	t__fûíame
,

115 c⁄° 
	t°©
 *
	t__°©us
, 
	t__Êag
);

116 #ifde‡
__USE_LARGEFILE64


117 (*
	t__·w64_func_t
Ë(c⁄° *
	t__fûíame
,

118 c⁄° 
	t°©64
 *
	t__°©us
, 
	t__Êag
);

120 #ifde‡
__USE_XOPEN_EXTENDED


121 (*
	t__n·w_func_t
Ë(c⁄° *
	t__fûíame
,

122 c⁄° 
	t°©
 *
	t__°©us
, 
	t__Êag
,

123 
	tFTW
 *
	t__öfo
);

124 #ifde‡
__USE_LARGEFILE64


125 (*
	t__n·w64_func_t
Ë(c⁄° *
	t__fûíame
,

126 c⁄° 
	t°©64
 *
	t__°©us
,

127 
	t__Êag
, 
	tFTW
 *
	t__öfo
);

135 #i‚de‡
__USE_FILE_OFFSET64


136 
	$·w
 (c⁄° *
__dú
, 
__·w_func_t
 
__func
, 
__des¸ùt‹s
)

137 
	`__n⁄nuŒ
 ((1, 2));

139 #ifde‡
__REDIRECT


140 #i‚de‡
__USE_TIME_BITS64


141 
	`__REDIRECT
 (
·w
, (c⁄° *
__dú
, 
__·w_func_t
 
__func
,

142 
__des¸ùt‹s
), 
·w64
Ë
	`__n⁄nuŒ
 ((1, 2));

144 
	`__REDIRECT
 (
·w
, (c⁄° *
__dú
, 
__·w_func_t
 
__func
,

145 
__des¸ùt‹s
), 
__·w64_time64
)

146 
	`__n⁄nuŒ
 ((1, 2));

149 #i‚de‡
__USE_TIME_BITS64


150 
	#·w
 
·w64


	)

152 
	#·w
 
__·w64_time64


	)

156 #ifde‡
__USE_LARGEFILE64


157 #i‚de‡
__USE_TIME_BITS64


158 
	$·w64
 (c⁄° *
__dú
, 
__·w64_func_t
 
__func
,

159 
__des¸ùt‹s
Ë
	`__n⁄nuŒ
 ((1, 2));

161 #ifde‡
__REDIRECT


162 
	`__REDIRECT
 (
·w64
, (c⁄° *
__dú
, 
__·w64_func_t
 
__func
,

163 
__des¸ùt‹s
),

164 
__·w64_time64
)

165 
	`__n⁄nuŒ
 ((1, 2));

167 
	#n·w64
 
__n·w64_time64


	)

172 #ifde‡
__USE_XOPEN_EXTENDED


178 #i‚de‡
__USE_FILE_OFFSET64


179 
	$n·w
 (c⁄° *
__dú
, 
__n·w_func_t
 
__func
, 
__des¸ùt‹s
,

180 
__Êag
Ë
	`__n⁄nuŒ
 ((1, 2));

182 #ifde‡
__REDIRECT


183 #i‚de‡
__USE_TIME_BITS64


184 
	`__REDIRECT
 (
n·w
, (c⁄° *
__dú
, 
__n·w_func_t
 
__func
,

185 
__des¸ùt‹s
, 
__Êag
), 
n·w64
)

186 
	`__n⁄nuŒ
 ((1, 2));

188 
	`__REDIRECT
 (
n·w
, (c⁄° *
__dú
, 
__n·w_func_t
 
__func
,

189 
__des¸ùt‹s
, 
__Êag
), 
__n·w64_time64
)

190 
	`__n⁄nuŒ
 ((1, 2));

193 #i‚de‡
__USE_TIME_BITS64


194 
	#n·w
 
n·w64


	)

196 
	#n·w
 
__n·w64_time64


	)

200 #ifde‡
__USE_LARGEFILE64


201 #i‚de‡
__USE_TIME_BITS64


202 
	$n·w64
 (c⁄° *
__dú
, 
__n·w64_func_t
 
__func
,

203 
__des¸ùt‹s
, 
__Êag
Ë
	`__n⁄nuŒ
 ((1, 2));

205 #ifde‡
__REDIRECT


206 
	`__REDIRECT
 (
n·w64
, (c⁄° *
__dú
, 
__n·w64_func_t
 
__func
,

207 
__des¸ùt‹s
, 
__Êag
),

208 
__n·w64_time64
)

209 
	`__n⁄nuŒ
 ((1, 2));

211 
	#n·w64
 
__n·w64_time64


	)

217 
__END_DECLS


	@/usr/include/gawkapi.h

47 #i‚de‡
_GAWK_API_H


48 
	#_GAWK_API_H


	)

104 #ifde‡
__˝lu•lus


109 #ifde‡
GAWK


110 
	#awk_c⁄°


	)

112 
	#awk_c⁄°
 c⁄°

	)

115 
	eawk_boﬁ
 {

116 
awk_Ál£
 = 0,

117 
awk_åue


118 } 
	tawk_boﬁ_t
;

131 
awk_boﬁ_t
 
u£_ch¨s
;

132 
size_t
 
nf
;

133 
	sawk_fõld_öfo
 {

134 
size_t
 
skù
;

135 
size_t
 
Àn
;

136 } 
fõlds
[1];

137 } 
	tawk_fõldwidth_öfo_t
;

143 
	#awk_fõldwidth_öfo_size
(
NF
Ë((
awk_fõldwidth_öfo_t
) + \

144 (((
NF
)-1Ë* (
awk_fõld_öfo
)))

	)

147 
	sawk_öput
 {

148 c⁄° *
«me
;

149 
fd
;

150 
	#INVALID_HANDLE
 (-1)

	)

151 *
›aque
;

185 (*
gë_ªc‹d
)(**
out
, 
awk_öput
 *
iobuf
, *
îrcode
,

186 **
π_°¨t
, 
size_t
 *
π_Àn
,

187 c⁄° 
awk_fõldwidth_öfo_t
 **
fõld_width
);

193 
ssize_t
 (*
ªad_func
)();

200 (*
˛o£_func
)(
awk_öput
 *
iobuf
);

203 
°©
 
sbuf
;

205 } 
	tawk_öput_buf_t
;

207 
	sawk_öput_∑r£r
 {

208 c⁄° *
«me
;

215 
awk_boﬁ_t
 (*
ˇn_èke_fûe
)(c⁄° 
awk_öput_buf_t
 *
iobuf
);

224 
awk_boﬁ_t
 (*
èke_c⁄åﬁ_of
)(
awk_öput_buf_t
 *
iobuf
);

226 
awk_c⁄°
 
awk_öput_∑r£r
 *awk_c⁄° 
√xt
;

227 } 
	tawk_öput_∑r£r_t
;

234 
	sawk_ouçut_buf
 {

235 c⁄° *
«me
;

236 c⁄° *
mode
;

237 
FILE
 *
Â
;

238 
awk_boﬁ_t
 
ªdúe˘ed
;

239 *
›aque
;

245 
size_t
 (*
gawk_fwrôe
)(c⁄° *
buf
, size_à
size
, size_à
cou¡
,

246 
FILE
 *
Â
, *
›aque
);

247 (*
gawk_fÊush
)(
FILE
 *
Â
, *
›aque
);

248 (*
gawk_„º‹
)(
FILE
 *
Â
, *
›aque
);

249 (*
gawk_f˛o£
)(
FILE
 *
Â
, *
›aque
);

250 } 
	tawk_ouçut_buf_t
;

253 
	sawk_ouçut_wøµî
 {

254 c⁄° *
«me
;

261 
awk_boﬁ_t
 (*
ˇn_èke_fûe
)(c⁄° 
awk_ouçut_buf_t
 *
outbuf
);

270 
awk_boﬁ_t
 (*
èke_c⁄åﬁ_of
)(
awk_ouçut_buf_t
 *
outbuf
);

272 
awk_c⁄°
 
awk_ouçut_wøµî
 *awk_c⁄° 
√xt
;

273 } 
	tawk_ouçut_wøµî_t
;

276 
	sawk_two_way_¥o˚ss‹
 {

277 c⁄° *
«me
;

284 
awk_boﬁ_t
 (*
ˇn_èke_two_way
)(c⁄° *
«me
);

293 
awk_boﬁ_t
 (*
èke_c⁄åﬁ_of
)(c⁄° *
«me
, 
awk_öput_buf_t
 *
öbuf
,

294 
awk_ouçut_buf_t
 *
outbuf
);

296 
awk_c⁄°
 
awk_two_way_¥o˚ss‹
 *awk_c⁄° 
√xt
;

297 } 
	tawk_two_way_¥o˚ss‹_t
;

299 
	#gawk_≠i_maj‹_vîsi⁄
 3

	)

300 
	#gawk_≠i_mö‹_vîsi⁄
 0

	)

304 
GAWK_API_MAJOR_VERSION
 = 
gawk_≠i_maj‹_vîsi⁄
,

305 
GAWK_API_MINOR_VERSION
 = 
gawk_≠i_mö‹_vîsi⁄


321 
	sawk_°rög
 {

322 *
°r
;

323 
size_t
 
Àn
;

324 } 
	tawk_°rög_t
;

326 
	eAWK_NUMBER_TYPE
 {

327 
AWK_NUMBER_TYPE_DOUBLE
,

328 
AWK_NUMBER_TYPE_MPFR
,

329 
AWK_NUMBER_TYPE_MPZ


332 
	sawk_numbî
 {

333 
d
;

334 
AWK_NUMBER_TYPE
 
ty≥
;

335 *
±r
;

336 } 
	tawk_numbî_t
;

339 *
	tawk_¨øy_t
;

342 *
	tawk_sˇœr_t
;

345 *
	tawk_vÆue_cookõ_t
;

355 
AWK_UNDEFINED
,

356 
AWK_NUMBER
,

357 
AWK_STRING
,

358 
AWK_REGEX
,

359 
AWK_STRNUM
,

360 
AWK_ARRAY
,

361 
AWK_SCALAR
,

362 
AWK_VALUE_COOKIE


363 } 
	tawk_vÆty≥_t
;

369 
	sawk_vÆue
 {

370 
awk_vÆty≥_t
 
vÆ_ty≥
;

372 
awk_°rög_t
 
s
;

373 
awk_numbî_t
 
n
;

374 
awk_¨øy_t
 
a
;

375 
awk_sˇœr_t
 
s˛
;

376 
awk_vÆue_cookõ_t
 
vc
;

377 } 
u
;

378 
	#°r_vÆue
 
u
.
s


	)

379 
	#°∫um_vÆue
 
°r_vÆue


	)

380 
	#ªgex_vÆue
 
°r_vÆue


	)

381 
	#num_vÆue
 
u
.
n
.
d


	)

382 
	#num_ty≥
 
u
.
n
.
ty≥


	)

383 
	#num_±r
 
u
.
n
.
±r


	)

384 
	#¨øy_cookõ
 
u
.
a


	)

385 
	#sˇœr_cookõ
 
u
.
s˛


	)

386 
	#vÆue_cookõ
 
u
.
vc


	)

387 } 
	tawk_vÆue_t
;

397 
	sawk_ñemít
 {

399 
awk_ñemít
 *
√xt
;

401 
AWK_ELEMENT_DEFAULT
 = 0,

402 
AWK_ELEMENT_DELETE
 = 1

404 } 
Êags
;

405 
awk_vÆue_t
 
ödex
;

406 
awk_vÆue_t
 
vÆue
;

407 } 
	tawk_ñemít_t
;

413 
	sawk_Ê©_¨øy
 {

414 
awk_c⁄°
 *awk_c⁄° 
›aque1
;

415 
awk_c⁄°
 *awk_c⁄° 
›aque2
;

416 
awk_c⁄°
 
size_t
 
cou¡
;

417 
awk_ñemít_t
 
ñemíts
[1];

418 } 
	tawk_Ê©_¨øy_t
;

445 
	sawk_ext_func
 {

446 c⁄° *
«me
;

447 
awk_vÆue_t
 *(*c⁄° 
fun˘i⁄
)(
num_a˘uÆ_¨gs
,

448 
awk_vÆue_t
 *
ªsu…
,

449 
awk_ext_func
 *
föfo
);

450 c⁄° 
size_t
 
max_ex≥˘ed_¨gs
;

451 c⁄° 
size_t
 
mö_ªquúed_¨gs
;

452 
awk_boﬁ_t
 
suµªss_löt
;

453 *
d©a
;

454 } 
	tawk_ext_func_t
;

456 *
	tawk_ext_id_t
;

465 
	sgawk_≠i
 {

469 
awk_c⁄°
 
maj‹_vîsi⁄
;

470 
awk_c⁄°
 
mö‹_vîsi⁄
;

473 
awk_c⁄°
 
gmp_maj‹_vîsi⁄
;

474 
awk_c⁄°
 
gmp_mö‹_vîsi⁄
;

475 
awk_c⁄°
 
mp‰_maj‹_vîsi⁄
;

476 
awk_c⁄°
 
mp‰_mö‹_vîsi⁄
;

483 
	#DO_FLAGS_SIZE
 6

	)

484 
awk_c⁄°
 
do_Êags
[
DO_FLAGS_SIZE
];

486 
	#gawk_do_löt
 0

	)

487 
	#gawk_do_åadôi⁄Æ
 1

	)

488 
	#gawk_do_¥ofûe
 2

	)

489 
	#gawk_do_ßndbox
 3

	)

490 
	#gawk_do_debug
 4

	)

491 
	#gawk_do_mp‰
 5

	)

501 
awk_boﬁ_t
 (*
≠i_add_ext_func
)(
awk_ext_id_t
 
id
, c⁄° *
«me_•a˚
,

502 
awk_ext_func_t
 *
func
);

505 (*
≠i_ªgi°î_öput_∑r£r
)(
awk_ext_id_t
 
id
,

506 
awk_öput_∑r£r_t
 *
öput_∑r£r
);

509 (*
≠i_ªgi°î_ouçut_wøµî
)(
awk_ext_id_t
 
id
,

510 
awk_ouçut_wøµî_t
 *
ouçut_wøµî
);

513 (*
≠i_ªgi°î_two_way_¥o˚ss‹
)(
awk_ext_id_t
 
id
,

514 
awk_two_way_¥o˚ss‹_t
 *
two_way_¥o˚ss‹
);

525 (*
≠i_awk_©exô
)(
awk_ext_id_t
 
id
,

526 (*
fun˝
)(*
d©a
, 
exô_°©us
),

527 *
¨g0
);

530 (*
≠i_ªgi°î_ext_vîsi⁄
)(
awk_ext_id_t
 
id
, c⁄° *
vîsi⁄
);

533 (*
≠i_Áèl
)(
awk_ext_id_t
 
id
, c⁄° *
f‹m©
, ...);

534 (*
≠i_w¨nög
)(
awk_ext_id_t
 
id
, c⁄° *
f‹m©
, ...);

535 (*
≠i_lötw¨n
)(
awk_ext_id_t
 
id
, c⁄° *
f‹m©
, ...);

536 (*
≠i_n⁄Áèl
)(
awk_ext_id_t
 
id
, c⁄° *
f‹m©
, ...);

539 (*
≠i_upd©e_ERRNO_öt
)(
awk_ext_id_t
 
id
, 
î∫o_vÆ
);

540 (*
≠i_upd©e_ERRNO_°rög
)(
awk_ext_id_t
 
id
, c⁄° *
°rög
);

541 (*
≠i_un£t_ERRNO
)(
awk_ext_id_t
 
id
);

593 
awk_boﬁ_t
 (*
≠i_gë_¨gumít
)(
awk_ext_id_t
 
id
, 
size_t
 
cou¡
,

594 
awk_vÆty≥_t
 
w™ãd
,

595 
awk_vÆue_t
 *
ªsu…
);

603 
awk_boﬁ_t
 (*
≠i_£t_¨gumít
)(
awk_ext_id_t
 
id
,

604 
size_t
 
cou¡
,

605 
awk_¨øy_t
 
¨øy
);

628 
awk_boﬁ_t
 (*
≠i_sym_lookup
)(
awk_ext_id_t
 
id
,

629 c⁄° *
«me_•a˚
,

630 c⁄° *
«me
,

631 
awk_vÆty≥_t
 
w™ãd
,

632 
awk_vÆue_t
 *
ªsu…
);

640 
awk_boﬁ_t
 (*
≠i_sym_upd©e
)(
awk_ext_id_t
 
id
,

641 c⁄° *
«me_•a˚
,

642 c⁄° *
«me
,

643 
awk_vÆue_t
 *
vÆue
);

665 
awk_boﬁ_t
 (*
≠i_sym_lookup_sˇœr
)(
awk_ext_id_t
 
id
,

666 
awk_sˇœr_t
 
cookõ
,

667 
awk_vÆty≥_t
 
w™ãd
,

668 
awk_vÆue_t
 *
ªsu…
);

685 
awk_boﬁ_t
 (*
≠i_sym_upd©e_sˇœr
)(
awk_ext_id_t
 
id
,

686 
awk_sˇœr_t
 
cookõ
, 
awk_vÆue_t
 *
vÆue
);

698 
awk_boﬁ_t
 (*
≠i_¸óã_vÆue
)(
awk_ext_id_t
 
id
, 
awk_vÆue_t
 *
vÆue
,

699 
awk_vÆue_cookõ_t
 *
ªsu…
);

705 
awk_boﬁ_t
 (*
≠i_ªÀa£_vÆue
)(
awk_ext_id_t
 
id
, 
awk_vÆue_cookõ_t
 
vc
);

713 
awk_boﬁ_t
 (*
≠i_gë_ñemít_cou¡
)(
awk_ext_id_t
 
id
,

714 
awk_¨øy_t
 
a_cookõ
, 
size_t
 *
cou¡
);

722 
awk_boﬁ_t
 (*
≠i_gë_¨øy_ñemít
)(
awk_ext_id_t
 
id
,

723 
awk_¨øy_t
 
a_cookõ
,

724 c⁄° 
awk_vÆue_t
 *c⁄° 
ödex
,

725 
awk_vÆty≥_t
 
w™ãd
,

726 
awk_vÆue_t
 *
ªsu…
);

734 
awk_boﬁ_t
 (*
≠i_£t_¨øy_ñemít
)(
awk_ext_id_t
 
id
, 
awk_¨øy_t
 
a_cookõ
,

735 c⁄° 
awk_vÆue_t
 *c⁄° 
ödex
,

736 c⁄° 
awk_vÆue_t
 *c⁄° 
vÆue
);

742 
awk_boﬁ_t
 (*
≠i_dñ_¨øy_ñemít
)(
awk_ext_id_t
 
id
,

743 
awk_¨øy_t
 
a_cookõ
, c⁄° 
awk_vÆue_t
* c⁄° 
ödex
);

746 
awk_¨øy_t
 (*
≠i_¸óã_¨øy
)(
awk_ext_id_t
 
id
);

749 
awk_boﬁ_t
 (*
≠i_˛ór_¨øy
)(
awk_ext_id_t
 
id
, 
awk_¨øy_t
 
a_cookõ
);

757 
awk_boﬁ_t
 (*
≠i_Ê©ãn_¨øy_ty≥d
)(
awk_ext_id_t
 
id
,

758 
awk_¨øy_t
 
a_cookõ
,

759 
awk_Ê©_¨øy_t
 **
d©a
,

760 
awk_vÆty≥_t
 
ödex_ty≥
,áwk_vÆty≥_à
vÆue_ty≥
);

763 
awk_boﬁ_t
 (*
≠i_ªÀa£_Ê©ã√d_¨øy
)(
awk_ext_id_t
 
id
,

764 
awk_¨øy_t
 
a_cookõ
,

765 
awk_Ê©_¨øy_t
 *
d©a
);

772 *(*
≠i_mÆloc
)(
size_t
 
size
);

773 *(*
≠i_ˇŒoc
)(
size_t
 
nmemb
, size_à
size
);

774 *(*
≠i_ªÆloc
)(*
±r
, 
size_t
 
size
);

775 (*
≠i_‰ì
)(*
±r
);

782 *(*
≠i_gë_mp‰
)(
awk_ext_id_t
 
id
);

789 *(*
≠i_gë_mpz
)(
awk_ext_id_t
 
id
);

825 
awk_boﬁ_t
 (*
≠i_gë_fûe
)(
awk_ext_id_t
 
id
,

826 c⁄° *
«me
,

827 
size_t
 
«me_Àn
,

828 c⁄° *
fûëy≥
,

829 
fd
,

834 c⁄° 
awk_öput_buf_t
 **
ibuÂ
,

835 c⁄° 
awk_ouçut_buf_t
 **
obuÂ
);

836 } 
	tgawk_≠i_t
;

838 #i‚de‡
GAWK


844 
	#do_löt
 (
≠i
->
do_Êags
[
gawk_do_löt
])

	)

845 
	#do_åadôi⁄Æ
 (
≠i
->
do_Êags
[
gawk_do_åadôi⁄Æ
])

	)

846 
	#do_¥ofûe
 (
≠i
->
do_Êags
[
gawk_do_¥ofûe
])

	)

847 
	#do_ßndbox
 (
≠i
->
do_Êags
[
gawk_do_ßndbox
])

	)

848 
	#do_debug
 (
≠i
->
do_Êags
[
gawk_do_debug
])

	)

849 
	#do_mp‰
 (
≠i
->
do_Êags
[
gawk_do_mp‰
])

	)

851 
	#gë_¨gumít
(
cou¡
, 
w™ãd
, 
ªsu…
) \

852 (
≠i
->
	`≠i_gë_¨gumít
(
ext_id
, 
cou¡
, 
w™ãd
, 
ªsu…
))

	)

853 
	#£t_¨gumít
(
cou¡
, 
√w_¨øy
) \

854 (
≠i
->
	`≠i_£t_¨gumít
(
ext_id
, 
cou¡
, 
√w_¨øy
))

	)

856 
	#Áèl
 
≠i
->
≠i_Áèl


	)

857 
	#n⁄Áèl
 
≠i
->
≠i_n⁄Áèl


	)

858 
	#w¨nög
 
≠i
->
≠i_w¨nög


	)

859 
	#lötw¨n
 
≠i
->
≠i_lötw¨n


	)

861 
	#ªgi°î_öput_∑r£r
(
∑r£r
Ë(
≠i
->
	`≠i_ªgi°î_öput_∑r£r
(
ext_id
,Ö¨£r))

	)

862 
	#ªgi°î_ouçut_wøµî
(
wøµî
Ë(
≠i
->
	`≠i_ªgi°î_ouçut_wøµî
(
ext_id
, wøµî))

	)

863 
	#ªgi°î_two_way_¥o˚ss‹
(
¥o˚ss‹
) \

864 (
≠i
->
	`≠i_ªgi°î_two_way_¥o˚ss‹
(
ext_id
, 
¥o˚ss‹
))

	)

866 
	#upd©e_ERRNO_öt
(
e
Ë(
≠i
->
	`≠i_upd©e_ERRNO_öt
(
ext_id
,É))

	)

867 
	#upd©e_ERRNO_°rög
(
°r
) \

868 (
≠i
->
	`≠i_upd©e_ERRNO_°rög
(
ext_id
, 
°r
))

	)

869 
	#un£t_ERRNO
(Ë(
≠i
->
	`≠i_un£t_ERRNO
(
ext_id
))

	)

871 
	#add_ext_func
(
ns
, 
func
Ë(
≠i
->
	`≠i_add_ext_func
(
ext_id
,Çs, func))

	)

872 
	#awk_©exô
(
fun˝
, 
¨g0
Ë(
≠i
->
	`≠i_awk_©exô
(
ext_id
, fun˝,árg0))

	)

874 
	#sym_lookup
(
«me
, 
w™ãd
, 
ªsu…
) \

875 
	`sym_lookup_ns
("", 
«me
, 
w™ãd
, 
ªsu…
)

	)

876 
	#sym_upd©e
(
«me
, 
vÆue
) \

877 
	`sym_upd©e_ns
("", 
«me
, 
vÆue
)

	)

879 
	#sym_lookup_ns
(
«me_•a˚
, 
«me
, 
w™ãd
, 
ªsu…
) \

880 (
≠i
->
	`≠i_sym_lookup
(
ext_id
, 
«me_•a˚
, 
«me
, 
w™ãd
, 
ªsu…
))

	)

881 
	#sym_upd©e_ns
(
«me_•a˚
, 
«me
, 
vÆue
) \

882 (
≠i
->
	`≠i_sym_upd©e
(
ext_id
, 
«me_•a˚
, 
«me
, 
vÆue
))

	)

884 
	#sym_lookup_sˇœr
(
sˇœr_cookõ
, 
w™ãd
, 
ªsu…
) \

885 (
≠i
->
	`≠i_sym_lookup_sˇœr
(
ext_id
, 
sˇœr_cookõ
, 
w™ãd
, 
ªsu…
))

	)

886 
	#sym_upd©e_sˇœr
(
sˇœr_cookõ
, 
vÆue
) \

887 (
≠i
->
≠i_sym_upd©e_sˇœr
)(
ext_id
, 
sˇœr_cookõ
, 
vÆue
)

	)

889 
	#gë_¨øy_ñemít
(
¨øy
, 
ödex
, 
w™ãd
, 
ªsu…
) \

890 (
≠i
->
	`≠i_gë_¨øy_ñemít
(
ext_id
, 
¨øy
, 
ödex
, 
w™ãd
, 
ªsu…
))

	)

892 
	#£t_¨øy_ñemít
(
¨øy
, 
ödex
, 
vÆue
) \

893 (
≠i
->
	`≠i_£t_¨øy_ñemít
(
ext_id
, 
¨øy
, 
ödex
, 
vÆue
))

	)

895 
	#£t_¨øy_ñemít_by_ñem
(
¨øy
, 
ñem
) \

896 (
≠i
->
	`≠i_£t_¨øy_ñemít
(
ext_id
, 
¨øy
, & (
ñem
)->
ödex
, & (ñem)->
vÆue
))

	)

898 
	#dñ_¨øy_ñemít
(
¨øy
, 
ödex
) \

899 (
≠i
->
	`≠i_dñ_¨øy_ñemít
(
ext_id
, 
¨øy
, 
ödex
))

	)

901 
	#gë_ñemít_cou¡
(
¨øy
, 
cou¡_p
) \

902 (
≠i
->
	`≠i_gë_ñemít_cou¡
(
ext_id
, 
¨øy
, 
cou¡_p
))

	)

904 
	#¸óã_¨øy
(Ë(
≠i
->
	`≠i_¸óã_¨øy
(
ext_id
))

	)

906 
	#˛ór_¨øy
(
¨øy
Ë(
≠i
->
	`≠i_˛ór_¨øy
(
ext_id
,áºay))

	)

908 
	#Ê©ãn_¨øy_ty≥d
(
¨øy
, 
d©a
, 
ödex_ty≥
, 
vÆue_ty≥
) \

909 (
≠i
->
	`≠i_Ê©ãn_¨øy_ty≥d
(
ext_id
, 
¨øy
, 
d©a
, 
ödex_ty≥
, 
vÆue_ty≥
))

	)

911 
	#Ê©ãn_¨øy
(
¨øy
, 
d©a
) \

912 
	`Ê©ãn_¨øy_ty≥d
(
¨øy
, 
d©a
, 
AWK_STRING
, 
AWK_UNDEFINED
)

	)

914 
	#ªÀa£_Ê©ã√d_¨øy
(
¨øy
, 
d©a
) \

915 (
≠i
->
	`≠i_ªÀa£_Ê©ã√d_¨øy
(
ext_id
, 
¨øy
, 
d©a
))

	)

917 
	#gawk_mÆloc
(
size
Ë(
≠i
->
	`≠i_mÆloc
(size))

	)

918 
	#gawk_ˇŒoc
(
nmemb
, 
size
Ë(
≠i
->
	`≠i_ˇŒoc
“memb, size))

	)

919 
	#gawk_ªÆloc
(
±r
, 
size
Ë(
≠i
->
	`≠i_ªÆloc
’å, size))

	)

920 
	#gawk_‰ì
(
±r
Ë(
≠i
->
	`≠i_‰ì
’å))

	)

922 
	#¸óã_vÆue
(
vÆue
, 
ªsu…
) \

923 (
≠i
->
	`≠i_¸óã_vÆue
(
ext_id
, 
vÆue
,
ªsu…
))

	)

925 
	#ªÀa£_vÆue
(
vÆue
) \

926 (
≠i
->
	`≠i_ªÀa£_vÆue
(
ext_id
, 
vÆue
))

	)

928 
	#gë_fûe
(
«me
, 
«mñí
, 
fûëy≥
, 
fd
, 
ibuf
, 
obuf
) \

929 (
≠i
->
	`≠i_gë_fûe
(
ext_id
, 
«me
, 
«mñí
, 
fûëy≥
, 
fd
, 
ibuf
, 
obuf
))

	)

931 
	#gë_mp‰_±r
(Ë(
≠i
->
	`≠i_gë_mp‰
(
ext_id
))

	)

932 
	#gë_mpz_±r
(Ë(
≠i
->
	`≠i_gë_mpz
(
ext_id
))

	)

934 
	#ªgi°î_ext_vîsi⁄
(
vîsi⁄
) \

935 (
≠i
->
	`≠i_ªgi°î_ext_vîsi⁄
(
ext_id
, 
vîsi⁄
))

	)

937 
	#emÆloc
(
poöãr
, 
ty≥
, 
size
, 
mesßge
) \

939 i‡((
poöãr
 = (
ty≥
Ë
	`gawk_mÆloc
(
size
)) == 0) \

940 
	`Áèl
(
ext_id
, "%s: mÆlo¯o‡%d byã†Áûed", 
mesßge
, 
size
); \

941 } 0)

	)

943 
	#ezÆloc
(
poöãr
, 
ty≥
, 
size
, 
mesßge
) \

945 i‡((
poöãr
 = (
ty≥
Ë
	`gawk_ˇŒoc
(1, 
size
)) == 0) \

946 
	`Áèl
(
ext_id
, "%s: cÆlo¯o‡%d byã†Áûed", 
mesßge
, 
size
); \

947 } 0)

	)

949 
	#îóŒoc
(
poöãr
, 
ty≥
, 
size
, 
mesßge
) \

951 i‡((
poöãr
 = (
ty≥
Ë
	`gawk_ªÆloc
’oöãr, 
size
)) == 0) \

952 
	`Áèl
(
ext_id
, "%s:ÑóŒo¯o‡%d byã†Áûed", 
mesßge
, 
size
); \

953 } 0)

	)

959 
ölöe
 
awk_vÆue_t
 *

960 
r_make_°rög_ty≥
(c⁄° 
gawk_≠i_t
 *
≠i
,

961 
awk_ext_id_t
 
ext_id
,

962 c⁄° *
°rög
,

963 
size_t
 
Àngth
,

964 
awk_boﬁ_t
 
du∂iˇã
,

965 
awk_vÆue_t
 *
ªsu…
,

966 
awk_vÆty≥_t
 
vÆ_ty≥
)

968 *
˝
 = 
NULL
;

970 
mem£t
(
ªsu…
, 0, (*result));

972 
ªsu…
->
vÆ_ty≥
 = val_type;

973 
ªsu…
->
°r_vÆue
.
Àn
 = 
Àngth
;

975 i‡(
du∂iˇã
) {

976 
emÆloc
(
˝
, *, 
Àngth
 + 1, "r_make_string");

977 
mem˝y
(
˝
, 
°rög
, 
Àngth
);

978 
˝
[
Àngth
] = '\0';

979 
ªsu…
->
°r_vÆue
.
°r
 = 
˝
;

981 
ªsu…
->
°r_vÆue
.
°r
 = (*Ë
°rög
;

984  
ªsu…
;

989 
ölöe
 
awk_vÆue_t
 *

990 
r_make_°rög
(c⁄° 
gawk_≠i_t
 *
≠i
,

991 
awk_ext_id_t
 
ext_id
,

992 c⁄° *
°rög
,

993 
size_t
 
Àngth
,

994 
awk_boﬁ_t
 
du∂iˇã
,

995 
awk_vÆue_t
 *
ªsu…
)

997  
r_make_°rög_ty≥
(
≠i
, 
ext_id
, 
°rög
, 
Àngth
, 
du∂iˇã
, 
ªsu…
, 
AWK_STRING
);

1000 
	#make_c⁄°_°rög
(
°r
, 
Àn
, 
ªsu…
Ë
	`r_make_°rög
(
≠i
, 
ext_id
, så,Üí, 
awk_åue
,Ñesu…)

	)

1001 
	#make_mÆlo˚d_°rög
(
°r
, 
Àn
, 
ªsu…
Ë
	`r_make_°rög
(
≠i
, 
ext_id
, så,Üí, 
awk_Ál£
,Ñesu…)

	)

1003 
	#make_c⁄°_ªgex
(
°r
, 
Àn
, 
ªsu…
Ë
	`r_make_°rög_ty≥
(
≠i
, 
ext_id
, så,Üí, 
awk_åue
,Ñesu…, 
AWK_REGEX
)

	)

1004 
	#make_mÆlo˚d_ªgex
(
°r
, 
Àn
, 
ªsu…
Ë
	`r_make_°rög_ty≥
(
≠i
, 
ext_id
, så,Üí, 
awk_Ál£
,Ñesu…, 
AWK_REGEX
)

	)

1011 
	#make_c⁄°_u£r_öput
(
°r
, 
Àn
, 
ªsu…
Ë
	`r_make_°rög_ty≥
(
≠i
, 
ext_id
, så,Üí, 1,Ñesu…, 
AWK_STRNUM
)

	)

1012 
	#make_mÆlo˚d_u£r_öput
(
°r
, 
Àn
, 
ªsu…
Ë
	`r_make_°rög_ty≥
(
≠i
, 
ext_id
, så,Üí, 0,Ñesu…, 
AWK_STRNUM
)

	)

1016 
ölöe
 
awk_vÆue_t
 *

1017 
make_nuŒ_°rög
(
awk_vÆue_t
 *
ªsu…
)

1019 
mem£t
(
ªsu…
, 0, (*result));

1020 
ªsu…
->
vÆ_ty≥
 = 
AWK_UNDEFINED
;

1022  
ªsu…
;

1027 
ölöe
 
awk_vÆue_t
 *

1028 
make_numbî
(
num
, 
awk_vÆue_t
 *
ªsu…
)

1030 
ªsu…
->
vÆ_ty≥
 = 
AWK_NUMBER
;

1031 
ªsu…
->
num_vÆue
 = 
num
;

1032 
ªsu…
->
num_ty≥
 = 
AWK_NUMBER_TYPE_DOUBLE
;

1033  
ªsu…
;

1042 
ölöe
 
awk_vÆue_t
 *

1043 
make_numbî_mpz
(*
mpz_±r
, 
awk_vÆue_t
 *
ªsu…
)

1045 
ªsu…
->
vÆ_ty≥
 = 
AWK_NUMBER
;

1046 
ªsu…
->
num_ty≥
 = 
AWK_NUMBER_TYPE_MPZ
;

1047 
ªsu…
->
num_±r
 = 
mpz_±r
;

1048  
ªsu…
;

1057 
ölöe
 
awk_vÆue_t
 *

1058 
make_numbî_mp‰
(*
mp‰_±r
, 
awk_vÆue_t
 *
ªsu…
)

1060 
ªsu…
->
vÆ_ty≥
 = 
AWK_NUMBER
;

1061 
ªsu…
->
num_ty≥
 = 
AWK_NUMBER_TYPE_MPFR
;

1062 
ªsu…
->
num_±r
 = 
mp‰_±r
;

1063  
ªsu…
;

1081 
dl_lﬂd
(c⁄° 
gawk_≠i_t
 *c⁄° 
≠i_p
, 
awk_ext_id_t
 
id
);

1085 
	g∂ugö_is_GPL_com∑tibÀ
;

1087 
gawk_≠i_t
 *c⁄° 
	g≠i
;

1088 
awk_ext_id_t
 
	gext_id
;

1089 c⁄° *
	gext_vîsi⁄
 = 
NULL
;

1091 
awk_ext_func_t
 
	gfunc_èbÀ
[] = {

1092 { "«me", 
do_«me
, 1 },

1098 
awk_boﬁ_t
 (*
öô_func
)(Ë
NULL
;

1102 
awk_boﬁ_t


1103 
öô_my_exãnsi⁄
()

1108 
awk_boﬁ_t
 (*
öô_func
)(Ë
öô_my_exãnsi⁄
;

1110 
dl_lﬂd_func
(
func_èbÀ
, 
some_«me
, "name_space_in_quotes")

1113 
	#dl_lﬂd_func
(
func_èbÀ
, 
exãnsi⁄
, 
«me_•a˚
) \

1114 
	`dl_lﬂd
(c⁄° 
gawk_≠i_t
 *c⁄° 
≠i_p
, 
awk_ext_id_t
 
id
) \

1116 
size_t
 
i
, 
j
; \

1117 
îr‹s
 = 0; \

1119 
≠i
 = 
≠i_p
; \

1120 
ext_id
 = (**Ë
id
; \

1122 i‡(
≠i
->
maj‹_vîsi⁄
 !
GAWK_API_MAJOR_VERSION
 \

1123 || 
≠i
->
mö‹_vîsi⁄
 < 
GAWK_API_MINOR_VERSION
) { \

1124 
	`Ârötf
(
°dîr
, #extension ": version mismatch with gawk!\n"); \

1125 
	`Ârötf
(
°dîr
, "\tmy version (API %d.%d), gawk version (API %d.%d)\n", \

1126 
GAWK_API_MAJOR_VERSION
, 
GAWK_API_MINOR_VERSION
, \

1127 
≠i
->
maj‹_vîsi⁄
,ápi->
mö‹_vîsi⁄
); \

1128 
	`exô
(1); \

1131 
	`check_mp‰_vîsi⁄
(
exãnsi⁄
); \

1134 
i
 = 0, 
j
 = (
func_èbÀ
) / (func_table[0]); i < j; i++) { \

1135 i‡(
func_èbÀ
[
i
].
«me
 =
NULL
) \

1137 i‡(! 
	`add_ext_func
(
«me_•a˚
, & 
func_èbÀ
[
i
])) { \

1138 
	`w¨nög
(
ext_id
, #extension ": couldÇotádd %s", \

1139 
func_èbÀ
[
i
].
«me
); \

1140 
îr‹s
++; \

1144 i‡(
öô_func
 !
NULL
) { \

1145 i‡(! 
	`öô_func
()) { \

1146 
	`w¨nög
(
ext_id
, #extension ": initialization function failed"); \

1147 
îr‹s
++; \

1151 i‡(
ext_vîsi⁄
 !
NULL
) \

1152 
	`ªgi°î_ext_vîsi⁄
(
ext_vîsi⁄
); \

1154  (
îr‹s
 == 0); \

1155 }

	)

1157 #i‡
deföed
 
__GNU_MP_VERSION
 && deföed 
MPFR_VERSION_MAJOR


1158 
	#check_mp‰_vîsi⁄
(
exãnsi⁄
) do { \

1159 i‡(
≠i
->
gmp_maj‹_vîsi⁄
 !
__GNU_MP_VERSION
 \

1160 || 
≠i
->
gmp_mö‹_vîsi⁄
 < 
__GNU_MP_VERSION_MINOR
) { \

1161 
	`Ârötf
(
°dîr
, #extension ": GMP version mismatch with gawk!\n"); \

1162 
	`Ârötf
(
°dîr
, "\tmy version (%d, %d), gawk version (%d, %d)\n", \

1163 
__GNU_MP_VERSION
, 
__GNU_MP_VERSION_MINOR
, \

1164 
≠i
->
gmp_maj‹_vîsi⁄
,ápi->
gmp_mö‹_vîsi⁄
); \

1165 
	`exô
(1); \

1167 i‡(
≠i
->
mp‰_maj‹_vîsi⁄
 !
MPFR_VERSION_MAJOR
 \

1168 || 
≠i
->
mp‰_mö‹_vîsi⁄
 < 
MPFR_VERSION_MINOR
) { \

1169 
	`Ârötf
(
°dîr
, #extension ": MPFR version mismatch with gawk!\n"); \

1170 
	`Ârötf
(
°dîr
, "\tmy version (%d, %d), gawk version (%d, %d)\n", \

1171 
MPFR_VERSION_MAJOR
, 
MPFR_VERSION_MINOR
, \

1172 
≠i
->
mp‰_maj‹_vîsi⁄
,ápi->
mp‰_mö‹_vîsi⁄
); \

1173 
	`exô
(1); \

1175 } 0)

	)

1177 
	#check_mp‰_vîsi⁄
(
exãnsi⁄
Ë

	)

1182 #ifde‡
__˝lu•lus


	@/usr/include/gconv.h

22 #i‚de‡
_GCONV_H


23 
	#_GCONV_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s/__mb°©e_t.h
>

27 
	~<bôs/ty≥s/wöt_t.h
>

29 
	#__√ed_size_t


	)

30 
	#__√ed_wch¨_t


	)

31 
	~<°ddef.h
>

34 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

39 
	m__GCONV_OK
 = 0,

40 
	m__GCONV_NOCONV
,

41 
	m__GCONV_NODB
,

42 
	m__GCONV_NOMEM
,

44 
	m__GCONV_EMPTY_INPUT
,

45 
	m__GCONV_FULL_OUTPUT
,

46 
	m__GCONV_ILLEGAL_INPUT
,

47 
	m__GCONV_INCOMPLETE_INPUT
,

49 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

50 
	m__GCONV_INTERNAL_ERROR


57 
	m__GCONV_IS_LAST
 = 0x0001,

58 
	m__GCONV_IGNORE_ERRORS
 = 0x0002,

59 
	m__GCONV_SWAP
 = 0x0004,

60 
	m__GCONV_TRANSLIT
 = 0x0008

65 
	g__gc⁄v_°ï
;

66 
	g__gc⁄v_°ï_d©a
;

67 
	g__gc⁄v_lﬂded_obje˘
;

71 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

73 **, 
	tsize_t
 *, , );

76 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

79 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

80 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

84 
	s__gc⁄v_°ï


86 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

87 c⁄° *
__mod«me
;

91 
__cou¡î
;

93 *
__‰om_«me
;

94 *
__to_«me
;

96 
__gc⁄v_f˘
 
__f˘
;

97 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

98 
__gc⁄v_öô_f˘
 
__öô_f˘
;

99 
__gc⁄v_íd_f˘
 
__íd_f˘
;

103 
__mö_√eded_‰om
;

104 
__max_√eded_‰om
;

105 
__mö_√eded_to
;

106 
__max_√eded_to
;

109 
__°©eful
;

111 *
__d©a
;

116 
	s__gc⁄v_°ï_d©a


118 *
__outbuf
;

119 *
__outbu„nd
;

123 
__Êags
;

127 
__övoˇti⁄_cou¡î
;

131 
__öã∫Æ_u£
;

133 
__mb°©e_t
 *
__°©ï
;

134 
__mb°©e_t
 
__°©e
;

140 
	s__gc⁄v_öfo


142 
size_t
 
__n°ïs
;

143 
__gc⁄v_°ï
 *
__°ïs
;

144 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
[0];

145 } *
	t__gc⁄v_t
;

	@/usr/include/getopt.h

21 #i‚de‡
_GETOPT_H


22 
	#_GETOPT_H
 1

	)

24 
	~<„©uªs.h
>

31 #i‚de‡
__gë›t_¨gv_c⁄°


32 
	#__gë›t_¨gv_c⁄°
 c⁄°

	)

35 
	~<bôs/gë›t_c‹e.h
>

36 
	~<bôs/gë›t_ext.h
>

	@/usr/include/glob.h

18 #i‚def 
_GLOB_H


19 
	#_GLOB_H
 1

	)

21 
	~<sys/cdefs.h
>

23 
	g__BEGIN_DECLS


26 #i‚de‡
__size_t


27 
__SIZE_TYPE__
 
	t__size_t
;

28 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


29 
__SIZE_TYPE__
 
	tsize_t
;

34 #unde‡
__size_t


35 
	#__size_t
 
size_t


	)

39 
	#GLOB_ERR
 (1 << 0)

	)

40 
	#GLOB_MARK
 (1 << 1)

	)

41 
	#GLOB_NOSORT
 (1 << 2)

	)

42 
	#GLOB_DOOFFS
 (1 << 3)

	)

43 
	#GLOB_NOCHECK
 (1 << 4)

	)

44 
	#GLOB_APPEND
 (1 << 5)

	)

45 
	#GLOB_NOESCAPE
 (1 << 6)

	)

46 
	#GLOB_PERIOD
 (1 << 7)

	)

48 #i‡!
deföed
 
__USE_POSIX2
 || deföed 
__USE_MISC


49 
	#GLOB_MAGCHAR
 (1 << 8)

	)

50 
	#GLOB_ALTDIRFUNC
 (1 << 9)

	)

51 
	#GLOB_BRACE
 (1 << 10)

	)

52 
	#GLOB_NOMAGIC
 (1 << 11)

	)

53 
	#GLOB_TILDE
 (1 << 12)

	)

54 
	#GLOB_ONLYDIR
 (1 << 13)

	)

55 
	#GLOB_TILDE_CHECK
 (1 << 14)

	)

57 
	#__GLOB_FLAGS
 (
GLOB_ERR
|
GLOB_MARK
|
GLOB_NOSORT
|
GLOB_DOOFFS
 \

58 |
GLOB_NOESCAPE
|
GLOB_NOCHECK
|
GLOB_APPEND
 \

59 |
GLOB_PERIOD
|
GLOB_ALTDIRFUNC
|
GLOB_BRACE
 \

60 |
GLOB_NOMAGIC
|
GLOB_TILDE
|
GLOB_ONLYDIR
|
GLOB_TILDE_CHECK
)

	)

62 
	#__GLOB_FLAGS
 (
GLOB_ERR
|
GLOB_MARK
|
GLOB_NOSORT
|
GLOB_DOOFFS
 \

63 |
GLOB_NOESCAPE
|
GLOB_NOCHECK
|
GLOB_APPEND
 \

64 |
GLOB_PERIOD
)

	)

68 
	#GLOB_NOSPACE
 1

	)

69 
	#GLOB_ABORTED
 2

	)

70 
	#GLOB_NOMATCH
 3

	)

71 
	#GLOB_NOSYS
 4

	)

72 #ifde‡
__USE_GNU


75 
	#GLOB_ABEND
 
GLOB_ABORTED


	)

79 #ifde‡
__USE_GNU


80 
	g°©
;

84 
__size_t
 
	mgl_∑thc
;

85 **
	mgl_∑thv
;

86 
__size_t
 
	mgl_offs
;

87 
	mgl_Êags
;

91 (*
	mgl_˛o£dú
) (*);

92 #ifde‡
__USE_GNU


93 
	mdúít
 *(*
	mgl_ªaddú
) (*);

95 *(*
	mgl_ªaddú
) (*);

97 *(*
	mgl_›ídú
) (const *);

98 #ifde‡
__USE_GNU


99 (*
	mgl_l°©
Ë(c⁄° *
	m__ª°ri˘
, 
°©
 *__restrict);

100 (*
	mgl_°©
Ë(c⁄° *
	m__ª°ri˘
, 
°©
 *__restrict);

102 (*
	mgl_l°©
Ë(c⁄° *
	m__ª°ri˘
, *__restrict);

103 (*
	mgl_°©
Ë(c⁄° *
	m__ª°ri˘
, *__restrict);

105 } 
	tglob_t
;

107 #ifde‡
__USE_LARGEFILE64


108 #ifde‡
__USE_GNU


109 
	g°©64
;

113 
__size_t
 
	mgl_∑thc
;

114 **
	mgl_∑thv
;

115 
__size_t
 
	mgl_offs
;

116 
	mgl_Êags
;

120 (*
	mgl_˛o£dú
) (*);

121 #ifde‡
__USE_GNU


122 
	mdúít64
 *(*
	mgl_ªaddú
) (*);

124 *(*
	mgl_ªaddú
) (*);

126 *(*
	mgl_›ídú
) (const *);

127 #ifde‡
__USE_GNU


128 (*
	mgl_l°©
Ë(c⁄° *
	m__ª°ri˘
, 
°©64
 *__restrict);

129 (*
	mgl_°©
Ë(c⁄° *
	m__ª°ri˘
, 
°©64
 *__restrict);

131 (*
	mgl_l°©
Ë(c⁄° *
	m__ª°ri˘
, *__restrict);

132 (*
	mgl_°©
Ë(c⁄° *
	m__ª°ri˘
, *__restrict);

134 } 
	tglob64_t
;

145 #i‡!
deföed
 
__USE_FILE_OFFSET64


146 
	$glob
 (c⁄° *
__ª°ri˘
 
__∑âîn
, 
__Êags
,

147 (*
__îrfunc
) (const *, ),

148 
glob_t
 *
__ª°ri˘
 
__pglob
Ë
__THROWNL
;

151 
	$glob‰ì
 (
glob_t
 *
__pglob
Ë
__THROW
;

153 #ifde‡
__USE_TIME_BITS64


154 
	`__REDIRECT_NTHNL
 (
glob
, (c⁄° *
__ª°ri˘
 
__∑âîn
,

155 
__Êags
,

156 (*
__îrfunc
) (const *, ),

157 
glob_t
 *
__ª°ri˘
 
__pglob
),

158 
__glob64_time64
);

160 
	`__REDIRECT_NTH
 (
glob‰ì
, (
glob_t
 *
__pglob
),

161 
__glob‰ì64_time64
);

163 
	`__REDIRECT_NTHNL
 (
glob
, (c⁄° *
__ª°ri˘
 
__∑âîn
,

164 
__Êags
,

165 (*
__îrfunc
) (const *, ),

166 
glob_t
 *
__ª°ri˘
 
__pglob
), 
glob64
);

168 
	`__REDIRECT_NTH
 (
glob‰ì
, (
glob_t
 *
__pglob
), 
glob‰ì64
);

172 #ifde‡
__USE_LARGEFILE64


173 #ifde‡
__USE_TIME_BITS64


174 
	`__REDIRECT_NTHNL
 (
glob64
, (c⁄° *
__ª°ri˘
 
__∑âîn
,

175 
__Êags
,

176 (*
__îrfunc
) (const *, ),

177 
glob64_t
 *
__ª°ri˘
 
__pglob
),

178 
__glob64_time64
);

180 
	`__REDIRECT_NTH
 (
glob‰ì64
, (
glob64_t
 *
__pglob
),

181 
__glob‰ì64_time64
);

183 
	$glob64
 (c⁄° *
__ª°ri˘
 
__∑âîn
, 
__Êags
,

184 (*
__îrfunc
) (const *, ),

185 
glob64_t
 *
__ª°ri˘
 
__pglob
Ë
__THROWNL
;

187 
	$glob‰ì64
 (
glob64_t
 *
__pglob
Ë
__THROW
;

192 #ifde‡
__USE_GNU


198 
	$glob_∑âîn_p
 (c⁄° *
__∑âîn
, 
__quŸe
Ë
__THROW
;

201 
__END_DECLS


	@/usr/include/gnu-versions.h

19 #i‚de‡
_GNU_VERSIONS_H


20 
	#_GNU_VERSIONS_H
 1

	)

46 
	#_GNU_OBSTACK_INTERFACE_VERSION
 1

	)

47 
	#_GNU_REGEX_INTERFACE_VERSION
 1

	)

48 
	#_GNU_GLOB_INTERFACE_VERSION
 2

	)

49 
	#_GNU_GETOPT_INTERFACE_VERSION
 2

	)

	@/usr/include/gnumake.h

19 #i‚de‡
_GNUMAKE_H_


20 
	#_GNUMAKE_H_


	)

25 c⁄° *
	mfûím
;

26 
	mlöío
;

27 } 
	tgmk_Êoc
;

29 *(*
	tgmk_func_±r
)(c⁄° *
	tnm
, 
	t¨gc
, **
	t¨gv
);

31 #ifde‡
_WIN32


32 #ifde‡
GMK_BUILDING_MAKE


33 
	#GMK_EXPORT
 
	`__de˛•ec
(
dŒexp‹t
)

	)

35 
	#GMK_EXPORT
 
	`__de˛•ec
(
dŒimp‹t
)

	)

38 
	#GMK_EXPORT


	)

42 
GMK_EXPORT
 
gmk_‰ì
 (*
°r
);

45 
GMK_EXPORT
 *
gmk_Æloc
 (
Àn
);

48 
GMK_EXPORT
 
gmk_evÆ
 (c⁄° *
buf„r
, c⁄° 
gmk_Êoc
 *
Êoc
);

52 
GMK_EXPORT
 *
gmk_ex∑nd
 (c⁄° *
°r
);

72 
GMK_EXPORT
 
gmk_add_fun˘i⁄
 (c⁄° *
«me
, 
gmk_func_±r
 
func
,

73 
mö_¨gs
, 
max_¨gs
,

74 
Êags
);

76 
	#GMK_FUNC_DEFAULT
 0x00

	)

77 
	#GMK_FUNC_NOEXPAND
 0x01

	)

	@/usr/include/grp.h

22 #i‚def 
_GRP_H


23 
	#_GRP_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

31 
	#__√ed_size_t


	)

32 
	~<°ddef.h
>

36 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K
Ë&& !deföed 
__gid_t_deföed


37 
__gid_t
 
	tgid_t
;

38 
	#__gid_t_deföed


	)

42 
	sgroup


44 *
	mgr_«me
;

45 *
	mgr_∑sswd
;

46 
__gid_t
 
	mgr_gid
;

47 **
	mgr_mem
;

51 #ifde‡
__USE_MISC


52 
	~<bôs/ty≥s/FILE.h
>

56 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


61 
£tgª¡
 ();

67 
ídgª¡
 ();

73 
group
 *
gëgª¡
 ();

76 #ifdef 
__USE_MISC


83 
group
 *
fgëgª¡
 (
FILE
 *
__°ªam
);

86 #ifde‡
__USE_GNU


93 
putgª¡
 (c⁄° 
group
 *
__ª°ri˘
 
__p
,

94 
FILE
 *
__ª°ri˘
 
__f
);

101 
group
 *
gëgrgid
 (
__gid_t
 
__gid
);

107 
group
 *
gëg∫am
 (c⁄° *
__«me
);

109 #ifde‡
__USE_POSIX


111 #ifde‡
__USE_MISC


114 
	#NSS_BUFLEN_GROUP
 1024

	)

130 #ifde‡
__USE_GNU


131 
gëgª¡_r
 (
group
 *
__ª°ri˘
 
__ªsu…buf
,

132 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

133 
group
 **
__ª°ri˘
 
__ªsu…
);

140 
gëgrgid_r
 (
__gid_t
 
__gid
, 
group
 *
__ª°ri˘
 
__ªsu…buf
,

141 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

142 
group
 **
__ª°ri˘
 
__ªsu…
);

148 
gëg∫am_r
 (c⁄° *
__ª°ri˘
 
__«me
,

149 
group
 *
__ª°ri˘
 
__ªsu…buf
,

150 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

151 
group
 **
__ª°ri˘
 
__ªsu…
);

153 #ifdef 
__USE_MISC


161 
fgëgª¡_r
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

162 
group
 *
__ª°ri˘
 
__ªsu…buf
,

163 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

164 
group
 **
__ª°ri˘
 
__ªsu…
);

170 #ifdef 
__USE_MISC


172 
	#__√ed_size_t


	)

173 
	~<°ddef.h
>

176 
	$£tgroups
 (
size_t
 
__n
, c⁄° 
__gid_t
 *
__groups
Ë
__THROW
;

186 
	`gëgrou∂i°
 (c⁄° *
__u£r
, 
__gid_t
 
__group
,

187 
__gid_t
 *
__groups
, *
__ngroups
);

197 
	`öôgroups
 (c⁄° *
__u£r
, 
__gid_t
 
__group
);

201 
__END_DECLS


	@/usr/include/gshadow.h

20 #i‚de‡
_GSHADOW_H


21 
	#_GSHADOW_H
 1

	)

23 
	~<„©uªs.h
>

24 
	~<∑ths.h
>

25 
	~<bôs/ty≥s/FILE.h
>

27 
	#__√ed_size_t


	)

28 
	~<°ddef.h
>

31 
	#GSHADOW
 
_PATH_GSHADOW


	)

34 
__BEGIN_DECLS


37 
	ssgΩ


39 *
	msg_«mp
;

40 *
	msg_∑sswd
;

41 **
	msg_adm
;

42 **
	msg_mem
;

52 
£tsgít
 ();

60 
ídsgít
 ();

68 
sgΩ
 *
gësgít
 ();

76 
sgΩ
 *
gësg«m
 (c⁄° *
__«me
);

84 
sgΩ
 *
sgësgít
 (c⁄° *
__°rög
);

92 
sgΩ
 *
fgësgít
 (
FILE
 *
__°ªam
);

100 
putsgít
 (c⁄° 
sgΩ
 *
__g
, 
FILE
 *
__°ªam
);

103 #ifde‡
__USE_MISC


110 
gësgít_r
 (
sgΩ
 *
__ªsu…_buf
, *
__buf„r
,

111 
size_t
 
__buÊí
, 
sgΩ
 **
__ªsu…
);

113 
gësg«m_r
 (c⁄° *
__«me
, 
sgΩ
 *
__ªsu…_buf
,

114 *
__buf„r
, 
size_t
 
__buÊí
,

115 
sgΩ
 **
__ªsu…
);

117 
sgësgít_r
 (c⁄° *
__°rög
, 
sgΩ
 *
__ªsu…_buf
,

118 *
__buf„r
, 
size_t
 
__buÊí
,

119 
sgΩ
 **
__ªsu…
);

121 
fgësgít_r
 (
FILE
 *
__°ªam
, 
sgΩ
 *
__ªsu…_buf
,

122 *
__buf„r
, 
size_t
 
__buÊí
,

123 
sgΩ
 **
__ªsu…
);

126 
	g__END_DECLS


	@/usr/include/iconv.h

18 #i‚de‡
_ICONV_H


19 
	#_ICONV_H
 1

	)

21 
	~<„©uªs.h
>

22 
	#__√ed_size_t


	)

23 
	~<°ddef.h
>

26 
__BEGIN_DECLS


29 *
	tic⁄v_t
;

37 
ic⁄v_t
 
ic⁄v_›í
 (c⁄° *
__tocode
, c⁄° *
__‰omcode
);

42 
size_t
 
ic⁄v
 (
ic⁄v_t
 
__cd
, **
__ª°ri˘
 
__öbuf
,

43 
size_t
 *
__ª°ri˘
 
__öbyã¶e·
,

44 **
__ª°ri˘
 
__outbuf
,

45 
size_t
 *
__ª°ri˘
 
__outbyã¶e·
);

51 
ic⁄v_˛o£
 (
ic⁄v_t
 
__cd
);

53 
	g__END_DECLS


	@/usr/include/ifaddrs.h

19 #i‚de‡
_IFADDRS_H


20 
	#_IFADDRS_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<sys/sockë.h
>

25 
__BEGIN_DECLS


29 
	siÁddrs


31 
iÁddrs
 *
	miÁ_√xt
;

33 *
	miÁ_«me
;

34 
	miÁ_Êags
;

36 
sockaddr
 *
	miÁ_addr
;

37 
sockaddr
 *
	miÁ_√tmask
;

44 
sockaddr
 *
	mifu_brﬂdaddr
;

45 
sockaddr
 *
	mifu_d°addr
;

46 } 
	miÁ_ifu
;

49 #i‚de‡
iÁ_brﬂdaddr


50 
	#iÁ_brﬂdaddr
 
iÁ_ifu
.
ifu_brﬂdaddr


	)

52 #i‚de‡
iÁ_d°addr


53 
	#iÁ_d°addr
 
iÁ_ifu
.
ifu_d°addr


	)

56 *
	miÁ_d©a
;

66 
	$gëiÁddrs
 (
iÁddrs
 **
__iÁp
Ë
__THROW
;

69 
	$‰ìiÁddrs
 (
iÁddrs
 *
__iÁ
Ë
__THROW
;

71 
__END_DECLS


	@/usr/include/inttypes.h

22 #i‚de‡
_INTTYPES_H


23 
	#_INTTYPES_H
 1

	)

25 
	~<„©uªs.h
>

27 
	~<°döt.h
>

30 #i‚de‡
____gwch¨_t_deföed


31 #ifde‡
__˝lu•lus


32 
	#__gwch¨_t
 
wch¨_t


	)

33 #ñi‡
deföed
 
__WCHAR_TYPE__


34 
__WCHAR_TYPE__
 
	t__gwch¨_t
;

36 
	#__√ed_wch¨_t


	)

37 
	~<°ddef.h
>

38 
wch¨_t
 
	t__gwch¨_t
;

40 
	#____gwch¨_t_deföed
 1

	)

43 #i‡
__WORDSIZE
 == 64

44 
	#__PRI64_PREFIX
 "l"

	)

45 
	#__PRIPTR_PREFIX
 "l"

	)

47 
	#__PRI64_PREFIX
 "Œ"

	)

48 
	#__PRIPTR_PREFIX


	)

54 
	#PRId8
 "d"

	)

55 
	#PRId16
 "d"

	)

56 
	#PRId32
 "d"

	)

57 
	#PRId64
 
__PRI64_PREFIX
 "d"

	)

59 
	#PRIdLEAST8
 "d"

	)

60 
	#PRIdLEAST16
 "d"

	)

61 
	#PRIdLEAST32
 "d"

	)

62 
	#PRIdLEAST64
 
__PRI64_PREFIX
 "d"

	)

64 
	#PRIdFAST8
 "d"

	)

65 
	#PRIdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

66 
	#PRIdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

67 
	#PRIdFAST64
 
__PRI64_PREFIX
 "d"

	)

70 
	#PRIi8
 "i"

	)

71 
	#PRIi16
 "i"

	)

72 
	#PRIi32
 "i"

	)

73 
	#PRIi64
 
__PRI64_PREFIX
 "i"

	)

75 
	#PRIiLEAST8
 "i"

	)

76 
	#PRIiLEAST16
 "i"

	)

77 
	#PRIiLEAST32
 "i"

	)

78 
	#PRIiLEAST64
 
__PRI64_PREFIX
 "i"

	)

80 
	#PRIiFAST8
 "i"

	)

81 
	#PRIiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

82 
	#PRIiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

83 
	#PRIiFAST64
 
__PRI64_PREFIX
 "i"

	)

86 
	#PRIo8
 "o"

	)

87 
	#PRIo16
 "o"

	)

88 
	#PRIo32
 "o"

	)

89 
	#PRIo64
 
__PRI64_PREFIX
 "o"

	)

91 
	#PRIoLEAST8
 "o"

	)

92 
	#PRIoLEAST16
 "o"

	)

93 
	#PRIoLEAST32
 "o"

	)

94 
	#PRIoLEAST64
 
__PRI64_PREFIX
 "o"

	)

96 
	#PRIoFAST8
 "o"

	)

97 
	#PRIoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

98 
	#PRIoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

99 
	#PRIoFAST64
 
__PRI64_PREFIX
 "o"

	)

102 
	#PRIu8
 "u"

	)

103 
	#PRIu16
 "u"

	)

104 
	#PRIu32
 "u"

	)

105 
	#PRIu64
 
__PRI64_PREFIX
 "u"

	)

107 
	#PRIuLEAST8
 "u"

	)

108 
	#PRIuLEAST16
 "u"

	)

109 
	#PRIuLEAST32
 "u"

	)

110 
	#PRIuLEAST64
 
__PRI64_PREFIX
 "u"

	)

112 
	#PRIuFAST8
 "u"

	)

113 
	#PRIuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

114 
	#PRIuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

115 
	#PRIuFAST64
 
__PRI64_PREFIX
 "u"

	)

118 
	#PRIx8
 "x"

	)

119 
	#PRIx16
 "x"

	)

120 
	#PRIx32
 "x"

	)

121 
	#PRIx64
 
__PRI64_PREFIX
 "x"

	)

123 
	#PRIxLEAST8
 "x"

	)

124 
	#PRIxLEAST16
 "x"

	)

125 
	#PRIxLEAST32
 "x"

	)

126 
	#PRIxLEAST64
 
__PRI64_PREFIX
 "x"

	)

128 
	#PRIxFAST8
 "x"

	)

129 
	#PRIxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

130 
	#PRIxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

131 
	#PRIxFAST64
 
__PRI64_PREFIX
 "x"

	)

134 
	#PRIX8
 "X"

	)

135 
	#PRIX16
 "X"

	)

136 
	#PRIX32
 "X"

	)

137 
	#PRIX64
 
__PRI64_PREFIX
 "X"

	)

139 
	#PRIXLEAST8
 "X"

	)

140 
	#PRIXLEAST16
 "X"

	)

141 
	#PRIXLEAST32
 "X"

	)

142 
	#PRIXLEAST64
 
__PRI64_PREFIX
 "X"

	)

144 
	#PRIXFAST8
 "X"

	)

145 
	#PRIXFAST16
 
__PRIPTR_PREFIX
 "X"

	)

146 
	#PRIXFAST32
 
__PRIPTR_PREFIX
 "X"

	)

147 
	#PRIXFAST64
 
__PRI64_PREFIX
 "X"

	)

151 
	#PRIdMAX
 
__PRI64_PREFIX
 "d"

	)

152 
	#PRIiMAX
 
__PRI64_PREFIX
 "i"

	)

153 
	#PRIoMAX
 
__PRI64_PREFIX
 "o"

	)

154 
	#PRIuMAX
 
__PRI64_PREFIX
 "u"

	)

155 
	#PRIxMAX
 
__PRI64_PREFIX
 "x"

	)

156 
	#PRIXMAX
 
__PRI64_PREFIX
 "X"

	)

160 
	#PRIdPTR
 
__PRIPTR_PREFIX
 "d"

	)

161 
	#PRIiPTR
 
__PRIPTR_PREFIX
 "i"

	)

162 
	#PRIoPTR
 
__PRIPTR_PREFIX
 "o"

	)

163 
	#PRIuPTR
 
__PRIPTR_PREFIX
 "u"

	)

164 
	#PRIxPTR
 
__PRIPTR_PREFIX
 "x"

	)

165 
	#PRIXPTR
 
__PRIPTR_PREFIX
 "X"

	)

171 
	#SCNd8
 "hhd"

	)

172 
	#SCNd16
 "hd"

	)

173 
	#SCNd32
 "d"

	)

174 
	#SCNd64
 
__PRI64_PREFIX
 "d"

	)

176 
	#SCNdLEAST8
 "hhd"

	)

177 
	#SCNdLEAST16
 "hd"

	)

178 
	#SCNdLEAST32
 "d"

	)

179 
	#SCNdLEAST64
 
__PRI64_PREFIX
 "d"

	)

181 
	#SCNdFAST8
 "hhd"

	)

182 
	#SCNdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

183 
	#SCNdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

184 
	#SCNdFAST64
 
__PRI64_PREFIX
 "d"

	)

187 
	#SCNi8
 "hhi"

	)

188 
	#SCNi16
 "hi"

	)

189 
	#SCNi32
 "i"

	)

190 
	#SCNi64
 
__PRI64_PREFIX
 "i"

	)

192 
	#SCNiLEAST8
 "hhi"

	)

193 
	#SCNiLEAST16
 "hi"

	)

194 
	#SCNiLEAST32
 "i"

	)

195 
	#SCNiLEAST64
 
__PRI64_PREFIX
 "i"

	)

197 
	#SCNiFAST8
 "hhi"

	)

198 
	#SCNiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

199 
	#SCNiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

200 
	#SCNiFAST64
 
__PRI64_PREFIX
 "i"

	)

203 
	#SCNu8
 "hhu"

	)

204 
	#SCNu16
 "hu"

	)

205 
	#SCNu32
 "u"

	)

206 
	#SCNu64
 
__PRI64_PREFIX
 "u"

	)

208 
	#SCNuLEAST8
 "hhu"

	)

209 
	#SCNuLEAST16
 "hu"

	)

210 
	#SCNuLEAST32
 "u"

	)

211 
	#SCNuLEAST64
 
__PRI64_PREFIX
 "u"

	)

213 
	#SCNuFAST8
 "hhu"

	)

214 
	#SCNuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

215 
	#SCNuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

216 
	#SCNuFAST64
 
__PRI64_PREFIX
 "u"

	)

219 
	#SCNo8
 "hho"

	)

220 
	#SCNo16
 "ho"

	)

221 
	#SCNo32
 "o"

	)

222 
	#SCNo64
 
__PRI64_PREFIX
 "o"

	)

224 
	#SCNoLEAST8
 "hho"

	)

225 
	#SCNoLEAST16
 "ho"

	)

226 
	#SCNoLEAST32
 "o"

	)

227 
	#SCNoLEAST64
 
__PRI64_PREFIX
 "o"

	)

229 
	#SCNoFAST8
 "hho"

	)

230 
	#SCNoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

231 
	#SCNoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

232 
	#SCNoFAST64
 
__PRI64_PREFIX
 "o"

	)

235 
	#SCNx8
 "hhx"

	)

236 
	#SCNx16
 "hx"

	)

237 
	#SCNx32
 "x"

	)

238 
	#SCNx64
 
__PRI64_PREFIX
 "x"

	)

240 
	#SCNxLEAST8
 "hhx"

	)

241 
	#SCNxLEAST16
 "hx"

	)

242 
	#SCNxLEAST32
 "x"

	)

243 
	#SCNxLEAST64
 
__PRI64_PREFIX
 "x"

	)

245 
	#SCNxFAST8
 "hhx"

	)

246 
	#SCNxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

247 
	#SCNxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

248 
	#SCNxFAST64
 
__PRI64_PREFIX
 "x"

	)

252 
	#SCNdMAX
 
__PRI64_PREFIX
 "d"

	)

253 
	#SCNiMAX
 
__PRI64_PREFIX
 "i"

	)

254 
	#SCNoMAX
 
__PRI64_PREFIX
 "o"

	)

255 
	#SCNuMAX
 
__PRI64_PREFIX
 "u"

	)

256 
	#SCNxMAX
 
__PRI64_PREFIX
 "x"

	)

259 
	#SCNdPTR
 
__PRIPTR_PREFIX
 "d"

	)

260 
	#SCNiPTR
 
__PRIPTR_PREFIX
 "i"

	)

261 
	#SCNoPTR
 
__PRIPTR_PREFIX
 "o"

	)

262 
	#SCNuPTR
 
__PRIPTR_PREFIX
 "u"

	)

263 
	#SCNxPTR
 
__PRIPTR_PREFIX
 "x"

	)

266 
	g__BEGIN_DECLS


268 #i‡
__WORDSIZE
 == 64

273 
	mquŸ
;

274 
	mªm
;

275 } 
	timaxdiv_t
;

282 
__exãnsi⁄__
 
	mquŸ
;

283 
__exãnsi⁄__
 
	mªm
;

284 } 
	timaxdiv_t
;

290 
ötmax_t
 
	$imaxabs
 (
ötmax_t
 
__n
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

293 
imaxdiv_t
 
	$imaxdiv
 (
ötmax_t
 
__numî
, i¡max_à
__díom
)

294 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

297 
ötmax_t
 
	$°πoimax
 (c⁄° *
__ª°ri˘
 
__≈å
,

298 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

301 
uötmax_t
 
	$°πoumax
 (c⁄° *
__ª°ri˘
 
__≈å
,

302 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

305 
ötmax_t
 
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

306 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

307 
__THROW
;

310 
uötmax_t
 
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

311 
__gwch¨_t
 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
)

312 
__THROW
;

314 
__END_DECLS


	@/usr/include/langinfo.h

19 #i‚de‡
_LANGINFO_H


20 
	#_LANGINFO_H
 1

	)

23 
	~<∆_ty≥s.h
>

25 
	~<bôs/loˇÀ.h
>

28 
	g__BEGIN_DECLS


34 
	#_NL_ITEM
(
ˇãg‹y
, 
ödex
Ë(((ˇãg‹yË<< 16Ë| (ödex))

	)

37 
	#_NL_ITEM_CATEGORY
(
ôem
Ë((Ë(ôemË>> 16)

	)

38 
	#_NL_ITEM_INDEX
(
ôem
Ë((Ë(ôemË& 0xffff)

	)

46 
	mABDAY_1
 = 
_NL_ITEM
 (
__LC_TIME
, 0),

47 
	#ABDAY_1
 
ABDAY_1


	)

48 
	mABDAY_2
,

49 
	#ABDAY_2
 
ABDAY_2


	)

50 
	mABDAY_3
,

51 
	#ABDAY_3
 
ABDAY_3


	)

52 
	mABDAY_4
,

53 
	#ABDAY_4
 
ABDAY_4


	)

54 
	mABDAY_5
,

55 
	#ABDAY_5
 
ABDAY_5


	)

56 
	mABDAY_6
,

57 
	#ABDAY_6
 
ABDAY_6


	)

58 
	mABDAY_7
,

59 
	#ABDAY_7
 
ABDAY_7


	)

62 
	mDAY_1
,

63 
	#DAY_1
 
DAY_1


	)

64 
	mDAY_2
,

65 
	#DAY_2
 
DAY_2


	)

66 
	mDAY_3
,

67 
	#DAY_3
 
DAY_3


	)

68 
	mDAY_4
,

69 
	#DAY_4
 
DAY_4


	)

70 
	mDAY_5
,

71 
	#DAY_5
 
DAY_5


	)

72 
	mDAY_6
,

73 
	#DAY_6
 
DAY_6


	)

74 
	mDAY_7
,

75 
	#DAY_7
 
DAY_7


	)

79 
	mABMON_1
,

80 
	#ABMON_1
 
ABMON_1


	)

81 
	mABMON_2
,

82 
	#ABMON_2
 
ABMON_2


	)

83 
	mABMON_3
,

84 
	#ABMON_3
 
ABMON_3


	)

85 
	mABMON_4
,

86 
	#ABMON_4
 
ABMON_4


	)

87 
	mABMON_5
,

88 
	#ABMON_5
 
ABMON_5


	)

89 
	mABMON_6
,

90 
	#ABMON_6
 
ABMON_6


	)

91 
	mABMON_7
,

92 
	#ABMON_7
 
ABMON_7


	)

93 
	mABMON_8
,

94 
	#ABMON_8
 
ABMON_8


	)

95 
	mABMON_9
,

96 
	#ABMON_9
 
ABMON_9


	)

97 
	mABMON_10
,

98 
	#ABMON_10
 
ABMON_10


	)

99 
	mABMON_11
,

100 
	#ABMON_11
 
ABMON_11


	)

101 
	mABMON_12
,

102 
	#ABMON_12
 
ABMON_12


	)

106 
	mMON_1
,

107 
	#MON_1
 
MON_1


	)

108 
	mMON_2
,

109 
	#MON_2
 
MON_2


	)

110 
	mMON_3
,

111 
	#MON_3
 
MON_3


	)

112 
	mMON_4
,

113 
	#MON_4
 
MON_4


	)

114 
	mMON_5
,

115 
	#MON_5
 
MON_5


	)

116 
	mMON_6
,

117 
	#MON_6
 
MON_6


	)

118 
	mMON_7
,

119 
	#MON_7
 
MON_7


	)

120 
	mMON_8
,

121 
	#MON_8
 
MON_8


	)

122 
	mMON_9
,

123 
	#MON_9
 
MON_9


	)

124 
	mMON_10
,

125 
	#MON_10
 
MON_10


	)

126 
	mMON_11
,

127 
	#MON_11
 
MON_11


	)

128 
	mMON_12
,

129 
	#MON_12
 
MON_12


	)

131 
	mAM_STR
,

132 
	#AM_STR
 
AM_STR


	)

133 
	mPM_STR
,

134 
	#PM_STR
 
PM_STR


	)

136 
	mD_T_FMT
,

137 
	#D_T_FMT
 
D_T_FMT


	)

138 
	mD_FMT
,

139 
	#D_FMT
 
D_FMT


	)

140 
	mT_FMT
,

141 
	#T_FMT
 
T_FMT


	)

142 
	mT_FMT_AMPM
,

143 
	#T_FMT_AMPM
 
T_FMT_AMPM


	)

145 
	mERA
,

146 
	#ERA
 
ERA


	)

147 
	m__ERA_YEAR
,

148 #ifde‡
__USE_GNU


149 
	#ERA_YEAR
 
__ERA_YEAR


	)

151 
	mERA_D_FMT
,

152 
	#ERA_D_FMT
 
ERA_D_FMT


	)

153 
	mALT_DIGITS
,

154 
	#ALT_DIGITS
 
ALT_DIGITS


	)

155 
	mERA_D_T_FMT
,

156 
	#ERA_D_T_FMT
 
ERA_D_T_FMT


	)

157 
	mERA_T_FMT
,

158 
	#ERA_T_FMT
 
ERA_T_FMT


	)

160 
	m_NL_TIME_ERA_NUM_ENTRIES
,

161 
	m_NL_TIME_ERA_ENTRIES
,

163 
	m_NL_WABDAY_1
,

164 
	m_NL_WABDAY_2
,

165 
	m_NL_WABDAY_3
,

166 
	m_NL_WABDAY_4
,

167 
	m_NL_WABDAY_5
,

168 
	m_NL_WABDAY_6
,

169 
	m_NL_WABDAY_7
,

172 
	m_NL_WDAY_1
,

173 
	m_NL_WDAY_2
,

174 
	m_NL_WDAY_3
,

175 
	m_NL_WDAY_4
,

176 
	m_NL_WDAY_5
,

177 
	m_NL_WDAY_6
,

178 
	m_NL_WDAY_7
,

182 
	m_NL_WABMON_1
,

183 
	m_NL_WABMON_2
,

184 
	m_NL_WABMON_3
,

185 
	m_NL_WABMON_4
,

186 
	m_NL_WABMON_5
,

187 
	m_NL_WABMON_6
,

188 
	m_NL_WABMON_7
,

189 
	m_NL_WABMON_8
,

190 
	m_NL_WABMON_9
,

191 
	m_NL_WABMON_10
,

192 
	m_NL_WABMON_11
,

193 
	m_NL_WABMON_12
,

197 
	m_NL_WMON_1
,

198 
	m_NL_WMON_2
,

199 
	m_NL_WMON_3
,

200 
	m_NL_WMON_4
,

201 
	m_NL_WMON_5
,

202 
	m_NL_WMON_6
,

203 
	m_NL_WMON_7
,

204 
	m_NL_WMON_8
,

205 
	m_NL_WMON_9
,

206 
	m_NL_WMON_10
,

207 
	m_NL_WMON_11
,

208 
	m_NL_WMON_12
,

210 
	m_NL_WAM_STR
,

211 
	m_NL_WPM_STR
,

213 
	m_NL_WD_T_FMT
,

214 
	m_NL_WD_FMT
,

215 
	m_NL_WT_FMT
,

216 
	m_NL_WT_FMT_AMPM
,

218 
	m_NL_WERA_YEAR
,

219 
	m_NL_WERA_D_FMT
,

220 
	m_NL_WALT_DIGITS
,

221 
	m_NL_WERA_D_T_FMT
,

222 
	m_NL_WERA_T_FMT
,

224 
	m_NL_TIME_WEEK_NDAYS
,

225 
	m_NL_TIME_WEEK_1STDAY
,

226 
	m_NL_TIME_WEEK_1STWEEK
,

227 
	m_NL_TIME_FIRST_WEEKDAY
,

228 
	m_NL_TIME_FIRST_WORKDAY
,

229 
	m_NL_TIME_CAL_DIRECTION
,

230 
	m_NL_TIME_TIMEZONE
,

232 
	m_DATE_FMT
,

233 
	#_DATE_FMT
 
_DATE_FMT


	)

234 
	m_NL_W_DATE_FMT
,

236 
	m_NL_TIME_CODESET
,

240 
	m__ALTMON_1
,

241 
	m__ALTMON_2
,

242 
	m__ALTMON_3
,

243 
	m__ALTMON_4
,

244 
	m__ALTMON_5
,

245 
	m__ALTMON_6
,

246 
	m__ALTMON_7
,

247 
	m__ALTMON_8
,

248 
	m__ALTMON_9
,

249 
	m__ALTMON_10
,

250 
	m__ALTMON_11
,

251 
	m__ALTMON_12
,

252 #ifde‡
__USE_GNU


253 
	#ALTMON_1
 
__ALTMON_1


	)

254 
	#ALTMON_2
 
__ALTMON_2


	)

255 
	#ALTMON_3
 
__ALTMON_3


	)

256 
	#ALTMON_4
 
__ALTMON_4


	)

257 
	#ALTMON_5
 
__ALTMON_5


	)

258 
	#ALTMON_6
 
__ALTMON_6


	)

259 
	#ALTMON_7
 
__ALTMON_7


	)

260 
	#ALTMON_8
 
__ALTMON_8


	)

261 
	#ALTMON_9
 
__ALTMON_9


	)

262 
	#ALTMON_10
 
__ALTMON_10


	)

263 
	#ALTMON_11
 
__ALTMON_11


	)

264 
	#ALTMON_12
 
__ALTMON_12


	)

269 
	m_NL_WALTMON_1
,

270 
	m_NL_WALTMON_2
,

271 
	m_NL_WALTMON_3
,

272 
	m_NL_WALTMON_4
,

273 
	m_NL_WALTMON_5
,

274 
	m_NL_WALTMON_6
,

275 
	m_NL_WALTMON_7
,

276 
	m_NL_WALTMON_8
,

277 
	m_NL_WALTMON_9
,

278 
	m_NL_WALTMON_10
,

279 
	m_NL_WALTMON_11
,

280 
	m_NL_WALTMON_12
,

284 
	m_NL_ABALTMON_1
,

285 
	m_NL_ABALTMON_2
,

286 
	m_NL_ABALTMON_3
,

287 
	m_NL_ABALTMON_4
,

288 
	m_NL_ABALTMON_5
,

289 
	m_NL_ABALTMON_6
,

290 
	m_NL_ABALTMON_7
,

291 
	m_NL_ABALTMON_8
,

292 
	m_NL_ABALTMON_9
,

293 
	m_NL_ABALTMON_10
,

294 
	m_NL_ABALTMON_11
,

295 
	m_NL_ABALTMON_12
,

299 
	m_NL_WABALTMON_1
,

300 
	m_NL_WABALTMON_2
,

301 
	m_NL_WABALTMON_3
,

302 
	m_NL_WABALTMON_4
,

303 
	m_NL_WABALTMON_5
,

304 
	m_NL_WABALTMON_6
,

305 
	m_NL_WABALTMON_7
,

306 
	m_NL_WABALTMON_8
,

307 
	m_NL_WABALTMON_9
,

308 
	m_NL_WABALTMON_10
,

309 
	m_NL_WABALTMON_11
,

310 
	m_NL_WABALTMON_12
,

312 
	m_NL_NUM_LC_TIME
,

317 
	m_NL_COLLATE_NRULES
 = 
_NL_ITEM
 (
__LC_COLLATE
, 0),

318 
	m_NL_COLLATE_RULESETS
,

319 
	m_NL_COLLATE_TABLEMB
,

320 
	m_NL_COLLATE_WEIGHTMB
,

321 
	m_NL_COLLATE_EXTRAMB
,

322 
	m_NL_COLLATE_INDIRECTMB
,

323 
	m_NL_COLLATE_GAP1
,

324 
	m_NL_COLLATE_GAP2
,

325 
	m_NL_COLLATE_GAP3
,

326 
	m_NL_COLLATE_TABLEWC
,

327 
	m_NL_COLLATE_WEIGHTWC
,

328 
	m_NL_COLLATE_EXTRAWC
,

329 
	m_NL_COLLATE_INDIRECTWC
,

330 
	m_NL_COLLATE_SYMB_HASH_SIZEMB
,

331 
	m_NL_COLLATE_SYMB_TABLEMB
,

332 
	m_NL_COLLATE_SYMB_EXTRAMB
,

333 
	m_NL_COLLATE_COLLSEQMB
,

334 
	m_NL_COLLATE_COLLSEQWC
,

335 
	m_NL_COLLATE_CODESET
,

336 
	m_NL_NUM_LC_COLLATE
,

341 
	m_NL_CTYPE_CLASS
 = 
_NL_ITEM
 (
__LC_CTYPE
, 0),

342 
	m_NL_CTYPE_TOUPPER
,

343 
	m_NL_CTYPE_GAP1
,

344 
	m_NL_CTYPE_TOLOWER
,

345 
	m_NL_CTYPE_GAP2
,

346 
	m_NL_CTYPE_CLASS32
,

347 
	m_NL_CTYPE_GAP3
,

348 
	m_NL_CTYPE_GAP4
,

349 
	m_NL_CTYPE_GAP5
,

350 
	m_NL_CTYPE_GAP6
,

351 
	m_NL_CTYPE_CLASS_NAMES
,

352 
	m_NL_CTYPE_MAP_NAMES
,

353 
	m_NL_CTYPE_WIDTH
,

354 
	m_NL_CTYPE_MB_CUR_MAX
,

355 
	m_NL_CTYPE_CODESET_NAME
,

356 
	mCODESET
 = 
_NL_CTYPE_CODESET_NAME
,

357 
	#CODESET
 
CODESET


	)

358 
	m_NL_CTYPE_TOUPPER32
,

359 
	m_NL_CTYPE_TOLOWER32
,

360 
	m_NL_CTYPE_CLASS_OFFSET
,

361 
	m_NL_CTYPE_MAP_OFFSET
,

362 
	m_NL_CTYPE_INDIGITS_MB_LEN
,

363 
	m_NL_CTYPE_INDIGITS0_MB
,

364 
	m_NL_CTYPE_INDIGITS1_MB
,

365 
	m_NL_CTYPE_INDIGITS2_MB
,

366 
	m_NL_CTYPE_INDIGITS3_MB
,

367 
	m_NL_CTYPE_INDIGITS4_MB
,

368 
	m_NL_CTYPE_INDIGITS5_MB
,

369 
	m_NL_CTYPE_INDIGITS6_MB
,

370 
	m_NL_CTYPE_INDIGITS7_MB
,

371 
	m_NL_CTYPE_INDIGITS8_MB
,

372 
	m_NL_CTYPE_INDIGITS9_MB
,

373 
	m_NL_CTYPE_INDIGITS_WC_LEN
,

374 
	m_NL_CTYPE_INDIGITS0_WC
,

375 
	m_NL_CTYPE_INDIGITS1_WC
,

376 
	m_NL_CTYPE_INDIGITS2_WC
,

377 
	m_NL_CTYPE_INDIGITS3_WC
,

378 
	m_NL_CTYPE_INDIGITS4_WC
,

379 
	m_NL_CTYPE_INDIGITS5_WC
,

380 
	m_NL_CTYPE_INDIGITS6_WC
,

381 
	m_NL_CTYPE_INDIGITS7_WC
,

382 
	m_NL_CTYPE_INDIGITS8_WC
,

383 
	m_NL_CTYPE_INDIGITS9_WC
,

384 
	m_NL_CTYPE_OUTDIGIT0_MB
,

385 
	m_NL_CTYPE_OUTDIGIT1_MB
,

386 
	m_NL_CTYPE_OUTDIGIT2_MB
,

387 
	m_NL_CTYPE_OUTDIGIT3_MB
,

388 
	m_NL_CTYPE_OUTDIGIT4_MB
,

389 
	m_NL_CTYPE_OUTDIGIT5_MB
,

390 
	m_NL_CTYPE_OUTDIGIT6_MB
,

391 
	m_NL_CTYPE_OUTDIGIT7_MB
,

392 
	m_NL_CTYPE_OUTDIGIT8_MB
,

393 
	m_NL_CTYPE_OUTDIGIT9_MB
,

394 
	m_NL_CTYPE_OUTDIGIT0_WC
,

395 
	m_NL_CTYPE_OUTDIGIT1_WC
,

396 
	m_NL_CTYPE_OUTDIGIT2_WC
,

397 
	m_NL_CTYPE_OUTDIGIT3_WC
,

398 
	m_NL_CTYPE_OUTDIGIT4_WC
,

399 
	m_NL_CTYPE_OUTDIGIT5_WC
,

400 
	m_NL_CTYPE_OUTDIGIT6_WC
,

401 
	m_NL_CTYPE_OUTDIGIT7_WC
,

402 
	m_NL_CTYPE_OUTDIGIT8_WC
,

403 
	m_NL_CTYPE_OUTDIGIT9_WC
,

404 
	m_NL_CTYPE_TRANSLIT_TAB_SIZE
,

405 
	m_NL_CTYPE_TRANSLIT_FROM_IDX
,

406 
	m_NL_CTYPE_TRANSLIT_FROM_TBL
,

407 
	m_NL_CTYPE_TRANSLIT_TO_IDX
,

408 
	m_NL_CTYPE_TRANSLIT_TO_TBL
,

409 
	m_NL_CTYPE_TRANSLIT_DEFAULT_MISSING_LEN
,

410 
	m_NL_CTYPE_TRANSLIT_DEFAULT_MISSING
,

411 
	m_NL_CTYPE_TRANSLIT_IGNORE_LEN
,

412 
	m_NL_CTYPE_TRANSLIT_IGNORE
,

413 
	m_NL_CTYPE_MAP_TO_NONASCII
,

414 
	m_NL_CTYPE_NONASCII_CASE
,

415 
	m_NL_CTYPE_EXTRA_MAP_1
,

416 
	m_NL_CTYPE_EXTRA_MAP_2
,

417 
	m_NL_CTYPE_EXTRA_MAP_3
,

418 
	m_NL_CTYPE_EXTRA_MAP_4
,

419 
	m_NL_CTYPE_EXTRA_MAP_5
,

420 
	m_NL_CTYPE_EXTRA_MAP_6
,

421 
	m_NL_CTYPE_EXTRA_MAP_7
,

422 
	m_NL_CTYPE_EXTRA_MAP_8
,

423 
	m_NL_CTYPE_EXTRA_MAP_9
,

424 
	m_NL_CTYPE_EXTRA_MAP_10
,

425 
	m_NL_CTYPE_EXTRA_MAP_11
,

426 
	m_NL_CTYPE_EXTRA_MAP_12
,

427 
	m_NL_CTYPE_EXTRA_MAP_13
,

428 
	m_NL_CTYPE_EXTRA_MAP_14
,

429 
	m_NL_NUM_LC_CTYPE
,

434 
	m__INT_CURR_SYMBOL
 = 
_NL_ITEM
 (
__LC_MONETARY
, 0),

435 #ifde‡
__USE_GNU


436 
	#INT_CURR_SYMBOL
 
__INT_CURR_SYMBOL


	)

438 
	m__CURRENCY_SYMBOL
,

439 #ifde‡
__USE_GNU


440 
	#CURRENCY_SYMBOL
 
__CURRENCY_SYMBOL


	)

442 
	m__MON_DECIMAL_POINT
,

443 #ifde‡
__USE_GNU


444 
	#MON_DECIMAL_POINT
 
__MON_DECIMAL_POINT


	)

446 
	m__MON_THOUSANDS_SEP
,

447 #ifde‡
__USE_GNU


448 
	#MON_THOUSANDS_SEP
 
__MON_THOUSANDS_SEP


	)

450 
	m__MON_GROUPING
,

451 #ifde‡
__USE_GNU


452 
	#MON_GROUPING
 
__MON_GROUPING


	)

454 
	m__POSITIVE_SIGN
,

455 #ifde‡
__USE_GNU


456 
	#POSITIVE_SIGN
 
__POSITIVE_SIGN


	)

458 
	m__NEGATIVE_SIGN
,

459 #ifde‡
__USE_GNU


460 
	#NEGATIVE_SIGN
 
__NEGATIVE_SIGN


	)

462 
	m__INT_FRAC_DIGITS
,

463 #ifde‡
__USE_GNU


464 
	#INT_FRAC_DIGITS
 
__INT_FRAC_DIGITS


	)

466 
	m__FRAC_DIGITS
,

467 #ifde‡
__USE_GNU


468 
	#FRAC_DIGITS
 
__FRAC_DIGITS


	)

470 
	m__P_CS_PRECEDES
,

471 #ifde‡
__USE_GNU


472 
	#P_CS_PRECEDES
 
__P_CS_PRECEDES


	)

474 
	m__P_SEP_BY_SPACE
,

475 #ifde‡
__USE_GNU


476 
	#P_SEP_BY_SPACE
 
__P_SEP_BY_SPACE


	)

478 
	m__N_CS_PRECEDES
,

479 #ifde‡
__USE_GNU


480 
	#N_CS_PRECEDES
 
__N_CS_PRECEDES


	)

482 
	m__N_SEP_BY_SPACE
,

483 #ifde‡
__USE_GNU


484 
	#N_SEP_BY_SPACE
 
__N_SEP_BY_SPACE


	)

486 
	m__P_SIGN_POSN
,

487 #ifde‡
__USE_GNU


488 
	#P_SIGN_POSN
 
__P_SIGN_POSN


	)

490 
	m__N_SIGN_POSN
,

491 #ifde‡
__USE_GNU


492 
	#N_SIGN_POSN
 
__N_SIGN_POSN


	)

494 
	m_NL_MONETARY_CRNCYSTR
,

495 
	#CRNCYSTR
 
_NL_MONETARY_CRNCYSTR


	)

496 
	m__INT_P_CS_PRECEDES
,

497 #ifde‡
__USE_GNU


498 
	#INT_P_CS_PRECEDES
 
__INT_P_CS_PRECEDES


	)

500 
	m__INT_P_SEP_BY_SPACE
,

501 #ifde‡
__USE_GNU


502 
	#INT_P_SEP_BY_SPACE
 
__INT_P_SEP_BY_SPACE


	)

504 
	m__INT_N_CS_PRECEDES
,

505 #ifde‡
__USE_GNU


506 
	#INT_N_CS_PRECEDES
 
__INT_N_CS_PRECEDES


	)

508 
	m__INT_N_SEP_BY_SPACE
,

509 #ifde‡
__USE_GNU


510 
	#INT_N_SEP_BY_SPACE
 
__INT_N_SEP_BY_SPACE


	)

512 
	m__INT_P_SIGN_POSN
,

513 #ifde‡
__USE_GNU


514 
	#INT_P_SIGN_POSN
 
__INT_P_SIGN_POSN


	)

516 
	m__INT_N_SIGN_POSN
,

517 #ifde‡
__USE_GNU


518 
	#INT_N_SIGN_POSN
 
__INT_N_SIGN_POSN


	)

520 
	m_NL_MONETARY_DUO_INT_CURR_SYMBOL
,

521 
	m_NL_MONETARY_DUO_CURRENCY_SYMBOL
,

522 
	m_NL_MONETARY_DUO_INT_FRAC_DIGITS
,

523 
	m_NL_MONETARY_DUO_FRAC_DIGITS
,

524 
	m_NL_MONETARY_DUO_P_CS_PRECEDES
,

525 
	m_NL_MONETARY_DUO_P_SEP_BY_SPACE
,

526 
	m_NL_MONETARY_DUO_N_CS_PRECEDES
,

527 
	m_NL_MONETARY_DUO_N_SEP_BY_SPACE
,

528 
	m_NL_MONETARY_DUO_INT_P_CS_PRECEDES
,

529 
	m_NL_MONETARY_DUO_INT_P_SEP_BY_SPACE
,

530 
	m_NL_MONETARY_DUO_INT_N_CS_PRECEDES
,

531 
	m_NL_MONETARY_DUO_INT_N_SEP_BY_SPACE
,

532 
	m_NL_MONETARY_DUO_P_SIGN_POSN
,

533 
	m_NL_MONETARY_DUO_N_SIGN_POSN
,

534 
	m_NL_MONETARY_DUO_INT_P_SIGN_POSN
,

535 
	m_NL_MONETARY_DUO_INT_N_SIGN_POSN
,

536 
	m_NL_MONETARY_UNO_VALID_FROM
,

537 
	m_NL_MONETARY_UNO_VALID_TO
,

538 
	m_NL_MONETARY_DUO_VALID_FROM
,

539 
	m_NL_MONETARY_DUO_VALID_TO
,

540 
	m_NL_MONETARY_CONVERSION_RATE
,

541 
	m_NL_MONETARY_DECIMAL_POINT_WC
,

542 
	m_NL_MONETARY_THOUSANDS_SEP_WC
,

543 
	m_NL_MONETARY_CODESET
,

544 
	m_NL_NUM_LC_MONETARY
,

548 
	m__DECIMAL_POINT
 = 
_NL_ITEM
 (
__LC_NUMERIC
, 0),

549 #ifde‡
__USE_GNU


550 
	#DECIMAL_POINT
 
__DECIMAL_POINT


	)

552 
	mRADIXCHAR
 = 
__DECIMAL_POINT
,

553 
	#RADIXCHAR
 
RADIXCHAR


	)

554 
	m__THOUSANDS_SEP
,

555 #ifde‡
__USE_GNU


556 
	#THOUSANDS_SEP
 
__THOUSANDS_SEP


	)

558 
	mTHOUSEP
 = 
__THOUSANDS_SEP
,

559 
	#THOUSEP
 
THOUSEP


	)

560 
	m__GROUPING
,

561 #ifde‡
__USE_GNU


562 
	#GROUPING
 
__GROUPING


	)

564 
	m_NL_NUMERIC_DECIMAL_POINT_WC
,

565 
	m_NL_NUMERIC_THOUSANDS_SEP_WC
,

566 
	m_NL_NUMERIC_CODESET
,

567 
	m_NL_NUM_LC_NUMERIC
,

569 
	m__YESEXPR
 = 
_NL_ITEM
 (
__LC_MESSAGES
, 0),

570 
	#YESEXPR
 
__YESEXPR


	)

571 
	m__NOEXPR
,

572 
	#NOEXPR
 
__NOEXPR


	)

573 
	m__YESSTR
,

574 #i‡
deföed
 
__USE_GNU
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

575 
	#YESSTR
 
__YESSTR


	)

577 
	m__NOSTR
,

578 #i‡
deföed
 
__USE_GNU
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

579 
	#NOSTR
 
__NOSTR


	)

581 
	m_NL_MESSAGES_CODESET
,

582 
	m_NL_NUM_LC_MESSAGES
,

584 
	m_NL_PAPER_HEIGHT
 = 
_NL_ITEM
 (
__LC_PAPER
, 0),

585 
	m_NL_PAPER_WIDTH
,

586 
	m_NL_PAPER_CODESET
,

587 
	m_NL_NUM_LC_PAPER
,

589 
	m_NL_NAME_NAME_FMT
 = 
_NL_ITEM
 (
__LC_NAME
, 0),

590 
	m_NL_NAME_NAME_GEN
,

591 
	m_NL_NAME_NAME_MR
,

592 
	m_NL_NAME_NAME_MRS
,

593 
	m_NL_NAME_NAME_MISS
,

594 
	m_NL_NAME_NAME_MS
,

595 
	m_NL_NAME_CODESET
,

596 
	m_NL_NUM_LC_NAME
,

598 
	m_NL_ADDRESS_POSTAL_FMT
 = 
_NL_ITEM
 (
__LC_ADDRESS
, 0),

599 
	m_NL_ADDRESS_COUNTRY_NAME
,

600 
	m_NL_ADDRESS_COUNTRY_POST
,

601 
	m_NL_ADDRESS_COUNTRY_AB2
,

602 
	m_NL_ADDRESS_COUNTRY_AB3
,

603 
	m_NL_ADDRESS_COUNTRY_CAR
,

604 
	m_NL_ADDRESS_COUNTRY_NUM
,

605 
	m_NL_ADDRESS_COUNTRY_ISBN
,

606 
	m_NL_ADDRESS_LANG_NAME
,

607 
	m_NL_ADDRESS_LANG_AB
,

608 
	m_NL_ADDRESS_LANG_TERM
,

609 
	m_NL_ADDRESS_LANG_LIB
,

610 
	m_NL_ADDRESS_CODESET
,

611 
	m_NL_NUM_LC_ADDRESS
,

613 
	m_NL_TELEPHONE_TEL_INT_FMT
 = 
_NL_ITEM
 (
__LC_TELEPHONE
, 0),

614 
	m_NL_TELEPHONE_TEL_DOM_FMT
,

615 
	m_NL_TELEPHONE_INT_SELECT
,

616 
	m_NL_TELEPHONE_INT_PREFIX
,

617 
	m_NL_TELEPHONE_CODESET
,

618 
	m_NL_NUM_LC_TELEPHONE
,

620 
	m_NL_MEASUREMENT_MEASUREMENT
 = 
_NL_ITEM
 (
__LC_MEASUREMENT
, 0),

621 
	m_NL_MEASUREMENT_CODESET
,

622 
	m_NL_NUM_LC_MEASUREMENT
,

624 
	m_NL_IDENTIFICATION_TITLE
 = 
_NL_ITEM
 (
__LC_IDENTIFICATION
, 0),

625 
	m_NL_IDENTIFICATION_SOURCE
,

626 
	m_NL_IDENTIFICATION_ADDRESS
,

627 
	m_NL_IDENTIFICATION_CONTACT
,

628 
	m_NL_IDENTIFICATION_EMAIL
,

629 
	m_NL_IDENTIFICATION_TEL
,

630 
	m_NL_IDENTIFICATION_FAX
,

631 
	m_NL_IDENTIFICATION_LANGUAGE
,

632 
	m_NL_IDENTIFICATION_TERRITORY
,

633 
	m_NL_IDENTIFICATION_AUDIENCE
,

634 
	m_NL_IDENTIFICATION_APPLICATION
,

635 
	m_NL_IDENTIFICATION_ABBREVIATION
,

636 
	m_NL_IDENTIFICATION_REVISION
,

637 
	m_NL_IDENTIFICATION_DATE
,

638 
	m_NL_IDENTIFICATION_CATEGORY
,

639 
	m_NL_IDENTIFICATION_CODESET
,

640 
	m_NL_NUM_LC_IDENTIFICATION
,

643 
	m_NL_NUM


648 
	#_NL_LOCALE_NAME
(
ˇãg‹y
Ë
	`_NL_ITEM
 ((category), \

649 
	`_NL_ITEM_INDEX
 (-1))

	)

650 #ifde‡
__USE_GNU


651 
	#NL_LOCALE_NAME
(
ˇãg‹y
Ë
	`_NL_LOCALE_NAME
 (ˇãg‹y)

	)

661 *
	$∆_œngöfo
 (
∆_ôem
 
__ôem
Ë
__THROW
;

664 #ifde‡
__USE_XOPEN2K8


666 
	~<bôs/ty≥s/loˇÀ_t.h
>

669 *
	`∆_œngöfo_l
 (
∆_ôem
 
__ôem
, 
loˇÀ_t
 
__l
);

672 
__END_DECLS


	@/usr/include/lastlog.h

4 
	~<utmp.h
>

	@/usr/include/libgen.h

18 #i‚de‡
_LIBGEN_H


19 
	#_LIBGEN_H
 1

	)

21 
	~<„©uªs.h
>

23 
__BEGIN_DECLS


26 *
	$dú«me
 (*
__∑th
Ë
__THROW
;

34 *
	$__xpg_ba£«me
 (*
__∑th
Ë
__THROW
;

35 
	#ba£«me
 
__xpg_ba£«me


	)

37 
__END_DECLS


	@/usr/include/libintl.h

20 #i‚de‡
_LIBINTL_H


21 
	#_LIBINTL_H
 1

	)

23 
	~<„©uªs.h
>

27 
	#__USE_GNU_GETTEXT
 1

	)

31 
	#__GNU_GETTEXT_SUPPORTED_REVISION
(
maj‹
) \

32 ((
maj‹
Ë=0 ? 1 : -1)

	)

34 
__BEGIN_DECLS


39 *
	$gëãxt
 (c⁄° *
__msgid
)

40 
__THROW
 
	`__©åibuã_f‹m©_¨g__
 (1);

44 *
	$dgëãxt
 (c⁄° *
__domaö«me
, c⁄° *
__msgid
)

45 
__THROW
 
	`__©åibuã_f‹m©_¨g__
 (2);

46 *
	$__dgëãxt
 (c⁄° *
__domaö«me
, c⁄° *
__msgid
)

47 
__THROW
 
	`__©åibuã_f‹m©_¨g__
 (2);

51 *
	$dcgëãxt
 (c⁄° *
__domaö«me
,

52 c⁄° *
__msgid
, 
__ˇãg‹y
)

53 
__THROW
 
	`__©åibuã_f‹m©_¨g__
 (2);

54 *
	$__dcgëãxt
 (c⁄° *
__domaö«me
,

55 c⁄° *
__msgid
, 
__ˇãg‹y
)

56 
__THROW
 
	`__©åibuã_f‹m©_¨g__
 (2);

61 *
	$ngëãxt
 (c⁄° *
__msgid1
, c⁄° *
__msgid2
,

62 
__n
)

63 
__THROW
 
	$__©åibuã_f‹m©_¨g__
 (1Ë
	`__©åibuã_f‹m©_¨g__
 (2);

67 *
	$dngëãxt
 (c⁄° *
__domaö«me
, c⁄° *
__msgid1
,

68 c⁄° *
__msgid2
, 
__n
)

69 
__THROW
 
	$__©åibuã_f‹m©_¨g__
 (2Ë
	`__©åibuã_f‹m©_¨g__
 (3);

73 *
	$d˙gëãxt
 (c⁄° *
__domaö«me
, c⁄° *
__msgid1
,

74 c⁄° *
__msgid2
, 
__n
,

75 
__ˇãg‹y
)

76 
__THROW
 
	$__©åibuã_f‹m©_¨g__
 (2Ë
	`__©åibuã_f‹m©_¨g__
 (3);

82 *
	$ãxtdomaö
 (c⁄° *
__domaö«me
Ë
__THROW
;

86 *
	$bödãxtdomaö
 (c⁄° *
__domaö«me
,

87 c⁄° *
__dú«me
Ë
__THROW
;

91 *
	$böd_ãxtdomaö_code£t
 (c⁄° *
__domaö«me
,

92 c⁄° *
__code£t
Ë
__THROW
;

96 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


99 
	#__√ed_NULL


	)

100 
	~<°ddef.h
>

103 
	~<loˇÀ.h
>

109 
	#gëãxt
(
msgid
Ë
	`dgëãxt
 (
NULL
, msgid)

	)

111 
	#dgëãxt
(
domaö«me
, 
msgid
) \

112 
	`dcgëãxt
 (
domaö«me
, 
msgid
, 
LC_MESSAGES
)

	)

114 
	#ngëãxt
(
msgid1
, 
msgid2
, 
n
Ë
	`dngëãxt
 (
NULL
, msgid1, msgid2,Ç)

	)

116 
	#dngëãxt
(
domaö«me
, 
msgid1
, 
msgid2
, 
n
) \

117 
	`d˙gëãxt
 (
domaö«me
, 
msgid1
, 
msgid2
, 
n
, 
LC_MESSAGES
)

	)

121 
__END_DECLS


	@/usr/include/limits.h

22 #i‚de‡
_LIBC_LIMITS_H_


23 
	#_LIBC_LIMITS_H_
 1

	)

25 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

26 
	~<bôs/libc-hódî-°¨t.h
>

32 
	#MB_LEN_MAX
 16

	)

37 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

42 #i‚de‡
_LIMITS_H


43 
	#_LIMITS_H
 1

	)

45 
	~<bôs/w‹dsize.h
>

54 
	#CHAR_BIT
 8

	)

57 
	#SCHAR_MIN
 (-128)

	)

58 
	#SCHAR_MAX
 127

	)

61 
	#UCHAR_MAX
 255

	)

64 #ifde‡
__CHAR_UNSIGNED__


65 
	#CHAR_MIN
 0

	)

66 
	#CHAR_MAX
 
UCHAR_MAX


	)

68 
	#CHAR_MIN
 
SCHAR_MIN


	)

69 
	#CHAR_MAX
 
SCHAR_MAX


	)

73 
	#SHRT_MIN
 (-32768)

	)

74 
	#SHRT_MAX
 32767

	)

77 
	#USHRT_MAX
 65535

	)

80 
	#INT_MIN
 (-
INT_MAX
 - 1)

	)

81 
	#INT_MAX
 2147483647

	)

84 
	#UINT_MAX
 4294967295U

	)

87 #i‡
__WORDSIZE
 == 64

88 
	#LONG_MAX
 9223372036854775807L

	)

90 
	#LONG_MAX
 2147483647L

	)

92 
	#LONG_MIN
 (-
LONG_MAX
 - 1L)

	)

95 #i‡
__WORDSIZE
 == 64

96 
	#ULONG_MAX
 18446744073709551615UL

	)

98 
	#ULONG_MAX
 4294967295UL

	)

101 #ifde‡
__USE_ISOC99


104 
	#LLONG_MAX
 9223372036854775807LL

	)

105 
	#LLONG_MIN
 (-
LLONG_MAX
 - 1LL)

	)

108 
	#ULLONG_MAX
 18446744073709551615ULL

	)

122 #i‡
deföed
 
__GNUC__
 && !deföed 
_GCC_LIMITS_H_


124 #ö˛ude_√xà<
limôs
.
h
>

130 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__


131 #i‚de‡
LLONG_MIN


132 
	#LLONG_MIN
 (-
LLONG_MAX
-1)

	)

134 #i‚de‡
LLONG_MAX


135 
	#LLONG_MAX
 
__LONG_LONG_MAX__


	)

137 #i‚de‡
ULLONG_MAX


138 
	#ULLONG_MAX
 (
LLONG_MAX
 * 2ULL + 1)

	)

145 #i‡
__GLIBC_USE
 (
IEC_60559_BFP_EXT_C2X
)

146 #i‚de‡
CHAR_WIDTH


147 
	#CHAR_WIDTH
 8

	)

149 #i‚de‡
SCHAR_WIDTH


150 
	#SCHAR_WIDTH
 8

	)

152 #i‚de‡
UCHAR_WIDTH


153 
	#UCHAR_WIDTH
 8

	)

155 #i‚de‡
SHRT_WIDTH


156 
	#SHRT_WIDTH
 16

	)

158 #i‚de‡
USHRT_WIDTH


159 
	#USHRT_WIDTH
 16

	)

161 #i‚de‡
INT_WIDTH


162 
	#INT_WIDTH
 32

	)

164 #i‚de‡
UINT_WIDTH


165 
	#UINT_WIDTH
 32

	)

167 #i‚de‡
LONG_WIDTH


168 
	#LONG_WIDTH
 
__WORDSIZE


	)

170 #i‚de‡
ULONG_WIDTH


171 
	#ULONG_WIDTH
 
__WORDSIZE


	)

173 #i‚de‡
LLONG_WIDTH


174 
	#LLONG_WIDTH
 64

	)

176 #i‚de‡
ULLONG_WIDTH


177 
	#ULLONG_WIDTH
 64

	)

184 #i‡
__GLIBC_USE
 (
ISOC2X
)

185 #i‚de‡
BOOL_MAX


186 
	#BOOL_MAX
 1

	)

188 #i‚de‡
BOOL_WIDTH


189 
	#BOOL_WIDTH
 1

	)

193 #ifdef 
__USE_POSIX


195 
	~<bôs/posix1_lim.h
>

198 #ifdef 
__USE_POSIX2


199 
	~<bôs/posix2_lim.h
>

202 #ifdef 
__USE_XOPEN


203 
	~<bôs/x›í_lim.h
>

	@/usr/include/link.h

20 #i‚def 
_LINK_H


21 
	#_LINK_H
 1

	)

23 
	~<„©uªs.h
>

24 
	~<ñf.h
>

25 
	~<dlf˙.h
>

26 
	~<sys/ty≥s.h
>

30 
	#ElfW
(
ty≥
Ë
	`_ElfW
 (
Elf
, 
__ELF_NATIVE_CLASS
,Åy≥)

	)

31 
	#_ElfW
(
e
,
w
,
t
Ë
	`_ElfW_1
 (e, w, 
_
##t)

	)

32 
	#_ElfW_1
(
e
,
w
,
t
Ëe##w##
	)
t

34 
	~<bôs/ñf˛ass.h
>

35 
	~<bôs/lök.h
>

40 
	sr_debug


43 
	mr_vîsi⁄
;

45 
lök_m≠
 *
	mr_m≠
;

52 
ElfW
(
Addr
Ë
	mr_brk
;

57 
	mRT_CONSISTENT
,

58 
	mRT_ADD
,

59 
	mRT_DELETE


60 } 
	mr_°©e
;

62 
ElfW
(
Addr
Ë
	mr_ldba£
;

66 
r_debug
 
_r_debug
;

74 
	sr_debug_exãnded


76 
r_debug
 
	mba£
;

83 
r_debug_exãnded
 *
	mr_√xt
;

93 
	$ElfW
(
Dyn
Ë
_DYNAMIC
[];

101 
	slök_m≠


106 
	`ElfW
(
Addr
Ë
l_addr
;

108 *
l_«me
;

109 
	`ElfW
(
Dyn
Ë*
l_ld
;

110 
lök_m≠
 *
l_√xt
, *
l_¥ev
;

113 #ifde‡
__USE_GNU


116 
	~<bôs/lök_œvcuºít.h
>

121 
LA_ACT_CONSISTENT
,

122 
LA_ACT_ADD
,

123 
LA_ACT_DELETE


129 
LA_SER_ORIG
 = 0x01,

130 
LA_SER_LIBPATH
 = 0x02,

131 
LA_SER_RUNPATH
 = 0x04,

132 
LA_SER_CONFIG
 = 0x08,

133 
LA_SER_DEFAULT
 = 0x40,

134 
LA_SER_SECURE
 = 0x80

140 
LA_FLG_BINDTO
 = 0x01,

141 
LA_FLG_BINDFROM
 = 0x02

147 
LA_SYMB_NOPLTENTER
 = 0x01,

148 
LA_SYMB_NOPLTEXIT
 = 0x02,

149 
LA_SYMB_STRUCTCALL
 = 0x04,

150 
LA_SYMB_DLSYM
 = 0x08,

151 
LA_SYMB_ALTVALUE
 = 0x10

155 
	sdl_phdr_öfo


157 
	`ElfW
(
Addr
Ë
dÕi_addr
;

158 c⁄° *
dÕi_«me
;

159 c⁄° 
	`ElfW
(
Phdr
Ë*
dÕi_phdr
;

160 
	`ElfW
(
HÆf
Ë
dÕi_phnum
;

168 
__exãnsi⁄__
 
dÕi_adds
;

170 
__exãnsi⁄__
 
dÕi_subs
;

174 
size_t
 
dÕi_és_modid
;

179 *
dÕi_és_d©a
;

182 
__BEGIN_DECLS


184 
	`dl_ôî©e_phdr
 ((*
__ˇŒback
Ë(
dl_phdr_öfo
 *,

185 
size_t
, *),

186 *
__d©a
);

192 
	`œ_vîsi⁄
 (
__vîsi⁄
);

193 
	`œ_a˘ivôy
 (
uöçå_t
 *
__cookõ
, 
__Êag
);

194 *
	`œ_obj£¨ch
 (c⁄° *
__«me
, 
uöçå_t
 *
__cookõ
,

195 
__Êag
);

196 
	`œ_obj›í
 (
lök_m≠
 *
__m≠
, 
Lmid_t
 
__lmid
,

197 
uöçå_t
 *
__cookõ
);

198 
	`œ_¥eöô
 (
uöçå_t
 *
__cookõ
);

199 
uöçå_t
 
	`œ_symböd32
 (
Elf32_Sym
 *
__sym
, 
__ndx
,

200 
uöçå_t
 *
__ªfcook
, uöçå_à*
__defcook
,

201 *
__Êags
, c⁄° *
__sym«me
);

202 
uöçå_t
 
	`œ_symböd64
 (
Elf64_Sym
 *
__sym
, 
__ndx
,

203 
uöçå_t
 *
__ªfcook
, uöçå_à*
__defcook
,

204 *
__Êags
, c⁄° *
__sym«me
);

205 
	`œ_obj˛o£
 (
uöçå_t
 *
__cookõ
);

207 
__END_DECLS


	@/usr/include/locale.h

22 #i‚def 
_LOCALE_H


23 
	#_LOCALE_H
 1

	)

25 
	~<„©uªs.h
>

27 
	#__√ed_NULL


	)

28 
	~<°ddef.h
>

29 
	~<bôs/loˇÀ.h
>

31 
	g__BEGIN_DECLS


35 
	#LC_CTYPE
 
__LC_CTYPE


	)

36 
	#LC_NUMERIC
 
__LC_NUMERIC


	)

37 
	#LC_TIME
 
__LC_TIME


	)

38 
	#LC_COLLATE
 
__LC_COLLATE


	)

39 
	#LC_MONETARY
 
__LC_MONETARY


	)

40 
	#LC_MESSAGES
 
__LC_MESSAGES


	)

41 
	#LC_ALL
 
__LC_ALL


	)

42 
	#LC_PAPER
 
__LC_PAPER


	)

43 
	#LC_NAME
 
__LC_NAME


	)

44 
	#LC_ADDRESS
 
__LC_ADDRESS


	)

45 
	#LC_TELEPHONE
 
__LC_TELEPHONE


	)

46 
	#LC_MEASUREMENT
 
__LC_MEASUREMENT


	)

47 
	#LC_IDENTIFICATION
 
__LC_IDENTIFICATION


	)

51 
	slc⁄v


55 *
	mdecimÆ_poöt
;

56 *
	mthoußnds_£p
;

62 *
	mgroupög
;

68 *
	möt_cuº_symbﬁ
;

69 *
	mcuºícy_symbﬁ
;

70 *
	mm⁄_decimÆ_poöt
;

71 *
	mm⁄_thoußnds_£p
;

72 *
	mm⁄_groupög
;

73 *
	mposôive_sign
;

74 *
	m√g©ive_sign
;

75 
	möt_‰ac_digôs
;

76 
	m‰ac_digôs
;

78 
	mp_cs_¥e˚des
;

80 
	mp_£p_by_•a˚
;

82 
	mn_cs_¥e˚des
;

84 
	mn_£p_by_•a˚
;

91 
	mp_sign_po¢
;

92 
	mn_sign_po¢
;

93 #ifde‡
__USE_ISOC99


95 
	möt_p_cs_¥e˚des
;

97 
	möt_p_£p_by_•a˚
;

99 
	möt_n_cs_¥e˚des
;

101 
	möt_n_£p_by_•a˚
;

108 
	möt_p_sign_po¢
;

109 
	möt_n_sign_po¢
;

111 
	m__öt_p_cs_¥e˚des
;

112 
	m__öt_p_£p_by_•a˚
;

113 
	m__öt_n_cs_¥e˚des
;

114 
	m__öt_n_£p_by_•a˚
;

115 
	m__öt_p_sign_po¢
;

116 
	m__öt_n_sign_po¢
;

122 *
	$£éoˇÀ
 (
__ˇãg‹y
, c⁄° *
__loˇÀ
Ë
__THROW
;

125 
lc⁄v
 *
	$loˇÀc⁄v
 (Ë
__THROW
;

128 #ifdef 
__USE_XOPEN2K8


135 
	~<bôs/ty≥s/loˇÀ_t.h
>

141 
loˇÀ_t
 
	$√wloˇÀ
 (
__ˇãg‹y_mask
, c⁄° *
__loˇÀ
,

142 
loˇÀ_t
 
__ba£
Ë
__THROW
;

148 
	#LC_CTYPE_MASK
 (1 << 
__LC_CTYPE
)

	)

149 
	#LC_NUMERIC_MASK
 (1 << 
__LC_NUMERIC
)

	)

150 
	#LC_TIME_MASK
 (1 << 
__LC_TIME
)

	)

151 
	#LC_COLLATE_MASK
 (1 << 
__LC_COLLATE
)

	)

152 
	#LC_MONETARY_MASK
 (1 << 
__LC_MONETARY
)

	)

153 
	#LC_MESSAGES_MASK
 (1 << 
__LC_MESSAGES
)

	)

154 
	#LC_PAPER_MASK
 (1 << 
__LC_PAPER
)

	)

155 
	#LC_NAME_MASK
 (1 << 
__LC_NAME
)

	)

156 
	#LC_ADDRESS_MASK
 (1 << 
__LC_ADDRESS
)

	)

157 
	#LC_TELEPHONE_MASK
 (1 << 
__LC_TELEPHONE
)

	)

158 
	#LC_MEASUREMENT_MASK
 (1 << 
__LC_MEASUREMENT
)

	)

159 
	#LC_IDENTIFICATION_MASK
 (1 << 
__LC_IDENTIFICATION
)

	)

160 
	#LC_ALL_MASK
 (
LC_CTYPE_MASK
 \

161 | 
LC_NUMERIC_MASK
 \

162 | 
LC_TIME_MASK
 \

163 | 
LC_COLLATE_MASK
 \

164 | 
LC_MONETARY_MASK
 \

165 | 
LC_MESSAGES_MASK
 \

166 | 
LC_PAPER_MASK
 \

167 | 
LC_NAME_MASK
 \

168 | 
LC_ADDRESS_MASK
 \

169 | 
LC_TELEPHONE_MASK
 \

170 | 
LC_MEASUREMENT_MASK
 \

171 | 
LC_IDENTIFICATION_MASK
 \

172 )

	)

176 
loˇÀ_t
 
	$du∂oˇÀ
 (
loˇÀ_t
 
__d©a£t
Ë
__THROW
;

180 
	$‰ìloˇÀ
 (
loˇÀ_t
 
__d©a£t
Ë
__THROW
;

187 
loˇÀ_t
 
	$u£loˇÀ
 (
loˇÀ_t
 
__d©a£t
Ë
__THROW
;

191 
	#LC_GLOBAL_LOCALE
 ((
loˇÀ_t
Ë-1L)

	)

195 
__END_DECLS


	@/usr/include/ltdl.h

33 #i‡!
deföed
 
LTDL_H


34 
	#LTDL_H
 1

	)

36 
	~<lib…dl/…_sy°em.h
>

37 
	~<lib…dl/…_îr‹.h
>

38 
	~<lib…dl/…_dŒﬂdî.h
>

40 
	gLT_BEGIN_C_DECLS


44 
	#LT_STRLEN
(
s
Ë(((sË&& (s)[0]Ë? 
	`°æí
 (sË: 0)

	)

50 
…__h™dÀ
 *
	t…_dlh™dÀ
;

53 
LT_SCOPE
 
…_dlöô
 ();

54 
LT_SCOPE
 
…_dÀxô
 ();

57 
LT_SCOPE
 
…_dœdd£¨chdú
 (c⁄° *
£¨ch_dú
);

58 
LT_SCOPE
 
…_dlö£π£¨chdú
 (c⁄° *
bef‹e
,

59 c⁄° *
£¨ch_dú
);

60 
LT_SCOPE
 
…_dl£t£¨ch∑th
 (c⁄° *
£¨ch_∑th
);

61 
LT_SCOPE
 c⁄° *
…_dlgë£¨ch∑th
 ();

62 
LT_SCOPE
 
…_dlf‹óchfûe
 (

63 c⁄° *
£¨ch_∑th
,

64 (*
func
Ë(c⁄° *
fûíame
, *
d©a
),

65 *
d©a
);

68 
LT_SCOPE
 
	`…_dœdvi£_öô
 (
…_dœdvi£
 *
advi£
);

69 
LT_SCOPE
 
	`…_dœdvi£_de°roy
 (
…_dœdvi£
 *
advi£
);

70 
LT_SCOPE
 
	`…_dœdvi£_ext
 (
…_dœdvi£
 *
advi£
);

71 
LT_SCOPE
 
	`…_dœdvi£_ªsidít
 (
…_dœdvi£
 *
advi£
);

72 
LT_SCOPE
 
	`…_dœdvi£_loˇl
 (
…_dœdvi£
 *
advi£
);

73 
LT_SCOPE
 
	`…_dœdvi£_globÆ
 (
…_dœdvi£
 *
advi£
);

74 
LT_SCOPE
 
	`…_dœdvi£_¥ñﬂd
 (
…_dœdvi£
 *
advi£
);

77 
LT_SCOPE
 
…_dlh™dÀ
 
	`…_dl›í
 (c⁄° *
fûíame
);

78 
LT_SCOPE
 
…_dlh™dÀ
 
	`…_dl›íext
 (c⁄° *
fûíame
);

79 
LT_SCOPE
 
…_dlh™dÀ
 
	`…_dl›íadvi£
 (c⁄° *
fûíame
,

80 
…_dœdvi£
 
advi£
);

81 
LT_SCOPE
 * 
	`…_dlsym
 (
…_dlh™dÀ
 
h™dÀ
, c⁄° *
«me
);

82 
LT_SCOPE
 c⁄° *
	`…_dÀº‹
 ();

83 
LT_SCOPE
 
	`…_dl˛o£
 (
…_dlh™dÀ
 
h™dÀ
);

93 c⁄° *
«me
;

94 *
addªss
;

95 } 
	t…_dlsymli°
;

97 
	t…_dÕªlﬂd_ˇŒback_func
 (
	t…_dlh™dÀ
 
	th™dÀ
);

99 
LT_SCOPE
 
	`…_dÕªlﬂd
 (c⁄° 
…_dlsymli°
 *
¥ñﬂded
);

100 
LT_SCOPE
 
	`…_dÕªlﬂd_deÁu…
 (c⁄° 
…_dlsymli°
 *
¥ñﬂded
);

101 
LT_SCOPE
 
	`…_dÕªlﬂd_›í
 (c⁄° *
‹igö©‹
,

102 
…_dÕªlﬂd_ˇŒback_func
 *
func
);

104 
	#…_¥ñﬂded_symbﬁs
 
…__PROGRAM__LTX_¥ñﬂded_symbﬁs


	)

106 
LT_DLSYM_CONST
 
…_dlsymli°
 
…__PROGRAM__LTX_¥ñﬂded_symbﬁs
[];

108 
	#LTDL_SET_PRELOADED_SYMBOLS
() \

109 
	`…_dÕªlﬂd_deÁu…
(
…_¥ñﬂded_symbﬁs
)

	)

118 * 
	t…_dlöãrÁ˚_id
;

119 
	t…_dlh™dÀ_öãrÁ˚
 (
	t…_dlh™dÀ
 
	th™dÀ
, c⁄° *
	tid_°rög
);

121 
LT_SCOPE
 
…_dlöãrÁ˚_id
 
	`…_dlöãrÁ˚_ªgi°î
 (c⁄° *
id_°rög
,

122 
…_dlh™dÀ_öãrÁ˚
 *
iÁ˚
);

123 
LT_SCOPE
 
	`…_dlöãrÁ˚_‰ì
 (
…_dlöãrÁ˚_id
 
key
);

124 
LT_SCOPE
 * 
	`…_dlˇŒî_£t_d©a
 (
…_dlöãrÁ˚_id
 
key
,

125 
…_dlh™dÀ
 
h™dÀ
, *
d©a
);

126 
LT_SCOPE
 * 
	`…_dlˇŒî_gë_d©a
 (
…_dlöãrÁ˚_id
 
key
,

127 
…_dlh™dÀ
 
h™dÀ
);

132 * 
fûíame
;

133 * 
«me
;

134 
ªf_cou¡
;

136 
is_ªsidít
:1;

137 
is_symglobÆ
:1;

139 
is_symloˇl
:1;

141 } 
	t…_dlöfo
;

143 
LT_SCOPE
 c⁄° 
…_dlöfo
 *
	`…_dlgëöfo
 (
…_dlh™dÀ
 
h™dÀ
);

145 
LT_SCOPE
 
…_dlh™dÀ
 
	`…_dlh™dÀ_ôî©e
 (
…_dlöãrÁ˚_id
 
iÁ˚
,

146 
…_dlh™dÀ
 
∂a˚
);

147 
LT_SCOPE
 
…_dlh™dÀ
 
	`…_dlh™dÀ_„tch
 (
…_dlöãrÁ˚_id
 
iÁ˚
,

148 c⁄° *
moduÀ_«me
);

149 
LT_SCOPE
 
	`…_dlh™dÀ_m≠
 (
…_dlöãrÁ˚_id
 
iÁ˚
,

150 (*
func
Ë(
…_dlh™dÀ
 
h™dÀ
, *
d©a
),

151 *
d©a
);

156 
LT_SCOPE
 
	`…_dlmakîesidít
 (
…_dlh™dÀ
 
h™dÀ
);

157 
LT_SCOPE
 
	`…_dli§esidít
 (
…_dlh™dÀ
 
h™dÀ
);

159 
	#…_±r
 *

	)

161 
LT_END_C_DECLS


	@/usr/include/malloc.h

20 #i‚de‡
_MALLOC_H


21 
	#_MALLOC_H
 1

	)

23 
	~<„©uªs.h
>

24 
	~<°ddef.h
>

25 
	~<°dio.h
>

27 #ifde‡
_LIBC


28 
	#__MALLOC_HOOK_VOLATILE


	)

29 
	#__MALLOC_DEPRECATED


	)

31 
	#__MALLOC_HOOK_VOLATILE
 vﬁ©ûe

	)

32 
	#__MALLOC_DEPRECATED
 
__©åibuã_dïªˇãd__


	)

36 
__BEGIN_DECLS


39 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__


40 
	`__©åibuã_Æloc_size__
 ((1)Ë
__wur
;

43 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

44 
__THROW
 
__©åibuã_mÆloc__
 
	`__©åibuã_Æloc_size__
 ((1, 2)Ë
__wur
;

51 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

52 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
 
	`__©åibuã_Æloc_size__
 ((2));

59 *
	$ªÆloˇºay
 (*
__±r
, 
size_t
 
__nmemb
, size_à
__size
)

60 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
 
	`__©åibuã_Æloc_size__
 ((2, 3))

61 
__©å_dóŒoc_‰ì
;

64 
	$‰ì
 (*
__±r
Ë
__THROW
;

67 *
	$memÆign
 (
size_t
 
__Æignmít
, size_à
__size
)

68 
__THROW
 
__©åibuã_mÆloc__
 
	`__©åibuã_Æloc_Æign__
 ((1))

69 
	`__©åibuã_Æloc_size__
 ((2)Ë
__wur
 
__©å_dóŒoc_‰ì
;

72 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__


73 
	`__©åibuã_Æloc_size__
 ((1)Ë
__wur
 
__©å_dóŒoc_‰ì
;

77 *
	$pvÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__


78 
__wur
 
__©å_dóŒoc_‰ì
;

82 
	smÆlöfo


84 
¨ía
;

85 
‹dblks
;

86 
smblks
;

87 
hblks
;

88 
hblkhd
;

89 
usmblks
;

90 
fsmblks
;

91 
u‹dblks
;

92 
f‹dblks
;

93 
kìpco°
;

99 
	smÆlöfo2


101 
size_t
 
¨ía
;

102 
size_t
 
‹dblks
;

103 
size_t
 
smblks
;

104 
size_t
 
hblks
;

105 
size_t
 
hblkhd
;

106 
size_t
 
usmblks
;

107 
size_t
 
fsmblks
;

108 
size_t
 
u‹dblks
;

109 
size_t
 
f‹dblks
;

110 
size_t
 
kìpco°
;

114 
mÆlöfo
 
	$mÆlöfo
 (Ë
__THROW
 
__MALLOC_DEPRECATED
;

117 
mÆlöfo2
 
	$mÆlöfo2
 (Ë
__THROW
;

120 #i‚de‡
M_MXFAST


121 
	#M_MXFAST
 1

	)

123 #i‚de‡
M_NLBLKS


124 
	#M_NLBLKS
 2

	)

126 #i‚de‡
M_GRAIN


127 
	#M_GRAIN
 3

	)

129 #i‚de‡
M_KEEP


130 
	#M_KEEP
 4

	)

134 
	#M_TRIM_THRESHOLD
 -1

	)

135 
	#M_TOP_PAD
 -2

	)

136 
	#M_MMAP_THRESHOLD
 -3

	)

137 
	#M_MMAP_MAX
 -4

	)

138 
	#M_CHECK_ACTION
 -5

	)

139 
	#M_PERTURB
 -6

	)

140 
	#M_ARENA_TEST
 -7

	)

141 
	#M_ARENA_MAX
 -8

	)

144 
	$mÆl›t
 (
__∑øm
, 
__vÆ
Ë
__THROW
;

148 
	$mÆloc_åim
 (
size_t
 
__∑d
Ë
__THROW
;

152 
size_t
 
	$mÆloc_ußbÀ_size
 (*
__±r
Ë
__THROW
;

155 
	$mÆloc_°©s
 (Ë
__THROW
;

158 
	$mÆloc_öfo
 (
__›ti⁄s
, 
FILE
 *
__Â
Ë
__THROW
;

160 
__END_DECLS


	@/usr/include/math.h

23 #i‚def 
_MATH_H


24 
	#_MATH_H
 1

	)

26 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

27 
	~<bôs/libc-hódî-°¨t.h
>

29 #i‡
deföed
 
log
 && deföed 
__GNUC__


30 #w¨nög 
A
 
ma¸o
 
ˇŒed
 
log
 
was
 
Æªady
 
deföed
 
whí
 <
m©h
.
h
> wa†
ö˛uded
.

31 #w¨nög 
This
 
wûl
 
ˇu£
 
compû©i⁄
 
¥obÀms
.

34 
	g__BEGIN_DECLS


37 
	~<bôs/ty≥s.h
>

40 
	~<bôs/m©h-ve˘‹.h
>

43 
	~<bôs/Êﬂä.h
>

47 #i‡
__GNUC_PREREQ
 (3, 3)

48 
	#HUGE_VAL
 (
	`__buûtö_huge_vÆ
 ())

	)

55 
	#HUGE_VAL
 1e10000

	)

57 #ifde‡
__USE_ISOC99


58 #i‡
__GNUC_PREREQ
 (3, 3)

59 
	#HUGE_VALF
 (
	`__buûtö_huge_vÆf
 ())

	)

60 
	#HUGE_VALL
 (
	`__buûtö_huge_vÆl
 ())

	)

62 
	#HUGE_VALF
 1e10000f

	)

63 
	#HUGE_VALL
 1e10000L

	)

66 #i‡
__HAVE_FLOAT16
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

67 
	#HUGE_VAL_F16
 (
	`__buûtö_huge_vÆf16
 ())

	)

69 #i‡
__HAVE_FLOAT32
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

70 
	#HUGE_VAL_F32
 (
	`__buûtö_huge_vÆf32
 ())

	)

72 #i‡
__HAVE_FLOAT64
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

73 
	#HUGE_VAL_F64
 (
	`__buûtö_huge_vÆf64
 ())

	)

75 #i‡
__HAVE_FLOAT128
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

76 
	#HUGE_VAL_F128
 (
	`__buûtö_huge_vÆf128
 ())

	)

78 #i‡
__HAVE_FLOAT32X
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

79 
	#HUGE_VAL_F32X
 (
	`__buûtö_huge_vÆf32x
 ())

	)

81 #i‡
__HAVE_FLOAT64X
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

82 
	#HUGE_VAL_F64X
 (
	`__buûtö_huge_vÆf64x
 ())

	)

84 #i‡
__HAVE_FLOAT128X
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

85 
	#HUGE_VAL_F128X
 (
	`__buûtö_huge_vÆf128x
 ())

	)

88 #ifde‡
__USE_ISOC99


90 #i‡
__GNUC_PREREQ
 (3, 3)

91 
	#INFINITY
 (
	`__buûtö_öff
 ())

	)

93 
	#INFINITY
 
HUGE_VALF


	)

97 #i‡
__GNUC_PREREQ
 (3, 3)

98 
	#NAN
 (
	`__buûtö_«nf
 (""))

	)

103 
	#NAN
 (0.0‡/ 0.0f)

	)

107 #i‡
__GLIBC_USE
 (
IEC_60559_BFP_EXT
)

109 #i‡
__GNUC_PREREQ
 (3, 3)

110 
	#SNANF
 (
	`__buûtö_«nsf
 (""))

	)

111 
	#SNAN
 (
	`__buûtö_«ns
 (""))

	)

112 
	#SNANL
 (
	`__buûtö_«n¶
 (""))

	)

115 #i‡(
__HAVE_FLOAT16
 \

116 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
) \

117 && (
deföed
 
	g__USE_GNU
 || !
	$__GLIBC_USE
 (
ISOC2X
)))

118 
	#SNANF16
 (
	`__buûtö_«nsf16
 (""))

	)

120 #i‡(
__HAVE_FLOAT32
 \

121 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
) \

122 && (
deföed
 
__USE_GNU
 || !
	$__GLIBC_USE
 (
ISOC2X
)))

123 
	#SNANF32
 (
	`__buûtö_«nsf32
 (""))

	)

125 #i‡(
__HAVE_FLOAT64
 \

126 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
) \

127 && (
deföed
 
__USE_GNU
 || !
	$__GLIBC_USE
 (
ISOC2X
)))

128 
	#SNANF64
 (
	`__buûtö_«nsf64
 (""))

	)

130 #i‡(
__HAVE_FLOAT128
 \

131 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
) \

132 && (
deföed
 
__USE_GNU
 || !
	$__GLIBC_USE
 (
ISOC2X
)))

133 
	#SNANF128
 (
	`__buûtö_«nsf128
 (""))

	)

135 #i‡(
__HAVE_FLOAT32X
 \

136 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
) \

137 && (
deföed
 
__USE_GNU
 || !
	$__GLIBC_USE
 (
ISOC2X
)))

138 
	#SNANF32X
 (
	`__buûtö_«nsf32x
 (""))

	)

140 #i‡(
__HAVE_FLOAT64X
 \

141 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
) \

142 && (
deföed
 
__USE_GNU
 || !
	$__GLIBC_USE
 (
ISOC2X
)))

143 
	#SNANF64X
 (
	`__buûtö_«nsf64x
 (""))

	)

145 #i‡(
__HAVE_FLOAT128X
 \

146 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
) \

147 && (
deföed
 
__USE_GNU
 || !
	$__GLIBC_USE
 (
ISOC2X
)))

148 
	#SNANF128X
 (
	`__buûtö_«nsf128x
 (""))

	)

152 
	~<bôs/Êt-evÆ-mëhod.h
>

154 #ifde‡
__USE_ISOC99


162 #i‡
__GLIBC_FLT_EVAL_METHOD
 == 0 || __GLIBC_FLT_EVAL_METHOD == 16

163 
	tÊﬂt_t
;

164 
	tdoubÀ_t
;

165 #ñi‡
__GLIBC_FLT_EVAL_METHOD
 == 1

166 
	tÊﬂt_t
;

167 
	tdoubÀ_t
;

168 #ñi‡
__GLIBC_FLT_EVAL_METHOD
 == 2

169 
	tÊﬂt_t
;

170 
	tdoubÀ_t
;

171 #ñi‡
__GLIBC_FLT_EVAL_METHOD
 == 32

172 
_Flﬂt32
 
	tÊﬂt_t
;

173 
	tdoubÀ_t
;

174 #ñi‡
__GLIBC_FLT_EVAL_METHOD
 == 33

175 
_Flﬂt32x
 
	tÊﬂt_t
;

176 
_Flﬂt32x
 
	tdoubÀ_t
;

177 #ñi‡
__GLIBC_FLT_EVAL_METHOD
 == 64

178 
_Flﬂt64
 
	tÊﬂt_t
;

179 
_Flﬂt64
 
	tdoubÀ_t
;

180 #ñi‡
__GLIBC_FLT_EVAL_METHOD
 == 65

181 
_Flﬂt64x
 
	tÊﬂt_t
;

182 
_Flﬂt64x
 
	tdoubÀ_t
;

183 #ñi‡
__GLIBC_FLT_EVAL_METHOD
 == 128

184 
_Flﬂt128
 
	tÊﬂt_t
;

185 
_Flﬂt128
 
	tdoubÀ_t
;

186 #ñi‡
__GLIBC_FLT_EVAL_METHOD
 == 129

187 
_Flﬂt128x
 
	tÊﬂt_t
;

188 
_Flﬂt128x
 
	tdoubÀ_t
;

204 
	~<bôs/Â-logb.h
>

205 #ifde‡
__USE_ISOC99


206 #i‡
__FP_LOGB0_IS_MIN


207 
	#FP_ILOGB0
 (-2147483647 - 1)

	)

209 
	#FP_ILOGB0
 (-2147483647)

	)

211 #i‡
__FP_LOGBNAN_IS_MIN


212 
	#FP_ILOGBNAN
 (-2147483647 - 1)

	)

214 
	#FP_ILOGBNAN
 2147483647

	)

217 #i‡
	`__GLIBC_USE
 (
IEC_60559_BFP_EXT_C2X
)

218 #i‡
__WORDSIZE
 == 32

219 
	#__FP_LONG_MAX
 0x7fffffffL

	)

221 
	#__FP_LONG_MAX
 0x7fffffffffffffffL

	)

223 #i‡
__FP_LOGB0_IS_MIN


224 
	#FP_LLOGB0
 (-
__FP_LONG_MAX
 - 1)

	)

226 
	#FP_LLOGB0
 (-
__FP_LONG_MAX
)

	)

228 #i‡
__FP_LOGBNAN_IS_MIN


229 
	#FP_LLOGBNAN
 (-
__FP_LONG_MAX
 - 1)

	)

231 
	#FP_LLOGBNAN
 
__FP_LONG_MAX


	)

247 
	~<bôs/Â-Á°.h
>

249 #i‡
	`__GLIBC_USE
 (
IEC_60559_BFP_EXT_C2X
)

253 
FP_INT_UPWARD
 =

254 
	#FP_INT_UPWARD
 0

	)

255 
FP_INT_UPWARD
,

256 
FP_INT_DOWNWARD
 =

257 
	#FP_INT_DOWNWARD
 1

	)

258 
FP_INT_DOWNWARD
,

259 
FP_INT_TOWARDZERO
 =

260 
	#FP_INT_TOWARDZERO
 2

	)

261 
FP_INT_TOWARDZERO
,

262 
FP_INT_TONEARESTFROMZERO
 =

263 
	#FP_INT_TONEARESTFROMZERO
 3

	)

264 
FP_INT_TONEARESTFROMZERO
,

265 
FP_INT_TONEAREST
 =

266 
	#FP_INT_TONEAREST
 4

	)

267 
FP_INT_TONEAREST
,

276 
	#__SIMD_DECL
(
fun˘i⁄
Ë
	`__CONCAT
 (
__DECL_SIMD_
, fun˘i⁄)

	)

278 
	#__MATHCALL_VEC
(
fun˘i⁄
, 
suffix
, 
¨gs
) \

279 
	`__SIMD_DECL
 (
	`__MATH_PRECNAME
 (
fun˘i⁄
, 
suffix
)) \

280 
	`__MATHCALL
 (
fun˘i⁄
, 
suffix
, 
¨gs
)

	)

282 
	#__MATHDECL_VEC
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

283 
	`__SIMD_DECL
 (
	`__MATH_PRECNAME
 (
fun˘i⁄
, 
suffix
)) \

284 
	`__MATHDECL
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
)

	)

286 
	#__MATHCALL
(
fun˘i⁄
,
suffix
, 
¨gs
) \

287 
	`__MATHDECL
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
)

	)

288 
	#__MATHDECL
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

289 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
); \

290 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
)

	)

291 
	#__MATHCALLX
(
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

292 
	`__MATHDECLX
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
)

	)

293 
	#__MATHDECLX
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

294 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
); \

295 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
)

	)

296 
	#__MATHDECL_1_IMPL
(
ty≥
, 
fun˘i⁄
, 
suffix
, 
¨gs
) \

297 
ty≥
 
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
Ë
¨gs
 
__THROW


	)

298 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
, 
suffix
, 
¨gs
) \

299 
	`__MATHDECL_1_IMPL
(
ty≥
, 
fun˘i⁄
, 
suffix
, 
¨gs
)

	)

302 
	#__MATHDECL_ALIAS
(
ty≥
, 
fun˘i⁄
, 
suffix
, 
¨gs
, 
Æüs
) \

303 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
, 
suffix
, 
¨gs
)

	)

305 
	#__MATHREDIR
(
ty≥
, 
fun˘i⁄
, 
suffix
, 
¨gs
, 
to
) \

306 
ty≥
 
	`__REDIRECT_NTH
 (
	`__MATH_PRECNAME
 (
fun˘i⁄
, 
suffix
), 
¨gs
, 
to
)

	)

308 
	#_MdoubÀ_
 

	)

309 
	#__MATH_PRECNAME
(
«me
,
r
Ë
	`__CONCAT
“ame,r)

	)

310 
	#__MATH_DECLARING_DOUBLE
 1

	)

311 
	#__MATH_DECLARING_FLOATN
 0

	)

312 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

313 
	~<bôs/m©hˇŒs.h
>

314 #unde‡
_MdoubÀ_


315 #unde‡
__MATH_PRECNAME


316 #unde‡
__MATH_DECLARING_DOUBLE


317 #unde‡
__MATH_DECLARING_FLOATN


319 #ifde‡
__USE_ISOC99


325 
	#_MdoubÀ_
 

	)

326 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f
##
	)
r

327 
	#__MATH_DECLARING_DOUBLE
 0

	)

328 
	#__MATH_DECLARING_FLOATN
 0

	)

329 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

330 
	~<bôs/m©hˇŒs.h
>

331 #unde‡
_MdoubÀ_


332 #unde‡
__MATH_PRECNAME


333 #unde‡
__MATH_DECLARING_DOUBLE


334 #unde‡
__MATH_DECLARING_FLOATN


336 #i‡!(
deföed
 
__NO_LONG_DOUBLE_MATH
 && deföed 
_LIBC
) \

337 || 
deföed
 
__LDBL_COMPAT
 \

338 || 
deföed
 
_LIBC_TEST


339 #ifde‡
__LDBL_COMPAT


341 #ifde‡
__USE_ISOC99


342 
	$__∆dbl_√xâow¨df
 (
__x
, 
__y
)

343 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

344 #ifde‡
__REDIRECT_NTH


345 
	`__REDIRECT_NTH
 (
√xâow¨df
, (
__x
, 
__y
),

346 
__∆dbl_√xâow¨df
)

347 
	`__©åibuã__
 ((
__c⁄°__
));

348 
	`__REDIRECT_NTH
 (
√xâow¨d
, (
__x
, 
__y
),

349 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

350 
	`__REDIRECT_NTH
 (
√xâow¨dl
,

351 (
__x
, 
__y
),

352 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

356 #unde‡
__MATHDECL_1


357 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

358 
	`__MATHREDIR
(
ty≥
, 
fun˘i⁄
, 
suffix
, 
¨gs
, 
	`__CONCAT
(fun˘i⁄,suffix))

	)

360 #ñi‡
__LDOUBLE_REDIRECTS_TO_FLOAT128_ABI
 == 1

361 #ifde‡
__REDIRECT_NTH


362 #ifde‡
__USE_ISOC99


363 
	`__REDIRECT_NTH
 (
√xâow¨df
, (
__x
, 
__y
),

364 
__√xâow¨df_to_õì128
)

365 
	`__©åibuã__
 ((
__c⁄°__
));

366 
	`__REDIRECT_NTH
 (
√xâow¨d
, (
__x
, 
__y
),

367 
__√xâow¨d_to_õì128
)

368 
	`__©åibuã__
 ((
__c⁄°__
));

370 
	#__dªmõì128
 
__ªmaödîõì128


	)

371 
	#__gammaõì128
 
__lgammaõì128


	)

376 #unde‡
__MATHDECL_1


377 #unde‡
__MATHDECL_ALIAS


379 
	#__REDIRTO
(
fun˘i⁄
, 
suffix
) \

380 
__
 ## 
fun˘i⁄
 ## 
õì128
 ## 
suffix


	)

381 
	#__REDIRTO_ALT
(
fun˘i⁄
, 
suffix
) \

382 
__
 ## 
fun˘i⁄
 ## 
f128
 ## 
suffix


	)

384 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
, 
suffix
, 
¨gs
) \

385 
	`__MATHREDIR
 (
ty≥
, 
fun˘i⁄
, 
suffix
, 
¨gs
, 
	`__REDIRTO
 (fun˘i⁄, suffix))

	)

386 
	#__MATHDECL_ALIAS
(
ty≥
, 
fun˘i⁄
, 
suffix
, 
¨gs
, 
Æüs
) \

387 
	`__MATHREDIR
 (
ty≥
, 
fun˘i⁄
, 
suffix
, 
¨gs
, 
	`__REDIRTO_ALT
 (
Æüs
, suffix))

	)

393 
	#_MdoubÀ_
 

	)

394 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
l
##
	)
r

395 
	#__MATH_DECLARING_DOUBLE
 0

	)

396 
	#__MATH_DECLARING_FLOATN
 0

	)

397 
	#__MATH_DECLARE_LDOUBLE
 1

	)

398 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

399 
	~<bôs/m©hˇŒs.h
>

401 #unde‡
_MdoubÀ_


402 #unde‡
__MATH_PRECNAME


403 #unde‡
__MATH_DECLARING_DOUBLE


404 #unde‡
__MATH_DECLARING_FLOATN


406 #i‡
deföed
 
__LDBL_COMPAT
 \

407 || 
__LDOUBLE_REDIRECTS_TO_FLOAT128_ABI
 == 1

408 #unde‡
__REDIRTO


409 #unde‡
__REDIRTO_ALT


410 #unde‡
__MATHDECL_1


411 #unde‡
__MATHDECL_ALIAS


412 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
, 
suffix
, 
¨gs
) \

413 
	`__MATHDECL_1_IMPL
(
ty≥
, 
fun˘i⁄
, 
suffix
, 
¨gs
)

	)

414 
	#__MATHDECL_ALIAS
(
ty≥
, 
fun˘i⁄
, 
suffix
, 
¨gs
, 
Æüs
) \

415 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
, 
suffix
, 
¨gs
)

	)

424 #i‡
__HAVE_DISTINCT_FLOAT16
 || (
__HAVE_FLOAT16
 && !
deföed
 
_LIBC
)

425 
	#_MdoubÀ_
 
_Flﬂt16


	)

426 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f16
##
	)
r

427 
	#__MATH_DECLARING_DOUBLE
 0

	)

428 
	#__MATH_DECLARING_FLOATN
 1

	)

429 #i‡
__HAVE_DISTINCT_FLOAT16


430 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

432 #i‡
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

433 
	~<bôs/m©hˇŒs.h
>

435 #unde‡
_MdoubÀ_


436 #unde‡
__MATH_PRECNAME


437 #unde‡
__MATH_DECLARING_DOUBLE


438 #unde‡
__MATH_DECLARING_FLOATN


441 #i‡
__HAVE_DISTINCT_FLOAT32
 || (
__HAVE_FLOAT32
 && !
deföed
 
_LIBC
)

442 
	#_MdoubÀ_
 
_Flﬂt32


	)

443 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f32
##
	)
r

444 
	#__MATH_DECLARING_DOUBLE
 0

	)

445 
	#__MATH_DECLARING_FLOATN
 1

	)

446 #i‡
__HAVE_DISTINCT_FLOAT32


447 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

449 #i‡
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

450 
	~<bôs/m©hˇŒs.h
>

452 #unde‡
_MdoubÀ_


453 #unde‡
__MATH_PRECNAME


454 #unde‡
__MATH_DECLARING_DOUBLE


455 #unde‡
__MATH_DECLARING_FLOATN


458 #i‡
__HAVE_DISTINCT_FLOAT64
 || (
__HAVE_FLOAT64
 && !
deföed
 
_LIBC
)

459 
	#_MdoubÀ_
 
_Flﬂt64


	)

460 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f64
##
	)
r

461 
	#__MATH_DECLARING_DOUBLE
 0

	)

462 
	#__MATH_DECLARING_FLOATN
 1

	)

463 #i‡
__HAVE_DISTINCT_FLOAT64


464 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

466 #i‡
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

467 
	~<bôs/m©hˇŒs.h
>

469 #unde‡
_MdoubÀ_


470 #unde‡
__MATH_PRECNAME


471 #unde‡
__MATH_DECLARING_DOUBLE


472 #unde‡
__MATH_DECLARING_FLOATN


475 #i‡
__HAVE_DISTINCT_FLOAT128
 || (
__HAVE_FLOAT128
 && !
deföed
 
_LIBC
)

476 
	#_MdoubÀ_
 
_Flﬂt128


	)

477 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f128
##
	)
r

478 
	#__MATH_DECLARING_DOUBLE
 0

	)

479 
	#__MATH_DECLARING_FLOATN
 1

	)

480 #i‡
__HAVE_DISTINCT_FLOAT128


481 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

483 #i‡
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

484 
	~<bôs/m©hˇŒs.h
>

486 #unde‡
_MdoubÀ_


487 #unde‡
__MATH_PRECNAME


488 #unde‡
__MATH_DECLARING_DOUBLE


489 #unde‡
__MATH_DECLARING_FLOATN


492 #i‡
__HAVE_DISTINCT_FLOAT32X
 || (
__HAVE_FLOAT32X
 && !
deföed
 
_LIBC
)

493 
	#_MdoubÀ_
 
_Flﬂt32x


	)

494 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f32x
##
	)
r

495 
	#__MATH_DECLARING_DOUBLE
 0

	)

496 
	#__MATH_DECLARING_FLOATN
 1

	)

497 #i‡
__HAVE_DISTINCT_FLOAT32X


498 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

500 #i‡
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

501 
	~<bôs/m©hˇŒs.h
>

503 #unde‡
_MdoubÀ_


504 #unde‡
__MATH_PRECNAME


505 #unde‡
__MATH_DECLARING_DOUBLE


506 #unde‡
__MATH_DECLARING_FLOATN


509 #i‡
__HAVE_DISTINCT_FLOAT64X
 || (
__HAVE_FLOAT64X
 && !
deföed
 
_LIBC
)

510 
	#_MdoubÀ_
 
_Flﬂt64x


	)

511 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f64x
##
	)
r

512 
	#__MATH_DECLARING_DOUBLE
 0

	)

513 
	#__MATH_DECLARING_FLOATN
 1

	)

514 #i‡
__HAVE_DISTINCT_FLOAT64X


515 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

517 #i‡
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

518 
	~<bôs/m©hˇŒs.h
>

520 #unde‡
_MdoubÀ_


521 #unde‡
__MATH_PRECNAME


522 #unde‡
__MATH_DECLARING_DOUBLE


523 #unde‡
__MATH_DECLARING_FLOATN


526 #i‡
__HAVE_DISTINCT_FLOAT128X
 || (
__HAVE_FLOAT128X
 && !
deföed
 
_LIBC
)

527 
	#_MdoubÀ_
 
_Flﬂt128x


	)

528 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f128x
##
	)
r

529 
	#__MATH_DECLARING_DOUBLE
 0

	)

530 
	#__MATH_DECLARING_FLOATN
 1

	)

531 #i‡
__HAVE_DISTINCT_FLOAT128X


532 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

534 #i‡
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

535 
	~<bôs/m©hˇŒs.h
>

537 #unde‡
_MdoubÀ_


538 #unde‡
__MATH_PRECNAME


539 #unde‡
__MATH_DECLARING_DOUBLE


540 #unde‡
__MATH_DECLARING_FLOATN


543 #unde‡
__MATHDECL_1_IMPL


544 #unde‡
__MATHDECL_1


545 #unde‡
__MATHDECL_ALIAS


546 #unde‡
__MATHDECL


547 #unde‡
__MATHCALL


550 
	#__MATHCALL_NARROW_ARGS_1
 (
_M¨g_
 
__x
)

	)

551 
	#__MATHCALL_NARROW_ARGS_2
 (
_M¨g_
 
__x
, _M¨g_ 
__y
)

	)

552 
	#__MATHCALL_NARROW_ARGS_3
 (
_M¨g_
 
__x
, _M¨g_ 
__y
, _M¨g_ 
__z
)

	)

553 
	#__MATHCALL_NARROW_NORMAL
(
func
, 
«rgs
) \

554 
_Mªt_
 
func
 
__MATHCALL_NARROW_ARGS_
 ## 
«rgs
 
__THROW


	)

555 
	#__MATHCALL_NARROW_REDIR
(
func
, 
ªdú
, 
«rgs
) \

556 
_Mªt_
 
	`__REDIRECT_NTH
 (
func
, 
__MATHCALL_NARROW_ARGS_
 ## 
«rgs
, \

557 
ªdú
)

	)

558 
	#__MATHCALL_NARROW
(
func
, 
ªdú
, 
«rgs
) \

559 
	`__MATHCALL_NARROW_NORMAL
 (
func
, 
«rgs
)

	)

561 #i‡
	`__GLIBC_USE
 (
IEC_60559_BFP_EXT_C2X
)

563 
	#_Mªt_
 

	)

564 
	#_M¨g_
 

	)

565 
	#__MATHCALL_NAME
(
«me
Ë
f
 ## 
	)
name

566 
	~<bôs/m©hˇŒs-«ºow.h
>

567 #unde‡
_Mªt_


568 #unde‡
_M¨g_


569 #unde‡
__MATHCALL_NAME


571 
	#_Mªt_
 

	)

572 
	#_M¨g_
 

	)

573 
	#__MATHCALL_NAME
(
«me
Ë
f
 ##Çamê## 
l


	)

574 #ifde‡
__LDBL_COMPAT


575 
	#__MATHCALL_REDIR_NAME
(
«me
Ë
f
 ## 
	)
name

576 
	#__MATHCALL_REDIR_NAME2
(
«me
Ë
f
 ## 
	)
name

577 #unde‡
__MATHCALL_NARROW


578 
	#__MATHCALL_NARROW
(
func
, 
ªdú
, 
«rgs
) \

579 
	`__MATHCALL_NARROW_REDIR
 (
func
, 
ªdú
, 
«rgs
)

	)

580 #ñi‡
__LDOUBLE_REDIRECTS_TO_FLOAT128_ABI
 == 1

581 
	#__MATHCALL_REDIR_NAME
(
«me
Ë
__
 ## 
f32
 ##Çamê## 
õì128


	)

582 
	#__MATHCALL_REDIR_NAME2
(
«me
Ë
__
 ## 
f32
 ##Çamê## 
õì128


	)

583 #unde‡
__MATHCALL_NARROW


584 
	#__MATHCALL_NARROW
(
func
, 
ªdú
, 
«rgs
) \

585 
	`__MATHCALL_NARROW_REDIR
 (
func
, 
ªdú
, 
«rgs
)

	)

587 
	~<bôs/m©hˇŒs-«ºow.h
>

588 #unde‡
_Mªt_


589 #unde‡
_M¨g_


590 #unde‡
__MATHCALL_NAME


591 #i‡
deföed
 
__LDBL_COMPAT
 \

592 || 
__LDOUBLE_REDIRECTS_TO_FLOAT128_ABI
 == 1

593 #unde‡
__MATHCALL_REDIR_NAME


594 #unde‡
__MATHCALL_REDIR_NAME2


595 #unde‡
__MATHCALL_NARROW


596 
	#__MATHCALL_NARROW
(
func
, 
ªdú
, 
«rgs
) \

597 
	`__MATHCALL_NARROW_NORMAL
 (
func
, 
«rgs
)

	)

600 
	#_Mªt_
 

	)

601 
	#_M¨g_
 

	)

602 
	#__MATHCALL_NAME
(
«me
Ë
d
 ##Çamê## 
l


	)

603 #ifde‡
__LDBL_COMPAT


604 
	#__MATHCALL_REDIR_NAME
(
«me
Ë
__∆dbl_d
 ##Çamê## 
l


	)

605 
	#__MATHCALL_REDIR_NAME2
(
«me
Ë
	)
name

606 #unde‡
__MATHCALL_NARROW


607 
	#__MATHCALL_NARROW
(
func
, 
ªdú
, 
«rgs
) \

608 
	`__MATHCALL_NARROW_REDIR
 (
func
, 
ªdú
, 
«rgs
)

	)

609 #ñi‡
__LDOUBLE_REDIRECTS_TO_FLOAT128_ABI
 == 1

610 
	#__MATHCALL_REDIR_NAME
(
«me
Ë
__
 ## 
f64
 ##Çamê## 
õì128


	)

611 
	#__MATHCALL_REDIR_NAME2
(
«me
Ë
__
 ## 
f64
 ##Çamê## 
õì128


	)

612 #unde‡
__MATHCALL_NARROW


613 
	#__MATHCALL_NARROW
(
func
, 
ªdú
, 
«rgs
) \

614 
	`__MATHCALL_NARROW_REDIR
 (
func
, 
ªdú
, 
«rgs
)

	)

616 
	~<bôs/m©hˇŒs-«ºow.h
>

617 #unde‡
_Mªt_


618 #unde‡
_M¨g_


619 #unde‡
__MATHCALL_NAME


620 #i‡
deföed
 
__LDBL_COMPAT
 \

621 || 
__LDOUBLE_REDIRECTS_TO_FLOAT128_ABI
 == 1

622 #unde‡
__MATHCALL_REDIR_NAME


623 #unde‡
__MATHCALL_REDIR_NAME2


624 #unde‡
__MATHCALL_NARROW


625 
	#__MATHCALL_NARROW
(
func
, 
ªdú
, 
«rgs
) \

626 
	`__MATHCALL_NARROW_NORMAL
 (
func
, 
«rgs
)

	)

631 #i‡
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

633 #i‡
__HAVE_FLOAT16
 && 
__HAVE_FLOAT32


634 
	#_Mªt_
 
_Flﬂt16


	)

635 
	#_M¨g_
 
_Flﬂt32


	)

636 
	#__MATHCALL_NAME
(
«me
Ë
f16
 ##Çamê## 
f32


	)

637 
	~<bôs/m©hˇŒs-«ºow.h
>

638 #unde‡
_Mªt_


639 #unde‡
_M¨g_


640 #unde‡
__MATHCALL_NAME


643 #i‡
__HAVE_FLOAT16
 && 
__HAVE_FLOAT32X


644 
	#_Mªt_
 
_Flﬂt16


	)

645 
	#_M¨g_
 
_Flﬂt32x


	)

646 
	#__MATHCALL_NAME
(
«me
Ë
f16
 ##Çamê## 
f32x


	)

647 
	~<bôs/m©hˇŒs-«ºow.h
>

648 #unde‡
_Mªt_


649 #unde‡
_M¨g_


650 #unde‡
__MATHCALL_NAME


653 #i‡
__HAVE_FLOAT16
 && 
__HAVE_FLOAT64


654 
	#_Mªt_
 
_Flﬂt16


	)

655 
	#_M¨g_
 
_Flﬂt64


	)

656 
	#__MATHCALL_NAME
(
«me
Ë
f16
 ##Çamê## 
f64


	)

657 
	~<bôs/m©hˇŒs-«ºow.h
>

658 #unde‡
_Mªt_


659 #unde‡
_M¨g_


660 #unde‡
__MATHCALL_NAME


663 #i‡
__HAVE_FLOAT16
 && 
__HAVE_FLOAT64X


664 
	#_Mªt_
 
_Flﬂt16


	)

665 
	#_M¨g_
 
_Flﬂt64x


	)

666 
	#__MATHCALL_NAME
(
«me
Ë
f16
 ##Çamê## 
f64x


	)

667 
	~<bôs/m©hˇŒs-«ºow.h
>

668 #unde‡
_Mªt_


669 #unde‡
_M¨g_


670 #unde‡
__MATHCALL_NAME


673 #i‡
__HAVE_FLOAT16
 && 
__HAVE_FLOAT128


674 
	#_Mªt_
 
_Flﬂt16


	)

675 
	#_M¨g_
 
_Flﬂt128


	)

676 
	#__MATHCALL_NAME
(
«me
Ë
f16
 ##Çamê## 
f128


	)

677 
	~<bôs/m©hˇŒs-«ºow.h
>

678 #unde‡
_Mªt_


679 #unde‡
_M¨g_


680 #unde‡
__MATHCALL_NAME


683 #i‡
__HAVE_FLOAT16
 && 
__HAVE_FLOAT128X


684 
	#_Mªt_
 
_Flﬂt16


	)

685 
	#_M¨g_
 
_Flﬂt128x


	)

686 
	#__MATHCALL_NAME
(
«me
Ë
f16
 ##Çamê## 
f128x


	)

687 
	~<bôs/m©hˇŒs-«ºow.h
>

688 #unde‡
_Mªt_


689 #unde‡
_M¨g_


690 #unde‡
__MATHCALL_NAME


693 #i‡
__HAVE_FLOAT32
 && 
__HAVE_FLOAT32X


694 
	#_Mªt_
 
_Flﬂt32


	)

695 
	#_M¨g_
 
_Flﬂt32x


	)

696 
	#__MATHCALL_NAME
(
«me
Ë
f32
 ##Çamê## 
f32x


	)

697 
	~<bôs/m©hˇŒs-«ºow.h
>

698 #unde‡
_Mªt_


699 #unde‡
_M¨g_


700 #unde‡
__MATHCALL_NAME


703 #i‡
__HAVE_FLOAT32
 && 
__HAVE_FLOAT64


704 
	#_Mªt_
 
_Flﬂt32


	)

705 
	#_M¨g_
 
_Flﬂt64


	)

706 
	#__MATHCALL_NAME
(
«me
Ë
f32
 ##Çamê## 
f64


	)

707 
	~<bôs/m©hˇŒs-«ºow.h
>

708 #unde‡
_Mªt_


709 #unde‡
_M¨g_


710 #unde‡
__MATHCALL_NAME


713 #i‡
__HAVE_FLOAT32
 && 
__HAVE_FLOAT64X


714 
	#_Mªt_
 
_Flﬂt32


	)

715 
	#_M¨g_
 
_Flﬂt64x


	)

716 
	#__MATHCALL_NAME
(
«me
Ë
f32
 ##Çamê## 
f64x


	)

717 
	~<bôs/m©hˇŒs-«ºow.h
>

718 #unde‡
_Mªt_


719 #unde‡
_M¨g_


720 #unde‡
__MATHCALL_NAME


723 #i‡
__HAVE_FLOAT32
 && 
__HAVE_FLOAT128


724 
	#_Mªt_
 
_Flﬂt32


	)

725 
	#_M¨g_
 
_Flﬂt128


	)

726 
	#__MATHCALL_NAME
(
«me
Ë
f32
 ##Çamê## 
f128


	)

727 
	~<bôs/m©hˇŒs-«ºow.h
>

728 #unde‡
_Mªt_


729 #unde‡
_M¨g_


730 #unde‡
__MATHCALL_NAME


733 #i‡
__HAVE_FLOAT32
 && 
__HAVE_FLOAT128X


734 
	#_Mªt_
 
_Flﬂt32


	)

735 
	#_M¨g_
 
_Flﬂt128x


	)

736 
	#__MATHCALL_NAME
(
«me
Ë
f32
 ##Çamê## 
f128x


	)

737 
	~<bôs/m©hˇŒs-«ºow.h
>

738 #unde‡
_Mªt_


739 #unde‡
_M¨g_


740 #unde‡
__MATHCALL_NAME


743 #i‡
__HAVE_FLOAT32X
 && 
__HAVE_FLOAT64


744 
	#_Mªt_
 
_Flﬂt32x


	)

745 
	#_M¨g_
 
_Flﬂt64


	)

746 
	#__MATHCALL_NAME
(
«me
Ë
f32x
 ##Çamê## 
f64


	)

747 
	~<bôs/m©hˇŒs-«ºow.h
>

748 #unde‡
_Mªt_


749 #unde‡
_M¨g_


750 #unde‡
__MATHCALL_NAME


753 #i‡
__HAVE_FLOAT32X
 && 
__HAVE_FLOAT64X


754 
	#_Mªt_
 
_Flﬂt32x


	)

755 
	#_M¨g_
 
_Flﬂt64x


	)

756 
	#__MATHCALL_NAME
(
«me
Ë
f32x
 ##Çamê## 
f64x


	)

757 
	~<bôs/m©hˇŒs-«ºow.h
>

758 #unde‡
_Mªt_


759 #unde‡
_M¨g_


760 #unde‡
__MATHCALL_NAME


763 #i‡
__HAVE_FLOAT32X
 && 
__HAVE_FLOAT128


764 
	#_Mªt_
 
_Flﬂt32x


	)

765 
	#_M¨g_
 
_Flﬂt128


	)

766 
	#__MATHCALL_NAME
(
«me
Ë
f32x
 ##Çamê## 
f128


	)

767 
	~<bôs/m©hˇŒs-«ºow.h
>

768 #unde‡
_Mªt_


769 #unde‡
_M¨g_


770 #unde‡
__MATHCALL_NAME


773 #i‡
__HAVE_FLOAT32X
 && 
__HAVE_FLOAT128X


774 
	#_Mªt_
 
_Flﬂt32x


	)

775 
	#_M¨g_
 
_Flﬂt128x


	)

776 
	#__MATHCALL_NAME
(
«me
Ë
f32x
 ##Çamê## 
f128x


	)

777 
	~<bôs/m©hˇŒs-«ºow.h
>

778 #unde‡
_Mªt_


779 #unde‡
_M¨g_


780 #unde‡
__MATHCALL_NAME


783 #i‡
__HAVE_FLOAT64
 && 
__HAVE_FLOAT64X


784 
	#_Mªt_
 
_Flﬂt64


	)

785 
	#_M¨g_
 
_Flﬂt64x


	)

786 
	#__MATHCALL_NAME
(
«me
Ë
f64
 ##Çamê## 
f64x


	)

787 
	~<bôs/m©hˇŒs-«ºow.h
>

788 #unde‡
_Mªt_


789 #unde‡
_M¨g_


790 #unde‡
__MATHCALL_NAME


793 #i‡
__HAVE_FLOAT64
 && 
__HAVE_FLOAT128


794 
	#_Mªt_
 
_Flﬂt64


	)

795 
	#_M¨g_
 
_Flﬂt128


	)

796 
	#__MATHCALL_NAME
(
«me
Ë
f64
 ##Çamê## 
f128


	)

797 
	~<bôs/m©hˇŒs-«ºow.h
>

798 #unde‡
_Mªt_


799 #unde‡
_M¨g_


800 #unde‡
__MATHCALL_NAME


803 #i‡
__HAVE_FLOAT64
 && 
__HAVE_FLOAT128X


804 
	#_Mªt_
 
_Flﬂt64


	)

805 
	#_M¨g_
 
_Flﬂt128x


	)

806 
	#__MATHCALL_NAME
(
«me
Ë
f64
 ##Çamê## 
f128x


	)

807 
	~<bôs/m©hˇŒs-«ºow.h
>

808 #unde‡
_Mªt_


809 #unde‡
_M¨g_


810 #unde‡
__MATHCALL_NAME


813 #i‡
__HAVE_FLOAT64X
 && 
__HAVE_FLOAT128


814 
	#_Mªt_
 
_Flﬂt64x


	)

815 
	#_M¨g_
 
_Flﬂt128


	)

816 
	#__MATHCALL_NAME
(
«me
Ë
f64x
 ##Çamê## 
f128


	)

817 
	~<bôs/m©hˇŒs-«ºow.h
>

818 #unde‡
_Mªt_


819 #unde‡
_M¨g_


820 #unde‡
__MATHCALL_NAME


823 #i‡
__HAVE_FLOAT64X
 && 
__HAVE_FLOAT128X


824 
	#_Mªt_
 
_Flﬂt64x


	)

825 
	#_M¨g_
 
_Flﬂt128x


	)

826 
	#__MATHCALL_NAME
(
«me
Ë
f64x
 ##Çamê## 
f128x


	)

827 
	~<bôs/m©hˇŒs-«ºow.h
>

828 #unde‡
_Mªt_


829 #unde‡
_M¨g_


830 #unde‡
__MATHCALL_NAME


833 #i‡
__HAVE_FLOAT128
 && 
__HAVE_FLOAT128X


834 
	#_Mªt_
 
_Flﬂt128


	)

835 
	#_M¨g_
 
_Flﬂt128x


	)

836 
	#__MATHCALL_NAME
(
«me
Ë
f128
 ##Çamê## 
f128x


	)

837 
	~<bôs/m©hˇŒs-«ºow.h
>

838 #unde‡
_Mªt_


839 #unde‡
_M¨g_


840 #unde‡
__MATHCALL_NAME


845 #unde‡
__MATHCALL_NARROW_ARGS_1


846 #unde‡
__MATHCALL_NARROW_ARGS_2


847 #unde‡
__MATHCALL_NARROW_ARGS_3


848 #unde‡
__MATHCALL_NARROW_NORMAL


849 #unde‡
__MATHCALL_NARROW_REDIR


850 #unde‡
__MATHCALL_NARROW


852 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


854 
signgam
;

857 #i‡(
__HAVE_DISTINCT_FLOAT16
 \

858 || 
__HAVE_DISTINCT_FLOAT32
 \

859 || 
__HAVE_DISTINCT_FLOAT64
 \

860 || 
__HAVE_DISTINCT_FLOAT32X
 \

861 || 
__HAVE_DISTINCT_FLOAT64X
 \

862 || 
__HAVE_DISTINCT_FLOAT128X
)

875 #ifde‡
__NO_LONG_DOUBLE_MATH


876 #i‡
__HAVE_DISTINCT_FLOAT128


879 
	#__MATH_TG
(
TG_ARG
, 
FUNC
, 
ARGS
) \

880 ( (
TG_ARG
Ë= (Ë? 
FUNC
 ## 
f
 
ARGS
 : FUNC ARGS)

	)

881 #ñi‡
__HAVE_DISTINCT_FLOAT128


882 #i‡
__HAVE_GENERIC_SELECTION


883 #i‡
__HAVE_FLOATN_NOT_TYPEDEF
 && 
__HAVE_FLOAT32


884 
	#__MATH_TG_F32
(
FUNC
, 
ARGS
Ë
_Flﬂt32
: FUNC ## 
f
 ARGS,

	)

886 
	#__MATH_TG_F32
(
FUNC
, 
ARGS
)

	)

888 #i‡
__HAVE_FLOATN_NOT_TYPEDEF
 && 
__HAVE_FLOAT64X


889 #i‡
__HAVE_FLOAT64X_LONG_DOUBLE


890 
	#__MATH_TG_F64X
(
FUNC
, 
ARGS
Ë
_Flﬂt64x
: FUNC ## 
l
 ARGS,

	)

892 
	#__MATH_TG_F64X
(
FUNC
, 
ARGS
Ë
_Flﬂt64x
: FUNC ## 
f128
 ARGS,

	)

895 
	#__MATH_TG_F64X
(
FUNC
, 
ARGS
)

	)

897 
	#__MATH_TG
(
TG_ARG
, 
FUNC
, 
ARGS
) \

898 
	`_Gíîic
 ((
TG_ARG
), \

899 : 
FUNC
 ## 
f
 
ARGS
, \

900 
	`__MATH_TG_F32
 (
FUNC
, 
ARGS
) \

901 : 
FUNC
 
ARGS
, \

902 : 
FUNC
 ## 
l
 
ARGS
, \

903 
	`__MATH_TG_F64X
 (
FUNC
, 
ARGS
) \

904 
_Flﬂt128
: 
FUNC
 ## 
f128
 
ARGS
)

	)

906 #i‡
__HAVE_FLOATN_NOT_TYPEDEF


909 
	#__MATH_TG
(
TG_ARG
, 
FUNC
, 
ARGS
) \

910 
__buûtö_choo£_ex¥
 \

911 (
	`__buûtö_ty≥s_com∑tibÀ_p
 (
	`__ty≥of
 (
TG_ARG
), ), \

912 
FUNC
 ## 
f
 
ARGS
, \

913 
__buûtö_choo£_ex¥
 \

914 (
	`__buûtö_ty≥s_com∑tibÀ_p
 (
	`__ty≥of
 (
TG_ARG
), ), \

915 
FUNC
 
ARGS
, \

916 
__buûtö_choo£_ex¥
 \

917 (
	`__buûtö_ty≥s_com∑tibÀ_p
 (
	`__ty≥of
 (
TG_ARG
), ), \

918 
FUNC
 ## 
l
 
ARGS
, \

919 
FUNC
 ## 
f128
 
ARGS
)))

	)

922 
	#__MATH_TG
(
TG_ARG
, 
FUNC
, 
ARGS
) \

923 ( (
TG_ARG
) ==  () \

924 ? 
FUNC
 ## 
f
 
ARGS
 \

925 :  (
TG_ARG
) ==  () \

926 ? 
FUNC
 
ARGS
 \

927 : 
FUNC
 ## 
l
 
ARGS
)

	)

931 #ifde‡
__USE_ISOC99


936 
FP_NAN
 =

937 
	#FP_NAN
 0

	)

938 
FP_NAN
,

939 
FP_INFINITE
 =

940 
	#FP_INFINITE
 1

	)

941 
FP_INFINITE
,

942 
FP_ZERO
 =

943 
	#FP_ZERO
 2

	)

944 
FP_ZERO
,

945 
FP_SUBNORMAL
 =

946 
	#FP_SUBNORMAL
 3

	)

947 
FP_SUBNORMAL
,

948 
FP_NORMAL
 =

949 
	#FP_NORMAL
 4

	)

950 
FP_NORMAL


958 #i‡((
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__
) \

959 || 
	`__glibc_˛™g_¥îeq
 (2,8)) \

960 && (!
deföed
 
__OPTIMIZE_SIZE__
 || deföed 
__˝lu•lus
)

967 
	#Â˛assify
(
x
Ë
	`__buûtö_Â˛assify
 (
FP_NAN
, 
FP_INFINITE
, \

968 
FP_NORMAL
, 
FP_SUBNORMAL
, 
FP_ZERO
, 
x
)

	)

970 
	#Â˛assify
(
x
Ë
	`__MATH_TG
 ((x), 
__Â˛assify
, (x))

	)

974 #i‡
	`__GNUC_PREREQ
 (6,0Ë|| 
	`__glibc_˛™g_¥îeq
 (3,3)

975 
	#signbô
(
x
Ë
	`__buûtö_signbô
 (x)

	)

976 #ñi‡
deföed
 
__˝lu•lus


984 
	#signbô
(
x
Ë
	`__buûtö_signbôl
 (x)

	)

985 #ñi‡
	`__GNUC_PREREQ
 (4,0)

986 
	#signbô
(
x
Ë
	`__MATH_TG
 ((x), 
__buûtö_signbô
, (x))

	)

988 
	#signbô
(
x
Ë
	`__MATH_TG
 ((x), 
__signbô
, (x))

	)

992 #i‡(
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__
) \

993 || 
	$__glibc_˛™g_¥îeq
 (2,8)

994 
	#isföôe
(
x
Ë
	`__buûtö_isföôe
 (x)

	)

996 
	#isföôe
(
x
Ë
	`__MATH_TG
 ((x), 
__föôe
, (x))

	)

1000 #i‡(
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__
) \

1001 || 
	$__glibc_˛™g_¥îeq
 (2,8)

1002 
	#i¢‹mÆ
(
x
Ë
	`__buûtö_i¢‹mÆ
 (x)

	)

1004 
	#i¢‹mÆ
(
x
Ë(
	`Â˛assify
 (xË=
FP_NORMAL
)

	)

1009 #i‡(
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__
) \

1010 || 
	$__glibc_˛™g_¥îeq
 (2,8)

1011 
	#i¢™
(
x
Ë
	`__buûtö_i¢™
 (x)

	)

1013 
	#i¢™
(
x
Ë
	`__MATH_TG
 ((x), 
__i¢™
, (x))

	)

1017 #i‡
__HAVE_DISTINCT_FLOAT128
 && !
	`__GNUC_PREREQ
 (7,0) \

1018 && !
deföed
 
__SUPPORT_SNAN__
 && !deföed 
__˝lu•lus


1024 
	#isöf
(
x
) \

1025 (
	`__buûtö_ty≥s_com∑tibÀ_p
 (
	`__ty≥of
 (
x
), 
_Flﬂt128
) \

1026 ? 
	`__isöff128
 (
x
Ë: 
	`__buûtö_isöf_sign
 (x))

	)

1027 #ñi‡(
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__
) \

1028 || 
	$__glibc_˛™g_¥îeq
 (3,7)

1029 
	#isöf
(
x
Ë
	`__buûtö_isöf_sign
 (x)

	)

1031 
	#isöf
(
x
Ë
	`__MATH_TG
 ((x), 
__isöf
, (x))

	)

1035 
	#MATH_ERRNO
 1

	)

1036 
	#MATH_ERREXCEPT
 2

	)

1043 #ifde‡
__FAST_MATH__


1044 
	#m©h_îrh™dlög
 0

	)

1045 #ñi‡
deföed
 
__NO_MATH_ERRNO__


1046 
	#m©h_îrh™dlög
 (
MATH_ERREXCEPT
)

	)

1048 
	#m©h_îrh™dlög
 (
MATH_ERRNO
 | 
MATH_ERREXCEPT
)

	)

1053 #i‡
	`__GLIBC_USE
 (
IEC_60559_BFP_EXT_C2X
)

1054 
	~<bôs/isˇn⁄iˇl.h
>

1057 #i‚de‡
__˝lu•lus


1058 
	#issig«lög
(
x
Ë
	`__MATH_TG
 ((x), 
__issig«lög
, (x))

	)

1067 
ölöe
 
	`issig«lög
 (
__vÆ
Ë{  
	`__issig«lögf
 (__val); }

1068 
ölöe
 
	`issig«lög
 (
__vÆ
Ë{  
	`__issig«lög
 (__val); }

1069 
ölöe
 

1070 
	`issig«lög
 (
__vÆ
)

1072 #ifde‡
__NO_LONG_DOUBLE_MATH


1073  
	`__issig«lög
 (
__vÆ
);

1075  
	`__issig«lögl
 (
__vÆ
);

1078 #i‡
__HAVE_FLOAT128_UNLIKE_LDBL


1081 
ölöe
 
	`issig«lög
 (
_Flﬂt128
 
__vÆ
Ë{  
	`__issig«lögf128
 (__val); }

1083 
	}
}

1087 
	#issubn‹mÆ
(
x
Ë(
	`Â˛assify
 (xË=
FP_SUBNORMAL
)

	)

1090 #i‚de‡
__˝lu•lus


1091 #ifde‡
__SUPPORT_SNAN__


1092 
	#iszîo
(
x
Ë(
	`Â˛assify
 (xË=
FP_ZERO
)

	)

1094 
	#iszîo
(
x
Ë(((
	`__ty≥of
 (x)Ë(x)Ë=0)

	)

1098 #ifde‡
__SUPPORT_SNAN__


1099 
ölöe
 

1100 
iszîo
 (
__vÆ
)

1102  
__Â˛assifyf
 (
__vÆ
Ë=
FP_ZERO
;

1104 
ölöe
 

1105 
iszîo
 (
__vÆ
)

1107  
__Â˛assify
 (
__vÆ
Ë=
FP_ZERO
;

1109 
ölöe
 

1110 
iszîo
 (
__vÆ
)

1112 #ifde‡
__NO_LONG_DOUBLE_MATH


1113  
__Â˛assify
 (
__vÆ
Ë=
FP_ZERO
;

1115  
__Â˛assifyl
 (
__vÆ
Ë=
FP_ZERO
;

1118 #i‡
__HAVE_FLOAT128_UNLIKE_LDBL


1121 
ölöe
 

1122 
iszîo
 (
_Flﬂt128
 
__vÆ
)

1124  
__Â˛assifyf128
 (
__vÆ
Ë=
FP_ZERO
;

1128 
ãm∂©e
 <
˛ass
 
__T
> 
ölöe
 
boﬁ


1129 
iszîo
 (
__T
 
__vÆ
)

1131  
__vÆ
 == 0;

1138 #ifde‡
__USE_XOPEN


1140 
	#MAXFLOAT
 3.40282347e+38F

	)

1145 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


1146 
	#M_E
 2.7182818284590452354

	)

1147 
	#M_LOG2E
 1.4426950408889634074

	)

1148 
	#M_LOG10E
 0.43429448190325182765

	)

1149 
	#M_LN2
 0.69314718055994530942

	)

1150 
	#M_LN10
 2.30258509299404568402

	)

1151 
	#M_PI
 3.14159265358979323846

	)

1152 
	#M_PI_2
 1.57079632679489661923

	)

1153 
	#M_PI_4
 0.78539816339744830962

	)

1154 
	#M_1_PI
 0.31830988618379067154

	)

1155 
	#M_2_PI
 0.63661977236758134308

	)

1156 
	#M_2_SQRTPI
 1.12837916709551257390

	)

1157 
	#M_SQRT2
 1.41421356237309504880

	)

1158 
	#M_SQRT1_2
 0.70710678118654752440

	)

1162 #ifde‡
__USE_GNU


1163 
	#M_Ef
 2.7182818284590452354‡

	)

1164 
	#M_LOG2Ef
 1.4426950408889634074‡

	)

1165 
	#M_LOG10Ef
 0.43429448190325182765‡

	)

1166 
	#M_LN2f
 0.69314718055994530942‡

	)

1167 
	#M_LN10f
 2.30258509299404568402‡

	)

1168 
	#M_PIf
 3.14159265358979323846‡

	)

1169 
	#M_PI_2f
 1.57079632679489661923‡

	)

1170 
	#M_PI_4f
 0.78539816339744830962‡

	)

1171 
	#M_1_PIf
 0.31830988618379067154‡

	)

1172 
	#M_2_PIf
 0.63661977236758134308‡

	)

1173 
	#M_2_SQRTPIf
 1.12837916709551257390‡

	)

1174 
	#M_SQRT2f
 1.41421356237309504880‡

	)

1175 
	#M_SQRT1_2f
 0.70710678118654752440‡

	)

1181 #ifde‡
__USE_GNU


1182 
	#M_El
 2.718281828459045235360287471352662498L

	)

1183 
	#M_LOG2El
 1.442695040888963407359924681001892137L

	)

1184 
	#M_LOG10El
 0.434294481903251827651128918916605082L

	)

1185 
	#M_LN2l
 0.693147180559945309417232121458176568L

	)

1186 
	#M_LN10l
 2.302585092994045684017991454684364208L

	)

1187 
	#M_PIl
 3.141592653589793238462643383279502884L

	)

1188 
	#M_PI_2l
 1.570796326794896619231321691639751442L

	)

1189 
	#M_PI_4l
 0.785398163397448309615660845819875721L

	)

1190 
	#M_1_PIl
 0.318309886183790671537767526745028724L

	)

1191 
	#M_2_PIl
 0.636619772367581343075535053490057448L

	)

1192 
	#M_2_SQRTPIl
 1.128379167095512573896158903121545172L

	)

1193 
	#M_SQRT2l
 1.414213562373095048801688724209698079L

	)

1194 
	#M_SQRT1_2l
 0.707106781186547524400844362104849039L

	)

1197 #i‡
__HAVE_FLOAT16
 && 
deföed
 
__USE_GNU


1198 
	#M_Ef16
 
	`__f16
 (2.718281828459045235360287471352662498Ë

	)

1199 
	#M_LOG2Ef16
 
	`__f16
 (1.442695040888963407359924681001892137Ë

	)

1200 
	#M_LOG10Ef16
 
	`__f16
 (0.434294481903251827651128918916605082Ë

	)

1201 
	#M_LN2f16
 
	`__f16
 (0.693147180559945309417232121458176568Ë

	)

1202 
	#M_LN10f16
 
	`__f16
 (2.302585092994045684017991454684364208Ë

	)

1203 
	#M_PIf16
 
	`__f16
 (3.141592653589793238462643383279502884Ë

	)

1204 
	#M_PI_2f16
 
	`__f16
 (1.570796326794896619231321691639751442Ë

	)

1205 
	#M_PI_4f16
 
	`__f16
 (0.785398163397448309615660845819875721Ë

	)

1206 
	#M_1_PIf16
 
	`__f16
 (0.318309886183790671537767526745028724Ë

	)

1207 
	#M_2_PIf16
 
	`__f16
 (0.636619772367581343075535053490057448Ë

	)

1208 
	#M_2_SQRTPIf16
 
	`__f16
 (1.128379167095512573896158903121545172Ë

	)

1209 
	#M_SQRT2f16
 
	`__f16
 (1.414213562373095048801688724209698079Ë

	)

1210 
	#M_SQRT1_2f16
 
	`__f16
 (0.707106781186547524400844362104849039Ë

	)

1213 #i‡
__HAVE_FLOAT32
 && 
deföed
 
__USE_GNU


1214 
	#M_Ef32
 
	`__f32
 (2.718281828459045235360287471352662498Ë

	)

1215 
	#M_LOG2Ef32
 
	`__f32
 (1.442695040888963407359924681001892137Ë

	)

1216 
	#M_LOG10Ef32
 
	`__f32
 (0.434294481903251827651128918916605082Ë

	)

1217 
	#M_LN2f32
 
	`__f32
 (0.693147180559945309417232121458176568Ë

	)

1218 
	#M_LN10f32
 
	`__f32
 (2.302585092994045684017991454684364208Ë

	)

1219 
	#M_PIf32
 
	`__f32
 (3.141592653589793238462643383279502884Ë

	)

1220 
	#M_PI_2f32
 
	`__f32
 (1.570796326794896619231321691639751442Ë

	)

1221 
	#M_PI_4f32
 
	`__f32
 (0.785398163397448309615660845819875721Ë

	)

1222 
	#M_1_PIf32
 
	`__f32
 (0.318309886183790671537767526745028724Ë

	)

1223 
	#M_2_PIf32
 
	`__f32
 (0.636619772367581343075535053490057448Ë

	)

1224 
	#M_2_SQRTPIf32
 
	`__f32
 (1.128379167095512573896158903121545172Ë

	)

1225 
	#M_SQRT2f32
 
	`__f32
 (1.414213562373095048801688724209698079Ë

	)

1226 
	#M_SQRT1_2f32
 
	`__f32
 (0.707106781186547524400844362104849039Ë

	)

1229 #i‡
__HAVE_FLOAT64
 && 
deföed
 
__USE_GNU


1230 
	#M_Ef64
 
	`__f64
 (2.718281828459045235360287471352662498Ë

	)

1231 
	#M_LOG2Ef64
 
	`__f64
 (1.442695040888963407359924681001892137Ë

	)

1232 
	#M_LOG10Ef64
 
	`__f64
 (0.434294481903251827651128918916605082Ë

	)

1233 
	#M_LN2f64
 
	`__f64
 (0.693147180559945309417232121458176568Ë

	)

1234 
	#M_LN10f64
 
	`__f64
 (2.302585092994045684017991454684364208Ë

	)

1235 
	#M_PIf64
 
	`__f64
 (3.141592653589793238462643383279502884Ë

	)

1236 
	#M_PI_2f64
 
	`__f64
 (1.570796326794896619231321691639751442Ë

	)

1237 
	#M_PI_4f64
 
	`__f64
 (0.785398163397448309615660845819875721Ë

	)

1238 
	#M_1_PIf64
 
	`__f64
 (0.318309886183790671537767526745028724Ë

	)

1239 
	#M_2_PIf64
 
	`__f64
 (0.636619772367581343075535053490057448Ë

	)

1240 
	#M_2_SQRTPIf64
 
	`__f64
 (1.128379167095512573896158903121545172Ë

	)

1241 
	#M_SQRT2f64
 
	`__f64
 (1.414213562373095048801688724209698079Ë

	)

1242 
	#M_SQRT1_2f64
 
	`__f64
 (0.707106781186547524400844362104849039Ë

	)

1245 #i‡
__HAVE_FLOAT128
 && 
deföed
 
__USE_GNU


1246 
	#M_Ef128
 
	`__f128
 (2.718281828459045235360287471352662498Ë

	)

1247 
	#M_LOG2Ef128
 
	`__f128
 (1.442695040888963407359924681001892137Ë

	)

1248 
	#M_LOG10Ef128
 
	`__f128
 (0.434294481903251827651128918916605082Ë

	)

1249 
	#M_LN2f128
 
	`__f128
 (0.693147180559945309417232121458176568Ë

	)

1250 
	#M_LN10f128
 
	`__f128
 (2.302585092994045684017991454684364208Ë

	)

1251 
	#M_PIf128
 
	`__f128
 (3.141592653589793238462643383279502884Ë

	)

1252 
	#M_PI_2f128
 
	`__f128
 (1.570796326794896619231321691639751442Ë

	)

1253 
	#M_PI_4f128
 
	`__f128
 (0.785398163397448309615660845819875721Ë

	)

1254 
	#M_1_PIf128
 
	`__f128
 (0.318309886183790671537767526745028724Ë

	)

1255 
	#M_2_PIf128
 
	`__f128
 (0.636619772367581343075535053490057448Ë

	)

1256 
	#M_2_SQRTPIf128
 
	`__f128
 (1.128379167095512573896158903121545172Ë

	)

1257 
	#M_SQRT2f128
 
	`__f128
 (1.414213562373095048801688724209698079Ë

	)

1258 
	#M_SQRT1_2f128
 
	`__f128
 (0.707106781186547524400844362104849039Ë

	)

1261 #i‡
__HAVE_FLOAT32X
 && 
deföed
 
__USE_GNU


1262 
	#M_Ef32x
 
	`__f32x
 (2.718281828459045235360287471352662498Ë

	)

1263 
	#M_LOG2Ef32x
 
	`__f32x
 (1.442695040888963407359924681001892137Ë

	)

1264 
	#M_LOG10Ef32x
 
	`__f32x
 (0.434294481903251827651128918916605082Ë

	)

1265 
	#M_LN2f32x
 
	`__f32x
 (0.693147180559945309417232121458176568Ë

	)

1266 
	#M_LN10f32x
 
	`__f32x
 (2.302585092994045684017991454684364208Ë

	)

1267 
	#M_PIf32x
 
	`__f32x
 (3.141592653589793238462643383279502884Ë

	)

1268 
	#M_PI_2f32x
 
	`__f32x
 (1.570796326794896619231321691639751442Ë

	)

1269 
	#M_PI_4f32x
 
	`__f32x
 (0.785398163397448309615660845819875721Ë

	)

1270 
	#M_1_PIf32x
 
	`__f32x
 (0.318309886183790671537767526745028724Ë

	)

1271 
	#M_2_PIf32x
 
	`__f32x
 (0.636619772367581343075535053490057448Ë

	)

1272 
	#M_2_SQRTPIf32x
 
	`__f32x
 (1.128379167095512573896158903121545172Ë

	)

1273 
	#M_SQRT2f32x
 
	`__f32x
 (1.414213562373095048801688724209698079Ë

	)

1274 
	#M_SQRT1_2f32x
 
	`__f32x
 (0.707106781186547524400844362104849039Ë

	)

1277 #i‡
__HAVE_FLOAT64X
 && 
deföed
 
__USE_GNU


1278 
	#M_Ef64x
 
	`__f64x
 (2.718281828459045235360287471352662498Ë

	)

1279 
	#M_LOG2Ef64x
 
	`__f64x
 (1.442695040888963407359924681001892137Ë

	)

1280 
	#M_LOG10Ef64x
 
	`__f64x
 (0.434294481903251827651128918916605082Ë

	)

1281 
	#M_LN2f64x
 
	`__f64x
 (0.693147180559945309417232121458176568Ë

	)

1282 
	#M_LN10f64x
 
	`__f64x
 (2.302585092994045684017991454684364208Ë

	)

1283 
	#M_PIf64x
 
	`__f64x
 (3.141592653589793238462643383279502884Ë

	)

1284 
	#M_PI_2f64x
 
	`__f64x
 (1.570796326794896619231321691639751442Ë

	)

1285 
	#M_PI_4f64x
 
	`__f64x
 (0.785398163397448309615660845819875721Ë

	)

1286 
	#M_1_PIf64x
 
	`__f64x
 (0.318309886183790671537767526745028724Ë

	)

1287 
	#M_2_PIf64x
 
	`__f64x
 (0.636619772367581343075535053490057448Ë

	)

1288 
	#M_2_SQRTPIf64x
 
	`__f64x
 (1.128379167095512573896158903121545172Ë

	)

1289 
	#M_SQRT2f64x
 
	`__f64x
 (1.414213562373095048801688724209698079Ë

	)

1290 
	#M_SQRT1_2f64x
 
	`__f64x
 (0.707106781186547524400844362104849039Ë

	)

1293 #i‡
__HAVE_FLOAT128X
 && 
deföed
 
__USE_GNU


1297 #ifde‡
__USE_ISOC99


1298 #i‡
__GNUC_PREREQ
 (3, 1)

1305 
	#isgª©î
(
x
, 
y
Ë
	`__buûtö_isgª©î
(x, y)

	)

1306 
	#isgª©îequÆ
(
x
, 
y
Ë
	`__buûtö_isgª©îequÆ
(x, y)

	)

1307 
	#i¶ess
(
x
, 
y
Ë
	`__buûtö_i¶ess
(x, y)

	)

1308 
	#i¶es£quÆ
(
x
, 
y
Ë
	`__buûtö_i¶es£quÆ
(x, y)

	)

1309 
	#i¶essgª©î
(
x
, 
y
Ë
	`__buûtö_i¶essgª©î
(x, y)

	)

1310 
	#isun‹dîed
(
x
, 
y
Ë
	`__buûtö_isun‹dîed
(x, y)

	)

1312 
	#isgª©î
(
x
, 
y
) \

1313 (
	`__exãnsi⁄__
 ({ 
	`__ty≥of__
 (
x
Ë
__x
 = (x); __ty≥of__ (
y
Ë
__y
 = (y); \

1314 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x > __y; }))

	)

1315 
	#isgª©îequÆ
(
x
, 
y
) \

1316 (
	`__exãnsi⁄__
 ({ 
	`__ty≥of__
 (
x
Ë
__x
 = (x); __ty≥of__ (
y
Ë
__y
 = (y); \

1317 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x >__y; }))

	)

1318 
	#i¶ess
(
x
, 
y
) \

1319 (
	`__exãnsi⁄__
 ({ 
	`__ty≥of__
 (
x
Ë
__x
 = (x); __ty≥of__ (
y
Ë
__y
 = (y); \

1320 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x < __y; }))

	)

1321 
	#i¶es£quÆ
(
x
, 
y
) \

1322 (
	`__exãnsi⁄__
 ({ 
	`__ty≥of__
 (
x
Ë
__x
 = (x); __ty≥of__ (
y
Ë
__y
 = (y); \

1323 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x <__y; }))

	)

1324 
	#i¶essgª©î
(
x
, 
y
) \

1325 (
	`__exãnsi⁄__
 ({ 
	`__ty≥of__
 (
x
Ë
__x
 = (x); __ty≥of__ (
y
Ë
__y
 = (y); \

1326 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x !__y; }))

	)

1328 
	#isun‹dîed
(
x
, 
y
) \

1329 (
	`__exãnsi⁄__
 ({ 
	`__ty≥of__
 (
x
Ë
__u
 = (x); __ty≥of__ (
y
Ë
__v
 = (y); \

1330 
__u
 !
__v
 && (__u !__u || __v !__v); }))

	)

1334 #i‡
__GLIBC_USE
 (
IEC_60559_BFP_EXT_C2X
)

1337 #i‡
__FLT_EVAL_METHOD__
 == 2 || __FLT_EVAL_METHOD__ > 64

1338 
	#__MATH_EVAL_FMT2
(
x
, 
y
Ë((xË+ (yË+ 0.0L)

	)

1339 #ñi‡
__FLT_EVAL_METHOD__
 == 1 || __FLT_EVAL_METHOD__ > 32

1340 
	#__MATH_EVAL_FMT2
(
x
, 
y
Ë((xË+ (yË+ 0.0)

	)

1341 #ñi‡
__FLT_EVAL_METHOD__
 == 0 || __FLT_EVAL_METHOD__ == 32

1342 
	#__MATH_EVAL_FMT2
(
x
, 
y
Ë((xË+ (yË+ 0.0f)

	)

1344 
	#__MATH_EVAL_FMT2
(
x
, 
y
Ë((xË+ (y))

	)

1349 #i‡!
deföed
 
__˝lu•lus
 || (__˝lu•lu†< 201103L && !deföed 
__GNUC__
)

1350 
	#i£qsig
(
x
, 
y
) \

1351 
	`__MATH_TG
 (
	`__MATH_EVAL_FMT2
 (
x
, 
y
), 
__i£qsig
, ((x), (y)))

	)

1364 
ãm∂©e
<
ty≥«me
> 
__i£qsig_ty≥
;

1366 
ãm∂©e
<> 
__i£qsig_ty≥
<>

1368 
__ˇŒ
 (
__x
, 
__y
Ë
throw
 ()

1370  
__i£qsigf
 (
__x
, 
__y
);

1374 
ãm∂©e
<> 
__i£qsig_ty≥
<>

1376 
__ˇŒ
 (
__x
, 
__y
Ë
throw
 ()

1378  
__i£qsig
 (
__x
, 
__y
);

1382 
ãm∂©e
<> 
__i£qsig_ty≥
<>

1384 
__ˇŒ
 (
__x
, 
__y
Ë
throw
 ()

1386 #i‚de‡
__NO_LONG_DOUBLE_MATH


1387  
__i£qsigl
 (
__x
, 
__y
);

1389  
__i£qsig
 (
__x
, 
__y
);

1394 #i‡
__HAVE_FLOAT128_UNLIKE_LDBL


1397 
ãm∂©e
<> 
__i£qsig_ty≥
<
_Flﬂt128
>

1399 
__ˇŒ
 (
_Flﬂt128
 
__x
, _Flﬂt128 
__y
Ë
throw
 ()

1401  
__i£qsigf128
 (
__x
, 
__y
);

1406 
ãm∂©e
<
ty≥«me
 
_T1
,Åy≥«mê
_T2
>

1407 
ölöe
 

1408 
i£qsig
 (
_T1
 
__x
, 
_T2
 
__y
Ë
throw
 ()

1410 #i‡
__˝lu•lus
 >= 201103L

1411 
de˛ty≥
 (
	t__MATH_EVAL_FMT2
 (
	t__x
, 
	t__y
)Ë
	t_T3
;

1413 
__ty≥of
 (
	t__MATH_EVAL_FMT2
 (
	t__x
, 
	t__y
)Ë
	t_T3
;

1415  
__i£qsig_ty≥
<
_T3
>::
__ˇŒ
 (
__x
, 
__y
);

1423 
__END_DECLS


	@/usr/include/mcheck.h

18 #i‚de‡
_MCHECK_H


19 
	#_MCHECK_H
 1

	)

21 
	~<„©uªs.h
>

23 
__BEGIN_DECLS


27 
	emcheck_°©us


29 
	mMCHECK_DISABLED
 = -1,

30 
	mMCHECK_OK
,

31 
	mMCHECK_FREE
,

32 
	mMCHECK_HEAD
,

33 
	mMCHECK_TAIL


41 
	$mcheck
 ((*
__ab‹tfunc
)(
mcheck_°©us
)Ë
__THROW
;

45 
	$mcheck_≥d™tic
 ((*
__ab‹tfunc
)(
mcheck_°©us
)Ë
__THROW
;

48 
	`mcheck_check_Æl
 ();

53 
mcheck_°©us
 
	$m¥obe
 (*
__±r
Ë
__THROW
;

56 
	$måa˚
 (Ë
__THROW
;

57 
	$mu¡ø˚
 (Ë
__THROW
;

59 
__END_DECLS


	@/usr/include/memory.h

22 #i‚def 
_MEMORY_H


23 
	#_MEMORY_H
 1

	)

25 
	~<„©uªs.h
>

28 #i‚def 
_STRING_H


29 
	~<°rög.h
>

	@/usr/include/menu.h

36 #i‚de‡
ETI_MENU


37 
	#ETI_MENU


	)

39 #ifde‡
AMIGA


40 
	#TEXT
 
TEXT_ncur£s


	)

43 
	~<cur£s.h
>

44 
	~<ëi.h
>

46 #ifde‡
__˝lu•lus


51 #i‡
deföed
(
BUILDING_MENU
)

52 
	#MENU_IMPEXP
 
NCURSES_EXPORT_GENERAL_EXPORT


	)

54 
	#MENU_IMPEXP
 
NCURSES_EXPORT_GENERAL_IMPORT


	)

57 
	#MENU_WRAPPED_VAR
(
ty≥
,
«me
Ë
MENU_IMPEXP
Åy≥ 
	`NCURSES_PUBLIC_VAR
“ame)()

	)

59 
	#MENU_EXPORT
(
ty≥
Ë
MENU_IMPEXP
Åy≥ 
NCURSES_API


	)

60 
	#MENU_EXPORT_VAR
(
ty≥
Ë
MENU_IMPEXP
 
	)
type

62 
	tMíu_O±i⁄s
;

63 
	tIãm_O±i⁄s
;

66 
	#O_ONEVALUE
 (0x01)

	)

67 
	#O_SHOWDESC
 (0x02)

	)

68 
	#O_ROWMAJOR
 (0x04)

	)

69 
	#O_IGNORECASE
 (0x08)

	)

70 
	#O_SHOWMATCH
 (0x10)

	)

71 
	#O_NONCYCLIC
 (0x20)

	)

72 
	#O_MOUSE_MENU
 (0x40)

	)

75 
	#O_SELECTABLE
 (0x01)

	)

77 #i‡!
NCURSES_OPAQUE_MENU


80 c⁄° *
	g°r
;

81 
	gÀngth
;

83 
	tTEXT
;

86 
	gègMENU
;

88 
	gègITEM


89 #i‡!
	tNCURSES_OPAQUE_MENU


91 
TEXT
 
	g«me
;

92 
TEXT
 
	gdes¸ùti⁄
;

93 
ègMENU
 *
	gimíu
;

94 *
	gu£Ωå
;

95 
Iãm_O±i⁄s
 
	g›t
;

96 
	gödex
;

97 
	gy
;

98 
	gx
;

99 
boﬁ
 
	gvÆue
;

101 
ègITEM
 *
	gÀ·
;

102 
ègITEM
 *
	gright
;

103 
ègITEM
 *
	gup
;

104 
ègITEM
 *
	gdown
;

108 
	tITEM
;

110 (*
	gMíu_Hook
Ë(
	tègMENU
 *);

112 
	gègMENU


115 
	gheight
;

116 
	gwidth
;

117 
	grows
;

118 
	gcﬁs
;

119 
	g‰ows
;

120 
	gfcﬁs
;

121 
	g¨ows
;

122 
	g«mñí
;

123 
	gdes˛í
;

124 
	gm¨kÀn
;

125 
	gôemÀn
;

126 
	g•c_desc
;

127 
	g•c_cﬁs
;

128 
	g•c_rows
;

129 *
	g∑âîn
;

130 
	gpödex
;

131 
WINDOW
 *
	gwö
;

132 
WINDOW
 *
	gsub
;

133 
WINDOW
 *
	gu£rwö
;

134 
WINDOW
 *
	gu£rsub
;

135 
ITEM
 **
	gôems
;

136 
	gnôems
;

137 
ITEM
 *
	gcurôem
;

138 
	gt›row
;

139 
chty≥
 
	gf‹e
;

140 
chty≥
 
	gback
;

141 
chty≥
 
	ggªy
;

142 
	g∑d
;

144 
Míu_Hook
 
	gmíuöô
;

145 
Míu_Hook
 
	gmíuãrm
;

146 
Míu_Hook
 
	gôemöô
;

147 
Míu_Hook
 
	gôemãrm
;

149 *
	gu£Ωå
;

150 *
	gm¨k
;

152 
Míu_O±i⁄s
 
	g›t
;

153 
	g°©us
;

156 
	tMENU
;

160 
	#REQ_LEFT_ITEM
 (
KEY_MAX
 + 1)

	)

161 
	#REQ_RIGHT_ITEM
 (
KEY_MAX
 + 2)

	)

162 
	#REQ_UP_ITEM
 (
KEY_MAX
 + 3)

	)

163 
	#REQ_DOWN_ITEM
 (
KEY_MAX
 + 4)

	)

164 
	#REQ_SCR_ULINE
 (
KEY_MAX
 + 5)

	)

165 
	#REQ_SCR_DLINE
 (
KEY_MAX
 + 6)

	)

166 
	#REQ_SCR_DPAGE
 (
KEY_MAX
 + 7)

	)

167 
	#REQ_SCR_UPAGE
 (
KEY_MAX
 + 8)

	)

168 
	#REQ_FIRST_ITEM
 (
KEY_MAX
 + 9)

	)

169 
	#REQ_LAST_ITEM
 (
KEY_MAX
 + 10)

	)

170 
	#REQ_NEXT_ITEM
 (
KEY_MAX
 + 11)

	)

171 
	#REQ_PREV_ITEM
 (
KEY_MAX
 + 12)

	)

172 
	#REQ_TOGGLE_ITEM
 (
KEY_MAX
 + 13)

	)

173 
	#REQ_CLEAR_PATTERN
 (
KEY_MAX
 + 14)

	)

174 
	#REQ_BACK_PATTERN
 (
KEY_MAX
 + 15)

	)

175 
	#REQ_NEXT_MATCH
 (
KEY_MAX
 + 16)

	)

176 
	#REQ_PREV_MATCH
 (
KEY_MAX
 + 17)

	)

178 
	#MIN_MENU_COMMAND
 (
KEY_MAX
 + 1)

	)

179 
	#MAX_MENU_COMMAND
 (
KEY_MAX
 + 17)

	)

185 #i‡
deföed
(
MAX_COMMAND
)

186 #i‡(
MAX_MENU_COMMAND
 > 
MAX_COMMAND
)

187 #îr‹ 
Somëhög
 
is
 
wr⁄g
 -- 
MAX_MENU_COMMAND
 i†
gª©î
 
th™
 
MAX_COMMAND


188 #ñi‡(
MAX_COMMAND
 !(
KEY_MAX
 + 128))

189 #îr‹ 
Somëhög
 
is
 
wr⁄g
 -- 
MAX_COMMAND
 i†
Æªady
 
öc⁄si°íéy
 
deföed
.

192 
	#MAX_COMMAND
 (
KEY_MAX
 + 128)

	)

197 
MENU_EXPORT
(
ITEM
 **Ë
míu_ôems
(c⁄° 
MENU
 *);

198 
MENU_EXPORT
(
ITEM
 *Ë
cuºít_ôem
(c⁄° 
MENU
 *);

199 
MENU_EXPORT
(
ITEM
 *Ë
√w_ôem
(const *, const *);

201 
MENU_EXPORT
(
MENU
 *Ë
√w_míu
(
ITEM
 **);

203 
MENU_EXPORT
(
Iãm_O±i⁄s
Ë
ôem_›ts
(c⁄° 
ITEM
 *);

204 
MENU_EXPORT
(
Míu_O±i⁄s
Ë
míu_›ts
(c⁄° 
MENU
 *);

206 
MENU_EXPORT
(
Míu_Hook
Ë
ôem_öô
(c⁄° 
MENU
 *);

207 
MENU_EXPORT
(
Míu_Hook
Ë
ôem_ãrm
(c⁄° 
MENU
 *);

208 
MENU_EXPORT
(
Míu_Hook
Ë
míu_öô
(c⁄° 
MENU
 *);

209 
MENU_EXPORT
(
Míu_Hook
Ë
míu_ãrm
(c⁄° 
MENU
 *);

211 
MENU_EXPORT
(
WINDOW
 *Ë
míu_sub
(c⁄° 
MENU
 *);

212 
MENU_EXPORT
(
WINDOW
 *Ë
míu_wö
(c⁄° 
MENU
 *);

214 
MENU_EXPORT
(c⁄° *Ë
ôem_des¸ùti⁄
(c⁄° 
ITEM
 *);

215 
MENU_EXPORT
(c⁄° *Ë
ôem_«me
(c⁄° 
ITEM
 *);

216 
MENU_EXPORT
(c⁄° *Ë
míu_m¨k
(c⁄° 
MENU
 *);

217 
MENU_EXPORT
(c⁄° *Ë
míu_ªque°_«me
();

219 
MENU_EXPORT
(*Ë
míu_∑âîn
(c⁄° 
MENU
 *);

221 
MENU_EXPORT
(*Ë
míu_u£Ωå
(c⁄° 
MENU
 *);

222 
MENU_EXPORT
(*Ë
ôem_u£Ωå
(c⁄° 
ITEM
 *);

224 
MENU_EXPORT
(
chty≥
Ë
míu_back
(c⁄° 
MENU
 *);

225 
MENU_EXPORT
(
chty≥
Ë
míu_f‹e
(c⁄° 
MENU
 *);

226 
MENU_EXPORT
(
chty≥
Ë
míu_gªy
(c⁄° 
MENU
 *);

228 
MENU_EXPORT
(Ë
‰ì_ôem
(
ITEM
 *);

229 
MENU_EXPORT
(Ë
‰ì_míu
(
MENU
 *);

230 
MENU_EXPORT
(Ë
ôem_cou¡
(c⁄° 
MENU
 *);

231 
MENU_EXPORT
(Ë
ôem_ödex
(c⁄° 
ITEM
 *);

232 
MENU_EXPORT
(Ë
ôem_›ts_off
(
ITEM
 *, 
Iãm_O±i⁄s
);

233 
MENU_EXPORT
(Ë
ôem_›ts_⁄
(
ITEM
 *, 
Iãm_O±i⁄s
);

234 
MENU_EXPORT
(Ë
míu_drivî
(
MENU
 *, );

235 
MENU_EXPORT
(Ë
míu_›ts_off
(
MENU
 *, 
Míu_O±i⁄s
);

236 
MENU_EXPORT
(Ë
míu_›ts_⁄
(
MENU
 *, 
Míu_O±i⁄s
);

237 
MENU_EXPORT
(Ë
míu_∑d
(c⁄° 
MENU
 *);

238 
MENU_EXPORT
(Ë
pos_míu_curs‹
(c⁄° 
MENU
 *);

239 
MENU_EXPORT
(Ë
po°_míu
(
MENU
 *);

240 
MENU_EXPORT
(Ë
sˇÀ_míu
(c⁄° 
MENU
 *, *, *);

241 
MENU_EXPORT
(Ë
£t_cuºít_ôem
(
MENU
 *
míu
, 
ITEM
 *
ôem
);

242 
MENU_EXPORT
(Ë
£t_ôem_öô
(
MENU
 *, 
Míu_Hook
);

243 
MENU_EXPORT
(Ë
£t_ôem_›ts
(
ITEM
 *, 
Iãm_O±i⁄s
);

244 
MENU_EXPORT
(Ë
£t_ôem_ãrm
(
MENU
 *, 
Míu_Hook
);

245 
MENU_EXPORT
(Ë
£t_ôem_u£Ωå
(
ITEM
 *, *);

246 
MENU_EXPORT
(Ë
£t_ôem_vÆue
(
ITEM
 *, 
boﬁ
);

247 
MENU_EXPORT
(Ë
£t_míu_back
(
MENU
 *, 
chty≥
);

248 
MENU_EXPORT
(Ë
£t_míu_f‹e
(
MENU
 *, 
chty≥
);

249 
MENU_EXPORT
(Ë
£t_míu_f‹m©
(
MENU
 *, , );

250 
MENU_EXPORT
(Ë
£t_míu_gªy
(
MENU
 *, 
chty≥
);

251 
MENU_EXPORT
(Ë
£t_míu_öô
(
MENU
 *, 
Míu_Hook
);

252 
MENU_EXPORT
(Ë
£t_míu_ôems
(
MENU
 *, 
ITEM
 **);

253 
MENU_EXPORT
(Ë
£t_míu_m¨k
(
MENU
 *, const *);

254 
MENU_EXPORT
(Ë
£t_míu_›ts
(
MENU
 *, 
Míu_O±i⁄s
);

255 
MENU_EXPORT
(Ë
£t_míu_∑d
(
MENU
 *, );

256 
MENU_EXPORT
(Ë
£t_míu_∑âîn
(
MENU
 *, const *);

257 
MENU_EXPORT
(Ë
£t_míu_sub
(
MENU
 *, 
WINDOW
 *);

258 
MENU_EXPORT
(Ë
£t_míu_ãrm
(
MENU
 *, 
Míu_Hook
);

259 
MENU_EXPORT
(Ë
£t_míu_u£Ωå
(
MENU
 *, *);

260 
MENU_EXPORT
(Ë
£t_míu_wö
(
MENU
 *, 
WINDOW
 *);

261 
MENU_EXPORT
(Ë
£t_t›_row
(
MENU
 *, );

262 
MENU_EXPORT
(Ë
t›_row
(c⁄° 
MENU
 *);

263 
MENU_EXPORT
(Ë
u≈o°_míu
(
MENU
 *);

264 
MENU_EXPORT
(Ë
míu_ªque°_by_«me
(const *);

265 
MENU_EXPORT
(Ë
£t_míu_•acög
(
MENU
 *, , , );

266 
MENU_EXPORT
(Ë
míu_•acög
(c⁄° 
MENU
 *, *, *, *);

268 
MENU_EXPORT
(
boﬁ
Ë
ôem_vÆue
(c⁄° 
ITEM
 *);

269 
MENU_EXPORT
(
boﬁ
Ë
ôem_visibÀ
(c⁄° 
ITEM
 *);

271 
MENU_EXPORT
(Ë
míu_f‹m©
(c⁄° 
MENU
 *, *, *);

273 #i‡
NCURSES_SP_FUNCS


274 
MENU_EXPORT
(
MENU
 *Ë
NCURSES_SP_NAME
(
√w_míu
Ë(
SCREEN
 *, 
ITEM
 **);

277 #ifde‡
__˝lu•lus


	@/usr/include/mntent.h

19 #i‚def 
_MNTENT_H


20 
	#_MNTENT_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<∑ths.h
>

24 
	~<bôs/ty≥s/FILE.h
>

27 
	#MNTTAB
 
_PATH_MNTTAB


	)

30 
	#MOUNTED
 
_PATH_MOUNTED


	)

34 
	#MNTTYPE_IGNORE
 "ign‹e"

	)

35 
	#MNTTYPE_NFS
 "nfs"

	)

36 
	#MNTTYPE_SWAP
 "sw≠"

	)

40 
	#MNTOPT_DEFAULTS
 "deÁu…s"

	)

41 
	#MNTOPT_RO
 "ro"

	)

42 
	#MNTOPT_RW
 "rw"

	)

43 
	#MNTOPT_SUID
 "suid"

	)

44 
	#MNTOPT_NOSUID
 "nosuid"

	)

45 
	#MNTOPT_NOAUTO
 "nﬂuto"

	)

48 
__BEGIN_DECLS


51 
	sm¡ít


53 *
	mm¡_f¢ame
;

54 *
	mm¡_dú
;

55 *
	mm¡_ty≥
;

56 *
	mm¡_›ts
;

57 
	mm¡_‰eq
;

58 
	mm¡_∑s¢o
;

64 
FILE
 *
	$£tm¡ít
 (c⁄° *
__fûe
, c⁄° *
__mode
Ë
__THROW
;

69 
m¡ít
 *
	$gëm¡ít
 (
FILE
 *
__°ªam
Ë
__THROW
;

71 #ifde‡
__USE_MISC


73 
m¡ít
 *
	$gëm¡ít_r
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

74 
m¡ít
 *
__ª°ri˘
 
__ªsu…
,

75 *
__ª°ri˘
 
__buf„r
,

76 
__bufsize
Ë
__THROW
;

81 
	$addm¡ít
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

82 c⁄° 
m¡ít
 *
__ª°ri˘
 
__m¡
Ë
__THROW
;

85 
	$ídm¡ít
 (
FILE
 *
__°ªam
Ë
__THROW
;

89 *
	$hasm¡›t
 (c⁄° 
m¡ít
 *
__m¡
,

90 c⁄° *
__›t
Ë
__THROW
;

93 
__END_DECLS


	@/usr/include/monetary.h

19 #i‚def 
_MONETARY_H


20 
	#_MONETARY_H
 1

	)

22 
	~<„©uªs.h
>

25 
	#__√ed_size_t


	)

26 
	~<°ddef.h
>

27 
	~<bôs/ty≥s.h
>

29 #i‚def 
__ssize_t_deföed


30 
__ssize_t
 
	tssize_t
;

31 
	#__ssize_t_deföed


	)

35 
__BEGIN_DECLS


38 
ssize_t
 
	$°rfm⁄
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

39 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

40 
__THROW
 
	$__©åibuã_f‹m©_°rfm⁄__
 (3, 4)

41 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 2));

43 #ifde‡
__USE_XOPEN2K8


45 
	~<bôs/ty≥s/loˇÀ_t.h
>

48 
ssize_t
 
	$°rfm⁄_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

49 
loˇÀ_t
 
__loc
,

50 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

51 
__THROW
 
	$__©åibuã_f‹m©_°rfm⁄__
 (4, 5)

52 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 2));

55 
	~<bôs/Êﬂä.h
>

56 #i‡
deföed
 
__LDBL_COMPAT
 || 
__LDOUBLE_REDIRECTS_TO_FLOAT128_ABI
 == 1

57 
	~<bôs/m⁄ë¨y-ldbl.h
>

60 
__END_DECLS


	@/usr/include/mqueue.h

18 #i‚de‡
_MQUEUE_H


19 
	#_MQUEUE_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<sys/ty≥s.h
>

23 
	~<f˙é.h
>

24 
	~<bôs/ty≥s/sigevít_t.h
>

25 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

27 
	~<bôs/mqueue.h
>

29 
__BEGIN_DECLS


38 
mqd_t
 
	$mq_›í
 (c⁄° *
__«me
, 
__oÊag
, ...)

39 
__THROW
 
	`__n⁄nuŒ
 ((1));

43 
	$mq_˛o£
 (
mqd_t
 
__mqdes
Ë
__THROW
;

46 
	$mq_gë©å
 (
mqd_t
 
__mqdes
, 
mq_©å
 *
__mq°©
)

47 
__THROW
 
	`__n⁄nuŒ
 ((2));

51 
	$mq_£èâr
 (
mqd_t
 
__mqdes
,

52 c⁄° 
mq_©å
 *
__ª°ri˘
 
__mq°©
,

53 
mq_©å
 *
__ª°ri˘
 
__omq°©
)

54 
__THROW
 
	`__n⁄nuŒ
 ((2));

57 
	$mq_u∆ök
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

61 
	$mq_nŸify
 (
mqd_t
 
__mqdes
, c⁄° 
sigevít
 *
__nŸifiˇti⁄
)

62 
__THROW
;

66 
ssize_t
 
	$mq_ª˚ive
 (
mqd_t
 
__mqdes
, *
__msg_±r
, 
size_t
 
__msg_Àn
,

67 *
__msg_¥io
Ë
	`__n⁄nuŒ
 ((2));

70 
	$mq_£nd
 (
mqd_t
 
__mqdes
, c⁄° *
__msg_±r
, 
size_t
 
__msg_Àn
,

71 
__msg_¥io
Ë
	`__n⁄nuŒ
 ((2));

73 #ifde‡
__USE_XOPEN2K


74 #i‚de‡
__USE_TIME_BITS64


77 
ssize_t
 
	$mq_timedª˚ive
 (
mqd_t
 
__mqdes
, *
__ª°ri˘
 
__msg_±r
,

78 
size_t
 
__msg_Àn
,

79 *
__ª°ri˘
 
__msg_¥io
,

80 c⁄° 
time•ec
 *
__ª°ri˘
 
__abs_timeout
)

81 
	`__n⁄nuŒ
 ((2, 5));

85 
	$mq_timed£nd
 (
mqd_t
 
__mqdes
, c⁄° *
__msg_±r
,

86 
size_t
 
__msg_Àn
, 
__msg_¥io
,

87 c⁄° 
time•ec
 *
__abs_timeout
)

88 
	`__n⁄nuŒ
 ((2, 5));

90 #ifde‡
__REDIRECT


91 
	`__REDIRECT
 (
mq_timedª˚ive
, (
mqd_t
 
__mqdes
,

92 *
__ª°ri˘
 
__msg_±r
,

93 
size_t
 
__msg_Àn
,

94 *
__ª°ri˘
 
__msg_¥io
,

95 c⁄° 
time•ec
 *
__ª°ri˘
 
__abs_timeout
),

96 
__mq_timedª˚ive_time64
)

97 
	`__n⁄nuŒ
 ((2, 5));

99 
	`__REDIRECT
 (
mq_timed£nd
, (
mqd_t
 
__mqdes
,

100 c⁄° *
__msg_±r
, 
size_t
 
__msg_Àn
,

101 
__msg_¥io
,

102 c⁄° 
time•ec
 *
__abs_timeout
),

103 
__mq_timed£nd_time64
)

104 
	`__n⁄nuŒ
 ((2, 5));

106 
	#mq_timedª˚ive
 
__mq_timedª˚ive_time64


	)

107 
	#mq_timed£nd
 
__mq_timed£nd_time64


	)

113 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄
 \

114 && 
deföed
 
__va_¨g_∑ck_Àn


115 
	~<bôs/mqueue2.h
>

118 
__END_DECLS


	@/usr/include/nc_tparm.h

36 #i‚de‡
NC_TPARM_ö˛uded


37 
	#NC_TPARM_ö˛uded
 1

	)

39 
	~<ncur£s_cfg.h
>

40 
	~<cur£s.h
>

46 #i‚de‡
TPARM_ARG


47 #ifde‡
NCURSES_TPARM_ARG


48 
	#TPARM_ARG
 
NCURSES_TPARM_ARG


	)

50 
	#TPARM_ARG
 

	)

54 
	#TPARM_N
(
n
Ë(
TPARM_ARG
)“)

	)

56 
	#TPARM_9
(
a
,
b
,
c
,
d
,
e
,
f
,
g
,
h
,
i
,
j
Ë
	`ç¨m
◊,
	`TPARM_N
(b),TPARM_N(c),TPARM_N(d),TPARM_N”),TPARM_N(f),TPARM_N(g),TPARM_N(h),TPARM_N(i),TPARM_N(j))

	)

58 #i‡
NCURSES_TPARM_VARARGS


59 
	#TPARM_8
(
a
,
b
,
c
,
d
,
e
,
f
,
g
,
h
,
i
Ë
	`ç¨m
◊,
	`TPARM_N
(b),TPARM_N(c),TPARM_N(d),TPARM_N”),TPARM_N(f),TPARM_N(g),TPARM_N(h),TPARM_N(i))

	)

60 
	#TPARM_7
(
a
,
b
,
c
,
d
,
e
,
f
,
g
,
h
Ë
	`ç¨m
◊,
	`TPARM_N
(b),TPARM_N(c),TPARM_N(d),TPARM_N”),TPARM_N(f),TPARM_N(g),TPARM_N(h))

	)

61 
	#TPARM_6
(
a
,
b
,
c
,
d
,
e
,
f
,
g
Ë
	`ç¨m
◊,
	`TPARM_N
(b),TPARM_N(c),TPARM_N(d),TPARM_N”),TPARM_N(f),TPARM_N(g))

	)

62 
	#TPARM_5
(
a
,
b
,
c
,
d
,
e
,
f
Ë
	`ç¨m
◊,
	`TPARM_N
(b),TPARM_N(c),TPARM_N(d),TPARM_N”),TPARM_N(f))

	)

63 
	#TPARM_4
(
a
,
b
,
c
,
d
,
e
Ë
	`ç¨m
◊,
	`TPARM_N
(b),TPARM_N(c),TPARM_N(d),TPARM_N”))

	)

64 
	#TPARM_3
(
a
,
b
,
c
,
d
Ë
	`ç¨m
◊,
	`TPARM_N
(b),TPARM_N(c),TPARM_N(d))

	)

65 
	#TPARM_2
(
a
,
b
,
c
Ë
	`ç¨m
◊,
	`TPARM_N
(b),TPARM_N(c))

	)

66 
	#TPARM_1
(
a
,
b
Ë
	`ç¨m
◊,
	`TPARM_N
(b))

	)

67 
	#TPARM_0
(
a
Ë
	`ç¨m
◊)

	)

69 
	#TPARM_8
(
a
,
b
,
c
,
d
,
e
,
f
,
g
,
h
,
i
Ë
	`TPARM_9
◊,b,c,d,e,f,g,h,i,0)

	)

70 
	#TPARM_7
(
a
,
b
,
c
,
d
,
e
,
f
,
g
,
h
Ë
	`TPARM_8
◊,b,c,d,e,f,g,h,0)

	)

71 
	#TPARM_6
(
a
,
b
,
c
,
d
,
e
,
f
,
g
Ë
	`TPARM_7
◊,b,c,d,e,f,g,0)

	)

72 
	#TPARM_5
(
a
,
b
,
c
,
d
,
e
,
f
Ë
	`TPARM_6
◊,b,c,d,e,f,0)

	)

73 
	#TPARM_4
(
a
,
b
,
c
,
d
,
e
Ë
	`TPARM_5
◊,b,c,d,e,0)

	)

74 
	#TPARM_3
(
a
,
b
,
c
,
d
Ë
	`TPARM_4
◊,b,c,d,0)

	)

75 
	#TPARM_2
(
a
,
b
,
c
Ë
	`TPARM_3
◊,b,c,0)

	)

76 
	#TPARM_1
(
a
,
b
Ë
	`TPARM_2
◊,b,0)

	)

77 
	#TPARM_0
(
a
Ë
	`TPARM_1
◊,0)

	)

80 #ifde‡
NCURSES_INTERNALS


81 
	#TIPARM_1
(
s
,
a
Ë
	`_nc_tù¨m
(1,s,a)

	)

82 
	#TIPARM_2
(
s
,
a
,
b
Ë
	`_nc_tù¨m
(2,s,a,b)

	)

83 
	#TIPARM_3
(
s
,
a
,
b
,
c
Ë
	`_nc_tù¨m
(3,s,a,b,c)

	)

84 
	#TIPARM_4
(
s
,
a
,
b
,
c
,
d
Ë
	`_nc_tù¨m
(4,s,a,b,c,d)

	)

85 
	#TIPARM_5
(
s
,
a
,
b
,
c
,
d
,
e
Ë
	`_nc_tù¨m
(5,s,a,b,c,d,e)

	)

86 
	#TIPARM_6
(
s
,
a
,
b
,
c
,
d
,
e
,
f
Ë
	`_nc_tù¨m
(6,s,a,b,c,d,e,f)

	)

87 
	#TIPARM_7
(
s
,
a
,
b
,
c
,
d
,
e
,
f
,
g
Ë
	`_nc_tù¨m
(7,s,a,b,c,d,e,f,g)

	)

88 
	#TIPARM_8
(
s
,
a
,
b
,
c
,
d
,
e
,
f
,
g
,
h
Ë
	`_nc_tù¨m
(8,s,a,b,c,d,e,f,g,h)

	)

89 
	#TIPARM_9
(
s
,
a
,
b
,
c
,
d
,
e
,
f
,
g
,
h
,
i
Ë
	`_nc_tù¨m
(9,s,a,b,c,d,e,f,g,h,i)

	)

	@/usr/include/ncurses_dll.h

31 #i‚de‡
NCURSES_DLL_H_ö˛


32 
	#NCURSES_DLL_H_ö˛
 1

	)

37 #i‡
deföed
(
__MINGW64__
)

39 #i‚de‡
_WIN64


40 
	#_WIN64
 1

	)

43 #ñi‡
deföed
(
__MINGW32__
)

45 #i‚de‡
_WIN32


46 
	#_WIN32
 1

	)

53 #i‡(
__GNUC__
 =4Ë&& (
__GNUC_MINOR__
 == 8)

55 #ifde‡
åa˚


56 #unde‡
åa˚


57 
	#TRACE


	)

68 
	#NCURSES_PUBLIC_VAR
(
«me
Ë
_nc_
##
	)
name

70 #i‡
deföed
(
BUILDING_NCURSES
)

71 
	#NCURSES_IMPEXP
 
NCURSES_EXPORT_GENERAL_EXPORT


	)

73 
	#NCURSES_IMPEXP
 
NCURSES_EXPORT_GENERAL_IMPORT


	)

76 
	#NCURSES_WRAPPED_VAR
(
ty≥
,
«me
Ë
NCURSES_IMPEXP
Åy≥ 
	`NCURSES_PUBLIC_VAR
“ame)()

	)

78 
	#NCURSES_EXPORT
(
ty≥
Ë
NCURSES_IMPEXP
Åy≥ 
NCURSES_API


	)

79 
	#NCURSES_EXPORT_VAR
(
ty≥
Ë
NCURSES_IMPEXP
 
	)
type

84 #i‡
deföed
(
__CYGWIN__
Ë|| (deföed(
_WIN32
Ë|| deföed(
_WIN64
))

85 #i‡
deföed
(
NCURSES_STATIC
)

86 
	#NCURSES_EXPORT_GENERAL_IMPORT


	)

87 
	#NCURSES_EXPORT_GENERAL_EXPORT


	)

89 
	#NCURSES_EXPORT_GENERAL_IMPORT
 
	`__de˛•ec
(
dŒimp‹t
)

	)

90 
	#NCURSES_EXPORT_GENERAL_EXPORT
 
	`__de˛•ec
(
dŒexp‹t
)

	)

92 
	#NCURSES_API
 
__cde˛


	)

94 
	#NCURSES_EXPORT_GENERAL_IMPORT


	)

95 
	#NCURSES_EXPORT_GENERAL_EXPORT


	)

96 
	#NCURSES_API


	)

	@/usr/include/netdb.h

22 #i‚def 
_NETDB_H


23 
	#_NETDB_H
 1

	)

25 
	~<„©uªs.h
>

27 
	~<√töë/ö.h
>

28 
	~<bôs/°döt-uöä.h
>

29 #ifde‡
__USE_MISC


32 
	~<Ωc/√tdb.h
>

35 #ifde‡
__USE_GNU


36 
	~<bôs/ty≥s/sigevít_t.h
>

37 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

40 
	~<bôs/√tdb.h
>

43 
	#_PATH_HEQUIV
 "/ëc/ho°s.equiv"

	)

44 
	#_PATH_HOSTS
 "/ëc/ho°s"

	)

45 
	#_PATH_NETWORKS
 "/ëc/√tw‹ks"

	)

46 
	#_PATH_NSSWITCH_CONF
 "/ëc/nsswôch.c⁄f"

	)

47 
	#_PATH_PROTOCOLS
 "/ëc/¥Ÿocﬁs"

	)

48 
	#_PATH_SERVICES
 "/ëc/£rvi˚s"

	)

51 
	g__BEGIN_DECLS


53 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


56 
	#h_î∫o
 (*
	`__h_î∫o_loˇti⁄
 ())

	)

59 *
	$__h_î∫o_loˇti⁄
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

63 
	#HOST_NOT_FOUND
 1

	)

64 
	#TRY_AGAIN
 2

	)

66 
	#NO_RECOVERY
 3

	)

68 
	#NO_DATA
 4

	)

71 #ifde‡
__USE_MISC


72 
	#NETDB_INTERNAL
 -1

	)

73 
	#NETDB_SUCCESS
 0

	)

74 
	#NO_ADDRESS
 
NO_DATA


	)

77 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_XOPEN_EXTENDED


79 
	#IPPORT_RESERVED
 1024

	)

82 #ifde‡
__USE_GNU


84 
	#SCOPE_DELIMITER
 '%'

	)

87 #ifde‡
__USE_MISC


90 
	$hîr‹
 (c⁄° *
__°r
Ë
__THROW
;

93 c⁄° *
	$h°ªº‹
 (
__îr_num
Ë
__THROW
;

98 
	sho°ít


100 *
h_«me
;

101 **
h_Æü£s
;

102 
h_addπy≥
;

103 
h_Àngth
;

104 **
h_addr_li°
;

105 #ifde‡
__USE_MISC


106 
	#h_addr
 
h_addr_li°
[0]

	)

115 
	`£tho°ít
 (
__°ay_›í
);

121 
	`ídho°ít
 ();

128 
ho°ít
 *
	`gëho°ít
 ();

135 
ho°ít
 *
	`gëho°byaddr
 (c⁄° *
__addr
, 
__sockÀn_t
 
__Àn
,

136 
__ty≥
);

142 
ho°ít
 *
	`gëho°by«me
 (c⁄° *
__«me
);

144 #ifde‡
__USE_MISC


153 
ho°ít
 *
	`gëho°by«me2
 (c⁄° *
__«me
, 
__af
);

165 
	`gëho°ít_r
 (
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

166 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

167 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

168 *
__ª°ri˘
 
__h_î∫›
);

170 
	`gëho°byaddr_r
 (c⁄° *
__ª°ri˘
 
__addr
, 
__sockÀn_t
 
__Àn
,

171 
__ty≥
,

172 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

173 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

174 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

175 *
__ª°ri˘
 
__h_î∫›
);

177 
	`gëho°by«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

178 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

179 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

180 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

181 *
__ª°ri˘
 
__h_î∫›
);

183 
	`gëho°by«me2_r
 (c⁄° *
__ª°ri˘
 
__«me
, 
__af
,

184 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

185 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

186 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

187 *
__ª°ri˘
 
__h_î∫›
);

196 
	`£äëít
 (
__°ay_›í
);

202 
	`íd√ã¡
 ();

209 
√ã¡
 *
	`gë√ã¡
 ();

216 
√ã¡
 *
	`gë√tbyaddr
 (
uöt32_t
 
__√t
, 
__ty≥
);

222 
√ã¡
 *
	`gë√tby«me
 (c⁄° *
__«me
);

224 #ifdef 
__USE_MISC


235 
	`gë√ã¡_r
 (
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

236 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

237 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

238 *
__ª°ri˘
 
__h_î∫›
);

240 
	`gë√tbyaddr_r
 (
uöt32_t
 
__√t
, 
__ty≥
,

241 
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

242 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

243 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

244 *
__ª°ri˘
 
__h_î∫›
);

246 
	`gë√tby«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

247 
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

248 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

249 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

250 *
__ª°ri˘
 
__h_î∫›
);

255 
	s£rvít


257 *
s_«me
;

258 **
s_Æü£s
;

259 
s_p‹t
;

260 *
s_¥Ÿo
;

268 
	`£t£rvít
 (
__°ay_›í
);

274 
	`íd£rvít
 ();

281 
£rvít
 *
	`gë£rvít
 ();

288 
£rvít
 *
	`gë£rvby«me
 (c⁄° *
__«me
, c⁄° *
__¥Ÿo
);

295 
£rvít
 *
	`gë£rvbyp‹t
 (
__p‹t
, c⁄° *
__¥Ÿo
);

298 #ifdef 
__USE_MISC


306 
	`gë£rvít_r
 (
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

307 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

308 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

310 
	`gë£rvby«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

311 c⁄° *
__ª°ri˘
 
__¥Ÿo
,

312 
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

313 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

314 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

316 
	`gë£rvbyp‹t_r
 (
__p‹t
, c⁄° *
__ª°ri˘
 
__¥Ÿo
,

317 
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

318 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

319 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

324 
	s¥Ÿ€¡


326 *
p_«me
;

327 **
p_Æü£s
;

328 
p_¥Ÿo
;

336 
	`£çrŸ€¡
 (
__°ay_›í
);

342 
	`íd¥Ÿ€¡
 ();

349 
¥Ÿ€¡
 *
	`gë¥Ÿ€¡
 ();

355 
¥Ÿ€¡
 *
	`gë¥Ÿoby«me
 (c⁄° *
__«me
);

361 
¥Ÿ€¡
 *
	`gë¥Ÿobynumbî
 (
__¥Ÿo
);

364 #ifdef 
__USE_MISC


372 
	`gë¥Ÿ€¡_r
 (
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

373 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

374 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

376 
	`gë¥Ÿoby«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

377 
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

378 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

379 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

381 
	`gë¥Ÿobynumbî_r
 (
__¥Ÿo
,

382 
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

383 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

384 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

393 
	`£äëgª¡
 (c⁄° *
__√tgroup
);

401 
	`íd√tgª¡
 ();

410 
	`gë√tgª¡
 (**
__ª°ri˘
 
__ho°p
,

411 **
__ª°ri˘
 
__u£Ω
,

412 **
__ª°ri˘
 
__domaöp
);

421 
	`ö√tgr
 (c⁄° *
__√tgroup
, c⁄° *
__ho°
,

422 c⁄° *
__u£r
, c⁄° *
__domaö
);

430 
	`gë√tgª¡_r
 (**
__ª°ri˘
 
__ho°p
,

431 **
__ª°ri˘
 
__u£Ω
,

432 **
__ª°ri˘
 
__domaöp
,

433 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
);

437 #ifde‡
__USE_MISC


449 
	`rcmd
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

450 c⁄° *
__ª°ri˘
 
__locu£r
,

451 c⁄° *
__ª°ri˘
 
__ªmu£r
,

452 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
);

461 
	`rcmd_af
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

462 c⁄° *
__ª°ri˘
 
__locu£r
,

463 c⁄° *
__ª°ri˘
 
__ªmu£r
,

464 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
,

465 
ß_Ámûy_t
 
__af
);

477 
	`ªxec
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

478 c⁄° *
__ª°ri˘
 
__«me
,

479 c⁄° *
__ª°ri˘
 
__∑ss
,

480 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
);

489 
	`ªxec_af
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

490 c⁄° *
__ª°ri˘
 
__«me
,

491 c⁄° *
__ª°ri˘
 
__∑ss
,

492 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
,

493 
ß_Ámûy_t
 
__af
);

503 
	`ru£rok
 (c⁄° *
__rho°
, 
__su£r
,

504 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
);

513 
	`ru£rok_af
 (c⁄° *
__rho°
, 
__su£r
,

514 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
,

515 
ß_Ámûy_t
 
__af
);

526 
	`úu£rok
 (
uöt32_t
 
__øddr
, 
__su£r
,

527 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
);

537 
	`úu£rok_af
 (c⁄° *
__øddr
, 
__su£r
,

538 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
,

539 
ß_Ámûy_t
 
__af
);

549 
	`ºesvp‹t
 (*
__Æp‹t
);

558 
	`ºesvp‹t_af
 (*
__Æp‹t
, 
ß_Ámûy_t
 
__af
);

563 #ifde‡
__USE_XOPEN2K


565 
	saddröfo


567 
ai_Êags
;

568 
ai_Ámûy
;

569 
ai_sockty≥
;

570 
ai_¥Ÿocﬁ
;

571 
sockÀn_t
 
ai_addæí
;

572 
sockaddr
 *
ai_addr
;

573 *
ai_ˇn⁄«me
;

574 
addröfo
 *
ai_√xt
;

577 #ifde‡
__USE_GNU


579 
	sgaicb


581 c⁄° *
¨_«me
;

582 c⁄° *
¨_£rvi˚
;

583 c⁄° 
addröfo
 *
¨_ªque°
;

584 
addröfo
 *
¨_ªsu…
;

586 
__ªtu∫
;

587 
__glibc_ª£rved
[5];

591 
	#GAI_WAIT
 0

	)

592 
	#GAI_NOWAIT
 1

	)

596 
	#AI_PASSIVE
 0x0001

	)

597 
	#AI_CANONNAME
 0x0002

	)

598 
	#AI_NUMERICHOST
 0x0004

	)

599 
	#AI_V4MAPPED
 0x0008

	)

600 
	#AI_ALL
 0x0010

	)

601 
	#AI_ADDRCONFIG
 0x0020

	)

603 #ifde‡
__USE_GNU


604 
	#AI_IDN
 0x0040

	)

607 
	#AI_CANONIDN
 0x0080

	)

608 
	#AI_IDN_ALLOW_UNASSIGNED
 \

609 
	`__glibc_ma¸o_w¨nög
 ("AI_IDN_ALLOW_UNASSIGNED i†dïªˇãd"Ë0x0100

	)

610 
	#AI_IDN_USE_STD3_ASCII_RULES
 \

611 
	`__glibc_ma¸o_w¨nög
 ("AI_IDN_USE_STD3_ASCII_RULES i†dïªˇãd"Ë0x0200

	)

613 
	#AI_NUMERICSERV
 0x0400

	)

616 
	#EAI_BADFLAGS
 -1

	)

617 
	#EAI_NONAME
 -2

	)

618 
	#EAI_AGAIN
 -3

	)

619 
	#EAI_FAIL
 -4

	)

620 
	#EAI_FAMILY
 -6

	)

621 
	#EAI_SOCKTYPE
 -7

	)

622 
	#EAI_SERVICE
 -8

	)

623 
	#EAI_MEMORY
 -10

	)

624 
	#EAI_SYSTEM
 -11

	)

625 
	#EAI_OVERFLOW
 -12

	)

626 #ifde‡
__USE_GNU


627 
	#EAI_NODATA
 -5

	)

628 
	#EAI_ADDRFAMILY
 -9

	)

629 
	#EAI_INPROGRESS
 -100

	)

630 
	#EAI_CANCELED
 -101

	)

631 
	#EAI_NOTCANCELED
 -102

	)

632 
	#EAI_ALLDONE
 -103

	)

633 
	#EAI_INTR
 -104

	)

634 
	#EAI_IDN_ENCODE
 -105

	)

637 #ifde‡
__USE_MISC


638 
	#NI_MAXHOST
 1025

	)

639 
	#NI_MAXSERV
 32

	)

642 
	#NI_NUMERICHOST
 1

	)

643 
	#NI_NUMERICSERV
 2

	)

644 
	#NI_NOFQDN
 4

	)

645 
	#NI_NAMEREQD
 8

	)

646 
	#NI_DGRAM
 16

	)

647 #ifde‡
__USE_GNU


648 
	#NI_IDN
 32

	)

649 
	#NI_IDN_ALLOW_UNASSIGNED
 \

650 
	`__glibc_ma¸o_w¨nög
 ("NI_IDN_ALLOW_UNASSIGNED i†dïªˇãd"Ë64

	)

651 
	#NI_IDN_USE_STD3_ASCII_RULES
 \

652 
	`__glibc_ma¸o_w¨nög
 ("NI_IDN_USE_STD3_ASCII_RULES i†dïªˇãd"Ë128

	)

660 
	`gëaddröfo
 (c⁄° *
__ª°ri˘
 
__«me
,

661 c⁄° *
__ª°ri˘
 
__£rvi˚
,

662 c⁄° 
addröfo
 *
__ª°ri˘
 
__ªq
,

663 
addröfo
 **
__ª°ri˘
 
__∑i
);

666 
	$‰ìaddröfo
 (
addröfo
 *
__ai
Ë
__THROW
;

669 c⁄° *
	$gai_°ªº‹
 (
__ecode
Ë
__THROW
;

675 
	`gë«meöfo
 (c⁄° 
sockaddr
 *
__ª°ri˘
 
__ß
,

676 
sockÀn_t
 
__ßÀn
, *
__ª°ri˘
 
__ho°
,

677 
sockÀn_t
 
__ho°Àn
, *
__ª°ri˘
 
__£rv
,

678 
sockÀn_t
 
__£rvÀn
, 
__Êags
);

681 #ifde‡
__USE_GNU


690 
	`gëaddröfo_a
 (
__mode
, 
gaicb
 *
__li°
[
__ª°ri˘_¨r
],

691 
__ít
, 
sigevít
 *
__ª°ri˘
 
__sig
);

701 
	`gai_su•íd
 (c⁄° 
gaicb
 *c⁄° 
__li°
[], 
__ít
,

702 c⁄° 
time•ec
 *
__timeout
);

704 #ifde‡
__USE_TIME_BITS64


705 #i‡
	`deföed
(
__REDIRECT
)

706 
	`__REDIRECT
 (
gai_su•íd
, (c⁄° 
gaicb
 *c⁄° 
__li°
[],

707 
__ít
,

708 c⁄° 
time•ec
 *
__timeout
),

709 
__gai_su•íd_time64
);

711 
	#gai_su•íd
 
__gai_su•íd_time64


	)

716 
	$gai_îr‹
 (
gaicb
 *
__ªq
Ë
__THROW
;

719 
	$gai_ˇn˚l
 (
gaicb
 *
__gaicbp
Ë
__THROW
;

722 
__END_DECLS


	@/usr/include/nl_types.h

18 #i‚de‡
_NL_TYPES_H


19 
	#_NL_TYPES_H
 1

	)

21 
	~<„©uªs.h
>

24 
	#NL_SETD
 1

	)

27 
	#NL_CAT_LOCALE
 1

	)

30 
__BEGIN_DECLS


33 *
	t∆_ˇtd
;

36 
	t∆_ôem
;

42 
∆_ˇtd
 
	$ˇt›í
 (c⁄° *
__ˇt_«me
, 
__Êag
Ë
	`__n⁄nuŒ
 ((1));

46 *
	$ˇtgës
 (
∆_ˇtd
 
__ˇèlog
, 
__£t
, 
__numbî
,

47 c⁄° *
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

50 
	$ˇt˛o£
 (
∆_ˇtd
 
__ˇèlog
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

52 
__END_DECLS


	@/usr/include/nss.h

21 #i‚de‡
_NSS_H


22 
	#_NSS_H
 1

	)

24 
	~<„©uªs.h
>

25 
	~<°ddef.h
>

26 
	~<°döt.h
>

27 
	~<sys/ty≥s.h
>

30 
__BEGIN_DECLS


33 
	enss_°©us


35 
	mNSS_STATUS_TRYAGAIN
 = -2,

36 
	mNSS_STATUS_UNAVAIL
,

37 
	mNSS_STATUS_NOTFOUND
,

38 
	mNSS_STATUS_SUCCESS
,

39 
	mNSS_STATUS_RETURN


44 
	sgaih_addπu∂e


46 
gaih_addπu∂e
 *
	m√xt
;

47 *
	m«me
;

48 
	mÁmûy
;

49 
uöt32_t
 
	maddr
[4];

50 
uöt32_t
 
	msc›eid
;

60 
	$__nss_c⁄figuª_lookup
 (c⁄° *
__db«me
,

61 c⁄° *
__°rög
Ë
__THROW
;

64 
__√tgª¡
;

65 
Æü£¡
;

66 
ëhî_addr
;

67 
ëhîít
;

68 
group
;

69 
ho°ít
;

70 
√ã¡
;

71 
∑sswd
;

72 
¥Ÿ€¡
;

73 
Ω˚¡
;

74 
£rvít
;

75 
sgΩ
;

76 
•wd
;

77 
åa˚d_fûe
;

80 
nss_°©us
 
	tnss_ídÆü£¡
 ();

81 
nss_°©us
 
	tnss_ídëhîít
 ();

82 
nss_°©us
 
	tnss_ídgª¡
 ();

83 
nss_°©us
 
	tnss_ídho°ít
 ();

84 
nss_°©us
 
	tnss_íd√ã¡
 ();

85 
nss_°©us
 
	tnss_íd√tgª¡
 (
	t__√tgª¡
 *);

86 
nss_°©us
 
	tnss_íd¥Ÿ€¡
 ();

87 
nss_°©us
 
	tnss_ídpwít
 ();

88 
nss_°©us
 
	tnss_ídΩ˚¡
 ();

89 
nss_°©us
 
	tnss_íd£rvít
 ();

90 
nss_°©us
 
	tnss_ídsgít
 ();

91 
nss_°©us
 
	tnss_íd•ít
 ();

92 
nss_°©us
 
	tnss_gëÆüsby«me_r
 (c⁄° *, 
	tÆü£¡
 *,

93 *, 
	tsize_t
, *);

94 
nss_°©us
 
	tnss_gëÆü£¡_r
 (
	tÆü£¡
 *,

95 *, 
	tsize_t
, *);

96 
nss_°©us
 
	tnss_gëˇn⁄«me_r
 (c⁄° *, *, 
	tsize_t
,

98 
nss_°©us
 
	tnss_gëëhîít_r
 (
	tëhîít
 *,

99 *, 
	tsize_t
, *);

100 
nss_°©us
 
	tnss_gëgª¡_r
 (
	tgroup
 *, *, 
	tsize_t
, *);

101 
nss_°©us
 
	tnss_gëgrgid_r
 (
	t__gid_t
, 
	tgroup
 *,

102 *, 
	tsize_t
, *);

103 
nss_°©us
 
	tnss_gëg∫am_r
 (c⁄° *, 
	tgroup
 *,

104 *, 
	tsize_t
, *);

105 
nss_°©us
 
	tnss_gëho°byaddr2_r
 (c⁄° *, 
	t__sockÀn_t
, ,

106 
	tho°ít
 *, *, 
	tsize_t
,

107 *, *, 
	töt32_t
 *);

108 
nss_°©us
 
	tnss_gëho°byaddr_r
 (c⁄° *, 
	t__sockÀn_t
, ,

109 
	tho°ít
 *, *, 
	tsize_t
,

111 
nss_°©us
 
	tnss_gëho°by«me2_r
 (const *, ,

112 
	tho°ít
 *, *, 
	tsize_t
,

114 
nss_°©us
 
	tnss_gëho°by«me3_r
 (const *, ,

115 
	tho°ít
 *, *, 
	tsize_t
,

116 *, *, 
	töt32_t
 *,

118 
nss_°©us
 
	tnss_gëho°by«me4_r
 (const *,

119 
	tgaih_addπu∂e
 **,

120 *, 
	tsize_t
,

121 *, *, 
	töt32_t
 *);

122 
nss_°©us
 
	tnss_gëho°by«me_r
 (c⁄° *, 
	tho°ít
 *,

123 *, 
	tsize_t
, *, *);

124 
nss_°©us
 
	tnss_gëho°ít_r
 (
	tho°ít
 *, *, 
	tsize_t
,

126 
nss_°©us
 
	tnss_gëho°t⁄_r
 (c⁄° *, 
	tëhîít
 *,

127 *, 
	tsize_t
, *);

128 
nss_°©us
 
	tnss_gë√tbyaddr_r
 (
	tuöt32_t
, , 
	t√ã¡
 *,

129 *, 
	tsize_t
, *, *);

130 
nss_°©us
 
	tnss_gë√tby«me_r
 (c⁄° *, 
	t√ã¡
 *,

131 *, 
	tsize_t
, *, *);

132 
nss_°©us
 
	tnss_gë√ã¡_r
 (
	t√ã¡
 *,

133 *, 
	tsize_t
, *, *);

134 
nss_°©us
 
	tnss_gë√tgª¡_r
 (
	t__√tgª¡
 *,

135 *, 
	tsize_t
, *);

136 
nss_°©us
 
	tnss_gë¡oho°_r
 (c⁄° 
	tëhî_addr
 *,

137 
	tëhîít
 *, *, 
	tsize_t
,

139 
nss_°©us
 
	tnss_gë¥Ÿoby«me_r
 (c⁄° *, 
	t¥Ÿ€¡
 *,

140 *, 
	tsize_t
, *);

141 
nss_°©us
 
	tnss_gë¥Ÿobynumbî_r
 (, 
	t¥Ÿ€¡
 *,

142 *, 
	tsize_t
, *);

143 
nss_°©us
 
	tnss_gë¥Ÿ€¡_r
 (
	t¥Ÿ€¡
 *,

144 *, 
	tsize_t
, *);

145 
nss_°©us
 
	tnss_gëpublickey
 (const *, *, *);

146 
nss_°©us
 
	tnss_gëpwít_r
 (
	t∑sswd
 *,

147 *, 
	tsize_t
, *);

148 
nss_°©us
 
	tnss_gëpw«m_r
 (c⁄° *, 
	t∑sswd
 *,

149 *, 
	tsize_t
, *);

150 
nss_°©us
 
	tnss_gëpwuid_r
 (
	t__uid_t
, 
	t∑sswd
 *,

151 *, 
	tsize_t
, *);

152 
nss_°©us
 
	tnss_gëΩcby«me_r
 (c⁄° *, 
	tΩ˚¡
 *,

153 *, 
	tsize_t
, *);

154 
nss_°©us
 
	tnss_gëΩcbynumbî_r
 (, 
	tΩ˚¡
 *,

155 *, 
	tsize_t
, *);

156 
nss_°©us
 
	tnss_gëΩ˚¡_r
 (
	tΩ˚¡
 *,

157 *, 
	tsize_t
, *);

158 
nss_°©us
 
	tnss_gë£¸ëkey
 (const *, *, *, *);

159 
nss_°©us
 
	tnss_gë£rvby«me_r
 (const *, const *,

160 
	t£rvít
 *, *, 
	tsize_t
,

162 
nss_°©us
 
	tnss_gë£rvbyp‹t_r
 (, const *,

163 
	t£rvít
 *, *, 
	tsize_t
,

165 
nss_°©us
 
	tnss_gë£rvít_r
 (
	t£rvít
 *, *, 
	tsize_t
,

167 
nss_°©us
 
	tnss_gësgít_r
 (
	tsgΩ
 *, *, 
	tsize_t
, *);

168 
nss_°©us
 
	tnss_gësg«m_r
 (c⁄° *, 
	tsgΩ
 *,

169 *, 
	tsize_t
, *);

170 
nss_°©us
 
	tnss_gë•ít_r
 (
	t•wd
 *, *, 
	tsize_t
, *);

171 
nss_°©us
 
	tnss_gë•«m_r
 (c⁄° *, 
	t•wd
 *,

172 *, 
	tsize_t
, *);

173 
	tnss_öô
 ((*Ë(
	tsize_t
, 
	tåa˚d_fûe
 *));

174 
nss_°©us
 
	tnss_öôgroups_dyn
 (c⁄° *, 
	t__gid_t
, *,

175 *, 
	t__gid_t
 **, ,

177 
nss_°©us
 
	tnss_√äame2u£r
 ([], 
	t__uid_t
 *, 
	t__gid_t
 *,

178 *, 
	t__gid_t
 *, *);

179 
nss_°©us
 
	tnss_£èlü£¡
 ();

180 
nss_°©us
 
	tnss_£ãthîít
 ();

181 
nss_°©us
 
	tnss_£tgª¡
 ();

182 
nss_°©us
 
	tnss_£tho°ít
 ();

183 
nss_°©us
 
	tnss_£äëít
 ();

184 
nss_°©us
 
	tnss_£äëgª¡
 (c⁄° *, 
	t__√tgª¡
 *);

185 
nss_°©us
 
	tnss_£çrŸ€¡
 ();

186 
nss_°©us
 
	tnss_£çwít
 ();

187 
nss_°©us
 
	tnss_£åp˚¡
 ();

188 
nss_°©us
 
	tnss_£t£rvít
 ();

189 
nss_°©us
 
	tnss_£tsgít
 ();

190 
nss_°©us
 
	tnss_£t•ít
 ();

193 
	#NSS_DECLARE_MODULE_FUNCTIONS
(
moduÀ
) \

194 
nss_ídÆü£¡
 
_nss_
##
moduÀ
##
_ídÆü£¡
; \

195 
nss_ídëhîít
 
_nss_
##
moduÀ
##
_ídëhîít
; \

196 
nss_ídgª¡
 
_nss_
##
moduÀ
##
_ídgª¡
; \

197 
nss_ídho°ít
 
_nss_
##
moduÀ
##
_ídho°ít
; \

198 
nss_íd√ã¡
 
_nss_
##
moduÀ
##
_íd√ã¡
; \

199 
nss_íd√tgª¡
 
_nss_
##
moduÀ
##
_íd√tgª¡
; \

200 
nss_íd¥Ÿ€¡
 
_nss_
##
moduÀ
##
_íd¥Ÿ€¡
; \

201 
nss_ídpwít
 
_nss_
##
moduÀ
##
_ídpwít
; \

202 
nss_ídΩ˚¡
 
_nss_
##
moduÀ
##
_ídΩ˚¡
; \

203 
nss_íd£rvít
 
_nss_
##
moduÀ
##
_íd£rvít
; \

204 
nss_ídsgít
 
_nss_
##
moduÀ
##
_ídsgít
; \

205 
nss_íd•ít
 
_nss_
##
moduÀ
##
_íd•ít
; \

206 
nss_gëÆüsby«me_r
 
_nss_
##
moduÀ
##
_gëÆüsby«me_r
; \

207 
nss_gëÆü£¡_r
 
_nss_
##
moduÀ
##
_gëÆü£¡_r
; \

208 
nss_gëˇn⁄«me_r
 
_nss_
##
moduÀ
##
_gëˇn⁄«me_r
; \

209 
nss_gëëhîít_r
 
_nss_
##
moduÀ
##
_gëëhîít_r
; \

210 
nss_gëgª¡_r
 
_nss_
##
moduÀ
##
_gëgª¡_r
; \

211 
nss_gëgrgid_r
 
_nss_
##
moduÀ
##
_gëgrgid_r
; \

212 
nss_gëg∫am_r
 
_nss_
##
moduÀ
##
_gëg∫am_r
; \

213 
nss_gëho°byaddr2_r
 
_nss_
##
moduÀ
##
_gëho°byaddr2_r
; \

214 
nss_gëho°byaddr_r
 
_nss_
##
moduÀ
##
_gëho°byaddr_r
; \

215 
nss_gëho°by«me2_r
 
_nss_
##
moduÀ
##
_gëho°by«me2_r
; \

216 
nss_gëho°by«me3_r
 
_nss_
##
moduÀ
##
_gëho°by«me3_r
; \

217 
nss_gëho°by«me4_r
 
_nss_
##
moduÀ
##
_gëho°by«me4_r
; \

218 
nss_gëho°by«me_r
 
_nss_
##
moduÀ
##
_gëho°by«me_r
; \

219 
nss_gëho°ít_r
 
_nss_
##
moduÀ
##
_gëho°ít_r
; \

220 
nss_gëho°t⁄_r
 
_nss_
##
moduÀ
##
_gëho°t⁄_r
; \

221 
nss_gë√tbyaddr_r
 
_nss_
##
moduÀ
##
_gë√tbyaddr_r
; \

222 
nss_gë√tby«me_r
 
_nss_
##
moduÀ
##
_gë√tby«me_r
; \

223 
nss_gë√ã¡_r
 
_nss_
##
moduÀ
##
_gë√ã¡_r
; \

224 
nss_gë√tgª¡_r
 
_nss_
##
moduÀ
##
_gë√tgª¡_r
; \

225 
nss_gë¡oho°_r
 
_nss_
##
moduÀ
##
_gë¡oho°_r
; \

226 
nss_gë¥Ÿoby«me_r
 
_nss_
##
moduÀ
##
_gë¥Ÿoby«me_r
; \

227 
nss_gë¥Ÿobynumbî_r
 
_nss_
##
moduÀ
##
_gë¥Ÿobynumbî_r
; \

228 
nss_gë¥Ÿ€¡_r
 
_nss_
##
moduÀ
##
_gë¥Ÿ€¡_r
; \

229 
nss_gëpublickey
 
_nss_
##
moduÀ
##
_gëpublickey
; \

230 
nss_gëpwít_r
 
_nss_
##
moduÀ
##
_gëpwít_r
; \

231 
nss_gëpw«m_r
 
_nss_
##
moduÀ
##
_gëpw«m_r
; \

232 
nss_gëpwuid_r
 
_nss_
##
moduÀ
##
_gëpwuid_r
; \

233 
nss_gëΩcby«me_r
 
_nss_
##
moduÀ
##
_gëΩcby«me_r
; \

234 
nss_gëΩcbynumbî_r
 
_nss_
##
moduÀ
##
_gëΩcbynumbî_r
; \

235 
nss_gëΩ˚¡_r
 
_nss_
##
moduÀ
##
_gëΩ˚¡_r
; \

236 
nss_gë£¸ëkey
 
_nss_
##
moduÀ
##
_gë£¸ëkey
; \

237 
nss_gë£rvby«me_r
 
_nss_
##
moduÀ
##
_gë£rvby«me_r
; \

238 
nss_gë£rvbyp‹t_r
 
_nss_
##
moduÀ
##
_gë£rvbyp‹t_r
; \

239 
nss_gë£rvít_r
 
_nss_
##
moduÀ
##
_gë£rvít_r
; \

240 
nss_gësgít_r
 
_nss_
##
moduÀ
##
_gësgít_r
; \

241 
nss_gësg«m_r
 
_nss_
##
moduÀ
##
_gësg«m_r
; \

242 
nss_gë•ít_r
 
_nss_
##
moduÀ
##
_gë•ít_r
; \

243 
nss_gë•«m_r
 
_nss_
##
moduÀ
##
_gë•«m_r
; \

244 
nss_öô
 
_nss_
##
moduÀ
##
_öô
; \

245 
nss_öôgroups_dyn
 
_nss_
##
moduÀ
##
_öôgroups_dyn
; \

246 
nss_√äame2u£r
 
_nss_
##
moduÀ
##
_√äame2u£r
; \

247 
nss_£èlü£¡
 
_nss_
##
moduÀ
##
_£èlü£¡
; \

248 
nss_£ãthîít
 
_nss_
##
moduÀ
##
_£ãthîít
; \

249 
nss_£tgª¡
 
_nss_
##
moduÀ
##
_£tgª¡
; \

250 
nss_£tho°ít
 
_nss_
##
moduÀ
##
_£tho°ít
; \

251 
nss_£äëít
 
_nss_
##
moduÀ
##
_£äëít
; \

252 
nss_£äëgª¡
 
_nss_
##
moduÀ
##
_£äëgª¡
; \

253 
nss_£çrŸ€¡
 
_nss_
##
moduÀ
##
_£çrŸ€¡
; \

254 
nss_£çwít
 
_nss_
##
moduÀ
##
_£çwít
; \

255 
nss_£åp˚¡
 
_nss_
##
moduÀ
##
_£åp˚¡
; \

256 
nss_£t£rvít
 
_nss_
##
moduÀ
##
_£t£rvít
; \

257 
nss_£tsgít
 
_nss_
##
moduÀ
##
_£tsgít
; \

258 
nss_£t•ít
 
_nss_
##
moduÀ
##
_£t•ít
; \

259 

	)

260 
__END_DECLS


	@/usr/include/obstack.h

104 #i‚de‡
_OBSTACK_H


105 
	#_OBSTACK_H
 1

	)

112 #ifde‡
__PTRDIFF_TYPE__


113 
	#PTR_INT_TYPE
 
__PTRDIFF_TYPE__


	)

115 
	~<°ddef.h
>

116 
	#PTR_INT_TYPE
 
±rdiff_t


	)

123 
	#__BPTR_ALIGN
(
B
, 
P
, 
A
Ë((BË+ (((PË- (BË+ (A)Ë& ~(A)))

	)

132 
	#__PTR_ALIGN
(
B
, 
P
, 
A
) \

133 
	`__BPTR_ALIGN
 ( (
PTR_INT_TYPE
Ë<  (*Ë? (
B
) : (*) 0, \

134 
P
, 
A
)

	)

136 
	~<°rög.h
>

138 #i‚de‡
__©åibuã_puª__


139 
	#__©åibuã_puª__
 
_GL_ATTRIBUTE_PURE


	)

142 #ifde‡
__˝lu•lus


146 
	s_ob°ack_chunk


148 *
limô
;

149 
_ob°ack_chunk
 *
¥ev
;

150 
c⁄ã¡s
[4];

153 
	sob°ack


155 
chunk_size
;

156 
_ob°ack_chunk
 *
chunk
;

157 *
obje˘_ba£
;

158 *
√xt_‰ì
;

159 *
chunk_limô
;

162 
PTR_INT_TYPE
 
ãmpöt
;

163 *
ãmµå
;

164 } 
ãmp
;

165 
Æignmít_mask
;

169 
_ob°ack_chunk
 *(*
chunkfun
) (*, );

170 (*
‰ìfun
Ë(*, 
_ob°ack_chunk
 *);

171 *
exåa_¨g
;

172 
u£_exåa_¨g
 : 1;

173 
maybe_em±y_obje˘
 : 1;

177 
Æloc_Áûed
 : 1;

184 
_ob°ack_√wchunk
 (
ob°ack
 *, );

185 
_ob°ack_begö
 (
ob°ack
 *, , ,

187 
_ob°ack_begö_1
 (
ob°ack
 *, , ,

190 
_ob°ack_mem‹y_u£d
 (
ob°ack
 *Ë
__©åibuã_puª__
;

194 #i‚de‡
__ob°ack_‰ì


195 
	#__ob°ack_‰ì
 
ob°ack_‰ì


	)

197 
__ob°ack_‰ì
 (
ob°ack
 *, *);

204 (*
ob°ack_Æloc_Áûed_h™dÀr
) ();

207 
ob°ack_exô_Áûuª
;

213 
	#ob°ack_ba£
(
h
Ë((*Ë(h)->
obje˘_ba£
)

	)

217 
	#ob°ack_chunk_size
(
h
Ë((h)->
chunk_size
)

	)

221 
	#ob°ack_√xt_‰ì
(
h
Ë((h)->
√xt_‰ì
)

	)

225 
	#ob°ack_Æignmít_mask
(
h
Ë((h)->
Æignmít_mask
)

	)

228 
	#ob°ack_öô
(
h
) \

229 
	`_ob°ack_begö
 ((
h
), 0, 0, \

230 (*(*)())
ob°ack_chunk_Æloc
, \

231 ((*)(*))
ob°ack_chunk_‰ì
)

	)

233 
	#ob°ack_begö
(
h
, 
size
) \

234 
	`_ob°ack_begö
 ((
h
), (
size
), 0, \

235 (*(*)())
ob°ack_chunk_Æloc
, \

236 ((*)(*))
ob°ack_chunk_‰ì
)

	)

238 
	#ob°ack_•ecify_Æloˇti⁄
(
h
, 
size
, 
Æignmít
, 
chunkfun
, 
‰ìfun
) \

239 
	`_ob°ack_begö
 ((
h
), (
size
), (
Æignmít
), \

240 (*(*)())(
chunkfun
), \

241 ((*)(*))(
‰ìfun
))

	)

243 
	#ob°ack_•ecify_Æloˇti⁄_wôh_¨g
(
h
, 
size
, 
Æignmít
, 
chunkfun
, 
‰ìfun
, 
¨g
) \

244 
	`_ob°ack_begö_1
 ((
h
), (
size
), (
Æignmít
), \

245 (*(*)(*, ))(
chunkfun
), \

246 ((*)(*, *))(
‰ìfun
), (
¨g
))

	)

248 
	#ob°ack_chunkfun
(
h
, 
√wchunkfun
) \

249 ((
h
)->
chunkfun
 = (
_ob°ack_chunk
 *(*)(*, ))(
√wchunkfun
))

	)

251 
	#ob°ack_‰ìfun
(
h
, 
√w‰ìfun
) \

252 ((
h
)->
‰ìfun
 = ((*)(*, 
_ob°ack_chunk
 *))(
√w‰ìfun
))

	)

254 
	#ob°ack_1grow_Á°
(
h
, 
ach¨
Ë(*((h)->
√xt_‰ì
)++ = (ach¨))

	)

256 
	#ob°ack_bœnk_Á°
(
h
, 
n
Ë((h)->
√xt_‰ì
 +“))

	)

258 
	#ob°ack_mem‹y_u£d
(
h
Ë
	`_ob°ack_mem‹y_u£d
 (h)

	)

260 #i‡
deföed
 
__GNUC__


261 #i‡! (2 < 
__GNUC__
 + (8 <
__GNUC_MINOR__
))

262 
	#__exãnsi⁄__


	)

270 
	#ob°ack_obje˘_size
(
OBSTACK
) \

271 
__exãnsi⁄__
 \

272 ({ 
ob°ack
 c⁄° *
__o
 = (
OBSTACK
); \

273 (Ë(
__o
->
√xt_‰ì
 - __o->
obje˘_ba£
); })

	)

275 
	#ob°ack_room
(
OBSTACK
) \

276 
__exãnsi⁄__
 \

277 ({ 
ob°ack
 c⁄° *
__o
 = (
OBSTACK
); \

278 (Ë(
__o
->
chunk_limô
 - __o->
√xt_‰ì
); })

	)

280 
	#ob°ack_make_room
(
OBSTACK
, 
Àngth
) \

281 
__exãnsi⁄__
 \

282 ({ 
ob°ack
 *
__o
 = (
OBSTACK
); \

283 
__Àn
 = (
Àngth
); \

284 i‡(
__o
->
chunk_limô
 - __o->
√xt_‰ì
 < 
__Àn
) \

285 
	`_ob°ack_√wchunk
 (
__o
, 
__Àn
); \

286 (Ë0; })

	)

288 
	#ob°ack_em±y_p
(
OBSTACK
) \

289 
__exãnsi⁄__
 \

290 ({ 
ob°ack
 c⁄° *
__o
 = (
OBSTACK
); \

291 (
__o
->
chunk
->
¥ev
 == 0 \

292 && 
__o
->
√xt_‰ì
 =
	`__PTR_ALIGN
 ((*Ë__o->
chunk
, \

293 
__o
->
chunk
->
c⁄ã¡s
, \

294 
__o
->
Æignmít_mask
)); })

	)

296 
	#ob°ack_grow
(
OBSTACK
, 
whîe
, 
Àngth
) \

297 
__exãnsi⁄__
 \

298 ({ 
ob°ack
 *
__o
 = (
OBSTACK
); \

299 
__Àn
 = (
Àngth
); \

300 i‡(
__o
->
√xt_‰ì
 + 
__Àn
 > __o->
chunk_limô
) \

301 
	`_ob°ack_√wchunk
 (
__o
, 
__Àn
); \

302 
	`mem˝y
 (
__o
->
√xt_‰ì
, 
whîe
, 
__Àn
); \

303 
__o
->
√xt_‰ì
 +
__Àn
; \

304 (Ë0; })

	)

306 
	#ob°ack_grow0
(
OBSTACK
, 
whîe
, 
Àngth
) \

307 
__exãnsi⁄__
 \

308 ({ 
ob°ack
 *
__o
 = (
OBSTACK
); \

309 
__Àn
 = (
Àngth
); \

310 i‡(
__o
->
√xt_‰ì
 + 
__Àn
 + 1 > __o->
chunk_limô
) \

311 
	`_ob°ack_√wchunk
 (
__o
, 
__Àn
 + 1); \

312 
	`mem˝y
 (
__o
->
√xt_‰ì
, 
whîe
, 
__Àn
); \

313 
__o
->
√xt_‰ì
 +
__Àn
; \

314 *(
__o
->
√xt_‰ì
)++ = 0; \

315 (Ë0; })

	)

317 
	#ob°ack_1grow
(
OBSTACK
, 
d©um
) \

318 
__exãnsi⁄__
 \

319 ({ 
ob°ack
 *
__o
 = (
OBSTACK
); \

320 i‡(
__o
->
√xt_‰ì
 + 1 > __o->
chunk_limô
) \

321 
	`_ob°ack_√wchunk
 (
__o
, 1); \

322 
	`ob°ack_1grow_Á°
 (
__o
, 
d©um
); \

323 (Ë0; })

	)

329 
	#ob°ack_±r_grow
(
OBSTACK
, 
d©um
) \

330 
__exãnsi⁄__
 \

331 ({ 
ob°ack
 *
__o
 = (
OBSTACK
); \

332 i‡(
__o
->
√xt_‰ì
 +  (*Ë> __o->
chunk_limô
) \

333 
	`_ob°ack_√wchunk
 (
__o
,  (*)); \

334 
	`ob°ack_±r_grow_Á°
 (
__o
, 
d©um
); }) \

335 

	)

336 
	#ob°ack_öt_grow
(
OBSTACK
, 
d©um
) \

337 
__exãnsi⁄__
 \

338 ({ 
ob°ack
 *
__o
 = (
OBSTACK
); \

339 i‡(
__o
->
√xt_‰ì
 +  (Ë> __o->
chunk_limô
) \

340 
	`_ob°ack_√wchunk
 (
__o
,  ()); \

341 
	`ob°ack_öt_grow_Á°
 (
__o
, 
d©um
); })

	)

343 
	#ob°ack_±r_grow_Á°
(
OBSTACK
, 
≠å
) \

344 
__exãnsi⁄__
 \

345 ({ 
ob°ack
 *
__o1
 = (
OBSTACK
); \

346 *
__p1
 = 
__o1
->
√xt_‰ì
; \

347 *(c⁄° **Ë
__p1
 = (
≠å
); \

348 
__o1
->
√xt_‰ì
 +=  (const *); \

349 (Ë0; })

	)

351 
	#ob°ack_öt_grow_Á°
(
OBSTACK
, 
aöt
) \

352 
__exãnsi⁄__
 \

353 ({ 
ob°ack
 *
__o1
 = (
OBSTACK
); \

354 *
__p1
 = 
__o1
->
√xt_‰ì
; \

355 *(*Ë
__p1
 = (
aöt
); \

356 
__o1
->
√xt_‰ì
 +=  (); \

357 (Ë0; })

	)

359 
	#ob°ack_bœnk
(
OBSTACK
, 
Àngth
) \

360 
__exãnsi⁄__
 \

361 ({ 
ob°ack
 *
__o
 = (
OBSTACK
); \

362 
__Àn
 = (
Àngth
); \

363 i‡(
__o
->
chunk_limô
 - __o->
√xt_‰ì
 < 
__Àn
) \

364 
	`_ob°ack_√wchunk
 (
__o
, 
__Àn
); \

365 
	`ob°ack_bœnk_Á°
 (
__o
, 
__Àn
); \

366 (Ë0; })

	)

368 
	#ob°ack_Æloc
(
OBSTACK
, 
Àngth
) \

369 
__exãnsi⁄__
 \

370 ({ 
ob°ack
 *
__h
 = (
OBSTACK
); \

371 
	`ob°ack_bœnk
 (
__h
, (
Àngth
)); \

372 
	`ob°ack_föish
 (
__h
); })

	)

374 
	#ob°ack_c›y
(
OBSTACK
, 
whîe
, 
Àngth
) \

375 
__exãnsi⁄__
 \

376 ({ 
ob°ack
 *
__h
 = (
OBSTACK
); \

377 
	`ob°ack_grow
 (
__h
, (
whîe
), (
Àngth
)); \

378 
	`ob°ack_föish
 (
__h
); })

	)

380 
	#ob°ack_c›y0
(
OBSTACK
, 
whîe
, 
Àngth
) \

381 
__exãnsi⁄__
 \

382 ({ 
ob°ack
 *
__h
 = (
OBSTACK
); \

383 
	`ob°ack_grow0
 (
__h
, (
whîe
), (
Àngth
)); \

384 
	`ob°ack_föish
 (
__h
); })

	)

388 
	#ob°ack_föish
(
OBSTACK
) \

389 
__exãnsi⁄__
 \

390 ({ 
ob°ack
 *
__o1
 = (
OBSTACK
); \

391 *
__vÆue
 = (*Ë
__o1
->
obje˘_ba£
; \

392 i‡(
__o1
->
√xt_‰ì
 =
__vÆue
) \

393 
__o1
->
maybe_em±y_obje˘
 = 1; \

394 
__o1
->
√xt_‰ì
 \

395 
	`__PTR_ALIGN
 (
__o1
->
obje˘_ba£
, __o1->
√xt_‰ì
, \

396 
__o1
->
Æignmít_mask
); \

397 i‡(
__o1
->
√xt_‰ì
 - (*Ë__o1->
chunk
 \

398 > 
__o1
->
chunk_limô
 - (*Ë__o1->
chunk
) \

399 
__o1
->
√xt_‰ì
 = __o1->
chunk_limô
; \

400 
__o1
->
obje˘_ba£
 = __o1->
√xt_‰ì
; \

401 
__vÆue
; })

	)

403 
	#ob°ack_‰ì
(
OBSTACK
, 
OBJ
) \

404 
__exãnsi⁄__
 \

405 ({ 
ob°ack
 *
__o
 = (
OBSTACK
); \

406 *
__obj
 = (
OBJ
); \

407 i‡(
__obj
 > (*Ë
__o
->
chunk
 && __obj < (*Ë__o->
chunk_limô
) \

408 
__o
->
√xt_‰ì
 = __o->
obje˘_ba£
 = (*Ë
__obj
; \

409 (
__ob°ack_‰ì
Ë(
__o
, 
__obj
); })

	)

413 
	#ob°ack_obje˘_size
(
h
) \

414 (Ë((
h
)->
√xt_‰ì
 - (h)->
obje˘_ba£
)

	)

416 
	#ob°ack_room
(
h
) \

417 (Ë((
h
)->
chunk_limô
 - (h)->
√xt_‰ì
)

	)

419 
	#ob°ack_em±y_p
(
h
) \

420 ((
h
)->
chunk
->
¥ev
 == 0 \

421 && (
h
)->
√xt_‰ì
 =
	`__PTR_ALIGN
 ((*Ë(h)->
chunk
, \

422 (
h
)->
chunk
->
c⁄ã¡s
, \

423 (
h
)->
Æignmít_mask
))

	)

431 
	#ob°ack_make_room
(
h
, 
Àngth
) \

432 ((
h
)->
ãmp
.
ãmpöt
 = (
Àngth
), \

433 (((
h
)->
√xt_‰ì
 + (h)->
ãmp
.
ãmpöt
 > (h)->
chunk_limô
) \

434 ? (
	`_ob°ack_√wchunk
 ((
h
), (h)->
ãmp
.
ãmpöt
), 0Ë: 0))

	)

436 
	#ob°ack_grow
(
h
, 
whîe
, 
Àngth
) \

437 ((
h
)->
ãmp
.
ãmpöt
 = (
Àngth
), \

438 (((
h
)->
√xt_‰ì
 + (h)->
ãmp
.
ãmpöt
 > (h)->
chunk_limô
) \

439 ? (
	`_ob°ack_√wchunk
 ((
h
), (h)->
ãmp
.
ãmpöt
), 0) : 0), \

440 
	`mem˝y
 ((
h
)->
√xt_‰ì
, 
whîe
, (h)->
ãmp
.
ãmpöt
), \

441 (
h
)->
√xt_‰ì
 +(h)->
ãmp
.
ãmpöt
)

	)

443 
	#ob°ack_grow0
(
h
, 
whîe
, 
Àngth
) \

444 ((
h
)->
ãmp
.
ãmpöt
 = (
Àngth
), \

445 (((
h
)->
√xt_‰ì
 + (h)->
ãmp
.
ãmpöt
 + 1 > (h)->
chunk_limô
) \

446 ? (
	`_ob°ack_√wchunk
 ((
h
), (h)->
ãmp
.
ãmpöt
 + 1), 0) : 0), \

447 
	`mem˝y
 ((
h
)->
√xt_‰ì
, 
whîe
, (h)->
ãmp
.
ãmpöt
), \

448 (
h
)->
√xt_‰ì
 +(h)->
ãmp
.
ãmpöt
, \

449 *((
h
)->
√xt_‰ì
)++ = 0)

	)

451 
	#ob°ack_1grow
(
h
, 
d©um
) \

452 ((((
h
)->
√xt_‰ì
 + 1 > (h)->
chunk_limô
) \

453 ? (
	`_ob°ack_√wchunk
 ((
h
), 1), 0) : 0), \

454 
	`ob°ack_1grow_Á°
 (
h
, 
d©um
))

	)

456 
	#ob°ack_±r_grow
(
h
, 
d©um
) \

457 ((((
h
)->
√xt_‰ì
 +  (*Ë> (h)->
chunk_limô
) \

458 ? (
	`_ob°ack_√wchunk
 ((
h
),  (*)), 0) : 0), \

459 
	`ob°ack_±r_grow_Á°
 (
h
, 
d©um
))

	)

461 
	#ob°ack_öt_grow
(
h
, 
d©um
) \

462 ((((
h
)->
√xt_‰ì
 +  (Ë> (h)->
chunk_limô
) \

463 ? (
	`_ob°ack_√wchunk
 ((
h
),  ()), 0) : 0), \

464 
	`ob°ack_öt_grow_Á°
 (
h
, 
d©um
))

	)

466 
	#ob°ack_±r_grow_Á°
(
h
, 
≠å
) \

467 (((c⁄° **Ë((
h
)->
√xt_‰ì
 + (*)))[-1] = (
≠å
))

	)

469 
	#ob°ack_öt_grow_Á°
(
h
, 
aöt
) \

470 (((*Ë((
h
)->
√xt_‰ì
 + ()))[-1] = (
aöt
))

	)

472 
	#ob°ack_bœnk
(
h
, 
Àngth
) \

473 ((
h
)->
ãmp
.
ãmpöt
 = (
Àngth
), \

474 (((
h
)->
chunk_limô
 - (h)->
√xt_‰ì
 < (h)->
ãmp
.
ãmpöt
) \

475 ? (
	`_ob°ack_√wchunk
 ((
h
), (h)->
ãmp
.
ãmpöt
), 0) : 0), \

476 
	`ob°ack_bœnk_Á°
 (
h
, (h)->
ãmp
.
ãmpöt
))

	)

478 
	#ob°ack_Æloc
(
h
, 
Àngth
) \

479 (
	`ob°ack_bœnk
 ((
h
), (
Àngth
)), 
	`ob°ack_föish
 ((h)))

	)

481 
	#ob°ack_c›y
(
h
, 
whîe
, 
Àngth
) \

482 (
	`ob°ack_grow
 ((
h
), (
whîe
), (
Àngth
)), 
	`ob°ack_föish
 ((h)))

	)

484 
	#ob°ack_c›y0
(
h
, 
whîe
, 
Àngth
) \

485 (
	`ob°ack_grow0
 ((
h
), (
whîe
), (
Àngth
)), 
	`ob°ack_föish
 ((h)))

	)

487 
	#ob°ack_föish
(
h
) \

488 (((
h
)->
√xt_‰ì
 =(h)->
obje˘_ba£
 \

489 ? (((
h
)->
maybe_em±y_obje˘
 = 1), 0) \

491 (
h
)->
ãmp
.
ãmµå
 = (h)->
obje˘_ba£
, \

492 (
h
)->
√xt_‰ì
 \

493 
	`__PTR_ALIGN
 ((
h
)->
obje˘_ba£
, (h)->
√xt_‰ì
, \

494 (
h
)->
Æignmít_mask
), \

495 (((
h
)->
√xt_‰ì
 - (*Ë(h)->
chunk
 \

496 > (
h
)->
chunk_limô
 - (*Ë(h)->
chunk
) \

497 ? ((
h
)->
√xt_‰ì
 = (h)->
chunk_limô
) : 0), \

498 (
h
)->
obje˘_ba£
 = (h)->
√xt_‰ì
, \

499 (
h
)->
ãmp
.
ãmµå
)

	)

501 
	#ob°ack_‰ì
(
h
, 
obj
) \

502 ((
h
)->
ãmp
.
ãmpöt
 = (*Ë(
obj
Ë- (*Ë(h)->
chunk
, \

503 ((((
h
)->
ãmp
.
ãmpöt
 > 0 \

504 && (
h
)->
ãmp
.
ãmpöt
 < (h)->
chunk_limô
 - (*Ë(h)->
chunk
)) \

505 ? (Ë((
h
)->
√xt_‰ì
 = (h)->
obje˘_ba£
 \

506 (
h
)->
ãmp
.
ãmpöt
 + (*Ë(h)->
chunk
) \

507 : (
__ob°ack_‰ì
Ë(
h
, (h)->
ãmp
.
ãmpöt
 + (*Ë(h)->
chunk
)))

	)

511 #ifde‡
__˝lu•lus


	@/usr/include/panel.h

40 #i‚de‡
NCURSES_PANEL_H_ö˛


41 
	#NCURSES_PANEL_H_ö˛
 1

	)

43 
	~<cur£s.h
>

45 
	g∑√l


46 #i‡!
	tNCURSES_OPAQUE_PANEL


48 
WINDOW
 *
	gwö
;

49 
∑√l
 *
	gbñow
;

50 
∑√l
 *
	gabove
;

51 
NCURSES_CONST
 *
	gu£r
;

54 
	tPANEL
;

56 #if 
deföed
(
__˝lu•lus
)

60 #i‡
deföed
(
BUILDING_PANEL
)

61 
	#PANEL_IMPEXP
 
NCURSES_EXPORT_GENERAL_EXPORT


	)

63 
	#PANEL_IMPEXP
 
NCURSES_EXPORT_GENERAL_IMPORT


	)

66 
	#PANEL_WRAPPED_VAR
(
ty≥
,
«me
Ë
PANEL_IMPEXP
Åy≥ 
	`NCURSES_PUBLIC_VAR
“ame)()

	)

68 
	#PANEL_EXPORT
(
ty≥
Ë
PANEL_IMPEXP
Åy≥ 
NCURSES_API


	)

69 
	#PANEL_EXPORT_VAR
(
ty≥
Ë
PANEL_IMPEXP
 
	)
type

71 
PANEL_EXPORT
(
WINDOW
*Ë
∑√l_wödow
 (c⁄° 
PANEL
 *);

72 
PANEL_EXPORT
(Ë
upd©e_∑√ls
 ();

73 
PANEL_EXPORT
(Ë
hide_∑√l
 (
PANEL
 *);

74 
PANEL_EXPORT
(Ë
show_∑√l
 (
PANEL
 *);

75 
PANEL_EXPORT
(Ë
dñ_∑√l
 (
PANEL
 *);

76 
PANEL_EXPORT
(Ë
t›_∑√l
 (
PANEL
 *);

77 
PANEL_EXPORT
(Ë
bŸtom_∑√l
 (
PANEL
 *);

78 
PANEL_EXPORT
(
PANEL
*Ë
√w_∑√l
 (
WINDOW
 *);

79 
PANEL_EXPORT
(
PANEL
*Ë
∑√l_above
 (const PANEL *);

80 
PANEL_EXPORT
(
PANEL
*Ë
∑√l_bñow
 (const PANEL *);

81 
PANEL_EXPORT
(Ë
£t_∑√l_u£Ωå
 (
PANEL
 *, 
NCURSES_CONST
 *);

82 
PANEL_EXPORT
(
NCURSES_CONST
 *Ë
∑√l_u£Ωå
 (c⁄° 
PANEL
 *);

83 
PANEL_EXPORT
(Ë
move_∑√l
 (
PANEL
 *, , );

84 
PANEL_EXPORT
(Ë
ª∂a˚_∑√l
 (
PANEL
 *,
WINDOW
 *);

85 
PANEL_EXPORT
(Ë
∑√l_hiddí
 (c⁄° 
PANEL
 *);

87 #i‡
NCURSES_SP_FUNCS


88 
PANEL_EXPORT
(
PANEL
 *Ë
ground_∑√l
(
SCREEN
 *);

89 
PANEL_EXPORT
(
PANEL
 *Ë
˚ûög_∑√l
(
SCREEN
 *);

91 
PANEL_EXPORT
(Ë
NCURSES_SP_NAME
(
upd©e_∑√ls
Ë(
SCREEN
*);

94 #if 
deföed
(
__˝lu•lus
)

	@/usr/include/paths.h

32 #i‚de‡
_PATHS_H_


33 
	#_PATHS_H_


	)

36 
	#_PATH_DEFPATH
 "/u§/bö:/bö"

	)

38 
	#_PATH_STDPATH
 \

39 "/u§/bö:/bö:/u§/sbö:/sbö"

	)

41 
	#_PATH_BSHELL
 "/bö/sh"

	)

42 
	#_PATH_CONSOLE
 "/dev/c⁄sﬁe"

	)

43 
	#_PATH_CSHELL
 "/bö/csh"

	)

44 
	#_PATH_DEVDB
 "/v¨/run/dev.db"

	)

45 
	#_PATH_DEVNULL
 "/dev/nuŒ"

	)

46 
	#_PATH_DRUM
 "/dev/drum"

	)

47 
	#_PATH_GSHADOW
 "/ëc/gshadow"

	)

48 
	#_PATH_KLOG
 "/¥oc/kmsg"

	)

49 
	#_PATH_KMEM
 "/dev/kmem"

	)

50 
	#_PATH_LASTLOG
 "/v¨/log/œ°log"

	)

51 
	#_PATH_MAILDIR
 "/v¨/maû"

	)

52 
	#_PATH_MAN
 "/u§/sh¨e/m™"

	)

53 
	#_PATH_MEM
 "/dev/mem"

	)

54 
	#_PATH_MNTTAB
 "/ëc/f°ab"

	)

55 
	#_PATH_MOUNTED
 "/ëc/mèb"

	)

56 
	#_PATH_NOLOGIN
 "/ëc/nﬁogö"

	)

57 
	#_PATH_PRESERVE
 "/v¨/lib"

	)

58 
	#_PATH_RWHODIR
 "/v¨/•oﬁ/rwho"

	)

59 
	#_PATH_SENDMAIL
 "/u§/sbö/£ndmaû"

	)

60 
	#_PATH_SHADOW
 "/ëc/shadow"

	)

61 
	#_PATH_SHELLS
 "/ëc/shñls"

	)

62 
	#_PATH_TTY
 "/dev/ây"

	)

63 
	#_PATH_UNIX
 "/boŸ/vmlöux"

	)

64 
	#_PATH_UTMP
 "/v¨/run/utmp"

	)

65 
	#_PATH_VI
 "/u§/bö/vi"

	)

66 
	#_PATH_WTMP
 "/v¨/log/wtmp"

	)

69 
	#_PATH_DEV
 "/dev/"

	)

70 
	#_PATH_TMP
 "/tmp/"

	)

71 
	#_PATH_VARDB
 "/v¨/lib/misc/"

	)

72 
	#_PATH_VARRUN
 "/v¨/run/"

	)

73 
	#_PATH_VARTMP
 "/v¨/tmp/"

	)

	@/usr/include/poll.h

1 
	~<sys/pﬁl.h
>

	@/usr/include/printf.h

18 #i‚def 
_PRINTF_H


20 
	#_PRINTF_H
 1

	)

21 
	~<„©uªs.h
>

23 
	g__BEGIN_DECLS


25 
	~<bôs/ty≥s/FILE.h
>

27 
	#__√ed_size_t


	)

28 
	#__√ed_wch¨_t


	)

29 
	~<°ddef.h
>

31 
	~<°d¨g.h
>

34 
	s¥ötf_öfo


36 
	m¥ec
;

37 
	mwidth
;

38 
wch¨_t
 
	m•ec
;

39 
	mis_l⁄g_doubÀ
:1;

40 
	mis_sh‹t
:1;

41 
	mis_l⁄g
:1;

42 
	mÆt
:1;

43 
	m•a˚
:1;

44 
	mÀ·
:1;

45 
	mshowsign
:1;

46 
	mgroup
:1;

47 
	mexåa
:1;

48 
	mis_ch¨
:1;

49 
	mwide
:1;

50 
	mi18n
:1;

51 
	mis_bö¨y128
:1;

53 
	m__∑d
:3;

54 
	mu£r
;

55 
wch¨_t
 
	m∑d
;

69 
	t¥ötf_fun˘i⁄
 (
	tFILE
 *
	t__°ªam
,

70 c⁄° 
	t¥ötf_öfo
 *
	t__öfo
,

71 c⁄° *c⁄° *
	t__¨gs
);

81 
	t¥ötf_¨göfo_size_fun˘i⁄
 (c⁄° 
	t¥ötf_öfo
 *
	t__öfo
,

82 
	tsize_t
 
	t__n
, *
	t__¨gty≥s
,

83 *
	t__size
);

87 
	t¥ötf_¨göfo_fun˘i⁄
 (c⁄° 
	t¥ötf_öfo
 *
	t__öfo
,

88 
	tsize_t
 
	t__n
, *
	t__¨gty≥s
);

92 
	t¥ötf_va_¨g_fun˘i⁄
 (*
	t__mem
, 
	tva_li°
 *
	t__≠
);

99 
	$ªgi°î_¥ötf_•ecifõr
 (
__•ec
, 
¥ötf_fun˘i⁄
 
__func
,

100 
¥ötf_¨göfo_size_fun˘i⁄
 
__¨göfo
)

101 
__THROW
;

108 
	$ªgi°î_¥ötf_fun˘i⁄
 (
__•ec
, 
¥ötf_fun˘i⁄
 
__func
,

109 
¥ötf_¨göfo_fun˘i⁄
 
__¨göfo
)

110 
__THROW
 
__©åibuã_dïªˇãd__
;

117 
	$ªgi°î_¥ötf_modifõr
 (c⁄° 
wch¨_t
 *
__°r
Ë
__THROW
 
__wur
;

123 
	$ªgi°î_¥ötf_ty≥
 (
¥ötf_va_¨g_fun˘i⁄
 
__f˘
Ë
__THROW
 
__wur
;

137 
size_t
 
	$∑r£_¥ötf_f‹m©
 (c⁄° *
__ª°ri˘
 
__fmt
, 
size_t
 
__n
,

138 *
__ª°ri˘
 
__¨gty≥s
Ë
__THROW
;

149 
PA_INT
,

150 
PA_CHAR
,

151 
PA_WCHAR
,

152 
PA_STRING
,

153 
PA_WSTRING
,

154 
PA_POINTER
,

155 
PA_FLOAT
,

156 
PA_DOUBLE
,

157 
PA_LAST


161 
	#PA_FLAG_MASK
 0xff00

	)

162 
	#PA_FLAG_LONG_LONG
 (1 << 8)

	)

163 
	#PA_FLAG_LONG_DOUBLE
 
PA_FLAG_LONG_LONG


	)

164 
	#PA_FLAG_LONG
 (1 << 9)

	)

165 
	#PA_FLAG_SHORT
 (1 << 10)

	)

166 
	#PA_FLAG_PTR
 (1 << 11)

	)

176 
	$¥ötf_size
 (
FILE
 *
__ª°ri˘
 
__Â
,

177 c⁄° 
¥ötf_öfo
 *
__öfo
,

178 c⁄° *c⁄° *
__ª°ri˘
 
__¨gs
Ë
__THROW
;

181 
	$¥ötf_size_öfo
 (c⁄° 
¥ötf_öfo
 *
__ª°ri˘


182 
__öfo
, 
size_t
 
__n
, *
__ª°ri˘
 
__¨gty≥s
)

183 
__THROW
;

185 
	~<bôs/Êﬂä.h
>

186 #i‡
deföed
 
__LDBL_COMPAT
 || 
__LDOUBLE_REDIRECTS_TO_FLOAT128_ABI
 == 1

187 
	~<bôs/¥ötf-ldbl.h
>

190 
__END_DECLS


	@/usr/include/proc_service.h

19 #i‚de‡
_PROC_SERVICE_H


20 
	#_PROC_SERVICE_H
 1

	)

23 
	~<sys/¥ocfs.h
>

25 
__BEGIN_DECLS


30 
	mPS_OK
,

31 
	mPS_ERR
,

32 
	mPS_BADPID
,

33 
	mPS_BADLID
,

34 
	mPS_BADADDR
,

35 
	mPS_NOSYM
,

36 
	mPS_NOFREGS


37 } 
	tps_îr_e
;

42 
	gps_¥och™dÀ
;

46 
ps_îr_e
 
ps_pdªad
 (
ps_¥och™dÀ
 *,

47 
pßddr_t
, *, 
size_t
);

48 
ps_îr_e
 
ps_pdwrôe
 (
ps_¥och™dÀ
 *,

49 
pßddr_t
, c⁄° *, 
size_t
);

50 
ps_îr_e
 
ps_±ªad
 (
ps_¥och™dÀ
 *,

51 
pßddr_t
, *, 
size_t
);

52 
ps_îr_e
 
ps_±wrôe
 (
ps_¥och™dÀ
 *,

53 
pßddr_t
, c⁄° *, 
size_t
);

57 
ps_îr_e
 
ps_lgëªgs
 (
ps_¥och™dÀ
 *,

58 
lwpid_t
, 
¥gªg£t_t
);

59 
ps_îr_e
 
ps_l£åegs
 (
ps_¥och™dÀ
 *,

60 
lwpid_t
, c⁄° 
¥gªg£t_t
);

61 
ps_îr_e
 
ps_lgëÂªgs
 (
ps_¥och™dÀ
 *,

62 
lwpid_t
, 
¥Âªg£t_t
 *);

63 
ps_îr_e
 
ps_l£tÂªgs
 (
ps_¥och™dÀ
 *,

64 
lwpid_t
, c⁄° 
¥Âªg£t_t
 *);

67 
pid_t
 
ps_gëpid
 (
ps_¥och™dÀ
 *);

72 
ps_îr_e
 
ps_gë_thªad_¨ó
 (
ps_¥och™dÀ
 *,

73 
lwpid_t
, , 
pßddr_t
 *);

79 
ps_îr_e
 
ps_pglobÆ_lookup
 (
ps_¥och™dÀ
 *,

80 c⁄° *
obje˘_«me
,

81 c⁄° *
sym_«me
,

82 
pßddr_t
 *
sym_addr
);

86 
ps_îr_e
 
ps_p°›
 (
ps_¥och™dÀ
 *);

87 
ps_îr_e
 
ps_pc⁄töue
 (
ps_¥och™dÀ
 *);

90 
ps_îr_e
 
ps_l°›
 (
ps_¥och™dÀ
 *, 
lwpid_t
);

91 
ps_îr_e
 
ps_lc⁄töue
 (
ps_¥och™dÀ
 *, 
lwpid_t
);

93 
	g__END_DECLS


	@/usr/include/pthread.h

18 #i‚de‡
_PTHREAD_H


19 
	#_PTHREAD_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<sched.h
>

23 
	~<time.h
>

25 
	~<bôs/ídün.h
>

26 
	~<bôs/±hªadty≥s.h
>

27 
	~<bôs/£tjmp.h
>

28 
	~<bôs/w‹dsize.h
>

29 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

30 
	~<bôs/ty≥s/__sig£t_t.h
>

31 
	~<bôs/ty≥s/°ru˘___jmp_buf_èg.h
>

32 #ifde‡
__USE_MISC


33 
	~<bôs/±hªad_°ack_mö-dy«mic.h
>

39 
	mPTHREAD_CREATE_JOINABLE
,

40 
	#PTHREAD_CREATE_JOINABLE
 
PTHREAD_CREATE_JOINABLE


	)

41 
	mPTHREAD_CREATE_DETACHED


42 
	#PTHREAD_CREATE_DETACHED
 
PTHREAD_CREATE_DETACHED


	)

49 
	mPTHREAD_MUTEX_TIMED_NP
,

50 
	mPTHREAD_MUTEX_RECURSIVE_NP
,

51 
	mPTHREAD_MUTEX_ERRORCHECK_NP
,

52 
	mPTHREAD_MUTEX_ADAPTIVE_NP


53 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


55 
	mPTHREAD_MUTEX_NORMAL
 = 
PTHREAD_MUTEX_TIMED_NP
,

56 
	mPTHREAD_MUTEX_RECURSIVE
 = 
PTHREAD_MUTEX_RECURSIVE_NP
,

57 
	mPTHREAD_MUTEX_ERRORCHECK
 = 
PTHREAD_MUTEX_ERRORCHECK_NP
,

58 
	mPTHREAD_MUTEX_DEFAULT
 = 
PTHREAD_MUTEX_NORMAL


60 #ifde‡
__USE_GNU


62 , 
	mPTHREAD_MUTEX_FAST_NP
 = 
PTHREAD_MUTEX_TIMED_NP


67 #ifde‡
__USE_XOPEN2K


71 
	mPTHREAD_MUTEX_STALLED
,

72 
	mPTHREAD_MUTEX_STALLED_NP
 = 
PTHREAD_MUTEX_STALLED
,

73 
	mPTHREAD_MUTEX_ROBUST
,

74 
	mPTHREAD_MUTEX_ROBUST_NP
 = 
PTHREAD_MUTEX_ROBUST


79 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


83 
	mPTHREAD_PRIO_NONE
,

84 
	mPTHREAD_PRIO_INHERIT
,

85 
	mPTHREAD_PRIO_PROTECT


90 
	#PTHREAD_MUTEX_INITIALIZER
 \

91 { { 
	`__PTHREAD_MUTEX_INITIALIZER
 (
PTHREAD_MUTEX_TIMED_NP
Ë} }

	)

92 #ifde‡
__USE_GNU


93 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

94 { { 
	`__PTHREAD_MUTEX_INITIALIZER
 (
PTHREAD_MUTEX_RECURSIVE_NP
Ë} }

	)

95 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

96 { { 
	`__PTHREAD_MUTEX_INITIALIZER
 (
PTHREAD_MUTEX_ERRORCHECK_NP
Ë} }

	)

97 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

98 { { 
	`__PTHREAD_MUTEX_INITIALIZER
 (
PTHREAD_MUTEX_ADAPTIVE_NP
Ë} }

	)

103 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


106 
	mPTHREAD_RWLOCK_PREFER_READER_NP
,

107 
	mPTHREAD_RWLOCK_PREFER_WRITER_NP
,

108 
	mPTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,

109 
	mPTHREAD_RWLOCK_DEFAULT_NP
 = 
PTHREAD_RWLOCK_PREFER_READER_NP


114 
	#PTHREAD_RWLOCK_INITIALIZER
 \

115 { { 
	`__PTHREAD_RWLOCK_INITIALIZER
 (
PTHREAD_RWLOCK_DEFAULT_NP
Ë} }

	)

116 #ifde‡
__USE_GNU


117 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

118 { { 
	`__PTHREAD_RWLOCK_INITIALIZER
 (
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
Ë} }

	)

126 
	mPTHREAD_INHERIT_SCHED
,

127 
	#PTHREAD_INHERIT_SCHED
 
PTHREAD_INHERIT_SCHED


	)

128 
	mPTHREAD_EXPLICIT_SCHED


129 
	#PTHREAD_EXPLICIT_SCHED
 
PTHREAD_EXPLICIT_SCHED


	)

136 
	mPTHREAD_SCOPE_SYSTEM
,

137 
	#PTHREAD_SCOPE_SYSTEM
 
PTHREAD_SCOPE_SYSTEM


	)

138 
	mPTHREAD_SCOPE_PROCESS


139 
	#PTHREAD_SCOPE_PROCESS
 
PTHREAD_SCOPE_PROCESS


	)

146 
	mPTHREAD_PROCESS_PRIVATE
,

147 
	#PTHREAD_PROCESS_PRIVATE
 
PTHREAD_PROCESS_PRIVATE


	)

148 
	mPTHREAD_PROCESS_SHARED


149 
	#PTHREAD_PROCESS_SHARED
 
PTHREAD_PROCESS_SHARED


	)

155 
	#PTHREAD_COND_INITIALIZER
 { { {0}, {0}, {0, 0}, {0, 0}, 0, 0, {0, 0} } }

	)

159 
	s_±hªad_˛ónup_buf„r


161 (*
	m__routöe
) (*);

162 *
	m__¨g
;

163 
	m__ˇn˚…y≥
;

164 
_±hªad_˛ónup_buf„r
 *
	m__¥ev
;

170 
	mPTHREAD_CANCEL_ENABLE
,

171 
	#PTHREAD_CANCEL_ENABLE
 
PTHREAD_CANCEL_ENABLE


	)

172 
	mPTHREAD_CANCEL_DISABLE


173 
	#PTHREAD_CANCEL_DISABLE
 
PTHREAD_CANCEL_DISABLE


	)

177 
	mPTHREAD_CANCEL_DEFERRED
,

178 
	#PTHREAD_CANCEL_DEFERRED
 
PTHREAD_CANCEL_DEFERRED


	)

179 
	mPTHREAD_CANCEL_ASYNCHRONOUS


180 
	#PTHREAD_CANCEL_ASYNCHRONOUS
 
PTHREAD_CANCEL_ASYNCHRONOUS


	)

182 
	#PTHREAD_CANCELED
 ((*Ë-1)

	)

186 
	#PTHREAD_ONCE_INIT
 0

	)

189 #ifde‡
__USE_XOPEN2K


193 
	#PTHREAD_BARRIER_SERIAL_THREAD
 -1

	)

197 
__BEGIN_DECLS


202 
	$±hªad_¸óã
 (
±hªad_t
 *
__ª°ri˘
 
__√wthªad
,

203 c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

204 *(*
__°¨t_routöe
) (*),

205 *
__ª°ri˘
 
__¨g
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 3));

211 
	$±hªad_exô
 (*
__ªtvÆ
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

219 
	`±hªad_joö
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
);

221 #ifde‡
__USE_GNU


224 
	$±hªad_åyjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
Ë
__THROW
;

226 #i‚de‡
__USE_TIME_BITS64


233 
	`±hªad_timedjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
,

234 c⁄° 
time•ec
 *
__ab°ime
);

243 
	`±hªad_˛ockjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
,

244 
˛ockid_t
 
__˛ockid
,

245 c⁄° 
time•ec
 *
__ab°ime
);

247 #ifde‡
__REDIRECT


248 
	`__REDIRECT
 (
±hªad_timedjoö_≈
,

249 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
,

250 c⁄° 
time•ec
 *
__ab°ime
),

251 
__±hªad_timedjoö_≈64
);

253 
	`__REDIRECT
 (
±hªad_˛ockjoö_≈
,

254 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
,

255 
˛ockid_t
 
__˛ockid
,

256 c⁄° 
time•ec
 *
__ab°ime
),

257 
__±hªad_˛ockjoö_≈64
);

259 
	#±hªad_timedjoö_≈
 
__±hªad_timedjoö_≈64


	)

260 
	#±hªad_˛ockjoö_≈
 
__±hªad_˛ockjoö_≈64


	)

269 
	$±hªad_dëach
 (
±hªad_t
 
__th
Ë
__THROW
;

273 
±hªad_t
 
	$±hªad_£lf
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

276 
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
)

277 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

285 
	$±hªad_©å_öô
 (
±hªad_©å_t
 *
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

288 
	$±hªad_©å_de°roy
 (
±hªad_©å_t
 *
__©å
)

289 
__THROW
 
	`__n⁄nuŒ
 ((1));

292 
	$±hªad_©å_gëdëach°©e
 (c⁄° 
±hªad_©å_t
 *
__©å
,

293 *
__dëach°©e
)

294 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

297 
	$±hªad_©å_£tdëach°©e
 (
±hªad_©å_t
 *
__©å
,

298 
__dëach°©e
)

299 
__THROW
 
	`__n⁄nuŒ
 ((1));

303 
	$±hªad_©å_gëgu¨dsize
 (c⁄° 
±hªad_©å_t
 *
__©å
,

304 
size_t
 *
__gu¨dsize
)

305 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

308 
	$±hªad_©å_£tgu¨dsize
 (
±hªad_©å_t
 *
__©å
,

309 
size_t
 
__gu¨dsize
)

310 
__THROW
 
	`__n⁄nuŒ
 ((1));

314 
	$±hªad_©å_gësched∑øm
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

315 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

316 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

319 
	$±hªad_©å_£tsched∑øm
 (
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

320 c⁄° 
sched_∑øm
 *
__ª°ri˘


321 
__∑øm
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

324 
	$±hªad_©å_gëschedpﬁicy
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


325 
__©å
, *
__ª°ri˘
 
__pﬁicy
)

326 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

329 
	$±hªad_©å_£tschedpﬁicy
 (
±hªad_©å_t
 *
__©å
, 
__pﬁicy
)

330 
__THROW
 
	`__n⁄nuŒ
 ((1));

333 
	$±hªad_©å_gëöhîôsched
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


334 
__©å
, *
__ª°ri˘
 
__öhîô
)

335 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

338 
	$±hªad_©å_£töhîôsched
 (
±hªad_©å_t
 *
__©å
,

339 
__öhîô
)

340 
__THROW
 
	`__n⁄nuŒ
 ((1));

344 
	$±hªad_©å_gësc›e
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

345 *
__ª°ri˘
 
__sc›e
)

346 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

349 
	$±hªad_©å_£tsc›e
 (
±hªad_©å_t
 *
__©å
, 
__sc›e
)

350 
__THROW
 
	`__n⁄nuŒ
 ((1));

353 
	$±hªad_©å_gë°ackaddr
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


354 
__©å
, **
__ª°ri˘
 
__°ackaddr
)

355 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__©åibuã_dïªˇãd__
;

361 
	$±hªad_©å_£t°ackaddr
 (
±hªad_©å_t
 *
__©å
,

362 *
__°ackaddr
)

363 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
;

366 
	$±hªad_©å_gë°acksize
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


367 
__©å
, 
size_t
 *
__ª°ri˘
 
__°acksize
)

368 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

373 
	$±hªad_©å_£t°acksize
 (
±hªad_©å_t
 *
__©å
,

374 
size_t
 
__°acksize
)

375 
__THROW
 
	`__n⁄nuŒ
 ((1));

377 #ifde‡
__USE_XOPEN2K


379 
	$±hªad_©å_gë°ack
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

380 **
__ª°ri˘
 
__°ackaddr
,

381 
size_t
 *
__ª°ri˘
 
__°acksize
)

382 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

387 
	$±hªad_©å_£t°ack
 (
±hªad_©å_t
 *
__©å
, *
__°ackaddr
,

388 
size_t
 
__°acksize
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

391 #ifde‡
__USE_GNU


394 
	$±hªad_©å_£èfföôy_≈
 (
±hªad_©å_t
 *
__©å
,

395 
size_t
 
__˝u£tsize
,

396 c⁄° 
˝u_£t_t
 *
__˝u£t
)

397 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

401 
	$±hªad_©å_gëafföôy_≈
 (c⁄° 
±hªad_©å_t
 *
__©å
,

402 
size_t
 
__˝u£tsize
,

403 
˝u_£t_t
 *
__˝u£t
)

404 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

407 
	$±hªad_gë©å_deÁu…_≈
 (
±hªad_©å_t
 *
__©å
)

408 
__THROW
 
	`__n⁄nuŒ
 ((1));

411 
	`±hªad_©å_£tsigmask_≈
 (
±hªad_©å_t
 *
__©å
,

412 c⁄° 
__sig£t_t
 *
sigmask
);

417 
	`±hªad_©å_gësigmask_≈
 (c⁄° 
±hªad_©å_t
 *
__©å
,

418 
__sig£t_t
 *
sigmask
);

422 
	#PTHREAD_ATTR_NO_SIGMASK_NP
 (-1)

	)

426 
	$±hªad_£èâr_deÁu…_≈
 (c⁄° 
±hªad_©å_t
 *
__©å
)

427 
__THROW
 
	`__n⁄nuŒ
 ((1));

432 
	$±hªad_gë©å_≈
 (
±hªad_t
 
__th
, 
±hªad_©å_t
 *
__©å
)

433 
__THROW
 
	`__n⁄nuŒ
 ((2));

441 
	$±hªad_£tsched∑øm
 (
±hªad_t
 
__èrgë_thªad
, 
__pﬁicy
,

442 c⁄° 
sched_∑øm
 *
__∑øm
)

443 
__THROW
 
	`__n⁄nuŒ
 ((3));

446 
	$±hªad_gësched∑øm
 (
±hªad_t
 
__èrgë_thªad
,

447 *
__ª°ri˘
 
__pﬁicy
,

448 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

449 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

452 
	$±hªad_£tsched¥io
 (
±hªad_t
 
__èrgë_thªad
, 
__¥io
)

453 
__THROW
;

456 #ifde‡
__USE_GNU


458 
	$±hªad_gë«me_≈
 (
±hªad_t
 
__èrgë_thªad
, *
__buf
,

459 
size_t
 
__buÊí
)

460 
__THROW
 
	`__n⁄nuŒ
 ((2));

463 
	$±hªad_£äame_≈
 (
±hªad_t
 
__èrgë_thªad
, c⁄° *
__«me
)

464 
__THROW
 
	`__n⁄nuŒ
 ((2));

468 #ifde‡
__USE_UNIX98


470 
	$±hªad_gëc⁄cuºícy
 (Ë
__THROW
;

473 
	$±hªad_£tc⁄cuºícy
 (
__Àvñ
Ë
__THROW
;

476 #ifde‡
__USE_GNU


477 
	$±hªad_yõld
 (Ë
__THROW
;

478 #ifde‡
__REDIRECT_NTH


479 
	`__REDIRECT_NTH
 (
±hªad_yõld
, (), 
sched_yõld
)

480 
	`__©åibuã_dïªˇãd_msg__
 ("\
_yield is deprecated, use sched_yield instead");

483 
	#±hªad_yõld
 
sched_yõld


	)

489 
	$±hªad_£èfföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

490 c⁄° 
˝u_£t_t
 *
__˝u£t
)

491 
__THROW
 
	`__n⁄nuŒ
 ((3));

494 
	$±hªad_gëafföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

495 
˝u_£t_t
 *
__˝u£t
)

496 
__THROW
 
	`__n⁄nuŒ
 ((3));

509 
	$±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

510 (*
__öô_routöe
Ë()Ë
	`__n⁄nuŒ
 ((1, 2));

521 
	`±hªad_£tˇn˚l°©e
 (
__°©e
, *
__ﬁd°©e
);

525 
	`±hªad_£tˇn˚…y≥
 (
__ty≥
, *
__ﬁdty≥
);

528 
	`±hªad_ˇn˚l
 (
±hªad_t
 
__th
);

533 
	`±hªad_ã°ˇn˚l
 ();

538 
	s__ˇn˚l_jmp_buf_èg


540 
__jmp_buf
 
__ˇn˚l_jmp_buf
;

541 
__mask_was_ßved
;

546 
__ˇn˚l_jmp_buf_èg
 
__ˇn˚l_jmp_buf
[1];

547 *
__∑d
[4];

548 } 
	t__±hªad_unwöd_buf_t
 
	t__©åibuã__
 ((
	t__Æig√d__
));

551 #i‚de‡
__˛ónup_f˘_©åibuã


552 
	#__˛ónup_f˘_©åibuã


	)

557 
	s__±hªad_˛ónup_‰ame


559 (*
__ˇn˚l_routöe
) (*);

560 *
__ˇn˚l_¨g
;

561 
__do_ô
;

562 
__ˇn˚l_ty≥
;

565 #i‡
deföed
 
__GNUC__
 && deföed 
__EXCEPTIONS


566 #ifde‡
__˝lu•lus


568 ˛as†
	c__±hªad_˛ónup_˛ass


570 (*
__ˇn˚l_routöe
) (*);

571 *
__ˇn˚l_¨g
;

572 
__do_ô
;

573 
__ˇn˚l_ty≥
;

575 
public
:

576 
	$__±hªad_˛ónup_˛ass
 ((*
__f˘
Ë(*), *
__¨g
)

577 : 
	`__ˇn˚l_routöe
 (
__f˘
), 
	`__ˇn˚l_¨g
 (
__¨g
), 
	$__do_ô
 (1) { }

578 ~
	$__±hªad_˛ónup_˛ass
 (Ë{ i‡(
__do_ô
Ë
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); 
	}
}

579 
	$__£tdoô
 (
__√wvÆ
Ë{ 
__do_ô
 = __√wvÆ; 
	}
}

580 
	$__de„r
 (Ë{ 
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
,

581 &
__ˇn˚l_ty≥
); 
	}
}

582 
	$__ª°‹e
 (Ëc⁄° { 
	`±hªad_£tˇn˚…y≥
 (
__ˇn˚l_ty≥
, 0); 
	}
}

592 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

594 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
)

	)

598 
	#±hªad_˛ónup_p›
(
execuã
) \

599 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

600 } 0)

	)

602 #ifde‡
__USE_GNU


606 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

608 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
); \

609 
__˛‰ame
.
	`__de„r
 ()

	)

614 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

615 
__˛‰ame
.
	`__ª°‹e
 (); \

616 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

617 } 0)

	)

624 
__exã∫_ölöe
 

625 
	$__±hªad_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
__‰ame
)

627 i‡(
__‰ame
->
__do_ô
)

628 
__‰ame
->
	`__ˇn˚l_routöe
 (__‰ame->
__ˇn˚l_¨g
);

629 
	}
}

638 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

640 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

641 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

642 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

643 .
__do_ô
 = 1 };

	)

647 
	#±hªad_˛ónup_p›
(
execuã
) \

648 
__˛‰ame
.
__do_ô
 = (
execuã
); \

649 } 0)

	)

651 #ifde‡
__USE_GNU


655 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

657 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

658 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

659 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

660 .
__do_ô
 = 1 }; \

661 (Ë
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
, \

662 &
__˛‰ame
.
__ˇn˚l_ty≥
)

	)

667 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

668 (Ë
	`±hªad_£tˇn˚…y≥
 (
__˛‰ame
.
__ˇn˚l_ty≥
, 
NULL
); \

669 
__˛‰ame
.
__do_ô
 = (
execuã
); \

670 } 0)

	)

681 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

683 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

684 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

685 *
__ˇn˚l_¨g
 = (
¨g
); \

686 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp_ˇn˚l
 (
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, \

688 i‡(
	`__glibc_u∆ikñy
 (
__nŸ_fú°_ˇŒ
)) \

690 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

691 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

695 
	`__±hªad_ªgi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

696 dÿ{

	)

697 
__±hªad_ªgi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

698 
__˛ónup_f˘_©åibuã
;

702 
	#±hªad_˛ónup_p›
(
execuã
) \

705 
	`__±hªad_uƒegi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

706 i‡(
execuã
) \

707 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

708 } 0)

	)

709 
	$__±hªad_uƒegi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

710 
__˛ónup_f˘_©åibuã
;

712 #ifde‡
__USE_GNU


716 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

718 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

719 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

720 *
__ˇn˚l_¨g
 = (
¨g
); \

721 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp_ˇn˚l
 (
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, \

723 i‡(
	`__glibc_u∆ikñy
 (
__nŸ_fú°_ˇŒ
)) \

725 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

726 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

730 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (&
__ˇn˚l_buf
); \

731 dÿ{

	)

732 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (
__±hªad_unwöd_buf_t
 *
__buf
)

733 
__˛ónup_f˘_©åibuã
;

738 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

741 
	`__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (&
__ˇn˚l_buf
); \

742 i‡(
execuã
) \

743 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

744 
	}
} 0)

	)

745 
	$__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (
__±hªad_unwöd_buf_t
 *
__buf
)

746 
__˛ónup_f˘_©åibuã
;

750 
	$__±hªad_unwöd_√xt
 (
__±hªad_unwöd_buf_t
 *
__buf
)

751 
__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

752 #i‚de‡
SHARED


753 
	`__©åibuã__
 ((
__wók__
))

765 #i‡
	`__GNUC_PREREQ
 (11, 0)

766 
	`__REDIRECT_NTHNL
 (
__sig£tjmp_ˇn˚l
,

767 (
__ˇn˚l_jmp_buf_èg
 
__ív
[1],

768 
__ßvemask
),

769 
__sig£tjmp
Ë
__©åibuã_ªtu∫s_twi˚__
;

771 
	#__sig£tjmp_ˇn˚l
(
ív
, 
ßvemask
) \

772 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *Ë(*Ë(
ív
), (
ßvemask
))

	)

773 
	$__sig£tjmp
 (
__jmp_buf_èg
 
__ív
[1],

774 
__ßvemask
Ë
__THROWNL
;

781 
	$±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

782 c⁄° 
±hªad_muãx©å_t
 *
__muãx©å
)

783 
__THROW
 
	`__n⁄nuŒ
 ((1));

786 
	$±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
)

787 
__THROW
 
	`__n⁄nuŒ
 ((1));

790 
	$±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
)

791 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

794 
	$±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
)

795 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

797 #ifde‡
__USE_XOPEN2K


799 #i‚de‡
__USE_TIME_BITS64


800 
	$±hªad_muãx_timedlock
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

801 c⁄° 
time•ec
 *
__ª°ri˘


802 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

804 #ifde‡
__REDIRECT_NTHNL


805 
	`__REDIRECT_NTHNL
 (
±hªad_muãx_timedlock
,

806 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

807 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
),

808 
__±hªad_muãx_timedlock64
Ë
	`__n⁄nuŒ
 ((1, 2));

810 
	#±hªad_muãx_timedlock
 
__±hªad_muãx_timedlock64


	)

815 #ifde‡
__USE_GNU


816 #i‚de‡
__USE_TIME_BITS64


817 
	$±hªad_muãx_˛ocklock
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

818 
˛ockid_t
 
__˛ockid
,

819 c⁄° 
time•ec
 *
__ª°ri˘


820 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 3));

822 #ifde‡
__REDIRECT_NTHNL


823 
	`__REDIRECT_NTHNL
 (
±hªad_muãx_˛ocklock
,

824 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

825 
˛ockid_t
 
__˛ockid
,

826 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
),

827 
__±hªad_muãx_˛ocklock64
Ë
	`__n⁄nuŒ
 ((1, 3));

829 
	#±hªad_muãx_˛ocklock
 
__±hªad_muãx_˛ocklock64


	)

835 
	$±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
)

836 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

840 
	$±hªad_muãx_gë¥io˚ûög
 (c⁄° 
±hªad_muãx_t
 *

841 
__ª°ri˘
 
__muãx
,

842 *
__ª°ri˘
 
__¥io˚ûög
)

843 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

847 
	$±hªad_muãx_£çrio˚ûög
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

848 
__¥io˚ûög
,

849 *
__ª°ri˘
 
__ﬁd_˚ûög
)

850 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

853 #ifde‡
__USE_XOPEN2K8


855 
	$±hªad_muãx_c⁄si°ít
 (
±hªad_muãx_t
 *
__muãx
)

856 
__THROW
 
	`__n⁄nuŒ
 ((1));

857 #ifde‡
__USE_GNU


858 #ifde‡
__REDIRECT_NTH


859 
	`__REDIRECT_NTH
 (
±hªad_muãx_c⁄si°ít_≈
, (
±hªad_muãx_t
 *),

860 
±hªad_muãx_c⁄si°ít
Ë
	`__n⁄nuŒ
 ((1))

861 
	`__©åibuã_dïªˇãd_msg__
 ("\
_mutex_consistent_np is deprecated, useÖthread_mutex_consistent");

864 
	#±hªad_muãx_c⁄si°ít_≈
 
±hªad_muãx_c⁄si°ít


	)

874 
	$±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
)

875 
__THROW
 
	`__n⁄nuŒ
 ((1));

878 
	$±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
)

879 
__THROW
 
	`__n⁄nuŒ
 ((1));

882 
	$±hªad_muãx©å_gëpsh¨ed
 (c⁄° 
±hªad_muãx©å_t
 *

883 
__ª°ri˘
 
__©å
,

884 *
__ª°ri˘
 
__psh¨ed
)

885 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

888 
	$±hªad_muãx©å_£çsh¨ed
 (
±hªad_muãx©å_t
 *
__©å
,

889 
__psh¨ed
)

890 
__THROW
 
	`__n⁄nuŒ
 ((1));

892 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


894 
	$±hªad_muãx©å_gëty≥
 (c⁄° 
±hªad_muãx©å_t
 *
__ª°ri˘


895 
__©å
, *
__ª°ri˘
 
__köd
)

896 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

901 
	$±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
, 
__köd
)

902 
__THROW
 
	`__n⁄nuŒ
 ((1));

906 
	$±hªad_muãx©å_gë¥Ÿocﬁ
 (c⁄° 
±hªad_muãx©å_t
 *

907 
__ª°ri˘
 
__©å
,

908 *
__ª°ri˘
 
__¥Ÿocﬁ
)

909 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

913 
	$±hªad_muãx©å_£çrŸocﬁ
 (
±hªad_muãx©å_t
 *
__©å
,

914 
__¥Ÿocﬁ
)

915 
__THROW
 
	`__n⁄nuŒ
 ((1));

918 
	$±hªad_muãx©å_gë¥io˚ûög
 (c⁄° 
±hªad_muãx©å_t
 *

919 
__ª°ri˘
 
__©å
,

920 *
__ª°ri˘
 
__¥io˚ûög
)

921 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

924 
	$±hªad_muãx©å_£çrio˚ûög
 (
±hªad_muãx©å_t
 *
__©å
,

925 
__¥io˚ûög
)

926 
__THROW
 
	`__n⁄nuŒ
 ((1));

928 #ifde‡
__USE_XOPEN2K


930 
	$±hªad_muãx©å_gërobu°
 (c⁄° 
±hªad_muãx©å_t
 *
__©å
,

931 *
__robu°√ss
)

932 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

933 #ifde‡
__USE_GNU


934 #ifde‡
__REDIRECT_NTH


935 
	`__REDIRECT_NTH
 (
±hªad_muãx©å_gërobu°_≈
,

936 (
±hªad_muãx©å_t
 *, *),

937 
±hªad_muãx©å_gërobu°
Ë
	`__n⁄nuŒ
 ((1))

938 
	`__©åibuã_dïªˇãd_msg__
 ("\
_mutexattr_getrobust_np is deprecated, useÖthread_mutexattr_getrobust");

941 
	#±hªad_muãx©å_gërobu°_≈
 
±hªad_muãx©å_gërobu°


	)

946 
	$±hªad_muãx©å_£åobu°
 (
±hªad_muãx©å_t
 *
__©å
,

947 
__robu°√ss
)

948 
__THROW
 
	`__n⁄nuŒ
 ((1));

949 #ifde‡
__USE_GNU


950 #ifde‡
__REDIRECT_NTH


951 
	`__REDIRECT_NTH
 (
±hªad_muãx©å_£åobu°_≈
,

952 (
±hªad_muãx©å_t
 *, ),

953 
±hªad_muãx©å_£åobu°
Ë
	`__n⁄nuŒ
 ((1))

954 
	`__©åibuã_dïªˇãd_msg__
 ("\
_mutexattr_setrobust_np is deprecated, useÖthread_mutexattr_setrobust");

957 
	#±hªad_muãx©å_£åobu°_≈
 
±hªad_muãx©å_£åobu°


	)

962 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


967 
	$±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

968 c⁄° 
±hªad_rwlock©å_t
 *
__ª°ri˘


969 
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

972 
	$±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
)

973 
__THROW
 
	`__n⁄nuŒ
 ((1));

976 
	$±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

977 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

980 
	$±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

981 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

983 #ifde‡
__USE_XOPEN2K


985 #i‚de‡
__USE_TIME_BITS64


986 
	$±hªad_rwlock_timedrdlock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

987 c⁄° 
time•ec
 *
__ª°ri˘


988 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

990 #ifde‡
__REDIRECT_NTHNL


991 
	`__REDIRECT_NTHNL
 (
±hªad_rwlock_timedrdlock
,

992 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

993 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
),

994 
__±hªad_rwlock_timedrdlock64
)

995 
	`__n⁄nuŒ
 ((1, 2));

997 
	#±hªad_rwlock_timedrdlock
 
__±hªad_rwlock_timedrdlock64


	)

1002 #ifde‡
__USE_GNU


1003 #i‚de‡
__USE_TIME_BITS64


1004 
	$±hªad_rwlock_˛ockrdlock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

1005 
˛ockid_t
 
__˛ockid
,

1006 c⁄° 
time•ec
 *
__ª°ri˘


1007 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 3));

1009 #ifde‡
__REDIRECT_NTHNL


1010 
	`__REDIRECT_NTHNL
 (
±hªad_rwlock_˛ockrdlock
,

1011 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

1012 
˛ockid_t
 
__˛ockid
,

1013 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
),

1014 
__±hªad_rwlock_˛ockrdlock64
)

1015 
	`__n⁄nuŒ
 ((1, 3));

1017 
	#±hªad_rwlock_˛ockrdlock
 
__±hªad_rwlock_˛ockrdlock64


	)

1023 
	$±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
)

1024 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1027 
	$±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
)

1028 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1030 #ifde‡
__USE_XOPEN2K


1032 #i‚de‡
__USE_TIME_BITS64


1033 
	$±hªad_rwlock_timedwæock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

1034 c⁄° 
time•ec
 *
__ª°ri˘


1035 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

1037 #ifde‡
__REDIRECT_NTHNL


1038 
	`__REDIRECT_NTHNL
 (
±hªad_rwlock_timedwæock
,

1039 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

1040 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
),

1041 
__±hªad_rwlock_timedwæock64
)

1042 
	`__n⁄nuŒ
 ((1, 2));

1044 
	#±hªad_rwlock_timedwæock
 
__±hªad_rwlock_timedwæock64


	)

1049 #ifde‡
__USE_GNU


1050 #i‚de‡
__USE_TIME_BITS64


1051 
	$±hªad_rwlock_˛ockwæock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

1052 
˛ockid_t
 
__˛ockid
,

1053 c⁄° 
time•ec
 *
__ª°ri˘


1054 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 3));

1057 #ifde‡
__REDIRECT_NTHNL


1058 
	`__REDIRECT_NTHNL
 (
±hªad_rwlock_˛ockwæock
,

1059 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

1060 
˛ockid_t
 
__˛ockid
,

1061 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
),

1062 
__±hªad_rwlock_˛ockwæock64
)

1063 
	`__n⁄nuŒ
 ((1, 3));

1065 
	#±hªad_rwlock_˛ockwæock
 
__±hªad_rwlock_˛ockwæock64


	)

1071 
	$±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
)

1072 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1078 
	$±hªad_rwlock©å_öô
 (
±hªad_rwlock©å_t
 *
__©å
)

1079 
__THROW
 
	`__n⁄nuŒ
 ((1));

1082 
	$±hªad_rwlock©å_de°roy
 (
±hªad_rwlock©å_t
 *
__©å
)

1083 
__THROW
 
	`__n⁄nuŒ
 ((1));

1086 
	$±hªad_rwlock©å_gëpsh¨ed
 (c⁄° 
±hªad_rwlock©å_t
 *

1087 
__ª°ri˘
 
__©å
,

1088 *
__ª°ri˘
 
__psh¨ed
)

1089 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1092 
	$±hªad_rwlock©å_£çsh¨ed
 (
±hªad_rwlock©å_t
 *
__©å
,

1093 
__psh¨ed
)

1094 
__THROW
 
	`__n⁄nuŒ
 ((1));

1097 
	$±hªad_rwlock©å_gëköd_≈
 (c⁄° 
±hªad_rwlock©å_t
 *

1098 
__ª°ri˘
 
__©å
,

1099 *
__ª°ri˘
 
__¥ef
)

1100 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1103 
	$±hªad_rwlock©å_£tköd_≈
 (
±hªad_rwlock©å_t
 *
__©å
,

1104 
__¥ef
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1112 
	$±hªad_c⁄d_öô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

1113 c⁄° 
±hªad_c⁄d©å_t
 *
__ª°ri˘
 
__c⁄d_©å
)

1114 
__THROW
 
	`__n⁄nuŒ
 ((1));

1117 
	$±hªad_c⁄d_de°roy
 (
±hªad_c⁄d_t
 *
__c⁄d
)

1118 
__THROW
 
	`__n⁄nuŒ
 ((1));

1121 
	$±hªad_c⁄d_sig«l
 (
±hªad_c⁄d_t
 *
__c⁄d
)

1122 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1125 
	$±hªad_c⁄d_brﬂdˇ°
 (
±hªad_c⁄d_t
 *
__c⁄d
)

1126 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1133 
	$±hªad_c⁄d_waô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

1134 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
)

1135 
	`__n⁄nuŒ
 ((1, 2));

1144 #i‚de‡
__USE_TIME_BITS64


1145 
	$±hªad_c⁄d_timedwaô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

1146 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

1147 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
)

1148 
	`__n⁄nuŒ
 ((1, 2, 3));

1150 #ifde‡
__REDIRECT


1151 
	`__REDIRECT
 (
±hªad_c⁄d_timedwaô
,

1152 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

1153 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

1154 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
),

1155 
__±hªad_c⁄d_timedwaô64
)

1156 
	`__n⁄nuŒ
 ((1, 2, 3));

1158 
	#±hªad_c⁄d_timedwaô
 
__±hªad_c⁄d_timedwaô64


	)

1162 #ifde‡
__USE_GNU


1170 #i‚de‡
__USE_TIME_BITS64


1171 
	$±hªad_c⁄d_˛ockwaô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

1172 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

1173 
__˛ockid_t
 
__˛ock_id
,

1174 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
)

1175 
	`__n⁄nuŒ
 ((1, 2, 4));

1177 #ifde‡
__REDIRECT


1178 
	`__REDIRECT
 (
±hªad_c⁄d_˛ockwaô
,

1179 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

1180 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

1181 
__˛ockid_t
 
__˛ock_id
,

1182 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
),

1183 
__±hªad_c⁄d_˛ockwaô64
)

1184 
	`__n⁄nuŒ
 ((1, 2, 4));

1186 
	#±hªad_c⁄d_˛ockwaô
 
__±hªad_c⁄d_˛ockwaô64


	)

1194 
	$±hªad_c⁄d©å_öô
 (
±hªad_c⁄d©å_t
 *
__©å
)

1195 
__THROW
 
	`__n⁄nuŒ
 ((1));

1198 
	$±hªad_c⁄d©å_de°roy
 (
±hªad_c⁄d©å_t
 *
__©å
)

1199 
__THROW
 
	`__n⁄nuŒ
 ((1));

1202 
	$±hªad_c⁄d©å_gëpsh¨ed
 (c⁄° 
±hªad_c⁄d©å_t
 *

1203 
__ª°ri˘
 
__©å
,

1204 *
__ª°ri˘
 
__psh¨ed
)

1205 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1208 
	$±hªad_c⁄d©å_£çsh¨ed
 (
±hªad_c⁄d©å_t
 *
__©å
,

1209 
__psh¨ed
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1211 #ifde‡
__USE_XOPEN2K


1213 
	$±hªad_c⁄d©å_gë˛ock
 (c⁄° 
±hªad_c⁄d©å_t
 *

1214 
__ª°ri˘
 
__©å
,

1215 
__˛ockid_t
 *
__ª°ri˘
 
__˛ock_id
)

1216 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1219 
	$±hªad_c⁄d©å_£t˛ock
 (
±hªad_c⁄d©å_t
 *
__©å
,

1220 
__˛ockid_t
 
__˛ock_id
)

1221 
__THROW
 
	`__n⁄nuŒ
 ((1));

1225 #ifde‡
__USE_XOPEN2K


1230 
	$±hªad_•ö_öô
 (
±hªad_•ölock_t
 *
__lock
, 
__psh¨ed
)

1231 
__THROW
 
	`__n⁄nuŒ
 ((1));

1234 
	$±hªad_•ö_de°roy
 (
±hªad_•ölock_t
 *
__lock
)

1235 
__THROW
 
	`__n⁄nuŒ
 ((1));

1238 
	$±hªad_•ö_lock
 (
±hªad_•ölock_t
 *
__lock
)

1239 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1242 
	$±hªad_•ö_åylock
 (
±hªad_•ölock_t
 *
__lock
)

1243 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1246 
	$±hªad_•ö_u∆ock
 (
±hªad_•ölock_t
 *
__lock
)

1247 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1254 
	$±hªad_b¨rõr_öô
 (
±hªad_b¨rõr_t
 *
__ª°ri˘
 
__b¨rõr
,

1255 c⁄° 
±hªad_b¨rõøâr_t
 *
__ª°ri˘


1256 
__©å
, 
__cou¡
)

1257 
__THROW
 
	`__n⁄nuŒ
 ((1));

1260 
	$±hªad_b¨rõr_de°roy
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1261 
__THROW
 
	`__n⁄nuŒ
 ((1));

1264 
	$±hªad_b¨rõr_waô
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1265 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1269 
	$±hªad_b¨rõøâr_öô
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1270 
__THROW
 
	`__n⁄nuŒ
 ((1));

1273 
	$±hªad_b¨rõøâr_de°roy
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1274 
__THROW
 
	`__n⁄nuŒ
 ((1));

1277 
	$±hªad_b¨rõøâr_gëpsh¨ed
 (c⁄° 
±hªad_b¨rõøâr_t
 *

1278 
__ª°ri˘
 
__©å
,

1279 *
__ª°ri˘
 
__psh¨ed
)

1280 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1283 
	$±hªad_b¨rõøâr_£çsh¨ed
 (
±hªad_b¨rõøâr_t
 *
__©å
,

1284 
__psh¨ed
)

1285 
__THROW
 
	`__n⁄nuŒ
 ((1));

1297 
	$±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

1298 (*
__de°r_fun˘i⁄
) (*))

1299 
__THROW
 
	`__n⁄nuŒ
 ((1));

1302 
	$±hªad_key_dñëe
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1305 *
	$±hªad_gë•ecific
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1308 
	$±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

1309 c⁄° *
__poöãr
)

1310 
__THROW
 
	`__©å_ac˚ss_n⁄e
 (2);

1313 #ifde‡
__USE_XOPEN2K


1315 
	$±hªad_gë˝u˛ockid
 (
±hªad_t
 
__thªad_id
,

1316 
__˛ockid_t
 *
__˛ock_id
)

1317 
__THROW
 
	`__n⁄nuŒ
 ((2));

1332 
	$±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1333 (*
__∑ª¡
) (),

1334 (*
__chûd
Ë()Ë
__THROW
;

1337 #ifde‡
__USE_EXTERN_INLINES


1339 
__exã∫_ölöe
 

1340 
	`__NTH
 (
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
))

1342  
__thªad1
 =
__thªad2
;

1343 
	}
}

1346 
	g__END_DECLS


	@/usr/include/pty.h

19 #i‚de‡
_PTY_H


20 
	#_PTY_H
 1

	)

22 
	~<„©uªs.h
>

24 
	gãrmios
;

25 
	gwösize
;

27 
	~<ãrmios.h
>

28 
	~<sys/io˘l.h
>

31 
__BEGIN_DECLS


36 
	$›í±y
 (*
__ama°î
, *
__a¶ave
, *
__«me
,

37 c⁄° 
ãrmios
 *
__ãrmp
,

38 c⁄° 
wösize
 *
__wöp
Ë
__THROW
;

42 
	$f‹k±y
 (*
__ama°î
, *
__«me
,

43 c⁄° 
ãrmios
 *
__ãrmp
,

44 c⁄° 
wösize
 *
__wöp
Ë
__THROW
;

46 
__END_DECLS


	@/usr/include/pwd.h

22 #i‚def 
_PWD_H


23 
	#_PWD_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

31 
	#__√ed_size_t


	)

32 
	~<°ddef.h
>

34 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


37 #i‚de‡
__gid_t_deföed


38 
__gid_t
 
	tgid_t
;

39 
	#__gid_t_deföed


	)

42 #i‚de‡
__uid_t_deföed


43 
__uid_t
 
	tuid_t
;

44 
	#__uid_t_deföed


	)

49 
	s∑sswd


51 *
	mpw_«me
;

52 *
	mpw_∑sswd
;

54 
__uid_t
 
	mpw_uid
;

55 
__gid_t
 
	mpw_gid
;

56 *
	mpw_gecos
;

57 *
	mpw_dú
;

58 *
	mpw_shñl
;

62 #ifde‡
__USE_MISC


63 
	~<bôs/ty≥s/FILE.h
>

67 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


72 
£çwít
 ();

78 
ídpwít
 ();

84 
∑sswd
 *
gëpwít
 ();

87 #ifdef 
__USE_MISC


94 
∑sswd
 *
	$fgëpwít
 (
FILE
 *
__°ªam
Ë
	`__n⁄nuŒ
 ((1));

102 
	`puçwít
 (c⁄° 
∑sswd
 *
__ª°ri˘
 
__p
,

103 
FILE
 *
__ª°ri˘
 
__f
);

110 
∑sswd
 *
	`gëpwuid
 (
__uid_t
 
__uid
);

116 
∑sswd
 *
	$gëpw«m
 (c⁄° *
__«me
Ë
	`__n⁄nuŒ
 ((1));

118 #ifde‡
__USE_POSIX


120 #ifde‡
__USE_MISC


123 
	#NSS_BUFLEN_PASSWD
 1024

	)

134 #ifde‡
__USE_MISC


139 
	$gëpwít_r
 (
∑sswd
 *
__ª°ri˘
 
__ªsu…buf
,

140 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

141 
∑sswd
 **
__ª°ri˘
 
__ªsu…
)

142 
	`__n⁄nuŒ
 ((1, 2, 4))

143 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 2, 3));

146 
	$gëpwuid_r
 (
__uid_t
 
__uid
,

147 
∑sswd
 *
__ª°ri˘
 
__ªsu…buf
,

148 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

149 
∑sswd
 **
__ª°ri˘
 
__ªsu…
)

150 
	`__n⁄nuŒ
 ((2, 3, 5))

151 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 3, 4));

153 
	$gëpw«m_r
 (c⁄° *
__ª°ri˘
 
__«me
,

154 
∑sswd
 *
__ª°ri˘
 
__ªsu…buf
,

155 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

156 
∑sswd
 **
__ª°ri˘
 
__ªsu…
)

157 
	`__n⁄nuŒ
 ((1, 2, 3, 5))

158 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 3, 4));

161 #ifdef 
__USE_MISC


169 
	$fgëpwít_r
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

170 
∑sswd
 *
__ª°ri˘
 
__ªsu…buf
,

171 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

172 
∑sswd
 **
__ª°ri˘
 
__ªsu…
)

173 
	`__n⁄nuŒ
 ((1, 2, 3, 5))

174 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 3, 4));

179 #ifde‡
__USE_GNU


188 
	`gëpw
 (
__uid_t
 
__uid
, *
__buf„r
);

191 
__END_DECLS


	@/usr/include/re_comp.h

18 #i‚de‡
_RE_COMP_H


19 
	#_RE_COMP_H
 1

	)

23 
	~<ªgex.h
>

	@/usr/include/regex.h

20 #i‚de‡
_REGEX_H


21 
	#_REGEX_H
 1

	)

23 
	~<sys/ty≥s.h
>

26 #ifde‡
__˝lu•lus


32 #ifde‡
_GNU_SOURCE


33 
	#__USE_GNU
 1

	)

36 #ifde‡
_REGEX_LARGE_OFFSETS


45 
size_t
 
	t__ª_size_t
;

49 
size_t
 
	t__ª_l⁄g_size_t
;

55 
	t__ª_size_t
;

56 
	t__ª_l⁄g_size_t
;

64 
	ts_ªg_t
;

65 
	ta˘ive_ªg_t
;

72 
	tªg_sy¡ax_t
;

74 #ifde‡
__USE_GNU


77 
	#RE_BACKSLASH_ESCAPE_IN_LISTS
 ((Ë1)

	)

82 
	#RE_BK_PLUS_QM
 (
RE_BACKSLASH_ESCAPE_IN_LISTS
 << 1)

	)

88 
	#RE_CHAR_CLASSES
 (
RE_BK_PLUS_QM
 << 1)

	)

102 
	#RE_CONTEXT_INDEP_ANCHORS
 (
RE_CHAR_CLASSES
 << 1)

	)

110 
	#RE_CONTEXT_INDEP_OPS
 (
RE_CONTEXT_INDEP_ANCHORS
 << 1)

	)

114 
	#RE_CONTEXT_INVALID_OPS
 (
RE_CONTEXT_INDEP_OPS
 << 1)

	)

118 
	#RE_DOT_NEWLINE
 (
RE_CONTEXT_INVALID_OPS
 << 1)

	)

122 
	#RE_DOT_NOT_NULL
 (
RE_DOT_NEWLINE
 << 1)

	)

126 
	#RE_HAT_LISTS_NOT_NEWLINE
 (
RE_DOT_NOT_NULL
 << 1)

	)

131 
	#RE_INTERVALS
 (
RE_HAT_LISTS_NOT_NEWLINE
 << 1)

	)

135 
	#RE_LIMITED_OPS
 (
RE_INTERVALS
 << 1)

	)

139 
	#RE_NEWLINE_ALT
 (
RE_LIMITED_OPS
 << 1)

	)

144 
	#RE_NO_BK_BRACES
 (
RE_NEWLINE_ALT
 << 1)

	)

148 
	#RE_NO_BK_PARENS
 (
RE_NO_BK_BRACES
 << 1)

	)

152 
	#RE_NO_BK_REFS
 (
RE_NO_BK_PARENS
 << 1)

	)

156 
	#RE_NO_BK_VBAR
 (
RE_NO_BK_REFS
 << 1)

	)

162 
	#RE_NO_EMPTY_RANGES
 (
RE_NO_BK_VBAR
 << 1)

	)

166 
	#RE_UNMATCHED_RIGHT_PAREN_ORD
 (
RE_NO_EMPTY_RANGES
 << 1)

	)

170 
	#RE_NO_POSIX_BACKTRACKING
 (
RE_UNMATCHED_RIGHT_PAREN_ORD
 << 1)

	)

174 
	#RE_NO_GNU_OPS
 (
RE_NO_POSIX_BACKTRACKING
 << 1)

	)

182 
	#RE_DEBUG
 (
RE_NO_GNU_OPS
 << 1)

	)

187 
	#RE_INVALID_INTERVAL_ORD
 (
RE_DEBUG
 << 1)

	)

191 
	#RE_ICASE
 (
RE_INVALID_INTERVAL_ORD
 << 1)

	)

196 
	#RE_CARET_ANCHORS_HERE
 (
RE_ICASE
 << 1)

	)

200 
	#RE_CONTEXT_INVALID_DUP
 (
RE_CARET_ANCHORS_HERE
 << 1)

	)

204 
	#RE_NO_SUB
 (
RE_CONTEXT_INVALID_DUP
 << 1)

	)

211 
ªg_sy¡ax_t
 
ª_sy¡ax_›ti⁄s
;

213 #ifde‡
__USE_GNU


218 
	#RE_SYNTAX_EMACS
 0

	)

220 
	#RE_SYNTAX_AWK
 \

221 (
RE_BACKSLASH_ESCAPE_IN_LISTS
 | 
RE_DOT_NOT_NULL
 \

222 | 
RE_NO_BK_PARENS
 | 
RE_NO_BK_REFS
 \

223 | 
RE_NO_BK_VBAR
 | 
RE_NO_EMPTY_RANGES
 \

224 | 
RE_DOT_NEWLINE
 | 
RE_CONTEXT_INDEP_ANCHORS
 \

225 | 
RE_CHAR_CLASSES
 \

226 | 
RE_UNMATCHED_RIGHT_PAREN_ORD
 | 
RE_NO_GNU_OPS
)

	)

228 
	#RE_SYNTAX_GNU_AWK
 \

229 ((
RE_SYNTAX_POSIX_EXTENDED
 | 
RE_BACKSLASH_ESCAPE_IN_LISTS
 \

230 | 
RE_INVALID_INTERVAL_ORD
) \

231 & ~(
RE_DOT_NOT_NULL
 | 
RE_CONTEXT_INDEP_OPS
 \

232 | 
RE_CONTEXT_INVALID_OPS
 ))

	)

234 
	#RE_SYNTAX_POSIX_AWK
 \

235 (
RE_SYNTAX_POSIX_EXTENDED
 | 
RE_BACKSLASH_ESCAPE_IN_LISTS
 \

236 | 
RE_INTERVALS
 | 
RE_NO_GNU_OPS
 \

237 | 
RE_INVALID_INTERVAL_ORD
)

	)

239 
	#RE_SYNTAX_GREP
 \

240 ((
RE_SYNTAX_POSIX_BASIC
 | 
RE_NEWLINE_ALT
) \

241 & ~(
RE_CONTEXT_INVALID_DUP
 | 
RE_DOT_NOT_NULL
))

	)

243 
	#RE_SYNTAX_EGREP
 \

244 ((
RE_SYNTAX_POSIX_EXTENDED
 | 
RE_INVALID_INTERVAL_ORD
 | 
RE_NEWLINE_ALT
) \

245 & ~(
RE_CONTEXT_INVALID_OPS
 | 
RE_DOT_NOT_NULL
))

	)

248 
	#RE_SYNTAX_POSIX_EGREP
 \

249 
RE_SYNTAX_EGREP


	)

252 
	#RE_SYNTAX_ED
 
RE_SYNTAX_POSIX_BASIC


	)

254 
	#RE_SYNTAX_SED
 
RE_SYNTAX_POSIX_BASIC


	)

257 
	#_RE_SYNTAX_POSIX_COMMON
 \

258 (
RE_CHAR_CLASSES
 | 
RE_DOT_NEWLINE
 | 
RE_DOT_NOT_NULL
 \

259 | 
RE_INTERVALS
 | 
RE_NO_EMPTY_RANGES
)

	)

261 
	#RE_SYNTAX_POSIX_BASIC
 \

262 (
_RE_SYNTAX_POSIX_COMMON
 | 
RE_BK_PLUS_QM
 | 
RE_CONTEXT_INVALID_DUP
)

	)

267 
	#RE_SYNTAX_POSIX_MINIMAL_BASIC
 \

268 (
_RE_SYNTAX_POSIX_COMMON
 | 
RE_LIMITED_OPS
)

	)

270 
	#RE_SYNTAX_POSIX_EXTENDED
 \

271 (
_RE_SYNTAX_POSIX_COMMON
 | 
RE_CONTEXT_INDEP_ANCHORS
 \

272 | 
RE_CONTEXT_INDEP_OPS
 | 
RE_NO_BK_BRACES
 \

273 | 
RE_NO_BK_PARENS
 | 
RE_NO_BK_VBAR
 \

274 | 
RE_CONTEXT_INVALID_OPS
 | 
RE_UNMATCHED_RIGHT_PAREN_ORD
)

	)

278 
	#RE_SYNTAX_POSIX_MINIMAL_EXTENDED
 \

279 (
_RE_SYNTAX_POSIX_COMMON
 | 
RE_CONTEXT_INDEP_ANCHORS
 \

280 | 
RE_CONTEXT_INVALID_OPS
 | 
RE_NO_BK_BRACES
 \

281 | 
RE_NO_BK_PARENS
 | 
RE_NO_BK_REFS
 \

282 | 
RE_NO_BK_VBAR
 | 
RE_UNMATCHED_RIGHT_PAREN_ORD
)

	)

288 #ifde‡
_REGEX_INCLUDE_LIMITS_H


289 
	~<limôs.h
>

291 #ifde‡
RE_DUP_MAX


292 #unde‡
RE_DUP_MAX


302 
	#RE_DUP_MAX
 (0x7fff)

	)

310 
	#REG_EXTENDED
 1

	)

314 
	#REG_ICASE
 (1 << 1)

	)

319 
	#REG_NEWLINE
 (1 << 2)

	)

323 
	#REG_NOSUB
 (1 << 3)

	)

333 
	#REG_NOTBOL
 1

	)

336 
	#REG_NOTEOL
 (1 << 1)

	)

340 
	#REG_STARTEND
 (1 << 2)

	)

348 
	g_REG_ENOSYS
 = -1,

349 
	g_REG_NOERROR
 = 0,

350 
	g_REG_NOMATCH
,

354 
	g_REG_BADPAT
,

355 
	g_REG_ECOLLATE
,

356 
	g_REG_ECTYPE
,

357 
	g_REG_EESCAPE
,

358 
	g_REG_ESUBREG
,

359 
	g_REG_EBRACK
,

360 
	g_REG_EPAREN
,

361 
	g_REG_EBRACE
,

362 
	g_REG_BADBR
,

363 
	g_REG_ERANGE
,

364 
	g_REG_ESPACE
,

365 
	g_REG_BADRPT
,

368 
	g_REG_EEND
,

369 
	g_REG_ESIZE
,

370 
	g_REG_ERPAREN


371 } 
	tªg_îrcode_t
;

373 #i‡
deföed
 
_XOPEN_SOURCE
 || deföed 
__USE_XOPEN2K


374 
	#REG_ENOSYS
 
_REG_ENOSYS


	)

376 
	#REG_NOERROR
 
_REG_NOERROR


	)

377 
	#REG_NOMATCH
 
_REG_NOMATCH


	)

378 
	#REG_BADPAT
 
_REG_BADPAT


	)

379 
	#REG_ECOLLATE
 
_REG_ECOLLATE


	)

380 
	#REG_ECTYPE
 
_REG_ECTYPE


	)

381 
	#REG_EESCAPE
 
_REG_EESCAPE


	)

382 
	#REG_ESUBREG
 
_REG_ESUBREG


	)

383 
	#REG_EBRACK
 
_REG_EBRACK


	)

384 
	#REG_EPAREN
 
_REG_EPAREN


	)

385 
	#REG_EBRACE
 
_REG_EBRACE


	)

386 
	#REG_BADBR
 
_REG_BADBR


	)

387 
	#REG_ERANGE
 
_REG_ERANGE


	)

388 
	#REG_ESPACE
 
_REG_ESPACE


	)

389 
	#REG_BADRPT
 
_REG_BADRPT


	)

390 
	#REG_EEND
 
_REG_EEND


	)

391 
	#REG_ESIZE
 
_REG_ESIZE


	)

392 
	#REG_ERPAREN
 
_REG_ERPAREN


	)

400 #i‚de‡
RE_TRANSLATE_TYPE


401 
	#__RE_TRANSLATE_TYPE
 *

	)

402 #ifde‡
__USE_GNU


403 
	#RE_TRANSLATE_TYPE
 
__RE_TRANSLATE_TYPE


	)

407 #ifde‡
__USE_GNU


408 
	#__REPB_PREFIX
(
«me
Ë
	)
name

410 
	#__REPB_PREFIX
(
«me
Ë
__
##
	)
name

413 
	sª_∑âîn_buf„r


417 
ª_dÁ_t
 *
__REPB_PREFIX
(
buf„r
);

420 
__ª_l⁄g_size_t
 
__REPB_PREFIX
(
Æloˇãd
);

423 
__ª_l⁄g_size_t
 
__REPB_PREFIX
(
u£d
);

426 
ªg_sy¡ax_t
 
__REPB_PREFIX
(
sy¡ax
);

431 *
__REPB_PREFIX
(
Á°m≠
);

437 
__RE_TRANSLATE_TYPE
 
__REPB_PREFIX
(
å™¶©e
);

440 
size_t
 
	gª_nsub
;

446 
__REPB_PREFIX
(
ˇn_be_nuŒ
) : 1;

452 #ifde‡
__USE_GNU


453 
	#REGS_UNALLOCATED
 0

	)

454 
	#REGS_REALLOCATE
 1

	)

455 
	#REGS_FIXED
 2

	)

457 
__REPB_PREFIX
(
ªgs_Æloˇãd
) : 2;

461 
__REPB_PREFIX
(
Á°m≠_accuøã
) : 1;

465 
__REPB_PREFIX
(
no_sub
) : 1;

469 
__REPB_PREFIX
(
nŸ_bﬁ
) : 1;

472 
__REPB_PREFIX
(
nŸ_eﬁ
) : 1;

475 
__REPB_PREFIX
(
√wlöe_™ch‹
) : 1;

478 
ª_∑âîn_buf„r
 
	tªgex_t
;

481 #ifde‡
_REGEX_LARGE_OFFSETS


486 
ssize_t
 
	tªgoff_t
;

490 
	tªgoff_t
;

494 #ifde‡
__USE_GNU


497 
	sª_ªgi°îs


499 
__ª_size_t
 
	gnum_ªgs
;

500 
ªgoff_t
 *
	g°¨t
;

501 
ªgoff_t
 *
	gíd
;

508 #i‚de‡
RE_NREGS


509 
	#RE_NREGS
 30

	)

519 
ªgoff_t
 
	grm_so
;

520 
ªgoff_t
 
	grm_eo
;

521 } 
	tªgm©ch_t
;

525 #i‚de‡
_REGEX_NELTS


526 #i‡(
deföed
 
__STDC_VERSION__
 && 199901L <= __STDC_VERSION__ \

527 && !
deföed
 
	g__STDC_NO_VLA__
)

528 
	#_REGEX_NELTS
(
n
Ë
	)
n

530 
	#_REGEX_NELTS
(
n
)

	)

534 #i‡
deföed
 
__GNUC__
 && 4 < __GNUC__ + (6 <
__GNUC_MINOR__
)

535 #¥agm®
GCC
 
dügno°ic
 
push


536 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wvla"

539 #i‚de‡
_Aâr_ac˚ss_


540 #ifde‡
__©å_ac˚ss


541 
	#_Aâr_ac˚ss_
(
¨g
Ë
	`__©å_ac˚ss
 (¨g)

	)

542 #ñi‡
deföed
 
__GNUC__
 && 10 <= __GNUC__

543 
	#_Aâr_ac˚ss_
(
x
Ë
	`__©åibuã__
 ((
__ac˚ss__
 x))

	)

545 
	#_Aâr_ac˚ss_
(
x
)

	)

549 #ifde‡
__USE_GNU


552 
ªg_sy¡ax_t
 
ª_£t_sy¡ax
 (ªg_sy¡ax_à
__sy¡ax
);

562 c⁄° *
ª_compûe_∑âîn
 (c⁄° *
__∑âîn
, 
size_t
 
__Àngth
,

563 
ª_∑âîn_buf„r
 *
__buf„r
)

564 
_Aâr_ac˚ss_
 ((
__ªad_⁄ly__
, 1, 2));

570 
ª_compûe_Á°m≠
 (
ª_∑âîn_buf„r
 *
__buf„r
);

578 
ªgoff_t
 
ª_£¨ch
 (
ª_∑âîn_buf„r
 *
__buf„r
,

579 c⁄° *
__Såög
, 
ªgoff_t
 
__Àngth
,

580 
ªgoff_t
 
__°¨t
,Ñegoff_à
__ønge
,

581 
ª_ªgi°îs
 *
__ªgs
)

582 
_Aâr_ac˚ss_
 ((
__ªad_⁄ly__
, 2, 3));

587 
ªgoff_t
 
ª_£¨ch_2
 (
ª_∑âîn_buf„r
 *
__buf„r
,

588 c⁄° *
__°rög1
, 
ªgoff_t
 
__Àngth1
,

589 c⁄° *
__°rög2
, 
ªgoff_t
 
__Àngth2
,

590 
ªgoff_t
 
__°¨t
,Ñegoff_à
__ønge
,

591 
ª_ªgi°îs
 *
__ªgs
,

592 
ªgoff_t
 
__°›
)

593 
_Aâr_ac˚ss_
 ((
__ªad_⁄ly__
, 2, 3))

594 
_Aâr_ac˚ss_
 ((
__ªad_⁄ly__
, 4, 5));

599 
ªgoff_t
 
ª_m©ch
 (
ª_∑âîn_buf„r
 *
__buf„r
,

600 c⁄° *
__Såög
, 
ªgoff_t
 
__Àngth
,

601 
ªgoff_t
 
__°¨t
, 
ª_ªgi°îs
 *
__ªgs
)

602 
_Aâr_ac˚ss_
 ((
__ªad_⁄ly__
, 2, 3));

606 
ªgoff_t
 
ª_m©ch_2
 (
ª_∑âîn_buf„r
 *
__buf„r
,

607 c⁄° *
__°rög1
, 
ªgoff_t
 
__Àngth1
,

608 c⁄° *
__°rög2
, 
ªgoff_t
 
__Àngth2
,

609 
ªgoff_t
 
__°¨t
, 
ª_ªgi°îs
 *
__ªgs
,

610 
ªgoff_t
 
__°›
)

611 
_Aâr_ac˚ss_
 ((
__ªad_⁄ly__
, 2, 3))

612 
_Aâr_ac˚ss_
 ((
__ªad_⁄ly__
, 4, 5));

627 
ª_£t_ªgi°îs
 (
ª_∑âîn_buf„r
 *
__buf„r
,

628 
ª_ªgi°îs
 *
__ªgs
,

629 
__ª_size_t
 
__num_ªgs
,

630 
ªgoff_t
 *
__°¨ts
,Ñegoff_à*
__íds
);

633 #i‡
deföed
 
_REGEX_RE_COMP
 || (deföed 
_LIBC
 && deföed 
__USE_MISC
)

635 *
ª_comp
 (const *);

636 
ª_exec
 (const *);

645 #i‚de‡
_Re°ri˘_


646 #i‡
deföed
 
__ª°ri˘
 \

647 || 2 < 
	g__GNUC__
 + (95 <
__GNUC_MINOR__
) \

648 || 
__˛™g_maj‹__
 >= 3

649 
	#_Re°ri˘_
 
__ª°ri˘


	)

650 #ñi‡199901L <
__STDC_VERSION__
 || 
deföed
 
ª°ri˘


651 
	#_Re°ri˘_
 
ª°ri˘


	)

653 
	#_Re°ri˘_


	)

661 #i‚de‡
_Re°ri˘_¨r_


662 #ifde‡
__ª°ri˘_¨r


663 
	#_Re°ri˘_¨r_
 
__ª°ri˘_¨r


	)

664 #ñi‡((199901L <
__STDC_VERSION__
 \

665 || 3 < 
__GNUC__
 + (1 <
__GNUC_MINOR__
) \

666 || 
__˛™g_maj‹__
 >= 3) \

667 && !
deföed
 
__˝lu•lus
)

668 
	#_Re°ri˘_¨r_
 
_Re°ri˘_


	)

670 
	#_Re°ri˘_¨r_


	)

675 
ªgcomp
 (
ªgex_t
 *
_Re°ri˘_
 
__¥eg
,

676 c⁄° *
_Re°ri˘_
 
__∑âîn
,

677 
__cÊags
);

679 
ªgexec
 (c⁄° 
ªgex_t
 *
_Re°ri˘_
 
__¥eg
,

680 c⁄° *
_Re°ri˘_
 
__Såög
, 
size_t
 
__nm©ch
,

681 
ªgm©ch_t
 
__pm©ch
[
_Re°ri˘_¨r_


682 
_REGEX_NELTS
 (
__nm©ch
)],

683 
__eÊags
);

685 
size_t
 
ªgîr‹
 (
__îrcode
, c⁄° 
ªgex_t
 *
_Re°ri˘_
 
__¥eg
,

686 *
_Re°ri˘_
 
__îrbuf
, 
size_t
 
__îrbuf_size
)

687 
_Aâr_ac˚ss_
 ((
__wrôe_⁄ly__
, 3, 4));

689 
ªg‰ì
 (
ªgex_t
 *
__¥eg
);

691 #i‡
deföed
 
__GNUC__
 && 4 < __GNUC__ + (6 <
__GNUC_MINOR__
)

692 #¥agm®
GCC
 
dügno°ic
 
p›


695 #ifde‡
__˝lu•lus


	@/usr/include/regexp.h

18 #i‚de‡
_REGEXP_H


19 
	#_REGEXP_H
 1

	)

	@/usr/include/resolv.h

52 #i‚de‡
_RESOLV_H_


53 
	#_RESOLV_H_


	)

55 
	~<sys/cdefs.h
>

56 
	~<sys/∑øm.h
>

57 
	~<sys/ty≥s.h
>

58 
	~<°dio.h
>

59 
	~<√töë/ö.h
>

60 
	~<¨∑/«me£r.h
>

61 
	~<bôs/ty≥s/ªs_°©e.h
>

66 
	#LOCALDOMAINPARTS
 2

	)

68 
	#RES_TIMEOUT
 5

	)

69 
	#RES_MAXNDOTS
 15

	)

70 
	#RES_MAXRETRANS
 30

	)

71 
	#RES_MAXRETRY
 5

	)

72 
	#RES_DFLRETRY
 2

	)

73 
	#RES_MAXTIME
 65535

	)

75 
	#nßddr
 
nßddr_li°
[0]

	)

85 
	#__RES
 19991006

	)

93 #i‚de‡
_PATH_RESCONF


94 
	#_PATH_RESCONF
 "/ëc/ªsﬁv.c⁄f"

	)

97 
	sªs_sym
 {

98 
	mnumbî
;

99 * 
	m«me
;

100 * 
	mhum™«me
;

106 
	#RES_INIT
 0x00000001

	)

107 
	#RES_DEBUG
 0x00000002

	)

108 
	#RES_AAONLY
 \

109 
	`__glibc_ma¸o_w¨nög
 ("RES_AAONLY i†dïªˇãd"Ë0x00000004

	)

110 
	#RES_USEVC
 0x00000008

	)

111 
	#RES_PRIMARY
 \

112 
	`__glibc_ma¸o_w¨nög
 ("RES_PRIMARY i†dïªˇãd"Ë0x00000010

	)

113 
	#RES_IGNTC
 0x00000020

	)

114 
	#RES_RECURSE
 0x00000040

	)

115 
	#RES_DEFNAMES
 0x00000080

	)

116 
	#RES_STAYOPEN
 0x00000100

	)

117 
	#RES_DNSRCH
 0x00000200

	)

118 
	#RES_NOALIASES
 0x00001000

	)

119 
	#RES_ROTATE
 0x00004000

	)

120 
	#RES_NOCHECKNAME
 \

121 
	`__glibc_ma¸o_w¨nög
 ("RES_NOCHECKNAME i†dïªˇãd"Ë0x00008000

	)

122 
	#RES_KEEPTSIG
 \

123 
	`__glibc_ma¸o_w¨nög
 ("RES_KEEPTSIG i†dïªˇãd"Ë0x00010000

	)

124 
	#RES_BLAST
 \

125 
	`__glibc_ma¸o_w¨nög
 ("RES_BLAST i†dïªˇãd"Ë0x00020000

	)

126 
	#RES_USE_EDNS0
 0x00100000

	)

127 
	#RES_SNGLKUP
 0x00200000

	)

128 
	#RES_SNGLKUPREOP
 0x00400000

	)

130 
	#RES_USE_DNSSEC
 0x00800000

	)

131 
	#RES_NOTLDQUERY
 0x01000000

	)

133 
	#RES_NORELOAD
 0x02000000

	)

134 
	#RES_TRUSTAD
 0x04000000

	)

136 
	#RES_DEFAULT
 (
RES_RECURSE
|
RES_DEFNAMES
|
RES_DNSRCH
)

	)

141 
	#RES_PRF_STATS
 0x00000001

	)

142 
	#RES_PRF_UPDATE
 0x00000002

	)

143 
	#RES_PRF_CLASS
 0x00000004

	)

144 
	#RES_PRF_CMD
 0x00000008

	)

145 
	#RES_PRF_QUES
 0x00000010

	)

146 
	#RES_PRF_ANS
 0x00000020

	)

147 
	#RES_PRF_AUTH
 0x00000040

	)

148 
	#RES_PRF_ADD
 0x00000080

	)

149 
	#RES_PRF_HEAD1
 0x00000100

	)

150 
	#RES_PRF_HEAD2
 0x00000200

	)

151 
	#RES_PRF_TTLID
 0x00000400

	)

152 
	#RES_PRF_HEADX
 0x00000800

	)

153 
	#RES_PRF_QUERY
 0x00001000

	)

154 
	#RES_PRF_REPLY
 0x00002000

	)

155 
	#RES_PRF_INIT
 0x00004000

	)

159 
__BEGIN_DECLS


160 
__ªs_°©e
 *
	$__ªs_°©e
(Ë
	`__©åibuã__
 ((
__c⁄°__
));

161 
__END_DECLS


162 
	#_ªs
 (*
	`__ªs_°©e
())

	)

164 
	#Â_nquîy
 
__Â_nquîy


	)

165 
	#Â_quîy
 
__Â_quîy


	)

166 
	#ho°Æüs
 
__ho°Æüs


	)

167 
	#p_quîy
 
__p_quîy


	)

168 
	#ªs_˛o£
 
__ªs_˛o£


	)

169 
	#ªs_öô
 
__ªs_öô


	)

170 
	#ªs_isour£rvî
 
__ªs_isour£rvî


	)

172 #ifde‡
_LIBC


173 
	#__RESOLV_DEPRECATED


	)

174 
	#__RESOLV_DEPRECATED_MSG
(
msg
)

	)

176 
	#__RESOLV_DEPRECATED
 
__©åibuã_dïªˇãd__


	)

177 
	#__RESOLV_DEPRECATED_MSG
(
msg
Ë
	`__©åibuã_dïªˇãd_msg__
 (msg)

	)

180 
__BEGIN_DECLS


181 
	$Â_nquîy
 (c⁄° *, , 
FILE
 *Ë
__THROW


182 
__RESOLV_DEPRECATED
;

183 
	$Â_quîy
 (c⁄° *, 
FILE
 *Ë
__THROW


184 
__RESOLV_DEPRECATED
;

185 c⁄° * 
	$ho°Æüs
 (c⁄° *Ë
__THROW


186 
	`__RESOLV_DEPRECATED_MSG
 ("use getaddrinfo instead");

187 
	$p_quîy
 (c⁄° *Ë
__THROW


188 
__RESOLV_DEPRECATED
;

189 
	$ªs_˛o£
 (Ë
__THROW
;

190 
	$ªs_öô
 (Ë
__THROW
;

191 
	$ªs_isour£rvî
 (c⁄° 
sockaddr_ö
 *Ë
__THROW


192 
__RESOLV_DEPRECATED
;

193 
	$ªs_mkquîy
 (, const *, , ,

195 *, Ë
__THROW
;

196 
	$ªs_quîy
 (const *, , , *, )

197 
__THROW
;

198 
	$ªs_quîydomaö
 (const *, const *, , ,

199 *, Ë
__THROW
;

200 
	$ªs_£¨ch
 (const *, , , *, )

201 
__THROW
;

202 
	$ªs_£nd
 (const *, , *, )

203 
__THROW
;

204 
__END_DECLS


206 
	#b64_¡›
 
__b64_¡›


	)

207 
	#b64_±⁄
 
__b64_±⁄


	)

208 
	#dn_cou¡_œbñs
 
__dn_cou¡_œbñs


	)

209 
	#Â_ªs°©
 
__Â_ªs°©


	)

210 
	#loc_©⁄
 
__loc_©⁄


	)

211 
	#loc_¡ﬂ
 
__loc_¡ﬂ


	)

212 
	#p_cd«me
 
__p_cd«me


	)

213 
	#p_cd¬ame
 
__p_cd¬ame


	)

214 
	#p_˛ass
 
__p_˛ass


	)

215 
	#p_fq«me
 
__p_fq«me


	)

216 
	#p_fq¬ame
 
__p_fq¬ame


	)

217 
	#p_›ti⁄
 
__p_›ti⁄


	)

218 
	#p_time
 
__p_time


	)

219 
	#p_ty≥
 
__p_ty≥


	)

220 
	#p_rcode
 
__p_rcode


	)

221 
	#pué⁄g
 
__pué⁄g


	)

222 
	#putsh‹t
 
__putsh‹t


	)

223 
	#ªs_ho°Æüs
 
__ªs_ho°Æüs


	)

224 
	#ªs_«meöquîy
 
__ªs_«meöquîy


	)

225 
	#ªs_n˛o£
 
__ªs_n˛o£


	)

226 
	#ªs_nöô
 
__ªs_nöô


	)

227 
	#ªs_quîõsm©ch
 
__ªs_quîõsm©ch


	)

228 
	#ªs_øndomid
 
__ªs_øndomid


	)

229 
	#sym_¡›
 
__sym_¡›


	)

230 
	#sym_¡os
 
__sym_¡os


	)

231 
	#sym_°⁄
 
__sym_°⁄


	)

232 
__BEGIN_DECLS


233 
	$ªs_hnok
 (c⁄° *Ë
__THROW
;

234 
	$ªs_ownok
 (c⁄° *Ë
__THROW
;

235 
	$ªs_maûok
 (c⁄° *Ë
__THROW
;

236 
	$ªs_dnok
 (c⁄° *Ë
__THROW
;

237 
	$sym_°⁄
 (c⁄° 
ªs_sym
 *, c⁄° *, *Ë
__THROW


238 
__RESOLV_DEPRECATED
;

239 c⁄° * 
	$sym_¡os
 (c⁄° 
ªs_sym
 *, , *Ë
__THROW


240 
__RESOLV_DEPRECATED
;

241 c⁄° * 
	$sym_¡›
 (c⁄° 
ªs_sym
 *, , *Ë
__THROW


242 
__RESOLV_DEPRECATED
;

243 
	$b64_¡›
 (c⁄° *, 
size_t
, *, size_t)

244 
__THROW
;

245 
	$b64_±⁄
 (c⁄° *, *, 
size_t
Ë
__THROW
;

246 
	$loc_©⁄
 (c⁄° *
__ascii
, *
__bö¨y
Ë
__THROW


247 
__RESOLV_DEPRECATED
;

248 c⁄° * 
	$loc_¡ﬂ
 (c⁄° *
__bö¨y
, *
__ascii
Ë
__THROW


249 
__RESOLV_DEPRECATED
;

250 
	$dn_skù«me
 (const *, const *)

251 
__THROW
;

252 
	$pué⁄g
 (
uöt32_t
, *Ë
__THROW


253 
	`__RESOLV_DEPRECATED_MSG
 ("use NS_PUT16 instead");

254 
	$putsh‹t
 (
uöt16_t
, *Ë
__THROW


255 
	`__RESOLV_DEPRECATED_MSG
 ("use NS_PUT32 instead");

256 c⁄° * 
	$p_˛ass
 (Ë
__THROW
 
__RESOLV_DEPRECATED
;

257 c⁄° * 
	$p_time
 (
uöt32_t
Ë
__THROW
 
__RESOLV_DEPRECATED
;

258 c⁄° * 
	$p_ty≥
 (Ë
__THROW
 
__RESOLV_DEPRECATED
;

259 c⁄° * 
	$p_rcode
 (Ë
__THROW
 
__RESOLV_DEPRECATED
;

260 c⁄° * 
	$p_cd¬ame
 (const *, const *,

261 , 
FILE
 *Ë
__THROW
 
__RESOLV_DEPRECATED
;

262 c⁄° * 
	$p_cd«me
 (const *, const *,

263 
FILE
 *Ë
__THROW
 
__RESOLV_DEPRECATED
;

264 c⁄° * 
	$p_fq¬ame
 (c⁄° *
__˝
,

265 c⁄° *
__msg
,

266 , *, Ë
__THROW
 
__RESOLV_DEPRECATED
;

267 c⁄° * 
	$p_fq«me
 (const *, const *,

268 
FILE
 *Ë
__THROW
 
__RESOLV_DEPRECATED
;

269 c⁄° * 
	$p_›ti⁄
 (
__›ti⁄
Ë
__THROW
 
__RESOLV_DEPRECATED
;

270 
	$dn_cou¡_œbñs
 (c⁄° *Ë
__THROW
 
__RESOLV_DEPRECATED
;

271 
	$dn_comp
 (const *, *, , **,

272 **Ë
__THROW
;

273 
	$dn_ex∑nd
 (const *, const *,

274 c⁄° *, *, Ë
__THROW
;

275 
	$ªs_øndomid
 (Ë
__THROW


276 
	`__RESOLV_DEPRECATED_MSG
 ("use getentropy instead");

277 
	$ªs_«meöquîy
 (const *, , ,

279 c⁄° *Ë
__THROW


280 
__RESOLV_DEPRECATED
;

281 
	$ªs_quîõsm©ch
 (const *,

284 c⁄° *Ë
__THROW


285 
__RESOLV_DEPRECATED
;

287 
	$ªs_nöô
 (
ªs_°©e
Ë
__THROW
;

288 
	$Â_ªs°©
 (c⁄° 
ªs_°©e
, 
FILE
 *Ë
__THROW


289 
__RESOLV_DEPRECATED
;

290 c⁄° * 
	$ªs_ho°Æüs
 (c⁄° 
ªs_°©e
, c⁄° *, *, 
size_t
)

291 
__THROW
 
	`__RESOLV_DEPRECATED_MSG
 ("use getaddrinfo instead");

292 
	$ªs_nquîy
 (
ªs_°©e
, const *, , ,

293 *, Ë
__THROW
;

294 
	$ªs_n£¨ch
 (
ªs_°©e
, const *, , ,

295 *, Ë
__THROW
;

296 
	$ªs_nquîydomaö
 (
ªs_°©e
, const *, const *, ,

297 , *, Ë
__THROW
;

298 
	$ªs_nmkquîy
 (
ªs_°©e
, , const *, , ,

301 
__THROW
;

302 
	$ªs_n£nd
 (
ªs_°©e
, const *, ,

303 *, Ë
__THROW
;

304 
	$ªs_n˛o£
 (
ªs_°©e
Ë
__THROW
;

306 
__END_DECLS


	@/usr/include/sched.h

19 #i‚def 
_SCHED_H


20 
	#_SCHED_H
 1

	)

22 
	~<„©uªs.h
>

25 
	~<bôs/ty≥s.h
>

27 
	#__√ed_size_t


	)

28 
	#__√ed_NULL


	)

29 
	~<°ddef.h
>

31 
	~<bôs/ty≥s/time_t.h
>

32 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

33 #i‚de‡
__USE_XOPEN2K


34 
	~<time.h
>

37 #i‚de‡
__pid_t_deföed


38 
__pid_t
 
	tpid_t
;

39 
	#__pid_t_deföed


	)

43 
	~<bôs/sched.h
>

44 
	~<bôs/˝u-£t.h
>

47 
	#sched_¥i‹ôy
 
sched_¥i‹ôy


	)

48 
	#__sched_¥i‹ôy
 
sched_¥i‹ôy


	)

51 
__BEGIN_DECLS


54 
	$sched_£ç¨am
 (
__pid_t
 
__pid
, c⁄° 
sched_∑øm
 *
__∑øm
)

55 
__THROW
;

58 
	$sched_gë∑øm
 (
__pid_t
 
__pid
, 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

61 
	$sched_£tscheduÀr
 (
__pid_t
 
__pid
, 
__pﬁicy
,

62 c⁄° 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

65 
	$sched_gëscheduÀr
 (
__pid_t
 
__pid
Ë
__THROW
;

68 
	$sched_yõld
 (Ë
__THROW
;

71 
	$sched_gë_¥i‹ôy_max
 (
__Æg‹ôhm
Ë
__THROW
;

74 
	$sched_gë_¥i‹ôy_mö
 (
__Æg‹ôhm
Ë
__THROW
;

77 #i‚de‡
__USE_TIME_BITS64


78 
	$sched_º_gë_öãrvÆ
 (
__pid_t
 
__pid
, 
time•ec
 *
__t
Ë
__THROW
;

80 #ifde‡
__REDIRECT_NTH


81 
	`__REDIRECT_NTH
 (
sched_º_gë_öãrvÆ
,

82 (
__pid_t
 
__pid
, 
time•ec
 *
__t
),

83 
__sched_º_gë_öãrvÆ64
);

85 
	#sched_º_gë_öãrvÆ
 
__sched_º_gë_öãrvÆ64


	)

89 #ifde‡
__USE_GNU


91 
	#CPU_SETSIZE
 
__CPU_SETSIZE


	)

92 
	#CPU_SET
(
˝u
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

93 
	#CPU_CLR
(
˝u
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

94 
	#CPU_ISSET
(
˝u
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (˝u,  (
˝u_£t_t
), \

95 
˝u£ç
)

	)

96 
	#CPU_ZERO
(
˝u£ç
Ë
	`__CPU_ZERO_S
 ( (
˝u_£t_t
), cpu£ç)

	)

97 
	#CPU_COUNT
(
˝u£ç
Ë
	`__CPU_COUNT_S
 ( (
˝u_£t_t
), cpu£ç)

	)

99 
	#CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u, sësize, cpu£ç)

	)

100 
	#CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u, sësize, cpu£ç)

	)

101 
	#CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (cpu, setsize, \

102 
˝u£ç
)

	)

103 
	#CPU_ZERO_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_ZERO_S
 (£tsize, cpu£ç)

	)

104 
	#CPU_COUNT_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_COUNT_S
 (£tsize, cpu£ç)

	)

106 
	#CPU_EQUAL
(
˝u£ç1
, 
˝u£ç2
) \

107 
	`__CPU_EQUAL_S
 ( (
˝u_£t_t
), 
˝u£ç1
, 
˝u£ç2
)

	)

108 
	#CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

109 
	`__CPU_EQUAL_S
 (
£tsize
, 
˝u£ç1
, 
˝u£ç2
)

	)

111 
	#CPU_AND
(
de°£t
, 
§c£t1
, 
§c£t2
) \

112 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

113 
	#CPU_OR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

114 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

115 
	#CPU_XOR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

116 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

117 
	#CPU_AND_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

118 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

119 
	#CPU_OR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

120 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

121 
	#CPU_XOR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

122 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

124 
	#CPU_ALLOC_SIZE
(
cou¡
Ë
	`__CPU_ALLOC_SIZE
 (cou¡)

	)

125 
	#CPU_ALLOC
(
cou¡
Ë
	`__CPU_ALLOC
 (cou¡)

	)

126 
	#CPU_FREE
(
˝u£t
Ë
	`__CPU_FREE
 (˝u£t)

	)

130 
	$sched_£èfföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

131 c⁄° 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

134 
	$sched_gëafföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

135 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

138 
__END_DECLS


	@/usr/include/search.h

19 #i‚de‡
_SEARCH_H


20 
	#_SEARCH_H
 1

	)

22 
	~<„©uªs.h
>

24 
	#__√ed_size_t


	)

25 
	~<°ddef.h
>

27 
	g__BEGIN_DECLS


29 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


33 #ifde‡
__USE_GNU


34 
	sqñem


36 
qñem
 *
	mq_f‹w
;

37 
qñem
 *
	mq_back
;

38 
	mq_d©a
[1];

44 
	$ösque
 (*
__ñem
, *
__¥ev
Ë
__THROW
;

47 
	$ªmque
 (*
__ñem
Ë
__THROW
;

52 #i‚de‡
__COMPAR_FN_T


53 
	#__COMPAR_FN_T


	)

54 (*
	t__com∑r_‚_t
) (const *, const *);

56 #ifdef 
__USE_GNU


57 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

64 
FIND
,

65 
ENTER


67 
	tACTION
;

69 
	síåy


71 *
key
;

72 *
d©a
;

74 
	tENTRY
;

77 
_ENTRY
;

87 
ENTRY
 *
	$h£¨ch
 (
ENTRY
 
__ôem
, 
ACTION
 
__a˘i⁄
Ë
__THROW
;

90 
	$h¸óã
 (
size_t
 
__√l
Ë
__THROW
;

93 
	$hde°roy
 (Ë
__THROW
;

95 #ifde‡
__USE_GNU


97 
	sh£¨ch_d©a


99 
_ENTRY
 *
èbÀ
;

100 
size
;

101 
fûÀd
;

106 
	$h£¨ch_r
 (
ENTRY
 
__ôem
, 
ACTION
 
__a˘i⁄
, ENTRY **
__ªtvÆ
,

107 
h£¨ch_d©a
 *
__hèb
Ë
__THROW
;

108 
	$h¸óã_r
 (
size_t
 
__√l
, 
h£¨ch_d©a
 *
__hèb
Ë
__THROW
;

109 
	$hde°roy_r
 (
h£¨ch_d©a
 *
__hèb
Ë
__THROW
;

120 
¥e‹dî
,

121 
po°‹dî
,

122 
íd‹dî
,

123 
Àaf


125 
	tVISIT
;

129 *
	`t£¨ch
 (c⁄° *
__key
, **
__roŸp
,

130 
__com∑r_‚_t
 
__com∑r
);

134 *
	`tföd
 (c⁄° *
__key
, *c⁄° *
__roŸp
,

135 
__com∑r_‚_t
 
__com∑r
);

138 *
	`tdñëe
 (c⁄° *
__ª°ri˘
 
__key
,

139 **
__ª°ri˘
 
__roŸp
,

140 
__com∑r_‚_t
 
__com∑r
);

142 #i‚de‡
__ACTION_FN_T


143 
	#__ACTION_FN_T


	)

144 (*
	t__a˘i⁄_‚_t
Ë(c⁄° *
	t__nodï
, 
	tVISIT
 
	t__vÆue
,

145 
	t__Àvñ
);

150 
	`twÆk
 (c⁄° *
__roŸ
, 
__a˘i⁄_‚_t
 
__a˘i⁄
);

152 #ifde‡
__USE_GNU


155 
	`twÆk_r
 (c⁄° *
__roŸ
,

156 (*Ë(c⁄° *
__nodï
, 
VISIT
 
__vÆue
,

157 *
__˛osuª
),

158 *
__˛osuª
);

162 (*
	t__‰ì_‚_t
Ë(*
	t__nodï
);

165 
	`tde°roy
 (*
__roŸ
, 
__‰ì_‚_t
 
__‰ìf˘
);

171 *
	`lföd
 (c⁄° *
__key
, c⁄° *
__ba£
,

172 
size_t
 *
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
);

176 *
	`l£¨ch
 (c⁄° *
__key
, *
__ba£
,

177 
size_t
 *
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
);

179 
__END_DECLS


	@/usr/include/semaphore.h

18 #i‚de‡
_SEMAPHORE_H


19 
	#_SEMAPHORE_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<sys/ty≥s.h
>

23 #ifde‡
__USE_XOPEN2K


24 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

28 
	~<bôs/£m≠h‹e.h
>

31 
__BEGIN_DECLS


35 
	$£m_öô
 (
£m_t
 *
__£m
, 
__psh¨ed
, 
__vÆue
)

36 
__THROW
 
	`__n⁄nuŒ
 ((1));

39 
	$£m_de°roy
 (
£m_t
 *
__£m
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

42 
£m_t
 *
	$£m_›í
 (c⁄° *
__«me
, 
__oÊag
, ...)

43 
__THROW
 
	`__n⁄nuŒ
 ((1));

46 
	$£m_˛o£
 (
£m_t
 *
__£m
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

49 
	$£m_u∆ök
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

55 
	$£m_waô
 (
£m_t
 *
__£m
Ë
	`__n⁄nuŒ
 ((1));

57 #ifde‡
__USE_XOPEN2K


62 #i‚de‡
__USE_TIME_BITS64


63 
	$£m_timedwaô
 (
£m_t
 *
__ª°ri˘
 
__£m
,

64 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
)

65 
	`__n⁄nuŒ
 ((1, 2));

67 #ifde‡
__REDIRECT


68 
	`__REDIRECT
 (
£m_timedwaô
,

69 (
£m_t
 *
__ª°ri˘
 
__£m
,

70 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
),

71 
__£m_timedwaô64
)

72 
	`__n⁄nuŒ
 ((1, 2));

74 
	#£m_timedwaô
 
__£m_timedwaô64


	)

79 #ifde‡
__USE_GNU


80 #i‚de‡
__USE_TIME_BITS64


81 
	$£m_˛ockwaô
 (
£m_t
 *
__ª°ri˘
 
__£m
,

82 
˛ockid_t
 
˛ock
,

83 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
)

84 
	`__n⁄nuŒ
 ((1, 3));

86 #ifde‡
__REDIRECT


87 
	`__REDIRECT
 (
£m_˛ockwaô
,

88 (
£m_t
 *
__ª°ri˘
 
__£m
,

89 
˛ockid_t
 
˛ock
,

90 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
),

91 
__£m_˛ockwaô64
)

92 
	`__n⁄nuŒ
 ((1, 3));

94 
	#£m_˛ockwaô
 
__£m_˛ockwaô64


	)

100 
	$£m_åywaô
 (
£m_t
 *
__£m
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1));

103 
	$£m_po°
 (
£m_t
 *
__£m
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1));

106 
	$£m_gëvÆue
 (
£m_t
 *
__ª°ri˘
 
__£m
, *__ª°ri˘ 
__svÆ
)

107 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

110 
__END_DECLS


	@/usr/include/setjmp.h

22 #i‚def 
_SETJMP_H


23 
	#_SETJMP_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/£tjmp.h
>

30 
	~<bôs/ty≥s/°ru˘___jmp_buf_èg.h
>

32 
__jmp_buf_èg
 
	tjmp_buf
[1];

36 
	$£tjmp
 (
jmp_buf
 
__ív
Ë
__THROWNL
;

41 
	$__sig£tjmp
 (
__jmp_buf_èg
 
__ív
[1], 
__ßvemask
Ë
__THROWNL
;

45 
	$_£tjmp
 (
__jmp_buf_èg
 
__ív
[1]Ë
__THROWNL
;

49 
	#£tjmp
(
ív
Ë
	`_£tjmp
 (ív)

	)

54 
	$l⁄gjmp
 (
__jmp_buf_èg
 
__ív
[1], 
__vÆ
)

55 
__THROWNL
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

57 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


61 
	$_l⁄gjmp
 (
__jmp_buf_èg
 
__ív
[1], 
__vÆ
)

62 
__THROWNL
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

66 #ifdef 
__USE_POSIX


70 
__jmp_buf_èg
 
	tsigjmp_buf
[1];

74 
	#sig£tjmp
(
ív
, 
ßvemask
Ë
	`__sig£tjmp
 (ív, savemask)

	)

80 
	$sigl⁄gjmp
 (
sigjmp_buf
 
__ív
, 
__vÆ
)

81 
__THROWNL
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

86 #i‡
__USE_FORTIFY_LEVEL
 > 0

87 
	~<bôs/£tjmp2.h
>

90 
__END_DECLS


	@/usr/include/sgtty.h

18 #i‚def 
_SGTTY_H


19 
	#_SGTTY_H
 1

	)

21 
	~<„©uªs.h
>

23 
	~<sys/io˘l.h
>

27 
	gsgâyb
;

29 
__BEGIN_DECLS


32 
	$gây
 (
__fd
, 
sgâyb
 *
__∑øms
Ë
__THROW
;

35 
	$°ty
 (
__fd
, c⁄° 
sgâyb
 *
__∑øms
Ë
__THROW
;

38 
__END_DECLS


	@/usr/include/shadow.h

24 #i‚de‡
_SHADOW_H


25 
	#_SHADOW_H
 1

	)

27 
	~<„©uªs.h
>

29 
	~<∑ths.h
>

31 
	#__√ed_size_t


	)

32 
	~<°ddef.h
>

34 
	~<bôs/ty≥s/FILE.h
>

37 
	#SHADOW
 
_PATH_SHADOW


	)

40 
__BEGIN_DECLS


43 
	s•wd


45 *
	m•_«mp
;

46 *
	m•_pwdp
;

47 
	m•_l°chg
;

48 
	m•_mö
;

49 
	m•_max
;

50 
	m•_w¨n
;

52 
	m•_öa˘
;

54 
	m•_expúe
;

56 
	m•_Êag
;

66 
£t•ít
 ();

74 
íd•ít
 ();

82 
•wd
 *
gë•ít
 ();

90 
•wd
 *
gë•«m
 (c⁄° *
__«me
);

98 
•wd
 *
sgë•ít
 (c⁄° *
__°rög
);

106 
•wd
 *
fgë•ít
 (
FILE
 *
__°ªam
);

114 
put•ít
 (c⁄° 
•wd
 *
__p
, 
FILE
 *
__°ªam
);

117 #ifde‡
__USE_MISC


124 
gë•ít_r
 (
•wd
 *
__ªsu…_buf
, *
__buf„r
,

125 
size_t
 
__buÊí
, 
•wd
 **
__ªsu…
);

127 
gë•«m_r
 (c⁄° *
__«me
, 
•wd
 *
__ªsu…_buf
,

128 *
__buf„r
, 
size_t
 
__buÊí
,

129 
•wd
 **
__ªsu…
);

131 
sgë•ít_r
 (c⁄° *
__°rög
, 
•wd
 *
__ªsu…_buf
,

132 *
__buf„r
, 
size_t
 
__buÊí
,

133 
•wd
 **
__ªsu…
);

135 
fgë•ít_r
 (
FILE
 *
__°ªam
, 
•wd
 *
__ªsu…_buf
,

136 *
__buf„r
, 
size_t
 
__buÊí
,

137 
•wd
 **
__ªsu…
);

145 
	$lckpwdf
 (Ë
__THROW
;

148 
	$ulckpwdf
 (Ë
__THROW
;

150 
__END_DECLS


	@/usr/include/signal.h

22 #i‚def 
_SIGNAL_H


23 
	#_SIGNAL_H


	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

30 
	~<bôs/signum-gíîic.h
>

32 
	~<bôs/ty≥s/sig_©omic_t.h
>

34 #i‡
deföed
 
__USE_POSIX


35 
	~<bôs/ty≥s/sig£t_t.h
>

38 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


39 #i‚de‡
__pid_t_deföed


40 
__pid_t
 
	tpid_t
;

41 
	#__pid_t_deföed


	)

43 #ifde‡
__USE_XOPEN


45 #i‚de‡
__uid_t_deföed


46 
__uid_t
 
	tuid_t
;

47 
	#__uid_t_deföed


	)

51 #ifde‡
__USE_POSIX199309


53 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

56 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_XOPEN_EXTENDED


57 
	~<bôs/ty≥s/sigöfo_t.h
>

58 
	~<bôs/sigöfo-c⁄°s.h
>

61 #ifde‡
__USE_MISC


62 
	~<bôs/ty≥s/sigvÆ_t.h
>

65 #ifde‡
__USE_POSIX199309


66 
	~<bôs/ty≥s/sigevít_t.h
>

67 
	~<bôs/sigevít-c⁄°s.h
>

72 (*
	t__sigh™dÀr_t
) ();

77 
__sigh™dÀr_t
 
	$__sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

78 
__THROW
;

79 #ifde‡
__USE_GNU


80 
__sigh™dÀr_t
 
	$sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

81 
__THROW
;

87 #ifde‡
__USE_MISC


88 
__sigh™dÀr_t
 
	$sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

89 
__THROW
;

92 #ifde‡
__REDIRECT_NTH


93 
__sigh™dÀr_t
 
	`__REDIRECT_NTH
 (
sig«l
,

94 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
),

95 
__sysv_sig«l
);

97 
	#sig«l
 
__sysv_sig«l


	)

101 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8


104 
__sigh™dÀr_t
 
	$bsd_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

105 
__THROW
;

111 #ifde‡
__USE_POSIX


112 
	$kûl
 (
__pid_t
 
__pid
, 
__sig
Ë
__THROW
;

115 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


119 
	$kûÕg
 (
__pid_t
 
__pgΩ
, 
__sig
Ë
__THROW
;

123 
	$øi£
 (
__sig
Ë
__THROW
;

125 #ifde‡
__USE_MISC


127 
__sigh™dÀr_t
 
	$ssig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

128 
__THROW
;

129 
	$gsig«l
 (
__sig
Ë
__THROW
;

132 #ifde‡
__USE_XOPEN2K8


134 
	`psig«l
 (
__sig
, c⁄° *
__s
);

137 
	`psigöfo
 (c⁄° 
sigöfo_t
 *
__pöfo
, c⁄° *
__s
);

149 #ifde‡
__USE_XOPEN_EXTENDED


150 #ifde‡
__GNUC__


151 
	$sig∑u£
 (
__sig
Ë
	`__asm__
 ("__xpg_sigpause")

152 
	`__©åibuã_dïªˇãd_msg__
 ("UseÅhe sigsuspend function instead");

154 
	`__sig∑u£
 (
__sig_‹_mask
, 
__is_sig
);

156 
	#sig∑u£
(
sig
Ë
	`__sig∑u£
 ((sig), 1)

	)

161 #ifde‡
__USE_MISC


168 
	#sigmask
(
sig
) \

169 
	`__glibc_ma¸o_w¨nög
 ("sigmask is deprecated") \

170 (()(1u << ((
sig
Ë- 1)))

	)

173 
	$sigblock
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

176 
	$sig£tmask
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

179 
	$siggëmask
 (Ë
__THROW
 
__©åibuã_dïªˇãd__
;

183 #ifde‡
__USE_MISC


184 
	#NSIG
 
_NSIG


	)

187 #ifde‡
__USE_GNU


188 
__sigh™dÀr_t
 
	tsigh™dÀr_t
;

192 #ifde‡
__USE_MISC


193 
__sigh™dÀr_t
 
	tsig_t
;

196 #ifde‡
__USE_POSIX


199 
	$sigem±y£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

202 
	$sigfûl£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

205 
	$sigadd£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

208 
	$sigdñ£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

211 
	$sigismembî
 (c⁄° 
sig£t_t
 *
__£t
, 
__signo
)

212 
__THROW
 
	`__n⁄nuŒ
 ((1));

214 #ifde‡
__USE_GNU


216 
	$sigi£m±y£t
 (c⁄° 
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

219 
	$sig™d£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

220 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

223 
	$sig‹£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

224 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

229 
	~<bôs/siga˘i⁄.h
>

232 
	$sig¥ocmask
 (
__how
, c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

233 
sig£t_t
 *
__ª°ri˘
 
__o£t
Ë
__THROW
;

240 
	$sigsu•íd
 (c⁄° 
sig£t_t
 *
__£t
Ë
	`__n⁄nuŒ
 ((1));

243 
	$siga˘i⁄
 (
__sig
, c⁄° 
siga˘i⁄
 *
__ª°ri˘
 
__a˘
,

244 
siga˘i⁄
 *
__ª°ri˘
 
__ﬂ˘
Ë
__THROW
;

247 
	$sig≥ndög
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

250 #ifde‡
__USE_POSIX199506


255 
	$sigwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
, *__ª°ri˘ 
__sig
)

256 
	`__n⁄nuŒ
 ((1, 2));

259 #ifde‡
__USE_POSIX199309


264 
	$sigwaôöfo
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

265 
sigöfo_t
 *
__ª°ri˘
 
__öfo
Ë
	`__n⁄nuŒ
 ((1));

272 #i‚de‡
__USE_TIME_BITS64


273 
	$sigtimedwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

274 
sigöfo_t
 *
__ª°ri˘
 
__öfo
,

275 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
)

276 
	`__n⁄nuŒ
 ((1));

278 #ifde‡
__REDIRECT


279 
	`__REDIRECT
 (
sigtimedwaô
,

280 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

281 
sigöfo_t
 *
__ª°ri˘
 
__öfo
,

282 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
),

283 
__sigtimedwaô64
)

284 
	`__n⁄nuŒ
 ((1));

286 
	#sigtimedwaô
 
__sigtimedwaô64


	)

292 
	$sigqueue
 (
__pid_t
 
__pid
, 
__sig
, c⁄° 
sigvÆ
 
__vÆ
)

293 
__THROW
;

298 #ifde‡
__USE_MISC


301 
	~<bôs/sigc⁄ãxt.h
>

304 
	$sigªtu∫
 (
sigc⁄ãxt
 *
__s˝
Ë
__THROW
;

309 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


310 
	#__√ed_size_t


	)

311 
	~<°ddef.h
>

313 
	~<bôs/ty≥s/°ack_t.h
>

314 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


316 
	~<sys/uc⁄ãxt.h
>

320 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_MISC


324 
	$sigöãºu±
 (
__sig
, 
__öãºu±
Ë
__THROW


325 
	`__©åibuã_dïªˇãd_msg__
 ("Use sigaction with SA_RESTART instead");

327 
	~<bôs/sig°ack.h
>

328 
	~<bôs/sig°ksz.h
>

329 
	~<bôs/ss_Êags.h
>

333 
	$sigÆt°ack
 (c⁄° 
°ack_t
 *
__ª°ri˘
 
__ss
,

334 
°ack_t
 *
__ª°ri˘
 
__oss
Ë
__THROW
;

337 #i‡((
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

338 || 
deföed
 
__USE_MISC
)

339 
	~<bôs/ty≥s/°ru˘_sig°ack.h
>

342 #i‡((
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

343 || 
deföed
 
__USE_MISC
)

347 
	$sig°ack
 (
sig°ack
 *
__ss
, sig°ack *
__oss
)

348 
__THROW
 
__©åibuã_dïªˇãd__
;

351 #ifde‡
__USE_XOPEN_EXTENDED


355 
	$sighﬁd
 (
__sig
Ë
__THROW


356 
	`__©åibuã_dïªˇãd_msg__
 ("UseÅhe sigprocmask function instead");

359 
	$sigªl£
 (
__sig
Ë
__THROW


360 
	`__©åibuã_dïªˇãd_msg__
 ("UseÅhe sigprocmask function instead");

363 
	$sigign‹e
 (
__sig
Ë
__THROW


364 
	`__©åibuã_dïªˇãd_msg__
 ("UseÅhe signal function instead");

367 
__sigh™dÀr_t
 
	$sig£t
 (
__sig
, 
__sigh™dÀr_t
 
__di•
Ë
__THROW


368 
__©åibuã_dïªˇãd_msg__


372 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


375 
	~<bôs/±hªadty≥s.h
>

376 
	~<bôs/sigthªad.h
>

383 
	$__libc_cuºít_sigπmö
 (Ë
__THROW
;

385 
	$__libc_cuºít_sigπmax
 (Ë
__THROW
;

387 
	#SIGRTMIN
 (
	`__libc_cuºít_sigπmö
 ())

	)

388 
	#SIGRTMAX
 (
	`__libc_cuºít_sigπmax
 ())

	)

391 
	~<bôs/sig«l_ext.h
>

393 
__END_DECLS


	@/usr/include/spawn.h

19 #i‚def 
_SPAWN_H


20 
	#_SPAWN_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<sched.h
>

24 
	~<sys/ty≥s.h
>

25 
	~<bôs/ty≥s/sig£t_t.h
>

31 
	m__Êags
;

32 
pid_t
 
	m__pgΩ
;

33 
sig£t_t
 
	m__sd
;

34 
sig£t_t
 
	m__ss
;

35 
sched_∑øm
 
	m__•
;

36 
	m__pﬁicy
;

37 
	m__∑d
[16];

38 } 
	tposix_•aw«âr_t
;

45 
	m__Æloˇãd
;

46 
	m__u£d
;

47 
__•awn_a˘i⁄
 *
	m__a˘i⁄s
;

48 
	m__∑d
[16];

49 } 
	tposix_•awn_fûe_a˘i⁄s_t
;

53 
	#POSIX_SPAWN_RESETIDS
 0x01

	)

54 
	#POSIX_SPAWN_SETPGROUP
 0x02

	)

55 
	#POSIX_SPAWN_SETSIGDEF
 0x04

	)

56 
	#POSIX_SPAWN_SETSIGMASK
 0x08

	)

57 
	#POSIX_SPAWN_SETSCHEDPARAM
 0x10

	)

58 
	#POSIX_SPAWN_SETSCHEDULER
 0x20

	)

59 #ifde‡
__USE_GNU


60 
	#POSIX_SPAWN_USEVFORK
 0x40

	)

61 
	#POSIX_SPAWN_SETSID
 0x80

	)

65 
__BEGIN_DECLS


72 
	$posix_•awn
 (
pid_t
 *
__ª°ri˘
 
__pid
,

73 c⁄° *
__ª°ri˘
 
__∑th
,

74 c⁄° 
posix_•awn_fûe_a˘i⁄s_t
 *
__ª°ri˘


75 
__fûe_a˘i⁄s
,

76 c⁄° 
posix_•aw«âr_t
 *
__ª°ri˘
 
__©åp
,

77 *c⁄° 
__¨gv
[
__ª°ri˘_¨r
],

78 *c⁄° 
__ívp
[
__ª°ri˘_¨r
])

79 
	`__n⁄nuŒ
 ((2, 5));

85 
	$posix_•aw≈
 (
pid_t
 *
__pid
, c⁄° *
__fûe
,

86 c⁄° 
posix_•awn_fûe_a˘i⁄s_t
 *
__fûe_a˘i⁄s
,

87 c⁄° 
posix_•aw«âr_t
 *
__©åp
,

88 *c⁄° 
__¨gv
[], *c⁄° 
__ívp
[])

89 
	`__n⁄nuŒ
 ((2, 5));

93 
	$posix_•aw«âr_öô
 (
posix_•aw«âr_t
 *
__©å
)

94 
__THROW
 
	`__n⁄nuŒ
 ((1));

97 
	$posix_•aw«âr_de°roy
 (
posix_•aw«âr_t
 *
__©å
)

98 
__THROW
 
	`__n⁄nuŒ
 ((1));

102 
	$posix_•aw«âr_gësigdeÁu…
 (c⁄° 
posix_•aw«âr_t
 *

103 
__ª°ri˘
 
__©å
,

104 
sig£t_t
 *
__ª°ri˘
 
__sigdeÁu…
)

105 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

108 
	$posix_•aw«âr_£tsigdeÁu…
 (
posix_•aw«âr_t
 *
__ª°ri˘
 
__©å
,

109 c⁄° 
sig£t_t
 *
__ª°ri˘


110 
__sigdeÁu…
)

111 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

114 
	$posix_•aw«âr_gësigmask
 (c⁄° 
posix_•aw«âr_t
 *
__ª°ri˘


115 
__©å
,

116 
sig£t_t
 *
__ª°ri˘
 
__sigmask
)

117 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

120 
	$posix_•aw«âr_£tsigmask
 (
posix_•aw«âr_t
 *
__ª°ri˘
 
__©å
,

121 c⁄° 
sig£t_t
 *
__ª°ri˘
 
__sigmask
)

122 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

125 
	$posix_•aw«âr_gëÊags
 (c⁄° 
posix_•aw«âr_t
 *
__ª°ri˘


126 
__©å
,

127 *
__ª°ri˘
 
__Êags
)

128 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

131 
	$posix_•aw«âr_£tÊags
 (
posix_•aw«âr_t
 *
_©å
,

132 
__Êags
)

133 
__THROW
 
	`__n⁄nuŒ
 ((1));

136 
	$posix_•aw«âr_gëpgroup
 (c⁄° 
posix_•aw«âr_t
 *
__ª°ri˘


137 
__©å
, 
pid_t
 *
__ª°ri˘
 
__pgroup
)

138 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

141 
	$posix_•aw«âr_£çgroup
 (
posix_•aw«âr_t
 *
__©å
,

142 
pid_t
 
__pgroup
)

143 
__THROW
 
	`__n⁄nuŒ
 ((1));

146 
	$posix_•aw«âr_gëschedpﬁicy
 (c⁄° 
posix_•aw«âr_t
 *

147 
__ª°ri˘
 
__©å
,

148 *
__ª°ri˘
 
__schedpﬁicy
)

149 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

152 
	$posix_•aw«âr_£tschedpﬁicy
 (
posix_•aw«âr_t
 *
__©å
,

153 
__schedpﬁicy
)

154 
__THROW
 
	`__n⁄nuŒ
 ((1));

157 
	$posix_•aw«âr_gësched∑øm
 (c⁄° 
posix_•aw«âr_t
 *

158 
__ª°ri˘
 
__©å
,

159 
sched_∑øm
 *
__ª°ri˘


160 
__sched∑øm
)

161 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

164 
	$posix_•aw«âr_£tsched∑øm
 (
posix_•aw«âr_t
 *
__ª°ri˘
 
__©å
,

165 c⁄° 
sched_∑øm
 *

166 
__ª°ri˘
 
__sched∑øm
)

167 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

170 
	$posix_•awn_fûe_a˘i⁄s_öô
 (
posix_•awn_fûe_a˘i⁄s_t
 *

171 
__fûe_a˘i⁄s
)

172 
__THROW
 
	`__n⁄nuŒ
 ((1));

175 
	$posix_•awn_fûe_a˘i⁄s_de°roy
 (
posix_•awn_fûe_a˘i⁄s_t
 *

176 
__fûe_a˘i⁄s
)

177 
__THROW
 
	`__n⁄nuŒ
 ((1));

181 
	$posix_•awn_fûe_a˘i⁄s_add›í
 (
posix_•awn_fûe_a˘i⁄s_t
 *

182 
__ª°ri˘
 
__fûe_a˘i⁄s
,

183 
__fd
,

184 c⁄° *
__ª°ri˘
 
__∑th
,

185 
__oÊag
, 
mode_t
 
__mode
)

186 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

190 
	$posix_•awn_fûe_a˘i⁄s_add˛o£
 (
posix_•awn_fûe_a˘i⁄s_t
 *

191 
__fûe_a˘i⁄s
, 
__fd
)

192 
__THROW
 
	`__n⁄nuŒ
 ((1));

196 
	$posix_•awn_fûe_a˘i⁄s_adddup2
 (
posix_•awn_fûe_a˘i⁄s_t
 *

197 
__fûe_a˘i⁄s
,

198 
__fd
, 
__√wfd
)

199 
__THROW
 
	`__n⁄nuŒ
 ((1));

201 #ifde‡
__USE_GNU


204 
	$posix_•awn_fûe_a˘i⁄s_addchdú_≈
 (
posix_•awn_fûe_a˘i⁄s_t
 *

205 
__ª°ri˘
 
__a˘i⁄s
,

206 c⁄° *
__ª°ri˘
 
__∑th
)

207 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

212 
	$posix_•awn_fûe_a˘i⁄s_addfchdú_≈
 (
posix_•awn_fûe_a˘i⁄s_t
 *,

213 
__fd
)

214 
__THROW
 
	`__n⁄nuŒ
 ((1));

219 
	$posix_•awn_fûe_a˘i⁄s_add˛o£‰om_≈
 (
posix_•awn_fûe_a˘i⁄s_t
 *,

220 
__‰om
)

221 
__THROW
 
	`__n⁄nuŒ
 ((1));

226 
	$posix_•awn_fûe_a˘i⁄s_addtc£çgΩ_≈
 (
posix_•awn_fûe_a˘i⁄s_t
 *,

227 
__tcfd
)

228 
__THROW
 
	`__n⁄nuŒ
 ((1));

232 
__END_DECLS


	@/usr/include/stab.h

1 #i‚de‡
__GNU_STAB__


5 
	#__GNU_STAB__


	)

7 
	#__deföe_°ab
(
NAME
, 
CODE
, 
STRING
ËNAME=CODE,

	)

9 
	e__°ab_debug_code


11 
	~<bôs/°ab.def
>

12 
	mLAST_UNUSED_STAB_CODE


15 #unde‡
__deföe_°ab


	@/usr/include/stdc-predef.h

18 #i‚def 
_STDC_PREDEF_H


19 
	#_STDC_PREDEF_H
 1

	)

36 #ifde‡
__GCC_IEC_559


37 #i‡
__GCC_IEC_559
 > 0

38 
	#__STDC_IEC_559__
 1

	)

39 
	#__STDC_IEC_60559_BFP__
 201404L

	)

42 
	#__STDC_IEC_559__
 1

	)

43 
	#__STDC_IEC_60559_BFP__
 201404L

	)

46 #ifde‡
__GCC_IEC_559_COMPLEX


47 #i‡
__GCC_IEC_559_COMPLEX
 > 0

48 
	#__STDC_IEC_559_COMPLEX__
 1

	)

49 
	#__STDC_IEC_60559_COMPLEX__
 201404L

	)

52 
	#__STDC_IEC_559_COMPLEX__
 1

	)

53 
	#__STDC_IEC_60559_COMPLEX__
 201404L

	)

62 
	#__STDC_ISO_10646__
 201706L

	)

	@/usr/include/stdint.h

22 #i‚de‡
_STDINT_H


23 
	#_STDINT_H
 1

	)

25 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

26 
	~<bôs/libc-hódî-°¨t.h
>

27 
	~<bôs/ty≥s.h
>

28 
	~<bôs/wch¨.h
>

29 
	~<bôs/w‹dsize.h
>

34 
	~<bôs/°döt-öä.h
>

37 
	~<bôs/°döt-uöä.h
>

43 
__öt_Àa°8_t
 
	töt_Àa°8_t
;

44 
__öt_Àa°16_t
 
	töt_Àa°16_t
;

45 
__öt_Àa°32_t
 
	töt_Àa°32_t
;

46 
__öt_Àa°64_t
 
	töt_Àa°64_t
;

49 
__uöt_Àa°8_t
 
	tuöt_Àa°8_t
;

50 
__uöt_Àa°16_t
 
	tuöt_Àa°16_t
;

51 
__uöt_Àa°32_t
 
	tuöt_Àa°32_t
;

52 
__uöt_Àa°64_t
 
	tuöt_Àa°64_t
;

58 sig√d 
	töt_Á°8_t
;

59 #i‡
__WORDSIZE
 == 64

60 
	töt_Á°16_t
;

61 
	töt_Á°32_t
;

62 
	töt_Á°64_t
;

64 
	töt_Á°16_t
;

65 
	töt_Á°32_t
;

66 
__exãnsi⁄__


67 
	töt_Á°64_t
;

71 
	tuöt_Á°8_t
;

72 #i‡
__WORDSIZE
 == 64

73 
	tuöt_Á°16_t
;

74 
	tuöt_Á°32_t
;

75 
	tuöt_Á°64_t
;

77 
	tuöt_Á°16_t
;

78 
	tuöt_Á°32_t
;

79 
__exãnsi⁄__


80 
	tuöt_Á°64_t
;

85 #i‡
__WORDSIZE
 == 64

86 #i‚de‡
__öçå_t_deföed


87 
	töçå_t
;

88 
	#__öçå_t_deföed


	)

90 
	tuöçå_t
;

92 #i‚de‡
__öçå_t_deföed


93 
	töçå_t
;

94 
	#__öçå_t_deföed


	)

96 
	tuöçå_t
;

101 
__ötmax_t
 
	tötmax_t
;

102 
__uötmax_t
 
	tuötmax_t
;

105 #i‡
__WORDSIZE
 == 64

106 
	#__INT64_C
(
c
Ë¯## 
L


	)

107 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

109 
	#__INT64_C
(
c
Ë¯## 
LL


	)

110 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

116 
	#INT8_MIN
 (-128)

	)

117 
	#INT16_MIN
 (-32767-1)

	)

118 
	#INT32_MIN
 (-2147483647-1)

	)

119 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

121 
	#INT8_MAX
 (127)

	)

122 
	#INT16_MAX
 (32767)

	)

123 
	#INT32_MAX
 (2147483647)

	)

124 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

127 
	#UINT8_MAX
 (255)

	)

128 
	#UINT16_MAX
 (65535)

	)

129 
	#UINT32_MAX
 (4294967295U)

	)

130 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

134 
	#INT_LEAST8_MIN
 (-128)

	)

135 
	#INT_LEAST16_MIN
 (-32767-1)

	)

136 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

137 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

139 
	#INT_LEAST8_MAX
 (127)

	)

140 
	#INT_LEAST16_MAX
 (32767)

	)

141 
	#INT_LEAST32_MAX
 (2147483647)

	)

142 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

145 
	#UINT_LEAST8_MAX
 (255)

	)

146 
	#UINT_LEAST16_MAX
 (65535)

	)

147 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

148 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

152 
	#INT_FAST8_MIN
 (-128)

	)

153 #i‡
__WORDSIZE
 == 64

154 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

155 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

157 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

158 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

160 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

162 
	#INT_FAST8_MAX
 (127)

	)

163 #i‡
__WORDSIZE
 == 64

164 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

165 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

167 
	#INT_FAST16_MAX
 (2147483647)

	)

168 
	#INT_FAST32_MAX
 (2147483647)

	)

170 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

173 
	#UINT_FAST8_MAX
 (255)

	)

174 #i‡
__WORDSIZE
 == 64

175 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

176 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

178 
	#UINT_FAST16_MAX
 (4294967295U)

	)

179 
	#UINT_FAST32_MAX
 (4294967295U)

	)

181 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

185 #i‡
__WORDSIZE
 == 64

186 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

187 
	#INTPTR_MAX
 (9223372036854775807L)

	)

188 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

190 
	#INTPTR_MIN
 (-2147483647-1)

	)

191 
	#INTPTR_MAX
 (2147483647)

	)

192 
	#UINTPTR_MAX
 (4294967295U)

	)

197 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

199 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

202 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

208 #i‡
__WORDSIZE
 == 64

209 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

210 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

212 #i‡
__WORDSIZE32_PTRDIFF_LONG


213 
	#PTRDIFF_MIN
 (-2147483647L-1)

	)

214 
	#PTRDIFF_MAX
 (2147483647L)

	)

216 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

217 
	#PTRDIFF_MAX
 (2147483647)

	)

222 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

223 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

226 #i‡
__WORDSIZE
 == 64

227 
	#SIZE_MAX
 (18446744073709551615UL)

	)

229 #i‡
__WORDSIZE32_SIZE_ULONG


230 
	#SIZE_MAX
 (4294967295UL)

	)

232 
	#SIZE_MAX
 (4294967295U)

	)

237 #i‚de‡
WCHAR_MIN


239 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

240 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

244 
	#WINT_MIN
 (0u)

	)

245 
	#WINT_MAX
 (4294967295u)

	)

248 
	#INT8_C
(
c
Ë
	)
c

249 
	#INT16_C
(
c
Ë
	)
c

250 
	#INT32_C
(
c
Ë
	)
c

251 #i‡
__WORDSIZE
 == 64

252 
	#INT64_C
(
c
Ë¯## 
L


	)

254 
	#INT64_C
(
c
Ë¯## 
LL


	)

258 
	#UINT8_C
(
c
Ë
	)
c

259 
	#UINT16_C
(
c
Ë
	)
c

260 
	#UINT32_C
(
c
Ë¯## 
U


	)

261 #i‡
__WORDSIZE
 == 64

262 
	#UINT64_C
(
c
Ë¯## 
UL


	)

264 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

268 #i‡
__WORDSIZE
 == 64

269 
	#INTMAX_C
(
c
Ë¯## 
L


	)

270 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

272 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

273 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

276 #i‡
__GLIBC_USE
 (
IEC_60559_BFP_EXT_C2X
)

278 
	#INT8_WIDTH
 8

	)

279 
	#UINT8_WIDTH
 8

	)

280 
	#INT16_WIDTH
 16

	)

281 
	#UINT16_WIDTH
 16

	)

282 
	#INT32_WIDTH
 32

	)

283 
	#UINT32_WIDTH
 32

	)

284 
	#INT64_WIDTH
 64

	)

285 
	#UINT64_WIDTH
 64

	)

287 
	#INT_LEAST8_WIDTH
 8

	)

288 
	#UINT_LEAST8_WIDTH
 8

	)

289 
	#INT_LEAST16_WIDTH
 16

	)

290 
	#UINT_LEAST16_WIDTH
 16

	)

291 
	#INT_LEAST32_WIDTH
 32

	)

292 
	#UINT_LEAST32_WIDTH
 32

	)

293 
	#INT_LEAST64_WIDTH
 64

	)

294 
	#UINT_LEAST64_WIDTH
 64

	)

296 
	#INT_FAST8_WIDTH
 8

	)

297 
	#UINT_FAST8_WIDTH
 8

	)

298 
	#INT_FAST16_WIDTH
 
__WORDSIZE


	)

299 
	#UINT_FAST16_WIDTH
 
__WORDSIZE


	)

300 
	#INT_FAST32_WIDTH
 
__WORDSIZE


	)

301 
	#UINT_FAST32_WIDTH
 
__WORDSIZE


	)

302 
	#INT_FAST64_WIDTH
 64

	)

303 
	#UINT_FAST64_WIDTH
 64

	)

305 
	#INTPTR_WIDTH
 
__WORDSIZE


	)

306 
	#UINTPTR_WIDTH
 
__WORDSIZE


	)

308 
	#INTMAX_WIDTH
 64

	)

309 
	#UINTMAX_WIDTH
 64

	)

311 
	#PTRDIFF_WIDTH
 
__WORDSIZE


	)

312 
	#SIG_ATOMIC_WIDTH
 32

	)

313 
	#SIZE_WIDTH
 
__WORDSIZE


	)

314 
	#WCHAR_WIDTH
 32

	)

315 
	#WINT_WIDTH
 32

	)

	@/usr/include/stdio.h

23 #i‚de‡
_STDIO_H


24 
	#_STDIO_H
 1

	)

26 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

27 
	~<bôs/libc-hódî-°¨t.h
>

29 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	#__√ed___va_li°


	)

36 
	~<°d¨g.h
>

38 
	~<bôs/ty≥s.h
>

39 
	~<bôs/ty≥s/__Âos_t.h
>

40 
	~<bôs/ty≥s/__Âos64_t.h
>

41 
	~<bôs/ty≥s/__FILE.h
>

42 
	~<bôs/ty≥s/FILE.h
>

43 
	~<bôs/ty≥s/°ru˘_FILE.h
>

45 #ifde‡
__USE_GNU


46 
	~<bôs/ty≥s/cookõ_io_fun˘i⁄s_t.h
>

49 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


50 #ifde‡
__GNUC__


51 #i‚de‡
_VA_LIST_DEFINED


52 
__gnuc_va_li°
 
	tva_li°
;

53 
	#_VA_LIST_DEFINED


	)

56 
	~<°d¨g.h
>

60 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


61 #i‚de‡
__off_t_deföed


62 #i‚de‡
__USE_FILE_OFFSET64


63 
__off_t
 
	toff_t
;

65 
__off64_t
 
	toff_t
;

67 
	#__off_t_deföed


	)

69 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


70 
__off64_t
 
	toff64_t
;

71 
	#__off64_t_deföed


	)

75 #ifde‡
__USE_XOPEN2K8


76 #i‚de‡
__ssize_t_deföed


77 
__ssize_t
 
	tssize_t
;

78 
	#__ssize_t_deföed


	)

83 #i‚de‡
__USE_FILE_OFFSET64


84 
__Âos_t
 
	tÂos_t
;

86 
__Âos64_t
 
	tÂos_t
;

88 #ifde‡
__USE_LARGEFILE64


89 
__Âos64_t
 
	tÂos64_t
;

93 
	#_IOFBF
 0

	)

94 
	#_IOLBF
 1

	)

95 
	#_IONBF
 2

	)

99 
	#BUFSIZ
 8192

	)

104 
	#EOF
 (-1)

	)

109 
	#SEEK_SET
 0

	)

110 
	#SEEK_CUR
 1

	)

111 
	#SEEK_END
 2

	)

112 #ifde‡
__USE_GNU


113 
	#SEEK_DATA
 3

	)

114 
	#SEEK_HOLE
 4

	)

118 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


120 
	#P_tmpdú
 "/tmp"

	)

133 
	~<bôs/°dio_lim.h
>

136 #i‡
__GLIBC_USE
 (
ISOC2X
)

138 
	#_PRINTF_NAN_LEN_MAX
 4

	)

143 
FILE
 *
°dö
;

144 
FILE
 *
°dout
;

145 
FILE
 *
°dîr
;

147 
	#°dö
 
°dö


	)

148 
	#°dout
 
°dout


	)

149 
	#°dîr
 
°dîr


	)

152 
	$ªmove
 (c⁄° *
__fûíame
Ë
__THROW
;

154 
	$ª«me
 (c⁄° *
__ﬁd
, c⁄° *
__√w
Ë
__THROW
;

156 #ifde‡
__USE_ATFILE


158 
	$ª«mót
 (
__ﬁdfd
, c⁄° *
__ﬁd
, 
__√wfd
,

159 c⁄° *
__√w
Ë
__THROW
;

162 #ifde‡
__USE_GNU


164 
	#RENAME_NOREPLACE
 (1 << 0)

	)

165 
	#RENAME_EXCHANGE
 (1 << 1)

	)

166 
	#RENAME_WHITEOUT
 (1 << 2)

	)

170 
	$ª«mót2
 (
__ﬁdfd
, c⁄° *
__ﬁd
, 
__√wfd
,

171 c⁄° *
__√w
, 
__Êags
Ë
__THROW
;

178 
	`f˛o£
 (
FILE
 *
__°ªam
);

180 #unde‡
__©å_dóŒoc_f˛o£


181 
	#__©å_dóŒoc_f˛o£
 
	`__©å_dóŒoc
 (
f˛o£
, 1)

	)

187 #i‚de‡
__USE_FILE_OFFSET64


188 
FILE
 *
	$tmpfûe
 ()

189 
__©åibuã_mÆloc__
 
__©å_dóŒoc_f˛o£
 
__wur
;

191 #ifde‡
__REDIRECT


192 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
)

193 
__©åibuã_mÆloc__
 
__©å_dóŒoc_f˛o£
 
__wur
;

195 
	#tmpfûe
 
tmpfûe64


	)

199 #ifde‡
__USE_LARGEFILE64


200 
FILE
 *
	$tmpfûe64
 ()

201 
__©åibuã_mÆloc__
 
__©å_dóŒoc_f˛o£
 
__wur
;

205 *
	$tm≤am
 ([
L_tm≤am
]Ë
__THROW
 
__wur
;

207 #ifde‡
__USE_MISC


210 *
	$tm≤am_r
 (
__s
[
L_tm≤am
]Ë
__THROW
 
__wur
;

214 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


222 *
	$ãm≤am
 (c⁄° *
__dú
, c⁄° *
__pfx
)

223 
__THROW
 
__©åibuã_mÆloc__
 
__wur
 
__©å_dóŒoc_‰ì
;

230 
	`fÊush
 (
FILE
 *
__°ªam
);

232 #ifde‡
__USE_MISC


239 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

242 #ifde‡
__USE_GNU


249 
	`f˛o£Æl
 ();

253 #i‚de‡
__USE_FILE_OFFSET64


258 
FILE
 *
	$f›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

259 c⁄° *
__ª°ri˘
 
__modes
)

260 
__©åibuã_mÆloc__
 
__©å_dóŒoc_f˛o£
 
__wur
;

265 
FILE
 *
	$‰e›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

266 c⁄° *
__ª°ri˘
 
__modes
,

267 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

269 #ifde‡
__REDIRECT


270 
FILE
 *
	`__REDIRECT
 (
f›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

271 c⁄° *
__ª°ri˘
 
__modes
), 
f›í64
)

272 
__©åibuã_mÆloc__
 
__©å_dóŒoc_f˛o£
 
__wur
;

273 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

274 c⁄° *
__ª°ri˘
 
__modes
,

275 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

276 
__wur
;

278 
	#f›í
 
f›í64


	)

279 
	#‰e›í
 
‰e›í64


	)

282 #ifde‡
__USE_LARGEFILE64


283 
FILE
 *
	$f›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

284 c⁄° *
__ª°ri˘
 
__modes
)

285 
__©åibuã_mÆloc__
 
__©å_dóŒoc_f˛o£
 
__wur
;

286 
FILE
 *
	$‰e›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

287 c⁄° *
__ª°ri˘
 
__modes
,

288 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

291 #ifdef 
__USE_POSIX


293 
FILE
 *
	$fd›í
 (
__fd
, c⁄° *
__modes
Ë
__THROW


294 
__©åibuã_mÆloc__
 
__©å_dóŒoc_f˛o£
 
__wur
;

297 #ifdef 
__USE_GNU


300 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

301 c⁄° *
__ª°ri˘
 
__modes
,

302 
cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW


303 
__©åibuã_mÆloc__
 
__©å_dóŒoc_f˛o£
 
__wur
;

306 #i‡
deföed
 
__USE_XOPEN2K8
 || 
	`__GLIBC_USE
 (
LIB_EXT2
)

308 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, c⁄° *
__modes
)

309 
__THROW
 
__©åibuã_mÆloc__
 
__©å_dóŒoc_f˛o£
 
__wur
;

314 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW


315 
__©åibuã_mÆloc__
 
__©å_dóŒoc_f˛o£
 
__wur
;

317 #ifde‡
_WCHAR_H


321 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW


322 
__©åibuã_mÆloc__
 
__©å_dóŒoc_f˛o£
;

328 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

332 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

333 
__modes
, 
size_t
 
__n
Ë
__THROW
;

335 #ifdef 
__USE_MISC


338 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

339 
size_t
 
__size
Ë
__THROW
;

342 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

350 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

351 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

356 
	`¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

358 
	$•rötf
 (*
__ª°ri˘
 
__s
,

359 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROWNL
;

365 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

366 
__gnuc_va_li°
 
__¨g
);

371 
	`v¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
__gnuc_va_li°
 
__¨g
);

373 
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

374 
__gnuc_va_li°
 
__¨g
Ë
__THROWNL
;

376 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


378 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

379 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

380 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

382 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

383 c⁄° *
__ª°ri˘
 
__f‹m©
, 
__gnuc_va_li°
 
__¨g
)

384 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

387 #i‡
	`__GLIBC_USE
 (
LIB_EXT2
)

390 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__f
,

391 
__gnuc_va_li°
 
__¨g
)

392 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

393 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

394 c⁄° *
__ª°ri˘
 
__fmt
, ...)

395 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

396 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

397 c⁄° *
__ª°ri˘
 
__fmt
, ...)

398 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

401 #ifde‡
__USE_XOPEN2K8


403 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
,

404 
__gnuc_va_li°
 
__¨g
)

405 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

406 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

407 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

415 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

416 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

421 
	$sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

423 
	$ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

424 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

430 
	~<bôs/Êﬂä.h
>

431 #i‡!
	`__GLIBC_USE
 (
DEPRECATED_SCANF
Ë&& !
deföed
 
__LDBL_COMPAT
 \

432 && 
__LDOUBLE_REDIRECTS_TO_FLOAT128_ABI
 == 0

433 #ifde‡
__REDIRECT


434 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

435 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

436 
__isoc99_fsˇnf
Ë
__wur
;

437 
	`__REDIRECT
 (
sˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

438 
__isoc99_sˇnf
Ë
__wur
;

439 
	`__REDIRECT_NTH
 (
ssˇnf
, (c⁄° *
__ª°ri˘
 
__s
,

440 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

441 
__isoc99_ssˇnf
);

443 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

444 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

445 
	$__isoc99_sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

446 
	$__isoc99_ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

447 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

448 
	#fsˇnf
 
__isoc99_fsˇnf


	)

449 
	#sˇnf
 
__isoc99_sˇnf


	)

450 
	#ssˇnf
 
__isoc99_ssˇnf


	)

454 #ifdef 
__USE_ISOC99


459 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

460 
__gnuc_va_li°
 
__¨g
)

461 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

467 
	$vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
__gnuc_va_li°
 
__¨g
)

468 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

471 
	$vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

472 c⁄° *
__ª°ri˘
 
__f‹m©
, 
__gnuc_va_li°
 
__¨g
)

473 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

476 #i‡!
	`__GLIBC_USE
 (
DEPRECATED_SCANF
)

477 #i‡
deföed
 
__REDIRECT
 && !deföed 
__LDBL_COMPAT
 \

478 && 
__LDOUBLE_REDIRECTS_TO_FLOAT128_ABI
 == 0

479 
	`__REDIRECT
 (
vfsˇnf
,

480 (
FILE
 *
__ª°ri˘
 
__s
,

481 c⁄° *
__ª°ri˘
 
__f‹m©
, 
__gnuc_va_li°
 
__¨g
),

482 
__isoc99_vfsˇnf
)

483 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

484 
	`__REDIRECT
 (
vsˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
,

485 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

486 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

487 
	`__REDIRECT_NTH
 (
vssˇnf
,

488 (c⁄° *
__ª°ri˘
 
__s
,

489 c⁄° *
__ª°ri˘
 
__f‹m©
,

490 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

491 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

492 #ñi‡!
deföed
 
__REDIRECT


493 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

494 c⁄° *
__ª°ri˘
 
__f‹m©
,

495 
__gnuc_va_li°
 
__¨g
Ë
__wur
;

496 
	$__isoc99_vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
,

497 
__gnuc_va_li°
 
__¨g
Ë
__wur
;

498 
	$__isoc99_vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

499 c⁄° *
__ª°ri˘
 
__f‹m©
,

500 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

501 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

502 
	#vsˇnf
 
__isoc99_vsˇnf


	)

503 
	#vssˇnf
 
__isoc99_vssˇnf


	)

513 
	`fgëc
 (
FILE
 *
__°ªam
);

514 
	`gëc
 (
FILE
 *
__°ªam
);

520 
	`gëch¨
 ();

522 #ifde‡
__USE_POSIX199506


527 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

528 
	`gëch¨_u∆ocked
 ();

531 #ifde‡
__USE_MISC


538 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

549 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

550 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

556 
	`putch¨
 (
__c
);

558 #ifde‡
__USE_MISC


565 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

568 #ifde‡
__USE_POSIX199506


573 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

574 
	`putch¨_u∆ocked
 (
__c
);

578 #i‡
deföed
 
__USE_MISC
 \

579 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

581 
	`gëw
 (
FILE
 *
__°ªam
);

584 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

592 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

593 
__wur
 
	`__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 1, 2);

595 #i‡
	`__GLIBC_USE
 (
DEPRECATED_GETS
)

605 *
	$gës
 (*
__s
Ë
__wur
 
__©åibuã_dïªˇãd__
;

608 #ifde‡
__USE_GNU


615 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

616 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur


617 
	`__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 1, 2);

621 #i‡
deföed
 
__USE_XOPEN2K8
 || 
	`__GLIBC_USE
 (
LIB_EXT2
)

632 
__ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

633 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

634 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

635 
__ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

636 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

637 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

645 
__ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

646 
size_t
 *
__ª°ri˘
 
__n
,

647 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

655 
	`Âuts
 (c⁄° *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

661 
	`puts
 (c⁄° *
__s
);

668 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

675 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

676 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

681 
size_t
 
	`fwrôe
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

682 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

684 #ifde‡
__USE_GNU


691 
	`Âuts_u∆ocked
 (c⁄° *
__ª°ri˘
 
__s
,

692 
FILE
 *
__ª°ri˘
 
__°ªam
);

695 #ifde‡
__USE_MISC


702 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

703 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

704 
size_t
 
	`fwrôe_u∆ocked
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

705 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

713 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

718 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

723 
	`ªwöd
 (
FILE
 *
__°ªam
);

730 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


731 #i‚de‡
__USE_FILE_OFFSET64


736 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

741 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

743 #ifde‡
__REDIRECT


744 
	`__REDIRECT
 (
f£eko
,

745 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

746 
f£eko64
);

747 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

749 
	#f£eko
 
f£eko64


	)

750 
	#·ñlo
 
·ñlo64


	)

755 #i‚de‡
__USE_FILE_OFFSET64


760 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

765 
	`f£ços
 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
);

767 #ifde‡
__REDIRECT


768 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

769 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

770 
	`__REDIRECT
 (
f£ços
,

771 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
), 
f£ços64
);

773 
	#fgëpos
 
fgëpos64


	)

774 
	#f£ços
 
f£ços64


	)

778 #ifde‡
__USE_LARGEFILE64


779 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

780 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

781 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

782 
	`f£ços64
 (
FILE
 *
__°ªam
, c⁄° 
Âos64_t
 *
__pos
);

786 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

788 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

790 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

792 #ifde‡
__USE_MISC


794 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

795 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

796 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

804 
	`≥º‹
 (c⁄° *
__s
);

807 #ifdef 
__USE_POSIX


809 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

812 #ifde‡
__USE_MISC


814 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

818 #ifde‡
__USE_POSIX2


823 
	`p˛o£
 (
FILE
 *
__°ªam
);

829 
FILE
 *
	$p›í
 (c⁄° *
__comm™d
, c⁄° *
__modes
)

830 
__©åibuã_mÆloc__
 
	$__©å_dóŒoc
 (
p˛o£
, 1Ë
__wur
;

835 #ifdef 
__USE_POSIX


837 *
	$˘îmid
 (*
__s
Ë
__THROW


838 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1));

842 #i‡(
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
Ë|| deföed 
__USE_GNU


844 *
	$cu£rid
 (*
__s
)

845 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1));

849 #ifdef 
__USE_GNU


850 
ob°ack
;

853 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

854 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

855 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

856 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

857 c⁄° *
__ª°ri˘
 
__f‹m©
,

858 
__gnuc_va_li°
 
__¨gs
)

859 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

863 #ifde‡
__USE_POSIX199506


867 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

871 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

874 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

877 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


880 
	~<bôs/gë›t_posix.h
>

885 
	`__uÊow
 (
FILE
 *);

886 
	`__ovîÊow
 (
FILE
 *, );

890 #ifde‡
__USE_EXTERN_INLINES


891 
	~<bôs/°dio.h
>

893 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


894 
	~<bôs/°dio2.h
>

897 
	~<bôs/Êﬂä.h
>

898 #i‡
deföed
 
__LDBL_COMPAT
 || 
__LDOUBLE_REDIRECTS_TO_FLOAT128_ABI
 == 1

899 
	~<bôs/°dio-ldbl.h
>

902 
__END_DECLS


	@/usr/include/stdio_ext.h

22 #i‚de‡
_STDIO_EXT_H


23 
	#_STDIO_EXT_H
 1

	)

25 
	~<°dio.h
>

30 
	mFSETLOCKING_QUERY
 = 0,

31 
	#FSETLOCKING_QUERY
 
FSETLOCKING_QUERY


	)

34 
	mFSETLOCKING_INTERNAL
,

35 
	#FSETLOCKING_INTERNAL
 
FSETLOCKING_INTERNAL


	)

37 
	mFSETLOCKING_BYCALLER


38 
	#FSETLOCKING_BYCALLER
 
FSETLOCKING_BYCALLER


	)

42 
__BEGIN_DECLS


46 
size_t
 
	$__fbufsize
 (
FILE
 *
__Â
Ë
__THROW
;

51 
	$__‰ódög
 (
FILE
 *
__Â
Ë
__THROW
;

56 
	$__fwrôög
 (
FILE
 *
__Â
Ë
__THROW
;

61 
	$__‰ódabÀ
 (
FILE
 *
__Â
Ë
__THROW
;

64 
	$__fwrôabÀ
 (
FILE
 *
__Â
Ë
__THROW
;

68 
	$__Êbf
 (
FILE
 *
__Â
Ë
__THROW
;

72 
	$__Âurge
 (
FILE
 *
__Â
Ë
__THROW
;

75 
size_t
 
	$__Âídög
 (
FILE
 *
__Â
Ë
__THROW
;

78 
	`_Êushlbf
 ();

82 
	$__f£éockög
 (
FILE
 *
__Â
, 
__ty≥
Ë
__THROW
;

84 
__END_DECLS


	@/usr/include/stdlib.h

23 #i‚def 
_STDLIB_H


25 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

26 
	~<bôs/libc-hódî-°¨t.h
>

29 
	#__√ed_size_t


	)

30 
	#__√ed_wch¨_t


	)

31 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

34 
	g__BEGIN_DECLS


36 
	#_STDLIB_H
 1

	)

38 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


40 
	~<bôs/waôÊags.h
>

41 
	~<bôs/waô°©us.h
>

44 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (°©us)

	)

45 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (°©us)

	)

46 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (°©us)

	)

47 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (°©us)

	)

48 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (°©us)

	)

49 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (°©us)

	)

50 #ifde‡
__WIFCONTINUED


51 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (°©us)

	)

56 
	~<bôs/Êﬂä.h
>

61 
	mquŸ
;

62 
	mªm
;

63 } 
	tdiv_t
;

66 #i‚de‡
__ldiv_t_deföed


69 
	mquŸ
;

70 
	mªm
;

71 } 
	tldiv_t
;

72 
	#__ldiv_t_deföed
 1

	)

75 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


77 
__exãnsi⁄__
 struct

79 
	mquŸ
;

80 
	mªm
;

81 } 
	tŒdiv_t
;

82 
	#__Œdiv_t_deföed
 1

	)

87 
	#RAND_MAX
 2147483647

	)

92 
	#EXIT_FAILURE
 1

	)

93 
	#EXIT_SUCCESS
 0

	)

97 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

98 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

102 
	$©of
 (c⁄° *
__≈å
)

103 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

105 
	$©oi
 (c⁄° *
__≈å
)

106 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

108 
	$©ﬁ
 (c⁄° *
__≈å
)

109 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

111 #ifde‡
__USE_ISOC99


113 
__exãnsi⁄__
 
	$©ﬁl
 (c⁄° *
__≈å
)

114 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

118 
	$°πod
 (c⁄° *
__ª°ri˘
 
__≈å
,

119 **
__ª°ri˘
 
__íd±r
)

120 
__THROW
 
	`__n⁄nuŒ
 ((1));

122 #ifdef 
__USE_ISOC99


124 
	$°πof
 (c⁄° *
__ª°ri˘
 
__≈å
,

125 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

127 
	$°πﬁd
 (c⁄° *
__ª°ri˘
 
__≈å
,

128 **
__ª°ri˘
 
__íd±r
)

129 
__THROW
 
	`__n⁄nuŒ
 ((1));

134 #i‡
__HAVE_FLOAT16
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

135 
_Flﬂt16
 
	$°πof16
 (c⁄° *
__ª°ri˘
 
__≈å
,

136 **
__ª°ri˘
 
__íd±r
)

137 
__THROW
 
	`__n⁄nuŒ
 ((1));

140 #i‡
__HAVE_FLOAT32
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

141 
_Flﬂt32
 
	$°πof32
 (c⁄° *
__ª°ri˘
 
__≈å
,

142 **
__ª°ri˘
 
__íd±r
)

143 
__THROW
 
	`__n⁄nuŒ
 ((1));

146 #i‡
__HAVE_FLOAT64
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

147 
_Flﬂt64
 
	$°πof64
 (c⁄° *
__ª°ri˘
 
__≈å
,

148 **
__ª°ri˘
 
__íd±r
)

149 
__THROW
 
	`__n⁄nuŒ
 ((1));

152 #i‡
__HAVE_FLOAT128
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

153 
_Flﬂt128
 
	$°πof128
 (c⁄° *
__ª°ri˘
 
__≈å
,

154 **
__ª°ri˘
 
__íd±r
)

155 
__THROW
 
	`__n⁄nuŒ
 ((1));

158 #i‡
__HAVE_FLOAT32X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

159 
_Flﬂt32x
 
	$°πof32x
 (c⁄° *
__ª°ri˘
 
__≈å
,

160 **
__ª°ri˘
 
__íd±r
)

161 
__THROW
 
	`__n⁄nuŒ
 ((1));

164 #i‡
__HAVE_FLOAT64X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

165 
_Flﬂt64x
 
	$°πof64x
 (c⁄° *
__ª°ri˘
 
__≈å
,

166 **
__ª°ri˘
 
__íd±r
)

167 
__THROW
 
	`__n⁄nuŒ
 ((1));

170 #i‡
__HAVE_FLOAT128X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

171 
_Flﬂt128x
 
	$°πof128x
 (c⁄° *
__ª°ri˘
 
__≈å
,

172 **
__ª°ri˘
 
__íd±r
)

173 
__THROW
 
	`__n⁄nuŒ
 ((1));

177 
	$°πﬁ
 (c⁄° *
__ª°ri˘
 
__≈å
,

178 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

179 
__THROW
 
	`__n⁄nuŒ
 ((1));

181 
	$°πoul
 (c⁄° *
__ª°ri˘
 
__≈å
,

182 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

183 
__THROW
 
	`__n⁄nuŒ
 ((1));

185 #ifde‡
__USE_MISC


187 
__exãnsi⁄__


188 
	$°πoq
 (c⁄° *
__ª°ri˘
 
__≈å
,

189 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

190 
__THROW
 
	`__n⁄nuŒ
 ((1));

192 
__exãnsi⁄__


193 
	$°πouq
 (c⁄° *
__ª°ri˘
 
__≈å
,

194 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

195 
__THROW
 
	`__n⁄nuŒ
 ((1));

198 #ifde‡
__USE_ISOC99


200 
__exãnsi⁄__


201 
	$°πﬁl
 (c⁄° *
__ª°ri˘
 
__≈å
,

202 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

203 
__THROW
 
	`__n⁄nuŒ
 ((1));

205 
__exãnsi⁄__


206 
	$°πouŒ
 (c⁄° *
__ª°ri˘
 
__≈å
,

207 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

208 
__THROW
 
	`__n⁄nuŒ
 ((1));

212 #i‡
	`__GLIBC_USE
 (
IEC_60559_BFP_EXT_C2X
)

213 
	$°r‰omd
 (*
__de°
, 
size_t
 
__size
, c⁄° *
__f‹m©
,

214 
__f
)

215 
__THROW
 
	`__n⁄nuŒ
 ((3));

217 
	$°r‰omf
 (*
__de°
, 
size_t
 
__size
, c⁄° *
__f‹m©
,

218 
__f
)

219 
__THROW
 
	`__n⁄nuŒ
 ((3));

221 
	$°r‰oml
 (*
__de°
, 
size_t
 
__size
, c⁄° *
__f‹m©
,

222 
__f
)

223 
__THROW
 
	`__n⁄nuŒ
 ((3));

226 #i‡
__HAVE_FLOAT16
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

227 
	$°r‰omf16
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

228 
_Flﬂt16
 
__f
)

229 
__THROW
 
	`__n⁄nuŒ
 ((3));

232 #i‡
__HAVE_FLOAT32
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

233 
	$°r‰omf32
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

234 
_Flﬂt32
 
__f
)

235 
__THROW
 
	`__n⁄nuŒ
 ((3));

238 #i‡
__HAVE_FLOAT64
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

239 
	$°r‰omf64
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

240 
_Flﬂt64
 
__f
)

241 
__THROW
 
	`__n⁄nuŒ
 ((3));

244 #i‡
__HAVE_FLOAT128
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

245 
	$°r‰omf128
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

246 
_Flﬂt128
 
__f
)

247 
__THROW
 
	`__n⁄nuŒ
 ((3));

250 #i‡
__HAVE_FLOAT32X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

251 
	$°r‰omf32x
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

252 
_Flﬂt32x
 
__f
)

253 
__THROW
 
	`__n⁄nuŒ
 ((3));

256 #i‡
__HAVE_FLOAT64X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

257 
	$°r‰omf64x
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

258 
_Flﬂt64x
 
__f
)

259 
__THROW
 
	`__n⁄nuŒ
 ((3));

262 #i‡
__HAVE_FLOAT128X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

263 
	$°r‰omf128x
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

264 
_Flﬂt128x
 
__f
)

265 
__THROW
 
	`__n⁄nuŒ
 ((3));

269 #ifde‡
__USE_GNU


273 
	~<bôs/ty≥s/loˇÀ_t.h
>

275 
	$°πﬁ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

276 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

277 
loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

279 
	$°πoul_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

280 **
__ª°ri˘
 
__íd±r
,

281 
__ba£
, 
loˇÀ_t
 
__loc
)

282 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

284 
__exãnsi⁄__


285 
	$°πﬁl_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

286 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

287 
loˇÀ_t
 
__loc
)

288 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

290 
__exãnsi⁄__


291 
	$°πouŒ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

292 **
__ª°ri˘
 
__íd±r
,

293 
__ba£
, 
loˇÀ_t
 
__loc
)

294 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

296 
	$°πod_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

297 **
__ª°ri˘
 
__íd±r
, 
loˇÀ_t
 
__loc
)

298 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

300 
	$°πof_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

301 **
__ª°ri˘
 
__íd±r
, 
loˇÀ_t
 
__loc
)

302 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

304 
	$°πﬁd_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

305 **
__ª°ri˘
 
__íd±r
,

306 
loˇÀ_t
 
__loc
)

307 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

309 #i‡
__HAVE_FLOAT16


310 
_Flﬂt16
 
	$°πof16_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

311 **
__ª°ri˘
 
__íd±r
,

312 
loˇÀ_t
 
__loc
)

313 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

316 #i‡
__HAVE_FLOAT32


317 
_Flﬂt32
 
	$°πof32_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

318 **
__ª°ri˘
 
__íd±r
,

319 
loˇÀ_t
 
__loc
)

320 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

323 #i‡
__HAVE_FLOAT64


324 
_Flﬂt64
 
	$°πof64_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

325 **
__ª°ri˘
 
__íd±r
,

326 
loˇÀ_t
 
__loc
)

327 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

330 #i‡
__HAVE_FLOAT128


331 
_Flﬂt128
 
	$°πof128_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

332 **
__ª°ri˘
 
__íd±r
,

333 
loˇÀ_t
 
__loc
)

334 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

337 #i‡
__HAVE_FLOAT32X


338 
_Flﬂt32x
 
	$°πof32x_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

339 **
__ª°ri˘
 
__íd±r
,

340 
loˇÀ_t
 
__loc
)

341 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

344 #i‡
__HAVE_FLOAT64X


345 
_Flﬂt64x
 
	$°πof64x_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

346 **
__ª°ri˘
 
__íd±r
,

347 
loˇÀ_t
 
__loc
)

348 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

351 #i‡
__HAVE_FLOAT128X


352 
_Flﬂt128x
 
	$°πof128x_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

353 **
__ª°ri˘
 
__íd±r
,

354 
loˇÀ_t
 
__loc
)

355 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

360 #ifde‡
__USE_EXTERN_INLINES


361 
__exã∫_ölöe
 

362 
	`__NTH
 (
	$©oi
 (c⁄° *
__≈å
))

364  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

365 
	}
}

366 
__exã∫_ölöe
 

367 
__NTH
 (
	$©ﬁ
 (c⁄° *
__≈å
))

369  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

370 
	}
}

372 #ifde‡
__USE_ISOC99


373 
__exãnsi⁄__
 
__exã∫_ölöe
 

374 
__NTH
 (
	$©ﬁl
 (c⁄° *
__≈å
))

376  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

377 
	}
}

382 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


386 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

389 
	$a64l
 (c⁄° *
__s
)

390 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

394 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


395 
	~<sys/ty≥s.h
>

402 
	$øndom
 (Ë
__THROW
;

405 
	$§™dom
 (
__£ed
Ë
__THROW
;

411 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

412 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

416 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

419 #ifde‡
__USE_MISC


424 
	søndom_d©a


426 
öt32_t
 *
Âå
;

427 
öt32_t
 *
Ωå
;

428 
öt32_t
 *
°©e
;

429 
ønd_ty≥
;

430 
ønd_deg
;

431 
ønd_£p
;

432 
öt32_t
 *
íd_±r
;

435 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

436 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

438 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

439 
__THROW
 
	`__n⁄nuŒ
 ((2));

441 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

442 
size_t
 
__°©ñí
,

443 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

444 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

446 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

447 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

448 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

454 
	$ønd
 (Ë
__THROW
;

456 
	$§™d
 (
__£ed
Ë
__THROW
;

458 #ifde‡
__USE_POSIX199506


460 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

464 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


468 
	$dønd48
 (Ë
__THROW
;

469 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

472 
	$Ã™d48
 (Ë
__THROW
;

473 
	$ƒ™d48
 (
__xsubi
[3])

474 
__THROW
 
	`__n⁄nuŒ
 ((1));

477 
	$mønd48
 (Ë
__THROW
;

478 
	$jønd48
 (
__xsubi
[3])

479 
__THROW
 
	`__n⁄nuŒ
 ((1));

482 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

483 *
	$£ed48
 (
__£ed16v
[3])

484 
__THROW
 
	`__n⁄nuŒ
 ((1));

485 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

487 #ifde‡
__USE_MISC


491 
	sdønd48_d©a


493 
__x
[3];

494 
__ﬁd_x
[3];

495 
__c
;

496 
__öô
;

497 
__exãnsi⁄__
 
__a
;

502 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

503 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

504 
	$î™d48_r
 (
__xsubi
[3],

505 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

506 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

509 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

510 *
__ª°ri˘
 
__ªsu…
)

511 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

512 
	$ƒ™d48_r
 (
__xsubi
[3],

513 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

514 *
__ª°ri˘
 
__ªsu…
)

515 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

518 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

519 *
__ª°ri˘
 
__ªsu…
)

520 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

521 
	$jønd48_r
 (
__xsubi
[3],

522 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

523 *
__ª°ri˘
 
__ªsu…
)

524 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

527 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

528 
__THROW
 
	`__n⁄nuŒ
 ((2));

530 
	$£ed48_r
 (
__£ed16v
[3],

531 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

533 
	$lc⁄g48_r
 (
__∑øm
[7],

534 
dønd48_d©a
 *
__buf„r
)

535 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

540 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__


541 
	`__©åibuã_Æloc_size__
 ((1)Ë
__wur
;

543 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

544 
__THROW
 
__©åibuã_mÆloc__
 
	`__©åibuã_Æloc_size__
 ((1, 2)Ë
__wur
;

551 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

552 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
 
	`__©åibuã_Æloc_size__
 ((2));

555 
	$‰ì
 (*
__±r
Ë
__THROW
;

557 #ifde‡
__USE_MISC


563 *
	$ªÆloˇºay
 (*
__±r
, 
size_t
 
__nmemb
, size_à
__size
)

564 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__


565 
	`__©åibuã_Æloc_size__
 ((2, 3))

566 
__©å_dóŒoc_‰ì
;

569 *
	$ªÆloˇºay
 (*
__±r
, 
size_t
 
__nmemb
, size_à
__size
)

570 
__THROW
 
	`__©å_dóŒoc
 (
ªÆloˇºay
, 1);

573 #ifde‡
__USE_MISC


574 
	~<Æloˇ.h
>

577 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

578 || 
deföed
 
__USE_MISC


580 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__


581 
	`__©åibuã_Æloc_size__
 ((1)Ë
__wur
;

584 #ifde‡
__USE_XOPEN2K


586 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

587 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

590 #ifde‡
__USE_ISOC11


592 *
	$Æig√d_Æloc
 (
size_t
 
__Æignmít
, size_à
__size
)

593 
__THROW
 
__©åibuã_mÆloc__
 
	`__©åibuã_Æloc_Æign__
 ((1))

594 
	`__©åibuã_Æloc_size__
 ((2)Ë
__wur
;

598 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

602 
	$©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

604 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


606 #ifde‡
__˝lu•lus


607 "C++" 
	$©_quick_exô
 ((*
__func
) ())

608 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

610 
	$©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

614 #ifdef 
__USE_MISC


617 
	$⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

618 
__THROW
 
	`__n⁄nuŒ
 ((1));

624 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

626 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


630 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

633 #ifde‡
__USE_ISOC99


636 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

641 *
	$gëív
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

643 #ifde‡
__USE_GNU


646 *
	$£cuª_gëív
 (c⁄° *
__«me
)

647 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

650 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


654 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

657 #ifde‡
__USE_XOPEN2K


660 
	$£ãnv
 (c⁄° *
__«me
, c⁄° *
__vÆue
, 
__ª∂a˚
)

661 
__THROW
 
	`__n⁄nuŒ
 ((2));

664 
	$un£ãnv
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

667 #ifdef 
__USE_MISC


671 
	$˛óªnv
 (Ë
__THROW
;

675 #i‡
deföed
 
__USE_MISC
 \

676 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
)

682 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

685 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


694 #i‚de‡
__USE_FILE_OFFSET64


695 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

697 #ifde‡
__REDIRECT


698 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

699 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

701 
	#mk°emp
 
mk°emp64


	)

704 #ifde‡
__USE_LARGEFILE64


705 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

709 #ifde‡
__USE_MISC


716 #i‚de‡
__USE_FILE_OFFSET64


717 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

719 #ifde‡
__REDIRECT


720 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

721 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

723 
	#mk°emps
 
mk°emps64


	)

726 #ifde‡
__USE_LARGEFILE64


727 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

728 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

732 #ifde‡
__USE_XOPEN2K8


738 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

741 #ifde‡
__USE_GNU


748 #i‚de‡
__USE_FILE_OFFSET64


749 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

751 #ifde‡
__REDIRECT


752 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

753 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

755 
	#mko°emp
 
mko°emp64


	)

758 #ifde‡
__USE_LARGEFILE64


759 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

768 #i‚de‡
__USE_FILE_OFFSET64


769 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

770 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

772 #ifde‡
__REDIRECT


773 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

774 
__Êags
), 
mko°emps64
)

775 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

777 
	#mko°emps
 
mko°emps64


	)

780 #ifde‡
__USE_LARGEFILE64


781 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

782 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

791 
	$sy°em
 (c⁄° *
__comm™d
Ë
__wur
;

794 #ifdef 
__USE_GNU


797 *
	$ˇn⁄iˇlize_fûe_«me
 (c⁄° *
__«me
)

798 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_mÆloc__


799 
__©å_dóŒoc_‰ì
 
__wur
;

802 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


808 *
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
,

809 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

814 #i‚de‡
__COMPAR_FN_T


815 
	#__COMPAR_FN_T


	)

816 (*
	t__com∑r_‚_t
) (const *, const *);

818 #ifdef 
__USE_GNU


819 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

822 #ifde‡
__USE_GNU


823 (*
	t__com∑r_d_‚_t
) (const *, const *, *);

828 *
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
,

829 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

830 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

832 #ifde‡
__USE_EXTERN_INLINES


833 
	~<bôs/°dlib-b£¨ch.h
>

838 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

839 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

840 #ifde‡
__USE_GNU


841 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

842 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

843 
	`__n⁄nuŒ
 ((1, 4));

848 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

849 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

851 #ifde‡
__USE_ISOC99


852 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

853 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

860 
div_t
 
	$div
 (
__numî
, 
__díom
)

861 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

862 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

863 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

865 #ifde‡
__USE_ISOC99


866 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

867 
__díom
)

868 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

872 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

873 || 
deföed
 
__USE_MISC


880 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

881 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

886 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

887 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

892 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

893 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

896 #ifde‡
__USE_MISC


898 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

899 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

900 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

901 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

902 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

903 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

904 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

905 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

910 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

911 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

912 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

913 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

914 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

915 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

917 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

918 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

919 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

920 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

921 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

922 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

923 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

924 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

930 
	$mbÀn
 (c⁄° *
__s
, 
size_t
 
__n
Ë
__THROW
;

933 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

934 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

937 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
;

941 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

942 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW


943 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 2));

945 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

946 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

947 
__THROW


948 
	$__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 1, 3)

949 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 2));

951 #ifde‡
__USE_MISC


956 
	$Ωm©ch
 (c⁄° *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

960 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


967 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

968 *c⁄° *
__ª°ri˘
 
__tokís
,

969 **
__ª°ri˘
 
__vÆuï
)

970 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

976 #ifde‡
__USE_XOPEN2KXSI


978 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

981 #ifde‡
__USE_XOPEN_EXTENDED


986 
	$gø¡±
 (
__fd
Ë
__THROW
;

990 
	$u∆ock±
 (
__fd
Ë
__THROW
;

995 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

998 #ifde‡
__USE_GNU


1002 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

1003 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
	`__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 2, 3);

1006 
	`gë±
 ();

1009 #ifde‡
__USE_MISC


1013 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

1014 
__THROW
 
	`__n⁄nuŒ
 ((1));

1017 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K


1020 
	$ây¶Ÿ
 (Ë
__THROW
;

1023 
	~<bôs/°dlib-Êﬂt.h
>

1026 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


1027 
	~<bôs/°dlib.h
>

1030 
	~<bôs/Êﬂä.h
>

1031 #i‡
deföed
 
__LDBL_COMPAT
 || 
__LDOUBLE_REDIRECTS_TO_FLOAT128_ABI
 == 1

1032 
	~<bôs/°dlib-ldbl.h
>

1035 
__END_DECLS


	@/usr/include/string.h

22 #i‚def 
_STRING_H


23 
	#_STRING_H
 1

	)

25 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

26 
	~<bôs/libc-hódî-°¨t.h
>

28 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

36 #i‡
deföed
 
__˝lu•lus
 && (
__GNUC_PREREQ
 (4, 4) \

37 || 
	$__glibc_˛™g_¥îeq
 (3, 5))

38 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

43 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

44 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

47 *
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

48 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

53 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN
 || 
	`__GLIBC_USE
 (
ISOC2X
)

54 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

55 
__c
, 
size_t
 
__n
)

56 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 4));

61 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

64 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

65 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

80 
	$__memcm≥q
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

81 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

84 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


87 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

88 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

89 c⁄° *
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

90 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

92 #ifde‡
__OPTIMIZE__


93 
__exã∫_Æways_ölöe
 *

94 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


96  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

99 
__exã∫_Æways_ölöe
 const *

100 
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


102  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

105 
	}
}

107 *
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

108 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

111 #ifde‡
__USE_GNU


114 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


115 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

116 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

117 "C++" c⁄° *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

118 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

120 *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

121 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

125 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


126 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

127 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1))

128 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 1, 3));

129 "C++" c⁄° *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

130 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1))

131 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 1, 3));

133 *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

134 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1))

135 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 1, 3));

141 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

142 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

144 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

145 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

146 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

149 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

150 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

152 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

153 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

156 
	$°rcmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

157 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

159 
	$°∫cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

160 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

163 
	$°rcﬁl
 (c⁄° *
__s1
, c⁄° *
__s2
)

164 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

166 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

167 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

168 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 3));

170 #ifde‡
__USE_XOPEN2K8


172 
	~<bôs/ty≥s/loˇÀ_t.h
>

175 
	$°rcﬁl_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
loˇÀ_t
 
__l
)

176 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

179 
size_t
 
	$°rx‰m_l
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

180 
loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4))

181 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 3));

184 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8
 \

185 || 
	`__GLIBC_USE
 (
LIB_EXT2
Ë|| 
	$__GLIBC_USE
 (
ISOC2X
))

187 *
	$°rdup
 (c⁄° *
__s
)

188 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

194 #i‡
deföed
 
__USE_XOPEN2K8
 || 
	`__GLIBC_USE
 (
LIB_EXT2
Ë|| __GLIBC_USE (
ISOC2X
)

195 *
	$°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

196 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

199 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


201 
	#°rdu∑
(
s
) \

202 (
__exãnsi⁄__
 \

204 c⁄° *
__ﬁd
 = (
s
); \

205 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

206 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

207 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

208 
	}
}))

	)

211 
	#°∫du∑
(
s
, 
n
) \

212 (
__exãnsi⁄__
 \

214 c⁄° *
__ﬁd
 = (
s
); \

215 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

216 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

217 
__√w
[
__Àn
] = '\0'; \

218 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

219 }))

	)

223 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


226 *
°rchr
 (*
__s
, 
__c
)

227 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

228 c⁄° *
°rchr
 (c⁄° *
__s
, 
__c
)

229 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

231 #ifde‡
__OPTIMIZE__


232 
__exã∫_Æways_ölöe
 *

233 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


235  
__buûtö_°rchr
 (
__s
, 
__c
);

238 
__exã∫_Æways_ölöe
 const *

239 
°rchr
 (c⁄° *
__s
, 
__c
Ë
	g__THROW


241  
__buûtö_°rchr
 (
__s
, 
__c
);

246 *
	$°rchr
 (c⁄° *
__s
, 
__c
)

247 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

250 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


253 *
	`°ºchr
 (*
__s
, 
__c
)

254 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

255 c⁄° *
	`°ºchr
 (c⁄° *
__s
, 
__c
)

256 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

258 #ifde‡
__OPTIMIZE__


259 
__exã∫_Æways_ölöe
 *

260 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


262  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

265 
__exã∫_Æways_ölöe
 const *

266 
	`°ºchr
 (c⁄° *
__s
, 
__c
Ë
__THROW


268  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

271 
	}
}

273 *
	$°ºchr
 (c⁄° *
__s
, 
__c
)

274 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

277 #ifde‡
__USE_GNU


280 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


281 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

282 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

283 "C++" c⁄° *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

284 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

286 *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

287 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

293 
size_t
 
	$°rc•n
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

294 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

297 
size_t
 
	$°r•n
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

298 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

300 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


303 *
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
)

304 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

305 c⁄° *
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

306 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

308 #ifde‡
__OPTIMIZE__


309 
__exã∫_Æways_ölöe
 *

310 
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
Ë
__THROW


312  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

315 
__exã∫_Æways_ölöe
 const *

316 
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
Ë
__THROW


318  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

321 
	}
}

323 *
	$°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

324 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

327 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


330 *
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

331 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

332 c⁄° *
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

333 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

335 #ifde‡
__OPTIMIZE__


336 
__exã∫_Æways_ölöe
 *

337 
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


339  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

342 
__exã∫_Æways_ölöe
 const *

343 
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


345  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

348 
	}
}

350 *
	$°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

351 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

356 *
	$°πok
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
)

357 
__THROW
 
	`__n⁄nuŒ
 ((2));

361 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

362 c⁄° *
__ª°ri˘
 
__dñim
,

363 **
__ª°ri˘
 
__ßve_±r
)

364 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

365 #ifde‡
__USE_POSIX


366 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
,

367 **
__ª°ri˘
 
__ßve_±r
)

368 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

371 #ifde‡
__USE_GNU


373 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


374 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

375 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

376 "C++" c⁄° *
	$°rˇ£°r
 (c⁄° *
__hay°ack
,

377 c⁄° *
__√edÀ
)

378 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

380 *
	$°rˇ£°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

381 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

385 #ifde‡
__USE_GNU


389 *
	$memmem
 (c⁄° *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

390 c⁄° *
__√edÀ
, 
size_t
 
__√edÀÀn
)

391 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3))

392 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 1, 2))

393 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 3, 4));

397 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

398 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

399 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

400 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

401 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

402 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

407 
size_t
 
	$°æí
 (c⁄° *
__s
)

408 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

410 #ifdef 
__USE_XOPEN2K8


413 
size_t
 
	$°∫Àn
 (c⁄° *
__°rög
, 
size_t
 
__maxÀn
)

414 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

419 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

420 #ifde‡
__USE_XOPEN2K


428 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


431 #ifde‡
__REDIRECT_NTH


432 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

433 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

434 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2))

435 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 2, 3));

437 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

438 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 2, 3));

439 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

444 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

445 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 2, 3));

448 #ifde‡
__USE_GNU


450 c⁄° *
	$°ªº‹desc_≈
 (
__îr
Ë
__THROW
;

452 c⁄° *
	$°ªº‹«me_≈
 (
__îr
Ë
__THROW
;

456 #ifde‡
__USE_XOPEN2K8


458 *
	$°ªº‹_l
 (
__î∫um
, 
loˇÀ_t
 
__l
Ë
__THROW
;

461 #ifde‡
__USE_MISC


462 
	~<°rögs.h
>

466 
	$ex∂icô_bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1))

467 
	`__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 1, 2);

471 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

472 c⁄° *
__ª°ri˘
 
__dñim
)

473 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

476 #ifdef 
__USE_XOPEN2K8


478 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

480 #ifde‡
__USE_GNU


482 c⁄° *
	$sigabbªv_≈
 (
__sig
Ë
__THROW
;

485 c⁄° *
	$sigdes¸_≈
 (
__sig
Ë
__THROW
;

489 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

490 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

491 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

492 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

496 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

497 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

498 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

499 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

500 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

501 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

504 #ifdef 
__USE_GNU


506 
	$°rvîscmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

507 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

510 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

513 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1))

514 
	`__©å_ac˚ss
 ((
__ªad_wrôe__
, 1, 2));

516 #i‚de‡
ba£«me


521 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


522 "C++" *
	$ba£«me
 (*
__fûíame
)

523 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

524 "C++" c⁄° *
	$ba£«me
 (c⁄° *
__fûíame
)

525 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

527 *
	$ba£«me
 (c⁄° *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

532 #i‡
	`__GNUC_PREREQ
 (3,4)

533 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


535 
	~<bôs/°rög_f‹tifõd.h
>

539 
__END_DECLS


	@/usr/include/strings.h

18 #i‚def 
_STRINGS_H


19 
	#_STRINGS_H
 1

	)

21 
	~<„©uªs.h
>

22 
	#__√ed_size_t


	)

23 
	~<°ddef.h
>

26 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

27 
	#__CORRECT_ISO_CPP_STRINGS_H_PROTO


	)

30 
	g__BEGIN_DECLS


32 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


34 
	$bcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

35 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

38 
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__n
)

39 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

42 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

45 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


48 *
	`ödex
 (*
__s
, 
__c
)

49 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

50 c⁄° *
	`ödex
 (c⁄° *
__s
, 
__c
)

51 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

53 #i‡
deföed
 
__OPTIMIZE__


54 
__exã∫_Æways_ölöe
 *

55 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


57  
	`__buûtö_ödex
 (
__s
, 
__c
);

60 
__exã∫_Æways_ölöe
 const *

61 
	`ödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


63  
	`__buûtö_ödex
 (
__s
, 
__c
);

66 
	}
}

68 *
	$ödex
 (c⁄° *
__s
, 
__c
)

69 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

73 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


76 *
	`rödex
 (*
__s
, 
__c
)

77 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

78 c⁄° *
	`rödex
 (c⁄° *
__s
, 
__c
)

79 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

81 #i‡
deföed
 
__OPTIMIZE__


82 
__exã∫_Æways_ölöe
 *

83 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


85  
	`__buûtö_rödex
 (
__s
, 
__c
);

88 
__exã∫_Æways_ölöe
 const *

89 
	`rödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


91  
	`__buûtö_rödex
 (
__s
, 
__c
);

94 
	}
}

96 *
	$rödex
 (c⁄° *
__s
, 
__c
)

97 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

101 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8
 || deföed 
__USE_XOPEN2K8XSI


104 
	$ffs
 (
__i
Ë
__THROW
 
__©åibuã_c⁄°__
;

109 #ifdef 
__USE_MISC


110 
	$ff¶
 (
__l
Ë
__THROW
 
__©åibuã_c⁄°__
;

111 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

112 
__THROW
 
__©åibuã_c⁄°__
;

116 
	$°rˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

117 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

120 
	$°∫ˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

121 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

123 #ifdef 
__USE_XOPEN2K8


125 
	~<bôs/ty≥s/loˇÀ_t.h
>

128 
	$°rˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
loˇÀ_t
 
__loc
)

129 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

133 
	$°∫ˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

134 
size_t
 
__n
, 
loˇÀ_t
 
__loc
)

135 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

138 
__END_DECLS


140 #i‡
	`__GNUC_PREREQ
 (3,4Ë&& 
__USE_FORTIFY_LEVEL
 > 0 \

141 && 
deföed
 
__f‹tify_fun˘i⁄


143 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


144 
	~<bôs/°rögs_f‹tifõd.h
>

	@/usr/include/sudo_plugin.h

19 #i‚de‡
SUDO_PLUGIN_H


20 
	#SUDO_PLUGIN_H


	)

23 
	#SUDO_API_VERSION_MAJOR
 1

	)

24 
	#SUDO_API_VERSION_MINOR
 18

	)

25 
	#SUDO_API_MKVERSION
(
x
, 
y
Ë(((xË<< 16Ë| (y))

	)

26 
	#SUDO_API_VERSION
 
	`SUDO_API_MKVERSION
(
SUDO_API_VERSION_MAJOR
, 
SUDO_API_VERSION_MINOR
)

	)

29 
	#SUDO_API_VERSION_GET_MAJOR
(
v
Ë((vË>> 16)

	)

30 
	#SUDO_API_VERSION_GET_MINOR
(
v
Ë((vË& 0xffffU)

	)

31 
	#SUDO_API_VERSION_SET_MAJOR
(
vp
, 
n
) do { \

32 *(
vp
Ë(*(vpË& 0x0000ffffUË| ((
n
) << 16); \

33 } 0)

	)

34 
	#SUDO_API_VERSION_SET_MINOR
(
vp
, 
n
) do { \

35 *(
vp
Ë(*(vpË& 0xffff0000UË| (
n
); \

36 } 0)

	)

39 
	#SUDO_FRONT_END
 0

	)

42 
	ssudo_c⁄v_mesßge
 {

43 
	#SUDO_CONV_PROMPT_ECHO_OFF
 0x0001

	)

44 
	#SUDO_CONV_PROMPT_ECHO_ON
 0x0002

	)

45 
	#SUDO_CONV_ERROR_MSG
 0x0003

	)

46 
	#SUDO_CONV_INFO_MSG
 0x0004

	)

47 
	#SUDO_CONV_PROMPT_MASK
 0x0005

	)

48 
	#SUDO_CONV_PROMPT_ECHO_OK
 0x1000

	)

49 
	#SUDO_CONV_PREFER_TTY
 0x2000

	)

50 
	mmsg_ty≥
;

51 
	mtimeout
;

52 c⁄° *
	mmsg
;

62 
	#SUDO_CONV_REPL_MAX
 1023

	)

64 
	ssudo_c⁄v_ª∂y
 {

65 *
	mª∂y
;

69 
	#SUDO_CONV_CALLBACK_VERSION_MAJOR
 1

	)

70 
	#SUDO_CONV_CALLBACK_VERSION_MINOR
 0

	)

71 
	#SUDO_CONV_CALLBACK_VERSION
 
	`SUDO_API_MKVERSION
(
SUDO_CONV_CALLBACK_VERSION_MAJOR
, 
SUDO_CONV_CALLBACK_VERSION_MINOR
)

	)

78 (*
	tsudo_c⁄v_ˇŒback_‚_t
)(
	tsigno
, *
	t˛osuª
);

79 
	ssudo_c⁄v_ˇŒback
 {

80 
vîsi⁄
;

81 *
˛osuª
;

82 
sudo_c⁄v_ˇŒback_‚_t
 
⁄_su•íd
;

83 
sudo_c⁄v_ˇŒback_‚_t
 
⁄_ªsume
;

86 (*
	tsudo_c⁄v_t
)(
	tnum_msgs
, c⁄° 
	tsudo_c⁄v_mesßge
 
	tmsgs
[],

87 
	tsudo_c⁄v_ª∂y
 
	tª∂õs
[], 
	tsudo_c⁄v_ˇŒback
 *
	tˇŒback
);

88 (*
	tsudo_¥ötf_t
)(
	tmsg_ty≥
, c⁄° *
	tfmt
, ...);

94 #i‡
	`deföed
(
__GNUC__
Ë&& ((__GNUC__ =4 && 
__GNUC_MINOR__
 >= 4) || __GNUC__ > 4)

95 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wstrict-prototypes"

99 (*
	tsudo_hook_‚_t
)();

100 (*
	tsudo_hook_‚_£ãnv_t
)(c⁄° *
	t«me
, c⁄° *
	tvÆue
, 
	tovîwrôe
, *
	t˛osuª
);

101 (*
	tsudo_hook_‚_puãnv_t
)(*
	t°rög
, *
	t˛osuª
);

102 (*
	tsudo_hook_‚_gëív_t
)(c⁄° *
	t«me
, **
	tvÆue
, *
	t˛osuª
);

103 (*
	tsudo_hook_‚_un£ãnv_t
)(c⁄° *
	t«me
, *
	t˛osuª
);

106 
	ssudo_hook
 {

107 
hook_vîsi⁄
;

108 
hook_ty≥
;

109 
sudo_hook_‚_t
 
hook_‚
;

110 *
˛osuª
;

114 
	#SUDO_HOOK_VERSION_MAJOR
 1

	)

115 
	#SUDO_HOOK_VERSION_MINOR
 0

	)

116 
	#SUDO_HOOK_VERSION
 
	`SUDO_API_MKVERSION
(
SUDO_HOOK_VERSION_MAJOR
, 
SUDO_HOOK_VERSION_MINOR
)

	)

121 
	#SUDO_HOOK_RET_ERROR
 -1

	)

122 
	#SUDO_HOOK_RET_NEXT
 0

	)

123 
	#SUDO_HOOK_RET_STOP
 1

	)

131 
	#SUDO_HOOK_SETENV
 1

	)

132 
	#SUDO_HOOK_UNSETENV
 2

	)

133 
	#SUDO_HOOK_PUTENV
 3

	)

134 
	#SUDO_HOOK_GETENV
 4

	)

139 (*
	tsudo_∂ugö_ev_ˇŒback_t
)(
	tfd
, 
	twh©
, *
	t˛osuª
);

141 
time•ec
;

142 
	ssudo_∂ugö_evít
 {

143 (*
£t
)(
sudo_∂ugö_evít
 *
≥v
, 
fd
, 
evíts
, 
sudo_∂ugö_ev_ˇŒback_t
 
ˇŒback
, *
˛osuª
);

144 (*
add
)(
sudo_∂ugö_evít
 *
≥v
, 
time•ec
 *
timeout
);

145 (*
dñ
)(
sudo_∂ugö_evít
 *
≥v
);

146 (*
≥ndög
)(
sudo_∂ugö_evít
 *
≥v
, 
evíts
, 
time•ec
 *
ts
);

147 (*
fd
)(
sudo_∂ugö_evít
 *
≥v
);

148 (*
£tba£
)(
sudo_∂ugö_evít
 *
≥v
, *
ba£
);

149 (*
lo›bªak
)(
sudo_∂ugö_evít
 *
≥v
);

150 (*
‰ì
)(
sudo_∂ugö_evít
 *
≥v
);

155 
	#SUDO_PLUGIN_EV_TIMEOUT
 0x01

	)

156 
	#SUDO_PLUGIN_EV_READ
 0x02

	)

157 
	#SUDO_PLUGIN_EV_WRITE
 0x04

	)

158 
	#SUDO_PLUGIN_EV_PERSIST
 0x08

	)

159 
	#SUDO_PLUGIN_EV_SIGNAL
 0x10

	)

162 
∑sswd
;

163 
	spﬁicy_∂ugö
 {

164 
	#SUDO_POLICY_PLUGIN
 1

	)

165 
ty≥
;

166 
vîsi⁄
;

167 (*
›í
)(
vîsi⁄
, 
sudo_c⁄v_t
 
c⁄vîßti⁄
,

168 
sudo_¥ötf_t
 
sudo_¥ötf
, * c⁄° 
£âögs
[],

169 * c⁄° 
u£r_öfo
[], * c⁄° 
u£r_ív
[],

170 * c⁄° 
∂ugö_›ti⁄s
[], c⁄° **
îr°r
);

171 (*
˛o£
)(
exô_°©us
, 
îr‹
);

172 (*
show_vîsi⁄
)(
vîbo£
);

173 (*
check_pﬁicy
)(
¨gc
, * c⁄° 
¨gv
[],

174 *
ív_add
[], **
comm™d_öfo
[],

175 **
¨gv_out
[], **
u£r_ív_out
[], c⁄° **
îr°r
);

176 (*
li°
)(
¨gc
, * c⁄° 
¨gv
[], 
vîbo£
,

177 c⁄° *
li°_u£r
, c⁄° **
îr°r
);

178 (*
vÆid©e
)(c⁄° **
îr°r
);

179 (*
övÆid©e
)(
ªmove
);

180 (*
öô_£ssi⁄
)(
∑sswd
 *
pwd
, **
u£r_ív_out
[],

181 c⁄° **
îr°r
);

182 (*
ªgi°î_hooks
)(
vîsi⁄
, (*
ªgi°î_hook
)(
sudo_hook
 *
hook
));

183 (*
dîegi°î_hooks
)(
vîsi⁄
, (*
dîegi°î_hook
)(
sudo_hook
 *
hook
));

184 
sudo_∂ugö_evít
 * (*
evít_Æloc
)();

188 
	sio_∂ugö
 {

189 
	#SUDO_IO_PLUGIN
 2

	)

190 
ty≥
;

191 
vîsi⁄
;

192 (*
›í
)(
vîsi⁄
, 
sudo_c⁄v_t
 
c⁄vîßti⁄
,

193 
sudo_¥ötf_t
 
sudo_¥ötf
, * c⁄° 
£âögs
[],

194 * c⁄° 
u£r_öfo
[], * c⁄° 
comm™d_öfo
[],

195 
¨gc
, * c⁄° 
¨gv
[], * c⁄° 
u£r_ív
[],

196 * c⁄° 
∂ugö_›ti⁄s
[], c⁄° **
îr°r
);

197 (*
˛o£
)(
exô_°©us
, 
îr‹
);

198 (*
show_vîsi⁄
)(
vîbo£
);

199 (*
log_âyö
)(c⁄° *
buf
, 
Àn
, c⁄° **
îr°r
);

200 (*
log_âyout
)(c⁄° *
buf
, 
Àn
, c⁄° **
îr°r
);

201 (*
log_°dö
)(c⁄° *
buf
, 
Àn
, c⁄° **
îr°r
);

202 (*
log_°dout
)(c⁄° *
buf
, 
Àn
, c⁄° **
îr°r
);

203 (*
log_°dîr
)(c⁄° *
buf
, 
Àn
, c⁄° **
îr°r
);

204 (*
ªgi°î_hooks
)(
vîsi⁄
,

205 (*
ªgi°î_hook
)(
sudo_hook
 *
hook
));

206 (*
dîegi°î_hooks
)(
vîsi⁄
,

207 (*
dîegi°î_hook
)(
sudo_hook
 *
hook
));

208 (*
ch™ge_wösize
)(
löe
, 
cﬁs
,

209 c⁄° **
îr°r
);

210 (*
log_su•íd
)(
signo
, c⁄° **
îr°r
);

211 
sudo_∂ugö_evít
 * (*
evít_Æloc
)();

215 
	#SUDO_PLUGIN_NO_STATUS
 0

	)

216 
	#SUDO_PLUGIN_WAIT_STATUS
 1

	)

217 
	#SUDO_PLUGIN_EXEC_ERROR
 2

	)

218 
	#SUDO_PLUGIN_SUDO_ERROR
 3

	)

221 
	saudô_∂ugö
 {

222 
	#SUDO_AUDIT_PLUGIN
 3

	)

223 
ty≥
;

224 
vîsi⁄
;

225 (*
›í
)(
vîsi⁄
, 
sudo_c⁄v_t
 
c⁄vîßti⁄
,

226 
sudo_¥ötf_t
 
sudo_¥ötf
, * c⁄° 
£âögs
[],

227 * c⁄° 
u£r_öfo
[], 
submô_›töd
,

228 * c⁄° 
submô_¨gv
[], * c⁄° 
submô_ívp
[],

229 * c⁄° 
∂ugö_›ti⁄s
[], c⁄° **
îr°r
);

230 (*
˛o£
)(
°©us_ty≥
, 
°©us
);

231 (*
ac˚±
)(c⁄° *
∂ugö_«me
, 
∂ugö_ty≥
,

232 * c⁄° 
comm™d_öfo
[], * c⁄° 
run_¨gv
[],

233 * c⁄° 
run_ívp
[], c⁄° **
îr°r
);

234 (*
ªje˘
)(c⁄° *
∂ugö_«me
, 
∂ugö_ty≥
,

235 c⁄° *
audô_msg
, * c⁄° 
comm™d_öfo
[],

236 c⁄° **
îr°r
);

237 (*
îr‹
)(c⁄° *
∂ugö_«me
, 
∂ugö_ty≥
,

238 c⁄° *
audô_msg
, * c⁄° 
comm™d_öfo
[],

239 c⁄° **
îr°r
);

240 (*
show_vîsi⁄
)(
vîbo£
);

241 (*
ªgi°î_hooks
)(
vîsi⁄
, (*
ªgi°î_hook
)(
sudo_hook
 *
hook
));

242 (*
dîegi°î_hooks
)(
vîsi⁄
, (*
dîegi°î_hook
)(
sudo_hook
 *
hook
));

243 
sudo_∂ugö_evít
 * (*
evít_Æloc
)();

247 
	s≠¥ovÆ_∂ugö
 {

248 
	#SUDO_APPROVAL_PLUGIN
 4

	)

249 
ty≥
;

250 
vîsi⁄
;

251 (*
›í
)(
vîsi⁄
, 
sudo_c⁄v_t
 
c⁄vîßti⁄
,

252 
sudo_¥ötf_t
 
sudo_¥ötf
, * c⁄° 
£âögs
[],

253 * c⁄° 
u£r_öfo
[], 
submô_›töd
,

254 * c⁄° 
submô_¨gv
[], * c⁄° 
submô_ívp
[],

255 * c⁄° 
∂ugö_›ti⁄s
[], c⁄° **
îr°r
);

256 (*
˛o£
)();

257 (*
check
)(* c⁄° 
comm™d_öfo
[], * c⁄° 
run_¨gv
[],

258 * c⁄° 
run_ívp
[], c⁄° **
îr°r
);

259 (*
show_vîsi⁄
)(
vîbo£
);

263 
	#GROUP_API_VERSION_MAJOR
 1

	)

264 
	#GROUP_API_VERSION_MINOR
 0

	)

265 
	#GROUP_API_VERSION
 
	`SUDO_API_MKVERSION
(
GROUP_API_VERSION_MAJOR
, 
GROUP_API_VERSION_MINOR
)

	)

268 
	#GROUP_API_VERSION_GET_MAJOR
(
v
Ë
	`SUDO_API_VERSION_GET_MAJOR
(v)

	)

269 
	#GROUP_API_VERSION_GET_MINOR
(
v
Ë
	`SUDO_API_VERSION_GET_MINOR
(v)

	)

270 
	#GROUP_API_VERSION_SET_MAJOR
(
vp
, 
n
Ë
	`SUDO_API_VERSION_SET_MAJOR
(vp,Ç)

	)

271 
	#GROUP_API_VERSION_SET_MINOR
(
vp
, 
n
Ë
	`SUDO_API_VERSION_SET_MINOR
(vp,Ç)

	)

280 
	ssud€rs_group_∂ugö
 {

281 
vîsi⁄
;

282 (*
öô
)(
vîsi⁄
, 
sudo_¥ötf_t
 
sudo_¥ötf
, *c⁄° 
¨gv
[]);

283 (*
˛ónup
)();

284 (*
quîy
)(c⁄° *
u£r
, c⁄° *
group
, c⁄° 
∑sswd
 *
pwd
);

	@/usr/include/syscall.h

1 
	~<sys/sysˇŒ.h
>

	@/usr/include/sysexits.h

32 #i‚def 
_SYSEXITS_H


33 
	#_SYSEXITS_H
 1

	)

92 
	#EX_OK
 0

	)

94 
	#EX__BASE
 64

	)

96 
	#EX_USAGE
 64

	)

97 
	#EX_DATAERR
 65

	)

98 
	#EX_NOINPUT
 66

	)

99 
	#EX_NOUSER
 67

	)

100 
	#EX_NOHOST
 68

	)

101 
	#EX_UNAVAILABLE
 69

	)

102 
	#EX_SOFTWARE
 70

	)

103 
	#EX_OSERR
 71

	)

104 
	#EX_OSFILE
 72

	)

105 
	#EX_CANTCREAT
 73

	)

106 
	#EX_IOERR
 74

	)

107 
	#EX_TEMPFAIL
 75

	)

108 
	#EX_PROTOCOL
 76

	)

109 
	#EX_NOPERM
 77

	)

110 
	#EX_CONFIG
 78

	)

112 
	#EX__MAX
 78

	)

	@/usr/include/syslog.h

1 
	~<sys/sy¶og.h
>

	@/usr/include/tar.h

19 #i‚def 
_TAR_H


20 
	#_TAR_H
 1

	)

22 
	~<„©uªs.h
>

73 
	#TSUID
 04000

	)

74 
	#TSGID
 02000

	)

75 #i‡
deföed
 
__USE_XOPEN
 || !deföed 
__USE_XOPEN2K


76 
	#TSVTX
 01000

	)

78 
	#TUREAD
 00400

	)

79 
	#TUWRITE
 00200

	)

80 
	#TUEXEC
 00100

	)

81 
	#TGREAD
 00040

	)

82 
	#TGWRITE
 00020

	)

83 
	#TGEXEC
 00010

	)

84 
	#TOREAD
 00004

	)

85 
	#TOWRITE
 00002

	)

86 
	#TOEXEC
 00001

	)

92 
	#REGTYPE
 '0'

	)

93 
	#AREGTYPE
 '\0'

	)

94 
	#LNKTYPE
 '1'

	)

95 
	#SYMTYPE
 '2'

	)

96 
	#CHRTYPE
 '3'

	)

97 
	#BLKTYPE
 '4'

	)

98 
	#DIRTYPE
 '5'

	)

99 
	#FIFOTYPE
 '6'

	)

100 
	#CONTTYPE
 '7'

	)

104 
	#TMAGIC
 "u°¨"

	)

105 
	#TMAGLEN
 6

	)

108 
	#TVERSION
 "00"

	)

109 
	#TVERSLEN
 2

	)

	@/usr/include/term.h

42 #i‚de‡
NCURSES_TERM_H_ö˛


43 
	#NCURSES_TERM_H_ö˛
 1

	)

45 #unde‡
NCURSES_VERSION


46 
	#NCURSES_VERSION
 "6.3"

	)

48 
	~<ncur£s_dŒ.h
>

50 #ifde‡
__˝lu•lus


58 #i‚de‡
__NCURSES_H


60 
s¸ìn
 
	tSCREEN
;

63 #unde‡
NCURSES_SP_FUNCS


64 
	#NCURSES_SP_FUNCS
 20211021

	)

65 #unde‡
NCURSES_SP_NAME


66 
	#NCURSES_SP_NAME
(
«me
Ë«me##
_•


	)

69 #unde‡
NCURSES_SP_OUTC


70 
	#NCURSES_SP_OUTC
 
	`NCURSES_SP_NAME
(
NCURSES_OUTC
)

	)

71 (*
	tNCURSES_SP_OUTC
)(
	tSCREEN
*, );

76 #unde‡
NCURSES_CONST


77 
	#NCURSES_CONST
 c⁄°

	)

79 #unde‡
NCURSES_SBOOL


80 
	#NCURSES_SBOOL
 

	)

82 #unde‡
NCURSES_USE_DATABASE


83 
	#NCURSES_USE_DATABASE
 1

	)

85 #unde‡
NCURSES_USE_TERMCAP


86 
	#NCURSES_USE_TERMCAP
 0

	)

88 #unde‡
NCURSES_XNAMES


89 
	#NCURSES_XNAMES
 1

	)

94 #unde‡
TTY


95 #unde‡
SET_TTY


96 #unde‡
GET_TTY


102 #unde‡
TERMIOS


103 
	#TERMIOS
 1

	)

105 
	~<ãrmios.h
>

106 
	#TTY
 
ãrmios


	)

113 #unde‡
TERMIOS


114 
	#TERMIOS
 1

	)

116 
	~<ãrmio.h
>

117 
	#TTY
 
ãrmio


	)

121 #i‡(
	`deföed
(
_WIN32
Ë|| deföed(
_WIN64
))

123 
	~<wö32_cur£s.h
>

124 
	#TTY
 
wöc⁄mode


	)

126 
	~<ncur£s_mögw.h
>

127 
	#TTY
 
ãrmios


	)

130 #unde‡
TERMIOS


131 
	~<sgây.h
>

132 
	~<sys/io˘l.h
>

133 
	#TTY
 
sgâyb


	)

139 #ifde‡
TERMIOS


140 
	#GET_TTY
(
fd
, 
buf
Ë
	`tcgë©å
(fd, buf)

	)

141 
	#SET_TTY
(
fd
, 
buf
Ë
	`tc£èâr
(fd, 
TCSADRAIN
, buf)

	)

142 #ñi‡0 && (
	`deföed
(
_WIN32
Ë|| deföed(
_WIN64
))

143 
	#GET_TTY
(
fd
, 
buf
Ë
	`_nc_c⁄sﬁe_gëmode
(
	`_nc_c⁄sﬁe_fd2h™dÀ
(fd),buf)

	)

144 
	#SET_TTY
(
fd
, 
buf
Ë
	`_nc_c⁄sﬁe_£tmode
(
	`_nc_c⁄sﬁe_fd2h™dÀ
(fd),buf)

	)

146 
	#GET_TTY
(
fd
, 
buf
Ë
	`gây
(fd, buf)

	)

147 
	#SET_TTY
(
fd
, 
buf
Ë
	`°ty
(fd, buf)

	)

150 #i‚def 
GCC_NORETURN


151 
	#GCC_NORETURN


	)

154 
	#NAMESIZE
 256

	)

157 
	#CUR
 ((
TERMTYPE
 *)(
cur_ãrm
))->

	)

159 
	#auto_À·_m¨gö
 
CUR
 
Boﬁóns
[0]

	)

160 
	#auto_right_m¨gö
 
CUR
 
Boﬁóns
[1]

	)

161 
	#no_esc_˘lc
 
CUR
 
Boﬁóns
[2]

	)

162 
	#˚ﬁ_°™dout_glôch
 
CUR
 
Boﬁóns
[3]

	)

163 
	#ót_√wlöe_glôch
 
CUR
 
Boﬁóns
[4]

	)

164 
	#îa£_ovî°rike
 
CUR
 
Boﬁóns
[5]

	)

165 
	#gíîic_ty≥
 
CUR
 
Boﬁóns
[6]

	)

166 
	#h¨d_c›y
 
CUR
 
Boﬁóns
[7]

	)

167 
	#has_mëa_key
 
CUR
 
Boﬁóns
[8]

	)

168 
	#has_°©us_löe
 
CUR
 
Boﬁóns
[9]

	)

169 
	#ö£π_nuŒ_glôch
 
CUR
 
Boﬁóns
[10]

	)

170 
	#mem‹y_above
 
CUR
 
Boﬁóns
[11]

	)

171 
	#mem‹y_bñow
 
CUR
 
Boﬁóns
[12]

	)

172 
	#move_ö£π_mode
 
CUR
 
Boﬁóns
[13]

	)

173 
	#move_°™dout_mode
 
CUR
 
Boﬁóns
[14]

	)

174 
	#ovî_°rike
 
CUR
 
Boﬁóns
[15]

	)

175 
	#°©us_löe_esc_ok
 
CUR
 
Boﬁóns
[16]

	)

176 
	#de°_èbs_magic_smso
 
CUR
 
Boﬁóns
[17]

	)

177 
	#tûde_glôch
 
CUR
 
Boﬁóns
[18]

	)

178 
	#å™•¨ít_undîlöe
 
CUR
 
Boﬁóns
[19]

	)

179 
	#x⁄_xoff
 
CUR
 
Boﬁóns
[20]

	)

180 
	#√eds_x⁄_xoff
 
CUR
 
Boﬁóns
[21]

	)

181 
	#¥å_sûít
 
CUR
 
Boﬁóns
[22]

	)

182 
	#h¨d_curs‹
 
CUR
 
Boﬁóns
[23]

	)

183 
	#n⁄_ªv_rmcup
 
CUR
 
Boﬁóns
[24]

	)

184 
	#no_∑d_ch¨
 
CUR
 
Boﬁóns
[25]

	)

185 
	#n⁄_de°_s¸ﬁl_ªgi⁄
 
CUR
 
Boﬁóns
[26]

	)

186 
	#ˇn_ch™ge
 
CUR
 
Boﬁóns
[27]

	)

187 
	#back_cﬁ‹_îa£
 
CUR
 
Boﬁóns
[28]

	)

188 
	#hue_lighäess_ßtuøti⁄
 
CUR
 
Boﬁóns
[29]

	)

189 
	#cﬁ_addr_glôch
 
CUR
 
Boﬁóns
[30]

	)

190 
	#¸_ˇn˚ls_mi¸o_mode
 
CUR
 
Boﬁóns
[31]

	)

191 
	#has_¥öt_whìl
 
CUR
 
Boﬁóns
[32]

	)

192 
	#row_addr_glôch
 
CUR
 
Boﬁóns
[33]

	)

193 
	#£mi_auto_right_m¨gö
 
CUR
 
Boﬁóns
[34]

	)

194 
	#˝i_ch™ges_ªs
 
CUR
 
Boﬁóns
[35]

	)

195 
	#Õi_ch™ges_ªs
 
CUR
 
Boﬁóns
[36]

	)

196 
	#cﬁumns
 
CUR
 
Numbîs
[0]

	)

197 
	#öô_èbs
 
CUR
 
Numbîs
[1]

	)

198 
	#löes
 
CUR
 
Numbîs
[2]

	)

199 
	#löes_of_mem‹y
 
CUR
 
Numbîs
[3]

	)

200 
	#magic_cookõ_glôch
 
CUR
 
Numbîs
[4]

	)

201 
	#∑ddög_baud_øã
 
CUR
 
Numbîs
[5]

	)

202 
	#vútuÆ_ãrmöÆ
 
CUR
 
Numbîs
[6]

	)

203 
	#width_°©us_löe
 
CUR
 
Numbîs
[7]

	)

204 
	#num_œbñs
 
CUR
 
Numbîs
[8]

	)

205 
	#œbñ_height
 
CUR
 
Numbîs
[9]

	)

206 
	#œbñ_width
 
CUR
 
Numbîs
[10]

	)

207 
	#max_©åibuãs
 
CUR
 
Numbîs
[11]

	)

208 
	#maximum_wödows
 
CUR
 
Numbîs
[12]

	)

209 
	#max_cﬁ‹s
 
CUR
 
Numbîs
[13]

	)

210 
	#max_∑ús
 
CUR
 
Numbîs
[14]

	)

211 
	#no_cﬁ‹_video
 
CUR
 
Numbîs
[15]

	)

212 
	#buf„r_ˇ∑côy
 
CUR
 
Numbîs
[16]

	)

213 
	#dŸ_vît_•acög
 
CUR
 
Numbîs
[17]

	)

214 
	#dŸ_h‹z_•acög
 
CUR
 
Numbîs
[18]

	)

215 
	#max_mi¸o_addªss
 
CUR
 
Numbîs
[19]

	)

216 
	#max_mi¸o_jump
 
CUR
 
Numbîs
[20]

	)

217 
	#mi¸o_cﬁ_size
 
CUR
 
Numbîs
[21]

	)

218 
	#mi¸o_löe_size
 
CUR
 
Numbîs
[22]

	)

219 
	#numbî_of_pös
 
CUR
 
Numbîs
[23]

	)

220 
	#ouçut_ªs_ch¨
 
CUR
 
Numbîs
[24]

	)

221 
	#ouçut_ªs_löe
 
CUR
 
Numbîs
[25]

	)

222 
	#ouçut_ªs_h‹z_öch
 
CUR
 
Numbîs
[26]

	)

223 
	#ouçut_ªs_vît_öch
 
CUR
 
Numbîs
[27]

	)

224 
	#¥öt_øã
 
CUR
 
Numbîs
[28]

	)

225 
	#wide_ch¨_size
 
CUR
 
Numbîs
[29]

	)

226 
	#buâ⁄s
 
CUR
 
Numbîs
[30]

	)

227 
	#bô_image_ítwöög
 
CUR
 
Numbîs
[31]

	)

228 
	#bô_image_ty≥
 
CUR
 
Numbîs
[32]

	)

229 
	#back_èb
 
CUR
 
Såögs
[0]

	)

230 
	#bñl
 
CUR
 
Såögs
[1]

	)

231 
	#ˇºüge_ªtu∫
 
CUR
 
Såögs
[2]

	)

232 
	#ch™ge_s¸ﬁl_ªgi⁄
 
CUR
 
Såögs
[3]

	)

233 
	#˛ór_Æl_èbs
 
CUR
 
Såögs
[4]

	)

234 
	#˛ór_s¸ìn
 
CUR
 
Såögs
[5]

	)

235 
	#˛r_eﬁ
 
CUR
 
Såögs
[6]

	)

236 
	#˛r_eos
 
CUR
 
Såögs
[7]

	)

237 
	#cﬁumn_addªss
 
CUR
 
Såögs
[8]

	)

238 
	#comm™d_ch¨a˘î
 
CUR
 
Såögs
[9]

	)

239 
	#curs‹_addªss
 
CUR
 
Såögs
[10]

	)

240 
	#curs‹_down
 
CUR
 
Såögs
[11]

	)

241 
	#curs‹_home
 
CUR
 
Såögs
[12]

	)

242 
	#curs‹_övisibÀ
 
CUR
 
Såögs
[13]

	)

243 
	#curs‹_À·
 
CUR
 
Såögs
[14]

	)

244 
	#curs‹_mem_addªss
 
CUR
 
Såögs
[15]

	)

245 
	#curs‹_n‹mÆ
 
CUR
 
Såögs
[16]

	)

246 
	#curs‹_right
 
CUR
 
Såögs
[17]

	)

247 
	#curs‹_to_Œ
 
CUR
 
Såögs
[18]

	)

248 
	#curs‹_up
 
CUR
 
Såögs
[19]

	)

249 
	#curs‹_visibÀ
 
CUR
 
Såögs
[20]

	)

250 
	#dñëe_ch¨a˘î
 
CUR
 
Såögs
[21]

	)

251 
	#dñëe_löe
 
CUR
 
Såögs
[22]

	)

252 
	#dis_°©us_löe
 
CUR
 
Såögs
[23]

	)

253 
	#down_hÆf_löe
 
CUR
 
Såögs
[24]

	)

254 
	#íãr_Æt_ch¨£t_mode
 
CUR
 
Såögs
[25]

	)

255 
	#íãr_blök_mode
 
CUR
 
Såögs
[26]

	)

256 
	#íãr_bﬁd_mode
 
CUR
 
Såögs
[27]

	)

257 
	#íãr_ˇ_mode
 
CUR
 
Såögs
[28]

	)

258 
	#íãr_dñëe_mode
 
CUR
 
Såögs
[29]

	)

259 
	#íãr_dim_mode
 
CUR
 
Såögs
[30]

	)

260 
	#íãr_ö£π_mode
 
CUR
 
Såögs
[31]

	)

261 
	#íãr_£cuª_mode
 
CUR
 
Såögs
[32]

	)

262 
	#íãr_¥Ÿe˘ed_mode
 
CUR
 
Såögs
[33]

	)

263 
	#íãr_ªvî£_mode
 
CUR
 
Såögs
[34]

	)

264 
	#íãr_°™dout_mode
 
CUR
 
Såögs
[35]

	)

265 
	#íãr_undîlöe_mode
 
CUR
 
Såögs
[36]

	)

266 
	#îa£_ch¨s
 
CUR
 
Såögs
[37]

	)

267 
	#exô_Æt_ch¨£t_mode
 
CUR
 
Såögs
[38]

	)

268 
	#exô_©åibuã_mode
 
CUR
 
Såögs
[39]

	)

269 
	#exô_ˇ_mode
 
CUR
 
Såögs
[40]

	)

270 
	#exô_dñëe_mode
 
CUR
 
Såögs
[41]

	)

271 
	#exô_ö£π_mode
 
CUR
 
Såögs
[42]

	)

272 
	#exô_°™dout_mode
 
CUR
 
Såögs
[43]

	)

273 
	#exô_undîlöe_mode
 
CUR
 
Såögs
[44]

	)

274 
	#Êash_s¸ìn
 
CUR
 
Såögs
[45]

	)

275 
	#f‹m_„ed
 
CUR
 
Såögs
[46]

	)

276 
	#‰om_°©us_löe
 
CUR
 
Såögs
[47]

	)

277 
	#öô_1°rög
 
CUR
 
Såögs
[48]

	)

278 
	#öô_2°rög
 
CUR
 
Såögs
[49]

	)

279 
	#öô_3°rög
 
CUR
 
Såögs
[50]

	)

280 
	#öô_fûe
 
CUR
 
Såögs
[51]

	)

281 
	#ö£π_ch¨a˘î
 
CUR
 
Såögs
[52]

	)

282 
	#ö£π_löe
 
CUR
 
Såögs
[53]

	)

283 
	#ö£π_∑ddög
 
CUR
 
Såögs
[54]

	)

284 
	#key_back•a˚
 
CUR
 
Såögs
[55]

	)

285 
	#key_ˇèb
 
CUR
 
Såögs
[56]

	)

286 
	#key_˛ór
 
CUR
 
Såögs
[57]

	)

287 
	#key_˘ab
 
CUR
 
Såögs
[58]

	)

288 
	#key_dc
 
CUR
 
Såögs
[59]

	)

289 
	#key_dl
 
CUR
 
Såögs
[60]

	)

290 
	#key_down
 
CUR
 
Såögs
[61]

	)

291 
	#key_eic
 
CUR
 
Såögs
[62]

	)

292 
	#key_eﬁ
 
CUR
 
Såögs
[63]

	)

293 
	#key_eos
 
CUR
 
Såögs
[64]

	)

294 
	#key_f0
 
CUR
 
Såögs
[65]

	)

295 
	#key_f1
 
CUR
 
Såögs
[66]

	)

296 
	#key_f10
 
CUR
 
Såögs
[67]

	)

297 
	#key_f2
 
CUR
 
Såögs
[68]

	)

298 
	#key_f3
 
CUR
 
Såögs
[69]

	)

299 
	#key_f4
 
CUR
 
Såögs
[70]

	)

300 
	#key_f5
 
CUR
 
Såögs
[71]

	)

301 
	#key_f6
 
CUR
 
Såögs
[72]

	)

302 
	#key_f7
 
CUR
 
Såögs
[73]

	)

303 
	#key_f8
 
CUR
 
Såögs
[74]

	)

304 
	#key_f9
 
CUR
 
Såögs
[75]

	)

305 
	#key_home
 
CUR
 
Såögs
[76]

	)

306 
	#key_ic
 
CUR
 
Såögs
[77]

	)

307 
	#key_û
 
CUR
 
Såögs
[78]

	)

308 
	#key_À·
 
CUR
 
Såögs
[79]

	)

309 
	#key_Œ
 
CUR
 
Såögs
[80]

	)

310 
	#key_≈age
 
CUR
 
Såögs
[81]

	)

311 
	#key_µage
 
CUR
 
Såögs
[82]

	)

312 
	#key_right
 
CUR
 
Såögs
[83]

	)

313 
	#key_sf
 
CUR
 
Såögs
[84]

	)

314 
	#key_§
 
CUR
 
Såögs
[85]

	)

315 
	#key_°ab
 
CUR
 
Såögs
[86]

	)

316 
	#key_up
 
CUR
 
Såögs
[87]

	)

317 
	#key∑d_loˇl
 
CUR
 
Såögs
[88]

	)

318 
	#key∑d_xmô
 
CUR
 
Såögs
[89]

	)

319 
	#œb_f0
 
CUR
 
Såögs
[90]

	)

320 
	#œb_f1
 
CUR
 
Såögs
[91]

	)

321 
	#œb_f10
 
CUR
 
Såögs
[92]

	)

322 
	#œb_f2
 
CUR
 
Såögs
[93]

	)

323 
	#œb_f3
 
CUR
 
Såögs
[94]

	)

324 
	#œb_f4
 
CUR
 
Såögs
[95]

	)

325 
	#œb_f5
 
CUR
 
Såögs
[96]

	)

326 
	#œb_f6
 
CUR
 
Såögs
[97]

	)

327 
	#œb_f7
 
CUR
 
Såögs
[98]

	)

328 
	#œb_f8
 
CUR
 
Såögs
[99]

	)

329 
	#œb_f9
 
CUR
 
Såögs
[100]

	)

330 
	#mëa_off
 
CUR
 
Såögs
[101]

	)

331 
	#mëa_⁄
 
CUR
 
Såögs
[102]

	)

332 
	#√wlöe
 
CUR
 
Såögs
[103]

	)

333 
	#∑d_ch¨
 
CUR
 
Såögs
[104]

	)

334 
	#∑rm_dch
 
CUR
 
Såögs
[105]

	)

335 
	#∑rm_dñëe_löe
 
CUR
 
Såögs
[106]

	)

336 
	#∑rm_down_curs‹
 
CUR
 
Såögs
[107]

	)

337 
	#∑rm_ich
 
CUR
 
Såögs
[108]

	)

338 
	#∑rm_ödex
 
CUR
 
Såögs
[109]

	)

339 
	#∑rm_ö£π_löe
 
CUR
 
Såögs
[110]

	)

340 
	#∑rm_À·_curs‹
 
CUR
 
Såögs
[111]

	)

341 
	#∑rm_right_curs‹
 
CUR
 
Såögs
[112]

	)

342 
	#∑rm_rödex
 
CUR
 
Såögs
[113]

	)

343 
	#∑rm_up_curs‹
 
CUR
 
Såögs
[114]

	)

344 
	#pkey_key
 
CUR
 
Såögs
[115]

	)

345 
	#pkey_loˇl
 
CUR
 
Såögs
[116]

	)

346 
	#pkey_xmô
 
CUR
 
Såögs
[117]

	)

347 
	#¥öt_s¸ìn
 
CUR
 
Såögs
[118]

	)

348 
	#¥å_off
 
CUR
 
Såögs
[119]

	)

349 
	#¥å_⁄
 
CUR
 
Såögs
[120]

	)

350 
	#ª≥©_ch¨
 
CUR
 
Såögs
[121]

	)

351 
	#ª£t_1°rög
 
CUR
 
Såögs
[122]

	)

352 
	#ª£t_2°rög
 
CUR
 
Såögs
[123]

	)

353 
	#ª£t_3°rög
 
CUR
 
Såögs
[124]

	)

354 
	#ª£t_fûe
 
CUR
 
Såögs
[125]

	)

355 
	#ª°‹e_curs‹
 
CUR
 
Såögs
[126]

	)

356 
	#row_addªss
 
CUR
 
Såögs
[127]

	)

357 
	#ßve_curs‹
 
CUR
 
Såögs
[128]

	)

358 
	#s¸ﬁl_f‹w¨d
 
CUR
 
Såögs
[129]

	)

359 
	#s¸ﬁl_ªvî£
 
CUR
 
Såögs
[130]

	)

360 
	#£t_©åibuãs
 
CUR
 
Såögs
[131]

	)

361 
	#£t_èb
 
CUR
 
Såögs
[132]

	)

362 
	#£t_wödow
 
CUR
 
Såögs
[133]

	)

363 
	#èb
 
CUR
 
Såögs
[134]

	)

364 
	#to_°©us_löe
 
CUR
 
Såögs
[135]

	)

365 
	#undîlöe_ch¨
 
CUR
 
Såögs
[136]

	)

366 
	#up_hÆf_löe
 
CUR
 
Såögs
[137]

	)

367 
	#öô_¥og
 
CUR
 
Såögs
[138]

	)

368 
	#key_a1
 
CUR
 
Såögs
[139]

	)

369 
	#key_a3
 
CUR
 
Såögs
[140]

	)

370 
	#key_b2
 
CUR
 
Såögs
[141]

	)

371 
	#key_c1
 
CUR
 
Såögs
[142]

	)

372 
	#key_c3
 
CUR
 
Såögs
[143]

	)

373 
	#¥å_n⁄
 
CUR
 
Såögs
[144]

	)

374 
	#ch¨_∑ddög
 
CUR
 
Såögs
[145]

	)

375 
	#acs_ch¨s
 
CUR
 
Såögs
[146]

	)

376 
	#∂ab_n‹m
 
CUR
 
Såögs
[147]

	)

377 
	#key_bèb
 
CUR
 
Såögs
[148]

	)

378 
	#íãr_x⁄_mode
 
CUR
 
Såögs
[149]

	)

379 
	#exô_x⁄_mode
 
CUR
 
Såögs
[150]

	)

380 
	#íãr_am_mode
 
CUR
 
Såögs
[151]

	)

381 
	#exô_am_mode
 
CUR
 
Såögs
[152]

	)

382 
	#x⁄_ch¨a˘î
 
CUR
 
Såögs
[153]

	)

383 
	#xoff_ch¨a˘î
 
CUR
 
Såögs
[154]

	)

384 
	#ía_acs
 
CUR
 
Såögs
[155]

	)

385 
	#œbñ_⁄
 
CUR
 
Såögs
[156]

	)

386 
	#œbñ_off
 
CUR
 
Såögs
[157]

	)

387 
	#key_beg
 
CUR
 
Såögs
[158]

	)

388 
	#key_ˇn˚l
 
CUR
 
Såögs
[159]

	)

389 
	#key_˛o£
 
CUR
 
Såögs
[160]

	)

390 
	#key_comm™d
 
CUR
 
Såögs
[161]

	)

391 
	#key_c›y
 
CUR
 
Såögs
[162]

	)

392 
	#key_¸óã
 
CUR
 
Såögs
[163]

	)

393 
	#key_íd
 
CUR
 
Såögs
[164]

	)

394 
	#key_íãr
 
CUR
 
Såögs
[165]

	)

395 
	#key_exô
 
CUR
 
Såögs
[166]

	)

396 
	#key_föd
 
CUR
 
Såögs
[167]

	)

397 
	#key_hñp
 
CUR
 
Såögs
[168]

	)

398 
	#key_m¨k
 
CUR
 
Såögs
[169]

	)

399 
	#key_mesßge
 
CUR
 
Såögs
[170]

	)

400 
	#key_move
 
CUR
 
Såögs
[171]

	)

401 
	#key_√xt
 
CUR
 
Såögs
[172]

	)

402 
	#key_›í
 
CUR
 
Såögs
[173]

	)

403 
	#key_›ti⁄s
 
CUR
 
Såögs
[174]

	)

404 
	#key_¥evious
 
CUR
 
Såögs
[175]

	)

405 
	#key_¥öt
 
CUR
 
Såögs
[176]

	)

406 
	#key_ªdo
 
CUR
 
Såögs
[177]

	)

407 
	#key_ª„ªn˚
 
CUR
 
Såögs
[178]

	)

408 
	#key_ª‰esh
 
CUR
 
Såögs
[179]

	)

409 
	#key_ª∂a˚
 
CUR
 
Såögs
[180]

	)

410 
	#key_ª°¨t
 
CUR
 
Såögs
[181]

	)

411 
	#key_ªsume
 
CUR
 
Såögs
[182]

	)

412 
	#key_ßve
 
CUR
 
Såögs
[183]

	)

413 
	#key_su•íd
 
CUR
 
Såögs
[184]

	)

414 
	#key_undo
 
CUR
 
Såögs
[185]

	)

415 
	#key_sbeg
 
CUR
 
Såögs
[186]

	)

416 
	#key_sˇn˚l
 
CUR
 
Såögs
[187]

	)

417 
	#key_scomm™d
 
CUR
 
Såögs
[188]

	)

418 
	#key_sc›y
 
CUR
 
Såögs
[189]

	)

419 
	#key_s¸óã
 
CUR
 
Såögs
[190]

	)

420 
	#key_sdc
 
CUR
 
Såögs
[191]

	)

421 
	#key_sdl
 
CUR
 
Såögs
[192]

	)

422 
	#key_£À˘
 
CUR
 
Såögs
[193]

	)

423 
	#key_£nd
 
CUR
 
Såögs
[194]

	)

424 
	#key_£ﬁ
 
CUR
 
Såögs
[195]

	)

425 
	#key_£xô
 
CUR
 
Såögs
[196]

	)

426 
	#key_sföd
 
CUR
 
Såögs
[197]

	)

427 
	#key_shñp
 
CUR
 
Såögs
[198]

	)

428 
	#key_shome
 
CUR
 
Såögs
[199]

	)

429 
	#key_sic
 
CUR
 
Såögs
[200]

	)

430 
	#key_¶e·
 
CUR
 
Såögs
[201]

	)

431 
	#key_smesßge
 
CUR
 
Såögs
[202]

	)

432 
	#key_smove
 
CUR
 
Såögs
[203]

	)

433 
	#key_¢ext
 
CUR
 
Såögs
[204]

	)

434 
	#key_s›ti⁄s
 
CUR
 
Såögs
[205]

	)

435 
	#key_•ªvious
 
CUR
 
Såögs
[206]

	)

436 
	#key_•röt
 
CUR
 
Såögs
[207]

	)

437 
	#key_§edo
 
CUR
 
Såögs
[208]

	)

438 
	#key_§ïœ˚
 
CUR
 
Såögs
[209]

	)

439 
	#key_§ight
 
CUR
 
Såögs
[210]

	)

440 
	#key_§sume
 
CUR
 
Såögs
[211]

	)

441 
	#key_sßve
 
CUR
 
Såögs
[212]

	)

442 
	#key_ssu•íd
 
CUR
 
Såögs
[213]

	)

443 
	#key_sundo
 
CUR
 
Såögs
[214]

	)

444 
	#ªq_f‹_öput
 
CUR
 
Såögs
[215]

	)

445 
	#key_f11
 
CUR
 
Såögs
[216]

	)

446 
	#key_f12
 
CUR
 
Såögs
[217]

	)

447 
	#key_f13
 
CUR
 
Såögs
[218]

	)

448 
	#key_f14
 
CUR
 
Såögs
[219]

	)

449 
	#key_f15
 
CUR
 
Såögs
[220]

	)

450 
	#key_f16
 
CUR
 
Såögs
[221]

	)

451 
	#key_f17
 
CUR
 
Såögs
[222]

	)

452 
	#key_f18
 
CUR
 
Såögs
[223]

	)

453 
	#key_f19
 
CUR
 
Såögs
[224]

	)

454 
	#key_f20
 
CUR
 
Såögs
[225]

	)

455 
	#key_f21
 
CUR
 
Såögs
[226]

	)

456 
	#key_f22
 
CUR
 
Såögs
[227]

	)

457 
	#key_f23
 
CUR
 
Såögs
[228]

	)

458 
	#key_f24
 
CUR
 
Såögs
[229]

	)

459 
	#key_f25
 
CUR
 
Såögs
[230]

	)

460 
	#key_f26
 
CUR
 
Såögs
[231]

	)

461 
	#key_f27
 
CUR
 
Såögs
[232]

	)

462 
	#key_f28
 
CUR
 
Såögs
[233]

	)

463 
	#key_f29
 
CUR
 
Såögs
[234]

	)

464 
	#key_f30
 
CUR
 
Såögs
[235]

	)

465 
	#key_f31
 
CUR
 
Såögs
[236]

	)

466 
	#key_f32
 
CUR
 
Såögs
[237]

	)

467 
	#key_f33
 
CUR
 
Såögs
[238]

	)

468 
	#key_f34
 
CUR
 
Såögs
[239]

	)

469 
	#key_f35
 
CUR
 
Såögs
[240]

	)

470 
	#key_f36
 
CUR
 
Såögs
[241]

	)

471 
	#key_f37
 
CUR
 
Såögs
[242]

	)

472 
	#key_f38
 
CUR
 
Såögs
[243]

	)

473 
	#key_f39
 
CUR
 
Såögs
[244]

	)

474 
	#key_f40
 
CUR
 
Såögs
[245]

	)

475 
	#key_f41
 
CUR
 
Såögs
[246]

	)

476 
	#key_f42
 
CUR
 
Såögs
[247]

	)

477 
	#key_f43
 
CUR
 
Såögs
[248]

	)

478 
	#key_f44
 
CUR
 
Såögs
[249]

	)

479 
	#key_f45
 
CUR
 
Såögs
[250]

	)

480 
	#key_f46
 
CUR
 
Såögs
[251]

	)

481 
	#key_f47
 
CUR
 
Såögs
[252]

	)

482 
	#key_f48
 
CUR
 
Såögs
[253]

	)

483 
	#key_f49
 
CUR
 
Såögs
[254]

	)

484 
	#key_f50
 
CUR
 
Såögs
[255]

	)

485 
	#key_f51
 
CUR
 
Såögs
[256]

	)

486 
	#key_f52
 
CUR
 
Såögs
[257]

	)

487 
	#key_f53
 
CUR
 
Såögs
[258]

	)

488 
	#key_f54
 
CUR
 
Såögs
[259]

	)

489 
	#key_f55
 
CUR
 
Såögs
[260]

	)

490 
	#key_f56
 
CUR
 
Såögs
[261]

	)

491 
	#key_f57
 
CUR
 
Såögs
[262]

	)

492 
	#key_f58
 
CUR
 
Såögs
[263]

	)

493 
	#key_f59
 
CUR
 
Såögs
[264]

	)

494 
	#key_f60
 
CUR
 
Såögs
[265]

	)

495 
	#key_f61
 
CUR
 
Såögs
[266]

	)

496 
	#key_f62
 
CUR
 
Såögs
[267]

	)

497 
	#key_f63
 
CUR
 
Såögs
[268]

	)

498 
	#˛r_bﬁ
 
CUR
 
Såögs
[269]

	)

499 
	#˛ór_m¨gös
 
CUR
 
Såögs
[270]

	)

500 
	#£t_À·_m¨gö
 
CUR
 
Såögs
[271]

	)

501 
	#£t_right_m¨gö
 
CUR
 
Såögs
[272]

	)

502 
	#œbñ_f‹m©
 
CUR
 
Såögs
[273]

	)

503 
	#£t_˛ock
 
CUR
 
Såögs
[274]

	)

504 
	#di•œy_˛ock
 
CUR
 
Såögs
[275]

	)

505 
	#ªmove_˛ock
 
CUR
 
Såögs
[276]

	)

506 
	#¸óã_wödow
 
CUR
 
Såögs
[277]

	)

507 
	#gŸo_wödow
 
CUR
 
Såögs
[278]

	)

508 
	#h™gup
 
CUR
 
Såögs
[279]

	)

509 
	#dül_ph⁄e
 
CUR
 
Såögs
[280]

	)

510 
	#quick_dül
 
CUR
 
Såögs
[281]

	)

511 
	#t⁄e
 
CUR
 
Såögs
[282]

	)

512 
	#pul£
 
CUR
 
Såögs
[283]

	)

513 
	#Êash_hook
 
CUR
 
Såögs
[284]

	)

514 
	#fixed_∑u£
 
CUR
 
Såögs
[285]

	)

515 
	#waô_t⁄e
 
CUR
 
Såögs
[286]

	)

516 
	#u£r0
 
CUR
 
Såögs
[287]

	)

517 
	#u£r1
 
CUR
 
Såögs
[288]

	)

518 
	#u£r2
 
CUR
 
Såögs
[289]

	)

519 
	#u£r3
 
CUR
 
Såögs
[290]

	)

520 
	#u£r4
 
CUR
 
Såögs
[291]

	)

521 
	#u£r5
 
CUR
 
Såögs
[292]

	)

522 
	#u£r6
 
CUR
 
Såögs
[293]

	)

523 
	#u£r7
 
CUR
 
Såögs
[294]

	)

524 
	#u£r8
 
CUR
 
Såögs
[295]

	)

525 
	#u£r9
 
CUR
 
Såögs
[296]

	)

526 
	#‹ig_∑ú
 
CUR
 
Såögs
[297]

	)

527 
	#‹ig_cﬁ‹s
 
CUR
 
Såögs
[298]

	)

528 
	#öôülize_cﬁ‹
 
CUR
 
Såögs
[299]

	)

529 
	#öôülize_∑ú
 
CUR
 
Såögs
[300]

	)

530 
	#£t_cﬁ‹_∑ú
 
CUR
 
Såögs
[301]

	)

531 
	#£t_f‹eground
 
CUR
 
Såögs
[302]

	)

532 
	#£t_background
 
CUR
 
Såögs
[303]

	)

533 
	#ch™ge_ch¨_pôch
 
CUR
 
Såögs
[304]

	)

534 
	#ch™ge_löe_pôch
 
CUR
 
Såögs
[305]

	)

535 
	#ch™ge_ªs_h‹z
 
CUR
 
Såögs
[306]

	)

536 
	#ch™ge_ªs_vît
 
CUR
 
Såögs
[307]

	)

537 
	#deföe_ch¨
 
CUR
 
Såögs
[308]

	)

538 
	#íãr_doubÀwide_mode
 
CUR
 
Såögs
[309]

	)

539 
	#íãr_dø·_quÆôy
 
CUR
 
Såögs
[310]

	)

540 
	#íãr_ôÆics_mode
 
CUR
 
Såögs
[311]

	)

541 
	#íãr_À·w¨d_mode
 
CUR
 
Såögs
[312]

	)

542 
	#íãr_mi¸o_mode
 
CUR
 
Såögs
[313]

	)

543 
	#íãr_√¨_Àâî_quÆôy
 
CUR
 
Såögs
[314]

	)

544 
	#íãr_n‹mÆ_quÆôy
 
CUR
 
Såögs
[315]

	)

545 
	#íãr_shadow_mode
 
CUR
 
Såögs
[316]

	)

546 
	#íãr_subs¸ùt_mode
 
CUR
 
Såögs
[317]

	)

547 
	#íãr_su≥rs¸ùt_mode
 
CUR
 
Såögs
[318]

	)

548 
	#íãr_upw¨d_mode
 
CUR
 
Såögs
[319]

	)

549 
	#exô_doubÀwide_mode
 
CUR
 
Såögs
[320]

	)

550 
	#exô_ôÆics_mode
 
CUR
 
Såögs
[321]

	)

551 
	#exô_À·w¨d_mode
 
CUR
 
Såögs
[322]

	)

552 
	#exô_mi¸o_mode
 
CUR
 
Såögs
[323]

	)

553 
	#exô_shadow_mode
 
CUR
 
Såögs
[324]

	)

554 
	#exô_subs¸ùt_mode
 
CUR
 
Såögs
[325]

	)

555 
	#exô_su≥rs¸ùt_mode
 
CUR
 
Såögs
[326]

	)

556 
	#exô_upw¨d_mode
 
CUR
 
Såögs
[327]

	)

557 
	#mi¸o_cﬁumn_addªss
 
CUR
 
Såögs
[328]

	)

558 
	#mi¸o_down
 
CUR
 
Såögs
[329]

	)

559 
	#mi¸o_À·
 
CUR
 
Såögs
[330]

	)

560 
	#mi¸o_right
 
CUR
 
Såögs
[331]

	)

561 
	#mi¸o_row_addªss
 
CUR
 
Såögs
[332]

	)

562 
	#mi¸o_up
 
CUR
 
Såögs
[333]

	)

563 
	#‹dî_of_pös
 
CUR
 
Såögs
[334]

	)

564 
	#∑rm_down_mi¸o
 
CUR
 
Såögs
[335]

	)

565 
	#∑rm_À·_mi¸o
 
CUR
 
Såögs
[336]

	)

566 
	#∑rm_right_mi¸o
 
CUR
 
Såögs
[337]

	)

567 
	#∑rm_up_mi¸o
 
CUR
 
Såögs
[338]

	)

568 
	#£À˘_ch¨_£t
 
CUR
 
Såögs
[339]

	)

569 
	#£t_bŸtom_m¨gö
 
CUR
 
Såögs
[340]

	)

570 
	#£t_bŸtom_m¨gö_∑rm
 
CUR
 
Såögs
[341]

	)

571 
	#£t_À·_m¨gö_∑rm
 
CUR
 
Såögs
[342]

	)

572 
	#£t_right_m¨gö_∑rm
 
CUR
 
Såögs
[343]

	)

573 
	#£t_t›_m¨gö
 
CUR
 
Såögs
[344]

	)

574 
	#£t_t›_m¨gö_∑rm
 
CUR
 
Såögs
[345]

	)

575 
	#°¨t_bô_image
 
CUR
 
Såögs
[346]

	)

576 
	#°¨t_ch¨_£t_def
 
CUR
 
Såögs
[347]

	)

577 
	#°›_bô_image
 
CUR
 
Såögs
[348]

	)

578 
	#°›_ch¨_£t_def
 
CUR
 
Såögs
[349]

	)

579 
	#subs¸ùt_ch¨a˘îs
 
CUR
 
Såögs
[350]

	)

580 
	#su≥rs¸ùt_ch¨a˘îs
 
CUR
 
Såögs
[351]

	)

581 
	#the£_ˇu£_¸
 
CUR
 
Såögs
[352]

	)

582 
	#zîo_mŸi⁄
 
CUR
 
Såögs
[353]

	)

583 
	#ch¨_£t_«mes
 
CUR
 
Såögs
[354]

	)

584 
	#key_mou£
 
CUR
 
Såögs
[355]

	)

585 
	#mou£_öfo
 
CUR
 
Såögs
[356]

	)

586 
	#ªq_mou£_pos
 
CUR
 
Såögs
[357]

	)

587 
	#gë_mou£
 
CUR
 
Såögs
[358]

	)

588 
	#£t_a_f‹eground
 
CUR
 
Såögs
[359]

	)

589 
	#£t_a_background
 
CUR
 
Såögs
[360]

	)

590 
	#pkey_∂ab
 
CUR
 
Såögs
[361]

	)

591 
	#devi˚_ty≥
 
CUR
 
Såögs
[362]

	)

592 
	#code_£t_öô
 
CUR
 
Såögs
[363]

	)

593 
	#£t0_des_£q
 
CUR
 
Såögs
[364]

	)

594 
	#£t1_des_£q
 
CUR
 
Såögs
[365]

	)

595 
	#£t2_des_£q
 
CUR
 
Såögs
[366]

	)

596 
	#£t3_des_£q
 
CUR
 
Såögs
[367]

	)

597 
	#£t_Ã_m¨gö
 
CUR
 
Såögs
[368]

	)

598 
	#£t_tb_m¨gö
 
CUR
 
Såögs
[369]

	)

599 
	#bô_image_ª≥©
 
CUR
 
Såögs
[370]

	)

600 
	#bô_image_√wlöe
 
CUR
 
Såögs
[371]

	)

601 
	#bô_image_ˇºüge_ªtu∫
 
CUR
 
Såögs
[372]

	)

602 
	#cﬁ‹_«mes
 
CUR
 
Såögs
[373]

	)

603 
	#deföe_bô_image_ªgi⁄
 
CUR
 
Såögs
[374]

	)

604 
	#íd_bô_image_ªgi⁄
 
CUR
 
Såögs
[375]

	)

605 
	#£t_cﬁ‹_b™d
 
CUR
 
Såögs
[376]

	)

606 
	#£t_∑ge_Àngth
 
CUR
 
Såögs
[377]

	)

607 
	#di•œy_pc_ch¨
 
CUR
 
Såögs
[378]

	)

608 
	#íãr_pc_ch¨£t_mode
 
CUR
 
Såögs
[379]

	)

609 
	#exô_pc_ch¨£t_mode
 
CUR
 
Såögs
[380]

	)

610 
	#íãr_sˇncode_mode
 
CUR
 
Såögs
[381]

	)

611 
	#exô_sˇncode_mode
 
CUR
 
Såögs
[382]

	)

612 
	#pc_ãrm_›ti⁄s
 
CUR
 
Såögs
[383]

	)

613 
	#sˇncode_esˇ≥
 
CUR
 
Såögs
[384]

	)

614 
	#Æt_sˇncode_esc
 
CUR
 
Såögs
[385]

	)

615 
	#íãr_h‹iz⁄èl_hl_mode
 
CUR
 
Såögs
[386]

	)

616 
	#íãr_À·_hl_mode
 
CUR
 
Såögs
[387]

	)

617 
	#íãr_low_hl_mode
 
CUR
 
Såögs
[388]

	)

618 
	#íãr_right_hl_mode
 
CUR
 
Såögs
[389]

	)

619 
	#íãr_t›_hl_mode
 
CUR
 
Såögs
[390]

	)

620 
	#íãr_vîtiˇl_hl_mode
 
CUR
 
Såögs
[391]

	)

621 
	#£t_a_©åibuãs
 
CUR
 
Såögs
[392]

	)

622 
	#£t_pgÀn_öch
 
CUR
 
Såögs
[393]

	)

624 
	#BOOLWRITE
 37

	)

625 
	#NUMWRITE
 33

	)

626 
	#STRWRITE
 394

	)

629 
	#bìhive_glôch
 
no_esc_˘lc


	)

630 
	#ãÀøy_glôch
 
de°_èbs_magic_smso


	)

633 #i‚de‡
mi¸o_ch¨_size


634 
	#mi¸o_ch¨_size
 
mi¸o_cﬁ_size


	)

637 #ifde‡
__INTERNAL_CAPS_VISIBLE


638 
	#ãrmˇp_öô2
 
CUR
 
Såögs
[394]

	)

639 
	#ãrmˇp_ª£t
 
CUR
 
Såögs
[395]

	)

640 
	#magic_cookõ_glôch_ul
 
CUR
 
Numbîs
[33]

	)

641 
	#back•a˚s_wôh_bs
 
CUR
 
Boﬁóns
[37]

	)

642 
	#¸t_no_s¸ﬁlög
 
CUR
 
Boﬁóns
[38]

	)

643 
	#no_c‹ª˘ly_w‹kög_¸
 
CUR
 
Boﬁóns
[39]

	)

644 
	#ˇºüge_ªtu∫_dñay
 
CUR
 
Numbîs
[34]

	)

645 
	#√w_löe_dñay
 
CUR
 
Numbîs
[35]

	)

646 
	#löe„ed_if_nŸ_lf
 
CUR
 
Såögs
[396]

	)

647 
	#back•a˚_if_nŸ_bs
 
CUR
 
Såögs
[397]

	)

648 
	#gnu_has_mëa_key
 
CUR
 
Boﬁóns
[40]

	)

649 
	#löe„ed_is_√wlöe
 
CUR
 
Boﬁóns
[41]

	)

650 
	#back•a˚_dñay
 
CUR
 
Numbîs
[36]

	)

651 
	#h‹iz⁄èl_èb_dñay
 
CUR
 
Numbîs
[37]

	)

652 
	#numbî_of_fun˘i⁄_keys
 
CUR
 
Numbîs
[38]

	)

653 
	#Ÿhî_n⁄_fun˘i⁄_keys
 
CUR
 
Såögs
[398]

	)

654 
	#¨row_key_m≠
 
CUR
 
Såögs
[399]

	)

655 
	#has_h¨dw¨e_èbs
 
CUR
 
Boﬁóns
[42]

	)

656 
	#ªtu∫_d€s_˛r_eﬁ
 
CUR
 
Boﬁóns
[43]

	)

657 
	#acs_ulc‹√r
 
CUR
 
Såögs
[400]

	)

658 
	#acs_Œc‹√r
 
CUR
 
Såögs
[401]

	)

659 
	#acs_urc‹√r
 
CUR
 
Såögs
[402]

	)

660 
	#acs_Ãc‹√r
 
CUR
 
Såögs
[403]

	)

661 
	#acs_…ì
 
CUR
 
Såögs
[404]

	)

662 
	#acs_πì
 
CUR
 
Såögs
[405]

	)

663 
	#acs_bãe
 
CUR
 
Såögs
[406]

	)

664 
	#acs_âì
 
CUR
 
Såögs
[407]

	)

665 
	#acs_hlöe
 
CUR
 
Såögs
[408]

	)

666 
	#acs_vlöe
 
CUR
 
Såögs
[409]

	)

667 
	#acs_∂us
 
CUR
 
Såögs
[410]

	)

668 
	#mem‹y_lock
 
CUR
 
Såögs
[411]

	)

669 
	#mem‹y_u∆ock
 
CUR
 
Såögs
[412]

	)

670 
	#box_ch¨s_1
 
CUR
 
Såögs
[413]

	)

677 
	#BOOLCOUNT
 44

	)

678 
	#NUMCOUNT
 39

	)

679 
	#STRCOUNT
 414

	)

682 
	#acs_ch¨s_ödex
 146

	)

684 
	sãrmty≥
 {

685 *
ãrm_«mes
;

686 *
°r_èbÀ
;

687 
NCURSES_SBOOL
 *
Boﬁóns
;

688 *
Numbîs
;

689 **
Såögs
;

691 #i‡
NCURSES_XNAMES


692 *
ext_°r_èbÀ
;

693 **
ext_Names
;

695 
num_Boﬁóns
;

696 
num_Numbîs
;

697 
num_Såögs
;

699 
ext_Boﬁóns
;

700 
ext_Numbîs
;

701 
ext_Såögs
;

704 } 
	tTERMTYPE
;

714 #ifde‡
NCURSES_INTERNALS


716 #unde‡
TERMINAL


717 
	#TERMINAL
 
ãrm


	)

718 
TERMINAL
;

720 
	sãrmty≥2
 {

721 *
ãrm_«mes
;

722 *
°r_èbÀ
;

723 
NCURSES_SBOOL
 *
Boﬁóns
;

724 *
Numbîs
;

725 **
Såögs
;

727 #i‡
NCURSES_XNAMES


728 *
ext_°r_èbÀ
;

729 **
ext_Names
;

731 
num_Boﬁóns
;

732 
num_Numbîs
;

733 
num_Såögs
;

735 
ext_Boﬁóns
;

736 
ext_Numbîs
;

737 
ext_Såögs
;

740 } 
	tTERMTYPE2
;

743 
	sãrm
 {

744 
TERMTYPE
 
ty≥
;

745 } 
	tTERMINAL
;

751 
	`NCURSES_EXPORT_VAR
(
TERMINAL
 *Ë
cur_ãrm
;

753 
	`NCURSES_WRAPPED_VAR
(
TERMINAL
 *, 
cur_ãrm
);

754 
	#cur_ãrm
 
	`NCURSES_PUBLIC_VAR
(
	`cur_ãrm
())

	)

756 
	`NCURSES_EXPORT_VAR
(
TERMINAL
 *Ë
cur_ãrm
;

760 
	`NCURSES_WRAPPED_VAR
(
NCURSES_CONST
 * c⁄° *, 
boﬁ«mes
);

761 
	`NCURSES_WRAPPED_VAR
(
NCURSES_CONST
 * c⁄° *, 
boﬁcodes
);

762 
	`NCURSES_WRAPPED_VAR
(
NCURSES_CONST
 * c⁄° *, 
boﬁ‚ames
);

763 
	`NCURSES_WRAPPED_VAR
(
NCURSES_CONST
 * c⁄° *, 
num«mes
);

764 
	`NCURSES_WRAPPED_VAR
(
NCURSES_CONST
 * c⁄° *, 
numcodes
);

765 
	`NCURSES_WRAPPED_VAR
(
NCURSES_CONST
 * c⁄° *, 
num‚ames
);

766 
	`NCURSES_WRAPPED_VAR
(
NCURSES_CONST
 * c⁄° *, 
°∫ames
);

767 
	`NCURSES_WRAPPED_VAR
(
NCURSES_CONST
 * c⁄° *, 
°rcodes
);

768 
	`NCURSES_WRAPPED_VAR
(
NCURSES_CONST
 * c⁄° *, 
°r‚ames
);

770 
	#boﬁ«mes
 
	`NCURSES_PUBLIC_VAR
(
	`boﬁ«mes
())

	)

771 
	#boﬁcodes
 
	`NCURSES_PUBLIC_VAR
(
	`boﬁcodes
())

	)

772 
	#boﬁ‚ames
 
	`NCURSES_PUBLIC_VAR
(
	`boﬁ‚ames
())

	)

773 
	#num«mes
 
	`NCURSES_PUBLIC_VAR
(
	`num«mes
())

	)

774 
	#numcodes
 
	`NCURSES_PUBLIC_VAR
(
	`numcodes
())

	)

775 
	#num‚ames
 
	`NCURSES_PUBLIC_VAR
(
	`num‚ames
())

	)

776 
	#°∫ames
 
	`NCURSES_PUBLIC_VAR
(
	`°∫ames
())

	)

777 
	#°rcodes
 
	`NCURSES_PUBLIC_VAR
(
	`°rcodes
())

	)

778 
	#°r‚ames
 
	`NCURSES_PUBLIC_VAR
(
	`°r‚ames
())

	)

782 
	`NCURSES_EXPORT_VAR
(
NCURSES_CONST
 * c⁄° ) 
boﬁ«mes
[];

783 
	`NCURSES_EXPORT_VAR
(
NCURSES_CONST
 * c⁄° ) 
boﬁcodes
[];

784 
	`NCURSES_EXPORT_VAR
(
NCURSES_CONST
 * c⁄° ) 
boﬁ‚ames
[];

785 
	`NCURSES_EXPORT_VAR
(
NCURSES_CONST
 * c⁄° ) 
num«mes
[];

786 
	`NCURSES_EXPORT_VAR
(
NCURSES_CONST
 * c⁄° ) 
numcodes
[];

787 
	`NCURSES_EXPORT_VAR
(
NCURSES_CONST
 * c⁄° ) 
num‚ames
[];

788 
	`NCURSES_EXPORT_VAR
(
NCURSES_CONST
 * c⁄° ) 
°∫ames
[];

789 
	`NCURSES_EXPORT_VAR
(
NCURSES_CONST
 * c⁄° ) 
°rcodes
[];

790 
	`NCURSES_EXPORT_VAR
(
NCURSES_CONST
 * c⁄° ) 
°r‚ames
[];

797 #ifde‡
NCURSES_INTERNALS


799 
	`NCURSES_EXPORT
(Ë
	`_nc_£t_ây_mode
 (
TTY
 *
buf
);

800 
	`NCURSES_EXPORT
(Ë
	`_nc_ªad_íåy2
 (c⁄° * c⁄°, * c⁄°, 
TERMTYPE2
 *const);

801 
	`NCURSES_EXPORT
(Ë
	`_nc_ªad_fûe_íåy
 (c⁄° *c⁄°, 
TERMTYPE2
 *);

802 
	`NCURSES_EXPORT
(Ë
	`_nc_ªad_ãrmty≥
 (
TERMTYPE2
 *, *, );

803 
	`NCURSES_EXPORT
(*Ë
	`_nc_fú°_«me
 (const *const);

804 
	`NCURSES_EXPORT
(Ë
	`_nc_«me_m©ch
 (const *const, const *const, const *const);

805 
	`NCURSES_EXPORT
(*Ë
	`_nc_tù¨m
(, const *, ...);

813 
	`NCURSES_EXPORT
(c⁄° 
TERMTYPE
 *Ë
	`_nc_ÁŒback
 (const *);

814 
	`NCURSES_EXPORT
(Ë
	`_nc_ªad_íåy
 (c⁄° * c⁄°, * c⁄°, 
TERMTYPE
 *const);

819 
	`NCURSES_EXPORT
(
TERMINAL
 *Ë
	`£t_cuπîm
 (TERMINAL *);

820 
	`NCURSES_EXPORT
(Ë
	`dñ_cuπîm
 (
TERMINAL
 *);

823 
	`NCURSES_EXPORT
(Ë
	`ª°¨âîm
 (
NCURSES_CONST
 *, , *);

824 
	`NCURSES_EXPORT
(Ë
	`£tu±îm
 (const *,,*);

827 #i‡!
	`deföed
(
__NCURSES_H
)

828 
	`NCURSES_EXPORT
(*Ë
	`tigë°r
 (const *);

829 
	`NCURSES_EXPORT_VAR
(Ë
âyty≥
[];

830 
	`NCURSES_EXPORT
(Ë
	`puç
 (const *);

831 
	`NCURSES_EXPORT
(Ë
	`tigëÊag
 (const *);

832 
	`NCURSES_EXPORT
(Ë
	`tigënum
 (const *);

835 
	`NCURSES_EXPORT
(*Ë
	`ç¨m
 (const *, ...);

837 
	`NCURSES_EXPORT
(*Ë
	`ç¨m
 (const *, ,,,,,,,,);

840 
	`NCURSES_EXPORT
(*Ë
	`tù¨m
 (const *, ...);

845 #i‡!
	`deföed
(
NCURSES_TERMCAP_H_ö˛
)

846 
	`NCURSES_EXPORT
(*Ë
	`tgë°r
 (const *, **);

847 
	`NCURSES_EXPORT
(*Ë
	`tgŸo
 (const *, , );

848 
	`NCURSES_EXPORT
(Ë
	`tgëít
 (*, const *);

849 
	`NCURSES_EXPORT
(Ë
	`tgëÊag
 (const *);

850 
	`NCURSES_EXPORT
(Ë
	`tgënum
 (const *);

851 
	`NCURSES_EXPORT
(Ë
	`çuts
 (const *, , (*)());

857 #i‡
	`deföed
(
NCURSES_SP_FUNCS
) && (NCURSES_SP_FUNCS != 0)

859 
	`NCURSES_EXPORT
(*Ë
	`NCURSES_SP_NAME
(
tigë°r
Ë(
SCREEN
*, const *);

860 
	`NCURSES_EXPORT
(Ë
	`NCURSES_SP_NAME
(
puç
Ë(
SCREEN
*, const *);

861 
	`NCURSES_EXPORT
(Ë
	`NCURSES_SP_NAME
(
tigëÊag
Ë(
SCREEN
*, const *);

862 
	`NCURSES_EXPORT
(Ë
	`NCURSES_SP_NAME
(
tigënum
Ë(
SCREEN
*, const *);

865 
	`NCURSES_EXPORT
(*Ë
	`NCURSES_SP_NAME
(
ç¨m
Ë(
SCREEN
*, const *, ...);

867 
	`NCURSES_EXPORT
(*Ë
	`NCURSES_SP_NAME
(
ç¨m
Ë(
SCREEN
*, const *, ,,,,,,,,);

871 
	`NCURSES_EXPORT
(*Ë
	`NCURSES_SP_NAME
(
tgë°r
Ë(
SCREEN
*, const *, **);

872 
	`NCURSES_EXPORT
(*Ë
	`NCURSES_SP_NAME
(
tgŸo
Ë(
SCREEN
*, const *, , );

873 
	`NCURSES_EXPORT
(Ë
	`NCURSES_SP_NAME
(
tgëít
Ë(
SCREEN
*, *, const *);

874 
	`NCURSES_EXPORT
(Ë
	`NCURSES_SP_NAME
(
tgëÊag
Ë(
SCREEN
*, const *);

875 
	`NCURSES_EXPORT
(Ë
	`NCURSES_SP_NAME
(
tgënum
Ë(
SCREEN
*, const *);

876 
	`NCURSES_EXPORT
(Ë
	`NCURSES_SP_NAME
(
çuts
Ë(
SCREEN
*, c⁄° *, , 
NCURSES_SP_OUTC
);

878 
	`NCURSES_EXPORT
(
TERMINAL
 *Ë
	`NCURSES_SP_NAME
(
£t_cuπîm
Ë(
SCREEN
*, TERMINAL *);

879 
	`NCURSES_EXPORT
(Ë
	`NCURSES_SP_NAME
(
dñ_cuπîm
Ë(
SCREEN
*, 
TERMINAL
 *);

881 
	`NCURSES_EXPORT
(Ë
	`NCURSES_SP_NAME
(
ª°¨âîm
Ë(
SCREEN
*, 
NCURSES_CONST
 *, , *);

887 
GCC_NORETURN
 
	`NCURSES_EXPORT
(Ë
	`exô_ãrmöfo
();

889 #ifde‡
__˝lu•lus


890 
	}
}

	@/usr/include/term_entry.h

42 #i‚de‡
NCURSES_TERM_ENTRY_H_ö˛


43 
	#NCURSES_TERM_ENTRY_H_ö˛
 1

	)

46 #ifde‡
__˝lu•lus


50 
	~<cur£s.h
>

51 
	~<ãrm.h
>

56 #i‡
NCURSES_XNAMES


57 
	#NUM_BOOLEANS
(
ç
Ë—p)->
num_Boﬁóns


	)

58 
	#NUM_NUMBERS
(
ç
Ë—p)->
num_Numbîs


	)

59 
	#NUM_STRINGS
(
ç
Ë—p)->
num_Såögs


	)

60 
	#EXT_NAMES
(
ç
,
i
,
limô
,
ödex
,
èbÀ
Ë(ò>limôË?Åp->
ext_Names
[ödex] :ÅabÀ[i]

	)

62 
	#NUM_BOOLEANS
(
ç
Ë
BOOLCOUNT


	)

63 
	#NUM_NUMBERS
(
ç
Ë
NUMCOUNT


	)

64 
	#NUM_STRINGS
(
ç
Ë
STRCOUNT


	)

65 
	#EXT_NAMES
(
ç
,
i
,
limô
,
ödex
,
èbÀ
ËèbÀ[i]

	)

68 
	#NUM_EXT_NAMES
(
ç
Ë(Ë(—p)->
ext_Boﬁóns
 + (ç)->
ext_Numbîs
 + (ç)->
ext_Såögs
)

	)

70 
	#f‹_óch_boﬁón
(
n
,
ç
Ë¿0;Ç < 
	`NUM_BOOLEANS
—p);Ç++)

	)

71 
	#f‹_óch_numbî
(
n
,
ç
Ë¿0;Ç < 
	`NUM_NUMBERS
—p);Ç++)

	)

72 
	#f‹_óch_°rög
(
n
,
ç
Ë¿0;Ç < 
	`NUM_STRINGS
—p);Ç++)

	)

74 #i‡
NCURSES_XNAMES


75 
	#f‹_óch_ext_boﬁón
(
n
,
ç
Ë¿
BOOLCOUNT
; (Ë¿< (Ë
	`NUM_BOOLEANS
—p);Ç++)

	)

76 
	#f‹_óch_ext_numbî
(
n
,
ç
Ë¿
NUMCOUNT
; (Ë¿< (Ë
	`NUM_NUMBERS
—p);Ç++)

	)

77 
	#f‹_óch_ext_°rög
(
n
,
ç
Ë¿
STRCOUNT
; (Ë¿< (Ë
	`NUM_STRINGS
—p);Ç++)

	)

80 
	#ExtBoﬁ«me
(
ç
,
i
,
«mes
Ë
	`EXT_NAMES
—p, i, 
BOOLCOUNT
, (ò- (ç->
num_Boﬁóns
 -Åp->
ext_Boﬁóns
)),Çames)

	)

81 
	#ExtNum«me
(
ç
,
i
,
«mes
Ë
	`EXT_NAMES
—p, i, 
NUMCOUNT
, (ò- (ç->
num_Numbîs
 -Åp->
ext_Numbîs
)Ë+Åp->
ext_Boﬁóns
,Çames)

	)

82 
	#ExtSå«me
(
ç
,
i
,
«mes
Ë
	`EXT_NAMES
—p, i, 
STRCOUNT
, (ò- (ç->
num_Såögs
 -Åp->
ext_Såögs
)Ë+ (ç->
ext_Numbîs
 +Åp->
ext_Boﬁóns
),Çames)

	)

88 #ifde‡
NCURSES_INTERNALS


95 
dbdTIC
 = 0,

96 #i‡
NCURSES_USE_DATABASE


97 
dbdEnvOn˚
,

98 
dbdHome
,

99 
dbdEnvLi°
,

100 
dbdCfgLi°
,

101 
dbdCfgOn˚
,

103 #i‡
NCURSES_USE_TERMCAP


104 
dbdEnvOn˚2
,

105 
dbdEnvLi°2
,

106 
dbdCfgLi°2
,

108 
dbdLAST


109 } 
	tDBDIRS
;

111 
	#MAX_USES
 32

	)

112 
	#MAX_CROSSLINKS
 16

	)

114 
íåy
 
	tENTRY
;

117 *
«me
;

118 
ENTRY
 *
lök
;

119 
löe
;

120 } 
	tENTRY_USES
;

122 
	síåy
 {

123 
TERMTYPE2
 
âîm
;

124 
nu£s
;

125 
ENTRY_USES
 
u£s
[
MAX_USES
];

126 
n¸os¶öks
;

127 
ENTRY
 *
¸os¶öks
[
MAX_CROSSLINKS
];

128 
c°¨t
;

129 
˚nd
;

130 
°¨éöe
;

131 
ENTRY
 *
√xt
;

132 
ENTRY
 *
œ°
;

135 
NCURSES_EXPORT_VAR
(
ENTRY
 *Ë
_nc_hód
;

136 
NCURSES_EXPORT_VAR
(
ENTRY
 *Ë
_nc_èû
;

137 
	#f‹_íåy_li°
(
qp
Ëq∞
_nc_hód
; qp; q∞qp->
√xt
)

	)

139 
	#MAX_LINE
 132

	)

141 
	#NULLHOOK
 (
	`boﬁ
(*)(
ENTRY
 *))0

	)

147 
	#WANTED
(
s
Ë((sË=
ABSENT_STRING
)

	)

148 
	#PRESENT
(
s
Ë(((sË!
ABSENT_STRING
Ë&& ((sË!
CANCELLED_STRING
))

	)

150 
	#ANDMISSING
(
p
,
q
) \

152 i‡(
	`PRESENT
(
p
Ë&& !PRESENT(
q
)) \

153 
	`_nc_w¨nög
(#p " butÇo " #q); \

154 }

	)

156 
	#PAIRED
(
p
,
q
) \

158 i‡(
	`PRESENT
(
q
Ë&& !PRESENT(
p
)) \

159 
	`_nc_w¨nög
(#q " butÇo " #p); \

160 i‡(
	`PRESENT
(
p
Ë&& !PRESENT(
q
)) \

161 
	`_nc_w¨nög
(#p " butÇo " #q); \

162 }

	)

169 
NCURSES_EXPORT
(
ENTRY
 *Ë
_nc_c›y_íåy
 (ENTRY *
ﬁdp
);

170 
NCURSES_EXPORT
(*Ë
_nc_ßve_°r
 (const *const);

171 
NCURSES_EXPORT
(Ë
_nc_öô_íåy
 (
ENTRY
 *const);

172 
NCURSES_EXPORT
(Ë
_nc_mîge_íåy
 (
ENTRY
 *const, ENTRY *const);

173 
NCURSES_EXPORT
(Ë
_nc_wøp_íåy
 (
ENTRY
 *c⁄°, 
boﬁ
);

176 
NCURSES_EXPORT
(Ë
_nc_Æign_ãrmty≥
 (
TERMTYPE2
 *, TERMTYPE2 *);

179 
NCURSES_EXPORT
(Ë
_nc_‰ì_ãrmty≥2
 (
TERMTYPE2
 *);

182 
NCURSES_EXPORT
(*Ë
_nc_åim_sgr0
 (
TERMTYPE2
 *);

185 #i‡
NCURSES_XNAMES


186 
NCURSES_EXPORT_VAR
(
boﬁ
Ë
_nc_u£r_deföabÀ
;

187 
NCURSES_EXPORT_VAR
(
boﬁ
Ë
_nc_dißbÀ_≥riod
;

189 
NCURSES_EXPORT
(Ë
_nc_∑r£_íåy
 (
ENTRY
 *, , 
boﬁ
);

190 
NCURSES_EXPORT
(Ë
_nc_ˇpcmp
 (const *, const *);

193 
NCURSES_EXPORT
(Ë
_nc_£t_wrôedú
 (const *);

194 
NCURSES_EXPORT
(Ë
_nc_wrôe_íåy
 (
TERMTYPE2
 *const);

195 
NCURSES_EXPORT
(Ë
_nc_wrôe_obje˘
 (
TERMTYPE2
 *, *, *, );

198 
NCURSES_EXPORT
(Ë
_nc_ªad_íåy_sour˚
 (
FILE
*, *, , 
boﬁ
, boﬁ (*)(
ENTRY
*));

199 
NCURSES_EXPORT
(
boﬁ
Ë
_nc_íåy_m©ch
 (*, *);

200 
NCURSES_EXPORT
(Ë
_nc_ªsﬁve_u£s
 (
boﬁ
);

201 
NCURSES_EXPORT
(Ë
_nc_ªsﬁve_u£s2
 (
boﬁ
, bool);

202 
NCURSES_EXPORT
(Ë
_nc_‰ì_íåõs
 (
ENTRY
 *);

203 
NCURSES_IMPEXP
 (
NCURSES_API
 *
_nc_check_ãrmty≥
)(
TERMTYPE
 *);

204 
NCURSES_IMPEXP
 (
NCURSES_API
 *
_nc_check_ãrmty≥2
)(
TERMTYPE2
 *, 
boﬁ
);

207 
NCURSES_EXPORT
(Ë
_nc_åa˚_x«mes
 (
TERMTYPE
 *);

215 #unde‡
NCURSES_TACK_1_08


216 #ifde‡ 
NCURSES_INTERNALS


217 
	#NCURSES_TACK_1_08


	)

219 
	#NCURSES_TACK_1_08
 
	`GCC_DEPRECATED
("upgødêtÿèck 1.08")

	)

223 
NCURSES_EXPORT
(Ë
_nc_c›y_ãrmty≥
 (
TERMTYPE
 *, c⁄° TERMTYPE *Ë
NCURSES_TACK_1_08
;

226 
NCURSES_EXPORT
(Ë
_nc_öô_acs
 (Ë
NCURSES_TACK_1_08
;

229 
NCURSES_EXPORT
(Ë
_nc_‰ì_ãrmty≥
 (
TERMTYPE
 *Ë
NCURSES_TACK_1_08
;

231 #ifde‡
__˝lu•lus


	@/usr/include/termcap.h

37 #i‚de‡
NCURSES_TERMCAP_H_ö˛


38 
	#NCURSES_TERMCAP_H_ö˛
 1

	)

40 #unde‡
NCURSES_VERSION


41 
	#NCURSES_VERSION
 "6.3"

	)

43 
	~<ncur£s_dŒ.h
>

45 #ifde‡
__˝lu•lus


50 
	~<sys/ty≥s.h
>

52 #unde‡
NCURSES_OSPEED


53 
	#NCURSES_OSPEED
 

	)

55 
NCURSES_EXPORT_VAR
(Ë
PC
;

56 
NCURSES_EXPORT_VAR
(*Ë
UP
;

57 
NCURSES_EXPORT_VAR
(*Ë
BC
;

58 
NCURSES_EXPORT_VAR
(
NCURSES_OSPEED
Ë
o•ìd
;

60 #i‡!
deföed
(
NCURSES_TERM_H_ö˛
)

61 
NCURSES_EXPORT
(*Ë
tgë°r
 (const *, **);

62 
NCURSES_EXPORT
(*Ë
tgŸo
 (const *, , );

63 
NCURSES_EXPORT
(Ë
tgëít
 (*, const *);

64 
NCURSES_EXPORT
(Ë
tgëÊag
 (const *);

65 
NCURSES_EXPORT
(Ë
tgënum
 (const *);

66 
NCURSES_EXPORT
(Ë
çuts
 (const *, , (*)());

69 #ifde‡
__˝lu•lus


	@/usr/include/termio.h

5 
	~<ãrmios.h
>

6 
	~<sys/io˘l.h
>

	@/usr/include/termios.h

22 #i‚def 
_TERMIOS_H


23 
	#_TERMIOS_H
 1

	)

25 
	~<„©uªs.h
>

26 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


28 
	~<bôs/ty≥s.h
>

29 #i‚de‡
__pid_t_deföed


30 
__pid_t
 
	tpid_t
;

31 
	#__pid_t_deföed


	)

35 
	g__BEGIN_DECLS


39 
	~<bôs/ãrmios.h
>

41 #ifde‡
__USE_MISC


44 
	#CCEQ
(
vÆ
, 
c
Ë((cË=(vÆË&& (vÆË!
_POSIX_VDISABLE
)

	)

48 
•ìd_t
 
	$cfgëo•ìd
 (c⁄° 
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

51 
•ìd_t
 
	$cfgëi•ìd
 (c⁄° 
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

54 
	$cf£to•ìd
 (
ãrmios
 *
__ãrmios_p
, 
•ìd_t
 
__•ìd
Ë
__THROW
;

57 
	$cf£ti•ìd
 (
ãrmios
 *
__ãrmios_p
, 
•ìd_t
 
__•ìd
Ë
__THROW
;

59 #ifdef 
__USE_MISC


61 
	$cf£t•ìd
 (
ãrmios
 *
__ãrmios_p
, 
•ìd_t
 
__•ìd
Ë
__THROW
;

66 
	$tcgë©å
 (
__fd
, 
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

70 
	$tc£èâr
 (
__fd
, 
__›ti⁄Æ_a˘i⁄s
,

71 c⁄° 
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

74 #ifdef 
__USE_MISC


76 
	$cfmakîaw
 (
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

80 
	$tc£ndbªak
 (
__fd
, 
__duøti⁄
Ë
__THROW
;

86 
	`tcdøö
 (
__fd
);

90 
	$tcÊush
 (
__fd
, 
__queue_£À˘‹
Ë
__THROW
;

94 
	$tcÊow
 (
__fd
, 
__a˘i⁄
Ë
__THROW
;

97 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


99 
__pid_t
 
	$tcgësid
 (
__fd
Ë
__THROW
;

103 #ifde‡
__USE_MISC


104 
	~<sys/âydeÁu…s.h
>

107 
__END_DECLS


	@/usr/include/tgmath.h

22 #i‚de‡
_TGMATH_H


23 
	#_TGMATH_H
 1

	)

25 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

26 
	~<bôs/libc-hódî-°¨t.h
>

29 
	~<bôs/Êﬂä.h
>

30 
	~<m©h.h
>

31 
	~<com∂ex.h
>

42 
	#__HAVE_BUILTIN_TGMATH
 
	`__GNUC_PREREQ
 (8, 0)

	)

44 #i‡
__GNUC_PREREQ
 (2, 7)

49 #i‡
__HAVE_FLOAT128X


52 #i‡((
__HAVE_FLOAT64X
 && !
__HAVE_FLOAT128
) \

53 || (
	g__HAVE_FLOAT128
 && !
	g__HAVE_FLOAT64X
))

56 
	#__TGMATH_1_NARROW_D
(
F
, 
X
) \

57 (
F
 ## 
	`l
 (
X
))

	)

58 
	#__TGMATH_2_NARROW_D
(
F
, 
X
, 
Y
) \

59 (
F
 ## 
	`l
 (
X
, 
Y
))

	)

60 
	#__TGMATH_3_NARROW_D
(
F
, 
X
, 
Y
, 
Z
) \

61 (
F
 ## 
	`l
 (
X
, 
Y
, 
Z
))

	)

62 
	#__TGMATH_1_NARROW_F64X
(
F
, 
X
) \

63 (
F
 ## 
	`f128
 (
X
))

	)

64 
	#__TGMATH_2_NARROW_F64X
(
F
, 
X
, 
Y
) \

65 (
F
 ## 
	`f128
 (
X
, 
Y
))

	)

66 
	#__TGMATH_3_NARROW_F64X
(
F
, 
X
, 
Y
, 
Z
) \

67 (
F
 ## 
	`f128
 (
X
, 
Y
, 
Z
))

	)

68 #i‡!
__HAVE_FLOAT128


69 
	#__TGMATH_1_NARROW_F32X
(
F
, 
X
) \

70 (
F
 ## 
	`f64
 (
X
))

	)

71 
	#__TGMATH_2_NARROW_F32X
(
F
, 
X
, 
Y
) \

72 (
F
 ## 
	`f64
 (
X
, 
Y
))

	)

73 
	#__TGMATH_3_NARROW_F32X
(
F
, 
X
, 
Y
, 
Z
) \

74 (
F
 ## 
	`f64
 (
X
, 
Y
, 
Z
))

	)

77 #i‡
__HAVE_BUILTIN_TGMATH


79 #i‡
__HAVE_FLOAT16
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

80 
	#__TG_F16_ARG
(
X
ËX ## 
f16
,

	)

82 
	#__TG_F16_ARG
(
X
)

	)

84 #i‡
__HAVE_FLOAT32
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

85 
	#__TG_F32_ARG
(
X
ËX ## 
f32
,

	)

87 
	#__TG_F32_ARG
(
X
)

	)

89 #i‡
__HAVE_FLOAT64
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

90 
	#__TG_F64_ARG
(
X
ËX ## 
f64
,

	)

92 
	#__TG_F64_ARG
(
X
)

	)

94 #i‡
__HAVE_FLOAT128
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

95 
	#__TG_F128_ARG
(
X
ËX ## 
f128
,

	)

97 
	#__TG_F128_ARG
(
X
)

	)

99 #i‡
__HAVE_FLOAT32X
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

100 
	#__TG_F32X_ARG
(
X
ËX ## 
f32x
,

	)

102 
	#__TG_F32X_ARG
(
X
)

	)

104 #i‡
__HAVE_FLOAT64X
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

105 
	#__TG_F64X_ARG
(
X
ËX ## 
f64x
,

	)

107 
	#__TG_F64X_ARG
(
X
)

	)

109 #i‡
__HAVE_FLOAT128X
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

110 
	#__TG_F128X_ARG
(
X
ËX ## 
f128x
,

	)

112 
	#__TG_F128X_ARG
(
X
)

	)

115 
	#__TGMATH_FUNCS
(
X
ËX ## 
f
, X, X ## 
l
, \

116 
	`__TG_F16_ARG
 (
X
Ë
	`__TG_F32_ARG
 (XË
	`__TG_F64_ARG
 (XË
	`__TG_F128_ARG
 (X) \

117 
	`__TG_F32X_ARG
 (
X
Ë
	`__TG_F64X_ARG
 (XË
	`__TG_F128X_ARG
 (X)

	)

118 
	#__TGMATH_RCFUNCS
(
F
, 
C
Ë
	`__TGMATH_FUNCS
 (FË__TGMATH_FUNCS (C)

	)

119 
	#__TGMATH_1
(
F
, 
X
Ë
	`__buûtö_tgm©h
 (
	`__TGMATH_FUNCS
 (FË(X))

	)

120 
	#__TGMATH_2
(
F
, 
X
, 
Y
Ë
	`__buûtö_tgm©h
 (
	`__TGMATH_FUNCS
 (FË(X), (Y))

	)

121 
	#__TGMATH_2STD
(
F
, 
X
, 
Y
Ë
	`__buûtö_tgm©h
 (F ## 
f
, F, F ## 
l
, (X), (Y))

	)

122 
	#__TGMATH_3
(
F
, 
X
, 
Y
, 
Z
Ë
	`__buûtö_tgm©h
 (
	`__TGMATH_FUNCS
 (F) \

123 (
X
), (
Y
), (
Z
))

	)

124 
	#__TGMATH_1C
(
F
, 
C
, 
X
Ë
	`__buûtö_tgm©h
 (
	`__TGMATH_RCFUNCS
 (F, CË(X))

	)

125 
	#__TGMATH_2C
(
F
, 
C
, 
X
, 
Y
Ë
	`__buûtö_tgm©h
 (
	`__TGMATH_RCFUNCS
 (F, C) \

126 (
X
), (
Y
))

	)

128 
	#__TGMATH_NARROW_FUNCS_F
(
X
ËX, X ## 
l
,

	)

129 
	#__TGMATH_NARROW_FUNCS_F16
(
X
) \

130 
	`__TG_F32_ARG
 (
X
Ë
	`__TG_F64_ARG
 (XË
	`__TG_F128_ARG
 (X) \

131 
	`__TG_F32X_ARG
 (
X
Ë
	`__TG_F64X_ARG
 (XË
	`__TG_F128X_ARG
 (X)

	)

132 
	#__TGMATH_NARROW_FUNCS_F32
(
X
) \

133 
	`__TG_F64_ARG
 (
X
Ë
	`__TG_F128_ARG
 (X) \

134 
	`__TG_F32X_ARG
 (
X
Ë
	`__TG_F64X_ARG
 (XË
	`__TG_F128X_ARG
 (X)

	)

135 
	#__TGMATH_NARROW_FUNCS_F64
(
X
) \

136 
	`__TG_F128_ARG
 (
X
) \

137 
	`__TG_F64X_ARG
 (
X
Ë
	`__TG_F128X_ARG
 (X)

	)

138 
	#__TGMATH_NARROW_FUNCS_F32X
(
X
) \

139 
	`__TG_F64X_ARG
 (
X
Ë
	`__TG_F128X_ARG
 (X) \

140 
	`__TG_F64_ARG
 (
X
Ë
	`__TG_F128_ARG
 (X)

	)

142 
	#__TGMATH_1_NARROW_F
(
F
, 
X
) \

143 
	`__buûtö_tgm©h
 (
	`__TGMATH_NARROW_FUNCS_F
 (
F
Ë(
X
))

	)

144 
	#__TGMATH_2_NARROW_F
(
F
, 
X
, 
Y
) \

145 
	`__buûtö_tgm©h
 (
	`__TGMATH_NARROW_FUNCS_F
 (
F
Ë(
X
), (
Y
))

	)

146 
	#__TGMATH_3_NARROW_F
(
F
, 
X
, 
Y
, 
Z
) \

147 
	`__buûtö_tgm©h
 (
	`__TGMATH_NARROW_FUNCS_F
 (
F
Ë(
X
), (
Y
), (
Z
))

	)

148 
	#__TGMATH_1_NARROW_F16
(
F
, 
X
) \

149 
	`__buûtö_tgm©h
 (
	`__TGMATH_NARROW_FUNCS_F16
 (
F
Ë(
X
))

	)

150 
	#__TGMATH_2_NARROW_F16
(
F
, 
X
, 
Y
) \

151 
	`__buûtö_tgm©h
 (
	`__TGMATH_NARROW_FUNCS_F16
 (
F
Ë(
X
), (
Y
))

	)

152 
	#__TGMATH_3_NARROW_F16
(
F
, 
X
, 
Y
, 
Z
) \

153 
	`__buûtö_tgm©h
 (
	`__TGMATH_NARROW_FUNCS_F16
 (
F
Ë(
X
), (
Y
), (
Z
))

	)

154 
	#__TGMATH_1_NARROW_F32
(
F
, 
X
) \

155 
	`__buûtö_tgm©h
 (
	`__TGMATH_NARROW_FUNCS_F32
 (
F
Ë(
X
))

	)

156 
	#__TGMATH_2_NARROW_F32
(
F
, 
X
, 
Y
) \

157 
	`__buûtö_tgm©h
 (
	`__TGMATH_NARROW_FUNCS_F32
 (
F
Ë(
X
), (
Y
))

	)

158 
	#__TGMATH_3_NARROW_F32
(
F
, 
X
, 
Y
, 
Z
) \

159 
	`__buûtö_tgm©h
 (
	`__TGMATH_NARROW_FUNCS_F32
 (
F
Ë(
X
), (
Y
), (
Z
))

	)

160 
	#__TGMATH_1_NARROW_F64
(
F
, 
X
) \

161 
	`__buûtö_tgm©h
 (
	`__TGMATH_NARROW_FUNCS_F64
 (
F
Ë(
X
))

	)

162 
	#__TGMATH_2_NARROW_F64
(
F
, 
X
, 
Y
) \

163 
	`__buûtö_tgm©h
 (
	`__TGMATH_NARROW_FUNCS_F64
 (
F
Ë(
X
), (
Y
))

	)

164 
	#__TGMATH_3_NARROW_F64
(
F
, 
X
, 
Y
, 
Z
) \

165 
	`__buûtö_tgm©h
 (
	`__TGMATH_NARROW_FUNCS_F64
 (
F
Ë(
X
), (
Y
), (
Z
))

	)

166 #i‡
__HAVE_FLOAT128


167 
	#__TGMATH_1_NARROW_F32X
(
F
, 
X
) \

168 
	`__buûtö_tgm©h
 (
	`__TGMATH_NARROW_FUNCS_F32X
 (
F
Ë(
X
))

	)

169 
	#__TGMATH_2_NARROW_F32X
(
F
, 
X
, 
Y
) \

170 
	`__buûtö_tgm©h
 (
	`__TGMATH_NARROW_FUNCS_F32X
 (
F
Ë(
X
), (
Y
))

	)

171 
	#__TGMATH_3_NARROW_F32X
(
F
, 
X
, 
Y
, 
Z
) \

172 
	`__buûtö_tgm©h
 (
	`__TGMATH_NARROW_FUNCS_F32X
 (
F
Ë(
X
), (
Y
), (
Z
))

	)

177 #ifde‡
__NO_LONG_DOUBLE_MATH


178 
	#__tgml
(
f˘
Ë
	)
fct

180 
	#__tgml
(
f˘
Ëf˘ ## 
l


	)

191 #i‡
__GNUC_PREREQ
 (3, 1)

197 
	#__Êﬂtög_ty≥
(
ty≥
) \

198 (
	`__buûtö_˛assify_ty≥
 (
	`__ªÆ__
 ((
ty≥
Ë0)Ë=8)

	)

199 
	#__ªÆ_öãgî_ty≥
(
ty≥
) \

200 (
	`__buûtö_˛assify_ty≥
 ((
ty≥
Ë0Ë=1)

	)

201 
	#__com∂ex_öãgî_ty≥
(
ty≥
) \

202 (
	`__buûtö_˛assify_ty≥
 ((
ty≥
) 0) == 9 \

203 && 
	`__buûtö_˛assify_ty≥
 (
	`__ªÆ__
 ((
ty≥
Ë0)Ë=1)

	)

207 
	#__Êﬂtög_ty≥
(
ty≥
Ë((—y≥Ë1.25Ë!1)

	)

208 
	#__ªÆ_öãgî_ty≥
(
ty≥
Ë((—y≥Ë(1.25 + 
_Com∂ex_I
)Ë=1)

	)

209 
	#__com∂ex_öãgî_ty≥
(
ty≥
) \

210 (((
ty≥
Ë(1.25 + 
_Com∂ex_I
)Ë=(1 + _Com∂ex_I))

	)

214 
	#__ex¥_is_ªÆ
(
E
Ë(
	`__buûtö_˛assify_ty≥
 (EË!9)

	)

220 
	#__tgm©h_ªÆ_ty≥_sub
(
T
, 
E
) \

221 
	`__ty≥of__
 (*(0 ? (__ty≥of__ (0 ? (*Ë0 : (*Ë(
E
))) 0 \

222 : (
	`__ty≥of__
 (0 ? (
T
 *Ë0 : (*Ë(!(
E
)))Ë0))

	)

225 
	#__tgm©h_ªÆ_ty≥
(
ex¥
) \

226 
	`__tgm©h_ªÆ_ty≥_sub
 (
	`__ty≥of__
 ((__ty≥of__ (+(
ex¥
))) 0), \

227 
	`__Êﬂtög_ty≥
 (
	`__ty≥of__
 (+(
ex¥
))))

	)

232 
	#__tgm©h_com∂ex_ty≥_sub
(
T
, 
E1
, 
E2
, 
E3
) \

233 
	`__ty≥of__
 (*(0 \

234 ? (
	`__ty≥of__
 (0 ? (
T
 *Ë0 : (*Ë(!(
E1
)))) 0 \

235 : (
	`__ty≥of__
 (0 \

236 ? (
	`__ty≥of__
 (0 \

238 : (*Ë(!(
E2
)))) 0 \

239 : (
	`__ty≥of__
 (0 \

240 ? (
_Com∂ex
 *) 0 \

241 : (*Ë(!(
E3
)))Ë0)Ë0))

	)

244 
	#__tgm©h_com∂ex_ty≥
(
ex¥
) \

245 
	`__tgm©h_com∂ex_ty≥_sub
 (
	`__ty≥of__
 ((__ty≥of__ (+(
ex¥
))) 0), \

246 
	`__Êﬂtög_ty≥
 (
	`__ty≥of__
 (+(
ex¥
))), \

247 
	`__ªÆ_öãgî_ty≥
 (
	`__ty≥of__
 (+(
ex¥
))), \

248 
	`__com∂ex_öãgî_ty≥
 (
	`__ty≥of__
 (+(
ex¥
))))

	)

250 #i‡(
__HAVE_DISTINCT_FLOAT16
 \

251 || 
	g__HAVE_DISTINCT_FLOAT32
 \

252 || 
	g__HAVE_DISTINCT_FLOAT64
 \

253 || 
	g__HAVE_DISTINCT_FLOAT32X
 \

254 || 
	g__HAVE_DISTINCT_FLOAT64X
 \

255 || 
	g__HAVE_DISTINCT_FLOAT128X
)

262 #i‡
__HAVE_DISTINCT_FLOAT128
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

263 #i‡(!
__HAVE_FLOAT64X
 \

264 || 
	g__HAVE_FLOAT64X_LONG_DOUBLE
 \

265 || !
	g__HAVE_FLOATN_NOT_TYPEDEF
)

266 
	#__TGMATH_F128
(
¨g_comb
, 
f˘
, 
¨g_ˇŒ
) \

267 
	`__buûtö_ty≥s_com∑tibÀ_p
 (
	`__ty≥of
 (+(
¨g_comb
)), 
_Flﬂt128
) \

268 ? 
f˘
 ## 
f128
 
¨g_ˇŒ
 :

	)

269 
	#__TGMATH_CF128
(
¨g_comb
, 
f˘
, 
cf˘
, 
¨g_ˇŒ
) \

270 
	`__buûtö_ty≥s_com∑tibÀ_p
 (
	`__ty≥of
 (+
	`__ªÆ__
 (
¨g_comb
)), 
_Flﬂt128
) \

271 ? (
	`__ex¥_is_ªÆ
 (
¨g_comb
) \

272 ? 
f˘
 ## 
f128
 
¨g_ˇŒ
 \

273 : 
cf˘
 ## 
f128
 
¨g_ˇŒ
Ë:

	)

277 
	#__TGMATH_F128
(
¨g_comb
, 
f˘
, 
¨g_ˇŒ
) \

278 (
	`__buûtö_ty≥s_com∑tibÀ_p
 (
	`__ty≥of
 (+(
¨g_comb
)), 
_Flﬂt128
) \

279 || 
	`__buûtö_ty≥s_com∑tibÀ_p
 (
	`__ty≥of
 (+(
¨g_comb
)), 
_Flﬂt64x
)) \

280 ? 
f˘
 ## 
f128
 
¨g_ˇŒ
 :

	)

281 
	#__TGMATH_CF128
(
¨g_comb
, 
f˘
, 
cf˘
, 
¨g_ˇŒ
) \

282 (
	`__buûtö_ty≥s_com∑tibÀ_p
 (
	`__ty≥of
 (+
	`__ªÆ__
 (
¨g_comb
)), 
_Flﬂt128
) \

283 || 
	`__buûtö_ty≥s_com∑tibÀ_p
 (
	`__ty≥of
 (+
	`__ªÆ__
 (
¨g_comb
)), \

284 
_Flﬂt64x
)) \

285 ? (
	`__ex¥_is_ªÆ
 (
¨g_comb
) \

286 ? 
f˘
 ## 
f128
 
¨g_ˇŒ
 \

287 : 
cf˘
 ## 
f128
 
¨g_ˇŒ
Ë:

	)

290 
	#__TGMATH_F128
(
¨g_comb
, 
f˘
, 
¨g_ˇŒ
Ë

	)

291 
	#__TGMATH_CF128
(
¨g_comb
, 
f˘
, 
cf˘
, 
¨g_ˇŒ
Ë

	)

299 #i‡
__HAVE_BUILTIN_TGMATH


301 
	#__TGMATH_UNARY_REAL_ONLY
(
VÆ
, 
F˘
Ë
	`__TGMATH_1
 (F˘, (VÆ))

	)

302 
	#__TGMATH_UNARY_REAL_RET_ONLY
(
VÆ
, 
F˘
Ë
	`__TGMATH_1
 (F˘, (VÆ))

	)

303 
	#__TGMATH_BINARY_FIRST_REAL_ONLY
(
VÆ1
, 
VÆ2
, 
F˘
) \

304 
	`__TGMATH_2
 (
F˘
, (
VÆ1
), (
VÆ2
))

	)

305 
	#__TGMATH_BINARY_FIRST_REAL_STD_ONLY
(
VÆ1
, 
VÆ2
, 
F˘
) \

306 
	`__TGMATH_2STD
 (
F˘
, (
VÆ1
), (
VÆ2
))

	)

307 
	#__TGMATH_BINARY_REAL_ONLY
(
VÆ1
, 
VÆ2
, 
F˘
) \

308 
	`__TGMATH_2
 (
F˘
, (
VÆ1
), (
VÆ2
))

	)

309 
	#__TGMATH_BINARY_REAL_STD_ONLY
(
VÆ1
, 
VÆ2
, 
F˘
) \

310 
	`__TGMATH_2STD
 (
F˘
, (
VÆ1
), (
VÆ2
))

	)

311 
	#__TGMATH_TERNARY_FIRST_SECOND_REAL_ONLY
(
VÆ1
, 
VÆ2
, 
VÆ3
, 
F˘
) \

312 
	`__TGMATH_3
 (
F˘
, (
VÆ1
), (
VÆ2
), (
VÆ3
))

	)

313 
	#__TGMATH_TERNARY_REAL_ONLY
(
VÆ1
, 
VÆ2
, 
VÆ3
, 
F˘
) \

314 
	`__TGMATH_3
 (
F˘
, (
VÆ1
), (
VÆ2
), (
VÆ3
))

	)

315 
	#__TGMATH_TERNARY_FIRST_REAL_RET_ONLY
(
VÆ1
, 
VÆ2
, 
VÆ3
, 
F˘
) \

316 
	`__TGMATH_3
 (
F˘
, (
VÆ1
), (
VÆ2
), (
VÆ3
))

	)

317 
	#__TGMATH_UNARY_REAL_IMAG
(
VÆ
, 
F˘
, 
Cf˘
) \

318 
	`__TGMATH_1C
 (
F˘
, 
Cf˘
, (
VÆ
))

	)

319 
	#__TGMATH_UNARY_IMAG
(
VÆ
, 
Cf˘
Ë
	`__TGMATH_1
 (Cf˘, (VÆ))

	)

320 
	#__TGMATH_UNARY_REAL_IMAG_RET_REAL
(
VÆ
, 
F˘
, 
Cf˘
) \

321 
	`__TGMATH_1C
 (
F˘
, 
Cf˘
, (
VÆ
))

	)

322 
	#__TGMATH_UNARY_REAL_IMAG_RET_REAL_SAME
(
VÆ
, 
Cf˘
) \

323 
	`__TGMATH_1
 (
Cf˘
, (
VÆ
))

	)

324 
	#__TGMATH_BINARY_REAL_IMAG
(
VÆ1
, 
VÆ2
, 
F˘
, 
Cf˘
) \

325 
	`__TGMATH_2C
 (
F˘
, 
Cf˘
, (
VÆ1
), (
VÆ2
))

	)

329 
	#__TGMATH_UNARY_REAL_ONLY
(
VÆ
, 
F˘
) \

330 (
	`__exãnsi⁄__
 (( (+(
VÆ
)) ==  () \

331 || 
	`__buûtö_˛assify_ty≥
 (
VÆ
) != 8) \

332 ? (
	`__tgm©h_ªÆ_ty≥
 (
VÆ
)Ë
	`F˘
 (Val) \

333 : ( (+(
VÆ
)) ==  ()) \

334 ? (
	`__tgm©h_ªÆ_ty≥
 (
VÆ
)Ë
F˘
##
	`f
 (Val) \

335 : 
	`__TGMATH_F128
 ((
VÆ
), (
	`__tgm©h_ªÆ_ty≥
 (VÆ)Ë
F˘
, \

336 (
VÆ
)) \

337 (
	`__tgm©h_ªÆ_ty≥
 (
VÆ
)Ë
	`__tgml
(
F˘
Ë(VÆ)))

	)

339 
	#__TGMATH_UNARY_REAL_RET_ONLY
(
VÆ
, 
F˘
) \

340 (
	`__exãnsi⁄__
 (( (+(
VÆ
)) ==  () \

341 || 
	`__buûtö_˛assify_ty≥
 (
VÆ
) != 8) \

342 ? 
	`F˘
 (
VÆ
) \

343 : ( (+(
VÆ
)) ==  ()) \

344 ? 
F˘
##
	`f
 (
VÆ
) \

345 : 
	`__TGMATH_F128
 ((
VÆ
), 
F˘
, (Val)) \

346 
	`__tgml
(
F˘
Ë(
VÆ
)))

	)

348 
	#__TGMATH_BINARY_FIRST_REAL_ONLY
(
VÆ1
, 
VÆ2
, 
F˘
) \

349 (
	`__exãnsi⁄__
 (( (+(
VÆ1
)) ==  () \

350 || 
	`__buûtö_˛assify_ty≥
 (
VÆ1
) != 8) \

351 ? (
	`__tgm©h_ªÆ_ty≥
 (
VÆ1
)Ë
	`F˘
 (VÆ1, 
VÆ2
) \

352 : ( (+(
VÆ1
)) ==  ()) \

353 ? (
	`__tgm©h_ªÆ_ty≥
 (
VÆ1
)Ë
F˘
##
	`f
 (VÆ1, 
VÆ2
) \

354 : 
	`__TGMATH_F128
 ((
VÆ1
), (
	`__tgm©h_ªÆ_ty≥
 (VÆ1)Ë
F˘
, \

355 (
VÆ1
, 
VÆ2
)) \

356 (
	`__tgm©h_ªÆ_ty≥
 (
VÆ1
)Ë
	`__tgml
(
F˘
Ë(VÆ1, 
VÆ2
)))

	)

358 
	#__TGMATH_BINARY_FIRST_REAL_STD_ONLY
(
VÆ1
, 
VÆ2
, 
F˘
) \

359 (
	`__exãnsi⁄__
 (( (+(
VÆ1
)) ==  () \

360 || 
	`__buûtö_˛assify_ty≥
 (
VÆ1
) != 8) \

361 ? (
	`__tgm©h_ªÆ_ty≥
 (
VÆ1
)Ë
	`F˘
 (VÆ1, 
VÆ2
) \

362 : ( (+(
VÆ1
)) ==  ()) \

363 ? (
	`__tgm©h_ªÆ_ty≥
 (
VÆ1
)Ë
F˘
##
	`f
 (VÆ1, 
VÆ2
) \

364 : (
	`__tgm©h_ªÆ_ty≥
 (
VÆ1
)Ë
	`__tgml
(
F˘
Ë(VÆ1, 
VÆ2
)))

	)

366 
	#__TGMATH_BINARY_REAL_ONLY
(
VÆ1
, 
VÆ2
, 
F˘
) \

367 (
	`__exãnsi⁄__
 (( ((
VÆ1
Ë+ (
VÆ2
)) >  () \

368 && 
	`__buûtö_˛assify_ty≥
 ((
VÆ1
Ë+ (
VÆ2
)) == 8) \

369 ? 
	`__TGMATH_F128
 ((
VÆ1
Ë+ (
VÆ2
), \

370 (
__ty≥of
 \

371 ((
	`__tgm©h_ªÆ_ty≥
 (
VÆ1
)) 0 \

372 + (
	`__tgm©h_ªÆ_ty≥
 (
VÆ2
)Ë0)Ë
F˘
, \

373 (
VÆ1
, 
VÆ2
)) \

374 (
	`__ty≥of
 ((
	`__tgm©h_ªÆ_ty≥
 (
VÆ1
)) 0 \

375 + (
	`__tgm©h_ªÆ_ty≥
 (
VÆ2
)) 0)) \

376 
	`__tgml
(
F˘
Ë(
VÆ1
, 
VÆ2
) \

377 : ( (+(
VÆ1
)) ==  () \

378 ||  (+(
VÆ2
)) ==  () \

379 || 
	`__buûtö_˛assify_ty≥
 (
VÆ1
) != 8 \

380 || 
	`__buûtö_˛assify_ty≥
 (
VÆ2
) != 8) \

381 ? (
	`__ty≥of
 ((
	`__tgm©h_ªÆ_ty≥
 (
VÆ1
)) 0 \

382 + (
	`__tgm©h_ªÆ_ty≥
 (
VÆ2
)) 0)) \

383 
	`F˘
 (
VÆ1
, 
VÆ2
) \

384 : (
	`__ty≥of
 ((
	`__tgm©h_ªÆ_ty≥
 (
VÆ1
)) 0 \

385 + (
	`__tgm©h_ªÆ_ty≥
 (
VÆ2
)) 0)) \

386 
F˘
##
	`f
 (
VÆ1
, 
VÆ2
)))

	)

388 
	#__TGMATH_BINARY_REAL_STD_ONLY
(
VÆ1
, 
VÆ2
, 
F˘
) \

389 (
	`__exãnsi⁄__
 (( ((
VÆ1
Ë+ (
VÆ2
)) >  () \

390 && 
	`__buûtö_˛assify_ty≥
 ((
VÆ1
Ë+ (
VÆ2
)) == 8) \

391 ? (
	`__ty≥of
 ((
	`__tgm©h_ªÆ_ty≥
 (
VÆ1
)) 0 \

392 + (
	`__tgm©h_ªÆ_ty≥
 (
VÆ2
)) 0)) \

393 
	`__tgml
(
F˘
Ë(
VÆ1
, 
VÆ2
) \

394 : ( (+(
VÆ1
)) ==  () \

395 ||  (+(
VÆ2
)) ==  () \

396 || 
	`__buûtö_˛assify_ty≥
 (
VÆ1
) != 8 \

397 || 
	`__buûtö_˛assify_ty≥
 (
VÆ2
) != 8) \

398 ? (
	`__ty≥of
 ((
	`__tgm©h_ªÆ_ty≥
 (
VÆ1
)) 0 \

399 + (
	`__tgm©h_ªÆ_ty≥
 (
VÆ2
)) 0)) \

400 
	`F˘
 (
VÆ1
, 
VÆ2
) \

401 : (
	`__ty≥of
 ((
	`__tgm©h_ªÆ_ty≥
 (
VÆ1
)) 0 \

402 + (
	`__tgm©h_ªÆ_ty≥
 (
VÆ2
)) 0)) \

403 
F˘
##
	`f
 (
VÆ1
, 
VÆ2
)))

	)

405 
	#__TGMATH_TERNARY_FIRST_SECOND_REAL_ONLY
(
VÆ1
, 
VÆ2
, 
VÆ3
, 
F˘
) \

406 (
	`__exãnsi⁄__
 (( ((
VÆ1
Ë+ (
VÆ2
)) >  () \

407 && 
	`__buûtö_˛assify_ty≥
 ((
VÆ1
Ë+ (
VÆ2
)) == 8) \

408 ? 
	`__TGMATH_F128
 ((
VÆ1
Ë+ (
VÆ2
), \

409 (
__ty≥of
 \

410 ((
	`__tgm©h_ªÆ_ty≥
 (
VÆ1
)) 0 \

411 + (
	`__tgm©h_ªÆ_ty≥
 (
VÆ2
)Ë0)Ë
F˘
, \

412 (
VÆ1
, 
VÆ2
, 
VÆ3
)) \

413 (
	`__ty≥of
 ((
	`__tgm©h_ªÆ_ty≥
 (
VÆ1
)) 0 \

414 + (
	`__tgm©h_ªÆ_ty≥
 (
VÆ2
)) 0)) \

415 
	`__tgml
(
F˘
Ë(
VÆ1
, 
VÆ2
, 
VÆ3
) \

416 : ( (+(
VÆ1
)) ==  () \

417 ||  (+(
VÆ2
)) ==  () \

418 || 
	`__buûtö_˛assify_ty≥
 (
VÆ1
) != 8 \

419 || 
	`__buûtö_˛assify_ty≥
 (
VÆ2
) != 8) \

420 ? (
	`__ty≥of
 ((
	`__tgm©h_ªÆ_ty≥
 (
VÆ1
)) 0 \

421 + (
	`__tgm©h_ªÆ_ty≥
 (
VÆ2
)) 0)) \

422 
	`F˘
 (
VÆ1
, 
VÆ2
, 
VÆ3
) \

423 : (
	`__ty≥of
 ((
	`__tgm©h_ªÆ_ty≥
 (
VÆ1
)) 0 \

424 + (
	`__tgm©h_ªÆ_ty≥
 (
VÆ2
)) 0)) \

425 
F˘
##
	`f
 (
VÆ1
, 
VÆ2
, 
VÆ3
)))

	)

427 
	#__TGMATH_TERNARY_REAL_ONLY
(
VÆ1
, 
VÆ2
, 
VÆ3
, 
F˘
) \

428 (
	`__exãnsi⁄__
 (( ((
VÆ1
Ë+ (
VÆ2
Ë+ (
VÆ3
)) >  () \

429 && 
	`__buûtö_˛assify_ty≥
 ((
VÆ1
Ë+ (
VÆ2
Ë+ (
VÆ3
)) \

431 ? 
	`__TGMATH_F128
 ((
VÆ1
Ë+ (
VÆ2
Ë+ (
VÆ3
), \

432 (
__ty≥of
 \

433 ((
	`__tgm©h_ªÆ_ty≥
 (
VÆ1
)) 0 \

434 + (
	`__tgm©h_ªÆ_ty≥
 (
VÆ2
)) 0 \

435 + (
	`__tgm©h_ªÆ_ty≥
 (
VÆ3
)Ë0)Ë
F˘
, \

436 (
VÆ1
, 
VÆ2
, 
VÆ3
)) \

437 (
	`__ty≥of
 ((
	`__tgm©h_ªÆ_ty≥
 (
VÆ1
)) 0 \

438 + (
	`__tgm©h_ªÆ_ty≥
 (
VÆ2
)) 0 \

439 + (
	`__tgm©h_ªÆ_ty≥
 (
VÆ3
)) 0)) \

440 
	`__tgml
(
F˘
Ë(
VÆ1
, 
VÆ2
, 
VÆ3
) \

441 : ( (+(
VÆ1
)) ==  () \

442 ||  (+(
VÆ2
)) ==  () \

443 ||  (+(
VÆ3
)) ==  () \

444 || 
	`__buûtö_˛assify_ty≥
 (
VÆ1
) != 8 \

445 || 
	`__buûtö_˛assify_ty≥
 (
VÆ2
) != 8 \

446 || 
	`__buûtö_˛assify_ty≥
 (
VÆ3
) != 8) \

447 ? (
	`__ty≥of
 ((
	`__tgm©h_ªÆ_ty≥
 (
VÆ1
)) 0 \

448 + (
	`__tgm©h_ªÆ_ty≥
 (
VÆ2
)) 0 \

449 + (
	`__tgm©h_ªÆ_ty≥
 (
VÆ3
)) 0)) \

450 
	`F˘
 (
VÆ1
, 
VÆ2
, 
VÆ3
) \

451 : (
	`__ty≥of
 ((
	`__tgm©h_ªÆ_ty≥
 (
VÆ1
)) 0 \

452 + (
	`__tgm©h_ªÆ_ty≥
 (
VÆ2
)) 0 \

453 + (
	`__tgm©h_ªÆ_ty≥
 (
VÆ3
)) 0)) \

454 
F˘
##
	`f
 (
VÆ1
, 
VÆ2
, 
VÆ3
)))

	)

456 
	#__TGMATH_TERNARY_FIRST_REAL_RET_ONLY
(
VÆ1
, 
VÆ2
, 
VÆ3
, 
F˘
) \

457 (
	`__exãnsi⁄__
 (( (+(
VÆ1
)) ==  () \

458 || 
	`__buûtö_˛assify_ty≥
 (
VÆ1
) != 8) \

459 ? 
	`F˘
 (
VÆ1
, 
VÆ2
, 
VÆ3
) \

460 : ( (+(
VÆ1
)) ==  ()) \

461 ? 
F˘
##
	`f
 (
VÆ1
, 
VÆ2
, 
VÆ3
) \

462 : 
	`__TGMATH_F128
 ((
VÆ1
), 
F˘
, (VÆ1, 
VÆ2
, 
VÆ3
)) \

463 
	`__tgml
(
F˘
Ë(
VÆ1
, 
VÆ2
, 
VÆ3
)))

	)

467 
	#__TGMATH_UNARY_REAL_IMAG
(
VÆ
, 
F˘
, 
Cf˘
) \

468 (
	`__exãnsi⁄__
 (( (+
	`__ªÆ__
 (
VÆ
)) ==  () \

469 || 
	`__buûtö_˛assify_ty≥
 (
	`__ªÆ__
 (
VÆ
)) != 8) \

470 ? (
	`__ex¥_is_ªÆ
 (
VÆ
) \

471 ? (
	`__tgm©h_com∂ex_ty≥
 (
VÆ
)Ë
	`F˘
 (Val) \

472 : (
	`__tgm©h_com∂ex_ty≥
 (
VÆ
)Ë
	`Cf˘
 (Val)) \

473 : ( (+
	`__ªÆ__
 (
VÆ
)) ==  ()) \

474 ? (
	`__ex¥_is_ªÆ
 (
VÆ
) \

475 ? (
	`__tgm©h_com∂ex_ty≥
 (
VÆ
)Ë
F˘
##
	`f
 (Val) \

476 : (
	`__tgm©h_com∂ex_ty≥
 (
VÆ
)Ë
Cf˘
##
	`f
 (Val)) \

477 : 
	`__TGMATH_CF128
 ((
VÆ
), \

478 (
	`__tgm©h_com∂ex_ty≥
 (
VÆ
)Ë
F˘
, \

479 (
	`__tgm©h_com∂ex_ty≥
 (
VÆ
)Ë
Cf˘
, \

480 (
VÆ
)) \

481 (
	`__ex¥_is_ªÆ
 (
VÆ
) \

482 ? (
	`__tgm©h_com∂ex_ty≥
 (
VÆ
)Ë
	`__tgml
(
F˘
) (Val) \

483 : (
	`__tgm©h_com∂ex_ty≥
 (
VÆ
)Ë
	`__tgml
(
Cf˘
Ë(VÆ))))

	)

485 
	#__TGMATH_UNARY_IMAG
(
VÆ
, 
Cf˘
) \

486 (
	`__exãnsi⁄__
 (( (+
	`__ªÆ__
 (
VÆ
)) ==  () \

487 || 
	`__buûtö_˛assify_ty≥
 (
	`__ªÆ__
 (
VÆ
)) != 8) \

488 ? (
	`__ty≥of__
 ((
	`__tgm©h_ªÆ_ty≥
 (
VÆ
)) 0 \

489 + 
_Com∂ex_I
)Ë
	`Cf˘
 (
VÆ
) \

490 : ( (+
	`__ªÆ__
 (
VÆ
)) ==  ()) \

491 ? (
	`__ty≥of__
 ((
	`__tgm©h_ªÆ_ty≥
 (
VÆ
)) 0 \

492 + 
_Com∂ex_I
)Ë
Cf˘
##
	`f
 (
VÆ
) \

493 : 
	`__TGMATH_F128
 (
	`__ªÆ__
 (
VÆ
), \

494 (
__ty≥of__
 \

495 ((
	`__tgm©h_ªÆ_ty≥
 (
VÆ
)) 0 \

496 + 
_Com∂ex_I
)Ë
Cf˘
, (
VÆ
)) \

497 (
	`__ty≥of__
 ((
	`__tgm©h_ªÆ_ty≥
 (
VÆ
)) 0 \

498 + 
_Com∂ex_I
)Ë
	`__tgml
(
Cf˘
Ë(
VÆ
)))

	)

502 
	#__TGMATH_UNARY_REAL_IMAG_RET_REAL
(
VÆ
, 
F˘
, 
Cf˘
) \

503 (
	`__exãnsi⁄__
 (( (+
	`__ªÆ__
 (
VÆ
)) ==  () \

504 || 
	`__buûtö_˛assify_ty≥
 (
	`__ªÆ__
 (
VÆ
)) != 8) \

505 ? (
	`__ex¥_is_ªÆ
 (
VÆ
) \

506 ? (
	`__ty≥of__
 (
	`__ªÆ__
 (
	`__tgm©h_ªÆ_ty≥
 (
VÆ
)) 0))\

507 
	`F˘
 (
VÆ
) \

508 : (
	`__ty≥of__
 (
	`__ªÆ__
 (
	`__tgm©h_ªÆ_ty≥
 (
VÆ
)) 0))\

509 
	`Cf˘
 (
VÆ
)) \

510 : ( (+
	`__ªÆ__
 (
VÆ
)) ==  ()) \

511 ? (
	`__ex¥_is_ªÆ
 (
VÆ
) \

512 ? (
	`__ty≥of__
 (
	`__ªÆ__
 (
	`__tgm©h_ªÆ_ty≥
 (
VÆ
)) 0))\

513 
F˘
##
	`f
 (
VÆ
) \

514 : (
	`__ty≥of__
 (
	`__ªÆ__
 (
	`__tgm©h_ªÆ_ty≥
 (
VÆ
)) 0))\

515 
Cf˘
##
	`f
 (
VÆ
)) \

516 : 
	`__TGMATH_CF128
 ((
VÆ
), \

517 (
__ty≥of__
 \

518 (
__ªÆ__
 \

519 (
	`__tgm©h_ªÆ_ty≥
 (
VÆ
)Ë0)Ë
F˘
, \

520 (
__ty≥of__
 \

521 (
__ªÆ__
 \

522 (
	`__tgm©h_ªÆ_ty≥
 (
VÆ
)Ë0)Ë
Cf˘
, \

523 (
VÆ
)) \

524 (
	`__ex¥_is_ªÆ
 (
VÆ
) \

525 ? (
	`__ty≥of__
 (
	`__ªÆ__
 (
	`__tgm©h_ªÆ_ty≥
 (
VÆ
)) 0)) \

526 
	`__tgml
(
F˘
Ë(
VÆ
) \

527 : (
	`__ty≥of__
 (
	`__ªÆ__
 (
	`__tgm©h_ªÆ_ty≥
 (
VÆ
)) 0)) \

528 
	`__tgml
(
Cf˘
Ë(
VÆ
))))

	)

529 
	#__TGMATH_UNARY_REAL_IMAG_RET_REAL_SAME
(
VÆ
, 
Cf˘
) \

530 
	`__TGMATH_UNARY_REAL_IMAG_RET_REAL
 ((
VÆ
), 
Cf˘
, Cf˘)

	)

534 
	#__TGMATH_BINARY_REAL_IMAG
(
VÆ1
, 
VÆ2
, 
F˘
, 
Cf˘
) \

535 (
	`__exãnsi⁄__
 (( (
	`__ªÆ__
 (
VÆ1
) \

536 + 
	`__ªÆ__
 (
VÆ2
)) >  () \

537 && 
	`__buûtö_˛assify_ty≥
 (
	`__ªÆ__
 (
VÆ1
) \

538 + 
	`__ªÆ__
 (
VÆ2
)) == 8) \

539 ? 
	`__TGMATH_CF128
 ((
VÆ1
Ë+ (
VÆ2
), \

540 (
__ty≥of
 \

541 ((
	`__tgm©h_com∂ex_ty≥
 (
VÆ1
)) 0 \

542 + (
	`__tgm©h_com∂ex_ty≥
 (
VÆ2
)) 0)) \

543 
F˘
, \

544 (
__ty≥of
 \

545 ((
	`__tgm©h_com∂ex_ty≥
 (
VÆ1
)) 0 \

546 + (
	`__tgm©h_com∂ex_ty≥
 (
VÆ2
)) 0)) \

547 
Cf˘
, \

548 (
VÆ1
, 
VÆ2
)) \

549 (
	`__ex¥_is_ªÆ
 ((
VÆ1
Ë+ (
VÆ2
)) \

550 ? (
	`__ty≥of
 ((
	`__tgm©h_com∂ex_ty≥
 (
VÆ1
)) 0 \

551 + (
	`__tgm©h_com∂ex_ty≥
 (
VÆ2
)) 0)) \

552 
	`__tgml
(
F˘
Ë(
VÆ1
, 
VÆ2
) \

553 : (
	`__ty≥of
 ((
	`__tgm©h_com∂ex_ty≥
 (
VÆ1
)) 0 \

554 + (
	`__tgm©h_com∂ex_ty≥
 (
VÆ2
)) 0)) \

555 
	`__tgml
(
Cf˘
Ë(
VÆ1
, 
VÆ2
)) \

556 : ( (+
	`__ªÆ__
 (
VÆ1
)) ==  () \

557 ||  (+
	`__ªÆ__
 (
VÆ2
)) ==  () \

558 || 
	`__buûtö_˛assify_ty≥
 (
	`__ªÆ__
 (
VÆ1
)) != 8 \

559 || 
	`__buûtö_˛assify_ty≥
 (
	`__ªÆ__
 (
VÆ2
)) != 8) \

560 ? (
	`__ex¥_is_ªÆ
 ((
VÆ1
Ë+ (
VÆ2
)) \

561 ? (
	`__ty≥of
 ((
	`__tgm©h_com∂ex_ty≥
 (
VÆ1
)) 0 \

562 + (
	`__tgm©h_com∂ex_ty≥
 (
VÆ2
)) 0)) \

563 
	`F˘
 (
VÆ1
, 
VÆ2
) \

564 : (
	`__ty≥of
 ((
	`__tgm©h_com∂ex_ty≥
 (
VÆ1
)) 0 \

565 + (
	`__tgm©h_com∂ex_ty≥
 (
VÆ2
)) 0)) \

566 
	`Cf˘
 (
VÆ1
, 
VÆ2
)) \

567 : (
	`__ex¥_is_ªÆ
 ((
VÆ1
Ë+ (
VÆ2
)) \

568 ? (
	`__ty≥of
 ((
	`__tgm©h_com∂ex_ty≥
 (
VÆ1
)) 0 \

569 + (
	`__tgm©h_com∂ex_ty≥
 (
VÆ2
)) 0)) \

570 
F˘
##
	`f
 (
VÆ1
, 
VÆ2
) \

571 : (
	`__ty≥of
 ((
	`__tgm©h_com∂ex_ty≥
 (
VÆ1
)) 0 \

572 + (
	`__tgm©h_com∂ex_ty≥
 (
VÆ2
)) 0)) \

573 
Cf˘
##
	`f
 (
VÆ1
, 
VÆ2
))))

	)

575 
	#__TGMATH_1_NARROW_F
(
F
, 
X
) \

576 (
	`__exãnsi⁄__
 ( ((
	`__tgm©h_ªÆ_ty≥
 (
X
)) 0) >  () \

577 ? 
F
 ## 
	`l
 (
X
) \

578 : 
	`F
 (
X
)))

	)

579 
	#__TGMATH_2_NARROW_F
(
F
, 
X
, 
Y
) \

580 (
	`__exãnsi⁄__
 ( ((
	`__tgm©h_ªÆ_ty≥
 (
X
)) 0 \

581 + (
	`__tgm©h_ªÆ_ty≥
 (
Y
)) 0) >  () \

582 ? 
F
 ## 
	`l
 (
X
, 
Y
) \

583 : 
	`F
 (
X
, 
Y
)))

	)

584 
	#__TGMATH_3_NARROW_F
(
F
, 
X
, 
Y
, 
Z
) \

585 (
	`__exãnsi⁄__
 ( ((
	`__tgm©h_ªÆ_ty≥
 (
X
)) 0 \

586 + (
	`__tgm©h_ªÆ_ty≥
 (
Y
)) 0 \

587 + (
	`__tgm©h_ªÆ_ty≥
 (
Z
)) 0) >  () \

588 ? 
F
 ## 
	`l
 (
X
, 
Y
, 
Z
) \

589 : 
	`F
 (
X
, 
Y
, 
Z
)))

	)

607 #i‡
__HAVE_FLOAT64X_LONG_DOUBLE
 && 
__HAVE_DISTINCT_FLOAT128


608 
	#__TGMATH_1_NARROW_F32
(
F
, 
X
) \

609 (
	`__exãnsi⁄__
 ( ((
	`__tgm©h_ªÆ_ty≥
 (
X
)Ë0Ë>  (
_Flﬂt64
) \

610 ? 
	`__TGMATH_F128
 ((
X
), 
F
, (X)) \

611 
F
 ## 
	`f64x
 (
X
) \

612 : 
F
 ## 
	`f64
 (
X
)))

	)

613 
	#__TGMATH_2_NARROW_F32
(
F
, 
X
, 
Y
) \

614 (
	`__exãnsi⁄__
 ( ((
	`__tgm©h_ªÆ_ty≥
 (
X
)) 0 \

615 + (
	`__tgm©h_ªÆ_ty≥
 (
Y
)Ë0Ë>  (
_Flﬂt64
) \

616 ? 
	`__TGMATH_F128
 ((
X
Ë+ (
Y
), 
F
, (X, Y)) \

617 
F
 ## 
	`f64x
 (
X
, 
Y
) \

618 : 
F
 ## 
	`f64
 (
X
, 
Y
)))

	)

619 
	#__TGMATH_3_NARROW_F32
(
F
, 
X
, 
Y
, 
Z
) \

620 (
	`__exãnsi⁄__
 ( ((
	`__tgm©h_ªÆ_ty≥
 (
X
)) 0 \

621 + (
	`__tgm©h_ªÆ_ty≥
 (
Y
)) 0 \

622 + (
	`__tgm©h_ªÆ_ty≥
 (
Z
)Ë0Ë>  (
_Flﬂt64
) \

623 ? 
	`__TGMATH_F128
 ((
X
Ë+ (
Y
Ë+ (
Z
), 
F
, (X, Y, Z)) \

624 
F
 ## 
	`f64x
 (
X
, 
Y
, 
Z
) \

625 : 
F
 ## 
	`f64
 (
X
, 
Y
, 
Z
)))

	)

626 
	#__TGMATH_1_NARROW_F64
(
F
, 
X
) \

627 (
	`__exãnsi⁄__
 ( ((
	`__tgm©h_ªÆ_ty≥
 (
X
)Ë0Ë>  (
_Flﬂt64
) \

628 ? 
	`__TGMATH_F128
 ((
X
), 
F
, (X)) \

629 
F
 ## 
	`f64x
 (
X
) \

630 : 
F
 ## 
	`f128
 (
X
)))

	)

631 
	#__TGMATH_2_NARROW_F64
(
F
, 
X
, 
Y
) \

632 (
	`__exãnsi⁄__
 ( ((
	`__tgm©h_ªÆ_ty≥
 (
X
)) 0 \

633 + (
	`__tgm©h_ªÆ_ty≥
 (
Y
)Ë0Ë>  (
_Flﬂt64
) \

634 ? 
	`__TGMATH_F128
 ((
X
Ë+ (
Y
), 
F
, (X, Y)) \

635 
F
 ## 
	`f64x
 (
X
, 
Y
) \

636 : 
F
 ## 
	`f128
 (
X
, 
Y
)))

	)

637 
	#__TGMATH_3_NARROW_F64
(
F
, 
X
, 
Y
, 
Z
) \

638 (
	`__exãnsi⁄__
 ( ((
	`__tgm©h_ªÆ_ty≥
 (
X
)) 0 \

639 + (
	`__tgm©h_ªÆ_ty≥
 (
Y
)) 0 \

640 + (
	`__tgm©h_ªÆ_ty≥
 (
Z
)Ë0Ë>  (
_Flﬂt64
) \

641 ? 
	`__TGMATH_F128
 ((
X
Ë+ (
Y
Ë+ (
Z
), 
F
, (X, Y, Z)) \

642 
F
 ## 
	`f64x
 (
X
, 
Y
, 
Z
) \

643 : 
F
 ## 
	`f128
 (
X
, 
Y
, 
Z
)))

	)

644 
	#__TGMATH_1_NARROW_F32X
(
F
, 
X
) \

645 (
	`__exãnsi⁄__
 ( ((
	`__tgm©h_ªÆ_ty≥
 (
X
)Ë0Ë>  (
_Flﬂt64
) \

646 ? 
	`__TGMATH_F128
 ((
X
), 
F
, (X)) \

647 
F
 ## 
	`f64x
 (
X
) \

648 : 
F
 ## 
	`f64
 (
X
)))

	)

649 
	#__TGMATH_2_NARROW_F32X
(
F
, 
X
, 
Y
) \

650 (
	`__exãnsi⁄__
 ( ((
	`__tgm©h_ªÆ_ty≥
 (
X
)) 0 \

651 + (
	`__tgm©h_ªÆ_ty≥
 (
Y
)Ë0Ë>  (
_Flﬂt64
) \

652 ? 
	`__TGMATH_F128
 ((
X
Ë+ (
Y
), 
F
, (X, Y)) \

653 
F
 ## 
	`f64x
 (
X
, 
Y
) \

654 : 
F
 ## 
	`f64
 (
X
, 
Y
)))

	)

655 
	#__TGMATH_3_NARROW_F32X
(
F
, 
X
, 
Y
, 
Z
) \

656 (
	`__exãnsi⁄__
 ( ((
	`__tgm©h_ªÆ_ty≥
 (
X
)) 0 \

657 + (
	`__tgm©h_ªÆ_ty≥
 (
Y
)) 0 \

658 + (
	`__tgm©h_ªÆ_ty≥
 (
Z
)Ë0Ë>  (
_Flﬂt64
) \

659 ? 
	`__TGMATH_F128
 ((
X
Ë+ (
Y
Ë+ (
Z
), 
F
, (X, Y, Z)) \

660 
F
 ## 
	`f64x
 (
X
, 
Y
, 
Z
) \

661 : 
F
 ## 
	`f64
 (
X
, 
Y
, 
Z
)))

	)

662 #ñi‡
__HAVE_FLOAT128


663 
	#__TGMATH_1_NARROW_F32
(
F
, 
X
) \

664 (
	`__exãnsi⁄__
 ( ((
	`__tgm©h_ªÆ_ty≥
 (
X
)Ë0Ë>  (
_Flﬂt64
) \

665 ? 
F
 ## 
	`f128
 (
X
) \

666 : 
F
 ## 
	`f64
 (
X
)))

	)

667 
	#__TGMATH_2_NARROW_F32
(
F
, 
X
, 
Y
) \

668 (
	`__exãnsi⁄__
 ( ((
	`__tgm©h_ªÆ_ty≥
 (
X
)) 0 \

669 + (
	`__tgm©h_ªÆ_ty≥
 (
Y
)Ë0Ë>  (
_Flﬂt64
) \

670 ? 
F
 ## 
	`f128
 (
X
, 
Y
) \

671 : 
F
 ## 
	`f64
 (
X
, 
Y
)))

	)

672 
	#__TGMATH_3_NARROW_F32
(
F
, 
X
, 
Y
, 
Z
) \

673 (
	`__exãnsi⁄__
 ( ((
	`__tgm©h_ªÆ_ty≥
 (
X
)) 0 \

674 + (
	`__tgm©h_ªÆ_ty≥
 (
Y
)) 0 \

675 + (
	`__tgm©h_ªÆ_ty≥
 (
Z
)Ë0Ë>  (
_Flﬂt64
) \

676 ? 
F
 ## 
	`f128
 (
X
, 
Y
, 
Z
) \

677 : 
F
 ## 
	`f64
 (
X
, 
Y
, 
Z
)))

	)

678 
	#__TGMATH_1_NARROW_F64
(
F
, 
X
) \

679 (
F
 ## 
	`f128
 (
X
))

	)

680 
	#__TGMATH_2_NARROW_F64
(
F
, 
X
, 
Y
) \

681 (
F
 ## 
	`f128
 (
X
, 
Y
))

	)

682 
	#__TGMATH_3_NARROW_F64
(
F
, 
X
, 
Y
, 
Z
) \

683 (
F
 ## 
	`f128
 (
X
, 
Y
, 
Z
))

	)

684 
	#__TGMATH_1_NARROW_F32X
(
F
, 
X
) \

685 (
	`__exãnsi⁄__
 ( ((
	`__tgm©h_ªÆ_ty≥
 (
X
)Ë0Ë>  (
_Flﬂt32x
) \

686 ? 
F
 ## 
	`f64x
 (
X
) \

687 : 
F
 ## 
	`f64
 (
X
)))

	)

688 
	#__TGMATH_2_NARROW_F32X
(
F
, 
X
, 
Y
) \

689 (
	`__exãnsi⁄__
 ( ((
	`__tgm©h_ªÆ_ty≥
 (
X
)) 0 \

690 + (
	`__tgm©h_ªÆ_ty≥
 (
Y
)Ë0Ë>  (
_Flﬂt32x
) \

691 ? 
F
 ## 
	`f64x
 (
X
, 
Y
) \

692 : 
F
 ## 
	`f64
 (
X
, 
Y
)))

	)

693 
	#__TGMATH_3_NARROW_F32X
(
F
, 
X
, 
Y
, 
Z
) \

694 (
	`__exãnsi⁄__
 ( ((
	`__tgm©h_ªÆ_ty≥
 (
X
)) 0 \

695 + (
	`__tgm©h_ªÆ_ty≥
 (
Y
)) 0 \

696 + (
	`__tgm©h_ªÆ_ty≥
 (
Z
)Ë0Ë>  (
_Flﬂt32x
) \

697 ? 
F
 ## 
	`f64x
 (
X
, 
Y
, 
Z
) \

698 : 
F
 ## 
	`f64
 (
X
, 
Y
, 
Z
)))

	)

700 
	#__TGMATH_1_NARROW_F32
(
F
, 
X
) \

701 (
F
 ## 
	`f64
 (
X
))

	)

702 
	#__TGMATH_2_NARROW_F32
(
F
, 
X
, 
Y
) \

703 (
F
 ## 
	`f64
 (
X
, 
Y
))

	)

704 
	#__TGMATH_3_NARROW_F32
(
F
, 
X
, 
Y
, 
Z
) \

705 (
F
 ## 
	`f64
 (
X
, 
Y
, 
Z
))

	)

719 
	#acos
(
VÆ
Ë
	`__TGMATH_UNARY_REAL_IMAG
 (VÆ, 
acos
, 
ˇcos
)

	)

721 
	#asö
(
VÆ
Ë
	`__TGMATH_UNARY_REAL_IMAG
 (VÆ, 
asö
, 
ˇsö
)

	)

723 
	#©™
(
VÆ
Ë
	`__TGMATH_UNARY_REAL_IMAG
 (VÆ, 
©™
, 
ˇèn
)

	)

725 
	#©™2
(
VÆ1
, 
VÆ2
Ë
	`__TGMATH_BINARY_REAL_ONLY
 (VÆ1, VÆ2, 
©™2
)

	)

728 
	#cos
(
VÆ
Ë
	`__TGMATH_UNARY_REAL_IMAG
 (VÆ, 
cos
, 
ccos
)

	)

730 
	#sö
(
VÆ
Ë
	`__TGMATH_UNARY_REAL_IMAG
 (VÆ, 
sö
, 
csö
)

	)

732 
	#èn
(
VÆ
Ë
	`__TGMATH_UNARY_REAL_IMAG
 (VÆ, 
èn
, 
˘™
)

	)

738 
	#acosh
(
VÆ
Ë
	`__TGMATH_UNARY_REAL_IMAG
 (VÆ, 
acosh
, 
ˇcosh
)

	)

740 
	#asöh
(
VÆ
Ë
	`__TGMATH_UNARY_REAL_IMAG
 (VÆ, 
asöh
, 
ˇsöh
)

	)

742 
	#©™h
(
VÆ
Ë
	`__TGMATH_UNARY_REAL_IMAG
 (VÆ, 
©™h
, 
ˇènh
)

	)

745 
	#cosh
(
VÆ
Ë
	`__TGMATH_UNARY_REAL_IMAG
 (VÆ, 
cosh
, 
ccosh
)

	)

747 
	#söh
(
VÆ
Ë
	`__TGMATH_UNARY_REAL_IMAG
 (VÆ, 
söh
, 
csöh
)

	)

749 
	#ènh
(
VÆ
Ë
	`__TGMATH_UNARY_REAL_IMAG
 (VÆ, 
ènh
, 
˘™h
)

	)

755 
	#exp
(
VÆ
Ë
	`__TGMATH_UNARY_REAL_IMAG
 (VÆ, 
exp
, 
˚xp
)

	)

758 
	#‰exp
(
VÆ1
, 
VÆ2
Ë
	`__TGMATH_BINARY_FIRST_REAL_ONLY
 (VÆ1, VÆ2, 
‰exp
)

	)

761 
	#ldexp
(
VÆ1
, 
VÆ2
Ë
	`__TGMATH_BINARY_FIRST_REAL_ONLY
 (VÆ1, VÆ2, 
ldexp
)

	)

764 
	#log
(
VÆ
Ë
	`__TGMATH_UNARY_REAL_IMAG
 (VÆ, 
log
, 
˛og
)

	)

767 #ifde‡
__USE_GNU


768 
	#log10
(
VÆ
Ë
	`__TGMATH_UNARY_REAL_IMAG
 (VÆ, 
log10
, 
˛og10
)

	)

770 
	#log10
(
VÆ
Ë
	`__TGMATH_UNARY_REAL_ONLY
 (VÆ, 
log10
)

	)

774 
	#expm1
(
VÆ
Ë
	`__TGMATH_UNARY_REAL_ONLY
 (VÆ, 
expm1
)

	)

777 
	#log1p
(
VÆ
Ë
	`__TGMATH_UNARY_REAL_ONLY
 (VÆ, 
log1p
)

	)

780 
	#logb
(
VÆ
Ë
	`__TGMATH_UNARY_REAL_ONLY
 (VÆ, 
logb
)

	)

783 
	#exp2
(
VÆ
Ë
	`__TGMATH_UNARY_REAL_ONLY
 (VÆ, 
exp2
)

	)

786 
	#log2
(
VÆ
Ë
	`__TGMATH_UNARY_REAL_ONLY
 (VÆ, 
log2
)

	)

788 #i‡
__GLIBC_USE
 (
IEC_60559_FUNCS_EXT_C2X
)

790 
	#exp10
(
VÆ
Ë
	`__TGMATH_UNARY_REAL_ONLY
 (VÆ, 
exp10
)

	)

797 
	#pow
(
VÆ1
, 
VÆ2
Ë
	`__TGMATH_BINARY_REAL_IMAG
 (VÆ1, VÆ2, 
pow
, 
˝ow
)

	)

800 
	#sqπ
(
VÆ
Ë
	`__TGMATH_UNARY_REAL_IMAG
 (VÆ, 
sqπ
, 
csqπ
)

	)

803 
	#hypŸ
(
VÆ1
, 
VÆ2
Ë
	`__TGMATH_BINARY_REAL_ONLY
 (VÆ1, VÆ2, 
hypŸ
)

	)

806 
	#cbπ
(
VÆ
Ë
	`__TGMATH_UNARY_REAL_ONLY
 (VÆ, 
cbπ
)

	)

812 
	#˚û
(
VÆ
Ë
	`__TGMATH_UNARY_REAL_ONLY
 (VÆ, 
˚û
)

	)

815 
	#Ábs
(
VÆ
Ë
	`__TGMATH_UNARY_REAL_IMAG_RET_REAL
 (VÆ, 
Ábs
, 
ˇbs
)

	)

818 
	#Êo‹
(
VÆ
Ë
	`__TGMATH_UNARY_REAL_ONLY
 (VÆ, 
Êo‹
)

	)

821 
	#fmod
(
VÆ1
, 
VÆ2
Ë
	`__TGMATH_BINARY_REAL_ONLY
 (VÆ1, VÆ2, 
fmod
)

	)

825 
	#√¨byöt
(
VÆ
Ë
	`__TGMATH_UNARY_REAL_ONLY
 (VÆ, 
√¨byöt
)

	)

829 
	#round
(
VÆ
Ë
	`__TGMATH_UNARY_REAL_ONLY
 (VÆ, 
round
)

	)

833 
	#åunc
(
VÆ
Ë
	`__TGMATH_UNARY_REAL_ONLY
 (VÆ, 
åunc
)

	)

838 
	#ªmquo
(
VÆ1
, 
VÆ2
, 
VÆ3
) \

839 
	`__TGMATH_TERNARY_FIRST_SECOND_REAL_ONLY
 (
VÆ1
, 
VÆ2
, 
VÆ3
, 
ªmquo
)

	)

843 
	#Ãöt
(
VÆ
Ë
	`__TGMATH_UNARY_REAL_RET_ONLY
 (VÆ, 
Ãöt
)

	)

844 
	#Œröt
(
VÆ
Ë
	`__TGMATH_UNARY_REAL_RET_ONLY
 (VÆ, 
Œröt
)

	)

848 
	#Ãound
(
VÆ
Ë
	`__TGMATH_UNARY_REAL_RET_ONLY
 (VÆ, 
Ãound
)

	)

849 
	#Œround
(
VÆ
Ë
	`__TGMATH_UNARY_REAL_RET_ONLY
 (VÆ, 
Œround
)

	)

853 
	#c›ysign
(
VÆ1
, 
VÆ2
Ë
	`__TGMATH_BINARY_REAL_ONLY
 (VÆ1, VÆ2, 
c›ysign
)

	)

856 
	#îf
(
VÆ
Ë
	`__TGMATH_UNARY_REAL_ONLY
 (VÆ, 
îf
)

	)

857 
	#îfc
(
VÆ
Ë
	`__TGMATH_UNARY_REAL_ONLY
 (VÆ, 
îfc
)

	)

858 
	#tgamma
(
VÆ
Ë
	`__TGMATH_UNARY_REAL_ONLY
 (VÆ, 
tgamma
)

	)

859 
	#lgamma
(
VÆ
Ë
	`__TGMATH_UNARY_REAL_ONLY
 (VÆ, 
lgamma
)

	)

864 
	#röt
(
VÆ
Ë
	`__TGMATH_UNARY_REAL_ONLY
 (VÆ, 
röt
)

	)

866 #i‡
__GLIBC_USE
 (
IEC_60559_BFP_EXT_C2X
)

868 
	#√xtdown
(
VÆ
Ë
	`__TGMATH_UNARY_REAL_ONLY
 (VÆ, 
√xtdown
)

	)

870 
	#√xtup
(
VÆ
Ë
	`__TGMATH_UNARY_REAL_ONLY
 (VÆ, 
√xtup
)

	)

874 
	#√xè·î
(
VÆ1
, 
VÆ2
Ë
	`__TGMATH_BINARY_REAL_ONLY
 (VÆ1, VÆ2, 
√xè·î
)

	)

875 
	#√xâow¨d
(
VÆ1
, 
VÆ2
) \

876 
	`__TGMATH_BINARY_FIRST_REAL_STD_ONLY
 (
VÆ1
, 
VÆ2
, 
√xâow¨d
)

	)

879 
	#ªmaödî
(
VÆ1
, 
VÆ2
Ë
	`__TGMATH_BINARY_REAL_ONLY
 (VÆ1, VÆ2, 
ªmaödî
)

	)

882 #ifde‡
__USE_MISC


883 
	#sˇlb
(
VÆ1
, 
VÆ2
Ë
	`__TGMATH_BINARY_REAL_STD_ONLY
 (VÆ1, VÆ2, 
sˇlb
)

	)

887 
	#sˇlbn
(
VÆ1
, 
VÆ2
Ë
	`__TGMATH_BINARY_FIRST_REAL_ONLY
 (VÆ1, VÆ2, 
sˇlbn
)

	)

890 
	#sˇlb 
(
VÆ1
, 
VÆ2
) \

891 
	`__TGMATH_BINARY_FIRST_REAL_ONLY
 (
VÆ1
, 
VÆ2
, 
sˇlb 
)

	)

894 
	#ûogb
(
VÆ
Ë
	`__TGMATH_UNARY_REAL_RET_ONLY
 (VÆ, 
ûogb
)

	)

898 
	#fdim
(
VÆ1
, 
VÆ2
Ë
	`__TGMATH_BINARY_REAL_ONLY
 (VÆ1, VÆ2, 
fdim
)

	)

900 #i‡
__GLIBC_USE
 (
ISOC2X
Ë&& !
deföed
 
__USE_GNU


902 
	#fmax
(
VÆ1
, 
VÆ2
Ë
	`__TGMATH_BINARY_REAL_STD_ONLY
 (VÆ1, VÆ2, 
fmax
)

	)

905 
	#fmö
(
VÆ1
, 
VÆ2
Ë
	`__TGMATH_BINARY_REAL_STD_ONLY
 (VÆ1, VÆ2, 
fmö
)

	)

908 
	#fmax
(
VÆ1
, 
VÆ2
Ë
	`__TGMATH_BINARY_REAL_ONLY
 (VÆ1, VÆ2, 
fmax
)

	)

911 
	#fmö
(
VÆ1
, 
VÆ2
Ë
	`__TGMATH_BINARY_REAL_ONLY
 (VÆ1, VÆ2, 
fmö
)

	)

916 
	#fma
(
VÆ1
, 
VÆ2
, 
VÆ3
) \

917 
	`__TGMATH_TERNARY_REAL_ONLY
 (
VÆ1
, 
VÆ2
, 
VÆ3
, 
fma
)

	)

919 #i‡
__GLIBC_USE
 (
IEC_60559_BFP_EXT_C2X
)

921 
	#roundeví
(
VÆ
Ë
	`__TGMATH_UNARY_REAL_ONLY
 (VÆ, 
roundeví
)

	)

923 
	#‰omÂ
(
VÆ1
, 
VÆ2
, 
VÆ3
) \

924 
	`__TGMATH_TERNARY_FIRST_REAL_RET_ONLY
 (
VÆ1
, 
VÆ2
, 
VÆ3
, 
‰omÂ
)

	)

926 
	#u‰omÂ
(
VÆ1
, 
VÆ2
, 
VÆ3
) \

927 
	`__TGMATH_TERNARY_FIRST_REAL_RET_ONLY
 (
VÆ1
, 
VÆ2
, 
VÆ3
, 
u‰omÂ
)

	)

929 
	#‰omÂx
(
VÆ1
, 
VÆ2
, 
VÆ3
) \

930 
	`__TGMATH_TERNARY_FIRST_REAL_RET_ONLY
 (
VÆ1
, 
VÆ2
, 
VÆ3
, 
‰omÂx
)

	)

932 
	#u‰omÂx
(
VÆ1
, 
VÆ2
, 
VÆ3
) \

933 
	`__TGMATH_TERNARY_FIRST_REAL_RET_ONLY
 (
VÆ1
, 
VÆ2
, 
VÆ3
, 
u‰omÂx
)

	)

936 
	#Œogb
(
VÆ
Ë
	`__TGMATH_UNARY_REAL_RET_ONLY
 (VÆ, 
Œogb
)

	)

939 #i‡
__GLIBC_USE
 (
IEC_60559_BFP_EXT
)

941 
	#fmaxmag
(
VÆ1
, 
VÆ2
Ë
	`__TGMATH_BINARY_REAL_ONLY
 (VÆ1, VÆ2, 
fmaxmag
)

	)

944 
	#fmömag
(
VÆ1
, 
VÆ2
Ë
	`__TGMATH_BINARY_REAL_ONLY
 (VÆ1, VÆ2, 
fmömag
)

	)

947 #i‡
__GLIBC_USE
 (
ISOC2X
)

949 
	#fmaximum
(
VÆ1
, 
VÆ2
Ë
	`__TGMATH_BINARY_REAL_ONLY
 (VÆ1, VÆ2, 
fmaximum
)

	)

952 
	#fmöimum
(
VÆ1
, 
VÆ2
Ë
	`__TGMATH_BINARY_REAL_ONLY
 (VÆ1, VÆ2, 
fmöimum
)

	)

955 
	#fmaximum_num
(
VÆ1
, 
VÆ2
) \

956 
	`__TGMATH_BINARY_REAL_ONLY
 (
VÆ1
, 
VÆ2
, 
fmaximum_num
)

	)

959 
	#fmöimum_num
(
VÆ1
, 
VÆ2
) \

960 
	`__TGMATH_BINARY_REAL_ONLY
 (
VÆ1
, 
VÆ2
, 
fmöimum_num
)

	)

963 
	#fmaximum_mag
(
VÆ1
, 
VÆ2
) \

964 
	`__TGMATH_BINARY_REAL_ONLY
 (
VÆ1
, 
VÆ2
, 
fmaximum_mag
)

	)

967 
	#fmöimum_mag
(
VÆ1
, 
VÆ2
) \

968 
	`__TGMATH_BINARY_REAL_ONLY
 (
VÆ1
, 
VÆ2
, 
fmöimum_mag
)

	)

971 
	#fmaximum_mag_num
(
VÆ1
, 
VÆ2
) \

972 
	`__TGMATH_BINARY_REAL_ONLY
 (
VÆ1
, 
VÆ2
, 
fmaximum_mag_num
)

	)

975 
	#fmöimum_mag_num
(
VÆ1
, 
VÆ2
) \

976 
	`__TGMATH_BINARY_REAL_ONLY
 (
VÆ1
, 
VÆ2
, 
fmöimum_mag_num
)

	)

983 
	#ˇrg
(
VÆ
Ë
	`__TGMATH_UNARY_REAL_IMAG_RET_REAL_SAME
 (VÆ, 
ˇrg
)

	)

986 
	#c⁄j
(
VÆ
Ë
	`__TGMATH_UNARY_IMAG
 (VÆ, 
c⁄j
)

	)

989 
	#˝roj
(
VÆ
Ë
	`__TGMATH_UNARY_IMAG
 (VÆ, 
˝roj
)

	)

995 
	#cimag
(
VÆ
Ë
	`__TGMATH_UNARY_REAL_IMAG_RET_REAL_SAME
 (VÆ, 
cimag
)

	)

998 
	#¸ól
(
VÆ
Ë
	`__TGMATH_UNARY_REAL_IMAG_RET_REAL_SAME
 (VÆ, 
¸ól
)

	)

1003 #i‡
__GLIBC_USE
 (
IEC_60559_BFP_EXT_C2X
)

1006 
	#Ádd
(
VÆ1
, 
VÆ2
Ë
	`__TGMATH_2_NARROW_F
 (
Ádd
, VÆ1, VÆ2)

	)

1007 
	#dadd
(
VÆ1
, 
VÆ2
Ë
	`__TGMATH_2_NARROW_D
 (
dadd
, VÆ1, VÆ2)

	)

1010 
	#fdiv
(
VÆ1
, 
VÆ2
Ë
	`__TGMATH_2_NARROW_F
 (
fdiv
, VÆ1, VÆ2)

	)

1011 
	#ddiv
(
VÆ1
, 
VÆ2
Ë
	`__TGMATH_2_NARROW_D
 (
ddiv
, VÆ1, VÆ2)

	)

1014 
	#fmul
(
VÆ1
, 
VÆ2
Ë
	`__TGMATH_2_NARROW_F
 (
fmul
, VÆ1, VÆ2)

	)

1015 
	#dmul
(
VÆ1
, 
VÆ2
Ë
	`__TGMATH_2_NARROW_D
 (
dmul
, VÆ1, VÆ2)

	)

1018 
	#fsub
(
VÆ1
, 
VÆ2
Ë
	`__TGMATH_2_NARROW_F
 (
fsub
, VÆ1, VÆ2)

	)

1019 
	#dsub
(
VÆ1
, 
VÆ2
Ë
	`__TGMATH_2_NARROW_D
 (
dsub
, VÆ1, VÆ2)

	)

1022 
	#fsqπ
(
VÆ
Ë
	`__TGMATH_1_NARROW_F
 (
fsqπ
, VÆ)

	)

1023 
	#dsqπ
(
VÆ
Ë
	`__TGMATH_1_NARROW_D
 (
dsqπ
, VÆ)

	)

1026 
	#ffma
(
VÆ1
, 
VÆ2
, 
VÆ3
Ë
	`__TGMATH_3_NARROW_F
 (
ffma
, VÆ1, VÆ2, VÆ3)

	)

1027 
	#dfma
(
VÆ1
, 
VÆ2
, 
VÆ3
Ë
	`__TGMATH_3_NARROW_D
 (
dfma
, VÆ1, VÆ2, VÆ3)

	)

1031 #i‡
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

1033 #i‡
__HAVE_FLOAT16


1034 
	#f16add
(
VÆ1
, 
VÆ2
Ë
	`__TGMATH_2_NARROW_F16
 (
f16add
, VÆ1, VÆ2)

	)

1035 
	#f16div
(
VÆ1
, 
VÆ2
Ë
	`__TGMATH_2_NARROW_F16
 (
f16div
, VÆ1, VÆ2)

	)

1036 
	#f16mul
(
VÆ1
, 
VÆ2
Ë
	`__TGMATH_2_NARROW_F16
 (
f16mul
, VÆ1, VÆ2)

	)

1037 
	#f16sub
(
VÆ1
, 
VÆ2
Ë
	`__TGMATH_2_NARROW_F16
 (
f16sub
, VÆ1, VÆ2)

	)

1038 
	#f16sqπ
(
VÆ
Ë
	`__TGMATH_1_NARROW_F16
 (
f16sqπ
, VÆ)

	)

1039 
	#f16fma
(
VÆ1
, 
VÆ2
, 
VÆ3
) \

1040 
	`__TGMATH_3_NARROW_F16
 (
f16fma
, 
VÆ1
, 
VÆ2
, 
VÆ3
)

	)

1043 #i‡
__HAVE_FLOAT32


1044 
	#f32add
(
VÆ1
, 
VÆ2
Ë
	`__TGMATH_2_NARROW_F32
 (
f32add
, VÆ1, VÆ2)

	)

1045 
	#f32div
(
VÆ1
, 
VÆ2
Ë
	`__TGMATH_2_NARROW_F32
 (
f32div
, VÆ1, VÆ2)

	)

1046 
	#f32mul
(
VÆ1
, 
VÆ2
Ë
	`__TGMATH_2_NARROW_F32
 (
f32mul
, VÆ1, VÆ2)

	)

1047 
	#f32sub
(
VÆ1
, 
VÆ2
Ë
	`__TGMATH_2_NARROW_F32
 (
f32sub
, VÆ1, VÆ2)

	)

1048 
	#f32sqπ
(
VÆ
Ë
	`__TGMATH_1_NARROW_F32
 (
f32sqπ
, VÆ)

	)

1049 
	#f32fma
(
VÆ1
, 
VÆ2
, 
VÆ3
) \

1050 
	`__TGMATH_3_NARROW_F32
 (
f32fma
, 
VÆ1
, 
VÆ2
, 
VÆ3
)

	)

1053 #i‡
__HAVE_FLOAT64
 && (
__HAVE_FLOAT64X
 || 
__HAVE_FLOAT128
)

1054 
	#f64add
(
VÆ1
, 
VÆ2
Ë
	`__TGMATH_2_NARROW_F64
 (
f64add
, VÆ1, VÆ2)

	)

1055 
	#f64div
(
VÆ1
, 
VÆ2
Ë
	`__TGMATH_2_NARROW_F64
 (
f64div
, VÆ1, VÆ2)

	)

1056 
	#f64mul
(
VÆ1
, 
VÆ2
Ë
	`__TGMATH_2_NARROW_F64
 (
f64mul
, VÆ1, VÆ2)

	)

1057 
	#f64sub
(
VÆ1
, 
VÆ2
Ë
	`__TGMATH_2_NARROW_F64
 (
f64sub
, VÆ1, VÆ2)

	)

1058 
	#f64sqπ
(
VÆ
Ë
	`__TGMATH_1_NARROW_F64
 (
f64sqπ
, VÆ)

	)

1059 
	#f64fma
(
VÆ1
, 
VÆ2
, 
VÆ3
) \

1060 
	`__TGMATH_3_NARROW_F64
 (
f64fma
, 
VÆ1
, 
VÆ2
, 
VÆ3
)

	)

1063 #i‡
__HAVE_FLOAT32X


1064 
	#f32xadd
(
VÆ1
, 
VÆ2
Ë
	`__TGMATH_2_NARROW_F32X
 (
f32xadd
, VÆ1, VÆ2)

	)

1065 
	#f32xdiv
(
VÆ1
, 
VÆ2
Ë
	`__TGMATH_2_NARROW_F32X
 (
f32xdiv
, VÆ1, VÆ2)

	)

1066 
	#f32xmul
(
VÆ1
, 
VÆ2
Ë
	`__TGMATH_2_NARROW_F32X
 (
f32xmul
, VÆ1, VÆ2)

	)

1067 
	#f32xsub
(
VÆ1
, 
VÆ2
Ë
	`__TGMATH_2_NARROW_F32X
 (
f32xsub
, VÆ1, VÆ2)

	)

1068 
	#f32xsqπ
(
VÆ
Ë
	`__TGMATH_1_NARROW_F32X
 (
f32xsqπ
, VÆ)

	)

1069 
	#f32xfma
(
VÆ1
, 
VÆ2
, 
VÆ3
) \

1070 
	`__TGMATH_3_NARROW_F32X
 (
f32xfma
, 
VÆ1
, 
VÆ2
, 
VÆ3
)

	)

1073 #i‡
__HAVE_FLOAT64X
 && (
__HAVE_FLOAT128X
 || 
__HAVE_FLOAT128
)

1074 
	#f64xadd
(
VÆ1
, 
VÆ2
Ë
	`__TGMATH_2_NARROW_F64X
 (
f64xadd
, VÆ1, VÆ2)

	)

1075 
	#f64xdiv
(
VÆ1
, 
VÆ2
Ë
	`__TGMATH_2_NARROW_F64X
 (
f64xdiv
, VÆ1, VÆ2)

	)

1076 
	#f64xmul
(
VÆ1
, 
VÆ2
Ë
	`__TGMATH_2_NARROW_F64X
 (
f64xmul
, VÆ1, VÆ2)

	)

1077 
	#f64xsub
(
VÆ1
, 
VÆ2
Ë
	`__TGMATH_2_NARROW_F64X
 (
f64xsub
, VÆ1, VÆ2)

	)

1078 
	#f64xsqπ
(
VÆ
Ë
	`__TGMATH_1_NARROW_F64X
 (
f64xsqπ
, VÆ)

	)

1079 
	#f64xfma
(
VÆ1
, 
VÆ2
, 
VÆ3
) \

1080 
	`__TGMATH_3_NARROW_F64X
 (
f64xfma
, 
VÆ1
, 
VÆ2
, 
VÆ3
)

	)

	@/usr/include/thread_db.h

19 #i‚de‡
_THREAD_DB_H


20 
	#_THREAD_DB_H
 1

	)

25 
	~<±hªad.h
>

26 
	~<°döt.h
>

27 
	~<sys/ty≥s.h
>

28 
	~<sys/¥ocfs.h
>

34 
	mTD_OK
,

35 
	mTD_ERR
,

36 
	mTD_NOTHR
,

37 
	mTD_NOSV
,

38 
	mTD_NOLWP
,

39 
	mTD_BADPH
,

40 
	mTD_BADTH
,

41 
	mTD_BADSH
,

42 
	mTD_BADTA
,

43 
	mTD_BADKEY
,

44 
	mTD_NOMSG
,

45 
	mTD_NOFPREGS
,

46 
	mTD_NOLIBTHREAD
,

47 
	mTD_NOEVENT
,

48 
	mTD_NOCAPAB
,

49 
	mTD_DBERR
,

50 
	mTD_NOAPLIC
,

51 
	mTD_NOTSD
,

52 
	mTD_MALLOC
,

53 
	mTD_PARTIALREG
,

54 
	mTD_NOXREGS
,

55 
	mTD_TLSDEFER
,

56 
	mTD_NOTALLOC
 = 
TD_TLSDEFER
,

57 
	mTD_VERSION
,

58 
	mTD_NOTLS


59 } 
	ttd_îr_e
;

66 
	mTD_THR_ANY_STATE
,

67 
	mTD_THR_UNKNOWN
,

68 
	mTD_THR_STOPPED
,

69 
	mTD_THR_RUN
,

70 
	mTD_THR_ACTIVE
,

71 
	mTD_THR_ZOMBIE
,

72 
	mTD_THR_SLEEP
,

73 
	mTD_THR_STOPPED_ASLEEP


74 } 
	ttd_thr_°©e_e
;

80 
	mTD_THR_ANY_TYPE
,

81 
	mTD_THR_USER
,

82 
	mTD_THR_SYSTEM


83 } 
	ttd_thr_ty≥_e
;

89 
td_thøgít
 
	ttd_thøgít_t
;

92 
	std_thrh™dÀ


94 
td_thøgít_t
 *
	mth_è_p
;

95 
pßddr_t
 
	mth_unique
;

96 } 
	ttd_thrh™dÀ_t
;

100 
	glök_m≠
;

104 
	#TD_THR_ANY_USER_FLAGS
 0xffffffff

	)

105 
	#TD_THR_LOWEST_PRIORITY
 -20

	)

106 
	#TD_SIGNO_MASK
 
NULL


	)

109 
	#TD_EVENTSIZE
 2

	)

110 
	#BT_UISHIFT
 5

	)

111 
	#BT_NBIPUI
 (1 << 
BT_UISHIFT
Ë

	)

112 
	#BT_UIMASK
 (
BT_NBIPUI
 - 1Ë

	)

115 
	std_thr_evíts


117 
uöt32_t
 
	mevít_bôs
[
TD_EVENTSIZE
];

118 } 
	ttd_thr_evíts_t
;

121 
	#__td_evítmask
(
n
) \

122 (
	`UINT32_C
 (1Ë<< (((
n
Ë- 1Ë& 
BT_UIMASK
))

	)

123 
	#__td_evítw‹d
(
n
) \

124 ((
	`UINT32_C
 ((
n
Ë- 1)Ë>> 
BT_UISHIFT
)

	)

126 
	#td_evít_em±y£t
(
£ç
) \

128 
__i
; \

129 
__i
 = 
TD_EVENTSIZE
; __i > 0; --__i) \

130 (
£ç
)->
evít_bôs
[
__i
 - 1] = 0; \

131 } 0)

	)

133 
	#td_evít_fûl£t
(
£ç
) \

135 
__i
; \

136 
__i
 = 
TD_EVENTSIZE
; __i > 0; --__i) \

137 (
£ç
)->
evít_bôs
[
__i
 - 1] = 
	`UINT32_C
 (0xffffffff); \

138 } 0)

	)

140 
	#td_evít_add£t
(
£ç
, 
n
) \

141 (((
£ç
)->
evít_bôs
[
	`__td_evítw‹d
 (
n
)]Ë|
	`__td_evítmask
 (n))

	)

142 
	#td_evít_dñ£t
(
£ç
, 
n
) \

143 (((
£ç
)->
evít_bôs
[
	`__td_evítw‹d
 (
n
)]Ë&~
	`__td_evítmask
 (n))

	)

144 
	#td_evítismembî
(
£ç
, 
n
) \

145 (
	`__td_evítmask
 (
n
Ë& ((
£ç
)->
evít_bôs
[
	`__td_evítw‹d
 (n)]))

	)

146 #i‡
TD_EVENTSIZE
 == 2

147 
	#td_evíti£m±y
(
£ç
) \

148 (!((
£ç
)->
evít_bôs
[0]Ë&& !((£ç)->evít_bôs[1]))

	)

156 
	mTD_ALL_EVENTS
,

157 
	mTD_EVENT_NONE
 = 
TD_ALL_EVENTS
,

158 
	mTD_READY
,

159 
	mTD_SLEEP
,

160 
	mTD_SWITCHTO
,

161 
	mTD_SWITCHFROM
,

162 
	mTD_LOCK_TRY
,

163 
	mTD_CATCHSIG
,

164 
	mTD_IDLE
,

165 
	mTD_CREATE
,

166 
	mTD_DEATH
,

167 
	mTD_PREEMPT
,

168 
	mTD_PRI_INHERIT
,

169 
	mTD_REAP
,

170 
	mTD_CONCURRENCY
,

171 
	mTD_TIMEOUT
,

172 
	mTD_MIN_EVENT_NUM
 = 
TD_READY
,

173 
	mTD_MAX_EVENT_NUM
 = 
TD_TIMEOUT
,

174 
	mTD_EVENTS_ENABLE
 = 31

175 } 
	ttd_evít_e
;

180 
	mNOTIFY_BPT
,

181 
	mNOTIFY_AUTOBPT
,

183 
	mNOTIFY_SYSCALL


184 } 
	ttd_nŸify_e
;

187 
	std_nŸify


189 
td_nŸify_e
 
	mty≥
;

192 
pßddr_t
 
	mb±addr
;

193 
	msysˇŒno
;

194 } 
	mu
;

195 } 
	ttd_nŸify_t
;

198 
	std_evít_msg


200 
td_evít_e
 
	mevít
;

201 c⁄° 
td_thrh™dÀ_t
 *
	mth_p
;

205 
td_synch™dÀ_t
 *
	msh
;

207 
uöçå_t
 
	md©a
;

208 } 
	mmsg
;

209 } 
	ttd_evít_msg_t
;

214 
td_thr_evíts_t
 
	mevítmask
;

215 
td_evít_e
 
	mevíäum
;

216 *
	mevítd©a
;

217 } 
	ttd_evítbuf_t
;

221 
	std_è_°©s


223 
	m¡hªads
;

224 
	mr_c⁄cuºícy
;

225 
	mƒu¬abÀ_num
;

226 
	mƒu¬abÀ_dí
;

227 
	ma_c⁄cuºícy_num
;

228 
	ma_c⁄cuºícy_dí
;

229 
	m∆wps_num
;

231 
	m∆wps_dí
;

233 
	mnidÀ_num
;

235 
	mnidÀ_dí
;

237 } 
	ttd_è_°©s_t
;

242 
±hªad_t
 
	tthªad_t
;

243 
±hªad_key_t
 
	tthªad_key_t
;

247 
	ttd_thr_ôî_f
 (c⁄° 
	ttd_thrh™dÀ_t
 *, *);

250 
	ttd_key_ôî_f
 (
	tthªad_key_t
, (*) (*), *);

255 
ps_¥och™dÀ
;

259 
	std_thröfo


261 
td_thøgít_t
 *
ti_è_p
;

262 
ti_u£r_Êags
;

263 
thªad_t
 
ti_tid
;

265 *
ti_és
;

266 
pßddr_t
 
ti_°¨tfunc
;

268 
pßddr_t
 
ti_°kba£
;

269 
ti_°ksize
;

270 
pßddr_t
 
ti_ro_¨ó
;

271 
ti_ro_size
;

272 
td_thr_°©e_e
 
ti_°©e
;

273 
ti_db_su•íded
;

274 
td_thr_ty≥_e
 
ti_ty≥
;

276 
öçå_t
 
ti_pc
;

277 
öçå_t
 
ti_•
;

278 
ti_Êags
;

279 
ti_¥i
;

280 
lwpid_t
 
ti_lid
;

281 
sig£t_t
 
ti_sigmask
;

282 
ti_åa˚me
;

284 
ti_¥ìm±Êag
;

285 
ti_púecÊag
;

286 
sig£t_t
 
ti_≥ndög
;

287 
td_thr_evíts_t
 
ti_evíts
;

288 } 
	ttd_thröfo_t
;

295 
td_îr_e
 
	`td_öô
 ();

298 
td_îr_e
 
	`td_log
 ();

301 c⁄° **
	`td_symbﬁ_li°
 ();

304 
td_îr_e
 
	`td_è_√w
 (
ps_¥och™dÀ
 *
__ps
, 
td_thøgít_t
 **
__è
);

307 
td_îr_e
 
	`td_è_dñëe
 (
td_thøgít_t
 *
__è
);

310 
td_îr_e
 
	`td_è_gë_¡hªads
 (c⁄° 
td_thøgít_t
 *
__è
, *
__≈
);

314 
td_îr_e
 
	`td_è_gë_ph
 (c⁄° 
td_thøgít_t
 *
__è
,

315 
ps_¥och™dÀ
 **
__ph
);

319 
td_îr_e
 
	`td_è_m≠_id2thr
 (c⁄° 
td_thøgít_t
 *
__è
, 
±hªad_t
 
__±
,

320 
td_thrh™dÀ_t
 *
__th
);

324 
td_îr_e
 
	`td_è_m≠_lwp2thr
 (c⁄° 
td_thøgít_t
 *
__è
, 
lwpid_t
 
__lwpid
,

325 
td_thrh™dÀ_t
 *
__th
);

330 
td_îr_e
 
	`td_è_thr_ôî
 (c⁄° 
td_thøgít_t
 *
__è
,

331 
td_thr_ôî_f
 *
__ˇŒback
, *
__cbd©a_p
,

332 
td_thr_°©e_e
 
__°©e
, 
__ti_¥i
,

333 
sig£t_t
 *
__ti_sigmask_p
,

334 
__ti_u£r_Êags
);

337 
td_îr_e
 
	`td_è_tsd_ôî
 (c⁄° 
td_thøgít_t
 *
__è
, 
td_key_ôî_f
 *
__ki
,

338 *
__p
);

342 
td_îr_e
 
	`td_è_evít_addr
 (c⁄° 
td_thøgít_t
 *
__è
,

343 
td_evít_e
 
__evít
, 
td_nŸify_t
 *
__±r
);

346 
td_îr_e
 
	`td_è_£t_evít
 (c⁄° 
td_thøgít_t
 *
__è
,

347 
td_thr_evíts_t
 *
__evít
);

350 
td_îr_e
 
	`td_è_˛ór_evít
 (c⁄° 
td_thøgít_t
 *
__è
,

351 
td_thr_evíts_t
 *
__evít
);

354 
td_îr_e
 
	`td_è_evít_gëmsg
 (c⁄° 
td_thøgít_t
 *
__è
,

355 
td_evít_msg_t
 *
__msg
);

359 
td_îr_e
 
	`td_è_£tc⁄cuºícy
 (c⁄° 
td_thøgít_t
 *
__è
, 
__Àvñ
);

363 
td_îr_e
 
	`td_è_íabÀ_°©s
 (c⁄° 
td_thøgít_t
 *
__è
, 
__íabÀ
);

366 
td_îr_e
 
	`td_è_ª£t_°©s
 (c⁄° 
td_thøgít_t
 *
__è
);

369 
td_îr_e
 
	`td_è_gë_°©s
 (c⁄° 
td_thøgít_t
 *
__è
,

370 
td_è_°©s_t
 *
__°©•
);

374 
td_îr_e
 
	`td_thr_vÆid©e
 (c⁄° 
td_thrh™dÀ_t
 *
__th
);

377 
td_îr_e
 
	`td_thr_gë_öfo
 (c⁄° 
td_thrh™dÀ_t
 *
__th
,

378 
td_thröfo_t
 *
__öf›
);

381 
td_îr_e
 
	`td_thr_gëÂªgs
 (c⁄° 
td_thrh™dÀ_t
 *
__th
,

382 
¥Âªg£t_t
 *
__ªg£t
);

385 
td_îr_e
 
	`td_thr_gëgªgs
 (c⁄° 
td_thrh™dÀ_t
 *
__th
,

386 
¥gªg£t_t
 
__gªgs
);

389 
td_îr_e
 
	`td_thr_gëxªgs
 (c⁄° 
td_thrh™dÀ_t
 *
__th
, *
__xªgs
);

392 
td_îr_e
 
	`td_thr_gëxªgsize
 (c⁄° 
td_thrh™dÀ_t
 *
__th
, *
__sizï
);

395 
td_îr_e
 
	`td_thr_£tÂªgs
 (c⁄° 
td_thrh™dÀ_t
 *
__th
,

396 c⁄° 
¥Âªg£t_t
 *
__Âªgs
);

399 
td_îr_e
 
	`td_thr_£tgªgs
 (c⁄° 
td_thrh™dÀ_t
 *
__th
,

400 
¥gªg£t_t
 
__gªgs
);

403 
td_îr_e
 
	`td_thr_£txªgs
 (c⁄° 
td_thrh™dÀ_t
 *
__th
,

404 c⁄° *
__addr
);

408 
td_îr_e
 
	`td_thr_ésba£
 (c⁄° 
td_thrh™dÀ_t
 *
__th
,

409 
__modid
,

410 
pßddr_t
 *
__ba£
);

413 
td_îr_e
 
	`td_thr_és_gë_addr
 (c⁄° 
td_thrh™dÀ_t
 *
__th
,

414 
pßddr_t
 
__m≠_addªss
, 
size_t
 
__off£t
,

415 
pßddr_t
 *
__addªss
);

419 
td_îr_e
 
	`td_thr_evít_íabÀ
 (c⁄° 
td_thrh™dÀ_t
 *
__th
, 
__evít
);

422 
td_îr_e
 
	`td_thr_£t_evít
 (c⁄° 
td_thrh™dÀ_t
 *
__th
,

423 
td_thr_evíts_t
 *
__evít
);

426 
td_îr_e
 
	`td_thr_˛ór_evít
 (c⁄° 
td_thrh™dÀ_t
 *
__th
,

427 
td_thr_evíts_t
 *
__evít
);

430 
td_îr_e
 
	`td_thr_evít_gëmsg
 (c⁄° 
td_thrh™dÀ_t
 *
__th
,

431 
td_evít_msg_t
 *
__msg
);

435 
td_îr_e
 
	`td_thr_£çrio
 (c⁄° 
td_thrh™dÀ_t
 *
__th
, 
__¥io
);

439 
td_îr_e
 
	`td_thr_£tsig≥ndög
 (c⁄° 
td_thrh™dÀ_t
 *
__th
,

440 
__n
, c⁄° 
sig£t_t
 *
__ss
);

443 
td_îr_e
 
	`td_thr_sig£tmask
 (c⁄° 
td_thrh™dÀ_t
 *
__th
,

444 c⁄° 
sig£t_t
 *
__ss
);

448 
td_îr_e
 
	`td_thr_tsd
 (c⁄° 
td_thrh™dÀ_t
 *
__th
,

449 c⁄° 
thªad_key_t
 
__tk
, **
__d©a
);

453 
td_îr_e
 
	`td_thr_dbsu•íd
 (c⁄° 
td_thrh™dÀ_t
 *
__th
);

456 
td_îr_e
 
	`td_thr_dbªsume
 (c⁄° 
td_thrh™dÀ_t
 *
__th
);

	@/usr/include/threads.h

19 #i‚de‡
_THREADS_H


20 
	#_THREADS_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<time.h
>

25 
	g__BEGIN_DECLS


27 
	~<bôs/thªad-sh¨ed-ty≥s.h
>

28 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

30 #i‚de‡
__˝lu•lus


31 
	#thªad_loˇl
 
_Thªad_loˇl


	)

34 
	#TSS_DTOR_ITERATIONS
 4

	)

35 
__tss_t
 
	ttss_t
;

36 (*
	ttss_dt‹_t
) (*);

38 
__thrd_t
 
	tthrd_t
;

39 (*
	tthrd_°¨t_t
) (*);

44 
thrd_suc˚ss
 = 0,

45 
thrd_busy
 = 1,

46 
thrd_îr‹
 = 2,

47 
thrd_nomem
 = 3,

48 
thrd_timedout
 = 4

54 
mtx_∂aö
 = 0,

55 
mtx_ªcursive
 = 1,

56 
mtx_timed
 = 2

59 
__⁄˚_Êag
 
	t⁄˚_Êag
;

60 
	#ONCE_FLAG_INIT
 
__ONCE_FLAG_INIT


	)

64 
__size
[
__SIZEOF_PTHREAD_MUTEX_T
];

65 
__Æign
 
__LOCK_ALIGNMENT
;

66 } 
	tmtx_t
;

70 
__size
[
__SIZEOF_PTHREAD_COND_T
];

71 
__exãnsi⁄__
 
__Æign
 
__LOCK_ALIGNMENT
;

72 } 
	t˙d_t
;

79 
	`thrd_¸óã
 (
thrd_t
 *
__thr
, 
thrd_°¨t_t
 
__func
, *
__¨g
);

82 
	`thrd_equÆ
 (
thrd_t
 
__lhs
,Åhrd_à
__rhs
);

85 
thrd_t
 
	`thrd_cuºít
 ();

91 #i‚de‡
__USE_TIME_BITS64


92 
	`thrd_¶ìp
 (c⁄° 
time•ec
 *
__time_poöt
,

93 
time•ec
 *
__ªmaöög
);

95 #ifde‡
__REDIRECT


96 
	`__REDIRECT
 (
thrd_¶ìp
, (c⁄° 
time•ec
 *
__time_poöt
,

97 
time•ec
 *
__ªmaöög
),

98 
__thrd_¶ìp64
);

100 
	#thrd_¶ìp
 
__thrd_¶ìp64


	)

106 
	$thrd_exô
 (
__ªs
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

110 
	`thrd_dëach
 (
thrd_t
 
__thr
);

114 
	`thrd_joö
 (
thrd_t
 
__thr
, *
__ªs
);

119 
	`thrd_yõld
 ();

121 #ifde‡
__USE_EXTERN_INLINES


123 
__exã∫_ölöe
 

124 
	$thrd_equÆ
 (
thrd_t
 
__thªad1
,Åhrd_à
__thªad2
)

126  
__thªad1
 =
__thªad2
;

127 
	}
}

135 
mtx_öô
 (
mtx_t
 *
__muãx
, 
__ty≥
);

139 
mtx_lock
 (
mtx_t
 *
__muãx
);

144 #i‚de‡
__USE_TIME_BITS64


145 
mtx_timedlock
 (
mtx_t
 *
__ª°ri˘
 
__muãx
,

146 c⁄° 
time•ec
 *
__ª°ri˘
 
__time_poöt
);

148 #ifde‡
__REDIRECT


149 
__REDIRECT
 (
mtx_timedlock
, (
mtx_t
 *
__ª°ri˘
 
__muãx
,

150 c⁄° 
time•ec
 *
__ª°ri˘


151 
__time_poöt
),

152 
__mtx_timedlock64
);

154 
	#mtx_timedlock
 
__mtx_timedlock64


	)

161 
mtx_åylock
 (
mtx_t
 *
__muãx
);

165 
mtx_u∆ock
 (
mtx_t
 *
__muãx
);

168 
mtx_de°roy
 (
mtx_t
 *
__muãx
);

173 
ˇŒ_⁄˚
 (
⁄˚_Êag
 *
__Êag
, (*
__func
)());

179 
	`˙d_öô
 (
˙d_t
 *
__c⁄d
);

183 
	`˙d_sig«l
 (
˙d_t
 *
__c⁄d
);

187 
	`˙d_brﬂdˇ°
 (
˙d_t
 *
__c⁄d
);

190 
	`˙d_waô
 (
˙d_t
 *
__c⁄d
, 
mtx_t
 *
__muãx
);

195 #i‚de‡
__USE_TIME_BITS64


196 
	`˙d_timedwaô
 (
˙d_t
 *
__ª°ri˘
 
__c⁄d
,

197 
mtx_t
 *
__ª°ri˘
 
__muãx
,

198 c⁄° 
time•ec
 *
__ª°ri˘
 
__time_poöt
);

200 #ifde‡
__REDIRECT


201 
	`__REDIRECT
 (
˙d_timedwaô
, (
˙d_t
 *
__ª°ri˘
 
__c⁄d
,

202 
mtx_t
 *
__ª°ri˘
 
__muãx
,

203 c⁄° 
time•ec
 *
__ª°ri˘


204 
__time_poöt
),

205 
__˙d_timedwaô64
);

207 
	#˙d_timedwaô
 
__˙d_timedwaô64


	)

213 
	`˙d_de°roy
 (
˙d_t
 *
__COND
);

221 
	`tss_¸óã
 (
tss_t
 *
__tss_id
, 
tss_dt‹_t
 
__de°ru˘‹
);

225 *
	`tss_gë
 (
tss_t
 
__tss_id
);

229 
	`tss_£t
 (
tss_t
 
__tss_id
, *
__vÆ
);

233 
	`tss_dñëe
 (
tss_t
 
__tss_id
);

235 
__END_DECLS


	@/usr/include/tic.h

41 #i‚de‡
__TIC_H


42 
	#__TIC_H


	)

44 #ifde‡
__˝lu•lus


48 
	~<ncur£s_cfg.h
>

50 
	~<cur£s.h
>

85 
	#MAGIC
 0432

	)

86 
	#MAGIC2
 01036

	)

88 #unde‡
BYTE


89 
	#BYTE
(
p
,
n
Ë()(’)[n])

	)

91 
	#IS_NEG1
(
p
Ë((
	`BYTE
’,0Ë=0377Ë&& (BYTE’,1Ë=0377))

	)

92 
	#IS_NEG2
(
p
Ë((
	`BYTE
’,0Ë=0376Ë&& (BYTE’,1Ë=0377))

	)

93 
	#LOW_MSB
(
p
Ë(
	`BYTE
’,0Ë+ 256*BYTE’,1))

	)

95 
	#IS_TIC_MAGIC
(
p
Ë(
	`LOW_MSB
’Ë=
MAGIC
 || LOW_MSB’Ë=
MAGIC2
)

	)

97 
	#quick_¥efix
(
s
Ë(!
	`°∫cmp
((s), "b64:", (
size_t
)4Ë|| !°∫cmp((s), "hex:", (size_t)4))

	)

103 
	#MAX_NAME_SIZE
 512

	)

104 
	#MAX_ENTRY_SIZE1
 4096

	)

105 
	#MAX_ENTRY_SIZE2
 32768

	)

107 #i‡
NCURSES_EXT_COLORS
 && 
HAVE_INIT_EXTENDED_COLOR


108 
	#MAX_ENTRY_SIZE
 
MAX_ENTRY_SIZE2


	)

110 
	#MAX_ENTRY_SIZE
 
MAX_ENTRY_SIZE1


	)

119 #i‡
HAVE_LONG_FILE_NAMES


120 
	#MAX_ALIAS
 32

	)

122 
	#MAX_ALIAS
 14

	)

126 
	#PRIVATE_INFO
 "%s/.ãrmöfo"

	)

134 
	#MAX_DEBUG_LEVEL
 15

	)

135 
	#DEBUG_LEVEL
(
n
Ë(“Ë<< 
TRACE_SHIFT
)

	)

137 
	#£t_åa˚_Àvñ
(
n
) \

138 
_nc_åacög
 &
	`DEBUG_LEVEL
(
MAX_DEBUG_LEVEL
) \

139 + 
	`DEBUG_LEVEL
(
MAX_DEBUG_LEVEL
) - 1, \

140 
_nc_åacög
 |
	`DEBUG_LEVEL
(
n
)

	)

142 #ifde‡
TRACE


143 
	#DEBUG
(
n
, 
a
Ëi‡(
_nc_åacög
 >
	`DEBUG_LEVEL
“)Ë
_åa˚f
 
	)
a

145 
	#DEBUG
(
n
, 
a
Ë

	)

155 
	#BOOLEAN
 0

	)

156 
	#NUMBER
 1

	)

157 
	#STRING
 2

	)

158 
	#CANCEL
 3

	)

159 
	#NAMES
 4

	)

160 
	#UNDEF
 5

	)

162 
	#NO_PUSHBACK
 -1

	)

169 
	stokí


171 *
tk_«me
;

172 
tk_vÆnumbî
;

173 *
tk_vÆ°rög
;

179 
	stöfo_fkeys
 {

180 
off£t
;

181 
chty≥
 
code
;

184 
	tHashVÆue
;

191 
	s«me_èbÀ_íåy


193 c⁄° *
¡e_«me
;

194 
¡e_ty≥
;

195 
HashVÆue
 
¡e_ödex
;

196 
HashVÆue
 
¡e_lök
;

203 
èbÀ_size
;

204 c⁄° 
HashVÆue
 *
èbÀ_d©a
;

205 
HashVÆue
 (*
hash_of
)(const *);

206 (*
com∑ª_«mes
)(const *, const *);

207 } 
	tHashD©a
;

209 
	sÆüs


211 c⁄° *
‰om
;

212 c⁄° *
to
;

213 c⁄° *
sour˚
;

216 
	#NOTFOUND
 ((
«me_èbÀ_íåy
 *Ë0)

	)

223 
	su£r_èbÀ_íåy


225 c⁄° *
uã_«me
;

226 
uã_ty≥
;

227 
uã_¨gc
;

228 
uã_¨gs
;

229 
HashVÆue
 
uã_ödex
;

230 
HashVÆue
 
uã_lök
;

240 
	#ABSENT_BOOLEAN
 ((sig√d )-1Ë

	)

241 
	#ABSENT_NUMERIC
 (-1)

	)

242 
	#ABSENT_STRING
 (*)0

	)

245 
	#CANCELLED_BOOLEAN
 ((sig√d )-2Ë

	)

246 
	#CANCELLED_NUMERIC
 (-2)

	)

247 
	#CANCELLED_STRING
 (*)(-1)

	)

249 
	#VALID_BOOLEAN
(
s
Ë(()(sË<1Ë

	)

250 
	#VALID_NUMERIC
(
s
Ë((sË>0)

	)

251 
	#VALID_STRING
(
s
Ë((sË!
CANCELLED_STRING
 && (sË!
ABSENT_STRING
)

	)

254 
	#MAX_TERMCAP_LENGTH
 1023

	)

257 
	#MAX_TERMINFO_LENGTH
 4096

	)

259 #i‚de‡
TERMINFO


260 
	#TERMINFO
 "/u§/sh¨e/ãrmöfo"

	)

263 #ifde‡
NCURSES_TERM_ENTRY_H_ö˛


268 #ifde‡
NCURSES_INTERNALS


270 
NCURSES_EXPORT
(Ë
_nc_∑thœ°
 (const *);

271 
NCURSES_EXPORT
(
boﬁ
Ë
_nc_is_abs_∑th
 (const *);

272 
NCURSES_EXPORT
(
boﬁ
Ë
_nc_is_dú_∑th
 (const *);

273 
NCURSES_EXPORT
(
boﬁ
Ë
_nc_is_fûe_∑th
 (const *);

274 
NCURSES_EXPORT
(*Ë
_nc_ba£«me
 (*);

275 
NCURSES_EXPORT
(*Ë
_nc_roŸ«me
 (*);

278 
NCURSES_EXPORT
(c⁄° 
«me_èbÀ_íåy
 *Ë
_nc_gë_èbÀ
 (
boﬁ
);

279 
NCURSES_EXPORT
(c⁄° 
HashD©a
 *Ë
_nc_gë_hash_öfo
 (
boﬁ
);

280 
NCURSES_EXPORT
(c⁄° 
Æüs
 *Ë
_nc_gë_Æüs_èbÀ
 (
boﬁ
);

283 
NCURSES_EXPORT
(
«me_èbÀ_íåy
 c⁄° *Ë
_nc_föd_ty≥_íåy


284 (c⁄° *, , 
boﬁ
);

285 
NCURSES_EXPORT
(
u£r_èbÀ_íåy
 c⁄° *Ë
_nc_föd_u£r_íåy


289 
NCURSES_EXPORT
(Ë
_nc_gë_tokí
 (
boﬁ
);

290 
NCURSES_EXPORT
(Ë
_nc_∑nic_mode
 ();

291 
NCURSES_EXPORT
(Ë
_nc_push_tokí
 ();

292 
NCURSES_EXPORT_VAR
(Ë
_nc_cuº_cﬁ
;

293 
NCURSES_EXPORT_VAR
(Ë
_nc_cuº_löe
;

294 
NCURSES_EXPORT_VAR
(Ë
_nc_sy¡ax
;

295 
NCURSES_EXPORT_VAR
(Ë
_nc_°ri˘_bsd
;

296 
NCURSES_EXPORT_VAR
(Ë
_nc_commít_íd
;

297 
NCURSES_EXPORT_VAR
(Ë
_nc_commít_°¨t
;

298 
NCURSES_EXPORT_VAR
(Ë
_nc_cuº_fûe_pos
;

299 
NCURSES_EXPORT_VAR
(Ë
_nc_°¨t_löe
;

300 
	#SYN_TERMINFO
 0

	)

301 
	#SYN_TERMCAP
 1

	)

304 
NCURSES_EXPORT
(c⁄° *Ë
_nc_gë_sour˚
 ();

305 
GCC_NORETURN
 
NCURSES_EXPORT
(Ë
_nc_îr_ab‹t
 (c⁄° *c⁄°,...Ë
GCC_PRINTFLIKE
(1,2);

306 
NCURSES_EXPORT
(Ë
_nc_gë_ty≥
 (*
«me
);

307 
NCURSES_EXPORT
(Ë
_nc_£t_sour˚
 (const *const);

308 
NCURSES_EXPORT
(Ë
_nc_£t_ty≥
 (const *const);

309 
GCC_NORETURN
 
NCURSES_EXPORT
(Ë
_nc_sy£º_ab‹t
 (c⁄° *c⁄°,...Ë
GCC_PRINTFLIKE
(1,2);

310 
NCURSES_EXPORT
(Ë
_nc_w¨nög
 (c⁄° *c⁄°,...Ë
GCC_PRINTFLIKE
(1,2);

311 
NCURSES_EXPORT_VAR
(
boﬁ
Ë
_nc_suµªss_w¨nögs
;

314 
NCURSES_EXPORT_VAR
(
tokí
Ë
_nc_cuº_tokí
;

317 
NCURSES_EXPORT
(c⁄° 
u£r_èbÀ_íåy
 *Ë
_nc_gë_u£rdefs_èbÀ
 ();

318 
NCURSES_EXPORT
(c⁄° 
HashD©a
 *Ë
_nc_gë_hash_u£r
 ();

321 
NCURSES_EXPORT
(*Ë
_nc_ˇ±oöfo
 (const *, const *, const);

322 
NCURSES_EXPORT
(*Ë
_nc_öfŸoˇp
 (const *, const *, const);

325 
NCURSES_EXPORT
(*Ë
_nc_home_ãrmöfo
 ();

328 #if 
BROKEN_LINKER


329 
	#_nc_töfo_fkeys
 
	`_nc_töfo_fkeysf
()

	)

330 
NCURSES_EXPORT
(c⁄° 
töfo_fkeys
 *Ë
_nc_töfo_fkeysf
 ();

332 
NCURSES_EXPORT_VAR
(c⁄° 
töfo_fkeys
Ë
_nc_töfo_fkeys
[];

336 
	#NUM_PARM
 9

	)

338 
NCURSES_EXPORT_VAR
(Ë
_nc_ç¨m_îr
;

340 
NCURSES_EXPORT
(Ë
_nc_ç¨m_™Æyze
(
TERMINAL
 *, const *, **, *);

341 
NCURSES_EXPORT
(Ë
_nc_ª£t_ç¨m
(
TERMINAL
 *);

344 
NCURSES_EXPORT_VAR
(Ë
_nc_åacög
;

345 
NCURSES_EXPORT
(c⁄° *Ë
_nc_visbuf
 (const *);

346 
NCURSES_EXPORT
(c⁄° *Ë
_nc_visbuf2
 (, const *);

349 
NCURSES_EXPORT_VAR
(Ë
_nc_nuŒs_£¡
;

352 c⁄° * 
_nc_¥og«me
;

355 
NCURSES_EXPORT
(c⁄° *Ë
_nc_√xt_db
(
DBDIRS
 *, *);

356 
NCURSES_EXPORT
(c⁄° *Ë
_nc_tic_dú
 (const *);

357 
NCURSES_EXPORT
(Ë
_nc_fú°_db
(
DBDIRS
 *, *);

358 
NCURSES_EXPORT
(Ë
_nc_œ°_db
();

361 
NCURSES_EXPORT
(Ë
_nc_tic_wrôãn
 ();

369 #unde‡
NCURSES_TACK_1_08


370 #ifde‡ 
NCURSES_INTERNALS


371 
	#NCURSES_TACK_1_08


	)

373 
	#NCURSES_TACK_1_08
 
	`GCC_DEPRECATED
("upgødêtÿèck 1.08")

	)

377 
NCURSES_EXPORT
(
«me_èbÀ_íåy
 c⁄° *Ë
_nc_föd_íåy


378 (c⁄° *, c⁄° 
HashVÆue
 *Ë
NCURSES_TACK_1_08
;

379 
NCURSES_EXPORT
(c⁄° 
HashVÆue
 *Ë
_nc_gë_hash_èbÀ
 (
boﬁ
Ë
NCURSES_TACK_1_08
;

382 
NCURSES_EXPORT
(Ë
_nc_ª£t_öput
 (
FILE
 *, *Ë
NCURSES_TACK_1_08
;

385 
NCURSES_EXPORT
(*Ë
_nc_tic_ex∑nd
 (c⁄° *, 
boﬁ
, Ë
NCURSES_TACK_1_08
;

388 
NCURSES_EXPORT
(Ë
_nc_å™s_°rög
 (*, *Ë
NCURSES_TACK_1_08
;

392 #ifde‡
__˝lu•lus


	@/usr/include/time.h

22 #i‚def 
_TIME_H


23 
	#_TIME_H
 1

	)

25 
	~<„©uªs.h
>

27 
	#__√ed_size_t


	)

28 
	#__√ed_NULL


	)

29 
	~<°ddef.h
>

33 
	~<bôs/time.h
>

37 
	~<bôs/ty≥s/˛ock_t.h
>

38 
	~<bôs/ty≥s/time_t.h
>

39 
	~<bôs/ty≥s/°ru˘_tm.h
>

41 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_ISOC11


42 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

45 #ifde‡
__USE_POSIX199309


46 
	~<bôs/ty≥s/˛ockid_t.h
>

47 
	~<bôs/ty≥s/timî_t.h
>

48 
	~<bôs/ty≥s/°ru˘_ôimî•ec.h
>

49 
	gsigevít
;

52 #ifde‡
__USE_XOPEN2K


53 #i‚de‡
__pid_t_deföed


54 
__pid_t
 
	tpid_t
;

55 
	#__pid_t_deföed


	)

59 #ifde‡
__USE_XOPEN2K8


60 
	~<bôs/ty≥s/loˇÀ_t.h
>

63 #ifde‡
__USE_ISOC11


65 
	#TIME_UTC
 1

	)

68 
__BEGIN_DECLS


72 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

74 #i‚de‡
__USE_TIME_BITS64


76 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

79 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

80 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

83 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

85 #ifde‡
__REDIRECT_NTH


86 
time_t
 
	`__REDIRECT_NTH
 (
time
, (time_à*
__timî
), 
__time64
);

87 
	`__REDIRECT_NTH
 (
dif·ime
, (
time_t
 
__time1
,Åime_à
__time0
),

88 
__dif·ime64
Ë
	`__©åibuã__
 ((
__c⁄°__
));

89 
time_t
 
	`__REDIRECT_NTH
 (
mktime
, (
tm
 *
__ç
), 
__mktime64
);

91 
	#time
 
__time64


	)

92 
	#dif·ime
 
__dif·ime64


	)

93 
	#mktime
 
__mktime64


	)

100 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

101 c⁄° *
__ª°ri˘
 
__f‹m©
,

102 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

104 #ifde‡
__USE_XOPEN


107 *
	$°Ωtime
 (c⁄° *
__ª°ri˘
 
__s
,

108 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

109 
__THROW
;

112 #ifde‡
__USE_XOPEN2K8


116 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

117 c⁄° *
__ª°ri˘
 
__f‹m©
,

118 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

119 
loˇÀ_t
 
__loc
Ë
__THROW
;

122 #ifde‡
__USE_GNU


123 *
	$°Ωtime_l
 (c⁄° *
__ª°ri˘
 
__s
,

124 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

125 
loˇÀ_t
 
__loc
Ë
__THROW
;

129 #i‚de‡
__USE_TIME_BITS64


132 
tm
 *
	$gmtime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

136 
tm
 *
	$loˇ…ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

139 #ifde‡
__REDIRECT_NTH


140 
tm
*
	`__REDIRECT_NTH
 (
gmtime
, (c⁄° 
time_t
 *
__timî
), 
__gmtime64
);

141 
tm
 *
	`__REDIRECT_NTH
 (
loˇ…ime
, (c⁄° 
time_t
 *
__timî
),

142 
__loˇ…ime64
);

144 
	#gmtime
 
__gmtime64


	)

145 
	#loˇ…ime
 
__loˇ…ime64


	)

150 #i‡
deföed
 
__USE_POSIX
 || 
	`__GLIBC_USE
 (
ISOC2X
)

151 #i‚de‡
__USE_TIME_BITS64


154 
tm
 *
	$gmtime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

155 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

159 
tm
 *
	$loˇ…ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

160 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

162 #ifde‡
__REDIRECT_NTH


163 
tm
*
	`__REDIRECT_NTH
 (
gmtime_r
, (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

164 
tm
 *
__ª°ri˘
 
__ç
),

165 
__gmtime64_r
);

167 
tm
*
	`__REDIRECT_NTH
 (
loˇ…ime_r
, (c⁄° 
time_t
 *
__ª°ri˘
 
__t
,

168 
tm
 *
__ª°ri˘
 
__ç
),

169 
__loˇ…ime64_r
);

171 
	#gmtime_r
 
__gmtime64_r


	)

172 
	#loˇ…ime_r
 
__loˇ…ime_r


	)

179 *
	$as˘ime
 (c⁄° 
tm
 *
__ç
Ë
__THROW
;

182 #i‚de‡
__USE_TIME_BITS64


183 *
	$˘ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

185 #ifde‡
__REDIRECT_NTH


186 *
	`__REDIRECT_NTH
 (
˘ime
, (c⁄° 
time_t
 *
__timî
), 
__˘ime64
);

188 
	#˘ime
 
__˘ime64


	)

192 #ifde‡
__USE_POSIX


197 *
	$as˘ime_r
 (c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

198 *
__ª°ri˘
 
__buf
Ë
__THROW
;

201 #i‚de‡
__USE_TIME_BITS64


202 *
	$˘ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

203 *
__ª°ri˘
 
__buf
Ë
__THROW
;

205 #ifde‡
__REDIRECT_NTH


206 *
	`__REDIRECT_NTH
 (
˘ime_r
, (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

207 *
__ª°ri˘
 
__buf
), 
__˘ime64_r
);

209 
	#˘ime_r
 
__˘ime64_r


	)

217 *
__tz«me
[2];

218 
__daylight
;

219 
__timez⁄e
;

222 #ifdef 
__USE_POSIX


224 *
tz«me
[2];

228 
	$tz£t
 (Ë
__THROW
;

231 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


232 
daylight
;

233 
timez⁄e
;

239 
	#__i¶óp
(
yór
) \

240 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

243 #ifde‡
__USE_MISC


247 #i‚de‡
__USE_TIME_BITS64


249 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

251 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

253 #ifde‡
__REDIRECT_NTH


254 
time_t
 
	`__REDIRECT_NTH
 (
timegm
, (
tm
 *
__ç
), 
__timegm64
);

255 
time_t
 
	`__REDIRECT_NTH
 (
timñoˇl
, (
tm
 *
__ç
), 
__mktime64
);

257 
	#timegm
 
__timegm64


	)

262 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

266 #ifde‡
__USE_POSIX199309


267 #i‚de‡
__USE_TIME_BITS64


272 
	`«no¶ìp
 (c⁄° 
time•ec
 *
__ªque°ed_time
,

273 
time•ec
 *
__ªmaöög
);

276 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

279 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

282 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, c⁄° 
time•ec
 *
__ç
)

283 
__THROW
;

285 #ifde‡
__REDIRECT


286 
	`__REDIRECT
 (
«no¶ìp
, (c⁄° 
time•ec
 *
__ªque°ed_time
,

287 
time•ec
 *
__ªmaöög
),

288 
__«no¶ìp64
);

289 
	`__REDIRECT_NTH
 (
˛ock_gëªs
, (
˛ockid_t
 
__˛ock_id
,

290 
time•ec
 *
__ªs
),

291 
__˛ock_gëªs64
);

292 
	`__REDIRECT_NTH
 (
˛ock_gëtime
, (
˛ockid_t
 
__˛ock_id
, 

293 
time•ec
 *
__ç
), 
__˛ock_gëtime64
);

294 
	`__REDIRECT_NTH
 (
˛ock_£âime
, (
˛ockid_t
 
__˛ock_id
, const 

295 
time•ec
 *
__ç
), 
__˛ock_£âime64
);

297 
	#«no¶ìp
 
__«no¶ìp64


	)

298 
	#˛ock_gëªs
 
__˛ock_gëªs64


	)

299 
	#˛ock_gëtime
 
__˛ock_gëtime64


	)

300 
	#˛ock_£âime
 
__˛ock_£âime64


	)

305 #ifde‡
__USE_XOPEN2K


310 #i‚de‡
__USE_TIME_BITS64


311 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

312 c⁄° 
time•ec
 *
__ªq
,

313 
time•ec
 *
__ªm
);

315 #ifde‡
__REDIRECT


316 
	`__REDIRECT
 (
˛ock_«no¶ìp
, (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

317 c⁄° 
time•ec
 *
__ªq
,

318 
time•ec
 *
__ªm
),

319 
__˛ock_«no¶ìp_time64
);

321 
	#˛ock_«no¶ìp
 
__˛ock_«no¶ìp_time64


	)

326 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

331 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

332 
sigevít
 *
__ª°ri˘
 
__evp
,

333 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

336 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

339 #i‚de‡
__USE_TIME_BITS64


340 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

341 c⁄° 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

342 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

345 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

346 
__THROW
;

348 #ifde‡
__REDIRECT_NTH


349 
	`__REDIRECT_NTH
 (
timî_£âime
, (
timî_t
 
__timîid
, 
__Êags
,

350 c⁄° 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

351 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
),

352 
__timî_£âime64
);

354 
	`__REDIRECT_NTH
 (
timî_gëtime
, (
timî_t
 
__timîid
,

355 
ôimî•ec
 *
__vÆue
),

356 
__timî_gëtime64
);

358 
	#timî_£âime
 
__timî_£âime64


	)

359 
	#timî_gëtime
 
__timî_gëtime64


	)

364 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

368 #ifde‡
__USE_ISOC11


369 #i‚de‡
__USE_TIME_BITS64


371 
	$time•ec_gë
 (
time•ec
 *
__ts
, 
__ba£
)

372 
__THROW
 
	`__n⁄nuŒ
 ((1));

374 #ifde‡
__REDIRECT_NTH


375 
	`__REDIRECT_NTH
 (
time•ec_gë
, (
time•ec
 *
__ts
, 
__ba£
),

376 
__time•ec_gë64
Ë
	`__n⁄nuŒ
 ((1));

378 
	#time•ec_gë
 
__time•ec_gë64


	)

384 #i‡
	`__GLIBC_USE
 (
ISOC2X
)

385 #i‚de‡
__USE_TIME_BITS64


387 
	$time•ec_gëªs
 (
time•ec
 *
__ts
, 
__ba£
)

388 
__THROW
;

390 #ifde‡
__REDIRECT_NTH


391 
	`__REDIRECT_NTH
 (
time•ec_gëªs
, (
time•ec
 *
__ts
,

392 
__ba£
),

393 
__time•ec_gëªs64
);

395 
	#time•ec_gëªs
 
__time•ec_gëªs64


	)

401 #ifde‡
__USE_XOPEN_EXTENDED


413 
gëd©e_îr
;

422 
tm
 *
	`gëd©e
 (c⁄° *
__°rög
);

425 #ifde‡
__USE_GNU


436 
	`gëd©e_r
 (c⁄° *
__ª°ri˘
 
__°rög
,

437 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

440 
__END_DECLS


	@/usr/include/ttyent.h

32 #i‚def 
_TTYENT_H


33 
	#_TTYENT_H
 1

	)

35 
	~<„©uªs.h
>

37 
	#_PATH_TTYS
 "/ëc/âys"

	)

39 
	#_TTYS_OFF
 "off"

	)

40 
	#_TTYS_ON
 "⁄"

	)

41 
	#_TTYS_SECURE
 "£cuª"

	)

42 
	#_TTYS_WINDOW
 "wödow"

	)

44 
	sâyít
 {

45 *
	mty_«me
;

46 *
	mty_gëty
;

47 *
	mty_ty≥
;

48 
	#TTY_ON
 0x01

	)

49 
	#TTY_SECURE
 0x02

	)

50 
	mty_°©us
;

51 *
	mty_wödow
;

52 *
	mty_commít
;

56 
__BEGIN_DECLS


58 
âyít
 *
	$gëâyít
 (Ë
__THROW
;

59 
âyít
 *
	$gëây«m
 (c⁄° *
__ây
Ë
__THROW
;

60 
	$£âtyít
 (Ë
__THROW
;

61 
	$ídâyít
 (Ë
__THROW
;

63 
__END_DECLS


	@/usr/include/uchar.h

23 #i‚de‡
_UCHAR_H


24 
	#_UCHAR_H
 1

	)

26 
	~<„©uªs.h
>

28 
	#__√ed_size_t


	)

29 
	~<°ddef.h
>

31 
	~<bôs/ty≥s.h
>

32 
	~<bôs/ty≥s/mb°©e_t.h
>

34 #i‚de‡
__USE_ISOCXX11


36 
__uöt_Àa°16_t
 
	tch¨16_t
;

37 
__uöt_Àa°32_t
 
	tch¨32_t
;

41 
__BEGIN_DECLS


45 
size_t
 
	$mbπoc16
 (
ch¨16_t
 *
__ª°ri˘
 
__pc16
,

46 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

47 
mb°©e_t
 *
__ª°ri˘
 
__p
Ë
__THROW
;

50 
size_t
 
	$c16πomb
 (*
__ª°ri˘
 
__s
, 
ch¨16_t
 
__c16
,

51 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

57 
size_t
 
	$mbπoc32
 (
ch¨32_t
 *
__ª°ri˘
 
__pc32
,

58 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

59 
mb°©e_t
 *
__ª°ri˘
 
__p
Ë
__THROW
;

62 
size_t
 
	$c32πomb
 (*
__ª°ri˘
 
__s
, 
ch¨32_t
 
__c32
,

63 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

65 
__END_DECLS


	@/usr/include/ucontext.h

20 #i‚de‡
_UCONTEXT_H


21 
	#_UCONTEXT_H
 1

	)

23 
	~<„©uªs.h
>

26 
	~<bôs/ödúe˘-ªtu∫.h
>

29 
	~<sys/uc⁄ãxt.h
>

31 
__BEGIN_DECLS


34 
	$gëc⁄ãxt
 (
uc⁄ãxt_t
 *
__u˝
Ë
__THROWNL
;

37 
	$£tc⁄ãxt
 (c⁄° 
uc⁄ãxt_t
 *
__u˝
Ë
__THROWNL
;

41 
	$sw≠c⁄ãxt
 (
uc⁄ãxt_t
 *
__ª°ri˘
 
__ou˝
,

42 c⁄° 
uc⁄ãxt_t
 *
__ª°ri˘
 
__u˝
)

43 
__THROWNL
 
__INDIRECT_RETURN
;

51 
	$makec⁄ãxt
 (
uc⁄ãxt_t
 *
__u˝
, (*
__func
) (),

52 
__¨gc
, ...Ë
__THROW
;

54 
__END_DECLS


	@/usr/include/ulimit.h

18 #i‚de‡
_ULIMIT_H


19 
	#_ULIMIT_H
 1

	)

21 
	~<„©uªs.h
>

27 
	mUL_GETFSIZE
 = 1,

29 
	#UL_GETFSIZE
 
UL_GETFSIZE


	)

30 
	mUL_SETFSIZE
,

32 
	#UL_SETFSIZE
 
UL_SETFSIZE


	)

33 
	m__UL_GETMAXBRK
,

35 
	m__UL_GETOPENMAX


40 
__BEGIN_DECLS


43 
	$ulimô
 (
__cmd
, ...Ë
__THROW
;

45 
__END_DECLS


	@/usr/include/unctrl.h

45 #i‚de‡
NCURSES_UNCTRL_H_ö˛


46 
	#NCURSES_UNCTRL_H_ö˛
 1

	)

48 #unde‡
NCURSES_VERSION


49 
	#NCURSES_VERSION
 "6.3"

	)

51 #ifde‡
__˝lu•lus


55 
	~<cur£s.h
>

57 #unde‡
un˘æ


58 
NCURSES_EXPORT
(
NCURSES_CONST
 *Ë
un˘æ
 (
chty≥
);

61 
NCURSES_EXPORT
(
NCURSES_CONST
 *Ë
NCURSES_SP_NAME
(
un˘æ
Ë(
SCREEN
*, 
chty≥
);

64 #ifde‡
__˝lu•lus


	@/usr/include/unistd.h

22 #i‚def 
_UNISTD_H


23 
	#_UNISTD_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


32 #ifde‡
__USE_XOPEN2K8


34 
	#_POSIX_VERSION
 200809L

	)

35 #ñi‡
deföed
 
__USE_XOPEN2K


37 
	#_POSIX_VERSION
 200112L

	)

38 #ñi‡
deföed
 
__USE_POSIX199506


40 
	#_POSIX_VERSION
 199506L

	)

41 #ñi‡
deföed
 
__USE_POSIX199309


43 
	#_POSIX_VERSION
 199309L

	)

46 
	#_POSIX_VERSION
 199009L

	)

52 #ifde‡
__USE_XOPEN2K8


53 
	#__POSIX2_THIS_VERSION
 200809L

	)

55 #ñi‡
deföed
 
__USE_XOPEN2K


57 
	#__POSIX2_THIS_VERSION
 200112L

	)

58 #ñi‡
deföed
 
__USE_POSIX199506


60 
	#__POSIX2_THIS_VERSION
 199506L

	)

63 
	#__POSIX2_THIS_VERSION
 199209L

	)

67 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

70 
	#_POSIX2_C_VERSION
 
__POSIX2_THIS_VERSION


	)

74 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

78 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

82 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

86 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

89 #ifde‡
__USE_XOPEN2K8


90 
	#_XOPEN_VERSION
 700

	)

91 #ñi‡
deföed
 
__USE_XOPEN2K


92 
	#_XOPEN_VERSION
 600

	)

93 #ñi‡
deföed
 
__USE_UNIX98


94 
	#_XOPEN_VERSION
 500

	)

96 
	#_XOPEN_VERSION
 4

	)

100 
	#_XOPEN_XCU_VERSION
 4

	)

103 
	#_XOPEN_XPG2
 1

	)

104 
	#_XOPEN_XPG3
 1

	)

105 
	#_XOPEN_XPG4
 1

	)

108 
	#_XOPEN_UNIX
 1

	)

112 
	#_XOPEN_ENH_I18N
 1

	)

115 
	#_XOPEN_LEGACY
 1

	)

202 
	~<bôs/posix_›t.h
>

205 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


206 
	~<bôs/ívú⁄míts.h
>

210 
	#STDIN_FILENO
 0

	)

211 
	#STDOUT_FILENO
 1

	)

212 
	#STDERR_FILENO
 2

	)

217 
	~<bôs/ty≥s.h
>

219 #i‚def 
__ssize_t_deföed


220 
__ssize_t
 
	tssize_t
;

221 
	#__ssize_t_deföed


	)

224 
	#__√ed_size_t


	)

225 
	#__√ed_NULL


	)

226 
	~<°ddef.h
>

228 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


231 #i‚de‡
__gid_t_deföed


232 
__gid_t
 
	tgid_t
;

233 
	#__gid_t_deföed


	)

236 #i‚de‡
__uid_t_deföed


237 
__uid_t
 
	tuid_t
;

238 
	#__uid_t_deföed


	)

241 #i‚de‡
__off_t_deföed


242 #i‚de‡
__USE_FILE_OFFSET64


243 
__off_t
 
	toff_t
;

245 
__off64_t
 
	toff_t
;

247 
	#__off_t_deföed


	)

249 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


250 
__off64_t
 
	toff64_t
;

251 
	#__off64_t_deföed


	)

254 #i‚de‡
__u£c⁄ds_t_deföed


255 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

256 
	#__u£c⁄ds_t_deföed


	)

259 #i‚de‡
__pid_t_deföed


260 
__pid_t
 
	tpid_t
;

261 
	#__pid_t_deföed


	)

265 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


266 #i‚de‡
__öçå_t_deföed


267 
__öçå_t
 
	töçå_t
;

268 
	#__öçå_t_deföed


	)

272 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


273 #i‚de‡
__sockÀn_t_deföed


274 
__sockÀn_t
 
	tsockÀn_t
;

275 
	#__sockÀn_t_deföed


	)

281 
	#R_OK
 4

	)

282 
	#W_OK
 2

	)

283 
	#X_OK
 1

	)

284 
	#F_OK
 0

	)

287 
	$ac˚ss
 (c⁄° *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

289 #ifde‡
__USE_GNU


292 
	$euidac˚ss
 (c⁄° *
__«me
, 
__ty≥
)

293 
__THROW
 
	`__n⁄nuŒ
 ((1));

296 
	$óc˚ss
 (c⁄° *
__«me
, 
__ty≥
)

297 
__THROW
 
	`__n⁄nuŒ
 ((1));

300 
	$execvót
 (
__fd
, c⁄° *
__∑th
, *c⁄° 
__¨gv
[],

301 *c⁄° 
__ívp
[], 
__Êags
)

302 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

305 #ifde‡
__USE_ATFILE


309 
	$Ác˚sßt
 (
__fd
, c⁄° *
__fûe
, 
__ty≥
, 
__Êag
)

310 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

315 #i‚def 
_STDIO_H


316 
	#SEEK_SET
 0

	)

317 
	#SEEK_CUR
 1

	)

318 
	#SEEK_END
 2

	)

319 #ifde‡
__USE_GNU


320 
	#SEEK_DATA
 3

	)

321 
	#SEEK_HOLE
 4

	)

325 #i‡
deföed
 
__USE_MISC
 && !deföed 
L_SET


327 
	#L_SET
 
SEEK_SET


	)

328 
	#L_INCR
 
SEEK_CUR


	)

329 
	#L_XTND
 
SEEK_END


	)

338 #i‚de‡
__USE_FILE_OFFSET64


339 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

341 #ifde‡
__REDIRECT_NTH


342 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

343 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

344 
l£ek64
);

346 
	#l£ek
 
l£ek64


	)

349 #ifde‡
__USE_LARGEFILE64


350 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

351 
__THROW
;

358 
	`˛o£
 (
__fd
);

360 #ifde‡
__USE_MISC


363 
	$˛o£‰om
 (
__lowfd
Ë
__THROW
;

371 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur


372 
	`__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 2, 3);

378 
ssize_t
 
	$wrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
Ë
__wur


379 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 2, 3));

381 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


382 #i‚de‡
__USE_FILE_OFFSET64


389 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

390 
__off_t
 
__off£t
Ë
__wur


391 
	`__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 2, 3);

398 
ssize_t
 
	$pwrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

399 
__off_t
 
__off£t
Ë
__wur


400 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 2, 3));

403 #ifde‡
__REDIRECT


404 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

405 
__off64_t
 
__off£t
),

406 
¥ód64
Ë
__wur


407 
	`__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 2, 3);

408 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, c⁄° *
__buf
,

409 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

410 
pwrôe64
Ë
__wur


411 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 2, 3));

413 
	#¥ód
 
¥ód64


	)

414 
	#pwrôe
 
pwrôe64


	)

418 #ifde‡
__USE_LARGEFILE64


422 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

423 
__off64_t
 
__off£t
Ë
__wur


424 
	`__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 2, 3);

427 
ssize_t
 
	$pwrôe64
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

428 
__off64_t
 
__off£t
Ë
__wur


429 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 2, 3));

437 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

439 #ifde‡
__USE_GNU


442 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

452 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

464 
	`¶ìp
 (
__£c⁄ds
);

466 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

467 || 
deföed
 
__USE_MISC


472 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

473 
__THROW
;

480 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

489 
	`∑u£
 ();

493 
	$chown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

494 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

496 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


498 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

503 
	$lchown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

504 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

508 #ifde‡
__USE_ATFILE


511 
	$fchow«t
 (
__fd
, c⁄° *
__fûe
, 
__uid_t
 
__ow√r
,

512 
__gid_t
 
__group
, 
__Êag
)

513 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

517 
	$chdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

519 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


521 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

531 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

533 #ifdef 
__USE_GNU


537 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

540 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

541 || 
deföed
 
__USE_MISC


545 *
	$gëwd
 (*
__buf
)

546 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur


547 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1));

552 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

555 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

557 #ifde‡
__USE_GNU


560 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

564 **
__ívú⁄
;

565 #ifde‡
__USE_GNU


566 **
ívú⁄
;

572 
	$execve
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[],

573 *c⁄° 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

575 #ifde‡
__USE_XOPEN2K8


578 
	$„xecve
 (
__fd
, *c⁄° 
__¨gv
[], *c⁄° 
__ívp
[])

579 
__THROW
 
	`__n⁄nuŒ
 ((2));

584 
	$execv
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[])

585 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

589 
	$exe˛e
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

590 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

594 
	$exe˛
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

595 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

599 
	$execvp
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[])

600 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

605 
	$exe˛p
 (c⁄° *
__fûe
, c⁄° *
__¨g
, ...)

606 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

608 #ifde‡
__USE_GNU


611 
	$execv≥
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[],

612 *c⁄° 
__ívp
[])

613 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

617 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


619 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

624 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

630 
	~<bôs/c⁄‚ame.h
>

633 
	$∑thc⁄f
 (c⁄° *
__∑th
, 
__«me
)

634 
__THROW
 
	`__n⁄nuŒ
 ((1));

637 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

640 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

642 #ifdef 
__USE_POSIX2


644 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW


645 
	`__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 2, 3);

650 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

653 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

656 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

659 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

660 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


661 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

668 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

670 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


682 
	$£çgΩ
 (Ë
__THROW
;

689 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

691 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


693 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

697 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

700 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

703 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

706 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

711 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur


712 
	`__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 2, 1);

713 #ifdef 
__USE_GNU


715 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

722 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

724 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


727 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
 
__wur
;

730 #ifde‡
__USE_XOPEN2K


732 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

739 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

741 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


744 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
 
__wur
;

747 #ifde‡
__USE_XOPEN2K


749 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

752 #ifde‡
__USE_GNU


755 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

756 
__THROW
;

760 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

761 
__THROW
;

765 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

766 
__THROW
 
__wur
;

770 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

771 
__THROW
 
__wur
;

778 
__pid_t
 
	$f‹k
 (Ë
__THROWNL
;

780 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

781 || 
deföed
 
__USE_MISC


786 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

789 #ifde‡
__USE_GNU


793 
__pid_t
 
	$_F‹k
 (Ë
__THROW
;

799 *
	$ây«me
 (
__fd
Ë
__THROW
;

803 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

804 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur


805 
	`__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 2, 3);

809 
	$ißây
 (
__fd
Ë
__THROW
;

811 #ifde‡
__USE_MISC


814 
	$ây¶Ÿ
 (Ë
__THROW
;

819 
	$lök
 (c⁄° *
__‰om
, c⁄° *
__to
)

820 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

822 #ifde‡
__USE_ATFILE


825 
	$lök©
 (
__‰omfd
, c⁄° *
__‰om
, 
__tofd
,

826 c⁄° *
__to
, 
__Êags
)

827 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

830 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


832 
	$symlök
 (c⁄° *
__‰om
, c⁄° *
__to
)

833 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

838 
ssize_t
 
	$ªadlök
 (c⁄° *
__ª°ri˘
 
__∑th
,

839 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

840 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur


841 
	`__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 2, 3);

845 #ifde‡
__USE_ATFILE


847 
	$symlök©
 (c⁄° *
__‰om
, 
__tofd
,

848 c⁄° *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

851 
ssize_t
 
	$ªadlök©
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

852 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

853 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur


854 
	`__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 3, 4);

858 
	$u∆ök
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

860 #ifde‡
__USE_ATFILE


862 
	$u∆ök©
 (
__fd
, c⁄° *
__«me
, 
__Êag
)

863 
__THROW
 
	`__n⁄nuŒ
 ((2));

867 
	$rmdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

871 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

874 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

881 *
	`gëlogö
 ();

882 #ifde‡
__USE_POSIX199506


889 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1))

890 
	`__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 1, 2);

893 #ifdef 
__USE_MISC


895 
	$£éogö
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

899 #ifdef 
__USE_POSIX2


903 
	~<bôs/gë›t_posix.h
>

907 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


911 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1))

912 
	`__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 1, 2);

916 #i‡
deföed
 
__USE_MISC


919 
	$£tho°«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

920 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 1, 2));

924 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

930 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

931 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur


932 
	`__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 1, 2);

933 
	$£tdomaö«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

934 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 1, 2));

939 
	$vh™gup
 (Ë
__THROW
;

942 
	$ªvoke
 (c⁄° *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

950 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

951 
size_t
 
__off£t
, 
__sˇÀ
)

952 
__THROW
 
	`__n⁄nuŒ
 ((1));

958 
	$ac˘
 (c⁄° *
__«me
Ë
__THROW
;

962 *
	$gëu£rshñl
 (Ë
__THROW
;

963 
	$ídu£rshñl
 (Ë
__THROW
;

964 
	$£tu£rshñl
 (Ë
__THROW
;

970 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

974 #i‡
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

977 
	$chroŸ
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

981 *
	$gë∑ss
 (c⁄° *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

989 
	`fsync
 (
__fd
);

992 #ifde‡
__USE_GNU


995 
	$syncfs
 (
__fd
Ë
__THROW
;

999 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


1002 
	`gëho°id
 ();

1005 
	$sync
 (Ë
__THROW
;

1008 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K


1011 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

1016 
	$gëdèbÀsize
 (Ë
__THROW
;

1022 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


1025 #i‚de‡
__USE_FILE_OFFSET64


1026 
	$åunˇã
 (c⁄° *
__fûe
, 
__off_t
 
__Àngth
)

1027 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1029 #ifde‡
__REDIRECT_NTH


1030 
	`__REDIRECT_NTH
 (
åunˇã
,

1031 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
),

1032 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1034 
	#åunˇã
 
åunˇã64


	)

1037 #ifde‡
__USE_LARGEFILE64


1038 
	$åunˇã64
 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
)

1039 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1044 #i‡
deföed
 
__USE_POSIX199309
 \

1045 || 
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


1048 #i‚de‡
__USE_FILE_OFFSET64


1049 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1051 #ifde‡
__REDIRECT_NTH


1052 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1053 
·runˇã64
Ë
__wur
;

1055 
	#·runˇã
 
·runˇã64


	)

1058 #ifde‡
__USE_LARGEFILE64


1059 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1065 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

1066 || 
deföed
 
__USE_MISC


1070 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1076 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1080 #ifde‡
__USE_MISC


1091 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1096 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1108 
	#F_ULOCK
 0

	)

1109 
	#F_LOCK
 1

	)

1110 
	#F_TLOCK
 2

	)

1111 
	#F_TEST
 3

	)

1113 #i‚de‡
__USE_FILE_OFFSET64


1114 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1116 #ifde‡
__REDIRECT


1117 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1118 
lockf64
Ë
__wur
;

1120 
	#lockf
 
lockf64


	)

1123 #ifde‡
__USE_LARGEFILE64


1124 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1129 #ifde‡
__USE_GNU


1134 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1135 (
__exãnsi⁄__
 \

1136 ({ 
__ªsu…
; \

1137 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1138 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1139 
__ªsu…
; 
	}
}))

	)

1142 
ssize_t
 
c›y_fûe_ønge
 (
__öfd
, 
__off64_t
 *
__pöoff
,

1143 
__outfd
, 
__off64_t
 *
__poutoff
,

1144 
size_t
 
__Àngth
, 
__Êags
);

1147 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1150 
fd©async
 (
__fûdes
);

1153 #ifde‡
__USE_MISC


1159 *
	$¸y±
 (c⁄° *
__key
, c⁄° *
__ß…
)

1160 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1163 #ifdef 
__USE_XOPEN


1168 
	$swab
 (c⁄° *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1169 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2))

1170 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 1, 3))

1171 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 2, 3));

1178 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K


1180 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1183 *
	`cu£rid
 (*
__s
);

1189 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_XOPEN2K


1190 
	$±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1191 (*
__∑ª¡
) (),

1192 (*
__chûd
Ë()Ë
__THROW
;

1195 #ifde‡
__USE_MISC


1198 
	$gëíå›y
 (*
__buf„r
, 
size_t
 
__Àngth
Ë
__wur


1199 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 2));

1202 #ifde‡
__USE_GNU


1208 
	$˛o£_ønge
 (
__fd
, 
__max_fd
,

1209 
__Êags
Ë
__THROW
;

1213 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


1214 
	~<bôs/uni°d.h
>

1218 
	~<bôs/uni°d_ext.h
>

1220 
__END_DECLS


	@/usr/include/utime.h

22 #i‚def 
_UTIME_H


23 
	#_UTIME_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

31 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


32 
	~<bôs/ty≥s/time_t.h
>

36 
	sutimbuf


38 #ifde‡
__USE_TIME_BITS64


39 
__time64_t
 
	ma˘ime
;

40 
__time64_t
 
	mmodtime
;

42 
__time_t
 
	ma˘ime
;

43 
__time_t
 
	mmodtime
;

49 #i‚de‡
__USE_TIME_BITS64


50 
	$utime
 (c⁄° *
__fûe
,

51 c⁄° 
utimbuf
 *
__fûe_times
)

52 
__THROW
 
	`__n⁄nuŒ
 ((1));

55 #ifde‡
__REDIRECT_NTH


56 
	`__REDIRECT_NTH
 (
utime
, (c⁄° *
__fûe
,

57 c⁄° 
utimbuf
 *
__fûe_times
),

58 
__utime64
);

60 
	#utime
 
__utime64


	)

64 
__END_DECLS


	@/usr/include/utmp.h

18 #i‚def 
_UTMP_H


19 
	#_UTMP_H
 1

	)

21 
	~<„©uªs.h
>

23 
	~<sys/ty≥s.h
>

26 
	g__BEGIN_DECLS


29 
	~<bôs/utmp.h
>

32 
	#UTMP_FILE
 
_PATH_UTMP


	)

33 
	#UTMP_FILENAME
 
_PATH_UTMP


	)

34 
	#WTMP_FILE
 
_PATH_WTMP


	)

35 
	#WTMP_FILENAME
 
_PATH_WTMP


	)

41 
	$logö_ây
 (
__fd
Ë
__THROW
;

45 
	$logö
 (c⁄° 
utmp
 *
__íåy
Ë
__THROW
;

48 
	$logout
 (c⁄° *
__ut_löe
Ë
__THROW
;

51 
	$logwtmp
 (c⁄° *
__ut_löe
, c⁄° *
__ut_«me
,

52 c⁄° *
__ut_ho°
Ë
__THROW
;

55 
	$updwtmp
 (c⁄° *
__wtmp_fûe
, c⁄° 
utmp
 *
__utmp
)

56 
__THROW
;

59 
	$utm≤ame
 (c⁄° *
__fûe
Ë
__THROW
;

62 
utmp
 *
	$gëuã¡
 (Ë
__THROW
;

65 
	$£tuã¡
 (Ë
__THROW
;

68 
	$íduã¡
 (Ë
__THROW
;

72 
utmp
 *
	$gëutid
 (c⁄° 
utmp
 *
__id
Ë
__THROW
;

76 
utmp
 *
	$gëuéöe
 (c⁄° 
utmp
 *
__löe
Ë
__THROW
;

79 
utmp
 *
	$putuéöe
 (c⁄° 
utmp
 *
__utmp_±r
Ë
__THROW
;

82 #ifdef 
__USE_MISC


84 
	$gëuã¡_r
 (
utmp
 *
__buf„r
, utm∞**
__ªsu…
Ë
__THROW
;

86 
	$gëutid_r
 (c⁄° 
utmp
 *
__id
, utm∞*
__buf„r
,

87 
utmp
 **
__ªsu…
Ë
__THROW
;

89 
	$gëuéöe_r
 (c⁄° 
utmp
 *
__löe
,

90 
utmp
 *
__buf„r
, utm∞**
__ªsu…
Ë
__THROW
;

94 
__END_DECLS


	@/usr/include/utmpx.h

18 #i‚def 
_UTMPX_H


19 
	#_UTMPX_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<sys/time.h
>

25 #i‚de‡
__pid_t_deföed


26 
__pid_t
 
	tpid_t
;

27 
	#__pid_t_deföed


	)

31 
	~<bôs/utmpx.h
>

33 #ifde‡
__USE_GNU


35 
	#UTMPX_FILE
 
_PATH_UTMPX


	)

36 
	#UTMPX_FILENAME
 
_PATH_UTMPX


	)

37 
	#WTMPX_FILE
 
_PATH_WTMPX


	)

38 
	#WTMPX_FILENAME
 
_PATH_WTMPX


	)

42 #ifde‡
__USE_GNU


43 
	gutmp
;

47 
__BEGIN_DECLS


53 
£tutxít
 ();

59 
ídutxít
 ();

65 
utmpx
 *
gëutxít
 ();

71 
utmpx
 *
gëutxid
 (c⁄° utmpx *
__id
);

77 
utmpx
 *
gëutxlöe
 (c⁄° utmpx *
__löe
);

83 
utmpx
 *
pututxlöe
 (c⁄° utmpx *
__utmpx
);

86 #ifde‡
__USE_GNU


93 
utmpx«me
 (c⁄° *
__fûe
);

101 
updwtmpx
 (c⁄° *
__wtmpx_fûe
,

102 c⁄° 
utmpx
 *
__utmpx
);

111 
gëutmp
 (c⁄° 
utmpx
 *
__utmpx
,

112 
utmp
 *
__utmp
);

120 
gëutmpx
 (c⁄° 
utmp
 *
__utmp
, 
utmpx
 *
__utmpx
);

123 
	g__END_DECLS


	@/usr/include/uv.h

24 #i‚de‡
UV_H


25 
	#UV_H


	)

26 #ifde‡
__˝lu•lus


30 #i‡
deföed
(
BUILDING_UV_SHARED
Ë&& deföed(
USING_UV_SHARED
)

34 #ifde‡
_WIN32


36 #i‡
deföed
(
BUILDING_UV_SHARED
)

38 
	#UV_EXTERN
 
	`__de˛•ec
(
dŒexp‹t
)

	)

39 #ñi‡
deföed
(
USING_UV_SHARED
)

41 
	#UV_EXTERN
 
	`__de˛•ec
(
dŒimp‹t
)

	)

44 
	#UV_EXTERN


	)

46 #ñi‡
__GNUC__
 >= 4

47 
	#UV_EXTERN
 
	`__©åibuã__
((
	`visibûôy
("deÁu…")))

	)

48 #ñi‡
deföed
(
__SUNPRO_C
) && (__SUNPRO_C >= 0x550)

49 
	#UV_EXTERN
 
__globÆ


	)

51 
	#UV_EXTERN


	)

54 
	~"uv/î∫o.h
"

55 
	~"uv/vîsi⁄.h
"

56 
	~<°ddef.h
>

57 
	~<°dio.h
>

59 #i‡
deföed
(
_MSC_VER
) && _MSC_VER < 1600

60 
	~"uv/°döt-msvc2008.h
"

62 
	~<°döt.h
>

65 #i‡
deföed
(
_WIN32
)

66 
	~"uv/wö.h
"

68 
	~"uv/unix.h
"

72 
	#UV_ERRNO_MAP
(
XX
) \

73 
	`XX
(
E2BIG
, "argumentÜistÅooÜong") \

74 
	`XX
(
EACCES
, "permission denied") \

75 
	`XX
(
EADDRINUSE
, "addressálready in use") \

76 
	`XX
(
EADDRNOTAVAIL
, "addressÇotávailable") \

77 
	`XX
(
EAFNOSUPPORT
, "address familyÇot supported") \

78 
	`XX
(
EAGAIN
, "resourceÅemporarily unavailable") \

79 
	`XX
(
EAI_ADDRFAMILY
, "address familyÇot supported") \

80 
	`XX
(
EAI_AGAIN
, "temporary failure") \

81 
	`XX
(
EAI_BADFLAGS
, "badái_flags value") \

82 
	`XX
(
EAI_BADHINTS
, "invalid value for hints") \

83 
	`XX
(
EAI_CANCELED
, "request canceled") \

84 
	`XX
(
EAI_FAIL
, "permanent failure") \

85 
	`XX
(
EAI_FAMILY
, "ai_familyÇot supported") \

86 
	`XX
(
EAI_MEMORY
, "out of memory") \

87 
	`XX
(
EAI_NODATA
, "noáddress") \

88 
	`XX
(
EAI_NONAME
, "unknownÇode or service") \

89 
	`XX
(
EAI_OVERFLOW
, "argument buffer overflow") \

90 
	`XX
(
EAI_PROTOCOL
, "resolvedÖrotocol is unknown") \

91 
	`XX
(
EAI_SERVICE
, "serviceÇotávailable for socketÅype") \

92 
	`XX
(
EAI_SOCKTYPE
, "socketÅypeÇot supported") \

93 
	`XX
(
EALREADY
, "connectionálready inÖrogress") \

94 
	`XX
(
EBADF
, "bad file descriptor") \

95 
	`XX
(
EBUSY
, "resource busy orÜocked") \

96 
	`XX
(
ECANCELED
, "operation canceled") \

97 
	`XX
(
ECHARSET
, "invalid Unicode character") \

98 
	`XX
(
ECONNABORTED
, "software caused connectionábort") \

99 
	`XX
(
ECONNREFUSED
, "connectionÑefused") \

100 
	`XX
(
ECONNRESET
, "connectionÑeset byÖeer") \

101 
	`XX
(
EDESTADDRREQ
, "destinationáddressÑequired") \

102 
	`XX
(
EEXIST
, "fileálreadyÉxists") \

103 
	`XX
(
EFAULT
, "badáddress in system callárgument") \

104 
	`XX
(
EFBIG
, "fileÅooÜarge") \

105 
	`XX
(
EHOSTUNREACH
, "host is unreachable") \

106 
	`XX
(
EINTR
, "interrupted system call") \

107 
	`XX
(
EINVAL
, "invalidárgument") \

108 
	`XX
(
EIO
, "i/oÉrror") \

109 
	`XX
(
EISCONN
, "socket isálready connected") \

110 
	`XX
(
EISDIR
, "illegal operation oná directory") \

111 
	`XX
(
ELOOP
, "too many symbolicÜinksÉncountered") \

112 
	`XX
(
EMFILE
, "too many open files") \

113 
	`XX
(
EMSGSIZE
, "messageÅooÜong") \

114 
	`XX
(
ENAMETOOLONG
, "nameÅooÜong") \

115 
	`XX
(
ENETDOWN
, "network is down") \

116 
	`XX
(
ENETUNREACH
, "network is unreachable") \

117 
	`XX
(
ENFILE
, "fileÅable overflow") \

118 
	`XX
(
ENOBUFS
, "no buffer spaceávailable") \

119 
	`XX
(
ENODEV
, "no such device") \

120 
	`XX
(
ENOENT
, "no such file or directory") \

121 
	`XX
(
ENOMEM
, "notÉnough memory") \

122 
	`XX
(
ENONET
, "machine isÇot onÅheÇetwork") \

123 
	`XX
(
ENOPROTOOPT
, "protocolÇotávailable") \

124 
	`XX
(
ENOSPC
, "no spaceÜeft on device") \

125 
	`XX
(
ENOSYS
, "functionÇot implemented") \

126 
	`XX
(
ENOTCONN
, "socket isÇot connected") \

127 
	`XX
(
ENOTDIR
, "notá directory") \

128 
	`XX
(
ENOTEMPTY
, "directoryÇotÉmpty") \

129 
	`XX
(
ENOTSOCK
, "socket operation onÇon-socket") \

130 
	`XX
(
ENOTSUP
, "operationÇot supported on socket") \

131 
	`XX
(
EOVERFLOW
, "valueÅooÜarge for defined dataÅype") \

132 
	`XX
(
EPERM
, "operationÇotÖermitted") \

133 
	`XX
(
EPIPE
, "brokenÖipe") \

134 
	`XX
(
EPROTO
, "protocolÉrror") \

135 
	`XX
(
EPROTONOSUPPORT
, "protocolÇot supported") \

136 
	`XX
(
EPROTOTYPE
, "protocol wrongÅype for socket") \

137 
	`XX
(
ERANGE
, "resultÅooÜarge") \

138 
	`XX
(
EROFS
, "read-only file system") \

139 
	`XX
(
ESHUTDOWN
, "cannot sendáfterÅransportÉndpoint shutdown") \

140 
	`XX
(
ESPIPE
, "invalid seek") \

141 
	`XX
(
ESRCH
, "no suchÖrocess") \

142 
	`XX
(
ETIMEDOUT
, "connectionÅimed out") \

143 
	`XX
(
ETXTBSY
, "text file is busy") \

144 
	`XX
(
EXDEV
, "cross-deviceÜinkÇotÖermitted") \

145 
	`XX
(
UNKNOWN
, "unknownÉrror") \

146 
	`XX
(
EOF
, "end of file") \

147 
	`XX
(
ENXIO
, "no such device oráddress") \

148 
	`XX
(
EMLINK
, "too manyÜinks") \

149 
	`XX
(
EHOSTDOWN
, "host is down") \

150 
	`XX
(
EREMOTEIO
, "remote I/OÉrror") \

151 
	`XX
(
ENOTTY
, "inappropriate ioctl for device") \

152 
	`XX
(
EFTYPE
, "inappropriate fileÅype or format") \

153 
	`XX
(
EILSEQ
, "illegal byte sequence") \

154 
	`XX
(
ESOCKTNOSUPPORT
, "socketÅypeÇot supported") \

155 

	)

156 
	#UV_HANDLE_TYPE_MAP
(
XX
) \

157 
	`XX
(
ASYNC
, 
async
) \

158 
	`XX
(
CHECK
, 
check
) \

159 
	`XX
(
FS_EVENT
, 
fs_evít
) \

160 
	`XX
(
FS_POLL
, 
fs_pﬁl
) \

161 
	`XX
(
HANDLE
, 
h™dÀ
) \

162 
	`XX
(
IDLE
, 
idÀ
) \

163 
	`XX
(
NAMED_PIPE
, 
pùe
) \

164 
	`XX
(
POLL
, 
pﬁl
) \

165 
	`XX
(
PREPARE
, 
¥ï¨e
) \

166 
	`XX
(
PROCESS
, 
¥o˚ss
) \

167 
	`XX
(
STREAM
, 
°ªam
) \

168 
	`XX
(
TCP
, 
t˝
) \

169 
	`XX
(
TIMER
, 
timî
) \

170 
	`XX
(
TTY
, 
ây
) \

171 
	`XX
(
UDP
, 
udp
) \

172 
	`XX
(
SIGNAL
, 
sig«l
) \

173 

	)

174 
	#UV_REQ_TYPE_MAP
(
XX
) \

175 
	`XX
(
REQ
, 
ªq
) \

176 
	`XX
(
CONNECT
, 
c⁄√˘
) \

177 
	`XX
(
WRITE
, 
wrôe
) \

178 
	`XX
(
SHUTDOWN
, 
shutdown
) \

179 
	`XX
(
UDP_SEND
, 
udp_£nd
) \

180 
	`XX
(
FS
, 
fs
) \

181 
	`XX
(
WORK
, 
w‹k
) \

182 
	`XX
(
GETADDRINFO
, 
gëaddröfo
) \

183 
	`XX
(
GETNAMEINFO
, 
gë«meöfo
) \

184 
	`XX
(
RANDOM
, 
øndom
) \

185 

	)

187 
	#XX
(
code
, 
_
Ë
UV_
 ## codê
UV__
 ## code,

	)

188 
UV_ERRNO_MAP
(
XX
)

189 #unde‡
XX


190 
UV_ERRNO_MAX
 = 
UV__EOF
 - 1

191 } 
	tuv_î∫o_t
;

194 
UV_UNKNOWN_HANDLE
 = 0,

195 
	#XX
(
uc
, 
lc
Ë
UV_
##uc,

	)

196 
UV_HANDLE_TYPE_MAP
(
XX
)

197 #unde‡
XX


198 
UV_FILE
,

199 
UV_HANDLE_TYPE_MAX


200 } 
	tuv_h™dÀ_ty≥
;

203 
UV_UNKNOWN_REQ
 = 0,

204 
	#XX
(
uc
, 
lc
Ë
UV_
##uc,

	)

205 
UV_REQ_TYPE_MAP
(
XX
)

206 #unde‡
XX


207 
UV_REQ_TYPE_PRIVATE


208 
UV_REQ_TYPE_MAX


209 } 
	tuv_ªq_ty≥
;

213 
uv_lo›_s
 
	tuv_lo›_t
;

214 
uv_h™dÀ_s
 
	tuv_h™dÀ_t
;

215 
uv_dú_s
 
	tuv_dú_t
;

216 
uv_°ªam_s
 
	tuv_°ªam_t
;

217 
uv_t˝_s
 
	tuv_t˝_t
;

218 
uv_udp_s
 
	tuv_udp_t
;

219 
uv_pùe_s
 
	tuv_pùe_t
;

220 
uv_ây_s
 
	tuv_ây_t
;

221 
uv_pﬁl_s
 
	tuv_pﬁl_t
;

222 
uv_timî_s
 
	tuv_timî_t
;

223 
uv_¥ï¨e_s
 
	tuv_¥ï¨e_t
;

224 
uv_check_s
 
	tuv_check_t
;

225 
uv_idÀ_s
 
	tuv_idÀ_t
;

226 
uv_async_s
 
	tuv_async_t
;

227 
uv_¥o˚ss_s
 
	tuv_¥o˚ss_t
;

228 
uv_fs_evít_s
 
	tuv_fs_evít_t
;

229 
uv_fs_pﬁl_s
 
	tuv_fs_pﬁl_t
;

230 
uv_sig«l_s
 
	tuv_sig«l_t
;

233 
uv_ªq_s
 
	tuv_ªq_t
;

234 
uv_gëaddröfo_s
 
	tuv_gëaddröfo_t
;

235 
uv_gë«meöfo_s
 
	tuv_gë«meöfo_t
;

236 
uv_shutdown_s
 
	tuv_shutdown_t
;

237 
uv_wrôe_s
 
	tuv_wrôe_t
;

238 
uv_c⁄√˘_s
 
	tuv_c⁄√˘_t
;

239 
uv_udp_£nd_s
 
	tuv_udp_£nd_t
;

240 
uv_fs_s
 
	tuv_fs_t
;

241 
uv_w‹k_s
 
	tuv_w‹k_t
;

242 
uv_øndom_s
 
	tuv_øndom_t
;

245 
uv_ív_ôem_s
 
	tuv_ív_ôem_t
;

246 
uv_˝u_öfo_s
 
	tuv_˝u_öfo_t
;

247 
uv_öãrÁ˚_addªss_s
 
	tuv_öãrÁ˚_addªss_t
;

248 
uv_dúít_s
 
	tuv_dúít_t
;

249 
uv_∑sswd_s
 
	tuv_∑sswd_t
;

250 
uv_ut¢ame_s
 
	tuv_ut¢ame_t
;

251 
uv_°©fs_s
 
	tuv_°©fs_t
;

254 
UV_LOOP_BLOCK_SIGNAL
 = 0,

255 
UV_METRICS_IDLE_TIME


256 } 
	tuv_lo›_›ti⁄
;

259 
UV_RUN_DEFAULT
 = 0,

260 
UV_RUN_ONCE
,

261 
UV_RUN_NOWAIT


262 } 
	tuv_run_mode
;

265 
UV_EXTERN
 
uv_vîsi⁄
();

266 
UV_EXTERN
 c⁄° * 
uv_vîsi⁄_°rög
();

268 * (*
	tuv_mÆloc_func
)(
	tsize_t
 
	tsize
);

269 * (*
	tuv_ªÆloc_func
)(* 
	t±r
, 
	tsize_t
 
	tsize
);

270 * (*
	tuv_ˇŒoc_func
)(
	tsize_t
 
	tcou¡
, size_à
	tsize
);

271 (*
uv_‰ì_func
)(* 
	t±r
);

273 
UV_EXTERN
 
uv_libøry_shutdown
();

275 
UV_EXTERN
 
uv_ª∂a˚_Æloˇt‹
(
uv_mÆloc_func
 
mÆloc_func
,

276 
uv_ªÆloc_func
 
ªÆloc_func
,

277 
uv_ˇŒoc_func
 
ˇŒoc_func
,

278 
uv_‰ì_func
 
‰ì_func
);

280 
UV_EXTERN
 
uv_lo›_t
* 
uv_deÁu…_lo›
();

281 
UV_EXTERN
 
uv_lo›_öô
(
uv_lo›_t
* 
lo›
);

282 
UV_EXTERN
 
uv_lo›_˛o£
(
uv_lo›_t
* 
lo›
);

288 
UV_EXTERN
 
uv_lo›_t
* 
uv_lo›_√w
();

294 
UV_EXTERN
 
uv_lo›_dñëe
(
uv_lo›_t
*);

295 
UV_EXTERN
 
size_t
 
uv_lo›_size
();

296 
UV_EXTERN
 
uv_lo›_Æive
(c⁄° 
uv_lo›_t
* 
lo›
);

297 
UV_EXTERN
 
uv_lo›_c⁄figuª
(
uv_lo›_t
* 
lo›
, 
uv_lo›_›ti⁄
 
›ti⁄
, ...);

298 
UV_EXTERN
 
uv_lo›_f‹k
(
uv_lo›_t
* 
lo›
);

300 
UV_EXTERN
 
uv_run
(
uv_lo›_t
*, 
uv_run_mode
 
mode
);

301 
UV_EXTERN
 
uv_°›
(
uv_lo›_t
*);

303 
UV_EXTERN
 
uv_ªf
(
uv_h™dÀ_t
*);

304 
UV_EXTERN
 
uv_uƒef
(
uv_h™dÀ_t
*);

305 
UV_EXTERN
 
uv_has_ªf
(c⁄° 
uv_h™dÀ_t
*);

307 
UV_EXTERN
 
uv_upd©e_time
(
uv_lo›_t
*);

308 
UV_EXTERN
 
uöt64_t
 
uv_now
(c⁄° 
uv_lo›_t
*);

310 
UV_EXTERN
 
uv_backíd_fd
(c⁄° 
uv_lo›_t
*);

311 
UV_EXTERN
 
uv_backíd_timeout
(c⁄° 
uv_lo›_t
*);

313 (*
uv_Æloc_cb
)(
	tuv_h™dÀ_t
* 
	th™dÀ
,

314 
	tsize_t
 
	tsugge°ed_size
,

315 
	tuv_buf_t
* 
	tbuf
);

316 (*
uv_ªad_cb
)(
	tuv_°ªam_t
* 
	t°ªam
,

317 
	tssize_t
 
	tƒód
,

318 c⁄° 
	tuv_buf_t
* 
	tbuf
);

319 (*
uv_wrôe_cb
)(
	tuv_wrôe_t
* 
	tªq
, 
	t°©us
);

320 (*
uv_c⁄√˘_cb
)(
	tuv_c⁄√˘_t
* 
	tªq
, 
	t°©us
);

321 (*
uv_shutdown_cb
)(
	tuv_shutdown_t
* 
	tªq
, 
	t°©us
);

322 (*
uv_c⁄√˘i⁄_cb
)(
	tuv_°ªam_t
* 
	t£rvî
, 
	t°©us
);

323 (*
uv_˛o£_cb
)(
	tuv_h™dÀ_t
* 
	th™dÀ
);

324 (*
uv_pﬁl_cb
)(
	tuv_pﬁl_t
* 
	th™dÀ
, 
	t°©us
, 
	tevíts
);

325 (*
uv_timî_cb
)(
	tuv_timî_t
* 
	th™dÀ
);

326 (*
uv_async_cb
)(
	tuv_async_t
* 
	th™dÀ
);

327 (*
uv_¥ï¨e_cb
)(
	tuv_¥ï¨e_t
* 
	th™dÀ
);

328 (*
uv_check_cb
)(
	tuv_check_t
* 
	th™dÀ
);

329 (*
uv_idÀ_cb
)(
	tuv_idÀ_t
* 
	th™dÀ
);

330 (*
uv_exô_cb
)(
	tuv_¥o˚ss_t
*, 
	töt64_t
 
	texô_°©us
, 
	tãrm_sig«l
);

331 (*
uv_wÆk_cb
)(
	tuv_h™dÀ_t
* 
	th™dÀ
, * 
	t¨g
);

332 (*
uv_fs_cb
)(
	tuv_fs_t
* 
	tªq
);

333 (*
uv_w‹k_cb
)(
	tuv_w‹k_t
* 
	tªq
);

334 (*
uv_a·î_w‹k_cb
)(
	tuv_w‹k_t
* 
	tªq
, 
	t°©us
);

335 (*
uv_gëaddröfo_cb
)(
	tuv_gëaddröfo_t
* 
	tªq
,

336 
	t°©us
,

337 
	taddröfo
* 
	tªs
);

338 (*
uv_gë«meöfo_cb
)(
	tuv_gë«meöfo_t
* 
	tªq
,

339 
	t°©us
,

340 c⁄° * 
	tho°«me
,

341 c⁄° * 
	t£rvi˚
);

342 (*
uv_øndom_cb
)(
	tuv_øndom_t
* 
	tªq
,

343 
	t°©us
,

344 * 
	tbuf
,

345 
	tsize_t
 
	tbuÊí
);

348 
tv_£c
;

349 
tv_n£c
;

350 } 
	tuv_time•ec_t
;

354 
uöt64_t
 
°_dev
;

355 
uöt64_t
 
°_mode
;

356 
uöt64_t
 
°_∆ök
;

357 
uöt64_t
 
°_uid
;

358 
uöt64_t
 
°_gid
;

359 
uöt64_t
 
°_rdev
;

360 
uöt64_t
 
°_öo
;

361 
uöt64_t
 
°_size
;

362 
uöt64_t
 
°_blksize
;

363 
uöt64_t
 
°_blocks
;

364 
uöt64_t
 
°_Êags
;

365 
uöt64_t
 
°_gí
;

366 
uv_time•ec_t
 
°_©im
;

367 
uv_time•ec_t
 
°_mtim
;

368 
uv_time•ec_t
 
°_˘im
;

369 
uv_time•ec_t
 
°_búthtim
;

370 } 
	tuv_°©_t
;

373 (*
uv_fs_evít_cb
)(
	tuv_fs_evít_t
* 
	th™dÀ
,

374 c⁄° * 
	tfûíame
,

375 
	tevíts
,

376 
	t°©us
);

378 (*
uv_fs_pﬁl_cb
)(
	tuv_fs_pﬁl_t
* 
	th™dÀ
,

379 
	t°©us
,

380 c⁄° 
	tuv_°©_t
* 
	t¥ev
,

381 c⁄° 
	tuv_°©_t
* 
	tcuº
);

383 (*
uv_sig«l_cb
)(
	tuv_sig«l_t
* 
	th™dÀ
, 
	tsignum
);

387 
UV_LEAVE_GROUP
 = 0,

388 
UV_JOIN_GROUP


389 } 
	tuv_membîshù
;

392 
UV_EXTERN
 
uv_å™¶©e_sys_îr‹
(
sys_î∫o
);

394 
UV_EXTERN
 c⁄° * 
uv_°ªº‹
(
îr
);

395 
UV_EXTERN
 * 
uv_°ªº‹_r
(
îr
, * 
buf
, 
size_t
 
buÊí
);

397 
UV_EXTERN
 c⁄° * 
uv_îr_«me
(
îr
);

398 
UV_EXTERN
 * 
uv_îr_«me_r
(
îr
, * 
buf
, 
size_t
 
buÊí
);

401 
	#UV_REQ_FIELDS
 \

403 * 
d©a
; \

405 
uv_ªq_ty≥
 
ty≥
; \

407 * 
ª£rved
[6]; \

408 
UV_REQ_PRIVATE_FIELDS
 \

409 

	)

411 
	suv_ªq_s
 {

412 
UV_REQ_FIELDS


417 
UV_PRIVATE_REQ_TYPES


420 
UV_EXTERN
 
uv_shutdown
(
uv_shutdown_t
* 
ªq
,

421 
uv_°ªam_t
* 
h™dÀ
,

422 
uv_shutdown_cb
 
cb
);

424 
	suv_shutdown_s
 {

425 
UV_REQ_FIELDS


426 
uv_°ªam_t
* 
h™dÀ
;

427 
uv_shutdown_cb
 
cb
;

428 
UV_SHUTDOWN_PRIVATE_FIELDS


432 
	#UV_HANDLE_FIELDS
 \

434 * 
d©a
; \

436 
uv_lo›_t
* 
lo›
; \

437 
uv_h™dÀ_ty≥
 
ty≥
; \

439 
uv_˛o£_cb
 
˛o£_cb
; \

440 * 
h™dÀ_queue
[2]; \

442 
fd
; \

443 * 
ª£rved
[4]; \

444 } 
u
; \

445 
UV_HANDLE_PRIVATE_FIELDS
 \

446 

	)

448 
	suv_h™dÀ_s
 {

449 
UV_HANDLE_FIELDS


452 
UV_EXTERN
 
size_t
 
uv_h™dÀ_size
(
uv_h™dÀ_ty≥
 
ty≥
);

453 
UV_EXTERN
 
uv_h™dÀ_ty≥
 
uv_h™dÀ_gë_ty≥
(c⁄° 
uv_h™dÀ_t
* 
h™dÀ
);

454 
UV_EXTERN
 c⁄° * 
uv_h™dÀ_ty≥_«me
(
uv_h™dÀ_ty≥
 
ty≥
);

455 
UV_EXTERN
 * 
uv_h™dÀ_gë_d©a
(c⁄° 
uv_h™dÀ_t
* 
h™dÀ
);

456 
UV_EXTERN
 
uv_lo›_t
* 
uv_h™dÀ_gë_lo›
(c⁄° 
uv_h™dÀ_t
* 
h™dÀ
);

457 
UV_EXTERN
 
uv_h™dÀ_£t_d©a
(
uv_h™dÀ_t
* 
h™dÀ
, * 
d©a
);

459 
UV_EXTERN
 
size_t
 
uv_ªq_size
(
uv_ªq_ty≥
 
ty≥
);

460 
UV_EXTERN
 * 
uv_ªq_gë_d©a
(c⁄° 
uv_ªq_t
* 
ªq
);

461 
UV_EXTERN
 
uv_ªq_£t_d©a
(
uv_ªq_t
* 
ªq
, * 
d©a
);

462 
UV_EXTERN
 
uv_ªq_ty≥
 
uv_ªq_gë_ty≥
(c⁄° 
uv_ªq_t
* 
ªq
);

463 
UV_EXTERN
 c⁄° * 
uv_ªq_ty≥_«me
(
uv_ªq_ty≥
 
ty≥
);

465 
UV_EXTERN
 
uv_is_a˘ive
(c⁄° 
uv_h™dÀ_t
* 
h™dÀ
);

467 
UV_EXTERN
 
uv_wÆk
(
uv_lo›_t
* 
lo›
, 
uv_wÆk_cb
 
wÆk_cb
, * 
¨g
);

470 
UV_EXTERN
 
uv_¥öt_Æl_h™dÀs
(
uv_lo›_t
* 
lo›
, 
FILE
* 
°ªam
);

471 
UV_EXTERN
 
uv_¥öt_a˘ive_h™dÀs
(
uv_lo›_t
* 
lo›
, 
FILE
* 
°ªam
);

473 
UV_EXTERN
 
uv_˛o£
(
uv_h™dÀ_t
* 
h™dÀ
, 
uv_˛o£_cb
 
˛o£_cb
);

475 
UV_EXTERN
 
uv_£nd_buf„r_size
(
uv_h™dÀ_t
* 
h™dÀ
, * 
vÆue
);

476 
UV_EXTERN
 
uv_ªcv_buf„r_size
(
uv_h™dÀ_t
* 
h™dÀ
, * 
vÆue
);

478 
UV_EXTERN
 
uv_fûío
(c⁄° 
uv_h™dÀ_t
* 
h™dÀ
, 
uv_os_fd_t
* 
fd
);

480 
UV_EXTERN
 
uv_buf_t
 
uv_buf_öô
(* 
ba£
, 
Àn
);

482 
UV_EXTERN
 
uv_pùe
(
uv_fûe
 
fds
[2], 
ªad_Êags
, 
wrôe_Êags
);

483 
UV_EXTERN
 
uv_sockë∑ú
(
ty≥
,

484 
¥Ÿocﬁ
,

485 
uv_os_sock_t
 
sockë_ve˘‹
[2],

486 
Êags0
,

487 
Êags1
);

489 
	#UV_STREAM_FIELDS
 \

491 
size_t
 
wrôe_queue_size
; \

492 
uv_Æloc_cb
 
Æloc_cb
; \

493 
uv_ªad_cb
 
ªad_cb
; \

495 
UV_STREAM_PRIVATE_FIELDS


	)

504 
	suv_°ªam_s
 {

505 
UV_HANDLE_FIELDS


506 
UV_STREAM_FIELDS


509 
UV_EXTERN
 
size_t
 
uv_°ªam_gë_wrôe_queue_size
(c⁄° 
uv_°ªam_t
* 
°ªam
);

511 
UV_EXTERN
 
uv_li°í
(
uv_°ªam_t
* 
°ªam
, 
backlog
, 
uv_c⁄√˘i⁄_cb
 
cb
);

512 
UV_EXTERN
 
uv_ac˚±
(
uv_°ªam_t
* 
£rvî
, uv_°ªam_t* 
˛õ¡
);

514 
UV_EXTERN
 
uv_ªad_°¨t
(
uv_°ªam_t
*,

515 
uv_Æloc_cb
 
Æloc_cb
,

516 
uv_ªad_cb
 
ªad_cb
);

517 
UV_EXTERN
 
uv_ªad_°›
(
uv_°ªam_t
*);

519 
UV_EXTERN
 
uv_wrôe
(
uv_wrôe_t
* 
ªq
,

520 
uv_°ªam_t
* 
h™dÀ
,

521 c⁄° 
uv_buf_t
 
bufs
[],

522 
nbufs
,

523 
uv_wrôe_cb
 
cb
);

524 
UV_EXTERN
 
uv_wrôe2
(
uv_wrôe_t
* 
ªq
,

525 
uv_°ªam_t
* 
h™dÀ
,

526 c⁄° 
uv_buf_t
 
bufs
[],

527 
nbufs
,

528 
uv_°ªam_t
* 
£nd_h™dÀ
,

529 
uv_wrôe_cb
 
cb
);

530 
UV_EXTERN
 
uv_åy_wrôe
(
uv_°ªam_t
* 
h™dÀ
,

531 c⁄° 
uv_buf_t
 
bufs
[],

532 
nbufs
);

533 
UV_EXTERN
 
uv_åy_wrôe2
(
uv_°ªam_t
* 
h™dÀ
,

534 c⁄° 
uv_buf_t
 
bufs
[],

535 
nbufs
,

536 
uv_°ªam_t
* 
£nd_h™dÀ
);

539 
	suv_wrôe_s
 {

540 
UV_REQ_FIELDS


541 
uv_wrôe_cb
 
cb
;

542 
uv_°ªam_t
* 
£nd_h™dÀ
;

543 
uv_°ªam_t
* 
h™dÀ
;

544 
UV_WRITE_PRIVATE_FIELDS


548 
UV_EXTERN
 
uv_is_ªadabÀ
(c⁄° 
uv_°ªam_t
* 
h™dÀ
);

549 
UV_EXTERN
 
uv_is_wrôabÀ
(c⁄° 
uv_°ªam_t
* 
h™dÀ
);

551 
UV_EXTERN
 
uv_°ªam_£t_blockög
(
uv_°ªam_t
* 
h™dÀ
, 
blockög
);

553 
UV_EXTERN
 
uv_is_˛osög
(c⁄° 
uv_h™dÀ_t
* 
h™dÀ
);

561 
	suv_t˝_s
 {

562 
UV_HANDLE_FIELDS


563 
UV_STREAM_FIELDS


564 
UV_TCP_PRIVATE_FIELDS


567 
UV_EXTERN
 
uv_t˝_öô
(
uv_lo›_t
*, 
uv_t˝_t
* 
h™dÀ
);

568 
UV_EXTERN
 
uv_t˝_öô_ex
(
uv_lo›_t
*, 
uv_t˝_t
* 
h™dÀ
, 
Êags
);

569 
UV_EXTERN
 
uv_t˝_›í
(
uv_t˝_t
* 
h™dÀ
, 
uv_os_sock_t
 
sock
);

570 
UV_EXTERN
 
uv_t˝_nodñay
(
uv_t˝_t
* 
h™dÀ
, 
íabÀ
);

571 
UV_EXTERN
 
uv_t˝_kì∑live
(
uv_t˝_t
* 
h™dÀ
,

572 
íabÀ
,

573 
dñay
);

574 
UV_EXTERN
 
uv_t˝_simu…™eous_ac˚±s
(
uv_t˝_t
* 
h™dÀ
, 
íabÀ
);

576 
	euv_t˝_Êags
 {

578 
UV_TCP_IPV6ONLY
 = 1

581 
UV_EXTERN
 
uv_t˝_böd
(
uv_t˝_t
* 
h™dÀ
,

582 c⁄° 
sockaddr
* 
addr
,

583 
Êags
);

584 
UV_EXTERN
 
uv_t˝_gësock«me
(c⁄° 
uv_t˝_t
* 
h™dÀ
,

585 
sockaddr
* 
«me
,

586 * 
«mñí
);

587 
UV_EXTERN
 
uv_t˝_gë≥î«me
(c⁄° 
uv_t˝_t
* 
h™dÀ
,

588 
sockaddr
* 
«me
,

589 * 
«mñí
);

590 
UV_EXTERN
 
uv_t˝_˛o£_ª£t
(
uv_t˝_t
* 
h™dÀ
, 
uv_˛o£_cb
 
˛o£_cb
);

591 
UV_EXTERN
 
uv_t˝_c⁄√˘
(
uv_c⁄√˘_t
* 
ªq
,

592 
uv_t˝_t
* 
h™dÀ
,

593 c⁄° 
sockaddr
* 
addr
,

594 
uv_c⁄√˘_cb
 
cb
);

597 
	suv_c⁄√˘_s
 {

598 
UV_REQ_FIELDS


599 
uv_c⁄√˘_cb
 
cb
;

600 
uv_°ªam_t
* 
h™dÀ
;

601 
UV_CONNECT_PRIVATE_FIELDS


609 
	euv_udp_Êags
 {

611 
UV_UDP_IPV6ONLY
 = 1,

616 
UV_UDP_PARTIAL
 = 2,

625 
UV_UDP_REUSEADDR
 = 4,

630 
UV_UDP_MMSG_CHUNK
 = 8,

636 
UV_UDP_MMSG_FREE
 = 16,

644 
UV_UDP_LINUX_RECVERR
 = 32,

648 
UV_UDP_RECVMMSG
 = 256

651 (*
uv_udp_£nd_cb
)(
	tuv_udp_£nd_t
* 
	tªq
, 
	t°©us
);

652 (*
uv_udp_ªcv_cb
)(
	tuv_udp_t
* 
	th™dÀ
,

653 
	tssize_t
 
	tƒód
,

654 c⁄° 
	tuv_buf_t
* 
	tbuf
,

655 c⁄° 
	tsockaddr
* 
	taddr
,

656 
	tÊags
);

659 
	suv_udp_s
 {

660 
UV_HANDLE_FIELDS


666 
size_t
 
£nd_queue_size
;

670 
size_t
 
£nd_queue_cou¡
;

671 
UV_UDP_PRIVATE_FIELDS


675 
	suv_udp_£nd_s
 {

676 
UV_REQ_FIELDS


677 
uv_udp_t
* 
h™dÀ
;

678 
uv_udp_£nd_cb
 
cb
;

679 
UV_UDP_SEND_PRIVATE_FIELDS


682 
UV_EXTERN
 
uv_udp_öô
(
uv_lo›_t
*, 
uv_udp_t
* 
h™dÀ
);

683 
UV_EXTERN
 
uv_udp_öô_ex
(
uv_lo›_t
*, 
uv_udp_t
* 
h™dÀ
, 
Êags
);

684 
UV_EXTERN
 
uv_udp_›í
(
uv_udp_t
* 
h™dÀ
, 
uv_os_sock_t
 
sock
);

685 
UV_EXTERN
 
uv_udp_böd
(
uv_udp_t
* 
h™dÀ
,

686 c⁄° 
sockaddr
* 
addr
,

687 
Êags
);

688 
UV_EXTERN
 
uv_udp_c⁄√˘
(
uv_udp_t
* 
h™dÀ
, c⁄° 
sockaddr
* 
addr
);

690 
UV_EXTERN
 
uv_udp_gë≥î«me
(c⁄° 
uv_udp_t
* 
h™dÀ
,

691 
sockaddr
* 
«me
,

692 * 
«mñí
);

693 
UV_EXTERN
 
uv_udp_gësock«me
(c⁄° 
uv_udp_t
* 
h™dÀ
,

694 
sockaddr
* 
«me
,

695 * 
«mñí
);

696 
UV_EXTERN
 
uv_udp_£t_membîshù
(
uv_udp_t
* 
h™dÀ
,

697 c⁄° * 
mu…iˇ°_addr
,

698 c⁄° * 
öãrÁ˚_addr
,

699 
uv_membîshù
 
membîshù
);

700 
UV_EXTERN
 
uv_udp_£t_sour˚_membîshù
(
uv_udp_t
* 
h™dÀ
,

701 c⁄° * 
mu…iˇ°_addr
,

702 c⁄° * 
öãrÁ˚_addr
,

703 c⁄° * 
sour˚_addr
,

704 
uv_membîshù
 
membîshù
);

705 
UV_EXTERN
 
uv_udp_£t_mu…iˇ°_lo›
(
uv_udp_t
* 
h™dÀ
, 
⁄
);

706 
UV_EXTERN
 
uv_udp_£t_mu…iˇ°_âl
(
uv_udp_t
* 
h™dÀ
, 
âl
);

707 
UV_EXTERN
 
uv_udp_£t_mu…iˇ°_öãrÁ˚
(
uv_udp_t
* 
h™dÀ
,

708 c⁄° * 
öãrÁ˚_addr
);

709 
UV_EXTERN
 
uv_udp_£t_brﬂdˇ°
(
uv_udp_t
* 
h™dÀ
, 
⁄
);

710 
UV_EXTERN
 
uv_udp_£t_âl
(
uv_udp_t
* 
h™dÀ
, 
âl
);

711 
UV_EXTERN
 
uv_udp_£nd
(
uv_udp_£nd_t
* 
ªq
,

712 
uv_udp_t
* 
h™dÀ
,

713 c⁄° 
uv_buf_t
 
bufs
[],

714 
nbufs
,

715 c⁄° 
sockaddr
* 
addr
,

716 
uv_udp_£nd_cb
 
£nd_cb
);

717 
UV_EXTERN
 
uv_udp_åy_£nd
(
uv_udp_t
* 
h™dÀ
,

718 c⁄° 
uv_buf_t
 
bufs
[],

719 
nbufs
,

720 c⁄° 
sockaddr
* 
addr
);

721 
UV_EXTERN
 
uv_udp_ªcv_°¨t
(
uv_udp_t
* 
h™dÀ
,

722 
uv_Æloc_cb
 
Æloc_cb
,

723 
uv_udp_ªcv_cb
 
ªcv_cb
);

724 
UV_EXTERN
 
uv_udp_usög_ªcvmmsg
(c⁄° 
uv_udp_t
* 
h™dÀ
);

725 
UV_EXTERN
 
uv_udp_ªcv_°›
(
uv_udp_t
* 
h™dÀ
);

726 
UV_EXTERN
 
size_t
 
uv_udp_gë_£nd_queue_size
(c⁄° 
uv_udp_t
* 
h™dÀ
);

727 
UV_EXTERN
 
size_t
 
uv_udp_gë_£nd_queue_cou¡
(c⁄° 
uv_udp_t
* 
h™dÀ
);

735 
	suv_ây_s
 {

736 
UV_HANDLE_FIELDS


737 
UV_STREAM_FIELDS


738 
UV_TTY_PRIVATE_FIELDS


743 
UV_TTY_MODE_NORMAL
,

745 
UV_TTY_MODE_RAW
,

747 
UV_TTY_MODE_IO


748 } 
	tuv_ây_mode_t
;

755 
UV_TTY_SUPPORTED
,

759 
UV_TTY_UNSUPPORTED


760 } 
	tuv_ây_vãrm°©e_t
;

763 
UV_EXTERN
 
uv_ây_öô
(
uv_lo›_t
*, 
uv_ây_t
*, 
uv_fûe
 
fd
, 
ªadabÀ
);

764 
UV_EXTERN
 
uv_ây_£t_mode
(
uv_ây_t
*, 
uv_ây_mode_t
 
mode
);

765 
UV_EXTERN
 
uv_ây_ª£t_mode
();

766 
UV_EXTERN
 
uv_ây_gë_wösize
(
uv_ây_t
*, * 
width
, * 
height
);

767 
UV_EXTERN
 
uv_ây_£t_vãrm_°©e
(
uv_ây_vãrm°©e_t
 
°©e
);

768 
UV_EXTERN
 
uv_ây_gë_vãrm_°©e
(
uv_ây_vãrm°©e_t
* 
°©e
);

770 #ifde‡
__˝lu•lus


773 
ölöe
 
uv_ây_£t_mode
(
uv_ây_t
* 
h™dÀ
, 
mode
) {

774  
uv_ây_£t_mode
(
h™dÀ
, 
°©ic_ˇ°
<
uv_ây_mode_t
>(
mode
));

780 
UV_EXTERN
 
uv_h™dÀ_ty≥
 
uv_guess_h™dÀ
(
uv_fûe
 
fûe
);

788 
	suv_pùe_s
 {

789 
UV_HANDLE_FIELDS


790 
UV_STREAM_FIELDS


791 
	gùc
;

792 
	gUV_PIPE_PRIVATE_FIELDS


795 
UV_EXTERN
 
uv_pùe_öô
(
uv_lo›_t
*, 
uv_pùe_t
* 
h™dÀ
, 
ùc
);

796 
UV_EXTERN
 
uv_pùe_›í
(
uv_pùe_t
*, 
uv_fûe
 
fûe
);

797 
UV_EXTERN
 
uv_pùe_böd
(
uv_pùe_t
* 
h™dÀ
, c⁄° * 
«me
);

798 
UV_EXTERN
 
uv_pùe_c⁄√˘
(
uv_c⁄√˘_t
* 
ªq
,

799 
uv_pùe_t
* 
h™dÀ
,

800 c⁄° * 
«me
,

801 
uv_c⁄√˘_cb
 
cb
);

802 
UV_EXTERN
 
uv_pùe_gësock«me
(c⁄° 
uv_pùe_t
* 
h™dÀ
,

803 * 
buf„r
,

804 
size_t
* 
size
);

805 
UV_EXTERN
 
uv_pùe_gë≥î«me
(c⁄° 
uv_pùe_t
* 
h™dÀ
,

806 * 
buf„r
,

807 
size_t
* 
size
);

808 
UV_EXTERN
 
uv_pùe_≥ndög_ö°™˚s
(
uv_pùe_t
* 
h™dÀ
, 
cou¡
);

809 
UV_EXTERN
 
uv_pùe_≥ndög_cou¡
(
uv_pùe_t
* 
h™dÀ
);

810 
UV_EXTERN
 
uv_h™dÀ_ty≥
 
uv_pùe_≥ndög_ty≥
(
uv_pùe_t
* 
h™dÀ
);

811 
UV_EXTERN
 
uv_pùe_chmod
(
uv_pùe_t
* 
h™dÀ
, 
Êags
);

814 
	suv_pﬁl_s
 {

815 
UV_HANDLE_FIELDS


816 
uv_pﬁl_cb
 
	gpﬁl_cb
;

817 
	gUV_POLL_PRIVATE_FIELDS


820 
	euv_pﬁl_evít
 {

821 
	gUV_READABLE
 = 1,

822 
	gUV_WRITABLE
 = 2,

823 
	gUV_DISCONNECT
 = 4,

824 
	gUV_PRIORITIZED
 = 8

827 
UV_EXTERN
 
uv_pﬁl_öô
(
uv_lo›_t
* 
lo›
, 
uv_pﬁl_t
* 
h™dÀ
, 
fd
);

828 
UV_EXTERN
 
uv_pﬁl_öô_sockë
(
uv_lo›_t
* 
lo›
,

829 
uv_pﬁl_t
* 
h™dÀ
,

830 
uv_os_sock_t
 
sockë
);

831 
UV_EXTERN
 
uv_pﬁl_°¨t
(
uv_pﬁl_t
* 
h™dÀ
, 
evíts
, 
uv_pﬁl_cb
 
cb
);

832 
UV_EXTERN
 
uv_pﬁl_°›
(
uv_pﬁl_t
* 
h™dÀ
);

835 
	suv_¥ï¨e_s
 {

836 
UV_HANDLE_FIELDS


837 
	gUV_PREPARE_PRIVATE_FIELDS


840 
UV_EXTERN
 
uv_¥ï¨e_öô
(
uv_lo›_t
*, 
uv_¥ï¨e_t
* 
¥ï¨e
);

841 
UV_EXTERN
 
uv_¥ï¨e_°¨t
(
uv_¥ï¨e_t
* 
¥ï¨e
, 
uv_¥ï¨e_cb
 
cb
);

842 
UV_EXTERN
 
uv_¥ï¨e_°›
(
uv_¥ï¨e_t
* 
¥ï¨e
);

845 
	suv_check_s
 {

846 
UV_HANDLE_FIELDS


847 
	gUV_CHECK_PRIVATE_FIELDS


850 
UV_EXTERN
 
uv_check_öô
(
uv_lo›_t
*, 
uv_check_t
* 
check
);

851 
UV_EXTERN
 
uv_check_°¨t
(
uv_check_t
* 
check
, 
uv_check_cb
 
cb
);

852 
UV_EXTERN
 
uv_check_°›
(
uv_check_t
* 
check
);

855 
	suv_idÀ_s
 {

856 
UV_HANDLE_FIELDS


857 
	gUV_IDLE_PRIVATE_FIELDS


860 
UV_EXTERN
 
uv_idÀ_öô
(
uv_lo›_t
*, 
uv_idÀ_t
* 
idÀ
);

861 
UV_EXTERN
 
uv_idÀ_°¨t
(
uv_idÀ_t
* 
idÀ
, 
uv_idÀ_cb
 
cb
);

862 
UV_EXTERN
 
uv_idÀ_°›
(
uv_idÀ_t
* 
idÀ
);

865 
	suv_async_s
 {

866 
UV_HANDLE_FIELDS


867 
	gUV_ASYNC_PRIVATE_FIELDS


870 
UV_EXTERN
 
uv_async_öô
(
uv_lo›_t
*,

871 
uv_async_t
* 
async
,

872 
uv_async_cb
 
async_cb
);

873 
UV_EXTERN
 
uv_async_£nd
(
uv_async_t
* 
async
);

881 
	suv_timî_s
 {

882 
UV_HANDLE_FIELDS


883 
	gUV_TIMER_PRIVATE_FIELDS


886 
UV_EXTERN
 
uv_timî_öô
(
uv_lo›_t
*, 
uv_timî_t
* 
h™dÀ
);

887 
UV_EXTERN
 
uv_timî_°¨t
(
uv_timî_t
* 
h™dÀ
,

888 
uv_timî_cb
 
cb
,

889 
uöt64_t
 
timeout
,

890 
uöt64_t
 
ª≥©
);

891 
UV_EXTERN
 
uv_timî_°›
(
uv_timî_t
* 
h™dÀ
);

892 
UV_EXTERN
 
uv_timî_agaö
(
uv_timî_t
* 
h™dÀ
);

893 
UV_EXTERN
 
uv_timî_£t_ª≥©
(
uv_timî_t
* 
h™dÀ
, 
uöt64_t
 
ª≥©
);

894 
UV_EXTERN
 
uöt64_t
 
uv_timî_gë_ª≥©
(c⁄° 
uv_timî_t
* 
h™dÀ
);

895 
UV_EXTERN
 
uöt64_t
 
uv_timî_gë_due_ö
(c⁄° 
uv_timî_t
* 
h™dÀ
);

903 
	suv_gëaddröfo_s
 {

904 
UV_REQ_FIELDS


906 
uv_lo›_t
* 
	glo›
;

908 
	gUV_GETADDRINFO_PRIVATE_FIELDS


912 
UV_EXTERN
 
uv_gëaddröfo
(
uv_lo›_t
* 
lo›
,

913 
uv_gëaddröfo_t
* 
ªq
,

914 
uv_gëaddröfo_cb
 
gëaddröfo_cb
,

915 c⁄° * 
node
,

916 c⁄° * 
£rvi˚
,

917 c⁄° 
addröfo
* 
höts
);

918 
UV_EXTERN
 
uv_‰ìaddröfo
(
addröfo
* 
ai
);

926 
	suv_gë«meöfo_s
 {

927 
UV_REQ_FIELDS


929 
uv_lo›_t
* 
	glo›
;

931 
	gUV_GETNAMEINFO_PRIVATE_FIELDS


934 
UV_EXTERN
 
uv_gë«meöfo
(
uv_lo›_t
* 
lo›
,

935 
uv_gë«meöfo_t
* 
ªq
,

936 
uv_gë«meöfo_cb
 
gë«meöfo_cb
,

937 c⁄° 
sockaddr
* 
addr
,

938 
Êags
);

943 
	gUV_IGNORE
 = 0x00,

944 
	gUV_CREATE_PIPE
 = 0x01,

945 
	gUV_INHERIT_FD
 = 0x02,

946 
	gUV_INHERIT_STREAM
 = 0x04,

953 
	gUV_READABLE_PIPE
 = 0x10,

954 
	gUV_WRITABLE_PIPE
 = 0x20,

962 
	gUV_NONBLOCK_PIPE
 = 0x40,

963 
	gUV_OVERLAPPED_PIPE
 = 0x40

964 } 
	tuv_°dio_Êags
;

966 
	suv_°dio_c⁄èöî_s
 {

967 
uv_°dio_Êags
 
	gÊags
;

970 
uv_°ªam_t
* 
	g°ªam
;

971 
	gfd
;

972 } 
	gd©a
;

973 } 
	tuv_°dio_c⁄èöî_t
;

975 
	suv_¥o˚ss_›ti⁄s_s
 {

976 
uv_exô_cb
 
	gexô_cb
;

977 c⁄° * 
	gfûe
;

984 ** 
	g¨gs
;

989 ** 
	gív
;

994 c⁄° * 
	gcwd
;

999 
	gÊags
;

1009 
	g°dio_cou¡
;

1010 
uv_°dio_c⁄èöî_t
* 
	g°dio
;

1016 
uv_uid_t
 
	guid
;

1017 
uv_gid_t
 
	ggid
;

1018 } 
	tuv_¥o˚ss_›ti⁄s_t
;

1023 
	euv_¥o˚ss_Êags
 {

1029 
	gUV_PROCESS_SETUID
 = (1 << 0),

1035 
	gUV_PROCESS_SETGID
 = (1 << 1),

1041 
	gUV_PROCESS_WINDOWS_VERBATIM_ARGUMENTS
 = (1 << 2),

1049 
	gUV_PROCESS_DETACHED
 = (1 << 3),

1054 
	gUV_PROCESS_WINDOWS_HIDE
 = (1 << 4),

1060 
	gUV_PROCESS_WINDOWS_HIDE_CONSOLE
 = (1 << 5),

1066 
	gUV_PROCESS_WINDOWS_HIDE_GUI
 = (1 << 6)

1072 
	suv_¥o˚ss_s
 {

1073 
UV_HANDLE_FIELDS


1074 
uv_exô_cb
 
	gexô_cb
;

1075 
	gpid
;

1076 
	gUV_PROCESS_PRIVATE_FIELDS


1079 
UV_EXTERN
 
uv_•awn
(
uv_lo›_t
* 
lo›
,

1080 
uv_¥o˚ss_t
* 
h™dÀ
,

1081 c⁄° 
uv_¥o˚ss_›ti⁄s_t
* 
›ti⁄s
);

1082 
UV_EXTERN
 
uv_¥o˚ss_kûl
(
uv_¥o˚ss_t
*, 
signum
);

1083 
UV_EXTERN
 
uv_kûl
(
pid
, 
signum
);

1084 
UV_EXTERN
 
uv_pid_t
 
uv_¥o˚ss_gë_pid
(c⁄° 
uv_¥o˚ss_t
*);

1090 
	suv_w‹k_s
 {

1091 
UV_REQ_FIELDS


1092 
uv_lo›_t
* 
	glo›
;

1093 
uv_w‹k_cb
 
	gw‹k_cb
;

1094 
uv_a·î_w‹k_cb
 
	ga·î_w‹k_cb
;

1095 
	gUV_WORK_PRIVATE_FIELDS


1098 
UV_EXTERN
 
uv_queue_w‹k
(
uv_lo›_t
* 
lo›
,

1099 
uv_w‹k_t
* 
ªq
,

1100 
uv_w‹k_cb
 
w‹k_cb
,

1101 
uv_a·î_w‹k_cb
 
a·î_w‹k_cb
);

1103 
UV_EXTERN
 
uv_ˇn˚l
(
uv_ªq_t
* 
ªq
);

1106 
	suv_˝u_times_s
 {

1107 
uöt64_t
 
	gu£r
;

1108 
uöt64_t
 
	gni˚
;

1109 
uöt64_t
 
	gsys
;

1110 
uöt64_t
 
	gidÀ
;

1111 
uöt64_t
 
	gúq
;

1114 
	suv_˝u_öfo_s
 {

1115 * 
	gmodñ
;

1116 
	g•ìd
;

1117 
uv_˝u_times_s
 
	g˝u_times
;

1120 
	suv_öãrÁ˚_addªss_s
 {

1121 * 
	g«me
;

1122 
	gphys_addr
[6];

1123 
	gis_öã∫Æ
;

1125 
sockaddr_ö
 
	gaddªss4
;

1126 
sockaddr_ö6
 
	gaddªss6
;

1127 } 
	gaddªss
;

1129 
sockaddr_ö
 
	g√tmask4
;

1130 
sockaddr_ö6
 
	g√tmask6
;

1131 } 
	g√tmask
;

1134 
	suv_∑sswd_s
 {

1135 * 
	gu£∫ame
;

1136 
	guid
;

1137 
	ggid
;

1138 * 
	gshñl
;

1139 * 
	ghomedú
;

1142 
	suv_ut¢ame_s
 {

1143 
	gsy¢ame
[256];

1144 
	gªÀa£
[256];

1145 
	gvîsi⁄
[256];

1146 
	gmachöe
[256];

1152 
	suv_°©fs_s
 {

1153 
uöt64_t
 
	gf_ty≥
;

1154 
uöt64_t
 
	gf_bsize
;

1155 
uöt64_t
 
	gf_blocks
;

1156 
uöt64_t
 
	gf_b‰ì
;

1157 
uöt64_t
 
	gf_bavaû
;

1158 
uöt64_t
 
	gf_fûes
;

1159 
uöt64_t
 
	gf_f‰ì
;

1160 
uöt64_t
 
	gf_•¨e
[4];

1164 
	gUV_DIRENT_UNKNOWN
,

1165 
	gUV_DIRENT_FILE
,

1166 
	gUV_DIRENT_DIR
,

1167 
	gUV_DIRENT_LINK
,

1168 
	gUV_DIRENT_FIFO
,

1169 
	gUV_DIRENT_SOCKET
,

1170 
	gUV_DIRENT_CHAR
,

1171 
	gUV_DIRENT_BLOCK


1172 } 
	tuv_dúít_ty≥_t
;

1174 
	suv_dúít_s
 {

1175 c⁄° * 
	g«me
;

1176 
uv_dúít_ty≥_t
 
	gty≥
;

1179 
UV_EXTERN
 ** 
uv_£tup_¨gs
(
¨gc
, ** 
¨gv
);

1180 
UV_EXTERN
 
uv_gë_¥o˚ss_tôÀ
(* 
buf„r
, 
size_t
 
size
);

1181 
UV_EXTERN
 
uv_£t_¥o˚ss_tôÀ
(c⁄° * 
tôÀ
);

1182 
UV_EXTERN
 
uv_ªsidít_£t_mem‹y
(
size_t
* 
rss
);

1183 
UV_EXTERN
 
uv_u±ime
(* 
u±ime
);

1184 
UV_EXTERN
 
uv_os_fd_t
 
uv_gë_osfh™dÀ
(
fd
);

1185 
UV_EXTERN
 
uv_›í_osfh™dÀ
(
uv_os_fd_t
 
os_fd
);

1188 
	gtv_£c
;

1189 
	gtv_u£c
;

1190 } 
	tuv_timevÆ_t
;

1193 
öt64_t
 
	gtv_£c
;

1194 
öt32_t
 
	gtv_u£c
;

1195 } 
	tuv_timevÆ64_t
;

1198 
uv_timevÆ_t
 
	gru_utime
;

1199 
uv_timevÆ_t
 
	gru_°ime
;

1200 
uöt64_t
 
	gru_maxrss
;

1201 
uöt64_t
 
	gru_ixrss
;

1202 
uöt64_t
 
	gru_idrss
;

1203 
uöt64_t
 
	gru_i§ss
;

1204 
uöt64_t
 
	gru_möÊt
;

1205 
uöt64_t
 
	gru_majÊt
;

1206 
uöt64_t
 
	gru_nsw≠
;

1207 
uöt64_t
 
	gru_öblock
;

1208 
uöt64_t
 
	gru_oublock
;

1209 
uöt64_t
 
	gru_msg¢d
;

1210 
uöt64_t
 
	gru_msgrcv
;

1211 
uöt64_t
 
	gru_nsig«ls
;

1212 
uöt64_t
 
	gru_nvcsw
;

1213 
uöt64_t
 
	gru_nivcsw
;

1214 } 
	tuv_rußge_t
;

1216 
UV_EXTERN
 
uv_gërußge
(
uv_rußge_t
* 
rußge
);

1218 
UV_EXTERN
 
uv_os_homedú
(* 
buf„r
, 
size_t
* 
size
);

1219 
UV_EXTERN
 
uv_os_tmpdú
(* 
buf„r
, 
size_t
* 
size
);

1220 
UV_EXTERN
 
uv_os_gë_∑sswd
(
uv_∑sswd_t
* 
pwd
);

1221 
UV_EXTERN
 
uv_os_‰ì_∑sswd
(
uv_∑sswd_t
* 
pwd
);

1222 
UV_EXTERN
 
uv_pid_t
 
uv_os_gëpid
();

1223 
UV_EXTERN
 
uv_pid_t
 
uv_os_gëµid
();

1225 #i‡
deföed
(
__PASE__
)

1227 
	#UV_PRIORITY_LOW
 39

	)

1228 
	#UV_PRIORITY_BELOW_NORMAL
 15

	)

1229 
	#UV_PRIORITY_NORMAL
 0

	)

1230 
	#UV_PRIORITY_ABOVE_NORMAL
 -4

	)

1231 
	#UV_PRIORITY_HIGH
 -7

	)

1232 
	#UV_PRIORITY_HIGHEST
 -10

	)

1234 
	#UV_PRIORITY_LOW
 19

	)

1235 
	#UV_PRIORITY_BELOW_NORMAL
 10

	)

1236 
	#UV_PRIORITY_NORMAL
 0

	)

1237 
	#UV_PRIORITY_ABOVE_NORMAL
 -7

	)

1238 
	#UV_PRIORITY_HIGH
 -14

	)

1239 
	#UV_PRIORITY_HIGHEST
 -20

	)

1242 
UV_EXTERN
 
uv_os_gë¥i‹ôy
(
uv_pid_t
 
pid
, * 
¥i‹ôy
);

1243 
UV_EXTERN
 
uv_os_£çri‹ôy
(
uv_pid_t
 
pid
, 
¥i‹ôy
);

1245 
UV_EXTERN
 
uv_˝u_öfo
(
uv_˝u_öfo_t
** 
˝u_öfos
, * 
cou¡
);

1246 
UV_EXTERN
 
uv_‰ì_˝u_öfo
(
uv_˝u_öfo_t
* 
˝u_öfos
, 
cou¡
);

1248 
UV_EXTERN
 
uv_öãrÁ˚_addªs£s
(
uv_öãrÁ˚_addªss_t
** 
addªs£s
,

1249 * 
cou¡
);

1250 
UV_EXTERN
 
uv_‰ì_öãrÁ˚_addªs£s
(
uv_öãrÁ˚_addªss_t
* 
addªs£s
,

1251 
cou¡
);

1253 
	suv_ív_ôem_s
 {

1254 * 
	g«me
;

1255 * 
	gvÆue
;

1258 
UV_EXTERN
 
uv_os_ívú⁄
(
uv_ív_ôem_t
** 
ívôems
, * 
cou¡
);

1259 
UV_EXTERN
 
uv_os_‰ì_ívú⁄
(
uv_ív_ôem_t
* 
ívôems
, 
cou¡
);

1260 
UV_EXTERN
 
uv_os_gëív
(c⁄° * 
«me
, * 
buf„r
, 
size_t
* 
size
);

1261 
UV_EXTERN
 
uv_os_£ãnv
(c⁄° * 
«me
, c⁄° * 
vÆue
);

1262 
UV_EXTERN
 
uv_os_un£ãnv
(c⁄° * 
«me
);

1264 #ifde‡
MAXHOSTNAMELEN


1265 
	#UV_MAXHOSTNAMESIZE
 (
MAXHOSTNAMELEN
 + 1)

	)

1272 
	#UV_MAXHOSTNAMESIZE
 256

	)

1275 
UV_EXTERN
 
uv_os_gëho°«me
(* 
buf„r
, 
size_t
* 
size
);

1277 
UV_EXTERN
 
uv_os_u«me
(
uv_ut¢ame_t
* 
buf„r
);

1279 
UV_EXTERN
 
uöt64_t
 
uv_mërics_idÀ_time
(
uv_lo›_t
* 
lo›
);

1282 
	gUV_FS_UNKNOWN
 = -1,

1283 
	gUV_FS_CUSTOM
,

1284 
	gUV_FS_OPEN
,

1285 
	gUV_FS_CLOSE
,

1286 
	gUV_FS_READ
,

1287 
	gUV_FS_WRITE
,

1288 
	gUV_FS_SENDFILE
,

1289 
	gUV_FS_STAT
,

1290 
	gUV_FS_LSTAT
,

1291 
	gUV_FS_FSTAT
,

1292 
	gUV_FS_FTRUNCATE
,

1293 
	gUV_FS_UTIME
,

1294 
	gUV_FS_FUTIME
,

1295 
	gUV_FS_ACCESS
,

1296 
	gUV_FS_CHMOD
,

1297 
	gUV_FS_FCHMOD
,

1298 
	gUV_FS_FSYNC
,

1299 
	gUV_FS_FDATASYNC
,

1300 
	gUV_FS_UNLINK
,

1301 
	gUV_FS_RMDIR
,

1302 
	gUV_FS_MKDIR
,

1303 
	gUV_FS_MKDTEMP
,

1304 
	gUV_FS_RENAME
,

1305 
	gUV_FS_SCANDIR
,

1306 
	gUV_FS_LINK
,

1307 
	gUV_FS_SYMLINK
,

1308 
	gUV_FS_READLINK
,

1309 
	gUV_FS_CHOWN
,

1310 
	gUV_FS_FCHOWN
,

1311 
	gUV_FS_REALPATH
,

1312 
	gUV_FS_COPYFILE
,

1313 
	gUV_FS_LCHOWN
,

1314 
	gUV_FS_OPENDIR
,

1315 
	gUV_FS_READDIR
,

1316 
	gUV_FS_CLOSEDIR
,

1317 
	gUV_FS_STATFS
,

1318 
	gUV_FS_MKSTEMP
,

1319 
	gUV_FS_LUTIME


1320 } 
	tuv_fs_ty≥
;

1322 
	suv_dú_s
 {

1323 
uv_dúít_t
* 
	gdúíts
;

1324 
size_t
 
	g√¡rõs
;

1325 * 
	gª£rved
[4];

1326 
	gUV_DIR_PRIVATE_FIELDS


1330 
	suv_fs_s
 {

1331 
UV_REQ_FIELDS


1332 
uv_fs_ty≥
 
	gfs_ty≥
;

1333 
uv_lo›_t
* 
	glo›
;

1334 
uv_fs_cb
 
	gcb
;

1335 
ssize_t
 
	gªsu…
;

1336 * 
	g±r
;

1337 c⁄° * 
	g∑th
;

1338 
uv_°©_t
 
	g°©buf
;

1339 
	gUV_FS_PRIVATE_FIELDS


1342 
UV_EXTERN
 
uv_fs_ty≥
 
uv_fs_gë_ty≥
(c⁄° 
uv_fs_t
*);

1343 
UV_EXTERN
 
ssize_t
 
uv_fs_gë_ªsu…
(c⁄° 
uv_fs_t
*);

1344 
UV_EXTERN
 
uv_fs_gë_sy°em_îr‹
(c⁄° 
uv_fs_t
*);

1345 
UV_EXTERN
 * 
uv_fs_gë_±r
(c⁄° 
uv_fs_t
*);

1346 
UV_EXTERN
 c⁄° * 
uv_fs_gë_∑th
(c⁄° 
uv_fs_t
*);

1347 
UV_EXTERN
 
uv_°©_t
* 
uv_fs_gë_°©buf
(
uv_fs_t
*);

1349 
UV_EXTERN
 
uv_fs_ªq_˛ónup
(
uv_fs_t
* 
ªq
);

1350 
UV_EXTERN
 
uv_fs_˛o£
(
uv_lo›_t
* 
lo›
,

1351 
uv_fs_t
* 
ªq
,

1352 
uv_fûe
 
fûe
,

1353 
uv_fs_cb
 
cb
);

1354 
UV_EXTERN
 
uv_fs_›í
(
uv_lo›_t
* 
lo›
,

1355 
uv_fs_t
* 
ªq
,

1356 c⁄° * 
∑th
,

1357 
Êags
,

1358 
mode
,

1359 
uv_fs_cb
 
cb
);

1360 
UV_EXTERN
 
uv_fs_ªad
(
uv_lo›_t
* 
lo›
,

1361 
uv_fs_t
* 
ªq
,

1362 
uv_fûe
 
fûe
,

1363 c⁄° 
uv_buf_t
 
bufs
[],

1364 
nbufs
,

1365 
öt64_t
 
off£t
,

1366 
uv_fs_cb
 
cb
);

1367 
UV_EXTERN
 
uv_fs_u∆ök
(
uv_lo›_t
* 
lo›
,

1368 
uv_fs_t
* 
ªq
,

1369 c⁄° * 
∑th
,

1370 
uv_fs_cb
 
cb
);

1371 
UV_EXTERN
 
uv_fs_wrôe
(
uv_lo›_t
* 
lo›
,

1372 
uv_fs_t
* 
ªq
,

1373 
uv_fûe
 
fûe
,

1374 c⁄° 
uv_buf_t
 
bufs
[],

1375 
nbufs
,

1376 
öt64_t
 
off£t
,

1377 
uv_fs_cb
 
cb
);

1382 
	#UV_FS_COPYFILE_EXCL
 0x0001

	)

1388 
	#UV_FS_COPYFILE_FICLONE
 0x0002

	)

1394 
	#UV_FS_COPYFILE_FICLONE_FORCE
 0x0004

	)

1396 
UV_EXTERN
 
uv_fs_c›yfûe
(
uv_lo›_t
* 
lo›
,

1397 
uv_fs_t
* 
ªq
,

1398 c⁄° * 
∑th
,

1399 c⁄° * 
√w_∑th
,

1400 
Êags
,

1401 
uv_fs_cb
 
cb
);

1402 
UV_EXTERN
 
uv_fs_mkdú
(
uv_lo›_t
* 
lo›
,

1403 
uv_fs_t
* 
ªq
,

1404 c⁄° * 
∑th
,

1405 
mode
,

1406 
uv_fs_cb
 
cb
);

1407 
UV_EXTERN
 
uv_fs_mkdãmp
(
uv_lo›_t
* 
lo›
,

1408 
uv_fs_t
* 
ªq
,

1409 c⁄° * 
çl
,

1410 
uv_fs_cb
 
cb
);

1411 
UV_EXTERN
 
uv_fs_mk°emp
(
uv_lo›_t
* 
lo›
,

1412 
uv_fs_t
* 
ªq
,

1413 c⁄° * 
çl
,

1414 
uv_fs_cb
 
cb
);

1415 
UV_EXTERN
 
uv_fs_rmdú
(
uv_lo›_t
* 
lo›
,

1416 
uv_fs_t
* 
ªq
,

1417 c⁄° * 
∑th
,

1418 
uv_fs_cb
 
cb
);

1419 
UV_EXTERN
 
uv_fs_sˇndú
(
uv_lo›_t
* 
lo›
,

1420 
uv_fs_t
* 
ªq
,

1421 c⁄° * 
∑th
,

1422 
Êags
,

1423 
uv_fs_cb
 
cb
);

1424 
UV_EXTERN
 
uv_fs_sˇndú_√xt
(
uv_fs_t
* 
ªq
,

1425 
uv_dúít_t
* 
ít
);

1426 
UV_EXTERN
 
uv_fs_›ídú
(
uv_lo›_t
* 
lo›
,

1427 
uv_fs_t
* 
ªq
,

1428 c⁄° * 
∑th
,

1429 
uv_fs_cb
 
cb
);

1430 
UV_EXTERN
 
uv_fs_ªaddú
(
uv_lo›_t
* 
lo›
,

1431 
uv_fs_t
* 
ªq
,

1432 
uv_dú_t
* 
dú
,

1433 
uv_fs_cb
 
cb
);

1434 
UV_EXTERN
 
uv_fs_˛o£dú
(
uv_lo›_t
* 
lo›
,

1435 
uv_fs_t
* 
ªq
,

1436 
uv_dú_t
* 
dú
,

1437 
uv_fs_cb
 
cb
);

1438 
UV_EXTERN
 
uv_fs_°©
(
uv_lo›_t
* 
lo›
,

1439 
uv_fs_t
* 
ªq
,

1440 c⁄° * 
∑th
,

1441 
uv_fs_cb
 
cb
);

1442 
UV_EXTERN
 
uv_fs_f°©
(
uv_lo›_t
* 
lo›
,

1443 
uv_fs_t
* 
ªq
,

1444 
uv_fûe
 
fûe
,

1445 
uv_fs_cb
 
cb
);

1446 
UV_EXTERN
 
uv_fs_ª«me
(
uv_lo›_t
* 
lo›
,

1447 
uv_fs_t
* 
ªq
,

1448 c⁄° * 
∑th
,

1449 c⁄° * 
√w_∑th
,

1450 
uv_fs_cb
 
cb
);

1451 
UV_EXTERN
 
uv_fs_fsync
(
uv_lo›_t
* 
lo›
,

1452 
uv_fs_t
* 
ªq
,

1453 
uv_fûe
 
fûe
,

1454 
uv_fs_cb
 
cb
);

1455 
UV_EXTERN
 
uv_fs_fd©async
(
uv_lo›_t
* 
lo›
,

1456 
uv_fs_t
* 
ªq
,

1457 
uv_fûe
 
fûe
,

1458 
uv_fs_cb
 
cb
);

1459 
UV_EXTERN
 
uv_fs_·runˇã
(
uv_lo›_t
* 
lo›
,

1460 
uv_fs_t
* 
ªq
,

1461 
uv_fûe
 
fûe
,

1462 
öt64_t
 
off£t
,

1463 
uv_fs_cb
 
cb
);

1464 
UV_EXTERN
 
uv_fs_£ndfûe
(
uv_lo›_t
* 
lo›
,

1465 
uv_fs_t
* 
ªq
,

1466 
uv_fûe
 
out_fd
,

1467 
uv_fûe
 
ö_fd
,

1468 
öt64_t
 
ö_off£t
,

1469 
size_t
 
Àngth
,

1470 
uv_fs_cb
 
cb
);

1471 
UV_EXTERN
 
uv_fs_ac˚ss
(
uv_lo›_t
* 
lo›
,

1472 
uv_fs_t
* 
ªq
,

1473 c⁄° * 
∑th
,

1474 
mode
,

1475 
uv_fs_cb
 
cb
);

1476 
UV_EXTERN
 
uv_fs_chmod
(
uv_lo›_t
* 
lo›
,

1477 
uv_fs_t
* 
ªq
,

1478 c⁄° * 
∑th
,

1479 
mode
,

1480 
uv_fs_cb
 
cb
);

1481 
UV_EXTERN
 
uv_fs_utime
(
uv_lo›_t
* 
lo›
,

1482 
uv_fs_t
* 
ªq
,

1483 c⁄° * 
∑th
,

1484 
©ime
,

1485 
mtime
,

1486 
uv_fs_cb
 
cb
);

1487 
UV_EXTERN
 
uv_fs_futime
(
uv_lo›_t
* 
lo›
,

1488 
uv_fs_t
* 
ªq
,

1489 
uv_fûe
 
fûe
,

1490 
©ime
,

1491 
mtime
,

1492 
uv_fs_cb
 
cb
);

1493 
UV_EXTERN
 
uv_fs_lutime
(
uv_lo›_t
* 
lo›
,

1494 
uv_fs_t
* 
ªq
,

1495 c⁄° * 
∑th
,

1496 
©ime
,

1497 
mtime
,

1498 
uv_fs_cb
 
cb
);

1499 
UV_EXTERN
 
uv_fs_l°©
(
uv_lo›_t
* 
lo›
,

1500 
uv_fs_t
* 
ªq
,

1501 c⁄° * 
∑th
,

1502 
uv_fs_cb
 
cb
);

1503 
UV_EXTERN
 
uv_fs_lök
(
uv_lo›_t
* 
lo›
,

1504 
uv_fs_t
* 
ªq
,

1505 c⁄° * 
∑th
,

1506 c⁄° * 
√w_∑th
,

1507 
uv_fs_cb
 
cb
);

1513 
	#UV_FS_SYMLINK_DIR
 0x0001

	)

1519 
	#UV_FS_SYMLINK_JUNCTION
 0x0002

	)

1521 
UV_EXTERN
 
uv_fs_symlök
(
uv_lo›_t
* 
lo›
,

1522 
uv_fs_t
* 
ªq
,

1523 c⁄° * 
∑th
,

1524 c⁄° * 
√w_∑th
,

1525 
Êags
,

1526 
uv_fs_cb
 
cb
);

1527 
UV_EXTERN
 
uv_fs_ªadlök
(
uv_lo›_t
* 
lo›
,

1528 
uv_fs_t
* 
ªq
,

1529 c⁄° * 
∑th
,

1530 
uv_fs_cb
 
cb
);

1531 
UV_EXTERN
 
uv_fs_ªÆ∑th
(
uv_lo›_t
* 
lo›
,

1532 
uv_fs_t
* 
ªq
,

1533 c⁄° * 
∑th
,

1534 
uv_fs_cb
 
cb
);

1535 
UV_EXTERN
 
uv_fs_fchmod
(
uv_lo›_t
* 
lo›
,

1536 
uv_fs_t
* 
ªq
,

1537 
uv_fûe
 
fûe
,

1538 
mode
,

1539 
uv_fs_cb
 
cb
);

1540 
UV_EXTERN
 
uv_fs_chown
(
uv_lo›_t
* 
lo›
,

1541 
uv_fs_t
* 
ªq
,

1542 c⁄° * 
∑th
,

1543 
uv_uid_t
 
uid
,

1544 
uv_gid_t
 
gid
,

1545 
uv_fs_cb
 
cb
);

1546 
UV_EXTERN
 
uv_fs_fchown
(
uv_lo›_t
* 
lo›
,

1547 
uv_fs_t
* 
ªq
,

1548 
uv_fûe
 
fûe
,

1549 
uv_uid_t
 
uid
,

1550 
uv_gid_t
 
gid
,

1551 
uv_fs_cb
 
cb
);

1552 
UV_EXTERN
 
uv_fs_lchown
(
uv_lo›_t
* 
lo›
,

1553 
uv_fs_t
* 
ªq
,

1554 c⁄° * 
∑th
,

1555 
uv_uid_t
 
uid
,

1556 
uv_gid_t
 
gid
,

1557 
uv_fs_cb
 
cb
);

1558 
UV_EXTERN
 
uv_fs_°©fs
(
uv_lo›_t
* 
lo›
,

1559 
uv_fs_t
* 
ªq
,

1560 c⁄° * 
∑th
,

1561 
uv_fs_cb
 
cb
);

1564 
	euv_fs_evít
 {

1565 
	gUV_RENAME
 = 1,

1566 
	gUV_CHANGE
 = 2

1570 
	suv_fs_evít_s
 {

1571 
UV_HANDLE_FIELDS


1573 * 
	g∑th
;

1574 
	gUV_FS_EVENT_PRIVATE_FIELDS


1581 
	suv_fs_pﬁl_s
 {

1582 
UV_HANDLE_FIELDS


1584 * 
	gpﬁl_˘x
;

1587 
UV_EXTERN
 
uv_fs_pﬁl_öô
(
uv_lo›_t
* 
lo›
, 
uv_fs_pﬁl_t
* 
h™dÀ
);

1588 
UV_EXTERN
 
uv_fs_pﬁl_°¨t
(
uv_fs_pﬁl_t
* 
h™dÀ
,

1589 
uv_fs_pﬁl_cb
 
pﬁl_cb
,

1590 c⁄° * 
∑th
,

1591 
öãrvÆ
);

1592 
UV_EXTERN
 
uv_fs_pﬁl_°›
(
uv_fs_pﬁl_t
* 
h™dÀ
);

1593 
UV_EXTERN
 
uv_fs_pﬁl_gë∑th
(
uv_fs_pﬁl_t
* 
h™dÀ
,

1594 * 
buf„r
,

1595 
size_t
* 
size
);

1598 
	suv_sig«l_s
 {

1599 
UV_HANDLE_FIELDS


1600 
uv_sig«l_cb
 
	gsig«l_cb
;

1601 
	gsignum
;

1602 
	gUV_SIGNAL_PRIVATE_FIELDS


1605 
UV_EXTERN
 
uv_sig«l_öô
(
uv_lo›_t
* 
lo›
, 
uv_sig«l_t
* 
h™dÀ
);

1606 
UV_EXTERN
 
uv_sig«l_°¨t
(
uv_sig«l_t
* 
h™dÀ
,

1607 
uv_sig«l_cb
 
sig«l_cb
,

1608 
signum
);

1609 
UV_EXTERN
 
uv_sig«l_°¨t_⁄eshŸ
(
uv_sig«l_t
* 
h™dÀ
,

1610 
uv_sig«l_cb
 
sig«l_cb
,

1611 
signum
);

1612 
UV_EXTERN
 
uv_sig«l_°›
(
uv_sig«l_t
* 
h™dÀ
);

1614 
UV_EXTERN
 
uv_lﬂdavg
(
avg
[3]);

1620 
	euv_fs_evít_Êags
 {

1628 
	gUV_FS_EVENT_WATCH_ENTRY
 = 1,

1637 
	gUV_FS_EVENT_STAT
 = 2,

1644 
	gUV_FS_EVENT_RECURSIVE
 = 4

1648 
UV_EXTERN
 
uv_fs_evít_öô
(
uv_lo›_t
* 
lo›
, 
uv_fs_evít_t
* 
h™dÀ
);

1649 
UV_EXTERN
 
uv_fs_evít_°¨t
(
uv_fs_evít_t
* 
h™dÀ
,

1650 
uv_fs_evít_cb
 
cb
,

1651 c⁄° * 
∑th
,

1652 
Êags
);

1653 
UV_EXTERN
 
uv_fs_evít_°›
(
uv_fs_evít_t
* 
h™dÀ
);

1654 
UV_EXTERN
 
uv_fs_evít_gë∑th
(
uv_fs_evít_t
* 
h™dÀ
,

1655 * 
buf„r
,

1656 
size_t
* 
size
);

1658 
UV_EXTERN
 
uv_ù4_addr
(c⁄° * 
ù
, 
p‹t
, 
sockaddr_ö
* 
addr
);

1659 
UV_EXTERN
 
uv_ù6_addr
(c⁄° * 
ù
, 
p‹t
, 
sockaddr_ö6
* 
addr
);

1661 
UV_EXTERN
 
uv_ù4_«me
(c⁄° 
sockaddr_ö
* 
§c
, * 
d°
, 
size_t
 
size
);

1662 
UV_EXTERN
 
uv_ù6_«me
(c⁄° 
sockaddr_ö6
* 
§c
, * 
d°
, 
size_t
 
size
);

1663 
UV_EXTERN
 
uv_ù_«me
(c⁄° 
sockaddr
* 
§c
, * 
d°
, 
size_t
 
size
);

1665 
UV_EXTERN
 
uv_öë_¡›
(
af
, c⁄° * 
§c
, * 
d°
, 
size_t
 
size
);

1666 
UV_EXTERN
 
uv_öë_±⁄
(
af
, c⁄° * 
§c
, * 
d°
);

1669 
	suv_øndom_s
 {

1670 
UV_REQ_FIELDS


1672 
uv_lo›_t
* 
	glo›
;

1674 
	g°©us
;

1675 * 
	gbuf
;

1676 
size_t
 
	gbuÊí
;

1677 
uv_øndom_cb
 
	gcb
;

1678 
uv__w‹k
 
	gw‹k_ªq
;

1681 
UV_EXTERN
 
uv_øndom
(
uv_lo›_t
* 
lo›
,

1682 
uv_øndom_t
* 
ªq
,

1683 *
buf
,

1684 
size_t
 
buÊí
,

1685 
Êags
,

1686 
uv_øndom_cb
 
cb
);

1688 #i‡
deföed
(
IF_NAMESIZE
)

1689 
	#UV_IF_NAMESIZE
 (
IF_NAMESIZE
 + 1)

	)

1690 #ñi‡
deföed
(
IFNAMSIZ
)

1691 
	#UV_IF_NAMESIZE
 (
IFNAMSIZ
 + 1)

	)

1693 
	#UV_IF_NAMESIZE
 (16 + 1)

	)

1696 
UV_EXTERN
 
uv_if_ödext⁄ame
(
ifödex
,

1697 * 
buf„r
,

1698 
size_t
* 
size
);

1699 
UV_EXTERN
 
uv_if_ödextoiid
(
ifödex
,

1700 * 
buf„r
,

1701 
size_t
* 
size
);

1703 
UV_EXTERN
 
uv_exï©h
(* 
buf„r
, 
size_t
* 
size
);

1705 
UV_EXTERN
 
uv_cwd
(* 
buf„r
, 
size_t
* 
size
);

1707 
UV_EXTERN
 
uv_chdú
(c⁄° * 
dú
);

1709 
UV_EXTERN
 
uöt64_t
 
uv_gë_‰ì_mem‹y
();

1710 
UV_EXTERN
 
uöt64_t
 
uv_gë_tŸÆ_mem‹y
();

1711 
UV_EXTERN
 
uöt64_t
 
uv_gë_c⁄°øöed_mem‹y
();

1713 
UV_EXTERN
 
uöt64_t
 
uv_hπime
();

1714 
UV_EXTERN
 
uv_¶ìp
(
m£c
);

1716 
UV_EXTERN
 
uv_dißbÀ_°dio_öhîô™˚
();

1718 
UV_EXTERN
 
uv_dl›í
(c⁄° * 
fûíame
, 
uv_lib_t
* 
lib
);

1719 
UV_EXTERN
 
uv_dl˛o£
(
uv_lib_t
* 
lib
);

1720 
UV_EXTERN
 
uv_dlsym
(
uv_lib_t
* 
lib
, c⁄° * 
«me
, ** 
±r
);

1721 
UV_EXTERN
 c⁄° * 
uv_dÀº‹
(c⁄° 
uv_lib_t
* 
lib
);

1723 
UV_EXTERN
 
uv_muãx_öô
(
uv_muãx_t
* 
h™dÀ
);

1724 
UV_EXTERN
 
uv_muãx_öô_ªcursive
(
uv_muãx_t
* 
h™dÀ
);

1725 
UV_EXTERN
 
uv_muãx_de°roy
(
uv_muãx_t
* 
h™dÀ
);

1726 
UV_EXTERN
 
uv_muãx_lock
(
uv_muãx_t
* 
h™dÀ
);

1727 
UV_EXTERN
 
uv_muãx_åylock
(
uv_muãx_t
* 
h™dÀ
);

1728 
UV_EXTERN
 
uv_muãx_u∆ock
(
uv_muãx_t
* 
h™dÀ
);

1730 
UV_EXTERN
 
uv_rwlock_öô
(
uv_rwlock_t
* 
rwlock
);

1731 
UV_EXTERN
 
uv_rwlock_de°roy
(
uv_rwlock_t
* 
rwlock
);

1732 
UV_EXTERN
 
uv_rwlock_rdlock
(
uv_rwlock_t
* 
rwlock
);

1733 
UV_EXTERN
 
uv_rwlock_åyrdlock
(
uv_rwlock_t
* 
rwlock
);

1734 
UV_EXTERN
 
uv_rwlock_rdu∆ock
(
uv_rwlock_t
* 
rwlock
);

1735 
UV_EXTERN
 
uv_rwlock_wæock
(
uv_rwlock_t
* 
rwlock
);

1736 
UV_EXTERN
 
uv_rwlock_åywæock
(
uv_rwlock_t
* 
rwlock
);

1737 
UV_EXTERN
 
uv_rwlock_wru∆ock
(
uv_rwlock_t
* 
rwlock
);

1739 
UV_EXTERN
 
uv_£m_öô
(
uv_£m_t
* 
£m
, 
vÆue
);

1740 
UV_EXTERN
 
uv_£m_de°roy
(
uv_£m_t
* 
£m
);

1741 
UV_EXTERN
 
uv_£m_po°
(
uv_£m_t
* 
£m
);

1742 
UV_EXTERN
 
uv_£m_waô
(
uv_£m_t
* 
£m
);

1743 
UV_EXTERN
 
uv_£m_åywaô
(
uv_£m_t
* 
£m
);

1745 
UV_EXTERN
 
uv_c⁄d_öô
(
uv_c⁄d_t
* 
c⁄d
);

1746 
UV_EXTERN
 
uv_c⁄d_de°roy
(
uv_c⁄d_t
* 
c⁄d
);

1747 
UV_EXTERN
 
uv_c⁄d_sig«l
(
uv_c⁄d_t
* 
c⁄d
);

1748 
UV_EXTERN
 
uv_c⁄d_brﬂdˇ°
(
uv_c⁄d_t
* 
c⁄d
);

1750 
UV_EXTERN
 
uv_b¨rõr_öô
(
uv_b¨rõr_t
* 
b¨rõr
, 
cou¡
);

1751 
UV_EXTERN
 
uv_b¨rõr_de°roy
(
uv_b¨rõr_t
* 
b¨rõr
);

1752 
UV_EXTERN
 
uv_b¨rõr_waô
(
uv_b¨rõr_t
* 
b¨rõr
);

1754 
UV_EXTERN
 
uv_c⁄d_waô
(
uv_c⁄d_t
* 
c⁄d
, 
uv_muãx_t
* 
muãx
);

1755 
UV_EXTERN
 
uv_c⁄d_timedwaô
(
uv_c⁄d_t
* 
c⁄d
,

1756 
uv_muãx_t
* 
muãx
,

1757 
uöt64_t
 
timeout
);

1759 
UV_EXTERN
 
uv_⁄˚
(
uv_⁄˚_t
* 
gu¨d
, (*
ˇŒback
)());

1761 
UV_EXTERN
 
uv_key_¸óã
(
uv_key_t
* 
key
);

1762 
UV_EXTERN
 
uv_key_dñëe
(
uv_key_t
* 
key
);

1763 
UV_EXTERN
 * 
uv_key_gë
(
uv_key_t
* 
key
);

1764 
UV_EXTERN
 
uv_key_£t
(
uv_key_t
* 
key
, * 
vÆue
);

1766 
UV_EXTERN
 
uv_gëtimeofday
(
uv_timevÆ64_t
* 
tv
);

1768 (*
	guv_thªad_cb
)(* 
	t¨g
);

1770 
UV_EXTERN
 
uv_thªad_¸óã
(
uv_thªad_t
* 
tid
, 
uv_thªad_cb
 
íåy
, * 
¨g
);

1773 
	gUV_THREAD_NO_FLAGS
 = 0x00,

1774 
	gUV_THREAD_HAS_STACK_SIZE
 = 0x01

1775 } 
	tuv_thªad_¸óã_Êags
;

1777 
	suv_thªad_›ti⁄s_s
 {

1778 
	gÊags
;

1779 
size_t
 
	g°ack_size
;

1783 
uv_thªad_›ti⁄s_s
 
	tuv_thªad_›ti⁄s_t
;

1785 
UV_EXTERN
 
uv_thªad_¸óã_ex
(
uv_thªad_t
* 
tid
,

1786 c⁄° 
uv_thªad_›ti⁄s_t
* 
∑øms
,

1787 
uv_thªad_cb
 
íåy
,

1788 * 
¨g
);

1789 
UV_EXTERN
 
uv_thªad_t
 
uv_thªad_£lf
();

1790 
UV_EXTERN
 
uv_thªad_joö
(
uv_thªad_t
 *
tid
);

1791 
UV_EXTERN
 
uv_thªad_equÆ
(c⁄° 
uv_thªad_t
* 
t1
, c⁄° uv_thªad_t* 
t2
);

1794 
	#XX
(
_
, 
«me
Ë
uv_
 ##Çamê## 
_t
Çame;

	)

1795 
	uuv_™y_h™dÀ
 {

1796 
UV_HANDLE_TYPE_MAP
(
XX
)

1799 
	uuv_™y_ªq
 {

1800 
UV_REQ_TYPE_MAP
(
XX
)

1802 #unde‡
XX


1805 
	suv_lo›_s
 {

1807 * 
	gd©a
;

1809 
	ga˘ive_h™dÀs
;

1810 * 
	gh™dÀ_queue
[2];

1812 * 
	gunu£d
;

1813 
	gcou¡
;

1814 } 
	ga˘ive_ªqs
;

1816 * 
	göã∫Æ_fõlds
;

1818 
	g°›_Êag
;

1819 
	gUV_LOOP_PRIVATE_FIELDS


1822 
UV_EXTERN
 * 
uv_lo›_gë_d©a
(c⁄° 
uv_lo›_t
*);

1823 
UV_EXTERN
 
uv_lo›_£t_d©a
(
uv_lo›_t
*, * 
d©a
);

1826 #unde‡
UV_HANDLE_TYPE_PRIVATE


1827 #unde‡
UV_REQ_TYPE_PRIVATE


1828 #unde‡
UV_REQ_PRIVATE_FIELDS


1829 #unde‡
UV_STREAM_PRIVATE_FIELDS


1830 #unde‡
UV_TCP_PRIVATE_FIELDS


1831 #unde‡
UV_PREPARE_PRIVATE_FIELDS


1832 #unde‡
UV_CHECK_PRIVATE_FIELDS


1833 #unde‡
UV_IDLE_PRIVATE_FIELDS


1834 #unde‡
UV_ASYNC_PRIVATE_FIELDS


1835 #unde‡
UV_TIMER_PRIVATE_FIELDS


1836 #unde‡
UV_GETADDRINFO_PRIVATE_FIELDS


1837 #unde‡
UV_GETNAMEINFO_PRIVATE_FIELDS


1838 #unde‡
UV_FS_REQ_PRIVATE_FIELDS


1839 #unde‡
UV_WORK_PRIVATE_FIELDS


1840 #unde‡
UV_FS_EVENT_PRIVATE_FIELDS


1841 #unde‡
UV_SIGNAL_PRIVATE_FIELDS


1842 #unde‡
UV_LOOP_PRIVATE_FIELDS


1843 #unde‡
UV_LOOP_PRIVATE_PLATFORM_FIELDS


1844 #unde‡
UV__ERR


1846 #ifde‡
__˝lu•lus


	@/usr/include/values.h

22 #i‚def 
_VALUES_H


23 
	#_VALUES_H
 1

	)

25 
	~<„©uªs.h
>

27 
	~<limôs.h
>

29 
	#_TYPEBITS
(
ty≥
Ë( (ty≥Ë* 
CHAR_BIT
)

	)

31 
	#CHARBITS
 
	`_TYPEBITS
 ()

	)

32 
	#SHORTBITS
 
	`_TYPEBITS
 ()

	)

33 
	#INTBITS
 
	`_TYPEBITS
 ()

	)

34 
	#LONGBITS
 
	`_TYPEBITS
 ()

	)

35 
	#PTRBITS
 
	`_TYPEBITS
 (*)

	)

36 
	#DOUBLEBITS
 
	`_TYPEBITS
 ()

	)

37 
	#FLOATBITS
 
	`_TYPEBITS
 ()

	)

39 
	#MINSHORT
 
SHRT_MIN


	)

40 
	#MININT
 
INT_MIN


	)

41 
	#MINLONG
 
LONG_MIN


	)

43 
	#MAXSHORT
 
SHRT_MAX


	)

44 
	#MAXINT
 
INT_MAX


	)

45 
	#MAXLONG
 
LONG_MAX


	)

47 
	#HIBITS
 
MINSHORT


	)

48 
	#HIBITL
 
MINLONG


	)

51 
	~<Êﬂt.h
>

53 
	#MAXDOUBLE
 
DBL_MAX


	)

54 
	#MAXFLOAT
 
FLT_MAX


	)

55 
	#MINDOUBLE
 
DBL_MIN


	)

56 
	#MINFLOAT
 
FLT_MIN


	)

57 
	#DMINEXP
 
DBL_MIN_EXP


	)

58 
	#FMINEXP
 
FLT_MIN_EXP


	)

59 
	#DMAXEXP
 
DBL_MAX_EXP


	)

60 
	#FMAXEXP
 
FLT_MAX_EXP


	)

63 #ifde‡
__USE_MISC


65 
	#BITSPERBYTE
 
CHAR_BIT


	)

	@/usr/include/wait.h

1 
	~<sys/waô.h
>

	@/usr/include/wchar.h

23 #i‚de‡
_WCHAR_H


24 
	#_WCHAR_H
 1

	)

26 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

27 
	~<bôs/libc-hódî-°¨t.h
>

30 
	~<bôs/Êﬂä.h
>

32 
	#__√ed_size_t


	)

33 
	#__√ed_wch¨_t


	)

34 
	#__√ed_NULL


	)

35 
	~<°ddef.h
>

37 
	#__√ed___va_li°


	)

38 
	~<°d¨g.h
>

40 
	~<bôs/wch¨.h
>

41 
	~<bôs/ty≥s/wöt_t.h
>

42 
	~<bôs/ty≥s/mb°©e_t.h
>

43 
	~<bôs/ty≥s/__FILE.h
>

45 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


46 
	~<bôs/ty≥s/FILE.h
>

48 #ifde‡
__USE_XOPEN2K8


49 
	~<bôs/ty≥s/loˇÀ_t.h
>

53 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

54 
	#__CORRECT_ISO_CPP_WCHAR_H_PROTO


	)

57 #i‚de‡
WCHAR_MIN


59 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

60 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

63 #i‚de‡
WEOF


64 
	#WEOF
 (0xffffffffu)

	)

74 #i‡(
deföed
 
__USE_XOPEN
 && !deföed 
__USE_GNU
 \

75 && !(
deföed
 
	g__USE_XOPEN2K
 && !deföed 
	g__USE_XOPEN2KXSI
))

76 
	~<bôs/w˘y≥-wch¨.h
>

79 
__BEGIN_DECLS


83 
	gtm
;

87 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

88 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
)

89 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

92 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

93 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

94 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

97 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

98 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
)

99 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

101 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

102 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

103 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

106 
	$wcscmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
)

107 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

109 
	$wc¢cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

110 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

112 #ifde‡
__USE_XOPEN2K8


114 
	$wcsˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

117 
	$wc¢ˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

118 
size_t
 
__n
Ë
__THROW
;

122 
	$wcsˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

123 
loˇÀ_t
 
__loc
Ë
__THROW
;

125 
	$wc¢ˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

126 
size_t
 
__n
, 
loˇÀ_t
 
__loc
Ë
__THROW
;

131 
	$wcscﬁl
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

135 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

136 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

138 #ifde‡
__USE_XOPEN2K8


144 
	$wcscﬁl_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

145 
loˇÀ_t
 
__loc
Ë
__THROW
;

150 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

151 
size_t
 
__n
, 
loˇÀ_t
 
__loc
Ë
__THROW
;

154 
wch¨_t
 *
	$wcsdup
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW


155 
__©åibuã_mÆloc__
 
__©å_dóŒoc_‰ì
;

159 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


160 "C++" 
wch¨_t
 *
	$wcschr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

161 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

162 "C++" c⁄° 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

163 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

165 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

166 
__THROW
 
__©åibuã_puª__
;

169 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


170 "C++" 
wch¨_t
 *
	$wc§chr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

171 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

172 "C++" c⁄° 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

173 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

175 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

176 
__THROW
 
__©åibuã_puª__
;

179 #ifde‡
__USE_GNU


182 
wch¨_t
 *
	$wcsch∫ul
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__wc
)

183 
__THROW
 
__©åibuã_puª__
;

188 
size_t
 
	$wcsc•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ªje˘
)

189 
__THROW
 
__©åibuã_puª__
;

192 
size_t
 
	$wcs•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

193 
__THROW
 
__©åibuã_puª__
;

195 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


196 "C++" 
wch¨_t
 *
	$wc•brk
 (
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

197 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

198 "C++" c⁄° 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
,

199 c⁄° 
wch¨_t
 *
__ac˚±
)

200 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

202 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

203 
__THROW
 
__©åibuã_puª__
;

206 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


207 "C++" 
wch¨_t
 *
	$wcs°r
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

208 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

209 "C++" c⁄° 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
,

210 c⁄° 
wch¨_t
 *
__√edÀ
)

211 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

213 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

214 
__THROW
 
__©åibuã_puª__
;

218 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

219 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

220 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

223 
size_t
 
	$wc¶í
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

225 #ifde‡
__USE_XOPEN


227 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


228 "C++" 
wch¨_t
 *
	$wcswcs
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

229 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

230 "C++" c⁄° 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
,

231 c⁄° 
wch¨_t
 *
__√edÀ
)

232 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

234 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

235 
__THROW
 
__©åibuã_puª__
;

239 #ifde‡
__USE_XOPEN2K8


241 
size_t
 
	$wc¢Àn
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

242 
__THROW
 
__©åibuã_puª__
;

247 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


248 "C++" 
wch¨_t
 *
	$wmemchr
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

249 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

250 "C++" c⁄° 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
,

251 
size_t
 
__n
)

252 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

254 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

255 
__THROW
 
__©åibuã_puª__
;

259 
	$wmemcmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

260 
__THROW
 
__©åibuã_puª__
;

263 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

264 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

268 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

269 
__THROW
;

272 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

274 #ifde‡
__USE_GNU


277 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

278 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

279 
__THROW
;

285 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

289 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

293 
	$mbsöô
 (c⁄° 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

297 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

298 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

299 
mb°©e_t
 *
__ª°ri˘
 
__p
Ë
__THROW
;

302 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

303 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

306 
size_t
 
	$__mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

307 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

308 
size_t
 
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

309 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

311 #ifde‡
__USE_EXTERN_INLINES


317 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

318 
__exã∫_ölöe
 
wöt_t


319 
	`__NTH
 (
	$btowc
 (
__c
))

320 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

321 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

323 
	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

324 
__exã∫_ölöe
 

325 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

326 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

327 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

329 
__exã∫_ölöe
 
size_t


330 
__NTH
 (
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

331 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

332 {  (
__ps
 !
NULL


333 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

338 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

339 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

340 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

344 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

345 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

346 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

349 #ifdef 
__USE_XOPEN2K8


352 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

353 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

354 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

358 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

359 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

360 
size_t
 
__nwc
, size_à
__Àn
,

361 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

366 #ifde‡
__USE_XOPEN


368 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

372 
	$wcswidth
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

378 
	$wc°od
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

379 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

381 #ifde‡
__USE_ISOC99


383 
	$wc°of
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

384 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

385 
	$wc°ﬁd
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

386 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

391 #i‡
__HAVE_FLOAT16
 && 
deföed
 
__USE_GNU


392 
_Flﬂt16
 
	$wc°of16
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

393 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

396 #i‡
__HAVE_FLOAT32
 && 
deföed
 
__USE_GNU


397 
_Flﬂt32
 
	$wc°of32
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

398 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

401 #i‡
__HAVE_FLOAT64
 && 
deföed
 
__USE_GNU


402 
_Flﬂt64
 
	$wc°of64
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

403 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

406 #i‡
__HAVE_FLOAT128
 && 
deföed
 
__USE_GNU


407 
_Flﬂt128
 
	$wc°of128
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

408 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

411 #i‡
__HAVE_FLOAT32X
 && 
deföed
 
__USE_GNU


412 
_Flﬂt32x
 
	$wc°of32x
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

413 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

416 #i‡
__HAVE_FLOAT64X
 && 
deföed
 
__USE_GNU


417 
_Flﬂt64x
 
	$wc°of64x
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

418 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

421 #i‡
__HAVE_FLOAT128X
 && 
deföed
 
__USE_GNU


422 
_Flﬂt128x
 
	$wc°of128x
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

423 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

429 
	$wc°ﬁ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

430 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

434 
	$wc°oul
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

435 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

436 
__THROW
;

438 #ifde‡
__USE_ISOC99


441 
__exãnsi⁄__


442 
	$wc°ﬁl
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

443 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

444 
__THROW
;

448 
__exãnsi⁄__


449 
	$wc°ouŒ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

450 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

451 
__ba£
Ë
__THROW
;

454 #ifde‡
__USE_GNU


457 
__exãnsi⁄__


458 
	$wc°oq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

459 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

460 
__THROW
;

464 
__exãnsi⁄__


465 
	$wc°ouq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

466 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

467 
__ba£
Ë
__THROW
;

470 #ifde‡
__USE_GNU


474 
	$wc°ﬁ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

475 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

476 
loˇÀ_t
 
__loc
Ë
__THROW
;

478 
	$wc°oul_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

479 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

480 
__ba£
, 
loˇÀ_t
 
__loc
Ë
__THROW
;

482 
__exãnsi⁄__


483 
	$wc°ﬁl_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

484 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

485 
__ba£
, 
loˇÀ_t
 
__loc
Ë
__THROW
;

487 
__exãnsi⁄__


488 
	$wc°ouŒ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

489 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

490 
__ba£
, 
loˇÀ_t
 
__loc
)

491 
__THROW
;

493 
	$wc°od_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

494 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
loˇÀ_t
 
__loc
)

495 
__THROW
;

497 
	$wc°of_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

498 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
loˇÀ_t
 
__loc
)

499 
__THROW
;

501 
	$wc°ﬁd_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

502 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

503 
loˇÀ_t
 
__loc
Ë
__THROW
;

505 #i‡
__HAVE_FLOAT16


506 
_Flﬂt16
 
	$wc°of16_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

507 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

508 
loˇÀ_t
 
__loc
Ë
__THROW
;

511 #i‡
__HAVE_FLOAT32


512 
_Flﬂt32
 
	$wc°of32_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

513 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

514 
loˇÀ_t
 
__loc
Ë
__THROW
;

517 #i‡
__HAVE_FLOAT64


518 
_Flﬂt64
 
	$wc°of64_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

519 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

520 
loˇÀ_t
 
__loc
Ë
__THROW
;

523 #i‡
__HAVE_FLOAT128


524 
_Flﬂt128
 
	$wc°of128_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

525 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

526 
loˇÀ_t
 
__loc
Ë
__THROW
;

529 #i‡
__HAVE_FLOAT32X


530 
_Flﬂt32x
 
	$wc°of32x_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

531 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

532 
loˇÀ_t
 
__loc
Ë
__THROW
;

535 #i‡
__HAVE_FLOAT64X


536 
_Flﬂt64x
 
	$wc°of64x_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

537 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

538 
loˇÀ_t
 
__loc
Ë
__THROW
;

541 #i‡
__HAVE_FLOAT128X


542 
_Flﬂt128x
 
	$wc°of128x_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

543 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

544 
loˇÀ_t
 
__loc
Ë
__THROW
;

549 #ifde‡
__USE_XOPEN2K8


552 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

553 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

557 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

558 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

559 
__THROW
;

565 #i‡
deföed
 
__USE_XOPEN2K8
 || 
	`__GLIBC_USE
 (
LIB_EXT2
)

566 #i‚de‡
__©å_dóŒoc_f˛o£


567 #i‡
deföed
 
__has_buûtö


568 #i‡
	`__has_buûtö
 (
__buûtö_f˛o£
)

571 
	#__©å_dóŒoc_f˛o£
 
	`__©å_dóŒoc
 (
__buûtö_f˛o£
, 1)

	)

575 #i‚de‡
__©å_dóŒoc_f˛o£


576 
	#__©å_dóŒoc_f˛o£


	)

581 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW


582 
__©åibuã_mÆloc__
 
__©å_dóŒoc_f˛o£
;

585 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


588 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

595 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

596 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

602 
	`w¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

605 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

606 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

607 
__THROW
 ;

613 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

614 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

615 
__gnuc_va_li°
 
__¨g
)

621 
	`vw¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

622 
__gnuc_va_li°
 
__¨g
)

626 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

627 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

628 
__gnuc_va_li°
 
__¨g
)

629 
__THROW
 ;

636 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

637 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

643 
	`wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

646 
	$swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

647 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

648 
__THROW
 ;

654 #i‡!
	`__GLIBC_USE
 (
DEPRECATED_SCANF
Ë&& !
deföed
 
__LDBL_COMPAT
 \

655 && 
__LDOUBLE_REDIRECTS_TO_FLOAT128_ABI
 == 0

656 #ifde‡
__REDIRECT


657 
	`__REDIRECT
 (
fwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__°ªam
,

658 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

659 
__isoc99_fwsˇnf
)

661 
	`__REDIRECT
 (
wsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

662 
__isoc99_wsˇnf
)

664 
	`__REDIRECT_NTH
 (
swsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

665 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

666 ...), 
__isoc99_swsˇnf
)

669 
	`__isoc99_fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

670 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

671 
	`__isoc99_wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

672 
	$__isoc99_swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

673 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

674 
__THROW
;

675 
	#fwsˇnf
 
__isoc99_fwsˇnf


	)

676 
	#wsˇnf
 
__isoc99_wsˇnf


	)

677 
	#swsˇnf
 
__isoc99_swsˇnf


	)

683 #ifde‡
__USE_ISOC99


688 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

689 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

690 
__gnuc_va_li°
 
__¨g
)

696 
	`vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

697 
__gnuc_va_li°
 
__¨g
)

700 
	$vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

701 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

702 
__gnuc_va_li°
 
__¨g
)

703 
__THROW
 ;

706 #i‡!
	`__GLIBC_USE
 (
DEPRECATED_SCANF
) \

707 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

708 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
) \

709 && 
__LDOUBLE_REDIRECTS_TO_FLOAT128_ABI
 == 0

710 #ifde‡
__REDIRECT


711 
	`__REDIRECT
 (
vfwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__s
,

712 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

713 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vfwsˇnf
)

715 
	`__REDIRECT
 (
vwsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

716 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vwsˇnf
)

718 
	`__REDIRECT_NTH
 (
vswsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

719 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

720 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vswsˇnf
)

723 
	`__isoc99_vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

724 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

725 
__gnuc_va_li°
 
__¨g
);

726 
	`__isoc99_vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

727 
__gnuc_va_li°
 
__¨g
);

728 
	$__isoc99_vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

729 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

730 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

731 
	#vfwsˇnf
 
__isoc99_vfwsˇnf


	)

732 
	#vwsˇnf
 
__isoc99_vwsˇnf


	)

733 
	#vswsˇnf
 
__isoc99_vswsˇnf


	)

744 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

745 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

751 
wöt_t
 
	`gëwch¨
 ();

758 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

759 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

765 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

773 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

774 
__FILE
 *
__ª°ri˘
 
__°ªam
);

780 
	`Âutws
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

781 
__FILE
 *
__ª°ri˘
 
__°ªam
);

788 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

791 #ifde‡
__USE_GNU


799 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

800 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

808 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

816 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

825 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

826 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

835 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

836 
__FILE
 *
__ª°ri˘
 
__°ªam
);

844 
	`Âutws_u∆ocked
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

845 
__FILE
 *
__ª°ri˘
 
__°ªam
);

852 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

853 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

854 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

856 #ifde‡
__USE_GNU


859 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

860 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

861 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

862 
loˇÀ_t
 
__loc
Ë
__THROW
;

866 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


867 
	~<bôs/wch¨2.h
>

870 
	~<bôs/Êﬂä.h
>

871 #i‡
deföed
 
__LDBL_COMPAT
 || 
__LDOUBLE_REDIRECTS_TO_FLOAT128_ABI
 == 1

872 
	~<bôs/wch¨-ldbl.h
>

875 
__END_DECLS


	@/usr/include/wctype.h

23 #i‚de‡
_WCTYPE_H


24 
	#_WCTYPE_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

28 
	~<bôs/ty≥s/wöt_t.h
>

32 #i‚de‡
WEOF


33 
	#WEOF
 (0xffffffffu)

	)

38 
	~<bôs/w˘y≥-wch¨.h
>

44 
__BEGIN_DECLS


48 c⁄° 
	t__öt32_t
 *
	tw˘øns_t
;

52 
w˘øns_t
 
	$w˘øns
 (c⁄° *
__¥›îty
Ë
__THROW
;

55 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

57 #ifde‡
__USE_XOPEN2K8


59 
	~<bôs/ty≥s/loˇÀ_t.h
>

63 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

69 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

72 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

76 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

80 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

85 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

88 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

93 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

98 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

103 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

108 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

113 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

117 
w˘y≥_t
 
	$w˘y≥_l
 (c⁄° *
__¥›îty
, 
loˇÀ_t
 
__loˇÀ
)

118 
__THROW
;

122 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
loˇÀ_t
 
__loˇÀ
)

123 
__THROW
;

130 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

133 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

137 
w˘øns_t
 
	$w˘øns_l
 (c⁄° *
__¥›îty
, 
loˇÀ_t
 
__loˇÀ
)

138 
__THROW
;

141 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

142 
loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

146 
__END_DECLS


	@/usr/include/wordexp.h

18 #i‚def 
_WORDEXP_H


19 
	#_WORDEXP_H
 1

	)

21 
	~<„©uªs.h
>

22 
	#__√ed_size_t


	)

23 
	~<°ddef.h
>

25 
__BEGIN_DECLS


30 
	mWRDE_DOOFFS
 = (1 << 0),

31 
	mWRDE_APPEND
 = (1 << 1),

32 
	mWRDE_NOCMD
 = (1 << 2),

33 
	mWRDE_REUSE
 = (1 << 3),

34 
	mWRDE_SHOWERR
 = (1 << 4),

35 
	mWRDE_UNDEF
 = (1 << 5),

36 
	m__WRDE_FLAGS
 = (
WRDE_DOOFFS
 | 
WRDE_APPEND
 | 
WRDE_NOCMD


37 | 
WRDE_REUSE
 | 
WRDE_SHOWERR
 | 
WRDE_UNDEF
)

43 
size_t
 
	mwe_w‹dc
;

44 **
	mwe_w‹dv
;

45 
size_t
 
	mwe_offs
;

46 } 
	tw‹dexp_t
;

51 #ifde‡
__USE_XOPEN


52 
	mWRDE_NOSYS
 = -1,

54 
	mWRDE_NOSPACE
 = 1,

55 
	mWRDE_BADCHAR
,

56 
	mWRDE_BADVAL
,

57 
	mWRDE_CMDSUB
,

58 
	mWRDE_SYNTAX


62 
w‹dexp
 (c⁄° *
__ª°ri˘
 
__w‹ds
,

63 
w‹dexp_t
 *
__ª°ri˘
 
__pw‹dexp
, 
__Êags
);

66 
	$w‹d‰ì
 (
w‹dexp_t
 *
__w‹dexp
Ë
__THROW
;

68 
__END_DECLS


	@/usr/include/x86_64-linux-gnu/a.out.h

1 #i‚de‡
__A_OUT_GNU_H__


2 
	#__A_OUT_GNU_H__


	)

4 
	~<bôs/a.out.h
>

6 
	#__GNU_EXEC_MACROS__


	)

8 
	sexec


10 
	ma_öfo
;

11 
	ma_ãxt
;

12 
	ma_d©a
;

13 
	ma_bss
;

14 
	ma_syms
;

15 
	ma_íåy
;

16 
	ma_åsize
;

17 
	ma_drsize
;

20 
	emachöe_ty≥


22 
	mM_OLDSUN2
 = 0,

23 
	mM_68010
 = 1,

24 
	mM_68020
 = 2,

25 
	mM_SPARC
 = 3,

26 
	mM_386
 = 100,

27 
	mM_MIPS1
 = 151,

28 
	mM_MIPS2
 = 152

31 
	#N_MAGIC
(
exec
Ë(”xec).
a_öfo
 & 0xffff)

	)

32 
	#N_MACHTYPE
(
exec
Ë((
machöe_ty≥
)((”xec).
a_öfo
 >> 16Ë& 0xff))

	)

33 
	#N_FLAGS
(
exec
Ë((”xec).
a_öfo
 >> 24Ë& 0xff)

	)

34 
	#N_SET_INFO
(
exec
, 
magic
, 
ty≥
, 
Êags
) \

35 ((
exec
).
a_öfo
 = ((
magic
) & 0xffff) \

36 | ((()(
ty≥
) & 0xff) << 16) \

37 | (((
Êags
Ë& 0xffË<< 24))

	)

38 
	#N_SET_MAGIC
(
exec
, 
magic
) \

39 ((
exec
).
a_öfo
 = (”xec).a_öfÿ& 0xffff0000Ë| ((
magic
Ë& 0xffff))

	)

40 
	#N_SET_MACHTYPE
(
exec
, 
machty≥
) \

41 ((
exec
).
a_öfo
 = \

42 ((
exec
).
a_öfo
&0xff00ffffË| (((()(
machty≥
))&0xffË<< 16))

	)

43 
	#N_SET_FLAGS
(
exec
, 
Êags
) \

44 ((
exec
).
a_öfo
 = \

45 ((
exec
).
a_öfo
&0x00ffffffË| (((
Êags
Ë& 0xffË<< 24))

	)

48 
	#OMAGIC
 0407

	)

50 
	#NMAGIC
 0410

	)

52 
	#ZMAGIC
 0413

	)

55 
	#QMAGIC
 0314

	)

57 
	#CMAGIC
 0421

	)

59 
	#N_TRSIZE
(
a
Ë(◊).
a_åsize
)

	)

60 
	#N_DRSIZE
(
a
Ë(◊).
a_drsize
)

	)

61 
	#N_SYMSIZE
(
a
Ë(◊).
a_syms
)

	)

62 
	#N_BADMAG
(
x
) \

63 (
	`N_MAGIC
(
x
Ë!
OMAGIC
 && N_MAGIC(xË!
NMAGIC
 \

64 && 
	`N_MAGIC
(
x
Ë!
ZMAGIC
 && N_MAGIC(xË!
QMAGIC
)

	)

65 
	#_N_HDROFF
(
x
Ë(1024 -  (
exec
))

	)

66 
	#N_TXTOFF
(
x
) \

67 (
	`N_MAGIC
(
x
Ë=
ZMAGIC
 ? 
	`_N_HDROFF
((x)Ë+  (
exec
) \

68 : (
	`N_MAGIC
(
x
Ë=
QMAGIC
 ? 0 :  (
exec
)))

	)

69 
	#N_DATOFF
(
x
Ë(
	`N_TXTOFF
(xË+ (x).
a_ãxt
)

	)

70 
	#N_TRELOFF
(
x
Ë(
	`N_DATOFF
(xË+ (x).
a_d©a
)

	)

71 
	#N_DRELOFF
(
x
Ë(
	`N_TRELOFF
(xË+ 
	`N_TRSIZE
(x))

	)

72 
	#N_SYMOFF
(
x
Ë(
	`N_DRELOFF
(xË+ 
	`N_DRSIZE
(x))

	)

73 
	#N_STROFF
(
x
Ë(
	`N_SYMOFF
(xË+ 
	`N_SYMSIZE
(x))

	)

76 
	#N_TXTADDR
(
x
Ë(
	`N_MAGIC
(xË=
QMAGIC
 ? 4096 : 0)

	)

79 
	#SEGMENT_SIZE
 1024

	)

81 
	#_N_SEGMENT_ROUND
(
x
Ë(((xË+ 
SEGMENT_SIZE
 - 1Ë& ~(SEGMENT_SIZE - 1))

	)

82 
	#_N_TXTENDADDR
(
x
Ë(
	`N_TXTADDR
(x)+(x).
a_ãxt
)

	)

84 
	#N_DATADDR
(
x
) \

85 (
	`N_MAGIC
(
x
)==
OMAGIC
? (
	`_N_TXTENDADDR
(x)) \

86 : (
	`_N_SEGMENT_ROUND
 (
	`_N_TXTENDADDR
(
x
))))

	)

87 
	#N_BSSADDR
(
x
Ë(
	`N_DATADDR
(xË+ (x).
a_d©a
)

	)

89 #i‡!
deföed
 (
N_NLIST_DECLARED
)

90 
	s∆i°


94 *
	mn_«me
;

95 
∆i°
 *
	mn_√xt
;

96 
	mn_°rx
;

97 } 
	mn_un
;

98 
	mn_ty≥
;

99 
	mn_Ÿhî
;

100 
	mn_desc
;

101 
	mn_vÆue
;

105 
	#N_UNDF
 0

	)

106 
	#N_ABS
 2

	)

107 
	#N_TEXT
 4

	)

108 
	#N_DATA
 6

	)

109 
	#N_BSS
 8

	)

110 
	#N_FN
 15

	)

111 
	#N_EXT
 1

	)

112 
	#N_TYPE
 036

	)

113 
	#N_STAB
 0340

	)

114 
	#N_INDR
 0xa

	)

115 
	#N_SETA
 0x14

	)

116 
	#N_SETT
 0x16

	)

117 
	#N_SETD
 0x18

	)

118 
	#N_SETB
 0x1A

	)

119 
	#N_SETV
 0x1C

	)

121 #i‡!
deföed
 (
N_RELOCATION_INFO_DECLARED
)

127 
	sªloˇti⁄_öfo


129 
	mr_addªss
;

130 
	mr_symbﬁnum
:24;

131 
	mr_p¸ñ
:1;

132 
	mr_Àngth
:2;

133 
	mr_exã∫
:1;

134 
	mr_∑d
:4;

	@/usr/include/x86_64-linux-gnu/asm/a.out.h

2 #i‚de‡
_ASM_X86_A_OUT_H


3 
	#_ASM_X86_A_OUT_H


	)

5 
	sexec


7 
	ma_öfo
;

8 
	ma_ãxt
;

9 
	ma_d©a
;

10 
	ma_bss
;

11 
	ma_syms
;

12 
	ma_íåy
;

13 
	ma_åsize
;

14 
	ma_drsize
;

17 
	#N_TRSIZE
(
a
Ë(◊).
a_åsize
)

	)

18 
	#N_DRSIZE
(
a
Ë(◊).
a_drsize
)

	)

19 
	#N_SYMSIZE
(
a
Ë(◊).
a_syms
)

	)

	@/usr/include/x86_64-linux-gnu/asm/auxvec.h

2 #i‚de‡
_ASM_X86_AUXVEC_H


3 
	#_ASM_X86_AUXVEC_H


	)

8 #ifde‡
__i386__


9 
	#AT_SYSINFO
 32

	)

11 
	#AT_SYSINFO_EHDR
 33

	)

14 #i‡
deföed
(
CONFIG_IA32_EMULATION
Ë|| !deföed(
CONFIG_X86_64
)

15 
	#AT_VECTOR_SIZE_ARCH
 3

	)

17 
	#AT_VECTOR_SIZE_ARCH
 2

	)

	@/usr/include/x86_64-linux-gnu/asm/bitsperlong.h

2 #i‚de‡
__ASM_X86_BITSPERLONG_H


3 
	#__ASM_X86_BITSPERLONG_H


	)

5 #i‡
deföed
(
__x86_64__
Ë&& !deföed(
__ILP32__
)

6 
	#__BITS_PER_LONG
 64

	)

8 
	#__BITS_PER_LONG
 32

	)

11 
	~<asm-gíîic/bô•îl⁄g.h
>

	@/usr/include/x86_64-linux-gnu/asm/boot.h

2 #i‚de‡
_ASM_X86_BOOT_H


3 
	#_ASM_X86_BOOT_H


	)

6 
	#NORMAL_VGA
 0xfff‡

	)

7 
	#EXTENDED_VGA
 0xff„

	)

8 
	#ASK_VGA
 0xfffd

	)

	@/usr/include/x86_64-linux-gnu/asm/bootparam.h

2 #i‚de‡
_ASM_X86_BOOTPARAM_H


3 
	#_ASM_X86_BOOTPARAM_H


	)

6 
	#SETUP_NONE
 0

	)

7 
	#SETUP_E820_EXT
 1

	)

8 
	#SETUP_DTB
 2

	)

9 
	#SETUP_PCI
 3

	)

10 
	#SETUP_EFI
 4

	)

11 
	#SETUP_APPLE_PROPERTIES
 5

	)

12 
	#SETUP_JAILHOUSE
 6

	)

14 
	#SETUP_INDIRECT
 (1<<31)

	)

17 
	#SETUP_TYPE_MAX
 (
SETUP_INDIRECT
 | 
SETUP_JAILHOUSE
)

	)

20 
	#RAMDISK_IMAGE_START_MASK
 0x07FF

	)

21 
	#RAMDISK_PROMPT_FLAG
 0x8000

	)

22 
	#RAMDISK_LOAD_FLAG
 0x4000

	)

25 
	#LOADED_HIGH
 (1<<0)

	)

26 
	#KASLR_FLAG
 (1<<1)

	)

27 
	#QUIET_FLAG
 (1<<5)

	)

28 
	#KEEP_SEGMENTS
 (1<<6)

	)

29 
	#CAN_USE_HEAP
 (1<<7)

	)

32 
	#XLF_KERNEL_64
 (1<<0)

	)

33 
	#XLF_CAN_BE_LOADED_ABOVE_4G
 (1<<1)

	)

34 
	#XLF_EFI_HANDOVER_32
 (1<<2)

	)

35 
	#XLF_EFI_HANDOVER_64
 (1<<3)

	)

36 
	#XLF_EFI_KEXEC
 (1<<4)

	)

37 
	#XLF_5LEVEL
 (1<<5)

	)

38 
	#XLF_5LEVEL_ENABLED
 (1<<6)

	)

40 #i‚de‡
__ASSEMBLY__


42 
	~<löux/ty≥s.h
>

43 
	~<löux/s¸ìn_öfo.h
>

44 
	~<löux/≠m_bios.h
>

45 
	~<löux/edd.h
>

46 
	~<asm/i°.h
>

47 
	~<video/edid.h
>

50 
	s£tup_d©a
 {

51 
__u64
 
	m√xt
;

52 
__u32
 
	mty≥
;

53 
__u32
 
	mÀn
;

54 
__u8
 
	md©a
[0];

58 
	s£tup_ödúe˘
 {

59 
__u32
 
	mty≥
;

60 
__u32
 
	mª£rved
;

61 
__u64
 
	mÀn
;

62 
__u64
 
	maddr
;

65 
	s£tup_hódî
 {

66 
__u8
 
	m£tup_£˘s
;

67 
__u16
 
	mroŸ_Êags
;

68 
__u32
 
	msyssize
;

69 
__u16
 
	møm_size
;

70 
__u16
 
	mvid_mode
;

71 
__u16
 
	mroŸ_dev
;

72 
__u16
 
	mboŸ_Êag
;

73 
__u16
 
	mjump
;

74 
__u32
 
	mhódî
;

75 
__u16
 
	mvîsi⁄
;

76 
__u32
 
	mªÆmode_swtch
;

77 
__u16
 
	m°¨t_sys_£g
;

78 
__u16
 
	mkî√l_vîsi⁄
;

79 
__u8
 
	mty≥_of_lﬂdî
;

80 
__u8
 
	mlﬂdÊags
;

81 
__u16
 
	m£tup_move_size
;

82 
__u32
 
	mcode32_°¨t
;

83 
__u32
 
	mømdisk_image
;

84 
__u32
 
	mømdisk_size
;

85 
__u32
 
	mboŸ£˘_kludge
;

86 
__u16
 
	mhóp_íd_±r
;

87 
__u8
 
	mext_lﬂdî_vî
;

88 
__u8
 
	mext_lﬂdî_ty≥
;

89 
__u32
 
	mcmd_löe_±r
;

90 
__u32
 
	möôrd_addr_max
;

91 
__u32
 
	mkî√l_Æignmít
;

92 
__u8
 
	mªloˇèbÀ_kî√l
;

93 
__u8
 
	mmö_Æignmít
;

94 
__u16
 
	mxlﬂdÊags
;

95 
__u32
 
	mcmdlöe_size
;

96 
__u32
 
	mh¨dw¨e_sub¨ch
;

97 
__u64
 
	mh¨dw¨e_sub¨ch_d©a
;

98 
__u32
 
	m∑ylﬂd_off£t
;

99 
__u32
 
	m∑ylﬂd_Àngth
;

100 
__u64
 
	m£tup_d©a
;

101 
__u64
 
	m¥ef_addªss
;

102 
__u32
 
	möô_size
;

103 
__u32
 
	mh™dovî_off£t
;

104 
__u32
 
	mkî√l_öfo_off£t
;

105 } 
__©åibuã__
((
∑cked
));

107 
	ssys_desc_èbÀ
 {

108 
__u16
 
	mÀngth
;

109 
__u8
 
	mèbÀ
[14];

113 
	sﬁpc_ofw_hódî
 {

114 
__u32
 
	mofw_magic
;

115 
__u32
 
	mofw_vîsi⁄
;

116 
__u32
 
	mcif_h™dÀr
;

117 
__u32
 
	múq_desc_èbÀ
;

118 } 
__©åibuã__
((
∑cked
));

120 
	sefi_öfo
 {

121 
__u32
 
	mefi_lﬂdî_sig«tuª
;

122 
__u32
 
	mefi_sy°ab
;

123 
__u32
 
	mefi_memdesc_size
;

124 
__u32
 
	mefi_memdesc_vîsi⁄
;

125 
__u32
 
	mefi_memm≠
;

126 
__u32
 
	mefi_memm≠_size
;

127 
__u32
 
	mefi_sy°ab_hi
;

128 
__u32
 
	mefi_memm≠_hi
;

135 
	#E820_MAX_ENTRIES_ZEROPAGE
 128

	)

140 
	sboŸ_e820_íåy
 {

141 
__u64
 
	maddr
;

142 
__u64
 
	msize
;

143 
__u32
 
	mty≥
;

144 } 
__©åibuã__
((
∑cked
));

149 
	#JAILHOUSE_SETUP_REQUIRED_VERSION
 1

	)

155 
	sjaûhou£_£tup_d©a
 {

157 
__u16
 
	mvîsi⁄
;

158 
__u16
 
	mcom∑tibÀ_vîsi⁄
;

159 } 
__©åibuã__
((
∑cked
)Ë
	mhdr
;

161 
__u16
 
	mpm_timî_addªss
;

162 
__u16
 
	mnum_˝us
;

163 
__u64
 
	mpci_mmc⁄fig_ba£
;

164 
__u32
 
	mtsc_khz
;

165 
__u32
 
	m≠ic_khz
;

166 
__u8
 
	m°™d¨d_iﬂpic
;

167 
__u8
 
	m˝u_ids
[255];

168 } 
__©åibuã__
((
∑cked
)Ë
	mv1
;

170 
__u32
 
	mÊags
;

171 } 
__©åibuã__
((
∑cked
)Ë
	mv2
;

172 } 
__©åibuã__
((
∑cked
));

175 
	sboŸ_∑øms
 {

176 
s¸ìn_öfo
 
	ms¸ìn_öfo
;

177 
≠m_bios_öfo
 
	m≠m_bios_öfo
;

178 
__u8
 
	m_∑d2
[4];

179 
__u64
 
	mtboŸ_addr
;

180 
i°_öfo
 
	mi°_öfo
;

181 
__u64
 
	ma˝i_rsdp_addr
;

182 
__u8
 
	m_∑d3
[8];

183 
__u8
 
	mhd0_öfo
[16];

184 
__u8
 
	mhd1_öfo
[16];

185 
sys_desc_èbÀ
 
	msys_desc_èbÀ
;

186 
ﬁpc_ofw_hódî
 
	mﬁpc_ofw_hódî
;

187 
__u32
 
	mext_ømdisk_image
;

188 
__u32
 
	mext_ømdisk_size
;

189 
__u32
 
	mext_cmd_löe_±r
;

190 
__u8
 
	m_∑d4
[116];

191 
edid_öfo
 
	medid_öfo
;

192 
efi_öfo
 
	mefi_öfo
;

193 
__u32
 
	mÆt_mem_k
;

194 
__u32
 
	ms¸©ch
;

195 
__u8
 
	me820_íåõs
;

196 
__u8
 
	meddbuf_íåõs
;

197 
__u8
 
	medd_mbr_sig_buf_íåõs
;

198 
__u8
 
	mkbd_°©us
;

199 
__u8
 
	m£cuª_boŸ
;

200 
__u8
 
	m_∑d5
[2];

212 
__u8
 
	m£¡öñ
;

213 
__u8
 
	m_∑d6
[1];

214 
£tup_hódî
 
	mhdr
;

215 
__u8
 
	m_∑d7
[0x290-0x1f1-(
£tup_hódî
)];

216 
__u32
 
	medd_mbr_sig_buf„r
[
EDD_MBR_SIG_MAX
];

217 
boŸ_e820_íåy
 
	me820_èbÀ
[
E820_MAX_ENTRIES_ZEROPAGE
];

218 
__u8
 
	m_∑d8
[48];

219 
edd_öfo
 
	meddbuf
[
EDDMAXNR
];

220 
__u8
 
	m_∑d9
[276];

221 } 
__©åibuã__
((
∑cked
));

262 
	ex86_h¨dw¨e_sub¨ch
 {

263 
	mX86_SUBARCH_PC
 = 0,

264 
	mX86_SUBARCH_LGUEST
,

265 
	mX86_SUBARCH_XEN
,

266 
	mX86_SUBARCH_INTEL_MID
,

267 
	mX86_SUBARCH_CE4100
,

268 
	mX86_NR_SUBARCHS
,

	@/usr/include/x86_64-linux-gnu/asm/bpf_perf_event.h

1 
	~<asm-gíîic/bpf_≥rf_evít.h
>

	@/usr/include/x86_64-linux-gnu/asm/byteorder.h

2 #i‚de‡
_ASM_X86_BYTEORDER_H


3 
	#_ASM_X86_BYTEORDER_H


	)

5 
	~<löux/byã‹dî/lôée_ídün.h
>

	@/usr/include/x86_64-linux-gnu/asm/debugreg.h

2 #i‚de‡
_ASM_X86_DEBUGREG_H


3 
	#_ASM_X86_DEBUGREG_H


	)

8 
	#DR_FIRSTADDR
 0

	)

9 
	#DR_LASTADDR
 3

	)

11 
	#DR_STATUS
 6

	)

12 
	#DR_CONTROL
 7

	)

19 
	#DR6_RESERVED
 (0xFFFF0FF0)

	)

21 
	#DR_TRAP0
 (0x1Ë

	)

22 
	#DR_TRAP1
 (0x2Ë

	)

23 
	#DR_TRAP2
 (0x4Ë

	)

24 
	#DR_TRAP3
 (0x8Ë

	)

25 
	#DR_TRAP_BITS
 (
DR_TRAP0
|
DR_TRAP1
|
DR_TRAP2
|
DR_TRAP3
)

	)

27 
	#DR_BUS_LOCK
 (0x800Ë

	)

28 
	#DR_STEP
 (0x4000Ë

	)

29 
	#DR_SWITCH
 (0x8000Ë

	)

37 
	#DR_CONTROL_SHIFT
 16

	)

38 
	#DR_CONTROL_SIZE
 4

	)

40 
	#DR_RW_EXECUTE
 (0x0Ë

	)

41 
	#DR_RW_WRITE
 (0x1)

	)

42 
	#DR_RW_READ
 (0x3)

	)

44 
	#DR_LEN_1
 (0x0Ë

	)

45 
	#DR_LEN_2
 (0x4)

	)

46 
	#DR_LEN_4
 (0xC)

	)

47 
	#DR_LEN_8
 (0x8)

	)

56 
	#DR_LOCAL_ENABLE_SHIFT
 0

	)

57 
	#DR_GLOBAL_ENABLE_SHIFT
 1

	)

58 
	#DR_LOCAL_ENABLE
 (0x1Ë

	)

59 
	#DR_GLOBAL_ENABLE
 (0x2Ë

	)

60 
	#DR_ENABLE_SIZE
 2

	)

62 
	#DR_LOCAL_ENABLE_MASK
 (0x55Ë

	)

63 
	#DR_GLOBAL_ENABLE_MASK
 (0xAAË

	)

69 #ifde‡
__i386__


70 
	#DR_CONTROL_RESERVED
 (0xFC00Ë

	)

72 
	#DR_CONTROL_RESERVED
 (0xFFFFFFFF0000FC00ULË

	)

75 
	#DR_LOCAL_SLOWDOWN
 (0x100Ë

	)

76 
	#DR_GLOBAL_SLOWDOWN
 (0x200Ë

	)

	@/usr/include/x86_64-linux-gnu/asm/e820.h

2 #i‚de‡
_ASM_X86_E820_H


3 
	#_ASM_X86_E820_H


	)

4 
	#E820MAP
 0x2d0

	)

5 
	#E820MAX
 128

	)

25 
	#E820_X_MAX
 
E820MAX


	)

27 
	#E820NR
 0x1e8

	)

29 
	#E820_RAM
 1

	)

30 
	#E820_RESERVED
 2

	)

31 
	#E820_ACPI
 3

	)

32 
	#E820_NVS
 4

	)

33 
	#E820_UNUSABLE
 5

	)

34 
	#E820_PMEM
 7

	)

45 
	#E820_PRAM
 12

	)

53 
	#E820_RESERVED_KERN
 128

	)

55 #i‚de‡
__ASSEMBLY__


56 
	~<löux/ty≥s.h
>

57 
	se820íåy
 {

58 
__u64
 
	maddr
;

59 
__u64
 
	msize
;

60 
__u32
 
	mty≥
;

61 } 
__©åibuã__
((
∑cked
));

63 
	se820m≠
 {

64 
__u32
 
	mƒ_m≠
;

65 
e820íåy
 
	mm≠
[
E820_X_MAX
];

68 
	#ISA_START_ADDRESS
 0xa0000

	)

69 
	#ISA_END_ADDRESS
 0x100000

	)

71 
	#BIOS_BEGIN
 0x000a0000

	)

72 
	#BIOS_END
 0x00100000

	)

74 
	#BIOS_ROM_BASE
 0xf„00000

	)

75 
	#BIOS_ROM_END
 0xffffffff

	)

	@/usr/include/x86_64-linux-gnu/asm/errno.h

1 
	~<asm-gíîic/î∫o.h
>

	@/usr/include/x86_64-linux-gnu/asm/fcntl.h

1 
	~<asm-gíîic/f˙é.h
>

	@/usr/include/x86_64-linux-gnu/asm/hw_breakpoint.h

	@/usr/include/x86_64-linux-gnu/asm/hwcap2.h

2 #i‚de‡
_ASM_X86_HWCAP2_H


3 
	#_ASM_X86_HWCAP2_H


	)

5 
	~<löux/c⁄°.h
>

8 
	#HWCAP2_RING3MWAIT
 
	`_BITUL
(0)

	)

11 
	#HWCAP2_FSGSBASE
 
	`_BITUL
(1)

	)

	@/usr/include/x86_64-linux-gnu/asm/ioctl.h

1 
	~<asm-gíîic/io˘l.h
>

	@/usr/include/x86_64-linux-gnu/asm/ioctls.h

1 
	~<asm-gíîic/io˘ls.h
>

	@/usr/include/x86_64-linux-gnu/asm/ipcbuf.h

1 
	~<asm-gíîic/ùcbuf.h
>

	@/usr/include/x86_64-linux-gnu/asm/ist.h

16 #i‚de‡
_ASM_X86_IST_H


17 
	#_ASM_X86_IST_H


	)

21 
	~<löux/ty≥s.h
>

23 
	si°_öfo
 {

24 
__u32
 
	msig«tuª
;

25 
__u32
 
	mcomm™d
;

26 
__u32
 
	mevít
;

27 
__u32
 
	m≥rf_Àvñ
;

	@/usr/include/x86_64-linux-gnu/asm/kvm.h

2 #i‚de‡
_ASM_X86_KVM_H


3 
	#_ASM_X86_KVM_H


	)

10 
	~<löux/ty≥s.h
>

11 
	~<löux/io˘l.h
>

13 
	#KVM_PIO_PAGE_OFFSET
 1

	)

14 
	#KVM_COALESCED_MMIO_PAGE_OFFSET
 2

	)

15 
	#KVM_DIRTY_LOG_PAGE_OFFSET
 64

	)

17 
	#DE_VECTOR
 0

	)

18 
	#DB_VECTOR
 1

	)

19 
	#BP_VECTOR
 3

	)

20 
	#OF_VECTOR
 4

	)

21 
	#BR_VECTOR
 5

	)

22 
	#UD_VECTOR
 6

	)

23 
	#NM_VECTOR
 7

	)

24 
	#DF_VECTOR
 8

	)

25 
	#TS_VECTOR
 10

	)

26 
	#NP_VECTOR
 11

	)

27 
	#SS_VECTOR
 12

	)

28 
	#GP_VECTOR
 13

	)

29 
	#PF_VECTOR
 14

	)

30 
	#MF_VECTOR
 16

	)

31 
	#AC_VECTOR
 17

	)

32 
	#MC_VECTOR
 18

	)

33 
	#XM_VECTOR
 19

	)

34 
	#VE_VECTOR
 20

	)

37 
	#__KVM_HAVE_PIT


	)

38 
	#__KVM_HAVE_IOAPIC


	)

39 
	#__KVM_HAVE_IRQ_LINE


	)

40 
	#__KVM_HAVE_MSI


	)

41 
	#__KVM_HAVE_USER_NMI


	)

42 
	#__KVM_HAVE_GUEST_DEBUG


	)

43 
	#__KVM_HAVE_MSIX


	)

44 
	#__KVM_HAVE_MCE


	)

45 
	#__KVM_HAVE_PIT_STATE2


	)

46 
	#__KVM_HAVE_XEN_HVM


	)

47 
	#__KVM_HAVE_VCPU_EVENTS


	)

48 
	#__KVM_HAVE_DEBUGREGS


	)

49 
	#__KVM_HAVE_XSAVE


	)

50 
	#__KVM_HAVE_XCRS


	)

51 
	#__KVM_HAVE_READONLY_MEM


	)

54 
	#KVM_NR_INTERRUPTS
 256

	)

56 
	skvm_mem‹y_Æüs
 {

57 
__u32
 
	m¶Ÿ
;

58 
__u32
 
	mÊags
;

59 
__u64
 
	mgue°_phys_addr
;

60 
__u64
 
	mmem‹y_size
;

61 
__u64
 
	mèrgë_phys_addr
;

65 
	skvm_pic_°©e
 {

66 
__u8
 
	mœ°_úr
;

67 
__u8
 
	múr
;

68 
__u8
 
	mimr
;

69 
__u8
 
	mi§
;

70 
__u8
 
	m¥i‹ôy_add
;

71 
__u8
 
	múq_ba£
;

72 
__u8
 
	mªad_ªg_£À˘
;

73 
__u8
 
	mpﬁl
;

74 
__u8
 
	m•ecül_mask
;

75 
__u8
 
	möô_°©e
;

76 
__u8
 
	mauto_eoi
;

77 
__u8
 
	mrŸ©e_⁄_auto_eoi
;

78 
__u8
 
	m•ecül_fuŒy_√°ed_mode
;

79 
__u8
 
	möô4
;

80 
__u8
 
	mñ¸
;

81 
__u8
 
	mñ¸_mask
;

84 
	#KVM_IOAPIC_NUM_PINS
 24

	)

85 
	skvm_iﬂpic_°©e
 {

86 
__u64
 
	mba£_addªss
;

87 
__u32
 
	mi‹eg£l
;

88 
__u32
 
	mid
;

89 
__u32
 
	múr
;

90 
__u32
 
	m∑d
;

92 
__u64
 
	mbôs
;

94 
__u8
 
	mve˘‹
;

95 
__u8
 
	mdñivîy_mode
:3;

96 
__u8
 
	mde°_mode
:1;

97 
__u8
 
	mdñivîy_°©us
:1;

98 
__u8
 
	mpﬁ¨ôy
:1;

99 
__u8
 
	mªmŸe_úr
:1;

100 
__u8
 
	måig_mode
:1;

101 
__u8
 
	mmask
:1;

102 
__u8
 
	mª£rve
:7;

103 
__u8
 
	mª£rved
[4];

104 
__u8
 
	mde°_id
;

105 } 
	mfõlds
;

106 } 
	mªdútbl
[
KVM_IOAPIC_NUM_PINS
];

109 
	#KVM_IRQCHIP_PIC_MASTER
 0

	)

110 
	#KVM_IRQCHIP_PIC_SLAVE
 1

	)

111 
	#KVM_IRQCHIP_IOAPIC
 2

	)

112 
	#KVM_NR_IRQCHIPS
 3

	)

114 
	#KVM_RUN_X86_SMM
 (1 << 0)

	)

115 
	#KVM_RUN_X86_BUS_LOCK
 (1 << 1)

	)

118 
	skvm_ªgs
 {

120 
__u64
 
	møx
, 
	mrbx
, 
	mrcx
, 
	mrdx
;

121 
__u64
 
	mrsi
, 
	mrdi
, 
	mr•
, 
	mrbp
;

122 
__u64
 
	mr8
, 
	mr9
, 
	mr10
, 
	mr11
;

123 
__u64
 
	mr12
, 
	mr13
, 
	mr14
, 
	mr15
;

124 
__u64
 
	mrù
, 
	mrÊags
;

128 
	#KVM_APIC_REG_SIZE
 0x400

	)

129 
	skvm_œpic_°©e
 {

130 
	mªgs
[
KVM_APIC_REG_SIZE
];

133 
	skvm_£gmít
 {

134 
__u64
 
	mba£
;

135 
__u32
 
	mlimô
;

136 
__u16
 
	m£À˘‹
;

137 
__u8
 
	mty≥
;

138 
__u8
 
	m¥e£¡
, 
	md∂
, 
	mdb
, 
	ms
, 
	ml
, 
	mg
, 
	mavl
;

139 
__u8
 
	munußbÀ
;

140 
__u8
 
	m∑ddög
;

143 
	skvm_dèbÀ
 {

144 
__u64
 
	mba£
;

145 
__u16
 
	mlimô
;

146 
__u16
 
	m∑ddög
[3];

151 
	skvm_§egs
 {

153 
kvm_£gmít
 
	mcs
, 
	mds
, 
	mes
, 
	mfs
, 
	mgs
, 
	mss
;

154 
kvm_£gmít
 
	må
, 
	mldt
;

155 
kvm_dèbÀ
 
	mgdt
, 
	midt
;

156 
__u64
 
	m¸0
, 
	m¸2
, 
	m¸3
, 
	m¸4
, 
	m¸8
;

157 
__u64
 
	me„r
;

158 
__u64
 
	m≠ic_ba£
;

159 
__u64
 
	möãºu±_bôm≠
[(
KVM_NR_INTERRUPTS
 + 63) / 64];

162 
	skvm_§egs2
 {

164 
kvm_£gmít
 
	mcs
, 
	mds
, 
	mes
, 
	mfs
, 
	mgs
, 
	mss
;

165 
kvm_£gmít
 
	må
, 
	mldt
;

166 
kvm_dèbÀ
 
	mgdt
, 
	midt
;

167 
__u64
 
	m¸0
, 
	m¸2
, 
	m¸3
, 
	m¸4
, 
	m¸8
;

168 
__u64
 
	me„r
;

169 
__u64
 
	m≠ic_ba£
;

170 
__u64
 
	mÊags
;

171 
__u64
 
	mpd±rs
[4];

173 
	#KVM_SREGS2_FLAGS_PDPTRS_VALID
 1

	)

176 
	skvm_Âu
 {

177 
__u8
 
	mÂr
[8][16];

178 
__u16
 
	mfcw
;

179 
__u16
 
	mfsw
;

180 
__u8
 
	m·wx
;

181 
__u8
 
	m∑d1
;

182 
__u16
 
	mœ°_›code
;

183 
__u64
 
	mœ°_ù
;

184 
__u64
 
	mœ°_dp
;

185 
__u8
 
	mxmm
[16][16];

186 
__u32
 
	mmxc§
;

187 
__u32
 
	m∑d2
;

190 
	skvm_m§_íåy
 {

191 
__u32
 
	mödex
;

192 
__u32
 
	mª£rved
;

193 
__u64
 
	md©a
;

197 
	skvm_m§s
 {

198 
__u32
 
	mnm§s
;

199 
__u32
 
	m∑d
;

201 
kvm_m§_íåy
 
	míåõs
[0];

205 
	skvm_m§_li°
 {

206 
__u32
 
	mnm§s
;

207 
__u32
 
	mödi˚s
[0];

211 
	#KVM_MSR_FILTER_MAX_BITMAP_SIZE
 0x600

	)

214 
	skvm_m§_fûãr_ønge
 {

215 
	#KVM_MSR_FILTER_READ
 (1 << 0)

	)

216 
	#KVM_MSR_FILTER_WRITE
 (1 << 1)

	)

217 
__u32
 
	mÊags
;

218 
__u32
 
	mnm§s
;

219 
__u32
 
	mba£
;

220 
__u8
 *
	mbôm≠
;

223 
	#KVM_MSR_FILTER_MAX_RANGES
 16

	)

224 
	skvm_m§_fûãr
 {

225 
	#KVM_MSR_FILTER_DEFAULT_ALLOW
 (0 << 0)

	)

226 
	#KVM_MSR_FILTER_DEFAULT_DENY
 (1 << 0)

	)

227 
__u32
 
	mÊags
;

228 
kvm_m§_fûãr_ønge
 
	mønges
[
KVM_MSR_FILTER_MAX_RANGES
];

231 
	skvm_˝uid_íåy
 {

232 
__u32
 
	mfun˘i⁄
;

233 
__u32
 
	móx
;

234 
__u32
 
	mebx
;

235 
__u32
 
	mecx
;

236 
__u32
 
	medx
;

237 
__u32
 
	m∑ddög
;

241 
	skvm_˝uid
 {

242 
__u32
 
	m√¡
;

243 
__u32
 
	m∑ddög
;

244 
kvm_˝uid_íåy
 
	míåõs
[0];

247 
	skvm_˝uid_íåy2
 {

248 
__u32
 
	mfun˘i⁄
;

249 
__u32
 
	mödex
;

250 
__u32
 
	mÊags
;

251 
__u32
 
	móx
;

252 
__u32
 
	mebx
;

253 
__u32
 
	mecx
;

254 
__u32
 
	medx
;

255 
__u32
 
	m∑ddög
[3];

258 
	#KVM_CPUID_FLAG_SIGNIFCANT_INDEX
 (1 << 0)

	)

259 
	#KVM_CPUID_FLAG_STATEFUL_FUNC
 (1 << 1)

	)

260 
	#KVM_CPUID_FLAG_STATE_READ_NEXT
 (1 << 2)

	)

263 
	skvm_˝uid2
 {

264 
__u32
 
	m√¡
;

265 
__u32
 
	m∑ddög
;

266 
kvm_˝uid_íåy2
 
	míåõs
[0];

270 
	skvm_pô_ch™√l_°©e
 {

271 
__u32
 
	mcou¡
;

272 
__u16
 
	mœtched_cou¡
;

273 
__u8
 
	mcou¡_œtched
;

274 
__u8
 
	m°©us_œtched
;

275 
__u8
 
	m°©us
;

276 
__u8
 
	mªad_°©e
;

277 
__u8
 
	mwrôe_°©e
;

278 
__u8
 
	mwrôe_œtch
;

279 
__u8
 
	mrw_mode
;

280 
__u8
 
	mmode
;

281 
__u8
 
	mbcd
;

282 
__u8
 
	mg©e
;

283 
__s64
 
	mcou¡_lﬂd_time
;

286 
	skvm_debug_exô_¨ch
 {

287 
__u32
 
	mex˚±i⁄
;

288 
__u32
 
	m∑d
;

289 
__u64
 
	mpc
;

290 
__u64
 
	mdr6
;

291 
__u64
 
	mdr7
;

294 
	#KVM_GUESTDBG_USE_SW_BP
 0x00010000

	)

295 
	#KVM_GUESTDBG_USE_HW_BP
 0x00020000

	)

296 
	#KVM_GUESTDBG_INJECT_DB
 0x00040000

	)

297 
	#KVM_GUESTDBG_INJECT_BP
 0x00080000

	)

298 
	#KVM_GUESTDBG_BLOCKIRQ
 0x00100000

	)

301 
	skvm_gue°_debug_¨ch
 {

302 
__u64
 
	mdebugªg
[8];

305 
	skvm_pô_°©e
 {

306 
kvm_pô_ch™√l_°©e
 
	mch™√ls
[3];

309 
	#KVM_PIT_FLAGS_HPET_LEGACY
 0x00000001

	)

311 
	skvm_pô_°©e2
 {

312 
kvm_pô_ch™√l_°©e
 
	mch™√ls
[3];

313 
__u32
 
	mÊags
;

314 
__u32
 
	mª£rved
[9];

317 
	skvm_ªöje˘_c⁄åﬁ
 {

318 
__u8
 
	mpô_ªöje˘
;

319 
__u8
 
	mª£rved
[31];

323 
	#KVM_VCPUEVENT_VALID_NMI_PENDING
 0x00000001

	)

324 
	#KVM_VCPUEVENT_VALID_SIPI_VECTOR
 0x00000002

	)

325 
	#KVM_VCPUEVENT_VALID_SHADOW
 0x00000004

	)

326 
	#KVM_VCPUEVENT_VALID_SMM
 0x00000008

	)

327 
	#KVM_VCPUEVENT_VALID_PAYLOAD
 0x00000010

	)

330 
	#KVM_X86_SHADOW_INT_MOV_SS
 0x01

	)

331 
	#KVM_X86_SHADOW_INT_STI
 0x02

	)

334 
	skvm_v˝u_evíts
 {

336 
__u8
 
	möje˘ed
;

337 
__u8
 
	mƒ
;

338 
__u8
 
	mhas_îr‹_code
;

339 
__u8
 
	m≥ndög
;

340 
__u32
 
	mîr‹_code
;

341 } 
	mex˚±i⁄
;

343 
__u8
 
	möje˘ed
;

344 
__u8
 
	mƒ
;

345 
__u8
 
	mso·
;

346 
__u8
 
	mshadow
;

347 } 
	möãºu±
;

349 
__u8
 
	möje˘ed
;

350 
__u8
 
	m≥ndög
;

351 
__u8
 
	mmasked
;

352 
__u8
 
	m∑d
;

353 } 
	mnmi
;

354 
__u32
 
	msùi_ve˘‹
;

355 
__u32
 
	mÊags
;

357 
__u8
 
	msmm
;

358 
__u8
 
	m≥ndög
;

359 
__u8
 
	msmm_öside_nmi
;

360 
__u8
 
	mœtched_öô
;

361 } 
	msmi
;

362 
__u8
 
	mª£rved
[27];

363 
__u8
 
	mex˚±i⁄_has_∑ylﬂd
;

364 
__u64
 
	mex˚±i⁄_∑ylﬂd
;

368 
	skvm_debugªgs
 {

369 
__u64
 
	mdb
[4];

370 
__u64
 
	mdr6
;

371 
__u64
 
	mdr7
;

372 
__u64
 
	mÊags
;

373 
__u64
 
	mª£rved
[9];

377 
	skvm_xßve
 {

378 
__u32
 
	mªgi⁄
[1024];

381 
	#KVM_MAX_XCRS
 16

	)

383 
	skvm_x¸
 {

384 
__u32
 
	mx¸
;

385 
__u32
 
	mª£rved
;

386 
__u64
 
	mvÆue
;

389 
	skvm_x¸s
 {

390 
__u32
 
	mƒ_x¸s
;

391 
__u32
 
	mÊags
;

392 
kvm_x¸
 
	mx¸s
[
KVM_MAX_XCRS
];

393 
__u64
 
	m∑ddög
[16];

396 
	#KVM_SYNC_X86_REGS
 (1UL << 0)

	)

397 
	#KVM_SYNC_X86_SREGS
 (1UL << 1)

	)

398 
	#KVM_SYNC_X86_EVENTS
 (1UL << 2)

	)

400 
	#KVM_SYNC_X86_VALID_FIELDS
 \

401 (
KVM_SYNC_X86_REGS
| \

402 
KVM_SYNC_X86_SREGS
| \

403 
KVM_SYNC_X86_EVENTS
)

	)

406 
	skvm_sync_ªgs
 {

412 
kvm_ªgs
 
	mªgs
;

413 
kvm_§egs
 
	m§egs
;

414 
kvm_v˝u_evíts
 
	mevíts
;

417 
	#KVM_X86_QUIRK_LINT0_REENABLED
 (1 << 0)

	)

418 
	#KVM_X86_QUIRK_CD_NW_CLEARED
 (1 << 1)

	)

419 
	#KVM_X86_QUIRK_LAPIC_MMIO_HOLE
 (1 << 2)

	)

420 
	#KVM_X86_QUIRK_OUT_7E_INC_RIP
 (1 << 3)

	)

421 
	#KVM_X86_QUIRK_MISC_ENABLE_NO_MWAIT
 (1 << 4)

	)

423 
	#KVM_STATE_NESTED_FORMAT_VMX
 0

	)

424 
	#KVM_STATE_NESTED_FORMAT_SVM
 1

	)

426 
	#KVM_STATE_NESTED_GUEST_MODE
 0x00000001

	)

427 
	#KVM_STATE_NESTED_RUN_PENDING
 0x00000002

	)

428 
	#KVM_STATE_NESTED_EVMCS
 0x00000004

	)

429 
	#KVM_STATE_NESTED_MTF_PENDING
 0x00000008

	)

430 
	#KVM_STATE_NESTED_GIF_SET
 0x00000100

	)

432 
	#KVM_STATE_NESTED_SMM_GUEST_MODE
 0x00000001

	)

433 
	#KVM_STATE_NESTED_SMM_VMXON
 0x00000002

	)

435 
	#KVM_STATE_NESTED_VMX_VMCS_SIZE
 0x1000

	)

437 
	#KVM_STATE_NESTED_SVM_VMCB_SIZE
 0x1000

	)

439 
	#KVM_STATE_VMX_PREEMPTION_TIMER_DEADLINE
 0x00000001

	)

441 
	skvm_vmx_√°ed_°©e_d©a
 {

442 
__u8
 
	mvmcs12
[
KVM_STATE_NESTED_VMX_VMCS_SIZE
];

443 
__u8
 
	mshadow_vmcs12
[
KVM_STATE_NESTED_VMX_VMCS_SIZE
];

446 
	skvm_vmx_√°ed_°©e_hdr
 {

447 
__u64
 
	mvmx⁄_∑
;

448 
__u64
 
	mvmcs12_∑
;

451 
__u16
 
	mÊags
;

452 } 
	msmm
;

454 
__u16
 
	m∑d
;

456 
__u32
 
	mÊags
;

457 
__u64
 
	m¥ìm±i⁄_timî_dódlöe
;

460 
	skvm_svm_√°ed_°©e_d©a
 {

462 
__u8
 
	mvmcb12
[
KVM_STATE_NESTED_SVM_VMCB_SIZE
];

465 
	skvm_svm_√°ed_°©e_hdr
 {

466 
__u64
 
	mvmcb_∑
;

470 
	skvm_√°ed_°©e
 {

471 
__u16
 
	mÊags
;

472 
__u16
 
	mf‹m©
;

473 
__u32
 
	msize
;

476 
kvm_vmx_√°ed_°©e_hdr
 
	mvmx
;

477 
kvm_svm_√°ed_°©e_hdr
 
	msvm
;

480 
__u8
 
	m∑d
[120];

481 } 
	mhdr
;

489 
kvm_vmx_√°ed_°©e_d©a
 
	mvmx
[0];

490 
kvm_svm_√°ed_°©e_d©a
 
	msvm
[0];

491 } 
	md©a
;

495 
	skvm_pmu_evít_fûãr
 {

496 
__u32
 
	ma˘i⁄
;

497 
__u32
 
	m√víts
;

498 
__u32
 
	mfixed_cou¡î_bôm≠
;

499 
__u32
 
	mÊags
;

500 
__u32
 
	m∑d
[4];

501 
__u64
 
	mevíts
[0];

504 
	#KVM_PMU_EVENT_ALLOW
 0

	)

505 
	#KVM_PMU_EVENT_DENY
 1

	)

	@/usr/include/x86_64-linux-gnu/asm/kvm_para.h

2 #i‚de‡
_ASM_X86_KVM_PARA_H


3 
	#_ASM_X86_KVM_PARA_H


	)

5 
	~<löux/ty≥s.h
>

10 
	#KVM_CPUID_SIGNATURE
 0x40000000

	)

17 
	#KVM_CPUID_FEATURES
 0x40000001

	)

18 
	#KVM_FEATURE_CLOCKSOURCE
 0

	)

19 
	#KVM_FEATURE_NOP_IO_DELAY
 1

	)

20 
	#KVM_FEATURE_MMU_OP
 2

	)

24 
	#KVM_FEATURE_CLOCKSOURCE2
 3

	)

25 
	#KVM_FEATURE_ASYNC_PF
 4

	)

26 
	#KVM_FEATURE_STEAL_TIME
 5

	)

27 
	#KVM_FEATURE_PV_EOI
 6

	)

28 
	#KVM_FEATURE_PV_UNHALT
 7

	)

29 
	#KVM_FEATURE_PV_TLB_FLUSH
 9

	)

30 
	#KVM_FEATURE_ASYNC_PF_VMEXIT
 10

	)

31 
	#KVM_FEATURE_PV_SEND_IPI
 11

	)

32 
	#KVM_FEATURE_POLL_CONTROL
 12

	)

33 
	#KVM_FEATURE_PV_SCHED_YIELD
 13

	)

34 
	#KVM_FEATURE_ASYNC_PF_INT
 14

	)

35 
	#KVM_FEATURE_MSI_EXT_DEST_ID
 15

	)

36 
	#KVM_FEATURE_HC_MAP_GPA_RANGE
 16

	)

37 
	#KVM_FEATURE_MIGRATION_CONTROL
 17

	)

39 
	#KVM_HINTS_REALTIME
 0

	)

44 
	#KVM_FEATURE_CLOCKSOURCE_STABLE_BIT
 24

	)

46 
	#MSR_KVM_WALL_CLOCK
 0x11

	)

47 
	#MSR_KVM_SYSTEM_TIME
 0x12

	)

49 
	#KVM_MSR_ENABLED
 1

	)

51 
	#MSR_KVM_WALL_CLOCK_NEW
 0x4b564d00

	)

52 
	#MSR_KVM_SYSTEM_TIME_NEW
 0x4b564d01

	)

53 
	#MSR_KVM_ASYNC_PF_EN
 0x4b564d02

	)

54 
	#MSR_KVM_STEAL_TIME
 0x4b564d03

	)

55 
	#MSR_KVM_PV_EOI_EN
 0x4b564d04

	)

56 
	#MSR_KVM_POLL_CONTROL
 0x4b564d05

	)

57 
	#MSR_KVM_ASYNC_PF_INT
 0x4b564d06

	)

58 
	#MSR_KVM_ASYNC_PF_ACK
 0x4b564d07

	)

59 
	#MSR_KVM_MIGRATION_CONTROL
 0x4b564d08

	)

61 
	skvm_°ól_time
 {

62 
__u64
 
	m°ól
;

63 
__u32
 
	mvîsi⁄
;

64 
__u32
 
	mÊags
;

65 
__u8
 
	m¥ìm±ed
;

66 
__u8
 
	mu8_∑d
[3];

67 
__u32
 
	m∑d
[11];

70 
	#KVM_VCPU_PREEMPTED
 (1 << 0)

	)

71 
	#KVM_VCPU_FLUSH_TLB
 (1 << 1)

	)

73 
	#KVM_CLOCK_PAIRING_WALLCLOCK
 0

	)

74 
	skvm_˛ock_∑úög
 {

75 
__s64
 
	m£c
;

76 
__s64
 
	mn£c
;

77 
__u64
 
	mtsc
;

78 
__u32
 
	mÊags
;

79 
__u32
 
	m∑d
[9];

82 
	#KVM_STEAL_ALIGNMENT_BITS
 5

	)

83 
	#KVM_STEAL_VALID_BITS
 ((-1ULL << (
KVM_STEAL_ALIGNMENT_BITS
 + 1)))

	)

84 
	#KVM_STEAL_RESERVED_MASK
 (((1 << 
KVM_STEAL_ALIGNMENT_BITS
Ë- 1 ) << 1)

	)

86 
	#KVM_MAX_MMU_OP_BATCH
 32

	)

88 
	#KVM_ASYNC_PF_ENABLED
 (1 << 0)

	)

89 
	#KVM_ASYNC_PF_SEND_ALWAYS
 (1 << 1)

	)

90 
	#KVM_ASYNC_PF_DELIVERY_AS_PF_VMEXIT
 (1 << 2)

	)

91 
	#KVM_ASYNC_PF_DELIVERY_AS_INT
 (1 << 3)

	)

94 
	#KVM_ASYNC_PF_VEC_MASK
 
	`GENMASK
(7, 0)

	)

97 
	#KVM_MIGRATION_READY
 (1 << 0)

	)

100 
	#KVM_MAP_GPA_RANGE_PAGE_SZ_4K
 0

	)

101 
	#KVM_MAP_GPA_RANGE_PAGE_SZ_2M
 (1 << 0)

	)

102 
	#KVM_MAP_GPA_RANGE_PAGE_SZ_1G
 (1 << 1)

	)

103 
	#KVM_MAP_GPA_RANGE_ENC_STAT
(
n
Ë“ << 4)

	)

104 
	#KVM_MAP_GPA_RANGE_ENCRYPTED
 
	`KVM_MAP_GPA_RANGE_ENC_STAT
(1)

	)

105 
	#KVM_MAP_GPA_RANGE_DECRYPTED
 
	`KVM_MAP_GPA_RANGE_ENC_STAT
(0)

	)

108 
	#KVM_MMU_OP_WRITE_PTE
 1

	)

109 
	#KVM_MMU_OP_FLUSH_TLB
 2

	)

110 
	#KVM_MMU_OP_RELEASE_PT
 3

	)

113 
	skvm_mmu_›_hódî
 {

114 
__u32
 
	m›
;

115 
__u32
 
	m∑d
;

118 
	skvm_mmu_›_wrôe_±e
 {

119 
kvm_mmu_›_hódî
 
	mhódî
;

120 
__u64
 
	m±e_phys
;

121 
__u64
 
	m±e_vÆ
;

124 
	skvm_mmu_›_Êush_éb
 {

125 
kvm_mmu_›_hódî
 
	mhódî
;

128 
	skvm_mmu_›_ªÀa£_±
 {

129 
kvm_mmu_›_hódî
 
	mhódî
;

130 
__u64
 
	m±_phys
;

133 
	#KVM_PV_REASON_PAGE_NOT_PRESENT
 1

	)

134 
	#KVM_PV_REASON_PAGE_READY
 2

	)

136 
	skvm_v˝u_pv_≠f_d©a
 {

138 
__u32
 
	mÊags
;

141 
__u32
 
	mtokí
;

143 
__u8
 
	m∑d
[56];

144 
__u32
 
	míabÀd
;

147 
	#KVM_PV_EOI_BIT
 0

	)

148 
	#KVM_PV_EOI_MASK
 (0x1 << 
KVM_PV_EOI_BIT
)

	)

149 
	#KVM_PV_EOI_ENABLED
 
KVM_PV_EOI_MASK


	)

150 
	#KVM_PV_EOI_DISABLED
 0x0

	)

	@/usr/include/x86_64-linux-gnu/asm/kvm_perf.h

2 #i‚de‡
_ASM_X86_KVM_PERF_H


3 
	#_ASM_X86_KVM_PERF_H


	)

5 
	~<asm/svm.h
>

6 
	~<asm/vmx.h
>

7 
	~<asm/kvm.h
>

9 
	#DECODE_STR_LEN
 20

	)

11 
	#VCPU_ID
 "v˝u_id"

	)

13 
	#KVM_ENTRY_TRACE
 "kvm:kvm_íåy"

	)

14 
	#KVM_EXIT_TRACE
 "kvm:kvm_exô"

	)

15 
	#KVM_EXIT_REASON
 "exô_ªas⁄"

	)

	@/usr/include/x86_64-linux-gnu/asm/ldt.h

7 #i‚de‡
_ASM_X86_LDT_H


8 
	#_ASM_X86_LDT_H


	)

11 
	#LDT_ENTRIES
 8192

	)

13 
	#LDT_ENTRY_SIZE
 8

	)

15 #i‚de‡
__ASSEMBLY__


21 
	su£r_desc
 {

22 
	míåy_numbî
;

23 
	mba£_addr
;

24 
	mlimô
;

25 
	m£g_32bô
:1;

26 
	mc⁄ã¡s
:2;

27 
	mªad_exec_⁄ly
:1;

28 
	mlimô_ö_∑ges
:1;

29 
	m£g_nŸ_¥e£¡
:1;

30 
	mu£abÀ
:1;

31 #ifde‡
__x86_64__


39 
	mlm
:1;

43 
	#MODIFY_LDT_CONTENTS_DATA
 0

	)

44 
	#MODIFY_LDT_CONTENTS_STACK
 1

	)

45 
	#MODIFY_LDT_CONTENTS_CODE
 2

	)

	@/usr/include/x86_64-linux-gnu/asm/mce.h

2 #i‚de‡
_ASM_X86_MCE_H


3 
	#_ASM_X86_MCE_H


	)

5 
	~<löux/ty≥s.h
>

6 
	~<löux/io˘l.h
>

13 
	sm˚
 {

14 
__u64
 
	m°©us
;

15 
__u64
 
	mmisc
;

16 
__u64
 
	maddr
;

17 
__u64
 
	mmcg°©us
;

18 
__u64
 
	mù
;

19 
__u64
 
	mtsc
;

20 
__u64
 
	mtime
;

21 
__u8
 
	m˝uvíd‹
;

22 
__u8
 
	möje˘_Êags
;

23 
__u8
 
	m£vîôy
;

24 
__u8
 
	m∑d
;

25 
__u32
 
	m˝uid
;

26 
__u8
 
	mcs
;

27 
__u8
 
	mb™k
;

28 
__u8
 
	m˝u
;

29 
__u8
 
	mföished
;

30 
__u32
 
	mext˝u
;

31 
__u32
 
	msockëid
;

32 
__u32
 
	m≠icid
;

33 
__u64
 
	mmcgˇp
;

34 
__u64
 
	msynd
;

35 
__u64
 
	mùid
;

36 
__u64
 
	mµö
;

37 
__u32
 
	mmi¸ocode
;

38 
__u64
 
	mkÊags
;

41 
	#MCE_GET_RECORD_LEN
 
	`_IOR
('M', 1, )

	)

42 
	#MCE_GET_LOG_LEN
 
	`_IOR
('M', 2, )

	)

43 
	#MCE_GETCLEAR_FLAGS
 
	`_IOR
('M', 3, )

	)

	@/usr/include/x86_64-linux-gnu/asm/mman.h

2 #i‚de‡
_ASM_X86_MMAN_H


3 
	#_ASM_X86_MMAN_H


	)

5 
	#MAP_32BIT
 0x40

	)

7 #ifde‡
CONFIG_X86_INTEL_MEMORY_PROTECTION_KEYS


16 
	#¨ch_vm_gë_∑ge_¥Ÿ
(
vm_Êags
Ë
	`__pg¥Ÿ
( \

17 ((
vm_Êags
Ë& 
VM_PKEY_BIT0
 ? 
_PAGE_PKEY_BIT0
 : 0) | \

18 ((
vm_Êags
Ë& 
VM_PKEY_BIT1
 ? 
_PAGE_PKEY_BIT1
 : 0) | \

19 ((
vm_Êags
Ë& 
VM_PKEY_BIT2
 ? 
_PAGE_PKEY_BIT2
 : 0) | \

20 ((
vm_Êags
Ë& 
VM_PKEY_BIT3
 ? 
_PAGE_PKEY_BIT3
 : 0))

	)

22 
	#¨ch_ˇlc_vm_¥Ÿ_bôs
(
¥Ÿ
, 
key
) ( \

23 ((
key
Ë& 0x1 ? 
VM_PKEY_BIT0
 : 0) | \

24 ((
key
Ë& 0x2 ? 
VM_PKEY_BIT1
 : 0) | \

25 ((
key
Ë& 0x4 ? 
VM_PKEY_BIT2
 : 0) | \

26 ((
key
Ë& 0x8 ? 
VM_PKEY_BIT3
 : 0))

	)

29 
	~<asm-gíîic/mm™.h
>

	@/usr/include/x86_64-linux-gnu/asm/msgbuf.h

2 #i‚de‡
__ASM_X64_MSGBUF_H


3 
	#__ASM_X64_MSGBUF_H


	)

5 #i‡!
deföed
(
__x86_64__
Ë|| !deföed(
__ILP32__
)

6 
	~<asm-gíîic/msgbuf.h
>

9 
	~<asm/ùcbuf.h
>

19 
	smsqid64_ds
 {

20 
ùc64_≥rm
 
	mmsg_≥rm
;

21 
__kî√l_l⁄g_t
 
	mmsg_°ime
;

22 
__kî√l_l⁄g_t
 
	mmsg_πime
;

23 
__kî√l_l⁄g_t
 
	mmsg_˘ime
;

24 
__kî√l_ul⁄g_t
 
	mmsg_cbyãs
;

25 
__kî√l_ul⁄g_t
 
	mmsg_qnum
;

26 
__kî√l_ul⁄g_t
 
	mmsg_qbyãs
;

27 
__kî√l_pid_t
 
	mmsg_l•id
;

28 
__kî√l_pid_t
 
	mmsg_Ãpid
;

29 
__kî√l_ul⁄g_t
 
	m__unu£d4
;

30 
__kî√l_ul⁄g_t
 
	m__unu£d5
;

	@/usr/include/x86_64-linux-gnu/asm/msr.h

2 #i‚de‡
_ASM_X86_MSR_H


3 
	#_ASM_X86_MSR_H


	)

5 #i‚de‡
__ASSEMBLY__


7 
	~<löux/ty≥s.h
>

8 
	~<löux/io˘l.h
>

10 
	#X86_IOC_RDMSR_REGS
 
	`_IOWR
('c', 0xA0, 
__u32
[8])

	)

11 
	#X86_IOC_WRMSR_REGS
 
	`_IOWR
('c', 0xA1, 
__u32
[8])

	)

	@/usr/include/x86_64-linux-gnu/asm/mtrr.h

24 #i‚de‡
_ASM_X86_MTRR_H


25 
	#_ASM_X86_MTRR_H


	)

27 
	~<löux/ty≥s.h
>

28 
	~<löux/io˘l.h
>

29 
	~<löux/î∫o.h
>

31 
	#MTRR_IOCTL_BASE
 'M'

	)

38 #ifde‡
__i386__


39 
	smår_£¡ry
 {

40 
	mba£
;

41 
	msize
;

42 
	mty≥
;

45 
	smår_gíåy
 {

46 
	mªgnum
;

47 
	mba£
;

48 
	msize
;

49 
	mty≥
;

54 
	smår_£¡ry
 {

55 
__u64
 
	mba£
;

56 
__u32
 
	msize
;

57 
__u32
 
	mty≥
;

60 
	smår_gíåy
 {

61 
__u64
 
	mba£
;

62 
__u32
 
	msize
;

63 
__u32
 
	mªgnum
;

64 
__u32
 
	mty≥
;

65 
__u32
 
	m_∑d
;

70 
	smår_v¨_ønge
 {

71 
__u32
 
	mba£_lo
;

72 
__u32
 
	mba£_hi
;

73 
__u32
 
	mmask_lo
;

74 
__u32
 
	mmask_hi
;

79 
__u8
 
	tmår_ty≥
;

81 
	#MTRR_NUM_FIXED_RANGES
 88

	)

82 
	#MTRR_MAX_VAR_RANGES
 256

	)

84 
	smår_°©e_ty≥
 {

85 
mår_v¨_ønge
 
	mv¨_ønges
[
MTRR_MAX_VAR_RANGES
];

86 
mår_ty≥
 
	mfixed_ønges
[
MTRR_NUM_FIXED_RANGES
];

87 
	míabÀd
;

88 
	mhave_fixed
;

89 
mår_ty≥
 
	mdef_ty≥
;

92 
	#MTRRphysBa£_MSR
(
ªg
Ë(0x200 + 2 * (ªg))

	)

93 
	#MTRRphysMask_MSR
(
ªg
Ë(0x200 + 2 * (ªgË+ 1)

	)

96 
	#MTRRIOC_ADD_ENTRY
 
	`_IOW
(
MTRR_IOCTL_BASE
, 0, 
mår_£¡ry
)

	)

97 
	#MTRRIOC_SET_ENTRY
 
	`_IOW
(
MTRR_IOCTL_BASE
, 1, 
mår_£¡ry
)

	)

98 
	#MTRRIOC_DEL_ENTRY
 
	`_IOW
(
MTRR_IOCTL_BASE
, 2, 
mår_£¡ry
)

	)

99 
	#MTRRIOC_GET_ENTRY
 
	`_IOWR
(
MTRR_IOCTL_BASE
, 3, 
mår_gíåy
)

	)

100 
	#MTRRIOC_KILL_ENTRY
 
	`_IOW
(
MTRR_IOCTL_BASE
, 4, 
mår_£¡ry
)

	)

101 
	#MTRRIOC_ADD_PAGE_ENTRY
 
	`_IOW
(
MTRR_IOCTL_BASE
, 5, 
mår_£¡ry
)

	)

102 
	#MTRRIOC_SET_PAGE_ENTRY
 
	`_IOW
(
MTRR_IOCTL_BASE
, 6, 
mår_£¡ry
)

	)

103 
	#MTRRIOC_DEL_PAGE_ENTRY
 
	`_IOW
(
MTRR_IOCTL_BASE
, 7, 
mår_£¡ry
)

	)

104 
	#MTRRIOC_GET_PAGE_ENTRY
 
	`_IOWR
(
MTRR_IOCTL_BASE
, 8, 
mår_gíåy
)

	)

105 
	#MTRRIOC_KILL_PAGE_ENTRY
 
	`_IOW
(
MTRR_IOCTL_BASE
, 9, 
mår_£¡ry
)

	)

108 
	#MTRR_TYPE_UNCACHABLE
 0

	)

109 
	#MTRR_TYPE_WRCOMB
 1

	)

112 
	#MTRR_TYPE_WRTHROUGH
 4

	)

113 
	#MTRR_TYPE_WRPROT
 5

	)

114 
	#MTRR_TYPE_WRBACK
 6

	)

115 
	#MTRR_NUM_TYPES
 7

	)

122 
	#MTRR_TYPE_INVALID
 0xff

	)

	@/usr/include/x86_64-linux-gnu/asm/param.h

1 
	~<asm-gíîic/∑øm.h
>

	@/usr/include/x86_64-linux-gnu/asm/perf_regs.h

2 #i‚de‡
_ASM_X86_PERF_REGS_H


3 
	#_ASM_X86_PERF_REGS_H


	)

5 
	e≥rf_evít_x86_ªgs
 {

6 
	mPERF_REG_X86_AX
,

7 
	mPERF_REG_X86_BX
,

8 
	mPERF_REG_X86_CX
,

9 
	mPERF_REG_X86_DX
,

10 
	mPERF_REG_X86_SI
,

11 
	mPERF_REG_X86_DI
,

12 
	mPERF_REG_X86_BP
,

13 
	mPERF_REG_X86_SP
,

14 
	mPERF_REG_X86_IP
,

15 
	mPERF_REG_X86_FLAGS
,

16 
	mPERF_REG_X86_CS
,

17 
	mPERF_REG_X86_SS
,

18 
	mPERF_REG_X86_DS
,

19 
	mPERF_REG_X86_ES
,

20 
	mPERF_REG_X86_FS
,

21 
	mPERF_REG_X86_GS
,

22 
	mPERF_REG_X86_R8
,

23 
	mPERF_REG_X86_R9
,

24 
	mPERF_REG_X86_R10
,

25 
	mPERF_REG_X86_R11
,

26 
	mPERF_REG_X86_R12
,

27 
	mPERF_REG_X86_R13
,

28 
	mPERF_REG_X86_R14
,

29 
	mPERF_REG_X86_R15
,

31 
	mPERF_REG_X86_32_MAX
 = 
PERF_REG_X86_GS
 + 1,

32 
	mPERF_REG_X86_64_MAX
 = 
PERF_REG_X86_R15
 + 1,

35 
	mPERF_REG_X86_XMM0
 = 32,

36 
	mPERF_REG_X86_XMM1
 = 34,

37 
	mPERF_REG_X86_XMM2
 = 36,

38 
	mPERF_REG_X86_XMM3
 = 38,

39 
	mPERF_REG_X86_XMM4
 = 40,

40 
	mPERF_REG_X86_XMM5
 = 42,

41 
	mPERF_REG_X86_XMM6
 = 44,

42 
	mPERF_REG_X86_XMM7
 = 46,

43 
	mPERF_REG_X86_XMM8
 = 48,

44 
	mPERF_REG_X86_XMM9
 = 50,

45 
	mPERF_REG_X86_XMM10
 = 52,

46 
	mPERF_REG_X86_XMM11
 = 54,

47 
	mPERF_REG_X86_XMM12
 = 56,

48 
	mPERF_REG_X86_XMM13
 = 58,

49 
	mPERF_REG_X86_XMM14
 = 60,

50 
	mPERF_REG_X86_XMM15
 = 62,

53 
	mPERF_REG_X86_XMM_MAX
 = 
PERF_REG_X86_XMM15
 + 2,

56 
	#PERF_REG_EXTENDED_MASK
 (~((1ULL << 
PERF_REG_X86_XMM0
Ë- 1))

	)

	@/usr/include/x86_64-linux-gnu/asm/poll.h

1 
	~<asm-gíîic/pﬁl.h
>

	@/usr/include/x86_64-linux-gnu/asm/posix_types.h

2 #ifde‡
__i386__


3 
	~<asm/posix_ty≥s_32.h
>

4 #ñi‡
deföed
(
__ILP32__
)

5 
	~<asm/posix_ty≥s_x32.h
>

7 
	~<asm/posix_ty≥s_64.h
>

	@/usr/include/x86_64-linux-gnu/asm/posix_types_32.h

2 #i‚de‡
_ASM_X86_POSIX_TYPES_32_H


3 
	#_ASM_X86_POSIX_TYPES_32_H


	)

11 
	t__kî√l_mode_t
;

12 
	#__kî√l_mode_t
 
__kî√l_mode_t


	)

14 
	t__kî√l_ùc_pid_t
;

15 
	#__kî√l_ùc_pid_t
 
__kî√l_ùc_pid_t


	)

17 
	t__kî√l_uid_t
;

18 
	t__kî√l_gid_t
;

19 
	#__kî√l_uid_t
 
__kî√l_uid_t


	)

21 
	t__kî√l_ﬁd_dev_t
;

22 
	#__kî√l_ﬁd_dev_t
 
__kî√l_ﬁd_dev_t


	)

24 
	~<asm-gíîic/posix_ty≥s.h
>

	@/usr/include/x86_64-linux-gnu/asm/posix_types_64.h

2 #i‚de‡
_ASM_X86_POSIX_TYPES_64_H


3 
	#_ASM_X86_POSIX_TYPES_64_H


	)

11 
	t__kî√l_ﬁd_uid_t
;

12 
	t__kî√l_ﬁd_gid_t
;

13 
	#__kî√l_ﬁd_uid_t
 
__kî√l_ﬁd_uid_t


	)

15 
	t__kî√l_ﬁd_dev_t
;

16 
	#__kî√l_ﬁd_dev_t
 
__kî√l_ﬁd_dev_t


	)

18 
	~<asm-gíîic/posix_ty≥s.h
>

	@/usr/include/x86_64-linux-gnu/asm/posix_types_x32.h

2 #i‚de‡
_ASM_X86_POSIX_TYPES_X32_H


3 
	#_ASM_X86_POSIX_TYPES_X32_H


	)

14 
	t__kî√l_l⁄g_t
;

15 
	t__kî√l_ul⁄g_t
;

16 
	#__kî√l_l⁄g_t
 
__kî√l_l⁄g_t


	)

18 
	~<asm/posix_ty≥s_64.h
>

	@/usr/include/x86_64-linux-gnu/asm/prctl.h

2 #i‚de‡
_ASM_X86_PRCTL_H


3 
	#_ASM_X86_PRCTL_H


	)

5 
	#ARCH_SET_GS
 0x1001

	)

6 
	#ARCH_SET_FS
 0x1002

	)

7 
	#ARCH_GET_FS
 0x1003

	)

8 
	#ARCH_GET_GS
 0x1004

	)

10 
	#ARCH_GET_CPUID
 0x1011

	)

11 
	#ARCH_SET_CPUID
 0x1012

	)

13 
	#ARCH_GET_XCOMP_SUPP
 0x1021

	)

14 
	#ARCH_GET_XCOMP_PERM
 0x1022

	)

15 
	#ARCH_REQ_XCOMP_PERM
 0x1023

	)

17 
	#ARCH_MAP_VDSO_X32
 0x2001

	)

18 
	#ARCH_MAP_VDSO_32
 0x2002

	)

19 
	#ARCH_MAP_VDSO_64
 0x2003

	)

	@/usr/include/x86_64-linux-gnu/asm/processor-flags.h

2 #i‚de‡
_ASM_X86_PROCESSOR_FLAGS_H


3 
	#_ASM_X86_PROCESSOR_FLAGS_H


	)

6 
	~<löux/c⁄°.h
>

11 
	#X86_EFLAGS_CF_BIT
 0

	)

12 
	#X86_EFLAGS_CF
 
	`_BITUL
(
X86_EFLAGS_CF_BIT
)

	)

13 
	#X86_EFLAGS_FIXED_BIT
 1

	)

14 
	#X86_EFLAGS_FIXED
 
	`_BITUL
(
X86_EFLAGS_FIXED_BIT
)

	)

15 
	#X86_EFLAGS_PF_BIT
 2

	)

16 
	#X86_EFLAGS_PF
 
	`_BITUL
(
X86_EFLAGS_PF_BIT
)

	)

17 
	#X86_EFLAGS_AF_BIT
 4

	)

18 
	#X86_EFLAGS_AF
 
	`_BITUL
(
X86_EFLAGS_AF_BIT
)

	)

19 
	#X86_EFLAGS_ZF_BIT
 6

	)

20 
	#X86_EFLAGS_ZF
 
	`_BITUL
(
X86_EFLAGS_ZF_BIT
)

	)

21 
	#X86_EFLAGS_SF_BIT
 7

	)

22 
	#X86_EFLAGS_SF
 
	`_BITUL
(
X86_EFLAGS_SF_BIT
)

	)

23 
	#X86_EFLAGS_TF_BIT
 8

	)

24 
	#X86_EFLAGS_TF
 
	`_BITUL
(
X86_EFLAGS_TF_BIT
)

	)

25 
	#X86_EFLAGS_IF_BIT
 9

	)

26 
	#X86_EFLAGS_IF
 
	`_BITUL
(
X86_EFLAGS_IF_BIT
)

	)

27 
	#X86_EFLAGS_DF_BIT
 10

	)

28 
	#X86_EFLAGS_DF
 
	`_BITUL
(
X86_EFLAGS_DF_BIT
)

	)

29 
	#X86_EFLAGS_OF_BIT
 11

	)

30 
	#X86_EFLAGS_OF
 
	`_BITUL
(
X86_EFLAGS_OF_BIT
)

	)

31 
	#X86_EFLAGS_IOPL_BIT
 12

	)

32 
	#X86_EFLAGS_IOPL
 (
	`_AC
(3,
UL
Ë<< 
X86_EFLAGS_IOPL_BIT
)

	)

33 
	#X86_EFLAGS_NT_BIT
 14

	)

34 
	#X86_EFLAGS_NT
 
	`_BITUL
(
X86_EFLAGS_NT_BIT
)

	)

35 
	#X86_EFLAGS_RF_BIT
 16

	)

36 
	#X86_EFLAGS_RF
 
	`_BITUL
(
X86_EFLAGS_RF_BIT
)

	)

37 
	#X86_EFLAGS_VM_BIT
 17

	)

38 
	#X86_EFLAGS_VM
 
	`_BITUL
(
X86_EFLAGS_VM_BIT
)

	)

39 
	#X86_EFLAGS_AC_BIT
 18

	)

40 
	#X86_EFLAGS_AC
 
	`_BITUL
(
X86_EFLAGS_AC_BIT
)

	)

41 
	#X86_EFLAGS_VIF_BIT
 19

	)

42 
	#X86_EFLAGS_VIF
 
	`_BITUL
(
X86_EFLAGS_VIF_BIT
)

	)

43 
	#X86_EFLAGS_VIP_BIT
 20

	)

44 
	#X86_EFLAGS_VIP
 
	`_BITUL
(
X86_EFLAGS_VIP_BIT
)

	)

45 
	#X86_EFLAGS_ID_BIT
 21

	)

46 
	#X86_EFLAGS_ID
 
	`_BITUL
(
X86_EFLAGS_ID_BIT
)

	)

51 
	#X86_CR0_PE_BIT
 0

	)

52 
	#X86_CR0_PE
 
	`_BITUL
(
X86_CR0_PE_BIT
)

	)

53 
	#X86_CR0_MP_BIT
 1

	)

54 
	#X86_CR0_MP
 
	`_BITUL
(
X86_CR0_MP_BIT
)

	)

55 
	#X86_CR0_EM_BIT
 2

	)

56 
	#X86_CR0_EM
 
	`_BITUL
(
X86_CR0_EM_BIT
)

	)

57 
	#X86_CR0_TS_BIT
 3

	)

58 
	#X86_CR0_TS
 
	`_BITUL
(
X86_CR0_TS_BIT
)

	)

59 
	#X86_CR0_ET_BIT
 4

	)

60 
	#X86_CR0_ET
 
	`_BITUL
(
X86_CR0_ET_BIT
)

	)

61 
	#X86_CR0_NE_BIT
 5

	)

62 
	#X86_CR0_NE
 
	`_BITUL
(
X86_CR0_NE_BIT
)

	)

63 
	#X86_CR0_WP_BIT
 16

	)

64 
	#X86_CR0_WP
 
	`_BITUL
(
X86_CR0_WP_BIT
)

	)

65 
	#X86_CR0_AM_BIT
 18

	)

66 
	#X86_CR0_AM
 
	`_BITUL
(
X86_CR0_AM_BIT
)

	)

67 
	#X86_CR0_NW_BIT
 29

	)

68 
	#X86_CR0_NW
 
	`_BITUL
(
X86_CR0_NW_BIT
)

	)

69 
	#X86_CR0_CD_BIT
 30

	)

70 
	#X86_CR0_CD
 
	`_BITUL
(
X86_CR0_CD_BIT
)

	)

71 
	#X86_CR0_PG_BIT
 31

	)

72 
	#X86_CR0_PG
 
	`_BITUL
(
X86_CR0_PG_BIT
)

	)

77 
	#X86_CR3_PWT_BIT
 3

	)

78 
	#X86_CR3_PWT
 
	`_BITUL
(
X86_CR3_PWT_BIT
)

	)

79 
	#X86_CR3_PCD_BIT
 4

	)

80 
	#X86_CR3_PCD
 
	`_BITUL
(
X86_CR3_PCD_BIT
)

	)

82 
	#X86_CR3_PCID_BITS
 12

	)

83 
	#X86_CR3_PCID_MASK
 (
	`_AC
((1UL << 
X86_CR3_PCID_BITS
Ë- 1, 
UL
))

	)

85 
	#X86_CR3_PCID_NOFLUSH_BIT
 63

	)

86 
	#X86_CR3_PCID_NOFLUSH
 
	`_BITULL
(
X86_CR3_PCID_NOFLUSH_BIT
)

	)

91 
	#X86_CR4_VME_BIT
 0

	)

92 
	#X86_CR4_VME
 
	`_BITUL
(
X86_CR4_VME_BIT
)

	)

93 
	#X86_CR4_PVI_BIT
 1

	)

94 
	#X86_CR4_PVI
 
	`_BITUL
(
X86_CR4_PVI_BIT
)

	)

95 
	#X86_CR4_TSD_BIT
 2

	)

96 
	#X86_CR4_TSD
 
	`_BITUL
(
X86_CR4_TSD_BIT
)

	)

97 
	#X86_CR4_DE_BIT
 3

	)

98 
	#X86_CR4_DE
 
	`_BITUL
(
X86_CR4_DE_BIT
)

	)

99 
	#X86_CR4_PSE_BIT
 4

	)

100 
	#X86_CR4_PSE
 
	`_BITUL
(
X86_CR4_PSE_BIT
)

	)

101 
	#X86_CR4_PAE_BIT
 5

	)

102 
	#X86_CR4_PAE
 
	`_BITUL
(
X86_CR4_PAE_BIT
)

	)

103 
	#X86_CR4_MCE_BIT
 6

	)

104 
	#X86_CR4_MCE
 
	`_BITUL
(
X86_CR4_MCE_BIT
)

	)

105 
	#X86_CR4_PGE_BIT
 7

	)

106 
	#X86_CR4_PGE
 
	`_BITUL
(
X86_CR4_PGE_BIT
)

	)

107 
	#X86_CR4_PCE_BIT
 8

	)

108 
	#X86_CR4_PCE
 
	`_BITUL
(
X86_CR4_PCE_BIT
)

	)

109 
	#X86_CR4_OSFXSR_BIT
 9

	)

110 
	#X86_CR4_OSFXSR
 
	`_BITUL
(
X86_CR4_OSFXSR_BIT
)

	)

111 
	#X86_CR4_OSXMMEXCPT_BIT
 10

	)

112 
	#X86_CR4_OSXMMEXCPT
 
	`_BITUL
(
X86_CR4_OSXMMEXCPT_BIT
)

	)

113 
	#X86_CR4_UMIP_BIT
 11

	)

114 
	#X86_CR4_UMIP
 
	`_BITUL
(
X86_CR4_UMIP_BIT
)

	)

115 
	#X86_CR4_LA57_BIT
 12

	)

116 
	#X86_CR4_LA57
 
	`_BITUL
(
X86_CR4_LA57_BIT
)

	)

117 
	#X86_CR4_VMXE_BIT
 13

	)

118 
	#X86_CR4_VMXE
 
	`_BITUL
(
X86_CR4_VMXE_BIT
)

	)

119 
	#X86_CR4_SMXE_BIT
 14

	)

120 
	#X86_CR4_SMXE
 
	`_BITUL
(
X86_CR4_SMXE_BIT
)

	)

121 
	#X86_CR4_FSGSBASE_BIT
 16

	)

122 
	#X86_CR4_FSGSBASE
 
	`_BITUL
(
X86_CR4_FSGSBASE_BIT
)

	)

123 
	#X86_CR4_PCIDE_BIT
 17

	)

124 
	#X86_CR4_PCIDE
 
	`_BITUL
(
X86_CR4_PCIDE_BIT
)

	)

125 
	#X86_CR4_OSXSAVE_BIT
 18

	)

126 
	#X86_CR4_OSXSAVE
 
	`_BITUL
(
X86_CR4_OSXSAVE_BIT
)

	)

127 
	#X86_CR4_SMEP_BIT
 20

	)

128 
	#X86_CR4_SMEP
 
	`_BITUL
(
X86_CR4_SMEP_BIT
)

	)

129 
	#X86_CR4_SMAP_BIT
 21

	)

130 
	#X86_CR4_SMAP
 
	`_BITUL
(
X86_CR4_SMAP_BIT
)

	)

131 
	#X86_CR4_PKE_BIT
 22

	)

132 
	#X86_CR4_PKE
 
	`_BITUL
(
X86_CR4_PKE_BIT
)

	)

137 
	#X86_CR8_TPR
 
	`_AC
(0x0000000f,
UL
Ë

	)

146 
	#CX86_PCR0
 0x20

	)

147 
	#CX86_GCR
 0xb8

	)

148 
	#CX86_CCR0
 0xc0

	)

149 
	#CX86_CCR1
 0xc1

	)

150 
	#CX86_CCR2
 0xc2

	)

151 
	#CX86_CCR3
 0xc3

	)

152 
	#CX86_CCR4
 0xe8

	)

153 
	#CX86_CCR5
 0xe9

	)

154 
	#CX86_CCR6
 0xó

	)

155 
	#CX86_CCR7
 0xeb

	)

156 
	#CX86_PCR1
 0xf0

	)

157 
	#CX86_DIR0
 0x„

	)

158 
	#CX86_DIR1
 0xff

	)

159 
	#CX86_ARR_BASE
 0xc4

	)

160 
	#CX86_RCR_BASE
 0xdc

	)

162 
	#CR0_STATE
 (
X86_CR0_PE
 | 
X86_CR0_MP
 | 
X86_CR0_ET
 | \

163 
X86_CR0_NE
 | 
X86_CR0_WP
 | 
X86_CR0_AM
 | \

164 
X86_CR0_PG
)

	)

	@/usr/include/x86_64-linux-gnu/asm/ptrace-abi.h

2 #i‚de‡
_ASM_X86_PTRACE_ABI_H


3 
	#_ASM_X86_PTRACE_ABI_H


	)

5 #ifde‡
__i386__


7 
	#EBX
 0

	)

8 
	#ECX
 1

	)

9 
	#EDX
 2

	)

10 
	#ESI
 3

	)

11 
	#EDI
 4

	)

12 
	#EBP
 5

	)

13 
	#EAX
 6

	)

14 
	#DS
 7

	)

15 
	#ES
 8

	)

16 
	#FS
 9

	)

17 
	#GS
 10

	)

18 
	#ORIG_EAX
 11

	)

19 
	#EIP
 12

	)

20 
	#CS
 13

	)

21 
	#EFL
 14

	)

22 
	#UESP
 15

	)

23 
	#SS
 16

	)

24 
	#FRAME_SIZE
 17

	)

28 #i‡
deföed
(
__ASSEMBLY__
Ë|| deföed(
__FRAME_OFFSETS
)

33 
	#R15
 0

	)

34 
	#R14
 8

	)

35 
	#R13
 16

	)

36 
	#R12
 24

	)

37 
	#RBP
 32

	)

38 
	#RBX
 40

	)

40 
	#R11
 48

	)

41 
	#R10
 56

	)

42 
	#R9
 64

	)

43 
	#R8
 72

	)

44 
	#RAX
 80

	)

45 
	#RCX
 88

	)

46 
	#RDX
 96

	)

47 
	#RSI
 104

	)

48 
	#RDI
 112

	)

53 
	#ORIG_RAX
 120

	)

55 
	#RIP
 128

	)

56 
	#CS
 136

	)

57 
	#EFLAGS
 144

	)

58 
	#RSP
 152

	)

59 
	#SS
 160

	)

63 
	#FRAME_SIZE
 168

	)

68 
	#PTRACE_GETREGS
 12

	)

69 
	#PTRACE_SETREGS
 13

	)

70 
	#PTRACE_GETFPREGS
 14

	)

71 
	#PTRACE_SETFPREGS
 15

	)

72 
	#PTRACE_GETFPXREGS
 18

	)

73 
	#PTRACE_SETFPXREGS
 19

	)

75 
	#PTRACE_OLDSETOPTIONS
 21

	)

78 
	#PTRACE_GET_THREAD_AREA
 25

	)

79 
	#PTRACE_SET_THREAD_AREA
 26

	)

81 #ifde‡
__x86_64__


82 
	#PTRACE_ARCH_PRCTL
 30

	)

85 
	#PTRACE_SYSEMU
 31

	)

86 
	#PTRACE_SYSEMU_SINGLESTEP
 32

	)

88 
	#PTRACE_SINGLEBLOCK
 33

	)

90 #i‚de‡
__ASSEMBLY__


91 
	~<löux/ty≥s.h
>

	@/usr/include/x86_64-linux-gnu/asm/ptrace.h

2 #i‚de‡
_ASM_X86_PTRACE_H


3 
	#_ASM_X86_PTRACE_H


	)

6 
	~<asm/±ø˚-abi.h
>

7 
	~<asm/¥o˚ss‹-Êags.h
>

10 #i‚de‡
__ASSEMBLY__


12 #ifde‡
__i386__


17 
	s±_ªgs
 {

18 
	mebx
;

19 
	mecx
;

20 
	medx
;

21 
	mesi
;

22 
	medi
;

23 
	mebp
;

24 
	móx
;

25 
	mxds
;

26 
	mxes
;

27 
	mxfs
;

28 
	mxgs
;

29 
	m‹ig_óx
;

30 
	meù
;

31 
	mxcs
;

32 
	meÊags
;

33 
	me•
;

34 
	mxss
;

41 
	s±_ªgs
 {

46 
	mr15
;

47 
	mr14
;

48 
	mr13
;

49 
	mr12
;

50 
	mrbp
;

51 
	mrbx
;

53 
	mr11
;

54 
	mr10
;

55 
	mr9
;

56 
	mr8
;

57 
	møx
;

58 
	mrcx
;

59 
	mrdx
;

60 
	mrsi
;

61 
	mrdi
;

66 
	m‹ig_øx
;

68 
	mrù
;

69 
	mcs
;

70 
	meÊags
;

71 
	mr•
;

72 
	mss
;

	@/usr/include/x86_64-linux-gnu/asm/resource.h

1 
	~<asm-gíîic/ªsour˚.h
>

	@/usr/include/x86_64-linux-gnu/asm/sembuf.h

2 #i‚de‡
_ASM_X86_SEMBUF_H


3 
	#_ASM_X86_SEMBUF_H


	)

5 
	~<asm/ùcbuf.h
>

18 
	s£mid64_ds
 {

19 
ùc64_≥rm
 
	m£m_≥rm
;

20 #ifde‡
__i386__


21 
	m£m_Ÿime
;

22 
	m£m_Ÿime_high
;

23 
	m£m_˘ime
;

24 
	m£m_˘ime_high
;

26 
__kî√l_l⁄g_t
 
	m£m_Ÿime
;

27 
__kî√l_ul⁄g_t
 
	m__unu£d1
;

28 
__kî√l_l⁄g_t
 
	m£m_˘ime
;

29 
__kî√l_ul⁄g_t
 
	m__unu£d2
;

31 
__kî√l_ul⁄g_t
 
	m£m_n£ms
;

32 
__kî√l_ul⁄g_t
 
	m__unu£d3
;

33 
__kî√l_ul⁄g_t
 
	m__unu£d4
;

	@/usr/include/x86_64-linux-gnu/asm/setup.h

	@/usr/include/x86_64-linux-gnu/asm/sgx.h

5 #i‚de‡
_ASM_X86_SGX_H


6 
	#_ASM_X86_SGX_H


	)

8 
	~<löux/ty≥s.h
>

9 
	~<löux/io˘l.h
>

16 
	esgx_∑ge_Êags
 {

17 
	mSGX_PAGE_MEASURE
 = 0x01,

20 
	#SGX_MAGIC
 0xA4

	)

22 
	#SGX_IOC_ENCLAVE_CREATE
 \

23 
	`_IOW
(
SGX_MAGIC
, 0x00, 
sgx_í˛ave_¸óã
)

	)

24 
	#SGX_IOC_ENCLAVE_ADD_PAGES
 \

25 
	`_IOWR
(
SGX_MAGIC
, 0x01, 
sgx_í˛ave_add_∑ges
)

	)

26 
	#SGX_IOC_ENCLAVE_INIT
 \

27 
	`_IOW
(
SGX_MAGIC
, 0x02, 
sgx_í˛ave_öô
)

	)

28 
	#SGX_IOC_ENCLAVE_PROVISION
 \

29 
	`_IOW
(
SGX_MAGIC
, 0x03, 
sgx_í˛ave_¥ovisi⁄
)

	)

36 
	ssgx_í˛ave_¸óã
 {

37 
__u64
 
	m§c
;

50 
	ssgx_í˛ave_add_∑ges
 {

51 
__u64
 
	m§c
;

52 
__u64
 
	moff£t
;

53 
__u64
 
	mÀngth
;

54 
__u64
 
	m£cöfo
;

55 
__u64
 
	mÊags
;

56 
__u64
 
	mcou¡
;

64 
	ssgx_í˛ave_öô
 {

65 
__u64
 
	msig°ru˘
;

73 
	ssgx_í˛ave_¥ovisi⁄
 {

74 
__u64
 
	mfd
;

77 
	gsgx_í˛ave_run
;

92 (*
	tsgx_í˛ave_u£r_h™dÀr_t
)(
	trdi
, 
	trsi
, 
	trdx
,

93 
	tr•
, 
	tr8
, 
	tr9
,

94 
	tsgx_í˛ave_run
 *
	trun
);

112 
	ssgx_í˛ave_run
 {

113 
__u64
 
tcs
;

114 
__u32
 
fun˘i⁄
;

115 
__u16
 
ex˚±i⁄_ve˘‹
;

116 
__u16
 
ex˚±i⁄_îr‹_code
;

117 
__u64
 
ex˚±i⁄_addr
;

118 
__u64
 
u£r_h™dÀr
;

119 
__u64
 
u£r_d©a
;

120 
__u8
 
ª£rved
[216];

163 (*
	tvdso_sgx_íãr_í˛ave_t
)(
	trdi
, 
	trsi
,

164 
	trdx
, 
	tfun˘i⁄
,

165 
	tr8
, 
	tr9
,

166 
	tsgx_í˛ave_run
 *
	trun
);

	@/usr/include/x86_64-linux-gnu/asm/shmbuf.h

2 #i‚de‡
__ASM_X86_SHMBUF_H


3 
	#__ASM_X86_SHMBUF_H


	)

5 #i‡!
deföed
(
__x86_64__
Ë|| !deföed(
__ILP32__
)

6 
	~<asm-gíîic/shmbuf.h
>

16 
	sshmid64_ds
 {

17 
ùc64_≥rm
 
	mshm_≥rm
;

18 
size_t
 
	mshm_£gsz
;

19 
__kî√l_l⁄g_t
 
	mshm_©ime
;

20 
__kî√l_l⁄g_t
 
	mshm_dtime
;

21 
__kî√l_l⁄g_t
 
	mshm_˘ime
;

22 
__kî√l_pid_t
 
	mshm_˝id
;

23 
__kî√l_pid_t
 
	mshm_Õid
;

24 
__kî√l_ul⁄g_t
 
	mshm_«âch
;

25 
__kî√l_ul⁄g_t
 
	m__unu£d4
;

26 
__kî√l_ul⁄g_t
 
	m__unu£d5
;

29 
	sshmöfo64
 {

30 
__kî√l_ul⁄g_t
 
	mshmmax
;

31 
__kî√l_ul⁄g_t
 
	mshmmö
;

32 
__kî√l_ul⁄g_t
 
	mshmmni
;

33 
__kî√l_ul⁄g_t
 
	mshm£g
;

34 
__kî√l_ul⁄g_t
 
	mshmÆl
;

35 
__kî√l_ul⁄g_t
 
	m__unu£d1
;

36 
__kî√l_ul⁄g_t
 
	m__unu£d2
;

37 
__kî√l_ul⁄g_t
 
	m__unu£d3
;

38 
__kî√l_ul⁄g_t
 
	m__unu£d4
;

	@/usr/include/x86_64-linux-gnu/asm/sigcontext.h

2 #i‚de‡
_ASM_X86_SIGCONTEXT_H


3 
	#_ASM_X86_SIGCONTEXT_H


	)

19 
	~<löux/ty≥s.h
>

21 
	#FP_XSTATE_MAGIC1
 0x46505853U

	)

22 
	#FP_XSTATE_MAGIC2
 0x46505845U

	)

23 
	#FP_XSTATE_MAGIC2_SIZE
 (
FP_XSTATE_MAGIC2
)

	)

40 
	s_Âx_sw_byãs
 {

45 
__u32
 
	mmagic1
;

54 
__u32
 
	mexãnded_size
;

60 
__u64
 
	mx„©uªs
;

66 
__u32
 
	mx°©e_size
;

69 
__u32
 
	m∑ddög
[7];

85 
	s_Âªg
 {

86 
__u16
 
	msignifiˇnd
[4];

87 
__u16
 
	mexp⁄ít
;

91 
	s_Âxªg
 {

92 
__u16
 
	msignifiˇnd
[4];

93 
__u16
 
	mexp⁄ít
;

94 
__u16
 
	m∑ddög
[3];

98 
	s_xmmªg
 {

99 
__u32
 
	mñemít
[4];

102 
	#X86_FXSR_MAGIC
 0x0000

	)

107 
	s_Â°©e_32
 {

109 
__u32
 
	mcw
;

110 
__u32
 
	msw
;

111 
__u32
 
	mèg
;

112 
__u32
 
	mùoff
;

113 
__u32
 
	mcs£l
;

114 
__u32
 
	md©aoff
;

115 
__u32
 
	md©a£l
;

116 
_Âªg
 
	m_°
[8];

117 
__u16
 
	m°©us
;

118 
__u16
 
	mmagic
;

122 
__u32
 
	m_fx§_ív
[6];

123 
__u32
 
	mmxc§
;

124 
__u32
 
	mª£rved
;

125 
_Âxªg
 
	m_fx§_°
[8];

126 
_xmmªg
 
	m_xmm
[8];

128 
__u32
 
	m∑ddög1
[44];

129 
__u32
 
	m∑ddög
[44];

133 
__u32
 
	m∑ddög2
[12];

134 
_Âx_sw_byãs
 
	msw_ª£rved
;

149 
	s_Â°©e_64
 {

150 
__u16
 
	mcwd
;

151 
__u16
 
	mswd
;

153 
__u16
 
	mtwd
;

154 
__u16
 
	mf›
;

155 
__u64
 
	mrù
;

156 
__u64
 
	mrdp
;

157 
__u32
 
	mmxc§
;

158 
__u32
 
	mmxc§_mask
;

159 
__u32
 
	m°_•a˚
[32];

160 
__u32
 
	mxmm_•a˚
[64];

161 
__u32
 
	mª£rved2
[12];

163 
__u32
 
	mª£rved3
[12];

164 
_Âx_sw_byãs
 
	msw_ª£rved
;

168 #ifde‡
__i386__


169 
	#_Â°©e
 
_Â°©e_32


	)

171 
	#_Â°©e
 
_Â°©e_64


	)

174 
	s_hódî
 {

175 
__u64
 
	mx„©uªs
;

176 
__u64
 
	mª£rved1
[2];

177 
__u64
 
	mª£rved2
[5];

180 
	s_ymmh_°©e
 {

182 
__u32
 
	mymmh_•a˚
[64];

192 
	s_x°©e
 {

193 
_Â°©e
 
	mÂ°©e
;

194 
_hódî
 
	mx°©e_hdr
;

195 
_ymmh_°©e
 
	mymmh
;

202 
	ssigc⁄ãxt_32
 {

203 
__u16
 
	mgs
, 
	m__gsh
;

204 
__u16
 
	mfs
, 
	m__fsh
;

205 
__u16
 
	mes
, 
	m__esh
;

206 
__u16
 
	mds
, 
	m__dsh
;

207 
__u32
 
	mdi
;

208 
__u32
 
	msi
;

209 
__u32
 
	mbp
;

210 
__u32
 
	m•
;

211 
__u32
 
	mbx
;

212 
__u32
 
	mdx
;

213 
__u32
 
	mcx
;

214 
__u32
 
	max
;

215 
__u32
 
	må≠no
;

216 
__u32
 
	mîr
;

217 
__u32
 
	mù
;

218 
__u16
 
	mcs
, 
	m__csh
;

219 
__u32
 
	mÊags
;

220 
__u32
 
	m•_©_sig«l
;

221 
__u16
 
	mss
, 
	m__ssh
;

230 
__u32
 
	mÂ°©e
;

231 
__u32
 
	mﬁdmask
;

232 
__u32
 
	m¸2
;

238 
	ssigc⁄ãxt_64
 {

239 
__u64
 
	mr8
;

240 
__u64
 
	mr9
;

241 
__u64
 
	mr10
;

242 
__u64
 
	mr11
;

243 
__u64
 
	mr12
;

244 
__u64
 
	mr13
;

245 
__u64
 
	mr14
;

246 
__u64
 
	mr15
;

247 
__u64
 
	mdi
;

248 
__u64
 
	msi
;

249 
__u64
 
	mbp
;

250 
__u64
 
	mbx
;

251 
__u64
 
	mdx
;

252 
__u64
 
	max
;

253 
__u64
 
	mcx
;

254 
__u64
 
	m•
;

255 
__u64
 
	mù
;

256 
__u64
 
	mÊags
;

257 
__u16
 
	mcs
;

258 
__u16
 
	mgs
;

259 
__u16
 
	mfs
;

260 
__u16
 
	mss
;

261 
__u64
 
	mîr
;

262 
__u64
 
	må≠no
;

263 
__u64
 
	mﬁdmask
;

264 
__u64
 
	m¸2
;

273 
__u64
 
	mÂ°©e
;

274 
__u64
 
	mª£rved1
[8];

287 
	#_Â°©e_ü32
 
_Â°©e_32


	)

288 
	#sigc⁄ãxt_ü32
 
sigc⁄ãxt_32


	)

291 #ifde‡
__i386__


292 
	ssigc⁄ãxt
 {

293 
__u16
 
	mgs
, 
	m__gsh
;

294 
__u16
 
	mfs
, 
	m__fsh
;

295 
__u16
 
	mes
, 
	m__esh
;

296 
__u16
 
	mds
, 
	m__dsh
;

297 
__u32
 
	medi
;

298 
__u32
 
	mesi
;

299 
__u32
 
	mebp
;

300 
__u32
 
	me•
;

301 
__u32
 
	mebx
;

302 
__u32
 
	medx
;

303 
__u32
 
	mecx
;

304 
__u32
 
	móx
;

305 
__u32
 
	må≠no
;

306 
__u32
 
	mîr
;

307 
__u32
 
	meù
;

308 
__u16
 
	mcs
, 
	m__csh
;

309 
__u32
 
	meÊags
;

310 
__u32
 
	me•_©_sig«l
;

311 
__u16
 
	mss
, 
	m__ssh
;

312 
_Â°©e
 *
	mÂ°©e
;

313 
__u32
 
	mﬁdmask
;

314 
__u32
 
	m¸2
;

317 
	ssigc⁄ãxt
 {

318 
__u64
 
	mr8
;

319 
__u64
 
	mr9
;

320 
__u64
 
	mr10
;

321 
__u64
 
	mr11
;

322 
__u64
 
	mr12
;

323 
__u64
 
	mr13
;

324 
__u64
 
	mr14
;

325 
__u64
 
	mr15
;

326 
__u64
 
	mrdi
;

327 
__u64
 
	mrsi
;

328 
__u64
 
	mrbp
;

329 
__u64
 
	mrbx
;

330 
__u64
 
	mrdx
;

331 
__u64
 
	møx
;

332 
__u64
 
	mrcx
;

333 
__u64
 
	mr•
;

334 
__u64
 
	mrù
;

335 
__u64
 
	meÊags
;

336 
__u16
 
	mcs
;

362 
__u16
 
	mgs
;

363 
__u16
 
	mfs
;

365 
__u16
 
	mss
;

366 
__u16
 
	m__∑d0
;

368 
__u64
 
	mîr
;

369 
__u64
 
	må≠no
;

370 
__u64
 
	mﬁdmask
;

371 
__u64
 
	m¸2
;

372 
_Â°©e
 *
	mÂ°©e
;

373 #ifde‡
__ILP32__


374 
__u32
 
	m__Â°©e_∑d
;

376 
__u64
 
	mª£rved1
[8];

	@/usr/include/x86_64-linux-gnu/asm/sigcontext32.h

2 #i‚de‡
_ASM_X86_SIGCONTEXT32_H


3 
	#_ASM_X86_SIGCONTEXT32_H


	)

7 
	~<asm/sigc⁄ãxt.h
>

	@/usr/include/x86_64-linux-gnu/asm/siginfo.h

2 #i‚de‡
_ASM_X86_SIGINFO_H


3 
	#_ASM_X86_SIGINFO_H


	)

5 #ifde‡
__x86_64__


6 #ifde‡
__ILP32__


7 
	t__kî√l_si_˛ock_t
 
	t__©åibuã__
((
	tÆig√d
(4)));

8 
	#__ARCH_SI_CLOCK_T
 
__kî√l_si_˛ock_t


	)

9 
	#__ARCH_SI_ATTRIBUTES
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

13 
	~<asm-gíîic/sigöfo.h
>

	@/usr/include/x86_64-linux-gnu/asm/signal.h

2 #i‚de‡
_ASM_X86_SIGNAL_H


3 
	#_ASM_X86_SIGNAL_H


	)

5 #i‚de‡
__ASSEMBLY__


6 
	~<löux/ty≥s.h
>

7 
	~<löux/time.h
>

11 
	gsigöfo
;

15 
	#NSIG
 32

	)

16 
	tsig£t_t
;

21 
	#SIGHUP
 1

	)

22 
	#SIGINT
 2

	)

23 
	#SIGQUIT
 3

	)

24 
	#SIGILL
 4

	)

25 
	#SIGTRAP
 5

	)

26 
	#SIGABRT
 6

	)

27 
	#SIGIOT
 6

	)

28 
	#SIGBUS
 7

	)

29 
	#SIGFPE
 8

	)

30 
	#SIGKILL
 9

	)

31 
	#SIGUSR1
 10

	)

32 
	#SIGSEGV
 11

	)

33 
	#SIGUSR2
 12

	)

34 
	#SIGPIPE
 13

	)

35 
	#SIGALRM
 14

	)

36 
	#SIGTERM
 15

	)

37 
	#SIGSTKFLT
 16

	)

38 
	#SIGCHLD
 17

	)

39 
	#SIGCONT
 18

	)

40 
	#SIGSTOP
 19

	)

41 
	#SIGTSTP
 20

	)

42 
	#SIGTTIN
 21

	)

43 
	#SIGTTOU
 22

	)

44 
	#SIGURG
 23

	)

45 
	#SIGXCPU
 24

	)

46 
	#SIGXFSZ
 25

	)

47 
	#SIGVTALRM
 26

	)

48 
	#SIGPROF
 27

	)

49 
	#SIGWINCH
 28

	)

50 
	#SIGIO
 29

	)

51 
	#SIGPOLL
 
SIGIO


	)

55 
	#SIGPWR
 30

	)

56 
	#SIGSYS
 31

	)

57 
	#SIGUNUSED
 31

	)

60 
	#SIGRTMIN
 32

	)

61 
	#SIGRTMAX
 
_NSIG


	)

63 
	#SA_RESTORER
 0x04000000

	)

65 
	#MINSIGSTKSZ
 2048

	)

66 
	#SIGSTKSZ
 8192

	)

68 
	~<asm-gíîic/sig«l-defs.h
>

70 #i‚de‡
__ASSEMBLY__


74 #ifde‡
__i386__


76 
	ssiga˘i⁄
 {

78 
__sigh™dÀr_t
 
	m_ß_h™dÀr
;

79 (*
	m_ß_siga˘i⁄
)(, 
	msigöfo
 *, *);

80 } 
	m_u
;

81 
sig£t_t
 
	mß_mask
;

82 
	mß_Êags
;

83 (*
	mß_ª°‹î
)();

86 
	#ß_h™dÀr
 
_u
.
_ß_h™dÀr


	)

87 
	#ß_siga˘i⁄
 
_u
.
_ß_siga˘i⁄


	)

91 
	ssiga˘i⁄
 {

92 
__sigh™dÀr_t
 
	mß_h™dÀr
;

93 
	mß_Êags
;

94 
__sigª°‹e_t
 
	mß_ª°‹î
;

95 
sig£t_t
 
	mß_mask
;

100 
	ssigÆt°ack
 {

101 *
	mss_•
;

102 
	mss_Êags
;

103 
size_t
 
	mss_size
;

104 } 
	t°ack_t
;

	@/usr/include/x86_64-linux-gnu/asm/socket.h

1 
	~<asm-gíîic/sockë.h
>

	@/usr/include/x86_64-linux-gnu/asm/sockios.h

1 
	~<asm-gíîic/sockios.h
>

	@/usr/include/x86_64-linux-gnu/asm/stat.h

2 #i‚de‡
_ASM_X86_STAT_H


3 
	#_ASM_X86_STAT_H


	)

5 
	~<asm/posix_ty≥s.h
>

7 
	#STAT_HAVE_NSEC
 1

	)

9 #ifde‡
__i386__


10 
	s°©
 {

11 
	m°_dev
;

12 
	m°_öo
;

13 
	m°_mode
;

14 
	m°_∆ök
;

15 
	m°_uid
;

16 
	m°_gid
;

17 
	m°_rdev
;

18 
	m°_size
;

19 
	m°_blksize
;

20 
	m°_blocks
;

21 
	m°_©ime
;

22 
	m°_©ime_n£c
;

23 
	m°_mtime
;

24 
	m°_mtime_n£c
;

25 
	m°_˘ime
;

26 
	m°_˘ime_n£c
;

27 
	m__unu£d4
;

28 
	m__unu£d5
;

32 
	#INIT_STRUCT_STAT_PADDING
(
°
) do { \

33 
°
.
__unu£d4
 = 0; \

34 
°
.
__unu£d5
 = 0; \

35 } 0)

	)

37 
	#STAT64_HAS_BROKEN_ST_INO
 1

	)

42 
	s°©64
 {

43 
	m°_dev
;

44 
	m__∑d0
[4];

46 
	m__°_öo
;

48 
	m°_mode
;

49 
	m°_∆ök
;

51 
	m°_uid
;

52 
	m°_gid
;

54 
	m°_rdev
;

55 
	m__∑d3
[4];

57 
	m°_size
;

58 
	m°_blksize
;

61 
	m°_blocks
;

63 
	m°_©ime
;

64 
	m°_©ime_n£c
;

66 
	m°_mtime
;

67 
	m°_mtime_n£c
;

69 
	m°_˘ime
;

70 
	m°_˘ime_n£c
;

72 
	m°_öo
;

76 
	#INIT_STRUCT_STAT64_PADDING
(
°
) do { \

77 
	`mem£t
(&
°
.
__∑d0
, 0, (st.__pad0)); \

78 
	`mem£t
(&
°
.
__∑d3
, 0, (st.__pad3)); \

79 } 0)

	)

83 
	s°©
 {

84 
__kî√l_ul⁄g_t
 
	m°_dev
;

85 
__kî√l_ul⁄g_t
 
	m°_öo
;

86 
__kî√l_ul⁄g_t
 
	m°_∆ök
;

88 
	m°_mode
;

89 
	m°_uid
;

90 
	m°_gid
;

91 
	m__∑d0
;

92 
__kî√l_ul⁄g_t
 
	m°_rdev
;

93 
__kî√l_l⁄g_t
 
	m°_size
;

94 
__kî√l_l⁄g_t
 
	m°_blksize
;

95 
__kî√l_l⁄g_t
 
	m°_blocks
;

97 
__kî√l_ul⁄g_t
 
	m°_©ime
;

98 
__kî√l_ul⁄g_t
 
	m°_©ime_n£c
;

99 
__kî√l_ul⁄g_t
 
	m°_mtime
;

100 
__kî√l_ul⁄g_t
 
	m°_mtime_n£c
;

101 
__kî√l_ul⁄g_t
 
	m°_˘ime
;

102 
__kî√l_ul⁄g_t
 
	m°_˘ime_n£c
;

103 
__kî√l_l⁄g_t
 
	m__unu£d
[3];

107 
	#INIT_STRUCT_STAT_PADDING
(
°
) do { \

108 
°
.
__∑d0
 = 0; \

109 
°
.
__unu£d
[0] = 0; \

110 
°
.
__unu£d
[1] = 0; \

111 
°
.
__unu£d
[2] = 0; \

112 } 0)

	)

117 
	s__ﬁd_kî√l_°©
 {

118 
	m°_dev
;

119 
	m°_öo
;

120 
	m°_mode
;

121 
	m°_∆ök
;

122 
	m°_uid
;

123 
	m°_gid
;

124 
	m°_rdev
;

125 #ifde‡
__i386__


126 
	m°_size
;

127 
	m°_©ime
;

128 
	m°_mtime
;

129 
	m°_˘ime
;

131 
	m°_size
;

132 
	m°_©ime
;

133 
	m°_mtime
;

134 
	m°_˘ime
;

	@/usr/include/x86_64-linux-gnu/asm/statfs.h

2 #i‚de‡
_ASM_X86_STATFS_H


3 
	#_ASM_X86_STATFS_H


	)

10 
	#ARCH_PACK_COMPAT_STATFS64
 
	`__©åibuã__
((
∑cked
,
	`Æig√d
(4)))

	)

12 
	~<asm-gíîic/°©fs.h
>

	@/usr/include/x86_64-linux-gnu/asm/svm.h

2 #i‚de‡
__SVM_H


3 
	#__SVM_H


	)

5 
	#SVM_EXIT_READ_CR0
 0x000

	)

6 
	#SVM_EXIT_READ_CR2
 0x002

	)

7 
	#SVM_EXIT_READ_CR3
 0x003

	)

8 
	#SVM_EXIT_READ_CR4
 0x004

	)

9 
	#SVM_EXIT_READ_CR8
 0x008

	)

10 
	#SVM_EXIT_WRITE_CR0
 0x010

	)

11 
	#SVM_EXIT_WRITE_CR2
 0x012

	)

12 
	#SVM_EXIT_WRITE_CR3
 0x013

	)

13 
	#SVM_EXIT_WRITE_CR4
 0x014

	)

14 
	#SVM_EXIT_WRITE_CR8
 0x018

	)

15 
	#SVM_EXIT_READ_DR0
 0x020

	)

16 
	#SVM_EXIT_READ_DR1
 0x021

	)

17 
	#SVM_EXIT_READ_DR2
 0x022

	)

18 
	#SVM_EXIT_READ_DR3
 0x023

	)

19 
	#SVM_EXIT_READ_DR4
 0x024

	)

20 
	#SVM_EXIT_READ_DR5
 0x025

	)

21 
	#SVM_EXIT_READ_DR6
 0x026

	)

22 
	#SVM_EXIT_READ_DR7
 0x027

	)

23 
	#SVM_EXIT_WRITE_DR0
 0x030

	)

24 
	#SVM_EXIT_WRITE_DR1
 0x031

	)

25 
	#SVM_EXIT_WRITE_DR2
 0x032

	)

26 
	#SVM_EXIT_WRITE_DR3
 0x033

	)

27 
	#SVM_EXIT_WRITE_DR4
 0x034

	)

28 
	#SVM_EXIT_WRITE_DR5
 0x035

	)

29 
	#SVM_EXIT_WRITE_DR6
 0x036

	)

30 
	#SVM_EXIT_WRITE_DR7
 0x037

	)

31 
	#SVM_EXIT_EXCP_BASE
 0x040

	)

32 
	#SVM_EXIT_LAST_EXCP
 0x05f

	)

33 
	#SVM_EXIT_INTR
 0x060

	)

34 
	#SVM_EXIT_NMI
 0x061

	)

35 
	#SVM_EXIT_SMI
 0x062

	)

36 
	#SVM_EXIT_INIT
 0x063

	)

37 
	#SVM_EXIT_VINTR
 0x064

	)

38 
	#SVM_EXIT_CR0_SEL_WRITE
 0x065

	)

39 
	#SVM_EXIT_IDTR_READ
 0x066

	)

40 
	#SVM_EXIT_GDTR_READ
 0x067

	)

41 
	#SVM_EXIT_LDTR_READ
 0x068

	)

42 
	#SVM_EXIT_TR_READ
 0x069

	)

43 
	#SVM_EXIT_IDTR_WRITE
 0x06a

	)

44 
	#SVM_EXIT_GDTR_WRITE
 0x06b

	)

45 
	#SVM_EXIT_LDTR_WRITE
 0x06c

	)

46 
	#SVM_EXIT_TR_WRITE
 0x06d

	)

47 
	#SVM_EXIT_RDTSC
 0x06e

	)

48 
	#SVM_EXIT_RDPMC
 0x06f

	)

49 
	#SVM_EXIT_PUSHF
 0x070

	)

50 
	#SVM_EXIT_POPF
 0x071

	)

51 
	#SVM_EXIT_CPUID
 0x072

	)

52 
	#SVM_EXIT_RSM
 0x073

	)

53 
	#SVM_EXIT_IRET
 0x074

	)

54 
	#SVM_EXIT_SWINT
 0x075

	)

55 
	#SVM_EXIT_INVD
 0x076

	)

56 
	#SVM_EXIT_PAUSE
 0x077

	)

57 
	#SVM_EXIT_HLT
 0x078

	)

58 
	#SVM_EXIT_INVLPG
 0x079

	)

59 
	#SVM_EXIT_INVLPGA
 0x07a

	)

60 
	#SVM_EXIT_IOIO
 0x07b

	)

61 
	#SVM_EXIT_MSR
 0x07c

	)

62 
	#SVM_EXIT_TASK_SWITCH
 0x07d

	)

63 
	#SVM_EXIT_FERR_FREEZE
 0x07e

	)

64 
	#SVM_EXIT_SHUTDOWN
 0x07f

	)

65 
	#SVM_EXIT_VMRUN
 0x080

	)

66 
	#SVM_EXIT_VMMCALL
 0x081

	)

67 
	#SVM_EXIT_VMLOAD
 0x082

	)

68 
	#SVM_EXIT_VMSAVE
 0x083

	)

69 
	#SVM_EXIT_STGI
 0x084

	)

70 
	#SVM_EXIT_CLGI
 0x085

	)

71 
	#SVM_EXIT_SKINIT
 0x086

	)

72 
	#SVM_EXIT_RDTSCP
 0x087

	)

73 
	#SVM_EXIT_ICEBP
 0x088

	)

74 
	#SVM_EXIT_WBINVD
 0x089

	)

75 
	#SVM_EXIT_MONITOR
 0x08a

	)

76 
	#SVM_EXIT_MWAIT
 0x08b

	)

77 
	#SVM_EXIT_MWAIT_COND
 0x08c

	)

78 
	#SVM_EXIT_XSETBV
 0x08d

	)

79 
	#SVM_EXIT_RDPRU
 0x08e

	)

80 
	#SVM_EXIT_EFER_WRITE_TRAP
 0x08f

	)

81 
	#SVM_EXIT_CR0_WRITE_TRAP
 0x090

	)

82 
	#SVM_EXIT_CR1_WRITE_TRAP
 0x091

	)

83 
	#SVM_EXIT_CR2_WRITE_TRAP
 0x092

	)

84 
	#SVM_EXIT_CR3_WRITE_TRAP
 0x093

	)

85 
	#SVM_EXIT_CR4_WRITE_TRAP
 0x094

	)

86 
	#SVM_EXIT_CR5_WRITE_TRAP
 0x095

	)

87 
	#SVM_EXIT_CR6_WRITE_TRAP
 0x096

	)

88 
	#SVM_EXIT_CR7_WRITE_TRAP
 0x097

	)

89 
	#SVM_EXIT_CR8_WRITE_TRAP
 0x098

	)

90 
	#SVM_EXIT_CR9_WRITE_TRAP
 0x099

	)

91 
	#SVM_EXIT_CR10_WRITE_TRAP
 0x09a

	)

92 
	#SVM_EXIT_CR11_WRITE_TRAP
 0x09b

	)

93 
	#SVM_EXIT_CR12_WRITE_TRAP
 0x09c

	)

94 
	#SVM_EXIT_CR13_WRITE_TRAP
 0x09d

	)

95 
	#SVM_EXIT_CR14_WRITE_TRAP
 0x09e

	)

96 
	#SVM_EXIT_CR15_WRITE_TRAP
 0x09f

	)

97 
	#SVM_EXIT_INVPCID
 0x0a2

	)

98 
	#SVM_EXIT_NPF
 0x400

	)

99 
	#SVM_EXIT_AVIC_INCOMPLETE_IPI
 0x401

	)

100 
	#SVM_EXIT_AVIC_UNACCELERATED_ACCESS
 0x402

	)

101 
	#SVM_EXIT_VMGEXIT
 0x403

	)

104 
	#SVM_VMGEXIT_MMIO_READ
 0x80000001

	)

105 
	#SVM_VMGEXIT_MMIO_WRITE
 0x80000002

	)

106 
	#SVM_VMGEXIT_NMI_COMPLETE
 0x80000003

	)

107 
	#SVM_VMGEXIT_AP_HLT_LOOP
 0x80000004

	)

108 
	#SVM_VMGEXIT_AP_JUMP_TABLE
 0x80000005

	)

109 
	#SVM_VMGEXIT_SET_AP_JUMP_TABLE
 0

	)

110 
	#SVM_VMGEXIT_GET_AP_JUMP_TABLE
 1

	)

111 
	#SVM_VMGEXIT_UNSUPPORTED_EVENT
 0x8000ffff

	)

114 
	#SVM_EXIT_SW
 0xf0000000

	)

116 
	#SVM_EXIT_ERR
 -1

	)

118 
	#SVM_EXIT_REASONS
 \

119 { 
SVM_EXIT_READ_CR0
, "read_cr0" }, \

120 { 
SVM_EXIT_READ_CR2
, "read_cr2" }, \

121 { 
SVM_EXIT_READ_CR3
, "read_cr3" }, \

122 { 
SVM_EXIT_READ_CR4
, "read_cr4" }, \

123 { 
SVM_EXIT_READ_CR8
, "read_cr8" }, \

124 { 
SVM_EXIT_WRITE_CR0
, "write_cr0" }, \

125 { 
SVM_EXIT_WRITE_CR2
, "write_cr2" }, \

126 { 
SVM_EXIT_WRITE_CR3
, "write_cr3" }, \

127 { 
SVM_EXIT_WRITE_CR4
, "write_cr4" }, \

128 { 
SVM_EXIT_WRITE_CR8
, "write_cr8" }, \

129 { 
SVM_EXIT_READ_DR0
, "read_dr0" }, \

130 { 
SVM_EXIT_READ_DR1
, "read_dr1" }, \

131 { 
SVM_EXIT_READ_DR2
, "read_dr2" }, \

132 { 
SVM_EXIT_READ_DR3
, "read_dr3" }, \

133 { 
SVM_EXIT_READ_DR4
, "read_dr4" }, \

134 { 
SVM_EXIT_READ_DR5
, "read_dr5" }, \

135 { 
SVM_EXIT_READ_DR6
, "read_dr6" }, \

136 { 
SVM_EXIT_READ_DR7
, "read_dr7" }, \

137 { 
SVM_EXIT_WRITE_DR0
, "write_dr0" }, \

138 { 
SVM_EXIT_WRITE_DR1
, "write_dr1" }, \

139 { 
SVM_EXIT_WRITE_DR2
, "write_dr2" }, \

140 { 
SVM_EXIT_WRITE_DR3
, "write_dr3" }, \

141 { 
SVM_EXIT_WRITE_DR4
, "write_dr4" }, \

142 { 
SVM_EXIT_WRITE_DR5
, "write_dr5" }, \

143 { 
SVM_EXIT_WRITE_DR6
, "write_dr6" }, \

144 { 
SVM_EXIT_WRITE_DR7
, "write_dr7" }, \

145 { 
SVM_EXIT_EXCP_BASE
 + 
DE_VECTOR
, "DEÉxcp" }, \

146 { 
SVM_EXIT_EXCP_BASE
 + 
DB_VECTOR
, "DBÉxcp" }, \

147 { 
SVM_EXIT_EXCP_BASE
 + 
BP_VECTOR
, "BPÉxcp" }, \

148 { 
SVM_EXIT_EXCP_BASE
 + 
OF_VECTOR
, "OFÉxcp" }, \

149 { 
SVM_EXIT_EXCP_BASE
 + 
BR_VECTOR
, "BRÉxcp" }, \

150 { 
SVM_EXIT_EXCP_BASE
 + 
UD_VECTOR
, "UDÉxcp" }, \

151 { 
SVM_EXIT_EXCP_BASE
 + 
NM_VECTOR
, "NMÉxcp" }, \

152 { 
SVM_EXIT_EXCP_BASE
 + 
DF_VECTOR
, "DFÉxcp" }, \

153 { 
SVM_EXIT_EXCP_BASE
 + 
TS_VECTOR
, "TSÉxcp" }, \

154 { 
SVM_EXIT_EXCP_BASE
 + 
NP_VECTOR
, "NPÉxcp" }, \

155 { 
SVM_EXIT_EXCP_BASE
 + 
SS_VECTOR
, "SSÉxcp" }, \

156 { 
SVM_EXIT_EXCP_BASE
 + 
GP_VECTOR
, "GPÉxcp" }, \

157 { 
SVM_EXIT_EXCP_BASE
 + 
PF_VECTOR
, "PFÉxcp" }, \

158 { 
SVM_EXIT_EXCP_BASE
 + 
MF_VECTOR
, "MFÉxcp" }, \

159 { 
SVM_EXIT_EXCP_BASE
 + 
AC_VECTOR
, "ACÉxcp" }, \

160 { 
SVM_EXIT_EXCP_BASE
 + 
MC_VECTOR
, "MCÉxcp" }, \

161 { 
SVM_EXIT_EXCP_BASE
 + 
XM_VECTOR
, "XFÉxcp" }, \

162 { 
SVM_EXIT_INTR
, "interrupt" }, \

163 { 
SVM_EXIT_NMI
, "nmi" }, \

164 { 
SVM_EXIT_SMI
, "smi" }, \

165 { 
SVM_EXIT_INIT
, "init" }, \

166 { 
SVM_EXIT_VINTR
, "vintr" }, \

167 { 
SVM_EXIT_CR0_SEL_WRITE
, "cr0_sel_write" }, \

168 { 
SVM_EXIT_IDTR_READ
, "read_idtr" }, \

169 { 
SVM_EXIT_GDTR_READ
, "read_gdtr" }, \

170 { 
SVM_EXIT_LDTR_READ
, "read_ldtr" }, \

171 { 
SVM_EXIT_TR_READ
, "read_rt" }, \

172 { 
SVM_EXIT_IDTR_WRITE
, "write_idtr" }, \

173 { 
SVM_EXIT_GDTR_WRITE
, "write_gdtr" }, \

174 { 
SVM_EXIT_LDTR_WRITE
, "write_ldtr" }, \

175 { 
SVM_EXIT_TR_WRITE
, "write_rt" }, \

176 { 
SVM_EXIT_RDTSC
, "rdtsc" }, \

177 { 
SVM_EXIT_RDPMC
, "rdpmc" }, \

178 { 
SVM_EXIT_PUSHF
, "pushf" }, \

179 { 
SVM_EXIT_POPF
, "popf" }, \

180 { 
SVM_EXIT_CPUID
, "cpuid" }, \

181 { 
SVM_EXIT_RSM
, "rsm" }, \

182 { 
SVM_EXIT_IRET
, "iret" }, \

183 { 
SVM_EXIT_SWINT
, "swint" }, \

184 { 
SVM_EXIT_INVD
, "invd" }, \

185 { 
SVM_EXIT_PAUSE
, "pause" }, \

186 { 
SVM_EXIT_HLT
, "hlt" }, \

187 { 
SVM_EXIT_INVLPG
, "invlpg" }, \

188 { 
SVM_EXIT_INVLPGA
, "invlpga" }, \

189 { 
SVM_EXIT_IOIO
, "io" }, \

190 { 
SVM_EXIT_MSR
, "msr" }, \

191 { 
SVM_EXIT_TASK_SWITCH
, "task_switch" }, \

192 { 
SVM_EXIT_FERR_FREEZE
, "ferr_freeze" }, \

193 { 
SVM_EXIT_SHUTDOWN
, "shutdown" }, \

194 { 
SVM_EXIT_VMRUN
, "vmrun" }, \

195 { 
SVM_EXIT_VMMCALL
, "hypercall" }, \

196 { 
SVM_EXIT_VMLOAD
, "vmload" }, \

197 { 
SVM_EXIT_VMSAVE
, "vmsave" }, \

198 { 
SVM_EXIT_STGI
, "stgi" }, \

199 { 
SVM_EXIT_CLGI
, "clgi" }, \

200 { 
SVM_EXIT_SKINIT
, "skinit" }, \

201 { 
SVM_EXIT_RDTSCP
, "rdtscp" }, \

202 { 
SVM_EXIT_ICEBP
, "icebp" }, \

203 { 
SVM_EXIT_WBINVD
, "wbinvd" }, \

204 { 
SVM_EXIT_MONITOR
, "monitor" }, \

205 { 
SVM_EXIT_MWAIT
, "mwait" }, \

206 { 
SVM_EXIT_XSETBV
, "xsetbv" }, \

207 { 
SVM_EXIT_EFER_WRITE_TRAP
, "write_efer_trap" }, \

208 { 
SVM_EXIT_CR0_WRITE_TRAP
, "write_cr0_trap" }, \

209 { 
SVM_EXIT_CR4_WRITE_TRAP
, "write_cr4_trap" }, \

210 { 
SVM_EXIT_CR8_WRITE_TRAP
, "write_cr8_trap" }, \

211 { 
SVM_EXIT_INVPCID
, "invpcid" }, \

212 { 
SVM_EXIT_NPF
, "npf" }, \

213 { 
SVM_EXIT_AVIC_INCOMPLETE_IPI
, "avic_incomplete_ipi" }, \

214 { 
SVM_EXIT_AVIC_UNACCELERATED_ACCESS
, "avic_unaccelerated_access" }, \

215 { 
SVM_EXIT_VMGEXIT
, "vmgexit" }, \

216 { 
SVM_VMGEXIT_MMIO_READ
, "vmgexit_mmio_read" }, \

217 { 
SVM_VMGEXIT_MMIO_WRITE
, "vmgexit_mmio_write" }, \

218 { 
SVM_VMGEXIT_NMI_COMPLETE
, "vmgexit_nmi_complete" }, \

219 { 
SVM_VMGEXIT_AP_HLT_LOOP
, "vmgexit_ap_hlt_loop" }, \

220 { 
SVM_VMGEXIT_AP_JUMP_TABLE
, "vmgexit_ap_jump_table" }, \

221 { 
SVM_EXIT_ERR
, "övÆid_gue°_°©e" }

	)

	@/usr/include/x86_64-linux-gnu/asm/swab.h

2 #i‚de‡
_ASM_X86_SWAB_H


3 
	#_ASM_X86_SWAB_H


	)

5 
	~<löux/ty≥s.h
>

8 
__ölöe__
 
__u32
 
	$__¨ch_swab32
(
__u32
 
vÆ
)

10 
	`__asm__
("bsw≠»%0" : "Ù" (
vÆ
) : "0" (val));

11  
vÆ
;

12 
	}
}

13 
	#__¨ch_swab32
 
__¨ch_swab32


	)

15 
__ölöe__
 
__u64
 
	$__¨ch_swab64
(
__u64
 
vÆ
)

17 #ifde‡
__i386__


20 
__u32
 
a
;

21 
__u32
 
b
;

22 } 
s
;

23 
__u64
 
u
;

24 } 
v
;

25 
v
.
u
 = 
vÆ
;

26 
	`__asm__
("bswapl %0 ; bswapl %1 ; xchgl %0,%1"

27 : "Ù" (
v
.
s
.
a
), "Ù" (v.s.
b
)

28 : "0" (
v
.
s
.
a
), "1" (v.s.
b
));

29  
v
.
u
;

31 
	`__asm__
("bsw≠q %0" : "Ù" (
vÆ
) : "0" (val));

32  
vÆ
;

34 
	}
}

35 
	#__¨ch_swab64
 
__¨ch_swab64


	)

	@/usr/include/x86_64-linux-gnu/asm/termbits.h

1 
	~<asm-gíîic/ãrmbôs.h
>

	@/usr/include/x86_64-linux-gnu/asm/termios.h

1 
	~<asm-gíîic/ãrmios.h
>

	@/usr/include/x86_64-linux-gnu/asm/types.h

1 
	~<asm-gíîic/ty≥s.h
>

	@/usr/include/x86_64-linux-gnu/asm/ucontext.h

2 #i‚de‡
_ASM_X86_UCONTEXT_H


3 
	#_ASM_X86_UCONTEXT_H


	)

10 
	#UC_FP_XSTATE
 0x1

	)

12 #ifde‡
__x86_64__


50 
	#UC_SIGCONTEXT_SS
 0x2

	)

51 
	#UC_STRICT_RESTORE_SS
 0x4

	)

54 
	~<asm-gíîic/uc⁄ãxt.h
>

	@/usr/include/x86_64-linux-gnu/asm/unistd.h

2 #i‚de‡
_ASM_X86_UNISTD_H


3 
	#_ASM_X86_UNISTD_H


	)

13 
	#__X32_SYSCALL_BIT
 0x40000000

	)

15 #ifde‡
__i386__


16 
	~<asm/uni°d_32.h
>

17 #ñi‡
deföed
(
__ILP32__
)

18 
	~<asm/uni°d_x32.h
>

20 
	~<asm/uni°d_64.h
>

	@/usr/include/x86_64-linux-gnu/asm/unistd_32.h

1 #i‚de‡
_ASM_UNISTD_32_H


2 
	#_ASM_UNISTD_32_H


	)

4 
	#__NR_ª°¨t_sysˇŒ
 0

	)

5 
	#__NR_exô
 1

	)

6 
	#__NR_f‹k
 2

	)

7 
	#__NR_ªad
 3

	)

8 
	#__NR_wrôe
 4

	)

9 
	#__NR_›í
 5

	)

10 
	#__NR_˛o£
 6

	)

11 
	#__NR_waôpid
 7

	)

12 
	#__NR_¸ót
 8

	)

13 
	#__NR_lök
 9

	)

14 
	#__NR_u∆ök
 10

	)

15 
	#__NR_execve
 11

	)

16 
	#__NR_chdú
 12

	)

17 
	#__NR_time
 13

	)

18 
	#__NR_mknod
 14

	)

19 
	#__NR_chmod
 15

	)

20 
	#__NR_lchown
 16

	)

21 
	#__NR_bªak
 17

	)

22 
	#__NR_ﬁd°©
 18

	)

23 
	#__NR_l£ek
 19

	)

24 
	#__NR_gëpid
 20

	)

25 
	#__NR_mou¡
 21

	)

26 
	#__NR_umou¡
 22

	)

27 
	#__NR_£tuid
 23

	)

28 
	#__NR_gëuid
 24

	)

29 
	#__NR_°ime
 25

	)

30 
	#__NR_±ø˚
 26

	)

31 
	#__NR_Æ¨m
 27

	)

32 
	#__NR_ﬁdf°©
 28

	)

33 
	#__NR_∑u£
 29

	)

34 
	#__NR_utime
 30

	)

35 
	#__NR_°ty
 31

	)

36 
	#__NR_gây
 32

	)

37 
	#__NR_ac˚ss
 33

	)

38 
	#__NR_ni˚
 34

	)

39 
	#__NR_·ime
 35

	)

40 
	#__NR_sync
 36

	)

41 
	#__NR_kûl
 37

	)

42 
	#__NR_ª«me
 38

	)

43 
	#__NR_mkdú
 39

	)

44 
	#__NR_rmdú
 40

	)

45 
	#__NR_dup
 41

	)

46 
	#__NR_pùe
 42

	)

47 
	#__NR_times
 43

	)

48 
	#__NR_¥of
 44

	)

49 
	#__NR_brk
 45

	)

50 
	#__NR_£tgid
 46

	)

51 
	#__NR_gëgid
 47

	)

52 
	#__NR_sig«l
 48

	)

53 
	#__NR_gëeuid
 49

	)

54 
	#__NR_gëegid
 50

	)

55 
	#__NR_ac˘
 51

	)

56 
	#__NR_umou¡2
 52

	)

57 
	#__NR_lock
 53

	)

58 
	#__NR_io˘l
 54

	)

59 
	#__NR_f˙é
 55

	)

60 
	#__NR_mpx
 56

	)

61 
	#__NR_£çgid
 57

	)

62 
	#__NR_ulimô
 58

	)

63 
	#__NR_ﬁdﬁdu«me
 59

	)

64 
	#__NR_umask
 60

	)

65 
	#__NR_chroŸ
 61

	)

66 
	#__NR_u°©
 62

	)

67 
	#__NR_dup2
 63

	)

68 
	#__NR_gëµid
 64

	)

69 
	#__NR_gëpgΩ
 65

	)

70 
	#__NR_£tsid
 66

	)

71 
	#__NR_siga˘i⁄
 67

	)

72 
	#__NR_sgëmask
 68

	)

73 
	#__NR_s£tmask
 69

	)

74 
	#__NR_£åeuid
 70

	)

75 
	#__NR_£åegid
 71

	)

76 
	#__NR_sigsu•íd
 72

	)

77 
	#__NR_sig≥ndög
 73

	)

78 
	#__NR_£tho°«me
 74

	)

79 
	#__NR_£ålimô
 75

	)

80 
	#__NR_gëæimô
 76

	)

81 
	#__NR_gërußge
 77

	)

82 
	#__NR_gëtimeofday
 78

	)

83 
	#__NR_£âimeofday
 79

	)

84 
	#__NR_gëgroups
 80

	)

85 
	#__NR_£tgroups
 81

	)

86 
	#__NR_£À˘
 82

	)

87 
	#__NR_symlök
 83

	)

88 
	#__NR_ﬁdl°©
 84

	)

89 
	#__NR_ªadlök
 85

	)

90 
	#__NR_u£lib
 86

	)

91 
	#__NR_sw≠⁄
 87

	)

92 
	#__NR_ªboŸ
 88

	)

93 
	#__NR_ªaddú
 89

	)

94 
	#__NR_mm≠
 90

	)

95 
	#__NR_munm≠
 91

	)

96 
	#__NR_åunˇã
 92

	)

97 
	#__NR_·runˇã
 93

	)

98 
	#__NR_fchmod
 94

	)

99 
	#__NR_fchown
 95

	)

100 
	#__NR_gë¥i‹ôy
 96

	)

101 
	#__NR_£çri‹ôy
 97

	)

102 
	#__NR_¥ofû
 98

	)

103 
	#__NR_°©fs
 99

	)

104 
	#__NR_f°©fs
 100

	)

105 
	#__NR_i›îm
 101

	)

106 
	#__NR_sockëˇŒ
 102

	)

107 
	#__NR_sy¶og
 103

	)

108 
	#__NR_£tôimî
 104

	)

109 
	#__NR_gëôimî
 105

	)

110 
	#__NR_°©
 106

	)

111 
	#__NR_l°©
 107

	)

112 
	#__NR_f°©
 108

	)

113 
	#__NR_ﬁdu«me
 109

	)

114 
	#__NR_i›l
 110

	)

115 
	#__NR_vh™gup
 111

	)

116 
	#__NR_idÀ
 112

	)

117 
	#__NR_vm86ﬁd
 113

	)

118 
	#__NR_waô4
 114

	)

119 
	#__NR_sw≠off
 115

	)

120 
	#__NR_sysöfo
 116

	)

121 
	#__NR_ùc
 117

	)

122 
	#__NR_fsync
 118

	)

123 
	#__NR_sigªtu∫
 119

	)

124 
	#__NR_˛⁄e
 120

	)

125 
	#__NR_£tdomaö«me
 121

	)

126 
	#__NR_u«me
 122

	)

127 
	#__NR_modify_ldt
 123

	)

128 
	#__NR_adjtimex
 124

	)

129 
	#__NR_m¥Ÿe˘
 125

	)

130 
	#__NR_sig¥ocmask
 126

	)

131 
	#__NR_¸óã_moduÀ
 127

	)

132 
	#__NR_öô_moduÀ
 128

	)

133 
	#__NR_dñëe_moduÀ
 129

	)

134 
	#__NR_gë_kî√l_syms
 130

	)

135 
	#__NR_quŸa˘l
 131

	)

136 
	#__NR_gëpgid
 132

	)

137 
	#__NR_fchdú
 133

	)

138 
	#__NR_bdÊush
 134

	)

139 
	#__NR_sysfs
 135

	)

140 
	#__NR_≥rs⁄Æôy
 136

	)

141 
	#__NR_afs_sysˇŒ
 137

	)

142 
	#__NR_£tfsuid
 138

	)

143 
	#__NR_£tfsgid
 139

	)

144 
	#__NR__Œ£ek
 140

	)

145 
	#__NR_gëdíts
 141

	)

146 
	#__NR__√w£À˘
 142

	)

147 
	#__NR_Êock
 143

	)

148 
	#__NR_msync
 144

	)

149 
	#__NR_ªadv
 145

	)

150 
	#__NR_wrôev
 146

	)

151 
	#__NR_gësid
 147

	)

152 
	#__NR_fd©async
 148

	)

153 
	#__NR__sys˘l
 149

	)

154 
	#__NR_mlock
 150

	)

155 
	#__NR_mu∆ock
 151

	)

156 
	#__NR_mlockÆl
 152

	)

157 
	#__NR_mu∆ockÆl
 153

	)

158 
	#__NR_sched_£ç¨am
 154

	)

159 
	#__NR_sched_gë∑øm
 155

	)

160 
	#__NR_sched_£tscheduÀr
 156

	)

161 
	#__NR_sched_gëscheduÀr
 157

	)

162 
	#__NR_sched_yõld
 158

	)

163 
	#__NR_sched_gë_¥i‹ôy_max
 159

	)

164 
	#__NR_sched_gë_¥i‹ôy_mö
 160

	)

165 
	#__NR_sched_º_gë_öãrvÆ
 161

	)

166 
	#__NR_«no¶ìp
 162

	)

167 
	#__NR_mªm≠
 163

	)

168 
	#__NR_£åesuid
 164

	)

169 
	#__NR_gëªsuid
 165

	)

170 
	#__NR_vm86
 166

	)

171 
	#__NR_quîy_moduÀ
 167

	)

172 
	#__NR_pﬁl
 168

	)

173 
	#__NR_nfs£rv˘l
 169

	)

174 
	#__NR_£åesgid
 170

	)

175 
	#__NR_gëªsgid
 171

	)

176 
	#__NR_¥˘l
 172

	)

177 
	#__NR_π_sigªtu∫
 173

	)

178 
	#__NR_π_siga˘i⁄
 174

	)

179 
	#__NR_π_sig¥ocmask
 175

	)

180 
	#__NR_π_sig≥ndög
 176

	)

181 
	#__NR_π_sigtimedwaô
 177

	)

182 
	#__NR_π_sigqueueöfo
 178

	)

183 
	#__NR_π_sigsu•íd
 179

	)

184 
	#__NR_¥ód64
 180

	)

185 
	#__NR_pwrôe64
 181

	)

186 
	#__NR_chown
 182

	)

187 
	#__NR_gëcwd
 183

	)

188 
	#__NR_ˇpgë
 184

	)

189 
	#__NR_ˇp£t
 185

	)

190 
	#__NR_sigÆt°ack
 186

	)

191 
	#__NR_£ndfûe
 187

	)

192 
	#__NR_gëpmsg
 188

	)

193 
	#__NR_puçmsg
 189

	)

194 
	#__NR_vf‹k
 190

	)

195 
	#__NR_ugëæimô
 191

	)

196 
	#__NR_mm≠2
 192

	)

197 
	#__NR_åunˇã64
 193

	)

198 
	#__NR_·runˇã64
 194

	)

199 
	#__NR_°©64
 195

	)

200 
	#__NR_l°©64
 196

	)

201 
	#__NR_f°©64
 197

	)

202 
	#__NR_lchown32
 198

	)

203 
	#__NR_gëuid32
 199

	)

204 
	#__NR_gëgid32
 200

	)

205 
	#__NR_gëeuid32
 201

	)

206 
	#__NR_gëegid32
 202

	)

207 
	#__NR_£åeuid32
 203

	)

208 
	#__NR_£åegid32
 204

	)

209 
	#__NR_gëgroups32
 205

	)

210 
	#__NR_£tgroups32
 206

	)

211 
	#__NR_fchown32
 207

	)

212 
	#__NR_£åesuid32
 208

	)

213 
	#__NR_gëªsuid32
 209

	)

214 
	#__NR_£åesgid32
 210

	)

215 
	#__NR_gëªsgid32
 211

	)

216 
	#__NR_chown32
 212

	)

217 
	#__NR_£tuid32
 213

	)

218 
	#__NR_£tgid32
 214

	)

219 
	#__NR_£tfsuid32
 215

	)

220 
	#__NR_£tfsgid32
 216

	)

221 
	#__NR_pivŸ_roŸ
 217

	)

222 
	#__NR_möc‹e
 218

	)

223 
	#__NR_madvi£
 219

	)

224 
	#__NR_gëdíts64
 220

	)

225 
	#__NR_f˙é64
 221

	)

226 
	#__NR_gëtid
 224

	)

227 
	#__NR_ªadahód
 225

	)

228 
	#__NR_£tx©å
 226

	)

229 
	#__NR_l£tx©å
 227

	)

230 
	#__NR_f£tx©å
 228

	)

231 
	#__NR_gëx©å
 229

	)

232 
	#__NR_lgëx©å
 230

	)

233 
	#__NR_fgëx©å
 231

	)

234 
	#__NR_li°x©å
 232

	)

235 
	#__NR_Œi°x©å
 233

	)

236 
	#__NR_Êi°x©å
 234

	)

237 
	#__NR_ªmovex©å
 235

	)

238 
	#__NR_Ãemovex©å
 236

	)

239 
	#__NR_‰emovex©å
 237

	)

240 
	#__NR_tkûl
 238

	)

241 
	#__NR_£ndfûe64
 239

	)

242 
	#__NR_fuãx
 240

	)

243 
	#__NR_sched_£èfföôy
 241

	)

244 
	#__NR_sched_gëafföôy
 242

	)

245 
	#__NR_£t_thªad_¨ó
 243

	)

246 
	#__NR_gë_thªad_¨ó
 244

	)

247 
	#__NR_io_£tup
 245

	)

248 
	#__NR_io_de°roy
 246

	)

249 
	#__NR_io_gëevíts
 247

	)

250 
	#__NR_io_submô
 248

	)

251 
	#__NR_io_ˇn˚l
 249

	)

252 
	#__NR_Ádvi£64
 250

	)

253 
	#__NR_exô_group
 252

	)

254 
	#__NR_lookup_dcookõ
 253

	)

255 
	#__NR_ïﬁl_¸óã
 254

	)

256 
	#__NR_ïﬁl_˘l
 255

	)

257 
	#__NR_ïﬁl_waô
 256

	)

258 
	#__NR_ªm≠_fûe_∑ges
 257

	)

259 
	#__NR_£t_tid_addªss
 258

	)

260 
	#__NR_timî_¸óã
 259

	)

261 
	#__NR_timî_£âime
 260

	)

262 
	#__NR_timî_gëtime
 261

	)

263 
	#__NR_timî_gëovîrun
 262

	)

264 
	#__NR_timî_dñëe
 263

	)

265 
	#__NR_˛ock_£âime
 264

	)

266 
	#__NR_˛ock_gëtime
 265

	)

267 
	#__NR_˛ock_gëªs
 266

	)

268 
	#__NR_˛ock_«no¶ìp
 267

	)

269 
	#__NR_°©fs64
 268

	)

270 
	#__NR_f°©fs64
 269

	)

271 
	#__NR_tgkûl
 270

	)

272 
	#__NR_utimes
 271

	)

273 
	#__NR_Ádvi£64_64
 272

	)

274 
	#__NR_v£rvî
 273

	)

275 
	#__NR_mböd
 274

	)

276 
	#__NR_gë_mempﬁicy
 275

	)

277 
	#__NR_£t_mempﬁicy
 276

	)

278 
	#__NR_mq_›í
 277

	)

279 
	#__NR_mq_u∆ök
 278

	)

280 
	#__NR_mq_timed£nd
 279

	)

281 
	#__NR_mq_timedª˚ive
 280

	)

282 
	#__NR_mq_nŸify
 281

	)

283 
	#__NR_mq_gë£èâr
 282

	)

284 
	#__NR_kexec_lﬂd
 283

	)

285 
	#__NR_waôid
 284

	)

286 
	#__NR_add_key
 286

	)

287 
	#__NR_ªque°_key
 287

	)

288 
	#__NR_key˘l
 288

	)

289 
	#__NR_i›rio_£t
 289

	)

290 
	#__NR_i›rio_gë
 290

	)

291 
	#__NR_öŸify_öô
 291

	)

292 
	#__NR_öŸify_add_w©ch
 292

	)

293 
	#__NR_öŸify_rm_w©ch
 293

	)

294 
	#__NR_migøã_∑ges
 294

	)

295 
	#__NR_›í©
 295

	)

296 
	#__NR_mkdú©
 296

	)

297 
	#__NR_mknod©
 297

	)

298 
	#__NR_fchow«t
 298

	)

299 
	#__NR_futimeßt
 299

	)

300 
	#__NR_f°©©64
 300

	)

301 
	#__NR_u∆ök©
 301

	)

302 
	#__NR_ª«mót
 302

	)

303 
	#__NR_lök©
 303

	)

304 
	#__NR_symlök©
 304

	)

305 
	#__NR_ªadlök©
 305

	)

306 
	#__NR_fchmod©
 306

	)

307 
	#__NR_Ác˚sßt
 307

	)

308 
	#__NR_p£À˘6
 308

	)

309 
	#__NR_µﬁl
 309

	)

310 
	#__NR_unsh¨e
 310

	)

311 
	#__NR_£t_robu°_li°
 311

	)

312 
	#__NR_gë_robu°_li°
 312

	)

313 
	#__NR_•li˚
 313

	)

314 
	#__NR_sync_fûe_ønge
 314

	)

315 
	#__NR_ãe
 315

	)

316 
	#__NR_vm•li˚
 316

	)

317 
	#__NR_move_∑ges
 317

	)

318 
	#__NR_gë˝u
 318

	)

319 
	#__NR_ïﬁl_pwaô
 319

	)

320 
	#__NR_utimíßt
 320

	)

321 
	#__NR_sig«lfd
 321

	)

322 
	#__NR_timîfd_¸óã
 322

	)

323 
	#__NR_evítfd
 323

	)

324 
	#__NR_ÁŒoˇã
 324

	)

325 
	#__NR_timîfd_£âime
 325

	)

326 
	#__NR_timîfd_gëtime
 326

	)

327 
	#__NR_sig«lfd4
 327

	)

328 
	#__NR_evítfd2
 328

	)

329 
	#__NR_ïﬁl_¸óã1
 329

	)

330 
	#__NR_dup3
 330

	)

331 
	#__NR_pùe2
 331

	)

332 
	#__NR_öŸify_öô1
 332

	)

333 
	#__NR_¥ódv
 333

	)

334 
	#__NR_pwrôev
 334

	)

335 
	#__NR_π_tgsigqueueöfo
 335

	)

336 
	#__NR_≥rf_evít_›í
 336

	)

337 
	#__NR_ªcvmmsg
 337

	)

338 
	#__NR_ÁnŸify_öô
 338

	)

339 
	#__NR_ÁnŸify_m¨k
 339

	)

340 
	#__NR_¥limô64
 340

	)

341 
	#__NR_«me_to_h™dÀ_©
 341

	)

342 
	#__NR_›í_by_h™dÀ_©
 342

	)

343 
	#__NR_˛ock_adjtime
 343

	)

344 
	#__NR_syncfs
 344

	)

345 
	#__NR_£ndmmsg
 345

	)

346 
	#__NR_£äs
 346

	)

347 
	#__NR_¥o˚ss_vm_ªadv
 347

	)

348 
	#__NR_¥o˚ss_vm_wrôev
 348

	)

349 
	#__NR_kcmp
 349

	)

350 
	#__NR_föô_moduÀ
 350

	)

351 
	#__NR_sched_£èâr
 351

	)

352 
	#__NR_sched_gë©å
 352

	)

353 
	#__NR_ª«mót2
 353

	)

354 
	#__NR_£ccomp
 354

	)

355 
	#__NR_gëøndom
 355

	)

356 
	#__NR_memfd_¸óã
 356

	)

357 
	#__NR_bpf
 357

	)

358 
	#__NR_execvót
 358

	)

359 
	#__NR_sockë
 359

	)

360 
	#__NR_sockë∑ú
 360

	)

361 
	#__NR_böd
 361

	)

362 
	#__NR_c⁄√˘
 362

	)

363 
	#__NR_li°í
 363

	)

364 
	#__NR_ac˚±4
 364

	)

365 
	#__NR_gësock›t
 365

	)

366 
	#__NR_£tsock›t
 366

	)

367 
	#__NR_gësock«me
 367

	)

368 
	#__NR_gë≥î«me
 368

	)

369 
	#__NR_£ndto
 369

	)

370 
	#__NR_£ndmsg
 370

	)

371 
	#__NR_ªcv‰om
 371

	)

372 
	#__NR_ªcvmsg
 372

	)

373 
	#__NR_shutdown
 373

	)

374 
	#__NR_u£rÁu…fd
 374

	)

375 
	#__NR_memb¨rõr
 375

	)

376 
	#__NR_mlock2
 376

	)

377 
	#__NR_c›y_fûe_ønge
 377

	)

378 
	#__NR_¥ódv2
 378

	)

379 
	#__NR_pwrôev2
 379

	)

380 
	#__NR_pkey_m¥Ÿe˘
 380

	)

381 
	#__NR_pkey_Æloc
 381

	)

382 
	#__NR_pkey_‰ì
 382

	)

383 
	#__NR_°©x
 383

	)

384 
	#__NR_¨ch_¥˘l
 384

	)

385 
	#__NR_io_pgëevíts
 385

	)

386 
	#__NR_r£q
 386

	)

387 
	#__NR_£mgë
 393

	)

388 
	#__NR_£m˘l
 394

	)

389 
	#__NR_shmgë
 395

	)

390 
	#__NR_shm˘l
 396

	)

391 
	#__NR_shm©
 397

	)

392 
	#__NR_shmdt
 398

	)

393 
	#__NR_msggë
 399

	)

394 
	#__NR_msg¢d
 400

	)

395 
	#__NR_msgrcv
 401

	)

396 
	#__NR_msg˘l
 402

	)

397 
	#__NR_˛ock_gëtime64
 403

	)

398 
	#__NR_˛ock_£âime64
 404

	)

399 
	#__NR_˛ock_adjtime64
 405

	)

400 
	#__NR_˛ock_gëªs_time64
 406

	)

401 
	#__NR_˛ock_«no¶ìp_time64
 407

	)

402 
	#__NR_timî_gëtime64
 408

	)

403 
	#__NR_timî_£âime64
 409

	)

404 
	#__NR_timîfd_gëtime64
 410

	)

405 
	#__NR_timîfd_£âime64
 411

	)

406 
	#__NR_utimíßt_time64
 412

	)

407 
	#__NR_p£À˘6_time64
 413

	)

408 
	#__NR_µﬁl_time64
 414

	)

409 
	#__NR_io_pgëevíts_time64
 416

	)

410 
	#__NR_ªcvmmsg_time64
 417

	)

411 
	#__NR_mq_timed£nd_time64
 418

	)

412 
	#__NR_mq_timedª˚ive_time64
 419

	)

413 
	#__NR_£mtimed›_time64
 420

	)

414 
	#__NR_π_sigtimedwaô_time64
 421

	)

415 
	#__NR_fuãx_time64
 422

	)

416 
	#__NR_sched_º_gë_öãrvÆ_time64
 423

	)

417 
	#__NR_pidfd_£nd_sig«l
 424

	)

418 
	#__NR_io_urög_£tup
 425

	)

419 
	#__NR_io_urög_íãr
 426

	)

420 
	#__NR_io_urög_ªgi°î
 427

	)

421 
	#__NR_›í_åì
 428

	)

422 
	#__NR_move_mou¡
 429

	)

423 
	#__NR_fs›í
 430

	)

424 
	#__NR_fsc⁄fig
 431

	)

425 
	#__NR_fsmou¡
 432

	)

426 
	#__NR_f•ick
 433

	)

427 
	#__NR_pidfd_›í
 434

	)

428 
	#__NR_˛⁄e3
 435

	)

429 
	#__NR_˛o£_ønge
 436

	)

430 
	#__NR_›í©2
 437

	)

431 
	#__NR_pidfd_gëfd
 438

	)

432 
	#__NR_Ác˚sßt2
 439

	)

433 
	#__NR_¥o˚ss_madvi£
 440

	)

434 
	#__NR_ïﬁl_pwaô2
 441

	)

435 
	#__NR_mou¡_£èâr
 442

	)

436 
	#__NR_quŸa˘l_fd
 443

	)

437 
	#__NR_œndlock_¸óã_ruÀ£t
 444

	)

438 
	#__NR_œndlock_add_ruÀ
 445

	)

439 
	#__NR_œndlock_ª°ri˘_£lf
 446

	)

440 
	#__NR_memfd_£¸ë
 447

	)

441 
	#__NR_¥o˚ss_mªÀa£
 448

	)

	@/usr/include/x86_64-linux-gnu/asm/unistd_64.h

1 #i‚de‡
_ASM_UNISTD_64_H


2 
	#_ASM_UNISTD_64_H


	)

4 
	#__NR_ªad
 0

	)

5 
	#__NR_wrôe
 1

	)

6 
	#__NR_›í
 2

	)

7 
	#__NR_˛o£
 3

	)

8 
	#__NR_°©
 4

	)

9 
	#__NR_f°©
 5

	)

10 
	#__NR_l°©
 6

	)

11 
	#__NR_pﬁl
 7

	)

12 
	#__NR_l£ek
 8

	)

13 
	#__NR_mm≠
 9

	)

14 
	#__NR_m¥Ÿe˘
 10

	)

15 
	#__NR_munm≠
 11

	)

16 
	#__NR_brk
 12

	)

17 
	#__NR_π_siga˘i⁄
 13

	)

18 
	#__NR_π_sig¥ocmask
 14

	)

19 
	#__NR_π_sigªtu∫
 15

	)

20 
	#__NR_io˘l
 16

	)

21 
	#__NR_¥ód64
 17

	)

22 
	#__NR_pwrôe64
 18

	)

23 
	#__NR_ªadv
 19

	)

24 
	#__NR_wrôev
 20

	)

25 
	#__NR_ac˚ss
 21

	)

26 
	#__NR_pùe
 22

	)

27 
	#__NR_£À˘
 23

	)

28 
	#__NR_sched_yõld
 24

	)

29 
	#__NR_mªm≠
 25

	)

30 
	#__NR_msync
 26

	)

31 
	#__NR_möc‹e
 27

	)

32 
	#__NR_madvi£
 28

	)

33 
	#__NR_shmgë
 29

	)

34 
	#__NR_shm©
 30

	)

35 
	#__NR_shm˘l
 31

	)

36 
	#__NR_dup
 32

	)

37 
	#__NR_dup2
 33

	)

38 
	#__NR_∑u£
 34

	)

39 
	#__NR_«no¶ìp
 35

	)

40 
	#__NR_gëôimî
 36

	)

41 
	#__NR_Æ¨m
 37

	)

42 
	#__NR_£tôimî
 38

	)

43 
	#__NR_gëpid
 39

	)

44 
	#__NR_£ndfûe
 40

	)

45 
	#__NR_sockë
 41

	)

46 
	#__NR_c⁄√˘
 42

	)

47 
	#__NR_ac˚±
 43

	)

48 
	#__NR_£ndto
 44

	)

49 
	#__NR_ªcv‰om
 45

	)

50 
	#__NR_£ndmsg
 46

	)

51 
	#__NR_ªcvmsg
 47

	)

52 
	#__NR_shutdown
 48

	)

53 
	#__NR_böd
 49

	)

54 
	#__NR_li°í
 50

	)

55 
	#__NR_gësock«me
 51

	)

56 
	#__NR_gë≥î«me
 52

	)

57 
	#__NR_sockë∑ú
 53

	)

58 
	#__NR_£tsock›t
 54

	)

59 
	#__NR_gësock›t
 55

	)

60 
	#__NR_˛⁄e
 56

	)

61 
	#__NR_f‹k
 57

	)

62 
	#__NR_vf‹k
 58

	)

63 
	#__NR_execve
 59

	)

64 
	#__NR_exô
 60

	)

65 
	#__NR_waô4
 61

	)

66 
	#__NR_kûl
 62

	)

67 
	#__NR_u«me
 63

	)

68 
	#__NR_£mgë
 64

	)

69 
	#__NR_£m›
 65

	)

70 
	#__NR_£m˘l
 66

	)

71 
	#__NR_shmdt
 67

	)

72 
	#__NR_msggë
 68

	)

73 
	#__NR_msg¢d
 69

	)

74 
	#__NR_msgrcv
 70

	)

75 
	#__NR_msg˘l
 71

	)

76 
	#__NR_f˙é
 72

	)

77 
	#__NR_Êock
 73

	)

78 
	#__NR_fsync
 74

	)

79 
	#__NR_fd©async
 75

	)

80 
	#__NR_åunˇã
 76

	)

81 
	#__NR_·runˇã
 77

	)

82 
	#__NR_gëdíts
 78

	)

83 
	#__NR_gëcwd
 79

	)

84 
	#__NR_chdú
 80

	)

85 
	#__NR_fchdú
 81

	)

86 
	#__NR_ª«me
 82

	)

87 
	#__NR_mkdú
 83

	)

88 
	#__NR_rmdú
 84

	)

89 
	#__NR_¸ót
 85

	)

90 
	#__NR_lök
 86

	)

91 
	#__NR_u∆ök
 87

	)

92 
	#__NR_symlök
 88

	)

93 
	#__NR_ªadlök
 89

	)

94 
	#__NR_chmod
 90

	)

95 
	#__NR_fchmod
 91

	)

96 
	#__NR_chown
 92

	)

97 
	#__NR_fchown
 93

	)

98 
	#__NR_lchown
 94

	)

99 
	#__NR_umask
 95

	)

100 
	#__NR_gëtimeofday
 96

	)

101 
	#__NR_gëæimô
 97

	)

102 
	#__NR_gërußge
 98

	)

103 
	#__NR_sysöfo
 99

	)

104 
	#__NR_times
 100

	)

105 
	#__NR_±ø˚
 101

	)

106 
	#__NR_gëuid
 102

	)

107 
	#__NR_sy¶og
 103

	)

108 
	#__NR_gëgid
 104

	)

109 
	#__NR_£tuid
 105

	)

110 
	#__NR_£tgid
 106

	)

111 
	#__NR_gëeuid
 107

	)

112 
	#__NR_gëegid
 108

	)

113 
	#__NR_£çgid
 109

	)

114 
	#__NR_gëµid
 110

	)

115 
	#__NR_gëpgΩ
 111

	)

116 
	#__NR_£tsid
 112

	)

117 
	#__NR_£åeuid
 113

	)

118 
	#__NR_£åegid
 114

	)

119 
	#__NR_gëgroups
 115

	)

120 
	#__NR_£tgroups
 116

	)

121 
	#__NR_£åesuid
 117

	)

122 
	#__NR_gëªsuid
 118

	)

123 
	#__NR_£åesgid
 119

	)

124 
	#__NR_gëªsgid
 120

	)

125 
	#__NR_gëpgid
 121

	)

126 
	#__NR_£tfsuid
 122

	)

127 
	#__NR_£tfsgid
 123

	)

128 
	#__NR_gësid
 124

	)

129 
	#__NR_ˇpgë
 125

	)

130 
	#__NR_ˇp£t
 126

	)

131 
	#__NR_π_sig≥ndög
 127

	)

132 
	#__NR_π_sigtimedwaô
 128

	)

133 
	#__NR_π_sigqueueöfo
 129

	)

134 
	#__NR_π_sigsu•íd
 130

	)

135 
	#__NR_sigÆt°ack
 131

	)

136 
	#__NR_utime
 132

	)

137 
	#__NR_mknod
 133

	)

138 
	#__NR_u£lib
 134

	)

139 
	#__NR_≥rs⁄Æôy
 135

	)

140 
	#__NR_u°©
 136

	)

141 
	#__NR_°©fs
 137

	)

142 
	#__NR_f°©fs
 138

	)

143 
	#__NR_sysfs
 139

	)

144 
	#__NR_gë¥i‹ôy
 140

	)

145 
	#__NR_£çri‹ôy
 141

	)

146 
	#__NR_sched_£ç¨am
 142

	)

147 
	#__NR_sched_gë∑øm
 143

	)

148 
	#__NR_sched_£tscheduÀr
 144

	)

149 
	#__NR_sched_gëscheduÀr
 145

	)

150 
	#__NR_sched_gë_¥i‹ôy_max
 146

	)

151 
	#__NR_sched_gë_¥i‹ôy_mö
 147

	)

152 
	#__NR_sched_º_gë_öãrvÆ
 148

	)

153 
	#__NR_mlock
 149

	)

154 
	#__NR_mu∆ock
 150

	)

155 
	#__NR_mlockÆl
 151

	)

156 
	#__NR_mu∆ockÆl
 152

	)

157 
	#__NR_vh™gup
 153

	)

158 
	#__NR_modify_ldt
 154

	)

159 
	#__NR_pivŸ_roŸ
 155

	)

160 
	#__NR__sys˘l
 156

	)

161 
	#__NR_¥˘l
 157

	)

162 
	#__NR_¨ch_¥˘l
 158

	)

163 
	#__NR_adjtimex
 159

	)

164 
	#__NR_£ålimô
 160

	)

165 
	#__NR_chroŸ
 161

	)

166 
	#__NR_sync
 162

	)

167 
	#__NR_ac˘
 163

	)

168 
	#__NR_£âimeofday
 164

	)

169 
	#__NR_mou¡
 165

	)

170 
	#__NR_umou¡2
 166

	)

171 
	#__NR_sw≠⁄
 167

	)

172 
	#__NR_sw≠off
 168

	)

173 
	#__NR_ªboŸ
 169

	)

174 
	#__NR_£tho°«me
 170

	)

175 
	#__NR_£tdomaö«me
 171

	)

176 
	#__NR_i›l
 172

	)

177 
	#__NR_i›îm
 173

	)

178 
	#__NR_¸óã_moduÀ
 174

	)

179 
	#__NR_öô_moduÀ
 175

	)

180 
	#__NR_dñëe_moduÀ
 176

	)

181 
	#__NR_gë_kî√l_syms
 177

	)

182 
	#__NR_quîy_moduÀ
 178

	)

183 
	#__NR_quŸa˘l
 179

	)

184 
	#__NR_nfs£rv˘l
 180

	)

185 
	#__NR_gëpmsg
 181

	)

186 
	#__NR_puçmsg
 182

	)

187 
	#__NR_afs_sysˇŒ
 183

	)

188 
	#__NR_tuxˇŒ
 184

	)

189 
	#__NR_£curôy
 185

	)

190 
	#__NR_gëtid
 186

	)

191 
	#__NR_ªadahód
 187

	)

192 
	#__NR_£tx©å
 188

	)

193 
	#__NR_l£tx©å
 189

	)

194 
	#__NR_f£tx©å
 190

	)

195 
	#__NR_gëx©å
 191

	)

196 
	#__NR_lgëx©å
 192

	)

197 
	#__NR_fgëx©å
 193

	)

198 
	#__NR_li°x©å
 194

	)

199 
	#__NR_Œi°x©å
 195

	)

200 
	#__NR_Êi°x©å
 196

	)

201 
	#__NR_ªmovex©å
 197

	)

202 
	#__NR_Ãemovex©å
 198

	)

203 
	#__NR_‰emovex©å
 199

	)

204 
	#__NR_tkûl
 200

	)

205 
	#__NR_time
 201

	)

206 
	#__NR_fuãx
 202

	)

207 
	#__NR_sched_£èfföôy
 203

	)

208 
	#__NR_sched_gëafföôy
 204

	)

209 
	#__NR_£t_thªad_¨ó
 205

	)

210 
	#__NR_io_£tup
 206

	)

211 
	#__NR_io_de°roy
 207

	)

212 
	#__NR_io_gëevíts
 208

	)

213 
	#__NR_io_submô
 209

	)

214 
	#__NR_io_ˇn˚l
 210

	)

215 
	#__NR_gë_thªad_¨ó
 211

	)

216 
	#__NR_lookup_dcookõ
 212

	)

217 
	#__NR_ïﬁl_¸óã
 213

	)

218 
	#__NR_ïﬁl_˘l_ﬁd
 214

	)

219 
	#__NR_ïﬁl_waô_ﬁd
 215

	)

220 
	#__NR_ªm≠_fûe_∑ges
 216

	)

221 
	#__NR_gëdíts64
 217

	)

222 
	#__NR_£t_tid_addªss
 218

	)

223 
	#__NR_ª°¨t_sysˇŒ
 219

	)

224 
	#__NR_£mtimed›
 220

	)

225 
	#__NR_Ádvi£64
 221

	)

226 
	#__NR_timî_¸óã
 222

	)

227 
	#__NR_timî_£âime
 223

	)

228 
	#__NR_timî_gëtime
 224

	)

229 
	#__NR_timî_gëovîrun
 225

	)

230 
	#__NR_timî_dñëe
 226

	)

231 
	#__NR_˛ock_£âime
 227

	)

232 
	#__NR_˛ock_gëtime
 228

	)

233 
	#__NR_˛ock_gëªs
 229

	)

234 
	#__NR_˛ock_«no¶ìp
 230

	)

235 
	#__NR_exô_group
 231

	)

236 
	#__NR_ïﬁl_waô
 232

	)

237 
	#__NR_ïﬁl_˘l
 233

	)

238 
	#__NR_tgkûl
 234

	)

239 
	#__NR_utimes
 235

	)

240 
	#__NR_v£rvî
 236

	)

241 
	#__NR_mböd
 237

	)

242 
	#__NR_£t_mempﬁicy
 238

	)

243 
	#__NR_gë_mempﬁicy
 239

	)

244 
	#__NR_mq_›í
 240

	)

245 
	#__NR_mq_u∆ök
 241

	)

246 
	#__NR_mq_timed£nd
 242

	)

247 
	#__NR_mq_timedª˚ive
 243

	)

248 
	#__NR_mq_nŸify
 244

	)

249 
	#__NR_mq_gë£èâr
 245

	)

250 
	#__NR_kexec_lﬂd
 246

	)

251 
	#__NR_waôid
 247

	)

252 
	#__NR_add_key
 248

	)

253 
	#__NR_ªque°_key
 249

	)

254 
	#__NR_key˘l
 250

	)

255 
	#__NR_i›rio_£t
 251

	)

256 
	#__NR_i›rio_gë
 252

	)

257 
	#__NR_öŸify_öô
 253

	)

258 
	#__NR_öŸify_add_w©ch
 254

	)

259 
	#__NR_öŸify_rm_w©ch
 255

	)

260 
	#__NR_migøã_∑ges
 256

	)

261 
	#__NR_›í©
 257

	)

262 
	#__NR_mkdú©
 258

	)

263 
	#__NR_mknod©
 259

	)

264 
	#__NR_fchow«t
 260

	)

265 
	#__NR_futimeßt
 261

	)

266 
	#__NR_√wf°©©
 262

	)

267 
	#__NR_u∆ök©
 263

	)

268 
	#__NR_ª«mót
 264

	)

269 
	#__NR_lök©
 265

	)

270 
	#__NR_symlök©
 266

	)

271 
	#__NR_ªadlök©
 267

	)

272 
	#__NR_fchmod©
 268

	)

273 
	#__NR_Ác˚sßt
 269

	)

274 
	#__NR_p£À˘6
 270

	)

275 
	#__NR_µﬁl
 271

	)

276 
	#__NR_unsh¨e
 272

	)

277 
	#__NR_£t_robu°_li°
 273

	)

278 
	#__NR_gë_robu°_li°
 274

	)

279 
	#__NR_•li˚
 275

	)

280 
	#__NR_ãe
 276

	)

281 
	#__NR_sync_fûe_ønge
 277

	)

282 
	#__NR_vm•li˚
 278

	)

283 
	#__NR_move_∑ges
 279

	)

284 
	#__NR_utimíßt
 280

	)

285 
	#__NR_ïﬁl_pwaô
 281

	)

286 
	#__NR_sig«lfd
 282

	)

287 
	#__NR_timîfd_¸óã
 283

	)

288 
	#__NR_evítfd
 284

	)

289 
	#__NR_ÁŒoˇã
 285

	)

290 
	#__NR_timîfd_£âime
 286

	)

291 
	#__NR_timîfd_gëtime
 287

	)

292 
	#__NR_ac˚±4
 288

	)

293 
	#__NR_sig«lfd4
 289

	)

294 
	#__NR_evítfd2
 290

	)

295 
	#__NR_ïﬁl_¸óã1
 291

	)

296 
	#__NR_dup3
 292

	)

297 
	#__NR_pùe2
 293

	)

298 
	#__NR_öŸify_öô1
 294

	)

299 
	#__NR_¥ódv
 295

	)

300 
	#__NR_pwrôev
 296

	)

301 
	#__NR_π_tgsigqueueöfo
 297

	)

302 
	#__NR_≥rf_evít_›í
 298

	)

303 
	#__NR_ªcvmmsg
 299

	)

304 
	#__NR_ÁnŸify_öô
 300

	)

305 
	#__NR_ÁnŸify_m¨k
 301

	)

306 
	#__NR_¥limô64
 302

	)

307 
	#__NR_«me_to_h™dÀ_©
 303

	)

308 
	#__NR_›í_by_h™dÀ_©
 304

	)

309 
	#__NR_˛ock_adjtime
 305

	)

310 
	#__NR_syncfs
 306

	)

311 
	#__NR_£ndmmsg
 307

	)

312 
	#__NR_£äs
 308

	)

313 
	#__NR_gë˝u
 309

	)

314 
	#__NR_¥o˚ss_vm_ªadv
 310

	)

315 
	#__NR_¥o˚ss_vm_wrôev
 311

	)

316 
	#__NR_kcmp
 312

	)

317 
	#__NR_föô_moduÀ
 313

	)

318 
	#__NR_sched_£èâr
 314

	)

319 
	#__NR_sched_gë©å
 315

	)

320 
	#__NR_ª«mót2
 316

	)

321 
	#__NR_£ccomp
 317

	)

322 
	#__NR_gëøndom
 318

	)

323 
	#__NR_memfd_¸óã
 319

	)

324 
	#__NR_kexec_fûe_lﬂd
 320

	)

325 
	#__NR_bpf
 321

	)

326 
	#__NR_execvót
 322

	)

327 
	#__NR_u£rÁu…fd
 323

	)

328 
	#__NR_memb¨rõr
 324

	)

329 
	#__NR_mlock2
 325

	)

330 
	#__NR_c›y_fûe_ønge
 326

	)

331 
	#__NR_¥ódv2
 327

	)

332 
	#__NR_pwrôev2
 328

	)

333 
	#__NR_pkey_m¥Ÿe˘
 329

	)

334 
	#__NR_pkey_Æloc
 330

	)

335 
	#__NR_pkey_‰ì
 331

	)

336 
	#__NR_°©x
 332

	)

337 
	#__NR_io_pgëevíts
 333

	)

338 
	#__NR_r£q
 334

	)

339 
	#__NR_pidfd_£nd_sig«l
 424

	)

340 
	#__NR_io_urög_£tup
 425

	)

341 
	#__NR_io_urög_íãr
 426

	)

342 
	#__NR_io_urög_ªgi°î
 427

	)

343 
	#__NR_›í_åì
 428

	)

344 
	#__NR_move_mou¡
 429

	)

345 
	#__NR_fs›í
 430

	)

346 
	#__NR_fsc⁄fig
 431

	)

347 
	#__NR_fsmou¡
 432

	)

348 
	#__NR_f•ick
 433

	)

349 
	#__NR_pidfd_›í
 434

	)

350 
	#__NR_˛⁄e3
 435

	)

351 
	#__NR_˛o£_ønge
 436

	)

352 
	#__NR_›í©2
 437

	)

353 
	#__NR_pidfd_gëfd
 438

	)

354 
	#__NR_Ác˚sßt2
 439

	)

355 
	#__NR_¥o˚ss_madvi£
 440

	)

356 
	#__NR_ïﬁl_pwaô2
 441

	)

357 
	#__NR_mou¡_£èâr
 442

	)

358 
	#__NR_quŸa˘l_fd
 443

	)

359 
	#__NR_œndlock_¸óã_ruÀ£t
 444

	)

360 
	#__NR_œndlock_add_ruÀ
 445

	)

361 
	#__NR_œndlock_ª°ri˘_£lf
 446

	)

362 
	#__NR_memfd_£¸ë
 447

	)

363 
	#__NR_¥o˚ss_mªÀa£
 448

	)

	@/usr/include/x86_64-linux-gnu/asm/unistd_x32.h

1 #i‚de‡
_ASM_UNISTD_X32_H


2 
	#_ASM_UNISTD_X32_H


	)

4 
	#__NR_ªad
 (
__X32_SYSCALL_BIT
 + 0)

	)

5 
	#__NR_wrôe
 (
__X32_SYSCALL_BIT
 + 1)

	)

6 
	#__NR_›í
 (
__X32_SYSCALL_BIT
 + 2)

	)

7 
	#__NR_˛o£
 (
__X32_SYSCALL_BIT
 + 3)

	)

8 
	#__NR_°©
 (
__X32_SYSCALL_BIT
 + 4)

	)

9 
	#__NR_f°©
 (
__X32_SYSCALL_BIT
 + 5)

	)

10 
	#__NR_l°©
 (
__X32_SYSCALL_BIT
 + 6)

	)

11 
	#__NR_pﬁl
 (
__X32_SYSCALL_BIT
 + 7)

	)

12 
	#__NR_l£ek
 (
__X32_SYSCALL_BIT
 + 8)

	)

13 
	#__NR_mm≠
 (
__X32_SYSCALL_BIT
 + 9)

	)

14 
	#__NR_m¥Ÿe˘
 (
__X32_SYSCALL_BIT
 + 10)

	)

15 
	#__NR_munm≠
 (
__X32_SYSCALL_BIT
 + 11)

	)

16 
	#__NR_brk
 (
__X32_SYSCALL_BIT
 + 12)

	)

17 
	#__NR_π_sig¥ocmask
 (
__X32_SYSCALL_BIT
 + 14)

	)

18 
	#__NR_¥ód64
 (
__X32_SYSCALL_BIT
 + 17)

	)

19 
	#__NR_pwrôe64
 (
__X32_SYSCALL_BIT
 + 18)

	)

20 
	#__NR_ac˚ss
 (
__X32_SYSCALL_BIT
 + 21)

	)

21 
	#__NR_pùe
 (
__X32_SYSCALL_BIT
 + 22)

	)

22 
	#__NR_£À˘
 (
__X32_SYSCALL_BIT
 + 23)

	)

23 
	#__NR_sched_yõld
 (
__X32_SYSCALL_BIT
 + 24)

	)

24 
	#__NR_mªm≠
 (
__X32_SYSCALL_BIT
 + 25)

	)

25 
	#__NR_msync
 (
__X32_SYSCALL_BIT
 + 26)

	)

26 
	#__NR_möc‹e
 (
__X32_SYSCALL_BIT
 + 27)

	)

27 
	#__NR_madvi£
 (
__X32_SYSCALL_BIT
 + 28)

	)

28 
	#__NR_shmgë
 (
__X32_SYSCALL_BIT
 + 29)

	)

29 
	#__NR_shm©
 (
__X32_SYSCALL_BIT
 + 30)

	)

30 
	#__NR_shm˘l
 (
__X32_SYSCALL_BIT
 + 31)

	)

31 
	#__NR_dup
 (
__X32_SYSCALL_BIT
 + 32)

	)

32 
	#__NR_dup2
 (
__X32_SYSCALL_BIT
 + 33)

	)

33 
	#__NR_∑u£
 (
__X32_SYSCALL_BIT
 + 34)

	)

34 
	#__NR_«no¶ìp
 (
__X32_SYSCALL_BIT
 + 35)

	)

35 
	#__NR_gëôimî
 (
__X32_SYSCALL_BIT
 + 36)

	)

36 
	#__NR_Æ¨m
 (
__X32_SYSCALL_BIT
 + 37)

	)

37 
	#__NR_£tôimî
 (
__X32_SYSCALL_BIT
 + 38)

	)

38 
	#__NR_gëpid
 (
__X32_SYSCALL_BIT
 + 39)

	)

39 
	#__NR_£ndfûe
 (
__X32_SYSCALL_BIT
 + 40)

	)

40 
	#__NR_sockë
 (
__X32_SYSCALL_BIT
 + 41)

	)

41 
	#__NR_c⁄√˘
 (
__X32_SYSCALL_BIT
 + 42)

	)

42 
	#__NR_ac˚±
 (
__X32_SYSCALL_BIT
 + 43)

	)

43 
	#__NR_£ndto
 (
__X32_SYSCALL_BIT
 + 44)

	)

44 
	#__NR_shutdown
 (
__X32_SYSCALL_BIT
 + 48)

	)

45 
	#__NR_böd
 (
__X32_SYSCALL_BIT
 + 49)

	)

46 
	#__NR_li°í
 (
__X32_SYSCALL_BIT
 + 50)

	)

47 
	#__NR_gësock«me
 (
__X32_SYSCALL_BIT
 + 51)

	)

48 
	#__NR_gë≥î«me
 (
__X32_SYSCALL_BIT
 + 52)

	)

49 
	#__NR_sockë∑ú
 (
__X32_SYSCALL_BIT
 + 53)

	)

50 
	#__NR_˛⁄e
 (
__X32_SYSCALL_BIT
 + 56)

	)

51 
	#__NR_f‹k
 (
__X32_SYSCALL_BIT
 + 57)

	)

52 
	#__NR_vf‹k
 (
__X32_SYSCALL_BIT
 + 58)

	)

53 
	#__NR_exô
 (
__X32_SYSCALL_BIT
 + 60)

	)

54 
	#__NR_waô4
 (
__X32_SYSCALL_BIT
 + 61)

	)

55 
	#__NR_kûl
 (
__X32_SYSCALL_BIT
 + 62)

	)

56 
	#__NR_u«me
 (
__X32_SYSCALL_BIT
 + 63)

	)

57 
	#__NR_£mgë
 (
__X32_SYSCALL_BIT
 + 64)

	)

58 
	#__NR_£m›
 (
__X32_SYSCALL_BIT
 + 65)

	)

59 
	#__NR_£m˘l
 (
__X32_SYSCALL_BIT
 + 66)

	)

60 
	#__NR_shmdt
 (
__X32_SYSCALL_BIT
 + 67)

	)

61 
	#__NR_msggë
 (
__X32_SYSCALL_BIT
 + 68)

	)

62 
	#__NR_msg¢d
 (
__X32_SYSCALL_BIT
 + 69)

	)

63 
	#__NR_msgrcv
 (
__X32_SYSCALL_BIT
 + 70)

	)

64 
	#__NR_msg˘l
 (
__X32_SYSCALL_BIT
 + 71)

	)

65 
	#__NR_f˙é
 (
__X32_SYSCALL_BIT
 + 72)

	)

66 
	#__NR_Êock
 (
__X32_SYSCALL_BIT
 + 73)

	)

67 
	#__NR_fsync
 (
__X32_SYSCALL_BIT
 + 74)

	)

68 
	#__NR_fd©async
 (
__X32_SYSCALL_BIT
 + 75)

	)

69 
	#__NR_åunˇã
 (
__X32_SYSCALL_BIT
 + 76)

	)

70 
	#__NR_·runˇã
 (
__X32_SYSCALL_BIT
 + 77)

	)

71 
	#__NR_gëdíts
 (
__X32_SYSCALL_BIT
 + 78)

	)

72 
	#__NR_gëcwd
 (
__X32_SYSCALL_BIT
 + 79)

	)

73 
	#__NR_chdú
 (
__X32_SYSCALL_BIT
 + 80)

	)

74 
	#__NR_fchdú
 (
__X32_SYSCALL_BIT
 + 81)

	)

75 
	#__NR_ª«me
 (
__X32_SYSCALL_BIT
 + 82)

	)

76 
	#__NR_mkdú
 (
__X32_SYSCALL_BIT
 + 83)

	)

77 
	#__NR_rmdú
 (
__X32_SYSCALL_BIT
 + 84)

	)

78 
	#__NR_¸ót
 (
__X32_SYSCALL_BIT
 + 85)

	)

79 
	#__NR_lök
 (
__X32_SYSCALL_BIT
 + 86)

	)

80 
	#__NR_u∆ök
 (
__X32_SYSCALL_BIT
 + 87)

	)

81 
	#__NR_symlök
 (
__X32_SYSCALL_BIT
 + 88)

	)

82 
	#__NR_ªadlök
 (
__X32_SYSCALL_BIT
 + 89)

	)

83 
	#__NR_chmod
 (
__X32_SYSCALL_BIT
 + 90)

	)

84 
	#__NR_fchmod
 (
__X32_SYSCALL_BIT
 + 91)

	)

85 
	#__NR_chown
 (
__X32_SYSCALL_BIT
 + 92)

	)

86 
	#__NR_fchown
 (
__X32_SYSCALL_BIT
 + 93)

	)

87 
	#__NR_lchown
 (
__X32_SYSCALL_BIT
 + 94)

	)

88 
	#__NR_umask
 (
__X32_SYSCALL_BIT
 + 95)

	)

89 
	#__NR_gëtimeofday
 (
__X32_SYSCALL_BIT
 + 96)

	)

90 
	#__NR_gëæimô
 (
__X32_SYSCALL_BIT
 + 97)

	)

91 
	#__NR_gërußge
 (
__X32_SYSCALL_BIT
 + 98)

	)

92 
	#__NR_sysöfo
 (
__X32_SYSCALL_BIT
 + 99)

	)

93 
	#__NR_times
 (
__X32_SYSCALL_BIT
 + 100)

	)

94 
	#__NR_gëuid
 (
__X32_SYSCALL_BIT
 + 102)

	)

95 
	#__NR_sy¶og
 (
__X32_SYSCALL_BIT
 + 103)

	)

96 
	#__NR_gëgid
 (
__X32_SYSCALL_BIT
 + 104)

	)

97 
	#__NR_£tuid
 (
__X32_SYSCALL_BIT
 + 105)

	)

98 
	#__NR_£tgid
 (
__X32_SYSCALL_BIT
 + 106)

	)

99 
	#__NR_gëeuid
 (
__X32_SYSCALL_BIT
 + 107)

	)

100 
	#__NR_gëegid
 (
__X32_SYSCALL_BIT
 + 108)

	)

101 
	#__NR_£çgid
 (
__X32_SYSCALL_BIT
 + 109)

	)

102 
	#__NR_gëµid
 (
__X32_SYSCALL_BIT
 + 110)

	)

103 
	#__NR_gëpgΩ
 (
__X32_SYSCALL_BIT
 + 111)

	)

104 
	#__NR_£tsid
 (
__X32_SYSCALL_BIT
 + 112)

	)

105 
	#__NR_£åeuid
 (
__X32_SYSCALL_BIT
 + 113)

	)

106 
	#__NR_£åegid
 (
__X32_SYSCALL_BIT
 + 114)

	)

107 
	#__NR_gëgroups
 (
__X32_SYSCALL_BIT
 + 115)

	)

108 
	#__NR_£tgroups
 (
__X32_SYSCALL_BIT
 + 116)

	)

109 
	#__NR_£åesuid
 (
__X32_SYSCALL_BIT
 + 117)

	)

110 
	#__NR_gëªsuid
 (
__X32_SYSCALL_BIT
 + 118)

	)

111 
	#__NR_£åesgid
 (
__X32_SYSCALL_BIT
 + 119)

	)

112 
	#__NR_gëªsgid
 (
__X32_SYSCALL_BIT
 + 120)

	)

113 
	#__NR_gëpgid
 (
__X32_SYSCALL_BIT
 + 121)

	)

114 
	#__NR_£tfsuid
 (
__X32_SYSCALL_BIT
 + 122)

	)

115 
	#__NR_£tfsgid
 (
__X32_SYSCALL_BIT
 + 123)

	)

116 
	#__NR_gësid
 (
__X32_SYSCALL_BIT
 + 124)

	)

117 
	#__NR_ˇpgë
 (
__X32_SYSCALL_BIT
 + 125)

	)

118 
	#__NR_ˇp£t
 (
__X32_SYSCALL_BIT
 + 126)

	)

119 
	#__NR_π_sigsu•íd
 (
__X32_SYSCALL_BIT
 + 130)

	)

120 
	#__NR_utime
 (
__X32_SYSCALL_BIT
 + 132)

	)

121 
	#__NR_mknod
 (
__X32_SYSCALL_BIT
 + 133)

	)

122 
	#__NR_≥rs⁄Æôy
 (
__X32_SYSCALL_BIT
 + 135)

	)

123 
	#__NR_u°©
 (
__X32_SYSCALL_BIT
 + 136)

	)

124 
	#__NR_°©fs
 (
__X32_SYSCALL_BIT
 + 137)

	)

125 
	#__NR_f°©fs
 (
__X32_SYSCALL_BIT
 + 138)

	)

126 
	#__NR_sysfs
 (
__X32_SYSCALL_BIT
 + 139)

	)

127 
	#__NR_gë¥i‹ôy
 (
__X32_SYSCALL_BIT
 + 140)

	)

128 
	#__NR_£çri‹ôy
 (
__X32_SYSCALL_BIT
 + 141)

	)

129 
	#__NR_sched_£ç¨am
 (
__X32_SYSCALL_BIT
 + 142)

	)

130 
	#__NR_sched_gë∑øm
 (
__X32_SYSCALL_BIT
 + 143)

	)

131 
	#__NR_sched_£tscheduÀr
 (
__X32_SYSCALL_BIT
 + 144)

	)

132 
	#__NR_sched_gëscheduÀr
 (
__X32_SYSCALL_BIT
 + 145)

	)

133 
	#__NR_sched_gë_¥i‹ôy_max
 (
__X32_SYSCALL_BIT
 + 146)

	)

134 
	#__NR_sched_gë_¥i‹ôy_mö
 (
__X32_SYSCALL_BIT
 + 147)

	)

135 
	#__NR_sched_º_gë_öãrvÆ
 (
__X32_SYSCALL_BIT
 + 148)

	)

136 
	#__NR_mlock
 (
__X32_SYSCALL_BIT
 + 149)

	)

137 
	#__NR_mu∆ock
 (
__X32_SYSCALL_BIT
 + 150)

	)

138 
	#__NR_mlockÆl
 (
__X32_SYSCALL_BIT
 + 151)

	)

139 
	#__NR_mu∆ockÆl
 (
__X32_SYSCALL_BIT
 + 152)

	)

140 
	#__NR_vh™gup
 (
__X32_SYSCALL_BIT
 + 153)

	)

141 
	#__NR_modify_ldt
 (
__X32_SYSCALL_BIT
 + 154)

	)

142 
	#__NR_pivŸ_roŸ
 (
__X32_SYSCALL_BIT
 + 155)

	)

143 
	#__NR_¥˘l
 (
__X32_SYSCALL_BIT
 + 157)

	)

144 
	#__NR_¨ch_¥˘l
 (
__X32_SYSCALL_BIT
 + 158)

	)

145 
	#__NR_adjtimex
 (
__X32_SYSCALL_BIT
 + 159)

	)

146 
	#__NR_£ålimô
 (
__X32_SYSCALL_BIT
 + 160)

	)

147 
	#__NR_chroŸ
 (
__X32_SYSCALL_BIT
 + 161)

	)

148 
	#__NR_sync
 (
__X32_SYSCALL_BIT
 + 162)

	)

149 
	#__NR_ac˘
 (
__X32_SYSCALL_BIT
 + 163)

	)

150 
	#__NR_£âimeofday
 (
__X32_SYSCALL_BIT
 + 164)

	)

151 
	#__NR_mou¡
 (
__X32_SYSCALL_BIT
 + 165)

	)

152 
	#__NR_umou¡2
 (
__X32_SYSCALL_BIT
 + 166)

	)

153 
	#__NR_sw≠⁄
 (
__X32_SYSCALL_BIT
 + 167)

	)

154 
	#__NR_sw≠off
 (
__X32_SYSCALL_BIT
 + 168)

	)

155 
	#__NR_ªboŸ
 (
__X32_SYSCALL_BIT
 + 169)

	)

156 
	#__NR_£tho°«me
 (
__X32_SYSCALL_BIT
 + 170)

	)

157 
	#__NR_£tdomaö«me
 (
__X32_SYSCALL_BIT
 + 171)

	)

158 
	#__NR_i›l
 (
__X32_SYSCALL_BIT
 + 172)

	)

159 
	#__NR_i›îm
 (
__X32_SYSCALL_BIT
 + 173)

	)

160 
	#__NR_öô_moduÀ
 (
__X32_SYSCALL_BIT
 + 175)

	)

161 
	#__NR_dñëe_moduÀ
 (
__X32_SYSCALL_BIT
 + 176)

	)

162 
	#__NR_quŸa˘l
 (
__X32_SYSCALL_BIT
 + 179)

	)

163 
	#__NR_gëpmsg
 (
__X32_SYSCALL_BIT
 + 181)

	)

164 
	#__NR_puçmsg
 (
__X32_SYSCALL_BIT
 + 182)

	)

165 
	#__NR_afs_sysˇŒ
 (
__X32_SYSCALL_BIT
 + 183)

	)

166 
	#__NR_tuxˇŒ
 (
__X32_SYSCALL_BIT
 + 184)

	)

167 
	#__NR_£curôy
 (
__X32_SYSCALL_BIT
 + 185)

	)

168 
	#__NR_gëtid
 (
__X32_SYSCALL_BIT
 + 186)

	)

169 
	#__NR_ªadahód
 (
__X32_SYSCALL_BIT
 + 187)

	)

170 
	#__NR_£tx©å
 (
__X32_SYSCALL_BIT
 + 188)

	)

171 
	#__NR_l£tx©å
 (
__X32_SYSCALL_BIT
 + 189)

	)

172 
	#__NR_f£tx©å
 (
__X32_SYSCALL_BIT
 + 190)

	)

173 
	#__NR_gëx©å
 (
__X32_SYSCALL_BIT
 + 191)

	)

174 
	#__NR_lgëx©å
 (
__X32_SYSCALL_BIT
 + 192)

	)

175 
	#__NR_fgëx©å
 (
__X32_SYSCALL_BIT
 + 193)

	)

176 
	#__NR_li°x©å
 (
__X32_SYSCALL_BIT
 + 194)

	)

177 
	#__NR_Œi°x©å
 (
__X32_SYSCALL_BIT
 + 195)

	)

178 
	#__NR_Êi°x©å
 (
__X32_SYSCALL_BIT
 + 196)

	)

179 
	#__NR_ªmovex©å
 (
__X32_SYSCALL_BIT
 + 197)

	)

180 
	#__NR_Ãemovex©å
 (
__X32_SYSCALL_BIT
 + 198)

	)

181 
	#__NR_‰emovex©å
 (
__X32_SYSCALL_BIT
 + 199)

	)

182 
	#__NR_tkûl
 (
__X32_SYSCALL_BIT
 + 200)

	)

183 
	#__NR_time
 (
__X32_SYSCALL_BIT
 + 201)

	)

184 
	#__NR_fuãx
 (
__X32_SYSCALL_BIT
 + 202)

	)

185 
	#__NR_sched_£èfföôy
 (
__X32_SYSCALL_BIT
 + 203)

	)

186 
	#__NR_sched_gëafföôy
 (
__X32_SYSCALL_BIT
 + 204)

	)

187 
	#__NR_io_de°roy
 (
__X32_SYSCALL_BIT
 + 207)

	)

188 
	#__NR_io_gëevíts
 (
__X32_SYSCALL_BIT
 + 208)

	)

189 
	#__NR_io_ˇn˚l
 (
__X32_SYSCALL_BIT
 + 210)

	)

190 
	#__NR_lookup_dcookõ
 (
__X32_SYSCALL_BIT
 + 212)

	)

191 
	#__NR_ïﬁl_¸óã
 (
__X32_SYSCALL_BIT
 + 213)

	)

192 
	#__NR_ªm≠_fûe_∑ges
 (
__X32_SYSCALL_BIT
 + 216)

	)

193 
	#__NR_gëdíts64
 (
__X32_SYSCALL_BIT
 + 217)

	)

194 
	#__NR_£t_tid_addªss
 (
__X32_SYSCALL_BIT
 + 218)

	)

195 
	#__NR_ª°¨t_sysˇŒ
 (
__X32_SYSCALL_BIT
 + 219)

	)

196 
	#__NR_£mtimed›
 (
__X32_SYSCALL_BIT
 + 220)

	)

197 
	#__NR_Ádvi£64
 (
__X32_SYSCALL_BIT
 + 221)

	)

198 
	#__NR_timî_£âime
 (
__X32_SYSCALL_BIT
 + 223)

	)

199 
	#__NR_timî_gëtime
 (
__X32_SYSCALL_BIT
 + 224)

	)

200 
	#__NR_timî_gëovîrun
 (
__X32_SYSCALL_BIT
 + 225)

	)

201 
	#__NR_timî_dñëe
 (
__X32_SYSCALL_BIT
 + 226)

	)

202 
	#__NR_˛ock_£âime
 (
__X32_SYSCALL_BIT
 + 227)

	)

203 
	#__NR_˛ock_gëtime
 (
__X32_SYSCALL_BIT
 + 228)

	)

204 
	#__NR_˛ock_gëªs
 (
__X32_SYSCALL_BIT
 + 229)

	)

205 
	#__NR_˛ock_«no¶ìp
 (
__X32_SYSCALL_BIT
 + 230)

	)

206 
	#__NR_exô_group
 (
__X32_SYSCALL_BIT
 + 231)

	)

207 
	#__NR_ïﬁl_waô
 (
__X32_SYSCALL_BIT
 + 232)

	)

208 
	#__NR_ïﬁl_˘l
 (
__X32_SYSCALL_BIT
 + 233)

	)

209 
	#__NR_tgkûl
 (
__X32_SYSCALL_BIT
 + 234)

	)

210 
	#__NR_utimes
 (
__X32_SYSCALL_BIT
 + 235)

	)

211 
	#__NR_mböd
 (
__X32_SYSCALL_BIT
 + 237)

	)

212 
	#__NR_£t_mempﬁicy
 (
__X32_SYSCALL_BIT
 + 238)

	)

213 
	#__NR_gë_mempﬁicy
 (
__X32_SYSCALL_BIT
 + 239)

	)

214 
	#__NR_mq_›í
 (
__X32_SYSCALL_BIT
 + 240)

	)

215 
	#__NR_mq_u∆ök
 (
__X32_SYSCALL_BIT
 + 241)

	)

216 
	#__NR_mq_timed£nd
 (
__X32_SYSCALL_BIT
 + 242)

	)

217 
	#__NR_mq_timedª˚ive
 (
__X32_SYSCALL_BIT
 + 243)

	)

218 
	#__NR_mq_gë£èâr
 (
__X32_SYSCALL_BIT
 + 245)

	)

219 
	#__NR_add_key
 (
__X32_SYSCALL_BIT
 + 248)

	)

220 
	#__NR_ªque°_key
 (
__X32_SYSCALL_BIT
 + 249)

	)

221 
	#__NR_key˘l
 (
__X32_SYSCALL_BIT
 + 250)

	)

222 
	#__NR_i›rio_£t
 (
__X32_SYSCALL_BIT
 + 251)

	)

223 
	#__NR_i›rio_gë
 (
__X32_SYSCALL_BIT
 + 252)

	)

224 
	#__NR_öŸify_öô
 (
__X32_SYSCALL_BIT
 + 253)

	)

225 
	#__NR_öŸify_add_w©ch
 (
__X32_SYSCALL_BIT
 + 254)

	)

226 
	#__NR_öŸify_rm_w©ch
 (
__X32_SYSCALL_BIT
 + 255)

	)

227 
	#__NR_migøã_∑ges
 (
__X32_SYSCALL_BIT
 + 256)

	)

228 
	#__NR_›í©
 (
__X32_SYSCALL_BIT
 + 257)

	)

229 
	#__NR_mkdú©
 (
__X32_SYSCALL_BIT
 + 258)

	)

230 
	#__NR_mknod©
 (
__X32_SYSCALL_BIT
 + 259)

	)

231 
	#__NR_fchow«t
 (
__X32_SYSCALL_BIT
 + 260)

	)

232 
	#__NR_futimeßt
 (
__X32_SYSCALL_BIT
 + 261)

	)

233 
	#__NR_√wf°©©
 (
__X32_SYSCALL_BIT
 + 262)

	)

234 
	#__NR_u∆ök©
 (
__X32_SYSCALL_BIT
 + 263)

	)

235 
	#__NR_ª«mót
 (
__X32_SYSCALL_BIT
 + 264)

	)

236 
	#__NR_lök©
 (
__X32_SYSCALL_BIT
 + 265)

	)

237 
	#__NR_symlök©
 (
__X32_SYSCALL_BIT
 + 266)

	)

238 
	#__NR_ªadlök©
 (
__X32_SYSCALL_BIT
 + 267)

	)

239 
	#__NR_fchmod©
 (
__X32_SYSCALL_BIT
 + 268)

	)

240 
	#__NR_Ác˚sßt
 (
__X32_SYSCALL_BIT
 + 269)

	)

241 
	#__NR_p£À˘6
 (
__X32_SYSCALL_BIT
 + 270)

	)

242 
	#__NR_µﬁl
 (
__X32_SYSCALL_BIT
 + 271)

	)

243 
	#__NR_unsh¨e
 (
__X32_SYSCALL_BIT
 + 272)

	)

244 
	#__NR_•li˚
 (
__X32_SYSCALL_BIT
 + 275)

	)

245 
	#__NR_ãe
 (
__X32_SYSCALL_BIT
 + 276)

	)

246 
	#__NR_sync_fûe_ønge
 (
__X32_SYSCALL_BIT
 + 277)

	)

247 
	#__NR_utimíßt
 (
__X32_SYSCALL_BIT
 + 280)

	)

248 
	#__NR_ïﬁl_pwaô
 (
__X32_SYSCALL_BIT
 + 281)

	)

249 
	#__NR_sig«lfd
 (
__X32_SYSCALL_BIT
 + 282)

	)

250 
	#__NR_timîfd_¸óã
 (
__X32_SYSCALL_BIT
 + 283)

	)

251 
	#__NR_evítfd
 (
__X32_SYSCALL_BIT
 + 284)

	)

252 
	#__NR_ÁŒoˇã
 (
__X32_SYSCALL_BIT
 + 285)

	)

253 
	#__NR_timîfd_£âime
 (
__X32_SYSCALL_BIT
 + 286)

	)

254 
	#__NR_timîfd_gëtime
 (
__X32_SYSCALL_BIT
 + 287)

	)

255 
	#__NR_ac˚±4
 (
__X32_SYSCALL_BIT
 + 288)

	)

256 
	#__NR_sig«lfd4
 (
__X32_SYSCALL_BIT
 + 289)

	)

257 
	#__NR_evítfd2
 (
__X32_SYSCALL_BIT
 + 290)

	)

258 
	#__NR_ïﬁl_¸óã1
 (
__X32_SYSCALL_BIT
 + 291)

	)

259 
	#__NR_dup3
 (
__X32_SYSCALL_BIT
 + 292)

	)

260 
	#__NR_pùe2
 (
__X32_SYSCALL_BIT
 + 293)

	)

261 
	#__NR_öŸify_öô1
 (
__X32_SYSCALL_BIT
 + 294)

	)

262 
	#__NR_≥rf_evít_›í
 (
__X32_SYSCALL_BIT
 + 298)

	)

263 
	#__NR_ÁnŸify_öô
 (
__X32_SYSCALL_BIT
 + 300)

	)

264 
	#__NR_ÁnŸify_m¨k
 (
__X32_SYSCALL_BIT
 + 301)

	)

265 
	#__NR_¥limô64
 (
__X32_SYSCALL_BIT
 + 302)

	)

266 
	#__NR_«me_to_h™dÀ_©
 (
__X32_SYSCALL_BIT
 + 303)

	)

267 
	#__NR_›í_by_h™dÀ_©
 (
__X32_SYSCALL_BIT
 + 304)

	)

268 
	#__NR_˛ock_adjtime
 (
__X32_SYSCALL_BIT
 + 305)

	)

269 
	#__NR_syncfs
 (
__X32_SYSCALL_BIT
 + 306)

	)

270 
	#__NR_£äs
 (
__X32_SYSCALL_BIT
 + 308)

	)

271 
	#__NR_gë˝u
 (
__X32_SYSCALL_BIT
 + 309)

	)

272 
	#__NR_kcmp
 (
__X32_SYSCALL_BIT
 + 312)

	)

273 
	#__NR_föô_moduÀ
 (
__X32_SYSCALL_BIT
 + 313)

	)

274 
	#__NR_sched_£èâr
 (
__X32_SYSCALL_BIT
 + 314)

	)

275 
	#__NR_sched_gë©å
 (
__X32_SYSCALL_BIT
 + 315)

	)

276 
	#__NR_ª«mót2
 (
__X32_SYSCALL_BIT
 + 316)

	)

277 
	#__NR_£ccomp
 (
__X32_SYSCALL_BIT
 + 317)

	)

278 
	#__NR_gëøndom
 (
__X32_SYSCALL_BIT
 + 318)

	)

279 
	#__NR_memfd_¸óã
 (
__X32_SYSCALL_BIT
 + 319)

	)

280 
	#__NR_kexec_fûe_lﬂd
 (
__X32_SYSCALL_BIT
 + 320)

	)

281 
	#__NR_bpf
 (
__X32_SYSCALL_BIT
 + 321)

	)

282 
	#__NR_u£rÁu…fd
 (
__X32_SYSCALL_BIT
 + 323)

	)

283 
	#__NR_memb¨rõr
 (
__X32_SYSCALL_BIT
 + 324)

	)

284 
	#__NR_mlock2
 (
__X32_SYSCALL_BIT
 + 325)

	)

285 
	#__NR_c›y_fûe_ønge
 (
__X32_SYSCALL_BIT
 + 326)

	)

286 
	#__NR_pkey_m¥Ÿe˘
 (
__X32_SYSCALL_BIT
 + 329)

	)

287 
	#__NR_pkey_Æloc
 (
__X32_SYSCALL_BIT
 + 330)

	)

288 
	#__NR_pkey_‰ì
 (
__X32_SYSCALL_BIT
 + 331)

	)

289 
	#__NR_°©x
 (
__X32_SYSCALL_BIT
 + 332)

	)

290 
	#__NR_io_pgëevíts
 (
__X32_SYSCALL_BIT
 + 333)

	)

291 
	#__NR_r£q
 (
__X32_SYSCALL_BIT
 + 334)

	)

292 
	#__NR_pidfd_£nd_sig«l
 (
__X32_SYSCALL_BIT
 + 424)

	)

293 
	#__NR_io_urög_£tup
 (
__X32_SYSCALL_BIT
 + 425)

	)

294 
	#__NR_io_urög_íãr
 (
__X32_SYSCALL_BIT
 + 426)

	)

295 
	#__NR_io_urög_ªgi°î
 (
__X32_SYSCALL_BIT
 + 427)

	)

296 
	#__NR_›í_åì
 (
__X32_SYSCALL_BIT
 + 428)

	)

297 
	#__NR_move_mou¡
 (
__X32_SYSCALL_BIT
 + 429)

	)

298 
	#__NR_fs›í
 (
__X32_SYSCALL_BIT
 + 430)

	)

299 
	#__NR_fsc⁄fig
 (
__X32_SYSCALL_BIT
 + 431)

	)

300 
	#__NR_fsmou¡
 (
__X32_SYSCALL_BIT
 + 432)

	)

301 
	#__NR_f•ick
 (
__X32_SYSCALL_BIT
 + 433)

	)

302 
	#__NR_pidfd_›í
 (
__X32_SYSCALL_BIT
 + 434)

	)

303 
	#__NR_˛⁄e3
 (
__X32_SYSCALL_BIT
 + 435)

	)

304 
	#__NR_˛o£_ønge
 (
__X32_SYSCALL_BIT
 + 436)

	)

305 
	#__NR_›í©2
 (
__X32_SYSCALL_BIT
 + 437)

	)

306 
	#__NR_pidfd_gëfd
 (
__X32_SYSCALL_BIT
 + 438)

	)

307 
	#__NR_Ác˚sßt2
 (
__X32_SYSCALL_BIT
 + 439)

	)

308 
	#__NR_¥o˚ss_madvi£
 (
__X32_SYSCALL_BIT
 + 440)

	)

309 
	#__NR_ïﬁl_pwaô2
 (
__X32_SYSCALL_BIT
 + 441)

	)

310 
	#__NR_mou¡_£èâr
 (
__X32_SYSCALL_BIT
 + 442)

	)

311 
	#__NR_quŸa˘l_fd
 (
__X32_SYSCALL_BIT
 + 443)

	)

312 
	#__NR_œndlock_¸óã_ruÀ£t
 (
__X32_SYSCALL_BIT
 + 444)

	)

313 
	#__NR_œndlock_add_ruÀ
 (
__X32_SYSCALL_BIT
 + 445)

	)

314 
	#__NR_œndlock_ª°ri˘_£lf
 (
__X32_SYSCALL_BIT
 + 446)

	)

315 
	#__NR_memfd_£¸ë
 (
__X32_SYSCALL_BIT
 + 447)

	)

316 
	#__NR_¥o˚ss_mªÀa£
 (
__X32_SYSCALL_BIT
 + 448)

	)

317 
	#__NR_π_siga˘i⁄
 (
__X32_SYSCALL_BIT
 + 512)

	)

318 
	#__NR_π_sigªtu∫
 (
__X32_SYSCALL_BIT
 + 513)

	)

319 
	#__NR_io˘l
 (
__X32_SYSCALL_BIT
 + 514)

	)

320 
	#__NR_ªadv
 (
__X32_SYSCALL_BIT
 + 515)

	)

321 
	#__NR_wrôev
 (
__X32_SYSCALL_BIT
 + 516)

	)

322 
	#__NR_ªcv‰om
 (
__X32_SYSCALL_BIT
 + 517)

	)

323 
	#__NR_£ndmsg
 (
__X32_SYSCALL_BIT
 + 518)

	)

324 
	#__NR_ªcvmsg
 (
__X32_SYSCALL_BIT
 + 519)

	)

325 
	#__NR_execve
 (
__X32_SYSCALL_BIT
 + 520)

	)

326 
	#__NR_±ø˚
 (
__X32_SYSCALL_BIT
 + 521)

	)

327 
	#__NR_π_sig≥ndög
 (
__X32_SYSCALL_BIT
 + 522)

	)

328 
	#__NR_π_sigtimedwaô
 (
__X32_SYSCALL_BIT
 + 523)

	)

329 
	#__NR_π_sigqueueöfo
 (
__X32_SYSCALL_BIT
 + 524)

	)

330 
	#__NR_sigÆt°ack
 (
__X32_SYSCALL_BIT
 + 525)

	)

331 
	#__NR_timî_¸óã
 (
__X32_SYSCALL_BIT
 + 526)

	)

332 
	#__NR_mq_nŸify
 (
__X32_SYSCALL_BIT
 + 527)

	)

333 
	#__NR_kexec_lﬂd
 (
__X32_SYSCALL_BIT
 + 528)

	)

334 
	#__NR_waôid
 (
__X32_SYSCALL_BIT
 + 529)

	)

335 
	#__NR_£t_robu°_li°
 (
__X32_SYSCALL_BIT
 + 530)

	)

336 
	#__NR_gë_robu°_li°
 (
__X32_SYSCALL_BIT
 + 531)

	)

337 
	#__NR_vm•li˚
 (
__X32_SYSCALL_BIT
 + 532)

	)

338 
	#__NR_move_∑ges
 (
__X32_SYSCALL_BIT
 + 533)

	)

339 
	#__NR_¥ódv
 (
__X32_SYSCALL_BIT
 + 534)

	)

340 
	#__NR_pwrôev
 (
__X32_SYSCALL_BIT
 + 535)

	)

341 
	#__NR_π_tgsigqueueöfo
 (
__X32_SYSCALL_BIT
 + 536)

	)

342 
	#__NR_ªcvmmsg
 (
__X32_SYSCALL_BIT
 + 537)

	)

343 
	#__NR_£ndmmsg
 (
__X32_SYSCALL_BIT
 + 538)

	)

344 
	#__NR_¥o˚ss_vm_ªadv
 (
__X32_SYSCALL_BIT
 + 539)

	)

345 
	#__NR_¥o˚ss_vm_wrôev
 (
__X32_SYSCALL_BIT
 + 540)

	)

346 
	#__NR_£tsock›t
 (
__X32_SYSCALL_BIT
 + 541)

	)

347 
	#__NR_gësock›t
 (
__X32_SYSCALL_BIT
 + 542)

	)

348 
	#__NR_io_£tup
 (
__X32_SYSCALL_BIT
 + 543)

	)

349 
	#__NR_io_submô
 (
__X32_SYSCALL_BIT
 + 544)

	)

350 
	#__NR_execvót
 (
__X32_SYSCALL_BIT
 + 545)

	)

351 
	#__NR_¥ódv2
 (
__X32_SYSCALL_BIT
 + 546)

	)

352 
	#__NR_pwrôev2
 (
__X32_SYSCALL_BIT
 + 547)

	)

	@/usr/include/x86_64-linux-gnu/asm/vm86.h

2 #i‚de‡
_ASM_X86_VM86_H


3 
	#_ASM_X86_VM86_H


	)

16 
	~<asm/¥o˚ss‹-Êags.h
>

18 
	#BIOSSEG
 0x0f000

	)

20 
	#CPU_086
 0

	)

21 
	#CPU_186
 1

	)

22 
	#CPU_286
 2

	)

23 
	#CPU_386
 3

	)

24 
	#CPU_486
 4

	)

25 
	#CPU_586
 5

	)

30 
	#VM86_TYPE
(
ªtvÆ
Ë(‘ëvÆË& 0xff)

	)

31 
	#VM86_ARG
(
ªtvÆ
Ë(‘ëvÆË>> 8)

	)

33 
	#VM86_SIGNAL
 0

	)

34 
	#VM86_UNKNOWN
 1

	)

36 
	#VM86_INTx
 2

	)

37 
	#VM86_STI
 3

	)

43 
	#VM86_PICRETURN
 4

	)

44 
	#VM86_TRAP
 6

	)

49 
	#VM86_PLUS_INSTALL_CHECK
 0

	)

50 
	#VM86_ENTER
 1

	)

51 
	#VM86_ENTER_NO_BYPASS
 2

	)

52 
	#VM86_REQUEST_IRQ
 3

	)

53 
	#VM86_FREE_IRQ
 4

	)

54 
	#VM86_GET_IRQ_BITS
 5

	)

55 
	#VM86_GET_AND_RESET_IRQ
 6

	)

63 
	svm86_ªgs
 {

67 
	mebx
;

68 
	mecx
;

69 
	medx
;

70 
	mesi
;

71 
	medi
;

72 
	mebp
;

73 
	móx
;

74 
	m__nuŒ_ds
;

75 
	m__nuŒ_es
;

76 
	m__nuŒ_fs
;

77 
	m__nuŒ_gs
;

78 
	m‹ig_óx
;

79 
	meù
;

80 
	mcs
, 
	m__csh
;

81 
	meÊags
;

82 
	me•
;

83 
	mss
, 
	m__ssh
;

87 
	mes
, 
	m__esh
;

88 
	mds
, 
	m__dsh
;

89 
	mfs
, 
	m__fsh
;

90 
	mgs
, 
	m__gsh
;

93 
	sªve˘‹ed_°ru˘
 {

94 
	m__m≠
[8];

97 
	svm86_°ru˘
 {

98 
vm86_ªgs
 
	mªgs
;

99 
	mÊags
;

100 
	ms¸ìn_bôm≠
;

101 
	m˝u_ty≥
;

102 
ªve˘‹ed_°ru˘
 
	möt_ªve˘‹ed
;

103 
ªve˘‹ed_°ru˘
 
	möt21_ªve˘‹ed
;

109 
	#VM86_SCREEN_BITMAP
 0x0001

	)

111 
	svm86∂us_öfo_°ru˘
 {

112 
	mf‹˚_ªtu∫_f‹_pic
:1;

113 
	mvm86dbg_a˘ive
:1;

114 
	mvm86dbg_TF≥ndig
:1;

115 
	munu£d
:28;

116 
	mis_vm86pus
:1;

117 
	mvm86dbg_ötxxèb
[32];

119 
	svm86∂us_°ru˘
 {

120 
vm86_ªgs
 
	mªgs
;

121 
	mÊags
;

122 
	ms¸ìn_bôm≠
;

123 
	m˝u_ty≥
;

124 
ªve˘‹ed_°ru˘
 
	möt_ªve˘‹ed
;

125 
ªve˘‹ed_°ru˘
 
	möt21_ªve˘‹ed
;

126 
vm86∂us_öfo_°ru˘
 
	mvm86∂us
;

	@/usr/include/x86_64-linux-gnu/asm/vmx.h

25 #i‚de‡
VMX_H


26 
	#VMX_H


	)

29 
	#VMX_EXIT_REASONS_FAILED_VMENTRY
 0x80000000

	)

30 
	#VMX_EXIT_REASONS_SGX_ENCLAVE_MODE
 0x08000000

	)

32 
	#EXIT_REASON_EXCEPTION_NMI
 0

	)

33 
	#EXIT_REASON_EXTERNAL_INTERRUPT
 1

	)

34 
	#EXIT_REASON_TRIPLE_FAULT
 2

	)

35 
	#EXIT_REASON_INIT_SIGNAL
 3

	)

36 
	#EXIT_REASON_SIPI_SIGNAL
 4

	)

38 
	#EXIT_REASON_INTERRUPT_WINDOW
 7

	)

39 
	#EXIT_REASON_NMI_WINDOW
 8

	)

40 
	#EXIT_REASON_TASK_SWITCH
 9

	)

41 
	#EXIT_REASON_CPUID
 10

	)

42 
	#EXIT_REASON_HLT
 12

	)

43 
	#EXIT_REASON_INVD
 13

	)

44 
	#EXIT_REASON_INVLPG
 14

	)

45 
	#EXIT_REASON_RDPMC
 15

	)

46 
	#EXIT_REASON_RDTSC
 16

	)

47 
	#EXIT_REASON_VMCALL
 18

	)

48 
	#EXIT_REASON_VMCLEAR
 19

	)

49 
	#EXIT_REASON_VMLAUNCH
 20

	)

50 
	#EXIT_REASON_VMPTRLD
 21

	)

51 
	#EXIT_REASON_VMPTRST
 22

	)

52 
	#EXIT_REASON_VMREAD
 23

	)

53 
	#EXIT_REASON_VMRESUME
 24

	)

54 
	#EXIT_REASON_VMWRITE
 25

	)

55 
	#EXIT_REASON_VMOFF
 26

	)

56 
	#EXIT_REASON_VMON
 27

	)

57 
	#EXIT_REASON_CR_ACCESS
 28

	)

58 
	#EXIT_REASON_DR_ACCESS
 29

	)

59 
	#EXIT_REASON_IO_INSTRUCTION
 30

	)

60 
	#EXIT_REASON_MSR_READ
 31

	)

61 
	#EXIT_REASON_MSR_WRITE
 32

	)

62 
	#EXIT_REASON_INVALID_STATE
 33

	)

63 
	#EXIT_REASON_MSR_LOAD_FAIL
 34

	)

64 
	#EXIT_REASON_MWAIT_INSTRUCTION
 36

	)

65 
	#EXIT_REASON_MONITOR_TRAP_FLAG
 37

	)

66 
	#EXIT_REASON_MONITOR_INSTRUCTION
 39

	)

67 
	#EXIT_REASON_PAUSE_INSTRUCTION
 40

	)

68 
	#EXIT_REASON_MCE_DURING_VMENTRY
 41

	)

69 
	#EXIT_REASON_TPR_BELOW_THRESHOLD
 43

	)

70 
	#EXIT_REASON_APIC_ACCESS
 44

	)

71 
	#EXIT_REASON_EOI_INDUCED
 45

	)

72 
	#EXIT_REASON_GDTR_IDTR
 46

	)

73 
	#EXIT_REASON_LDTR_TR
 47

	)

74 
	#EXIT_REASON_EPT_VIOLATION
 48

	)

75 
	#EXIT_REASON_EPT_MISCONFIG
 49

	)

76 
	#EXIT_REASON_INVEPT
 50

	)

77 
	#EXIT_REASON_RDTSCP
 51

	)

78 
	#EXIT_REASON_PREEMPTION_TIMER
 52

	)

79 
	#EXIT_REASON_INVVPID
 53

	)

80 
	#EXIT_REASON_WBINVD
 54

	)

81 
	#EXIT_REASON_XSETBV
 55

	)

82 
	#EXIT_REASON_APIC_WRITE
 56

	)

83 
	#EXIT_REASON_RDRAND
 57

	)

84 
	#EXIT_REASON_INVPCID
 58

	)

85 
	#EXIT_REASON_VMFUNC
 59

	)

86 
	#EXIT_REASON_ENCLS
 60

	)

87 
	#EXIT_REASON_RDSEED
 61

	)

88 
	#EXIT_REASON_PML_FULL
 62

	)

89 
	#EXIT_REASON_XSAVES
 63

	)

90 
	#EXIT_REASON_XRSTORS
 64

	)

91 
	#EXIT_REASON_UMWAIT
 67

	)

92 
	#EXIT_REASON_TPAUSE
 68

	)

93 
	#EXIT_REASON_BUS_LOCK
 74

	)

95 
	#VMX_EXIT_REASONS
 \

96 { 
EXIT_REASON_EXCEPTION_NMI
, "EXCEPTION_NMI" }, \

97 { 
EXIT_REASON_EXTERNAL_INTERRUPT
, "EXTERNAL_INTERRUPT" }, \

98 { 
EXIT_REASON_TRIPLE_FAULT
, "TRIPLE_FAULT" }, \

99 { 
EXIT_REASON_INIT_SIGNAL
, "INIT_SIGNAL" }, \

100 { 
EXIT_REASON_SIPI_SIGNAL
, "SIPI_SIGNAL" }, \

101 { 
EXIT_REASON_INTERRUPT_WINDOW
, "INTERRUPT_WINDOW" }, \

102 { 
EXIT_REASON_NMI_WINDOW
, "NMI_WINDOW" }, \

103 { 
EXIT_REASON_TASK_SWITCH
, "TASK_SWITCH" }, \

104 { 
EXIT_REASON_CPUID
, "CPUID" }, \

105 { 
EXIT_REASON_HLT
, "HLT" }, \

106 { 
EXIT_REASON_INVD
, "INVD" }, \

107 { 
EXIT_REASON_INVLPG
, "INVLPG" }, \

108 { 
EXIT_REASON_RDPMC
, "RDPMC" }, \

109 { 
EXIT_REASON_RDTSC
, "RDTSC" }, \

110 { 
EXIT_REASON_VMCALL
, "VMCALL" }, \

111 { 
EXIT_REASON_VMCLEAR
, "VMCLEAR" }, \

112 { 
EXIT_REASON_VMLAUNCH
, "VMLAUNCH" }, \

113 { 
EXIT_REASON_VMPTRLD
, "VMPTRLD" }, \

114 { 
EXIT_REASON_VMPTRST
, "VMPTRST" }, \

115 { 
EXIT_REASON_VMREAD
, "VMREAD" }, \

116 { 
EXIT_REASON_VMRESUME
, "VMRESUME" }, \

117 { 
EXIT_REASON_VMWRITE
, "VMWRITE" }, \

118 { 
EXIT_REASON_VMOFF
, "VMOFF" }, \

119 { 
EXIT_REASON_VMON
, "VMON" }, \

120 { 
EXIT_REASON_CR_ACCESS
, "CR_ACCESS" }, \

121 { 
EXIT_REASON_DR_ACCESS
, "DR_ACCESS" }, \

122 { 
EXIT_REASON_IO_INSTRUCTION
, "IO_INSTRUCTION" }, \

123 { 
EXIT_REASON_MSR_READ
, "MSR_READ" }, \

124 { 
EXIT_REASON_MSR_WRITE
, "MSR_WRITE" }, \

125 { 
EXIT_REASON_INVALID_STATE
, "INVALID_STATE" }, \

126 { 
EXIT_REASON_MSR_LOAD_FAIL
, "MSR_LOAD_FAIL" }, \

127 { 
EXIT_REASON_MWAIT_INSTRUCTION
, "MWAIT_INSTRUCTION" }, \

128 { 
EXIT_REASON_MONITOR_TRAP_FLAG
, "MONITOR_TRAP_FLAG" }, \

129 { 
EXIT_REASON_MONITOR_INSTRUCTION
, "MONITOR_INSTRUCTION" }, \

130 { 
EXIT_REASON_PAUSE_INSTRUCTION
, "PAUSE_INSTRUCTION" }, \

131 { 
EXIT_REASON_MCE_DURING_VMENTRY
, "MCE_DURING_VMENTRY" }, \

132 { 
EXIT_REASON_TPR_BELOW_THRESHOLD
, "TPR_BELOW_THRESHOLD" }, \

133 { 
EXIT_REASON_APIC_ACCESS
, "APIC_ACCESS" }, \

134 { 
EXIT_REASON_EOI_INDUCED
, "EOI_INDUCED" }, \

135 { 
EXIT_REASON_GDTR_IDTR
, "GDTR_IDTR" }, \

136 { 
EXIT_REASON_LDTR_TR
, "LDTR_TR" }, \

137 { 
EXIT_REASON_EPT_VIOLATION
, "EPT_VIOLATION" }, \

138 { 
EXIT_REASON_EPT_MISCONFIG
, "EPT_MISCONFIG" }, \

139 { 
EXIT_REASON_INVEPT
, "INVEPT" }, \

140 { 
EXIT_REASON_RDTSCP
, "RDTSCP" }, \

141 { 
EXIT_REASON_PREEMPTION_TIMER
, "PREEMPTION_TIMER" }, \

142 { 
EXIT_REASON_INVVPID
, "INVVPID" }, \

143 { 
EXIT_REASON_WBINVD
, "WBINVD" }, \

144 { 
EXIT_REASON_XSETBV
, "XSETBV" }, \

145 { 
EXIT_REASON_APIC_WRITE
, "APIC_WRITE" }, \

146 { 
EXIT_REASON_RDRAND
, "RDRAND" }, \

147 { 
EXIT_REASON_INVPCID
, "INVPCID" }, \

148 { 
EXIT_REASON_VMFUNC
, "VMFUNC" }, \

149 { 
EXIT_REASON_ENCLS
, "ENCLS" }, \

150 { 
EXIT_REASON_RDSEED
, "RDSEED" }, \

151 { 
EXIT_REASON_PML_FULL
, "PML_FULL" }, \

152 { 
EXIT_REASON_XSAVES
, "XSAVES" }, \

153 { 
EXIT_REASON_XRSTORS
, "XRSTORS" }, \

154 { 
EXIT_REASON_UMWAIT
, "UMWAIT" }, \

155 { 
EXIT_REASON_TPAUSE
, "TPAUSE" }, \

156 { 
EXIT_REASON_BUS_LOCK
, "BUS_LOCK" }

	)

158 
	#VMX_EXIT_REASON_FLAGS
 \

159 { 
VMX_EXIT_REASONS_FAILED_VMENTRY
, "FAILED_VMENTRY" }

	)

161 
	#VMX_ABORT_SAVE_GUEST_MSR_FAIL
 1

	)

162 
	#VMX_ABORT_LOAD_HOST_PDPTE_FAIL
 2

	)

163 
	#VMX_ABORT_LOAD_HOST_MSR_FAIL
 4

	)

	@/usr/include/x86_64-linux-gnu/asm/vsyscall.h

2 #i‚de‡
_ASM_X86_VSYSCALL_H


3 
	#_ASM_X86_VSYSCALL_H


	)

5 
	evsysˇŒ_num
 {

6 
	m__NR_vgëtimeofday
,

7 
	m__NR_vtime
,

8 
	m__NR_vgë˝u
,

11 
	#VSYSCALL_ADDR
 (-10UL << 20)

	)

	@/usr/include/x86_64-linux-gnu/bits/a.out.h

1 #i‚de‡
__A_OUT_GNU_H__


5 #ifde‡
__x86_64__


9 
	#__NO_A_OUT_SUPPORT
 1

	)

	@/usr/include/x86_64-linux-gnu/bits/argp-ldbl.h

19 #i‚de‡
_ARGP_H


23 
	$__LDBL_REDIR_DECL
 (
¨gp_îr‹
)

24 
	`__LDBL_REDIR_DECL
 (
¨gp_Áûuª
)

	@/usr/include/x86_64-linux-gnu/bits/atomic_wide_counter.h

19 #i‚de‡
_BITS_ATOMIC_WIDE_COUNTER_H


20 
	#_BITS_ATOMIC_WIDE_COUNTER_H


	)

27 
__exãnsi⁄__
 
	m__vÆue64
;

30 
	m__low
;

31 
	m__high
;

32 } 
	m__vÆue32
;

33 } 
	t__©omic_wide_cou¡î
;

	@/usr/include/x86_64-linux-gnu/bits/byteswap.h

19 #i‡!
deföed
 
_BYTESWAP_H
 && !deföed 
_NETINET_IN_H
 && !deföed 
_ENDIAN_H


23 #i‚de‡
_BITS_BYTESWAP_H


24 
	#_BITS_BYTESWAP_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

30 
	#__bsw≠_c⁄°™t_16
(
x
) \

31 ((
__uöt16_t
Ë((((
x
Ë>> 8Ë& 0xffË| (((xË& 0xffË<< 8)))

	)

33 
__ölöe
 
__uöt16_t


34 
	$__bsw≠_16
 (
__uöt16_t
 
__bsx
)

36 #i‡
	`__GNUC_PREREQ
 (4, 8)

37  
	`__buûtö_bsw≠16
 (
__bsx
);

39  
	`__bsw≠_c⁄°™t_16
 (
__bsx
);

41 
	}
}

44 
	#__bsw≠_c⁄°™t_32
(
x
) \

45 ((((
x
) & 0xff000000u) >> 24) | (((x) & 0x00ff0000u) >> 8) \

46 | (((
x
Ë& 0x0000ff00uË<< 8Ë| (((xË& 0x000000ffuË<< 24))

	)

48 
__ölöe
 
__uöt32_t


49 
	$__bsw≠_32
 (
__uöt32_t
 
__bsx
)

51 #i‡
	`__GNUC_PREREQ
 (4, 3)

52  
	`__buûtö_bsw≠32
 (
__bsx
);

54  
	`__bsw≠_c⁄°™t_32
 (
__bsx
);

56 
	}
}

59 
	#__bsw≠_c⁄°™t_64
(
x
) \

60 ((((
x
) & 0xff00000000000000ull) >> 56) \

61 | (((
x
) & 0x00ff000000000000ull) >> 40) \

62 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

63 | (((
x
) & 0x000000ff00000000ull) >> 8) \

64 | (((
x
) & 0x00000000ff000000ull) << 8) \

65 | (((
x
) & 0x0000000000ff0000ull) << 24) \

66 | (((
x
) & 0x000000000000ff00ull) << 40) \

67 | (((
x
Ë& 0x00000000000000ffuŒË<< 56))

	)

69 
__exãnsi⁄__
 
__ölöe
 
__uöt64_t


70 
	$__bsw≠_64
 (
__uöt64_t
 
__bsx
)

72 #i‡
	`__GNUC_PREREQ
 (4, 3)

73  
	`__buûtö_bsw≠64
 (
__bsx
);

75  
	`__bsw≠_c⁄°™t_64
 (
__bsx
);

77 
	}
}

	@/usr/include/x86_64-linux-gnu/bits/cmathcalls.h

43 #i‚de‡
_COMPLEX_H


47 #i‚de‡
_MdoubÀ_com∂ex_


48 
	#_MdoubÀ_com∂ex_
 
_MdoubÀ_
 
_Com∂ex


	)

55 
__MATHCALL
 (
ˇcos
, (
_MdoubÀ_com∂ex_
 
__z
));

57 
__MATHCALL
 (
ˇsö
, (
_MdoubÀ_com∂ex_
 
__z
));

59 
__MATHCALL
 (
ˇèn
, (
_MdoubÀ_com∂ex_
 
__z
));

62 
__MATHCALL
 (
ccos
, (
_MdoubÀ_com∂ex_
 
__z
));

64 
__MATHCALL
 (
csö
, (
_MdoubÀ_com∂ex_
 
__z
));

66 
__MATHCALL
 (
˘™
, (
_MdoubÀ_com∂ex_
 
__z
));

72 
__MATHCALL
 (
ˇcosh
, (
_MdoubÀ_com∂ex_
 
__z
));

74 
__MATHCALL
 (
ˇsöh
, (
_MdoubÀ_com∂ex_
 
__z
));

76 
__MATHCALL
 (
ˇènh
, (
_MdoubÀ_com∂ex_
 
__z
));

79 
__MATHCALL
 (
ccosh
, (
_MdoubÀ_com∂ex_
 
__z
));

81 
__MATHCALL
 (
csöh
, (
_MdoubÀ_com∂ex_
 
__z
));

83 
__MATHCALL
 (
˘™h
, (
_MdoubÀ_com∂ex_
 
__z
));

89 
__MATHCALL
 (
˚xp
, (
_MdoubÀ_com∂ex_
 
__z
));

92 
__MATHCALL
 (
˛og
, (
_MdoubÀ_com∂ex_
 
__z
));

94 #ifde‡
__USE_GNU


97 
__MATHCALL
 (
˛og10
, (
_MdoubÀ_com∂ex_
 
__z
));

103 
__MATHCALL
 (
˝ow
, (
_MdoubÀ_com∂ex_
 
__x
, _MdoubÀ_com∂ex_ 
__y
));

106 
__MATHCALL
 (
csqπ
, (
_MdoubÀ_com∂ex_
 
__z
));

112 
__MATHDECL
 (
_MdoubÀ_
,
ˇbs
, (
_MdoubÀ_com∂ex_
 
__z
));

115 
__MATHDECL
 (
_MdoubÀ_
,
ˇrg
, (
_MdoubÀ_com∂ex_
 
__z
));

118 
__MATHCALL
 (
c⁄j
, (
_MdoubÀ_com∂ex_
 
__z
));

121 
__MATHCALL
 (
˝roj
, (
_MdoubÀ_com∂ex_
 
__z
));

127 
__MATHDECL
 (
_MdoubÀ_
,
cimag
, (
_MdoubÀ_com∂ex_
 
__z
));

130 
__MATHDECL
 (
_MdoubÀ_
,
¸ól
, (
_MdoubÀ_com∂ex_
 
__z
));

	@/usr/include/x86_64-linux-gnu/bits/confname.h

19 #i‚de‡
_UNISTD_H


26 
	m_PC_LINK_MAX
,

27 
	#_PC_LINK_MAX
 
_PC_LINK_MAX


	)

28 
	m_PC_MAX_CANON
,

29 
	#_PC_MAX_CANON
 
_PC_MAX_CANON


	)

30 
	m_PC_MAX_INPUT
,

31 
	#_PC_MAX_INPUT
 
_PC_MAX_INPUT


	)

32 
	m_PC_NAME_MAX
,

33 
	#_PC_NAME_MAX
 
_PC_NAME_MAX


	)

34 
	m_PC_PATH_MAX
,

35 
	#_PC_PATH_MAX
 
_PC_PATH_MAX


	)

36 
	m_PC_PIPE_BUF
,

37 
	#_PC_PIPE_BUF
 
_PC_PIPE_BUF


	)

38 
	m_PC_CHOWN_RESTRICTED
,

39 
	#_PC_CHOWN_RESTRICTED
 
_PC_CHOWN_RESTRICTED


	)

40 
	m_PC_NO_TRUNC
,

41 
	#_PC_NO_TRUNC
 
_PC_NO_TRUNC


	)

42 
	m_PC_VDISABLE
,

43 
	#_PC_VDISABLE
 
_PC_VDISABLE


	)

44 
	m_PC_SYNC_IO
,

45 
	#_PC_SYNC_IO
 
_PC_SYNC_IO


	)

46 
	m_PC_ASYNC_IO
,

47 
	#_PC_ASYNC_IO
 
_PC_ASYNC_IO


	)

48 
	m_PC_PRIO_IO
,

49 
	#_PC_PRIO_IO
 
_PC_PRIO_IO


	)

50 
	m_PC_SOCK_MAXBUF
,

51 
	#_PC_SOCK_MAXBUF
 
_PC_SOCK_MAXBUF


	)

52 
	m_PC_FILESIZEBITS
,

53 
	#_PC_FILESIZEBITS
 
_PC_FILESIZEBITS


	)

54 
	m_PC_REC_INCR_XFER_SIZE
,

55 
	#_PC_REC_INCR_XFER_SIZE
 
_PC_REC_INCR_XFER_SIZE


	)

56 
	m_PC_REC_MAX_XFER_SIZE
,

57 
	#_PC_REC_MAX_XFER_SIZE
 
_PC_REC_MAX_XFER_SIZE


	)

58 
	m_PC_REC_MIN_XFER_SIZE
,

59 
	#_PC_REC_MIN_XFER_SIZE
 
_PC_REC_MIN_XFER_SIZE


	)

60 
	m_PC_REC_XFER_ALIGN
,

61 
	#_PC_REC_XFER_ALIGN
 
_PC_REC_XFER_ALIGN


	)

62 
	m_PC_ALLOC_SIZE_MIN
,

63 
	#_PC_ALLOC_SIZE_MIN
 
_PC_ALLOC_SIZE_MIN


	)

64 
	m_PC_SYMLINK_MAX
,

65 
	#_PC_SYMLINK_MAX
 
_PC_SYMLINK_MAX


	)

66 
	m_PC_2_SYMLINKS


67 
	#_PC_2_SYMLINKS
 
_PC_2_SYMLINKS


	)

73 
	m_SC_ARG_MAX
,

74 
	#_SC_ARG_MAX
 
_SC_ARG_MAX


	)

75 
	m_SC_CHILD_MAX
,

76 
	#_SC_CHILD_MAX
 
_SC_CHILD_MAX


	)

77 
	m_SC_CLK_TCK
,

78 
	#_SC_CLK_TCK
 
_SC_CLK_TCK


	)

79 
	m_SC_NGROUPS_MAX
,

80 
	#_SC_NGROUPS_MAX
 
_SC_NGROUPS_MAX


	)

81 
	m_SC_OPEN_MAX
,

82 
	#_SC_OPEN_MAX
 
_SC_OPEN_MAX


	)

83 
	m_SC_STREAM_MAX
,

84 
	#_SC_STREAM_MAX
 
_SC_STREAM_MAX


	)

85 
	m_SC_TZNAME_MAX
,

86 
	#_SC_TZNAME_MAX
 
_SC_TZNAME_MAX


	)

87 
	m_SC_JOB_CONTROL
,

88 
	#_SC_JOB_CONTROL
 
_SC_JOB_CONTROL


	)

89 
	m_SC_SAVED_IDS
,

90 
	#_SC_SAVED_IDS
 
_SC_SAVED_IDS


	)

91 
	m_SC_REALTIME_SIGNALS
,

92 
	#_SC_REALTIME_SIGNALS
 
_SC_REALTIME_SIGNALS


	)

93 
	m_SC_PRIORITY_SCHEDULING
,

94 
	#_SC_PRIORITY_SCHEDULING
 
_SC_PRIORITY_SCHEDULING


	)

95 
	m_SC_TIMERS
,

96 
	#_SC_TIMERS
 
_SC_TIMERS


	)

97 
	m_SC_ASYNCHRONOUS_IO
,

98 
	#_SC_ASYNCHRONOUS_IO
 
_SC_ASYNCHRONOUS_IO


	)

99 
	m_SC_PRIORITIZED_IO
,

100 
	#_SC_PRIORITIZED_IO
 
_SC_PRIORITIZED_IO


	)

101 
	m_SC_SYNCHRONIZED_IO
,

102 
	#_SC_SYNCHRONIZED_IO
 
_SC_SYNCHRONIZED_IO


	)

103 
	m_SC_FSYNC
,

104 
	#_SC_FSYNC
 
_SC_FSYNC


	)

105 
	m_SC_MAPPED_FILES
,

106 
	#_SC_MAPPED_FILES
 
_SC_MAPPED_FILES


	)

107 
	m_SC_MEMLOCK
,

108 
	#_SC_MEMLOCK
 
_SC_MEMLOCK


	)

109 
	m_SC_MEMLOCK_RANGE
,

110 
	#_SC_MEMLOCK_RANGE
 
_SC_MEMLOCK_RANGE


	)

111 
	m_SC_MEMORY_PROTECTION
,

112 
	#_SC_MEMORY_PROTECTION
 
_SC_MEMORY_PROTECTION


	)

113 
	m_SC_MESSAGE_PASSING
,

114 
	#_SC_MESSAGE_PASSING
 
_SC_MESSAGE_PASSING


	)

115 
	m_SC_SEMAPHORES
,

116 
	#_SC_SEMAPHORES
 
_SC_SEMAPHORES


	)

117 
	m_SC_SHARED_MEMORY_OBJECTS
,

118 
	#_SC_SHARED_MEMORY_OBJECTS
 
_SC_SHARED_MEMORY_OBJECTS


	)

119 
	m_SC_AIO_LISTIO_MAX
,

120 
	#_SC_AIO_LISTIO_MAX
 
_SC_AIO_LISTIO_MAX


	)

121 
	m_SC_AIO_MAX
,

122 
	#_SC_AIO_MAX
 
_SC_AIO_MAX


	)

123 
	m_SC_AIO_PRIO_DELTA_MAX
,

124 
	#_SC_AIO_PRIO_DELTA_MAX
 
_SC_AIO_PRIO_DELTA_MAX


	)

125 
	m_SC_DELAYTIMER_MAX
,

126 
	#_SC_DELAYTIMER_MAX
 
_SC_DELAYTIMER_MAX


	)

127 
	m_SC_MQ_OPEN_MAX
,

128 
	#_SC_MQ_OPEN_MAX
 
_SC_MQ_OPEN_MAX


	)

129 
	m_SC_MQ_PRIO_MAX
,

130 
	#_SC_MQ_PRIO_MAX
 
_SC_MQ_PRIO_MAX


	)

131 
	m_SC_VERSION
,

132 
	#_SC_VERSION
 
_SC_VERSION


	)

133 
	m_SC_PAGESIZE
,

134 
	#_SC_PAGESIZE
 
_SC_PAGESIZE


	)

135 
	#_SC_PAGE_SIZE
 
_SC_PAGESIZE


	)

136 
	m_SC_RTSIG_MAX
,

137 
	#_SC_RTSIG_MAX
 
_SC_RTSIG_MAX


	)

138 
	m_SC_SEM_NSEMS_MAX
,

139 
	#_SC_SEM_NSEMS_MAX
 
_SC_SEM_NSEMS_MAX


	)

140 
	m_SC_SEM_VALUE_MAX
,

141 
	#_SC_SEM_VALUE_MAX
 
_SC_SEM_VALUE_MAX


	)

142 
	m_SC_SIGQUEUE_MAX
,

143 
	#_SC_SIGQUEUE_MAX
 
_SC_SIGQUEUE_MAX


	)

144 
	m_SC_TIMER_MAX
,

145 
	#_SC_TIMER_MAX
 
_SC_TIMER_MAX


	)

149 
	m_SC_BC_BASE_MAX
,

150 
	#_SC_BC_BASE_MAX
 
_SC_BC_BASE_MAX


	)

151 
	m_SC_BC_DIM_MAX
,

152 
	#_SC_BC_DIM_MAX
 
_SC_BC_DIM_MAX


	)

153 
	m_SC_BC_SCALE_MAX
,

154 
	#_SC_BC_SCALE_MAX
 
_SC_BC_SCALE_MAX


	)

155 
	m_SC_BC_STRING_MAX
,

156 
	#_SC_BC_STRING_MAX
 
_SC_BC_STRING_MAX


	)

157 
	m_SC_COLL_WEIGHTS_MAX
,

158 
	#_SC_COLL_WEIGHTS_MAX
 
_SC_COLL_WEIGHTS_MAX


	)

159 
	m_SC_EQUIV_CLASS_MAX
,

160 
	#_SC_EQUIV_CLASS_MAX
 
_SC_EQUIV_CLASS_MAX


	)

161 
	m_SC_EXPR_NEST_MAX
,

162 
	#_SC_EXPR_NEST_MAX
 
_SC_EXPR_NEST_MAX


	)

163 
	m_SC_LINE_MAX
,

164 
	#_SC_LINE_MAX
 
_SC_LINE_MAX


	)

165 
	m_SC_RE_DUP_MAX
,

166 
	#_SC_RE_DUP_MAX
 
_SC_RE_DUP_MAX


	)

167 
	m_SC_CHARCLASS_NAME_MAX
,

168 
	#_SC_CHARCLASS_NAME_MAX
 
_SC_CHARCLASS_NAME_MAX


	)

170 
	m_SC_2_VERSION
,

171 
	#_SC_2_VERSION
 
_SC_2_VERSION


	)

172 
	m_SC_2_C_BIND
,

173 
	#_SC_2_C_BIND
 
_SC_2_C_BIND


	)

174 
	m_SC_2_C_DEV
,

175 
	#_SC_2_C_DEV
 
_SC_2_C_DEV


	)

176 
	m_SC_2_FORT_DEV
,

177 
	#_SC_2_FORT_DEV
 
_SC_2_FORT_DEV


	)

178 
	m_SC_2_FORT_RUN
,

179 
	#_SC_2_FORT_RUN
 
_SC_2_FORT_RUN


	)

180 
	m_SC_2_SW_DEV
,

181 
	#_SC_2_SW_DEV
 
_SC_2_SW_DEV


	)

182 
	m_SC_2_LOCALEDEF
,

183 
	#_SC_2_LOCALEDEF
 
_SC_2_LOCALEDEF


	)

185 
	m_SC_PII
,

186 
	#_SC_PII
 
_SC_PII


	)

187 
	m_SC_PII_XTI
,

188 
	#_SC_PII_XTI
 
_SC_PII_XTI


	)

189 
	m_SC_PII_SOCKET
,

190 
	#_SC_PII_SOCKET
 
_SC_PII_SOCKET


	)

191 
	m_SC_PII_INTERNET
,

192 
	#_SC_PII_INTERNET
 
_SC_PII_INTERNET


	)

193 
	m_SC_PII_OSI
,

194 
	#_SC_PII_OSI
 
_SC_PII_OSI


	)

195 
	m_SC_POLL
,

196 
	#_SC_POLL
 
_SC_POLL


	)

197 
	m_SC_SELECT
,

198 
	#_SC_SELECT
 
_SC_SELECT


	)

199 
	m_SC_UIO_MAXIOV
,

200 
	#_SC_UIO_MAXIOV
 
_SC_UIO_MAXIOV


	)

201 
	m_SC_IOV_MAX
 = 
_SC_UIO_MAXIOV
,

202 
	#_SC_IOV_MAX
 
_SC_IOV_MAX


	)

203 
	m_SC_PII_INTERNET_STREAM
,

204 
	#_SC_PII_INTERNET_STREAM
 
_SC_PII_INTERNET_STREAM


	)

205 
	m_SC_PII_INTERNET_DGRAM
,

206 
	#_SC_PII_INTERNET_DGRAM
 
_SC_PII_INTERNET_DGRAM


	)

207 
	m_SC_PII_OSI_COTS
,

208 
	#_SC_PII_OSI_COTS
 
_SC_PII_OSI_COTS


	)

209 
	m_SC_PII_OSI_CLTS
,

210 
	#_SC_PII_OSI_CLTS
 
_SC_PII_OSI_CLTS


	)

211 
	m_SC_PII_OSI_M
,

212 
	#_SC_PII_OSI_M
 
_SC_PII_OSI_M


	)

213 
	m_SC_T_IOV_MAX
,

214 
	#_SC_T_IOV_MAX
 
_SC_T_IOV_MAX


	)

217 
	m_SC_THREADS
,

218 
	#_SC_THREADS
 
_SC_THREADS


	)

219 
	m_SC_THREAD_SAFE_FUNCTIONS
,

220 
	#_SC_THREAD_SAFE_FUNCTIONS
 
_SC_THREAD_SAFE_FUNCTIONS


	)

221 
	m_SC_GETGR_R_SIZE_MAX
,

222 
	#_SC_GETGR_R_SIZE_MAX
 
_SC_GETGR_R_SIZE_MAX


	)

223 
	m_SC_GETPW_R_SIZE_MAX
,

224 
	#_SC_GETPW_R_SIZE_MAX
 
_SC_GETPW_R_SIZE_MAX


	)

225 
	m_SC_LOGIN_NAME_MAX
,

226 
	#_SC_LOGIN_NAME_MAX
 
_SC_LOGIN_NAME_MAX


	)

227 
	m_SC_TTY_NAME_MAX
,

228 
	#_SC_TTY_NAME_MAX
 
_SC_TTY_NAME_MAX


	)

229 
	m_SC_THREAD_DESTRUCTOR_ITERATIONS
,

230 
	#_SC_THREAD_DESTRUCTOR_ITERATIONS
 
_SC_THREAD_DESTRUCTOR_ITERATIONS


	)

231 
	m_SC_THREAD_KEYS_MAX
,

232 
	#_SC_THREAD_KEYS_MAX
 
_SC_THREAD_KEYS_MAX


	)

233 
	m_SC_THREAD_STACK_MIN
,

234 
	#_SC_THREAD_STACK_MIN
 
_SC_THREAD_STACK_MIN


	)

235 
	m_SC_THREAD_THREADS_MAX
,

236 
	#_SC_THREAD_THREADS_MAX
 
_SC_THREAD_THREADS_MAX


	)

237 
	m_SC_THREAD_ATTR_STACKADDR
,

238 
	#_SC_THREAD_ATTR_STACKADDR
 
_SC_THREAD_ATTR_STACKADDR


	)

239 
	m_SC_THREAD_ATTR_STACKSIZE
,

240 
	#_SC_THREAD_ATTR_STACKSIZE
 
_SC_THREAD_ATTR_STACKSIZE


	)

241 
	m_SC_THREAD_PRIORITY_SCHEDULING
,

242 
	#_SC_THREAD_PRIORITY_SCHEDULING
 
_SC_THREAD_PRIORITY_SCHEDULING


	)

243 
	m_SC_THREAD_PRIO_INHERIT
,

244 
	#_SC_THREAD_PRIO_INHERIT
 
_SC_THREAD_PRIO_INHERIT


	)

245 
	m_SC_THREAD_PRIO_PROTECT
,

246 
	#_SC_THREAD_PRIO_PROTECT
 
_SC_THREAD_PRIO_PROTECT


	)

247 
	m_SC_THREAD_PROCESS_SHARED
,

248 
	#_SC_THREAD_PROCESS_SHARED
 
_SC_THREAD_PROCESS_SHARED


	)

250 
	m_SC_NPROCESSORS_CONF
,

251 
	#_SC_NPROCESSORS_CONF
 
_SC_NPROCESSORS_CONF


	)

252 
	m_SC_NPROCESSORS_ONLN
,

253 
	#_SC_NPROCESSORS_ONLN
 
_SC_NPROCESSORS_ONLN


	)

254 
	m_SC_PHYS_PAGES
,

255 
	#_SC_PHYS_PAGES
 
_SC_PHYS_PAGES


	)

256 
	m_SC_AVPHYS_PAGES
,

257 
	#_SC_AVPHYS_PAGES
 
_SC_AVPHYS_PAGES


	)

258 
	m_SC_ATEXIT_MAX
,

259 
	#_SC_ATEXIT_MAX
 
_SC_ATEXIT_MAX


	)

260 
	m_SC_PASS_MAX
,

261 
	#_SC_PASS_MAX
 
_SC_PASS_MAX


	)

263 
	m_SC_XOPEN_VERSION
,

264 
	#_SC_XOPEN_VERSION
 
_SC_XOPEN_VERSION


	)

265 
	m_SC_XOPEN_XCU_VERSION
,

266 
	#_SC_XOPEN_XCU_VERSION
 
_SC_XOPEN_XCU_VERSION


	)

267 
	m_SC_XOPEN_UNIX
,

268 
	#_SC_XOPEN_UNIX
 
_SC_XOPEN_UNIX


	)

269 
	m_SC_XOPEN_CRYPT
,

270 
	#_SC_XOPEN_CRYPT
 
_SC_XOPEN_CRYPT


	)

271 
	m_SC_XOPEN_ENH_I18N
,

272 
	#_SC_XOPEN_ENH_I18N
 
_SC_XOPEN_ENH_I18N


	)

273 
	m_SC_XOPEN_SHM
,

274 
	#_SC_XOPEN_SHM
 
_SC_XOPEN_SHM


	)

276 
	m_SC_2_CHAR_TERM
,

277 
	#_SC_2_CHAR_TERM
 
_SC_2_CHAR_TERM


	)

278 
	m_SC_2_C_VERSION
,

279 
	#_SC_2_C_VERSION
 
_SC_2_C_VERSION


	)

280 
	m_SC_2_UPE
,

281 
	#_SC_2_UPE
 
_SC_2_UPE


	)

283 
	m_SC_XOPEN_XPG2
,

284 
	#_SC_XOPEN_XPG2
 
_SC_XOPEN_XPG2


	)

285 
	m_SC_XOPEN_XPG3
,

286 
	#_SC_XOPEN_XPG3
 
_SC_XOPEN_XPG3


	)

287 
	m_SC_XOPEN_XPG4
,

288 
	#_SC_XOPEN_XPG4
 
_SC_XOPEN_XPG4


	)

290 
	m_SC_CHAR_BIT
,

291 
	#_SC_CHAR_BIT
 
_SC_CHAR_BIT


	)

292 
	m_SC_CHAR_MAX
,

293 
	#_SC_CHAR_MAX
 
_SC_CHAR_MAX


	)

294 
	m_SC_CHAR_MIN
,

295 
	#_SC_CHAR_MIN
 
_SC_CHAR_MIN


	)

296 
	m_SC_INT_MAX
,

297 
	#_SC_INT_MAX
 
_SC_INT_MAX


	)

298 
	m_SC_INT_MIN
,

299 
	#_SC_INT_MIN
 
_SC_INT_MIN


	)

300 
	m_SC_LONG_BIT
,

301 
	#_SC_LONG_BIT
 
_SC_LONG_BIT


	)

302 
	m_SC_WORD_BIT
,

303 
	#_SC_WORD_BIT
 
_SC_WORD_BIT


	)

304 
	m_SC_MB_LEN_MAX
,

305 
	#_SC_MB_LEN_MAX
 
_SC_MB_LEN_MAX


	)

306 
	m_SC_NZERO
,

307 
	#_SC_NZERO
 
_SC_NZERO


	)

308 
	m_SC_SSIZE_MAX
,

309 
	#_SC_SSIZE_MAX
 
_SC_SSIZE_MAX


	)

310 
	m_SC_SCHAR_MAX
,

311 
	#_SC_SCHAR_MAX
 
_SC_SCHAR_MAX


	)

312 
	m_SC_SCHAR_MIN
,

313 
	#_SC_SCHAR_MIN
 
_SC_SCHAR_MIN


	)

314 
	m_SC_SHRT_MAX
,

315 
	#_SC_SHRT_MAX
 
_SC_SHRT_MAX


	)

316 
	m_SC_SHRT_MIN
,

317 
	#_SC_SHRT_MIN
 
_SC_SHRT_MIN


	)

318 
	m_SC_UCHAR_MAX
,

319 
	#_SC_UCHAR_MAX
 
_SC_UCHAR_MAX


	)

320 
	m_SC_UINT_MAX
,

321 
	#_SC_UINT_MAX
 
_SC_UINT_MAX


	)

322 
	m_SC_ULONG_MAX
,

323 
	#_SC_ULONG_MAX
 
_SC_ULONG_MAX


	)

324 
	m_SC_USHRT_MAX
,

325 
	#_SC_USHRT_MAX
 
_SC_USHRT_MAX


	)

327 
	m_SC_NL_ARGMAX
,

328 
	#_SC_NL_ARGMAX
 
_SC_NL_ARGMAX


	)

329 
	m_SC_NL_LANGMAX
,

330 
	#_SC_NL_LANGMAX
 
_SC_NL_LANGMAX


	)

331 
	m_SC_NL_MSGMAX
,

332 
	#_SC_NL_MSGMAX
 
_SC_NL_MSGMAX


	)

333 
	m_SC_NL_NMAX
,

334 
	#_SC_NL_NMAX
 
_SC_NL_NMAX


	)

335 
	m_SC_NL_SETMAX
,

336 
	#_SC_NL_SETMAX
 
_SC_NL_SETMAX


	)

337 
	m_SC_NL_TEXTMAX
,

338 
	#_SC_NL_TEXTMAX
 
_SC_NL_TEXTMAX


	)

340 
	m_SC_XBS5_ILP32_OFF32
,

341 
	#_SC_XBS5_ILP32_OFF32
 
_SC_XBS5_ILP32_OFF32


	)

342 
	m_SC_XBS5_ILP32_OFFBIG
,

343 
	#_SC_XBS5_ILP32_OFFBIG
 
_SC_XBS5_ILP32_OFFBIG


	)

344 
	m_SC_XBS5_LP64_OFF64
,

345 
	#_SC_XBS5_LP64_OFF64
 
_SC_XBS5_LP64_OFF64


	)

346 
	m_SC_XBS5_LPBIG_OFFBIG
,

347 
	#_SC_XBS5_LPBIG_OFFBIG
 
_SC_XBS5_LPBIG_OFFBIG


	)

349 
	m_SC_XOPEN_LEGACY
,

350 
	#_SC_XOPEN_LEGACY
 
_SC_XOPEN_LEGACY


	)

351 
	m_SC_XOPEN_REALTIME
,

352 
	#_SC_XOPEN_REALTIME
 
_SC_XOPEN_REALTIME


	)

353 
	m_SC_XOPEN_REALTIME_THREADS
,

354 
	#_SC_XOPEN_REALTIME_THREADS
 
_SC_XOPEN_REALTIME_THREADS


	)

356 
	m_SC_ADVISORY_INFO
,

357 
	#_SC_ADVISORY_INFO
 
_SC_ADVISORY_INFO


	)

358 
	m_SC_BARRIERS
,

359 
	#_SC_BARRIERS
 
_SC_BARRIERS


	)

360 
	m_SC_BASE
,

361 
	#_SC_BASE
 
_SC_BASE


	)

362 
	m_SC_C_LANG_SUPPORT
,

363 
	#_SC_C_LANG_SUPPORT
 
_SC_C_LANG_SUPPORT


	)

364 
	m_SC_C_LANG_SUPPORT_R
,

365 
	#_SC_C_LANG_SUPPORT_R
 
_SC_C_LANG_SUPPORT_R


	)

366 
	m_SC_CLOCK_SELECTION
,

367 
	#_SC_CLOCK_SELECTION
 
_SC_CLOCK_SELECTION


	)

368 
	m_SC_CPUTIME
,

369 
	#_SC_CPUTIME
 
_SC_CPUTIME


	)

370 
	m_SC_THREAD_CPUTIME
,

371 
	#_SC_THREAD_CPUTIME
 
_SC_THREAD_CPUTIME


	)

372 
	m_SC_DEVICE_IO
,

373 
	#_SC_DEVICE_IO
 
_SC_DEVICE_IO


	)

374 
	m_SC_DEVICE_SPECIFIC
,

375 
	#_SC_DEVICE_SPECIFIC
 
_SC_DEVICE_SPECIFIC


	)

376 
	m_SC_DEVICE_SPECIFIC_R
,

377 
	#_SC_DEVICE_SPECIFIC_R
 
_SC_DEVICE_SPECIFIC_R


	)

378 
	m_SC_FD_MGMT
,

379 
	#_SC_FD_MGMT
 
_SC_FD_MGMT


	)

380 
	m_SC_FIFO
,

381 
	#_SC_FIFO
 
_SC_FIFO


	)

382 
	m_SC_PIPE
,

383 
	#_SC_PIPE
 
_SC_PIPE


	)

384 
	m_SC_FILE_ATTRIBUTES
,

385 
	#_SC_FILE_ATTRIBUTES
 
_SC_FILE_ATTRIBUTES


	)

386 
	m_SC_FILE_LOCKING
,

387 
	#_SC_FILE_LOCKING
 
_SC_FILE_LOCKING


	)

388 
	m_SC_FILE_SYSTEM
,

389 
	#_SC_FILE_SYSTEM
 
_SC_FILE_SYSTEM


	)

390 
	m_SC_MONOTONIC_CLOCK
,

391 
	#_SC_MONOTONIC_CLOCK
 
_SC_MONOTONIC_CLOCK


	)

392 
	m_SC_MULTI_PROCESS
,

393 
	#_SC_MULTI_PROCESS
 
_SC_MULTI_PROCESS


	)

394 
	m_SC_SINGLE_PROCESS
,

395 
	#_SC_SINGLE_PROCESS
 
_SC_SINGLE_PROCESS


	)

396 
	m_SC_NETWORKING
,

397 
	#_SC_NETWORKING
 
_SC_NETWORKING


	)

398 
	m_SC_READER_WRITER_LOCKS
,

399 
	#_SC_READER_WRITER_LOCKS
 
_SC_READER_WRITER_LOCKS


	)

400 
	m_SC_SPIN_LOCKS
,

401 
	#_SC_SPIN_LOCKS
 
_SC_SPIN_LOCKS


	)

402 
	m_SC_REGEXP
,

403 
	#_SC_REGEXP
 
_SC_REGEXP


	)

404 
	m_SC_REGEX_VERSION
,

405 
	#_SC_REGEX_VERSION
 
_SC_REGEX_VERSION


	)

406 
	m_SC_SHELL
,

407 
	#_SC_SHELL
 
_SC_SHELL


	)

408 
	m_SC_SIGNALS
,

409 
	#_SC_SIGNALS
 
_SC_SIGNALS


	)

410 
	m_SC_SPAWN
,

411 
	#_SC_SPAWN
 
_SC_SPAWN


	)

412 
	m_SC_SPORADIC_SERVER
,

413 
	#_SC_SPORADIC_SERVER
 
_SC_SPORADIC_SERVER


	)

414 
	m_SC_THREAD_SPORADIC_SERVER
,

415 
	#_SC_THREAD_SPORADIC_SERVER
 
_SC_THREAD_SPORADIC_SERVER


	)

416 
	m_SC_SYSTEM_DATABASE
,

417 
	#_SC_SYSTEM_DATABASE
 
_SC_SYSTEM_DATABASE


	)

418 
	m_SC_SYSTEM_DATABASE_R
,

419 
	#_SC_SYSTEM_DATABASE_R
 
_SC_SYSTEM_DATABASE_R


	)

420 
	m_SC_TIMEOUTS
,

421 
	#_SC_TIMEOUTS
 
_SC_TIMEOUTS


	)

422 
	m_SC_TYPED_MEMORY_OBJECTS
,

423 
	#_SC_TYPED_MEMORY_OBJECTS
 
_SC_TYPED_MEMORY_OBJECTS


	)

424 
	m_SC_USER_GROUPS
,

425 
	#_SC_USER_GROUPS
 
_SC_USER_GROUPS


	)

426 
	m_SC_USER_GROUPS_R
,

427 
	#_SC_USER_GROUPS_R
 
_SC_USER_GROUPS_R


	)

428 
	m_SC_2_PBS
,

429 
	#_SC_2_PBS
 
_SC_2_PBS


	)

430 
	m_SC_2_PBS_ACCOUNTING
,

431 
	#_SC_2_PBS_ACCOUNTING
 
_SC_2_PBS_ACCOUNTING


	)

432 
	m_SC_2_PBS_LOCATE
,

433 
	#_SC_2_PBS_LOCATE
 
_SC_2_PBS_LOCATE


	)

434 
	m_SC_2_PBS_MESSAGE
,

435 
	#_SC_2_PBS_MESSAGE
 
_SC_2_PBS_MESSAGE


	)

436 
	m_SC_2_PBS_TRACK
,

437 
	#_SC_2_PBS_TRACK
 
_SC_2_PBS_TRACK


	)

438 
	m_SC_SYMLOOP_MAX
,

439 
	#_SC_SYMLOOP_MAX
 
_SC_SYMLOOP_MAX


	)

440 
	m_SC_STREAMS
,

441 
	#_SC_STREAMS
 
_SC_STREAMS


	)

442 
	m_SC_2_PBS_CHECKPOINT
,

443 
	#_SC_2_PBS_CHECKPOINT
 
_SC_2_PBS_CHECKPOINT


	)

445 
	m_SC_V6_ILP32_OFF32
,

446 
	#_SC_V6_ILP32_OFF32
 
_SC_V6_ILP32_OFF32


	)

447 
	m_SC_V6_ILP32_OFFBIG
,

448 
	#_SC_V6_ILP32_OFFBIG
 
_SC_V6_ILP32_OFFBIG


	)

449 
	m_SC_V6_LP64_OFF64
,

450 
	#_SC_V6_LP64_OFF64
 
_SC_V6_LP64_OFF64


	)

451 
	m_SC_V6_LPBIG_OFFBIG
,

452 
	#_SC_V6_LPBIG_OFFBIG
 
_SC_V6_LPBIG_OFFBIG


	)

454 
	m_SC_HOST_NAME_MAX
,

455 
	#_SC_HOST_NAME_MAX
 
_SC_HOST_NAME_MAX


	)

456 
	m_SC_TRACE
,

457 
	#_SC_TRACE
 
_SC_TRACE


	)

458 
	m_SC_TRACE_EVENT_FILTER
,

459 
	#_SC_TRACE_EVENT_FILTER
 
_SC_TRACE_EVENT_FILTER


	)

460 
	m_SC_TRACE_INHERIT
,

461 
	#_SC_TRACE_INHERIT
 
_SC_TRACE_INHERIT


	)

462 
	m_SC_TRACE_LOG
,

463 
	#_SC_TRACE_LOG
 
_SC_TRACE_LOG


	)

465 
	m_SC_LEVEL1_ICACHE_SIZE
,

466 
	#_SC_LEVEL1_ICACHE_SIZE
 
_SC_LEVEL1_ICACHE_SIZE


	)

467 
	m_SC_LEVEL1_ICACHE_ASSOC
,

468 
	#_SC_LEVEL1_ICACHE_ASSOC
 
_SC_LEVEL1_ICACHE_ASSOC


	)

469 
	m_SC_LEVEL1_ICACHE_LINESIZE
,

470 
	#_SC_LEVEL1_ICACHE_LINESIZE
 
_SC_LEVEL1_ICACHE_LINESIZE


	)

471 
	m_SC_LEVEL1_DCACHE_SIZE
,

472 
	#_SC_LEVEL1_DCACHE_SIZE
 
_SC_LEVEL1_DCACHE_SIZE


	)

473 
	m_SC_LEVEL1_DCACHE_ASSOC
,

474 
	#_SC_LEVEL1_DCACHE_ASSOC
 
_SC_LEVEL1_DCACHE_ASSOC


	)

475 
	m_SC_LEVEL1_DCACHE_LINESIZE
,

476 
	#_SC_LEVEL1_DCACHE_LINESIZE
 
_SC_LEVEL1_DCACHE_LINESIZE


	)

477 
	m_SC_LEVEL2_CACHE_SIZE
,

478 
	#_SC_LEVEL2_CACHE_SIZE
 
_SC_LEVEL2_CACHE_SIZE


	)

479 
	m_SC_LEVEL2_CACHE_ASSOC
,

480 
	#_SC_LEVEL2_CACHE_ASSOC
 
_SC_LEVEL2_CACHE_ASSOC


	)

481 
	m_SC_LEVEL2_CACHE_LINESIZE
,

482 
	#_SC_LEVEL2_CACHE_LINESIZE
 
_SC_LEVEL2_CACHE_LINESIZE


	)

483 
	m_SC_LEVEL3_CACHE_SIZE
,

484 
	#_SC_LEVEL3_CACHE_SIZE
 
_SC_LEVEL3_CACHE_SIZE


	)

485 
	m_SC_LEVEL3_CACHE_ASSOC
,

486 
	#_SC_LEVEL3_CACHE_ASSOC
 
_SC_LEVEL3_CACHE_ASSOC


	)

487 
	m_SC_LEVEL3_CACHE_LINESIZE
,

488 
	#_SC_LEVEL3_CACHE_LINESIZE
 
_SC_LEVEL3_CACHE_LINESIZE


	)

489 
	m_SC_LEVEL4_CACHE_SIZE
,

490 
	#_SC_LEVEL4_CACHE_SIZE
 
_SC_LEVEL4_CACHE_SIZE


	)

491 
	m_SC_LEVEL4_CACHE_ASSOC
,

492 
	#_SC_LEVEL4_CACHE_ASSOC
 
_SC_LEVEL4_CACHE_ASSOC


	)

493 
	m_SC_LEVEL4_CACHE_LINESIZE
,

494 
	#_SC_LEVEL4_CACHE_LINESIZE
 
_SC_LEVEL4_CACHE_LINESIZE


	)

497 
	m_SC_IPV6
 = 
_SC_LEVEL1_ICACHE_SIZE
 + 50,

498 
	#_SC_IPV6
 
_SC_IPV6


	)

499 
	m_SC_RAW_SOCKETS
,

500 
	#_SC_RAW_SOCKETS
 
_SC_RAW_SOCKETS


	)

502 
	m_SC_V7_ILP32_OFF32
,

503 
	#_SC_V7_ILP32_OFF32
 
_SC_V7_ILP32_OFF32


	)

504 
	m_SC_V7_ILP32_OFFBIG
,

505 
	#_SC_V7_ILP32_OFFBIG
 
_SC_V7_ILP32_OFFBIG


	)

506 
	m_SC_V7_LP64_OFF64
,

507 
	#_SC_V7_LP64_OFF64
 
_SC_V7_LP64_OFF64


	)

508 
	m_SC_V7_LPBIG_OFFBIG
,

509 
	#_SC_V7_LPBIG_OFFBIG
 
_SC_V7_LPBIG_OFFBIG


	)

511 
	m_SC_SS_REPL_MAX
,

512 
	#_SC_SS_REPL_MAX
 
_SC_SS_REPL_MAX


	)

514 
	m_SC_TRACE_EVENT_NAME_MAX
,

515 
	#_SC_TRACE_EVENT_NAME_MAX
 
_SC_TRACE_EVENT_NAME_MAX


	)

516 
	m_SC_TRACE_NAME_MAX
,

517 
	#_SC_TRACE_NAME_MAX
 
_SC_TRACE_NAME_MAX


	)

518 
	m_SC_TRACE_SYS_MAX
,

519 
	#_SC_TRACE_SYS_MAX
 
_SC_TRACE_SYS_MAX


	)

520 
	m_SC_TRACE_USER_EVENT_MAX
,

521 
	#_SC_TRACE_USER_EVENT_MAX
 
_SC_TRACE_USER_EVENT_MAX


	)

523 
	m_SC_XOPEN_STREAMS
,

524 
	#_SC_XOPEN_STREAMS
 
_SC_XOPEN_STREAMS


	)

526 
	m_SC_THREAD_ROBUST_PRIO_INHERIT
,

527 
	#_SC_THREAD_ROBUST_PRIO_INHERIT
 
_SC_THREAD_ROBUST_PRIO_INHERIT


	)

528 
	m_SC_THREAD_ROBUST_PRIO_PROTECT
,

529 
	#_SC_THREAD_ROBUST_PRIO_PROTECT
 
_SC_THREAD_ROBUST_PRIO_PROTECT


	)

531 
	m_SC_MINSIGSTKSZ
,

532 
	#_SC_MINSIGSTKSZ
 
_SC_MINSIGSTKSZ


	)

534 
	m_SC_SIGSTKSZ


535 
	#_SC_SIGSTKSZ
 
_SC_SIGSTKSZ


	)

541 
	m_CS_PATH
,

542 
	#_CS_PATH
 
_CS_PATH


	)

544 
	m_CS_V6_WIDTH_RESTRICTED_ENVS
,

545 
	#_CS_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

546 
	#_CS_POSIX_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

548 
	m_CS_GNU_LIBC_VERSION
,

549 
	#_CS_GNU_LIBC_VERSION
 
_CS_GNU_LIBC_VERSION


	)

550 
	m_CS_GNU_LIBPTHREAD_VERSION
,

551 
	#_CS_GNU_LIBPTHREAD_VERSION
 
_CS_GNU_LIBPTHREAD_VERSION


	)

553 
	m_CS_V5_WIDTH_RESTRICTED_ENVS
,

554 
	#_CS_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

555 
	#_CS_POSIX_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

557 
	m_CS_V7_WIDTH_RESTRICTED_ENVS
,

558 
	#_CS_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

559 
	#_CS_POSIX_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

561 
	m_CS_LFS_CFLAGS
 = 1000,

562 
	#_CS_LFS_CFLAGS
 
_CS_LFS_CFLAGS


	)

563 
	m_CS_LFS_LDFLAGS
,

564 
	#_CS_LFS_LDFLAGS
 
_CS_LFS_LDFLAGS


	)

565 
	m_CS_LFS_LIBS
,

566 
	#_CS_LFS_LIBS
 
_CS_LFS_LIBS


	)

567 
	m_CS_LFS_LINTFLAGS
,

568 
	#_CS_LFS_LINTFLAGS
 
_CS_LFS_LINTFLAGS


	)

569 
	m_CS_LFS64_CFLAGS
,

570 
	#_CS_LFS64_CFLAGS
 
_CS_LFS64_CFLAGS


	)

571 
	m_CS_LFS64_LDFLAGS
,

572 
	#_CS_LFS64_LDFLAGS
 
_CS_LFS64_LDFLAGS


	)

573 
	m_CS_LFS64_LIBS
,

574 
	#_CS_LFS64_LIBS
 
_CS_LFS64_LIBS


	)

575 
	m_CS_LFS64_LINTFLAGS
,

576 
	#_CS_LFS64_LINTFLAGS
 
_CS_LFS64_LINTFLAGS


	)

578 
	m_CS_XBS5_ILP32_OFF32_CFLAGS
 = 1100,

579 
	#_CS_XBS5_ILP32_OFF32_CFLAGS
 
_CS_XBS5_ILP32_OFF32_CFLAGS


	)

580 
	m_CS_XBS5_ILP32_OFF32_LDFLAGS
,

581 
	#_CS_XBS5_ILP32_OFF32_LDFLAGS
 
_CS_XBS5_ILP32_OFF32_LDFLAGS


	)

582 
	m_CS_XBS5_ILP32_OFF32_LIBS
,

583 
	#_CS_XBS5_ILP32_OFF32_LIBS
 
_CS_XBS5_ILP32_OFF32_LIBS


	)

584 
	m_CS_XBS5_ILP32_OFF32_LINTFLAGS
,

585 
	#_CS_XBS5_ILP32_OFF32_LINTFLAGS
 
_CS_XBS5_ILP32_OFF32_LINTFLAGS


	)

586 
	m_CS_XBS5_ILP32_OFFBIG_CFLAGS
,

587 
	#_CS_XBS5_ILP32_OFFBIG_CFLAGS
 
_CS_XBS5_ILP32_OFFBIG_CFLAGS


	)

588 
	m_CS_XBS5_ILP32_OFFBIG_LDFLAGS
,

589 
	#_CS_XBS5_ILP32_OFFBIG_LDFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LDFLAGS


	)

590 
	m_CS_XBS5_ILP32_OFFBIG_LIBS
,

591 
	#_CS_XBS5_ILP32_OFFBIG_LIBS
 
_CS_XBS5_ILP32_OFFBIG_LIBS


	)

592 
	m_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
,

593 
	#_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LINTFLAGS


	)

594 
	m_CS_XBS5_LP64_OFF64_CFLAGS
,

595 
	#_CS_XBS5_LP64_OFF64_CFLAGS
 
_CS_XBS5_LP64_OFF64_CFLAGS


	)

596 
	m_CS_XBS5_LP64_OFF64_LDFLAGS
,

597 
	#_CS_XBS5_LP64_OFF64_LDFLAGS
 
_CS_XBS5_LP64_OFF64_LDFLAGS


	)

598 
	m_CS_XBS5_LP64_OFF64_LIBS
,

599 
	#_CS_XBS5_LP64_OFF64_LIBS
 
_CS_XBS5_LP64_OFF64_LIBS


	)

600 
	m_CS_XBS5_LP64_OFF64_LINTFLAGS
,

601 
	#_CS_XBS5_LP64_OFF64_LINTFLAGS
 
_CS_XBS5_LP64_OFF64_LINTFLAGS


	)

602 
	m_CS_XBS5_LPBIG_OFFBIG_CFLAGS
,

603 
	#_CS_XBS5_LPBIG_OFFBIG_CFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_CFLAGS


	)

604 
	m_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
,

605 
	#_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LDFLAGS


	)

606 
	m_CS_XBS5_LPBIG_OFFBIG_LIBS
,

607 
	#_CS_XBS5_LPBIG_OFFBIG_LIBS
 
_CS_XBS5_LPBIG_OFFBIG_LIBS


	)

608 
	m_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
,

609 
	#_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS


	)

611 
	m_CS_POSIX_V6_ILP32_OFF32_CFLAGS
,

612 
	#_CS_POSIX_V6_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_CFLAGS


	)

613 
	m_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
,

614 
	#_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LDFLAGS


	)

615 
	m_CS_POSIX_V6_ILP32_OFF32_LIBS
,

616 
	#_CS_POSIX_V6_ILP32_OFF32_LIBS
 
_CS_POSIX_V6_ILP32_OFF32_LIBS


	)

617 
	m_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
,

618 
	#_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS


	)

619 
	m_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
,

620 
	#_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS


	)

621 
	m_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
,

622 
	#_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS


	)

623 
	m_CS_POSIX_V6_ILP32_OFFBIG_LIBS
,

624 
	#_CS_POSIX_V6_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V6_ILP32_OFFBIG_LIBS


	)

625 
	m_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
,

626 
	#_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS


	)

627 
	m_CS_POSIX_V6_LP64_OFF64_CFLAGS
,

628 
	#_CS_POSIX_V6_LP64_OFF64_CFLAGS
 
_CS_POSIX_V6_LP64_OFF64_CFLAGS


	)

629 
	m_CS_POSIX_V6_LP64_OFF64_LDFLAGS
,

630 
	#_CS_POSIX_V6_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LDFLAGS


	)

631 
	m_CS_POSIX_V6_LP64_OFF64_LIBS
,

632 
	#_CS_POSIX_V6_LP64_OFF64_LIBS
 
_CS_POSIX_V6_LP64_OFF64_LIBS


	)

633 
	m_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
,

634 
	#_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LINTFLAGS


	)

635 
	m_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
,

636 
	#_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS


	)

637 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
,

638 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS


	)

639 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
,

640 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LIBS


	)

641 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
,

642 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS


	)

644 
	m_CS_POSIX_V7_ILP32_OFF32_CFLAGS
,

645 
	#_CS_POSIX_V7_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_CFLAGS


	)

646 
	m_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
,

647 
	#_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LDFLAGS


	)

648 
	m_CS_POSIX_V7_ILP32_OFF32_LIBS
,

649 
	#_CS_POSIX_V7_ILP32_OFF32_LIBS
 
_CS_POSIX_V7_ILP32_OFF32_LIBS


	)

650 
	m_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
,

651 
	#_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS


	)

652 
	m_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
,

653 
	#_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS


	)

654 
	m_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
,

655 
	#_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS


	)

656 
	m_CS_POSIX_V7_ILP32_OFFBIG_LIBS
,

657 
	#_CS_POSIX_V7_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V7_ILP32_OFFBIG_LIBS


	)

658 
	m_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
,

659 
	#_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS


	)

660 
	m_CS_POSIX_V7_LP64_OFF64_CFLAGS
,

661 
	#_CS_POSIX_V7_LP64_OFF64_CFLAGS
 
_CS_POSIX_V7_LP64_OFF64_CFLAGS


	)

662 
	m_CS_POSIX_V7_LP64_OFF64_LDFLAGS
,

663 
	#_CS_POSIX_V7_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LDFLAGS


	)

664 
	m_CS_POSIX_V7_LP64_OFF64_LIBS
,

665 
	#_CS_POSIX_V7_LP64_OFF64_LIBS
 
_CS_POSIX_V7_LP64_OFF64_LIBS


	)

666 
	m_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
,

667 
	#_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LINTFLAGS


	)

668 
	m_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
,

669 
	#_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS


	)

670 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
,

671 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS


	)

672 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
,

673 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LIBS


	)

674 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
,

675 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS


	)

677 
	m_CS_V6_ENV
,

678 
	#_CS_V6_ENV
 
_CS_V6_ENV


	)

679 
	m_CS_V7_ENV


680 
	#_CS_V7_ENV
 
_CS_V7_ENV


	)

	@/usr/include/x86_64-linux-gnu/bits/cpu-set.h

20 #i‚de‡
_BITS_CPU_SET_H


21 
	#_BITS_CPU_SET_H
 1

	)

23 #i‚de‡
_SCHED_H


28 
	#__CPU_SETSIZE
 1024

	)

29 
	#__NCPUBITS
 (8 *  (
__˝u_mask
))

	)

32 
__CPU_MASK_TYPE
 
	t__˝u_mask
;

35 
	#__CPUELT
(
˝u
Ë((˝uË/ 
__NCPUBITS
)

	)

36 
	#__CPUMASK
(
˝u
Ë((
__˝u_mask
Ë1 << ((˝uË% 
__NCPUBITS
))

	)

41 
__˝u_mask
 
	m__bôs
[
__CPU_SETSIZE
 / 
__NCPUBITS
];

42 } 
	t˝u_£t_t
;

45 #i‡
__GNUC_PREREQ
 (2, 91)

46 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

47 dÿ
	`__buûtö_mem£t
 (
˝u£ç
, '\0', 
£tsize
); 0)

	)

49 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

51 
size_t
 
__i
; \

52 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

53 
__˝u_mask
 *
__bôs
 = (
˝u£ç
)->__bits; \

54 
__i
 = 0; __ò< 
__imax
; ++__i) \

55 
__bôs
[
__i
] = 0; \

56 } 0)

	)

58 
	#__CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

59 (
__exãnsi⁄__
 \

60 ({ 
size_t
 
__˝u
 = (
˝u
); \

61 
__˝u
 / 8 < (
£tsize
) \

62 ? (((
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

63 |
	`__CPUMASK
 (
__˝u
)) \

64 : 0; }))

	)

65 
	#__CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

66 (
__exãnsi⁄__
 \

67 ({ 
size_t
 
__˝u
 = (
˝u
); \

68 
__˝u
 / 8 < (
£tsize
) \

69 ? (((
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

70 &~
	`__CPUMASK
 (
__˝u
)) \

71 : 0; }))

	)

72 
	#__CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

73 (
__exãnsi⁄__
 \

74 ({ 
size_t
 
__˝u
 = (
˝u
); \

75 
__˝u
 / 8 < (
£tsize
) \

76 ? ((((c⁄° 
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

77 & 
	`__CPUMASK
 (
__˝u
))) != 0 \

78 : 0; }))

	)

80 
	#__CPU_COUNT_S
(
£tsize
, 
˝u£ç
) \

81 
	`__sched_˝ucou¡
 (
£tsize
, 
˝u£ç
)

	)

83 #i‡
__GNUC_PREREQ
 (2, 91)

84 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

85 (
	`__buûtö_memcmp
 (
˝u£ç1
, 
˝u£ç2
, 
£tsize
Ë=0)

	)

87 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

88 (
__exãnsi⁄__
 \

89 ({ c⁄° 
__˝u_mask
 *
__¨r1
 = (
˝u£ç1
)->
__bôs
; \

90 c⁄° 
__˝u_mask
 *
__¨r2
 = (
˝u£ç2
)->
__bôs
; \

91 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

92 
size_t
 
__i
; \

93 
__i
 = 0; __ò< 
__imax
; ++__i) \

94 i‡(
__¨r1
[
__i
] !
__¨r2
[__i]) \

96 
__i
 =
__imax
; }))

	)

99 
	#__CPU_OP_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, 
›
) \

100 (
__exãnsi⁄__
 \

101 ({ 
˝u_£t_t
 *
__de°
 = (
de°£t
); \

102 c⁄° 
__˝u_mask
 *
__¨r1
 = (
§c£t1
)->
__bôs
; \

103 c⁄° 
__˝u_mask
 *
__¨r2
 = (
§c£t2
)->
__bôs
; \

104 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

105 
size_t
 
__i
; \

106 
__i
 = 0; __ò< 
__imax
; ++__i) \

107 ((
__˝u_mask
 *Ë
__de°
->
__bôs
)[
__i
] = 
__¨r1
[__i] 
›
 
__¨r2
[__i]; \

108 
__de°
; }))

	)

110 
	#__CPU_ALLOC_SIZE
(
cou¡
) \

111 ((((
cou¡
Ë+ 
__NCPUBITS
 - 1Ë/ __NCPUBITSË*  (
__˝u_mask
))

	)

112 
	#__CPU_ALLOC
(
cou¡
Ë
	`__sched_˝uÆloc
 (cou¡)

	)

113 
	#__CPU_FREE
(
˝u£t
Ë
	`__sched_˝u‰ì
 (˝u£t)

	)

115 
__BEGIN_DECLS


117 
	$__sched_˝ucou¡
 (
size_t
 
__£tsize
, c⁄° 
˝u_£t_t
 *
__£ç
)

118 
__THROW
;

119 
˝u_£t_t
 *
	$__sched_˝uÆloc
 (
size_t
 
__cou¡
Ë
__THROW
 
__wur
;

120 
	$__sched_˝u‰ì
 (
˝u_£t_t
 *
__£t
Ë
__THROW
;

122 
__END_DECLS


	@/usr/include/x86_64-linux-gnu/bits/dirent.h

18 #i‚de‡
_DIRENT_H


22 
	sdúít


24 #i‚de‡
__USE_FILE_OFFSET64


25 
__öo_t
 
	md_öo
;

26 
__off_t
 
	md_off
;

28 
__öo64_t
 
	md_öo
;

29 
__off64_t
 
	md_off
;

31 
	md_ª˛í
;

32 
	md_ty≥
;

33 
	md_«me
[256];

36 #ifde‡
__USE_LARGEFILE64


37 
	sdúít64


39 
__öo64_t
 
	md_öo
;

40 
__off64_t
 
	md_off
;

41 
	md_ª˛í
;

42 
	md_ty≥
;

43 
	md_«me
[256];

47 
	#d_fûío
 
d_öo


	)

49 #unde‡
_DIRENT_HAVE_D_NAMLEN


50 
	#_DIRENT_HAVE_D_RECLEN


	)

51 
	#_DIRENT_HAVE_D_OFF


	)

52 
	#_DIRENT_HAVE_D_TYPE


	)

54 #i‡
deföed
 
__OFF_T_MATCHES_OFF64_T
 && deföed 
__INO_T_MATCHES_INO64_T


56 
	#_DIRENT_MATCHES_DIRENT64
 1

	)

58 
	#_DIRENT_MATCHES_DIRENT64
 0

	)

	@/usr/include/x86_64-linux-gnu/bits/dirent_ext.h

19 #i‚de‡
_DIRENT_H


23 
	g__BEGIN_DECLS


25 #ifde‡
__USE_GNU


29 
__ssize_t
 
	$gëdíts64
 (
__fd
, *
__buf„r
, 
size_t
 
__Àngth
)

30 
__THROW
 
	`__n⁄nuŒ
 ((2));

33 
__END_DECLS


	@/usr/include/x86_64-linux-gnu/bits/dl_find_object.h

19 #i‚de‡
_DLFCN_H


23 #ifde‡
__x86_64__


24 
	#DLFO_STRUCT_HAS_EH_DBASE
 0

	)

26 
	#DLFO_STRUCT_HAS_EH_DBASE
 1

	)

28 
	#DLFO_STRUCT_HAS_EH_COUNT
 0

	)

29 
	#DLFO_EH_SEGMENT_TYPE
 
PT_GNU_EH_FRAME


	)

	@/usr/include/x86_64-linux-gnu/bits/dlfcn.h

19 #i‚de‡
_DLFCN_H


24 
	#RTLD_LAZY
 0x00001

	)

25 
	#RTLD_NOW
 0x00002

	)

26 
	#RTLD_BINDING_MASK
 0x3

	)

27 
	#RTLD_NOLOAD
 0x00004

	)

28 
	#RTLD_DEEPBIND
 0x00008

	)

33 
	#RTLD_GLOBAL
 0x00100

	)

38 
	#RTLD_LOCAL
 0

	)

41 
	#RTLD_NODELETE
 0x01000

	)

43 #ifde‡
__USE_GNU


54 
	#DL_CALL_FCT
(
f˘p
, 
¨gs
) \

55 (
	`_dl_mcou¡_wøµî_check
 ((*Ë(
f˘p
)), (*(f˘p)Ë
¨gs
)

	)

57 
__BEGIN_DECLS


60 
	$_dl_mcou¡_wøµî_check
 (*
__£lÂc
Ë
__THROW
;

62 
__END_DECLS


	@/usr/include/x86_64-linux-gnu/bits/elfclass.h

5 #i‚de‡
_LINK_H


9 
	~<bôs/w‹dsize.h
>

11 
	#__ELF_NATIVE_CLASS
 
__WORDSIZE


	)

14 
uöt32_t
 
	tElf_Symndx
;

	@/usr/include/x86_64-linux-gnu/bits/endian.h

19 #i‚de‡
_BITS_ENDIAN_H


20 
	#_BITS_ENDIAN_H
 1

	)

30 
	#__LITTLE_ENDIAN
 1234

	)

31 
	#__BIG_ENDIAN
 4321

	)

32 
	#__PDP_ENDIAN
 3412

	)

35 
	~<bôs/ídü¬ess.h
>

39 #i‚de‡
__FLOAT_WORD_ORDER


40 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

43 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


44 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

45 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


46 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

	@/usr/include/x86_64-linux-gnu/bits/endianness.h

1 #i‚de‡
_BITS_ENDIANNESS_H


2 
	#_BITS_ENDIANNESS_H
 1

	)

4 #i‚de‡
_BITS_ENDIAN_H


9 
	#__BYTE_ORDER
 
__LITTLE_ENDIAN


	)

	@/usr/include/x86_64-linux-gnu/bits/environments.h

18 #i‚de‡
_UNISTD_H


22 
	~<bôs/w‹dsize.h
>

42 #i‡
__WORDSIZE
 == 64

56 
	#_POSIX_V7_LPBIG_OFFBIG
 -1

	)

57 
	#_POSIX_V6_LPBIG_OFFBIG
 -1

	)

58 
	#_XBS5_LPBIG_OFFBIG
 -1

	)

61 
	#_POSIX_V7_LP64_OFF64
 1

	)

62 
	#_POSIX_V6_LP64_OFF64
 1

	)

63 
	#_XBS5_LP64_OFF64
 1

	)

69 
	#_POSIX_V7_ILP32_OFFBIG
 1

	)

70 
	#_POSIX_V6_ILP32_OFFBIG
 1

	)

71 
	#_XBS5_ILP32_OFFBIG
 1

	)

73 #i‚de‡
__x86_64__


75 
	#_POSIX_V7_ILP32_OFF32
 1

	)

76 
	#_POSIX_V6_ILP32_OFF32
 1

	)

77 
	#_XBS5_ILP32_OFF32
 1

	)

95 
	#__ILP32_OFF32_CFLAGS
 "-m32"

	)

96 
	#__ILP32_OFF32_LDFLAGS
 "-m32"

	)

97 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


98 
	#__ILP32_OFFBIG_CFLAGS
 "-mx32"

	)

99 
	#__ILP32_OFFBIG_LDFLAGS
 "-mx32"

	)

101 
	#__ILP32_OFFBIG_CFLAGS
 "-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64"

	)

102 
	#__ILP32_OFFBIG_LDFLAGS
 "-m32"

	)

104 
	#__LP64_OFF64_CFLAGS
 "-m64"

	)

105 
	#__LP64_OFF64_LDFLAGS
 "-m64"

	)

	@/usr/include/x86_64-linux-gnu/bits/epoll.h

18 #i‚def 
_SYS_EPOLL_H


25 
	mEPOLL_CLOEXEC
 = 02000000

26 
	#EPOLL_CLOEXEC
 
EPOLL_CLOEXEC


	)

29 
	#__EPOLL_PACKED
 
	`__©åibuã__
 ((
__∑cked__
))

	)

	@/usr/include/x86_64-linux-gnu/bits/err-ldbl.h

19 #i‚de‡
_ERR_H


23 
	$__LDBL_REDIR_DECL
 (
w¨n
)

24 
	$__LDBL_REDIR_DECL
 (
vw¨n
)

25 
	$__LDBL_REDIR_DECL
 (
w¨nx
)

26 
	$__LDBL_REDIR_DECL
 (
vw¨nx
)

27 
	$__LDBL_REDIR_DECL
 (
îr
)

28 
	$__LDBL_REDIR_DECL
 (
vîr
)

29 
	$__LDBL_REDIR_DECL
 (
îrx
)

30 
	`__LDBL_REDIR_DECL
 (
vîrx
)

	@/usr/include/x86_64-linux-gnu/bits/errno.h

19 #i‚de‡
_BITS_ERRNO_H


20 
	#_BITS_ERRNO_H
 1

	)

22 #i‡!
deföed
 
_ERRNO_H


26 
	~<löux/î∫o.h
>

29 #i‚de‡
ENOTSUP


30 
	#ENOTSUP
 
EOPNOTSUPP


	)

33 #i‚de‡
ECANCELED


34 
	#ECANCELED
 125

	)

37 #i‚de‡
EOWNERDEAD


38 
	#EOWNERDEAD
 130

	)

41 #i‚de‡
ENOTRECOVERABLE


42 
	#ENOTRECOVERABLE
 131

	)

45 #i‚de‡
ERFKILL


46 
	#ERFKILL
 132

	)

49 #i‚de‡
EHWPOISON


50 
	#EHWPOISON
 133

	)

	@/usr/include/x86_64-linux-gnu/bits/error-ldbl.h

19 #i‚de‡
_ERROR_H


23 
	$__LDBL_REDIR_DECL
 (
îr‹
)

24 
	`__LDBL_REDIR_DECL
 (
îr‹_©_löe
)

	@/usr/include/x86_64-linux-gnu/bits/error.h

19 #i‚def 
_ERROR_H


24 
__REDIRECT
 (
__îr‹_Æüs
, (
__°©us
, 
__î∫um
,

25 c⁄° *
__f‹m©
, ...),

26 
îr‹
)

27 
__©åibuã__
 ((
__f‹m©__
 (
__¥ötf__
, 3, 4)));

28 
__REDIRECT
 (
__îr‹_n‹ëu∫
, (
__°©us
, 
__î∫um
,

29 c⁄° *
__f‹m©
, ...),

30 
îr‹
)

31 
__©åibuã__
 ((
__n‹ëu∫__
, 
__f‹m©__
 (
__¥ötf__
, 3, 4)));

36 
__exã∫_Æways_ölöe
 

37 
	$îr‹
 (
__°©us
, 
__î∫um
, c⁄° *
__f‹m©
, ...)

39 i‡(
	`__buûtö_c⁄°™t_p
 (
__°©us
) && __status != 0)

40 
	`__îr‹_n‹ëu∫
 (
__°©us
, 
__î∫um
, 
__f‹m©
, 
	`__va_¨g_∑ck
 ());

42 
	`__îr‹_Æüs
 (
__°©us
, 
__î∫um
, 
__f‹m©
, 
	`__va_¨g_∑ck
 ());

43 
	}
}

46 
__REDIRECT
 (
__îr‹_©_löe_Æüs
, (
__°©us
, 
__î∫um
,

47 c⁄° *
__‚ame
,

48 
__löe
,

49 c⁄° *
__f‹m©
, ...),

50 
îr‹_©_löe
)

51 
__©åibuã__
 ((
__f‹m©__
 (
__¥ötf__
, 5, 6)));

52 
__REDIRECT
 (
__îr‹_©_löe_n‹ëu∫
, (
__°©us
, 
__î∫um
,

53 c⁄° *
__‚ame
,

54 
__löe
,

55 c⁄° *
__f‹m©
,

57 
îr‹_©_löe
)

58 
__©åibuã__
 ((
__n‹ëu∫__
, 
__f‹m©__
 (
__¥ötf__
, 5, 6)));

63 
__exã∫_Æways_ölöe
 

64 
	$îr‹_©_löe
 (
__°©us
, 
__î∫um
, c⁄° *
__‚ame
,

65 
__löe
, c⁄° *
__f‹m©
, ...)

67 i‡(
	`__buûtö_c⁄°™t_p
 (
__°©us
) && __status != 0)

68 
	`__îr‹_©_löe_n‹ëu∫
 (
__°©us
, 
__î∫um
, 
__‚ame
, 
__löe
, 
__f‹m©
,

69 
	`__va_¨g_∑ck
 ());

71 
	`__îr‹_©_löe_Æüs
 (
__°©us
, 
__î∫um
, 
__‚ame
, 
__löe
,

72 
__f‹m©
, 
	`__va_¨g_∑ck
 ());

73 
	}
}

	@/usr/include/x86_64-linux-gnu/bits/eventfd.h

18 #i‚def 
_SYS_EVENTFD_H


25 
	mEFD_SEMAPHORE
 = 00000001,

26 
	#EFD_SEMAPHORE
 
EFD_SEMAPHORE


	)

27 
	mEFD_CLOEXEC
 = 02000000,

28 
	#EFD_CLOEXEC
 
EFD_CLOEXEC


	)

29 
	mEFD_NONBLOCK
 = 00004000

30 
	#EFD_NONBLOCK
 
EFD_NONBLOCK


	)

	@/usr/include/x86_64-linux-gnu/bits/fcntl-linux.h

19 #i‚def 
_FCNTL_H


37 #ifde‡
__USE_GNU


38 
	~<bôs/ty≥s/°ru˘_iovec.h
>

42 
	#O_ACCMODE
 0003

	)

43 
	#O_RDONLY
 00

	)

44 
	#O_WRONLY
 01

	)

45 
	#O_RDWR
 02

	)

46 #i‚de‡
O_CREAT


47 
	#O_CREAT
 0100

	)

49 #i‚de‡
O_EXCL


50 
	#O_EXCL
 0200

	)

52 #i‚de‡
O_NOCTTY


53 
	#O_NOCTTY
 0400

	)

55 #i‚de‡
O_TRUNC


56 
	#O_TRUNC
 01000

	)

58 #i‚de‡
O_APPEND


59 
	#O_APPEND
 02000

	)

61 #i‚de‡
O_NONBLOCK


62 
	#O_NONBLOCK
 04000

	)

64 #i‚de‡
O_NDELAY


65 
	#O_NDELAY
 
O_NONBLOCK


	)

67 #i‚de‡
O_SYNC


68 
	#O_SYNC
 04010000

	)

70 
	#O_FSYNC
 
O_SYNC


	)

71 #i‚de‡
O_ASYNC


72 
	#O_ASYNC
 020000

	)

74 #i‚de‡
__O_LARGEFILE


75 
	#__O_LARGEFILE
 0100000

	)

78 #i‚de‡
__O_DIRECTORY


79 
	#__O_DIRECTORY
 0200000

	)

81 #i‚de‡
__O_NOFOLLOW


82 
	#__O_NOFOLLOW
 0400000

	)

84 #i‚de‡
__O_CLOEXEC


85 
	#__O_CLOEXEC
 02000000

	)

87 #i‚de‡
__O_DIRECT


88 
	#__O_DIRECT
 040000

	)

90 #i‚de‡
__O_NOATIME


91 
	#__O_NOATIME
 01000000

	)

93 #i‚de‡
__O_PATH


94 
	#__O_PATH
 010000000

	)

96 #i‚de‡
__O_DSYNC


97 
	#__O_DSYNC
 010000

	)

99 #i‚de‡
__O_TMPFILE


100 
	#__O_TMPFILE
 (020000000 | 
__O_DIRECTORY
)

	)

103 #i‚de‡
F_GETLK


104 #i‚de‡
__USE_FILE_OFFSET64


105 
	#F_GETLK
 5

	)

106 
	#F_SETLK
 6

	)

107 
	#F_SETLKW
 7

	)

109 
	#F_GETLK
 
F_GETLK64


	)

110 
	#F_SETLK
 
F_SETLK64


	)

111 
	#F_SETLKW
 
F_SETLKW64


	)

114 #i‚de‡
F_GETLK64


115 
	#F_GETLK64
 12

	)

116 
	#F_SETLK64
 13

	)

117 
	#F_SETLKW64
 14

	)

131 #ifde‡
__USE_GNU


132 
	#F_OFD_GETLK
 36

	)

133 
	#F_OFD_SETLK
 37

	)

134 
	#F_OFD_SETLKW
 38

	)

137 #ifde‡
__USE_LARGEFILE64


138 
	#O_LARGEFILE
 
__O_LARGEFILE


	)

141 #ifde‡
__USE_XOPEN2K8


142 
	#O_DIRECTORY
 
__O_DIRECTORY


	)

143 
	#O_NOFOLLOW
 
__O_NOFOLLOW


	)

144 
	#O_CLOEXEC
 
__O_CLOEXEC


	)

147 #ifde‡
__USE_GNU


148 
	#O_DIRECT
 
__O_DIRECT


	)

149 
	#O_NOATIME
 
__O_NOATIME


	)

150 
	#O_PATH
 
__O_PATH


	)

151 
	#O_TMPFILE
 
__O_TMPFILE


	)

157 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


158 
	#O_DSYNC
 
__O_DSYNC


	)

159 #i‡
deföed
 
__O_RSYNC


160 
	#O_RSYNC
 
__O_RSYNC


	)

162 
	#O_RSYNC
 
O_SYNC


	)

167 
	#F_DUPFD
 0

	)

168 
	#F_GETFD
 1

	)

169 
	#F_SETFD
 2

	)

170 
	#F_GETFL
 3

	)

171 
	#F_SETFL
 4

	)

173 #i‚de‡
__F_SETOWN


174 
	#__F_SETOWN
 8

	)

175 
	#__F_GETOWN
 9

	)

178 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


179 
	#F_SETOWN
 
__F_SETOWN


	)

180 
	#F_GETOWN
 
__F_GETOWN


	)

183 #i‚de‡
__F_SETSIG


184 
	#__F_SETSIG
 10

	)

185 
	#__F_GETSIG
 11

	)

187 #i‚de‡
__F_SETOWN_EX


188 
	#__F_SETOWN_EX
 15

	)

189 
	#__F_GETOWN_EX
 16

	)

192 #ifde‡
__USE_GNU


193 
	#F_SETSIG
 
__F_SETSIG


	)

194 
	#F_GETSIG
 
__F_GETSIG


	)

195 
	#F_SETOWN_EX
 
__F_SETOWN_EX


	)

196 
	#F_GETOWN_EX
 
__F_GETOWN_EX


	)

199 #ifde‡
__USE_GNU


200 
	#F_SETLEASE
 1024

	)

201 
	#F_GETLEASE
 1025

	)

202 
	#F_NOTIFY
 1026

	)

203 
	#F_SETPIPE_SZ
 1031

	)

204 
	#F_GETPIPE_SZ
 1032

	)

205 
	#F_ADD_SEALS
 1033

	)

206 
	#F_GET_SEALS
 1034

	)

208 
	#F_GET_RW_HINT
 1035

	)

209 
	#F_SET_RW_HINT
 1036

	)

210 
	#F_GET_FILE_RW_HINT
 1037

	)

211 
	#F_SET_FILE_RW_HINT
 1038

	)

213 #ifde‡
__USE_XOPEN2K8


214 
	#F_DUPFD_CLOEXEC
 1030

	)

219 
	#FD_CLOEXEC
 1

	)

221 #i‚de‡
F_RDLCK


223 
	#F_RDLCK
 0

	)

224 
	#F_WRLCK
 1

	)

225 
	#F_UNLCK
 2

	)

230 #i‚de‡
F_EXLCK


231 
	#F_EXLCK
 4

	)

232 
	#F_SHLCK
 8

	)

235 #ifde‡
__USE_MISC


237 
	#LOCK_SH
 1

	)

238 
	#LOCK_EX
 2

	)

239 
	#LOCK_NB
 4

	)

241 
	#LOCK_UN
 8

	)

244 #ifde‡
__USE_GNU


245 
	#LOCK_MAND
 32

	)

246 
	#LOCK_READ
 64

	)

247 
	#LOCK_WRITE
 128

	)

248 
	#LOCK_RW
 192

	)

251 #ifde‡
__USE_GNU


253 
	#DN_ACCESS
 0x00000001

	)

254 
	#DN_MODIFY
 0x00000002

	)

255 
	#DN_CREATE
 0x00000004

	)

256 
	#DN_DELETE
 0x00000008

	)

257 
	#DN_RENAME
 0x00000010

	)

258 
	#DN_ATTRIB
 0x00000020

	)

259 
	#DN_MULTISHOT
 0x80000000

	)

263 #ifde‡
__USE_GNU


265 
	e__pid_ty≥


267 
	mF_OWNER_TID
 = 0,

268 
	mF_OWNER_PID
,

269 
	mF_OWNER_PGRP
,

270 
	mF_OWNER_GID
 = 
F_OWNER_PGRP


274 
	sf_ow√r_ex


276 
__pid_ty≥
 
	mty≥
;

277 
__pid_t
 
	mpid
;

281 #ifde‡
__USE_GNU


283 
	#F_SEAL_SEAL
 0x0001

	)

284 
	#F_SEAL_SHRINK
 0x0002

	)

285 
	#F_SEAL_GROW
 0x0004

	)

286 
	#F_SEAL_WRITE
 0x0008

	)

287 
	#F_SEAL_FUTURE_WRITE
 0x0010

	)

291 #ifde‡
__USE_GNU


293 
	#RWH_WRITE_LIFE_NOT_SET
 0

	)

294 
	#RWF_WRITE_LIFE_NOT_SET
 
RWH_WRITE_LIFE_NOT_SET


	)

295 
	#RWH_WRITE_LIFE_NONE
 1

	)

296 
	#RWH_WRITE_LIFE_SHORT
 2

	)

297 
	#RWH_WRITE_LIFE_MEDIUM
 3

	)

298 
	#RWH_WRITE_LIFE_LONG
 4

	)

299 
	#RWH_WRITE_LIFE_EXTREME
 5

	)

304 #ifdef 
__USE_MISC


305 
	#FAPPEND
 
O_APPEND


	)

306 
	#FFSYNC
 
O_FSYNC


	)

307 
	#FASYNC
 
O_ASYNC


	)

308 
	#FNONBLOCK
 
O_NONBLOCK


	)

309 
	#FNDELAY
 
O_NDELAY


	)

312 #i‚de‡
__POSIX_FADV_DONTNEED


313 
	#__POSIX_FADV_DONTNEED
 4

	)

314 
	#__POSIX_FADV_NOREUSE
 5

	)

317 #ifde‡
__USE_XOPEN2K


318 
	#POSIX_FADV_NORMAL
 0

	)

319 
	#POSIX_FADV_RANDOM
 1

	)

320 
	#POSIX_FADV_SEQUENTIAL
 2

	)

321 
	#POSIX_FADV_WILLNEED
 3

	)

322 
	#POSIX_FADV_DONTNEED
 
__POSIX_FADV_DONTNEED


	)

323 
	#POSIX_FADV_NOREUSE
 
__POSIX_FADV_NOREUSE


	)

327 #ifde‡
__USE_GNU


329 
	#SYNC_FILE_RANGE_WAIT_BEFORE
 1

	)

332 
	#SYNC_FILE_RANGE_WRITE
 2

	)

335 
	#SYNC_FILE_RANGE_WAIT_AFTER
 4

	)

340 
	#SYNC_FILE_RANGE_WRITE_AND_WAIT
 (
SYNC_FILE_RANGE_WRITE
 \

341 | 
SYNC_FILE_RANGE_WAIT_BEFORE
 \

342 | 
SYNC_FILE_RANGE_WAIT_AFTER
)

	)

345 
	#SPLICE_F_MOVE
 1

	)

346 
	#SPLICE_F_NONBLOCK
 2

	)

349 
	#SPLICE_F_MORE
 4

	)

350 
	#SPLICE_F_GIFT
 8

	)

354 
	~<löux/ÁŒoc.h
>

358 
	sfûe_h™dÀ


360 
	mh™dÀ_byãs
;

361 
	mh™dÀ_ty≥
;

363 
	mf_h™dÀ
[0];

367 
	#MAX_HANDLE_SZ
 128

	)

371 #ifde‡
__USE_ATFILE


372 
	#AT_FDCWD
 -100

	)

375 
	#AT_SYMLINK_NOFOLLOW
 0x100

	)

376 
	#AT_REMOVEDIR
 0x200

	)

378 
	#AT_SYMLINK_FOLLOW
 0x400

	)

379 #ifde‡
__USE_GNU


380 
	#AT_NO_AUTOMOUNT
 0x800

	)

382 
	#AT_EMPTY_PATH
 0x1000

	)

383 
	#AT_STATX_SYNC_TYPE
 0x6000

	)

384 
	#AT_STATX_SYNC_AS_STAT
 0x0000

	)

385 
	#AT_STATX_FORCE_SYNC
 0x2000

	)

386 
	#AT_STATX_DONT_SYNC
 0x4000

	)

387 
	#AT_RECURSIVE
 0x8000

	)

389 
	#AT_EACCESS
 0x200

	)

393 
	g__BEGIN_DECLS


395 #ifde‡
__USE_GNU


398 
__ssize_t
 
	$ªadahód
 (
__fd
, 
__off64_t
 
__off£t
, 
size_t
 
__cou¡
)

399 
__THROW
;

406 
	`sync_fûe_ønge
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__cou¡
,

407 
__Êags
);

414 
__ssize_t
 
	`vm•li˚
 (
__fdout
, c⁄° 
iovec
 *
__iov
,

415 
size_t
 
__cou¡
, 
__Êags
);

421 
__ssize_t
 
	`•li˚
 (
__fdö
, 
__off64_t
 *
__offö
, 
__fdout
,

422 
__off64_t
 *
__offout
, 
size_t
 
__Àn
,

423 
__Êags
);

429 
__ssize_t
 
	`ãe
 (
__fdö
, 
__fdout
, 
size_t
 
__Àn
,

430 
__Êags
);

436 #i‚de‡
__USE_FILE_OFFSET64


437 
	`ÁŒoˇã
 (
__fd
, 
__mode
, 
__off_t
 
__off£t
, __off_à
__Àn
);

439 #ifde‡
__REDIRECT


440 
	`__REDIRECT
 (
ÁŒoˇã
, (
__fd
, 
__mode
, 
__off64_t
 
__off£t
,

441 
__off64_t
 
__Àn
),

442 
ÁŒoˇã64
);

444 
	#ÁŒoˇã
 
ÁŒoˇã64


	)

447 #ifde‡
__USE_LARGEFILE64


448 
	`ÁŒoˇã64
 (
__fd
, 
__mode
, 
__off64_t
 
__off£t
,

449 
__off64_t
 
__Àn
);

454 
	$«me_to_h™dÀ_©
 (
__dfd
, c⁄° *
__«me
,

455 
fûe_h™dÀ
 *
__h™dÀ
, *
__m¡_id
,

456 
__Êags
Ë
__THROW
;

462 
	`›í_by_h™dÀ_©
 (
__mou¡dúfd
, 
fûe_h™dÀ
 *
__h™dÀ
,

463 
__Êags
);

467 
__END_DECLS


	@/usr/include/x86_64-linux-gnu/bits/fcntl.h

19 #i‚de‡
_FCNTL_H


23 #ifde‡
__x86_64__


24 
	#__O_LARGEFILE
 0

	)

27 #ifde‡
__x86_64__


29 
	#F_GETLK64
 5

	)

30 
	#F_SETLK64
 6

	)

31 
	#F_SETLKW64
 7

	)

35 
	sÊock


37 
	ml_ty≥
;

38 
	ml_whí˚
;

39 #i‚de‡
__USE_FILE_OFFSET64


40 
__off_t
 
	ml_°¨t
;

41 
__off_t
 
	ml_Àn
;

43 
__off64_t
 
	ml_°¨t
;

44 
__off64_t
 
	ml_Àn
;

46 
__pid_t
 
	ml_pid
;

49 #ifde‡
__USE_LARGEFILE64


50 
	sÊock64


52 
	ml_ty≥
;

53 
	ml_whí˚
;

54 
__off64_t
 
	ml_°¨t
;

55 
__off64_t
 
	ml_Àn
;

56 
__pid_t
 
	ml_pid
;

61 
	~<bôs/f˙é-löux.h
>

	@/usr/include/x86_64-linux-gnu/bits/fcntl2.h

19 #i‚def 
_FCNTL_H


25 #i‚de‡
__USE_FILE_OFFSET64


26 
	$__›í_2
 (c⁄° *
__∑th
, 
__oÊag
Ë
	`__n⁄nuŒ
 ((1));

27 
	`__REDIRECT
 (
__›í_Æüs
, (c⁄° *
__∑th
, 
__oÊag
, ...),

28 
›í
Ë
	`__n⁄nuŒ
 ((1));

30 
	`__REDIRECT
 (
__›í_2
, (c⁄° *
__∑th
, 
__oÊag
),

31 
__›í64_2
Ë
	`__n⁄nuŒ
 ((1));

32 
	`__REDIRECT
 (
__›í_Æüs
, (c⁄° *
__∑th
, 
__oÊag
, ...),

33 
›í64
Ë
	`__n⁄nuŒ
 ((1));

35 
	`__îr‹de˛
 (
__›í_too_m™y_¨gs
,

37 
	`__îr‹de˛
 (
__›í_missög_mode
,

40 
__f‹tify_fun˘i⁄
 

41 
	$›í
 (c⁄° *
__∑th
, 
__oÊag
, ...)

43 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

44 
	`__›í_too_m™y_¨gs
 ();

46 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

48 i‡(
	`__OPEN_NEEDS_MODE
 (
__oÊag
Ë&& 
	`__va_¨g_∑ck_Àn
 () < 1)

50 
	`__›í_missög_mode
 ();

51  
	`__›í_2
 (
__∑th
, 
__oÊag
);

53  
	`__›í_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

56 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

57  
	`__›í_2
 (
__∑th
, 
__oÊag
);

59  
	`__›í_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

60 
	}
}

63 #ifde‡
__USE_LARGEFILE64


64 
	$__›í64_2
 (c⁄° *
__∑th
, 
__oÊag
Ë
	`__n⁄nuŒ
 ((1));

65 
	`__REDIRECT
 (
__›í64_Æüs
, (c⁄° *
__∑th
, 
__oÊag
,

66 ...), 
›í64
Ë
	`__n⁄nuŒ
 ((1));

67 
	`__îr‹de˛
 (
__›í64_too_m™y_¨gs
,

69 
	`__îr‹de˛
 (
__›í64_missög_mode
,

72 
__f‹tify_fun˘i⁄
 

73 
	$›í64
 (c⁄° *
__∑th
, 
__oÊag
, ...)

75 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

76 
	`__›í64_too_m™y_¨gs
 ();

78 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

80 i‡(
	`__OPEN_NEEDS_MODE
 (
__oÊag
Ë&& 
	`__va_¨g_∑ck_Àn
 () < 1)

82 
	`__›í64_missög_mode
 ();

83  
	`__›í64_2
 (
__∑th
, 
__oÊag
);

85  
	`__›í64_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

88 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

89  
	`__›í64_2
 (
__∑th
, 
__oÊag
);

91  
	`__›í64_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

92 
	}
}

96 #ifde‡
__USE_ATFILE


97 #i‚de‡
__USE_FILE_OFFSET64


98 
	$__›í©_2
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
)

99 
	`__n⁄nuŒ
 ((2));

100 
	`__REDIRECT
 (
__›í©_Æüs
, (
__fd
, c⁄° *
__∑th
,

101 
__oÊag
, ...), 
›í©
)

102 
	`__n⁄nuŒ
 ((2));

104 
	`__REDIRECT
 (
__›í©_2
, (
__fd
, c⁄° *
__∑th
,

105 
__oÊag
), 
__›í©64_2
)

106 
	`__n⁄nuŒ
 ((2));

107 
	`__REDIRECT
 (
__›í©_Æüs
, (
__fd
, c⁄° *
__∑th
,

108 
__oÊag
, ...), 
›í©64
)

109 
	`__n⁄nuŒ
 ((2));

111 
	`__îr‹de˛
 (
__›í©_too_m™y_¨gs
,

113 
	`__îr‹de˛
 (
__›í©_missög_mode
,

116 
__f‹tify_fun˘i⁄
 

117 
	$›í©
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
, ...)

119 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

120 
	`__›í©_too_m™y_¨gs
 ();

122 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

124 i‡(
	`__OPEN_NEEDS_MODE
 (
__oÊag
Ë&& 
	`__va_¨g_∑ck_Àn
 () < 1)

126 
	`__›í©_missög_mode
 ();

127  
	`__›í©_2
 (
__fd
, 
__∑th
, 
__oÊag
);

129  
	`__›í©_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

132 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

133  
	`__›í©_2
 (
__fd
, 
__∑th
, 
__oÊag
);

135  
	`__›í©_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

136 
	}
}

139 #ifde‡
__USE_LARGEFILE64


140 
	$__›í©64_2
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
)

141 
	`__n⁄nuŒ
 ((2));

142 
	`__REDIRECT
 (
__›í©64_Æüs
, (
__fd
, c⁄° *
__∑th
,

143 
__oÊag
, ...), 
›í©64
)

144 
	`__n⁄nuŒ
 ((2));

145 
	`__îr‹de˛
 (
__›í©64_too_m™y_¨gs
,

147 
	`__îr‹de˛
 (
__›í©64_missög_mode
,

150 
__f‹tify_fun˘i⁄
 

151 
	$›í©64
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
, ...)

153 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

154 
	`__›í©64_too_m™y_¨gs
 ();

156 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

158 i‡(
	`__OPEN_NEEDS_MODE
 (
__oÊag
Ë&& 
	`__va_¨g_∑ck_Àn
 () < 1)

160 
	`__›í©64_missög_mode
 ();

161  
	`__›í©64_2
 (
__fd
, 
__∑th
, 
__oÊag
);

163  
	`__›í©64_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

166 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

167  
	`__›í©64_2
 (
__fd
, 
__∑th
, 
__oÊag
);

169  
	`__›í©64_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

170 
	}
}

	@/usr/include/x86_64-linux-gnu/bits/fenv.h

18 #i‚de‡
_FENV_H


26 
	mFE_INVALID
 =

27 
	#FE_INVALID
 0x01

	)

28 
FE_INVALID
,

29 
	m__FE_DENORM
 = 0x02,

30 
	mFE_DIVBYZERO
 =

31 
	#FE_DIVBYZERO
 0x04

	)

32 
FE_DIVBYZERO
,

33 
	mFE_OVERFLOW
 =

34 
	#FE_OVERFLOW
 0x08

	)

35 
FE_OVERFLOW
,

36 
	mFE_UNDERFLOW
 =

37 
	#FE_UNDERFLOW
 0x10

	)

38 
FE_UNDERFLOW
,

39 
	mFE_INEXACT
 =

40 
	#FE_INEXACT
 0x20

	)

41 
FE_INEXACT


44 
	#FE_ALL_EXCEPT
 \

45 (
FE_INEXACT
 | 
FE_DIVBYZERO
 | 
FE_UNDERFLOW
 | 
FE_OVERFLOW
 | 
FE_INVALID
)

	)

52 
	mFE_TONEAREST
 =

53 
	#FE_TONEAREST
 0

	)

54 
FE_TONEAREST
,

55 
	mFE_DOWNWARD
 =

56 
	#FE_DOWNWARD
 0x400

	)

57 
FE_DOWNWARD
,

58 
	mFE_UPWARD
 =

59 
	#FE_UPWARD
 0x800

	)

60 
FE_UPWARD
,

61 
	mFE_TOWARDZERO
 =

62 
	#FE_TOWARDZERO
 0xc00

	)

63 
FE_TOWARDZERO


68 
	t„x˚±_t
;

77 
	m__c⁄åﬁ_w‹d
;

78 
	m__glibc_ª£rved1
;

79 
	m__°©us_w‹d
;

80 
	m__glibc_ª£rved2
;

81 
	m__ègs
;

82 
	m__glibc_ª£rved3
;

83 
	m__eù
;

84 
	m__cs_£À˘‹
;

85 
	m__›code
:11;

86 
	m__glibc_ª£rved4
:5;

87 
	m__d©a_off£t
;

88 
	m__d©a_£À˘‹
;

89 
	m__glibc_ª£rved5
;

90 #ifde‡
__x86_64__


91 
	m__mxc§
;

94 
	t„nv_t
;

97 
	#FE_DFL_ENV
 ((c⁄° 
„nv_t
 *Ë-1)

	)

99 #ifde‡
__USE_GNU


101 
	#FE_NOMASK_ENV
 ((c⁄° 
„nv_t
 *Ë-2)

	)

104 #i‡
__GLIBC_USE
 (
IEC_60559_BFP_EXT_C2X
)

108 
	m__c⁄åﬁ_w‹d
;

109 
	m__glibc_ª£rved
;

110 
	m__mxc§
;

112 
	t„mode_t
;

115 
	#FE_DFL_MODE
 ((c⁄° 
„mode_t
 *Ë-1L)

	)

	@/usr/include/x86_64-linux-gnu/bits/floatn-common.h

20 #i‚de‡
_BITS_FLOATN_COMMON_H


21 
	#_BITS_FLOATN_COMMON_H


	)

23 
	~<„©uªs.h
>

24 
	~<bôs/l⁄g-doubÀ.h
>

34 
	#__HAVE_FLOAT16
 0

	)

35 
	#__HAVE_FLOAT32
 1

	)

36 
	#__HAVE_FLOAT64
 1

	)

37 
	#__HAVE_FLOAT32X
 1

	)

38 
	#__HAVE_FLOAT128X
 0

	)

52 
	#__HAVE_DISTINCT_FLOAT16
 
__HAVE_FLOAT16


	)

53 
	#__HAVE_DISTINCT_FLOAT32
 0

	)

54 
	#__HAVE_DISTINCT_FLOAT64
 0

	)

55 
	#__HAVE_DISTINCT_FLOAT32X
 0

	)

56 
	#__HAVE_DISTINCT_FLOAT64X
 0

	)

57 
	#__HAVE_DISTINCT_FLOAT128X
 
__HAVE_FLOAT128X


	)

63 
	#__HAVE_FLOAT128_UNLIKE_LDBL
 (
__HAVE_DISTINCT_FLOAT128
 \

64 && 
__LDBL_MANT_DIG__
 !113)

	)

69 #i‡
__GNUC_PREREQ
 (7, 0Ë&& !
deföed
 
__˝lu•lus


70 
	#__HAVE_FLOATN_NOT_TYPEDEF
 1

	)

72 
	#__HAVE_FLOATN_NOT_TYPEDEF
 0

	)

75 #i‚de‡
__ASSEMBLER__


80 #i‡
__HAVE_FLOAT16


81 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


83 
	#__f16
(
x
Ë((
_Flﬂt16
Ëx##
f
)

	)

85 
	#__f16
(
x
Ëx##
f16


	)

89 #i‡
__HAVE_FLOAT32


90 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


91 
	#__f32
(
x
Ëx##
f


	)

93 
	#__f32
(
x
Ëx##
f32


	)

97 #i‡
__HAVE_FLOAT64


98 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


99 #ifde‡
__NO_LONG_DOUBLE_MATH


100 
	#__f64
(
x
Ëx##
l


	)

102 
	#__f64
(
x
Ë
	)
x

105 
	#__f64
(
x
Ëx##
f64


	)

109 #i‡
__HAVE_FLOAT32X


110 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


111 
	#__f32x
(
x
Ë
	)
x

113 
	#__f32x
(
x
Ëx##
f32x


	)

117 #i‡
__HAVE_FLOAT64X


118 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


119 #i‡
__HAVE_FLOAT64X_LONG_DOUBLE


120 
	#__f64x
(
x
Ëx##
l


	)

122 
	#__f64x
(
x
Ë
	`__f128
 (x)

	)

125 
	#__f64x
(
x
Ëx##
f64x


	)

129 #i‡
__HAVE_FLOAT128X


130 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


133 
	#__f128x
(
x
Ëx##
f128x


	)

138 #i‡
__HAVE_FLOAT16


139 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


140 
_Com∂ex
 
	t__cÊﬂt16
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HC__
)));

141 
	#__CFLOAT16
 
__cÊﬂt16


	)

143 
	#__CFLOAT16
 
_Com∂ex
 
_Flﬂt16


	)

147 #i‡
__HAVE_FLOAT32


148 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


149 
	#__CFLOAT32
 
_Com∂ex
 

	)

151 
	#__CFLOAT32
 
_Com∂ex
 
_Flﬂt32


	)

155 #i‡
__HAVE_FLOAT64


156 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


157 #ifde‡
__NO_LONG_DOUBLE_MATH


158 
	#__CFLOAT64
 
_Com∂ex
 

	)

160 
	#__CFLOAT64
 
_Com∂ex
 

	)

163 
	#__CFLOAT64
 
_Com∂ex
 
_Flﬂt64


	)

167 #i‡
__HAVE_FLOAT32X


168 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


169 
	#__CFLOAT32X
 
_Com∂ex
 

	)

171 
	#__CFLOAT32X
 
_Com∂ex
 
_Flﬂt32x


	)

175 #i‡
__HAVE_FLOAT64X


176 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


177 #i‡
__HAVE_FLOAT64X_LONG_DOUBLE


178 
	#__CFLOAT64X
 
_Com∂ex
 

	)

180 
	#__CFLOAT64X
 
__CFLOAT128


	)

183 
	#__CFLOAT64X
 
_Com∂ex
 
_Flﬂt64x


	)

187 #i‡
__HAVE_FLOAT128X


188 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


191 
	#__CFLOAT128X
 
_Com∂ex
 
_Flﬂt128x


	)

196 #i‡
__HAVE_FLOAT16


198 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


199 
	t_Flﬂt16
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HF__
)));

202 #i‡!
__GNUC_PREREQ
 (7, 0)

203 
	#__buûtö_huge_vÆf16
(Ë((
_Flﬂt16
Ë
	`__buûtö_huge_vÆ
 ())

	)

204 
	#__buûtö_öff16
(Ë((
_Flﬂt16
Ë
	`__buûtö_öf
 ())

	)

205 
	#__buûtö_«nf16
(
x
Ë((
_Flﬂt16
Ë
	`__buûtö_«n
 (x))

	)

206 
	#__buûtö_«nsf16
(
x
Ë((
_Flﬂt16
Ë
	`__buûtö_«ns
 (x))

	)

211 #i‡
__HAVE_FLOAT32


213 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


214 
	t_Flﬂt32
;

217 #i‡!
__GNUC_PREREQ
 (7, 0)

218 
	#__buûtö_huge_vÆf32
(Ë(
	`__buûtö_huge_vÆf
 ())

	)

219 
	#__buûtö_öff32
(Ë(
	`__buûtö_öff
 ())

	)

220 
	#__buûtö_«nf32
(
x
Ë(
	`__buûtö_«nf
 (x))

	)

221 
	#__buûtö_«nsf32
(
x
Ë(
	`__buûtö_«nsf
 (x))

	)

226 #i‡
__HAVE_FLOAT64


235 #ifde‡
__NO_LONG_DOUBLE_MATH


237 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


238 
	t_Flﬂt64
;

241 #i‡!
__GNUC_PREREQ
 (7, 0)

242 
	#__buûtö_huge_vÆf64
(Ë(
	`__buûtö_huge_vÆl
 ())

	)

243 
	#__buûtö_öff64
(Ë(
	`__buûtö_öÊ
 ())

	)

244 
	#__buûtö_«nf64
(
x
Ë(
	`__buûtö_«∆
 (x))

	)

245 
	#__buûtö_«nsf64
(
x
Ë(
	`__buûtö_«n¶
 (x))

	)

250 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


251 
	t_Flﬂt64
;

254 #i‡!
__GNUC_PREREQ
 (7, 0)

255 
	#__buûtö_huge_vÆf64
(Ë(
	`__buûtö_huge_vÆ
 ())

	)

256 
	#__buûtö_öff64
(Ë(
	`__buûtö_öf
 ())

	)

257 
	#__buûtö_«nf64
(
x
Ë(
	`__buûtö_«n
 (x))

	)

258 
	#__buûtö_«nsf64
(
x
Ë(
	`__buûtö_«ns
 (x))

	)

265 #i‡
__HAVE_FLOAT32X


267 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


268 
	t_Flﬂt32x
;

271 #i‡!
__GNUC_PREREQ
 (7, 0)

272 
	#__buûtö_huge_vÆf32x
(Ë(
	`__buûtö_huge_vÆ
 ())

	)

273 
	#__buûtö_öff32x
(Ë(
	`__buûtö_öf
 ())

	)

274 
	#__buûtö_«nf32x
(
x
Ë(
	`__buûtö_«n
 (x))

	)

275 
	#__buûtö_«nsf32x
(
x
Ë(
	`__buûtö_«ns
 (x))

	)

280 #i‡
__HAVE_FLOAT64X


282 #i‡
__HAVE_FLOAT64X_LONG_DOUBLE


284 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


285 
	t_Flﬂt64x
;

288 #i‡!
__GNUC_PREREQ
 (7, 0)

289 
	#__buûtö_huge_vÆf64x
(Ë(
	`__buûtö_huge_vÆl
 ())

	)

290 
	#__buûtö_öff64x
(Ë(
	`__buûtö_öÊ
 ())

	)

291 
	#__buûtö_«nf64x
(
x
Ë(
	`__buûtö_«∆
 (x))

	)

292 
	#__buûtö_«nsf64x
(
x
Ë(
	`__buûtö_«n¶
 (x))

	)

297 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


298 
_Flﬂt128
 
	t_Flﬂt64x
;

301 #i‡!
__GNUC_PREREQ
 (7, 0)

302 
	#__buûtö_huge_vÆf64x
(Ë(
	`__buûtö_huge_vÆf128
 ())

	)

303 
	#__buûtö_öff64x
(Ë(
	`__buûtö_öff128
 ())

	)

304 
	#__buûtö_«nf64x
(
x
Ë(
	`__buûtö_«nf128
 (x))

	)

305 
	#__buûtö_«nsf64x
(
x
Ë(
	`__buûtö_«nsf128
 (x))

	)

312 #i‡
__HAVE_FLOAT128X


314 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


318 #i‡!
__GNUC_PREREQ
 (7, 0)

319 
	#__buûtö_huge_vÆf128x
(Ë((
_Flﬂt128x
Ë
	`__buûtö_huge_vÆ
 ())

	)

320 
	#__buûtö_öff128x
(Ë((
_Flﬂt128x
Ë
	`__buûtö_öf
 ())

	)

321 
	#__buûtö_«nf128x
(
x
Ë((
_Flﬂt128x
Ë
	`__buûtö_«n
 (x))

	)

322 
	#__buûtö_«nsf128x
(
x
Ë((
_Flﬂt128x
Ë
	`__buûtö_«ns
 (x))

	)

	@/usr/include/x86_64-linux-gnu/bits/floatn.h

19 #i‚de‡
_BITS_FLOATN_H


20 
	#_BITS_FLOATN_H


	)

22 
	~<„©uªs.h
>

29 #i‡(
deföed
 
__x86_64__
 \

30 ? 
__GNUC_PREREQ
 (4, 3) \

31 : (
deföed
 
__GNU__
 ? 
	$__GNUC_PREREQ
 (4, 5Ë: 
	$__GNUC_PREREQ
 (4, 4)))

32 
	#__HAVE_FLOAT128
 1

	)

34 
	#__HAVE_FLOAT128
 0

	)

39 #i‡
__HAVE_FLOAT128


40 
	#__HAVE_DISTINCT_FLOAT128
 1

	)

42 
	#__HAVE_DISTINCT_FLOAT128
 0

	)

48 
	#__HAVE_FLOAT64X
 1

	)

54 
	#__HAVE_FLOAT64X_LONG_DOUBLE
 1

	)

56 #i‚de‡
__ASSEMBLER__


60 #i‡
__HAVE_FLOAT128


61 #i‡!
	`__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


63 
	#__f128
(
x
Ëx##
q


	)

65 
	#__f128
(
x
Ëx##
f128


	)

70 #i‡
__HAVE_FLOAT128


71 #i‡!
	`__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


74 
_Com∂ex
 
	t__cÊﬂt128
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__TC__
)));

75 
	#__CFLOAT128
 
__cÊﬂt128


	)

77 
	#__CFLOAT128
 
_Com∂ex
 
_Flﬂt128


	)

82 #i‡
__HAVE_FLOAT128


85 #i‡!
	`__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


86 
__Êﬂt128
 
	t_Flﬂt128
;

90 #i‡!
	`__GNUC_PREREQ
 (7, 0)

91 
	#__buûtö_huge_vÆf128
(Ë((
_Flﬂt128
Ë
	`__buûtö_huge_vÆ
 ())

	)

99 #i‡!
	`__GNUC_PREREQ
 (7, 0)

100 
	#__buûtö_c›ysignf128
 
__buûtö_c›ysignq


	)

101 
	#__buûtö_Ábsf128
 
__buûtö_Ábsq


	)

102 
	#__buûtö_öff128
(Ë((
_Flﬂt128
Ë
	`__buûtö_öf
 ())

	)

103 
	#__buûtö_«nf128
(
x
Ë((
_Flﬂt128
Ë
	`__buûtö_«n
 (x))

	)

104 
	#__buûtö_«nsf128
(
x
Ë((
_Flﬂt128
Ë
	`__buûtö_«ns
 (x))

	)

111 #i‡!
	`__GNUC_PREREQ
 (6, 0)

112 
	#__buûtö_signbôf128
 
__signbôf128


	)

119 
	~<bôs/Êﬂä-comm⁄.h
>

	@/usr/include/x86_64-linux-gnu/bits/flt-eval-method.h

19 #i‚de‡
_MATH_H


23 #ifde‡
__FLT_EVAL_METHOD__


24 #i‡
__FLT_EVAL_METHOD__
 == -1

25 
	#__GLIBC_FLT_EVAL_METHOD
 2

	)

27 
	#__GLIBC_FLT_EVAL_METHOD
 
__FLT_EVAL_METHOD__


	)

29 #ñi‡
deföed
 
__x86_64__


30 
	#__GLIBC_FLT_EVAL_METHOD
 0

	)

32 
	#__GLIBC_FLT_EVAL_METHOD
 2

	)

	@/usr/include/x86_64-linux-gnu/bits/fp-fast.h

19 #i‚de‡
_MATH_H


23 #ifde‡
__USE_ISOC99


27 #ifde‡
__FP_FAST_FMA


28 
	#FP_FAST_FMA
 1

	)

31 #ifde‡
__FP_FAST_FMAF


32 
	#FP_FAST_FMAF
 1

	)

35 #ifde‡
__FP_FAST_FMAL


36 
	#FP_FAST_FMAL
 1

	)

	@/usr/include/x86_64-linux-gnu/bits/fp-logb.h

19 #i‚de‡
_MATH_H


23 
	#__FP_LOGB0_IS_MIN
 1

	)

24 
	#__FP_LOGBNAN_IS_MIN
 1

	)

	@/usr/include/x86_64-linux-gnu/bits/getopt_core.h

20 #i‚de‡
_GETOPT_CORE_H


21 
	#_GETOPT_CORE_H
 1

	)

28 
__BEGIN_DECLS


36 *
›èrg
;

50 
›töd
;

55 
›ãº
;

59 
›t›t
;

91 
	$gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

92 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

94 
__END_DECLS


	@/usr/include/x86_64-linux-gnu/bits/getopt_ext.h

20 #i‚de‡
_GETOPT_EXT_H


21 
	#_GETOPT_EXT_H
 1

	)

27 
__BEGIN_DECLS


50 
	s›ti⁄


52 c⁄° *
	m«me
;

55 
	mhas_¨g
;

56 *
	mÊag
;

57 
	mvÆ
;

62 
	#no_¨gumít
 0

	)

63 
	#ªquúed_¨gumít
 1

	)

64 
	#›ti⁄Æ_¨gumít
 2

	)

66 
	$gë›t_l⁄g
 (
___¨gc
, *
__gë›t_¨gv_c⁄°
 *
___¨gv
,

67 c⁄° *
__sh‹t›ts
,

68 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

69 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

70 
	$gë›t_l⁄g_⁄ly
 (
___¨gc
, *
__gë›t_¨gv_c⁄°
 *
___¨gv
,

71 c⁄° *
__sh‹t›ts
,

72 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

73 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

75 
__END_DECLS


	@/usr/include/x86_64-linux-gnu/bits/getopt_posix.h

20 #i‚de‡
_GETOPT_POSIX_H


21 
	#_GETOPT_POSIX_H
 1

	)

23 #i‡!
deföed
 
_UNISTD_H
 && !deföed 
_STDIO_H


27 
	~<bôs/gë›t_c‹e.h
>

29 
	g__BEGIN_DECLS


31 #i‡
deföed
 
__USE_POSIX2
 && !deföed 
__USE_POSIX_IMPLICITLY
 \

32 && !
deföed
 
	g__USE_GNU
 && !deföed 
	g_GETOPT_H


37 #ifde‡
__REDIRECT


38 
__REDIRECT_NTH
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

39 c⁄° *
__sh‹t›ts
),

40 
__posix_gë›t
);

42 
	$__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

43 c⁄° *
__sh‹t›ts
)

44 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

45 
	#gë›t
 
__posix_gë›t


	)

49 
__END_DECLS


	@/usr/include/x86_64-linux-gnu/bits/hwcap.h

19 #i‚de‡
_SYS_AUXV_H


	@/usr/include/x86_64-linux-gnu/bits/in.h

20 #i‚de‡
_NETINET_IN_H


32 #i‡
deföed
 
_UAPI_LINUX_IN6_H
 \

33 || 
deföed
 
	g_UAPI_IPV6_H
 \

34 || 
deföed
 
	g_LINUX_IN6_H
 \

35 || 
deföed
 
	g_IPV6_H


39 
	#__USE_KERNEL_IPV6_DEFS
 1

	)

41 
	#__USE_KERNEL_IPV6_DEFS
 0

	)

47 
	#IP_OPTIONS
 4

	)

48 
	#IP_HDRINCL
 3

	)

49 
	#IP_TOS
 1

	)

50 
	#IP_TTL
 2

	)

51 
	#IP_RECVOPTS
 6

	)

53 
	#IP_RECVRETOPTS
 
IP_RETOPTS


	)

54 
	#IP_RETOPTS
 7

	)

55 
	#IP_MULTICAST_IF
 32

	)

56 
	#IP_MULTICAST_TTL
 33

	)

57 
	#IP_MULTICAST_LOOP
 34

	)

58 
	#IP_ADD_MEMBERSHIP
 35

	)

59 
	#IP_DROP_MEMBERSHIP
 36

	)

60 
	#IP_UNBLOCK_SOURCE
 37

	)

61 
	#IP_BLOCK_SOURCE
 38

	)

62 
	#IP_ADD_SOURCE_MEMBERSHIP
 39

	)

63 
	#IP_DROP_SOURCE_MEMBERSHIP
 40

	)

64 
	#IP_MSFILTER
 41

	)

65 #ifde‡
__USE_MISC


66 
	#MCAST_JOIN_GROUP
 42

	)

67 
	#MCAST_BLOCK_SOURCE
 43

	)

68 
	#MCAST_UNBLOCK_SOURCE
 44

	)

69 
	#MCAST_LEAVE_GROUP
 45

	)

70 
	#MCAST_JOIN_SOURCE_GROUP
 46

	)

71 
	#MCAST_LEAVE_SOURCE_GROUP
 47

	)

72 
	#MCAST_MSFILTER
 48

	)

73 
	#IP_MULTICAST_ALL
 49

	)

74 
	#IP_UNICAST_IF
 50

	)

76 
	#MCAST_EXCLUDE
 0

	)

77 
	#MCAST_INCLUDE
 1

	)

80 
	#IP_ROUTER_ALERT
 5

	)

81 
	#IP_PKTINFO
 8

	)

82 
	#IP_PKTOPTIONS
 9

	)

83 
	#IP_PMTUDISC
 10

	)

84 
	#IP_MTU_DISCOVER
 10

	)

85 
	#IP_RECVERR
 11

	)

86 
	#IP_RECVTTL
 12

	)

87 
	#IP_RECVTOS
 13

	)

88 
	#IP_MTU
 14

	)

89 
	#IP_FREEBIND
 15

	)

90 
	#IP_IPSEC_POLICY
 16

	)

91 
	#IP_XFRM_POLICY
 17

	)

92 
	#IP_PASSSEC
 18

	)

93 
	#IP_TRANSPARENT
 19

	)

94 
	#IP_MULTICAST_ALL
 49

	)

97 
	#IP_ORIGDSTADDR
 20

	)

98 
	#IP_RECVORIGDSTADDR
 
IP_ORIGDSTADDR


	)

100 
	#IP_MINTTL
 21

	)

101 
	#IP_NODEFRAG
 22

	)

102 
	#IP_CHECKSUM
 23

	)

103 
	#IP_BIND_ADDRESS_NO_PORT
 24

	)

104 
	#IP_RECVFRAGSIZE
 25

	)

105 
	#IP_RECVERR_RFC4884
 26

	)

108 
	#IP_PMTUDISC_DONT
 0

	)

109 
	#IP_PMTUDISC_WANT
 1

	)

110 
	#IP_PMTUDISC_DO
 2

	)

111 
	#IP_PMTUDISC_PROBE
 3

	)

115 
	#IP_PMTUDISC_INTERFACE
 4

	)

117 
	#IP_PMTUDISC_OMIT
 5

	)

119 
	#IP_MULTICAST_IF
 32

	)

120 
	#IP_MULTICAST_TTL
 33

	)

121 
	#IP_MULTICAST_LOOP
 34

	)

122 
	#IP_ADD_MEMBERSHIP
 35

	)

123 
	#IP_DROP_MEMBERSHIP
 36

	)

124 
	#IP_UNBLOCK_SOURCE
 37

	)

125 
	#IP_BLOCK_SOURCE
 38

	)

126 
	#IP_ADD_SOURCE_MEMBERSHIP
 39

	)

127 
	#IP_DROP_SOURCE_MEMBERSHIP
 40

	)

128 
	#IP_MSFILTER
 41

	)

129 
	#IP_MULTICAST_ALL
 49

	)

130 
	#IP_UNICAST_IF
 50

	)

133 
	#SOL_IP
 0

	)

135 
	#IP_DEFAULT_MULTICAST_TTL
 1

	)

136 
	#IP_DEFAULT_MULTICAST_LOOP
 1

	)

137 
	#IP_MAX_MEMBERSHIPS
 20

	)

139 #ifde‡
__USE_MISC


143 
	sù_›ts


145 
ö_addr
 
	mù_d°
;

146 
	mù_›ts
[40];

150 
	sù_mªqn


152 
ö_addr
 
	mimr_mu…üddr
;

153 
ö_addr
 
	mimr_addªss
;

154 
	mimr_ifödex
;

158 
	sö_pktöfo


160 
	mùi_ifödex
;

161 
ö_addr
 
	mùi_•ec_d°
;

162 
ö_addr
 
	mùi_addr
;

169 
	#IPV6_ADDRFORM
 1

	)

170 
	#IPV6_2292PKTINFO
 2

	)

171 
	#IPV6_2292HOPOPTS
 3

	)

172 
	#IPV6_2292DSTOPTS
 4

	)

173 
	#IPV6_2292RTHDR
 5

	)

174 
	#IPV6_2292PKTOPTIONS
 6

	)

175 
	#IPV6_CHECKSUM
 7

	)

176 
	#IPV6_2292HOPLIMIT
 8

	)

178 
	#SCM_SRCRT
 
IPV6_RXSRCRT


	)

180 
	#IPV6_NEXTHOP
 9

	)

181 
	#IPV6_AUTHHDR
 10

	)

182 
	#IPV6_UNICAST_HOPS
 16

	)

183 
	#IPV6_MULTICAST_IF
 17

	)

184 
	#IPV6_MULTICAST_HOPS
 18

	)

185 
	#IPV6_MULTICAST_LOOP
 19

	)

186 
	#IPV6_JOIN_GROUP
 20

	)

187 
	#IPV6_LEAVE_GROUP
 21

	)

188 
	#IPV6_ROUTER_ALERT
 22

	)

189 
	#IPV6_MTU_DISCOVER
 23

	)

190 
	#IPV6_MTU
 24

	)

191 
	#IPV6_RECVERR
 25

	)

192 
	#IPV6_V6ONLY
 26

	)

193 
	#IPV6_JOIN_ANYCAST
 27

	)

194 
	#IPV6_LEAVE_ANYCAST
 28

	)

195 
	#IPV6_MULTICAST_ALL
 29

	)

196 
	#IPV6_ROUTER_ALERT_ISOLATE
 30

	)

197 
	#IPV6_RECVERR_RFC4884
 31

	)

198 
	#IPV6_IPSEC_POLICY
 34

	)

199 
	#IPV6_XFRM_POLICY
 35

	)

200 
	#IPV6_HDRINCL
 36

	)

203 
	#IPV6_RECVPKTINFO
 49

	)

204 
	#IPV6_PKTINFO
 50

	)

205 
	#IPV6_RECVHOPLIMIT
 51

	)

206 
	#IPV6_HOPLIMIT
 52

	)

207 
	#IPV6_RECVHOPOPTS
 53

	)

208 
	#IPV6_HOPOPTS
 54

	)

209 
	#IPV6_RTHDRDSTOPTS
 55

	)

210 
	#IPV6_RECVRTHDR
 56

	)

211 
	#IPV6_RTHDR
 57

	)

212 
	#IPV6_RECVDSTOPTS
 58

	)

213 
	#IPV6_DSTOPTS
 59

	)

214 
	#IPV6_RECVPATHMTU
 60

	)

215 
	#IPV6_PATHMTU
 61

	)

216 
	#IPV6_DONTFRAG
 62

	)

219 
	#IPV6_RECVTCLASS
 66

	)

220 
	#IPV6_TCLASS
 67

	)

222 
	#IPV6_AUTOFLOWLABEL
 70

	)

225 
	#IPV6_ADDR_PREFERENCES
 72

	)

228 
	#IPV6_MINHOPCOUNT
 73

	)

230 
	#IPV6_ORIGDSTADDR
 74

	)

231 
	#IPV6_RECVORIGDSTADDR
 
IPV6_ORIGDSTADDR


	)

232 
	#IPV6_TRANSPARENT
 75

	)

233 
	#IPV6_UNICAST_IF
 76

	)

234 
	#IPV6_RECVFRAGSIZE
 77

	)

235 
	#IPV6_FREEBIND
 78

	)

238 #i‡!
__USE_KERNEL_IPV6_DEFS


239 
	#IPV6_ADD_MEMBERSHIP
 
IPV6_JOIN_GROUP


	)

240 
	#IPV6_DROP_MEMBERSHIP
 
IPV6_LEAVE_GROUP


	)

242 
	#IPV6_RXHOPOPTS
 
IPV6_HOPOPTS


	)

243 
	#IPV6_RXDSTOPTS
 
IPV6_DSTOPTS


	)

246 
	#IPV6_PMTUDISC_DONT
 0

	)

247 
	#IPV6_PMTUDISC_WANT
 1

	)

248 
	#IPV6_PMTUDISC_DO
 2

	)

249 
	#IPV6_PMTUDISC_PROBE
 3

	)

250 
	#IPV6_PMTUDISC_INTERFACE
 4

	)

251 
	#IPV6_PMTUDISC_OMIT
 5

	)

254 
	#SOL_IPV6
 41

	)

255 
	#SOL_ICMPV6
 58

	)

258 
	#IPV6_RTHDR_LOOSE
 0

	)

259 
	#IPV6_RTHDR_STRICT
 1

	)

261 
	#IPV6_RTHDR_TYPE_0
 0

	)

	@/usr/include/x86_64-linux-gnu/bits/indirect-return.h

19 #i‚de‡
_UCONTEXT_H


26 #i‡
deföed
 
__CET__
 && (__CET__ & 2) != 0

27 #i‡
__glibc_has_©åibuã
 (
__ödúe˘_ªtu∫__
)

28 
	#__INDIRECT_RETURN
 
	`__©åibuã__
 ((
__ödúe˘_ªtu∫__
))

	)

33 
	#__INDIRECT_RETURN
 
	`__©åibuã__
 ((
__ªtu∫s_twi˚__
))

	)

36 
	#__INDIRECT_RETURN


	)

	@/usr/include/x86_64-linux-gnu/bits/initspin.h

	@/usr/include/x86_64-linux-gnu/bits/inotify.h

18 #i‚def 
_SYS_INOTIFY_H


25 
	mIN_CLOEXEC
 = 02000000,

26 
	#IN_CLOEXEC
 
IN_CLOEXEC


	)

27 
	mIN_NONBLOCK
 = 00004000

28 
	#IN_NONBLOCK
 
IN_NONBLOCK


	)

	@/usr/include/x86_64-linux-gnu/bits/ioctl-types.h

19 #i‚de‡
_SYS_IOCTL_H


24 
	~<asm/io˘ls.h
>

27 
	swösize


29 
	mws_row
;

30 
	mws_cﬁ
;

31 
	mws_xpixñ
;

32 
	mws_ypixñ
;

35 
	#NCC
 8

	)

36 
	sãrmio


38 
	mc_iÊag
;

39 
	mc_oÊag
;

40 
	mc_cÊag
;

41 
	mc_lÊag
;

42 
	mc_löe
;

43 
	mc_cc
[
NCC
];

47 
	#TIOCM_LE
 0x001

	)

48 
	#TIOCM_DTR
 0x002

	)

49 
	#TIOCM_RTS
 0x004

	)

50 
	#TIOCM_ST
 0x008

	)

51 
	#TIOCM_SR
 0x010

	)

52 
	#TIOCM_CTS
 0x020

	)

53 
	#TIOCM_CAR
 0x040

	)

54 
	#TIOCM_RNG
 0x080

	)

55 
	#TIOCM_DSR
 0x100

	)

56 
	#TIOCM_CD
 
TIOCM_CAR


	)

57 
	#TIOCM_RI
 
TIOCM_RNG


	)

62 
	#N_TTY
 0

	)

63 
	#N_SLIP
 1

	)

64 
	#N_MOUSE
 2

	)

65 
	#N_PPP
 3

	)

66 
	#N_STRIP
 4

	)

67 
	#N_AX25
 5

	)

68 
	#N_X25
 6

	)

69 
	#N_6PACK
 7

	)

70 
	#N_MASC
 8

	)

71 
	#N_R3964
 9

	)

72 
	#N_PROFIBUS_FDL
 10

	)

73 
	#N_IRDA
 11

	)

74 
	#N_SMSBLOCK
 12

	)

75 
	#N_HDLC
 13

	)

76 
	#N_SYNC_PPP
 14

	)

77 
	#N_HCI
 15

	)

	@/usr/include/x86_64-linux-gnu/bits/ioctls.h

18 #i‚de‡
_SYS_IOCTL_H


23 
	~<asm/io˘ls.h
>

26 
	#SIOCADDRT
 0x890B

	)

27 
	#SIOCDELRT
 0x890C

	)

28 
	#SIOCRTMSG
 0x890D

	)

31 
	#SIOCGIFNAME
 0x8910

	)

32 
	#SIOCSIFLINK
 0x8911

	)

33 
	#SIOCGIFCONF
 0x8912

	)

34 
	#SIOCGIFFLAGS
 0x8913

	)

35 
	#SIOCSIFFLAGS
 0x8914

	)

36 
	#SIOCGIFADDR
 0x8915

	)

37 
	#SIOCSIFADDR
 0x8916

	)

38 
	#SIOCGIFDSTADDR
 0x8917

	)

39 
	#SIOCSIFDSTADDR
 0x8918

	)

40 
	#SIOCGIFBRDADDR
 0x8919

	)

41 
	#SIOCSIFBRDADDR
 0x891®

	)

42 
	#SIOCGIFNETMASK
 0x891b

	)

43 
	#SIOCSIFNETMASK
 0x891¯

	)

44 
	#SIOCGIFMETRIC
 0x891d

	)

45 
	#SIOCSIFMETRIC
 0x891ê

	)

46 
	#SIOCGIFMEM
 0x891‡

	)

47 
	#SIOCSIFMEM
 0x8920

	)

48 
	#SIOCGIFMTU
 0x8921

	)

49 
	#SIOCSIFMTU
 0x8922

	)

50 
	#SIOCSIFNAME
 0x8923

	)

51 
	#SIOCSIFHWADDR
 0x8924

	)

52 
	#SIOCGIFENCAP
 0x8925

	)

53 
	#SIOCSIFENCAP
 0x8926

	)

54 
	#SIOCGIFHWADDR
 0x8927

	)

55 
	#SIOCGIFSLAVE
 0x8929

	)

56 
	#SIOCSIFSLAVE
 0x8930

	)

57 
	#SIOCADDMULTI
 0x8931

	)

58 
	#SIOCDELMULTI
 0x8932

	)

59 
	#SIOCGIFINDEX
 0x8933

	)

60 
	#SIOGIFINDEX
 
SIOCGIFINDEX


	)

61 
	#SIOCSIFPFLAGS
 0x8934

	)

62 
	#SIOCGIFPFLAGS
 0x8935

	)

63 
	#SIOCDIFADDR
 0x8936

	)

64 
	#SIOCSIFHWBROADCAST
 0x8937

	)

65 
	#SIOCGIFCOUNT
 0x8938

	)

67 
	#SIOCGIFBR
 0x8940

	)

68 
	#SIOCSIFBR
 0x8941

	)

70 
	#SIOCGIFTXQLEN
 0x8942

	)

71 
	#SIOCSIFTXQLEN
 0x8943

	)

76 
	#SIOCDARP
 0x8953

	)

77 
	#SIOCGARP
 0x8954

	)

78 
	#SIOCSARP
 0x8955

	)

81 
	#SIOCDRARP
 0x8960

	)

82 
	#SIOCGRARP
 0x8961

	)

83 
	#SIOCSRARP
 0x8962

	)

87 
	#SIOCGIFMAP
 0x8970

	)

88 
	#SIOCSIFMAP
 0x8971

	)

92 
	#SIOCADDDLCI
 0x8980

	)

93 
	#SIOCDELDLCI
 0x8981

	)

102 
	#SIOCDEVPRIVATE
 0x89F0

	)

108 
	#SIOCPROTOPRIVATE
 0x89E0

	)

	@/usr/include/x86_64-linux-gnu/bits/ipc-perm.h

19 #i‚de‡
_SYS_IPC_H


28 
	sùc_≥rm


30 
__key_t
 
	m__key
;

31 
__uid_t
 
	muid
;

32 
__gid_t
 
	mgid
;

33 
__uid_t
 
	mcuid
;

34 
__gid_t
 
	mcgid
;

35 
__mode_t
 
	mmode
;

36 
	m__£q
;

37 
	m__∑d2
;

38 
__sysˇŒ_ul⁄g_t
 
	m__glibc_ª£rved1
;

39 
__sysˇŒ_ul⁄g_t
 
	m__glibc_ª£rved2
;

	@/usr/include/x86_64-linux-gnu/bits/ipc.h

18 #i‚de‡
_SYS_IPC_H


22 
	~<bôs/ty≥s.h
>

25 
	#IPC_CREAT
 01000

	)

26 
	#IPC_EXCL
 02000

	)

27 
	#IPC_NOWAIT
 04000

	)

30 
	#IPC_RMID
 0

	)

31 
	#IPC_SET
 1

	)

32 
	#IPC_STAT
 2

	)

33 #ifde‡
__USE_GNU


34 
	#IPC_INFO
 3

	)

38 
	#IPC_PRIVATE
 ((
__key_t
Ë0Ë

	)

40 
	~<bôs/ùc-≥rm.h
>

	@/usr/include/x86_64-linux-gnu/bits/ipctypes.h

19 #i‚de‡
_SYS_IPC_H


23 #i‚de‡
_BITS_IPCTYPES_H


24 
	#_BITS_IPCTYPES_H
 1

	)

27 #ifde‡
__x86_64__


28 
	t__ùc_pid_t
;

30 
	t__ùc_pid_t
;

	@/usr/include/x86_64-linux-gnu/bits/iscanonical.h

19 #i‚de‡
_MATH_H


23 
	$__isˇn⁄iˇŒ
 (
__x
)

24 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

25 
	#__isˇn⁄iˇlf
(
x
Ë((Ë(
	`__ty≥of
 (x)Ë(x), 1)

	)

26 
	#__isˇn⁄iˇl
(
x
Ë((Ë(
	`__ty≥of
 (x)Ë(x), 1)

	)

27 #i‡
__HAVE_DISTINCT_FLOAT128


28 
	#__isˇn⁄iˇlf128
(
x
Ë((Ë(
	`__ty≥of
 (x)Ë(x), 1)

	)

37 #i‚de‡
__˝lu•lus


38 
	#isˇn⁄iˇl
(
x
Ë
	`__MATH_TG
 ((x), 
__isˇn⁄iˇl
, (x))

	)

47 
ölöe
 
	`isˇn⁄iˇl
 (
__vÆ
Ë{  
	`__isˇn⁄iˇlf
 (__val); }

48 
ölöe
 
	`isˇn⁄iˇl
 (
__vÆ
Ë{  
	`__isˇn⁄iˇl
 (__val); }

49 
ölöe
 
	`isˇn⁄iˇl
 (
__vÆ
Ë{  
	`__isˇn⁄iˇŒ
 (__val); }

50 #i‡
__HAVE_DISTINCT_FLOAT128


51 
ölöe
 
	`isˇn⁄iˇl
 (
_Flﬂt128
 
__vÆ
Ë{  
	`__isˇn⁄iˇlf128
 (__val); }

53 
	}
}

	@/usr/include/x86_64-linux-gnu/bits/libc-header-start.h

27 #i‚de‡
__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


31 #unde‡
__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


33 
	~<„©uªs.h
>

37 #unde‡
__GLIBC_USE_LIB_EXT2


38 #i‡(
deföed
 
__USE_GNU
 \

39 || (
deföed
 
	g__STDC_WANT_LIB_EXT2__
 && __STDC_WANT_LIB_EXT2__ > 0))

40 
	#__GLIBC_USE_LIB_EXT2
 1

	)

42 
	#__GLIBC_USE_LIB_EXT2
 0

	)

67 #unde‡
__GLIBC_USE_IEC_60559_BFP_EXT


68 #i‡
deföed
 
__USE_GNU
 || deföed 
__STDC_WANT_IEC_60559_BFP_EXT__


69 
	#__GLIBC_USE_IEC_60559_BFP_EXT
 1

	)

71 
	#__GLIBC_USE_IEC_60559_BFP_EXT
 0

	)

73 #unde‡
__GLIBC_USE_IEC_60559_BFP_EXT_C2X


74 #i‡
__GLIBC_USE
 (
IEC_60559_BFP_EXT
Ë|| __GLIBC_USE (
ISOC2X
)

75 
	#__GLIBC_USE_IEC_60559_BFP_EXT_C2X
 1

	)

77 
	#__GLIBC_USE_IEC_60559_BFP_EXT_C2X
 0

	)

79 #unde‡
__GLIBC_USE_IEC_60559_EXT


80 #i‡
__GLIBC_USE
 (
IEC_60559_BFP_EXT
Ë|| 
deföed
 
__STDC_WANT_IEC_60559_EXT__


81 
	#__GLIBC_USE_IEC_60559_EXT
 1

	)

83 
	#__GLIBC_USE_IEC_60559_EXT
 0

	)

90 #unde‡
__GLIBC_USE_IEC_60559_FUNCS_EXT


91 #i‡
deföed
 
__USE_GNU
 || deföed 
__STDC_WANT_IEC_60559_FUNCS_EXT__


92 
	#__GLIBC_USE_IEC_60559_FUNCS_EXT
 1

	)

94 
	#__GLIBC_USE_IEC_60559_FUNCS_EXT
 0

	)

96 #unde‡
__GLIBC_USE_IEC_60559_FUNCS_EXT_C2X


97 #i‡
__GLIBC_USE
 (
IEC_60559_FUNCS_EXT
Ë|| __GLIBC_USE (
ISOC2X
)

98 
	#__GLIBC_USE_IEC_60559_FUNCS_EXT_C2X
 1

	)

100 
	#__GLIBC_USE_IEC_60559_FUNCS_EXT_C2X
 0

	)

105 #unde‡
__GLIBC_USE_IEC_60559_TYPES_EXT


106 #i‡
deföed
 
__USE_GNU
 || deföed 
__STDC_WANT_IEC_60559_TYPES_EXT__


107 
	#__GLIBC_USE_IEC_60559_TYPES_EXT
 1

	)

109 
	#__GLIBC_USE_IEC_60559_TYPES_EXT
 0

	)

	@/usr/include/x86_64-linux-gnu/bits/libm-simd-decl-stubs.h

19 #i‚de‡
_MATH_H


33 #i‚de‡
_BITS_LIBM_SIMD_DECL_STUBS_H


34 
	#_BITS_LIBM_SIMD_DECL_STUBS_H
 1

	)

36 
	#__DECL_SIMD_cos


	)

37 
	#__DECL_SIMD_cosf


	)

38 
	#__DECL_SIMD_co¶


	)

39 
	#__DECL_SIMD_cosf16


	)

40 
	#__DECL_SIMD_cosf32


	)

41 
	#__DECL_SIMD_cosf64


	)

42 
	#__DECL_SIMD_cosf128


	)

43 
	#__DECL_SIMD_cosf32x


	)

44 
	#__DECL_SIMD_cosf64x


	)

45 
	#__DECL_SIMD_cosf128x


	)

47 
	#__DECL_SIMD_sö


	)

48 
	#__DECL_SIMD_söf


	)

49 
	#__DECL_SIMD_söl


	)

50 
	#__DECL_SIMD_söf16


	)

51 
	#__DECL_SIMD_söf32


	)

52 
	#__DECL_SIMD_söf64


	)

53 
	#__DECL_SIMD_söf128


	)

54 
	#__DECL_SIMD_söf32x


	)

55 
	#__DECL_SIMD_söf64x


	)

56 
	#__DECL_SIMD_söf128x


	)

58 
	#__DECL_SIMD_söcos


	)

59 
	#__DECL_SIMD_söcosf


	)

60 
	#__DECL_SIMD_söco¶


	)

61 
	#__DECL_SIMD_söcosf16


	)

62 
	#__DECL_SIMD_söcosf32


	)

63 
	#__DECL_SIMD_söcosf64


	)

64 
	#__DECL_SIMD_söcosf128


	)

65 
	#__DECL_SIMD_söcosf32x


	)

66 
	#__DECL_SIMD_söcosf64x


	)

67 
	#__DECL_SIMD_söcosf128x


	)

69 
	#__DECL_SIMD_log


	)

70 
	#__DECL_SIMD_logf


	)

71 
	#__DECL_SIMD_logl


	)

72 
	#__DECL_SIMD_logf16


	)

73 
	#__DECL_SIMD_logf32


	)

74 
	#__DECL_SIMD_logf64


	)

75 
	#__DECL_SIMD_logf128


	)

76 
	#__DECL_SIMD_logf32x


	)

77 
	#__DECL_SIMD_logf64x


	)

78 
	#__DECL_SIMD_logf128x


	)

80 
	#__DECL_SIMD_exp


	)

81 
	#__DECL_SIMD_expf


	)

82 
	#__DECL_SIMD_ex∂


	)

83 
	#__DECL_SIMD_expf16


	)

84 
	#__DECL_SIMD_expf32


	)

85 
	#__DECL_SIMD_expf64


	)

86 
	#__DECL_SIMD_expf128


	)

87 
	#__DECL_SIMD_expf32x


	)

88 
	#__DECL_SIMD_expf64x


	)

89 
	#__DECL_SIMD_expf128x


	)

91 
	#__DECL_SIMD_pow


	)

92 
	#__DECL_SIMD_powf


	)

93 
	#__DECL_SIMD_powl


	)

94 
	#__DECL_SIMD_powf16


	)

95 
	#__DECL_SIMD_powf32


	)

96 
	#__DECL_SIMD_powf64


	)

97 
	#__DECL_SIMD_powf128


	)

98 
	#__DECL_SIMD_powf32x


	)

99 
	#__DECL_SIMD_powf64x


	)

100 
	#__DECL_SIMD_powf128x


	)

102 
	#__DECL_SIMD_acos


	)

103 
	#__DECL_SIMD_acosf


	)

104 
	#__DECL_SIMD_aco¶


	)

105 
	#__DECL_SIMD_acosf16


	)

106 
	#__DECL_SIMD_acosf32


	)

107 
	#__DECL_SIMD_acosf64


	)

108 
	#__DECL_SIMD_acosf128


	)

109 
	#__DECL_SIMD_acosf32x


	)

110 
	#__DECL_SIMD_acosf64x


	)

111 
	#__DECL_SIMD_acosf128x


	)

113 
	#__DECL_SIMD_©™


	)

114 
	#__DECL_SIMD_©™f


	)

115 
	#__DECL_SIMD_©™l


	)

116 
	#__DECL_SIMD_©™f16


	)

117 
	#__DECL_SIMD_©™f32


	)

118 
	#__DECL_SIMD_©™f64


	)

119 
	#__DECL_SIMD_©™f128


	)

120 
	#__DECL_SIMD_©™f32x


	)

121 
	#__DECL_SIMD_©™f64x


	)

122 
	#__DECL_SIMD_©™f128x


	)

124 
	#__DECL_SIMD_asö


	)

125 
	#__DECL_SIMD_asöf


	)

126 
	#__DECL_SIMD_asöl


	)

127 
	#__DECL_SIMD_asöf16


	)

128 
	#__DECL_SIMD_asöf32


	)

129 
	#__DECL_SIMD_asöf64


	)

130 
	#__DECL_SIMD_asöf128


	)

131 
	#__DECL_SIMD_asöf32x


	)

132 
	#__DECL_SIMD_asöf64x


	)

133 
	#__DECL_SIMD_asöf128x


	)

135 
	#__DECL_SIMD_hypŸ


	)

136 
	#__DECL_SIMD_hypŸf


	)

137 
	#__DECL_SIMD_hypŸl


	)

138 
	#__DECL_SIMD_hypŸf16


	)

139 
	#__DECL_SIMD_hypŸf32


	)

140 
	#__DECL_SIMD_hypŸf64


	)

141 
	#__DECL_SIMD_hypŸf128


	)

142 
	#__DECL_SIMD_hypŸf32x


	)

143 
	#__DECL_SIMD_hypŸf64x


	)

144 
	#__DECL_SIMD_hypŸf128x


	)

146 
	#__DECL_SIMD_exp2


	)

147 
	#__DECL_SIMD_exp2f


	)

148 
	#__DECL_SIMD_exp2l


	)

149 
	#__DECL_SIMD_exp2f16


	)

150 
	#__DECL_SIMD_exp2f32


	)

151 
	#__DECL_SIMD_exp2f64


	)

152 
	#__DECL_SIMD_exp2f128


	)

153 
	#__DECL_SIMD_exp2f32x


	)

154 
	#__DECL_SIMD_exp2f64x


	)

155 
	#__DECL_SIMD_exp2f128x


	)

157 
	#__DECL_SIMD_exp10


	)

158 
	#__DECL_SIMD_exp10f


	)

159 
	#__DECL_SIMD_exp10l


	)

160 
	#__DECL_SIMD_exp10f16


	)

161 
	#__DECL_SIMD_exp10f32


	)

162 
	#__DECL_SIMD_exp10f64


	)

163 
	#__DECL_SIMD_exp10f128


	)

164 
	#__DECL_SIMD_exp10f32x


	)

165 
	#__DECL_SIMD_exp10f64x


	)

166 
	#__DECL_SIMD_exp10f128x


	)

168 
	#__DECL_SIMD_cosh


	)

169 
	#__DECL_SIMD_coshf


	)

170 
	#__DECL_SIMD_coshl


	)

171 
	#__DECL_SIMD_coshf16


	)

172 
	#__DECL_SIMD_coshf32


	)

173 
	#__DECL_SIMD_coshf64


	)

174 
	#__DECL_SIMD_coshf128


	)

175 
	#__DECL_SIMD_coshf32x


	)

176 
	#__DECL_SIMD_coshf64x


	)

177 
	#__DECL_SIMD_coshf128x


	)

179 
	#__DECL_SIMD_expm1


	)

180 
	#__DECL_SIMD_expm1f


	)

181 
	#__DECL_SIMD_expm1l


	)

182 
	#__DECL_SIMD_expm1f16


	)

183 
	#__DECL_SIMD_expm1f32


	)

184 
	#__DECL_SIMD_expm1f64


	)

185 
	#__DECL_SIMD_expm1f128


	)

186 
	#__DECL_SIMD_expm1f32x


	)

187 
	#__DECL_SIMD_expm1f64x


	)

188 
	#__DECL_SIMD_expm1f128x


	)

190 
	#__DECL_SIMD_söh


	)

191 
	#__DECL_SIMD_söhf


	)

192 
	#__DECL_SIMD_söhl


	)

193 
	#__DECL_SIMD_söhf16


	)

194 
	#__DECL_SIMD_söhf32


	)

195 
	#__DECL_SIMD_söhf64


	)

196 
	#__DECL_SIMD_söhf128


	)

197 
	#__DECL_SIMD_söhf32x


	)

198 
	#__DECL_SIMD_söhf64x


	)

199 
	#__DECL_SIMD_söhf128x


	)

201 
	#__DECL_SIMD_cbπ


	)

202 
	#__DECL_SIMD_cbπf


	)

203 
	#__DECL_SIMD_cbπl


	)

204 
	#__DECL_SIMD_cbπf16


	)

205 
	#__DECL_SIMD_cbπf32


	)

206 
	#__DECL_SIMD_cbπf64


	)

207 
	#__DECL_SIMD_cbπf128


	)

208 
	#__DECL_SIMD_cbπf32x


	)

209 
	#__DECL_SIMD_cbπf64x


	)

210 
	#__DECL_SIMD_cbπf128x


	)

212 
	#__DECL_SIMD_©™2


	)

213 
	#__DECL_SIMD_©™2f


	)

214 
	#__DECL_SIMD_©™2l


	)

215 
	#__DECL_SIMD_©™2f16


	)

216 
	#__DECL_SIMD_©™2f32


	)

217 
	#__DECL_SIMD_©™2f64


	)

218 
	#__DECL_SIMD_©™2f128


	)

219 
	#__DECL_SIMD_©™2f32x


	)

220 
	#__DECL_SIMD_©™2f64x


	)

221 
	#__DECL_SIMD_©™2f128x


	)

223 
	#__DECL_SIMD_log10


	)

224 
	#__DECL_SIMD_log10f


	)

225 
	#__DECL_SIMD_log10l


	)

226 
	#__DECL_SIMD_log10f16


	)

227 
	#__DECL_SIMD_log10f32


	)

228 
	#__DECL_SIMD_log10f64


	)

229 
	#__DECL_SIMD_log10f128


	)

230 
	#__DECL_SIMD_log10f32x


	)

231 
	#__DECL_SIMD_log10f64x


	)

232 
	#__DECL_SIMD_log10f128x


	)

234 
	#__DECL_SIMD_log2


	)

235 
	#__DECL_SIMD_log2f


	)

236 
	#__DECL_SIMD_log2l


	)

237 
	#__DECL_SIMD_log2f16


	)

238 
	#__DECL_SIMD_log2f32


	)

239 
	#__DECL_SIMD_log2f64


	)

240 
	#__DECL_SIMD_log2f128


	)

241 
	#__DECL_SIMD_log2f32x


	)

242 
	#__DECL_SIMD_log2f64x


	)

243 
	#__DECL_SIMD_log2f128x


	)

245 
	#__DECL_SIMD_log1p


	)

246 
	#__DECL_SIMD_log1pf


	)

247 
	#__DECL_SIMD_log1∂


	)

248 
	#__DECL_SIMD_log1pf16


	)

249 
	#__DECL_SIMD_log1pf32


	)

250 
	#__DECL_SIMD_log1pf64


	)

251 
	#__DECL_SIMD_log1pf128


	)

252 
	#__DECL_SIMD_log1pf32x


	)

253 
	#__DECL_SIMD_log1pf64x


	)

254 
	#__DECL_SIMD_log1pf128x


	)

256 
	#__DECL_SIMD_©™h


	)

257 
	#__DECL_SIMD_©™hf


	)

258 
	#__DECL_SIMD_©™hl


	)

259 
	#__DECL_SIMD_©™hf16


	)

260 
	#__DECL_SIMD_©™hf32


	)

261 
	#__DECL_SIMD_©™hf64


	)

262 
	#__DECL_SIMD_©™hf128


	)

263 
	#__DECL_SIMD_©™hf32x


	)

264 
	#__DECL_SIMD_©™hf64x


	)

265 
	#__DECL_SIMD_©™hf128x


	)

267 
	#__DECL_SIMD_acosh


	)

268 
	#__DECL_SIMD_acoshf


	)

269 
	#__DECL_SIMD_acoshl


	)

270 
	#__DECL_SIMD_acoshf16


	)

271 
	#__DECL_SIMD_acoshf32


	)

272 
	#__DECL_SIMD_acoshf64


	)

273 
	#__DECL_SIMD_acoshf128


	)

274 
	#__DECL_SIMD_acoshf32x


	)

275 
	#__DECL_SIMD_acoshf64x


	)

276 
	#__DECL_SIMD_acoshf128x


	)

278 
	#__DECL_SIMD_îf


	)

279 
	#__DECL_SIMD_îff


	)

280 
	#__DECL_SIMD_îÊ


	)

281 
	#__DECL_SIMD_îff16


	)

282 
	#__DECL_SIMD_îff32


	)

283 
	#__DECL_SIMD_îff64


	)

284 
	#__DECL_SIMD_îff128


	)

285 
	#__DECL_SIMD_îff32x


	)

286 
	#__DECL_SIMD_îff64x


	)

287 
	#__DECL_SIMD_îff128x


	)

289 
	#__DECL_SIMD_ènh


	)

290 
	#__DECL_SIMD_ènhf


	)

291 
	#__DECL_SIMD_ènhl


	)

292 
	#__DECL_SIMD_ènhf16


	)

293 
	#__DECL_SIMD_ènhf32


	)

294 
	#__DECL_SIMD_ènhf64


	)

295 
	#__DECL_SIMD_ènhf128


	)

296 
	#__DECL_SIMD_ènhf32x


	)

297 
	#__DECL_SIMD_ènhf64x


	)

298 
	#__DECL_SIMD_ènhf128x


	)

300 
	#__DECL_SIMD_asöh


	)

301 
	#__DECL_SIMD_asöhf


	)

302 
	#__DECL_SIMD_asöhl


	)

303 
	#__DECL_SIMD_asöhf16


	)

304 
	#__DECL_SIMD_asöhf32


	)

305 
	#__DECL_SIMD_asöhf64


	)

306 
	#__DECL_SIMD_asöhf128


	)

307 
	#__DECL_SIMD_asöhf32x


	)

308 
	#__DECL_SIMD_asöhf64x


	)

309 
	#__DECL_SIMD_asöhf128x


	)

311 
	#__DECL_SIMD_îfc


	)

312 
	#__DECL_SIMD_îfcf


	)

313 
	#__DECL_SIMD_îf˛


	)

314 
	#__DECL_SIMD_îfcf16


	)

315 
	#__DECL_SIMD_îfcf32


	)

316 
	#__DECL_SIMD_îfcf64


	)

317 
	#__DECL_SIMD_îfcf128


	)

318 
	#__DECL_SIMD_îfcf32x


	)

319 
	#__DECL_SIMD_îfcf64x


	)

320 
	#__DECL_SIMD_îfcf128x


	)

322 
	#__DECL_SIMD_èn


	)

323 
	#__DECL_SIMD_ènf


	)

324 
	#__DECL_SIMD_è∆


	)

325 
	#__DECL_SIMD_ènf16


	)

326 
	#__DECL_SIMD_ènf32


	)

327 
	#__DECL_SIMD_ènf64


	)

328 
	#__DECL_SIMD_ènf128


	)

329 
	#__DECL_SIMD_ènf32x


	)

330 
	#__DECL_SIMD_ènf64x


	)

331 
	#__DECL_SIMD_ènf128x


	)

	@/usr/include/x86_64-linux-gnu/bits/link.h

18 #i‚def 
_LINK_H


23 #i‚de‡
__x86_64__


25 
	sLa_i86_ªgs


27 
uöt32_t
 
	mÃ_edx
;

28 
uöt32_t
 
	mÃ_ecx
;

29 
uöt32_t
 
	mÃ_óx
;

30 
uöt32_t
 
	mÃ_ebp
;

31 
uöt32_t
 
	mÃ_e•
;

32 } 
	tLa_i86_ªgs
;

35 
	sLa_i86_ªtvÆ


37 
uöt32_t
 
	mÃv_óx
;

38 
uöt32_t
 
	mÃv_edx
;

39 
	mÃv_°0
;

40 
	mÃv_°1
;

41 
uöt64_t
 
	m__glibc_unu£d1
;

42 
uöt64_t
 
	m__glibc_unu£d2
;

43 } 
	tLa_i86_ªtvÆ
;

46 
__BEGIN_DECLS


48 
Elf32_Addr
 
œ_i86_gnu_∂ã¡î
 (
Elf32_Sym
 *
__sym
, 
__ndx
,

49 
uöçå_t
 *
__ªfcook
,

50 
uöçå_t
 *
__defcook
,

51 
La_i86_ªgs
 *
__ªgs
,

52 *
__Êags
,

53 c⁄° *
__sym«me
,

54 *
__‰amesizï
);

55 
œ_i86_gnu_∂ãxô
 (
Elf32_Sym
 *
__sym
, 
__ndx
,

56 
uöçå_t
 *
__ªfcook
,

57 
uöçå_t
 *
__defcook
,

58 c⁄° 
La_i86_ªgs
 *
__öªgs
,

59 
La_i86_ªtvÆ
 *
__ouåegs
,

60 c⁄° *
sym«me
);

62 
	g__END_DECLS


67 #i‡
__GNUC_PREREQ
 (4,0)

68 
	tLa_x86_64_xmm
 
	t__©åibuã__
 ((
	t__ve˘‹_size__
 (16)));

69 
	tLa_x86_64_ymm


70 
	t__©åibuã__
 ((
	t__ve˘‹_size__
 (32), 
	t__Æig√d__
 (16)));

71 
	tLa_x86_64_zmm


72 
	t__©åibuã__
 ((
	t__ve˘‹_size__
 (64), 
	t__Æig√d__
 (16)));

74 
	tLa_x86_64_xmm
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__V4SF__
)));

79 #i‡
__GNUC_PREREQ
 (4,0)

80 
La_x86_64_ymm
 
	mymm
[2];

81 
La_x86_64_zmm
 
	mzmm
[1];

83 
La_x86_64_xmm
 
	mxmm
[4];

84 } 
	tLa_x86_64_ve˘‹
 
	t__©åibuã__
 ((
	t__Æig√d__
 (16)));

86 
	sLa_x86_64_ªgs


88 
uöt64_t
 
	mÃ_rdx
;

89 
uöt64_t
 
	mÃ_r8
;

90 
uöt64_t
 
	mÃ_r9
;

91 
uöt64_t
 
	mÃ_rcx
;

92 
uöt64_t
 
	mÃ_rsi
;

93 
uöt64_t
 
	mÃ_rdi
;

94 
uöt64_t
 
	mÃ_rbp
;

95 
uöt64_t
 
	mÃ_r•
;

96 
La_x86_64_xmm
 
	mÃ_xmm
[8];

97 
La_x86_64_ve˘‹
 
	mÃ_ve˘‹
[8];

98 #i‚de‡
__ILP32__


99 
__öt128_t
 
	m__glibc_unu£d1
[4];

101 } 
	tLa_x86_64_ªgs
;

104 
	sLa_x86_64_ªtvÆ


106 
uöt64_t
 
	mÃv_øx
;

107 
uöt64_t
 
	mÃv_rdx
;

108 
La_x86_64_xmm
 
	mÃv_xmm0
;

109 
La_x86_64_xmm
 
	mÃv_xmm1
;

110 
	mÃv_°0
;

111 
	mÃv_°1
;

112 
La_x86_64_ve˘‹
 
	mÃv_ve˘‹0
;

113 
La_x86_64_ve˘‹
 
	mÃv_ve˘‹1
;

114 #i‚de‡
__ILP32__


115 
__öt128_t
 
	m__glibc_unu£d1
;

116 
__öt128_t
 
	m__glibc_unu£d2
;

118 } 
	tLa_x86_64_ªtvÆ
;

120 
	#La_x32_ªgs
 
La_x86_64_ªgs


	)

121 
	#La_x32_ªtvÆ
 
La_x86_64_ªtvÆ


	)

123 
__BEGIN_DECLS


125 
Elf64_Addr
 
œ_x86_64_gnu_∂ã¡î
 (
Elf64_Sym
 *
__sym
,

126 
__ndx
,

127 
uöçå_t
 *
__ªfcook
,

128 
uöçå_t
 *
__defcook
,

129 
La_x86_64_ªgs
 *
__ªgs
,

130 *
__Êags
,

131 c⁄° *
__sym«me
,

132 *
__‰amesizï
);

133 
œ_x86_64_gnu_∂ãxô
 (
Elf64_Sym
 *
__sym
,

134 
__ndx
,

135 
uöçå_t
 *
__ªfcook
,

136 
uöçå_t
 *
__defcook
,

137 c⁄° 
La_x86_64_ªgs
 *
__öªgs
,

138 
La_x86_64_ªtvÆ
 *
__ouåegs
,

139 c⁄° *
__sym«me
);

141 
Elf32_Addr
 
œ_x32_gnu_∂ã¡î
 (
Elf32_Sym
 *
__sym
,

142 
__ndx
,

143 
uöçå_t
 *
__ªfcook
,

144 
uöçå_t
 *
__defcook
,

145 
La_x32_ªgs
 *
__ªgs
,

146 *
__Êags
,

147 c⁄° *
__sym«me
,

148 *
__‰amesizï
);

149 
œ_x32_gnu_∂ãxô
 (
Elf32_Sym
 *
__sym
,

150 
__ndx
,

151 
uöçå_t
 *
__ªfcook
,

152 
uöçå_t
 *
__defcook
,

153 c⁄° 
La_x32_ªgs
 *
__öªgs
,

154 
La_x32_ªtvÆ
 *
__ouåegs
,

155 c⁄° *
__sym«me
);

157 
	g__END_DECLS


	@/usr/include/x86_64-linux-gnu/bits/link_lavcurrent.h

20 #i‚de‡
_LINK_H


25 
	#LAV_CURRENT
 2

	)

	@/usr/include/x86_64-linux-gnu/bits/local_lim.h

24 #i‚de‡
NR_OPEN


25 
	#__undef_NR_OPEN


	)

27 #i‚de‡
LINK_MAX


28 
	#__undef_LINK_MAX


	)

30 #i‚de‡
OPEN_MAX


31 
	#__undef_OPEN_MAX


	)

33 #i‚de‡
ARG_MAX


34 
	#__undef_ARG_MAX


	)

38 
	~<löux/limôs.h
>

41 #ifde‡
__undef_NR_OPEN


42 #unde‡
NR_OPEN


43 #unde‡
__undef_NR_OPEN


46 #ifde‡
__undef_LINK_MAX


47 #unde‡
LINK_MAX


48 #unde‡
__undef_LINK_MAX


51 #ifde‡
__undef_OPEN_MAX


52 #unde‡
OPEN_MAX


53 #unde‡
__undef_OPEN_MAX


56 #ifde‡
__undef_ARG_MAX


57 #unde‡
ARG_MAX


58 #unde‡
__undef_ARG_MAX


62 
	#_POSIX_THREAD_KEYS_MAX
 128

	)

64 
	#PTHREAD_KEYS_MAX
 1024

	)

67 
	#_POSIX_THREAD_DESTRUCTOR_ITERATIONS
 4

	)

69 
	#PTHREAD_DESTRUCTOR_ITERATIONS
 
_POSIX_THREAD_DESTRUCTOR_ITERATIONS


	)

72 
	#_POSIX_THREAD_THREADS_MAX
 64

	)

74 #unde‡
PTHREAD_THREADS_MAX


78 
	#AIO_PRIO_DELTA_MAX
 20

	)

81 
	~<bôs/±hªad_°ack_mö-dy«mic.h
>

84 
	#DELAYTIMER_MAX
 2147483647

	)

87 
	#TTY_NAME_MAX
 32

	)

90 
	#LOGIN_NAME_MAX
 256

	)

93 
	#HOST_NAME_MAX
 64

	)

96 
	#MQ_PRIO_MAX
 32768

	)

99 
	#SEM_VALUE_MAX
 (2147483647)

	)

	@/usr/include/x86_64-linux-gnu/bits/locale.h

19 #i‡!
deföed
 
_LOCALE_H
 && !deföed 
_LANGINFO_H


23 #i‚de‡
_BITS_LOCALE_H


24 
	#_BITS_LOCALE_H
 1

	)

26 
	#__LC_CTYPE
 0

	)

27 
	#__LC_NUMERIC
 1

	)

28 
	#__LC_TIME
 2

	)

29 
	#__LC_COLLATE
 3

	)

30 
	#__LC_MONETARY
 4

	)

31 
	#__LC_MESSAGES
 5

	)

32 
	#__LC_ALL
 6

	)

33 
	#__LC_PAPER
 7

	)

34 
	#__LC_NAME
 8

	)

35 
	#__LC_ADDRESS
 9

	)

36 
	#__LC_TELEPHONE
 10

	)

37 
	#__LC_MEASUREMENT
 11

	)

38 
	#__LC_IDENTIFICATION
 12

	)

	@/usr/include/x86_64-linux-gnu/bits/long-double.h

21 
	#__LDOUBLE_REDIRECTS_TO_FLOAT128_ABI
 0

	)

	@/usr/include/x86_64-linux-gnu/bits/math-vector.h

19 #i‚de‡
_MATH_H


25 
	~<bôs/libm-simd-de˛-°ubs.h
>

27 #i‡
deföed
 
__x86_64__
 && deföed 
__FAST_MATH__


28 #i‡
deföed
 
_OPENMP
 && _OPENMP >= 201307

30 
	#__DECL_SIMD_x86_64
 
	`_Pøgma
 ("om∞de˛¨êsimdÇŸöbønch")

	)

31 #ñi‡
__GNUC_PREREQ
 (6,0)

33 
	#__DECL_SIMD_x86_64
 
	`__©åibuã__
 ((
	`__simd__
 ("nŸöbønch")))

	)

36 #ifde‡
__DECL_SIMD_x86_64


37 #unde‡
__DECL_SIMD_cos


38 
	#__DECL_SIMD_cos
 
__DECL_SIMD_x86_64


	)

39 #unde‡
__DECL_SIMD_cosf


40 
	#__DECL_SIMD_cosf
 
__DECL_SIMD_x86_64


	)

41 #unde‡
__DECL_SIMD_sö


42 
	#__DECL_SIMD_sö
 
__DECL_SIMD_x86_64


	)

43 #unde‡
__DECL_SIMD_söf


44 
	#__DECL_SIMD_söf
 
__DECL_SIMD_x86_64


	)

45 #unde‡
__DECL_SIMD_söcos


46 
	#__DECL_SIMD_söcos
 
__DECL_SIMD_x86_64


	)

47 #unde‡
__DECL_SIMD_söcosf


48 
	#__DECL_SIMD_söcosf
 
__DECL_SIMD_x86_64


	)

49 #unde‡
__DECL_SIMD_log


50 
	#__DECL_SIMD_log
 
__DECL_SIMD_x86_64


	)

51 #unde‡
__DECL_SIMD_logf


52 
	#__DECL_SIMD_logf
 
__DECL_SIMD_x86_64


	)

53 #unde‡
__DECL_SIMD_exp


54 
	#__DECL_SIMD_exp
 
__DECL_SIMD_x86_64


	)

55 #unde‡
__DECL_SIMD_expf


56 
	#__DECL_SIMD_expf
 
__DECL_SIMD_x86_64


	)

57 #unde‡
__DECL_SIMD_pow


58 
	#__DECL_SIMD_pow
 
__DECL_SIMD_x86_64


	)

59 #unde‡
__DECL_SIMD_powf


60 
	#__DECL_SIMD_powf
 
__DECL_SIMD_x86_64


	)

61 #unde‡
__DECL_SIMD_acos


62 
	#__DECL_SIMD_acos
 
__DECL_SIMD_x86_64


	)

63 #unde‡
__DECL_SIMD_acosf


64 
	#__DECL_SIMD_acosf
 
__DECL_SIMD_x86_64


	)

65 #unde‡
__DECL_SIMD_©™


66 
	#__DECL_SIMD_©™
 
__DECL_SIMD_x86_64


	)

67 #unde‡
__DECL_SIMD_©™f


68 
	#__DECL_SIMD_©™f
 
__DECL_SIMD_x86_64


	)

69 #unde‡
__DECL_SIMD_asö


70 
	#__DECL_SIMD_asö
 
__DECL_SIMD_x86_64


	)

71 #unde‡
__DECL_SIMD_asöf


72 
	#__DECL_SIMD_asöf
 
__DECL_SIMD_x86_64


	)

73 #unde‡
__DECL_SIMD_hypŸ


74 
	#__DECL_SIMD_hypŸ
 
__DECL_SIMD_x86_64


	)

75 #unde‡
__DECL_SIMD_hypŸf


76 
	#__DECL_SIMD_hypŸf
 
__DECL_SIMD_x86_64


	)

77 #unde‡
__DECL_SIMD_exp2


78 
	#__DECL_SIMD_exp2
 
__DECL_SIMD_x86_64


	)

79 #unde‡
__DECL_SIMD_exp2f


80 
	#__DECL_SIMD_exp2f
 
__DECL_SIMD_x86_64


	)

81 #unde‡
__DECL_SIMD_exp10


82 
	#__DECL_SIMD_exp10
 
__DECL_SIMD_x86_64


	)

83 #unde‡
__DECL_SIMD_exp10f


84 
	#__DECL_SIMD_exp10f
 
__DECL_SIMD_x86_64


	)

85 #unde‡
__DECL_SIMD_cosh


86 
	#__DECL_SIMD_cosh
 
__DECL_SIMD_x86_64


	)

87 #unde‡
__DECL_SIMD_coshf


88 
	#__DECL_SIMD_coshf
 
__DECL_SIMD_x86_64


	)

89 #unde‡
__DECL_SIMD_expm1


90 
	#__DECL_SIMD_expm1
 
__DECL_SIMD_x86_64


	)

91 #unde‡
__DECL_SIMD_expm1f


92 
	#__DECL_SIMD_expm1f
 
__DECL_SIMD_x86_64


	)

93 #unde‡
__DECL_SIMD_söh


94 
	#__DECL_SIMD_söh
 
__DECL_SIMD_x86_64


	)

95 #unde‡
__DECL_SIMD_söhf


96 
	#__DECL_SIMD_söhf
 
__DECL_SIMD_x86_64


	)

97 #unde‡
__DECL_SIMD_cbπ


98 
	#__DECL_SIMD_cbπ
 
__DECL_SIMD_x86_64


	)

99 #unde‡
__DECL_SIMD_cbπf


100 
	#__DECL_SIMD_cbπf
 
__DECL_SIMD_x86_64


	)

101 #unde‡
__DECL_SIMD_©™2


102 
	#__DECL_SIMD_©™2
 
__DECL_SIMD_x86_64


	)

103 #unde‡
__DECL_SIMD_©™2f


104 
	#__DECL_SIMD_©™2f
 
__DECL_SIMD_x86_64


	)

105 #unde‡
__DECL_SIMD_log10


106 
	#__DECL_SIMD_log10
 
__DECL_SIMD_x86_64


	)

107 #unde‡
__DECL_SIMD_log10f


108 
	#__DECL_SIMD_log10f
 
__DECL_SIMD_x86_64


	)

109 #unde‡
__DECL_SIMD_log2


110 
	#__DECL_SIMD_log2
 
__DECL_SIMD_x86_64


	)

111 #unde‡
__DECL_SIMD_log2f


112 
	#__DECL_SIMD_log2f
 
__DECL_SIMD_x86_64


	)

113 #unde‡
__DECL_SIMD_log1p


114 
	#__DECL_SIMD_log1p
 
__DECL_SIMD_x86_64


	)

115 #unde‡
__DECL_SIMD_log1pf


116 
	#__DECL_SIMD_log1pf
 
__DECL_SIMD_x86_64


	)

117 #unde‡
__DECL_SIMD_©™h


118 
	#__DECL_SIMD_©™h
 
__DECL_SIMD_x86_64


	)

119 #unde‡
__DECL_SIMD_©™hf


120 
	#__DECL_SIMD_©™hf
 
__DECL_SIMD_x86_64


	)

121 #unde‡
__DECL_SIMD_acosh


122 
	#__DECL_SIMD_acosh
 
__DECL_SIMD_x86_64


	)

123 #unde‡
__DECL_SIMD_acoshf


124 
	#__DECL_SIMD_acoshf
 
__DECL_SIMD_x86_64


	)

125 #unde‡
__DECL_SIMD_îf


126 
	#__DECL_SIMD_îf
 
__DECL_SIMD_x86_64


	)

127 #unde‡
__DECL_SIMD_îff


128 
	#__DECL_SIMD_îff
 
__DECL_SIMD_x86_64


	)

129 #unde‡
__DECL_SIMD_ènh


130 
	#__DECL_SIMD_ènh
 
__DECL_SIMD_x86_64


	)

131 #unde‡
__DECL_SIMD_ènhf


132 
	#__DECL_SIMD_ènhf
 
__DECL_SIMD_x86_64


	)

133 #unde‡
__DECL_SIMD_asöh


134 
	#__DECL_SIMD_asöh
 
__DECL_SIMD_x86_64


	)

135 #unde‡
__DECL_SIMD_asöhf


136 
	#__DECL_SIMD_asöhf
 
__DECL_SIMD_x86_64


	)

137 #unde‡
__DECL_SIMD_îfc


138 
	#__DECL_SIMD_îfc
 
__DECL_SIMD_x86_64


	)

139 #unde‡
__DECL_SIMD_îfcf


140 
	#__DECL_SIMD_îfcf
 
__DECL_SIMD_x86_64


	)

141 #unde‡
__DECL_SIMD_èn


142 
	#__DECL_SIMD_èn
 
__DECL_SIMD_x86_64


	)

143 #unde‡
__DECL_SIMD_ènf


144 
	#__DECL_SIMD_ènf
 
__DECL_SIMD_x86_64


	)

	@/usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h

20 
__MATHDECL_ALIAS
 (, 
__Â˛assify
,, (
_MdoubÀ_
 
__vÆue
), 
Â˛assify
)

21 
__©åibuã__
 ((
__c⁄°__
));

24 
__MATHDECL_ALIAS
 (, 
__signbô
,, (
_MdoubÀ_
 
__vÆue
), 
signbô
)

25 
__©åibuã__
 ((
__c⁄°__
));

29 
__MATHDECL_ALIAS
 (, 
__isöf
,, (
_MdoubÀ_
 
__vÆue
), 
isöf
)

30 
__©åibuã__
 ((
__c⁄°__
));

33 
__MATHDECL_ALIAS
 (, 
__föôe
,, (
_MdoubÀ_
 
__vÆue
), 
föôe
)

34 
__©åibuã__
 ((
__c⁄°__
));

37 
__MATHDECL_ALIAS
 (, 
__i¢™
,, (
_MdoubÀ_
 
__vÆue
), 
i¢™
)

38 
__©åibuã__
 ((
__c⁄°__
));

41 
__MATHDECL_ALIAS
 (, 
__i£qsig
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), 
i£qsig
);

44 
__MATHDECL_ALIAS
 (, 
__issig«lög
,, (
_MdoubÀ_
 
__vÆue
), 
issig«lög
)

45 
__©åibuã__
 ((
__c⁄°__
));

	@/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h

19 #i‚de‡
_MATH_H


24 
__MATHCALL_NARROW
 (
__MATHCALL_NAME
 (
add
), 
__MATHCALL_REDIR_NAME
 (add), 2);

27 
__MATHCALL_NARROW
 (
__MATHCALL_NAME
 (
div
), 
__MATHCALL_REDIR_NAME
 (div), 2);

30 
__MATHCALL_NARROW
 (
__MATHCALL_NAME
 (
fma
), 
__MATHCALL_REDIR_NAME2
 (fma), 3);

33 
__MATHCALL_NARROW
 (
__MATHCALL_NAME
 (
mul
), 
__MATHCALL_REDIR_NAME
 (mul), 2);

36 
__MATHCALL_NARROW
 (
__MATHCALL_NAME
 (
sqπ
), 
__MATHCALL_REDIR_NAME2
 (sqrt), 1);

39 
__MATHCALL_NARROW
 (
__MATHCALL_NAME
 (
sub
), 
__MATHCALL_REDIR_NAME
 (sub), 2);

	@/usr/include/x86_64-linux-gnu/bits/mathcalls.h

45 #i‚de‡
_MATH_H


53 
__MATHCALL_VEC
 (
acos
,, (
_MdoubÀ_
 
__x
));

55 
__MATHCALL_VEC
 (
asö
,, (
_MdoubÀ_
 
__x
));

57 
__MATHCALL_VEC
 (
©™
,, (
_MdoubÀ_
 
__x
));

59 
__MATHCALL_VEC
 (
©™2
,, (
_MdoubÀ_
 
__y
, _MdoubÀ_ 
__x
));

62 
__MATHCALL_VEC
 (
cos
,, (
_MdoubÀ_
 
__x
));

64 
__MATHCALL_VEC
 (
sö
,, (
_MdoubÀ_
 
__x
));

66 
__MATHCALL_VEC
 (
èn
,, (
_MdoubÀ_
 
__x
));

71 
__MATHCALL_VEC
 (
cosh
,, (
_MdoubÀ_
 
__x
));

73 
__MATHCALL_VEC
 (
söh
,, (
_MdoubÀ_
 
__x
));

75 
__MATHCALL_VEC
 (
ènh
,, (
_MdoubÀ_
 
__x
));

77 #ifde‡
__USE_GNU


79 
__MATHDECL_VEC
 (,
söcos
,,

80 (
_MdoubÀ_
 
__x
, _MdoubÀ_ *
__söx
, _MdoubÀ_ *
__cosx
));

83 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


85 
__MATHCALL_VEC
 (
acosh
,, (
_MdoubÀ_
 
__x
));

87 
__MATHCALL_VEC
 (
asöh
,, (
_MdoubÀ_
 
__x
));

89 
__MATHCALL_VEC
 (
©™h
,, (
_MdoubÀ_
 
__x
));

95 
__MATHCALL_VEC
 (
exp
,, (
_MdoubÀ_
 
__x
));

98 
__MATHCALL
 (
‰exp
,, (
_MdoubÀ_
 
__x
, *
__exp⁄ít
));

101 
__MATHCALL
 (
ldexp
,, (
_MdoubÀ_
 
__x
, 
__exp⁄ít
));

104 
__MATHCALL_VEC
 (
log
,, (
_MdoubÀ_
 
__x
));

107 
__MATHCALL_VEC
 (
log10
,, (
_MdoubÀ_
 
__x
));

110 
__MATHCALL
 (
modf
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ *
__ùå
)Ë
__n⁄nuŒ
 ((2));

112 #i‡
__GLIBC_USE
 (
IEC_60559_FUNCS_EXT_C2X
)

114 
__MATHCALL_VEC
 (
exp10
,, (
_MdoubÀ_
 
__x
));

117 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


119 
__MATHCALL_VEC
 (
expm1
,, (
_MdoubÀ_
 
__x
));

122 
__MATHCALL_VEC
 (
log1p
,, (
_MdoubÀ_
 
__x
));

125 
__MATHCALL
 (
logb
,, (
_MdoubÀ_
 
__x
));

128 #ifde‡
__USE_ISOC99


130 
__MATHCALL_VEC
 (
exp2
,, (
_MdoubÀ_
 
__x
));

133 
__MATHCALL_VEC
 (
log2
,, (
_MdoubÀ_
 
__x
));

140 
__MATHCALL_VEC
 (
pow
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

143 
__MATHCALL
 (
sqπ
,, (
_MdoubÀ_
 
__x
));

145 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_ISOC99


147 
__MATHCALL_VEC
 (
hypŸ
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

150 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


152 
__MATHCALL_VEC
 (
cbπ
,, (
_MdoubÀ_
 
__x
));

159 
__MATHCALLX
 (
˚û
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

162 
__MATHCALLX
 (
Ábs
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

165 
__MATHCALLX
 (
Êo‹
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

168 
__MATHCALL
 (
fmod
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

170 #ifde‡
__USE_MISC


171 #i‡((!
deföed
 
__˝lu•lus
 \

172 || 
	g__˝lu•lus
 < 201103L \

173 || 
	g__MATH_DECLARING_DOUBLE
 == 0)) \

174 && !
__MATH_DECLARING_FLOATN


177 
__MATHDECL_ALIAS
 (,
isöf
,, (
_MdoubÀ_
 
__vÆue
), isinf)

178 
__©åibuã__
 ((
__c⁄°__
));

181 #i‡!
__MATH_DECLARING_FLOATN


183 
__MATHDECL_ALIAS
 (,
föôe
,, (
_MdoubÀ_
 
__vÆue
), finite)

184 
__©åibuã__
 ((
__c⁄°__
));

187 
__MATHCALL
 (
dªm
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

191 
__MATHCALL
 (
signifiˇnd
,, (
_MdoubÀ_
 
__x
));

196 #ifde‡
__USE_ISOC99


198 
__MATHCALLX
 (
c›ysign
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

201 #ifde‡
__USE_ISOC99


203 
__MATHCALL
 (
«n
,, (c⁄° *
__ègb
));

207 #i‡
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

208 #i‡((!
deföed
 
__˝lu•lus
 \

209 || 
	g__˝lu•lus
 < 201103L \

210 || 
	g__MATH_DECLARING_DOUBLE
 == 0)) \

211 && !
__MATH_DECLARING_FLOATN


213 
__MATHDECL_ALIAS
 (,
i¢™
,, (
_MdoubÀ_
 
__vÆue
), isnan)

214 
__©åibuã__
 ((
__c⁄°__
));

218 #i‡
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && 
__MATH_DECLARING_DOUBLE
)

220 
__MATHCALL
 (
j0
,, (
_MdoubÀ_
));

221 
__MATHCALL
 (
j1
,, (
_MdoubÀ_
));

222 
__MATHCALL
 (
jn
,, (, 
_MdoubÀ_
));

223 
__MATHCALL
 (
y0
,, (
_MdoubÀ_
));

224 
__MATHCALL
 (
y1
,, (
_MdoubÀ_
));

225 
__MATHCALL
 (
yn
,, (, 
_MdoubÀ_
));

229 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_ISOC99


231 
__MATHCALL_VEC
 (
îf
,, (
_MdoubÀ_
));

232 
__MATHCALL_VEC
 (
îfc
,, (
_MdoubÀ_
));

233 
__MATHCALL
 (
lgamma
,, (
_MdoubÀ_
));

236 #ifde‡
__USE_ISOC99


238 
__MATHCALL
 (
tgamma
,, (
_MdoubÀ_
));

241 #i‡
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

242 #i‡!
__MATH_DECLARING_FLOATN


244 
__MATHCALL
 (
gamma
,, (
_MdoubÀ_
));

248 #ifde‡
__USE_MISC


252 
__MATHCALL
 (
lgamma
,
_r
, (
_MdoubÀ_
, *
__signgamp
));

256 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


259 
__MATHCALL
 (
röt
,, (
_MdoubÀ_
 
__x
));

262 
__MATHCALL
 (
√xè·î
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

263 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__LDBL_COMPAT
 && !
__MATH_DECLARING_FLOATN


264 
__MATHCALL
 (
√xâow¨d
,, (
_MdoubÀ_
 
__x
, 
__y
));

267 #i‡
__GLIBC_USE
 (
IEC_60559_BFP_EXT_C2X
Ë|| 
__MATH_DECLARING_FLOATN


269 
__MATHCALL
 (
√xtdown
,, (
_MdoubÀ_
 
__x
));

271 
__MATHCALL
 (
√xtup
,, (
_MdoubÀ_
 
__x
));

275 
__MATHCALL
 (
ªmaödî
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

277 #ifde‡
__USE_ISOC99


279 
__MATHCALL
 (
sˇlbn
,, (
_MdoubÀ_
 
__x
, 
__n
));

283 
__MATHDECL
 (,
ûogb
,, (
_MdoubÀ_
 
__x
));

286 #i‡
__GLIBC_USE
 (
IEC_60559_BFP_EXT_C2X
Ë|| 
__MATH_DECLARING_FLOATN


288 
__MATHDECL
 (, 
Œogb
,, (
_MdoubÀ_
 
__x
));

291 #ifde‡
__USE_ISOC99


293 
__MATHCALL
 (
sˇlb 
,, (
_MdoubÀ_
 
__x
, 
__n
));

297 
__MATHCALL
 (
√¨byöt
,, (
_MdoubÀ_
 
__x
));

301 
__MATHCALLX
 (
round
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

305 
__MATHCALLX
 (
åunc
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

310 
__MATHCALL
 (
ªmquo
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
, *
__quo
));

317 
__MATHDECL
 (,
Ãöt
,, (
_MdoubÀ_
 
__x
));

318 
__exãnsi⁄__


319 
__MATHDECL
 (,
Œröt
,, (
_MdoubÀ_
 
__x
));

323 
__MATHDECL
 (,
Ãound
,, (
_MdoubÀ_
 
__x
));

324 
__exãnsi⁄__


325 
__MATHDECL
 (,
Œround
,, (
_MdoubÀ_
 
__x
));

329 
__MATHCALL
 (
fdim
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

331 #i‡!
__MATH_DECLARING_FLOATN
 || 
deföed
 
__USE_GNU
 || !
__GLIBC_USE
 (
ISOC2X
)

333 
__MATHCALLX
 (
fmax
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

336 
__MATHCALLX
 (
fmö
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

340 
__MATHCALL
 (
fma
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
, _MdoubÀ_ 
__z
));

343 #i‡
__GLIBC_USE
 (
IEC_60559_BFP_EXT_C2X
Ë|| 
__MATH_DECLARING_FLOATN


345 
__MATHCALLX
 (
roundeví
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

349 
__MATHDECL
 (
__ötmax_t
, 
‰omÂ
,, (
_MdoubÀ_
 
__x
, 
__round
,

350 
__width
));

354 
__MATHDECL
 (
__uötmax_t
, 
u‰omÂ
,, (
_MdoubÀ_
 
__x
, 
__round
,

355 
__width
));

360 
__MATHDECL
 (
__ötmax_t
, 
‰omÂx
,, (
_MdoubÀ_
 
__x
, 
__round
,

361 
__width
));

366 
__MATHDECL
 (
__uötmax_t
, 
u‰omÂx
,, (
_MdoubÀ_
 
__x
, 
__round
,

367 
__width
));

370 
__MATHDECL_1
 (, 
ˇn⁄iˇlize
,, (
_MdoubÀ_
 *
__cx
, c⁄° _MdoubÀ_ *
__x
));

373 #i‡(
__GLIBC_USE
 (
IEC_60559_BFP_EXT
) \

374 || (
	g__MATH_DECLARING_FLOATN
 \

375 && (
deföed
 
	g__USE_GNU
 || !
	$__GLIBC_USE
 (
ISOC2X
))))

377 
	`__MATHCALLX
 (
fmaxmag
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

380 
	`__MATHCALLX
 (
fmömag
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

383 #i‡
	`__GLIBC_USE
 (
ISOC2X
)

385 
	`__MATHCALLX
 (
fmaximum
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

388 
	`__MATHCALLX
 (
fmöimum
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

391 
	`__MATHCALLX
 (
fmaximum_num
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

394 
	`__MATHCALLX
 (
fmöimum_num
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

397 
	`__MATHCALLX
 (
fmaximum_mag
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

400 
	`__MATHCALLX
 (
fmöimum_mag
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

403 
	`__MATHCALLX
 (
fmaximum_mag_num
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

406 
	`__MATHCALLX
 (
fmöimum_mag_num
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

409 #i‡
	`__GLIBC_USE
 (
IEC_60559_EXT
Ë|| 
__MATH_DECLARING_FLOATN


411 
	`__MATHDECL_1
 (, 
tŸÆ‹dî
,, (c⁄° 
_MdoubÀ_
 *
__x
,

412 c⁄° 
_MdoubÀ_
 *
__y
))

413 
__©åibuã_puª__
;

416 
	`__MATHDECL_1
 (, 
tŸÆ‹dîmag
,, (c⁄° 
_MdoubÀ_
 *
__x
,

417 c⁄° 
_MdoubÀ_
 *
__y
))

418 
__©åibuã_puª__
;

421 
	`__MATHCALL
 (
gë∑ylﬂd
,, (c⁄° 
_MdoubÀ_
 *
__x
));

424 
	`__MATHDECL_1
 (, 
£çaylﬂd
,, (
_MdoubÀ_
 *
__x
, _MdoubÀ_ 
__∑ylﬂd
));

427 
	`__MATHDECL_1
 (, 
£çaylﬂdsig
,, (
_MdoubÀ_
 *
__x
, _MdoubÀ_ 
__∑ylﬂd
));

430 #i‡(
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN_EXTENDED
 \

431 && 
__MATH_DECLARING_DOUBLE
 \

432 && !
deföed
 
__USE_XOPEN2K8
)) \

433 && !
__MATH_DECLARING_FLOATN


435 
	`__MATHCALL
 (
sˇlb
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__n
));

	@/usr/include/x86_64-linux-gnu/bits/mathdef.h

18 #i‚de‡
_COMPLEX_H


	@/usr/include/x86_64-linux-gnu/bits/mman-linux.h

19 #i‚de‡
_SYS_MMAN_H


32 
	#PROT_READ
 0x1

	)

33 
	#PROT_WRITE
 0x2

	)

34 
	#PROT_EXEC
 0x4

	)

35 
	#PROT_NONE
 0x0

	)

36 
	#PROT_GROWSDOWN
 0x01000000

	)

38 
	#PROT_GROWSUP
 0x02000000

	)

42 
	#MAP_SHARED
 0x01

	)

43 
	#MAP_PRIVATE
 0x02

	)

44 #ifde‡
__USE_MISC


45 
	#MAP_SHARED_VALIDATE
 0x03

	)

47 
	#MAP_TYPE
 0x0‡

	)

51 
	#MAP_FIXED
 0x10

	)

52 #ifde‡
__USE_MISC


53 
	#MAP_FILE
 0

	)

54 #ifde‡
__MAP_ANONYMOUS


55 
	#MAP_ANONYMOUS
 
__MAP_ANONYMOUS


	)

57 
	#MAP_ANONYMOUS
 0x20

	)

59 
	#MAP_ANON
 
MAP_ANONYMOUS


	)

61 
	#MAP_HUGE_SHIFT
 26

	)

62 
	#MAP_HUGE_MASK
 0x3f

	)

66 
	#MS_ASYNC
 1

	)

67 
	#MS_SYNC
 4

	)

68 
	#MS_INVALIDATE
 2

	)

71 #ifde‡
__USE_MISC


72 
	#MADV_NORMAL
 0

	)

73 
	#MADV_RANDOM
 1

	)

74 
	#MADV_SEQUENTIAL
 2

	)

75 
	#MADV_WILLNEED
 3

	)

76 
	#MADV_DONTNEED
 4

	)

77 
	#MADV_FREE
 8

	)

78 
	#MADV_REMOVE
 9

	)

79 
	#MADV_DONTFORK
 10

	)

80 
	#MADV_DOFORK
 11

	)

81 
	#MADV_MERGEABLE
 12

	)

82 
	#MADV_UNMERGEABLE
 13

	)

83 
	#MADV_HUGEPAGE
 14

	)

84 
	#MADV_NOHUGEPAGE
 15

	)

85 
	#MADV_DONTDUMP
 16

	)

87 
	#MADV_DODUMP
 17

	)

88 
	#MADV_WIPEONFORK
 18

	)

89 
	#MADV_KEEPONFORK
 19

	)

90 
	#MADV_COLD
 20

	)

91 
	#MADV_PAGEOUT
 21

	)

92 
	#MADV_POPULATE_READ
 22

	)

94 
	#MADV_POPULATE_WRITE
 23

	)

96 
	#MADV_HWPOISON
 100

	)

100 #ifde‡
__USE_XOPEN2K


101 
	#POSIX_MADV_NORMAL
 0

	)

102 
	#POSIX_MADV_RANDOM
 1

	)

103 
	#POSIX_MADV_SEQUENTIAL
 2

	)

104 
	#POSIX_MADV_WILLNEED
 3

	)

105 
	#POSIX_MADV_DONTNEED
 4

	)

109 #i‚de‡
MCL_CURRENT


110 
	#MCL_CURRENT
 1

	)

111 
	#MCL_FUTURE
 2

	)

113 
	#MCL_ONFAULT
 4

	)

117 
	~<bôs/mm™-sh¨ed.h
>

	@/usr/include/x86_64-linux-gnu/bits/mman-map-flags-generic.h

19 #i‚de‡
_SYS_MMAN_H


28 #ifde‡
__USE_MISC


29 
	#MAP_GROWSDOWN
 0x00100

	)

30 
	#MAP_DENYWRITE
 0x00800

	)

31 
	#MAP_EXECUTABLE
 0x01000

	)

32 
	#MAP_LOCKED
 0x02000

	)

33 
	#MAP_NORESERVE
 0x04000

	)

34 
	#MAP_POPULATE
 0x08000

	)

35 
	#MAP_NONBLOCK
 0x10000

	)

36 
	#MAP_STACK
 0x20000

	)

37 
	#MAP_HUGETLB
 0x40000

	)

38 
	#MAP_SYNC
 0x80000

	)

40 
	#MAP_FIXED_NOREPLACE
 0x100000

	)

	@/usr/include/x86_64-linux-gnu/bits/mman-shared.h

19 #i‚de‡
_SYS_MMAN_H


23 #ifde‡
__USE_GNU


25 
	#MREMAP_MAYMOVE
 1

	)

26 
	#MREMAP_FIXED
 2

	)

27 
	#MREMAP_DONTUNMAP
 4

	)

30 #i‚de‡
MFD_CLOEXEC


31 
	#MFD_CLOEXEC
 1U

	)

32 
	#MFD_ALLOW_SEALING
 2U

	)

33 
	#MFD_HUGETLB
 4U

	)

37 #i‚de‡
MLOCK_ONFAULT


38 
	#MLOCK_ONFAULT
 1U

	)

42 #i‚de‡
PKEY_DISABLE_ACCESS


43 
	#PKEY_DISABLE_ACCESS
 0x1

	)

44 
	#PKEY_DISABLE_WRITE
 0x2

	)

47 
__BEGIN_DECLS


51 
	$memfd_¸óã
 (c⁄° *
__«me
, 
__Êags
Ë
__THROW
;

55 
	$mlock2
 (c⁄° *
__addr
, 
size_t
 
__Àngth
, 
__Êags
Ë
__THROW
;

61 
	$pkey_Æloc
 (
__Êags
, 
__ac˚ss_rights
Ë
__THROW
;

65 
	$pkey_£t
 (
__key
, 
__ac˚ss_rights
Ë
__THROW
;

69 
	$pkey_gë
 (
__key
Ë
__THROW
;

73 
	$pkey_‰ì
 (
__key
Ë
__THROW
;

77 
	$pkey_m¥Ÿe˘
 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
, 
__pkey
Ë
__THROW
;

79 
__END_DECLS


	@/usr/include/x86_64-linux-gnu/bits/mman.h

19 #i‚de‡
_SYS_MMAN_H


27 #ifde‡
__USE_MISC


28 
	#MAP_32BIT
 0x40

	)

31 
	~<bôs/mm™-m≠-Êags-gíîic.h
>

34 
	~<bôs/mm™-löux.h
>

	@/usr/include/x86_64-linux-gnu/bits/monetary-ldbl.h

19 #i‚de‡
_MONETARY_H


23 
	$__LDBL_REDIR_DECL
 (
°rfm⁄
)

25 #ifde‡
__USE_GNU


26 
	$__LDBL_REDIR_DECL
 (
°rfm⁄_l
)

	@/usr/include/x86_64-linux-gnu/bits/mqueue.h

18 #i‚de‡
_MQUEUE_H


22 
	~<bôs/ty≥s.h
>

24 
	tmqd_t
;

26 
	smq_©å


28 
__sysˇŒ_¶⁄g_t
 
	mmq_Êags
;

29 
__sysˇŒ_¶⁄g_t
 
	mmq_maxmsg
;

30 
__sysˇŒ_¶⁄g_t
 
	mmq_msgsize
;

31 
__sysˇŒ_¶⁄g_t
 
	mmq_curmsgs
;

32 
__sysˇŒ_¶⁄g_t
 
	m__∑d
[4];

	@/usr/include/x86_64-linux-gnu/bits/mqueue2.h

19 #i‚def 
_FCNTL_H


25 
mqd_t
 
	$mq_›í
 (c⁄° *
__«me
, 
__oÊag
, ...)

26 
__THROW
 
	`__n⁄nuŒ
 ((1));

27 
mqd_t
 
	$__mq_›í_2
 (c⁄° *
__«me
, 
__oÊag
)

28 
__THROW
 
	`__n⁄nuŒ
 ((1));

29 
mqd_t
 
	`__REDIRECT_NTH
 (
__mq_›í_Æüs
, (c⁄° *
__«me
,

30 
__oÊag
, ...), 
mq_›í
)

31 
	`__n⁄nuŒ
 ((1));

32 
	`__îr‹de˛
 (
__mq_›í_wr⁄g_numbî_of_¨gs
,

34 
	`__îr‹de˛
 (
__mq_›í_missög_mode_™d_©å
,

37 
__f‹tify_fun˘i⁄
 
mqd_t


38 
	`__NTH
 (
	$mq_›í
 (c⁄° *
__«me
, 
__oÊag
, ...))

40 i‡(
	`__va_¨g_∑ck_Àn
 () != 0 && __va_arg_pack_len () != 2)

41 
	`__mq_›í_wr⁄g_numbî_of_¨gs
 ();

43 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

45 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () == 0)

47 
	`__mq_›í_missög_mode_™d_©å
 ();

48  
	`__mq_›í_2
 (
__«me
, 
__oÊag
);

50  
	`__mq_›í_Æüs
 (
__«me
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

53 i‡(
	`__va_¨g_∑ck_Àn
 () == 0)

54  
	`__mq_›í_2
 (
__«me
, 
__oÊag
);

56  
	`__mq_›í_Æüs
 (
__«me
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

57 
	}
}

	@/usr/include/x86_64-linux-gnu/bits/msq.h

18 #i‚de‡
_SYS_MSG_H


22 
	~<bôs/ty≥s.h
>

25 
__sysˇŒ_ul⁄g_t
 
	tmsgqnum_t
;

26 
__sysˇŒ_ul⁄g_t
 
	tmsgÀn_t
;

28 
	~<bôs/ty≥s/°ru˘_msqid_ds.h
>

29 
	~<bôs/ty≥s/°ru˘_msqid64_ds.h
>

32 
	#MSG_NOERROR
 010000

	)

33 #ifde‡
__USE_GNU


34 
	#MSG_EXCEPT
 020000

	)

35 
	#MSG_COPY
 040000

	)

38 #ifde‡
__USE_MISC


40 
	#msg_cbyãs
 
__msg_cbyãs


	)

43 
	#MSG_STAT
 11

	)

44 
	#MSG_INFO
 12

	)

45 
	#MSG_STAT_ANY
 13

	)

48 
	smsgöfo


50 
	mmsgpoﬁ
;

51 
	mmsgm≠
;

52 
	mmsgmax
;

53 
	mmsgmnb
;

54 
	mmsgmni
;

55 
	mmsgssz
;

56 
	mmsgtql
;

57 
	mmsg£g
;

	@/usr/include/x86_64-linux-gnu/bits/netdb.h

18 #i‚de‡
_NETDB_H


26 
	s√ã¡


28 *
	mn_«me
;

29 **
	mn_Æü£s
;

30 
	mn_addπy≥
;

31 
uöt32_t
 
	mn_√t
;

	@/usr/include/x86_64-linux-gnu/bits/param.h

19 #i‚de‡
_SYS_PARAM_H


23 #i‚de‡
ARG_MAX


24 
	#__undef_ARG_MAX


	)

27 
	~<löux/limôs.h
>

28 
	~<löux/∑øm.h
>

31 #ifde‡
__undef_ARG_MAX


32 #unde‡
ARG_MAX


33 #unde‡
__undef_ARG_MAX


36 
	#MAXSYMLINKS
 20

	)

41 
	#NOFILE
 256

	)

42 
	#NCARGS
 131072

	)

	@/usr/include/x86_64-linux-gnu/bits/platform/x86.h

19 #i‚de‡
_SYS_PLATFORM_X86_H


25 
	mCPUID_INDEX_1
 = 0,

26 
	mCPUID_INDEX_7
,

27 
	mCPUID_INDEX_80000001
,

28 
	mCPUID_INDEX_D_ECX_1
,

29 
	mCPUID_INDEX_80000007
,

30 
	mCPUID_INDEX_80000008
,

31 
	mCPUID_INDEX_7_ECX_1
,

32 
	mCPUID_INDEX_19
,

33 
	mCPUID_INDEX_14_ECX_0


36 
	s˝uid_„©uª


38 
	m˝uid_¨øy
[4];

39 
	ma˘ive_¨øy
[4];

42 
	e˝uid_ªgi°î_ödex


44 
	m˝uid_ªgi°î_ödex_óx
 = 0,

45 
	m˝uid_ªgi°î_ödex_ebx
,

46 
	m˝uid_ªgi°î_ödex_ecx
,

47 
	m˝uid_ªgi°î_ödex_edx


54 
	mx86_˝u_ödex_1_ecx


55 (
CPUID_INDEX_1
 * 8 * 4 *  ()

56 + 
˝uid_ªgi°î_ödex_ecx
 * 8 *  ()),

58 
	mx86_˝u_SSE3
 = 
x86_˝u_ödex_1_ecx
,

59 
	mx86_˝u_PCLMULQDQ
 = 
x86_˝u_ödex_1_ecx
 + 1,

60 
	mx86_˝u_DTES64
 = 
x86_˝u_ödex_1_ecx
 + 2,

61 
	mx86_˝u_MONITOR
 = 
x86_˝u_ödex_1_ecx
 + 3,

62 
	mx86_˝u_DS_CPL
 = 
x86_˝u_ödex_1_ecx
 + 4,

63 
	mx86_˝u_VMX
 = 
x86_˝u_ödex_1_ecx
 + 5,

64 
	mx86_˝u_SMX
 = 
x86_˝u_ödex_1_ecx
 + 6,

65 
	mx86_˝u_EIST
 = 
x86_˝u_ödex_1_ecx
 + 7,

66 
	mx86_˝u_TM2
 = 
x86_˝u_ödex_1_ecx
 + 8,

67 
	mx86_˝u_SSSE3
 = 
x86_˝u_ödex_1_ecx
 + 9,

68 
	mx86_˝u_CNXT_ID
 = 
x86_˝u_ödex_1_ecx
 + 10,

69 
	mx86_˝u_SDBG
 = 
x86_˝u_ödex_1_ecx
 + 11,

70 
	mx86_˝u_FMA
 = 
x86_˝u_ödex_1_ecx
 + 12,

71 
	mx86_˝u_CMPXCHG16B
 = 
x86_˝u_ödex_1_ecx
 + 13,

72 
	mx86_˝u_XTPRUPDCTRL
 = 
x86_˝u_ödex_1_ecx
 + 14,

73 
	mx86_˝u_PDCM
 = 
x86_˝u_ödex_1_ecx
 + 15,

74 
	mx86_˝u_INDEX_1_ECX_16
 = 
x86_˝u_ödex_1_ecx
 + 16,

75 
	mx86_˝u_PCID
 = 
x86_˝u_ödex_1_ecx
 + 17,

76 
	mx86_˝u_DCA
 = 
x86_˝u_ödex_1_ecx
 + 18,

77 
	mx86_˝u_SSE4_1
 = 
x86_˝u_ödex_1_ecx
 + 19,

78 
	mx86_˝u_SSE4_2
 = 
x86_˝u_ödex_1_ecx
 + 20,

79 
	mx86_˝u_X2APIC
 = 
x86_˝u_ödex_1_ecx
 + 21,

80 
	mx86_˝u_MOVBE
 = 
x86_˝u_ödex_1_ecx
 + 22,

81 
	mx86_˝u_POPCNT
 = 
x86_˝u_ödex_1_ecx
 + 23,

82 
	mx86_˝u_TSC_DEADLINE
 = 
x86_˝u_ödex_1_ecx
 + 24,

83 
	mx86_˝u_AES
 = 
x86_˝u_ödex_1_ecx
 + 25,

84 
	mx86_˝u_XSAVE
 = 
x86_˝u_ödex_1_ecx
 + 26,

85 
	mx86_˝u_OSXSAVE
 = 
x86_˝u_ödex_1_ecx
 + 27,

86 
	mx86_˝u_AVX
 = 
x86_˝u_ödex_1_ecx
 + 28,

87 
	mx86_˝u_F16C
 = 
x86_˝u_ödex_1_ecx
 + 29,

88 
	mx86_˝u_RDRAND
 = 
x86_˝u_ödex_1_ecx
 + 30,

89 
	mx86_˝u_INDEX_1_ECX_31
 = 
x86_˝u_ödex_1_ecx
 + 31,

91 
	mx86_˝u_ödex_1_edx


92 (
CPUID_INDEX_1
 * 8 * 4 *  ()

93 + 
˝uid_ªgi°î_ödex_edx
 * 8 *  ()),

95 
	mx86_˝u_FPU
 = 
x86_˝u_ödex_1_edx
,

96 
	mx86_˝u_VME
 = 
x86_˝u_ödex_1_edx
 + 1,

97 
	mx86_˝u_DE
 = 
x86_˝u_ödex_1_edx
 + 2,

98 
	mx86_˝u_PSE
 = 
x86_˝u_ödex_1_edx
 + 3,

99 
	mx86_˝u_TSC
 = 
x86_˝u_ödex_1_edx
 + 4,

100 
	mx86_˝u_MSR
 = 
x86_˝u_ödex_1_edx
 + 5,

101 
	mx86_˝u_PAE
 = 
x86_˝u_ödex_1_edx
 + 6,

102 
	mx86_˝u_MCE
 = 
x86_˝u_ödex_1_edx
 + 7,

103 
	mx86_˝u_CX8
 = 
x86_˝u_ödex_1_edx
 + 8,

104 
	mx86_˝u_APIC
 = 
x86_˝u_ödex_1_edx
 + 9,

105 
	mx86_˝u_INDEX_1_EDX_10
 = 
x86_˝u_ödex_1_edx
 + 10,

106 
	mx86_˝u_SEP
 = 
x86_˝u_ödex_1_edx
 + 11,

107 
	mx86_˝u_MTRR
 = 
x86_˝u_ödex_1_edx
 + 12,

108 
	mx86_˝u_PGE
 = 
x86_˝u_ödex_1_edx
 + 13,

109 
	mx86_˝u_MCA
 = 
x86_˝u_ödex_1_edx
 + 14,

110 
	mx86_˝u_CMOV
 = 
x86_˝u_ödex_1_edx
 + 15,

111 
	mx86_˝u_PAT
 = 
x86_˝u_ödex_1_edx
 + 16,

112 
	mx86_˝u_PSE_36
 = 
x86_˝u_ödex_1_edx
 + 17,

113 
	mx86_˝u_PSN
 = 
x86_˝u_ödex_1_edx
 + 18,

114 
	mx86_˝u_CLFSH
 = 
x86_˝u_ödex_1_edx
 + 19,

115 
	mx86_˝u_INDEX_1_EDX_20
 = 
x86_˝u_ödex_1_edx
 + 20,

116 
	mx86_˝u_DS
 = 
x86_˝u_ödex_1_edx
 + 21,

117 
	mx86_˝u_ACPI
 = 
x86_˝u_ödex_1_edx
 + 22,

118 
	mx86_˝u_MMX
 = 
x86_˝u_ödex_1_edx
 + 23,

119 
	mx86_˝u_FXSR
 = 
x86_˝u_ödex_1_edx
 + 24,

120 
	mx86_˝u_SSE
 = 
x86_˝u_ödex_1_edx
 + 25,

121 
	mx86_˝u_SSE2
 = 
x86_˝u_ödex_1_edx
 + 26,

122 
	mx86_˝u_SS
 = 
x86_˝u_ödex_1_edx
 + 27,

123 
	mx86_˝u_HTT
 = 
x86_˝u_ödex_1_edx
 + 28,

124 
	mx86_˝u_TM
 = 
x86_˝u_ödex_1_edx
 + 29,

125 
	mx86_˝u_INDEX_1_EDX_30
 = 
x86_˝u_ödex_1_edx
 + 30,

126 
	mx86_˝u_PBE
 = 
x86_˝u_ödex_1_edx
 + 31,

128 
	mx86_˝u_ödex_7_ebx


129 (
CPUID_INDEX_7
 * 8 * 4 *  ()

130 + 
˝uid_ªgi°î_ödex_ebx
 * 8 *  ()),

132 
	mx86_˝u_FSGSBASE
 = 
x86_˝u_ödex_7_ebx
,

133 
	mx86_˝u_TSC_ADJUST
 = 
x86_˝u_ödex_7_ebx
 + 1,

134 
	mx86_˝u_SGX
 = 
x86_˝u_ödex_7_ebx
 + 2,

135 
	mx86_˝u_BMI1
 = 
x86_˝u_ödex_7_ebx
 + 3,

136 
	mx86_˝u_HLE
 = 
x86_˝u_ödex_7_ebx
 + 4,

137 
	mx86_˝u_AVX2
 = 
x86_˝u_ödex_7_ebx
 + 5,

138 
	mx86_˝u_INDEX_7_EBX_6
 = 
x86_˝u_ödex_7_ebx
 + 6,

139 
	mx86_˝u_SMEP
 = 
x86_˝u_ödex_7_ebx
 + 7,

140 
	mx86_˝u_BMI2
 = 
x86_˝u_ödex_7_ebx
 + 8,

141 
	mx86_˝u_ERMS
 = 
x86_˝u_ödex_7_ebx
 + 9,

142 
	mx86_˝u_INVPCID
 = 
x86_˝u_ödex_7_ebx
 + 10,

143 
	mx86_˝u_RTM
 = 
x86_˝u_ödex_7_ebx
 + 11,

144 
	mx86_˝u_RDT_M
 = 
x86_˝u_ödex_7_ebx
 + 12,

145 
	mx86_˝u_DEPR_FPU_CS_DS
 = 
x86_˝u_ödex_7_ebx
 + 13,

146 
	mx86_˝u_MPX
 = 
x86_˝u_ödex_7_ebx
 + 14,

147 
	mx86_˝u_RDT_A
 = 
x86_˝u_ödex_7_ebx
 + 15,

148 
	mx86_˝u_AVX512F
 = 
x86_˝u_ödex_7_ebx
 + 16,

149 
	mx86_˝u_AVX512DQ
 = 
x86_˝u_ödex_7_ebx
 + 17,

150 
	mx86_˝u_RDSEED
 = 
x86_˝u_ödex_7_ebx
 + 18,

151 
	mx86_˝u_ADX
 = 
x86_˝u_ödex_7_ebx
 + 19,

152 
	mx86_˝u_SMAP
 = 
x86_˝u_ödex_7_ebx
 + 20,

153 
	mx86_˝u_AVX512_IFMA
 = 
x86_˝u_ödex_7_ebx
 + 21,

154 
	mx86_˝u_INDEX_7_EBX_22
 = 
x86_˝u_ödex_7_ebx
 + 22,

155 
	mx86_˝u_CLFLUSHOPT
 = 
x86_˝u_ödex_7_ebx
 + 23,

156 
	mx86_˝u_CLWB
 = 
x86_˝u_ödex_7_ebx
 + 24,

157 
	mx86_˝u_TRACE
 = 
x86_˝u_ödex_7_ebx
 + 25,

158 
	mx86_˝u_AVX512PF
 = 
x86_˝u_ödex_7_ebx
 + 26,

159 
	mx86_˝u_AVX512ER
 = 
x86_˝u_ödex_7_ebx
 + 27,

160 
	mx86_˝u_AVX512CD
 = 
x86_˝u_ödex_7_ebx
 + 28,

161 
	mx86_˝u_SHA
 = 
x86_˝u_ödex_7_ebx
 + 29,

162 
	mx86_˝u_AVX512BW
 = 
x86_˝u_ödex_7_ebx
 + 30,

163 
	mx86_˝u_AVX512VL
 = 
x86_˝u_ödex_7_ebx
 + 31,

165 
	mx86_˝u_ödex_7_ecx


166 (
CPUID_INDEX_7
 * 8 * 4 *  ()

167 + 
˝uid_ªgi°î_ödex_ecx
 * 8 *  ()),

169 
	mx86_˝u_PREFETCHWT1
 = 
x86_˝u_ödex_7_ecx
,

170 
	mx86_˝u_AVX512_VBMI
 = 
x86_˝u_ödex_7_ecx
 + 1,

171 
	mx86_˝u_UMIP
 = 
x86_˝u_ödex_7_ecx
 + 2,

172 
	mx86_˝u_PKU
 = 
x86_˝u_ödex_7_ecx
 + 3,

173 
	mx86_˝u_OSPKE
 = 
x86_˝u_ödex_7_ecx
 + 4,

174 
	mx86_˝u_WAITPKG
 = 
x86_˝u_ödex_7_ecx
 + 5,

175 
	mx86_˝u_AVX512_VBMI2
 = 
x86_˝u_ödex_7_ecx
 + 6,

176 
	mx86_˝u_SHSTK
 = 
x86_˝u_ödex_7_ecx
 + 7,

177 
	mx86_˝u_GFNI
 = 
x86_˝u_ödex_7_ecx
 + 8,

178 
	mx86_˝u_VAES
 = 
x86_˝u_ödex_7_ecx
 + 9,

179 
	mx86_˝u_VPCLMULQDQ
 = 
x86_˝u_ödex_7_ecx
 + 10,

180 
	mx86_˝u_AVX512_VNNI
 = 
x86_˝u_ödex_7_ecx
 + 11,

181 
	mx86_˝u_AVX512_BITALG
 = 
x86_˝u_ödex_7_ecx
 + 12,

182 
	mx86_˝u_INDEX_7_ECX_13
 = 
x86_˝u_ödex_7_ecx
 + 13,

183 
	mx86_˝u_AVX512_VPOPCNTDQ
 = 
x86_˝u_ödex_7_ecx
 + 14,

184 
	mx86_˝u_INDEX_7_ECX_1
 = 
x86_˝u_ödex_7_ecx
 + 15,

185 
	mx86_˝u_INDEX_7_ECX_16
 = 
x86_˝u_ödex_7_ecx
 + 16,

188 
	mx86_˝u_RDPID
 = 
x86_˝u_ödex_7_ecx
 + 22,

189 
	mx86_˝u_KL
 = 
x86_˝u_ödex_7_ecx
 + 23,

190 
	mx86_˝u_INDEX_7_ECX_24
 = 
x86_˝u_ödex_7_ecx
 + 24,

191 
	mx86_˝u_CLDEMOTE
 = 
x86_˝u_ödex_7_ecx
 + 25,

192 
	mx86_˝u_INDEX_7_ECX_26
 = 
x86_˝u_ödex_7_ecx
 + 26,

193 
	mx86_˝u_MOVDIRI
 = 
x86_˝u_ödex_7_ecx
 + 27,

194 
	mx86_˝u_MOVDIR64B
 = 
x86_˝u_ödex_7_ecx
 + 28,

195 
	mx86_˝u_ENQCMD
 = 
x86_˝u_ödex_7_ecx
 + 29,

196 
	mx86_˝u_SGX_LC
 = 
x86_˝u_ödex_7_ecx
 + 30,

197 
	mx86_˝u_PKS
 = 
x86_˝u_ödex_7_ecx
 + 31,

199 
	mx86_˝u_ödex_7_edx


200 (
CPUID_INDEX_7
 * 8 * 4 *  ()

201 + 
˝uid_ªgi°î_ödex_edx
 * 8 *  ()),

203 
	mx86_˝u_INDEX_7_EDX_0
 = 
x86_˝u_ödex_7_edx
,

204 
	mx86_˝u_INDEX_7_EDX_1
 = 
x86_˝u_ödex_7_edx
 + 1,

205 
	mx86_˝u_AVX512_4VNNIW
 = 
x86_˝u_ödex_7_edx
 + 2,

206 
	mx86_˝u_AVX512_4FMAPS
 = 
x86_˝u_ödex_7_edx
 + 3,

207 
	mx86_˝u_FSRM
 = 
x86_˝u_ödex_7_edx
 + 4,

208 
	mx86_˝u_UINTR
 = 
x86_˝u_ödex_7_edx
 + 5,

209 
	mx86_˝u_INDEX_7_EDX_6
 = 
x86_˝u_ödex_7_edx
 + 6,

210 
	mx86_˝u_INDEX_7_EDX_7
 = 
x86_˝u_ödex_7_edx
 + 7,

211 
	mx86_˝u_AVX512_VP2INTERSECT
 = 
x86_˝u_ödex_7_edx
 + 8,

212 
	mx86_˝u_INDEX_7_EDX_9
 = 
x86_˝u_ödex_7_edx
 + 9,

213 
	mx86_˝u_MD_CLEAR
 = 
x86_˝u_ödex_7_edx
 + 10,

214 
	mx86_˝u_RTM_ALWAYS_ABORT
 = 
x86_˝u_ödex_7_edx
 + 11,

215 
	mx86_˝u_INDEX_7_EDX_12
 = 
x86_˝u_ödex_7_edx
 + 12,

216 
	mx86_˝u_INDEX_7_EDX_13
 = 
x86_˝u_ödex_7_edx
 + 13,

217 
	mx86_˝u_SERIALIZE
 = 
x86_˝u_ödex_7_edx
 + 14,

218 
	mx86_˝u_HYBRID
 = 
x86_˝u_ödex_7_edx
 + 15,

219 
	mx86_˝u_TSXLDTRK
 = 
x86_˝u_ödex_7_edx
 + 16,

220 
	mx86_˝u_INDEX_7_EDX_17
 = 
x86_˝u_ödex_7_edx
 + 17,

221 
	mx86_˝u_PCONFIG
 = 
x86_˝u_ödex_7_edx
 + 18,

222 
	mx86_˝u_INDEX_7_EDX_19
 = 
x86_˝u_ödex_7_edx
 + 19,

223 
	mx86_˝u_IBT
 = 
x86_˝u_ödex_7_edx
 + 20,

224 
	mx86_˝u_INDEX_7_EDX_21
 = 
x86_˝u_ödex_7_edx
 + 21,

225 
	mx86_˝u_AMX_BF16
 = 
x86_˝u_ödex_7_edx
 + 22,

226 
	mx86_˝u_AVX512_FP16
 = 
x86_˝u_ödex_7_edx
 + 23,

227 
	mx86_˝u_AMX_TILE
 = 
x86_˝u_ödex_7_edx
 + 24,

228 
	mx86_˝u_AMX_INT8
 = 
x86_˝u_ödex_7_edx
 + 25,

229 
	mx86_˝u_IBRS_IBPB
 = 
x86_˝u_ödex_7_edx
 + 26,

230 
	mx86_˝u_STIBP
 = 
x86_˝u_ödex_7_edx
 + 27,

231 
	mx86_˝u_L1D_FLUSH
 = 
x86_˝u_ödex_7_edx
 + 28,

232 
	mx86_˝u_ARCH_CAPABILITIES
 = 
x86_˝u_ödex_7_edx
 + 29,

233 
	mx86_˝u_CORE_CAPABILITIES
 = 
x86_˝u_ödex_7_edx
 + 30,

234 
	mx86_˝u_SSBD
 = 
x86_˝u_ödex_7_edx
 + 31,

236 
	mx86_˝u_ödex_80000001_ecx


237 (
CPUID_INDEX_80000001
 * 8 * 4 *  ()

238 + 
˝uid_ªgi°î_ödex_ecx
 * 8 *  ()),

240 
	mx86_˝u_LAHF64_SAHF64
 = 
x86_˝u_ödex_80000001_ecx
,

241 
	mx86_˝u_SVM
 = 
x86_˝u_ödex_80000001_ecx
 + 2,

242 
	mx86_˝u_LZCNT
 = 
x86_˝u_ödex_80000001_ecx
 + 5,

243 
	mx86_˝u_SSE4A
 = 
x86_˝u_ödex_80000001_ecx
 + 6,

244 
	mx86_˝u_PREFETCHW
 = 
x86_˝u_ödex_80000001_ecx
 + 8,

245 
	mx86_˝u_XOP
 = 
x86_˝u_ödex_80000001_ecx
 + 11,

246 
	mx86_˝u_LWP
 = 
x86_˝u_ödex_80000001_ecx
 + 15,

247 
	mx86_˝u_FMA4
 = 
x86_˝u_ödex_80000001_ecx
 + 16,

248 
	mx86_˝u_TBM
 = 
x86_˝u_ödex_80000001_ecx
 + 21,

250 
	mx86_˝u_ödex_80000001_edx


251 (
CPUID_INDEX_80000001
 * 8 * 4 *  ()

252 + 
˝uid_ªgi°î_ödex_edx
 * 8 *  ()),

254 
	mx86_˝u_SYSCALL_SYSRET
 = 
x86_˝u_ödex_80000001_edx
 + 11,

255 
	mx86_˝u_NX
 = 
x86_˝u_ödex_80000001_edx
 + 20,

256 
	mx86_˝u_PAGE1GB
 = 
x86_˝u_ödex_80000001_edx
 + 26,

257 
	mx86_˝u_RDTSCP
 = 
x86_˝u_ödex_80000001_edx
 + 27,

258 
	mx86_˝u_LM
 = 
x86_˝u_ödex_80000001_edx
 + 29,

260 
	mx86_˝u_ödex_d_ecx_1_óx


261 (
CPUID_INDEX_D_ECX_1
 * 8 * 4 *  ()

262 + 
˝uid_ªgi°î_ödex_óx
 * 8 *  ()),

264 
	mx86_˝u_XSAVEOPT
 = 
x86_˝u_ödex_d_ecx_1_óx
,

265 
	mx86_˝u_XSAVEC
 = 
x86_˝u_ödex_d_ecx_1_óx
 + 1,

266 
	mx86_˝u_XGETBV_ECX_1
 = 
x86_˝u_ödex_d_ecx_1_óx
 + 2,

267 
	mx86_˝u_XSAVES
 = 
x86_˝u_ödex_d_ecx_1_óx
 + 3,

268 
	mx86_˝u_XFD
 = 
x86_˝u_ödex_d_ecx_1_óx
 + 4,

270 
	mx86_˝u_ödex_80000007_edx


271 (
CPUID_INDEX_80000007
 * 8 * 4 *  ()

272 + 
˝uid_ªgi°î_ödex_edx
 * 8 *  ()),

274 
	mx86_˝u_INVARIANT_TSC
 = 
x86_˝u_ödex_80000007_edx
 + 8,

276 
	mx86_˝u_ödex_80000008_ebx


277 (
CPUID_INDEX_80000008
 * 8 * 4 *  ()

278 + 
˝uid_ªgi°î_ödex_ebx
 * 8 *  ()),

280 
	mx86_˝u_WBNOINVD
 = 
x86_˝u_ödex_80000008_ebx
 + 9,

281 
	mx86_˝u_AMD_IBPB
 = 
x86_˝u_ödex_80000008_ebx
 + 12,

282 
	mx86_˝u_AMD_IBRS
 = 
x86_˝u_ödex_80000008_ebx
 + 14,

283 
	mx86_˝u_AMD_STIBP
 = 
x86_˝u_ödex_80000008_ebx
 + 15,

284 
	mx86_˝u_AMD_SSBD
 = 
x86_˝u_ödex_80000008_ebx
 + 24,

285 
	mx86_˝u_AMD_VIRT_SSBD
 = 
x86_˝u_ödex_80000008_ebx
 + 25,

287 
	mx86_˝u_ödex_7_ecx_1_óx


288 (
CPUID_INDEX_7_ECX_1
 * 8 * 4 *  ()

289 + 
˝uid_ªgi°î_ödex_óx
 * 8 *  ()),

291 
	mx86_˝u_AVX_VNNI
 = 
x86_˝u_ödex_7_ecx_1_óx
 + 4,

292 
	mx86_˝u_AVX512_BF16
 = 
x86_˝u_ödex_7_ecx_1_óx
 + 5,

293 
	mx86_˝u_FZLRM
 = 
x86_˝u_ödex_7_ecx_1_óx
 + 10,

294 
	mx86_˝u_FSRS
 = 
x86_˝u_ödex_7_ecx_1_óx
 + 11,

295 
	mx86_˝u_FSRCS
 = 
x86_˝u_ödex_7_ecx_1_óx
 + 12,

296 
	mx86_˝u_HRESET
 = 
x86_˝u_ödex_7_ecx_1_óx
 + 22,

297 
	mx86_˝u_LAM
 = 
x86_˝u_ödex_7_ecx_1_óx
 + 26,

299 
	mx86_˝u_ödex_19_ebx


300 (
CPUID_INDEX_19
 * 8 * 4 *  ()

301 + 
˝uid_ªgi°î_ödex_ebx
 * 8 *  ()),

303 
	mx86_˝u_AESKLE
 = 
x86_˝u_ödex_19_ebx
,

304 
	mx86_˝u_WIDE_KL
 = 
x86_˝u_ödex_19_ebx
 + 2,

306 
	mx86_˝u_ödex_14_ecx_0_ebx


307 (
CPUID_INDEX_14_ECX_0
 * 8 * 4 *  ()

308 + 
˝uid_ªgi°î_ödex_ebx
 * 8 *  ()),

310 
	mx86_˝u_PTWRITE
 = 
x86_˝u_ödex_14_ecx_0_ebx
 + 4

	@/usr/include/x86_64-linux-gnu/bits/poll.h

18 #i‚de‡
_SYS_POLL_H


25 
	#POLLIN
 0x001

	)

26 
	#POLLPRI
 0x002

	)

27 
	#POLLOUT
 0x004

	)

29 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


31 
	#POLLRDNORM
 0x040

	)

32 
	#POLLRDBAND
 0x080

	)

33 
	#POLLWRNORM
 0x100

	)

34 
	#POLLWRBAND
 0x200

	)

37 #ifde‡
__USE_GNU


39 
	#POLLMSG
 0x400

	)

40 
	#POLLREMOVE
 0x1000

	)

41 
	#POLLRDHUP
 0x2000

	)

47 
	#POLLERR
 0x008

	)

48 
	#POLLHUP
 0x010

	)

49 
	#POLLNVAL
 0x020

	)

	@/usr/include/x86_64-linux-gnu/bits/poll2.h

19 #i‚de‡
_SYS_POLL_H


24 
__BEGIN_DECLS


26 
__REDIRECT
 (
__pﬁl_Æüs
, (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
,

27 
__timeout
), 
pﬁl
);

28 
	$__pﬁl_chk
 (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
, 
__timeout
,

29 
__SIZE_TYPE__
 
__fd¶í
)

30 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 2));

31 
	`__REDIRECT
 (
__pﬁl_chk_w¨n
, (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
,

32 
__timeout
, 
__SIZE_TYPE__
 
__fd¶í
),

33 
__pﬁl_chk
)

34 
	`__w¨«âr
 ("poll called with fds bufferÅoo small fileÇfdsÉntries");

36 
__f‹tify_fun˘i⁄
 
	$__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 1, 2) 

37 
	$pﬁl
 (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
, 
__timeout
)

39  
	`__glibc_f‹tify
 (
pﬁl
, 
__nfds
,  (*
__fds
),

40 
	`__glibc_objsize
 (
__fds
),

41 
__fds
, 
__nfds
, 
__timeout
);

42 
	}
}

45 #ifde‡
__USE_GNU


46 
__REDIRECT
 (
__µﬁl_Æüs
, (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
,

47 c⁄° 
time•ec
 *
__timeout
,

48 c⁄° 
__sig£t_t
 *
__ss
), 
µﬁl
);

49 
	$__µﬁl_chk
 (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
,

50 c⁄° 
time•ec
 *
__timeout
,

51 c⁄° 
__sig£t_t
 *
__ss
, 
__SIZE_TYPE__
 
__fd¶í
)

52 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 2));

53 
	`__REDIRECT
 (
__µﬁl_chk_w¨n
, (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
,

54 c⁄° 
time•ec
 *
__timeout
,

55 c⁄° 
__sig£t_t
 *
__ss
,

56 
__SIZE_TYPE__
 
__fd¶í
),

57 
__µﬁl_chk
)

58 
	`__w¨«âr
 ("ppoll called with fds bufferÅoo small fileÇfdsÉntries");

60 
__f‹tify_fun˘i⁄
 
	$__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 1, 2) 

61 
	$µﬁl
 (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
, c⁄° 
time•ec
 *
__timeout
,

62 c⁄° 
__sig£t_t
 *
__ss
)

64  
	`__glibc_f‹tify
 (
µﬁl
, 
__nfds
,  (*
__fds
),

65 
	`__glibc_objsize
 (
__fds
),

66 
__fds
, 
__nfds
, 
__timeout
, 
__ss
);

67 
	}
}

70 
	g__END_DECLS


	@/usr/include/x86_64-linux-gnu/bits/posix1_lim.h

24 #i‚def 
_BITS_POSIX1_LIM_H


25 
	#_BITS_POSIX1_LIM_H
 1

	)

27 
	~<bôs/w‹dsize.h
>

32 
	#_POSIX_AIO_LISTIO_MAX
 2

	)

35 
	#_POSIX_AIO_MAX
 1

	)

38 
	#_POSIX_ARG_MAX
 4096

	)

41 #ifde‡
__USE_XOPEN2K


42 
	#_POSIX_CHILD_MAX
 25

	)

44 
	#_POSIX_CHILD_MAX
 6

	)

48 
	#_POSIX_DELAYTIMER_MAX
 32

	)

52 
	#_POSIX_HOST_NAME_MAX
 255

	)

55 
	#_POSIX_LINK_MAX
 8

	)

58 
	#_POSIX_LOGIN_NAME_MAX
 9

	)

61 
	#_POSIX_MAX_CANON
 255

	)

65 
	#_POSIX_MAX_INPUT
 255

	)

68 
	#_POSIX_MQ_OPEN_MAX
 8

	)

71 
	#_POSIX_MQ_PRIO_MAX
 32

	)

74 
	#_POSIX_NAME_MAX
 14

	)

77 #ifde‡
__USE_XOPEN2K


78 
	#_POSIX_NGROUPS_MAX
 8

	)

80 
	#_POSIX_NGROUPS_MAX
 0

	)

84 #ifde‡
__USE_XOPEN2K


85 
	#_POSIX_OPEN_MAX
 20

	)

87 
	#_POSIX_OPEN_MAX
 16

	)

90 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


93 
	#_POSIX_FD_SETSIZE
 
_POSIX_OPEN_MAX


	)

97 
	#_POSIX_PATH_MAX
 256

	)

100 
	#_POSIX_PIPE_BUF
 512

	)

104 
	#_POSIX_RE_DUP_MAX
 255

	)

107 
	#_POSIX_RTSIG_MAX
 8

	)

110 
	#_POSIX_SEM_NSEMS_MAX
 256

	)

113 
	#_POSIX_SEM_VALUE_MAX
 32767

	)

116 
	#_POSIX_SIGQUEUE_MAX
 32

	)

119 
	#_POSIX_SSIZE_MAX
 32767

	)

122 
	#_POSIX_STREAM_MAX
 8

	)

125 
	#_POSIX_SYMLINK_MAX
 255

	)

129 
	#_POSIX_SYMLOOP_MAX
 8

	)

132 
	#_POSIX_TIMER_MAX
 32

	)

135 
	#_POSIX_TTY_NAME_MAX
 9

	)

138 #ifde‡
__USE_XOPEN2K


139 
	#_POSIX_TZNAME_MAX
 6

	)

141 
	#_POSIX_TZNAME_MAX
 3

	)

144 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


146 
	#_POSIX_QLIMIT
 1

	)

150 
	#_POSIX_HIWAT
 
_POSIX_PIPE_BUF


	)

153 
	#_POSIX_UIO_MAXIOV
 16

	)

157 
	#_POSIX_CLOCKRES_MIN
 20000000

	)

161 
	~<bôs/loˇl_lim.h
>

164 #i‚def 
SSIZE_MAX


168 #i‡
__WORDSIZE
 =64 || 
__WORDSIZE32_SIZE_ULONG


169 
	#SSIZE_MAX
 
LONG_MAX


	)

171 
	#SSIZE_MAX
 
INT_MAX


	)

179 #i‚def 
NGROUPS_MAX


180 
	#NGROUPS_MAX
 8

	)

	@/usr/include/x86_64-linux-gnu/bits/posix2_lim.h

22 #i‚def 
_BITS_POSIX2_LIM_H


23 
	#_BITS_POSIX2_LIM_H
 1

	)

27 
	#_POSIX2_BC_BASE_MAX
 99

	)

30 
	#_POSIX2_BC_DIM_MAX
 2048

	)

33 
	#_POSIX2_BC_SCALE_MAX
 99

	)

36 
	#_POSIX2_BC_STRING_MAX
 1000

	)

40 
	#_POSIX2_COLL_WEIGHTS_MAX
 2

	)

44 
	#_POSIX2_EXPR_NEST_MAX
 32

	)

47 
	#_POSIX2_LINE_MAX
 2048

	)

51 
	#_POSIX2_RE_DUP_MAX
 255

	)

55 
	#_POSIX2_CHARCLASS_NAME_MAX
 14

	)

62 #i‚def 
BC_BASE_MAX


63 
	#BC_BASE_MAX
 
_POSIX2_BC_BASE_MAX


	)

65 #i‚def 
BC_DIM_MAX


66 
	#BC_DIM_MAX
 
_POSIX2_BC_DIM_MAX


	)

68 #i‚def 
BC_SCALE_MAX


69 
	#BC_SCALE_MAX
 
_POSIX2_BC_SCALE_MAX


	)

71 #i‚def 
BC_STRING_MAX


72 
	#BC_STRING_MAX
 
_POSIX2_BC_STRING_MAX


	)

74 #i‚def 
COLL_WEIGHTS_MAX


75 
	#COLL_WEIGHTS_MAX
 255

	)

77 #i‚def 
EXPR_NEST_MAX


78 
	#EXPR_NEST_MAX
 
_POSIX2_EXPR_NEST_MAX


	)

80 #i‚def 
LINE_MAX


81 
	#LINE_MAX
 
_POSIX2_LINE_MAX


	)

83 #i‚def 
CHARCLASS_NAME_MAX


84 
	#CHARCLASS_NAME_MAX
 2048

	)

88 
	#RE_DUP_MAX
 (0x7fff)

	)

	@/usr/include/x86_64-linux-gnu/bits/posix_opt.h

19 #i‚def 
_BITS_POSIX_OPT_H


20 
	#_BITS_POSIX_OPT_H
 1

	)

23 
	#_POSIX_JOB_CONTROL
 1

	)

26 
	#_POSIX_SAVED_IDS
 1

	)

32 
	#_POSIX_PRIORITY_SCHEDULING
 200809L

	)

35 
	#_POSIX_SYNCHRONIZED_IO
 200809L

	)

38 
	#_POSIX_FSYNC
 200809L

	)

41 
	#_POSIX_MAPPED_FILES
 200809L

	)

44 
	#_POSIX_MEMLOCK
 200809L

	)

47 
	#_POSIX_MEMLOCK_RANGE
 200809L

	)

50 
	#_POSIX_MEMORY_PROTECTION
 200809L

	)

53 
	#_POSIX_CHOWN_RESTRICTED
 0

	)

57 
	#_POSIX_VDISABLE
 '\0'

	)

60 
	#_POSIX_NO_TRUNC
 1

	)

63 
	#_XOPEN_REALTIME
 1

	)

66 
	#_XOPEN_REALTIME_THREADS
 1

	)

69 
	#_XOPEN_SHM
 1

	)

72 
	#_POSIX_THREADS
 200809L

	)

75 
	#_POSIX_REENTRANT_FUNCTIONS
 1

	)

76 
	#_POSIX_THREAD_SAFE_FUNCTIONS
 200809L

	)

79 
	#_POSIX_THREAD_PRIORITY_SCHEDULING
 200809L

	)

82 
	#_POSIX_THREAD_ATTR_STACKSIZE
 200809L

	)

85 
	#_POSIX_THREAD_ATTR_STACKADDR
 200809L

	)

88 
	#_POSIX_THREAD_PRIO_INHERIT
 200809L

	)

92 
	#_POSIX_THREAD_PRIO_PROTECT
 200809L

	)

94 #ifde‡
__USE_XOPEN2K8


96 
	#_POSIX_THREAD_ROBUST_PRIO_INHERIT
 200809L

	)

99 
	#_POSIX_THREAD_ROBUST_PRIO_PROTECT
 -1

	)

103 
	#_POSIX_SEMAPHORES
 200809L

	)

106 
	#_POSIX_REALTIME_SIGNALS
 200809L

	)

109 
	#_POSIX_ASYNCHRONOUS_IO
 200809L

	)

110 
	#_POSIX_ASYNC_IO
 1

	)

112 
	#_LFS_ASYNCHRONOUS_IO
 1

	)

114 
	#_POSIX_PRIORITIZED_IO
 200809L

	)

117 
	#_LFS64_ASYNCHRONOUS_IO
 1

	)

120 
	#_LFS_LARGEFILE
 1

	)

121 
	#_LFS64_LARGEFILE
 1

	)

122 
	#_LFS64_STDIO
 1

	)

125 
	#_POSIX_SHARED_MEMORY_OBJECTS
 200809L

	)

128 
	#_POSIX_CPUTIME
 0

	)

131 
	#_POSIX_THREAD_CPUTIME
 0

	)

134 
	#_POSIX_REGEXP
 1

	)

137 
	#_POSIX_READER_WRITER_LOCKS
 200809L

	)

140 
	#_POSIX_SHELL
 1

	)

143 
	#_POSIX_TIMEOUTS
 200809L

	)

146 
	#_POSIX_SPIN_LOCKS
 200809L

	)

149 
	#_POSIX_SPAWN
 200809L

	)

152 
	#_POSIX_TIMERS
 200809L

	)

155 
	#_POSIX_BARRIERS
 200809L

	)

158 
	#_POSIX_MESSAGE_PASSING
 200809L

	)

161 
	#_POSIX_THREAD_PROCESS_SHARED
 200809L

	)

164 
	#_POSIX_MONOTONIC_CLOCK
 0

	)

167 
	#_POSIX_CLOCK_SELECTION
 200809L

	)

170 
	#_POSIX_ADVISORY_INFO
 200809L

	)

173 
	#_POSIX_IPV6
 200809L

	)

176 
	#_POSIX_RAW_SOCKETS
 200809L

	)

179 
	#_POSIX2_CHAR_TERM
 200809L

	)

182 
	#_POSIX_SPORADIC_SERVER
 -1

	)

183 
	#_POSIX_THREAD_SPORADIC_SERVER
 -1

	)

186 
	#_POSIX_TRACE
 -1

	)

187 
	#_POSIX_TRACE_EVENT_FILTER
 -1

	)

188 
	#_POSIX_TRACE_INHERIT
 -1

	)

189 
	#_POSIX_TRACE_LOG
 -1

	)

192 
	#_POSIX_TYPED_MEMORY_OBJECTS
 -1

	)

	@/usr/include/x86_64-linux-gnu/bits/printf-ldbl.h

19 #i‚de‡
_PRINTF_H


23 
__LDBL_REDIR_DECL
 (
¥ötf_size
)

	@/usr/include/x86_64-linux-gnu/bits/procfs-extra.h

20 #i‚de‡
_SYS_PROCFS_H


	@/usr/include/x86_64-linux-gnu/bits/procfs-id.h

20 #i‚de‡
_SYS_PROCFS_H


24 #i‡
__WORDSIZE
 == 32

25 
	t__¥_uid_t
;

26 
	t__¥_gid_t
;

28 
	t__¥_uid_t
;

29 
	t__¥_gid_t
;

	@/usr/include/x86_64-linux-gnu/bits/procfs-prregset.h

20 #i‚de‡
_SYS_PROCFS_H


24 
ñf_gªg£t_t
 
	t__¥gªg£t_t
;

25 
ñf_Âªg£t_t
 
	t__¥Âªg£t_t
;

	@/usr/include/x86_64-linux-gnu/bits/procfs.h

19 #i‚de‡
_SYS_PROCFS_H


24 #ifde‡
__x86_64__


25 
__exãnsi⁄__
 
	tñf_gªg_t
;

27 
	tñf_gªg_t
;

34 
	#ELF_NGREG
 ( (
u£r_ªgs_°ru˘
Ë/  (
ñf_gªg_t
))

	)

35 
ñf_gªg_t
 
	tñf_gªg£t_t
[
ELF_NGREG
];

37 #i‚de‡
__x86_64__


39 
u£r_Âªgs_°ru˘
 
	tñf_Âªg£t_t
;

44 
u£r_Âxªgs_°ru˘
 
	tñf_Âxªg£t_t
;

49 
u£r_Âªgs_°ru˘
 
	tñf_Âªg£t_t
;

	@/usr/include/x86_64-linux-gnu/bits/pthread_stack_min-dynamic.h

19 #i‚de‡
PTHREAD_STACK_MIN


20 #i‡
deföed
 
__USE_DYNAMIC_STACK_SIZE
 && __USE_DYNAMIC_STACK_SIZE

21 #i‚de‡
__ASSEMBLER__


22 
	#__SC_THREAD_STACK_MIN_VALUE
 75

	)

23 
__BEGIN_DECLS


24 
	$__sysc⁄f
 (
__«me
Ë
__THROW
;

25 
__END_DECLS


26 
	#PTHREAD_STACK_MIN
 
	`__sysc⁄f
 (
__SC_THREAD_STACK_MIN_VALUE
)

	)

29 
	~<bôs/±hªad_°ack_mö.h
>

	@/usr/include/x86_64-linux-gnu/bits/pthread_stack_min.h

20 
	#PTHREAD_STACK_MIN
 16384

	)

	@/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h

18 #i‚de‡
_BITS_PTHREADTYPES_ARCH_H


19 
	#_BITS_PTHREADTYPES_ARCH_H
 1

	)

21 
	~<bôs/w‹dsize.h
>

23 #ifde‡
__x86_64__


24 #i‡
__WORDSIZE
 == 64

25 
	#__SIZEOF_PTHREAD_MUTEX_T
 40

	)

26 
	#__SIZEOF_PTHREAD_ATTR_T
 56

	)

27 
	#__SIZEOF_PTHREAD_RWLOCK_T
 56

	)

28 
	#__SIZEOF_PTHREAD_BARRIER_T
 32

	)

30 
	#__SIZEOF_PTHREAD_MUTEX_T
 32

	)

31 
	#__SIZEOF_PTHREAD_ATTR_T
 32

	)

32 
	#__SIZEOF_PTHREAD_RWLOCK_T
 44

	)

33 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

36 
	#__SIZEOF_PTHREAD_MUTEX_T
 24

	)

37 
	#__SIZEOF_PTHREAD_ATTR_T
 36

	)

38 
	#__SIZEOF_PTHREAD_RWLOCK_T
 32

	)

39 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

41 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

42 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

43 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

44 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

45 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

47 
	#__LOCK_ALIGNMENT


	)

48 
	#__ONCE_ALIGNMENT


	)

50 #i‚de‡
__x86_64__


52 
	#__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
	`__ªg∑rm__
 (1)))

	)

	@/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h

19 #i‚de‡
_BITS_PTHREADTYPES_COMMON_H


20 
	#_BITS_PTHREADTYPES_COMMON_H
 1

	)

23 
	~<bôs/thªad-sh¨ed-ty≥s.h
>

27 
	t±hªad_t
;

34 
	m__size
[
__SIZEOF_PTHREAD_MUTEXATTR_T
];

35 
	m__Æign
;

36 } 
	t±hªad_muãx©å_t
;

43 
	m__size
[
__SIZEOF_PTHREAD_CONDATTR_T
];

44 
	m__Æign
;

45 } 
	t±hªad_c⁄d©å_t
;

49 
	t±hªad_key_t
;

53 
	t__ONCE_ALIGNMENT
 
	t±hªad_⁄˚_t
;

56 
	u±hªad_©å_t


58 
	m__size
[
__SIZEOF_PTHREAD_ATTR_T
];

59 
	m__Æign
;

61 #i‚de‡
__have_±hªad_©å_t


62 
±hªad_©å_t
 
	t±hªad_©å_t
;

63 
	#__have_±hªad_©å_t
 1

	)

69 
__±hªad_muãx_s
 
	m__d©a
;

70 
	m__size
[
__SIZEOF_PTHREAD_MUTEX_T
];

71 
	m__Æign
;

72 } 
	t±hªad_muãx_t
;

77 
__±hªad_c⁄d_s
 
	m__d©a
;

78 
	m__size
[
__SIZEOF_PTHREAD_COND_T
];

79 
__exãnsi⁄__
 
	m__Æign
;

80 } 
	t±hªad_c⁄d_t
;

83 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


88 
__±hªad_rwlock_¨ch_t
 
	m__d©a
;

89 
	m__size
[
__SIZEOF_PTHREAD_RWLOCK_T
];

90 
	m__Æign
;

91 } 
	t±hªad_rwlock_t
;

95 
	m__size
[
__SIZEOF_PTHREAD_RWLOCKATTR_T
];

96 
	m__Æign
;

97 } 
	t±hªad_rwlock©å_t
;

101 #ifde‡
__USE_XOPEN2K


103 vﬁ©ûê
	t±hªad_•ölock_t
;

110 
	m__size
[
__SIZEOF_PTHREAD_BARRIER_T
];

111 
	m__Æign
;

112 } 
	t±hªad_b¨rõr_t
;

116 
	m__size
[
__SIZEOF_PTHREAD_BARRIERATTR_T
];

117 
	m__Æign
;

118 } 
	t±hªad_b¨rõøâr_t
;

	@/usr/include/x86_64-linux-gnu/bits/ptrace-shared.h

21 #i‚de‡
_SYS_PTRACE_H


26 
	e__±ø˚_£t›ti⁄s


28 
	mPTRACE_O_TRACESYSGOOD
 = 0x00000001,

29 
	mPTRACE_O_TRACEFORK
 = 0x00000002,

30 
	mPTRACE_O_TRACEVFORK
 = 0x00000004,

31 
	mPTRACE_O_TRACECLONE
 = 0x00000008,

32 
	mPTRACE_O_TRACEEXEC
 = 0x00000010,

33 
	mPTRACE_O_TRACEVFORKDONE
 = 0x00000020,

34 
	mPTRACE_O_TRACEEXIT
 = 0x00000040,

35 
	mPTRACE_O_TRACESECCOMP
 = 0x00000080,

36 
	mPTRACE_O_EXITKILL
 = 0x00100000,

37 
	mPTRACE_O_SUSPEND_SECCOMP
 = 0x00200000,

38 
	mPTRACE_O_MASK
 = 0x003000ff

41 
	e__±ø˚_evítcodes


44 
	mPTRACE_EVENT_FORK
 = 1,

45 
	mPTRACE_EVENT_VFORK
 = 2,

46 
	mPTRACE_EVENT_CLONE
 = 3,

47 
	mPTRACE_EVENT_EXEC
 = 4,

48 
	mPTRACE_EVENT_VFORK_DONE
 = 5,

49 
	mPTRACE_EVENT_EXIT
 = 6,

50 
	mPTRACE_EVENT_SECCOMP
 = 7,

52 
	mPTRACE_EVENT_STOP
 = 128

56 
	e__±ø˚_gë_sysˇŒ_öfo_›


58 
	mPTRACE_SYSCALL_INFO_NONE
 = 0,

59 
	mPTRACE_SYSCALL_INFO_ENTRY
 = 1,

60 
	mPTRACE_SYSCALL_INFO_EXIT
 = 2,

61 
	mPTRACE_SYSCALL_INFO_SECCOMP
 = 3

65 
	s__±ø˚_≥eksigöfo_¨gs


67 
__uöt64_t
 
	moff
;

68 
__uöt32_t
 
	mÊags
;

69 
__öt32_t
 
	mƒ
;

72 
	e__±ø˚_≥eksigöfo_Êags


75 
	mPTRACE_PEEKSIGINFO_SHARED
 = (1 << 0)

79 
	s__±ø˚_£ccomp_mëad©a


81 
__uöt64_t
 
	mfûãr_off
;

82 
__uöt64_t
 
	mÊags
;

86 
	s__±ø˚_sysˇŒ_öfo


88 
__uöt8_t
 
	m›
;

91 
__uöt32_t
 
¨ch
 
__©åibuã__
 ((
__Æig√d__
 (4)));

93 
__uöt64_t
 
	mö°ru˘i⁄_poöãr
;

94 
__uöt64_t
 
	m°ack_poöãr
;

101 
__uöt64_t
 
	mƒ
;

102 
__uöt64_t
 
	m¨gs
[6];

103 } 
	míåy
;

108 
__öt64_t
 
	mrvÆ
;

109 
__uöt8_t
 
	mis_îr‹
;

110 } 
	mexô
;

116 
__uöt64_t
 
	mƒ
;

117 
__uöt64_t
 
	m¨gs
[6];

118 
__uöt32_t
 
	mªt_d©a
;

119 } 
	m£ccomp
;

124 
	s__±ø˚_r£q_c⁄figuøti⁄


126 
__uöt64_t
 
	mr£q_abi_poöãr
;

127 
__uöt32_t
 
	mr£q_abi_size
;

128 
__uöt32_t
 
	msig«tuª
;

129 
__uöt32_t
 
	mÊags
;

130 
__uöt32_t
 
	m∑d
;

142 
	$±ø˚
 (
__±ø˚_ªque°
 
__ªque°
, ...Ë
__THROW
;

	@/usr/include/x86_64-linux-gnu/bits/resource.h

19 #i‚de‡
_SYS_RESOURCE_H


23 
	~<bôs/ty≥s.h
>

31 
	e__æimô_ªsour˚


34 
	mRLIMIT_CPU
 = 0,

35 
	#RLIMIT_CPU
 
RLIMIT_CPU


	)

38 
	mRLIMIT_FSIZE
 = 1,

39 
	#RLIMIT_FSIZE
 
RLIMIT_FSIZE


	)

42 
	mRLIMIT_DATA
 = 2,

43 
	#RLIMIT_DATA
 
RLIMIT_DATA


	)

46 
	mRLIMIT_STACK
 = 3,

47 
	#RLIMIT_STACK
 
RLIMIT_STACK


	)

50 
	mRLIMIT_CORE
 = 4,

51 
	#RLIMIT_CORE
 
RLIMIT_CORE


	)

57 
	m__RLIMIT_RSS
 = 5,

58 
	#RLIMIT_RSS
 
__RLIMIT_RSS


	)

61 
	mRLIMIT_NOFILE
 = 7,

62 
	m__RLIMIT_OFILE
 = 
RLIMIT_NOFILE
,

63 
	#RLIMIT_NOFILE
 
RLIMIT_NOFILE


	)

64 
	#RLIMIT_OFILE
 
__RLIMIT_OFILE


	)

67 
	mRLIMIT_AS
 = 9,

68 
	#RLIMIT_AS
 
RLIMIT_AS


	)

71 
	m__RLIMIT_NPROC
 = 6,

72 
	#RLIMIT_NPROC
 
__RLIMIT_NPROC


	)

75 
	m__RLIMIT_MEMLOCK
 = 8,

76 
	#RLIMIT_MEMLOCK
 
__RLIMIT_MEMLOCK


	)

79 
	m__RLIMIT_LOCKS
 = 10,

80 
	#RLIMIT_LOCKS
 
__RLIMIT_LOCKS


	)

83 
	m__RLIMIT_SIGPENDING
 = 11,

84 
	#RLIMIT_SIGPENDING
 
__RLIMIT_SIGPENDING


	)

87 
	m__RLIMIT_MSGQUEUE
 = 12,

88 
	#RLIMIT_MSGQUEUE
 
__RLIMIT_MSGQUEUE


	)

93 
	m__RLIMIT_NICE
 = 13,

94 
	#RLIMIT_NICE
 
__RLIMIT_NICE


	)

98 
	m__RLIMIT_RTPRIO
 = 14,

99 
	#RLIMIT_RTPRIO
 
__RLIMIT_RTPRIO


	)

104 
	m__RLIMIT_RTTIME
 = 15,

105 
	#RLIMIT_RTTIME
 
__RLIMIT_RTTIME


	)

107 
	m__RLIMIT_NLIMITS
 = 16,

108 
	m__RLIM_NLIMITS
 = 
__RLIMIT_NLIMITS


109 
	#RLIMIT_NLIMITS
 
__RLIMIT_NLIMITS


	)

110 
	#RLIM_NLIMITS
 
__RLIM_NLIMITS


	)

114 #i‚de‡
__USE_FILE_OFFSET64


115 
	#RLIM_INFINITY
 ((
__æim_t
Ë-1)

	)

117 
	#RLIM_INFINITY
 0xffffffffffffffffuLL

	)

120 #ifde‡
__USE_LARGEFILE64


121 
	#RLIM64_INFINITY
 0xffffffffffffffffuLL

	)

125 
	#RLIM_SAVED_MAX
 
RLIM_INFINITY


	)

126 
	#RLIM_SAVED_CUR
 
RLIM_INFINITY


	)

130 #i‚de‡
__USE_FILE_OFFSET64


131 
__æim_t
 
	tæim_t
;

133 
__æim64_t
 
	tæim_t
;

135 #ifde‡
__USE_LARGEFILE64


136 
__æim64_t
 
	tæim64_t
;

139 
	sæimô


142 
æim_t
 
	mæim_cur
;

144 
æim_t
 
	mæim_max
;

147 #ifde‡
__USE_LARGEFILE64


148 
	sæimô64


151 
æim64_t
 
	mæim_cur
;

153 
æim64_t
 
	mæim_max
;

158 
	e__rußge_who


161 
	mRUSAGE_SELF
 = 0,

162 
	#RUSAGE_SELF
 
RUSAGE_SELF


	)

165 
	mRUSAGE_CHILDREN
 = -1

166 
	#RUSAGE_CHILDREN
 
RUSAGE_CHILDREN


	)

168 #ifde‡
__USE_GNU


171 
	mRUSAGE_THREAD
 = 1

172 
	#RUSAGE_THREAD
 
RUSAGE_THREAD


	)

174 
	#RUSAGE_LWP
 
RUSAGE_THREAD


	)

178 
	~<bôs/ty≥s/°ru˘_timevÆ.h
>

179 
	~<bôs/ty≥s/°ru˘_rußge.h
>

182 
	#PRIO_MIN
 -20

	)

183 
	#PRIO_MAX
 20

	)

187 
	e__¥i‹ôy_which


189 
	mPRIO_PROCESS
 = 0,

190 
	#PRIO_PROCESS
 
PRIO_PROCESS


	)

191 
	mPRIO_PGRP
 = 1,

192 
	#PRIO_PGRP
 
PRIO_PGRP


	)

193 
	mPRIO_USER
 = 2

194 
	#PRIO_USER
 
PRIO_USER


	)

198 
	g__BEGIN_DECLS


200 #ifde‡
__USE_GNU


202 #i‚de‡
__USE_FILE_OFFSET64


203 
	$¥limô
 (
__pid_t
 
__pid
, 
__æimô_ªsour˚
 
__ªsour˚
,

204 c⁄° 
æimô
 *
__√w_limô
,

205 
æimô
 *
__ﬁd_limô
Ë
__THROW
;

207 #ifde‡
__REDIRECT_NTH


208 
	`__REDIRECT_NTH
 (
¥limô
, (
__pid_t
 
__pid
,

209 
__æimô_ªsour˚
 
__ªsour˚
,

210 c⁄° 
æimô
 *
__√w_limô
,

211 
æimô
 *
__ﬁd_limô
), 
¥limô64
);

213 
	#¥limô
 
¥limô64


	)

216 #ifde‡
__USE_LARGEFILE64


217 
	$¥limô64
 (
__pid_t
 
__pid
, 
__æimô_ªsour˚
 
__ªsour˚
,

218 c⁄° 
æimô64
 *
__√w_limô
,

219 
æimô64
 *
__ﬁd_limô
Ë
__THROW
;

223 
__END_DECLS


	@/usr/include/x86_64-linux-gnu/bits/rseq.h

18 #i‚de‡
_SYS_RSEQ_H


30 
	#RSEQ_SIG
 0x53053053

	)

	@/usr/include/x86_64-linux-gnu/bits/sched.h

20 #i‚de‡
_BITS_SCHED_H


21 
	#_BITS_SCHED_H
 1

	)

23 #i‚de‡
_SCHED_H


28 
	#SCHED_OTHER
 0

	)

29 
	#SCHED_FIFO
 1

	)

30 
	#SCHED_RR
 2

	)

31 #ifde‡
__USE_GNU


32 
	#SCHED_BATCH
 3

	)

33 
	#SCHED_ISO
 4

	)

34 
	#SCHED_IDLE
 5

	)

35 
	#SCHED_DEADLINE
 6

	)

37 
	#SCHED_RESET_ON_FORK
 0x40000000

	)

40 #ifde‡
__USE_GNU


42 
	#CSIGNAL
 0x000000f‡

	)

43 
	#CLONE_VM
 0x00000100

	)

44 
	#CLONE_FS
 0x00000200

	)

45 
	#CLONE_FILES
 0x00000400

	)

46 
	#CLONE_SIGHAND
 0x00000800

	)

47 
	#CLONE_PIDFD
 0x00001000

	)

49 
	#CLONE_PTRACE
 0x00002000

	)

50 
	#CLONE_VFORK
 0x00004000

	)

52 
	#CLONE_PARENT
 0x00008000

	)

54 
	#CLONE_THREAD
 0x00010000

	)

55 
	#CLONE_NEWNS
 0x00020000

	)

56 
	#CLONE_SYSVSEM
 0x00040000

	)

57 
	#CLONE_SETTLS
 0x00080000

	)

58 
	#CLONE_PARENT_SETTID
 0x00100000

	)

60 
	#CLONE_CHILD_CLEARTID
 0x00200000

	)

62 
	#CLONE_DETACHED
 0x00400000

	)

63 
	#CLONE_UNTRACED
 0x00800000

	)

65 
	#CLONE_CHILD_SETTID
 0x01000000

	)

67 
	#CLONE_NEWCGROUP
 0x02000000

	)

68 
	#CLONE_NEWUTS
 0x04000000

	)

69 
	#CLONE_NEWIPC
 0x08000000

	)

70 
	#CLONE_NEWUSER
 0x10000000

	)

71 
	#CLONE_NEWPID
 0x20000000

	)

72 
	#CLONE_NEWNET
 0x40000000

	)

73 
	#CLONE_IO
 0x80000000

	)

76 
	~<bôs/ty≥s/°ru˘_sched_∑øm.h
>

78 
	g__BEGIN_DECLS


80 #ifde‡
__USE_GNU


82 
	$˛⁄e
 ((*
__‚
Ë(*
__¨g
), *
__chûd_°ack
,

83 
__Êags
, *
__¨g
, ...Ë
__THROW
;

86 
	$unsh¨e
 (
__Êags
Ë
__THROW
;

89 
	$sched_gë˝u
 (Ë
__THROW
;

92 
	$gë˝u
 (*, *Ë
__THROW
;

95 
	$£äs
 (
__fd
, 
__n°y≥
Ë
__THROW
;

98 
__END_DECLS


	@/usr/include/x86_64-linux-gnu/bits/select.h

18 #i‚de‡
_SYS_SELECT_H


25 
	#__FD_ZERO
(
s
) \

27 
__i
; \

28 
fd_£t
 *
__¨r
 = (
s
); \

29 
__i
 = 0; __ò<  (
fd_£t
Ë/  (
__fd_mask
); ++__i) \

30 
	`__FDS_BITS
 (
__¨r
)[
__i
] = 0; \

31 } 0)

	)

32 
	#__FD_SET
(
d
, 
s
) \

33 ((Ë(
	`__FDS_BITS
 (
s
)[
	`__FD_ELT
(
d
)] |
	`__FD_MASK
(d)))

	)

34 
	#__FD_CLR
(
d
, 
s
) \

35 ((Ë(
	`__FDS_BITS
 (
s
)[
	`__FD_ELT
(
d
)] &~
	`__FD_MASK
(d)))

	)

36 
	#__FD_ISSET
(
d
, 
s
) \

37 ((
	`__FDS_BITS
 (
s
)[
	`__FD_ELT
 (
d
)] & 
	`__FD_MASK
 (d)Ë!0)

	)

	@/usr/include/x86_64-linux-gnu/bits/select2.h

19 #i‚de‡
_SYS_SELECT_H


24 
__fdñt_chk
 (
__d
);

25 
	$__fdñt_w¨n
 (
__d
)

26 
	`__w¨«âr
 ("bit outside of fd_set selected");

27 #unde‡
__FD_ELT


28 
	#__FD_ELT
(
d
) \

29 
__exãnsi⁄__
 \

30 ({ 
__d
 = (
d
); \

31 (
	`__buûtö_c⁄°™t_p
 (
__d
) \

32 ? (0 <
__d
 && __d < 
__FD_SETSIZE
 \

33 ? (
__d
 / 
__NFDBITS
) \

34 : 
	`__fdñt_w¨n
 (
__d
)) \

35 : 
	`__fdñt_chk
 (
__d
)); 
	}
})

	)

	@/usr/include/x86_64-linux-gnu/bits/sem.h

18 #i‚de‡
_SYS_SEM_H


22 
	~<sys/ty≥s.h
>

23 
	~<bôs/timesize.h
>

24 
	~<bôs/ty≥s/°ru˘_£mid_ds.h
>

25 
	~<bôs/ty≥s/°ru˘_£mid64_ds.h
>

28 
	#SEM_UNDO
 0x1000

	)

31 
	#GETPID
 11

	)

32 
	#GETVAL
 12

	)

33 
	#GETALL
 13

	)

34 
	#GETNCNT
 14

	)

35 
	#GETZCNT
 15

	)

36 
	#SETVAL
 16

	)

37 
	#SETALL
 17

	)

53 
	#_SEM_SEMUN_UNDEFINED
 1

	)

55 #ifde‡
__USE_MISC


58 
	#SEM_STAT
 18

	)

59 
	#SEM_INFO
 19

	)

60 
	#SEM_STAT_ANY
 20

	)

62 
	s£möfo


64 
	m£mm≠
;

65 
	m£mmni
;

66 
	m£mmns
;

67 
	m£mmnu
;

68 
	m£mm¶
;

69 
	m£m›m
;

70 
	m£mume
;

71 
	m£musz
;

72 
	m£mvmx
;

73 
	m£m´m
;

	@/usr/include/x86_64-linux-gnu/bits/semaphore.h

19 #i‚de‡
_SEMAPHORE_H


23 
	~<bôs/w‹dsize.h
>

25 #i‡
__WORDSIZE
 == 64

26 
	#__SIZEOF_SEM_T
 32

	)

28 
	#__SIZEOF_SEM_T
 16

	)

32 
	#SEM_FAILED
 ((
£m_t
 *Ë0)

	)

37 
	m__size
[
__SIZEOF_SEM_T
];

38 
	m__Æign
;

39 } 
	t£m_t
;

	@/usr/include/x86_64-linux-gnu/bits/setjmp.h

19 #i‚de‡
_BITS_SETJMP_H


20 
	#_BITS_SETJMP_H
 1

	)

22 #i‡!
deföed
 
_SETJMP_H
 && !deföed 
_PTHREAD_H


26 
	~<bôs/w‹dsize.h
>

28 #i‚de‡
_ASM


30 #i‡
__WORDSIZE
 == 64

31 
	t__jmp_buf
[8];

32 #ñi‡
deföed
 
__x86_64__


33 
__exãnsi⁄__
 
	t__jmp_buf
[8];

35 
	t__jmp_buf
[6];

	@/usr/include/x86_64-linux-gnu/bits/setjmp2.h

19 #i‚de‡
_SETJMP_H


24 #ifde‡
__REDIRECT_NTH


25 
__REDIRECT_NTHNL
 (
l⁄gjmp
,

26 (
__jmp_buf_èg
 
__ív
[1], 
__vÆ
),

27 
__l⁄gjmp_chk
Ë
__©åibuã__
 ((
__n‹ëu∫__
));

28 
__REDIRECT_NTHNL
 (
_l⁄gjmp
,

29 (
__jmp_buf_èg
 
__ív
[1], 
__vÆ
),

30 
__l⁄gjmp_chk
Ë
__©åibuã__
 ((
__n‹ëu∫__
));

31 
__REDIRECT_NTHNL
 (
sigl⁄gjmp
,

32 (
__jmp_buf_èg
 
__ív
[1], 
__vÆ
),

33 
__l⁄gjmp_chk
Ë
__©åibuã__
 ((
__n‹ëu∫__
));

35 
__l⁄gjmp_chk
 (
__jmp_buf_èg
 
__ív
[1], 
__vÆ
),

36 
__THROWNL
 
__©åibuã__
 ((
__n‹ëu∫__
));

37 
	#l⁄gjmp
 
__l⁄gjmp_chk


	)

38 
	#_l⁄gjmp
 
__l⁄gjmp_chk


	)

39 
	#sigl⁄gjmp
 
__l⁄gjmp_chk


	)

	@/usr/include/x86_64-linux-gnu/bits/shm.h

18 #i‚de‡
_SYS_SHM_H


22 
	~<bôs/ty≥s.h
>

23 
	~<bôs/w‹dsize.h
>

24 
	~<bôs/shmlba.h
>

27 
	#SHM_R
 0400

	)

28 
	#SHM_W
 0200

	)

31 
	#SHM_RDONLY
 010000

	)

32 
	#SHM_RND
 020000

	)

33 
	#SHM_REMAP
 040000

	)

34 
	#SHM_EXEC
 0100000

	)

37 
	#SHM_LOCK
 11

	)

38 
	#SHM_UNLOCK
 12

	)

40 
__BEGIN_DECLS


43 
__sysˇŒ_ul⁄g_t
 
	tshm©t_t
;

45 
	~<bôs/ty≥s/°ru˘_shmid_ds.h
>

46 
	~<bôs/ty≥s/°ru˘_shmid64_ds.h
>

48 #ifde‡
__USE_MISC


51 
	#SHM_STAT
 13

	)

52 
	#SHM_INFO
 14

	)

53 
	#SHM_STAT_ANY
 15

	)

56 
	#SHM_DEST
 01000

	)

57 
	#SHM_LOCKED
 02000

	)

58 
	#SHM_HUGETLB
 04000

	)

59 
	#SHM_NORESERVE
 010000

	)

61 
	sshmöfo


63 
__sysˇŒ_ul⁄g_t
 
	mshmmax
;

64 
__sysˇŒ_ul⁄g_t
 
	mshmmö
;

65 
__sysˇŒ_ul⁄g_t
 
	mshmmni
;

66 
__sysˇŒ_ul⁄g_t
 
	mshm£g
;

67 
__sysˇŒ_ul⁄g_t
 
	mshmÆl
;

68 
__sysˇŒ_ul⁄g_t
 
	m__glibc_ª£rved1
;

69 
__sysˇŒ_ul⁄g_t
 
	m__glibc_ª£rved2
;

70 
__sysˇŒ_ul⁄g_t
 
	m__glibc_ª£rved3
;

71 
__sysˇŒ_ul⁄g_t
 
	m__glibc_ª£rved4
;

74 
	sshm_öfo


76 
	mu£d_ids
;

77 
__sysˇŒ_ul⁄g_t
 
	mshm_tŸ
;

78 
__sysˇŒ_ul⁄g_t
 
	mshm_rss
;

79 
__sysˇŒ_ul⁄g_t
 
	mshm_swp
;

80 
__sysˇŒ_ul⁄g_t
 
	msw≠_©ãm±s
;

81 
__sysˇŒ_ul⁄g_t
 
	msw≠_suc˚s£s
;

86 
	g__END_DECLS


	@/usr/include/x86_64-linux-gnu/bits/shmlba.h

19 #i‚de‡
_SYS_SHM_H


23 
	g__BEGIN_DECLS


26 
	#SHMLBA
 (
	`__gë∑gesize
 ())

	)

27 
	$__gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

29 
__END_DECLS


	@/usr/include/x86_64-linux-gnu/bits/sigaction.h

19 #i‚de‡
_BITS_SIGACTION_H


20 
	#_BITS_SIGACTION_H
 1

	)

22 #i‚de‡
_SIGNAL_H


27 
	ssiga˘i⁄


30 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_XOPEN_EXTENDED


34 
__sigh™dÀr_t
 
	mß_h™dÀr
;

36 (*
	mß_siga˘i⁄
Ë(, 
	msigöfo_t
 *, *);

38 
	m__siga˘i⁄_h™dÀr
;

39 
	#ß_h™dÀr
 
__siga˘i⁄_h™dÀr
.
ß_h™dÀr


	)

40 
	#ß_siga˘i⁄
 
__siga˘i⁄_h™dÀr
.
ß_siga˘i⁄


	)

42 
__sigh™dÀr_t
 
	mß_h™dÀr
;

46 
__sig£t_t
 
	mß_mask
;

49 
	mß_Êags
;

52 (*
	mß_ª°‹î
) ();

56 
	#SA_NOCLDSTOP
 1

	)

57 
	#SA_NOCLDWAIT
 2

	)

58 
	#SA_SIGINFO
 4

	)

60 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_MISC


61 
	#SA_ONSTACK
 0x08000000

	)

63 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


64 
	#SA_RESTART
 0x10000000

	)

65 
	#SA_NODEFER
 0x40000000

	)

67 
	#SA_RESETHAND
 0x80000000

	)

69 #ifde‡
__USE_MISC


70 
	#SA_INTERRUPT
 0x20000000

	)

73 
	#SA_NOMASK
 
SA_NODEFER


	)

74 
	#SA_ONESHOT
 
SA_RESETHAND


	)

75 
	#SA_STACK
 
SA_ONSTACK


	)

79 
	#SIG_BLOCK
 0

	)

80 
	#SIG_UNBLOCK
 1

	)

81 
	#SIG_SETMASK
 2

	)

	@/usr/include/x86_64-linux-gnu/bits/sigcontext.h

18 #i‚de‡
_BITS_SIGCONTEXT_H


19 
	#_BITS_SIGCONTEXT_H
 1

	)

21 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_SYS_UCONTEXT_H


25 
	~<bôs/ty≥s.h
>

27 
	#FP_XSTATE_MAGIC1
 0x46505853U

	)

28 
	#FP_XSTATE_MAGIC2
 0x46505845U

	)

29 
	#FP_XSTATE_MAGIC2_SIZE
  (
FP_XSTATE_MAGIC2
)

	)

31 
	s_Âx_sw_byãs


33 
__uöt32_t
 
	mmagic1
;

34 
__uöt32_t
 
	mexãnded_size
;

35 
__uöt64_t
 
	mx°©e_bv
;

36 
__uöt32_t
 
	mx°©e_size
;

37 
__uöt32_t
 
	m__glibc_ª£rved1
[7];

40 
	s_Âªg


42 
	msignifiˇnd
[4];

43 
	mexp⁄ít
;

46 
	s_Âxªg


48 
	msignifiˇnd
[4];

49 
	mexp⁄ít
;

50 
	m__glibc_ª£rved1
[3];

53 
	s_xmmªg


55 
__uöt32_t
 
	mñemít
[4];

60 #i‚de‡
__x86_64__


62 
	s_Â°©e


65 
__uöt32_t
 
	mcw
;

66 
__uöt32_t
 
	msw
;

67 
__uöt32_t
 
	mèg
;

68 
__uöt32_t
 
	mùoff
;

69 
__uöt32_t
 
	mcs£l
;

70 
__uöt32_t
 
	md©aoff
;

71 
__uöt32_t
 
	md©a£l
;

72 
_Âªg
 
	m_°
[8];

73 
	m°©us
;

74 
	mmagic
;

77 
__uöt32_t
 
	m_fx§_ív
[6];

78 
__uöt32_t
 
	mmxc§
;

79 
__uöt32_t
 
	m__glibc_ª£rved1
;

80 
_Âxªg
 
	m_fx§_°
[8];

81 
_xmmªg
 
	m_xmm
[8];

82 
__uöt32_t
 
	m__glibc_ª£rved2
[56];

85 #i‚de‡
sigc⁄ãxt_°ru˘


90 
	#sigc⁄ãxt_°ru˘
 
sigc⁄ãxt


	)

93 
	#X86_FXSR_MAGIC
 0x0000

	)

95 
	ssigc⁄ãxt


97 
	mgs
, 
	m__gsh
;

98 
	mfs
, 
	m__fsh
;

99 
	mes
, 
	m__esh
;

100 
	mds
, 
	m__dsh
;

101 
	medi
;

102 
	mesi
;

103 
	mebp
;

104 
	me•
;

105 
	mebx
;

106 
	medx
;

107 
	mecx
;

108 
	móx
;

109 
	må≠no
;

110 
	mîr
;

111 
	meù
;

112 
	mcs
, 
	m__csh
;

113 
	meÊags
;

114 
	me•_©_sig«l
;

115 
	mss
, 
	m__ssh
;

116 
_Â°©e
 * 
	mÂ°©e
;

117 
	mﬁdmask
;

118 
	m¸2
;

123 
	s_Â°©e


126 
__uöt16_t
 
	mcwd
;

127 
__uöt16_t
 
	mswd
;

128 
__uöt16_t
 
	m·w
;

129 
__uöt16_t
 
	mf›
;

130 
__uöt64_t
 
	mrù
;

131 
__uöt64_t
 
	mrdp
;

132 
__uöt32_t
 
	mmxc§
;

133 
__uöt32_t
 
	mmx¸_mask
;

134 
_Âxªg
 
	m_°
[8];

135 
_xmmªg
 
	m_xmm
[16];

136 
__uöt32_t
 
	m__glibc_ª£rved1
[24];

139 
	ssigc⁄ãxt


141 
__uöt64_t
 
	mr8
;

142 
__uöt64_t
 
	mr9
;

143 
__uöt64_t
 
	mr10
;

144 
__uöt64_t
 
	mr11
;

145 
__uöt64_t
 
	mr12
;

146 
__uöt64_t
 
	mr13
;

147 
__uöt64_t
 
	mr14
;

148 
__uöt64_t
 
	mr15
;

149 
__uöt64_t
 
	mrdi
;

150 
__uöt64_t
 
	mrsi
;

151 
__uöt64_t
 
	mrbp
;

152 
__uöt64_t
 
	mrbx
;

153 
__uöt64_t
 
	mrdx
;

154 
__uöt64_t
 
	møx
;

155 
__uöt64_t
 
	mrcx
;

156 
__uöt64_t
 
	mr•
;

157 
__uöt64_t
 
	mrù
;

158 
__uöt64_t
 
	meÊags
;

159 
	mcs
;

160 
	mgs
;

161 
	mfs
;

162 
	m__∑d0
;

163 
__uöt64_t
 
	mîr
;

164 
__uöt64_t
 
	må≠no
;

165 
__uöt64_t
 
	mﬁdmask
;

166 
__uöt64_t
 
	m¸2
;

167 
__exãnsi⁄__
 union

169 
_Â°©e
 * 
	mÂ°©e
;

170 
__uöt64_t
 
	m__Â°©e_w‹d
;

172 
__uöt64_t
 
	m__ª£rved1
 [8];

177 
	s_xßve_hdr


179 
__uöt64_t
 
	mx°©e_bv
;

180 
__uöt64_t
 
	m__glibc_ª£rved1
[2];

181 
__uöt64_t
 
	m__glibc_ª£rved2
[5];

184 
	s_ymmh_°©e


186 
__uöt32_t
 
	mymmh_•a˚
[64];

189 
	s_x°©e


191 
_Â°©e
 
	mÂ°©e
;

192 
_xßve_hdr
 
	mx°©e_hdr
;

193 
_ymmh_°©e
 
	mymmh
;

	@/usr/include/x86_64-linux-gnu/bits/sigevent-consts.h

19 #i‚de‡
_BITS_SIGEVENT_CONSTS_H


20 
	#_BITS_SIGEVENT_CONSTS_H
 1

	)

22 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_AIO_H


29 
	mSIGEV_SIGNAL
 = 0,

30 
	#SIGEV_SIGNAL
 
SIGEV_SIGNAL


	)

31 
	mSIGEV_NONE
,

32 
	#SIGEV_NONE
 
SIGEV_NONE


	)

33 
	mSIGEV_THREAD
,

34 
	#SIGEV_THREAD
 
SIGEV_THREAD


	)

36 
	mSIGEV_THREAD_ID
 = 4

38 
	#SIGEV_THREAD_ID
 
SIGEV_THREAD_ID


	)

	@/usr/include/x86_64-linux-gnu/bits/siginfo-arch.h

2 #i‚de‡
_BITS_SIGINFO_ARCH_H


3 
	#_BITS_SIGINFO_ARCH_H
 1

	)

5 #i‡
deföed
 
__x86_64__
 && 
__WORDSIZE
 == 32

12 
__˛ock_t
 
	t__©åibuã__
 ((
	t__Æig√d__
 (4))Ë
	t__sigchld_˛ock_t
;

13 
	#__SI_ALIGNMENT
 
	`__©åibuã__
 ((
	`__Æig√d__
 (8)))

	)

14 
	#__SI_CLOCK_T
 
__sigchld_˛ock_t


	)

	@/usr/include/x86_64-linux-gnu/bits/siginfo-consts-arch.h

2 #i‚de‡
_BITS_SIGINFO_CONSTS_ARCH_H


3 
	#_BITS_SIGINFO_CONSTS_ARCH_H
 1

	)

	@/usr/include/x86_64-linux-gnu/bits/siginfo-consts.h

19 #i‚de‡
_BITS_SIGINFO_CONSTS_H


20 
	#_BITS_SIGINFO_CONSTS_H
 1

	)

22 #i‚de‡
_SIGNAL_H


28 
	~<bôs/sigöfo-¨ch.h
>

29 #i‚de‡
__SI_ASYNCIO_AFTER_SIGIO


30 
	#__SI_ASYNCIO_AFTER_SIGIO
 1

	)

37 
	mSI_ASYNCNL
 = -60,

38 
	mSI_DETHREAD
 = -7,

40 
	mSI_TKILL
,

41 
	mSI_SIGIO
,

42 #i‡
__SI_ASYNCIO_AFTER_SIGIO


43 
	mSI_ASYNCIO
,

44 
	mSI_MESGQ
,

45 
	mSI_TIMER
,

47 
	mSI_MESGQ
,

48 
	mSI_TIMER
,

49 
	mSI_ASYNCIO
,

51 
	mSI_QUEUE
,

52 
	mSI_USER
,

53 
	mSI_KERNEL
 = 0x80

55 
	#SI_ASYNCNL
 
SI_ASYNCNL


	)

56 
	#SI_DETHREAD
 
SI_DETHREAD


	)

57 
	#SI_TKILL
 
SI_TKILL


	)

58 
	#SI_SIGIO
 
SI_SIGIO


	)

59 
	#SI_ASYNCIO
 
SI_ASYNCIO


	)

60 
	#SI_MESGQ
 
SI_MESGQ


	)

61 
	#SI_TIMER
 
SI_TIMER


	)

62 
	#SI_ASYNCIO
 
SI_ASYNCIO


	)

63 
	#SI_QUEUE
 
SI_QUEUE


	)

64 
	#SI_USER
 
SI_USER


	)

65 
	#SI_KERNEL
 
SI_KERNEL


	)

69 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


73 
	mILL_ILLOPC
 = 1,

74 
	#ILL_ILLOPC
 
ILL_ILLOPC


	)

75 
	mILL_ILLOPN
,

76 
	#ILL_ILLOPN
 
ILL_ILLOPN


	)

77 
	mILL_ILLADR
,

78 
	#ILL_ILLADR
 
ILL_ILLADR


	)

79 
	mILL_ILLTRP
,

80 
	#ILL_ILLTRP
 
ILL_ILLTRP


	)

81 
	mILL_PRVOPC
,

82 
	#ILL_PRVOPC
 
ILL_PRVOPC


	)

83 
	mILL_PRVREG
,

84 
	#ILL_PRVREG
 
ILL_PRVREG


	)

85 
	mILL_COPROC
,

86 
	#ILL_COPROC
 
ILL_COPROC


	)

87 
	mILL_BADSTK
,

88 
	#ILL_BADSTK
 
ILL_BADSTK


	)

89 
	mILL_BADIADDR


90 
	#ILL_BADIADDR
 
ILL_BADIADDR


	)

96 
	mFPE_INTDIV
 = 1,

97 
	#FPE_INTDIV
 
FPE_INTDIV


	)

98 
	mFPE_INTOVF
,

99 
	#FPE_INTOVF
 
FPE_INTOVF


	)

100 
	mFPE_FLTDIV
,

101 
	#FPE_FLTDIV
 
FPE_FLTDIV


	)

102 
	mFPE_FLTOVF
,

103 
	#FPE_FLTOVF
 
FPE_FLTOVF


	)

104 
	mFPE_FLTUND
,

105 
	#FPE_FLTUND
 
FPE_FLTUND


	)

106 
	mFPE_FLTRES
,

107 
	#FPE_FLTRES
 
FPE_FLTRES


	)

108 
	mFPE_FLTINV
,

109 
	#FPE_FLTINV
 
FPE_FLTINV


	)

110 
	mFPE_FLTSUB
,

111 
	#FPE_FLTSUB
 
FPE_FLTSUB


	)

112 
	mFPE_FLTUNK
 = 14,

113 
	#FPE_FLTUNK
 
FPE_FLTUNK


	)

114 
	mFPE_CONDTRAP


115 
	#FPE_CONDTRAP
 
FPE_CONDTRAP


	)

121 
	mSEGV_MAPERR
 = 1,

122 
	#SEGV_MAPERR
 
SEGV_MAPERR


	)

123 
	mSEGV_ACCERR
,

124 
	#SEGV_ACCERR
 
SEGV_ACCERR


	)

125 
	mSEGV_BNDERR
,

126 
	#SEGV_BNDERR
 
SEGV_BNDERR


	)

127 
	mSEGV_PKUERR
,

128 
	#SEGV_PKUERR
 
SEGV_PKUERR


	)

129 
	mSEGV_ACCADI
,

130 
	#SEGV_ACCADI
 
SEGV_ACCADI


	)

131 
	mSEGV_ADIDERR
,

132 
	#SEGV_ADIDERR
 
SEGV_ADIDERR


	)

133 
	mSEGV_ADIPERR
,

134 
	#SEGV_ADIPERR
 
SEGV_ADIPERR


	)

135 
	mSEGV_MTEAERR
,

136 
	#SEGV_MTEAERR
 
SEGV_MTEAERR


	)

137 
	mSEGV_MTESERR


138 
	#SEGV_MTESERR
 
SEGV_MTESERR


	)

144 
	mBUS_ADRALN
 = 1,

145 
	#BUS_ADRALN
 
BUS_ADRALN


	)

146 
	mBUS_ADRERR
,

147 
	#BUS_ADRERR
 
BUS_ADRERR


	)

148 
	mBUS_OBJERR
,

149 
	#BUS_OBJERR
 
BUS_OBJERR


	)

150 
	mBUS_MCEERR_AR
,

151 
	#BUS_MCEERR_AR
 
BUS_MCEERR_AR


	)

152 
	mBUS_MCEERR_AO


153 
	#BUS_MCEERR_AO
 
BUS_MCEERR_AO


	)

157 #ifde‡
__USE_XOPEN_EXTENDED


161 
	mTRAP_BRKPT
 = 1,

162 
	#TRAP_BRKPT
 
TRAP_BRKPT


	)

163 
	mTRAP_TRACE
,

164 
	#TRAP_TRACE
 
TRAP_TRACE


	)

165 
	mTRAP_BRANCH
,

166 
	#TRAP_BRANCH
 
TRAP_BRANCH


	)

167 
	mTRAP_HWBKPT
,

168 
	#TRAP_HWBKPT
 
TRAP_HWBKPT


	)

169 
	mTRAP_UNK


170 
	#TRAP_UNK
 
TRAP_UNK


	)

174 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


178 
	mCLD_EXITED
 = 1,

179 
	#CLD_EXITED
 
CLD_EXITED


	)

180 
	mCLD_KILLED
,

181 
	#CLD_KILLED
 
CLD_KILLED


	)

182 
	mCLD_DUMPED
,

183 
	#CLD_DUMPED
 
CLD_DUMPED


	)

184 
	mCLD_TRAPPED
,

185 
	#CLD_TRAPPED
 
CLD_TRAPPED


	)

186 
	mCLD_STOPPED
,

187 
	#CLD_STOPPED
 
CLD_STOPPED


	)

188 
	mCLD_CONTINUED


189 
	#CLD_CONTINUED
 
CLD_CONTINUED


	)

195 
	mPOLL_IN
 = 1,

196 
	#POLL_IN
 
POLL_IN


	)

197 
	mPOLL_OUT
,

198 
	#POLL_OUT
 
POLL_OUT


	)

199 
	mPOLL_MSG
,

200 
	#POLL_MSG
 
POLL_MSG


	)

201 
	mPOLL_ERR
,

202 
	#POLL_ERR
 
POLL_ERR


	)

203 
	mPOLL_PRI
,

204 
	#POLL_PRI
 
POLL_PRI


	)

205 
	mPOLL_HUP


206 
	#POLL_HUP
 
POLL_HUP


	)

212 #ifde‡
__USE_GNU


213 
	~<bôs/sigöfo-c⁄°s-¨ch.h
>

	@/usr/include/x86_64-linux-gnu/bits/signal_ext.h

19 #i‚de‡
_SIGNAL_H


23 #ifde‡
__USE_GNU


29 
tgkûl
 (
__pid_t
 
__tgid
, __pid_à
__tid
, 
__sig«l
);

	@/usr/include/x86_64-linux-gnu/bits/signalfd.h

18 #i‚def 
_SYS_SIGNALFD_H


25 
	mSFD_CLOEXEC
 = 02000000,

26 
	#SFD_CLOEXEC
 
SFD_CLOEXEC


	)

27 
	mSFD_NONBLOCK
 = 00004000

28 
	#SFD_NONBLOCK
 
SFD_NONBLOCK


	)

	@/usr/include/x86_64-linux-gnu/bits/signum-arch.h

19 #i‚de‡
_BITS_SIGNUM_ARCH_H


20 
	#_BITS_SIGNUM_ARCH_H
 1

	)

22 #i‚de‡
_SIGNAL_H


29 
	#SIGSTKFLT
 16

	)

30 
	#SIGPWR
 30

	)

33 
	#SIGBUS
 7

	)

34 
	#SIGSYS
 31

	)

37 
	#SIGURG
 23

	)

38 
	#SIGSTOP
 19

	)

39 
	#SIGTSTP
 20

	)

40 
	#SIGCONT
 18

	)

41 
	#SIGCHLD
 17

	)

42 
	#SIGTTIN
 21

	)

43 
	#SIGTTOU
 22

	)

44 
	#SIGPOLL
 29

	)

45 
	#SIGXFSZ
 25

	)

46 
	#SIGXCPU
 24

	)

47 
	#SIGVTALRM
 26

	)

48 
	#SIGPROF
 27

	)

49 
	#SIGUSR1
 10

	)

50 
	#SIGUSR2
 12

	)

54 
	#SIGWINCH
 28

	)

57 
	#SIGIO
 
SIGPOLL


	)

58 
	#SIGIOT
 
SIGABRT


	)

59 
	#SIGCLD
 
SIGCHLD


	)

61 
	#__SIGRTMIN
 32

	)

62 
	#__SIGRTMAX
 64

	)

	@/usr/include/x86_64-linux-gnu/bits/signum-generic.h

19 #i‚def 
_BITS_SIGNUM_GENERIC_H


20 
	#_BITS_SIGNUM_GENERIC_H
 1

	)

22 #i‚de‡
_SIGNAL_H


28 
	#SIG_ERR
 ((
__sigh™dÀr_t
Ë-1Ë

	)

29 
	#SIG_DFL
 ((
__sigh™dÀr_t
Ë0Ë

	)

30 
	#SIG_IGN
 ((
__sigh™dÀr_t
Ë1Ë

	)

32 #ifde‡
__USE_XOPEN


33 
	#SIG_HOLD
 ((
__sigh™dÀr_t
Ë2Ë

	)

48 
	#SIGINT
 2

	)

49 
	#SIGILL
 4

	)

50 
	#SIGABRT
 6

	)

51 
	#SIGFPE
 8

	)

52 
	#SIGSEGV
 11

	)

53 
	#SIGTERM
 15

	)

56 
	#SIGHUP
 1

	)

57 
	#SIGQUIT
 3

	)

58 
	#SIGTRAP
 5

	)

59 
	#SIGKILL
 9

	)

60 
	#SIGPIPE
 13

	)

61 
	#SIGALRM
 14

	)

64 
	#SIGIO
 
SIGPOLL


	)

65 
	#SIGIOT
 
SIGABRT


	)

66 
	#SIGCLD
 
SIGCHLD


	)

76 
	~<bôs/signum-¨ch.h
>

79 
	#_NSIG
 (
__SIGRTMAX
 + 1)

	)

	@/usr/include/x86_64-linux-gnu/bits/sigstack.h

19 #i‚de‡
_BITS_SIGSTACK_H


20 
	#_BITS_SIGSTACK_H
 1

	)

22 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_SYS_UCONTEXT_H


27 
	#MINSIGSTKSZ
 2048

	)

30 
	#SIGSTKSZ
 8192

	)

	@/usr/include/x86_64-linux-gnu/bits/sigstksz.h

19 #i‚de‡
_SIGNAL_H


23 #i‡
deföed
 
__USE_DYNAMIC_STACK_SIZE
 && __USE_DYNAMIC_STACK_SIZE

24 
	~<uni°d.h
>

27 #unde‡
SIGSTKSZ


28 
	#SIGSTKSZ
 
	`sysc⁄f
 (
_SC_SIGSTKSZ
)

	)

31 #unde‡
MINSIGSTKSZ


32 
	#MINSIGSTKSZ
 
SIGSTKSZ


	)

	@/usr/include/x86_64-linux-gnu/bits/sigthread.h

19 #i‚de‡
_BITS_SIGTHREAD_H


20 
	#_BITS_SIGTHREAD_H
 1

	)

22 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_PTHREAD_H


27 
	~<bôs/ty≥s/__sig£t_t.h
>

31 
	$±hªad_sigmask
 (
__how
,

32 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__√wmask
,

33 
__sig£t_t
 *
__ª°ri˘
 
__ﬁdmask
)
__THROW
;

36 
	$±hªad_kûl
 (
±hªad_t
 
__thªadid
, 
__signo
Ë
__THROW
;

38 #ifde‡
__USE_GNU


40 
	$±hªad_sigqueue
 (
±hªad_t
 
__thªadid
, 
__signo
,

41 c⁄° 
sigvÆ
 
__vÆue
Ë
__THROW
;

	@/usr/include/x86_64-linux-gnu/bits/sockaddr.h

23 #i‚de‡
_BITS_SOCKADDR_H


24 
	#_BITS_SOCKADDR_H
 1

	)

28 
	tß_Ámûy_t
;

34 
	#__SOCKADDR_COMMON
(
ß_¥efix
) \

35 
ß_Ámûy_t
 
ß_¥efix
##
Ámûy


	)

37 
	#__SOCKADDR_COMMON_SIZE
 ( ())

	)

40 
	#_SS_SIZE
 128

	)

	@/usr/include/x86_64-linux-gnu/bits/socket-constants.h

19 #i‚de‡
_SYS_SOCKET_H


23 
	~<bôs/timesize.h
>

25 
	#SOL_SOCKET
 1

	)

26 
	#SO_ACCEPTCONN
 30

	)

27 
	#SO_BROADCAST
 6

	)

28 
	#SO_DONTROUTE
 5

	)

29 
	#SO_ERROR
 4

	)

30 
	#SO_KEEPALIVE
 9

	)

31 
	#SO_LINGER
 13

	)

32 
	#SO_OOBINLINE
 10

	)

33 
	#SO_RCVBUF
 8

	)

34 
	#SO_RCVLOWAT
 18

	)

35 
	#SO_REUSEADDR
 2

	)

36 
	#SO_SNDBUF
 7

	)

37 
	#SO_SNDLOWAT
 19

	)

38 
	#SO_TYPE
 3

	)

40 #i‡(
__TIMESIZE
 =64 && 
__WORDSIZE
 == 32 \

41 && (!
deföed
 
	g__SYSCALL_WORDSIZE
 || __SYSCALL_WORDSIZE == 32))

42 
	#SO_RCVTIMEO
 66

	)

43 
	#SO_SNDTIMEO
 67

	)

44 
	#SO_TIMESTAMP
 63

	)

45 
	#SO_TIMESTAMPNS
 64

	)

46 
	#SO_TIMESTAMPING
 65

	)

48 #i‡
__TIMESIZE
 == 64

49 
	#SO_RCVTIMEO
 20

	)

50 
	#SO_SNDTIMEO
 21

	)

51 
	#SO_TIMESTAMP
 29

	)

52 
	#SO_TIMESTAMPNS
 35

	)

53 
	#SO_TIMESTAMPING
 37

	)

55 
	#SO_RCVTIMEO_OLD
 20

	)

56 
	#SO_SNDTIMEO_OLD
 21

	)

57 
	#SO_RCVTIMEO_NEW
 66

	)

58 
	#SO_SNDTIMEO_NEW
 67

	)

60 
	#SO_TIMESTAMP_OLD
 29

	)

61 
	#SO_TIMESTAMPNS_OLD
 35

	)

62 
	#SO_TIMESTAMPING_OLD
 37

	)

63 
	#SO_TIMESTAMP_NEW
 63

	)

64 
	#SO_TIMESTAMPNS_NEW
 64

	)

65 
	#SO_TIMESTAMPING_NEW
 65

	)

67 #ifde‡
__USE_TIME_BITS64


68 
	#SO_RCVTIMEO
 
SO_RCVTIMEO_NEW


	)

69 
	#SO_SNDTIMEO
 
SO_SNDTIMEO_NEW


	)

70 
	#SO_TIMESTAMP
 
SO_TIMESTAMP_NEW


	)

71 
	#SO_TIMESTAMPNS
 
SO_TIMESTAMPNS_NEW


	)

72 
	#SO_TIMESTAMPING
 
SO_TIMESTAMPING_NEW


	)

74 
	#SO_RCVTIMEO
 
SO_RCVTIMEO_OLD


	)

75 
	#SO_SNDTIMEO
 
SO_SNDTIMEO_OLD


	)

76 
	#SO_TIMESTAMP
 
SO_TIMESTAMP_OLD


	)

77 
	#SO_TIMESTAMPNS
 
SO_TIMESTAMPNS_OLD


	)

78 
	#SO_TIMESTAMPING
 
SO_TIMESTAMPING_OLD


	)

	@/usr/include/x86_64-linux-gnu/bits/socket.h

19 #i‚de‡
__BITS_SOCKET_H


20 
	#__BITS_SOCKET_H


	)

22 #i‚de‡
_SYS_SOCKET_H


26 
	#__√ed_size_t


	)

27 
	~<°ddef.h
>

29 
	~<sys/ty≥s.h
>

32 #i‚de‡
__sockÀn_t_deföed


33 
__sockÀn_t
 
	tsockÀn_t
;

34 
	#__sockÀn_t_deföed


	)

38 
	~<bôs/sockë_ty≥.h
>

41 
	#PF_UNSPEC
 0

	)

42 
	#PF_LOCAL
 1

	)

43 
	#PF_UNIX
 
PF_LOCAL


	)

44 
	#PF_FILE
 
PF_LOCAL


	)

45 
	#PF_INET
 2

	)

46 
	#PF_AX25
 3

	)

47 
	#PF_IPX
 4

	)

48 
	#PF_APPLETALK
 5

	)

49 
	#PF_NETROM
 6

	)

50 
	#PF_BRIDGE
 7

	)

51 
	#PF_ATMPVC
 8

	)

52 
	#PF_X25
 9

	)

53 
	#PF_INET6
 10

	)

54 
	#PF_ROSE
 11

	)

55 
	#PF_DEC√t
 12

	)

56 
	#PF_NETBEUI
 13

	)

57 
	#PF_SECURITY
 14

	)

58 
	#PF_KEY
 15

	)

59 
	#PF_NETLINK
 16

	)

60 
	#PF_ROUTE
 
PF_NETLINK


	)

61 
	#PF_PACKET
 17

	)

62 
	#PF_ASH
 18

	)

63 
	#PF_ECONET
 19

	)

64 
	#PF_ATMSVC
 20

	)

65 
	#PF_RDS
 21

	)

66 
	#PF_SNA
 22

	)

67 
	#PF_IRDA
 23

	)

68 
	#PF_PPPOX
 24

	)

69 
	#PF_WANPIPE
 25

	)

70 
	#PF_LLC
 26

	)

71 
	#PF_IB
 27

	)

72 
	#PF_MPLS
 28

	)

73 
	#PF_CAN
 29

	)

74 
	#PF_TIPC
 30

	)

75 
	#PF_BLUETOOTH
 31

	)

76 
	#PF_IUCV
 32

	)

77 
	#PF_RXRPC
 33

	)

78 
	#PF_ISDN
 34

	)

79 
	#PF_PHONET
 35

	)

80 
	#PF_IEEE802154
 36

	)

81 
	#PF_CAIF
 37

	)

82 
	#PF_ALG
 38

	)

83 
	#PF_NFC
 39

	)

84 
	#PF_VSOCK
 40

	)

85 
	#PF_KCM
 41

	)

86 
	#PF_QIPCRTR
 42

	)

87 
	#PF_SMC
 43

	)

88 
	#PF_XDP
 44

	)

89 
	#PF_MCTP
 45

	)

90 
	#PF_MAX
 46

	)

93 
	#AF_UNSPEC
 
PF_UNSPEC


	)

94 
	#AF_LOCAL
 
PF_LOCAL


	)

95 
	#AF_UNIX
 
PF_UNIX


	)

96 
	#AF_FILE
 
PF_FILE


	)

97 
	#AF_INET
 
PF_INET


	)

98 
	#AF_AX25
 
PF_AX25


	)

99 
	#AF_IPX
 
PF_IPX


	)

100 
	#AF_APPLETALK
 
PF_APPLETALK


	)

101 
	#AF_NETROM
 
PF_NETROM


	)

102 
	#AF_BRIDGE
 
PF_BRIDGE


	)

103 
	#AF_ATMPVC
 
PF_ATMPVC


	)

104 
	#AF_X25
 
PF_X25


	)

105 
	#AF_INET6
 
PF_INET6


	)

106 
	#AF_ROSE
 
PF_ROSE


	)

107 
	#AF_DEC√t
 
PF_DEC√t


	)

108 
	#AF_NETBEUI
 
PF_NETBEUI


	)

109 
	#AF_SECURITY
 
PF_SECURITY


	)

110 
	#AF_KEY
 
PF_KEY


	)

111 
	#AF_NETLINK
 
PF_NETLINK


	)

112 
	#AF_ROUTE
 
PF_ROUTE


	)

113 
	#AF_PACKET
 
PF_PACKET


	)

114 
	#AF_ASH
 
PF_ASH


	)

115 
	#AF_ECONET
 
PF_ECONET


	)

116 
	#AF_ATMSVC
 
PF_ATMSVC


	)

117 
	#AF_RDS
 
PF_RDS


	)

118 
	#AF_SNA
 
PF_SNA


	)

119 
	#AF_IRDA
 
PF_IRDA


	)

120 
	#AF_PPPOX
 
PF_PPPOX


	)

121 
	#AF_WANPIPE
 
PF_WANPIPE


	)

122 
	#AF_LLC
 
PF_LLC


	)

123 
	#AF_IB
 
PF_IB


	)

124 
	#AF_MPLS
 
PF_MPLS


	)

125 
	#AF_CAN
 
PF_CAN


	)

126 
	#AF_TIPC
 
PF_TIPC


	)

127 
	#AF_BLUETOOTH
 
PF_BLUETOOTH


	)

128 
	#AF_IUCV
 
PF_IUCV


	)

129 
	#AF_RXRPC
 
PF_RXRPC


	)

130 
	#AF_ISDN
 
PF_ISDN


	)

131 
	#AF_PHONET
 
PF_PHONET


	)

132 
	#AF_IEEE802154
 
PF_IEEE802154


	)

133 
	#AF_CAIF
 
PF_CAIF


	)

134 
	#AF_ALG
 
PF_ALG


	)

135 
	#AF_NFC
 
PF_NFC


	)

136 
	#AF_VSOCK
 
PF_VSOCK


	)

137 
	#AF_KCM
 
PF_KCM


	)

138 
	#AF_QIPCRTR
 
PF_QIPCRTR


	)

139 
	#AF_SMC
 
PF_SMC


	)

140 
	#AF_XDP
 
PF_XDP


	)

141 
	#AF_MCTP
 
PF_MCTP


	)

142 
	#AF_MAX
 
PF_MAX


	)

148 
	#SOL_RAW
 255

	)

149 
	#SOL_DECNET
 261

	)

150 
	#SOL_X25
 262

	)

151 
	#SOL_PACKET
 263

	)

152 
	#SOL_ATM
 264

	)

153 
	#SOL_AAL
 265

	)

154 
	#SOL_IRDA
 266

	)

155 
	#SOL_NETBEUI
 267

	)

156 
	#SOL_LLC
 268

	)

157 
	#SOL_DCCP
 269

	)

158 
	#SOL_NETLINK
 270

	)

159 
	#SOL_TIPC
 271

	)

160 
	#SOL_RXRPC
 272

	)

161 
	#SOL_PPPOL2TP
 273

	)

162 
	#SOL_BLUETOOTH
 274

	)

163 
	#SOL_PNPIPE
 275

	)

164 
	#SOL_RDS
 276

	)

165 
	#SOL_IUCV
 277

	)

166 
	#SOL_CAIF
 278

	)

167 
	#SOL_ALG
 279

	)

168 
	#SOL_NFC
 280

	)

169 
	#SOL_KCM
 281

	)

170 
	#SOL_TLS
 282

	)

171 
	#SOL_XDP
 283

	)

174 
	#SOMAXCONN
 4096

	)

177 
	~<bôs/sockaddr.h
>

180 
	ssockaddr


182 
__SOCKADDR_COMMON
 (
ß_
);

183 
	mß_d©a
[14];

189 
	#__ss_Æig¡y≥
 

	)

190 
	#_SS_PADSIZE
 \

191 (
_SS_SIZE
 - 
__SOCKADDR_COMMON_SIZE
 -  (
__ss_Æig¡y≥
))

	)

193 
	ssockaddr_°‹age


195 
__SOCKADDR_COMMON
 (
ss_
);

196 
	m__ss_∑ddög
[
_SS_PADSIZE
];

197 
__ss_Æig¡y≥
 
	m__ss_Æign
;

204 
	mMSG_OOB
 = 0x01,

205 
	#MSG_OOB
 
MSG_OOB


	)

206 
	mMSG_PEEK
 = 0x02,

207 
	#MSG_PEEK
 
MSG_PEEK


	)

208 
	mMSG_DONTROUTE
 = 0x04,

209 
	#MSG_DONTROUTE
 
MSG_DONTROUTE


	)

210 #ifde‡
__USE_GNU


212 
	mMSG_TRYHARD
 = 
MSG_DONTROUTE
,

213 
	#MSG_TRYHARD
 
MSG_DONTROUTE


	)

215 
	mMSG_CTRUNC
 = 0x08,

216 
	#MSG_CTRUNC
 
MSG_CTRUNC


	)

217 
	mMSG_PROXY
 = 0x10,

218 
	#MSG_PROXY
 
MSG_PROXY


	)

219 
	mMSG_TRUNC
 = 0x20,

220 
	#MSG_TRUNC
 
MSG_TRUNC


	)

221 
	mMSG_DONTWAIT
 = 0x40,

222 
	#MSG_DONTWAIT
 
MSG_DONTWAIT


	)

223 
	mMSG_EOR
 = 0x80,

224 
	#MSG_EOR
 
MSG_EOR


	)

225 
	mMSG_WAITALL
 = 0x100,

226 
	#MSG_WAITALL
 
MSG_WAITALL


	)

227 
	mMSG_FIN
 = 0x200,

228 
	#MSG_FIN
 
MSG_FIN


	)

229 
	mMSG_SYN
 = 0x400,

230 
	#MSG_SYN
 
MSG_SYN


	)

231 
	mMSG_CONFIRM
 = 0x800,

232 
	#MSG_CONFIRM
 
MSG_CONFIRM


	)

233 
	mMSG_RST
 = 0x1000,

234 
	#MSG_RST
 
MSG_RST


	)

235 
	mMSG_ERRQUEUE
 = 0x2000,

236 
	#MSG_ERRQUEUE
 
MSG_ERRQUEUE


	)

237 
	mMSG_NOSIGNAL
 = 0x4000,

238 
	#MSG_NOSIGNAL
 
MSG_NOSIGNAL


	)

239 
	mMSG_MORE
 = 0x8000,

240 
	#MSG_MORE
 
MSG_MORE


	)

241 
	mMSG_WAITFORONE
 = 0x10000,

242 
	#MSG_WAITFORONE
 
MSG_WAITFORONE


	)

243 
	mMSG_BATCH
 = 0x40000,

244 
	#MSG_BATCH
 
MSG_BATCH


	)

245 
	mMSG_ZEROCOPY
 = 0x4000000,

246 
	#MSG_ZEROCOPY
 
MSG_ZEROCOPY


	)

247 
	mMSG_FASTOPEN
 = 0x20000000,

248 
	#MSG_FASTOPEN
 
MSG_FASTOPEN


	)

250 
	mMSG_CMSG_CLOEXEC
 = 0x40000000

253 
	#MSG_CMSG_CLOEXEC
 
MSG_CMSG_CLOEXEC


	)

259 
	smsghdr


261 *
	mmsg_«me
;

262 
sockÀn_t
 
	mmsg_«mñí
;

264 
iovec
 *
	mmsg_iov
;

265 
size_t
 
	mmsg_iovÀn
;

267 *
	mmsg_c⁄åﬁ
;

268 
size_t
 
	mmsg_c⁄åﬁÀn
;

273 
	mmsg_Êags
;

277 
	scmsghdr


279 
size_t
 
	mcmsg_Àn
;

284 
	mcmsg_Àvñ
;

285 
	mcmsg_ty≥
;

286 #i‡
__glibc_c99_Êex¨r_avaûabÀ


287 
__exãnsi⁄__
 
__cmsg_d©a
 
	m__Êex¨r
;

292 #i‡
__glibc_c99_Êex¨r_avaûabÀ


293 
	#CMSG_DATA
(
cmsg
Ë((cmsg)->
__cmsg_d©a
)

	)

295 
	#CMSG_DATA
(
cmsg
Ë((*Ë((
cmsghdr
 *Ë(cmsgË+ 1))

	)

297 
	#CMSG_NXTHDR
(
mhdr
, 
cmsg
Ë
	`__cmsg_nxthdr
 (mhdr, cmsg)

	)

298 
	#CMSG_FIRSTHDR
(
mhdr
) \

299 ((
size_t
Ë(
mhdr
)->
msg_c⁄åﬁÀn
 > (
cmsghdr
) \

300 ? (
cmsghdr
 *Ë(
mhdr
)->
msg_c⁄åﬁ
 : (cmsghd∏*Ë0)

	)

301 
	#CMSG_ALIGN
(
Àn
Ë((÷íË+  (
size_t
) - 1) \

302 & (
size_t
Ë~( (size_tË- 1))

	)

303 
	#CMSG_SPACE
(
Àn
Ë(
	`CMSG_ALIGN
 (len) \

304 + 
	`CMSG_ALIGN
 ( (
cmsghdr
)))

	)

305 
	#CMSG_LEN
(
Àn
Ë(
	`CMSG_ALIGN
 ( (
cmsghdr
)Ë+ (Àn))

	)

307 
cmsghdr
 *
	$__cmsg_nxthdr
 (
msghdr
 *
__mhdr
,

308 
cmsghdr
 *
__cmsg
Ë
__THROW
;

309 #ifde‡
__USE_EXTERN_INLINES


310 #i‚de‡
_EXTERN_INLINE


311 
	#_EXTERN_INLINE
 
__exã∫_ölöe


	)

313 
_EXTERN_INLINE
 
cmsghdr
 *

314 
	`__NTH
 (
	$__cmsg_nxthdr
 (
msghdr
 *
__mhdr
, 
cmsghdr
 *
__cmsg
))

316 i‡((
size_t
Ë
__cmsg
->
cmsg_Àn
 <  (
cmsghdr
))

318  (
cmsghdr
 *) 0;

320 
__cmsg
 = (
cmsghdr
 *) ((*) __cmsg

321 + 
	`CMSG_ALIGN
 (
__cmsg
->
cmsg_Àn
));

322 i‡((*Ë(
__cmsg
 + 1Ë> ((*Ë
__mhdr
->
msg_c⁄åﬁ


323 + 
__mhdr
->
msg_c⁄åﬁÀn
)

324 || ((*Ë
__cmsg
 + 
	`CMSG_ALIGN
 (__cmsg->
cmsg_Àn
)

325 > ((*Ë
__mhdr
->
msg_c⁄åﬁ
 + __mhdr->
msg_c⁄åﬁÀn
)))

327  (
cmsghdr
 *) 0;

328  
__cmsg
;

329 
	}
}

336 
	mSCM_RIGHTS
 = 0x01

337 
	#SCM_RIGHTS
 
SCM_RIGHTS


	)

338 #ifde‡
__USE_GNU


339 , 
	mSCM_CREDENTIALS
 = 0x02

340 
	#SCM_CREDENTIALS
 
SCM_CREDENTIALS


	)

344 #ifde‡
__USE_GNU


346 
	su¸ed


348 
pid_t
 
	mpid
;

349 
uid_t
 
	muid
;

350 
gid_t
 
	mgid
;

354 #ifde‡
__USE_MISC


355 
	~<bôs/ty≥s/time_t.h
>

356 
	~<asm/sockë.h
>

358 
	#SO_DEBUG
 1

	)

359 
	~<bôs/sockë-c⁄°™ts.h
>

363 
	slögî


365 
	ml_⁄off
;

366 
	ml_lögî
;

	@/usr/include/x86_64-linux-gnu/bits/socket2.h

19 #i‚de‡
_SYS_SOCKET_H


23 
ssize_t
 
__ªcv_chk
 (
__fd
, *
__buf
, 
size_t
 
__n
, size_à
__buÊí
,

24 
__Êags
);

25 
ssize_t
 
__REDIRECT
 (
__ªcv_Æüs
, (
__fd
, *
__buf
, 
size_t
 
__n
,

26 
__Êags
), 
ªcv
);

27 
ssize_t
 
__REDIRECT
 (
__ªcv_chk_w¨n
,

28 (
__fd
, *
__buf
, 
size_t
 
__n
, size_à
__buÊí
,

29 
__Êags
), 
__ªcv_chk
)

30 
__w¨«âr
 ("recv called with biggerÜengthÅhan size of destination "

33 
__f‹tify_fun˘i⁄
 
ssize_t


34 
	$ªcv
 (
__fd
, *
__buf
, 
size_t
 
__n
, 
__Êags
)

36 
size_t
 
sz
 = 
	`__glibc_objsize0
 (
__buf
);

37 i‡(
	`__glibc_ß„_‹_unknown_Àn
 (
__n
,  (), 
sz
))

38  
	`__ªcv_Æüs
 (
__fd
, 
__buf
, 
__n
, 
__Êags
);

39 i‡(
	`__glibc_unß„_Àn
 (
__n
,  (), 
sz
))

40  
	`__ªcv_chk_w¨n
 (
__fd
, 
__buf
, 
__n
, 
sz
, 
__Êags
);

41  
	`__ªcv_chk
 (
__fd
, 
__buf
, 
__n
, 
sz
, 
__Êags
);

42 
	}
}

44 
ssize_t
 
__ªcv‰om_chk
 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

45 
size_t
 
__buÊí
, 
__Êags
,

46 
__SOCKADDR_ARG
 
__addr
,

47 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
);

48 
ssize_t
 
__REDIRECT
 (
__ªcv‰om_Æüs
,

49 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

50 
__Êags
, 
__SOCKADDR_ARG
 
__addr
,

51 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
), 
ªcv‰om
);

52 
ssize_t
 
__REDIRECT
 (
__ªcv‰om_chk_w¨n
,

53 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

54 
size_t
 
__buÊí
, 
__Êags
,

55 
__SOCKADDR_ARG
 
__addr
,

56 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
), 
__ªcv‰om_chk
)

57 
__w¨«âr
 ("recvfrom called with biggerÜengthÅhan size of "

60 
__f‹tify_fun˘i⁄
 
ssize_t


61 
	$ªcv‰om
 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
, 
__Êags
,

62 
__SOCKADDR_ARG
 
__addr
, 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
)

64 
size_t
 
sz
 = 
	`__glibc_objsize0
 (
__buf
);

65 i‡(
	`__glibc_ß„_‹_unknown_Àn
 (
__n
,  (), 
sz
))

66  
	`__ªcv‰om_Æüs
 (
__fd
, 
__buf
, 
__n
, 
__Êags
, 
__addr
, 
__addr_Àn
);

67 i‡(
	`__glibc_unß„_Àn
 (
__n
,  (), 
sz
))

68  
	`__ªcv‰om_chk_w¨n
 (
__fd
, 
__buf
, 
__n
, 
sz
, 
__Êags
, 
__addr
,

69 
__addr_Àn
);

70  
	`__ªcv‰om_chk
 (
__fd
, 
__buf
, 
__n
, 
sz
, 
__Êags
, 
__addr
, 
__addr_Àn
);

71 
	}
}

	@/usr/include/x86_64-linux-gnu/bits/socket_type.h

19 #i‚de‡
_SYS_SOCKET_H


24 
	e__sockë_ty≥


26 
	mSOCK_STREAM
 = 1,

28 
	#SOCK_STREAM
 
SOCK_STREAM


	)

29 
	mSOCK_DGRAM
 = 2,

31 
	#SOCK_DGRAM
 
SOCK_DGRAM


	)

32 
	mSOCK_RAW
 = 3,

33 
	#SOCK_RAW
 
SOCK_RAW


	)

34 
	mSOCK_RDM
 = 4,

35 
	#SOCK_RDM
 
SOCK_RDM


	)

36 
	mSOCK_SEQPACKET
 = 5,

38 
	#SOCK_SEQPACKET
 
SOCK_SEQPACKET


	)

39 
	mSOCK_DCCP
 = 6,

40 
	#SOCK_DCCP
 
SOCK_DCCP


	)

41 
	mSOCK_PACKET
 = 10,

44 
	#SOCK_PACKET
 
SOCK_PACKET


	)

49 
	mSOCK_CLOEXEC
 = 02000000,

51 
	#SOCK_CLOEXEC
 
SOCK_CLOEXEC


	)

52 
	mSOCK_NONBLOCK
 = 00004000

54 
	#SOCK_NONBLOCK
 
SOCK_NONBLOCK


	)

	@/usr/include/x86_64-linux-gnu/bits/ss_flags.h

19 #i‚de‡
_BITS_SS_FLAGS_H


20 
	#_BITS_SS_FLAGS_H
 1

	)

22 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_SYS_UCONTEXT_H


29 
	mSS_ONSTACK
 = 1,

30 
	#SS_ONSTACK
 
SS_ONSTACK


	)

31 
	mSS_DISABLE


32 
	#SS_DISABLE
 
SS_DISABLE


	)

	@/usr/include/x86_64-linux-gnu/bits/stat.h

18 #i‡!
deföed
 
_SYS_STAT_H
 && !deföed 
_FCNTL_H


22 #i‚de‡
_BITS_STAT_H


23 
	#_BITS_STAT_H
 1

	)

25 
	~<bôs/°ru˘_°©.h
>

29 
	#__S_IFMT
 0170000

	)

32 
	#__S_IFDIR
 0040000

	)

33 
	#__S_IFCHR
 0020000

	)

34 
	#__S_IFBLK
 0060000

	)

35 
	#__S_IFREG
 0100000

	)

36 
	#__S_IFIFO
 0010000

	)

37 
	#__S_IFLNK
 0120000

	)

38 
	#__S_IFSOCK
 0140000

	)

42 
	#__S_TYPEISMQ
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

43 
	#__S_TYPEISSEM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

44 
	#__S_TYPEISSHM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

48 
	#__S_ISUID
 04000

	)

49 
	#__S_ISGID
 02000

	)

50 
	#__S_ISVTX
 01000

	)

51 
	#__S_IREAD
 0400

	)

52 
	#__S_IWRITE
 0200

	)

53 
	#__S_IEXEC
 0100

	)

55 #ifde‡
__USE_ATFILE


56 
	#UTIME_NOW
 ((1»<< 30Ë- 1l)

	)

57 
	#UTIME_OMIT
 ((1»<< 30Ë- 2l)

	)

	@/usr/include/x86_64-linux-gnu/bits/statfs.h

18 #i‚de‡
_SYS_STATFS_H


22 
	~<bôs/ty≥s.h
>

24 
	s°©fs


26 
__fsw‹d_t
 
	mf_ty≥
;

27 
__fsw‹d_t
 
	mf_bsize
;

28 #i‚de‡
__USE_FILE_OFFSET64


29 
__fsblk˙t_t
 
	mf_blocks
;

30 
__fsblk˙t_t
 
	mf_b‰ì
;

31 
__fsblk˙t_t
 
	mf_bavaû
;

32 
__fsfû˙t_t
 
	mf_fûes
;

33 
__fsfû˙t_t
 
	mf_f‰ì
;

35 
__fsblk˙t64_t
 
	mf_blocks
;

36 
__fsblk˙t64_t
 
	mf_b‰ì
;

37 
__fsblk˙t64_t
 
	mf_bavaû
;

38 
__fsfû˙t64_t
 
	mf_fûes
;

39 
__fsfû˙t64_t
 
	mf_f‰ì
;

41 
__fsid_t
 
	mf_fsid
;

42 
__fsw‹d_t
 
	mf_«mñí
;

43 
__fsw‹d_t
 
	mf_‰size
;

44 
__fsw‹d_t
 
	mf_Êags
;

45 
__fsw‹d_t
 
	mf_•¨e
[4];

48 #ifde‡
__USE_LARGEFILE64


49 
	s°©fs64


51 
__fsw‹d_t
 
	mf_ty≥
;

52 
__fsw‹d_t
 
	mf_bsize
;

53 
__fsblk˙t64_t
 
	mf_blocks
;

54 
__fsblk˙t64_t
 
	mf_b‰ì
;

55 
__fsblk˙t64_t
 
	mf_bavaû
;

56 
__fsfû˙t64_t
 
	mf_fûes
;

57 
__fsfû˙t64_t
 
	mf_f‰ì
;

58 
__fsid_t
 
	mf_fsid
;

59 
__fsw‹d_t
 
	mf_«mñí
;

60 
__fsw‹d_t
 
	mf_‰size
;

61 
__fsw‹d_t
 
	mf_Êags
;

62 
__fsw‹d_t
 
	mf_•¨e
[4];

67 
	#_STATFS_F_NAMELEN


	)

68 
	#_STATFS_F_FRSIZE


	)

69 
	#_STATFS_F_FLAGS


	)

	@/usr/include/x86_64-linux-gnu/bits/statvfs.h

18 #i‚de‡
_SYS_STATVFS_H


22 
	~<bôs/ty≥s.h
>

24 #i‡(
__WORDSIZE
 == 32 \

25 && (!
deföed
 
	g__SYSCALL_WORDSIZE
 || __SYSCALL_WORDSIZE == 32))

26 
	#_STATVFSBUF_F_UNUSED


	)

29 
	s°©vfs


31 
f_bsize
;

32 
	mf_‰size
;

33 #i‚de‡
__USE_FILE_OFFSET64


34 
__fsblk˙t_t
 
	mf_blocks
;

35 
__fsblk˙t_t
 
	mf_b‰ì
;

36 
__fsblk˙t_t
 
	mf_bavaû
;

37 
__fsfû˙t_t
 
	mf_fûes
;

38 
__fsfû˙t_t
 
	mf_f‰ì
;

39 
__fsfû˙t_t
 
	mf_Ávaû
;

41 
__fsblk˙t64_t
 
	mf_blocks
;

42 
__fsblk˙t64_t
 
	mf_b‰ì
;

43 
__fsblk˙t64_t
 
	mf_bavaû
;

44 
__fsfû˙t64_t
 
	mf_fûes
;

45 
__fsfû˙t64_t
 
	mf_f‰ì
;

46 
__fsfû˙t64_t
 
	mf_Ávaû
;

48 
	mf_fsid
;

49 #ifde‡
_STATVFSBUF_F_UNUSED


50 
	m__f_unu£d
;

52 
	mf_Êag
;

53 
	mf_«memax
;

54 
	m__f_•¨e
[6];

57 #ifde‡
__USE_LARGEFILE64


58 
	s°©vfs64


60 
	mf_bsize
;

61 
	mf_‰size
;

62 
__fsblk˙t64_t
 
	mf_blocks
;

63 
__fsblk˙t64_t
 
	mf_b‰ì
;

64 
__fsblk˙t64_t
 
	mf_bavaû
;

65 
__fsfû˙t64_t
 
	mf_fûes
;

66 
__fsfû˙t64_t
 
	mf_f‰ì
;

67 
__fsfû˙t64_t
 
	mf_Ávaû
;

68 
	mf_fsid
;

69 #ifde‡
_STATVFSBUF_F_UNUSED


70 
	m__f_unu£d
;

72 
	mf_Êag
;

73 
	mf_«memax
;

74 
	m__f_•¨e
[6];

82 
	mST_RDONLY
 = 1,

83 
	#ST_RDONLY
 
ST_RDONLY


	)

84 
	mST_NOSUID
 = 2

85 
	#ST_NOSUID
 
ST_NOSUID


	)

86 #ifde‡
__USE_GNU


88 
	mST_NODEV
 = 4,

89 
	#ST_NODEV
 
ST_NODEV


	)

90 
	mST_NOEXEC
 = 8,

91 
	#ST_NOEXEC
 
ST_NOEXEC


	)

92 
	mST_SYNCHRONOUS
 = 16,

93 
	#ST_SYNCHRONOUS
 
ST_SYNCHRONOUS


	)

94 
	mST_MANDLOCK
 = 64,

95 
	#ST_MANDLOCK
 
ST_MANDLOCK


	)

96 
	mST_WRITE
 = 128,

97 
	#ST_WRITE
 
ST_WRITE


	)

98 
	mST_APPEND
 = 256,

99 
	#ST_APPEND
 
ST_APPEND


	)

100 
	mST_IMMUTABLE
 = 512,

101 
	#ST_IMMUTABLE
 
ST_IMMUTABLE


	)

102 
	mST_NOATIME
 = 1024,

103 
	#ST_NOATIME
 
ST_NOATIME


	)

104 
	mST_NODIRATIME
 = 2048,

105 
	#ST_NODIRATIME
 
ST_NODIRATIME


	)

106 
	mST_RELATIME
 = 4096

107 
	#ST_RELATIME
 
ST_RELATIME


	)

	@/usr/include/x86_64-linux-gnu/bits/statx-generic.h

21 #i‚de‡
_SYS_STAT_H


22 #îr‹ 
Nevî
 
ö˛ude
 <
bôs
/
°©x
-
gíîic
.
h
> 
dúe˘ly
, in˛udê<
sys
/
°©
.h> 
ö°ód
.

25 
	~<bôs/ty≥s/°ru˘_°©x_time°amp.h
>

26 
	~<bôs/ty≥s/°ru˘_°©x.h
>

28 #i‚de‡
STATX_TYPE


29 
	#STATX_TYPE
 0x0001U

	)

30 
	#STATX_MODE
 0x0002U

	)

31 
	#STATX_NLINK
 0x0004U

	)

32 
	#STATX_UID
 0x0008U

	)

33 
	#STATX_GID
 0x0010U

	)

34 
	#STATX_ATIME
 0x0020U

	)

35 
	#STATX_MTIME
 0x0040U

	)

36 
	#STATX_CTIME
 0x0080U

	)

37 
	#STATX_INO
 0x0100U

	)

38 
	#STATX_SIZE
 0x0200U

	)

39 
	#STATX_BLOCKS
 0x0400U

	)

40 
	#STATX_BASIC_STATS
 0x07ffU

	)

41 
	#STATX_ALL
 0x0fffU

	)

42 
	#STATX_BTIME
 0x0800U

	)

43 
	#STATX_MNT_ID
 0x1000U

	)

44 
	#STATX__RESERVED
 0x80000000U

	)

46 
	#STATX_ATTR_COMPRESSED
 0x0004

	)

47 
	#STATX_ATTR_IMMUTABLE
 0x0010

	)

48 
	#STATX_ATTR_APPEND
 0x0020

	)

49 
	#STATX_ATTR_NODUMP
 0x0040

	)

50 
	#STATX_ATTR_ENCRYPTED
 0x0800

	)

51 
	#STATX_ATTR_AUTOMOUNT
 0x1000

	)

52 
	#STATX_ATTR_MOUNT_ROOT
 0x2000

	)

53 
	#STATX_ATTR_VERITY
 0x100000

	)

54 
	#STATX_ATTR_DAX
 0x200000

	)

57 
__BEGIN_DECLS


60 
	$°©x
 (
__dúfd
, c⁄° *
__ª°ri˘
 
__∑th
, 
__Êags
,

61 
__mask
, 
°©x
 *
__ª°ri˘
 
__buf
)

62 
__THROW
 
	`__n⁄nuŒ
 ((2, 5));

64 
__END_DECLS


	@/usr/include/x86_64-linux-gnu/bits/statx.h

21 #i‚de‡
_SYS_STAT_H


22 #îr‹ 
Nevî
 
ö˛ude
 <
bôs
/
°©x
.
h
> 
dúe˘ly
, in˛udê<
sys
/
°©
.h> 
ö°ód
.

29 #ifde‡
__has_ö˛ude


30 #i‡
__has_ö˛ude
 ("linux/stat.h")

31 
	~"löux/°©.h
"

32 #ifde‡
STATX_TYPE


33 
	#__°©x_time°amp_deföed
 1

	)

34 
	#__°©x_deföed
 1

	)

39 
	~<bôs/°©x-gíîic.h
>

	@/usr/include/x86_64-linux-gnu/bits/stdint-intn.h

19 #i‚de‡
_BITS_STDINT_INTN_H


20 
	#_BITS_STDINT_INTN_H
 1

	)

22 
	~<bôs/ty≥s.h
>

24 
__öt8_t
 
	töt8_t
;

25 
__öt16_t
 
	töt16_t
;

26 
__öt32_t
 
	töt32_t
;

27 
__öt64_t
 
	töt64_t
;

	@/usr/include/x86_64-linux-gnu/bits/stdint-uintn.h

19 #i‚de‡
_BITS_STDINT_UINTN_H


20 
	#_BITS_STDINT_UINTN_H
 1

	)

22 
	~<bôs/ty≥s.h
>

24 
__uöt8_t
 
	tuöt8_t
;

25 
__uöt16_t
 
	tuöt16_t
;

26 
__uöt32_t
 
	tuöt32_t
;

27 
__uöt64_t
 
	tuöt64_t
;

	@/usr/include/x86_64-linux-gnu/bits/stdio-ldbl.h

19 #i‚de‡
_STDIO_H


23 
	$__LDBL_REDIR_DECL
 (
Ârötf
)

24 
	$__LDBL_REDIR_DECL
 (
¥ötf
)

25 
	$__LDBL_REDIR_DECL
 (
•rötf
)

26 
	$__LDBL_REDIR_DECL
 (
vÂrötf
)

27 
	$__LDBL_REDIR_DECL
 (
v¥ötf
)

28 
	$__LDBL_REDIR_DECL
 (
v•rötf
)

29 #i‡!
	`__GLIBC_USE
 (
DEPRECATED_SCANF
)

30 #i‡
deföed
 
__LDBL_COMPAT


31 
	$__LDBL_REDIR1_DECL
 (
fsˇnf
, 
__∆dbl___isoc99_fsˇnf
)

32 
	$__LDBL_REDIR1_DECL
 (
sˇnf
, 
__∆dbl___isoc99_sˇnf
)

33 
	$__LDBL_REDIR1_DECL
 (
ssˇnf
, 
__∆dbl___isoc99_ssˇnf
)

34 #ñi‡
__LDOUBLE_REDIRECTS_TO_FLOAT128_ABI
 == 1

35 
	$__LDBL_REDIR1_DECL
 (
fsˇnf
, 
__isoc99_fsˇnfõì128
)

36 
	$__LDBL_REDIR1_DECL
 (
sˇnf
, 
__isoc99_sˇnfõì128
)

37 
	$__LDBL_REDIR1_DECL
 (
ssˇnf
, 
__isoc99_ssˇnfõì128
)

39 #îr‹ 
bôs
/
°dlib
-
ldbl
.
h
 
ö˛uded
 
whí
 
no
Üdb»
ªdúe˘i⁄s
 
¨e
 
ªquúed
.

42 
	$__LDBL_REDIR_DECL
 (
fsˇnf
)

43 
	$__LDBL_REDIR_DECL
 (
sˇnf
)

44 
	$__LDBL_REDIR_DECL
 (
ssˇnf
)

47 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


48 
	$__LDBL_REDIR_DECL
 (
¢¥ötf
)

49 
	$__LDBL_REDIR_DECL
 (
v¢¥ötf
)

52 #ifdef 
__USE_ISOC99


53 #i‡!
	`__GLIBC_USE
 (
DEPRECATED_SCANF
)

54 #i‡
deföed
 
__LDBL_COMPAT


55 
	$__LDBL_REDIR1_DECL
 (
vfsˇnf
, 
__∆dbl___isoc99_vfsˇnf
)

56 
	$__LDBL_REDIR1_DECL
 (
vsˇnf
, 
__∆dbl___isoc99_vsˇnf
)

57 
	$__LDBL_REDIR1_DECL
 (
vssˇnf
, 
__∆dbl___isoc99_vssˇnf
)

58 #ñi‡
__LDOUBLE_REDIRECTS_TO_FLOAT128_ABI
 == 1

59 
	$__LDBL_REDIR1_DECL
 (
vfsˇnf
, 
__isoc99_vfsˇnfõì128
)

60 
	$__LDBL_REDIR1_DECL
 (
vsˇnf
, 
__isoc99_vsˇnfõì128
)

61 
	$__LDBL_REDIR1_DECL
 (
vssˇnf
, 
__isoc99_vssˇnfõì128
)

63 #îr‹ 
bôs
/
°dlib
-
ldbl
.
h
 
ö˛uded
 
whí
 
no
Üdb»
ªdúe˘i⁄s
 
¨e
 
ªquúed
.

66 
	$__LDBL_REDIR_DECL
 (
vfsˇnf
)

67 
	$__LDBL_REDIR_DECL
 (
vssˇnf
)

68 
	$__LDBL_REDIR_DECL
 (
vsˇnf
)

72 #ifde‡
__USE_XOPEN2K8


73 
	$__LDBL_REDIR_DECL
 (
vd¥ötf
)

74 
	$__LDBL_REDIR_DECL
 (
d¥ötf
)

77 #ifde‡
__USE_GNU


78 
	$__LDBL_REDIR_DECL
 (
va•rötf
)

79 
	$__LDBL_REDIR2_DECL
 (
a•rötf
)

80 
	$__LDBL_REDIR_DECL
 (
a•rötf
)

81 
	$__LDBL_REDIR_DECL
 (
ob°ack_¥ötf
)

82 
	$__LDBL_REDIR_DECL
 (
ob°ack_v¥ötf
)

85 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


86 
	$__LDBL_REDIR2_DECL
 (
•rötf_chk
)

87 
	$__LDBL_REDIR2_DECL
 (
v•rötf_chk
)

88 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


89 
	$__LDBL_REDIR2_DECL
 (
¢¥ötf_chk
)

90 
	$__LDBL_REDIR2_DECL
 (
v¢¥ötf_chk
)

92 #i‡
__USE_FORTIFY_LEVEL
 > 1

93 
	$__LDBL_REDIR2_DECL
 (
Ârötf_chk
)

94 
	$__LDBL_REDIR2_DECL
 (
¥ötf_chk
)

95 
	$__LDBL_REDIR2_DECL
 (
vÂrötf_chk
)

96 
	$__LDBL_REDIR2_DECL
 (
v¥ötf_chk
)

97 #ifde‡
__USE_XOPEN2K8


98 
	$__LDBL_REDIR2_DECL
 (
d¥ötf_chk
)

99 
	$__LDBL_REDIR2_DECL
 (
vd¥ötf_chk
)

101 #ifde‡
__USE_GNU


102 
	$__LDBL_REDIR2_DECL
 (
a•rötf_chk
)

103 
	$__LDBL_REDIR2_DECL
 (
va•rötf_chk
)

104 
	$__LDBL_REDIR2_DECL
 (
ob°ack_¥ötf_chk
)

105 
	$__LDBL_REDIR2_DECL
 (
ob°ack_v¥ötf_chk
)

	@/usr/include/x86_64-linux-gnu/bits/stdio.h

19 #i‚de‡
_BITS_STDIO_H


20 
	#_BITS_STDIO_H
 1

	)

22 #i‚de‡
_STDIO_H


26 #i‚de‡
__exã∫_ölöe


27 
	#__STDIO_INLINE
 
ölöe


	)

29 
	#__STDIO_INLINE
 
__exã∫_ölöe


	)

33 #ifde‡
__USE_EXTERN_INLINES


36 #i‡!(
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄
)

38 
__STDIO_INLINE
 

39 
	$v¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__¨g
)

41  
	`vÂrötf
 (
°dout
, 
__fmt
, 
__¨g
);

42 
	}
}

46 
__STDIO_INLINE
 

47 
	$gëch¨
 ()

49  
	`gëc
 (
°dö
);

50 
	}
}

53 #ifde‡
__USE_MISC


55 
__STDIO_INLINE
 

56 
	$fgëc_u∆ocked
 (
FILE
 *
__Â
)

58  
	`__gëc_u∆ocked_body
 (
__Â
);

59 
	}
}

63 #ifde‡
__USE_POSIX199506


65 
__STDIO_INLINE
 

66 
	$gëc_u∆ocked
 (
FILE
 *
__Â
)

68  
	`__gëc_u∆ocked_body
 (
__Â
);

69 
	}
}

72 
__STDIO_INLINE
 

73 
	$gëch¨_u∆ocked
 ()

75  
	`__gëc_u∆ocked_body
 (
°dö
);

76 
	}
}

81 
__STDIO_INLINE
 

82 
	$putch¨
 (
__c
)

84  
	`putc
 (
__c
, 
°dout
);

85 
	}
}

88 #ifde‡
__USE_MISC


90 
__STDIO_INLINE
 

91 
	$Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

93  
	`__putc_u∆ocked_body
 (
__c
, 
__°ªam
);

94 
	}
}

98 #ifde‡
__USE_POSIX199506


100 
__STDIO_INLINE
 

101 
	$putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

103  
	`__putc_u∆ocked_body
 (
__c
, 
__°ªam
);

104 
	}
}

107 
__STDIO_INLINE
 

108 
	$putch¨_u∆ocked
 (
__c
)

110  
	`__putc_u∆ocked_body
 (
__c
, 
°dout
);

111 
	}
}

115 #ifdef 
__USE_GNU


117 
__STDIO_INLINE
 
__ssize_t


118 
	$gëlöe
 (**
__löïå
, 
size_t
 *
__n
, 
FILE
 *
__°ªam
)

120  
	`__gëdñim
 (
__löïå
, 
__n
, '\n', 
__°ªam
);

121 
	}
}

125 #ifde‡
__USE_MISC


127 
__STDIO_INLINE
 

128 
__NTH
 (
	$„of_u∆ocked
 (
FILE
 *
__°ªam
))

130  
	`__„of_u∆ocked_body
 (
__°ªam
);

131 
	}
}

134 
__STDIO_INLINE
 

135 
__NTH
 (
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
))

137  
	`__„º‹_u∆ocked_body
 (
__°ªam
);

138 
	}
}

144 #i‡
deföed
 
__USE_MISC
 && deföed 
__GNUC__
 && deföed 
__OPTIMIZE__
 \

145 && !
deföed
 
	g__˝lu•lus


147 
	#‰ód_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

148 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

149 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

150 && (
size_t
Ë(
size
) != 0) \

151 ? ({ *
__±r
 = (*Ë(
±r
); \

152 
FILE
 *
__°ªam
 = (
°ªam
); \

153 
size_t
 
__˙t
; \

154 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

155 
__˙t
 > 0; --__cnt) \

157 
__c
 = 
	`gëc_u∆ocked
 (
__°ªam
); \

158 i‡(
__c
 =
EOF
) \

160 *
__±r
++ = 
__c
; \

162 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

163 / (
size_t
Ë(
size
); }) \

164 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

165 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

167 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

168 (Ë(
n
), (
size_t
) 0) \

169 : 
	`‰ód_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

171 
	#fwrôe_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

172 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

173 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

174 && (
size_t
Ë(
size
) != 0) \

175 ? ({ c⁄° *
__±r
 = (c⁄° *Ë(
±r
); \

176 
FILE
 *
__°ªam
 = (
°ªam
); \

177 
size_t
 
__˙t
; \

178 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

179 
__˙t
 > 0; --__cnt) \

180 i‡(
	`putc_u∆ocked
 (*
__±r
++, 
__°ªam
Ë=
EOF
) \

182 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

183 / (
size_t
Ë(
size
); }) \

184 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

185 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

187 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

188 (Ë(
n
), (
size_t
) 0) \

189 : 
	`fwrôe_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

193 #unde‡
__STDIO_INLINE


	@/usr/include/x86_64-linux-gnu/bits/stdio2.h

19 #i‚de‡
_BITS_STDIO2_H


20 
	#_BITS_STDIO2_H
 1

	)

22 #i‚de‡
_STDIO_H


26 
	$__•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

27 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW


28 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 3));

29 
	$__v•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

30 c⁄° *
__ª°ri˘
 
__f‹m©
,

31 
__gnuc_va_li°
 
__≠
Ë
__THROW


32 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 3));

34 #ifde‡
__va_¨g_∑ck


35 
__f‹tify_fun˘i⁄
 

36 
	`__NTH
 (
	$•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__fmt
, ...))

38  
	`__buûtö___•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

39 
	`__glibc_objsize
 (
__s
), 
__fmt
,

40 
	`__va_¨g_∑ck
 ());

41 
	}
}

42 #ñi‡!
deföed
 
__˝lu•lus


43 
	#•rötf
(
°r
, ...) \

44 
	`__buûtö___•rötf_chk
 (
°r
, 
__USE_FORTIFY_LEVEL
 - 1, \

45 
	`__glibc_objsize
 (
°r
), 
__VA_ARGS__
)

	)

48 
__f‹tify_fun˘i⁄
 

49 
__NTH
 (
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__fmt
,

50 
__gnuc_va_li°
 
__≠
))

52  
	`__buûtö___v•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

53 
	`__glibc_objsize
 (
__s
), 
__fmt
, 
__≠
);

54 
	}
}

56 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


58 
	$__¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

59 
size_t
 
__¶í
, c⁄° *
__ª°ri˘
 
__f‹m©
,

60 ...Ë
__THROW


61 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 2));

62 
	$__v¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

63 
size_t
 
__¶í
, c⁄° *
__ª°ri˘
 
__f‹m©
,

64 
__gnuc_va_li°
 
__≠
Ë
__THROW
;

66 #ifde‡
__va_¨g_∑ck


67 
__f‹tify_fun˘i⁄
 

68 
	`__NTH
 (
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

69 c⁄° *
__ª°ri˘
 
__fmt
, ...))

71  
	`__buûtö___¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

72 
	`__glibc_objsize
 (
__s
), 
__fmt
,

73 
	`__va_¨g_∑ck
 ());

74 
	}
}

75 #ñi‡!
deföed
 
__˝lu•lus


76 
	#¢¥ötf
(
°r
, 
Àn
, ...) \

77 
	`__buûtö___¢¥ötf_chk
 (
°r
, 
Àn
, 
__USE_FORTIFY_LEVEL
 - 1, \

78 
	`__glibc_objsize
 (
°r
), 
__VA_ARGS__
)

	)

81 
__f‹tify_fun˘i⁄
 

82 
__NTH
 (
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

83 c⁄° *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
))

85  
	`__buûtö___v¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

86 
	`__glibc_objsize
 (
__s
), 
__fmt
, 
__≠
);

87 
	}
}

91 #i‡
__USE_FORTIFY_LEVEL
 > 1

93 
__Ârötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

94 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

95 
__¥ötf_chk
 (
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

96 
__vÂrötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

97 c⁄° *
__ª°ri˘
 
__f‹m©
, 
__gnuc_va_li°
 
__≠
);

98 
__v¥ötf_chk
 (
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
,

99 
__gnuc_va_li°
 
__≠
);

101 #ifde‡
__va_¨g_∑ck


102 
__f‹tify_fun˘i⁄
 

103 
	$Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, c⁄° *__ª°ri˘ 
__fmt
, ...)

105  
	`__Ârötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

106 
	`__va_¨g_∑ck
 ());

107 
	}
}

109 
__f‹tify_fun˘i⁄
 

110 
	$¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, ...)

112  
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

113 
	}
}

114 #ñi‡!
deföed
 
__˝lu•lus


115 
	#¥ötf
(...) \

116 
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

117 
	#Ârötf
(
°ªam
, ...) \

118 
	`__Ârötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

121 
__f‹tify_fun˘i⁄
 

122 
	$v¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

124 #ifde‡
__USE_EXTERN_INLINES


125  
	`__vÂrötf_chk
 (
°dout
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

127  
	`__v¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

129 
	}
}

131 
__f‹tify_fun˘i⁄
 

132 
	$vÂrötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

133 c⁄° *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

135  
	`__vÂrötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

136 
	}
}

138 #ifde‡
__USE_XOPEN2K8


139 
	$__d¥ötf_chk
 (
__fd
, 
__Êag
, c⁄° *
__ª°ri˘
 
__fmt
,

140 ...Ë
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

141 
	$__vd¥ötf_chk
 (
__fd
, 
__Êag
,

142 c⁄° *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__¨g
)

143 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

145 #ifde‡
__va_¨g_∑ck


146 
__f‹tify_fun˘i⁄
 

147 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

149  
	`__d¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

150 
	`__va_¨g_∑ck
 ());

151 
	}
}

152 #ñi‡!
deföed
 
__˝lu•lus


153 
	#d¥ötf
(
fd
, ...) \

154 
	`__d¥ötf_chk
 (
fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

157 
__f‹tify_fun˘i⁄
 

158 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

160  
	`__vd¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

161 
	}
}

164 #ifde‡
__USE_GNU


166 
	$__a•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

167 c⁄° *
__ª°ri˘
 
__fmt
, ...)

168 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 4))Ë
__wur
;

169 
	$__va•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

170 c⁄° *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__¨g
)

171 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 0))Ë
__wur
;

172 
	$__ob°ack_¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

173 
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
,

175 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

176 
	$__ob°ack_v¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

177 
__Êag
,

178 c⁄° *
__ª°ri˘
 
__f‹m©
,

179 
__gnuc_va_li°
 
__¨gs
)

180 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

182 #ifde‡
__va_¨g_∑ck


183 
__f‹tify_fun˘i⁄
 

184 
	`__NTH
 (
	$a•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
, ...))

186  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

187 
	`__va_¨g_∑ck
 ());

188 
	}
}

190 
__f‹tify_fun˘i⁄
 

191 
__NTH
 (
	$__a•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
,

194  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

195 
	`__va_¨g_∑ck
 ());

196 
	}
}

198 
__f‹tify_fun˘i⁄
 

199 
__NTH
 (
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

200 c⁄° *
__ª°ri˘
 
__fmt
, ...))

202  
	`__ob°ack_¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

203 
	`__va_¨g_∑ck
 ());

204 
	}
}

205 #ñi‡!
deföed
 
__˝lu•lus


206 
	#a•rötf
(
±r
, ...) \

207 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

208 
	#__a•rötf
(
±r
, ...) \

209 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

210 
	#ob°ack_¥ötf
(
ob°ack
, ...) \

211 
	`__ob°ack_¥ötf_chk
 (
ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

214 
__f‹tify_fun˘i⁄
 

215 
__NTH
 (
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
,

216 
__gnuc_va_li°
 
__≠
))

218  
	`__va•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

219 
	}
}

221 
__f‹tify_fun˘i⁄
 

222 
__NTH
 (
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

223 c⁄° *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
))

225  
	`__ob°ack_v¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

226 
__≠
);

227 
	}
}

233 #i‡
__GLIBC_USE
 (
DEPRECATED_GETS
)

234 *
	$__gës_chk
 (*
__°r
, 
size_t
Ë
__wur
;

235 *
	`__REDIRECT
 (
__gës_w¨n
, (*
__°r
), 
gës
)

236 
__wur
 
	`__w¨«âr
 ("please use fgets or getline instead, gets can't "

239 
__f‹tify_fun˘i⁄
 
__wur
 *

240 
	$gës
 (*
__°r
)

242 i‡(
	`__glibc_objsize
 (
__°r
Ë!(
size_t
) -1)

243  
	`__gës_chk
 (
__°r
, 
	`__glibc_objsize
 (__str));

244  
	`__gës_w¨n
 (
__°r
);

245 
	}
}

248 *
	$__fgës_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

249 
FILE
 *
__ª°ri˘
 
__°ªam
)

250 
__wur
 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 3));

251 *
	`__REDIRECT
 (
__fgës_Æüs
,

252 (*
__ª°ri˘
 
__s
, 
__n
,

253 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës
)

254 
__wur
 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 2));

255 *
	`__REDIRECT
 (
__fgës_chk_w¨n
,

256 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

257 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_chk
)

258 
__wur
 
	`__w¨«âr
 ("fgets called with bigger sizeÅhanÜength "

261 
__f‹tify_fun˘i⁄
 
__wur
 
	$__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 1, 2) *

262 
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

264 
size_t
 
sz
 = 
	`__glibc_objsize
 (
__s
);

265 i‡(
	`__glibc_ß„_‹_unknown_Àn
 (
__n
,  (), 
sz
))

266  
	`__fgës_Æüs
 (
__s
, 
__n
, 
__°ªam
);

267 i‡(
	`__glibc_unß„_Àn
 (
__n
,  (), 
sz
))

268  
	`__fgës_chk_w¨n
 (
__s
, 
sz
, 
__n
, 
__°ªam
);

269  
	`__fgës_chk
 (
__s
, 
sz
, 
__n
, 
__°ªam
);

270 
	}
}

272 
size_t
 
	$__‰ód_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

273 
size_t
 
__size
, size_à
__n
,

274 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

275 
size_t
 
	`__REDIRECT
 (
__‰ód_Æüs
,

276 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

277 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

278 
‰ód
Ë
__wur
;

279 
size_t
 
	`__REDIRECT
 (
__‰ód_chk_w¨n
,

280 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

281 
size_t
 
__size
, size_à
__n
,

282 
FILE
 *
__ª°ri˘
 
__°ªam
),

283 
__‰ód_chk
)

284 
__wur
 
	`__w¨«âr
 ("fread called with bigger size *ÇmembÅhanÜength "

287 
__f‹tify_fun˘i⁄
 
__wur
 
size_t


288 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

289 
FILE
 *
__ª°ri˘
 
__°ªam
)

291 
size_t
 
sz
 = 
	`__glibc_objsize0
 (
__±r
);

292 i‡(
	`__glibc_ß„_‹_unknown_Àn
 (
__n
, 
__size
, 
sz
))

293  
	`__‰ód_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

294 i‡(
	`__glibc_unß„_Àn
 (
__n
, 
__size
, 
sz
))

295  
	`__‰ód_chk_w¨n
 (
__±r
, 
sz
, 
__size
, 
__n
, 
__°ªam
);

296  
	`__‰ód_chk
 (
__±r
, 
sz
, 
__size
, 
__n
, 
__°ªam
);

297 
	}
}

299 #ifde‡
__USE_GNU


300 *
	$__fgës_u∆ocked_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
,

301 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
)

302 
__wur
 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 3));

303 *
	`__REDIRECT
 (
__fgës_u∆ocked_Æüs
,

304 (*
__ª°ri˘
 
__s
, 
__n
,

305 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës_u∆ocked
)

306 
__wur
 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 2));

307 *
	`__REDIRECT
 (
__fgës_u∆ocked_chk_w¨n
,

308 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

309 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_u∆ocked_chk
)

310 
__wur
 
	`__w¨«âr
 ("fgets_unlocked called with bigger sizeÅhanÜength "

313 
__f‹tify_fun˘i⁄
 
__wur
 
	$__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 1, 2) *

314 
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

316 
size_t
 
sz
 = 
	`__glibc_objsize
 (
__s
);

317 i‡(
	`__glibc_ß„_‹_unknown_Àn
 (
__n
,  (), 
sz
))

318  
	`__fgës_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

319 i‡(
	`__glibc_unß„_Àn
 (
__n
,  (), 
sz
))

320  
	`__fgës_u∆ocked_chk_w¨n
 (
__s
, 
sz
, 
__n
, 
__°ªam
);

321  
	`__fgës_u∆ocked_chk
 (
__s
, 
sz
, 
__n
, 
__°ªam
);

322 
	}
}

325 #ifde‡
__USE_MISC


326 #unde‡
‰ód_u∆ocked


327 
size_t
 
	$__‰ód_u∆ocked_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

328 
size_t
 
__size
, size_à
__n
,

329 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

330 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_Æüs
,

331 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

332 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

333 
‰ód_u∆ocked
Ë
__wur
;

334 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_chk_w¨n
,

335 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

336 
size_t
 
__size
, size_à
__n
,

337 
FILE
 *
__ª°ri˘
 
__°ªam
),

338 
__‰ód_u∆ocked_chk
)

339 
__wur
 
	`__w¨«âr
 ("fread_unlocked called with bigger size *ÇmembÅhan "

342 
__f‹tify_fun˘i⁄
 
__wur
 
size_t


343 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

344 
FILE
 *
__ª°ri˘
 
__°ªam
)

346 
size_t
 
sz
 = 
	`__glibc_objsize0
 (
__±r
);

347 i‡(
	`__glibc_ß„_‹_unknown_Àn
 (
__n
, 
__size
, 
sz
))

349 #ifde‡
__USE_EXTERN_INLINES


350 i‡(
	`__buûtö_c⁄°™t_p
 (
__size
)

351 && 
	`__buûtö_c⁄°™t_p
 (
__n
)

352 && (
__size
 | 
__n
Ë< (((
size_t
) 1) << (8 *  (size_t) / 2))

353 && 
__size
 * 
__n
 <= 8)

355 
size_t
 
__˙t
 = 
__size
 * 
__n
;

356 *
__˝å
 = (*Ë
__±r
;

357 i‡(
__˙t
 == 0)

360 ; 
__˙t
 > 0; --__cnt)

362 
__c
 = 
	`gëc_u∆ocked
 (
__°ªam
);

363 i‡(
__c
 =
EOF
)

365 *
__˝å
++ = 
__c
;

367  (
__˝å
 - (*Ë
__±r
Ë/ 
__size
;

370  
	`__‰ód_u∆ocked_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

372 i‡(
	`__glibc_unß„_Àn
 (
__n
, 
__size
, 
sz
))

373  
	`__‰ód_u∆ocked_chk_w¨n
 (
__±r
, 
sz
, 
__size
, 
__n
, 
__°ªam
);

374  
	`__‰ód_u∆ocked_chk
 (
__±r
, 
sz
, 
__size
, 
__n
, 
__°ªam
);

376 
	}
}

	@/usr/include/x86_64-linux-gnu/bits/stdio_lim.h

18 #i‚de‡
_BITS_STDIO_LIM_H


19 
	#_BITS_STDIO_LIM_H
 1

	)

21 #i‚de‡
_STDIO_H


25 
	#L_tm≤am
 20

	)

26 
	#TMP_MAX
 238328

	)

27 
	#FILENAME_MAX
 4096

	)

29 #ifde‡
__USE_POSIX


30 
	#L_˘îmid
 9

	)

31 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


32 
	#L_cu£rid
 9

	)

36 #unde‡
FOPEN_MAX


37 
	#FOPEN_MAX
 16

	)

	@/usr/include/x86_64-linux-gnu/bits/stdlib-bsearch.h

19 
__exã∫_ölöe
 *

20 
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

21 
__com∑r_‚_t
 
__com∑r
)

23 
size_t
 
__l
, 
__u
, 
__idx
;

24 c⁄° *
__p
;

25 
__com∑ris⁄
;

27 
__l
 = 0;

28 
__u
 = 
__nmemb
;

29 
__l
 < 
__u
)

31 
__idx
 = (
__l
 + 
__u
) / 2;

32 
__p
 = (c⁄° *Ë(((c⁄° *Ë
__ba£
Ë+ (
__idx
 * 
__size
));

33 
__com∑ris⁄
 = (*
__com∑r
Ë(
__key
, 
__p
);

34 i‡(
__com∑ris⁄
 < 0)

35 
__u
 = 
__idx
;

36 i‡(
__com∑ris⁄
 > 0)

37 
__l
 = 
__idx
 + 1;

40 #i‡
	`__GNUC_PREREQ
(4, 6)

41 #¥agm®
GCC
 
dügno°ic
 
push


42 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wcast-qual"

44  (*Ë
__p
;

45 #i‡
	`__GNUC_PREREQ
(4, 6)

46 #¥agm®
GCC
 
dügno°ic
 
p›


51  
NULL
;

52 
	}
}

	@/usr/include/x86_64-linux-gnu/bits/stdlib-float.h

19 #i‚de‡
_STDLIB_H


23 #ifde‡
__USE_EXTERN_INLINES


24 
__exã∫_ölöe
 

25 
__NTH
 (
	$©of
 (c⁄° *
__≈å
))

27  
	`°πod
 (
__≈å
, (**Ë
NULL
);

28 
	}
}

	@/usr/include/x86_64-linux-gnu/bits/stdlib-ldbl.h

19 #i‚de‡
_STDLIB_H


23 #ifdef 
__USE_ISOC99


24 #ifde‡
__LDBL_COMPAT


25 
	$__LDBL_REDIR1_DECL
 (
°πﬁd
, 
°πod
)

27 
	$__LDBL_REDIR1_DECL
 (
°πﬁd
, 
__°πoõì128
)

31 #ifde‡
__USE_GNU


32 #ifde‡
__LDBL_COMPAT


33 
	$__LDBL_REDIR1_DECL
 (
°πﬁd_l
, 
°πod_l
)

35 
	$__LDBL_REDIR1_DECL
 (
°πﬁd_l
, 
__°πoõì128_l
)

39 #i‡
	`__GLIBC_USE
 (
IEC_60559_BFP_EXT_C2X
)

40 #ifde‡
__LDBL_COMPAT


41 
	$__LDBL_REDIR1_DECL
 (
°r‰oml
, 
°r‰omd
)

43 
	$__LDBL_REDIR1_DECL
 (
°r‰oml
, 
__°r‰omõì128
)

47 #ifde‡
__USE_MISC


48 #i‡
deföed
 
__LDBL_COMPAT


49 
	$__LDBL_REDIR1_DECL
 (
qecvt
, 
ecvt
)

50 
	$__LDBL_REDIR1_DECL
 (
qfcvt
, 
fcvt
)

51 
	$__LDBL_REDIR1_DECL
 (
qgcvt
, 
gcvt
)

52 
	$__LDBL_REDIR1_DECL
 (
qecvt_r
, 
ecvt_r
)

53 
	$__LDBL_REDIR1_DECL
 (
qfcvt_r
, 
fcvt_r
)

54 #ñi‡
__LDOUBLE_REDIRECTS_TO_FLOAT128_ABI
 == 1

55 
	$__LDBL_REDIR1_DECL
 (
qecvt
, 
__qecvtõì128
)

56 
	$__LDBL_REDIR1_DECL
 (
qfcvt
, 
__qfcvtõì128
)

57 
	$__LDBL_REDIR1_DECL
 (
qgcvt
, 
__qgcvtõì128
)

58 
	$__LDBL_REDIR1_DECL
 (
qecvt_r
, 
__qecvtõì128_r
)

59 
	$__LDBL_REDIR1_DECL
 (
qfcvt_r
, 
__qfcvtõì128_r
)

61 #îr‹ 
bôs
/
°dlib
-
ldbl
.
h
 
ö˛uded
 
whí
 
no
Üdb»
ªdúe˘i⁄s
 
¨e
 
ªquúed
.

	@/usr/include/x86_64-linux-gnu/bits/stdlib.h

19 #i‚de‡
_STDLIB_H


23 *
	$__ªÆ∑th_chk
 (c⁄° *
__ª°ri˘
 
__«me
,

24 *
__ª°ri˘
 
__ªsﬁved
,

25 
size_t
 
__ªsﬁvedÀn
Ë
__THROW
 
__wur
;

26 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_Æüs
,

27 (c⁄° *
__ª°ri˘
 
__«me
,

28 *
__ª°ri˘
 
__ªsﬁved
), 
ªÆ∑th
Ë
__wur
;

29 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_chk_w¨n
,

30 (c⁄° *
__ª°ri˘
 
__«me
,

31 *
__ª°ri˘
 
__ªsﬁved
,

32 
size_t
 
__ªsﬁvedÀn
), 
__ªÆ∑th_chk
Ë
__wur


33 
	`__w¨«âr
 ("secondárgument ofÑealpath must beÉither NULL orát "

36 
__f‹tify_fun˘i⁄
 
__wur
 *

37 
	`__NTH
 (
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
, *__ª°ri˘ 
__ªsﬁved
))

39 
size_t
 
sz
 = 
	`__glibc_objsize
 (
__ªsﬁved
);

41 i‡(
sz
 =(
size_t
) -1)

42  
	`__ªÆ∑th_Æüs
 (
__«me
, 
__ªsﬁved
);

44 #i‡
deföed
 
_LIBC_LIMITS_H_
 && deföed 
PATH_MAX


45 i‡(
	`__glibc_unß„_Àn
 (
PATH_MAX
,  (), 
sz
))

46  
	`__ªÆ∑th_chk_w¨n
 (
__«me
, 
__ªsﬁved
, 
sz
);

48  
	`__ªÆ∑th_chk
 (
__«me
, 
__ªsﬁved
, 
sz
);

49 
	}
}

52 
	$__±¢ame_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

53 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2))

54 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 2, 3));

55 
	`__REDIRECT_NTH
 (
__±¢ame_r_Æüs
, (
__fd
, *
__buf
,

56 
size_t
 
__buÊí
), 
±¢ame_r
)

57 
	`__n⁄nuŒ
 ((2)Ë
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 2, 3));

58 
	`__REDIRECT_NTH
 (
__±¢ame_r_chk_w¨n
,

59 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

60 
size_t
 
__ƒól
), 
__±¢ame_r_chk
)

61 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ptsname_r called with buflen biggerÅhan "

64 
__f‹tify_fun˘i⁄
 

65 
	`__NTH
 (
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

67  
	`__glibc_f‹tify
 (
±¢ame_r
, 
__buÊí
,  (),

68 
	`__glibc_objsize
 (
__buf
),

69 
__fd
, 
__buf
, 
__buÊí
);

70 
	}
}

73 
	$__w˘omb_chk
 (*
__s
, 
wch¨_t
 
__wch¨
, 
size_t
 
__buÊí
)

74 
__THROW
 
__wur
;

75 
	`__REDIRECT_NTH
 (
__w˘omb_Æüs
, (*
__s
, 
wch¨_t
 
__wch¨
),

76 
w˘omb
Ë
__wur
;

78 
__f‹tify_fun˘i⁄
 
__wur
 

79 
	`__NTH
 (
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
))

84 
	#__STDLIB_MB_LEN_MAX
 16

	)

85 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__STDLIB_MB_LEN_MAX


88 i‡(
	`__glibc_objsize
 (
__s
Ë!(
size_t
) -1

89 && 
__STDLIB_MB_LEN_MAX
 > 
	`__glibc_objsize
 (
__s
))

90  
	`__w˘omb_chk
 (
__s
, 
__wch¨
, 
	`__glibc_objsize
 (__s));

91  
	`__w˘omb_Æüs
 (
__s
, 
__wch¨
);

92 
	}
}

95 
size_t
 
	$__mb°owcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

96 c⁄° *
__ª°ri˘
 
__§c
,

97 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW


98 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 3)Ë__©å_ac˚s†((
__ªad_⁄ly__
, 2));

99 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_Æüs
,

100 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

101 c⁄° *
__ª°ri˘
 
__§c
,

102 
size_t
 
__Àn
), 
mb°owcs
)

103 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 3)Ë__©å_ac˚s†((
__ªad_⁄ly__
, 2));

104 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_chk_w¨n
,

105 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

106 c⁄° *
__ª°ri˘
 
__§c
,

107 
size_t
 
__Àn
, size_à
__d°Àn
), 
__mb°owcs_chk
)

108 
	`__w¨«âr
 ("mbstowcs called with dst buffer smallerÅhanÜen "

111 
__f‹tify_fun˘i⁄
 
size_t


112 
	`__NTH
 (
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, c⁄° *__ª°ri˘ 
__§c
,

113 
size_t
 
__Àn
))

115  
	`__glibc_f‹tify_n
 (
mb°owcs
, 
__Àn
,  (
wch¨_t
),

116 
	`__glibc_objsize
 (
__d°
),

117 
__d°
, 
__§c
, 
__Àn
);

118 
	}
}

121 
size_t
 
	$__wc°ombs_chk
 (*
__ª°ri˘
 
__d°
,

122 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

123 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW


124 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 3)Ë__©å_ac˚s†((
__ªad_⁄ly__
, 2));

125 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_Æüs
,

126 (*
__ª°ri˘
 
__d°
,

127 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

128 
size_t
 
__Àn
), 
wc°ombs
)

129 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 3)Ë__©å_ac˚s†((
__ªad_⁄ly__
, 2));

130 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_chk_w¨n
,

131 (*
__ª°ri˘
 
__d°
,

132 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

133 
size_t
 
__Àn
, size_à
__d°Àn
), 
__wc°ombs_chk
)

134 
	`__w¨«âr
 ("wcstombs called with dst buffer smallerÅhanÜen");

136 
__f‹tify_fun˘i⁄
 
size_t


137 
	`__NTH
 (
	$wc°ombs
 (*
__ª°ri˘
 
__d°
, c⁄° 
wch¨_t
 *__ª°ri˘ 
__§c
,

138 
size_t
 
__Àn
))

140  
	`__glibc_f‹tify
 (
wc°ombs
, 
__Àn
,  (),

141 
	`__glibc_objsize
 (
__d°
),

142 
__d°
, 
__§c
, 
__Àn
);

143 
	}
}

	@/usr/include/x86_64-linux-gnu/bits/string_fortified.h

18 #i‚de‡
_BITS_STRING_FORTIFIED_H


19 
	#_BITS_STRING_FORTIFIED_H
 1

	)

21 #i‚de‡
_STRING_H


25 
__f‹tify_fun˘i⁄
 *

26 
__NTH
 (
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

27 
size_t
 
__Àn
))

29  
	`__buûtö___mem˝y_chk
 (
__de°
, 
__§c
, 
__Àn
,

30 
	`__glibc_objsize0
 (
__de°
));

31 
	}
}

33 
__f‹tify_fun˘i⁄
 *

34 
__NTH
 (
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__Àn
))

36  
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
,

37 
	`__glibc_objsize0
 (
__de°
));

38 
	}
}

40 #ifde‡
__USE_GNU


41 
__f‹tify_fun˘i⁄
 *

42 
__NTH
 (
	$memp˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

43 
size_t
 
__Àn
))

45  
	`__buûtö___memp˝y_chk
 (
__de°
, 
__§c
, 
__Àn
,

46 
	`__glibc_objsize0
 (
__de°
));

47 
	}
}

56 
__f‹tify_fun˘i⁄
 *

57 
__NTH
 (
	$mem£t
 (*
__de°
, 
__ch
, 
size_t
 
__Àn
))

59  
	`__buûtö___mem£t_chk
 (
__de°
, 
__ch
, 
__Àn
,

60 
	`__glibc_objsize0
 (
__de°
));

61 
	}
}

63 #ifde‡
__USE_MISC


64 
	~<bôs/°rögs_f‹tifõd.h
>

66 
	$__ex∂icô_bzîo_chk
 (*
__de°
, 
size_t
 
__Àn
, size_à
__de°Àn
)

67 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
	`__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 1, 2);

69 
__f‹tify_fun˘i⁄
 

70 
	`__NTH
 (
	$ex∂icô_bzîo
 (*
__de°
, 
size_t
 
__Àn
))

72 
	`__ex∂icô_bzîo_chk
 (
__de°
, 
__Àn
, 
	`__glibc_objsize0
 (__dest));

73 
	}
}

76 
__f‹tify_fun˘i⁄
 *

77 
__NTH
 (
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

79  
	`__buûtö___°r˝y_chk
 (
__de°
, 
__§c
, 
	`__glibc_objsize
 (__dest));

80 
	}
}

82 #ifde‡
__USE_XOPEN2K8


83 
__f‹tify_fun˘i⁄
 *

84 
__NTH
 (
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

86  
	`__buûtö___°p˝y_chk
 (
__de°
, 
__§c
, 
	`__glibc_objsize
 (__dest));

87 
	}
}

91 
__f‹tify_fun˘i⁄
 *

92 
__NTH
 (
	$°∫˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

93 
size_t
 
__Àn
))

95  
	`__buûtö___°∫˝y_chk
 (
__de°
, 
__§c
, 
__Àn
,

96 
	`__glibc_objsize
 (
__de°
));

97 
	}
}

99 #ifde‡
__USE_XOPEN2K8


100 #i‡
__GNUC_PREREQ
 (4, 7Ë|| 
__glibc_˛™g_¥îeq
 (2, 6)

101 
__f‹tify_fun˘i⁄
 *

102 
__NTH
 (
	$°≤˝y
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
))

104  
	`__buûtö___°≤˝y_chk
 (
__de°
, 
__§c
, 
__n
,

105 
	`__glibc_objsize
 (
__de°
));

106 
	}
}

108 *
	$__°≤˝y_chk
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

109 
size_t
 
__de°Àn
Ë
__THROW


110 
	`__f‹tifõd_©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 3))

111 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 2));

112 *
	`__REDIRECT_NTH
 (
__°≤˝y_Æüs
, (*
__de°
, c⁄° *
__§c
,

113 
size_t
 
__n
), 
°≤˝y
);

115 
__f‹tify_fun˘i⁄
 *

116 
	`__NTH
 (
	$°≤˝y
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
))

118 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1

119 && (!
	`__buûtö_c⁄°™t_p
 (
__n
Ë|| __¿> 
	`__bos
 (
__de°
)))

120  
	`__°≤˝y_chk
 (
__de°
, 
__§c
, 
__n
, 
	`__bos
 (__dest));

121  
	`__°≤˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

122 
	}
}

127 
__f‹tify_fun˘i⁄
 *

128 
__NTH
 (
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

130  
	`__buûtö___°rˇt_chk
 (
__de°
, 
__§c
, 
	`__glibc_objsize
 (__dest));

131 
	}
}

134 
__f‹tify_fun˘i⁄
 *

135 
__NTH
 (
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

136 
size_t
 
__Àn
))

138  
	`__buûtö___°∫ˇt_chk
 (
__de°
, 
__§c
, 
__Àn
,

139 
	`__glibc_objsize
 (
__de°
));

140 
	}
}

	@/usr/include/x86_64-linux-gnu/bits/strings_fortified.h

19 #i‚de‡
__STRINGS_FORTIFIED


20 
	#__STRINGS_FORTIFIED
 1

	)

22 
__f‹tify_fun˘i⁄
 

23 
__NTH
 (
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__Àn
))

25 (Ë
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
,

26 
	`__glibc_objsize0
 (
__de°
));

27 
	}
}

29 
__f‹tify_fun˘i⁄
 

30 
__NTH
 (
	$bzîo
 (*
__de°
, 
size_t
 
__Àn
))

32 (Ë
	`__buûtö___mem£t_chk
 (
__de°
, '\0', 
__Àn
,

33 
	`__glibc_objsize0
 (
__de°
));

34 
	}
}

	@/usr/include/x86_64-linux-gnu/bits/struct_mutex.h

19 #i‚de‡
_THREAD_MUTEX_INTERNAL_H


20 
	#_THREAD_MUTEX_INTERNAL_H
 1

	)

22 
	s__±hªad_muãx_s


24 
	m__lock
;

25 
	m__cou¡
;

26 
	m__ow√r
;

27 #ifde‡
__x86_64__


28 
	m__nu£rs
;

32 
	m__köd
;

33 #ifde‡
__x86_64__


34 
	m__•ös
;

35 
	m__ñisi⁄
;

36 
__±hªad_li°_t
 
	m__li°
;

37 
	#__PTHREAD_MUTEX_HAVE_PREV
 1

	)

39 
	m__nu£rs
;

40 
__exãnsi⁄__
 union

44 
	m__e•ös
;

45 
	m__ìlisi⁄
;

46 
	#__•ös
 
__ñisi⁄_d©a
.
__e•ös


	)

47 
	#__ñisi⁄
 
__ñisi⁄_d©a
.
__ìlisi⁄


	)

48 } 
	m__ñisi⁄_d©a
;

49 
__±hªad_¶i°_t
 
	m__li°
;

51 
	#__PTHREAD_MUTEX_HAVE_PREV
 0

	)

55 #ifde‡
__x86_64__


56 
	#__PTHREAD_MUTEX_INITIALIZER
(
__köd
) \

57 0, 0, 0, 0, 
__köd
, 0, 0, { 0, 0 }

	)

59 
	#__PTHREAD_MUTEX_INITIALIZER
(
__köd
) \

60 0, 0, 0, 
__köd
, 0, { { 0, 0 } }

	)

	@/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h

20 #i‚de‡
_RWLOCK_INTERNAL_H


21 
	#_RWLOCK_INTERNAL_H


	)

23 
	s__±hªad_rwlock_¨ch_t


25 
	m__ªadîs
;

26 
	m__wrôîs
;

27 
	m__wΩha£_fuãx
;

28 
	m__wrôîs_fuãx
;

29 
	m__∑d3
;

30 
	m__∑d4
;

31 #ifde‡
__x86_64__


32 
	m__cur_wrôî
;

33 
	m__sh¨ed
;

34 sig√d 
	m__rwñisi⁄
;

35 #ifde‡ 
__ILP32__


36 
	m__∑d1
[3];

37 
	#__PTHREAD_RWLOCK_ELISION_EXTRA
 0, { 0, 0, 0 }

	)

39 
	m__∑d1
[7];

40 
	#__PTHREAD_RWLOCK_ELISION_EXTRA
 0, { 0, 0, 0, 0, 0, 0, 0 }

	)

42 
	m__∑d2
;

45 
	m__Êags
;

49 
	m__Êags
;

50 
	m__sh¨ed
;

51 sig√d 
	m__rwñisi⁄
;

52 
	m__∑d2
;

53 
	m__cur_wrôî
;

57 #ifde‡
__x86_64__


58 
	#__PTHREAD_RWLOCK_INITIALIZER
(
__Êags
) \

59 0, 0, 0, 0, 0, 0, 0, 0, 
__PTHREAD_RWLOCK_ELISION_EXTRA
, 0, 
__Êags


	)

61 
	#__PTHREAD_RWLOCK_INITIALIZER
(
__Êags
) \

62 0, 0, 0, 0, 0, 0, 
__Êags
, 0, 0, 0, 0

	)

	@/usr/include/x86_64-linux-gnu/bits/struct_stat.h

19 #i‡!
deföed
 
_SYS_STAT_H
 && !deföed 
_FCNTL_H


23 #i‚de‡
_BITS_STRUCT_STAT_H


24 
	#_BITS_STRUCT_STAT_H
 1

	)

26 
	s°©


28 #ifde‡
__USE_TIME_BITS64


29 
	~<bôs/°ru˘_°©_time64_hñ≥r.h
>

31 
__dev_t
 
	m°_dev
;

32 #i‚de‡
__x86_64__


33 
	m__∑d1
;

35 #i‡
deföed
 
__x86_64__
 || !deföed 
__USE_FILE_OFFSET64


36 
__öo_t
 
	m°_öo
;

38 
__öo_t
 
	m__°_öo
;

40 #i‚de‡
__x86_64__


41 
__mode_t
 
	m°_mode
;

42 
__∆ök_t
 
	m°_∆ök
;

44 
__∆ök_t
 
	m°_∆ök
;

45 
__mode_t
 
	m°_mode
;

47 
__uid_t
 
	m°_uid
;

48 
__gid_t
 
	m°_gid
;

49 #ifde‡
__x86_64__


50 
	m__∑d0
;

52 
__dev_t
 
	m°_rdev
;

53 #i‚de‡
__x86_64__


54 
	m__∑d2
;

56 #i‡
deföed
 
__x86_64__
 || !deföed 
__USE_FILE_OFFSET64


57 
__off_t
 
	m°_size
;

59 
__off64_t
 
	m°_size
;

61 
__blksize_t
 
	m°_blksize
;

62 #i‡
deföed
 
__x86_64__
 || !deföed 
__USE_FILE_OFFSET64


63 
__blk˙t_t
 
	m°_blocks
;

65 
__blk˙t64_t
 
	m°_blocks
;

67 #ifde‡
__USE_XOPEN2K8


74 
time•ec
 
	m°_©im
;

75 
time•ec
 
	m°_mtim
;

76 
time•ec
 
	m°_˘im
;

77 
	#°_©ime
 
°_©im
.
tv_£c


	)

78 
	#°_mtime
 
°_mtim
.
tv_£c


	)

79 
	#°_˘ime
 
°_˘im
.
tv_£c


	)

81 
__time_t
 
	m°_©ime
;

82 
__sysˇŒ_ul⁄g_t
 
	m°_©imí£c
;

83 
__time_t
 
	m°_mtime
;

84 
__sysˇŒ_ul⁄g_t
 
	m°_mtimí£c
;

85 
__time_t
 
	m°_˘ime
;

86 
__sysˇŒ_ul⁄g_t
 
	m°_˘imí£c
;

88 #ifde‡
__x86_64__


89 
__sysˇŒ_¶⁄g_t
 
	m__glibc_ª£rved
[3];

91 #i‚de‡
__USE_FILE_OFFSET64


92 
	m__glibc_ª£rved4
;

93 
	m__glibc_ª£rved5
;

95 
__öo64_t
 
	m°_öo
;

101 #ifde‡
__USE_LARGEFILE64


103 
	s°©64


105 #ifde‡
__USE_TIME_BITS64


106 
	~<bôs/°ru˘_°©_time64_hñ≥r.h
>

108 
__dev_t
 
	m°_dev
;

109 #ifde‡
__x86_64__


110 
__öo64_t
 
	m°_öo
;

111 
__∆ök_t
 
	m°_∆ök
;

112 
__mode_t
 
	m°_mode
;

114 
	m__∑d1
;

115 
__öo_t
 
	m__°_öo
;

116 
__mode_t
 
	m°_mode
;

117 
__∆ök_t
 
	m°_∆ök
;

119 
__uid_t
 
	m°_uid
;

120 
__gid_t
 
	m°_gid
;

121 #ifde‡
__x86_64__


122 
	m__∑d0
;

123 
__dev_t
 
	m°_rdev
;

124 
__off_t
 
	m°_size
;

126 
__dev_t
 
	m°_rdev
;

127 
	m__∑d2
;

128 
__off64_t
 
	m°_size
;

130 
__blksize_t
 
	m°_blksize
;

131 
__blk˙t64_t
 
	m°_blocks
;

132 #ifde‡
__USE_XOPEN2K8


139 
time•ec
 
	m°_©im
;

140 
time•ec
 
	m°_mtim
;

141 
time•ec
 
	m°_˘im
;

143 
__time_t
 
	m°_©ime
;

144 
__sysˇŒ_ul⁄g_t
 
	m°_©imí£c
;

145 
__time_t
 
	m°_mtime
;

146 
__sysˇŒ_ul⁄g_t
 
	m°_mtimí£c
;

147 
__time_t
 
	m°_˘ime
;

148 
__sysˇŒ_ul⁄g_t
 
	m°_˘imí£c
;

150 #ifde‡
__x86_64__


151 
__sysˇŒ_¶⁄g_t
 
	m__glibc_ª£rved
[3];

153 
__öo64_t
 
	m°_öo
;

160 
	#_STATBUF_ST_BLKSIZE


	)

161 
	#_STATBUF_ST_RDEV


	)

163 
	#_STATBUF_ST_NSEC


	)

	@/usr/include/x86_64-linux-gnu/bits/struct_stat_time64_helper.h

20 
__dev_t
 
	g°_dev
;

21 
__öo64_t
 
	g°_öo
;

22 
__mode_t
 
	g°_mode
;

23 
__∆ök_t
 
	g°_∆ök
;

24 
__uid_t
 
	g°_uid
;

25 
__gid_t
 
	g°_gid
;

26 
__dev_t
 
	g°_rdev
;

27 
__off64_t
 
	g°_size
;

28 
__blksize_t
 
	g°_blksize
;

29 
__blk˙t64_t
 
	g°_blocks
;

30 #ifde‡
__USE_XOPEN2K8


31 #i‚de‡
__°ru˘_time•ec


32 
	#__°ru˘_time•ec
 
time•ec


	)

40 
__°ru˘_time•ec
 
	g°_©im
;

41 
__°ru˘_time•ec
 
	g°_mtim
;

42 
__°ru˘_time•ec
 
	g°_˘im
;

43 
	#°_©ime
 
°_©im
.
tv_£c


	)

44 
	#°_mtime
 
°_mtim
.
tv_£c


	)

45 
	#°_˘ime
 
°_˘im
.
tv_£c


	)

46 #unde‡
__°ru˘_time•ec


50 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


51 
	#__fõldts64
(
«me
) \

52 
__time64_t
 
«me
; 
__öt32_t
 :32; __öt32_à«mê## 
n£c


	)

54 
	#__fõldts64
(
«me
) \

55 
__time64_t
 
«me
; 
__öt32_t
Çamê## 
n£c
; __öt32_à:32

	)

58 
__fõldts64
 (
°_©ime
);

59 
__fõldts64
 (
°_mtime
);

60 
__fõldts64
 (
°_˘ime
);

62 
	g__glibc_ª£rved4
;

63 
	g__glibc_ª£rved5
;

65 #unde‡
__fõldts64


	@/usr/include/x86_64-linux-gnu/bits/syscall.h

4 #i‚de‡
_SYSCALL_H


8 
	#__GLIBC_LINUX_VERSION_CODE
 331776

	)

10 #ifde‡
__NR_FAST_©omic_upd©e


11 
	#SYS_FAST_©omic_upd©e
 
__NR_FAST_©omic_upd©e


	)

14 #ifde‡
__NR_FAST_cmpxchg


15 
	#SYS_FAST_cmpxchg
 
__NR_FAST_cmpxchg


	)

18 #ifde‡
__NR_FAST_cmpxchg64


19 
	#SYS_FAST_cmpxchg64
 
__NR_FAST_cmpxchg64


	)

22 #ifde‡
__NR__Œ£ek


23 
	#SYS__Œ£ek
 
__NR__Œ£ek


	)

26 #ifde‡
__NR__√w£À˘


27 
	#SYS__√w£À˘
 
__NR__√w£À˘


	)

30 #ifde‡
__NR__sys˘l


31 
	#SYS__sys˘l
 
__NR__sys˘l


	)

34 #ifde‡
__NR_ac˚±


35 
	#SYS_ac˚±
 
__NR_ac˚±


	)

38 #ifde‡
__NR_ac˚±4


39 
	#SYS_ac˚±4
 
__NR_ac˚±4


	)

42 #ifde‡
__NR_ac˚ss


43 
	#SYS_ac˚ss
 
__NR_ac˚ss


	)

46 #ifde‡
__NR_ac˘


47 
	#SYS_ac˘
 
__NR_ac˘


	)

50 #ifde‡
__NR_a˛_gë


51 
	#SYS_a˛_gë
 
__NR_a˛_gë


	)

54 #ifde‡
__NR_a˛_£t


55 
	#SYS_a˛_£t
 
__NR_a˛_£t


	)

58 #ifde‡
__NR_add_key


59 
	#SYS_add_key
 
__NR_add_key


	)

62 #ifde‡
__NR_adjtimex


63 
	#SYS_adjtimex
 
__NR_adjtimex


	)

66 #ifde‡
__NR_afs_sysˇŒ


67 
	#SYS_afs_sysˇŒ
 
__NR_afs_sysˇŒ


	)

70 #ifde‡
__NR_Æ¨m


71 
	#SYS_Æ¨m
 
__NR_Æ¨m


	)

74 #ifde‡
__NR_Æloc_hugïages


75 
	#SYS_Æloc_hugïages
 
__NR_Æloc_hugïages


	)

78 #ifde‡
__NR_¨c_gëés


79 
	#SYS_¨c_gëés
 
__NR_¨c_gëés


	)

82 #ifde‡
__NR_¨c_£âls


83 
	#SYS_¨c_£âls
 
__NR_¨c_£âls


	)

86 #ifde‡
__NR_¨c_u§_cmpxchg


87 
	#SYS_¨c_u§_cmpxchg
 
__NR_¨c_u§_cmpxchg


	)

90 #ifde‡
__NR_¨ch_¥˘l


91 
	#SYS_¨ch_¥˘l
 
__NR_¨ch_¥˘l


	)

94 #ifde‡
__NR_¨m_Ádvi£64_64


95 
	#SYS_¨m_Ádvi£64_64
 
__NR_¨m_Ádvi£64_64


	)

98 #ifde‡
__NR_¨m_sync_fûe_ønge


99 
	#SYS_¨m_sync_fûe_ønge
 
__NR_¨m_sync_fûe_ønge


	)

102 #ifde‡
__NR_©omic_b¨rõr


103 
	#SYS_©omic_b¨rõr
 
__NR_©omic_b¨rõr


	)

106 #ifde‡
__NR_©omic_cmpxchg_32


107 
	#SYS_©omic_cmpxchg_32
 
__NR_©omic_cmpxchg_32


	)

110 #ifde‡
__NR_©å˘l


111 
	#SYS_©å˘l
 
__NR_©å˘l


	)

114 #ifde‡
__NR_bdÊush


115 
	#SYS_bdÊush
 
__NR_bdÊush


	)

118 #ifde‡
__NR_böd


119 
	#SYS_böd
 
__NR_böd


	)

122 #ifde‡
__NR_bpf


123 
	#SYS_bpf
 
__NR_bpf


	)

126 #ifde‡
__NR_bªak


127 
	#SYS_bªak
 
__NR_bªak


	)

130 #ifde‡
__NR_bªakpoöt


131 
	#SYS_bªakpoöt
 
__NR_bªakpoöt


	)

134 #ifde‡
__NR_brk


135 
	#SYS_brk
 
__NR_brk


	)

138 #ifde‡
__NR_ˇche˘l


139 
	#SYS_ˇche˘l
 
__NR_ˇche˘l


	)

142 #ifde‡
__NR_ˇcheÊush


143 
	#SYS_ˇcheÊush
 
__NR_ˇcheÊush


	)

146 #ifde‡
__NR_ˇpgë


147 
	#SYS_ˇpgë
 
__NR_ˇpgë


	)

150 #ifde‡
__NR_ˇp£t


151 
	#SYS_ˇp£t
 
__NR_ˇp£t


	)

154 #ifde‡
__NR_chdú


155 
	#SYS_chdú
 
__NR_chdú


	)

158 #ifde‡
__NR_chmod


159 
	#SYS_chmod
 
__NR_chmod


	)

162 #ifde‡
__NR_chown


163 
	#SYS_chown
 
__NR_chown


	)

166 #ifde‡
__NR_chown32


167 
	#SYS_chown32
 
__NR_chown32


	)

170 #ifde‡
__NR_chroŸ


171 
	#SYS_chroŸ
 
__NR_chroŸ


	)

174 #ifde‡
__NR_˛ock_adjtime


175 
	#SYS_˛ock_adjtime
 
__NR_˛ock_adjtime


	)

178 #ifde‡
__NR_˛ock_adjtime64


179 
	#SYS_˛ock_adjtime64
 
__NR_˛ock_adjtime64


	)

182 #ifde‡
__NR_˛ock_gëªs


183 
	#SYS_˛ock_gëªs
 
__NR_˛ock_gëªs


	)

186 #ifde‡
__NR_˛ock_gëªs_time64


187 
	#SYS_˛ock_gëªs_time64
 
__NR_˛ock_gëªs_time64


	)

190 #ifde‡
__NR_˛ock_gëtime


191 
	#SYS_˛ock_gëtime
 
__NR_˛ock_gëtime


	)

194 #ifde‡
__NR_˛ock_gëtime64


195 
	#SYS_˛ock_gëtime64
 
__NR_˛ock_gëtime64


	)

198 #ifde‡
__NR_˛ock_«no¶ìp


199 
	#SYS_˛ock_«no¶ìp
 
__NR_˛ock_«no¶ìp


	)

202 #ifde‡
__NR_˛ock_«no¶ìp_time64


203 
	#SYS_˛ock_«no¶ìp_time64
 
__NR_˛ock_«no¶ìp_time64


	)

206 #ifde‡
__NR_˛ock_£âime


207 
	#SYS_˛ock_£âime
 
__NR_˛ock_£âime


	)

210 #ifde‡
__NR_˛ock_£âime64


211 
	#SYS_˛ock_£âime64
 
__NR_˛ock_£âime64


	)

214 #ifde‡
__NR_˛⁄e


215 
	#SYS_˛⁄e
 
__NR_˛⁄e


	)

218 #ifde‡
__NR_˛⁄e2


219 
	#SYS_˛⁄e2
 
__NR_˛⁄e2


	)

222 #ifde‡
__NR_˛⁄e3


223 
	#SYS_˛⁄e3
 
__NR_˛⁄e3


	)

226 #ifde‡
__NR_˛o£


227 
	#SYS_˛o£
 
__NR_˛o£


	)

230 #ifde‡
__NR_˛o£_ønge


231 
	#SYS_˛o£_ønge
 
__NR_˛o£_ønge


	)

234 #ifde‡
__NR_cmpxchg_badaddr


235 
	#SYS_cmpxchg_badaddr
 
__NR_cmpxchg_badaddr


	)

238 #ifde‡
__NR_c⁄√˘


239 
	#SYS_c⁄√˘
 
__NR_c⁄√˘


	)

242 #ifde‡
__NR_c›y_fûe_ønge


243 
	#SYS_c›y_fûe_ønge
 
__NR_c›y_fûe_ønge


	)

246 #ifde‡
__NR_¸ót


247 
	#SYS_¸ót
 
__NR_¸ót


	)

250 #ifde‡
__NR_¸óã_moduÀ


251 
	#SYS_¸óã_moduÀ
 
__NR_¸óã_moduÀ


	)

254 #ifde‡
__NR_dñëe_moduÀ


255 
	#SYS_dñëe_moduÀ
 
__NR_dñëe_moduÀ


	)

258 #ifde‡
__NR_dùc


259 
	#SYS_dùc
 
__NR_dùc


	)

262 #ifde‡
__NR_dup


263 
	#SYS_dup
 
__NR_dup


	)

266 #ifde‡
__NR_dup2


267 
	#SYS_dup2
 
__NR_dup2


	)

270 #ifde‡
__NR_dup3


271 
	#SYS_dup3
 
__NR_dup3


	)

274 #ifde‡
__NR_ïﬁl_¸óã


275 
	#SYS_ïﬁl_¸óã
 
__NR_ïﬁl_¸óã


	)

278 #ifde‡
__NR_ïﬁl_¸óã1


279 
	#SYS_ïﬁl_¸óã1
 
__NR_ïﬁl_¸óã1


	)

282 #ifde‡
__NR_ïﬁl_˘l


283 
	#SYS_ïﬁl_˘l
 
__NR_ïﬁl_˘l


	)

286 #ifde‡
__NR_ïﬁl_˘l_ﬁd


287 
	#SYS_ïﬁl_˘l_ﬁd
 
__NR_ïﬁl_˘l_ﬁd


	)

290 #ifde‡
__NR_ïﬁl_pwaô


291 
	#SYS_ïﬁl_pwaô
 
__NR_ïﬁl_pwaô


	)

294 #ifde‡
__NR_ïﬁl_pwaô2


295 
	#SYS_ïﬁl_pwaô2
 
__NR_ïﬁl_pwaô2


	)

298 #ifde‡
__NR_ïﬁl_waô


299 
	#SYS_ïﬁl_waô
 
__NR_ïﬁl_waô


	)

302 #ifde‡
__NR_ïﬁl_waô_ﬁd


303 
	#SYS_ïﬁl_waô_ﬁd
 
__NR_ïﬁl_waô_ﬁd


	)

306 #ifde‡
__NR_evítfd


307 
	#SYS_evítfd
 
__NR_evítfd


	)

310 #ifde‡
__NR_evítfd2


311 
	#SYS_evítfd2
 
__NR_evítfd2


	)

314 #ifde‡
__NR_exec_wôh_lﬂdî


315 
	#SYS_exec_wôh_lﬂdî
 
__NR_exec_wôh_lﬂdî


	)

318 #ifde‡
__NR_execv


319 
	#SYS_execv
 
__NR_execv


	)

322 #ifde‡
__NR_execve


323 
	#SYS_execve
 
__NR_execve


	)

326 #ifde‡
__NR_execvót


327 
	#SYS_execvót
 
__NR_execvót


	)

330 #ifde‡
__NR_exô


331 
	#SYS_exô
 
__NR_exô


	)

334 #ifde‡
__NR_exô_group


335 
	#SYS_exô_group
 
__NR_exô_group


	)

338 #ifde‡
__NR_Ác˚sßt


339 
	#SYS_Ác˚sßt
 
__NR_Ác˚sßt


	)

342 #ifde‡
__NR_Ác˚sßt2


343 
	#SYS_Ác˚sßt2
 
__NR_Ác˚sßt2


	)

346 #ifde‡
__NR_Ádvi£64


347 
	#SYS_Ádvi£64
 
__NR_Ádvi£64


	)

350 #ifde‡
__NR_Ádvi£64_64


351 
	#SYS_Ádvi£64_64
 
__NR_Ádvi£64_64


	)

354 #ifde‡
__NR_ÁŒoˇã


355 
	#SYS_ÁŒoˇã
 
__NR_ÁŒoˇã


	)

358 #ifde‡
__NR_ÁnŸify_öô


359 
	#SYS_ÁnŸify_öô
 
__NR_ÁnŸify_öô


	)

362 #ifde‡
__NR_ÁnŸify_m¨k


363 
	#SYS_ÁnŸify_m¨k
 
__NR_ÁnŸify_m¨k


	)

366 #ifde‡
__NR_fchdú


367 
	#SYS_fchdú
 
__NR_fchdú


	)

370 #ifde‡
__NR_fchmod


371 
	#SYS_fchmod
 
__NR_fchmod


	)

374 #ifde‡
__NR_fchmod©


375 
	#SYS_fchmod©
 
__NR_fchmod©


	)

378 #ifde‡
__NR_fchown


379 
	#SYS_fchown
 
__NR_fchown


	)

382 #ifde‡
__NR_fchown32


383 
	#SYS_fchown32
 
__NR_fchown32


	)

386 #ifde‡
__NR_fchow«t


387 
	#SYS_fchow«t
 
__NR_fchow«t


	)

390 #ifde‡
__NR_f˙é


391 
	#SYS_f˙é
 
__NR_f˙é


	)

394 #ifde‡
__NR_f˙é64


395 
	#SYS_f˙é64
 
__NR_f˙é64


	)

398 #ifde‡
__NR_fd©async


399 
	#SYS_fd©async
 
__NR_fd©async


	)

402 #ifde‡
__NR_fgëx©å


403 
	#SYS_fgëx©å
 
__NR_fgëx©å


	)

406 #ifde‡
__NR_föô_moduÀ


407 
	#SYS_föô_moduÀ
 
__NR_föô_moduÀ


	)

410 #ifde‡
__NR_Êi°x©å


411 
	#SYS_Êi°x©å
 
__NR_Êi°x©å


	)

414 #ifde‡
__NR_Êock


415 
	#SYS_Êock
 
__NR_Êock


	)

418 #ifde‡
__NR_f‹k


419 
	#SYS_f‹k
 
__NR_f‹k


	)

422 #ifde‡
__NR_Â_udfõx_¸é


423 
	#SYS_Â_udfõx_¸é
 
__NR_Â_udfõx_¸é


	)

426 #ifde‡
__NR_‰ì_hugïages


427 
	#SYS_‰ì_hugïages
 
__NR_‰ì_hugïages


	)

430 #ifde‡
__NR_‰emovex©å


431 
	#SYS_‰emovex©å
 
__NR_‰emovex©å


	)

434 #ifde‡
__NR_fsc⁄fig


435 
	#SYS_fsc⁄fig
 
__NR_fsc⁄fig


	)

438 #ifde‡
__NR_f£tx©å


439 
	#SYS_f£tx©å
 
__NR_f£tx©å


	)

442 #ifde‡
__NR_fsmou¡


443 
	#SYS_fsmou¡
 
__NR_fsmou¡


	)

446 #ifde‡
__NR_fs›í


447 
	#SYS_fs›í
 
__NR_fs›í


	)

450 #ifde‡
__NR_f•ick


451 
	#SYS_f•ick
 
__NR_f•ick


	)

454 #ifde‡
__NR_f°©


455 
	#SYS_f°©
 
__NR_f°©


	)

458 #ifde‡
__NR_f°©64


459 
	#SYS_f°©64
 
__NR_f°©64


	)

462 #ifde‡
__NR_f°©©64


463 
	#SYS_f°©©64
 
__NR_f°©©64


	)

466 #ifde‡
__NR_f°©fs


467 
	#SYS_f°©fs
 
__NR_f°©fs


	)

470 #ifde‡
__NR_f°©fs64


471 
	#SYS_f°©fs64
 
__NR_f°©fs64


	)

474 #ifde‡
__NR_fsync


475 
	#SYS_fsync
 
__NR_fsync


	)

478 #ifde‡
__NR_·ime


479 
	#SYS_·ime
 
__NR_·ime


	)

482 #ifde‡
__NR_·runˇã


483 
	#SYS_·runˇã
 
__NR_·runˇã


	)

486 #ifde‡
__NR_·runˇã64


487 
	#SYS_·runˇã64
 
__NR_·runˇã64


	)

490 #ifde‡
__NR_fuãx


491 
	#SYS_fuãx
 
__NR_fuãx


	)

494 #ifde‡
__NR_fuãx_time64


495 
	#SYS_fuãx_time64
 
__NR_fuãx_time64


	)

498 #ifde‡
__NR_fuãx_waôv


499 
	#SYS_fuãx_waôv
 
__NR_fuãx_waôv


	)

502 #ifde‡
__NR_futimeßt


503 
	#SYS_futimeßt
 
__NR_futimeßt


	)

506 #ifde‡
__NR_gë_kî√l_syms


507 
	#SYS_gë_kî√l_syms
 
__NR_gë_kî√l_syms


	)

510 #ifde‡
__NR_gë_mempﬁicy


511 
	#SYS_gë_mempﬁicy
 
__NR_gë_mempﬁicy


	)

514 #ifde‡
__NR_gë_robu°_li°


515 
	#SYS_gë_robu°_li°
 
__NR_gë_robu°_li°


	)

518 #ifde‡
__NR_gë_thªad_¨ó


519 
	#SYS_gë_thªad_¨ó
 
__NR_gë_thªad_¨ó


	)

522 #ifde‡
__NR_gë_és


523 
	#SYS_gë_és
 
__NR_gë_és


	)

526 #ifde‡
__NR_gë˝u


527 
	#SYS_gë˝u
 
__NR_gë˝u


	)

530 #ifde‡
__NR_gëcwd


531 
	#SYS_gëcwd
 
__NR_gëcwd


	)

534 #ifde‡
__NR_gëdíts


535 
	#SYS_gëdíts
 
__NR_gëdíts


	)

538 #ifde‡
__NR_gëdíts64


539 
	#SYS_gëdíts64
 
__NR_gëdíts64


	)

542 #ifde‡
__NR_gëdomaö«me


543 
	#SYS_gëdomaö«me
 
__NR_gëdomaö«me


	)

546 #ifde‡
__NR_gëdèbÀsize


547 
	#SYS_gëdèbÀsize
 
__NR_gëdèbÀsize


	)

550 #ifde‡
__NR_gëegid


551 
	#SYS_gëegid
 
__NR_gëegid


	)

554 #ifde‡
__NR_gëegid32


555 
	#SYS_gëegid32
 
__NR_gëegid32


	)

558 #ifde‡
__NR_gëeuid


559 
	#SYS_gëeuid
 
__NR_gëeuid


	)

562 #ifde‡
__NR_gëeuid32


563 
	#SYS_gëeuid32
 
__NR_gëeuid32


	)

566 #ifde‡
__NR_gëgid


567 
	#SYS_gëgid
 
__NR_gëgid


	)

570 #ifde‡
__NR_gëgid32


571 
	#SYS_gëgid32
 
__NR_gëgid32


	)

574 #ifde‡
__NR_gëgroups


575 
	#SYS_gëgroups
 
__NR_gëgroups


	)

578 #ifde‡
__NR_gëgroups32


579 
	#SYS_gëgroups32
 
__NR_gëgroups32


	)

582 #ifde‡
__NR_gëho°«me


583 
	#SYS_gëho°«me
 
__NR_gëho°«me


	)

586 #ifde‡
__NR_gëôimî


587 
	#SYS_gëôimî
 
__NR_gëôimî


	)

590 #ifde‡
__NR_gë∑gesize


591 
	#SYS_gë∑gesize
 
__NR_gë∑gesize


	)

594 #ifde‡
__NR_gë≥î«me


595 
	#SYS_gë≥î«me
 
__NR_gë≥î«me


	)

598 #ifde‡
__NR_gëpgid


599 
	#SYS_gëpgid
 
__NR_gëpgid


	)

602 #ifde‡
__NR_gëpgΩ


603 
	#SYS_gëpgΩ
 
__NR_gëpgΩ


	)

606 #ifde‡
__NR_gëpid


607 
	#SYS_gëpid
 
__NR_gëpid


	)

610 #ifde‡
__NR_gëpmsg


611 
	#SYS_gëpmsg
 
__NR_gëpmsg


	)

614 #ifde‡
__NR_gëµid


615 
	#SYS_gëµid
 
__NR_gëµid


	)

618 #ifde‡
__NR_gë¥i‹ôy


619 
	#SYS_gë¥i‹ôy
 
__NR_gë¥i‹ôy


	)

622 #ifde‡
__NR_gëøndom


623 
	#SYS_gëøndom
 
__NR_gëøndom


	)

626 #ifde‡
__NR_gëªsgid


627 
	#SYS_gëªsgid
 
__NR_gëªsgid


	)

630 #ifde‡
__NR_gëªsgid32


631 
	#SYS_gëªsgid32
 
__NR_gëªsgid32


	)

634 #ifde‡
__NR_gëªsuid


635 
	#SYS_gëªsuid
 
__NR_gëªsuid


	)

638 #ifde‡
__NR_gëªsuid32


639 
	#SYS_gëªsuid32
 
__NR_gëªsuid32


	)

642 #ifde‡
__NR_gëæimô


643 
	#SYS_gëæimô
 
__NR_gëæimô


	)

646 #ifde‡
__NR_gërußge


647 
	#SYS_gërußge
 
__NR_gërußge


	)

650 #ifde‡
__NR_gësid


651 
	#SYS_gësid
 
__NR_gësid


	)

654 #ifde‡
__NR_gësock«me


655 
	#SYS_gësock«me
 
__NR_gësock«me


	)

658 #ifde‡
__NR_gësock›t


659 
	#SYS_gësock›t
 
__NR_gësock›t


	)

662 #ifde‡
__NR_gëtid


663 
	#SYS_gëtid
 
__NR_gëtid


	)

666 #ifde‡
__NR_gëtimeofday


667 
	#SYS_gëtimeofday
 
__NR_gëtimeofday


	)

670 #ifde‡
__NR_gëuid


671 
	#SYS_gëuid
 
__NR_gëuid


	)

674 #ifde‡
__NR_gëuid32


675 
	#SYS_gëuid32
 
__NR_gëuid32


	)

678 #ifde‡
__NR_gëunwöd


679 
	#SYS_gëunwöd
 
__NR_gëunwöd


	)

682 #ifde‡
__NR_gëx©å


683 
	#SYS_gëx©å
 
__NR_gëx©å


	)

686 #ifde‡
__NR_gëxgid


687 
	#SYS_gëxgid
 
__NR_gëxgid


	)

690 #ifde‡
__NR_gëxpid


691 
	#SYS_gëxpid
 
__NR_gëxpid


	)

694 #ifde‡
__NR_gëxuid


695 
	#SYS_gëxuid
 
__NR_gëxuid


	)

698 #ifde‡
__NR_gây


699 
	#SYS_gây
 
__NR_gây


	)

702 #ifde‡
__NR_idÀ


703 
	#SYS_idÀ
 
__NR_idÀ


	)

706 #ifde‡
__NR_öô_moduÀ


707 
	#SYS_öô_moduÀ
 
__NR_öô_moduÀ


	)

710 #ifde‡
__NR_öŸify_add_w©ch


711 
	#SYS_öŸify_add_w©ch
 
__NR_öŸify_add_w©ch


	)

714 #ifde‡
__NR_öŸify_öô


715 
	#SYS_öŸify_öô
 
__NR_öŸify_öô


	)

718 #ifde‡
__NR_öŸify_öô1


719 
	#SYS_öŸify_öô1
 
__NR_öŸify_öô1


	)

722 #ifde‡
__NR_öŸify_rm_w©ch


723 
	#SYS_öŸify_rm_w©ch
 
__NR_öŸify_rm_w©ch


	)

726 #ifde‡
__NR_io_ˇn˚l


727 
	#SYS_io_ˇn˚l
 
__NR_io_ˇn˚l


	)

730 #ifde‡
__NR_io_de°roy


731 
	#SYS_io_de°roy
 
__NR_io_de°roy


	)

734 #ifde‡
__NR_io_gëevíts


735 
	#SYS_io_gëevíts
 
__NR_io_gëevíts


	)

738 #ifde‡
__NR_io_pgëevíts


739 
	#SYS_io_pgëevíts
 
__NR_io_pgëevíts


	)

742 #ifde‡
__NR_io_pgëevíts_time64


743 
	#SYS_io_pgëevíts_time64
 
__NR_io_pgëevíts_time64


	)

746 #ifde‡
__NR_io_£tup


747 
	#SYS_io_£tup
 
__NR_io_£tup


	)

750 #ifde‡
__NR_io_submô


751 
	#SYS_io_submô
 
__NR_io_submô


	)

754 #ifde‡
__NR_io_urög_íãr


755 
	#SYS_io_urög_íãr
 
__NR_io_urög_íãr


	)

758 #ifde‡
__NR_io_urög_ªgi°î


759 
	#SYS_io_urög_ªgi°î
 
__NR_io_urög_ªgi°î


	)

762 #ifde‡
__NR_io_urög_£tup


763 
	#SYS_io_urög_£tup
 
__NR_io_urög_£tup


	)

766 #ifde‡
__NR_io˘l


767 
	#SYS_io˘l
 
__NR_io˘l


	)

770 #ifde‡
__NR_i›îm


771 
	#SYS_i›îm
 
__NR_i›îm


	)

774 #ifde‡
__NR_i›l


775 
	#SYS_i›l
 
__NR_i›l


	)

778 #ifde‡
__NR_i›rio_gë


779 
	#SYS_i›rio_gë
 
__NR_i›rio_gë


	)

782 #ifde‡
__NR_i›rio_£t


783 
	#SYS_i›rio_£t
 
__NR_i›rio_£t


	)

786 #ifde‡
__NR_ùc


787 
	#SYS_ùc
 
__NR_ùc


	)

790 #ifde‡
__NR_kcmp


791 
	#SYS_kcmp
 
__NR_kcmp


	)

794 #ifde‡
__NR_kîn_„©uªs


795 
	#SYS_kîn_„©uªs
 
__NR_kîn_„©uªs


	)

798 #ifde‡
__NR_kexec_fûe_lﬂd


799 
	#SYS_kexec_fûe_lﬂd
 
__NR_kexec_fûe_lﬂd


	)

802 #ifde‡
__NR_kexec_lﬂd


803 
	#SYS_kexec_lﬂd
 
__NR_kexec_lﬂd


	)

806 #ifde‡
__NR_key˘l


807 
	#SYS_key˘l
 
__NR_key˘l


	)

810 #ifde‡
__NR_kûl


811 
	#SYS_kûl
 
__NR_kûl


	)

814 #ifde‡
__NR_œndlock_add_ruÀ


815 
	#SYS_œndlock_add_ruÀ
 
__NR_œndlock_add_ruÀ


	)

818 #ifde‡
__NR_œndlock_¸óã_ruÀ£t


819 
	#SYS_œndlock_¸óã_ruÀ£t
 
__NR_œndlock_¸óã_ruÀ£t


	)

822 #ifde‡
__NR_œndlock_ª°ri˘_£lf


823 
	#SYS_œndlock_ª°ri˘_£lf
 
__NR_œndlock_ª°ri˘_£lf


	)

826 #ifde‡
__NR_lchown


827 
	#SYS_lchown
 
__NR_lchown


	)

830 #ifde‡
__NR_lchown32


831 
	#SYS_lchown32
 
__NR_lchown32


	)

834 #ifde‡
__NR_lgëx©å


835 
	#SYS_lgëx©å
 
__NR_lgëx©å


	)

838 #ifde‡
__NR_lök


839 
	#SYS_lök
 
__NR_lök


	)

842 #ifde‡
__NR_lök©


843 
	#SYS_lök©
 
__NR_lök©


	)

846 #ifde‡
__NR_li°í


847 
	#SYS_li°í
 
__NR_li°í


	)

850 #ifde‡
__NR_li°x©å


851 
	#SYS_li°x©å
 
__NR_li°x©å


	)

854 #ifde‡
__NR_Œi°x©å


855 
	#SYS_Œi°x©å
 
__NR_Œi°x©å


	)

858 #ifde‡
__NR_Œ£ek


859 
	#SYS_Œ£ek
 
__NR_Œ£ek


	)

862 #ifde‡
__NR_lock


863 
	#SYS_lock
 
__NR_lock


	)

866 #ifde‡
__NR_lookup_dcookõ


867 
	#SYS_lookup_dcookõ
 
__NR_lookup_dcookõ


	)

870 #ifde‡
__NR_Ãemovex©å


871 
	#SYS_Ãemovex©å
 
__NR_Ãemovex©å


	)

874 #ifde‡
__NR_l£ek


875 
	#SYS_l£ek
 
__NR_l£ek


	)

878 #ifde‡
__NR_l£tx©å


879 
	#SYS_l£tx©å
 
__NR_l£tx©å


	)

882 #ifde‡
__NR_l°©


883 
	#SYS_l°©
 
__NR_l°©


	)

886 #ifde‡
__NR_l°©64


887 
	#SYS_l°©64
 
__NR_l°©64


	)

890 #ifde‡
__NR_madvi£


891 
	#SYS_madvi£
 
__NR_madvi£


	)

894 #ifde‡
__NR_mböd


895 
	#SYS_mböd
 
__NR_mböd


	)

898 #ifde‡
__NR_memb¨rõr


899 
	#SYS_memb¨rõr
 
__NR_memb¨rõr


	)

902 #ifde‡
__NR_memfd_¸óã


903 
	#SYS_memfd_¸óã
 
__NR_memfd_¸óã


	)

906 #ifde‡
__NR_memfd_£¸ë


907 
	#SYS_memfd_£¸ë
 
__NR_memfd_£¸ë


	)

910 #ifde‡
__NR_mem‹y_‹dîög


911 
	#SYS_mem‹y_‹dîög
 
__NR_mem‹y_‹dîög


	)

914 #ifde‡
__NR_migøã_∑ges


915 
	#SYS_migøã_∑ges
 
__NR_migøã_∑ges


	)

918 #ifde‡
__NR_möc‹e


919 
	#SYS_möc‹e
 
__NR_möc‹e


	)

922 #ifde‡
__NR_mkdú


923 
	#SYS_mkdú
 
__NR_mkdú


	)

926 #ifde‡
__NR_mkdú©


927 
	#SYS_mkdú©
 
__NR_mkdú©


	)

930 #ifde‡
__NR_mknod


931 
	#SYS_mknod
 
__NR_mknod


	)

934 #ifde‡
__NR_mknod©


935 
	#SYS_mknod©
 
__NR_mknod©


	)

938 #ifde‡
__NR_mlock


939 
	#SYS_mlock
 
__NR_mlock


	)

942 #ifde‡
__NR_mlock2


943 
	#SYS_mlock2
 
__NR_mlock2


	)

946 #ifde‡
__NR_mlockÆl


947 
	#SYS_mlockÆl
 
__NR_mlockÆl


	)

950 #ifde‡
__NR_mm≠


951 
	#SYS_mm≠
 
__NR_mm≠


	)

954 #ifde‡
__NR_mm≠2


955 
	#SYS_mm≠2
 
__NR_mm≠2


	)

958 #ifde‡
__NR_modify_ldt


959 
	#SYS_modify_ldt
 
__NR_modify_ldt


	)

962 #ifde‡
__NR_mou¡


963 
	#SYS_mou¡
 
__NR_mou¡


	)

966 #ifde‡
__NR_mou¡_£èâr


967 
	#SYS_mou¡_£èâr
 
__NR_mou¡_£èâr


	)

970 #ifde‡
__NR_move_mou¡


971 
	#SYS_move_mou¡
 
__NR_move_mou¡


	)

974 #ifde‡
__NR_move_∑ges


975 
	#SYS_move_∑ges
 
__NR_move_∑ges


	)

978 #ifde‡
__NR_m¥Ÿe˘


979 
	#SYS_m¥Ÿe˘
 
__NR_m¥Ÿe˘


	)

982 #ifde‡
__NR_mpx


983 
	#SYS_mpx
 
__NR_mpx


	)

986 #ifde‡
__NR_mq_gë£èâr


987 
	#SYS_mq_gë£èâr
 
__NR_mq_gë£èâr


	)

990 #ifde‡
__NR_mq_nŸify


991 
	#SYS_mq_nŸify
 
__NR_mq_nŸify


	)

994 #ifde‡
__NR_mq_›í


995 
	#SYS_mq_›í
 
__NR_mq_›í


	)

998 #ifde‡
__NR_mq_timedª˚ive


999 
	#SYS_mq_timedª˚ive
 
__NR_mq_timedª˚ive


	)

1002 #ifde‡
__NR_mq_timedª˚ive_time64


1003 
	#SYS_mq_timedª˚ive_time64
 
__NR_mq_timedª˚ive_time64


	)

1006 #ifde‡
__NR_mq_timed£nd


1007 
	#SYS_mq_timed£nd
 
__NR_mq_timed£nd


	)

1010 #ifde‡
__NR_mq_timed£nd_time64


1011 
	#SYS_mq_timed£nd_time64
 
__NR_mq_timed£nd_time64


	)

1014 #ifde‡
__NR_mq_u∆ök


1015 
	#SYS_mq_u∆ök
 
__NR_mq_u∆ök


	)

1018 #ifde‡
__NR_mªm≠


1019 
	#SYS_mªm≠
 
__NR_mªm≠


	)

1022 #ifde‡
__NR_msg˘l


1023 
	#SYS_msg˘l
 
__NR_msg˘l


	)

1026 #ifde‡
__NR_msggë


1027 
	#SYS_msggë
 
__NR_msggë


	)

1030 #ifde‡
__NR_msgrcv


1031 
	#SYS_msgrcv
 
__NR_msgrcv


	)

1034 #ifde‡
__NR_msg¢d


1035 
	#SYS_msg¢d
 
__NR_msg¢d


	)

1038 #ifde‡
__NR_msync


1039 
	#SYS_msync
 
__NR_msync


	)

1042 #ifde‡
__NR_mu…ùÀxî


1043 
	#SYS_mu…ùÀxî
 
__NR_mu…ùÀxî


	)

1046 #ifde‡
__NR_mu∆ock


1047 
	#SYS_mu∆ock
 
__NR_mu∆ock


	)

1050 #ifde‡
__NR_mu∆ockÆl


1051 
	#SYS_mu∆ockÆl
 
__NR_mu∆ockÆl


	)

1054 #ifde‡
__NR_munm≠


1055 
	#SYS_munm≠
 
__NR_munm≠


	)

1058 #ifde‡
__NR_«me_to_h™dÀ_©


1059 
	#SYS_«me_to_h™dÀ_©
 
__NR_«me_to_h™dÀ_©


	)

1062 #ifde‡
__NR_«no¶ìp


1063 
	#SYS_«no¶ìp
 
__NR_«no¶ìp


	)

1066 #ifde‡
__NR_√wf°©©


1067 
	#SYS_√wf°©©
 
__NR_√wf°©©


	)

1070 #ifde‡
__NR_nfs£rv˘l


1071 
	#SYS_nfs£rv˘l
 
__NR_nfs£rv˘l


	)

1074 #ifde‡
__NR_ni_sysˇŒ


1075 
	#SYS_ni_sysˇŒ
 
__NR_ni_sysˇŒ


	)

1078 #ifde‡
__NR_ni˚


1079 
	#SYS_ni˚
 
__NR_ni˚


	)

1082 #ifde‡
__NR_ﬁd_adjtimex


1083 
	#SYS_ﬁd_adjtimex
 
__NR_ﬁd_adjtimex


	)

1086 #ifde‡
__NR_ﬁd_gë∑gesize


1087 
	#SYS_ﬁd_gë∑gesize
 
__NR_ﬁd_gë∑gesize


	)

1090 #ifde‡
__NR_ﬁdf°©


1091 
	#SYS_ﬁdf°©
 
__NR_ﬁdf°©


	)

1094 #ifde‡
__NR_ﬁdl°©


1095 
	#SYS_ﬁdl°©
 
__NR_ﬁdl°©


	)

1098 #ifde‡
__NR_ﬁdﬁdu«me


1099 
	#SYS_ﬁdﬁdu«me
 
__NR_ﬁdﬁdu«me


	)

1102 #ifde‡
__NR_ﬁd°©


1103 
	#SYS_ﬁd°©
 
__NR_ﬁd°©


	)

1106 #ifde‡
__NR_ﬁdumou¡


1107 
	#SYS_ﬁdumou¡
 
__NR_ﬁdumou¡


	)

1110 #ifde‡
__NR_ﬁdu«me


1111 
	#SYS_ﬁdu«me
 
__NR_ﬁdu«me


	)

1114 #ifde‡
__NR_›í


1115 
	#SYS_›í
 
__NR_›í


	)

1118 #ifde‡
__NR_›í_by_h™dÀ_©


1119 
	#SYS_›í_by_h™dÀ_©
 
__NR_›í_by_h™dÀ_©


	)

1122 #ifde‡
__NR_›í_åì


1123 
	#SYS_›í_åì
 
__NR_›í_åì


	)

1126 #ifde‡
__NR_›í©


1127 
	#SYS_›í©
 
__NR_›í©


	)

1130 #ifde‡
__NR_›í©2


1131 
	#SYS_›í©2
 
__NR_›í©2


	)

1134 #ifde‡
__NR_‹1k_©omic


1135 
	#SYS_‹1k_©omic
 
__NR_‹1k_©omic


	)

1138 #ifde‡
__NR_osf_adjtime


1139 
	#SYS_osf_adjtime
 
__NR_osf_adjtime


	)

1142 #ifde‡
__NR_osf_afs_sysˇŒ


1143 
	#SYS_osf_afs_sysˇŒ
 
__NR_osf_afs_sysˇŒ


	)

1146 #ifde‡
__NR_osf_Æt_∂ock


1147 
	#SYS_osf_Æt_∂ock
 
__NR_osf_Æt_∂ock


	)

1150 #ifde‡
__NR_osf_Æt_£tsid


1151 
	#SYS_osf_Æt_£tsid
 
__NR_osf_Æt_£tsid


	)

1154 #ifde‡
__NR_osf_Æt_sig≥ndög


1155 
	#SYS_osf_Æt_sig≥ndög
 
__NR_osf_Æt_sig≥ndög


	)

1158 #ifde‡
__NR_osf_asynch_d´m⁄


1159 
	#SYS_osf_asynch_d´m⁄
 
__NR_osf_asynch_d´m⁄


	)

1162 #ifde‡
__NR_osf_aud˙é


1163 
	#SYS_osf_aud˙é
 
__NR_osf_aud˙é


	)

1166 #ifde‡
__NR_osf_audgí


1167 
	#SYS_osf_audgí
 
__NR_osf_audgí


	)

1170 #ifde‡
__NR_osf_chÊags


1171 
	#SYS_osf_chÊags
 
__NR_osf_chÊags


	)

1174 #ifde‡
__NR_osf_execve


1175 
	#SYS_osf_execve
 
__NR_osf_execve


	)

1178 #ifde‡
__NR_osf_exp‹tfs


1179 
	#SYS_osf_exp‹tfs
 
__NR_osf_exp‹tfs


	)

1182 #ifde‡
__NR_osf_fchÊags


1183 
	#SYS_osf_fchÊags
 
__NR_osf_fchÊags


	)

1186 #ifde‡
__NR_osf_fd©async


1187 
	#SYS_osf_fd©async
 
__NR_osf_fd©async


	)

1190 #ifde‡
__NR_osf_Â©hc⁄f


1191 
	#SYS_osf_Â©hc⁄f
 
__NR_osf_Â©hc⁄f


	)

1194 #ifde‡
__NR_osf_f°©


1195 
	#SYS_osf_f°©
 
__NR_osf_f°©


	)

1198 #ifde‡
__NR_osf_f°©fs


1199 
	#SYS_osf_f°©fs
 
__NR_osf_f°©fs


	)

1202 #ifde‡
__NR_osf_f°©fs64


1203 
	#SYS_osf_f°©fs64
 
__NR_osf_f°©fs64


	)

1206 #ifde‡
__NR_osf_fu£r


1207 
	#SYS_osf_fu£r
 
__NR_osf_fu£r


	)

1210 #ifde‡
__NR_osf_gëaddªssc⁄f


1211 
	#SYS_osf_gëaddªssc⁄f
 
__NR_osf_gëaddªssc⁄f


	)

1214 #ifde‡
__NR_osf_gëdúíåõs


1215 
	#SYS_osf_gëdúíåõs
 
__NR_osf_gëdúíåõs


	)

1218 #ifde‡
__NR_osf_gëdomaö«me


1219 
	#SYS_osf_gëdomaö«me
 
__NR_osf_gëdomaö«me


	)

1222 #ifde‡
__NR_osf_gëfh


1223 
	#SYS_osf_gëfh
 
__NR_osf_gëfh


	)

1226 #ifde‡
__NR_osf_gëfs°©


1227 
	#SYS_osf_gëfs°©
 
__NR_osf_gëfs°©


	)

1230 #ifde‡
__NR_osf_gëho°id


1231 
	#SYS_osf_gëho°id
 
__NR_osf_gëho°id


	)

1234 #ifde‡
__NR_osf_gëôimî


1235 
	#SYS_osf_gëôimî
 
__NR_osf_gëôimî


	)

1238 #ifde‡
__NR_osf_gëlogö


1239 
	#SYS_osf_gëlogö
 
__NR_osf_gëlogö


	)

1242 #ifde‡
__NR_osf_gëm¡


1243 
	#SYS_osf_gëm¡
 
__NR_osf_gëm¡


	)

1246 #ifde‡
__NR_osf_gërußge


1247 
	#SYS_osf_gërußge
 
__NR_osf_gërußge


	)

1250 #ifde‡
__NR_osf_gësysöfo


1251 
	#SYS_osf_gësysöfo
 
__NR_osf_gësysöfo


	)

1254 #ifde‡
__NR_osf_gëtimeofday


1255 
	#SYS_osf_gëtimeofday
 
__NR_osf_gëtimeofday


	)

1258 #ifde‡
__NR_osf_klﬂdˇŒ


1259 
	#SYS_osf_klﬂdˇŒ
 
__NR_osf_klﬂdˇŒ


	)

1262 #ifde‡
__NR_osf_kmodˇŒ


1263 
	#SYS_osf_kmodˇŒ
 
__NR_osf_kmodˇŒ


	)

1266 #ifde‡
__NR_osf_l°©


1267 
	#SYS_osf_l°©
 
__NR_osf_l°©


	)

1270 #ifde‡
__NR_osf_mem˙é


1271 
	#SYS_osf_mem˙é
 
__NR_osf_mem˙é


	)

1274 #ifde‡
__NR_osf_möc‹e


1275 
	#SYS_osf_möc‹e
 
__NR_osf_möc‹e


	)

1278 #ifde‡
__NR_osf_mou¡


1279 
	#SYS_osf_mou¡
 
__NR_osf_mou¡


	)

1282 #ifde‡
__NR_osf_mªm≠


1283 
	#SYS_osf_mªm≠
 
__NR_osf_mªm≠


	)

1286 #ifde‡
__NR_osf_msfs_sysˇŒ


1287 
	#SYS_osf_msfs_sysˇŒ
 
__NR_osf_msfs_sysˇŒ


	)

1290 #ifde‡
__NR_osf_m¶ìp


1291 
	#SYS_osf_m¶ìp
 
__NR_osf_m¶ìp


	)

1294 #ifde‡
__NR_osf_mvÆid


1295 
	#SYS_osf_mvÆid
 
__NR_osf_mvÆid


	)

1298 #ifde‡
__NR_osf_mwakeup


1299 
	#SYS_osf_mwakeup
 
__NR_osf_mwakeup


	)

1302 #ifde‡
__NR_osf_«c˚±


1303 
	#SYS_osf_«c˚±
 
__NR_osf_«c˚±


	)

1306 #ifde‡
__NR_osf_nfssvc


1307 
	#SYS_osf_nfssvc
 
__NR_osf_nfssvc


	)

1310 #ifde‡
__NR_osf_ngë≥î«me


1311 
	#SYS_osf_ngë≥î«me
 
__NR_osf_ngë≥î«me


	)

1314 #ifde‡
__NR_osf_ngësock«me


1315 
	#SYS_osf_ngësock«me
 
__NR_osf_ngësock«me


	)

1318 #ifde‡
__NR_osf_ƒecv‰om


1319 
	#SYS_osf_ƒecv‰om
 
__NR_osf_ƒecv‰om


	)

1322 #ifde‡
__NR_osf_ƒecvmsg


1323 
	#SYS_osf_ƒecvmsg
 
__NR_osf_ƒecvmsg


	)

1326 #ifde‡
__NR_osf_n£ndmsg


1327 
	#SYS_osf_n£ndmsg
 
__NR_osf_n£ndmsg


	)

1330 #ifde‡
__NR_osf_¡p_adjtime


1331 
	#SYS_osf_¡p_adjtime
 
__NR_osf_¡p_adjtime


	)

1334 #ifde‡
__NR_osf_¡p_gëtime


1335 
	#SYS_osf_¡p_gëtime
 
__NR_osf_¡p_gëtime


	)

1338 #ifde‡
__NR_osf_ﬁd_¸ót


1339 
	#SYS_osf_ﬁd_¸ót
 
__NR_osf_ﬁd_¸ót


	)

1342 #ifde‡
__NR_osf_ﬁd_f°©


1343 
	#SYS_osf_ﬁd_f°©
 
__NR_osf_ﬁd_f°©


	)

1346 #ifde‡
__NR_osf_ﬁd_gëpgΩ


1347 
	#SYS_osf_ﬁd_gëpgΩ
 
__NR_osf_ﬁd_gëpgΩ


	)

1350 #ifde‡
__NR_osf_ﬁd_kûÕg


1351 
	#SYS_osf_ﬁd_kûÕg
 
__NR_osf_ﬁd_kûÕg


	)

1354 #ifde‡
__NR_osf_ﬁd_l°©


1355 
	#SYS_osf_ﬁd_l°©
 
__NR_osf_ﬁd_l°©


	)

1358 #ifde‡
__NR_osf_ﬁd_›í


1359 
	#SYS_osf_ﬁd_›í
 
__NR_osf_ﬁd_›í


	)

1362 #ifde‡
__NR_osf_ﬁd_siga˘i⁄


1363 
	#SYS_osf_ﬁd_siga˘i⁄
 
__NR_osf_ﬁd_siga˘i⁄


	)

1366 #ifde‡
__NR_osf_ﬁd_sigblock


1367 
	#SYS_osf_ﬁd_sigblock
 
__NR_osf_ﬁd_sigblock


	)

1370 #ifde‡
__NR_osf_ﬁd_sigªtu∫


1371 
	#SYS_osf_ﬁd_sigªtu∫
 
__NR_osf_ﬁd_sigªtu∫


	)

1374 #ifde‡
__NR_osf_ﬁd_sig£tmask


1375 
	#SYS_osf_ﬁd_sig£tmask
 
__NR_osf_ﬁd_sig£tmask


	)

1378 #ifde‡
__NR_osf_ﬁd_sigvec


1379 
	#SYS_osf_ﬁd_sigvec
 
__NR_osf_ﬁd_sigvec


	)

1382 #ifde‡
__NR_osf_ﬁd_°©


1383 
	#SYS_osf_ﬁd_°©
 
__NR_osf_ﬁd_°©


	)

1386 #ifde‡
__NR_osf_ﬁd_vadvi£


1387 
	#SYS_osf_ﬁd_vadvi£
 
__NR_osf_ﬁd_vadvi£


	)

1390 #ifde‡
__NR_osf_ﬁd_våa˚


1391 
	#SYS_osf_ﬁd_våa˚
 
__NR_osf_ﬁd_våa˚


	)

1394 #ifde‡
__NR_osf_ﬁd_waô


1395 
	#SYS_osf_ﬁd_waô
 
__NR_osf_ﬁd_waô


	)

1398 #ifde‡
__NR_osf_ﬁdquŸa


1399 
	#SYS_osf_ﬁdquŸa
 
__NR_osf_ﬁdquŸa


	)

1402 #ifde‡
__NR_osf_∑thc⁄f


1403 
	#SYS_osf_∑thc⁄f
 
__NR_osf_∑thc⁄f


	)

1406 #ifde‡
__NR_osf_pid_block


1407 
	#SYS_osf_pid_block
 
__NR_osf_pid_block


	)

1410 #ifde‡
__NR_osf_pid_unblock


1411 
	#SYS_osf_pid_unblock
 
__NR_osf_pid_unblock


	)

1414 #ifde‡
__NR_osf_∂ock


1415 
	#SYS_osf_∂ock
 
__NR_osf_∂ock


	)

1418 #ifde‡
__NR_osf_¥io˙é£t


1419 
	#SYS_osf_¥io˙é£t
 
__NR_osf_¥io˙é£t


	)

1422 #ifde‡
__NR_osf_¥ofû


1423 
	#SYS_osf_¥ofû
 
__NR_osf_¥ofû


	)

1426 #ifde‡
__NR_osf_¥›li°_sysˇŒ


1427 
	#SYS_osf_¥›li°_sysˇŒ
 
__NR_osf_¥›li°_sysˇŒ


	)

1430 #ifde‡
__NR_osf_ªboŸ


1431 
	#SYS_osf_ªboŸ
 
__NR_osf_ªboŸ


	)

1434 #ifde‡
__NR_osf_ªvoke


1435 
	#SYS_osf_ªvoke
 
__NR_osf_ªvoke


	)

1438 #ifde‡
__NR_osf_sbrk


1439 
	#SYS_osf_sbrk
 
__NR_osf_sbrk


	)

1442 #ifde‡
__NR_osf_£curôy


1443 
	#SYS_osf_£curôy
 
__NR_osf_£curôy


	)

1446 #ifde‡
__NR_osf_£À˘


1447 
	#SYS_osf_£À˘
 
__NR_osf_£À˘


	)

1450 #ifde‡
__NR_osf_£t_¥ogøm_©åibuãs


1451 
	#SYS_osf_£t_¥ogøm_©åibuãs
 
__NR_osf_£t_¥ogøm_©åibuãs


	)

1454 #ifde‡
__NR_osf_£t_•ecuœtive


1455 
	#SYS_osf_£t_•ecuœtive
 
__NR_osf_£t_•ecuœtive


	)

1458 #ifde‡
__NR_osf_£tho°id


1459 
	#SYS_osf_£tho°id
 
__NR_osf_£tho°id


	)

1462 #ifde‡
__NR_osf_£tôimî


1463 
	#SYS_osf_£tôimî
 
__NR_osf_£tôimî


	)

1466 #ifde‡
__NR_osf_£éogö


1467 
	#SYS_osf_£éogö
 
__NR_osf_£éogö


	)

1470 #ifde‡
__NR_osf_£tsysöfo


1471 
	#SYS_osf_£tsysöfo
 
__NR_osf_£tsysöfo


	)

1474 #ifde‡
__NR_osf_£âimeofday


1475 
	#SYS_osf_£âimeofday
 
__NR_osf_£âimeofday


	)

1478 #ifde‡
__NR_osf_shm©


1479 
	#SYS_osf_shm©
 
__NR_osf_shm©


	)

1482 #ifde‡
__NR_osf_sig«l


1483 
	#SYS_osf_sig«l
 
__NR_osf_sig«l


	)

1486 #ifde‡
__NR_osf_sig¥ocmask


1487 
	#SYS_osf_sig¥ocmask
 
__NR_osf_sig¥ocmask


	)

1490 #ifde‡
__NR_osf_sig£nd£t


1491 
	#SYS_osf_sig£nd£t
 
__NR_osf_sig£nd£t


	)

1494 #ifde‡
__NR_osf_sig°ack


1495 
	#SYS_osf_sig°ack
 
__NR_osf_sig°ack


	)

1498 #ifde‡
__NR_osf_sigwaô¥im


1499 
	#SYS_osf_sigwaô¥im
 
__NR_osf_sigwaô¥im


	)

1502 #ifde‡
__NR_osf_s°k


1503 
	#SYS_osf_s°k
 
__NR_osf_s°k


	)

1506 #ifde‡
__NR_osf_°©


1507 
	#SYS_osf_°©
 
__NR_osf_°©


	)

1510 #ifde‡
__NR_osf_°©fs


1511 
	#SYS_osf_°©fs
 
__NR_osf_°©fs


	)

1514 #ifde‡
__NR_osf_°©fs64


1515 
	#SYS_osf_°©fs64
 
__NR_osf_°©fs64


	)

1518 #ifde‡
__NR_osf_subsys_öfo


1519 
	#SYS_osf_subsys_öfo
 
__NR_osf_subsys_öfo


	)

1522 #ifde‡
__NR_osf_sw≠˘l


1523 
	#SYS_osf_sw≠˘l
 
__NR_osf_sw≠˘l


	)

1526 #ifde‡
__NR_osf_sw≠⁄


1527 
	#SYS_osf_sw≠⁄
 
__NR_osf_sw≠⁄


	)

1530 #ifde‡
__NR_osf_sysˇŒ


1531 
	#SYS_osf_sysˇŒ
 
__NR_osf_sysˇŒ


	)

1534 #ifde‡
__NR_osf_sysöfo


1535 
	#SYS_osf_sysöfo
 
__NR_osf_sysöfo


	)

1538 #ifde‡
__NR_osf_èbÀ


1539 
	#SYS_osf_èbÀ
 
__NR_osf_èbÀ


	)

1542 #ifde‡
__NR_osf_uadmö


1543 
	#SYS_osf_uadmö
 
__NR_osf_uadmö


	)

1546 #ifde‡
__NR_osf_u¶ìp_thªad


1547 
	#SYS_osf_u¶ìp_thªad
 
__NR_osf_u¶ìp_thªad


	)

1550 #ifde‡
__NR_osf_uswôch


1551 
	#SYS_osf_uswôch
 
__NR_osf_uswôch


	)

1554 #ifde‡
__NR_osf_utc_adjtime


1555 
	#SYS_osf_utc_adjtime
 
__NR_osf_utc_adjtime


	)

1558 #ifde‡
__NR_osf_utc_gëtime


1559 
	#SYS_osf_utc_gëtime
 
__NR_osf_utc_gëtime


	)

1562 #ifde‡
__NR_osf_utimes


1563 
	#SYS_osf_utimes
 
__NR_osf_utimes


	)

1566 #ifde‡
__NR_osf_ut¢ame


1567 
	#SYS_osf_ut¢ame
 
__NR_osf_ut¢ame


	)

1570 #ifde‡
__NR_osf_waô4


1571 
	#SYS_osf_waô4
 
__NR_osf_waô4


	)

1574 #ifde‡
__NR_osf_waôid


1575 
	#SYS_osf_waôid
 
__NR_osf_waôid


	)

1578 #ifde‡
__NR_∑u£


1579 
	#SYS_∑u£
 
__NR_∑u£


	)

1582 #ifde‡
__NR_pcic⁄fig_ioba£


1583 
	#SYS_pcic⁄fig_ioba£
 
__NR_pcic⁄fig_ioba£


	)

1586 #ifde‡
__NR_pcic⁄fig_ªad


1587 
	#SYS_pcic⁄fig_ªad
 
__NR_pcic⁄fig_ªad


	)

1590 #ifde‡
__NR_pcic⁄fig_wrôe


1591 
	#SYS_pcic⁄fig_wrôe
 
__NR_pcic⁄fig_wrôe


	)

1594 #ifde‡
__NR_≥rf_evít_›í


1595 
	#SYS_≥rf_evít_›í
 
__NR_≥rf_evít_›í


	)

1598 #ifde‡
__NR_≥rf˘r


1599 
	#SYS_≥rf˘r
 
__NR_≥rf˘r


	)

1602 #ifde‡
__NR_≥rfm⁄˘l


1603 
	#SYS_≥rfm⁄˘l
 
__NR_≥rfm⁄˘l


	)

1606 #ifde‡
__NR_≥rs⁄Æôy


1607 
	#SYS_≥rs⁄Æôy
 
__NR_≥rs⁄Æôy


	)

1610 #ifde‡
__NR_pidfd_gëfd


1611 
	#SYS_pidfd_gëfd
 
__NR_pidfd_gëfd


	)

1614 #ifde‡
__NR_pidfd_›í


1615 
	#SYS_pidfd_›í
 
__NR_pidfd_›í


	)

1618 #ifde‡
__NR_pidfd_£nd_sig«l


1619 
	#SYS_pidfd_£nd_sig«l
 
__NR_pidfd_£nd_sig«l


	)

1622 #ifde‡
__NR_pùe


1623 
	#SYS_pùe
 
__NR_pùe


	)

1626 #ifde‡
__NR_pùe2


1627 
	#SYS_pùe2
 
__NR_pùe2


	)

1630 #ifde‡
__NR_pivŸ_roŸ


1631 
	#SYS_pivŸ_roŸ
 
__NR_pivŸ_roŸ


	)

1634 #ifde‡
__NR_pkey_Æloc


1635 
	#SYS_pkey_Æloc
 
__NR_pkey_Æloc


	)

1638 #ifde‡
__NR_pkey_‰ì


1639 
	#SYS_pkey_‰ì
 
__NR_pkey_‰ì


	)

1642 #ifde‡
__NR_pkey_m¥Ÿe˘


1643 
	#SYS_pkey_m¥Ÿe˘
 
__NR_pkey_m¥Ÿe˘


	)

1646 #ifde‡
__NR_pﬁl


1647 
	#SYS_pﬁl
 
__NR_pﬁl


	)

1650 #ifde‡
__NR_µﬁl


1651 
	#SYS_µﬁl
 
__NR_µﬁl


	)

1654 #ifde‡
__NR_µﬁl_time64


1655 
	#SYS_µﬁl_time64
 
__NR_µﬁl_time64


	)

1658 #ifde‡
__NR_¥˘l


1659 
	#SYS_¥˘l
 
__NR_¥˘l


	)

1662 #ifde‡
__NR_¥ód64


1663 
	#SYS_¥ód64
 
__NR_¥ód64


	)

1666 #ifde‡
__NR_¥ódv


1667 
	#SYS_¥ódv
 
__NR_¥ódv


	)

1670 #ifde‡
__NR_¥ódv2


1671 
	#SYS_¥ódv2
 
__NR_¥ódv2


	)

1674 #ifde‡
__NR_¥limô64


1675 
	#SYS_¥limô64
 
__NR_¥limô64


	)

1678 #ifde‡
__NR_¥o˚ss_madvi£


1679 
	#SYS_¥o˚ss_madvi£
 
__NR_¥o˚ss_madvi£


	)

1682 #ifde‡
__NR_¥o˚ss_mªÀa£


1683 
	#SYS_¥o˚ss_mªÀa£
 
__NR_¥o˚ss_mªÀa£


	)

1686 #ifde‡
__NR_¥o˚ss_vm_ªadv


1687 
	#SYS_¥o˚ss_vm_ªadv
 
__NR_¥o˚ss_vm_ªadv


	)

1690 #ifde‡
__NR_¥o˚ss_vm_wrôev


1691 
	#SYS_¥o˚ss_vm_wrôev
 
__NR_¥o˚ss_vm_wrôev


	)

1694 #ifde‡
__NR_¥of


1695 
	#SYS_¥of
 
__NR_¥of


	)

1698 #ifde‡
__NR_¥ofû


1699 
	#SYS_¥ofû
 
__NR_¥ofû


	)

1702 #ifde‡
__NR_p£À˘6


1703 
	#SYS_p£À˘6
 
__NR_p£À˘6


	)

1706 #ifde‡
__NR_p£À˘6_time64


1707 
	#SYS_p£À˘6_time64
 
__NR_p£À˘6_time64


	)

1710 #ifde‡
__NR_±ø˚


1711 
	#SYS_±ø˚
 
__NR_±ø˚


	)

1714 #ifde‡
__NR_puçmsg


1715 
	#SYS_puçmsg
 
__NR_puçmsg


	)

1718 #ifde‡
__NR_pwrôe64


1719 
	#SYS_pwrôe64
 
__NR_pwrôe64


	)

1722 #ifde‡
__NR_pwrôev


1723 
	#SYS_pwrôev
 
__NR_pwrôev


	)

1726 #ifde‡
__NR_pwrôev2


1727 
	#SYS_pwrôev2
 
__NR_pwrôev2


	)

1730 #ifde‡
__NR_quîy_moduÀ


1731 
	#SYS_quîy_moduÀ
 
__NR_quîy_moduÀ


	)

1734 #ifde‡
__NR_quŸa˘l


1735 
	#SYS_quŸa˘l
 
__NR_quŸa˘l


	)

1738 #ifde‡
__NR_quŸa˘l_fd


1739 
	#SYS_quŸa˘l_fd
 
__NR_quŸa˘l_fd


	)

1742 #ifde‡
__NR_ªad


1743 
	#SYS_ªad
 
__NR_ªad


	)

1746 #ifde‡
__NR_ªadahód


1747 
	#SYS_ªadahód
 
__NR_ªadahód


	)

1750 #ifde‡
__NR_ªaddú


1751 
	#SYS_ªaddú
 
__NR_ªaddú


	)

1754 #ifde‡
__NR_ªadlök


1755 
	#SYS_ªadlök
 
__NR_ªadlök


	)

1758 #ifde‡
__NR_ªadlök©


1759 
	#SYS_ªadlök©
 
__NR_ªadlök©


	)

1762 #ifde‡
__NR_ªadv


1763 
	#SYS_ªadv
 
__NR_ªadv


	)

1766 #ifde‡
__NR_ªboŸ


1767 
	#SYS_ªboŸ
 
__NR_ªboŸ


	)

1770 #ifde‡
__NR_ªcv


1771 
	#SYS_ªcv
 
__NR_ªcv


	)

1774 #ifde‡
__NR_ªcv‰om


1775 
	#SYS_ªcv‰om
 
__NR_ªcv‰om


	)

1778 #ifde‡
__NR_ªcvmmsg


1779 
	#SYS_ªcvmmsg
 
__NR_ªcvmmsg


	)

1782 #ifde‡
__NR_ªcvmmsg_time64


1783 
	#SYS_ªcvmmsg_time64
 
__NR_ªcvmmsg_time64


	)

1786 #ifde‡
__NR_ªcvmsg


1787 
	#SYS_ªcvmsg
 
__NR_ªcvmsg


	)

1790 #ifde‡
__NR_ªm≠_fûe_∑ges


1791 
	#SYS_ªm≠_fûe_∑ges
 
__NR_ªm≠_fûe_∑ges


	)

1794 #ifde‡
__NR_ªmovex©å


1795 
	#SYS_ªmovex©å
 
__NR_ªmovex©å


	)

1798 #ifde‡
__NR_ª«me


1799 
	#SYS_ª«me
 
__NR_ª«me


	)

1802 #ifde‡
__NR_ª«mót


1803 
	#SYS_ª«mót
 
__NR_ª«mót


	)

1806 #ifde‡
__NR_ª«mót2


1807 
	#SYS_ª«mót2
 
__NR_ª«mót2


	)

1810 #ifde‡
__NR_ªque°_key


1811 
	#SYS_ªque°_key
 
__NR_ªque°_key


	)

1814 #ifde‡
__NR_ª°¨t_sysˇŒ


1815 
	#SYS_ª°¨t_sysˇŒ
 
__NR_ª°¨t_sysˇŒ


	)

1818 #ifde‡
__NR_riscv_Êush_iˇche


1819 
	#SYS_riscv_Êush_iˇche
 
__NR_riscv_Êush_iˇche


	)

1822 #ifde‡
__NR_rmdú


1823 
	#SYS_rmdú
 
__NR_rmdú


	)

1826 #ifde‡
__NR_r£q


1827 
	#SYS_r£q
 
__NR_r£q


	)

1830 #ifde‡
__NR_π_siga˘i⁄


1831 
	#SYS_π_siga˘i⁄
 
__NR_π_siga˘i⁄


	)

1834 #ifde‡
__NR_π_sig≥ndög


1835 
	#SYS_π_sig≥ndög
 
__NR_π_sig≥ndög


	)

1838 #ifde‡
__NR_π_sig¥ocmask


1839 
	#SYS_π_sig¥ocmask
 
__NR_π_sig¥ocmask


	)

1842 #ifde‡
__NR_π_sigqueueöfo


1843 
	#SYS_π_sigqueueöfo
 
__NR_π_sigqueueöfo


	)

1846 #ifde‡
__NR_π_sigªtu∫


1847 
	#SYS_π_sigªtu∫
 
__NR_π_sigªtu∫


	)

1850 #ifde‡
__NR_π_sigsu•íd


1851 
	#SYS_π_sigsu•íd
 
__NR_π_sigsu•íd


	)

1854 #ifde‡
__NR_π_sigtimedwaô


1855 
	#SYS_π_sigtimedwaô
 
__NR_π_sigtimedwaô


	)

1858 #ifde‡
__NR_π_sigtimedwaô_time64


1859 
	#SYS_π_sigtimedwaô_time64
 
__NR_π_sigtimedwaô_time64


	)

1862 #ifde‡
__NR_π_tgsigqueueöfo


1863 
	#SYS_π_tgsigqueueöfo
 
__NR_π_tgsigqueueöfo


	)

1866 #ifde‡
__NR_πas


1867 
	#SYS_πas
 
__NR_πas


	)

1870 #ifde‡
__NR_s390_gu¨ded_°‹age


1871 
	#SYS_s390_gu¨ded_°‹age
 
__NR_s390_gu¨ded_°‹age


	)

1874 #ifde‡
__NR_s390_pci_mmio_ªad


1875 
	#SYS_s390_pci_mmio_ªad
 
__NR_s390_pci_mmio_ªad


	)

1878 #ifde‡
__NR_s390_pci_mmio_wrôe


1879 
	#SYS_s390_pci_mmio_wrôe
 
__NR_s390_pci_mmio_wrôe


	)

1882 #ifde‡
__NR_s390_ru¡ime_ö°r


1883 
	#SYS_s390_ru¡ime_ö°r
 
__NR_s390_ru¡ime_ö°r


	)

1886 #ifde‡
__NR_s390_°hyi


1887 
	#SYS_s390_°hyi
 
__NR_s390_°hyi


	)

1890 #ifde‡
__NR_sched_gë_afföôy


1891 
	#SYS_sched_gë_afföôy
 
__NR_sched_gë_afföôy


	)

1894 #ifde‡
__NR_sched_gë_¥i‹ôy_max


1895 
	#SYS_sched_gë_¥i‹ôy_max
 
__NR_sched_gë_¥i‹ôy_max


	)

1898 #ifde‡
__NR_sched_gë_¥i‹ôy_mö


1899 
	#SYS_sched_gë_¥i‹ôy_mö
 
__NR_sched_gë_¥i‹ôy_mö


	)

1902 #ifde‡
__NR_sched_gëafföôy


1903 
	#SYS_sched_gëafföôy
 
__NR_sched_gëafföôy


	)

1906 #ifde‡
__NR_sched_gë©å


1907 
	#SYS_sched_gë©å
 
__NR_sched_gë©å


	)

1910 #ifde‡
__NR_sched_gë∑øm


1911 
	#SYS_sched_gë∑øm
 
__NR_sched_gë∑øm


	)

1914 #ifde‡
__NR_sched_gëscheduÀr


1915 
	#SYS_sched_gëscheduÀr
 
__NR_sched_gëscheduÀr


	)

1918 #ifde‡
__NR_sched_º_gë_öãrvÆ


1919 
	#SYS_sched_º_gë_öãrvÆ
 
__NR_sched_º_gë_öãrvÆ


	)

1922 #ifde‡
__NR_sched_º_gë_öãrvÆ_time64


1923 
	#SYS_sched_º_gë_öãrvÆ_time64
 
__NR_sched_º_gë_öãrvÆ_time64


	)

1926 #ifde‡
__NR_sched_£t_afföôy


1927 
	#SYS_sched_£t_afföôy
 
__NR_sched_£t_afföôy


	)

1930 #ifde‡
__NR_sched_£èfföôy


1931 
	#SYS_sched_£èfföôy
 
__NR_sched_£èfföôy


	)

1934 #ifde‡
__NR_sched_£èâr


1935 
	#SYS_sched_£èâr
 
__NR_sched_£èâr


	)

1938 #ifde‡
__NR_sched_£ç¨am


1939 
	#SYS_sched_£ç¨am
 
__NR_sched_£ç¨am


	)

1942 #ifde‡
__NR_sched_£tscheduÀr


1943 
	#SYS_sched_£tscheduÀr
 
__NR_sched_£tscheduÀr


	)

1946 #ifde‡
__NR_sched_yõld


1947 
	#SYS_sched_yõld
 
__NR_sched_yõld


	)

1950 #ifde‡
__NR_£ccomp


1951 
	#SYS_£ccomp
 
__NR_£ccomp


	)

1954 #ifde‡
__NR_£curôy


1955 
	#SYS_£curôy
 
__NR_£curôy


	)

1958 #ifde‡
__NR_£À˘


1959 
	#SYS_£À˘
 
__NR_£À˘


	)

1962 #ifde‡
__NR_£m˘l


1963 
	#SYS_£m˘l
 
__NR_£m˘l


	)

1966 #ifde‡
__NR_£mgë


1967 
	#SYS_£mgë
 
__NR_£mgë


	)

1970 #ifde‡
__NR_£m›


1971 
	#SYS_£m›
 
__NR_£m›


	)

1974 #ifde‡
__NR_£mtimed›


1975 
	#SYS_£mtimed›
 
__NR_£mtimed›


	)

1978 #ifde‡
__NR_£mtimed›_time64


1979 
	#SYS_£mtimed›_time64
 
__NR_£mtimed›_time64


	)

1982 #ifde‡
__NR_£nd


1983 
	#SYS_£nd
 
__NR_£nd


	)

1986 #ifde‡
__NR_£ndfûe


1987 
	#SYS_£ndfûe
 
__NR_£ndfûe


	)

1990 #ifde‡
__NR_£ndfûe64


1991 
	#SYS_£ndfûe64
 
__NR_£ndfûe64


	)

1994 #ifde‡
__NR_£ndmmsg


1995 
	#SYS_£ndmmsg
 
__NR_£ndmmsg


	)

1998 #ifde‡
__NR_£ndmsg


1999 
	#SYS_£ndmsg
 
__NR_£ndmsg


	)

2002 #ifde‡
__NR_£ndto


2003 
	#SYS_£ndto
 
__NR_£ndto


	)

2006 #ifde‡
__NR_£t_mempﬁicy


2007 
	#SYS_£t_mempﬁicy
 
__NR_£t_mempﬁicy


	)

2010 #ifde‡
__NR_£t_robu°_li°


2011 
	#SYS_£t_robu°_li°
 
__NR_£t_robu°_li°


	)

2014 #ifde‡
__NR_£t_thªad_¨ó


2015 
	#SYS_£t_thªad_¨ó
 
__NR_£t_thªad_¨ó


	)

2018 #ifde‡
__NR_£t_tid_addªss


2019 
	#SYS_£t_tid_addªss
 
__NR_£t_tid_addªss


	)

2022 #ifde‡
__NR_£t_és


2023 
	#SYS_£t_és
 
__NR_£t_és


	)

2026 #ifde‡
__NR_£tdomaö«me


2027 
	#SYS_£tdomaö«me
 
__NR_£tdomaö«me


	)

2030 #ifde‡
__NR_£tfsgid


2031 
	#SYS_£tfsgid
 
__NR_£tfsgid


	)

2034 #ifde‡
__NR_£tfsgid32


2035 
	#SYS_£tfsgid32
 
__NR_£tfsgid32


	)

2038 #ifde‡
__NR_£tfsuid


2039 
	#SYS_£tfsuid
 
__NR_£tfsuid


	)

2042 #ifde‡
__NR_£tfsuid32


2043 
	#SYS_£tfsuid32
 
__NR_£tfsuid32


	)

2046 #ifde‡
__NR_£tgid


2047 
	#SYS_£tgid
 
__NR_£tgid


	)

2050 #ifde‡
__NR_£tgid32


2051 
	#SYS_£tgid32
 
__NR_£tgid32


	)

2054 #ifde‡
__NR_£tgroups


2055 
	#SYS_£tgroups
 
__NR_£tgroups


	)

2058 #ifde‡
__NR_£tgroups32


2059 
	#SYS_£tgroups32
 
__NR_£tgroups32


	)

2062 #ifde‡
__NR_£th´


2063 
	#SYS_£th´
 
__NR_£th´


	)

2066 #ifde‡
__NR_£tho°«me


2067 
	#SYS_£tho°«me
 
__NR_£tho°«me


	)

2070 #ifde‡
__NR_£tôimî


2071 
	#SYS_£tôimî
 
__NR_£tôimî


	)

2074 #ifde‡
__NR_£äs


2075 
	#SYS_£äs
 
__NR_£äs


	)

2078 #ifde‡
__NR_£çgid


2079 
	#SYS_£çgid
 
__NR_£çgid


	)

2082 #ifde‡
__NR_£çgΩ


2083 
	#SYS_£çgΩ
 
__NR_£çgΩ


	)

2086 #ifde‡
__NR_£çri‹ôy


2087 
	#SYS_£çri‹ôy
 
__NR_£çri‹ôy


	)

2090 #ifde‡
__NR_£åegid


2091 
	#SYS_£åegid
 
__NR_£åegid


	)

2094 #ifde‡
__NR_£åegid32


2095 
	#SYS_£åegid32
 
__NR_£åegid32


	)

2098 #ifde‡
__NR_£åesgid


2099 
	#SYS_£åesgid
 
__NR_£åesgid


	)

2102 #ifde‡
__NR_£åesgid32


2103 
	#SYS_£åesgid32
 
__NR_£åesgid32


	)

2106 #ifde‡
__NR_£åesuid


2107 
	#SYS_£åesuid
 
__NR_£åesuid


	)

2110 #ifde‡
__NR_£åesuid32


2111 
	#SYS_£åesuid32
 
__NR_£åesuid32


	)

2114 #ifde‡
__NR_£åeuid


2115 
	#SYS_£åeuid
 
__NR_£åeuid


	)

2118 #ifde‡
__NR_£åeuid32


2119 
	#SYS_£åeuid32
 
__NR_£åeuid32


	)

2122 #ifde‡
__NR_£ålimô


2123 
	#SYS_£ålimô
 
__NR_£ålimô


	)

2126 #ifde‡
__NR_£tsid


2127 
	#SYS_£tsid
 
__NR_£tsid


	)

2130 #ifde‡
__NR_£tsock›t


2131 
	#SYS_£tsock›t
 
__NR_£tsock›t


	)

2134 #ifde‡
__NR_£âimeofday


2135 
	#SYS_£âimeofday
 
__NR_£âimeofday


	)

2138 #ifde‡
__NR_£tuid


2139 
	#SYS_£tuid
 
__NR_£tuid


	)

2142 #ifde‡
__NR_£tuid32


2143 
	#SYS_£tuid32
 
__NR_£tuid32


	)

2146 #ifde‡
__NR_£tx©å


2147 
	#SYS_£tx©å
 
__NR_£tx©å


	)

2150 #ifde‡
__NR_sgëmask


2151 
	#SYS_sgëmask
 
__NR_sgëmask


	)

2154 #ifde‡
__NR_shm©


2155 
	#SYS_shm©
 
__NR_shm©


	)

2158 #ifde‡
__NR_shm˘l


2159 
	#SYS_shm˘l
 
__NR_shm˘l


	)

2162 #ifde‡
__NR_shmdt


2163 
	#SYS_shmdt
 
__NR_shmdt


	)

2166 #ifde‡
__NR_shmgë


2167 
	#SYS_shmgë
 
__NR_shmgë


	)

2170 #ifde‡
__NR_shutdown


2171 
	#SYS_shutdown
 
__NR_shutdown


	)

2174 #ifde‡
__NR_siga˘i⁄


2175 
	#SYS_siga˘i⁄
 
__NR_siga˘i⁄


	)

2178 #ifde‡
__NR_sigÆt°ack


2179 
	#SYS_sigÆt°ack
 
__NR_sigÆt°ack


	)

2182 #ifde‡
__NR_sig«l


2183 
	#SYS_sig«l
 
__NR_sig«l


	)

2186 #ifde‡
__NR_sig«lfd


2187 
	#SYS_sig«lfd
 
__NR_sig«lfd


	)

2190 #ifde‡
__NR_sig«lfd4


2191 
	#SYS_sig«lfd4
 
__NR_sig«lfd4


	)

2194 #ifde‡
__NR_sig≥ndög


2195 
	#SYS_sig≥ndög
 
__NR_sig≥ndög


	)

2198 #ifde‡
__NR_sig¥ocmask


2199 
	#SYS_sig¥ocmask
 
__NR_sig¥ocmask


	)

2202 #ifde‡
__NR_sigªtu∫


2203 
	#SYS_sigªtu∫
 
__NR_sigªtu∫


	)

2206 #ifde‡
__NR_sigsu•íd


2207 
	#SYS_sigsu•íd
 
__NR_sigsu•íd


	)

2210 #ifde‡
__NR_sockë


2211 
	#SYS_sockë
 
__NR_sockë


	)

2214 #ifde‡
__NR_sockëˇŒ


2215 
	#SYS_sockëˇŒ
 
__NR_sockëˇŒ


	)

2218 #ifde‡
__NR_sockë∑ú


2219 
	#SYS_sockë∑ú
 
__NR_sockë∑ú


	)

2222 #ifde‡
__NR_•li˚


2223 
	#SYS_•li˚
 
__NR_•li˚


	)

2226 #ifde‡
__NR_•u_¸óã


2227 
	#SYS_•u_¸óã
 
__NR_•u_¸óã


	)

2230 #ifde‡
__NR_•u_run


2231 
	#SYS_•u_run
 
__NR_•u_run


	)

2234 #ifde‡
__NR_s£tmask


2235 
	#SYS_s£tmask
 
__NR_s£tmask


	)

2238 #ifde‡
__NR_°©


2239 
	#SYS_°©
 
__NR_°©


	)

2242 #ifde‡
__NR_°©64


2243 
	#SYS_°©64
 
__NR_°©64


	)

2246 #ifde‡
__NR_°©fs


2247 
	#SYS_°©fs
 
__NR_°©fs


	)

2250 #ifde‡
__NR_°©fs64


2251 
	#SYS_°©fs64
 
__NR_°©fs64


	)

2254 #ifde‡
__NR_°©x


2255 
	#SYS_°©x
 
__NR_°©x


	)

2258 #ifde‡
__NR_°ime


2259 
	#SYS_°ime
 
__NR_°ime


	)

2262 #ifde‡
__NR_°ty


2263 
	#SYS_°ty
 
__NR_°ty


	)

2266 #ifde‡
__NR_sub∑ge_¥Ÿ


2267 
	#SYS_sub∑ge_¥Ÿ
 
__NR_sub∑ge_¥Ÿ


	)

2270 #ifde‡
__NR_sw≠c⁄ãxt


2271 
	#SYS_sw≠c⁄ãxt
 
__NR_sw≠c⁄ãxt


	)

2274 #ifde‡
__NR_sw≠off


2275 
	#SYS_sw≠off
 
__NR_sw≠off


	)

2278 #ifde‡
__NR_sw≠⁄


2279 
	#SYS_sw≠⁄
 
__NR_sw≠⁄


	)

2282 #ifde‡
__NR_swôch_ídün


2283 
	#SYS_swôch_ídün
 
__NR_swôch_ídün


	)

2286 #ifde‡
__NR_symlök


2287 
	#SYS_symlök
 
__NR_symlök


	)

2290 #ifde‡
__NR_symlök©


2291 
	#SYS_symlök©
 
__NR_symlök©


	)

2294 #ifde‡
__NR_sync


2295 
	#SYS_sync
 
__NR_sync


	)

2298 #ifde‡
__NR_sync_fûe_ønge


2299 
	#SYS_sync_fûe_ønge
 
__NR_sync_fûe_ønge


	)

2302 #ifde‡
__NR_sync_fûe_ønge2


2303 
	#SYS_sync_fûe_ønge2
 
__NR_sync_fûe_ønge2


	)

2306 #ifde‡
__NR_syncfs


2307 
	#SYS_syncfs
 
__NR_syncfs


	)

2310 #ifde‡
__NR_sys_debug_£tc⁄ãxt


2311 
	#SYS_sys_debug_£tc⁄ãxt
 
__NR_sys_debug_£tc⁄ãxt


	)

2314 #ifde‡
__NR_sys_ïﬁl_¸óã


2315 
	#SYS_sys_ïﬁl_¸óã
 
__NR_sys_ïﬁl_¸óã


	)

2318 #ifde‡
__NR_sys_ïﬁl_˘l


2319 
	#SYS_sys_ïﬁl_˘l
 
__NR_sys_ïﬁl_˘l


	)

2322 #ifde‡
__NR_sys_ïﬁl_waô


2323 
	#SYS_sys_ïﬁl_waô
 
__NR_sys_ïﬁl_waô


	)

2326 #ifde‡
__NR_sysˇŒ


2327 
	#SYS_sysˇŒ
 
__NR_sysˇŒ


	)

2330 #ifde‡
__NR_sysfs


2331 
	#SYS_sysfs
 
__NR_sysfs


	)

2334 #ifde‡
__NR_sysöfo


2335 
	#SYS_sysöfo
 
__NR_sysöfo


	)

2338 #ifde‡
__NR_sy¶og


2339 
	#SYS_sy¶og
 
__NR_sy¶og


	)

2342 #ifde‡
__NR_sysmùs


2343 
	#SYS_sysmùs
 
__NR_sysmùs


	)

2346 #ifde‡
__NR_ãe


2347 
	#SYS_ãe
 
__NR_ãe


	)

2350 #ifde‡
__NR_tgkûl


2351 
	#SYS_tgkûl
 
__NR_tgkûl


	)

2354 #ifde‡
__NR_time


2355 
	#SYS_time
 
__NR_time


	)

2358 #ifde‡
__NR_timî_¸óã


2359 
	#SYS_timî_¸óã
 
__NR_timî_¸óã


	)

2362 #ifde‡
__NR_timî_dñëe


2363 
	#SYS_timî_dñëe
 
__NR_timî_dñëe


	)

2366 #ifde‡
__NR_timî_gëovîrun


2367 
	#SYS_timî_gëovîrun
 
__NR_timî_gëovîrun


	)

2370 #ifde‡
__NR_timî_gëtime


2371 
	#SYS_timî_gëtime
 
__NR_timî_gëtime


	)

2374 #ifde‡
__NR_timî_gëtime64


2375 
	#SYS_timî_gëtime64
 
__NR_timî_gëtime64


	)

2378 #ifde‡
__NR_timî_£âime


2379 
	#SYS_timî_£âime
 
__NR_timî_£âime


	)

2382 #ifde‡
__NR_timî_£âime64


2383 
	#SYS_timî_£âime64
 
__NR_timî_£âime64


	)

2386 #ifde‡
__NR_timîfd


2387 
	#SYS_timîfd
 
__NR_timîfd


	)

2390 #ifde‡
__NR_timîfd_¸óã


2391 
	#SYS_timîfd_¸óã
 
__NR_timîfd_¸óã


	)

2394 #ifde‡
__NR_timîfd_gëtime


2395 
	#SYS_timîfd_gëtime
 
__NR_timîfd_gëtime


	)

2398 #ifde‡
__NR_timîfd_gëtime64


2399 
	#SYS_timîfd_gëtime64
 
__NR_timîfd_gëtime64


	)

2402 #ifde‡
__NR_timîfd_£âime


2403 
	#SYS_timîfd_£âime
 
__NR_timîfd_£âime


	)

2406 #ifde‡
__NR_timîfd_£âime64


2407 
	#SYS_timîfd_£âime64
 
__NR_timîfd_£âime64


	)

2410 #ifde‡
__NR_times


2411 
	#SYS_times
 
__NR_times


	)

2414 #ifde‡
__NR_tkûl


2415 
	#SYS_tkûl
 
__NR_tkûl


	)

2418 #ifde‡
__NR_åunˇã


2419 
	#SYS_åunˇã
 
__NR_åunˇã


	)

2422 #ifde‡
__NR_åunˇã64


2423 
	#SYS_åunˇã64
 
__NR_åunˇã64


	)

2426 #ifde‡
__NR_tuxˇŒ


2427 
	#SYS_tuxˇŒ
 
__NR_tuxˇŒ


	)

2430 #ifde‡
__NR_ud·øp


2431 
	#SYS_ud·øp
 
__NR_ud·øp


	)

2434 #ifde‡
__NR_ugëæimô


2435 
	#SYS_ugëæimô
 
__NR_ugëæimô


	)

2438 #ifde‡
__NR_ulimô


2439 
	#SYS_ulimô
 
__NR_ulimô


	)

2442 #ifde‡
__NR_umask


2443 
	#SYS_umask
 
__NR_umask


	)

2446 #ifde‡
__NR_umou¡


2447 
	#SYS_umou¡
 
__NR_umou¡


	)

2450 #ifde‡
__NR_umou¡2


2451 
	#SYS_umou¡2
 
__NR_umou¡2


	)

2454 #ifde‡
__NR_u«me


2455 
	#SYS_u«me
 
__NR_u«me


	)

2458 #ifde‡
__NR_u∆ök


2459 
	#SYS_u∆ök
 
__NR_u∆ök


	)

2462 #ifde‡
__NR_u∆ök©


2463 
	#SYS_u∆ök©
 
__NR_u∆ök©


	)

2466 #ifde‡
__NR_unsh¨e


2467 
	#SYS_unsh¨e
 
__NR_unsh¨e


	)

2470 #ifde‡
__NR_u£lib


2471 
	#SYS_u£lib
 
__NR_u£lib


	)

2474 #ifde‡
__NR_u£rÁu…fd


2475 
	#SYS_u£rÁu…fd
 
__NR_u£rÁu…fd


	)

2478 #ifde‡
__NR_u§26


2479 
	#SYS_u§26
 
__NR_u§26


	)

2482 #ifde‡
__NR_u§32


2483 
	#SYS_u§32
 
__NR_u§32


	)

2486 #ifde‡
__NR_u°©


2487 
	#SYS_u°©
 
__NR_u°©


	)

2490 #ifde‡
__NR_utime


2491 
	#SYS_utime
 
__NR_utime


	)

2494 #ifde‡
__NR_utimíßt


2495 
	#SYS_utimíßt
 
__NR_utimíßt


	)

2498 #ifde‡
__NR_utimíßt_time64


2499 
	#SYS_utimíßt_time64
 
__NR_utimíßt_time64


	)

2502 #ifde‡
__NR_utimes


2503 
	#SYS_utimes
 
__NR_utimes


	)

2506 #ifde‡
__NR_uå≠_ö°Æl


2507 
	#SYS_uå≠_ö°Æl
 
__NR_uå≠_ö°Æl


	)

2510 #ifde‡
__NR_vf‹k


2511 
	#SYS_vf‹k
 
__NR_vf‹k


	)

2514 #ifde‡
__NR_vh™gup


2515 
	#SYS_vh™gup
 
__NR_vh™gup


	)

2518 #ifde‡
__NR_vm86


2519 
	#SYS_vm86
 
__NR_vm86


	)

2522 #ifde‡
__NR_vm86ﬁd


2523 
	#SYS_vm86ﬁd
 
__NR_vm86ﬁd


	)

2526 #ifde‡
__NR_vm•li˚


2527 
	#SYS_vm•li˚
 
__NR_vm•li˚


	)

2530 #ifde‡
__NR_v£rvî


2531 
	#SYS_v£rvî
 
__NR_v£rvî


	)

2534 #ifde‡
__NR_waô4


2535 
	#SYS_waô4
 
__NR_waô4


	)

2538 #ifde‡
__NR_waôid


2539 
	#SYS_waôid
 
__NR_waôid


	)

2542 #ifde‡
__NR_waôpid


2543 
	#SYS_waôpid
 
__NR_waôpid


	)

2546 #ifde‡
__NR_wrôe


2547 
	#SYS_wrôe
 
__NR_wrôe


	)

2550 #ifde‡
__NR_wrôev


2551 
	#SYS_wrôev
 
__NR_wrôev


	)

	@/usr/include/x86_64-linux-gnu/bits/syslog-ldbl.h

19 #i‚de‡
_SYS_SYSLOG_H


23 
	$__LDBL_REDIR_DECL
 (
sy¶og
)

25 #ifde‡
__USE_MISC


26 
	$__LDBL_REDIR_DECL
 (
vsy¶og
)

29 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


30 
	$__LDBL_REDIR2_DECL
 (
sy¶og_chk
)

32 #ifde‡
__USE_MISC


33 
	$__LDBL_REDIR2_DECL
 (
vsy¶og_chk
)

	@/usr/include/x86_64-linux-gnu/bits/syslog-path.h

19 #i‚de‡
_SYS_SYSLOG_H


23 #i‚de‡
_BITS_SYSLOG_PATH_H


24 
	#_BITS_SYSLOG_PATH_H
 1

	)

26 
	#_PATH_LOG
 "/dev/log"

	)

	@/usr/include/x86_64-linux-gnu/bits/syslog.h

19 #i‚de‡
_SYS_SYSLOG_H


24 
	$__sy¶og_chk
 (
__¥i
, 
__Êag
, c⁄° *
__fmt
, ...)

25 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

27 #ifde‡
__va_¨g_∑ck


28 
__f‹tify_fun˘i⁄
 

29 
	$sy¶og
 (
__¥i
, c⁄° *
__fmt
, ...)

31 
	`__sy¶og_chk
 (
__¥i
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

32 
	}
}

33 #ñi‡!
deföed
 
__˝lu•lus


34 
	#sy¶og
(
¥i
, ...) \

35 
	`__sy¶og_chk
 (
¥i
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

39 #ifde‡
__USE_MISC


40 
	$__vsy¶og_chk
 (
__¥i
, 
__Êag
, c⁄° *
__fmt
,

41 
__gnuc_va_li°
 
__≠
)

42 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

44 
__f‹tify_fun˘i⁄
 

45 
	$vsy¶og
 (
__¥i
, c⁄° *
__fmt
, 
__gnuc_va_li°
 
__≠
)

47 
	`__vsy¶og_chk
 (
__¥i
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

48 
	}
}

	@/usr/include/x86_64-linux-gnu/bits/sysmacros.h

19 #i‚de‡
_BITS_SYSMACROS_H


20 
	#_BITS_SYSMACROS_H
 1

	)

22 #i‚de‡
_SYS_SYSMACROS_H


36 
	#__SYSMACROS_DECLARE_MAJOR
(
DECL_TEMPL
) \

37 
	`DECL_TEMPL
(, 
maj‹
, (
__dev_t
 
__dev
))

	)

39 
	#__SYSMACROS_DEFINE_MAJOR
(
DECL_TEMPL
) \

40 
	`__SYSMACROS_DECLARE_MAJOR
 (
DECL_TEMPL
) \

42 
__maj‹
; \

43 
__maj‹
 = ((
__dev
 & (
__dev_t
) 0x00000000000fff00u) >> 8); \

44 
__maj‹
 |((
__dev
 & (
__dev_t
) 0xfffff00000000000u) >> 32); \

45  
__maj‹
; \

46 }

	)

48 
	#__SYSMACROS_DECLARE_MINOR
(
DECL_TEMPL
) \

49 
	`DECL_TEMPL
(, 
mö‹
, (
__dev_t
 
__dev
))

	)

51 
	#__SYSMACROS_DEFINE_MINOR
(
DECL_TEMPL
) \

52 
	`__SYSMACROS_DECLARE_MINOR
 (
DECL_TEMPL
) \

54 
__mö‹
; \

55 
__mö‹
 = ((
__dev
 & (
__dev_t
) 0x00000000000000ffu) >> 0); \

56 
__mö‹
 |((
__dev
 & (
__dev_t
) 0x00000ffffff00000u) >> 12); \

57  
__mö‹
; \

58 }

	)

60 
	#__SYSMACROS_DECLARE_MAKEDEV
(
DECL_TEMPL
) \

61 
	`DECL_TEMPL
(
__dev_t
, 
makedev
, (
__maj‹
, 
__mö‹
))

	)

63 
	#__SYSMACROS_DEFINE_MAKEDEV
(
DECL_TEMPL
) \

64 
	`__SYSMACROS_DECLARE_MAKEDEV
 (
DECL_TEMPL
) \

66 
__dev_t
 
__dev
; \

67 
__dev
 = (((
__dev_t
Ë(
__maj‹
 & 0x00000fffu)) << 8); \

68 
__dev
 |(((
__dev_t
Ë(
__maj‹
 & 0xfffff000u)) << 32); \

69 
__dev
 |(((
__dev_t
Ë(
__mö‹
 & 0x000000ffu)) << 0); \

70 
__dev
 |(((
__dev_t
Ë(
__mö‹
 & 0xffffff00u)) << 12); \

71  
__dev
; \

72 }

	)

	@/usr/include/x86_64-linux-gnu/bits/termios-baud.h

19 #i‚de‡
_TERMIOS_H


23 #ifde‡
__USE_MISC


24 
	#CBAUD
 000000010017

	)

25 
	#CBAUDEX
 000000010000

	)

27 
	#CIBAUD
 002003600000

	)

28 
	#CMSPAR
 010000000000

	)

29 
	#CRTSCTS
 020000000000

	)

33 
	#B57600
 0010001

	)

34 
	#B115200
 0010002

	)

35 
	#B230400
 0010003

	)

36 
	#B460800
 0010004

	)

37 
	#B500000
 0010005

	)

38 
	#B576000
 0010006

	)

39 
	#B921600
 0010007

	)

40 
	#B1000000
 0010010

	)

41 
	#B1152000
 0010011

	)

42 
	#B1500000
 0010012

	)

43 
	#B2000000
 0010013

	)

44 
	#B2500000
 0010014

	)

45 
	#B3000000
 0010015

	)

46 
	#B3500000
 0010016

	)

47 
	#B4000000
 0010017

	)

48 
	#__MAX_BAUD
 
B4000000


	)

	@/usr/include/x86_64-linux-gnu/bits/termios-c_cc.h

19 #i‚de‡
_TERMIOS_H


24 
	#VINTR
 0

	)

25 
	#VQUIT
 1

	)

26 
	#VERASE
 2

	)

27 
	#VKILL
 3

	)

28 
	#VEOF
 4

	)

29 
	#VTIME
 5

	)

30 
	#VMIN
 6

	)

31 
	#VSWTC
 7

	)

32 
	#VSTART
 8

	)

33 
	#VSTOP
 9

	)

34 
	#VSUSP
 10

	)

35 
	#VEOL
 11

	)

36 
	#VREPRINT
 12

	)

37 
	#VDISCARD
 13

	)

38 
	#VWERASE
 14

	)

39 
	#VLNEXT
 15

	)

40 
	#VEOL2
 16

	)

	@/usr/include/x86_64-linux-gnu/bits/termios-c_cflag.h

19 #i‚de‡
_TERMIOS_H


24 
	#CSIZE
 0000060

	)

25 
	#CS5
 0000000

	)

26 
	#CS6
 0000020

	)

27 
	#CS7
 0000040

	)

28 
	#CS8
 0000060

	)

29 
	#CSTOPB
 0000100

	)

30 
	#CREAD
 0000200

	)

31 
	#PARENB
 0000400

	)

32 
	#PARODD
 0001000

	)

33 
	#HUPCL
 0002000

	)

34 
	#CLOCAL
 0004000

	)

	@/usr/include/x86_64-linux-gnu/bits/termios-c_iflag.h

19 #i‚de‡
_TERMIOS_H


24 
	#IGNBRK
 0000001

	)

25 
	#BRKINT
 0000002

	)

26 
	#IGNPAR
 0000004

	)

27 
	#PARMRK
 0000010

	)

28 
	#INPCK
 0000020

	)

29 
	#ISTRIP
 0000040

	)

30 
	#INLCR
 0000100

	)

31 
	#IGNCR
 0000200

	)

32 
	#ICRNL
 0000400

	)

33 
	#IUCLC
 0001000

	)

35 
	#IXON
 0002000

	)

36 
	#IXANY
 0004000

	)

37 
	#IXOFF
 0010000

	)

38 
	#IMAXBEL
 0020000

	)

40 
	#IUTF8
 0040000

	)

	@/usr/include/x86_64-linux-gnu/bits/termios-c_lflag.h

19 #i‚de‡
_TERMIOS_H


24 
	#ISIG
 0000001

	)

25 
	#ICANON
 0000002

	)

26 #i‡
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

27 
	#XCASE
 0000004

	)

29 
	#ECHO
 0000010

	)

30 
	#ECHOE
 0000020

	)

32 
	#ECHOK
 0000040

	)

33 
	#ECHONL
 0000100

	)

34 
	#NOFLSH
 0000200

	)

35 
	#TOSTOP
 0000400

	)

36 #ifde‡
__USE_MISC


37 
	#ECHOCTL
 0001000

	)

42 
	#ECHOPRT
 0002000

	)

45 
	#ECHOKE
 0004000

	)

48 
	#FLUSHO
 0010000

	)

50 
	#PENDIN
 0040000

	)

54 
	#IEXTEN
 0100000

	)

56 #ifde‡
__USE_MISC


57 
	#EXTPROC
 0200000

	)

	@/usr/include/x86_64-linux-gnu/bits/termios-c_oflag.h

19 #i‚de‡
_TERMIOS_H


24 
	#OPOST
 0000001

	)

25 
	#OLCUC
 0000002

	)

27 
	#ONLCR
 0000004

	)

28 
	#OCRNL
 0000010

	)

29 
	#ONOCR
 0000020

	)

30 
	#ONLRET
 0000040

	)

31 
	#OFILL
 0000100

	)

32 
	#OFDEL
 0000200

	)

33 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


34 
	#NLDLY
 0000400

	)

35 
	#NL0
 0000000

	)

36 
	#NL1
 0000400

	)

37 
	#CRDLY
 0003000

	)

38 
	#CR0
 0000000

	)

39 
	#CR1
 0001000

	)

40 
	#CR2
 0002000

	)

41 
	#CR3
 0003000

	)

42 
	#TABDLY
 0014000

	)

43 
	#TAB0
 0000000

	)

44 
	#TAB1
 0004000

	)

45 
	#TAB2
 0010000

	)

46 
	#TAB3
 0014000

	)

47 
	#BSDLY
 0020000

	)

48 
	#BS0
 0000000

	)

49 
	#BS1
 0020000

	)

50 
	#FFDLY
 0100000

	)

51 
	#FF0
 0000000

	)

52 
	#FF1
 0100000

	)

55 
	#VTDLY
 0040000

	)

56 
	#VT0
 0000000

	)

57 
	#VT1
 0040000

	)

59 #ifde‡
__USE_MISC


60 
	#XTABS
 0014000

	)

	@/usr/include/x86_64-linux-gnu/bits/termios-misc.h

19 #i‚de‡
_TERMIOS_H


	@/usr/include/x86_64-linux-gnu/bits/termios-struct.h

19 #i‚de‡
_TERMIOS_H


23 
	#NCCS
 32

	)

24 
	sãrmios


26 
tcÊag_t
 
	mc_iÊag
;

27 
tcÊag_t
 
	mc_oÊag
;

28 
tcÊag_t
 
	mc_cÊag
;

29 
tcÊag_t
 
	mc_lÊag
;

30 
cc_t
 
	mc_löe
;

31 
cc_t
 
	mc_cc
[
NCCS
];

32 
•ìd_t
 
	mc_i•ìd
;

33 
•ìd_t
 
	mc_o•ìd
;

34 
	#_HAVE_STRUCT_TERMIOS_C_ISPEED
 1

	)

35 
	#_HAVE_STRUCT_TERMIOS_C_OSPEED
 1

	)

	@/usr/include/x86_64-linux-gnu/bits/termios-tcflow.h

19 #i‚de‡
_TERMIOS_H


24 
	#TCSANOW
 0

	)

25 
	#TCSADRAIN
 1

	)

26 
	#TCSAFLUSH
 2

	)

	@/usr/include/x86_64-linux-gnu/bits/termios.h

19 #i‚de‡
_TERMIOS_H


23 
	tcc_t
;

24 
	t•ìd_t
;

25 
	ttcÊag_t
;

27 
	~<bôs/ãrmios-°ru˘.h
>

28 
	~<bôs/ãrmios-c_cc.h
>

29 
	~<bôs/ãrmios-c_iÊag.h
>

30 
	~<bôs/ãrmios-c_oÊag.h
>

33 
	#B0
 0000000

	)

34 
	#B50
 0000001

	)

35 
	#B75
 0000002

	)

36 
	#B110
 0000003

	)

37 
	#B134
 0000004

	)

38 
	#B150
 0000005

	)

39 
	#B200
 0000006

	)

40 
	#B300
 0000007

	)

41 
	#B600
 0000010

	)

42 
	#B1200
 0000011

	)

43 
	#B1800
 0000012

	)

44 
	#B2400
 0000013

	)

45 
	#B4800
 0000014

	)

46 
	#B9600
 0000015

	)

47 
	#B19200
 0000016

	)

48 
	#B38400
 0000017

	)

49 #ifde‡
__USE_MISC


50 
	#EXTA
 
B19200


	)

51 
	#EXTB
 
B38400


	)

53 
	~<bôs/ãrmios-baud.h
>

55 
	~<bôs/ãrmios-c_cÊag.h
>

56 
	~<bôs/ãrmios-c_lÊag.h
>

58 #ifde‡
__USE_MISC


60 
	#TIOCSER_TEMT
 0x01

	)

64 
	#TCOOFF
 0

	)

65 
	#TCOON
 1

	)

66 
	#TCIOFF
 2

	)

67 
	#TCION
 3

	)

70 
	#TCIFLUSH
 0

	)

71 
	#TCOFLUSH
 1

	)

72 
	#TCIOFLUSH
 2

	)

74 
	~<bôs/ãrmios-tcÊow.h
>

76 
	~<bôs/ãrmios-misc.h
>

	@/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h

19 #i‚de‡
_THREAD_SHARED_TYPES_H


20 
	#_THREAD_SHARED_TYPES_H
 1

	)

44 
	~<bôs/±hªadty≥s-¨ch.h
>

46 
	~<bôs/©omic_wide_cou¡î.h
>

51 
	s__±hªad_öã∫Æ_li°


53 
__±hªad_öã∫Æ_li°
 *
	m__¥ev
;

54 
__±hªad_öã∫Æ_li°
 *
	m__√xt
;

55 } 
	t__±hªad_li°_t
;

57 
	s__±hªad_öã∫Æ_¶i°


59 
__±hªad_öã∫Æ_¶i°
 *
	m__√xt
;

60 } 
	t__±hªad_¶i°_t
;

76 
	~<bôs/°ru˘_muãx.h
>

89 
	~<bôs/°ru˘_rwlock.h
>

94 
	s__±hªad_c⁄d_s


96 
__©omic_wide_cou¡î
 
	m__w£q
;

97 
__©omic_wide_cou¡î
 
	m__g1_°¨t
;

98 
	m__g_ªfs
[2] 
	m__LOCK_ALIGNMENT
;

99 
	m__g_size
[2];

100 
	m__g1_‹ig_size
;

101 
	m__wªfs
;

102 
	m__g_sig«ls
[2];

105 
	t__tss_t
;

106 
	t__thrd_t
;

110 
__d©a
 
	m__ONCE_ALIGNMENT
;

111 } 
	t__⁄˚_Êag
;

113 
	#__ONCE_FLAG_INIT
 { 0 }

	)

	@/usr/include/x86_64-linux-gnu/bits/time.h

23 #i‚de‡
_BITS_TIME_H


24 
	#_BITS_TIME_H
 1

	)

26 
	~<bôs/ty≥s.h
>

34 
	#CLOCKS_PER_SEC
 ((
__˛ock_t
Ë1000000)

	)

36 #i‡(!
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_POSIX
) \

37 && !
deföed
 
__USE_XOPEN2K


40 
__sysc⁄f
 ();

41 
	#CLK_TCK
 ((
__˛ock_t
Ë
	`__sysc⁄f
 (2)Ë

	)

44 #ifde‡
__USE_POSIX199309


46 
	#CLOCK_REALTIME
 0

	)

48 
	#CLOCK_MONOTONIC
 1

	)

50 
	#CLOCK_PROCESS_CPUTIME_ID
 2

	)

52 
	#CLOCK_THREAD_CPUTIME_ID
 3

	)

54 
	#CLOCK_MONOTONIC_RAW
 4

	)

56 
	#CLOCK_REALTIME_COARSE
 5

	)

58 
	#CLOCK_MONOTONIC_COARSE
 6

	)

60 
	#CLOCK_BOOTTIME
 7

	)

62 
	#CLOCK_REALTIME_ALARM
 8

	)

64 
	#CLOCK_BOOTTIME_ALARM
 9

	)

66 
	#CLOCK_TAI
 11

	)

69 
	#TIMER_ABSTIME
 1

	)

72 #ifde‡
__USE_GNU


73 
	~<bôs/timex.h
>

75 
__BEGIN_DECLS


78 
	$˛ock_adjtime
 (
__˛ockid_t
 
__˛ock_id
, 
timex
 *
__utx
Ë
__THROW
;

80 #ifde‡
__USE_TIME_BITS64


81 #i‡
	`deföed
(
__REDIRECT_NTH
)

82 
	`__REDIRECT_NTH
 (
˛ock_adjtime
, (
__˛ockid_t
 
__˛ock_id
,

83 
timex
 *
__utx
),

84 
__˛ock_adjtime64
);

86 
	#˛ock_adjtime
 
__˛ock_adjtime64


	)

90 
__END_DECLS


	@/usr/include/x86_64-linux-gnu/bits/time64.h

19 #i‚de‡
_BITS_TYPES_H


23 #i‚def 
_BITS_TIME64_H


24 
	#_BITS_TIME64_H
 1

	)

28 #i‡
__TIMESIZE
 == 64

30 
	#__TIME64_T_TYPE
 
__TIME_T_TYPE


	)

33 
	#__TIME64_T_TYPE
 
__SQUAD_TYPE


	)

	@/usr/include/x86_64-linux-gnu/bits/timerfd.h

18 #i‚def 
_SYS_TIMERFD_H


25 
	mTFD_CLOEXEC
 = 02000000,

26 
	#TFD_CLOEXEC
 
TFD_CLOEXEC


	)

27 
	mTFD_NONBLOCK
 = 00004000

28 
	#TFD_NONBLOCK
 
TFD_NONBLOCK


	)

	@/usr/include/x86_64-linux-gnu/bits/timesize.h

19 
	~<bôs/w‹dsize.h
>

21 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


23 
	#__TIMESIZE
 64

	)

26 
	#__TIMESIZE
 
__WORDSIZE


	)

	@/usr/include/x86_64-linux-gnu/bits/timex.h

18 #i‚def 
_BITS_TIMEX_H


19 
	#_BITS_TIMEX_H
 1

	)

21 
	~<bôs/ty≥s.h
>

22 
	~<bôs/ty≥s/°ru˘_timevÆ.h
>

26 
	stimex


28 #i‡
deföed
 
__USE_TIME_BITS64
 || (
__TIMESIZE
 =64 && 
__WORDSIZE
 == 32)

29 
	mmodes
;

31 
	moff£t
;

32 
	m‰eq
;

33 
	mmaxîr‹
;

34 
	me°îr‹
;

35 
	m°©us
;

37 
	mc⁄°™t
;

38 
	m¥ecisi⁄
;

39 
	mtﬁî™˚
;

40 
timevÆ
 
	mtime
;

41 
	mtick
;

42 
	mµs‰eq
;

43 
	mjôãr
;

44 
	mshi·
;

46 
	m°abû
;

47 
	mjô˙t
;

48 
	mˇl˙t
;

49 
	mîr˙t
;

50 
	m°b˙t
;

52 
	mèi
;

58 
	mmodes
;

59 
__sysˇŒ_¶⁄g_t
 
	moff£t
;

60 
__sysˇŒ_¶⁄g_t
 
	m‰eq
;

61 
__sysˇŒ_¶⁄g_t
 
	mmaxîr‹
;

62 
__sysˇŒ_¶⁄g_t
 
	me°îr‹
;

63 
	m°©us
;

64 
__sysˇŒ_¶⁄g_t
 
	mc⁄°™t
;

65 
__sysˇŒ_¶⁄g_t
 
	m¥ecisi⁄
;

66 
__sysˇŒ_¶⁄g_t
 
	mtﬁî™˚
;

67 
timevÆ
 
	mtime
;

68 
__sysˇŒ_¶⁄g_t
 
	mtick
;

69 
__sysˇŒ_¶⁄g_t
 
	mµs‰eq
;

70 
__sysˇŒ_¶⁄g_t
 
	mjôãr
;

71 
	mshi·
;

72 
__sysˇŒ_¶⁄g_t
 
	m°abû
;

73 
__sysˇŒ_¶⁄g_t
 
	mjô˙t
;

74 
__sysˇŒ_¶⁄g_t
 
	mˇl˙t
;

75 
__sysˇŒ_¶⁄g_t
 
	mîr˙t
;

76 
__sysˇŒ_¶⁄g_t
 
	m°b˙t
;

78 
	mèi
;

88 
	#ADJ_OFFSET
 0x0001

	)

89 
	#ADJ_FREQUENCY
 0x0002

	)

90 
	#ADJ_MAXERROR
 0x0004

	)

91 
	#ADJ_ESTERROR
 0x0008

	)

92 
	#ADJ_STATUS
 0x0010

	)

93 
	#ADJ_TIMECONST
 0x0020

	)

94 
	#ADJ_TAI
 0x0080

	)

95 
	#ADJ_SETOFFSET
 0x0100

	)

96 
	#ADJ_MICRO
 0x1000

	)

97 
	#ADJ_NANO
 0x2000

	)

98 
	#ADJ_TICK
 0x4000

	)

99 
	#ADJ_OFFSET_SINGLESHOT
 0x8001

	)

100 
	#ADJ_OFFSET_SS_READ
 0xa001

	)

103 
	#MOD_OFFSET
 
ADJ_OFFSET


	)

104 
	#MOD_FREQUENCY
 
ADJ_FREQUENCY


	)

105 
	#MOD_MAXERROR
 
ADJ_MAXERROR


	)

106 
	#MOD_ESTERROR
 
ADJ_ESTERROR


	)

107 
	#MOD_STATUS
 
ADJ_STATUS


	)

108 
	#MOD_TIMECONST
 
ADJ_TIMECONST


	)

109 
	#MOD_CLKB
 
ADJ_TICK


	)

110 
	#MOD_CLKA
 
ADJ_OFFSET_SINGLESHOT


	)

111 
	#MOD_TAI
 
ADJ_TAI


	)

112 
	#MOD_MICRO
 
ADJ_MICRO


	)

113 
	#MOD_NANO
 
ADJ_NANO


	)

117 
	#STA_PLL
 0x0001

	)

118 
	#STA_PPSFREQ
 0x0002

	)

119 
	#STA_PPSTIME
 0x0004

	)

120 
	#STA_FLL
 0x0008

	)

122 
	#STA_INS
 0x0010

	)

123 
	#STA_DEL
 0x0020

	)

124 
	#STA_UNSYNC
 0x0040

	)

125 
	#STA_FREQHOLD
 0x0080

	)

127 
	#STA_PPSSIGNAL
 0x0100

	)

128 
	#STA_PPSJITTER
 0x0200

	)

129 
	#STA_PPSWANDER
 0x0400

	)

130 
	#STA_PPSERROR
 0x0800

	)

132 
	#STA_CLOCKERR
 0x1000

	)

133 
	#STA_NANO
 0x2000

	)

134 
	#STA_MODE
 0x4000

	)

135 
	#STA_CLK
 0x8000

	)

138 
	#STA_RONLY
 (
STA_PPSSIGNAL
 | 
STA_PPSJITTER
 | 
STA_PPSWANDER
 \

139 | 
STA_PPSERROR
 | 
STA_CLOCKERR
 | 
STA_NANO
 | 
STA_MODE
 | 
STA_CLK
)

	)

	@/usr/include/x86_64-linux-gnu/bits/types.h

23 #i‚def 
_BITS_TYPES_H


24 
	#_BITS_TYPES_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/w‹dsize.h
>

28 
	~<bôs/timesize.h
>

31 
	t__u_ch¨
;

32 
	t__u_sh‹t
;

33 
	t__u_öt
;

34 
	t__u_l⁄g
;

37 sig√d 
	t__öt8_t
;

38 
	t__uöt8_t
;

39 sig√d 
	t__öt16_t
;

40 
	t__uöt16_t
;

41 sig√d 
	t__öt32_t
;

42 
	t__uöt32_t
;

43 #i‡
__WORDSIZE
 == 64

44 sig√d 
	t__öt64_t
;

45 
	t__uöt64_t
;

47 
__exãnsi⁄__
 sig√d 
	t__öt64_t
;

48 
__exãnsi⁄__
 
	t__uöt64_t
;

52 
__öt8_t
 
	t__öt_Àa°8_t
;

53 
__uöt8_t
 
	t__uöt_Àa°8_t
;

54 
__öt16_t
 
	t__öt_Àa°16_t
;

55 
__uöt16_t
 
	t__uöt_Àa°16_t
;

56 
__öt32_t
 
	t__öt_Àa°32_t
;

57 
__uöt32_t
 
	t__uöt_Àa°32_t
;

58 
__öt64_t
 
	t__öt_Àa°64_t
;

59 
__uöt64_t
 
	t__uöt_Àa°64_t
;

62 #i‡
__WORDSIZE
 == 64

63 
	t__quad_t
;

64 
	t__u_quad_t
;

66 
__exãnsi⁄__
 
	t__quad_t
;

67 
__exãnsi⁄__
 
	t__u_quad_t
;

71 #i‡
__WORDSIZE
 == 64

72 
	t__ötmax_t
;

73 
	t__uötmax_t
;

75 
__exãnsi⁄__
 
	t__ötmax_t
;

76 
__exãnsi⁄__
 
	t__uötmax_t
;

109 
	#__S16_TYPE
 

	)

110 
	#__U16_TYPE
 

	)

111 
	#__S32_TYPE
 

	)

112 
	#__U32_TYPE
 

	)

113 
	#__SLONGWORD_TYPE
 

	)

114 
	#__ULONGWORD_TYPE
 

	)

115 #i‡
__WORDSIZE
 == 32

116 
	#__SQUAD_TYPE
 
__öt64_t


	)

117 
	#__UQUAD_TYPE
 
__uöt64_t


	)

118 
	#__SWORD_TYPE
 

	)

119 
	#__UWORD_TYPE
 

	)

120 
	#__SLONG32_TYPE
 

	)

121 
	#__ULONG32_TYPE
 

	)

122 
	#__S64_TYPE
 
__öt64_t


	)

123 
	#__U64_TYPE
 
__uöt64_t


	)

126 
	#__STD_TYPE
 
__exãnsi⁄__
 

	)

127 #ñi‡
__WORDSIZE
 == 64

128 
	t__SQUAD_TYPE
 

	)

129 
	t__UQUAD_TYPE
 

	)

130 
	t__SWORD_TYPE
 

	)

131 
	t__UWORD_TYPE
 

	)

132 
	t__SLONG32_TYPE
 

	)

133 
	t__ULONG32_TYPE
 

	)

134 
	t__S64_TYPE
 

	)

135 
	t__U64_TYPE
 

	)

137 
	t__STD_TYPE
 

	)

141 
	~<bôs/ty≥sizes.h
>

142 
	~<bôs/time64.h
>

145 
__STD_TYPE
 
	t__DEV_T_TYPE
 
	t__dev_t
;

146 
__STD_TYPE
 
__UID_T_TYPE
 
	g__uid_t
;

147 
__STD_TYPE
 
__GID_T_TYPE
 
	g__gid_t
;

148 
__STD_TYPE
 
__INO_T_TYPE
 
	g__öo_t
;

149 
__STD_TYPE
 
__INO64_T_TYPE
 
	g__öo64_t
;

150 
__STD_TYPE
 
__MODE_T_TYPE
 
	g__mode_t
;

151 
__STD_TYPE
 
__NLINK_T_TYPE
 
	g__∆ök_t
;

152 
__STD_TYPE
 
__OFF_T_TYPE
 
	g__off_t
;

153 
__STD_TYPE
 
__OFF64_T_TYPE
 
	g__off64_t
;

154 
__STD_TYPE
 
__PID_T_TYPE
 
	g__pid_t
;

155 
__STD_TYPE
 
__FSID_T_TYPE
 
	g__fsid_t
;

156 
__STD_TYPE
 
__CLOCK_T_TYPE
 
	g__˛ock_t
;

157 
__STD_TYPE
 
__RLIM_T_TYPE
 
	g__æim_t
;

158 
__STD_TYPE
 
__RLIM64_T_TYPE
 
	g__æim64_t
;

159 
__STD_TYPE
 
__ID_T_TYPE
 
	g__id_t
;

160 
__STD_TYPE
 
__TIME_T_TYPE
 
	g__time_t
;

161 
__STD_TYPE
 
__USECONDS_T_TYPE
 
	g__u£c⁄ds_t
;

162 
__STD_TYPE
 
__SUSECONDS_T_TYPE
 
	g__su£c⁄ds_t
;

163 
__STD_TYPE
 
__SUSECONDS64_T_TYPE
 
	g__su£c⁄ds64_t
;

165 
__STD_TYPE
 
__DADDR_T_TYPE
 
	g__daddr_t
;

166 
__STD_TYPE
 
__KEY_T_TYPE
 
	g__key_t
;

169 
__STD_TYPE
 
__CLOCKID_T_TYPE
 
	g__˛ockid_t
;

172 
__STD_TYPE
 
__TIMER_T_TYPE
 
	g__timî_t
;

175 
__STD_TYPE
 
__BLKSIZE_T_TYPE
 
	g__blksize_t
;

180 
__STD_TYPE
 
__BLKCNT_T_TYPE
 
	g__blk˙t_t
;

181 
__STD_TYPE
 
__BLKCNT64_T_TYPE
 
	g__blk˙t64_t
;

184 
__STD_TYPE
 
__FSBLKCNT_T_TYPE
 
	g__fsblk˙t_t
;

185 
__STD_TYPE
 
__FSBLKCNT64_T_TYPE
 
	g__fsblk˙t64_t
;

188 
__STD_TYPE
 
__FSFILCNT_T_TYPE
 
	g__fsfû˙t_t
;

189 
__STD_TYPE
 
__FSFILCNT64_T_TYPE
 
	g__fsfû˙t64_t
;

192 
__STD_TYPE
 
__FSWORD_T_TYPE
 
	g__fsw‹d_t
;

194 
__STD_TYPE
 
__SSIZE_T_TYPE
 
	g__ssize_t
;

197 
__STD_TYPE
 
__SYSCALL_SLONG_TYPE
 
	g__sysˇŒ_¶⁄g_t
;

199 
__STD_TYPE
 
__SYSCALL_ULONG_TYPE
 
	g__sysˇŒ_ul⁄g_t
;

203 
__off64_t
 
	t__loff_t
;

204 *
	t__ˇddr_t
;

207 
__STD_TYPE
 
__SWORD_TYPE
 
	g__öçå_t
;

210 
__STD_TYPE
 
__U32_TYPE
 
	g__sockÀn_t
;

215 
	t__sig_©omic_t
;

220 #i‡
__TIMESIZE
 =64 && 
deföed
 
__LIBC


221 
	#__time64_t
 
__time_t


	)

222 #ñi‡
__TIMESIZE
 != 64

223 
__STD_TYPE
 
__TIME64_T_TYPE
 
	g__time64_t
;

226 #unde‡
__STD_TYPE


	@/usr/include/x86_64-linux-gnu/bits/types/FILE.h

1 #i‚de‡
__FILE_deföed


2 
	#__FILE_deföed
 1

	)

4 
	g_IO_FILE
;

7 
_IO_FILE
 
	tFILE
;

	@/usr/include/x86_64-linux-gnu/bits/types/__FILE.h

1 #i‚de‡
____FILE_deföed


2 
	#____FILE_deföed
 1

	)

4 
	g_IO_FILE
;

5 
_IO_FILE
 
	t__FILE
;

	@/usr/include/x86_64-linux-gnu/bits/types/__fpos64_t.h

1 #i‚de‡
_____Âos64_t_deföed


2 
	#_____Âos64_t_deföed
 1

	)

4 
	~<bôs/ty≥s.h
>

5 
	~<bôs/ty≥s/__mb°©e_t.h
>

10 
	s_G_Âos64_t


12 
__off64_t
 
	m__pos
;

13 
__mb°©e_t
 
	m__°©e
;

14 } 
	t__Âos64_t
;

	@/usr/include/x86_64-linux-gnu/bits/types/__fpos_t.h

1 #i‚de‡
_____Âos_t_deföed


2 
	#_____Âos_t_deföed
 1

	)

4 
	~<bôs/ty≥s.h
>

5 
	~<bôs/ty≥s/__mb°©e_t.h
>

10 
	s_G_Âos_t


12 
__off_t
 
	m__pos
;

13 
__mb°©e_t
 
	m__°©e
;

14 } 
	t__Âos_t
;

	@/usr/include/x86_64-linux-gnu/bits/types/__locale_t.h

19 #i‚de‡
_BITS_TYPES___LOCALE_T_H


20 
	#_BITS_TYPES___LOCALE_T_H
 1

	)

27 
	s__loˇÀ_°ru˘


30 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

33 c⁄° *
	m__˘y≥_b
;

34 c⁄° *
	m__˘y≥_tﬁowî
;

35 c⁄° *
	m__˘y≥_touµî
;

38 c⁄° *
	m__«mes
[13];

41 
__loˇÀ_°ru˘
 *
	t__loˇÀ_t
;

	@/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h

1 #i‚de‡
____mb°©e_t_deföed


2 
	#____mb°©e_t_deföed
 1

	)

8 #i‚de‡
__WINT_TYPE__


9 
	#__WINT_TYPE__
 

	)

15 
	m__cou¡
;

18 
__WINT_TYPE__
 
	m__wch
;

19 
	m__wchb
[4];

20 } 
	m__vÆue
;

21 } 
	t__mb°©e_t
;

	@/usr/include/x86_64-linux-gnu/bits/types/__sigset_t.h

1 #i‚de‡
____sig£t_t_deföed


2 
	#____sig£t_t_deföed


	)

4 
	#_SIGSET_NWORDS
 (1024 / (8 *  ()))

	)

7 
	m__vÆ
[
_SIGSET_NWORDS
];

8 } 
	t__sig£t_t
;

	@/usr/include/x86_64-linux-gnu/bits/types/__sigval_t.h

19 #i‚de‡
____sigvÆ_t_deföed


20 
	#____sigvÆ_t_deföed


	)

23 #ifde‡
__USE_POSIX199309


24 
	usigvÆ


26 
	msivÆ_öt
;

27 *
	msivÆ_±r
;

30 
sigvÆ
 
	t__sigvÆ_t
;

32 
	u__sigvÆ


34 
	m__sivÆ_öt
;

35 *
	m__sivÆ_±r
;

38 
__sigvÆ
 
	t__sigvÆ_t
;

	@/usr/include/x86_64-linux-gnu/bits/types/clock_t.h

1 #i‚de‡
__˛ock_t_deföed


2 
	#__˛ock_t_deföed
 1

	)

4 
	~<bôs/ty≥s.h
>

7 
__˛ock_t
 
	t˛ock_t
;

	@/usr/include/x86_64-linux-gnu/bits/types/clockid_t.h

1 #i‚de‡
__˛ockid_t_deföed


2 
	#__˛ockid_t_deföed
 1

	)

4 
	~<bôs/ty≥s.h
>

7 
__˛ockid_t
 
	t˛ockid_t
;

	@/usr/include/x86_64-linux-gnu/bits/types/cookie_io_functions_t.h

18 #i‚de‡
__cookõ_io_fun˘i⁄s_t_deföed


19 
	#__cookõ_io_fun˘i⁄s_t_deföed
 1

	)

21 
	~<bôs/ty≥s.h
>

27 
__ssize_t
 
	tcookõ_ªad_fun˘i⁄_t
 (*
	t__cookõ
, *
	t__buf
,

28 
	tsize_t
 
	t__nbyãs
);

36 
__ssize_t
 
	tcookõ_wrôe_fun˘i⁄_t
 (*
	t__cookõ
, c⁄° *
	t__buf
,

37 
	tsize_t
 
	t__nbyãs
);

45 
	tcookõ_£ek_fun˘i⁄_t
 (*
	t__cookõ
, 
	t__off64_t
 *
	t__pos
, 
	t__w
);

48 
	tcookõ_˛o£_fun˘i⁄_t
 (*
	t__cookõ
);

55 
	s_IO_cookõ_io_fun˘i⁄s_t


57 
cookõ_ªad_fun˘i⁄_t
 *
	mªad
;

58 
cookõ_wrôe_fun˘i⁄_t
 *
	mwrôe
;

59 
cookõ_£ek_fun˘i⁄_t
 *
	m£ek
;

60 
cookõ_˛o£_fun˘i⁄_t
 *
	m˛o£
;

61 } 
	tcookõ_io_fun˘i⁄s_t
;

	@/usr/include/x86_64-linux-gnu/bits/types/error_t.h

19 #i‚de‡
__îr‹_t_deföed


20 
	#__îr‹_t_deföed
 1

	)

22 
	tîr‹_t
;

	@/usr/include/x86_64-linux-gnu/bits/types/locale_t.h

19 #i‚de‡
_BITS_TYPES_LOCALE_T_H


20 
	#_BITS_TYPES_LOCALE_T_H
 1

	)

22 
	~<bôs/ty≥s/__loˇÀ_t.h
>

24 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/x86_64-linux-gnu/bits/types/mbstate_t.h

1 #i‚de‡
__mb°©e_t_deföed


2 
	#__mb°©e_t_deföed
 1

	)

4 
	~<bôs/ty≥s/__mb°©e_t.h
>

6 
__mb°©e_t
 
	tmb°©e_t
;

	@/usr/include/x86_64-linux-gnu/bits/types/res_state.h

1 #i‚de‡
__ªs_°©e_deföed


2 
	#__ªs_°©e_deföed
 1

	)

4 
	~<sys/ty≥s.h
>

5 
	~<√töë/ö.h
>

8 
	#MAXNS
 3

	)

9 
	#MAXDFLSRCH
 3

	)

10 
	#MAXDNSRCH
 6

	)

11 
	#MAXRESOLVSORT
 10

	)

13 
	s__ªs_°©e
 {

14 
	mªå™s
;

15 
	mªåy
;

16 
	m›ti⁄s
;

17 
	mnscou¡
;

18 
sockaddr_ö


19 
	mnßddr_li°
[
MAXNS
];

20 
	mid
;

22 *
	mdn§ch
[
MAXDNSRCH
+1];

23 
	mdefd«me
[256];

24 
	mpfcode
;

25 
	mndŸs
:4;

26 
	mns‹t
:4;

27 
	mùv6_u«vaû
:1;

28 
	munu£d
:23;

30 
ö_addr
 
	maddr
;

31 
uöt32_t
 
	mmask
;

32 } 
	ms‹t_li°
[
MAXRESOLVSORT
];

34 * 
	m__glibc_unu£d_qhook
;

35 * 
	m__glibc_unu£d_rhook
;

36 
	mªs_h_î∫o
;

37 
	m_vcsock
;

38 
	m_Êags
;

41 
	m∑d
[52];

43 
uöt16_t
 
	mnscou¡
;

44 
uöt16_t
 
	mnsm≠
[
MAXNS
];

45 
	mnssocks
[
MAXNS
];

46 
uöt16_t
 
	mnscou¡6
;

47 
uöt16_t
 
	mnsöô
;

48 
sockaddr_ö6
 *
	mnßddrs
[
MAXNS
];

49 #ifde‡
_LIBC


50 
__glibc_exãnsi⁄_ödex


51 
__©åibuã__
((
∑cked
));

53 
	m__glibc_ª£rved
[2];

55 } 
	m_ext
;

56 } 
	m_u
;

59 
__ªs_°©e
 *
	tªs_°©e
;

	@/usr/include/x86_64-linux-gnu/bits/types/sig_atomic_t.h

1 #i‚de‡
__sig_©omic_t_deföed


2 
	#__sig_©omic_t_deföed
 1

	)

4 
	~<bôs/ty≥s.h
>

8 
__sig_©omic_t
 
	tsig_©omic_t
;

	@/usr/include/x86_64-linux-gnu/bits/types/sigevent_t.h

1 #i‚de‡
__sigevít_t_deföed


2 
	#__sigevít_t_deföed
 1

	)

4 
	~<bôs/w‹dsize.h
>

5 
	~<bôs/ty≥s.h
>

6 
	~<bôs/ty≥s/__sigvÆ_t.h
>

8 
	#__SIGEV_MAX_SIZE
 64

	)

9 #i‡
__WORDSIZE
 == 64

10 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 4)

	)

12 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 3)

	)

16 #i‚de‡
__have_±hªad_©å_t


17 
±hªad_©å_t
 
	t±hªad_©å_t
;

18 
	#__have_±hªad_©å_t
 1

	)

22 
	ssigevít


24 
__sigvÆ_t
 
	msigev_vÆue
;

25 
	msigev_signo
;

26 
	msigev_nŸify
;

30 
	m_∑d
[
__SIGEV_PAD_SIZE
];

34 
__pid_t
 
	m_tid
;

38 (*
	m_fun˘i⁄
Ë(
	m__sigvÆ_t
);

39 
±hªad_©å_t
 *
	m_©åibuã
;

40 } 
	m_sigev_thªad
;

41 } 
	m_sigev_un
;

42 } 
	tsigevít_t
;

45 
	#sigev_nŸify_fun˘i⁄
 
_sigev_un
.
_sigev_thªad
.
_fun˘i⁄


	)

46 
	#sigev_nŸify_©åibuãs
 
_sigev_un
.
_sigev_thªad
.
_©åibuã


	)

	@/usr/include/x86_64-linux-gnu/bits/types/siginfo_t.h

1 #i‚de‡
__sigöfo_t_deföed


2 
	#__sigöfo_t_deföed
 1

	)

4 
	~<bôs/w‹dsize.h
>

5 
	~<bôs/ty≥s.h
>

6 
	~<bôs/ty≥s/__sigvÆ_t.h
>

8 
	#__SI_MAX_SIZE
 128

	)

9 #i‡
__WORDSIZE
 == 64

10 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 4)

	)

12 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 3)

	)

16 
	~<bôs/sigöfo-¨ch.h
>

17 #i‚de‡
__SI_ALIGNMENT


18 
	#__SI_ALIGNMENT


	)

20 #i‚de‡
__SI_BAND_TYPE


21 
	#__SI_BAND_TYPE
 

	)

23 #i‚de‡
__SI_CLOCK_T


24 
	#__SI_CLOCK_T
 
__˛ock_t


	)

26 #i‚de‡
__SI_ERRNO_THEN_CODE


27 
	#__SI_ERRNO_THEN_CODE
 1

	)

29 #i‚de‡
__SI_HAVE_SIGSYS


30 
	#__SI_HAVE_SIGSYS
 1

	)

32 #i‚de‡
__SI_SIGFAULT_ADDL


33 
	#__SI_SIGFAULT_ADDL


	)

38 
	msi_signo
;

39 #i‡
__SI_ERRNO_THEN_CODE


40 
	msi_î∫o
;

42 
	msi_code
;

44 
	msi_code
;

45 
	msi_î∫o
;

47 #i‡
__WORDSIZE
 == 64

48 
	m__∑d0
;

53 
	m_∑d
[
__SI_PAD_SIZE
];

58 
__pid_t
 
	msi_pid
;

59 
__uid_t
 
	msi_uid
;

60 } 
	m_kûl
;

65 
	msi_tid
;

66 
	msi_ovîrun
;

67 
__sigvÆ_t
 
	msi_sigvÆ
;

68 } 
	m_timî
;

73 
__pid_t
 
	msi_pid
;

74 
__uid_t
 
	msi_uid
;

75 
__sigvÆ_t
 
	msi_sigvÆ
;

76 } 
	m_π
;

81 
__pid_t
 
	msi_pid
;

82 
__uid_t
 
	msi_uid
;

83 
	msi_°©us
;

84 
__SI_CLOCK_T
 
	msi_utime
;

85 
__SI_CLOCK_T
 
	msi_°ime
;

86 } 
	m_sigchld
;

91 *
	msi_addr
;

92 
__SI_SIGFAULT_ADDL


93 
	msi_addr_lsb
;

99 *
	m_lowî
;

100 *
	m_uµî
;

101 } 
	m_addr_bnd
;

103 
__uöt32_t
 
	m_pkey
;

104 } 
	m_bounds
;

105 } 
	m_sigÁu…
;

110 
__SI_BAND_TYPE
 
	msi_b™d
;

111 
	msi_fd
;

112 } 
	m_sigpﬁl
;

115 #i‡
__SI_HAVE_SIGSYS


118 *
	m_ˇŒ_addr
;

119 
	m_sysˇŒ
;

120 
	m_¨ch
;

121 } 
	m_sigsys
;

123 } 
	m_sifõlds
;

124 } 
	tsigöfo_t
 
	t__SI_ALIGNMENT
;

128 
	#si_pid
 
_sifõlds
.
_kûl
.
si_pid


	)

129 
	#si_uid
 
_sifõlds
.
_kûl
.
si_uid


	)

130 
	#si_timîid
 
_sifõlds
.
_timî
.
si_tid


	)

131 
	#si_ovîrun
 
_sifõlds
.
_timî
.
si_ovîrun


	)

132 
	#si_°©us
 
_sifõlds
.
_sigchld
.
si_°©us


	)

133 
	#si_utime
 
_sifõlds
.
_sigchld
.
si_utime


	)

134 
	#si_°ime
 
_sifõlds
.
_sigchld
.
si_°ime


	)

135 
	#si_vÆue
 
_sifõlds
.
_π
.
si_sigvÆ


	)

136 
	#si_öt
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_öt


	)

137 
	#si_±r
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_±r


	)

138 
	#si_addr
 
_sifõlds
.
_sigÁu…
.
si_addr


	)

139 
	#si_addr_lsb
 
_sifõlds
.
_sigÁu…
.
si_addr_lsb


	)

140 
	#si_lowî
 
_sifõlds
.
_sigÁu…
.
_bounds
.
_addr_bnd
.
_lowî


	)

141 
	#si_uµî
 
_sifõlds
.
_sigÁu…
.
_bounds
.
_addr_bnd
.
_uµî


	)

142 
	#si_pkey
 
_sifõlds
.
_sigÁu…
.
_bounds
.
_pkey


	)

143 
	#si_b™d
 
_sifõlds
.
_sigpﬁl
.
si_b™d


	)

144 
	#si_fd
 
_sifõlds
.
_sigpﬁl
.
si_fd


	)

145 #i‡
__SI_HAVE_SIGSYS


146 
	#si_ˇŒ_addr
 
_sifõlds
.
_sigsys
.
_ˇŒ_addr


	)

147 
	#si_sysˇŒ
 
_sifõlds
.
_sigsys
.
_sysˇŒ


	)

148 
	#si_¨ch
 
_sifõlds
.
_sigsys
.
_¨ch


	)

	@/usr/include/x86_64-linux-gnu/bits/types/sigset_t.h

1 #i‚de‡
__sig£t_t_deföed


2 
	#__sig£t_t_deföed
 1

	)

4 
	~<bôs/ty≥s/__sig£t_t.h
>

7 
__sig£t_t
 
	tsig£t_t
;

	@/usr/include/x86_64-linux-gnu/bits/types/sigval_t.h

1 #i‚de‡
__sigvÆ_t_deföed


2 
	#__sigvÆ_t_deföed


	)

4 
	~<bôs/ty≥s/__sigvÆ_t.h
>

12 #i‚de‡
__USE_POSIX199309


16 
__sigvÆ_t
 
	tsigvÆ_t
;

	@/usr/include/x86_64-linux-gnu/bits/types/stack_t.h

19 #i‚de‡
__°ack_t_deföed


20 
	#__°ack_t_deföed
 1

	)

22 
	#__√ed_size_t


	)

23 
	~<°ddef.h
>

28 *
	mss_•
;

29 
	mss_Êags
;

30 
size_t
 
	mss_size
;

31 } 
	t°ack_t
;

	@/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h

18 #i‚de‡
__°ru˘_FILE_deföed


19 
	#__°ru˘_FILE_deföed
 1

	)

25 #i‡
deföed
 
_IO_USE_OLD_IO_FILE
 && !deföed 
_LIBC


29 #i‡
deföed
 
_IO_lock_t_deföed
 && !deföed 
_LIBC


33 
	~<bôs/ty≥s.h
>

35 
	g_IO_FILE
;

36 
	g_IO_m¨kî
;

37 
	g_IO_codecvt
;

38 
	g_IO_wide_d©a
;

42 #i‚de‡
_IO_lock_t_deföed


43 
	t_IO_lock_t
;

49 
	s_IO_FILE


51 
	m_Êags
;

54 *
	m_IO_ªad_±r
;

55 *
	m_IO_ªad_íd
;

56 *
	m_IO_ªad_ba£
;

57 *
	m_IO_wrôe_ba£
;

58 *
	m_IO_wrôe_±r
;

59 *
	m_IO_wrôe_íd
;

60 *
	m_IO_buf_ba£
;

61 *
	m_IO_buf_íd
;

64 *
	m_IO_ßve_ba£
;

65 *
	m_IO_backup_ba£
;

66 *
	m_IO_ßve_íd
;

68 
_IO_m¨kî
 *
	m_m¨kîs
;

70 
_IO_FILE
 *
	m_chaö
;

72 
	m_fûío
;

73 
	m_Êags2
;

74 
__off_t
 
	m_ﬁd_off£t
;

77 
	m_cur_cﬁumn
;

78 sig√d 
	m_vèbÀ_off£t
;

79 
	m_sh‹tbuf
[1];

81 
_IO_lock_t
 *
	m_lock
;

82 #ifde‡
_IO_USE_OLD_IO_FILE


85 
	s_IO_FILE_com∂ëe


87 
_IO_FILE
 
	m_fûe
;

89 
__off64_t
 
	m_off£t
;

91 
_IO_codecvt
 *
	m_codecvt
;

92 
_IO_wide_d©a
 *
	m_wide_d©a
;

93 
_IO_FILE
 *
	m_‰ìªs_li°
;

94 *
	m_‰ìªs_buf
;

95 
size_t
 
	m__∑d5
;

96 
	m_mode
;

98 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

102 
	#__gëc_u∆ocked_body
(
_Â
) \

103 (
	`__glibc_u∆ikñy
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
) \

104 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

106 
	#__putc_u∆ocked_body
(
_ch
, 
_Â
) \

107 (
	`__glibc_u∆ikñy
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
) \

108 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

109 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

111 
	#_IO_EOF_SEEN
 0x0010

	)

112 
	#__„of_u∆ocked_body
(
_Â
Ë(((_Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

114 
	#_IO_ERR_SEEN
 0x0020

	)

115 
	#__„º‹_u∆ocked_body
(
_Â
Ë(((_Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

117 
	#_IO_USER_LOCK
 0x8000

	)

	@/usr/include/x86_64-linux-gnu/bits/types/struct___jmp_buf_tag.h

19 #i‚def 
__jmp_buf_èg_deföed


20 
	#__jmp_buf_èg_deföed
 1

	)

22 
	~<bôs/£tjmp.h
>

23 
	~<bôs/ty≥s/__sig£t_t.h
>

26 
	s__jmp_buf_èg


32 
__jmp_buf
 
	m__jmpbuf
;

33 
	m__mask_was_ßved
;

34 
__sig£t_t
 
	m__ßved_mask
;

	@/usr/include/x86_64-linux-gnu/bits/types/struct_iovec.h

19 #i‚de‡
__iovec_deföed


20 
	#__iovec_deföed
 1

	)

22 
	#__√ed_size_t


	)

23 
	~<°ddef.h
>

26 
	siovec


28 *
	miov_ba£
;

29 
size_t
 
	miov_Àn
;

	@/usr/include/x86_64-linux-gnu/bits/types/struct_itimerspec.h

1 #i‚de‡
__ôimî•ec_deföed


2 
	#__ôimî•ec_deföed
 1

	)

4 
	~<bôs/ty≥s.h
>

5 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

8 
	sôimî•ec


10 
time•ec
 
	mô_öãrvÆ
;

11 
time•ec
 
	mô_vÆue
;

	@/usr/include/x86_64-linux-gnu/bits/types/struct_msqid64_ds.h

19 #i‚de‡
_SYS_MSG_H


23 #i‡
__TIMESIZE
 == 64

24 
	#__msqid64_ds
 
msqid_ds


	)

26 
	s__msqid64_ds


28 
	~<bôs/ty≥s/°ru˘_msqid64_ds_hñ≥r.h
>

	@/usr/include/x86_64-linux-gnu/bits/types/struct_msqid64_ds_helper.h

20 
ùc_≥rm
 
	gmsg_≥rm
;

21 
__time64_t
 
	gmsg_°ime
;

22 
__time64_t
 
	gmsg_πime
;

23 
__time64_t
 
	gmsg_˘ime
;

24 
__sysˇŒ_ul⁄g_t
 
	g__msg_cbyãs
;

25 
msgqnum_t
 
	gmsg_qnum
;

26 
msgÀn_t
 
	gmsg_qbyãs
;

27 
__pid_t
 
	gmsg_l•id
;

28 
__pid_t
 
	gmsg_Ãpid
;

29 
	g__glibc_ª£rved4
;

30 
	g__glibc_ª£rved5
;

	@/usr/include/x86_64-linux-gnu/bits/types/struct_msqid_ds.h

19 #i‚de‡
_SYS_MSG_H


23 
	~<bôs/ty≥s/time_t.h
>

27 
	smsqid_ds


29 #ifde‡
__USE_TIME_BITS64


30 
	~<bôs/ty≥s/°ru˘_msqid64_ds_hñ≥r.h
>

32 
ùc_≥rm
 
	mmsg_≥rm
;

33 #i‡
__TIMESIZE
 == 32

34 
__time_t
 
	mmsg_°ime
;

35 
	m__msg_°ime_high
;

36 
__time_t
 
	mmsg_πime
;

37 
	m__msg_πime_high
;

38 
__time_t
 
	mmsg_˘ime
;

39 
	m__msg_˘ime_high
;

41 
__time_t
 
	mmsg_°ime
;

42 
__time_t
 
	mmsg_πime
;

43 
__time_t
 
	mmsg_˘ime
;

45 
__sysˇŒ_ul⁄g_t
 
	m__msg_cbyãs
;

46 
msgqnum_t
 
	mmsg_qnum
;

47 
msgÀn_t
 
	mmsg_qbyãs
;

48 
__pid_t
 
	mmsg_l•id
;

49 
__pid_t
 
	mmsg_Ãpid
;

50 
__sysˇŒ_ul⁄g_t
 
	m__glibc_ª£rved4
;

51 
__sysˇŒ_ul⁄g_t
 
	m__glibc_ª£rved5
;

	@/usr/include/x86_64-linux-gnu/bits/types/struct_osockaddr.h

1 #i‚de‡
__osockaddr_deföed


2 
	#__osockaddr_deföed
 1

	)

6 
	sosockaddr


8 
	mß_Ámûy
;

9 
	mß_d©a
[14];

	@/usr/include/x86_64-linux-gnu/bits/types/struct_rusage.h

19 #i‚de‡
__rußge_deföed


20 
	#__rußge_deföed
 1

	)

22 
	~<bôs/ty≥s.h
>

23 
	~<bôs/ty≥s/°ru˘_timevÆ.h
>

33 
	srußge


36 
timevÆ
 
	mru_utime
;

38 
timevÆ
 
	mru_°ime
;

40 
__exãnsi⁄__
 union

42 
	mru_maxrss
;

43 
__sysˇŒ_¶⁄g_t
 
	m__ru_maxrss_w‹d
;

47 
__exãnsi⁄__
 union

49 
	mru_ixrss
;

50 
__sysˇŒ_¶⁄g_t
 
	m__ru_ixrss_w‹d
;

53 
__exãnsi⁄__
 union

55 
	mru_idrss
;

56 
__sysˇŒ_¶⁄g_t
 
	m__ru_idrss_w‹d
;

59 
__exãnsi⁄__
 union

61 
	mru_i§ss
;

62 
__sysˇŒ_¶⁄g_t
 
	m__ru_i§ss_w‹d
;

66 
__exãnsi⁄__
 union

68 
	mru_möÊt
;

69 
__sysˇŒ_¶⁄g_t
 
	m__ru_möÊt_w‹d
;

72 
__exãnsi⁄__
 union

74 
	mru_majÊt
;

75 
__sysˇŒ_¶⁄g_t
 
	m__ru_majÊt_w‹d
;

78 
__exãnsi⁄__
 union

80 
	mru_nsw≠
;

81 
__sysˇŒ_¶⁄g_t
 
	m__ru_nsw≠_w‹d
;

85 
__exãnsi⁄__
 union

87 
	mru_öblock
;

88 
__sysˇŒ_¶⁄g_t
 
	m__ru_öblock_w‹d
;

91 
__exãnsi⁄__
 union

93 
	mru_oublock
;

94 
__sysˇŒ_¶⁄g_t
 
	m__ru_oublock_w‹d
;

97 
__exãnsi⁄__
 union

99 
	mru_msg¢d
;

100 
__sysˇŒ_¶⁄g_t
 
	m__ru_msg¢d_w‹d
;

103 
__exãnsi⁄__
 union

105 
	mru_msgrcv
;

106 
__sysˇŒ_¶⁄g_t
 
	m__ru_msgrcv_w‹d
;

109 
__exãnsi⁄__
 union

111 
	mru_nsig«ls
;

112 
__sysˇŒ_¶⁄g_t
 
	m__ru_nsig«ls_w‹d
;

117 
__exãnsi⁄__
 union

119 
	mru_nvcsw
;

120 
__sysˇŒ_¶⁄g_t
 
	m__ru_nvcsw_w‹d
;

124 
__exãnsi⁄__
 union

126 
	mru_nivcsw
;

127 
__sysˇŒ_¶⁄g_t
 
	m__ru_nivcsw_w‹d
;

	@/usr/include/x86_64-linux-gnu/bits/types/struct_sched_param.h

19 #i‚de‡
_BITS_TYPES_STRUCT_SCHED_PARAM


20 
	#_BITS_TYPES_STRUCT_SCHED_PARAM
 1

	)

23 
	ssched_∑øm


25 
	msched_¥i‹ôy
;

	@/usr/include/x86_64-linux-gnu/bits/types/struct_semid64_ds.h

19 #i‚de‡
_SYS_SEM_H


23 #i‡
__TIMESIZE
 == 64

24 
	#__£mid64_ds
 
£mid_ds


	)

26 
	s__£mid64_ds


28 
	~<bôs/ty≥s/°ru˘_£mid64_ds_hñ≥r.h
>

	@/usr/include/x86_64-linux-gnu/bits/types/struct_semid64_ds_helper.h

20 
ùc_≥rm
 
	g£m_≥rm
;

21 
__time64_t
 
	g£m_Ÿime
;

22 
__time64_t
 
	g£m_˘ime
;

23 
__sysˇŒ_ul⁄g_t
 
	g£m_n£ms
;

24 
	g__glibc_ª£rved3
;

25 
	g__glibc_ª£rved4
;

	@/usr/include/x86_64-linux-gnu/bits/types/struct_semid_ds.h

19 #i‚de‡
_SYS_SEM_H


24 
	s£mid_ds


26 #ifde‡
__USE_TIME_BITS64


27 
	~<bôs/ty≥s/°ru˘_£mid64_ds_hñ≥r.h
>

29 
ùc_≥rm
 
	m£m_≥rm
;

30 
__time_t
 
	m£m_Ÿime
;

31 
__sysˇŒ_ul⁄g_t
 
	m__£m_Ÿime_high
;

32 
__time_t
 
	m£m_˘ime
;

33 
__sysˇŒ_ul⁄g_t
 
	m__£m_˘ime_high
;

34 
__sysˇŒ_ul⁄g_t
 
	m£m_n£ms
;

35 
__sysˇŒ_ul⁄g_t
 
	m__glibc_ª£rved3
;

36 
__sysˇŒ_ul⁄g_t
 
	m__glibc_ª£rved4
;

	@/usr/include/x86_64-linux-gnu/bits/types/struct_shmid64_ds.h

19 #i‚de‡
_SYS_SHM_H


23 #i‡
__TIMESIZE
 == 64

24 
	#__shmid64_ds
 
shmid_ds


	)

26 
	s__shmid64_ds


28 
	~<bôs/ty≥s/°ru˘_shmid64_ds_hñ≥r.h
>

	@/usr/include/x86_64-linux-gnu/bits/types/struct_shmid64_ds_helper.h

19 
ùc_≥rm
 
	gshm_≥rm
;

20 
size_t
 
	gshm_£gsz
;

21 
__time64_t
 
	gshm_©ime
;

22 
__time64_t
 
	gshm_dtime
;

23 
__time64_t
 
	gshm_˘ime
;

24 
__pid_t
 
	gshm_˝id
;

25 
__pid_t
 
	gshm_Õid
;

26 
shm©t_t
 
	gshm_«âch
;

27 
	g__glibc_ª£rved5
;

28 
	g__glibc_ª£rved6
;

	@/usr/include/x86_64-linux-gnu/bits/types/struct_shmid_ds.h

19 #i‚de‡
_SYS_SHM_H


24 
	sshmid_ds


26 #ifde‡
__USE_TIME_BITS64


27 
	~<bôs/ty≥s/°ru˘_shmid64_ds_hñ≥r.h
>

29 
ùc_≥rm
 
	mshm_≥rm
;

30 
size_t
 
	mshm_£gsz
;

31 #i‡
__TIMESIZE
 == 32

32 
__time_t
 
	mshm_©ime
;

33 
	m__shm_©ime_high
;

34 
__time_t
 
	mshm_dtime
;

35 
	m__shm_dtime_high
;

36 
__time_t
 
	mshm_˘ime
;

37 
	m__shm_˘ime_high
;

39 
__time_t
 
	mshm_©ime
;

40 
__time_t
 
	mshm_dtime
;

41 
__time_t
 
	mshm_˘ime
;

43 
__pid_t
 
	mshm_˝id
;

44 
__pid_t
 
	mshm_Õid
;

45 
shm©t_t
 
	mshm_«âch
;

46 
__sysˇŒ_ul⁄g_t
 
	m__glibc_ª£rved5
;

47 
__sysˇŒ_ul⁄g_t
 
	m__glibc_ª£rved6
;

	@/usr/include/x86_64-linux-gnu/bits/types/struct_sigstack.h

19 #i‚de‡
__sig°ack_deföed


20 
	#__sig°ack_deföed
 1

	)

23 
	ssig°ack


25 *
	mss_•
;

26 
	mss_⁄°ack
;

	@/usr/include/x86_64-linux-gnu/bits/types/struct_statx.h

19 #i‚de‡
_SYS_STAT_H


20 #îr‹ 
Nevî
 
ö˛ude
 <
bôs
/
ty≥s
/
°ru˘_°©x
.
h
> 
dúe˘ly
, in˛udê<
sys
/
°©
.h> 
ö°ód
.

23 #i‚de‡
__°©x_deföed


24 
	#__°©x_deföed
 1

	)

30 
	s°©x


32 
__uöt32_t
 
	m°x_mask
;

33 
__uöt32_t
 
	m°x_blksize
;

34 
__uöt64_t
 
	m°x_©åibuãs
;

35 
__uöt32_t
 
	m°x_∆ök
;

36 
__uöt32_t
 
	m°x_uid
;

37 
__uöt32_t
 
	m°x_gid
;

38 
__uöt16_t
 
	m°x_mode
;

39 
__uöt16_t
 
	m__°©x_∑d1
[1];

40 
__uöt64_t
 
	m°x_öo
;

41 
__uöt64_t
 
	m°x_size
;

42 
__uöt64_t
 
	m°x_blocks
;

43 
__uöt64_t
 
	m°x_©åibuãs_mask
;

44 
°©x_time°amp
 
	m°x_©ime
;

45 
°©x_time°amp
 
	m°x_btime
;

46 
°©x_time°amp
 
	m°x_˘ime
;

47 
°©x_time°amp
 
	m°x_mtime
;

48 
__uöt32_t
 
	m°x_rdev_maj‹
;

49 
__uöt32_t
 
	m°x_rdev_mö‹
;

50 
__uöt32_t
 
	m°x_dev_maj‹
;

51 
__uöt32_t
 
	m°x_dev_mö‹
;

52 
__uöt64_t
 
	m__°©x_∑d2
[14];

	@/usr/include/x86_64-linux-gnu/bits/types/struct_statx_timestamp.h

19 #i‚de‡
_SYS_STAT_H


20 #îr‹ 
Nevî
 
ö˛ude
 <
bôs
/
ty≥s
/
°ru˘_°©x_time°amp
.
h
> 
dúe˘ly
, in˛udê<
sys
/
°©
.h> 
ö°ód
.

23 #i‚de‡
__°©x_time°amp_deföed


24 
	#__°©x_time°amp_deföed
 1

	)

26 
	s°©x_time°amp


28 
__öt64_t
 
	mtv_£c
;

29 
__uöt32_t
 
	mtv_n£c
;

30 
__öt32_t
 
	m__°©x_time°amp_∑d1
[1];

	@/usr/include/x86_64-linux-gnu/bits/types/struct_timeb.h

1 #i‚de‡
__timeb_deföed


2 
	#__timeb_deföed
 1

	)

4 
	~<bôs/ty≥s/time_t.h
>

7 
	stimeb


9 
time_t
 
	mtime
;

10 
	mmûlôm
;

11 
	mtimez⁄e
;

12 
	md°Êag
;

	@/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h

2 #i‚de‡
_STRUCT_TIMESPEC


3 
	#_STRUCT_TIMESPEC
 1

	)

5 
	~<bôs/ty≥s.h
>

6 
	~<bôs/ídün.h
>

7 
	~<bôs/ty≥s/time_t.h
>

11 
	stime•ec


13 #ifde‡
__USE_TIME_BITS64


14 
__time64_t
 
	mtv_£c
;

16 
__time_t
 
	mtv_£c
;

18 #i‡
__WORDSIZE
 == 64 \

19 || (
deföed
 
	m__SYSCALL_WORDSIZE
 && __SYSCALL_WORDSIZE == 64) \

20 || (
__TIMESIZE
 =32 && !
deföed
 
__USE_TIME_BITS64
)

21 
__sysˇŒ_¶⁄g_t
 
tv_n£c
;

23 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


25 
	mtv_n£c
;

27 
	mtv_n£c
;

	@/usr/include/x86_64-linux-gnu/bits/types/struct_timeval.h

1 #i‚de‡
__timevÆ_deföed


2 
	#__timevÆ_deföed
 1

	)

4 
	~<bôs/ty≥s.h
>

8 
	stimevÆ


10 #ifde‡
__USE_TIME_BITS64


11 
__time64_t
 
	mtv_£c
;

12 
__su£c⁄ds64_t
 
	mtv_u£c
;

14 
__time_t
 
	mtv_£c
;

15 
__su£c⁄ds_t
 
	mtv_u£c
;

	@/usr/include/x86_64-linux-gnu/bits/types/struct_tm.h

1 #i‚de‡
__°ru˘_tm_deföed


2 
	#__°ru˘_tm_deföed
 1

	)

4 
	~<bôs/ty≥s.h
>

7 
	stm


9 
	mtm_£c
;

10 
	mtm_mö
;

11 
	mtm_hour
;

12 
	mtm_mday
;

13 
	mtm_m⁄
;

14 
	mtm_yór
;

15 
	mtm_wday
;

16 
	mtm_yday
;

17 
	mtm_isd°
;

19 #ifdef 
__USE_MISC


20 
	mtm_gmtoff
;

21 c⁄° *
	mtm_z⁄e
;

23 
	m__tm_gmtoff
;

24 c⁄° *
	m__tm_z⁄e
;

	@/usr/include/x86_64-linux-gnu/bits/types/time_t.h

1 #i‚de‡
__time_t_deföed


2 
	#__time_t_deföed
 1

	)

4 
	~<bôs/ty≥s.h
>

7 #ifde‡
__USE_TIME_BITS64


8 
__time64_t
 
	ttime_t
;

10 
__time_t
 
	ttime_t
;

	@/usr/include/x86_64-linux-gnu/bits/types/timer_t.h

1 #i‚de‡
__timî_t_deföed


2 
	#__timî_t_deföed
 1

	)

4 
	~<bôs/ty≥s.h
>

7 
__timî_t
 
	ttimî_t
;

	@/usr/include/x86_64-linux-gnu/bits/types/wint_t.h

1 #i‚de‡
__wöt_t_deföed


2 
	#__wöt_t_deföed
 1

	)

9 #i‚de‡
_WINT_T


10 
	#_WINT_T
 1

	)

16 #i‚de‡
__WINT_TYPE__


17 
	#__WINT_TYPE__
 

	)

20 
__WINT_TYPE__
 
	twöt_t
;

	@/usr/include/x86_64-linux-gnu/bits/typesizes.h

19 #i‚de‡
_BITS_TYPES_H


23 #i‚def 
_BITS_TYPESIZES_H


24 
	#_BITS_TYPESIZES_H
 1

	)

30 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


31 
	#__SYSCALL_SLONG_TYPE
 
__SQUAD_TYPE


	)

32 
	#__SYSCALL_ULONG_TYPE
 
__UQUAD_TYPE


	)

34 
	#__SYSCALL_SLONG_TYPE
 
__SLONGWORD_TYPE


	)

35 
	#__SYSCALL_ULONG_TYPE
 
__ULONGWORD_TYPE


	)

38 
	#__DEV_T_TYPE
 
__UQUAD_TYPE


	)

39 
	#__UID_T_TYPE
 
__U32_TYPE


	)

40 
	#__GID_T_TYPE
 
__U32_TYPE


	)

41 
	#__INO_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

42 
	#__INO64_T_TYPE
 
__UQUAD_TYPE


	)

43 
	#__MODE_T_TYPE
 
__U32_TYPE


	)

44 #ifde‡
__x86_64__


45 
	#__NLINK_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

46 
	#__FSWORD_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

48 
	#__NLINK_T_TYPE
 
__UWORD_TYPE


	)

49 
	#__FSWORD_T_TYPE
 
__SWORD_TYPE


	)

51 
	#__OFF_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

52 
	#__OFF64_T_TYPE
 
__SQUAD_TYPE


	)

53 
	#__PID_T_TYPE
 
__S32_TYPE


	)

54 
	#__RLIM_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

55 
	#__RLIM64_T_TYPE
 
__UQUAD_TYPE


	)

56 
	#__BLKCNT_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

57 
	#__BLKCNT64_T_TYPE
 
__SQUAD_TYPE


	)

58 
	#__FSBLKCNT_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

59 
	#__FSBLKCNT64_T_TYPE
 
__UQUAD_TYPE


	)

60 
	#__FSFILCNT_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

61 
	#__FSFILCNT64_T_TYPE
 
__UQUAD_TYPE


	)

62 
	#__ID_T_TYPE
 
__U32_TYPE


	)

63 
	#__CLOCK_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

64 
	#__TIME_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

65 
	#__USECONDS_T_TYPE
 
__U32_TYPE


	)

66 
	#__SUSECONDS_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

67 
	#__SUSECONDS64_T_TYPE
 
__SQUAD_TYPE


	)

68 
	#__DADDR_T_TYPE
 
__S32_TYPE


	)

69 
	#__KEY_T_TYPE
 
__S32_TYPE


	)

70 
	#__CLOCKID_T_TYPE
 
__S32_TYPE


	)

71 
	#__TIMER_T_TYPE
 *

	)

72 
	#__BLKSIZE_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

73 
	#__FSID_T_TYPE
 såu˘ { 
__vÆ
[2]; }

	)

74 
	#__SSIZE_T_TYPE
 
__SWORD_TYPE


	)

75 
	#__CPU_MASK_TYPE
 
__SYSCALL_ULONG_TYPE


	)

77 #ifde‡
__x86_64__


81 
	#__OFF_T_MATCHES_OFF64_T
 1

	)

84 
	#__INO_T_MATCHES_INO64_T
 1

	)

87 
	#__RLIM_T_MATCHES_RLIM64_T
 1

	)

90 
	#__STATFS_MATCHES_STATFS64
 1

	)

93 
	#__KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64
 1

	)

95 
	#__RLIM_T_MATCHES_RLIM64_T
 0

	)

97 
	#__STATFS_MATCHES_STATFS64
 0

	)

99 
	#__KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64
 0

	)

103 
	#__FD_SETSIZE
 1024

	)

	@/usr/include/x86_64-linux-gnu/bits/uintn-identity.h

19 #i‡!
deföed
 
_NETINET_IN_H
 && !deföed 
_ENDIAN_H


23 #i‚de‡
_BITS_UINTN_IDENTITY_H


24 
	#_BITS_UINTN_IDENTITY_H
 1

	)

26 
	~<bôs/ty≥s.h
>

32 
__ölöe
 
__uöt16_t


33 
	$__uöt16_idítôy
 (
__uöt16_t
 
__x
)

35  
__x
;

36 
	}
}

38 
__ölöe
 
__uöt32_t


39 
	$__uöt32_idítôy
 (
__uöt32_t
 
__x
)

41  
__x
;

42 
	}
}

44 
__ölöe
 
__uöt64_t


45 
	$__uöt64_idítôy
 (
__uöt64_t
 
__x
)

47  
__x
;

48 
	}
}

	@/usr/include/x86_64-linux-gnu/bits/uio-ext.h

19 #i‚de‡
_BITS_UIO_EXT_H


20 
	#_BITS_UIO_EXT_H
 1

	)

22 #i‚de‡
_SYS_UIO_H


26 
__BEGIN_DECLS


29 
ssize_t
 
	$¥o˚ss_vm_ªadv
 (
pid_t
 
__pid
, c⁄° 
iovec
 *
__lvec
,

30 
__liov˙t
,

31 c⁄° 
iovec
 *
__rvec
,

32 
__riov˙t
,

33 
__Êags
)

34 
__THROW
;

37 
ssize_t
 
	$¥o˚ss_vm_wrôev
 (
pid_t
 
__pid
, c⁄° 
iovec
 *
__lvec
,

38 
__liov˙t
,

39 c⁄° 
iovec
 *
__rvec
,

40 
__riov˙t
,

41 
__Êags
)

42 
__THROW
;

45 
	#RWF_HIPRI
 0x00000001

	)

46 
	#RWF_DSYNC
 0x00000002

	)

47 
	#RWF_SYNC
 0x00000004

	)

48 
	#RWF_NOWAIT
 0x00000008

	)

49 
	#RWF_APPEND
 0x00000010

	)

51 
__END_DECLS


	@/usr/include/x86_64-linux-gnu/bits/uio_lim.h

19 #i‚de‡
_BITS_UIO_LIM_H


20 
	#_BITS_UIO_LIM_H
 1

	)

30 
	#__IOV_MAX
 1024

	)

	@/usr/include/x86_64-linux-gnu/bits/unistd.h

19 #i‚de‡
_UNISTD_H


23 
ssize_t
 
	$__ªad_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

24 
size_t
 
__buÊí
)

25 
__wur
 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 2, 3));

26 
ssize_t
 
	`__REDIRECT
 (
__ªad_Æüs
, (
__fd
, *
__buf
,

27 
size_t
 
__nbyãs
), 
ªad
)

28 
__wur
 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 2, 3));

29 
ssize_t
 
	`__REDIRECT
 (
__ªad_chk_w¨n
,

30 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

31 
size_t
 
__buÊí
), 
__ªad_chk
)

32 
__wur
 
	`__w¨«âr
 ("read called with biggerÜengthÅhan size of "

35 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


36 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
)

38  
	`__glibc_f‹tify
 (
ªad
, 
__nbyãs
,  (),

39 
	`__glibc_objsize0
 (
__buf
),

40 
__fd
, 
__buf
, 
__nbyãs
);

41 
	}
}

43 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


44 
ssize_t
 
	$__¥ód_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

45 
__off_t
 
__off£t
, 
size_t
 
__bufsize
)

46 
__wur
 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 2, 3));

47 
ssize_t
 
	$__¥ód64_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

48 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
)

49 
__wur
 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 2, 3));

50 
ssize_t
 
	`__REDIRECT
 (
__¥ód_Æüs
,

51 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

52 
__off_t
 
__off£t
), 
¥ód
)

53 
__wur
 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 2, 3));

54 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_Æüs
,

55 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

56 
__off64_t
 
__off£t
), 
¥ód64
)

57 
__wur
 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 2, 3));

58 
ssize_t
 
	`__REDIRECT
 (
__¥ód_chk_w¨n
,

59 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

60 
__off_t
 
__off£t
, 
size_t
 
__bufsize
), 
__¥ód_chk
)

61 
__wur
 
	`__w¨«âr
 ("pread called with biggerÜengthÅhan size of "

63 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_chk_w¨n
,

64 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

65 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
),

66 
__¥ód64_chk
)

67 
__wur
 
	`__w¨«âr
 ("pread64 called with biggerÜengthÅhan size of "

70 #i‚de‡
__USE_FILE_OFFSET64


71 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


72 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off_t
 
__off£t
)

74  
	`__glibc_f‹tify
 (
¥ód
, 
__nbyãs
,  (),

75 
	`__glibc_objsize0
 (
__buf
),

76 
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

77 
	}
}

79 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


80 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

82  
	`__glibc_f‹tify
 (
¥ód64
, 
__nbyãs
,  (),

83 
	`__glibc_objsize0
 (
__buf
),

84 
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

85 
	}
}

88 #ifde‡
__USE_LARGEFILE64


89 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


90 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

92  
	`__glibc_f‹tify
 (
¥ód64
, 
__nbyãs
,  (),

93 
	`__glibc_objsize0
 (
__buf
),

94 
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

95 
	}
}

99 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


100 
ssize_t
 
	$__ªadlök_chk
 (c⁄° *
__ª°ri˘
 
__∑th
,

101 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

102 
size_t
 
__buÊí
)

103 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 2, 3));

104 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_Æüs
,

105 (c⁄° *
__ª°ri˘
 
__∑th
,

106 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
), 
ªadlök
)

107 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 2, 3));

108 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_chk_w¨n
,

109 (c⁄° *
__ª°ri˘
 
__∑th
,

110 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

111 
size_t
 
__buÊí
), 
__ªadlök_chk
)

112 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
	`__w¨«âr
 ("readlink called with biggerÜength "

115 
__f‹tify_fun˘i⁄
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
ssize_t


116 
	`__NTH
 (
	$ªadlök
 (c⁄° *
__ª°ri˘
 
__∑th
, *__ª°ri˘ 
__buf
,

117 
size_t
 
__Àn
))

119  
	`__glibc_f‹tify
 (
ªadlök
, 
__Àn
,  (),

120 
	`__glibc_objsize
 (
__buf
),

121 
__∑th
, 
__buf
, 
__Àn
);

122 
	}
}

125 #ifde‡
__USE_ATFILE


126 
ssize_t
 
	$__ªadlök©_chk
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

127 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

128 
size_t
 
__buÊí
)

129 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 3, 4));

130 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_Æüs
,

131 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

132 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
),

133 
ªadlök©
)

134 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 3, 4));

135 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_chk_w¨n
,

136 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

137 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

138 
size_t
 
__buÊí
), 
__ªadlök©_chk
)

139 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
	`__w¨«âr
 ("readlinkat called with bigger "

143 
__f‹tify_fun˘i⁄
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
ssize_t


144 
	`__NTH
 (
	$ªadlök©
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

145 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
))

147  
	`__glibc_f‹tify
 (
ªadlök©
, 
__Àn
,  (),

148 
	`__glibc_objsize
 (
__buf
),

149 
__fd
, 
__∑th
, 
__buf
, 
__Àn
);

150 
	}
}

153 *
	$__gëcwd_chk
 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
)

154 
__THROW
 
__wur
;

155 *
	`__REDIRECT_NTH
 (
__gëcwd_Æüs
,

156 (*
__buf
, 
size_t
 
__size
), 
gëcwd
Ë
__wur
;

157 *
	`__REDIRECT_NTH
 (
__gëcwd_chk_w¨n
,

158 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
),

159 
__gëcwd_chk
)

160 
__wur
 
	`__w¨«âr
 ("getcwd caller with biggerÜengthÅhan size of "

163 
__f‹tify_fun˘i⁄
 
__wur
 *

164 
	`__NTH
 (
	$gëcwd
 (*
__buf
, 
size_t
 
__size
))

166  
	`__glibc_f‹tify
 (
gëcwd
, 
__size
,  (),

167 
	`__glibc_objsize
 (
__buf
),

168 
__buf
, 
__size
);

169 
	}
}

171 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


172 *
	$__gëwd_chk
 (*
__buf
, 
size_t
 
buÊí
)

173 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 2));

174 *
	`__REDIRECT_NTH
 (
__gëwd_w¨n
, (*
__buf
), 
gëwd
)

175 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("please use getcwd instead,ás getwd "

178 
__f‹tify_fun˘i⁄
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
 *

179 
	`__NTH
 (
	$gëwd
 (*
__buf
))

181 i‡(
	`__glibc_objsize
 (
__buf
Ë!(
size_t
) -1)

182  
	`__gëwd_chk
 (
__buf
, 
	`__glibc_objsize
 (__buf));

183  
	`__gëwd_w¨n
 (
__buf
);

184 
	}
}

187 
size_t
 
	$__c⁄f°r_chk
 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

188 
size_t
 
__buÊí
Ë
__THROW


189 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 2, 3));

190 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_Æüs
, (
__«me
, *
__buf
,

191 
size_t
 
__Àn
), 
c⁄f°r
)

192 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 2, 3));

193 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_chk_w¨n
,

194 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

195 
size_t
 
__buÊí
), 
__c⁄f°r_chk
)

196 
	`__w¨«âr
 ("confstr called with biggerÜengthÅhan size of destination "

199 
__f‹tify_fun˘i⁄
 
size_t


200 
	`__NTH
 (
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
))

202  
	`__glibc_f‹tify
 (
c⁄f°r
, 
__Àn
,  (),

203 
	`__glibc_objsize
 (
__buf
),

204 
__«me
, 
__buf
, 
__Àn
);

205 
	}
}

208 
	$__gëgroups_chk
 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
)

209 
__THROW
 
__wur
 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 2, 1));

210 
	`__REDIRECT_NTH
 (
__gëgroups_Æüs
, (
__size
, 
__gid_t
 
__li°
[]),

211 
gëgroups
Ë
__wur
 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 2, 1));

212 
	`__REDIRECT_NTH
 (
__gëgroups_chk_w¨n
,

213 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
),

214 
__gëgroups_chk
)

215 
__wur
 
	`__w¨«âr
 ("getgroups called with bigger group countÅhan what "

218 
__f‹tify_fun˘i⁄
 

219 
	`__NTH
 (
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]))

221  
	`__glibc_f‹tify
 (
gëgroups
, 
__size
,  (
__gid_t
),

222 
	`__glibc_objsize
 (
__li°
),

223 
__size
, 
__li°
);

224 
	}
}

227 
	$__ây«me_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

228 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2))

229 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 2, 3));

230 
	`__REDIRECT_NTH
 (
__ây«me_r_Æüs
, (
__fd
, *
__buf
,

231 
size_t
 
__buÊí
), 
ây«me_r
)

232 
	`__n⁄nuŒ
 ((2));

233 
	`__REDIRECT_NTH
 (
__ây«me_r_chk_w¨n
,

234 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

235 
size_t
 
__ƒól
), 
__ây«me_r_chk
)

236 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ttyname_r called with bigger buflenÅhan "

239 
__f‹tify_fun˘i⁄
 

240 
	`__NTH
 (
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

242  
	`__glibc_f‹tify
 (
ây«me_r
, 
__buÊí
,  (),

243 
	`__glibc_objsize
 (
__buf
),

244 
__fd
, 
__buf
, 
__buÊí
);

245 
	}
}

248 #ifde‡
__USE_POSIX199506


249 
	$__gëlogö_r_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

250 
	`__n⁄nuŒ
 ((1)Ë
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 2));

251 
	`__REDIRECT
 (
__gëlogö_r_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

252 
gëlogö_r
Ë
	`__n⁄nuŒ
 ((1));

253 
	`__REDIRECT
 (
__gëlogö_r_chk_w¨n
,

254 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

255 
__gëlogö_r_chk
)

256 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("getlogin_r called with bigger buflenÅhan "

259 
__f‹tify_fun˘i⁄
 

260 
	$gëlogö_r
 (*
__buf
, 
size_t
 
__buÊí
)

262  
	`__glibc_f‹tify
 (
gëlogö_r
, 
__buÊí
,  (),

263 
	`__glibc_objsize
 (
__buf
),

264 
__buf
, 
__buÊí
);

265 
	}
}

269 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_UNIX98


270 
	$__gëho°«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

271 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 2));

272 
	`__REDIRECT_NTH
 (
__gëho°«me_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

273 
gëho°«me
)

274 
	`__n⁄nuŒ
 ((1)Ë
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 2));

275 
	`__REDIRECT_NTH
 (
__gëho°«me_chk_w¨n
,

276 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

277 
__gëho°«me_chk
)

278 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("gethostname called with bigger buflenÅhan "

281 
__f‹tify_fun˘i⁄
 

282 
	`__NTH
 (
	$gëho°«me
 (*
__buf
, 
size_t
 
__buÊí
))

284  
	`__glibc_f‹tify
 (
gëho°«me
, 
__buÊí
,  (),

285 
	`__glibc_objsize
 (
__buf
),

286 
__buf
, 
__buÊí
);

287 
	}
}

291 #i‡
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

292 
	$__gëdomaö«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

293 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 2));

294 
	`__REDIRECT_NTH
 (
__gëdomaö«me_Æüs
, (*
__buf
,

295 
size_t
 
__buÊí
),

296 
gëdomaö«me
Ë
	`__n⁄nuŒ
 ((1))

297 
__wur
 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 2));

298 
	`__REDIRECT_NTH
 (
__gëdomaö«me_chk_w¨n
,

299 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

300 
__gëdomaö«me_chk
)

301 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("getdomainname called with bigger "

305 
__f‹tify_fun˘i⁄
 

306 
	`__NTH
 (
	$gëdomaö«me
 (*
__buf
, 
size_t
 
__buÊí
))

308  
	`__glibc_f‹tify
 (
gëdomaö«me
, 
__buÊí
,  (),

309 
	`__glibc_objsize
 (
__buf
),

310 
__buf
, 
__buÊí
);

311 
	}
}

	@/usr/include/x86_64-linux-gnu/bits/unistd_ext.h

19 #i‚de‡
_UNISTD_H


23 #ifde‡
__USE_GNU


34 
__pid_t
 
	$gëtid
 (Ë
__THROW
;

36 #ifde‡
__has_ö˛ude


37 #i‡
	`__has_ö˛ude
 ("linux/close_range.h")

38 
	~"löux/˛o£_ønge.h
"

42 #i‚de‡
CLOSE_RANGE_UNSHARE


43 
	#CLOSE_RANGE_UNSHARE
 (1U << 1)

	)

46 #i‚de‡
CLOSE_RANGE_CLOEXEC


47 
	#CLOSE_RANGE_CLOEXEC
 (1U << 2)

	)

	@/usr/include/x86_64-linux-gnu/bits/utmp.h

19 #i‚de‡
_UTMP_H


23 
	~<∑ths.h
>

24 
	~<sys/time.h
>

25 
	~<sys/ty≥s.h
>

26 
	~<bôs/w‹dsize.h
>

29 
	#UT_LINESIZE
 32

	)

30 
	#UT_NAMESIZE
 32

	)

31 
	#UT_HOSTSIZE
 256

	)

36 
	sœ°log


38 #i‡
__WORDSIZE_TIME64_COMPAT32


39 
öt32_t
 
	mŒ_time
;

41 
__time_t
 
	mŒ_time
;

43 
	mŒ_löe
[
UT_LINESIZE
];

44 
	mŒ_ho°
[
UT_HOSTSIZE
];

50 
	sexô_°©us


52 
	me_ãrmö©i⁄
;

53 
	me_exô
;

58 
	sutmp


60 
	mut_ty≥
;

61 
pid_t
 
	mut_pid
;

62 
	mut_löe
[
UT_LINESIZE
]

63 
	m__©åibuã_n⁄°rög__
;

64 
	mut_id
[4]

65 
	m__©åibuã_n⁄°rög__
;

66 
	mut_u£r
[
UT_NAMESIZE
]

67 
	m__©åibuã_n⁄°rög__
;

68 
	mut_ho°
[
UT_HOSTSIZE
]

69 
	m__©åibuã_n⁄°rög__
;

70 
exô_°©us
 
	mut_exô
;

75 #i‡
__WORDSIZE_TIME64_COMPAT32


76 
öt32_t
 
	mut_£ssi⁄
;

79 
öt32_t
 
	mtv_£c
;

80 
öt32_t
 
	mtv_u£c
;

81 } 
	mut_tv
;

83 
	mut_£ssi⁄
;

84 
timevÆ
 
	mut_tv
;

87 
öt32_t
 
	mut_addr_v6
[4];

88 
	m__glibc_ª£rved
[20];

92 
	#ut_«me
 
ut_u£r


	)

93 #i‚de‡
_NO_UT_TIME


96 
	#ut_time
 
ut_tv
.
tv_£c


	)

98 
	#ut_xtime
 
ut_tv
.
tv_£c


	)

99 
	#ut_addr
 
ut_addr_v6
[0]

	)

103 
	#EMPTY
 0

	)

105 
	#RUN_LVL
 1

	)

106 
	#BOOT_TIME
 2

	)

107 
	#NEW_TIME
 3

	)

108 
	#OLD_TIME
 4

	)

110 
	#INIT_PROCESS
 5

	)

111 
	#LOGIN_PROCESS
 6

	)

112 
	#USER_PROCESS
 7

	)

113 
	#DEAD_PROCESS
 8

	)

115 
	#ACCOUNTING
 9

	)

118 
	#UT_UNKNOWN
 
EMPTY


	)

123 
	#_HAVE_UT_TYPE
 1

	)

124 
	#_HAVE_UT_PID
 1

	)

125 
	#_HAVE_UT_ID
 1

	)

126 
	#_HAVE_UT_TV
 1

	)

127 
	#_HAVE_UT_HOST
 1

	)

	@/usr/include/x86_64-linux-gnu/bits/utmpx.h

19 #i‚de‡
_UTMPX_H


23 
	~<bôs/ty≥s.h
>

24 
	~<sys/time.h
>

25 
	~<bôs/w‹dsize.h
>

28 #ifde‡
__USE_GNU


29 
	~<∑ths.h
>

30 
	#_PATH_UTMPX
 
_PATH_UTMP


	)

31 
	#_PATH_WTMPX
 
_PATH_WTMP


	)

35 
	#__UT_LINESIZE
 32

	)

36 
	#__UT_NAMESIZE
 32

	)

37 
	#__UT_HOSTSIZE
 256

	)

42 
	s__exô_°©us


44 #ifde‡
__USE_GNU


45 
	me_ãrmö©i⁄
;

46 
	me_exô
;

48 
	m__e_ãrmö©i⁄
;

49 
	m__e_exô
;

55 
	sutmpx


57 
	mut_ty≥
;

58 
__pid_t
 
	mut_pid
;

59 
	mut_löe
[
__UT_LINESIZE
]

60 
	m__©åibuã_n⁄°rög__
;

61 
	mut_id
[4]

62 
	m__©åibuã_n⁄°rög__
;

63 
	mut_u£r
[
__UT_NAMESIZE
]

64 
	m__©åibuã_n⁄°rög__
;

65 
	mut_ho°
[
__UT_HOSTSIZE
]

66 
	m__©åibuã_n⁄°rög__
;

67 
__exô_°©us
 
	mut_exô
;

73 #i‡
__WORDSIZE_TIME64_COMPAT32


74 
__öt32_t
 
	mut_£ssi⁄
;

77 
__öt32_t
 
	mtv_£c
;

78 
__öt32_t
 
	mtv_u£c
;

79 } 
	mut_tv
;

81 
	mut_£ssi⁄
;

82 
timevÆ
 
	mut_tv
;

84 
__öt32_t
 
	mut_addr_v6
[4];

85 
	m__glibc_ª£rved
[20];

90 
	#EMPTY
 0

	)

92 #ifde‡
__USE_GNU


93 
	#RUN_LVL
 1

	)

95 
	#BOOT_TIME
 2

	)

96 
	#NEW_TIME
 3

	)

97 
	#OLD_TIME
 4

	)

99 
	#INIT_PROCESS
 5

	)

100 
	#LOGIN_PROCESS
 6

	)

101 
	#USER_PROCESS
 7

	)

102 
	#DEAD_PROCESS
 8

	)

104 #ifde‡
__USE_GNU


105 
	#ACCOUNTING
 9

	)

	@/usr/include/x86_64-linux-gnu/bits/utsname.h

18 #i‚de‡
_SYS_UTSNAME_H


23 
	#_UTSNAME_LENGTH
 65

	)

28 
	#_UTSNAME_DOMAIN_LENGTH
 
_UTSNAME_LENGTH


	)

	@/usr/include/x86_64-linux-gnu/bits/waitflags.h

19 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


25 
	#WNOHANG
 1

	)

26 
	#WUNTRACED
 2

	)

29 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


30 
	#WSTOPPED
 2

	)

31 
	#WEXITED
 4

	)

32 
	#WCONTINUED
 8

	)

33 
	#WNOWAIT
 0x01000000

	)

36 
	#__WNOTHREAD
 0x20000000

	)

38 
	#__WALL
 0x40000000

	)

39 
	#__WCLONE
 0x80000000

	)

	@/usr/include/x86_64-linux-gnu/bits/waitstatus.h

19 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


28 
	#__WEXITSTATUS
(
°©us
Ë(((°©usË& 0xff00Ë>> 8)

	)

31 
	#__WTERMSIG
(
°©us
Ë((°©usË& 0x7f)

	)

34 
	#__WSTOPSIG
(
°©us
Ë
	`__WEXITSTATUS
(°©us)

	)

37 
	#__WIFEXITED
(
°©us
Ë(
	`__WTERMSIG
(°©usË=0)

	)

40 
	#__WIFSIGNALED
(
°©us
) \

41 (((sig√d Ë(((
°©us
Ë& 0x7fË+ 1Ë>> 1Ë> 0)

	)

44 
	#__WIFSTOPPED
(
°©us
Ë(((°©usË& 0xffË=0x7f)

	)

48 #ifde‡
WCONTINUED


49 
	#__WIFCONTINUED
(
°©us
Ë((°©usË=
__W_CONTINUED
)

	)

53 
	#__WCOREDUMP
(
°©us
Ë((°©usË& 
__WCOREFLAG
)

	)

56 
	#__W_EXITCODE
(
ªt
, 
sig
Ë(‘ëË<< 8 | (sig))

	)

57 
	#__W_STOPCODE
(
sig
Ë((sigË<< 8 | 0x7f)

	)

58 
	#__W_CONTINUED
 0xffff

	)

59 
	#__WCOREFLAG
 0x80

	)

	@/usr/include/x86_64-linux-gnu/bits/wchar-ldbl.h

19 #i‚de‡
_WCHAR_H


23 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


24 
__LDBL_REDIR_DECL
 (
fw¥ötf
);

25 
__LDBL_REDIR_DECL
 (
w¥ötf
);

26 
__LDBL_REDIR_DECL
 (
sw¥ötf
);

27 
__LDBL_REDIR_DECL
 (
vfw¥ötf
);

28 
__LDBL_REDIR_DECL
 (
vw¥ötf
);

29 
__LDBL_REDIR_DECL
 (
vsw¥ötf
);

30 #i‡!
__GLIBC_USE
 (
DEPRECATED_SCANF
)

31 #i‡
deföed
 
__LDBL_COMPAT


32 
	$__LDBL_REDIR1_DECL
 (
fwsˇnf
, 
__∆dbl___isoc99_fwsˇnf
)

33 
	$__LDBL_REDIR1_DECL
 (
wsˇnf
, 
__∆dbl___isoc99_wsˇnf
)

34 
	$__LDBL_REDIR1_DECL
 (
swsˇnf
, 
__∆dbl___isoc99_swsˇnf
)

35 #ñi‡
__LDOUBLE_REDIRECTS_TO_FLOAT128_ABI
 == 1

36 
	$__LDBL_REDIR1_DECL
 (
fwsˇnf
, 
__isoc99_fwsˇnfõì128
)

37 
	$__LDBL_REDIR1_DECL
 (
wsˇnf
, 
__isoc99_wsˇnfõì128
)

38 
	$__LDBL_REDIR1_DECL
 (
swsˇnf
, 
__isoc99_swsˇnfõì128
)

40 #îr‹ 
bôs
/
°dlib
-
ldbl
.
h
 
ö˛uded
 
whí
 
no
Üdb»
ªdúe˘i⁄s
 
¨e
 
ªquúed
.

43 
	`__LDBL_REDIR_DECL
 (
fwsˇnf
);

44 
	`__LDBL_REDIR_DECL
 (
wsˇnf
);

45 
	`__LDBL_REDIR_DECL
 (
swsˇnf
);

49 #ifde‡
__USE_ISOC99


50 #ifde‡
__LDBL_COMPAT


51 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd
, 
wc°od
);

53 
	$__LDBL_REDIR1_DECL
 (
wc°ﬁd
, 
__wc°oõì128
)

55 #i‡!
	`__GLIBC_USE
 (
DEPRECATED_SCANF
)

56 #i‡
deföed
 
__LDBL_COMPAT


57 
	$__LDBL_REDIR1_DECL
 (
vfwsˇnf
, 
__∆dbl___isoc99_vfwsˇnf
)

58 
	$__LDBL_REDIR1_DECL
 (
vwsˇnf
, 
__∆dbl___isoc99_vwsˇnf
)

59 
	$__LDBL_REDIR1_DECL
 (
vswsˇnf
, 
__∆dbl___isoc99_vswsˇnf
)

60 #ñi‡
__LDOUBLE_REDIRECTS_TO_FLOAT128_ABI
 == 1

61 
	$__LDBL_REDIR1_DECL
 (
vfwsˇnf
, 
__isoc99_vfwsˇnfõì128
)

62 
	$__LDBL_REDIR1_DECL
 (
vwsˇnf
, 
__isoc99_vwsˇnfõì128
)

63 
	$__LDBL_REDIR1_DECL
 (
vswsˇnf
, 
__isoc99_vswsˇnfõì128
)

65 #îr‹ 
bôs
/
°dlib
-
ldbl
.
h
 
ö˛uded
 
whí
 
no
Üdb»
ªdúe˘i⁄s
 
¨e
 
ªquúed
.

68 
	`__LDBL_REDIR_DECL
 (
vfwsˇnf
);

69 
	`__LDBL_REDIR_DECL
 (
vwsˇnf
);

70 
	`__LDBL_REDIR_DECL
 (
vswsˇnf
);

74 #ifde‡
__USE_GNU


75 #ifde‡
__LDBL_COMPAT


76 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd_l
, 
wc°od_l
);

78 
	$__LDBL_REDIR1_DECL
 (
wc°ﬁd_l
, 
__wc°oõì128_l
)

82 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


83 
	$__LDBL_REDIR2_DECL
 (
sw¥ötf_chk
)

84 
	$__LDBL_REDIR2_DECL
 (
vsw¥ötf_chk
)

85 #i‡
__USE_FORTIFY_LEVEL
 > 1

86 
	$__LDBL_REDIR2_DECL
 (
fw¥ötf_chk
)

87 
	$__LDBL_REDIR2_DECL
 (
w¥ötf_chk
)

88 
	$__LDBL_REDIR2_DECL
 (
vfw¥ötf_chk
)

89 
	$__LDBL_REDIR2_DECL
 (
vw¥ötf_chk
)

	@/usr/include/x86_64-linux-gnu/bits/wchar.h

19 #i‚de‡
_BITS_WCHAR_H


20 
	#_BITS_WCHAR_H
 1

	)

33 #ifde‡
__WCHAR_MAX__


34 
	#__WCHAR_MAX
 
__WCHAR_MAX__


	)

35 #ñi‡
L
'\0' - 1 > 0

36 
	#__WCHAR_MAX
 (0xffffffffu + 
L
'\0')

	)

38 
	#__WCHAR_MAX
 (0x7ffffff‡+ 
L
'\0')

	)

41 #ifde‡
__WCHAR_MIN__


42 
	#__WCHAR_MIN
 
__WCHAR_MIN__


	)

43 #ñi‡
L
'\0' - 1 > 0

44 
	#__WCHAR_MIN
 (
L
'\0' + 0)

	)

46 
	#__WCHAR_MIN
 (-
__WCHAR_MAX
 - 1)

	)

	@/usr/include/x86_64-linux-gnu/bits/wchar2.h

19 #i‚de‡
_WCHAR_H


24 
wch¨_t
 *
	$__wmem˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

25 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

26 
size_t
 
__ns1
Ë
__THROW
;

27 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_Æüs
,

28 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

29 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
),

30 
wmem˝y
);

31 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_chk_w¨n
,

32 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

33 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

34 
size_t
 
__ns1
), 
__wmem˝y_chk
)

35 
	`__w¨«âr
 ("wmemcpy called withÜength biggerÅhan size of destination "

38 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

39 
	`__NTH
 (
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, c⁄° wch¨_à*__ª°ri˘ 
__s2
,

40 
size_t
 
__n
))

42  
	`__glibc_f‹tify_n
 (
wmem˝y
, 
__n
,  (
wch¨_t
),

43 
	`__glibc_objsize0
 (
__s1
),

44 
__s1
, 
__s2
, 
__n
);

45 
	}
}

48 
wch¨_t
 *
	$__wmemmove_chk
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

49 
size_t
 
__n
, size_à
__ns1
Ë
__THROW
;

50 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_Æüs
, (wch¨_à*
__s1
,

51 c⁄° 
wch¨_t
 *
__s2
,

52 
size_t
 
__n
), 
wmemmove
);

53 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_chk_w¨n
,

54 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

55 
size_t
 
__n
, size_à
__ns1
), 
__wmemmove_chk
)

56 
	`__w¨«âr
 ("wmemmove called withÜength biggerÅhan size of destination "

59 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

60 
	`__NTH
 (
	$wmemmove
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
))

62  
	`__glibc_f‹tify_n
 (
wmemmove
, 
__n
,  (
wch¨_t
),

63 
	`__glibc_objsize0
 (
__s1
),

64 
__s1
, 
__s2
, 
__n
);

65 
	}
}

68 #ifde‡
__USE_GNU


69 
wch¨_t
 *
	$__wmemp˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

70 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

71 
size_t
 
__ns1
Ë
__THROW
;

72 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_Æüs
,

73 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

74 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
,

75 
size_t
 
__n
), 
wmemp˝y
);

76 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_chk_w¨n
,

77 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

78 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

79 
size_t
 
__ns1
), 
__wmemp˝y_chk
)

80 
	`__w¨«âr
 ("wmempcpy called withÜength biggerÅhan size of destination "

83 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

84 
	`__NTH
 (
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, c⁄° wch¨_à*__ª°ri˘ 
__s2
,

85 
size_t
 
__n
))

87  
	`__glibc_f‹tify_n
 (
wmemp˝y
, 
__n
,  (
wch¨_t
),

88 
	`__glibc_objsize0
 (
__s1
),

89 
__s1
, 
__s2
, 
__n
);

90 
	}
}

94 
wch¨_t
 *
	$__wmem£t_chk
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

95 
size_t
 
__ns
Ë
__THROW
;

96 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_Æüs
, (wch¨_à*
__s
, wch¨_à
__c
,

97 
size_t
 
__n
), 
wmem£t
);

98 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_chk_w¨n
,

99 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

100 
size_t
 
__ns
), 
__wmem£t_chk
)

101 
	`__w¨«âr
 ("wmemset called withÜength biggerÅhan size of destination "

104 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

105 
	`__NTH
 (
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
))

107  
	`__glibc_f‹tify_n
 (
wmem£t
, 
__n
,  (
wch¨_t
),

108 
	`__glibc_objsize0
 (
__s
),

109 
__s
, 
__c
, 
__n
);

110 
	}
}

113 
wch¨_t
 *
	$__wcs˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

114 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

115 
size_t
 
__n
Ë
__THROW
;

116 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcs˝y_Æüs
,

117 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

118 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcs˝y
);

120 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

121 
	`__NTH
 (
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
))

123 
size_t
 
sz
 = 
	`__glibc_objsize
 (
__de°
);

124 i‡(
sz
 !(
size_t
) -1)

125  
	`__wcs˝y_chk
 (
__de°
, 
__§c
, 
sz
 /  (
wch¨_t
));

126  
	`__wcs˝y_Æüs
 (
__de°
, 
__§c
);

127 
	}
}

130 
wch¨_t
 *
	$__w˝˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

131 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

132 
size_t
 
__de°Àn
Ë
__THROW
;

133 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝˝y_Æüs
,

134 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

135 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
w˝˝y
);

137 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

138 
	`__NTH
 (
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
))

140 
size_t
 
sz
 = 
	`__glibc_objsize
 (
__de°
);

141 i‡(
sz
 !(
size_t
) -1)

142  
	`__w˝˝y_chk
 (
__de°
, 
__§c
, 
sz
 /  (
wch¨_t
));

143  
	`__w˝˝y_Æüs
 (
__de°
, 
__§c
);

144 
	}
}

147 
wch¨_t
 *
	$__wc¢˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

149 
size_t
 
__de°Àn
Ë
__THROW
;

150 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_Æüs
,

151 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

152 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

153 
size_t
 
__n
), 
wc¢˝y
);

154 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_chk_w¨n
,

155 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

156 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

157 
size_t
 
__n
, size_à
__de°Àn
), 
__wc¢˝y_chk
)

158 
	`__w¨«âr
 ("wcsncpy called withÜength biggerÅhan size of destination "

161 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

162 
	`__NTH
 (
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
,

163 
size_t
 
__n
))

165  
	`__glibc_f‹tify_n
 (
wc¢˝y
, 
__n
,  (
wch¨_t
),

166 
	`__glibc_objsize
 (
__de°
),

167 
__de°
, 
__§c
, 
__n
);

168 
	}
}

171 
wch¨_t
 *
	$__w˝n˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

172 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

173 
size_t
 
__de°Àn
Ë
__THROW
;

174 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_Æüs
,

175 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

176 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

177 
size_t
 
__n
), 
w˝n˝y
);

178 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_chk_w¨n
,

179 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

180 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

181 
size_t
 
__n
, size_à
__de°Àn
), 
__w˝n˝y_chk
)

182 
	`__w¨«âr
 ("wcpncpy called withÜength biggerÅhan size of destination "

185 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

186 
	`__NTH
 (
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
,

187 
size_t
 
__n
))

189  
	`__glibc_f‹tify_n
 (
w˝n˝y
, 
__n
,  (
wch¨_t
),

190 
	`__glibc_objsize
 (
__de°
),

191 
__de°
, 
__§c
, 
__n
);

192 
	}
}

195 
wch¨_t
 *
	$__wcsˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

196 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

197 
size_t
 
__de°Àn
Ë
__THROW
;

198 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcsˇt_Æüs
,

199 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

200 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcsˇt
);

202 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

203 
	`__NTH
 (
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
))

205 
size_t
 
sz
 = 
	`__glibc_objsize
 (
__de°
);

206 i‡(
sz
 !(
size_t
) -1)

207  
	`__wcsˇt_chk
 (
__de°
, 
__§c
, 
sz
 /  (
wch¨_t
));

208  
	`__wcsˇt_Æüs
 (
__de°
, 
__§c
);

209 
	}
}

212 
wch¨_t
 *
	$__wc¢ˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

213 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

214 
size_t
 
__n
, size_à
__de°Àn
Ë
__THROW
;

215 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢ˇt_Æüs
,

216 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

217 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

218 
size_t
 
__n
), 
wc¢ˇt
);

220 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

221 
	`__NTH
 (
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
,

222 
size_t
 
__n
))

224 
size_t
 
sz
 = 
	`__glibc_objsize
 (
__de°
);

225 i‡(
sz
 !(
size_t
) -1)

226  
	`__wc¢ˇt_chk
 (
__de°
, 
__§c
, 
__n
, 
sz
 /  (
wch¨_t
));

227  
	`__wc¢ˇt_Æüs
 (
__de°
, 
__§c
, 
__n
);

228 
	}
}

231 
	$__sw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

232 
__Êag
, 
size_t
 
__s_Àn
,

233 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

234 
__THROW
 ;

236 
	`__REDIRECT_NTH_LDBL
 (
__sw¥ötf_Æüs
,

237 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

238 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...),

239 
sw¥ötf
);

241 #ifde‡
__va_¨g_∑ck


242 
__f‹tify_fun˘i⁄
 

243 
	`__NTH
 (
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

244 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...))

246 
size_t
 
sz
 = 
	`__glibc_objsize
 (
__s
);

247 i‡(
sz
 !(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

248  
	`__sw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

249 
sz
 /  (
wch¨_t
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

250  
	`__sw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
	`__va_¨g_∑ck
 ());

251 
	}
}

252 #ñi‡!
deföed
 
__˝lu•lus


254 
	#sw¥ötf
(
s
, 
n
, ...) \

255 (
	`__glibc_objsize
 (
s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1 \

256 ? 
	`__sw¥ötf_chk
 (
s
, 
n
, 
__USE_FORTIFY_LEVEL
 - 1, \

257 
	`__glibc_objsize
 (
s
Ë/  (
wch¨_t
), 
__VA_ARGS__
) \

258 : 
	`sw¥ötf
 (
s
, 
n
, 
__VA_ARGS__
))

	)

261 
	$__vsw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

262 
__Êag
, 
size_t
 
__s_Àn
,

263 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

264 
__gnuc_va_li°
 
__¨g
)

265 
__THROW
 ;

267 
	`__REDIRECT_NTH_LDBL
 (
__vsw¥ötf_Æüs
,

268 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

269 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
,

270 
__gnuc_va_li°
 
__≠
), 
vsw¥ötf
);

272 
__f‹tify_fun˘i⁄
 

273 
	`__NTH
 (
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

274 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
))

276 
size_t
 
sz
 = 
	`__glibc_objsize
 (
__s
);

277 i‡(
sz
 !(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

278  
	`__vsw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

279 
sz
 /  (
wch¨_t
), 
__fmt
, 
__≠
);

280  
	`__vsw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
__≠
);

281 
	}
}

284 #i‡
__USE_FORTIFY_LEVEL
 > 1

286 
__fw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

287 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

288 
__w¥ötf_chk
 (
__Êag
, c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

290 
__vfw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

291 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

292 
__gnuc_va_li°
 
__≠
);

293 
__vw¥ötf_chk
 (
__Êag
, c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

294 
__gnuc_va_li°
 
__≠
);

296 #ifde‡
__va_¨g_∑ck


297 
__f‹tify_fun˘i⁄
 

298 
	$w¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...)

300  
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

301 
	}
}

303 
__f‹tify_fun˘i⁄
 

304 
	$fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, c⁄° 
wch¨_t
 *__ª°ri˘ 
__fmt
, ...)

306  
	`__fw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

307 
	`__va_¨g_∑ck
 ());

308 
	}
}

309 #ñi‡!
deföed
 
__˝lu•lus


310 
	#w¥ötf
(...) \

311 
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

312 
	#fw¥ötf
(
°ªam
, ...) \

313 
	`__fw¥ötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

316 
__f‹tify_fun˘i⁄
 

317 
	$vw¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

319  
	`__vw¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

320 
	}
}

322 
__f‹tify_fun˘i⁄
 

323 
	$vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

324 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

326  
	`__vfw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

327 
	}
}

331 
wch¨_t
 *
	$__fgëws_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

332 
__FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

333 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_Æüs
,

334 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

335 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws
Ë
__wur
;

336 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_chk_w¨n
,

337 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

338 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgëws_chk
)

339 
__wur
 
	`__w¨«âr
 ("fgetws called with bigger sizeÅhanÜength "

342 
__f‹tify_fun˘i⁄
 
__wur
 
wch¨_t
 *

343 
	$fgëws
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

345 
size_t
 
sz
 = 
	`__glibc_objsize
 (
__s
);

346 i‡(
	`__glibc_ß„_‹_unknown_Àn
 (
__n
,  (
wch¨_t
), 
sz
))

347  
	`__fgëws_Æüs
 (
__s
, 
__n
, 
__°ªam
);

348 i‡(
	`__glibc_unß„_Àn
 (
__n
,  (
wch¨_t
), 
sz
))

349  
	`__fgëws_chk_w¨n
 (
__s
, 
sz
 /  (
wch¨_t
), 
__n
, 
__°ªam
);

350  
	`__fgëws_chk
 (
__s
, 
sz
 /  (
wch¨_t
), 
__n
, 
__°ªam
);

351 
	}
}

353 #ifde‡
__USE_GNU


354 
wch¨_t
 *
	$__fgëws_u∆ocked_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
,

355 
__n
, 
__FILE
 *
__ª°ri˘
 
__°ªam
)

356 
__wur
;

357 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_Æüs
,

358 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

359 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws_u∆ocked
)

360 
__wur
;

361 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_chk_w¨n
,

362 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

363 
__FILE
 *
__ª°ri˘
 
__°ªam
),

364 
__fgëws_u∆ocked_chk
)

365 
__wur
 
	`__w¨«âr
 ("fgetws_unlocked called with bigger sizeÅhanÜength "

368 
__f‹tify_fun˘i⁄
 
__wur
 
wch¨_t
 *

369 
	$fgëws_u∆ocked
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

371 
size_t
 
sz
 = 
	`__glibc_objsize
 (
__s
);

372 i‡(
	`__glibc_ß„_‹_unknown_Àn
 (
__n
,  (
wch¨_t
), 
sz
))

373  
	`__fgëws_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

374 i‡(
	`__glibc_unß„_Àn
 (
__n
,  (
wch¨_t
), 
sz
))

375  
	`__fgëws_u∆ocked_chk_w¨n
 (
__s
, 
sz
 /  (
wch¨_t
), 
__n
,

376 
__°ªam
);

377  
	`__fgëws_u∆ocked_chk
 (
__s
, 
sz
 /  (
wch¨_t
), 
__n
, 
__°ªam
);

378 
	}
}

382 
size_t
 
	$__w¸tomb_chk
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

383 
mb°©e_t
 *
__ª°ri˘
 
__p
,

384 
size_t
 
__buÊí
Ë
__THROW
 
__wur
;

385 
size_t
 
	`__REDIRECT_NTH
 (
__w¸tomb_Æüs
,

386 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

387 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
w¸tomb
Ë
__wur
;

389 
__f‹tify_fun˘i⁄
 
__wur
 
size_t


390 
	`__NTH
 (
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

391 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

396 
	#__WCHAR_MB_LEN_MAX
 16

	)

397 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__WCHAR_MB_LEN_MAX


400 i‡(
	`__glibc_objsize
 (
__s
Ë!(
size_t
) -1

401 && 
__WCHAR_MB_LEN_MAX
 > 
	`__glibc_objsize
 (
__s
))

402  
	`__w¸tomb_chk
 (
__s
, 
__wch¨
, 
__ps
, 
	`__glibc_objsize
 (__s));

403  
	`__w¸tomb_Æüs
 (
__s
, 
__wch¨
, 
__ps
);

404 
	}
}

407 
size_t
 
	$__mb§towcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

408 c⁄° **
__ª°ri˘
 
__§c
,

409 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

410 
size_t
 
__d°Àn
Ë
__THROW
;

411 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_Æüs
,

412 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

413 c⁄° **
__ª°ri˘
 
__§c
,

414 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

415 
mb§towcs
);

416 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_chk_w¨n
,

417 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

418 c⁄° **
__ª°ri˘
 
__§c
,

419 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

420 
size_t
 
__d°Àn
), 
__mb§towcs_chk
)

421 
	`__w¨«âr
 ("mbsrtowcs called with dst buffer smallerÅhanÜen "

424 
__f‹tify_fun˘i⁄
 
size_t


425 
	`__NTH
 (
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, c⁄° **__ª°ri˘ 
__§c
,

426 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

428  
	`__glibc_f‹tify_n
 (
mb§towcs
, 
__Àn
,  (
wch¨_t
),

429 
	`__glibc_objsize
 (
__d°
),

430 
__d°
, 
__§c
, 
__Àn
, 
__ps
);

431 
	}
}

434 
size_t
 
	$__wc§tombs_chk
 (*
__ª°ri˘
 
__d°
,

435 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

436 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

437 
size_t
 
__d°Àn
Ë
__THROW
;

438 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_Æüs
,

439 (*
__ª°ri˘
 
__d°
,

440 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

441 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

442 
wc§tombs
);

443 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_chk_w¨n
,

444 (*
__ª°ri˘
 
__d°
,

445 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

446 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

447 
size_t
 
__d°Àn
), 
__wc§tombs_chk
)

448 
	`__w¨«âr
 ("wcsrtombs called with dst buffer smallerÅhanÜen");

450 
__f‹tify_fun˘i⁄
 
size_t


451 
	`__NTH
 (
	$wc§tombs
 (*
__ª°ri˘
 
__d°
, c⁄° 
wch¨_t
 **__ª°ri˘ 
__§c
,

452 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

454  
	`__glibc_f‹tify
 (
wc§tombs
, 
__Àn
,  (),

455 
	`__glibc_objsize
 (
__d°
),

456 
__d°
, 
__§c
, 
__Àn
, 
__ps
);

457 
	}
}

460 #ifdef 
__USE_XOPEN2K8


461 
size_t
 
	$__mb¢πowcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

462 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

463 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

464 
size_t
 
__d°Àn
Ë
__THROW
;

465 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_Æüs
,

466 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

467 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

468 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

469 
mb¢πowcs
);

470 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_chk_w¨n
,

471 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

472 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

473 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

474 
size_t
 
__d°Àn
), 
__mb¢πowcs_chk
)

475 
	`__w¨«âr
 ("mbsnrtowcs called with dst buffer smallerÅhanÜen "

478 
__f‹tify_fun˘i⁄
 
size_t


479 
	`__NTH
 (
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, c⁄° **__ª°ri˘ 
__§c
,

480 
size_t
 
__nmc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

482  
	`__glibc_f‹tify_n
 (
mb¢πowcs
, 
__Àn
,  (
wch¨_t
),

483 
	`__glibc_objsize
 (
__d°
),

484 
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
);

485 
	}
}

488 
size_t
 
	$__wc¢πombs_chk
 (*
__ª°ri˘
 
__d°
,

489 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

490 
size_t
 
__nwc
, size_à
__Àn
,

491 
mb°©e_t
 *
__ª°ri˘
 
__ps
, 
size_t
 
__d°Àn
)

492 
__THROW
;

493 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_Æüs
,

494 (*
__ª°ri˘
 
__d°
,

495 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

496 
size_t
 
__nwc
, size_à
__Àn
,

497 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
wc¢πombs
);

498 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_chk_w¨n
,

499 (*
__ª°ri˘
 
__d°
,

500 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

501 
size_t
 
__nwc
, size_à
__Àn
,

502 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

503 
size_t
 
__d°Àn
), 
__wc¢πombs_chk
)

504 
	`__w¨«âr
 ("wcsnrtombs called with dst buffer smallerÅhanÜen");

506 
__f‹tify_fun˘i⁄
 
size_t


507 
	`__NTH
 (
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
, c⁄° 
wch¨_t
 **__ª°ri˘ 
__§c
,

508 
size_t
 
__nwc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

510  
	`__glibc_f‹tify
 (
wc¢πombs
, 
__Àn
,  (),

511 
	`__glibc_objsize
 (
__d°
),

512 
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
);

513 
	}
}

	@/usr/include/x86_64-linux-gnu/bits/wctype-wchar.h

23 #i‚de‡
_BITS_WCTYPE_WCHAR_H


24 
	#_BITS_WCTYPE_WCHAR_H
 1

	)

26 #i‡!
deföed
 
_WCTYPE_H
 && !deföed 
_WCHAR_H


30 
	~<bôs/ty≥s.h
>

31 
	~<bôs/ty≥s/wöt_t.h
>

38 
	tw˘y≥_t
;

40 #i‚de‡
_ISwbô


45 
	~<bôs/ídün.h
>

46 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


47 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

49 
	#_ISwbô
(
bô
) \

50 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

51 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

52 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

53 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

58 
	m__ISwuµî
 = 0,

59 
	m__ISwlowî
 = 1,

60 
	m__ISwÆpha
 = 2,

61 
	m__ISwdigô
 = 3,

62 
	m__ISwxdigô
 = 4,

63 
	m__ISw•a˚
 = 5,

64 
	m__ISw¥öt
 = 6,

65 
	m__ISwgøph
 = 7,

66 
	m__ISwbœnk
 = 8,

67 
	m__ISw˙ål
 = 9,

68 
	m__ISwpun˘
 = 10,

69 
	m__ISwÆnum
 = 11,

71 
	m_ISwuµî
 = 
_ISwbô
 (
__ISwuµî
),

72 
	m_ISwlowî
 = 
_ISwbô
 (
__ISwlowî
),

73 
	m_ISwÆpha
 = 
_ISwbô
 (
__ISwÆpha
),

74 
	m_ISwdigô
 = 
_ISwbô
 (
__ISwdigô
),

75 
	m_ISwxdigô
 = 
_ISwbô
 (
__ISwxdigô
),

76 
	m_ISw•a˚
 = 
_ISwbô
 (
__ISw•a˚
),

77 
	m_ISw¥öt
 = 
_ISwbô
 (
__ISw¥öt
),

78 
	m_ISwgøph
 = 
_ISwbô
 (
__ISwgøph
),

79 
	m_ISwbœnk
 = 
_ISwbô
 (
__ISwbœnk
),

80 
	m_ISw˙ål
 = 
_ISwbô
 (
__ISw˙ål
),

81 
	m_ISwpun˘
 = 
_ISwbô
 (
__ISwpun˘
),

82 
	m_ISwÆnum
 = 
_ISwbô
 (
__ISwÆnum
)

87 
__BEGIN_DECLS


95 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

101 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

104 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

108 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

112 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

117 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

120 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

125 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

130 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

135 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

140 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

145 #ifde‡
__USE_ISOC99


146 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

155 
w˘y≥_t
 
	$w˘y≥
 (c⁄° *
__¥›îty
Ë
__THROW
;

159 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

166 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

169 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

171 
__END_DECLS


	@/usr/include/x86_64-linux-gnu/bits/wordsize.h

3 #i‡
deföed
 
__x86_64__
 && !deföed 
__ILP32__


4 
	#__WORDSIZE
 64

	)

6 
	#__WORDSIZE
 32

	)

7 
	#__WORDSIZE32_SIZE_ULONG
 0

	)

8 
	#__WORDSIZE32_PTRDIFF_LONG
 0

	)

11 #ifde‡
__x86_64__


12 
	#__WORDSIZE_TIME64_COMPAT32
 1

	)

14 
	#__SYSCALL_WORDSIZE
 64

	)

16 
	#__WORDSIZE_TIME64_COMPAT32
 0

	)

	@/usr/include/x86_64-linux-gnu/bits/xopen_lim.h

29 #i‚de‡
_XOPEN_LIM_H


30 
	#_XOPEN_LIM_H
 1

	)

62 
	#_XOPEN_IOV_MAX
 
_POSIX_UIO_MAXIOV


	)

64 
	~<bôs/uio_lim.h
>

65 #ifde‡
__IOV_MAX


66 
	#IOV_MAX
 
__IOV_MAX


	)

68 #unde‡
IOV_MAX


73 
	#NL_ARGMAX
 
_POSIX_ARG_MAX


	)

76 
	#NL_LANGMAX
 
_POSIX2_LINE_MAX


	)

79 
	#NL_MSGMAX
 
INT_MAX


	)

83 #i‡
deföed
 
__USE_GNU
 || !deföed 
__USE_XOPEN2K8


84 
	#NL_NMAX
 
INT_MAX


	)

88 
	#NL_SETMAX
 
INT_MAX


	)

91 
	#NL_TEXTMAX
 
INT_MAX


	)

94 
	#NZERO
 20

	)

98 #ifde‡
INT_MAX


99 #i‡
INT_MAX
 == 32767

100 
	#WORD_BIT
 16

	)

102 #i‡
INT_MAX
 == 2147483647

103 
	#WORD_BIT
 32

	)

106 
	#WORD_BIT
 64

	)

109 #ñi‡
deföed
 
__INT_MAX__


110 #i‡
__INT_MAX__
 == 32767

111 
	#WORD_BIT
 16

	)

113 #i‡
__INT_MAX__
 == 2147483647

114 
	#WORD_BIT
 32

	)

117 
	#WORD_BIT
 64

	)

121 
	#WORD_BIT
 32

	)

125 #ifde‡
LONG_MAX


126 #i‡
LONG_MAX
 == 2147483647

127 
	#LONG_BIT
 32

	)

130 
	#LONG_BIT
 64

	)

132 #ñi‡
deföed
 
__LONG_MAX__


133 #i‡
__LONG_MAX__
 == 2147483647

134 
	#LONG_BIT
 32

	)

137 
	#LONG_BIT
 64

	)

140 
	~<bôs/w‹dsize.h
>

141 #i‡
__WORDSIZE
 == 64

142 
	#LONG_BIT
 64

	)

144 
	#LONG_BIT
 32

	)

	@/usr/include/x86_64-linux-gnu/c++/11/bits/atomic_word.h

29 #i‚de‡
_GLIBCXX_ATOMIC_WORD_H


30 
	#_GLIBCXX_ATOMIC_WORD_H
 1

	)

32 
	t_Atomic_w‹d
;

36 
	#_GLIBCXX_READ_MEM_BARRIER
 
	`__©omic_thªad_„n˚
 (
__ATOMIC_ACQUIRE
)

	)

38 
	#_GLIBCXX_WRITE_MEM_BARRIER
 
	`__©omic_thªad_„n˚
 (
__ATOMIC_RELEASE
)

	)

	@/usr/include/x86_64-linux-gnu/c++/11/bits/basic_file.h

34 #i‚de‡
_GLIBCXX_BASIC_FILE_STDIO_H


35 
	#_GLIBCXX_BASIC_FILE_STDIO_H
 1

	)

37 #¥agm®
GCC
 
sy°em_hódî


39 
	~<bôs/c++c⁄fig.h
>

40 
	~<bôs/c++io.h
>

41 
	~<bôs/move.h
>

42 
	~<ios
>

44 
«me•a˚
 
°d
 
	$_GLIBCXX_VISIBILITY
()

46 
_GLIBCXX_BEGIN_NAMESPACE_VERSION


49 
ãm∂©e
<
ty≥«me
 
_Ch¨T
>

50 
˛ass
 
__basic_fûe
;

53 
ãm∂©e
<>

54 
˛ass
 
__basic_fûe
<>

57 
__c_fûe
* 
_M_cfûe
;

60 
boﬁ
 
_M_cfûe_¸óãd
;

62 
public
:

63 
	`__basic_fûe
(
__c_lock
* 
__lock
 = 0Ë
	`throw
 ();

65 #i‡
__˝lu•lus
 >= 201103L

66 
	`__basic_fûe
(
__basic_fûe
&& 
__rv
, 
__c_lock
* = 0Ë
n€x˚±


67 : 
	`_M_cfûe
(
__rv
.
_M_cfûe
), 
	`_M_cfûe_¸óãd
(__rv.
_M_cfûe_¸óãd
)

69 
__rv
.
_M_cfûe
 = 
nuŒ±r
;

70 
__rv
.
_M_cfûe_¸óãd
 = 
Ál£
;

73 
__basic_fûe
& 
›î©‹
=(c⁄° __basic_fûe&Ë
dñëe
;

74 
__basic_fûe
& 
›î©‹
=(__basic_fûe&&Ë
dñëe
;

77 
	`sw≠
(
__basic_fûe
& 
__f
Ë
n€x˚±


79 
°d
::
	`sw≠
(
_M_cfûe
, 
__f
._M_cfile);

80 
°d
::
	`sw≠
(
_M_cfûe_¸óãd
, 
__f
._M_cfile_created);

84 
__basic_fûe
*

85 
	`›í
(c⁄° * 
__«me
, 
ios_ba£
::
›ímode
 
__mode
, 
__¥Ÿ
 = 0664);

87 #i‡
_GLIBCXX_HAVE__WFOPEN
 && 
_GLIBCXX_USE_WCHAR_T


88 
__basic_fûe
*

89 
	`›í
(c⁄° 
wch¨_t
* 
__«me
, 
ios_ba£
::
›ímode
 
__mode
);

92 
__basic_fûe
*

93 
	`sys_›í
(
__c_fûe
* 
__fûe
, 
ios_ba£
::
›ímode
);

95 
__basic_fûe
*

96 
	`sys_›í
(
__fd
, 
ios_ba£
::
›ímode
 
__mode
Ë
	`throw
 ();

98 
__basic_fûe
*

99 
	`˛o£
();

101 
_GLIBCXX_PURE
 
boﬁ


102 
	`is_›í
(Ëc⁄° 
	`throw
 ();

104 
_GLIBCXX_PURE
 

105 
	`fd
(Ë
	`throw
 ();

107 
_GLIBCXX_PURE
 
__c_fûe
*

108 
	`fûe
(Ë
	`throw
 ();

110 ~
	`__basic_fûe
();

112 
°ªamsize


113 
	`x•uä
(c⁄° * 
__s
, 
°ªamsize
 
__n
);

115 
°ªamsize


116 
	`x•uä_2
(c⁄° * 
__s1
, 
°ªamsize
 
__n1
,

117 c⁄° * 
__s2
, 
°ªamsize
 
__n2
);

119 
°ªamsize


120 
	`xsgën
(* 
__s
, 
°ªamsize
 
__n
);

122 
°ªamoff


123 
	`£ekoff
(
°ªamoff
 
__off
, 
ios_ba£
::
£ekdú
 
__way
Ë
	`throw
 ();

126 
	`sync
();

128 
°ªamsize


129 
	`showm™yc
();

132 
_GLIBCXX_END_NAMESPACE_VERSION


133 
	}
}

	@/usr/include/x86_64-linux-gnu/c++/11/bits/c++allocator.h

30 #i‚de‡
_GLIBCXX_CXX_ALLOCATOR_H


31 
	#_GLIBCXX_CXX_ALLOCATOR_H
 1

	)

33 
	~<ext/√w_Æloˇt‹.h
>

35 #i‡
__˝lu•lus
 >= 201103L

36 
«me•a˚
 
	g°d


47 
	gãm∂©e
<
ty≥«me
 
	g_Tp
>

48 
usög
 
	g__Æloˇt‹_ba£
 = 
__gnu_cxx
::
√w_Æloˇt‹
<
_Tp
>;

52 
	#__Æloˇt‹_ba£
 
__gnu_cxx
::
√w_Æloˇt‹


	)

55 #i‚de‡
_GLIBCXX_SANITIZE_STD_ALLOCATOR


56 #i‡
deföed
(
__SANITIZE_ADDRESS__
)

57 
	#_GLIBCXX_SANITIZE_STD_ALLOCATOR
 1

	)

58 #ñi‡
deföed
 
__has_„©uª


59 #i‡
__has_„©uª
(
addªss_ßnôizî
)

60 
	#_GLIBCXX_SANITIZE_STD_ALLOCATOR
 1

	)

	@/usr/include/x86_64-linux-gnu/c++/11/bits/c++config.h

30 #i‚de‡
_GLIBCXX_CXX_CONFIG_H


31 
	#_GLIBCXX_CXX_CONFIG_H
 1

	)

34 
	#_GLIBCXX_RELEASE
 11

	)

37 
	#__GLIBCXX__
 20230528

	)

45 #i‚de‡
_GLIBCXX_PURE


46 
	#_GLIBCXX_PURE
 
	`__©åibuã__
 ((
__puª__
))

	)

49 #i‚de‡
_GLIBCXX_CONST


50 
	#_GLIBCXX_CONST
 
	`__©åibuã__
 ((
__c⁄°__
))

	)

53 #i‚de‡
_GLIBCXX_NORETURN


54 
	#_GLIBCXX_NORETURN
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

	)

58 #i‚de‡
_GLIBCXX_NOTHROW


59 #i‚de‡
__˝lu•lus


60 
	#_GLIBCXX_NOTHROW
 
	`__©åibuã__
((
__nŸhrow__
))

	)

67 
	#_GLIBCXX_HAVE_ATTRIBUTE_VISIBILITY
 1

	)

69 #i‡
_GLIBCXX_HAVE_ATTRIBUTE_VISIBILITY


70 
	#_GLIBCXX_VISIBILITY
(
V
Ë
	`__©åibuã__
 ((
	`__visibûôy__
 (#V)))

	)

74 
	#_GLIBCXX_VISIBILITY
(
V
Ë
	`_GLIBCXX_PSEUDO_VISIBILITY
(V)

	)

87 #i‚de‡
_GLIBCXX_USE_DEPRECATED


88 
	#_GLIBCXX_USE_DEPRECATED
 1

	)

91 #i‡
deföed
(
__DEPRECATED
)

92 
	#_GLIBCXX_DEPRECATED
 
	`__©åibuã__
 ((
__dïªˇãd__
))

	)

93 
	#_GLIBCXX_DEPRECATED_SUGGEST
(
ALT
) \

94 
	`__©åibuã__
 ((
	`__dïªˇãd__
 ("u£ '" 
ALT
 "' in°ód")))

	)

96 
	#_GLIBCXX_DEPRECATED


	)

97 
	#_GLIBCXX_DEPRECATED_SUGGEST
(
ALT
)

	)

100 #i‡
deföed
(
__DEPRECATED
Ë&& (
__˝lu•lus
 >= 201103L)

101 
	#_GLIBCXX11_DEPRECATED
 
_GLIBCXX_DEPRECATED


	)

102 
	#_GLIBCXX11_DEPRECATED_SUGGEST
(
ALT
Ë
	`_GLIBCXX_DEPRECATED_SUGGEST
(ALT)

	)

104 
	#_GLIBCXX11_DEPRECATED


	)

105 
	#_GLIBCXX11_DEPRECATED_SUGGEST
(
ALT
)

	)

108 #i‡
deföed
(
__DEPRECATED
Ë&& (
__˝lu•lus
 >= 201703L)

109 
	#_GLIBCXX17_DEPRECATED
 [[
__dïªˇãd__
]]

	)

110 
	#_GLIBCXX17_DEPRECATED_SUGGEST
(
ALT
Ë
	`_GLIBCXX_DEPRECATED_SUGGEST
(ALT)

	)

112 
	#_GLIBCXX17_DEPRECATED


	)

113 
	#_GLIBCXX17_DEPRECATED_SUGGEST
(
ALT
)

	)

116 #i‡
deföed
(
__DEPRECATED
Ë&& (
__˝lu•lus
 > 201703L)

117 
	#_GLIBCXX20_DEPRECATED
(
MSG
Ë[[
	`dïªˇãd
(MSG)]]

	)

118 
	#_GLIBCXX20_DEPRECATED_SUGGEST
(
ALT
Ë
	`_GLIBCXX_DEPRECATED_SUGGEST
(ALT)

	)

120 
	#_GLIBCXX20_DEPRECATED
(
MSG
)

	)

121 
	#_GLIBCXX20_DEPRECATED_SUGGEST
(
ALT
)

	)

125 #i‚de‡
_GLIBCXX_ABI_TAG_CXX11


126 
	#_GLIBCXX_ABI_TAG_CXX11
 
	`__©åibuã
 ((
	`__abi_èg__
 ("cxx11")))

	)

130 #i‡
__˝lu•lus
 >= 201703L

131 
	#_GLIBCXX_NODISCARD
 [[
__nodisˇrd__
]]

	)

133 
	#_GLIBCXX_NODISCARD


	)

138 #i‡
__˝lu•lus


141 #i‚de‡
_GLIBCXX_CONSTEXPR


142 #i‡
__˝lu•lus
 >= 201103L

143 
	#_GLIBCXX_CONSTEXPR
 
c⁄°ex¥


	)

144 
	#_GLIBCXX_USE_CONSTEXPR
 
c⁄°ex¥


	)

146 
	#_GLIBCXX_CONSTEXPR


	)

147 
	#_GLIBCXX_USE_CONSTEXPR
 c⁄°

	)

151 #i‚de‡
_GLIBCXX14_CONSTEXPR


152 #i‡
__˝lu•lus
 >= 201402L

153 
	#_GLIBCXX14_CONSTEXPR
 
c⁄°ex¥


	)

155 
	#_GLIBCXX14_CONSTEXPR


	)

159 #i‚de‡
_GLIBCXX17_CONSTEXPR


160 #i‡
__˝lu•lus
 >= 201703L

161 
	#_GLIBCXX17_CONSTEXPR
 
c⁄°ex¥


	)

163 
	#_GLIBCXX17_CONSTEXPR


	)

167 #i‚de‡
_GLIBCXX20_CONSTEXPR


168 #i‡
__˝lu•lus
 > 201703L

169 
	#_GLIBCXX20_CONSTEXPR
 
c⁄°ex¥


	)

171 
	#_GLIBCXX20_CONSTEXPR


	)

175 #i‚de‡
_GLIBCXX17_INLINE


176 #i‡
__˝lu•lus
 >= 201703L

177 
	#_GLIBCXX17_INLINE
 
ölöe


	)

179 
	#_GLIBCXX17_INLINE


	)

184 #i‚de‡
_GLIBCXX_NOEXCEPT


185 #i‡
__˝lu•lus
 >= 201103L

186 
	#_GLIBCXX_NOEXCEPT
 
n€x˚±


	)

187 
	#_GLIBCXX_NOEXCEPT_IF
(...Ë
	`n€x˚±
(
__VA_ARGS__
)

	)

188 
	#_GLIBCXX_USE_NOEXCEPT
 
n€x˚±


	)

189 
	#_GLIBCXX_THROW
(
_EXC
)

	)

191 
	#_GLIBCXX_NOEXCEPT


	)

192 
	#_GLIBCXX_NOEXCEPT_IF
(...)

	)

193 
	#_GLIBCXX_USE_NOEXCEPT
 
	`throw
()

	)

194 
	#_GLIBCXX_THROW
(
_EXC
Ë
	`throw
(_EXC)

	)

198 #i‚de‡
_GLIBCXX_NOTHROW


199 
	#_GLIBCXX_NOTHROW
 
_GLIBCXX_USE_NOEXCEPT


	)

202 #i‚de‡
_GLIBCXX_THROW_OR_ABORT


203 #i‡
__˝p_ex˚±i⁄s


204 
	#_GLIBCXX_THROW_OR_ABORT
(
_EXC
Ë(
	`throw
 (_EXC))

	)

206 
	#_GLIBCXX_THROW_OR_ABORT
(
_EXC
Ë(
	`__buûtö_ab‹t
())

	)

210 #i‡
__˝p_n€x˚±_fun˘i⁄_ty≥


211 
	#_GLIBCXX_NOEXCEPT_PARM
 , 
boﬁ
 
_NE


	)

212 
	#_GLIBCXX_NOEXCEPT_QUAL
 
	`n€x˚±
 (
_NE
)

	)

214 
	#_GLIBCXX_NOEXCEPT_PARM


	)

215 
	#_GLIBCXX_NOEXCEPT_QUAL


	)

228 
	#_GLIBCXX_EXTERN_TEMPLATE
 1

	)

278 
«me•a˚
 
	g°d


280 
__SIZE_TYPE__
 
	tsize_t
;

281 
__PTRDIFF_TYPE__
 
	t±rdiff_t
;

283 #i‡
__˝lu•lus
 >= 201103L

284 
de˛ty≥
(
	tnuŒ±r
Ë
	tnuŒ±r_t
;

288 
	#_GLIBCXX_USE_DUAL_ABI
 1

	)

290 #i‡! 
_GLIBCXX_USE_DUAL_ABI


292 #unde‡
_GLIBCXX_USE_CXX11_ABI


295 #i‚de‡
_GLIBCXX_USE_CXX11_ABI


296 
	#_GLIBCXX_USE_CXX11_ABI
 1

	)

299 #i‡
_GLIBCXX_USE_CXX11_ABI


300 
«me•a˚
 
	g°d


302 
ölöe
 
«me•a˚
 
__cxx11
 
__©åibuã__
((
__abi_èg__
 ("cxx11"))) { }

304 
«me•a˚
 
	g__gnu_cxx


306 
ölöe
 
«me•a˚
 
__cxx11
 
__©åibuã__
((
__abi_èg__
 ("cxx11"))) { }

308 
	#_GLIBCXX_NAMESPACE_CXX11
 
__cxx11
::

	)

309 
	#_GLIBCXX_BEGIN_NAMESPACE_CXX11
 
«me•a˚
 
__cxx11
 {

	)

310 
	#_GLIBCXX_END_NAMESPACE_CXX11
 }

	)

311 
	#_GLIBCXX_DEFAULT_ABI_TAG
 
_GLIBCXX_ABI_TAG_CXX11


	)

313 
	#_GLIBCXX_NAMESPACE_CXX11


	)

314 
	#_GLIBCXX_BEGIN_NAMESPACE_CXX11


	)

315 
	#_GLIBCXX_END_NAMESPACE_CXX11


	)

316 
	#_GLIBCXX_DEFAULT_ABI_TAG


	)

320 
	#_GLIBCXX_INLINE_VERSION
 0

	)

323 #i‡
_GLIBCXX_INLINE_VERSION


324 
	#_GLIBCXX_BEGIN_NAMESPACE_VERSION
 
«me•a˚
 
__8
 {

	)

325 
	#_GLIBCXX_END_NAMESPACE_VERSION
 }

	)

327 
«me•a˚
 
	g°d


329 
ölöe
 
	g_GLIBCXX_BEGIN_NAMESPACE_VERSION


330 #i‡
__˝lu•lus
 >= 201402L

331 
ölöe
 
«me•a˚
 
	glôîÆs
 {

332 
ölöe
 
«me•a˚
 
	gchr⁄o_lôîÆs
 { }

333 
ölöe
 
«me•a˚
 
	gcom∂ex_lôîÆs
 { }

334 
ölöe
 
«me•a˚
 
	g°rög_lôîÆs
 { }

335 #i‡
__˝lu•lus
 > 201402L

336 
ölöe
 
«me•a˚
 
	g°rög_võw_lôîÆs
 { }

340 
	g_GLIBCXX_END_NAMESPACE_VERSION


343 
«me•a˚
 
	g__gnu_cxx


345 
ölöe
 
_GLIBCXX_BEGIN_NAMESPACE_VERSION


346 
	g_GLIBCXX_END_NAMESPACE_VERSION


350 
	#_GLIBCXX_BEGIN_NAMESPACE_VERSION


	)

351 
	#_GLIBCXX_END_NAMESPACE_VERSION


	)

355 #i‡
deföed
(
_GLIBCXX_DEBUG
Ë|| deföed(
_GLIBCXX_PARALLEL
)

356 
«me•a˚
 
	g°d


358 
_GLIBCXX_BEGIN_NAMESPACE_VERSION


361 
«me•a˚
 
	g__cxx1998


363 #i‡
_GLIBCXX_USE_CXX11_ABI


364 
ölöe
 
«me•a˚
 
__cxx11
 
__©åibuã__
((
__abi_èg__
 ("cxx11"))) { }

368 
	g_GLIBCXX_END_NAMESPACE_VERSION


371 #ifde‡
_GLIBCXX_DEBUG


372 
ölöe
 
«me•a˚
 
	g__debug
 { }

376 #ifde‡
_GLIBCXX_PARALLEL


377 
ölöe
 
«me•a˚
 
	g__∑øŒñ
 { }

382 #i‡
deföed
(
_GLIBCXX_DEBUG
Ë&& deföed(
_GLIBCXX_PARALLEL
)

383 #îr‹ 
ûÀgÆ
 
u£
 
of
 
mu…ùÀ
 
ölöed
 
«me•a˚s


387 #i‡
__NO_INLINE__
 && !
__GXX_WEAK__


388 #w¨nög 
cuºíéy
 
usög
 
ölöed
 
«me•a˚
 
mode
 
which
 
may
 
Áû
 \

389 
wôhout
 
ölöög
 
due
 
to
 
œck
 
of
 
wók
 
	gsymbﬁs


403 #i‡
deföed
(
_GLIBCXX_DEBUG
)

404 
	#_GLIBCXX_STD_C
 
__cxx1998


	)

405 
	#_GLIBCXX_BEGIN_NAMESPACE_CONTAINER
 \

406 
«me•a˚
 
_GLIBCXX_STD_C
 {

	)

407 
	#_GLIBCXX_END_NAMESPACE_CONTAINER
 }

	)

409 
	#_GLIBCXX_STD_C
 
°d


	)

410 
	#_GLIBCXX_BEGIN_NAMESPACE_CONTAINER


	)

411 
	#_GLIBCXX_END_NAMESPACE_CONTAINER


	)

414 #ifde‡
_GLIBCXX_PARALLEL


415 
	#_GLIBCXX_STD_A
 
__cxx1998


	)

416 
	#_GLIBCXX_BEGIN_NAMESPACE_ALGO
 \

417 
«me•a˚
 
_GLIBCXX_STD_A
 {

	)

418 
	#_GLIBCXX_END_NAMESPACE_ALGO
 }

	)

420 
	#_GLIBCXX_STD_A
 
°d


	)

421 
	#_GLIBCXX_BEGIN_NAMESPACE_ALGO


	)

422 
	#_GLIBCXX_END_NAMESPACE_ALGO


	)

427 #unde‡
_GLIBCXX_LONG_DOUBLE_COMPAT


431 #i‚de‡
__˛™g__


432 #unde‡
_GLIBCXX_LONG_DOUBLE_ALT128_COMPAT


436 #i‡
deföed
 
_GLIBCXX_LONG_DOUBLE_ALT128_COMPAT
 \

437 && 
deföed
 
__LONG_DOUBLE_IEEE128__


438 
«me•a˚
 
	g°d


441 
ölöe
 
«me•a˚
 
	g__gnu_cxx_õì128
 { }

442 
ölöe
 
«me•a˚
 
	g__gnu_cxx11_õì128
 { }

444 
	#_GLIBCXX_NAMESPACE_LDBL
 
__gnu_cxx_õì128
::

	)

445 
	#_GLIBCXX_BEGIN_NAMESPACE_LDBL
 
«me•a˚
 
__gnu_cxx_õì128
 {

	)

446 
	#_GLIBCXX_END_NAMESPACE_LDBL
 }

	)

447 
	#_GLIBCXX_NAMESPACE_LDBL_OR_CXX11
 
__gnu_cxx11_õì128
::

	)

448 
	#_GLIBCXX_BEGIN_NAMESPACE_LDBL_OR_CXX11
 
«me•a˚
 
__gnu_cxx11_õì128
 {

	)

449 
	#_GLIBCXX_END_NAMESPACE_LDBL_OR_CXX11
 }

	)

453 #i‡
deföed
 
_GLIBCXX_LONG_DOUBLE_COMPAT
 && deföed 
__LONG_DOUBLE_128__


454 
«me•a˚
 
	g°d


456 
ölöe
 
«me•a˚
 
	g__gnu_cxx_ldbl128
 { }

458 
	#_GLIBCXX_NAMESPACE_LDBL
 
__gnu_cxx_ldbl128
::

	)

459 
	#_GLIBCXX_BEGIN_NAMESPACE_LDBL
 
«me•a˚
 
__gnu_cxx_ldbl128
 {

	)

460 
	#_GLIBCXX_END_NAMESPACE_LDBL
 }

	)

462 
	#_GLIBCXX_NAMESPACE_LDBL


	)

463 
	#_GLIBCXX_BEGIN_NAMESPACE_LDBL


	)

464 
	#_GLIBCXX_END_NAMESPACE_LDBL


	)

467 #i‡
_GLIBCXX_USE_CXX11_ABI


468 
	#_GLIBCXX_NAMESPACE_LDBL_OR_CXX11
 
_GLIBCXX_NAMESPACE_CXX11


	)

469 
	#_GLIBCXX_BEGIN_NAMESPACE_LDBL_OR_CXX11
 
_GLIBCXX_BEGIN_NAMESPACE_CXX11


	)

470 
	#_GLIBCXX_END_NAMESPACE_LDBL_OR_CXX11
 
_GLIBCXX_END_NAMESPACE_CXX11


	)

472 
	#_GLIBCXX_NAMESPACE_LDBL_OR_CXX11
 
_GLIBCXX_NAMESPACE_LDBL


	)

473 
	#_GLIBCXX_BEGIN_NAMESPACE_LDBL_OR_CXX11
 
_GLIBCXX_BEGIN_NAMESPACE_LDBL


	)

474 
	#_GLIBCXX_END_NAMESPACE_LDBL_OR_CXX11
 
_GLIBCXX_END_NAMESPACE_LDBL


	)

480 #i‡
deföed
(
_GLIBCXX_DEBUG
Ë&& !deföed(
_GLIBCXX_ASSERTIONS
)

481 
	#_GLIBCXX_ASSERTIONS
 1

	)

485 #ifde‡
_GLIBCXX_ASSERTIONS


486 #unde‡
_GLIBCXX_EXTERN_TEMPLATE


487 
	#_GLIBCXX_EXTERN_TEMPLATE
 -1

	)

491 #i‡
__has_buûtö
(
__buûtö_is_c⁄°™t_evÆu©ed
)

492 
	#__glibcxx_c⁄°ex¥_as£π
(
c⁄d
) \

493 i‡(
	`__buûtö_is_c⁄°™t_evÆu©ed
(Ë&& !
	`boﬁ
(
c⁄d
)) \

494 
	`__buûtö_uƒóchabÀ
(Ë

	)

496 
	#__glibcxx_c⁄°ex¥_as£π
(
u√vÆu©ed
)

	)

501 #i‡
deföed
(
_GLIBCXX_ASSERTIONS
) \

502 || 
deföed
(
_GLIBCXX_PARALLEL
Ë|| 
	$deföed
(
_GLIBCXX_PARALLEL_ASSERTIONS
)

503 
«me•a˚
 
°d


507 "C++" 
_GLIBCXX_NORETURN


508 
ölöe
 

509 
	`__ª∂a˚mít_as£π
(c⁄° * 
__fûe
, 
__löe
,

510 c⁄° * 
__fun˘i⁄
, c⁄° * 
__c⁄dôi⁄
)

512 
	`__buûtö_¥ötf
("%s:%d: %s: As£πi⁄ '%s' faûed.\n", 
__fûe
, 
__löe
,

513 
__fun˘i⁄
, 
__c⁄dôi⁄
);

514 
	`__buûtö_ab‹t
();

516 
	}
}

517 
	#__glibcxx_as£π_im∂
(
_C⁄dôi⁄
) \

518 i‡(
	`__buûtö_ex≥˘
(!
	`boﬁ
(
_C⁄dôi⁄
), 
Ál£
)) \

520 
	`__glibcxx_c⁄°ex¥_as£π
(
_C⁄dôi⁄
); \

521 
°d
::
	`__ª∂a˚mít_as£π
(
__FILE__
, 
__LINE__
, 
__PRETTY_FUNCTION__
, \

523 }

	)

526 #i‡
deföed
(
_GLIBCXX_ASSERTIONS
)

527 
	#__glibcxx_as£π
(
c⁄d
) \

528 dÿ{ 
	`__glibcxx_as£π_im∂
(
c⁄d
); } 
Ál£
)

	)

530 
	#__glibcxx_as£π
(
c⁄d
) \

531 dÿ{ 
	`__glibcxx_c⁄°ex¥_as£π
(
c⁄d
); } 
Ál£
)

	)

555 #i‚de‡
_GLIBCXX_SYNCHRONIZATION_HAPPENS_BEFORE


556 
	#_GLIBCXX_SYNCHRONIZATION_HAPPENS_BEFORE
(
A
)

	)

558 #i‚de‡
_GLIBCXX_SYNCHRONIZATION_HAPPENS_AFTER


559 
	#_GLIBCXX_SYNCHRONIZATION_HAPPENS_AFTER
(
A
)

	)

563 
	#_GLIBCXX_BEGIN_EXTERN_C
 "C" {

	)

564 
	#_GLIBCXX_END_EXTERN_C
 }

	)

566 
	#_GLIBCXX_USE_ALLOCATOR_NEW
 1

	)

568 #ifde‡
__SIZEOF_INT128__


569 #i‡! 
deföed
 
__GLIBCXX_TYPE_INT_N_0
 && ! deföed 
__STRICT_ANSI__


578 
	#_GLIBCXX_BEGIN_EXTERN_C


	)

579 
	#_GLIBCXX_END_EXTERN_C


	)

586 
	~<bôs/os_deföes.h
>

589 
	~<bôs/˝u_deföes.h
>

593 #i‚de‡
_GLIBCXX_PSEUDO_VISIBILITY


594 
	#_GLIBCXX_PSEUDO_VISIBILITY
(
V
)

	)

600 #i‚de‡
_GLIBCXX_WEAK_DEFINITION


601 
	#_GLIBCXX_WEAK_DEFINITION


	)

608 #i‚de‡
_GLIBCXX_USE_WEAK_REF


609 
	#_GLIBCXX_USE_WEAK_REF
 
__GXX_WEAK__


	)

615 #i‡
__˝lu•lus
 >201103L && 
_GLIBCXX_USE_CXX11_ABI
 \

616 && 
_GLIBCXX_USE_DUAL_ABI
 && 
__˝p_å™ß˘i⁄Æ_mem‹y
 >= 201500L \

617 && !
_GLIBCXX_FULLY_DYNAMIC_STRING
 && 
_GLIBCXX_USE_WEAK_REF
 \

618 && 
_GLIBCXX_USE_ALLOCATOR_NEW


619 
	#_GLIBCXX_TXN_SAFE
 
å™ß˘i⁄_ß„


	)

620 
	#_GLIBCXX_TXN_SAFE_DYN
 
å™ß˘i⁄_ß„_dy«mic


	)

622 
	#_GLIBCXX_TXN_SAFE


	)

623 
	#_GLIBCXX_TXN_SAFE_DYN


	)

626 #i‡
__˝lu•lus
 > 201402L

628 
	#_GLIBCXX_USE_STD_SPEC_FUNCS
 1

	)

629 #ñi‡
__˝lu•lus
 >201103L && 
__STDCPP_WANT_MATH_SPEC_FUNCS__
 != 0

631 
	#_GLIBCXX_USE_STD_SPEC_FUNCS
 1

	)

638 #ifde‡
__FAST_MATH__


639 
	#_GLIBCXX_FAST_MATH
 1

	)

641 
	#_GLIBCXX_FAST_MATH
 0

	)

648 
	#__N
(
msgid
Ë(msgid)

	)

651 #unde‡
mö


652 #unde‡
max


656 #i‡
__˝lu•lus
 >= 201103L

657 #i‚de‡
_GLIBCXX_USE_C99_MATH


658 
	#_GLIBCXX_USE_C99_MATH
 
_GLIBCXX11_USE_C99_MATH


	)

660 #i‚de‡
_GLIBCXX_USE_C99_COMPLEX


661 
	#_GLIBCXX_USE_C99_COMPLEX
 
_GLIBCXX11_USE_C99_COMPLEX


	)

663 #i‚de‡
_GLIBCXX_USE_C99_STDIO


664 
	#_GLIBCXX_USE_C99_STDIO
 
_GLIBCXX11_USE_C99_STDIO


	)

666 #i‚de‡
_GLIBCXX_USE_C99_STDLIB


667 
	#_GLIBCXX_USE_C99_STDLIB
 
_GLIBCXX11_USE_C99_STDLIB


	)

669 #i‚de‡
_GLIBCXX_USE_C99_WCHAR


670 
	#_GLIBCXX_USE_C99_WCHAR
 
_GLIBCXX11_USE_C99_WCHAR


	)

673 #i‚de‡
_GLIBCXX_USE_C99_MATH


674 
	#_GLIBCXX_USE_C99_MATH
 
_GLIBCXX98_USE_C99_MATH


	)

676 #i‚de‡
_GLIBCXX_USE_C99_COMPLEX


677 
	#_GLIBCXX_USE_C99_COMPLEX
 
_GLIBCXX98_USE_C99_COMPLEX


	)

679 #i‚de‡
_GLIBCXX_USE_C99_STDIO


680 
	#_GLIBCXX_USE_C99_STDIO
 
_GLIBCXX98_USE_C99_STDIO


	)

682 #i‚de‡
_GLIBCXX_USE_C99_STDLIB


683 
	#_GLIBCXX_USE_C99_STDLIB
 
_GLIBCXX98_USE_C99_STDLIB


	)

685 #i‚de‡
_GLIBCXX_USE_C99_WCHAR


686 
	#_GLIBCXX_USE_C99_WCHAR
 
_GLIBCXX98_USE_C99_WCHAR


	)

692 #i‚de‡
_GLIBCXX_USE_CHAR8_T


693 #ifde‡
__˝p_ch¨8_t


694 
	#_GLIBCXX_USE_CHAR8_T
 1

	)

697 #ifde‡
_GLIBCXX_USE_CHAR8_T


698 
	#__˝p_lib_ch¨8_t
 201907L

	)

702 #i‡
deföed
(
__FLOAT128__
Ë|| deföed(
__SIZEOF_FLOAT128__
)

704 #i‡!(
deföed
(
_GLIBCXX_LONG_DOUBLE_ALT128_COMPAT
Ë&& deföed(
__LONG_DOUBLE_IEEE128__
))

705 
	#_GLIBCXX_USE_FLOAT128
 1

	)

710 #i‡
__FLT_MANT_DIG__
 == 24 \

711 && 
__FLT_MIN_EXP__
 == -125 \

712 && 
__FLT_MAX_EXP__
 == 128

713 
	#_GLIBCXX_FLOAT_IS_IEEE_BINARY32
 1

	)

717 #i‡
__DBL_MANT_DIG__
 == 53 \

718 && 
__DBL_MIN_EXP__
 == -1021 \

719 && 
__DBL_MAX_EXP__
 == 1024

720 
	#_GLIBCXX_DOUBLE_IS_IEEE_BINARY64
 1

	)

723 #ifde‡
__has_buûtö


724 #ifde‡
__is_idítifõr


726 
	#_GLIBCXX_HAS_BUILTIN
(
B
Ë
	`__has_buûtö
(BË|| ! 
	`__is_idítifõr
(B)

	)

728 
	#_GLIBCXX_HAS_BUILTIN
(
B
Ë
	`__has_buûtö
(B)

	)

732 #i‡
_GLIBCXX_HAS_BUILTIN
(
__has_unique_obje˘_ª¥e£¡©i⁄s
)

733 
	#_GLIBCXX_HAVE_BUILTIN_HAS_UNIQ_OBJ_REP
 1

	)

736 #i‡
_GLIBCXX_HAS_BUILTIN
(
__is_aggªg©e
)

737 
	#_GLIBCXX_HAVE_BUILTIN_IS_AGGREGATE
 1

	)

740 #i‡
_GLIBCXX_HAS_BUILTIN
(
__buûtö_is_c⁄°™t_evÆu©ed
)

741 
	#_GLIBCXX_HAVE_BUILTIN_IS_CONSTANT_EVALUATED
 1

	)

744 #i‡
_GLIBCXX_HAS_BUILTIN
(
__is_ßme
)

745 
	#_GLIBCXX_HAVE_BUILTIN_IS_SAME
 1

	)

748 #i‡
_GLIBCXX_HAS_BUILTIN
(
__buûtö_œundî
)

749 
	#_GLIBCXX_HAVE_BUILTIN_LAUNDER
 1

	)

752 #unde‡
_GLIBCXX_HAS_BUILTIN


757 #i‡
__˝lu•lus
 >= 201703L

759 #i‡
__has_ö˛ude
(<
p°l
/
p°l_c⁄fig
.
h
>)

764 #i‚de‡
_GLIBCXX_USE_TBB_PAR_BACKEND


765 
	#_GLIBCXX_USE_TBB_PAR_BACKEND
 
	`__has_ö˛ude
(<
tbb
/tbb.
h
>)

	)

768 #i‡
_GLIBCXX_USE_TBB_PAR_BACKEND


769 
	#_PSTL_PAR_BACKEND_TBB


	)

771 
	#_PSTL_PAR_BACKEND_SERIAL


	)

774 
	#_PSTL_ASSERT
(
_C⁄dôi⁄
Ë
	`__glibcxx_as£π
(_C⁄dôi⁄)

	)

775 
	#_PSTL_ASSERT_MSG
(
_C⁄dôi⁄
, 
_Mesßge
Ë
	`__glibcxx_as£π
(_C⁄dôi⁄)

	)

777 
	~<p°l/p°l_c⁄fig.h
>

786 
	#_GLIBCXX_HAVE_ACOSF
 1

	)

789 
	#_GLIBCXX_HAVE_ACOSL
 1

	)

792 
	#_GLIBCXX_HAVE_ALIGNED_ALLOC
 1

	)

795 
	#_GLIBCXX_HAVE_ARPA_INET_H
 1

	)

798 
	#_GLIBCXX_HAVE_ASINF
 1

	)

801 
	#_GLIBCXX_HAVE_ASINL
 1

	)

804 
	#_GLIBCXX_HAVE_AS_SYMVER_DIRECTIVE
 1

	)

807 
	#_GLIBCXX_HAVE_ATAN2F
 1

	)

810 
	#_GLIBCXX_HAVE_ATAN2L
 1

	)

813 
	#_GLIBCXX_HAVE_ATANF
 1

	)

816 
	#_GLIBCXX_HAVE_ATANL
 1

	)

819 
	#_GLIBCXX_HAVE_ATOMIC_LOCK_POLICY
 1

	)

822 
	#_GLIBCXX_HAVE_AT_QUICK_EXIT
 1

	)

828 
	#_GLIBCXX_HAVE_CEILF
 1

	)

831 
	#_GLIBCXX_HAVE_CEILL
 1

	)

834 
	#_GLIBCXX_HAVE_COMPLEX_H
 1

	)

837 
	#_GLIBCXX_HAVE_COSF
 1

	)

840 
	#_GLIBCXX_HAVE_COSHF
 1

	)

843 
	#_GLIBCXX_HAVE_COSHL
 1

	)

846 
	#_GLIBCXX_HAVE_COSL
 1

	)

849 
	#_GLIBCXX_HAVE_DIRENT_H
 1

	)

852 
	#_GLIBCXX_HAVE_DLFCN_H
 1

	)

855 
	#_GLIBCXX_HAVE_ENDIAN_H
 1

	)

858 
	#_GLIBCXX_HAVE_EXCEPTION_PTR_SINCE_GCC46
 1

	)

861 
	#_GLIBCXX_HAVE_EXECINFO_H
 1

	)

864 
	#_GLIBCXX_HAVE_EXPF
 1

	)

867 
	#_GLIBCXX_HAVE_EXPL
 1

	)

870 
	#_GLIBCXX_HAVE_FABSF
 1

	)

873 
	#_GLIBCXX_HAVE_FABSL
 1

	)

876 
	#_GLIBCXX_HAVE_FCNTL_H
 1

	)

879 
	#_GLIBCXX_HAVE_FENV_H
 1

	)

882 
	#_GLIBCXX_HAVE_FINITE
 1

	)

885 
	#_GLIBCXX_HAVE_FINITEF
 1

	)

888 
	#_GLIBCXX_HAVE_FINITEL
 1

	)

891 
	#_GLIBCXX_HAVE_FLOAT_H
 1

	)

894 
	#_GLIBCXX_HAVE_FLOORF
 1

	)

897 
	#_GLIBCXX_HAVE_FLOORL
 1

	)

900 
	#_GLIBCXX_HAVE_FMODF
 1

	)

903 
	#_GLIBCXX_HAVE_FMODL
 1

	)

912 
	#_GLIBCXX_HAVE_FREXPF
 1

	)

915 
	#_GLIBCXX_HAVE_FREXPL
 1

	)

918 
	#_GLIBCXX_HAVE_GETIPINFO
 1

	)

921 
	#_GLIBCXX_HAVE_GETS
 1

	)

924 
	#_GLIBCXX_HAVE_HYPOT
 1

	)

927 
	#_GLIBCXX_HAVE_HYPOTF
 1

	)

930 
	#_GLIBCXX_HAVE_HYPOTL
 1

	)

933 
	#_GLIBCXX_HAVE_ICONV
 1

	)

939 
	#_GLIBCXX_HAVE_INT64_T
 1

	)

942 
	#_GLIBCXX_HAVE_INT64_T_LONG
 1

	)

948 
	#_GLIBCXX_HAVE_INTTYPES_H
 1

	)

954 
	#_GLIBCXX_HAVE_ISINFF
 1

	)

957 
	#_GLIBCXX_HAVE_ISINFL
 1

	)

963 
	#_GLIBCXX_HAVE_ISNANF
 1

	)

966 
	#_GLIBCXX_HAVE_ISNANL
 1

	)

969 
	#_GLIBCXX_HAVE_ISWBLANK
 1

	)

972 
	#_GLIBCXX_HAVE_LC_MESSAGES
 1

	)

975 
	#_GLIBCXX_HAVE_LDEXPF
 1

	)

978 
	#_GLIBCXX_HAVE_LDEXPL
 1

	)

981 
	#_GLIBCXX_HAVE_LIBINTL_H
 1

	)

984 
	#_GLIBCXX_HAVE_LIMIT_AS
 1

	)

987 
	#_GLIBCXX_HAVE_LIMIT_DATA
 1

	)

990 
	#_GLIBCXX_HAVE_LIMIT_FSIZE
 1

	)

993 
	#_GLIBCXX_HAVE_LIMIT_RSS
 1

	)

996 
	#_GLIBCXX_HAVE_LIMIT_VMEM
 0

	)

999 
	#_GLIBCXX_HAVE_LINK
 1

	)

1002 
	#_GLIBCXX_HAVE_LINUX_FUTEX
 1

	)

1005 
	#_GLIBCXX_HAVE_LINUX_RANDOM_H
 1

	)

1008 
	#_GLIBCXX_HAVE_LINUX_TYPES_H
 1

	)

1011 
	#_GLIBCXX_HAVE_LOCALE_H
 1

	)

1014 
	#_GLIBCXX_HAVE_LOG10F
 1

	)

1017 
	#_GLIBCXX_HAVE_LOG10L
 1

	)

1020 
	#_GLIBCXX_HAVE_LOGF
 1

	)

1023 
	#_GLIBCXX_HAVE_LOGL
 1

	)

1032 
	#_GLIBCXX_HAVE_MBSTATE_T
 1

	)

1035 
	#_GLIBCXX_HAVE_MEMALIGN
 1

	)

1038 
	#_GLIBCXX_HAVE_MEMORY_H
 1

	)

1041 
	#_GLIBCXX_HAVE_MODF
 1

	)

1044 
	#_GLIBCXX_HAVE_MODFF
 1

	)

1047 
	#_GLIBCXX_HAVE_MODFL
 1

	)

1053 
	#_GLIBCXX_HAVE_NETDB_H
 1

	)

1056 
	#_GLIBCXX_HAVE_NETINET_IN_H
 1

	)

1059 
	#_GLIBCXX_HAVE_NETINET_TCP_H
 1

	)

1068 
	#_GLIBCXX_HAVE_POLL
 1

	)

1071 
	#_GLIBCXX_HAVE_POLL_H
 1

	)

1074 
	#_GLIBCXX_HAVE_POSIX_MEMALIGN
 1

	)

1078 
	#_GLIBCXX_HAVE_POSIX_SEMAPHORE
 1

	)

1081 
	#_GLIBCXX_HAVE_POWF
 1

	)

1084 
	#_GLIBCXX_HAVE_POWL
 1

	)

1090 
	#_GLIBCXX_HAVE_QUICK_EXIT
 1

	)

1093 
	#_GLIBCXX_HAVE_READLINK
 1

	)

1096 
	#_GLIBCXX_HAVE_SECURE_GETENV
 1

	)

1099 
	#_GLIBCXX_HAVE_SETENV
 1

	)

1102 
	#_GLIBCXX_HAVE_SINCOS
 1

	)

1105 
	#_GLIBCXX_HAVE_SINCOSF
 1

	)

1108 
	#_GLIBCXX_HAVE_SINCOSL
 1

	)

1111 
	#_GLIBCXX_HAVE_SINF
 1

	)

1114 
	#_GLIBCXX_HAVE_SINHF
 1

	)

1117 
	#_GLIBCXX_HAVE_SINHL
 1

	)

1120 
	#_GLIBCXX_HAVE_SINL
 1

	)

1126 
	#_GLIBCXX_HAVE_SOCKATMARK
 1

	)

1129 
	#_GLIBCXX_HAVE_SQRTF
 1

	)

1132 
	#_GLIBCXX_HAVE_SQRTL
 1

	)

1135 
	#_GLIBCXX_HAVE_STDALIGN_H
 1

	)

1138 
	#_GLIBCXX_HAVE_STDBOOL_H
 1

	)

1141 
	#_GLIBCXX_HAVE_STDINT_H
 1

	)

1144 
	#_GLIBCXX_HAVE_STDLIB_H
 1

	)

1147 
	#_GLIBCXX_HAVE_STRERROR_L
 1

	)

1150 
	#_GLIBCXX_HAVE_STRERROR_R
 1

	)

1153 
	#_GLIBCXX_HAVE_STRINGS_H
 1

	)

1156 
	#_GLIBCXX_HAVE_STRING_H
 1

	)

1159 
	#_GLIBCXX_HAVE_STRTOF
 1

	)

1162 
	#_GLIBCXX_HAVE_STRTOLD
 1

	)

1165 
	#_GLIBCXX_HAVE_STRUCT_DIRENT_D_TYPE
 1

	)

1168 
	#_GLIBCXX_HAVE_STRXFRM_L
 1

	)

1171 
	#_GLIBCXX_HAVE_SYMLINK
 1

	)

1175 
	#_GLIBCXX_HAVE_SYMVER_SYMBOL_RENAMING_RUNTIME_SUPPORT
 1

	)

1181 
	#_GLIBCXX_HAVE_SYS_IOCTL_H
 1

	)

1184 
	#_GLIBCXX_HAVE_SYS_IPC_H
 1

	)

1193 
	#_GLIBCXX_HAVE_SYS_PARAM_H
 1

	)

1196 
	#_GLIBCXX_HAVE_SYS_RESOURCE_H
 1

	)

1199 
	#_GLIBCXX_HAVE_SYS_SDT_H
 1

	)

1202 
	#_GLIBCXX_HAVE_SYS_SEM_H
 1

	)

1205 
	#_GLIBCXX_HAVE_SYS_SOCKET_H
 1

	)

1208 
	#_GLIBCXX_HAVE_SYS_STATVFS_H
 1

	)

1211 
	#_GLIBCXX_HAVE_SYS_STAT_H
 1

	)

1214 
	#_GLIBCXX_HAVE_SYS_SYSINFO_H
 1

	)

1217 
	#_GLIBCXX_HAVE_SYS_TIME_H
 1

	)

1220 
	#_GLIBCXX_HAVE_SYS_TYPES_H
 1

	)

1223 
	#_GLIBCXX_HAVE_SYS_UIO_H
 1

	)

1229 
	#_GLIBCXX_HAVE_S_ISREG
 1

	)

1232 
	#_GLIBCXX_HAVE_TANF
 1

	)

1235 
	#_GLIBCXX_HAVE_TANHF
 1

	)

1238 
	#_GLIBCXX_HAVE_TANHL
 1

	)

1241 
	#_GLIBCXX_HAVE_TANL
 1

	)

1244 
	#_GLIBCXX_HAVE_TGMATH_H
 1

	)

1247 
	#_GLIBCXX_HAVE_TIMESPEC_GET
 1

	)

1250 
	#_GLIBCXX_HAVE_TLS
 1

	)

1253 
	#_GLIBCXX_HAVE_TRUNCATE
 1

	)

1256 
	#_GLIBCXX_HAVE_UCHAR_H
 1

	)

1259 
	#_GLIBCXX_HAVE_UNISTD_H
 1

	)

1262 
	#_GLIBCXX_HAVE_USELOCALE
 1

	)

1268 
	#_GLIBCXX_HAVE_UTIME_H
 1

	)

1271 
	#_GLIBCXX_HAVE_VFWSCANF
 1

	)

1274 
	#_GLIBCXX_HAVE_VSWSCANF
 1

	)

1277 
	#_GLIBCXX_HAVE_VWSCANF
 1

	)

1280 
	#_GLIBCXX_HAVE_WCHAR_H
 1

	)

1283 
	#_GLIBCXX_HAVE_WCSTOF
 1

	)

1286 
	#_GLIBCXX_HAVE_WCTYPE_H
 1

	)

1292 
	#_GLIBCXX_HAVE_WRITEV
 1

	)

1493 
	#_GLIBCXX_HAVE___CXA_THREAD_ATEXIT_IMPL
 1

	)

1496 
	#_GLIBCXX_ICONV_CONST


	)

1500 
	#_GLIBCXX_LT_OBJDIR
 ".libs/"

	)

1506 
	#_GLIBCXX_PACKAGE_BUGREPORT
 ""

	)

1509 
	#_GLIBCXX_PACKAGE_NAME
 "∑ckage-unu£d"

	)

1512 
	#_GLIBCXX_PACKAGE_STRING
 "∑ckage-unu£d vîsi⁄-unu£d"

	)

1515 
	#_GLIBCXX_PACKAGE_TARNAME
 "lib°dc++"

	)

1518 
	#_GLIBCXX_PACKAGE_URL
 ""

	)

1521 
	#_GLIBCXX_PACKAGE__GLIBCXX_VERSION
 "vîsi⁄-unu£d"

	)

1539 
	#_GLIBCXX_STDC_HEADERS
 1

	)

1545 #i‚de‡
_GLIBCXX_DARWIN_USE_64_BIT_INODE


1546 
	#_GLIBCXX_DARWIN_USE_64_BIT_INODE
 1

	)

1555 
	#_GLIBCXX11_USE_C99_COMPLEX
 1

	)

1559 
	#_GLIBCXX11_USE_C99_MATH
 1

	)

1563 
	#_GLIBCXX11_USE_C99_STDIO
 1

	)

1567 
	#_GLIBCXX11_USE_C99_STDLIB
 1

	)

1571 
	#_GLIBCXX11_USE_C99_WCHAR
 1

	)

1576 
	#_GLIBCXX98_USE_C99_COMPLEX
 1

	)

1580 
	#_GLIBCXX98_USE_C99_MATH
 1

	)

1584 
	#_GLIBCXX98_USE_C99_STDIO
 1

	)

1588 
	#_GLIBCXX98_USE_C99_STDLIB
 1

	)

1592 
	#_GLIBCXX98_USE_C99_WCHAR
 1

	)

1595 
	#_GLIBCXX_ATOMIC_BUILTINS
 1

	)

1602 
	#_GLIBCXX_FULLY_DYNAMIC_STRING
 0

	)

1605 
	#_GLIBCXX_HAS_GTHREADS
 1

	)

1608 
	#_GLIBCXX_HOSTED
 1

	)

1616 
	#_GLIBCXX_MANGLE_SIZE_T
 
m


	)

1628 
	#_GLIBCXX_RES_LIMITS
 1

	)

1634 
	#_GLIBCXX_STDIO_EOF
 -1

	)

1637 
	#_GLIBCXX_STDIO_SEEK_CUR
 1

	)

1640 
	#_GLIBCXX_STDIO_SEEK_END
 2

	)

1643 
	#_GLIBCXX_SYMVER
 1

	)

1649 
	#_GLIBCXX_SYMVER_GNU
 1

	)

1659 
	#_GLIBCXX_USE_C11_UCHAR_CXX11
 1

	)

1663 
	#_GLIBCXX_USE_C99
 1

	)

1668 
	#_GLIBCXX_USE_C99_COMPLEX_TR1
 1

	)

1672 
	#_GLIBCXX_USE_C99_CTYPE_TR1
 1

	)

1676 
	#_GLIBCXX_USE_C99_FENV_TR1
 1

	)

1680 
	#_GLIBCXX_USE_C99_INTTYPES_TR1
 1

	)

1684 
	#_GLIBCXX_USE_C99_INTTYPES_WCHAR_T_TR1
 1

	)

1688 
	#_GLIBCXX_USE_C99_MATH_TR1
 1

	)

1692 
	#_GLIBCXX_USE_C99_STDINT_TR1
 1

	)

1699 
	#_GLIBCXX_USE_CLOCK_MONOTONIC
 1

	)

1702 
	#_GLIBCXX_USE_CLOCK_REALTIME
 1

	)

1706 
	#_GLIBCXX_USE_DECIMAL_FLOAT
 1

	)

1710 
	#_GLIBCXX_USE_DEV_RANDOM
 1

	)

1713 
	#_GLIBCXX_USE_FCHMOD
 1

	)

1716 
	#_GLIBCXX_USE_FCHMODAT
 1

	)

1719 
	#_GLIBCXX_USE_GETTIMEOFDAY
 1

	)

1722 
	#_GLIBCXX_USE_GET_NPROCS
 1

	)

1725 
	#_GLIBCXX_USE_INT128
 1

	)

1728 
	#_GLIBCXX_USE_LFS
 1

	)

1731 
	#_GLIBCXX_USE_LONG_LONG
 1

	)

1734 
	#_GLIBCXX_USE_LSTAT
 1

	)

1737 
	#_GLIBCXX_USE_NANOSLEEP
 1

	)

1740 
	#_GLIBCXX_USE_NLS
 1

	)

1746 
	#_GLIBCXX_USE_PTHREAD_COND_CLOCKWAIT
 1

	)

1749 
	#_GLIBCXX_USE_PTHREAD_MUTEX_CLOCKLOCK
 1

	)

1753 
	#_GLIBCXX_USE_PTHREAD_RWLOCK_CLOCKLOCK
 1

	)

1756 
	#_GLIBCXX_USE_PTHREAD_RWLOCK_T
 1

	)

1760 
	#_GLIBCXX_USE_RANDOM_TR1
 1

	)

1763 
	#_GLIBCXX_USE_REALPATH
 1

	)

1766 
	#_GLIBCXX_USE_SCHED_YIELD
 1

	)

1769 
	#_GLIBCXX_USE_SC_NPROCESSORS_ONLN
 1

	)

1775 
	#_GLIBCXX_USE_SENDFILE
 1

	)

1781 
	#_GLIBCXX_USE_ST_MTIM
 1

	)

1787 
	#_GLIBCXX_USE_TMPNAM
 1

	)

1790 
	#_GLIBCXX_USE_UTIME
 1

	)

1794 
	#_GLIBCXX_USE_UTIMENSAT
 1

	)

1797 
	#_GLIBCXX_USE_WCHAR_T
 1

	)

1800 
	#_GLIBCXX_VERBOSE
 1

	)

1803 
	#_GLIBCXX_X86_RDRAND
 1

	)

1806 
	#_GLIBCXX_X86_RDSEED
 1

	)

1809 
	#_GTHREAD_USE_MUTEX_TIMEDLOCK
 1

	)

1815 #i‡
__˝lu•lus
 >= 201103L

1820 #i‡
__˝lu•lus
 >= 201103L

1824 #i‡
deföed
 (
_GLIBCXX_HAVE__ACOSF
Ë&& ! deföed (
_GLIBCXX_HAVE_ACOSF
)

1825 
	#_GLIBCXX_HAVE_ACOSF
 1

	)

1826 
	#acosf
 
_acosf


	)

1829 #i‡
deföed
 (
_GLIBCXX_HAVE__ACOSL
Ë&& ! deföed (
_GLIBCXX_HAVE_ACOSL
)

1830 
	#_GLIBCXX_HAVE_ACOSL
 1

	)

1831 
	#aco¶
 
_aco¶


	)

1834 #i‡
deföed
 (
_GLIBCXX_HAVE__ASINF
Ë&& ! deföed (
_GLIBCXX_HAVE_ASINF
)

1835 
	#_GLIBCXX_HAVE_ASINF
 1

	)

1836 
	#asöf
 
_asöf


	)

1839 #i‡
deföed
 (
_GLIBCXX_HAVE__ASINL
Ë&& ! deföed (
_GLIBCXX_HAVE_ASINL
)

1840 
	#_GLIBCXX_HAVE_ASINL
 1

	)

1841 
	#asöl
 
_asöl


	)

1844 #i‡
deföed
 (
_GLIBCXX_HAVE__ATAN2F
Ë&& ! deföed (
_GLIBCXX_HAVE_ATAN2F
)

1845 
	#_GLIBCXX_HAVE_ATAN2F
 1

	)

1846 
	#©™2f
 
_©™2f


	)

1849 #i‡
deföed
 (
_GLIBCXX_HAVE__ATAN2L
Ë&& ! deföed (
_GLIBCXX_HAVE_ATAN2L
)

1850 
	#_GLIBCXX_HAVE_ATAN2L
 1

	)

1851 
	#©™2l
 
_©™2l


	)

1854 #i‡
deföed
 (
_GLIBCXX_HAVE__ATANF
Ë&& ! deföed (
_GLIBCXX_HAVE_ATANF
)

1855 
	#_GLIBCXX_HAVE_ATANF
 1

	)

1856 
	#©™f
 
_©™f


	)

1859 #i‡
deföed
 (
_GLIBCXX_HAVE__ATANL
Ë&& ! deföed (
_GLIBCXX_HAVE_ATANL
)

1860 
	#_GLIBCXX_HAVE_ATANL
 1

	)

1861 
	#©™l
 
_©™l


	)

1864 #i‡
deföed
 (
_GLIBCXX_HAVE__CEILF
Ë&& ! deföed (
_GLIBCXX_HAVE_CEILF
)

1865 
	#_GLIBCXX_HAVE_CEILF
 1

	)

1866 
	#˚ûf
 
_˚ûf


	)

1869 #i‡
deföed
 (
_GLIBCXX_HAVE__CEILL
Ë&& ! deföed (
_GLIBCXX_HAVE_CEILL
)

1870 
	#_GLIBCXX_HAVE_CEILL
 1

	)

1871 
	#˚ûl
 
_˚ûl


	)

1874 #i‡
deföed
 (
_GLIBCXX_HAVE__COSF
Ë&& ! deföed (
_GLIBCXX_HAVE_COSF
)

1875 
	#_GLIBCXX_HAVE_COSF
 1

	)

1876 
	#cosf
 
_cosf


	)

1879 #i‡
deföed
 (
_GLIBCXX_HAVE__COSHF
Ë&& ! deföed (
_GLIBCXX_HAVE_COSHF
)

1880 
	#_GLIBCXX_HAVE_COSHF
 1

	)

1881 
	#coshf
 
_coshf


	)

1884 #i‡
deföed
 (
_GLIBCXX_HAVE__COSHL
Ë&& ! deföed (
_GLIBCXX_HAVE_COSHL
)

1885 
	#_GLIBCXX_HAVE_COSHL
 1

	)

1886 
	#coshl
 
_coshl


	)

1889 #i‡
deföed
 (
_GLIBCXX_HAVE__COSL
Ë&& ! deföed (
_GLIBCXX_HAVE_COSL
)

1890 
	#_GLIBCXX_HAVE_COSL
 1

	)

1891 
	#co¶
 
_co¶


	)

1894 #i‡
deföed
 (
_GLIBCXX_HAVE__EXPF
Ë&& ! deföed (
_GLIBCXX_HAVE_EXPF
)

1895 
	#_GLIBCXX_HAVE_EXPF
 1

	)

1896 
	#expf
 
_expf


	)

1899 #i‡
deföed
 (
_GLIBCXX_HAVE__EXPL
Ë&& ! deföed (
_GLIBCXX_HAVE_EXPL
)

1900 
	#_GLIBCXX_HAVE_EXPL
 1

	)

1901 
	#ex∂
 
_ex∂


	)

1904 #i‡
deföed
 (
_GLIBCXX_HAVE__FABSF
Ë&& ! deföed (
_GLIBCXX_HAVE_FABSF
)

1905 
	#_GLIBCXX_HAVE_FABSF
 1

	)

1906 
	#Ábsf
 
_Ábsf


	)

1909 #i‡
deföed
 (
_GLIBCXX_HAVE__FABSL
Ë&& ! deföed (
_GLIBCXX_HAVE_FABSL
)

1910 
	#_GLIBCXX_HAVE_FABSL
 1

	)

1911 
	#Áb¶
 
_Áb¶


	)

1914 #i‡
deföed
 (
_GLIBCXX_HAVE__FINITE
Ë&& ! deföed (
_GLIBCXX_HAVE_FINITE
)

1915 
	#_GLIBCXX_HAVE_FINITE
 1

	)

1916 
	#föôe
 
_föôe


	)

1919 #i‡
deföed
 (
_GLIBCXX_HAVE__FINITEF
Ë&& ! deföed (
_GLIBCXX_HAVE_FINITEF
)

1920 
	#_GLIBCXX_HAVE_FINITEF
 1

	)

1921 
	#föôef
 
_föôef


	)

1924 #i‡
deföed
 (
_GLIBCXX_HAVE__FINITEL
Ë&& ! deföed (
_GLIBCXX_HAVE_FINITEL
)

1925 
	#_GLIBCXX_HAVE_FINITEL
 1

	)

1926 
	#föôñ
 
_föôñ


	)

1929 #i‡
deföed
 (
_GLIBCXX_HAVE__FLOORF
Ë&& ! deföed (
_GLIBCXX_HAVE_FLOORF
)

1930 
	#_GLIBCXX_HAVE_FLOORF
 1

	)

1931 
	#Êo‹f
 
_Êo‹f


	)

1934 #i‡
deföed
 (
_GLIBCXX_HAVE__FLOORL
Ë&& ! deföed (
_GLIBCXX_HAVE_FLOORL
)

1935 
	#_GLIBCXX_HAVE_FLOORL
 1

	)

1936 
	#Êo‹l
 
_Êo‹l


	)

1939 #i‡
deföed
 (
_GLIBCXX_HAVE__FMODF
Ë&& ! deföed (
_GLIBCXX_HAVE_FMODF
)

1940 
	#_GLIBCXX_HAVE_FMODF
 1

	)

1941 
	#fmodf
 
_fmodf


	)

1944 #i‡
deföed
 (
_GLIBCXX_HAVE__FMODL
Ë&& ! deföed (
_GLIBCXX_HAVE_FMODL
)

1945 
	#_GLIBCXX_HAVE_FMODL
 1

	)

1946 
	#fmodl
 
_fmodl


	)

1949 #i‡
deföed
 (
_GLIBCXX_HAVE__FPCLASS
Ë&& ! deföed (
_GLIBCXX_HAVE_FPCLASS
)

1950 
	#_GLIBCXX_HAVE_FPCLASS
 1

	)

1951 
	#Â˛ass
 
_Â˛ass


	)

1954 #i‡
deföed
 (
_GLIBCXX_HAVE__FREXPF
Ë&& ! deföed (
_GLIBCXX_HAVE_FREXPF
)

1955 
	#_GLIBCXX_HAVE_FREXPF
 1

	)

1956 
	#‰expf
 
_‰expf


	)

1959 #i‡
deföed
 (
_GLIBCXX_HAVE__FREXPL
Ë&& ! deföed (
_GLIBCXX_HAVE_FREXPL
)

1960 
	#_GLIBCXX_HAVE_FREXPL
 1

	)

1961 
	#‰ex∂
 
_‰ex∂


	)

1964 #i‡
deföed
 (
_GLIBCXX_HAVE__HYPOT
Ë&& ! deföed (
_GLIBCXX_HAVE_HYPOT
)

1965 
	#_GLIBCXX_HAVE_HYPOT
 1

	)

1966 
	#hypŸ
 
_hypŸ


	)

1969 #i‡
deföed
 (
_GLIBCXX_HAVE__HYPOTF
Ë&& ! deföed (
_GLIBCXX_HAVE_HYPOTF
)

1970 
	#_GLIBCXX_HAVE_HYPOTF
 1

	)

1971 
	#hypŸf
 
_hypŸf


	)

1974 #i‡
deföed
 (
_GLIBCXX_HAVE__HYPOTL
Ë&& ! deföed (
_GLIBCXX_HAVE_HYPOTL
)

1975 
	#_GLIBCXX_HAVE_HYPOTL
 1

	)

1976 
	#hypŸl
 
_hypŸl


	)

1979 #i‡
deföed
 (
_GLIBCXX_HAVE__ISINF
Ë&& ! deföed (
_GLIBCXX_HAVE_ISINF
)

1980 
	#_GLIBCXX_HAVE_ISINF
 1

	)

1981 
	#isöf
 
_isöf


	)

1984 #i‡
deföed
 (
_GLIBCXX_HAVE__ISINFF
Ë&& ! deföed (
_GLIBCXX_HAVE_ISINFF
)

1985 
	#_GLIBCXX_HAVE_ISINFF
 1

	)

1986 
	#isöff
 
_isöff


	)

1989 #i‡
deföed
 (
_GLIBCXX_HAVE__ISINFL
Ë&& ! deföed (
_GLIBCXX_HAVE_ISINFL
)

1990 
	#_GLIBCXX_HAVE_ISINFL
 1

	)

1991 
	#isöÊ
 
_isöÊ


	)

1994 #i‡
deföed
 (
_GLIBCXX_HAVE__ISNAN
Ë&& ! deföed (
_GLIBCXX_HAVE_ISNAN
)

1995 
	#_GLIBCXX_HAVE_ISNAN
 1

	)

1996 
	#i¢™
 
_i¢™


	)

1999 #i‡
deföed
 (
_GLIBCXX_HAVE__ISNANF
Ë&& ! deföed (
_GLIBCXX_HAVE_ISNANF
)

2000 
	#_GLIBCXX_HAVE_ISNANF
 1

	)

2001 
	#i¢™f
 
_i¢™f


	)

2004 #i‡
deföed
 (
_GLIBCXX_HAVE__ISNANL
Ë&& ! deföed (
_GLIBCXX_HAVE_ISNANL
)

2005 
	#_GLIBCXX_HAVE_ISNANL
 1

	)

2006 
	#i¢™l
 
_i¢™l


	)

2009 #i‡
deföed
 (
_GLIBCXX_HAVE__LDEXPF
Ë&& ! deföed (
_GLIBCXX_HAVE_LDEXPF
)

2010 
	#_GLIBCXX_HAVE_LDEXPF
 1

	)

2011 
	#ldexpf
 
_ldexpf


	)

2014 #i‡
deföed
 (
_GLIBCXX_HAVE__LDEXPL
Ë&& ! deföed (
_GLIBCXX_HAVE_LDEXPL
)

2015 
	#_GLIBCXX_HAVE_LDEXPL
 1

	)

2016 
	#ldex∂
 
_ldex∂


	)

2019 #i‡
deföed
 (
_GLIBCXX_HAVE__LOG10F
Ë&& ! deföed (
_GLIBCXX_HAVE_LOG10F
)

2020 
	#_GLIBCXX_HAVE_LOG10F
 1

	)

2021 
	#log10f
 
_log10f


	)

2024 #i‡
deföed
 (
_GLIBCXX_HAVE__LOG10L
Ë&& ! deföed (
_GLIBCXX_HAVE_LOG10L
)

2025 
	#_GLIBCXX_HAVE_LOG10L
 1

	)

2026 
	#log10l
 
_log10l


	)

2029 #i‡
deföed
 (
_GLIBCXX_HAVE__LOGF
Ë&& ! deföed (
_GLIBCXX_HAVE_LOGF
)

2030 
	#_GLIBCXX_HAVE_LOGF
 1

	)

2031 
	#logf
 
_logf


	)

2034 #i‡
deföed
 (
_GLIBCXX_HAVE__LOGL
Ë&& ! deföed (
_GLIBCXX_HAVE_LOGL
)

2035 
	#_GLIBCXX_HAVE_LOGL
 1

	)

2036 
	#logl
 
_logl


	)

2039 #i‡
deföed
 (
_GLIBCXX_HAVE__MODF
Ë&& ! deföed (
_GLIBCXX_HAVE_MODF
)

2040 
	#_GLIBCXX_HAVE_MODF
 1

	)

2041 
	#modf
 
_modf


	)

2044 #i‡
deföed
 (
_GLIBCXX_HAVE__MODFF
Ë&& ! deföed (
_GLIBCXX_HAVE_MODFF
)

2045 
	#_GLIBCXX_HAVE_MODFF
 1

	)

2046 
	#modff
 
_modff


	)

2049 #i‡
deföed
 (
_GLIBCXX_HAVE__MODFL
Ë&& ! deföed (
_GLIBCXX_HAVE_MODFL
)

2050 
	#_GLIBCXX_HAVE_MODFL
 1

	)

2051 
	#modÊ
 
_modÊ


	)

2054 #i‡
deföed
 (
_GLIBCXX_HAVE__POWF
Ë&& ! deföed (
_GLIBCXX_HAVE_POWF
)

2055 
	#_GLIBCXX_HAVE_POWF
 1

	)

2056 
	#powf
 
_powf


	)

2059 #i‡
deföed
 (
_GLIBCXX_HAVE__POWL
Ë&& ! deföed (
_GLIBCXX_HAVE_POWL
)

2060 
	#_GLIBCXX_HAVE_POWL
 1

	)

2061 
	#powl
 
_powl


	)

2064 #i‡
deföed
 (
_GLIBCXX_HAVE__QFPCLASS
Ë&& ! deföed (
_GLIBCXX_HAVE_QFPCLASS
)

2065 
	#_GLIBCXX_HAVE_QFPCLASS
 1

	)

2066 
	#qÂ˛ass
 
_qÂ˛ass


	)

2069 #i‡
deföed
 (
_GLIBCXX_HAVE__SINCOS
Ë&& ! deföed (
_GLIBCXX_HAVE_SINCOS
)

2070 
	#_GLIBCXX_HAVE_SINCOS
 1

	)

2071 
	#söcos
 
_söcos


	)

2074 #i‡
deföed
 (
_GLIBCXX_HAVE__SINCOSF
Ë&& ! deföed (
_GLIBCXX_HAVE_SINCOSF
)

2075 
	#_GLIBCXX_HAVE_SINCOSF
 1

	)

2076 
	#söcosf
 
_söcosf


	)

2079 #i‡
deföed
 (
_GLIBCXX_HAVE__SINCOSL
Ë&& ! deföed (
_GLIBCXX_HAVE_SINCOSL
)

2080 
	#_GLIBCXX_HAVE_SINCOSL
 1

	)

2081 
	#söco¶
 
_söco¶


	)

2084 #i‡
deföed
 (
_GLIBCXX_HAVE__SINF
Ë&& ! deföed (
_GLIBCXX_HAVE_SINF
)

2085 
	#_GLIBCXX_HAVE_SINF
 1

	)

2086 
	#söf
 
_söf


	)

2089 #i‡
deföed
 (
_GLIBCXX_HAVE__SINHF
Ë&& ! deföed (
_GLIBCXX_HAVE_SINHF
)

2090 
	#_GLIBCXX_HAVE_SINHF
 1

	)

2091 
	#söhf
 
_söhf


	)

2094 #i‡
deföed
 (
_GLIBCXX_HAVE__SINHL
Ë&& ! deföed (
_GLIBCXX_HAVE_SINHL
)

2095 
	#_GLIBCXX_HAVE_SINHL
 1

	)

2096 
	#söhl
 
_söhl


	)

2099 #i‡
deföed
 (
_GLIBCXX_HAVE__SINL
Ë&& ! deföed (
_GLIBCXX_HAVE_SINL
)

2100 
	#_GLIBCXX_HAVE_SINL
 1

	)

2101 
	#söl
 
_söl


	)

2104 #i‡
deföed
 (
_GLIBCXX_HAVE__SQRTF
Ë&& ! deföed (
_GLIBCXX_HAVE_SQRTF
)

2105 
	#_GLIBCXX_HAVE_SQRTF
 1

	)

2106 
	#sqπf
 
_sqπf


	)

2109 #i‡
deföed
 (
_GLIBCXX_HAVE__SQRTL
Ë&& ! deföed (
_GLIBCXX_HAVE_SQRTL
)

2110 
	#_GLIBCXX_HAVE_SQRTL
 1

	)

2111 
	#sqπl
 
_sqπl


	)

2114 #i‡
deföed
 (
_GLIBCXX_HAVE__STRTOF
Ë&& ! deföed (
_GLIBCXX_HAVE_STRTOF
)

2115 
	#_GLIBCXX_HAVE_STRTOF
 1

	)

2116 
	#°πof
 
_°πof


	)

2119 #i‡
deföed
 (
_GLIBCXX_HAVE__STRTOLD
Ë&& ! deföed (
_GLIBCXX_HAVE_STRTOLD
)

2120 
	#_GLIBCXX_HAVE_STRTOLD
 1

	)

2121 
	#°πﬁd
 
_°πﬁd


	)

2124 #i‡
deföed
 (
_GLIBCXX_HAVE__TANF
Ë&& ! deföed (
_GLIBCXX_HAVE_TANF
)

2125 
	#_GLIBCXX_HAVE_TANF
 1

	)

2126 
	#ènf
 
_ènf


	)

2129 #i‡
deföed
 (
_GLIBCXX_HAVE__TANHF
Ë&& ! deföed (
_GLIBCXX_HAVE_TANHF
)

2130 
	#_GLIBCXX_HAVE_TANHF
 1

	)

2131 
	#ènhf
 
_ènhf


	)

2134 #i‡
deföed
 (
_GLIBCXX_HAVE__TANHL
Ë&& ! deföed (
_GLIBCXX_HAVE_TANHL
)

2135 
	#_GLIBCXX_HAVE_TANHL
 1

	)

2136 
	#ènhl
 
_ènhl


	)

2139 #i‡
deföed
 (
_GLIBCXX_HAVE__TANL
Ë&& ! deföed (
_GLIBCXX_HAVE_TANL
)

2140 
	#_GLIBCXX_HAVE_TANL
 1

	)

2141 
	#è∆
 
_è∆


	)

	@/usr/include/x86_64-linux-gnu/c++/11/bits/c++io.h

32 #i‚de‡
_GLIBCXX_CXX_IO_H


33 
	#_GLIBCXX_CXX_IO_H
 1

	)

35 
	~<c°dio
>

36 
	~<bôs/gthr.h
>

38 
«me•a˚
 
°d
 
	$_GLIBCXX_VISIBILITY
()

40 
_GLIBCXX_BEGIN_NAMESPACE_VERSION


42 
__gthªad_muãx_t
 
	t__c_lock
;

45 
FILE
 
	t__c_fûe
;

47 
_GLIBCXX_END_NAMESPACE_VERSION


48 
	}
}

	@/usr/include/x86_64-linux-gnu/c++/11/bits/c++locale.h

36 #i‚de‡
_GLIBCXX_CXX_LOCALE_H


37 
	#_GLIBCXX_CXX_LOCALE_H
 1

	)

39 #¥agm®
GCC
 
sy°em_hódî


41 
	~<˛oˇÀ
>

43 
	#_GLIBCXX_C_LOCALE_GNU
 1

	)

45 
	#_GLIBCXX_NUM_CATEGORIES
 6

	)

47 #i‡
__GLIBC__
 > 2 || (__GLIBC__ =2 && 
__GLIBC_MINOR__
 > 2)

48 
«me•a˚
 
__gnu_cxx
 
	$_GLIBCXX_VISIBILITY
()

50 
_GLIBCXX_BEGIN_NAMESPACE_VERSION


52 "C" 
	`__ty≥of
(
u£loˇÀ
Ë
__u£loˇÀ
;

54 
_GLIBCXX_END_NAMESPACE_VERSION


55 
	}
}

58 
«me•a˚
 
°d
 
	$_GLIBCXX_VISIBILITY
()

60 
_GLIBCXX_BEGIN_NAMESPACE_VERSION


62 
__loˇÀ_t
 
	t__c_loˇÀ
;

68 
ölöe
 

69 
	`__c⁄vît_‰om_v
(c⁄° 
__c_loˇÀ
& 
__˛oc
 
	`__©åibuã__
 ((
__unu£d__
)),

70 * 
__out
,

71 c⁄° 
__size
 
	`__©åibuã__
 ((
__unu£d__
)),

72 c⁄° * 
__fmt
, ...)

74 #i‡
__GLIBC__
 > 2 || (__GLIBC__ =2 && 
__GLIBC_MINOR__
 > 2)

75 
__c_loˇÀ
 
__ﬁd
 = 
__gnu_cxx
::
	`__u£loˇÀ
(
__˛oc
);

77 * 
__ﬁd
 = 
°d
::
	`£éoˇÀ
(
LC_NUMERIC
, 0);

78 * 
__ßv
 = 0;

79 i‡(
	`__buûtö_°rcmp
(
__ﬁd
, "C"))

81 c⁄° 
size_t
 
__Àn
 = 
	`__buûtö_°æí
(
__ﬁd
) + 1;

82 
__ßv
 = 
√w
 [
__Àn
];

83 
	`__buûtö_mem˝y
(
__ßv
, 
__ﬁd
, 
__Àn
);

84 
°d
::
	`£éoˇÀ
(
LC_NUMERIC
, "C");

88 
__buûtö_va_li°
 
__¨gs
;

89 
	`__buûtö_va_°¨t
(
__¨gs
, 
__fmt
);

91 #i‡
_GLIBCXX_USE_C99_STDIO


92 c⁄° 
__ªt
 = 
	`__buûtö_v¢¥ötf
(
__out
, 
__size
, 
__fmt
, 
__¨gs
);

94 c⁄° 
__ªt
 = 
	`__buûtö_v•rötf
(
__out
, 
__fmt
, 
__¨gs
);

97 
	`__buûtö_va_íd
(
__¨gs
);

99 #i‡
__GLIBC__
 > 2 || (__GLIBC__ =2 && 
__GLIBC_MINOR__
 > 2)

100 
__gnu_cxx
::
	`__u£loˇÀ
(
__ﬁd
);

102 i‡(
__ßv
)

104 
°d
::
	`£éoˇÀ
(
LC_NUMERIC
, 
__ßv
);

105 
dñëe
 [] 
__ßv
;

108  
__ªt
;

111 
_GLIBCXX_END_NAMESPACE_VERSION


112 
	}
}

	@/usr/include/x86_64-linux-gnu/c++/11/bits/cpu_defines.h

30 #i‚de‡
_GLIBCXX_CPU_DEFINES


31 
	#_GLIBCXX_CPU_DEFINES
 1

	)

	@/usr/include/x86_64-linux-gnu/c++/11/bits/ctype_base.h

36 
«me•a˚
 
°d
 
	$_GLIBCXX_VISIBILITY
()

38 
_GLIBCXX_BEGIN_NAMESPACE_VERSION


41 
	s˘y≥_ba£


44 c⁄° * 
	t__to_ty≥
;

48 
	tmask
;

49 c⁄° 
mask
 
uµî
 = 
_ISuµî
;

50 c⁄° 
mask
 
lowî
 = 
_ISlowî
;

51 c⁄° 
mask
 
Æpha
 = 
_ISÆpha
;

52 c⁄° 
mask
 
digô
 = 
_ISdigô
;

53 c⁄° 
mask
 
xdigô
 = 
_ISxdigô
;

54 c⁄° 
mask
 
•a˚
 = 
_IS•a˚
;

55 c⁄° 
mask
 
¥öt
 = 
_IS¥öt
;

56 c⁄° 
mask
 
gøph
 = 
_ISÆpha
 | 
_ISdigô
 | 
_ISpun˘
;

57 c⁄° 
mask
 
˙ål
 = 
_IS˙ål
;

58 c⁄° 
mask
 
pun˘
 = 
_ISpun˘
;

59 c⁄° 
mask
 
Ænum
 = 
_ISÆpha
 | 
_ISdigô
;

60 #i‡
__˝lu•lus
 >= 201103L

61 c⁄° 
mask
 
bœnk
 = 
_ISbœnk
;

65 
_GLIBCXX_END_NAMESPACE_VERSION


66 
	}
}

	@/usr/include/x86_64-linux-gnu/c++/11/bits/ctype_inline.h

37 
«me•a˚
 
°d
 
	$_GLIBCXX_VISIBILITY
()

39 
_GLIBCXX_BEGIN_NAMESPACE_VERSION


41 
boﬁ


42 
˘y≥
<>::

43 
	`is
(
mask
 
__m
, 
__c
) const

44 {  
_M_èbÀ
[
°©ic_ˇ°
<>(
__c
)] & 
__m
; }

47 
˘y≥
<>::

48 
	`is
(c⁄° * 
__low
, c⁄° * 
__high
, 
mask
* 
__vec
) const

50 
__low
 < 
__high
)

51 *
__vec
++ = 
_M_èbÀ
[
°©ic_ˇ°
<>(*
__low
++)];

52  
__high
;

56 
˘y≥
<>::

57 
	`sˇn_is
(
mask
 
__m
, c⁄° * 
__low
, c⁄° * 
__high
) const

59 
__low
 < 
__high


60 && !(
_M_èbÀ
[
°©ic_ˇ°
<>(*
__low
)] & 
__m
))

61 ++
__low
;

62  
__low
;

66 
˘y≥
<>::

67 
	`sˇn_nŸ
(
mask
 
__m
, c⁄° * 
__low
, c⁄° * 
__high
) const

69 
__low
 < 
__high


70 && (
_M_èbÀ
[
°©ic_ˇ°
<>(*
__low
)] & 
__m
) != 0)

71 ++
__low
;

72  
__low
;

75 
_GLIBCXX_END_NAMESPACE_VERSION


76 
	}
}

	@/usr/include/x86_64-linux-gnu/c++/11/bits/cxxabi_tweaks.h

30 #i‚de‡
_CXXABI_TWEAKS_H


31 
	#_CXXABI_TWEAKS_H
 1

	)

33 #ifde‡
__˝lu•lus


34 
«me•a˚
 
	g__cxxabiv1


41 
	#_GLIBCXX_GUARD_TEST
(
x
Ë(*(*Ë(xË!0)

	)

42 
	#_GLIBCXX_GUARD_SET
(
x
Ë*(*Ë(xË1

	)

43 
	#_GLIBCXX_GUARD_BIT
 
	`__gu¨d_ã°_bô
 (0, 1)

	)

44 
	#_GLIBCXX_GUARD_PENDING_BIT
 
	`__gu¨d_ã°_bô
 (1, 1)

	)

45 
	#_GLIBCXX_GUARD_WAITING_BIT
 
	`__gu¨d_ã°_bô
 (2, 1)

	)

46 
__exãnsi⁄__
 
	t__gu¨d
 
	t__©åibuã__
((
	tmode
 (
	t__DI__
)));

49 
	t__cxa_vec_˘‹_ªtu∫_ty≥
;

50 
	#_GLIBCXX_CXA_VEC_CTOR_RETURN
(
x
Ë

	)

52 
	t__cxa_cdt‹_ªtu∫_ty≥
;

54 #ifde‡
__˝lu•lus


	@/usr/include/x86_64-linux-gnu/c++/11/bits/error_constants.h

30 #i‚de‡
_GLIBCXX_ERROR_CONSTANTS


31 
	#_GLIBCXX_ERROR_CONSTANTS
 1

	)

33 
	~<bôs/c++c⁄fig.h
>

34 
	~<˚ºno
>

36 
«me•a˚
 
°d
 
	$_GLIBCXX_VISIBILITY
()

38 
_GLIBCXX_BEGIN_NAMESPACE_VERSION


40 ˛as†
	cîrc


42 
addªss_Ámûy_nŸ_suµ‹ãd
 = 
EAFNOSUPPORT
,

43 
addªss_ö_u£
 = 
EADDRINUSE
,

44 
addªss_nŸ_avaûabÀ
 = 
EADDRNOTAVAIL
,

45 
Æªady_c⁄√˘ed
 = 
EISCONN
,

46 
¨gumít_li°_too_l⁄g
 = 
E2BIG
,

47 
¨gumít_out_of_domaö
 = 
EDOM
,

48 
bad_addªss
 = 
EFAULT
,

49 
bad_fûe_des¸ùt‹
 = 
EBADF
,

51 #ifde‡
EBADMSG


52 
bad_mesßge
 = 
EBADMSG
,

55 
brokí_pùe
 = 
EPIPE
,

56 
c⁄√˘i⁄_ab‹ãd
 = 
ECONNABORTED
,

57 
c⁄√˘i⁄_Æªady_ö_¥ogªss
 = 
EALREADY
,

58 
c⁄√˘i⁄_ªfu£d
 = 
ECONNREFUSED
,

59 
c⁄√˘i⁄_ª£t
 = 
ECONNRESET
,

60 
¸oss_devi˚_lök
 = 
EXDEV
,

61 
de°ö©i⁄_addªss_ªquúed
 = 
EDESTADDRREQ
,

62 
devi˚_‹_ªsour˚_busy
 = 
EBUSY
,

63 
dúe˘‹y_nŸ_em±y
 = 
ENOTEMPTY
,

64 
execuèbÀ_f‹m©_îr‹
 = 
ENOEXEC
,

65 
fûe_exi°s
 = 
EEXIST
,

66 
fûe_too_œrge
 = 
EFBIG
,

67 
fûíame_too_l⁄g
 = 
ENAMETOOLONG
,

68 
fun˘i⁄_nŸ_suµ‹ãd
 = 
ENOSYS
,

69 
ho°_uƒóchabÀ
 = 
EHOSTUNREACH
,

71 #ifde‡
EIDRM


72 
idítifõr_ªmoved
 = 
EIDRM
,

75 
ûÀgÆ_byã_£quí˚
 = 
EILSEQ
,

76 
ö≠¥›rüã_io_c⁄åﬁ_›î©i⁄
 = 
ENOTTY
,

77 
öãºu±ed
 = 
EINTR
,

78 
övÆid_¨gumít
 = 
EINVAL
,

79 
övÆid_£ek
 = 
ESPIPE
,

80 
io_îr‹
 = 
EIO
,

81 
is_a_dúe˘‹y
 = 
EISDIR
,

82 
mesßge_size
 = 
EMSGSIZE
,

83 
√tw‹k_down
 = 
ENETDOWN
,

84 
√tw‹k_ª£t
 = 
ENETRESET
,

85 
√tw‹k_uƒóchabÀ
 = 
ENETUNREACH
,

86 
no_buf„r_•a˚
 = 
ENOBUFS
,

87 
no_chûd_¥o˚ss
 = 
ECHILD
,

89 #ifde‡
ENOLINK


90 
no_lök
 = 
ENOLINK
,

93 
no_lock_avaûabÀ
 = 
ENOLCK
,

95 #ifde‡
ENODATA


96 
no_mesßge_avaûabÀ
 = 
ENODATA
,

99 
no_mesßge
 = 
ENOMSG
,

100 
no_¥Ÿocﬁ_›ti⁄
 = 
ENOPROTOOPT
,

101 
no_•a˚_⁄_devi˚
 = 
ENOSPC
,

103 #ifde‡
ENOSR


104 
no_°ªam_ªsour˚s
 = 
ENOSR
,

107 
no_such_devi˚_‹_addªss
 = 
ENXIO
,

108 
no_such_devi˚
 = 
ENODEV
,

109 
no_such_fûe_‹_dúe˘‹y
 = 
ENOENT
,

110 
no_such_¥o˚ss
 = 
ESRCH
,

111 
nŸ_a_dúe˘‹y
 = 
ENOTDIR
,

112 
nŸ_a_sockë
 = 
ENOTSOCK
,

114 #ifde‡
ENOSTR


115 
nŸ_a_°ªam
 = 
ENOSTR
,

118 
nŸ_c⁄√˘ed
 = 
ENOTCONN
,

119 
nŸ_íough_mem‹y
 = 
ENOMEM
,

121 #ifde‡
ENOTSUP


122 
nŸ_suµ‹ãd
 = 
ENOTSUP
,

125 #ifde‡
ECANCELED


126 
›î©i⁄_ˇn˚Àd
 = 
ECANCELED
,

129 
›î©i⁄_ö_¥ogªss
 = 
EINPROGRESS
,

130 
›î©i⁄_nŸ_≥rmôãd
 = 
EPERM
,

131 
›î©i⁄_nŸ_suµ‹ãd
 = 
EOPNOTSUPP
,

132 
›î©i⁄_would_block
 = 
EWOULDBLOCK
,

134 #ifde‡
EOWNERDEAD


135 
ow√r_dód
 = 
EOWNERDEAD
,

138 
≥rmissi⁄_díõd
 = 
EACCES
,

140 #ifde‡
EPROTO


141 
¥Ÿocﬁ_îr‹
 = 
EPROTO
,

144 
¥Ÿocﬁ_nŸ_suµ‹ãd
 = 
EPROTONOSUPPORT
,

145 
ªad_⁄ly_fûe_sy°em
 = 
EROFS
,

146 
ªsour˚_dódlock_would_occur
 = 
EDEADLK
,

147 
ªsour˚_u«vaûabÀ_åy_agaö
 = 
EAGAIN
,

148 
ªsu…_out_of_ønge
 = 
ERANGE
,

150 #ifde‡
ENOTRECOVERABLE


151 
°©e_nŸ_ªcovîabÀ
 = 
ENOTRECOVERABLE
,

154 #ifde‡
ETIME


155 
°ªam_timeout
 = 
ETIME
,

158 #ifde‡
ETXTBSY


159 
ãxt_fûe_busy
 = 
ETXTBSY
,

162 
timed_out
 = 
ETIMEDOUT
,

163 
too_m™y_fûes_›í_ö_sy°em
 = 
ENFILE
,

164 
too_m™y_fûes_›í
 = 
EMFILE
,

165 
too_m™y_löks
 = 
EMLINK
,

166 
too_m™y_symbﬁic_lök_Àvñs
 = 
ELOOP
,

168 #ifde‡
EOVERFLOW


169 
vÆue_too_œrge
 = 
EOVERFLOW
,

170 #ñi‡
deföed
 
__AVR__


171 
vÆue_too_œrge
 = 999,

174 
wr⁄g_¥Ÿocﬁ_ty≥
 = 
EPROTOTYPE


175 
	}
};

177 
	g_GLIBCXX_END_NAMESPACE_VERSION


	@/usr/include/x86_64-linux-gnu/c++/11/bits/extc++.h

29 #i‡
__˝lu•lus
 < 201103L

30 
	~<bôs/°då1c++.h
>

32 
	~<bôs/°dc++.h
>

35 
	~<ext/Æg‹ôhm
>

36 #i‡
__˝lu•lus
 >= 201103L

37 
	~<ext/Æig√d_buf„r.h
>

39 
	~<ext/Æloc_åaôs.h
>

40 
	~<ext/©omicôy.h
>

41 
	~<ext/bôm≠_Æloˇt‹.h
>

42 
	~<ext/ˇ°.h
>

43 #i‡
__˝lu•lus
 >= 201103L

44 
	~<ext/cm©h
>

46 
	~<ext/c⁄cuºí˚.h
>

47 
	~<ext/debug_Æloˇt‹.h
>

48 
	~<ext/exçå_Æloˇt‹.h
>

49 
	~<ext/fun˘i⁄Æ
>

50 
	~<ext/ôî©‹
>

51 
	~<ext/mÆloc_Æloˇt‹.h
>

52 
	~<ext/mem‹y
>

53 
	~<ext/mt_Æloˇt‹.h
>

54 
	~<ext/√w_Æloˇt‹.h
>

55 
	~<ext/numîic
>

56 
	~<ext/numîic_åaôs.h
>

57 
	~<ext/pod_ch¨_åaôs.h
>

58 
	~<ext/poöãr.h
>

59 
	~<ext/poﬁ_Æloˇt‹.h
>

60 #i‡
__˝lu•lus
 >= 201103L

61 
	~<ext/øndom
>

63 
	~<ext/rb_åì
>

64 
	~<ext/r›e
>

65 
	~<ext/¶i°
>

66 
	~<ext/°dio_fûebuf.h
>

67 
	~<ext/°dio_sync_fûebuf.h
>

68 
	~<ext/throw_Æloˇt‹.h
>

69 
	~<ext/ty≥li°.h
>

70 
	~<ext/ty≥_åaôs.h
>

71 
	~<ext/v°rög.h
>

72 
	~<ext/pb_ds/assoc_c⁄èöî.hµ
>

73 
	~<ext/pb_ds/¥i‹ôy_queue.hµ
>

74 
	~<ext/pb_ds/ex˚±i⁄.hµ
>

75 
	~<ext/pb_ds/hash_pﬁicy.hµ
>

76 
	~<ext/pb_ds/li°_upd©e_pﬁicy.hµ
>

77 
	~<ext/pb_ds/åì_pﬁicy.hµ
>

78 
	~<ext/pb_ds/åõ_pﬁicy.hµ
>

80 #ifde‡
_GLIBCXX_HAVE_ICONV


81 
	~<ext/codecvt_•ecüliz©i⁄s.h
>

82 
	~<ext/íc_fûebuf.h
>

	@/usr/include/x86_64-linux-gnu/c++/11/bits/gthr-default.h

26 #i‚de‡
_GLIBCXX_GCC_GTHR_POSIX_H


27 
	#_GLIBCXX_GCC_GTHR_POSIX_H


	)

32 
	#__GTHREADS
 1

	)

33 
	#__GTHREADS_CXX0X
 1

	)

35 
	~<±hªad.h
>

37 #i‡((
deföed
(
_LIBOBJC
Ë|| deföed(
_LIBOBJC_WEAK
)) \

38 || !
	$deföed
(
_GTHREAD_USE_MUTEX_TIMEDLOCK
))

39 
	~<uni°d.h
>

40 #i‡
	`deföed
(
_POSIX_TIMEOUTS
) && _POSIX_TIMEOUTS >= 0

41 
	#_GTHREAD_USE_MUTEX_TIMEDLOCK
 1

	)

43 
	#_GTHREAD_USE_MUTEX_TIMEDLOCK
 0

	)

47 
±hªad_t
 
	t__gthªad_t
;

48 
±hªad_key_t
 
	t__gthªad_key_t
;

49 
±hªad_⁄˚_t
 
	t__gthªad_⁄˚_t
;

50 
±hªad_muãx_t
 
	t__gthªad_muãx_t
;

51 
±hªad_muãx_t
 
	t__gthªad_ªcursive_muãx_t
;

52 
±hªad_c⁄d_t
 
	t__gthªad_c⁄d_t
;

53 
time•ec
 
	t__gthªad_time_t
;

57 
	#__GTHREAD_HAS_COND
 1

	)

59 
	#__GTHREAD_MUTEX_INIT
 
PTHREAD_MUTEX_INITIALIZER


	)

60 
	#__GTHREAD_MUTEX_INIT_FUNCTION
 
__gthªad_muãx_öô_fun˘i⁄


	)

61 
	#__GTHREAD_ONCE_INIT
 
PTHREAD_ONCE_INIT


	)

62 #i‡
	`deföed
(
PTHREAD_RECURSIVE_MUTEX_INITIALIZER
)

63 
	#__GTHREAD_RECURSIVE_MUTEX_INIT
 
PTHREAD_RECURSIVE_MUTEX_INITIALIZER


	)

64 #ñi‡
	`deföed
(
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
)

65 
	#__GTHREAD_RECURSIVE_MUTEX_INIT
 
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP


	)

67 
	#__GTHREAD_RECURSIVE_MUTEX_INIT_FUNCTION
 
__gthªad_ªcursive_muãx_öô_fun˘i⁄


	)

69 
	#__GTHREAD_COND_INIT
 
PTHREAD_COND_INITIALIZER


	)

70 
	#__GTHREAD_TIME_INIT
 {0,0
	}

	)
}

72 #ifde‡
_GTHREAD_USE_MUTEX_INIT_FUNC


73 #unde‡
__GTHREAD_MUTEX_INIT


75 #ifde‡
_GTHREAD_USE_RECURSIVE_MUTEX_INIT_FUNC


76 #unde‡
__GTHREAD_RECURSIVE_MUTEX_INIT


77 #unde‡
__GTHREAD_RECURSIVE_MUTEX_INIT_FUNCTION


78 
	#__GTHREAD_RECURSIVE_MUTEX_INIT_FUNCTION
 
__gthªad_ªcursive_muãx_öô_fun˘i⁄


	)

80 #ifde‡
_GTHREAD_USE_COND_INIT_FUNC


81 #unde‡
__GTHREAD_COND_INIT


82 
	#__GTHREAD_COND_INIT_FUNCTION
 
__gthªad_c⁄d_öô_fun˘i⁄


	)

85 #i‡
__GXX_WEAK__
 && 
_GLIBCXX_GTHREAD_USE_WEAK


86 #i‚de‡
__gthrw_¥agma


87 
	#__gthrw_¥agma
(
¥agma
)

	)

89 
	#__gthrw2
(
«me
,
«me2
,
ty≥
) \

90 
	`__ty≥of
(
ty≥
Ë
«me
 \

91 
	`__©åibuã__
 ((
	`__wókªf__
(#«me2), 
	`__c›y__
 (
ty≥
))); \

92 
	`__gthrw_¥agma
(
wók
 
ty≥
)

	)

93 
	#__gthrw_
(
«me
Ë
__gthrw_
 ## 
	)
name

95 
	#__gthrw2
(
«me
,
«me2
,
ty≥
)

	)

96 
	#__gthrw_
(
«me
Ë
	)
name

100 
	#__gthrw
(
«me
Ë
	`__gthrw2
(
__gthrw_
 ##Çame,«me,«me)

	)

102 
	$__gthrw
(
±hªad_⁄˚
)

103 
	$__gthrw
(
±hªad_gë•ecific
)

104 
	$__gthrw
(
±hªad_£t•ecific
)

106 
	$__gthrw
(
±hªad_¸óã
)

107 
	$__gthrw
(
±hªad_joö
)

108 
	$__gthrw
(
±hªad_equÆ
)

109 
	$__gthrw
(
±hªad_£lf
)

110 
	$__gthrw
(
±hªad_dëach
)

111 #i‚de‡
__BIONIC__


112 
	$__gthrw
(
±hªad_ˇn˚l
)

114 
	$__gthrw
(
sched_yõld
)

116 
	$__gthrw
(
±hªad_muãx_lock
)

117 
	$__gthrw
(
±hªad_muãx_åylock
)

118 #i‡
_GTHREAD_USE_MUTEX_TIMEDLOCK


119 
	$__gthrw
(
±hªad_muãx_timedlock
)

121 
	$__gthrw
(
±hªad_muãx_u∆ock
)

122 
	$__gthrw
(
±hªad_muãx_öô
)

123 
	$__gthrw
(
±hªad_muãx_de°roy
)

125 
	$__gthrw
(
±hªad_c⁄d_öô
)

126 
	$__gthrw
(
±hªad_c⁄d_brﬂdˇ°
)

127 
	$__gthrw
(
±hªad_c⁄d_sig«l
)

128 
	$__gthrw
(
±hªad_c⁄d_waô
)

129 
	$__gthrw
(
±hªad_c⁄d_timedwaô
)

130 
	$__gthrw
(
±hªad_c⁄d_de°roy
)

132 
	$__gthrw
(
±hªad_key_¸óã
)

133 
	$__gthrw
(
±hªad_key_dñëe
)

134 
	$__gthrw
(
±hªad_muãx©å_öô
)

135 
	$__gthrw
(
±hªad_muãx©å_£ây≥
)

136 
	$__gthrw
(
±hªad_muãx©å_de°roy
)

139 #i‡
	`deföed
(
_LIBOBJC
Ë|| deföed(
_LIBOBJC_WEAK
)

141 
	$__gthrw
(
±hªad_exô
)

142 #ifde‡
_POSIX_PRIORITY_SCHEDULING


143 #ifde‡
_POSIX_THREAD_PRIORITY_SCHEDULING


144 
	$__gthrw
(
sched_gë_¥i‹ôy_max
)

145 
	$__gthrw
(
sched_gë_¥i‹ôy_mö
)

148 
	$__gthrw
(
±hªad_©å_de°roy
)

149 
	$__gthrw
(
±hªad_©å_öô
)

150 
	$__gthrw
(
±hªad_©å_£tdëach°©e
)

151 #ifde‡
_POSIX_THREAD_PRIORITY_SCHEDULING


152 
	$__gthrw
(
±hªad_gësched∑øm
)

153 
	$__gthrw
(
±hªad_£tsched∑øm
)

157 #i‡
__GXX_WEAK__
 && 
_GLIBCXX_GTHREAD_USE_WEAK


170 #i‡
	`deföed
(
__FªeBSD__
Ë|| (deföed(
__sun
Ë&& deföed(
__svr4__
))

172 vﬁ©ûê
__gthªad_a˘ive
 = -1;

175 
	$__gthªad_åiggî
 ()

177 
__gthªad_a˘ive
 = 1;

178 
	}
}

180 
ölöe
 

181 
	$__gthªad_a˘ive_p
 ()

183 
±hªad_muãx_t
 
__gthªad_a˘ive_muãx
 = 
PTHREAD_MUTEX_INITIALIZER
;

184 
±hªad_⁄˚_t
 
__gthªad_a˘ive_⁄˚
 = 
PTHREAD_ONCE_INIT
;

187 
__gthªad_a˘ive_œã°_vÆue
 = 
__gthªad_a˘ive
;

192 i‡(
	`__buûtö_ex≥˘
 (
__gthªad_a˘ive_œã°_vÆue
 < 0, 0))

194 i‡(
	`__gthrw_
(
±hªad_⁄˚
))

198 
	`__gthrw_
(
±hªad_muãx_lock
Ë(&
__gthªad_a˘ive_muãx
);

199 
	`__gthrw_
(
±hªad_⁄˚
Ë(&
__gthªad_a˘ive_⁄˚
, 
__gthªad_åiggî
);

200 
	`__gthrw_
(
±hªad_muãx_u∆ock
Ë(&
__gthªad_a˘ive_muãx
);

204 i‡(
__gthªad_a˘ive
 < 0)

205 
__gthªad_a˘ive
 = 0;

207 
__gthªad_a˘ive_œã°_vÆue
 = 
__gthªad_a˘ive
;

210  
__gthªad_a˘ive_œã°_vÆue
 != 0;

211 
	}
}

236 #ifde‡
__GLIBC__


237 
__gthrw2
(
__gthrw_
(
__±hªad_key_¸óã
),

238 
__±hªad_key_¸óã
,

239 
±hªad_key_¸óã
)

240 
	#GTHR_ACTIVE_PROXY
 
	`__gthrw_
(
__±hªad_key_¸óã
)

	)

241 #ñi‡
deföed
 (
__BIONIC__
)

242 
	#GTHR_ACTIVE_PROXY
 
	`__gthrw_
(
±hªad_¸óã
)

	)

244 
	#GTHR_ACTIVE_PROXY
 
	`__gthrw_
(
±hªad_ˇn˚l
)

	)

247 
ölöe
 

248 
	$__gthªad_a˘ive_p
 ()

250 *c⁄° 
__gthªad_a˘ive_±r


251 
	`__exãnsi⁄__
 (*Ë&
GTHR_ACTIVE_PROXY
;

252  
__gthªad_a˘ive_±r
 != 0;

253 
	}
}

276 #i‡
deföed
(
__hµa__
Ë&& deföed(
__hpux__
)

278 vﬁ©ûê
	g__gthªad_a˘ive
 = -1;

280 
ölöe
 

281 
	$__gthªad_a˘ive_p
 ()

284 
__gthªad_a˘ive_œã°_vÆue
 = 
__gthªad_a˘ive
;

285 
size_t
 
__s
;

287 i‡(
	`__buûtö_ex≥˘
 (
__gthªad_a˘ive_œã°_vÆue
 < 0, 0))

289 
	`±hªad_deÁu…_°acksize_≈
 (0, &
__s
);

290 
__gthªad_a˘ive
 = 
__s
 ? 1 : 0;

291 
__gthªad_a˘ive_œã°_vÆue
 = 
__gthªad_a˘ive
;

294  
__gthªad_a˘ive_œã°_vÆue
 != 0;

295 
	}
}

299 
ölöe
 

300 
	$__gthªad_a˘ive_p
 ()

303 
	}
}

309 #ifde‡
_LIBOBJC


312 
	~<c⁄fig.h
>

314 #ifde‡
HAVE_SCHED_H


315 
	~<sched.h
>

319 
±hªad_key_t
 
	g_objc_thªad_°‹age
;

320 
±hªad_©å_t
 
	g_objc_thªad_©åibs
;

323 *
	gthªad_loˇl_°‹age
 = 
NULL
;

328 
ölöe
 

329 
	$__gthªad_objc_öô_thªad_sy°em
 ()

331 i‡(
	`__gthªad_a˘ive_p
 ())

334 i‡(
	`__gthrw_
(
±hªad_key_¸óã
Ë(&
_objc_thªad_°‹age
, 
NULL
) == 0)

339 i‡(
	`__gthrw_
(
±hªad_©å_öô
Ë(&
_objc_thªad_©åibs
) == 0

340 && 
	`__gthrw_
(
±hªad_©å_£tdëach°©e
Ë(&
_objc_thªad_©åibs
,

341 
PTHREAD_CREATE_DETACHED
) == 0)

347 
	}
}

350 
ölöe
 

351 
	$__gthªad_objc_˛o£_thªad_sy°em
 ()

353 i‡(
	`__gthªad_a˘ive_p
 ()

354 && 
	`__gthrw_
(
±hªad_key_dñëe
Ë(
_objc_thªad_°‹age
) == 0

355 && 
	`__gthrw_
(
±hªad_©å_de°roy
Ë(&
_objc_thªad_©åibs
) == 0)

359 
	}
}

364 
ölöe
 
objc_thªad_t


365 
	$__gthªad_objc_thªad_dëach
 ((*
func
)(*), *
¨g
)

367 
objc_thªad_t
 
thªad_id
;

368 
±hªad_t
 
√w_thªad_h™dÀ
;

370 i‡(!
	`__gthªad_a˘ive_p
 ())

371  
NULL
;

373 i‡(!(
	`__gthrw_
(
±hªad_¸óã
Ë(&
√w_thªad_h™dÀ
, &
_objc_thªad_©åibs
,

374 (*Ë
func
, 
¨g
)))

375 
thªad_id
 = (
objc_thªad_t
Ë
√w_thªad_h™dÀ
;

377 
thªad_id
 = 
NULL
;

379  
thªad_id
;

380 
	}
}

383 
ölöe
 

384 
	$__gthªad_objc_thªad_£t_¥i‹ôy
 (
¥i‹ôy
)

386 i‡(!
	`__gthªad_a˘ive_p
 ())

390 #ifde‡
_POSIX_PRIORITY_SCHEDULING


391 #ifde‡
_POSIX_THREAD_PRIORITY_SCHEDULING


392 
±hªad_t
 
thªad_id
 = 
	`__gthrw_
(
±hªad_£lf
) ();

393 
pﬁicy
;

394 
sched_∑øm
 
∑øms
;

395 
¥i‹ôy_mö
, 
¥i‹ôy_max
;

397 i‡(
	`__gthrw_
(
±hªad_gësched∑øm
Ë(
thªad_id
, &
pﬁicy
, &
∑øms
) == 0)

399 i‡((
¥i‹ôy_max
 = 
	`__gthrw_
(
sched_gë_¥i‹ôy_max
Ë(
pﬁicy
)) == -1)

402 i‡((
¥i‹ôy_mö
 = 
	`__gthrw_
(
sched_gë_¥i‹ôy_mö
Ë(
pﬁicy
)) == -1)

405 i‡(
¥i‹ôy
 > 
¥i‹ôy_max
)

406 
¥i‹ôy
 = 
¥i‹ôy_max
;

407 i‡(
¥i‹ôy
 < 
¥i‹ôy_mö
)

408 
¥i‹ôy
 = 
¥i‹ôy_mö
;

409 
∑øms
.
sched_¥i‹ôy
 = 
¥i‹ôy
;

416 i‡(
	`__gthrw_
(
±hªad_£tsched∑øm
Ë(
thªad_id
, 
pﬁicy
, &
∑øms
) == 0)

423 
	}
}

426 
ölöe
 

427 
	$__gthªad_objc_thªad_gë_¥i‹ôy
 ()

429 #ifde‡
_POSIX_PRIORITY_SCHEDULING


430 #ifde‡
_POSIX_THREAD_PRIORITY_SCHEDULING


431 i‡(
	`__gthªad_a˘ive_p
 ())

433 
pﬁicy
;

434 
sched_∑øm
 
∑øms
;

436 i‡(
	`__gthrw_
(
±hªad_gësched∑øm
Ë(__gthrw_(
±hªad_£lf
Ë(), &
pﬁicy
, &
∑øms
) == 0)

437  
∑øms
.
sched_¥i‹ôy
;

444  
OBJC_THREAD_INTERACTIVE_PRIORITY
;

445 
	}
}

448 
ölöe
 

449 
	$__gthªad_objc_thªad_yõld
 ()

451 i‡(
	`__gthªad_a˘ive_p
 ())

452 
	`__gthrw_
(
sched_yõld
) ();

453 
	}
}

456 
ölöe
 

457 
	$__gthªad_objc_thªad_exô
 ()

459 i‡(
	`__gthªad_a˘ive_p
 ())

461 
	`__gthrw_
(
±hªad_exô
Ë(&
__objc_thªad_exô_°©us
);

465 
	}
}

468 
ölöe
 
objc_thªad_t


469 
	$__gthªad_objc_thªad_id
 ()

471 i‡(
	`__gthªad_a˘ive_p
 ())

472  (
objc_thªad_t
Ë
	`__gthrw_
(
±hªad_£lf
) ();

474  (
objc_thªad_t
) 1;

475 
	}
}

478 
ölöe
 

479 
	$__gthªad_objc_thªad_£t_d©a
 (*
vÆue
)

481 i‡(
	`__gthªad_a˘ive_p
 ())

482  
	`__gthrw_
(
±hªad_£t•ecific
Ë(
_objc_thªad_°‹age
, 
vÆue
);

485 
thªad_loˇl_°‹age
 = 
vÆue
;

488 
	}
}

491 
ölöe
 *

492 
	$__gthªad_objc_thªad_gë_d©a
 ()

494 i‡(
	`__gthªad_a˘ive_p
 ())

495  
	`__gthrw_
(
±hªad_gë•ecific
Ë(
_objc_thªad_°‹age
);

497  
thªad_loˇl_°‹age
;

498 
	}
}

503 
ölöe
 

504 
	$__gthªad_objc_muãx_Æloˇã
 (
objc_muãx_t
 
muãx
)

506 i‡(
	`__gthªad_a˘ive_p
 ())

508 
muãx
->
backíd
 = 
	`objc_mÆloc
 ( (
±hªad_muãx_t
));

510 i‡(
	`__gthrw_
(
±hªad_muãx_öô
Ë((
±hªad_muãx_t
 *Ë
muãx
->
backíd
, 
NULL
))

512 
	`objc_‰ì
 (
muãx
->
backíd
);

513 
muãx
->
backíd
 = 
NULL
;

519 
	}
}

522 
ölöe
 

523 
	$__gthªad_objc_muãx_dóŒoˇã
 (
objc_muãx_t
 
muãx
)

525 i‡(
	`__gthªad_a˘ive_p
 ())

527 
cou¡
;

536 
cou¡
 = 
	`__gthrw_
(
±hªad_muãx_u∆ock
Ë((
±hªad_muãx_t
 *Ë
muãx
->
backíd
);

537 i‡(
cou¡
 < 0)

540 
cou¡
);

542 i‡(
	`__gthrw_
(
±hªad_muãx_de°roy
Ë((
±hªad_muãx_t
 *Ë
muãx
->
backíd
))

545 
	`objc_‰ì
 (
muãx
->
backíd
);

546 
muãx
->
backíd
 = 
NULL
;

549 
	}
}

552 
ölöe
 

553 
	$__gthªad_objc_muãx_lock
 (
objc_muãx_t
 
muãx
)

555 i‡(
	`__gthªad_a˘ive_p
 ()

556 && 
	`__gthrw_
(
±hªad_muãx_lock
Ë((
±hªad_muãx_t
 *Ë
muãx
->
backíd
) != 0)

562 
	}
}

565 
ölöe
 

566 
	$__gthªad_objc_muãx_åylock
 (
objc_muãx_t
 
muãx
)

568 i‡(
	`__gthªad_a˘ive_p
 ()

569 && 
	`__gthrw_
(
±hªad_muãx_åylock
Ë((
±hªad_muãx_t
 *Ë
muãx
->
backíd
) != 0)

575 
	}
}

578 
ölöe
 

579 
	$__gthªad_objc_muãx_u∆ock
 (
objc_muãx_t
 
muãx
)

581 i‡(
	`__gthªad_a˘ive_p
 ()

582 && 
	`__gthrw_
(
±hªad_muãx_u∆ock
Ë((
±hªad_muãx_t
 *Ë
muãx
->
backíd
) != 0)

588 
	}
}

593 
ölöe
 

594 
	$__gthªad_objc_c⁄dôi⁄_Æloˇã
 (
objc_c⁄dôi⁄_t
 
c⁄dôi⁄
)

596 i‡(
	`__gthªad_a˘ive_p
 ())

598 
c⁄dôi⁄
->
backíd
 = 
	`objc_mÆloc
 ( (
±hªad_c⁄d_t
));

600 i‡(
	`__gthrw_
(
±hªad_c⁄d_öô
Ë((
±hªad_c⁄d_t
 *Ë
c⁄dôi⁄
->
backíd
, 
NULL
))

602 
	`objc_‰ì
 (
c⁄dôi⁄
->
backíd
);

603 
c⁄dôi⁄
->
backíd
 = 
NULL
;

609 
	}
}

612 
ölöe
 

613 
	$__gthªad_objc_c⁄dôi⁄_dóŒoˇã
 (
objc_c⁄dôi⁄_t
 
c⁄dôi⁄
)

615 i‡(
	`__gthªad_a˘ive_p
 ())

617 i‡(
	`__gthrw_
(
±hªad_c⁄d_de°roy
Ë((
±hªad_c⁄d_t
 *Ë
c⁄dôi⁄
->
backíd
))

620 
	`objc_‰ì
 (
c⁄dôi⁄
->
backíd
);

621 
c⁄dôi⁄
->
backíd
 = 
NULL
;

624 
	}
}

627 
ölöe
 

628 
	$__gthªad_objc_c⁄dôi⁄_waô
 (
objc_c⁄dôi⁄_t
 
c⁄dôi⁄
, 
objc_muãx_t
 
muãx
)

630 i‡(
	`__gthªad_a˘ive_p
 ())

631  
	`__gthrw_
(
±hªad_c⁄d_waô
Ë((
±hªad_c⁄d_t
 *Ë
c⁄dôi⁄
->
backíd
,

632 (
±hªad_muãx_t
 *Ë
muãx
->
backíd
);

635 
	}
}

638 
ölöe
 

639 
	$__gthªad_objc_c⁄dôi⁄_brﬂdˇ°
 (
objc_c⁄dôi⁄_t
 
c⁄dôi⁄
)

641 i‡(
	`__gthªad_a˘ive_p
 ())

642  
	`__gthrw_
(
±hªad_c⁄d_brﬂdˇ°
Ë((
±hªad_c⁄d_t
 *Ë
c⁄dôi⁄
->
backíd
);

645 
	}
}

648 
ölöe
 

649 
	$__gthªad_objc_c⁄dôi⁄_sig«l
 (
objc_c⁄dôi⁄_t
 
c⁄dôi⁄
)

651 i‡(
	`__gthªad_a˘ive_p
 ())

652  
	`__gthrw_
(
±hªad_c⁄d_sig«l
Ë((
±hªad_c⁄d_t
 *Ë
c⁄dôi⁄
->
backíd
);

655 
	}
}

659 
ölöe
 

660 
	$__gthªad_¸óã
 (
__gthªad_t
 *
__thªadid
, *(*
__func
) (*),

661 *
__¨gs
)

663  
	`__gthrw_
(
±hªad_¸óã
Ë(
__thªadid
, 
NULL
, 
__func
, 
__¨gs
);

664 
	}
}

666 
ölöe
 

667 
	$__gthªad_joö
 (
__gthªad_t
 
__thªadid
, **
__vÆue_±r
)

669  
	`__gthrw_
(
±hªad_joö
Ë(
__thªadid
, 
__vÆue_±r
);

670 
	}
}

672 
ölöe
 

673 
	$__gthªad_dëach
 (
__gthªad_t
 
__thªadid
)

675  
	`__gthrw_
(
±hªad_dëach
Ë(
__thªadid
);

676 
	}
}

678 
ölöe
 

679 
	$__gthªad_equÆ
 (
__gthªad_t
 
__t1
, __gthªad_à
__t2
)

681  
	`__gthrw_
(
±hªad_equÆ
Ë(
__t1
, 
__t2
);

682 
	}
}

684 
ölöe
 
__gthªad_t


685 
	$__gthªad_£lf
 ()

687  
	`__gthrw_
(
±hªad_£lf
) ();

688 
	}
}

690 
ölöe
 

691 
	$__gthªad_yõld
 ()

693  
	`__gthrw_
(
sched_yõld
) ();

694 
	}
}

696 
ölöe
 

697 
	$__gthªad_⁄˚
 (
__gthªad_⁄˚_t
 *
__⁄˚
, (*
__func
) ())

699 i‡(
	`__gthªad_a˘ive_p
 ())

700  
	`__gthrw_
(
±hªad_⁄˚
Ë(
__⁄˚
, 
__func
);

703 
	}
}

705 
ölöe
 

706 
	$__gthªad_key_¸óã
 (
__gthªad_key_t
 *
__key
, (*
__dt‹
) (*))

708  
	`__gthrw_
(
±hªad_key_¸óã
Ë(
__key
, 
__dt‹
);

709 
	}
}

711 
ölöe
 

712 
	$__gthªad_key_dñëe
 (
__gthªad_key_t
 
__key
)

714  
	`__gthrw_
(
±hªad_key_dñëe
Ë(
__key
);

715 
	}
}

717 
ölöe
 *

718 
	$__gthªad_gë•ecific
 (
__gthªad_key_t
 
__key
)

720  
	`__gthrw_
(
±hªad_gë•ecific
Ë(
__key
);

721 
	}
}

723 
ölöe
 

724 
	$__gthªad_£t•ecific
 (
__gthªad_key_t
 
__key
, c⁄° *
__±r
)

726  
	`__gthrw_
(
±hªad_£t•ecific
Ë(
__key
, 
__±r
);

727 
	}
}

729 
ölöe
 

730 
	$__gthªad_muãx_öô_fun˘i⁄
 (
__gthªad_muãx_t
 *
__muãx
)

732 i‡(
	`__gthªad_a˘ive_p
 ())

733 
	`__gthrw_
(
±hªad_muãx_öô
Ë(
__muãx
, 
NULL
);

734 
	}
}

736 
ölöe
 

737 
	$__gthªad_muãx_de°roy
 (
__gthªad_muãx_t
 *
__muãx
)

739 i‡(
	`__gthªad_a˘ive_p
 ())

740  
	`__gthrw_
(
±hªad_muãx_de°roy
Ë(
__muãx
);

743 
	}
}

745 
ölöe
 

746 
	$__gthªad_muãx_lock
 (
__gthªad_muãx_t
 *
__muãx
)

748 i‡(
	`__gthªad_a˘ive_p
 ())

749  
	`__gthrw_
(
±hªad_muãx_lock
Ë(
__muãx
);

752 
	}
}

754 
ölöe
 

755 
	$__gthªad_muãx_åylock
 (
__gthªad_muãx_t
 *
__muãx
)

757 i‡(
	`__gthªad_a˘ive_p
 ())

758  
	`__gthrw_
(
±hªad_muãx_åylock
Ë(
__muãx
);

761 
	}
}

763 #i‡
_GTHREAD_USE_MUTEX_TIMEDLOCK


764 
ölöe
 

765 
	$__gthªad_muãx_timedlock
 (
__gthªad_muãx_t
 *
__muãx
,

766 c⁄° 
__gthªad_time_t
 *
__abs_timeout
)

768 i‡(
	`__gthªad_a˘ive_p
 ())

769  
	`__gthrw_
(
±hªad_muãx_timedlock
Ë(
__muãx
, 
__abs_timeout
);

772 
	}
}

775 
ölöe
 

776 
	$__gthªad_muãx_u∆ock
 (
__gthªad_muãx_t
 *
__muãx
)

778 i‡(
	`__gthªad_a˘ive_p
 ())

779  
	`__gthrw_
(
±hªad_muãx_u∆ock
Ë(
__muãx
);

782 
	}
}

784 #i‡!
deföed
–
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
) \

785 || 
	$deföed
(
_GTHREAD_USE_RECURSIVE_MUTEX_INIT_FUNC
)

786 
ölöe
 

787 
	$__gthªad_ªcursive_muãx_öô_fun˘i⁄
 (
__gthªad_ªcursive_muãx_t
 *
__muãx
)

789 i‡(
	`__gthªad_a˘ive_p
 ())

791 
±hªad_muãx©å_t
 
__©å
;

792 
__r
;

794 
__r
 = 
	`__gthrw_
(
±hªad_muãx©å_öô
Ë(&
__©å
);

795 i‡(!
__r
)

796 
__r
 = 
	`__gthrw_
(
±hªad_muãx©å_£ây≥
Ë(&
__©å
,

797 
PTHREAD_MUTEX_RECURSIVE
);

798 i‡(!
__r
)

799 
__r
 = 
	`__gthrw_
(
±hªad_muãx_öô
Ë(
__muãx
, &
__©å
);

800 i‡(!
__r
)

801 
__r
 = 
	`__gthrw_
(
±hªad_muãx©å_de°roy
Ë(&
__©å
);

802  
__r
;

805 
	}
}

808 
ölöe
 

809 
	$__gthªad_ªcursive_muãx_lock
 (
__gthªad_ªcursive_muãx_t
 *
__muãx
)

811  
	`__gthªad_muãx_lock
 (
__muãx
);

812 
	}
}

814 
ölöe
 

815 
	$__gthªad_ªcursive_muãx_åylock
 (
__gthªad_ªcursive_muãx_t
 *
__muãx
)

817  
	`__gthªad_muãx_åylock
 (
__muãx
);

818 
	}
}

820 #i‡
_GTHREAD_USE_MUTEX_TIMEDLOCK


821 
ölöe
 

822 
	$__gthªad_ªcursive_muãx_timedlock
 (
__gthªad_ªcursive_muãx_t
 *
__muãx
,

823 c⁄° 
__gthªad_time_t
 *
__abs_timeout
)

825  
	`__gthªad_muãx_timedlock
 (
__muãx
, 
__abs_timeout
);

826 
	}
}

829 
ölöe
 

830 
	$__gthªad_ªcursive_muãx_u∆ock
 (
__gthªad_ªcursive_muãx_t
 *
__muãx
)

832  
	`__gthªad_muãx_u∆ock
 (
__muãx
);

833 
	}
}

835 
ölöe
 

836 
	$__gthªad_ªcursive_muãx_de°roy
 (
__gthªad_ªcursive_muãx_t
 *
__muãx
)

838  
	`__gthªad_muãx_de°roy
 (
__muãx
);

839 
	}
}

841 #ifde‡
_GTHREAD_USE_COND_INIT_FUNC


842 
ölöe
 

843 
	$__gthªad_c⁄d_öô_fun˘i⁄
 (
__gthªad_c⁄d_t
 *
__c⁄d
)

845 i‡(
	`__gthªad_a˘ive_p
 ())

846 
	`__gthrw_
(
±hªad_c⁄d_öô
Ë(
__c⁄d
, 
NULL
);

847 
	}
}

850 
ölöe
 

851 
	$__gthªad_c⁄d_brﬂdˇ°
 (
__gthªad_c⁄d_t
 *
__c⁄d
)

853  
	`__gthrw_
(
±hªad_c⁄d_brﬂdˇ°
Ë(
__c⁄d
);

854 
	}
}

856 
ölöe
 

857 
	$__gthªad_c⁄d_sig«l
 (
__gthªad_c⁄d_t
 *
__c⁄d
)

859  
	`__gthrw_
(
±hªad_c⁄d_sig«l
Ë(
__c⁄d
);

860 
	}
}

862 
ölöe
 

863 
	$__gthªad_c⁄d_waô
 (
__gthªad_c⁄d_t
 *
__c⁄d
, 
__gthªad_muãx_t
 *
__muãx
)

865  
	`__gthrw_
(
±hªad_c⁄d_waô
Ë(
__c⁄d
, 
__muãx
);

866 
	}
}

868 
ölöe
 

869 
	$__gthªad_c⁄d_timedwaô
 (
__gthªad_c⁄d_t
 *
__c⁄d
, 
__gthªad_muãx_t
 *
__muãx
,

870 c⁄° 
__gthªad_time_t
 *
__abs_timeout
)

872  
	`__gthrw_
(
±hªad_c⁄d_timedwaô
Ë(
__c⁄d
, 
__muãx
, 
__abs_timeout
);

873 
	}
}

875 
ölöe
 

876 
	$__gthªad_c⁄d_waô_ªcursive
 (
__gthªad_c⁄d_t
 *
__c⁄d
,

877 
__gthªad_ªcursive_muãx_t
 *
__muãx
)

879  
	`__gthªad_c⁄d_waô
 (
__c⁄d
, 
__muãx
);

880 
	}
}

882 
ölöe
 

883 
	$__gthªad_c⁄d_de°roy
 (
__gthªad_c⁄d_t
* 
__c⁄d
)

885  
	`__gthrw_
(
±hªad_c⁄d_de°roy
Ë(
__c⁄d
);

886 
	}
}

	@/usr/include/x86_64-linux-gnu/c++/11/bits/gthr-posix.h

26 #i‚de‡
_GLIBCXX_GCC_GTHR_POSIX_H


27 
	#_GLIBCXX_GCC_GTHR_POSIX_H


	)

32 
	#__GTHREADS
 1

	)

33 
	#__GTHREADS_CXX0X
 1

	)

35 
	~<±hªad.h
>

37 #i‡((
deföed
(
_LIBOBJC
Ë|| deföed(
_LIBOBJC_WEAK
)) \

38 || !
	$deföed
(
_GTHREAD_USE_MUTEX_TIMEDLOCK
))

39 
	~<uni°d.h
>

40 #i‡
	`deföed
(
_POSIX_TIMEOUTS
) && _POSIX_TIMEOUTS >= 0

41 
	#_GTHREAD_USE_MUTEX_TIMEDLOCK
 1

	)

43 
	#_GTHREAD_USE_MUTEX_TIMEDLOCK
 0

	)

47 
±hªad_t
 
	t__gthªad_t
;

48 
±hªad_key_t
 
	t__gthªad_key_t
;

49 
±hªad_⁄˚_t
 
	t__gthªad_⁄˚_t
;

50 
±hªad_muãx_t
 
	t__gthªad_muãx_t
;

51 
±hªad_muãx_t
 
	t__gthªad_ªcursive_muãx_t
;

52 
±hªad_c⁄d_t
 
	t__gthªad_c⁄d_t
;

53 
time•ec
 
	t__gthªad_time_t
;

57 
	#__GTHREAD_HAS_COND
 1

	)

59 
	#__GTHREAD_MUTEX_INIT
 
PTHREAD_MUTEX_INITIALIZER


	)

60 
	#__GTHREAD_MUTEX_INIT_FUNCTION
 
__gthªad_muãx_öô_fun˘i⁄


	)

61 
	#__GTHREAD_ONCE_INIT
 
PTHREAD_ONCE_INIT


	)

62 #i‡
	`deföed
(
PTHREAD_RECURSIVE_MUTEX_INITIALIZER
)

63 
	#__GTHREAD_RECURSIVE_MUTEX_INIT
 
PTHREAD_RECURSIVE_MUTEX_INITIALIZER


	)

64 #ñi‡
	`deföed
(
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
)

65 
	#__GTHREAD_RECURSIVE_MUTEX_INIT
 
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP


	)

67 
	#__GTHREAD_RECURSIVE_MUTEX_INIT_FUNCTION
 
__gthªad_ªcursive_muãx_öô_fun˘i⁄


	)

69 
	#__GTHREAD_COND_INIT
 
PTHREAD_COND_INITIALIZER


	)

70 
	#__GTHREAD_TIME_INIT
 {0,0
	}

	)
}

72 #ifde‡
_GTHREAD_USE_MUTEX_INIT_FUNC


73 #unde‡
__GTHREAD_MUTEX_INIT


75 #ifde‡
_GTHREAD_USE_RECURSIVE_MUTEX_INIT_FUNC


76 #unde‡
__GTHREAD_RECURSIVE_MUTEX_INIT


77 #unde‡
__GTHREAD_RECURSIVE_MUTEX_INIT_FUNCTION


78 
	#__GTHREAD_RECURSIVE_MUTEX_INIT_FUNCTION
 
__gthªad_ªcursive_muãx_öô_fun˘i⁄


	)

80 #ifde‡
_GTHREAD_USE_COND_INIT_FUNC


81 #unde‡
__GTHREAD_COND_INIT


82 
	#__GTHREAD_COND_INIT_FUNCTION
 
__gthªad_c⁄d_öô_fun˘i⁄


	)

85 #i‡
__GXX_WEAK__
 && 
_GLIBCXX_GTHREAD_USE_WEAK


86 #i‚de‡
__gthrw_¥agma


87 
	#__gthrw_¥agma
(
¥agma
)

	)

89 
	#__gthrw2
(
«me
,
«me2
,
ty≥
) \

90 
	`__ty≥of
(
ty≥
Ë
«me
 \

91 
	`__©åibuã__
 ((
	`__wókªf__
(#«me2), 
	`__c›y__
 (
ty≥
))); \

92 
	`__gthrw_¥agma
(
wók
 
ty≥
)

	)

93 
	#__gthrw_
(
«me
Ë
__gthrw_
 ## 
	)
name

95 
	#__gthrw2
(
«me
,
«me2
,
ty≥
)

	)

96 
	#__gthrw_
(
«me
Ë
	)
name

100 
	#__gthrw
(
«me
Ë
	`__gthrw2
(
__gthrw_
 ##Çame,«me,«me)

	)

102 
	$__gthrw
(
±hªad_⁄˚
)

103 
	$__gthrw
(
±hªad_gë•ecific
)

104 
	$__gthrw
(
±hªad_£t•ecific
)

106 
	$__gthrw
(
±hªad_¸óã
)

107 
	$__gthrw
(
±hªad_joö
)

108 
	$__gthrw
(
±hªad_equÆ
)

109 
	$__gthrw
(
±hªad_£lf
)

110 
	$__gthrw
(
±hªad_dëach
)

111 #i‚de‡
__BIONIC__


112 
	$__gthrw
(
±hªad_ˇn˚l
)

114 
	$__gthrw
(
sched_yõld
)

116 
	$__gthrw
(
±hªad_muãx_lock
)

117 
	$__gthrw
(
±hªad_muãx_åylock
)

118 #i‡
_GTHREAD_USE_MUTEX_TIMEDLOCK


119 
	$__gthrw
(
±hªad_muãx_timedlock
)

121 
	$__gthrw
(
±hªad_muãx_u∆ock
)

122 
	$__gthrw
(
±hªad_muãx_öô
)

123 
	$__gthrw
(
±hªad_muãx_de°roy
)

125 
	$__gthrw
(
±hªad_c⁄d_öô
)

126 
	$__gthrw
(
±hªad_c⁄d_brﬂdˇ°
)

127 
	$__gthrw
(
±hªad_c⁄d_sig«l
)

128 
	$__gthrw
(
±hªad_c⁄d_waô
)

129 
	$__gthrw
(
±hªad_c⁄d_timedwaô
)

130 
	$__gthrw
(
±hªad_c⁄d_de°roy
)

132 
	$__gthrw
(
±hªad_key_¸óã
)

133 
	$__gthrw
(
±hªad_key_dñëe
)

134 
	$__gthrw
(
±hªad_muãx©å_öô
)

135 
	$__gthrw
(
±hªad_muãx©å_£ây≥
)

136 
	$__gthrw
(
±hªad_muãx©å_de°roy
)

139 #i‡
	`deföed
(
_LIBOBJC
Ë|| deföed(
_LIBOBJC_WEAK
)

141 
	$__gthrw
(
±hªad_exô
)

142 #ifde‡
_POSIX_PRIORITY_SCHEDULING


143 #ifde‡
_POSIX_THREAD_PRIORITY_SCHEDULING


144 
	$__gthrw
(
sched_gë_¥i‹ôy_max
)

145 
	$__gthrw
(
sched_gë_¥i‹ôy_mö
)

148 
	$__gthrw
(
±hªad_©å_de°roy
)

149 
	$__gthrw
(
±hªad_©å_öô
)

150 
	$__gthrw
(
±hªad_©å_£tdëach°©e
)

151 #ifde‡
_POSIX_THREAD_PRIORITY_SCHEDULING


152 
	$__gthrw
(
±hªad_gësched∑øm
)

153 
	$__gthrw
(
±hªad_£tsched∑øm
)

157 #i‡
__GXX_WEAK__
 && 
_GLIBCXX_GTHREAD_USE_WEAK


170 #i‡
	`deföed
(
__FªeBSD__
Ë|| (deföed(
__sun
Ë&& deföed(
__svr4__
))

172 vﬁ©ûê
__gthªad_a˘ive
 = -1;

175 
	$__gthªad_åiggî
 ()

177 
__gthªad_a˘ive
 = 1;

178 
	}
}

180 
ölöe
 

181 
	$__gthªad_a˘ive_p
 ()

183 
±hªad_muãx_t
 
__gthªad_a˘ive_muãx
 = 
PTHREAD_MUTEX_INITIALIZER
;

184 
±hªad_⁄˚_t
 
__gthªad_a˘ive_⁄˚
 = 
PTHREAD_ONCE_INIT
;

187 
__gthªad_a˘ive_œã°_vÆue
 = 
__gthªad_a˘ive
;

192 i‡(
	`__buûtö_ex≥˘
 (
__gthªad_a˘ive_œã°_vÆue
 < 0, 0))

194 i‡(
	`__gthrw_
(
±hªad_⁄˚
))

198 
	`__gthrw_
(
±hªad_muãx_lock
Ë(&
__gthªad_a˘ive_muãx
);

199 
	`__gthrw_
(
±hªad_⁄˚
Ë(&
__gthªad_a˘ive_⁄˚
, 
__gthªad_åiggî
);

200 
	`__gthrw_
(
±hªad_muãx_u∆ock
Ë(&
__gthªad_a˘ive_muãx
);

204 i‡(
__gthªad_a˘ive
 < 0)

205 
__gthªad_a˘ive
 = 0;

207 
__gthªad_a˘ive_œã°_vÆue
 = 
__gthªad_a˘ive
;

210  
__gthªad_a˘ive_œã°_vÆue
 != 0;

211 
	}
}

236 #ifde‡
__GLIBC__


237 
__gthrw2
(
__gthrw_
(
__±hªad_key_¸óã
),

238 
__±hªad_key_¸óã
,

239 
±hªad_key_¸óã
)

240 
	#GTHR_ACTIVE_PROXY
 
	`__gthrw_
(
__±hªad_key_¸óã
)

	)

241 #ñi‡
deföed
 (
__BIONIC__
)

242 
	#GTHR_ACTIVE_PROXY
 
	`__gthrw_
(
±hªad_¸óã
)

	)

244 
	#GTHR_ACTIVE_PROXY
 
	`__gthrw_
(
±hªad_ˇn˚l
)

	)

247 
ölöe
 

248 
	$__gthªad_a˘ive_p
 ()

250 *c⁄° 
__gthªad_a˘ive_±r


251 
	`__exãnsi⁄__
 (*Ë&
GTHR_ACTIVE_PROXY
;

252  
__gthªad_a˘ive_±r
 != 0;

253 
	}
}

276 #i‡
deföed
(
__hµa__
Ë&& deföed(
__hpux__
)

278 vﬁ©ûê
	g__gthªad_a˘ive
 = -1;

280 
ölöe
 

281 
	$__gthªad_a˘ive_p
 ()

284 
__gthªad_a˘ive_œã°_vÆue
 = 
__gthªad_a˘ive
;

285 
size_t
 
__s
;

287 i‡(
	`__buûtö_ex≥˘
 (
__gthªad_a˘ive_œã°_vÆue
 < 0, 0))

289 
	`±hªad_deÁu…_°acksize_≈
 (0, &
__s
);

290 
__gthªad_a˘ive
 = 
__s
 ? 1 : 0;

291 
__gthªad_a˘ive_œã°_vÆue
 = 
__gthªad_a˘ive
;

294  
__gthªad_a˘ive_œã°_vÆue
 != 0;

295 
	}
}

299 
ölöe
 

300 
	$__gthªad_a˘ive_p
 ()

303 
	}
}

309 #ifde‡
_LIBOBJC


312 
	~<c⁄fig.h
>

314 #ifde‡
HAVE_SCHED_H


315 
	~<sched.h
>

319 
±hªad_key_t
 
	g_objc_thªad_°‹age
;

320 
±hªad_©å_t
 
	g_objc_thªad_©åibs
;

323 *
	gthªad_loˇl_°‹age
 = 
NULL
;

328 
ölöe
 

329 
	$__gthªad_objc_öô_thªad_sy°em
 ()

331 i‡(
	`__gthªad_a˘ive_p
 ())

334 i‡(
	`__gthrw_
(
±hªad_key_¸óã
Ë(&
_objc_thªad_°‹age
, 
NULL
) == 0)

339 i‡(
	`__gthrw_
(
±hªad_©å_öô
Ë(&
_objc_thªad_©åibs
) == 0

340 && 
	`__gthrw_
(
±hªad_©å_£tdëach°©e
Ë(&
_objc_thªad_©åibs
,

341 
PTHREAD_CREATE_DETACHED
) == 0)

347 
	}
}

350 
ölöe
 

351 
	$__gthªad_objc_˛o£_thªad_sy°em
 ()

353 i‡(
	`__gthªad_a˘ive_p
 ()

354 && 
	`__gthrw_
(
±hªad_key_dñëe
Ë(
_objc_thªad_°‹age
) == 0

355 && 
	`__gthrw_
(
±hªad_©å_de°roy
Ë(&
_objc_thªad_©åibs
) == 0)

359 
	}
}

364 
ölöe
 
objc_thªad_t


365 
	$__gthªad_objc_thªad_dëach
 ((*
func
)(*), *
¨g
)

367 
objc_thªad_t
 
thªad_id
;

368 
±hªad_t
 
√w_thªad_h™dÀ
;

370 i‡(!
	`__gthªad_a˘ive_p
 ())

371  
NULL
;

373 i‡(!(
	`__gthrw_
(
±hªad_¸óã
Ë(&
√w_thªad_h™dÀ
, &
_objc_thªad_©åibs
,

374 (*Ë
func
, 
¨g
)))

375 
thªad_id
 = (
objc_thªad_t
Ë
√w_thªad_h™dÀ
;

377 
thªad_id
 = 
NULL
;

379  
thªad_id
;

380 
	}
}

383 
ölöe
 

384 
	$__gthªad_objc_thªad_£t_¥i‹ôy
 (
¥i‹ôy
)

386 i‡(!
	`__gthªad_a˘ive_p
 ())

390 #ifde‡
_POSIX_PRIORITY_SCHEDULING


391 #ifde‡
_POSIX_THREAD_PRIORITY_SCHEDULING


392 
±hªad_t
 
thªad_id
 = 
	`__gthrw_
(
±hªad_£lf
) ();

393 
pﬁicy
;

394 
sched_∑øm
 
∑øms
;

395 
¥i‹ôy_mö
, 
¥i‹ôy_max
;

397 i‡(
	`__gthrw_
(
±hªad_gësched∑øm
Ë(
thªad_id
, &
pﬁicy
, &
∑øms
) == 0)

399 i‡((
¥i‹ôy_max
 = 
	`__gthrw_
(
sched_gë_¥i‹ôy_max
Ë(
pﬁicy
)) == -1)

402 i‡((
¥i‹ôy_mö
 = 
	`__gthrw_
(
sched_gë_¥i‹ôy_mö
Ë(
pﬁicy
)) == -1)

405 i‡(
¥i‹ôy
 > 
¥i‹ôy_max
)

406 
¥i‹ôy
 = 
¥i‹ôy_max
;

407 i‡(
¥i‹ôy
 < 
¥i‹ôy_mö
)

408 
¥i‹ôy
 = 
¥i‹ôy_mö
;

409 
∑øms
.
sched_¥i‹ôy
 = 
¥i‹ôy
;

416 i‡(
	`__gthrw_
(
±hªad_£tsched∑øm
Ë(
thªad_id
, 
pﬁicy
, &
∑øms
) == 0)

423 
	}
}

426 
ölöe
 

427 
	$__gthªad_objc_thªad_gë_¥i‹ôy
 ()

429 #ifde‡
_POSIX_PRIORITY_SCHEDULING


430 #ifde‡
_POSIX_THREAD_PRIORITY_SCHEDULING


431 i‡(
	`__gthªad_a˘ive_p
 ())

433 
pﬁicy
;

434 
sched_∑øm
 
∑øms
;

436 i‡(
	`__gthrw_
(
±hªad_gësched∑øm
Ë(__gthrw_(
±hªad_£lf
Ë(), &
pﬁicy
, &
∑øms
) == 0)

437  
∑øms
.
sched_¥i‹ôy
;

444  
OBJC_THREAD_INTERACTIVE_PRIORITY
;

445 
	}
}

448 
ölöe
 

449 
	$__gthªad_objc_thªad_yõld
 ()

451 i‡(
	`__gthªad_a˘ive_p
 ())

452 
	`__gthrw_
(
sched_yõld
) ();

453 
	}
}

456 
ölöe
 

457 
	$__gthªad_objc_thªad_exô
 ()

459 i‡(
	`__gthªad_a˘ive_p
 ())

461 
	`__gthrw_
(
±hªad_exô
Ë(&
__objc_thªad_exô_°©us
);

465 
	}
}

468 
ölöe
 
objc_thªad_t


469 
	$__gthªad_objc_thªad_id
 ()

471 i‡(
	`__gthªad_a˘ive_p
 ())

472  (
objc_thªad_t
Ë
	`__gthrw_
(
±hªad_£lf
) ();

474  (
objc_thªad_t
) 1;

475 
	}
}

478 
ölöe
 

479 
	$__gthªad_objc_thªad_£t_d©a
 (*
vÆue
)

481 i‡(
	`__gthªad_a˘ive_p
 ())

482  
	`__gthrw_
(
±hªad_£t•ecific
Ë(
_objc_thªad_°‹age
, 
vÆue
);

485 
thªad_loˇl_°‹age
 = 
vÆue
;

488 
	}
}

491 
ölöe
 *

492 
	$__gthªad_objc_thªad_gë_d©a
 ()

494 i‡(
	`__gthªad_a˘ive_p
 ())

495  
	`__gthrw_
(
±hªad_gë•ecific
Ë(
_objc_thªad_°‹age
);

497  
thªad_loˇl_°‹age
;

498 
	}
}

503 
ölöe
 

504 
	$__gthªad_objc_muãx_Æloˇã
 (
objc_muãx_t
 
muãx
)

506 i‡(
	`__gthªad_a˘ive_p
 ())

508 
muãx
->
backíd
 = 
	`objc_mÆloc
 ( (
±hªad_muãx_t
));

510 i‡(
	`__gthrw_
(
±hªad_muãx_öô
Ë((
±hªad_muãx_t
 *Ë
muãx
->
backíd
, 
NULL
))

512 
	`objc_‰ì
 (
muãx
->
backíd
);

513 
muãx
->
backíd
 = 
NULL
;

519 
	}
}

522 
ölöe
 

523 
	$__gthªad_objc_muãx_dóŒoˇã
 (
objc_muãx_t
 
muãx
)

525 i‡(
	`__gthªad_a˘ive_p
 ())

527 
cou¡
;

536 
cou¡
 = 
	`__gthrw_
(
±hªad_muãx_u∆ock
Ë((
±hªad_muãx_t
 *Ë
muãx
->
backíd
);

537 i‡(
cou¡
 < 0)

540 
cou¡
);

542 i‡(
	`__gthrw_
(
±hªad_muãx_de°roy
Ë((
±hªad_muãx_t
 *Ë
muãx
->
backíd
))

545 
	`objc_‰ì
 (
muãx
->
backíd
);

546 
muãx
->
backíd
 = 
NULL
;

549 
	}
}

552 
ölöe
 

553 
	$__gthªad_objc_muãx_lock
 (
objc_muãx_t
 
muãx
)

555 i‡(
	`__gthªad_a˘ive_p
 ()

556 && 
	`__gthrw_
(
±hªad_muãx_lock
Ë((
±hªad_muãx_t
 *Ë
muãx
->
backíd
) != 0)

562 
	}
}

565 
ölöe
 

566 
	$__gthªad_objc_muãx_åylock
 (
objc_muãx_t
 
muãx
)

568 i‡(
	`__gthªad_a˘ive_p
 ()

569 && 
	`__gthrw_
(
±hªad_muãx_åylock
Ë((
±hªad_muãx_t
 *Ë
muãx
->
backíd
) != 0)

575 
	}
}

578 
ölöe
 

579 
	$__gthªad_objc_muãx_u∆ock
 (
objc_muãx_t
 
muãx
)

581 i‡(
	`__gthªad_a˘ive_p
 ()

582 && 
	`__gthrw_
(
±hªad_muãx_u∆ock
Ë((
±hªad_muãx_t
 *Ë
muãx
->
backíd
) != 0)

588 
	}
}

593 
ölöe
 

594 
	$__gthªad_objc_c⁄dôi⁄_Æloˇã
 (
objc_c⁄dôi⁄_t
 
c⁄dôi⁄
)

596 i‡(
	`__gthªad_a˘ive_p
 ())

598 
c⁄dôi⁄
->
backíd
 = 
	`objc_mÆloc
 ( (
±hªad_c⁄d_t
));

600 i‡(
	`__gthrw_
(
±hªad_c⁄d_öô
Ë((
±hªad_c⁄d_t
 *Ë
c⁄dôi⁄
->
backíd
, 
NULL
))

602 
	`objc_‰ì
 (
c⁄dôi⁄
->
backíd
);

603 
c⁄dôi⁄
->
backíd
 = 
NULL
;

609 
	}
}

612 
ölöe
 

613 
	$__gthªad_objc_c⁄dôi⁄_dóŒoˇã
 (
objc_c⁄dôi⁄_t
 
c⁄dôi⁄
)

615 i‡(
	`__gthªad_a˘ive_p
 ())

617 i‡(
	`__gthrw_
(
±hªad_c⁄d_de°roy
Ë((
±hªad_c⁄d_t
 *Ë
c⁄dôi⁄
->
backíd
))

620 
	`objc_‰ì
 (
c⁄dôi⁄
->
backíd
);

621 
c⁄dôi⁄
->
backíd
 = 
NULL
;

624 
	}
}

627 
ölöe
 

628 
	$__gthªad_objc_c⁄dôi⁄_waô
 (
objc_c⁄dôi⁄_t
 
c⁄dôi⁄
, 
objc_muãx_t
 
muãx
)

630 i‡(
	`__gthªad_a˘ive_p
 ())

631  
	`__gthrw_
(
±hªad_c⁄d_waô
Ë((
±hªad_c⁄d_t
 *Ë
c⁄dôi⁄
->
backíd
,

632 (
±hªad_muãx_t
 *Ë
muãx
->
backíd
);

635 
	}
}

638 
ölöe
 

639 
	$__gthªad_objc_c⁄dôi⁄_brﬂdˇ°
 (
objc_c⁄dôi⁄_t
 
c⁄dôi⁄
)

641 i‡(
	`__gthªad_a˘ive_p
 ())

642  
	`__gthrw_
(
±hªad_c⁄d_brﬂdˇ°
Ë((
±hªad_c⁄d_t
 *Ë
c⁄dôi⁄
->
backíd
);

645 
	}
}

648 
ölöe
 

649 
	$__gthªad_objc_c⁄dôi⁄_sig«l
 (
objc_c⁄dôi⁄_t
 
c⁄dôi⁄
)

651 i‡(
	`__gthªad_a˘ive_p
 ())

652  
	`__gthrw_
(
±hªad_c⁄d_sig«l
Ë((
±hªad_c⁄d_t
 *Ë
c⁄dôi⁄
->
backíd
);

655 
	}
}

659 
ölöe
 

660 
	$__gthªad_¸óã
 (
__gthªad_t
 *
__thªadid
, *(*
__func
) (*),

661 *
__¨gs
)

663  
	`__gthrw_
(
±hªad_¸óã
Ë(
__thªadid
, 
NULL
, 
__func
, 
__¨gs
);

664 
	}
}

666 
ölöe
 

667 
	$__gthªad_joö
 (
__gthªad_t
 
__thªadid
, **
__vÆue_±r
)

669  
	`__gthrw_
(
±hªad_joö
Ë(
__thªadid
, 
__vÆue_±r
);

670 
	}
}

672 
ölöe
 

673 
	$__gthªad_dëach
 (
__gthªad_t
 
__thªadid
)

675  
	`__gthrw_
(
±hªad_dëach
Ë(
__thªadid
);

676 
	}
}

678 
ölöe
 

679 
	$__gthªad_equÆ
 (
__gthªad_t
 
__t1
, __gthªad_à
__t2
)

681  
	`__gthrw_
(
±hªad_equÆ
Ë(
__t1
, 
__t2
);

682 
	}
}

684 
ölöe
 
__gthªad_t


685 
	$__gthªad_£lf
 ()

687  
	`__gthrw_
(
±hªad_£lf
) ();

688 
	}
}

690 
ölöe
 

691 
	$__gthªad_yõld
 ()

693  
	`__gthrw_
(
sched_yõld
) ();

694 
	}
}

696 
ölöe
 

697 
	$__gthªad_⁄˚
 (
__gthªad_⁄˚_t
 *
__⁄˚
, (*
__func
) ())

699 i‡(
	`__gthªad_a˘ive_p
 ())

700  
	`__gthrw_
(
±hªad_⁄˚
Ë(
__⁄˚
, 
__func
);

703 
	}
}

705 
ölöe
 

706 
	$__gthªad_key_¸óã
 (
__gthªad_key_t
 *
__key
, (*
__dt‹
) (*))

708  
	`__gthrw_
(
±hªad_key_¸óã
Ë(
__key
, 
__dt‹
);

709 
	}
}

711 
ölöe
 

712 
	$__gthªad_key_dñëe
 (
__gthªad_key_t
 
__key
)

714  
	`__gthrw_
(
±hªad_key_dñëe
Ë(
__key
);

715 
	}
}

717 
ölöe
 *

718 
	$__gthªad_gë•ecific
 (
__gthªad_key_t
 
__key
)

720  
	`__gthrw_
(
±hªad_gë•ecific
Ë(
__key
);

721 
	}
}

723 
ölöe
 

724 
	$__gthªad_£t•ecific
 (
__gthªad_key_t
 
__key
, c⁄° *
__±r
)

726  
	`__gthrw_
(
±hªad_£t•ecific
Ë(
__key
, 
__±r
);

727 
	}
}

729 
ölöe
 

730 
	$__gthªad_muãx_öô_fun˘i⁄
 (
__gthªad_muãx_t
 *
__muãx
)

732 i‡(
	`__gthªad_a˘ive_p
 ())

733 
	`__gthrw_
(
±hªad_muãx_öô
Ë(
__muãx
, 
NULL
);

734 
	}
}

736 
ölöe
 

737 
	$__gthªad_muãx_de°roy
 (
__gthªad_muãx_t
 *
__muãx
)

739 i‡(
	`__gthªad_a˘ive_p
 ())

740  
	`__gthrw_
(
±hªad_muãx_de°roy
Ë(
__muãx
);

743 
	}
}

745 
ölöe
 

746 
	$__gthªad_muãx_lock
 (
__gthªad_muãx_t
 *
__muãx
)

748 i‡(
	`__gthªad_a˘ive_p
 ())

749  
	`__gthrw_
(
±hªad_muãx_lock
Ë(
__muãx
);

752 
	}
}

754 
ölöe
 

755 
	$__gthªad_muãx_åylock
 (
__gthªad_muãx_t
 *
__muãx
)

757 i‡(
	`__gthªad_a˘ive_p
 ())

758  
	`__gthrw_
(
±hªad_muãx_åylock
Ë(
__muãx
);

761 
	}
}

763 #i‡
_GTHREAD_USE_MUTEX_TIMEDLOCK


764 
ölöe
 

765 
	$__gthªad_muãx_timedlock
 (
__gthªad_muãx_t
 *
__muãx
,

766 c⁄° 
__gthªad_time_t
 *
__abs_timeout
)

768 i‡(
	`__gthªad_a˘ive_p
 ())

769  
	`__gthrw_
(
±hªad_muãx_timedlock
Ë(
__muãx
, 
__abs_timeout
);

772 
	}
}

775 
ölöe
 

776 
	$__gthªad_muãx_u∆ock
 (
__gthªad_muãx_t
 *
__muãx
)

778 i‡(
	`__gthªad_a˘ive_p
 ())

779  
	`__gthrw_
(
±hªad_muãx_u∆ock
Ë(
__muãx
);

782 
	}
}

784 #i‡!
deföed
–
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
) \

785 || 
	$deföed
(
_GTHREAD_USE_RECURSIVE_MUTEX_INIT_FUNC
)

786 
ölöe
 

787 
	$__gthªad_ªcursive_muãx_öô_fun˘i⁄
 (
__gthªad_ªcursive_muãx_t
 *
__muãx
)

789 i‡(
	`__gthªad_a˘ive_p
 ())

791 
±hªad_muãx©å_t
 
__©å
;

792 
__r
;

794 
__r
 = 
	`__gthrw_
(
±hªad_muãx©å_öô
Ë(&
__©å
);

795 i‡(!
__r
)

796 
__r
 = 
	`__gthrw_
(
±hªad_muãx©å_£ây≥
Ë(&
__©å
,

797 
PTHREAD_MUTEX_RECURSIVE
);

798 i‡(!
__r
)

799 
__r
 = 
	`__gthrw_
(
±hªad_muãx_öô
Ë(
__muãx
, &
__©å
);

800 i‡(!
__r
)

801 
__r
 = 
	`__gthrw_
(
±hªad_muãx©å_de°roy
Ë(&
__©å
);

802  
__r
;

805 
	}
}

808 
ölöe
 

809 
	$__gthªad_ªcursive_muãx_lock
 (
__gthªad_ªcursive_muãx_t
 *
__muãx
)

811  
	`__gthªad_muãx_lock
 (
__muãx
);

812 
	}
}

814 
ölöe
 

815 
	$__gthªad_ªcursive_muãx_åylock
 (
__gthªad_ªcursive_muãx_t
 *
__muãx
)

817  
	`__gthªad_muãx_åylock
 (
__muãx
);

818 
	}
}

820 #i‡
_GTHREAD_USE_MUTEX_TIMEDLOCK


821 
ölöe
 

822 
	$__gthªad_ªcursive_muãx_timedlock
 (
__gthªad_ªcursive_muãx_t
 *
__muãx
,

823 c⁄° 
__gthªad_time_t
 *
__abs_timeout
)

825  
	`__gthªad_muãx_timedlock
 (
__muãx
, 
__abs_timeout
);

826 
	}
}

829 
ölöe
 

830 
	$__gthªad_ªcursive_muãx_u∆ock
 (
__gthªad_ªcursive_muãx_t
 *
__muãx
)

832  
	`__gthªad_muãx_u∆ock
 (
__muãx
);

833 
	}
}

835 
ölöe
 

836 
	$__gthªad_ªcursive_muãx_de°roy
 (
__gthªad_ªcursive_muãx_t
 *
__muãx
)

838  
	`__gthªad_muãx_de°roy
 (
__muãx
);

839 
	}
}

841 #ifde‡
_GTHREAD_USE_COND_INIT_FUNC


842 
ölöe
 

843 
	$__gthªad_c⁄d_öô_fun˘i⁄
 (
__gthªad_c⁄d_t
 *
__c⁄d
)

845 i‡(
	`__gthªad_a˘ive_p
 ())

846 
	`__gthrw_
(
±hªad_c⁄d_öô
Ë(
__c⁄d
, 
NULL
);

847 
	}
}

850 
ölöe
 

851 
	$__gthªad_c⁄d_brﬂdˇ°
 (
__gthªad_c⁄d_t
 *
__c⁄d
)

853  
	`__gthrw_
(
±hªad_c⁄d_brﬂdˇ°
Ë(
__c⁄d
);

854 
	}
}

856 
ölöe
 

857 
	$__gthªad_c⁄d_sig«l
 (
__gthªad_c⁄d_t
 *
__c⁄d
)

859  
	`__gthrw_
(
±hªad_c⁄d_sig«l
Ë(
__c⁄d
);

860 
	}
}

862 
ölöe
 

863 
	$__gthªad_c⁄d_waô
 (
__gthªad_c⁄d_t
 *
__c⁄d
, 
__gthªad_muãx_t
 *
__muãx
)

865  
	`__gthrw_
(
±hªad_c⁄d_waô
Ë(
__c⁄d
, 
__muãx
);

866 
	}
}

868 
ölöe
 

869 
	$__gthªad_c⁄d_timedwaô
 (
__gthªad_c⁄d_t
 *
__c⁄d
, 
__gthªad_muãx_t
 *
__muãx
,

870 c⁄° 
__gthªad_time_t
 *
__abs_timeout
)

872  
	`__gthrw_
(
±hªad_c⁄d_timedwaô
Ë(
__c⁄d
, 
__muãx
, 
__abs_timeout
);

873 
	}
}

875 
ölöe
 

876 
	$__gthªad_c⁄d_waô_ªcursive
 (
__gthªad_c⁄d_t
 *
__c⁄d
,

877 
__gthªad_ªcursive_muãx_t
 *
__muãx
)

879  
	`__gthªad_c⁄d_waô
 (
__c⁄d
, 
__muãx
);

880 
	}
}

882 
ölöe
 

883 
	$__gthªad_c⁄d_de°roy
 (
__gthªad_c⁄d_t
* 
__c⁄d
)

885  
	`__gthrw_
(
±hªad_c⁄d_de°roy
Ë(
__c⁄d
);

886 
	}
}

	@/usr/include/x86_64-linux-gnu/c++/11/bits/gthr-single.h

26 #i‚de‡
_GLIBCXX_GCC_GTHR_SINGLE_H


27 
	#_GLIBCXX_GCC_GTHR_SINGLE_H


	)

31 
	t__gthªad_key_t
;

32 
	t__gthªad_⁄˚_t
;

33 
	t__gthªad_muãx_t
;

34 
	t__gthªad_ªcursive_muãx_t
;

36 
	#__GTHREAD_ONCE_INIT
 0

	)

37 
	#__GTHREAD_MUTEX_INIT
 0

	)

38 
	#__GTHREAD_MUTEX_INIT_FUNCTION
(
mx
Ëdÿ{} 0)

	)

39 
	#__GTHREAD_RECURSIVE_MUTEX_INIT
 0

	)

41 
	#_GLIBCXX_UNUSED
 
	`__©åibuã__
((
__unu£d__
))

	)

43 #ifde‡
_LIBOBJC


46 *
	gthªad_loˇl_°‹age
 = 
NULL
;

51 
ölöe
 

52 
	$__gthªad_objc_öô_thªad_sy°em
 ()

56 
	}
}

59 
ölöe
 

60 
	$__gthªad_objc_˛o£_thªad_sy°em
 ()

64 
	}
}

69 
ölöe
 
objc_thªad_t


70 
	$__gthªad_objc_thªad_dëach
 ((* 
func
)(*), * 
¨g
 
_GLIBCXX_UNUSED
)

73  
NULL
;

74 
	}
}

77 
ölöe
 

78 
	$__gthªad_objc_thªad_£t_¥i‹ôy
 (
¥i‹ôy
 
_GLIBCXX_UNUSED
)

82 
	}
}

85 
ölöe
 

86 
	$__gthªad_objc_thªad_gë_¥i‹ôy
 ()

88  
OBJC_THREAD_INTERACTIVE_PRIORITY
;

89 
	}
}

92 
ölöe
 

93 
	$__gthªad_objc_thªad_yõld
 ()

96 
	}
}

99 
ölöe
 

100 
	$__gthªad_objc_thªad_exô
 ()

106 
	}
}

109 
ölöe
 
objc_thªad_t


110 
	$__gthªad_objc_thªad_id
 ()

113  (
objc_thªad_t
) 1;

114 
	}
}

117 
ölöe
 

118 
	$__gthªad_objc_thªad_£t_d©a
 (*
vÆue
)

120 
thªad_loˇl_°‹age
 = 
vÆue
;

122 
	}
}

125 
ölöe
 *

126 
	$__gthªad_objc_thªad_gë_d©a
 ()

128  
thªad_loˇl_°‹age
;

129 
	}
}

134 
ölöe
 

135 
	$__gthªad_objc_muãx_Æloˇã
 (
objc_muãx_t
 
muãx
 
_GLIBCXX_UNUSED
)

138 
	}
}

141 
ölöe
 

142 
	$__gthªad_objc_muãx_dóŒoˇã
 (
objc_muãx_t
 
muãx
 
_GLIBCXX_UNUSED
)

145 
	}
}

148 
ölöe
 

149 
	$__gthªad_objc_muãx_lock
 (
objc_muãx_t
 
muãx
 
_GLIBCXX_UNUSED
)

153 
	}
}

156 
ölöe
 

157 
	$__gthªad_objc_muãx_åylock
 (
objc_muãx_t
 
muãx
 
_GLIBCXX_UNUSED
)

161 
	}
}

164 
ölöe
 

165 
	$__gthªad_objc_muãx_u∆ock
 (
objc_muãx_t
 
muãx
 
_GLIBCXX_UNUSED
)

168 
	}
}

173 
ölöe
 

174 
	$__gthªad_objc_c⁄dôi⁄_Æloˇã
 (
objc_c⁄dôi⁄_t
 
c⁄dôi⁄
 
_GLIBCXX_UNUSED
)

177 
	}
}

180 
ölöe
 

181 
	$__gthªad_objc_c⁄dôi⁄_dóŒoˇã
 (
objc_c⁄dôi⁄_t
 
c⁄dôi⁄
 
_GLIBCXX_UNUSED
)

184 
	}
}

187 
ölöe
 

188 
	$__gthªad_objc_c⁄dôi⁄_waô
 (
objc_c⁄dôi⁄_t
 
c⁄dôi⁄
 
_GLIBCXX_UNUSED
,

189 
objc_muãx_t
 
muãx
 
_GLIBCXX_UNUSED
)

192 
	}
}

195 
ölöe
 

196 
	$__gthªad_objc_c⁄dôi⁄_brﬂdˇ°
 (
objc_c⁄dôi⁄_t
 
c⁄dôi⁄
 
_GLIBCXX_UNUSED
)

199 
	}
}

202 
ölöe
 

203 
	$__gthªad_objc_c⁄dôi⁄_sig«l
 (
objc_c⁄dôi⁄_t
 
c⁄dôi⁄
 
_GLIBCXX_UNUSED
)

206 
	}
}

210 
ölöe
 

211 
	$__gthªad_a˘ive_p
 ()

214 
	}
}

216 
ölöe
 

217 
	$__gthªad_⁄˚
 (
__gthªad_⁄˚_t
 *
__⁄˚
 
_GLIBCXX_UNUSED
, (*
__func
) () _GLIBCXX_UNUSED)

220 
	}
}

222 
ölöe
 
_GLIBCXX_UNUSED


223 
	$__gthªad_key_¸óã
 (
__gthªad_key_t
 *
__key
 
_GLIBCXX_UNUSED
, (*
__func
) (*) _GLIBCXX_UNUSED)

226 
	}
}

228 
_GLIBCXX_UNUSED


229 
	$__gthªad_key_dñëe
 (
__gthªad_key_t
 
__key
 
_GLIBCXX_UNUSED
)

232 
	}
}

234 
ölöe
 *

235 
	$__gthªad_gë•ecific
 (
__gthªad_key_t
 
__key
 
_GLIBCXX_UNUSED
)

238 
	}
}

240 
ölöe
 

241 
	$__gthªad_£t•ecific
 (
__gthªad_key_t
 
__key
 
_GLIBCXX_UNUSED
, c⁄° *
__v
 _GLIBCXX_UNUSED)

244 
	}
}

246 
ölöe
 

247 
	$__gthªad_muãx_de°roy
 (
__gthªad_muãx_t
 *
__muãx
 
_GLIBCXX_UNUSED
)

250 
	}
}

252 
ölöe
 

253 
	$__gthªad_muãx_lock
 (
__gthªad_muãx_t
 *
__muãx
 
_GLIBCXX_UNUSED
)

256 
	}
}

258 
ölöe
 

259 
	$__gthªad_muãx_åylock
 (
__gthªad_muãx_t
 *
__muãx
 
_GLIBCXX_UNUSED
)

262 
	}
}

264 
ölöe
 

265 
	$__gthªad_muãx_u∆ock
 (
__gthªad_muãx_t
 *
__muãx
 
_GLIBCXX_UNUSED
)

268 
	}
}

270 
ölöe
 

271 
	$__gthªad_ªcursive_muãx_lock
 (
__gthªad_ªcursive_muãx_t
 *
__muãx
)

273  
	`__gthªad_muãx_lock
 (
__muãx
);

274 
	}
}

276 
ölöe
 

277 
	$__gthªad_ªcursive_muãx_åylock
 (
__gthªad_ªcursive_muãx_t
 *
__muãx
)

279  
	`__gthªad_muãx_åylock
 (
__muãx
);

280 
	}
}

282 
ölöe
 

283 
	$__gthªad_ªcursive_muãx_u∆ock
 (
__gthªad_ªcursive_muãx_t
 *
__muãx
)

285  
	`__gthªad_muãx_u∆ock
 (
__muãx
);

286 
	}
}

288 
ölöe
 

289 
	$__gthªad_ªcursive_muãx_de°roy
 (
__gthªad_ªcursive_muãx_t
 *
__muãx
)

291  
	`__gthªad_muãx_de°roy
 (
__muãx
);

292 
	}
}

296 #unde‡
_GLIBCXX_UNUSED


	@/usr/include/x86_64-linux-gnu/c++/11/bits/gthr.h

26 #i‚de‡
_GLIBCXX_GCC_GTHR_H


27 
	#_GLIBCXX_GCC_GTHR_H


	)

29 #i‚de‡
_GLIBCXX_HIDE_EXPORTS


30 #¥agm®
GCC
 
visibûôy
 
push
()

135 #i‡
__GXX_WEAK__


139 #ifde‡
__MINGW32__


140 #unde‡
_GLIBCXX_GTHREAD_USE_WEAK


141 
	#_GLIBCXX_GTHREAD_USE_WEAK
 0

	)

144 #i‚de‡
_GLIBCXX_GTHREAD_USE_WEAK


145 
	#_GLIBCXX_GTHREAD_USE_WEAK
 1

	)

148 
	~<bôs/gthr-deÁu….h
>

150 #i‚de‡
_GLIBCXX_HIDE_EXPORTS


151 #¥agm®
GCC
 
visibûôy
 
p›


	@/usr/include/x86_64-linux-gnu/c++/11/bits/messages_members.h

36 
	~<liböé.h
>

38 
«me•a˚
 
°d
 
	$_GLIBCXX_VISIBILITY
()

40 
_GLIBCXX_BEGIN_NAMESPACE_VERSION


43 
ãm∂©e
<
ty≥«me
 
_Ch¨T
>

44 
mesßges
<
_Ch¨T
>::
	`mesßges
(
size_t
 
__ªfs
)

45 : 
	`Á˚t
(
__ªfs
), 
	`_M_c_loˇÀ_mesßges
(
	`_S_gë_c_loˇÀ
()),

46 
	`_M_«me_mesßges
(
	`_S_gë_c_«me
())

49 
ãm∂©e
<
ty≥«me
 
_Ch¨T
>

50 
mesßges
<
_Ch¨T
>::
	`mesßges
(
__c_loˇÀ
 
__˛oc
, c⁄° * 
__s
,

51 
size_t
 
__ªfs
)

52 : 
	`Á˚t
(
__ªfs
), 
	`_M_c_loˇÀ_mesßges
(0), 
	`_M_«me_mesßges
(0)

54 i‡(
	`__buûtö_°rcmp
(
__s
, 
	`_S_gë_c_«me
()) != 0)

56 c⁄° 
size_t
 
__Àn
 = 
	`__buûtö_°æí
(
__s
) + 1;

57 * 
__tmp
 = 
√w
 [
__Àn
];

58 
	`__buûtö_mem˝y
(
__tmp
, 
__s
, 
__Àn
);

59 
_M_«me_mesßges
 = 
__tmp
;

62 
_M_«me_mesßges
 = 
	`_S_gë_c_«me
();

65 
_M_c_loˇÀ_mesßges
 = 
	`_S_˛⁄e_c_loˇÀ
(
__˛oc
);

68 
ãm∂©e
<
ty≥«me
 
_Ch¨T
>

69 
ty≥«me
 
mesßges
<
_Ch¨T
>::
ˇèlog


70 
mesßges
<
_Ch¨T
>::
	`›í
(c⁄° 
basic_°rög
<>& 
__s
, c⁄° 
loˇÀ
& 
__loc
,

71 c⁄° * 
__dú
) const

73 
	`bödãxtdomaö
(
__s
.
	`c_°r
(), 
__dú
);

74  
this
->
	`do_›í
(
__s
, 
__loc
);

78 
ãm∂©e
<
ty≥«me
 
_Ch¨T
>

79 
mesßges
<
_Ch¨T
>::~
	`mesßges
()

81 i‡(
_M_«me_mesßges
 !
	`_S_gë_c_«me
())

82 
dñëe
 [] 
_M_«me_mesßges
;

83 
	`_S_de°roy_c_loˇÀ
(
_M_c_loˇÀ_mesßges
);

86 
ãm∂©e
<
ty≥«me
 
_Ch¨T
>

87 
ty≥«me
 
mesßges
<
_Ch¨T
>::
ˇèlog


88 
mesßges
<
_Ch¨T
>::
	`do_›í
(c⁄° 
basic_°rög
<>& 
__s
,

89 c⁄° 
loˇÀ
&) const

93 
	`ãxtdomaö
(
__s
.
	`c_°r
());

97 
ãm∂©e
<
ty≥«me
 
_Ch¨T
>

99 
mesßges
<
_Ch¨T
>::
	`do_˛o£
(
ˇèlog
) const

103 
ãm∂©e
<
ty≥«me
 
_Ch¨T
>

104 
mesßges_by«me
<
_Ch¨T
>::
	`mesßges_by«me
(c⁄° * 
__s
, 
size_t
 
__ªfs
)

105 : 
mesßges
<
_Ch¨T
>(
__ªfs
)

107 i‡(
this
->
_M_«me_mesßges
 !
loˇÀ
::
Á˚t
::
	`_S_gë_c_«me
())

109 
dñëe
 [] 
this
->
_M_«me_mesßges
;

110 i‡(
	`__buûtö_°rcmp
(
__s
, 
loˇÀ
::
Á˚t
::
	`_S_gë_c_«me
()) != 0)

112 c⁄° 
size_t
 
__Àn
 = 
	`__buûtö_°æí
(
__s
) + 1;

113 * 
__tmp
 = 
√w
 [
__Àn
];

114 
	`__buûtö_mem˝y
(
__tmp
, 
__s
, 
__Àn
);

115 
this
->
_M_«me_mesßges
 = 
__tmp
;

118 
this
->
_M_«me_mesßges
 = 
loˇÀ
::
Á˚t
::
	`_S_gë_c_«me
();

121 i‡(
	`__buûtö_°rcmp
(
__s
, "C") != 0

122 && 
	`__buûtö_°rcmp
(
__s
, "POSIX") != 0)

124 
this
->
	`_S_de°roy_c_loˇÀ
—his->
_M_c_loˇÀ_mesßges
);

125 
this
->
	`_S_¸óã_c_loˇÀ
—his->
_M_c_loˇÀ_mesßges
, 
__s
);

130 
ãm∂©e
<>

131 
ty≥«me
 
mesßges
<>::
ˇèlog


132 
mesßges
<>::
	`do_›í
(c⁄° 
basic_°rög
<>&,

133 c⁄° 
loˇÀ
&) const;

135 
ãm∂©e
<>

137 
mesßges
<>::
	`do_˛o£
(
ˇèlog
) const;

139 #ifde‡
_GLIBCXX_USE_WCHAR_T


140 
ãm∂©e
<>

141 
ty≥«me
 
mesßges
<
wch¨_t
>::
ˇèlog


142 
mesßges
<
wch¨_t
>::
	`do_›í
(c⁄° 
basic_°rög
<>&,

143 c⁄° 
loˇÀ
&) const;

145 
ãm∂©e
<>

147 
mesßges
<
wch¨_t
>::
	`do_˛o£
(
ˇèlog
) const;

150 
_GLIBCXX_END_NAMESPACE_VERSION


151 
	}
}

	@/usr/include/x86_64-linux-gnu/c++/11/bits/opt_random.h

30 #i‚de‡
_BITS_OPT_RANDOM_H


31 
	#_BITS_OPT_RANDOM_H
 1

	)

33 #ifde‡
__SSE3__


34 
	~<pmmöåö.h
>

38 #¥agm®
GCC
 
sy°em_hódî


41 
«me•a˚
 
°d
 
	$_GLIBCXX_VISIBILITY
()

43 
_GLIBCXX_BEGIN_NAMESPACE_VERSION


45 #ifde‡
__SSE3__


46 
ãm∂©e
<>

47 
ãm∂©e
<
ty≥«me
 
_Unif‹mR™domNumbîGíî©‹
>

49 
n‹mÆ_di°ributi⁄
<>::

50 
	`__gíî©e
(
ty≥«me
 
n‹mÆ_di°ributi⁄
<>::
ªsu…_ty≥
* 
__f
,

51 
ty≥«me
 
n‹mÆ_di°ributi⁄
<>::
ªsu…_ty≥
* 
__t
,

52 
_Unif‹mR™domNumbîGíî©‹
& 
__u∫g
,

53 c⁄° 
∑øm_ty≥
& 
__∑øm
)

55 
uöt64_t
 
	t__u˘y≥
;

57 i‡(
__f
 =
__t
)

60 i‡(
_M_ßved_avaûabÀ
)

62 
_M_ßved_avaûabÀ
 = 
Ál£
;

63 *
__f
++ = 
_M_ßved
 * 
__∑øm
.
	`°ddev
(Ë+ __∑øm.
	`món
();

65 i‡(
__f
 =
__t
)

69 
c⁄°ex¥
 
uöt64_t
 
__maskvÆ
 = 0xfffffffffffffull;

70 c⁄° 
__m128i
 
__mask
 = 
	`_mm_£t1_ïi64x
(
__maskvÆ
);

71 c⁄° 
__m128i
 
__two
 = 
	`_mm_£t1_ïi64x
(0x4000000000000000ull);

72 c⁄° 
__m128d
 
__thªe
 = 
	`_mm_£t1_pd
(3.0);

73 c⁄° 
__m128d
 
__av
 = 
	`_mm_£t1_pd
(
__∑øm
.
	`món
());

75 c⁄° 
__u˘y≥
 
__u∫gmö
 = 
__u∫g
.
	`mö
();

76 c⁄° 
__u˘y≥
 
__u∫gmax
 = 
__u∫g
.
	`max
();

77 c⁄° 
__u˘y≥
 
__u∫gønge
 = 
__u∫gmax
 - 
__u∫gmö
;

78 c⁄° 
__u˘y≥
 
__uîngønge
 = 
__u∫gønge
 + 1;

80 
__f
 + 1 < 
__t
)

82 
__À
;

83 
__m128d
 
__x
;

88 
__m128i
 
__i
;

89 
__m128d
 
__d
;

90 } 
__v
;

92 i‡(
__u∫gønge
 > 
__maskvÆ
)

94 i‡(
__dëaû
::
	`_Powî_of_2
(
__uîngønge
))

95 
__v
.
__i
 = 
	`_mm_™d_si128
(
	`_mm_£t_ïi64x
(
	`__u∫g
(),

96 
	`__u∫g
()),

97 
__mask
);

100 c⁄° 
__u˘y≥
 
__uî™ge
 = 
__maskvÆ
 + 1;

101 c⁄° 
__u˘y≥
 
__sˇlög
 = 
__u∫gønge
 / 
__uî™ge
;

102 c⁄° 
__u˘y≥
 
__∑°
 = 
__uî™ge
 * 
__sˇlög
;

103 
uöt64_t
 
__v1
;

105 
__v1
 = 
	`__u˘y≥
(
	`__u∫g
()Ë- 
__u∫gmö
;

106 
__v1
 >
__∑°
);

107 
__v1
 /
__sˇlög
;

108 
uöt64_t
 
__v2
;

110 
__v2
 = 
	`__u˘y≥
(
	`__u∫g
()Ë- 
__u∫gmö
;

111 
__v2
 >
__∑°
);

112 
__v2
 /
__sˇlög
;

114 
__v
.
__i
 = 
	`_mm_£t_ïi64x
(
__v1
, 
__v2
);

117 i‡(
__u∫gønge
 =
__maskvÆ
)

118 
__v
.
__i
 = 
	`_mm_£t_ïi64x
(
	`__u∫g
(), __urng());

119 i‡((
__u∫gønge
 + 2Ë* __u∫gøngê>
__maskvÆ


120 && 
__dëaû
::
	`_Powî_of_2
(
__uîngønge
))

122 
uöt64_t
 
__v1
 = 
	`__u∫g
(Ë* 
__uîngønge
 + __urng();

123 
uöt64_t
 
__v2
 = 
	`__u∫g
(Ë* 
__uîngønge
 + __urng();

125 
__v
.
__i
 = 
	`_mm_™d_si128
(
	`_mm_£t_ïi64x
(
__v1
, 
__v2
),

126 
__mask
);

130 
size_t
 
__ƒng
 = 2;

131 
__u˘y≥
 
__high
 = 
__maskvÆ
 / 
__uîngønge
 / __uerngrange;

132 
__high
 > 
__uîngønge
)

134 ++
__ƒng
;

135 
__high
 /
__uîngønge
;

137 c⁄° 
__u˘y≥
 
__highønge
 = 
__high
 + 1;

138 c⁄° 
__u˘y≥
 
__sˇlög
 = 
__u∫gønge
 / 
__highønge
;

139 c⁄° 
__u˘y≥
 
__∑°
 = 
__highønge
 * 
__sˇlög
;

140 
__u˘y≥
 
__tmp
;

142 
uöt64_t
 
__v1
;

146 
__tmp
 = 
	`__u˘y≥
(
	`__u∫g
()Ë- 
__u∫gmö
;

147 
__tmp
 >
__∑°
);

148 
__v1
 = 
__tmp
 / 
__sˇlög
;

149 
size_t
 
__˙t
 = 0; __˙à< 
__ƒng
; ++__cnt)

151 
__tmp
 = 
__v1
;

152 
__v1
 *
__uîngønge
;

153 
__v1
 +
	`__u˘y≥
(
	`__u∫g
()Ë- 
__u∫gmö
;

156 
__v1
 > 
__maskvÆ
 || __v1 < 
__tmp
);

158 
uöt64_t
 
__v2
;

162 
__tmp
 = 
	`__u˘y≥
(
	`__u∫g
()Ë- 
__u∫gmö
;

163 
__tmp
 >
__∑°
);

164 
__v2
 = 
__tmp
 / 
__sˇlög
;

165 
size_t
 
__˙t
 = 0; __˙à< 
__ƒng
; ++__cnt)

167 
__tmp
 = 
__v2
;

168 
__v2
 *
__uîngønge
;

169 
__v2
 +
	`__u˘y≥
(
	`__u∫g
()Ë- 
__u∫gmö
;

172 
__v2
 > 
__maskvÆ
 || __v2 < 
__tmp
);

174 
__v
.
__i
 = 
	`_mm_£t_ïi64x
(
__v1
, 
__v2
);

177 
__v
.
__i
 = 
	`_mm_‹_si128
(__v.__i, 
__two
);

178 
__x
 = 
	`_mm_sub_pd
(
__v
.
__d
, 
__thªe
);

179 
__m128d
 
__m
 = 
	`_mm_mul_pd
(
__x
, __x);

180 
__À
 = 
	`_mm_cvtsd_f64
(
	`_mm_hadd_pd
 (
__m
, __m));

182 
__À
 == 0.0 || __le >= 1.0);

184 
__mu…
 = (
°d
::
	`sqπ
(-2.0 * std::
	`log
(
__À
) / __le)

185 * 
__∑øm
.
	`°ddev
());

187 
__x
 = 
	`_mm_add_pd
(
	`_mm_mul_pd
(__x, 
	`_mm_£t1_pd
(
__mu…
)), 
__av
);

189 
	`_mm_°‹eu_pd
(
__f
, 
__x
);

190 
__f
 += 2;

193 i‡(
__f
 !
__t
)

195 
ªsu…_ty≥
 
__x
, 
__y
, 
__r2
;

197 
__dëaû
::
_Ad≠t‹
<
_Unif‹mR™domNumbîGíî©‹
, 
ªsu…_ty≥
>

198 
	`__au∫g
(
__u∫g
);

202 
__x
 = 
	`ªsu…_ty≥
(2.0Ë* 
	`__au∫g
() - 1.0;

203 
__y
 = 
	`ªsu…_ty≥
(2.0Ë* 
	`__au∫g
() - 1.0;

204 
__r2
 = 
__x
 * __x + 
__y
 * __y;

206 
__r2
 > 1.0 || __r2 == 0.0);

208 c⁄° 
ªsu…_ty≥
 
__mu…
 = 
°d
::
	`sqπ
(-2 * std::
	`log
(
__r2
) / __r2);

209 
_M_ßved
 = 
__x
 * 
__mu…
;

210 
_M_ßved_avaûabÀ
 = 
åue
;

211 *
__f
 = 
__y
 * 
__mu…
 * 
__∑øm
.
	`°ddev
(Ë+ __∑øm.
	`món
();

217 
_GLIBCXX_END_NAMESPACE_VERSION


218 
	}
}

	@/usr/include/x86_64-linux-gnu/c++/11/bits/os_defines.h

30 #i‚de‡
_GLIBCXX_OS_DEFINES


31 
	#_GLIBCXX_OS_DEFINES
 1

	)

37 
	#__NO_CTYPE
 1

	)

39 
	~<„©uªs.h
>

44 #i‡
__GLIBC_PREREQ
(2,15Ë&& 
deföed
(
_GNU_SOURCE
)

45 #unde‡
_GLIBCXX_HAVE_GETS


50 
	#_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
 
	`__GLIBC_PREREQ
(2,23)

	)

52 #ifde‡
__löux__


53 #i‡
__GLIBC_PREREQ
(2, 27)

55 
	#_GLIBCXX_NATIVE_THREAD_ID
 
	`±hªad_£lf
()

	)

61 
	#_GLIBCXX_NATIVE_THREAD_ID
 \

62 (
	`__gthªad_a˘ive_p
(Ë? 
	`__gthªad_£lf
(Ë: (
__gthªad_t
)1)

	)

65 #i‡
__GLIBC_PREREQ
(2, 34)

68 
	#_GLIBCXX_GTHREAD_USE_WEAK
 0

	)

	@/usr/include/x86_64-linux-gnu/c++/11/bits/stdc++.h

32 #i‚de‡
_GLIBCXX_NO_ASSERT


33 
	~<ˇs£π
>

35 
	~<c˘y≥
>

36 
	~<˚ºno
>

37 
	~<cÊﬂt
>

38 
	~<ciso646
>

39 
	~<˛imôs
>

40 
	~<˛oˇÀ
>

41 
	~<cm©h
>

42 
	~<c£tjmp
>

43 
	~<csig«l
>

44 
	~<c°d¨g
>

45 
	~<c°ddef
>

46 
	~<c°dio
>

47 
	~<c°dlib
>

48 
	~<c°rög
>

49 
	~<˘ime
>

50 
	~<cwch¨
>

51 
	~<cw˘y≥
>

53 #i‡
__˝lu•lus
 >= 201103L

54 
	~<ccom∂ex
>

55 
	~<c„nv
>

56 
	~<cöây≥s
>

57 
	~<c°dÆign
>

58 
	~<c°dboﬁ
>

59 
	~<c°döt
>

60 
	~<˘gm©h
>

61 
	~<cuch¨
>

65 
	~<Æg‹ôhm
>

66 
	~<bô£t
>

67 
	~<com∂ex
>

68 
	~<deque
>

69 
	~<ex˚±i⁄
>

70 
	~<f°ªam
>

71 
	~<fun˘i⁄Æ
>

72 
	~<iom™ù
>

73 
	~<ios
>

74 
	~<iosfwd
>

75 
	~<io°ªam
>

76 
	~<i°ªam
>

77 
	~<ôî©‹
>

78 
	~<limôs
>

79 
	~<li°
>

80 
	~<loˇÀ
>

81 
	~<m≠
>

82 
	~<mem‹y
>

83 
	~<√w
>

84 
	~<numîic
>

85 
	~<o°ªam
>

86 
	~<queue
>

87 
	~<£t
>

88 
	~<s°ªam
>

89 
	~<°ack
>

90 
	~<°dex˚±
>

91 
	~<°ªambuf
>

92 
	~<°rög
>

93 
	~<ty≥öfo
>

94 
	~<utûôy
>

95 
	~<vÆ¨øy
>

96 
	~<ve˘‹
>

98 #i‡
__˝lu•lus
 >= 201103L

99 
	~<¨øy
>

100 
	~<©omic
>

101 
	~<chr⁄o
>

102 
	~<codecvt
>

103 
	~<c⁄dôi⁄_v¨übÀ
>

104 
	~<f‹w¨d_li°
>

105 
	~<futuª
>

106 
	~<öôülizî_li°
>

107 
	~<muãx
>

108 
	~<øndom
>

109 
	~<øtio
>

110 
	~<ªgex
>

111 
	~<sc›ed_Æloˇt‹
>

112 
	~<sy°em_îr‹
>

113 
	~<thªad
>

114 
	~<tu∂e
>

115 
	~<ty≥ödex
>

116 
	~<ty≥_åaôs
>

117 
	~<un‹dîed_m≠
>

118 
	~<un‹dîed_£t
>

121 #i‡
__˝lu•lus
 >= 201402L

122 
	~<sh¨ed_muãx
>

125 #i‡
__˝lu•lus
 >= 201703L

126 
	~<™y
>

127 
	~<ch¨c⁄v
>

129 
	~<fûesy°em
>

130 
	~<›ti⁄Æ
>

131 
	~<mem‹y_ªsour˚
>

132 
	~<°rög_võw
>

133 
	~<v¨ü¡
>

136 #i‡
__˝lu•lus
 > 201703L

137 
	~<b¨rõr
>

138 
	~<bô
>

139 
	~<com∑ª
>

140 
	~<c⁄˚±s
>

141 #i‡
__˝p_im∂_c‹outöe


142 
	~<c‹outöe
>

144 
	~<œtch
>

145 
	~<numbîs
>

146 
	~<ønges
>

147 
	~<•™
>

148 
	~<°›_tokí
>

149 
	~<£m≠h‹e
>

150 
	~<sour˚_loˇti⁄
>

151 
	~<sync°ªam
>

152 
	~<vîsi⁄
>

	@/usr/include/x86_64-linux-gnu/c++/11/bits/stdtr1c++.h

29 
	~<bôs/°dc++.h
>

31 
	~<å1/¨øy
>

32 
	~<å1/c˘y≥
>

33 
	~<å1/c„nv
>

34 
	~<å1/cÊﬂt
>

35 
	~<å1/cöây≥s
>

36 
	~<å1/˛imôs
>

37 
	~<å1/cm©h
>

38 
	~<å1/com∂ex
>

39 
	~<å1/c°d¨g
>

40 
	~<å1/c°dboﬁ
>

41 
	~<å1/c°döt
>

42 
	~<å1/c°dio
>

43 
	~<å1/c°dlib
>

44 
	~<å1/˘gm©h
>

45 
	~<å1/˘ime
>

46 
	~<å1/cwch¨
>

47 
	~<å1/cw˘y≥
>

48 
	~<å1/fun˘i⁄Æ
>

49 
	~<å1/øndom
>

50 
	~<å1/tu∂e
>

51 
	~<å1/un‹dîed_m≠
>

52 
	~<å1/un‹dîed_£t
>

53 
	~<å1/utûôy
>

	@/usr/include/x86_64-linux-gnu/c++/11/bits/time_members.h

37 
«me•a˚
 
°d
 
	$_GLIBCXX_VISIBILITY
()

39 
_GLIBCXX_BEGIN_NAMESPACE_VERSION


41 
ãm∂©e
<
ty≥«me
 
_Ch¨T
>

42 
__timïun˘
<
_Ch¨T
>::
	`__timïun˘
(
size_t
 
__ªfs
)

43 : 
	`Á˚t
(
__ªfs
), 
	`_M_d©a
(0), 
	`_M_c_loˇÀ_timïun˘
(0),

44 
	`_M_«me_timïun˘
(
	`_S_gë_c_«me
())

45 { 
	`_M_öôülize_timïun˘
(); }

47 
ãm∂©e
<
ty≥«me
 
_Ch¨T
>

48 
__timïun˘
<
_Ch¨T
>::
	`__timïun˘
(
__ˇche_ty≥
* 
__ˇche
, 
size_t
 
__ªfs
)

49 : 
	`Á˚t
(
__ªfs
), 
	`_M_d©a
(
__ˇche
), 
	`_M_c_loˇÀ_timïun˘
(0),

50 
	`_M_«me_timïun˘
(
	`_S_gë_c_«me
())

51 { 
	`_M_öôülize_timïun˘
(); }

53 
ãm∂©e
<
ty≥«me
 
_Ch¨T
>

54 
__timïun˘
<
_Ch¨T
>::
	`__timïun˘
(
__c_loˇÀ
 
__˛oc
, c⁄° * 
__s
,

55 
size_t
 
__ªfs
)

56 : 
	`Á˚t
(
__ªfs
), 
	`_M_d©a
(0), 
	`_M_c_loˇÀ_timïun˘
(0),

57 
	`_M_«me_timïun˘
(0)

59 i‡(
	`__buûtö_°rcmp
(
__s
, 
	`_S_gë_c_«me
()) != 0)

61 c⁄° 
size_t
 
__Àn
 = 
	`__buûtö_°æí
(
__s
) + 1;

62 * 
__tmp
 = 
√w
 [
__Àn
];

63 
	`__buûtö_mem˝y
(
__tmp
, 
__s
, 
__Àn
);

64 
_M_«me_timïun˘
 = 
__tmp
;

67 
_M_«me_timïun˘
 = 
	`_S_gë_c_«me
();

69 
__åy


70 { 
	`_M_öôülize_timïun˘
(
__˛oc
); }

71 
	`__ˇtch
(...)

73 i‡(
_M_«me_timïun˘
 !
	`_S_gë_c_«me
())

74 
dñëe
 [] 
_M_«me_timïun˘
;

75 
__throw_ex˚±i⁄_agaö
;

79 
ãm∂©e
<
ty≥«me
 
_Ch¨T
>

80 
__timïun˘
<
_Ch¨T
>::~
	`__timïun˘
()

82 i‡(
_M_«me_timïun˘
 !
	`_S_gë_c_«me
())

83 
dñëe
 [] 
_M_«me_timïun˘
;

84 
dñëe
 
_M_d©a
;

85 
	`_S_de°roy_c_loˇÀ
(
_M_c_loˇÀ_timïun˘
);

88 
_GLIBCXX_END_NAMESPACE_VERSION


89 
	}
}

	@/usr/include/x86_64-linux-gnu/c++/11/ext/opt_random.h

30 #i‚de‡
_EXT_OPT_RANDOM_H


31 
	#_EXT_OPT_RANDOM_H
 1

	)

33 #¥agm®
GCC
 
sy°em_hódî


35 #i‡
__BYTE_ORDER__
 =
__ORDER_LITTLE_ENDIAN__


37 #ifde‡
__SSE2__


39 
«me•a˚
 
__gnu_cxx
 
	$_GLIBCXX_VISIBILITY
()

41 
_GLIBCXX_BEGIN_NAMESPACE_VERSION


43 
«me•a˚
 {

45 
ãm∂©e
<
size_t
 
__¶1
, size_à
__¶2
, size_à
__§1
, size_à
__§2
,

46 
uöt32_t
 
__msk1
, uöt32_à
__msk2
, uöt32_à
__msk3
, uöt32_à
__msk4
>

47 
ölöe
 
__m128i
 
	`__s£2_ªcursi⁄
(__m128ò
__a
, __m128ò
__b
,

48 
__m128i
 
__c
, __m128ò
__d
)

50 
__m128i
 
__y
 = 
	`_mm_§li_ïi32
(
__b
, 
__§1
);

51 
__m128i
 
__z
 = 
	`_mm_§li_si128
(
__c
, 
__§2
);

52 
__m128i
 
__v
 = 
	`_mm_¶li_ïi32
(
__d
, 
__¶1
);

53 
__z
 = 
	`_mm_x‹_si128
(__z, 
__a
);

54 
__z
 = 
	`_mm_x‹_si128
(__z, 
__v
);

55 
__m128i
 
__x
 = 
	`_mm_¶li_si128
(
__a
, 
__¶2
);

56 
__y
 = 
	`_mm_™d_si128
(__y, 
	`_mm_£t_ïi32
(
__msk4
, 
__msk3
, 
__msk2
, 
__msk1
));

57 
__z
 = 
	`_mm_x‹_si128
(__z, 
__x
);

58  
	`_mm_x‹_si128
(
__z
, 
__y
);

64 
	#_GLIBCXX_OPT_HAVE_RANDOM_SFMT_GEN_READ
 1

	)

65 
ãm∂©e
<
ty≥«me
 
_UI¡Ty≥
, 
size_t
 
__m
,

66 
size_t
 
__pos1
, size_à
__¶1
, size_à
__¶2
,

67 
size_t
 
__§1
, size_à
__§2
,

68 
uöt32_t
 
__msk1
, uöt32_à
__msk2
,

69 
uöt32_t
 
__msk3
, uöt32_à
__msk4
,

70 
uöt32_t
 
__∑rôy1
, uöt32_à
__∑rôy2
,

71 
uöt32_t
 
__∑rôy3
, uöt32_à
__∑rôy4
>

72 
simd_Á°_mî£¬e_twi°î_ígöe
<
_UI¡Ty≥
, 
__m
,

73 
__pos1
, 
__¶1
, 
__¶2
, 
__§1
, 
__§2
,

74 
__msk1
, 
__msk2
, 
__msk3
, 
__msk4
,

75 
__∑rôy1
, 
__∑rôy2
, 
__∑rôy3
,

76 
__∑rôy4
>::

77 
	`_M_gí_ønd
()

79 
__m128i
 
__r1
 = 
	`_mm_lﬂd_si128
(&
_M_°©e
[
_M_n°©e
 - 2]);

80 
__m128i
 
__r2
 = 
	`_mm_lﬂd_si128
(&
_M_°©e
[
_M_n°©e
 - 1]);

82 
size_t
 
__i
;

83 
__i
 = 0; __ò< 
_M_n°©e
 - 
__pos1
; ++__i)

85 
__m128i
 
__r
 = 
__s£2_ªcursi⁄
<
__¶1
, 
__¶2
, 
__§1
, 
__§2
,

86 
__msk1
, 
__msk2
, 
__msk3
, 
__msk4
>

87 (
_M_°©e
[
__i
], _M_°©e[__ò+ 
__pos1
], 
__r1
, 
__r2
);

88 
	`_mm_°‹e_si128
(&
_M_°©e
[
__i
], 
__r
);

89 
__r1
 = 
__r2
;

90 
__r2
 = 
__r
;

92 ; 
__i
 < 
_M_n°©e
; ++__i)

94 
__m128i
 
__r
 = 
__s£2_ªcursi⁄
<
__¶1
, 
__¶2
, 
__§1
, 
__§2
,

95 
__msk1
, 
__msk2
, 
__msk3
, 
__msk4
>

96 (
_M_°©e
[
__i
], _M_°©e[__ò+ 
__pos1
 - 
_M_n°©e
], 
__r1
, 
__r2
);

97 
	`_mm_°‹e_si128
(&
_M_°©e
[
__i
], 
__r
);

98 
__r1
 = 
__r2
;

99 
__r2
 = 
__r
;

102 
_M_pos
 = 0;

106 
	#_GLIBCXX_OPT_HAVE_RANDOM_SFMT_OPERATOREQUAL
 1

	)

107 
ãm∂©e
<
ty≥«me
 
_UI¡Ty≥
, 
size_t
 
__m
,

108 
size_t
 
__pos1
, size_à
__¶1
, size_à
__¶2
,

109 
size_t
 
__§1
, size_à
__§2
,

110 
uöt32_t
 
__msk1
, uöt32_à
__msk2
,

111 
uöt32_t
 
__msk3
, uöt32_à
__msk4
,

112 
uöt32_t
 
__∑rôy1
, uöt32_à
__∑rôy2
,

113 
uöt32_t
 
__∑rôy3
, uöt32_à
__∑rôy4
>

114 
boﬁ


115 
›î©‹
==(c⁄° 
__gnu_cxx
::
simd_Á°_mî£¬e_twi°î_ígöe
<
_UI¡Ty≥
,

116 
__m
, 
__pos1
, 
__¶1
, 
__¶2
, 
__§1
, 
__§2
,

117 
__msk1
, 
__msk2
, 
__msk3
, 
__msk4
,

118 
__∑rôy1
, 
__∑rôy2
, 
__∑rôy3
, 
__∑rôy4
>& 
__lhs
,

119 c⁄° 
__gnu_cxx
::
simd_Á°_mî£¬e_twi°î_ígöe
<
_UI¡Ty≥
,

120 
__m
, 
__pos1
, 
__¶1
, 
__¶2
, 
__§1
, 
__§2
,

121 
__msk1
, 
__msk2
, 
__msk3
, 
__msk4
,

122 
__∑rôy1
, 
__∑rôy2
, 
__∑rôy3
, 
__∑rôy4
>& 
__rhs
)

124 
__m128i
 
__ªs
 = 
	`_mm_cm≥q_ïi8
(
__lhs
.
_M_°©e
[0], 
__rhs
._M_state[0]);

125 
size_t
 
__i
 = 1; __ò< 
__lhs
.
_M_n°©e
; ++__i)

126 
__ªs
 = 
	`_mm_™d_si128
(__ªs, 
	`_mm_cm≥q_ïi8
(
__lhs
.
_M_°©e
[
__i
],

127 
__rhs
.
_M_°©e
[
__i
]));

128  (
	`_mm_movemask_ïi8
(
__ªs
) == 0xffff

129 && 
__lhs
.
_M_pos
 =
__rhs
._M_pos);

133 
_GLIBCXX_END_NAMESPACE_VERSION


134 
	}
}

	@/usr/include/x86_64-linux-gnu/expat_config.h

8 
	#BYTEORDER
 1234

	)

17 
	#HAVE_DLFCN_H
 1

	)

20 
	#HAVE_FCNTL_H
 1

	)

23 
	#HAVE_GETPAGESIZE
 1

	)

26 
	#HAVE_GETRANDOM
 1

	)

29 
	#HAVE_INTTYPES_H
 1

	)

35 
	#HAVE_MMAP
 1

	)

38 
	#HAVE_STDINT_H
 1

	)

41 
	#HAVE_STDIO_H
 1

	)

44 
	#HAVE_STDLIB_H
 1

	)

47 
	#HAVE_STRINGS_H
 1

	)

50 
	#HAVE_STRING_H
 1

	)

53 
	#HAVE_SYSCALL_GETRANDOM
 1

	)

56 
	#HAVE_SYS_PARAM_H
 1

	)

59 
	#HAVE_SYS_STAT_H
 1

	)

62 
	#HAVE_SYS_TYPES_H
 1

	)

65 
	#HAVE_UNISTD_H
 1

	)

68 
	#LT_OBJDIR
 ".libs/"

	)

71 
	#PACKAGE
 "ex∑t"

	)

74 
	#PACKAGE_BUGREPORT
 "ex∑t-bugs@libex∑t.‹g"

	)

77 
	#PACKAGE_NAME
 "ex∑t"

	)

80 
	#PACKAGE_STRING
 "ex∑à2.4.7"

	)

83 
	#PACKAGE_TARNAME
 "ex∑t"

	)

86 
	#PACKAGE_URL
 ""

	)

89 
	#PACKAGE_VERSION
 "2.4.7"

	)

94 
	#STDC_HEADERS
 1

	)

97 
	#VERSION
 "2.4.7"

	)

101 #i‡
deföed
 
AC_APPLE_UNIVERSAL_BUILD


102 #i‡
deföed
 
__BIG_ENDIAN__


103 
	#WORDS_BIGENDIAN
 1

	)

106 #i‚de‡
WORDS_BIGENDIAN


117 
	#XML_CONTEXT_BYTES
 1024

	)

120 
	#XML_DEV_URANDOM
 1

	)

123 
	#XML_DTD
 1

	)

126 
	#XML_NS
 1

	)

	@/usr/include/x86_64-linux-gnu/fpu_control.h

19 #i‚de‡
_FPU_CONTROL_H


20 
	#_FPU_CONTROL_H
 1

	)

57 
	~<„©uªs.h
>

60 
	#_FPU_MASK_IM
 0x01

	)

61 
	#_FPU_MASK_DM
 0x02

	)

62 
	#_FPU_MASK_ZM
 0x04

	)

63 
	#_FPU_MASK_OM
 0x08

	)

64 
	#_FPU_MASK_UM
 0x10

	)

65 
	#_FPU_MASK_PM
 0x20

	)

68 
	#_FPU_EXTENDED
 0x300

	)

69 
	#_FPU_DOUBLE
 0x200

	)

70 
	#_FPU_SINGLE
 0x0

	)

73 
	#_FPU_RC_NEAREST
 0x0

	)

74 
	#_FPU_RC_DOWN
 0x400

	)

75 
	#_FPU_RC_UP
 0x800

	)

76 
	#_FPU_RC_ZERO
 0xC00

	)

78 
	#_FPU_RESERVED
 0xF0C0

	)

84 
	#_FPU_DEFAULT
 0x037f

	)

87 
	#_FPU_IEEE
 0x037f

	)

90 
	tÂu_c⁄åﬁ_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

102 
	#_FPU_GETCW
(
cw
Ë
__asm__
 
	`__vﬁ©ûe__
 ("‚°cw %0" : "=m" (*&cw))

	)

103 
	#_FPU_SETCW
(
cw
Ë
__asm__
 
	`__vﬁ©ûe__
 ("Êdcw %0" : : "m" (*&cw))

	)

106 
Âu_c⁄åﬁ_t
 
__Âu_c⁄åﬁ
;

	@/usr/include/x86_64-linux-gnu/gnu/lib-names-64.h

2 #i‚de‡
__GNU_LIB_NAMES_H


6 
	#LD_LINUX_X86_64_SO
 "ld-löux-x86-64.so.2"

	)

7 
	#LD_SO
 "ld-löux-x86-64.so.2"

	)

8 
	#LIBANL_SO
 "lib™l.so.1"

	)

9 
	#LIBBROKENLOCALE_SO
 "libBrokíLoˇÀ.so.1"

	)

10 
	#LIBCRYPT_SO
 "lib¸y±.so.1"

	)

11 
	#LIBC_MALLOC_DEBUG_SO
 "libc_mÆloc_debug.so.0"

	)

12 
	#LIBC_SO
 "libc.so.6"

	)

13 
	#LIBDL_SO
 "libdl.so.2"

	)

14 
	#LIBGCC_S_SO
 "libgcc_s.so.1"

	)

15 
	#LIBMVEC_SO
 "libmvec.so.1"

	)

16 
	#LIBM_SO
 "libm.so.6"

	)

17 
	#LIBNSL_SO
 "libn¶.so.1"

	)

18 
	#LIBNSS_COMPAT_SO
 "libnss_com∑t.so.2"

	)

19 
	#LIBNSS_DB_SO
 "libnss_db.so.2"

	)

20 
	#LIBNSS_DNS_SO
 "libnss_dns.so.2"

	)

21 
	#LIBNSS_FILES_SO
 "libnss_fûes.so.2"

	)

22 
	#LIBNSS_HESIOD_SO
 "libnss_hesiod.so.2"

	)

23 
	#LIBNSS_LDAP_SO
 "libnss_ld≠.so.2"

	)

24 
	#LIBNSS_TEST1_SO
 "libnss_ã°1.so.2"

	)

25 
	#LIBNSS_TEST2_SO
 "libnss_ã°2.so.2"

	)

26 
	#LIBPTHREAD_SO
 "lib±hªad.so.0"

	)

27 
	#LIBRESOLV_SO
 "libªsﬁv.so.2"

	)

28 
	#LIBRT_SO
 "libπ.so.1"

	)

29 
	#LIBTHREAD_DB_SO
 "libthªad_db.so.1"

	)

30 
	#LIBUTIL_SO
 "libutû.so.1"

	)

	@/usr/include/x86_64-linux-gnu/gnu/lib-names.h

4 #i‚de‡
__GNU_LIB_NAMES_H


5 
	#__GNU_LIB_NAMES_H
 1

	)

7 #i‡!
deföed
 
__x86_64__


8 
	~<gnu/lib-«mes-32.h
>

10 #i‡
deföed
 
__x86_64__
 && deföed 
__LP64__


11 
	~<gnu/lib-«mes-64.h
>

13 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


14 
	~<gnu/lib-«mes-x32.h
>

	@/usr/include/x86_64-linux-gnu/gnu/libc-version.h

19 #i‚de‡
_GNU_LIBC_VERSION_H


20 
	#_GNU_LIBC_VERSION_H
 1

	)

22 
	~<„©uªs.h
>

24 
__BEGIN_DECLS


27 c⁄° *
	$gnu_gë_libc_ªÀa£
 (Ë
__THROW
;

30 c⁄° *
	$gnu_gë_libc_vîsi⁄
 (Ë
__THROW
;

32 
__END_DECLS


	@/usr/include/x86_64-linux-gnu/gnu/stubs-64.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub___com∑t_bdÊush


	)

11 
	#__°ub_chÊags


	)

12 
	#__°ub_fchÊags


	)

13 
	#__°ub_gây


	)

14 
	#__°ub_ªvoke


	)

15 
	#__°ub_£éogö


	)

16 
	#__°ub_sigªtu∫


	)

17 
	#__°ub_°ty


	)

	@/usr/include/x86_64-linux-gnu/gnu/stubs.h

6 #i‡!
deföed
 
__x86_64__


7 
	~<gnu/°ubs-32.h
>

9 #i‡
deföed
 
__x86_64__
 && deföed 
__LP64__


10 
	~<gnu/°ubs-64.h
>

12 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


13 
	~<gnu/°ubs-x32.h
>

	@/usr/include/x86_64-linux-gnu/ieee754.h

18 #i‚de‡
_IEEE754_H


19 
	#_IEEE754_H
 1

	)

21 
	~<„©uªs.h
>

23 
	~<bôs/ídün.h
>

25 
__BEGIN_DECLS


27 
	uõì754_Êﬂt


29 
	mf
;

34 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


35 
	m√g©ive
:1;

36 
	mexp⁄ít
:8;

37 
	mm™tisß
:23;

39 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


40 
	mm™tisß
:23;

41 
	mexp⁄ít
:8;

42 
	m√g©ive
:1;

44 } 
	mõì
;

49 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


50 
	m√g©ive
:1;

51 
	mexp⁄ít
:8;

52 
	mquõt_«n
:1;

53 
	mm™tisß
:22;

55 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


56 
	mm™tisß
:22;

57 
	mquõt_«n
:1;

58 
	mexp⁄ít
:8;

59 
	m√g©ive
:1;

61 } 
	mõì_«n
;

64 
	#IEEE754_FLOAT_BIAS
 0x7‡

	)

67 
	uõì754_doubÀ


69 
	md
;

74 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


75 
	m√g©ive
:1;

76 
	mexp⁄ít
:11;

78 
	mm™tisß0
:20;

79 
	mm™tisß1
:32;

81 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


82 #if 
__FLOAT_WORD_ORDER
 =
__BIG_ENDIAN


83 
	mm™tisß0
:20;

84 
	mexp⁄ít
:11;

85 
	m√g©ive
:1;

86 
	mm™tisß1
:32;

89 
	mm™tisß1
:32;

90 
	mm™tisß0
:20;

91 
	mexp⁄ít
:11;

92 
	m√g©ive
:1;

95 } 
	mõì
;

100 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


101 
	m√g©ive
:1;

102 
	mexp⁄ít
:11;

103 
	mquõt_«n
:1;

105 
	mm™tisß0
:19;

106 
	mm™tisß1
:32;

108 #if 
__FLOAT_WORD_ORDER
 =
__BIG_ENDIAN


109 
	mm™tisß0
:19;

110 
	mquõt_«n
:1;

111 
	mexp⁄ít
:11;

112 
	m√g©ive
:1;

113 
	mm™tisß1
:32;

116 
	mm™tisß1
:32;

117 
	mm™tisß0
:19;

118 
	mquõt_«n
:1;

119 
	mexp⁄ít
:11;

120 
	m√g©ive
:1;

123 } 
	mõì_«n
;

126 
	#IEEE754_DOUBLE_BIAS
 0x3f‡

	)

129 
	uõì854_l⁄g_doubÀ


131 
	md
;

136 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


137 
	m√g©ive
:1;

138 
	mexp⁄ít
:15;

139 
	mem±y
:16;

140 
	mm™tisß0
:32;

141 
	mm™tisß1
:32;

143 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


144 #if 
__FLOAT_WORD_ORDER
 =
__BIG_ENDIAN


145 
	mexp⁄ít
:15;

146 
	m√g©ive
:1;

147 
	mem±y
:16;

148 
	mm™tisß0
:32;

149 
	mm™tisß1
:32;

151 
	mm™tisß1
:32;

152 
	mm™tisß0
:32;

153 
	mexp⁄ít
:15;

154 
	m√g©ive
:1;

155 
	mem±y
:16;

158 } 
	mõì
;

163 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


164 
	m√g©ive
:1;

165 
	mexp⁄ít
:15;

166 
	mem±y
:16;

167 
	m⁄e
:1;

168 
	mquõt_«n
:1;

169 
	mm™tisß0
:30;

170 
	mm™tisß1
:32;

172 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


173 #if 
__FLOAT_WORD_ORDER
 =
__BIG_ENDIAN


174 
	mexp⁄ít
:15;

175 
	m√g©ive
:1;

176 
	mem±y
:16;

177 
	mm™tisß0
:30;

178 
	mquõt_«n
:1;

179 
	m⁄e
:1;

180 
	mm™tisß1
:32;

182 
	mm™tisß1
:32;

183 
	mm™tisß0
:30;

184 
	mquõt_«n
:1;

185 
	m⁄e
:1;

186 
	mexp⁄ít
:15;

187 
	m√g©ive
:1;

188 
	mem±y
:16;

191 } 
	mõì_«n
;

194 
	#IEEE854_LONG_DOUBLE_BIAS
 0x3fff

	)

196 
	g__END_DECLS


	@/usr/include/x86_64-linux-gnu/openssl/configuration.h

13 #i‚de‡
OPENSSL_CONFIGURATION_H


14 
	#OPENSSL_CONFIGURATION_H


	)

15 #¥agm®
⁄˚


17 #ifde‡ 
__˝lu•lus


21 #ifde‡
OPENSSL_ALGORITHM_DEFINES


22 #îr‹ 
OPENSSL_ALGORITHM_DEFINES
 
no
 
l⁄gî
 
suµ‹ãd


29 
	#OPENSSL_CONFIGURED_API
 30000

	)

30 #i‚de‡
OPENSSL_RAND_SEED_OS


31 
	#OPENSSL_RAND_SEED_OS


	)

33 #i‚de‡
OPENSSL_THREADS


34 
	#OPENSSL_THREADS


	)

36 #i‚de‡
OPENSSL_NO_ACVP_TESTS


37 
	#OPENSSL_NO_ACVP_TESTS


	)

39 #i‚de‡
OPENSSL_NO_ASAN


40 
	#OPENSSL_NO_ASAN


	)

42 #i‚de‡
OPENSSL_NO_CAPIENG


43 
	#OPENSSL_NO_CAPIENG


	)

45 #i‚de‡
OPENSSL_NO_CRYPTO_MDEBUG


46 
	#OPENSSL_NO_CRYPTO_MDEBUG


	)

48 #i‚de‡
OPENSSL_NO_CRYPTO_MDEBUG_BACKTRACE


49 
	#OPENSSL_NO_CRYPTO_MDEBUG_BACKTRACE


	)

51 #i‚de‡
OPENSSL_NO_DEVCRYPTOENG


52 
	#OPENSSL_NO_DEVCRYPTOENG


	)

54 #i‚de‡
OPENSSL_NO_EGD


55 
	#OPENSSL_NO_EGD


	)

57 #i‚de‡
OPENSSL_NO_EXTERNAL_TESTS


58 
	#OPENSSL_NO_EXTERNAL_TESTS


	)

60 #i‚de‡
OPENSSL_NO_FIPS_SECURITYCHECKS


61 
	#OPENSSL_NO_FIPS_SECURITYCHECKS


	)

63 #i‚de‡
OPENSSL_NO_FUZZ_AFL


64 
	#OPENSSL_NO_FUZZ_AFL


	)

66 #i‚de‡
OPENSSL_NO_FUZZ_LIBFUZZER


67 
	#OPENSSL_NO_FUZZ_LIBFUZZER


	)

69 #i‚de‡
OPENSSL_NO_HEARTBEATS


70 
	#OPENSSL_NO_HEARTBEATS


	)

72 #i‚de‡
OPENSSL_NO_IDEA


73 
	#OPENSSL_NO_IDEA


	)

75 #i‚de‡
OPENSSL_NO_MD2


76 
	#OPENSSL_NO_MD2


	)

78 #i‚de‡
OPENSSL_NO_MDC2


79 
	#OPENSSL_NO_MDC2


	)

81 #i‚de‡
OPENSSL_NO_MSAN


82 
	#OPENSSL_NO_MSAN


	)

84 #i‚de‡
OPENSSL_NO_RC5


85 
	#OPENSSL_NO_RC5


	)

87 #i‚de‡
OPENSSL_NO_SCTP


88 
	#OPENSSL_NO_SCTP


	)

90 #i‚de‡
OPENSSL_NO_SSL3


91 
	#OPENSSL_NO_SSL3


	)

93 #i‚de‡
OPENSSL_NO_SSL3_METHOD


94 
	#OPENSSL_NO_SSL3_METHOD


	)

96 #i‚de‡
OPENSSL_NO_TRACE


97 
	#OPENSSL_NO_TRACE


	)

99 #i‚de‡
OPENSSL_NO_UBSAN


100 
	#OPENSSL_NO_UBSAN


	)

102 #i‚de‡
OPENSSL_NO_UPLINK


103 
	#OPENSSL_NO_UPLINK


	)

105 #i‚de‡
OPENSSL_NO_WEAK_SSL_CIPHERS


106 
	#OPENSSL_NO_WEAK_SSL_CIPHERS


	)

108 #i‚de‡
OPENSSL_NO_STATIC_ENGINE


109 
	#OPENSSL_NO_STATIC_ENGINE


	)

114 #unde‡
I386_ONLY


119 #i‡!
deföed
(
OPENSSL_SYS_UEFI
)

120 #unde‡
BN_LLONG


122 
	#SIXTY_FOUR_BIT_LONG


	)

123 #unde‡
SIXTY_FOUR_BIT


124 #unde‡
THIRTY_TWO_BIT


127 
	#RC4_INT
 

	)

129 #ifde‡ 
__˝lu•lus


	@/usr/include/x86_64-linux-gnu/openssl/opensslconf.h

10 #i‚de‡
OPENSSL_OPENSSLCONF_H


11 
	#OPENSSL_OPENSSLCONF_H


	)

12 #¥agm®
⁄˚


14 
	~<›ís¶/c⁄figuøti⁄.h
>

15 
	~<›ís¶/ma¸os.h
>

	@/usr/include/x86_64-linux-gnu/python3.10/pyconfig.h

5 #i‚de‡
Py_PYCONFIG_H


6 
	#Py_PYCONFIG_H


	)

21 
	#ALIGNOF_LONG
 8

	)

24 
	#ALIGNOF_SIZE_T
 8

	)

43 
	#DOUBLE_IS_LITTLE_ENDIAN_IEEE754
 1

	)

46 
	#ENABLE_IPV6
 1

	)

62 
	#HAVE_ACCEPT4
 1

	)

65 
	#HAVE_ACOSH
 1

	)

68 
	#HAVE_ADDRINFO
 1

	)

71 
	#HAVE_ALARM
 1

	)

77 
	#HAVE_ALLOCA_H
 1

	)

83 
	#HAVE_ASINH
 1

	)

86 
	#HAVE_ASM_TYPES_H
 1

	)

89 
	#HAVE_ATANH
 1

	)

92 
	#HAVE_BIND_TEXTDOMAIN_CODESET
 1

	)

95 
	#HAVE_BLUETOOTH_BLUETOOTH_H
 1

	)

126 
	#HAVE_BUILTIN_ATOMIC
 1

	)

132 
	#HAVE_CHOWN
 1

	)

135 
	#HAVE_CHROOT
 1

	)

138 
	#HAVE_CLOCK
 1

	)

141 
	#HAVE_CLOCK_GETRES
 1

	)

144 
	#HAVE_CLOCK_GETTIME
 1

	)

147 
	#HAVE_CLOCK_SETTIME
 1

	)

150 
	#HAVE_CLOSE_RANGE
 1

	)

153 
	#HAVE_COMPUTED_GOTOS
 1

	)

156 
	#HAVE_CONFSTR
 1

	)

162 
	#HAVE_COPYSIGN
 1

	)

165 
	#HAVE_COPY_FILE_RANGE
 1

	)

168 
	#HAVE_CRYPT_H
 1

	)

171 
	#HAVE_CRYPT_R
 1

	)

174 
	#HAVE_CTERMID
 1

	)

180 
	#HAVE_CURSES_FILTER
 1

	)

183 
	#HAVE_CURSES_H
 1

	)

186 
	#HAVE_CURSES_HAS_KEY
 1

	)

189 
	#HAVE_CURSES_IMMEDOK
 1

	)

192 
	#HAVE_CURSES_IS_PAD
 1

	)

195 
	#HAVE_CURSES_IS_TERM_RESIZED
 1

	)

198 
	#HAVE_CURSES_RESIZETERM
 1

	)

201 
	#HAVE_CURSES_RESIZE_TERM
 1

	)

204 
	#HAVE_CURSES_SYNCOK
 1

	)

207 
	#HAVE_CURSES_TYPEAHEAD
 1

	)

210 
	#HAVE_CURSES_USE_ENV
 1

	)

213 
	#HAVE_CURSES_WCHGAT
 1

	)

217 
	#HAVE_DECL_ISFINITE
 1

	)

221 
	#HAVE_DECL_ISINF
 1

	)

225 
	#HAVE_DECL_ISNAN
 1

	)

229 
	#HAVE_DECL_RTLD_DEEPBIND
 1

	)

233 
	#HAVE_DECL_RTLD_GLOBAL
 1

	)

237 
	#HAVE_DECL_RTLD_LAZY
 1

	)

241 
	#HAVE_DECL_RTLD_LOCAL
 1

	)

245 
	#HAVE_DECL_RTLD_MEMBER
 0

	)

249 
	#HAVE_DECL_RTLD_NODELETE
 1

	)

253 
	#HAVE_DECL_RTLD_NOLOAD
 1

	)

257 
	#HAVE_DECL_RTLD_NOW
 1

	)

264 
	#HAVE_DEVICE_MACROS
 1

	)

270 
	#HAVE_DEV_PTMX
 1

	)

276 
	#HAVE_DIRENT_D_TYPE
 1

	)

280 
	#HAVE_DIRENT_H
 1

	)

283 
	#HAVE_DIRFD
 1

	)

286 
	#HAVE_DLFCN_H
 1

	)

289 
	#HAVE_DLOPEN
 1

	)

292 
	#HAVE_DUP2
 1

	)

295 
	#HAVE_DUP3
 1

	)

301 
	#HAVE_DYNAMIC_LOADING
 1

	)

304 
	#HAVE_ENDIAN_H
 1

	)

307 
	#HAVE_EPOLL
 1

	)

310 
	#HAVE_EPOLL_CREATE1
 1

	)

313 
	#HAVE_ERF
 1

	)

316 
	#HAVE_ERFC
 1

	)

319 
	#HAVE_ERRNO_H
 1

	)

322 
	#HAVE_EVENTFD
 1

	)

325 
	#HAVE_EXECV
 1

	)

328 
	#HAVE_EXPLICIT_BZERO
 1

	)

334 
	#HAVE_EXPM1
 1

	)

337 
	#HAVE_FACCESSAT
 1

	)

340 
	#HAVE_FCHDIR
 1

	)

343 
	#HAVE_FCHMOD
 1

	)

346 
	#HAVE_FCHMODAT
 1

	)

349 
	#HAVE_FCHOWN
 1

	)

352 
	#HAVE_FCHOWNAT
 1

	)

355 
	#HAVE_FCNTL_H
 1

	)

358 
	#HAVE_FDATASYNC
 1

	)

361 
	#HAVE_FDOPENDIR
 1

	)

367 
	#HAVE_FEXECVE
 1

	)

370 
	#HAVE_FINITE
 1

	)

373 
	#HAVE_FLOCK
 1

	)

376 
	#HAVE_FORK
 1

	)

379 
	#HAVE_FORKPTY
 1

	)

382 
	#HAVE_FPATHCONF
 1

	)

388 
	#HAVE_FSEEKO
 1

	)

391 
	#HAVE_FSTATAT
 1

	)

394 
	#HAVE_FSTATVFS
 1

	)

397 
	#HAVE_FSYNC
 1

	)

403 
	#HAVE_FTELLO
 1

	)

406 
	#HAVE_FTIME
 1

	)

409 
	#HAVE_FTRUNCATE
 1

	)

412 
	#HAVE_FUTIMENS
 1

	)

415 
	#HAVE_FUTIMES
 1

	)

418 
	#HAVE_FUTIMESAT
 1

	)

421 
	#HAVE_GAI_STRERROR
 1

	)

424 
	#HAVE_GAMMA
 1

	)

430 
	#HAVE_GCC_ASM_FOR_X64
 1

	)

434 
	#HAVE_GCC_ASM_FOR_X87
 1

	)

437 
	#HAVE_GCC_UINT128_T
 1

	)

440 
	#HAVE_GETADDRINFO
 1

	)

443 
	#HAVE_GETC_UNLOCKED
 1

	)

446 
	#HAVE_GETENTROPY
 1

	)

449 
	#HAVE_GETGRGID_R
 1

	)

452 
	#HAVE_GETGRNAM_R
 1

	)

455 
	#HAVE_GETGROUPLIST
 1

	)

458 
	#HAVE_GETGROUPS
 1

	)

464 
	#HAVE_GETHOSTBYNAME_R
 1

	)

473 
	#HAVE_GETHOSTBYNAME_R_6_ARG
 1

	)

476 
	#HAVE_GETITIMER
 1

	)

479 
	#HAVE_GETLOADAVG
 1

	)

482 
	#HAVE_GETLOGIN
 1

	)

485 
	#HAVE_GETNAMEINFO
 1

	)

488 
	#HAVE_GETPAGESIZE
 1

	)

491 
	#HAVE_GETPEERNAME
 1

	)

494 
	#HAVE_GETPGID
 1

	)

497 
	#HAVE_GETPGRP
 1

	)

500 
	#HAVE_GETPID
 1

	)

503 
	#HAVE_GETPRIORITY
 1

	)

506 
	#HAVE_GETPWENT
 1

	)

509 
	#HAVE_GETPWNAM_R
 1

	)

512 
	#HAVE_GETPWUID_R
 1

	)

515 
	#HAVE_GETRANDOM
 1

	)

518 
	#HAVE_GETRANDOM_SYSCALL
 1

	)

521 
	#HAVE_GETRESGID
 1

	)

524 
	#HAVE_GETRESUID
 1

	)

527 
	#HAVE_GETSID
 1

	)

530 
	#HAVE_GETSPENT
 1

	)

533 
	#HAVE_GETSPNAM
 1

	)

536 
	#HAVE_GETWD
 1

	)

543 
	#HAVE_GRP_H
 1

	)

546 
	#HAVE_HSTRERROR
 1

	)

549 
	#HAVE_HTOLE64
 1

	)

552 
	#HAVE_HYPOT
 1

	)

558 
	#HAVE_IF_NAMEINDEX
 1

	)

561 
	#HAVE_INET_ATON
 1

	)

564 
	#HAVE_INET_PTON
 1

	)

567 
	#HAVE_INITGROUPS
 1

	)

570 
	#HAVE_INTTYPES_H
 1

	)

579 
	#HAVE_KILL
 1

	)

582 
	#HAVE_KILLPG
 1

	)

588 
	#HAVE_LANGINFO_H
 1

	)

603 
	#HAVE_LCHOWN
 1

	)

606 
	#HAVE_LGAMMA
 1

	)

609 
	#HAVE_LIBDL
 1

	)

618 
	#HAVE_LIBINTL_H
 1

	)

621 
	#HAVE_LIBREADLINE
 1

	)

633 
	#HAVE_LIBUUID
 1

	)

636 
	#HAVE_LINK
 1

	)

639 
	#HAVE_LINKAT
 1

	)

642 
	#HAVE_LINUX_AUXVEC_H
 1

	)

645 
	#HAVE_LINUX_CAN_BCM_H
 1

	)

648 
	#HAVE_LINUX_CAN_H
 1

	)

651 
	#HAVE_LINUX_CAN_J1939_H
 1

	)

654 
	#HAVE_LINUX_CAN_RAW_FD_FRAMES
 1

	)

657 
	#HAVE_LINUX_CAN_RAW_H
 1

	)

660 
	#HAVE_LINUX_CAN_RAW_JOIN_FILTERS
 1

	)

663 
	#HAVE_LINUX_MEMFD_H
 1

	)

666 
	#HAVE_LINUX_NETLINK_H
 1

	)

669 
	#HAVE_LINUX_QRTR_H
 1

	)

672 
	#HAVE_LINUX_RANDOM_H
 1

	)

675 
	#HAVE_LINUX_TIPC_H
 1

	)

678 
	#HAVE_LINUX_VM_SOCKETS_H
 1

	)

681 
	#HAVE_LINUX_WAIT_H
 1

	)

684 
	#HAVE_LOCKF
 1

	)

687 
	#HAVE_LOG1P
 1

	)

690 
	#HAVE_LOG2
 1

	)

693 
	#HAVE_LONG_DOUBLE
 1

	)

696 
	#HAVE_LSTAT
 1

	)

699 
	#HAVE_LUTIMES
 1

	)

702 
	#HAVE_MADVISE
 1

	)

705 
	#HAVE_MAKEDEV
 1

	)

708 
	#HAVE_MBRTOWC
 1

	)

711 
	#HAVE_MEMFD_CREATE
 1

	)

717 
	#HAVE_MEMRCHR
 1

	)

720 
	#HAVE_MKDIRAT
 1

	)

723 
	#HAVE_MKFIFO
 1

	)

726 
	#HAVE_MKFIFOAT
 1

	)

729 
	#HAVE_MKNOD
 1

	)

732 
	#HAVE_MKNODAT
 1

	)

735 
	#HAVE_MKTIME
 1

	)

738 
	#HAVE_MMAP
 1

	)

741 
	#HAVE_MREMAP
 1

	)

744 
	#HAVE_NCURSES_H
 1

	)

750 
	#HAVE_NETPACKET_PACKET_H
 1

	)

753 
	#HAVE_NET_IF_H
 1

	)

756 
	#HAVE_NICE
 1

	)

763 
	#HAVE_OPENAT
 1

	)

766 
	#HAVE_OPENPTY
 1

	)

769 
	#HAVE_PATHCONF
 1

	)

772 
	#HAVE_PAUSE
 1

	)

775 
	#HAVE_PIPE2
 1

	)

781 
	#HAVE_POLL
 1

	)

784 
	#HAVE_POLL_H
 1

	)

787 
	#HAVE_POSIX_FADVISE
 1

	)

790 
	#HAVE_POSIX_FALLOCATE
 1

	)

793 
	#HAVE_POSIX_SPAWN
 1

	)

796 
	#HAVE_POSIX_SPAWNP
 1

	)

799 
	#HAVE_PREAD
 1

	)

802 
	#HAVE_PREADV
 1

	)

805 
	#HAVE_PREADV2
 1

	)

808 
	#HAVE_PRLIMIT
 1

	)

814 
	#HAVE_PROTOTYPES
 1

	)

817 
	#HAVE_PTHREAD_CONDATTR_SETCLOCK
 1

	)

823 
	#HAVE_PTHREAD_GETCPUCLOCKID
 1

	)

826 
	#HAVE_PTHREAD_H
 1

	)

832 
	#HAVE_PTHREAD_KILL
 1

	)

835 
	#HAVE_PTHREAD_SIGMASK
 1

	)

838 
	#HAVE_PTY_H
 1

	)

841 
	#HAVE_PWRITE
 1

	)

844 
	#HAVE_PWRITEV
 1

	)

847 
	#HAVE_PWRITEV2
 1

	)

850 
	#HAVE_READLINK
 1

	)

853 
	#HAVE_READLINKAT
 1

	)

856 
	#HAVE_READV
 1

	)

859 
	#HAVE_REALPATH
 1

	)

862 
	#HAVE_RENAMEAT
 1

	)

865 
	#HAVE_RL_APPEND_HISTORY
 1

	)

868 
	#HAVE_RL_CATCH_SIGNAL
 1

	)

871 
	#HAVE_RL_COMPLETION_APPEND_CHARACTER
 1

	)

874 
	#HAVE_RL_COMPLETION_DISPLAY_MATCHES_HOOK
 1

	)

877 
	#HAVE_RL_COMPLETION_MATCHES
 1

	)

880 
	#HAVE_RL_COMPLETION_SUPPRESS_APPEND
 1

	)

883 
	#HAVE_RL_PRE_INPUT_HOOK
 1

	)

886 
	#HAVE_RL_RESIZE_TERMINAL
 1

	)

889 
	#HAVE_ROUND
 1

	)

895 
	#HAVE_SCHED_GET_PRIORITY_MAX
 1

	)

898 
	#HAVE_SCHED_H
 1

	)

901 
	#HAVE_SCHED_RR_GET_INTERVAL
 1

	)

904 
	#HAVE_SCHED_SETAFFINITY
 1

	)

907 
	#HAVE_SCHED_SETPARAM
 1

	)

910 
	#HAVE_SCHED_SETSCHEDULER
 1

	)

913 
	#HAVE_SEM_CLOCKWAIT
 1

	)

916 
	#HAVE_SEM_GETVALUE
 1

	)

919 
	#HAVE_SEM_OPEN
 1

	)

922 
	#HAVE_SEM_TIMEDWAIT
 1

	)

925 
	#HAVE_SEM_UNLINK
 1

	)

928 
	#HAVE_SENDFILE
 1

	)

931 
	#HAVE_SETEGID
 1

	)

934 
	#HAVE_SETEUID
 1

	)

937 
	#HAVE_SETGID
 1

	)

940 
	#HAVE_SETGROUPS
 1

	)

943 
	#HAVE_SETHOSTNAME
 1

	)

946 
	#HAVE_SETITIMER
 1

	)

949 
	#HAVE_SETLOCALE
 1

	)

952 
	#HAVE_SETPGID
 1

	)

955 
	#HAVE_SETPGRP
 1

	)

958 
	#HAVE_SETPRIORITY
 1

	)

961 
	#HAVE_SETREGID
 1

	)

964 
	#HAVE_SETRESGID
 1

	)

967 
	#HAVE_SETRESUID
 1

	)

970 
	#HAVE_SETREUID
 1

	)

973 
	#HAVE_SETSID
 1

	)

976 
	#HAVE_SETUID
 1

	)

979 
	#HAVE_SETVBUF
 1

	)

982 
	#HAVE_SHADOW_H
 1

	)

985 
	#HAVE_SHM_OPEN
 1

	)

988 
	#HAVE_SHM_UNLINK
 1

	)

991 
	#HAVE_SIGACTION
 1

	)

994 
	#HAVE_SIGALTSTACK
 1

	)

997 
	#HAVE_SIGFILLSET
 1

	)

1000 
	#HAVE_SIGINFO_T_SI_BAND
 1

	)

1003 
	#HAVE_SIGINTERRUPT
 1

	)

1006 
	#HAVE_SIGNAL_H
 1

	)

1009 
	#HAVE_SIGPENDING
 1

	)

1012 
	#HAVE_SIGRELSE
 1

	)

1015 
	#HAVE_SIGTIMEDWAIT
 1

	)

1018 
	#HAVE_SIGWAIT
 1

	)

1021 
	#HAVE_SIGWAITINFO
 1

	)

1024 
	#HAVE_SNPRINTF
 1

	)

1027 
	#HAVE_SOCKADDR_ALG
 1

	)

1033 
	#HAVE_SOCKADDR_STORAGE
 1

	)

1036 
	#HAVE_SOCKETPAIR
 1

	)

1039 
	#HAVE_SPAWN_H
 1

	)

1042 
	#HAVE_SPLICE
 1

	)

1045 
	#HAVE_SSIZE_T
 1

	)

1048 
	#HAVE_STATVFS
 1

	)

1051 
	#HAVE_STAT_TV_NSEC
 1

	)

1058 
	#HAVE_STDARG_PROTOTYPES
 1

	)

1061 
	#HAVE_STDINT_H
 1

	)

1064 
	#HAVE_STDLIB_H
 1

	)

1067 
	#HAVE_STD_ATOMIC
 1

	)

1070 
	#HAVE_STRFTIME
 1

	)

1073 
	#HAVE_STRINGS_H
 1

	)

1076 
	#HAVE_STRING_H
 1

	)

1085 
	#HAVE_STRSIGNAL
 1

	)

1088 
	#HAVE_STRUCT_PASSWD_PW_GECOS
 1

	)

1091 
	#HAVE_STRUCT_PASSWD_PW_PASSWD
 1

	)

1097 
	#HAVE_STRUCT_STAT_ST_BLKSIZE
 1

	)

1100 
	#HAVE_STRUCT_STAT_ST_BLOCKS
 1

	)

1109 
	#HAVE_STRUCT_STAT_ST_RDEV
 1

	)

1112 
	#HAVE_STRUCT_TM_TM_ZONE
 1

	)

1115 
	#HAVE_SYMLINK
 1

	)

1118 
	#HAVE_SYMLINKAT
 1

	)

1121 
	#HAVE_SYNC
 1

	)

1124 
	#HAVE_SYSCONF
 1

	)

1127 
	#HAVE_SYSEXITS_H
 1

	)

1133 
	#HAVE_SYS_AUXV_H
 1

	)

1149 
	#HAVE_SYS_EPOLL_H
 1

	)

1152 
	#HAVE_SYS_EVENTFD_H
 1

	)

1158 
	#HAVE_SYS_FILE_H
 1

	)

1161 
	#HAVE_SYS_IOCTL_H
 1

	)

1179 
	#HAVE_SYS_MMAN_H
 1

	)

1189 
	#HAVE_SYS_PARAM_H
 1

	)

1192 
	#HAVE_SYS_POLL_H
 1

	)

1195 
	#HAVE_SYS_RANDOM_H
 1

	)

1198 
	#HAVE_SYS_RESOURCE_H
 1

	)

1201 
	#HAVE_SYS_SELECT_H
 1

	)

1204 
	#HAVE_SYS_SENDFILE_H
 1

	)

1207 
	#HAVE_SYS_SOCKET_H
 1

	)

1210 
	#HAVE_SYS_STATVFS_H
 1

	)

1213 
	#HAVE_SYS_STAT_H
 1

	)

1216 
	#HAVE_SYS_SYSCALL_H
 1

	)

1219 
	#HAVE_SYS_SYSMACROS_H
 1

	)

1228 
	#HAVE_SYS_TIMES_H
 1

	)

1231 
	#HAVE_SYS_TIME_H
 1

	)

1234 
	#HAVE_SYS_TYPES_H
 1

	)

1237 
	#HAVE_SYS_UIO_H
 1

	)

1240 
	#HAVE_SYS_UN_H
 1

	)

1243 
	#HAVE_SYS_UTSNAME_H
 1

	)

1246 
	#HAVE_SYS_WAIT_H
 1

	)

1249 
	#HAVE_SYS_XATTR_H
 1

	)

1252 
	#HAVE_TCGETPGRP
 1

	)

1255 
	#HAVE_TCSETPGRP
 1

	)

1258 
	#HAVE_TEMPNAM
 1

	)

1261 
	#HAVE_TERMIOS_H
 1

	)

1264 
	#HAVE_TERM_H
 1

	)

1267 
	#HAVE_TGAMMA
 1

	)

1270 
	#HAVE_TIMEGM
 1

	)

1273 
	#HAVE_TIMES
 1

	)

1276 
	#HAVE_TMPFILE
 1

	)

1279 
	#HAVE_TMPNAM
 1

	)

1282 
	#HAVE_TMPNAM_R
 1

	)

1286 
	#HAVE_TM_ZONE
 1

	)

1289 
	#HAVE_TRUNCATE
 1

	)

1299 
	#HAVE_UNAME
 1

	)

1302 
	#HAVE_UNISTD_H
 1

	)

1305 
	#HAVE_UNLINKAT
 1

	)

1316 
	#HAVE_UTIMENSAT
 1

	)

1319 
	#HAVE_UTIMES
 1

	)

1322 
	#HAVE_UTIME_H
 1

	)

1331 
	#HAVE_UUID_GENERATE_TIME_SAFE
 1

	)

1337 
	#HAVE_UUID_UUID_H
 1

	)

1340 
	#HAVE_VFORK
 1

	)

1343 
	#HAVE_WAIT3
 1

	)

1346 
	#HAVE_WAIT4
 1

	)

1349 
	#HAVE_WAITID
 1

	)

1352 
	#HAVE_WAITPID
 1

	)

1355 
	#HAVE_WCHAR_H
 1

	)

1358 
	#HAVE_WCSCOLL
 1

	)

1361 
	#HAVE_WCSFTIME
 1

	)

1364 
	#HAVE_WCSXFRM
 1

	)

1367 
	#HAVE_WMEMCMP
 1

	)

1371 
	#HAVE_WORKING_TZSET
 1

	)

1374 
	#HAVE_WRITEV
 1

	)

1377 
	#HAVE_ZLIB_COPY
 1

	)

1388 
	#MAJOR_IN_SYSMACROS
 1

	)

1391 
	#MVWDELCH_IS_EXPRESSION
 1

	)

1415 
	#PTHREAD_KEY_T_IS_COMPATIBLE_WITH_INT
 1

	)

1418 
	#PTHREAD_SYSTEM_SCHED_SUPPORTED
 1

	)

1424 
	#PY_BUILTIN_HASHLIB_HASHES
 "md5,sha1,sha256,sha512,sha3,bœke2"

	)

1427 
	#PY_COERCE_C_LOCALE
 1

	)

1430 
	#PY_FORMAT_SIZE_T
 "z"

	)

1434 
	#PY_SSL_DEFAULT_CIPHERS
 1

	)

1453 
	#RETSIGTYPE
 

	)

1465 
	#SIZEOF_DOUBLE
 8

	)

1468 
	#SIZEOF_FLOAT
 4

	)

1471 
	#SIZEOF_FPOS_T
 16

	)

1474 
	#SIZEOF_INT
 4

	)

1477 
	#SIZEOF_LONG
 8

	)

1480 
	#SIZEOF_LONG_DOUBLE
 16

	)

1483 
	#SIZEOF_LONG_LONG
 8

	)

1486 
	#SIZEOF_OFF_T
 8

	)

1489 
	#SIZEOF_PID_T
 4

	)

1492 
	#SIZEOF_PTHREAD_KEY_T
 4

	)

1495 
	#SIZEOF_PTHREAD_T
 8

	)

1498 
	#SIZEOF_SHORT
 2

	)

1501 
	#SIZEOF_SIZE_T
 8

	)

1504 
	#SIZEOF_TIME_T
 8

	)

1507 
	#SIZEOF_UINTPTR_T
 8

	)

1510 
	#SIZEOF_VOID_P
 8

	)

1513 
	#SIZEOF_WCHAR_T
 4

	)

1516 
	#SIZEOF__BOOL
 1

	)

1519 
	#STDC_HEADERS
 1

	)

1523 
	#SYS_SELECT_WITH_SYS_TIME
 1

	)

1532 
	#TIME_WITH_SYS_TIME
 1

	)

1538 
	#USE_COMPUTED_GOTOS
 1

	)

1541 #i‚de‡
_ALL_SOURCE


1542 
	#_ALL_SOURCE
 1

	)

1545 #i‚de‡
_GNU_SOURCE


1546 
	#_GNU_SOURCE
 1

	)

1549 #i‚de‡
_POSIX_PTHREAD_SEMANTICS


1550 
	#_POSIX_PTHREAD_SEMANTICS
 1

	)

1553 #i‚de‡
_TANDEM_SOURCE


1554 
	#_TANDEM_SOURCE
 1

	)

1557 #i‚de‡
__EXTENSIONS__


1558 
	#__EXTENSIONS__
 1

	)

1563 
	#WINDOW_HAS_FLAGS
 1

	)

1567 
	#WITH_DECIMAL_CONTEXTVAR
 1

	)

1570 
	#WITH_DOC_STRINGS
 1

	)

1573 
	#WITH_DTRACE
 1

	)

1591 
	#WITH_PYMALLOC
 1

	)

1598 #i‡
deföed
 
AC_APPLE_UNIVERSAL_BUILD


1599 #i‡
deföed
 
__BIG_ENDIAN__


1600 
	#WORDS_BIGENDIAN
 1

	)

1603 #i‚de‡
WORDS_BIGENDIAN


1615 
	#_DARWIN_C_SOURCE
 1

	)

1618 
	#_FILE_OFFSET_BITS
 64

	)

1621 
	#_GNU_SOURCE
 1

	)

1627 
	#_LARGEFILE_SOURCE
 1

	)

1636 
	#_NETBSD_SOURCE
 1

	)

1643 
	#_POSIX_C_SOURCE
 200809L

	)

1652 
	#_PYTHONFRAMEWORK
 ""

	)

1655 
	#_REENTRANT
 1

	)

1658 
	#_XOPEN_SOURCE
 700

	)

1661 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

1664 
	#__BSD_VISIBLE
 1

	)

1698 #i‡
deföed
(
__USLC__
Ë&& deföed(
__SCO_VERSION__
)

1699 
	#STRICT_SYSV_CURSES


	)

	@/usr/include/x86_64-linux-gnu/sys/acct.h

18 #i‚de‡
_SYS_ACCT_H


19 
	#_SYS_ACCT_H
 1

	)

21 
	~<sys/ty≥s.h
>

22 
	~<°döt.h
>

23 
	~<bôs/ídün.h
>

24 
	~<bôs/ty≥s/time_t.h
>

26 
	g__BEGIN_DECLS


28 
	#ACCT_COMM
 16

	)

36 
uöt16_t
 
	tcomp_t
;

38 
	sac˘


40 
	mac_Êag
;

41 
uöt16_t
 
	mac_uid
;

42 
uöt16_t
 
	mac_gid
;

43 
uöt16_t
 
	mac_ây
;

44 
uöt32_t
 
	mac_btime
;

45 
comp_t
 
	mac_utime
;

46 
comp_t
 
	mac_°ime
;

47 
comp_t
 
	mac_ëime
;

48 
comp_t
 
	mac_mem
;

49 
comp_t
 
	mac_io
;

50 
comp_t
 
	mac_rw
;

51 
comp_t
 
	mac_möÊt
;

52 
comp_t
 
	mac_majÊt
;

53 
comp_t
 
	mac_sw≠s
;

54 
uöt32_t
 
	mac_exôcode
;

55 
	mac_comm
[
ACCT_COMM
+1];

56 
	mac_∑d
[10];

60 
	sac˘_v3


62 
	mac_Êag
;

63 
	mac_vîsi⁄
;

64 
uöt16_t
 
	mac_ây
;

65 
uöt32_t
 
	mac_exôcode
;

66 
uöt32_t
 
	mac_uid
;

67 
uöt32_t
 
	mac_gid
;

68 
uöt32_t
 
	mac_pid
;

69 
uöt32_t
 
	mac_µid
;

70 
uöt32_t
 
	mac_btime
;

71 
	mac_ëime
;

72 
comp_t
 
	mac_utime
;

73 
comp_t
 
	mac_°ime
;

74 
comp_t
 
	mac_mem
;

75 
comp_t
 
	mac_io
;

76 
comp_t
 
	mac_rw
;

77 
comp_t
 
	mac_möÊt
;

78 
comp_t
 
	mac_majÊt
;

79 
comp_t
 
	mac_sw≠s
;

80 
	mac_comm
[
ACCT_COMM
];

86 
	mAFORK
 = 0x01,

87 
	mASU
 = 0x02,

88 
	mACORE
 = 0x08,

89 
	mAXSIG
 = 0x10

92 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


93 
	#ACCT_BYTEORDER
 0x80

	)

95 
	#ACCT_BYTEORDER
 0x00

	)

98 
	#AHZ
 100

	)

102 
	$ac˘
 (c⁄° *
__fûíame
Ë
__THROW
;

104 
__END_DECLS


	@/usr/include/x86_64-linux-gnu/sys/auxv.h

19 #i‚de‡
_SYS_AUXV_H


20 
	#_SYS_AUXV_H
 1

	)

22 
	~<ñf.h
>

23 
	~<sys/cdefs.h
>

24 
	~<bôs/hwˇp.h
>

26 
__BEGIN_DECLS


31 
	$gëauxvÆ
 (
__ty≥
)

32 
__THROW
;

34 
__END_DECLS


	@/usr/include/x86_64-linux-gnu/sys/bitypes.h

3 
	~<sys/ty≥s.h
>

	@/usr/include/x86_64-linux-gnu/sys/cdefs.h

19 #i‚def 
_SYS_CDEFS_H


20 
	#_SYS_CDEFS_H
 1

	)

23 #i‚de‡
_FEATURES_H


24 
	~<„©uªs.h
>

30 #i‡
deföed
 
__GNUC__
 && !deföed 
__STDC__


35 #unde‡
__P


36 #unde‡
__PMT


42 #i‡(
deföed
 
__has_©åibuã
 \

43 && (!
deföed
 
	g__˛™g_mö‹__
 \

44 || 3 < 
	g__˛™g_maj‹__
 + (5 <
__˛™g_mö‹__
)))

45 
	#__glibc_has_©åibuã
(
©å
Ë
	`__has_©åibuã
 (©å)

	)

47 
	#__glibc_has_©åibuã
(
©å
Ë0

	)

49 #ifde‡
__has_buûtö


50 
	#__glibc_has_buûtö
(
«me
Ë
	`__has_buûtö
 («me)

	)

52 
	#__glibc_has_buûtö
(
«me
Ë0

	)

54 #ifde‡
__has_exãnsi⁄


55 
	#__glibc_has_exãnsi⁄
(
ext
Ë
	`__has_exãnsi⁄
 (ext)

	)

57 
	#__glibc_has_exãnsi⁄
(
ext
Ë0

	)

60 #i‡
deföed
 
__GNUC__
 || deföed 
__˛™g__


64 #i‡
__GNUC_PREREQ
 (4, 6Ë&& !
deföed
 
_LIBC


65 
	#__LEAF
 , 
__Àaf__


	)

66 
	#__LEAF_ATTR
 
	`__©åibuã__
 ((
__Àaf__
))

	)

68 
	#__LEAF


	)

69 
	#__LEAF_ATTR


	)

77 #i‡!
deföed
 
__˝lu•lus
 \

78 && (
__GNUC_PREREQ
 (3, 4Ë|| 
	$__glibc_has_©åibuã
 (
__nŸhrow__
))

79 
	#__THROW
 
	`__©åibuã__
 ((
__nŸhrow__
 
__LEAF
))

	)

80 
	#__THROWNL
 
	`__©åibuã__
 ((
__nŸhrow__
))

	)

81 
	#__NTH
(
f˘
Ë
	`__©åibuã__
 ((
__nŸhrow__
 
__LEAF
)Ë
	)
fct

82 
	#__NTHNL
(
f˘
Ë
	`__©åibuã__
 ((
__nŸhrow__
)Ë
	)
fct

84 #i‡
deföed
 
__˝lu•lus
 && (
	`__GNUC_PREREQ
 (2,8Ë|| 
__˛™g_maj‹
 >= 4)

85 #i‡
__˝lu•lus
 >= 201103L

86 
	#__THROW
 
	`n€x˚±
 (
åue
)

	)

88 
	#__THROW
 
	`throw
 ()

	)

90 
	#__THROWNL
 
__THROW


	)

91 
	#__NTH
(
f˘
Ë
__LEAF_ATTR
 f˘ 
__THROW


	)

92 
	#__NTHNL
(
f˘
Ëf˘ 
__THROW


	)

94 
	#__THROW


	)

95 
	#__THROWNL


	)

96 
	#__NTH
(
f˘
Ë
	)
fct

97 
	#__NTHNL
(
f˘
Ë
	)
fct

103 #i‡(
deföed
 
__˝lu•lus
 \

104 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

105 
	#__ölöe
 
ölöe


	)

107 
	#__ölöe


	)

110 
	#__THROW


	)

111 
	#__THROWNL


	)

112 
	#__NTH
(
f˘
Ë
	)
fct

118 
	#__P
(
¨gs
Ë
	)
args

119 
	#__PMT
(
¨gs
Ë
	)
args

124 
	#__CONCAT
(
x
,
y
Ëx ## 
	)
y

125 
	#__STRING
(
x
Ë#x

	)

128 
	#__±r_t
 *

	)

132 #ifdef 
__˝lu•lus


133 
	#__BEGIN_DECLS
 "C" {

	)

134 
	#__END_DECLS
 
	}

	)
}

136 
	#__BEGIN_DECLS


	)

137 
	#__END_DECLS


	)

142 
	#__bos
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 
__USE_FORTIFY_LEVEL
 > 1)

	)

143 
	#__bos0
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 0)

	)

146 #i‡
__USE_FORTIFY_LEVEL
 =3 && (
__glibc_˛™g_¥îeq
 (9, 0) \

147 || 
	$__GNUC_PREREQ
 (12, 0))

148 
	#__glibc_objsize0
(
__o
Ë
	`__buûtö_dy«mic_obje˘_size
 (__o, 0)

	)

149 
	#__glibc_objsize
(
__o
Ë
	`__buûtö_dy«mic_obje˘_size
 (__o, 1)

	)

151 
	#__glibc_objsize0
(
__o
Ë
	`__bos0
 (__o)

	)

152 
	#__glibc_objsize
(
__o
Ë
	`__bos
 (__o)

	)

159 
	#__glibc_ß„_Àn_c⁄d
(
__l
, 
__s
, 
__osz
Ë((__lË<(__oszË/ (__s))

	)

160 
	#__glibc_unsig√d_‹_posôive
(
__l
) \

161 ((
	`__ty≥of
 (
__l
)) 0 < (__typeof (__l)) -1 \

162 || (
	`__buûtö_c⁄°™t_p
 (
__l
Ë&& (__lË> 0))

	)

167 
	#__glibc_ß„_‹_unknown_Àn
(
__l
, 
__s
, 
__osz
) \

168 (
	`__glibc_unsig√d_‹_posôive
 (
__l
) \

169 && 
	`__buûtö_c⁄°™t_p
 (
	`__glibc_ß„_Àn_c⁄d
 ((
__SIZE_TYPE__
Ë(
__l
), \

170 
__s
, 
__osz
)) \

171 && 
	`__glibc_ß„_Àn_c⁄d
 ((
__SIZE_TYPE__
Ë(
__l
), 
__s
, 
__osz
))

	)

176 
	#__glibc_unß„_Àn
(
__l
, 
__s
, 
__osz
) \

177 (
	`__glibc_unsig√d_‹_posôive
 (
__l
) \

178 && 
	`__buûtö_c⁄°™t_p
 (
	`__glibc_ß„_Àn_c⁄d
 ((
__SIZE_TYPE__
Ë(
__l
), \

179 
__s
, 
__osz
)) \

180 && !
	`__glibc_ß„_Àn_c⁄d
 ((
__SIZE_TYPE__
Ë(
__l
), 
__s
, 
__osz
))

	)

185 
	#__glibc_f‹tify
(
f
, 
__l
, 
__s
, 
__osz
, ...) \

186 (
	`__glibc_ß„_‹_unknown_Àn
 (
__l
, 
__s
, 
__osz
) \

187 ? 
__
 ## 
f
 ## 
	`_Æüs
 (
__VA_ARGS__
) \

188 : (
	`__glibc_unß„_Àn
 (
__l
, 
__s
, 
__osz
) \

189 ? 
__
 ## 
f
 ## 
	`_chk_w¨n
 (
__VA_ARGS__
, 
__osz
) \

190 : 
__
 ## 
f
 ## 
	`_chk
 (
__VA_ARGS__
, 
__osz
))) \

191 

	)

195 
	#__glibc_f‹tify_n
(
f
, 
__l
, 
__s
, 
__osz
, ...) \

196 (
	`__glibc_ß„_‹_unknown_Àn
 (
__l
, 
__s
, 
__osz
) \

197 ? 
__
 ## 
f
 ## 
	`_Æüs
 (
__VA_ARGS__
) \

198 : (
	`__glibc_unß„_Àn
 (
__l
, 
__s
, 
__osz
) \

199 ? 
__
 ## 
f
 ## 
	`_chk_w¨n
 (
__VA_ARGS__
, (
__osz
Ë/ (
__s
)) \

200 : 
__
 ## 
f
 ## 
	`_chk
 (
__VA_ARGS__
, (
__osz
Ë/ (
__s
)))) \

201 

	)

202 #i‡
	`__GNUC_PREREQ
 (4,3)

203 
	#__w¨«âr
(
msg
Ë
	`__©åibuã__
((
	`__w¨nög__
 (msg)))

	)

204 
	#__îr‹de˛
(
«me
, 
msg
) \

205 
	`«me
 (Ë
	`__©åibuã__
((
	`__îr‹__
 (
msg
)))

	)

207 
	#__w¨«âr
(
msg
)

	)

208 
	#__îr‹de˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

215 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >199901L && !deföed 
__HP_cc


216 
	#__Êex¨r
 []

	)

217 
	#__glibc_c99_Êex¨r_avaûabÀ
 1

	)

218 #ñi‡
	`__GNUC_PREREQ
 (2,97Ë|| 
deföed
 
__˛™g__


221 
	#__Êex¨r
 []

	)

222 
	#__glibc_c99_Êex¨r_avaûabÀ
 1

	)

223 #ñi‡
deföed
 
__GNUC__


226 
	#__Êex¨r
 [0]

	)

227 
	#__glibc_c99_Êex¨r_avaûabÀ
 1

	)

230 
	#__Êex¨r
 [1]

	)

231 
	#__glibc_c99_Êex¨r_avaûabÀ
 0

	)

245 #i‡(
deföed
 
__GNUC__
 && __GNUC__ >2Ë|| (
__˛™g_maj‹__
 >= 4)

247 
	#__REDIRECT
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

248 #ifde‡
__˝lu•lus


249 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

250 
«me
 
¥Ÿo
 
__THROW
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

251 
	#__REDIRECT_NTHNL
(
«me
, 
¥Ÿo
, 
Æüs
) \

252 
«me
 
¥Ÿo
 
__THROWNL
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

254 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

255 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROW


	)

256 
	#__REDIRECT_NTHNL
(
«me
, 
¥Ÿo
, 
Æüs
) \

257 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROWNL


	)

259 
	#__ASMNAME
(
˙ame
Ë
	`__ASMNAME2
 (
__USER_LABEL_PREFIX__
, c«me)

	)

260 
	#__ASMNAME2
(
¥efix
, 
˙ame
Ë
	`__STRING
 (¥efixË
	)
cname

273 #i‡!(
deföed
 
__GNUC__
 || deföed 
__˛™g__
)

274 
	#__©åibuã__
(
xyz
Ë

	)

280 #i‡
	`__GNUC_PREREQ
 (2,96Ë|| 
	`__glibc_has_©åibuã
 (
__mÆloc__
)

281 
	#__©åibuã_mÆloc__
 
	`__©åibuã__
 ((
__mÆloc__
))

	)

283 
	#__©åibuã_mÆloc__


	)

288 #i‡
	`__GNUC_PREREQ
 (4, 3)

289 
	#__©åibuã_Æloc_size__
(
∑øms
) \

290 
	`__©åibuã__
 ((
__Æloc_size__
 
∑øms
))

	)

292 
	#__©åibuã_Æloc_size__
(
∑øms
Ë

	)

297 #i‡
	`__GNUC_PREREQ
 (4, 9Ë|| 
	`__glibc_has_©åibuã
 (
__Æloc_Æign__
)

298 
	#__©åibuã_Æloc_Æign__
(
∑øm
) \

299 
	`__©åibuã__
 ((
__Æloc_Æign__
 
∑øm
))

	)

301 
	#__©åibuã_Æloc_Æign__
(
∑øm
Ë

	)

307 #i‡
	`__GNUC_PREREQ
 (2,96Ë|| 
	`__glibc_has_©åibuã
 (
__puª__
)

308 
	#__©åibuã_puª__
 
	`__©åibuã__
 ((
__puª__
))

	)

310 
	#__©åibuã_puª__


	)

314 #i‡
	`__GNUC_PREREQ
 (2,5Ë|| 
	`__glibc_has_©åibuã
 (
__c⁄°__
)

315 
	#__©åibuã_c⁄°__
 
	`__©åibuã__
 ((
__c⁄°__
))

	)

317 
	#__©åibuã_c⁄°__


	)

320 #i‡
	`__GNUC_PREREQ
 (2,7Ë|| 
	`__glibc_has_©åibuã
 (
__unu£d__
)

321 
	#__©åibuã_maybe_unu£d__
 
	`__©åibuã__
 ((
__unu£d__
))

	)

323 
	#__©åibuã_maybe_unu£d__


	)

329 #i‡
	`__GNUC_PREREQ
 (3,1Ë|| 
	`__glibc_has_©åibuã
 (
__u£d__
)

330 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__u£d__
))

	)

331 
	#__©åibuã_noölöe__
 
	`__©åibuã__
 ((
__noölöe__
))

	)

333 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__unu£d__
))

	)

334 
	#__©åibuã_noölöe__


	)

338 #i‡
	`__GNUC_PREREQ
 (3,2Ë|| 
	`__glibc_has_©åibuã
 (
__dïªˇãd__
)

339 
	#__©åibuã_dïªˇãd__
 
	`__©åibuã__
 ((
__dïªˇãd__
))

	)

341 
	#__©åibuã_dïªˇãd__


	)

347 #i‡
	`__GNUC_PREREQ
 (4,5) \

348 || 
	$__glibc_has_exãnsi⁄
 (
__©åibuã_dïªˇãd_wôh_mesßge__
)

349 
	#__©åibuã_dïªˇãd_msg__
(
msg
) \

350 
	`__©åibuã__
 ((
	`__dïªˇãd__
 (
msg
)))

	)

352 
	#__©åibuã_dïªˇãd_msg__
(
msg
Ë
__©åibuã_dïªˇãd__


	)

361 #i‡
	`__GNUC_PREREQ
 (2,8Ë|| 
	`__glibc_has_©åibuã
 (
__f‹m©_¨g__
)

362 
	#__©åibuã_f‹m©_¨g__
(
x
Ë
	`__©åibuã__
 ((
	`__f‹m©_¨g__
 (x)))

	)

364 
	#__©åibuã_f‹m©_¨g__
(
x
Ë

	)

371 #i‡
	`__GNUC_PREREQ
 (2,97Ë|| 
	`__glibc_has_©åibuã
 (
__f‹m©__
)

372 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
) \

373 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__°rfm⁄__
, 
a
, 
b
)))

	)

375 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
Ë

	)

382 #i‚de‡
__©åibuã_n⁄nuŒ__


383 #i‡
	`__GNUC_PREREQ
 (3,3Ë|| 
	`__glibc_has_©åibuã
 (
__n⁄nuŒ__
)

384 
	#__©åibuã_n⁄nuŒ__
(
∑øms
Ë
	`__©åibuã__
 ((
__n⁄nuŒ__
Ö¨ams))

	)

386 
	#__©åibuã_n⁄nuŒ__
(
∑øms
)

	)

389 #i‚de‡
__n⁄nuŒ


390 
	#__n⁄nuŒ
(
∑øms
Ë
	`__©åibuã_n⁄nuŒ__
 (∑øms)

	)

395 #i‚de‡
__ªtu∫s_n⁄nuŒ


396 #i‡
	`__GNUC_PREREQ
 (4, 9Ë|| 
	`__glibc_has_©åibuã
 (
__ªtu∫s_n⁄nuŒ__
)

397 
	#__ªtu∫s_n⁄nuŒ
 
	`__©åibuã__
 ((
__ªtu∫s_n⁄nuŒ__
))

	)

399 
	#__ªtu∫s_n⁄nuŒ


	)

405 #i‡
	`__GNUC_PREREQ
 (3,4Ë|| 
	`__glibc_has_©åibuã
 (
__w¨n_unu£d_ªsu…__
)

406 
	#__©åibuã_w¨n_unu£d_ªsu…__
 \

407 
	`__©åibuã__
 ((
__w¨n_unu£d_ªsu…__
))

	)

408 #i‡
deföed
 
__USE_FORTIFY_LEVEL
 && __USE_FORTIFY_LEVEL > 0

409 
	#__wur
 
__©åibuã_w¨n_unu£d_ªsu…__


	)

412 
	#__©åibuã_w¨n_unu£d_ªsu…__


	)

414 #i‚de‡
__wur


415 
	#__wur


	)

419 #i‡
	`__GNUC_PREREQ
 (3,2Ë|| 
	`__glibc_has_©åibuã
 (
__Æways_ölöe__
)

423 #unde‡
__Æways_ölöe


424 
	#__Æways_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__Æways_ölöe__
))

	)

426 #unde‡
__Æways_ölöe


427 
	#__Æways_ölöe
 
__ölöe


	)

432 #i‡
	`__GNUC_PREREQ
 (4,3Ë|| 
	`__glibc_has_©åibuã
 (
__¨tificül__
)

433 
	#__©åibuã_¨tificül__
 
	`__©åibuã__
 ((
__¨tificül__
))

	)

435 
	#__©åibuã_¨tificül__


	)

447 #i‡(!
deföed
 
__˝lu•lus
 || 
	`__GNUC_PREREQ
 (4,3) \

448 || (
deföed
 
__˛™g__
 && (deföed 
__GNUC_STDC_INLINE__
 \

449 || 
deföed
 
__GNUC_GNU_INLINE__
)))

450 #i‡
deföed
 
__GNUC_STDC_INLINE__
 || deföed 
__˝lu•lus


451 
	#__exã∫_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

452 
	#__exã∫_Æways_ölöe
 \

453 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

455 
	#__exã∫_ölöe
 
__ölöe


	)

456 
	#__exã∫_Æways_ölöe
 
__Æways_ölöe


	)

460 #ifde‡
__exã∫_Æways_ölöe


461 
	#__f‹tify_fun˘i⁄
 
__exã∫_Æways_ölöe
 
__©åibuã_¨tificül__


	)

466 #i‡
	`__GNUC_PREREQ
 (4,3)

467 
	#__va_¨g_∑ck
(Ë
	`__buûtö_va_¨g_∑ck
 ()

	)

468 
	#__va_¨g_∑ck_Àn
(Ë
	`__buûtö_va_¨g_∑ck_Àn
 ()

	)

475 #i‡!(
	`__GNUC_PREREQ
 (2,8Ë|| 
deföed
 
__˛™g__
)

476 
	#__exãnsi⁄__


	)

482 #i‡!(
	`__GNUC_PREREQ
 (2,92Ë|| 
__˛™g_maj‹__
 >= 3)

483 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

484 
	#__ª°ri˘
 
ª°ri˘


	)

486 
	#__ª°ri˘


	)

494 #i‡(
	`__GNUC_PREREQ
 (3,1Ë|| 
__˛™g_maj‹__
 >3Ë&& !
deföed
 
__˝lu•lus


495 
	#__ª°ri˘_¨r
 
__ª°ri˘


	)

497 #ifde‡
__GNUC__


498 
	#__ª°ri˘_¨r


	)

500 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

501 
	#__ª°ri˘_¨r
 
ª°ri˘


	)

504 
	#__ª°ri˘_¨r


	)

509 #i‡(
__GNUC__
 >3Ë|| 
	`__glibc_has_buûtö
 (
__buûtö_ex≥˘
)

510 
	#__glibc_u∆ikñy
(
c⁄d
Ë
	`__buûtö_ex≥˘
 ((c⁄d), 0)

	)

511 
	#__glibc_likñy
(
c⁄d
Ë
	`__buûtö_ex≥˘
 ((c⁄d), 1)

	)

513 
	#__glibc_u∆ikñy
(
c⁄d
Ë(c⁄d)

	)

514 
	#__glibc_likñy
(
c⁄d
Ë(c⁄d)

	)

517 #i‡(!
deföed
 
_N‹ëu∫
 \

518 && (
deföed
 
__STDC_VERSION__
 ? __STDC_VERSION__ : 0) < 201112 \

519 && !(
	`__GNUC_PREREQ
 (4,7) \

520 || (3 < 
__˛™g_maj‹__
 + (5 <
__˛™g_mö‹__
))))

521 #i‡
	`__GNUC_PREREQ
 (2,8)

522 
	#_N‹ëu∫
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

	)

524 
	#_N‹ëu∫


	)

528 #i‡
	`__GNUC_PREREQ
 (8, 0)

532 
	#__©åibuã_n⁄°rög__
 
	`__©åibuã__
 ((
__n⁄°rög__
))

	)

534 
	#__©åibuã_n⁄°rög__


	)

538 #unde‡
__©åibuã_c›y__


539 #i‡
	`__GNUC_PREREQ
 (9, 0)

542 
	#__©åibuã_c›y__
(
¨g
Ë
	`__©åibuã__
 ((
	`__c›y__
 (¨g)))

	)

544 
	#__©åibuã_c›y__
(
¨g
)

	)

547 #i‡(!
deföed
 
_Sètic_as£π
 && !deföed 
__˝lu•lus
 \

548 && (
deföed
 
__STDC_VERSION__
 ? __STDC_VERSION__ : 0) < 201112 \

549 && (!(
	`__GNUC_PREREQ
 (4, 6Ë|| 
__˛™g_maj‹__
 >= 4) \

550 || 
deföed
 
__STRICT_ANSI__
))

551 
	#_Sètic_as£π
(
ex¥
, 
dügno°ic
) \

552 (*
	`__Sètic_as£π_fun˘i⁄
 ()) \

553 [!! (°ru˘ { 
__îr‹_if_√g©ive
: (
ex¥
Ë? 2 : -1; })]

	)

558 #i‚de‡
__GNULIB_CDEFS


559 
	~<bôs/w‹dsize.h
>

560 
	~<bôs/l⁄g-doubÀ.h
>

563 #i‡
__LDOUBLE_REDIRECTS_TO_FLOAT128_ABI
 == 1

564 #ifde‡
__REDIRECT


567 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
Ë... 
unu£d__ldbl_ªdú


	)

568 
	#__LDBL_REDIR_DECL
(
«me
) \

569 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 ("__" #«mê"õì128"));

	)

572 
	#__LDBL_REDIR2_DECL
(
«me
) \

573 
	`__ty≥of
 (
__
##
«me
) __##name \

574 
	`__asm
 (
	`__ASMNAME
 ("__" #«mê"õì128"));

	)

577 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë... 
unu£d__ldbl_ªdú1


	)

578 
	#__LDBL_REDIR1_DECL
(
«me
, 
Æüs
) \

579 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 (#Æüs));

	)

581 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

582 
	`__REDIRECT_NTH
 (
«me
, 
¥Ÿo
, 
Æüs
)

	)

583 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

584 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__
##
Æüs
##
õì128
)

	)

587 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
Ë... 
unu£d__ªdúe˘_ldbl


	)

588 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
Ë... 
unu£d__ldbl_ªdú_¡h


	)

591 
	`_Sètic_as£π
 (0, "IEEE 128-bitsÜong doubleÑequiresÑedirection onÅhisÖlatform");

593 #ñi‡
deföed
 
__LONG_DOUBLE_MATH_OPTIONAL
 && deföed 
__NO_LONG_DOUBLE_MATH


594 
	#__LDBL_COMPAT
 1

	)

595 #ifde‡
__REDIRECT


596 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

597 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
) \

598 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

599 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT_NTH
 («me,ÖrŸo,álüs)

	)

600 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
) \

601 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

602 
	#__LDBL_REDIR2_DECL
(
«me
) \

603 
	`__ty≥of
 (
__
##
«me
Ë__##«mê
	`__asm
 (
	`__ASMNAME
 ("__∆dbl___" #«me));

	)

604 
	#__LDBL_REDIR1_DECL
(
«me
, 
Æüs
) \

605 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 (#Æüs));

	)

606 
	#__LDBL_REDIR_DECL
(
«me
) \

607 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 ("__∆dbl_" #«me));

	)

608 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

609 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

610 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

611 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

614 #i‡(!
deföed
 
__LDBL_COMPAT
 && 
__LDOUBLE_REDIRECTS_TO_FLOAT128_ABI
 == 0) \

615 || !
deföed
 
__REDIRECT


616 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê
	)
proto

617 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
Ë«mê
	)
proto

618 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
__THROW


	)

619 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
Ë«mê¥Ÿÿ
__THROW


	)

620 
	#__LDBL_REDIR2_DECL
(
«me
)

	)

621 
	#__LDBL_REDIR_DECL
(
«me
)

	)

622 #ifde‡
__REDIRECT


623 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

624 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

625 
	`__REDIRECT_NTH
 (
«me
, 
¥Ÿo
, 
Æüs
)

	)

634 #i‡
	`__GNUC_PREREQ
 (4,8Ë|| 
	`__glibc_˛™g_¥îeq
 (3,5)

635 
	#__glibc_ma¸o_w¨nög1
(
mesßge
Ë
	`_Pøgma
 (#mesßge)

	)

636 
	#__glibc_ma¸o_w¨nög
(
mesßge
) \

637 
	`__glibc_ma¸o_w¨nög1
 (
GCC
 
w¨nög
 
mesßge
)

	)

639 
	#__glibc_ma¸o_w¨nög
(
msg
)

	)

649 #i‡!
deföed
 
__˝lu•lus
 \

650 && (
	`__GNUC_PREREQ
 (4, 9) \

651 || 
	`__glibc_has_exãnsi⁄
 (
c_gíîic_£À˘i⁄s
) \

652 || (!
deföed
 
__GNUC__
 && deföed 
__STDC_VERSION__
 \

653 && 
__STDC_VERSION__
 >= 201112L))

654 
	#__HAVE_GENERIC_SELECTION
 1

	)

656 
	#__HAVE_GENERIC_SELECTION
 0

	)

659 #i‡
	`__GNUC_PREREQ
 (10, 0)

665 
	#__©å_ac˚ss
(
x
Ë
	`__©åibuã__
 ((
__ac˚ss__
 x))

	)

670 #i‡
__USE_FORTIFY_LEVEL
 == 3

671 
	#__f‹tifõd_©å_ac˚ss
(
a
, 
o
, 
s
Ë
	`__©åibuã__
 ((
	`__ac˚ss__
 (a, o)))

	)

673 
	#__f‹tifõd_©å_ac˚ss
(
a
, 
o
, 
s
Ë
	`__©å_ac˚ss
 (◊, o, s))

	)

675 #i‡
	`__GNUC_PREREQ
 (11, 0)

676 
	#__©å_ac˚ss_n⁄e
(
¨gno
Ë
	`__©åibuã__
 ((
	`__ac˚ss__
 (
__n⁄e__
,árgno)))

	)

678 
	#__©å_ac˚ss_n⁄e
(
¨gno
)

	)

681 
	#__f‹tifõd_©å_ac˚ss
(
a
, 
o
, 
s
)

	)

682 
	#__©å_ac˚ss
(
x
)

	)

683 
	#__©å_ac˚ss_n⁄e
(
¨gno
)

	)

686 #i‡
	`__GNUC_PREREQ
 (11, 0)

689 
	#__©å_dóŒoc
(
dóŒoc
, 
¨gno
) \

690 
	`__©åibuã__
 ((
	`__mÆloc__
 (
dóŒoc
, 
¨gno
)))

	)

691 
	#__©å_dóŒoc_‰ì
 
	`__©å_dóŒoc
 (
__buûtö_‰ì
, 1)

	)

693 
	#__©å_dóŒoc
(
dóŒoc
, 
¨gno
)

	)

694 
	#__©å_dóŒoc_‰ì


	)

699 #i‡
	`__GNUC_PREREQ
 (4, 1)

700 
	#__©åibuã_ªtu∫s_twi˚__
 
	`__©åibuã__
 ((
__ªtu∫s_twi˚__
))

	)

702 
	#__©åibuã_ªtu∫s_twi˚__


	)

	@/usr/include/x86_64-linux-gnu/sys/debugreg.h

18 #i‚de‡
_SYS_DEBUGREG_H


19 
	#_SYS_DEBUGREG_H
 1

	)

23 
	#DR_FIRSTADDR
 0

	)

24 
	#DR_LASTADDR
 3

	)

26 
	#DR_STATUS
 6

	)

27 
	#DR_CONTROL
 7

	)

33 
	#DR_TRAP0
 (0x1Ë

	)

34 
	#DR_TRAP1
 (0x2Ë

	)

35 
	#DR_TRAP2
 (0x4Ë

	)

36 
	#DR_TRAP3
 (0x8Ë

	)

38 
	#DR_STEP
 (0x4000Ë

	)

39 
	#DR_SWITCH
 (0x8000Ë

	)

47 
	#DR_CONTROL_SHIFT
 16

	)

48 
	#DR_CONTROL_SIZE
 4

	)

50 
	#DR_RW_EXECUTE
 (0x0Ë

	)

51 
	#DR_RW_WRITE
 (0x1)

	)

52 
	#DR_RW_READ
 (0x3)

	)

54 
	#DR_LEN_1
 (0x0Ë

	)

55 
	#DR_LEN_2
 (0x4)

	)

56 
	#DR_LEN_4
 (0xC)

	)

57 #ifde‡
__x86_64__


58 
	#DR_LEN_8
 (0x8)

	)

68 
	#DR_LOCAL_ENABLE_SHIFT
 0

	)

69 
	#DR_GLOBAL_ENABLE_SHIFT
 1

	)

70 
	#DR_ENABLE_SIZE
 2

	)

72 
	#DR_LOCAL_ENABLE_MASK
 (0x55Ë

	)

73 
	#DR_GLOBAL_ENABLE_MASK
 (0xAAË

	)

80 #ifde‡
__x86_64__


81 
	#DR_CONTROL_RESERVED
 (0xFFFFFFFF0000FC00ULLË

	)

83 
	#DR_CONTROL_RESERVED
 (0x00FC00UË

	)

85 
	#DR_LOCAL_SLOWDOWN
 (0x100Ë

	)

86 
	#DR_GLOBAL_SLOWDOWN
 (0x200Ë

	)

	@/usr/include/x86_64-linux-gnu/sys/dir.h

18 #i‚def 
_SYS_DIR_H


19 
	#_SYS_DIR_H
 1

	)

21 
	~<„©uªs.h
>

23 
	~<dúít.h
>

25 
	#dúe˘
 
dúít


	)

	@/usr/include/x86_64-linux-gnu/sys/elf.h

18 #i‚de‡
_SYS_ELF_H


19 
	#_SYS_ELF_H
 1

	)

21 #ifde‡
__x86_64__


22 #îr‹ 
This
 
hódî
 
is
 
unsuµ‹ãd
 
⁄
 
x86
-64.

26 
	~<sys/¥ocfs.h
>

	@/usr/include/x86_64-linux-gnu/sys/epoll.h

18 #i‚def 
_SYS_EPOLL_H


19 
	#_SYS_EPOLL_H
 1

	)

21 
	~<°döt.h
>

22 
	~<sys/ty≥s.h
>

24 
	~<bôs/ty≥s/sig£t_t.h
>

25 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

28 
	~<bôs/ïﬁl.h
>

30 #i‚de‡
__EPOLL_PACKED


31 
	#__EPOLL_PACKED


	)

35 
	eEPOLL_EVENTS


37 
	mEPOLLIN
 = 0x001,

38 
	#EPOLLIN
 
EPOLLIN


	)

39 
	mEPOLLPRI
 = 0x002,

40 
	#EPOLLPRI
 
EPOLLPRI


	)

41 
	mEPOLLOUT
 = 0x004,

42 
	#EPOLLOUT
 
EPOLLOUT


	)

43 
	mEPOLLRDNORM
 = 0x040,

44 
	#EPOLLRDNORM
 
EPOLLRDNORM


	)

45 
	mEPOLLRDBAND
 = 0x080,

46 
	#EPOLLRDBAND
 
EPOLLRDBAND


	)

47 
	mEPOLLWRNORM
 = 0x100,

48 
	#EPOLLWRNORM
 
EPOLLWRNORM


	)

49 
	mEPOLLWRBAND
 = 0x200,

50 
	#EPOLLWRBAND
 
EPOLLWRBAND


	)

51 
	mEPOLLMSG
 = 0x400,

52 
	#EPOLLMSG
 
EPOLLMSG


	)

53 
	mEPOLLERR
 = 0x008,

54 
	#EPOLLERR
 
EPOLLERR


	)

55 
	mEPOLLHUP
 = 0x010,

56 
	#EPOLLHUP
 
EPOLLHUP


	)

57 
	mEPOLLRDHUP
 = 0x2000,

58 
	#EPOLLRDHUP
 
EPOLLRDHUP


	)

59 
	mEPOLLEXCLUSIVE
 = 1u << 28,

60 
	#EPOLLEXCLUSIVE
 
EPOLLEXCLUSIVE


	)

61 
	mEPOLLWAKEUP
 = 1u << 29,

62 
	#EPOLLWAKEUP
 
EPOLLWAKEUP


	)

63 
	mEPOLLONESHOT
 = 1u << 30,

64 
	#EPOLLONESHOT
 
EPOLLONESHOT


	)

65 
	mEPOLLET
 = 1u << 31

66 
	#EPOLLET
 
EPOLLET


	)

71 
	#EPOLL_CTL_ADD
 1

	)

72 
	#EPOLL_CTL_DEL
 2

	)

73 
	#EPOLL_CTL_MOD
 3

	)

76 
	uïﬁl_d©a


78 *
	m±r
;

79 
	mfd
;

80 
uöt32_t
 
	mu32
;

81 
uöt64_t
 
	mu64
;

82 } 
	tïﬁl_d©a_t
;

84 
	sïﬁl_evít


86 
uöt32_t
 
	mevíts
;

87 
ïﬁl_d©a_t
 
	md©a
;

88 } 
	g__EPOLL_PACKED
;

91 
__BEGIN_DECLS


97 
	$ïﬁl_¸óã
 (
__size
Ë
__THROW
;

101 
	$ïﬁl_¸óã1
 (
__Êags
Ë
__THROW
;

110 
	$ïﬁl_˘l
 (
__ïfd
, 
__›
, 
__fd
,

111 
ïﬁl_evít
 *
__evít
Ë
__THROW
;

124 
	`ïﬁl_waô
 (
__ïfd
, 
ïﬁl_evít
 *
__evíts
,

125 
__maxevíts
, 
__timeout
);

133 
	`ïﬁl_pwaô
 (
__ïfd
, 
ïﬁl_evít
 *
__evíts
,

134 
__maxevíts
, 
__timeout
,

135 c⁄° 
__sig£t_t
 *
__ss
);

141 #i‚de‡
__USE_TIME_BITS64


142 
	`ïﬁl_pwaô2
 (
__ïfd
, 
ïﬁl_evít
 *
__evíts
,

143 
__maxevíts
, c⁄° 
time•ec
 *
__timeout
,

144 c⁄° 
__sig£t_t
 *
__ss
);

146 #ifde‡
__REDIRECT


147 
	`__REDIRECT
 (
ïﬁl_pwaô2
, (
__ïfd
, 
ïﬁl_evít
 *
__ev
,

148 
__maxevs
,

149 c⁄° 
time•ec
 *
__timeout
,

150 c⁄° 
__sig£t_t
 *
__ss
),

151 
__ïﬁl_pwaô2_time64
);

153 
	#ïﬁl_pwaô2
 
__ïﬁl_pwaô2_time64


	)

157 
__END_DECLS


	@/usr/include/x86_64-linux-gnu/sys/errno.h

1 
	~<î∫o.h
>

	@/usr/include/x86_64-linux-gnu/sys/eventfd.h

18 #i‚def 
_SYS_EVENTFD_H


19 
	#_SYS_EVENTFD_H
 1

	)

21 
	~<°döt.h
>

24 
	~<bôs/evítfd.h
>

27 
uöt64_t
 
	tevítfd_t
;

30 
__BEGIN_DECLS


34 
	$evítfd
 (
__cou¡
, 
__Êags
Ë
__THROW
;

37 
	`evítfd_ªad
 (
__fd
, 
evítfd_t
 *
__vÆue
);

40 
	`evítfd_wrôe
 (
__fd
, 
evítfd_t
 
__vÆue
);

42 
__END_DECLS


	@/usr/include/x86_64-linux-gnu/sys/fanotify.h

18 #i‚def 
_SYS_FANOTIFY_H


19 
	#_SYS_FANOTIFY_H
 1

	)

21 
	~<°döt.h
>

22 
	~<löux/ÁnŸify.h
>

25 
__BEGIN_DECLS


28 
	$ÁnŸify_öô
 (
__Êags
, 
__evít_f_Êags
)

29 
__THROW
;

32 
	$ÁnŸify_m¨k
 (
__ÁnŸify_fd
, 
__Êags
,

33 
uöt64_t
 
__mask
, 
__dfd
, c⁄° *
__∑th«me
)

34 
__THROW
;

36 
__END_DECLS


	@/usr/include/x86_64-linux-gnu/sys/fcntl.h

1 
	~<f˙é.h
>

	@/usr/include/x86_64-linux-gnu/sys/file.h

18 #i‚def 
_SYS_FILE_H


19 
	#_SYS_FILE_H
 1

	)

21 
	~<„©uªs.h
>

23 #i‚def 
_FCNTL_H


24 
	~<f˙é.h
>

27 
	g__BEGIN_DECLS


32 #i‚de‡
L_SET


33 
	#L_SET
 0

	)

34 
	#L_INCR
 1

	)

35 
	#L_XTND
 2

	)

40 
	#LOCK_SH
 1

	)

41 
	#LOCK_EX
 2

	)

42 
	#LOCK_UN
 8

	)

45 
	#LOCK_NB
 4

	)

50 
	$Êock
 (
__fd
, 
__›î©i⁄
Ë
__THROW
;

53 
__END_DECLS


	@/usr/include/x86_64-linux-gnu/sys/fsuid.h

18 #i‚de‡
_SYS_FSUID_H


19 
	#_SYS_FSUID_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<sys/ty≥s.h
>

24 
__BEGIN_DECLS


28 
	$£tfsuid
 (
__uid_t
 
__uid
Ë
__THROW
;

31 
	$£tfsgid
 (
__gid_t
 
__gid
Ë
__THROW
;

33 
__END_DECLS


	@/usr/include/x86_64-linux-gnu/sys/gmon.h

32 #i‚def 
_SYS_GMON_H


33 
	#_SYS_GMON_H
 1

	)

35 
	~<„©uªs.h
>

37 
	~<sys/ty≥s.h
>

46 
	s__bb


48 
	mzîo_w‹d
;

49 c⁄° *
	mfûíame
;

50 *
	mcou¡s
;

51 
	mncou¡s
;

52 
__bb
 *
	m√xt
;

53 c⁄° *
	maddªs£s
;

56 
__bb
 *
__bb_hód
;

61 
	#HISTCOUNTER
 

	)

66 
	#HISTFRACTION
 2

	)

96 
	#HASHFRACTION
 2

	)

108 
	#ARCDENSITY
 3

	)

115 
	#MINARCS
 50

	)

120 
	#ARCINDEX
 

	)

130 
	#MAXARCS
 (1 << 20)

	)

132 
	sto°ru˘
 {

133 
	m£lÂc
;

134 
	mcou¡
;

135 
ARCINDEX
 
	mlök
;

142 
	søw¨c
 {

143 
	møw_‰ompc
;

144 
	møw_£lÂc
;

145 
	møw_cou¡
;

151 
	#ROUNDDOWN
(
x
,
y
Ë(((x)/(y))*(y))

	)

152 
	#ROUNDUP
(
x
,
y
Ë((((x)+(y)-1)/(y))*(y))

	)

157 
	sgm⁄∑øm
 {

158 
	m°©e
;

159 *
	mkcou¡
;

160 
	mkcou¡size
;

161 
ARCINDEX
 *
	m‰oms
;

162 
	m‰omssize
;

163 
to°ru˘
 *
	mtos
;

164 
	mtossize
;

165 
	mtﬁimô
;

166 
	mlowpc
;

167 
	mhighpc
;

168 
	mãxtsize
;

169 
	mhash‰a˘i⁄
;

170 
	mlog_hash‰a˘i⁄
;

176 
	#GMON_PROF_ON
 0

	)

177 
	#GMON_PROF_BUSY
 1

	)

178 
	#GMON_PROF_ERROR
 2

	)

179 
	#GMON_PROF_OFF
 3

	)

184 
	#GPROF_STATE
 0

	)

185 
	#GPROF_COUNT
 1

	)

186 
	#GPROF_FROMS
 2

	)

187 
	#GPROF_TOS
 3

	)

188 
	#GPROF_GMONPARAM
 4

	)

190 
__BEGIN_DECLS


193 
	$__m⁄°¨tup
 (
__lowpc
, 
__highpc
Ë
__THROW
;

194 
	$m⁄°¨tup
 (
__lowpc
, 
__highpc
Ë
__THROW
;

197 
	$_m˛ónup
 (Ë
__THROW
;

199 
__END_DECLS


	@/usr/include/x86_64-linux-gnu/sys/gmon_out.h

26 #i‚de‡
_SYS_GMON_OUT_H


27 
	#_SYS_GMON_OUT_H
 1

	)

29 
	~<„©uªs.h
>

31 
	#GMON_MAGIC
 "gm⁄"

	)

32 
	#GMON_VERSION
 1

	)

35 
	#GMON_SHOBJ_VERSION
 0x1ffff

	)

37 
__BEGIN_DECLS


44 
	sgm⁄_hdr


46 
	mcookõ
[4];

47 
	mvîsi⁄
[4];

48 
	m•¨e
[3 * 4];

54 
	mGMON_TAG_TIME_HIST
 = 0,

55 
	mGMON_TAG_CG_ARC
 = 1,

56 
	mGMON_TAG_BB_COUNT
 = 2

57 } 
	tGMON_Rec‹d_Tag
;

59 
	sgm⁄_hi°_hdr


61 
	mlow_pc
[ (*)];

62 
	mhigh_pc
[ (*)];

63 
	mhi°_size
[4];

64 
	m¥of_øã
[4];

65 
	mdimí
[15];

66 
	mdimí_abbªv
;

69 
	sgm⁄_cg_¨c_ªc‹d


71 
	m‰om_pc
[ (*)];

72 
	m£lf_pc
[ (*)];

73 
	mcou¡
[4];

76 
	g__END_DECLS


	@/usr/include/x86_64-linux-gnu/sys/inotify.h

18 #i‚def 
_SYS_INOTIFY_H


19 
	#_SYS_INOTIFY_H
 1

	)

21 
	~<°döt.h
>

24 
	~<bôs/öŸify.h
>

28 
	söŸify_evít


30 
	mwd
;

31 
uöt32_t
 
	mmask
;

32 
uöt32_t
 
	mcookõ
;

33 
uöt32_t
 
	mÀn
;

34 
«me
 
	m__Êex¨r
;

39 
	#IN_ACCESS
 0x00000001

	)

40 
	#IN_MODIFY
 0x00000002

	)

41 
	#IN_ATTRIB
 0x00000004

	)

42 
	#IN_CLOSE_WRITE
 0x00000008

	)

43 
	#IN_CLOSE_NOWRITE
 0x00000010

	)

44 
	#IN_CLOSE
 (
IN_CLOSE_WRITE
 | 
IN_CLOSE_NOWRITE
Ë

	)

45 
	#IN_OPEN
 0x00000020

	)

46 
	#IN_MOVED_FROM
 0x00000040

	)

47 
	#IN_MOVED_TO
 0x00000080

	)

48 
	#IN_MOVE
 (
IN_MOVED_FROM
 | 
IN_MOVED_TO
Ë

	)

49 
	#IN_CREATE
 0x00000100

	)

50 
	#IN_DELETE
 0x00000200

	)

51 
	#IN_DELETE_SELF
 0x00000400

	)

52 
	#IN_MOVE_SELF
 0x00000800

	)

55 
	#IN_UNMOUNT
 0x00002000

	)

56 
	#IN_Q_OVERFLOW
 0x00004000

	)

57 
	#IN_IGNORED
 0x00008000

	)

60 
	#IN_CLOSE
 (
IN_CLOSE_WRITE
 | 
IN_CLOSE_NOWRITE
Ë

	)

61 
	#IN_MOVE
 (
IN_MOVED_FROM
 | 
IN_MOVED_TO
Ë

	)

64 
	#IN_ONLYDIR
 0x01000000

	)

66 
	#IN_DONT_FOLLOW
 0x02000000

	)

67 
	#IN_EXCL_UNLINK
 0x04000000

	)

69 
	#IN_MASK_CREATE
 0x10000000

	)

70 
	#IN_MASK_ADD
 0x20000000

	)

72 
	#IN_ISDIR
 0x40000000

	)

73 
	#IN_ONESHOT
 0x80000000

	)

76 
	#IN_ALL_EVENTS
 (
IN_ACCESS
 | 
IN_MODIFY
 | 
IN_ATTRIB
 | 
IN_CLOSE_WRITE
 \

77 | 
IN_CLOSE_NOWRITE
 | 
IN_OPEN
 | 
IN_MOVED_FROM
 \

78 | 
IN_MOVED_TO
 | 
IN_CREATE
 | 
IN_DELETE
 \

79 | 
IN_DELETE_SELF
 | 
IN_MOVE_SELF
)

	)

82 
__BEGIN_DECLS


85 
	$öŸify_öô
 (Ë
__THROW
;

88 
	$öŸify_öô1
 (
__Êags
Ë
__THROW
;

92 
	$öŸify_add_w©ch
 (
__fd
, c⁄° *
__«me
, 
uöt32_t
 
__mask
)

93 
__THROW
;

96 
	$öŸify_rm_w©ch
 (
__fd
, 
__wd
Ë
__THROW
;

98 
__END_DECLS


	@/usr/include/x86_64-linux-gnu/sys/io.h

18 #i‚def 
_SYS_IO_H


19 
	#_SYS_IO_H
 1

	)

21 
	~<„©uªs.h
>

23 
__BEGIN_DECLS


32 
	$i›îm
 (
__‰om
, 
__num
,

33 
__tu∫_⁄
Ë
__THROW
;

38 
	$i›l
 (
__Àvñ
Ë
__THROW
;

40 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

42 
__ölöe
 

43 
	$öb
 (
__p‹t
)

45 
_v
;

47 
__asm__
 
	`__vﬁ©ûe__
 ("öb %w1,%0":"˜" (
_v
):"Nd" (
__p‹t
));

48  
_v
;

49 
	}
}

51 
__ölöe
 

52 
	$öb_p
 (
__p‹t
)

54 
_v
;

56 
__asm__
 
	`__vﬁ©ûe__
 ("öb %w1,%0\noutb %%Æ,$0x80":"˜" (
_v
):"Nd" (
__p‹t
));

57  
_v
;

58 
	}
}

60 
__ölöe
 

61 
	$öw
 (
__p‹t
)

63 
_v
;

65 
__asm__
 
	`__vﬁ©ûe__
 ("öw %w1,%0":"˜" (
_v
):"Nd" (
__p‹t
));

66  
_v
;

67 
	}
}

69 
__ölöe
 

70 
	$öw_p
 (
__p‹t
)

72 
_v
;

74 
__asm__
 
	`__vﬁ©ûe__
 ("öw %w1,%0\noutb %%Æ,$0x80":"˜" (
_v
):"Nd" (
__p‹t
));

75  
_v
;

76 
	}
}

78 
__ölöe
 

79 
	$öl
 (
__p‹t
)

81 
_v
;

83 
__asm__
 
	`__vﬁ©ûe__
 ("ö»%w1,%0":"˜" (
_v
):"Nd" (
__p‹t
));

84  
_v
;

85 
	}
}

87 
__ölöe
 

88 
	$öl_p
 (
__p‹t
)

90 
_v
;

91 
__asm__
 
	`__vﬁ©ûe__
 ("ö»%w1,%0\noutb %%Æ,$0x80":"˜" (
_v
):"Nd" (
__p‹t
));

92  
_v
;

93 
	}
}

95 
__ölöe
 

96 
	$outb
 (
__vÆue
, 
__p‹t
)

98 
__asm__
 
	`__vﬁ©ûe__
 ("outb %b0,%w1": :"a" (
__vÆue
), "Nd" (
__p‹t
));

99 
	}
}

101 
__ölöe
 

102 
	$outb_p
 (
__vÆue
, 
__p‹t
)

104 
__asm__
 
	`__vﬁ©ûe__
 ("outb %b0,%w1\noutb %%Æ,$0x80": :"a" (
__vÆue
),

105 "Nd" (
__p‹t
));

106 
	}
}

108 
__ölöe
 

109 
	$outw
 (
__vÆue
, 
__p‹t
)

111 
__asm__
 
	`__vﬁ©ûe__
 ("outw %w0,%w1": :"a" (
__vÆue
), "Nd" (
__p‹t
));

113 
	}
}

115 
__ölöe
 

116 
	$outw_p
 (
__vÆue
, 
__p‹t
)

118 
__asm__
 
	`__vﬁ©ûe__
 ("outw %w0,%w1\noutb %%Æ,$0x80": :"a" (
__vÆue
),

119 "Nd" (
__p‹t
));

120 
	}
}

122 
__ölöe
 

123 
	$oué
 (
__vÆue
, 
__p‹t
)

125 
__asm__
 
	`__vﬁ©ûe__
 ("oué %0,%w1": :"a" (
__vÆue
), "Nd" (
__p‹t
));

126 
	}
}

128 
__ölöe
 

129 
	$oué_p
 (
__vÆue
, 
__p‹t
)

131 
__asm__
 
	`__vﬁ©ûe__
 ("oué %0,%w1\noutb %%Æ,$0x80": :"a" (
__vÆue
),

132 "Nd" (
__p‹t
));

133 
	}
}

135 
__ölöe
 

136 
	$ösb
 (
__p‹t
, *
__addr
, 
__cou¡
)

138 
__asm__
 
	`__vﬁ©ûe__
 ("˛d ;Ñï ; insb":"=D" (
__addr
), "=c" (
__cou¡
)

139 :"d" (
__p‹t
), "0" (
__addr
), "1" (
__cou¡
));

140 
	}
}

142 
__ölöe
 

143 
	$ösw
 (
__p‹t
, *
__addr
, 
__cou¡
)

145 
__asm__
 
	`__vﬁ©ûe__
 ("˛d ;Ñï ; insw":"=D" (
__addr
), "=c" (
__cou¡
)

146 :"d" (
__p‹t
), "0" (
__addr
), "1" (
__cou¡
));

147 
	}
}

149 
__ölöe
 

150 
	$ö¶
 (
__p‹t
, *
__addr
, 
__cou¡
)

152 
__asm__
 
	`__vﬁ©ûe__
 ("˛d ;Ñï ; in¶":"=D" (
__addr
), "=c" (
__cou¡
)

153 :"d" (
__p‹t
), "0" (
__addr
), "1" (
__cou¡
));

154 
	}
}

156 
__ölöe
 

157 
	$outsb
 (
__p‹t
, c⁄° *
__addr
,

158 
__cou¡
)

160 
__asm__
 
	`__vﬁ©ûe__
 ("˛d ;Ñï ; outsb":"=S" (
__addr
), "=c" (
__cou¡
)

161 :"d" (
__p‹t
), "0" (
__addr
), "1" (
__cou¡
));

162 
	}
}

164 
__ölöe
 

165 
	$outsw
 (
__p‹t
, c⁄° *
__addr
,

166 
__cou¡
)

168 
__asm__
 
	`__vﬁ©ûe__
 ("˛d ;Ñï ; outsw":"=S" (
__addr
), "=c" (
__cou¡
)

169 :"d" (
__p‹t
), "0" (
__addr
), "1" (
__cou¡
));

170 
	}
}

172 
__ölöe
 

173 
	$out¶
 (
__p‹t
, c⁄° *
__addr
,

174 
__cou¡
)

176 
__asm__
 
	`__vﬁ©ûe__
 ("˛d ;Ñï ; out¶":"=S" (
__addr
), "=c" (
__cou¡
)

177 :"d" (
__p‹t
), "0" (
__addr
), "1" (
__cou¡
));

178 
	}
}

182 
	g__END_DECLS


	@/usr/include/x86_64-linux-gnu/sys/ioctl.h

18 #i‚def 
_SYS_IOCTL_H


19 
	#_SYS_IOCTL_H
 1

	)

21 
	~<„©uªs.h
>

23 
	g__BEGIN_DECLS


26 
	~<bôs/io˘ls.h
>

29 
	~<bôs/io˘l-ty≥s.h
>

36 
	~<sys/âydeÁu…s.h
>

41 #i‚de‡
__USE_TIME_BITS64


42 
	$io˘l
 (
__fd
, 
__ªque°
, ...Ë
__THROW
;

44 #ifde‡
__REDIRECT


45 
	`__REDIRECT_NTH
 (
io˘l
, (
__fd
, 
__ªque°
, ...),

46 
__io˘l_time64
);

48 
	$__io˘l_time64
 (
__fd
, 
__ªque°
, ...Ë
__THROW
;

49 
	#io˘l
 
__io˘l_time64


	)

53 
__END_DECLS


	@/usr/include/x86_64-linux-gnu/sys/ipc.h

18 #i‚de‡
_SYS_IPC_H


19 
	#_SYS_IPC_H
 1

	)

21 
	~<„©uªs.h
>

24 
	~<bôs/ù˘y≥s.h
>

25 
	~<bôs/ùc.h
>

27 #i‚de‡
__uid_t_deföed


28 
__uid_t
 
	tuid_t
;

29 
	#__uid_t_deföed


	)

32 #i‚de‡
__gid_t_deföed


33 
__gid_t
 
	tgid_t
;

34 
	#__gid_t_deföed


	)

37 #i‚de‡
__mode_t_deföed


38 
__mode_t
 
	tmode_t
;

39 
	#__mode_t_deföed


	)

42 #i‚de‡
__key_t_deföed


43 
__key_t
 
	tkey_t
;

44 
	#__key_t_deföed


	)

47 
__BEGIN_DECLS


50 
key_t
 
	$·ok
 (c⁄° *
__∑th«me
, 
__¥oj_id
Ë
__THROW
;

52 
__END_DECLS


	@/usr/include/x86_64-linux-gnu/sys/kd.h

18 #i‚de‡
_SYS_KD_H


19 
	#_SYS_KD_H
 1

	)

22 #i‚de‡
_LINUX_TYPES_H


23 
	#_LINUX_TYPES_H
 1

	)

24 
	#__undef_LINUX_TYPES_H


	)

27 
	~<löux/kd.h
>

29 #ifde‡
__undef_LINUX_TYPES_H


30 #unde‡
_LINUX_TYPES_H


31 #unde‡
__undef_LINUX_TYPES_H


	@/usr/include/x86_64-linux-gnu/sys/klog.h

18 #i‚def 
_SYS_KLOG_H


20 
	#_SYS_KLOG_H
 1

	)

21 
	~<„©uªs.h
>

23 
__BEGIN_DECLS


29 
	$klog˘l
 (
__ty≥
, *
__buÂ
, 
__Àn
Ë
__THROW
;

31 
__END_DECLS


	@/usr/include/x86_64-linux-gnu/sys/mman.h

19 #i‚def 
_SYS_MMAN_H


20 
	#_SYS_MMAN_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<bôs/ty≥s.h
>

24 
	#__√ed_size_t


	)

25 
	~<°ddef.h
>

27 #i‚de‡
__off_t_deföed


28 #i‚de‡
__USE_FILE_OFFSET64


29 
__off_t
 
	toff_t
;

31 
__off64_t
 
	toff_t
;

33 
	#__off_t_deföed


	)

36 #i‚de‡
__mode_t_deföed


37 
__mode_t
 
	tmode_t
;

38 
	#__mode_t_deföed


	)

41 
	~<bôs/mm™.h
>

44 
	#MAP_FAILED
 ((*Ë-1)

	)

46 
	g__BEGIN_DECLS


56 #i‚de‡
__USE_FILE_OFFSET64


57 *
	$mm≠
 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
,

58 
__Êags
, 
__fd
, 
__off_t
 
__off£t
Ë
__THROW
;

60 #ifde‡
__REDIRECT_NTH


61 * 
	`__REDIRECT_NTH
 (
mm≠
,

62 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
,

63 
__Êags
, 
__fd
, 
__off64_t
 
__off£t
),

64 
mm≠64
);

66 
	#mm≠
 
mm≠64


	)

69 #ifde‡
__USE_LARGEFILE64


70 *
	$mm≠64
 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
,

71 
__Êags
, 
__fd
, 
__off64_t
 
__off£t
Ë
__THROW
;

76 
	$munm≠
 (*
__addr
, 
size_t
 
__Àn
Ë
__THROW
;

81 
	$m¥Ÿe˘
 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
Ë
__THROW
;

89 
	`msync
 (*
__addr
, 
size_t
 
__Àn
, 
__Êags
);

91 #ifde‡
__USE_MISC


94 
	$madvi£
 (*
__addr
, 
size_t
 
__Àn
, 
__advi˚
Ë
__THROW
;

96 #ifde‡
__USE_XOPEN2K


98 
	$posix_madvi£
 (*
__addr
, 
size_t
 
__Àn
, 
__advi˚
Ë
__THROW
;

103 
	$mlock
 (c⁄° *
__addr
, 
size_t
 
__Àn
Ë
__THROW
;

106 
	$mu∆ock
 (c⁄° *
__addr
, 
size_t
 
__Àn
Ë
__THROW
;

111 
	$mlockÆl
 (
__Êags
Ë
__THROW
;

115 
	$mu∆ockÆl
 (Ë
__THROW
;

117 #ifde‡
__USE_MISC


123 
	$möc‹e
 (*
__°¨t
, 
size_t
 
__Àn
, *
__vec
)

124 
__THROW
;

127 #ifde‡
__USE_GNU


133 *
	$mªm≠
 (*
__addr
, 
size_t
 
__ﬁd_Àn
, size_à
__√w_Àn
,

134 
__Êags
, ...Ë
__THROW
;

138 
	$ªm≠_fûe_∑ges
 (*
__°¨t
, 
size_t
 
__size
, 
__¥Ÿ
,

139 
size_t
 
__pgoff
, 
__Êags
Ë
__THROW
;

144 
	`shm_›í
 (c⁄° *
__«me
, 
__oÊag
, 
mode_t
 
__mode
);

147 
	`shm_u∆ök
 (c⁄° *
__«me
);

149 
__END_DECLS


	@/usr/include/x86_64-linux-gnu/sys/mount.h

21 #i‚de‡
_SYS_MOUNT_H


22 
	#_SYS_MOUNT_H
 1

	)

24 
	~<„©uªs.h
>

25 
	~<sys/io˘l.h
>

27 
	#BLOCK_SIZE
 1024

	)

28 
	#BLOCK_SIZE_BITS
 10

	)

35 
	mMS_RDONLY
 = 1,

36 
	#MS_RDONLY
 
MS_RDONLY


	)

37 
	mMS_NOSUID
 = 2,

38 
	#MS_NOSUID
 
MS_NOSUID


	)

39 
	mMS_NODEV
 = 4,

40 
	#MS_NODEV
 
MS_NODEV


	)

41 
	mMS_NOEXEC
 = 8,

42 
	#MS_NOEXEC
 
MS_NOEXEC


	)

43 
	mMS_SYNCHRONOUS
 = 16,

44 
	#MS_SYNCHRONOUS
 
MS_SYNCHRONOUS


	)

45 
	mMS_REMOUNT
 = 32,

46 
	#MS_REMOUNT
 
MS_REMOUNT


	)

47 
	mMS_MANDLOCK
 = 64,

48 
	#MS_MANDLOCK
 
MS_MANDLOCK


	)

49 
	mMS_DIRSYNC
 = 128,

50 
	#MS_DIRSYNC
 
MS_DIRSYNC


	)

51 
	mMS_NOSYMFOLLOW
 = 256,

52 
	#MS_NOSYMFOLLOW
 
MS_NOSYMFOLLOW


	)

53 
	mMS_NOATIME
 = 1024,

54 
	#MS_NOATIME
 
MS_NOATIME


	)

55 
	mMS_NODIRATIME
 = 2048,

56 
	#MS_NODIRATIME
 
MS_NODIRATIME


	)

57 
	mMS_BIND
 = 4096,

58 
	#MS_BIND
 
MS_BIND


	)

59 
	mMS_MOVE
 = 8192,

60 
	#MS_MOVE
 
MS_MOVE


	)

61 
	mMS_REC
 = 16384,

62 
	#MS_REC
 
MS_REC


	)

63 
	mMS_SILENT
 = 32768,

64 
	#MS_SILENT
 
MS_SILENT


	)

65 
	mMS_POSIXACL
 = 1 << 16,

66 
	#MS_POSIXACL
 
MS_POSIXACL


	)

67 
	mMS_UNBINDABLE
 = 1 << 17,

68 
	#MS_UNBINDABLE
 
MS_UNBINDABLE


	)

69 
	mMS_PRIVATE
 = 1 << 18,

70 
	#MS_PRIVATE
 
MS_PRIVATE


	)

71 
	mMS_SLAVE
 = 1 << 19,

72 
	#MS_SLAVE
 
MS_SLAVE


	)

73 
	mMS_SHARED
 = 1 << 20,

74 
	#MS_SHARED
 
MS_SHARED


	)

75 
	mMS_RELATIME
 = 1 << 21,

76 
	#MS_RELATIME
 
MS_RELATIME


	)

77 
	mMS_KERNMOUNT
 = 1 << 22,

78 
	#MS_KERNMOUNT
 
MS_KERNMOUNT


	)

79 
	mMS_I_VERSION
 = 1 << 23,

80 
	#MS_I_VERSION
 
MS_I_VERSION


	)

81 
	mMS_STRICTATIME
 = 1 << 24,

82 
	#MS_STRICTATIME
 
MS_STRICTATIME


	)

83 
	mMS_LAZYTIME
 = 1 << 25,

84 
	#MS_LAZYTIME
 
MS_LAZYTIME


	)

85 
	mMS_ACTIVE
 = 1 << 30,

86 
	#MS_ACTIVE
 
MS_ACTIVE


	)

87 
	mMS_NOUSER
 = 1 << 31

88 
	#MS_NOUSER
 
MS_NOUSER


	)

92 
	#MS_RMT_MASK
 (
MS_RDONLY
|
MS_SYNCHRONOUS
|
MS_MANDLOCK
|
MS_I_VERSION
 \

93 |
MS_LAZYTIME
)

	)

98 
	#MS_MGC_VAL
 0xc0ed0000

	)

99 
	#MS_MGC_MSK
 0xffff0000

	)

106 
	#BLKROSET
 
	`_IO
(0x12, 93Ë

	)

107 
	#BLKROGET
 
	`_IO
(0x12, 94Ë

	)

108 
	#BLKRRPART
 
	`_IO
(0x12, 95Ë

	)

109 
	#BLKGETSIZE
 
	`_IO
(0x12, 96Ë

	)

110 
	#BLKFLSBUF
 
	`_IO
(0x12, 97Ë

	)

111 
	#BLKRASET
 
	`_IO
(0x12, 98Ë

	)

112 
	#BLKRAGET
 
	`_IO
(0x12, 99Ë

	)

113 
	#BLKFRASET
 
	`_IO
(0x12,100Ë

	)

114 
	#BLKFRAGET
 
	`_IO
(0x12,101Ë

	)

115 
	#BLKSECTSET
 
	`_IO
(0x12,102Ë

	)

116 
	#BLKSECTGET
 
	`_IO
(0x12,103Ë

	)

117 
	#BLKSSZGET
 
	`_IO
(0x12,104Ë

	)

118 
	#BLKBSZGET
 
	`_IOR
(0x12,112,
size_t
)

	)

119 
	#BLKBSZSET
 
	`_IOW
(0x12,113,
size_t
)

	)

120 
	#BLKGETSIZE64
 
	`_IOR
(0x12,114,
size_t
Ë

	)

126 
	mMNT_FORCE
 = 1,

127 
	#MNT_FORCE
 
MNT_FORCE


	)

128 
	mMNT_DETACH
 = 2,

129 
	#MNT_DETACH
 
MNT_DETACH


	)

130 
	mMNT_EXPIRE
 = 4,

131 
	#MNT_EXPIRE
 
MNT_EXPIRE


	)

132 
	mUMOUNT_NOFOLLOW
 = 8

133 
	#UMOUNT_NOFOLLOW
 
UMOUNT_NOFOLLOW


	)

137 
__BEGIN_DECLS


140 
	$mou¡
 (c⁄° *
__•ecül_fûe
, c⁄° *
__dú
,

141 c⁄° *
__f°y≥
, 
__rwÊag
,

142 c⁄° *
__d©a
Ë
__THROW
;

145 
	$umou¡
 (c⁄° *
__•ecül_fûe
Ë
__THROW
;

148 
	$umou¡2
 (c⁄° *
__•ecül_fûe
, 
__Êags
Ë
__THROW
;

150 
__END_DECLS


	@/usr/include/x86_64-linux-gnu/sys/msg.h

18 #i‚de‡
_SYS_MSG_H


19 
	#_SYS_MSG_H


	)

21 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

27 
	~<sys/ùc.h
>

30 
	~<bôs/msq.h
>

33 
	~<bôs/ty≥s/time_t.h
>

35 #i‚de‡
__pid_t_deföed


36 
__pid_t
 
	tpid_t
;

37 
	#__pid_t_deföed


	)

40 #i‚de‡
__ssize_t_deföed


41 
__ssize_t
 
	tssize_t
;

42 
	#__ssize_t_deföed


	)

48 #ifde‡
__USE_GNU


50 
	smsgbuf


52 
__sysˇŒ_¶⁄g_t
 
	mmty≥
;

53 
	mmãxt
[1];

58 
	g__BEGIN_DECLS


61 #i‚de‡
__USE_TIME_BITS64


62 
	$msg˘l
 (
__msqid
, 
__cmd
, 
msqid_ds
 *
__buf
Ë
__THROW
;

64 #ifde‡
__REDIRECT_NTH


65 
	`__REDIRECT_NTH
 (
msg˘l
,

66 (
__msqid
, 
__cmd
, 
msqid_ds
 *
__buf
),

67 
__msg˘l64
);

69 
	#msg˘l
 
__msg˘l64


	)

74 
	$msggë
 (
key_t
 
__key
, 
__msgÊg
Ë
__THROW
;

80 
ssize_t
 
	`msgrcv
 (
__msqid
, *
__msgp
, 
size_t
 
__msgsz
,

81 
__msgtyp
, 
__msgÊg
);

87 
	`msg¢d
 (
__msqid
, c⁄° *
__msgp
, 
size_t
 
__msgsz
,

88 
__msgÊg
);

90 
__END_DECLS


	@/usr/include/x86_64-linux-gnu/sys/mtio.h

20 #i‚de‡
_SYS_MTIO_H


21 
	#_SYS_MTIO_H
 1

	)

24 
	~<sys/ty≥s.h
>

25 
	~<sys/io˘l.h
>

29 
	smt›


31 
	mmt_›
;

32 
	mmt_cou¡
;

34 
	#_IOT_mt›
 \

35 
	`_IOT
 (
	`_IOTS
 (), 1, _IOTS (), 1, 0, 0)

	)

38 
	#MTRESET
 0

	)

39 
	#MTFSF
 1

	)

41 
	#MTBSF
 2

	)

42 
	#MTFSR
 3

	)

43 
	#MTBSR
 4

	)

44 
	#MTWEOF
 5

	)

45 
	#MTREW
 6

	)

46 
	#MTOFFL
 7

	)

47 
	#MTNOP
 8

	)

48 
	#MTRETEN
 9

	)

49 
	#MTBSFM
 10

	)

50 
	#MTFSFM
 11

	)

51 
	#MTEOM
 12

	)

54 
	#MTERASE
 13

	)

56 
	#MTRAS1
 14

	)

57 
	#MTRAS2
 15

	)

58 
	#MTRAS3
 16

	)

60 
	#MTSETBLK
 20

	)

61 
	#MTSETDENSITY
 21

	)

62 
	#MTSEEK
 22

	)

63 
	#MTTELL
 23

	)

64 
	#MTSETDRVBUFFER
 24

	)

66 
	#MTFSS
 25

	)

67 
	#MTBSS
 26

	)

68 
	#MTWSM
 27

	)

70 
	#MTLOCK
 28

	)

71 
	#MTUNLOCK
 29

	)

72 
	#MTLOAD
 30

	)

73 
	#MTUNLOAD
 31

	)

74 
	#MTCOMPRESSION
 32

	)

75 
	#MTSETPART
 33

	)

76 
	#MTMKPART
 34

	)

80 
	smtgë


82 
	mmt_ty≥
;

83 
	mmt_ªsid
;

88 
	mmt_d§eg
;

89 
	mmt_g°©
;

90 
	mmt_îªg
;

92 
__daddr_t
 
	mmt_fûío
;

93 
__daddr_t
 
	mmt_blkno
;

95 
	#_IOT_mtgë
 \

96 
	`_IOT
 (
	`_IOTS
 (), 7, 0, 0, 0, 0)

	)

101 
	#MT_ISUNKNOWN
 0x01

	)

102 
	#MT_ISQIC02
 0x02

	)

103 
	#MT_ISWT5150
 0x03

	)

104 
	#MT_ISARCHIVE_5945L2
 0x04

	)

105 
	#MT_ISCMSJ500
 0x05

	)

106 
	#MT_ISTDC3610
 0x06

	)

107 
	#MT_ISARCHIVE_VP60I
 0x07

	)

108 
	#MT_ISARCHIVE_2150L
 0x08

	)

109 
	#MT_ISARCHIVE_2060L
 0x09

	)

110 
	#MT_ISARCHIVESC499
 0x0A

	)

111 
	#MT_ISQIC02_ALL_FEATURES
 0x0F

	)

112 
	#MT_ISWT5099EEN24
 0x11

	)

113 
	#MT_ISTEAC_MT2ST
 0x12

	)

115 
	#MT_ISEVEREX_FT40A
 0x32

	)

116 
	#MT_ISDDS1
 0x51

	)

117 
	#MT_ISDDS2
 0x52

	)

118 
	#MT_ISSCSI1
 0x71

	)

119 
	#MT_ISSCSI2
 0x72

	)

123 
	#MT_ISFTAPE_UNKNOWN
 0x800000

	)

124 
	#MT_ISFTAPE_FLAG
 0x800000

	)

126 
	smt_è≥_öfo


128 
	mt_ty≥
;

129 *
	mt_«me
;

132 
	#MT_TAPE_INFO
 \

134 {
MT_ISUNKNOWN
, "UnknownÅype ofÅape device"}, \

135 {
MT_ISQIC02
, "Generic QIC-02Åape streamer"}, \

136 {
MT_ISWT5150
, "Wangtek 5150, QIC-150"}, \

137 {
MT_ISARCHIVE_5945L2
, "Archive 5945L-2"}, \

138 {
MT_ISCMSJ500
, "CMS Jumbo 500"}, \

139 {
MT_ISTDC3610
, "Tandberg TDC 3610, QIC-24"}, \

140 {
MT_ISARCHIVE_VP60I
, "Archive VP60i, QIC-02"}, \

141 {
MT_ISARCHIVE_2150L
, "Archive Viper 2150L"}, \

142 {
MT_ISARCHIVE_2060L
, "Archive Viper 2060L"}, \

143 {
MT_ISARCHIVESC499
, "Archive SC-499 QIC-36 controller"}, \

144 {
MT_ISQIC02_ALL_FEATURES
, "Generic QIC-02Åape,áll features"}, \

145 {
MT_ISWT5099EEN24
, "Wangtek 5099-een24, 60MB"}, \

146 {
MT_ISTEAC_MT2ST
, "Teac MT-2ST 155mb data cassette drive"}, \

147 {
MT_ISEVEREX_FT40A
, "Everex FT40A, QIC-40"}, \

148 {
MT_ISSCSI1
, "Generic SCSI-1Åape"}, \

149 {
MT_ISSCSI2
, "Generic SCSI-2Åape"}, \

150 {0, 
NULL
} \

151 }

	)

156 
	smços


158 
	mmt_blkno
;

160 
	#_IOT_mços
 \

161 
	`_IOT_SIMPLE
 ()

	)

166 
	smtc⁄figöfo


168 
	mmt_ty≥
;

169 
	mifc_ty≥
;

170 
	múqƒ
;

171 
	mdm™r
;

172 
	mp‹t
;

174 
	mdebug
;

176 
	mhave_dís
:1;

177 
	mhave_bsf
:1;

178 
	mhave_f§
:1;

179 
	mhave_b§
:1;

180 
	mhave_eod
:1;

181 
	mhave_£ek
:1;

182 
	mhave_ãŒ
:1;

183 
	mhave_øs1
:1;

184 
	mhave_øs2
:1;

185 
	mhave_øs3
:1;

186 
	mhave_qÁ
:1;

188 
	m∑d1
:5;

189 
	mª£rved
[10];

191 
	#_IOT_mtc⁄figöfo
 \

192 
	`_IOT
 (
	`_IOTS
 (), 2, _IOTS (), 3, _IOTS (), 1Ë

	)

196 
	#MTIOCTOP
 
	`_IOW
('m', 1, 
mt›
Ë

	)

197 
	#MTIOCGET
 
	`_IOR
('m', 2, 
mtgë
Ë

	)

198 
	#MTIOCPOS
 
	`_IOR
('m', 3, 
mços
Ë

	)

202 
	#MTIOCGETCONFIG
 
	`_IOR
('m', 4, 
mtc⁄figöfo
Ë

	)

203 
	#MTIOCSETCONFIG
 
	`_IOW
('m', 5, 
mtc⁄figöfo
Ë

	)

210 
	#GMT_EOF
(
x
Ë((xË& 0x80000000)

	)

211 
	#GMT_BOT
(
x
Ë((xË& 0x40000000)

	)

212 
	#GMT_EOT
(
x
Ë((xË& 0x20000000)

	)

213 
	#GMT_SM
(
x
Ë((xË& 0x10000000Ë

	)

214 
	#GMT_EOD
(
x
Ë((xË& 0x08000000Ë

	)

215 
	#GMT_WR_PROT
(
x
Ë((xË& 0x04000000)

	)

217 
	#GMT_ONLINE
(
x
Ë((xË& 0x01000000)

	)

218 
	#GMT_D_6250
(
x
Ë((xË& 0x00800000)

	)

219 
	#GMT_D_1600
(
x
Ë((xË& 0x00400000)

	)

220 
	#GMT_D_800
(
x
Ë((xË& 0x00200000)

	)

223 
	#GMT_DR_OPEN
(
x
Ë((xË& 0x00040000Ë

	)

225 
	#GMT_IM_REP_EN
(
x
Ë((xË& 0x00010000Ë

	)

230 
	#MT_ST_BLKSIZE_SHIFT
 0

	)

231 
	#MT_ST_BLKSIZE_MASK
 0xffffff

	)

232 
	#MT_ST_DENSITY_SHIFT
 24

	)

233 
	#MT_ST_DENSITY_MASK
 0xff000000

	)

235 
	#MT_ST_SOFTERR_SHIFT
 0

	)

236 
	#MT_ST_SOFTERR_MASK
 0xffff

	)

239 
	#MT_ST_OPTIONS
 0xf0000000

	)

240 
	#MT_ST_BOOLEANS
 0x10000000

	)

241 
	#MT_ST_SETBOOLEANS
 0x30000000

	)

242 
	#MT_ST_CLEARBOOLEANS
 0x40000000

	)

243 
	#MT_ST_WRITE_THRESHOLD
 0x20000000

	)

244 
	#MT_ST_DEF_BLKSIZE
 0x50000000

	)

245 
	#MT_ST_DEF_OPTIONS
 0x60000000

	)

247 
	#MT_ST_BUFFER_WRITES
 0x1

	)

248 
	#MT_ST_ASYNC_WRITES
 0x2

	)

249 
	#MT_ST_READ_AHEAD
 0x4

	)

250 
	#MT_ST_DEBUGGING
 0x8

	)

251 
	#MT_ST_TWO_FM
 0x10

	)

252 
	#MT_ST_FAST_MTEOM
 0x20

	)

253 
	#MT_ST_AUTO_LOCK
 0x40

	)

254 
	#MT_ST_DEF_WRITES
 0x80

	)

255 
	#MT_ST_CAN_BSR
 0x100

	)

256 
	#MT_ST_NO_BLKLIMS
 0x200

	)

257 
	#MT_ST_CAN_PARTITIONS
 0x400

	)

258 
	#MT_ST_SCSI2LOGICAL
 0x800

	)

261 
	#MT_ST_CLEAR_DEFAULT
 0xfffff

	)

262 
	#MT_ST_DEF_DENSITY
 (
MT_ST_DEF_OPTIONS
 | 0x100000)

	)

263 
	#MT_ST_DEF_COMPRESSION
 (
MT_ST_DEF_OPTIONS
 | 0x200000)

	)

264 
	#MT_ST_DEF_DRVBUFFER
 (
MT_ST_DEF_OPTIONS
 | 0x300000)

	)

267 
	#MT_ST_HPLOADER_OFFSET
 10000

	)

271 #i‚de‡
DEFTAPE


272 
	#DEFTAPE
 "/dev/è≥"

	)

	@/usr/include/x86_64-linux-gnu/sys/param.h

19 #i‚de‡
_SYS_PARAM_H


20 
	#_SYS_PARAM_H
 1

	)

22 
	#__√ed_NULL


	)

23 
	~<°ddef.h
>

25 
	~<sys/ty≥s.h
>

26 
	~<limôs.h
>

27 
	~<ídün.h
>

28 
	~<sig«l.h
>

31 
	~<bôs/∑øm.h
>

36 
	#NBBY
 
CHAR_BIT


	)

38 #i‡!
deföed
 
NGROUPS
 && deföed 
NGROUPS_MAX


39 
	#NGROUPS
 
NGROUPS_MAX


	)

41 #i‡!
deföed
 
MAXSYMLINKS
 && deföed 
SYMLOOP_MAX


42 
	#MAXSYMLINKS
 
SYMLOOP_MAX


	)

44 #i‡!
deföed
 
CANBSIZ
 && deföed 
MAX_CANON


45 
	#CANBSIZ
 
MAX_CANON


	)

47 #i‡!
deföed
 
MAXPATHLEN
 && deföed 
PATH_MAX


48 
	#MAXPATHLEN
 
PATH_MAX


	)

50 #i‡!
deföed
 
NOFILE
 && deföed 
OPEN_MAX


51 
	#NOFILE
 
OPEN_MAX


	)

53 #i‡!
deföed
 
MAXHOSTNAMELEN
 && deföed 
HOST_NAME_MAX


54 
	#MAXHOSTNAMELEN
 
HOST_NAME_MAX


	)

56 #i‚de‡
NCARGS


57 #ifde‡
ARG_MAX


58 
	#NCARGS
 
ARG_MAX


	)

62 
	#NCARGS
 
INT_MAX


	)

68 #i‚de‡
NOGROUP


69 
	#NOGROUP
 65535

	)

71 #i‚de‡
NODEV


72 
	#NODEV
 ((
dev_t
Ë-1Ë

	)

77 #i‚de‡
DEV_BSIZE


78 
	#DEV_BSIZE
 512

	)

83 
	#£tbô
(
a
,
i
Ë(◊)[(i)/
NBBY
] |1<<((i)%NBBY))

	)

84 
	#˛rbô
(
a
,
i
Ë(◊)[(i)/
NBBY
] &~(1<<((i)%NBBY)))

	)

85 
	#is£t
(
a
,
i
Ë(◊)[(i)/
NBBY
] & (1<<((i)%NBBY)))

	)

86 
	#is˛r
(
a
,
i
Ë((◊)[(i)/
NBBY
] & (1<<((i)%NBBY))Ë=0)

	)

89 #i‚de‡
howm™y


90 
	#howm™y
(
x
, 
y
Ë(((xË+ ((yË- 1)Ë/ (y))

	)

92 #ifde‡
__GNUC__


93 
	#roundup
(
x
, 
y
Ë(
	`__buûtö_c⁄°™t_p
 (yË&& 
	`powîof2
 (y) \

94 ? (((
x
Ë+ (
y
) - 1) & ~((y) - 1)) \

95 : ((((
x
Ë+ ((
y
Ë- 1)Ë/ (y)Ë* (y)))

	)

97 
	#roundup
(
x
, 
y
Ë((((xË+ ((yË- 1)Ë/ (y)Ë* (y))

	)

99 
	#powîof2
(
x
Ë((((xË- 1Ë& (x)Ë=0)

	)

102 
	#MIN
(
a
,
b
Ë((◊)<(b))?◊):(b))

	)

103 
	#MAX
(
a
,
b
Ë((◊)>(b))?◊):(b))

	)

	@/usr/include/x86_64-linux-gnu/sys/pci.h

18 #i‚de‡
_SYS_PCI_H


19 
	#_SYS_PCI_H
 1

	)

22 
	~<löux/pci.h
>

	@/usr/include/x86_64-linux-gnu/sys/perm.h

18 #i‚de‡
_SYS_PERM_H


20 
	#_SYS_PERM_H
 1

	)

21 
	~<„©uªs.h
>

23 
__BEGIN_DECLS


26 
	$i›îm
 (
__‰om
, 
__num
,

27 
__tu∫_⁄
Ë
__THROW
;

31 
	$i›l
 (
__Àvñ
Ë
__THROW
;

33 
__END_DECLS


	@/usr/include/x86_64-linux-gnu/sys/personality.h

20 #i‚de‡
_SYS_PERSONALITY_H


21 
	#_SYS_PERSONALITY_H
 1

	)

23 
	~<„©uªs.h
>

29 
	mUNAME26
 = 0x0020000,

30 
	mADDR_NO_RANDOMIZE
 = 0x0040000,

31 
	mFDPIC_FUNCPTRS
 = 0x0080000,

32 
	mMMAP_PAGE_ZERO
 = 0x0100000,

33 
	mADDR_COMPAT_LAYOUT
 = 0x0200000,

34 
	mREAD_IMPLIES_EXEC
 = 0x0400000,

35 
	mADDR_LIMIT_32BIT
 = 0x0800000,

36 
	mSHORT_INODE
 = 0x1000000,

37 
	mWHOLE_SECONDS
 = 0x2000000,

38 
	mSTICKY_TIMEOUTS
 = 0x4000000,

39 
	mADDR_LIMIT_3GB
 = 0x8000000

48 
	mPER_LINUX
 = 0x0000,

49 
	mPER_LINUX_32BIT
 = 0x0000 | 
ADDR_LIMIT_32BIT
,

50 
	mPER_LINUX_FDPIC
 = 0x0000 | 
FDPIC_FUNCPTRS
,

51 
	mPER_SVR4
 = 0x0001 | 
STICKY_TIMEOUTS
 | 
MMAP_PAGE_ZERO
,

52 
	mPER_SVR3
 = 0x0002 | 
STICKY_TIMEOUTS
 | 
SHORT_INODE
,

53 
	mPER_SCOSVR3
 = 0x0003 | 
STICKY_TIMEOUTS
 | 
WHOLE_SECONDS
 | 
SHORT_INODE
,

54 
	mPER_OSR5
 = 0x0003 | 
STICKY_TIMEOUTS
 | 
WHOLE_SECONDS
,

55 
	mPER_WYSEV386
 = 0x0004 | 
STICKY_TIMEOUTS
 | 
SHORT_INODE
,

56 
	mPER_ISCR4
 = 0x0005 | 
STICKY_TIMEOUTS
,

57 
	mPER_BSD
 = 0x0006,

58 
	mPER_SUNOS
 = 0x0006 | 
STICKY_TIMEOUTS
,

59 
	mPER_XENIX
 = 0x0007 | 
STICKY_TIMEOUTS
 | 
SHORT_INODE
,

60 
	mPER_LINUX32
 = 0x0008,

61 
	mPER_LINUX32_3GB
 = 0x0008 | 
ADDR_LIMIT_3GB
,

62 
	mPER_IRIX32
 = 0x0009 | 
STICKY_TIMEOUTS
,

63 
	mPER_IRIXN32
 = 0x000®| 
STICKY_TIMEOUTS
,

64 
	mPER_IRIX64
 = 0x000b | 
STICKY_TIMEOUTS
,

65 
	mPER_RISCOS
 = 0x000c,

66 
	mPER_SOLARIS
 = 0x000d | 
STICKY_TIMEOUTS
,

67 
	mPER_UW7
 = 0x000ê| 
STICKY_TIMEOUTS
 | 
MMAP_PAGE_ZERO
,

68 
	mPER_OSF4
 = 0x000f,

69 
	mPER_HPUX
 = 0x0010,

70 
	mPER_MASK
 = 0x00ff,

73 
__BEGIN_DECLS


76 
	$≥rs⁄Æôy
 (
__≥rs⁄a
Ë
__THROW
;

78 
__END_DECLS


	@/usr/include/x86_64-linux-gnu/sys/platform/x86.h

19 #i‚de‡
_SYS_PLATFORM_X86_H


20 
	#_SYS_PLATFORM_X86_H


	)

22 
	~<„©uªs.h
>

23 
	~<°dboﬁ.h
>

24 
	~<bôs/∂©f‹m/x86.h
>

26 
__BEGIN_DECLS


29 c⁄° 
˝uid_„©uª
 *
	$__x86_gë_˝uid_„©uª_Àaf
 ()

30 
	`__©åibuã__
 ((
puª
));

32 
__ölöe__
 
_Boﬁ


33 
	$x86_˝u_¥e£¡
 (
__ödex
)

35 c⁄° 
˝uid_„©uª
 *
__±r
 = 
__x86_gë_˝uid_„©uª_Àaf


36 (
__ödex
 / (8 *  () * 4));

37 
__ªg


38 
__ödex
 & (8 *  () * 4 - 1);

39 
__bô
 = 
__ªg
 & (8 *  () - 1);

40 
__ªg
 /= 8 *  ();

42  
__±r
->
˝uid_¨øy
[
__ªg
] & (1 << 
__bô
);

43 
	}
}

45 
__ölöe__
 
_Boﬁ


46 
	$x86_˝u_a˘ive
 (
__ödex
)

48 c⁄° 
˝uid_„©uª
 *
__±r
 = 
__x86_gë_˝uid_„©uª_Àaf


49 (
__ödex
 / (8 *  () * 4));

50 
__ªg


51 
__ödex
 & (8 *  () * 4 - 1);

52 
__bô
 = 
__ªg
 & (8 *  () - 1);

53 
__ªg
 /= 8 *  ();

55  
__±r
->
a˘ive_¨øy
[
__ªg
] & (1 << 
__bô
);

56 
	}
}

59 
	#CPU_FEATURE_PRESENT
(
«me
Ë
	`x86_˝u_¥e£¡
 (
x86_˝u_
##«me)

	)

61 
	#CPU_FEATURE_ACTIVE
(
«me
Ë
	`x86_˝u_a˘ive
 (
x86_˝u_
##«me)

	)

63 
	g__END_DECLS


	@/usr/include/x86_64-linux-gnu/sys/poll.h

19 #i‚def 
_SYS_POLL_H


20 
	#_SYS_POLL_H
 1

	)

22 
	~<„©uªs.h
>

25 
	~<bôs/pﬁl.h
>

26 #ifde‡
__USE_GNU


27 
	~<bôs/ty≥s/__sig£t_t.h
>

28 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

33 
	tnfds_t
;

36 
	spﬁlfd


38 
	mfd
;

39 
	mevíts
;

40 
	mªvíts
;

44 
__BEGIN_DECLS


54 
	$pﬁl
 (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
, 
__timeout
)

55 
	`__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 1, 2);

57 #ifde‡
__USE_GNU


64 
	$µﬁl
 (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
,

65 c⁄° 
time•ec
 *
__timeout
,

66 c⁄° 
__sig£t_t
 *
__ss
)

67 
	`__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 1, 2);

69 #ifde‡
__USE_TIME_BITS64


70 #ifde‡
__REDIRECT


71 
	`__REDIRECT
 (
µﬁl
, (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
,

72 c⁄° 
time•ec
 *
__timeout
,

73 c⁄° 
__sig£t_t
 *
__ss
),

74 
__µﬁl64
)

75 
	`__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 1, 2);

77 
	#µﬁl
 
__µﬁl64


	)

82 
__END_DECLS


86 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


87 
	~<bôs/pﬁl2.h
>

	@/usr/include/x86_64-linux-gnu/sys/prctl.h

18 #i‚de‡
_SYS_PRCTL_H


19 
	#_SYS_PRCTL_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<löux/¥˘l.h
>

28 #i‚de‡
PR_MTE_TCF_SHIFT


29 
	#PR_MTE_TCF_SHIFT
 1

	)

30 
	#PR_MTE_TCF_NONE
 (0UL << 
PR_MTE_TCF_SHIFT
)

	)

31 
	#PR_MTE_TCF_SYNC
 (1UL << 
PR_MTE_TCF_SHIFT
)

	)

32 
	#PR_MTE_TCF_ASYNC
 (2UL << 
PR_MTE_TCF_SHIFT
)

	)

33 
	#PR_MTE_TCF_MASK
 (3UL << 
PR_MTE_TCF_SHIFT
)

	)

34 
	#PR_MTE_TAG_SHIFT
 3

	)

35 
	#PR_MTE_TAG_MASK
 (0xffffUL << 
PR_MTE_TAG_SHIFT
)

	)

38 
	g__BEGIN_DECLS


41 #i‚de‡
__USE_TIME_BITS64


42 
	$¥˘l
 (
__›ti⁄
, ...Ë
__THROW
;

44 #ifde‡
__REDIRECT


45 
	`__REDIRECT_NTH
 (
¥˘l
, (
__›ti⁄
, ...), 
__¥˘l_time64
);

47 
	$__¥˘l_time64
 (
__›ti⁄
,
d
 ...Ë
__THROW
;

48 
	#io˘l
 
__¥˘l_time64


	)

53 
__END_DECLS


	@/usr/include/x86_64-linux-gnu/sys/procfs.h

20 #i‚de‡
_SYS_PROCFS_H


21 
	#_SYS_PROCFS_H
 1

	)

32 
	~<„©uªs.h
>

33 
	~<sys/time.h
>

34 
	~<sys/ty≥s.h
>

35 
	~<sys/u£r.h
>

40 
	~<bôs/¥ocfs.h
>

44 
	~<bôs/¥ocfs-id.h
>

46 
__BEGIN_DECLS


49 
	sñf_sigöfo


51 
	msi_signo
;

52 
	msi_code
;

53 
	msi_î∫o
;

63 
	sñf_¥°©us


65 
ñf_sigöfo
 
	m¥_öfo
;

66 
	m¥_cursig
;

67 
	m¥_sig≥nd
;

68 
	m¥_sighﬁd
;

69 
__pid_t
 
	m¥_pid
;

70 
__pid_t
 
	m¥_µid
;

71 
__pid_t
 
	m¥_pgΩ
;

72 
__pid_t
 
	m¥_sid
;

73 
timevÆ
 
	m¥_utime
;

74 
timevÆ
 
	m¥_°ime
;

75 
timevÆ
 
	m¥_cutime
;

76 
timevÆ
 
	m¥_c°ime
;

77 
ñf_gªg£t_t
 
	m¥_ªg
;

78 
	m¥_ÂvÆid
;

82 
	#ELF_PRARGSZ
 (80Ë

	)

84 
	sñf_¥psöfo


86 
	m¥_°©e
;

87 
	m¥_¢ame
;

88 
	m¥_zomb
;

89 
	m¥_ni˚
;

90 
	m¥_Êag
;

91 
__¥_uid_t
 
	m¥_uid
;

92 
__¥_gid_t
 
	m¥_gid
;

93 
	m¥_pid
, 
	m¥_µid
, 
	m¥_pgΩ
, 
	m¥_sid
;

95 
	m¥_‚ame
[16];

96 
	m¥_pßrgs
[
ELF_PRARGSZ
];

104 *
	tpßddr_t
;

106 
	~<bôs/¥ocfs-¥ªg£t.h
>

109 
__¥gªg£t_t
 
	t¥gªg£t_t
;

110 
__¥Âªg£t_t
 
	t¥Âªg£t_t
;

114 
__pid_t
 
	tlwpid_t
;

117 
ñf_¥°©us
 
	t¥°©us_t
;

118 
ñf_¥psöfo
 
	t¥psöfo_t
;

120 
	g__END_DECLS


124 
	~<bôs/¥ocfs-exåa.h
>

	@/usr/include/x86_64-linux-gnu/sys/profil.h

18 #i‚de‡
_PROFIL_H


19 
	#_PROFIL_H
 1

	)

21 
	~<„©uªs.h
>

23 
	~<sys/time.h
>

24 
	~<sys/ty≥s.h
>

37 
	s¥of


39 *
	m¥_ba£
;

40 
size_t
 
	m¥_size
;

41 
size_t
 
	m¥_off
;

42 
	m¥_sˇÀ
;

47 
	mPROF_USHORT
 = 0,

48 
	mPROF_UINT
 = 1 << 0,

49 
	mPROF_FAST
 = 1 << 1

53 
__BEGIN_DECLS


55 
	$•rofû
 (
¥of
 *
__¥oÂ
, 
__¥of˙t
,

56 
timevÆ
 *
__tvp
, 
__Êags
Ë
__THROW
;

58 
__END_DECLS


	@/usr/include/x86_64-linux-gnu/sys/ptrace.h

20 #i‚de‡
_SYS_PTRACE_H


21 
	#_SYS_PTRACE_H
 1

	)

23 
	~<„©uªs.h
>

24 
	~<bôs/ty≥s.h
>

26 
__BEGIN_DECLS


29 
	e__±ø˚_ªque°


34 
	mPTRACE_TRACEME
 = 0,

35 
	#PT_TRACE_ME
 
PTRACE_TRACEME


	)

38 
	mPTRACE_PEEKTEXT
 = 1,

39 
	#PT_READ_I
 
PTRACE_PEEKTEXT


	)

42 
	mPTRACE_PEEKDATA
 = 2,

43 
	#PT_READ_D
 
PTRACE_PEEKDATA


	)

46 
	mPTRACE_PEEKUSER
 = 3,

47 
	#PT_READ_U
 
PTRACE_PEEKUSER


	)

50 
	mPTRACE_POKETEXT
 = 4,

51 
	#PT_WRITE_I
 
PTRACE_POKETEXT


	)

54 
	mPTRACE_POKEDATA
 = 5,

55 
	#PT_WRITE_D
 
PTRACE_POKEDATA


	)

58 
	mPTRACE_POKEUSER
 = 6,

59 
	#PT_WRITE_U
 
PTRACE_POKEUSER


	)

62 
	mPTRACE_CONT
 = 7,

63 
	#PT_CONTINUE
 
PTRACE_CONT


	)

66 
	mPTRACE_KILL
 = 8,

67 
	#PT_KILL
 
PTRACE_KILL


	)

70 
	mPTRACE_SINGLESTEP
 = 9,

71 
	#PT_STEP
 
PTRACE_SINGLESTEP


	)

74 
	mPTRACE_GETREGS
 = 12,

75 
	#PT_GETREGS
 
PTRACE_GETREGS


	)

78 
	mPTRACE_SETREGS
 = 13,

79 
	#PT_SETREGS
 
PTRACE_SETREGS


	)

82 
	mPTRACE_GETFPREGS
 = 14,

83 
	#PT_GETFPREGS
 
PTRACE_GETFPREGS


	)

86 
	mPTRACE_SETFPREGS
 = 15,

87 
	#PT_SETFPREGS
 
PTRACE_SETFPREGS


	)

90 
	mPTRACE_ATTACH
 = 16,

91 
	#PT_ATTACH
 
PTRACE_ATTACH


	)

94 
	mPTRACE_DETACH
 = 17,

95 
	#PT_DETACH
 
PTRACE_DETACH


	)

98 
	mPTRACE_GETFPXREGS
 = 18,

99 
	#PT_GETFPXREGS
 
PTRACE_GETFPXREGS


	)

102 
	mPTRACE_SETFPXREGS
 = 19,

103 
	#PT_SETFPXREGS
 
PTRACE_SETFPXREGS


	)

106 
	mPTRACE_SYSCALL
 = 24,

107 
	#PT_SYSCALL
 
PTRACE_SYSCALL


	)

110 
	mPTRACE_GET_THREAD_AREA
 = 25,

111 
	#PT_GET_THREAD_AREA
 
PTRACE_GET_THREAD_AREA


	)

114 
	mPTRACE_SET_THREAD_AREA
 = 26,

115 
	#PT_SET_THREAD_AREA
 
PTRACE_SET_THREAD_AREA


	)

117 #ifde‡
__x86_64__


119 
	mPTRACE_ARCH_PRCTL
 = 30,

120 
	#PT_ARCH_PRCTL
 
PTRACE_ARCH_PRCTL


	)

124 
	mPTRACE_SYSEMU
 = 31,

125 
	#PT_SYSEMU
 
PTRACE_SYSEMU


	)

128 
	mPTRACE_SYSEMU_SINGLESTEP
 = 32,

129 
	#PT_SYSEMU_SINGLESTEP
 
PTRACE_SYSEMU_SINGLESTEP


	)

132 
	mPTRACE_SINGLEBLOCK
 = 33,

133 
	#PT_STEPBLOCK
 
PTRACE_SINGLEBLOCK


	)

136 
	mPTRACE_SETOPTIONS
 = 0x4200,

137 
	#PT_SETOPTIONS
 
PTRACE_SETOPTIONS


	)

140 
	mPTRACE_GETEVENTMSG
 = 0x4201,

141 
	#PT_GETEVENTMSG
 
PTRACE_GETEVENTMSG


	)

144 
	mPTRACE_GETSIGINFO
 = 0x4202,

145 
	#PT_GETSIGINFO
 
PTRACE_GETSIGINFO


	)

148 
	mPTRACE_SETSIGINFO
 = 0x4203,

149 
	#PT_SETSIGINFO
 
PTRACE_SETSIGINFO


	)

152 
	mPTRACE_GETREGSET
 = 0x4204,

153 
	#PTRACE_GETREGSET
 
PTRACE_GETREGSET


	)

156 
	mPTRACE_SETREGSET
 = 0x4205,

157 
	#PTRACE_SETREGSET
 
PTRACE_SETREGSET


	)

161 
	mPTRACE_SEIZE
 = 0x4206,

162 
	#PTRACE_SEIZE
 
PTRACE_SEIZE


	)

165 
	mPTRACE_INTERRUPT
 = 0x4207,

166 
	#PTRACE_INTERRUPT
 
PTRACE_INTERRUPT


	)

169 
	mPTRACE_LISTEN
 = 0x4208,

170 
	#PTRACE_LISTEN
 
PTRACE_LISTEN


	)

173 
	mPTRACE_PEEKSIGINFO
 = 0x4209,

174 
	#PTRACE_PEEKSIGINFO
 
PTRACE_PEEKSIGINFO


	)

177 
	mPTRACE_GETSIGMASK
 = 0x420a,

178 
	#PTRACE_GETSIGMASK
 
PTRACE_GETSIGMASK


	)

181 
	mPTRACE_SETSIGMASK
 = 0x420b,

182 
	#PTRACE_SETSIGMASK
 
PTRACE_SETSIGMASK


	)

185 
	mPTRACE_SECCOMP_GET_FILTER
 = 0x420c,

186 
	#PTRACE_SECCOMP_GET_FILTER
 
PTRACE_SECCOMP_GET_FILTER


	)

189 
	mPTRACE_SECCOMP_GET_METADATA
 = 0x420d,

190 
	#PTRACE_SECCOMP_GET_METADATA
 
PTRACE_SECCOMP_GET_METADATA


	)

193 
	mPTRACE_GET_SYSCALL_INFO
 = 0x420e,

194 
	#PTRACE_GET_SYSCALL_INFO
 
PTRACE_GET_SYSCALL_INFO


	)

197 
	mPTRACE_GET_RSEQ_CONFIGURATION
 = 0x420f

198 
	#PTRACE_GET_RSEQ_CONFIGURATION
 
PTRACE_GET_RSEQ_CONFIGURATION


	)

202 
	~<bôs/±ø˚-sh¨ed.h
>

204 
	g__END_DECLS


	@/usr/include/x86_64-linux-gnu/sys/queue.h

32 #i‚def 
_SYS_QUEUE_H_


33 
	#_SYS_QUEUE_H_


	)

84 
	#LIST_HEAD
(
«me
, 
ty≥
) \

85 
	s«me
 { \

86 
ty≥
 *
lh_fú°
; \

87 }

	)

89 
	#LIST_HEAD_INITIALIZER
(
hód
) \

90 { 
NULL
 }

	)

92 
	#LIST_ENTRY
(
ty≥
) \

94 
ty≥
 *
À_√xt
; \

95 
ty≥
 **
À_¥ev
; \

96 }

	)

101 
	#LIST_INIT
(
hód
) do { \

102 (
hód
)->
lh_fú°
 = 
NULL
; \

103 }  0)

	)

105 
	#LIST_INSERT_AFTER
(
li°ñm
, 
ñm
, 
fõld
) do { \

106 i‡(((
ñm
)->
fõld
.
À_√xt
 = (
li°ñm
)->fõld.À_√xtË!
NULL
) \

107 (
li°ñm
)->
fõld
.
À_√xt
->fõld.
À_¥ev
 = \

108 &(
ñm
)->
fõld
.
À_√xt
; \

109 (
li°ñm
)->
fõld
.
À_√xt
 = (
ñm
); \

110 (
ñm
)->
fõld
.
À_¥ev
 = &(
li°ñm
)->fõld.
À_√xt
; \

111 }  0)

	)

113 
	#LIST_INSERT_BEFORE
(
li°ñm
, 
ñm
, 
fõld
) do { \

114 (
ñm
)->
fõld
.
À_¥ev
 = (
li°ñm
)->field.le_prev; \

115 (
ñm
)->
fõld
.
À_√xt
 = (
li°ñm
); \

116 *(
li°ñm
)->
fõld
.
À_¥ev
 = (
ñm
); \

117 (
li°ñm
)->
fõld
.
À_¥ev
 = &(
ñm
)->fõld.
À_√xt
; \

118 }  0)

	)

120 
	#LIST_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
) do { \

121 i‡(((
ñm
)->
fõld
.
À_√xt
 = (
hód
)->
lh_fú°
Ë!
NULL
) \

122 (
hód
)->
lh_fú°
->
fõld
.
À_¥ev
 = &(
ñm
)->fõld.
À_√xt
;\

123 (
hód
)->
lh_fú°
 = (
ñm
); \

124 (
ñm
)->
fõld
.
À_¥ev
 = &(
hód
)->
lh_fú°
; \

125 }  0)

	)

127 
	#LIST_REMOVE
(
ñm
, 
fõld
) do { \

128 i‡((
ñm
)->
fõld
.
À_√xt
 !
NULL
) \

129 (
ñm
)->
fõld
.
À_√xt
->fõld.
À_¥ev
 = \

130 (
ñm
)->
fõld
.
À_¥ev
; \

131 *(
ñm
)->
fõld
.
À_¥ev
 = (ñm)->fõld.
À_√xt
; \

132 }  0)

	)

134 
	#LIST_FOREACH
(
v¨
, 
hód
, 
fõld
) \

135 (
v¨
Ë((
hód
)->
lh_fú°
); \

136 (
v¨
); \

137 (
v¨
Ë((v¨)->
fõld
.
À_√xt
))

	)

142 
	#LIST_EMPTY
(
hód
Ë((hód)->
lh_fú°
 =
NULL
)

	)

143 
	#LIST_FIRST
(
hód
Ë((hód)->
lh_fú°
)

	)

144 
	#LIST_NEXT
(
ñm
, 
fõld
Ë(”lm)->fõld.
À_√xt
)

	)

150 
	#SLIST_HEAD
(
«me
, 
ty≥
) \

151 
	s«me
 { \

152 
ty≥
 *
¶h_fú°
; \

153 }

	)

155 
	#SLIST_HEAD_INITIALIZER
(
hód
) \

156 { 
NULL
 }

	)

158 
	#SLIST_ENTRY
(
ty≥
) \

160 
ty≥
 *
¶e_√xt
; \

161 }

	)

166 
	#SLIST_INIT
(
hód
) do { \

167 (
hód
)->
¶h_fú°
 = 
NULL
; \

168 }  0)

	)

170 
	#SLIST_INSERT_AFTER
(
¶i°ñm
, 
ñm
, 
fõld
) do { \

171 (
ñm
)->
fõld
.
¶e_√xt
 = (
¶i°ñm
)->field.sle_next; \

172 (
¶i°ñm
)->
fõld
.
¶e_√xt
 = (
ñm
); \

173 }  0)

	)

175 
	#SLIST_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
) do { \

176 (
ñm
)->
fõld
.
¶e_√xt
 = (
hód
)->
¶h_fú°
; \

177 (
hód
)->
¶h_fú°
 = (
ñm
); \

178 }  0)

	)

180 
	#SLIST_REMOVE_HEAD
(
hód
, 
fõld
) do { \

181 (
hód
)->
¶h_fú°
 = (hód)->¶h_fú°->
fõld
.
¶e_√xt
; \

182 }  0)

	)

184 
	#SLIST_REMOVE
(
hód
, 
ñm
, 
ty≥
, 
fõld
) do { \

185 i‡((
hód
)->
¶h_fú°
 =(
ñm
)) { \

186 
	`SLIST_REMOVE_HEAD
((
hód
), 
fõld
); \

189 
ty≥
 *
cuªlm
 = (
hód
)->
¶h_fú°
; \

190 
cuªlm
->
fõld
.
¶e_√xt
 !(
ñm
)) \

191 
cuªlm
 = cuªlm->
fõld
.
¶e_√xt
; \

192 
cuªlm
->
fõld
.
¶e_√xt
 = \

193 
cuªlm
->
fõld
.
¶e_√xt
->field.sle_next; \

195 }  0)

	)

197 
	#SLIST_FOREACH
(
v¨
, 
hód
, 
fõld
) \

198 (
v¨
Ë(
hód
)->
¶h_fú°
; (v¨); (v¨Ë(v¨)->
fõld
.
¶e_√xt
)

	)

203 
	#SLIST_EMPTY
(
hód
Ë((hód)->
¶h_fú°
 =
NULL
)

	)

204 
	#SLIST_FIRST
(
hód
Ë((hód)->
¶h_fú°
)

	)

205 
	#SLIST_NEXT
(
ñm
, 
fõld
Ë(”lm)->fõld.
¶e_√xt
)

	)

211 
	#STAILQ_HEAD
(
«me
, 
ty≥
) \

212 
	s«me
 { \

213 
ty≥
 *
°qh_fú°
; \

214 
ty≥
 **
°qh_œ°
; \

215 }

	)

217 
	#STAILQ_HEAD_INITIALIZER
(
hód
) \

218 { 
NULL
, &(
hód
).
°qh_fú°
 }

	)

220 
	#STAILQ_ENTRY
(
ty≥
) \

222 
ty≥
 *
°qe_√xt
; \

223 }

	)

228 
	#STAILQ_INIT
(
hód
) do { \

229 (
hód
)->
°qh_fú°
 = 
NULL
; \

230 (
hód
)->
°qh_œ°
 = &(hód)->
°qh_fú°
; \

231 }  0)

	)

233 
	#STAILQ_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
) do { \

234 i‡(((
ñm
)->
fõld
.
°qe_√xt
 = (
hód
)->
°qh_fú°
Ë=
NULL
) \

235 (
hód
)->
°qh_œ°
 = &(
ñm
)->
fõld
.
°qe_√xt
; \

236 (
hód
)->
°qh_fú°
 = (
ñm
); \

237 }  0)

	)

239 
	#STAILQ_INSERT_TAIL
(
hód
, 
ñm
, 
fõld
) do { \

240 (
ñm
)->
fõld
.
°qe_√xt
 = 
NULL
; \

241 *(
hód
)->
°qh_œ°
 = (
ñm
); \

242 (
hód
)->
°qh_œ°
 = &(
ñm
)->
fõld
.
°qe_√xt
; \

243 }  0)

	)

245 
	#STAILQ_INSERT_AFTER
(
hód
, 
li°ñm
, 
ñm
, 
fõld
) do { \

246 i‡(((
ñm
)->
fõld
.
°qe_√xt
 = (
li°ñm
)->fõld.°qe_√xtË=
NULL
)\

247 (
hód
)->
°qh_œ°
 = &(
ñm
)->
fõld
.
°qe_√xt
; \

248 (
li°ñm
)->
fõld
.
°qe_√xt
 = (
ñm
); \

249 }  0)

	)

251 
	#STAILQ_REMOVE_HEAD
(
hód
, 
fõld
) do { \

252 i‡(((
hód
)->
°qh_fú°
 = (hód)->°qh_fú°->
fõld
.
°qe_√xt
Ë=
NULL
) \

253 (
hód
)->
°qh_œ°
 = &(hód)->
°qh_fú°
; \

254 }  0)

	)

256 
	#STAILQ_REMOVE
(
hód
, 
ñm
, 
ty≥
, 
fõld
) do { \

257 i‡((
hód
)->
°qh_fú°
 =(
ñm
)) { \

258 
	`STAILQ_REMOVE_HEAD
((
hód
), 
fõld
); \

260 
ty≥
 *
cuªlm
 = (
hód
)->
°qh_fú°
; \

261 
cuªlm
->
fõld
.
°qe_√xt
 !(
ñm
)) \

262 
cuªlm
 = cuªlm->
fõld
.
°qe_√xt
; \

263 i‡((
cuªlm
->
fõld
.
°qe_√xt
 = \

264 
cuªlm
->
fõld
.
°qe_√xt
->fõld.°qe_√xtË=
NULL
) \

265 (
hód
)->
°qh_œ°
 = &(
cuªlm
)->
fõld
.
°qe_√xt
; \

267 }  0)

	)

269 
	#STAILQ_FOREACH
(
v¨
, 
hód
, 
fõld
) \

270 (
v¨
Ë((
hód
)->
°qh_fú°
); \

271 (
v¨
); \

272 (
v¨
Ë((v¨)->
fõld
.
°qe_√xt
))

	)

274 
	#STAILQ_CONCAT
(
hód1
, 
hód2
) do { \

275 i‡(!
	`STAILQ_EMPTY
((
hód2
))) { \

276 *(
hód1
)->
°qh_œ°
 = (
hód2
)->
°qh_fú°
; \

277 (
hód1
)->
°qh_œ°
 = (
hód2
)->stqh_last; \

278 
	`STAILQ_INIT
((
hód2
)); \

280 }  0)

	)

285 
	#STAILQ_EMPTY
(
hód
Ë((hód)->
°qh_fú°
 =
NULL
)

	)

286 
	#STAILQ_FIRST
(
hód
Ë((hód)->
°qh_fú°
)

	)

287 
	#STAILQ_NEXT
(
ñm
, 
fõld
Ë(”lm)->fõld.
°qe_√xt
)

	)

293 
	#SIMPLEQ_HEAD
(
«me
, 
ty≥
) \

294 
	s«me
 { \

295 
ty≥
 *
sqh_fú°
; \

296 
ty≥
 **
sqh_œ°
; \

297 }

	)

299 
	#SIMPLEQ_HEAD_INITIALIZER
(
hód
) \

300 { 
NULL
, &(
hód
).
sqh_fú°
 }

	)

302 
	#SIMPLEQ_ENTRY
(
ty≥
) \

304 
ty≥
 *
sqe_√xt
; \

305 }

	)

310 
	#SIMPLEQ_INIT
(
hód
) do { \

311 (
hód
)->
sqh_fú°
 = 
NULL
; \

312 (
hód
)->
sqh_œ°
 = &(hód)->
sqh_fú°
; \

313 }  0)

	)

315 
	#SIMPLEQ_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
) do { \

316 i‡(((
ñm
)->
fõld
.
sqe_√xt
 = (
hód
)->
sqh_fú°
Ë=
NULL
) \

317 (
hód
)->
sqh_œ°
 = &(
ñm
)->
fõld
.
sqe_√xt
; \

318 (
hód
)->
sqh_fú°
 = (
ñm
); \

319 }  0)

	)

321 
	#SIMPLEQ_INSERT_TAIL
(
hód
, 
ñm
, 
fõld
) do { \

322 (
ñm
)->
fõld
.
sqe_√xt
 = 
NULL
; \

323 *(
hód
)->
sqh_œ°
 = (
ñm
); \

324 (
hód
)->
sqh_œ°
 = &(
ñm
)->
fõld
.
sqe_√xt
; \

325 }  0)

	)

327 
	#SIMPLEQ_INSERT_AFTER
(
hód
, 
li°ñm
, 
ñm
, 
fõld
) do { \

328 i‡(((
ñm
)->
fõld
.
sqe_√xt
 = (
li°ñm
)->fõld.sqe_√xtË=
NULL
)\

329 (
hód
)->
sqh_œ°
 = &(
ñm
)->
fõld
.
sqe_√xt
; \

330 (
li°ñm
)->
fõld
.
sqe_√xt
 = (
ñm
); \

331 }  0)

	)

333 
	#SIMPLEQ_REMOVE_HEAD
(
hód
, 
fõld
) do { \

334 i‡(((
hód
)->
sqh_fú°
 = (hód)->sqh_fú°->
fõld
.
sqe_√xt
Ë=
NULL
) \

335 (
hód
)->
sqh_œ°
 = &(hód)->
sqh_fú°
; \

336 }  0)

	)

338 
	#SIMPLEQ_REMOVE
(
hód
, 
ñm
, 
ty≥
, 
fõld
) do { \

339 i‡((
hód
)->
sqh_fú°
 =(
ñm
)) { \

340 
	`SIMPLEQ_REMOVE_HEAD
((
hód
), 
fõld
); \

342 
ty≥
 *
cuªlm
 = (
hód
)->
sqh_fú°
; \

343 
cuªlm
->
fõld
.
sqe_√xt
 !(
ñm
)) \

344 
cuªlm
 = cuªlm->
fõld
.
sqe_√xt
; \

345 i‡((
cuªlm
->
fõld
.
sqe_√xt
 = \

346 
cuªlm
->
fõld
.
sqe_√xt
->fõld.sqe_√xtË=
NULL
) \

347 (
hód
)->
sqh_œ°
 = &(
cuªlm
)->
fõld
.
sqe_√xt
; \

349 }  0)

	)

351 
	#SIMPLEQ_FOREACH
(
v¨
, 
hód
, 
fõld
) \

352 (
v¨
Ë((
hód
)->
sqh_fú°
); \

353 (
v¨
); \

354 (
v¨
Ë((v¨)->
fõld
.
sqe_√xt
))

	)

359 
	#SIMPLEQ_EMPTY
(
hód
Ë((hód)->
sqh_fú°
 =
NULL
)

	)

360 
	#SIMPLEQ_FIRST
(
hód
Ë((hód)->
sqh_fú°
)

	)

361 
	#SIMPLEQ_NEXT
(
ñm
, 
fõld
Ë(”lm)->fõld.
sqe_√xt
)

	)

367 
	#_TAILQ_HEAD
(
«me
, 
ty≥
, 
quÆ
) \

368 
	s«me
 { \

369 
quÆ
 
ty≥
 *
tqh_fú°
; \

370 
quÆ
 
ty≥
 *quÆ *
tqh_œ°
; \

371 }

	)

372 
	#TAILQ_HEAD
(
«me
, 
ty≥
Ë
	`_TAILQ_HEAD
“ame, ty≥,)

	)

374 
	#TAILQ_HEAD_INITIALIZER
(
hód
) \

375 { 
NULL
, &(
hód
).
tqh_fú°
 }

	)

377 
	#_TAILQ_ENTRY
(
ty≥
, 
quÆ
) \

379 
quÆ
 
ty≥
 *
tqe_√xt
; \

380 
quÆ
 
ty≥
 *quÆ *
tqe_¥ev
; \

381 }

	)

382 
	#TAILQ_ENTRY
(
ty≥
Ë
	`_TAILQ_ENTRY
(ty≥,)

	)

387 
	#TAILQ_INIT
(
hód
) do { \

388 (
hód
)->
tqh_fú°
 = 
NULL
; \

389 (
hód
)->
tqh_œ°
 = &(hód)->
tqh_fú°
; \

390 }  0)

	)

392 
	#TAILQ_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
) do { \

393 i‡(((
ñm
)->
fõld
.
tqe_√xt
 = (
hód
)->
tqh_fú°
Ë!
NULL
) \

394 (
hód
)->
tqh_fú°
->
fõld
.
tqe_¥ev
 = \

395 &(
ñm
)->
fõld
.
tqe_√xt
; \

397 (
hód
)->
tqh_œ°
 = &(
ñm
)->
fõld
.
tqe_√xt
; \

398 (
hód
)->
tqh_fú°
 = (
ñm
); \

399 (
ñm
)->
fõld
.
tqe_¥ev
 = &(
hód
)->
tqh_fú°
; \

400 }  0)

	)

402 
	#TAILQ_INSERT_TAIL
(
hód
, 
ñm
, 
fõld
) do { \

403 (
ñm
)->
fõld
.
tqe_√xt
 = 
NULL
; \

404 (
ñm
)->
fõld
.
tqe_¥ev
 = (
hód
)->
tqh_œ°
; \

405 *(
hód
)->
tqh_œ°
 = (
ñm
); \

406 (
hód
)->
tqh_œ°
 = &(
ñm
)->
fõld
.
tqe_√xt
; \

407 }  0)

	)

409 
	#TAILQ_INSERT_AFTER
(
hód
, 
li°ñm
, 
ñm
, 
fõld
) do { \

410 i‡(((
ñm
)->
fõld
.
tqe_√xt
 = (
li°ñm
)->fõld.tqe_√xtË!
NULL
)\

411 (
ñm
)->
fõld
.
tqe_√xt
->fõld.
tqe_¥ev
 = \

412 &(
ñm
)->
fõld
.
tqe_√xt
; \

414 (
hód
)->
tqh_œ°
 = &(
ñm
)->
fõld
.
tqe_√xt
; \

415 (
li°ñm
)->
fõld
.
tqe_√xt
 = (
ñm
); \

416 (
ñm
)->
fõld
.
tqe_¥ev
 = &(
li°ñm
)->fõld.
tqe_√xt
; \

417 }  0)

	)

419 
	#TAILQ_INSERT_BEFORE
(
li°ñm
, 
ñm
, 
fõld
) do { \

420 (
ñm
)->
fõld
.
tqe_¥ev
 = (
li°ñm
)->field.tqe_prev; \

421 (
ñm
)->
fõld
.
tqe_√xt
 = (
li°ñm
); \

422 *(
li°ñm
)->
fõld
.
tqe_¥ev
 = (
ñm
); \

423 (
li°ñm
)->
fõld
.
tqe_¥ev
 = &(
ñm
)->fõld.
tqe_√xt
; \

424 }  0)

	)

426 
	#TAILQ_REMOVE
(
hód
, 
ñm
, 
fõld
) do { \

427 i‡(((
ñm
)->
fõld
.
tqe_√xt
Ë!
NULL
) \

428 (
ñm
)->
fõld
.
tqe_√xt
->fõld.
tqe_¥ev
 = \

429 (
ñm
)->
fõld
.
tqe_¥ev
; \

431 (
hód
)->
tqh_œ°
 = (
ñm
)->
fõld
.
tqe_¥ev
; \

432 *(
ñm
)->
fõld
.
tqe_¥ev
 = (ñm)->fõld.
tqe_√xt
; \

433 }  0)

	)

435 
	#TAILQ_FOREACH
(
v¨
, 
hód
, 
fõld
) \

436 (
v¨
Ë((
hód
)->
tqh_fú°
); \

437 (
v¨
); \

438 (
v¨
Ë((v¨)->
fõld
.
tqe_√xt
))

	)

440 
	#TAILQ_FOREACH_REVERSE
(
v¨
, 
hód
, 
hód«me
, 
fõld
) \

441 (
v¨
Ë(*(((
hód«me
 *)((
hód
)->
tqh_œ°
))->tqh_last)); \

442 (
v¨
); \

443 (
v¨
Ë(*(((
hód«me
 *)((v¨)->
fõld
.
tqe_¥ev
))->
tqh_œ°
)))

	)

445 
	#TAILQ_CONCAT
(
hód1
, 
hód2
, 
fõld
) do { \

446 i‡(!
	`TAILQ_EMPTY
(
hód2
)) { \

447 *(
hód1
)->
tqh_œ°
 = (
hód2
)->
tqh_fú°
; \

448 (
hód2
)->
tqh_fú°
->
fõld
.
tqe_¥ev
 = (
hód1
)->
tqh_œ°
; \

449 (
hód1
)->
tqh_œ°
 = (
hód2
)->tqh_last; \

450 
	`TAILQ_INIT
((
hód2
)); \

452 }  0)

	)

457 
	#TAILQ_EMPTY
(
hód
Ë((hód)->
tqh_fú°
 =
NULL
)

	)

458 
	#TAILQ_FIRST
(
hód
Ë((hód)->
tqh_fú°
)

	)

459 
	#TAILQ_NEXT
(
ñm
, 
fõld
Ë(”lm)->fõld.
tqe_√xt
)

	)

461 
	#TAILQ_LAST
(
hód
, 
hód«me
) \

462 (*(((
hód«me
 *)((
hód
)->
tqh_œ°
))->tqh_œ°))

	)

463 
	#TAILQ_PREV
(
ñm
, 
hód«me
, 
fõld
) \

464 (*(((
hód«me
 *)((
ñm
)->
fõld
.
tqe_¥ev
))->
tqh_œ°
))

	)

470 
	#CIRCLEQ_HEAD
(
«me
, 
ty≥
) \

471 
	s«me
 { \

472 
ty≥
 *
cqh_fú°
; \

473 
ty≥
 *
cqh_œ°
; \

474 }

	)

476 
	#CIRCLEQ_HEAD_INITIALIZER
(
hód
) \

477 { (*)&
hód
, (*)&hód }

	)

479 
	#CIRCLEQ_ENTRY
(
ty≥
) \

481 
ty≥
 *
cqe_√xt
; \

482 
ty≥
 *
cqe_¥ev
; \

483 }

	)

488 
	#CIRCLEQ_INIT
(
hód
) do { \

489 (
hód
)->
cqh_fú°
 = (*)(head); \

490 (
hód
)->
cqh_œ°
 = (*)(head); \

491 }  0)

	)

493 
	#CIRCLEQ_INSERT_AFTER
(
hód
, 
li°ñm
, 
ñm
, 
fõld
) do { \

494 (
ñm
)->
fõld
.
cqe_√xt
 = (
li°ñm
)->field.cqe_next; \

495 (
ñm
)->
fõld
.
cqe_¥ev
 = (
li°ñm
); \

496 i‡((
li°ñm
)->
fõld
.
cqe_√xt
 =(*)(
hód
)) \

497 (
hód
)->
cqh_œ°
 = (
ñm
); \

499 (
li°ñm
)->
fõld
.
cqe_√xt
->fõld.
cqe_¥ev
 = (
ñm
); \

500 (
li°ñm
)->
fõld
.
cqe_√xt
 = (
ñm
); \

501 }  0)

	)

503 
	#CIRCLEQ_INSERT_BEFORE
(
hód
, 
li°ñm
, 
ñm
, 
fõld
) do { \

504 (
ñm
)->
fõld
.
cqe_√xt
 = (
li°ñm
); \

505 (
ñm
)->
fõld
.
cqe_¥ev
 = (
li°ñm
)->field.cqe_prev; \

506 i‡((
li°ñm
)->
fõld
.
cqe_¥ev
 =(*)(
hód
)) \

507 (
hód
)->
cqh_fú°
 = (
ñm
); \

509 (
li°ñm
)->
fõld
.
cqe_¥ev
->fõld.
cqe_√xt
 = (
ñm
); \

510 (
li°ñm
)->
fõld
.
cqe_¥ev
 = (
ñm
); \

511 }  0)

	)

513 
	#CIRCLEQ_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
) do { \

514 (
ñm
)->
fõld
.
cqe_√xt
 = (
hód
)->
cqh_fú°
; \

515 (
ñm
)->
fõld
.
cqe_¥ev
 = (*)(
hód
); \

516 i‡((
hód
)->
cqh_œ°
 == (*)(head)) \

517 (
hód
)->
cqh_œ°
 = (
ñm
); \

519 (
hód
)->
cqh_fú°
->
fõld
.
cqe_¥ev
 = (
ñm
); \

520 (
hód
)->
cqh_fú°
 = (
ñm
); \

521 }  0)

	)

523 
	#CIRCLEQ_INSERT_TAIL
(
hód
, 
ñm
, 
fõld
) do { \

524 (
ñm
)->
fõld
.
cqe_√xt
 = (*)(
hód
); \

525 (
ñm
)->
fõld
.
cqe_¥ev
 = (
hód
)->
cqh_œ°
; \

526 i‡((
hód
)->
cqh_fú°
 == (*)(head)) \

527 (
hód
)->
cqh_fú°
 = (
ñm
); \

529 (
hód
)->
cqh_œ°
->
fõld
.
cqe_√xt
 = (
ñm
); \

530 (
hód
)->
cqh_œ°
 = (
ñm
); \

531 }  0)

	)

533 
	#CIRCLEQ_REMOVE
(
hód
, 
ñm
, 
fõld
) do { \

534 i‡((
ñm
)->
fõld
.
cqe_√xt
 =(*)(
hód
)) \

535 (
hód
)->
cqh_œ°
 = (
ñm
)->
fõld
.
cqe_¥ev
; \

537 (
ñm
)->
fõld
.
cqe_√xt
->fõld.
cqe_¥ev
 = \

538 (
ñm
)->
fõld
.
cqe_¥ev
; \

539 i‡((
ñm
)->
fõld
.
cqe_¥ev
 =(*)(
hód
)) \

540 (
hód
)->
cqh_fú°
 = (
ñm
)->
fõld
.
cqe_√xt
; \

542 (
ñm
)->
fõld
.
cqe_¥ev
->fõld.
cqe_√xt
 = \

543 (
ñm
)->
fõld
.
cqe_√xt
; \

544 }  0)

	)

546 
	#CIRCLEQ_FOREACH
(
v¨
, 
hód
, 
fõld
) \

547 (
v¨
Ë((
hód
)->
cqh_fú°
); \

548 (
v¨
Ë!(c⁄° *)(
hód
); \

549 (
v¨
Ë((v¨)->
fõld
.
cqe_√xt
))

	)

551 
	#CIRCLEQ_FOREACH_REVERSE
(
v¨
, 
hód
, 
fõld
) \

552 (
v¨
Ë((
hód
)->
cqh_œ°
); \

553 (
v¨
Ë!(c⁄° *)(
hód
); \

554 (
v¨
Ë((v¨)->
fõld
.
cqe_¥ev
))

	)

559 
	#CIRCLEQ_EMPTY
(
hód
Ë((hód)->
cqh_fú°
 =(*)(hód))

	)

560 
	#CIRCLEQ_FIRST
(
hód
Ë((hód)->
cqh_fú°
)

	)

561 
	#CIRCLEQ_LAST
(
hód
Ë((hód)->
cqh_œ°
)

	)

562 
	#CIRCLEQ_NEXT
(
ñm
, 
fõld
Ë(”lm)->fõld.
cqe_√xt
)

	)

563 
	#CIRCLEQ_PREV
(
ñm
, 
fõld
Ë(”lm)->fõld.
cqe_¥ev
)

	)

565 
	#CIRCLEQ_LOOP_NEXT
(
hód
, 
ñm
, 
fõld
) \

566 (((
ñm
)->
fõld
.
cqe_√xt
 =(*)(
hód
)) \

567 ? ((
hód
)->
cqh_fú°
) \

568 : (
ñm
->
fõld
.
cqe_√xt
))

	)

569 
	#CIRCLEQ_LOOP_PREV
(
hód
, 
ñm
, 
fõld
) \

570 (((
ñm
)->
fõld
.
cqe_¥ev
 =(*)(
hód
)) \

571 ? ((
hód
)->
cqh_œ°
) \

572 : (
ñm
->
fõld
.
cqe_¥ev
))

	)

	@/usr/include/x86_64-linux-gnu/sys/quota.h

51 #i‚de‡
_SYS_QUOTA_H


52 
	#_SYS_QUOTA_H
 1

	)

54 
	~<„©uªs.h
>

55 
	~<sys/ty≥s.h
>

57 
	~<löux/quŸa.h
>

63 
	#dbtob
(
num
Ë(“umË<< 10)

	)

64 
	#btodb
(
num
Ë(“umË>> 10)

	)

70 
	#fs_to_dq_blocks
(
num
, 
blksize
Ë((“umË* (blksize)Ë/ 1024)

	)

81 
	#MAX_IQ_TIME
 604800

	)

82 
	#MAX_DQ_TIME
 604800

	)

84 
	#QUOTAFILENAME
 "quŸa"

	)

85 
	#QUOTAGROUP
 "°aff"

	)

87 
	#NR_DQHASH
 43

	)

88 
	#NR_DQUOTS
 256

	)

91 
	sdqblk


93 
__uöt64_t
 
	mdqb_bh¨dlimô
;

94 
__uöt64_t
 
	mdqb_bso·limô
;

95 
__uöt64_t
 
	mdqb_cur•a˚
;

96 
__uöt64_t
 
	mdqb_ih¨dlimô
;

97 
__uöt64_t
 
	mdqb_iso·limô
;

98 
__uöt64_t
 
	mdqb_curöodes
;

99 
__uöt64_t
 
	mdqb_btime
;

100 
__uöt64_t
 
	mdqb_ôime
;

101 
__uöt32_t
 
	mdqb_vÆid
;

107 
	#dq_bh¨dlimô
 
dq_dqb
.
dqb_bh¨dlimô


	)

108 
	#dq_bso·limô
 
dq_dqb
.
dqb_bso·limô


	)

109 
	#dq_cur•a˚
 
dq_dqb
.
dqb_cur•a˚


	)

110 
	#dq_vÆid
 
dq_dqb
.
dqb_vÆid


	)

111 
	#dq_ih¨dlimô
 
dq_dqb
.
dqb_ih¨dlimô


	)

112 
	#dq_iso·limô
 
dq_dqb
.
dqb_iso·limô


	)

113 
	#dq_curöodes
 
dq_dqb
.
dqb_curöodes


	)

114 
	#dq_btime
 
dq_dqb
.
dqb_btime


	)

115 
	#dq_ôime
 
dq_dqb
.
dqb_ôime


	)

117 
	#dqoff
(
UID
Ë((
__loff_t
)((UIDË*  (
dqblk
)))

	)

120 
	sdqöfo


122 
__uöt64_t
 
	mdqi_bgø˚
;

123 
__uöt64_t
 
	mdqi_igø˚
;

124 
__uöt32_t
 
	mdqi_Êags
;

125 
__uöt32_t
 
	mdqi_vÆid
;

128 
__BEGIN_DECLS


130 
	$quŸa˘l
 (
__cmd
, c⁄° *
__•ecül
, 
__id
,

131 
__ˇddr_t
 
__addr
Ë
__THROW
;

133 
__END_DECLS


	@/usr/include/x86_64-linux-gnu/sys/random.h

19 #i‚de‡
_SYS_RANDOM_H


20 
	#_SYS_RANDOM_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<sys/ty≥s.h
>

26 
	#GRND_NONBLOCK
 0x01

	)

27 
	#GRND_RANDOM
 0x02

	)

28 
	#GRND_INSECURE
 0x04

	)

30 
__BEGIN_DECLS


34 
ssize_t
 
	$gëøndom
 (*
__buf„r
, 
size_t
 
__Àngth
,

35 
__Êags
Ë
__wur
;

39 
	$gëíå›y
 (*
__buf„r
, 
size_t
 
__Àngth
Ë
__wur
;

41 
__END_DECLS


	@/usr/include/x86_64-linux-gnu/sys/raw.h

18 #i‚de‡
_SYS_RAW_H


19 
	#_SYS_RAW_H
 1

	)

21 
	~<°döt.h
>

22 
	~<sys/io˘l.h
>

25 
	#RAW_MAJOR
 162

	)

28 
	#RAW_SETBIND
 
	`_IO
(0xac, 0)

	)

29 
	#RAW_GETBIND
 
	`_IO
(0xac, 1)

	)

31 
	søw_c⁄fig_ªque°


33 
	møw_mö‹
;

34 
uöt64_t
 
	mblock_maj‹
;

35 
uöt64_t
 
	mblock_mö‹
;

	@/usr/include/x86_64-linux-gnu/sys/reboot.h

21 #i‚de‡
_SYS_REBOOT_H


22 
	#_SYS_REBOOT_H
 1

	)

24 
	~<„©uªs.h
>

27 
	#RB_AUTOBOOT
 0x01234567

	)

30 
	#RB_HALT_SYSTEM
 0xcdef0123

	)

33 
	#RB_ENABLE_CAD
 0x89abcdef

	)

36 
	#RB_DISABLE_CAD
 0

	)

39 
	#RB_POWER_OFF
 0x4321„dc

	)

42 
	#RB_SW_SUSPEND
 0xd000f˚2

	)

45 
	#RB_KEXEC
 0x45584543

	)

47 
__BEGIN_DECLS


50 
	$ªboŸ
 (
__howto
Ë
__THROW
;

52 
__END_DECLS


	@/usr/include/x86_64-linux-gnu/sys/reg.h

18 #i‚de‡
_SYS_REG_H


19 
	#_SYS_REG_H
 1

	)

22 #ifde‡
__x86_64__


26 
	#R15
 0

	)

27 
	#R14
 1

	)

28 
	#R13
 2

	)

29 
	#R12
 3

	)

30 
	#RBP
 4

	)

31 
	#RBX
 5

	)

32 
	#R11
 6

	)

33 
	#R10
 7

	)

34 
	#R9
 8

	)

35 
	#R8
 9

	)

36 
	#RAX
 10

	)

37 
	#RCX
 11

	)

38 
	#RDX
 12

	)

39 
	#RSI
 13

	)

40 
	#RDI
 14

	)

41 
	#ORIG_RAX
 15

	)

42 
	#RIP
 16

	)

43 
	#CS
 17

	)

44 
	#EFLAGS
 18

	)

45 
	#RSP
 19

	)

46 
	#SS
 20

	)

47 
	#FS_BASE
 21

	)

48 
	#GS_BASE
 22

	)

49 
	#DS
 23

	)

50 
	#ES
 24

	)

51 
	#FS
 25

	)

52 
	#GS
 26

	)

58 
	#EBX
 0

	)

59 
	#ECX
 1

	)

60 
	#EDX
 2

	)

61 
	#ESI
 3

	)

62 
	#EDI
 4

	)

63 
	#EBP
 5

	)

64 
	#EAX
 6

	)

65 
	#DS
 7

	)

66 
	#ES
 8

	)

67 
	#FS
 9

	)

68 
	#GS
 10

	)

69 
	#ORIG_EAX
 11

	)

70 
	#EIP
 12

	)

71 
	#CS
 13

	)

72 
	#EFL
 14

	)

73 
	#UESP
 15

	)

74 
	#SS
 16

	)

	@/usr/include/x86_64-linux-gnu/sys/resource.h

18 #i‚def 
_SYS_RESOURCE_H


19 
	#_SYS_RESOURCE_H
 1

	)

21 
	~<„©uªs.h
>

24 
	~<bôs/ªsour˚.h
>

26 #i‚de‡
__id_t_deföed


27 
__id_t
 
	tid_t
;

28 
	#__id_t_deföed


	)

31 
	g__BEGIN_DECLS


37 #i‡
deföed
 
__USE_GNU
 && !deföed 
__˝lu•lus


38 
__æimô_ªsour˚
 
	t__æimô_ªsour˚_t
;

39 
__rußge_who
 
	t__rußge_who_t
;

40 
__¥i‹ôy_which
 
	t__¥i‹ôy_which_t
;

42 
	t__æimô_ªsour˚_t
;

43 
	t__rußge_who_t
;

44 
	t__¥i‹ôy_which_t
;

49 #i‚de‡
__USE_FILE_OFFSET64


50 
	$gëæimô
 (
__æimô_ªsour˚_t
 
__ªsour˚
,

51 
æimô
 *
__æimôs
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

53 #ifde‡
__REDIRECT_NTH


54 
	`__REDIRECT_NTH
 (
gëæimô
, (
__æimô_ªsour˚_t
 
__ªsour˚
,

55 
æimô
 *
__æimôs
), 
gëæimô64
)

56 
	`__n⁄nuŒ
 ((2));

58 
	#gëæimô
 
gëæimô64


	)

61 #ifde‡
__USE_LARGEFILE64


62 
	$gëæimô64
 (
__æimô_ªsour˚_t
 
__ªsour˚
,

63 
æimô64
 *
__æimôs
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

69 #i‚de‡
__USE_FILE_OFFSET64


70 
	$£ålimô
 (
__æimô_ªsour˚_t
 
__ªsour˚
,

71 c⁄° 
æimô
 *
__æimôs
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

73 #ifde‡
__REDIRECT_NTH


74 
	`__REDIRECT_NTH
 (
£ålimô
, (
__æimô_ªsour˚_t
 
__ªsour˚
,

75 c⁄° 
æimô
 *
__æimôs
),

76 
£ålimô64
Ë
	`__n⁄nuŒ
 ((2));

78 
	#£ålimô
 
£ålimô64


	)

81 #ifde‡
__USE_LARGEFILE64


82 
	$£ålimô64
 (
__æimô_ªsour˚_t
 
__ªsour˚
,

83 c⁄° 
æimô64
 *
__æimôs
Ë
__THROW


84 
	`__n⁄nuŒ
 ((2));

89 
	$gërußge
 (
__rußge_who_t
 
__who
, 
rußge
 *
__ußge
Ë
__THROW
;

91 #ifde‡
__USE_TIME_BITS64


92 #i‡
	`deföed
(
__REDIRECT_NTH
)

93 
	`__REDIRECT_NTH
 (
gërußge
, (
__rußge_who_t
 
__who
,

94 
rußge
 *
__ußge
),

95 
__gërußge64
);

97 
	#gërußge
 
__gërußge64


	)

105 
	$gë¥i‹ôy
 (
__¥i‹ôy_which_t
 
__which
, 
id_t
 
__who
Ë
__THROW
;

109 
	$£çri‹ôy
 (
__¥i‹ôy_which_t
 
__which
, 
id_t
 
__who
, 
__¥io
)

110 
__THROW
;

112 
__END_DECLS


	@/usr/include/x86_64-linux-gnu/sys/rseq.h

18 #i‚de‡
_SYS_RSEQ_H


19 
	#_SYS_RSEQ_H
 1

	)

22 
	~<bôs/r£q.h
>

24 
	~<°ddef.h
>

25 
	~<°döt.h
>

26 
	~<sys/cdefs.h
>

27 
	~<bôs/ídün.h
>

29 #ifde‡
__has_ö˛ude


30 #i‡
__has_ö˛ude
 ("linux/rseq.h")

31 
	#__GLIBC_HAVE_KERNEL_RSEQ


	)

34 
	~<löux/vîsi⁄.h
>

35 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
 (4, 18, 0)

36 
	#__GLIBC_HAVE_KERNEL_RSEQ


	)

40 #ifde‡
__GLIBC_HAVE_KERNEL_RSEQ


42 
	~<löux/r£q.h
>

46 
	er£q_˝u_id_°©e


48 
	mRSEQ_CPU_ID_UNINITIALIZED
 = -1,

49 
	mRSEQ_CPU_ID_REGISTRATION_FAILED
 = -2,

52 
	er£q_Êags


54 
	mRSEQ_FLAG_UNREGISTER
 = (1 << 0),

57 
	er£q_cs_Êags_bô


59 
	mRSEQ_CS_FLAG_NO_RESTART_ON_PREEMPT_BIT
 = 0,

60 
	mRSEQ_CS_FLAG_NO_RESTART_ON_SIGNAL_BIT
 = 1,

61 
	mRSEQ_CS_FLAG_NO_RESTART_ON_MIGRATE_BIT
 = 2,

64 
	er£q_cs_Êags


66 
	mRSEQ_CS_FLAG_NO_RESTART_ON_PREEMPT
 =

67 (1U << 
RSEQ_CS_FLAG_NO_RESTART_ON_PREEMPT_BIT
),

68 
	mRSEQ_CS_FLAG_NO_RESTART_ON_SIGNAL
 =

69 (1U << 
RSEQ_CS_FLAG_NO_RESTART_ON_SIGNAL_BIT
),

70 
	mRSEQ_CS_FLAG_NO_RESTART_ON_MIGRATE
 =

71 (1U << 
RSEQ_CS_FLAG_NO_RESTART_ON_MIGRATE_BIT
),

77 
	sr£q_cs


80 
uöt32_t
 
	mvîsi⁄
;

82 
uöt32_t
 
	mÊags
;

83 
uöt64_t
 
	m°¨t_ù
;

85 
uöt64_t
 
	mpo°_commô_off£t
;

86 
uöt64_t
 
	mab‹t_ù
;

87 } 
__©åibuã__
 ((
__Æig√d__
 (32)));

93 
	sr£q


105 
uöt32_t
 
	m˝u_id_°¨t
;

118 
uöt32_t
 
	m˝u_id
;

137 
uöt64_t
 
	m±r64
;

138 #ifde‡
__LP64__


139 
uöt64_t
 
	m±r
;

143 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


144 
uöt32_t
 
	m∑ddög
;

145 
uöt32_t
 
	m±r32
;

147 
uöt32_t
 
	m±r32
;

148 
uöt32_t
 
	m∑ddög
;

150 } 
	m±r
;

152 } 
	mr£q_cs
;

170 
uöt32_t
 
	mÊags
;

171 } 
__©åibuã__
 ((
__Æig√d__
 (32)));

176 c⁄° 
±rdiff_t
 
__r£q_off£t
;

180 c⁄° 
__r£q_size
;

183 c⁄° 
__r£q_Êags
;

	@/usr/include/x86_64-linux-gnu/sys/select.h

21 #i‚de‡
_SYS_SELECT_H


22 
	#_SYS_SELECT_H
 1

	)

24 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

30 
	~<bôs/£À˘.h
>

33 
	~<bôs/ty≥s/sig£t_t.h
>

36 
	~<bôs/ty≥s/time_t.h
>

37 
	~<bôs/ty≥s/°ru˘_timevÆ.h
>

38 #ifde‡
__USE_XOPEN2K


39 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

42 #i‚de‡
__su£c⁄ds_t_deföed


43 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

44 
	#__su£c⁄ds_t_deföed


	)

49 
	t__fd_mask
;

52 #unde‡
__NFDBITS


54 
	#__NFDBITS
 (8 * (Ë (
__fd_mask
))

	)

55 
	#__FD_ELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

56 
	#__FD_MASK
(
d
Ë((
__fd_mask
Ë(1UL << ((dË% 
__NFDBITS
)))

	)

63 #ifde‡
__USE_XOPEN


64 
__fd_mask
 
	mfds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

65 
	#__FDS_BITS
(
£t
Ë((£t)->
fds_bôs
)

	)

67 
__fd_mask
 
	m__fds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

68 
	#__FDS_BITS
(
£t
Ë((£t)->
__fds_bôs
)

	)

70 } 
	tfd_£t
;

73 
	#FD_SETSIZE
 
__FD_SETSIZE


	)

75 #ifde‡
__USE_MISC


77 
__fd_mask
 
	tfd_mask
;

80 
	#NFDBITS
 
__NFDBITS


	)

85 
	#FD_SET
(
fd
, 
fd£ç
Ë
	`__FD_SET
 (fd, fd£ç)

	)

86 
	#FD_CLR
(
fd
, 
fd£ç
Ë
	`__FD_CLR
 (fd, fd£ç)

	)

87 
	#FD_ISSET
(
fd
, 
fd£ç
Ë
	`__FD_ISSET
 (fd, fd£ç)

	)

88 
	#FD_ZERO
(
fd£ç
Ë
	`__FD_ZERO
 (fd£ç)

	)

91 
	g__BEGIN_DECLS


101 #i‚de‡
__USE_TIME_BITS64


102 
£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

103 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

104 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

105 
timevÆ
 *
__ª°ri˘
 
__timeout
);

107 #ifde‡
__REDIRECT


108 
__REDIRECT
 (
£À˘
,

109 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

110 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

111 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

112 
timevÆ
 *
__ª°ri˘
 
__timeout
),

113 
__£À˘64
);

115 
	#£À˘
 
__£À˘64


	)

119 #ifde‡
__USE_XOPEN2K


126 #i‚de‡
__USE_TIME_BITS64


127 
p£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

128 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

129 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

130 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
,

131 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__sigmask
);

133 #ifde‡
__REDIRECT


134 
__REDIRECT
 (
p£À˘
,

135 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

136 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

137 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

138 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
,

139 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__sigmask
),

140 
__p£À˘64
);

142 
	#p£À˘
 
__p£À˘64


	)

149 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__GNUC__


150 
	~<bôs/£À˘2.h
>

153 
	g__END_DECLS


	@/usr/include/x86_64-linux-gnu/sys/sem.h

18 #i‚de‡
_SYS_SEM_H


19 
	#_SYS_SEM_H
 1

	)

21 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

27 
	~<sys/ùc.h
>

30 
	~<bôs/£m.h
>

32 #ifde‡
__USE_GNU


33 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

40 
	s£mbuf


42 
	m£m_num
;

43 
	m£m_›
;

44 
	m£m_Êg
;

48 
	g__BEGIN_DECLS


51 #i‚de‡
__USE_TIME_BITS64


52 
	$£m˘l
 (
__£mid
, 
__£mnum
, 
__cmd
, ...Ë
__THROW
;

54 #ifde‡
__REDIRECT_NTH


55 
	`__REDIRECT_NTH
 (
£m˘l
,

56 (
__£mid
, 
__£mnum
, 
__cmd
, ...),

57 
__£m˘l64
);

59 
	#£m˘l
 
__£m˘l64


	)

64 
	$£mgë
 (
key_t
 
__key
, 
__n£ms
, 
__£mÊg
Ë
__THROW
;

67 
	$£m›
 (
__£mid
, 
£mbuf
 *
__s›s
, 
size_t
 
__ns›s
Ë
__THROW
;

69 #ifde‡
__USE_GNU


71 #i‚de‡
__USE_TIME_BITS64


72 
	$£mtimed›
 (
__£mid
, 
£mbuf
 *
__s›s
, 
size_t
 
__ns›s
,

73 c⁄° 
time•ec
 *
__timeout
Ë
__THROW
;

75 #ifde‡
__REDIRECT_NTH


76 
	`__REDIRECT_NTH
 (
£mtimed›
, (
__£mid
, 
£mbuf
 *
__s›s
,

77 
size_t
 
__ns›s
,

78 c⁄° 
time•ec
 *
__timeout
),

79 
__£mtimed›64
);

81 
	#£mtimed›
 
__£mtimed›64


	)

86 
__END_DECLS


	@/usr/include/x86_64-linux-gnu/sys/sendfile.h

19 #i‚de‡
_SYS_SENDFILE_H


20 
	#_SYS_SENDFILE_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<sys/ty≥s.h
>

25 
	g__BEGIN_DECLS


32 #i‚de‡
__USE_FILE_OFFSET64


33 
ssize_t
 
	$£ndfûe
 (
__out_fd
, 
__ö_fd
, 
off_t
 *
__off£t
,

34 
size_t
 
__cou¡
Ë
__THROW
;

36 #ifde‡
__REDIRECT_NTH


37 
ssize_t
 
	`__REDIRECT_NTH
 (
£ndfûe
,

38 (
__out_fd
, 
__ö_fd
, 
__off64_t
 *
__off£t
,

39 
size_t
 
__cou¡
), 
£ndfûe64
);

41 
	#£ndfûe
 
£ndfûe64


	)

44 #ifde‡
__USE_LARGEFILE64


45 
ssize_t
 
	$£ndfûe64
 (
__out_fd
, 
__ö_fd
, 
__off64_t
 *
__off£t
,

46 
size_t
 
__cou¡
Ë
__THROW
;

49 
__END_DECLS


	@/usr/include/x86_64-linux-gnu/sys/shm.h

18 #i‚de‡
_SYS_SHM_H


19 
	#_SYS_SHM_H
 1

	)

21 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

27 
	~<sys/ùc.h
>

30 
	~<bôs/shm.h
>

33 
	~<bôs/ty≥s/time_t.h
>

35 #ifde‡
__USE_XOPEN


36 #i‚de‡
__pid_t_deföed


37 
__pid_t
 
	tpid_t
;

38 
	#__pid_t_deföed


	)

43 
	g__BEGIN_DECLS


49 #i‚de‡
__USE_TIME_BITS64


50 
	$shm˘l
 (
__shmid
, 
__cmd
, 
shmid_ds
 *
__buf
Ë
__THROW
;

52 #ifde‡
__REDIRECT_NTH


53 
	`__REDIRECT_NTH
 (
shm˘l
,

54 (
__shmid
, 
__cmd
, 
shmid_ds
 *
__buf
),

55 
__shm˘l64
);

57 
	#shm˘l
 
__shm˘l64


	)

62 
	$shmgë
 (
key_t
 
__key
, 
size_t
 
__size
, 
__shmÊg
Ë
__THROW
;

65 *
	$shm©
 (
__shmid
, c⁄° *
__shmaddr
, 
__shmÊg
)

66 
__THROW
;

69 
	$shmdt
 (c⁄° *
__shmaddr
Ë
__THROW
;

71 
__END_DECLS


	@/usr/include/x86_64-linux-gnu/sys/signal.h

1 
	~<sig«l.h
>

	@/usr/include/x86_64-linux-gnu/sys/signalfd.h

18 #i‚def 
_SYS_SIGNALFD_H


19 
	#_SYS_SIGNALFD_H
 1

	)

21 
	~<°döt.h
>

22 
	~<bôs/ty≥s/sig£t_t.h
>

25 
	~<bôs/sig«lfd.h
>

27 
	ssig«lfd_sigöfo


29 
uöt32_t
 
	mssi_signo
;

30 
öt32_t
 
	mssi_î∫o
;

31 
öt32_t
 
	mssi_code
;

32 
uöt32_t
 
	mssi_pid
;

33 
uöt32_t
 
	mssi_uid
;

34 
öt32_t
 
	mssi_fd
;

35 
uöt32_t
 
	mssi_tid
;

36 
uöt32_t
 
	mssi_b™d
;

37 
uöt32_t
 
	mssi_ovîrun
;

38 
uöt32_t
 
	mssi_å≠no
;

39 
öt32_t
 
	mssi_°©us
;

40 
öt32_t
 
	mssi_öt
;

41 
uöt64_t
 
	mssi_±r
;

42 
uöt64_t
 
	mssi_utime
;

43 
uöt64_t
 
	mssi_°ime
;

44 
uöt64_t
 
	mssi_addr
;

45 
uöt16_t
 
	mssi_addr_lsb
;

46 
uöt16_t
 
	m__∑d2
;

47 
öt32_t
 
	mssi_sysˇŒ
;

48 
uöt64_t
 
	mssi_ˇŒ_addr
;

49 
uöt32_t
 
	mssi_¨ch
;

50 
uöt8_t
 
	m__∑d
[28];

53 
__BEGIN_DECLS


57 
	$sig«lfd
 (
__fd
, c⁄° 
sig£t_t
 *
__mask
, 
__Êags
)

58 
__THROW
 
	`__n⁄nuŒ
 ((2));

60 
__END_DECLS


	@/usr/include/x86_64-linux-gnu/sys/single_threaded.h

19 #i‚de‡
_SYS_SINGLE_THREADED_H


20 
	#_SYS_SINGLE_THREADED_H


	)

22 
	~<„©uªs.h
>

24 
__BEGIN_DECLS


29 
__libc_sögÀ_thªaded
;

31 
	g__END_DECLS


	@/usr/include/x86_64-linux-gnu/sys/socket.h

19 #i‚def 
_SYS_SOCKET_H


20 
	#_SYS_SOCKET_H
 1

	)

22 
	~<„©uªs.h
>

24 
	g__BEGIN_DECLS


26 
	~<bôs/ty≥s/°ru˘_iovec.h
>

27 
	#__√ed_size_t


	)

28 
	~<°ddef.h
>

33 
	~<bôs/sockë.h
>

35 #ifde‡
__USE_MISC


36 
	~<bôs/ty≥s/°ru˘_osockaddr.h
>

43 
	mSHUT_RD
 = 0,

44 
	#SHUT_RD
 
SHUT_RD


	)

45 
	mSHUT_WR
,

46 
	#SHUT_WR
 
SHUT_WR


	)

47 
	mSHUT_RDWR


48 
	#SHUT_RDWR
 
SHUT_RDWR


	)

57 #i‡
deföed
 
__˝lu•lus
 || !
__GNUC_PREREQ
 (2, 7Ë|| !deföed 
__USE_GNU


58 
	#__SOCKADDR_ARG
 
sockaddr
 *
__ª°ri˘


	)

59 
	#__CONST_SOCKADDR_ARG
 c⁄° 
sockaddr
 *

	)

63 
	#__SOCKADDR_ALLTYPES
 \

64 
	`__SOCKADDR_ONETYPE
 (
sockaddr
) \

65 
	`__SOCKADDR_ONETYPE
 (
sockaddr_©
) \

66 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ax25
) \

67 
	`__SOCKADDR_ONETYPE
 (
sockaddr_dl
) \

68 
	`__SOCKADDR_ONETYPE
 (
sockaddr_e⁄
) \

69 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ö
) \

70 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ö6
) \

71 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ö¨p
) \

72 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ùx
) \

73 
	`__SOCKADDR_ONETYPE
 (
sockaddr_iso
) \

74 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ns
) \

75 
	`__SOCKADDR_ONETYPE
 (
sockaddr_un
) \

76 
	`__SOCKADDR_ONETYPE
 (
sockaddr_x25
)

	)

78 
	#__SOCKADDR_ONETYPE
(
ty≥
Ëty≥ *
__ª°ri˘
 
__
##ty≥##__;

	)

79 uni⁄ { 
	m__SOCKADDR_ALLTYPES


80 } 
	t__SOCKADDR_ARG
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

81 #unde‡
__SOCKADDR_ONETYPE


82 
	#__SOCKADDR_ONETYPE
(
ty≥
Ëc⁄° ty≥ *
__ª°ri˘
 
__
##ty≥##__;

	)

83 uni⁄ { 
	m__SOCKADDR_ALLTYPES


84 } 
	t__CONST_SOCKADDR_ARG
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

85 #unde‡
__SOCKADDR_ONETYPE


88 #ifde‡
__USE_GNU


90 
	smmsghdr


92 
msghdr
 
	mmsg_hdr
;

93 
	mmsg_Àn
;

102 
	$sockë
 (
__domaö
, 
__ty≥
, 
__¥Ÿocﬁ
Ë
__THROW
;

108 
	$sockë∑ú
 (
__domaö
, 
__ty≥
, 
__¥Ÿocﬁ
,

109 
__fds
[2]Ë
__THROW
;

112 
	$böd
 (
__fd
, 
__CONST_SOCKADDR_ARG
 
__addr
, 
sockÀn_t
 
__Àn
)

113 
__THROW
;

116 
	$gësock«me
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

117 
sockÀn_t
 *
__ª°ri˘
 
__Àn
Ë
__THROW
;

126 
	`c⁄√˘
 (
__fd
, 
__CONST_SOCKADDR_ARG
 
__addr
, 
sockÀn_t
 
__Àn
);

130 
	$gë≥î«me
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

131 
sockÀn_t
 *
__ª°ri˘
 
__Àn
Ë
__THROW
;

138 
ssize_t
 
	`£nd
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
, 
__Êags
);

145 
ssize_t
 
	`ªcv
 (
__fd
, *
__buf
, 
size_t
 
__n
, 
__Êags
);

152 
ssize_t
 
	`£ndto
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

153 
__Êags
, 
__CONST_SOCKADDR_ARG
 
__addr
,

154 
sockÀn_t
 
__addr_Àn
);

163 
ssize_t
 
	`ªcv‰om
 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

164 
__Êags
, 
__SOCKADDR_ARG
 
__addr
,

165 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
);

173 #i‚de‡
__USE_TIME_BITS64


174 
ssize_t
 
	`£ndmsg
 (
__fd
, c⁄° 
msghdr
 *
__mesßge
,

175 
__Êags
);

177 #ifde‡
__REDIRECT


178 
ssize_t
 
	`__REDIRECT
 (
£ndmsg
, (
__fd
, c⁄° 
msghdr
 *
__mesßge
,

179 
__Êags
),

180 
__£ndmsg64
);

182 
ssize_t
 
	`__£ndmsg64
 (
__fd
, c⁄° 
msghdr
 *
__mesßge
,

183 
__Êags
);

184 
	#£ndmsg
 
__£ndmsg64


	)

188 #ifde‡
__USE_GNU


194 #i‚de‡
__USE_TIME_BITS64


195 
	`£ndmmsg
 (
__fd
, 
mmsghdr
 *
__vmesßges
,

196 
__vÀn
, 
__Êags
);

198 #ifde‡
__REDIRECT


199 
	`__REDIRECT
 (
£ndmmsg
, (
__fd
, 
mmsghdr
 *
__vmesßges
,

200 
__vÀn
, 
__Êags
),

201 
__£ndmmsg64
);

203 
	`__£ndmmsg64
 (
__fd
, 
mmsghdr
 *
__vmesßges
,

204 
__vÀn
, 
__Êags
);

205 
	#£ndmmsg
 
__£ndmmsg64


	)

215 #i‚de‡
__USE_TIME_BITS64


216 
ssize_t
 
	`ªcvmsg
 (
__fd
, 
msghdr
 *
__mesßge
, 
__Êags
);

218 #ifde‡
__REDIRECT


219 
ssize_t
 
	`__REDIRECT
 (
ªcvmsg
,

220 (
__fd
, 
msghdr
 *
__mesßge
, 
__Êags
),

221 
__ªcvmsg64
);

223 
ssize_t
 
	`__ªcvmsg64
 (
__fd
, 
msghdr
 *
__mesßge
, 
__Êags
);

224 
	#ªcvmsg
 
__ªcvmsg64


	)

228 #ifde‡
__USE_GNU


234 #i‚de‡
__USE_TIME_BITS64


235 
	`ªcvmmsg
 (
__fd
, 
mmsghdr
 *
__vmesßges
,

236 
__vÀn
, 
__Êags
,

237 
time•ec
 *
__tmo
);

239 #ifde‡
__REDIRECT


240 
	`__REDIRECT
 (
ªcvmmsg
, (
__fd
, 
mmsghdr
 *
__vmesßges
,

241 
__vÀn
, 
__Êags
,

242 
time•ec
 *
__tmo
),

243 
__ªcvmmsg64
);

245 
	#ªcvmmsg
 
__ªcvmmsg64


	)

254 #i‚de‡
__USE_TIME_BITS64


255 
	$gësock›t
 (
__fd
, 
__Àvñ
, 
__›äame
,

256 *
__ª°ri˘
 
__›tvÆ
,

257 
sockÀn_t
 *
__ª°ri˘
 
__›éí
Ë
__THROW
;

259 #ifde‡
__REDIRECT


260 
	`__REDIRECT_NTH
 (
gësock›t
,

261 (
__fd
, 
__Àvñ
, 
__›äame
,

262 *
__ª°ri˘
 
__›tvÆ
,

263 
sockÀn_t
 *
__ª°ri˘
 
__›éí
),

264 
__gësock›t64
);

266 
	$__gësock›t64
 (
__fd
, 
__Àvñ
, 
__›äame
,

267 *
__ª°ri˘
 
__›tvÆ
,

268 
sockÀn_t
 *
__ª°ri˘
 
__›éí
Ë
__THROW
;

269 
	#gësock›t
 
__gësock›t64


	)

276 #i‚de‡
__USE_TIME_BITS64


277 
	$£tsock›t
 (
__fd
, 
__Àvñ
, 
__›äame
,

278 c⁄° *
__›tvÆ
, 
sockÀn_t
 
__›éí
Ë
__THROW
;

280 #ifde‡
__REDIRECT


281 
	`__REDIRECT_NTH
 (
£tsock›t
,

282 (
__fd
, 
__Àvñ
, 
__›äame
,

283 c⁄° *
__›tvÆ
, 
sockÀn_t
 
__›éí
),

284 
__£tsock›t64
);

286 
	$__£tsock›t64
 (
__fd
, 
__Àvñ
, 
__›äame
,

287 c⁄° *
__›tvÆ
, 
sockÀn_t
 
__›éí
Ë
__THROW
;

288 
	#£tsock›t
 
__£tsock›t64


	)

296 
	$li°í
 (
__fd
, 
__n
Ë
__THROW
;

306 
	`ac˚±
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

307 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
);

309 #ifde‡
__USE_GNU


314 
	`ac˚±4
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

315 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
, 
__Êags
);

324 
	$shutdown
 (
__fd
, 
__how
Ë
__THROW
;

327 #ifde‡
__USE_XOPEN2K


329 
	$sock©m¨k
 (
__fd
Ë
__THROW
;

333 #ifde‡
__USE_MISC


337 
	$isfdty≥
 (
__fd
, 
__fdty≥
Ë
__THROW
;

342 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


343 
	~<bôs/sockë2.h
>

346 
__END_DECLS


	@/usr/include/x86_64-linux-gnu/sys/socketvar.h

3 
	~<sys/sockë.h
>

	@/usr/include/x86_64-linux-gnu/sys/soundcard.h

1 
	~<löux/soundˇrd.h
>

	@/usr/include/x86_64-linux-gnu/sys/stat.h

22 #i‚def 
_SYS_STAT_H


23 
	#_SYS_STAT_H
 1

	)

25 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 #ifde‡
__USE_XOPEN2K8


30 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

33 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


37 
	~<bôs/ty≥s/time_t.h
>

39 #i‚de‡
__dev_t_deföed


40 
__dev_t
 
	tdev_t
;

41 
	#__dev_t_deföed


	)

44 #i‚de‡
__gid_t_deföed


45 
__gid_t
 
	tgid_t
;

46 
	#__gid_t_deföed


	)

49 #i‚de‡
__öo_t_deföed


50 #i‚de‡
__USE_FILE_OFFSET64


51 
__öo_t
 
	töo_t
;

53 
__öo64_t
 
	töo_t
;

55 
	#__öo_t_deföed


	)

58 #i‚de‡
__mode_t_deföed


59 
__mode_t
 
	tmode_t
;

60 
	#__mode_t_deföed


	)

63 #i‚de‡
__∆ök_t_deföed


64 
__∆ök_t
 
	t∆ök_t
;

65 
	#__∆ök_t_deföed


	)

68 #i‚de‡
__off_t_deföed


69 #i‚de‡
__USE_FILE_OFFSET64


70 
__off_t
 
	toff_t
;

72 
__off64_t
 
	toff_t
;

74 
	#__off_t_deföed


	)

77 #i‚de‡
__uid_t_deföed


78 
__uid_t
 
	tuid_t
;

79 
	#__uid_t_deföed


	)

83 #ifde‡
__USE_UNIX98


84 #i‚de‡
__blk˙t_t_deföed


85 #i‚de‡
__USE_FILE_OFFSET64


86 
__blk˙t_t
 
	tblk˙t_t
;

88 
__blk˙t64_t
 
	tblk˙t_t
;

90 
	#__blk˙t_t_deföed


	)

93 #i‚de‡
__blksize_t_deföed


94 
__blksize_t
 
	tblksize_t
;

95 
	#__blksize_t_deföed


	)

99 
	g__BEGIN_DECLS


101 
	~<bôs/°©.h
>

103 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


104 
	#S_IFMT
 
__S_IFMT


	)

105 
	#S_IFDIR
 
__S_IFDIR


	)

106 
	#S_IFCHR
 
__S_IFCHR


	)

107 
	#S_IFBLK
 
__S_IFBLK


	)

108 
	#S_IFREG
 
__S_IFREG


	)

109 #ifde‡
__S_IFIFO


110 
	#S_IFIFO
 
__S_IFIFO


	)

112 #ifde‡
__S_IFLNK


113 
	#S_IFLNK
 
__S_IFLNK


	)

115 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
) \

116 && 
deföed
 
	g__S_IFSOCK


117 
	#S_IFSOCK
 
__S_IFSOCK


	)

123 
	#__S_ISTYPE
(
mode
, 
mask
Ë(((modeË& 
__S_IFMT
Ë=(mask))

	)

125 
	#S_ISDIR
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFDIR
)

	)

126 
	#S_ISCHR
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFCHR
)

	)

127 
	#S_ISBLK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFBLK
)

	)

128 
	#S_ISREG
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFREG
)

	)

129 #ifde‡
__S_IFIFO


130 
	#S_ISFIFO
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFIFO
)

	)

132 #ifde‡
__S_IFLNK


133 
	#S_ISLNK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFLNK
)

	)

136 #i‡
deföed
 
__USE_MISC
 && !deföed 
__S_IFLNK


137 
	#S_ISLNK
(
mode
Ë0

	)

140 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K
) \

141 && 
deföed
 
	g__S_IFSOCK


142 
	#S_ISSOCK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFSOCK
)

	)

143 #ñi‡
deföed
 
__USE_XOPEN2K


144 
	#S_ISSOCK
(
mode
Ë0

	)

151 #ifdef 
__USE_POSIX199309


152 
	#S_TYPEISMQ
(
buf
Ë
	`__S_TYPEISMQ
(buf)

	)

153 
	#S_TYPEISSEM
(
buf
Ë
	`__S_TYPEISSEM
(buf)

	)

154 
	#S_TYPEISSHM
(
buf
Ë
	`__S_TYPEISSHM
(buf)

	)

160 
	#S_ISUID
 
__S_ISUID


	)

161 
	#S_ISGID
 
__S_ISGID


	)

163 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


165 
	#S_ISVTX
 
__S_ISVTX


	)

168 
	#S_IRUSR
 
__S_IREAD


	)

169 
	#S_IWUSR
 
__S_IWRITE


	)

170 
	#S_IXUSR
 
__S_IEXEC


	)

172 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

174 #ifde‡
__USE_MISC


175 
	#S_IREAD
 
S_IRUSR


	)

176 
	#S_IWRITE
 
S_IWUSR


	)

177 
	#S_IEXEC
 
S_IXUSR


	)

180 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

181 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

182 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

184 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

186 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

187 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

188 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

190 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

193 #ifdef 
__USE_MISC


195 
	#ACCESSPERMS
 (
S_IRWXU
|
S_IRWXG
|
S_IRWXO
Ë

	)

196 
	#ALLPERMS
 (
S_ISUID
|
S_ISGID
|
S_ISVTX
|
S_IRWXU
|
S_IRWXG
|
S_IRWXO
)

	)

197 
	#DEFFILEMODE
 (
S_IRUSR
|
S_IWUSR
|
S_IRGRP
|
S_IWGRP
|
S_IROTH
|
S_IWOTH
)

	)

199 
	#S_BLKSIZE
 512

	)

203 #i‚de‡
__USE_FILE_OFFSET64


205 
	$°©
 (c⁄° *
__ª°ri˘
 
__fûe
,

206 
°©
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

210 
	$f°©
 (
__fd
, 
°©
 *
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

212 #ifde‡
__USE_TIME_BITS64


213 #ifde‡
__REDIRECT_NTH


214 
	`__REDIRECT_NTH
 (
°©
, (c⁄° *
__ª°ri˘
 
__fûe
,

215 
°©
 *
__ª°ri˘
 
__buf
),

216 
__°©64_time64
)

217 
	`__n⁄nuŒ
 ((1, 2));

218 
	`__REDIRECT_NTH
 (
f°©
, (
__fd
, 
°©
 *
__buf
),

219 
__f°©64_time64
)

220 
	`__n⁄nuŒ
 ((2));

222 
	#°©
 
__°©64_time64


	)

223 
	#f°©
 
__f°©64_time64


	)

226 #ifde‡
__REDIRECT_NTH


227 
	`__REDIRECT_NTH
 (
°©
, (c⁄° *
__ª°ri˘
 
__fûe
,

228 
°©
 *
__ª°ri˘
 
__buf
), 
°©64
)

229 
	`__n⁄nuŒ
 ((1, 2));

230 
	`__REDIRECT_NTH
 (
f°©
, (
__fd
, 
°©
 *
__buf
), 
f°©64
)

231 
	`__n⁄nuŒ
 ((2));

233 
	#°©
 
°©64


	)

234 
	#f°©
 
f°©64


	)

238 #ifde‡
__USE_LARGEFILE64


239 #i‚de‡
__USE_TIME_BITS64


240 
	$°©64
 (c⁄° *
__ª°ri˘
 
__fûe
,

241 
°©64
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

242 
	$f°©64
 (
__fd
, 
°©64
 *
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

244 #ifde‡
__REDIRECT_NTH


245 
	`__REDIRECT_NTH
 (
°©64
, (c⁄° *
__ª°ri˘
 
__fûe
,

246 
°©64
 *
__ª°ri˘
 
__buf
),

247 
__°©64_time64
)

248 
	`__n⁄nuŒ
 ((1, 2));

249 
	`__REDIRECT_NTH
 (
f°©64
, (
__fd
, 
°©64
 *
__buf
),

250 
__f°©64_time64
)

251 
	`__n⁄nuŒ
 ((2));

253 
	#°©64
 
__°©64_time64


	)

254 
	#f°©64
 
__f°©64_time


	)

259 #ifde‡
__USE_ATFILE


263 #i‚de‡
__USE_FILE_OFFSET64


264 
	$f°©©
 (
__fd
, c⁄° *
__ª°ri˘
 
__fûe
,

265 
°©
 *
__ª°ri˘
 
__buf
, 
__Êag
)

266 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

268 #ifde‡
__USE_TIME_BITS64


269 #ifde‡
__REDIRECT_NTH


270 
	`__REDIRECT_NTH
 (
f°©©
, (
__fd
, c⁄° *
__ª°ri˘
 
__fûe
,

271 
°©
 *
__ª°ri˘
 
__buf
,

272 
__Êag
),

273 
__f°©©64_time64
Ë
	`__n⁄nuŒ
 ((2, 3));

275 
	#f°©©
 
__f°©©64_time64


	)

278 #ifde‡
__REDIRECT_NTH


279 
	`__REDIRECT_NTH
 (
f°©©
, (
__fd
, c⁄° *
__ª°ri˘
 
__fûe
,

280 
°©
 *
__ª°ri˘
 
__buf
,

281 
__Êag
),

282 
f°©©64
Ë
	`__n⁄nuŒ
 ((2, 3));

284 
	#f°©©
 
f°©©64


	)

289 #ifde‡
__USE_LARGEFILE64


290 #i‚de‡
__USE_TIME_BITS64


291 
	$f°©©64
 (
__fd
, c⁄° *
__ª°ri˘
 
__fûe
,

292 
°©64
 *
__ª°ri˘
 
__buf
, 
__Êag
)

293 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

295 #ifde‡
__REDIRECT_NTH


296 
	`__REDIRECT_NTH
 (
f°©©64
, (
__fd
,

297 c⁄° *
__ª°ri˘
 
__fûe
,

298 
°©64
 *
__ª°ri˘
 
__buf
,

299 
__Êag
),

300 
__f°©©64_time64
)

301 
	`__n⁄nuŒ
 ((2, 3));

303 
	#f°©©64
 
__f°©©64_time64


	)

309 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


310 #i‚de‡
__USE_FILE_OFFSET64


313 
	$l°©
 (c⁄° *
__ª°ri˘
 
__fûe
,

314 
°©
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

316 #ifde‡
__USE_TIME_BITS64


317 #ifde‡
__REDIRECT_NTH


318 
	`__REDIRECT_NTH
 (
l°©
,

319 (c⁄° *
__ª°ri˘
 
__fûe
,

320 
°©
 *
__ª°ri˘
 
__buf
), 
__l°©64_time64
)

321 
	`__n⁄nuŒ
 ((1, 2));

323 
	#l°©
 
__l°©64_time64


	)

326 #ifde‡
__REDIRECT_NTH


327 
	`__REDIRECT_NTH
 (
l°©
,

328 (c⁄° *
__ª°ri˘
 
__fûe
,

329 
°©
 *
__ª°ri˘
 
__buf
), 
l°©64
)

330 
	`__n⁄nuŒ
 ((1, 2));

332 
	#l°©
 
l°©64


	)

336 #ifde‡
__USE_LARGEFILE64


337 #i‚de‡
__USE_TIME_BITS64


338 
	$l°©64
 (c⁄° *
__ª°ri˘
 
__fûe
,

339 
°©64
 *
__ª°ri˘
 
__buf
)

340 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

342 
	`__REDIRECT_NTH
 (
l°©64
, (c⁄° *
__ª°ri˘
 
__fûe
,

343 
°©64
 *
__ª°ri˘
 
__buf
),

344 
__l°©64_time64
)

345 
	`__n⁄nuŒ
 ((1, 2));

352 
	$chmod
 (c⁄° *
__fûe
, 
__mode_t
 
__mode
)

353 
__THROW
 
	`__n⁄nuŒ
 ((1));

355 #ifde‡
__USE_MISC


359 
	$lchmod
 (c⁄° *
__fûe
, 
__mode_t
 
__mode
)

360 
__THROW
 
	`__n⁄nuŒ
 ((1));

364 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_XOPEN_EXTENDED


365 
	$fchmod
 (
__fd
, 
__mode_t
 
__mode
Ë
__THROW
;

368 #ifde‡
__USE_ATFILE


371 
	$fchmod©
 (
__fd
, c⁄° *
__fûe
, 
__mode_t
 
__mode
,

372 
__Êag
)

373 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

380 
__mode_t
 
	$umask
 (
__mode_t
 
__mask
Ë
__THROW
;

382 #ifdef 
__USE_GNU


385 
__mode_t
 
	$gëumask
 (Ë
__THROW
;

389 
	$mkdú
 (c⁄° *
__∑th
, 
__mode_t
 
__mode
)

390 
__THROW
 
	`__n⁄nuŒ
 ((1));

392 #ifde‡
__USE_ATFILE


396 
	$mkdú©
 (
__fd
, c⁄° *
__∑th
, 
__mode_t
 
__mode
)

397 
__THROW
 
	`__n⁄nuŒ
 ((2));

403 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


404 
	$mknod
 (c⁄° *
__∑th
, 
__mode_t
 
__mode
, 
__dev_t
 
__dev
)

405 
__THROW
 
	`__n⁄nuŒ
 ((1));

407 #ifde‡
__USE_ATFILE


411 
	$mknod©
 (
__fd
, c⁄° *
__∑th
, 
__mode_t
 
__mode
,

412 
__dev_t
 
__dev
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

418 
	$mkfifo
 (c⁄° *
__∑th
, 
__mode_t
 
__mode
)

419 
__THROW
 
	`__n⁄nuŒ
 ((1));

421 #ifde‡
__USE_ATFILE


425 
	$mkfifﬂt
 (
__fd
, c⁄° *
__∑th
, 
__mode_t
 
__mode
)

426 
__THROW
 
	`__n⁄nuŒ
 ((2));

429 #ifde‡
__USE_ATFILE


430 #i‚de‡
__USE_TIME_BITS64


433 
	$utimíßt
 (
__fd
, c⁄° *
__∑th
,

434 c⁄° 
time•ec
 
__times
[2],

435 
__Êags
)

436 
__THROW
 
	`__n⁄nuŒ
 ((2));

438 #ifde‡
__REDIRECT_NTH


439 
	`__REDIRECT_NTH
 (
utimíßt
, (
fd
, c⁄° *
__∑th
,

440 c⁄° 
time•ec
 
__times
[2],

441 
Êags
),

442 
__utimíßt64
Ë
	`__n⁄nuŒ
 ((2));

444 
	#utimíßt
 
__utimíßt64


	)

449 #ifde‡
__USE_XOPEN2K8


450 #i‚de‡
__USE_TIME_BITS64


452 
	$futimís
 (
__fd
, c⁄° 
time•ec
 
__times
[2]Ë
__THROW
;

455 #ifde‡
__REDIRECT_NTH


456 
	`__REDIRECT_NTH
 (
futimís
, (
fd
, c⁄° 
time•ec
 
__times
[2]),

457 
__futimís64
);

459 
	#futimís
 
__futimís64


	)

464 #ifde‡
__USE_GNU


465 
	~<bôs/°©x.h
>

468 
__END_DECLS


	@/usr/include/x86_64-linux-gnu/sys/statfs.h

19 #i‚def 
_SYS_STATFS_H


20 
	#_SYS_STATFS_H
 1

	)

22 
	~<„©uªs.h
>

25 
	~<bôs/°©fs.h
>

27 
	g__BEGIN_DECLS


30 #i‚de‡
__USE_FILE_OFFSET64


31 
	$°©fs
 (c⁄° *
__fûe
, 
°©fs
 *
__buf
)

32 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

34 #ifde‡
__REDIRECT_NTH


35 
	`__REDIRECT_NTH
 (
°©fs
,

36 (c⁄° *
__fûe
, 
°©fs
 *
__buf
),

37 
°©fs64
Ë
	`__n⁄nuŒ
 ((1, 2));

39 
	#°©fs
 
°©fs64


	)

42 #ifde‡
__USE_LARGEFILE64


43 
	$°©fs64
 (c⁄° *
__fûe
, 
°©fs64
 *
__buf
)

44 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

49 #i‚de‡
__USE_FILE_OFFSET64


50 
	$f°©fs
 (
__fûdes
, 
°©fs
 *
__buf
)

51 
__THROW
 
	`__n⁄nuŒ
 ((2));

53 #ifde‡
__REDIRECT_NTH


54 
	`__REDIRECT_NTH
 (
f°©fs
, (
__fûdes
, 
°©fs
 *
__buf
),

55 
f°©fs64
Ë
	`__n⁄nuŒ
 ((2));

57 
	#f°©fs
 
f°©fs64


	)

60 #ifde‡
__USE_LARGEFILE64


61 
	$f°©fs64
 (
__fûdes
, 
°©fs64
 *
__buf
)

62 
__THROW
 
	`__n⁄nuŒ
 ((2));

65 
__END_DECLS


	@/usr/include/x86_64-linux-gnu/sys/statvfs.h

19 #i‚def 
_SYS_STATVFS_H


20 
	#_SYS_STATVFS_H
 1

	)

22 
	~<„©uªs.h
>

25 
	~<bôs/°©vfs.h
>

27 #i‚de‡
__USE_FILE_OFFSET64


28 #i‚de‡
__fsblk˙t_t_deföed


29 
__fsblk˙t_t
 
	tfsblk˙t_t
;

30 
	#__fsblk˙t_t_deföed


	)

32 #i‚de‡
__fsfû˙t_t_deföed


33 
__fsfû˙t_t
 
	tfsfû˙t_t
;

34 
	#__fsfû˙t_t_deföed


	)

37 #i‚de‡
__fsblk˙t_t_deföed


38 
__fsblk˙t64_t
 
	tfsblk˙t_t
;

39 
	#__fsblk˙t_t_deföed


	)

41 #i‚de‡
__fsfû˙t_t_deföed


42 
__fsfû˙t64_t
 
	tfsfû˙t_t
;

43 
	#__fsfû˙t_t_deföed


	)

47 
	g__BEGIN_DECLS


50 #i‚de‡
__USE_FILE_OFFSET64


51 
	$°©vfs
 (c⁄° *
__ª°ri˘
 
__fûe
,

52 
°©vfs
 *
__ª°ri˘
 
__buf
)

53 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

55 #ifde‡
__REDIRECT_NTH


56 
	`__REDIRECT_NTH
 (
°©vfs
,

57 (c⁄° *
__ª°ri˘
 
__fûe
,

58 
°©vfs
 *
__ª°ri˘
 
__buf
), 
°©vfs64
)

59 
	`__n⁄nuŒ
 ((1, 2));

61 
	#°©vfs
 
°©vfs64


	)

64 #ifde‡
__USE_LARGEFILE64


65 
	$°©vfs64
 (c⁄° *
__ª°ri˘
 
__fûe
,

66 
°©vfs64
 *
__ª°ri˘
 
__buf
)

67 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

72 #i‚de‡
__USE_FILE_OFFSET64


73 
	$f°©vfs
 (
__fûdes
, 
°©vfs
 *
__buf
)

74 
__THROW
 
	`__n⁄nuŒ
 ((2));

76 #ifde‡
__REDIRECT_NTH


77 
	`__REDIRECT_NTH
 (
f°©vfs
, (
__fûdes
, 
°©vfs
 *
__buf
),

78 
f°©vfs64
Ë
	`__n⁄nuŒ
 ((2));

80 
	#f°©vfs
 
f°©vfs64


	)

83 #ifde‡
__USE_LARGEFILE64


84 
	$f°©vfs64
 (
__fûdes
, 
°©vfs64
 *
__buf
)

85 
__THROW
 
	`__n⁄nuŒ
 ((2));

88 
__END_DECLS


	@/usr/include/x86_64-linux-gnu/sys/swap.h

19 #i‚de‡
_SYS_SWAP_H


21 
	#_SYS_SWAP_H
 1

	)

22 
	~<„©uªs.h
>

27 
	#SWAP_FLAG_PREFER
 0x8000

	)

28 
	#SWAP_FLAG_PRIO_MASK
 0x7fff

	)

29 
	#SWAP_FLAG_PRIO_SHIFT
 0

	)

30 
	#SWAP_FLAG_DISCARD
 0x10000

	)

32 
__BEGIN_DECLS


36 
	$sw≠⁄
 (c⁄° *
__∑th
, 
__Êags
Ë
__THROW
;

39 
	$sw≠off
 (c⁄° *
__∑th
Ë
__THROW
;

41 
__END_DECLS


	@/usr/include/x86_64-linux-gnu/sys/syscall.h

18 #i‚de‡
_SYSCALL_H


19 
	#_SYSCALL_H
 1

	)

24 
	~<asm/uni°d.h
>

29 
	~<bôs/sysˇŒ.h
>

	@/usr/include/x86_64-linux-gnu/sys/sysinfo.h

18 #i‚de‡
_SYS_SYSINFO_H


19 
	#_SYS_SYSINFO_H
 1

	)

21 
	~<„©uªs.h
>

24 
	~<löux/kî√l.h
>

26 
__BEGIN_DECLS


29 
	$sysöfo
 (
sysöfo
 *
__öfo
Ë
__THROW
;

33 
	$gë_≈rocs_c⁄f
 (Ë
__THROW
;

36 
	$gë_≈rocs
 (Ë
__THROW
;

40 
	$gë_phys_∑ges
 (Ë
__THROW
;

43 
	$gë_avphys_∑ges
 (Ë
__THROW
;

45 
__END_DECLS


	@/usr/include/x86_64-linux-gnu/sys/syslog.h

32 #i‚de‡
_SYS_SYSLOG_H


33 
	#_SYS_SYSLOG_H
 1

	)

35 
	~<„©uªs.h
>

36 
	#__√ed___va_li°


	)

37 
	~<°d¨g.h
>

40 
	~<bôs/sy¶og-∑th.h
>

51 
	#LOG_EMERG
 0

	)

52 
	#LOG_ALERT
 1

	)

53 
	#LOG_CRIT
 2

	)

54 
	#LOG_ERR
 3

	)

55 
	#LOG_WARNING
 4

	)

56 
	#LOG_NOTICE
 5

	)

57 
	#LOG_INFO
 6

	)

58 
	#LOG_DEBUG
 7

	)

60 
	#LOG_PRIMASK
 0x07

	)

62 
	#LOG_PRI
(
p
Ë(’Ë& 
LOG_PRIMASK
)

	)

63 
	#LOG_MAKEPRI
(
Ác
, 
¥i
Ë((ÁcË| (¥i))

	)

65 #ifde‡
SYSLOG_NAMES


66 
	#INTERNAL_NOPRI
 0x10

	)

68 
	#INTERNAL_MARK
 
	`LOG_MAKEPRI
(
LOG_NFACILITIES
 << 3, 0)

	)

69 
	s_code
 {

70 *
	mc_«me
;

71 
	mc_vÆ
;

72 } 
	tCODE
;

74 
CODE
 
	g¥i‹ôy«mes
[] =

76 { "Æît", 
LOG_ALERT
 },

77 { "¸ô", 
LOG_CRIT
 },

78 { "debug", 
LOG_DEBUG
 },

79 { "emîg", 
LOG_EMERG
 },

80 { "îr", 
LOG_ERR
 },

81 { "îr‹", 
LOG_ERR
 },

82 { "öfo", 
LOG_INFO
 },

83 { "n⁄e", 
INTERNAL_NOPRI
 },

84 { "nŸi˚", 
LOG_NOTICE
 },

85 { "∑nic", 
LOG_EMERG
 },

86 { "w¨n", 
LOG_WARNING
 },

87 { "w¨nög", 
LOG_WARNING
 },

88 { 
NULL
, -1 }

93 
	#LOG_KERN
 (0<<3Ë

	)

94 
	#LOG_USER
 (1<<3Ë

	)

95 
	#LOG_MAIL
 (2<<3Ë

	)

96 
	#LOG_DAEMON
 (3<<3Ë

	)

97 
	#LOG_AUTH
 (4<<3Ë

	)

98 
	#LOG_SYSLOG
 (5<<3Ë

	)

99 
	#LOG_LPR
 (6<<3Ë

	)

100 
	#LOG_NEWS
 (7<<3Ë

	)

101 
	#LOG_UUCP
 (8<<3Ë

	)

102 
	#LOG_CRON
 (9<<3Ë

	)

103 
	#LOG_AUTHPRIV
 (10<<3Ë

	)

104 
	#LOG_FTP
 (11<<3Ë

	)

107 
	#LOG_LOCAL0
 (16<<3Ë

	)

108 
	#LOG_LOCAL1
 (17<<3Ë

	)

109 
	#LOG_LOCAL2
 (18<<3Ë

	)

110 
	#LOG_LOCAL3
 (19<<3Ë

	)

111 
	#LOG_LOCAL4
 (20<<3Ë

	)

112 
	#LOG_LOCAL5
 (21<<3Ë

	)

113 
	#LOG_LOCAL6
 (22<<3Ë

	)

114 
	#LOG_LOCAL7
 (23<<3Ë

	)

116 
	#LOG_NFACILITIES
 24

	)

117 
	#LOG_FACMASK
 0x03f8

	)

119 
	#LOG_FAC
(
p
Ë((’Ë& 
LOG_FACMASK
Ë>> 3)

	)

121 #ifde‡
SYSLOG_NAMES


122 
CODE
 
	gÁcûôy«mes
[] =

124 { "auth", 
LOG_AUTH
 },

125 { "auth¥iv", 
LOG_AUTHPRIV
 },

126 { "¸⁄", 
LOG_CRON
 },

127 { "d´m⁄", 
LOG_DAEMON
 },

128 { "·p", 
LOG_FTP
 },

129 { "kîn", 
LOG_KERN
 },

130 { "Õr", 
LOG_LPR
 },

131 { "maû", 
LOG_MAIL
 },

132 { "m¨k", 
INTERNAL_MARK
 },

133 { "√ws", 
LOG_NEWS
 },

134 { "£curôy", 
LOG_AUTH
 },

135 { "sy¶og", 
LOG_SYSLOG
 },

136 { "u£r", 
LOG_USER
 },

137 { "uu˝", 
LOG_UUCP
 },

138 { "loˇl0", 
LOG_LOCAL0
 },

139 { "loˇl1", 
LOG_LOCAL1
 },

140 { "loˇl2", 
LOG_LOCAL2
 },

141 { "loˇl3", 
LOG_LOCAL3
 },

142 { "loˇl4", 
LOG_LOCAL4
 },

143 { "loˇl5", 
LOG_LOCAL5
 },

144 { "loˇl6", 
LOG_LOCAL6
 },

145 { "loˇl7", 
LOG_LOCAL7
 },

146 { 
NULL
, -1 }

153 
	#LOG_MASK
(
¥i
Ë(1 << (¥i)Ë

	)

154 
	#LOG_UPTO
(
¥i
Ë((1 << (’ri)+1)Ë- 1Ë

	)

162 
	#LOG_PID
 0x01

	)

163 
	#LOG_CONS
 0x02

	)

164 
	#LOG_ODELAY
 0x04

	)

165 
	#LOG_NDELAY
 0x08

	)

166 
	#LOG_NOWAIT
 0x10

	)

167 
	#LOG_PERROR
 0x20

	)

169 
__BEGIN_DECLS


175 
˛o£log
 ();

181 
›ílog
 (c⁄° *
__idít
, 
__›ti⁄
, 
__Ácûôy
);

184 
	$£éogmask
 (
__mask
Ë
__THROW
;

190 
	$sy¶og
 (
__¥i
, c⁄° *
__fmt
, ...)

191 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

193 #ifde‡
__USE_MISC


200 
	$vsy¶og
 (
__¥i
, c⁄° *
__fmt
, 
__gnuc_va_li°
 
__≠
)

201 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

206 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


207 
	~<bôs/sy¶og.h
>

210 
	~<bôs/Êﬂä.h
>

211 #i‡
deföed
 
__LDBL_COMPAT
 || 
__LDOUBLE_REDIRECTS_TO_FLOAT128_ABI
 == 1

212 
	~<bôs/sy¶og-ldbl.h
>

215 
__END_DECLS


	@/usr/include/x86_64-linux-gnu/sys/sysmacros.h

19 #i‚de‡
_SYS_SYSMACROS_H


20 
	#_SYS_SYSMACROS_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<bôs/ty≥s.h
>

24 
	~<bôs/sysma¸os.h
>

26 
	#__SYSMACROS_DECL_TEMPL
(
πy≥
, 
«me
, 
¥Ÿo
) \

27 
πy≥
 
gnu_dev_
##
«me
 
¥Ÿo
 
__THROW
 
__©åibuã_c⁄°__
;

	)

29 
	#__SYSMACROS_IMPL_TEMPL
(
πy≥
, 
«me
, 
¥Ÿo
) \

30 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 
πy≥
 \

31 
	`__NTH
 (
gnu_dev_
##
«me
 
¥Ÿo
)

	)

33 
__BEGIN_DECLS


35 
	$__SYSMACROS_DECLARE_MAJOR
 (
__SYSMACROS_DECL_TEMPL
)

36 
	$__SYSMACROS_DECLARE_MINOR
 (
__SYSMACROS_DECL_TEMPL
)

37 
	$__SYSMACROS_DECLARE_MAKEDEV
 (
__SYSMACROS_DECL_TEMPL
)

39 #ifde‡
__USE_EXTERN_INLINES


41 
	$__SYSMACROS_DEFINE_MAJOR
 (
__SYSMACROS_IMPL_TEMPL
)

42 
	$__SYSMACROS_DEFINE_MINOR
 (
__SYSMACROS_IMPL_TEMPL
)

43 
	$__SYSMACROS_DEFINE_MAKEDEV
 (
__SYSMACROS_IMPL_TEMPL
)

47 
__END_DECLS


49 #i‚de‡
__SYSMACROS_NEED_IMPLEMENTATION


50 #unde‡
__SYSMACROS_DECL_TEMPL


51 #unde‡
__SYSMACROS_IMPL_TEMPL


52 #unde‡
__SYSMACROS_DECLARE_MAJOR


53 #unde‡
__SYSMACROS_DECLARE_MINOR


54 #unde‡
__SYSMACROS_DECLARE_MAKEDEV


55 #unde‡
__SYSMACROS_DEFINE_MAJOR


56 #unde‡
__SYSMACROS_DEFINE_MINOR


57 #unde‡
__SYSMACROS_DEFINE_MAKEDEV


60 
	#maj‹
(
dev
Ë
	`gnu_dev_maj‹
 (dev)

	)

61 
	#mö‹
(
dev
Ë
	`gnu_dev_mö‹
 (dev)

	)

62 
	#makedev
(
maj
, 
mö
Ë
	`gnu_dev_makedev
 (maj, mö)

	)

	@/usr/include/x86_64-linux-gnu/sys/termios.h

1 #i‚de‡
_SYS_TERMIOS_H


2 
	#_SYS_TERMIOS_H


	)

3 
	~<ãrmios.h
>

	@/usr/include/x86_64-linux-gnu/sys/time.h

18 #i‚de‡
_SYS_TIME_H


19 
	#_SYS_TIME_H
 1

	)

21 
	~<„©uªs.h
>

23 
	~<bôs/ty≥s.h
>

24 
	~<bôs/ty≥s/time_t.h
>

25 
	~<bôs/ty≥s/°ru˘_timevÆ.h
>

27 #i‚de‡
__su£c⁄ds_t_deföed


28 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

29 
	#__su£c⁄ds_t_deföed


	)

32 
	~<sys/£À˘.h
>

34 
	g__BEGIN_DECLS


36 #ifde‡
__USE_GNU


38 
	#TIMEVAL_TO_TIMESPEC
(
tv
, 
ts
) { \

39 (
ts
)->
tv_£c
 = (
tv
)->tv_sec; \

40 (
ts
)->
tv_n£c
 = (
tv
)->
tv_u£c
 * 1000; \

41 }

	)

42 
	#TIMESPEC_TO_TIMEVAL
(
tv
, 
ts
) { \

43 (
tv
)->
tv_£c
 = (
ts
)->tv_sec; \

44 (
tv
)->
tv_u£c
 = (
ts
)->
tv_n£c
 / 1000; \

45 }

	)

49 #ifde‡
__USE_MISC


52 
	stimez⁄e


54 
	mtz_möuãswe°
;

55 
	mtz_d°time
;

66 #i‚de‡
__USE_TIME_BITS64


67 
	$gëtimeofday
 (
timevÆ
 *
__ª°ri˘
 
__tv
,

68 *
__ª°ri˘
 
__tz
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

70 #ifde‡
__REDIRECT_NTH


71 
	`__REDIRECT_NTH
 (
gëtimeofday
, (
timevÆ
 *
__ª°ri˘
 
__tv
,

72 *
__ª°ri˘
 
__tz
),

73 
__gëtimeofday64
Ë
	`__n⁄nuŒ
 ((1));

75 
	#gëtimeofday
 
__gëtimeofday64


	)

79 #ifde‡
__USE_MISC


80 #i‚de‡
__USE_TIME_BITS64


86 
	$£âimeofday
 (c⁄° 
timevÆ
 *
__tv
,

87 c⁄° 
timez⁄e
 *
__tz
)

88 
__THROW
;

94 
	$adjtime
 (c⁄° 
timevÆ
 *
__dñè
,

95 
timevÆ
 *
__ﬁddñè
Ë
__THROW
;

97 #ifde‡
__REDIRECT_NTH


98 
	`__REDIRECT_NTH
 (
£âimeofday
, (c⁄° 
timevÆ
 *
__tv
,

99 c⁄° 
timez⁄e
 *
__tz
),

100 
__£âimeofday64
);

102 
	`__REDIRECT_NTH
 (
adjtime
, (c⁄° 
timevÆ
 *
__dñè
,

103 
timevÆ
 *
__ﬁddñè
),

104 
__adjtime64
);

106 
	#£âimeofday
 
__£âimeofday64


	)

107 
	#adjtime
 
__adjtime64


	)

114 
	e__ôimî_which


117 
ITIMER_REAL
 = 0,

118 
	#ITIMER_REAL
 
ITIMER_REAL


	)

120 
ITIMER_VIRTUAL
 = 1,

121 
	#ITIMER_VIRTUAL
 
ITIMER_VIRTUAL


	)

124 
ITIMER_PROF
 = 2

125 
	#ITIMER_PROF
 
ITIMER_PROF


	)

130 
	sôimîvÆ


133 
timevÆ
 
ô_öãrvÆ
;

135 
timevÆ
 
ô_vÆue
;

138 #i‡
deföed
 
__USE_GNU
 && !deföed 
__˝lu•lus


141 
__ôimî_which
 
	t__ôimî_which_t
;

143 
	t__ôimî_which_t
;

146 #i‚de‡
__USE_TIME_BITS64


149 
	$gëôimî
 (
__ôimî_which_t
 
__which
,

150 
ôimîvÆ
 *
__vÆue
Ë
__THROW
;

155 
	$£tôimî
 (
__ôimî_which_t
 
__which
,

156 c⁄° 
ôimîvÆ
 *
__ª°ri˘
 
__√w
,

157 
ôimîvÆ
 *
__ª°ri˘
 
__ﬁd
Ë
__THROW
;

162 
	$utimes
 (c⁄° *
__fûe
, c⁄° 
timevÆ
 
__tvp
[2])

163 
__THROW
 
	`__n⁄nuŒ
 ((1));

166 #ifde‡
__REDIRECT_NTH


167 
	`__REDIRECT_NTH
 (
gëôimî
, (
__ôimî_which_t
 
__which
,

168 
ôimîvÆ
 *
__vÆue
),

169 
__gëôimî64
);

171 
	`__REDIRECT_NTH
 (
£tôimî
, (
__ôimî_which_t
 
__which
,

172 c⁄° 
ôimîvÆ
 *
__ª°ri˘
 
__√w
,

173 
ôimîvÆ
 *
__ª°ri˘
 
__ﬁd
),

174 
__£tôimî64
);

176 
	`__REDIRECT_NTH
 (
utimes
, (c⁄° *
__fûe
,

177 c⁄° 
timevÆ
 
__tvp
[2]),

178 
__utimes64
Ë
	`__n⁄nuŒ
 ((1));

180 
	#gëôimî
 
__gëôimî64


	)

181 
	#£tôimî
 
__£tôimî64


	)

182 
	#utimes
 
__utimes64


	)

186 #ifde‡
__USE_MISC


187 #i‚de‡
__USE_TIME_BITS64


189 
	$lutimes
 (c⁄° *
__fûe
, c⁄° 
timevÆ
 
__tvp
[2])

190 
__THROW
 
	`__n⁄nuŒ
 ((1));

193 
	$futimes
 (
__fd
, c⁄° 
timevÆ
 
__tvp
[2]Ë
__THROW
;

195 #ifde‡
__REDIRECT_NTH


196 
	`__REDIRECT_NTH
 (
lutimes
, (c⁄° *
__fûe
,

197 c⁄° 
timevÆ
 
__tvp
[2]),

198 
__lutimes64
Ë
	`__n⁄nuŒ
 ((1));

200 
	`__REDIRECT_NTH
 (
futimes
, (
__fd
, c⁄° 
timevÆ
 
__tvp
[2]),

201 
__futimes64
);

203 
	#lutimes
 
__lutimes64


	)

204 
	#futimes
 
__futimes64


	)

209 #ifde‡
__USE_GNU


210 #i‚de‡
__USE_TIME_BITS64


214 
	$futimeßt
 (
__fd
, c⁄° *
__fûe
,

215 c⁄° 
timevÆ
 
__tvp
[2]Ë
__THROW
;

217 #ifde‡
__REDIRECT_NTH


218 
	`__REDIRECT_NTH
 (
futimeßt
, (
__fd
, c⁄° *
__fûe
,

219 c⁄° 
timevÆ
 
__tvp
[2]),

220 
__futimeßt64
);

222 
	#futimeßt
 
__futimeßt64


	)

228 #ifde‡
__USE_MISC


231 
	#timîis£t
(
tvp
Ë(—vp)->
tv_£c
 || (tvp)->
tv_u£c
)

	)

232 
	#timî˛ór
(
tvp
Ë(—vp)->
tv_£c
 = (tvp)->
tv_u£c
 = 0)

	)

233 
	#timîcmp
(
a
, 
b
, 
CMP
) \

234 (((
a
)->
tv_£c
 =(
b
)->tv_sec) \

235 ? ((
a
)->
tv_u£c
 
	`CMP
 (
b
)->tv_usec) \

236 : ((
a
)->
tv_£c
 
	`CMP
 (
b
)->tv_£c))

	)

237 
	#timîadd
(
a
, 
b
, 
ªsu…
) \

239 (
ªsu…
)->
tv_£c
 = (
a
)->tv_£¯+ (
b
)->tv_sec; \

240 (
ªsu…
)->
tv_u£c
 = (
a
)->tv_u£¯+ (
b
)->tv_usec; \

241 i‡((
ªsu…
)->
tv_u£c
 >= 1000000) \

243 ++(
ªsu…
)->
tv_£c
; \

244 (
ªsu…
)->
tv_u£c
 -= 1000000; \

246 
	}
} 0)

	)

247 
	#timîsub
(
a
, 
b
, 
ªsu…
) \

249 (
ªsu…
)->
tv_£c
 = (
a
)->tv_£¯- (
b
)->tv_sec; \

250 (
ªsu…
)->
tv_u£c
 = (
a
)->tv_u£¯- (
b
)->tv_usec; \

251 i‡((
ªsu…
)->
tv_u£c
 < 0) { \

252 --(
ªsu…
)->
tv_£c
; \

253 (
ªsu…
)->
tv_u£c
 += 1000000; \

255 } 0)

	)

258 
	g__END_DECLS


	@/usr/include/x86_64-linux-gnu/sys/timeb.h

18 #i‚de‡
_SYS_TIMEB_H


19 
	#_SYS_TIMEB_H
 1

	)

21 
	~<„©uªs.h
>

23 
	g__BEGIN_DECLS


25 
	~<bôs/ty≥s/°ru˘_timeb.h
>

29 
	$·ime
 (
timeb
 *
__timebuf
)

30 
	`__n⁄nuŒ
 ((1))

31 
	`__©åibuã_dïªˇãd_msg__
 ("Use gettimeofday or clock_gettime instead");

33 
__END_DECLS


	@/usr/include/x86_64-linux-gnu/sys/timerfd.h

18 #i‚def 
_SYS_TIMERFD_H


19 
	#_SYS_TIMERFD_H
 1

	)

21 
	~<time.h
>

22 
	~<bôs/ty≥s/°ru˘_ôimî•ec.h
>

25 
	~<bôs/timîfd.h
>

31 
	mTFD_TIMER_ABSTIME
 = 1 << 0,

32 
	#TFD_TIMER_ABSTIME
 
TFD_TIMER_ABSTIME


	)

33 
	mTFD_TIMER_CANCEL_ON_SET
 = 1 << 1

34 
	#TFD_TIMER_CANCEL_ON_SET
 
TFD_TIMER_CANCEL_ON_SET


	)

38 
__BEGIN_DECLS


41 
	$timîfd_¸óã
 (
__˛ockid_t
 
__˛ock_id
, 
__Êags
Ë
__THROW
;

46 
	$timîfd_£âime
 (
__ufd
, 
__Êags
,

47 c⁄° 
ôimî•ec
 *
__utmr
,

48 
ôimî•ec
 *
__Ÿmr
Ë
__THROW
;

50 #ifde‡
__USE_TIME_BITS64


51 #i‡
	`deföed
(
__REDIRECT_NTH
)

52 
	`__REDIRECT_NTH
 (
timîfd_£âime
,

53 (
__ufd
, 
__Êags
,

54 c⁄° 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

55 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
),

56 
__timîfd_£âime64
);

58 
	#timîfd_£âime
 
__timîfd_£âime64


	)

63 
	$timîfd_gëtime
 (
__ufd
, 
ôimî•ec
 *
__Ÿmr
Ë
__THROW
;

65 #ifde‡
__USE_TIME_BITS64


66 #i‡
	`deföed
(
__REDIRECT_NTH
)

67 
	`__REDIRECT_NTH
 (
timîfd_gëtime
, (
__ufd
,

68 
ôimî•ec
 *
__Ÿmr
),

69 
__timîfd_gëtime64
);

71 
	#timîfd_gëtime
 
__timîfd_gëtime64


	)

75 
__END_DECLS


	@/usr/include/x86_64-linux-gnu/sys/times.h

22 #i‚def 
_SYS_TIMES_H


23 
	#_SYS_TIMES_H
 1

	)

25 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s/˛ock_t.h
>

29 
__BEGIN_DECLS


32 
	stms


34 
˛ock_t
 
	mtms_utime
;

35 
˛ock_t
 
	mtms_°ime
;

37 
˛ock_t
 
	mtms_cutime
;

38 
˛ock_t
 
	mtms_c°ime
;

46 
˛ock_t
 
	$times
 (
tms
 *
__buf„r
Ë
__THROW
;

48 
__END_DECLS


	@/usr/include/x86_64-linux-gnu/sys/timex.h

18 #i‚def 
_SYS_TIMEX_H


19 
	#_SYS_TIMEX_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<sys/time.h
>

26 
	~<bôs/timex.h
>

28 
	#NTP_API
 4

	)

30 
	s¡±imevÆ


32 
timevÆ
 
	mtime
;

33 
	mmaxîr‹
;

34 
	me°îr‹
;

35 
	mèi
;

37 
	m__glibc_ª£rved1
;

38 
	m__glibc_ª£rved2
;

39 
	m__glibc_ª£rved3
;

40 
	m__glibc_ª£rved4
;

44 
	#TIME_OK
 0

	)

45 
	#TIME_INS
 1

	)

46 
	#TIME_DEL
 2

	)

47 
	#TIME_OOP
 3

	)

48 
	#TIME_WAIT
 4

	)

49 
	#TIME_ERROR
 5

	)

50 
	#TIME_BAD
 
TIME_ERROR


	)

53 
	#MAXTC
 6

	)

55 
	g__BEGIN_DECLS


57 #i‚de‡
__USE_TIME_BITS64


58 
	$adjtimex
 (
timex
 *
__¡x
Ë
__THROW
;

59 
	$¡p_gëtimex
 (
¡±imevÆ
 *
__¡v
Ë
__THROW
;

61 #ifde‡
__REDIRECT_NTH


62 
	`__REDIRECT_NTH
 (
¡p_gëtime
, (
¡±imevÆ
 *
__¡v
),

63 
¡p_gëtimex
);

65 
	#¡p_gëtime
 
¡p_gëtimex


	)

67 
	$¡p_adjtime
 (
timex
 *
__ätx
Ë
__THROW
;

69 #ifde‡
__REDIRECT_NTH


70 
	`__REDIRECT_NTH
 (
adjtimex
, (
timex
 *
__¡x
),

71 
___adjtimex64
);

72 
	`__REDIRECT_NTH
 (
¡p_gëtime
, (
¡±imevÆ
 *
__¡v
),

73 
__¡p_gëtime64
);

74 
	`__REDIRECT_NTH
 (
¡p_gëtimex
, (
¡±imevÆ
 *
__¡v
),

75 
__¡p_gëtimex64
);

76 
	`__REDIRECT_NTH
 (
¡p_adjtime
, (
timex
 *
__¡x
),

77 
___adjtimex64
);

79 
	#adjtimex
 
___adjtimex64


	)

80 
	#¡p_adjtime
 
___adjtimex64


	)

81 
	#¡p_gëtime
 
__¡p_gëtime64


	)

82 
	#¡p_gëtimex
 
__¡p_gëtimex64


	)

86 
__END_DECLS


	@/usr/include/x86_64-linux-gnu/sys/ttychars.h

37 #i‚de‡
_SYS_TTYCHARS_H


38 
	#_SYS_TTYCHARS_H
 1

	)

40 
	sâych¨s
 {

41 
	mtc_îa£
;

42 
	mtc_kûl
;

43 
	mtc_öåc
;

44 
	mtc_quôc
;

45 
	mtc_°¨tc
;

46 
	mtc_°›c
;

47 
	mtc_eofc
;

48 
	mtc_brkc
;

49 
	mtc_su•c
;

50 
	mtc_dsu•c
;

51 
	mtc_Ω∫tc
;

52 
	mtc_Êushc
;

53 
	mtc_wîasc
;

54 
	mtc_ extc
;

57 #ifde‡
__USE_OLD_TTY


58 
	~<sys/âydeÁu…s.h
>

	@/usr/include/x86_64-linux-gnu/sys/ttydefaults.h

40 #i‚de‡
_SYS_TTYDEFAULTS_H_


41 
	#_SYS_TTYDEFAULTS_H_


	)

46 
	#TTYDEF_IFLAG
 (
BRKINT
 | 
ISTRIP
 | 
ICRNL
 | 
IMAXBEL
 | 
IXON
 | 
IXANY
)

	)

47 
	#TTYDEF_OFLAG
 (
OPOST
 | 
ONLCR
 | 
XTABS
)

	)

48 
	#TTYDEF_LFLAG
 (
ECHO
 | 
ICANON
 | 
ISIG
 | 
IEXTEN
 | 
ECHOE
|
ECHOKE
|
ECHOCTL
)

	)

49 
	#TTYDEF_CFLAG
 (
CREAD
 | 
CS7
 | 
PARENB
 | 
HUPCL
)

	)

50 
	#TTYDEF_SPEED
 (
B9600
)

	)

55 
	#CTRL
(
x
Ë(x&037)

	)

56 
	#CEOF
 
	`CTRL
('d')

	)

57 #ifde‡
_POSIX_VDISABLE


58 
	#CEOL
 
_POSIX_VDISABLE


	)

60 
	#CEOL
 '\0'

	)

62 
	#CERASE
 0177

	)

63 
	#CINTR
 
	`CTRL
('c')

	)

64 #ifde‡
_POSIX_VDISABLE


65 
	#CSTATUS
 
_POSIX_VDISABLE


	)

67 
	#CSTATUS
 '\0'

	)

69 
	#CKILL
 
	`CTRL
('u')

	)

70 
	#CMIN
 1

	)

71 
	#CQUIT
 034

	)

72 
	#CSUSP
 
	`CTRL
('z')

	)

73 
	#CTIME
 0

	)

74 
	#CDSUSP
 
	`CTRL
('y')

	)

75 
	#CSTART
 
	`CTRL
('q')

	)

76 
	#CSTOP
 
	`CTRL
('s')

	)

77 
	#CLNEXT
 
	`CTRL
('v')

	)

78 
	#CDISCARD
 
	`CTRL
('o')

	)

79 
	#CWERASE
 
	`CTRL
('w')

	)

80 
	#CREPRINT
 
	`CTRL
('r')

	)

81 
	#CEOT
 
CEOF


	)

83 
	#CBRK
 
CEOL


	)

84 
	#CRPRNT
 
CREPRINT


	)

85 
	#CFLUSH
 
CDISCARD


	)

93 #ifde‡
TTYDEFCHARS


94 
cc_t
 
	gâydefch¨s
[
NCCS
] = {

95 
CEOF
, 
CEOL
, CEOL, 
CERASE
, 
CWERASE
, 
CKILL
, 
CREPRINT
,

96 
_POSIX_VDISABLE
, 
CINTR
, 
CQUIT
, 
CSUSP
, 
CDSUSP
, 
CSTART
, 
CSTOP
, 
CLNEXT
,

97 
CDISCARD
, 
CMIN
, 
CTIME
, 
CSTATUS
, 
_POSIX_VDISABLE


99 #unde‡
TTYDEFCHARS


	@/usr/include/x86_64-linux-gnu/sys/types.h

22 #i‚def 
_SYS_TYPES_H


23 
	#_SYS_TYPES_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

31 #ifdef 
__USE_MISC


32 #i‚de‡
__u_ch¨_deföed


33 
__u_ch¨
 
	tu_ch¨
;

34 
__u_sh‹t
 
	tu_sh‹t
;

35 
__u_öt
 
	tu_öt
;

36 
__u_l⁄g
 
	tu_l⁄g
;

37 
__quad_t
 
	tquad_t
;

38 
__u_quad_t
 
	tu_quad_t
;

39 
__fsid_t
 
	tfsid_t
;

40 
	#__u_ch¨_deföed


	)

42 
__loff_t
 
	tloff_t
;

45 #i‚de‡
__öo_t_deföed


46 #i‚de‡
__USE_FILE_OFFSET64


47 
__öo_t
 
	töo_t
;

49 
__öo64_t
 
	töo_t
;

51 
	#__öo_t_deföed


	)

53 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


54 
__öo64_t
 
	töo64_t
;

55 
	#__öo64_t_deföed


	)

58 #i‚de‡
__dev_t_deföed


59 
__dev_t
 
	tdev_t
;

60 
	#__dev_t_deföed


	)

63 #i‚de‡
__gid_t_deföed


64 
__gid_t
 
	tgid_t
;

65 
	#__gid_t_deföed


	)

68 #i‚de‡
__mode_t_deföed


69 
__mode_t
 
	tmode_t
;

70 
	#__mode_t_deföed


	)

73 #i‚de‡
__∆ök_t_deföed


74 
__∆ök_t
 
	t∆ök_t
;

75 
	#__∆ök_t_deföed


	)

78 #i‚de‡
__uid_t_deföed


79 
__uid_t
 
	tuid_t
;

80 
	#__uid_t_deföed


	)

83 #i‚de‡
__off_t_deföed


84 #i‚de‡
__USE_FILE_OFFSET64


85 
__off_t
 
	toff_t
;

87 
__off64_t
 
	toff_t
;

89 
	#__off_t_deföed


	)

91 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


92 
__off64_t
 
	toff64_t
;

93 
	#__off64_t_deföed


	)

96 #i‚de‡
__pid_t_deföed


97 
__pid_t
 
	tpid_t
;

98 
	#__pid_t_deföed


	)

101 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
) \

102 && !
deföed
 
__id_t_deföed


103 
__id_t
 
	tid_t
;

104 
	#__id_t_deföed


	)

107 #i‚de‡
__ssize_t_deföed


108 
__ssize_t
 
	tssize_t
;

109 
	#__ssize_t_deföed


	)

112 #ifdef 
__USE_MISC


113 #i‚de‡
__daddr_t_deföed


114 
__daddr_t
 
	tdaddr_t
;

115 
__ˇddr_t
 
	tˇddr_t
;

116 
	#__daddr_t_deföed


	)

120 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN
Ë&& !deföed 
__key_t_deföed


121 
__key_t
 
	tkey_t
;

122 
	#__key_t_deföed


	)

125 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


126 
	~<bôs/ty≥s/˛ock_t.h
>

128 
	~<bôs/ty≥s/˛ockid_t.h
>

129 
	~<bôs/ty≥s/time_t.h
>

130 
	~<bôs/ty≥s/timî_t.h
>

132 #ifde‡
__USE_XOPEN


133 #i‚de‡
__u£c⁄ds_t_deföed


134 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

135 
	#__u£c⁄ds_t_deföed


	)

137 #i‚de‡
__su£c⁄ds_t_deföed


138 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

139 
	#__su£c⁄ds_t_deföed


	)

143 
	#__√ed_size_t


	)

144 
	~<°ddef.h
>

146 #ifde‡
__USE_MISC


148 
	tul⁄g
;

149 
	tush‹t
;

150 
	tuöt
;

155 
	~<bôs/°döt-öä.h
>

158 
__uöt8_t
 
	tu_öt8_t
;

159 
__uöt16_t
 
	tu_öt16_t
;

160 
__uöt32_t
 
	tu_öt32_t
;

161 
__uöt64_t
 
	tu_öt64_t
;

163 #i‡
__GNUC_PREREQ
 (2, 7)

164 
	tªgi°î_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__w‹d__
)));

166 
	tªgi°î_t
;

171 
	#__BIT_TYPES_DEFINED__
 1

	)

174 #ifdef 
__USE_MISC


176 
	~<ídün.h
>

179 
	~<sys/£À˘.h
>

183 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
) \

184 && !
deföed
 
__blksize_t_deföed


185 
__blksize_t
 
	tblksize_t
;

186 
	#__blksize_t_deföed


	)

190 #i‚de‡
__USE_FILE_OFFSET64


191 #i‚de‡
__blk˙t_t_deföed


192 
__blk˙t_t
 
	tblk˙t_t
;

193 
	#__blk˙t_t_deföed


	)

195 #i‚de‡
__fsblk˙t_t_deföed


196 
__fsblk˙t_t
 
	tfsblk˙t_t
;

197 
	#__fsblk˙t_t_deföed


	)

199 #i‚de‡
__fsfû˙t_t_deföed


200 
__fsfû˙t_t
 
	tfsfû˙t_t
;

201 
	#__fsfû˙t_t_deföed


	)

204 #i‚de‡
__blk˙t_t_deföed


205 
__blk˙t64_t
 
	tblk˙t_t
;

206 
	#__blk˙t_t_deföed


	)

208 #i‚de‡
__fsblk˙t_t_deföed


209 
__fsblk˙t64_t
 
	tfsblk˙t_t
;

210 
	#__fsblk˙t_t_deföed


	)

212 #i‚de‡
__fsfû˙t_t_deföed


213 
__fsfû˙t64_t
 
	tfsfû˙t_t
;

214 
	#__fsfû˙t_t_deföed


	)

218 #ifde‡
__USE_LARGEFILE64


219 
__blk˙t64_t
 
	tblk˙t64_t
;

220 
__fsblk˙t64_t
 
	tfsblk˙t64_t
;

221 
__fsfû˙t64_t
 
	tfsfû˙t64_t
;

226 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


227 
	~<bôs/±hªadty≥s.h
>

230 
	g__END_DECLS


	@/usr/include/x86_64-linux-gnu/sys/ucontext.h

18 #i‚de‡
_SYS_UCONTEXT_H


19 
	#_SYS_UCONTEXT_H
 1

	)

21 
	~<„©uªs.h
>

23 
	~<bôs/ty≥s.h
>

24 
	~<bôs/ty≥s/sig£t_t.h
>

25 
	~<bôs/ty≥s/°ack_t.h
>

28 #ifde‡
__USE_MISC


29 
	#__˘x
(
Êd
Ë
	)
fld

31 
	#__˘x
(
Êd
Ë
__
 ## 
	)
fld

34 #ifde‡
__x86_64__


37 
__exãnsi⁄__
 
	tgªg_t
;

40 
	#__NGREG
 23

	)

41 #ifde‡
__USE_MISC


42 
	#NGREG
 
__NGREG


	)

46 
gªg_t
 
	tgªg£t_t
[
__NGREG
];

48 #ifde‡
__USE_GNU


52 
	mREG_R8
 = 0,

53 
	#REG_R8
 
REG_R8


	)

54 
	mREG_R9
,

55 
	#REG_R9
 
REG_R9


	)

56 
	mREG_R10
,

57 
	#REG_R10
 
REG_R10


	)

58 
	mREG_R11
,

59 
	#REG_R11
 
REG_R11


	)

60 
	mREG_R12
,

61 
	#REG_R12
 
REG_R12


	)

62 
	mREG_R13
,

63 
	#REG_R13
 
REG_R13


	)

64 
	mREG_R14
,

65 
	#REG_R14
 
REG_R14


	)

66 
	mREG_R15
,

67 
	#REG_R15
 
REG_R15


	)

68 
	mREG_RDI
,

69 
	#REG_RDI
 
REG_RDI


	)

70 
	mREG_RSI
,

71 
	#REG_RSI
 
REG_RSI


	)

72 
	mREG_RBP
,

73 
	#REG_RBP
 
REG_RBP


	)

74 
	mREG_RBX
,

75 
	#REG_RBX
 
REG_RBX


	)

76 
	mREG_RDX
,

77 
	#REG_RDX
 
REG_RDX


	)

78 
	mREG_RAX
,

79 
	#REG_RAX
 
REG_RAX


	)

80 
	mREG_RCX
,

81 
	#REG_RCX
 
REG_RCX


	)

82 
	mREG_RSP
,

83 
	#REG_RSP
 
REG_RSP


	)

84 
	mREG_RIP
,

85 
	#REG_RIP
 
REG_RIP


	)

86 
	mREG_EFL
,

87 
	#REG_EFL
 
REG_EFL


	)

88 
	mREG_CSGSFS
,

89 
	#REG_CSGSFS
 
REG_CSGSFS


	)

90 
	mREG_ERR
,

91 
	#REG_ERR
 
REG_ERR


	)

92 
	mREG_TRAPNO
,

93 
	#REG_TRAPNO
 
REG_TRAPNO


	)

94 
	mREG_OLDMASK
,

95 
	#REG_OLDMASK
 
REG_OLDMASK


	)

96 
	mREG_CR2


97 
	#REG_CR2
 
REG_CR2


	)

101 
	s_libc_Âxªg


103 
__˘x
(
signifiˇnd
)[4];

104 
__˘x
(
exp⁄ít
);

105 
	m__glibc_ª£rved1
[3];

108 
	s_libc_xmmªg


110 
__uöt32_t
 
__˘x
(
ñemít
)[4];

113 
	s_libc_Â°©e


116 
__uöt16_t
 
__˘x
(
cwd
);

117 
__uöt16_t
 
__˘x
(
swd
);

118 
__uöt16_t
 
__˘x
(
·w
);

119 
__uöt16_t
 
__˘x
(
f›
);

120 
__uöt64_t
 
__˘x
(
rù
);

121 
__uöt64_t
 
__˘x
(
rdp
);

122 
__uöt32_t
 
__˘x
(
mxc§
);

123 
__uöt32_t
 
__˘x
(
mx¸_mask
);

124 
_libc_Âxªg
 
	m_°
[8];

125 
_libc_xmmªg
 
	m_xmm
[16];

126 
__uöt32_t
 
	m__glibc_ª£rved1
[24];

130 
_libc_Â°©e
 *
	tÂªg£t_t
;

135 
gªg£t_t
 
__˘x
(
gªgs
);

137 
Âªg£t_t
 
__˘x
(
Âªgs
);

138 
__exãnsi⁄__
 
	m__ª£rved1
 [8];

139 } 
	tmc⁄ãxt_t
;

142 
	suc⁄ãxt_t


144 
__˘x
(
uc_Êags
);

145 
uc⁄ãxt_t
 *
	muc_lök
;

146 
°ack_t
 
	muc_°ack
;

147 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

148 
sig£t_t
 
	muc_sigmask
;

149 
_libc_Â°©e
 
	m__Âªgs_mem
;

150 
__exãnsi⁄__
 
	m__s•
[4];

151 } 
	tuc⁄ãxt_t
;

156 
	tgªg_t
;

159 
	#__NGREG
 19

	)

160 #ifde‡
__USE_MISC


161 
	#NGREG
 
__NGREG


	)

165 
gªg_t
 
	tgªg£t_t
[
__NGREG
];

167 #ifde‡
__USE_GNU


171 
	mREG_GS
 = 0,

172 
	#REG_GS
 
REG_GS


	)

173 
	mREG_FS
,

174 
	#REG_FS
 
REG_FS


	)

175 
	mREG_ES
,

176 
	#REG_ES
 
REG_ES


	)

177 
	mREG_DS
,

178 
	#REG_DS
 
REG_DS


	)

179 
	mREG_EDI
,

180 
	#REG_EDI
 
REG_EDI


	)

181 
	mREG_ESI
,

182 
	#REG_ESI
 
REG_ESI


	)

183 
	mREG_EBP
,

184 
	#REG_EBP
 
REG_EBP


	)

185 
	mREG_ESP
,

186 
	#REG_ESP
 
REG_ESP


	)

187 
	mREG_EBX
,

188 
	#REG_EBX
 
REG_EBX


	)

189 
	mREG_EDX
,

190 
	#REG_EDX
 
REG_EDX


	)

191 
	mREG_ECX
,

192 
	#REG_ECX
 
REG_ECX


	)

193 
	mREG_EAX
,

194 
	#REG_EAX
 
REG_EAX


	)

195 
	mREG_TRAPNO
,

196 
	#REG_TRAPNO
 
REG_TRAPNO


	)

197 
	mREG_ERR
,

198 
	#REG_ERR
 
REG_ERR


	)

199 
	mREG_EIP
,

200 
	#REG_EIP
 
REG_EIP


	)

201 
	mREG_CS
,

202 
	#REG_CS
 
REG_CS


	)

203 
	mREG_EFL
,

204 
	#REG_EFL
 
REG_EFL


	)

205 
	mREG_UESP
,

206 
	#REG_UESP
 
REG_UESP


	)

207 
	mREG_SS


208 
	#REG_SS
 
REG_SS


	)

213 
	s_libc_Âªg


215 
__˘x
(
signifiˇnd
)[4];

216 
__˘x
(
exp⁄ít
);

219 
	s_libc_Â°©e


221 
__˘x
(
cw
);

222 
__˘x
(
sw
);

223 
__˘x
(
èg
);

224 
__˘x
(
ùoff
);

225 
__˘x
(
cs£l
);

226 
__˘x
(
d©aoff
);

227 
__˘x
(
d©a£l
);

228 
_libc_Âªg
 
	m_°
[8];

229 
__˘x
(
°©us
);

233 
_libc_Â°©e
 *
	tÂªg£t_t
;

238 
gªg£t_t
 
__˘x
(
gªgs
);

241 
Âªg£t_t
 
__˘x
(
Âªgs
);

242 
__˘x
(
ﬁdmask
);

243 
__˘x
(
¸2
);

244 } 
	tmc⁄ãxt_t
;

247 
	suc⁄ãxt_t


249 
__˘x
(
uc_Êags
);

250 
uc⁄ãxt_t
 *
	muc_lök
;

251 
°ack_t
 
	muc_°ack
;

252 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

253 
sig£t_t
 
	muc_sigmask
;

254 
_libc_Â°©e
 
	m__Âªgs_mem
;

255 
	m__s•
[4];

256 } 
	tuc⁄ãxt_t
;

260 #unde‡
__˘x


	@/usr/include/x86_64-linux-gnu/sys/uio.h

18 #i‚de‡
_SYS_UIO_H


19 
	#_SYS_UIO_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<sys/ty≥s.h
>

23 
	~<bôs/ty≥s/°ru˘_iovec.h
>

24 
	~<bôs/uio_lim.h
>

25 #ifde‡
__IOV_MAX


26 
	#UIO_MAXIOV
 
__IOV_MAX


	)

28 #unde‡
UIO_MAXIOV


31 
__BEGIN_DECLS


41 
ssize_t
 
	$ªadv
 (
__fd
, c⁄° 
iovec
 *
__iovec
, 
__cou¡
)

42 
__wur
 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 2, 3));

52 
ssize_t
 
	$wrôev
 (
__fd
, c⁄° 
iovec
 *
__iovec
, 
__cou¡
)

53 
__wur
 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 2, 3));

56 #ifde‡
__USE_MISC


57 #i‚de‡
__USE_FILE_OFFSET64


67 
ssize_t
 
	$¥ódv
 (
__fd
, c⁄° 
iovec
 *
__iovec
, 
__cou¡
,

68 
__off_t
 
__off£t
)

69 
__wur
 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 2, 3));

80 
ssize_t
 
	$pwrôev
 (
__fd
, c⁄° 
iovec
 *
__iovec
, 
__cou¡
,

81 
__off_t
 
__off£t
)

82 
__wur
 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 2, 3));

85 #ifde‡
__REDIRECT


86 
ssize_t
 
	`__REDIRECT
 (
¥ódv
, (
__fd
, c⁄° 
iovec
 *
__iovec
,

87 
__cou¡
, 
__off64_t
 
__off£t
),

88 
¥ódv64
)

89 
__wur
 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 2, 3));

90 
ssize_t
 
	`__REDIRECT
 (
pwrôev
, (
__fd
, c⁄° 
iovec
 *
__iovec
,

91 
__cou¡
, 
__off64_t
 
__off£t
),

92 
pwrôev64
)

93 
__wur
 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 2, 3));

95 
	#¥ódv
 
¥ódv64


	)

96 
	#pwrôev
 
pwrôev64


	)

100 #ifde‡
__USE_LARGEFILE64


110 
ssize_t
 
	$¥ódv64
 (
__fd
, c⁄° 
iovec
 *
__iovec
, 
__cou¡
,

111 
__off64_t
 
__off£t
)

112 
__wur
 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 2, 3));

123 
ssize_t
 
	$pwrôev64
 (
__fd
, c⁄° 
iovec
 *
__iovec
, 
__cou¡
,

124 
__off64_t
 
__off£t
)

125 
__wur
 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 2, 3));

130 #ifde‡
__USE_GNU


131 #i‚de‡
__USE_FILE_OFFSET64


133 
ssize_t
 
	$¥ódv2
 (
__Â
, c⁄° 
iovec
 *
__iovec
, 
__cou¡
,

134 
__off_t
 
__off£t
, 
___Êags
)

135 
__wur
 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 2, 3));

138 
ssize_t
 
	$pwrôev2
 (
__fd
, c⁄° 
iovec
 *
__iodev
, 
__cou¡
,

139 
__off_t
 
__off£t
, 
__Êags
Ë
__wur
;

142 #ifde‡
__REDIRECT


143 
ssize_t
 
	`__REDIRECT
 (
pwrôev2
, (
__fd
, c⁄° 
iovec
 *
__iovec
,

144 
__cou¡
, 
__off64_t
 
__off£t
,

145 
__Êags
),

146 
pwrôev64v2
)

147 
__wur
 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 2, 3));

148 
ssize_t
 
	`__REDIRECT
 (
¥ódv2
, (
__fd
, c⁄° 
iovec
 *
__iovec
,

149 
__cou¡
, 
__off64_t
 
__off£t
,

150 
__Êags
),

151 
¥ódv64v2
)

152 
__wur
 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 2, 3));

154 
	#¥ódv2
 
¥ódv64v2


	)

155 
	#pwrôev2
 
pwrôev64v2


	)

159 #ifde‡
__USE_LARGEFILE64


161 
ssize_t
 
	$¥ódv64v2
 (
__Â
, c⁄° 
iovec
 *
__iovec
,

162 
__cou¡
, 
__off64_t
 
__off£t
,

163 
___Êags
)

164 
__wur
 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 2, 3));

167 
ssize_t
 
	$pwrôev64v2
 (
__fd
, c⁄° 
iovec
 *
__iodev
,

168 
__cou¡
, 
__off64_t
 
__off£t
,

169 
__Êags
)

170 
__wur
 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 2, 3));

174 
__END_DECLS


178 #ifde‡
__USE_GNU


179 
	~<bôs/uio-ext.h
>

	@/usr/include/x86_64-linux-gnu/sys/un.h

18 #i‚def 
_SYS_UN_H


19 
	#_SYS_UN_H
 1

	)

21 
	~<sys/cdefs.h
>

24 
	~<bôs/sockaddr.h
>

26 
__BEGIN_DECLS


29 
	ssockaddr_un


31 
__SOCKADDR_COMMON
 (
sun_
);

32 
	msun_∑th
[108];

36 #ifde‡
__USE_MISC


37 
	~<°rög.h
>

40 
	#SUN_LEN
(
±r
Ë((
size_t
Ë(((
sockaddr_un
 *Ë0)->
sun_∑th
) \

41 + 
	`°æí
 ((
±r
)->
sun_∑th
))

	)

44 
	g__END_DECLS


	@/usr/include/x86_64-linux-gnu/sys/unistd.h

1 
	~<uni°d.h
>

	@/usr/include/x86_64-linux-gnu/sys/user.h

18 #i‚de‡
_SYS_USER_H


19 
	#_SYS_USER_H
 1

	)

25 #ifde‡
__x86_64__


27 
	su£r_Âªgs_°ru˘


29 
	mcwd
;

30 
	mswd
;

31 
	m·w
;

32 
	mf›
;

33 
__exãnsi⁄__
 
	mrù
;

34 
__exãnsi⁄__
 
	mrdp
;

35 
	mmxc§
;

36 
	mmx¸_mask
;

37 
	m°_•a˚
[32];

38 
	mxmm_•a˚
[64];

39 
	m∑ddög
[24];

42 
	su£r_ªgs_°ru˘


44 
__exãnsi⁄__
 
	mr15
;

45 
__exãnsi⁄__
 
	mr14
;

46 
__exãnsi⁄__
 
	mr13
;

47 
__exãnsi⁄__
 
	mr12
;

48 
__exãnsi⁄__
 
	mrbp
;

49 
__exãnsi⁄__
 
	mrbx
;

50 
__exãnsi⁄__
 
	mr11
;

51 
__exãnsi⁄__
 
	mr10
;

52 
__exãnsi⁄__
 
	mr9
;

53 
__exãnsi⁄__
 
	mr8
;

54 
__exãnsi⁄__
 
	møx
;

55 
__exãnsi⁄__
 
	mrcx
;

56 
__exãnsi⁄__
 
	mrdx
;

57 
__exãnsi⁄__
 
	mrsi
;

58 
__exãnsi⁄__
 
	mrdi
;

59 
__exãnsi⁄__
 
	m‹ig_øx
;

60 
__exãnsi⁄__
 
	mrù
;

61 
__exãnsi⁄__
 
	mcs
;

62 
__exãnsi⁄__
 
	meÊags
;

63 
__exãnsi⁄__
 
	mr•
;

64 
__exãnsi⁄__
 
	mss
;

65 
__exãnsi⁄__
 
	mfs_ba£
;

66 
__exãnsi⁄__
 
	mgs_ba£
;

67 
__exãnsi⁄__
 
	mds
;

68 
__exãnsi⁄__
 
	mes
;

69 
__exãnsi⁄__
 
	mfs
;

70 
__exãnsi⁄__
 
	mgs
;

73 
	su£r


75 
u£r_ªgs_°ru˘
 
	mªgs
;

76 
	mu_ÂvÆid
;

77 
u£r_Âªgs_°ru˘
 
	mi387
;

78 
__exãnsi⁄__
 
	mu_tsize
;

79 
__exãnsi⁄__
 
	mu_dsize
;

80 
__exãnsi⁄__
 
	mu_ssize
;

81 
__exãnsi⁄__
 
	m°¨t_code
;

82 
__exãnsi⁄__
 
	m°¨t_°ack
;

83 
__exãnsi⁄__
 
	msig«l
;

84 
	mª£rved
;

85 
__exãnsi⁄__
 union

87 
u£r_ªgs_°ru˘
* 
	mu_¨0
;

88 
__exãnsi⁄__
 
	m__u_¨0_w‹d
;

90 
__exãnsi⁄__
 union

92 
u£r_Âªgs_°ru˘
* 
	mu_Â°©e
;

93 
__exãnsi⁄__
 
	m__u_Â°©e_w‹d
;

95 
__exãnsi⁄__
 
	mmagic
;

96 
	mu_comm
 [32];

97 
__exãnsi⁄__
 
	mu_debugªg
 [8];

102 
	su£r_Âªgs_°ru˘


104 
	mcwd
;

105 
	mswd
;

106 
	mtwd
;

107 
	mfù
;

108 
	mfcs
;

109 
	mfoo
;

110 
	mfos
;

111 
	m°_•a˚
 [20];

114 
	su£r_Âxªgs_°ru˘


116 
	mcwd
;

117 
	mswd
;

118 
	mtwd
;

119 
	mf›
;

120 
	mfù
;

121 
	mfcs
;

122 
	mfoo
;

123 
	mfos
;

124 
	mmxc§
;

125 
	mª£rved
;

126 
	m°_•a˚
[32];

127 
	mxmm_•a˚
[32];

128 
	m∑ddög
[56];

131 
	su£r_ªgs_°ru˘


133 
	mebx
;

134 
	mecx
;

135 
	medx
;

136 
	mesi
;

137 
	medi
;

138 
	mebp
;

139 
	móx
;

140 
	mxds
;

141 
	mxes
;

142 
	mxfs
;

143 
	mxgs
;

144 
	m‹ig_óx
;

145 
	meù
;

146 
	mxcs
;

147 
	meÊags
;

148 
	me•
;

149 
	mxss
;

152 
	su£r


154 
u£r_ªgs_°ru˘
 
	mªgs
;

155 
	mu_ÂvÆid
;

156 
u£r_Âªgs_°ru˘
 
	mi387
;

157 
	mu_tsize
;

158 
	mu_dsize
;

159 
	mu_ssize
;

160 
	m°¨t_code
;

161 
	m°¨t_°ack
;

162 
	msig«l
;

163 
	mª£rved
;

164 
u£r_ªgs_°ru˘
* 
	mu_¨0
;

165 
u£r_Âªgs_°ru˘
* 
	mu_Â°©e
;

166 
	mmagic
;

167 
	mu_comm
 [32];

168 
	mu_debugªg
 [8];

172 
	#PAGE_SHIFT
 12

	)

173 
	#PAGE_SIZE
 (1UL << 
PAGE_SHIFT
)

	)

174 
	#PAGE_MASK
 (~(
PAGE_SIZE
-1))

	)

175 
	#NBPG
 
PAGE_SIZE


	)

176 
	#UPAGES
 1

	)

177 
	#HOST_TEXT_START_ADDR
 (
u
.
°¨t_code
)

	)

178 
	#HOST_STACK_END_ADDR
 (
u
.
°¨t_°ack
 + u.
u_ssize
 * 
NBPG
)

	)

	@/usr/include/x86_64-linux-gnu/sys/utsname.h

22 #i‚def 
_SYS_UTSNAME_H


23 
	#_SYS_UTSNAME_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ut¢ame.h
>

31 #i‚de‡
_UTSNAME_SYSNAME_LENGTH


32 
	#_UTSNAME_SYSNAME_LENGTH
 
_UTSNAME_LENGTH


	)

34 #i‚de‡
_UTSNAME_NODENAME_LENGTH


35 
	#_UTSNAME_NODENAME_LENGTH
 
_UTSNAME_LENGTH


	)

37 #i‚de‡
_UTSNAME_RELEASE_LENGTH


38 
	#_UTSNAME_RELEASE_LENGTH
 
_UTSNAME_LENGTH


	)

40 #i‚de‡
_UTSNAME_VERSION_LENGTH


41 
	#_UTSNAME_VERSION_LENGTH
 
_UTSNAME_LENGTH


	)

43 #i‚de‡
_UTSNAME_MACHINE_LENGTH


44 
	#_UTSNAME_MACHINE_LENGTH
 
_UTSNAME_LENGTH


	)

48 
	sut¢ame


51 
	msy¢ame
[
_UTSNAME_SYSNAME_LENGTH
];

54 
	mnodíame
[
_UTSNAME_NODENAME_LENGTH
];

57 
	mªÀa£
[
_UTSNAME_RELEASE_LENGTH
];

59 
	mvîsi⁄
[
_UTSNAME_VERSION_LENGTH
];

62 
	mmachöe
[
_UTSNAME_MACHINE_LENGTH
];

64 #i‡
_UTSNAME_DOMAIN_LENGTH
 - 0

66 #ifde‡
__USE_GNU


67 
	mdomaö«me
[
_UTSNAME_DOMAIN_LENGTH
];

69 
	m__domaö«me
[
_UTSNAME_DOMAIN_LENGTH
];

74 #ifde‡
__USE_MISC


76 
	#SYS_NMLN
 
_UTSNAME_LENGTH


	)

81 
	$u«me
 (
ut¢ame
 *
__«me
Ë
__THROW
;

84 
__END_DECLS


	@/usr/include/x86_64-linux-gnu/sys/vfs.h

4 
	~<sys/°©fs.h
>

	@/usr/include/x86_64-linux-gnu/sys/vlimit.h

18 #i‚de‡
_SYS_VLIMIT_H


19 
	#_SYS_VLIMIT_H
 1

	)

21 
	~<„©uªs.h
>

23 
__BEGIN_DECLS


28 
	e__vlimô_ªsour˚


35 
	mLIM_NORAISE
,

38 
	mLIM_CPU
,

41 
	mLIM_FSIZE
,

44 
	mLIM_DATA
,

47 
	mLIM_STACK
,

50 
	mLIM_CORE
,

53 
	mLIM_MAXRSS


57 
	#INFINITY
 0x7fffffff

	)

62 
	$vlimô
 (
__vlimô_ªsour˚
 
__ªsour˚
, 
__vÆue
Ë
__THROW
;

65 
__END_DECLS


	@/usr/include/x86_64-linux-gnu/sys/vm86.h

18 #i‚de‡
_SYS_VM86_H


20 
	#_SYS_VM86_H
 1

	)

21 
	~<„©uªs.h
>

23 #ifde‡
__x86_64__


24 #îr‹ 
This
 
hódî
 
is
 
unsuµ‹ãd
 
⁄
 
x86
-64.

27 
	~<asm/vm86.h
>

29 
__BEGIN_DECLS


32 
	$vm86
 (
__subfun˘i⁄
,

33 
vm86∂us_°ru˘
 *
__öfo
Ë
__THROW
;

35 
__END_DECLS


	@/usr/include/x86_64-linux-gnu/sys/vt.h

1 
	~<löux/vt.h
>

	@/usr/include/x86_64-linux-gnu/sys/wait.h

22 #i‚def 
_SYS_WAIT_H


23 
	#_SYS_WAIT_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

30 #i‚de‡
__pid_t_deföed


31 
__pid_t
 
	tpid_t
;

32 
	#__pid_t_deföed


	)

35 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


36 
	~<sig«l.h
>

39 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8


42 
	~<bôs/ty≥s/°ru˘_rußge.h
>

46 #i‡!
deföed
 
_STDLIB_H
 || (!deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K8
)

49 
	~<bôs/waôÊags.h
>

52 
	~<bôs/waô°©us.h
>

54 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (°©us)

	)

55 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (°©us)

	)

56 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (°©us)

	)

57 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (°©us)

	)

58 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (°©us)

	)

59 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (°©us)

	)

60 #ifde‡
__WIFCONTINUED


61 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (°©us)

	)

65 #ifdef 
__USE_MISC


66 
	#WCOREFLAG
 
__WCOREFLAG


	)

67 
	#WCOREDUMP
(
°©us
Ë
	`__WCOREDUMP
 (°©us)

	)

68 
	#W_EXITCODE
(
ªt
, 
sig
Ë
	`__W_EXITCODE
 (ªt, sig)

	)

69 
	#W_STOPCODE
(
sig
Ë
	`__W_STOPCODE
 (sig)

	)

73 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


76 
	mP_ALL
,

77 
	mP_PID
,

78 
	mP_PGID


79 } 
	tidty≥_t
;

88 
__pid_t
 
waô
 (*
__°©_loc
);

90 #ifdef 
__USE_MISC


92 
	#WAIT_ANY
 (-1Ë

	)

93 
	#WAIT_MYPGRP
 0

	)

111 
__pid_t
 
waôpid
 (__pid_à
__pid
, *
__°©_loc
, 
__›ti⁄s
);

113 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


114 #i‚de‡
__id_t_deföed


115 
__id_t
 
	tid_t
;

116 
	#__id_t_deföed


	)

119 
	~<bôs/ty≥s/sigöfo_t.h
>

132 
waôid
 (
idty≥_t
 
__idty≥
, 
__id_t
 
__id
, 
sigöfo_t
 *
__öf›
,

133 
__›ti⁄s
);

136 #i‡
deföed
 
__USE_MISC
 \

137 || (
deföed
 
	g__USE_XOPEN_EXTENDED
 && !deföed 
	g__USE_XOPEN2K
)

140 
	grußge
;

147 #i‚de‡
__USE_TIME_BITS64


148 
__pid_t
 
	$waô3
 (*
__°©_loc
, 
__›ti⁄s
,

149 
rußge
 * 
__ußge
Ë
__THROWNL
;

151 #ifde‡
__REDIRECT_NTHNL


152 
__pid_t
 
	`__REDIRECT_NTHNL
 (
waô3
, (*
__°©_loc
, 
__›ti⁄s
,

153 
rußge
 * 
__ußge
),

154 
__waô3_time64
);

156 
	#waô3
 
__waô3_time64


	)

161 #ifde‡
__USE_MISC


162 #i‚de‡
__USE_TIME_BITS64


164 
__pid_t
 
	$waô4
 (
__pid_t
 
__pid
, *
__°©_loc
, 
__›ti⁄s
,

165 
rußge
 *
__ußge
Ë
__THROWNL
;

167 #ifde‡
__REDIRECT_NTHNL


168 
__pid_t
 
	`__REDIRECT_NTHNL
 (
waô4
, (__pid_à
__pid
, *
__°©_loc
,

169 
__›ti⁄s
, 
rußge
 *
__ußge
),

170 
__waô4_time64
);

172 
	#waô4
 
__waô4_time64


	)

178 
__END_DECLS


	@/usr/include/x86_64-linux-gnu/sys/xattr.h

18 #i‚de‡
_SYS_XATTR_H


19 
	#_SYS_XATTR_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<sys/ty≥s.h
>

25 
	g__BEGIN_DECLS


29 #i‚de‡
__USE_KERNEL_XATTR_DEFS


32 
	mXATTR_CREATE
 = 1,

33 
	#XATTR_CREATE
 
XATTR_CREATE


	)

34 
	mXATTR_REPLACE
 = 2

35 
	#XATTR_REPLACE
 
XATTR_REPLACE


	)

41 
	$£tx©å
 (c⁄° *
__∑th
, c⁄° *
__«me
,

42 c⁄° *
__vÆue
, 
size_t
 
__size
, 
__Êags
)

43 
__THROW
;

48 
	$l£tx©å
 (c⁄° *
__∑th
, c⁄° *
__«me
,

49 c⁄° *
__vÆue
, 
size_t
 
__size
, 
__Êags
)

50 
__THROW
;

54 
	$f£tx©å
 (
__fd
, c⁄° *
__«me
, c⁄° *
__vÆue
,

55 
size_t
 
__size
, 
__Êags
Ë
__THROW
;

59 
ssize_t
 
	$gëx©å
 (c⁄° *
__∑th
, c⁄° *
__«me
,

60 *
__vÆue
, 
size_t
 
__size
Ë
__THROW
;

65 
ssize_t
 
	$lgëx©å
 (c⁄° *
__∑th
, c⁄° *
__«me
,

66 *
__vÆue
, 
size_t
 
__size
Ë
__THROW
;

70 
ssize_t
 
	$fgëx©å
 (
__fd
, c⁄° *
__«me
, *
__vÆue
,

71 
size_t
 
__size
Ë
__THROW
;

76 
ssize_t
 
	$li°x©å
 (c⁄° *
__∑th
, *
__li°
, 
size_t
 
__size
)

77 
__THROW
;

82 
ssize_t
 
	$Œi°x©å
 (c⁄° *
__∑th
, *
__li°
, 
size_t
 
__size
)

83 
__THROW
;

87 
ssize_t
 
	$Êi°x©å
 (
__fd
, *
__li°
, 
size_t
 
__size
)

88 
__THROW
;

92 
	$ªmovex©å
 (c⁄° *
__∑th
, c⁄° *
__«me
Ë
__THROW
;

97 
	$Ãemovex©å
 (c⁄° *
__∑th
, c⁄° *
__«me
Ë
__THROW
;

101 
	$‰emovex©å
 (
__fd
, c⁄° *
__«me
Ë
__THROW
;

103 
__END_DECLS


	@/usr/include/zconf.h

8 #i‚de‡
ZCONF_H


9 
	#ZCONF_H


	)

17 #ifde‡
Z_PREFIX


18 
	#Z_PREFIX_SET


	)

21 
	#_di°_code
 
z__di°_code


	)

22 
	#_Àngth_code
 
z__Àngth_code


	)

23 
	#_å_Æign
 
z__å_Æign


	)

24 
	#_å_Êush_bôs
 
z__å_Êush_bôs


	)

25 
	#_å_Êush_block
 
z__å_Êush_block


	)

26 
	#_å_öô
 
z__å_öô


	)

27 
	#_å_°‹ed_block
 
z__å_°‹ed_block


	)

28 
	#_å_èŒy
 
z__å_èŒy


	)

29 
	#adÀr32
 
z_adÀr32


	)

30 
	#adÀr32_comböe
 
z_adÀr32_comböe


	)

31 
	#adÀr32_comböe64
 
z_adÀr32_comböe64


	)

32 
	#adÀr32_z
 
z_adÀr32_z


	)

33 #i‚de‡
Z_SOLO


34 
	#com¥ess
 
z_com¥ess


	)

35 
	#com¥ess2
 
z_com¥ess2


	)

36 
	#com¥essBound
 
z_com¥essBound


	)

38 
	#¸c32
 
z_¸c32


	)

39 
	#¸c32_comböe
 
z_¸c32_comböe


	)

40 
	#¸c32_comböe64
 
z_¸c32_comböe64


	)

41 
	#¸c32_z
 
z_¸c32_z


	)

42 
	#deÊ©e
 
z_deÊ©e


	)

43 
	#deÊ©eBound
 
z_deÊ©eBound


	)

44 
	#deÊ©eC›y
 
z_deÊ©eC›y


	)

45 
	#deÊ©eEnd
 
z_deÊ©eEnd


	)

46 
	#deÊ©eGëDi˘i⁄¨y
 
z_deÊ©eGëDi˘i⁄¨y


	)

47 
	#deÊ©eInô
 
z_deÊ©eInô


	)

48 
	#deÊ©eInô2
 
z_deÊ©eInô2


	)

49 
	#deÊ©eInô2_
 
z_deÊ©eInô2_


	)

50 
	#deÊ©eInô_
 
z_deÊ©eInô_


	)

51 
	#deÊ©eP¨ams
 
z_deÊ©eP¨ams


	)

52 
	#deÊ©ePídög
 
z_deÊ©ePídög


	)

53 
	#deÊ©ePrime
 
z_deÊ©ePrime


	)

54 
	#deÊ©eRe£t
 
z_deÊ©eRe£t


	)

55 
	#deÊ©eRe£tKìp
 
z_deÊ©eRe£tKìp


	)

56 
	#deÊ©eSëDi˘i⁄¨y
 
z_deÊ©eSëDi˘i⁄¨y


	)

57 
	#deÊ©eSëHódî
 
z_deÊ©eSëHódî


	)

58 
	#deÊ©eTu√
 
z_deÊ©eTu√


	)

59 
	#deÊ©e_c›yright
 
z_deÊ©e_c›yright


	)

60 
	#gë_¸c_èbÀ
 
z_gë_¸c_èbÀ


	)

61 #i‚de‡
Z_SOLO


62 
	#gz_îr‹
 
z_gz_îr‹


	)

63 
	#gz_ötmax
 
z_gz_ötmax


	)

64 
	#gz_°rwöîr‹
 
z_gz_°rwöîr‹


	)

65 
	#gzbuf„r
 
z_gzbuf„r


	)

66 
	#gz˛óªº
 
z_gz˛óªº


	)

67 
	#gz˛o£
 
z_gz˛o£


	)

68 
	#gz˛o£_r
 
z_gz˛o£_r


	)

69 
	#gz˛o£_w
 
z_gz˛o£_w


	)

70 
	#gzdúe˘
 
z_gzdúe˘


	)

71 
	#gzd›í
 
z_gzd›í


	)

72 
	#gzeof
 
z_gzeof


	)

73 
	#gzîr‹
 
z_gzîr‹


	)

74 
	#gzÊush
 
z_gzÊush


	)

75 
	#gz‰ód
 
z_gz‰ód


	)

76 
	#gzfwrôe
 
z_gzfwrôe


	)

77 
	#gzgëc
 
z_gzgëc


	)

78 
	#gzgëc_
 
z_gzgëc_


	)

79 
	#gzgës
 
z_gzgës


	)

80 
	#gzoff£t
 
z_gzoff£t


	)

81 
	#gzoff£t64
 
z_gzoff£t64


	)

82 
	#gz›í
 
z_gz›í


	)

83 
	#gz›í64
 
z_gz›í64


	)

84 #ifde‡
_WIN32


85 
	#gz›í_w
 
z_gz›í_w


	)

87 
	#gz¥ötf
 
z_gz¥ötf


	)

88 
	#gzputc
 
z_gzputc


	)

89 
	#gzputs
 
z_gzputs


	)

90 
	#gzªad
 
z_gzªad


	)

91 
	#gzªwöd
 
z_gzªwöd


	)

92 
	#gz£ek
 
z_gz£ek


	)

93 
	#gz£ek64
 
z_gz£ek64


	)

94 
	#gz£ç¨ams
 
z_gz£ç¨ams


	)

95 
	#gzãŒ
 
z_gzãŒ


	)

96 
	#gzãŒ64
 
z_gzãŒ64


	)

97 
	#gzungëc
 
z_gzungëc


	)

98 
	#gzv¥ötf
 
z_gzv¥ötf


	)

99 
	#gzwrôe
 
z_gzwrôe


	)

101 
	#öÊ©e
 
z_öÊ©e


	)

102 
	#öÊ©eBack
 
z_öÊ©eBack


	)

103 
	#öÊ©eBackEnd
 
z_öÊ©eBackEnd


	)

104 
	#öÊ©eBackInô
 
z_öÊ©eBackInô


	)

105 
	#öÊ©eBackInô_
 
z_öÊ©eBackInô_


	)

106 
	#öÊ©eCodesU£d
 
z_öÊ©eCodesU£d


	)

107 
	#öÊ©eC›y
 
z_öÊ©eC›y


	)

108 
	#öÊ©eEnd
 
z_öÊ©eEnd


	)

109 
	#öÊ©eGëDi˘i⁄¨y
 
z_öÊ©eGëDi˘i⁄¨y


	)

110 
	#öÊ©eGëHódî
 
z_öÊ©eGëHódî


	)

111 
	#öÊ©eInô
 
z_öÊ©eInô


	)

112 
	#öÊ©eInô2
 
z_öÊ©eInô2


	)

113 
	#öÊ©eInô2_
 
z_öÊ©eInô2_


	)

114 
	#öÊ©eInô_
 
z_öÊ©eInô_


	)

115 
	#öÊ©eM¨k
 
z_öÊ©eM¨k


	)

116 
	#öÊ©ePrime
 
z_öÊ©ePrime


	)

117 
	#öÊ©eRe£t
 
z_öÊ©eRe£t


	)

118 
	#öÊ©eRe£t2
 
z_öÊ©eRe£t2


	)

119 
	#öÊ©eRe£tKìp
 
z_öÊ©eRe£tKìp


	)

120 
	#öÊ©eSëDi˘i⁄¨y
 
z_öÊ©eSëDi˘i⁄¨y


	)

121 
	#öÊ©eSync
 
z_öÊ©eSync


	)

122 
	#öÊ©eSyncPoöt
 
z_öÊ©eSyncPoöt


	)

123 
	#öÊ©eUndîmöe
 
z_öÊ©eUndîmöe


	)

124 
	#öÊ©eVÆid©e
 
z_öÊ©eVÆid©e


	)

125 
	#öÊ©e_c›yright
 
z_öÊ©e_c›yright


	)

126 
	#öÊ©e_Á°
 
z_öÊ©e_Á°


	)

127 
	#öÊ©e_èbÀ
 
z_öÊ©e_èbÀ


	)

128 #i‚de‡
Z_SOLO


129 
	#uncom¥ess
 
z_uncom¥ess


	)

130 
	#uncom¥ess2
 
z_uncom¥ess2


	)

132 
	#zEº‹
 
z_zEº‹


	)

133 #i‚de‡
Z_SOLO


134 
	#zˇŒoc
 
z_zˇŒoc


	)

135 
	#zc‰ì
 
z_zc‰ì


	)

137 
	#zlibCompûeFœgs
 
z_zlibCompûeFœgs


	)

138 
	#zlibVîsi⁄
 
z_zlibVîsi⁄


	)

141 
	#Byã
 
z_Byã


	)

142 
	#Byãf
 
z_Byãf


	)

143 
	#Æloc_func
 
z_Æloc_func


	)

144 
	#ch¨f
 
z_ch¨f


	)

145 
	#‰ì_func
 
z_‰ì_func


	)

146 #i‚de‡
Z_SOLO


147 
	#gzFûe
 
z_gzFûe


	)

149 
	#gz_hódî
 
z_gz_hódî


	)

150 
	#gz_hódîp
 
z_gz_hódîp


	)

151 
	#ö_func
 
z_ö_func


	)

152 
	#ötf
 
z_ötf


	)

153 
	#out_func
 
z_out_func


	)

154 
	#uI¡
 
z_uI¡


	)

155 
	#uI¡f
 
z_uI¡f


	)

156 
	#uL⁄g
 
z_uL⁄g


	)

157 
	#uL⁄gf
 
z_uL⁄gf


	)

158 
	#voidp
 
z_voidp


	)

159 
	#voidpc
 
z_voidpc


	)

160 
	#voidpf
 
z_voidpf


	)

163 
	#gz_hódî_s
 
z_gz_hódî_s


	)

164 
	#öã∫Æ_°©e
 
z_öã∫Æ_°©e


	)

168 #i‡
deföed
(
__MSDOS__
Ë&& !deföed(
MSDOS
)

169 
	#MSDOS


	)

171 #i‡(
deföed
(
OS_2
Ë|| deföed(
__OS2__
)Ë&& !deföed(
OS2
)

172 
	#OS2


	)

174 #i‡
deföed
(
_WINDOWS
Ë&& !deföed(
WINDOWS
)

175 
	#WINDOWS


	)

177 #i‡
deföed
(
_WIN32
Ë|| deföed(
_WIN32_WCE
Ë|| deföed(
__WIN32__
)

178 #i‚de‡
WIN32


179 
	#WIN32


	)

182 #i‡(
deföed
(
MSDOS
Ë|| deföed(
OS2
Ë|| deföed(
WINDOWS
)Ë&& !deföed(
WIN32
)

183 #i‡!
deföed
(
__GNUC__
Ë&& !deföed(
__FLAT__
Ë&& !deföed(
__386__
)

184 #i‚de‡
SYS16BIT


185 
	#SYS16BIT


	)

194 #ifde‡
SYS16BIT


195 
	#MAXSEG_64K


	)

197 #ifde‡
MSDOS


198 
	#UNALIGNED_OK


	)

201 #ifde‡
__STDC_VERSION__


202 #i‚de‡
STDC


203 
	#STDC


	)

205 #i‡
__STDC_VERSION__
 >= 199901L

206 #i‚de‡
STDC99


207 
	#STDC99


	)

211 #i‡!
deföed
(
STDC
Ë&& (deföed(
__STDC__
Ë|| deföed(
__˝lu•lus
))

212 
	#STDC


	)

214 #i‡!
deföed
(
STDC
Ë&& (deföed(
__GNUC__
Ë|| deföed(
__BORLANDC__
))

215 
	#STDC


	)

217 #i‡!
deföed
(
STDC
Ë&& (deföed(
MSDOS
Ë|| deföed(
WINDOWS
Ë|| deföed(
WIN32
))

218 
	#STDC


	)

220 #i‡!
deföed
(
STDC
Ë&& (deföed(
OS2
Ë|| deföed(
__HOS_AIX__
))

221 
	#STDC


	)

224 #i‡
deföed
(
__OS400__
Ë&& !deföed(
STDC
)

225 
	#STDC


	)

228 #i‚de‡
STDC


230 c⁄°

	)

234 #i‡
deföed
(
ZLIB_CONST
Ë&& !deföed(
z_c⁄°
)

235 
	#z_c⁄°
 c⁄°

	)

237 
	#z_c⁄°


	)

240 #ifde‡
Z_SOLO


241 
	tz_size_t
;

243 
	#z_l⁄gl⁄g
 

	)

244 #i‡
deföed
(
NO_SIZE_T
)

245 
	tNO_SIZE_T
 
	tz_size_t
;

246 #ñi‡
deföed
(
STDC
)

247 
	~<°ddef.h
>

248 
size_t
 
	tz_size_t
;

250 
	tz_size_t
;

252 #unde‡
z_l⁄gl⁄g


256 #i‚de‡
MAX_MEM_LEVEL


257 #ifde‡
MAXSEG_64K


258 
	#MAX_MEM_LEVEL
 8

	)

260 
	#MAX_MEM_LEVEL
 9

	)

269 #i‚de‡
MAX_WBITS


270 
	#MAX_WBITS
 15

	)

288 #i‚de‡
OF


289 #ifde‡
STDC


290 
	#OF
(
¨gs
Ë
	)
args

292 
	#OF
(
¨gs
Ë()

	)

296 #i‚de‡
Z_ARG


297 #i‡
deföed
(
STDC
Ë|| deföed(
Z_HAVE_STDARG_H
)

298 
	#Z_ARG
(
¨gs
Ë
	)
args

300 
	#Z_ARG
(
¨gs
Ë()

	)

310 #ifde‡
SYS16BIT


311 #i‡
deföed
(
M_I86SM
Ë|| deföed(
M_I86MM
)

313 
	#SMALL_MEDIUM


	)

314 #ifde‡
_MSC_VER


315 
	#FAR
 
_Ár


	)

317 
	#FAR
 
Ár


	)

320 #i‡(
deföed
(
__SMALL__
Ë|| deföed(
__MEDIUM__
))

322 
	#SMALL_MEDIUM


	)

323 #ifde‡
__BORLANDC__


324 
	#FAR
 
_Ár


	)

326 
	#FAR
 
Ár


	)

331 #i‡
deföed
(
WINDOWS
Ë|| deföed(
WIN32
)

335 #ifde‡
ZLIB_DLL


336 #i‡
deföed
(
WIN32
Ë&& (!deföed(
__BORLANDC__
) || (__BORLANDC__ >= 0x500))

337 #ifde‡
ZLIB_INTERNAL


338 
	#ZEXTERN
 
	`__de˛•ec
(
dŒexp‹t
)

	)

340 
	#ZEXTERN
 
	`__de˛•ec
(
dŒimp‹t
)

	)

348 #ifde‡
ZLIB_WINAPI


349 #ifde‡
FAR


350 #unde‡
FAR


352 
	~<wödows.h
>

355 
	#ZEXPORT
 
WINAPI


	)

356 #ifde‡
WIN32


357 
	#ZEXPORTVA
 
WINAPIV


	)

359 
	#ZEXPORTVA
 
FAR
 
CDECL


	)

364 #i‡
deföed
 (
__BEOS__
)

365 #ifde‡
ZLIB_DLL


366 #ifde‡
ZLIB_INTERNAL


367 
	#ZEXPORT
 
	`__de˛•ec
(
dŒexp‹t
)

	)

368 
	#ZEXPORTVA
 
	`__de˛•ec
(
dŒexp‹t
)

	)

370 
	#ZEXPORT
 
	`__de˛•ec
(
dŒimp‹t
)

	)

371 
	#ZEXPORTVA
 
	`__de˛•ec
(
dŒimp‹t
)

	)

376 #i‚de‡
ZEXTERN


377 
	#ZEXTERN
 

	)

379 #i‚de‡
ZEXPORT


380 
	#ZEXPORT


	)

382 #i‚de‡
ZEXPORTVA


383 
	#ZEXPORTVA


	)

386 #i‚de‡
FAR


387 
	#FAR


	)

390 #i‡!
deföed
(
__MACTYPES__
)

391 
	tByã
;

393 
	tuI¡
;

394 
	tuL⁄g
;

396 #ifde‡
SMALL_MEDIUM


398 
	#Byãf
 
Byã
 
FAR


	)

400 
Byã
 
	tFAR
 
	tByãf
;

402 
	tFAR
 
	tch¨f
;

403 
	tFAR
 
	tötf
;

404 
uI¡
 
	tFAR
 
	tuI¡f
;

405 
uL⁄g
 
	tFAR
 
	tuL⁄gf
;

407 #ifde‡
STDC


408 c⁄° *
	tvoidpc
;

409 
	tFAR
 *
	tvoidpf
;

410 *
	tvoidp
;

412 
Byã
 c⁄° *
	tvoidpc
;

413 
Byã
 
	tFAR
 *
	tvoidpf
;

414 
Byã
 *
	tvoidp
;

417 #i‡!
deföed
(
Z_U4
Ë&& !deföed(
Z_SOLO
Ë&& deföed(
STDC
)

418 
	~<limôs.h
>

419 #i‡(
UINT_MAX
 == 0xffffffffUL)

420 
	#Z_U4
 

	)

421 #ñi‡(
ULONG_MAX
 == 0xffffffffUL)

422 
	#Z_U4
 

	)

423 #ñi‡(
USHRT_MAX
 == 0xffffffffUL)

424 
	#Z_U4
 

	)

428 #ifde‡
Z_U4


429 
Z_U4
 
	tz_¸c_t
;

431 
	tz_¸c_t
;

435 
	#Z_HAVE_UNISTD_H


	)

439 
	#Z_HAVE_STDARG_H


	)

442 #ifde‡
STDC


443 #i‚de‡
Z_SOLO


444 
	~<sys/ty≥s.h
>

448 #i‡
deföed
(
STDC
Ë|| deföed(
Z_HAVE_STDARG_H
)

449 #i‚de‡
Z_SOLO


450 
	~<°d¨g.h
>

454 #ifde‡
_WIN32


455 #i‚de‡
Z_SOLO


456 
	~<°ddef.h
>

466 #i‡
deföed
(
_LARGEFILE64_SOURCE
) && -_LARGEFILE64_SOURCE - -1 == 1

467 #unde‡
_LARGEFILE64_SOURCE


470 #i‡
deföed
(
__WATCOMC__
Ë&& !deföed(
Z_HAVE_UNISTD_H
)

471 
	#Z_HAVE_UNISTD_H


	)

473 #i‚de‡
Z_SOLO


474 #i‡
deföed
(
Z_HAVE_UNISTD_H
Ë|| deföed(
_LARGEFILE64_SOURCE
)

475 
	~<uni°d.h
>

476 #ifde‡
VMS


477 
	~<unixio.h
>

479 #i‚de‡
z_off_t


480 
	#z_off_t
 
off_t


	)

485 #i‡
deföed
(
_LFS64_LARGEFILE
) && _LFS64_LARGEFILE-0

486 
	#Z_LFS64


	)

489 #i‡
deföed
(
_LARGEFILE64_SOURCE
Ë&& deföed(
Z_LFS64
)

490 
	#Z_LARGE64


	)

493 #i‡
deföed
(
_FILE_OFFSET_BITS
Ë&& _FILE_OFFSET_BITS-0 =64 && deföed(
Z_LFS64
)

494 
	#Z_WANT64


	)

497 #i‡!
deföed
(
SEEK_SET
Ë&& !deföed(
Z_SOLO
)

498 
	#SEEK_SET
 0

	)

499 
	#SEEK_CUR
 1

	)

500 
	#SEEK_END
 2

	)

503 #i‚de‡
z_off_t


504 
	#z_off_t
 

	)

507 #i‡!
deföed
(
_WIN32
Ë&& deföed(
Z_LARGE64
)

508 
	#z_off64_t
 
off64_t


	)

510 #i‡
deföed
(
_WIN32
Ë&& !deföed(
__GNUC__
Ë&& !deföed(
Z_SOLO
)

511 
	#z_off64_t
 
__öt64


	)

513 
	#z_off64_t
 
z_off_t


	)

518 #i‡
deföed
(
__MVS__
)

519 #¥agm®
m≠
(
deÊ©eInô_
,"DEIN")

520 #¥agm®
m≠
(
deÊ©eInô2_
,"DEIN2")

521 #¥agm®
m≠
(
deÊ©eEnd
,"DEEND")

522 #¥agm®
m≠
(
deÊ©eBound
,"DEBND")

523 #¥agm®
m≠
(
öÊ©eInô_
,"ININ")

524 #¥agm®
m≠
(
öÊ©eInô2_
,"ININ2")

525 #¥agm®
m≠
(
öÊ©eEnd
,"INEND")

526 #¥agm®
m≠
(
öÊ©eSync
,"INSY")

527 #¥agm®
m≠
(
öÊ©eSëDi˘i⁄¨y
,"INSEDI")

528 #¥agm®
m≠
(
com¥essBound
,"CMBND")

529 #¥agm®
m≠
(
öÊ©e_èbÀ
,"INTABL")

530 #¥agm®
m≠
(
öÊ©e_Á°
,"INFA")

531 #¥agm®
m≠
(
öÊ©e_c›yright
,"INCOPY")

	@/usr/include/zlib.h

31 #i‚de‡
ZLIB_H


32 
	#ZLIB_H


	)

34 
	~"zc⁄f.h
"

36 #ifde‡
__˝lu•lus


40 
	#ZLIB_VERSION
 "1.2.11"

	)

41 
	#ZLIB_VERNUM
 0x12b0

	)

42 
	#ZLIB_VER_MAJOR
 1

	)

43 
	#ZLIB_VER_MINOR
 2

	)

44 
	#ZLIB_VER_REVISION
 11

	)

45 
	#ZLIB_VER_SUBREVISION
 0

	)

81 
voidpf
 (*
	tÆloc_func
Ë
	tOF
((
	tvoidpf
 
	t›aque
, 
	tuI¡
 
	tôems
, uI¡ 
	tsize
));

82 (*
‰ì_func
Ë
	tOF
((
	tvoidpf
 
	t›aque
, voidp‡
	taddªss
));

84 
öã∫Æ_°©e
;

86 
	sz_°ªam_s
 {

87 
z_c⁄°
 
Byãf
 *
√xt_ö
;

88 
uI¡
 
avaû_ö
;

89 
uL⁄g
 
tŸÆ_ö
;

91 
Byãf
 *
√xt_out
;

92 
uI¡
 
avaû_out
;

93 
uL⁄g
 
tŸÆ_out
;

95 
z_c⁄°
 *
msg
;

96 
öã∫Æ_°©e
 
FAR
 *
°©e
;

98 
Æloc_func
 
zÆloc
;

99 
‰ì_func
 
z‰ì
;

100 
voidpf
 
›aque
;

102 
d©a_ty≥
;

104 
uL⁄g
 
adÀr
;

105 
uL⁄g
 
ª£rved
;

106 } 
	tz_°ªam
;

108 
z_°ªam
 
	tFAR
 *
	tz_°ªamp
;

114 
	sgz_hódî_s
 {

115 
ãxt
;

116 
uL⁄g
 
time
;

117 
xÊags
;

118 
os
;

119 
Byãf
 *
exåa
;

120 
uI¡
 
exåa_Àn
;

121 
uI¡
 
exåa_max
;

122 
Byãf
 *
«me
;

123 
uI¡
 
«me_max
;

124 
Byãf
 *
commít
;

125 
uI¡
 
comm_max
;

126 
h¸c
;

127 
d⁄e
;

129 } 
	tgz_hódî
;

131 
gz_hódî
 
	tFAR
 *
	tgz_hódîp
;

168 
	#Z_NO_FLUSH
 0

	)

169 
	#Z_PARTIAL_FLUSH
 1

	)

170 
	#Z_SYNC_FLUSH
 2

	)

171 
	#Z_FULL_FLUSH
 3

	)

172 
	#Z_FINISH
 4

	)

173 
	#Z_BLOCK
 5

	)

174 
	#Z_TREES
 6

	)

177 
	#Z_OK
 0

	)

178 
	#Z_STREAM_END
 1

	)

179 
	#Z_NEED_DICT
 2

	)

180 
	#Z_ERRNO
 (-1)

	)

181 
	#Z_STREAM_ERROR
 (-2)

	)

182 
	#Z_DATA_ERROR
 (-3)

	)

183 
	#Z_MEM_ERROR
 (-4)

	)

184 
	#Z_BUF_ERROR
 (-5)

	)

185 
	#Z_VERSION_ERROR
 (-6)

	)

190 
	#Z_NO_COMPRESSION
 0

	)

191 
	#Z_BEST_SPEED
 1

	)

192 
	#Z_BEST_COMPRESSION
 9

	)

193 
	#Z_DEFAULT_COMPRESSION
 (-1)

	)

196 
	#Z_FILTERED
 1

	)

197 
	#Z_HUFFMAN_ONLY
 2

	)

198 
	#Z_RLE
 3

	)

199 
	#Z_FIXED
 4

	)

200 
	#Z_DEFAULT_STRATEGY
 0

	)

203 
	#Z_BINARY
 0

	)

204 
	#Z_TEXT
 1

	)

205 
	#Z_ASCII
 
Z_TEXT


	)

206 
	#Z_UNKNOWN
 2

	)

209 
	#Z_DEFLATED
 8

	)

212 
	#Z_NULL
 0

	)

214 
	#zlib_vîsi⁄
 
	`zlibVîsi⁄
()

	)

220 
ZEXTERN
 c⁄° * 
ZEXPORT
 
zlibVîsi⁄
 
OF
(());

250 
ZEXTERN
 
ZEXPORT
 
deÊ©e
 
OF
((
z_°ªamp
 
°rm
, 
Êush
));

363 
ZEXTERN
 
ZEXPORT
 
deÊ©eEnd
 
OF
((
z_°ªamp
 
°rm
));

400 
ZEXTERN
 
ZEXPORT
 
öÊ©e
 
OF
((
z_°ªamp
 
°rm
, 
Êush
));

520 
ZEXTERN
 
ZEXPORT
 
öÊ©eEnd
 
OF
((
z_°ªamp
 
°rm
));

611 
ZEXTERN
 
ZEXPORT
 
deÊ©eSëDi˘i⁄¨y
 
OF
((
z_°ªamp
 
°rm
,

612 c⁄° 
Byãf
 *
di˘i⁄¨y
,

613 
uI¡
 
di˘Lígth
));

655 
ZEXTERN
 
ZEXPORT
 
deÊ©eGëDi˘i⁄¨y
 
OF
((
z_°ªamp
 
°rm
,

656 
Byãf
 *
di˘i⁄¨y
,

657 
uI¡
 *
di˘Lígth
));

677 
ZEXTERN
 
ZEXPORT
 
deÊ©eC›y
 
OF
((
z_°ªamp
 
de°
,

678 
z_°ªamp
 
sour˚
));

695 
ZEXTERN
 
ZEXPORT
 
deÊ©eRe£t
 
OF
((
z_°ªamp
 
°rm
));

706 
ZEXTERN
 
ZEXPORT
 
deÊ©eP¨ams
 
OF
((
z_°ªamp
 
°rm
,

707 
Àvñ
,

708 
°øãgy
));

744 
ZEXTERN
 
ZEXPORT
 
deÊ©eTu√
 
OF
((
z_°ªamp
 
°rm
,

745 
good_Àngth
,

746 
max_œzy
,

747 
ni˚_Àngth
,

748 
max_chaö
));

761 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
deÊ©eBound
 
OF
((
z_°ªamp
 
°rm
,

762 
uL⁄g
 
sour˚Lí
));

776 
ZEXTERN
 
ZEXPORT
 
deÊ©ePídög
 
OF
((
z_°ªamp
 
°rm
,

777 *
≥ndög
,

778 *
bôs
));

791 
ZEXTERN
 
ZEXPORT
 
deÊ©ePrime
 
OF
((
z_°ªamp
 
°rm
,

792 
bôs
,

793 
vÆue
));

808 
ZEXTERN
 
ZEXPORT
 
deÊ©eSëHódî
 
OF
((
z_°ªamp
 
°rm
,

809 
gz_hódîp
 
hód
));

885 
ZEXTERN
 
ZEXPORT
 
öÊ©eSëDi˘i⁄¨y
 
OF
((
z_°ªamp
 
°rm
,

886 c⁄° 
Byãf
 *
di˘i⁄¨y
,

887 
uI¡
 
di˘Lígth
));

908 
ZEXTERN
 
ZEXPORT
 
öÊ©eGëDi˘i⁄¨y
 
OF
((
z_°ªamp
 
°rm
,

909 
Byãf
 *
di˘i⁄¨y
,

910 
uI¡
 *
di˘Lígth
));

923 
ZEXTERN
 
ZEXPORT
 
öÊ©eSync
 
OF
((
z_°ªamp
 
°rm
));

942 
ZEXTERN
 
ZEXPORT
 
öÊ©eC›y
 
OF
((
z_°ªamp
 
de°
,

943 
z_°ªamp
 
sour˚
));

958 
ZEXTERN
 
ZEXPORT
 
öÊ©eRe£t
 
OF
((
z_°ªamp
 
°rm
));

968 
ZEXTERN
 
ZEXPORT
 
öÊ©eRe£t2
 
OF
((
z_°ªamp
 
°rm
,

969 
wödowBôs
));

982 
ZEXTERN
 
ZEXPORT
 
öÊ©ePrime
 
OF
((
z_°ªamp
 
°rm
,

983 
bôs
,

984 
vÆue
));

1003 
ZEXTERN
 
ZEXPORT
 
öÊ©eM¨k
 
OF
((
z_°ªamp
 
°rm
));

1031 
ZEXTERN
 
ZEXPORT
 
öÊ©eGëHódî
 
OF
((
z_°ªamp
 
°rm
,

1032 
gz_hódîp
 
hód
));

1093 (*
ö_func
Ë
	tOF
((
	tFAR
 *,

1094 
	tz_c⁄°
 
	tFAR
 * FAR *));

1095 (*
out_func
Ë
	tOF
((
	tFAR
 *, FAR *, ));

1097 
ZEXTERN
 
ZEXPORT
 
öÊ©eBack
 
OF
((
z_°ªamp
 
°rm
,

1098 
ö_func
 
ö
, 
FAR
 *
ö_desc
,

1099 
out_func
 
out
, 
FAR
 *
out_desc
));

1167 
ZEXTERN
 
ZEXPORT
 
öÊ©eBackEnd
 
OF
((
z_°ªamp
 
°rm
));

1175 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
zlibCompûeFœgs
 
OF
(());

1216 #i‚de‡
Z_SOLO


1228 
ZEXTERN
 
ZEXPORT
 
com¥ess
 
OF
((
Byãf
 *
de°
, 
uL⁄gf
 *
de°Lí
,

1229 c⁄° 
Byãf
 *
sour˚
, 
uL⁄g
 
sour˚Lí
));

1243 
ZEXTERN
 
ZEXPORT
 
com¥ess2
 
OF
((
Byãf
 *
de°
, 
uL⁄gf
 *
de°Lí
,

1244 c⁄° 
Byãf
 *
sour˚
, 
uL⁄g
 
sour˚Lí
,

1245 
Àvñ
));

1259 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
com¥essBound
 
OF
((uL⁄g 
sour˚Lí
));

1266 
ZEXTERN
 
ZEXPORT
 
uncom¥ess
 
OF
((
Byãf
 *
de°
, 
uL⁄gf
 *
de°Lí
,

1267 c⁄° 
Byãf
 *
sour˚
, 
uL⁄g
 
sour˚Lí
));

1284 
ZEXTERN
 
ZEXPORT
 
uncom¥ess2
 
OF
((
Byãf
 *
de°
, 
uL⁄gf
 *
de°Lí
,

1285 c⁄° 
Byãf
 *
sour˚
, 
uL⁄g
 *
sour˚Lí
));

1301 
gzFûe_s
 *
	tgzFûe
;

1341 
ZEXTERN
 
gzFûe
 
ZEXPORT
 
gzd›í
 
OF
((
fd
, c⁄° *
mode
));

1364 
ZEXTERN
 
ZEXPORT
 
gzbuf„r
 
OF
((
gzFûe
 
fûe
, 
size
));

1380 
ZEXTERN
 
ZEXPORT
 
gz£ç¨ams
 
OF
((
gzFûe
 
fûe
, 
Àvñ
, 
°øãgy
));

1391 
ZEXTERN
 
ZEXPORT
 
gzªad
 
OF
((
gzFûe
 
fûe
, 
voidp
 
buf
, 
Àn
));

1421 
ZEXTERN
 
z_size_t
 
ZEXPORT
 
gz‰ód
 
OF
((
voidp
 
buf
, z_size_à
size
, z_size_à
nôems
,

1422 
gzFûe
 
fûe
));

1447 
ZEXTERN
 
ZEXPORT
 
gzwrôe
 
OF
((
gzFûe
 
fûe
,

1448 
voidpc
 
buf
, 
Àn
));

1455 
ZEXTERN
 
z_size_t
 
ZEXPORT
 
gzfwrôe
 
OF
((
voidpc
 
buf
, z_size_à
size
,

1456 
z_size_t
 
nôems
, 
gzFûe
 
fûe
));

1469 
ZEXTERN
 
ZEXPORTVA
 
gz¥ötf
 
Z_ARG
((
gzFûe
 
fûe
, c⁄° *
f‹m©
, ...));

1484 
ZEXTERN
 
ZEXPORT
 
gzputs
 
OF
((
gzFûe
 
fûe
, c⁄° *
s
));

1492 
ZEXTERN
 * 
ZEXPORT
 
gzgës
 
OF
((
gzFûe
 
fûe
, *
buf
, 
Àn
));

1505 
ZEXTERN
 
ZEXPORT
 
gzputc
 
OF
((
gzFûe
 
fûe
, 
c
));

1511 
ZEXTERN
 
ZEXPORT
 
gzgëc
 
OF
((
gzFûe
 
fûe
));

1520 
ZEXTERN
 
ZEXPORT
 
gzungëc
 
OF
((
c
, 
gzFûe
 
fûe
));

1532 
ZEXTERN
 
ZEXPORT
 
gzÊush
 
OF
((
gzFûe
 
fûe
, 
Êush
));

1567 
ZEXTERN
 
ZEXPORT
 
gzªwöd
 
OF
((
gzFûe
 
fûe
));

1595 
ZEXTERN
 
ZEXPORT
 
gzeof
 
OF
((
gzFûe
 
fûe
));

1610 
ZEXTERN
 
ZEXPORT
 
gzdúe˘
 
OF
((
gzFûe
 
fûe
));

1631 
ZEXTERN
 
ZEXPORT
 
gz˛o£
 
OF
((
gzFûe
 
fûe
));

1644 
ZEXTERN
 
ZEXPORT
 
gz˛o£_r
 
OF
((
gzFûe
 
fûe
));

1645 
ZEXTERN
 
ZEXPORT
 
gz˛o£_w
 
OF
((
gzFûe
 
fûe
));

1656 
ZEXTERN
 c⁄° * 
ZEXPORT
 
gzîr‹
 
OF
((
gzFûe
 
fûe
, *
î∫um
));

1672 
ZEXTERN
 
ZEXPORT
 
gz˛óªº
 
OF
((
gzFûe
 
fûe
));

1689 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32
 
OF
((uL⁄g 
adÀr
, c⁄° 
Byãf
 *
buf
, 
uI¡
 
Àn
));

1708 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32_z
 
OF
((uL⁄g 
adÀr
, c⁄° 
Byãf
 *
buf
,

1709 
z_size_t
 
Àn
));

1726 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32
 
OF
((uL⁄g 
¸c
, c⁄° 
Byãf
 *
buf
, 
uI¡
 
Àn
));

1743 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32_z
 
OF
((uL⁄g 
adÀr
, c⁄° 
Byãf
 *
buf
,

1744 
z_size_t
 
Àn
));

1765 
ZEXTERN
 
ZEXPORT
 
deÊ©eInô_
 
OF
((
z_°ªamp
 
°rm
, 
Àvñ
,

1766 c⁄° *
vîsi⁄
, 
°ªam_size
));

1767 
ZEXTERN
 
ZEXPORT
 
öÊ©eInô_
 
OF
((
z_°ªamp
 
°rm
,

1768 c⁄° *
vîsi⁄
, 
°ªam_size
));

1769 
ZEXTERN
 
ZEXPORT
 
deÊ©eInô2_
 
OF
((
z_°ªamp
 
°rm
, 
Àvñ
, 
mëhod
,

1770 
wödowBôs
, 
memLevñ
,

1771 
°øãgy
, c⁄° *
vîsi⁄
,

1772 
°ªam_size
));

1773 
ZEXTERN
 
ZEXPORT
 
öÊ©eInô2_
 
OF
((
z_°ªamp
 
°rm
, 
wödowBôs
,

1774 c⁄° *
vîsi⁄
, 
°ªam_size
));

1775 
ZEXTERN
 
ZEXPORT
 
öÊ©eBackInô_
 
OF
((
z_°ªamp
 
°rm
, 
wödowBôs
,

1776 
FAR
 *
wödow
,

1777 c⁄° *
vîsi⁄
,

1778 
°ªam_size
));

1779 #ifde‡
Z_PREFIX_SET


1780 
	#z_deÊ©eInô
(
°rm
, 
Àvñ
) \

1781 
	`deÊ©eInô_
((
°rm
), (
Àvñ
), 
ZLIB_VERSION
, ()(
z_°ªam
))

	)

1782 
	#z_öÊ©eInô
(
°rm
) \

1783 
	`öÊ©eInô_
((
°rm
), 
ZLIB_VERSION
, ()(
z_°ªam
))

	)

1784 
	#z_deÊ©eInô2
(
°rm
, 
Àvñ
, 
mëhod
, 
wödowBôs
, 
memLevñ
, 
°øãgy
) \

1785 
	`deÊ©eInô2_
((
°rm
),(
Àvñ
),(
mëhod
),(
wödowBôs
),(
memLevñ
),\

1786 (
°øãgy
), 
ZLIB_VERSION
, ()(
z_°ªam
))

	)

1787 
	#z_öÊ©eInô2
(
°rm
, 
wödowBôs
) \

1788 
	`öÊ©eInô2_
((
°rm
), (
wödowBôs
), 
ZLIB_VERSION
, \

1789 ()(
z_°ªam
))

	)

1790 
	#z_öÊ©eBackInô
(
°rm
, 
wödowBôs
, 
wödow
) \

1791 
	`öÊ©eBackInô_
((
°rm
), (
wödowBôs
), (
wödow
), \

1792 
ZLIB_VERSION
, ()(
z_°ªam
))

	)

1794 
	#deÊ©eInô
(
°rm
, 
Àvñ
) \

1795 
	`deÊ©eInô_
((
°rm
), (
Àvñ
), 
ZLIB_VERSION
, ()(
z_°ªam
))

	)

1796 
	#öÊ©eInô
(
°rm
) \

1797 
	`öÊ©eInô_
((
°rm
), 
ZLIB_VERSION
, ()(
z_°ªam
))

	)

1798 
	#deÊ©eInô2
(
°rm
, 
Àvñ
, 
mëhod
, 
wödowBôs
, 
memLevñ
, 
°øãgy
) \

1799 
	`deÊ©eInô2_
((
°rm
),(
Àvñ
),(
mëhod
),(
wödowBôs
),(
memLevñ
),\

1800 (
°øãgy
), 
ZLIB_VERSION
, ()(
z_°ªam
))

	)

1801 
	#öÊ©eInô2
(
°rm
, 
wödowBôs
) \

1802 
	`öÊ©eInô2_
((
°rm
), (
wödowBôs
), 
ZLIB_VERSION
, \

1803 ()(
z_°ªam
))

	)

1804 
	#öÊ©eBackInô
(
°rm
, 
wödowBôs
, 
wödow
) \

1805 
	`öÊ©eBackInô_
((
°rm
), (
wödowBôs
), (
wödow
), \

1806 
ZLIB_VERSION
, ()(
z_°ªam
))

	)

1809 #i‚de‡
Z_SOLO


1818 
	sgzFûe_s
 {

1819 
have
;

1820 *
√xt
;

1821 
z_off64_t
 
pos
;

1823 
ZEXTERN
 
ZEXPORT
 
gzgëc_
 
OF
((
gzFûe
 
fûe
));

1824 #ifde‡
Z_PREFIX_SET


1825 #unde‡
z_gzgëc


1826 
	#z_gzgëc
(
g
) \

1827 ((
g
)->
have
 ? ((g)->have--, (g)->
pos
++, *((g)->
√xt
)++Ë: (
gzgëc
)(g))

	)

1829 
	#gzgëc
(
g
) \

1830 ((
g
)->
have
 ? ((g)->have--, (g)->
pos
++, *((g)->
√xt
)++Ë: (
gzgëc
)(g))

	)

1839 #ifde‡
Z_LARGE64


1840 
ZEXTERN
 
gzFûe
 
ZEXPORT
 
gz›í64
 
OF
((const *, const *));

1841 
ZEXTERN
 
z_off64_t
 
ZEXPORT
 
gz£ek64
 
OF
((
gzFûe
, z_off64_t, ));

1842 
ZEXTERN
 
z_off64_t
 
ZEXPORT
 
gzãŒ64
 
OF
((
gzFûe
));

1843 
ZEXTERN
 
z_off64_t
 
ZEXPORT
 
gzoff£t64
 
OF
((
gzFûe
));

1844 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32_comböe64
 
OF
((uL⁄g, uL⁄g, 
z_off64_t
));

1845 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32_comböe64
 
OF
((uL⁄g, uL⁄g, 
z_off64_t
));

1848 #i‡!
deföed
(
ZLIB_INTERNAL
Ë&& deföed(
Z_WANT64
)

1849 #ifde‡
Z_PREFIX_SET


1850 
	#z_gz›í
 
z_gz›í64


	)

1851 
	#z_gz£ek
 
z_gz£ek64


	)

1852 
	#z_gzãŒ
 
z_gzãŒ64


	)

1853 
	#z_gzoff£t
 
z_gzoff£t64


	)

1854 
	#z_adÀr32_comböe
 
z_adÀr32_comböe64


	)

1855 
	#z_¸c32_comböe
 
z_¸c32_comböe64


	)

1857 
	#gz›í
 
gz›í64


	)

1858 
	#gz£ek
 
gz£ek64


	)

1859 
	#gzãŒ
 
gzãŒ64


	)

1860 
	#gzoff£t
 
gzoff£t64


	)

1861 
	#adÀr32_comböe
 
adÀr32_comböe64


	)

1862 
	#¸c32_comböe
 
¸c32_comböe64


	)

1864 #i‚de‡
Z_LARGE64


1865 
ZEXTERN
 
gzFûe
 
ZEXPORT
 
gz›í64
 
OF
((const *, const *));

1866 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gz£ek64
 
OF
((
gzFûe
, z_off_t, ));

1867 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gzãŒ64
 
OF
((
gzFûe
));

1868 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gzoff£t64
 
OF
((
gzFûe
));

1869 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32_comböe64
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1870 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32_comböe64
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1873 
ZEXTERN
 
gzFûe
 
ZEXPORT
 
gz›í
 
OF
((const *, const *));

1874 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gz£ek
 
OF
((
gzFûe
, z_off_t, ));

1875 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gzãŒ
 
OF
((
gzFûe
));

1876 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gzoff£t
 
OF
((
gzFûe
));

1877 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32_comböe
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1878 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32_comböe
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1883 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32_comböe
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1884 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32_comböe
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1889 
ZEXTERN
 c⁄° * 
ZEXPORT
 
zEº‹
 
OF
(());

1890 
ZEXTERN
 
ZEXPORT
 
öÊ©eSyncPoöt
 
OF
((
z_°ªamp
));

1891 
ZEXTERN
 c⁄° 
z_¸c_t
 
FAR
 * 
ZEXPORT
 
gë_¸c_èbÀ
 
OF
(());

1892 
ZEXTERN
 
ZEXPORT
 
öÊ©eUndîmöe
 
OF
((
z_°ªamp
, ));

1893 
ZEXTERN
 
ZEXPORT
 
öÊ©eVÆid©e
 
OF
((
z_°ªamp
, ));

1894 
ZEXTERN
 
ZEXPORT
 
öÊ©eCodesU£d
 
OF
 ((
z_°ªamp
));

1895 
ZEXTERN
 
ZEXPORT
 
öÊ©eRe£tKìp
 
OF
((
z_°ªamp
));

1896 
ZEXTERN
 
ZEXPORT
 
deÊ©eRe£tKìp
 
OF
((
z_°ªamp
));

1897 #i‡(
deföed
(
_WIN32
Ë|| deföed(
__CYGWIN__
)Ë&& !deföed(
Z_SOLO
)

1898 
ZEXTERN
 
gzFûe
 
ZEXPORT
 
gz›í_w
 
OF
((c⁄° 
wch¨_t
 *
∑th
,

1899 c⁄° *
mode
));

1901 #i‡
deföed
(
STDC
Ë|| deföed(
Z_HAVE_STDARG_H
)

1902 #i‚de‡
Z_SOLO


1903 
ZEXTERN
 
ZEXPORTVA
 
gzv¥ötf
 
Z_ARG
((
gzFûe
 
fûe
,

1904 c⁄° *
f‹m©
,

1905 
va_li°
 
va
));

1909 #ifde‡
__˝lu•lus


	@/usr/include/arpa/inet.h

18 #i‚de‡
_ARPA_INET_H


19 
	#_ARPA_INET_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<√töë/ö.h
>

25 #i‚de‡
__sockÀn_t_deföed


26 
__sockÀn_t
 
	tsockÀn_t
;

27 
	#__sockÀn_t_deföed


	)

30 
__BEGIN_DECLS


34 
ö_addr_t
 
	$öë_addr
 (c⁄° *
__˝
Ë
__THROW
;

37 
ö_addr_t
 
	$öë_ aof
 (
ö_addr
 
__ö
Ë
__THROW
;

41 
ö_addr
 
	$öë_makóddr
 (
ö_addr_t
 
__√t
, in_addr_à
__ho°
)

42 
__THROW
;

45 
ö_addr_t
 
	$öë_√tof
 (
ö_addr
 
__ö
Ë
__THROW
;

49 
ö_addr_t
 
	$öë_√tw‹k
 (c⁄° *
__˝
Ë
__THROW
;

53 *
	$öë_¡ﬂ
 (
ö_addr
 
__ö
Ë
__THROW
;

58 
	$öë_±⁄
 (
__af
, c⁄° *
__ª°ri˘
 
__˝
,

59 *
__ª°ri˘
 
__buf
Ë
__THROW
;

64 c⁄° *
	$öë_¡›
 (
__af
, c⁄° *
__ª°ri˘
 
__˝
,

65 *
__ª°ri˘
 
__buf
, 
sockÀn_t
 
__Àn
)

66 
__THROW
;

70 #ifde‡
__USE_MISC


73 
	$öë_©⁄
 (c⁄° *
__˝
, 
ö_addr
 *
__öp
Ë
__THROW
;

77 *
	$öë_√è
 (
ö_addr_t
 
__√t
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW


78 
	`__©åibuã_dïªˇãd_msg__
 ("Use inet_ntop instead");

83 *
	$öë_√t_¡›
 (
__af
, c⁄° *
__˝
, 
__bôs
,

84 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

89 
	$öë_√t_±⁄
 (
__af
, c⁄° *
__˝
,

90 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

95 
	$öë_nßp_addr
 (c⁄° *
__˝
,

96 *
__buf
, 
__Àn
Ë
__THROW
;

100 *
	$öë_nßp_¡ﬂ
 (
__Àn
, c⁄° *
__˝
,

101 *
__buf
Ë
__THROW
;

104 
__END_DECLS


	@/usr/include/arpa/nameser.h

48 #i‚de‡
_ARPA_NAMESER_H_


49 
	#_ARPA_NAMESER_H_


	)

51 
	~<sys/∑øm.h
>

52 
	~<sys/ty≥s.h
>

53 
	~<°döt.h
>

55 #ifde‡
_LIBC


56 
	#__NAMESER_DEPRECATED


	)

58 
	#__NAMESER_DEPRECATED
 
__©åibuã_dïªˇãd__


	)

64 
	#NS_PACKETSZ
 512

	)

65 
	#NS_MAXDNAME
 1025

	)

66 
	#NS_MAXMSG
 65535

	)

67 
	#NS_MAXCDNAME
 255

	)

68 
	#NS_MAXLABEL
 63

	)

69 
	#NS_HFIXEDSZ
 12

	)

70 
	#NS_QFIXEDSZ
 4

	)

71 
	#NS_RRFIXEDSZ
 10

	)

72 
	#NS_INT32SZ
 4

	)

73 
	#NS_INT16SZ
 2

	)

74 
	#NS_INT8SZ
 1

	)

75 
	#NS_INADDRSZ
 4

	)

76 
	#NS_IN6ADDRSZ
 16

	)

77 
	#NS_CMPRSFLGS
 0xc0

	)

78 
	#NS_DEFAULTPORT
 53

	)

83 
	e__ns_£˘
 {

84 
	mns_s_qd
 = 0,

85 
	mns_s_zn
 = 0,

86 
	mns_s_™
 = 1,

87 
	mns_s_¥
 = 1,

88 
	mns_s_ns
 = 2,

89 
	mns_s_ud
 = 2,

90 
	mns_s_¨
 = 3,

91 
	mns_s_max
 = 4

92 } 
	tns_£˘
;

99 
	s__ns_msg
 {

100 c⁄° *
	m_msg
, *
	m_eom
;

101 
uöt16_t
 
	m_id
, 
	m_Êags
, 
	m_cou¡s
[
ns_s_max
];

102 c⁄° *
	m_£˘i⁄s
[
ns_s_max
];

103 
ns_£˘
 
	m_£˘
;

104 
	m_ºnum
;

105 c⁄° *
	m_msg_±r
;

106 } 
	tns_msg
;

109 
	s_ns_Êagd©a
 { 
	mmask
, 
	mshi·
; };

110 c⁄° 
_ns_Êagd©a
 _ns_flagdata[];

114 
	#ns_msg_id
(
h™dÀ
Ë((h™dÀ).
_id
 + 0)

	)

115 
	#ns_msg_ba£
(
h™dÀ
Ë((h™dÀ).
_msg
 + 0)

	)

116 
	#ns_msg_íd
(
h™dÀ
Ë((h™dÀ).
_eom
 + 0)

	)

117 
	#ns_msg_size
(
h™dÀ
Ë((h™dÀ).
_eom
 - (h™dÀ).
_msg
)

	)

118 
	#ns_msg_cou¡
(
h™dÀ
, 
£˘i⁄
Ë((h™dÀ).
_cou¡s
[£˘i⁄] + 0)

	)

123 
	s__ns_º
 {

124 
	m«me
[
NS_MAXDNAME
];

125 
uöt16_t
 
	mty≥
;

126 
uöt16_t
 
	mº_˛ass
;

127 
uöt32_t
 
	mâl
;

128 
uöt16_t
 
	mrdÀngth
;

129 c⁄° * 
	mrd©a
;

130 } 
	tns_º
;

133 
	#ns_º_«me
(
º
Ë((‘r).
«me
[0] !'\0'Ë? (º).«mê: ".")

	)

134 
	#ns_º_ty≥
(
º
Ë((
ns_ty≥
)(‘r).
ty≥
 + 0))

	)

135 
	#ns_º_˛ass
(
º
Ë((
ns_˛ass
)(‘r).
º_˛ass
 + 0))

	)

136 
	#ns_º_âl
(
º
Ë(‘r).
âl
 + 0)

	)

137 
	#ns_º_rdÀn
(
º
Ë(‘r).
rdÀngth
 + 0)

	)

138 
	#ns_º_rd©a
(
º
Ë(‘r).
rd©a
 + 0)

	)

145 
	e__ns_Êag
 {

146 
	mns_f_qr
,

147 
	mns_f_›code
,

148 
	mns_f_Ø
,

149 
	mns_f_tc
,

150 
	mns_f_rd
,

151 
	mns_f_ø
,

152 
	mns_f_z
,

153 
	mns_f_ad
,

154 
	mns_f_cd
,

155 
	mns_f_rcode
,

156 
	mns_f_max


157 } 
	tns_Êag
;

162 
	e__ns_›code
 {

163 
	mns_o_quîy
 = 0,

164 
	mns_o_iquîy
 = 1,

165 
	mns_o_°©us
 = 2,

167 
	mns_o_nŸify
 = 4,

168 
	mns_o_upd©e
 = 5,

169 
	mns_o_max
 = 6

170 } 
	tns_›code
;

175 
	e__ns_rcode
 {

176 
	mns_r_n€º‹
 = 0,

177 
	mns_r_f‹mîr
 = 1,

178 
	mns_r_£rvÁû
 = 2,

179 
	mns_r_nxdomaö
 = 3,

180 
	mns_r_nŸim∂
 = 4,

181 
	mns_r_ªfu£d
 = 5,

183 
	mns_r_yxdomaö
 = 6,

184 
	mns_r_yxº£t
 = 7,

185 
	mns_r_nxº£t
 = 8,

186 
	mns_r_nŸauth
 = 9,

187 
	mns_r_nŸz⁄e
 = 10,

188 
	mns_r_max
 = 11,

190 
	mns_r_badvîs
 = 16,

192 
	mns_r_badsig
 = 16,

193 
	mns_r_badkey
 = 17,

194 
	mns_r_badtime
 = 18

195 } 
	tns_rcode
;

198 
	e__ns_upd©e_›î©i⁄
 {

199 
	mns_u›_dñëe
 = 0,

200 
	mns_u›_add
 = 1,

201 
	mns_u›_max
 = 2

202 } 
	tns_upd©e_›î©i⁄
;

207 
	sns_tsig_key
 {

208 
	m«me
[
NS_MAXDNAME
], 
	mÆg
[NS_MAXDNAME];

209 *
	md©a
;

210 
	mÀn
;

212 
ns_tsig_key
 
	tns_tsig_key
;

217 
	sns_t˝_tsig_°©e
 {

218 
	mcou¡î
;

219 
d°_key
 *
	mkey
;

220 *
	m˘x
;

221 
	msig
[
NS_PACKETSZ
];

222 
	msigÀn
;

224 
ns_t˝_tsig_°©e
 
	tns_t˝_tsig_°©e
;

226 
	#NS_TSIG_FUDGE
 300

	)

227 
	#NS_TSIG_TCP_COUNT
 100

	)

228 
	#NS_TSIG_ALG_HMAC_MD5
 "HMAC-MD5.SIG-ALG.REG.INT"

	)

230 
	#NS_TSIG_ERROR_NO_TSIG
 -10

	)

231 
	#NS_TSIG_ERROR_NO_SPACE
 -11

	)

232 
	#NS_TSIG_ERROR_FORMERR
 -12

	)

237 
	e__ns_ty≥


239 
	mns_t_övÆid
 = 0,

241 
	mns_t_a
 = 1,

242 
	mns_t_ns
 = 2,

243 
	mns_t_md
 = 3,

244 
	mns_t_mf
 = 4,

245 
	mns_t_˙ame
 = 5,

246 
	mns_t_sﬂ
 = 6,

247 
	mns_t_mb
 = 7,

248 
	mns_t_mg
 = 8,

249 
	mns_t_mr
 = 9,

250 
	mns_t_nuŒ
 = 10,

251 
	mns_t_wks
 = 11,

252 
	mns_t_±r
 = 12,

253 
	mns_t_höfo
 = 13,

254 
	mns_t_möfo
 = 14,

255 
	mns_t_mx
 = 15,

256 
	mns_t_txt
 = 16,

257 
	mns_t_Ω
 = 17,

258 
	mns_t_afsdb
 = 18,

259 
	mns_t_x25
 = 19,

260 
	mns_t_isdn
 = 20,

261 
	mns_t_π
 = 21,

262 
	mns_t_nßp
 = 22,

263 
	mns_t_nßp_±r
 = 23,

264 
	mns_t_sig
 = 24,

265 
	mns_t_key
 = 25,

266 
	mns_t_px
 = 26,

267 
	mns_t_gpos
 = 27,

268 
	mns_t_ØØ
 = 28,

269 
	mns_t_loc
 = 29,

270 
	mns_t_nxt
 = 30,

271 
	mns_t_eid
 = 31,

272 
	mns_t_nimloc
 = 32,

273 
	mns_t_§v
 = 33,

274 
	mns_t_©ma
 = 34,

275 
	mns_t_«±r
 = 35,

276 
	mns_t_kx
 = 36,

277 
	mns_t_˚π
 = 37,

278 
	mns_t_a6
 = 38,

279 
	mns_t_d«me
 = 39,

280 
	mns_t_sök
 = 40,

281 
	mns_t_›t
 = 41,

282 
	mns_t_≠l
 = 42,

283 
	mns_t_ds
 = 43,

284 
	mns_t_sshÂ
 = 44,

285 
	mns_t_ù£ckey
 = 45,

286 
	mns_t_ºsig
 = 46,

287 
	mns_t_n£c
 = 47,

288 
	mns_t_dnskey
 = 48,

289 
	mns_t_dhcid
 = 49,

290 
	mns_t_n£c3
 = 50,

291 
	mns_t_n£c3∑øm
 = 51,

292 
	mns_t_éß
 = 52,

293 
	mns_t_smimó
 = 53,

294 
	mns_t_hù
 = 55,

295 
	mns_t_nöfo
 = 56,

296 
	mns_t_rkey
 = 57,

297 
	mns_t_èlök
 = 58,

298 
	mns_t_cds
 = 59,

299 
	mns_t_cdnskey
 = 60,

300 
	mns_t_›ípgpkey
 = 61,

301 
	mns_t_csync
 = 62,

302 
	mns_t_•f
 = 99,

303 
	mns_t_uöfo
 = 100,

304 
	mns_t_uid
 = 101,

305 
	mns_t_gid
 = 102,

306 
	mns_t_un•ec
 = 103,

307 
	mns_t_nid
 = 104,

308 
	mns_t_l32
 = 105,

309 
	mns_t_l64
 = 106,

310 
	mns_t_Õ
 = 107,

311 
	mns_t_eui48
 = 108,

312 
	mns_t_eui64
 = 109,

313 
	mns_t_tkey
 = 249,

314 
	mns_t_tsig
 = 250,

315 
	mns_t_ix‰
 = 251,

316 
	mns_t_ax‰
 = 252,

317 
	mns_t_maûb
 = 253,

318 
	mns_t_maûa
 = 254,

319 
	mns_t_™y
 = 255,

320 
	mns_t_uri
 = 256,

321 
	mns_t_ˇa
 = 257,

322 
	mns_t_avc
 = 258,

323 
	mns_t_è
 = 32768,

324 
	mns_t_dlv
 = 32769,

326 
	mns_t_max
 = 65536

327 } 
	tns_ty≥
;

332 
	e__ns_˛ass
 {

333 
	mns_c_övÆid
 = 0,

334 
	mns_c_ö
 = 1,

335 
	mns_c_2
 = 2,

336 
	mns_c_chaos
 = 3,

337 
	mns_c_hs
 = 4,

339 
	mns_c_n⁄e
 = 254,

340 
	mns_c_™y
 = 255,

341 
	mns_c_max
 = 65536

342 } 
	tns_˛ass
;

345 
	e__ns_˚π_ty≥s
 {

346 
	m˚π_t_pkix
 = 1,

347 
	m˚π_t_•ki
 = 2,

348 
	m˚π_t_pgp
 = 3,

349 
	m˚π_t_uæ
 = 253,

350 
	m˚π_t_oid
 = 254

351 } 
	tns_˚π_ty≥s
;

356 
	#NS_OPT_DNSSEC_OK
 0x8000U

	)

357 
	#NS_OPT_NSID
 3

	)

362 
	#NS_GET16
(
s
, 
˝
) do { \

363 c⁄° *
t_˝
 = (c⁄° *)(
˝
); \

364 (
s
Ë((
uöt16_t
)
t_˝
[0] << 8) \

365 | ((
uöt16_t
)
t_˝
[1]) \

367 (
˝
Ë+
NS_INT16SZ
; \

368 } 0)

	)

370 
	#NS_GET32
(
l
, 
˝
) do { \

371 c⁄° *
t_˝
 = (c⁄° *)(
˝
); \

372 (
l
Ë((
uöt32_t
)
t_˝
[0] << 24) \

373 | ((
uöt32_t
)
t_˝
[1] << 16) \

374 | ((
uöt32_t
)
t_˝
[2] << 8) \

375 | ((
uöt32_t
)
t_˝
[3]) \

377 (
˝
Ë+
NS_INT32SZ
; \

378 } 0)

	)

380 
	#NS_PUT16
(
s
, 
˝
) do { \

381 
uöt16_t
 
t_s
 = (uöt16_t)(
s
); \

382 *
t_˝
 = (*)(
˝
); \

383 *
t_˝
++ = 
t_s
 >> 8; \

384 *
t_˝
 = 
t_s
; \

385 (
˝
Ë+
NS_INT16SZ
; \

386 } 0)

	)

388 
	#NS_PUT32
(
l
, 
˝
) do { \

389 
uöt32_t
 
t_l
 = (uöt32_t)(
l
); \

390 *
t_˝
 = (*)(
˝
); \

391 *
t_˝
++ = 
t_l
 >> 24; \

392 *
t_˝
++ = 
t_l
 >> 16; \

393 *
t_˝
++ = 
t_l
 >> 8; \

394 *
t_˝
 = 
t_l
; \

395 (
˝
Ë+
NS_INT32SZ
; \

396 } 0)

	)

398 
__BEGIN_DECLS


399 
	$ns_msg_gëÊag
 (
ns_msg
, Ë
__THROW
;

400 
	$ns_gë16
 (c⁄° *Ë
__THROW
;

401 
	$ns_gë32
 (c⁄° *Ë
__THROW
;

402 
	$ns_put16
 (, *Ë
__THROW
;

403 
	$ns_put32
 (, *Ë
__THROW
;

404 
	$ns_öô∑r£
 (c⁄° *, , 
ns_msg
 *Ë
__THROW
;

405 
	$ns_skùº
 (const *, const *,

406 
ns_£˘
, Ë
__THROW
;

407 
	$ns_∑r£º
 (
ns_msg
 *, 
ns_£˘
, , 
ns_º
 *Ë
__THROW
;

408 
	$ns_•röår
 (c⁄° 
ns_msg
 *, c⁄° 
ns_º
 *,

409 c⁄° *, c⁄° *, *, 
size_t
)

410 
__THROW
 
__NAMESER_DEPRECATED
;

411 
	$ns_•röårf
 (c⁄° *, 
size_t
, const *,

412 
ns_˛ass
, 
ns_ty≥
, ,

413 c⁄° *, 
size_t
, const *,

414 c⁄° *, *, 
size_t
)

415 
__THROW
 
__NAMESER_DEPRECATED
;

416 
	$ns_f‹m©_âl
 (, *, 
size_t
)

417 
__THROW
 
__NAMESER_DEPRECATED
;

418 
	$ns_∑r£_âl
 (const *, *)

419 
__THROW
 
__NAMESER_DEPRECATED
;

420 
uöt32_t
 
	$ns_d©ëo£cs
 (const *, *)

421 
__THROW
 
__NAMESER_DEPRECATED
;

422 
	$ns_«me_¡ﬁ
 (c⁄° *, *, 
size_t
)

423 
__THROW
;

424 
	$ns_«me_¡›
 (c⁄° *, *, 
size_t
Ë
__THROW
;

425 
	$ns_«me_±⁄
 (c⁄° *, *, 
size_t
Ë
__THROW
;

426 
	$ns_«me_u≈ack
 (const *, const *,

427 c⁄° *, *, 
size_t
)

428 
__THROW
;

429 
	$ns_«me_∑ck
 (const *, *, ,

431 
__THROW
;

432 
	$ns_«me_uncom¥ess
 (const *,

435 *, 
size_t
Ë
__THROW
;

436 
	$ns_«me_com¥ess
 (c⁄° *, *, 
size_t
,

438 c⁄° **Ë
__THROW
;

439 
	$ns_«me_skù
 (const **, const *)

440 
__THROW
;

441 
	$ns_«me_rﬁlback
 (const *,

443 c⁄° **Ë
__THROW
;

445 
	$ns_ßmedomaö
 (c⁄° *, c⁄° *Ë
__THROW


446 
__NAMESER_DEPRECATED
;

447 
	$ns_subdomaö
 (c⁄° *, c⁄° *Ë
__THROW


448 
__NAMESER_DEPRECATED
;

449 
	$ns_makeˇn⁄
 (c⁄° *, *, 
size_t
Ë
__THROW


450 
__NAMESER_DEPRECATED
;

451 
	$ns_ßmíame
 (c⁄° *, c⁄° *Ë
__THROW


452 
__NAMESER_DEPRECATED
;

453 
__END_DECLS


455 
	~<¨∑/«me£r_com∑t.h
>

	@/usr/include/arpa/nameser_compat.h

29 #i‚de‡
_ARPA_NAMESER_COMPAT_


30 
	#_ARPA_NAMESER_COMPAT_


	)

32 
	~<ídün.h
>

42 
	mid
 :16;

43 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


45 
	mqr
: 1;

46 
	m›code
: 4;

47 
	mØ
: 1;

48 
	mtc
: 1;

49 
	mrd
: 1;

51 
	mø
: 1;

52 
	munu£d
 :1;

53 
	mad
: 1;

54 
	mcd
: 1;

55 
	mrcode
 :4;

57 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN
 || __BYTE_ORDER =
__PDP_ENDIAN


59 
	mrd
 :1;

60 
	mtc
 :1;

61 
	mØ
 :1;

62 
	m›code
 :4;

63 
	mqr
 :1;

65 
	mrcode
 :4;

66 
	mcd
: 1;

67 
	mad
: 1;

68 
	munu£d
 :1;

69 
	mø
 :1;

72 
	mqdcou¡
 :16;

73 
	m™cou¡
 :16;

74 
	mnscou¡
 :16;

75 
	m¨cou¡
 :16;

76 } 
	tHEADER
;

78 
	#PACKETSZ
 
NS_PACKETSZ


	)

79 
	#MAXDNAME
 
NS_MAXDNAME


	)

80 
	#MAXCDNAME
 
NS_MAXCDNAME


	)

81 
	#MAXLABEL
 
NS_MAXLABEL


	)

82 
	#HFIXEDSZ
 
NS_HFIXEDSZ


	)

83 
	#QFIXEDSZ
 
NS_QFIXEDSZ


	)

84 
	#RRFIXEDSZ
 
NS_RRFIXEDSZ


	)

85 
	#INT32SZ
 
NS_INT32SZ


	)

86 
	#INT16SZ
 
NS_INT16SZ


	)

87 
	#INT8SZ
 
NS_INT8SZ


	)

88 
	#INADDRSZ
 
NS_INADDRSZ


	)

89 
	#IN6ADDRSZ
 
NS_IN6ADDRSZ


	)

90 
	#INDIR_MASK
 
NS_CMPRSFLGS


	)

91 
	#NAMESERVER_PORT
 
NS_DEFAULTPORT


	)

93 
	#S_ZONE
 
ns_s_zn


	)

94 
	#S_PREREQ
 
ns_s_¥


	)

95 
	#S_UPDATE
 
ns_s_ud


	)

96 
	#S_ADDT
 
ns_s_¨


	)

98 
	#QUERY
 
ns_o_quîy


	)

99 
	#IQUERY
 
ns_o_iquîy


	)

100 
	#STATUS
 
ns_o_°©us


	)

101 
	#NS_NOTIFY_OP
 
ns_o_nŸify


	)

102 
	#NS_UPDATE_OP
 
ns_o_upd©e


	)

104 
	#NOERROR
 
ns_r_n€º‹


	)

105 
	#FORMERR
 
ns_r_f‹mîr


	)

106 
	#SERVFAIL
 
ns_r_£rvÁû


	)

107 
	#NXDOMAIN
 
ns_r_nxdomaö


	)

108 
	#NOTIMP
 
ns_r_nŸim∂


	)

109 
	#REFUSED
 
ns_r_ªfu£d


	)

110 
	#YXDOMAIN
 
ns_r_yxdomaö


	)

111 
	#YXRRSET
 
ns_r_yxº£t


	)

112 
	#NXRRSET
 
ns_r_nxº£t


	)

113 
	#NOTAUTH
 
ns_r_nŸauth


	)

114 
	#NOTZONE
 
ns_r_nŸz⁄e


	)

120 
	#DELETE
 
ns_u›_dñëe


	)

121 
	#ADD
 
ns_u›_add


	)

123 
	#T_A
 
ns_t_a


	)

124 
	#T_NS
 
ns_t_ns


	)

125 
	#T_MD
 
ns_t_md


	)

126 
	#T_MF
 
ns_t_mf


	)

127 
	#T_CNAME
 
ns_t_˙ame


	)

128 
	#T_SOA
 
ns_t_sﬂ


	)

129 
	#T_MB
 
ns_t_mb


	)

130 
	#T_MG
 
ns_t_mg


	)

131 
	#T_MR
 
ns_t_mr


	)

132 
	#T_NULL
 
ns_t_nuŒ


	)

133 
	#T_WKS
 
ns_t_wks


	)

134 
	#T_PTR
 
ns_t_±r


	)

135 
	#T_HINFO
 
ns_t_höfo


	)

136 
	#T_MINFO
 
ns_t_möfo


	)

137 
	#T_MX
 
ns_t_mx


	)

138 
	#T_TXT
 
ns_t_txt


	)

139 
	#T_RP
 
ns_t_Ω


	)

140 
	#T_AFSDB
 
ns_t_afsdb


	)

141 
	#T_X25
 
ns_t_x25


	)

142 
	#T_ISDN
 
ns_t_isdn


	)

143 
	#T_RT
 
ns_t_π


	)

144 
	#T_NSAP
 
ns_t_nßp


	)

145 
	#T_NSAP_PTR
 
ns_t_nßp_±r


	)

146 
	#T_SIG
 
ns_t_sig


	)

147 
	#T_KEY
 
ns_t_key


	)

148 
	#T_PX
 
ns_t_px


	)

149 
	#T_GPOS
 
ns_t_gpos


	)

150 
	#T_AAAA
 
ns_t_ØØ


	)

151 
	#T_LOC
 
ns_t_loc


	)

152 
	#T_NXT
 
ns_t_nxt


	)

153 
	#T_EID
 
ns_t_eid


	)

154 
	#T_NIMLOC
 
ns_t_nimloc


	)

155 
	#T_SRV
 
ns_t_§v


	)

156 
	#T_ATMA
 
ns_t_©ma


	)

157 
	#T_NAPTR
 
ns_t_«±r


	)

158 
	#T_KX
 
ns_t_kx


	)

159 
	#T_CERT
 
ns_t_˚π


	)

160 
	#T_A6
 
ns_t_a6


	)

161 
	#T_DNAME
 
ns_t_d«me


	)

162 
	#T_SINK
 
ns_t_sök


	)

163 
	#T_OPT
 
ns_t_›t


	)

164 
	#T_APL
 
ns_t_≠l


	)

165 
	#T_DS
 
ns_t_ds


	)

166 
	#T_SSHFP
 
ns_t_sshÂ


	)

167 
	#T_IPSECKEY
 
ns_t_ù£ckey


	)

168 
	#T_RRSIG
 
ns_t_ºsig


	)

169 
	#T_NSEC
 
ns_t_n£c


	)

170 
	#T_DNSKEY
 
ns_t_dnskey


	)

171 
	#T_DHCID
 
ns_t_dhcid


	)

172 
	#T_NSEC3
 
ns_t_n£c3


	)

173 
	#T_NSEC3PARAM
 
ns_t_n£c3∑øm


	)

174 
	#T_TLSA
 
ns_t_éß


	)

175 
	#T_SMIMEA
 
ns_t_smimó


	)

176 
	#T_HIP
 
ns_t_hù


	)

177 
	#T_NINFO
 
ns_t_nöfo


	)

178 
	#T_RKEY
 
ns_t_rkey


	)

179 
	#T_TALINK
 
ns_t_èlök


	)

180 
	#T_CDS
 
ns_t_cds


	)

181 
	#T_CDNSKEY
 
ns_t_cdnskey


	)

182 
	#T_OPENPGPKEY
 
ns_t_›ípgpkey


	)

183 
	#T_CSYNC
 
ns_t_csync


	)

184 
	#T_SPF
 
ns_t_•f


	)

185 
	#T_UINFO
 
ns_t_uöfo


	)

186 
	#T_UID
 
ns_t_uid


	)

187 
	#T_GID
 
ns_t_gid


	)

188 
	#T_UNSPEC
 
ns_t_un•ec


	)

189 
	#T_NID
 
ns_t_nid


	)

190 
	#T_L32
 
ns_t_l32


	)

191 
	#T_L64
 
ns_t_l64


	)

192 
	#T_LP
 
ns_t_Õ


	)

193 
	#T_EUI48
 
ns_t_eui48


	)

194 
	#T_EUI64
 
ns_t_eui64


	)

195 
	#T_TKEY
 
ns_t_tkey


	)

196 
	#T_TSIG
 
ns_t_tsig


	)

197 
	#T_IXFR
 
ns_t_ix‰


	)

198 
	#T_AXFR
 
ns_t_ax‰


	)

199 
	#T_MAILB
 
ns_t_maûb


	)

200 
	#T_MAILA
 
ns_t_maûa


	)

201 
	#T_ANY
 
ns_t_™y


	)

202 
	#T_URI
 
ns_t_uri


	)

203 
	#T_CAA
 
ns_t_ˇa


	)

204 
	#T_AVC
 
ns_t_avc


	)

205 
	#T_TA
 
ns_t_è


	)

206 
	#T_DLV
 
ns_t_dlv


	)

208 
	#C_IN
 
ns_c_ö


	)

209 
	#C_CHAOS
 
ns_c_chaos


	)

210 
	#C_HS
 
ns_c_hs


	)

212 
	#C_NONE
 
ns_c_n⁄e


	)

213 
	#C_ANY
 
ns_c_™y


	)

215 
	#GETSHORT
 
NS_GET16


	)

216 
	#GETLONG
 
NS_GET32


	)

217 
	#PUTSHORT
 
NS_PUT16


	)

218 
	#PUTLONG
 
NS_PUT32


	)

	@/usr/include/asm-generic/bitsperlong.h

2 #i‚de‡
__ASM_GENERIC_BITS_PER_LONG


3 
	#__ASM_GENERIC_BITS_PER_LONG


	)

12 #i‚de‡
__BITS_PER_LONG


13 
	#__BITS_PER_LONG
 32

	)

	@/usr/include/asm-generic/bpf_perf_event.h

1 #i‚de‡
__ASM_GENERIC_BPF_PERF_EVENT_H__


2 
	#__ASM_GENERIC_BPF_PERF_EVENT_H__


	)

4 
	~<löux/±ø˚.h
>

7 
±_ªgs
 
	tbpf_u£r_±_ªgs_t
;

	@/usr/include/asm-generic/errno.h

2 #i‚de‡
_ASM_GENERIC_ERRNO_H


3 
	#_ASM_GENERIC_ERRNO_H


	)

5 
	~<asm-gíîic/î∫o-ba£.h
>

7 
	#EDEADLK
 35

	)

8 
	#ENAMETOOLONG
 36

	)

9 
	#ENOLCK
 37

	)

18 
	#ENOSYS
 38

	)

20 
	#ENOTEMPTY
 39

	)

21 
	#ELOOP
 40

	)

22 
	#EWOULDBLOCK
 
EAGAIN


	)

23 
	#ENOMSG
 42

	)

24 
	#EIDRM
 43

	)

25 
	#ECHRNG
 44

	)

26 
	#EL2NSYNC
 45

	)

27 
	#EL3HLT
 46

	)

28 
	#EL3RST
 47

	)

29 
	#ELNRNG
 48

	)

30 
	#EUNATCH
 49

	)

31 
	#ENOCSI
 50

	)

32 
	#EL2HLT
 51

	)

33 
	#EBADE
 52

	)

34 
	#EBADR
 53

	)

35 
	#EXFULL
 54

	)

36 
	#ENOANO
 55

	)

37 
	#EBADRQC
 56

	)

38 
	#EBADSLT
 57

	)

40 
	#EDEADLOCK
 
EDEADLK


	)

42 
	#EBFONT
 59

	)

43 
	#ENOSTR
 60

	)

44 
	#ENODATA
 61

	)

45 
	#ETIME
 62

	)

46 
	#ENOSR
 63

	)

47 
	#ENONET
 64

	)

48 
	#ENOPKG
 65

	)

49 
	#EREMOTE
 66

	)

50 
	#ENOLINK
 67

	)

51 
	#EADV
 68

	)

52 
	#ESRMNT
 69

	)

53 
	#ECOMM
 70

	)

54 
	#EPROTO
 71

	)

55 
	#EMULTIHOP
 72

	)

56 
	#EDOTDOT
 73

	)

57 
	#EBADMSG
 74

	)

58 
	#EOVERFLOW
 75

	)

59 
	#ENOTUNIQ
 76

	)

60 
	#EBADFD
 77

	)

61 
	#EREMCHG
 78

	)

62 
	#ELIBACC
 79

	)

63 
	#ELIBBAD
 80

	)

64 
	#ELIBSCN
 81

	)

65 
	#ELIBMAX
 82

	)

66 
	#ELIBEXEC
 83

	)

67 
	#EILSEQ
 84

	)

68 
	#ERESTART
 85

	)

69 
	#ESTRPIPE
 86

	)

70 
	#EUSERS
 87

	)

71 
	#ENOTSOCK
 88

	)

72 
	#EDESTADDRREQ
 89

	)

73 
	#EMSGSIZE
 90

	)

74 
	#EPROTOTYPE
 91

	)

75 
	#ENOPROTOOPT
 92

	)

76 
	#EPROTONOSUPPORT
 93

	)

77 
	#ESOCKTNOSUPPORT
 94

	)

78 
	#EOPNOTSUPP
 95

	)

79 
	#EPFNOSUPPORT
 96

	)

80 
	#EAFNOSUPPORT
 97

	)

81 
	#EADDRINUSE
 98

	)

82 
	#EADDRNOTAVAIL
 99

	)

83 
	#ENETDOWN
 100

	)

84 
	#ENETUNREACH
 101

	)

85 
	#ENETRESET
 102

	)

86 
	#ECONNABORTED
 103

	)

87 
	#ECONNRESET
 104

	)

88 
	#ENOBUFS
 105

	)

89 
	#EISCONN
 106

	)

90 
	#ENOTCONN
 107

	)

91 
	#ESHUTDOWN
 108

	)

92 
	#ETOOMANYREFS
 109

	)

93 
	#ETIMEDOUT
 110

	)

94 
	#ECONNREFUSED
 111

	)

95 
	#EHOSTDOWN
 112

	)

96 
	#EHOSTUNREACH
 113

	)

97 
	#EALREADY
 114

	)

98 
	#EINPROGRESS
 115

	)

99 
	#ESTALE
 116

	)

100 
	#EUCLEAN
 117

	)

101 
	#ENOTNAM
 118

	)

102 
	#ENAVAIL
 119

	)

103 
	#EISNAM
 120

	)

104 
	#EREMOTEIO
 121

	)

105 
	#EDQUOT
 122

	)

107 
	#ENOMEDIUM
 123

	)

108 
	#EMEDIUMTYPE
 124

	)

109 
	#ECANCELED
 125

	)

110 
	#ENOKEY
 126

	)

111 
	#EKEYEXPIRED
 127

	)

112 
	#EKEYREVOKED
 128

	)

113 
	#EKEYREJECTED
 129

	)

116 
	#EOWNERDEAD
 130

	)

117 
	#ENOTRECOVERABLE
 131

	)

119 
	#ERFKILL
 132

	)

121 
	#EHWPOISON
 133

	)

	@/usr/include/asm-generic/fcntl.h

2 #i‚de‡
_ASM_GENERIC_FCNTL_H


3 
	#_ASM_GENERIC_FCNTL_H


	)

5 
	~<löux/ty≥s.h
>

19 
	#O_ACCMODE
 00000003

	)

20 
	#O_RDONLY
 00000000

	)

21 
	#O_WRONLY
 00000001

	)

22 
	#O_RDWR
 00000002

	)

23 #i‚de‡
O_CREAT


24 
	#O_CREAT
 00000100

	)

26 #i‚de‡
O_EXCL


27 
	#O_EXCL
 00000200

	)

29 #i‚de‡
O_NOCTTY


30 
	#O_NOCTTY
 00000400

	)

32 #i‚de‡
O_TRUNC


33 
	#O_TRUNC
 00001000

	)

35 #i‚de‡
O_APPEND


36 
	#O_APPEND
 00002000

	)

38 #i‚de‡
O_NONBLOCK


39 
	#O_NONBLOCK
 00004000

	)

41 #i‚de‡
O_DSYNC


42 
	#O_DSYNC
 00010000

	)

44 #i‚de‡
FASYNC


45 
	#FASYNC
 00020000

	)

47 #i‚de‡
O_DIRECT


48 
	#O_DIRECT
 00040000

	)

50 #i‚de‡
O_LARGEFILE


51 
	#O_LARGEFILE
 00100000

	)

53 #i‚de‡
O_DIRECTORY


54 
	#O_DIRECTORY
 00200000

	)

56 #i‚de‡
O_NOFOLLOW


57 
	#O_NOFOLLOW
 00400000

	)

59 #i‚de‡
O_NOATIME


60 
	#O_NOATIME
 01000000

	)

62 #i‚de‡
O_CLOEXEC


63 
	#O_CLOEXEC
 02000000

	)

79 #i‚de‡
O_SYNC


80 
	#__O_SYNC
 04000000

	)

81 
	#O_SYNC
 (
__O_SYNC
|
O_DSYNC
)

	)

84 #i‚de‡
O_PATH


85 
	#O_PATH
 010000000

	)

88 #i‚de‡
__O_TMPFILE


89 
	#__O_TMPFILE
 020000000

	)

93 
	#O_TMPFILE
 (
__O_TMPFILE
 | 
O_DIRECTORY
)

	)

94 
	#O_TMPFILE_MASK
 (
__O_TMPFILE
 | 
O_DIRECTORY
 | 
O_CREAT
)

	)

96 #i‚de‡
O_NDELAY


97 
	#O_NDELAY
 
O_NONBLOCK


	)

100 
	#F_DUPFD
 0

	)

101 
	#F_GETFD
 1

	)

102 
	#F_SETFD
 2

	)

103 
	#F_GETFL
 3

	)

104 
	#F_SETFL
 4

	)

105 #i‚de‡
F_GETLK


106 
	#F_GETLK
 5

	)

107 
	#F_SETLK
 6

	)

108 
	#F_SETLKW
 7

	)

110 #i‚de‡
F_SETOWN


111 
	#F_SETOWN
 8

	)

112 
	#F_GETOWN
 9

	)

114 #i‚de‡
F_SETSIG


115 
	#F_SETSIG
 10

	)

116 
	#F_GETSIG
 11

	)

119 #i‚de‡
CONFIG_64BIT


120 #i‚de‡
F_GETLK64


121 
	#F_GETLK64
 12

	)

122 
	#F_SETLK64
 13

	)

123 
	#F_SETLKW64
 14

	)

127 #i‚de‡
F_SETOWN_EX


128 
	#F_SETOWN_EX
 15

	)

129 
	#F_GETOWN_EX
 16

	)

132 #i‚de‡
F_GETOWNER_UIDS


133 
	#F_GETOWNER_UIDS
 17

	)

148 
	#F_OFD_GETLK
 36

	)

149 
	#F_OFD_SETLK
 37

	)

150 
	#F_OFD_SETLKW
 38

	)

152 
	#F_OWNER_TID
 0

	)

153 
	#F_OWNER_PID
 1

	)

154 
	#F_OWNER_PGRP
 2

	)

156 
	sf_ow√r_ex
 {

157 
	mty≥
;

158 
__kî√l_pid_t
 
	mpid
;

162 
	#FD_CLOEXEC
 1

	)

165 #i‚de‡
F_RDLCK


166 
	#F_RDLCK
 0

	)

167 
	#F_WRLCK
 1

	)

168 
	#F_UNLCK
 2

	)

172 #i‚de‡
F_EXLCK


173 
	#F_EXLCK
 4

	)

174 
	#F_SHLCK
 8

	)

178 
	#LOCK_SH
 1

	)

179 
	#LOCK_EX
 2

	)

180 
	#LOCK_NB
 4

	)

182 
	#LOCK_UN
 8

	)

184 
	#LOCK_MAND
 32

	)

185 
	#LOCK_READ
 64

	)

186 
	#LOCK_WRITE
 128

	)

187 
	#LOCK_RW
 192

	)

189 
	#F_LINUX_SPECIFIC_BASE
 1024

	)

191 #i‚de‡
HAVE_ARCH_STRUCT_FLOCK


192 #i‚de‡
__ARCH_FLOCK_PAD


193 
	#__ARCH_FLOCK_PAD


	)

196 
	sÊock
 {

197 
	ml_ty≥
;

198 
	ml_whí˚
;

199 
__kî√l_off_t
 
	ml_°¨t
;

200 
__kî√l_off_t
 
	ml_Àn
;

201 
__kî√l_pid_t
 
	ml_pid
;

202 
	m__ARCH_FLOCK_PAD


206 #i‚de‡
HAVE_ARCH_STRUCT_FLOCK64


207 #i‚de‡
__ARCH_FLOCK64_PAD


208 
	#__ARCH_FLOCK64_PAD


	)

211 
	sÊock64
 {

212 
	ml_ty≥
;

213 
	ml_whí˚
;

214 
__kî√l_loff_t
 
	ml_°¨t
;

215 
__kî√l_loff_t
 
	ml_Àn
;

216 
__kî√l_pid_t
 
	ml_pid
;

217 
	m__ARCH_FLOCK64_PAD


	@/usr/include/asm-generic/ioctl.h

2 #i‚de‡
_ASM_GENERIC_IOCTL_H


3 
	#_ASM_GENERIC_IOCTL_H


	)

23 
	#_IOC_NRBITS
 8

	)

24 
	#_IOC_TYPEBITS
 8

	)

31 #i‚de‡
_IOC_SIZEBITS


32 
	#_IOC_SIZEBITS
 14

	)

35 #i‚de‡
_IOC_DIRBITS


36 
	#_IOC_DIRBITS
 2

	)

39 
	#_IOC_NRMASK
 ((1 << 
_IOC_NRBITS
)-1)

	)

40 
	#_IOC_TYPEMASK
 ((1 << 
_IOC_TYPEBITS
)-1)

	)

41 
	#_IOC_SIZEMASK
 ((1 << 
_IOC_SIZEBITS
)-1)

	)

42 
	#_IOC_DIRMASK
 ((1 << 
_IOC_DIRBITS
)-1)

	)

44 
	#_IOC_NRSHIFT
 0

	)

45 
	#_IOC_TYPESHIFT
 (
_IOC_NRSHIFT
+
_IOC_NRBITS
)

	)

46 
	#_IOC_SIZESHIFT
 (
_IOC_TYPESHIFT
+
_IOC_TYPEBITS
)

	)

47 
	#_IOC_DIRSHIFT
 (
_IOC_SIZESHIFT
+
_IOC_SIZEBITS
)

	)

57 #i‚de‡
_IOC_NONE


58 
	#_IOC_NONE
 0U

	)

61 #i‚de‡
_IOC_WRITE


62 
	#_IOC_WRITE
 1U

	)

65 #i‚de‡
_IOC_READ


66 
	#_IOC_READ
 2U

	)

69 
	#_IOC
(
dú
,
ty≥
,
ƒ
,
size
) \

70 (((
dú
Ë<< 
_IOC_DIRSHIFT
) | \

71 ((
ty≥
Ë<< 
_IOC_TYPESHIFT
) | \

72 ((
ƒ
Ë<< 
_IOC_NRSHIFT
) | \

73 ((
size
Ë<< 
_IOC_SIZESHIFT
))

	)

75 
	#_IOC_TYPECHECK
(
t
Ë(—))

	)

83 
	#_IO
(
ty≥
,
ƒ
Ë
	`_IOC
(
_IOC_NONE
,—y≥),“r),0)

	)

84 
	#_IOR
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

85 
	#_IOW
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_WRITE
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

86 
	#_IOWR
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
|
_IOC_WRITE
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

87 
	#_IOR_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
,—y≥),“r),(size))

	)

88 
	#_IOW_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_WRITE
,—y≥),“r),(size))

	)

89 
	#_IOWR_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
|
_IOC_WRITE
,—y≥),“r),(size))

	)

92 
	#_IOC_DIR
(
ƒ
Ë((“rË>> 
_IOC_DIRSHIFT
Ë& 
_IOC_DIRMASK
)

	)

93 
	#_IOC_TYPE
(
ƒ
Ë((“rË>> 
_IOC_TYPESHIFT
Ë& 
_IOC_TYPEMASK
)

	)

94 
	#_IOC_NR
(
ƒ
Ë((“rË>> 
_IOC_NRSHIFT
Ë& 
_IOC_NRMASK
)

	)

95 
	#_IOC_SIZE
(
ƒ
Ë((“rË>> 
_IOC_SIZESHIFT
Ë& 
_IOC_SIZEMASK
)

	)

99 
	#IOC_IN
 (
_IOC_WRITE
 << 
_IOC_DIRSHIFT
)

	)

100 
	#IOC_OUT
 (
_IOC_READ
 << 
_IOC_DIRSHIFT
)

	)

101 
	#IOC_INOUT
 ((
_IOC_WRITE
|
_IOC_READ
Ë<< 
_IOC_DIRSHIFT
)

	)

102 
	#IOCSIZE_MASK
 (
_IOC_SIZEMASK
 << 
_IOC_SIZESHIFT
)

	)

103 
	#IOCSIZE_SHIFT
 (
_IOC_SIZESHIFT
)

	)

	@/usr/include/asm-generic/ioctls.h

2 #i‚de‡
__ASM_GENERIC_IOCTLS_H


3 
	#__ASM_GENERIC_IOCTLS_H


	)

5 
	~<löux/io˘l.h
>

20 
	#TCGETS
 0x5401

	)

21 
	#TCSETS
 0x5402

	)

22 
	#TCSETSW
 0x5403

	)

23 
	#TCSETSF
 0x5404

	)

24 
	#TCGETA
 0x5405

	)

25 
	#TCSETA
 0x5406

	)

26 
	#TCSETAW
 0x5407

	)

27 
	#TCSETAF
 0x5408

	)

28 
	#TCSBRK
 0x5409

	)

29 
	#TCXONC
 0x540A

	)

30 
	#TCFLSH
 0x540B

	)

31 
	#TIOCEXCL
 0x540C

	)

32 
	#TIOCNXCL
 0x540D

	)

33 
	#TIOCSCTTY
 0x540E

	)

34 
	#TIOCGPGRP
 0x540F

	)

35 
	#TIOCSPGRP
 0x5410

	)

36 
	#TIOCOUTQ
 0x5411

	)

37 
	#TIOCSTI
 0x5412

	)

38 
	#TIOCGWINSZ
 0x5413

	)

39 
	#TIOCSWINSZ
 0x5414

	)

40 
	#TIOCMGET
 0x5415

	)

41 
	#TIOCMBIS
 0x5416

	)

42 
	#TIOCMBIC
 0x5417

	)

43 
	#TIOCMSET
 0x5418

	)

44 
	#TIOCGSOFTCAR
 0x5419

	)

45 
	#TIOCSSOFTCAR
 0x541A

	)

46 
	#FIONREAD
 0x541B

	)

47 
	#TIOCINQ
 
FIONREAD


	)

48 
	#TIOCLINUX
 0x541C

	)

49 
	#TIOCCONS
 0x541D

	)

50 
	#TIOCGSERIAL
 0x541E

	)

51 
	#TIOCSSERIAL
 0x541F

	)

52 
	#TIOCPKT
 0x5420

	)

53 
	#FIONBIO
 0x5421

	)

54 
	#TIOCNOTTY
 0x5422

	)

55 
	#TIOCSETD
 0x5423

	)

56 
	#TIOCGETD
 0x5424

	)

57 
	#TCSBRKP
 0x5425

	)

58 
	#TIOCSBRK
 0x5427

	)

59 
	#TIOCCBRK
 0x5428

	)

60 
	#TIOCGSID
 0x5429

	)

61 
	#TCGETS2
 
	`_IOR
('T', 0x2A, 
ãrmios2
)

	)

62 
	#TCSETS2
 
	`_IOW
('T', 0x2B, 
ãrmios2
)

	)

63 
	#TCSETSW2
 
	`_IOW
('T', 0x2C, 
ãrmios2
)

	)

64 
	#TCSETSF2
 
	`_IOW
('T', 0x2D, 
ãrmios2
)

	)

65 
	#TIOCGRS485
 0x542E

	)

66 #i‚de‡
TIOCSRS485


67 
	#TIOCSRS485
 0x542F

	)

69 
	#TIOCGPTN
 
	`_IOR
('T', 0x30, Ë

	)

70 
	#TIOCSPTLCK
 
	`_IOW
('T', 0x31, Ë

	)

71 
	#TIOCGDEV
 
	`_IOR
('T', 0x32, Ë

	)

72 
	#TCGETX
 0x5432

	)

73 
	#TCSETX
 0x5433

	)

74 
	#TCSETXF
 0x5434

	)

75 
	#TCSETXW
 0x5435

	)

76 
	#TIOCSIG
 
	`_IOW
('T', 0x36, Ë

	)

77 
	#TIOCVHANGUP
 0x5437

	)

78 
	#TIOCGPKT
 
	`_IOR
('T', 0x38, Ë

	)

79 
	#TIOCGPTLCK
 
	`_IOR
('T', 0x39, Ë

	)

80 
	#TIOCGEXCL
 
	`_IOR
('T', 0x40, Ë

	)

81 
	#TIOCGPTPEER
 
	`_IO
('T', 0x41Ë

	)

82 
	#TIOCGISO7816
 
	`_IOR
('T', 0x42, 
£rül_iso7816
)

	)

83 
	#TIOCSISO7816
 
	`_IOWR
('T', 0x43, 
£rül_iso7816
)

	)

85 
	#FIONCLEX
 0x5450

	)

86 
	#FIOCLEX
 0x5451

	)

87 
	#FIOASYNC
 0x5452

	)

88 
	#TIOCSERCONFIG
 0x5453

	)

89 
	#TIOCSERGWILD
 0x5454

	)

90 
	#TIOCSERSWILD
 0x5455

	)

91 
	#TIOCGLCKTRMIOS
 0x5456

	)

92 
	#TIOCSLCKTRMIOS
 0x5457

	)

93 
	#TIOCSERGSTRUCT
 0x5458

	)

94 
	#TIOCSERGETLSR
 0x5459

	)

95 
	#TIOCSERGETMULTI
 0x545A

	)

96 
	#TIOCSERSETMULTI
 0x545B

	)

98 
	#TIOCMIWAIT
 0x545C

	)

99 
	#TIOCGICOUNT
 0x545D

	)

105 #i‚de‡
FIOQSIZE


106 
	#FIOQSIZE
 0x5460

	)

110 
	#TIOCPKT_DATA
 0

	)

111 
	#TIOCPKT_FLUSHREAD
 1

	)

112 
	#TIOCPKT_FLUSHWRITE
 2

	)

113 
	#TIOCPKT_STOP
 4

	)

114 
	#TIOCPKT_START
 8

	)

115 
	#TIOCPKT_NOSTOP
 16

	)

116 
	#TIOCPKT_DOSTOP
 32

	)

117 
	#TIOCPKT_IOCTL
 64

	)

119 
	#TIOCSER_TEMT
 0x01

	)

	@/usr/include/asm-generic/ipcbuf.h

2 #i‚de‡
__ASM_GENERIC_IPCBUF_H


3 
	#__ASM_GENERIC_IPCBUF_H


	)

5 
	~<löux/posix_ty≥s.h
>

22 
	sùc64_≥rm
 {

23 
__kî√l_key_t
 
	mkey
;

24 
__kî√l_uid32_t
 
	muid
;

25 
__kî√l_gid32_t
 
	mgid
;

26 
__kî√l_uid32_t
 
	mcuid
;

27 
__kî√l_gid32_t
 
	mcgid
;

28 
__kî√l_mode_t
 
	mmode
;

30 
	m__∑d1
[4 - (
__kî√l_mode_t
)];

31 
	m£q
;

32 
	m__∑d2
;

33 
__kî√l_ul⁄g_t
 
	m__unu£d1
;

34 
__kî√l_ul⁄g_t
 
	m__unu£d2
;

	@/usr/include/asm-generic/mman.h

2 #i‚de‡
__ASM_GENERIC_MMAN_H


3 
	#__ASM_GENERIC_MMAN_H


	)

5 
	~<asm-gíîic/mm™-comm⁄.h
>

7 
	#MAP_GROWSDOWN
 0x0100

	)

8 
	#MAP_DENYWRITE
 0x0800

	)

9 
	#MAP_EXECUTABLE
 0x1000

	)

10 
	#MAP_LOCKED
 0x2000

	)

11 
	#MAP_NORESERVE
 0x4000

	)

18 
	#MCL_CURRENT
 1

	)

19 
	#MCL_FUTURE
 2

	)

20 
	#MCL_ONFAULT
 4

	)

	@/usr/include/asm-generic/msgbuf.h

2 #i‚de‡
__ASM_GENERIC_MSGBUF_H


3 
	#__ASM_GENERIC_MSGBUF_H


	)

5 
	~<asm/bô•îl⁄g.h
>

6 
	~<asm/ùcbuf.h
>

26 
	smsqid64_ds
 {

27 
ùc64_≥rm
 
	mmsg_≥rm
;

28 #i‡
__BITS_PER_LONG
 == 64

29 
	mmsg_°ime
;

30 
	mmsg_πime
;

31 
	mmsg_˘ime
;

33 
	mmsg_°ime
;

34 
	mmsg_°ime_high
;

35 
	mmsg_πime
;

36 
	mmsg_πime_high
;

37 
	mmsg_˘ime
;

38 
	mmsg_˘ime_high
;

40 
	mmsg_cbyãs
;

41 
	mmsg_qnum
;

42 
	mmsg_qbyãs
;

43 
__kî√l_pid_t
 
	mmsg_l•id
;

44 
__kî√l_pid_t
 
	mmsg_Ãpid
;

45 
	m__unu£d4
;

46 
	m__unu£d5
;

	@/usr/include/asm-generic/param.h

2 #i‚de‡
__ASM_GENERIC_PARAM_H


3 
	#__ASM_GENERIC_PARAM_H


	)

5 #i‚de‡
HZ


6 
	#HZ
 100

	)

9 #i‚de‡
EXEC_PAGESIZE


10 
	#EXEC_PAGESIZE
 4096

	)

13 #i‚de‡
NOGROUP


14 
	#NOGROUP
 (-1)

	)

17 
	#MAXHOSTNAMELEN
 64

	)

	@/usr/include/asm-generic/poll.h

2 #i‚de‡
__ASM_GENERIC_POLL_H


3 
	#__ASM_GENERIC_POLL_H


	)

6 
	#POLLIN
 0x0001

	)

7 
	#POLLPRI
 0x0002

	)

8 
	#POLLOUT
 0x0004

	)

9 
	#POLLERR
 0x0008

	)

10 
	#POLLHUP
 0x0010

	)

11 
	#POLLNVAL
 0x0020

	)

14 
	#POLLRDNORM
 0x0040

	)

15 
	#POLLRDBAND
 0x0080

	)

16 #i‚de‡
POLLWRNORM


17 
	#POLLWRNORM
 0x0100

	)

19 #i‚de‡
POLLWRBAND


20 
	#POLLWRBAND
 0x0200

	)

22 #i‚de‡
POLLMSG


23 
	#POLLMSG
 0x0400

	)

25 #i‚de‡
POLLREMOVE


26 
	#POLLREMOVE
 0x1000

	)

28 #i‚de‡
POLLRDHUP


29 
	#POLLRDHUP
 0x2000

	)

32 
	#POLLFREE
 (
__pﬁl_t
)0x4000

	)

34 
	#POLL_BUSY_LOOP
 (
__pﬁl_t
)0x8000

	)

36 
	spﬁlfd
 {

37 
	mfd
;

38 
	mevíts
;

39 
	mªvíts
;

	@/usr/include/asm-generic/posix_types.h

2 #i‚de‡
__ASM_GENERIC_POSIX_TYPES_H


3 
	#__ASM_GENERIC_POSIX_TYPES_H


	)

5 
	~<asm/bô•îl⁄g.h
>

14 #i‚de‡
__kî√l_l⁄g_t


15 
	t__kî√l_l⁄g_t
;

16 
	t__kî√l_ul⁄g_t
;

19 #i‚de‡
__kî√l_öo_t


20 
__kî√l_ul⁄g_t
 
	t__kî√l_öo_t
;

23 #i‚de‡
__kî√l_mode_t


24 
	t__kî√l_mode_t
;

27 #i‚de‡
__kî√l_pid_t


28 
	t__kî√l_pid_t
;

31 #i‚de‡
__kî√l_ùc_pid_t


32 
	t__kî√l_ùc_pid_t
;

35 #i‚de‡
__kî√l_uid_t


36 
	t__kî√l_uid_t
;

37 
	t__kî√l_gid_t
;

40 #i‚de‡
__kî√l_su£c⁄ds_t


41 
__kî√l_l⁄g_t
 
	t__kî√l_su£c⁄ds_t
;

44 #i‚de‡
__kî√l_daddr_t


45 
	t__kî√l_daddr_t
;

48 #i‚de‡
__kî√l_uid32_t


49 
	t__kî√l_uid32_t
;

50 
	t__kî√l_gid32_t
;

53 #i‚de‡
__kî√l_ﬁd_uid_t


54 
__kî√l_uid_t
 
	t__kî√l_ﬁd_uid_t
;

55 
__kî√l_gid_t
 
	t__kî√l_ﬁd_gid_t
;

58 #i‚de‡
__kî√l_ﬁd_dev_t


59 
	t__kî√l_ﬁd_dev_t
;

66 #i‚de‡
__kî√l_size_t


67 #i‡
__BITS_PER_LONG
 != 64

68 
	t__kî√l_size_t
;

69 
	t__kî√l_ssize_t
;

70 
	t__kî√l_±rdiff_t
;

72 
__kî√l_ul⁄g_t
 
	t__kî√l_size_t
;

73 
__kî√l_l⁄g_t
 
	t__kî√l_ssize_t
;

74 
__kî√l_l⁄g_t
 
	t__kî√l_±rdiff_t
;

78 #i‚de‡
__kî√l_fsid_t


80 
	mvÆ
[2];

81 } 
	t__kî√l_fsid_t
;

87 
__kî√l_l⁄g_t
 
	t__kî√l_off_t
;

88 
	t__kî√l_loff_t
;

89 
__kî√l_l⁄g_t
 
	t__kî√l_ﬁd_time_t
;

90 
__kî√l_l⁄g_t
 
	t__kî√l_time_t
;

91 
	t__kî√l_time64_t
;

92 
__kî√l_l⁄g_t
 
	t__kî√l_˛ock_t
;

93 
	t__kî√l_timî_t
;

94 
	t__kî√l_˛ockid_t
;

95 * 
	t__kî√l_ˇddr_t
;

96 
	t__kî√l_uid16_t
;

97 
	t__kî√l_gid16_t
;

	@/usr/include/asm-generic/resource.h

2 #i‚de‡
_ASM_GENERIC_RESOURCE_H


3 
	#_ASM_GENERIC_RESOURCE_H


	)

16 
	#RLIMIT_CPU
 0

	)

17 
	#RLIMIT_FSIZE
 1

	)

18 
	#RLIMIT_DATA
 2

	)

19 
	#RLIMIT_STACK
 3

	)

20 
	#RLIMIT_CORE
 4

	)

22 #i‚de‡
RLIMIT_RSS


23 
	#RLIMIT_RSS
 5

	)

26 #i‚de‡
RLIMIT_NPROC


27 
	#RLIMIT_NPROC
 6

	)

30 #i‚de‡
RLIMIT_NOFILE


31 
	#RLIMIT_NOFILE
 7

	)

34 #i‚de‡
RLIMIT_MEMLOCK


35 
	#RLIMIT_MEMLOCK
 8

	)

38 #i‚de‡
RLIMIT_AS


39 
	#RLIMIT_AS
 9

	)

42 
	#RLIMIT_LOCKS
 10

	)

43 
	#RLIMIT_SIGPENDING
 11

	)

44 
	#RLIMIT_MSGQUEUE
 12

	)

45 
	#RLIMIT_NICE
 13

	)

47 
	#RLIMIT_RTPRIO
 14

	)

48 
	#RLIMIT_RTTIME
 15

	)

49 
	#RLIM_NLIMITS
 16

	)

57 #i‚de‡
RLIM_INFINITY


58 
	#RLIM_INFINITY
 (~0UL)

	)

	@/usr/include/asm-generic/shmbuf.h

2 #i‚de‡
__ASM_GENERIC_SHMBUF_H


3 
	#__ASM_GENERIC_SHMBUF_H


	)

5 
	~<asm/bô•îl⁄g.h
>

25 
	sshmid64_ds
 {

26 
ùc64_≥rm
 
	mshm_≥rm
;

27 
size_t
 
	mshm_£gsz
;

28 #i‡
__BITS_PER_LONG
 == 64

29 
	mshm_©ime
;

30 
	mshm_dtime
;

31 
	mshm_˘ime
;

33 
	mshm_©ime
;

34 
	mshm_©ime_high
;

35 
	mshm_dtime
;

36 
	mshm_dtime_high
;

37 
	mshm_˘ime
;

38 
	mshm_˘ime_high
;

40 
__kî√l_pid_t
 
	mshm_˝id
;

41 
__kî√l_pid_t
 
	mshm_Õid
;

42 
	mshm_«âch
;

43 
	m__unu£d4
;

44 
	m__unu£d5
;

47 
	sshmöfo64
 {

48 
	mshmmax
;

49 
	mshmmö
;

50 
	mshmmni
;

51 
	mshm£g
;

52 
	mshmÆl
;

53 
	m__unu£d1
;

54 
	m__unu£d2
;

55 
	m__unu£d3
;

56 
	m__unu£d4
;

	@/usr/include/asm-generic/siginfo.h

2 #i‚de‡
_ASM_GENERIC_SIGINFO_H


3 
	#_ASM_GENERIC_SIGINFO_H


	)

6 
	~<löux/ty≥s.h
>

8 
	usigvÆ
 {

9 
	msivÆ_öt
;

10 *
	msivÆ_±r
;

11 } 
	tsigvÆ_t
;

13 
	#SI_MAX_SIZE
 128

	)

20 #i‚de‡
__ARCH_SI_BAND_T


21 
	#__ARCH_SI_BAND_T
 

	)

24 #i‚de‡
__ARCH_SI_CLOCK_T


25 
	#__ARCH_SI_CLOCK_T
 
__kî√l_˛ock_t


	)

28 #i‚de‡
__ARCH_SI_ATTRIBUTES


29 
	#__ARCH_SI_ATTRIBUTES


	)

37 
	u__sifõlds
 {

40 
__kî√l_pid_t
 
	m_pid
;

41 
__kî√l_uid32_t
 
	m_uid
;

42 } 
	m_kûl
;

46 
__kî√l_timî_t
 
	m_tid
;

47 
	m_ovîrun
;

48 
sigvÆ_t
 
	m_sigvÆ
;

49 
	m_sys_¥iv©e
;

50 } 
	m_timî
;

54 
__kî√l_pid_t
 
	m_pid
;

55 
__kî√l_uid32_t
 
	m_uid
;

56 
sigvÆ_t
 
	m_sigvÆ
;

57 } 
	m_π
;

61 
__kî√l_pid_t
 
	m_pid
;

62 
__kî√l_uid32_t
 
	m_uid
;

63 
	m_°©us
;

64 
__ARCH_SI_CLOCK_T
 
	m_utime
;

65 
__ARCH_SI_CLOCK_T
 
	m_°ime
;

66 } 
	m_sigchld
;

70 *
	m_addr
;

71 #ifde‡
__ü64__


72 
	m_imm
;

73 
	m_Êags
;

74 
	m_i§
;

77 
	#__ADDR_BND_PKEY_PAD
 (
	`__Æignof__
(*) < () ? \

78 (Ë: 
	`__Æignof__
(*))

	)

81 
	m_å≠no
;

86 
	m_addr_lsb
;

89 
	m_dummy_bnd
[
__ADDR_BND_PKEY_PAD
];

90 *
	m_lowî
;

91 *
	m_uµî
;

92 } 
	m_addr_bnd
;

95 
	m_dummy_pkey
[
__ADDR_BND_PKEY_PAD
];

96 
__u32
 
	m_pkey
;

97 } 
	m_addr_pkey
;

100 
	m_d©a
;

101 
__u32
 
	m_ty≥
;

102 
__u32
 
	m_Êags
;

103 } 
	m_≥rf
;

105 } 
	m_sigÁu…
;

109 
__ARCH_SI_BAND_T
 
	m_b™d
;

110 
	m_fd
;

111 } 
	m_sigpﬁl
;

115 *
	m_ˇŒ_addr
;

116 
	m_sysˇŒ
;

117 
	m_¨ch
;

118 } 
	m_sigsys
;

121 #i‚de‡
__ARCH_HAS_SWAPPED_SIGINFO


122 
	#__SIGINFO
 \

124 
si_signo
; \

125 
si_î∫o
; \

126 
si_code
; \

127 
__sifõlds
 
_sifõlds
; \

128 }

	)

130 
	#__SIGINFO
 \

132 
si_signo
; \

133 
si_code
; \

134 
si_î∫o
; \

135 
__sifõlds
 
_sifõlds
; \

136 }

	)

139 
	ssigöfo
 {

141 
	m__SIGINFO
;

142 
	m_si_∑d
[
SI_MAX_SIZE
/()];

144 } 
	t__ARCH_SI_ATTRIBUTES
 
	tsigöfo_t
;

149 
	#si_pid
 
_sifõlds
.
_kûl
.
_pid


	)

150 
	#si_uid
 
_sifõlds
.
_kûl
.
_uid


	)

151 
	#si_tid
 
_sifõlds
.
_timî
.
_tid


	)

152 
	#si_ovîrun
 
_sifõlds
.
_timî
.
_ovîrun


	)

153 
	#si_sys_¥iv©e
 
_sifõlds
.
_timî
.
_sys_¥iv©e


	)

154 
	#si_°©us
 
_sifõlds
.
_sigchld
.
_°©us


	)

155 
	#si_utime
 
_sifõlds
.
_sigchld
.
_utime


	)

156 
	#si_°ime
 
_sifõlds
.
_sigchld
.
_°ime


	)

157 
	#si_vÆue
 
_sifõlds
.
_π
.
_sigvÆ


	)

158 
	#si_öt
 
_sifõlds
.
_π
.
_sigvÆ
.
sivÆ_öt


	)

159 
	#si_±r
 
_sifõlds
.
_π
.
_sigvÆ
.
sivÆ_±r


	)

160 
	#si_addr
 
_sifõlds
.
_sigÁu…
.
_addr


	)

161 
	#si_å≠no
 
_sifõlds
.
_sigÁu…
.
_å≠no


	)

162 
	#si_addr_lsb
 
_sifõlds
.
_sigÁu…
.
_addr_lsb


	)

163 
	#si_lowî
 
_sifõlds
.
_sigÁu…
.
_addr_bnd
.
_lowî


	)

164 
	#si_uµî
 
_sifõlds
.
_sigÁu…
.
_addr_bnd
.
_uµî


	)

165 
	#si_pkey
 
_sifõlds
.
_sigÁu…
.
_addr_pkey
.
_pkey


	)

166 
	#si_≥rf_d©a
 
_sifõlds
.
_sigÁu…
.
_≥rf
.
_d©a


	)

167 
	#si_≥rf_ty≥
 
_sifõlds
.
_sigÁu…
.
_≥rf
.
_ty≥


	)

168 
	#si_≥rf_Êags
 
_sifõlds
.
_sigÁu…
.
_≥rf
.
_Êags


	)

169 
	#si_b™d
 
_sifõlds
.
_sigpﬁl
.
_b™d


	)

170 
	#si_fd
 
_sifõlds
.
_sigpﬁl
.
_fd


	)

171 
	#si_ˇŒ_addr
 
_sifõlds
.
_sigsys
.
_ˇŒ_addr


	)

172 
	#si_sysˇŒ
 
_sifõlds
.
_sigsys
.
_sysˇŒ


	)

173 
	#si_¨ch
 
_sifõlds
.
_sigsys
.
_¨ch


	)

179 
	#SI_USER
 0

	)

180 
	#SI_KERNEL
 0x80

	)

181 
	#SI_QUEUE
 -1

	)

182 
	#SI_TIMER
 -2

	)

183 
	#SI_MESGQ
 -3

	)

184 
	#SI_ASYNCIO
 -4

	)

185 
	#SI_SIGIO
 -5

	)

186 
	#SI_TKILL
 -6

	)

187 
	#SI_DETHREAD
 -7

	)

188 
	#SI_ASYNCNL
 -60

	)

190 
	#SI_FROMUSER
(
sùå
Ë((sùå)->
si_code
 <0)

	)

191 
	#SI_FROMKERNEL
(
sùå
Ë((sùå)->
si_code
 > 0)

	)

196 
	#ILL_ILLOPC
 1

	)

197 
	#ILL_ILLOPN
 2

	)

198 
	#ILL_ILLADR
 3

	)

199 
	#ILL_ILLTRP
 4

	)

200 
	#ILL_PRVOPC
 5

	)

201 
	#ILL_PRVREG
 6

	)

202 
	#ILL_COPROC
 7

	)

203 
	#ILL_BADSTK
 8

	)

204 
	#ILL_BADIADDR
 9

	)

205 
	#__ILL_BREAK
 10

	)

206 
	#__ILL_BNDMOD
 11

	)

207 
	#NSIGILL
 11

	)

212 
	#FPE_INTDIV
 1

	)

213 
	#FPE_INTOVF
 2

	)

214 
	#FPE_FLTDIV
 3

	)

215 
	#FPE_FLTOVF
 4

	)

216 
	#FPE_FLTUND
 5

	)

217 
	#FPE_FLTRES
 6

	)

218 
	#FPE_FLTINV
 7

	)

219 
	#FPE_FLTSUB
 8

	)

220 
	#__FPE_DECOVF
 9

	)

221 
	#__FPE_DECDIV
 10

	)

222 
	#__FPE_DECERR
 11

	)

223 
	#__FPE_INVASC
 12

	)

224 
	#__FPE_INVDEC
 13

	)

225 
	#FPE_FLTUNK
 14

	)

226 
	#FPE_CONDTRAP
 15

	)

227 
	#NSIGFPE
 15

	)

232 
	#SEGV_MAPERR
 1

	)

233 
	#SEGV_ACCERR
 2

	)

234 
	#SEGV_BNDERR
 3

	)

235 #ifde‡
__ü64__


236 
	#__SEGV_PSTKOVF
 4

	)

238 
	#SEGV_PKUERR
 4

	)

240 
	#SEGV_ACCADI
 5

	)

241 
	#SEGV_ADIDERR
 6

	)

242 
	#SEGV_ADIPERR
 7

	)

243 
	#SEGV_MTEAERR
 8

	)

244 
	#SEGV_MTESERR
 9

	)

245 
	#NSIGSEGV
 9

	)

250 
	#BUS_ADRALN
 1

	)

251 
	#BUS_ADRERR
 2

	)

252 
	#BUS_OBJERR
 3

	)

254 
	#BUS_MCEERR_AR
 4

	)

256 
	#BUS_MCEERR_AO
 5

	)

257 
	#NSIGBUS
 5

	)

262 
	#TRAP_BRKPT
 1

	)

263 
	#TRAP_TRACE
 2

	)

264 
	#TRAP_BRANCH
 3

	)

265 
	#TRAP_HWBKPT
 4

	)

266 
	#TRAP_UNK
 5

	)

267 
	#TRAP_PERF
 6

	)

268 
	#NSIGTRAP
 6

	)

278 
	#TRAP_PERF_FLAG_ASYNC
 (1u << 0)

	)

283 
	#CLD_EXITED
 1

	)

284 
	#CLD_KILLED
 2

	)

285 
	#CLD_DUMPED
 3

	)

286 
	#CLD_TRAPPED
 4

	)

287 
	#CLD_STOPPED
 5

	)

288 
	#CLD_CONTINUED
 6

	)

289 
	#NSIGCHLD
 6

	)

294 
	#POLL_IN
 1

	)

295 
	#POLL_OUT
 2

	)

296 
	#POLL_MSG
 3

	)

297 
	#POLL_ERR
 4

	)

298 
	#POLL_PRI
 5

	)

299 
	#POLL_HUP
 6

	)

300 
	#NSIGPOLL
 6

	)

305 
	#SYS_SECCOMP
 1

	)

306 
	#SYS_USER_DISPATCH
 2

	)

307 
	#NSIGSYS
 2

	)

312 
	#EMT_TAGOVF
 1

	)

313 
	#NSIGEMT
 1

	)

323 
	#SIGEV_SIGNAL
 0

	)

324 
	#SIGEV_NONE
 1

	)

325 
	#SIGEV_THREAD
 2

	)

326 
	#SIGEV_THREAD_ID
 4

	)

332 #i‚de‡
__ARCH_SIGEV_PREAMBLE_SIZE


333 
	#__ARCH_SIGEV_PREAMBLE_SIZE
 ((Ë* 2 + (
sigvÆ_t
))

	)

336 
	#SIGEV_MAX_SIZE
 64

	)

337 
	#SIGEV_PAD_SIZE
 ((
SIGEV_MAX_SIZE
 - 
__ARCH_SIGEV_PREAMBLE_SIZE
) \

338 / ())

	)

340 
	ssigevít
 {

341 
sigvÆ_t
 
	msigev_vÆue
;

342 
	msigev_signo
;

343 
	msigev_nŸify
;

345 
	m_∑d
[
SIGEV_PAD_SIZE
];

346 
	m_tid
;

349 (*
	m_fun˘i⁄
)(
	msigvÆ_t
);

350 *
	m_©åibuã
;

351 } 
	m_sigev_thªad
;

352 } 
	m_sigev_un
;

353 } 
	tsigevít_t
;

355 
	#sigev_nŸify_fun˘i⁄
 
_sigev_un
.
_sigev_thªad
.
_fun˘i⁄


	)

356 
	#sigev_nŸify_©åibuãs
 
_sigev_un
.
_sigev_thªad
.
_©åibuã


	)

357 
	#sigev_nŸify_thªad_id
 
_sigev_un
.
_tid


	)

	@/usr/include/asm-generic/signal-defs.h

2 #i‚de‡
__ASM_GENERIC_SIGNAL_DEFS_H


3 
	#__ASM_GENERIC_SIGNAL_DEFS_H


	)

29 #i‚de‡
SA_NOCLDSTOP


30 
	#SA_NOCLDSTOP
 0x00000001

	)

32 #i‚de‡
SA_NOCLDWAIT


33 
	#SA_NOCLDWAIT
 0x00000002

	)

35 #i‚de‡
SA_SIGINFO


36 
	#SA_SIGINFO
 0x00000004

	)

45 
	#SA_UNSUPPORTED
 0x00000400

	)

46 
	#SA_EXPOSE_TAGBITS
 0x00000800

	)

55 #i‚de‡
SA_ONSTACK


56 
	#SA_ONSTACK
 0x08000000

	)

58 #i‚de‡
SA_RESTART


59 
	#SA_RESTART
 0x10000000

	)

61 #i‚de‡
SA_NODEFER


62 
	#SA_NODEFER
 0x40000000

	)

64 #i‚de‡
SA_RESETHAND


65 
	#SA_RESETHAND
 0x80000000

	)

68 
	#SA_NOMASK
 
SA_NODEFER


	)

69 
	#SA_ONESHOT
 
SA_RESETHAND


	)

71 #i‚de‡
SIG_BLOCK


72 
	#SIG_BLOCK
 0

	)

74 #i‚de‡
SIG_UNBLOCK


75 
	#SIG_UNBLOCK
 1

	)

77 #i‚de‡
SIG_SETMASK


78 
	#SIG_SETMASK
 2

	)

81 #i‚de‡
__ASSEMBLY__


82 
	t__sig«l‚_t
();

83 
__sig«l‚_t
 *
	t__sigh™dÀr_t
;

85 
	t__ª°‹e‚_t
();

86 
__ª°‹e‚_t
 *
	t__sigª°‹e_t
;

88 
	#SIG_DFL
 ((
__sigh™dÀr_t
)0Ë

	)

89 
	#SIG_IGN
 ((
__sigh™dÀr_t
)1Ë

	)

90 
	#SIG_ERR
 ((
__sigh™dÀr_t
)-1Ë

	)

	@/usr/include/asm-generic/socket.h

2 #i‚de‡
__ASM_GENERIC_SOCKET_H


3 
	#__ASM_GENERIC_SOCKET_H


	)

5 
	~<löux/posix_ty≥s.h
>

6 
	~<asm/sockios.h
>

9 
	#SOL_SOCKET
 1

	)

11 
	#SO_DEBUG
 1

	)

12 
	#SO_REUSEADDR
 2

	)

13 
	#SO_TYPE
 3

	)

14 
	#SO_ERROR
 4

	)

15 
	#SO_DONTROUTE
 5

	)

16 
	#SO_BROADCAST
 6

	)

17 
	#SO_SNDBUF
 7

	)

18 
	#SO_RCVBUF
 8

	)

19 
	#SO_SNDBUFFORCE
 32

	)

20 
	#SO_RCVBUFFORCE
 33

	)

21 
	#SO_KEEPALIVE
 9

	)

22 
	#SO_OOBINLINE
 10

	)

23 
	#SO_NO_CHECK
 11

	)

24 
	#SO_PRIORITY
 12

	)

25 
	#SO_LINGER
 13

	)

26 
	#SO_BSDCOMPAT
 14

	)

27 
	#SO_REUSEPORT
 15

	)

28 #i‚de‡
SO_PASSCRED


29 
	#SO_PASSCRED
 16

	)

30 
	#SO_PEERCRED
 17

	)

31 
	#SO_RCVLOWAT
 18

	)

32 
	#SO_SNDLOWAT
 19

	)

33 
	#SO_RCVTIMEO_OLD
 20

	)

34 
	#SO_SNDTIMEO_OLD
 21

	)

38 
	#SO_SECURITY_AUTHENTICATION
 22

	)

39 
	#SO_SECURITY_ENCRYPTION_TRANSPORT
 23

	)

40 
	#SO_SECURITY_ENCRYPTION_NETWORK
 24

	)

42 
	#SO_BINDTODEVICE
 25

	)

45 
	#SO_ATTACH_FILTER
 26

	)

46 
	#SO_DETACH_FILTER
 27

	)

47 
	#SO_GET_FILTER
 
SO_ATTACH_FILTER


	)

49 
	#SO_PEERNAME
 28

	)

51 
	#SO_ACCEPTCONN
 30

	)

53 
	#SO_PEERSEC
 31

	)

54 
	#SO_PASSSEC
 34

	)

56 
	#SO_MARK
 36

	)

58 
	#SO_PROTOCOL
 38

	)

59 
	#SO_DOMAIN
 39

	)

61 
	#SO_RXQ_OVFL
 40

	)

63 
	#SO_WIFI_STATUS
 41

	)

64 
	#SCM_WIFI_STATUS
 
SO_WIFI_STATUS


	)

65 
	#SO_PEEK_OFF
 42

	)

68 
	#SO_NOFCS
 43

	)

70 
	#SO_LOCK_FILTER
 44

	)

72 
	#SO_SELECT_ERR_QUEUE
 45

	)

74 
	#SO_BUSY_POLL
 46

	)

76 
	#SO_MAX_PACING_RATE
 47

	)

78 
	#SO_BPF_EXTENSIONS
 48

	)

80 
	#SO_INCOMING_CPU
 49

	)

82 
	#SO_ATTACH_BPF
 50

	)

83 
	#SO_DETACH_BPF
 
SO_DETACH_FILTER


	)

85 
	#SO_ATTACH_REUSEPORT_CBPF
 51

	)

86 
	#SO_ATTACH_REUSEPORT_EBPF
 52

	)

88 
	#SO_CNX_ADVICE
 53

	)

90 
	#SCM_TIMESTAMPING_OPT_STATS
 54

	)

92 
	#SO_MEMINFO
 55

	)

94 
	#SO_INCOMING_NAPI_ID
 56

	)

96 
	#SO_COOKIE
 57

	)

98 
	#SCM_TIMESTAMPING_PKTINFO
 58

	)

100 
	#SO_PEERGROUPS
 59

	)

102 
	#SO_ZEROCOPY
 60

	)

104 
	#SO_TXTIME
 61

	)

105 
	#SCM_TXTIME
 
SO_TXTIME


	)

107 
	#SO_BINDTOIFINDEX
 62

	)

109 
	#SO_TIMESTAMP_OLD
 29

	)

110 
	#SO_TIMESTAMPNS_OLD
 35

	)

111 
	#SO_TIMESTAMPING_OLD
 37

	)

113 
	#SO_TIMESTAMP_NEW
 63

	)

114 
	#SO_TIMESTAMPNS_NEW
 64

	)

115 
	#SO_TIMESTAMPING_NEW
 65

	)

117 
	#SO_RCVTIMEO_NEW
 66

	)

118 
	#SO_SNDTIMEO_NEW
 67

	)

120 
	#SO_DETACH_REUSEPORT_BPF
 68

	)

122 
	#SO_PREFER_BUSY_POLL
 69

	)

123 
	#SO_BUSY_POLL_BUDGET
 70

	)

125 
	#SO_NETNS_COOKIE
 71

	)

127 
	#SO_BUF_LOCK
 72

	)

130 #i‡
__BITS_PER_LONG
 =64 || (
deföed
(
__x86_64__
Ë&& deföed(
__ILP32__
))

132 
	#SO_TIMESTAMP
 
SO_TIMESTAMP_OLD


	)

133 
	#SO_TIMESTAMPNS
 
SO_TIMESTAMPNS_OLD


	)

134 
	#SO_TIMESTAMPING
 
SO_TIMESTAMPING_OLD


	)

136 
	#SO_RCVTIMEO
 
SO_RCVTIMEO_OLD


	)

137 
	#SO_SNDTIMEO
 
SO_SNDTIMEO_OLD


	)

139 
	#SO_TIMESTAMP
 ((
time_t
Ë=(
__kî√l_l⁄g_t
Ë? 
SO_TIMESTAMP_OLD
 : 
SO_TIMESTAMP_NEW
)

	)

140 
	#SO_TIMESTAMPNS
 ((
time_t
Ë=(
__kî√l_l⁄g_t
Ë? 
SO_TIMESTAMPNS_OLD
 : 
SO_TIMESTAMPNS_NEW
)

	)

141 
	#SO_TIMESTAMPING
 ((
time_t
Ë=(
__kî√l_l⁄g_t
Ë? 
SO_TIMESTAMPING_OLD
 : 
SO_TIMESTAMPING_NEW
)

	)

143 
	#SO_RCVTIMEO
 ((
time_t
Ë=(
__kî√l_l⁄g_t
Ë? 
SO_RCVTIMEO_OLD
 : 
SO_RCVTIMEO_NEW
)

	)

144 
	#SO_SNDTIMEO
 ((
time_t
Ë=(
__kî√l_l⁄g_t
Ë? 
SO_SNDTIMEO_OLD
 : 
SO_SNDTIMEO_NEW
)

	)

147 
	#SCM_TIMESTAMP
 
SO_TIMESTAMP


	)

148 
	#SCM_TIMESTAMPNS
 
SO_TIMESTAMPNS


	)

149 
	#SCM_TIMESTAMPING
 
SO_TIMESTAMPING


	)

	@/usr/include/asm-generic/sockios.h

2 #i‚de‡
__ASM_GENERIC_SOCKIOS_H


3 
	#__ASM_GENERIC_SOCKIOS_H


	)

6 
	#FIOSETOWN
 0x8901

	)

7 
	#SIOCSPGRP
 0x8902

	)

8 
	#FIOGETOWN
 0x8903

	)

9 
	#SIOCGPGRP
 0x8904

	)

10 
	#SIOCATMARK
 0x8905

	)

11 
	#SIOCGSTAMP_OLD
 0x8906

	)

12 
	#SIOCGSTAMPNS_OLD
 0x8907

	)

	@/usr/include/asm-generic/statfs.h

2 #i‚de‡
_GENERIC_STATFS_H


3 
	#_GENERIC_STATFS_H


	)

5 
	~<löux/ty≥s.h
>

15 #i‚de‡
__°©fs_w‹d


16 #i‡
__BITS_PER_LONG
 == 64

17 
	#__°©fs_w‹d
 
__kî√l_l⁄g_t


	)

19 
	#__°©fs_w‹d
 
__u32


	)

23 
	s°©fs
 {

24 
__°©fs_w‹d
 
	mf_ty≥
;

25 
__°©fs_w‹d
 
	mf_bsize
;

26 
__°©fs_w‹d
 
	mf_blocks
;

27 
__°©fs_w‹d
 
	mf_b‰ì
;

28 
__°©fs_w‹d
 
	mf_bavaû
;

29 
__°©fs_w‹d
 
	mf_fûes
;

30 
__°©fs_w‹d
 
	mf_f‰ì
;

31 
__kî√l_fsid_t
 
	mf_fsid
;

32 
__°©fs_w‹d
 
	mf_«mñí
;

33 
__°©fs_w‹d
 
	mf_‰size
;

34 
__°©fs_w‹d
 
	mf_Êags
;

35 
__°©fs_w‹d
 
	mf_•¨e
[4];

42 #i‚de‡
ARCH_PACK_STATFS64


43 
	#ARCH_PACK_STATFS64


	)

46 
	s°©fs64
 {

47 
__°©fs_w‹d
 
	mf_ty≥
;

48 
__°©fs_w‹d
 
	mf_bsize
;

49 
__u64
 
	mf_blocks
;

50 
__u64
 
	mf_b‰ì
;

51 
__u64
 
	mf_bavaû
;

52 
__u64
 
	mf_fûes
;

53 
__u64
 
	mf_f‰ì
;

54 
__kî√l_fsid_t
 
	mf_fsid
;

55 
__°©fs_w‹d
 
	mf_«mñí
;

56 
__°©fs_w‹d
 
	mf_‰size
;

57 
__°©fs_w‹d
 
	mf_Êags
;

58 
__°©fs_w‹d
 
	mf_•¨e
[4];

59 } 
	gARCH_PACK_STATFS64
;

65 #i‚de‡
ARCH_PACK_COMPAT_STATFS64


66 
	#ARCH_PACK_COMPAT_STATFS64


	)

69 
	scom∑t_°©fs64
 {

70 
__u32
 
	mf_ty≥
;

71 
__u32
 
	mf_bsize
;

72 
__u64
 
	mf_blocks
;

73 
__u64
 
	mf_b‰ì
;

74 
__u64
 
	mf_bavaû
;

75 
__u64
 
	mf_fûes
;

76 
__u64
 
	mf_f‰ì
;

77 
__kî√l_fsid_t
 
	mf_fsid
;

78 
__u32
 
	mf_«mñí
;

79 
__u32
 
	mf_‰size
;

80 
__u32
 
	mf_Êags
;

81 
__u32
 
	mf_•¨e
[4];

82 } 
	gARCH_PACK_COMPAT_STATFS64
;

	@/usr/include/asm-generic/termbits.h

2 #i‚de‡
__ASM_GENERIC_TERMBITS_H


3 
	#__ASM_GENERIC_TERMBITS_H


	)

5 
	~<löux/posix_ty≥s.h
>

7 
	tcc_t
;

8 
	t•ìd_t
;

9 
	ttcÊag_t
;

11 
	#NCCS
 19

	)

12 
	sãrmios
 {

13 
tcÊag_t
 
	mc_iÊag
;

14 
tcÊag_t
 
	mc_oÊag
;

15 
tcÊag_t
 
	mc_cÊag
;

16 
tcÊag_t
 
	mc_lÊag
;

17 
cc_t
 
	mc_löe
;

18 
cc_t
 
	mc_cc
[
NCCS
];

21 
	sãrmios2
 {

22 
tcÊag_t
 
	mc_iÊag
;

23 
tcÊag_t
 
	mc_oÊag
;

24 
tcÊag_t
 
	mc_cÊag
;

25 
tcÊag_t
 
	mc_lÊag
;

26 
cc_t
 
	mc_löe
;

27 
cc_t
 
	mc_cc
[
NCCS
];

28 
•ìd_t
 
	mc_i•ìd
;

29 
•ìd_t
 
	mc_o•ìd
;

32 
	skãrmios
 {

33 
tcÊag_t
 
	mc_iÊag
;

34 
tcÊag_t
 
	mc_oÊag
;

35 
tcÊag_t
 
	mc_cÊag
;

36 
tcÊag_t
 
	mc_lÊag
;

37 
cc_t
 
	mc_löe
;

38 
cc_t
 
	mc_cc
[
NCCS
];

39 
•ìd_t
 
	mc_i•ìd
;

40 
•ìd_t
 
	mc_o•ìd
;

44 
	#VINTR
 0

	)

45 
	#VQUIT
 1

	)

46 
	#VERASE
 2

	)

47 
	#VKILL
 3

	)

48 
	#VEOF
 4

	)

49 
	#VTIME
 5

	)

50 
	#VMIN
 6

	)

51 
	#VSWTC
 7

	)

52 
	#VSTART
 8

	)

53 
	#VSTOP
 9

	)

54 
	#VSUSP
 10

	)

55 
	#VEOL
 11

	)

56 
	#VREPRINT
 12

	)

57 
	#VDISCARD
 13

	)

58 
	#VWERASE
 14

	)

59 
	#VLNEXT
 15

	)

60 
	#VEOL2
 16

	)

63 
	#IGNBRK
 0000001

	)

64 
	#BRKINT
 0000002

	)

65 
	#IGNPAR
 0000004

	)

66 
	#PARMRK
 0000010

	)

67 
	#INPCK
 0000020

	)

68 
	#ISTRIP
 0000040

	)

69 
	#INLCR
 0000100

	)

70 
	#IGNCR
 0000200

	)

71 
	#ICRNL
 0000400

	)

72 
	#IUCLC
 0001000

	)

73 
	#IXON
 0002000

	)

74 
	#IXANY
 0004000

	)

75 
	#IXOFF
 0010000

	)

76 
	#IMAXBEL
 0020000

	)

77 
	#IUTF8
 0040000

	)

80 
	#OPOST
 0000001

	)

81 
	#OLCUC
 0000002

	)

82 
	#ONLCR
 0000004

	)

83 
	#OCRNL
 0000010

	)

84 
	#ONOCR
 0000020

	)

85 
	#ONLRET
 0000040

	)

86 
	#OFILL
 0000100

	)

87 
	#OFDEL
 0000200

	)

88 
	#NLDLY
 0000400

	)

89 
	#NL0
 0000000

	)

90 
	#NL1
 0000400

	)

91 
	#CRDLY
 0003000

	)

92 
	#CR0
 0000000

	)

93 
	#CR1
 0001000

	)

94 
	#CR2
 0002000

	)

95 
	#CR3
 0003000

	)

96 
	#TABDLY
 0014000

	)

97 
	#TAB0
 0000000

	)

98 
	#TAB1
 0004000

	)

99 
	#TAB2
 0010000

	)

100 
	#TAB3
 0014000

	)

101 
	#XTABS
 0014000

	)

102 
	#BSDLY
 0020000

	)

103 
	#BS0
 0000000

	)

104 
	#BS1
 0020000

	)

105 
	#VTDLY
 0040000

	)

106 
	#VT0
 0000000

	)

107 
	#VT1
 0040000

	)

108 
	#FFDLY
 0100000

	)

109 
	#FF0
 0000000

	)

110 
	#FF1
 0100000

	)

113 
	#CBAUD
 0010017

	)

114 
	#B0
 0000000

	)

115 
	#B50
 0000001

	)

116 
	#B75
 0000002

	)

117 
	#B110
 0000003

	)

118 
	#B134
 0000004

	)

119 
	#B150
 0000005

	)

120 
	#B200
 0000006

	)

121 
	#B300
 0000007

	)

122 
	#B600
 0000010

	)

123 
	#B1200
 0000011

	)

124 
	#B1800
 0000012

	)

125 
	#B2400
 0000013

	)

126 
	#B4800
 0000014

	)

127 
	#B9600
 0000015

	)

128 
	#B19200
 0000016

	)

129 
	#B38400
 0000017

	)

130 
	#EXTA
 
B19200


	)

131 
	#EXTB
 
B38400


	)

132 
	#CSIZE
 0000060

	)

133 
	#CS5
 0000000

	)

134 
	#CS6
 0000020

	)

135 
	#CS7
 0000040

	)

136 
	#CS8
 0000060

	)

137 
	#CSTOPB
 0000100

	)

138 
	#CREAD
 0000200

	)

139 
	#PARENB
 0000400

	)

140 
	#PARODD
 0001000

	)

141 
	#HUPCL
 0002000

	)

142 
	#CLOCAL
 0004000

	)

143 
	#CBAUDEX
 0010000

	)

144 
	#BOTHER
 0010000

	)

145 
	#B57600
 0010001

	)

146 
	#B115200
 0010002

	)

147 
	#B230400
 0010003

	)

148 
	#B460800
 0010004

	)

149 
	#B500000
 0010005

	)

150 
	#B576000
 0010006

	)

151 
	#B921600
 0010007

	)

152 
	#B1000000
 0010010

	)

153 
	#B1152000
 0010011

	)

154 
	#B1500000
 0010012

	)

155 
	#B2000000
 0010013

	)

156 
	#B2500000
 0010014

	)

157 
	#B3000000
 0010015

	)

158 
	#B3500000
 0010016

	)

159 
	#B4000000
 0010017

	)

160 
	#CIBAUD
 002003600000

	)

161 
	#CMSPAR
 010000000000

	)

162 
	#CRTSCTS
 020000000000

	)

164 
	#IBSHIFT
 16

	)

167 
	#ISIG
 0000001

	)

168 
	#ICANON
 0000002

	)

169 
	#XCASE
 0000004

	)

170 
	#ECHO
 0000010

	)

171 
	#ECHOE
 0000020

	)

172 
	#ECHOK
 0000040

	)

173 
	#ECHONL
 0000100

	)

174 
	#NOFLSH
 0000200

	)

175 
	#TOSTOP
 0000400

	)

176 
	#ECHOCTL
 0001000

	)

177 
	#ECHOPRT
 0002000

	)

178 
	#ECHOKE
 0004000

	)

179 
	#FLUSHO
 0010000

	)

180 
	#PENDIN
 0040000

	)

181 
	#IEXTEN
 0100000

	)

182 
	#EXTPROC
 0200000

	)

185 
	#TCOOFF
 0

	)

186 
	#TCOON
 1

	)

187 
	#TCIOFF
 2

	)

188 
	#TCION
 3

	)

191 
	#TCIFLUSH
 0

	)

192 
	#TCOFLUSH
 1

	)

193 
	#TCIOFLUSH
 2

	)

196 
	#TCSANOW
 0

	)

197 
	#TCSADRAIN
 1

	)

198 
	#TCSAFLUSH
 2

	)

	@/usr/include/asm-generic/termios.h

2 #i‚de‡
_ASM_GENERIC_TERMIOS_H


3 
	#_ASM_GENERIC_TERMIOS_H


	)

12 
	~<asm/ãrmbôs.h
>

13 
	~<asm/io˘ls.h
>

15 
	swösize
 {

16 
	mws_row
;

17 
	mws_cﬁ
;

18 
	mws_xpixñ
;

19 
	mws_ypixñ
;

22 
	#NCC
 8

	)

23 
	sãrmio
 {

24 
	mc_iÊag
;

25 
	mc_oÊag
;

26 
	mc_cÊag
;

27 
	mc_lÊag
;

28 
	mc_löe
;

29 
	mc_cc
[
NCC
];

33 
	#TIOCM_LE
 0x001

	)

34 
	#TIOCM_DTR
 0x002

	)

35 
	#TIOCM_RTS
 0x004

	)

36 
	#TIOCM_ST
 0x008

	)

37 
	#TIOCM_SR
 0x010

	)

38 
	#TIOCM_CTS
 0x020

	)

39 
	#TIOCM_CAR
 0x040

	)

40 
	#TIOCM_RNG
 0x080

	)

41 
	#TIOCM_DSR
 0x100

	)

42 
	#TIOCM_CD
 
TIOCM_CAR


	)

43 
	#TIOCM_RI
 
TIOCM_RNG


	)

44 
	#TIOCM_OUT1
 0x2000

	)

45 
	#TIOCM_OUT2
 0x4000

	)

46 
	#TIOCM_LOOP
 0x8000

	)

	@/usr/include/asm-generic/types.h

2 #i‚de‡
_ASM_GENERIC_TYPES_H


3 
	#_ASM_GENERIC_TYPES_H


	)

7 
	~<asm-gíîic/öt-Œ64.h
>

	@/usr/include/asm-generic/ucontext.h

2 #i‚de‡
__ASM_GENERIC_UCONTEXT_H


3 
	#__ASM_GENERIC_UCONTEXT_H


	)

5 
	suc⁄ãxt
 {

6 
	muc_Êags
;

7 
uc⁄ãxt
 *
	muc_lök
;

8 
°ack_t
 
	muc_°ack
;

9 
sigc⁄ãxt
 
	muc_mc⁄ãxt
;

10 
sig£t_t
 
	muc_sigmask
;

	@/usr/include/libltdl/lt_dlloader.h

32 #i‡!
deföed
 
LT_DLLOADER_H


33 
	#LT_DLLOADER_H
 1

	)

35 
	~<lib…dl/…_sy°em.h
>

37 
LT_BEGIN_C_DECLS


39 * 
	t…_dŒﬂdî
;

40 * 
	t…_moduÀ
;

41 * 
	t…_u£r_d©a
;

42 
…__advi£
 * 
	t…_dœdvi£
;

45 
…_moduÀ
 
	t…_moduÀ_›í
 (
	t…_u£r_d©a
 
	td©a
,

46 c⁄° *
	tfûíame
,

47 
	t…_dœdvi£
 
	tadvi£
);

48 
	t…_moduÀ_˛o£
 (
	t…_u£r_d©a
 
	td©a
,

49 
	t…_moduÀ
 
	tmoduÀ
);

50 * 
	t…_föd_sym
 (
	t…_u£r_d©a
 
	td©a
, 
	t…_moduÀ
 
	tmoduÀ
,

51 c⁄° *
	tsymbﬁ«me
);

52 
	t…_dŒﬂdî_öô
 (
	t…_u£r_d©a
 
	td©a
);

53 
	t…_dŒﬂdî_exô
 (
	t…_u£r_d©a
 
	td©a
);

57 
	mLT_DLLOADER_PREPEND
 = 0, 
	mLT_DLLOADER_APPEND


58 } 
	t…_dŒﬂdî_¥i‹ôy
;

63 c⁄° * 
	m«me
;

64 c⁄° * 
	msym_¥efix
;

65 
…_moduÀ_›í
 * 
	mmoduÀ_›í
;

66 
…_moduÀ_˛o£
 * 
	mmoduÀ_˛o£
;

67 
…_föd_sym
 * 
	mföd_sym
;

68 
…_dŒﬂdî_öô
 * 
	mdŒﬂdî_öô
;

69 
…_dŒﬂdî_exô
 * 
	mdŒﬂdî_exô
;

70 
…_u£r_d©a
 
	mdŒﬂdî_d©a
;

71 
…_dŒﬂdî_¥i‹ôy
 
	m¥i‹ôy
;

72 } 
	t…_dlvèbÀ
;

74 
LT_SCOPE
 
…_dŒﬂdî_add
 (c⁄° 
…_dlvèbÀ
 *
vèbÀ
);

75 
LT_SCOPE
 
…_dŒﬂdî
 
…_dŒﬂdî_√xt
 (c⁄°Üt_dŒﬂdî 
lﬂdî
);

77 
LT_SCOPE
 
…_dlvèbÀ
 * 
…_dŒﬂdî_ªmove
 (c⁄° *
«me
);

78 
LT_SCOPE
 c⁄° 
…_dlvèbÀ
 *
…_dŒﬂdî_föd
 (c⁄° *
«me
);

79 
LT_SCOPE
 c⁄° 
…_dlvèbÀ
 *
…_dŒﬂdî_gë
 (
…_dŒﬂdî
 
lﬂdî
);

83 c⁄° 
	t…_dlvèbÀ
 *
	t…_gë_vèbÀ
 (
	t…_u£r_d©a
 
	td©a
);

85 #ifde‡
LT_DEBUG_LOADERS


86 
LT_SCOPE
 
…_dŒﬂdî_dump
 ();

89 
	gLT_END_C_DECLS


	@/usr/include/libltdl/lt_error.h

33 #i‡!
deföed
 
LT_ERROR_H


34 
	#LT_ERROR_H
 1

	)

36 
	~<lib…dl/…_sy°em.h
>

38 
	gLT_BEGIN_C_DECLS


45 
	#…_dÀº‹_èbÀ
 \

46 
	`LT_ERROR
(
UNKNOWN
, "unknownÉrror\0") \

47 
	`LT_ERROR
(
DLOPEN_NOT_SUPPORTED
, "dlopen supportÇotávailable\0") \

48 
	`LT_ERROR
(
INVALID_LOADER
, "invalidÜoader\0") \

49 
	`LT_ERROR
(
INIT_LOADER
, "loader initialization failed\0") \

50 
	`LT_ERROR
(
REMOVE_LOADER
, "loaderÑemoval failed\0") \

51 
	`LT_ERROR
(
FILE_NOT_FOUND
, "fileÇot found\0") \

52 
	`LT_ERROR
(
DEPLIB_NOT_FOUND
, "dependencyÜibraryÇot found\0") \

53 
	`LT_ERROR
(
NO_SYMBOLS
, "no symbols defined\0") \

54 
	`LT_ERROR
(
CANNOT_OPEN
, "can't openÅhe module\0") \

55 
	`LT_ERROR
(
CANNOT_CLOSE
, "can't closeÅhe module\0") \

56 
	`LT_ERROR
(
SYMBOL_NOT_FOUND
, "symbolÇot found\0") \

57 
	`LT_ERROR
(
NO_MEMORY
, "notÉnough memory\0") \

58 
	`LT_ERROR
(
INVALID_HANDLE
, "invalid module handle\0") \

59 
	`LT_ERROR
(
BUFFER_OVERFLOW
, "internal buffer overflow\0") \

60 
	`LT_ERROR
(
INVALID_ERRORCODE
, "invalidÉrrorcode\0") \

61 
	`LT_ERROR
(
SHUTDOWN
, "libraryálready shutdown\0") \

62 
	`LT_ERROR
(
CLOSE_RESIDENT_MODULE
, "can't closeÑesident module\0") \

63 
	`LT_ERROR
(
INVALID_MUTEX_ARGS
, "internalÉrror (code withdrawn)\0")\

64 
	`LT_ERROR
(
INVALID_POSITION
, "invalid searchÖath insertÖosition\0")\

65 
	`LT_ERROR
(
CONFLICTING_FLAGS
, "symbﬁ visibûôy c™ bêglobÆ o∏loˇl\0")

	)

69 
	#LT_ERROR
(
«me
, 
dügno°ic
Ë
	`LT_CONC
(
LT_ERROR_
,Çame),

	)

70 
	m…_dÀº‹_èbÀ


71 #unde‡
LT_ERROR


73 
	mLT_ERROR_MAX


77 
	#LT_ERROR_LEN_MAX
 (41)

	)

80 
LT_SCOPE
 
…_dœddîr‹
 (c⁄° *
dügno°ic
);

81 
LT_SCOPE
 
…_dl£ãº‹
 (
îr‹code
);

84 
	gLT_END_C_DECLS


	@/usr/include/libltdl/lt_system.h

31 #i‡!
deföed
 
LT_SYSTEM_H


32 
	#LT_SYSTEM_H
 1

	)

34 
	~<°ddef.h
>

35 
	~<°dlib.h
>

36 
	~<sys/ty≥s.h
>

39 #i‡!
deföed
 
EXIT_SUCCESS


40 
	#EXIT_SUCCESS
 0

	)

42 #i‡!
deföed
 
EXIT_FAILURE


43 
	#EXIT_FAILURE
 1

	)

47 
	#LT_FILENAME_MAX
 2048

	)

51 
	#LT_EOS_CHAR
 '\0'

	)

56 #i‡
deföed
 
__˝lu•lus


57 
	#LT_BEGIN_C_DECLS
 "C" {

	)

58 
	#LT_END_C_DECLS
 }

	)

60 
	#LT_BEGIN_C_DECLS


	)

61 
	#LT_END_C_DECLS


	)

66 #i‡
deföed
 
__GNUC__
 && !deföed 
__STRICT_ANSI__
 && !deföed 
__˝lu•lus


67 
	#LT_STMT_START
 ()(

	)

68 
	#LT_STMT_END
 )

	)

70 #i‡(
deföed
 
sun
 || deföed 
__sun__
)

71 
	#LT_STMT_START
 i‡(1)

	)

72 
	#LT_STMT_END
 ()0

	)

74 
	#LT_STMT_START
 do

	)

75 
	#LT_STMT_END
 0)

	)

80 #i‡
deföed
 
_WIN32
 || deföed 
__CYGWIN__
 || deföed 
_WIN32_WCE


83 
	#LT_DLSYM_CONST


	)

84 #ñi‡
deföed
 
__osf__


86 
	#LT_DLSYM_CONST


	)

88 
	#LT_DLSYM_CONST
 c⁄°

	)

94 #i‡
deföed
 
__CYGWIN32__
 && !deföed 
__CYGWIN__


95 
	#__CYGWIN__
 
__CYGWIN32__


	)

97 #i‡
deföed
 
__CYGWIN__


98 #i‡
deföed
 
__WINDOWS__


99 #unde‡
__WINDOWS__


101 #ñi‡
deföed
 
_WIN32


102 
	#__WINDOWS__
 
_WIN32


	)

103 #ñi‡
deföed
 
WIN32


104 
	#__WINDOWS__
 
WIN32


	)

106 #i‡
deföed
 
__CYGWIN__
 && deföed 
__WINDOWS__


107 #unde‡
__WINDOWS__


113 #i‡!
deföed
 
LT_SCOPE


114 #i‡
deföed
 
__WINDOWS__
 || deföed 
__CYGWIN__


115 #i‡
deföed
 
DLL_EXPORT


116 
	#LT_SCOPE
 
	`__de˛•ec
(
dŒexp‹t
)

	)

118 #i‡
deföed
 
LIBLTDL_DLL_IMPORT


120 
	#LT_SCOPE
 
	`__de˛•ec
(
dŒimp‹t
)

	)

123 #i‡!
deföed
 
LT_SCOPE


124 
	#LT_SCOPE
 

	)

128 #i‡
deföed
 
__WINDOWS__


131 
	#LT_DIRSEP_CHAR
 '\\'

	)

132 
	#LT_PATHSEP_CHAR
 ';'

	)

134 
	#LT_PATHSEP_CHAR
 ':'

	)

137 #i‡
deföed
 
_MSC_VER


138 
	#R_OK
 4

	)

142 #unde‡
LT_READTEXT_MODE


143 #i‡
deföed
 
__WINDOWS__
 || deföed 
__CYGWIN__


144 
	#LT_READTEXT_MODE
 "π"

	)

146 
	#LT_READTEXT_MODE
 "r"

	)

152 #i‚de‡
LT_STR


153 
	#LT__STR
(
¨g
Ë#¨g

	)

154 
	#LT_STR
(
¨g
Ë
	`LT__STR
◊rg)

	)

157 #i‚de‡
LT_CONC


158 
	#LT__CONC
(
a
, 
b
Ëa##
	)
b

159 
	#LT_CONC
(
a
, 
b
Ë
	`LT__CONC
◊, b)

	)

161 #i‚de‡
LT_CONC3


162 
	#LT__CONC3
(
a
, 
b
, 
c
Ëa##b##
	)
c

163 
	#LT_CONC3
(
a
, 
b
, 
c
Ë
	`LT__CONC3
◊, b, c)

	)

	@/usr/include/linux/apm_bios.h

16 #i‚de‡
_LINUX_APM_H


17 
	#_LINUX_APM_H


	)

20 
	~<löux/ty≥s.h
>

22 
	t≠m_evít_t
;

23 
	t≠m_evítöfo_t
;

25 
	s≠m_bios_öfo
 {

26 
__u16
 
	mvîsi⁄
;

27 
__u16
 
	mc£g
;

28 
__u32
 
	moff£t
;

29 
__u16
 
	mc£g_16
;

30 
__u16
 
	md£g
;

31 
__u16
 
	mÊags
;

32 
__u16
 
	mc£g_Àn
;

33 
__u16
 
	mc£g_16_Àn
;

34 
__u16
 
	md£g_Àn
;

41 
	#APM_STATE_READY
 0x0000

	)

42 
	#APM_STATE_STANDBY
 0x0001

	)

43 
	#APM_STATE_SUSPEND
 0x0002

	)

44 
	#APM_STATE_OFF
 0x0003

	)

45 
	#APM_STATE_BUSY
 0x0004

	)

46 
	#APM_STATE_REJECT
 0x0005

	)

47 
	#APM_STATE_OEM_SYS
 0x0020

	)

48 
	#APM_STATE_OEM_DEV
 0x0040

	)

50 
	#APM_STATE_DISABLE
 0x0000

	)

51 
	#APM_STATE_ENABLE
 0x0001

	)

53 
	#APM_STATE_DISENGAGE
 0x0000

	)

54 
	#APM_STATE_ENGAGE
 0x0001

	)

59 
	#APM_SYS_STANDBY
 0x0001

	)

60 
	#APM_SYS_SUSPEND
 0x0002

	)

61 
	#APM_NORMAL_RESUME
 0x0003

	)

62 
	#APM_CRITICAL_RESUME
 0x0004

	)

63 
	#APM_LOW_BATTERY
 0x0005

	)

64 
	#APM_POWER_STATUS_CHANGE
 0x0006

	)

65 
	#APM_UPDATE_TIME
 0x0007

	)

66 
	#APM_CRITICAL_SUSPEND
 0x0008

	)

67 
	#APM_USER_STANDBY
 0x0009

	)

68 
	#APM_USER_SUSPEND
 0x000a

	)

69 
	#APM_STANDBY_RESUME
 0x000b

	)

70 
	#APM_CAPABILITY_CHANGE
 0x000c

	)

71 
	#APM_USER_HIBERNATION
 0x000d

	)

72 
	#APM_HIBERNATION_RESUME
 0x000e

	)

77 
	#APM_SUCCESS
 0x00

	)

78 
	#APM_DISABLED
 0x01

	)

79 
	#APM_CONNECTED
 0x02

	)

80 
	#APM_NOT_CONNECTED
 0x03

	)

81 
	#APM_16_CONNECTED
 0x05

	)

82 
	#APM_16_UNSUPPORTED
 0x06

	)

83 
	#APM_32_CONNECTED
 0x07

	)

84 
	#APM_32_UNSUPPORTED
 0x08

	)

85 
	#APM_BAD_DEVICE
 0x09

	)

86 
	#APM_BAD_PARAM
 0x0a

	)

87 
	#APM_NOT_ENGAGED
 0x0b

	)

88 
	#APM_BAD_FUNCTION
 0x0c

	)

89 
	#APM_RESUME_DISABLED
 0x0d

	)

90 
	#APM_NO_ERROR
 0x53

	)

91 
	#APM_BAD_STATE
 0x60

	)

92 
	#APM_NO_EVENTS
 0x80

	)

93 
	#APM_NOT_PRESENT
 0x86

	)

98 
	#APM_DEVICE_BIOS
 0x0000

	)

99 
	#APM_DEVICE_ALL
 0x0001

	)

100 
	#APM_DEVICE_DISPLAY
 0x0100

	)

101 
	#APM_DEVICE_STORAGE
 0x0200

	)

102 
	#APM_DEVICE_PARALLEL
 0x0300

	)

103 
	#APM_DEVICE_SERIAL
 0x0400

	)

104 
	#APM_DEVICE_NETWORK
 0x0500

	)

105 
	#APM_DEVICE_PCMCIA
 0x0600

	)

106 
	#APM_DEVICE_BATTERY
 0x8000

	)

107 
	#APM_DEVICE_OEM
 0xe000

	)

108 
	#APM_DEVICE_OLD_ALL
 0xffff

	)

109 
	#APM_DEVICE_CLASS
 0x00ff

	)

110 
	#APM_DEVICE_MASK
 0xff00

	)

116 
	#APM_MAX_BATTERIES
 2

	)

121 
	#APM_CAP_GLOBAL_STANDBY
 0x0001

	)

122 
	#APM_CAP_GLOBAL_SUSPEND
 0x0002

	)

123 
	#APM_CAP_RESUME_STANDBY_TIMER
 0x0004

	)

124 
	#APM_CAP_RESUME_SUSPEND_TIMER
 0x0008

	)

125 
	#APM_CAP_RESUME_STANDBY_RING
 0x0010

	)

126 
	#APM_CAP_RESUME_SUSPEND_RING
 0x0020

	)

127 
	#APM_CAP_RESUME_STANDBY_PCMCIA
 0x0040

	)

128 
	#APM_CAP_RESUME_SUSPEND_PCMCIA
 0x0080

	)

133 
	~<löux/io˘l.h
>

135 
	#APM_IOC_STANDBY
 
	`_IO
('A', 1)

	)

136 
	#APM_IOC_SUSPEND
 
	`_IO
('A', 2)

	)

	@/usr/include/linux/byteorder/little_endian.h

2 #i‚de‡
_LINUX_BYTEORDER_LITTLE_ENDIAN_H


3 
	#_LINUX_BYTEORDER_LITTLE_ENDIAN_H


	)

5 #i‚de‡
__LITTLE_ENDIAN


6 
	#__LITTLE_ENDIAN
 1234

	)

8 #i‚de‡
__LITTLE_ENDIAN_BITFIELD


9 
	#__LITTLE_ENDIAN_BITFIELD


	)

12 
	~<löux/°ddef.h
>

13 
	~<löux/ty≥s.h
>

14 
	~<löux/swab.h
>

16 
	#__c⁄°™t_ht⁄l
(
x
Ë((
__be32
)
	`___c⁄°™t_swab32
((x)))

	)

17 
	#__c⁄°™t_¡ohl
(
x
Ë
	`___c⁄°™t_swab32
((
__be32
)(x))

	)

18 
	#__c⁄°™t_ht⁄s
(
x
Ë((
__be16
)
	`___c⁄°™t_swab16
((x)))

	)

19 
	#__c⁄°™t_¡ohs
(
x
Ë
	`___c⁄°™t_swab16
((
__be16
)(x))

	)

20 
	#__c⁄°™t_˝u_to_À64
(
x
Ë((
__À64
)(
__u64
)(x))

	)

21 
	#__c⁄°™t_À64_to_˝u
(
x
Ë((
__u64
)(
__À64
)(x))

	)

22 
	#__c⁄°™t_˝u_to_À32
(
x
Ë((
__À32
)(
__u32
)(x))

	)

23 
	#__c⁄°™t_À32_to_˝u
(
x
Ë((
__u32
)(
__À32
)(x))

	)

24 
	#__c⁄°™t_˝u_to_À16
(
x
Ë((
__À16
)(
__u16
)(x))

	)

25 
	#__c⁄°™t_À16_to_˝u
(
x
Ë((
__u16
)(
__À16
)(x))

	)

26 
	#__c⁄°™t_˝u_to_be64
(
x
Ë((
__be64
)
	`___c⁄°™t_swab64
((x)))

	)

27 
	#__c⁄°™t_be64_to_˝u
(
x
Ë
	`___c⁄°™t_swab64
((
__u64
)(
__be64
)(x))

	)

28 
	#__c⁄°™t_˝u_to_be32
(
x
Ë((
__be32
)
	`___c⁄°™t_swab32
((x)))

	)

29 
	#__c⁄°™t_be32_to_˝u
(
x
Ë
	`___c⁄°™t_swab32
((
__u32
)(
__be32
)(x))

	)

30 
	#__c⁄°™t_˝u_to_be16
(
x
Ë((
__be16
)
	`___c⁄°™t_swab16
((x)))

	)

31 
	#__c⁄°™t_be16_to_˝u
(
x
Ë
	`___c⁄°™t_swab16
((
__u16
)(
__be16
)(x))

	)

32 
	#__˝u_to_À64
(
x
Ë((
__À64
)(
__u64
)(x))

	)

33 
	#__À64_to_˝u
(
x
Ë((
__u64
)(
__À64
)(x))

	)

34 
	#__˝u_to_À32
(
x
Ë((
__À32
)(
__u32
)(x))

	)

35 
	#__À32_to_˝u
(
x
Ë((
__u32
)(
__À32
)(x))

	)

36 
	#__˝u_to_À16
(
x
Ë((
__À16
)(
__u16
)(x))

	)

37 
	#__À16_to_˝u
(
x
Ë((
__u16
)(
__À16
)(x))

	)

38 
	#__˝u_to_be64
(
x
Ë((
__be64
)
	`__swab64
((x)))

	)

39 
	#__be64_to_˝u
(
x
Ë
	`__swab64
((
__u64
)(
__be64
)(x))

	)

40 
	#__˝u_to_be32
(
x
Ë((
__be32
)
	`__swab32
((x)))

	)

41 
	#__be32_to_˝u
(
x
Ë
	`__swab32
((
__u32
)(
__be32
)(x))

	)

42 
	#__˝u_to_be16
(
x
Ë((
__be16
)
	`__swab16
((x)))

	)

43 
	#__be16_to_˝u
(
x
Ë
	`__swab16
((
__u16
)(
__be16
)(x))

	)

45 
__Æways_ölöe
 
__À64
 
	$__˝u_to_À64p
(c⁄° 
__u64
 *
p
)

47  (
__À64
)*
p
;

48 
	}
}

49 
__Æways_ölöe
 
__u64
 
	$__À64_to_˝up
(c⁄° 
__À64
 *
p
)

51  (
__u64
)*
p
;

52 
	}
}

53 
__Æways_ölöe
 
__À32
 
	$__˝u_to_À32p
(c⁄° 
__u32
 *
p
)

55  (
__À32
)*
p
;

56 
	}
}

57 
__Æways_ölöe
 
__u32
 
	$__À32_to_˝up
(c⁄° 
__À32
 *
p
)

59  (
__u32
)*
p
;

60 
	}
}

61 
__Æways_ölöe
 
__À16
 
	$__˝u_to_À16p
(c⁄° 
__u16
 *
p
)

63  (
__À16
)*
p
;

64 
	}
}

65 
__Æways_ölöe
 
__u16
 
	$__À16_to_˝up
(c⁄° 
__À16
 *
p
)

67  (
__u16
)*
p
;

68 
	}
}

69 
__Æways_ölöe
 
__be64
 
	$__˝u_to_be64p
(c⁄° 
__u64
 *
p
)

71  (
__be64
)
	`__swab64p
(
p
);

72 
	}
}

73 
__Æways_ölöe
 
__u64
 
	$__be64_to_˝up
(c⁄° 
__be64
 *
p
)

75  
	`__swab64p
((
__u64
 *)
p
);

76 
	}
}

77 
__Æways_ölöe
 
__be32
 
	$__˝u_to_be32p
(c⁄° 
__u32
 *
p
)

79  (
__be32
)
	`__swab32p
(
p
);

80 
	}
}

81 
__Æways_ölöe
 
__u32
 
	$__be32_to_˝up
(c⁄° 
__be32
 *
p
)

83  
	`__swab32p
((
__u32
 *)
p
);

84 
	}
}

85 
__Æways_ölöe
 
__be16
 
	$__˝u_to_be16p
(c⁄° 
__u16
 *
p
)

87  (
__be16
)
	`__swab16p
(
p
);

88 
	}
}

89 
__Æways_ölöe
 
__u16
 
	$__be16_to_˝up
(c⁄° 
__be16
 *
p
)

91  
	`__swab16p
((
__u16
 *)
p
);

92 
	}
}

93 
	#__˝u_to_À64s
(
x
Ëdÿ{ ()(x); } 0)

	)

94 
	#__À64_to_˝us
(
x
Ëdÿ{ ()(x); } 0)

	)

95 
	#__˝u_to_À32s
(
x
Ëdÿ{ ()(x); } 0)

	)

96 
	#__À32_to_˝us
(
x
Ëdÿ{ ()(x); } 0)

	)

97 
	#__˝u_to_À16s
(
x
Ëdÿ{ ()(x); } 0)

	)

98 
	#__À16_to_˝us
(
x
Ëdÿ{ ()(x); } 0)

	)

99 
	#__˝u_to_be64s
(
x
Ë
	`__swab64s
((x))

	)

100 
	#__be64_to_˝us
(
x
Ë
	`__swab64s
((x))

	)

101 
	#__˝u_to_be32s
(
x
Ë
	`__swab32s
((x))

	)

102 
	#__be32_to_˝us
(
x
Ë
	`__swab32s
((x))

	)

103 
	#__˝u_to_be16s
(
x
Ë
	`__swab16s
((x))

	)

104 
	#__be16_to_˝us
(
x
Ë
	`__swab16s
((x))

	)

	@/usr/include/linux/close_range.h

2 #i‚de‡
_LINUX_CLOSE_RANGE_H


3 
	#_LINUX_CLOSE_RANGE_H


	)

6 
	#CLOSE_RANGE_UNSHARE
 (1U << 1)

	)

9 
	#CLOSE_RANGE_CLOEXEC
 (1U << 2)

	)

	@/usr/include/linux/const.h

4 #i‚de‡
_LINUX_CONST_H


5 
	#_LINUX_CONST_H


	)

16 #ifde‡
__ASSEMBLY__


17 
	#_AC
(
X
,
Y
Ë
	)
X

18 
	#_AT
(
T
,
X
Ë
	)
X

20 
	#__AC
(
X
,
Y
Ë(X##Y)

	)

21 
	#_AC
(
X
,
Y
Ë
	`__AC
(X,Y)

	)

22 
	#_AT
(
T
,
X
Ë((T)(X))

	)

25 
	#_UL
(
x
Ë(
	`_AC
(x, 
UL
))

	)

26 
	#_ULL
(
x
Ë(
	`_AC
(x, 
ULL
))

	)

28 
	#_BITUL
(
x
Ë(
	`_UL
(1Ë<< (x))

	)

29 
	#_BITULL
(
x
Ë(
	`_ULL
(1Ë<< (x))

	)

31 
	#__ALIGN_KERNEL
(
x
, 
a
Ë
	`__ALIGN_KERNEL_MASK
(x, (
	`__ty≥of__
(x))◊Ë- 1)

	)

32 
	#__ALIGN_KERNEL_MASK
(
x
, 
mask
Ë(((xË+ (mask)Ë& ~(mask))

	)

34 
	#__KERNEL_DIV_ROUND_UP
(
n
, 
d
Ë((“Ë+ (dË- 1Ë/ (d))

	)

	@/usr/include/linux/edd.h

31 #i‚de‡
_LINUX_EDD_H


32 
	#_LINUX_EDD_H


	)

34 
	~<löux/ty≥s.h
>

36 
	#EDDNR
 0x1e9

	)

38 
	#EDDBUF
 0xd00

	)

39 
	#EDDMAXNR
 6

	)

40 
	#EDDEXTSIZE
 8

	)

41 
	#EDDPARMSIZE
 74

	)

42 
	#CHECKEXTENSIONSPRESENT
 0x41

	)

43 
	#GETDEVICEPARAMETERS
 0x48

	)

44 
	#LEGACYGETDEVICEPARAMETERS
 0x08

	)

45 
	#EDDMAGIC1
 0x55AA

	)

46 
	#EDDMAGIC2
 0xAA55

	)

49 
	#READ_SECTORS
 0x02

	)

50 
	#EDD_MBR_SIG_OFFSET
 0x1B8

	)

51 
	#EDD_MBR_SIG_BUF
 0x290

	)

52 
	#EDD_MBR_SIG_MAX
 16

	)

53 
	#EDD_MBR_SIG_NR_BUF
 0x1ó

	)

56 #i‚de‡
__ASSEMBLY__


58 
	#EDD_EXT_FIXED_DISK_ACCESS
 (1 << 0)

	)

59 
	#EDD_EXT_DEVICE_LOCKING_AND_EJECTING
 (1 << 1)

	)

60 
	#EDD_EXT_ENHANCED_DISK_DRIVE_SUPPORT
 (1 << 2)

	)

61 
	#EDD_EXT_64BIT_EXTENSIONS
 (1 << 3)

	)

63 
	#EDD_INFO_DMA_BOUNDARY_ERROR_TRANSPARENT
 (1 << 0)

	)

64 
	#EDD_INFO_GEOMETRY_VALID
 (1 << 1)

	)

65 
	#EDD_INFO_REMOVABLE
 (1 << 2)

	)

66 
	#EDD_INFO_WRITE_VERIFY
 (1 << 3)

	)

67 
	#EDD_INFO_MEDIA_CHANGE_NOTIFICATION
 (1 << 4)

	)

68 
	#EDD_INFO_LOCKABLE
 (1 << 5)

	)

69 
	#EDD_INFO_NO_MEDIA_PRESENT
 (1 << 6)

	)

70 
	#EDD_INFO_USE_INT13_FN50
 (1 << 7)

	)

72 
	sedd_devi˚_∑øms
 {

73 
__u16
 
	mÀngth
;

74 
__u16
 
	möfo_Êags
;

75 
__u32
 
	mnum_deÁu…_cylödîs
;

76 
__u32
 
	mnum_deÁu…_hóds
;

77 
__u32
 
	m£˘‹s_≥r_åack
;

78 
__u64
 
	mnumbî_of_£˘‹s
;

79 
__u16
 
	mbyãs_≥r_£˘‹
;

80 
__u32
 
	md±e_±r
;

81 
__u16
 
	mkey
;

82 
__u8
 
	mdevi˚_∑th_öfo_Àngth
;

83 
__u8
 
	mª£rved2
;

84 
__u16
 
	mª£rved3
;

85 
__u8
 
	mho°_bus_ty≥
[4];

86 
__u8
 
	möãrÁ˚_ty≥
[8];

89 
__u16
 
	mba£_addªss
;

90 
__u16
 
	mª£rved1
;

91 
__u32
 
	mª£rved2
;

92 } 
__©åibuã__
 ((
∑cked
)Ë
	miß
;

94 
__u8
 
	mbus
;

95 
__u8
 
	m¶Ÿ
;

96 
__u8
 
	mfun˘i⁄
;

97 
__u8
 
	mch™√l
;

98 
__u32
 
	mª£rved
;

99 } 
__©åibuã__
 ((
∑cked
)Ë
	mpci
;

102 
__u64
 
	mª£rved
;

103 } 
__©åibuã__
 ((
∑cked
)Ë
	mibnd
;

105 
__u64
 
	mª£rved
;

106 } 
__©åibuã__
 ((
∑cked
)Ë
	mx¥s
;

108 
__u64
 
	mª£rved
;

109 } 
__©åibuã__
 ((
∑cked
)Ë
	mhçt
;

111 
__u64
 
	mª£rved
;

112 } 
__©åibuã__
 ((
∑cked
)Ë
	munknown
;

113 } 
	möãrÁ˚_∑th
;

116 
__u8
 
	mdevi˚
;

117 
__u8
 
	mª£rved1
;

118 
__u16
 
	mª£rved2
;

119 
__u32
 
	mª£rved3
;

120 
__u64
 
	mª£rved4
;

121 } 
__©åibuã__
 ((
∑cked
)Ë
	m©a
;

123 
__u8
 
	mdevi˚
;

124 
__u8
 
	mlun
;

125 
__u8
 
	mª£rved1
;

126 
__u8
 
	mª£rved2
;

127 
__u32
 
	mª£rved3
;

128 
__u64
 
	mª£rved4
;

129 } 
__©åibuã__
 ((
∑cked
)Ë
	m©≠i
;

131 
__u16
 
	mid
;

132 
__u64
 
	mlun
;

133 
__u16
 
	mª£rved1
;

134 
__u32
 
	mª£rved2
;

135 } 
__©åibuã__
 ((
∑cked
)Ë
	mscsi
;

137 
__u64
 
	m£rül_numbî
;

138 
__u64
 
	mª£rved
;

139 } 
__©åibuã__
 ((
∑cked
)Ë
	musb
;

141 
__u64
 
	meui
;

142 
__u64
 
	mª£rved
;

143 } 
__©åibuã__
 ((
∑cked
)Ë
	mi1394
;

145 
__u64
 
	mwwid
;

146 
__u64
 
	mlun
;

147 } 
__©åibuã__
 ((
∑cked
)Ë
	mfibª
;

149 
__u64
 
	midítôy_èg
;

150 
__u64
 
	mª£rved
;

151 } 
__©åibuã__
 ((
∑cked
)Ë
	mi2o
;

153 
__u32
 
	m¨øy_numbî
;

154 
__u32
 
	mª£rved1
;

155 
__u64
 
	mª£rved2
;

156 } 
__©åibuã__
 ((
∑cked
)Ë
	møid
;

158 
__u8
 
	mdevi˚
;

159 
__u8
 
	mª£rved1
;

160 
__u16
 
	mª£rved2
;

161 
__u32
 
	mª£rved3
;

162 
__u64
 
	mª£rved4
;

163 } 
__©åibuã__
 ((
∑cked
)Ë
	mßè
;

165 
__u64
 
	mª£rved1
;

166 
__u64
 
	mª£rved2
;

167 } 
__©åibuã__
 ((
∑cked
)Ë
	munknown
;

168 } 
	mdevi˚_∑th
;

169 
__u8
 
	mª£rved4
;

170 
__u8
 
	mchecksum
;

171 } 
__©åibuã__
 ((
∑cked
));

173 
	sedd_öfo
 {

174 
__u8
 
	mdevi˚
;

175 
__u8
 
	mvîsi⁄
;

176 
__u16
 
	möãrÁ˚_suµ‹t
;

177 
__u16
 
	mÀgacy_max_cylödî
;

178 
__u8
 
	mÀgacy_max_hód
;

179 
__u8
 
	mÀgacy_£˘‹s_≥r_åack
;

180 
edd_devi˚_∑øms
 
	m∑øms
;

181 } 
__©åibuã__
 ((
∑cked
));

183 
	sedd
 {

184 
	mmbr_sig«tuª
[
EDD_MBR_SIG_MAX
];

185 
edd_öfo
 
	medd_öfo
[
EDDMAXNR
];

186 
	mmbr_sig«tuª_ƒ
;

187 
	medd_öfo_ƒ
;

	@/usr/include/linux/errno.h

1 
	~<asm/î∫o.h
>

	@/usr/include/linux/falloc.h

2 #i‚de‡
_FALLOC_H_


3 
	#_FALLOC_H_


	)

5 
	#FALLOC_FL_KEEP_SIZE
 0x01

	)

6 
	#FALLOC_FL_PUNCH_HOLE
 0x02

	)

7 
	#FALLOC_FL_NO_HIDE_STALE
 0x04

	)

29 
	#FALLOC_FL_COLLAPSE_RANGE
 0x08

	)

43 
	#FALLOC_FL_ZERO_RANGE
 0x10

	)

60 
	#FALLOC_FL_INSERT_RANGE
 0x20

	)

78 
	#FALLOC_FL_UNSHARE_RANGE
 0x40

	)

	@/usr/include/linux/fanotify.h

2 #i‚de‡
_LINUX_FANOTIFY_H


3 
	#_LINUX_FANOTIFY_H


	)

5 
	~<löux/ty≥s.h
>

8 
	#FAN_ACCESS
 0x00000001

	)

9 
	#FAN_MODIFY
 0x00000002

	)

10 
	#FAN_ATTRIB
 0x00000004

	)

11 
	#FAN_CLOSE_WRITE
 0x00000008

	)

12 
	#FAN_CLOSE_NOWRITE
 0x00000010

	)

13 
	#FAN_OPEN
 0x00000020

	)

14 
	#FAN_MOVED_FROM
 0x00000040

	)

15 
	#FAN_MOVED_TO
 0x00000080

	)

16 
	#FAN_CREATE
 0x00000100

	)

17 
	#FAN_DELETE
 0x00000200

	)

18 
	#FAN_DELETE_SELF
 0x00000400

	)

19 
	#FAN_MOVE_SELF
 0x00000800

	)

20 
	#FAN_OPEN_EXEC
 0x00001000

	)

22 
	#FAN_Q_OVERFLOW
 0x00004000

	)

24 
	#FAN_OPEN_PERM
 0x00010000

	)

25 
	#FAN_ACCESS_PERM
 0x00020000

	)

26 
	#FAN_OPEN_EXEC_PERM
 0x00040000

	)

28 
	#FAN_EVENT_ON_CHILD
 0x08000000

	)

30 
	#FAN_ONDIR
 0x40000000

	)

33 
	#FAN_CLOSE
 (
FAN_CLOSE_WRITE
 | 
FAN_CLOSE_NOWRITE
Ë

	)

34 
	#FAN_MOVE
 (
FAN_MOVED_FROM
 | 
FAN_MOVED_TO
Ë

	)

37 
	#FAN_CLOEXEC
 0x00000001

	)

38 
	#FAN_NONBLOCK
 0x00000002

	)

41 
	#FAN_CLASS_NOTIF
 0x00000000

	)

42 
	#FAN_CLASS_CONTENT
 0x00000004

	)

43 
	#FAN_CLASS_PRE_CONTENT
 0x00000008

	)

46 
	#FAN_ALL_CLASS_BITS
 (
FAN_CLASS_NOTIF
 | 
FAN_CLASS_CONTENT
 | \

47 
FAN_CLASS_PRE_CONTENT
)

	)

49 
	#FAN_UNLIMITED_QUEUE
 0x00000010

	)

50 
	#FAN_UNLIMITED_MARKS
 0x00000020

	)

51 
	#FAN_ENABLE_AUDIT
 0x00000040

	)

54 
	#FAN_REPORT_PIDFD
 0x00000080

	)

55 
	#FAN_REPORT_TID
 0x00000100

	)

56 
	#FAN_REPORT_FID
 0x00000200

	)

57 
	#FAN_REPORT_DIR_FID
 0x00000400

	)

58 
	#FAN_REPORT_NAME
 0x00000800

	)

61 
	#FAN_REPORT_DFID_NAME
 (
FAN_REPORT_DIR_FID
 | 
FAN_REPORT_NAME
)

	)

64 
	#FAN_ALL_INIT_FLAGS
 (
FAN_CLOEXEC
 | 
FAN_NONBLOCK
 | \

65 
FAN_ALL_CLASS_BITS
 | 
FAN_UNLIMITED_QUEUE
 |\

66 
FAN_UNLIMITED_MARKS
)

	)

69 
	#FAN_MARK_ADD
 0x00000001

	)

70 
	#FAN_MARK_REMOVE
 0x00000002

	)

71 
	#FAN_MARK_DONT_FOLLOW
 0x00000004

	)

72 
	#FAN_MARK_ONLYDIR
 0x00000008

	)

74 
	#FAN_MARK_IGNORED_MASK
 0x00000020

	)

75 
	#FAN_MARK_IGNORED_SURV_MODIFY
 0x00000040

	)

76 
	#FAN_MARK_FLUSH
 0x00000080

	)

80 
	#FAN_MARK_INODE
 0x00000000

	)

81 
	#FAN_MARK_MOUNT
 0x00000010

	)

82 
	#FAN_MARK_FILESYSTEM
 0x00000100

	)

85 
	#FAN_ALL_MARK_FLAGS
 (
FAN_MARK_ADD
 |\

86 
FAN_MARK_REMOVE
 |\

87 
FAN_MARK_DONT_FOLLOW
 |\

88 
FAN_MARK_ONLYDIR
 |\

89 
FAN_MARK_MOUNT
 |\

90 
FAN_MARK_IGNORED_MASK
 |\

91 
FAN_MARK_IGNORED_SURV_MODIFY
 |\

92 
FAN_MARK_FLUSH
)

	)

95 
	#FAN_ALL_EVENTS
 (
FAN_ACCESS
 |\

96 
FAN_MODIFY
 |\

97 
FAN_CLOSE
 |\

98 
FAN_OPEN
)

	)

104 
	#FAN_ALL_PERM_EVENTS
 (
FAN_OPEN_PERM
 |\

105 
FAN_ACCESS_PERM
)

	)

108 
	#FAN_ALL_OUTGOING_EVENTS
 (
FAN_ALL_EVENTS
 |\

109 
FAN_ALL_PERM_EVENTS
 |\

110 
FAN_Q_OVERFLOW
)

	)

112 
	#FANOTIFY_METADATA_VERSION
 3

	)

114 
	sÁnŸify_evít_mëad©a
 {

115 
__u32
 
	mevít_Àn
;

116 
__u8
 
	mvîs
;

117 
__u8
 
	mª£rved
;

118 
__u16
 
	mmëad©a_Àn
;

119 
__Æig√d_u64
 
	mmask
;

120 
__s32
 
	mfd
;

121 
__s32
 
	mpid
;

124 
	#FAN_EVENT_INFO_TYPE_FID
 1

	)

125 
	#FAN_EVENT_INFO_TYPE_DFID_NAME
 2

	)

126 
	#FAN_EVENT_INFO_TYPE_DFID
 3

	)

127 
	#FAN_EVENT_INFO_TYPE_PIDFD
 4

	)

130 
	sÁnŸify_evít_öfo_hódî
 {

131 
__u8
 
	möfo_ty≥
;

132 
__u8
 
	m∑d
;

133 
__u16
 
	mÀn
;

143 
	sÁnŸify_evít_öfo_fid
 {

144 
ÁnŸify_evít_öfo_hódî
 
	mhdr
;

145 
__kî√l_fsid_t
 
	mfsid
;

150 
	mh™dÀ
[0];

157 
	sÁnŸify_evít_öfo_pidfd
 {

158 
ÁnŸify_evít_öfo_hódî
 
	mhdr
;

159 
__s32
 
	mpidfd
;

162 
	sÁnŸify_ª•⁄£
 {

163 
__s32
 
	mfd
;

164 
__u32
 
	mª•⁄£
;

168 
	#FAN_ALLOW
 0x01

	)

169 
	#FAN_DENY
 0x02

	)

170 
	#FAN_AUDIT
 0x10

	)

173 
	#FAN_NOFD
 -1

	)

174 
	#FAN_NOPIDFD
 
FAN_NOFD


	)

175 
	#FAN_EPIDFD
 -2

	)

178 
	#FAN_EVENT_METADATA_LEN
 ((
ÁnŸify_evít_mëad©a
))

	)

180 
	#FAN_EVENT_NEXT
(
mëa
, 
Àn
Ë(÷íË-(mëa)->
evít_Àn
, \

181 (
ÁnŸify_evít_mëad©a
*)(((*)(
mëa
)) + \

182 (
mëa
)->
evít_Àn
))

	)

184 
	#FAN_EVENT_OK
(
mëa
, 
Àn
Ë(()÷íË>()
FAN_EVENT_METADATA_LEN
 && \

185 ()(
mëa
)->
evít_Àn
 >()
FAN_EVENT_METADATA_LEN
 && \

186 ()(
mëa
)->
evít_Àn
 <()(
Àn
))

	)

	@/usr/include/linux/ioctl.h

2 #i‚de‡
_LINUX_IOCTL_H


3 
	#_LINUX_IOCTL_H


	)

5 
	~<asm/io˘l.h
>

	@/usr/include/linux/kd.h

2 #i‚de‡
_LINUX_KD_H


3 
	#_LINUX_KD_H


	)

4 
	~<löux/ty≥s.h
>

9 
	#GIO_FONT
 0x4B60

	)

10 
	#PIO_FONT
 0x4B61

	)

12 
	#GIO_FONTX
 0x4B6B

	)

13 
	#PIO_FONTX
 0x4B6C

	)

14 
	sc⁄sﬁef⁄tdesc
 {

15 
	mch¨cou¡
;

16 
	mch¨height
;

17 *
	mch¨d©a
;

20 
	#PIO_FONTRESET
 0x4B6D

	)

22 
	#GIO_CMAP
 0x4B70

	)

23 
	#PIO_CMAP
 0x4B71

	)

25 
	#KIOCSOUND
 0x4B2F

	)

26 
	#KDMKTONE
 0x4B30

	)

28 
	#KDGETLED
 0x4B31

	)

29 
	#KDSETLED
 0x4B32

	)

30 
	#LED_SCR
 0x01

	)

31 
	#LED_NUM
 0x02

	)

32 
	#LED_CAP
 0x04

	)

34 
	#KDGKBTYPE
 0x4B33

	)

35 
	#KB_84
 0x01

	)

36 
	#KB_101
 0x02

	)

37 
	#KB_OTHER
 0x03

	)

39 
	#KDADDIO
 0x4B34

	)

40 
	#KDDELIO
 0x4B35

	)

41 
	#KDENABIO
 0x4B36

	)

42 
	#KDDISABIO
 0x4B37

	)

44 
	#KDSETMODE
 0x4B3A

	)

45 
	#KD_TEXT
 0x00

	)

46 
	#KD_GRAPHICS
 0x01

	)

47 
	#KD_TEXT0
 0x02

	)

48 
	#KD_TEXT1
 0x03

	)

49 
	#KDGETMODE
 0x4B3B

	)

51 
	#KDMAPDISP
 0x4B3C

	)

52 
	#KDUNMAPDISP
 0x4B3D

	)

54 
	ts¸nm≠_t
;

55 
	#E_TABSZ
 256

	)

56 
	#GIO_SCRNMAP
 0x4B40

	)

57 
	#PIO_SCRNMAP
 0x4B41

	)

58 
	#GIO_UNISCRNMAP
 0x4B69

	)

59 
	#PIO_UNISCRNMAP
 0x4B6A

	)

61 
	#GIO_UNIMAP
 0x4B66

	)

62 
	sunùaú
 {

63 
	municode
;

64 
	mf⁄ços
;

66 
	sunim≠desc
 {

67 
	míåy_˘
;

68 
unùaú
 *
	míåõs
;

70 
	#PIO_UNIMAP
 0x4B67

	)

71 
	#PIO_UNIMAPCLR
 0x4B68

	)

72 
	sunim≠öô
 {

73 
	madvi£d_hashsize
;

74 
	madvi£d_hash°ï
;

75 
	madvi£d_hashÀvñ
;

78 
	#UNI_DIRECT_BASE
 0xF000

	)

79 
	#UNI_DIRECT_MASK
 0x01FF

	)

81 
	#K_RAW
 0x00

	)

82 
	#K_XLATE
 0x01

	)

83 
	#K_MEDIUMRAW
 0x02

	)

84 
	#K_UNICODE
 0x03

	)

85 
	#K_OFF
 0x04

	)

86 
	#KDGKBMODE
 0x4B44

	)

87 
	#KDSKBMODE
 0x4B45

	)

89 
	#K_METABIT
 0x03

	)

90 
	#K_ESCPREFIX
 0x04

	)

91 
	#KDGKBMETA
 0x4B62

	)

92 
	#KDSKBMETA
 0x4B63

	)

94 
	#K_SCROLLLOCK
 0x01

	)

95 
	#K_NUMLOCK
 0x02

	)

96 
	#K_CAPSLOCK
 0x04

	)

97 
	#KDGKBLED
 0x4B64

	)

98 
	#KDSKBLED
 0x4B65

	)

100 
	skbíåy
 {

101 
	mkb_èbÀ
;

102 
	mkb_ödex
;

103 
	mkb_vÆue
;

105 
	#K_NORMTAB
 0x00

	)

106 
	#K_SHIFTTAB
 0x01

	)

107 
	#K_ALTTAB
 0x02

	)

108 
	#K_ALTSHIFTTAB
 0x03

	)

110 
	#KDGKBENT
 0x4B46

	)

111 
	#KDSKBENT
 0x4B47

	)

113 
	skb£¡ry
 {

114 
	mkb_func
;

115 
	mkb_°rög
[512];

117 
	#KDGKBSENT
 0x4B48

	)

118 
	#KDSKBSENT
 0x4B49

	)

120 
	skbdü¸
 {

121 
	mdü¸
, 
	mba£
, 
	mªsu…
;

123 
	skbdü¸s
 {

124 
	mkb_˙t
;

125 
kbdü¸
 
	mkbdü¸
[256];

127 
	#KDGKBDIACR
 0x4B4A

	)

128 
	#KDSKBDIACR
 0x4B4B

	)

130 
	skbdü¸uc
 {

131 
	mdü¸
, 
	mba£
, 
	mªsu…
;

133 
	skbdü¸suc
 {

134 
	mkb_˙t
;

135 
kbdü¸uc
 
	mkbdü¸uc
[256];

137 
	#KDGKBDIACRUC
 0x4BFA

	)

138 
	#KDSKBDIACRUC
 0x4BFB

	)

140 
	skbkeycode
 {

141 
	msˇncode
, 
	mkeycode
;

143 
	#KDGETKEYCODE
 0x4B4C

	)

144 
	#KDSETKEYCODE
 0x4B4D

	)

146 
	#KDSIGACCEPT
 0x4B4E

	)

148 
	skbd_ª≥©
 {

149 
	mdñay
;

150 
	m≥riod
;

154 
	#KDKBDREP
 0x4B52

	)

157 
	#KDFONTOP
 0x4B72

	)

159 
	sc⁄sﬁe_f⁄t_›
 {

160 
	m›
;

161 
	mÊags
;

162 
	mwidth
, 
	mheight
;

163 
	mch¨cou¡
;

164 *
	md©a
;

167 
	sc⁄sﬁe_f⁄t
 {

168 
	mwidth
, 
	mheight
;

169 
	mch¨cou¡
;

170 *
	md©a
;

173 
	#KD_FONT_OP_SET
 0

	)

174 
	#KD_FONT_OP_GET
 1

	)

175 
	#KD_FONT_OP_SET_DEFAULT
 2

	)

176 
	#KD_FONT_OP_COPY
 3

	)

178 
	#KD_FONT_FLAG_DONT_RECALC
 1

	)

	@/usr/include/linux/kernel.h

2 #i‚de‡
_LINUX_KERNEL_H


3 
	#_LINUX_KERNEL_H


	)

5 
	~<löux/sysöfo.h
>

6 
	~<löux/c⁄°.h
>

	@/usr/include/linux/limits.h

2 #i‚de‡
_LINUX_LIMITS_H


3 
	#_LINUX_LIMITS_H


	)

5 
	#NR_OPEN
 1024

	)

7 
	#NGROUPS_MAX
 65536

	)

8 
	#ARG_MAX
 131072

	)

9 
	#LINK_MAX
 127

	)

10 
	#MAX_CANON
 255

	)

11 
	#MAX_INPUT
 255

	)

12 
	#NAME_MAX
 255

	)

13 
	#PATH_MAX
 4096

	)

14 
	#PIPE_BUF
 4096

	)

15 
	#XATTR_NAME_MAX
 255

	)

16 
	#XATTR_SIZE_MAX
 65536

	)

17 
	#XATTR_LIST_MAX
 65536

	)

19 
	#RTSIG_MAX
 32

	)

	@/usr/include/linux/param.h

2 #i‚de‡
_LINUX_PARAM_H


3 
	#_LINUX_PARAM_H


	)

5 
	~<asm/∑øm.h
>

	@/usr/include/linux/pci.h

18 #i‚de‡
LINUX_PCI_H


19 
	#LINUX_PCI_H


	)

21 
	~<löux/pci_ªgs.h
>

31 
	#PCI_DEVFN
(
¶Ÿ
, 
func
Ë((((¶ŸË& 0x1fË<< 3Ë| ((funcË& 0x07))

	)

32 
	#PCI_SLOT
(
dev‚
Ë(((dev‚Ë>> 3Ë& 0x1f)

	)

33 
	#PCI_FUNC
(
dev‚
Ë((dev‚Ë& 0x07)

	)

36 
	#PCIIOC_BASE
 ('P' << 24 | 'C' << 16 | 'I' << 8)

	)

37 
	#PCIIOC_CONTROLLER
 (
PCIIOC_BASE
 | 0x00Ë

	)

38 
	#PCIIOC_MMAP_IS_IO
 (
PCIIOC_BASE
 | 0x01Ë

	)

39 
	#PCIIOC_MMAP_IS_MEM
 (
PCIIOC_BASE
 | 0x02Ë

	)

40 
	#PCIIOC_WRITE_COMBINE
 (
PCIIOC_BASE
 | 0x03Ë

	)

	@/usr/include/linux/prctl.h

2 #i‚de‡
_LINUX_PRCTL_H


3 
	#_LINUX_PRCTL_H


	)

5 
	~<löux/ty≥s.h
>

9 
	#PR_SET_PDEATHSIG
 1

	)

10 
	#PR_GET_PDEATHSIG
 2

	)

13 
	#PR_GET_DUMPABLE
 3

	)

14 
	#PR_SET_DUMPABLE
 4

	)

17 
	#PR_GET_UNALIGN
 5

	)

18 
	#PR_SET_UNALIGN
 6

	)

19 
	#PR_UNALIGN_NOPRINT
 1

	)

20 
	#PR_UNALIGN_SIGBUS
 2

	)

24 
	#PR_GET_KEEPCAPS
 7

	)

25 
	#PR_SET_KEEPCAPS
 8

	)

28 
	#PR_GET_FPEMU
 9

	)

29 
	#PR_SET_FPEMU
 10

	)

30 
	#PR_FPEMU_NOPRINT
 1

	)

31 
	#PR_FPEMU_SIGFPE
 2

	)

34 
	#PR_GET_FPEXC
 11

	)

35 
	#PR_SET_FPEXC
 12

	)

36 
	#PR_FP_EXC_SW_ENABLE
 0x80

	)

37 
	#PR_FP_EXC_DIV
 0x010000

	)

38 
	#PR_FP_EXC_OVF
 0x020000

	)

39 
	#PR_FP_EXC_UND
 0x040000

	)

40 
	#PR_FP_EXC_RES
 0x080000

	)

41 
	#PR_FP_EXC_INV
 0x100000

	)

42 
	#PR_FP_EXC_DISABLED
 0

	)

43 
	#PR_FP_EXC_NONRECOV
 1

	)

44 
	#PR_FP_EXC_ASYNC
 2

	)

45 
	#PR_FP_EXC_PRECISE
 3

	)

49 
	#PR_GET_TIMING
 13

	)

50 
	#PR_SET_TIMING
 14

	)

51 
	#PR_TIMING_STATISTICAL
 0

	)

53 
	#PR_TIMING_TIMESTAMP
 1

	)

56 
	#PR_SET_NAME
 15

	)

57 
	#PR_GET_NAME
 16

	)

60 
	#PR_GET_ENDIAN
 19

	)

61 
	#PR_SET_ENDIAN
 20

	)

62 
	#PR_ENDIAN_BIG
 0

	)

63 
	#PR_ENDIAN_LITTLE
 1

	)

64 
	#PR_ENDIAN_PPC_LITTLE
 2

	)

67 
	#PR_GET_SECCOMP
 21

	)

68 
	#PR_SET_SECCOMP
 22

	)

71 
	#PR_CAPBSET_READ
 23

	)

72 
	#PR_CAPBSET_DROP
 24

	)

75 
	#PR_GET_TSC
 25

	)

76 
	#PR_SET_TSC
 26

	)

77 
	#PR_TSC_ENABLE
 1

	)

78 
	#PR_TSC_SIGSEGV
 2

	)

81 
	#PR_GET_SECUREBITS
 27

	)

82 
	#PR_SET_SECUREBITS
 28

	)

88 
	#PR_SET_TIMERSLACK
 29

	)

89 
	#PR_GET_TIMERSLACK
 30

	)

91 
	#PR_TASK_PERF_EVENTS_DISABLE
 31

	)

92 
	#PR_TASK_PERF_EVENTS_ENABLE
 32

	)

98 
	#PR_MCE_KILL
 33

	)

99 
	#PR_MCE_KILL_CLEAR
 0

	)

100 
	#PR_MCE_KILL_SET
 1

	)

102 
	#PR_MCE_KILL_LATE
 0

	)

103 
	#PR_MCE_KILL_EARLY
 1

	)

104 
	#PR_MCE_KILL_DEFAULT
 2

	)

106 
	#PR_MCE_KILL_GET
 34

	)

111 
	#PR_SET_MM
 35

	)

112 
	#PR_SET_MM_START_CODE
 1

	)

113 
	#PR_SET_MM_END_CODE
 2

	)

114 
	#PR_SET_MM_START_DATA
 3

	)

115 
	#PR_SET_MM_END_DATA
 4

	)

116 
	#PR_SET_MM_START_STACK
 5

	)

117 
	#PR_SET_MM_START_BRK
 6

	)

118 
	#PR_SET_MM_BRK
 7

	)

119 
	#PR_SET_MM_ARG_START
 8

	)

120 
	#PR_SET_MM_ARG_END
 9

	)

121 
	#PR_SET_MM_ENV_START
 10

	)

122 
	#PR_SET_MM_ENV_END
 11

	)

123 
	#PR_SET_MM_AUXV
 12

	)

124 
	#PR_SET_MM_EXE_FILE
 13

	)

125 
	#PR_SET_MM_MAP
 14

	)

126 
	#PR_SET_MM_MAP_SIZE
 15

	)

134 
	s¥˘l_mm_m≠
 {

135 
__u64
 
	m°¨t_code
;

136 
__u64
 
	míd_code
;

137 
__u64
 
	m°¨t_d©a
;

138 
__u64
 
	míd_d©a
;

139 
__u64
 
	m°¨t_brk
;

140 
__u64
 
	mbrk
;

141 
__u64
 
	m°¨t_°ack
;

142 
__u64
 
	m¨g_°¨t
;

143 
__u64
 
	m¨g_íd
;

144 
__u64
 
	mív_°¨t
;

145 
__u64
 
	mív_íd
;

146 
__u64
 *
	mauxv
;

147 
__u32
 
	mauxv_size
;

148 
__u32
 
	mexe_fd
;

155 
	#PR_SET_PTRACER
 0x59616d61

	)

156 
	#PR_SET_PTRACER_ANY
 (()-1)

	)

158 
	#PR_SET_CHILD_SUBREAPER
 36

	)

159 
	#PR_GET_CHILD_SUBREAPER
 37

	)

175 
	#PR_SET_NO_NEW_PRIVS
 38

	)

176 
	#PR_GET_NO_NEW_PRIVS
 39

	)

178 
	#PR_GET_TID_ADDRESS
 40

	)

180 
	#PR_SET_THP_DISABLE
 41

	)

181 
	#PR_GET_THP_DISABLE
 42

	)

186 
	#PR_MPX_ENABLE_MANAGEMENT
 43

	)

187 
	#PR_MPX_DISABLE_MANAGEMENT
 44

	)

189 
	#PR_SET_FP_MODE
 45

	)

190 
	#PR_GET_FP_MODE
 46

	)

191 
	#PR_FP_MODE_FR
 (1 << 0Ë

	)

192 
	#PR_FP_MODE_FRE
 (1 << 1Ë

	)

195 
	#PR_CAP_AMBIENT
 47

	)

196 
	#PR_CAP_AMBIENT_IS_SET
 1

	)

197 
	#PR_CAP_AMBIENT_RAISE
 2

	)

198 
	#PR_CAP_AMBIENT_LOWER
 3

	)

199 
	#PR_CAP_AMBIENT_CLEAR_ALL
 4

	)

203 
	#PR_SVE_SET_VL
 50

	)

204 
	#PR_SVE_SET_VL_ONEXEC
 (1 << 18Ë

	)

205 
	#PR_SVE_GET_VL
 51

	)

207 
	#PR_SVE_VL_LEN_MASK
 0xffff

	)

208 
	#PR_SVE_VL_INHERIT
 (1 << 17Ë

	)

211 
	#PR_GET_SPECULATION_CTRL
 52

	)

212 
	#PR_SET_SPECULATION_CTRL
 53

	)

214 
	#PR_SPEC_STORE_BYPASS
 0

	)

215 
	#PR_SPEC_INDIRECT_BRANCH
 1

	)

216 
	#PR_SPEC_L1D_FLUSH
 2

	)

218 
	#PR_SPEC_NOT_AFFECTED
 0

	)

219 
	#PR_SPEC_PRCTL
 (1UL << 0)

	)

220 
	#PR_SPEC_ENABLE
 (1UL << 1)

	)

221 
	#PR_SPEC_DISABLE
 (1UL << 2)

	)

222 
	#PR_SPEC_FORCE_DISABLE
 (1UL << 3)

	)

223 
	#PR_SPEC_DISABLE_NOEXEC
 (1UL << 4)

	)

226 
	#PR_PAC_RESET_KEYS
 54

	)

227 
	#PR_PAC_APIAKEY
 (1UL << 0)

	)

228 
	#PR_PAC_APIBKEY
 (1UL << 1)

	)

229 
	#PR_PAC_APDAKEY
 (1UL << 2)

	)

230 
	#PR_PAC_APDBKEY
 (1UL << 3)

	)

231 
	#PR_PAC_APGAKEY
 (1UL << 4)

	)

234 
	#PR_SET_TAGGED_ADDR_CTRL
 55

	)

235 
	#PR_GET_TAGGED_ADDR_CTRL
 56

	)

236 
	#PR_TAGGED_ADDR_ENABLE
 (1UL << 0)

	)

238 
	#PR_MTE_TCF_NONE
 0

	)

239 
	#PR_MTE_TCF_SYNC
 (1UL << 1)

	)

240 
	#PR_MTE_TCF_ASYNC
 (1UL << 2)

	)

241 
	#PR_MTE_TCF_MASK
 (
PR_MTE_TCF_SYNC
 | 
PR_MTE_TCF_ASYNC
)

	)

243 
	#PR_MTE_TAG_SHIFT
 3

	)

244 
	#PR_MTE_TAG_MASK
 (0xffffUL << 
PR_MTE_TAG_SHIFT
)

	)

246 
	#PR_MTE_TCF_SHIFT
 1

	)

249 
	#PR_SET_IO_FLUSHER
 57

	)

250 
	#PR_GET_IO_FLUSHER
 58

	)

253 
	#PR_SET_SYSCALL_USER_DISPATCH
 59

	)

254 
	#PR_SYS_DISPATCH_OFF
 0

	)

255 
	#PR_SYS_DISPATCH_ON
 1

	)

257 
	#SYSCALL_DISPATCH_FILTER_ALLOW
 0

	)

258 
	#SYSCALL_DISPATCH_FILTER_BLOCK
 1

	)

261 
	#PR_PAC_SET_ENABLED_KEYS
 60

	)

262 
	#PR_PAC_GET_ENABLED_KEYS
 61

	)

265 
	#PR_SCHED_CORE
 62

	)

266 
	#PR_SCHED_CORE_GET
 0

	)

267 
	#PR_SCHED_CORE_CREATE
 1

	)

268 
	#PR_SCHED_CORE_SHARE_TO
 2

	)

269 
	#PR_SCHED_CORE_SHARE_FROM
 3

	)

270 
	#PR_SCHED_CORE_MAX
 4

	)

	@/usr/include/linux/quota.h

33 #i‚de‡
_LINUX_QUOTA_


34 
	#_LINUX_QUOTA_


	)

36 
	~<löux/ty≥s.h
>

38 
	#__DQUOT_VERSION__
 "dquŸ_6.6.0"

	)

40 
	#MAXQUOTAS
 3

	)

41 
	#USRQUOTA
 0

	)

42 
	#GRPQUOTA
 1

	)

43 
	#PRJQUOTA
 2

	)

48 
	#INITQFNAMES
 { \

53 };

	)

61 
	#SUBCMDMASK
 0x00ff

	)

62 
	#SUBCMDSHIFT
 8

	)

63 
	#QCMD
(
cmd
, 
ty≥
Ë(((cmdË<< 
SUBCMDSHIFT
Ë| (—y≥Ë& 
SUBCMDMASK
))

	)

65 
	#Q_SYNC
 0x800001

	)

66 
	#Q_QUOTAON
 0x800002

	)

67 
	#Q_QUOTAOFF
 0x800003

	)

68 
	#Q_GETFMT
 0x800004

	)

69 
	#Q_GETINFO
 0x800005

	)

70 
	#Q_SETINFO
 0x800006

	)

71 
	#Q_GETQUOTA
 0x800007

	)

72 
	#Q_SETQUOTA
 0x800008

	)

73 
	#Q_GETNEXTQUOTA
 0x800009

	)

76 
	#QFMT_VFS_OLD
 1

	)

77 
	#QFMT_VFS_V0
 2

	)

78 
	#QFMT_OCFS2
 3

	)

79 
	#QFMT_VFS_V1
 4

	)

83 
	#QIF_DQBLKSIZE_BITS
 10

	)

84 
	#QIF_DQBLKSIZE
 (1 << 
QIF_DQBLKSIZE_BITS
)

	)

91 
	mQIF_BLIMITS_B
 = 0,

92 
	mQIF_SPACE_B
,

93 
	mQIF_ILIMITS_B
,

94 
	mQIF_INODES_B
,

95 
	mQIF_BTIME_B
,

96 
	mQIF_ITIME_B
,

99 
	#QIF_BLIMITS
 (1 << 
QIF_BLIMITS_B
)

	)

100 
	#QIF_SPACE
 (1 << 
QIF_SPACE_B
)

	)

101 
	#QIF_ILIMITS
 (1 << 
QIF_ILIMITS_B
)

	)

102 
	#QIF_INODES
 (1 << 
QIF_INODES_B
)

	)

103 
	#QIF_BTIME
 (1 << 
QIF_BTIME_B
)

	)

104 
	#QIF_ITIME
 (1 << 
QIF_ITIME_B
)

	)

105 
	#QIF_LIMITS
 (
QIF_BLIMITS
 | 
QIF_ILIMITS
)

	)

106 
	#QIF_USAGE
 (
QIF_SPACE
 | 
QIF_INODES
)

	)

107 
	#QIF_TIMES
 (
QIF_BTIME
 | 
QIF_ITIME
)

	)

108 
	#QIF_ALL
 (
QIF_LIMITS
 | 
QIF_USAGE
 | 
QIF_TIMES
)

	)

110 
	sif_dqblk
 {

111 
__u64
 
	mdqb_bh¨dlimô
;

112 
__u64
 
	mdqb_bso·limô
;

113 
__u64
 
	mdqb_cur•a˚
;

114 
__u64
 
	mdqb_ih¨dlimô
;

115 
__u64
 
	mdqb_iso·limô
;

116 
__u64
 
	mdqb_curöodes
;

117 
__u64
 
	mdqb_btime
;

118 
__u64
 
	mdqb_ôime
;

119 
__u32
 
	mdqb_vÆid
;

122 
	sif_√xtdqblk
 {

123 
__u64
 
	mdqb_bh¨dlimô
;

124 
__u64
 
	mdqb_bso·limô
;

125 
__u64
 
	mdqb_cur•a˚
;

126 
__u64
 
	mdqb_ih¨dlimô
;

127 
__u64
 
	mdqb_iso·limô
;

128 
__u64
 
	mdqb_curöodes
;

129 
__u64
 
	mdqb_btime
;

130 
__u64
 
	mdqb_ôime
;

131 
__u32
 
	mdqb_vÆid
;

132 
__u32
 
	mdqb_id
;

139 
	#IIF_BGRACE
 1

	)

140 
	#IIF_IGRACE
 2

	)

141 
	#IIF_FLAGS
 4

	)

142 
	#IIF_ALL
 (
IIF_BGRACE
 | 
IIF_IGRACE
 | 
IIF_FLAGS
)

	)

145 
	mDQF_ROOT_SQUASH_B
 = 0,

146 
	mDQF_SYS_FILE_B
 = 16,

148 
	mDQF_PRIVATE


152 
	#DQF_ROOT_SQUASH
 (1 << 
DQF_ROOT_SQUASH_B
)

	)

154 
	#DQF_SYS_FILE
 (1 << 
DQF_SYS_FILE_B
)

	)

156 
	sif_dqöfo
 {

157 
__u64
 
	mdqi_bgø˚
;

158 
__u64
 
	mdqi_igø˚
;

159 
__u32
 
	mdqi_Êags
;

160 
__u32
 
	mdqi_vÆid
;

166 
	#QUOTA_NL_NOWARN
 0

	)

167 
	#QUOTA_NL_IHARDWARN
 1

	)

168 
	#QUOTA_NL_ISOFTLONGWARN
 2

	)

169 
	#QUOTA_NL_ISOFTWARN
 3

	)

170 
	#QUOTA_NL_BHARDWARN
 4

	)

171 
	#QUOTA_NL_BSOFTLONGWARN
 5

	)

172 
	#QUOTA_NL_BSOFTWARN
 6

	)

173 
	#QUOTA_NL_IHARDBELOW
 7

	)

174 
	#QUOTA_NL_ISOFTBELOW
 8

	)

175 
	#QUOTA_NL_BHARDBELOW
 9

	)

176 
	#QUOTA_NL_BSOFTBELOW
 10

	)

179 
	mQUOTA_NL_C_UNSPEC
,

180 
	mQUOTA_NL_C_WARNING
,

181 
	m__QUOTA_NL_C_MAX
,

183 
	#QUOTA_NL_C_MAX
 (
__QUOTA_NL_C_MAX
 - 1)

	)

186 
	mQUOTA_NL_A_UNSPEC
,

187 
	mQUOTA_NL_A_QTYPE
,

188 
	mQUOTA_NL_A_EXCESS_ID
,

189 
	mQUOTA_NL_A_WARNING
,

190 
	mQUOTA_NL_A_DEV_MAJOR
,

191 
	mQUOTA_NL_A_DEV_MINOR
,

192 
	mQUOTA_NL_A_CAUSED_ID
,

193 
	mQUOTA_NL_A_PAD
,

194 
	m__QUOTA_NL_A_MAX
,

196 
	#QUOTA_NL_A_MAX
 (
__QUOTA_NL_A_MAX
 - 1)

	)

	@/usr/include/linux/rseq.h

2 #i‚de‡
_LINUX_RSEQ_H


3 
	#_LINUX_RSEQ_H


	)

13 
	~<löux/ty≥s.h
>

14 
	~<asm/byã‹dî.h
>

16 
	er£q_˝u_id_°©e
 {

17 
	mRSEQ_CPU_ID_UNINITIALIZED
 = -1,

18 
	mRSEQ_CPU_ID_REGISTRATION_FAILED
 = -2,

21 
	er£q_Êags
 {

22 
	mRSEQ_FLAG_UNREGISTER
 = (1 << 0),

25 
	er£q_cs_Êags_bô
 {

26 
	mRSEQ_CS_FLAG_NO_RESTART_ON_PREEMPT_BIT
 = 0,

27 
	mRSEQ_CS_FLAG_NO_RESTART_ON_SIGNAL_BIT
 = 1,

28 
	mRSEQ_CS_FLAG_NO_RESTART_ON_MIGRATE_BIT
 = 2,

31 
	er£q_cs_Êags
 {

32 
	mRSEQ_CS_FLAG_NO_RESTART_ON_PREEMPT
 =

33 (1U << 
RSEQ_CS_FLAG_NO_RESTART_ON_PREEMPT_BIT
),

34 
	mRSEQ_CS_FLAG_NO_RESTART_ON_SIGNAL
 =

35 (1U << 
RSEQ_CS_FLAG_NO_RESTART_ON_SIGNAL_BIT
),

36 
	mRSEQ_CS_FLAG_NO_RESTART_ON_MIGRATE
 =

37 (1U << 
RSEQ_CS_FLAG_NO_RESTART_ON_MIGRATE_BIT
),

45 
	sr£q_cs
 {

47 
__u32
 
	mvîsi⁄
;

49 
__u32
 
	mÊags
;

50 
__u64
 
	m°¨t_ù
;

52 
__u64
 
	mpo°_commô_off£t
;

53 
__u64
 
	mab‹t_ù
;

54 } 
__©åibuã__
((
Æig√d
(4 * (
__u64
))));

62 
	sr£q
 {

75 
__u32
 
	m˝u_id_°¨t
;

90 
__u32
 
	m˝u_id
;

112 
__u64
 
	mr£q_cs
;

132 
__u32
 
	mÊags
;

133 } 
__©åibuã__
((
Æig√d
(4 * (
__u64
))));

	@/usr/include/linux/screen_info.h

2 #i‚de‡
_SCREEN_INFO_H


3 
	#_SCREEN_INFO_H


	)

5 
	~<löux/ty≥s.h
>

11 
	ss¸ìn_öfo
 {

12 
__u8
 
	m‹ig_x
;

13 
__u8
 
	m‹ig_y
;

14 
__u16
 
	mext_mem_k
;

15 
__u16
 
	m‹ig_video_∑ge
;

16 
__u8
 
	m‹ig_video_mode
;

17 
__u8
 
	m‹ig_video_cﬁs
;

18 
__u8
 
	mÊags
;

19 
__u8
 
	munu£d2
;

20 
__u16
 
	m‹ig_video_ega_bx
;

21 
__u16
 
	munu£d3
;

22 
__u8
 
	m‹ig_video_löes
;

23 
__u8
 
	m‹ig_video_isVGA
;

24 
__u16
 
	m‹ig_video_poöts
;

27 
__u16
 
	mlfb_width
;

28 
__u16
 
	mlfb_height
;

29 
__u16
 
	mlfb_dïth
;

30 
__u32
 
	mlfb_ba£
;

31 
__u32
 
	mlfb_size
;

32 
__u16
 
	m˛_magic
, 
	m˛_off£t
;

33 
__u16
 
	mlfb_löñígth
;

34 
__u8
 
	mªd_size
;

35 
__u8
 
	mªd_pos
;

36 
__u8
 
	mgªí_size
;

37 
__u8
 
	mgªí_pos
;

38 
__u8
 
	mblue_size
;

39 
__u8
 
	mblue_pos
;

40 
__u8
 
	mrsvd_size
;

41 
__u8
 
	mrsvd_pos
;

42 
__u16
 
	mveßpm_£g
;

43 
__u16
 
	mveßpm_off
;

44 
__u16
 
	m∑ges
;

45 
__u16
 
	mveß_©åibuãs
;

46 
__u32
 
	mˇ∑bûôõs
;

47 
__u32
 
	mext_lfb_ba£
;

48 
__u8
 
	m_ª£rved
[2];

49 } 
__©åibuã__
((
∑cked
));

51 
	#VIDEO_TYPE_MDA
 0x10

	)

52 
	#VIDEO_TYPE_CGA
 0x11

	)

53 
	#VIDEO_TYPE_EGAM
 0x20

	)

54 
	#VIDEO_TYPE_EGAC
 0x21

	)

55 
	#VIDEO_TYPE_VGAC
 0x22

	)

56 
	#VIDEO_TYPE_VLFB
 0x23

	)

58 
	#VIDEO_TYPE_PICA_S3
 0x30

	)

59 
	#VIDEO_TYPE_MIPS_G364
 0x31

	)

60 
	#VIDEO_TYPE_SGI
 0x33

	)

62 
	#VIDEO_TYPE_TGAC
 0x40

	)

64 
	#VIDEO_TYPE_SUN
 0x50

	)

65 
	#VIDEO_TYPE_SUNPCI
 0x51

	)

67 
	#VIDEO_TYPE_PMAC
 0x60

	)

69 
	#VIDEO_TYPE_EFI
 0x70

	)

71 
	#VIDEO_FLAGS_NOCURSOR
 (1 << 0Ë

	)

73 
	#VIDEO_CAPABILITY_SKIP_QUIRKS
 (1 << 0)

	)

74 
	#VIDEO_CAPABILITY_64BIT_BASE
 (1 << 1Ë

	)

	@/usr/include/linux/soundcard.h

24 #i‚de‡
SOUNDCARD_H


25 
	#SOUNDCARD_H


	)

36 
	#SOUND_VERSION
 0x030802

	)

37 
	#OPEN_SOUND_SYSTEM


	)

40 
	~<löux/io˘l.h
>

43 
	~<ídün.h
>

49 
	#SNDCARD_ADLIB
 1

	)

50 
	#SNDCARD_SB
 2

	)

51 
	#SNDCARD_PAS
 3

	)

52 
	#SNDCARD_GUS
 4

	)

53 
	#SNDCARD_MPU401
 5

	)

54 
	#SNDCARD_SB16
 6

	)

55 
	#SNDCARD_SB16MIDI
 7

	)

56 
	#SNDCARD_UART6850
 8

	)

57 
	#SNDCARD_GUS16
 9

	)

58 
	#SNDCARD_MSS
 10

	)

59 
	#SNDCARD_PSS
 11

	)

60 
	#SNDCARD_SSCAPE
 12

	)

61 
	#SNDCARD_PSS_MPU
 13

	)

62 
	#SNDCARD_PSS_MSS
 14

	)

63 
	#SNDCARD_SSCAPE_MSS
 15

	)

64 
	#SNDCARD_TRXPRO
 16

	)

65 
	#SNDCARD_TRXPRO_SB
 17

	)

66 
	#SNDCARD_TRXPRO_MPU
 18

	)

67 
	#SNDCARD_MAD16
 19

	)

68 
	#SNDCARD_MAD16_MPU
 20

	)

69 
	#SNDCARD_CS4232
 21

	)

70 
	#SNDCARD_CS4232_MPU
 22

	)

71 
	#SNDCARD_MAUI
 23

	)

72 
	#SNDCARD_PSEUDO_MSS
 24

	)

73 
	#SNDCARD_GUSPNP
 25

	)

74 
	#SNDCARD_UART401
 26

	)

81 #i‚de‡
_SIOWR


82 #i‡
deföed
(
_IOWR
Ë&& (deföed(
_AIX
Ë|| (!deföed(
sun
Ë&& !deföed(
•¨c
Ë&& !deföed(
__•¨c__
Ë&& !deföed(
__INCio˘lh
Ë&& !deföed(
__Lynx__
)))

84 
	#SIOCPARM_MASK
 
IOCPARM_MASK


	)

85 
	#SIOC_VOID
 
IOC_VOID


	)

86 
	#SIOC_OUT
 
IOC_OUT


	)

87 
	#SIOC_IN
 
IOC_IN


	)

88 
	#SIOC_INOUT
 
IOC_INOUT


	)

89 
	#_SIOC_SIZE
 
_IOC_SIZE


	)

90 
	#_SIOC_DIR
 
_IOC_DIR


	)

91 
	#_SIOC_NONE
 
_IOC_NONE


	)

92 
	#_SIOC_READ
 
_IOC_READ


	)

93 
	#_SIOC_WRITE
 
_IOC_WRITE


	)

94 
	#_SIO
 
_IO


	)

95 
	#_SIOR
 
_IOR


	)

96 
	#_SIOW
 
_IOW


	)

97 
	#_SIOWR
 
_IOWR


	)

107 
	#SIOCPARM_MASK
 0x1ff‡

	)

108 
	#SIOC_VOID
 0x00000000

	)

109 
	#SIOC_OUT
 0x20000000

	)

110 
	#SIOC_IN
 0x40000000

	)

111 
	#SIOC_INOUT
 (
SIOC_IN
|
SIOC_OUT
)

	)

113 
	#_SIO
(
x
,
y
Ë(()(
SIOC_VOID
|(x<<8)|y))

	)

114 
	#_SIOR
(
x
,
y
,
t
Ë(()(
SIOC_OUT
|((—)&
SIOCPARM_MASK
)<<16)|(x<<8)|y))

	)

115 
	#_SIOW
(
x
,
y
,
t
Ë(()(
SIOC_IN
|((—)&
SIOCPARM_MASK
)<<16)|(x<<8)|y))

	)

117 
	#_SIOWR
(
x
,
y
,
t
Ë(()(
SIOC_INOUT
|((—)&
SIOCPARM_MASK
)<<16)|(x<<8)|y))

	)

118 
	#_SIOC_SIZE
(
x
Ë((x>>16)&
SIOCPARM_MASK
)

	)

119 
	#_SIOC_DIR
(
x
Ë(x & 0xf0000000)

	)

120 
	#_SIOC_NONE
 
SIOC_VOID


	)

121 
	#_SIOC_READ
 
SIOC_OUT


	)

122 
	#_SIOC_WRITE
 
SIOC_IN


	)

126 
	#SNDCTL_SEQ_RESET
 
	`_SIO
 ('Q', 0)

	)

127 
	#SNDCTL_SEQ_SYNC
 
	`_SIO
 ('Q', 1)

	)

128 
	#SNDCTL_SYNTH_INFO
 
	`_SIOWR
('Q', 2, 
sy¡h_öfo
)

	)

129 
	#SNDCTL_SEQ_CTRLRATE
 
	`_SIOWR
('Q', 3, Ë

	)

130 
	#SNDCTL_SEQ_GETOUTCOUNT
 
	`_SIOR
 ('Q', 4, )

	)

131 
	#SNDCTL_SEQ_GETINCOUNT
 
	`_SIOR
 ('Q', 5, )

	)

132 
	#SNDCTL_SEQ_PERCMODE
 
	`_SIOW
 ('Q', 6, )

	)

133 
	#SNDCTL_FM_LOAD_INSTR
 
	`_SIOW
 ('Q', 7, 
sbi_ö°rumít
Ë

	)

134 
	#SNDCTL_SEQ_TESTMIDI
 
	`_SIOW
 ('Q', 8, )

	)

135 
	#SNDCTL_SEQ_RESETSAMPLES
 
	`_SIOW
 ('Q', 9, )

	)

136 
	#SNDCTL_SEQ_NRSYNTHS
 
	`_SIOR
 ('Q',10, )

	)

137 
	#SNDCTL_SEQ_NRMIDIS
 
	`_SIOR
 ('Q',11, )

	)

138 
	#SNDCTL_MIDI_INFO
 
	`_SIOWR
('Q',12, 
midi_öfo
)

	)

139 
	#SNDCTL_SEQ_THRESHOLD
 
	`_SIOW
 ('Q',13, )

	)

140 
	#SNDCTL_SYNTH_MEMAVL
 
	`_SIOWR
('Q',14, Ë

	)

141 
	#SNDCTL_FM_4OP_ENABLE
 
	`_SIOW
 ('Q',15, Ë

	)

142 
	#SNDCTL_SEQ_PANIC
 
	`_SIO
 ('Q',17)

	)

143 
	#SNDCTL_SEQ_OUTOFBAND
 
	`_SIOW
 ('Q',18, 
£q_evít_ªc
)

	)

144 
	#SNDCTL_SEQ_GETTIME
 
	`_SIOR
 ('Q',19, )

	)

145 
	#SNDCTL_SYNTH_ID
 
	`_SIOWR
('Q',20, 
sy¡h_öfo
)

	)

146 
	#SNDCTL_SYNTH_CONTROL
 
	`_SIOWR
('Q',21, 
sy¡h_c⁄åﬁ
)

	)

147 
	#SNDCTL_SYNTH_REMOVESAMPLE
 
	`_SIOWR
('Q',22, 
ªmove_ßm∂e
)

	)

149 
	ssy¡h_c⁄åﬁ


151 
	mdevno
;

152 
	md©a
[4000];

153 }
	tsy¡h_c⁄åﬁ
;

155 
	sªmove_ßm∂e


157 
	mdevno
;

158 
	mb™kno
;

159 
	mö°∫o
;

160 } 
	tªmove_ßm∂e
;

162 
	s£q_evít_ªc
 {

163 
	m¨r
[8];

164 } 
	t£q_evít_ªc
;

166 
	#SNDCTL_TMR_TIMEBASE
 
	`_SIOWR
('T', 1, )

	)

167 
	#SNDCTL_TMR_START
 
	`_SIO
 ('T', 2)

	)

168 
	#SNDCTL_TMR_STOP
 
	`_SIO
 ('T', 3)

	)

169 
	#SNDCTL_TMR_CONTINUE
 
	`_SIO
 ('T', 4)

	)

170 
	#SNDCTL_TMR_TEMPO
 
	`_SIOWR
('T', 5, )

	)

171 
	#SNDCTL_TMR_SOURCE
 
	`_SIOWR
('T', 6, )

	)

172 
	#TMR_INTERNAL
 0x00000001

	)

173 
	#TMR_EXTERNAL
 0x00000002

	)

174 
	#TMR_MODE_MIDI
 0x00000010

	)

175 
	#TMR_MODE_FSK
 0x00000020

	)

176 
	#TMR_MODE_CLS
 0x00000040

	)

177 
	#TMR_MODE_SMPTE
 0x00000080

	)

178 
	#SNDCTL_TMR_METRONOME
 
	`_SIOW
 ('T', 7, )

	)

179 
	#SNDCTL_TMR_SELECT
 
	`_SIOW
 ('T', 8, )

	)

185 
	#_LINUX_PATCHKEY_H_INDIRECT


	)

186 
	~<löux/∑tchkey.h
>

187 #unde‡
_LINUX_PATCHKEY_H_INDIRECT


189 #i‡
deföed
(
__BYTE_ORDER
)

190 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


191 
	#AFMT_S16_NE
 
AFMT_S16_BE


	)

192 #ñi‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


193 
	#AFMT_S16_NE
 
AFMT_S16_LE


	)

209 
	s∑tch_öfo
 {

210 
	mkey
;

211 
	#WAVE_PATCH
 
	`_PATCHKEY
(0x04)

	)

212 
	#GUS_PATCH
 
WAVE_PATCH


	)

213 
	#WAVEFRONT_PATCH
 
	`_PATCHKEY
(0x06)

	)

215 
	mdevi˚_no
;

216 
	mö°r_no
;

218 
	mmode
;

223 
	#WAVE_16_BITS
 0x01

	)

224 
	#WAVE_UNSIGNED
 0x02

	)

225 
	#WAVE_LOOPING
 0x04

	)

226 
	#WAVE_BIDIR_LOOP
 0x08

	)

227 
	#WAVE_LOOP_BACK
 0x10

	)

228 
	#WAVE_SUSTAIN_ON
 0x20

	)

229 
	#WAVE_ENVELOPES
 0x40

	)

230 
	#WAVE_FAST_RELEASE
 0x80

	)

233 
	#WAVE_VIBRATO
 0x00010000

	)

234 
	#WAVE_TREMOLO
 0x00020000

	)

235 
	#WAVE_SCALE
 0x00040000

	)

236 
	#WAVE_FRACTIONS
 0x00080000

	)

238 
	#WAVE_ROM
 0x40000000

	)

239 
	#WAVE_MULAW
 0x20000000

	)

242 
	mÀn
;

243 
	mlo›_°¨t
, 
	mlo›_íd
;

261 
	mba£_‰eq
;

262 
	mba£_nŸe
;

263 
	mhigh_nŸe
;

264 
	mlow_nŸe
;

265 
	m∑¬ög
;

266 
	mdëunög
;

271 
	mív_øã
[ 6 ];

272 
	mív_off£t
[ 6 ];

280 
	måemﬁo_swìp
;

281 
	måemﬁo_øã
;

282 
	måemﬁo_dïth
;

284 
	mvibøto_swìp
;

285 
	mvibøto_øã
;

286 
	mvibøto_dïth
;

288 
	msˇÀ_‰equícy
;

289 
	msˇÀ_Á˘‹
;

291 
	mvﬁume
;

292 
	m‰a˘i⁄s
;

293 
	mª£rved1
;

294 
	m•¨e
[2];

295 
	md©a
[1];

298 
	ssy£x_öfo
 {

299 
	mkey
;

300 
	#SYSEX_PATCH
 
	`_PATCHKEY
(0x05)

	)

301 
	#MAUI_PATCH
 
	`_PATCHKEY
(0x06)

	)

302 
	mdevi˚_no
;

303 
	mÀn
;

304 
	md©a
[1];

327 
	#SEQ_NOTEOFF
 0

	)

328 
	#SEQ_FMNOTEOFF
 
SEQ_NOTEOFF


	)

329 
	#SEQ_NOTEON
 1

	)

330 
	#SEQ_FMNOTEON
 
SEQ_NOTEON


	)

331 
	#SEQ_WAIT
 
TMR_WAIT_ABS


	)

332 
	#SEQ_PGMCHANGE
 3

	)

333 
	#SEQ_FMPGMCHANGE
 
SEQ_PGMCHANGE


	)

334 
	#SEQ_SYNCTIMER
 
TMR_START


	)

335 
	#SEQ_MIDIPUTC
 5

	)

336 
	#SEQ_DRUMON
 6

	)

337 
	#SEQ_DRUMOFF
 7

	)

338 
	#SEQ_ECHO
 
TMR_ECHO


	)

339 
	#SEQ_AFTERTOUCH
 9

	)

340 
	#SEQ_CONTROLLER
 10

	)

354 
	#CTL_BANK_SELECT
 0x00

	)

355 
	#CTL_MODWHEEL
 0x01

	)

356 
	#CTL_BREATH
 0x02

	)

358 
	#CTL_FOOT
 0x04

	)

359 
	#CTL_PORTAMENTO_TIME
 0x05

	)

360 
	#CTL_DATA_ENTRY
 0x06

	)

361 
	#CTL_MAIN_VOLUME
 0x07

	)

362 
	#CTL_BALANCE
 0x08

	)

364 
	#CTL_PAN
 0x0a

	)

365 
	#CTL_EXPRESSION
 0x0b

	)

370 
	#CTL_GENERAL_PURPOSE1
 0x10

	)

371 
	#CTL_GENERAL_PURPOSE2
 0x11

	)

372 
	#CTL_GENERAL_PURPOSE3
 0x12

	)

373 
	#CTL_GENERAL_PURPOSE4
 0x13

	)

383 
	#CTL_DAMPER_PEDAL
 0x40

	)

384 
	#CTL_SUSTAIN
 0x40

	)

385 
	#CTL_HOLD
 0x40

	)

386 
	#CTL_PORTAMENTO
 0x41

	)

387 
	#CTL_SOSTENUTO
 0x42

	)

388 
	#CTL_SOFT_PEDAL
 0x43

	)

390 
	#CTL_HOLD2
 0x45

	)

393 
	#CTL_GENERAL_PURPOSE5
 0x50

	)

394 
	#CTL_GENERAL_PURPOSE6
 0x51

	)

395 
	#CTL_GENERAL_PURPOSE7
 0x52

	)

396 
	#CTL_GENERAL_PURPOSE8
 0x53

	)

398 
	#CTL_EXT_EFF_DEPTH
 0x5b

	)

399 
	#CTL_TREMOLO_DEPTH
 0x5c

	)

400 
	#CTL_CHORUS_DEPTH
 0x5d

	)

401 
	#CTL_DETUNE_DEPTH
 0x5e

	)

402 
	#CTL_CELESTE_DEPTH
 0x5ê

	)

403 
	#CTL_PHASER_DEPTH
 0x5f

	)

404 
	#CTL_DATA_INCREMENT
 0x60

	)

405 
	#CTL_DATA_DECREMENT
 0x61

	)

406 
	#CTL_NONREG_PARM_NUM_LSB
 0x62

	)

407 
	#CTL_NONREG_PARM_NUM_MSB
 0x63

	)

408 
	#CTL_REGIST_PARM_NUM_LSB
 0x64

	)

409 
	#CTL_REGIST_PARM_NUM_MSB
 0x65

	)

414 
	#CTRL_PITCH_BENDER
 255

	)

415 
	#CTRL_PITCH_BENDER_RANGE
 254

	)

416 
	#CTRL_EXPRESSION
 253

	)

417 
	#CTRL_MAIN_VOLUME
 252

	)

418 
	#SEQ_BALANCE
 11

	)

419 
	#SEQ_VOLMODE
 12

	)

425 
	#VOL_METHOD_ADAGIO
 1

	)

426 
	#VOL_METHOD_LINEAR
 2

	)

437 
	#SEQ_FULLSIZE
 0xfd

	)

458 
	#SEQ_PRIVATE
 0x„

	)

459 
	#SEQ_EXTENDED
 0xf‡

	)

465 
	tsbi_ö°r_d©a
[32];

467 
	ssbi_ö°rumít
 {

468 
	mkey
;

469 
	#FM_PATCH
 
	`_PATCHKEY
(0x01)

	)

470 
	#OPL3_PATCH
 
	`_PATCHKEY
(0x03)

	)

471 
	mdevi˚
;

472 
	mch™√l
;

473 
sbi_ö°r_d©a
 
	m›î©‹s
;

476 
	ssy¡h_öfo
 {

477 
	m«me
[30];

478 
	mdevi˚
;

479 
	msy¡h_ty≥
;

480 
	#SYNTH_TYPE_FM
 0

	)

481 
	#SYNTH_TYPE_SAMPLE
 1

	)

482 
	#SYNTH_TYPE_MIDI
 2

	)

484 
	msy¡h_subty≥
;

485 
	#FM_TYPE_ADLIB
 0x00

	)

486 
	#FM_TYPE_OPL3
 0x01

	)

487 
	#MIDI_TYPE_MPU401
 0x401

	)

489 
	#SAMPLE_TYPE_BASIC
 0x10

	)

490 
	#SAMPLE_TYPE_GUS
 
SAMPLE_TYPE_BASIC


	)

491 
	#SAMPLE_TYPE_WAVEFRONT
 0x11

	)

493 
	m≥rc_mode
;

494 
	mƒ_voi˚s
;

495 
	mƒ_drums
;

496 
	mö°r_b™k_size
;

497 
	mˇ∑bûôõs
;

498 
	#SYNTH_CAP_PERCMODE
 0x00000001

	)

499 
	#SYNTH_CAP_OPL3
 0x00000002

	)

500 
	#SYNTH_CAP_INPUT
 0x00000004

	)

501 
	mdummõs
[19];

504 
	ssound_timî_öfo
 {

505 
	m«me
[32];

506 
	mˇps
;

509 
	#MIDI_CAP_MPU401
 1

	)

511 
	smidi_öfo
 {

512 
	m«me
[30];

513 
	mdevi˚
;

514 
	mˇ∑bûôõs
;

515 
	mdev_ty≥
;

516 
	mdummõs
[18];

523 
	mcmd
;

524 
	mƒ_¨gs
, 
	mƒ_ªtu∫s
;

525 
	md©a
[30];

526 } 
	tmpu_comm™d_ªc
;

528 
	#SNDCTL_MIDI_PRETIME
 
	`_SIOWR
('m', 0, )

	)

529 
	#SNDCTL_MIDI_MPUMODE
 
	`_SIOWR
('m', 1, )

	)

530 
	#SNDCTL_MIDI_MPUCMD
 
	`_SIOWR
('m', 2, 
mpu_comm™d_ªc
)

	)

536 
	#SNDCTL_DSP_RESET
 
	`_SIO
 ('P', 0)

	)

537 
	#SNDCTL_DSP_SYNC
 
	`_SIO
 ('P', 1)

	)

538 
	#SNDCTL_DSP_SPEED
 
	`_SIOWR
('P', 2, )

	)

539 
	#SNDCTL_DSP_STEREO
 
	`_SIOWR
('P', 3, )

	)

540 
	#SNDCTL_DSP_GETBLKSIZE
 
	`_SIOWR
('P', 4, )

	)

541 
	#SNDCTL_DSP_SAMPLESIZE
 
SNDCTL_DSP_SETFMT


	)

542 
	#SNDCTL_DSP_CHANNELS
 
	`_SIOWR
('P', 6, )

	)

543 
	#SOUND_PCM_WRITE_CHANNELS
 
SNDCTL_DSP_CHANNELS


	)

544 
	#SOUND_PCM_WRITE_FILTER
 
	`_SIOWR
('P', 7, )

	)

545 
	#SNDCTL_DSP_POST
 
	`_SIO
 ('P', 8)

	)

546 
	#SNDCTL_DSP_SUBDIVIDE
 
	`_SIOWR
('P', 9, )

	)

547 
	#SNDCTL_DSP_SETFRAGMENT
 
	`_SIOWR
('P',10, )

	)

550 
	#SNDCTL_DSP_GETFMTS
 
	`_SIOR
 ('P',11, Ë

	)

551 
	#SNDCTL_DSP_SETFMT
 
	`_SIOWR
('P',5, Ë

	)

552 
	#AFMT_QUERY
 0x00000000

	)

553 
	#AFMT_MU_LAW
 0x00000001

	)

554 
	#AFMT_A_LAW
 0x00000002

	)

555 
	#AFMT_IMA_ADPCM
 0x00000004

	)

556 
	#AFMT_U8
 0x00000008

	)

557 
	#AFMT_S16_LE
 0x00000010

	)

558 
	#AFMT_S16_BE
 0x00000020

	)

559 
	#AFMT_S8
 0x00000040

	)

560 
	#AFMT_U16_LE
 0x00000080

	)

561 
	#AFMT_U16_BE
 0x00000100

	)

562 
	#AFMT_MPEG
 0x00000200

	)

563 
	#AFMT_AC3
 0x00000400

	)

568 
	saudio_buf_öfo
 {

569 
	m‰agmíts
;

570 
	m‰ag°ŸÆ
;

571 
	m‰agsize
;

573 
	mbyãs
;

575 } 
	taudio_buf_öfo
;

577 
	#SNDCTL_DSP_GETOSPACE
 
	`_SIOR
 ('P',12, 
audio_buf_öfo
)

	)

578 
	#SNDCTL_DSP_GETISPACE
 
	`_SIOR
 ('P',13, 
audio_buf_öfo
)

	)

579 
	#SNDCTL_DSP_NONBLOCK
 
	`_SIO
 ('P',14)

	)

580 
	#SNDCTL_DSP_GETCAPS
 
	`_SIOR
 ('P',15, )

	)

581 
	#DSP_CAP_REVISION
 0x000000f‡

	)

582 
	#DSP_CAP_DUPLEX
 0x00000100

	)

583 
	#DSP_CAP_REALTIME
 0x00000200

	)

584 
	#DSP_CAP_BATCH
 0x00000400

	)

588 
	#DSP_CAP_COPROC
 0x00000800

	)

591 
	#DSP_CAP_TRIGGER
 0x00001000

	)

592 
	#DSP_CAP_MMAP
 0x00002000

	)

593 
	#DSP_CAP_MULTI
 0x00004000

	)

594 
	#DSP_CAP_BIND
 0x00008000

	)

597 
	#SNDCTL_DSP_GETTRIGGER
 
	`_SIOR
 ('P',16, )

	)

598 
	#SNDCTL_DSP_SETTRIGGER
 
	`_SIOW
 ('P',16, )

	)

599 
	#PCM_ENABLE_INPUT
 0x00000001

	)

600 
	#PCM_ENABLE_OUTPUT
 0x00000002

	)

602 
	scou¡_öfo
 {

603 
	mbyãs
;

604 
	mblocks
;

605 
	m±r
;

606 } 
	tcou¡_öfo
;

608 
	#SNDCTL_DSP_GETIPTR
 
	`_SIOR
 ('P',17, 
cou¡_öfo
)

	)

609 
	#SNDCTL_DSP_GETOPTR
 
	`_SIOR
 ('P',18, 
cou¡_öfo
)

	)

611 
	sbuffmem_desc
 {

612 *
	mbuf„r
;

613 
	msize
;

614 } 
	tbuffmem_desc
;

615 
	#SNDCTL_DSP_MAPINBUF
 
	`_SIOR
 ('P', 19, 
buffmem_desc
)

	)

616 
	#SNDCTL_DSP_MAPOUTBUF
 
	`_SIOR
 ('P', 20, 
buffmem_desc
)

	)

617 
	#SNDCTL_DSP_SETSYNCRO
 
	`_SIO
 ('P', 21)

	)

618 
	#SNDCTL_DSP_SETDUPLEX
 
	`_SIO
 ('P', 22)

	)

619 
	#SNDCTL_DSP_GETODELAY
 
	`_SIOR
 ('P', 23, )

	)

621 
	#SNDCTL_DSP_GETCHANNELMASK
 
	`_SIOWR
('P', 64, )

	)

622 
	#SNDCTL_DSP_BIND_CHANNEL
 
	`_SIOWR
('P', 65, )

	)

623 
	#DSP_BIND_QUERY
 0x00000000

	)

624 
	#DSP_BIND_FRONT
 0x00000001

	)

625 
	#DSP_BIND_SURR
 0x00000002

	)

626 
	#DSP_BIND_CENTER_LFE
 0x00000004

	)

627 
	#DSP_BIND_HANDSET
 0x00000008

	)

628 
	#DSP_BIND_MIC
 0x00000010

	)

629 
	#DSP_BIND_MODEM1
 0x00000020

	)

630 
	#DSP_BIND_MODEM2
 0x00000040

	)

631 
	#DSP_BIND_I2S
 0x00000080

	)

632 
	#DSP_BIND_SPDIF
 0x00000100

	)

634 
	#SNDCTL_DSP_SETSPDIF
 
	`_SIOW
 ('P', 66, )

	)

635 
	#SNDCTL_DSP_GETSPDIF
 
	`_SIOR
 ('P', 67, )

	)

636 
	#SPDIF_PRO
 0x0001

	)

637 
	#SPDIF_N_AUD
 0x0002

	)

638 
	#SPDIF_COPY
 0x0004

	)

639 
	#SPDIF_PRE
 0x0008

	)

640 
	#SPDIF_CC
 0x07f0

	)

641 
	#SPDIF_L
 0x0800

	)

642 
	#SPDIF_DRS
 0x4000

	)

643 
	#SPDIF_V
 0x8000

	)

656 
	#SNDCTL_DSP_PROFILE
 
	`_SIOW
 ('P', 23, )

	)

657 
	#APF_NORMAL
 0

	)

658 
	#APF_NETWORK
 1

	)

659 
	#APF_CPUINTENS
 2

	)

661 
	#SOUND_PCM_READ_RATE
 
	`_SIOR
 ('P', 2, )

	)

662 
	#SOUND_PCM_READ_CHANNELS
 
	`_SIOR
 ('P', 6, )

	)

663 
	#SOUND_PCM_READ_BITS
 
	`_SIOR
 ('P', 5, )

	)

664 
	#SOUND_PCM_READ_FILTER
 
	`_SIOR
 ('P', 7, )

	)

667 
	#SOUND_PCM_WRITE_BITS
 
SNDCTL_DSP_SETFMT


	)

668 
	#SOUND_PCM_WRITE_RATE
 
SNDCTL_DSP_SPEED


	)

669 
	#SOUND_PCM_POST
 
SNDCTL_DSP_POST


	)

670 
	#SOUND_PCM_RESET
 
SNDCTL_DSP_RESET


	)

671 
	#SOUND_PCM_SYNC
 
SNDCTL_DSP_SYNC


	)

672 
	#SOUND_PCM_SUBDIVIDE
 
SNDCTL_DSP_SUBDIVIDE


	)

673 
	#SOUND_PCM_SETFRAGMENT
 
SNDCTL_DSP_SETFRAGMENT


	)

674 
	#SOUND_PCM_GETFMTS
 
SNDCTL_DSP_GETFMTS


	)

675 
	#SOUND_PCM_SETFMT
 
SNDCTL_DSP_SETFMT


	)

676 
	#SOUND_PCM_GETOSPACE
 
SNDCTL_DSP_GETOSPACE


	)

677 
	#SOUND_PCM_GETISPACE
 
SNDCTL_DSP_GETISPACE


	)

678 
	#SOUND_PCM_NONBLOCK
 
SNDCTL_DSP_NONBLOCK


	)

679 
	#SOUND_PCM_GETCAPS
 
SNDCTL_DSP_GETCAPS


	)

680 
	#SOUND_PCM_GETTRIGGER
 
SNDCTL_DSP_GETTRIGGER


	)

681 
	#SOUND_PCM_SETTRIGGER
 
SNDCTL_DSP_SETTRIGGER


	)

682 
	#SOUND_PCM_SETSYNCRO
 
SNDCTL_DSP_SETSYNCRO


	)

683 
	#SOUND_PCM_GETIPTR
 
SNDCTL_DSP_GETIPTR


	)

684 
	#SOUND_PCM_GETOPTR
 
SNDCTL_DSP_GETOPTR


	)

685 
	#SOUND_PCM_MAPINBUF
 
SNDCTL_DSP_MAPINBUF


	)

686 
	#SOUND_PCM_MAPOUTBUF
 
SNDCTL_DSP_MAPOUTBUF


	)

693 
	sc›r_buf„r
 {

694 
	mcomm™d
;

695 
	mÊags
;

696 
	#CPF_NONE
 0x0000

	)

697 
	#CPF_FIRST
 0x0001

	)

698 
	#CPF_LAST
 0x0002

	)

699 
	mÀn
;

700 
	moffs
;

702 
	md©a
[4000];

703 } 
	tc›r_buf„r
;

705 
	sc›r_debug_buf
 {

706 
	mcomm™d
;

707 
	m∑rm1
;

708 
	m∑rm2
;

709 
	mÊags
;

710 
	mÀn
;

711 } 
	tc›r_debug_buf
;

713 
	sc›r_msg
 {

714 
	mÀn
;

715 
	md©a
[4000];

716 } 
	tc›r_msg
;

718 
	#SNDCTL_COPR_RESET
 
	`_SIO
 ('C', 0)

	)

719 
	#SNDCTL_COPR_LOAD
 
	`_SIOWR
('C', 1, 
c›r_buf„r
)

	)

720 
	#SNDCTL_COPR_RDATA
 
	`_SIOWR
('C', 2, 
c›r_debug_buf
)

	)

721 
	#SNDCTL_COPR_RCODE
 
	`_SIOWR
('C', 3, 
c›r_debug_buf
)

	)

722 
	#SNDCTL_COPR_WDATA
 
	`_SIOW
 ('C', 4, 
c›r_debug_buf
)

	)

723 
	#SNDCTL_COPR_WCODE
 
	`_SIOW
 ('C', 5, 
c›r_debug_buf
)

	)

724 
	#SNDCTL_COPR_RUN
 
	`_SIOWR
('C', 6, 
c›r_debug_buf
)

	)

725 
	#SNDCTL_COPR_HALT
 
	`_SIOWR
('C', 7, 
c›r_debug_buf
)

	)

726 
	#SNDCTL_COPR_SENDMSG
 
	`_SIOWR
('C', 8, 
c›r_msg
)

	)

727 
	#SNDCTL_COPR_RCVMSG
 
	`_SIOR
 ('C', 9, 
c›r_msg
)

	)

742 
	#SOUND_MIXER_NRDEVICES
 25

	)

743 
	#SOUND_MIXER_VOLUME
 0

	)

744 
	#SOUND_MIXER_BASS
 1

	)

745 
	#SOUND_MIXER_TREBLE
 2

	)

746 
	#SOUND_MIXER_SYNTH
 3

	)

747 
	#SOUND_MIXER_PCM
 4

	)

748 
	#SOUND_MIXER_SPEAKER
 5

	)

749 
	#SOUND_MIXER_LINE
 6

	)

750 
	#SOUND_MIXER_MIC
 7

	)

751 
	#SOUND_MIXER_CD
 8

	)

752 
	#SOUND_MIXER_IMIX
 9

	)

753 
	#SOUND_MIXER_ALTPCM
 10

	)

754 
	#SOUND_MIXER_RECLEV
 11

	)

755 
	#SOUND_MIXER_IGAIN
 12

	)

756 
	#SOUND_MIXER_OGAIN
 13

	)

763 
	#SOUND_MIXER_LINE1
 14

	)

764 
	#SOUND_MIXER_LINE2
 15

	)

765 
	#SOUND_MIXER_LINE3
 16

	)

766 
	#SOUND_MIXER_DIGITAL1
 17

	)

767 
	#SOUND_MIXER_DIGITAL2
 18

	)

768 
	#SOUND_MIXER_DIGITAL3
 19

	)

769 
	#SOUND_MIXER_PHONEIN
 20

	)

770 
	#SOUND_MIXER_PHONEOUT
 21

	)

771 
	#SOUND_MIXER_VIDEO
 22

	)

772 
	#SOUND_MIXER_RADIO
 23

	)

773 
	#SOUND_MIXER_MONITOR
 24

	)

777 
	#SOUND_ONOFF_MIN
 28

	)

778 
	#SOUND_ONOFF_MAX
 30

	)

781 
	#SOUND_MIXER_NONE
 31

	)

787 
	#SOUND_MIXER_ENHANCE
 
SOUND_MIXER_NONE


	)

788 
	#SOUND_MIXER_MUTE
 
SOUND_MIXER_NONE


	)

789 
	#SOUND_MIXER_LOUD
 
SOUND_MIXER_NONE


	)

792 
	#SOUND_DEVICE_LABELS
 {"Vol ", "Bass ", "Trebl", "Synth", "Pcm ", "Spkr ", "Line ", \

795 "Ph⁄eIn", "Ph⁄eOut", "Video", "Radio", "M⁄ô‹"}

	)

797 
	#SOUND_DEVICE_NAMES
 {"vol", "bass", "treble", "synth", "pcm", "speaker", "line", \

800 "phö", "phout", "video", "ødio", "m⁄ô‹"}

	)

804 
	#SOUND_MIXER_RECSRC
 0xf‡

	)

805 
	#SOUND_MIXER_DEVMASK
 0x„

	)

806 
	#SOUND_MIXER_RECMASK
 0xfd

	)

807 
	#SOUND_MIXER_CAPS
 0xfc

	)

808 
	#SOUND_CAP_EXCL_INPUT
 0x00000001

	)

809 
	#SOUND_MIXER_STEREODEVS
 0xfb

	)

810 
	#SOUND_MIXER_OUTSRC
 0xÁ

	)

811 
	#SOUND_MIXER_OUTMASK
 0xf9

	)

815 
	#SOUND_MASK_VOLUME
 (1 << 
SOUND_MIXER_VOLUME
)

	)

816 
	#SOUND_MASK_BASS
 (1 << 
SOUND_MIXER_BASS
)

	)

817 
	#SOUND_MASK_TREBLE
 (1 << 
SOUND_MIXER_TREBLE
)

	)

818 
	#SOUND_MASK_SYNTH
 (1 << 
SOUND_MIXER_SYNTH
)

	)

819 
	#SOUND_MASK_PCM
 (1 << 
SOUND_MIXER_PCM
)

	)

820 
	#SOUND_MASK_SPEAKER
 (1 << 
SOUND_MIXER_SPEAKER
)

	)

821 
	#SOUND_MASK_LINE
 (1 << 
SOUND_MIXER_LINE
)

	)

822 
	#SOUND_MASK_MIC
 (1 << 
SOUND_MIXER_MIC
)

	)

823 
	#SOUND_MASK_CD
 (1 << 
SOUND_MIXER_CD
)

	)

824 
	#SOUND_MASK_IMIX
 (1 << 
SOUND_MIXER_IMIX
)

	)

825 
	#SOUND_MASK_ALTPCM
 (1 << 
SOUND_MIXER_ALTPCM
)

	)

826 
	#SOUND_MASK_RECLEV
 (1 << 
SOUND_MIXER_RECLEV
)

	)

827 
	#SOUND_MASK_IGAIN
 (1 << 
SOUND_MIXER_IGAIN
)

	)

828 
	#SOUND_MASK_OGAIN
 (1 << 
SOUND_MIXER_OGAIN
)

	)

829 
	#SOUND_MASK_LINE1
 (1 << 
SOUND_MIXER_LINE1
)

	)

830 
	#SOUND_MASK_LINE2
 (1 << 
SOUND_MIXER_LINE2
)

	)

831 
	#SOUND_MASK_LINE3
 (1 << 
SOUND_MIXER_LINE3
)

	)

832 
	#SOUND_MASK_DIGITAL1
 (1 << 
SOUND_MIXER_DIGITAL1
)

	)

833 
	#SOUND_MASK_DIGITAL2
 (1 << 
SOUND_MIXER_DIGITAL2
)

	)

834 
	#SOUND_MASK_DIGITAL3
 (1 << 
SOUND_MIXER_DIGITAL3
)

	)

835 
	#SOUND_MASK_PHONEIN
 (1 << 
SOUND_MIXER_PHONEIN
)

	)

836 
	#SOUND_MASK_PHONEOUT
 (1 << 
SOUND_MIXER_PHONEOUT
)

	)

837 
	#SOUND_MASK_RADIO
 (1 << 
SOUND_MIXER_RADIO
)

	)

838 
	#SOUND_MASK_VIDEO
 (1 << 
SOUND_MIXER_VIDEO
)

	)

839 
	#SOUND_MASK_MONITOR
 (1 << 
SOUND_MIXER_MONITOR
)

	)

842 
	#SOUND_MASK_MUTE
 (1 << 
SOUND_MIXER_MUTE
)

	)

843 
	#SOUND_MASK_ENHANCE
 (1 << 
SOUND_MIXER_ENHANCE
)

	)

844 
	#SOUND_MASK_LOUD
 (1 << 
SOUND_MIXER_LOUD
)

	)

846 
	#MIXER_READ
(
dev
Ë
	`_SIOR
('M', dev, )

	)

847 
	#SOUND_MIXER_READ_VOLUME
 
	`MIXER_READ
(
SOUND_MIXER_VOLUME
)

	)

848 
	#SOUND_MIXER_READ_BASS
 
	`MIXER_READ
(
SOUND_MIXER_BASS
)

	)

849 
	#SOUND_MIXER_READ_TREBLE
 
	`MIXER_READ
(
SOUND_MIXER_TREBLE
)

	)

850 
	#SOUND_MIXER_READ_SYNTH
 
	`MIXER_READ
(
SOUND_MIXER_SYNTH
)

	)

851 
	#SOUND_MIXER_READ_PCM
 
	`MIXER_READ
(
SOUND_MIXER_PCM
)

	)

852 
	#SOUND_MIXER_READ_SPEAKER
 
	`MIXER_READ
(
SOUND_MIXER_SPEAKER
)

	)

853 
	#SOUND_MIXER_READ_LINE
 
	`MIXER_READ
(
SOUND_MIXER_LINE
)

	)

854 
	#SOUND_MIXER_READ_MIC
 
	`MIXER_READ
(
SOUND_MIXER_MIC
)

	)

855 
	#SOUND_MIXER_READ_CD
 
	`MIXER_READ
(
SOUND_MIXER_CD
)

	)

856 
	#SOUND_MIXER_READ_IMIX
 
	`MIXER_READ
(
SOUND_MIXER_IMIX
)

	)

857 
	#SOUND_MIXER_READ_ALTPCM
 
	`MIXER_READ
(
SOUND_MIXER_ALTPCM
)

	)

858 
	#SOUND_MIXER_READ_RECLEV
 
	`MIXER_READ
(
SOUND_MIXER_RECLEV
)

	)

859 
	#SOUND_MIXER_READ_IGAIN
 
	`MIXER_READ
(
SOUND_MIXER_IGAIN
)

	)

860 
	#SOUND_MIXER_READ_OGAIN
 
	`MIXER_READ
(
SOUND_MIXER_OGAIN
)

	)

861 
	#SOUND_MIXER_READ_LINE1
 
	`MIXER_READ
(
SOUND_MIXER_LINE1
)

	)

862 
	#SOUND_MIXER_READ_LINE2
 
	`MIXER_READ
(
SOUND_MIXER_LINE2
)

	)

863 
	#SOUND_MIXER_READ_LINE3
 
	`MIXER_READ
(
SOUND_MIXER_LINE3
)

	)

866 
	#SOUND_MIXER_READ_MUTE
 
	`MIXER_READ
(
SOUND_MIXER_MUTE
)

	)

867 
	#SOUND_MIXER_READ_ENHANCE
 
	`MIXER_READ
(
SOUND_MIXER_ENHANCE
)

	)

868 
	#SOUND_MIXER_READ_LOUD
 
	`MIXER_READ
(
SOUND_MIXER_LOUD
)

	)

870 
	#SOUND_MIXER_READ_RECSRC
 
	`MIXER_READ
(
SOUND_MIXER_RECSRC
)

	)

871 
	#SOUND_MIXER_READ_DEVMASK
 
	`MIXER_READ
(
SOUND_MIXER_DEVMASK
)

	)

872 
	#SOUND_MIXER_READ_RECMASK
 
	`MIXER_READ
(
SOUND_MIXER_RECMASK
)

	)

873 
	#SOUND_MIXER_READ_STEREODEVS
 
	`MIXER_READ
(
SOUND_MIXER_STEREODEVS
)

	)

874 
	#SOUND_MIXER_READ_CAPS
 
	`MIXER_READ
(
SOUND_MIXER_CAPS
)

	)

876 
	#MIXER_WRITE
(
dev
Ë
	`_SIOWR
('M', dev, )

	)

877 
	#SOUND_MIXER_WRITE_VOLUME
 
	`MIXER_WRITE
(
SOUND_MIXER_VOLUME
)

	)

878 
	#SOUND_MIXER_WRITE_BASS
 
	`MIXER_WRITE
(
SOUND_MIXER_BASS
)

	)

879 
	#SOUND_MIXER_WRITE_TREBLE
 
	`MIXER_WRITE
(
SOUND_MIXER_TREBLE
)

	)

880 
	#SOUND_MIXER_WRITE_SYNTH
 
	`MIXER_WRITE
(
SOUND_MIXER_SYNTH
)

	)

881 
	#SOUND_MIXER_WRITE_PCM
 
	`MIXER_WRITE
(
SOUND_MIXER_PCM
)

	)

882 
	#SOUND_MIXER_WRITE_SPEAKER
 
	`MIXER_WRITE
(
SOUND_MIXER_SPEAKER
)

	)

883 
	#SOUND_MIXER_WRITE_LINE
 
	`MIXER_WRITE
(
SOUND_MIXER_LINE
)

	)

884 
	#SOUND_MIXER_WRITE_MIC
 
	`MIXER_WRITE
(
SOUND_MIXER_MIC
)

	)

885 
	#SOUND_MIXER_WRITE_CD
 
	`MIXER_WRITE
(
SOUND_MIXER_CD
)

	)

886 
	#SOUND_MIXER_WRITE_IMIX
 
	`MIXER_WRITE
(
SOUND_MIXER_IMIX
)

	)

887 
	#SOUND_MIXER_WRITE_ALTPCM
 
	`MIXER_WRITE
(
SOUND_MIXER_ALTPCM
)

	)

888 
	#SOUND_MIXER_WRITE_RECLEV
 
	`MIXER_WRITE
(
SOUND_MIXER_RECLEV
)

	)

889 
	#SOUND_MIXER_WRITE_IGAIN
 
	`MIXER_WRITE
(
SOUND_MIXER_IGAIN
)

	)

890 
	#SOUND_MIXER_WRITE_OGAIN
 
	`MIXER_WRITE
(
SOUND_MIXER_OGAIN
)

	)

891 
	#SOUND_MIXER_WRITE_LINE1
 
	`MIXER_WRITE
(
SOUND_MIXER_LINE1
)

	)

892 
	#SOUND_MIXER_WRITE_LINE2
 
	`MIXER_WRITE
(
SOUND_MIXER_LINE2
)

	)

893 
	#SOUND_MIXER_WRITE_LINE3
 
	`MIXER_WRITE
(
SOUND_MIXER_LINE3
)

	)

896 
	#SOUND_MIXER_WRITE_MUTE
 
	`MIXER_WRITE
(
SOUND_MIXER_MUTE
)

	)

897 
	#SOUND_MIXER_WRITE_ENHANCE
 
	`MIXER_WRITE
(
SOUND_MIXER_ENHANCE
)

	)

898 
	#SOUND_MIXER_WRITE_LOUD
 
	`MIXER_WRITE
(
SOUND_MIXER_LOUD
)

	)

900 
	#SOUND_MIXER_WRITE_RECSRC
 
	`MIXER_WRITE
(
SOUND_MIXER_RECSRC
)

	)

902 
	smixî_öfo


904 
	mid
[16];

905 
	m«me
[32];

906 
	mmodify_cou¡î
;

907 
	mfûÀrs
[10];

908 } 
	tmixî_öfo
;

910 
	s_ﬁd_mixî_öfo


912 
	mid
[16];

913 
	m«me
[32];

914 } 
	t_ﬁd_mixî_öfo
;

916 
	#SOUND_MIXER_INFO
 
	`_SIOR
 ('M', 101, 
mixî_öfo
)

	)

917 
	#SOUND_OLD_MIXER_INFO
 
	`_SIOR
 ('M', 101, 
_ﬁd_mixî_öfo
)

	)

925 
	tmixî_ªc‹d
[128];

927 
	#SOUND_MIXER_ACCESS
 
	`_SIOWR
('M', 102, 
mixî_ªc‹d
)

	)

932 
	#SOUND_MIXER_AGC
 
	`_SIOWR
('M', 103, )

	)

933 
	#SOUND_MIXER_3DSE
 
	`_SIOWR
('M', 104, )

	)

939 
	#SOUND_MIXER_PRIVATE1
 
	`_SIOWR
('M', 111, )

	)

940 
	#SOUND_MIXER_PRIVATE2
 
	`_SIOWR
('M', 112, )

	)

941 
	#SOUND_MIXER_PRIVATE3
 
	`_SIOWR
('M', 113, )

	)

942 
	#SOUND_MIXER_PRIVATE4
 
	`_SIOWR
('M', 114, )

	)

943 
	#SOUND_MIXER_PRIVATE5
 
	`_SIOWR
('M', 115, )

	)

953 
	smixî_vﬁ_èbÀ
 {

954 
	mnum
;

955 
	m«me
[32];

956 
	mÀvñs
[32];

957 } 
	tmixî_vﬁ_èbÀ
;

959 
	#SOUND_MIXER_GETLEVELS
 
	`_SIOWR
('M', 116, 
mixî_vﬁ_èbÀ
)

	)

960 
	#SOUND_MIXER_SETLEVELS
 
	`_SIOWR
('M', 117, 
mixî_vﬁ_èbÀ
)

	)

968 
	#OSS_GETVERSION
 
	`_SIOR
 ('M', 118, )

	)

988 
	#EV_SEQ_LOCAL
 0x80

	)

989 
	#EV_TIMING
 0x81

	)

990 
	#EV_CHN_COMMON
 0x92

	)

991 
	#EV_CHN_VOICE
 0x93

	)

992 
	#EV_SYSEX
 0x94

	)

1002 
	#MIDI_NOTEOFF
 0x80

	)

1003 
	#MIDI_NOTEON
 0x90

	)

1004 
	#MIDI_KEY_PRESSURE
 0xA0

	)

1010 
	#MIDI_CTL_CHANGE
 0xB0

	)

1011 
	#MIDI_PGM_CHANGE
 0xC0

	)

1012 
	#MIDI_CHN_PRESSURE
 0xD0

	)

1013 
	#MIDI_PITCH_BEND
 0xE0

	)

1015 
	#MIDI_SYSTEM_PREFIX
 0xF0

	)

1020 
	#TMR_WAIT_REL
 1

	)

1021 
	#TMR_WAIT_ABS
 2

	)

1022 
	#TMR_STOP
 3

	)

1023 
	#TMR_START
 4

	)

1024 
	#TMR_CONTINUE
 5

	)

1025 
	#TMR_TEMPO
 6

	)

1026 
	#TMR_ECHO
 8

	)

1027 
	#TMR_CLOCK
 9

	)

1028 
	#TMR_SPP
 10

	)

1029 
	#TMR_TIMESIG
 11

	)

1034 
	#LOCL_STARTAUDIO
 1

	)

1052 
	#SEQ_DECLAREBUF
(Ë
	`SEQ_USE_EXTBUF
()

	)

1054 
£qbuf_dump
();

1056 
	#SEQ_PM_DEFINES
 
__foo_b¨___


	)

1058 
	#SEQ_LOAD_GMINSTR
(
dev
, 
ö°r
)

	)

1059 
	#SEQ_LOAD_GMDRUM
(
dev
, 
drum
)

	)

1061 
	#_SEQ_EXTERN
 

	)

1062 
	#SEQ_USE_EXTBUF
() \

1063 
_SEQ_EXTERN
 
_£qbuf
[]; \

1064 
_SEQ_EXTERN
 
_£qbuÊí
; _SEQ_EXTERN 
_£qbuÂå


	)

1066 #i‚de‡
USE_SIMPLE_MACROS


1086 
	#SEQ_DEFINEBUF
(
Àn
Ë
_£qbuf
[Àn]; 
_£qbuÊí
 =Üí;
_£qbuÂå
 = 0

	)

1087 
	#_SEQ_NEEDBUF
(
Àn
Ëi‡((
_£qbuÂå
+÷í)Ë> 
_£qbuÊí
Ë
	`£qbuf_dump
()

	)

1088 
	#_SEQ_ADVBUF
(
Àn
Ë
_£qbuÂå
 +
	)
len

1089 
	#SEQ_DUMPBUF
 
£qbuf_dump


	)

1105 
	#_SEQ_NEEDBUF
(
Àn
Ë

	)

1108 
	#SEQ_VOLUME_MODE
(
dev
, 
mode
Ë{
	`_SEQ_NEEDBUF
(8);\

1109 
_£qbuf
[
_£qbuÂå
] = 
SEQ_EXTENDED
;\

1110 
_£qbuf
[
_£qbuÂå
+1] = 
SEQ_VOLMODE
;\

1111 
_£qbuf
[
_£qbuÂå
+2] = (
dev
);\

1112 
_£qbuf
[
_£qbuÂå
+3] = (
mode
);\

1113 
_£qbuf
[
_£qbuÂå
+4] = 0;\

1114 
_£qbuf
[
_£qbuÂå
+5] = 0;\

1115 
_£qbuf
[
_£qbuÂå
+6] = 0;\

1116 
_£qbuf
[
_£qbuÂå
+7] = 0;\

1117 
	`_SEQ_ADVBUF
(8);}

	)

1123 
	#_CHN_VOICE
(
dev
, 
evít
, 
chn
, 
nŸe
, 
∑rm
) \

1124 {
	`_SEQ_NEEDBUF
(8);\

1125 
_£qbuf
[
_£qbuÂå
] = 
EV_CHN_VOICE
;\

1126 
_£qbuf
[
_£qbuÂå
+1] = (
dev
);\

1127 
_£qbuf
[
_£qbuÂå
+2] = (
evít
);\

1128 
_£qbuf
[
_£qbuÂå
+3] = (
chn
);\

1129 
_£qbuf
[
_£qbuÂå
+4] = (
nŸe
);\

1130 
_£qbuf
[
_£qbuÂå
+5] = (
∑rm
);\

1131 
_£qbuf
[
_£qbuÂå
+6] = (0);\

1132 
_£qbuf
[
_£qbuÂå
+7] = 0;\

1133 
	`_SEQ_ADVBUF
(8);}

	)

1135 
	#SEQ_START_NOTE
(
dev
, 
chn
, 
nŸe
, 
vﬁ
) \

1136 
	`_CHN_VOICE
(
dev
, 
MIDI_NOTEON
, 
chn
, 
nŸe
, 
vﬁ
)

	)

1138 
	#SEQ_STOP_NOTE
(
dev
, 
chn
, 
nŸe
, 
vﬁ
) \

1139 
	`_CHN_VOICE
(
dev
, 
MIDI_NOTEOFF
, 
chn
, 
nŸe
, 
vﬁ
)

	)

1141 
	#SEQ_KEY_PRESSURE
(
dev
, 
chn
, 
nŸe
, 
¥essuª
) \

1142 
	`_CHN_VOICE
(
dev
, 
MIDI_KEY_PRESSURE
, 
chn
, 
nŸe
, 
¥essuª
)

	)

1148 
	#_CHN_COMMON
(
dev
, 
evít
, 
chn
, 
p1
, 
p2
, 
w14
) \

1149 {
	`_SEQ_NEEDBUF
(8);\

1150 
_£qbuf
[
_£qbuÂå
] = 
EV_CHN_COMMON
;\

1151 
_£qbuf
[
_£qbuÂå
+1] = (
dev
);\

1152 
_£qbuf
[
_£qbuÂå
+2] = (
evít
);\

1153 
_£qbuf
[
_£qbuÂå
+3] = (
chn
);\

1154 
_£qbuf
[
_£qbuÂå
+4] = (
p1
);\

1155 
_£qbuf
[
_£qbuÂå
+5] = (
p2
);\

1156 *(*)&
_£qbuf
[
_£qbuÂå
+6] = (
w14
);\

1157 
	`_SEQ_ADVBUF
(8);}

	)

1173 
	#SEQ_SYSEX
(
dev
, 
buf
, 
Àn
) \

1174 {
ii
, 
Œ
=(
Àn
); \

1175 *
buÂ
=
buf
;\

1176 i‡(
Œ
>6)ll=6;\

1177 
	`_SEQ_NEEDBUF
(8);\

1178 
_£qbuf
[
_£qbuÂå
] = 
EV_SYSEX
;\

1179 
_£qbuf
[
_£qbuÂå
+1] = (
dev
);\

1180 
ii
=0;ii<
Œ
;ii++)\

1181 
_£qbuf
[
_£qbuÂå
+
ii
+2] = 
buÂ
[ii];\

1182 
ii
=
Œ
;ii<6;ii++)\

1183 
_£qbuf
[
_£qbuÂå
+
ii
+2] = 0xff;\

1184 
	`_SEQ_ADVBUF
(8);}

	)

1186 
	#SEQ_CHN_PRESSURE
(
dev
, 
chn
, 
¥essuª
) \

1187 
	`_CHN_COMMON
(
dev
, 
MIDI_CHN_PRESSURE
, 
chn
, 
¥essuª
, 0, 0)

	)

1189 
	#SEQ_SET_PATCH
 
SEQ_PGM_CHANGE


	)

1190 
	#SEQ_PGM_CHANGE
(
dev
, 
chn
, 
∑tch
) \

1191 
	`_CHN_COMMON
(
dev
, 
MIDI_PGM_CHANGE
, 
chn
, 
∑tch
, 0, 0)

	)

1193 
	#SEQ_CONTROL
(
dev
, 
chn
, 
c⁄åﬁÀr
, 
vÆue
) \

1194 
	`_CHN_COMMON
(
dev
, 
MIDI_CTL_CHANGE
, 
chn
, 
c⁄åﬁÀr
, 0, 
vÆue
)

	)

1196 
	#SEQ_BENDER
(
dev
, 
chn
, 
vÆue
) \

1197 
	`_CHN_COMMON
(
dev
, 
MIDI_PITCH_BEND
, 
chn
, 0, 0, 
vÆue
)

	)

1200 
	#SEQ_V2_X_CONTROL
(
dev
, 
voi˚
, 
c⁄åﬁÀr
, 
vÆue
Ë{
	`_SEQ_NEEDBUF
(8);\

1201 
_£qbuf
[
_£qbuÂå
] = 
SEQ_EXTENDED
;\

1202 
_£qbuf
[
_£qbuÂå
+1] = 
SEQ_CONTROLLER
;\

1203 
_£qbuf
[
_£qbuÂå
+2] = (
dev
);\

1204 
_£qbuf
[
_£qbuÂå
+3] = (
voi˚
);\

1205 
_£qbuf
[
_£qbuÂå
+4] = (
c⁄åﬁÀr
);\

1206 
_£qbuf
[
_£qbuÂå
+5] = ((
vÆue
)&0xff);\

1207 
_£qbuf
[
_£qbuÂå
+6] = ((
vÆue
>>8)&0xff);\

1208 
_£qbuf
[
_£qbuÂå
+7] = 0;\

1209 
	`_SEQ_ADVBUF
(8);}

	)

1214 
	#SEQ_PITCHBEND
(
dev
, 
voi˚
, 
vÆue
Ë
	`SEQ_V2_X_CONTROL
(dev, voi˚, 
CTRL_PITCH_BENDER
, vÆue)

	)

1215 
	#SEQ_BENDER_RANGE
(
dev
, 
voi˚
, 
vÆue
Ë
	`SEQ_V2_X_CONTROL
(dev, voi˚, 
CTRL_PITCH_BENDER_RANGE
, vÆue)

	)

1216 
	#SEQ_EXPRESSION
(
dev
, 
voi˚
, 
vÆue
Ë
	`SEQ_CONTROL
(dev, voi˚, 
CTL_EXPRESSION
, vÆue*128)

	)

1217 
	#SEQ_MAIN_VOLUME
(
dev
, 
voi˚
, 
vÆue
Ë
	`SEQ_CONTROL
(dev, voi˚, 
CTL_MAIN_VOLUME
, (vÆue*16383)/100)

	)

1218 
	#SEQ_PANNING
(
dev
, 
voi˚
, 
pos
Ë
	`SEQ_CONTROL
(dev, voi˚, 
CTL_PAN
, (pos+128Ë/ 2)

	)

1224 
	#_TIMER_EVENT
(
ev
, 
∑rm
Ë{
	`_SEQ_NEEDBUF
(8);\

1225 
_£qbuf
[
_£qbuÂå
+0] = 
EV_TIMING
; \

1226 
_£qbuf
[
_£qbuÂå
+1] = (
ev
); \

1227 
_£qbuf
[
_£qbuÂå
+2] = 0;\

1228 
_£qbuf
[
_£qbuÂå
+3] = 0;\

1229 *(*)&
_£qbuf
[
_£qbuÂå
+4] = (
∑rm
); \

1230 
	`_SEQ_ADVBUF
(8);}

	)

1232 
	#SEQ_START_TIMER
(Ë
	`_TIMER_EVENT
(
TMR_START
, 0)

	)

1233 
	#SEQ_STOP_TIMER
(Ë
	`_TIMER_EVENT
(
TMR_STOP
, 0)

	)

1234 
	#SEQ_CONTINUE_TIMER
(Ë
	`_TIMER_EVENT
(
TMR_CONTINUE
, 0)

	)

1235 
	#SEQ_WAIT_TIME
(
ticks
Ë
	`_TIMER_EVENT
(
TMR_WAIT_ABS
,Åicks)

	)

1236 
	#SEQ_DELTA_TIME
(
ticks
Ë
	`_TIMER_EVENT
(
TMR_WAIT_REL
,Åicks)

	)

1237 
	#SEQ_ECHO_BACK
(
key
Ë
	`_TIMER_EVENT
(
TMR_ECHO
, key)

	)

1238 
	#SEQ_SET_TEMPO
(
vÆue
Ë
	`_TIMER_EVENT
(
TMR_TEMPO
, vÆue)

	)

1239 
	#SEQ_SONGPOS
(
pos
Ë
	`_TIMER_EVENT
(
TMR_SPP
,Öos)

	)

1240 
	#SEQ_TIME_SIGNATURE
(
sig
Ë
	`_TIMER_EVENT
(
TMR_TIMESIG
, sig)

	)

1246 
	#_LOCAL_EVENT
(
ev
, 
∑rm
Ë{
	`_SEQ_NEEDBUF
(8);\

1247 
_£qbuf
[
_£qbuÂå
+0] = 
EV_SEQ_LOCAL
; \

1248 
_£qbuf
[
_£qbuÂå
+1] = (
ev
); \

1249 
_£qbuf
[
_£qbuÂå
+2] = 0;\

1250 
_£qbuf
[
_£qbuÂå
+3] = 0;\

1251 *(*)&
_£qbuf
[
_£qbuÂå
+4] = (
∑rm
); \

1252 
	`_SEQ_ADVBUF
(8);}

	)

1254 
	#SEQ_PLAYAUDIO
(
devmask
Ë
	`_LOCAL_EVENT
(
LOCL_STARTAUDIO
, devmask)

	)

1259 
	#SEQ_MIDIOUT
(
devi˚
, 
byã
Ë{
	`_SEQ_NEEDBUF
(4);\

1260 
_£qbuf
[
_£qbuÂå
] = 
SEQ_MIDIPUTC
;\

1261 
_£qbuf
[
_£qbuÂå
+1] = (
byã
);\

1262 
_£qbuf
[
_£qbuÂå
+2] = (
devi˚
);\

1263 
_£qbuf
[
_£qbuÂå
+3] = 0;\

1264 
	`_SEQ_ADVBUF
(4);}

	)

1269 
	#SEQ_WRPATCH
(
∑tchx
, 
Àn
) \

1270 {i‡(
_£qbuÂå
Ë
	`SEQ_DUMPBUF
();\

1271 i‡(
	`wrôe
(
£qfd
, (*)(
∑tchx
), 
Àn
)==-1) \

1272 
	`≥º‹
("Wrôê∑tch: /dev/£quí˚r");}

	)

1273 
	#SEQ_WRPATCH2
(
∑tchx
, 
Àn
) \

1274 (
	`SEQ_DUMPBUF
(), 
	`wrôe
(
£qfd
, (*)(
∑tchx
), 
Àn
))

	)

	@/usr/include/linux/stat.h

2 #i‚de‡
_LINUX_STAT_H


3 
	#_LINUX_STAT_H


	)

5 
	~<löux/ty≥s.h
>

7 #i‡
deföed
(
__KERNEL__
Ë|| !deföed(
__GLIBC__
) || (__GLIBC__ < 2)

9 
	#S_IFMT
 00170000

	)

10 
	#S_IFSOCK
 0140000

	)

11 
	#S_IFLNK
 0120000

	)

12 
	#S_IFREG
 0100000

	)

13 
	#S_IFBLK
 0060000

	)

14 
	#S_IFDIR
 0040000

	)

15 
	#S_IFCHR
 0020000

	)

16 
	#S_IFIFO
 0010000

	)

17 
	#S_ISUID
 0004000

	)

18 
	#S_ISGID
 0002000

	)

19 
	#S_ISVTX
 0001000

	)

21 
	#S_ISLNK
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFLNK
)

	)

22 
	#S_ISREG
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFREG
)

	)

23 
	#S_ISDIR
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFDIR
)

	)

24 
	#S_ISCHR
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFCHR
)

	)

25 
	#S_ISBLK
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFBLK
)

	)

26 
	#S_ISFIFO
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFIFO
)

	)

27 
	#S_ISSOCK
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFSOCK
)

	)

29 
	#S_IRWXU
 00700

	)

30 
	#S_IRUSR
 00400

	)

31 
	#S_IWUSR
 00200

	)

32 
	#S_IXUSR
 00100

	)

34 
	#S_IRWXG
 00070

	)

35 
	#S_IRGRP
 00040

	)

36 
	#S_IWGRP
 00020

	)

37 
	#S_IXGRP
 00010

	)

39 
	#S_IRWXO
 00007

	)

40 
	#S_IROTH
 00004

	)

41 
	#S_IWOTH
 00002

	)

42 
	#S_IXOTH
 00001

	)

56 
	s°©x_time°amp
 {

57 
__s64
 
	mtv_£c
;

58 
__u32
 
	mtv_n£c
;

59 
__s32
 
	m__ª£rved
;

99 
	s°©x
 {

101 
__u32
 
	m°x_mask
;

102 
__u32
 
	m°x_blksize
;

103 
__u64
 
	m°x_©åibuãs
;

105 
__u32
 
	m°x_∆ök
;

106 
__u32
 
	m°x_uid
;

107 
__u32
 
	m°x_gid
;

108 
__u16
 
	m°x_mode
;

109 
__u16
 
	m__•¨e0
[1];

111 
__u64
 
	m°x_öo
;

112 
__u64
 
	m°x_size
;

113 
__u64
 
	m°x_blocks
;

114 
__u64
 
	m°x_©åibuãs_mask
;

116 
°©x_time°amp
 
	m°x_©ime
;

117 
°©x_time°amp
 
	m°x_btime
;

118 
°©x_time°amp
 
	m°x_˘ime
;

119 
°©x_time°amp
 
	m°x_mtime
;

121 
__u32
 
	m°x_rdev_maj‹
;

122 
__u32
 
	m°x_rdev_mö‹
;

123 
__u32
 
	m°x_dev_maj‹
;

124 
__u32
 
	m°x_dev_mö‹
;

126 
__u64
 
	m°x_m¡_id
;

127 
__u64
 
	m__•¨e2
;

129 
__u64
 
	m__•¨e3
[12];

141 
	#STATX_TYPE
 0x00000001U

	)

142 
	#STATX_MODE
 0x00000002U

	)

143 
	#STATX_NLINK
 0x00000004U

	)

144 
	#STATX_UID
 0x00000008U

	)

145 
	#STATX_GID
 0x00000010U

	)

146 
	#STATX_ATIME
 0x00000020U

	)

147 
	#STATX_MTIME
 0x00000040U

	)

148 
	#STATX_CTIME
 0x00000080U

	)

149 
	#STATX_INO
 0x00000100U

	)

150 
	#STATX_SIZE
 0x00000200U

	)

151 
	#STATX_BLOCKS
 0x00000400U

	)

152 
	#STATX_BASIC_STATS
 0x000007ffU

	)

153 
	#STATX_BTIME
 0x00000800U

	)

154 
	#STATX_MNT_ID
 0x00001000U

	)

156 
	#STATX__RESERVED
 0x80000000U

	)

163 
	#STATX_ALL
 0x00000fffU

	)

179 
	#STATX_ATTR_COMPRESSED
 0x00000004

	)

180 
	#STATX_ATTR_IMMUTABLE
 0x00000010

	)

181 
	#STATX_ATTR_APPEND
 0x00000020

	)

182 
	#STATX_ATTR_NODUMP
 0x00000040

	)

183 
	#STATX_ATTR_ENCRYPTED
 0x00000800

	)

184 
	#STATX_ATTR_AUTOMOUNT
 0x00001000

	)

185 
	#STATX_ATTR_MOUNT_ROOT
 0x00002000

	)

186 
	#STATX_ATTR_VERITY
 0x00100000

	)

187 
	#STATX_ATTR_DAX
 0x00200000

	)

	@/usr/include/linux/time.h

2 #i‚de‡
_LINUX_TIME_H


3 
	#_LINUX_TIME_H


	)

5 
	~<löux/ty≥s.h
>

6 
	~<löux/time_ty≥s.h
>

8 #i‚de‡
_STRUCT_TIMESPEC


9 
	#_STRUCT_TIMESPEC


	)

10 
	stime•ec
 {

11 
__kî√l_ﬁd_time_t
 
	mtv_£c
;

12 
	mtv_n£c
;

16 
	stimevÆ
 {

17 
__kî√l_ﬁd_time_t
 
	mtv_£c
;

18 
__kî√l_su£c⁄ds_t
 
	mtv_u£c
;

21 
	sôimî•ec
 {

22 
time•ec
 
	mô_öãrvÆ
;

23 
time•ec
 
	mô_vÆue
;

26 
	sôimîvÆ
 {

27 
timevÆ
 
	mô_öãrvÆ
;

28 
timevÆ
 
	mô_vÆue
;

31 
	stimez⁄e
 {

32 
	mtz_möuãswe°
;

33 
	mtz_d°time
;

40 
	#ITIMER_REAL
 0

	)

41 
	#ITIMER_VIRTUAL
 1

	)

42 
	#ITIMER_PROF
 2

	)

47 
	#CLOCK_REALTIME
 0

	)

48 
	#CLOCK_MONOTONIC
 1

	)

49 
	#CLOCK_PROCESS_CPUTIME_ID
 2

	)

50 
	#CLOCK_THREAD_CPUTIME_ID
 3

	)

51 
	#CLOCK_MONOTONIC_RAW
 4

	)

52 
	#CLOCK_REALTIME_COARSE
 5

	)

53 
	#CLOCK_MONOTONIC_COARSE
 6

	)

54 
	#CLOCK_BOOTTIME
 7

	)

55 
	#CLOCK_REALTIME_ALARM
 8

	)

56 
	#CLOCK_BOOTTIME_ALARM
 9

	)

61 
	#CLOCK_SGI_CYCLE
 10

	)

62 
	#CLOCK_TAI
 11

	)

64 
	#MAX_CLOCKS
 16

	)

65 
	#CLOCKS_MASK
 (
CLOCK_REALTIME
 | 
CLOCK_MONOTONIC
)

	)

66 
	#CLOCKS_MONO
 
CLOCK_MONOTONIC


	)

71 
	#TIMER_ABSTIME
 0x01

	)

	@/usr/include/linux/types.h

2 #i‚de‡
_LINUX_TYPES_H


3 
	#_LINUX_TYPES_H


	)

5 
	~<asm/ty≥s.h
>

7 #i‚de‡
__ASSEMBLY__


9 
	~<löux/posix_ty≥s.h
>

17 #ifde‡
__CHECKER__


18 
	#__bôwi£__
 
	`__©åibuã__
((
bôwi£
))

	)

20 
	#__bôwi£__


	)

22 
	#__bôwi£
 
__bôwi£__


	)

24 
__u16
 
	t__bôwi£
 
	t__À16
;

25 
__u16
 
	t__bôwi£
 
	t__be16
;

26 
__u32
 
	t__bôwi£
 
	t__À32
;

27 
__u32
 
	t__bôwi£
 
	t__be32
;

28 
__u64
 
	t__bôwi£
 
	t__À64
;

29 
__u64
 
	t__bôwi£
 
	t__be64
;

31 
__u16
 
	t__bôwi£
 
	t__sum16
;

32 
__u32
 
	t__bôwi£
 
	t__wsum
;

43 
	#__Æig√d_u64
 
__u64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

44 
	#__Æig√d_be64
 
__be64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

45 
	#__Æig√d_À64
 
__À64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

47 
	t__bôwi£
 
	t__pﬁl_t
;

	@/usr/include/linux/version.h

1 
	#LINUX_VERSION_CODE
 331642

	)

2 
	#KERNEL_VERSION
(
a
,
b
,
c
Ë((◊Ë<< 16Ë+ ((bË<< 8Ë+ ((cË> 255 ? 255 : (c)))

	)

3 
	#LINUX_VERSION_MAJOR
 5

	)

4 
	#LINUX_VERSION_PATCHLEVEL
 15

	)

5 
	#LINUX_VERSION_SUBLEVEL
 122

	)

	@/usr/include/linux/vt.h

2 #i‚de‡
_LINUX_VT_H


3 
	#_LINUX_VT_H


	)

10 
	#MIN_NR_CONSOLES
 1

	)

11 
	#MAX_NR_CONSOLES
 63

	)

17 
	#VT_OPENQRY
 0x5600

	)

19 
	svt_mode
 {

20 
	mmode
;

21 
	mwaôv
;

22 
	mªlsig
;

23 
	macqsig
;

24 
	m‰sig
;

26 
	#VT_GETMODE
 0x5601

	)

27 
	#VT_SETMODE
 0x5602

	)

28 
	#VT_AUTO
 0x00

	)

29 
	#VT_PROCESS
 0x01

	)

30 
	#VT_ACKACQ
 0x02

	)

32 
	svt_°©
 {

33 
	mv_a˘ive
;

34 
	mv_sig«l
;

35 
	mv_°©e
;

37 
	#VT_GETSTATE
 0x5603

	)

38 
	#VT_SENDSIG
 0x5604

	)

40 
	#VT_RELDISP
 0x5605

	)

42 
	#VT_ACTIVATE
 0x5606

	)

43 
	#VT_WAITACTIVE
 0x5607

	)

44 
	#VT_DISALLOCATE
 0x5608

	)

46 
	svt_sizes
 {

47 
	mv_rows
;

48 
	mv_cﬁs
;

49 
	mv_s¸ﬁlsize
;

51 
	#VT_RESIZE
 0x5609

	)

53 
	svt_c⁄size
 {

54 
	mv_rows
;

55 
	mv_cﬁs
;

56 
	mv_vlö
;

57 
	mv_˛ö
;

58 
	mv_vcﬁ
;

59 
	mv_ccﬁ
;

61 
	#VT_RESIZEX
 0x560A

	)

62 
	#VT_LOCKSWITCH
 0x560B

	)

63 
	#VT_UNLOCKSWITCH
 0x560C

	)

64 
	#VT_GETHIFONTMASK
 0x560D

	)

66 
	svt_evít
 {

67 
	mevít
;

68 
	#VT_EVENT_SWITCH
 0x0001

	)

69 
	#VT_EVENT_BLANK
 0x0002

	)

70 
	#VT_EVENT_UNBLANK
 0x0004

	)

71 
	#VT_EVENT_RESIZE
 0x0008

	)

72 
	#VT_MAX_EVENT
 0x000F

	)

73 
	mﬁdev
;

74 
	m√wev
;

75 
	m∑d
[4];

78 
	#VT_WAITEVENT
 0x560E

	)

80 
	svt_£è˘iv©e
 {

81 
	mc⁄sﬁe
;

82 
vt_mode
 
	mmode
;

85 
	#VT_SETACTIVATE
 0x560F

	)

	@/usr/include/net/if.h

19 #i‚de‡
_NET_IF_H


20 
	#_NET_IF_H
 1

	)

22 
	~<„©uªs.h
>

24 #ifde‡
__USE_MISC


25 
	~<sys/ty≥s.h
>

26 
	~<sys/sockë.h
>

31 
	#IF_NAMESIZE
 16

	)

33 
	sif_«meödex


35 
	mif_ödex
;

36 *
	mif_«me
;

40 #ifde‡
__USE_MISC


44 
	mIFF_UP
 = 0x1,

45 
	#IFF_UP
 
IFF_UP


	)

46 
	mIFF_BROADCAST
 = 0x2,

47 
	#IFF_BROADCAST
 
IFF_BROADCAST


	)

48 
	mIFF_DEBUG
 = 0x4,

49 
	#IFF_DEBUG
 
IFF_DEBUG


	)

50 
	mIFF_LOOPBACK
 = 0x8,

51 
	#IFF_LOOPBACK
 
IFF_LOOPBACK


	)

52 
	mIFF_POINTOPOINT
 = 0x10,

53 
	#IFF_POINTOPOINT
 
IFF_POINTOPOINT


	)

54 
	mIFF_NOTRAILERS
 = 0x20,

55 
	#IFF_NOTRAILERS
 
IFF_NOTRAILERS


	)

56 
	mIFF_RUNNING
 = 0x40,

57 
	#IFF_RUNNING
 
IFF_RUNNING


	)

58 
	mIFF_NOARP
 = 0x80,

59 
	#IFF_NOARP
 
IFF_NOARP


	)

60 
	mIFF_PROMISC
 = 0x100,

61 
	#IFF_PROMISC
 
IFF_PROMISC


	)

64 
	mIFF_ALLMULTI
 = 0x200,

65 
	#IFF_ALLMULTI
 
IFF_ALLMULTI


	)

67 
	mIFF_MASTER
 = 0x400,

68 
	#IFF_MASTER
 
IFF_MASTER


	)

69 
	mIFF_SLAVE
 = 0x800,

70 
	#IFF_SLAVE
 
IFF_SLAVE


	)

72 
	mIFF_MULTICAST
 = 0x1000,

73 
	#IFF_MULTICAST
 
IFF_MULTICAST


	)

75 
	mIFF_PORTSEL
 = 0x2000,

76 
	#IFF_PORTSEL
 
IFF_PORTSEL


	)

77 
	mIFF_AUTOMEDIA
 = 0x4000,

78 
	#IFF_AUTOMEDIA
 
IFF_AUTOMEDIA


	)

79 
	mIFF_DYNAMIC
 = 0x8000

80 
	#IFF_DYNAMIC
 
IFF_DYNAMIC


	)

88 
	siÁddr


90 
sockaddr
 
	miÁ_addr
;

93 
sockaddr
 
	mifu_brﬂdaddr
;

94 
sockaddr
 
	mifu_d°addr
;

95 } 
	miÁ_ifu
;

96 
iÁ˚
 *
	miÁ_iÂ
;

97 
iÁddr
 *
	miÁ_√xt
;

100 
	#iÁ_brﬂdaddr
 
iÁ_ifu
.
ifu_brﬂdaddr


	)

101 
	#iÁ_d°addr
 
iÁ_ifu
.
ifu_d°addr


	)

111 
	sifm≠


113 
	mmem_°¨t
;

114 
	mmem_íd
;

115 
	mba£_addr
;

116 
	múq
;

117 
	mdma
;

118 
	mp‹t
;

126 
	si‰eq


128 
	#IFHWADDRLEN
 6

	)

129 
	#IFNAMSIZ
 
IF_NAMESIZE


	)

132 
	mi‰n_«me
[
IFNAMSIZ
];

133 } 
	mi‰_i‰n
;

137 
sockaddr
 
	mi‰u_addr
;

138 
sockaddr
 
	mi‰u_d°addr
;

139 
sockaddr
 
	mi‰u_brﬂdaddr
;

140 
sockaddr
 
	mi‰u_√tmask
;

141 
sockaddr
 
	mi‰u_hwaddr
;

142 
	mi‰u_Êags
;

143 
	mi‰u_ivÆue
;

144 
	mi‰u_mtu
;

145 
ifm≠
 
	mi‰u_m≠
;

146 
	mi‰u_¶ave
[
IFNAMSIZ
];

147 
	mi‰u_√w«me
[
IFNAMSIZ
];

148 
__ˇddr_t
 
	mi‰u_d©a
;

149 } 
	mi‰_i‰u
;

151 
	#i‰_«me
 
i‰_i‰n
.
i‰n_«me


	)

152 
	#i‰_hwaddr
 
i‰_i‰u
.
i‰u_hwaddr


	)

153 
	#i‰_addr
 
i‰_i‰u
.
i‰u_addr


	)

154 
	#i‰_d°addr
 
i‰_i‰u
.
i‰u_d°addr


	)

155 
	#i‰_brﬂdaddr
 
i‰_i‰u
.
i‰u_brﬂdaddr


	)

156 
	#i‰_√tmask
 
i‰_i‰u
.
i‰u_√tmask


	)

157 
	#i‰_Êags
 
i‰_i‰u
.
i‰u_Êags


	)

158 
	#i‰_mëric
 
i‰_i‰u
.
i‰u_ivÆue


	)

159 
	#i‰_mtu
 
i‰_i‰u
.
i‰u_mtu


	)

160 
	#i‰_m≠
 
i‰_i‰u
.
i‰u_m≠


	)

161 
	#i‰_¶ave
 
i‰_i‰u
.
i‰u_¶ave


	)

162 
	#i‰_d©a
 
i‰_i‰u
.
i‰u_d©a


	)

163 
	#i‰_ifödex
 
i‰_i‰u
.
i‰u_ivÆue


	)

164 
	#i‰_b™dwidth
 
i‰_i‰u
.
i‰u_ivÆue


	)

165 
	#i‰_qÀn
 
i‰_i‰u
.
i‰u_ivÆue


	)

166 
	#i‰_√w«me
 
i‰_i‰u
.
i‰u_√w«me


	)

167 
	#_IOT_i‰eq
 
	`_IOT
(
	`_IOTS
(),
IFNAMSIZ
,_IOTS(),16,0,0)

	)

168 
	#_IOT_i‰eq_sh‹t
 
	`_IOT
(
	`_IOTS
(),
IFNAMSIZ
,_IOTS(),1,0,0)

	)

169 
	#_IOT_i‰eq_öt
 
	`_IOT
(
	`_IOTS
(),
IFNAMSIZ
,_IOTS(),1,0,0)

	)

176 
	sifc⁄f


178 
	mifc_Àn
;

181 
__ˇddr_t
 
	mifcu_buf
;

182 
i‰eq
 *
	mifcu_ªq
;

183 } 
	mifc_ifcu
;

185 
	#ifc_buf
 
ifc_ifcu
.
ifcu_buf


	)

186 
	#ifc_ªq
 
ifc_ifcu
.
ifcu_ªq


	)

187 
	#_IOT_ifc⁄f
 
	`_IOT
(
	`_IOTS
(
ifc⁄f
),1,0,0,0,0Ë

	)

190 
__BEGIN_DECLS


193 
	$if_«mëoödex
 (c⁄° *
__i‚ame
Ë
__THROW
;

194 *
	$if_ödext⁄ame
 (
__ifödex
,

195 
__i‚ame
[
IF_NAMESIZE
]Ë
__THROW


196 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 2));

199 
if_«meödex
 *
	$if_«meödex
 (Ë
__THROW
;

202 
	$if_‰ì«meödex
 (
if_«meödex
 *
__±r
Ë
__THROW
;

204 
__END_DECLS


	@/usr/include/netinet/in.h

18 #i‚def 
_NETINET_IN_H


19 
	#_NETINET_IN_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<bôs/°döt-uöä.h
>

23 
	~<sys/sockë.h
>

24 
	~<bôs/ty≥s.h
>

27 
__BEGIN_DECLS


30 
uöt32_t
 
	tö_addr_t
;

31 
	sö_addr


33 
ö_addr_t
 
	ms_addr
;

37 
	~<bôs/ö.h
>

42 
	mIPPROTO_IP
 = 0,

43 
	#IPPROTO_IP
 
IPPROTO_IP


	)

44 
	mIPPROTO_ICMP
 = 1,

45 
	#IPPROTO_ICMP
 
IPPROTO_ICMP


	)

46 
	mIPPROTO_IGMP
 = 2,

47 
	#IPPROTO_IGMP
 
IPPROTO_IGMP


	)

48 
	mIPPROTO_IPIP
 = 4,

49 
	#IPPROTO_IPIP
 
IPPROTO_IPIP


	)

50 
	mIPPROTO_TCP
 = 6,

51 
	#IPPROTO_TCP
 
IPPROTO_TCP


	)

52 
	mIPPROTO_EGP
 = 8,

53 
	#IPPROTO_EGP
 
IPPROTO_EGP


	)

54 
	mIPPROTO_PUP
 = 12,

55 
	#IPPROTO_PUP
 
IPPROTO_PUP


	)

56 
	mIPPROTO_UDP
 = 17,

57 
	#IPPROTO_UDP
 
IPPROTO_UDP


	)

58 
	mIPPROTO_IDP
 = 22,

59 
	#IPPROTO_IDP
 
IPPROTO_IDP


	)

60 
	mIPPROTO_TP
 = 29,

61 
	#IPPROTO_TP
 
IPPROTO_TP


	)

62 
	mIPPROTO_DCCP
 = 33,

63 
	#IPPROTO_DCCP
 
IPPROTO_DCCP


	)

64 
	mIPPROTO_IPV6
 = 41,

65 
	#IPPROTO_IPV6
 
IPPROTO_IPV6


	)

66 
	mIPPROTO_RSVP
 = 46,

67 
	#IPPROTO_RSVP
 
IPPROTO_RSVP


	)

68 
	mIPPROTO_GRE
 = 47,

69 
	#IPPROTO_GRE
 
IPPROTO_GRE


	)

70 
	mIPPROTO_ESP
 = 50,

71 
	#IPPROTO_ESP
 
IPPROTO_ESP


	)

72 
	mIPPROTO_AH
 = 51,

73 
	#IPPROTO_AH
 
IPPROTO_AH


	)

74 
	mIPPROTO_MTP
 = 92,

75 
	#IPPROTO_MTP
 
IPPROTO_MTP


	)

76 
	mIPPROTO_BEETPH
 = 94,

77 
	#IPPROTO_BEETPH
 
IPPROTO_BEETPH


	)

78 
	mIPPROTO_ENCAP
 = 98,

79 
	#IPPROTO_ENCAP
 
IPPROTO_ENCAP


	)

80 
	mIPPROTO_PIM
 = 103,

81 
	#IPPROTO_PIM
 
IPPROTO_PIM


	)

82 
	mIPPROTO_COMP
 = 108,

83 
	#IPPROTO_COMP
 
IPPROTO_COMP


	)

84 
	mIPPROTO_SCTP
 = 132,

85 
	#IPPROTO_SCTP
 
IPPROTO_SCTP


	)

86 
	mIPPROTO_UDPLITE
 = 136,

87 
	#IPPROTO_UDPLITE
 
IPPROTO_UDPLITE


	)

88 
	mIPPROTO_MPLS
 = 137,

89 
	#IPPROTO_MPLS
 
IPPROTO_MPLS


	)

90 
	mIPPROTO_ETHERNET
 = 143,

91 
	#IPPROTO_ETHERNET
 
IPPROTO_ETHERNET


	)

92 
	mIPPROTO_RAW
 = 255,

93 
	#IPPROTO_RAW
 
IPPROTO_RAW


	)

94 
	mIPPROTO_MPTCP
 = 262,

95 
	#IPPROTO_MPTCP
 
IPPROTO_MPTCP


	)

96 
	mIPPROTO_MAX


102 #i‡!
__USE_KERNEL_IPV6_DEFS


105 
	mIPPROTO_HOPOPTS
 = 0,

106 
	#IPPROTO_HOPOPTS
 
IPPROTO_HOPOPTS


	)

107 
	mIPPROTO_ROUTING
 = 43,

108 
	#IPPROTO_ROUTING
 
IPPROTO_ROUTING


	)

109 
	mIPPROTO_FRAGMENT
 = 44,

110 
	#IPPROTO_FRAGMENT
 
IPPROTO_FRAGMENT


	)

111 
	mIPPROTO_ICMPV6
 = 58,

112 
	#IPPROTO_ICMPV6
 
IPPROTO_ICMPV6


	)

113 
	mIPPROTO_NONE
 = 59,

114 
	#IPPROTO_NONE
 
IPPROTO_NONE


	)

115 
	mIPPROTO_DSTOPTS
 = 60,

116 
	#IPPROTO_DSTOPTS
 
IPPROTO_DSTOPTS


	)

117 
	mIPPROTO_MH
 = 135

118 
	#IPPROTO_MH
 
IPPROTO_MH


	)

123 
uöt16_t
 
	tö_p‹t_t
;

128 
	mIPPORT_ECHO
 = 7,

129 
	mIPPORT_DISCARD
 = 9,

130 
	mIPPORT_SYSTAT
 = 11,

131 
	mIPPORT_DAYTIME
 = 13,

132 
	mIPPORT_NETSTAT
 = 15,

133 
	mIPPORT_FTP
 = 21,

134 
	mIPPORT_TELNET
 = 23,

135 
	mIPPORT_SMTP
 = 25,

136 
	mIPPORT_TIMESERVER
 = 37,

137 
	mIPPORT_NAMESERVER
 = 42,

138 
	mIPPORT_WHOIS
 = 43,

139 
	mIPPORT_MTP
 = 57,

141 
	mIPPORT_TFTP
 = 69,

142 
	mIPPORT_RJE
 = 77,

143 
	mIPPORT_FINGER
 = 79,

144 
	mIPPORT_TTYLINK
 = 87,

145 
	mIPPORT_SUPDUP
 = 95,

148 
	mIPPORT_EXECSERVER
 = 512,

149 
	mIPPORT_LOGINSERVER
 = 513,

150 
	mIPPORT_CMDSERVER
 = 514,

151 
	mIPPORT_EFSSERVER
 = 520,

154 
	mIPPORT_BIFFUDP
 = 512,

155 
	mIPPORT_WHOSERVER
 = 513,

156 
	mIPPORT_ROUTESERVER
 = 520,

159 
	mIPPORT_RESERVED
 = 1024,

162 
	mIPPORT_USERRESERVED
 = 5000

170 
	#IN_CLASSA
(
a
Ë((((
ö_addr_t
)◊)Ë& 0x80000000Ë=0)

	)

171 
	#IN_CLASSA_NET
 0xff000000

	)

172 
	#IN_CLASSA_NSHIFT
 24

	)

173 
	#IN_CLASSA_HOST
 (0xfffffff‡& ~
IN_CLASSA_NET
)

	)

174 
	#IN_CLASSA_MAX
 128

	)

176 
	#IN_CLASSB
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xc0000000Ë=0x80000000)

	)

177 
	#IN_CLASSB_NET
 0xffff0000

	)

178 
	#IN_CLASSB_NSHIFT
 16

	)

179 
	#IN_CLASSB_HOST
 (0xfffffff‡& ~
IN_CLASSB_NET
)

	)

180 
	#IN_CLASSB_MAX
 65536

	)

182 
	#IN_CLASSC
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xc0000000)

	)

183 
	#IN_CLASSC_NET
 0xffffff00

	)

184 
	#IN_CLASSC_NSHIFT
 8

	)

185 
	#IN_CLASSC_HOST
 (0xfffffff‡& ~
IN_CLASSC_NET
)

	)

187 
	#IN_CLASSD
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xe0000000)

	)

188 
	#IN_MULTICAST
(
a
Ë
	`IN_CLASSD
◊)

	)

190 
	#IN_EXPERIMENTAL
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xe0000000)

	)

191 
	#IN_BADCLASS
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xf0000000)

	)

194 
	#INADDR_ANY
 ((
ö_addr_t
Ë0x00000000)

	)

196 
	#INADDR_BROADCAST
 ((
ö_addr_t
Ë0xffffffff)

	)

198 
	#INADDR_NONE
 ((
ö_addr_t
Ë0xffffffff)

	)

201 
	#INADDR_DUMMY
 ((
ö_addr_t
Ë0xc0000008)

	)

204 
	#IN_LOOPBACKNET
 127

	)

206 #i‚de‡
INADDR_LOOPBACK


207 
	#INADDR_LOOPBACK
 ((
ö_addr_t
Ë0x7f000001Ë

	)

211 
	#INADDR_UNSPEC_GROUP
 ((
ö_addr_t
Ë0xe0000000Ë

	)

212 
	#INADDR_ALLHOSTS_GROUP
 ((
ö_addr_t
Ë0xe0000001Ë

	)

213 
	#INADDR_ALLRTRS_GROUP
 ((
ö_addr_t
Ë0xe0000002Ë

	)

214 
	#INADDR_ALLSNOOPERS_GROUP
 ((
ö_addr_t
Ë0xe000006aË

	)

215 
	#INADDR_MAX_LOCAL_GROUP
 ((
ö_addr_t
Ë0xe00000ffË

	)

217 #i‡!
__USE_KERNEL_IPV6_DEFS


219 
	sö6_addr


223 
uöt8_t
 
	m__u6_addr8
[16];

224 
uöt16_t
 
	m__u6_addr16
[8];

225 
uöt32_t
 
	m__u6_addr32
[4];

226 } 
	m__ö6_u
;

227 
	#s6_addr
 
__ö6_u
.
__u6_addr8


	)

228 #ifde‡
__USE_MISC


229 
	#s6_addr16
 
__ö6_u
.
__u6_addr16


	)

230 
	#s6_addr32
 
__ö6_u
.
__u6_addr32


	)

235 c⁄° 
ö6_addr
 
ö6addr_™y
;

236 c⁄° 
ö6_addr
 
ö6addr_lo›back
;

237 
	#IN6ADDR_ANY_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } } }

	)

238 
	#IN6ADDR_LOOPBACK_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1 } } }

	)

240 
	#INET_ADDRSTRLEN
 16

	)

241 
	#INET6_ADDRSTRLEN
 46

	)

245 
	ssockaddr_ö


247 
__SOCKADDR_COMMON
 (
sö_
);

248 
ö_p‹t_t
 
	msö_p‹t
;

249 
ö_addr
 
	msö_addr
;

252 
	msö_zîo
[ (
sockaddr
)

253 - 
__SOCKADDR_COMMON_SIZE


254 -  (
ö_p‹t_t
)

255 -  (
ö_addr
)];

258 #i‡!
__USE_KERNEL_IPV6_DEFS


260 
	ssockaddr_ö6


262 
__SOCKADDR_COMMON
 (
sö6_
);

263 
ö_p‹t_t
 
	msö6_p‹t
;

264 
uöt32_t
 
	msö6_Êowöfo
;

265 
ö6_addr
 
	msö6_addr
;

266 
uöt32_t
 
	msö6_sc›e_id
;

270 #ifde‡
__USE_MISC


272 
	sù_mªq


275 
ö_addr
 
	mimr_mu…üddr
;

278 
ö_addr
 
	mimr_öãrÁ˚
;

281 
	sù_mªq_sour˚


284 
ö_addr
 
	mimr_mu…üddr
;

287 
ö_addr
 
	mimr_öãrÁ˚
;

290 
ö_addr
 
	mimr_sour˚addr
;

294 #i‡!
__USE_KERNEL_IPV6_DEFS


296 
	sùv6_mªq


299 
ö6_addr
 
	mùv6mr_mu…üddr
;

302 
	mùv6mr_öãrÁ˚
;

306 #ifde‡
__USE_MISC


308 
	sgroup_ªq


311 
uöt32_t
 
	mgr_öãrÁ˚
;

314 
sockaddr_°‹age
 
	mgr_group
;

317 
	sgroup_sour˚_ªq


320 
uöt32_t
 
	mg§_öãrÁ˚
;

323 
sockaddr_°‹age
 
	mg§_group
;

326 
sockaddr_°‹age
 
	mg§_sour˚
;

331 
	sù_msfûãr


334 
ö_addr
 
	mimsf_mu…üddr
;

337 
ö_addr
 
	mimsf_öãrÁ˚
;

340 
uöt32_t
 
	mimsf_fmode
;

343 
uöt32_t
 
	mimsf_num§c
;

345 
ö_addr
 
	mimsf_¶i°
[1];

348 
	#IP_MSFILTER_SIZE
(
num§c
Ë( (
ù_msfûãr
) \

349 -  (
ö_addr
) \

350 + (
num§c
Ë*  (
ö_addr
))

	)

352 
	sgroup_fûãr


355 
uöt32_t
 
	mgf_öãrÁ˚
;

358 
sockaddr_°‹age
 
	mgf_group
;

361 
uöt32_t
 
	mgf_fmode
;

364 
uöt32_t
 
	mgf_num§c
;

366 
sockaddr_°‹age
 
	mgf_¶i°
[1];

369 
	#GROUP_FILTER_SIZE
(
num§c
Ë( (
group_fûãr
) \

370 -  (
sockaddr_°‹age
) \

371 + ((
num§c
) \

372 *  (
sockaddr_°‹age
)))

	)

382 
uöt32_t
 
	$¡ohl
 (
uöt32_t
 
__√é⁄g
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

383 
uöt16_t
 
	$¡ohs
 (
uöt16_t
 
__√tsh‹t
)

384 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

385 
uöt32_t
 
	$ht⁄l
 (
uöt32_t
 
__ho°l⁄g
)

386 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

387 
uöt16_t
 
	$ht⁄s
 (
uöt16_t
 
__ho°sh‹t
)

388 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

390 
	~<ídün.h
>

393 
	~<bôs/byãsw≠.h
>

394 
	~<bôs/uöä-idítôy.h
>

396 #ifde‡
__OPTIMIZE__


400 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


403 
	#¡ohl
(
x
Ë
	`__uöt32_idítôy
 (x)

	)

404 
	#¡ohs
(
x
Ë
	`__uöt16_idítôy
 (x)

	)

405 
	#ht⁄l
(
x
Ë
	`__uöt32_idítôy
 (x)

	)

406 
	#ht⁄s
(
x
Ë
	`__uöt16_idítôy
 (x)

	)

408 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


409 
	#¡ohl
(
x
Ë
	`__bsw≠_32
 (x)

	)

410 
	#¡ohs
(
x
Ë
	`__bsw≠_16
 (x)

	)

411 
	#ht⁄l
(
x
Ë
	`__bsw≠_32
 (x)

	)

412 
	#ht⁄s
(
x
Ë
	`__bsw≠_16
 (x)

	)

417 #ifde‡
__GNUC__


418 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

419 (
__exãnsi⁄__
 \

420 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

421 
__a
->
__ö6_u
.
__u6_addr32
[0] == 0 \

422 && 
__a
->
__ö6_u
.
__u6_addr32
[1] == 0 \

423 && 
__a
->
__ö6_u
.
__u6_addr32
[2] == 0 \

424 && 
__a
->
__ö6_u
.
__u6_addr32
[3] =0; 
	}
}))

	)

426 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

427 (
__exãnsi⁄__
 \

428 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

429 
__a
->
__ö6_u
.
__u6_addr32
[0] == 0 \

430 && 
__a
->
__ö6_u
.
__u6_addr32
[1] == 0 \

431 && 
__a
->
__ö6_u
.
__u6_addr32
[2] == 0 \

432 && 
__a
->
__ö6_u
.
__u6_addr32
[3] =
	`ht⁄l
 (1); }))

	)

434 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

435 (
__exãnsi⁄__
 \

436 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

437 (
__a
->
__ö6_u
.
__u6_addr32
[0] & 
	`ht⁄l
 (0xffc00000)Ë=ht⁄»(0x„800000); }))

	)

439 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

440 (
__exãnsi⁄__
 \

441 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

442 (
__a
->
__ö6_u
.
__u6_addr32
[0] & 
	`ht⁄l
 (0xffc00000)Ë=ht⁄»(0x„c00000); }))

	)

444 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

445 (
__exãnsi⁄__
 \

446 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

447 
__a
->
__ö6_u
.
__u6_addr32
[0] == 0 \

448 && 
__a
->
__ö6_u
.
__u6_addr32
[1] == 0 \

449 && 
__a
->
__ö6_u
.
__u6_addr32
[2] =
	`ht⁄l
 (0xffff); }))

	)

451 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

452 (
__exãnsi⁄__
 \

453 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

454 
__a
->
__ö6_u
.
__u6_addr32
[0] == 0 \

455 && 
__a
->
__ö6_u
.
__u6_addr32
[1] == 0 \

456 && 
__a
->
__ö6_u
.
__u6_addr32
[2] == 0 \

457 && 
	`¡ohl
 (
__a
->
__ö6_u
.
__u6_addr32
[3]Ë> 1; }))

	)

459 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

460 (
__exãnsi⁄__
 \

461 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

462 c⁄° 
ö6_addr
 *
__b
 = (c⁄° ö6_add∏*Ë(
b
); \

463 
__a
->
__ö6_u
.
__u6_addr32
[0] =
__b
->__in6_u.__u6_addr32[0] \

464 && 
__a
->
__ö6_u
.
__u6_addr32
[1] =
__b
->__in6_u.__u6_addr32[1] \

465 && 
__a
->
__ö6_u
.
__u6_addr32
[2] =
__b
->__in6_u.__u6_addr32[2] \

466 && 
__a
->
__ö6_u
.
__u6_addr32
[3] =
__b
->__ö6_u.__u6_addr32[3]; }))

	)

468 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

469 (((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0 \

470 && ((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0 \

471 && ((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0 \

472 && ((c⁄° 
uöt32_t
 *Ë(
a
))[3] =0)

	)

474 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

475 (((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0 \

476 && ((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0 \

477 && ((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0 \

478 && ((c⁄° 
uöt32_t
 *Ë(
a
))[3] =
	`ht⁄l
 (1))

	)

480 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

481 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

482 =
	`ht⁄l
 (0x„800000))

	)

484 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

485 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

486 =
	`ht⁄l
 (0x„c00000))

	)

488 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

489 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0) \

490 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0) \

491 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] =
	`ht⁄l
 (0xffff)))

	)

493 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

494 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0) \

495 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0) \

496 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0) \

497 && (
	`¡ohl
 (((c⁄° 
uöt32_t
 *Ë(
a
))[3]Ë> 1))

	)

499 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

500 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] =((c⁄° uöt32_à*Ë(
b
))[0]) \

501 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] =((c⁄° uöt32_à*Ë(
b
))[1]) \

502 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] =((c⁄° uöt32_à*Ë(
b
))[2]) \

503 && (((c⁄° 
uöt32_t
 *Ë(
a
))[3] =((c⁄° uöt32_à*Ë(
b
))[3]))

	)

506 
	#IN6_IS_ADDR_MULTICAST
(
a
Ë(((c⁄° 
uöt8_t
 *Ë◊))[0] =0xff)

	)

508 #ifde‡
__USE_MISC


510 
	$bödªsvp‹t
 (
__sockfd
, 
sockaddr_ö
 *
__sock_ö
Ë
__THROW
;

513 
	$bödªsvp‹t6
 (
__sockfd
, 
sockaddr_ö6
 *
__sock_ö
)

514 
__THROW
;

518 
	#IN6_IS_ADDR_MC_NODELOCAL
(
a
) \

519 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

520 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x1))

	)

522 
	#IN6_IS_ADDR_MC_LINKLOCAL
(
a
) \

523 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

524 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x2))

	)

526 
	#IN6_IS_ADDR_MC_SITELOCAL
(
a
) \

527 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

528 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x5))

	)

530 
	#IN6_IS_ADDR_MC_ORGLOCAL
(
a
) \

531 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

532 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x8))

	)

534 
	#IN6_IS_ADDR_MC_GLOBAL
(
a
) \

535 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

536 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0xe))

	)

539 #ifde‡
__USE_GNU


540 
cmsghdr
;

542 #i‡!
__USE_KERNEL_IPV6_DEFS


544 
	sö6_pktöfo


546 
ö6_addr
 
ùi6_addr
;

547 
ùi6_ifödex
;

551 
	sù6_mtuöfo


553 
sockaddr_ö6
 
ù6m_addr
;

554 
uöt32_t
 
ù6m_mtu
;

559 
	$öë6_›ti⁄_•a˚
 (
__nbyãs
)

560 
__THROW
 
__©åibuã_dïªˇãd__
;

561 
	$öë6_›ti⁄_öô
 (*
__bp
, 
cmsghdr
 **
__cmsgp
,

562 
__ty≥
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

563 
	$öë6_›ti⁄_≠≥nd
 (
cmsghdr
 *
__cmsg
,

564 c⁄° 
uöt8_t
 *
__ty≥p
, 
__mu…x
,

565 
__∂usy
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

566 
uöt8_t
 *
	$öë6_›ti⁄_Æloc
 (
cmsghdr
 *
__cmsg
, 
__d©Æí
,

567 
__mu…x
, 
__∂usy
)

568 
__THROW
 
__©åibuã_dïªˇãd__
;

569 
	$öë6_›ti⁄_√xt
 (c⁄° 
cmsghdr
 *
__cmsg
,

570 
uöt8_t
 **
__çåp
)

571 
__THROW
 
__©åibuã_dïªˇãd__
;

572 
	$öë6_›ti⁄_föd
 (c⁄° 
cmsghdr
 *
__cmsg
,

573 
uöt8_t
 **
__çåp
, 
__ty≥
)

574 
__THROW
 
__©åibuã_dïªˇãd__
;

578 
	$öë6_›t_öô
 (*
__extbuf
, 
sockÀn_t
 
__exéí
Ë
__THROW
;

579 
	$öë6_›t_≠≥nd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

580 
uöt8_t
 
__ty≥
, 
sockÀn_t
 
__Àn
, uöt8_à
__Æign
,

581 **
__d©abuÂ
Ë
__THROW
;

582 
	$öë6_›t_föish
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
)

583 
__THROW
;

584 
	$öë6_›t_£t_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

585 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

586 
	$öë6_›t_√xt
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

587 
uöt8_t
 *
__ty≥p
, 
sockÀn_t
 *
__À≈
,

588 **
__d©abuÂ
Ë
__THROW
;

589 
	$öë6_›t_föd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

590 
uöt8_t
 
__ty≥
, 
sockÀn_t
 *
__À≈
,

591 **
__d©abuÂ
Ë
__THROW
;

592 
	$öë6_›t_gë_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

593 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

597 
sockÀn_t
 
	$öë6_πh_•a˚
 (
__ty≥
, 
__£gmíts
Ë
__THROW
;

598 *
	$öë6_πh_öô
 (*
__bp
, 
sockÀn_t
 
__bp_Àn
, 
__ty≥
,

599 
__£gmíts
Ë
__THROW
;

600 
	$öë6_πh_add
 (*
__bp
, c⁄° 
ö6_addr
 *
__addr
Ë
__THROW
;

601 
	$öë6_πh_ªvî£
 (c⁄° *
__ö
, *
__out
Ë
__THROW
;

602 
	$öë6_πh_£gmíts
 (c⁄° *
__bp
Ë
__THROW
;

603 
ö6_addr
 *
	$öë6_πh_gëaddr
 (c⁄° *
__bp
, 
__ödex
)

604 
__THROW
;

610 
	$gëùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

611 
ö_addr
 
__group
, 
uöt32_t
 *
__fmode
,

612 
uöt32_t
 *
__num§c
, 
ö_addr
 *
__¶i°
)

613 
__THROW
;

616 
	$£tùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

617 
ö_addr
 
__group
, 
uöt32_t
 
__fmode
,

618 
uöt32_t
 
__num§c
,

619 c⁄° 
ö_addr
 *
__¶i°
)

620 
__THROW
;

624 
	$gësour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

625 c⁄° 
sockaddr
 *
__group
,

626 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 *
__fmode
,

627 
uöt32_t
 *
__num§c
,

628 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

631 
	$£tsour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

632 c⁄° 
sockaddr
 *
__group
,

633 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 
__fmode
,

634 
uöt32_t
 
__num§c
,

635 c⁄° 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

638 
__END_DECLS


	@/usr/include/netinet/tcp.h

32 #i‚de‡
_NETINET_TCP_H


33 
	#_NETINET_TCP_H
 1

	)

35 
	~<„©uªs.h
>

40 
	#TCP_NODELAY
 1

	)

41 
	#TCP_MAXSEG
 2

	)

42 
	#TCP_CORK
 3

	)

43 
	#TCP_KEEPIDLE
 4

	)

44 
	#TCP_KEEPINTVL
 5

	)

45 
	#TCP_KEEPCNT
 6

	)

46 
	#TCP_SYNCNT
 7

	)

47 
	#TCP_LINGER2
 8

	)

48 
	#TCP_DEFER_ACCEPT
 9

	)

49 
	#TCP_WINDOW_CLAMP
 10

	)

50 
	#TCP_INFO
 11

	)

51 
	#TCP_QUICKACK
 12

	)

52 
	#TCP_CONGESTION
 13

	)

53 
	#TCP_MD5SIG
 14

	)

54 
	#TCP_COOKIE_TRANSACTIONS
 15

	)

55 
	#TCP_THIN_LINEAR_TIMEOUTS
 16

	)

56 
	#TCP_THIN_DUPACK
 17

	)

57 
	#TCP_USER_TIMEOUT
 18

	)

58 
	#TCP_REPAIR
 19

	)

59 
	#TCP_REPAIR_QUEUE
 20

	)

60 
	#TCP_QUEUE_SEQ
 21

	)

61 
	#TCP_REPAIR_OPTIONS
 22

	)

62 
	#TCP_FASTOPEN
 23

	)

63 
	#TCP_TIMESTAMP
 24

	)

64 
	#TCP_NOTSENT_LOWAT
 25

	)

66 
	#TCP_CC_INFO
 26

	)

68 
	#TCP_SAVE_SYN
 27

	)

70 
	#TCP_SAVED_SYN
 28

	)

72 
	#TCP_REPAIR_WINDOW
 29

	)

73 
	#TCP_FASTOPEN_CONNECT
 30

	)

74 
	#TCP_ULP
 31

	)

75 
	#TCP_MD5SIG_EXT
 32

	)

76 
	#TCP_FASTOPEN_KEY
 33

	)

77 
	#TCP_FASTOPEN_NO_COOKIE
 34

	)

78 
	#TCP_ZEROCOPY_RECEIVE
 35

	)

79 
	#TCP_INQ
 36

	)

81 
	#TCP_CM_INQ
 
TCP_INQ


	)

82 
	#TCP_TX_DELAY
 37

	)

84 
	#TCP_REPAIR_ON
 1

	)

85 
	#TCP_REPAIR_OFF
 0

	)

86 
	#TCP_REPAIR_OFF_NO_WP
 -1

	)

88 #ifde‡
__USE_MISC


89 
	~<sys/ty≥s.h
>

90 
	~<sys/sockë.h
>

91 
	~<°döt.h
>

93 
uöt32_t
 
	tt˝_£q
;

98 
	st˝hdr


100 
__exãnsi⁄__
 union

104 
uöt16_t
 
	mth_•‹t
;

105 
uöt16_t
 
	mth_dp‹t
;

106 
t˝_£q
 
	mth_£q
;

107 
t˝_£q
 
	mth_ack
;

108 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


109 
uöt8_t
 
	mth_x2
:4;

110 
uöt8_t
 
	mth_off
:4;

112 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


113 
uöt8_t
 
	mth_off
:4;

114 
uöt8_t
 
	mth_x2
:4;

116 
uöt8_t
 
	mth_Êags
;

117 
	#TH_FIN
 0x01

	)

118 
	#TH_SYN
 0x02

	)

119 
	#TH_RST
 0x04

	)

120 
	#TH_PUSH
 0x08

	)

121 
	#TH_ACK
 0x10

	)

122 
	#TH_URG
 0x20

	)

123 
uöt16_t
 
	mth_wö
;

124 
uöt16_t
 
	mth_sum
;

125 
uöt16_t
 
	mth_uΩ
;

129 
uöt16_t
 
	msour˚
;

130 
uöt16_t
 
	mde°
;

131 
uöt32_t
 
	m£q
;

132 
uöt32_t
 
	mack_£q
;

133 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


134 
uöt16_t
 
	mªs1
:4;

135 
uöt16_t
 
	mdoff
:4;

136 
uöt16_t
 
	mfö
:1;

137 
uöt16_t
 
	msyn
:1;

138 
uöt16_t
 
	mr°
:1;

139 
uöt16_t
 
	mpsh
:1;

140 
uöt16_t
 
	mack
:1;

141 
uöt16_t
 
	murg
:1;

142 
uöt16_t
 
	mªs2
:2;

143 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


144 
uöt16_t
 
	mdoff
:4;

145 
uöt16_t
 
	mªs1
:4;

146 
uöt16_t
 
	mªs2
:2;

147 
uöt16_t
 
	murg
:1;

148 
uöt16_t
 
	mack
:1;

149 
uöt16_t
 
	mpsh
:1;

150 
uöt16_t
 
	mr°
:1;

151 
uöt16_t
 
	msyn
:1;

152 
uöt16_t
 
	mfö
:1;

156 
uöt16_t
 
	mwödow
;

157 
uöt16_t
 
	mcheck
;

158 
uöt16_t
 
	murg_±r
;

165 
	mTCP_ESTABLISHED
 = 1,

166 
	mTCP_SYN_SENT
,

167 
	mTCP_SYN_RECV
,

168 
	mTCP_FIN_WAIT1
,

169 
	mTCP_FIN_WAIT2
,

170 
	mTCP_TIME_WAIT
,

171 
	mTCP_CLOSE
,

172 
	mTCP_CLOSE_WAIT
,

173 
	mTCP_LAST_ACK
,

174 
	mTCP_LISTEN
,

175 
	mTCP_CLOSING


178 
	#TCPOPT_EOL
 0

	)

179 
	#TCPOPT_NOP
 1

	)

180 
	#TCPOPT_MAXSEG
 2

	)

181 
	#TCPOLEN_MAXSEG
 4

	)

182 
	#TCPOPT_WINDOW
 3

	)

183 
	#TCPOLEN_WINDOW
 3

	)

184 
	#TCPOPT_SACK_PERMITTED
 4

	)

185 
	#TCPOLEN_SACK_PERMITTED
 2

	)

186 
	#TCPOPT_SACK
 5

	)

187 
	#TCPOPT_TIMESTAMP
 8

	)

188 
	#TCPOLEN_TIMESTAMP
 10

	)

189 
	#TCPOLEN_TSTAMP_APPA
 (
TCPOLEN_TIMESTAMP
+2Ë

	)

191 
	#TCPOPT_TSTAMP_HDR
 \

192 (
TCPOPT_NOP
<<24|TCPOPT_NOP<<16|
TCPOPT_TIMESTAMP
<<8|
TCPOLEN_TIMESTAMP
)

	)

200 
	#TCP_MSS
 512

	)

202 
	#TCP_MAXWIN
 65535

	)

204 
	#TCP_MAX_WINSHIFT
 14

	)

206 
	#SOL_TCP
 6

	)

209 
	#TCPI_OPT_TIMESTAMPS
 1

	)

210 
	#TCPI_OPT_SACK
 2

	)

211 
	#TCPI_OPT_WSCALE
 4

	)

212 
	#TCPI_OPT_ECN
 8

	)

213 
	#TCPI_OPT_ECN_SEEN
 16

	)

214 
	#TCPI_OPT_SYN_DATA
 32

	)

217 
	et˝_ˇ_°©e


219 
	mTCP_CA_O≥n
 = 0,

220 
	mTCP_CA_Dis‹dî
 = 1,

221 
	mTCP_CA_CWR
 = 2,

222 
	mTCP_CA_Recovîy
 = 3,

223 
	mTCP_CA_Loss
 = 4

226 
	st˝_öfo


228 
uöt8_t
 
	mt˝i_°©e
;

229 
uöt8_t
 
	mt˝i_ˇ_°©e
;

230 
uöt8_t
 
	mt˝i_ªå™smôs
;

231 
uöt8_t
 
	mt˝i_¥obes
;

232 
uöt8_t
 
	mt˝i_backoff
;

233 
uöt8_t
 
	mt˝i_›ti⁄s
;

234 
uöt8_t
 
	mt˝i_¢d_wsˇÀ
 : 4, 
	mt˝i_rcv_wsˇÀ
 : 4;

236 
uöt32_t
 
	mt˝i_πo
;

237 
uöt32_t
 
	mt˝i_©o
;

238 
uöt32_t
 
	mt˝i_¢d_mss
;

239 
uöt32_t
 
	mt˝i_rcv_mss
;

241 
uöt32_t
 
	mt˝i_u«cked
;

242 
uöt32_t
 
	mt˝i_ßcked
;

243 
uöt32_t
 
	mt˝i_lo°
;

244 
uöt32_t
 
	mt˝i_ªå™s
;

245 
uöt32_t
 
	mt˝i_Áckës
;

248 
uöt32_t
 
	mt˝i_œ°_d©a_£¡
;

249 
uöt32_t
 
	mt˝i_œ°_ack_£¡
;

250 
uöt32_t
 
	mt˝i_œ°_d©a_ªcv
;

251 
uöt32_t
 
	mt˝i_œ°_ack_ªcv
;

254 
uöt32_t
 
	mt˝i_pmtu
;

255 
uöt32_t
 
	mt˝i_rcv_s°hªsh
;

256 
uöt32_t
 
	mt˝i_πt
;

257 
uöt32_t
 
	mt˝i_πtv¨
;

258 
uöt32_t
 
	mt˝i_¢d_s°hªsh
;

259 
uöt32_t
 
	mt˝i_¢d_cwnd
;

260 
uöt32_t
 
	mt˝i_advmss
;

261 
uöt32_t
 
	mt˝i_ª‹dîög
;

263 
uöt32_t
 
	mt˝i_rcv_πt
;

264 
uöt32_t
 
	mt˝i_rcv_•a˚
;

266 
uöt32_t
 
	mt˝i_tŸÆ_ªå™s
;

271 
	#TCP_MD5SIG_MAXKEYLEN
 80

	)

274 
	#TCP_MD5SIG_FLAG_PREFIX
 1

	)

276 
	st˝_md5sig


278 
sockaddr_°‹age
 
	mt˝m_addr
;

279 
uöt8_t
 
	mt˝m_Êags
;

280 
uöt8_t
 
	mt˝m_¥efixÀn
;

281 
uöt16_t
 
	mt˝m_keyÀn
;

282 
uöt32_t
 
	m__t˝m_∑d
;

283 
uöt8_t
 
	mt˝m_key
[
TCP_MD5SIG_MAXKEYLEN
];

287 
	st˝_ª∑ú_›t


289 
uöt32_t
 
	m›t_code
;

290 
uöt32_t
 
	m›t_vÆ
;

296 
	mTCP_NO_QUEUE
,

297 
	mTCP_RECV_QUEUE
,

298 
	mTCP_SEND_QUEUE
,

299 
	mTCP_QUEUES_NR
,

303 
	#TCP_COOKIE_MIN
 8

	)

304 
	#TCP_COOKIE_MAX
 16

	)

305 
	#TCP_COOKIE_PAIR_SIZE
 (2*
TCP_COOKIE_MAX
)

	)

308 
	#TCP_COOKIE_IN_ALWAYS
 (1 << 0Ë

	)

309 
	#TCP_COOKIE_OUT_NEVER
 (1 << 1Ë

	)

313 
	#TCP_S_DATA_IN
 (1 << 2Ë

	)

314 
	#TCP_S_DATA_OUT
 (1 << 3Ë

	)

316 
	#TCP_MSS_DEFAULT
 536U

	)

317 
	#TCP_MSS_DESIRED
 1220U

	)

319 
	st˝_cookõ_å™ß˘i⁄s


321 
uöt16_t
 
	mt˝˘_Êags
;

322 
uöt8_t
 
	m__t˝˘_∑d1
;

323 
uöt8_t
 
	mt˝˘_cookõ_desúed
;

324 
uöt16_t
 
	mt˝˘_s_d©a_desúed
;

325 
uöt16_t
 
	mt˝˘_u£d
;

326 
uöt8_t
 
	mt˝˘_vÆue
[
TCP_MSS_DEFAULT
];

330 
	st˝_ª∑ú_wödow


332 
uöt32_t
 
	m¢d_wl1
;

333 
uöt32_t
 
	m¢d_wnd
;

334 
uöt32_t
 
	mmax_wödow
;

335 
uöt32_t
 
	mrcv_wnd
;

336 
uöt32_t
 
	mrcv_wup
;

340 
	st˝_zîoc›y_ª˚ive


342 
uöt64_t
 
	maddªss
;

343 
uöt32_t
 
	mÀngth
;

344 
uöt32_t
 
	mªcv_skù_höt
;

	@/usr/include/openssl/bn.h

11 #i‚de‡
OPENSSL_BN_H


12 
	#OPENSSL_BN_H


	)

13 #¥agm®
⁄˚


15 
	~<›ís¶/ma¸os.h
>

16 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


17 
	#HEADER_BN_H


	)

20 
	~<›ís¶/e_os2.h
>

21 #i‚de‡
OPENSSL_NO_STDIO


22 
	~<°dio.h
>

24 
	~<›ís¶/›ís¶c⁄f.h
>

25 
	~<›ís¶/ty≥s.h
>

26 
	~<›ís¶/¸y±o.h
>

27 
	~<›ís¶/b√º.h
>

29 #ifde‡ 
__˝lu•lus


36 #ifde‡
SIXTY_FOUR_BIT_LONG


37 
	#BN_ULONG
 

	)

38 
	#BN_BYTES
 8

	)

44 #ifde‡
SIXTY_FOUR_BIT


45 
	#BN_ULONG
 

	)

46 
	#BN_BYTES
 8

	)

49 #ifde‡
THIRTY_TWO_BIT


50 
	#BN_ULONG
 

	)

51 
	#BN_BYTES
 4

	)

54 
	#BN_BITS2
 (
BN_BYTES
 * 8)

	)

55 
	#BN_BITS
 (
BN_BITS2
 * 2)

	)

56 
	#BN_TBIT
 ((
BN_ULONG
)1 << (
BN_BITS2
 - 1))

	)

58 
	#BN_FLG_MALLOCED
 0x01

	)

59 
	#BN_FLG_STATIC_DATA
 0x02

	)

67 
	#BN_FLG_CONSTTIME
 0x04

	)

68 
	#BN_FLG_SECURE
 0x08

	)

70 #i‚de‡
OPENSSL_NO_DEPRECATED_0_9_8


72 
	#BN_FLG_EXP_CONSTTIME
 
BN_FLG_CONSTTIME


	)

73 
	#BN_FLG_FREE
 0x8000

	)

76 
BN_£t_Êags
(
BIGNUM
 *
b
, 
n
);

77 
BN_gë_Êags
(c⁄° 
BIGNUM
 *
b
, 
n
);

80 
	#BN_RAND_TOP_ANY
 -1

	)

81 
	#BN_RAND_TOP_ONE
 0

	)

82 
	#BN_RAND_TOP_TWO
 1

	)

85 
	#BN_RAND_BOTTOM_ANY
 0

	)

86 
	#BN_RAND_BOTTOM_ODD
 1

	)

94 
BN_wôh_Êags
(
BIGNUM
 *
de°
, c⁄° BIGNUM *
b
, 
Êags
);

97 
BN_GENCB_ˇŒ
(
BN_GENCB
 *
cb
, 
a
, 
b
);

99 
BN_GENCB
 *
BN_GENCB_√w
();

100 
BN_GENCB_‰ì
(
BN_GENCB
 *
cb
);

103 
BN_GENCB_£t_ﬁd
(
BN_GENCB
 *
gícb
, (*
ˇŒback
) (, , *),

104 *
cb_¨g
);

107 
BN_GENCB_£t
(
BN_GENCB
 *
gícb
, (*
ˇŒback
) (, , BN_GENCB *),

108 *
cb_¨g
);

110 *
BN_GENCB_gë_¨g
(
BN_GENCB
 *
cb
);

112 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


113 
	#BN_¥ime_checks
 0

	)

179 
	#BN_¥ime_checks_f‹_size
(
b
) ((b) >= 3747 ? 3 : \

180 (
b
) >= 1345 ? 4 : \

181 (
b
) >= 476 ? 5 : \

182 (
b
) >= 400 ? 6 : \

183 (
b
) >= 347 ? 7 : \

184 (
b
) >= 308 ? 8 : \

185 (
b
) >= 55 ? 27 : \

186  34)

	)

189 
	#BN_num_byãs
(
a
Ë((
	`BN_num_bôs
◊)+7)/8)

	)

191 
BN_abs_is_w‹d
(c⁄° 
BIGNUM
 *
a
, c⁄° 
BN_ULONG
 
w
);

192 
BN_is_zîo
(c⁄° 
BIGNUM
 *
a
);

193 
BN_is_⁄e
(c⁄° 
BIGNUM
 *
a
);

194 
BN_is_w‹d
(c⁄° 
BIGNUM
 *
a
, c⁄° 
BN_ULONG
 
w
);

195 
BN_is_odd
(c⁄° 
BIGNUM
 *
a
);

197 
	#BN_⁄e
(
a
Ë(
	`BN_£t_w‹d
(◊),1))

	)

199 
BN_zîo_ex
(
BIGNUM
 *
a
);

201 #i‡
OPENSSL_API_LEVEL
 > 908

202 
	#BN_zîo
(
a
Ë
	`BN_zîo_ex
◊)

	)

204 
	#BN_zîo
(
a
Ë(
	`BN_£t_w‹d
(◊),0))

	)

207 c⁄° 
BIGNUM
 *
BN_vÆue_⁄e
();

208 *
BN_›ti⁄s
();

209 
BN_CTX
 *
BN_CTX_√w_ex
(
OSSL_LIB_CTX
 *
˘x
);

210 
BN_CTX
 *
BN_CTX_√w
();

211 
BN_CTX
 *
BN_CTX_£cuª_√w_ex
(
OSSL_LIB_CTX
 *
˘x
);

212 
BN_CTX
 *
BN_CTX_£cuª_√w
();

213 
BN_CTX_‰ì
(
BN_CTX
 *
c
);

214 
BN_CTX_°¨t
(
BN_CTX
 *
˘x
);

215 
BIGNUM
 *
BN_CTX_gë
(
BN_CTX
 *
˘x
);

216 
BN_CTX_íd
(
BN_CTX
 *
˘x
);

217 
BN_ønd_ex
(
BIGNUM
 *
∫d
, 
bôs
, 
t›
, 
bŸtom
,

218 
°ªngth
, 
BN_CTX
 *
˘x
);

219 
BN_ønd
(
BIGNUM
 *
∫d
, 
bôs
, 
t›
, 
bŸtom
);

220 
BN_¥iv_ønd_ex
(
BIGNUM
 *
∫d
, 
bôs
, 
t›
, 
bŸtom
,

221 
°ªngth
, 
BN_CTX
 *
˘x
);

222 
BN_¥iv_ønd
(
BIGNUM
 *
∫d
, 
bôs
, 
t›
, 
bŸtom
);

223 
BN_ønd_ønge_ex
(
BIGNUM
 *
r
, c⁄° BIGNUM *
ønge
, 
°ªngth
,

224 
BN_CTX
 *
˘x
);

225 
BN_ønd_ønge
(
BIGNUM
 *
∫d
, c⁄° BIGNUM *
ønge
);

226 
BN_¥iv_ønd_ønge_ex
(
BIGNUM
 *
r
, c⁄° BIGNUM *
ønge
,

227 
°ªngth
, 
BN_CTX
 *
˘x
);

228 
BN_¥iv_ønd_ønge
(
BIGNUM
 *
∫d
, c⁄° BIGNUM *
ønge
);

229 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


230 
OSSL_DEPRECATEDIN_3_0


231 
BN_p£udo_ønd
(
BIGNUM
 *
∫d
, 
bôs
, 
t›
, 
bŸtom
);

232 
OSSL_DEPRECATEDIN_3_0


233 
BN_p£udo_ønd_ønge
(
BIGNUM
 *
∫d
, c⁄° BIGNUM *
ønge
);

235 
BN_num_bôs
(c⁄° 
BIGNUM
 *
a
);

236 
BN_num_bôs_w‹d
(
BN_ULONG
 
l
);

237 
BN_£curôy_bôs
(
L
, 
N
);

238 
BIGNUM
 *
BN_√w
();

239 
BIGNUM
 *
BN_£cuª_√w
();

240 
BN_˛ór_‰ì
(
BIGNUM
 *
a
);

241 
BIGNUM
 *
BN_c›y
(BIGNUM *
a
, c⁄° BIGNUM *
b
);

242 
BN_sw≠
(
BIGNUM
 *
a
, BIGNUM *
b
);

243 
BIGNUM
 *
BN_bö2bn
(c⁄° *
s
, 
Àn
, BIGNUM *
ªt
);

244 
BN_bn2bö
(c⁄° 
BIGNUM
 *
a
, *
to
);

245 
BN_bn2bö∑d
(c⁄° 
BIGNUM
 *
a
, *
to
, 
tﬁí
);

246 
BIGNUM
 *
BN_Àbö2bn
(c⁄° *
s
, 
Àn
, BIGNUM *
ªt
);

247 
BN_bn2Àbö∑d
(c⁄° 
BIGNUM
 *
a
, *
to
, 
tﬁí
);

248 
BIGNUM
 *
BN_«tive2bn
(c⁄° *
s
, 
Àn
, BIGNUM *
ªt
);

249 
BN_bn2«tivïad
(c⁄° 
BIGNUM
 *
a
, *
to
, 
tﬁí
);

250 
BIGNUM
 *
BN_mpi2bn
(c⁄° *
s
, 
Àn
, BIGNUM *
ªt
);

251 
BN_bn2mpi
(c⁄° 
BIGNUM
 *
a
, *
to
);

252 
BN_sub
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
);

253 
BN_usub
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
);

254 
BN_uadd
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
);

255 
BN_add
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
);

256 
BN_mul
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
, 
BN_CTX
 *
˘x
);

257 
BN_sqr
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, 
BN_CTX
 *
˘x
);

262 
BN_£t_√g©ive
(
BIGNUM
 *
b
, 
n
);

267 
BN_is_√g©ive
(c⁄° 
BIGNUM
 *
b
);

269 
BN_div
(
BIGNUM
 *
dv
, BIGNUM *
ªm
, c⁄° BIGNUM *
m
, c⁄° BIGNUM *
d
,

270 
BN_CTX
 *
˘x
);

271 
	#BN_mod
(
ªm
,
m
,
d
,
˘x
Ë
	`BN_div
(
NULL
,‘em),(m),(d),(˘x))

	)

272 
BN_¬mod
(
BIGNUM
 *
r
, c⁄° BIGNUM *
m
, c⁄° BIGNUM *
d
, 
BN_CTX
 *
˘x
);

273 
BN_mod_add
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
, c⁄° BIGNUM *
m
,

274 
BN_CTX
 *
˘x
);

275 
BN_mod_add_quick
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
,

276 c⁄° 
BIGNUM
 *
m
);

277 
BN_mod_sub
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
, c⁄° BIGNUM *
m
,

278 
BN_CTX
 *
˘x
);

279 
BN_mod_sub_quick
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
,

280 c⁄° 
BIGNUM
 *
m
);

281 
BN_mod_mul
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
, c⁄° BIGNUM *
m
,

282 
BN_CTX
 *
˘x
);

283 
BN_mod_sqr
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
m
, 
BN_CTX
 *
˘x
);

284 
BN_mod_lshi·1
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
m
, 
BN_CTX
 *
˘x
);

285 
BN_mod_lshi·1_quick
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
m
);

286 
BN_mod_lshi·
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, 
n
, c⁄° BIGNUM *
m
,

287 
BN_CTX
 *
˘x
);

288 
BN_mod_lshi·_quick
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, 
n
, c⁄° BIGNUM *
m
);

290 
BN_ULONG
 
BN_mod_w‹d
(c⁄° 
BIGNUM
 *
a
, BN_ULONG 
w
);

291 
BN_ULONG
 
BN_div_w‹d
(
BIGNUM
 *
a
, BN_ULONG 
w
);

292 
BN_mul_w‹d
(
BIGNUM
 *
a
, 
BN_ULONG
 
w
);

293 
BN_add_w‹d
(
BIGNUM
 *
a
, 
BN_ULONG
 
w
);

294 
BN_sub_w‹d
(
BIGNUM
 *
a
, 
BN_ULONG
 
w
);

295 
BN_£t_w‹d
(
BIGNUM
 *
a
, 
BN_ULONG
 
w
);

296 
BN_ULONG
 
BN_gë_w‹d
(c⁄° 
BIGNUM
 *
a
);

298 
BN_cmp
(c⁄° 
BIGNUM
 *
a
, c⁄° BIGNUM *
b
);

299 
BN_‰ì
(
BIGNUM
 *
a
);

300 
BN_is_bô_£t
(c⁄° 
BIGNUM
 *
a
, 
n
);

301 
BN_lshi·
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, 
n
);

302 
BN_lshi·1
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
);

303 
BN_exp
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
, 
BN_CTX
 *
˘x
);

305 
BN_mod_exp
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

306 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
);

307 
BN_mod_exp_m⁄t
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

308 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
, 
BN_MONT_CTX
 *
m_˘x
);

309 
BN_mod_exp_m⁄t_c⁄°time
(
BIGNUM
 *
º
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

310 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
,

311 
BN_MONT_CTX
 *
ö_m⁄t
);

312 
BN_mod_exp_m⁄t_w‹d
(
BIGNUM
 *
r
, 
BN_ULONG
 
a
, c⁄° BIGNUM *
p
,

313 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
, 
BN_MONT_CTX
 *
m_˘x
);

314 
BN_mod_exp2_m⁄t
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a1
, c⁄° BIGNUM *
p1
,

315 c⁄° 
BIGNUM
 *
a2
, c⁄° BIGNUM *
p2
, c⁄° BIGNUM *
m
,

316 
BN_CTX
 *
˘x
, 
BN_MONT_CTX
 *
m_˘x
);

317 
BN_mod_exp_sim∂e
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

318 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
);

319 
BN_mod_exp_m⁄t_c⁄°time_x2
(
BIGNUM
 *
º1
, c⁄° BIGNUM *
a1
, c⁄° BIGNUM *
p1
,

320 c⁄° 
BIGNUM
 *
m1
, 
BN_MONT_CTX
 *
ö_m⁄t1
,

321 
BIGNUM
 *
º2
, c⁄° BIGNUM *
a2
, c⁄° BIGNUM *
p2
,

322 c⁄° 
BIGNUM
 *
m2
, 
BN_MONT_CTX
 *
ö_m⁄t2
,

323 
BN_CTX
 *
˘x
);

325 
BN_mask_bôs
(
BIGNUM
 *
a
, 
n
);

326 #i‚de‡
OPENSSL_NO_STDIO


327 
BN_¥öt_Â
(
FILE
 *
Â
, c⁄° 
BIGNUM
 *
a
);

329 
BN_¥öt
(
BIO
 *
bio
, c⁄° 
BIGNUM
 *
a
);

330 
BN_ªcùroˇl
(
BIGNUM
 *
r
, c⁄° BIGNUM *
m
, 
Àn
, 
BN_CTX
 *
˘x
);

331 
BN_rshi·
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, 
n
);

332 
BN_rshi·1
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
);

333 
BN_˛ór
(
BIGNUM
 *
a
);

334 
BIGNUM
 *
BN_dup
(c⁄° BIGNUM *
a
);

335 
BN_ucmp
(c⁄° 
BIGNUM
 *
a
, c⁄° BIGNUM *
b
);

336 
BN_£t_bô
(
BIGNUM
 *
a
, 
n
);

337 
BN_˛ór_bô
(
BIGNUM
 *
a
, 
n
);

338 *
BN_bn2hex
(c⁄° 
BIGNUM
 *
a
);

339 *
BN_bn2dec
(c⁄° 
BIGNUM
 *
a
);

340 
BN_hex2bn
(
BIGNUM
 **
a
, c⁄° *
°r
);

341 
BN_dec2bn
(
BIGNUM
 **
a
, c⁄° *
°r
);

342 
BN_asc2bn
(
BIGNUM
 **
a
, c⁄° *
°r
);

343 
BN_gcd
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
, 
BN_CTX
 *
˘x
);

344 
BN_kr⁄eckî
(c⁄° 
BIGNUM
 *
a
, c⁄° BIGNUM *
b
, 
BN_CTX
 *
˘x
);

347 
BIGNUM
 *
BN_mod_övî£
(BIGNUM *
ªt
,

348 c⁄° 
BIGNUM
 *
a
, c⁄° BIGNUM *
n
, 
BN_CTX
 *
˘x
);

349 
BIGNUM
 *
BN_mod_sqπ
(BIGNUM *
ªt
,

350 c⁄° 
BIGNUM
 *
a
, c⁄° BIGNUM *
n
, 
BN_CTX
 *
˘x
);

352 
BN_c⁄°time_sw≠
(
BN_ULONG
 
sw≠
, 
BIGNUM
 *
a
, BIGNUM *
b
, 
nw‹ds
);

355 #i‚de‡
OPENSSL_NO_DEPRECATED_0_9_8


356 
OSSL_DEPRECATEDIN_0_9_8


357 
BIGNUM
 *
BN_gíî©e_¥ime
(BIGNUM *
ªt
, 
bôs
, 
ß„
,

358 c⁄° 
BIGNUM
 *
add
, c⁄° BIGNUM *
ªm
,

359 (*
ˇŒback
) (, , *),

360 *
cb_¨g
);

361 
OSSL_DEPRECATEDIN_0_9_8


362 
BN_is_¥ime
(c⁄° 
BIGNUM
 *
p
, 
nchecks
,

363 (*
ˇŒback
) (, , *),

364 
BN_CTX
 *
˘x
, *
cb_¨g
);

365 
OSSL_DEPRECATEDIN_0_9_8


366 
BN_is_¥ime_Á°ã°
(c⁄° 
BIGNUM
 *
p
, 
nchecks
,

367 (*
ˇŒback
) (, , *),

368 
BN_CTX
 *
˘x
, *
cb_¨g
,

369 
do_åül_divisi⁄
);

371 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


372 
OSSL_DEPRECATEDIN_3_0


373 
BN_is_¥ime_ex
(c⁄° 
BIGNUM
 *
p
, 
nchecks
, 
BN_CTX
 *
˘x
, 
BN_GENCB
 *
cb
);

374 
OSSL_DEPRECATEDIN_3_0


375 
BN_is_¥ime_Á°ã°_ex
(c⁄° 
BIGNUM
 *
p
, 
nchecks
, 
BN_CTX
 *
˘x
,

376 
do_åül_divisi⁄
, 
BN_GENCB
 *
cb
);

379 
BN_gíî©e_¥ime_ex2
(
BIGNUM
 *
ªt
, 
bôs
, 
ß„
,

380 c⁄° 
BIGNUM
 *
add
, c⁄° BIGNUM *
ªm
, 
BN_GENCB
 *
cb
,

381 
BN_CTX
 *
˘x
);

382 
BN_gíî©e_¥ime_ex
(
BIGNUM
 *
ªt
, 
bôs
, 
ß„
, c⁄° BIGNUM *
add
,

383 c⁄° 
BIGNUM
 *
ªm
, 
BN_GENCB
 *
cb
);

384 
BN_check_¥ime
(c⁄° 
BIGNUM
 *
p
, 
BN_CTX
 *
˘x
, 
BN_GENCB
 *
cb
);

386 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


387 
OSSL_DEPRECATEDIN_3_0


388 
BN_X931_gíî©e_Xpq
(
BIGNUM
 *
Xp
, BIGNUM *
Xq
, 
nbôs
, 
BN_CTX
 *
˘x
);

390 
OSSL_DEPRECATEDIN_3_0


391 
BN_X931_dîive_¥ime_ex
(
BIGNUM
 *
p
, BIGNUM *
p1
, BIGNUM *
p2
,

392 c⁄° 
BIGNUM
 *
Xp
, c⁄° BIGNUM *
Xp1
,

393 c⁄° 
BIGNUM
 *
Xp2
, c⁄° BIGNUM *
e
, 
BN_CTX
 *
˘x
,

394 
BN_GENCB
 *
cb
);

395 
OSSL_DEPRECATEDIN_3_0


396 
BN_X931_gíî©e_¥ime_ex
(
BIGNUM
 *
p
, BIGNUM *
p1
, BIGNUM *
p2
, BIGNUM *
Xp1
,

397 
BIGNUM
 *
Xp2
, c⁄° BIGNUM *
Xp
, c⁄° BIGNUM *
e
,

398 
BN_CTX
 *
˘x
, 
BN_GENCB
 *
cb
);

401 
BN_MONT_CTX
 *
BN_MONT_CTX_√w
();

402 
BN_mod_mul_m⁄tgomîy
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
,

403 
BN_MONT_CTX
 *
m⁄t
, 
BN_CTX
 *
˘x
);

404 
BN_to_m⁄tgomîy
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, 
BN_MONT_CTX
 *
m⁄t
,

405 
BN_CTX
 *
˘x
);

406 
BN_‰om_m⁄tgomîy
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, 
BN_MONT_CTX
 *
m⁄t
,

407 
BN_CTX
 *
˘x
);

408 
BN_MONT_CTX_‰ì
(
BN_MONT_CTX
 *
m⁄t
);

409 
BN_MONT_CTX_£t
(
BN_MONT_CTX
 *
m⁄t
, c⁄° 
BIGNUM
 *
mod
, 
BN_CTX
 *
˘x
);

410 
BN_MONT_CTX
 *
BN_MONT_CTX_c›y
(BN_MONT_CTX *
to
, BN_MONT_CTX *
‰om
);

411 
BN_MONT_CTX
 *
BN_MONT_CTX_£t_locked
(BN_MONT_CTX **
pm⁄t
, 
CRYPTO_RWLOCK
 *
lock
,

412 c⁄° 
BIGNUM
 *
mod
, 
BN_CTX
 *
˘x
);

415 
	#BN_BLINDING_NO_UPDATE
 0x00000001

	)

416 
	#BN_BLINDING_NO_RECREATE
 0x00000002

	)

418 
BN_BLINDING
 *
BN_BLINDING_√w
(c⁄° 
BIGNUM
 *
A
, c⁄° BIGNUM *
Ai
, BIGNUM *
mod
);

419 
BN_BLINDING_‰ì
(
BN_BLINDING
 *
b
);

420 
BN_BLINDING_upd©e
(
BN_BLINDING
 *
b
, 
BN_CTX
 *
˘x
);

421 
BN_BLINDING_c⁄vît
(
BIGNUM
 *
n
, 
BN_BLINDING
 *
b
, 
BN_CTX
 *
˘x
);

422 
BN_BLINDING_övît
(
BIGNUM
 *
n
, 
BN_BLINDING
 *
b
, 
BN_CTX
 *
˘x
);

423 
BN_BLINDING_c⁄vît_ex
(
BIGNUM
 *
n
, BIGNUM *
r
, 
BN_BLINDING
 *
b
, 
BN_CTX
 *);

424 
BN_BLINDING_övît_ex
(
BIGNUM
 *
n
, c⁄° BIGNUM *
r
, 
BN_BLINDING
 *
b
,

425 
BN_CTX
 *);

427 
BN_BLINDING_is_cuºít_thªad
(
BN_BLINDING
 *
b
);

428 
BN_BLINDING_£t_cuºít_thªad
(
BN_BLINDING
 *
b
);

429 
BN_BLINDING_lock
(
BN_BLINDING
 *
b
);

430 
BN_BLINDING_u∆ock
(
BN_BLINDING
 *
b
);

432 
BN_BLINDING_gë_Êags
(c⁄° 
BN_BLINDING
 *);

433 
BN_BLINDING_£t_Êags
(
BN_BLINDING
 *, );

434 
BN_BLINDING
 *
BN_BLINDING_¸óã_∑øm
(BN_BLINDING *
b
,

435 c⁄° 
BIGNUM
 *
e
, BIGNUM *
m
, 
BN_CTX
 *
˘x
,

436 (*
bn_mod_exp
Ë(
BIGNUM
 *
r
,

437 c⁄° 
BIGNUM
 *
a
,

438 c⁄° 
BIGNUM
 *
p
,

439 c⁄° 
BIGNUM
 *
m
,

440 
BN_CTX
 *
˘x
,

441 
BN_MONT_CTX
 *
m_˘x
),

442 
BN_MONT_CTX
 *
m_˘x
);

443 #i‚de‡
OPENSSL_NO_DEPRECATED_0_9_8


444 
OSSL_DEPRECATEDIN_0_9_8


445 
BN_£t_∑øms
(
mul
, 
high
, 
low
, 
m⁄t
);

446 
OSSL_DEPRECATEDIN_0_9_8


447 
BN_gë_∑øms
(
which
);

450 
BN_RECP_CTX
 *
BN_RECP_CTX_√w
();

451 
BN_RECP_CTX_‰ì
(
BN_RECP_CTX
 *
ª˝
);

452 
BN_RECP_CTX_£t
(
BN_RECP_CTX
 *
ª˝
, c⁄° 
BIGNUM
 *
rdiv
, 
BN_CTX
 *
˘x
);

453 
BN_mod_mul_ªcùroˇl
(
BIGNUM
 *
r
, c⁄° BIGNUM *
x
, c⁄° BIGNUM *
y
,

454 
BN_RECP_CTX
 *
ª˝
, 
BN_CTX
 *
˘x
);

455 
BN_mod_exp_ª˝
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

456 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
);

457 
BN_div_ª˝
(
BIGNUM
 *
dv
, BIGNUM *
ªm
, c⁄° BIGNUM *
m
,

458 
BN_RECP_CTX
 *
ª˝
, 
BN_CTX
 *
˘x
);

460 #i‚de‡
OPENSSL_NO_EC2M


472 
BN_GF2m_add
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
);

473 
	#BN_GF2m_sub
(
r
, 
a
, 
b
Ë
	`BN_GF2m_add
‘,á, b)

	)

477 
BN_GF2m_mod
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
);

479 
BN_GF2m_mod_mul
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
,

480 c⁄° 
BIGNUM
 *
p
, 
BN_CTX
 *
˘x
);

482 
BN_GF2m_mod_sqr
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
, 
BN_CTX
 *
˘x
);

484 
BN_GF2m_mod_öv
(
BIGNUM
 *
r
, c⁄° BIGNUM *
b
, c⁄° BIGNUM *
p
, 
BN_CTX
 *
˘x
);

486 
BN_GF2m_mod_div
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
,

487 c⁄° 
BIGNUM
 *
p
, 
BN_CTX
 *
˘x
);

489 
BN_GF2m_mod_exp
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
,

490 c⁄° 
BIGNUM
 *
p
, 
BN_CTX
 *
˘x
);

492 
BN_GF2m_mod_sqπ
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

493 
BN_CTX
 *
˘x
);

495 
BN_GF2m_mod_sﬁve_quad
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

496 
BN_CTX
 *
˘x
);

497 
	#BN_GF2m_cmp
(
a
, 
b
Ë
	`BN_ucmp
(◊), (b))

	)

505 
BN_GF2m_mod_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° 
p
[]);

507 
BN_GF2m_mod_mul_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
,

508 c⁄° 
p
[], 
BN_CTX
 *
˘x
);

510 
BN_GF2m_mod_sqr_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° 
p
[],

511 
BN_CTX
 *
˘x
);

513 
BN_GF2m_mod_öv_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
b
, c⁄° 
p
[],

514 
BN_CTX
 *
˘x
);

516 
BN_GF2m_mod_div_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
,

517 c⁄° 
p
[], 
BN_CTX
 *
˘x
);

519 
BN_GF2m_mod_exp_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
,

520 c⁄° 
p
[], 
BN_CTX
 *
˘x
);

522 
BN_GF2m_mod_sqπ_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
,

523 c⁄° 
p
[], 
BN_CTX
 *
˘x
);

525 
BN_GF2m_mod_sﬁve_quad_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
,

526 c⁄° 
p
[], 
BN_CTX
 *
˘x
);

527 
BN_GF2m_pﬁy2¨r
(c⁄° 
BIGNUM
 *
a
, 
p
[], 
max
);

528 
BN_GF2m_¨r2pﬁy
(c⁄° 
p
[], 
BIGNUM
 *
a
);

535 
BN_ni°_mod_192
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
, 
BN_CTX
 *
˘x
);

536 
BN_ni°_mod_224
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
, 
BN_CTX
 *
˘x
);

537 
BN_ni°_mod_256
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
, 
BN_CTX
 *
˘x
);

538 
BN_ni°_mod_384
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
, 
BN_CTX
 *
˘x
);

539 
BN_ni°_mod_521
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
, 
BN_CTX
 *
˘x
);

541 c⁄° 
BIGNUM
 *
BN_gë0_ni°_¥ime_192
();

542 c⁄° 
BIGNUM
 *
BN_gë0_ni°_¥ime_224
();

543 c⁄° 
BIGNUM
 *
BN_gë0_ni°_¥ime_256
();

544 c⁄° 
BIGNUM
 *
BN_gë0_ni°_¥ime_384
();

545 c⁄° 
BIGNUM
 *
BN_gë0_ni°_¥ime_521
();

547 (*
BN_ni°_mod_func
(c⁄° 
BIGNUM
 *
p
)Ë(BIGNUM *
r
, c⁄° BIGNUM *
a
,

548 c⁄° 
BIGNUM
 *
fõld
, 
BN_CTX
 *
˘x
);

550 
BN_gíî©e_dß_n⁄˚
(
BIGNUM
 *
out
, c⁄° BIGNUM *
ønge
,

551 c⁄° 
BIGNUM
 *
¥iv
, c⁄° *
mesßge
,

552 
size_t
 
mesßge_Àn
, 
BN_CTX
 *
˘x
);

555 
BIGNUM
 *
BN_gë_rfc2409_¥ime_768
(BIGNUM *
bn
);

556 
BIGNUM
 *
BN_gë_rfc2409_¥ime_1024
(BIGNUM *
bn
);

559 
BIGNUM
 *
BN_gë_rfc3526_¥ime_1536
(BIGNUM *
bn
);

560 
BIGNUM
 *
BN_gë_rfc3526_¥ime_2048
(BIGNUM *
bn
);

561 
BIGNUM
 *
BN_gë_rfc3526_¥ime_3072
(BIGNUM *
bn
);

562 
BIGNUM
 *
BN_gë_rfc3526_¥ime_4096
(BIGNUM *
bn
);

563 
BIGNUM
 *
BN_gë_rfc3526_¥ime_6144
(BIGNUM *
bn
);

564 
BIGNUM
 *
BN_gë_rfc3526_¥ime_8192
(BIGNUM *
bn
);

566 #i‚de‡
OPENSSL_NO_DEPRECATED_1_1_0


567 
	#gë_rfc2409_¥ime_768
 
BN_gë_rfc2409_¥ime_768


	)

568 
	#gë_rfc2409_¥ime_1024
 
BN_gë_rfc2409_¥ime_1024


	)

569 
	#gë_rfc3526_¥ime_1536
 
BN_gë_rfc3526_¥ime_1536


	)

570 
	#gë_rfc3526_¥ime_2048
 
BN_gë_rfc3526_¥ime_2048


	)

571 
	#gë_rfc3526_¥ime_3072
 
BN_gë_rfc3526_¥ime_3072


	)

572 
	#gë_rfc3526_¥ime_4096
 
BN_gë_rfc3526_¥ime_4096


	)

573 
	#gë_rfc3526_¥ime_6144
 
BN_gë_rfc3526_¥ime_6144


	)

574 
	#gë_rfc3526_¥ime_8192
 
BN_gë_rfc3526_¥ime_8192


	)

577 
BN_b¡e°_ønd
(
BIGNUM
 *
∫d
, 
bôs
, 
t›
, 
bŸtom
);

580 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/dh.h

10 #i‚de‡
OPENSSL_DH_H


11 
	#OPENSSL_DH_H


	)

12 #¥agm®
⁄˚


14 
	~<›ís¶/ma¸os.h
>

15 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


16 
	#HEADER_DH_H


	)

19 
	~<›ís¶/›ís¶c⁄f.h
>

20 
	~<›ís¶/ty≥s.h
>

22 #ifde‡ 
__˝lu•lus


26 
	~<°dlib.h
>

29 
	#DH_PARAMGEN_TYPE_GENERATOR
 0

	)

30 
	#DH_PARAMGEN_TYPE_FIPS_186_2
 1

	)

31 
	#DH_PARAMGEN_TYPE_FIPS_186_4
 2

	)

32 
	#DH_PARAMGEN_TYPE_GROUP
 3

	)

34 
EVP_PKEY_CTX_£t_dh_∑ømgí_ty≥
(
EVP_PKEY_CTX
 *
˘x
, 
typ
);

35 
EVP_PKEY_CTX_£t_dh_∑ømgí_gödex
(
EVP_PKEY_CTX
 *
˘x
, 
gödex
);

36 
EVP_PKEY_CTX_£t_dh_∑ømgí_£ed
(
EVP_PKEY_CTX
 *
˘x
,

37 c⁄° *
£ed
,

38 
size_t
 
£edÀn
);

39 
EVP_PKEY_CTX_£t_dh_∑ømgí_¥ime_Àn
(
EVP_PKEY_CTX
 *
˘x
, 
pbôs
);

40 
EVP_PKEY_CTX_£t_dh_∑ømgí_sub¥ime_Àn
(
EVP_PKEY_CTX
 *
˘x
, 
qÀn
);

41 
EVP_PKEY_CTX_£t_dh_∑ømgí_gíî©‹
(
EVP_PKEY_CTX
 *
˘x
, 
gí
);

42 
EVP_PKEY_CTX_£t_dh_nid
(
EVP_PKEY_CTX
 *
˘x
, 
nid
);

43 
EVP_PKEY_CTX_£t_dh_rfc5114
(
EVP_PKEY_CTX
 *
˘x
, 
gí
);

44 
EVP_PKEY_CTX_£t_dhx_rfc5114
(
EVP_PKEY_CTX
 *
˘x
, 
gí
);

45 
EVP_PKEY_CTX_£t_dh_∑d
(
EVP_PKEY_CTX
 *
˘x
, 
∑d
);

47 
EVP_PKEY_CTX_£t_dh_kdf_ty≥
(
EVP_PKEY_CTX
 *
˘x
, 
kdf
);

48 
EVP_PKEY_CTX_gë_dh_kdf_ty≥
(
EVP_PKEY_CTX
 *
˘x
);

49 
EVP_PKEY_CTX_£t0_dh_kdf_oid
(
EVP_PKEY_CTX
 *
˘x
, 
ASN1_OBJECT
 *
oid
);

50 
EVP_PKEY_CTX_gë0_dh_kdf_oid
(
EVP_PKEY_CTX
 *
˘x
, 
ASN1_OBJECT
 **
oid
);

51 
EVP_PKEY_CTX_£t_dh_kdf_md
(
EVP_PKEY_CTX
 *
˘x
, c⁄° 
EVP_MD
 *
md
);

52 
EVP_PKEY_CTX_gë_dh_kdf_md
(
EVP_PKEY_CTX
 *
˘x
, c⁄° 
EVP_MD
 **
md
);

53 
EVP_PKEY_CTX_£t_dh_kdf_ouéí
(
EVP_PKEY_CTX
 *
˘x
, 
Àn
);

54 
EVP_PKEY_CTX_gë_dh_kdf_ouéí
(
EVP_PKEY_CTX
 *
˘x
, *
Àn
);

55 
EVP_PKEY_CTX_£t0_dh_kdf_ukm
(
EVP_PKEY_CTX
 *
˘x
, *
ukm
, 
Àn
);

56 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


57 
OSSL_DEPRECATEDIN_3_0


58 
EVP_PKEY_CTX_gë0_dh_kdf_ukm
(
EVP_PKEY_CTX
 *
˘x
, **
ukm
);

61 
	#EVP_PKEY_CTRL_DH_PARAMGEN_PRIME_LEN
 (
EVP_PKEY_ALG_CTRL
 + 1)

	)

62 
	#EVP_PKEY_CTRL_DH_PARAMGEN_GENERATOR
 (
EVP_PKEY_ALG_CTRL
 + 2)

	)

63 
	#EVP_PKEY_CTRL_DH_RFC5114
 (
EVP_PKEY_ALG_CTRL
 + 3)

	)

64 
	#EVP_PKEY_CTRL_DH_PARAMGEN_SUBPRIME_LEN
 (
EVP_PKEY_ALG_CTRL
 + 4)

	)

65 
	#EVP_PKEY_CTRL_DH_PARAMGEN_TYPE
 (
EVP_PKEY_ALG_CTRL
 + 5)

	)

66 
	#EVP_PKEY_CTRL_DH_KDF_TYPE
 (
EVP_PKEY_ALG_CTRL
 + 6)

	)

67 
	#EVP_PKEY_CTRL_DH_KDF_MD
 (
EVP_PKEY_ALG_CTRL
 + 7)

	)

68 
	#EVP_PKEY_CTRL_GET_DH_KDF_MD
 (
EVP_PKEY_ALG_CTRL
 + 8)

	)

69 
	#EVP_PKEY_CTRL_DH_KDF_OUTLEN
 (
EVP_PKEY_ALG_CTRL
 + 9)

	)

70 
	#EVP_PKEY_CTRL_GET_DH_KDF_OUTLEN
 (
EVP_PKEY_ALG_CTRL
 + 10)

	)

71 
	#EVP_PKEY_CTRL_DH_KDF_UKM
 (
EVP_PKEY_ALG_CTRL
 + 11)

	)

72 
	#EVP_PKEY_CTRL_GET_DH_KDF_UKM
 (
EVP_PKEY_ALG_CTRL
 + 12)

	)

73 
	#EVP_PKEY_CTRL_DH_KDF_OID
 (
EVP_PKEY_ALG_CTRL
 + 13)

	)

74 
	#EVP_PKEY_CTRL_GET_DH_KDF_OID
 (
EVP_PKEY_ALG_CTRL
 + 14)

	)

75 
	#EVP_PKEY_CTRL_DH_NID
 (
EVP_PKEY_ALG_CTRL
 + 15)

	)

76 
	#EVP_PKEY_CTRL_DH_PAD
 (
EVP_PKEY_ALG_CTRL
 + 16)

	)

79 
	#EVP_PKEY_DH_KDF_NONE
 1

	)

80 
	#EVP_PKEY_DH_KDF_X9_42
 2

	)

82 #i‚de‡
OPENSSL_NO_DH


83 
	~<›ís¶/e_os2.h
>

84 
	~<›ís¶/bio.h
>

85 
	~<›ís¶/a¢1.h
>

86 #i‚de‡
OPENSSL_NO_DEPRECATED_1_1_0


87 
	~<›ís¶/bn.h
>

89 
	~<›ís¶/dhîr.h
>

91 #i‚de‡
OPENSSL_DH_MAX_MODULUS_BITS


92 
	#OPENSSL_DH_MAX_MODULUS_BITS
 10000

	)

95 
	#OPENSSL_DH_FIPS_MIN_MODULUS_BITS
 1024

	)

97 
	#DH_FLAG_CACHE_MONT_P
 0x01

	)

99 
	#DH_FLAG_TYPE_MASK
 0xF000

	)

100 
	#DH_FLAG_TYPE_DH
 0x0000

	)

101 
	#DH_FLAG_TYPE_DHX
 0x1000

	)

103 #i‚de‡
OPENSSL_NO_DEPRECATED_1_1_0


107 
	#DH_FLAG_NO_EXP_CONSTTIME
 0x00

	)

110 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


118 
	#DH_FLAG_FIPS_METHOD
 0x0400

	)

126 
	#DH_FLAG_NON_FIPS_ALLOW
 0x0400

	)

133 
DECLARE_ASN1_ITEM
(
DH∑øms
)

135 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


136 
	#DH_GENERATOR_2
 2

	)

137 
	#DH_GENERATOR_3
 3

	)

138 
	#DH_GENERATOR_5
 5

	)

145 
	#DH_CHECK_P_NOT_PRIME
 0x01

	)

146 
	#DH_CHECK_P_NOT_SAFE_PRIME
 0x02

	)

147 
	#DH_UNABLE_TO_CHECK_GENERATOR
 0x04

	)

148 
	#DH_NOT_SUITABLE_GENERATOR
 0x08

	)

149 
	#DH_CHECK_Q_NOT_PRIME
 0x10

	)

150 
	#DH_CHECK_INVALID_Q_VALUE
 0x20

	)

151 
	#DH_CHECK_INVALID_J_VALUE
 0x40

	)

152 
	#DH_MODULUS_TOO_SMALL
 0x80

	)

153 
	#DH_MODULUS_TOO_LARGE
 0x100

	)

156 
	#DH_CHECK_PUBKEY_TOO_SMALL
 0x01

	)

157 
	#DH_CHECK_PUBKEY_TOO_LARGE
 0x02

	)

158 
	#DH_CHECK_PUBKEY_INVALID
 0x04

	)

164 
	#DH_CHECK_P_NOT_STRONG_PRIME
 
DH_CHECK_P_NOT_SAFE_PRIME


	)

166 
	#d2i_DH∑øms_Â
(
Â
, 
x
) \

167 (
DH
 *)
	`ASN1_d2i_Â
((*(*)())
DH_√w
, \

168 (*(*)())
d2i_DH∑øms
, \

169 (
Â
), \

170 (**)(
x
))

	)

171 
	#i2d_DH∑øms_Â
(
Â
, 
x
) \

172 
	`ASN1_i2d_Â
(
i2d_DH∑øms
,(
Â
), (*)(
x
))

	)

173 
	#d2i_DH∑øms_bio
(
bp
, 
x
) \

174 
	`ASN1_d2i_bio_of
(
DH
, 
DH_√w
, 
d2i_DH∑øms
, 
bp
, 
x
)

	)

175 
	#i2d_DH∑øms_bio
(
bp
, 
x
) \

176 
	`ASN1_i2d_bio_of
(
DH
, 
i2d_DH∑øms
, 
bp
, 
x
)

	)

178 
	#d2i_DHx∑øms_Â
(
Â
,
x
) \

179 (
DH
 *)
	`ASN1_d2i_Â
((*(*)())
DH_√w
, \

180 (*(*)())
d2i_DHx∑øms
, \

181 (
Â
), \

182 (**)(
x
))

	)

183 
	#i2d_DHx∑øms_Â
(
Â
, 
x
) \

184 
	`ASN1_i2d_Â
(
i2d_DHx∑øms
,(
Â
), (*)(
x
))

	)

185 
	#d2i_DHx∑øms_bio
(
bp
, 
x
) \

186 
	`ASN1_d2i_bio_of
(
DH
, 
DH_√w
, 
d2i_DHx∑øms
, 
bp
, 
x
)

	)

187 
	#i2d_DHx∑øms_bio
(
bp
, 
x
) \

188 
	`ASN1_i2d_bio_of
(
DH
, 
i2d_DHx∑øms
, 
bp
, 
x
)

	)

190 
DECLARE_ASN1_DUP_FUNCTION_«me_©å
(
OSSL_DEPRECATEDIN_3_0
, 
DH
, 
DH∑øms
)

192 
OSSL_DEPRECATEDIN_3_0
 c⁄° 
DH_METHOD
 *
DH_O≥nSSL
();

194 
OSSL_DEPRECATEDIN_3_0
 
DH_£t_deÁu…_mëhod
(c⁄° 
DH_METHOD
 *
mëh
);

195 
OSSL_DEPRECATEDIN_3_0
 c⁄° 
DH_METHOD
 *
DH_gë_deÁu…_mëhod
();

196 
OSSL_DEPRECATEDIN_3_0
 
DH_£t_mëhod
(
DH
 *
dh
, c⁄° 
DH_METHOD
 *
mëh
);

197 
OSSL_DEPRECATEDIN_3_0
 
DH
 *
DH_√w_mëhod
(
ENGINE
 *
ígöe
);

199 
OSSL_DEPRECATEDIN_3_0
 
DH
 *
DH_√w
();

200 
OSSL_DEPRECATEDIN_3_0
 
DH_‰ì
(
DH
 *
dh
);

201 
OSSL_DEPRECATEDIN_3_0
 
DH_up_ªf
(
DH
 *
dh
);

202 
OSSL_DEPRECATEDIN_3_0
 
DH_bôs
(c⁄° 
DH
 *
dh
);

203 
OSSL_DEPRECATEDIN_3_0
 
DH_size
(c⁄° 
DH
 *
dh
);

204 
OSSL_DEPRECATEDIN_3_0
 
DH_£curôy_bôs
(c⁄° 
DH
 *
dh
);

206 
	#DH_gë_ex_√w_ödex
(
l
, 
p
, 
√wf
, 
dupf
, 
‰ìf
) \

207 
	`CRYPTO_gë_ex_√w_ödex
(
CRYPTO_EX_INDEX_DH
, 
l
, 
p
, 
√wf
, 
dupf
, 
‰ìf
)

	)

209 
OSSL_DEPRECATEDIN_3_0
 
DH_£t_ex_d©a
(
DH
 *
d
, 
idx
, *
¨g
);

210 
OSSL_DEPRECATEDIN_3_0
 *
DH_gë_ex_d©a
(c⁄° 
DH
 *
d
, 
idx
);

212 
OSSL_DEPRECATEDIN_3_0
 
DH_gíî©e_∑ømëîs_ex
(
DH
 *
dh
, 
¥ime_Àn
,

213 
gíî©‹
,

214 
BN_GENCB
 *
cb
);

216 
OSSL_DEPRECATEDIN_3_0
 
DH_check_∑øms_ex
(c⁄° 
DH
 *
dh
);

217 
OSSL_DEPRECATEDIN_3_0
 
DH_check_ex
(c⁄° 
DH
 *
dh
);

218 
OSSL_DEPRECATEDIN_3_0
 
DH_check_pub_key_ex
(c⁄° 
DH
 *
dh
, c⁄° 
BIGNUM
 *
pub_key
);

219 
OSSL_DEPRECATEDIN_3_0
 
DH_check_∑øms
(c⁄° 
DH
 *
dh
, *
ªt
);

220 
OSSL_DEPRECATEDIN_3_0
 
DH_check
(c⁄° 
DH
 *
dh
, *
codes
);

221 
OSSL_DEPRECATEDIN_3_0
 
DH_check_pub_key
(c⁄° 
DH
 *
dh
, c⁄° 
BIGNUM
 *
pub_key
,

222 *
codes
);

223 
OSSL_DEPRECATEDIN_3_0
 
DH_gíî©e_key
(
DH
 *
dh
);

224 
OSSL_DEPRECATEDIN_3_0
 
DH_compuã_key
(*
key
,

225 c⁄° 
BIGNUM
 *
pub_key
, 
DH
 *
dh
);

226 
OSSL_DEPRECATEDIN_3_0
 
DH_compuã_key_∑dded
(*
key
,

227 c⁄° 
BIGNUM
 *
pub_key
, 
DH
 *
dh
);

229 
DECLARE_ASN1_ENCODE_FUNCTIONS_⁄ly_©å
(
OSSL_DEPRECATEDIN_3_0
, 
DH
, 
DH∑øms
)

230 
DECLARE_ASN1_ENCODE_FUNCTIONS_⁄ly_©å
(
OSSL_DEPRECATEDIN_3_0
, 
DH
, 
DHx∑øms
)

232 #i‚de‡
OPENSSL_NO_STDIO


233 
OSSL_DEPRECATEDIN_3_0
 
DH∑øms_¥öt_Â
(
FILE
 *
Â
, c⁄° 
DH
 *
x
);

235 
OSSL_DEPRECATEDIN_3_0
 
DH∑øms_¥öt
(
BIO
 *
bp
, c⁄° 
DH
 *
x
);

238 
OSSL_DEPRECATEDIN_3_0
 
DH
 *
DH_gë_1024_160
();

239 
OSSL_DEPRECATEDIN_3_0
 
DH
 *
DH_gë_2048_224
();

240 
OSSL_DEPRECATEDIN_3_0
 
DH
 *
DH_gë_2048_256
();

243 
OSSL_DEPRECATEDIN_3_0
 
DH
 *
DH_√w_by_nid
(
nid
);

244 
OSSL_DEPRECATEDIN_3_0
 
DH_gë_nid
(c⁄° 
DH
 *
dh
);

247 
OSSL_DEPRECATEDIN_3_0
 
DH_KDF_X9_42
(*
out
, 
size_t
 
ouéí
,

248 c⁄° *
Z
, 
size_t
 
ZÀn
,

249 
ASN1_OBJECT
 *
key_oid
,

250 c⁄° *
ukm
,

251 
size_t
 
ukmÀn
, c⁄° 
EVP_MD
 *
md
);

253 
OSSL_DEPRECATEDIN_3_0
 
DH_gë0_pqg
(c⁄° 
DH
 *
dh
, c⁄° 
BIGNUM
 **
p
,

254 c⁄° 
BIGNUM
 **
q
, c⁄° BIGNUM **
g
);

255 
OSSL_DEPRECATEDIN_3_0
 
DH_£t0_pqg
(
DH
 *
dh
, 
BIGNUM
 *
p
, BIGNUM *
q
, BIGNUM *
g
);

256 
OSSL_DEPRECATEDIN_3_0
 
DH_gë0_key
(c⁄° 
DH
 *
dh
, c⁄° 
BIGNUM
 **
pub_key
,

257 c⁄° 
BIGNUM
 **
¥iv_key
);

258 
OSSL_DEPRECATEDIN_3_0
 
DH_£t0_key
(
DH
 *
dh
, 
BIGNUM
 *
pub_key
, BIGNUM *
¥iv_key
);

259 
OSSL_DEPRECATEDIN_3_0
 c⁄° 
BIGNUM
 *
DH_gë0_p
(c⁄° 
DH
 *
dh
);

260 
OSSL_DEPRECATEDIN_3_0
 c⁄° 
BIGNUM
 *
DH_gë0_q
(c⁄° 
DH
 *
dh
);

261 
OSSL_DEPRECATEDIN_3_0
 c⁄° 
BIGNUM
 *
DH_gë0_g
(c⁄° 
DH
 *
dh
);

262 
OSSL_DEPRECATEDIN_3_0
 c⁄° 
BIGNUM
 *
DH_gë0_¥iv_key
(c⁄° 
DH
 *
dh
);

263 
OSSL_DEPRECATEDIN_3_0
 c⁄° 
BIGNUM
 *
DH_gë0_pub_key
(c⁄° 
DH
 *
dh
);

264 
OSSL_DEPRECATEDIN_3_0
 
DH_˛ór_Êags
(
DH
 *
dh
, 
Êags
);

265 
OSSL_DEPRECATEDIN_3_0
 
DH_ã°_Êags
(c⁄° 
DH
 *
dh
, 
Êags
);

266 
OSSL_DEPRECATEDIN_3_0
 
DH_£t_Êags
(
DH
 *
dh
, 
Êags
);

267 
OSSL_DEPRECATEDIN_3_0
 
ENGINE
 *
DH_gë0_ígöe
(
DH
 *
d
);

268 
OSSL_DEPRECATEDIN_3_0
 
DH_gë_Àngth
(c⁄° 
DH
 *
dh
);

269 
OSSL_DEPRECATEDIN_3_0
 
DH_£t_Àngth
(
DH
 *
dh
, 
Àngth
);

271 
OSSL_DEPRECATEDIN_3_0
 
DH_METHOD
 *
DH_mëh_√w
(c⁄° *
«me
, 
Êags
);

272 
OSSL_DEPRECATEDIN_3_0
 
DH_mëh_‰ì
(
DH_METHOD
 *
dhm
);

273 
OSSL_DEPRECATEDIN_3_0
 
DH_METHOD
 *
DH_mëh_dup
(c⁄° DH_METHOD *
dhm
);

274 
OSSL_DEPRECATEDIN_3_0
 c⁄° *
DH_mëh_gë0_«me
(c⁄° 
DH_METHOD
 *
dhm
);

275 
OSSL_DEPRECATEDIN_3_0
 
DH_mëh_£t1_«me
(
DH_METHOD
 *
dhm
, c⁄° *
«me
);

276 
OSSL_DEPRECATEDIN_3_0
 
DH_mëh_gë_Êags
(c⁄° 
DH_METHOD
 *
dhm
);

277 
OSSL_DEPRECATEDIN_3_0
 
DH_mëh_£t_Êags
(
DH_METHOD
 *
dhm
, 
Êags
);

278 
OSSL_DEPRECATEDIN_3_0
 *
DH_mëh_gë0_≠p_d©a
(c⁄° 
DH_METHOD
 *
dhm
);

279 
OSSL_DEPRECATEDIN_3_0
 
DH_mëh_£t0_≠p_d©a
(
DH_METHOD
 *
dhm
, *
≠p_d©a
);

280 
OSSL_DEPRECATEDIN_3_0
 (*
DH_mëh_gë_gíî©e_key
(c⁄° 
DH_METHOD
 *
dhm
)Ë(
DH
 *);

281 
OSSL_DEPRECATEDIN_3_0
 
DH_mëh_£t_gíî©e_key
(
DH_METHOD
 *
dhm
,

282 (*
gíî©e_key
Ë(
DH
 *));

283 
OSSL_DEPRECATEDIN_3_0
 (*
DH_mëh_gë_compuã_key
(c⁄° 
DH_METHOD
 *
dhm
))

284 (*
key
,

285 c⁄° 
BIGNUM
 *
pub_key
,

286 
DH
 *
dh
);

287 
OSSL_DEPRECATEDIN_3_0
 
DH_mëh_£t_compuã_key
(
DH_METHOD
 *
dhm
,

288 (*
compuã_key
)

289 (*
key
,

290 c⁄° 
BIGNUM
 *
pub_key
,

291 
DH
 *
dh
));

292 
OSSL_DEPRECATEDIN_3_0
 (*
DH_mëh_gë_bn_mod_exp
(c⁄° 
DH_METHOD
 *
dhm
))

293 (c⁄° 
DH
 *, 
BIGNUM
 *,

294 c⁄° 
BIGNUM
 *,

295 c⁄° 
BIGNUM
 *,

296 c⁄° 
BIGNUM
 *, 
BN_CTX
 *,

297 
BN_MONT_CTX
 *);

298 
OSSL_DEPRECATEDIN_3_0
 
DH_mëh_£t_bn_mod_exp
(
DH_METHOD
 *
dhm
,

299 (*
bn_mod_exp
)

300 (c⁄° 
DH
 *, 
BIGNUM
 *,

301 c⁄° 
BIGNUM
 *, const BIGNUM *,

302 c⁄° 
BIGNUM
 *, 
BN_CTX
 *,

303 
BN_MONT_CTX
 *));

304 
OSSL_DEPRECATEDIN_3_0
 (*
DH_mëh_gë_öô
(c⁄° 
DH_METHOD
 *
dhm
))(
DH
 *);

305 
OSSL_DEPRECATEDIN_3_0
 
DH_mëh_£t_öô
(
DH_METHOD
 *
dhm
, (*
öô
)(
DH
 *));

306 
OSSL_DEPRECATEDIN_3_0
 (*
DH_mëh_gë_föish
(c⁄° 
DH_METHOD
 *
dhm
)Ë(
DH
 *);

307 
OSSL_DEPRECATEDIN_3_0
 
DH_mëh_£t_föish
(
DH_METHOD
 *
dhm
, (*
föish
Ë(
DH
 *));

308 
OSSL_DEPRECATEDIN_3_0
 (*
DH_mëh_gë_gíî©e_∑øms
(c⁄° 
DH_METHOD
 *
dhm
))

309 (
DH
 *, , ,

310 
BN_GENCB
 *);

311 
OSSL_DEPRECATEDIN_3_0
 
DH_mëh_£t_gíî©e_∑øms
(
DH_METHOD
 *
dhm
,

312 (*
gíî©e_∑øms
)

313 (
DH
 *, , ,

314 
BN_GENCB
 *));

317 #i‚de‡
OPENSSL_NO_DEPRECATED_0_9_8


318 
OSSL_DEPRECATEDIN_0_9_8
 
DH
 *
DH_gíî©e_∑ømëîs
(
¥ime_Àn
, 
gíî©‹
,

319 (*
ˇŒback
) (, ,

321 *
cb_¨g
);

325 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/err.h

12 #i‚de‡
OPENSSL_ERR_H


13 
	#OPENSSL_ERR_H


	)

14 #¥agm®
⁄˚


16 
	~<›ís¶/ma¸os.h
>

17 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


18 
	#HEADER_ERR_H


	)

21 
	~<›ís¶/e_os2.h
>

23 #i‚de‡
OPENSSL_NO_STDIO


24 
	~<°dio.h
>

25 
	~<°dlib.h
>

28 
	~<›ís¶/ty≥s.h
>

29 
	~<›ís¶/bio.h
>

30 
	~<›ís¶/lhash.h
>

31 
	~<›ís¶/¸y±€º_Àgacy.h
>

33 #ifde‡ 
__˝lu•lus


37 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


38 #i‚de‡
OPENSSL_NO_FILENAMES


39 
	#ERR_PUT_îr‹
(
l
,
f
,
r
,
‚
,
 
Ë
	`ERR_put_îr‹
÷,f,r,‚, )

	)

41 
	#ERR_PUT_îr‹
(
l
,
f
,
r
,
‚
,
 
Ë
	`ERR_put_îr‹
÷,f,r,
NULL
,0)

	)

45 
	~<limôs.h
>

46 
	~<î∫o.h
>

48 
	#ERR_TXT_MALLOCED
 0x01

	)

49 
	#ERR_TXT_STRING
 0x02

	)

51 #i‡!
deföed
(
OPENSSL_NO_DEPRECATED_3_0
Ë|| deföed(
OSSL_FORCE_ERR_STATE
)

52 
	#ERR_FLAG_MARK
 0x01

	)

53 
	#ERR_FLAG_CLEAR
 0x02

	)

55 
	#ERR_NUM_ERRORS
 16

	)

56 
	sîr_°©e_°
 {

57 
îr_Êags
[
ERR_NUM_ERRORS
];

58 
îr_m¨ks
[
ERR_NUM_ERRORS
];

59 
îr_buf„r
[
ERR_NUM_ERRORS
];

60 *
îr_d©a
[
ERR_NUM_ERRORS
];

61 
size_t
 
îr_d©a_size
[
ERR_NUM_ERRORS
];

62 
îr_d©a_Êags
[
ERR_NUM_ERRORS
];

63 *
îr_fûe
[
ERR_NUM_ERRORS
];

64 
îr_löe
[
ERR_NUM_ERRORS
];

65 *
îr_func
[
ERR_NUM_ERRORS
];

66 
t›
, 
bŸtom
;

71 
	#ERR_LIB_NONE
 1

	)

72 
	#ERR_LIB_SYS
 2

	)

73 
	#ERR_LIB_BN
 3

	)

74 
	#ERR_LIB_RSA
 4

	)

75 
	#ERR_LIB_DH
 5

	)

76 
	#ERR_LIB_EVP
 6

	)

77 
	#ERR_LIB_BUF
 7

	)

78 
	#ERR_LIB_OBJ
 8

	)

79 
	#ERR_LIB_PEM
 9

	)

80 
	#ERR_LIB_DSA
 10

	)

81 
	#ERR_LIB_X509
 11

	)

83 
	#ERR_LIB_ASN1
 13

	)

84 
	#ERR_LIB_CONF
 14

	)

85 
	#ERR_LIB_CRYPTO
 15

	)

86 
	#ERR_LIB_EC
 16

	)

87 
	#ERR_LIB_SSL
 20

	)

93 
	#ERR_LIB_BIO
 32

	)

94 
	#ERR_LIB_PKCS7
 33

	)

95 
	#ERR_LIB_X509V3
 34

	)

96 
	#ERR_LIB_PKCS12
 35

	)

97 
	#ERR_LIB_RAND
 36

	)

98 
	#ERR_LIB_DSO
 37

	)

99 
	#ERR_LIB_ENGINE
 38

	)

100 
	#ERR_LIB_OCSP
 39

	)

101 
	#ERR_LIB_UI
 40

	)

102 
	#ERR_LIB_COMP
 41

	)

103 
	#ERR_LIB_ECDSA
 42

	)

104 
	#ERR_LIB_ECDH
 43

	)

105 
	#ERR_LIB_OSSL_STORE
 44

	)

106 
	#ERR_LIB_FIPS
 45

	)

107 
	#ERR_LIB_CMS
 46

	)

108 
	#ERR_LIB_TS
 47

	)

109 
	#ERR_LIB_HMAC
 48

	)

111 
	#ERR_LIB_CT
 50

	)

112 
	#ERR_LIB_ASYNC
 51

	)

113 
	#ERR_LIB_KDF
 52

	)

114 
	#ERR_LIB_SM2
 53

	)

115 
	#ERR_LIB_ESS
 54

	)

116 
	#ERR_LIB_PROP
 55

	)

117 
	#ERR_LIB_CRMF
 56

	)

118 
	#ERR_LIB_PROV
 57

	)

119 
	#ERR_LIB_CMP
 58

	)

120 
	#ERR_LIB_OSSL_ENCODER
 59

	)

121 
	#ERR_LIB_OSSL_DECODER
 60

	)

122 
	#ERR_LIB_HTTP
 61

	)

124 
	#ERR_LIB_USER
 128

	)

126 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


127 
	#ASN1îr
(
f
, 
r
Ë
	`ERR_øi£_d©a
(
ERR_LIB_ASN1
, (r), 
NULL
)

	)

128 
	#ASYNCîr
(
f
, 
r
Ë
	`ERR_øi£_d©a
(
ERR_LIB_ASYNC
, (r), 
NULL
)

	)

129 
	#BIOîr
(
f
, 
r
Ë
	`ERR_øi£_d©a
(
ERR_LIB_BIO
, (r), 
NULL
)

	)

130 
	#BNîr
(
f
, 
r
Ë
	`ERR_øi£_d©a
(
ERR_LIB_BN
, (r), 
NULL
)

	)

131 
	#BUFîr
(
f
, 
r
Ë
	`ERR_øi£_d©a
(
ERR_LIB_BUF
, (r), 
NULL
)

	)

132 
	#CMPîr
(
f
, 
r
Ë
	`ERR_øi£_d©a
(
ERR_LIB_CMP
, (r), 
NULL
)

	)

133 
	#CMSîr
(
f
, 
r
Ë
	`ERR_øi£_d©a
(
ERR_LIB_CMS
, (r), 
NULL
)

	)

134 
	#COMPîr
(
f
, 
r
Ë
	`ERR_øi£_d©a
(
ERR_LIB_COMP
, (r), 
NULL
)

	)

135 
	#CONFîr
(
f
, 
r
Ë
	`ERR_øi£_d©a
(
ERR_LIB_CONF
, (r), 
NULL
)

	)

136 
	#CRMFîr
(
f
, 
r
Ë
	`ERR_øi£_d©a
(
ERR_LIB_CRMF
, (r), 
NULL
)

	)

137 
	#CRYPTOîr
(
f
, 
r
Ë
	`ERR_øi£_d©a
(
ERR_LIB_CRYPTO
, (r), 
NULL
)

	)

138 
	#CTîr
(
f
, 
r
Ë
	`ERR_øi£_d©a
(
ERR_LIB_CT
, (r), 
NULL
)

	)

139 
	#DHîr
(
f
, 
r
Ë
	`ERR_øi£_d©a
(
ERR_LIB_DH
, (r), 
NULL
)

	)

140 
	#DSAîr
(
f
, 
r
Ë
	`ERR_øi£_d©a
(
ERR_LIB_DSA
, (r), 
NULL
)

	)

141 
	#DSOîr
(
f
, 
r
Ë
	`ERR_øi£_d©a
(
ERR_LIB_DSO
, (r), 
NULL
)

	)

142 
	#ECDHîr
(
f
, 
r
Ë
	`ERR_øi£_d©a
(
ERR_LIB_ECDH
, (r), 
NULL
)

	)

143 
	#ECDSAîr
(
f
, 
r
Ë
	`ERR_øi£_d©a
(
ERR_LIB_ECDSA
, (r), 
NULL
)

	)

144 
	#ECîr
(
f
, 
r
Ë
	`ERR_øi£_d©a
(
ERR_LIB_EC
, (r), 
NULL
)

	)

145 
	#ENGINEîr
(
f
, 
r
Ë
	`ERR_øi£_d©a
(
ERR_LIB_ENGINE
, (r), 
NULL
)

	)

146 
	#ESSîr
(
f
, 
r
Ë
	`ERR_øi£_d©a
(
ERR_LIB_ESS
, (r), 
NULL
)

	)

147 
	#EVPîr
(
f
, 
r
Ë
	`ERR_øi£_d©a
(
ERR_LIB_EVP
, (r), 
NULL
)

	)

148 
	#FIPSîr
(
f
, 
r
Ë
	`ERR_øi£_d©a
(
ERR_LIB_FIPS
, (r), 
NULL
)

	)

149 
	#HMACîr
(
f
, 
r
Ë
	`ERR_øi£_d©a
(
ERR_LIB_HMAC
, (r), 
NULL
)

	)

150 
	#HTTPîr
(
f
, 
r
Ë
	`ERR_øi£_d©a
(
ERR_LIB_HTTP
, (r), 
NULL
)

	)

151 
	#KDFîr
(
f
, 
r
Ë
	`ERR_øi£_d©a
(
ERR_LIB_KDF
, (r), 
NULL
)

	)

152 
	#OBJîr
(
f
, 
r
Ë
	`ERR_øi£_d©a
(
ERR_LIB_OBJ
, (r), 
NULL
)

	)

153 
	#OCSPîr
(
f
, 
r
Ë
	`ERR_øi£_d©a
(
ERR_LIB_OCSP
, (r), 
NULL
)

	)

154 
	#OSSL_STOREîr
(
f
, 
r
Ë
	`ERR_øi£_d©a
(
ERR_LIB_OSSL_STORE
, (r), 
NULL
)

	)

155 
	#PEMîr
(
f
, 
r
Ë
	`ERR_øi£_d©a
(
ERR_LIB_PEM
, (r), 
NULL
)

	)

156 
	#PKCS12îr
(
f
, 
r
Ë
	`ERR_øi£_d©a
(
ERR_LIB_PKCS12
, (r), 
NULL
)

	)

157 
	#PKCS7îr
(
f
, 
r
Ë
	`ERR_øi£_d©a
(
ERR_LIB_PKCS7
, (r), 
NULL
)

	)

158 
	#PROPîr
(
f
, 
r
Ë
	`ERR_øi£_d©a
(
ERR_LIB_PROP
, (r), 
NULL
)

	)

159 
	#PROVîr
(
f
, 
r
Ë
	`ERR_øi£_d©a
(
ERR_LIB_PROV
, (r), 
NULL
)

	)

160 
	#RANDîr
(
f
, 
r
Ë
	`ERR_øi£_d©a
(
ERR_LIB_RAND
, (r), 
NULL
)

	)

161 
	#RSAîr
(
f
, 
r
Ë
	`ERR_øi£_d©a
(
ERR_LIB_RSA
, (r), 
NULL
)

	)

162 
	#KDFîr
(
f
, 
r
Ë
	`ERR_øi£_d©a
(
ERR_LIB_KDF
, (r), 
NULL
)

	)

163 
	#SM2îr
(
f
, 
r
Ë
	`ERR_øi£_d©a
(
ERR_LIB_SM2
, (r), 
NULL
)

	)

164 
	#SSLîr
(
f
, 
r
Ë
	`ERR_øi£_d©a
(
ERR_LIB_SSL
, (r), 
NULL
)

	)

165 
	#SYSîr
(
f
, 
r
Ë
	`ERR_øi£_d©a
(
ERR_LIB_SYS
, (r), 
NULL
)

	)

166 
	#TSîr
(
f
, 
r
Ë
	`ERR_øi£_d©a
(
ERR_LIB_TS
, (r), 
NULL
)

	)

167 
	#UIîr
(
f
, 
r
Ë
	`ERR_øi£_d©a
(
ERR_LIB_UI
, (r), 
NULL
)

	)

168 
	#X509V3îr
(
f
, 
r
Ë
	`ERR_øi£_d©a
(
ERR_LIB_X509V3
, (r), 
NULL
)

	)

169 
	#X509îr
(
f
, 
r
Ë
	`ERR_øi£_d©a
(
ERR_LIB_X509
, (r), 
NULL
)

	)

218 
	#ERR_SYSTEM_FLAG
 (()
INT_MAX
 + 1)

	)

219 
	#ERR_SYSTEM_MASK
 (()
INT_MAX
)

	)

226 
	#ERR_LIB_OFFSET
 23L

	)

227 
	#ERR_LIB_MASK
 0xFF

	)

228 
	#ERR_RFLAGS_OFFSET
 18L

	)

229 
	#ERR_RFLAGS_MASK
 0x1F

	)

230 
	#ERR_REASON_MASK
 0X7FFFFF

	)

236 
	#ERR_RFLAG_FATAL
 (0x1 << 
ERR_RFLAGS_OFFSET
)

	)

237 
	#ERR_RFLAG_COMMON
 (0x2 << 
ERR_RFLAGS_OFFSET
)

	)

239 
	#ERR_SYSTEM_ERROR
(
îrcode
Ë((”ºcodeË& 
ERR_SYSTEM_FLAG
Ë!0)

	)

241 
os¶_unu£d
 
os¶_ölöe
 
ERR_GET_LIB
(
îrcode
)

243 i‡(
ERR_SYSTEM_ERROR
(
îrcode
))

244  
ERR_LIB_SYS
;

245  (
îrcode
 >> 
ERR_LIB_OFFSET
Ë& 
ERR_LIB_MASK
;

248 
os¶_unu£d
 
os¶_ölöe
 
ERR_GET_RFLAGS
(
îrcode
)

250 i‡(
ERR_SYSTEM_ERROR
(
îrcode
))

252  
îrcode
 & (
ERR_RFLAGS_MASK
 << 
ERR_RFLAGS_OFFSET
);

255 
os¶_unu£d
 
os¶_ölöe
 
ERR_GET_REASON
(
îrcode
)

257 i‡(
ERR_SYSTEM_ERROR
(
îrcode
))

258  
îrcode
 & 
ERR_SYSTEM_MASK
;

259  
îrcode
 & 
ERR_REASON_MASK
;

262 
os¶_unu£d
 
os¶_ölöe
 
ERR_FATAL_ERROR
(
îrcode
)

264  (
ERR_GET_RFLAGS
(
îrcode
Ë& 
ERR_RFLAG_FATAL
) != 0;

267 
os¶_unu£d
 
os¶_ölöe
 
ERR_COMMON_ERROR
(
îrcode
)

269  (
ERR_GET_RFLAGS
(
îrcode
Ë& 
ERR_RFLAG_COMMON
) != 0;

278 
	#ERR_PACK
(
lib
,
func
,
ªas⁄
) \

279 –((()(
lib
Ë& 
ERR_LIB_MASK
 ) << 
ERR_LIB_OFFSET
) | \

280 ((()(
ªas⁄
Ë& 
ERR_REASON_MASK
)Ë)

	)

282 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


283 
	#SYS_F_FOPEN
 0

	)

284 
	#SYS_F_CONNECT
 0

	)

285 
	#SYS_F_GETSERVBYNAME
 0

	)

286 
	#SYS_F_SOCKET
 0

	)

287 
	#SYS_F_IOCTLSOCKET
 0

	)

288 
	#SYS_F_BIND
 0

	)

289 
	#SYS_F_LISTEN
 0

	)

290 
	#SYS_F_ACCEPT
 0

	)

291 
	#SYS_F_WSASTARTUP
 0

	)

292 
	#SYS_F_OPENDIR
 0

	)

293 
	#SYS_F_FREAD
 0

	)

294 
	#SYS_F_GETADDRINFO
 0

	)

295 
	#SYS_F_GETNAMEINFO
 0

	)

296 
	#SYS_F_SETSOCKOPT
 0

	)

297 
	#SYS_F_GETSOCKOPT
 0

	)

298 
	#SYS_F_GETSOCKNAME
 0

	)

299 
	#SYS_F_GETHOSTBYNAME
 0

	)

300 
	#SYS_F_FFLUSH
 0

	)

301 
	#SYS_F_OPEN
 0

	)

302 
	#SYS_F_CLOSE
 0

	)

303 
	#SYS_F_IOCTL
 0

	)

304 
	#SYS_F_STAT
 0

	)

305 
	#SYS_F_FCNTL
 0

	)

306 
	#SYS_F_FSTAT
 0

	)

307 
	#SYS_F_SENDFILE
 0

	)

315 
	#ERR_R_SYS_LIB
 (
ERR_LIB_SYS
 | 
ERR_RFLAG_COMMON
)

	)

316 
	#ERR_R_BN_LIB
 (
ERR_LIB_BN
 | 
ERR_RFLAG_COMMON
)

	)

317 
	#ERR_R_RSA_LIB
 (
ERR_LIB_RSA
 | 
ERR_RFLAG_COMMON
)

	)

318 
	#ERR_R_DH_LIB
 (
ERR_LIB_DH
 | 
ERR_RFLAG_COMMON
)

	)

319 
	#ERR_R_EVP_LIB
 (
ERR_LIB_EVP
 | 
ERR_RFLAG_COMMON
)

	)

320 
	#ERR_R_BUF_LIB
 (
ERR_LIB_BUF
 | 
ERR_RFLAG_COMMON
)

	)

321 
	#ERR_R_OBJ_LIB
 (
ERR_LIB_OBJ
 | 
ERR_RFLAG_COMMON
)

	)

322 
	#ERR_R_PEM_LIB
 (
ERR_LIB_PEM
 | 
ERR_RFLAG_COMMON
)

	)

323 
	#ERR_R_DSA_LIB
 (
ERR_LIB_DSA
 | 
ERR_RFLAG_COMMON
)

	)

324 
	#ERR_R_X509_LIB
 (
ERR_LIB_X509
 | 
ERR_RFLAG_COMMON
)

	)

325 
	#ERR_R_ASN1_LIB
 (
ERR_LIB_ASN1
 | 
ERR_RFLAG_COMMON
)

	)

326 
	#ERR_R_CRYPTO_LIB
 (
ERR_LIB_CRYPTO
 | 
ERR_RFLAG_COMMON
)

	)

327 
	#ERR_R_EC_LIB
 (
ERR_LIB_EC
 | 
ERR_RFLAG_COMMON
)

	)

328 
	#ERR_R_BIO_LIB
 (
ERR_LIB_BIO
 | 
ERR_RFLAG_COMMON
)

	)

329 
	#ERR_R_PKCS7_LIB
 (
ERR_LIB_PKCS7
 | 
ERR_RFLAG_COMMON
)

	)

330 
	#ERR_R_X509V3_LIB
 (
ERR_LIB_X509V3
 | 
ERR_RFLAG_COMMON
)

	)

331 
	#ERR_R_ENGINE_LIB
 (
ERR_LIB_ENGINE
 | 
ERR_RFLAG_COMMON
)

	)

332 
	#ERR_R_UI_LIB
 (
ERR_LIB_UI
 | 
ERR_RFLAG_COMMON
)

	)

333 
	#ERR_R_ECDSA_LIB
 (
ERR_LIB_ECDSA
 | 
ERR_RFLAG_COMMON
)

	)

334 
	#ERR_R_OSSL_STORE_LIB
 (
ERR_LIB_OSSL_STORE
 | 
ERR_RFLAG_COMMON
)

	)

335 
	#ERR_R_OSSL_DECODER_LIB
 (
ERR_LIB_OSSL_DECODER
 | 
ERR_RFLAG_COMMON
)

	)

338 
	#ERR_R_FATAL
 (
ERR_RFLAG_FATAL
|
ERR_RFLAG_COMMON
)

	)

339 
	#ERR_R_MALLOC_FAILURE
 (256|
ERR_R_FATAL
)

	)

340 
	#ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED
 (257|
ERR_R_FATAL
)

	)

341 
	#ERR_R_PASSED_NULL_PARAMETER
 (258|
ERR_R_FATAL
)

	)

342 
	#ERR_R_INTERNAL_ERROR
 (259|
ERR_R_FATAL
)

	)

343 
	#ERR_R_DISABLED
 (260|
ERR_R_FATAL
)

	)

344 
	#ERR_R_INIT_FAIL
 (261|
ERR_R_FATAL
)

	)

345 
	#ERR_R_PASSED_INVALID_ARGUMENT
 (262|
ERR_RFLAG_COMMON
)

	)

346 
	#ERR_R_OPERATION_FAIL
 (263|
ERR_R_FATAL
)

	)

347 
	#ERR_R_INVALID_PROVIDER_FUNCTIONS
 (264|
ERR_R_FATAL
)

	)

348 
	#ERR_R_INTERRUPTED_OR_CANCELLED
 (265|
ERR_RFLAG_COMMON
)

	)

349 
	#ERR_R_NESTED_ASN1_ERROR
 (266|
ERR_RFLAG_COMMON
)

	)

350 
	#ERR_R_MISSING_ASN1_EOS
 (267|
ERR_RFLAG_COMMON
)

	)

351 
	#ERR_R_UNSUPPORTED
 (268|
ERR_RFLAG_COMMON
)

	)

352 
	#ERR_R_FETCH_FAILED
 (269|
ERR_RFLAG_COMMON
)

	)

353 
	#ERR_R_INVALID_PROPERTY_DEFINITION
 (270|
ERR_RFLAG_COMMON
)

	)

354 
	#ERR_R_UNABLE_TO_GET_READ_LOCK
 (271|
ERR_R_FATAL
)

	)

355 
	#ERR_R_UNABLE_TO_GET_WRITE_LOCK
 (272|
ERR_R_FATAL
)

	)

357 
	sERR_°rög_d©a_°
 {

358 
îr‹
;

359 c⁄° *
°rög
;

360 } 
	tERR_STRING_DATA
;

362 
DEFINE_LHASH_OF_INTERNAL
(
ERR_STRING_DATA
);

363 
	#lh_ERR_STRING_DATA_√w
(
h‚
, 
cmp
Ë((
	`LHASH_OF
(
ERR_STRING_DATA
Ë*)
	`OPENSSL_LH_√w
(
	`os¶_check_ERR_STRING_DATA_lh_hashfunc_ty≥
(h‚), 
	`os¶_check_ERR_STRING_DATA_lh_compfunc_ty≥
(cmp)))

	)

364 
	#lh_ERR_STRING_DATA_‰ì
(
lh
Ë
	`OPENSSL_LH_‰ì
(
	`os¶_check_ERR_STRING_DATA_lh_ty≥
÷h))

	)

365 
	#lh_ERR_STRING_DATA_Êush
(
lh
Ë
	`OPENSSL_LH_Êush
(
	`os¶_check_ERR_STRING_DATA_lh_ty≥
÷h))

	)

366 
	#lh_ERR_STRING_DATA_ö£π
(
lh
, 
±r
Ë((
ERR_STRING_DATA
 *)
	`OPENSSL_LH_ö£π
(
	`os¶_check_ERR_STRING_DATA_lh_ty≥
÷h), 
	`os¶_check_ERR_STRING_DATA_lh_∂aö_ty≥
’å)))

	)

367 
	#lh_ERR_STRING_DATA_dñëe
(
lh
, 
±r
Ë((
ERR_STRING_DATA
 *)
	`OPENSSL_LH_dñëe
(
	`os¶_check_ERR_STRING_DATA_lh_ty≥
÷h), 
	`os¶_check_c⁄°_ERR_STRING_DATA_lh_∂aö_ty≥
’å)))

	)

368 
	#lh_ERR_STRING_DATA_ªåõve
(
lh
, 
±r
Ë((
ERR_STRING_DATA
 *)
	`OPENSSL_LH_ªåõve
(
	`os¶_check_ERR_STRING_DATA_lh_ty≥
÷h), 
	`os¶_check_c⁄°_ERR_STRING_DATA_lh_∂aö_ty≥
’å)))

	)

369 
	#lh_ERR_STRING_DATA_îr‹
(
lh
Ë
	`OPENSSL_LH_îr‹
(
	`os¶_check_ERR_STRING_DATA_lh_ty≥
÷h))

	)

370 
	#lh_ERR_STRING_DATA_num_ôems
(
lh
Ë
	`OPENSSL_LH_num_ôems
(
	`os¶_check_ERR_STRING_DATA_lh_ty≥
÷h))

	)

371 
	#lh_ERR_STRING_DATA_node_°©s_bio
(
lh
, 
out
Ë
	`OPENSSL_LH_node_°©s_bio
(
	`os¶_check_c⁄°_ERR_STRING_DATA_lh_ty≥
÷h), out)

	)

372 
	#lh_ERR_STRING_DATA_node_ußge_°©s_bio
(
lh
, 
out
Ë
	`OPENSSL_LH_node_ußge_°©s_bio
(
	`os¶_check_c⁄°_ERR_STRING_DATA_lh_ty≥
÷h), out)

	)

373 
	#lh_ERR_STRING_DATA_°©s_bio
(
lh
, 
out
Ë
	`OPENSSL_LH_°©s_bio
(
	`os¶_check_c⁄°_ERR_STRING_DATA_lh_ty≥
÷h), out)

	)

374 
	#lh_ERR_STRING_DATA_gë_down_lﬂd
(
lh
Ë
	`OPENSSL_LH_gë_down_lﬂd
(
	`os¶_check_ERR_STRING_DATA_lh_ty≥
÷h))

	)

375 
	#lh_ERR_STRING_DATA_£t_down_lﬂd
(
lh
, 
dl
Ë
	`OPENSSL_LH_£t_down_lﬂd
(
	`os¶_check_ERR_STRING_DATA_lh_ty≥
÷h), dl)

	)

376 
	#lh_ERR_STRING_DATA_dﬂŒ
(
lh
, 
d‚
Ë
	`OPENSSL_LH_dﬂŒ
(
	`os¶_check_ERR_STRING_DATA_lh_ty≥
÷h), 
	`os¶_check_ERR_STRING_DATA_lh_dﬂŒfunc_ty≥
(d‚))

	)

380 
	#ERR_MAX_DATA_SIZE
 1024

	)

383 
ERR_√w
();

384 
ERR_£t_debug
(c⁄° *
fûe
, 
löe
, c⁄° *
func
);

385 
ERR_£t_îr‹
(
lib
, 
ªas⁄
, c⁄° *
fmt
, ...);

386 
ERR_v£t_îr‹
(
lib
, 
ªas⁄
, c⁄° *
fmt
, 
va_li°
 
¨gs
);

389 
	#ERR_øi£
(
lib
, 
ªas⁄
Ë
	`ERR_øi£_d©a
(÷ib),‘ós⁄),
NULL
)

	)

390 
	#ERR_øi£_d©a
 \

391 (
	`ERR_√w
(), \

392 
	`ERR_£t_debug
(
OPENSSL_FILE
,
OPENSSL_LINE
,
OPENSSL_FUNC
), \

393 
ERR_£t_îr‹
)

	)

395 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


397 
	#ERR_put_îr‹
(
lib
, 
func
, 
ªas⁄
, 
fûe
, 
löe
) \

398 (
	`ERR_√w
(), \

399 
	`ERR_£t_debug
((
fûe
), (
löe
), 
OPENSSL_FUNC
), \

400 
	`ERR_£t_îr‹
((
lib
), (
ªas⁄
), 
NULL
))

	)

403 
ERR_£t_îr‹_d©a
(*
d©a
, 
Êags
);

405 
ERR_gë_îr‹
();

406 
ERR_gë_îr‹_Æl
(c⁄° **
fûe
, *
löe
,

407 c⁄° **
func
,

408 c⁄° **
d©a
, *
Êags
);

409 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


410 
OSSL_DEPRECATEDIN_3_0


411 
ERR_gë_îr‹_löe
(c⁄° **
fûe
, *
löe
);

412 
OSSL_DEPRECATEDIN_3_0


413 
ERR_gë_îr‹_löe_d©a
(c⁄° **
fûe
, *
löe
,

414 c⁄° **
d©a
, *
Êags
);

416 
ERR_≥ek_îr‹
();

417 
ERR_≥ek_îr‹_löe
(c⁄° **
fûe
, *
löe
);

418 
ERR_≥ek_îr‹_func
(c⁄° **
func
);

419 
ERR_≥ek_îr‹_d©a
(c⁄° **
d©a
, *
Êags
);

420 
ERR_≥ek_îr‹_Æl
(c⁄° **
fûe
, *
löe
,

421 c⁄° **
func
,

422 c⁄° **
d©a
, *
Êags
);

423 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


424 
OSSL_DEPRECATEDIN_3_0


425 
ERR_≥ek_îr‹_löe_d©a
(c⁄° **
fûe
, *
löe
,

426 c⁄° **
d©a
, *
Êags
);

428 
ERR_≥ek_œ°_îr‹
();

429 
ERR_≥ek_œ°_îr‹_löe
(c⁄° **
fûe
, *
löe
);

430 
ERR_≥ek_œ°_îr‹_func
(c⁄° **
func
);

431 
ERR_≥ek_œ°_îr‹_d©a
(c⁄° **
d©a
, *
Êags
);

432 
ERR_≥ek_œ°_îr‹_Æl
(c⁄° **
fûe
, *
löe
,

433 c⁄° **
func
,

434 c⁄° **
d©a
, *
Êags
);

435 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


436 
OSSL_DEPRECATEDIN_3_0


437 
ERR_≥ek_œ°_îr‹_löe_d©a
(c⁄° **
fûe
, *
löe
,

438 c⁄° **
d©a
, *
Êags
);

441 
ERR_˛ór_îr‹
();

443 *
ERR_îr‹_°rög
(
e
, *
buf
);

444 
ERR_îr‹_°rög_n
(
e
, *
buf
, 
size_t
 
Àn
);

445 c⁄° *
ERR_lib_îr‹_°rög
(
e
);

446 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


447 
OSSL_DEPRECATEDIN_3_0
 c⁄° *
ERR_func_îr‹_°rög
(
e
);

449 c⁄° *
ERR_ªas⁄_îr‹_°rög
(
e
);

451 
ERR_¥öt_îr‹s_cb
((*
cb
Ë(c⁄° *
°r
, 
size_t
 
Àn
, *
u
),

452 *
u
);

453 #i‚de‡
OPENSSL_NO_STDIO


454 
ERR_¥öt_îr‹s_Â
(
FILE
 *
Â
);

456 
ERR_¥öt_îr‹s
(
BIO
 *
bp
);

458 
ERR_add_îr‹_d©a
(
num
, ...);

459 
ERR_add_îr‹_vd©a
(
num
, 
va_li°
 
¨gs
);

460 
ERR_add_îr‹_txt
(c⁄° *
£¥
, c⁄° *
txt
);

461 
ERR_add_îr‹_mem_bio
(c⁄° *
£p
, 
BIO
 *
bio
);

463 
ERR_lﬂd_°rögs
(
lib
, 
ERR_STRING_DATA
 *
°r
);

464 
ERR_lﬂd_°rögs_c⁄°
(c⁄° 
ERR_STRING_DATA
 *
°r
);

465 
ERR_u∆ﬂd_°rögs
(
lib
, 
ERR_STRING_DATA
 *
°r
);

467 #i‚de‡
OPENSSL_NO_DEPRECATED_1_1_0


468 
	#ERR_lﬂd_¸y±o_°rögs
() \

469 
	`OPENSSL_öô_¸y±o
(
OPENSSL_INIT_LOAD_CRYPTO_STRINGS
, 
NULL
)

	)

470 
	#ERR_‰ì_°rögs
(Ë0Ë

	)

472 #i‚de‡
OPENSSL_NO_DEPRECATED_1_1_0


473 
OSSL_DEPRECATEDIN_1_1_0
 
ERR_ªmove_thªad_°©e
(*);

475 #i‚de‡
OPENSSL_NO_DEPRECATED_1_0_0


476 
OSSL_DEPRECATEDIN_1_0_0
 
ERR_ªmove_°©e
(
pid
);

478 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


479 
OSSL_DEPRECATEDIN_3_0
 
ERR_STATE
 *
ERR_gë_°©e
();

482 
ERR_gë_√xt_îr‹_libøry
();

484 
ERR_£t_m¨k
();

485 
ERR_p›_to_m¨k
();

486 
ERR_˛ór_œ°_m¨k
();

488 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/macros.h

10 #i‚de‡
OPENSSL_MACROS_H


11 
	#OPENSSL_MACROS_H


	)

12 #¥agm®
⁄˚


14 
	~<›ís¶/›ís¶c⁄f.h
>

15 
	~<›ís¶/›ís¶v.h
>

19 
	#OPENSSL_MSTR_HELPER
(
x
Ë#x

	)

20 
	#OPENSSL_MSTR
(
x
Ë
	`OPENSSL_MSTR_HELPER
(x)

	)

26 
	#NON_EMPTY_TRANSLATION_UNIT
 *
dummy
 = &dummy;

	)

34 #i‚de‡
OSSL_DEPRECATED


35 #unde‡
OSSL_DEPRECATED_FOR


36 #i‚de‡
OPENSSL_SUPPRESS_DEPRECATED


37 #i‡
deföed
(
_MSC_VER
)

42 #i‡
_MSC_VER
 >= 1400

43 
	#OSSL_DEPRECATED
(
sö˚
) \

44 
	`__de˛•ec
(
	`dïªˇãd
("Sö˚ O≥nSSL " #sö˚))

	)

45 
	#OSSL_DEPRECATED_FOR
(
sö˚
, 
mesßge
) \

46 
	`__de˛•ec
(
	`dïªˇãd
("Sö˚ O≥nSSL " #sö˚ ";" 
mesßge
))

	)

47 #ñi‡
_MSC_VER
 >= 1310

48 
	#OSSL_DEPRECATED
(
sö˚
Ë
	`__de˛•ec
(
dïªˇãd
)

	)

49 
	#OSSL_DEPRECATED_FOR
(
sö˚
, 
mesßge
Ë
	`__de˛•ec
(
dïªˇãd
)

	)

51 #ñi‡
deföed
(
__GNUC__
)

56 #i‡
__GNUC__
 > 4 || (__GNUC__ =4 && 
__GNUC_MINOR__
 >= 5)

57 
	#OSSL_DEPRECATED
(
sö˚
) \

58 
	`__©åibuã__
((
	`dïªˇãd
("Sö˚ O≥nSSL " #sö˚)))

	)

59 
	#OSSL_DEPRECATED_FOR
(
sö˚
, 
mesßge
) \

60 
	`__©åibuã__
((
	`dïªˇãd
("Sö˚ O≥nSSL " #sö˚ ";" 
mesßge
)))

	)

61 #ñi‡
__GNUC__
 > 3 || (__GNUC__ =3 && 
__GNUC_MINOR__
 > 0)

62 
	#OSSL_DEPRECATED
(
sö˚
Ë
	`__©åibuã__
((
dïªˇãd
))

	)

63 
	#OSSL_DEPRECATED_FOR
(
sö˚
, 
mesßge
Ë
	`__©åibuã__
((
dïªˇãd
))

	)

65 #ñi‡
deföed
(
__SUNPRO_C
)

66 #i‡(
__SUNPRO_C
 >= 0x5130)

67 
	#OSSL_DEPRECATED
(
sö˚
Ë
	`__©åibuã__
 ((
dïªˇãd
))

	)

68 
	#OSSL_DEPRECATED_FOR
(
sö˚
, 
mesßge
Ë
	`__©åibuã__
 ((
dïªˇãd
))

	)

78 #i‚de‡
OSSL_DEPRECATED


79 
	#OSSL_DEPRECATED
(
sö˚
Ë

	)

80 
	#OSSL_DEPRECATED_FOR
(
sö˚
, 
mesßge
Ë

	)

104 #ifde‡
OPENSSL_API_LEVEL


114 #ifde‡
OPENSSL_API_COMPAT


115 #i‡
OPENSSL_API_COMPAT
 < 0x900000L

116 
	#OPENSSL_API_LEVEL
 (
OPENSSL_API_COMPAT
)

	)

118 
	#OPENSSL_API_LEVEL
 \

119 (((
OPENSSL_API_COMPAT
 >> 28) & 0xF) * 10000 \

120 + ((
OPENSSL_API_COMPAT
 >> 20) & 0xFF) * 100 \

121 + ((
OPENSSL_API_COMPAT
 >> 12Ë& 0xFF))

	)

129 #i‚de‡
OPENSSL_API_LEVEL


130 #i‡
OPENSSL_CONFIGURED_API
 > 0

131 
	#OPENSSL_API_LEVEL
 (
OPENSSL_CONFIGURED_API
)

	)

133 
	#OPENSSL_API_LEVEL
 \

134 (
OPENSSL_VERSION_MAJOR
 * 10000 + 
OPENSSL_VERSION_MINOR
 * 100)

	)

138 #i‡
OPENSSL_API_LEVEL
 > 
OPENSSL_CONFIGURED_API


146 #i‡
OPENSSL_API_LEVEL
 > (
OPENSSL_VERSION_MAJOR
 * 10000 + 
OPENSSL_VERSION_MINOR
 * 100)

150 #i‡
OPENSSL_API_LEVEL
 < 30000 && OPENSSL_API_LEVEL >= 20000

154 #i‡
OPENSSL_API_LEVEL
 < 908

172 #unde‡
OPENSSL_NO_DEPRECATED_3_0


173 #unde‡
OPENSSL_NO_DEPRECATED_1_1_1


174 #unde‡
OPENSSL_NO_DEPRECATED_1_1_0


175 #unde‡
OPENSSL_NO_DEPRECATED_1_0_2


176 #unde‡
OPENSSL_NO_DEPRECATED_1_0_1


177 #unde‡
OPENSSL_NO_DEPRECATED_1_0_0


178 #unde‡
OPENSSL_NO_DEPRECATED_0_9_8


180 #i‡
OPENSSL_API_LEVEL
 >= 30000

181 #i‚de‡
OPENSSL_NO_DEPRECATED


182 
	#OSSL_DEPRECATEDIN_3_0
 
	`OSSL_DEPRECATED
(3.0)

	)

183 
	#OSSL_DEPRECATEDIN_3_0_FOR
(
msg
Ë
	`OSSL_DEPRECATED_FOR
(3.0, msg)

	)

185 
	#OPENSSL_NO_DEPRECATED_3_0


	)

188 
	#OSSL_DEPRECATEDIN_3_0


	)

189 
	#OSSL_DEPRECATEDIN_3_0_FOR
(
msg
)

	)

191 #i‡
OPENSSL_API_LEVEL
 >= 10101

192 #i‚de‡
OPENSSL_NO_DEPRECATED


193 
	#OSSL_DEPRECATEDIN_1_1_1
 
	`OSSL_DEPRECATED
(1.1.1)

	)

194 
	#OSSL_DEPRECATEDIN_1_1_1_FOR
(
msg
Ë
	`OSSL_DEPRECATED_FOR
(1.1.1, msg)

	)

196 
	#OPENSSL_NO_DEPRECATED_1_1_1


	)

199 
	#OSSL_DEPRECATEDIN_1_1_1


	)

200 
	#OSSL_DEPRECATEDIN_1_1_1_FOR
(
msg
)

	)

202 #i‡
OPENSSL_API_LEVEL
 >= 10100

203 #i‚de‡
OPENSSL_NO_DEPRECATED


204 
	#OSSL_DEPRECATEDIN_1_1_0
 
	`OSSL_DEPRECATED
(1.1.0)

	)

205 
	#OSSL_DEPRECATEDIN_1_1_0_FOR
(
msg
Ë
	`OSSL_DEPRECATED_FOR
(1.1.0, msg)

	)

207 
	#OPENSSL_NO_DEPRECATED_1_1_0


	)

210 
	#OSSL_DEPRECATEDIN_1_1_0


	)

211 
	#OSSL_DEPRECATEDIN_1_1_0_FOR
(
msg
)

	)

213 #i‡
OPENSSL_API_LEVEL
 >= 10002

214 #i‚de‡
OPENSSL_NO_DEPRECATED


215 
	#OSSL_DEPRECATEDIN_1_0_2
 
	`OSSL_DEPRECATED
(1.0.2)

	)

216 
	#OSSL_DEPRECATEDIN_1_0_2_FOR
(
msg
Ë
	`OSSL_DEPRECATED_FOR
(1.0.2, msg)

	)

218 
	#OPENSSL_NO_DEPRECATED_1_0_2


	)

221 
	#OSSL_DEPRECATEDIN_1_0_2


	)

222 
	#OSSL_DEPRECATEDIN_1_0_2_FOR
(
msg
)

	)

224 #i‡
OPENSSL_API_LEVEL
 >= 10001

225 #i‚de‡
OPENSSL_NO_DEPRECATED


226 
	#OSSL_DEPRECATEDIN_1_0_1
 
	`OSSL_DEPRECATED
(1.0.1)

	)

227 
	#OSSL_DEPRECATEDIN_1_0_1_FOR
(
msg
Ë
	`OSSL_DEPRECATED_FOR
(1.0.1, msg)

	)

229 
	#OPENSSL_NO_DEPRECATED_1_0_1


	)

232 
	#OSSL_DEPRECATEDIN_1_0_1


	)

233 
	#OSSL_DEPRECATEDIN_1_0_1_FOR
(
msg
)

	)

235 #i‡
OPENSSL_API_LEVEL
 >= 10000

236 #i‚de‡
OPENSSL_NO_DEPRECATED


237 
	#OSSL_DEPRECATEDIN_1_0_0
 
	`OSSL_DEPRECATED
(1.0.0)

	)

238 
	#OSSL_DEPRECATEDIN_1_0_0_FOR
(
msg
Ë
	`OSSL_DEPRECATED_FOR
(1.0.0, msg)

	)

240 
	#OPENSSL_NO_DEPRECATED_1_0_0


	)

243 
	#OSSL_DEPRECATEDIN_1_0_0


	)

244 
	#OSSL_DEPRECATEDIN_1_0_0_FOR
(
msg
)

	)

246 #i‡
OPENSSL_API_LEVEL
 >= 908

247 #i‚de‡
OPENSSL_NO_DEPRECATED


248 
	#OSSL_DEPRECATEDIN_0_9_8
 
	`OSSL_DEPRECATED
(0.9.8)

	)

249 
	#OSSL_DEPRECATEDIN_0_9_8_FOR
(
msg
Ë
	`OSSL_DEPRECATED_FOR
(0.9.8, msg)

	)

251 
	#OPENSSL_NO_DEPRECATED_0_9_8


	)

254 
	#OSSL_DEPRECATEDIN_0_9_8


	)

255 
	#OSSL_DEPRECATEDIN_0_9_8_FOR
(
msg
)

	)

262 #i‚de‡
OPENSSL_FILE


263 #ifde‡
OPENSSL_NO_FILENAMES


264 
	#OPENSSL_FILE
 ""

	)

265 
	#OPENSSL_LINE
 0

	)

267 
	#OPENSSL_FILE
 
__FILE__


	)

268 
	#OPENSSL_LINE
 
__LINE__


	)

285 #i‚de‡
OPENSSL_FUNC


286 #i‡
deföed
(
__STDC_VERSION__
)

287 #i‡
__STDC_VERSION__
 >= 199901L

288 
	#OPENSSL_FUNC
 
__func__


	)

289 #ñi‡
deföed
(
__GNUC__
) && __GNUC__ >= 2

290 
	#OPENSSL_FUNC
 
__FUNCTION__


	)

292 #ñi‡
deföed
(
_MSC_VER
)

293 
	#OPENSSL_FUNC
 
__FUNCTION__


	)

299 #i‚de‡
OPENSSL_FUNC


300 
	#OPENSSL_FUNC
 "(unknow¿fun˘i⁄)"

	)

	@/usr/include/openssl/opensslv.h

13 #i‚de‡
OPENSSL_OPENSSLV_H


14 
	#OPENSSL_OPENSSLV_H


	)

15 #¥agm®
⁄˚


17 #ifde‡ 
__˝lu•lus


30 
	#OPENSSL_VERSION_MAJOR
 3

	)

31 
	#OPENSSL_VERSION_MINOR
 0

	)

32 
	#OPENSSL_VERSION_PATCH
 2

	)

42 
	#OPENSSL_VERSION_PRE_RELEASE
 ""

	)

45 
	#OPENSSL_VERSION_BUILD_METADATA
 ""

	)

60 
	#OPENSSL_SHLIB_VERSION
 3

	)

67 
	#OPENSSL_VERSION_PREREQ
(
maj
,
mö
) \

68 ((
OPENSSL_VERSION_MAJOR
 << 16Ë+ 
OPENSSL_VERSION_MINOR
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

77 
	#OPENSSL_VERSION_STR
 "3.0.2"

	)

78 
	#OPENSSL_FULL_VERSION_STR
 "3.0.2"

	)

85 
	#OPENSSL_RELEASE_DATE
 "15 M¨ 2022"

	)

91 
	#OPENSSL_VERSION_TEXT
 "O≥nSSL 3.0.2 15 M¨ 2022"

	)

94 #ifde‡
OPENSSL_VERSION_PRE_RELEASE


95 
	#_OPENSSL_VERSION_PRE_RELEASE
 0x0L

	)

97 
	#_OPENSSL_VERSION_PRE_RELEASE
 0xfL

	)

99 
	#OPENSSL_VERSION_NUMBER
 \

100 –(
OPENSSL_VERSION_MAJOR
<<28) \

101 |(
OPENSSL_VERSION_MINOR
<<20) \

102 |(
OPENSSL_VERSION_PATCH
<<4) \

103 |
_OPENSSL_VERSION_PRE_RELEASE
 )

	)

105 #ifde‡ 
__˝lu•lus


109 
	~<›ís¶/ma¸os.h
>

110 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


111 
	#HEADER_OPENSSLV_H


	)

	@/usr/include/openssl/pem.h

10 #i‚de‡
OPENSSL_PEM_H


11 
	#OPENSSL_PEM_H


	)

12 #¥agm®
⁄˚


14 
	~<›ís¶/ma¸os.h
>

15 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


16 
	#HEADER_PEM_H


	)

19 
	~<›ís¶/e_os2.h
>

20 
	~<›ís¶/bio.h
>

21 
	~<›ís¶/ß„°ack.h
>

22 
	~<›ís¶/evp.h
>

23 
	~<›ís¶/x509.h
>

24 
	~<›ís¶/≥mîr.h
>

26 #ifde‡ 
__˝lu•lus


30 
	#PEM_BUFSIZE
 1024

	)

32 
	#PEM_STRING_X509_OLD
 "X509 CERTIFICATE"

	)

33 
	#PEM_STRING_X509
 "CERTIFICATE"

	)

34 
	#PEM_STRING_X509_TRUSTED
 "TRUSTED CERTIFICATE"

	)

35 
	#PEM_STRING_X509_REQ_OLD
 "NEW CERTIFICATE REQUEST"

	)

36 
	#PEM_STRING_X509_REQ
 "CERTIFICATE REQUEST"

	)

37 
	#PEM_STRING_X509_CRL
 "X509 CRL"

	)

38 
	#PEM_STRING_EVP_PKEY
 "ANY PRIVATE KEY"

	)

39 
	#PEM_STRING_PUBLIC
 "PUBLIC KEY"

	)

40 
	#PEM_STRING_RSA
 "RSA PRIVATE KEY"

	)

41 
	#PEM_STRING_RSA_PUBLIC
 "RSA PUBLIC KEY"

	)

42 
	#PEM_STRING_DSA
 "DSA PRIVATE KEY"

	)

43 
	#PEM_STRING_DSA_PUBLIC
 "DSA PUBLIC KEY"

	)

44 
	#PEM_STRING_PKCS7
 "PKCS7"

	)

45 
	#PEM_STRING_PKCS7_SIGNED
 "PKCS #7 SIGNED DATA"

	)

46 
	#PEM_STRING_PKCS8
 "ENCRYPTED PRIVATE KEY"

	)

47 
	#PEM_STRING_PKCS8INF
 "PRIVATE KEY"

	)

48 
	#PEM_STRING_DHPARAMS
 "DH PARAMETERS"

	)

49 
	#PEM_STRING_DHXPARAMS
 "X9.42 DH PARAMETERS"

	)

50 
	#PEM_STRING_SSL_SESSION
 "SSL SESSION PARAMETERS"

	)

51 
	#PEM_STRING_DSAPARAMS
 "DSA PARAMETERS"

	)

52 
	#PEM_STRING_ECDSA_PUBLIC
 "ECDSA PUBLIC KEY"

	)

53 
	#PEM_STRING_ECPARAMETERS
 "EC PARAMETERS"

	)

54 
	#PEM_STRING_ECPRIVATEKEY
 "EC PRIVATE KEY"

	)

55 
	#PEM_STRING_PARAMETERS
 "PARAMETERS"

	)

56 
	#PEM_STRING_CMS
 "CMS"

	)

58 
	#PEM_TYPE_ENCRYPTED
 10

	)

59 
	#PEM_TYPE_MIC_ONLY
 20

	)

60 
	#PEM_TYPE_MIC_CLEAR
 30

	)

61 
	#PEM_TYPE_CLEAR
 40

	)

69 
	#PEM_ªad_cb_‚sig
(
«me
, 
ty≥
, 
INTYPE
, 
ªad«me
) \

70 
ty≥
 *
PEM_
##
ªad«me
##
_
##
	`«me
(
INTYPE
 *
out
,Åy≥ **
x
, \

71 
≥m_∑ssw‹d_cb
 *
cb
, *
u
)

	)

72 
	#PEM_ªad_cb_ex_‚sig
(
«me
, 
ty≥
, 
INTYPE
, 
ªad«me
) \

73 
ty≥
 *
PEM_
##
ªad«me
##
_
##
«me
##
	`_ex
(
INTYPE
 *
out
,Åy≥ **
x
, \

74 
≥m_∑ssw‹d_cb
 *
cb
, *
u
, \

75 
OSSL_LIB_CTX
 *
lib˘x
, \

76 c⁄° *
¥›q
)

	)

78 
	#PEM_wrôe_‚sig
(
«me
, 
ty≥
, 
OUTTYPE
, 
wrôíame
) \

79 
PEM_
##
wrôíame
##
_
##
	`«me
(
OUTTYPE
 *
out
, c⁄° 
ty≥
 *
x
)

	)

80 
	#PEM_wrôe_cb_‚sig
(
«me
, 
ty≥
, 
OUTTYPE
, 
wrôíame
) \

81 
PEM_
##
wrôíame
##
_
##
	`«me
(
OUTTYPE
 *
out
, c⁄° 
ty≥
 *
x
, \

82 c⁄° 
EVP_CIPHER
 *
íc
, \

83 c⁄° *
k°r
, 
kÀn
, \

84 
≥m_∑ssw‹d_cb
 *
cb
, *
u
)

	)

85 
	#PEM_wrôe_ex_‚sig
(
«me
, 
ty≥
, 
OUTTYPE
, 
wrôíame
) \

86 
PEM_
##
wrôíame
##
_
##
«me
##
	`_ex
(
OUTTYPE
 *
out
, c⁄° 
ty≥
 *
x
, \

87 
OSSL_LIB_CTX
 *
lib˘x
, \

88 c⁄° *
¥›q
)

	)

89 
	#PEM_wrôe_cb_ex_‚sig
(
«me
, 
ty≥
, 
OUTTYPE
, 
wrôíame
) \

90 
PEM_
##
wrôíame
##
_
##
«me
##
	`_ex
(
OUTTYPE
 *
out
, c⁄° 
ty≥
 *
x
, \

91 c⁄° 
EVP_CIPHER
 *
íc
, \

92 c⁄° *
k°r
, 
kÀn
, \

93 
≥m_∑ssw‹d_cb
 *
cb
, *
u
, \

94 
OSSL_LIB_CTX
 *
lib˘x
, \

95 c⁄° *
¥›q
)

	)

97 #ifde‡
OPENSSL_NO_STDIO


99 
	#IMPLEMENT_PEM_ªad_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
Ë

	)

100 
	#IMPLEMENT_PEM_wrôe_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
Ë

	)

101 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


102 
	#IMPLEMENT_PEM_wrôe_Â_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
Ë

	)

104 
	#IMPLEMENT_PEM_wrôe_cb_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
Ë

	)

105 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


106 
	#IMPLEMENT_PEM_wrôe_cb_Â_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
Ë

	)

110 
	#IMPLEMENT_PEM_ªad_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

111 
ty≥
 *
PEM_ªad_
##
	`«me
(
FILE
 *
Â
,Åy≥ **
x
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
) \

113  
	`PEM_ASN1_ªad
((
d2i_of_void
 *)
d2i_
##
a¢1
, 
°r
, 
Â
, \

114 (**)
x
, 
cb
, 
u
); \

115 }

	)

117 
	#IMPLEMENT_PEM_wrôe_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

118 
	`PEM_wrôe_‚sig
(
«me
, 
ty≥
, 
FILE
, 
wrôe
) \

120  
	`PEM_ASN1_wrôe
((
i2d_of_void
 *)
i2d_
##
a¢1
, 
°r
, 
out
, \

121 
x
, 
NULL
, NULL, 0, NULL, NULL); \

122 }

	)

124 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


125 
	#IMPLEMENT_PEM_wrôe_Â_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

126 
	`IMPLEMENT_PEM_wrôe_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

129 
	#IMPLEMENT_PEM_wrôe_cb_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

130 
	`PEM_wrôe_cb_‚sig
(
«me
, 
ty≥
, 
FILE
, 
wrôe
) \

132  
	`PEM_ASN1_wrôe
((
i2d_of_void
 *)
i2d_
##
a¢1
, 
°r
, 
out
, \

133 
x
, 
íc
, 
k°r
, 
kÀn
, 
cb
, 
u
); \

134 }

	)

136 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


137 
	#IMPLEMENT_PEM_wrôe_cb_Â_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

138 
	`IMPLEMENT_PEM_wrôe_cb_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

142 
	#IMPLEMENT_PEM_ªad_bio
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

143 
ty≥
 *
PEM_ªad_bio_
##
	`«me
(
BIO
 *
bp
,Åy≥ **
x
, \

144 
≥m_∑ssw‹d_cb
 *
cb
, *
u
) \

146  
	`PEM_ASN1_ªad_bio
((
d2i_of_void
 *)
d2i_
##
a¢1
, 
°r
, 
bp
, \

147 (**)
x
, 
cb
, 
u
); \

148 }

	)

150 
	#IMPLEMENT_PEM_wrôe_bio
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

151 
	`PEM_wrôe_‚sig
(
«me
, 
ty≥
, 
BIO
, 
wrôe_bio
) \

153  
	`PEM_ASN1_wrôe_bio
((
i2d_of_void
 *)
i2d_
##
a¢1
, 
°r
, 
out
, \

154 
x
, 
NULL
,NULL,0,NULL,NULL); \

155 }

	)

157 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


158 
	#IMPLEMENT_PEM_wrôe_bio_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

159 
	`IMPLEMENT_PEM_wrôe_bio
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

162 
	#IMPLEMENT_PEM_wrôe_cb_bio
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

163 
	`PEM_wrôe_cb_‚sig
(
«me
, 
ty≥
, 
BIO
, 
wrôe_bio
) \

165  
	`PEM_ASN1_wrôe_bio
((
i2d_of_void
 *)
i2d_
##
a¢1
, 
°r
, 
out
, \

166 
x
, 
íc
, 
k°r
, 
kÀn
, 
cb
, 
u
); \

167 }

	)

169 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


170 
	#IMPLEMENT_PEM_wrôe_cb_bio_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

171 
	`IMPLEMENT_PEM_wrôe_cb_bio
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

174 
	#IMPLEMENT_PEM_wrôe
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

175 
	`IMPLEMENT_PEM_wrôe_bio
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

176 
	`IMPLEMENT_PEM_wrôe_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

178 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


179 
	#IMPLEMENT_PEM_wrôe_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

180 
	`IMPLEMENT_PEM_wrôe_bio_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

181 
	`IMPLEMENT_PEM_wrôe_Â_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

184 
	#IMPLEMENT_PEM_wrôe_cb
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

185 
	`IMPLEMENT_PEM_wrôe_cb_bio
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

186 
	`IMPLEMENT_PEM_wrôe_cb_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

188 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


189 
	#IMPLEMENT_PEM_wrôe_cb_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

190 
	`IMPLEMENT_PEM_wrôe_cb_bio_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

191 
	`IMPLEMENT_PEM_wrôe_cb_Â_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

194 
	#IMPLEMENT_PEM_ªad
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

195 
	`IMPLEMENT_PEM_ªad_bio
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

196 
	`IMPLEMENT_PEM_ªad_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

198 
	#IMPLEMENT_PEM_rw
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

199 
	`IMPLEMENT_PEM_ªad
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

200 
	`IMPLEMENT_PEM_wrôe
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

202 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


203 
	#IMPLEMENT_PEM_rw_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

204 
	`IMPLEMENT_PEM_ªad
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

205 
	`IMPLEMENT_PEM_wrôe_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

208 
	#IMPLEMENT_PEM_rw_cb
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

209 
	`IMPLEMENT_PEM_ªad
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

210 
	`IMPLEMENT_PEM_wrôe_cb
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

219 #i‡
deföed
(
OPENSSL_NO_STDIO
)

221 
	#DECLARE_PEM_ªad_Â_©å
(
©å
, 
«me
, 
ty≥
Ë

	)

222 
	#DECLARE_PEM_ªad_Â_ex_©å
(
©å
, 
«me
, 
ty≥
Ë

	)

223 
	#DECLARE_PEM_wrôe_Â_©å
(
©å
, 
«me
, 
ty≥
Ë

	)

224 
	#DECLARE_PEM_wrôe_Â_ex_©å
(
©å
, 
«me
, 
ty≥
Ë

	)

225 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


226 
	#DECLARE_PEM_wrôe_Â_c⁄°_©å
(
©å
, 
«me
, 
ty≥
Ë

	)

228 
	#DECLARE_PEM_wrôe_cb_Â_©å
(
©å
, 
«me
, 
ty≥
Ë

	)

229 
	#DECLARE_PEM_wrôe_cb_Â_ex_©å
(
©å
, 
«me
, 
ty≥
Ë

	)

233 
	#DECLARE_PEM_ªad_Â_©å
(
©å
, 
«me
, 
ty≥
) \

234 
©å
 
	`PEM_ªad_cb_‚sig
(
«me
, 
ty≥
, 
FILE
, 
ªad
);

	)

235 
	#DECLARE_PEM_ªad_Â_ex_©å
(
©å
, 
«me
, 
ty≥
) \

236 
©å
 
	`PEM_ªad_cb_‚sig
(
«me
, 
ty≥
, 
FILE
, 
ªad
); \

237 
©å
 
	`PEM_ªad_cb_ex_‚sig
(
«me
, 
ty≥
, 
FILE
, 
ªad
);

	)

239 
	#DECLARE_PEM_wrôe_Â_©å
(
©å
, 
«me
, 
ty≥
) \

240 
©å
 
	`PEM_wrôe_‚sig
(
«me
, 
ty≥
, 
FILE
, 
wrôe
);

	)

241 
	#DECLARE_PEM_wrôe_Â_ex_©å
(
©å
, 
«me
, 
ty≥
) \

242 
©å
 
	`PEM_wrôe_‚sig
(
«me
, 
ty≥
, 
FILE
, 
wrôe
); \

243 
©å
 
	`PEM_wrôe_ex_‚sig
(
«me
, 
ty≥
, 
FILE
, 
wrôe
);

	)

244 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


245 
	#DECLARE_PEM_wrôe_Â_c⁄°_©å
(
©å
, 
«me
, 
ty≥
) \

246 
©å
 
	`PEM_wrôe_‚sig
(
«me
, 
ty≥
, 
FILE
, 
wrôe
);

	)

248 
	#DECLARE_PEM_wrôe_cb_Â_©å
(
©å
, 
«me
, 
ty≥
) \

249 
©å
 
	`PEM_wrôe_cb_‚sig
(
«me
, 
ty≥
, 
FILE
, 
wrôe
);

	)

250 
	#DECLARE_PEM_wrôe_cb_Â_ex_©å
(
©å
, 
«me
, 
ty≥
) \

251 
©å
 
	`PEM_wrôe_cb_‚sig
(
«me
, 
ty≥
, 
FILE
, 
wrôe
); \

252 
©å
 
	`PEM_wrôe_cb_ex_‚sig
(
«me
, 
ty≥
, 
FILE
, 
wrôe
);

	)

256 
	#DECLARE_PEM_ªad_Â
(
«me
, 
ty≥
) \

257 
	`DECLARE_PEM_ªad_Â_©å
(, 
«me
, 
ty≥
)

	)

258 
	#DECLARE_PEM_wrôe_Â
(
«me
, 
ty≥
) \

259 
	`DECLARE_PEM_wrôe_Â_©å
(, 
«me
, 
ty≥
)

	)

260 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


261 
	#DECLARE_PEM_wrôe_Â_c⁄°
(
«me
, 
ty≥
) \

262 
	`DECLARE_PEM_wrôe_Â_c⁄°_©å
(, 
«me
, 
ty≥
)

	)

264 
	#DECLARE_PEM_wrôe_cb_Â
(
«me
, 
ty≥
) \

265 
	`DECLARE_PEM_wrôe_cb_Â_©å
(, 
«me
, 
ty≥
)

	)

267 
	#DECLARE_PEM_ªad_bio_©å
(
©å
, 
«me
, 
ty≥
) \

268 
©å
 
	`PEM_ªad_cb_‚sig
(
«me
, 
ty≥
, 
BIO
, 
ªad_bio
);

	)

269 
	#DECLARE_PEM_ªad_bio_ex_©å
(
©å
, 
«me
, 
ty≥
) \

270 
©å
 
	`PEM_ªad_cb_‚sig
(
«me
, 
ty≥
, 
BIO
, 
ªad_bio
); \

271 
©å
 
	`PEM_ªad_cb_ex_‚sig
(
«me
, 
ty≥
, 
BIO
, 
ªad_bio
);

	)

272 
	#DECLARE_PEM_ªad_bio
(
«me
, 
ty≥
) \

273 
	`DECLARE_PEM_ªad_bio_©å
(, 
«me
, 
ty≥
)

	)

274 
	#DECLARE_PEM_ªad_bio_ex
(
«me
, 
ty≥
) \

275 
	`DECLARE_PEM_ªad_bio_ex_©å
(, 
«me
, 
ty≥
)

	)

277 
	#DECLARE_PEM_wrôe_bio_©å
(
©å
, 
«me
, 
ty≥
) \

278 
©å
 
	`PEM_wrôe_‚sig
(
«me
, 
ty≥
, 
BIO
, 
wrôe_bio
);

	)

279 
	#DECLARE_PEM_wrôe_bio_ex_©å
(
©å
, 
«me
, 
ty≥
) \

280 
©å
 
	`PEM_wrôe_‚sig
(
«me
, 
ty≥
, 
BIO
, 
wrôe_bio
); \

281 
©å
 
	`PEM_wrôe_ex_‚sig
(
«me
, 
ty≥
, 
BIO
, 
wrôe_bio
);

	)

282 
	#DECLARE_PEM_wrôe_bio
(
«me
, 
ty≥
) \

283 
	`DECLARE_PEM_wrôe_bio_©å
(, 
«me
, 
ty≥
)

	)

284 
	#DECLARE_PEM_wrôe_bio_ex
(
«me
, 
ty≥
) \

285 
	`DECLARE_PEM_wrôe_bio_ex_©å
(, 
«me
, 
ty≥
)

	)

287 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


288 
	#DECLARE_PEM_wrôe_bio_c⁄°_©å
(
©å
, 
«me
, 
ty≥
) \

289 
©å
 
	`PEM_wrôe_‚sig
(
«me
, 
ty≥
, 
BIO
, 
wrôe_bio
);

	)

290 
	#DECLARE_PEM_wrôe_bio_c⁄°
(
«me
, 
ty≥
) \

291 
	`DECLARE_PEM_wrôe_bio_c⁄°_©å
(, 
«me
, 
ty≥
)

	)

294 
	#DECLARE_PEM_wrôe_cb_bio_©å
(
©å
, 
«me
, 
ty≥
) \

295 
©å
 
	`PEM_wrôe_cb_‚sig
(
«me
, 
ty≥
, 
BIO
, 
wrôe_bio
);

	)

296 
	#DECLARE_PEM_wrôe_cb_bio_ex_©å
(
©å
, 
«me
, 
ty≥
) \

297 
©å
 
	`PEM_wrôe_cb_‚sig
(
«me
, 
ty≥
, 
BIO
, 
wrôe_bio
); \

298 
©å
 
	`PEM_wrôe_cb_ex_‚sig
(
«me
, 
ty≥
, 
BIO
, 
wrôe_bio
);

	)

299 
	#DECLARE_PEM_wrôe_cb_bio
(
«me
, 
ty≥
) \

300 
	`DECLARE_PEM_wrôe_cb_bio_©å
(, 
«me
, 
ty≥
)

	)

301 
	#DECLARE_PEM_wrôe_cb_ex_bio
(
«me
, 
ty≥
) \

302 
	`DECLARE_PEM_wrôe_cb_bio_ex_©å
(, 
«me
, 
ty≥
)

	)

304 
	#DECLARE_PEM_wrôe_©å
(
©å
, 
«me
, 
ty≥
) \

305 
	`DECLARE_PEM_wrôe_bio_©å
(
©å
, 
«me
, 
ty≥
) \

306 
	`DECLARE_PEM_wrôe_Â_©å
(
©å
, 
«me
, 
ty≥
)

	)

307 
	#DECLARE_PEM_wrôe_ex_©å
(
©å
, 
«me
, 
ty≥
) \

308 
	`DECLARE_PEM_wrôe_bio_ex_©å
(
©å
, 
«me
, 
ty≥
) \

309 
	`DECLARE_PEM_wrôe_Â_ex_©å
(
©å
, 
«me
, 
ty≥
)

	)

310 
	#DECLARE_PEM_wrôe
(
«me
, 
ty≥
) \

311 
	`DECLARE_PEM_wrôe_©å
(, 
«me
, 
ty≥
)

	)

312 
	#DECLARE_PEM_wrôe_ex
(
«me
, 
ty≥
) \

313 
	`DECLARE_PEM_wrôe_ex_©å
(, 
«me
, 
ty≥
)

	)

314 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


315 
	#DECLARE_PEM_wrôe_c⁄°_©å
(
©å
, 
«me
, 
ty≥
) \

316 
	`DECLARE_PEM_wrôe_bio_c⁄°_©å
(
©å
, 
«me
, 
ty≥
) \

317 
	`DECLARE_PEM_wrôe_Â_c⁄°_©å
(
©å
, 
«me
, 
ty≥
)

	)

318 
	#DECLARE_PEM_wrôe_c⁄°
(
«me
, 
ty≥
) \

319 
	`DECLARE_PEM_wrôe_c⁄°_©å
(, 
«me
, 
ty≥
)

	)

321 
	#DECLARE_PEM_wrôe_cb_©å
(
©å
, 
«me
, 
ty≥
) \

322 
	`DECLARE_PEM_wrôe_cb_bio_©å
(
©å
, 
«me
, 
ty≥
) \

323 
	`DECLARE_PEM_wrôe_cb_Â_©å
(
©å
, 
«me
, 
ty≥
)

	)

324 
	#DECLARE_PEM_wrôe_cb_ex_©å
(
©å
, 
«me
, 
ty≥
) \

325 
	`DECLARE_PEM_wrôe_cb_bio_ex_©å
(
©å
, 
«me
, 
ty≥
) \

326 
	`DECLARE_PEM_wrôe_cb_Â_ex_©å
(
©å
, 
«me
, 
ty≥
)

	)

327 
	#DECLARE_PEM_wrôe_cb
(
«me
, 
ty≥
) \

328 
	`DECLARE_PEM_wrôe_cb_©å
(, 
«me
, 
ty≥
)

	)

329 
	#DECLARE_PEM_wrôe_cb_ex
(
«me
, 
ty≥
) \

330 
	`DECLARE_PEM_wrôe_cb_ex_©å
(, 
«me
, 
ty≥
)

	)

331 
	#DECLARE_PEM_ªad_©å
(
©å
, 
«me
, 
ty≥
) \

332 
	`DECLARE_PEM_ªad_bio_©å
(
©å
, 
«me
, 
ty≥
) \

333 
	`DECLARE_PEM_ªad_Â_©å
(
©å
, 
«me
, 
ty≥
)

	)

334 
	#DECLARE_PEM_ªad_ex_©å
(
©å
, 
«me
, 
ty≥
) \

335 
	`DECLARE_PEM_ªad_bio_ex_©å
(
©å
, 
«me
, 
ty≥
) \

336 
	`DECLARE_PEM_ªad_Â_ex_©å
(
©å
, 
«me
, 
ty≥
)

	)

337 
	#DECLARE_PEM_ªad
(
«me
, 
ty≥
) \

338 
	`DECLARE_PEM_ªad_©å
(, 
«me
, 
ty≥
)

	)

339 
	#DECLARE_PEM_ªad_ex
(
«me
, 
ty≥
) \

340 
	`DECLARE_PEM_ªad_ex_©å
(, 
«me
, 
ty≥
)

	)

341 
	#DECLARE_PEM_rw_©å
(
©å
, 
«me
, 
ty≥
) \

342 
	`DECLARE_PEM_ªad_©å
(
©å
, 
«me
, 
ty≥
) \

343 
	`DECLARE_PEM_wrôe_©å
(
©å
, 
«me
, 
ty≥
)

	)

344 
	#DECLARE_PEM_rw_ex_©å
(
©å
, 
«me
, 
ty≥
) \

345 
	`DECLARE_PEM_ªad_ex_©å
(
©å
, 
«me
, 
ty≥
) \

346 
	`DECLARE_PEM_wrôe_ex_©å
(
©å
, 
«me
, 
ty≥
)

	)

347 
	#DECLARE_PEM_rw
(
«me
, 
ty≥
) \

348 
	`DECLARE_PEM_rw_©å
(, 
«me
, 
ty≥
)

	)

349 
	#DECLARE_PEM_rw_ex
(
«me
, 
ty≥
) \

350 
	`DECLARE_PEM_rw_ex_©å
(, 
«me
, 
ty≥
)

	)

351 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


352 
	#DECLARE_PEM_rw_c⁄°_©å
(
©å
, 
«me
, 
ty≥
) \

353 
	`DECLARE_PEM_ªad_©å
(
©å
, 
«me
, 
ty≥
) \

354 
	`DECLARE_PEM_wrôe_c⁄°_©å
(
©å
, 
«me
, 
ty≥
)

	)

355 
	#DECLARE_PEM_rw_c⁄°
(
«me
, 
ty≥
) \

356 
	`DECLARE_PEM_rw_c⁄°_©å
(, 
«me
, 
ty≥
)

	)

358 
	#DECLARE_PEM_rw_cb_©å
(
©å
, 
«me
, 
ty≥
) \

359 
	`DECLARE_PEM_ªad_©å
(
©å
, 
«me
, 
ty≥
) \

360 
	`DECLARE_PEM_wrôe_cb_©å
(
©å
, 
«me
, 
ty≥
)

	)

361 
	#DECLARE_PEM_rw_cb_ex_©å
(
©å
, 
«me
, 
ty≥
) \

362 
	`DECLARE_PEM_ªad_ex_©å
(
©å
, 
«me
, 
ty≥
) \

363 
	`DECLARE_PEM_wrôe_cb_ex_©å
(
©å
, 
«me
, 
ty≥
)

	)

364 
	#DECLARE_PEM_rw_cb
(
«me
, 
ty≥
) \

365 
	`DECLARE_PEM_rw_cb_©å
(, 
«me
, 
ty≥
)

	)

366 
	#DECLARE_PEM_rw_cb_ex
(
«me
, 
ty≥
) \

367 
	`DECLARE_PEM_rw_cb_ex_©å
(, 
«me
, 
ty≥
)

	)

369 
PEM_gë_EVP_CIPHER_INFO
(*
hódî
, 
EVP_CIPHER_INFO
 *
cùhî
);

370 
PEM_do_hódî
(
EVP_CIPHER_INFO
 *
cùhî
, *
d©a
, *
Àn
,

371 
≥m_∑ssw‹d_cb
 *
ˇŒback
, *
u
);

373 
PEM_ªad_bio
(
BIO
 *
bp
, **
«me
, **
hódî
,

374 **
d©a
, *
Àn
);

375 
	#PEM_FLAG_SECURE
 0x1

	)

376 
	#PEM_FLAG_EAY_COMPATIBLE
 0x2

	)

377 
	#PEM_FLAG_ONLY_B64
 0x4

	)

378 
PEM_ªad_bio_ex
(
BIO
 *
bp
, **
«me
, **
hódî
,

379 **
d©a
, *
Àn
, 
Êags
);

380 
PEM_byãs_ªad_bio_£cmem
(**
pd©a
, *
∂í
, **
≤m
,

381 c⁄° *
«me
, 
BIO
 *
bp
, 
≥m_∑ssw‹d_cb
 *
cb
,

382 *
u
);

383 
PEM_wrôe_bio
(
BIO
 *
bp
, c⁄° *
«me
, c⁄° *
hdr
,

384 c⁄° *
d©a
, 
Àn
);

385 
PEM_byãs_ªad_bio
(**
pd©a
, *
∂í
, **
≤m
,

386 c⁄° *
«me
, 
BIO
 *
bp
, 
≥m_∑ssw‹d_cb
 *
cb
,

387 *
u
);

388 *
PEM_ASN1_ªad_bio
(
d2i_of_void
 *
d2i
, c⁄° *
«me
, 
BIO
 *
bp
, **
x
,

389 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

390 
PEM_ASN1_wrôe_bio
(
i2d_of_void
 *
i2d
, c⁄° *
«me
, 
BIO
 *
bp
,

391 c⁄° *
x
, c⁄° 
EVP_CIPHER
 *
íc
,

392 c⁄° *
k°r
, 
kÀn
,

393 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

395 
STACK_OF
(
X509_INFO
Ë*
PEM_X509_INFO_ªad_bio
(
BIO
 *
bp
, STACK_OF(X509_INFOË*
sk
,

396 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

397 
STACK_OF
(
X509_INFO
)

398 *
PEM_X509_INFO_ªad_bio_ex
(
BIO
 *
bp
, 
STACK_OF
(
X509_INFO
Ë*
sk
,

399 
≥m_∑ssw‹d_cb
 *
cb
, *
u
, 
OSSL_LIB_CTX
 *
lib˘x
,

400 c⁄° *
¥›q
);

402 
PEM_X509_INFO_wrôe_bio
(
BIO
 *
bp
, c⁄° 
X509_INFO
 *
xi
, 
EVP_CIPHER
 *
íc
,

403 c⁄° *
k°r
, 
kÀn
,

404 
≥m_∑ssw‹d_cb
 *
cd
, *
u
);

406 #i‚de‡
OPENSSL_NO_STDIO


407 
PEM_ªad
(
FILE
 *
Â
, **
«me
, **
hódî
,

408 **
d©a
, *
Àn
);

409 
PEM_wrôe
(
FILE
 *
Â
, c⁄° *
«me
, c⁄° *
hdr
,

410 c⁄° *
d©a
, 
Àn
);

411 *
PEM_ASN1_ªad
(
d2i_of_void
 *
d2i
, c⁄° *
«me
, 
FILE
 *
Â
, **
x
,

412 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

413 
PEM_ASN1_wrôe
(
i2d_of_void
 *
i2d
, c⁄° *
«me
, 
FILE
 *
Â
,

414 c⁄° *
x
, c⁄° 
EVP_CIPHER
 *
íc
,

415 c⁄° *
k°r
, 
kÀn
,

416 
≥m_∑ssw‹d_cb
 *
ˇŒback
, *
u
);

417 
STACK_OF
(
X509_INFO
Ë*
PEM_X509_INFO_ªad
(
FILE
 *
Â
, STACK_OF(X509_INFOË*
sk
,

418 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

419 
STACK_OF
(
X509_INFO
)

420 *
PEM_X509_INFO_ªad_ex
(
FILE
 *
Â
, 
STACK_OF
(
X509_INFO
Ë*
sk
, 
≥m_∑ssw‹d_cb
 *
cb
,

421 *
u
, 
OSSL_LIB_CTX
 *
lib˘x
, c⁄° *
¥›q
);

424 
PEM_SignInô
(
EVP_MD_CTX
 *
˘x
, 
EVP_MD
 *
ty≥
);

425 
PEM_SignUpd©e
(
EVP_MD_CTX
 *
˘x
, c⁄° *
d
, 
˙t
);

426 
PEM_SignFöÆ
(
EVP_MD_CTX
 *
˘x
, *
sigªt
,

427 *
sigÀn
, 
EVP_PKEY
 *
pkey
);

430 
PEM_def_ˇŒback
(*
buf
, 
num
, 
rwÊag
, *
u£rd©a
);

431 
PEM_¥oc_ty≥
(*
buf
, 
ty≥
);

432 
PEM_dek_öfo
(*
buf
, c⁄° *
ty≥
, 
Àn
, c⁄° *
°r
);

434 
	~<›ís¶/symhacks.h
>

436 
DECLARE_PEM_rw
(
X509
, X509)

437 
DECLARE_PEM_rw
(
X509_AUX
, 
X509
)

438 
DECLARE_PEM_rw
(
X509_REQ
, X509_REQ)

439 
DECLARE_PEM_wrôe
(
X509_REQ_NEW
, 
X509_REQ
)

440 
DECLARE_PEM_rw
(
X509_CRL
, X509_CRL)

441 
DECLARE_PEM_rw
(
X509_PUBKEY
, X509_PUBKEY)

442 
DECLARE_PEM_rw
(
PKCS7
, PKCS7)

443 
DECLARE_PEM_rw
(
NETSCAPE_CERT_SEQUENCE
, NETSCAPE_CERT_SEQUENCE)

444 
DECLARE_PEM_rw
(
PKCS8
, 
X509_SIG
)

445 
DECLARE_PEM_rw
(
PKCS8_PRIV_KEY_INFO
, PKCS8_PRIV_KEY_INFO)

446 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


447 
DECLARE_PEM_rw_cb_©å
(
OSSL_DEPRECATEDIN_3_0
, 
RSAPriv©eKey
, 
RSA
)

448 
DECLARE_PEM_rw_©å
(
OSSL_DEPRECATEDIN_3_0
, 
RSAPublicKey
, 
RSA
)

449 
DECLARE_PEM_rw_©å
(
OSSL_DEPRECATEDIN_3_0
, 
RSA_PUBKEY
, 
RSA
)

451 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


452 #i‚de‡
OPENSSL_NO_DSA


453 
DECLARE_PEM_rw_cb_©å
(
OSSL_DEPRECATEDIN_3_0
, 
DSAPriv©eKey
, 
DSA
)

454 
DECLARE_PEM_rw_©å
(
OSSL_DEPRECATEDIN_3_0
, 
DSA_PUBKEY
, 
DSA
)

455 
DECLARE_PEM_rw_©å
(
OSSL_DEPRECATEDIN_3_0
, 
DSA∑øms
, 
DSA
)

459 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


460 #i‚de‡
OPENSSL_NO_EC


461 
DECLARE_PEM_rw_©å
(
OSSL_DEPRECATEDIN_3_0
, 
ECPKP¨amëîs
, 
EC_GROUP
)

462 
DECLARE_PEM_rw_cb_©å
(
OSSL_DEPRECATEDIN_3_0
, 
ECPriv©eKey
, 
EC_KEY
)

463 
DECLARE_PEM_rw_©å
(
OSSL_DEPRECATEDIN_3_0
, 
EC_PUBKEY
, 
EC_KEY
)

467 #i‚de‡
OPENSSL_NO_DH


468 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


469 
DECLARE_PEM_rw_©å
(
OSSL_DEPRECATEDIN_3_0
, 
DH∑øms
, 
DH
)

470 
DECLARE_PEM_wrôe_©å
(
OSSL_DEPRECATEDIN_3_0
, 
DHx∑øms
, 
DH
)

473 
DECLARE_PEM_rw_cb_ex
(
Priv©eKey
, 
EVP_PKEY
)

474 
DECLARE_PEM_rw_ex
(
PUBKEY
, 
EVP_PKEY
)

476 
PEM_wrôe_bio_Priv©eKey_åadôi⁄Æ
(
BIO
 *
bp
, c⁄° 
EVP_PKEY
 *
x
,

477 c⁄° 
EVP_CIPHER
 *
íc
,

478 c⁄° *
k°r
, 
kÀn
,

479 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

482 
PEM_wrôe_bio_PKCS8Priv©eKey_nid
(
BIO
 *
bp
, c⁄° 
EVP_PKEY
 *
x
, 
nid
,

483 c⁄° *
k°r
, 
kÀn
,

484 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

485 
PEM_wrôe_bio_PKCS8Priv©eKey
(
BIO
 *, c⁄° 
EVP_PKEY
 *, c⁄° 
EVP_CIPHER
 *,

486 c⁄° *
k°r
, 
kÀn
,

487 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

488 
i2d_PKCS8Priv©eKey_bio
(
BIO
 *
bp
, c⁄° 
EVP_PKEY
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
,

489 c⁄° *
k°r
, 
kÀn
,

490 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

491 
i2d_PKCS8Priv©eKey_nid_bio
(
BIO
 *
bp
, c⁄° 
EVP_PKEY
 *
x
, 
nid
,

492 c⁄° *
k°r
, 
kÀn
,

493 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

494 
EVP_PKEY
 *
d2i_PKCS8Priv©eKey_bio
(
BIO
 *
bp
, EVP_PKEY **
x
, 
≥m_∑ssw‹d_cb
 *
cb
,

495 *
u
);

497 #i‚de‡
OPENSSL_NO_STDIO


498 
i2d_PKCS8Priv©eKey_Â
(
FILE
 *
Â
, c⁄° 
EVP_PKEY
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
,

499 c⁄° *
k°r
, 
kÀn
,

500 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

501 
i2d_PKCS8Priv©eKey_nid_Â
(
FILE
 *
Â
, c⁄° 
EVP_PKEY
 *
x
, 
nid
,

502 c⁄° *
k°r
, 
kÀn
,

503 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

504 
PEM_wrôe_PKCS8Priv©eKey_nid
(
FILE
 *
Â
, c⁄° 
EVP_PKEY
 *
x
, 
nid
,

505 c⁄° *
k°r
, 
kÀn
,

506 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

508 
EVP_PKEY
 *
d2i_PKCS8Priv©eKey_Â
(
FILE
 *
Â
, EVP_PKEY **
x
, 
≥m_∑ssw‹d_cb
 *
cb
,

509 *
u
);

511 
PEM_wrôe_PKCS8Priv©eKey
(
FILE
 *
Â
, c⁄° 
EVP_PKEY
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
,

512 c⁄° *
k°r
, 
kÀn
,

513 
≥m_∑ssw‹d_cb
 *
cd
, *
u
);

515 
EVP_PKEY
 *
PEM_ªad_bio_P¨amëîs_ex
(
BIO
 *
bp
, EVP_PKEY **
x
,

516 
OSSL_LIB_CTX
 *
lib˘x
, c⁄° *
¥›q
);

517 
EVP_PKEY
 *
PEM_ªad_bio_P¨amëîs
(
BIO
 *
bp
, EVP_PKEY **
x
);

518 
PEM_wrôe_bio_P¨amëîs
(
BIO
 *
bp
, c⁄° 
EVP_PKEY
 *
x
);

520 
EVP_PKEY
 *
b2i_Priv©eKey
(c⁄° **
ö
, 
Àngth
);

521 
EVP_PKEY
 *
b2i_PublicKey
(c⁄° **
ö
, 
Àngth
);

522 
EVP_PKEY
 *
b2i_Priv©eKey_bio
(
BIO
 *
ö
);

523 
EVP_PKEY
 *
b2i_PublicKey_bio
(
BIO
 *
ö
);

524 
i2b_Priv©eKey_bio
(
BIO
 *
out
, c⁄° 
EVP_PKEY
 *
pk
);

525 
i2b_PublicKey_bio
(
BIO
 *
out
, c⁄° 
EVP_PKEY
 *
pk
);

526 
EVP_PKEY
 *
b2i_PVK_bio
(
BIO
 *
ö
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

527 
EVP_PKEY
 *
b2i_PVK_bio_ex
(
BIO
 *
ö
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
,

528 
OSSL_LIB_CTX
 *
lib˘x
, c⁄° *
¥›q
);

529 
i2b_PVK_bio
(
BIO
 *
out
, c⁄° 
EVP_PKEY
 *
pk
, 
í˛evñ
,

530 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

531 
i2b_PVK_bio_ex
(
BIO
 *
out
, c⁄° 
EVP_PKEY
 *
pk
, 
í˛evñ
,

532 
≥m_∑ssw‹d_cb
 *
cb
, *
u
,

533 
OSSL_LIB_CTX
 *
lib˘x
, c⁄° *
¥›q
);

535 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/rand.h

10 #i‚de‡
OPENSSL_RAND_H


11 
	#OPENSSL_RAND_H


	)

12 #¥agm®
⁄˚


14 
	~<›ís¶/ma¸os.h
>

15 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


16 
	#HEADER_RAND_H


	)

19 
	~<°dlib.h
>

20 
	~<›ís¶/ty≥s.h
>

21 
	~<›ís¶/e_os2.h
>

22 
	~<›ís¶/øndîr.h
>

23 
	~<›ís¶/evp.h
>

25 #ifde‡ 
__˝lu•lus


37 
	#RAND_DRBG_STRENGTH
 256

	)

39 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


40 
	sønd_mëh_°
 {

41 (*
£ed
Ë(c⁄° *
buf
, 
num
);

42 (*
byãs
Ë(*
buf
, 
num
);

43 (*
˛ónup
) ();

44 (*
add
Ë(c⁄° *
buf
, 
num
, 
øndom√ss
);

45 (*
p£ud‹™d
Ë(*
buf
, 
num
);

46 (*
°©us
) ();

49 
OSSL_DEPRECATEDIN_3_0
 
RAND_£t_ønd_mëhod
(c⁄° 
RAND_METHOD
 *
mëh
);

50 
OSSL_DEPRECATEDIN_3_0
 c⁄° 
RAND_METHOD
 *
RAND_gë_ønd_mëhod
();

51 #i‚de‡
OPENSSL_NO_ENGINE


52 
OSSL_DEPRECATEDIN_3_0
 
RAND_£t_ønd_ígöe
(
ENGINE
 *
ígöe
);

55 
OSSL_DEPRECATEDIN_3_0
 
RAND_METHOD
 *
RAND_O≥nSSL
();

58 #i‚de‡
OPENSSL_NO_DEPRECATED_1_1_0


59 
	#RAND_˛ónup
(Ë0Ë

	)

61 
RAND_byãs
(*
buf
, 
num
);

62 
RAND_¥iv_byãs
(*
buf
, 
num
);

68 
RAND_¥iv_byãs_ex
(
OSSL_LIB_CTX
 *
˘x
, *
buf
, 
size_t
 
num
,

69 
°ªngth
);

75 
RAND_byãs_ex
(
OSSL_LIB_CTX
 *
˘x
, *
buf
, 
size_t
 
num
,

76 
°ªngth
);

78 #i‚de‡
OPENSSL_NO_DEPRECATED_1_1_0


79 
OSSL_DEPRECATEDIN_1_1_0
 
RAND_p£udo_byãs
(*
buf
, 
num
);

82 
EVP_RAND_CTX
 *
RAND_gë0_¥im¨y
(
OSSL_LIB_CTX
 *
˘x
);

83 
EVP_RAND_CTX
 *
RAND_gë0_public
(
OSSL_LIB_CTX
 *
˘x
);

84 
EVP_RAND_CTX
 *
RAND_gë0_¥iv©e
(
OSSL_LIB_CTX
 *
˘x
);

86 
RAND_£t_DRBG_ty≥
(
OSSL_LIB_CTX
 *
˘x
, c⁄° *
drbg
, c⁄° *
¥›q
,

87 c⁄° *
cùhî
, c⁄° *
dige°
);

88 
RAND_£t_£ed_sour˚_ty≥
(
OSSL_LIB_CTX
 *
˘x
, c⁄° *
£ed
,

89 c⁄° *
¥›q
);

91 
RAND_£ed
(c⁄° *
buf
, 
num
);

92 
RAND_kìp_øndom_devi˚s_›í
(
kìp
);

94 #i‡
deföed
(
__ANDROID__
Ë&& deföed(
__NDK_FPABI__
)

95 
__NDK_FPABI__


97 
RAND_add
(c⁄° *
buf
, 
num
, 
øndom√ss
);

98 
RAND_lﬂd_fûe
(c⁄° *
fûe
, 
max_byãs
);

99 
RAND_wrôe_fûe
(c⁄° *
fûe
);

100 c⁄° *
RAND_fûe_«me
(*
fûe
, 
size_t
 
num
);

101 
RAND_°©us
();

103 #i‚de‡
OPENSSL_NO_EGD


104 
RAND_quîy_egd_byãs
(c⁄° *
∑th
, *
buf
, 
byãs
);

105 
RAND_egd
(c⁄° *
∑th
);

106 
RAND_egd_byãs
(c⁄° *
∑th
, 
byãs
);

109 
RAND_pﬁl
();

111 #i‡
deföed
(
_WIN32
Ë&& (deföed(
BASETYPES
Ë|| deföed(
_WINDEF_H
))

113 #i‚de‡
OPENSSL_NO_DEPRECATED_1_1_0


114 
OSSL_DEPRECATEDIN_1_1_0
 
RAND_s¸ìn
();

115 
OSSL_DEPRECATEDIN_1_1_0
 
RAND_evít
(
UINT
, 
WPARAM
, 
LPARAM
);

119 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/rsa.h

10 #i‚de‡
OPENSSL_RSA_H


11 
	#OPENSSL_RSA_H


	)

12 #¥agm®
⁄˚


14 
	~<›ís¶/ma¸os.h
>

15 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


16 
	#HEADER_RSA_H


	)

19 
	~<›ís¶/›ís¶c⁄f.h
>

21 
	~<›ís¶/a¢1.h
>

22 
	~<›ís¶/bio.h
>

23 
	~<›ís¶/¸y±o.h
>

24 
	~<›ís¶/ty≥s.h
>

25 #i‚de‡
OPENSSL_NO_DEPRECATED_1_1_0


26 
	~<›ís¶/bn.h
>

28 
	~<›ís¶/rßîr.h
>

29 
	~<›ís¶/ß„°ack.h
>

31 #ifde‡ 
__˝lu•lus


35 #i‚de‡
OPENSSL_RSA_MAX_MODULUS_BITS


36 
	#OPENSSL_RSA_MAX_MODULUS_BITS
 16384

	)

39 
	#RSA_3
 0x3L

	)

40 
	#RSA_F4
 0x10001L

	)

42 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


45 
	#OPENSSL_RSA_FIPS_MIN_MODULUS_BITS
 2048

	)

47 #i‚de‡
OPENSSL_RSA_SMALL_MODULUS_BITS


48 
	#OPENSSL_RSA_SMALL_MODULUS_BITS
 3072

	)

52 #i‚de‡
OPENSSL_RSA_MAX_PUBEXP_BITS


53 
	#OPENSSL_RSA_MAX_PUBEXP_BITS
 64

	)

56 
	#RSA_ASN1_VERSION_DEFAULT
 0

	)

57 
	#RSA_ASN1_VERSION_MULTI
 1

	)

59 
	#RSA_DEFAULT_PRIME_NUM
 2

	)

61 
	#RSA_METHOD_FLAG_NO_CHECK
 0x0001

	)

62 
	#RSA_FLAG_CACHE_PUBLIC
 0x0002

	)

63 
	#RSA_FLAG_CACHE_PRIVATE
 0x0004

	)

64 
	#RSA_FLAG_BLINDING
 0x0008

	)

65 
	#RSA_FLAG_THREAD_SAFE
 0x0010

	)

72 
	#RSA_FLAG_EXT_PKEY
 0x0020

	)

80 
	#RSA_FLAG_NO_BLINDING
 0x0080

	)

85 #i‚de‡
OPENSSL_NO_DEPRECATED_1_1_0


86 
	#RSA_FLAG_NO_CONSTTIME
 0x0000

	)

97 #i‚de‡
OPENSSL_NO_DEPRECATED_0_9_8


98 
	#RSA_FLAG_NO_EXP_CONSTTIME
 
RSA_FLAG_NO_CONSTTIME


	)

114 
	#RSA_FLAG_TYPE_MASK
 0xF000

	)

115 
	#RSA_FLAG_TYPE_RSA
 0x0000

	)

116 
	#RSA_FLAG_TYPE_RSASSAPSS
 0x1000

	)

117 
	#RSA_FLAG_TYPE_RSAESOAEP
 0x2000

	)

119 
EVP_PKEY_CTX_£t_rß_∑ddög
(
EVP_PKEY_CTX
 *
˘x
, 
∑d_mode
);

120 
EVP_PKEY_CTX_gë_rß_∑ddög
(
EVP_PKEY_CTX
 *
˘x
, *
∑d_mode
);

122 
EVP_PKEY_CTX_£t_rß_pss_ß…Àn
(
EVP_PKEY_CTX
 *
˘x
, 
ß…Àn
);

123 
EVP_PKEY_CTX_gë_rß_pss_ß…Àn
(
EVP_PKEY_CTX
 *
˘x
, *
ß…Àn
);

125 
EVP_PKEY_CTX_£t_rß_keygí_bôs
(
EVP_PKEY_CTX
 *
˘x
, 
bôs
);

126 
EVP_PKEY_CTX_£t1_rß_keygí_pubexp
(
EVP_PKEY_CTX
 *
˘x
, 
BIGNUM
 *
pubexp
);

127 
EVP_PKEY_CTX_£t_rß_keygí_¥imes
(
EVP_PKEY_CTX
 *
˘x
, 
¥imes
);

128 
EVP_PKEY_CTX_£t_rß_pss_keygí_ß…Àn
(
EVP_PKEY_CTX
 *
˘x
, 
ß…Àn
);

129 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


130 
OSSL_DEPRECATEDIN_3_0


131 
EVP_PKEY_CTX_£t_rß_keygí_pubexp
(
EVP_PKEY_CTX
 *
˘x
, 
BIGNUM
 *
pubexp
);

135 
	#RSA_PSS_SALTLEN_DIGEST
 -1

	)

137 
	#RSA_PSS_SALTLEN_AUTO
 -2

	)

139 
	#RSA_PSS_SALTLEN_MAX
 -3

	)

141 
	#RSA_PSS_SALTLEN_MAX_SIGN
 -2

	)

143 
EVP_PKEY_CTX_£t_rß_mgf1_md
(
EVP_PKEY_CTX
 *
˘x
, c⁄° 
EVP_MD
 *
md
);

144 
EVP_PKEY_CTX_£t_rß_mgf1_md_«me
(
EVP_PKEY_CTX
 *
˘x
, c⁄° *
md«me
,

145 c⁄° *
md¥›s
);

146 
EVP_PKEY_CTX_gë_rß_mgf1_md
(
EVP_PKEY_CTX
 *
˘x
, c⁄° 
EVP_MD
 **
md
);

147 
EVP_PKEY_CTX_gë_rß_mgf1_md_«me
(
EVP_PKEY_CTX
 *
˘x
, *
«me
,

148 
size_t
 
«mñí
);

149 
EVP_PKEY_CTX_£t_rß_pss_keygí_mgf1_md
(
EVP_PKEY_CTX
 *
˘x
, c⁄° 
EVP_MD
 *
md
);

150 
EVP_PKEY_CTX_£t_rß_pss_keygí_mgf1_md_«me
(
EVP_PKEY_CTX
 *
˘x
,

151 c⁄° *
md«me
);

153 
EVP_PKEY_CTX_£t_rß_pss_keygí_md
(
EVP_PKEY_CTX
 *
˘x
, c⁄° 
EVP_MD
 *
md
);

154 
EVP_PKEY_CTX_£t_rß_pss_keygí_md_«me
(
EVP_PKEY_CTX
 *
˘x
,

155 c⁄° *
md«me
,

156 c⁄° *
md¥›s
);

158 
EVP_PKEY_CTX_£t_rß_ﬂï_md
(
EVP_PKEY_CTX
 *
˘x
, c⁄° 
EVP_MD
 *
md
);

159 
EVP_PKEY_CTX_£t_rß_ﬂï_md_«me
(
EVP_PKEY_CTX
 *
˘x
, c⁄° *
md«me
,

160 c⁄° *
md¥›s
);

161 
EVP_PKEY_CTX_gë_rß_ﬂï_md
(
EVP_PKEY_CTX
 *
˘x
, c⁄° 
EVP_MD
 **
md
);

162 
EVP_PKEY_CTX_gë_rß_ﬂï_md_«me
(
EVP_PKEY_CTX
 *
˘x
, *
«me
,

163 
size_t
 
«mñí
);

164 
EVP_PKEY_CTX_£t0_rß_ﬂï_œbñ
(
EVP_PKEY_CTX
 *
˘x
, *
œbñ
, 
Œí
);

165 
EVP_PKEY_CTX_gë0_rß_ﬂï_œbñ
(
EVP_PKEY_CTX
 *
˘x
, **
œbñ
);

167 
	#EVP_PKEY_CTRL_RSA_PADDING
 (
EVP_PKEY_ALG_CTRL
 + 1)

	)

168 
	#EVP_PKEY_CTRL_RSA_PSS_SALTLEN
 (
EVP_PKEY_ALG_CTRL
 + 2)

	)

170 
	#EVP_PKEY_CTRL_RSA_KEYGEN_BITS
 (
EVP_PKEY_ALG_CTRL
 + 3)

	)

171 
	#EVP_PKEY_CTRL_RSA_KEYGEN_PUBEXP
 (
EVP_PKEY_ALG_CTRL
 + 4)

	)

172 
	#EVP_PKEY_CTRL_RSA_MGF1_MD
 (
EVP_PKEY_ALG_CTRL
 + 5)

	)

174 
	#EVP_PKEY_CTRL_GET_RSA_PADDING
 (
EVP_PKEY_ALG_CTRL
 + 6)

	)

175 
	#EVP_PKEY_CTRL_GET_RSA_PSS_SALTLEN
 (
EVP_PKEY_ALG_CTRL
 + 7)

	)

176 
	#EVP_PKEY_CTRL_GET_RSA_MGF1_MD
 (
EVP_PKEY_ALG_CTRL
 + 8)

	)

178 
	#EVP_PKEY_CTRL_RSA_OAEP_MD
 (
EVP_PKEY_ALG_CTRL
 + 9)

	)

179 
	#EVP_PKEY_CTRL_RSA_OAEP_LABEL
 (
EVP_PKEY_ALG_CTRL
 + 10)

	)

181 
	#EVP_PKEY_CTRL_GET_RSA_OAEP_MD
 (
EVP_PKEY_ALG_CTRL
 + 11)

	)

182 
	#EVP_PKEY_CTRL_GET_RSA_OAEP_LABEL
 (
EVP_PKEY_ALG_CTRL
 + 12)

	)

184 
	#EVP_PKEY_CTRL_RSA_KEYGEN_PRIMES
 (
EVP_PKEY_ALG_CTRL
 + 13)

	)

186 
	#RSA_PKCS1_PADDING
 1

	)

187 
	#RSA_NO_PADDING
 3

	)

188 
	#RSA_PKCS1_OAEP_PADDING
 4

	)

189 
	#RSA_X931_PADDING
 5

	)

192 
	#RSA_PKCS1_PSS_PADDING
 6

	)

193 
	#RSA_PKCS1_WITH_TLS_PADDING
 7

	)

195 
	#RSA_PKCS1_PADDING_SIZE
 11

	)

197 
	#RSA_£t_≠p_d©a
(
s
,
¨g
Ë
	`RSA_£t_ex_d©a
(s,0,¨g)

	)

198 
	#RSA_gë_≠p_d©a
(
s
Ë
	`RSA_gë_ex_d©a
(s,0)

	)

200 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


201 
OSSL_DEPRECATEDIN_3_0
 
RSA
 *
RSA_√w
();

202 
OSSL_DEPRECATEDIN_3_0
 
RSA
 *
RSA_√w_mëhod
(
ENGINE
 *
ígöe
);

203 
OSSL_DEPRECATEDIN_3_0
 
RSA_bôs
(c⁄° 
RSA
 *
rß
);

204 
OSSL_DEPRECATEDIN_3_0
 
RSA_size
(c⁄° 
RSA
 *
rß
);

205 
OSSL_DEPRECATEDIN_3_0
 
RSA_£curôy_bôs
(c⁄° 
RSA
 *
rß
);

207 
OSSL_DEPRECATEDIN_3_0
 
RSA_£t0_key
(
RSA
 *
r
, 
BIGNUM
 *
n
, BIGNUM *
e
, BIGNUM *
d
);

208 
OSSL_DEPRECATEDIN_3_0
 
RSA_£t0_Á˘‹s
(
RSA
 *
r
, 
BIGNUM
 *
p
, BIGNUM *
q
);

209 
OSSL_DEPRECATEDIN_3_0
 
RSA_£t0_¸t_∑øms
(
RSA
 *
r
,

210 
BIGNUM
 *
dmp1
, BIGNUM *
dmq1
,

211 
BIGNUM
 *
iqmp
);

212 
OSSL_DEPRECATEDIN_3_0
 
RSA_£t0_mu…i_¥ime_∑øms
(
RSA
 *
r
,

213 
BIGNUM
 *
¥imes
[],

214 
BIGNUM
 *
exps
[],

215 
BIGNUM
 *
c€ffs
[],

216 
≤um
);

217 
OSSL_DEPRECATEDIN_3_0
 
RSA_gë0_key
(c⁄° 
RSA
 *
r
,

218 c⁄° 
BIGNUM
 **
n
, c⁄° BIGNUM **
e
,

219 c⁄° 
BIGNUM
 **
d
);

220 
OSSL_DEPRECATEDIN_3_0
 
RSA_gë0_Á˘‹s
(c⁄° 
RSA
 *
r
,

221 c⁄° 
BIGNUM
 **
p
, c⁄° BIGNUM **
q
);

222 
OSSL_DEPRECATEDIN_3_0
 
RSA_gë_mu…i_¥ime_exåa_cou¡
(c⁄° 
RSA
 *
r
);

223 
OSSL_DEPRECATEDIN_3_0
 
RSA_gë0_mu…i_¥ime_Á˘‹s
(c⁄° 
RSA
 *
r
,

224 c⁄° 
BIGNUM
 *
¥imes
[]);

225 
OSSL_DEPRECATEDIN_3_0
 
RSA_gë0_¸t_∑øms
(c⁄° 
RSA
 *
r
,

226 c⁄° 
BIGNUM
 **
dmp1
,

227 c⁄° 
BIGNUM
 **
dmq1
,

228 c⁄° 
BIGNUM
 **
iqmp
);

229 
OSSL_DEPRECATEDIN_3_0


230 
RSA_gë0_mu…i_¥ime_¸t_∑øms
(c⁄° 
RSA
 *
r
, c⁄° 
BIGNUM
 *
exps
[],

231 c⁄° 
BIGNUM
 *
c€ffs
[]);

232 
OSSL_DEPRECATEDIN_3_0
 c⁄° 
BIGNUM
 *
RSA_gë0_n
(c⁄° 
RSA
 *
d
);

233 
OSSL_DEPRECATEDIN_3_0
 c⁄° 
BIGNUM
 *
RSA_gë0_e
(c⁄° 
RSA
 *
d
);

234 
OSSL_DEPRECATEDIN_3_0
 c⁄° 
BIGNUM
 *
RSA_gë0_d
(c⁄° 
RSA
 *
d
);

235 
OSSL_DEPRECATEDIN_3_0
 c⁄° 
BIGNUM
 *
RSA_gë0_p
(c⁄° 
RSA
 *
d
);

236 
OSSL_DEPRECATEDIN_3_0
 c⁄° 
BIGNUM
 *
RSA_gë0_q
(c⁄° 
RSA
 *
d
);

237 
OSSL_DEPRECATEDIN_3_0
 c⁄° 
BIGNUM
 *
RSA_gë0_dmp1
(c⁄° 
RSA
 *
r
);

238 
OSSL_DEPRECATEDIN_3_0
 c⁄° 
BIGNUM
 *
RSA_gë0_dmq1
(c⁄° 
RSA
 *
r
);

239 
OSSL_DEPRECATEDIN_3_0
 c⁄° 
BIGNUM
 *
RSA_gë0_iqmp
(c⁄° 
RSA
 *
r
);

240 
OSSL_DEPRECATEDIN_3_0
 c⁄° 
RSA_PSS_PARAMS
 *
RSA_gë0_pss_∑øms
(c⁄° 
RSA
 *
r
);

241 
OSSL_DEPRECATEDIN_3_0
 
RSA_˛ór_Êags
(
RSA
 *
r
, 
Êags
);

242 
OSSL_DEPRECATEDIN_3_0
 
RSA_ã°_Êags
(c⁄° 
RSA
 *
r
, 
Êags
);

243 
OSSL_DEPRECATEDIN_3_0
 
RSA_£t_Êags
(
RSA
 *
r
, 
Êags
);

244 
OSSL_DEPRECATEDIN_3_0
 
RSA_gë_vîsi⁄
(
RSA
 *
r
);

245 
OSSL_DEPRECATEDIN_3_0
 
ENGINE
 *
RSA_gë0_ígöe
(c⁄° 
RSA
 *
r
);

248 
	#EVP_RSA_gí
(
bôs
) \

249 
	`EVP_PKEY_Q_keygí
(
NULL
, NULL, "RSA", (
size_t
)(0 + (
bôs
)))

	)

252 #i‚de‡
OPENSSL_NO_DEPRECATED_0_9_8


253 
OSSL_DEPRECATEDIN_0_9_8
 
RSA
 *
RSA_gíî©e_key
(
bôs
, 
e
, 

254 (*
ˇŒback
) (, , *),

255 *
cb_¨g
);

259 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


260 
OSSL_DEPRECATEDIN_3_0
 
RSA_gíî©e_key_ex
(
RSA
 *
rß
, 
bôs
, 
BIGNUM
 *
e
,

261 
BN_GENCB
 *
cb
);

263 
OSSL_DEPRECATEDIN_3_0
 
RSA_gíî©e_mu…i_¥ime_key
(
RSA
 *
rß
, 
bôs
,

264 
¥imes
, 
BIGNUM
 *
e
,

265 
BN_GENCB
 *
cb
);

267 
OSSL_DEPRECATEDIN_3_0


268 
RSA_X931_dîive_ex
(
RSA
 *
rß
, 
BIGNUM
 *
p1
, BIGNUM *
p2
,

269 
BIGNUM
 *
q1
, BIGNUM *
q2
,

270 c⁄° 
BIGNUM
 *
Xp1
, c⁄° BIGNUM *
Xp2
,

271 c⁄° 
BIGNUM
 *
Xp
, c⁄° BIGNUM *
Xq1
,

272 c⁄° 
BIGNUM
 *
Xq2
, c⁄° BIGNUM *
Xq
,

273 c⁄° 
BIGNUM
 *
e
, 
BN_GENCB
 *
cb
);

274 
OSSL_DEPRECATEDIN_3_0
 
RSA_X931_gíî©e_key_ex
(
RSA
 *
rß
, 
bôs
,

275 c⁄° 
BIGNUM
 *
e
,

276 
BN_GENCB
 *
cb
);

278 
OSSL_DEPRECATEDIN_3_0
 
RSA_check_key
(c⁄° 
RSA
 *);

279 
OSSL_DEPRECATEDIN_3_0
 
RSA_check_key_ex
(c⁄° 
RSA
 *, 
BN_GENCB
 *
cb
);

281 
OSSL_DEPRECATEDIN_3_0


282 
RSA_public_í¸y±
(
Êí
, c⁄° *
‰om
, *
to
,

283 
RSA
 *
rß
, 
∑ddög
);

284 
OSSL_DEPRECATEDIN_3_0


285 
RSA_¥iv©e_í¸y±
(
Êí
, c⁄° *
‰om
, *
to
,

286 
RSA
 *
rß
, 
∑ddög
);

287 
OSSL_DEPRECATEDIN_3_0


288 
RSA_public_de¸y±
(
Êí
, c⁄° *
‰om
, *
to
,

289 
RSA
 *
rß
, 
∑ddög
);

290 
OSSL_DEPRECATEDIN_3_0


291 
RSA_¥iv©e_de¸y±
(
Êí
, c⁄° *
‰om
, *
to
,

292 
RSA
 *
rß
, 
∑ddög
);

293 
OSSL_DEPRECATEDIN_3_0
 
RSA_‰ì
(
RSA
 *
r
);

295 
OSSL_DEPRECATEDIN_3_0
 
RSA_up_ªf
(
RSA
 *
r
);

296 
OSSL_DEPRECATEDIN_3_0
 
RSA_Êags
(c⁄° 
RSA
 *
r
);

298 
OSSL_DEPRECATEDIN_3_0
 
RSA_£t_deÁu…_mëhod
(c⁄° 
RSA_METHOD
 *
mëh
);

299 
OSSL_DEPRECATEDIN_3_0
 c⁄° 
RSA_METHOD
 *
RSA_gë_deÁu…_mëhod
();

300 
OSSL_DEPRECATEDIN_3_0
 c⁄° 
RSA_METHOD
 *
RSA_nuŒ_mëhod
();

301 
OSSL_DEPRECATEDIN_3_0
 c⁄° 
RSA_METHOD
 *
RSA_gë_mëhod
(c⁄° 
RSA
 *
rß
);

302 
OSSL_DEPRECATEDIN_3_0
 
RSA_£t_mëhod
(
RSA
 *
rß
, c⁄° 
RSA_METHOD
 *
mëh
);

305 
OSSL_DEPRECATEDIN_3_0
 c⁄° 
RSA_METHOD
 *
RSA_PKCS1_O≥nSSL
();

307 
DECLARE_ASN1_ENCODE_FUNCTIONS_«me_©å
(
OSSL_DEPRECATEDIN_3_0
,

308 
RSA
, 
RSAPublicKey
)

309 
DECLARE_ASN1_ENCODE_FUNCTIONS_«me_©å
(
OSSL_DEPRECATEDIN_3_0
,

310 
RSA
, 
RSAPriv©eKey
)

313 
RSA_pkey_˘x_˘æ
(
EVP_PKEY_CTX
 *
˘x
, 
›ty≥
, 
cmd
, 
p1
, *
p2
);

315 
	srß_pss_∑øms_°
 {

316 
X509_ALGOR
 *
hashAlg‹ôhm
;

317 
X509_ALGOR
 *
maskGíAlg‹ôhm
;

318 
ASN1_INTEGER
 *
ß…Lígth
;

319 
ASN1_INTEGER
 *
åaûîFõld
;

321 
X509_ALGOR
 *
maskHash
;

324 
DECLARE_ASN1_FUNCTIONS
(
RSA_PSS_PARAMS
)

325 
DECLARE_ASN1_DUP_FUNCTION
(
RSA_PSS_PARAMS
)

327 
	srß_ﬂï_∑øms_°
 {

328 
X509_ALGOR
 *
hashFunc
;

329 
X509_ALGOR
 *
maskGíFunc
;

330 
X509_ALGOR
 *
pSour˚Func
;

332 
X509_ALGOR
 *
maskHash
;

333 } 
	tRSA_OAEP_PARAMS
;

335 
DECLARE_ASN1_FUNCTIONS
(
RSA_OAEP_PARAMS
)

337 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


338 #i‚de‡
OPENSSL_NO_STDIO


339 
OSSL_DEPRECATEDIN_3_0
 
RSA_¥öt_Â
(
FILE
 *
Â
, c⁄° 
RSA
 *
r
, 
off£t
);

342 
OSSL_DEPRECATEDIN_3_0
 
RSA_¥öt
(
BIO
 *
bp
, c⁄° 
RSA
 *
r
, 
off£t
);

348 
OSSL_DEPRECATEDIN_3_0
 
RSA_sign
(
ty≥
, c⁄° *
m
,

349 
m_Àngth
, *
sigªt
,

350 *
sigÀn
, 
RSA
 *
rß
);

351 
OSSL_DEPRECATEDIN_3_0
 
RSA_vîify
(
ty≥
, c⁄° *
m
,

352 
m_Àngth
,

353 c⁄° *
sigbuf
,

354 
sigÀn
, 
RSA
 *
rß
);

360 
OSSL_DEPRECATEDIN_3_0


361 
RSA_sign_ASN1_OCTET_STRING
(
ty≥
,

362 c⁄° *
m
, 
m_Àngth
,

363 *
sigªt
, *
sigÀn
,

364 
RSA
 *
rß
);

365 
OSSL_DEPRECATEDIN_3_0


366 
RSA_vîify_ASN1_OCTET_STRING
(
ty≥
,

367 c⁄° *
m
, 
m_Àngth
,

368 *
sigbuf
, 
sigÀn
,

369 
RSA
 *
rß
);

371 
OSSL_DEPRECATEDIN_3_0
 
RSA_blödög_⁄
(
RSA
 *
rß
, 
BN_CTX
 *
˘x
);

372 
OSSL_DEPRECATEDIN_3_0
 
RSA_blödög_off
(
RSA
 *
rß
);

373 
OSSL_DEPRECATEDIN_3_0
 
BN_BLINDING
 *
RSA_£tup_blödög
(
RSA
 *
rß
, 
BN_CTX
 *
˘x
);

375 
OSSL_DEPRECATEDIN_3_0


376 
RSA_∑ddög_add_PKCS1_ty≥_1
(*
to
, 
éí
,

377 c⁄° *
f
, 
Ê
);

378 
OSSL_DEPRECATEDIN_3_0


379 
RSA_∑ddög_check_PKCS1_ty≥_1
(*
to
, 
éí
,

380 c⁄° *
f
, 
Ê
,

381 
rß_Àn
);

382 
OSSL_DEPRECATEDIN_3_0


383 
RSA_∑ddög_add_PKCS1_ty≥_2
(*
to
, 
éí
,

384 c⁄° *
f
, 
Ê
);

385 
OSSL_DEPRECATEDIN_3_0


386 
RSA_∑ddög_check_PKCS1_ty≥_2
(*
to
, 
éí
,

387 c⁄° *
f
, 
Ê
,

388 
rß_Àn
);

389 
OSSL_DEPRECATEDIN_3_0
 
PKCS1_MGF1
(*
mask
, 
Àn
,

390 c⁄° *
£ed
, 
£edÀn
,

391 c⁄° 
EVP_MD
 *
dg°
);

392 
OSSL_DEPRECATEDIN_3_0


393 
RSA_∑ddög_add_PKCS1_OAEP
(*
to
, 
éí
,

394 c⁄° *
f
, 
Ê
,

395 c⁄° *
p
, 
∂
);

396 
OSSL_DEPRECATEDIN_3_0


397 
RSA_∑ddög_check_PKCS1_OAEP
(*
to
, 
éí
,

398 c⁄° *
f
, 
Ê
, 
rß_Àn
,

399 c⁄° *
p
, 
∂
);

400 
OSSL_DEPRECATEDIN_3_0


401 
RSA_∑ddög_add_PKCS1_OAEP_mgf1
(*
to
, 
éí
,

402 c⁄° *
‰om
, 
Êí
,

403 c⁄° *
∑øm
, 
∂í
,

404 c⁄° 
EVP_MD
 *
md
, c⁄° EVP_MD *
mgf1md
);

405 
OSSL_DEPRECATEDIN_3_0


406 
RSA_∑ddög_check_PKCS1_OAEP_mgf1
(*
to
, 
éí
,

407 c⁄° *
‰om
, 
Êí
,

408 
num
,

409 c⁄° *
∑øm
, 
∂í
,

410 c⁄° 
EVP_MD
 *
md
, c⁄° EVP_MD *
mgf1md
);

411 
OSSL_DEPRECATEDIN_3_0
 
RSA_∑ddög_add_n⁄e
(*
to
, 
éí
,

412 c⁄° *
f
, 
Ê
);

413 
OSSL_DEPRECATEDIN_3_0
 
RSA_∑ddög_check_n⁄e
(*
to
, 
éí
,

414 c⁄° *
f
, 
Ê
,

415 
rß_Àn
);

416 
OSSL_DEPRECATEDIN_3_0
 
RSA_∑ddög_add_X931
(*
to
, 
éí
,

417 c⁄° *
f
, 
Ê
);

418 
OSSL_DEPRECATEDIN_3_0
 
RSA_∑ddög_check_X931
(*
to
, 
éí
,

419 c⁄° *
f
, 
Ê
,

420 
rß_Àn
);

421 
OSSL_DEPRECATEDIN_3_0
 
RSA_X931_hash_id
(
nid
);

423 
OSSL_DEPRECATEDIN_3_0


424 
RSA_vîify_PKCS1_PSS
(
RSA
 *
rß
, c⁄° *
mHash
,

425 c⁄° 
EVP_MD
 *
Hash
, c⁄° *
EM
,

426 
sLí
);

427 
OSSL_DEPRECATEDIN_3_0


428 
RSA_∑ddög_add_PKCS1_PSS
(
RSA
 *
rß
, *
EM
,

429 c⁄° *
mHash
, c⁄° 
EVP_MD
 *
Hash
,

430 
sLí
);

432 
OSSL_DEPRECATEDIN_3_0


433 
RSA_vîify_PKCS1_PSS_mgf1
(
RSA
 *
rß
, c⁄° *
mHash
,

434 c⁄° 
EVP_MD
 *
Hash
, c⁄° EVP_MD *
mgf1Hash
,

435 c⁄° *
EM
, 
sLí
);

437 
OSSL_DEPRECATEDIN_3_0


438 
RSA_∑ddög_add_PKCS1_PSS_mgf1
(
RSA
 *
rß
, *
EM
,

439 c⁄° *
mHash
,

440 c⁄° 
EVP_MD
 *
Hash
, c⁄° EVP_MD *
mgf1Hash
,

441 
sLí
);

443 
	#RSA_gë_ex_√w_ödex
(
l
, 
p
, 
√wf
, 
dupf
, 
‰ìf
) \

444 
	`CRYPTO_gë_ex_√w_ödex
(
CRYPTO_EX_INDEX_RSA
, 
l
, 
p
, 
√wf
, 
dupf
, 
‰ìf
)

	)

445 
OSSL_DEPRECATEDIN_3_0
 
RSA_£t_ex_d©a
(
RSA
 *
r
, 
idx
, *
¨g
);

446 
OSSL_DEPRECATEDIN_3_0
 *
RSA_gë_ex_d©a
(c⁄° 
RSA
 *
r
, 
idx
);

448 
DECLARE_ASN1_DUP_FUNCTION_«me_©å
(
OSSL_DEPRECATEDIN_3_0
, 
RSA
, 
RSAPublicKey
)

449 
DECLARE_ASN1_DUP_FUNCTION_«me_©å
(
OSSL_DEPRECATEDIN_3_0
, 
RSA
, 
RSAPriv©eKey
)

458 
	#RSA_FLAG_FIPS_METHOD
 0x0400

	)

466 
	#RSA_FLAG_NON_FIPS_ALLOW
 0x0400

	)

471 
	#RSA_FLAG_CHECKED
 0x0800

	)

473 
OSSL_DEPRECATEDIN_3_0
 
RSA_METHOD
 *
RSA_mëh_√w
(c⁄° *
«me
, 
Êags
);

474 
OSSL_DEPRECATEDIN_3_0
 
RSA_mëh_‰ì
(
RSA_METHOD
 *
mëh
);

475 
OSSL_DEPRECATEDIN_3_0
 
RSA_METHOD
 *
RSA_mëh_dup
(c⁄° RSA_METHOD *
mëh
);

476 
OSSL_DEPRECATEDIN_3_0
 c⁄° *
RSA_mëh_gë0_«me
(c⁄° 
RSA_METHOD
 *
mëh
);

477 
OSSL_DEPRECATEDIN_3_0
 
RSA_mëh_£t1_«me
(
RSA_METHOD
 *
mëh
,

478 c⁄° *
«me
);

479 
OSSL_DEPRECATEDIN_3_0
 
RSA_mëh_gë_Êags
(c⁄° 
RSA_METHOD
 *
mëh
);

480 
OSSL_DEPRECATEDIN_3_0
 
RSA_mëh_£t_Êags
(
RSA_METHOD
 *
mëh
, 
Êags
);

481 
OSSL_DEPRECATEDIN_3_0
 *
RSA_mëh_gë0_≠p_d©a
(c⁄° 
RSA_METHOD
 *
mëh
);

482 
OSSL_DEPRECATEDIN_3_0
 
RSA_mëh_£t0_≠p_d©a
(
RSA_METHOD
 *
mëh
,

483 *
≠p_d©a
);

484 
OSSL_DEPRECATEDIN_3_0


485 (*
RSA_mëh_gë_pub_íc
(c⁄° 
RSA_METHOD
 *
mëh
)Ë(
Êí
,

486 c⁄° *
‰om
,

487 *
to
,

488 
RSA
 *
rß
, 
∑ddög
);

489 
OSSL_DEPRECATEDIN_3_0


490 
RSA_mëh_£t_pub_íc
(
RSA_METHOD
 *
rß
,

491 (*
pub_íc
Ë(
Êí
, c⁄° *
‰om
,

492 *
to
, 
RSA
 *
rß
,

493 
∑ddög
));

494 
OSSL_DEPRECATEDIN_3_0


495 (*
RSA_mëh_gë_pub_dec
(c⁄° 
RSA_METHOD
 *
mëh
)Ë(
Êí
,

496 c⁄° *
‰om
,

497 *
to
,

498 
RSA
 *
rß
, 
∑ddög
);

499 
OSSL_DEPRECATEDIN_3_0


500 
RSA_mëh_£t_pub_dec
(
RSA_METHOD
 *
rß
,

501 (*
pub_dec
Ë(
Êí
, c⁄° *
‰om
,

502 *
to
, 
RSA
 *
rß
,

503 
∑ddög
));

504 
OSSL_DEPRECATEDIN_3_0


505 (*
RSA_mëh_gë_¥iv_íc
(c⁄° 
RSA_METHOD
 *
mëh
)Ë(
Êí
,

506 c⁄° *
‰om
,

507 *
to
,

508 
RSA
 *
rß
, 
∑ddög
);

509 
OSSL_DEPRECATEDIN_3_0


510 
RSA_mëh_£t_¥iv_íc
(
RSA_METHOD
 *
rß
,

511 (*
¥iv_íc
Ë(
Êí
, c⁄° *
‰om
,

512 *
to
, 
RSA
 *
rß
,

513 
∑ddög
));

514 
OSSL_DEPRECATEDIN_3_0


515 (*
RSA_mëh_gë_¥iv_dec
(c⁄° 
RSA_METHOD
 *
mëh
)Ë(
Êí
,

516 c⁄° *
‰om
,

517 *
to
,

518 
RSA
 *
rß
, 
∑ddög
);

519 
OSSL_DEPRECATEDIN_3_0


520 
RSA_mëh_£t_¥iv_dec
(
RSA_METHOD
 *
rß
,

521 (*
¥iv_dec
Ë(
Êí
, c⁄° *
‰om
,

522 *
to
, 
RSA
 *
rß
,

523 
∑ddög
));

524 
OSSL_DEPRECATEDIN_3_0


525 (*
RSA_mëh_gë_mod_exp
(c⁄° 
RSA_METHOD
 *
mëh
)Ë(
BIGNUM
 *
r0
,

526 c⁄° 
BIGNUM
 *
i
,

527 
RSA
 *
rß
, 
BN_CTX
 *
˘x
);

528 
OSSL_DEPRECATEDIN_3_0


529 
RSA_mëh_£t_mod_exp
(
RSA_METHOD
 *
rß
,

530 (*
mod_exp
Ë(
BIGNUM
 *
r0
, c⁄° BIGNUM *
i
, 
RSA
 *
rß
,

531 
BN_CTX
 *
˘x
));

532 
OSSL_DEPRECATEDIN_3_0


533 (*
RSA_mëh_gë_bn_mod_exp
(c⁄° 
RSA_METHOD
 *
mëh
)Ë(
BIGNUM
 *
r
,

534 c⁄° 
BIGNUM
 *
a
,

535 c⁄° 
BIGNUM
 *
p
,

536 c⁄° 
BIGNUM
 *
m
,

537 
BN_CTX
 *
˘x
,

538 
BN_MONT_CTX
 *
m_˘x
);

539 
OSSL_DEPRECATEDIN_3_0


540 
RSA_mëh_£t_bn_mod_exp
(
RSA_METHOD
 *
rß
,

541 (*
bn_mod_exp
Ë(
BIGNUM
 *
r
,

542 c⁄° 
BIGNUM
 *
a
,

543 c⁄° 
BIGNUM
 *
p
,

544 c⁄° 
BIGNUM
 *
m
,

545 
BN_CTX
 *
˘x
,

546 
BN_MONT_CTX
 *
m_˘x
));

547 
OSSL_DEPRECATEDIN_3_0


548 (*
RSA_mëh_gë_öô
(c⁄° 
RSA_METHOD
 *
mëh
)Ë(
RSA
 *
rß
);

549 
OSSL_DEPRECATEDIN_3_0


550 
RSA_mëh_£t_öô
(
RSA_METHOD
 *
rß
, (*
öô
Ë(
RSA
 *rsa));

551 
OSSL_DEPRECATEDIN_3_0


552 (*
RSA_mëh_gë_föish
(c⁄° 
RSA_METHOD
 *
mëh
)Ë(
RSA
 *
rß
);

553 
OSSL_DEPRECATEDIN_3_0


554 
RSA_mëh_£t_föish
(
RSA_METHOD
 *
rß
, (*
föish
Ë(
RSA
 *rsa));

555 
OSSL_DEPRECATEDIN_3_0


556 (*
RSA_mëh_gë_sign
(c⁄° 
RSA_METHOD
 *
mëh
)Ë(
ty≥
,

557 c⁄° *
m
,

558 
m_Àngth
,

559 *
sigªt
,

560 *
sigÀn
,

561 c⁄° 
RSA
 *
rß
);

562 
OSSL_DEPRECATEDIN_3_0


563 
RSA_mëh_£t_sign
(
RSA_METHOD
 *
rß
,

564 (*
sign
Ë(
ty≥
, c⁄° *
m
,

565 
m_Àngth
,

566 *
sigªt
, *
sigÀn
,

567 c⁄° 
RSA
 *
rß
));

568 
OSSL_DEPRECATEDIN_3_0


569 (*
RSA_mëh_gë_vîify
(c⁄° 
RSA_METHOD
 *
mëh
)Ë(
dty≥
,

570 c⁄° *
m
,

571 
m_Àngth
,

572 c⁄° *
sigbuf
,

573 
sigÀn
,

574 c⁄° 
RSA
 *
rß
);

575 
OSSL_DEPRECATEDIN_3_0


576 
RSA_mëh_£t_vîify
(
RSA_METHOD
 *
rß
,

577 (*
vîify
Ë(
dty≥
, c⁄° *
m
,

578 
m_Àngth
,

579 c⁄° *
sigbuf
,

580 
sigÀn
, c⁄° 
RSA
 *
rß
));

581 
OSSL_DEPRECATEDIN_3_0


582 (*
RSA_mëh_gë_keygí
(c⁄° 
RSA_METHOD
 *
mëh
)Ë(
RSA
 *
rß
, 
bôs
,

583 
BIGNUM
 *
e
, 
BN_GENCB
 *
cb
);

584 
OSSL_DEPRECATEDIN_3_0


585 
RSA_mëh_£t_keygí
(
RSA_METHOD
 *
rß
,

586 (*
keygí
Ë(
RSA
 *
rß
, 
bôs
, 
BIGNUM
 *
e
,

587 
BN_GENCB
 *
cb
));

588 
OSSL_DEPRECATEDIN_3_0


589 (*
RSA_mëh_gë_mu…i_¥ime_keygí
(c⁄° 
RSA_METHOD
 *
mëh
)Ë(
RSA
 *
rß
,

590 
bôs
,

591 
¥imes
,

592 
BIGNUM
 *
e
,

593 
BN_GENCB
 *
cb
);

594 
OSSL_DEPRECATEDIN_3_0


595 
RSA_mëh_£t_mu…i_¥ime_keygí
(
RSA_METHOD
 *
mëh
,

596 (*
keygí
Ë(
RSA
 *
rß
, 
bôs
,

597 
¥imes
, 
BIGNUM
 *
e
,

598 
BN_GENCB
 *
cb
));

601 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/sha.h

10 #i‚de‡
OPENSSL_SHA_H


11 
	#OPENSSL_SHA_H


	)

12 #¥agm®
⁄˚


14 
	~<›ís¶/ma¸os.h
>

15 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


16 
	#HEADER_SHA_H


	)

19 
	~<›ís¶/e_os2.h
>

20 
	~<°ddef.h
>

22 #ifde‡ 
__˝lu•lus


26 
	#SHA_DIGEST_LENGTH
 20

	)

28 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


34 
	#SHA_LONG
 

	)

36 
	#SHA_LBLOCK
 16

	)

37 
	#SHA_CBLOCK
 (
SHA_LBLOCK
*4)

	)

40 
	#SHA_LAST_BLOCK
 (
SHA_CBLOCK
-8)

	)

42 
	sSHA°©e_°
 {

43 
SHA_LONG
 
h0
, 
h1
, 
h2
, 
h3
, 
h4
;

44 
SHA_LONG
 
Nl
, 
Nh
;

45 
SHA_LONG
 
d©a
[
SHA_LBLOCK
];

46 
num
;

47 } 
	tSHA_CTX
;

49 
OSSL_DEPRECATEDIN_3_0
 
SHA1_Inô
(
SHA_CTX
 *
c
);

50 
OSSL_DEPRECATEDIN_3_0
 
SHA1_Upd©e
(
SHA_CTX
 *
c
, c⁄° *
d©a
, 
size_t
 
Àn
);

51 
OSSL_DEPRECATEDIN_3_0
 
SHA1_FöÆ
(*
md
, 
SHA_CTX
 *
c
);

52 
OSSL_DEPRECATEDIN_3_0
 
SHA1_Tønsf‹m
(
SHA_CTX
 *
c
, c⁄° *
d©a
);

55 *
SHA1
(c⁄° *
d
, 
size_t
 
n
, *
md
);

57 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


58 
	#SHA256_CBLOCK
 (
SHA_LBLOCK
*4)

	)

62 
	sSHA256°©e_°
 {

63 
SHA_LONG
 
h
[8];

64 
SHA_LONG
 
Nl
, 
Nh
;

65 
SHA_LONG
 
d©a
[
SHA_LBLOCK
];

66 
num
, 
md_Àn
;

67 } 
	tSHA256_CTX
;

69 
OSSL_DEPRECATEDIN_3_0
 
SHA224_Inô
(
SHA256_CTX
 *
c
);

70 
OSSL_DEPRECATEDIN_3_0
 
SHA224_Upd©e
(
SHA256_CTX
 *
c
,

71 c⁄° *
d©a
, 
size_t
 
Àn
);

72 
OSSL_DEPRECATEDIN_3_0
 
SHA224_FöÆ
(*
md
, 
SHA256_CTX
 *
c
);

73 
OSSL_DEPRECATEDIN_3_0
 
SHA256_Inô
(
SHA256_CTX
 *
c
);

74 
OSSL_DEPRECATEDIN_3_0
 
SHA256_Upd©e
(
SHA256_CTX
 *
c
,

75 c⁄° *
d©a
, 
size_t
 
Àn
);

76 
OSSL_DEPRECATEDIN_3_0
 
SHA256_FöÆ
(*
md
, 
SHA256_CTX
 *
c
);

77 
OSSL_DEPRECATEDIN_3_0
 
SHA256_Tønsf‹m
(
SHA256_CTX
 *
c
,

78 c⁄° *
d©a
);

81 *
SHA224
(c⁄° *
d
, 
size_t
 
n
, *
md
);

82 *
SHA256
(c⁄° *
d
, 
size_t
 
n
, *
md
);

84 
	#SHA224_DIGEST_LENGTH
 28

	)

85 
	#SHA256_DIGEST_LENGTH
 32

	)

86 
	#SHA384_DIGEST_LENGTH
 48

	)

87 
	#SHA512_DIGEST_LENGTH
 64

	)

89 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


100 
	#SHA512_CBLOCK
 (
SHA_LBLOCK
*8)

	)

101 #i‡(
deföed
(
_WIN32
Ë|| deföed(
_WIN64
)Ë&& !deföed(
__MINGW32__
)

102 
	#SHA_LONG64
 
__öt64


	)

103 #ñi‡
deföed
(
__¨ch64__
)

104 
	#SHA_LONG64
 

	)

106 
	#SHA_LONG64
 

	)

109 
	sSHA512°©e_°
 {

110 
SHA_LONG64
 
h
[8];

111 
SHA_LONG64
 
Nl
, 
Nh
;

113 
SHA_LONG64
 
d
[
SHA_LBLOCK
];

114 
p
[
SHA512_CBLOCK
];

115 } 
u
;

116 
num
, 
md_Àn
;

117 } 
	tSHA512_CTX
;

119 
OSSL_DEPRECATEDIN_3_0
 
SHA384_Inô
(
SHA512_CTX
 *
c
);

120 
OSSL_DEPRECATEDIN_3_0
 
SHA384_Upd©e
(
SHA512_CTX
 *
c
,

121 c⁄° *
d©a
, 
size_t
 
Àn
);

122 
OSSL_DEPRECATEDIN_3_0
 
SHA384_FöÆ
(*
md
, 
SHA512_CTX
 *
c
);

123 
OSSL_DEPRECATEDIN_3_0
 
SHA512_Inô
(
SHA512_CTX
 *
c
);

124 
OSSL_DEPRECATEDIN_3_0
 
SHA512_Upd©e
(
SHA512_CTX
 *
c
,

125 c⁄° *
d©a
, 
size_t
 
Àn
);

126 
OSSL_DEPRECATEDIN_3_0
 
SHA512_FöÆ
(*
md
, 
SHA512_CTX
 *
c
);

127 
OSSL_DEPRECATEDIN_3_0
 
SHA512_Tønsf‹m
(
SHA512_CTX
 *
c
,

128 c⁄° *
d©a
);

131 *
SHA384
(c⁄° *
d
, 
size_t
 
n
, *
md
);

132 *
SHA512
(c⁄° *
d
, 
size_t
 
n
, *
md
);

134 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/ssl.h

17 #i‚de‡
OPENSSL_SSL_H


18 
	#OPENSSL_SSL_H


	)

19 #¥agm®
⁄˚


21 
	~<›ís¶/ma¸os.h
>

22 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


23 
	#HEADER_SSL_H


	)

26 
	~<›ís¶/e_os2.h
>

27 
	~<›ís¶/›ís¶c⁄f.h
>

28 
	~<›ís¶/comp.h
>

29 
	~<›ís¶/bio.h
>

30 #i‚de‡
OPENSSL_NO_DEPRECATED_1_1_0


31 
	~<›ís¶/x509.h
>

32 
	~<›ís¶/¸y±o.h
>

33 
	~<›ís¶/buf„r.h
>

35 
	~<›ís¶/lhash.h
>

36 
	~<›ís¶/≥m.h
>

37 
	~<›ís¶/hmac.h
>

38 
	~<›ís¶/async.h
>

40 
	~<›ís¶/ß„°ack.h
>

41 
	~<›ís¶/symhacks.h
>

42 
	~<›ís¶/˘.h
>

43 
	~<›ís¶/s¶îr.h
>

44 
	~<›ís¶/¥ov_s¶.h
>

46 #ifde‡ 
__˝lu•lus


55 
	#SSL_SESSION_ASN1_VERSION
 0x0001

	)

57 
	#SSL_MAX_SSL_SESSION_ID_LENGTH
 32

	)

58 
	#SSL_MAX_SID_CTX_LENGTH
 32

	)

60 
	#SSL_MIN_RSA_MODULUS_LENGTH_IN_BYTES
 (512/8)

	)

61 
	#SSL_MAX_KEY_ARG_LENGTH
 8

	)

65 
	#SSL_MAX_PIPELINES
 32

	)

71 
	#SSL_TXT_LOW
 "LOW"

	)

72 
	#SSL_TXT_MEDIUM
 "MEDIUM"

	)

73 
	#SSL_TXT_HIGH
 "HIGH"

	)

74 
	#SSL_TXT_FIPS
 "FIPS"

	)

76 
	#SSL_TXT_aNULL
 "aNULL"

	)

77 
	#SSL_TXT_eNULL
 "eNULL"

	)

78 
	#SSL_TXT_NULL
 "NULL"

	)

80 
	#SSL_TXT_kRSA
 "kRSA"

	)

81 
	#SSL_TXT_kDHr
 "kDHr"

	)

82 
	#SSL_TXT_kDHd
 "kDHd"

	)

83 
	#SSL_TXT_kDH
 "kDH"

	)

84 
	#SSL_TXT_kEDH
 "kEDH"

	)

85 
	#SSL_TXT_kDHE
 "kDHE"

	)

86 
	#SSL_TXT_kECDHr
 "kECDHr"

	)

87 
	#SSL_TXT_kECDHe
 "kECDHe"

	)

88 
	#SSL_TXT_kECDH
 "kECDH"

	)

89 
	#SSL_TXT_kEECDH
 "kEECDH"

	)

90 
	#SSL_TXT_kECDHE
 "kECDHE"

	)

91 
	#SSL_TXT_kPSK
 "kPSK"

	)

92 
	#SSL_TXT_kRSAPSK
 "kRSAPSK"

	)

93 
	#SSL_TXT_kECDHEPSK
 "kECDHEPSK"

	)

94 
	#SSL_TXT_kDHEPSK
 "kDHEPSK"

	)

95 
	#SSL_TXT_kGOST
 "kGOST"

	)

96 
	#SSL_TXT_kGOST18
 "kGOST18"

	)

97 
	#SSL_TXT_kSRP
 "kSRP"

	)

99 
	#SSL_TXT_aRSA
 "aRSA"

	)

100 
	#SSL_TXT_aDSS
 "aDSS"

	)

101 
	#SSL_TXT_aDH
 "aDH"

	)

102 
	#SSL_TXT_aECDH
 "aECDH"

	)

103 
	#SSL_TXT_aECDSA
 "aECDSA"

	)

104 
	#SSL_TXT_aPSK
 "aPSK"

	)

105 
	#SSL_TXT_aGOST94
 "aGOST94"

	)

106 
	#SSL_TXT_aGOST01
 "aGOST01"

	)

107 
	#SSL_TXT_aGOST12
 "aGOST12"

	)

108 
	#SSL_TXT_aGOST
 "aGOST"

	)

109 
	#SSL_TXT_aSRP
 "aSRP"

	)

111 
	#SSL_TXT_DSS
 "DSS"

	)

112 
	#SSL_TXT_DH
 "DH"

	)

113 
	#SSL_TXT_DHE
 "DHE"

	)

114 
	#SSL_TXT_EDH
 "EDH"

	)

115 
	#SSL_TXT_ADH
 "ADH"

	)

116 
	#SSL_TXT_RSA
 "RSA"

	)

117 
	#SSL_TXT_ECDH
 "ECDH"

	)

118 
	#SSL_TXT_EECDH
 "EECDH"

	)

119 
	#SSL_TXT_ECDHE
 "ECDHE"

	)

120 
	#SSL_TXT_AECDH
 "AECDH"

	)

121 
	#SSL_TXT_ECDSA
 "ECDSA"

	)

122 
	#SSL_TXT_PSK
 "PSK"

	)

123 
	#SSL_TXT_SRP
 "SRP"

	)

125 
	#SSL_TXT_DES
 "DES"

	)

126 
	#SSL_TXT_3DES
 "3DES"

	)

127 
	#SSL_TXT_RC4
 "RC4"

	)

128 
	#SSL_TXT_RC2
 "RC2"

	)

129 
	#SSL_TXT_IDEA
 "IDEA"

	)

130 
	#SSL_TXT_SEED
 "SEED"

	)

131 
	#SSL_TXT_AES128
 "AES128"

	)

132 
	#SSL_TXT_AES256
 "AES256"

	)

133 
	#SSL_TXT_AES
 "AES"

	)

134 
	#SSL_TXT_AES_GCM
 "AESGCM"

	)

135 
	#SSL_TXT_AES_CCM
 "AESCCM"

	)

136 
	#SSL_TXT_AES_CCM_8
 "AESCCM8"

	)

137 
	#SSL_TXT_CAMELLIA128
 "CAMELLIA128"

	)

138 
	#SSL_TXT_CAMELLIA256
 "CAMELLIA256"

	)

139 
	#SSL_TXT_CAMELLIA
 "CAMELLIA"

	)

140 
	#SSL_TXT_CHACHA20
 "CHACHA20"

	)

141 
	#SSL_TXT_GOST
 "GOST89"

	)

142 
	#SSL_TXT_ARIA
 "ARIA"

	)

143 
	#SSL_TXT_ARIA_GCM
 "ARIAGCM"

	)

144 
	#SSL_TXT_ARIA128
 "ARIA128"

	)

145 
	#SSL_TXT_ARIA256
 "ARIA256"

	)

146 
	#SSL_TXT_GOST2012_GOST8912_GOST8912
 "GOST2012-GOST8912-GOST8912"

	)

147 
	#SSL_TXT_CBC
 "CBC"

	)

149 
	#SSL_TXT_MD5
 "MD5"

	)

150 
	#SSL_TXT_SHA1
 "SHA1"

	)

151 
	#SSL_TXT_SHA
 "SHA"

	)

152 
	#SSL_TXT_GOST94
 "GOST94"

	)

153 
	#SSL_TXT_GOST89MAC
 "GOST89MAC"

	)

154 
	#SSL_TXT_GOST12
 "GOST12"

	)

155 
	#SSL_TXT_GOST89MAC12
 "GOST89MAC12"

	)

156 
	#SSL_TXT_SHA256
 "SHA256"

	)

157 
	#SSL_TXT_SHA384
 "SHA384"

	)

159 
	#SSL_TXT_SSLV3
 "SSLv3"

	)

160 
	#SSL_TXT_TLSV1
 "TLSv1"

	)

161 
	#SSL_TXT_TLSV1_1
 "TLSv1.1"

	)

162 
	#SSL_TXT_TLSV1_2
 "TLSv1.2"

	)

164 
	#SSL_TXT_ALL
 "ALL"

	)

180 
	#SSL_TXT_CMPALL
 "COMPLEMENTOFALL"

	)

181 
	#SSL_TXT_CMPDEF
 "COMPLEMENTOFDEFAULT"

	)

190 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


191 
	#SSL_DEFAULT_CIPHER_LIST
 "ALL:!COMPLEMENTOFDEFAULT:!eNULL"

	)

197 
	#TLS_DEFAULT_CIPHERSUITES
 "TLS_AES_256_GCM_SHA384:" \

199 "TLS_AES_128_GCM_SHA256"

	)

209 
	#SSL_SENT_SHUTDOWN
 1

	)

210 
	#SSL_RECEIVED_SHUTDOWN
 2

	)

212 #ifde‡
__˝lu•lus


216 #ifde‡ 
__˝lu•lus


220 
	#SSL_FILETYPE_ASN1
 
X509_FILETYPE_ASN1


	)

221 
	#SSL_FILETYPE_PEM
 
X509_FILETYPE_PEM


	)

227 
s¶_°
 *
	ts¶_¸ock_°
;

228 
és_£ssi⁄_tickë_ext_°
 
	tTLS_SESSION_TICKET_EXT
;

229 
s¶_mëhod_°
 
	tSSL_METHOD
;

230 
s¶_cùhî_°
 
	tSSL_CIPHER
;

231 
s¶_£ssi⁄_°
 
	tSSL_SESSION
;

232 
és_sigÆgs_°
 
	tTLS_SIGALGS
;

233 
s¶_c⁄f_˘x_°
 
	tSSL_CONF_CTX
;

234 
s¶_comp_°
 
	tSSL_COMP
;

236 
STACK_OF
(
SSL_CIPHER
);

237 
STACK_OF
(
SSL_COMP
);

240 
	s§ç_¥Ÿe˘i⁄_¥ofûe_°
 {

241 c⁄° *
«me
;

242 
id
;

243 } 
	tSRTP_PROTECTION_PROFILE
;

244 
SKM_DEFINE_STACK_OF_INTERNAL
(
SRTP_PROTECTION_PROFILE
, SRTP_PROTECTION_PROFILE, SRTP_PROTECTION_PROFILE)

245 
	#sk_SRTP_PROTECTION_PROFILE_num
(
sk
Ë
	`OPENSSL_sk_num
(
	`os¶_check_c⁄°_SRTP_PROTECTION_PROFILE_sk_ty≥
(sk))

	)

246 
	#sk_SRTP_PROTECTION_PROFILE_vÆue
(
sk
, 
idx
Ë((
SRTP_PROTECTION_PROFILE
 *)
	`OPENSSL_sk_vÆue
(
	`os¶_check_c⁄°_SRTP_PROTECTION_PROFILE_sk_ty≥
(sk), (idx)))

	)

247 
	#sk_SRTP_PROTECTION_PROFILE_√w
(
cmp
Ë((
	`STACK_OF
(
SRTP_PROTECTION_PROFILE
Ë*)
	`OPENSSL_sk_√w
(
	`os¶_check_SRTP_PROTECTION_PROFILE_compfunc_ty≥
(cmp)))

	)

248 
	#sk_SRTP_PROTECTION_PROFILE_√w_nuŒ
(Ë((
	`STACK_OF
(
SRTP_PROTECTION_PROFILE
Ë*)
	`OPENSSL_sk_√w_nuŒ
())

	)

249 
	#sk_SRTP_PROTECTION_PROFILE_√w_ª£rve
(
cmp
, 
n
Ë((
	`STACK_OF
(
SRTP_PROTECTION_PROFILE
Ë*)
	`OPENSSL_sk_√w_ª£rve
(
	`os¶_check_SRTP_PROTECTION_PROFILE_compfunc_ty≥
(cmp), (n)))

	)

250 
	#sk_SRTP_PROTECTION_PROFILE_ª£rve
(
sk
, 
n
Ë
	`OPENSSL_sk_ª£rve
(
	`os¶_check_SRTP_PROTECTION_PROFILE_sk_ty≥
(sk), (n))

	)

251 
	#sk_SRTP_PROTECTION_PROFILE_‰ì
(
sk
Ë
	`OPENSSL_sk_‰ì
(
	`os¶_check_SRTP_PROTECTION_PROFILE_sk_ty≥
(sk))

	)

252 
	#sk_SRTP_PROTECTION_PROFILE_zîo
(
sk
Ë
	`OPENSSL_sk_zîo
(
	`os¶_check_SRTP_PROTECTION_PROFILE_sk_ty≥
(sk))

	)

253 
	#sk_SRTP_PROTECTION_PROFILE_dñëe
(
sk
, 
i
Ë((
SRTP_PROTECTION_PROFILE
 *)
	`OPENSSL_sk_dñëe
(
	`os¶_check_SRTP_PROTECTION_PROFILE_sk_ty≥
(sk), (i)))

	)

254 
	#sk_SRTP_PROTECTION_PROFILE_dñëe_±r
(
sk
, 
±r
Ë((
SRTP_PROTECTION_PROFILE
 *)
	`OPENSSL_sk_dñëe_±r
(
	`os¶_check_SRTP_PROTECTION_PROFILE_sk_ty≥
(sk), 
	`os¶_check_SRTP_PROTECTION_PROFILE_ty≥
’å)))

	)

255 
	#sk_SRTP_PROTECTION_PROFILE_push
(
sk
, 
±r
Ë
	`OPENSSL_sk_push
(
	`os¶_check_SRTP_PROTECTION_PROFILE_sk_ty≥
(sk), 
	`os¶_check_SRTP_PROTECTION_PROFILE_ty≥
’å))

	)

256 
	#sk_SRTP_PROTECTION_PROFILE_unshi·
(
sk
, 
±r
Ë
	`OPENSSL_sk_unshi·
(
	`os¶_check_SRTP_PROTECTION_PROFILE_sk_ty≥
(sk), 
	`os¶_check_SRTP_PROTECTION_PROFILE_ty≥
’å))

	)

257 
	#sk_SRTP_PROTECTION_PROFILE_p›
(
sk
Ë((
SRTP_PROTECTION_PROFILE
 *)
	`OPENSSL_sk_p›
(
	`os¶_check_SRTP_PROTECTION_PROFILE_sk_ty≥
(sk)))

	)

258 
	#sk_SRTP_PROTECTION_PROFILE_shi·
(
sk
Ë((
SRTP_PROTECTION_PROFILE
 *)
	`OPENSSL_sk_shi·
(
	`os¶_check_SRTP_PROTECTION_PROFILE_sk_ty≥
(sk)))

	)

259 
	#sk_SRTP_PROTECTION_PROFILE_p›_‰ì
(
sk
, 
‰ìfunc
Ë
	`OPENSSL_sk_p›_‰ì
(
	`os¶_check_SRTP_PROTECTION_PROFILE_sk_ty≥
(sk),
	`os¶_check_SRTP_PROTECTION_PROFILE_‰ìfunc_ty≥
(‰ìfunc))

	)

260 
	#sk_SRTP_PROTECTION_PROFILE_ö£π
(
sk
, 
±r
, 
idx
Ë
	`OPENSSL_sk_ö£π
(
	`os¶_check_SRTP_PROTECTION_PROFILE_sk_ty≥
(sk), 
	`os¶_check_SRTP_PROTECTION_PROFILE_ty≥
’å), (idx))

	)

261 
	#sk_SRTP_PROTECTION_PROFILE_£t
(
sk
, 
idx
, 
±r
Ë((
SRTP_PROTECTION_PROFILE
 *)
	`OPENSSL_sk_£t
(
	`os¶_check_SRTP_PROTECTION_PROFILE_sk_ty≥
(sk), (idx), 
	`os¶_check_SRTP_PROTECTION_PROFILE_ty≥
’å)))

	)

262 
	#sk_SRTP_PROTECTION_PROFILE_föd
(
sk
, 
±r
Ë
	`OPENSSL_sk_föd
(
	`os¶_check_SRTP_PROTECTION_PROFILE_sk_ty≥
(sk), 
	`os¶_check_SRTP_PROTECTION_PROFILE_ty≥
’å))

	)

263 
	#sk_SRTP_PROTECTION_PROFILE_föd_ex
(
sk
, 
±r
Ë
	`OPENSSL_sk_föd_ex
(
	`os¶_check_SRTP_PROTECTION_PROFILE_sk_ty≥
(sk), 
	`os¶_check_SRTP_PROTECTION_PROFILE_ty≥
’å))

	)

264 
	#sk_SRTP_PROTECTION_PROFILE_föd_Æl
(
sk
, 
±r
, 
≤um
Ë
	`OPENSSL_sk_föd_Æl
(
	`os¶_check_SRTP_PROTECTION_PROFILE_sk_ty≥
(sk), 
	`os¶_check_SRTP_PROTECTION_PROFILE_ty≥
’å),Önum)

	)

265 
	#sk_SRTP_PROTECTION_PROFILE_s‹t
(
sk
Ë
	`OPENSSL_sk_s‹t
(
	`os¶_check_SRTP_PROTECTION_PROFILE_sk_ty≥
(sk))

	)

266 
	#sk_SRTP_PROTECTION_PROFILE_is_s‹ãd
(
sk
Ë
	`OPENSSL_sk_is_s‹ãd
(
	`os¶_check_c⁄°_SRTP_PROTECTION_PROFILE_sk_ty≥
(sk))

	)

267 
	#sk_SRTP_PROTECTION_PROFILE_dup
(
sk
Ë((
	`STACK_OF
(
SRTP_PROTECTION_PROFILE
Ë*)
	`OPENSSL_sk_dup
(
	`os¶_check_c⁄°_SRTP_PROTECTION_PROFILE_sk_ty≥
(sk)))

	)

268 
	#sk_SRTP_PROTECTION_PROFILE_dìp_c›y
(
sk
, 
c›yfunc
, 
‰ìfunc
Ë((
	`STACK_OF
(
SRTP_PROTECTION_PROFILE
Ë*)
	`OPENSSL_sk_dìp_c›y
(
	`os¶_check_c⁄°_SRTP_PROTECTION_PROFILE_sk_ty≥
(sk), 
	`os¶_check_SRTP_PROTECTION_PROFILE_c›yfunc_ty≥
(c›yfunc), 
	`os¶_check_SRTP_PROTECTION_PROFILE_‰ìfunc_ty≥
(‰ìfunc)))

	)

269 
	#sk_SRTP_PROTECTION_PROFILE_£t_cmp_func
(
sk
, 
cmp
Ë((
sk_SRTP_PROTECTION_PROFILE_compfunc
)
	`OPENSSL_sk_£t_cmp_func
(
	`os¶_check_SRTP_PROTECTION_PROFILE_sk_ty≥
(sk), 
	`os¶_check_SRTP_PROTECTION_PROFILE_compfunc_ty≥
(cmp)))

	)

273 (*
és_£ssi⁄_tickë_ext_cb_‚
)(
	tSSL
 *
	ts
, c⁄° *
	td©a
,

274 
	tÀn
, *
	t¨g
);

275 (*
és_£ssi⁄_£¸ë_cb_‚
)(
	tSSL
 *
	ts
, *
	t£¸ë
, *
	t£¸ë_Àn
,

276 
	tSTACK_OF
(
	tSSL_CIPHER
Ë*
	t≥î_cùhîs
,

277 c⁄° 
	tSSL_CIPHER
 **
	tcùhî
, *
	t¨g
);

281 
	#SSL_EXT_TLS_ONLY
 0x0001

	)

283 
	#SSL_EXT_DTLS_ONLY
 0x0002

	)

285 
	#SSL_EXT_TLS_IMPLEMENTATION_ONLY
 0x0004

	)

287 
	#SSL_EXT_SSL3_ALLOWED
 0x0008

	)

289 
	#SSL_EXT_TLS1_2_AND_BELOW_ONLY
 0x0010

	)

291 
	#SSL_EXT_TLS1_3_ONLY
 0x0020

	)

293 
	#SSL_EXT_IGNORE_ON_RESUMPTION
 0x0040

	)

294 
	#SSL_EXT_CLIENT_HELLO
 0x0080

	)

296 
	#SSL_EXT_TLS1_2_SERVER_HELLO
 0x0100

	)

297 
	#SSL_EXT_TLS1_3_SERVER_HELLO
 0x0200

	)

298 
	#SSL_EXT_TLS1_3_ENCRYPTED_EXTENSIONS
 0x0400

	)

299 
	#SSL_EXT_TLS1_3_HELLO_RETRY_REQUEST
 0x0800

	)

300 
	#SSL_EXT_TLS1_3_CERTIFICATE
 0x1000

	)

301 
	#SSL_EXT_TLS1_3_NEW_SESSION_TICKET
 0x2000

	)

302 
	#SSL_EXT_TLS1_3_CERTIFICATE_REQUEST
 0x4000

	)

306 (*
cu°om_ext_add_cb
)(
	tSSL
 *
	ts
, 
	text_ty≥
,

307 c⁄° **
	tout
, 
	tsize_t
 *
	touéí
,

308 *
	tÆ
, *
	tadd_¨g
);

310 (*
cu°om_ext_‰ì_cb
)(
	tSSL
 *
	ts
, 
	text_ty≥
,

311 c⁄° *
	tout
, *
	tadd_¨g
);

313 (*
cu°om_ext_∑r£_cb
)(
	tSSL
 *
	ts
, 
	text_ty≥
,

314 c⁄° *
	tö
, 
	tsize_t
 
	töÀn
,

315 *
	tÆ
, *
	t∑r£_¨g
);

318 (*
SSL_cu°om_ext_add_cb_ex
)(
	tSSL
 *
	ts
, 
	text_ty≥
,

319 
	tc⁄ãxt
,

320 c⁄° **
	tout
,

321 
	tsize_t
 *
	touéí
, 
	tX509
 *
	tx
,

322 
	tsize_t
 
	tchaöidx
,

323 *
	tÆ
, *
	tadd_¨g
);

325 (*
SSL_cu°om_ext_‰ì_cb_ex
)(
	tSSL
 *
	ts
, 
	text_ty≥
,

326 
	tc⁄ãxt
,

327 c⁄° *
	tout
,

328 *
	tadd_¨g
);

330 (*
SSL_cu°om_ext_∑r£_cb_ex
)(
	tSSL
 *
	ts
, 
	text_ty≥
,

331 
	tc⁄ãxt
,

332 c⁄° *
	tö
,

333 
	tsize_t
 
	töÀn
, 
	tX509
 *
	tx
,

334 
	tsize_t
 
	tchaöidx
,

335 *
	tÆ
, *
	t∑r£_¨g
);

338 (*
SSL_vîify_cb
)(
	t¥evîify_ok
, 
	tX509_STORE_CTX
 *
	tx509_˘x
);

341 (*
SSL_async_ˇŒback_‚
)(
	tSSL
 *
	ts
, *
	t¨g
);

343 
	#SSL_OP_BIT
(
n
Ë((
uöt64_t
)1 << (uöt64_tÍ)

	)

349 
	#SSL_OP_NO_EXTENDED_MASTER_SECRET
 
	`SSL_OP_BIT
(0)

	)

351 
	#SSL_OP_CLEANSE_PLAINTEXT
 
	`SSL_OP_BIT
(1)

	)

353 
	#SSL_OP_LEGACY_SERVER_CONNECT
 
	`SSL_OP_BIT
(2)

	)

355 
	#SSL_OP_ENABLE_KTLS
 
	`SSL_OP_BIT
(3)

	)

356 
	#SSL_OP_TLSEXT_PADDING
 
	`SSL_OP_BIT
(4)

	)

357 
	#SSL_OP_SAFARI_ECDHE_ECDSA_BUG
 
	`SSL_OP_BIT
(6)

	)

358 
	#SSL_OP_IGNORE_UNEXPECTED_EOF
 
	`SSL_OP_BIT
(7)

	)

359 
	#SSL_OP_ALLOW_CLIENT_RENEGOTIATION
 
	`SSL_OP_BIT
(8)

	)

360 
	#SSL_OP_DISABLE_TLSEXT_CA_NAMES
 
	`SSL_OP_BIT
(9)

	)

362 
	#SSL_OP_ALLOW_NO_DHE_KEX
 
	`SSL_OP_BIT
(10)

	)

370 
	#SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS
 
	`SSL_OP_BIT
(11)

	)

372 
	#SSL_OP_NO_QUERY_MTU
 
	`SSL_OP_BIT
(12)

	)

374 
	#SSL_OP_COOKIE_EXCHANGE
 
	`SSL_OP_BIT
(13)

	)

376 
	#SSL_OP_NO_TICKET
 
	`SSL_OP_BIT
(14)

	)

377 #i‚de‡
OPENSSL_NO_DTLS1_METHOD


382 
	#SSL_OP_CISCO_ANYCONNECT
 
	`SSL_OP_BIT
(15)

	)

385 
	#SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION
 
	`SSL_OP_BIT
(16)

	)

387 
	#SSL_OP_NO_COMPRESSION
 
	`SSL_OP_BIT
(17)

	)

389 
	#SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION
 
	`SSL_OP_BIT
(18)

	)

391 
	#SSL_OP_NO_ENCRYPT_THEN_MAC
 
	`SSL_OP_BIT
(19)

	)

396 
	#SSL_OP_ENABLE_MIDDLEBOX_COMPAT
 
	`SSL_OP_BIT
(20)

	)

401 
	#SSL_OP_PRIORITIZE_CHACHA
 
	`SSL_OP_BIT
(21)

	)

405 
	#SSL_OP_CIPHER_SERVER_PREFERENCE
 
	`SSL_OP_BIT
(22)

	)

412 
	#SSL_OP_TLS_ROLLBACK_BUG
 
	`SSL_OP_BIT
(23)

	)

417 
	#SSL_OP_NO_ANTI_REPLAY
 
	`SSL_OP_BIT
(24)

	)

418 
	#SSL_OP_NO_SSLv3
 
	`SSL_OP_BIT
(25)

	)

419 
	#SSL_OP_NO_TLSv1
 
	`SSL_OP_BIT
(26)

	)

420 
	#SSL_OP_NO_TLSv1_2
 
	`SSL_OP_BIT
(27)

	)

421 
	#SSL_OP_NO_TLSv1_1
 
	`SSL_OP_BIT
(28)

	)

422 
	#SSL_OP_NO_TLSv1_3
 
	`SSL_OP_BIT
(29)

	)

423 
	#SSL_OP_NO_DTLSv1
 
	`SSL_OP_BIT
(26)

	)

424 
	#SSL_OP_NO_DTLSv1_2
 
	`SSL_OP_BIT
(27)

	)

426 
	#SSL_OP_NO_RENEGOTIATION
 
	`SSL_OP_BIT
(30)

	)

432 
	#SSL_OP_CRYPTOPRO_TLSEXT_BUG
 
	`SSL_OP_BIT
(31)

	)

437 
	#SSL_OP_NO_SSL_MASK
 \

438 –
SSL_OP_NO_SSLv3
 | 
SSL_OP_NO_TLSv1
 | 
SSL_OP_NO_TLSv1_1
 \

439 | 
SSL_OP_NO_TLSv1_2
 | 
SSL_OP_NO_TLSv1_3
 )

	)

440 
	#SSL_OP_NO_DTLS_MASK
 \

441 –
SSL_OP_NO_DTLSv1
 | 
SSL_OP_NO_DTLSv1_2
 )

	)

444 
	#SSL_OP_ALL
 \

445 –
SSL_OP_CRYPTOPRO_TLSEXT_BUG
 | 
SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS
 \

446 | 
SSL_OP_TLSEXT_PADDING
 | 
SSL_OP_SAFARI_ECDHE_ECDSA_BUG
 )

	)

452 
	#SSL_OP_MICROSOFT_SESS_ID_BUG
 0x0

	)

453 
	#SSL_OP_NETSCAPE_CHALLENGE_BUG
 0x0

	)

454 
	#SSL_OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG
 0x0

	)

455 
	#SSL_OP_SSLREF2_REUSE_CERT_TYPE_BUG
 0x0

	)

456 
	#SSL_OP_MICROSOFT_BIG_SSLV3_BUFFER
 0x0

	)

457 
	#SSL_OP_MSIE_SSLV2_RSA_PADDING
 0x0

	)

458 
	#SSL_OP_SSLEAY_080_CLIENT_DH_BUG
 0x0

	)

459 
	#SSL_OP_TLS_D5_BUG
 0x0

	)

460 
	#SSL_OP_TLS_BLOCK_PADDING_BUG
 0x0

	)

461 
	#SSL_OP_SINGLE_ECDH_USE
 0x0

	)

462 
	#SSL_OP_SINGLE_DH_USE
 0x0

	)

463 
	#SSL_OP_EPHEMERAL_RSA
 0x0

	)

464 
	#SSL_OP_NO_SSLv2
 0x0

	)

465 
	#SSL_OP_PKCS1_CHECK_1
 0x0

	)

466 
	#SSL_OP_PKCS1_CHECK_2
 0x0

	)

467 
	#SSL_OP_NETSCAPE_CA_DN_BUG
 0x0

	)

468 
	#SSL_OP_NETSCAPE_DEMO_CIPHER_CHANGE_BUG
 0x0

	)

474 
	#SSL_MODE_ENABLE_PARTIAL_WRITE
 0x00000001U

	)

481 
	#SSL_MODE_ACCEPT_MOVING_WRITE_BUFFER
 0x00000002U

	)

485 
	#SSL_MODE_AUTO_RETRY
 0x00000004U

	)

487 
	#SSL_MODE_NO_AUTO_CHAIN
 0x00000008U

	)

492 
	#SSL_MODE_RELEASE_BUFFERS
 0x00000010U

	)

498 
	#SSL_MODE_SEND_CLIENTHELLO_TIME
 0x00000020U

	)

499 
	#SSL_MODE_SEND_SERVERHELLO_TIME
 0x00000040U

	)

508 
	#SSL_MODE_SEND_FALLBACK_SCSV
 0x00000080U

	)

512 
	#SSL_MODE_ASYNC
 0x00000100U

	)

525 
	#SSL_MODE_DTLS_SCTP_LABEL_LENGTH_BUG
 0x00000400U

	)

532 
	#SSL_CERT_FLAG_TLS_STRICT
 0x00000001U

	)

535 
	#SSL_CERT_FLAG_SUITEB_128_LOS_ONLY
 0x10000

	)

537 
	#SSL_CERT_FLAG_SUITEB_192_LOS
 0x20000

	)

539 
	#SSL_CERT_FLAG_SUITEB_128_LOS
 0x30000

	)

542 
	#SSL_CERT_FLAG_BROKEN_PROTOCOL
 0x10000000

	)

546 
	#SSL_BUILD_CHAIN_FLAG_UNTRUSTED
 0x1

	)

548 
	#SSL_BUILD_CHAIN_FLAG_NO_ROOT
 0x2

	)

550 
	#SSL_BUILD_CHAIN_FLAG_CHECK
 0x4

	)

552 
	#SSL_BUILD_CHAIN_FLAG_IGNORE_ERROR
 0x8

	)

554 
	#SSL_BUILD_CHAIN_FLAG_CLEAR_ERROR
 0x10

	)

558 
	#CERT_PKEY_VALID
 0x1

	)

560 
	#CERT_PKEY_SIGN
 0x2

	)

562 
	#CERT_PKEY_EE_SIGNATURE
 0x10

	)

564 
	#CERT_PKEY_CA_SIGNATURE
 0x20

	)

566 
	#CERT_PKEY_EE_PARAM
 0x40

	)

568 
	#CERT_PKEY_CA_PARAM
 0x80

	)

570 
	#CERT_PKEY_EXPLICIT_SIGN
 0x100

	)

572 
	#CERT_PKEY_ISSUER_NAME
 0x200

	)

574 
	#CERT_PKEY_CERT_TYPE
 0x400

	)

576 
	#CERT_PKEY_SUITEB
 0x800

	)

578 
	#SSL_CONF_FLAG_CMDLINE
 0x1

	)

579 
	#SSL_CONF_FLAG_FILE
 0x2

	)

580 
	#SSL_CONF_FLAG_CLIENT
 0x4

	)

581 
	#SSL_CONF_FLAG_SERVER
 0x8

	)

582 
	#SSL_CONF_FLAG_SHOW_ERRORS
 0x10

	)

583 
	#SSL_CONF_FLAG_CERTIFICATE
 0x20

	)

584 
	#SSL_CONF_FLAG_REQUIRE_PRIVATE
 0x40

	)

586 
	#SSL_CONF_TYPE_UNKNOWN
 0x0

	)

587 
	#SSL_CONF_TYPE_STRING
 0x1

	)

588 
	#SSL_CONF_TYPE_FILE
 0x2

	)

589 
	#SSL_CONF_TYPE_DIR
 0x3

	)

590 
	#SSL_CONF_TYPE_NONE
 0x4

	)

591 
	#SSL_CONF_TYPE_STORE
 0x5

	)

594 
	#SSL_COOKIE_LENGTH
 4096

	)

601 
uöt64_t
 
SSL_CTX_gë_›ti⁄s
(c⁄° 
SSL_CTX
 *
˘x
);

602 
uöt64_t
 
SSL_gë_›ti⁄s
(c⁄° 
SSL
 *
s
);

603 
uöt64_t
 
SSL_CTX_˛ór_›ti⁄s
(
SSL_CTX
 *
˘x
, uöt64_à
›
);

604 
uöt64_t
 
SSL_˛ór_›ti⁄s
(
SSL
 *
s
, uöt64_à
›
);

605 
uöt64_t
 
SSL_CTX_£t_›ti⁄s
(
SSL_CTX
 *
˘x
, uöt64_à
›
);

606 
uöt64_t
 
SSL_£t_›ti⁄s
(
SSL
 *
s
, uöt64_à
›
);

608 
	#SSL_CTX_£t_mode
(
˘x
,
›
) \

609 
	`SSL_CTX_˘æ
((
˘x
),
SSL_CTRL_MODE
,(
›
),
NULL
)

	)

610 
	#SSL_CTX_˛ór_mode
(
˘x
,
›
) \

611 
	`SSL_CTX_˘æ
((
˘x
),
SSL_CTRL_CLEAR_MODE
,(
›
),
NULL
)

	)

612 
	#SSL_CTX_gë_mode
(
˘x
) \

613 
	`SSL_CTX_˘æ
((
˘x
),
SSL_CTRL_MODE
,0,
NULL
)

	)

614 
	#SSL_˛ór_mode
(
s¶
,
›
) \

615 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_CLEAR_MODE
,(
›
),
NULL
)

	)

616 
	#SSL_£t_mode
(
s¶
,
›
) \

617 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_MODE
,(
›
),
NULL
)

	)

618 
	#SSL_gë_mode
(
s¶
) \

619 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_MODE
,0,
NULL
)

	)

620 
	#SSL_£t_mtu
(
s¶
, 
mtu
) \

621 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_SET_MTU
,(
mtu
),
NULL
)

	)

622 
	#DTLS_£t_lök_mtu
(
s¶
, 
mtu
) \

623 
	`SSL_˘æ
((
s¶
),
DTLS_CTRL_SET_LINK_MTU
,(
mtu
),
NULL
)

	)

624 
	#DTLS_gë_lök_mö_mtu
(
s¶
) \

625 
	`SSL_˘æ
((
s¶
),
DTLS_CTRL_GET_LINK_MIN_MTU
,0,
NULL
)

	)

627 
	#SSL_gë_£cuª_ª√gŸüti⁄_suµ‹t
(
s¶
) \

628 
	`SSL_˘æ
((
s¶
), 
SSL_CTRL_GET_RI_SUPPORT
, 0, 
NULL
)

	)

630 
	#SSL_CTX_£t_˚π_Êags
(
˘x
,
›
) \

631 
	`SSL_CTX_˘æ
((
˘x
),
SSL_CTRL_CERT_FLAGS
,(
›
),
NULL
)

	)

632 
	#SSL_£t_˚π_Êags
(
s
,
›
) \

633 
	`SSL_˘æ
((
s
),
SSL_CTRL_CERT_FLAGS
,(
›
),
NULL
)

	)

634 
	#SSL_CTX_˛ór_˚π_Êags
(
˘x
,
›
) \

635 
	`SSL_CTX_˘æ
((
˘x
),
SSL_CTRL_CLEAR_CERT_FLAGS
,(
›
),
NULL
)

	)

636 
	#SSL_˛ór_˚π_Êags
(
s
,
›
) \

637 
	`SSL_˘æ
((
s
),
SSL_CTRL_CLEAR_CERT_FLAGS
,(
›
),
NULL
)

	)

639 
SSL_CTX_£t_msg_ˇŒback
(
SSL_CTX
 *
˘x
,

640 (*
cb
Ë(
wrôe_p
, 
vîsi⁄
,

641 
c⁄ã¡_ty≥
, c⁄° *
buf
,

642 
size_t
 
Àn
, 
SSL
 *
s¶
, *
¨g
));

643 
SSL_£t_msg_ˇŒback
(
SSL
 *
s¶
,

644 (*
cb
Ë(
wrôe_p
, 
vîsi⁄
,

645 
c⁄ã¡_ty≥
, c⁄° *
buf
,

646 
size_t
 
Àn
, 
SSL
 *
s¶
, *
¨g
));

647 
	#SSL_CTX_£t_msg_ˇŒback_¨g
(
˘x
, 
¨g
Ë
	`SSL_CTX_˘æ
((˘x), 
SSL_CTRL_SET_MSG_CALLBACK_ARG
, 0, (¨g))

	)

648 
	#SSL_£t_msg_ˇŒback_¨g
(
s¶
, 
¨g
Ë
	`SSL_˘æ
((s¶), 
SSL_CTRL_SET_MSG_CALLBACK_ARG
, 0, (¨g))

	)

650 
	#SSL_gë_extms_suµ‹t
(
s
) \

651 
	`SSL_˘æ
((
s
),
SSL_CTRL_GET_EXTMS_SUPPORT
,0,
NULL
)

	)

653 #i‚de‡
OPENSSL_NO_SRP


655 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


656 
OSSL_DEPRECATEDIN_3_0
 
__owur
 
SSL_SRP_CTX_öô
(
SSL
 *
s
);

657 
OSSL_DEPRECATEDIN_3_0
 
__owur
 
SSL_CTX_SRP_CTX_öô
(
SSL_CTX
 *
˘x
);

658 
OSSL_DEPRECATEDIN_3_0
 
SSL_SRP_CTX_‰ì
(
SSL
 *
˘x
);

659 
OSSL_DEPRECATEDIN_3_0
 
SSL_CTX_SRP_CTX_‰ì
(
SSL_CTX
 *
˘x
);

660 
OSSL_DEPRECATEDIN_3_0
 
__owur
 
SSL_§p_£rvî_∑øm_wôh_u£∫ame
(
SSL
 *
s
,

661 *
ad
);

662 
OSSL_DEPRECATEDIN_3_0
 
__owur
 
SRP_CÆc_A_∑øm
(
SSL
 *
s
);

667 
	#SSL_MAX_CERT_LIST_DEFAULT
 (1024*100)

	)

669 
	#SSL_SESSION_CACHE_MAX_SIZE_DEFAULT
 (1024*20)

	)

683 (*
GEN_SESSION_CB
Ë(
	tSSL
 *
	ts¶
, *
	tid
,

684 *
	tid_Àn
);

686 
	#SSL_SESS_CACHE_OFF
 0x0000

	)

687 
	#SSL_SESS_CACHE_CLIENT
 0x0001

	)

688 
	#SSL_SESS_CACHE_SERVER
 0x0002

	)

689 
	#SSL_SESS_CACHE_BOTH
 (
SSL_SESS_CACHE_CLIENT
|
SSL_SESS_CACHE_SERVER
)

	)

690 
	#SSL_SESS_CACHE_NO_AUTO_CLEAR
 0x0080

	)

692 
	#SSL_SESS_CACHE_NO_INTERNAL_LOOKUP
 0x0100

	)

693 
	#SSL_SESS_CACHE_NO_INTERNAL_STORE
 0x0200

	)

694 
	#SSL_SESS_CACHE_NO_INTERNAL
 \

695 (
SSL_SESS_CACHE_NO_INTERNAL_LOOKUP
|
SSL_SESS_CACHE_NO_INTERNAL_STORE
)

	)

696 
	#SSL_SESS_CACHE_UPDATE_TIME
 0x0400

	)

698 
LHASH_OF
(
SSL_SESSION
Ë*
SSL_CTX_£ssi⁄s
(
SSL_CTX
 *
˘x
);

699 
	#SSL_CTX_£ss_numbî
(
˘x
) \

700 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_NUMBER
,0,
NULL
)

	)

701 
	#SSL_CTX_£ss_c⁄√˘
(
˘x
) \

702 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_CONNECT
,0,
NULL
)

	)

703 
	#SSL_CTX_£ss_c⁄√˘_good
(
˘x
) \

704 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_CONNECT_GOOD
,0,
NULL
)

	)

705 
	#SSL_CTX_£ss_c⁄√˘_ª√gŸüã
(
˘x
) \

706 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_CONNECT_RENEGOTIATE
,0,
NULL
)

	)

707 
	#SSL_CTX_£ss_ac˚±
(
˘x
) \

708 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_ACCEPT
,0,
NULL
)

	)

709 
	#SSL_CTX_£ss_ac˚±_ª√gŸüã
(
˘x
) \

710 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_ACCEPT_RENEGOTIATE
,0,
NULL
)

	)

711 
	#SSL_CTX_£ss_ac˚±_good
(
˘x
) \

712 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_ACCEPT_GOOD
,0,
NULL
)

	)

713 
	#SSL_CTX_£ss_hôs
(
˘x
) \

714 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_HIT
,0,
NULL
)

	)

715 
	#SSL_CTX_£ss_cb_hôs
(
˘x
) \

716 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_CB_HIT
,0,
NULL
)

	)

717 
	#SSL_CTX_£ss_mis£s
(
˘x
) \

718 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_MISSES
,0,
NULL
)

	)

719 
	#SSL_CTX_£ss_timeouts
(
˘x
) \

720 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_TIMEOUTS
,0,
NULL
)

	)

721 
	#SSL_CTX_£ss_ˇche_fuŒ
(
˘x
) \

722 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_CACHE_FULL
,0,
NULL
)

	)

724 
SSL_CTX_£ss_£t_√w_cb
(
SSL_CTX
 *
˘x
,

725 (*
√w_£ssi⁄_cb
Ë(
s¶_°
 *
s¶
,

726 
SSL_SESSION
 *
£ss
));

727 (*
SSL_CTX_£ss_gë_√w_cb
(
SSL_CTX
 *
˘x
)Ë(
s¶_°
 *
s¶
,

728 
SSL_SESSION
 *
£ss
);

729 
SSL_CTX_£ss_£t_ªmove_cb
(
SSL_CTX
 *
˘x
,

730 (*
ªmove_£ssi⁄_cb
Ë(
s¶_˘x_°


731 *
˘x
,

732 
SSL_SESSION
 *
£ss
));

733 (*
SSL_CTX_£ss_gë_ªmove_cb
(
SSL_CTX
 *
˘x
)Ë(
s¶_˘x_°
 *ctx,

734 
SSL_SESSION
 *
£ss
);

735 
SSL_CTX_£ss_£t_gë_cb
(
SSL_CTX
 *
˘x
,

736 
SSL_SESSION
 *(*
gë_£ssi⁄_cb
Ë(
s¶_°


737 *
s¶
,

739 *
d©a
, 
Àn
,

740 *
c›y
));

741 
SSL_SESSION
 *(*
SSL_CTX_£ss_gë_gë_cb
(
SSL_CTX
 *
˘x
)Ë(
s¶_°
 *
s¶
,

742 c⁄° *
d©a
,

743 
Àn
, *
c›y
);

744 
SSL_CTX_£t_öfo_ˇŒback
(
SSL_CTX
 *
˘x
,

745 (*
cb
Ë(c⁄° 
SSL
 *
s¶
, 
ty≥
, 
vÆ
));

746 (*
SSL_CTX_gë_öfo_ˇŒback
(
SSL_CTX
 *
˘x
)Ë(c⁄° 
SSL
 *
s¶
, 
ty≥
,

747 
vÆ
);

748 
SSL_CTX_£t_˛õ¡_˚π_cb
(
SSL_CTX
 *
˘x
,

749 (*
˛õ¡_˚π_cb
Ë(
SSL
 *
s¶
, 
X509
 **
x509
,

750 
EVP_PKEY
 **
pkey
));

751 (*
SSL_CTX_gë_˛õ¡_˚π_cb
(
SSL_CTX
 *
˘x
)Ë(
SSL
 *
s¶
, 
X509
 **
x509
,

752 
EVP_PKEY
 **
pkey
);

753 #i‚de‡
OPENSSL_NO_ENGINE


754 
__owur
 
SSL_CTX_£t_˛õ¡_˚π_ígöe
(
SSL_CTX
 *
˘x
, 
ENGINE
 *
e
);

756 
SSL_CTX_£t_cookõ_gíî©e_cb
(
SSL_CTX
 *
˘x
,

757 (*
≠p_gí_cookõ_cb
Ë(
SSL
 *
s¶
,

759 *
cookõ
,

761 *
cookõ_Àn
));

762 
SSL_CTX_£t_cookõ_vîify_cb
(
SSL_CTX
 *
˘x
,

763 (*
≠p_vîify_cookõ_cb
Ë(
SSL
 *
s¶
,

765 *
cookõ
,

767 
cookõ_Àn
));

769 
SSL_CTX_£t_°©ñess_cookõ_gíî©e_cb
(

770 
SSL_CTX
 *
˘x
,

771 (*
gí_°©ñess_cookõ_cb
Ë(
SSL
 *
s¶
,

772 *
cookõ
,

773 
size_t
 *
cookõ_Àn
));

774 
SSL_CTX_£t_°©ñess_cookõ_vîify_cb
(

775 
SSL_CTX
 *
˘x
,

776 (*
vîify_°©ñess_cookõ_cb
Ë(
SSL
 *
s¶
,

777 c⁄° *
cookõ
,

778 
size_t
 
cookõ_Àn
));

779 #i‚de‡
OPENSSL_NO_NEXTPROTONEG


781 (*
SSL_CTX_≈n_advîti£d_cb_func
)(
	tSSL
 *
	ts¶
,

782 c⁄° **
	tout
,

783 *
	touéí
,

784 *
	t¨g
);

785 
SSL_CTX_£t_√xt_¥Ÿos_advîti£d_cb
(
SSL_CTX
 *
s
,

786 
SSL_CTX_≈n_advîti£d_cb_func
 
cb
,

787 *
¨g
);

788 
	#SSL_CTX_£t_≈n_advîti£d_cb
 
SSL_CTX_£t_√xt_¥Ÿos_advîti£d_cb


	)

790 (*
SSL_CTX_≈n_£À˘_cb_func
)(
	tSSL
 *
	ts
,

791 **
	tout
,

792 *
	touéí
,

793 c⁄° *
	tö
,

794 
	töÀn
,

795 *
	t¨g
);

796 
SSL_CTX_£t_√xt_¥Ÿo_£À˘_cb
(
SSL_CTX
 *
s
,

797 
SSL_CTX_≈n_£À˘_cb_func
 
cb
,

798 *
¨g
);

799 
	#SSL_CTX_£t_≈n_£À˘_cb
 
SSL_CTX_£t_√xt_¥Ÿo_£À˘_cb


	)

801 
SSL_gë0_√xt_¥Ÿo_√gŸüãd
(c⁄° 
SSL
 *
s
, c⁄° **
d©a
,

802 *
Àn
);

803 
	#SSL_gë0_≈n_√gŸüãd
 
SSL_gë0_√xt_¥Ÿo_√gŸüãd


	)

806 
__owur
 
SSL_£À˘_√xt_¥Ÿo
(**
out
, *
ouéí
,

807 c⁄° *
ö
, 
öÀn
,

808 c⁄° *
˛õ¡
,

809 
˛õ¡_Àn
);

811 
	#OPENSSL_NPN_UNSUPPORTED
 0

	)

812 
	#OPENSSL_NPN_NEGOTIATED
 1

	)

813 
	#OPENSSL_NPN_NO_OVERLAP
 2

	)

815 
__owur
 
SSL_CTX_£t_Æ≤_¥Ÿos
(
SSL_CTX
 *
˘x
, c⁄° *
¥Ÿos
,

816 
¥Ÿos_Àn
);

817 
__owur
 
SSL_£t_Æ≤_¥Ÿos
(
SSL
 *
s¶
, c⁄° *
¥Ÿos
,

818 
¥Ÿos_Àn
);

819 (*
SSL_CTX_Æ≤_£À˘_cb_func
)(
	tSSL
 *
	ts¶
,

820 c⁄° **
	tout
,

821 *
	touéí
,

822 c⁄° *
	tö
,

823 
	töÀn
,

824 *
	t¨g
);

825 
SSL_CTX_£t_Æ≤_£À˘_cb
(
SSL_CTX
 *
˘x
,

826 
SSL_CTX_Æ≤_£À˘_cb_func
 
cb
,

827 *
¨g
);

828 
SSL_gë0_Æ≤_£À˘ed
(c⁄° 
SSL
 *
s¶
, c⁄° **
d©a
,

829 *
Àn
);

831 #i‚de‡
OPENSSL_NO_PSK


836 
	#PSK_MAX_IDENTITY_LEN
 256

	)

837 
	#PSK_MAX_PSK_LEN
 512

	)

838 (*
	tSSL_psk_˛õ¡_cb_func
)(
	tSSL
 *
	ts¶
,

839 c⁄° *
	thöt
,

840 *
	tidítôy
,

841 
	tmax_idítôy_Àn
,

842 *
	tpsk
,

843 
	tmax_psk_Àn
);

844 
SSL_CTX_£t_psk_˛õ¡_ˇŒback
(
SSL_CTX
 *
˘x
, 
SSL_psk_˛õ¡_cb_func
 
cb
);

845 
SSL_£t_psk_˛õ¡_ˇŒback
(
SSL
 *
s¶
, 
SSL_psk_˛õ¡_cb_func
 
cb
);

847 (*
	tSSL_psk_£rvî_cb_func
)(
	tSSL
 *
	ts¶
,

848 c⁄° *
	tidítôy
,

849 *
	tpsk
,

850 
	tmax_psk_Àn
);

851 
SSL_CTX_£t_psk_£rvî_ˇŒback
(
SSL_CTX
 *
˘x
, 
SSL_psk_£rvî_cb_func
 
cb
);

852 
SSL_£t_psk_£rvî_ˇŒback
(
SSL
 *
s¶
, 
SSL_psk_£rvî_cb_func
 
cb
);

854 
__owur
 
SSL_CTX_u£_psk_idítôy_höt
(
SSL_CTX
 *
˘x
, c⁄° *
idítôy_höt
);

855 
__owur
 
SSL_u£_psk_idítôy_höt
(
SSL
 *
s
, c⁄° *
idítôy_höt
);

856 c⁄° *
SSL_gë_psk_idítôy_höt
(c⁄° 
SSL
 *
s
);

857 c⁄° *
SSL_gë_psk_idítôy
(c⁄° 
SSL
 *
s
);

860 (*
SSL_psk_föd_£ssi⁄_cb_func
)(
	tSSL
 *
	ts¶
,

861 c⁄° *
	tidítôy
,

862 
	tsize_t
 
	tidítôy_Àn
,

863 
	tSSL_SESSION
 **
	t£ss
);

864 (*
SSL_psk_u£_£ssi⁄_cb_func
)(
	tSSL
 *
	ts¶
, c⁄° 
	tEVP_MD
 *
	tmd
,

865 c⁄° **
	tid
,

866 
	tsize_t
 *
	tidÀn
,

867 
	tSSL_SESSION
 **
	t£ss
);

869 
SSL_£t_psk_föd_£ssi⁄_ˇŒback
(
SSL
 *
s
, 
SSL_psk_föd_£ssi⁄_cb_func
 
cb
);

870 
SSL_CTX_£t_psk_föd_£ssi⁄_ˇŒback
(
SSL_CTX
 *
˘x
,

871 
SSL_psk_föd_£ssi⁄_cb_func
 
cb
);

872 
SSL_£t_psk_u£_£ssi⁄_ˇŒback
(
SSL
 *
s
, 
SSL_psk_u£_£ssi⁄_cb_func
 
cb
);

873 
SSL_CTX_£t_psk_u£_£ssi⁄_ˇŒback
(
SSL_CTX
 *
˘x
,

874 
SSL_psk_u£_£ssi⁄_cb_func
 
cb
);

878 
__owur
 
SSL_CTX_has_˛õ¡_cu°om_ext
(c⁄° 
SSL_CTX
 *
˘x
,

879 
ext_ty≥
);

881 
__owur
 
SSL_CTX_add_˛õ¡_cu°om_ext
(
SSL_CTX
 *
˘x
,

882 
ext_ty≥
,

883 
cu°om_ext_add_cb
 
add_cb
,

884 
cu°om_ext_‰ì_cb
 
‰ì_cb
,

885 *
add_¨g
,

886 
cu°om_ext_∑r£_cb
 
∑r£_cb
,

887 *
∑r£_¨g
);

889 
__owur
 
SSL_CTX_add_£rvî_cu°om_ext
(
SSL_CTX
 *
˘x
,

890 
ext_ty≥
,

891 
cu°om_ext_add_cb
 
add_cb
,

892 
cu°om_ext_‰ì_cb
 
‰ì_cb
,

893 *
add_¨g
,

894 
cu°om_ext_∑r£_cb
 
∑r£_cb
,

895 *
∑r£_¨g
);

897 
__owur
 
SSL_CTX_add_cu°om_ext
(
SSL_CTX
 *
˘x
, 
ext_ty≥
,

898 
c⁄ãxt
,

899 
SSL_cu°om_ext_add_cb_ex
 
add_cb
,

900 
SSL_cu°om_ext_‰ì_cb_ex
 
‰ì_cb
,

901 *
add_¨g
,

902 
SSL_cu°om_ext_∑r£_cb_ex
 
∑r£_cb
,

903 *
∑r£_¨g
);

905 
__owur
 
SSL_exãnsi⁄_suµ‹ãd
(
ext_ty≥
);

907 
	#SSL_NOTHING
 1

	)

908 
	#SSL_WRITING
 2

	)

909 
	#SSL_READING
 3

	)

910 
	#SSL_X509_LOOKUP
 4

	)

911 
	#SSL_ASYNC_PAUSED
 5

	)

912 
	#SSL_ASYNC_NO_JOBS
 6

	)

913 
	#SSL_CLIENT_HELLO_CB
 7

	)

914 
	#SSL_RETRY_VERIFY
 8

	)

917 
	#SSL_w™t_nŸhög
(
s
Ë(
	`SSL_w™t
(sË=
SSL_NOTHING
)

	)

918 
	#SSL_w™t_ªad
(
s
Ë(
	`SSL_w™t
(sË=
SSL_READING
)

	)

919 
	#SSL_w™t_wrôe
(
s
Ë(
	`SSL_w™t
(sË=
SSL_WRITING
)

	)

920 
	#SSL_w™t_x509_lookup
(
s
Ë(
	`SSL_w™t
(sË=
SSL_X509_LOOKUP
)

	)

921 
	#SSL_w™t_ªåy_vîify
(
s
Ë(
	`SSL_w™t
(sË=
SSL_RETRY_VERIFY
)

	)

922 
	#SSL_w™t_async
(
s
Ë(
	`SSL_w™t
(sË=
SSL_ASYNC_PAUSED
)

	)

923 
	#SSL_w™t_async_job
(
s
Ë(
	`SSL_w™t
(sË=
SSL_ASYNC_NO_JOBS
)

	)

924 
	#SSL_w™t_˛õ¡_hñlo_cb
(
s
Ë(
	`SSL_w™t
(sË=
SSL_CLIENT_HELLO_CB
)

	)

926 
	#SSL_MAC_FLAG_READ_MAC_STREAM
 1

	)

927 
	#SSL_MAC_FLAG_WRITE_MAC_STREAM
 2

	)

928 
	#SSL_MAC_FLAG_READ_MAC_TLSTREE
 4

	)

929 
	#SSL_MAC_FLAG_WRITE_MAC_TLSTREE
 8

	)

935 (*
SSL_CTX_keylog_cb_func
)(c⁄° 
	tSSL
 *
	ts¶
, c⁄° *
	tlöe
);

942 
SSL_CTX_£t_keylog_ˇŒback
(
SSL_CTX
 *
˘x
, 
SSL_CTX_keylog_cb_func
 
cb
);

948 
SSL_CTX_keylog_cb_func
 
SSL_CTX_gë_keylog_ˇŒback
(c⁄° 
SSL_CTX
 *
˘x
);

950 
SSL_CTX_£t_max_óæy_d©a
(
SSL_CTX
 *
˘x
, 
uöt32_t
 
max_óæy_d©a
);

951 
uöt32_t
 
SSL_CTX_gë_max_óæy_d©a
(c⁄° 
SSL_CTX
 *
˘x
);

952 
SSL_£t_max_óæy_d©a
(
SSL
 *
s
, 
uöt32_t
 
max_óæy_d©a
);

953 
uöt32_t
 
SSL_gë_max_óæy_d©a
(c⁄° 
SSL
 *
s
);

954 
SSL_CTX_£t_ªcv_max_óæy_d©a
(
SSL_CTX
 *
˘x
, 
uöt32_t
 
ªcv_max_óæy_d©a
);

955 
uöt32_t
 
SSL_CTX_gë_ªcv_max_óæy_d©a
(c⁄° 
SSL_CTX
 *
˘x
);

956 
SSL_£t_ªcv_max_óæy_d©a
(
SSL
 *
s
, 
uöt32_t
 
ªcv_max_óæy_d©a
);

957 
uöt32_t
 
SSL_gë_ªcv_max_óæy_d©a
(c⁄° 
SSL
 *
s
);

959 #ifde‡
__˝lu•lus


963 
	~<›ís¶/s¶2.h
>

964 
	~<›ís¶/s¶3.h
>

965 
	~<›ís¶/és1.h
>

966 
	~<›ís¶/dés1.h
>

967 
	~<›ís¶/§ç.h
>

969 #ifde‡ 
__˝lu•lus


977 
SKM_DEFINE_STACK_OF_INTERNAL
(
SSL_CIPHER
, const SSL_CIPHER, SSL_CIPHER)

978 
	#sk_SSL_CIPHER_num
(
sk
Ë
	`OPENSSL_sk_num
(
	`os¶_check_c⁄°_SSL_CIPHER_sk_ty≥
(sk))

	)

979 
	#sk_SSL_CIPHER_vÆue
(
sk
, 
idx
Ë((c⁄° 
SSL_CIPHER
 *)
	`OPENSSL_sk_vÆue
(
	`os¶_check_c⁄°_SSL_CIPHER_sk_ty≥
(sk), (idx)))

	)

980 
	#sk_SSL_CIPHER_√w
(
cmp
Ë((
	`STACK_OF
(
SSL_CIPHER
Ë*)
	`OPENSSL_sk_√w
(
	`os¶_check_SSL_CIPHER_compfunc_ty≥
(cmp)))

	)

981 
	#sk_SSL_CIPHER_√w_nuŒ
(Ë((
	`STACK_OF
(
SSL_CIPHER
Ë*)
	`OPENSSL_sk_√w_nuŒ
())

	)

982 
	#sk_SSL_CIPHER_√w_ª£rve
(
cmp
, 
n
Ë((
	`STACK_OF
(
SSL_CIPHER
Ë*)
	`OPENSSL_sk_√w_ª£rve
(
	`os¶_check_SSL_CIPHER_compfunc_ty≥
(cmp), (n)))

	)

983 
	#sk_SSL_CIPHER_ª£rve
(
sk
, 
n
Ë
	`OPENSSL_sk_ª£rve
(
	`os¶_check_SSL_CIPHER_sk_ty≥
(sk), (n))

	)

984 
	#sk_SSL_CIPHER_‰ì
(
sk
Ë
	`OPENSSL_sk_‰ì
(
	`os¶_check_SSL_CIPHER_sk_ty≥
(sk))

	)

985 
	#sk_SSL_CIPHER_zîo
(
sk
Ë
	`OPENSSL_sk_zîo
(
	`os¶_check_SSL_CIPHER_sk_ty≥
(sk))

	)

986 
	#sk_SSL_CIPHER_dñëe
(
sk
, 
i
Ë((c⁄° 
SSL_CIPHER
 *)
	`OPENSSL_sk_dñëe
(
	`os¶_check_SSL_CIPHER_sk_ty≥
(sk), (i)))

	)

987 
	#sk_SSL_CIPHER_dñëe_±r
(
sk
, 
±r
Ë((c⁄° 
SSL_CIPHER
 *)
	`OPENSSL_sk_dñëe_±r
(
	`os¶_check_SSL_CIPHER_sk_ty≥
(sk), 
	`os¶_check_SSL_CIPHER_ty≥
’å)))

	)

988 
	#sk_SSL_CIPHER_push
(
sk
, 
±r
Ë
	`OPENSSL_sk_push
(
	`os¶_check_SSL_CIPHER_sk_ty≥
(sk), 
	`os¶_check_SSL_CIPHER_ty≥
’å))

	)

989 
	#sk_SSL_CIPHER_unshi·
(
sk
, 
±r
Ë
	`OPENSSL_sk_unshi·
(
	`os¶_check_SSL_CIPHER_sk_ty≥
(sk), 
	`os¶_check_SSL_CIPHER_ty≥
’å))

	)

990 
	#sk_SSL_CIPHER_p›
(
sk
Ë((c⁄° 
SSL_CIPHER
 *)
	`OPENSSL_sk_p›
(
	`os¶_check_SSL_CIPHER_sk_ty≥
(sk)))

	)

991 
	#sk_SSL_CIPHER_shi·
(
sk
Ë((c⁄° 
SSL_CIPHER
 *)
	`OPENSSL_sk_shi·
(
	`os¶_check_SSL_CIPHER_sk_ty≥
(sk)))

	)

992 
	#sk_SSL_CIPHER_p›_‰ì
(
sk
, 
‰ìfunc
Ë
	`OPENSSL_sk_p›_‰ì
(
	`os¶_check_SSL_CIPHER_sk_ty≥
(sk),
	`os¶_check_SSL_CIPHER_‰ìfunc_ty≥
(‰ìfunc))

	)

993 
	#sk_SSL_CIPHER_ö£π
(
sk
, 
±r
, 
idx
Ë
	`OPENSSL_sk_ö£π
(
	`os¶_check_SSL_CIPHER_sk_ty≥
(sk), 
	`os¶_check_SSL_CIPHER_ty≥
’å), (idx))

	)

994 
	#sk_SSL_CIPHER_£t
(
sk
, 
idx
, 
±r
Ë((c⁄° 
SSL_CIPHER
 *)
	`OPENSSL_sk_£t
(
	`os¶_check_SSL_CIPHER_sk_ty≥
(sk), (idx), 
	`os¶_check_SSL_CIPHER_ty≥
’å)))

	)

995 
	#sk_SSL_CIPHER_föd
(
sk
, 
±r
Ë
	`OPENSSL_sk_föd
(
	`os¶_check_SSL_CIPHER_sk_ty≥
(sk), 
	`os¶_check_SSL_CIPHER_ty≥
’å))

	)

996 
	#sk_SSL_CIPHER_föd_ex
(
sk
, 
±r
Ë
	`OPENSSL_sk_föd_ex
(
	`os¶_check_SSL_CIPHER_sk_ty≥
(sk), 
	`os¶_check_SSL_CIPHER_ty≥
’å))

	)

997 
	#sk_SSL_CIPHER_föd_Æl
(
sk
, 
±r
, 
≤um
Ë
	`OPENSSL_sk_föd_Æl
(
	`os¶_check_SSL_CIPHER_sk_ty≥
(sk), 
	`os¶_check_SSL_CIPHER_ty≥
’å),Önum)

	)

998 
	#sk_SSL_CIPHER_s‹t
(
sk
Ë
	`OPENSSL_sk_s‹t
(
	`os¶_check_SSL_CIPHER_sk_ty≥
(sk))

	)

999 
	#sk_SSL_CIPHER_is_s‹ãd
(
sk
Ë
	`OPENSSL_sk_is_s‹ãd
(
	`os¶_check_c⁄°_SSL_CIPHER_sk_ty≥
(sk))

	)

1000 
	#sk_SSL_CIPHER_dup
(
sk
Ë((
	`STACK_OF
(
SSL_CIPHER
Ë*)
	`OPENSSL_sk_dup
(
	`os¶_check_c⁄°_SSL_CIPHER_sk_ty≥
(sk)))

	)

1001 
	#sk_SSL_CIPHER_dìp_c›y
(
sk
, 
c›yfunc
, 
‰ìfunc
Ë((
	`STACK_OF
(
SSL_CIPHER
Ë*)
	`OPENSSL_sk_dìp_c›y
(
	`os¶_check_c⁄°_SSL_CIPHER_sk_ty≥
(sk), 
	`os¶_check_SSL_CIPHER_c›yfunc_ty≥
(c›yfunc), 
	`os¶_check_SSL_CIPHER_‰ìfunc_ty≥
(‰ìfunc)))

	)

1002 
	#sk_SSL_CIPHER_£t_cmp_func
(
sk
, 
cmp
Ë((
sk_SSL_CIPHER_compfunc
)
	`OPENSSL_sk_£t_cmp_func
(
	`os¶_check_SSL_CIPHER_sk_ty≥
(sk), 
	`os¶_check_SSL_CIPHER_compfunc_ty≥
(cmp)))

	)

1003 
SKM_DEFINE_STACK_OF_INTERNAL
(
SSL_COMP
, SSL_COMP, SSL_COMP)

1004 
	#sk_SSL_COMP_num
(
sk
Ë
	`OPENSSL_sk_num
(
	`os¶_check_c⁄°_SSL_COMP_sk_ty≥
(sk))

	)

1005 
	#sk_SSL_COMP_vÆue
(
sk
, 
idx
Ë((
SSL_COMP
 *)
	`OPENSSL_sk_vÆue
(
	`os¶_check_c⁄°_SSL_COMP_sk_ty≥
(sk), (idx)))

	)

1006 
	#sk_SSL_COMP_√w
(
cmp
Ë((
	`STACK_OF
(
SSL_COMP
Ë*)
	`OPENSSL_sk_√w
(
	`os¶_check_SSL_COMP_compfunc_ty≥
(cmp)))

	)

1007 
	#sk_SSL_COMP_√w_nuŒ
(Ë((
	`STACK_OF
(
SSL_COMP
Ë*)
	`OPENSSL_sk_√w_nuŒ
())

	)

1008 
	#sk_SSL_COMP_√w_ª£rve
(
cmp
, 
n
Ë((
	`STACK_OF
(
SSL_COMP
Ë*)
	`OPENSSL_sk_√w_ª£rve
(
	`os¶_check_SSL_COMP_compfunc_ty≥
(cmp), (n)))

	)

1009 
	#sk_SSL_COMP_ª£rve
(
sk
, 
n
Ë
	`OPENSSL_sk_ª£rve
(
	`os¶_check_SSL_COMP_sk_ty≥
(sk), (n))

	)

1010 
	#sk_SSL_COMP_‰ì
(
sk
Ë
	`OPENSSL_sk_‰ì
(
	`os¶_check_SSL_COMP_sk_ty≥
(sk))

	)

1011 
	#sk_SSL_COMP_zîo
(
sk
Ë
	`OPENSSL_sk_zîo
(
	`os¶_check_SSL_COMP_sk_ty≥
(sk))

	)

1012 
	#sk_SSL_COMP_dñëe
(
sk
, 
i
Ë((
SSL_COMP
 *)
	`OPENSSL_sk_dñëe
(
	`os¶_check_SSL_COMP_sk_ty≥
(sk), (i)))

	)

1013 
	#sk_SSL_COMP_dñëe_±r
(
sk
, 
±r
Ë((
SSL_COMP
 *)
	`OPENSSL_sk_dñëe_±r
(
	`os¶_check_SSL_COMP_sk_ty≥
(sk), 
	`os¶_check_SSL_COMP_ty≥
’å)))

	)

1014 
	#sk_SSL_COMP_push
(
sk
, 
±r
Ë
	`OPENSSL_sk_push
(
	`os¶_check_SSL_COMP_sk_ty≥
(sk), 
	`os¶_check_SSL_COMP_ty≥
’å))

	)

1015 
	#sk_SSL_COMP_unshi·
(
sk
, 
±r
Ë
	`OPENSSL_sk_unshi·
(
	`os¶_check_SSL_COMP_sk_ty≥
(sk), 
	`os¶_check_SSL_COMP_ty≥
’å))

	)

1016 
	#sk_SSL_COMP_p›
(
sk
Ë((
SSL_COMP
 *)
	`OPENSSL_sk_p›
(
	`os¶_check_SSL_COMP_sk_ty≥
(sk)))

	)

1017 
	#sk_SSL_COMP_shi·
(
sk
Ë((
SSL_COMP
 *)
	`OPENSSL_sk_shi·
(
	`os¶_check_SSL_COMP_sk_ty≥
(sk)))

	)

1018 
	#sk_SSL_COMP_p›_‰ì
(
sk
, 
‰ìfunc
Ë
	`OPENSSL_sk_p›_‰ì
(
	`os¶_check_SSL_COMP_sk_ty≥
(sk),
	`os¶_check_SSL_COMP_‰ìfunc_ty≥
(‰ìfunc))

	)

1019 
	#sk_SSL_COMP_ö£π
(
sk
, 
±r
, 
idx
Ë
	`OPENSSL_sk_ö£π
(
	`os¶_check_SSL_COMP_sk_ty≥
(sk), 
	`os¶_check_SSL_COMP_ty≥
’å), (idx))

	)

1020 
	#sk_SSL_COMP_£t
(
sk
, 
idx
, 
±r
Ë((
SSL_COMP
 *)
	`OPENSSL_sk_£t
(
	`os¶_check_SSL_COMP_sk_ty≥
(sk), (idx), 
	`os¶_check_SSL_COMP_ty≥
’å)))

	)

1021 
	#sk_SSL_COMP_föd
(
sk
, 
±r
Ë
	`OPENSSL_sk_föd
(
	`os¶_check_SSL_COMP_sk_ty≥
(sk), 
	`os¶_check_SSL_COMP_ty≥
’å))

	)

1022 
	#sk_SSL_COMP_föd_ex
(
sk
, 
±r
Ë
	`OPENSSL_sk_föd_ex
(
	`os¶_check_SSL_COMP_sk_ty≥
(sk), 
	`os¶_check_SSL_COMP_ty≥
’å))

	)

1023 
	#sk_SSL_COMP_föd_Æl
(
sk
, 
±r
, 
≤um
Ë
	`OPENSSL_sk_föd_Æl
(
	`os¶_check_SSL_COMP_sk_ty≥
(sk), 
	`os¶_check_SSL_COMP_ty≥
’å),Önum)

	)

1024 
	#sk_SSL_COMP_s‹t
(
sk
Ë
	`OPENSSL_sk_s‹t
(
	`os¶_check_SSL_COMP_sk_ty≥
(sk))

	)

1025 
	#sk_SSL_COMP_is_s‹ãd
(
sk
Ë
	`OPENSSL_sk_is_s‹ãd
(
	`os¶_check_c⁄°_SSL_COMP_sk_ty≥
(sk))

	)

1026 
	#sk_SSL_COMP_dup
(
sk
Ë((
	`STACK_OF
(
SSL_COMP
Ë*)
	`OPENSSL_sk_dup
(
	`os¶_check_c⁄°_SSL_COMP_sk_ty≥
(sk)))

	)

1027 
	#sk_SSL_COMP_dìp_c›y
(
sk
, 
c›yfunc
, 
‰ìfunc
Ë((
	`STACK_OF
(
SSL_COMP
Ë*)
	`OPENSSL_sk_dìp_c›y
(
	`os¶_check_c⁄°_SSL_COMP_sk_ty≥
(sk), 
	`os¶_check_SSL_COMP_c›yfunc_ty≥
(c›yfunc), 
	`os¶_check_SSL_COMP_‰ìfunc_ty≥
(‰ìfunc)))

	)

1028 
	#sk_SSL_COMP_£t_cmp_func
(
sk
, 
cmp
Ë((
sk_SSL_COMP_compfunc
)
	`OPENSSL_sk_£t_cmp_func
(
	`os¶_check_SSL_COMP_sk_ty≥
(sk), 
	`os¶_check_SSL_COMP_compfunc_ty≥
(cmp)))

	)

1032 
	#SSL_£t_≠p_d©a
(
s
,
¨g
Ë(
	`SSL_£t_ex_d©a
(s,0,(*)◊rg)))

	)

1033 
	#SSL_gë_≠p_d©a
(
s
Ë(
	`SSL_gë_ex_d©a
(s,0))

	)

1034 
	#SSL_SESSION_£t_≠p_d©a
(
s
,
a
Ë(
	`SSL_SESSION_£t_ex_d©a
(s,0, \

1035 (*)(
a
)))

	)

1036 
	#SSL_SESSION_gë_≠p_d©a
(
s
Ë(
	`SSL_SESSION_gë_ex_d©a
(s,0))

	)

1037 
	#SSL_CTX_gë_≠p_d©a
(
˘x
Ë(
	`SSL_CTX_gë_ex_d©a
(˘x,0))

	)

1038 
	#SSL_CTX_£t_≠p_d©a
(
˘x
,
¨g
Ë(
	`SSL_CTX_£t_ex_d©a
(ctx,0, \

1039 (*)(
¨g
)))

	)

1040 #i‚de‡
OPENSSL_NO_DEPRECATED_1_1_0


1041 
OSSL_DEPRECATEDIN_1_1_0
 
SSL_£t_debug
(
SSL
 *
s
, 
debug
);

1046 
	#SSL_KEY_UPDATE_NONE
 -1

	)

1048 
	#SSL_KEY_UPDATE_NOT_REQUESTED
 0

	)

1049 
	#SSL_KEY_UPDATE_REQUESTED
 1

	)

1064 
TLS_ST_BEFORE
,

1065 
TLS_ST_OK
,

1066 
DTLS_ST_CR_HELLO_VERIFY_REQUEST
,

1067 
TLS_ST_CR_SRVR_HELLO
,

1068 
TLS_ST_CR_CERT
,

1069 
TLS_ST_CR_CERT_STATUS
,

1070 
TLS_ST_CR_KEY_EXCH
,

1071 
TLS_ST_CR_CERT_REQ
,

1072 
TLS_ST_CR_SRVR_DONE
,

1073 
TLS_ST_CR_SESSION_TICKET
,

1074 
TLS_ST_CR_CHANGE
,

1075 
TLS_ST_CR_FINISHED
,

1076 
TLS_ST_CW_CLNT_HELLO
,

1077 
TLS_ST_CW_CERT
,

1078 
TLS_ST_CW_KEY_EXCH
,

1079 
TLS_ST_CW_CERT_VRFY
,

1080 
TLS_ST_CW_CHANGE
,

1081 
TLS_ST_CW_NEXT_PROTO
,

1082 
TLS_ST_CW_FINISHED
,

1083 
TLS_ST_SW_HELLO_REQ
,

1084 
TLS_ST_SR_CLNT_HELLO
,

1085 
DTLS_ST_SW_HELLO_VERIFY_REQUEST
,

1086 
TLS_ST_SW_SRVR_HELLO
,

1087 
TLS_ST_SW_CERT
,

1088 
TLS_ST_SW_KEY_EXCH
,

1089 
TLS_ST_SW_CERT_REQ
,

1090 
TLS_ST_SW_SRVR_DONE
,

1091 
TLS_ST_SR_CERT
,

1092 
TLS_ST_SR_KEY_EXCH
,

1093 
TLS_ST_SR_CERT_VRFY
,

1094 
TLS_ST_SR_NEXT_PROTO
,

1095 
TLS_ST_SR_CHANGE
,

1096 
TLS_ST_SR_FINISHED
,

1097 
TLS_ST_SW_SESSION_TICKET
,

1098 
TLS_ST_SW_CERT_STATUS
,

1099 
TLS_ST_SW_CHANGE
,

1100 
TLS_ST_SW_FINISHED
,

1101 
TLS_ST_SW_ENCRYPTED_EXTENSIONS
,

1102 
TLS_ST_CR_ENCRYPTED_EXTENSIONS
,

1103 
TLS_ST_CR_CERT_VRFY
,

1104 
TLS_ST_SW_CERT_VRFY
,

1105 
TLS_ST_CR_HELLO_REQ
,

1106 
TLS_ST_SW_KEY_UPDATE
,

1107 
TLS_ST_CW_KEY_UPDATE
,

1108 
TLS_ST_SR_KEY_UPDATE
,

1109 
TLS_ST_CR_KEY_UPDATE
,

1110 
TLS_ST_EARLY_DATA
,

1111 
TLS_ST_PENDING_EARLY_DATA_END
,

1112 
TLS_ST_CW_END_OF_EARLY_DATA
,

1113 
TLS_ST_SR_END_OF_EARLY_DATA


1114 } 
	tOSSL_HANDSHAKE_STATE
;

1124 
	#SSL_ST_CONNECT
 0x1000

	)

1125 
	#SSL_ST_ACCEPT
 0x2000

	)

1127 
	#SSL_ST_MASK
 0x0FFF

	)

1129 
	#SSL_CB_LOOP
 0x01

	)

1130 
	#SSL_CB_EXIT
 0x02

	)

1131 
	#SSL_CB_READ
 0x04

	)

1132 
	#SSL_CB_WRITE
 0x08

	)

1133 
	#SSL_CB_ALERT
 0x4000

	)

1134 
	#SSL_CB_READ_ALERT
 (
SSL_CB_ALERT
|
SSL_CB_READ
)

	)

1135 
	#SSL_CB_WRITE_ALERT
 (
SSL_CB_ALERT
|
SSL_CB_WRITE
)

	)

1136 
	#SSL_CB_ACCEPT_LOOP
 (
SSL_ST_ACCEPT
|
SSL_CB_LOOP
)

	)

1137 
	#SSL_CB_ACCEPT_EXIT
 (
SSL_ST_ACCEPT
|
SSL_CB_EXIT
)

	)

1138 
	#SSL_CB_CONNECT_LOOP
 (
SSL_ST_CONNECT
|
SSL_CB_LOOP
)

	)

1139 
	#SSL_CB_CONNECT_EXIT
 (
SSL_ST_CONNECT
|
SSL_CB_EXIT
)

	)

1140 
	#SSL_CB_HANDSHAKE_START
 0x10

	)

1141 
	#SSL_CB_HANDSHAKE_DONE
 0x20

	)

1144 
	#SSL_ö_c⁄√˘_öô
(
a
Ë(
	`SSL_ö_öô
◊Ë&& !
	`SSL_is_£rvî
◊))

	)

1145 
	#SSL_ö_ac˚±_öô
(
a
Ë(
	`SSL_ö_öô
◊Ë&& 
	`SSL_is_£rvî
◊))

	)

1146 
SSL_ö_öô
(c⁄° 
SSL
 *
s
);

1147 
SSL_ö_bef‹e
(c⁄° 
SSL
 *
s
);

1148 
SSL_is_öô_föished
(c⁄° 
SSL
 *
s
);

1154 
	#SSL_ST_READ_HEADER
 0xF0

	)

1155 
	#SSL_ST_READ_BODY
 0xF1

	)

1156 
	#SSL_ST_READ_DONE
 0xF2

	)

1164 
size_t
 
SSL_gë_föished
(c⁄° 
SSL
 *
s
, *
buf
, size_à
cou¡
);

1165 
size_t
 
SSL_gë_≥î_föished
(c⁄° 
SSL
 *
s
, *
buf
, size_à
cou¡
);

1171 
	#SSL_VERIFY_NONE
 0x00

	)

1172 
	#SSL_VERIFY_PEER
 0x01

	)

1173 
	#SSL_VERIFY_FAIL_IF_NO_PEER_CERT
 0x02

	)

1174 
	#SSL_VERIFY_CLIENT_ONCE
 0x04

	)

1175 
	#SSL_VERIFY_POST_HANDSHAKE
 0x08

	)

1177 #i‚de‡
OPENSSL_NO_DEPRECATED_1_1_0


1178 
	#O≥nSSL_add_s¶_Æg‹ôhms
(Ë
	`SSL_libøry_öô
()

	)

1179 
	#SSLóy_add_s¶_Æg‹ôhms
(Ë
	`SSL_libøry_öô
()

	)

1183 
	#SSL_gë_cùhî
(
s
) \

1184 
	`SSL_CIPHER_gë_«me
(
	`SSL_gë_cuºít_cùhî
(
s
))

	)

1185 
	#SSL_gë_cùhî_bôs
(
s
,
≈
) \

1186 
	`SSL_CIPHER_gë_bôs
(
	`SSL_gë_cuºít_cùhî
(
s
),
≈
)

	)

1187 
	#SSL_gë_cùhî_vîsi⁄
(
s
) \

1188 
	`SSL_CIPHER_gë_vîsi⁄
(
	`SSL_gë_cuºít_cùhî
(
s
))

	)

1189 
	#SSL_gë_cùhî_«me
(
s
) \

1190 
	`SSL_CIPHER_gë_«me
(
	`SSL_gë_cuºít_cùhî
(
s
))

	)

1191 
	#SSL_gë_time
(
a
Ë
	`SSL_SESSION_gë_time
◊)

	)

1192 
	#SSL_£t_time
(
a
,
b
Ë
	`SSL_SESSION_£t_time
(◊),(b))

	)

1193 
	#SSL_gë_timeout
(
a
Ë
	`SSL_SESSION_gë_timeout
◊)

	)

1194 
	#SSL_£t_timeout
(
a
,
b
Ë
	`SSL_SESSION_£t_timeout
(◊),(b))

	)

1196 
	#d2i_SSL_SESSION_bio
(
bp
,
s_id
Ë
	`ASN1_d2i_bio_of
(
SSL_SESSION
,
SSL_SESSION_√w
,
d2i_SSL_SESSION
,bp,s_id)

	)

1197 
	#i2d_SSL_SESSION_bio
(
bp
,
s_id
Ë
	`ASN1_i2d_bio_of
(
SSL_SESSION
,
i2d_SSL_SESSION
,bp,s_id)

	)

1199 
DECLARE_PEM_rw
(
SSL_SESSION
, SSL_SESSION)

1200 
	#SSL_AD_REASON_OFFSET
 1000

	)

1203 
	#SSL_AD_CLOSE_NOTIFY
 
SSL3_AD_CLOSE_NOTIFY


	)

1205 
	#SSL_AD_UNEXPECTED_MESSAGE
 
SSL3_AD_UNEXPECTED_MESSAGE


	)

1207 
	#SSL_AD_BAD_RECORD_MAC
 
SSL3_AD_BAD_RECORD_MAC


	)

1208 
	#SSL_AD_DECRYPTION_FAILED
 
TLS1_AD_DECRYPTION_FAILED


	)

1209 
	#SSL_AD_RECORD_OVERFLOW
 
TLS1_AD_RECORD_OVERFLOW


	)

1211 
	#SSL_AD_DECOMPRESSION_FAILURE
 
SSL3_AD_DECOMPRESSION_FAILURE


	)

1213 
	#SSL_AD_HANDSHAKE_FAILURE
 
SSL3_AD_HANDSHAKE_FAILURE


	)

1215 
	#SSL_AD_NO_CERTIFICATE
 
SSL3_AD_NO_CERTIFICATE


	)

1216 
	#SSL_AD_BAD_CERTIFICATE
 
SSL3_AD_BAD_CERTIFICATE


	)

1217 
	#SSL_AD_UNSUPPORTED_CERTIFICATE
 
SSL3_AD_UNSUPPORTED_CERTIFICATE


	)

1218 
	#SSL_AD_CERTIFICATE_REVOKED
 
SSL3_AD_CERTIFICATE_REVOKED


	)

1219 
	#SSL_AD_CERTIFICATE_EXPIRED
 
SSL3_AD_CERTIFICATE_EXPIRED


	)

1220 
	#SSL_AD_CERTIFICATE_UNKNOWN
 
SSL3_AD_CERTIFICATE_UNKNOWN


	)

1222 
	#SSL_AD_ILLEGAL_PARAMETER
 
SSL3_AD_ILLEGAL_PARAMETER


	)

1224 
	#SSL_AD_UNKNOWN_CA
 
TLS1_AD_UNKNOWN_CA


	)

1226 
	#SSL_AD_ACCESS_DENIED
 
TLS1_AD_ACCESS_DENIED


	)

1228 
	#SSL_AD_DECODE_ERROR
 
TLS1_AD_DECODE_ERROR


	)

1229 
	#SSL_AD_DECRYPT_ERROR
 
TLS1_AD_DECRYPT_ERROR


	)

1231 
	#SSL_AD_EXPORT_RESTRICTION
 
TLS1_AD_EXPORT_RESTRICTION


	)

1233 
	#SSL_AD_PROTOCOL_VERSION
 
TLS1_AD_PROTOCOL_VERSION


	)

1235 
	#SSL_AD_INSUFFICIENT_SECURITY
 
TLS1_AD_INSUFFICIENT_SECURITY


	)

1237 
	#SSL_AD_INTERNAL_ERROR
 
TLS1_AD_INTERNAL_ERROR


	)

1238 
	#SSL_AD_USER_CANCELLED
 
TLS1_AD_USER_CANCELLED


	)

1239 
	#SSL_AD_NO_RENEGOTIATION
 
TLS1_AD_NO_RENEGOTIATION


	)

1240 
	#SSL_AD_MISSING_EXTENSION
 
TLS13_AD_MISSING_EXTENSION


	)

1241 
	#SSL_AD_CERTIFICATE_REQUIRED
 
TLS13_AD_CERTIFICATE_REQUIRED


	)

1242 
	#SSL_AD_UNSUPPORTED_EXTENSION
 
TLS1_AD_UNSUPPORTED_EXTENSION


	)

1243 
	#SSL_AD_CERTIFICATE_UNOBTAINABLE
 
TLS1_AD_CERTIFICATE_UNOBTAINABLE


	)

1244 
	#SSL_AD_UNRECOGNIZED_NAME
 
TLS1_AD_UNRECOGNIZED_NAME


	)

1245 
	#SSL_AD_BAD_CERTIFICATE_STATUS_RESPONSE
 
TLS1_AD_BAD_CERTIFICATE_STATUS_RESPONSE


	)

1246 
	#SSL_AD_BAD_CERTIFICATE_HASH_VALUE
 
TLS1_AD_BAD_CERTIFICATE_HASH_VALUE


	)

1248 
	#SSL_AD_UNKNOWN_PSK_IDENTITY
 
TLS1_AD_UNKNOWN_PSK_IDENTITY


	)

1250 
	#SSL_AD_INAPPROPRIATE_FALLBACK
 
TLS1_AD_INAPPROPRIATE_FALLBACK


	)

1251 
	#SSL_AD_NO_APPLICATION_PROTOCOL
 
TLS1_AD_NO_APPLICATION_PROTOCOL


	)

1252 
	#SSL_ERROR_NONE
 0

	)

1253 
	#SSL_ERROR_SSL
 1

	)

1254 
	#SSL_ERROR_WANT_READ
 2

	)

1255 
	#SSL_ERROR_WANT_WRITE
 3

	)

1256 
	#SSL_ERROR_WANT_X509_LOOKUP
 4

	)

1257 
	#SSL_ERROR_SYSCALL
 5

	)

1259 
	#SSL_ERROR_ZERO_RETURN
 6

	)

1260 
	#SSL_ERROR_WANT_CONNECT
 7

	)

1261 
	#SSL_ERROR_WANT_ACCEPT
 8

	)

1262 
	#SSL_ERROR_WANT_ASYNC
 9

	)

1263 
	#SSL_ERROR_WANT_ASYNC_JOB
 10

	)

1264 
	#SSL_ERROR_WANT_CLIENT_HELLO_CB
 11

	)

1265 
	#SSL_ERROR_WANT_RETRY_VERIFY
 12

	)

1267 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


1268 
	#SSL_CTRL_SET_TMP_DH
 3

	)

1269 
	#SSL_CTRL_SET_TMP_ECDH
 4

	)

1270 
	#SSL_CTRL_SET_TMP_DH_CB
 6

	)

1273 
	#SSL_CTRL_GET_CLIENT_CERT_REQUEST
 9

	)

1274 
	#SSL_CTRL_GET_NUM_RENEGOTIATIONS
 10

	)

1275 
	#SSL_CTRL_CLEAR_NUM_RENEGOTIATIONS
 11

	)

1276 
	#SSL_CTRL_GET_TOTAL_RENEGOTIATIONS
 12

	)

1277 
	#SSL_CTRL_GET_FLAGS
 13

	)

1278 
	#SSL_CTRL_EXTRA_CHAIN_CERT
 14

	)

1279 
	#SSL_CTRL_SET_MSG_CALLBACK
 15

	)

1280 
	#SSL_CTRL_SET_MSG_CALLBACK_ARG
 16

	)

1282 
	#SSL_CTRL_SET_MTU
 17

	)

1284 
	#SSL_CTRL_SESS_NUMBER
 20

	)

1285 
	#SSL_CTRL_SESS_CONNECT
 21

	)

1286 
	#SSL_CTRL_SESS_CONNECT_GOOD
 22

	)

1287 
	#SSL_CTRL_SESS_CONNECT_RENEGOTIATE
 23

	)

1288 
	#SSL_CTRL_SESS_ACCEPT
 24

	)

1289 
	#SSL_CTRL_SESS_ACCEPT_GOOD
 25

	)

1290 
	#SSL_CTRL_SESS_ACCEPT_RENEGOTIATE
 26

	)

1291 
	#SSL_CTRL_SESS_HIT
 27

	)

1292 
	#SSL_CTRL_SESS_CB_HIT
 28

	)

1293 
	#SSL_CTRL_SESS_MISSES
 29

	)

1294 
	#SSL_CTRL_SESS_TIMEOUTS
 30

	)

1295 
	#SSL_CTRL_SESS_CACHE_FULL
 31

	)

1296 
	#SSL_CTRL_MODE
 33

	)

1297 
	#SSL_CTRL_GET_READ_AHEAD
 40

	)

1298 
	#SSL_CTRL_SET_READ_AHEAD
 41

	)

1299 
	#SSL_CTRL_SET_SESS_CACHE_SIZE
 42

	)

1300 
	#SSL_CTRL_GET_SESS_CACHE_SIZE
 43

	)

1301 
	#SSL_CTRL_SET_SESS_CACHE_MODE
 44

	)

1302 
	#SSL_CTRL_GET_SESS_CACHE_MODE
 45

	)

1303 
	#SSL_CTRL_GET_MAX_CERT_LIST
 50

	)

1304 
	#SSL_CTRL_SET_MAX_CERT_LIST
 51

	)

1305 
	#SSL_CTRL_SET_MAX_SEND_FRAGMENT
 52

	)

1307 
	#SSL_CTRL_SET_TLSEXT_SERVERNAME_CB
 53

	)

1308 
	#SSL_CTRL_SET_TLSEXT_SERVERNAME_ARG
 54

	)

1309 
	#SSL_CTRL_SET_TLSEXT_HOSTNAME
 55

	)

1310 
	#SSL_CTRL_SET_TLSEXT_DEBUG_CB
 56

	)

1311 
	#SSL_CTRL_SET_TLSEXT_DEBUG_ARG
 57

	)

1312 
	#SSL_CTRL_GET_TLSEXT_TICKET_KEYS
 58

	)

1313 
	#SSL_CTRL_SET_TLSEXT_TICKET_KEYS
 59

	)

1317 
	#SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB
 63

	)

1318 
	#SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB_ARG
 64

	)

1319 
	#SSL_CTRL_SET_TLSEXT_STATUS_REQ_TYPE
 65

	)

1320 
	#SSL_CTRL_GET_TLSEXT_STATUS_REQ_EXTS
 66

	)

1321 
	#SSL_CTRL_SET_TLSEXT_STATUS_REQ_EXTS
 67

	)

1322 
	#SSL_CTRL_GET_TLSEXT_STATUS_REQ_IDS
 68

	)

1323 
	#SSL_CTRL_SET_TLSEXT_STATUS_REQ_IDS
 69

	)

1324 
	#SSL_CTRL_GET_TLSEXT_STATUS_REQ_OCSP_RESP
 70

	)

1325 
	#SSL_CTRL_SET_TLSEXT_STATUS_REQ_OCSP_RESP
 71

	)

1326 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


1327 
	#SSL_CTRL_SET_TLSEXT_TICKET_KEY_CB
 72

	)

1329 
	#SSL_CTRL_SET_TLS_EXT_SRP_USERNAME_CB
 75

	)

1330 
	#SSL_CTRL_SET_SRP_VERIFY_PARAM_CB
 76

	)

1331 
	#SSL_CTRL_SET_SRP_GIVE_CLIENT_PWD_CB
 77

	)

1332 
	#SSL_CTRL_SET_SRP_ARG
 78

	)

1333 
	#SSL_CTRL_SET_TLS_EXT_SRP_USERNAME
 79

	)

1334 
	#SSL_CTRL_SET_TLS_EXT_SRP_STRENGTH
 80

	)

1335 
	#SSL_CTRL_SET_TLS_EXT_SRP_PASSWORD
 81

	)

1336 
	#DTLS_CTRL_GET_TIMEOUT
 73

	)

1337 
	#DTLS_CTRL_HANDLE_TIMEOUT
 74

	)

1338 
	#SSL_CTRL_GET_RI_SUPPORT
 76

	)

1339 
	#SSL_CTRL_CLEAR_MODE
 78

	)

1340 
	#SSL_CTRL_SET_NOT_RESUMABLE_SESS_CB
 79

	)

1341 
	#SSL_CTRL_GET_EXTRA_CHAIN_CERTS
 82

	)

1342 
	#SSL_CTRL_CLEAR_EXTRA_CHAIN_CERTS
 83

	)

1343 
	#SSL_CTRL_CHAIN
 88

	)

1344 
	#SSL_CTRL_CHAIN_CERT
 89

	)

1345 
	#SSL_CTRL_GET_GROUPS
 90

	)

1346 
	#SSL_CTRL_SET_GROUPS
 91

	)

1347 
	#SSL_CTRL_SET_GROUPS_LIST
 92

	)

1348 
	#SSL_CTRL_GET_SHARED_GROUP
 93

	)

1349 
	#SSL_CTRL_SET_SIGALGS
 97

	)

1350 
	#SSL_CTRL_SET_SIGALGS_LIST
 98

	)

1351 
	#SSL_CTRL_CERT_FLAGS
 99

	)

1352 
	#SSL_CTRL_CLEAR_CERT_FLAGS
 100

	)

1353 
	#SSL_CTRL_SET_CLIENT_SIGALGS
 101

	)

1354 
	#SSL_CTRL_SET_CLIENT_SIGALGS_LIST
 102

	)

1355 
	#SSL_CTRL_GET_CLIENT_CERT_TYPES
 103

	)

1356 
	#SSL_CTRL_SET_CLIENT_CERT_TYPES
 104

	)

1357 
	#SSL_CTRL_BUILD_CERT_CHAIN
 105

	)

1358 
	#SSL_CTRL_SET_VERIFY_CERT_STORE
 106

	)

1359 
	#SSL_CTRL_SET_CHAIN_CERT_STORE
 107

	)

1360 
	#SSL_CTRL_GET_PEER_SIGNATURE_NID
 108

	)

1361 
	#SSL_CTRL_GET_PEER_TMP_KEY
 109

	)

1362 
	#SSL_CTRL_GET_RAW_CIPHERLIST
 110

	)

1363 
	#SSL_CTRL_GET_EC_POINT_FORMATS
 111

	)

1364 
	#SSL_CTRL_GET_CHAIN_CERTS
 115

	)

1365 
	#SSL_CTRL_SELECT_CURRENT_CERT
 116

	)

1366 
	#SSL_CTRL_SET_CURRENT_CERT
 117

	)

1367 
	#SSL_CTRL_SET_DH_AUTO
 118

	)

1368 
	#DTLS_CTRL_SET_LINK_MTU
 120

	)

1369 
	#DTLS_CTRL_GET_LINK_MIN_MTU
 121

	)

1370 
	#SSL_CTRL_GET_EXTMS_SUPPORT
 122

	)

1371 
	#SSL_CTRL_SET_MIN_PROTO_VERSION
 123

	)

1372 
	#SSL_CTRL_SET_MAX_PROTO_VERSION
 124

	)

1373 
	#SSL_CTRL_SET_SPLIT_SEND_FRAGMENT
 125

	)

1374 
	#SSL_CTRL_SET_MAX_PIPELINES
 126

	)

1375 
	#SSL_CTRL_GET_TLSEXT_STATUS_REQ_TYPE
 127

	)

1376 
	#SSL_CTRL_GET_TLSEXT_STATUS_REQ_CB
 128

	)

1377 
	#SSL_CTRL_GET_TLSEXT_STATUS_REQ_CB_ARG
 129

	)

1378 
	#SSL_CTRL_GET_MIN_PROTO_VERSION
 130

	)

1379 
	#SSL_CTRL_GET_MAX_PROTO_VERSION
 131

	)

1380 
	#SSL_CTRL_GET_SIGNATURE_NID
 132

	)

1381 
	#SSL_CTRL_GET_TMP_KEY
 133

	)

1382 
	#SSL_CTRL_GET_NEGOTIATED_GROUP
 134

	)

1383 
	#SSL_CTRL_SET_RETRY_VERIFY
 136

	)

1384 
	#SSL_CERT_SET_FIRST
 1

	)

1385 
	#SSL_CERT_SET_NEXT
 2

	)

1386 
	#SSL_CERT_SET_SERVER
 3

	)

1387 
	#DTLSv1_gë_timeout
(
s¶
, 
¨g
) \

1388 
	`SSL_˘æ
(
s¶
,
DTLS_CTRL_GET_TIMEOUT
,0, (*)(
¨g
))

	)

1389 
	#DTLSv1_h™dÀ_timeout
(
s¶
) \

1390 
	`SSL_˘æ
(
s¶
,
DTLS_CTRL_HANDLE_TIMEOUT
,0, 
NULL
)

	)

1391 
	#SSL_num_ª√gŸüti⁄s
(
s¶
) \

1392 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_GET_NUM_RENEGOTIATIONS
,0,
NULL
)

	)

1393 
	#SSL_˛ór_num_ª√gŸüti⁄s
(
s¶
) \

1394 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_CLEAR_NUM_RENEGOTIATIONS
,0,
NULL
)

	)

1395 
	#SSL_tŸÆ_ª√gŸüti⁄s
(
s¶
) \

1396 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_GET_TOTAL_RENEGOTIATIONS
,0,
NULL
)

	)

1397 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


1398 
	#SSL_CTX_£t_tmp_dh
(
˘x
,
dh
) \

1399 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_TMP_DH
,0,(*)(
dh
))

	)

1401 
	#SSL_CTX_£t_dh_auto
(
˘x
, 
⁄off
) \

1402 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_DH_AUTO
,
⁄off
,
NULL
)

	)

1403 
	#SSL_£t_dh_auto
(
s
, 
⁄off
) \

1404 
	`SSL_˘æ
(
s
,
SSL_CTRL_SET_DH_AUTO
,
⁄off
,
NULL
)

	)

1405 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


1406 
	#SSL_£t_tmp_dh
(
s¶
,
dh
) \

1407 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_TMP_DH
,0,(*)(
dh
))

	)

1409 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


1410 
	#SSL_CTX_£t_tmp_ecdh
(
˘x
,
ecdh
) \

1411 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_TMP_ECDH
,0,(*)(
ecdh
))

	)

1412 
	#SSL_£t_tmp_ecdh
(
s¶
,
ecdh
) \

1413 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_TMP_ECDH
,0,(*)(
ecdh
))

	)

1415 
	#SSL_CTX_add_exåa_chaö_˚π
(
˘x
,
x509
) \

1416 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_EXTRA_CHAIN_CERT
,0,(*)(
x509
))

	)

1417 
	#SSL_CTX_gë_exåa_chaö_˚πs
(
˘x
,
px509
) \

1418 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_GET_EXTRA_CHAIN_CERTS
,0,
px509
)

	)

1419 
	#SSL_CTX_gë_exåa_chaö_˚πs_⁄ly
(
˘x
,
px509
) \

1420 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_GET_EXTRA_CHAIN_CERTS
,1,
px509
)

	)

1421 
	#SSL_CTX_˛ór_exåa_chaö_˚πs
(
˘x
) \

1422 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_CLEAR_EXTRA_CHAIN_CERTS
,0,
NULL
)

	)

1423 
	#SSL_CTX_£t0_chaö
(
˘x
,
sk
) \

1424 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_CHAIN
,0,(*)(
sk
))

	)

1425 
	#SSL_CTX_£t1_chaö
(
˘x
,
sk
) \

1426 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_CHAIN
,1,(*)(
sk
))

	)

1427 
	#SSL_CTX_add0_chaö_˚π
(
˘x
,
x509
) \

1428 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_CHAIN_CERT
,0,(*)(
x509
))

	)

1429 
	#SSL_CTX_add1_chaö_˚π
(
˘x
,
x509
) \

1430 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_CHAIN_CERT
,1,(*)(
x509
))

	)

1431 
	#SSL_CTX_gë0_chaö_˚πs
(
˘x
,
px509
) \

1432 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_GET_CHAIN_CERTS
,0,
px509
)

	)

1433 
	#SSL_CTX_˛ór_chaö_˚πs
(
˘x
) \

1434 
	`SSL_CTX_£t0_chaö
(
˘x
,
NULL
)

	)

1435 
	#SSL_CTX_buûd_˚π_chaö
(
˘x
, 
Êags
) \

1436 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_BUILD_CERT_CHAIN
, 
Êags
, 
NULL
)

	)

1437 
	#SSL_CTX_£À˘_cuºít_˚π
(
˘x
,
x509
) \

1438 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SELECT_CURRENT_CERT
,0,(*)(
x509
))

	)

1439 
	#SSL_CTX_£t_cuºít_˚π
(
˘x
, 
›
) \

1440 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_CURRENT_CERT
, 
›
, 
NULL
)

	)

1441 
	#SSL_CTX_£t0_vîify_˚π_°‹e
(
˘x
,
°
) \

1442 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_VERIFY_CERT_STORE
,0,(*)(
°
))

	)

1443 
	#SSL_CTX_£t1_vîify_˚π_°‹e
(
˘x
,
°
) \

1444 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_VERIFY_CERT_STORE
,1,(*)(
°
))

	)

1445 
	#SSL_CTX_£t0_chaö_˚π_°‹e
(
˘x
,
°
) \

1446 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_CHAIN_CERT_STORE
,0,(*)(
°
))

	)

1447 
	#SSL_CTX_£t1_chaö_˚π_°‹e
(
˘x
,
°
) \

1448 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_CHAIN_CERT_STORE
,1,(*)(
°
))

	)

1449 
	#SSL_£t0_chaö
(
s
,
sk
) \

1450 
	`SSL_˘æ
(
s
,
SSL_CTRL_CHAIN
,0,(*)(
sk
))

	)

1451 
	#SSL_£t1_chaö
(
s
,
sk
) \

1452 
	`SSL_˘æ
(
s
,
SSL_CTRL_CHAIN
,1,(*)(
sk
))

	)

1453 
	#SSL_add0_chaö_˚π
(
s
,
x509
) \

1454 
	`SSL_˘æ
(
s
,
SSL_CTRL_CHAIN_CERT
,0,(*)(
x509
))

	)

1455 
	#SSL_add1_chaö_˚π
(
s
,
x509
) \

1456 
	`SSL_˘æ
(
s
,
SSL_CTRL_CHAIN_CERT
,1,(*)(
x509
))

	)

1457 
	#SSL_gë0_chaö_˚πs
(
s
,
px509
) \

1458 
	`SSL_˘æ
(
s
,
SSL_CTRL_GET_CHAIN_CERTS
,0,
px509
)

	)

1459 
	#SSL_˛ór_chaö_˚πs
(
s
) \

1460 
	`SSL_£t0_chaö
(
s
,
NULL
)

	)

1461 
	#SSL_buûd_˚π_chaö
(
s
, 
Êags
) \

1462 
	`SSL_˘æ
(
s
,
SSL_CTRL_BUILD_CERT_CHAIN
, 
Êags
, 
NULL
)

	)

1463 
	#SSL_£À˘_cuºít_˚π
(
s
,
x509
) \

1464 
	`SSL_˘æ
(
s
,
SSL_CTRL_SELECT_CURRENT_CERT
,0,(*)(
x509
))

	)

1465 
	#SSL_£t_cuºít_˚π
(
s
,
›
) \

1466 
	`SSL_˘æ
(
s
,
SSL_CTRL_SET_CURRENT_CERT
, 
›
, 
NULL
)

	)

1467 
	#SSL_£t0_vîify_˚π_°‹e
(
s
,
°
) \

1468 
	`SSL_˘æ
(
s
,
SSL_CTRL_SET_VERIFY_CERT_STORE
,0,(*)(
°
))

	)

1469 
	#SSL_£t1_vîify_˚π_°‹e
(
s
,
°
) \

1470 
	`SSL_˘æ
(
s
,
SSL_CTRL_SET_VERIFY_CERT_STORE
,1,(*)(
°
))

	)

1471 
	#SSL_£t0_chaö_˚π_°‹e
(
s
,
°
) \

1472 
	`SSL_˘æ
(
s
,
SSL_CTRL_SET_CHAIN_CERT_STORE
,0,(*)(
°
))

	)

1473 
	#SSL_£t1_chaö_˚π_°‹e
(
s
,
°
) \

1474 
	`SSL_˘æ
(
s
,
SSL_CTRL_SET_CHAIN_CERT_STORE
,1,(*)(
°
))

	)

1475 
	#SSL_gë1_groups
(
s
, 
gli°
) \

1476 
	`SSL_˘æ
(
s
,
SSL_CTRL_GET_GROUPS
,0,(*)(
gli°
))

	)

1477 
	#SSL_CTX_£t1_groups
(
˘x
, 
gli°
, 
gli°Àn
) \

1478 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_GROUPS
,
gli°Àn
,(*)(
gli°
))

	)

1479 
	#SSL_CTX_£t1_groups_li°
(
˘x
, 
s
) \

1480 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_GROUPS_LIST
,0,(*)(
s
))

	)

1481 
	#SSL_£t1_groups
(
s
, 
gli°
, 
gli°Àn
) \

1482 
	`SSL_˘æ
(
s
,
SSL_CTRL_SET_GROUPS
,
gli°Àn
,(*)(
gli°
))

	)

1483 
	#SSL_£t1_groups_li°
(
s
, 
°r
) \

1484 
	`SSL_˘æ
(
s
,
SSL_CTRL_SET_GROUPS_LIST
,0,(*)(
°r
))

	)

1485 
	#SSL_gë_sh¨ed_group
(
s
, 
n
) \

1486 
	`SSL_˘æ
(
s
,
SSL_CTRL_GET_SHARED_GROUP
,
n
,
NULL
)

	)

1487 
	#SSL_gë_√gŸüãd_group
(
s
) \

1488 
	`SSL_˘æ
(
s
,
SSL_CTRL_GET_NEGOTIATED_GROUP
,0,
NULL
)

	)

1489 
	#SSL_CTX_£t1_sigÆgs
(
˘x
, 
¶i°
, 
¶i°Àn
) \

1490 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_SIGALGS
,
¶i°Àn
,(*)(
¶i°
))

	)

1491 
	#SSL_CTX_£t1_sigÆgs_li°
(
˘x
, 
s
) \

1492 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_SIGALGS_LIST
,0,(*)(
s
))

	)

1493 
	#SSL_£t1_sigÆgs
(
s
, 
¶i°
, 
¶i°Àn
) \

1494 
	`SSL_˘æ
(
s
,
SSL_CTRL_SET_SIGALGS
,
¶i°Àn
,(*)(
¶i°
))

	)

1495 
	#SSL_£t1_sigÆgs_li°
(
s
, 
°r
) \

1496 
	`SSL_˘æ
(
s
,
SSL_CTRL_SET_SIGALGS_LIST
,0,(*)(
°r
))

	)

1497 
	#SSL_CTX_£t1_˛õ¡_sigÆgs
(
˘x
, 
¶i°
, 
¶i°Àn
) \

1498 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_CLIENT_SIGALGS
,
¶i°Àn
,(*)(
¶i°
))

	)

1499 
	#SSL_CTX_£t1_˛õ¡_sigÆgs_li°
(
˘x
, 
s
) \

1500 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_CLIENT_SIGALGS_LIST
,0,(*)(
s
))

	)

1501 
	#SSL_£t1_˛õ¡_sigÆgs
(
s
, 
¶i°
, 
¶i°Àn
) \

1502 
	`SSL_˘æ
(
s
,
SSL_CTRL_SET_CLIENT_SIGALGS
,
¶i°Àn
,(*)(
¶i°
))

	)

1503 
	#SSL_£t1_˛õ¡_sigÆgs_li°
(
s
, 
°r
) \

1504 
	`SSL_˘æ
(
s
,
SSL_CTRL_SET_CLIENT_SIGALGS_LIST
,0,(*)(
°r
))

	)

1505 
	#SSL_gë0_˚πifiˇã_ty≥s
(
s
, 
˛i°
) \

1506 
	`SSL_˘æ
(
s
, 
SSL_CTRL_GET_CLIENT_CERT_TYPES
, 0, (*)(
˛i°
))

	)

1507 
	#SSL_CTX_£t1_˛õ¡_˚πifiˇã_ty≥s
(
˘x
, 
˛i°
, 
˛i°Àn
) \

1508 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_CLIENT_CERT_TYPES
,
˛i°Àn
, \

1509 (*)(
˛i°
))

	)

1510 
	#SSL_£t1_˛õ¡_˚πifiˇã_ty≥s
(
s
, 
˛i°
, 
˛i°Àn
) \

1511 
	`SSL_˘æ
(
s
,
SSL_CTRL_SET_CLIENT_CERT_TYPES
,
˛i°Àn
,(*)(
˛i°
))

	)

1512 
	#SSL_gë_sig«tuª_nid
(
s
, 
≤
) \

1513 
	`SSL_˘æ
(
s
,
SSL_CTRL_GET_SIGNATURE_NID
,0,
≤
)

	)

1514 
	#SSL_gë_≥î_sig«tuª_nid
(
s
, 
≤
) \

1515 
	`SSL_˘æ
(
s
,
SSL_CTRL_GET_PEER_SIGNATURE_NID
,0,
≤
)

	)

1516 
	#SSL_gë_≥î_tmp_key
(
s
, 
pk
) \

1517 
	`SSL_˘æ
(
s
,
SSL_CTRL_GET_PEER_TMP_KEY
,0,
pk
)

	)

1518 
	#SSL_gë_tmp_key
(
s
, 
pk
) \

1519 
	`SSL_˘æ
(
s
,
SSL_CTRL_GET_TMP_KEY
,0,
pk
)

	)

1520 
	#SSL_gë0_øw_cùhîli°
(
s
, 
∂°
) \

1521 
	`SSL_˘æ
(
s
,
SSL_CTRL_GET_RAW_CIPHERLIST
,0,
∂°
)

	)

1522 
	#SSL_gë0_ec_poöt_f‹m©s
(
s
, 
∂°
) \

1523 
	`SSL_˘æ
(
s
,
SSL_CTRL_GET_EC_POINT_FORMATS
,0,
∂°
)

	)

1524 
	#SSL_CTX_£t_mö_¥Ÿo_vîsi⁄
(
˘x
, 
vîsi⁄
) \

1525 
	`SSL_CTX_˘æ
(
˘x
, 
SSL_CTRL_SET_MIN_PROTO_VERSION
, 
vîsi⁄
, 
NULL
)

	)

1526 
	#SSL_CTX_£t_max_¥Ÿo_vîsi⁄
(
˘x
, 
vîsi⁄
) \

1527 
	`SSL_CTX_˘æ
(
˘x
, 
SSL_CTRL_SET_MAX_PROTO_VERSION
, 
vîsi⁄
, 
NULL
)

	)

1528 
	#SSL_CTX_gë_mö_¥Ÿo_vîsi⁄
(
˘x
) \

1529 
	`SSL_CTX_˘æ
(
˘x
, 
SSL_CTRL_GET_MIN_PROTO_VERSION
, 0, 
NULL
)

	)

1530 
	#SSL_CTX_gë_max_¥Ÿo_vîsi⁄
(
˘x
) \

1531 
	`SSL_CTX_˘æ
(
˘x
, 
SSL_CTRL_GET_MAX_PROTO_VERSION
, 0, 
NULL
)

	)

1532 
	#SSL_£t_mö_¥Ÿo_vîsi⁄
(
s
, 
vîsi⁄
) \

1533 
	`SSL_˘æ
(
s
, 
SSL_CTRL_SET_MIN_PROTO_VERSION
, 
vîsi⁄
, 
NULL
)

	)

1534 
	#SSL_£t_max_¥Ÿo_vîsi⁄
(
s
, 
vîsi⁄
) \

1535 
	`SSL_˘æ
(
s
, 
SSL_CTRL_SET_MAX_PROTO_VERSION
, 
vîsi⁄
, 
NULL
)

	)

1536 
	#SSL_gë_mö_¥Ÿo_vîsi⁄
(
s
) \

1537 
	`SSL_˘æ
(
s
, 
SSL_CTRL_GET_MIN_PROTO_VERSION
, 0, 
NULL
)

	)

1538 
	#SSL_gë_max_¥Ÿo_vîsi⁄
(
s
) \

1539 
	`SSL_˘æ
(
s
, 
SSL_CTRL_GET_MAX_PROTO_VERSION
, 0, 
NULL
)

	)

1541 c⁄° *
SSL_group_to_«me
(
SSL
 *
s
, 
id
);

1544 
	#SSL_CTRL_GET_SERVER_TMP_KEY
 \

1545 
SSL_CTRL_GET_PEER_TMP_KEY


	)

1546 
	#SSL_gë_£rvî_tmp_key
(
s
, 
pk
) \

1547 
	`SSL_gë_≥î_tmp_key
(
s
, 
pk
)

	)

1549 
SSL_£t0_tmp_dh_pkey
(
SSL
 *
s
, 
EVP_PKEY
 *
dhpkey
);

1550 
SSL_CTX_£t0_tmp_dh_pkey
(
SSL_CTX
 *
˘x
, 
EVP_PKEY
 *
dhpkey
);

1556 
	#SSL_CTRL_GET_CURVES
 
SSL_CTRL_GET_GROUPS


	)

1557 
	#SSL_CTRL_SET_CURVES
 
SSL_CTRL_SET_GROUPS


	)

1558 
	#SSL_CTRL_SET_CURVES_LIST
 
SSL_CTRL_SET_GROUPS_LIST


	)

1559 
	#SSL_CTRL_GET_SHARED_CURVE
 
SSL_CTRL_GET_SHARED_GROUP


	)

1561 
	#SSL_gë1_curves
 
SSL_gë1_groups


	)

1562 
	#SSL_CTX_£t1_curves
 
SSL_CTX_£t1_groups


	)

1563 
	#SSL_CTX_£t1_curves_li°
 
SSL_CTX_£t1_groups_li°


	)

1564 
	#SSL_£t1_curves
 
SSL_£t1_groups


	)

1565 
	#SSL_£t1_curves_li°
 
SSL_£t1_groups_li°


	)

1566 
	#SSL_gë_sh¨ed_curve
 
SSL_gë_sh¨ed_group


	)

1569 #i‚de‡
OPENSSL_NO_DEPRECATED_1_1_0


1571 
	#SSL_CTX_√ed_tmp_RSA
(
˘x
Ë0

	)

1572 
	#SSL_CTX_£t_tmp_rß
(
˘x
,
rß
Ë1

	)

1573 
	#SSL_√ed_tmp_RSA
(
s¶
Ë0

	)

1574 
	#SSL_£t_tmp_rß
(
s¶
,
rß
Ë1

	)

1575 
	#SSL_CTX_£t_ecdh_auto
(
dummy
, 
⁄off
Ë((⁄offË!0)

	)

1576 
	#SSL_£t_ecdh_auto
(
dummy
, 
⁄off
Ë((⁄offË!0)

	)

1581 
	#SSL_CTX_£t_tmp_rß_ˇŒback
(
˘x
, 
cb
Ë0Ë(cb)(
NULL
, 0, 0)

	)

1582 
	#SSL_£t_tmp_rß_ˇŒback
(
s¶
, 
cb
Ë0Ë(cb)(
NULL
, 0, 0)

	)

1584 
__owur
 c⁄° 
BIO_METHOD
 *
BIO_f_s¶
();

1585 
__owur
 
BIO
 *
BIO_√w_s¶
(
SSL_CTX
 *
˘x
, 
˛õ¡
);

1586 
__owur
 
BIO
 *
BIO_√w_s¶_c⁄√˘
(
SSL_CTX
 *
˘x
);

1587 
__owur
 
BIO
 *
BIO_√w_buf„r_s¶_c⁄√˘
(
SSL_CTX
 *
˘x
);

1588 
__owur
 
BIO_s¶_c›y_£ssi⁄_id
(
BIO
 *
to
, BIO *
‰om
);

1589 
BIO_s¶_shutdown
(
BIO
 *
s¶_bio
);

1591 
__owur
 
SSL_CTX_£t_cùhî_li°
(
SSL_CTX
 *, c⁄° *
°r
);

1592 
__owur
 
SSL_CTX
 *
SSL_CTX_√w
(c⁄° 
SSL_METHOD
 *
mëh
);

1593 
__owur
 
SSL_CTX
 *
SSL_CTX_√w_ex
(
OSSL_LIB_CTX
 *
lib˘x
, c⁄° *
¥›q
,

1594 c⁄° 
SSL_METHOD
 *
mëh
);

1595 
SSL_CTX_up_ªf
(
SSL_CTX
 *
˘x
);

1596 
SSL_CTX_‰ì
(
SSL_CTX
 *);

1597 
__owur
 
SSL_CTX_£t_timeout
(
SSL_CTX
 *
˘x
, 
t
);

1598 
__owur
 
SSL_CTX_gë_timeout
(c⁄° 
SSL_CTX
 *
˘x
);

1599 
__owur
 
X509_STORE
 *
SSL_CTX_gë_˚π_°‹e
(c⁄° 
SSL_CTX
 *);

1600 
SSL_CTX_£t_˚π_°‹e
(
SSL_CTX
 *, 
X509_STORE
 *);

1601 
SSL_CTX_£t1_˚π_°‹e
(
SSL_CTX
 *, 
X509_STORE
 *);

1602 
__owur
 
SSL_w™t
(c⁄° 
SSL
 *
s
);

1603 
__owur
 
SSL_˛ór
(
SSL
 *
s
);

1605 
SSL_CTX_Êush_£ssi⁄s
(
SSL_CTX
 *
˘x
, 
tm
);

1607 
__owur
 c⁄° 
SSL_CIPHER
 *
SSL_gë_cuºít_cùhî
(c⁄° 
SSL
 *
s
);

1608 
__owur
 c⁄° 
SSL_CIPHER
 *
SSL_gë_≥ndög_cùhî
(c⁄° 
SSL
 *
s
);

1609 
__owur
 
SSL_CIPHER_gë_bôs
(c⁄° 
SSL_CIPHER
 *
c
, *
Æg_bôs
);

1610 
__owur
 c⁄° *
SSL_CIPHER_gë_vîsi⁄
(c⁄° 
SSL_CIPHER
 *
c
);

1611 
__owur
 c⁄° *
SSL_CIPHER_gë_«me
(c⁄° 
SSL_CIPHER
 *
c
);

1612 
__owur
 c⁄° *
SSL_CIPHER_°™d¨d_«me
(c⁄° 
SSL_CIPHER
 *
c
);

1613 
__owur
 c⁄° *
OPENSSL_cùhî_«me
(c⁄° *
rfc_«me
);

1614 
__owur
 
uöt32_t
 
SSL_CIPHER_gë_id
(c⁄° 
SSL_CIPHER
 *
c
);

1615 
__owur
 
uöt16_t
 
SSL_CIPHER_gë_¥Ÿocﬁ_id
(c⁄° 
SSL_CIPHER
 *
c
);

1616 
__owur
 
SSL_CIPHER_gë_kx_nid
(c⁄° 
SSL_CIPHER
 *
c
);

1617 
__owur
 
SSL_CIPHER_gë_auth_nid
(c⁄° 
SSL_CIPHER
 *
c
);

1618 
__owur
 c⁄° 
EVP_MD
 *
SSL_CIPHER_gë_h™dshake_dige°
(c⁄° 
SSL_CIPHER
 *
c
);

1619 
__owur
 
SSL_CIPHER_is_´ad
(c⁄° 
SSL_CIPHER
 *
c
);

1621 
__owur
 
SSL_gë_fd
(c⁄° 
SSL
 *
s
);

1622 
__owur
 
SSL_gë_rfd
(c⁄° 
SSL
 *
s
);

1623 
__owur
 
SSL_gë_wfd
(c⁄° 
SSL
 *
s
);

1624 
__owur
 c⁄° *
SSL_gë_cùhî_li°
(c⁄° 
SSL
 *
s
, 
n
);

1625 
__owur
 *
SSL_gë_sh¨ed_cùhîs
(c⁄° 
SSL
 *
s
, *
buf
, 
size
);

1626 
__owur
 
SSL_gë_ªad_ahód
(c⁄° 
SSL
 *
s
);

1627 
__owur
 
SSL_≥ndög
(c⁄° 
SSL
 *
s
);

1628 
__owur
 
SSL_has_≥ndög
(c⁄° 
SSL
 *
s
);

1629 #i‚de‡
OPENSSL_NO_SOCK


1630 
__owur
 
SSL_£t_fd
(
SSL
 *
s
, 
fd
);

1631 
__owur
 
SSL_£t_rfd
(
SSL
 *
s
, 
fd
);

1632 
__owur
 
SSL_£t_wfd
(
SSL
 *
s
, 
fd
);

1634 
SSL_£t0_rbio
(
SSL
 *
s
, 
BIO
 *
rbio
);

1635 
SSL_£t0_wbio
(
SSL
 *
s
, 
BIO
 *
wbio
);

1636 
SSL_£t_bio
(
SSL
 *
s
, 
BIO
 *
rbio
, BIO *
wbio
);

1637 
__owur
 
BIO
 *
SSL_gë_rbio
(c⁄° 
SSL
 *
s
);

1638 
__owur
 
BIO
 *
SSL_gë_wbio
(c⁄° 
SSL
 *
s
);

1639 
__owur
 
SSL_£t_cùhî_li°
(
SSL
 *
s
, c⁄° *
°r
);

1640 
__owur
 
SSL_CTX_£t_cùhîsuôes
(
SSL_CTX
 *
˘x
, c⁄° *
°r
);

1641 
__owur
 
SSL_£t_cùhîsuôes
(
SSL
 *
s
, c⁄° *
°r
);

1642 
SSL_£t_ªad_ahód
(
SSL
 *
s
, 
yes
);

1643 
__owur
 
SSL_gë_vîify_mode
(c⁄° 
SSL
 *
s
);

1644 
__owur
 
SSL_gë_vîify_dïth
(c⁄° 
SSL
 *
s
);

1645 
__owur
 
SSL_vîify_cb
 
SSL_gë_vîify_ˇŒback
(c⁄° 
SSL
 *
s
);

1646 
SSL_£t_vîify
(
SSL
 *
s
, 
mode
, 
SSL_vîify_cb
 
ˇŒback
);

1647 
SSL_£t_vîify_dïth
(
SSL
 *
s
, 
dïth
);

1648 
SSL_£t_˚π_cb
(
SSL
 *
s
, (*
cb
Ë(SSL *
s¶
, *
¨g
), *arg);

1649 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


1650 
OSSL_DEPRECATEDIN_3_0
 
__owur
 
SSL_u£_RSAPriv©eKey
(
SSL
 *
s¶
, 
RSA
 *
rß
);

1651 
OSSL_DEPRECATEDIN_3_0


1652 
__owur
 
SSL_u£_RSAPriv©eKey_ASN1
(
SSL
 *
s¶
,

1653 c⁄° *
d
, 
Àn
);

1655 
__owur
 
SSL_u£_Priv©eKey
(
SSL
 *
s¶
, 
EVP_PKEY
 *
pkey
);

1656 
__owur
 
SSL_u£_Priv©eKey_ASN1
(
pk
, 
SSL
 *
s¶
, c⁄° *
d
,

1657 
Àn
);

1658 
__owur
 
SSL_u£_˚πifiˇã
(
SSL
 *
s¶
, 
X509
 *
x
);

1659 
__owur
 
SSL_u£_˚πifiˇã_ASN1
(
SSL
 *
s¶
, c⁄° *
d
, 
Àn
);

1660 
__owur
 
SSL_u£_˚π_™d_key
(
SSL
 *
s¶
, 
X509
 *
x509
, 
EVP_PKEY
 *
¥iv©ekey
,

1661 
STACK_OF
(
X509
Ë*
chaö
, 
ovîride
);

1665 
	#SSL_SERVERINFOV1
 1

	)

1666 
	#SSL_SERVERINFOV2
 2

	)

1669 
__owur
 
SSL_CTX_u£_£rvîöfo
(
SSL_CTX
 *
˘x
, c⁄° *
£rvîöfo
,

1670 
size_t
 
£rvîöfo_Àngth
);

1671 
__owur
 
SSL_CTX_u£_£rvîöfo_ex
(
SSL_CTX
 *
˘x
, 
vîsi⁄
,

1672 c⁄° *
£rvîöfo
,

1673 
size_t
 
£rvîöfo_Àngth
);

1674 
__owur
 
SSL_CTX_u£_£rvîöfo_fûe
(
SSL_CTX
 *
˘x
, c⁄° *
fûe
);

1676 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


1677 
OSSL_DEPRECATEDIN_3_0


1678 
__owur
 
SSL_u£_RSAPriv©eKey_fûe
(
SSL
 *
s¶
, c⁄° *
fûe
, 
ty≥
);

1681 
__owur
 
SSL_u£_Priv©eKey_fûe
(
SSL
 *
s¶
, c⁄° *
fûe
, 
ty≥
);

1682 
__owur
 
SSL_u£_˚πifiˇã_fûe
(
SSL
 *
s¶
, c⁄° *
fûe
, 
ty≥
);

1684 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


1685 
OSSL_DEPRECATEDIN_3_0


1686 
__owur
 
SSL_CTX_u£_RSAPriv©eKey_fûe
(
SSL_CTX
 *
˘x
, c⁄° *
fûe
,

1687 
ty≥
);

1689 
__owur
 
SSL_CTX_u£_Priv©eKey_fûe
(
SSL_CTX
 *
˘x
, c⁄° *
fûe
,

1690 
ty≥
);

1691 
__owur
 
SSL_CTX_u£_˚πifiˇã_fûe
(
SSL_CTX
 *
˘x
, c⁄° *
fûe
,

1692 
ty≥
);

1694 
__owur
 
SSL_CTX_u£_˚πifiˇã_chaö_fûe
(
SSL_CTX
 *
˘x
, c⁄° *
fûe
);

1695 
__owur
 
SSL_u£_˚πifiˇã_chaö_fûe
(
SSL
 *
s¶
, c⁄° *
fûe
);

1696 
__owur
 
STACK_OF
(
X509_NAME
Ë*
SSL_lﬂd_˛õ¡_CA_fûe
(c⁄° *
fûe
);

1697 
__owur
 
STACK_OF
(
X509_NAME
)

1698 *
SSL_lﬂd_˛õ¡_CA_fûe_ex
(c⁄° *
fûe
, 
OSSL_LIB_CTX
 *
lib˘x
,

1699 c⁄° *
¥›q
);

1700 
__owur
 
SSL_add_fûe_˚π_subje˘s_to_°ack
(
STACK_OF
(
X509_NAME
Ë*
°ackCAs
,

1701 c⁄° *
fûe
);

1702 
SSL_add_dú_˚π_subje˘s_to_°ack
(
STACK_OF
(
X509_NAME
Ë*
°ackCAs
,

1703 c⁄° *
dú
);

1704 
SSL_add_°‹e_˚π_subje˘s_to_°ack
(
STACK_OF
(
X509_NAME
Ë*
°ackCAs
,

1705 c⁄° *
uri
);

1707 #i‚de‡
OPENSSL_NO_DEPRECATED_1_1_0


1708 
	#SSL_lﬂd_îr‹_°rögs
() \

1709 
	`OPENSSL_öô_s¶
(
OPENSSL_INIT_LOAD_SSL_STRINGS
 \

1710 | 
OPENSSL_INIT_LOAD_CRYPTO_STRINGS
, 
NULL
)

	)

1713 
__owur
 c⁄° *
SSL_°©e_°rög
(c⁄° 
SSL
 *
s
);

1714 
__owur
 c⁄° *
SSL_r°©e_°rög
(c⁄° 
SSL
 *
s
);

1715 
__owur
 c⁄° *
SSL_°©e_°rög_l⁄g
(c⁄° 
SSL
 *
s
);

1716 
__owur
 c⁄° *
SSL_r°©e_°rög_l⁄g
(c⁄° 
SSL
 *
s
);

1717 
__owur
 
SSL_SESSION_gë_time
(c⁄° 
SSL_SESSION
 *
s
);

1718 
__owur
 
SSL_SESSION_£t_time
(
SSL_SESSION
 *
s
, 
t
);

1719 
__owur
 
SSL_SESSION_gë_timeout
(c⁄° 
SSL_SESSION
 *
s
);

1720 
__owur
 
SSL_SESSION_£t_timeout
(
SSL_SESSION
 *
s
, 
t
);

1721 
__owur
 
SSL_SESSION_gë_¥Ÿocﬁ_vîsi⁄
(c⁄° 
SSL_SESSION
 *
s
);

1722 
__owur
 
SSL_SESSION_£t_¥Ÿocﬁ_vîsi⁄
(
SSL_SESSION
 *
s
, 
vîsi⁄
);

1724 
__owur
 c⁄° *
SSL_SESSION_gë0_ho°«me
(c⁄° 
SSL_SESSION
 *
s
);

1725 
__owur
 
SSL_SESSION_£t1_ho°«me
(
SSL_SESSION
 *
s
, c⁄° *
ho°«me
);

1726 
SSL_SESSION_gë0_Æ≤_£À˘ed
(c⁄° 
SSL_SESSION
 *
s
,

1727 c⁄° **
Æ≤
,

1728 
size_t
 *
Àn
);

1729 
__owur
 
SSL_SESSION_£t1_Æ≤_£À˘ed
(
SSL_SESSION
 *
s
,

1730 c⁄° *
Æ≤
,

1731 
size_t
 
Àn
);

1732 
__owur
 c⁄° 
SSL_CIPHER
 *
SSL_SESSION_gë0_cùhî
(c⁄° 
SSL_SESSION
 *
s
);

1733 
__owur
 
SSL_SESSION_£t_cùhî
(
SSL_SESSION
 *
s
, c⁄° 
SSL_CIPHER
 *
cùhî
);

1734 
__owur
 
SSL_SESSION_has_tickë
(c⁄° 
SSL_SESSION
 *
s
);

1735 
__owur
 
SSL_SESSION_gë_tickë_li„time_höt
(c⁄° 
SSL_SESSION
 *
s
);

1736 
SSL_SESSION_gë0_tickë
(c⁄° 
SSL_SESSION
 *
s
, c⁄° **
tick
,

1737 
size_t
 *
Àn
);

1738 
__owur
 
uöt32_t
 
SSL_SESSION_gë_max_óæy_d©a
(c⁄° 
SSL_SESSION
 *
s
);

1739 
__owur
 
SSL_SESSION_£t_max_óæy_d©a
(
SSL_SESSION
 *
s
,

1740 
uöt32_t
 
max_óæy_d©a
);

1741 
__owur
 
SSL_c›y_£ssi⁄_id
(
SSL
 *
to
, c⁄° SSL *
‰om
);

1742 
__owur
 
X509
 *
SSL_SESSION_gë0_≥î
(
SSL_SESSION
 *
s
);

1743 
__owur
 
SSL_SESSION_£t1_id_c⁄ãxt
(
SSL_SESSION
 *
s
,

1744 c⁄° *
sid_˘x
,

1745 
sid_˘x_Àn
);

1746 
__owur
 
SSL_SESSION_£t1_id
(
SSL_SESSION
 *
s
, c⁄° *
sid
,

1747 
sid_Àn
);

1748 
__owur
 
SSL_SESSION_is_ªsumabÀ
(c⁄° 
SSL_SESSION
 *
s
);

1750 
__owur
 
SSL_SESSION
 *
SSL_SESSION_√w
();

1751 
__owur
 
SSL_SESSION
 *
SSL_SESSION_dup
(c⁄° SSL_SESSION *
§c
);

1752 c⁄° *
SSL_SESSION_gë_id
(c⁄° 
SSL_SESSION
 *
s
,

1753 *
Àn
);

1754 c⁄° *
SSL_SESSION_gë0_id_c⁄ãxt
(c⁄° 
SSL_SESSION
 *
s
,

1755 *
Àn
);

1756 
__owur
 
SSL_SESSION_gë_com¥ess_id
(c⁄° 
SSL_SESSION
 *
s
);

1757 #i‚de‡
OPENSSL_NO_STDIO


1758 
SSL_SESSION_¥öt_Â
(
FILE
 *
Â
, c⁄° 
SSL_SESSION
 *
£s
);

1760 
SSL_SESSION_¥öt
(
BIO
 *
Â
, c⁄° 
SSL_SESSION
 *
£s
);

1761 
SSL_SESSION_¥öt_keylog
(
BIO
 *
bp
, c⁄° 
SSL_SESSION
 *
x
);

1762 
SSL_SESSION_up_ªf
(
SSL_SESSION
 *
£s
);

1763 
SSL_SESSION_‰ì
(
SSL_SESSION
 *
£s
);

1764 
__owur
 
i2d_SSL_SESSION
(c⁄° 
SSL_SESSION
 *
ö
, **
µ
);

1765 
__owur
 
SSL_£t_£ssi⁄
(
SSL
 *
to
, 
SSL_SESSION
 *
£ssi⁄
);

1766 
SSL_CTX_add_£ssi⁄
(
SSL_CTX
 *
˘x
, 
SSL_SESSION
 *
£ssi⁄
);

1767 
SSL_CTX_ªmove_£ssi⁄
(
SSL_CTX
 *
˘x
, 
SSL_SESSION
 *
£ssi⁄
);

1768 
__owur
 
SSL_CTX_£t_gíî©e_£ssi⁄_id
(
SSL_CTX
 *
˘x
, 
GEN_SESSION_CB
 
cb
);

1769 
__owur
 
SSL_£t_gíî©e_£ssi⁄_id
(
SSL
 *
s
, 
GEN_SESSION_CB
 
cb
);

1770 
__owur
 
SSL_has_m©chög_£ssi⁄_id
(c⁄° 
SSL
 *
s
,

1771 c⁄° *
id
,

1772 
id_Àn
);

1773 
SSL_SESSION
 *
d2i_SSL_SESSION
(SSL_SESSION **
a
, c⁄° **
µ
,

1774 
Àngth
);

1776 #ifde‡
OPENSSL_X509_H


1777 
__owur
 
X509
 *
SSL_gë0_≥î_˚πifiˇã
(c⁄° 
SSL
 *
s
);

1778 
__owur
 
X509
 *
SSL_gë1_≥î_˚πifiˇã
(c⁄° 
SSL
 *
s
);

1780 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


1781 
	#SSL_gë_≥î_˚πifiˇã
 
SSL_gë1_≥î_˚πifiˇã


	)

1785 
__owur
 
STACK_OF
(
X509
Ë*
SSL_gë_≥î_˚π_chaö
(c⁄° 
SSL
 *
s
);

1787 
__owur
 
SSL_CTX_gë_vîify_mode
(c⁄° 
SSL_CTX
 *
˘x
);

1788 
__owur
 
SSL_CTX_gë_vîify_dïth
(c⁄° 
SSL_CTX
 *
˘x
);

1789 
__owur
 
SSL_vîify_cb
 
SSL_CTX_gë_vîify_ˇŒback
(c⁄° 
SSL_CTX
 *
˘x
);

1790 
SSL_CTX_£t_vîify
(
SSL_CTX
 *
˘x
, 
mode
, 
SSL_vîify_cb
 
ˇŒback
);

1791 
SSL_CTX_£t_vîify_dïth
(
SSL_CTX
 *
˘x
, 
dïth
);

1792 
SSL_CTX_£t_˚π_vîify_ˇŒback
(
SSL_CTX
 *
˘x
,

1793 (*
cb
Ë(
X509_STORE_CTX
 *, *),

1794 *
¨g
);

1795 
SSL_CTX_£t_˚π_cb
(
SSL_CTX
 *
c
, (*
cb
Ë(
SSL
 *
s¶
, *
¨g
),

1796 *
¨g
);

1797 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


1798 
OSSL_DEPRECATEDIN_3_0


1799 
__owur
 
SSL_CTX_u£_RSAPriv©eKey
(
SSL_CTX
 *
˘x
, 
RSA
 *
rß
);

1800 
OSSL_DEPRECATEDIN_3_0


1801 
__owur
 
SSL_CTX_u£_RSAPriv©eKey_ASN1
(
SSL_CTX
 *
˘x
, c⁄° *
d
,

1802 
Àn
);

1804 
__owur
 
SSL_CTX_u£_Priv©eKey
(
SSL_CTX
 *
˘x
, 
EVP_PKEY
 *
pkey
);

1805 
__owur
 
SSL_CTX_u£_Priv©eKey_ASN1
(
pk
, 
SSL_CTX
 *
˘x
,

1806 c⁄° *
d
, 
Àn
);

1807 
__owur
 
SSL_CTX_u£_˚πifiˇã
(
SSL_CTX
 *
˘x
, 
X509
 *
x
);

1808 
__owur
 
SSL_CTX_u£_˚πifiˇã_ASN1
(
SSL_CTX
 *
˘x
, 
Àn
,

1809 c⁄° *
d
);

1810 
__owur
 
SSL_CTX_u£_˚π_™d_key
(
SSL_CTX
 *
˘x
, 
X509
 *
x509
, 
EVP_PKEY
 *
¥iv©ekey
,

1811 
STACK_OF
(
X509
Ë*
chaö
, 
ovîride
);

1813 
SSL_CTX_£t_deÁu…_∑sswd_cb
(
SSL_CTX
 *
˘x
, 
≥m_∑ssw‹d_cb
 *
cb
);

1814 
SSL_CTX_£t_deÁu…_∑sswd_cb_u£rd©a
(
SSL_CTX
 *
˘x
, *
u
);

1815 
≥m_∑ssw‹d_cb
 *
SSL_CTX_gë_deÁu…_∑sswd_cb
(
SSL_CTX
 *
˘x
);

1816 *
SSL_CTX_gë_deÁu…_∑sswd_cb_u£rd©a
(
SSL_CTX
 *
˘x
);

1817 
SSL_£t_deÁu…_∑sswd_cb
(
SSL
 *
s
, 
≥m_∑ssw‹d_cb
 *
cb
);

1818 
SSL_£t_deÁu…_∑sswd_cb_u£rd©a
(
SSL
 *
s
, *
u
);

1819 
≥m_∑ssw‹d_cb
 *
SSL_gë_deÁu…_∑sswd_cb
(
SSL
 *
s
);

1820 *
SSL_gë_deÁu…_∑sswd_cb_u£rd©a
(
SSL
 *
s
);

1822 
__owur
 
SSL_CTX_check_¥iv©e_key
(c⁄° 
SSL_CTX
 *
˘x
);

1823 
__owur
 
SSL_check_¥iv©e_key
(c⁄° 
SSL
 *
˘x
);

1825 
__owur
 
SSL_CTX_£t_£ssi⁄_id_c⁄ãxt
(
SSL_CTX
 *
˘x
,

1826 c⁄° *
sid_˘x
,

1827 
sid_˘x_Àn
);

1829 
SSL
 *
SSL_√w
(
SSL_CTX
 *
˘x
);

1830 
SSL_up_ªf
(
SSL
 *
s
);

1831 
SSL_is_dés
(c⁄° 
SSL
 *
s
);

1832 
__owur
 
SSL_£t_£ssi⁄_id_c⁄ãxt
(
SSL
 *
s¶
, c⁄° *
sid_˘x
,

1833 
sid_˘x_Àn
);

1835 
__owur
 
SSL_CTX_£t_puΩo£
(
SSL_CTX
 *
˘x
, 
puΩo£
);

1836 
__owur
 
SSL_£t_puΩo£
(
SSL
 *
s¶
, 
puΩo£
);

1837 
__owur
 
SSL_CTX_£t_åu°
(
SSL_CTX
 *
˘x
, 
åu°
);

1838 
__owur
 
SSL_£t_åu°
(
SSL
 *
s¶
, 
åu°
);

1840 
__owur
 
SSL_£t1_ho°
(
SSL
 *
s
, c⁄° *
ho°«me
);

1841 
__owur
 
SSL_add1_ho°
(
SSL
 *
s
, c⁄° *
ho°«me
);

1842 
__owur
 c⁄° *
SSL_gë0_≥î«me
(
SSL
 *
s
);

1843 
SSL_£t_ho°Êags
(
SSL
 *
s
, 
Êags
);

1845 
__owur
 
SSL_CTX_d™e_íabÀ
(
SSL_CTX
 *
˘x
);

1846 
__owur
 
SSL_CTX_d™e_mty≥_£t
(
SSL_CTX
 *
˘x
, c⁄° 
EVP_MD
 *
md
,

1847 
uöt8_t
 
mty≥
, uöt8_à
‹d
);

1848 
__owur
 
SSL_d™e_íabÀ
(
SSL
 *
s
, c⁄° *
ba£domaö
);

1849 
__owur
 
SSL_d™e_éß_add
(
SSL
 *
s
, 
uöt8_t
 
ußge
, uöt8_à
£À˘‹
,

1850 
uöt8_t
 
mty≥
, c⁄° *
d©a
, 
size_t
 
dÀn
);

1851 
__owur
 
SSL_gë0_d™e_auth‹ôy
(
SSL
 *
s
, 
X509
 **
m˚π
, 
EVP_PKEY
 **
m•ki
);

1852 
__owur
 
SSL_gë0_d™e_éß
(
SSL
 *
s
, 
uöt8_t
 *
ußge
, uöt8_à*
£À˘‹
,

1853 
uöt8_t
 *
mty≥
, c⁄° **
d©a
,

1854 
size_t
 *
dÀn
);

1859 
SSL_DANE
 *
SSL_gë0_d™e
(
SSL
 *
s¶
);

1863 
SSL_CTX_d™e_£t_Êags
(
SSL_CTX
 *
˘x
, 
Êags
);

1864 
SSL_CTX_d™e_˛ór_Êags
(
SSL_CTX
 *
˘x
, 
Êags
);

1865 
SSL_d™e_£t_Êags
(
SSL
 *
s¶
, 
Êags
);

1866 
SSL_d™e_˛ór_Êags
(
SSL
 *
s¶
, 
Êags
);

1868 
__owur
 
SSL_CTX_£t1_∑øm
(
SSL_CTX
 *
˘x
, 
X509_VERIFY_PARAM
 *
vpm
);

1869 
__owur
 
SSL_£t1_∑øm
(
SSL
 *
s¶
, 
X509_VERIFY_PARAM
 *
vpm
);

1871 
__owur
 
X509_VERIFY_PARAM
 *
SSL_CTX_gë0_∑øm
(
SSL_CTX
 *
˘x
);

1872 
__owur
 
X509_VERIFY_PARAM
 *
SSL_gë0_∑øm
(
SSL
 *
s¶
);

1874 #i‚de‡
OPENSSL_NO_SRP


1875 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


1876 
OSSL_DEPRECATEDIN_3_0
 
SSL_CTX_£t_§p_u£∫ame
(
SSL_CTX
 *
˘x
, *
«me
);

1877 
OSSL_DEPRECATEDIN_3_0
 
SSL_CTX_£t_§p_∑ssw‹d
(
SSL_CTX
 *
˘x
, *
∑ssw‹d
);

1878 
OSSL_DEPRECATEDIN_3_0
 
SSL_CTX_£t_§p_°ªngth
(
SSL_CTX
 *
˘x
, 
°ªngth
);

1879 
OSSL_DEPRECATEDIN_3_0


1880 
SSL_CTX_£t_§p_˛õ¡_pwd_ˇŒback
(
SSL_CTX
 *
˘x
,

1881 *(*
cb
Ë(
SSL
 *, *));

1882 
OSSL_DEPRECATEDIN_3_0


1883 
SSL_CTX_£t_§p_vîify_∑øm_ˇŒback
(
SSL_CTX
 *
˘x
,

1884 (*
cb
Ë(
SSL
 *, *));

1885 
OSSL_DEPRECATEDIN_3_0


1886 
SSL_CTX_£t_§p_u£∫ame_ˇŒback
(
SSL_CTX
 *
˘x
,

1887 (*
cb
Ë(
SSL
 *, *, *));

1888 
OSSL_DEPRECATEDIN_3_0
 
SSL_CTX_£t_§p_cb_¨g
(
SSL_CTX
 *
˘x
, *
¨g
);

1890 
OSSL_DEPRECATEDIN_3_0


1891 
SSL_£t_§p_£rvî_∑øm
(
SSL
 *
s
, c⁄° 
BIGNUM
 *
N
, c⁄° BIGNUM *
g
,

1892 
BIGNUM
 *
ß
, BIGNUM *
v
, *
öfo
);

1893 
OSSL_DEPRECATEDIN_3_0


1894 
SSL_£t_§p_£rvî_∑øm_pw
(
SSL
 *
s
, c⁄° *
u£r
, c⁄° *
∑ss
,

1895 c⁄° *
gΩ
);

1897 
OSSL_DEPRECATEDIN_3_0
 
__owur
 
BIGNUM
 *
SSL_gë_§p_g
(
SSL
 *
s
);

1898 
OSSL_DEPRECATEDIN_3_0
 
__owur
 
BIGNUM
 *
SSL_gë_§p_N
(
SSL
 *
s
);

1900 
OSSL_DEPRECATEDIN_3_0
 
__owur
 *
SSL_gë_§p_u£∫ame
(
SSL
 *
s
);

1901 
OSSL_DEPRECATEDIN_3_0
 
__owur
 *
SSL_gë_§p_u£röfo
(
SSL
 *
s
);

1909 
	#SSL_CLIENT_HELLO_SUCCESS
 1

	)

1910 
	#SSL_CLIENT_HELLO_ERROR
 0

	)

1911 
	#SSL_CLIENT_HELLO_RETRY
 (-1)

	)

1913 (*
SSL_˛õ¡_hñlo_cb_‚
Ë(
	tSSL
 *
	ts
, *
	tÆ
, *
	t¨g
);

1914 
SSL_CTX_£t_˛õ¡_hñlo_cb
(
SSL_CTX
 *
c
, 
SSL_˛õ¡_hñlo_cb_‚
 
cb
,

1915 *
¨g
);

1916 
SSL_˛õ¡_hñlo_isv2
(
SSL
 *
s
);

1917 
SSL_˛õ¡_hñlo_gë0_Àgacy_vîsi⁄
(
SSL
 *
s
);

1918 
size_t
 
SSL_˛õ¡_hñlo_gë0_øndom
(
SSL
 *
s
, c⁄° **
out
);

1919 
size_t
 
SSL_˛õ¡_hñlo_gë0_£ssi⁄_id
(
SSL
 *
s
, c⁄° **
out
);

1920 
size_t
 
SSL_˛õ¡_hñlo_gë0_cùhîs
(
SSL
 *
s
, c⁄° **
out
);

1921 
size_t
 
SSL_˛õ¡_hñlo_gë0_com¥essi⁄_mëhods
(
SSL
 *
s
,

1922 c⁄° **
out
);

1923 
SSL_˛õ¡_hñlo_gë1_exãnsi⁄s_¥e£¡
(
SSL
 *
s
, **
out
, 
size_t
 *
ouéí
);

1924 
SSL_˛õ¡_hñlo_gë0_ext
(
SSL
 *
s
, 
ty≥
,

1925 c⁄° **
out
, 
size_t
 *
ouéí
);

1927 
SSL_˚πs_˛ór
(
SSL
 *
s
);

1928 
SSL_‰ì
(
SSL
 *
s¶
);

1929 #ifde‡
OSSL_ASYNC_FD


1933 
__owur
 
SSL_waôög_f‹_async
(
SSL
 *
s
);

1934 
__owur
 
SSL_gë_Æl_async_fds
(
SSL
 *
s
, 
OSSL_ASYNC_FD
 *
fds
, 
size_t
 *
numfds
);

1935 
__owur
 
SSL_gë_ch™ged_async_fds
(
SSL
 *
s
, 
OSSL_ASYNC_FD
 *
addfd
,

1936 
size_t
 *
numaddfds
, 
OSSL_ASYNC_FD
 *
dñfd
,

1937 
size_t
 *
numdñfds
);

1938 
__owur
 
SSL_CTX_£t_async_ˇŒback
(
SSL_CTX
 *
˘x
, 
SSL_async_ˇŒback_‚
 
ˇŒback
);

1939 
__owur
 
SSL_CTX_£t_async_ˇŒback_¨g
(
SSL_CTX
 *
˘x
, *
¨g
);

1940 
__owur
 
SSL_£t_async_ˇŒback
(
SSL
 *
s
, 
SSL_async_ˇŒback_‚
 
ˇŒback
);

1941 
__owur
 
SSL_£t_async_ˇŒback_¨g
(
SSL
 *
s
, *
¨g
);

1942 
__owur
 
SSL_gë_async_°©us
(
SSL
 *
s
, *
°©us
);

1945 
__owur
 
SSL_ac˚±
(
SSL
 *
s¶
);

1946 
__owur
 
SSL_°©ñess
(
SSL
 *
s
);

1947 
__owur
 
SSL_c⁄√˘
(
SSL
 *
s¶
);

1948 
__owur
 
SSL_ªad
(
SSL
 *
s¶
, *
buf
, 
num
);

1949 
__owur
 
SSL_ªad_ex
(
SSL
 *
s¶
, *
buf
, 
size_t
 
num
, size_à*
ªadbyãs
);

1951 
	#SSL_READ_EARLY_DATA_ERROR
 0

	)

1952 
	#SSL_READ_EARLY_DATA_SUCCESS
 1

	)

1953 
	#SSL_READ_EARLY_DATA_FINISH
 2

	)

1955 
__owur
 
SSL_ªad_óæy_d©a
(
SSL
 *
s
, *
buf
, 
size_t
 
num
,

1956 
size_t
 *
ªadbyãs
);

1957 
__owur
 
SSL_≥ek
(
SSL
 *
s¶
, *
buf
, 
num
);

1958 
__owur
 
SSL_≥ek_ex
(
SSL
 *
s¶
, *
buf
, 
size_t
 
num
, size_à*
ªadbyãs
);

1959 
__owur
 
os¶_ssize_t
 
SSL_£ndfûe
(
SSL
 *
s
, 
fd
, 
off_t
 
off£t
, 
size_t
 
size
,

1960 
Êags
);

1961 
__owur
 
SSL_wrôe
(
SSL
 *
s¶
, c⁄° *
buf
, 
num
);

1962 
__owur
 
SSL_wrôe_ex
(
SSL
 *
s
, c⁄° *
buf
, 
size_t
 
num
, size_à*
wrôãn
);

1963 
__owur
 
SSL_wrôe_óæy_d©a
(
SSL
 *
s
, c⁄° *
buf
, 
size_t
 
num
,

1964 
size_t
 *
wrôãn
);

1965 
SSL_˘æ
(
SSL
 *
s¶
, 
cmd
, 
œrg
, *
∑rg
);

1966 
SSL_ˇŒback_˘æ
(
SSL
 *, , (*)());

1967 
SSL_CTX_˘æ
(
SSL_CTX
 *
˘x
, 
cmd
, 
œrg
, *
∑rg
);

1968 
SSL_CTX_ˇŒback_˘æ
(
SSL_CTX
 *, , (*)());

1970 
	#SSL_EARLY_DATA_NOT_SENT
 0

	)

1971 
	#SSL_EARLY_DATA_REJECTED
 1

	)

1972 
	#SSL_EARLY_DATA_ACCEPTED
 2

	)

1974 
__owur
 
SSL_gë_óæy_d©a_°©us
(c⁄° 
SSL
 *
s
);

1976 
__owur
 
SSL_gë_îr‹
(c⁄° 
SSL
 *
s
, 
ªt_code
);

1977 
__owur
 c⁄° *
SSL_gë_vîsi⁄
(c⁄° 
SSL
 *
s
);

1980 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


1981 
OSSL_DEPRECATEDIN_3_0


1982 
__owur
 
SSL_CTX_£t_s¶_vîsi⁄
(
SSL_CTX
 *
˘x
, c⁄° 
SSL_METHOD
 *
mëh
);

1985 #i‚de‡
OPENSSL_NO_SSL3_METHOD


1986 #i‚de‡
OPENSSL_NO_DEPRECATED_1_1_0


1987 
OSSL_DEPRECATEDIN_1_1_0
 
__owur
 c⁄° 
SSL_METHOD
 *
SSLv3_mëhod
();

1988 
OSSL_DEPRECATEDIN_1_1_0
 
__owur
 c⁄° 
SSL_METHOD
 *
SSLv3_£rvî_mëhod
();

1989 
OSSL_DEPRECATEDIN_1_1_0
 
__owur
 c⁄° 
SSL_METHOD
 *
SSLv3_˛õ¡_mëhod
();

1993 
	#SSLv23_mëhod
 
TLS_mëhod


	)

1994 
	#SSLv23_£rvî_mëhod
 
TLS_£rvî_mëhod


	)

1995 
	#SSLv23_˛õ¡_mëhod
 
TLS_˛õ¡_mëhod


	)

1998 
__owur
 c⁄° 
SSL_METHOD
 *
TLS_mëhod
();

1999 
__owur
 c⁄° 
SSL_METHOD
 *
TLS_£rvî_mëhod
();

2000 
__owur
 c⁄° 
SSL_METHOD
 *
TLS_˛õ¡_mëhod
();

2002 #i‚de‡
OPENSSL_NO_TLS1_METHOD


2003 #i‚de‡
OPENSSL_NO_DEPRECATED_1_1_0


2004 
OSSL_DEPRECATEDIN_1_1_0
 
__owur
 c⁄° 
SSL_METHOD
 *
TLSv1_mëhod
();

2005 
OSSL_DEPRECATEDIN_1_1_0
 
__owur
 c⁄° 
SSL_METHOD
 *
TLSv1_£rvî_mëhod
();

2006 
OSSL_DEPRECATEDIN_1_1_0
 
__owur
 c⁄° 
SSL_METHOD
 *
TLSv1_˛õ¡_mëhod
();

2010 #i‚de‡
OPENSSL_NO_TLS1_1_METHOD


2011 #i‚de‡
OPENSSL_NO_DEPRECATED_1_1_0


2012 
OSSL_DEPRECATEDIN_1_1_0
 
__owur
 c⁄° 
SSL_METHOD
 *
TLSv1_1_mëhod
();

2013 
OSSL_DEPRECATEDIN_1_1_0
 
__owur
 c⁄° 
SSL_METHOD
 *
TLSv1_1_£rvî_mëhod
();

2014 
OSSL_DEPRECATEDIN_1_1_0
 
__owur
 c⁄° 
SSL_METHOD
 *
TLSv1_1_˛õ¡_mëhod
();

2018 #i‚de‡
OPENSSL_NO_TLS1_2_METHOD


2019 #i‚de‡
OPENSSL_NO_DEPRECATED_1_1_0


2020 
OSSL_DEPRECATEDIN_1_1_0
 
__owur
 c⁄° 
SSL_METHOD
 *
TLSv1_2_mëhod
();

2021 
OSSL_DEPRECATEDIN_1_1_0
 
__owur
 c⁄° 
SSL_METHOD
 *
TLSv1_2_£rvî_mëhod
();

2022 
OSSL_DEPRECATEDIN_1_1_0
 
__owur
 c⁄° 
SSL_METHOD
 *
TLSv1_2_˛õ¡_mëhod
();

2026 #i‚de‡
OPENSSL_NO_DTLS1_METHOD


2027 #i‚de‡
OPENSSL_NO_DEPRECATED_1_1_0


2028 
OSSL_DEPRECATEDIN_1_1_0
 
__owur
 c⁄° 
SSL_METHOD
 *
DTLSv1_mëhod
();

2029 
OSSL_DEPRECATEDIN_1_1_0
 
__owur
 c⁄° 
SSL_METHOD
 *
DTLSv1_£rvî_mëhod
();

2030 
OSSL_DEPRECATEDIN_1_1_0
 
__owur
 c⁄° 
SSL_METHOD
 *
DTLSv1_˛õ¡_mëhod
();

2034 #i‚de‡
OPENSSL_NO_DTLS1_2_METHOD


2036 #i‚de‡
OPENSSL_NO_DEPRECATED_1_1_0


2037 
OSSL_DEPRECATEDIN_1_1_0
 
__owur
 c⁄° 
SSL_METHOD
 *
DTLSv1_2_mëhod
();

2038 
OSSL_DEPRECATEDIN_1_1_0
 
__owur
 c⁄° 
SSL_METHOD
 *
DTLSv1_2_£rvî_mëhod
();

2039 
OSSL_DEPRECATEDIN_1_1_0
 
__owur
 c⁄° 
SSL_METHOD
 *
DTLSv1_2_˛õ¡_mëhod
();

2043 
__owur
 c⁄° 
SSL_METHOD
 *
DTLS_mëhod
();

2044 
__owur
 c⁄° 
SSL_METHOD
 *
DTLS_£rvî_mëhod
();

2045 
__owur
 c⁄° 
SSL_METHOD
 *
DTLS_˛õ¡_mëhod
();

2047 
__owur
 
size_t
 
DTLS_gë_d©a_mtu
(c⁄° 
SSL
 *
s
);

2049 
__owur
 
STACK_OF
(
SSL_CIPHER
Ë*
SSL_gë_cùhîs
(c⁄° 
SSL
 *
s
);

2050 
__owur
 
STACK_OF
(
SSL_CIPHER
Ë*
SSL_CTX_gë_cùhîs
(c⁄° 
SSL_CTX
 *
˘x
);

2051 
__owur
 
STACK_OF
(
SSL_CIPHER
Ë*
SSL_gë_˛õ¡_cùhîs
(c⁄° 
SSL
 *
s
);

2052 
__owur
 
STACK_OF
(
SSL_CIPHER
Ë*
SSL_gë1_suµ‹ãd_cùhîs
(
SSL
 *
s
);

2054 
__owur
 
SSL_do_h™dshake
(
SSL
 *
s
);

2055 
SSL_key_upd©e
(
SSL
 *
s
, 
upd©ëy≥
);

2056 
SSL_gë_key_upd©e_ty≥
(c⁄° 
SSL
 *
s
);

2057 
SSL_ª√gŸüã
(
SSL
 *
s
);

2058 
SSL_ª√gŸüã_abbªvüãd
(
SSL
 *
s
);

2059 
__owur
 
SSL_ª√gŸüã_≥ndög
(c⁄° 
SSL
 *
s
);

2060 
SSL_√w_£ssi⁄_tickë
(
SSL
 *
s
);

2061 
SSL_shutdown
(
SSL
 *
s
);

2062 
__owur
 
SSL_vîify_˛õ¡_po°_h™dshake
(
SSL
 *
s
);

2063 
SSL_CTX_£t_po°_h™dshake_auth
(
SSL_CTX
 *
˘x
, 
vÆ
);

2064 
SSL_£t_po°_h™dshake_auth
(
SSL
 *
s
, 
vÆ
);

2066 
__owur
 c⁄° 
SSL_METHOD
 *
SSL_CTX_gë_s¶_mëhod
(c⁄° 
SSL_CTX
 *
˘x
);

2067 
__owur
 c⁄° 
SSL_METHOD
 *
SSL_gë_s¶_mëhod
(c⁄° 
SSL
 *
s
);

2068 
__owur
 
SSL_£t_s¶_mëhod
(
SSL
 *
s
, c⁄° 
SSL_METHOD
 *
mëhod
);

2069 
__owur
 c⁄° *
SSL_Æît_ty≥_°rög_l⁄g
(
vÆue
);

2070 
__owur
 c⁄° *
SSL_Æît_ty≥_°rög
(
vÆue
);

2071 
__owur
 c⁄° *
SSL_Æît_desc_°rög_l⁄g
(
vÆue
);

2072 
__owur
 c⁄° *
SSL_Æît_desc_°rög
(
vÆue
);

2074 
SSL_£t0_CA_li°
(
SSL
 *
s
, 
STACK_OF
(
X509_NAME
Ë*
«me_li°
);

2075 
SSL_CTX_£t0_CA_li°
(
SSL_CTX
 *
˘x
, 
STACK_OF
(
X509_NAME
Ë*
«me_li°
);

2076 
__owur
 c⁄° 
STACK_OF
(
X509_NAME
Ë*
SSL_gë0_CA_li°
(c⁄° 
SSL
 *
s
);

2077 
__owur
 c⁄° 
STACK_OF
(
X509_NAME
Ë*
SSL_CTX_gë0_CA_li°
(c⁄° 
SSL_CTX
 *
˘x
);

2078 
__owur
 
SSL_add1_to_CA_li°
(
SSL
 *
s¶
, c⁄° 
X509
 *
x
);

2079 
__owur
 
SSL_CTX_add1_to_CA_li°
(
SSL_CTX
 *
˘x
, c⁄° 
X509
 *
x
);

2080 
__owur
 c⁄° 
STACK_OF
(
X509_NAME
Ë*
SSL_gë0_≥î_CA_li°
(c⁄° 
SSL
 *
s
);

2082 
SSL_£t_˛õ¡_CA_li°
(
SSL
 *
s
, 
STACK_OF
(
X509_NAME
Ë*
«me_li°
);

2083 
SSL_CTX_£t_˛õ¡_CA_li°
(
SSL_CTX
 *
˘x
, 
STACK_OF
(
X509_NAME
Ë*
«me_li°
);

2084 
__owur
 
STACK_OF
(
X509_NAME
Ë*
SSL_gë_˛õ¡_CA_li°
(c⁄° 
SSL
 *
s
);

2085 
__owur
 
STACK_OF
(
X509_NAME
Ë*
SSL_CTX_gë_˛õ¡_CA_li°
(c⁄° 
SSL_CTX
 *
s
);

2086 
__owur
 
SSL_add_˛õ¡_CA
(
SSL
 *
s¶
, 
X509
 *
x
);

2087 
__owur
 
SSL_CTX_add_˛õ¡_CA
(
SSL_CTX
 *
˘x
, 
X509
 *
x
);

2089 
SSL_£t_c⁄√˘_°©e
(
SSL
 *
s
);

2090 
SSL_£t_ac˚±_°©e
(
SSL
 *
s
);

2092 
__owur
 
SSL_gë_deÁu…_timeout
(c⁄° 
SSL
 *
s
);

2094 #i‚de‡
OPENSSL_NO_DEPRECATED_1_1_0


2095 
	#SSL_libøry_öô
(Ë
	`OPENSSL_öô_s¶
(0, 
NULL
)

	)

2098 
__owur
 *
SSL_CIPHER_des¸ùti⁄
(c⁄° 
SSL_CIPHER
 *, *
buf
, 
size
);

2099 
__owur
 
STACK_OF
(
X509_NAME
Ë*
SSL_dup_CA_li°
(c⁄° STACK_OF(X509_NAMEË*
sk
);

2101 
__owur
 
SSL
 *
SSL_dup
(SSL *
s¶
);

2103 
__owur
 
X509
 *
SSL_gë_˚πifiˇã
(c⁄° 
SSL
 *
s¶
);

2107 
evp_pkey_°
 *
SSL_gë_¥iv©ekey
(c⁄° 
SSL
 *
s¶
);

2109 
__owur
 
X509
 *
SSL_CTX_gë0_˚πifiˇã
(c⁄° 
SSL_CTX
 *
˘x
);

2110 
__owur
 
EVP_PKEY
 *
SSL_CTX_gë0_¥iv©ekey
(c⁄° 
SSL_CTX
 *
˘x
);

2112 
SSL_CTX_£t_quõt_shutdown
(
SSL_CTX
 *
˘x
, 
mode
);

2113 
__owur
 
SSL_CTX_gë_quõt_shutdown
(c⁄° 
SSL_CTX
 *
˘x
);

2114 
SSL_£t_quõt_shutdown
(
SSL
 *
s¶
, 
mode
);

2115 
__owur
 
SSL_gë_quõt_shutdown
(c⁄° 
SSL
 *
s¶
);

2116 
SSL_£t_shutdown
(
SSL
 *
s¶
, 
mode
);

2117 
__owur
 
SSL_gë_shutdown
(c⁄° 
SSL
 *
s¶
);

2118 
__owur
 
SSL_vîsi⁄
(c⁄° 
SSL
 *
s¶
);

2119 
__owur
 
SSL_˛õ¡_vîsi⁄
(c⁄° 
SSL
 *
s
);

2120 
__owur
 
SSL_CTX_£t_deÁu…_vîify_∑ths
(
SSL_CTX
 *
˘x
);

2121 
__owur
 
SSL_CTX_£t_deÁu…_vîify_dú
(
SSL_CTX
 *
˘x
);

2122 
__owur
 
SSL_CTX_£t_deÁu…_vîify_fûe
(
SSL_CTX
 *
˘x
);

2123 
__owur
 
SSL_CTX_£t_deÁu…_vîify_°‹e
(
SSL_CTX
 *
˘x
);

2124 
__owur
 
SSL_CTX_lﬂd_vîify_fûe
(
SSL_CTX
 *
˘x
, c⁄° *
CAfûe
);

2125 
__owur
 
SSL_CTX_lﬂd_vîify_dú
(
SSL_CTX
 *
˘x
, c⁄° *
CA∑th
);

2126 
__owur
 
SSL_CTX_lﬂd_vîify_°‹e
(
SSL_CTX
 *
˘x
, c⁄° *
CA°‹e
);

2127 
__owur
 
SSL_CTX_lﬂd_vîify_loˇti⁄s
(
SSL_CTX
 *
˘x
,

2128 c⁄° *
CAfûe
,

2129 c⁄° *
CA∑th
);

2130 
	#SSL_gë0_£ssi⁄
 
SSL_gë_£ssi⁄


	)

2131 
__owur
 
SSL_SESSION
 *
SSL_gë_£ssi⁄
(c⁄° 
SSL
 *
s¶
);

2132 
__owur
 
SSL_SESSION
 *
SSL_gë1_£ssi⁄
(
SSL
 *
s¶
);

2133 
__owur
 
SSL_CTX
 *
SSL_gë_SSL_CTX
(c⁄° 
SSL
 *
s¶
);

2134 
SSL_CTX
 *
SSL_£t_SSL_CTX
(
SSL
 *
s¶
, SSL_CTX *
˘x
);

2135 
SSL_£t_öfo_ˇŒback
(
SSL
 *
s¶
,

2136 (*
cb
Ë(c⁄° 
SSL
 *
s¶
, 
ty≥
, 
vÆ
));

2137 (*
SSL_gë_öfo_ˇŒback
(c⁄° 
SSL
 *
s¶
)Ë(c⁄° SSL *s¶, 
ty≥
,

2138 
vÆ
);

2139 
__owur
 
OSSL_HANDSHAKE_STATE
 
SSL_gë_°©e
(c⁄° 
SSL
 *
s¶
);

2141 
SSL_£t_vîify_ªsu…
(
SSL
 *
s¶
, 
v
);

2142 
__owur
 
SSL_gë_vîify_ªsu…
(c⁄° 
SSL
 *
s¶
);

2143 
__owur
 
STACK_OF
(
X509
Ë*
SSL_gë0_vîifõd_chaö
(c⁄° 
SSL
 *
s
);

2145 
__owur
 
size_t
 
SSL_gë_˛õ¡_øndom
(c⁄° 
SSL
 *
s¶
, *
out
,

2146 
size_t
 
ouéí
);

2147 
__owur
 
size_t
 
SSL_gë_£rvî_øndom
(c⁄° 
SSL
 *
s¶
, *
out
,

2148 
size_t
 
ouéí
);

2149 
__owur
 
size_t
 
SSL_SESSION_gë_ma°î_key
(c⁄° 
SSL_SESSION
 *
£ss
,

2150 *
out
, 
size_t
 
ouéí
);

2151 
__owur
 
SSL_SESSION_£t1_ma°î_key
(
SSL_SESSION
 *
£ss
,

2152 c⁄° *
ö
, 
size_t
 
Àn
);

2153 
uöt8_t
 
SSL_SESSION_gë_max_‰agmít_Àngth
(c⁄° 
SSL_SESSION
 *
£ss
);

2155 
	#SSL_gë_ex_√w_ödex
(
l
, 
p
, 
√wf
, 
dupf
, 
‰ìf
) \

2156 
	`CRYPTO_gë_ex_√w_ödex
(
CRYPTO_EX_INDEX_SSL
, 
l
, 
p
, 
√wf
, 
dupf
, 
‰ìf
)

	)

2157 
__owur
 
SSL_£t_ex_d©a
(
SSL
 *
s¶
, 
idx
, *
d©a
);

2158 *
SSL_gë_ex_d©a
(c⁄° 
SSL
 *
s¶
, 
idx
);

2159 
	#SSL_SESSION_gë_ex_√w_ödex
(
l
, 
p
, 
√wf
, 
dupf
, 
‰ìf
) \

2160 
	`CRYPTO_gë_ex_√w_ödex
(
CRYPTO_EX_INDEX_SSL_SESSION
, 
l
, 
p
, 
√wf
, 
dupf
, 
‰ìf
)

	)

2161 
__owur
 
SSL_SESSION_£t_ex_d©a
(
SSL_SESSION
 *
ss
, 
idx
, *
d©a
);

2162 *
SSL_SESSION_gë_ex_d©a
(c⁄° 
SSL_SESSION
 *
ss
, 
idx
);

2163 
	#SSL_CTX_gë_ex_√w_ödex
(
l
, 
p
, 
√wf
, 
dupf
, 
‰ìf
) \

2164 
	`CRYPTO_gë_ex_√w_ödex
(
CRYPTO_EX_INDEX_SSL_CTX
, 
l
, 
p
, 
√wf
, 
dupf
, 
‰ìf
)

	)

2165 
__owur
 
SSL_CTX_£t_ex_d©a
(
SSL_CTX
 *
s¶
, 
idx
, *
d©a
);

2166 *
SSL_CTX_gë_ex_d©a
(c⁄° 
SSL_CTX
 *
s¶
, 
idx
);

2168 
__owur
 
SSL_gë_ex_d©a_X509_STORE_CTX_idx
();

2170 
	#SSL_CTX_£ss_£t_ˇche_size
(
˘x
,
t
) \

2171 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_SESS_CACHE_SIZE
,
t
,
NULL
)

	)

2172 
	#SSL_CTX_£ss_gë_ˇche_size
(
˘x
) \

2173 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_GET_SESS_CACHE_SIZE
,0,
NULL
)

	)

2174 
	#SSL_CTX_£t_£ssi⁄_ˇche_mode
(
˘x
,
m
) \

2175 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_SESS_CACHE_MODE
,
m
,
NULL
)

	)

2176 
	#SSL_CTX_gë_£ssi⁄_ˇche_mode
(
˘x
) \

2177 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_GET_SESS_CACHE_MODE
,0,
NULL
)

	)

2179 
	#SSL_CTX_gë_deÁu…_ªad_ahód
(
˘x
Ë
	`SSL_CTX_gë_ªad_ahód
(˘x)

	)

2180 
	#SSL_CTX_£t_deÁu…_ªad_ahód
(
˘x
,
m
Ë
	`SSL_CTX_£t_ªad_ahód
(˘x,m)

	)

2181 
	#SSL_CTX_gë_ªad_ahód
(
˘x
) \

2182 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_GET_READ_AHEAD
,0,
NULL
)

	)

2183 
	#SSL_CTX_£t_ªad_ahód
(
˘x
,
m
) \

2184 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_READ_AHEAD
,
m
,
NULL
)

	)

2185 
	#SSL_CTX_gë_max_˚π_li°
(
˘x
) \

2186 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_GET_MAX_CERT_LIST
,0,
NULL
)

	)

2187 
	#SSL_CTX_£t_max_˚π_li°
(
˘x
,
m
) \

2188 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_MAX_CERT_LIST
,
m
,
NULL
)

	)

2189 
	#SSL_gë_max_˚π_li°
(
s¶
) \

2190 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_GET_MAX_CERT_LIST
,0,
NULL
)

	)

2191 
	#SSL_£t_max_˚π_li°
(
s¶
,
m
) \

2192 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_MAX_CERT_LIST
,
m
,
NULL
)

	)

2194 
	#SSL_CTX_£t_max_£nd_‰agmít
(
˘x
,
m
) \

2195 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_MAX_SEND_FRAGMENT
,
m
,
NULL
)

	)

2196 
	#SSL_£t_max_£nd_‰agmít
(
s¶
,
m
) \

2197 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_MAX_SEND_FRAGMENT
,
m
,
NULL
)

	)

2198 
	#SSL_CTX_£t_•lô_£nd_‰agmít
(
˘x
,
m
) \

2199 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_SPLIT_SEND_FRAGMENT
,
m
,
NULL
)

	)

2200 
	#SSL_£t_•lô_£nd_‰agmít
(
s¶
,
m
) \

2201 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_SPLIT_SEND_FRAGMENT
,
m
,
NULL
)

	)

2202 
	#SSL_CTX_£t_max_pùñöes
(
˘x
,
m
) \

2203 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_MAX_PIPELINES
,
m
,
NULL
)

	)

2204 
	#SSL_£t_max_pùñöes
(
s¶
,
m
) \

2205 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_MAX_PIPELINES
,
m
,
NULL
)

	)

2206 
	#SSL_£t_ªåy_vîify
(
s¶
) \

2207 (
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_RETRY_VERIFY
,0,
NULL
Ë> 0)

	)

2209 
SSL_CTX_£t_deÁu…_ªad_buf„r_Àn
(
SSL_CTX
 *
˘x
, 
size_t
 
Àn
);

2210 
SSL_£t_deÁu…_ªad_buf„r_Àn
(
SSL
 *
s
, 
size_t
 
Àn
);

2212 #i‚de‡
OPENSSL_NO_DH


2213 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


2215 
OSSL_DEPRECATEDIN_3_0


2216 
SSL_CTX_£t_tmp_dh_ˇŒback
(
SSL_CTX
 *
˘x
,

2217 
DH
 *(*
dh
Ë(
SSL
 *
s¶
, 
is_exp‹t
,

2218 
keyÀngth
));

2219 
OSSL_DEPRECATEDIN_3_0


2220 
SSL_£t_tmp_dh_ˇŒback
(
SSL
 *
s¶
,

2221 
DH
 *(*
dh
Ë(
SSL
 *
s¶
, 
is_exp‹t
,

2222 
keyÀngth
));

2226 
__owur
 c⁄° 
COMP_METHOD
 *
SSL_gë_cuºít_com¥essi⁄
(c⁄° 
SSL
 *
s
);

2227 
__owur
 c⁄° 
COMP_METHOD
 *
SSL_gë_cuºít_ex∑nsi⁄
(c⁄° 
SSL
 *
s
);

2228 
__owur
 c⁄° *
SSL_COMP_gë_«me
(c⁄° 
COMP_METHOD
 *
comp
);

2229 
__owur
 c⁄° *
SSL_COMP_gë0_«me
(c⁄° 
SSL_COMP
 *
comp
);

2230 
__owur
 
SSL_COMP_gë_id
(c⁄° 
SSL_COMP
 *
comp
);

2231 
STACK_OF
(
SSL_COMP
Ë*
SSL_COMP_gë_com¥essi⁄_mëhods
();

2232 
__owur
 
STACK_OF
(
SSL_COMP
Ë*
SSL_COMP_£t0_com¥essi⁄_mëhods
(STACK_OF(SSL_COMP)

2233 *
mëhs
);

2234 #i‚de‡
OPENSSL_NO_DEPRECATED_1_1_0


2235 
	#SSL_COMP_‰ì_com¥essi⁄_mëhods
(Ë0Ë

	)

2237 
__owur
 
SSL_COMP_add_com¥essi⁄_mëhod
(
id
, 
COMP_METHOD
 *
cm
);

2239 c⁄° 
SSL_CIPHER
 *
SSL_CIPHER_föd
(
SSL
 *
s¶
, c⁄° *
±r
);

2240 
SSL_CIPHER_gë_cùhî_nid
(c⁄° 
SSL_CIPHER
 *
c
);

2241 
SSL_CIPHER_gë_dige°_nid
(c⁄° 
SSL_CIPHER
 *
c
);

2242 
SSL_byãs_to_cùhî_li°
(
SSL
 *
s
, c⁄° *
byãs
, 
size_t
 
Àn
,

2243 
isv2f‹m©
, 
STACK_OF
(
SSL_CIPHER
Ë**
sk
,

2244 
STACK_OF
(
SSL_CIPHER
Ë**
scsvs
);

2247 
__owur
 
SSL_£t_£ssi⁄_tickë_ext
(
SSL
 *
s
, *
ext_d©a
, 
ext_Àn
);

2249 
__owur
 
SSL_£t_£ssi⁄_tickë_ext_cb
(
SSL
 *
s
,

2250 
és_£ssi⁄_tickë_ext_cb_‚
 
cb
,

2251 *
¨g
);

2254 
__owur
 
SSL_£t_£ssi⁄_£¸ë_cb
(
SSL
 *
s
,

2255 
és_£ssi⁄_£¸ë_cb_‚
 
£ssi⁄_£¸ë_cb
,

2256 *
¨g
);

2258 
SSL_CTX_£t_nŸ_ªsumabÀ_£ssi⁄_ˇŒback
(
SSL_CTX
 *
˘x
,

2259 (*
cb
Ë(
SSL
 *
s¶
,

2261 
is_f‹w¨d_£cuª
));

2263 
SSL_£t_nŸ_ªsumabÀ_£ssi⁄_ˇŒback
(
SSL
 *
s¶
,

2264 (*
cb
Ë(
SSL
 *
s¶
,

2265 
is_f‹w¨d_£cuª
));

2267 
SSL_CTX_£t_ªc‹d_∑ddög_ˇŒback
(
SSL_CTX
 *
˘x
,

2268 
size_t
 (*
cb
Ë(
SSL
 *
s¶
, 
ty≥
,

2269 
size_t
 
Àn
, *
¨g
));

2270 
SSL_CTX_£t_ªc‹d_∑ddög_ˇŒback_¨g
(
SSL_CTX
 *
˘x
, *
¨g
);

2271 *
SSL_CTX_gë_ªc‹d_∑ddög_ˇŒback_¨g
(c⁄° 
SSL_CTX
 *
˘x
);

2272 
SSL_CTX_£t_block_∑ddög
(
SSL_CTX
 *
˘x
, 
size_t
 
block_size
);

2274 
SSL_£t_ªc‹d_∑ddög_ˇŒback
(
SSL
 *
s¶
,

2275 
size_t
 (*
cb
Ë(
SSL
 *
s¶
, 
ty≥
,

2276 
size_t
 
Àn
, *
¨g
));

2277 
SSL_£t_ªc‹d_∑ddög_ˇŒback_¨g
(
SSL
 *
s¶
, *
¨g
);

2278 *
SSL_gë_ªc‹d_∑ddög_ˇŒback_¨g
(c⁄° 
SSL
 *
s¶
);

2279 
SSL_£t_block_∑ddög
(
SSL
 *
s¶
, 
size_t
 
block_size
);

2281 
SSL_£t_num_tickës
(
SSL
 *
s
, 
size_t
 
num_tickës
);

2282 
size_t
 
SSL_gë_num_tickës
(c⁄° 
SSL
 *
s
);

2283 
SSL_CTX_£t_num_tickës
(
SSL_CTX
 *
˘x
, 
size_t
 
num_tickës
);

2284 
size_t
 
SSL_CTX_gë_num_tickës
(c⁄° 
SSL_CTX
 *
˘x
);

2286 #i‚de‡
OPENSSL_NO_DEPRECATED_1_1_0


2287 
	#SSL_ˇche_hô
(
s
Ë
	`SSL_£ssi⁄_ªu£d
(s)

	)

2290 
__owur
 
SSL_£ssi⁄_ªu£d
(c⁄° 
SSL
 *
s
);

2291 
__owur
 
SSL_is_£rvî
(c⁄° 
SSL
 *
s
);

2293 
__owur
 __owu∏
SSL_CONF_CTX
 *
SSL_CONF_CTX_√w
();

2294 
SSL_CONF_CTX_föish
(
SSL_CONF_CTX
 *
c˘x
);

2295 
SSL_CONF_CTX_‰ì
(
SSL_CONF_CTX
 *
c˘x
);

2296 
SSL_CONF_CTX_£t_Êags
(
SSL_CONF_CTX
 *
c˘x
, 
Êags
);

2297 
__owur
 
SSL_CONF_CTX_˛ór_Êags
(
SSL_CONF_CTX
 *
c˘x
,

2298 
Êags
);

2299 
__owur
 
SSL_CONF_CTX_£t1_¥efix
(
SSL_CONF_CTX
 *
c˘x
, c⁄° *
¥e
);

2301 
SSL_CONF_CTX_£t_s¶
(
SSL_CONF_CTX
 *
c˘x
, 
SSL
 *
s¶
);

2302 
SSL_CONF_CTX_£t_s¶_˘x
(
SSL_CONF_CTX
 *
c˘x
, 
SSL_CTX
 *
˘x
);

2304 
__owur
 
SSL_CONF_cmd
(
SSL_CONF_CTX
 *
c˘x
, c⁄° *
cmd
, c⁄° *
vÆue
);

2305 
__owur
 
SSL_CONF_cmd_¨gv
(
SSL_CONF_CTX
 *
c˘x
, *
∑rgc
, ***
∑rgv
);

2306 
__owur
 
SSL_CONF_cmd_vÆue_ty≥
(
SSL_CONF_CTX
 *
c˘x
, c⁄° *
cmd
);

2308 
SSL_add_s¶_moduÀ
();

2309 
SSL_c⁄fig
(
SSL
 *
s
, c⁄° *
«me
);

2310 
SSL_CTX_c⁄fig
(
SSL_CTX
 *
˘x
, c⁄° *
«me
);

2312 #i‚de‡
OPENSSL_NO_SSL_TRACE


2313 
SSL_åa˚
(
wrôe_p
, 
vîsi⁄
, 
c⁄ã¡_ty≥
,

2314 c⁄° *
buf
, 
size_t
 
Àn
, 
SSL
 *
s¶
, *
¨g
);

2317 #i‚de‡
OPENSSL_NO_SOCK


2318 
DTLSv1_li°í
(
SSL
 *
s
, 
BIO_ADDR
 *
˛õ¡
);

2321 #i‚de‡
OPENSSL_NO_CT


2329 (*
s¶_˘_vÆid©i⁄_cb
)(c⁄° 
	tCT_POLICY_EVAL_CTX
 *
	t˘x
,

2330 c⁄° 
	tSTACK_OF
(
	tSCT
Ë*
	ts˘s
, *
	t¨g
);

2344 
SSL_£t_˘_vÆid©i⁄_ˇŒback
(
SSL
 *
s
, 
s¶_˘_vÆid©i⁄_cb
 
ˇŒback
,

2345 *
¨g
);

2346 
SSL_CTX_£t_˘_vÆid©i⁄_ˇŒback
(
SSL_CTX
 *
˘x
,

2347 
s¶_˘_vÆid©i⁄_cb
 
ˇŒback
,

2348 *
¨g
);

2349 
	#SSL_dißbÀ_˘
(
s
) \

2350 ((Ë
	`SSL_£t_vÆid©i⁄_ˇŒback
((
s
), 
NULL
, NULL))

	)

2351 
	#SSL_CTX_dißbÀ_˘
(
˘x
) \

2352 ((Ë
	`SSL_CTX_£t_vÆid©i⁄_ˇŒback
((
˘x
), 
NULL
, NULL))

	)

2360 
SSL_CT_VALIDATION_PERMISSIVE
 = 0,

2361 
SSL_CT_VALIDATION_STRICT


2372 
SSL_íabÀ_˘
(
SSL
 *
s
, 
vÆid©i⁄_mode
);

2373 
SSL_CTX_íabÀ_˘
(
SSL_CTX
 *
˘x
, 
vÆid©i⁄_mode
);

2378 
SSL_˘_is_íabÀd
(c⁄° 
SSL
 *
s
);

2379 
SSL_CTX_˘_is_íabÀd
(c⁄° 
SSL_CTX
 *
˘x
);

2382 c⁄° 
STACK_OF
(
SCT
Ë*
SSL_gë0_≥î_s˘s
(
SSL
 *
s
);

2391 
SSL_CTX_£t_deÁu…_˘log_li°_fûe
(
SSL_CTX
 *
˘x
);

2400 
SSL_CTX_£t_˘log_li°_fûe
(
SSL_CTX
 *
˘x
, c⁄° *
∑th
);

2406 
SSL_CTX_£t0_˘log_°‹e
(
SSL_CTX
 *
˘x
, 
CTLOG_STORE
 *
logs
);

2415 c⁄° 
CTLOG_STORE
 *
SSL_CTX_gë0_˘log_°‹e
(c⁄° 
SSL_CTX
 *
˘x
);

2421 
	#SSL_SECOP_OTHER_TYPE
 0xffff0000

	)

2422 
	#SSL_SECOP_OTHER_NONE
 0

	)

2423 
	#SSL_SECOP_OTHER_CIPHER
 (1 << 16)

	)

2424 
	#SSL_SECOP_OTHER_CURVE
 (2 << 16)

	)

2425 
	#SSL_SECOP_OTHER_DH
 (3 << 16)

	)

2426 
	#SSL_SECOP_OTHER_PKEY
 (4 << 16)

	)

2427 
	#SSL_SECOP_OTHER_SIGALG
 (5 << 16)

	)

2428 
	#SSL_SECOP_OTHER_CERT
 (6 << 16)

	)

2431 
	#SSL_SECOP_PEER
 0x1000

	)

2437 
	#SSL_SECOP_CIPHER_SUPPORTED
 (1 | 
SSL_SECOP_OTHER_CIPHER
)

	)

2439 
	#SSL_SECOP_CIPHER_SHARED
 (2 | 
SSL_SECOP_OTHER_CIPHER
)

	)

2441 
	#SSL_SECOP_CIPHER_CHECK
 (3 | 
SSL_SECOP_OTHER_CIPHER
)

	)

2443 
	#SSL_SECOP_CURVE_SUPPORTED
 (4 | 
SSL_SECOP_OTHER_CURVE
)

	)

2445 
	#SSL_SECOP_CURVE_SHARED
 (5 | 
SSL_SECOP_OTHER_CURVE
)

	)

2447 
	#SSL_SECOP_CURVE_CHECK
 (6 | 
SSL_SECOP_OTHER_CURVE
)

	)

2449 
	#SSL_SECOP_TMP_DH
 (7 | 
SSL_SECOP_OTHER_PKEY
)

	)

2451 
	#SSL_SECOP_VERSION
 (9 | 
SSL_SECOP_OTHER_NONE
)

	)

2453 
	#SSL_SECOP_TICKET
 (10 | 
SSL_SECOP_OTHER_NONE
)

	)

2455 
	#SSL_SECOP_SIGALG_SUPPORTED
 (11 | 
SSL_SECOP_OTHER_SIGALG
)

	)

2457 
	#SSL_SECOP_SIGALG_SHARED
 (12 | 
SSL_SECOP_OTHER_SIGALG
)

	)

2459 
	#SSL_SECOP_SIGALG_CHECK
 (13 | 
SSL_SECOP_OTHER_SIGALG
)

	)

2461 
	#SSL_SECOP_SIGALG_MASK
 (14 | 
SSL_SECOP_OTHER_SIGALG
)

	)

2463 
	#SSL_SECOP_COMPRESSION
 (15 | 
SSL_SECOP_OTHER_NONE
)

	)

2465 
	#SSL_SECOP_EE_KEY
 (16 | 
SSL_SECOP_OTHER_CERT
)

	)

2467 
	#SSL_SECOP_CA_KEY
 (17 | 
SSL_SECOP_OTHER_CERT
)

	)

2469 
	#SSL_SECOP_CA_MD
 (18 | 
SSL_SECOP_OTHER_CERT
)

	)

2471 
	#SSL_SECOP_PEER_EE_KEY
 (
SSL_SECOP_EE_KEY
 | 
SSL_SECOP_PEER
)

	)

2473 
	#SSL_SECOP_PEER_CA_KEY
 (
SSL_SECOP_CA_KEY
 | 
SSL_SECOP_PEER
)

	)

2475 
	#SSL_SECOP_PEER_CA_MD
 (
SSL_SECOP_CA_MD
 | 
SSL_SECOP_PEER
)

	)

2477 
SSL_£t_£curôy_Àvñ
(
SSL
 *
s
, 
Àvñ
);

2478 
__owur
 
SSL_gë_£curôy_Àvñ
(c⁄° 
SSL
 *
s
);

2479 
SSL_£t_£curôy_ˇŒback
(
SSL
 *
s
,

2480 (*
cb
Ë(c⁄° 
SSL
 *
s
, c⁄° 
SSL_CTX
 *
˘x
,

2481 
›
, 
bôs
, 
nid
,

2482 *
Ÿhî
, *
ex
));

2483 (*
SSL_gë_£curôy_ˇŒback
(c⁄° 
SSL
 *
s
)) (const SSL *s,

2484 c⁄° 
SSL_CTX
 *
˘x
, 
›
,

2485 
bôs
, 
nid
, *
Ÿhî
,

2486 *
ex
);

2487 
SSL_£t0_£curôy_ex_d©a
(
SSL
 *
s
, *
ex
);

2488 
__owur
 *
SSL_gë0_£curôy_ex_d©a
(c⁄° 
SSL
 *
s
);

2490 
SSL_CTX_£t_£curôy_Àvñ
(
SSL_CTX
 *
˘x
, 
Àvñ
);

2491 
__owur
 
SSL_CTX_gë_£curôy_Àvñ
(c⁄° 
SSL_CTX
 *
˘x
);

2492 
SSL_CTX_£t_£curôy_ˇŒback
(
SSL_CTX
 *
˘x
,

2493 (*
cb
Ë(c⁄° 
SSL
 *
s
, c⁄° 
SSL_CTX
 *
˘x
,

2494 
›
, 
bôs
, 
nid
,

2495 *
Ÿhî
, *
ex
));

2496 (*
SSL_CTX_gë_£curôy_ˇŒback
(c⁄° 
SSL_CTX
 *
˘x
)Ë(c⁄° 
SSL
 *
s
,

2497 c⁄° 
SSL_CTX
 *
˘x
,

2498 
›
, 
bôs
,

2499 
nid
,

2500 *
Ÿhî
,

2501 *
ex
);

2502 
SSL_CTX_£t0_£curôy_ex_d©a
(
SSL_CTX
 *
˘x
, *
ex
);

2503 
__owur
 *
SSL_CTX_gë0_£curôy_ex_d©a
(c⁄° 
SSL_CTX
 *
˘x
);

2506 
	#OPENSSL_INIT_NO_LOAD_SSL_STRINGS
 0x00100000L

	)

2507 
	#OPENSSL_INIT_LOAD_SSL_STRINGS
 0x00200000L

	)

2509 
	#OPENSSL_INIT_SSL_DEFAULT
 \

2510 (
OPENSSL_INIT_LOAD_SSL_STRINGS
 | 
OPENSSL_INIT_LOAD_CRYPTO_STRINGS
)

	)

2512 
OPENSSL_öô_s¶
(
uöt64_t
 
›ts
, c⁄° 
OPENSSL_INIT_SETTINGS
 *
£âögs
);

2514 #i‚de‡
OPENSSL_NO_UNIT_TEST


2515 
__owur
 c⁄° 
›ís¶_s¶_ã°_fun˘i⁄s
 *
SSL_ã°_fun˘i⁄s
();

2518 
__owur
 
SSL_‰ì_buf„rs
(
SSL
 *
s¶
);

2519 
__owur
 
SSL_Æloc_buf„rs
(
SSL
 *
s¶
);

2523 
	tSSL_TICKET_STATUS
;

2527 
	#SSL_TICKET_FATAL_ERR_MALLOC
 0

	)

2529 
	#SSL_TICKET_FATAL_ERR_OTHER
 1

	)

2531 
	#SSL_TICKET_NONE
 2

	)

2533 
	#SSL_TICKET_EMPTY
 3

	)

2535 
	#SSL_TICKET_NO_DECRYPT
 4

	)

2537 
	#SSL_TICKET_SUCCESS
 5

	)

2539 
	#SSL_TICKET_SUCCESS_RENEW
 6

	)

2542 
	tSSL_TICKET_RETURN
;

2545 
	#SSL_TICKET_RETURN_ABORT
 0

	)

2547 
	#SSL_TICKET_RETURN_IGNORE
 1

	)

2549 
	#SSL_TICKET_RETURN_IGNORE_RENEW
 2

	)

2551 
	#SSL_TICKET_RETURN_USE
 3

	)

2553 
	#SSL_TICKET_RETURN_USE_RENEW
 4

	)

2555 (*
SSL_CTX_gíî©e_£ssi⁄_tickë_‚
)(
	tSSL
 *
	ts
, *
	t¨g
);

2556 
SSL_TICKET_RETURN
 (*
	tSSL_CTX_de¸y±_£ssi⁄_tickë_‚
)(
	tSSL
 *
	ts
, 
	tSSL_SESSION
 *
	tss
,

2557 c⁄° *
	tkey«me
,

2558 
	tsize_t
 
	tkey«me_Àngth
,

2559 
	tSSL_TICKET_STATUS
 
	t°©us
,

2560 *
	t¨g
);

2561 
SSL_CTX_£t_£ssi⁄_tickë_cb
(
SSL_CTX
 *
˘x
,

2562 
SSL_CTX_gíî©e_£ssi⁄_tickë_‚
 
gí_cb
,

2563 
SSL_CTX_de¸y±_£ssi⁄_tickë_‚
 
dec_cb
,

2564 *
¨g
);

2565 
SSL_SESSION_£t1_tickë_≠pd©a
(
SSL_SESSION
 *
ss
, c⁄° *
d©a
, 
size_t
 
Àn
);

2566 
SSL_SESSION_gë0_tickë_≠pd©a
(
SSL_SESSION
 *
ss
, **
d©a
, 
size_t
 *
Àn
);

2568 (*
	tDTLS_timî_cb
)(
	tSSL
 *
	ts
, 
	ttimî_us
);

2570 
DTLS_£t_timî_cb
(
SSL
 *
s
, 
DTLS_timî_cb
 
cb
);

2573 (*
SSL_Ælow_óæy_d©a_cb_‚
)(
	tSSL
 *
	ts
, *
	t¨g
);

2574 
SSL_CTX_£t_Ælow_óæy_d©a_cb
(
SSL_CTX
 *
˘x
,

2575 
SSL_Ælow_óæy_d©a_cb_‚
 
cb
,

2576 *
¨g
);

2577 
SSL_£t_Ælow_óæy_d©a_cb
(
SSL
 *
s
,

2578 
SSL_Ælow_óæy_d©a_cb_‚
 
cb
,

2579 *
¨g
);

2582 c⁄° *
OSSL_deÁu…_cùhî_li°
();

2583 c⁄° *
OSSL_deÁu…_cùhîsuôes
();

2585 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/tls1.h

12 #i‚de‡
OPENSSL_TLS1_H


13 
	#OPENSSL_TLS1_H


	)

14 #¥agm®
⁄˚


16 
	~<›ís¶/ma¸os.h
>

17 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


18 
	#HEADER_TLS1_H


	)

21 
	~<›ís¶/buf„r.h
>

22 
	~<›ís¶/x509.h
>

23 
	~<›ís¶/¥ov_s¶.h
>

25 #ifde‡ 
__˝lu•lus


30 #i‚de‡
OPENSSL_TLS_SECURITY_LEVEL


31 
	#OPENSSL_TLS_SECURITY_LEVEL
 1

	)

35 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


36 
	#TLS_MAX_VERSION
 
TLS1_3_VERSION


	)

40 
	#TLS_ANY_VERSION
 0x10000

	)

42 
	#TLS1_VERSION_MAJOR
 0x03

	)

43 
	#TLS1_VERSION_MINOR
 0x01

	)

45 
	#TLS1_1_VERSION_MAJOR
 0x03

	)

46 
	#TLS1_1_VERSION_MINOR
 0x02

	)

48 
	#TLS1_2_VERSION_MAJOR
 0x03

	)

49 
	#TLS1_2_VERSION_MINOR
 0x03

	)

51 
	#TLS1_gë_vîsi⁄
(
s
) \

52 ((
	`SSL_vîsi⁄
(
s
Ë>> 8Ë=
TLS1_VERSION_MAJOR
 ? SSL_vîsi⁄(sË: 0)

	)

54 
	#TLS1_gë_˛õ¡_vîsi⁄
(
s
) \

55 ((
	`SSL_˛õ¡_vîsi⁄
(
s
Ë>> 8Ë=
TLS1_VERSION_MAJOR
 ? SSL_˛õ¡_vîsi⁄(sË: 0)

	)

57 
	#TLS1_AD_DECRYPTION_FAILED
 21

	)

58 
	#TLS1_AD_RECORD_OVERFLOW
 22

	)

59 
	#TLS1_AD_UNKNOWN_CA
 48

	)

60 
	#TLS1_AD_ACCESS_DENIED
 49

	)

61 
	#TLS1_AD_DECODE_ERROR
 50

	)

62 
	#TLS1_AD_DECRYPT_ERROR
 51

	)

63 
	#TLS1_AD_EXPORT_RESTRICTION
 60

	)

64 
	#TLS1_AD_PROTOCOL_VERSION
 70

	)

65 
	#TLS1_AD_INSUFFICIENT_SECURITY
 71

	)

66 
	#TLS1_AD_INTERNAL_ERROR
 80

	)

67 
	#TLS1_AD_INAPPROPRIATE_FALLBACK
 86

	)

68 
	#TLS1_AD_USER_CANCELLED
 90

	)

69 
	#TLS1_AD_NO_RENEGOTIATION
 100

	)

71 
	#TLS13_AD_MISSING_EXTENSION
 109

	)

72 
	#TLS13_AD_CERTIFICATE_REQUIRED
 116

	)

74 
	#TLS1_AD_UNSUPPORTED_EXTENSION
 110

	)

75 
	#TLS1_AD_CERTIFICATE_UNOBTAINABLE
 111

	)

76 
	#TLS1_AD_UNRECOGNIZED_NAME
 112

	)

77 
	#TLS1_AD_BAD_CERTIFICATE_STATUS_RESPONSE
 113

	)

78 
	#TLS1_AD_BAD_CERTIFICATE_HASH_VALUE
 114

	)

79 
	#TLS1_AD_UNKNOWN_PSK_IDENTITY
 115

	)

80 
	#TLS1_AD_NO_APPLICATION_PROTOCOL
 120

	)

83 
	#TLSEXT_TYPE_£rvî_«me
 0

	)

84 
	#TLSEXT_TYPE_max_‰agmít_Àngth
 1

	)

85 
	#TLSEXT_TYPE_˛õ¡_˚πifiˇã_uæ
 2

	)

86 
	#TLSEXT_TYPE_åu°ed_ˇ_keys
 3

	)

87 
	#TLSEXT_TYPE_åunˇãd_hmac
 4

	)

88 
	#TLSEXT_TYPE_°©us_ªque°
 5

	)

90 
	#TLSEXT_TYPE_u£r_m≠pög
 6

	)

92 
	#TLSEXT_TYPE_˛õ¡_authz
 7

	)

93 
	#TLSEXT_TYPE_£rvî_authz
 8

	)

95 
	#TLSEXT_TYPE_˚π_ty≥
 9

	)

102 
	#TLSEXT_TYPE_suµ‹ãd_groups
 10

	)

103 
	#TLSEXT_TYPE_ñlùtic_curves
 
TLSEXT_TYPE_suµ‹ãd_groups


	)

104 
	#TLSEXT_TYPE_ec_poöt_f‹m©s
 11

	)

108 
	#TLSEXT_TYPE_§p
 12

	)

111 
	#TLSEXT_TYPE_sig«tuª_Æg‹ôhms
 13

	)

114 
	#TLSEXT_TYPE_u£_§ç
 14

	)

117 
	#TLSEXT_TYPE_≠∂iˇti⁄_œyî_¥Ÿocﬁ_√gŸüti⁄
 16

	)

123 
	#TLSEXT_TYPE_sig√d_˚πifiˇã_time°amp
 18

	)

129 
	#TLSEXT_TYPE_∑ddög
 21

	)

132 
	#TLSEXT_TYPE_í¸y±_thí_mac
 22

	)

135 
	#TLSEXT_TYPE_exãnded_ma°î_£¸ë
 23

	)

138 
	#TLSEXT_TYPE_£ssi⁄_tickë
 35

	)

141 
	#TLSEXT_TYPE_psk
 41

	)

142 
	#TLSEXT_TYPE_óæy_d©a
 42

	)

143 
	#TLSEXT_TYPE_suµ‹ãd_vîsi⁄s
 43

	)

144 
	#TLSEXT_TYPE_cookõ
 44

	)

145 
	#TLSEXT_TYPE_psk_kex_modes
 45

	)

146 
	#TLSEXT_TYPE_˚πifiˇã_auth‹ôõs
 47

	)

147 
	#TLSEXT_TYPE_po°_h™dshake_auth
 49

	)

148 
	#TLSEXT_TYPE_sig«tuª_Æg‹ôhms_˚π
 50

	)

149 
	#TLSEXT_TYPE_key_sh¨e
 51

	)

152 
	#TLSEXT_TYPE_ª√gŸüã
 0xff01

	)

154 #i‚de‡
OPENSSL_NO_NEXTPROTONEG


156 
	#TLSEXT_TYPE_√xt_¥Ÿo_√g
 13172

	)

160 
	#TLSEXT_NAMETYPE_ho°_«me
 0

	)

162 
	#TLSEXT_STATUSTYPE_oc•
 1

	)

165 
	#TLSEXT_ECPOINTFORMAT_fú°
 0

	)

166 
	#TLSEXT_ECPOINTFORMAT_uncom¥es£d
 0

	)

167 
	#TLSEXT_ECPOINTFORMAT_™siX962_com¥es£d_¥ime
 1

	)

168 
	#TLSEXT_ECPOINTFORMAT_™siX962_com¥es£d_ch¨2
 2

	)

169 
	#TLSEXT_ECPOINTFORMAT_œ°
 2

	)

172 
	#TLSEXT_sig«tuª_™⁄ymous
 0

	)

173 
	#TLSEXT_sig«tuª_rß
 1

	)

174 
	#TLSEXT_sig«tuª_dß
 2

	)

175 
	#TLSEXT_sig«tuª_ecdß
 3

	)

176 
	#TLSEXT_sig«tuª_go°r34102001
 237

	)

177 
	#TLSEXT_sig«tuª_go°r34102012_256
 238

	)

178 
	#TLSEXT_sig«tuª_go°r34102012_512
 239

	)

181 
	#TLSEXT_sig«tuª_num
 7

	)

183 
	#TLSEXT_hash_n⁄e
 0

	)

184 
	#TLSEXT_hash_md5
 1

	)

185 
	#TLSEXT_hash_sha1
 2

	)

186 
	#TLSEXT_hash_sha224
 3

	)

187 
	#TLSEXT_hash_sha256
 4

	)

188 
	#TLSEXT_hash_sha384
 5

	)

189 
	#TLSEXT_hash_sha512
 6

	)

190 
	#TLSEXT_hash_go°r3411
 237

	)

191 
	#TLSEXT_hash_go°r34112012_256
 238

	)

192 
	#TLSEXT_hash_go°r34112012_512
 239

	)

196 
	#TLSEXT_hash_num
 10

	)

199 
	#TLSEXT_nid_unknown
 0x1000000

	)

203 
	#TLSEXT_curve_P_256
 23

	)

204 
	#TLSEXT_curve_P_384
 24

	)

207 
	#TLSEXT_max_‰agmít_Àngth_DISABLED
 0

	)

209 
	#TLSEXT_max_‰agmít_Àngth_512
 1

	)

210 
	#TLSEXT_max_‰agmít_Àngth_1024
 2

	)

211 
	#TLSEXT_max_‰agmít_Àngth_2048
 3

	)

212 
	#TLSEXT_max_‰agmít_Àngth_4096
 4

	)

214 
SSL_CTX_£t_é£xt_max_‰agmít_Àngth
(
SSL_CTX
 *
˘x
, 
uöt8_t
 
mode
);

215 
SSL_£t_é£xt_max_‰agmít_Àngth
(
SSL
 *
s¶
, 
uöt8_t
 
mode
);

217 
	#TLSEXT_MAXLEN_ho°_«me
 255

	)

219 
__owur
 c⁄° *
SSL_gë_£rvî«me
(c⁄° 
SSL
 *
s
, c⁄° 
ty≥
);

220 
__owur
 
SSL_gë_£rvî«me_ty≥
(c⁄° 
SSL
 *
s
);

228 
__owur
 
SSL_exp‹t_keyög_m©îül
(
SSL
 *
s
, *
out
, 
size_t
 
ﬁí
,

229 c⁄° *
œbñ
, 
size_t
 
Œí
,

230 c⁄° *
c⁄ãxt
,

231 
size_t
 
c⁄ãxéí
, 
u£_c⁄ãxt
);

240 
__owur
 
SSL_exp‹t_keyög_m©îül_óæy
(
SSL
 *
s
, *
out
,

241 
size_t
 
ﬁí
, c⁄° *
œbñ
,

242 
size_t
 
Œí
,

243 c⁄° *
c⁄ãxt
,

244 
size_t
 
c⁄ãxéí
);

246 
SSL_gë_≥î_sig«tuª_ty≥_nid
(c⁄° 
SSL
 *
s
, *
≤id
);

247 
SSL_gë_sig«tuª_ty≥_nid
(c⁄° 
SSL
 *
s
, *
≤id
);

249 
SSL_gë_sigÆgs
(
SSL
 *
s
, 
idx
,

250 *
psign
, *
phash
, *
psig«ndhash
,

251 *
rsig
, *
rhash
);

253 
SSL_gë_sh¨ed_sigÆgs
(
SSL
 *
s
, 
idx
,

254 *
psign
, *
phash
, *
psig«ndhash
,

255 *
rsig
, *
rhash
);

257 
__owur
 
SSL_check_chaö
(
SSL
 *
s
, 
X509
 *
x
, 
EVP_PKEY
 *
pk
, 
STACK_OF
(X509Ë*
chaö
);

259 
	#SSL_£t_é£xt_ho°_«me
(
s
,
«me
) \

260 
	`SSL_˘æ
(
s
,
SSL_CTRL_SET_TLSEXT_HOSTNAME
,
TLSEXT_NAMETYPE_ho°_«me
,\

261 (*)
«me
)

	)

263 
	#SSL_£t_é£xt_debug_ˇŒback
(
s¶
, 
cb
) \

264 
	`SSL_ˇŒback_˘æ
(
s¶
,
SSL_CTRL_SET_TLSEXT_DEBUG_CB
,\

265 ((*)())
cb
)

	)

267 
	#SSL_£t_é£xt_debug_¨g
(
s¶
, 
¨g
) \

268 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_TLSEXT_DEBUG_ARG
,0,
¨g
)

	)

270 
	#SSL_gë_é£xt_°©us_ty≥
(
s¶
) \

271 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_GET_TLSEXT_STATUS_REQ_TYPE
,0,
NULL
)

	)

273 
	#SSL_£t_é£xt_°©us_ty≥
(
s¶
, 
ty≥
) \

274 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_TLSEXT_STATUS_REQ_TYPE
,
ty≥
,
NULL
)

	)

276 
	#SSL_gë_é£xt_°©us_exts
(
s¶
, 
¨g
) \

277 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_GET_TLSEXT_STATUS_REQ_EXTS
,0,
¨g
)

	)

279 
	#SSL_£t_é£xt_°©us_exts
(
s¶
, 
¨g
) \

280 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_TLSEXT_STATUS_REQ_EXTS
,0,
¨g
)

	)

282 
	#SSL_gë_é£xt_°©us_ids
(
s¶
, 
¨g
) \

283 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_GET_TLSEXT_STATUS_REQ_IDS
,0,
¨g
)

	)

285 
	#SSL_£t_é£xt_°©us_ids
(
s¶
, 
¨g
) \

286 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_TLSEXT_STATUS_REQ_IDS
,0,
¨g
)

	)

288 
	#SSL_gë_é£xt_°©us_oc•_ª•
(
s¶
, 
¨g
) \

289 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_GET_TLSEXT_STATUS_REQ_OCSP_RESP
,0,
¨g
)

	)

291 
	#SSL_£t_é£xt_°©us_oc•_ª•
(
s¶
, 
¨g
, 
¨gÀn
) \

292 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_TLSEXT_STATUS_REQ_OCSP_RESP
,
¨gÀn
,
¨g
)

	)

294 
	#SSL_CTX_£t_é£xt_£rvî«me_ˇŒback
(
˘x
, 
cb
) \

295 
	`SSL_CTX_ˇŒback_˘æ
(
˘x
,
SSL_CTRL_SET_TLSEXT_SERVERNAME_CB
,\

296 ((*)())
cb
)

	)

298 
	#SSL_TLSEXT_ERR_OK
 0

	)

299 
	#SSL_TLSEXT_ERR_ALERT_WARNING
 1

	)

300 
	#SSL_TLSEXT_ERR_ALERT_FATAL
 2

	)

301 
	#SSL_TLSEXT_ERR_NOACK
 3

	)

303 
	#SSL_CTX_£t_é£xt_£rvî«me_¨g
(
˘x
, 
¨g
) \

304 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_TLSEXT_SERVERNAME_ARG
,0,
¨g
)

	)

306 
	#SSL_CTX_gë_é£xt_tickë_keys
(
˘x
, 
keys
, 
keyÀn
) \

307 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_GET_TLSEXT_TICKET_KEYS
,
keyÀn
,
keys
)

	)

308 
	#SSL_CTX_£t_é£xt_tickë_keys
(
˘x
, 
keys
, 
keyÀn
) \

309 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_TLSEXT_TICKET_KEYS
,
keyÀn
,
keys
)

	)

311 
	#SSL_CTX_gë_é£xt_°©us_cb
(
s¶
, 
cb
) \

312 
	`SSL_CTX_˘æ
(
s¶
,
SSL_CTRL_GET_TLSEXT_STATUS_REQ_CB
,0,(*)
cb
)

	)

313 
	#SSL_CTX_£t_é£xt_°©us_cb
(
s¶
, 
cb
) \

314 
	`SSL_CTX_ˇŒback_˘æ
(
s¶
,
SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB
,\

315 ((*)())
cb
)

	)

317 
	#SSL_CTX_gë_é£xt_°©us_¨g
(
s¶
, 
¨g
) \

318 
	`SSL_CTX_˘æ
(
s¶
,
SSL_CTRL_GET_TLSEXT_STATUS_REQ_CB_ARG
,0,
¨g
)

	)

319 
	#SSL_CTX_£t_é£xt_°©us_¨g
(
s¶
, 
¨g
) \

320 
	`SSL_CTX_˘æ
(
s¶
,
SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB_ARG
,0,
¨g
)

	)

322 
	#SSL_CTX_£t_é£xt_°©us_ty≥
(
s¶
, 
ty≥
) \

323 
	`SSL_CTX_˘æ
(
s¶
,
SSL_CTRL_SET_TLSEXT_STATUS_REQ_TYPE
,
ty≥
,
NULL
)

	)

325 
	#SSL_CTX_gë_é£xt_°©us_ty≥
(
s¶
) \

326 
	`SSL_CTX_˘æ
(
s¶
,
SSL_CTRL_GET_TLSEXT_STATUS_REQ_TYPE
,0,
NULL
)

	)

328 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


329 
	#SSL_CTX_£t_é£xt_tickë_key_cb
(
s¶
, 
cb
) \

330 
	`SSL_CTX_ˇŒback_˘æ
(
s¶
,
SSL_CTRL_SET_TLSEXT_TICKET_KEY_CB
,\

331 ((*)())
cb
)

	)

333 
SSL_CTX_£t_é£xt_tickë_key_evp_cb


334 (
SSL_CTX
 *
˘x
, (*
Â
)(
SSL
 *, *, *,

335 
EVP_CIPHER_CTX
 *, 
EVP_MAC_CTX
 *, ));

338 
	#TLS1_CK_PSK_WITH_RC4_128_SHA
 0x0300008A

	)

339 
	#TLS1_CK_PSK_WITH_3DES_EDE_CBC_SHA
 0x0300008B

	)

340 
	#TLS1_CK_PSK_WITH_AES_128_CBC_SHA
 0x0300008C

	)

341 
	#TLS1_CK_PSK_WITH_AES_256_CBC_SHA
 0x0300008D

	)

342 
	#TLS1_CK_DHE_PSK_WITH_RC4_128_SHA
 0x0300008E

	)

343 
	#TLS1_CK_DHE_PSK_WITH_3DES_EDE_CBC_SHA
 0x0300008F

	)

344 
	#TLS1_CK_DHE_PSK_WITH_AES_128_CBC_SHA
 0x03000090

	)

345 
	#TLS1_CK_DHE_PSK_WITH_AES_256_CBC_SHA
 0x03000091

	)

346 
	#TLS1_CK_RSA_PSK_WITH_RC4_128_SHA
 0x03000092

	)

347 
	#TLS1_CK_RSA_PSK_WITH_3DES_EDE_CBC_SHA
 0x03000093

	)

348 
	#TLS1_CK_RSA_PSK_WITH_AES_128_CBC_SHA
 0x03000094

	)

349 
	#TLS1_CK_RSA_PSK_WITH_AES_256_CBC_SHA
 0x03000095

	)

352 
	#TLS1_CK_PSK_WITH_AES_128_GCM_SHA256
 0x030000A8

	)

353 
	#TLS1_CK_PSK_WITH_AES_256_GCM_SHA384
 0x030000A9

	)

354 
	#TLS1_CK_DHE_PSK_WITH_AES_128_GCM_SHA256
 0x030000AA

	)

355 
	#TLS1_CK_DHE_PSK_WITH_AES_256_GCM_SHA384
 0x030000AB

	)

356 
	#TLS1_CK_RSA_PSK_WITH_AES_128_GCM_SHA256
 0x030000AC

	)

357 
	#TLS1_CK_RSA_PSK_WITH_AES_256_GCM_SHA384
 0x030000AD

	)

358 
	#TLS1_CK_PSK_WITH_AES_128_CBC_SHA256
 0x030000AE

	)

359 
	#TLS1_CK_PSK_WITH_AES_256_CBC_SHA384
 0x030000AF

	)

360 
	#TLS1_CK_PSK_WITH_NULL_SHA256
 0x030000B0

	)

361 
	#TLS1_CK_PSK_WITH_NULL_SHA384
 0x030000B1

	)

362 
	#TLS1_CK_DHE_PSK_WITH_AES_128_CBC_SHA256
 0x030000B2

	)

363 
	#TLS1_CK_DHE_PSK_WITH_AES_256_CBC_SHA384
 0x030000B3

	)

364 
	#TLS1_CK_DHE_PSK_WITH_NULL_SHA256
 0x030000B4

	)

365 
	#TLS1_CK_DHE_PSK_WITH_NULL_SHA384
 0x030000B5

	)

366 
	#TLS1_CK_RSA_PSK_WITH_AES_128_CBC_SHA256
 0x030000B6

	)

367 
	#TLS1_CK_RSA_PSK_WITH_AES_256_CBC_SHA384
 0x030000B7

	)

368 
	#TLS1_CK_RSA_PSK_WITH_NULL_SHA256
 0x030000B8

	)

369 
	#TLS1_CK_RSA_PSK_WITH_NULL_SHA384
 0x030000B9

	)

372 
	#TLS1_CK_PSK_WITH_NULL_SHA
 0x0300002C

	)

373 
	#TLS1_CK_DHE_PSK_WITH_NULL_SHA
 0x0300002D

	)

374 
	#TLS1_CK_RSA_PSK_WITH_NULL_SHA
 0x0300002E

	)

377 
	#TLS1_CK_RSA_WITH_AES_128_SHA
 0x0300002F

	)

378 
	#TLS1_CK_DH_DSS_WITH_AES_128_SHA
 0x03000030

	)

379 
	#TLS1_CK_DH_RSA_WITH_AES_128_SHA
 0x03000031

	)

380 
	#TLS1_CK_DHE_DSS_WITH_AES_128_SHA
 0x03000032

	)

381 
	#TLS1_CK_DHE_RSA_WITH_AES_128_SHA
 0x03000033

	)

382 
	#TLS1_CK_ADH_WITH_AES_128_SHA
 0x03000034

	)

383 
	#TLS1_CK_RSA_WITH_AES_256_SHA
 0x03000035

	)

384 
	#TLS1_CK_DH_DSS_WITH_AES_256_SHA
 0x03000036

	)

385 
	#TLS1_CK_DH_RSA_WITH_AES_256_SHA
 0x03000037

	)

386 
	#TLS1_CK_DHE_DSS_WITH_AES_256_SHA
 0x03000038

	)

387 
	#TLS1_CK_DHE_RSA_WITH_AES_256_SHA
 0x03000039

	)

388 
	#TLS1_CK_ADH_WITH_AES_256_SHA
 0x0300003A

	)

391 
	#TLS1_CK_RSA_WITH_NULL_SHA256
 0x0300003B

	)

392 
	#TLS1_CK_RSA_WITH_AES_128_SHA256
 0x0300003C

	)

393 
	#TLS1_CK_RSA_WITH_AES_256_SHA256
 0x0300003D

	)

394 
	#TLS1_CK_DH_DSS_WITH_AES_128_SHA256
 0x0300003E

	)

395 
	#TLS1_CK_DH_RSA_WITH_AES_128_SHA256
 0x0300003F

	)

396 
	#TLS1_CK_DHE_DSS_WITH_AES_128_SHA256
 0x03000040

	)

399 
	#TLS1_CK_RSA_WITH_CAMELLIA_128_CBC_SHA
 0x03000041

	)

400 
	#TLS1_CK_DH_DSS_WITH_CAMELLIA_128_CBC_SHA
 0x03000042

	)

401 
	#TLS1_CK_DH_RSA_WITH_CAMELLIA_128_CBC_SHA
 0x03000043

	)

402 
	#TLS1_CK_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA
 0x03000044

	)

403 
	#TLS1_CK_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA
 0x03000045

	)

404 
	#TLS1_CK_ADH_WITH_CAMELLIA_128_CBC_SHA
 0x03000046

	)

407 
	#TLS1_CK_DHE_RSA_WITH_AES_128_SHA256
 0x03000067

	)

408 
	#TLS1_CK_DH_DSS_WITH_AES_256_SHA256
 0x03000068

	)

409 
	#TLS1_CK_DH_RSA_WITH_AES_256_SHA256
 0x03000069

	)

410 
	#TLS1_CK_DHE_DSS_WITH_AES_256_SHA256
 0x0300006A

	)

411 
	#TLS1_CK_DHE_RSA_WITH_AES_256_SHA256
 0x0300006B

	)

412 
	#TLS1_CK_ADH_WITH_AES_128_SHA256
 0x0300006C

	)

413 
	#TLS1_CK_ADH_WITH_AES_256_SHA256
 0x0300006D

	)

416 
	#TLS1_CK_RSA_WITH_CAMELLIA_256_CBC_SHA
 0x03000084

	)

417 
	#TLS1_CK_DH_DSS_WITH_CAMELLIA_256_CBC_SHA
 0x03000085

	)

418 
	#TLS1_CK_DH_RSA_WITH_CAMELLIA_256_CBC_SHA
 0x03000086

	)

419 
	#TLS1_CK_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA
 0x03000087

	)

420 
	#TLS1_CK_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA
 0x03000088

	)

421 
	#TLS1_CK_ADH_WITH_CAMELLIA_256_CBC_SHA
 0x03000089

	)

424 
	#TLS1_CK_RSA_WITH_SEED_SHA
 0x03000096

	)

425 
	#TLS1_CK_DH_DSS_WITH_SEED_SHA
 0x03000097

	)

426 
	#TLS1_CK_DH_RSA_WITH_SEED_SHA
 0x03000098

	)

427 
	#TLS1_CK_DHE_DSS_WITH_SEED_SHA
 0x03000099

	)

428 
	#TLS1_CK_DHE_RSA_WITH_SEED_SHA
 0x0300009A

	)

429 
	#TLS1_CK_ADH_WITH_SEED_SHA
 0x0300009B

	)

432 
	#TLS1_CK_RSA_WITH_AES_128_GCM_SHA256
 0x0300009C

	)

433 
	#TLS1_CK_RSA_WITH_AES_256_GCM_SHA384
 0x0300009D

	)

434 
	#TLS1_CK_DHE_RSA_WITH_AES_128_GCM_SHA256
 0x0300009E

	)

435 
	#TLS1_CK_DHE_RSA_WITH_AES_256_GCM_SHA384
 0x0300009F

	)

436 
	#TLS1_CK_DH_RSA_WITH_AES_128_GCM_SHA256
 0x030000A0

	)

437 
	#TLS1_CK_DH_RSA_WITH_AES_256_GCM_SHA384
 0x030000A1

	)

438 
	#TLS1_CK_DHE_DSS_WITH_AES_128_GCM_SHA256
 0x030000A2

	)

439 
	#TLS1_CK_DHE_DSS_WITH_AES_256_GCM_SHA384
 0x030000A3

	)

440 
	#TLS1_CK_DH_DSS_WITH_AES_128_GCM_SHA256
 0x030000A4

	)

441 
	#TLS1_CK_DH_DSS_WITH_AES_256_GCM_SHA384
 0x030000A5

	)

442 
	#TLS1_CK_ADH_WITH_AES_128_GCM_SHA256
 0x030000A6

	)

443 
	#TLS1_CK_ADH_WITH_AES_256_GCM_SHA384
 0x030000A7

	)

446 
	#TLS1_CK_RSA_WITH_AES_128_CCM
 0x0300C09C

	)

447 
	#TLS1_CK_RSA_WITH_AES_256_CCM
 0x0300C09D

	)

448 
	#TLS1_CK_DHE_RSA_WITH_AES_128_CCM
 0x0300C09E

	)

449 
	#TLS1_CK_DHE_RSA_WITH_AES_256_CCM
 0x0300C09F

	)

450 
	#TLS1_CK_RSA_WITH_AES_128_CCM_8
 0x0300C0A0

	)

451 
	#TLS1_CK_RSA_WITH_AES_256_CCM_8
 0x0300C0A1

	)

452 
	#TLS1_CK_DHE_RSA_WITH_AES_128_CCM_8
 0x0300C0A2

	)

453 
	#TLS1_CK_DHE_RSA_WITH_AES_256_CCM_8
 0x0300C0A3

	)

454 
	#TLS1_CK_PSK_WITH_AES_128_CCM
 0x0300C0A4

	)

455 
	#TLS1_CK_PSK_WITH_AES_256_CCM
 0x0300C0A5

	)

456 
	#TLS1_CK_DHE_PSK_WITH_AES_128_CCM
 0x0300C0A6

	)

457 
	#TLS1_CK_DHE_PSK_WITH_AES_256_CCM
 0x0300C0A7

	)

458 
	#TLS1_CK_PSK_WITH_AES_128_CCM_8
 0x0300C0A8

	)

459 
	#TLS1_CK_PSK_WITH_AES_256_CCM_8
 0x0300C0A9

	)

460 
	#TLS1_CK_DHE_PSK_WITH_AES_128_CCM_8
 0x0300C0AA

	)

461 
	#TLS1_CK_DHE_PSK_WITH_AES_256_CCM_8
 0x0300C0AB

	)

464 
	#TLS1_CK_ECDHE_ECDSA_WITH_AES_128_CCM
 0x0300C0AC

	)

465 
	#TLS1_CK_ECDHE_ECDSA_WITH_AES_256_CCM
 0x0300C0AD

	)

466 
	#TLS1_CK_ECDHE_ECDSA_WITH_AES_128_CCM_8
 0x0300C0AE

	)

467 
	#TLS1_CK_ECDHE_ECDSA_WITH_AES_256_CCM_8
 0x0300C0AF

	)

470 
	#TLS1_CK_RSA_WITH_CAMELLIA_128_CBC_SHA256
 0x030000BA

	)

471 
	#TLS1_CK_DH_DSS_WITH_CAMELLIA_128_CBC_SHA256
 0x030000BB

	)

472 
	#TLS1_CK_DH_RSA_WITH_CAMELLIA_128_CBC_SHA256
 0x030000BC

	)

473 
	#TLS1_CK_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA256
 0x030000BD

	)

474 
	#TLS1_CK_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256
 0x030000BE

	)

475 
	#TLS1_CK_ADH_WITH_CAMELLIA_128_CBC_SHA256
 0x030000BF

	)

477 
	#TLS1_CK_RSA_WITH_CAMELLIA_256_CBC_SHA256
 0x030000C0

	)

478 
	#TLS1_CK_DH_DSS_WITH_CAMELLIA_256_CBC_SHA256
 0x030000C1

	)

479 
	#TLS1_CK_DH_RSA_WITH_CAMELLIA_256_CBC_SHA256
 0x030000C2

	)

480 
	#TLS1_CK_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA256
 0x030000C3

	)

481 
	#TLS1_CK_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256
 0x030000C4

	)

482 
	#TLS1_CK_ADH_WITH_CAMELLIA_256_CBC_SHA256
 0x030000C5

	)

485 
	#TLS1_CK_ECDH_ECDSA_WITH_NULL_SHA
 0x0300C001

	)

486 
	#TLS1_CK_ECDH_ECDSA_WITH_RC4_128_SHA
 0x0300C002

	)

487 
	#TLS1_CK_ECDH_ECDSA_WITH_DES_192_CBC3_SHA
 0x0300C003

	)

488 
	#TLS1_CK_ECDH_ECDSA_WITH_AES_128_CBC_SHA
 0x0300C004

	)

489 
	#TLS1_CK_ECDH_ECDSA_WITH_AES_256_CBC_SHA
 0x0300C005

	)

491 
	#TLS1_CK_ECDHE_ECDSA_WITH_NULL_SHA
 0x0300C006

	)

492 
	#TLS1_CK_ECDHE_ECDSA_WITH_RC4_128_SHA
 0x0300C007

	)

493 
	#TLS1_CK_ECDHE_ECDSA_WITH_DES_192_CBC3_SHA
 0x0300C008

	)

494 
	#TLS1_CK_ECDHE_ECDSA_WITH_AES_128_CBC_SHA
 0x0300C009

	)

495 
	#TLS1_CK_ECDHE_ECDSA_WITH_AES_256_CBC_SHA
 0x0300C00A

	)

497 
	#TLS1_CK_ECDH_RSA_WITH_NULL_SHA
 0x0300C00B

	)

498 
	#TLS1_CK_ECDH_RSA_WITH_RC4_128_SHA
 0x0300C00C

	)

499 
	#TLS1_CK_ECDH_RSA_WITH_DES_192_CBC3_SHA
 0x0300C00D

	)

500 
	#TLS1_CK_ECDH_RSA_WITH_AES_128_CBC_SHA
 0x0300C00E

	)

501 
	#TLS1_CK_ECDH_RSA_WITH_AES_256_CBC_SHA
 0x0300C00F

	)

503 
	#TLS1_CK_ECDHE_RSA_WITH_NULL_SHA
 0x0300C010

	)

504 
	#TLS1_CK_ECDHE_RSA_WITH_RC4_128_SHA
 0x0300C011

	)

505 
	#TLS1_CK_ECDHE_RSA_WITH_DES_192_CBC3_SHA
 0x0300C012

	)

506 
	#TLS1_CK_ECDHE_RSA_WITH_AES_128_CBC_SHA
 0x0300C013

	)

507 
	#TLS1_CK_ECDHE_RSA_WITH_AES_256_CBC_SHA
 0x0300C014

	)

509 
	#TLS1_CK_ECDH_™⁄_WITH_NULL_SHA
 0x0300C015

	)

510 
	#TLS1_CK_ECDH_™⁄_WITH_RC4_128_SHA
 0x0300C016

	)

511 
	#TLS1_CK_ECDH_™⁄_WITH_DES_192_CBC3_SHA
 0x0300C017

	)

512 
	#TLS1_CK_ECDH_™⁄_WITH_AES_128_CBC_SHA
 0x0300C018

	)

513 
	#TLS1_CK_ECDH_™⁄_WITH_AES_256_CBC_SHA
 0x0300C019

	)

516 
	#TLS1_CK_SRP_SHA_WITH_3DES_EDE_CBC_SHA
 0x0300C01A

	)

517 
	#TLS1_CK_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA
 0x0300C01B

	)

518 
	#TLS1_CK_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHA
 0x0300C01C

	)

519 
	#TLS1_CK_SRP_SHA_WITH_AES_128_CBC_SHA
 0x0300C01D

	)

520 
	#TLS1_CK_SRP_SHA_RSA_WITH_AES_128_CBC_SHA
 0x0300C01E

	)

521 
	#TLS1_CK_SRP_SHA_DSS_WITH_AES_128_CBC_SHA
 0x0300C01F

	)

522 
	#TLS1_CK_SRP_SHA_WITH_AES_256_CBC_SHA
 0x0300C020

	)

523 
	#TLS1_CK_SRP_SHA_RSA_WITH_AES_256_CBC_SHA
 0x0300C021

	)

524 
	#TLS1_CK_SRP_SHA_DSS_WITH_AES_256_CBC_SHA
 0x0300C022

	)

527 
	#TLS1_CK_ECDHE_ECDSA_WITH_AES_128_SHA256
 0x0300C023

	)

528 
	#TLS1_CK_ECDHE_ECDSA_WITH_AES_256_SHA384
 0x0300C024

	)

529 
	#TLS1_CK_ECDH_ECDSA_WITH_AES_128_SHA256
 0x0300C025

	)

530 
	#TLS1_CK_ECDH_ECDSA_WITH_AES_256_SHA384
 0x0300C026

	)

531 
	#TLS1_CK_ECDHE_RSA_WITH_AES_128_SHA256
 0x0300C027

	)

532 
	#TLS1_CK_ECDHE_RSA_WITH_AES_256_SHA384
 0x0300C028

	)

533 
	#TLS1_CK_ECDH_RSA_WITH_AES_128_SHA256
 0x0300C029

	)

534 
	#TLS1_CK_ECDH_RSA_WITH_AES_256_SHA384
 0x0300C02A

	)

537 
	#TLS1_CK_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
 0x0300C02B

	)

538 
	#TLS1_CK_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
 0x0300C02C

	)

539 
	#TLS1_CK_ECDH_ECDSA_WITH_AES_128_GCM_SHA256
 0x0300C02D

	)

540 
	#TLS1_CK_ECDH_ECDSA_WITH_AES_256_GCM_SHA384
 0x0300C02E

	)

541 
	#TLS1_CK_ECDHE_RSA_WITH_AES_128_GCM_SHA256
 0x0300C02F

	)

542 
	#TLS1_CK_ECDHE_RSA_WITH_AES_256_GCM_SHA384
 0x0300C030

	)

543 
	#TLS1_CK_ECDH_RSA_WITH_AES_128_GCM_SHA256
 0x0300C031

	)

544 
	#TLS1_CK_ECDH_RSA_WITH_AES_256_GCM_SHA384
 0x0300C032

	)

547 
	#TLS1_CK_ECDHE_PSK_WITH_RC4_128_SHA
 0x0300C033

	)

548 
	#TLS1_CK_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA
 0x0300C034

	)

549 
	#TLS1_CK_ECDHE_PSK_WITH_AES_128_CBC_SHA
 0x0300C035

	)

550 
	#TLS1_CK_ECDHE_PSK_WITH_AES_256_CBC_SHA
 0x0300C036

	)

552 
	#TLS1_CK_ECDHE_PSK_WITH_AES_128_CBC_SHA256
 0x0300C037

	)

553 
	#TLS1_CK_ECDHE_PSK_WITH_AES_256_CBC_SHA384
 0x0300C038

	)

556 
	#TLS1_CK_ECDHE_PSK_WITH_NULL_SHA
 0x0300C039

	)

557 
	#TLS1_CK_ECDHE_PSK_WITH_NULL_SHA256
 0x0300C03A

	)

558 
	#TLS1_CK_ECDHE_PSK_WITH_NULL_SHA384
 0x0300C03B

	)

561 
	#TLS1_CK_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256
 0x0300C072

	)

562 
	#TLS1_CK_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384
 0x0300C073

	)

563 
	#TLS1_CK_ECDH_ECDSA_WITH_CAMELLIA_128_CBC_SHA256
 0x0300C074

	)

564 
	#TLS1_CK_ECDH_ECDSA_WITH_CAMELLIA_256_CBC_SHA384
 0x0300C075

	)

565 
	#TLS1_CK_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256
 0x0300C076

	)

566 
	#TLS1_CK_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384
 0x0300C077

	)

567 
	#TLS1_CK_ECDH_RSA_WITH_CAMELLIA_128_CBC_SHA256
 0x0300C078

	)

568 
	#TLS1_CK_ECDH_RSA_WITH_CAMELLIA_256_CBC_SHA384
 0x0300C079

	)

570 
	#TLS1_CK_PSK_WITH_CAMELLIA_128_CBC_SHA256
 0x0300C094

	)

571 
	#TLS1_CK_PSK_WITH_CAMELLIA_256_CBC_SHA384
 0x0300C095

	)

572 
	#TLS1_CK_DHE_PSK_WITH_CAMELLIA_128_CBC_SHA256
 0x0300C096

	)

573 
	#TLS1_CK_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384
 0x0300C097

	)

574 
	#TLS1_CK_RSA_PSK_WITH_CAMELLIA_128_CBC_SHA256
 0x0300C098

	)

575 
	#TLS1_CK_RSA_PSK_WITH_CAMELLIA_256_CBC_SHA384
 0x0300C099

	)

576 
	#TLS1_CK_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256
 0x0300C09A

	)

577 
	#TLS1_CK_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384
 0x0300C09B

	)

580 
	#TLS1_CK_ECDHE_RSA_WITH_CHACHA20_POLY1305
 0x0300CCA8

	)

581 
	#TLS1_CK_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
 0x0300CCA9

	)

582 
	#TLS1_CK_DHE_RSA_WITH_CHACHA20_POLY1305
 0x0300CCAA

	)

583 
	#TLS1_CK_PSK_WITH_CHACHA20_POLY1305
 0x0300CCAB

	)

584 
	#TLS1_CK_ECDHE_PSK_WITH_CHACHA20_POLY1305
 0x0300CCAC

	)

585 
	#TLS1_CK_DHE_PSK_WITH_CHACHA20_POLY1305
 0x0300CCAD

	)

586 
	#TLS1_CK_RSA_PSK_WITH_CHACHA20_POLY1305
 0x0300CCAE

	)

589 
	#TLS1_3_CK_AES_128_GCM_SHA256
 0x03001301

	)

590 
	#TLS1_3_CK_AES_256_GCM_SHA384
 0x03001302

	)

591 
	#TLS1_3_CK_CHACHA20_POLY1305_SHA256
 0x03001303

	)

592 
	#TLS1_3_CK_AES_128_CCM_SHA256
 0x03001304

	)

593 
	#TLS1_3_CK_AES_128_CCM_8_SHA256
 0x03001305

	)

596 
	#TLS1_CK_RSA_WITH_ARIA_128_GCM_SHA256
 0x0300C050

	)

597 
	#TLS1_CK_RSA_WITH_ARIA_256_GCM_SHA384
 0x0300C051

	)

598 
	#TLS1_CK_DHE_RSA_WITH_ARIA_128_GCM_SHA256
 0x0300C052

	)

599 
	#TLS1_CK_DHE_RSA_WITH_ARIA_256_GCM_SHA384
 0x0300C053

	)

600 
	#TLS1_CK_DH_RSA_WITH_ARIA_128_GCM_SHA256
 0x0300C054

	)

601 
	#TLS1_CK_DH_RSA_WITH_ARIA_256_GCM_SHA384
 0x0300C055

	)

602 
	#TLS1_CK_DHE_DSS_WITH_ARIA_128_GCM_SHA256
 0x0300C056

	)

603 
	#TLS1_CK_DHE_DSS_WITH_ARIA_256_GCM_SHA384
 0x0300C057

	)

604 
	#TLS1_CK_DH_DSS_WITH_ARIA_128_GCM_SHA256
 0x0300C058

	)

605 
	#TLS1_CK_DH_DSS_WITH_ARIA_256_GCM_SHA384
 0x0300C059

	)

606 
	#TLS1_CK_DH_™⁄_WITH_ARIA_128_GCM_SHA256
 0x0300C05A

	)

607 
	#TLS1_CK_DH_™⁄_WITH_ARIA_256_GCM_SHA384
 0x0300C05B

	)

608 
	#TLS1_CK_ECDHE_ECDSA_WITH_ARIA_128_GCM_SHA256
 0x0300C05C

	)

609 
	#TLS1_CK_ECDHE_ECDSA_WITH_ARIA_256_GCM_SHA384
 0x0300C05D

	)

610 
	#TLS1_CK_ECDH_ECDSA_WITH_ARIA_128_GCM_SHA256
 0x0300C05E

	)

611 
	#TLS1_CK_ECDH_ECDSA_WITH_ARIA_256_GCM_SHA384
 0x0300C05F

	)

612 
	#TLS1_CK_ECDHE_RSA_WITH_ARIA_128_GCM_SHA256
 0x0300C060

	)

613 
	#TLS1_CK_ECDHE_RSA_WITH_ARIA_256_GCM_SHA384
 0x0300C061

	)

614 
	#TLS1_CK_ECDH_RSA_WITH_ARIA_128_GCM_SHA256
 0x0300C062

	)

615 
	#TLS1_CK_ECDH_RSA_WITH_ARIA_256_GCM_SHA384
 0x0300C063

	)

616 
	#TLS1_CK_PSK_WITH_ARIA_128_GCM_SHA256
 0x0300C06A

	)

617 
	#TLS1_CK_PSK_WITH_ARIA_256_GCM_SHA384
 0x0300C06B

	)

618 
	#TLS1_CK_DHE_PSK_WITH_ARIA_128_GCM_SHA256
 0x0300C06C

	)

619 
	#TLS1_CK_DHE_PSK_WITH_ARIA_256_GCM_SHA384
 0x0300C06D

	)

620 
	#TLS1_CK_RSA_PSK_WITH_ARIA_128_GCM_SHA256
 0x0300C06E

	)

621 
	#TLS1_CK_RSA_PSK_WITH_ARIA_256_GCM_SHA384
 0x0300C06F

	)

624 
	#TLS1_RFC_RSA_WITH_AES_128_SHA
 "TLS_RSA_WITH_AES_128_CBC_SHA"

	)

625 
	#TLS1_RFC_DHE_DSS_WITH_AES_128_SHA
 "TLS_DHE_DSS_WITH_AES_128_CBC_SHA"

	)

626 
	#TLS1_RFC_DHE_RSA_WITH_AES_128_SHA
 "TLS_DHE_RSA_WITH_AES_128_CBC_SHA"

	)

627 
	#TLS1_RFC_ADH_WITH_AES_128_SHA
 "TLS_DH_™⁄_WITH_AES_128_CBC_SHA"

	)

628 
	#TLS1_RFC_RSA_WITH_AES_256_SHA
 "TLS_RSA_WITH_AES_256_CBC_SHA"

	)

629 
	#TLS1_RFC_DHE_DSS_WITH_AES_256_SHA
 "TLS_DHE_DSS_WITH_AES_256_CBC_SHA"

	)

630 
	#TLS1_RFC_DHE_RSA_WITH_AES_256_SHA
 "TLS_DHE_RSA_WITH_AES_256_CBC_SHA"

	)

631 
	#TLS1_RFC_ADH_WITH_AES_256_SHA
 "TLS_DH_™⁄_WITH_AES_256_CBC_SHA"

	)

632 
	#TLS1_RFC_RSA_WITH_NULL_SHA256
 "TLS_RSA_WITH_NULL_SHA256"

	)

633 
	#TLS1_RFC_RSA_WITH_AES_128_SHA256
 "TLS_RSA_WITH_AES_128_CBC_SHA256"

	)

634 
	#TLS1_RFC_RSA_WITH_AES_256_SHA256
 "TLS_RSA_WITH_AES_256_CBC_SHA256"

	)

635 
	#TLS1_RFC_DHE_DSS_WITH_AES_128_SHA256
 "TLS_DHE_DSS_WITH_AES_128_CBC_SHA256"

	)

636 
	#TLS1_RFC_DHE_RSA_WITH_AES_128_SHA256
 "TLS_DHE_RSA_WITH_AES_128_CBC_SHA256"

	)

637 
	#TLS1_RFC_DHE_DSS_WITH_AES_256_SHA256
 "TLS_DHE_DSS_WITH_AES_256_CBC_SHA256"

	)

638 
	#TLS1_RFC_DHE_RSA_WITH_AES_256_SHA256
 "TLS_DHE_RSA_WITH_AES_256_CBC_SHA256"

	)

639 
	#TLS1_RFC_ADH_WITH_AES_128_SHA256
 "TLS_DH_™⁄_WITH_AES_128_CBC_SHA256"

	)

640 
	#TLS1_RFC_ADH_WITH_AES_256_SHA256
 "TLS_DH_™⁄_WITH_AES_256_CBC_SHA256"

	)

641 
	#TLS1_RFC_RSA_WITH_AES_128_GCM_SHA256
 "TLS_RSA_WITH_AES_128_GCM_SHA256"

	)

642 
	#TLS1_RFC_RSA_WITH_AES_256_GCM_SHA384
 "TLS_RSA_WITH_AES_256_GCM_SHA384"

	)

643 
	#TLS1_RFC_DHE_RSA_WITH_AES_128_GCM_SHA256
 "TLS_DHE_RSA_WITH_AES_128_GCM_SHA256"

	)

644 
	#TLS1_RFC_DHE_RSA_WITH_AES_256_GCM_SHA384
 "TLS_DHE_RSA_WITH_AES_256_GCM_SHA384"

	)

645 
	#TLS1_RFC_DHE_DSS_WITH_AES_128_GCM_SHA256
 "TLS_DHE_DSS_WITH_AES_128_GCM_SHA256"

	)

646 
	#TLS1_RFC_DHE_DSS_WITH_AES_256_GCM_SHA384
 "TLS_DHE_DSS_WITH_AES_256_GCM_SHA384"

	)

647 
	#TLS1_RFC_ADH_WITH_AES_128_GCM_SHA256
 "TLS_DH_™⁄_WITH_AES_128_GCM_SHA256"

	)

648 
	#TLS1_RFC_ADH_WITH_AES_256_GCM_SHA384
 "TLS_DH_™⁄_WITH_AES_256_GCM_SHA384"

	)

649 
	#TLS1_RFC_RSA_WITH_AES_128_CCM
 "TLS_RSA_WITH_AES_128_CCM"

	)

650 
	#TLS1_RFC_RSA_WITH_AES_256_CCM
 "TLS_RSA_WITH_AES_256_CCM"

	)

651 
	#TLS1_RFC_DHE_RSA_WITH_AES_128_CCM
 "TLS_DHE_RSA_WITH_AES_128_CCM"

	)

652 
	#TLS1_RFC_DHE_RSA_WITH_AES_256_CCM
 "TLS_DHE_RSA_WITH_AES_256_CCM"

	)

653 
	#TLS1_RFC_RSA_WITH_AES_128_CCM_8
 "TLS_RSA_WITH_AES_128_CCM_8"

	)

654 
	#TLS1_RFC_RSA_WITH_AES_256_CCM_8
 "TLS_RSA_WITH_AES_256_CCM_8"

	)

655 
	#TLS1_RFC_DHE_RSA_WITH_AES_128_CCM_8
 "TLS_DHE_RSA_WITH_AES_128_CCM_8"

	)

656 
	#TLS1_RFC_DHE_RSA_WITH_AES_256_CCM_8
 "TLS_DHE_RSA_WITH_AES_256_CCM_8"

	)

657 
	#TLS1_RFC_PSK_WITH_AES_128_CCM
 "TLS_PSK_WITH_AES_128_CCM"

	)

658 
	#TLS1_RFC_PSK_WITH_AES_256_CCM
 "TLS_PSK_WITH_AES_256_CCM"

	)

659 
	#TLS1_RFC_DHE_PSK_WITH_AES_128_CCM
 "TLS_DHE_PSK_WITH_AES_128_CCM"

	)

660 
	#TLS1_RFC_DHE_PSK_WITH_AES_256_CCM
 "TLS_DHE_PSK_WITH_AES_256_CCM"

	)

661 
	#TLS1_RFC_PSK_WITH_AES_128_CCM_8
 "TLS_PSK_WITH_AES_128_CCM_8"

	)

662 
	#TLS1_RFC_PSK_WITH_AES_256_CCM_8
 "TLS_PSK_WITH_AES_256_CCM_8"

	)

663 
	#TLS1_RFC_DHE_PSK_WITH_AES_128_CCM_8
 "TLS_PSK_DHE_WITH_AES_128_CCM_8"

	)

664 
	#TLS1_RFC_DHE_PSK_WITH_AES_256_CCM_8
 "TLS_PSK_DHE_WITH_AES_256_CCM_8"

	)

665 
	#TLS1_RFC_ECDHE_ECDSA_WITH_AES_128_CCM
 "TLS_ECDHE_ECDSA_WITH_AES_128_CCM"

	)

666 
	#TLS1_RFC_ECDHE_ECDSA_WITH_AES_256_CCM
 "TLS_ECDHE_ECDSA_WITH_AES_256_CCM"

	)

667 
	#TLS1_RFC_ECDHE_ECDSA_WITH_AES_128_CCM_8
 "TLS_ECDHE_ECDSA_WITH_AES_128_CCM_8"

	)

668 
	#TLS1_RFC_ECDHE_ECDSA_WITH_AES_256_CCM_8
 "TLS_ECDHE_ECDSA_WITH_AES_256_CCM_8"

	)

669 
	#TLS1_3_RFC_AES_128_GCM_SHA256
 "TLS_AES_128_GCM_SHA256"

	)

670 
	#TLS1_3_RFC_AES_256_GCM_SHA384
 "TLS_AES_256_GCM_SHA384"

	)

671 
	#TLS1_3_RFC_CHACHA20_POLY1305_SHA256
 "TLS_CHACHA20_POLY1305_SHA256"

	)

672 
	#TLS1_3_RFC_AES_128_CCM_SHA256
 "TLS_AES_128_CCM_SHA256"

	)

673 
	#TLS1_3_RFC_AES_128_CCM_8_SHA256
 "TLS_AES_128_CCM_8_SHA256"

	)

674 
	#TLS1_RFC_ECDHE_ECDSA_WITH_NULL_SHA
 "TLS_ECDHE_ECDSA_WITH_NULL_SHA"

	)

675 
	#TLS1_RFC_ECDHE_ECDSA_WITH_DES_192_CBC3_SHA
 "TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA"

	)

676 
	#TLS1_RFC_ECDHE_ECDSA_WITH_AES_128_CBC_SHA
 "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA"

	)

677 
	#TLS1_RFC_ECDHE_ECDSA_WITH_AES_256_CBC_SHA
 "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA"

	)

678 
	#TLS1_RFC_ECDHE_RSA_WITH_NULL_SHA
 "TLS_ECDHE_RSA_WITH_NULL_SHA"

	)

679 
	#TLS1_RFC_ECDHE_RSA_WITH_DES_192_CBC3_SHA
 "TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA"

	)

680 
	#TLS1_RFC_ECDHE_RSA_WITH_AES_128_CBC_SHA
 "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA"

	)

681 
	#TLS1_RFC_ECDHE_RSA_WITH_AES_256_CBC_SHA
 "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA"

	)

682 
	#TLS1_RFC_ECDH_™⁄_WITH_NULL_SHA
 "TLS_ECDH_™⁄_WITH_NULL_SHA"

	)

683 
	#TLS1_RFC_ECDH_™⁄_WITH_DES_192_CBC3_SHA
 "TLS_ECDH_™⁄_WITH_3DES_EDE_CBC_SHA"

	)

684 
	#TLS1_RFC_ECDH_™⁄_WITH_AES_128_CBC_SHA
 "TLS_ECDH_™⁄_WITH_AES_128_CBC_SHA"

	)

685 
	#TLS1_RFC_ECDH_™⁄_WITH_AES_256_CBC_SHA
 "TLS_ECDH_™⁄_WITH_AES_256_CBC_SHA"

	)

686 
	#TLS1_RFC_ECDHE_ECDSA_WITH_AES_128_SHA256
 "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256"

	)

687 
	#TLS1_RFC_ECDHE_ECDSA_WITH_AES_256_SHA384
 "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384"

	)

688 
	#TLS1_RFC_ECDHE_RSA_WITH_AES_128_SHA256
 "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256"

	)

689 
	#TLS1_RFC_ECDHE_RSA_WITH_AES_256_SHA384
 "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384"

	)

690 
	#TLS1_RFC_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
 "TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256"

	)

691 
	#TLS1_RFC_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
 "TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384"

	)

692 
	#TLS1_RFC_ECDHE_RSA_WITH_AES_128_GCM_SHA256
 "TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256"

	)

693 
	#TLS1_RFC_ECDHE_RSA_WITH_AES_256_GCM_SHA384
 "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384"

	)

694 
	#TLS1_RFC_PSK_WITH_NULL_SHA
 "TLS_PSK_WITH_NULL_SHA"

	)

695 
	#TLS1_RFC_DHE_PSK_WITH_NULL_SHA
 "TLS_DHE_PSK_WITH_NULL_SHA"

	)

696 
	#TLS1_RFC_RSA_PSK_WITH_NULL_SHA
 "TLS_RSA_PSK_WITH_NULL_SHA"

	)

697 
	#TLS1_RFC_PSK_WITH_3DES_EDE_CBC_SHA
 "TLS_PSK_WITH_3DES_EDE_CBC_SHA"

	)

698 
	#TLS1_RFC_PSK_WITH_AES_128_CBC_SHA
 "TLS_PSK_WITH_AES_128_CBC_SHA"

	)

699 
	#TLS1_RFC_PSK_WITH_AES_256_CBC_SHA
 "TLS_PSK_WITH_AES_256_CBC_SHA"

	)

700 
	#TLS1_RFC_DHE_PSK_WITH_3DES_EDE_CBC_SHA
 "TLS_DHE_PSK_WITH_3DES_EDE_CBC_SHA"

	)

701 
	#TLS1_RFC_DHE_PSK_WITH_AES_128_CBC_SHA
 "TLS_DHE_PSK_WITH_AES_128_CBC_SHA"

	)

702 
	#TLS1_RFC_DHE_PSK_WITH_AES_256_CBC_SHA
 "TLS_DHE_PSK_WITH_AES_256_CBC_SHA"

	)

703 
	#TLS1_RFC_RSA_PSK_WITH_3DES_EDE_CBC_SHA
 "TLS_RSA_PSK_WITH_3DES_EDE_CBC_SHA"

	)

704 
	#TLS1_RFC_RSA_PSK_WITH_AES_128_CBC_SHA
 "TLS_RSA_PSK_WITH_AES_128_CBC_SHA"

	)

705 
	#TLS1_RFC_RSA_PSK_WITH_AES_256_CBC_SHA
 "TLS_RSA_PSK_WITH_AES_256_CBC_SHA"

	)

706 
	#TLS1_RFC_PSK_WITH_AES_128_GCM_SHA256
 "TLS_PSK_WITH_AES_128_GCM_SHA256"

	)

707 
	#TLS1_RFC_PSK_WITH_AES_256_GCM_SHA384
 "TLS_PSK_WITH_AES_256_GCM_SHA384"

	)

708 
	#TLS1_RFC_DHE_PSK_WITH_AES_128_GCM_SHA256
 "TLS_DHE_PSK_WITH_AES_128_GCM_SHA256"

	)

709 
	#TLS1_RFC_DHE_PSK_WITH_AES_256_GCM_SHA384
 "TLS_DHE_PSK_WITH_AES_256_GCM_SHA384"

	)

710 
	#TLS1_RFC_RSA_PSK_WITH_AES_128_GCM_SHA256
 "TLS_RSA_PSK_WITH_AES_128_GCM_SHA256"

	)

711 
	#TLS1_RFC_RSA_PSK_WITH_AES_256_GCM_SHA384
 "TLS_RSA_PSK_WITH_AES_256_GCM_SHA384"

	)

712 
	#TLS1_RFC_PSK_WITH_AES_128_CBC_SHA256
 "TLS_PSK_WITH_AES_128_CBC_SHA256"

	)

713 
	#TLS1_RFC_PSK_WITH_AES_256_CBC_SHA384
 "TLS_PSK_WITH_AES_256_CBC_SHA384"

	)

714 
	#TLS1_RFC_PSK_WITH_NULL_SHA256
 "TLS_PSK_WITH_NULL_SHA256"

	)

715 
	#TLS1_RFC_PSK_WITH_NULL_SHA384
 "TLS_PSK_WITH_NULL_SHA384"

	)

716 
	#TLS1_RFC_DHE_PSK_WITH_AES_128_CBC_SHA256
 "TLS_DHE_PSK_WITH_AES_128_CBC_SHA256"

	)

717 
	#TLS1_RFC_DHE_PSK_WITH_AES_256_CBC_SHA384
 "TLS_DHE_PSK_WITH_AES_256_CBC_SHA384"

	)

718 
	#TLS1_RFC_DHE_PSK_WITH_NULL_SHA256
 "TLS_DHE_PSK_WITH_NULL_SHA256"

	)

719 
	#TLS1_RFC_DHE_PSK_WITH_NULL_SHA384
 "TLS_DHE_PSK_WITH_NULL_SHA384"

	)

720 
	#TLS1_RFC_RSA_PSK_WITH_AES_128_CBC_SHA256
 "TLS_RSA_PSK_WITH_AES_128_CBC_SHA256"

	)

721 
	#TLS1_RFC_RSA_PSK_WITH_AES_256_CBC_SHA384
 "TLS_RSA_PSK_WITH_AES_256_CBC_SHA384"

	)

722 
	#TLS1_RFC_RSA_PSK_WITH_NULL_SHA256
 "TLS_RSA_PSK_WITH_NULL_SHA256"

	)

723 
	#TLS1_RFC_RSA_PSK_WITH_NULL_SHA384
 "TLS_RSA_PSK_WITH_NULL_SHA384"

	)

724 
	#TLS1_RFC_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA
 "TLS_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA"

	)

725 
	#TLS1_RFC_ECDHE_PSK_WITH_AES_128_CBC_SHA
 "TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA"

	)

726 
	#TLS1_RFC_ECDHE_PSK_WITH_AES_256_CBC_SHA
 "TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA"

	)

727 
	#TLS1_RFC_ECDHE_PSK_WITH_AES_128_CBC_SHA256
 "TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA256"

	)

728 
	#TLS1_RFC_ECDHE_PSK_WITH_AES_256_CBC_SHA384
 "TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA384"

	)

729 
	#TLS1_RFC_ECDHE_PSK_WITH_NULL_SHA
 "TLS_ECDHE_PSK_WITH_NULL_SHA"

	)

730 
	#TLS1_RFC_ECDHE_PSK_WITH_NULL_SHA256
 "TLS_ECDHE_PSK_WITH_NULL_SHA256"

	)

731 
	#TLS1_RFC_ECDHE_PSK_WITH_NULL_SHA384
 "TLS_ECDHE_PSK_WITH_NULL_SHA384"

	)

732 
	#TLS1_RFC_SRP_SHA_WITH_3DES_EDE_CBC_SHA
 "TLS_SRP_SHA_WITH_3DES_EDE_CBC_SHA"

	)

733 
	#TLS1_RFC_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA
 "TLS_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA"

	)

734 
	#TLS1_RFC_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHA
 "TLS_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHA"

	)

735 
	#TLS1_RFC_SRP_SHA_WITH_AES_128_CBC_SHA
 "TLS_SRP_SHA_WITH_AES_128_CBC_SHA"

	)

736 
	#TLS1_RFC_SRP_SHA_RSA_WITH_AES_128_CBC_SHA
 "TLS_SRP_SHA_RSA_WITH_AES_128_CBC_SHA"

	)

737 
	#TLS1_RFC_SRP_SHA_DSS_WITH_AES_128_CBC_SHA
 "TLS_SRP_SHA_DSS_WITH_AES_128_CBC_SHA"

	)

738 
	#TLS1_RFC_SRP_SHA_WITH_AES_256_CBC_SHA
 "TLS_SRP_SHA_WITH_AES_256_CBC_SHA"

	)

739 
	#TLS1_RFC_SRP_SHA_RSA_WITH_AES_256_CBC_SHA
 "TLS_SRP_SHA_RSA_WITH_AES_256_CBC_SHA"

	)

740 
	#TLS1_RFC_SRP_SHA_DSS_WITH_AES_256_CBC_SHA
 "TLS_SRP_SHA_DSS_WITH_AES_256_CBC_SHA"

	)

741 
	#TLS1_RFC_DHE_RSA_WITH_CHACHA20_POLY1305
 "TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256"

	)

742 
	#TLS1_RFC_ECDHE_RSA_WITH_CHACHA20_POLY1305
 "TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256"

	)

743 
	#TLS1_RFC_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
 "TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256"

	)

744 
	#TLS1_RFC_PSK_WITH_CHACHA20_POLY1305
 "TLS_PSK_WITH_CHACHA20_POLY1305_SHA256"

	)

745 
	#TLS1_RFC_ECDHE_PSK_WITH_CHACHA20_POLY1305
 "TLS_ECDHE_PSK_WITH_CHACHA20_POLY1305_SHA256"

	)

746 
	#TLS1_RFC_DHE_PSK_WITH_CHACHA20_POLY1305
 "TLS_DHE_PSK_WITH_CHACHA20_POLY1305_SHA256"

	)

747 
	#TLS1_RFC_RSA_PSK_WITH_CHACHA20_POLY1305
 "TLS_RSA_PSK_WITH_CHACHA20_POLY1305_SHA256"

	)

748 
	#TLS1_RFC_RSA_WITH_CAMELLIA_128_CBC_SHA256
 "TLS_RSA_WITH_CAMELLIA_128_CBC_SHA256"

	)

749 
	#TLS1_RFC_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA256
 "TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA256"

	)

750 
	#TLS1_RFC_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256
 "TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256"

	)

751 
	#TLS1_RFC_ADH_WITH_CAMELLIA_128_CBC_SHA256
 "TLS_DH_™⁄_WITH_CAMELLIA_128_CBC_SHA256"

	)

752 
	#TLS1_RFC_RSA_WITH_CAMELLIA_256_CBC_SHA256
 "TLS_RSA_WITH_CAMELLIA_256_CBC_SHA256"

	)

753 
	#TLS1_RFC_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA256
 "TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA256"

	)

754 
	#TLS1_RFC_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256
 "TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256"

	)

755 
	#TLS1_RFC_ADH_WITH_CAMELLIA_256_CBC_SHA256
 "TLS_DH_™⁄_WITH_CAMELLIA_256_CBC_SHA256"

	)

756 
	#TLS1_RFC_RSA_WITH_CAMELLIA_256_CBC_SHA
 "TLS_RSA_WITH_CAMELLIA_256_CBC_SHA"

	)

757 
	#TLS1_RFC_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA
 "TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA"

	)

758 
	#TLS1_RFC_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA
 "TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA"

	)

759 
	#TLS1_RFC_ADH_WITH_CAMELLIA_256_CBC_SHA
 "TLS_DH_™⁄_WITH_CAMELLIA_256_CBC_SHA"

	)

760 
	#TLS1_RFC_RSA_WITH_CAMELLIA_128_CBC_SHA
 "TLS_RSA_WITH_CAMELLIA_128_CBC_SHA"

	)

761 
	#TLS1_RFC_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA
 "TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA"

	)

762 
	#TLS1_RFC_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA
 "TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA"

	)

763 
	#TLS1_RFC_ADH_WITH_CAMELLIA_128_CBC_SHA
 "TLS_DH_™⁄_WITH_CAMELLIA_128_CBC_SHA"

	)

764 
	#TLS1_RFC_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256
 "TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256"

	)

765 
	#TLS1_RFC_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384
 "TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384"

	)

766 
	#TLS1_RFC_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256
 "TLS_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256"

	)

767 
	#TLS1_RFC_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384
 "TLS_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384"

	)

768 
	#TLS1_RFC_PSK_WITH_CAMELLIA_128_CBC_SHA256
 "TLS_PSK_WITH_CAMELLIA_128_CBC_SHA256"

	)

769 
	#TLS1_RFC_PSK_WITH_CAMELLIA_256_CBC_SHA384
 "TLS_PSK_WITH_CAMELLIA_256_CBC_SHA384"

	)

770 
	#TLS1_RFC_DHE_PSK_WITH_CAMELLIA_128_CBC_SHA256
 "TLS_DHE_PSK_WITH_CAMELLIA_128_CBC_SHA256"

	)

771 
	#TLS1_RFC_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384
 "TLS_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384"

	)

772 
	#TLS1_RFC_RSA_PSK_WITH_CAMELLIA_128_CBC_SHA256
 "TLS_RSA_PSK_WITH_CAMELLIA_128_CBC_SHA256"

	)

773 
	#TLS1_RFC_RSA_PSK_WITH_CAMELLIA_256_CBC_SHA384
 "TLS_RSA_PSK_WITH_CAMELLIA_256_CBC_SHA384"

	)

774 
	#TLS1_RFC_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256
 "TLS_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256"

	)

775 
	#TLS1_RFC_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384
 "TLS_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384"

	)

776 
	#TLS1_RFC_RSA_WITH_SEED_SHA
 "TLS_RSA_WITH_SEED_CBC_SHA"

	)

777 
	#TLS1_RFC_DHE_DSS_WITH_SEED_SHA
 "TLS_DHE_DSS_WITH_SEED_CBC_SHA"

	)

778 
	#TLS1_RFC_DHE_RSA_WITH_SEED_SHA
 "TLS_DHE_RSA_WITH_SEED_CBC_SHA"

	)

779 
	#TLS1_RFC_ADH_WITH_SEED_SHA
 "TLS_DH_™⁄_WITH_SEED_CBC_SHA"

	)

780 
	#TLS1_RFC_ECDHE_PSK_WITH_RC4_128_SHA
 "TLS_ECDHE_PSK_WITH_RC4_128_SHA"

	)

781 
	#TLS1_RFC_ECDH_™⁄_WITH_RC4_128_SHA
 "TLS_ECDH_™⁄_WITH_RC4_128_SHA"

	)

782 
	#TLS1_RFC_ECDHE_ECDSA_WITH_RC4_128_SHA
 "TLS_ECDHE_ECDSA_WITH_RC4_128_SHA"

	)

783 
	#TLS1_RFC_ECDHE_RSA_WITH_RC4_128_SHA
 "TLS_ECDHE_RSA_WITH_RC4_128_SHA"

	)

784 
	#TLS1_RFC_PSK_WITH_RC4_128_SHA
 "TLS_PSK_WITH_RC4_128_SHA"

	)

785 
	#TLS1_RFC_RSA_PSK_WITH_RC4_128_SHA
 "TLS_RSA_PSK_WITH_RC4_128_SHA"

	)

786 
	#TLS1_RFC_DHE_PSK_WITH_RC4_128_SHA
 "TLS_DHE_PSK_WITH_RC4_128_SHA"

	)

787 
	#TLS1_RFC_RSA_WITH_ARIA_128_GCM_SHA256
 "TLS_RSA_WITH_ARIA_128_GCM_SHA256"

	)

788 
	#TLS1_RFC_RSA_WITH_ARIA_256_GCM_SHA384
 "TLS_RSA_WITH_ARIA_256_GCM_SHA384"

	)

789 
	#TLS1_RFC_DHE_RSA_WITH_ARIA_128_GCM_SHA256
 "TLS_DHE_RSA_WITH_ARIA_128_GCM_SHA256"

	)

790 
	#TLS1_RFC_DHE_RSA_WITH_ARIA_256_GCM_SHA384
 "TLS_DHE_RSA_WITH_ARIA_256_GCM_SHA384"

	)

791 
	#TLS1_RFC_DH_RSA_WITH_ARIA_128_GCM_SHA256
 "TLS_DH_RSA_WITH_ARIA_128_GCM_SHA256"

	)

792 
	#TLS1_RFC_DH_RSA_WITH_ARIA_256_GCM_SHA384
 "TLS_DH_RSA_WITH_ARIA_256_GCM_SHA384"

	)

793 
	#TLS1_RFC_DHE_DSS_WITH_ARIA_128_GCM_SHA256
 "TLS_DHE_DSS_WITH_ARIA_128_GCM_SHA256"

	)

794 
	#TLS1_RFC_DHE_DSS_WITH_ARIA_256_GCM_SHA384
 "TLS_DHE_DSS_WITH_ARIA_256_GCM_SHA384"

	)

795 
	#TLS1_RFC_DH_DSS_WITH_ARIA_128_GCM_SHA256
 "TLS_DH_DSS_WITH_ARIA_128_GCM_SHA256"

	)

796 
	#TLS1_RFC_DH_DSS_WITH_ARIA_256_GCM_SHA384
 "TLS_DH_DSS_WITH_ARIA_256_GCM_SHA384"

	)

797 
	#TLS1_RFC_DH_™⁄_WITH_ARIA_128_GCM_SHA256
 "TLS_DH_™⁄_WITH_ARIA_128_GCM_SHA256"

	)

798 
	#TLS1_RFC_DH_™⁄_WITH_ARIA_256_GCM_SHA384
 "TLS_DH_™⁄_WITH_ARIA_256_GCM_SHA384"

	)

799 
	#TLS1_RFC_ECDHE_ECDSA_WITH_ARIA_128_GCM_SHA256
 "TLS_ECDHE_ECDSA_WITH_ARIA_128_GCM_SHA256"

	)

800 
	#TLS1_RFC_ECDHE_ECDSA_WITH_ARIA_256_GCM_SHA384
 "TLS_ECDHE_ECDSA_WITH_ARIA_256_GCM_SHA384"

	)

801 
	#TLS1_RFC_ECDH_ECDSA_WITH_ARIA_128_GCM_SHA256
 "TLS_ECDH_ECDSA_WITH_ARIA_128_GCM_SHA256"

	)

802 
	#TLS1_RFC_ECDH_ECDSA_WITH_ARIA_256_GCM_SHA384
 "TLS_ECDH_ECDSA_WITH_ARIA_256_GCM_SHA384"

	)

803 
	#TLS1_RFC_ECDHE_RSA_WITH_ARIA_128_GCM_SHA256
 "TLS_ECDHE_RSA_WITH_ARIA_128_GCM_SHA256"

	)

804 
	#TLS1_RFC_ECDHE_RSA_WITH_ARIA_256_GCM_SHA384
 "TLS_ECDHE_RSA_WITH_ARIA_256_GCM_SHA384"

	)

805 
	#TLS1_RFC_ECDH_RSA_WITH_ARIA_128_GCM_SHA256
 "TLS_ECDH_RSA_WITH_ARIA_128_GCM_SHA256"

	)

806 
	#TLS1_RFC_ECDH_RSA_WITH_ARIA_256_GCM_SHA384
 "TLS_ECDH_RSA_WITH_ARIA_256_GCM_SHA384"

	)

807 
	#TLS1_RFC_PSK_WITH_ARIA_128_GCM_SHA256
 "TLS_PSK_WITH_ARIA_128_GCM_SHA256"

	)

808 
	#TLS1_RFC_PSK_WITH_ARIA_256_GCM_SHA384
 "TLS_PSK_WITH_ARIA_256_GCM_SHA384"

	)

809 
	#TLS1_RFC_DHE_PSK_WITH_ARIA_128_GCM_SHA256
 "TLS_DHE_PSK_WITH_ARIA_128_GCM_SHA256"

	)

810 
	#TLS1_RFC_DHE_PSK_WITH_ARIA_256_GCM_SHA384
 "TLS_DHE_PSK_WITH_ARIA_256_GCM_SHA384"

	)

811 
	#TLS1_RFC_RSA_PSK_WITH_ARIA_128_GCM_SHA256
 "TLS_RSA_PSK_WITH_ARIA_128_GCM_SHA256"

	)

812 
	#TLS1_RFC_RSA_PSK_WITH_ARIA_256_GCM_SHA384
 "TLS_RSA_PSK_WITH_ARIA_256_GCM_SHA384"

	)

821 
	#TLS1_TXT_DHE_DSS_WITH_RC4_128_SHA
 "DHE-DSS-RC4-SHA"

	)

823 
	#TLS1_TXT_PSK_WITH_NULL_SHA
 "PSK-NULL-SHA"

	)

824 
	#TLS1_TXT_DHE_PSK_WITH_NULL_SHA
 "DHE-PSK-NULL-SHA"

	)

825 
	#TLS1_TXT_RSA_PSK_WITH_NULL_SHA
 "RSA-PSK-NULL-SHA"

	)

828 
	#TLS1_TXT_RSA_WITH_AES_128_SHA
 "AES128-SHA"

	)

829 
	#TLS1_TXT_DH_DSS_WITH_AES_128_SHA
 "DH-DSS-AES128-SHA"

	)

830 
	#TLS1_TXT_DH_RSA_WITH_AES_128_SHA
 "DH-RSA-AES128-SHA"

	)

831 
	#TLS1_TXT_DHE_DSS_WITH_AES_128_SHA
 "DHE-DSS-AES128-SHA"

	)

832 
	#TLS1_TXT_DHE_RSA_WITH_AES_128_SHA
 "DHE-RSA-AES128-SHA"

	)

833 
	#TLS1_TXT_ADH_WITH_AES_128_SHA
 "ADH-AES128-SHA"

	)

835 
	#TLS1_TXT_RSA_WITH_AES_256_SHA
 "AES256-SHA"

	)

836 
	#TLS1_TXT_DH_DSS_WITH_AES_256_SHA
 "DH-DSS-AES256-SHA"

	)

837 
	#TLS1_TXT_DH_RSA_WITH_AES_256_SHA
 "DH-RSA-AES256-SHA"

	)

838 
	#TLS1_TXT_DHE_DSS_WITH_AES_256_SHA
 "DHE-DSS-AES256-SHA"

	)

839 
	#TLS1_TXT_DHE_RSA_WITH_AES_256_SHA
 "DHE-RSA-AES256-SHA"

	)

840 
	#TLS1_TXT_ADH_WITH_AES_256_SHA
 "ADH-AES256-SHA"

	)

843 
	#TLS1_TXT_ECDH_ECDSA_WITH_NULL_SHA
 "ECDH-ECDSA-NULL-SHA"

	)

844 
	#TLS1_TXT_ECDH_ECDSA_WITH_RC4_128_SHA
 "ECDH-ECDSA-RC4-SHA"

	)

845 
	#TLS1_TXT_ECDH_ECDSA_WITH_DES_192_CBC3_SHA
 "ECDH-ECDSA-DES-CBC3-SHA"

	)

846 
	#TLS1_TXT_ECDH_ECDSA_WITH_AES_128_CBC_SHA
 "ECDH-ECDSA-AES128-SHA"

	)

847 
	#TLS1_TXT_ECDH_ECDSA_WITH_AES_256_CBC_SHA
 "ECDH-ECDSA-AES256-SHA"

	)

849 
	#TLS1_TXT_ECDHE_ECDSA_WITH_NULL_SHA
 "ECDHE-ECDSA-NULL-SHA"

	)

850 
	#TLS1_TXT_ECDHE_ECDSA_WITH_RC4_128_SHA
 "ECDHE-ECDSA-RC4-SHA"

	)

851 
	#TLS1_TXT_ECDHE_ECDSA_WITH_DES_192_CBC3_SHA
 "ECDHE-ECDSA-DES-CBC3-SHA"

	)

852 
	#TLS1_TXT_ECDHE_ECDSA_WITH_AES_128_CBC_SHA
 "ECDHE-ECDSA-AES128-SHA"

	)

853 
	#TLS1_TXT_ECDHE_ECDSA_WITH_AES_256_CBC_SHA
 "ECDHE-ECDSA-AES256-SHA"

	)

855 
	#TLS1_TXT_ECDH_RSA_WITH_NULL_SHA
 "ECDH-RSA-NULL-SHA"

	)

856 
	#TLS1_TXT_ECDH_RSA_WITH_RC4_128_SHA
 "ECDH-RSA-RC4-SHA"

	)

857 
	#TLS1_TXT_ECDH_RSA_WITH_DES_192_CBC3_SHA
 "ECDH-RSA-DES-CBC3-SHA"

	)

858 
	#TLS1_TXT_ECDH_RSA_WITH_AES_128_CBC_SHA
 "ECDH-RSA-AES128-SHA"

	)

859 
	#TLS1_TXT_ECDH_RSA_WITH_AES_256_CBC_SHA
 "ECDH-RSA-AES256-SHA"

	)

861 
	#TLS1_TXT_ECDHE_RSA_WITH_NULL_SHA
 "ECDHE-RSA-NULL-SHA"

	)

862 
	#TLS1_TXT_ECDHE_RSA_WITH_RC4_128_SHA
 "ECDHE-RSA-RC4-SHA"

	)

863 
	#TLS1_TXT_ECDHE_RSA_WITH_DES_192_CBC3_SHA
 "ECDHE-RSA-DES-CBC3-SHA"

	)

864 
	#TLS1_TXT_ECDHE_RSA_WITH_AES_128_CBC_SHA
 "ECDHE-RSA-AES128-SHA"

	)

865 
	#TLS1_TXT_ECDHE_RSA_WITH_AES_256_CBC_SHA
 "ECDHE-RSA-AES256-SHA"

	)

867 
	#TLS1_TXT_ECDH_™⁄_WITH_NULL_SHA
 "AECDH-NULL-SHA"

	)

868 
	#TLS1_TXT_ECDH_™⁄_WITH_RC4_128_SHA
 "AECDH-RC4-SHA"

	)

869 
	#TLS1_TXT_ECDH_™⁄_WITH_DES_192_CBC3_SHA
 "AECDH-DES-CBC3-SHA"

	)

870 
	#TLS1_TXT_ECDH_™⁄_WITH_AES_128_CBC_SHA
 "AECDH-AES128-SHA"

	)

871 
	#TLS1_TXT_ECDH_™⁄_WITH_AES_256_CBC_SHA
 "AECDH-AES256-SHA"

	)

874 
	#TLS1_TXT_PSK_WITH_RC4_128_SHA
 "PSK-RC4-SHA"

	)

875 
	#TLS1_TXT_PSK_WITH_3DES_EDE_CBC_SHA
 "PSK-3DES-EDE-CBC-SHA"

	)

876 
	#TLS1_TXT_PSK_WITH_AES_128_CBC_SHA
 "PSK-AES128-CBC-SHA"

	)

877 
	#TLS1_TXT_PSK_WITH_AES_256_CBC_SHA
 "PSK-AES256-CBC-SHA"

	)

879 
	#TLS1_TXT_DHE_PSK_WITH_RC4_128_SHA
 "DHE-PSK-RC4-SHA"

	)

880 
	#TLS1_TXT_DHE_PSK_WITH_3DES_EDE_CBC_SHA
 "DHE-PSK-3DES-EDE-CBC-SHA"

	)

881 
	#TLS1_TXT_DHE_PSK_WITH_AES_128_CBC_SHA
 "DHE-PSK-AES128-CBC-SHA"

	)

882 
	#TLS1_TXT_DHE_PSK_WITH_AES_256_CBC_SHA
 "DHE-PSK-AES256-CBC-SHA"

	)

883 
	#TLS1_TXT_RSA_PSK_WITH_RC4_128_SHA
 "RSA-PSK-RC4-SHA"

	)

884 
	#TLS1_TXT_RSA_PSK_WITH_3DES_EDE_CBC_SHA
 "RSA-PSK-3DES-EDE-CBC-SHA"

	)

885 
	#TLS1_TXT_RSA_PSK_WITH_AES_128_CBC_SHA
 "RSA-PSK-AES128-CBC-SHA"

	)

886 
	#TLS1_TXT_RSA_PSK_WITH_AES_256_CBC_SHA
 "RSA-PSK-AES256-CBC-SHA"

	)

889 
	#TLS1_TXT_PSK_WITH_AES_128_GCM_SHA256
 "PSK-AES128-GCM-SHA256"

	)

890 
	#TLS1_TXT_PSK_WITH_AES_256_GCM_SHA384
 "PSK-AES256-GCM-SHA384"

	)

891 
	#TLS1_TXT_DHE_PSK_WITH_AES_128_GCM_SHA256
 "DHE-PSK-AES128-GCM-SHA256"

	)

892 
	#TLS1_TXT_DHE_PSK_WITH_AES_256_GCM_SHA384
 "DHE-PSK-AES256-GCM-SHA384"

	)

893 
	#TLS1_TXT_RSA_PSK_WITH_AES_128_GCM_SHA256
 "RSA-PSK-AES128-GCM-SHA256"

	)

894 
	#TLS1_TXT_RSA_PSK_WITH_AES_256_GCM_SHA384
 "RSA-PSK-AES256-GCM-SHA384"

	)

896 
	#TLS1_TXT_PSK_WITH_AES_128_CBC_SHA256
 "PSK-AES128-CBC-SHA256"

	)

897 
	#TLS1_TXT_PSK_WITH_AES_256_CBC_SHA384
 "PSK-AES256-CBC-SHA384"

	)

898 
	#TLS1_TXT_PSK_WITH_NULL_SHA256
 "PSK-NULL-SHA256"

	)

899 
	#TLS1_TXT_PSK_WITH_NULL_SHA384
 "PSK-NULL-SHA384"

	)

901 
	#TLS1_TXT_DHE_PSK_WITH_AES_128_CBC_SHA256
 "DHE-PSK-AES128-CBC-SHA256"

	)

902 
	#TLS1_TXT_DHE_PSK_WITH_AES_256_CBC_SHA384
 "DHE-PSK-AES256-CBC-SHA384"

	)

903 
	#TLS1_TXT_DHE_PSK_WITH_NULL_SHA256
 "DHE-PSK-NULL-SHA256"

	)

904 
	#TLS1_TXT_DHE_PSK_WITH_NULL_SHA384
 "DHE-PSK-NULL-SHA384"

	)

906 
	#TLS1_TXT_RSA_PSK_WITH_AES_128_CBC_SHA256
 "RSA-PSK-AES128-CBC-SHA256"

	)

907 
	#TLS1_TXT_RSA_PSK_WITH_AES_256_CBC_SHA384
 "RSA-PSK-AES256-CBC-SHA384"

	)

908 
	#TLS1_TXT_RSA_PSK_WITH_NULL_SHA256
 "RSA-PSK-NULL-SHA256"

	)

909 
	#TLS1_TXT_RSA_PSK_WITH_NULL_SHA384
 "RSA-PSK-NULL-SHA384"

	)

912 
	#TLS1_TXT_SRP_SHA_WITH_3DES_EDE_CBC_SHA
 "SRP-3DES-EDE-CBC-SHA"

	)

913 
	#TLS1_TXT_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA
 "SRP-RSA-3DES-EDE-CBC-SHA"

	)

914 
	#TLS1_TXT_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHA
 "SRP-DSS-3DES-EDE-CBC-SHA"

	)

915 
	#TLS1_TXT_SRP_SHA_WITH_AES_128_CBC_SHA
 "SRP-AES-128-CBC-SHA"

	)

916 
	#TLS1_TXT_SRP_SHA_RSA_WITH_AES_128_CBC_SHA
 "SRP-RSA-AES-128-CBC-SHA"

	)

917 
	#TLS1_TXT_SRP_SHA_DSS_WITH_AES_128_CBC_SHA
 "SRP-DSS-AES-128-CBC-SHA"

	)

918 
	#TLS1_TXT_SRP_SHA_WITH_AES_256_CBC_SHA
 "SRP-AES-256-CBC-SHA"

	)

919 
	#TLS1_TXT_SRP_SHA_RSA_WITH_AES_256_CBC_SHA
 "SRP-RSA-AES-256-CBC-SHA"

	)

920 
	#TLS1_TXT_SRP_SHA_DSS_WITH_AES_256_CBC_SHA
 "SRP-DSS-AES-256-CBC-SHA"

	)

923 
	#TLS1_TXT_RSA_WITH_CAMELLIA_128_CBC_SHA
 "CAMELLIA128-SHA"

	)

924 
	#TLS1_TXT_DH_DSS_WITH_CAMELLIA_128_CBC_SHA
 "DH-DSS-CAMELLIA128-SHA"

	)

925 
	#TLS1_TXT_DH_RSA_WITH_CAMELLIA_128_CBC_SHA
 "DH-RSA-CAMELLIA128-SHA"

	)

926 
	#TLS1_TXT_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA
 "DHE-DSS-CAMELLIA128-SHA"

	)

927 
	#TLS1_TXT_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA
 "DHE-RSA-CAMELLIA128-SHA"

	)

928 
	#TLS1_TXT_ADH_WITH_CAMELLIA_128_CBC_SHA
 "ADH-CAMELLIA128-SHA"

	)

930 
	#TLS1_TXT_RSA_WITH_CAMELLIA_256_CBC_SHA
 "CAMELLIA256-SHA"

	)

931 
	#TLS1_TXT_DH_DSS_WITH_CAMELLIA_256_CBC_SHA
 "DH-DSS-CAMELLIA256-SHA"

	)

932 
	#TLS1_TXT_DH_RSA_WITH_CAMELLIA_256_CBC_SHA
 "DH-RSA-CAMELLIA256-SHA"

	)

933 
	#TLS1_TXT_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA
 "DHE-DSS-CAMELLIA256-SHA"

	)

934 
	#TLS1_TXT_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA
 "DHE-RSA-CAMELLIA256-SHA"

	)

935 
	#TLS1_TXT_ADH_WITH_CAMELLIA_256_CBC_SHA
 "ADH-CAMELLIA256-SHA"

	)

938 
	#TLS1_TXT_RSA_WITH_CAMELLIA_128_CBC_SHA256
 "CAMELLIA128-SHA256"

	)

939 
	#TLS1_TXT_DH_DSS_WITH_CAMELLIA_128_CBC_SHA256
 "DH-DSS-CAMELLIA128-SHA256"

	)

940 
	#TLS1_TXT_DH_RSA_WITH_CAMELLIA_128_CBC_SHA256
 "DH-RSA-CAMELLIA128-SHA256"

	)

941 
	#TLS1_TXT_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA256
 "DHE-DSS-CAMELLIA128-SHA256"

	)

942 
	#TLS1_TXT_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256
 "DHE-RSA-CAMELLIA128-SHA256"

	)

943 
	#TLS1_TXT_ADH_WITH_CAMELLIA_128_CBC_SHA256
 "ADH-CAMELLIA128-SHA256"

	)

945 
	#TLS1_TXT_RSA_WITH_CAMELLIA_256_CBC_SHA256
 "CAMELLIA256-SHA256"

	)

946 
	#TLS1_TXT_DH_DSS_WITH_CAMELLIA_256_CBC_SHA256
 "DH-DSS-CAMELLIA256-SHA256"

	)

947 
	#TLS1_TXT_DH_RSA_WITH_CAMELLIA_256_CBC_SHA256
 "DH-RSA-CAMELLIA256-SHA256"

	)

948 
	#TLS1_TXT_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA256
 "DHE-DSS-CAMELLIA256-SHA256"

	)

949 
	#TLS1_TXT_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256
 "DHE-RSA-CAMELLIA256-SHA256"

	)

950 
	#TLS1_TXT_ADH_WITH_CAMELLIA_256_CBC_SHA256
 "ADH-CAMELLIA256-SHA256"

	)

952 
	#TLS1_TXT_PSK_WITH_CAMELLIA_128_CBC_SHA256
 "PSK-CAMELLIA128-SHA256"

	)

953 
	#TLS1_TXT_PSK_WITH_CAMELLIA_256_CBC_SHA384
 "PSK-CAMELLIA256-SHA384"

	)

954 
	#TLS1_TXT_DHE_PSK_WITH_CAMELLIA_128_CBC_SHA256
 "DHE-PSK-CAMELLIA128-SHA256"

	)

955 
	#TLS1_TXT_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384
 "DHE-PSK-CAMELLIA256-SHA384"

	)

956 
	#TLS1_TXT_RSA_PSK_WITH_CAMELLIA_128_CBC_SHA256
 "RSA-PSK-CAMELLIA128-SHA256"

	)

957 
	#TLS1_TXT_RSA_PSK_WITH_CAMELLIA_256_CBC_SHA384
 "RSA-PSK-CAMELLIA256-SHA384"

	)

958 
	#TLS1_TXT_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256
 "ECDHE-PSK-CAMELLIA128-SHA256"

	)

959 
	#TLS1_TXT_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384
 "ECDHE-PSK-CAMELLIA256-SHA384"

	)

962 
	#TLS1_TXT_RSA_WITH_SEED_SHA
 "SEED-SHA"

	)

963 
	#TLS1_TXT_DH_DSS_WITH_SEED_SHA
 "DH-DSS-SEED-SHA"

	)

964 
	#TLS1_TXT_DH_RSA_WITH_SEED_SHA
 "DH-RSA-SEED-SHA"

	)

965 
	#TLS1_TXT_DHE_DSS_WITH_SEED_SHA
 "DHE-DSS-SEED-SHA"

	)

966 
	#TLS1_TXT_DHE_RSA_WITH_SEED_SHA
 "DHE-RSA-SEED-SHA"

	)

967 
	#TLS1_TXT_ADH_WITH_SEED_SHA
 "ADH-SEED-SHA"

	)

970 
	#TLS1_TXT_RSA_WITH_NULL_SHA256
 "NULL-SHA256"

	)

971 
	#TLS1_TXT_RSA_WITH_AES_128_SHA256
 "AES128-SHA256"

	)

972 
	#TLS1_TXT_RSA_WITH_AES_256_SHA256
 "AES256-SHA256"

	)

973 
	#TLS1_TXT_DH_DSS_WITH_AES_128_SHA256
 "DH-DSS-AES128-SHA256"

	)

974 
	#TLS1_TXT_DH_RSA_WITH_AES_128_SHA256
 "DH-RSA-AES128-SHA256"

	)

975 
	#TLS1_TXT_DHE_DSS_WITH_AES_128_SHA256
 "DHE-DSS-AES128-SHA256"

	)

976 
	#TLS1_TXT_DHE_RSA_WITH_AES_128_SHA256
 "DHE-RSA-AES128-SHA256"

	)

977 
	#TLS1_TXT_DH_DSS_WITH_AES_256_SHA256
 "DH-DSS-AES256-SHA256"

	)

978 
	#TLS1_TXT_DH_RSA_WITH_AES_256_SHA256
 "DH-RSA-AES256-SHA256"

	)

979 
	#TLS1_TXT_DHE_DSS_WITH_AES_256_SHA256
 "DHE-DSS-AES256-SHA256"

	)

980 
	#TLS1_TXT_DHE_RSA_WITH_AES_256_SHA256
 "DHE-RSA-AES256-SHA256"

	)

981 
	#TLS1_TXT_ADH_WITH_AES_128_SHA256
 "ADH-AES128-SHA256"

	)

982 
	#TLS1_TXT_ADH_WITH_AES_256_SHA256
 "ADH-AES256-SHA256"

	)

985 
	#TLS1_TXT_RSA_WITH_AES_128_GCM_SHA256
 "AES128-GCM-SHA256"

	)

986 
	#TLS1_TXT_RSA_WITH_AES_256_GCM_SHA384
 "AES256-GCM-SHA384"

	)

987 
	#TLS1_TXT_DHE_RSA_WITH_AES_128_GCM_SHA256
 "DHE-RSA-AES128-GCM-SHA256"

	)

988 
	#TLS1_TXT_DHE_RSA_WITH_AES_256_GCM_SHA384
 "DHE-RSA-AES256-GCM-SHA384"

	)

989 
	#TLS1_TXT_DH_RSA_WITH_AES_128_GCM_SHA256
 "DH-RSA-AES128-GCM-SHA256"

	)

990 
	#TLS1_TXT_DH_RSA_WITH_AES_256_GCM_SHA384
 "DH-RSA-AES256-GCM-SHA384"

	)

991 
	#TLS1_TXT_DHE_DSS_WITH_AES_128_GCM_SHA256
 "DHE-DSS-AES128-GCM-SHA256"

	)

992 
	#TLS1_TXT_DHE_DSS_WITH_AES_256_GCM_SHA384
 "DHE-DSS-AES256-GCM-SHA384"

	)

993 
	#TLS1_TXT_DH_DSS_WITH_AES_128_GCM_SHA256
 "DH-DSS-AES128-GCM-SHA256"

	)

994 
	#TLS1_TXT_DH_DSS_WITH_AES_256_GCM_SHA384
 "DH-DSS-AES256-GCM-SHA384"

	)

995 
	#TLS1_TXT_ADH_WITH_AES_128_GCM_SHA256
 "ADH-AES128-GCM-SHA256"

	)

996 
	#TLS1_TXT_ADH_WITH_AES_256_GCM_SHA384
 "ADH-AES256-GCM-SHA384"

	)

999 
	#TLS1_TXT_RSA_WITH_AES_128_CCM
 "AES128-CCM"

	)

1000 
	#TLS1_TXT_RSA_WITH_AES_256_CCM
 "AES256-CCM"

	)

1001 
	#TLS1_TXT_DHE_RSA_WITH_AES_128_CCM
 "DHE-RSA-AES128-CCM"

	)

1002 
	#TLS1_TXT_DHE_RSA_WITH_AES_256_CCM
 "DHE-RSA-AES256-CCM"

	)

1004 
	#TLS1_TXT_RSA_WITH_AES_128_CCM_8
 "AES128-CCM8"

	)

1005 
	#TLS1_TXT_RSA_WITH_AES_256_CCM_8
 "AES256-CCM8"

	)

1006 
	#TLS1_TXT_DHE_RSA_WITH_AES_128_CCM_8
 "DHE-RSA-AES128-CCM8"

	)

1007 
	#TLS1_TXT_DHE_RSA_WITH_AES_256_CCM_8
 "DHE-RSA-AES256-CCM8"

	)

1009 
	#TLS1_TXT_PSK_WITH_AES_128_CCM
 "PSK-AES128-CCM"

	)

1010 
	#TLS1_TXT_PSK_WITH_AES_256_CCM
 "PSK-AES256-CCM"

	)

1011 
	#TLS1_TXT_DHE_PSK_WITH_AES_128_CCM
 "DHE-PSK-AES128-CCM"

	)

1012 
	#TLS1_TXT_DHE_PSK_WITH_AES_256_CCM
 "DHE-PSK-AES256-CCM"

	)

1014 
	#TLS1_TXT_PSK_WITH_AES_128_CCM_8
 "PSK-AES128-CCM8"

	)

1015 
	#TLS1_TXT_PSK_WITH_AES_256_CCM_8
 "PSK-AES256-CCM8"

	)

1016 
	#TLS1_TXT_DHE_PSK_WITH_AES_128_CCM_8
 "DHE-PSK-AES128-CCM8"

	)

1017 
	#TLS1_TXT_DHE_PSK_WITH_AES_256_CCM_8
 "DHE-PSK-AES256-CCM8"

	)

1020 
	#TLS1_TXT_ECDHE_ECDSA_WITH_AES_128_CCM
 "ECDHE-ECDSA-AES128-CCM"

	)

1021 
	#TLS1_TXT_ECDHE_ECDSA_WITH_AES_256_CCM
 "ECDHE-ECDSA-AES256-CCM"

	)

1022 
	#TLS1_TXT_ECDHE_ECDSA_WITH_AES_128_CCM_8
 "ECDHE-ECDSA-AES128-CCM8"

	)

1023 
	#TLS1_TXT_ECDHE_ECDSA_WITH_AES_256_CCM_8
 "ECDHE-ECDSA-AES256-CCM8"

	)

1026 
	#TLS1_TXT_ECDHE_ECDSA_WITH_AES_128_SHA256
 "ECDHE-ECDSA-AES128-SHA256"

	)

1027 
	#TLS1_TXT_ECDHE_ECDSA_WITH_AES_256_SHA384
 "ECDHE-ECDSA-AES256-SHA384"

	)

1028 
	#TLS1_TXT_ECDH_ECDSA_WITH_AES_128_SHA256
 "ECDH-ECDSA-AES128-SHA256"

	)

1029 
	#TLS1_TXT_ECDH_ECDSA_WITH_AES_256_SHA384
 "ECDH-ECDSA-AES256-SHA384"

	)

1030 
	#TLS1_TXT_ECDHE_RSA_WITH_AES_128_SHA256
 "ECDHE-RSA-AES128-SHA256"

	)

1031 
	#TLS1_TXT_ECDHE_RSA_WITH_AES_256_SHA384
 "ECDHE-RSA-AES256-SHA384"

	)

1032 
	#TLS1_TXT_ECDH_RSA_WITH_AES_128_SHA256
 "ECDH-RSA-AES128-SHA256"

	)

1033 
	#TLS1_TXT_ECDH_RSA_WITH_AES_256_SHA384
 "ECDH-RSA-AES256-SHA384"

	)

1036 
	#TLS1_TXT_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
 "ECDHE-ECDSA-AES128-GCM-SHA256"

	)

1037 
	#TLS1_TXT_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
 "ECDHE-ECDSA-AES256-GCM-SHA384"

	)

1038 
	#TLS1_TXT_ECDH_ECDSA_WITH_AES_128_GCM_SHA256
 "ECDH-ECDSA-AES128-GCM-SHA256"

	)

1039 
	#TLS1_TXT_ECDH_ECDSA_WITH_AES_256_GCM_SHA384
 "ECDH-ECDSA-AES256-GCM-SHA384"

	)

1040 
	#TLS1_TXT_ECDHE_RSA_WITH_AES_128_GCM_SHA256
 "ECDHE-RSA-AES128-GCM-SHA256"

	)

1041 
	#TLS1_TXT_ECDHE_RSA_WITH_AES_256_GCM_SHA384
 "ECDHE-RSA-AES256-GCM-SHA384"

	)

1042 
	#TLS1_TXT_ECDH_RSA_WITH_AES_128_GCM_SHA256
 "ECDH-RSA-AES128-GCM-SHA256"

	)

1043 
	#TLS1_TXT_ECDH_RSA_WITH_AES_256_GCM_SHA384
 "ECDH-RSA-AES256-GCM-SHA384"

	)

1046 
	#TLS1_TXT_PSK_WITH_AES_128_GCM_SHA256
 "PSK-AES128-GCM-SHA256"

	)

1047 
	#TLS1_TXT_PSK_WITH_AES_256_GCM_SHA384
 "PSK-AES256-GCM-SHA384"

	)

1050 
	#TLS1_TXT_ECDHE_PSK_WITH_RC4_128_SHA
 "ECDHE-PSK-RC4-SHA"

	)

1051 
	#TLS1_TXT_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA
 "ECDHE-PSK-3DES-EDE-CBC-SHA"

	)

1052 
	#TLS1_TXT_ECDHE_PSK_WITH_AES_128_CBC_SHA
 "ECDHE-PSK-AES128-CBC-SHA"

	)

1053 
	#TLS1_TXT_ECDHE_PSK_WITH_AES_256_CBC_SHA
 "ECDHE-PSK-AES256-CBC-SHA"

	)

1055 
	#TLS1_TXT_ECDHE_PSK_WITH_AES_128_CBC_SHA256
 "ECDHE-PSK-AES128-CBC-SHA256"

	)

1056 
	#TLS1_TXT_ECDHE_PSK_WITH_AES_256_CBC_SHA384
 "ECDHE-PSK-AES256-CBC-SHA384"

	)

1058 
	#TLS1_TXT_ECDHE_PSK_WITH_NULL_SHA
 "ECDHE-PSK-NULL-SHA"

	)

1059 
	#TLS1_TXT_ECDHE_PSK_WITH_NULL_SHA256
 "ECDHE-PSK-NULL-SHA256"

	)

1060 
	#TLS1_TXT_ECDHE_PSK_WITH_NULL_SHA384
 "ECDHE-PSK-NULL-SHA384"

	)

1063 
	#TLS1_TXT_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256
 "ECDHE-ECDSA-CAMELLIA128-SHA256"

	)

1064 
	#TLS1_TXT_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384
 "ECDHE-ECDSA-CAMELLIA256-SHA384"

	)

1065 
	#TLS1_TXT_ECDH_ECDSA_WITH_CAMELLIA_128_CBC_SHA256
 "ECDH-ECDSA-CAMELLIA128-SHA256"

	)

1066 
	#TLS1_TXT_ECDH_ECDSA_WITH_CAMELLIA_256_CBC_SHA384
 "ECDH-ECDSA-CAMELLIA256-SHA384"

	)

1067 
	#TLS1_TXT_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256
 "ECDHE-RSA-CAMELLIA128-SHA256"

	)

1068 
	#TLS1_TXT_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384
 "ECDHE-RSA-CAMELLIA256-SHA384"

	)

1069 
	#TLS1_TXT_ECDH_RSA_WITH_CAMELLIA_128_CBC_SHA256
 "ECDH-RSA-CAMELLIA128-SHA256"

	)

1070 
	#TLS1_TXT_ECDH_RSA_WITH_CAMELLIA_256_CBC_SHA384
 "ECDH-RSA-CAMELLIA256-SHA384"

	)

1073 
	#TLS1_TXT_ECDHE_RSA_WITH_CHACHA20_POLY1305
 "ECDHE-RSA-CHACHA20-POLY1305"

	)

1074 
	#TLS1_TXT_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
 "ECDHE-ECDSA-CHACHA20-POLY1305"

	)

1075 
	#TLS1_TXT_DHE_RSA_WITH_CHACHA20_POLY1305
 "DHE-RSA-CHACHA20-POLY1305"

	)

1076 
	#TLS1_TXT_PSK_WITH_CHACHA20_POLY1305
 "PSK-CHACHA20-POLY1305"

	)

1077 
	#TLS1_TXT_ECDHE_PSK_WITH_CHACHA20_POLY1305
 "ECDHE-PSK-CHACHA20-POLY1305"

	)

1078 
	#TLS1_TXT_DHE_PSK_WITH_CHACHA20_POLY1305
 "DHE-PSK-CHACHA20-POLY1305"

	)

1079 
	#TLS1_TXT_RSA_PSK_WITH_CHACHA20_POLY1305
 "RSA-PSK-CHACHA20-POLY1305"

	)

1082 
	#TLS1_TXT_RSA_WITH_ARIA_128_GCM_SHA256
 "ARIA128-GCM-SHA256"

	)

1083 
	#TLS1_TXT_RSA_WITH_ARIA_256_GCM_SHA384
 "ARIA256-GCM-SHA384"

	)

1084 
	#TLS1_TXT_DHE_RSA_WITH_ARIA_128_GCM_SHA256
 "DHE-RSA-ARIA128-GCM-SHA256"

	)

1085 
	#TLS1_TXT_DHE_RSA_WITH_ARIA_256_GCM_SHA384
 "DHE-RSA-ARIA256-GCM-SHA384"

	)

1086 
	#TLS1_TXT_DH_RSA_WITH_ARIA_128_GCM_SHA256
 "DH-RSA-ARIA128-GCM-SHA256"

	)

1087 
	#TLS1_TXT_DH_RSA_WITH_ARIA_256_GCM_SHA384
 "DH-RSA-ARIA256-GCM-SHA384"

	)

1088 
	#TLS1_TXT_DHE_DSS_WITH_ARIA_128_GCM_SHA256
 "DHE-DSS-ARIA128-GCM-SHA256"

	)

1089 
	#TLS1_TXT_DHE_DSS_WITH_ARIA_256_GCM_SHA384
 "DHE-DSS-ARIA256-GCM-SHA384"

	)

1090 
	#TLS1_TXT_DH_DSS_WITH_ARIA_128_GCM_SHA256
 "DH-DSS-ARIA128-GCM-SHA256"

	)

1091 
	#TLS1_TXT_DH_DSS_WITH_ARIA_256_GCM_SHA384
 "DH-DSS-ARIA256-GCM-SHA384"

	)

1092 
	#TLS1_TXT_DH_™⁄_WITH_ARIA_128_GCM_SHA256
 "ADH-ARIA128-GCM-SHA256"

	)

1093 
	#TLS1_TXT_DH_™⁄_WITH_ARIA_256_GCM_SHA384
 "ADH-ARIA256-GCM-SHA384"

	)

1094 
	#TLS1_TXT_ECDHE_ECDSA_WITH_ARIA_128_GCM_SHA256
 "ECDHE-ECDSA-ARIA128-GCM-SHA256"

	)

1095 
	#TLS1_TXT_ECDHE_ECDSA_WITH_ARIA_256_GCM_SHA384
 "ECDHE-ECDSA-ARIA256-GCM-SHA384"

	)

1096 
	#TLS1_TXT_ECDH_ECDSA_WITH_ARIA_128_GCM_SHA256
 "ECDH-ECDSA-ARIA128-GCM-SHA256"

	)

1097 
	#TLS1_TXT_ECDH_ECDSA_WITH_ARIA_256_GCM_SHA384
 "ECDH-ECDSA-ARIA256-GCM-SHA384"

	)

1098 
	#TLS1_TXT_ECDHE_RSA_WITH_ARIA_128_GCM_SHA256
 "ECDHE-ARIA128-GCM-SHA256"

	)

1099 
	#TLS1_TXT_ECDHE_RSA_WITH_ARIA_256_GCM_SHA384
 "ECDHE-ARIA256-GCM-SHA384"

	)

1100 
	#TLS1_TXT_ECDH_RSA_WITH_ARIA_128_GCM_SHA256
 "ECDH-ARIA128-GCM-SHA256"

	)

1101 
	#TLS1_TXT_ECDH_RSA_WITH_ARIA_256_GCM_SHA384
 "ECDH-ARIA256-GCM-SHA384"

	)

1102 
	#TLS1_TXT_PSK_WITH_ARIA_128_GCM_SHA256
 "PSK-ARIA128-GCM-SHA256"

	)

1103 
	#TLS1_TXT_PSK_WITH_ARIA_256_GCM_SHA384
 "PSK-ARIA256-GCM-SHA384"

	)

1104 
	#TLS1_TXT_DHE_PSK_WITH_ARIA_128_GCM_SHA256
 "DHE-PSK-ARIA128-GCM-SHA256"

	)

1105 
	#TLS1_TXT_DHE_PSK_WITH_ARIA_256_GCM_SHA384
 "DHE-PSK-ARIA256-GCM-SHA384"

	)

1106 
	#TLS1_TXT_RSA_PSK_WITH_ARIA_128_GCM_SHA256
 "RSA-PSK-ARIA128-GCM-SHA256"

	)

1107 
	#TLS1_TXT_RSA_PSK_WITH_ARIA_256_GCM_SHA384
 "RSA-PSK-ARIA256-GCM-SHA384"

	)

1109 
	#TLS_CT_RSA_SIGN
 1

	)

1110 
	#TLS_CT_DSS_SIGN
 2

	)

1111 
	#TLS_CT_RSA_FIXED_DH
 3

	)

1112 
	#TLS_CT_DSS_FIXED_DH
 4

	)

1113 
	#TLS_CT_ECDSA_SIGN
 64

	)

1114 
	#TLS_CT_RSA_FIXED_ECDH
 65

	)

1115 
	#TLS_CT_ECDSA_FIXED_ECDH
 66

	)

1116 
	#TLS_CT_GOST01_SIGN
 22

	)

1117 
	#TLS_CT_GOST12_IANA_SIGN
 67

	)

1118 
	#TLS_CT_GOST12_IANA_512_SIGN
 68

	)

1119 
	#TLS_CT_GOST12_LEGACY_SIGN
 238

	)

1120 
	#TLS_CT_GOST12_LEGACY_512_SIGN
 239

	)

1122 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


1123 
	#TLS_CT_GOST12_SIGN
 
TLS_CT_GOST12_LEGACY_SIGN


	)

1124 
	#TLS_CT_GOST12_512_SIGN
 
TLS_CT_GOST12_LEGACY_512_SIGN


	)

1131 
	#TLS_CT_NUMBER
 12

	)

1133 #i‡
deföed
(
SSL3_CT_NUMBER
)

1134 #i‡
TLS_CT_NUMBER
 !
SSL3_CT_NUMBER


1139 
	#TLS1_FINISH_MAC_LENGTH
 12

	)

1141 
	#TLS_MD_MAX_CONST_SIZE
 22

	)

1142 
	#TLS_MD_CLIENT_FINISH_CONST
 "˛õ¡ föished"

	)

1143 
	#TLS_MD_CLIENT_FINISH_CONST_SIZE
 15

	)

1144 
	#TLS_MD_SERVER_FINISH_CONST
 "£rvî föished"

	)

1145 
	#TLS_MD_SERVER_FINISH_CONST_SIZE
 15

	)

1146 
	#TLS_MD_KEY_EXPANSION_CONST
 "keyÉx∑nsi⁄"

	)

1147 
	#TLS_MD_KEY_EXPANSION_CONST_SIZE
 13

	)

1148 
	#TLS_MD_CLIENT_WRITE_KEY_CONST
 "˛õ¡ wrôêkey"

	)

1149 
	#TLS_MD_CLIENT_WRITE_KEY_CONST_SIZE
 16

	)

1150 
	#TLS_MD_SERVER_WRITE_KEY_CONST
 "£rvî wrôêkey"

	)

1151 
	#TLS_MD_SERVER_WRITE_KEY_CONST_SIZE
 16

	)

1152 
	#TLS_MD_IV_BLOCK_CONST
 "IV block"

	)

1153 
	#TLS_MD_IV_BLOCK_CONST_SIZE
 8

	)

1154 
	#TLS_MD_MASTER_SECRET_CONST
 "ma°î se¸ë"

	)

1155 
	#TLS_MD_MASTER_SECRET_CONST_SIZE
 13

	)

1156 
	#TLS_MD_EXTENDED_MASTER_SECRET_CONST
 "exãnded ma°î se¸ë"

	)

1157 
	#TLS_MD_EXTENDED_MASTER_SECRET_CONST_SIZE
 22

	)

1159 #ifde‡
CHARSET_EBCDIC


1160 #unde‡
TLS_MD_CLIENT_FINISH_CONST


1164 
	#TLS_MD_CLIENT_FINISH_CONST
 "\x63\x6c\x69\x65\x6e\x74\x20\x66\x69\x6e\x69\x73\x68\x65\x64"

	)

1166 #unde‡
TLS_MD_SERVER_FINISH_CONST


1170 
	#TLS_MD_SERVER_FINISH_CONST
 "\x73\x65\x72\x76\x65\x72\x20\x66\x69\x6e\x69\x73\x68\x65\x64"

	)

1172 #unde‡
TLS_MD_SERVER_WRITE_KEY_CONST


1176 
	#TLS_MD_SERVER_WRITE_KEY_CONST
 "\x73\x65\x72\x76\x65\x72\x20\x77\x72\x69\x74\x65\x20\x6b\x65\x79"

	)

1178 #unde‡
TLS_MD_KEY_EXPANSION_CONST


1182 
	#TLS_MD_KEY_EXPANSION_CONST
 "\x6b\x65\x79\x20\x65\x78\x70\x61\x6e\x73\x69\x6f\x6e"

	)

1184 #unde‡
TLS_MD_CLIENT_WRITE_KEY_CONST


1188 
	#TLS_MD_CLIENT_WRITE_KEY_CONST
 "\x63\x6c\x69\x65\x6e\x74\x20\x77\x72\x69\x74\x65\x20\x6b\x65\x79"

	)

1190 #unde‡
TLS_MD_SERVER_WRITE_KEY_CONST


1194 
	#TLS_MD_SERVER_WRITE_KEY_CONST
 "\x73\x65\x72\x76\x65\x72\x20\x77\x72\x69\x74\x65\x20\x6b\x65\x79"

	)

1196 #unde‡
TLS_MD_IV_BLOCK_CONST


1200 
	#TLS_MD_IV_BLOCK_CONST
 "\x49\x56\x20\x62\x6c\x6f\x63\x6b"

	)

1202 #unde‡
TLS_MD_MASTER_SECRET_CONST


1206 
	#TLS_MD_MASTER_SECRET_CONST
 "\x6d\x61\x73\x74\x65\x72\x20\x73\x65\x63\x72\x65\x74"

	)

1207 #unde‡
TLS_MD_EXTENDED_MASTER_SECRET_CONST


1211 
	#TLS_MD_EXTENDED_MASTER_SECRET_CONST
 "\x65\x78\x74\x65\x6e\x64\x65\x64\x20\x6d\x61\x73\x74\x65\x72\x20\x73\x65\x63\x72\x65\x74"

	)

1215 
	sés_£ssi⁄_tickë_ext_°
 {

1216 
Àngth
;

1217 *
d©a
;

1220 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/x509.h

16 #i‚de‡
OPENSSL_X509_H


17 
	#OPENSSL_X509_H


	)

18 #¥agm®
⁄˚


20 
	~<›ís¶/ma¸os.h
>

21 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


22 
	#HEADER_X509_H


	)

25 
	~<›ís¶/e_os2.h
>

26 
	~<›ís¶/ty≥s.h
>

27 
	~<›ís¶/symhacks.h
>

28 
	~<›ís¶/buf„r.h
>

29 
	~<›ís¶/evp.h
>

30 
	~<›ís¶/bio.h
>

31 
	~<›ís¶/a¢1.h
>

32 
	~<›ís¶/ß„°ack.h
>

33 
	~<›ís¶/ec.h
>

35 #i‚de‡
OPENSSL_NO_DEPRECATED_1_1_0


36 
	~<›ís¶/rß.h
>

37 
	~<›ís¶/dß.h
>

38 
	~<›ís¶/dh.h
>

41 
	~<›ís¶/sha.h
>

42 
	~<›ís¶/x509îr.h
>

44 #ifde‡ 
__˝lu•lus


49 
SKM_DEFINE_STACK_OF_INTERNAL
(
X509_NAME
, X509_NAME, X509_NAME)

50 
	#sk_X509_NAME_num
(
sk
Ë
	`OPENSSL_sk_num
(
	`os¶_check_c⁄°_X509_NAME_sk_ty≥
(sk))

	)

51 
	#sk_X509_NAME_vÆue
(
sk
, 
idx
Ë((
X509_NAME
 *)
	`OPENSSL_sk_vÆue
(
	`os¶_check_c⁄°_X509_NAME_sk_ty≥
(sk), (idx)))

	)

52 
	#sk_X509_NAME_√w
(
cmp
Ë((
	`STACK_OF
(
X509_NAME
Ë*)
	`OPENSSL_sk_√w
(
	`os¶_check_X509_NAME_compfunc_ty≥
(cmp)))

	)

53 
	#sk_X509_NAME_√w_nuŒ
(Ë((
	`STACK_OF
(
X509_NAME
Ë*)
	`OPENSSL_sk_√w_nuŒ
())

	)

54 
	#sk_X509_NAME_√w_ª£rve
(
cmp
, 
n
Ë((
	`STACK_OF
(
X509_NAME
Ë*)
	`OPENSSL_sk_√w_ª£rve
(
	`os¶_check_X509_NAME_compfunc_ty≥
(cmp), (n)))

	)

55 
	#sk_X509_NAME_ª£rve
(
sk
, 
n
Ë
	`OPENSSL_sk_ª£rve
(
	`os¶_check_X509_NAME_sk_ty≥
(sk), (n))

	)

56 
	#sk_X509_NAME_‰ì
(
sk
Ë
	`OPENSSL_sk_‰ì
(
	`os¶_check_X509_NAME_sk_ty≥
(sk))

	)

57 
	#sk_X509_NAME_zîo
(
sk
Ë
	`OPENSSL_sk_zîo
(
	`os¶_check_X509_NAME_sk_ty≥
(sk))

	)

58 
	#sk_X509_NAME_dñëe
(
sk
, 
i
Ë((
X509_NAME
 *)
	`OPENSSL_sk_dñëe
(
	`os¶_check_X509_NAME_sk_ty≥
(sk), (i)))

	)

59 
	#sk_X509_NAME_dñëe_±r
(
sk
, 
±r
Ë((
X509_NAME
 *)
	`OPENSSL_sk_dñëe_±r
(
	`os¶_check_X509_NAME_sk_ty≥
(sk), 
	`os¶_check_X509_NAME_ty≥
’å)))

	)

60 
	#sk_X509_NAME_push
(
sk
, 
±r
Ë
	`OPENSSL_sk_push
(
	`os¶_check_X509_NAME_sk_ty≥
(sk), 
	`os¶_check_X509_NAME_ty≥
’å))

	)

61 
	#sk_X509_NAME_unshi·
(
sk
, 
±r
Ë
	`OPENSSL_sk_unshi·
(
	`os¶_check_X509_NAME_sk_ty≥
(sk), 
	`os¶_check_X509_NAME_ty≥
’å))

	)

62 
	#sk_X509_NAME_p›
(
sk
Ë((
X509_NAME
 *)
	`OPENSSL_sk_p›
(
	`os¶_check_X509_NAME_sk_ty≥
(sk)))

	)

63 
	#sk_X509_NAME_shi·
(
sk
Ë((
X509_NAME
 *)
	`OPENSSL_sk_shi·
(
	`os¶_check_X509_NAME_sk_ty≥
(sk)))

	)

64 
	#sk_X509_NAME_p›_‰ì
(
sk
, 
‰ìfunc
Ë
	`OPENSSL_sk_p›_‰ì
(
	`os¶_check_X509_NAME_sk_ty≥
(sk),
	`os¶_check_X509_NAME_‰ìfunc_ty≥
(‰ìfunc))

	)

65 
	#sk_X509_NAME_ö£π
(
sk
, 
±r
, 
idx
Ë
	`OPENSSL_sk_ö£π
(
	`os¶_check_X509_NAME_sk_ty≥
(sk), 
	`os¶_check_X509_NAME_ty≥
’å), (idx))

	)

66 
	#sk_X509_NAME_£t
(
sk
, 
idx
, 
±r
Ë((
X509_NAME
 *)
	`OPENSSL_sk_£t
(
	`os¶_check_X509_NAME_sk_ty≥
(sk), (idx), 
	`os¶_check_X509_NAME_ty≥
’å)))

	)

67 
	#sk_X509_NAME_föd
(
sk
, 
±r
Ë
	`OPENSSL_sk_föd
(
	`os¶_check_X509_NAME_sk_ty≥
(sk), 
	`os¶_check_X509_NAME_ty≥
’å))

	)

68 
	#sk_X509_NAME_föd_ex
(
sk
, 
±r
Ë
	`OPENSSL_sk_föd_ex
(
	`os¶_check_X509_NAME_sk_ty≥
(sk), 
	`os¶_check_X509_NAME_ty≥
’å))

	)

69 
	#sk_X509_NAME_föd_Æl
(
sk
, 
±r
, 
≤um
Ë
	`OPENSSL_sk_föd_Æl
(
	`os¶_check_X509_NAME_sk_ty≥
(sk), 
	`os¶_check_X509_NAME_ty≥
’å),Önum)

	)

70 
	#sk_X509_NAME_s‹t
(
sk
Ë
	`OPENSSL_sk_s‹t
(
	`os¶_check_X509_NAME_sk_ty≥
(sk))

	)

71 
	#sk_X509_NAME_is_s‹ãd
(
sk
Ë
	`OPENSSL_sk_is_s‹ãd
(
	`os¶_check_c⁄°_X509_NAME_sk_ty≥
(sk))

	)

72 
	#sk_X509_NAME_dup
(
sk
Ë((
	`STACK_OF
(
X509_NAME
Ë*)
	`OPENSSL_sk_dup
(
	`os¶_check_c⁄°_X509_NAME_sk_ty≥
(sk)))

	)

73 
	#sk_X509_NAME_dìp_c›y
(
sk
, 
c›yfunc
, 
‰ìfunc
Ë((
	`STACK_OF
(
X509_NAME
Ë*)
	`OPENSSL_sk_dìp_c›y
(
	`os¶_check_c⁄°_X509_NAME_sk_ty≥
(sk), 
	`os¶_check_X509_NAME_c›yfunc_ty≥
(c›yfunc), 
	`os¶_check_X509_NAME_‰ìfunc_ty≥
(‰ìfunc)))

	)

74 
	#sk_X509_NAME_£t_cmp_func
(
sk
, 
cmp
Ë((
sk_X509_NAME_compfunc
)
	`OPENSSL_sk_£t_cmp_func
(
	`os¶_check_X509_NAME_sk_ty≥
(sk), 
	`os¶_check_X509_NAME_compfunc_ty≥
(cmp)))

	)

75 
SKM_DEFINE_STACK_OF_INTERNAL
(
X509
, X509, X509)

76 
	#sk_X509_num
(
sk
Ë
	`OPENSSL_sk_num
(
	`os¶_check_c⁄°_X509_sk_ty≥
(sk))

	)

77 
	#sk_X509_vÆue
(
sk
, 
idx
Ë((
X509
 *)
	`OPENSSL_sk_vÆue
(
	`os¶_check_c⁄°_X509_sk_ty≥
(sk), (idx)))

	)

78 
	#sk_X509_√w
(
cmp
Ë((
	`STACK_OF
(
X509
Ë*)
	`OPENSSL_sk_√w
(
	`os¶_check_X509_compfunc_ty≥
(cmp)))

	)

79 
	#sk_X509_√w_nuŒ
(Ë((
	`STACK_OF
(
X509
Ë*)
	`OPENSSL_sk_√w_nuŒ
())

	)

80 
	#sk_X509_√w_ª£rve
(
cmp
, 
n
Ë((
	`STACK_OF
(
X509
Ë*)
	`OPENSSL_sk_√w_ª£rve
(
	`os¶_check_X509_compfunc_ty≥
(cmp), (n)))

	)

81 
	#sk_X509_ª£rve
(
sk
, 
n
Ë
	`OPENSSL_sk_ª£rve
(
	`os¶_check_X509_sk_ty≥
(sk), (n))

	)

82 
	#sk_X509_‰ì
(
sk
Ë
	`OPENSSL_sk_‰ì
(
	`os¶_check_X509_sk_ty≥
(sk))

	)

83 
	#sk_X509_zîo
(
sk
Ë
	`OPENSSL_sk_zîo
(
	`os¶_check_X509_sk_ty≥
(sk))

	)

84 
	#sk_X509_dñëe
(
sk
, 
i
Ë((
X509
 *)
	`OPENSSL_sk_dñëe
(
	`os¶_check_X509_sk_ty≥
(sk), (i)))

	)

85 
	#sk_X509_dñëe_±r
(
sk
, 
±r
Ë((
X509
 *)
	`OPENSSL_sk_dñëe_±r
(
	`os¶_check_X509_sk_ty≥
(sk), 
	`os¶_check_X509_ty≥
’å)))

	)

86 
	#sk_X509_push
(
sk
, 
±r
Ë
	`OPENSSL_sk_push
(
	`os¶_check_X509_sk_ty≥
(sk), 
	`os¶_check_X509_ty≥
’å))

	)

87 
	#sk_X509_unshi·
(
sk
, 
±r
Ë
	`OPENSSL_sk_unshi·
(
	`os¶_check_X509_sk_ty≥
(sk), 
	`os¶_check_X509_ty≥
’å))

	)

88 
	#sk_X509_p›
(
sk
Ë((
X509
 *)
	`OPENSSL_sk_p›
(
	`os¶_check_X509_sk_ty≥
(sk)))

	)

89 
	#sk_X509_shi·
(
sk
Ë((
X509
 *)
	`OPENSSL_sk_shi·
(
	`os¶_check_X509_sk_ty≥
(sk)))

	)

90 
	#sk_X509_p›_‰ì
(
sk
, 
‰ìfunc
Ë
	`OPENSSL_sk_p›_‰ì
(
	`os¶_check_X509_sk_ty≥
(sk),
	`os¶_check_X509_‰ìfunc_ty≥
(‰ìfunc))

	)

91 
	#sk_X509_ö£π
(
sk
, 
±r
, 
idx
Ë
	`OPENSSL_sk_ö£π
(
	`os¶_check_X509_sk_ty≥
(sk), 
	`os¶_check_X509_ty≥
’å), (idx))

	)

92 
	#sk_X509_£t
(
sk
, 
idx
, 
±r
Ë((
X509
 *)
	`OPENSSL_sk_£t
(
	`os¶_check_X509_sk_ty≥
(sk), (idx), 
	`os¶_check_X509_ty≥
’å)))

	)

93 
	#sk_X509_föd
(
sk
, 
±r
Ë
	`OPENSSL_sk_föd
(
	`os¶_check_X509_sk_ty≥
(sk), 
	`os¶_check_X509_ty≥
’å))

	)

94 
	#sk_X509_föd_ex
(
sk
, 
±r
Ë
	`OPENSSL_sk_föd_ex
(
	`os¶_check_X509_sk_ty≥
(sk), 
	`os¶_check_X509_ty≥
’å))

	)

95 
	#sk_X509_föd_Æl
(
sk
, 
±r
, 
≤um
Ë
	`OPENSSL_sk_föd_Æl
(
	`os¶_check_X509_sk_ty≥
(sk), 
	`os¶_check_X509_ty≥
’å),Önum)

	)

96 
	#sk_X509_s‹t
(
sk
Ë
	`OPENSSL_sk_s‹t
(
	`os¶_check_X509_sk_ty≥
(sk))

	)

97 
	#sk_X509_is_s‹ãd
(
sk
Ë
	`OPENSSL_sk_is_s‹ãd
(
	`os¶_check_c⁄°_X509_sk_ty≥
(sk))

	)

98 
	#sk_X509_dup
(
sk
Ë((
	`STACK_OF
(
X509
Ë*)
	`OPENSSL_sk_dup
(
	`os¶_check_c⁄°_X509_sk_ty≥
(sk)))

	)

99 
	#sk_X509_dìp_c›y
(
sk
, 
c›yfunc
, 
‰ìfunc
Ë((
	`STACK_OF
(
X509
Ë*)
	`OPENSSL_sk_dìp_c›y
(
	`os¶_check_c⁄°_X509_sk_ty≥
(sk), 
	`os¶_check_X509_c›yfunc_ty≥
(c›yfunc), 
	`os¶_check_X509_‰ìfunc_ty≥
(‰ìfunc)))

	)

100 
	#sk_X509_£t_cmp_func
(
sk
, 
cmp
Ë((
sk_X509_compfunc
)
	`OPENSSL_sk_£t_cmp_func
(
	`os¶_check_X509_sk_ty≥
(sk), 
	`os¶_check_X509_compfunc_ty≥
(cmp)))

	)

101 
SKM_DEFINE_STACK_OF_INTERNAL
(
X509_REVOKED
, X509_REVOKED, X509_REVOKED)

102 
	#sk_X509_REVOKED_num
(
sk
Ë
	`OPENSSL_sk_num
(
	`os¶_check_c⁄°_X509_REVOKED_sk_ty≥
(sk))

	)

103 
	#sk_X509_REVOKED_vÆue
(
sk
, 
idx
Ë((
X509_REVOKED
 *)
	`OPENSSL_sk_vÆue
(
	`os¶_check_c⁄°_X509_REVOKED_sk_ty≥
(sk), (idx)))

	)

104 
	#sk_X509_REVOKED_√w
(
cmp
Ë((
	`STACK_OF
(
X509_REVOKED
Ë*)
	`OPENSSL_sk_√w
(
	`os¶_check_X509_REVOKED_compfunc_ty≥
(cmp)))

	)

105 
	#sk_X509_REVOKED_√w_nuŒ
(Ë((
	`STACK_OF
(
X509_REVOKED
Ë*)
	`OPENSSL_sk_√w_nuŒ
())

	)

106 
	#sk_X509_REVOKED_√w_ª£rve
(
cmp
, 
n
Ë((
	`STACK_OF
(
X509_REVOKED
Ë*)
	`OPENSSL_sk_√w_ª£rve
(
	`os¶_check_X509_REVOKED_compfunc_ty≥
(cmp), (n)))

	)

107 
	#sk_X509_REVOKED_ª£rve
(
sk
, 
n
Ë
	`OPENSSL_sk_ª£rve
(
	`os¶_check_X509_REVOKED_sk_ty≥
(sk), (n))

	)

108 
	#sk_X509_REVOKED_‰ì
(
sk
Ë
	`OPENSSL_sk_‰ì
(
	`os¶_check_X509_REVOKED_sk_ty≥
(sk))

	)

109 
	#sk_X509_REVOKED_zîo
(
sk
Ë
	`OPENSSL_sk_zîo
(
	`os¶_check_X509_REVOKED_sk_ty≥
(sk))

	)

110 
	#sk_X509_REVOKED_dñëe
(
sk
, 
i
Ë((
X509_REVOKED
 *)
	`OPENSSL_sk_dñëe
(
	`os¶_check_X509_REVOKED_sk_ty≥
(sk), (i)))

	)

111 
	#sk_X509_REVOKED_dñëe_±r
(
sk
, 
±r
Ë((
X509_REVOKED
 *)
	`OPENSSL_sk_dñëe_±r
(
	`os¶_check_X509_REVOKED_sk_ty≥
(sk), 
	`os¶_check_X509_REVOKED_ty≥
’å)))

	)

112 
	#sk_X509_REVOKED_push
(
sk
, 
±r
Ë
	`OPENSSL_sk_push
(
	`os¶_check_X509_REVOKED_sk_ty≥
(sk), 
	`os¶_check_X509_REVOKED_ty≥
’å))

	)

113 
	#sk_X509_REVOKED_unshi·
(
sk
, 
±r
Ë
	`OPENSSL_sk_unshi·
(
	`os¶_check_X509_REVOKED_sk_ty≥
(sk), 
	`os¶_check_X509_REVOKED_ty≥
’å))

	)

114 
	#sk_X509_REVOKED_p›
(
sk
Ë((
X509_REVOKED
 *)
	`OPENSSL_sk_p›
(
	`os¶_check_X509_REVOKED_sk_ty≥
(sk)))

	)

115 
	#sk_X509_REVOKED_shi·
(
sk
Ë((
X509_REVOKED
 *)
	`OPENSSL_sk_shi·
(
	`os¶_check_X509_REVOKED_sk_ty≥
(sk)))

	)

116 
	#sk_X509_REVOKED_p›_‰ì
(
sk
, 
‰ìfunc
Ë
	`OPENSSL_sk_p›_‰ì
(
	`os¶_check_X509_REVOKED_sk_ty≥
(sk),
	`os¶_check_X509_REVOKED_‰ìfunc_ty≥
(‰ìfunc))

	)

117 
	#sk_X509_REVOKED_ö£π
(
sk
, 
±r
, 
idx
Ë
	`OPENSSL_sk_ö£π
(
	`os¶_check_X509_REVOKED_sk_ty≥
(sk), 
	`os¶_check_X509_REVOKED_ty≥
’å), (idx))

	)

118 
	#sk_X509_REVOKED_£t
(
sk
, 
idx
, 
±r
Ë((
X509_REVOKED
 *)
	`OPENSSL_sk_£t
(
	`os¶_check_X509_REVOKED_sk_ty≥
(sk), (idx), 
	`os¶_check_X509_REVOKED_ty≥
’å)))

	)

119 
	#sk_X509_REVOKED_föd
(
sk
, 
±r
Ë
	`OPENSSL_sk_föd
(
	`os¶_check_X509_REVOKED_sk_ty≥
(sk), 
	`os¶_check_X509_REVOKED_ty≥
’å))

	)

120 
	#sk_X509_REVOKED_föd_ex
(
sk
, 
±r
Ë
	`OPENSSL_sk_föd_ex
(
	`os¶_check_X509_REVOKED_sk_ty≥
(sk), 
	`os¶_check_X509_REVOKED_ty≥
’å))

	)

121 
	#sk_X509_REVOKED_föd_Æl
(
sk
, 
±r
, 
≤um
Ë
	`OPENSSL_sk_föd_Æl
(
	`os¶_check_X509_REVOKED_sk_ty≥
(sk), 
	`os¶_check_X509_REVOKED_ty≥
’å),Önum)

	)

122 
	#sk_X509_REVOKED_s‹t
(
sk
Ë
	`OPENSSL_sk_s‹t
(
	`os¶_check_X509_REVOKED_sk_ty≥
(sk))

	)

123 
	#sk_X509_REVOKED_is_s‹ãd
(
sk
Ë
	`OPENSSL_sk_is_s‹ãd
(
	`os¶_check_c⁄°_X509_REVOKED_sk_ty≥
(sk))

	)

124 
	#sk_X509_REVOKED_dup
(
sk
Ë((
	`STACK_OF
(
X509_REVOKED
Ë*)
	`OPENSSL_sk_dup
(
	`os¶_check_c⁄°_X509_REVOKED_sk_ty≥
(sk)))

	)

125 
	#sk_X509_REVOKED_dìp_c›y
(
sk
, 
c›yfunc
, 
‰ìfunc
Ë((
	`STACK_OF
(
X509_REVOKED
Ë*)
	`OPENSSL_sk_dìp_c›y
(
	`os¶_check_c⁄°_X509_REVOKED_sk_ty≥
(sk), 
	`os¶_check_X509_REVOKED_c›yfunc_ty≥
(c›yfunc), 
	`os¶_check_X509_REVOKED_‰ìfunc_ty≥
(‰ìfunc)))

	)

126 
	#sk_X509_REVOKED_£t_cmp_func
(
sk
, 
cmp
Ë((
sk_X509_REVOKED_compfunc
)
	`OPENSSL_sk_£t_cmp_func
(
	`os¶_check_X509_REVOKED_sk_ty≥
(sk), 
	`os¶_check_X509_REVOKED_compfunc_ty≥
(cmp)))

	)

127 
SKM_DEFINE_STACK_OF_INTERNAL
(
X509_CRL
, X509_CRL, X509_CRL)

128 
	#sk_X509_CRL_num
(
sk
Ë
	`OPENSSL_sk_num
(
	`os¶_check_c⁄°_X509_CRL_sk_ty≥
(sk))

	)

129 
	#sk_X509_CRL_vÆue
(
sk
, 
idx
Ë((
X509_CRL
 *)
	`OPENSSL_sk_vÆue
(
	`os¶_check_c⁄°_X509_CRL_sk_ty≥
(sk), (idx)))

	)

130 
	#sk_X509_CRL_√w
(
cmp
Ë((
	`STACK_OF
(
X509_CRL
Ë*)
	`OPENSSL_sk_√w
(
	`os¶_check_X509_CRL_compfunc_ty≥
(cmp)))

	)

131 
	#sk_X509_CRL_√w_nuŒ
(Ë((
	`STACK_OF
(
X509_CRL
Ë*)
	`OPENSSL_sk_√w_nuŒ
())

	)

132 
	#sk_X509_CRL_√w_ª£rve
(
cmp
, 
n
Ë((
	`STACK_OF
(
X509_CRL
Ë*)
	`OPENSSL_sk_√w_ª£rve
(
	`os¶_check_X509_CRL_compfunc_ty≥
(cmp), (n)))

	)

133 
	#sk_X509_CRL_ª£rve
(
sk
, 
n
Ë
	`OPENSSL_sk_ª£rve
(
	`os¶_check_X509_CRL_sk_ty≥
(sk), (n))

	)

134 
	#sk_X509_CRL_‰ì
(
sk
Ë
	`OPENSSL_sk_‰ì
(
	`os¶_check_X509_CRL_sk_ty≥
(sk))

	)

135 
	#sk_X509_CRL_zîo
(
sk
Ë
	`OPENSSL_sk_zîo
(
	`os¶_check_X509_CRL_sk_ty≥
(sk))

	)

136 
	#sk_X509_CRL_dñëe
(
sk
, 
i
Ë((
X509_CRL
 *)
	`OPENSSL_sk_dñëe
(
	`os¶_check_X509_CRL_sk_ty≥
(sk), (i)))

	)

137 
	#sk_X509_CRL_dñëe_±r
(
sk
, 
±r
Ë((
X509_CRL
 *)
	`OPENSSL_sk_dñëe_±r
(
	`os¶_check_X509_CRL_sk_ty≥
(sk), 
	`os¶_check_X509_CRL_ty≥
’å)))

	)

138 
	#sk_X509_CRL_push
(
sk
, 
±r
Ë
	`OPENSSL_sk_push
(
	`os¶_check_X509_CRL_sk_ty≥
(sk), 
	`os¶_check_X509_CRL_ty≥
’å))

	)

139 
	#sk_X509_CRL_unshi·
(
sk
, 
±r
Ë
	`OPENSSL_sk_unshi·
(
	`os¶_check_X509_CRL_sk_ty≥
(sk), 
	`os¶_check_X509_CRL_ty≥
’å))

	)

140 
	#sk_X509_CRL_p›
(
sk
Ë((
X509_CRL
 *)
	`OPENSSL_sk_p›
(
	`os¶_check_X509_CRL_sk_ty≥
(sk)))

	)

141 
	#sk_X509_CRL_shi·
(
sk
Ë((
X509_CRL
 *)
	`OPENSSL_sk_shi·
(
	`os¶_check_X509_CRL_sk_ty≥
(sk)))

	)

142 
	#sk_X509_CRL_p›_‰ì
(
sk
, 
‰ìfunc
Ë
	`OPENSSL_sk_p›_‰ì
(
	`os¶_check_X509_CRL_sk_ty≥
(sk),
	`os¶_check_X509_CRL_‰ìfunc_ty≥
(‰ìfunc))

	)

143 
	#sk_X509_CRL_ö£π
(
sk
, 
±r
, 
idx
Ë
	`OPENSSL_sk_ö£π
(
	`os¶_check_X509_CRL_sk_ty≥
(sk), 
	`os¶_check_X509_CRL_ty≥
’å), (idx))

	)

144 
	#sk_X509_CRL_£t
(
sk
, 
idx
, 
±r
Ë((
X509_CRL
 *)
	`OPENSSL_sk_£t
(
	`os¶_check_X509_CRL_sk_ty≥
(sk), (idx), 
	`os¶_check_X509_CRL_ty≥
’å)))

	)

145 
	#sk_X509_CRL_föd
(
sk
, 
±r
Ë
	`OPENSSL_sk_föd
(
	`os¶_check_X509_CRL_sk_ty≥
(sk), 
	`os¶_check_X509_CRL_ty≥
’å))

	)

146 
	#sk_X509_CRL_föd_ex
(
sk
, 
±r
Ë
	`OPENSSL_sk_föd_ex
(
	`os¶_check_X509_CRL_sk_ty≥
(sk), 
	`os¶_check_X509_CRL_ty≥
’å))

	)

147 
	#sk_X509_CRL_föd_Æl
(
sk
, 
±r
, 
≤um
Ë
	`OPENSSL_sk_föd_Æl
(
	`os¶_check_X509_CRL_sk_ty≥
(sk), 
	`os¶_check_X509_CRL_ty≥
’å),Önum)

	)

148 
	#sk_X509_CRL_s‹t
(
sk
Ë
	`OPENSSL_sk_s‹t
(
	`os¶_check_X509_CRL_sk_ty≥
(sk))

	)

149 
	#sk_X509_CRL_is_s‹ãd
(
sk
Ë
	`OPENSSL_sk_is_s‹ãd
(
	`os¶_check_c⁄°_X509_CRL_sk_ty≥
(sk))

	)

150 
	#sk_X509_CRL_dup
(
sk
Ë((
	`STACK_OF
(
X509_CRL
Ë*)
	`OPENSSL_sk_dup
(
	`os¶_check_c⁄°_X509_CRL_sk_ty≥
(sk)))

	)

151 
	#sk_X509_CRL_dìp_c›y
(
sk
, 
c›yfunc
, 
‰ìfunc
Ë((
	`STACK_OF
(
X509_CRL
Ë*)
	`OPENSSL_sk_dìp_c›y
(
	`os¶_check_c⁄°_X509_CRL_sk_ty≥
(sk), 
	`os¶_check_X509_CRL_c›yfunc_ty≥
(c›yfunc), 
	`os¶_check_X509_CRL_‰ìfunc_ty≥
(‰ìfunc)))

	)

152 
	#sk_X509_CRL_£t_cmp_func
(
sk
, 
cmp
Ë((
sk_X509_CRL_compfunc
)
	`OPENSSL_sk_£t_cmp_func
(
	`os¶_check_X509_CRL_sk_ty≥
(sk), 
	`os¶_check_X509_CRL_compfunc_ty≥
(cmp)))

	)

157 
	#X509_SIG_INFO_VALID
 0x1

	)

159 
	#X509_SIG_INFO_TLS
 0x2

	)

161 
	#X509_FILETYPE_PEM
 1

	)

162 
	#X509_FILETYPE_ASN1
 2

	)

163 
	#X509_FILETYPE_DEFAULT
 3

	)

165 
	#X509v3_KU_DIGITAL_SIGNATURE
 0x0080

	)

166 
	#X509v3_KU_NON_REPUDIATION
 0x0040

	)

167 
	#X509v3_KU_KEY_ENCIPHERMENT
 0x0020

	)

168 
	#X509v3_KU_DATA_ENCIPHERMENT
 0x0010

	)

169 
	#X509v3_KU_KEY_AGREEMENT
 0x0008

	)

170 
	#X509v3_KU_KEY_CERT_SIGN
 0x0004

	)

171 
	#X509v3_KU_CRL_SIGN
 0x0002

	)

172 
	#X509v3_KU_ENCIPHER_ONLY
 0x0001

	)

173 
	#X509v3_KU_DECIPHER_ONLY
 0x8000

	)

174 
	#X509v3_KU_UNDEF
 0xffff

	)

176 
	sX509_Æg‹_°
 {

177 
ASN1_OBJECT
 *
Æg‹ôhm
;

178 
ASN1_TYPE
 *
∑ømëî
;

181 
STACK_OF
(
	tX509_ALGOR
Ë
	tX509_ALGORS
;

183 
	sX509_vÆ_°
 {

184 
ASN1_TIME
 *
nŸBef‹e
;

185 
ASN1_TIME
 *
nŸA·î
;

186 } 
	tX509_VAL
;

188 
X509_sig_°
 
	tX509_SIG
;

190 
X509_«me_íåy_°
 
	tX509_NAME_ENTRY
;

192 
SKM_DEFINE_STACK_OF_INTERNAL
(
X509_NAME_ENTRY
, X509_NAME_ENTRY, X509_NAME_ENTRY)

193 
	#sk_X509_NAME_ENTRY_num
(
sk
Ë
	`OPENSSL_sk_num
(
	`os¶_check_c⁄°_X509_NAME_ENTRY_sk_ty≥
(sk))

	)

194 
	#sk_X509_NAME_ENTRY_vÆue
(
sk
, 
idx
Ë((
X509_NAME_ENTRY
 *)
	`OPENSSL_sk_vÆue
(
	`os¶_check_c⁄°_X509_NAME_ENTRY_sk_ty≥
(sk), (idx)))

	)

195 
	#sk_X509_NAME_ENTRY_√w
(
cmp
Ë((
	`STACK_OF
(
X509_NAME_ENTRY
Ë*)
	`OPENSSL_sk_√w
(
	`os¶_check_X509_NAME_ENTRY_compfunc_ty≥
(cmp)))

	)

196 
	#sk_X509_NAME_ENTRY_√w_nuŒ
(Ë((
	`STACK_OF
(
X509_NAME_ENTRY
Ë*)
	`OPENSSL_sk_√w_nuŒ
())

	)

197 
	#sk_X509_NAME_ENTRY_√w_ª£rve
(
cmp
, 
n
Ë((
	`STACK_OF
(
X509_NAME_ENTRY
Ë*)
	`OPENSSL_sk_√w_ª£rve
(
	`os¶_check_X509_NAME_ENTRY_compfunc_ty≥
(cmp), (n)))

	)

198 
	#sk_X509_NAME_ENTRY_ª£rve
(
sk
, 
n
Ë
	`OPENSSL_sk_ª£rve
(
	`os¶_check_X509_NAME_ENTRY_sk_ty≥
(sk), (n))

	)

199 
	#sk_X509_NAME_ENTRY_‰ì
(
sk
Ë
	`OPENSSL_sk_‰ì
(
	`os¶_check_X509_NAME_ENTRY_sk_ty≥
(sk))

	)

200 
	#sk_X509_NAME_ENTRY_zîo
(
sk
Ë
	`OPENSSL_sk_zîo
(
	`os¶_check_X509_NAME_ENTRY_sk_ty≥
(sk))

	)

201 
	#sk_X509_NAME_ENTRY_dñëe
(
sk
, 
i
Ë((
X509_NAME_ENTRY
 *)
	`OPENSSL_sk_dñëe
(
	`os¶_check_X509_NAME_ENTRY_sk_ty≥
(sk), (i)))

	)

202 
	#sk_X509_NAME_ENTRY_dñëe_±r
(
sk
, 
±r
Ë((
X509_NAME_ENTRY
 *)
	`OPENSSL_sk_dñëe_±r
(
	`os¶_check_X509_NAME_ENTRY_sk_ty≥
(sk), 
	`os¶_check_X509_NAME_ENTRY_ty≥
’å)))

	)

203 
	#sk_X509_NAME_ENTRY_push
(
sk
, 
±r
Ë
	`OPENSSL_sk_push
(
	`os¶_check_X509_NAME_ENTRY_sk_ty≥
(sk), 
	`os¶_check_X509_NAME_ENTRY_ty≥
’å))

	)

204 
	#sk_X509_NAME_ENTRY_unshi·
(
sk
, 
±r
Ë
	`OPENSSL_sk_unshi·
(
	`os¶_check_X509_NAME_ENTRY_sk_ty≥
(sk), 
	`os¶_check_X509_NAME_ENTRY_ty≥
’å))

	)

205 
	#sk_X509_NAME_ENTRY_p›
(
sk
Ë((
X509_NAME_ENTRY
 *)
	`OPENSSL_sk_p›
(
	`os¶_check_X509_NAME_ENTRY_sk_ty≥
(sk)))

	)

206 
	#sk_X509_NAME_ENTRY_shi·
(
sk
Ë((
X509_NAME_ENTRY
 *)
	`OPENSSL_sk_shi·
(
	`os¶_check_X509_NAME_ENTRY_sk_ty≥
(sk)))

	)

207 
	#sk_X509_NAME_ENTRY_p›_‰ì
(
sk
, 
‰ìfunc
Ë
	`OPENSSL_sk_p›_‰ì
(
	`os¶_check_X509_NAME_ENTRY_sk_ty≥
(sk),
	`os¶_check_X509_NAME_ENTRY_‰ìfunc_ty≥
(‰ìfunc))

	)

208 
	#sk_X509_NAME_ENTRY_ö£π
(
sk
, 
±r
, 
idx
Ë
	`OPENSSL_sk_ö£π
(
	`os¶_check_X509_NAME_ENTRY_sk_ty≥
(sk), 
	`os¶_check_X509_NAME_ENTRY_ty≥
’å), (idx))

	)

209 
	#sk_X509_NAME_ENTRY_£t
(
sk
, 
idx
, 
±r
Ë((
X509_NAME_ENTRY
 *)
	`OPENSSL_sk_£t
(
	`os¶_check_X509_NAME_ENTRY_sk_ty≥
(sk), (idx), 
	`os¶_check_X509_NAME_ENTRY_ty≥
’å)))

	)

210 
	#sk_X509_NAME_ENTRY_föd
(
sk
, 
±r
Ë
	`OPENSSL_sk_föd
(
	`os¶_check_X509_NAME_ENTRY_sk_ty≥
(sk), 
	`os¶_check_X509_NAME_ENTRY_ty≥
’å))

	)

211 
	#sk_X509_NAME_ENTRY_föd_ex
(
sk
, 
±r
Ë
	`OPENSSL_sk_föd_ex
(
	`os¶_check_X509_NAME_ENTRY_sk_ty≥
(sk), 
	`os¶_check_X509_NAME_ENTRY_ty≥
’å))

	)

212 
	#sk_X509_NAME_ENTRY_föd_Æl
(
sk
, 
±r
, 
≤um
Ë
	`OPENSSL_sk_föd_Æl
(
	`os¶_check_X509_NAME_ENTRY_sk_ty≥
(sk), 
	`os¶_check_X509_NAME_ENTRY_ty≥
’å),Önum)

	)

213 
	#sk_X509_NAME_ENTRY_s‹t
(
sk
Ë
	`OPENSSL_sk_s‹t
(
	`os¶_check_X509_NAME_ENTRY_sk_ty≥
(sk))

	)

214 
	#sk_X509_NAME_ENTRY_is_s‹ãd
(
sk
Ë
	`OPENSSL_sk_is_s‹ãd
(
	`os¶_check_c⁄°_X509_NAME_ENTRY_sk_ty≥
(sk))

	)

215 
	#sk_X509_NAME_ENTRY_dup
(
sk
Ë((
	`STACK_OF
(
X509_NAME_ENTRY
Ë*)
	`OPENSSL_sk_dup
(
	`os¶_check_c⁄°_X509_NAME_ENTRY_sk_ty≥
(sk)))

	)

216 
	#sk_X509_NAME_ENTRY_dìp_c›y
(
sk
, 
c›yfunc
, 
‰ìfunc
Ë((
	`STACK_OF
(
X509_NAME_ENTRY
Ë*)
	`OPENSSL_sk_dìp_c›y
(
	`os¶_check_c⁄°_X509_NAME_ENTRY_sk_ty≥
(sk), 
	`os¶_check_X509_NAME_ENTRY_c›yfunc_ty≥
(c›yfunc), 
	`os¶_check_X509_NAME_ENTRY_‰ìfunc_ty≥
(‰ìfunc)))

	)

217 
	#sk_X509_NAME_ENTRY_£t_cmp_func
(
sk
, 
cmp
Ë((
sk_X509_NAME_ENTRY_compfunc
)
	`OPENSSL_sk_£t_cmp_func
(
	`os¶_check_X509_NAME_ENTRY_sk_ty≥
(sk), 
	`os¶_check_X509_NAME_ENTRY_compfunc_ty≥
(cmp)))

	)

220 
	#X509_EX_V_NETSCAPE_HACK
 0x8000

	)

221 
	#X509_EX_V_INIT
 0x0001

	)

222 
X509_exãnsi⁄_°
 
	tX509_EXTENSION
;

223 
SKM_DEFINE_STACK_OF_INTERNAL
(
X509_EXTENSION
, X509_EXTENSION, X509_EXTENSION)

224 
	#sk_X509_EXTENSION_num
(
sk
Ë
	`OPENSSL_sk_num
(
	`os¶_check_c⁄°_X509_EXTENSION_sk_ty≥
(sk))

	)

225 
	#sk_X509_EXTENSION_vÆue
(
sk
, 
idx
Ë((
X509_EXTENSION
 *)
	`OPENSSL_sk_vÆue
(
	`os¶_check_c⁄°_X509_EXTENSION_sk_ty≥
(sk), (idx)))

	)

226 
	#sk_X509_EXTENSION_√w
(
cmp
Ë((
	`STACK_OF
(
X509_EXTENSION
Ë*)
	`OPENSSL_sk_√w
(
	`os¶_check_X509_EXTENSION_compfunc_ty≥
(cmp)))

	)

227 
	#sk_X509_EXTENSION_√w_nuŒ
(Ë((
	`STACK_OF
(
X509_EXTENSION
Ë*)
	`OPENSSL_sk_√w_nuŒ
())

	)

228 
	#sk_X509_EXTENSION_√w_ª£rve
(
cmp
, 
n
Ë((
	`STACK_OF
(
X509_EXTENSION
Ë*)
	`OPENSSL_sk_√w_ª£rve
(
	`os¶_check_X509_EXTENSION_compfunc_ty≥
(cmp), (n)))

	)

229 
	#sk_X509_EXTENSION_ª£rve
(
sk
, 
n
Ë
	`OPENSSL_sk_ª£rve
(
	`os¶_check_X509_EXTENSION_sk_ty≥
(sk), (n))

	)

230 
	#sk_X509_EXTENSION_‰ì
(
sk
Ë
	`OPENSSL_sk_‰ì
(
	`os¶_check_X509_EXTENSION_sk_ty≥
(sk))

	)

231 
	#sk_X509_EXTENSION_zîo
(
sk
Ë
	`OPENSSL_sk_zîo
(
	`os¶_check_X509_EXTENSION_sk_ty≥
(sk))

	)

232 
	#sk_X509_EXTENSION_dñëe
(
sk
, 
i
Ë((
X509_EXTENSION
 *)
	`OPENSSL_sk_dñëe
(
	`os¶_check_X509_EXTENSION_sk_ty≥
(sk), (i)))

	)

233 
	#sk_X509_EXTENSION_dñëe_±r
(
sk
, 
±r
Ë((
X509_EXTENSION
 *)
	`OPENSSL_sk_dñëe_±r
(
	`os¶_check_X509_EXTENSION_sk_ty≥
(sk), 
	`os¶_check_X509_EXTENSION_ty≥
’å)))

	)

234 
	#sk_X509_EXTENSION_push
(
sk
, 
±r
Ë
	`OPENSSL_sk_push
(
	`os¶_check_X509_EXTENSION_sk_ty≥
(sk), 
	`os¶_check_X509_EXTENSION_ty≥
’å))

	)

235 
	#sk_X509_EXTENSION_unshi·
(
sk
, 
±r
Ë
	`OPENSSL_sk_unshi·
(
	`os¶_check_X509_EXTENSION_sk_ty≥
(sk), 
	`os¶_check_X509_EXTENSION_ty≥
’å))

	)

236 
	#sk_X509_EXTENSION_p›
(
sk
Ë((
X509_EXTENSION
 *)
	`OPENSSL_sk_p›
(
	`os¶_check_X509_EXTENSION_sk_ty≥
(sk)))

	)

237 
	#sk_X509_EXTENSION_shi·
(
sk
Ë((
X509_EXTENSION
 *)
	`OPENSSL_sk_shi·
(
	`os¶_check_X509_EXTENSION_sk_ty≥
(sk)))

	)

238 
	#sk_X509_EXTENSION_p›_‰ì
(
sk
, 
‰ìfunc
Ë
	`OPENSSL_sk_p›_‰ì
(
	`os¶_check_X509_EXTENSION_sk_ty≥
(sk),
	`os¶_check_X509_EXTENSION_‰ìfunc_ty≥
(‰ìfunc))

	)

239 
	#sk_X509_EXTENSION_ö£π
(
sk
, 
±r
, 
idx
Ë
	`OPENSSL_sk_ö£π
(
	`os¶_check_X509_EXTENSION_sk_ty≥
(sk), 
	`os¶_check_X509_EXTENSION_ty≥
’å), (idx))

	)

240 
	#sk_X509_EXTENSION_£t
(
sk
, 
idx
, 
±r
Ë((
X509_EXTENSION
 *)
	`OPENSSL_sk_£t
(
	`os¶_check_X509_EXTENSION_sk_ty≥
(sk), (idx), 
	`os¶_check_X509_EXTENSION_ty≥
’å)))

	)

241 
	#sk_X509_EXTENSION_föd
(
sk
, 
±r
Ë
	`OPENSSL_sk_föd
(
	`os¶_check_X509_EXTENSION_sk_ty≥
(sk), 
	`os¶_check_X509_EXTENSION_ty≥
’å))

	)

242 
	#sk_X509_EXTENSION_föd_ex
(
sk
, 
±r
Ë
	`OPENSSL_sk_föd_ex
(
	`os¶_check_X509_EXTENSION_sk_ty≥
(sk), 
	`os¶_check_X509_EXTENSION_ty≥
’å))

	)

243 
	#sk_X509_EXTENSION_föd_Æl
(
sk
, 
±r
, 
≤um
Ë
	`OPENSSL_sk_föd_Æl
(
	`os¶_check_X509_EXTENSION_sk_ty≥
(sk), 
	`os¶_check_X509_EXTENSION_ty≥
’å),Önum)

	)

244 
	#sk_X509_EXTENSION_s‹t
(
sk
Ë
	`OPENSSL_sk_s‹t
(
	`os¶_check_X509_EXTENSION_sk_ty≥
(sk))

	)

245 
	#sk_X509_EXTENSION_is_s‹ãd
(
sk
Ë
	`OPENSSL_sk_is_s‹ãd
(
	`os¶_check_c⁄°_X509_EXTENSION_sk_ty≥
(sk))

	)

246 
	#sk_X509_EXTENSION_dup
(
sk
Ë((
	`STACK_OF
(
X509_EXTENSION
Ë*)
	`OPENSSL_sk_dup
(
	`os¶_check_c⁄°_X509_EXTENSION_sk_ty≥
(sk)))

	)

247 
	#sk_X509_EXTENSION_dìp_c›y
(
sk
, 
c›yfunc
, 
‰ìfunc
Ë((
	`STACK_OF
(
X509_EXTENSION
Ë*)
	`OPENSSL_sk_dìp_c›y
(
	`os¶_check_c⁄°_X509_EXTENSION_sk_ty≥
(sk), 
	`os¶_check_X509_EXTENSION_c›yfunc_ty≥
(c›yfunc), 
	`os¶_check_X509_EXTENSION_‰ìfunc_ty≥
(‰ìfunc)))

	)

248 
	#sk_X509_EXTENSION_£t_cmp_func
(
sk
, 
cmp
Ë((
sk_X509_EXTENSION_compfunc
)
	`OPENSSL_sk_£t_cmp_func
(
	`os¶_check_X509_EXTENSION_sk_ty≥
(sk), 
	`os¶_check_X509_EXTENSION_compfunc_ty≥
(cmp)))

	)

250 
STACK_OF
(
	tX509_EXTENSION
Ë
	tX509_EXTENSIONS
;

251 
x509_©åibuãs_°
 
	tX509_ATTRIBUTE
;

252 
SKM_DEFINE_STACK_OF_INTERNAL
(
X509_ATTRIBUTE
, X509_ATTRIBUTE, X509_ATTRIBUTE)

253 
	#sk_X509_ATTRIBUTE_num
(
sk
Ë
	`OPENSSL_sk_num
(
	`os¶_check_c⁄°_X509_ATTRIBUTE_sk_ty≥
(sk))

	)

254 
	#sk_X509_ATTRIBUTE_vÆue
(
sk
, 
idx
Ë((
X509_ATTRIBUTE
 *)
	`OPENSSL_sk_vÆue
(
	`os¶_check_c⁄°_X509_ATTRIBUTE_sk_ty≥
(sk), (idx)))

	)

255 
	#sk_X509_ATTRIBUTE_√w
(
cmp
Ë((
	`STACK_OF
(
X509_ATTRIBUTE
Ë*)
	`OPENSSL_sk_√w
(
	`os¶_check_X509_ATTRIBUTE_compfunc_ty≥
(cmp)))

	)

256 
	#sk_X509_ATTRIBUTE_√w_nuŒ
(Ë((
	`STACK_OF
(
X509_ATTRIBUTE
Ë*)
	`OPENSSL_sk_√w_nuŒ
())

	)

257 
	#sk_X509_ATTRIBUTE_√w_ª£rve
(
cmp
, 
n
Ë((
	`STACK_OF
(
X509_ATTRIBUTE
Ë*)
	`OPENSSL_sk_√w_ª£rve
(
	`os¶_check_X509_ATTRIBUTE_compfunc_ty≥
(cmp), (n)))

	)

258 
	#sk_X509_ATTRIBUTE_ª£rve
(
sk
, 
n
Ë
	`OPENSSL_sk_ª£rve
(
	`os¶_check_X509_ATTRIBUTE_sk_ty≥
(sk), (n))

	)

259 
	#sk_X509_ATTRIBUTE_‰ì
(
sk
Ë
	`OPENSSL_sk_‰ì
(
	`os¶_check_X509_ATTRIBUTE_sk_ty≥
(sk))

	)

260 
	#sk_X509_ATTRIBUTE_zîo
(
sk
Ë
	`OPENSSL_sk_zîo
(
	`os¶_check_X509_ATTRIBUTE_sk_ty≥
(sk))

	)

261 
	#sk_X509_ATTRIBUTE_dñëe
(
sk
, 
i
Ë((
X509_ATTRIBUTE
 *)
	`OPENSSL_sk_dñëe
(
	`os¶_check_X509_ATTRIBUTE_sk_ty≥
(sk), (i)))

	)

262 
	#sk_X509_ATTRIBUTE_dñëe_±r
(
sk
, 
±r
Ë((
X509_ATTRIBUTE
 *)
	`OPENSSL_sk_dñëe_±r
(
	`os¶_check_X509_ATTRIBUTE_sk_ty≥
(sk), 
	`os¶_check_X509_ATTRIBUTE_ty≥
’å)))

	)

263 
	#sk_X509_ATTRIBUTE_push
(
sk
, 
±r
Ë
	`OPENSSL_sk_push
(
	`os¶_check_X509_ATTRIBUTE_sk_ty≥
(sk), 
	`os¶_check_X509_ATTRIBUTE_ty≥
’å))

	)

264 
	#sk_X509_ATTRIBUTE_unshi·
(
sk
, 
±r
Ë
	`OPENSSL_sk_unshi·
(
	`os¶_check_X509_ATTRIBUTE_sk_ty≥
(sk), 
	`os¶_check_X509_ATTRIBUTE_ty≥
’å))

	)

265 
	#sk_X509_ATTRIBUTE_p›
(
sk
Ë((
X509_ATTRIBUTE
 *)
	`OPENSSL_sk_p›
(
	`os¶_check_X509_ATTRIBUTE_sk_ty≥
(sk)))

	)

266 
	#sk_X509_ATTRIBUTE_shi·
(
sk
Ë((
X509_ATTRIBUTE
 *)
	`OPENSSL_sk_shi·
(
	`os¶_check_X509_ATTRIBUTE_sk_ty≥
(sk)))

	)

267 
	#sk_X509_ATTRIBUTE_p›_‰ì
(
sk
, 
‰ìfunc
Ë
	`OPENSSL_sk_p›_‰ì
(
	`os¶_check_X509_ATTRIBUTE_sk_ty≥
(sk),
	`os¶_check_X509_ATTRIBUTE_‰ìfunc_ty≥
(‰ìfunc))

	)

268 
	#sk_X509_ATTRIBUTE_ö£π
(
sk
, 
±r
, 
idx
Ë
	`OPENSSL_sk_ö£π
(
	`os¶_check_X509_ATTRIBUTE_sk_ty≥
(sk), 
	`os¶_check_X509_ATTRIBUTE_ty≥
’å), (idx))

	)

269 
	#sk_X509_ATTRIBUTE_£t
(
sk
, 
idx
, 
±r
Ë((
X509_ATTRIBUTE
 *)
	`OPENSSL_sk_£t
(
	`os¶_check_X509_ATTRIBUTE_sk_ty≥
(sk), (idx), 
	`os¶_check_X509_ATTRIBUTE_ty≥
’å)))

	)

270 
	#sk_X509_ATTRIBUTE_föd
(
sk
, 
±r
Ë
	`OPENSSL_sk_föd
(
	`os¶_check_X509_ATTRIBUTE_sk_ty≥
(sk), 
	`os¶_check_X509_ATTRIBUTE_ty≥
’å))

	)

271 
	#sk_X509_ATTRIBUTE_föd_ex
(
sk
, 
±r
Ë
	`OPENSSL_sk_föd_ex
(
	`os¶_check_X509_ATTRIBUTE_sk_ty≥
(sk), 
	`os¶_check_X509_ATTRIBUTE_ty≥
’å))

	)

272 
	#sk_X509_ATTRIBUTE_föd_Æl
(
sk
, 
±r
, 
≤um
Ë
	`OPENSSL_sk_föd_Æl
(
	`os¶_check_X509_ATTRIBUTE_sk_ty≥
(sk), 
	`os¶_check_X509_ATTRIBUTE_ty≥
’å),Önum)

	)

273 
	#sk_X509_ATTRIBUTE_s‹t
(
sk
Ë
	`OPENSSL_sk_s‹t
(
	`os¶_check_X509_ATTRIBUTE_sk_ty≥
(sk))

	)

274 
	#sk_X509_ATTRIBUTE_is_s‹ãd
(
sk
Ë
	`OPENSSL_sk_is_s‹ãd
(
	`os¶_check_c⁄°_X509_ATTRIBUTE_sk_ty≥
(sk))

	)

275 
	#sk_X509_ATTRIBUTE_dup
(
sk
Ë((
	`STACK_OF
(
X509_ATTRIBUTE
Ë*)
	`OPENSSL_sk_dup
(
	`os¶_check_c⁄°_X509_ATTRIBUTE_sk_ty≥
(sk)))

	)

276 
	#sk_X509_ATTRIBUTE_dìp_c›y
(
sk
, 
c›yfunc
, 
‰ìfunc
Ë((
	`STACK_OF
(
X509_ATTRIBUTE
Ë*)
	`OPENSSL_sk_dìp_c›y
(
	`os¶_check_c⁄°_X509_ATTRIBUTE_sk_ty≥
(sk), 
	`os¶_check_X509_ATTRIBUTE_c›yfunc_ty≥
(c›yfunc), 
	`os¶_check_X509_ATTRIBUTE_‰ìfunc_ty≥
(‰ìfunc)))

	)

277 
	#sk_X509_ATTRIBUTE_£t_cmp_func
(
sk
, 
cmp
Ë((
sk_X509_ATTRIBUTE_compfunc
)
	`OPENSSL_sk_£t_cmp_func
(
	`os¶_check_X509_ATTRIBUTE_sk_ty≥
(sk), 
	`os¶_check_X509_ATTRIBUTE_compfunc_ty≥
(cmp)))

	)

279 
X509_ªq_öfo_°
 
	tX509_REQ_INFO
;

280 
X509_ªq_°
 
	tX509_REQ
;

281 
x509_˚π_aux_°
 
	tX509_CERT_AUX
;

282 
x509_cöf_°
 
	tX509_CINF
;

286 
	#X509_FLAG_COMPAT
 0

	)

287 
	#X509_FLAG_NO_HEADER
 1L

	)

288 
	#X509_FLAG_NO_VERSION
 (1L << 1)

	)

289 
	#X509_FLAG_NO_SERIAL
 (1L << 2)

	)

290 
	#X509_FLAG_NO_SIGNAME
 (1L << 3)

	)

291 
	#X509_FLAG_NO_ISSUER
 (1L << 4)

	)

292 
	#X509_FLAG_NO_VALIDITY
 (1L << 5)

	)

293 
	#X509_FLAG_NO_SUBJECT
 (1L << 6)

	)

294 
	#X509_FLAG_NO_PUBKEY
 (1L << 7)

	)

295 
	#X509_FLAG_NO_EXTENSIONS
 (1L << 8)

	)

296 
	#X509_FLAG_NO_SIGDUMP
 (1L << 9)

	)

297 
	#X509_FLAG_NO_AUX
 (1L << 10)

	)

298 
	#X509_FLAG_NO_ATTRIBUTES
 (1L << 11)

	)

299 
	#X509_FLAG_NO_IDS
 (1L << 12)

	)

300 
	#X509_FLAG_EXTENSIONS_ONLY_KID
 (1L << 13)

	)

306 
	#XN_FLAG_SEP_MASK
 (0x‡<< 16)

	)

308 
	#XN_FLAG_COMPAT
 0

	)

309 
	#XN_FLAG_SEP_COMMA_PLUS
 (1 << 16)

	)

310 
	#XN_FLAG_SEP_CPLUS_SPC
 (2 << 16)

	)

311 
	#XN_FLAG_SEP_SPLUS_SPC
 (3 << 16)

	)

312 
	#XN_FLAG_SEP_MULTILINE
 (4 << 16)

	)

314 
	#XN_FLAG_DN_REV
 (1 << 20)

	)

318 
	#XN_FLAG_FN_MASK
 (0x3 << 21)

	)

320 
	#XN_FLAG_FN_SN
 0

	)

321 
	#XN_FLAG_FN_LN
 (1 << 21)

	)

322 
	#XN_FLAG_FN_OID
 (2 << 21)

	)

323 
	#XN_FLAG_FN_NONE
 (3 << 21)

	)

325 
	#XN_FLAG_SPC_EQ
 (1 << 23)

	)

332 
	#XN_FLAG_DUMP_UNKNOWN_FIELDS
 (1 << 24)

	)

334 
	#XN_FLAG_FN_ALIGN
 (1 << 25)

	)

339 
	#XN_FLAG_RFC2253
 (
ASN1_STRFLGS_RFC2253
 | \

340 
XN_FLAG_SEP_COMMA_PLUS
 | \

341 
XN_FLAG_DN_REV
 | \

342 
XN_FLAG_FN_SN
 | \

343 
XN_FLAG_DUMP_UNKNOWN_FIELDS
)

	)

347 
	#XN_FLAG_ONELINE
 (
ASN1_STRFLGS_RFC2253
 | \

348 
ASN1_STRFLGS_ESC_QUOTE
 | \

349 
XN_FLAG_SEP_CPLUS_SPC
 | \

350 
XN_FLAG_SPC_EQ
 | \

351 
XN_FLAG_FN_SN
)

	)

355 
	#XN_FLAG_MULTILINE
 (
ASN1_STRFLGS_ESC_CTRL
 | \

356 
ASN1_STRFLGS_ESC_MSB
 | \

357 
XN_FLAG_SEP_MULTILINE
 | \

358 
XN_FLAG_SPC_EQ
 | \

359 
XN_FLAG_FN_LN
 | \

360 
XN_FLAG_FN_ALIGN
)

	)

362 
X509_¸l_öfo_°
 
	tX509_CRL_INFO
;

364 
	s¥iv©e_key_°
 {

365 
vîsi⁄
;

367 
X509_ALGOR
 *
íc_Æg‹
;

368 
ASN1_OCTET_STRING
 *
íc_pkey
;

370 
EVP_PKEY
 *
dec_pkey
;

372 
key_Àngth
;

373 *
key_d©a
;

374 
key_‰ì
;

376 
EVP_CIPHER_INFO
 
cùhî
;

377 } 
	tX509_PKEY
;

379 
	sX509_öfo_°
 {

380 
X509
 *
x509
;

381 
X509_CRL
 *
¸l
;

382 
X509_PKEY
 *
x_pkey
;

383 
EVP_CIPHER_INFO
 
íc_cùhî
;

384 
íc_Àn
;

385 *
íc_d©a
;

386 } 
	tX509_INFO
;

387 
SKM_DEFINE_STACK_OF_INTERNAL
(
X509_INFO
, X509_INFO, X509_INFO)

388 
	#sk_X509_INFO_num
(
sk
Ë
	`OPENSSL_sk_num
(
	`os¶_check_c⁄°_X509_INFO_sk_ty≥
(sk))

	)

389 
	#sk_X509_INFO_vÆue
(
sk
, 
idx
Ë((
X509_INFO
 *)
	`OPENSSL_sk_vÆue
(
	`os¶_check_c⁄°_X509_INFO_sk_ty≥
(sk), (idx)))

	)

390 
	#sk_X509_INFO_√w
(
cmp
Ë((
	`STACK_OF
(
X509_INFO
Ë*)
	`OPENSSL_sk_√w
(
	`os¶_check_X509_INFO_compfunc_ty≥
(cmp)))

	)

391 
	#sk_X509_INFO_√w_nuŒ
(Ë((
	`STACK_OF
(
X509_INFO
Ë*)
	`OPENSSL_sk_√w_nuŒ
())

	)

392 
	#sk_X509_INFO_√w_ª£rve
(
cmp
, 
n
Ë((
	`STACK_OF
(
X509_INFO
Ë*)
	`OPENSSL_sk_√w_ª£rve
(
	`os¶_check_X509_INFO_compfunc_ty≥
(cmp), (n)))

	)

393 
	#sk_X509_INFO_ª£rve
(
sk
, 
n
Ë
	`OPENSSL_sk_ª£rve
(
	`os¶_check_X509_INFO_sk_ty≥
(sk), (n))

	)

394 
	#sk_X509_INFO_‰ì
(
sk
Ë
	`OPENSSL_sk_‰ì
(
	`os¶_check_X509_INFO_sk_ty≥
(sk))

	)

395 
	#sk_X509_INFO_zîo
(
sk
Ë
	`OPENSSL_sk_zîo
(
	`os¶_check_X509_INFO_sk_ty≥
(sk))

	)

396 
	#sk_X509_INFO_dñëe
(
sk
, 
i
Ë((
X509_INFO
 *)
	`OPENSSL_sk_dñëe
(
	`os¶_check_X509_INFO_sk_ty≥
(sk), (i)))

	)

397 
	#sk_X509_INFO_dñëe_±r
(
sk
, 
±r
Ë((
X509_INFO
 *)
	`OPENSSL_sk_dñëe_±r
(
	`os¶_check_X509_INFO_sk_ty≥
(sk), 
	`os¶_check_X509_INFO_ty≥
’å)))

	)

398 
	#sk_X509_INFO_push
(
sk
, 
±r
Ë
	`OPENSSL_sk_push
(
	`os¶_check_X509_INFO_sk_ty≥
(sk), 
	`os¶_check_X509_INFO_ty≥
’å))

	)

399 
	#sk_X509_INFO_unshi·
(
sk
, 
±r
Ë
	`OPENSSL_sk_unshi·
(
	`os¶_check_X509_INFO_sk_ty≥
(sk), 
	`os¶_check_X509_INFO_ty≥
’å))

	)

400 
	#sk_X509_INFO_p›
(
sk
Ë((
X509_INFO
 *)
	`OPENSSL_sk_p›
(
	`os¶_check_X509_INFO_sk_ty≥
(sk)))

	)

401 
	#sk_X509_INFO_shi·
(
sk
Ë((
X509_INFO
 *)
	`OPENSSL_sk_shi·
(
	`os¶_check_X509_INFO_sk_ty≥
(sk)))

	)

402 
	#sk_X509_INFO_p›_‰ì
(
sk
, 
‰ìfunc
Ë
	`OPENSSL_sk_p›_‰ì
(
	`os¶_check_X509_INFO_sk_ty≥
(sk),
	`os¶_check_X509_INFO_‰ìfunc_ty≥
(‰ìfunc))

	)

403 
	#sk_X509_INFO_ö£π
(
sk
, 
±r
, 
idx
Ë
	`OPENSSL_sk_ö£π
(
	`os¶_check_X509_INFO_sk_ty≥
(sk), 
	`os¶_check_X509_INFO_ty≥
’å), (idx))

	)

404 
	#sk_X509_INFO_£t
(
sk
, 
idx
, 
±r
Ë((
X509_INFO
 *)
	`OPENSSL_sk_£t
(
	`os¶_check_X509_INFO_sk_ty≥
(sk), (idx), 
	`os¶_check_X509_INFO_ty≥
’å)))

	)

405 
	#sk_X509_INFO_föd
(
sk
, 
±r
Ë
	`OPENSSL_sk_föd
(
	`os¶_check_X509_INFO_sk_ty≥
(sk), 
	`os¶_check_X509_INFO_ty≥
’å))

	)

406 
	#sk_X509_INFO_föd_ex
(
sk
, 
±r
Ë
	`OPENSSL_sk_föd_ex
(
	`os¶_check_X509_INFO_sk_ty≥
(sk), 
	`os¶_check_X509_INFO_ty≥
’å))

	)

407 
	#sk_X509_INFO_föd_Æl
(
sk
, 
±r
, 
≤um
Ë
	`OPENSSL_sk_föd_Æl
(
	`os¶_check_X509_INFO_sk_ty≥
(sk), 
	`os¶_check_X509_INFO_ty≥
’å),Önum)

	)

408 
	#sk_X509_INFO_s‹t
(
sk
Ë
	`OPENSSL_sk_s‹t
(
	`os¶_check_X509_INFO_sk_ty≥
(sk))

	)

409 
	#sk_X509_INFO_is_s‹ãd
(
sk
Ë
	`OPENSSL_sk_is_s‹ãd
(
	`os¶_check_c⁄°_X509_INFO_sk_ty≥
(sk))

	)

410 
	#sk_X509_INFO_dup
(
sk
Ë((
	`STACK_OF
(
X509_INFO
Ë*)
	`OPENSSL_sk_dup
(
	`os¶_check_c⁄°_X509_INFO_sk_ty≥
(sk)))

	)

411 
	#sk_X509_INFO_dìp_c›y
(
sk
, 
c›yfunc
, 
‰ìfunc
Ë((
	`STACK_OF
(
X509_INFO
Ë*)
	`OPENSSL_sk_dìp_c›y
(
	`os¶_check_c⁄°_X509_INFO_sk_ty≥
(sk), 
	`os¶_check_X509_INFO_c›yfunc_ty≥
(c›yfunc), 
	`os¶_check_X509_INFO_‰ìfunc_ty≥
(‰ìfunc)))

	)

412 
	#sk_X509_INFO_£t_cmp_func
(
sk
, 
cmp
Ë((
sk_X509_INFO_compfunc
)
	`OPENSSL_sk_£t_cmp_func
(
	`os¶_check_X509_INFO_sk_ty≥
(sk), 
	`os¶_check_X509_INFO_compfunc_ty≥
(cmp)))

	)

419 
	sNësˇ≥_•kac_°
 {

420 
X509_PUBKEY
 *
pubkey
;

421 
ASN1_IA5STRING
 *
chÆÀnge
;

422 } 
	tNETSCAPE_SPKAC
;

424 
	sNësˇ≥_•ki_°
 {

425 
NETSCAPE_SPKAC
 *
•kac
;

426 
X509_ALGOR
 
sig_Æg‹
;

427 
ASN1_BIT_STRING
 *
sig«tuª
;

428 } 
	tNETSCAPE_SPKI
;

431 
	sNësˇ≥_˚πifiˇã_£quí˚
 {

432 
ASN1_OBJECT
 *
ty≥
;

433 
STACK_OF
(
X509
Ë*
˚πs
;

434 } 
	tNETSCAPE_CERT_SEQUENCE
;

445 
	sPBEPARAM_°
 {

446 
ASN1_OCTET_STRING
 *
ß…
;

447 
ASN1_INTEGER
 *
ôî
;

448 } 
	tPBEPARAM
;

452 
	sPBE2PARAM_°
 {

453 
X509_ALGOR
 *
keyfunc
;

454 
X509_ALGOR
 *
í¸y±i⁄
;

455 } 
	tPBE2PARAM
;

457 
	sPBKDF2PARAM_°
 {

459 
ASN1_TYPE
 *
ß…
;

460 
ASN1_INTEGER
 *
ôî
;

461 
ASN1_INTEGER
 *
keyÀngth
;

462 
X509_ALGOR
 *
¥f
;

463 } 
	tPBKDF2PARAM
;

465 #i‚de‡
OPENSSL_NO_SCRYPT


466 
	sSCRYPT_PARAMS_°
 {

467 
ASN1_OCTET_STRING
 *
ß…
;

468 
ASN1_INTEGER
 *
co°P¨amëî
;

469 
ASN1_INTEGER
 *
blockSize
;

470 
ASN1_INTEGER
 *
∑øŒñiz©i⁄P¨amëî
;

471 
ASN1_INTEGER
 *
keyLígth
;

472 } 
	tSCRYPT_PARAMS
;

475 #ifde‡ 
__˝lu•lus


479 
	~<›ís¶/x509_vfy.h
>

480 
	~<›ís¶/pkcs7.h
>

482 #ifde‡ 
__˝lu•lus


486 
	#X509_EXT_PACK_UNKNOWN
 1

	)

487 
	#X509_EXT_PACK_STRING
 2

	)

489 
	#X509_exåa˘_key
(
x
Ë
	`X509_gë_pubkey
(x)

	)

490 
	#X509_REQ_exåa˘_key
(
a
Ë
	`X509_REQ_gë_pubkey
◊)

	)

491 
	#X509_«me_cmp
(
a
,
b
Ë
	`X509_NAME_cmp
(◊),(b))

	)

493 
X509_CRL_£t_deÁu…_mëhod
(c⁄° 
X509_CRL_METHOD
 *
mëh
);

494 
X509_CRL_METHOD
 *
X509_CRL_METHOD_√w
((*
¸l_öô
Ë(
X509_CRL
 *
¸l
),

495 (*
¸l_‰ì
Ë(
X509_CRL
 *
¸l
),

496 (*
¸l_lookup
Ë(
X509_CRL
 *
¸l
,

497 
X509_REVOKED
 **
ªt
,

499 
ASN1_INTEGER
 *
£rül
,

501 
X509_NAME
 *
issuî
),

502 (*
¸l_vîify
Ë(
X509_CRL
 *
¸l
,

503 
EVP_PKEY
 *
pk
));

504 
X509_CRL_METHOD_‰ì
(
X509_CRL_METHOD
 *
m
);

506 
X509_CRL_£t_mëh_d©a
(
X509_CRL
 *
¸l
, *
d©
);

507 *
X509_CRL_gë_mëh_d©a
(
X509_CRL
 *
¸l
);

509 c⁄° *
X509_vîify_˚π_îr‹_°rög
(
n
);

511 
X509_vîify
(
X509
 *
a
, 
EVP_PKEY
 *
r
);

512 
X509_£lf_sig√d
(
X509
 *
˚π
, 
vîify_sig«tuª
);

514 
X509_REQ_vîify_ex
(
X509_REQ
 *
a
, 
EVP_PKEY
 *
r
, 
OSSL_LIB_CTX
 *
lib˘x
,

515 c⁄° *
¥›q
);

516 
X509_REQ_vîify
(
X509_REQ
 *
a
, 
EVP_PKEY
 *
r
);

517 
X509_CRL_vîify
(
X509_CRL
 *
a
, 
EVP_PKEY
 *
r
);

518 
NETSCAPE_SPKI_vîify
(
NETSCAPE_SPKI
 *
a
, 
EVP_PKEY
 *
r
);

520 
NETSCAPE_SPKI
 *
NETSCAPE_SPKI_b64_decode
(c⁄° *
°r
, 
Àn
);

521 *
NETSCAPE_SPKI_b64_ícode
(
NETSCAPE_SPKI
 *
x
);

522 
EVP_PKEY
 *
NETSCAPE_SPKI_gë_pubkey
(
NETSCAPE_SPKI
 *
x
);

523 
NETSCAPE_SPKI_£t_pubkey
(
NETSCAPE_SPKI
 *
x
, 
EVP_PKEY
 *
pkey
);

525 
NETSCAPE_SPKI_¥öt
(
BIO
 *
out
, 
NETSCAPE_SPKI
 *
•ki
);

527 
X509_sig«tuª_dump
(
BIO
 *
bp
, c⁄° 
ASN1_STRING
 *
sig
, 
ödít
);

528 
X509_sig«tuª_¥öt
(
BIO
 *
bp
, c⁄° 
X509_ALGOR
 *
Æg
,

529 c⁄° 
ASN1_STRING
 *
sig
);

531 
X509_sign
(
X509
 *
x
, 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
md
);

532 
X509_sign_˘x
(
X509
 *
x
, 
EVP_MD_CTX
 *
˘x
);

533 
X509_REQ_sign
(
X509_REQ
 *
x
, 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
md
);

534 
X509_REQ_sign_˘x
(
X509_REQ
 *
x
, 
EVP_MD_CTX
 *
˘x
);

535 
X509_CRL_sign
(
X509_CRL
 *
x
, 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
md
);

536 
X509_CRL_sign_˘x
(
X509_CRL
 *
x
, 
EVP_MD_CTX
 *
˘x
);

537 
NETSCAPE_SPKI_sign
(
NETSCAPE_SPKI
 *
x
, 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
md
);

539 
X509_pubkey_dige°
(c⁄° 
X509
 *
d©a
, c⁄° 
EVP_MD
 *
ty≥
,

540 *
md
, *
Àn
);

541 
X509_dige°
(c⁄° 
X509
 *
d©a
, c⁄° 
EVP_MD
 *
ty≥
,

542 *
md
, *
Àn
);

543 
ASN1_OCTET_STRING
 *
X509_dige°_sig
(c⁄° 
X509
 *
˚π
,

544 
EVP_MD
 **
md_u£d
, *
md_is_ÁŒback
);

545 
X509_CRL_dige°
(c⁄° 
X509_CRL
 *
d©a
, c⁄° 
EVP_MD
 *
ty≥
,

546 *
md
, *
Àn
);

547 
X509_REQ_dige°
(c⁄° 
X509_REQ
 *
d©a
, c⁄° 
EVP_MD
 *
ty≥
,

548 *
md
, *
Àn
);

549 
X509_NAME_dige°
(c⁄° 
X509_NAME
 *
d©a
, c⁄° 
EVP_MD
 *
ty≥
,

550 *
md
, *
Àn
);

552 
X509
 *
X509_lﬂd_hâp
(c⁄° *
uæ
, 
BIO
 *
bio
, BIO *
rbio
, 
timeout
);

553 
X509_CRL
 *
X509_CRL_lﬂd_hâp
(c⁄° *
uæ
, 
BIO
 *
bio
, BIO *
rbio
, 
timeout
);

554 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


555 
	~<›ís¶/oc•.h
>

556 
	#X509_hâp_nbio
(
r˘x
, 
p˚π
) \

557 
	`OCSP_REQ_CTX_nbio_d2i
(
r˘x
, 
p˚π
, 
	`ASN1_ITEM_Ωå
(
X509
))

	)

558 
	#X509_CRL_hâp_nbio
(
r˘x
, 
p¸l
) \

559 
	`OCSP_REQ_CTX_nbio_d2i
(
r˘x
, 
p¸l
, 
	`ASN1_ITEM_Ωå
(
X509_CRL
))

	)

562 #i‚de‡
OPENSSL_NO_STDIO


563 
X509
 *
d2i_X509_Â
(
FILE
 *
Â
, X509 **
x509
);

564 
i2d_X509_Â
(
FILE
 *
Â
, c⁄° 
X509
 *
x509
);

565 
X509_CRL
 *
d2i_X509_CRL_Â
(
FILE
 *
Â
, X509_CRL **
¸l
);

566 
i2d_X509_CRL_Â
(
FILE
 *
Â
, c⁄° 
X509_CRL
 *
¸l
);

567 
X509_REQ
 *
d2i_X509_REQ_Â
(
FILE
 *
Â
, X509_REQ **
ªq
);

568 
i2d_X509_REQ_Â
(
FILE
 *
Â
, c⁄° 
X509_REQ
 *
ªq
);

569 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


570 
OSSL_DEPRECATEDIN_3_0
 
RSA
 *
d2i_RSAPriv©eKey_Â
(
FILE
 *
Â
, RSA **
rß
);

571 
OSSL_DEPRECATEDIN_3_0
 
i2d_RSAPriv©eKey_Â
(
FILE
 *
Â
, c⁄° 
RSA
 *
rß
);

572 
OSSL_DEPRECATEDIN_3_0
 
RSA
 *
d2i_RSAPublicKey_Â
(
FILE
 *
Â
, RSA **
rß
);

573 
OSSL_DEPRECATEDIN_3_0
 
i2d_RSAPublicKey_Â
(
FILE
 *
Â
, c⁄° 
RSA
 *
rß
);

574 
OSSL_DEPRECATEDIN_3_0
 
RSA
 *
d2i_RSA_PUBKEY_Â
(
FILE
 *
Â
, RSA **
rß
);

575 
OSSL_DEPRECATEDIN_3_0
 
i2d_RSA_PUBKEY_Â
(
FILE
 *
Â
, c⁄° 
RSA
 *
rß
);

577 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


578 #i‚de‡
OPENSSL_NO_DSA


579 
OSSL_DEPRECATEDIN_3_0
 
DSA
 *
d2i_DSA_PUBKEY_Â
(
FILE
 *
Â
, DSA **
dß
);

580 
OSSL_DEPRECATEDIN_3_0
 
i2d_DSA_PUBKEY_Â
(
FILE
 *
Â
, c⁄° 
DSA
 *
dß
);

581 
OSSL_DEPRECATEDIN_3_0
 
DSA
 *
d2i_DSAPriv©eKey_Â
(
FILE
 *
Â
, DSA **
dß
);

582 
OSSL_DEPRECATEDIN_3_0
 
i2d_DSAPriv©eKey_Â
(
FILE
 *
Â
, c⁄° 
DSA
 *
dß
);

585 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


586 #i‚de‡
OPENSSL_NO_EC


587 
OSSL_DEPRECATEDIN_3_0
 
EC_KEY
 *
d2i_EC_PUBKEY_Â
(
FILE
 *
Â
, EC_KEY **
eckey
);

588 
OSSL_DEPRECATEDIN_3_0
 
i2d_EC_PUBKEY_Â
(
FILE
 *
Â
, c⁄° 
EC_KEY
 *
eckey
);

589 
OSSL_DEPRECATEDIN_3_0
 
EC_KEY
 *
d2i_ECPriv©eKey_Â
(
FILE
 *
Â
, EC_KEY **
eckey
);

590 
OSSL_DEPRECATEDIN_3_0
 
i2d_ECPriv©eKey_Â
(
FILE
 *
Â
, c⁄° 
EC_KEY
 *
eckey
);

593 
X509_SIG
 *
d2i_PKCS8_Â
(
FILE
 *
Â
, X509_SIG **
p8
);

594 
i2d_PKCS8_Â
(
FILE
 *
Â
, c⁄° 
X509_SIG
 *
p8
);

595 
X509_PUBKEY
 *
d2i_X509_PUBKEY_Â
(
FILE
 *
Â
, X509_PUBKEY **
xpk
);

596 
i2d_X509_PUBKEY_Â
(
FILE
 *
Â
, c⁄° 
X509_PUBKEY
 *
xpk
);

597 
PKCS8_PRIV_KEY_INFO
 *
d2i_PKCS8_PRIV_KEY_INFO_Â
(
FILE
 *
Â
,

598 
PKCS8_PRIV_KEY_INFO
 **
p8öf
);

599 
i2d_PKCS8_PRIV_KEY_INFO_Â
(
FILE
 *
Â
, c⁄° 
PKCS8_PRIV_KEY_INFO
 *
p8öf
);

600 
i2d_PKCS8Priv©eKeyInfo_Â
(
FILE
 *
Â
, c⁄° 
EVP_PKEY
 *
key
);

601 
i2d_Priv©eKey_Â
(
FILE
 *
Â
, c⁄° 
EVP_PKEY
 *
pkey
);

602 
EVP_PKEY
 *
d2i_Priv©eKey_ex_Â
(
FILE
 *
Â
, EVP_PKEY **
a
, 
OSSL_LIB_CTX
 *
lib˘x
,

603 c⁄° *
¥›q
);

604 
EVP_PKEY
 *
d2i_Priv©eKey_Â
(
FILE
 *
Â
, EVP_PKEY **
a
);

605 
i2d_PUBKEY_Â
(
FILE
 *
Â
, c⁄° 
EVP_PKEY
 *
pkey
);

606 
EVP_PKEY
 *
d2i_PUBKEY_Â
(
FILE
 *
Â
, EVP_PKEY **
a
);

609 
X509
 *
d2i_X509_bio
(
BIO
 *
bp
, X509 **
x509
);

610 
i2d_X509_bio
(
BIO
 *
bp
, c⁄° 
X509
 *
x509
);

611 
X509_CRL
 *
d2i_X509_CRL_bio
(
BIO
 *
bp
, X509_CRL **
¸l
);

612 
i2d_X509_CRL_bio
(
BIO
 *
bp
, c⁄° 
X509_CRL
 *
¸l
);

613 
X509_REQ
 *
d2i_X509_REQ_bio
(
BIO
 *
bp
, X509_REQ **
ªq
);

614 
i2d_X509_REQ_bio
(
BIO
 *
bp
, c⁄° 
X509_REQ
 *
ªq
);

615 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


616 
OSSL_DEPRECATEDIN_3_0
 
RSA
 *
d2i_RSAPriv©eKey_bio
(
BIO
 *
bp
, RSA **
rß
);

617 
OSSL_DEPRECATEDIN_3_0
 
i2d_RSAPriv©eKey_bio
(
BIO
 *
bp
, c⁄° 
RSA
 *
rß
);

618 
OSSL_DEPRECATEDIN_3_0
 
RSA
 *
d2i_RSAPublicKey_bio
(
BIO
 *
bp
, RSA **
rß
);

619 
OSSL_DEPRECATEDIN_3_0
 
i2d_RSAPublicKey_bio
(
BIO
 *
bp
, c⁄° 
RSA
 *
rß
);

620 
OSSL_DEPRECATEDIN_3_0
 
RSA
 *
d2i_RSA_PUBKEY_bio
(
BIO
 *
bp
, RSA **
rß
);

621 
OSSL_DEPRECATEDIN_3_0
 
i2d_RSA_PUBKEY_bio
(
BIO
 *
bp
, c⁄° 
RSA
 *
rß
);

623 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


624 #i‚de‡
OPENSSL_NO_DSA


625 
OSSL_DEPRECATEDIN_3_0
 
DSA
 *
d2i_DSA_PUBKEY_bio
(
BIO
 *
bp
, DSA **
dß
);

626 
OSSL_DEPRECATEDIN_3_0
 
i2d_DSA_PUBKEY_bio
(
BIO
 *
bp
, c⁄° 
DSA
 *
dß
);

627 
OSSL_DEPRECATEDIN_3_0
 
DSA
 *
d2i_DSAPriv©eKey_bio
(
BIO
 *
bp
, DSA **
dß
);

628 
OSSL_DEPRECATEDIN_3_0
 
i2d_DSAPriv©eKey_bio
(
BIO
 *
bp
, c⁄° 
DSA
 *
dß
);

632 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


633 #i‚de‡
OPENSSL_NO_EC


634 
OSSL_DEPRECATEDIN_3_0
 
EC_KEY
 *
d2i_EC_PUBKEY_bio
(
BIO
 *
bp
, EC_KEY **
eckey
);

635 
OSSL_DEPRECATEDIN_3_0
 
i2d_EC_PUBKEY_bio
(
BIO
 *
bp
, c⁄° 
EC_KEY
 *
eckey
);

636 
OSSL_DEPRECATEDIN_3_0
 
EC_KEY
 *
d2i_ECPriv©eKey_bio
(
BIO
 *
bp
, EC_KEY **
eckey
);

637 
OSSL_DEPRECATEDIN_3_0
 
i2d_ECPriv©eKey_bio
(
BIO
 *
bp
, c⁄° 
EC_KEY
 *
eckey
);

641 
X509_SIG
 *
d2i_PKCS8_bio
(
BIO
 *
bp
, X509_SIG **
p8
);

642 
i2d_PKCS8_bio
(
BIO
 *
bp
, c⁄° 
X509_SIG
 *
p8
);

643 
X509_PUBKEY
 *
d2i_X509_PUBKEY_bio
(
BIO
 *
bp
, X509_PUBKEY **
xpk
);

644 
i2d_X509_PUBKEY_bio
(
BIO
 *
bp
, c⁄° 
X509_PUBKEY
 *
xpk
);

645 
PKCS8_PRIV_KEY_INFO
 *
d2i_PKCS8_PRIV_KEY_INFO_bio
(
BIO
 *
bp
,

646 
PKCS8_PRIV_KEY_INFO
 **
p8öf
);

647 
i2d_PKCS8_PRIV_KEY_INFO_bio
(
BIO
 *
bp
, c⁄° 
PKCS8_PRIV_KEY_INFO
 *
p8öf
);

648 
i2d_PKCS8Priv©eKeyInfo_bio
(
BIO
 *
bp
, c⁄° 
EVP_PKEY
 *
key
);

649 
i2d_Priv©eKey_bio
(
BIO
 *
bp
, c⁄° 
EVP_PKEY
 *
pkey
);

650 
EVP_PKEY
 *
d2i_Priv©eKey_ex_bio
(
BIO
 *
bp
, EVP_PKEY **
a
, 
OSSL_LIB_CTX
 *
lib˘x
,

651 c⁄° *
¥›q
);

652 
EVP_PKEY
 *
d2i_Priv©eKey_bio
(
BIO
 *
bp
, EVP_PKEY **
a
);

653 
i2d_PUBKEY_bio
(
BIO
 *
bp
, c⁄° 
EVP_PKEY
 *
pkey
);

654 
EVP_PKEY
 *
d2i_PUBKEY_bio
(
BIO
 *
bp
, EVP_PKEY **
a
);

656 
DECLARE_ASN1_DUP_FUNCTION
(
X509
)

657 
DECLARE_ASN1_DUP_FUNCTION
(
X509_ALGOR
)

658 
DECLARE_ASN1_DUP_FUNCTION
(
X509_ATTRIBUTE
)

659 
DECLARE_ASN1_DUP_FUNCTION
(
X509_CRL
)

660 
DECLARE_ASN1_DUP_FUNCTION
(
X509_EXTENSION
)

661 
DECLARE_ASN1_DUP_FUNCTION
(
X509_PUBKEY
)

662 
DECLARE_ASN1_DUP_FUNCTION
(
X509_REQ
)

663 
DECLARE_ASN1_DUP_FUNCTION
(
X509_REVOKED
)

664 
X509_ALGOR_£t0
(
X509_ALGOR
 *
Æg
, 
ASN1_OBJECT
 *
aobj
, 
±y≥
,

665 *
pvÆ
);

666 
X509_ALGOR_gë0
(c⁄° 
ASN1_OBJECT
 **
∑obj
, *
µty≥
,

667 c⁄° **
µvÆ
, c⁄° 
X509_ALGOR
 *
Æg‹
);

668 
X509_ALGOR_£t_md
(
X509_ALGOR
 *
Æg
, c⁄° 
EVP_MD
 *
md
);

669 
X509_ALGOR_cmp
(c⁄° 
X509_ALGOR
 *
a
, c⁄° X509_ALGOR *
b
);

670 
X509_ALGOR_c›y
(
X509_ALGOR
 *
de°
, c⁄° X509_ALGOR *
§c
);

672 
DECLARE_ASN1_DUP_FUNCTION
(
X509_NAME
)

673 
DECLARE_ASN1_DUP_FUNCTION
(
X509_NAME_ENTRY
)

675 
X509_cmp_time
(c⁄° 
ASN1_TIME
 *
s
, 
time_t
 *
t
);

676 
X509_cmp_cuºít_time
(c⁄° 
ASN1_TIME
 *
s
);

677 
X509_cmp_time‰ame
(c⁄° 
X509_VERIFY_PARAM
 *
vpm
,

678 c⁄° 
ASN1_TIME
 *
°¨t
, c⁄° ASN1_TIME *
íd
);

679 
ASN1_TIME
 *
X509_time_adj
(ASN1_TIME *
s
, 
adj
, 
time_t
 *
t
);

680 
ASN1_TIME
 *
X509_time_adj_ex
(ASN1_TIME *
s
,

681 
off£t_day
, 
off£t_£c
, 
time_t
 *
t
);

682 
ASN1_TIME
 *
X509_gmtime_adj
(ASN1_TIME *
s
, 
adj
);

684 c⁄° *
X509_gë_deÁu…_˚π_¨ó
();

685 c⁄° *
X509_gë_deÁu…_˚π_dú
();

686 c⁄° *
X509_gë_deÁu…_˚π_fûe
();

687 c⁄° *
X509_gë_deÁu…_˚π_dú_ív
();

688 c⁄° *
X509_gë_deÁu…_˚π_fûe_ív
();

689 c⁄° *
X509_gë_deÁu…_¥iv©e_dú
();

691 
X509_REQ
 *
X509_to_X509_REQ
(
X509
 *
x
, 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
md
);

692 
X509
 *
X509_REQ_to_X509
(
X509_REQ
 *
r
, 
days
, 
EVP_PKEY
 *
pkey
);

694 
DECLARE_ASN1_FUNCTIONS
(
X509_ALGOR
)

695 
DECLARE_ASN1_ENCODE_FUNCTIONS
(
X509_ALGORS
, X509_ALGORS, X509_ALGORS)

696 
DECLARE_ASN1_FUNCTIONS
(
X509_VAL
)

698 
DECLARE_ASN1_FUNCTIONS
(
X509_PUBKEY
)

700 
X509_PUBKEY
 *
X509_PUBKEY_√w_ex
(
OSSL_LIB_CTX
 *
lib˘x
, c⁄° *
¥›q
);

701 
X509_PUBKEY_£t
(
X509_PUBKEY
 **
x
, 
EVP_PKEY
 *
pkey
);

702 
EVP_PKEY
 *
X509_PUBKEY_gë0
(c⁄° 
X509_PUBKEY
 *
key
);

703 
EVP_PKEY
 *
X509_PUBKEY_gë
(c⁄° 
X509_PUBKEY
 *
key
);

704 
X509_gë_pubkey_∑ømëîs
(
EVP_PKEY
 *
pkey
, 
STACK_OF
(
X509
Ë*
chaö
);

705 
X509_gë_∑thÀn
(
X509
 *
x
);

706 
DECLARE_ASN1_ENCODE_FUNCTIONS_⁄ly
(
EVP_PKEY
, 
PUBKEY
)

707 
EVP_PKEY
 *
d2i_PUBKEY_ex
(EVP_PKEY **
a
, c⁄° **
µ
, 
Àngth
,

708 
OSSL_LIB_CTX
 *
lib˘x
, c⁄° *
¥›q
);

709 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


710 
DECLARE_ASN1_ENCODE_FUNCTIONS_⁄ly_©å
(
OSSL_DEPRECATEDIN_3_0
,
RSA
, 
RSA_PUBKEY
)

712 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


713 #i‚de‡
OPENSSL_NO_DSA


714 
DECLARE_ASN1_ENCODE_FUNCTIONS_⁄ly_©å
(
OSSL_DEPRECATEDIN_3_0
,
DSA
, 
DSA_PUBKEY
)

717 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


718 #i‚de‡
OPENSSL_NO_EC


719 
DECLARE_ASN1_ENCODE_FUNCTIONS_⁄ly_©å
(
OSSL_DEPRECATEDIN_3_0
, 
EC_KEY
, 
EC_PUBKEY
)

723 
DECLARE_ASN1_FUNCTIONS
(
X509_SIG
)

724 
X509_SIG_gë0
(c⁄° 
X509_SIG
 *
sig
, c⁄° 
X509_ALGOR
 **
∑lg
,

725 c⁄° 
ASN1_OCTET_STRING
 **
pdige°
);

726 
X509_SIG_gëm
(
X509_SIG
 *
sig
, 
X509_ALGOR
 **
∑lg
,

727 
ASN1_OCTET_STRING
 **
pdige°
);

729 
DECLARE_ASN1_FUNCTIONS
(
X509_REQ_INFO
)

730 
DECLARE_ASN1_FUNCTIONS
(
X509_REQ
)

731 
X509_REQ
 *
X509_REQ_√w_ex
(
OSSL_LIB_CTX
 *
lib˘x
, c⁄° *
¥›q
);

733 
DECLARE_ASN1_FUNCTIONS
(
X509_ATTRIBUTE
)

734 
X509_ATTRIBUTE
 *
X509_ATTRIBUTE_¸óã
(
nid
, 
©πy≥
, *
vÆue
);

736 
DECLARE_ASN1_FUNCTIONS
(
X509_EXTENSION
)

737 
DECLARE_ASN1_ENCODE_FUNCTIONS
(
X509_EXTENSIONS
, X509_EXTENSIONS, X509_EXTENSIONS)

739 
DECLARE_ASN1_FUNCTIONS
(
X509_NAME_ENTRY
)

741 
DECLARE_ASN1_FUNCTIONS
(
X509_NAME
)

743 
X509_NAME_£t
(
X509_NAME
 **
xn
, c⁄° X509_NAME *
«me
);

745 
DECLARE_ASN1_FUNCTIONS
(
X509_CINF
)

746 
DECLARE_ASN1_FUNCTIONS
(
X509
)

747 
X509
 *
X509_√w_ex
(
OSSL_LIB_CTX
 *
lib˘x
, c⁄° *
¥›q
);

748 
DECLARE_ASN1_FUNCTIONS
(
X509_CERT_AUX
)

750 
	#X509_gë_ex_√w_ödex
(
l
, 
p
, 
√wf
, 
dupf
, 
‰ìf
) \

751 
	`CRYPTO_gë_ex_√w_ödex
(
CRYPTO_EX_INDEX_X509
, 
l
, 
p
, 
√wf
, 
dupf
, 
‰ìf
)

	)

752 
X509_£t_ex_d©a
(
X509
 *
r
, 
idx
, *
¨g
);

753 *
X509_gë_ex_d©a
(c⁄° 
X509
 *
r
, 
idx
);

754 
DECLARE_ASN1_ENCODE_FUNCTIONS_⁄ly
(
X509
,
X509_AUX
)

756 
i2d_ª_X509_tbs
(
X509
 *
x
, **
µ
);

758 
X509_SIG_INFO_gë
(c⁄° 
X509_SIG_INFO
 *
sigöf
, *
mdnid
, *
pknid
,

759 *
£cbôs
, 
uöt32_t
 *
Êags
);

760 
X509_SIG_INFO_£t
(
X509_SIG_INFO
 *
sigöf
, 
mdnid
, 
pknid
,

761 
£cbôs
, 
uöt32_t
 
Êags
);

763 
X509_gë_sig«tuª_öfo
(
X509
 *
x
, *
mdnid
, *
pknid
, *
£cbôs
,

764 
uöt32_t
 *
Êags
);

766 
X509_gë0_sig«tuª
(c⁄° 
ASN1_BIT_STRING
 **
psig
,

767 c⁄° 
X509_ALGOR
 **
∑lg
, c⁄° 
X509
 *
x
);

768 
X509_gë_sig«tuª_nid
(c⁄° 
X509
 *
x
);

770 
X509_£t0_di°öguishög_id
(
X509
 *
x
, 
ASN1_OCTET_STRING
 *
d_id
);

771 
ASN1_OCTET_STRING
 *
X509_gë0_di°öguishög_id
(
X509
 *
x
);

772 
X509_REQ_£t0_di°öguishög_id
(
X509_REQ
 *
x
, 
ASN1_OCTET_STRING
 *
d_id
);

773 
ASN1_OCTET_STRING
 *
X509_REQ_gë0_di°öguishög_id
(
X509_REQ
 *
x
);

775 
X509_Æüs_£t1
(
X509
 *
x
, c⁄° *
«me
, 
Àn
);

776 
X509_keyid_£t1
(
X509
 *
x
, c⁄° *
id
, 
Àn
);

777 *
X509_Æüs_gë0
(
X509
 *
x
, *
Àn
);

778 *
X509_keyid_gë0
(
X509
 *
x
, *
Àn
);

780 
DECLARE_ASN1_FUNCTIONS
(
X509_REVOKED
)

781 
DECLARE_ASN1_FUNCTIONS
(
X509_CRL_INFO
)

782 
DECLARE_ASN1_FUNCTIONS
(
X509_CRL
)

783 
X509_CRL
 *
X509_CRL_√w_ex
(
OSSL_LIB_CTX
 *
lib˘x
, c⁄° *
¥›q
);

785 
X509_CRL_add0_ªvoked
(
X509_CRL
 *
¸l
, 
X509_REVOKED
 *
ªv
);

786 
X509_CRL_gë0_by_£rül
(
X509_CRL
 *
¸l
,

787 
X509_REVOKED
 **
ªt
, c⁄° 
ASN1_INTEGER
 *
£rül
);

788 
X509_CRL_gë0_by_˚π
(
X509_CRL
 *
¸l
, 
X509_REVOKED
 **
ªt
, 
X509
 *
x
);

790 
X509_PKEY
 *
X509_PKEY_√w
();

791 
X509_PKEY_‰ì
(
X509_PKEY
 *
a
);

793 
DECLARE_ASN1_FUNCTIONS
(
NETSCAPE_SPKI
)

794 
DECLARE_ASN1_FUNCTIONS
(
NETSCAPE_SPKAC
)

795 
DECLARE_ASN1_FUNCTIONS
(
NETSCAPE_CERT_SEQUENCE
)

797 
X509_INFO
 *
X509_INFO_√w
();

798 
X509_INFO_‰ì
(
X509_INFO
 *
a
);

799 *
X509_NAME_⁄ñöe
(c⁄° 
X509_NAME
 *
a
, *
buf
, 
size
);

801 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


802 
OSSL_DEPRECATEDIN_3_0


803 
ASN1_vîify
(
i2d_of_void
 *
i2d
, 
X509_ALGOR
 *
Æg‹1
,

804 
ASN1_BIT_STRING
 *
sig«tuª
, *
d©a
, 
EVP_PKEY
 *
pkey
);

805 
OSSL_DEPRECATEDIN_3_0


806 
ASN1_dige°
(
i2d_of_void
 *
i2d
, c⁄° 
EVP_MD
 *
ty≥
, *
d©a
,

807 *
md
, *
Àn
);

808 
OSSL_DEPRECATEDIN_3_0


809 
ASN1_sign
(
i2d_of_void
 *
i2d
, 
X509_ALGOR
 *
Æg‹1
, X509_ALGOR *
Æg‹2
,

810 
ASN1_BIT_STRING
 *
sig«tuª
, *
d©a
, 
EVP_PKEY
 *
pkey
,

811 c⁄° 
EVP_MD
 *
ty≥
);

813 
ASN1_ôem_dige°
(c⁄° 
ASN1_ITEM
 *
ô
, c⁄° 
EVP_MD
 *
ty≥
, *
d©a
,

814 *
md
, *
Àn
);

815 
ASN1_ôem_vîify
(c⁄° 
ASN1_ITEM
 *
ô
, c⁄° 
X509_ALGOR
 *
Æg
,

816 c⁄° 
ASN1_BIT_STRING
 *
sig«tuª
, c⁄° *
d©a
,

817 
EVP_PKEY
 *
pkey
);

818 
ASN1_ôem_vîify_˘x
(c⁄° 
ASN1_ITEM
 *
ô
, c⁄° 
X509_ALGOR
 *
Æg
,

819 c⁄° 
ASN1_BIT_STRING
 *
sig«tuª
, c⁄° *
d©a
,

820 
EVP_MD_CTX
 *
˘x
);

821 
ASN1_ôem_sign
(c⁄° 
ASN1_ITEM
 *
ô
, 
X509_ALGOR
 *
Æg‹1
, X509_ALGOR *
Æg‹2
,

822 
ASN1_BIT_STRING
 *
sig«tuª
, c⁄° *
d©a
,

823 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
md
);

824 
ASN1_ôem_sign_˘x
(c⁄° 
ASN1_ITEM
 *
ô
, 
X509_ALGOR
 *
Æg‹1
,

825 
X509_ALGOR
 *
Æg‹2
, 
ASN1_BIT_STRING
 *
sig«tuª
,

826 c⁄° *
d©a
, 
EVP_MD_CTX
 *
˘x
);

828 
	#X509_VERSION_1
 0

	)

829 
	#X509_VERSION_2
 1

	)

830 
	#X509_VERSION_3
 2

	)

832 
X509_gë_vîsi⁄
(c⁄° 
X509
 *
x
);

833 
X509_£t_vîsi⁄
(
X509
 *
x
, 
vîsi⁄
);

834 
X509_£t_£rülNumbî
(
X509
 *
x
, 
ASN1_INTEGER
 *
£rül
);

835 
ASN1_INTEGER
 *
X509_gë_£rülNumbî
(
X509
 *
x
);

836 c⁄° 
ASN1_INTEGER
 *
X509_gë0_£rülNumbî
(c⁄° 
X509
 *
x
);

837 
X509_£t_issuî_«me
(
X509
 *
x
, c⁄° 
X509_NAME
 *
«me
);

838 
X509_NAME
 *
X509_gë_issuî_«me
(c⁄° 
X509
 *
a
);

839 
X509_£t_subje˘_«me
(
X509
 *
x
, c⁄° 
X509_NAME
 *
«me
);

840 
X509_NAME
 *
X509_gë_subje˘_«me
(c⁄° 
X509
 *
a
);

841 c⁄° 
ASN1_TIME
 * 
X509_gë0_nŸBef‹e
(c⁄° 
X509
 *
x
);

842 
ASN1_TIME
 *
X509_gëm_nŸBef‹e
(c⁄° 
X509
 *
x
);

843 
X509_£t1_nŸBef‹e
(
X509
 *
x
, c⁄° 
ASN1_TIME
 *
tm
);

844 c⁄° 
ASN1_TIME
 *
X509_gë0_nŸA·î
(c⁄° 
X509
 *
x
);

845 
ASN1_TIME
 *
X509_gëm_nŸA·î
(c⁄° 
X509
 *
x
);

846 
X509_£t1_nŸA·î
(
X509
 *
x
, c⁄° 
ASN1_TIME
 *
tm
);

847 
X509_£t_pubkey
(
X509
 *
x
, 
EVP_PKEY
 *
pkey
);

848 
X509_up_ªf
(
X509
 *
x
);

849 
X509_gë_sig«tuª_ty≥
(c⁄° 
X509
 *
x
);

851 #i‚de‡
OPENSSL_NO_DEPRECATED_1_1_0


852 
	#X509_gë_nŸBef‹e
 
X509_gëm_nŸBef‹e


	)

853 
	#X509_gë_nŸA·î
 
X509_gëm_nŸA·î


	)

854 
	#X509_£t_nŸBef‹e
 
X509_£t1_nŸBef‹e


	)

855 
	#X509_£t_nŸA·î
 
X509_£t1_nŸA·î


	)

863 
X509_PUBKEY
 *
X509_gë_X509_PUBKEY
(c⁄° 
X509
 *
x
);

864 c⁄° 
STACK_OF
(
X509_EXTENSION
Ë*
X509_gë0_exãnsi⁄s
(c⁄° 
X509
 *
x
);

865 
X509_gë0_uids
(c⁄° 
X509
 *
x
, c⁄° 
ASN1_BIT_STRING
 **
piuid
,

866 c⁄° 
ASN1_BIT_STRING
 **
psuid
);

867 c⁄° 
X509_ALGOR
 *
X509_gë0_tbs_sigÆg
(c⁄° 
X509
 *
x
);

869 
EVP_PKEY
 *
X509_gë0_pubkey
(c⁄° 
X509
 *
x
);

870 
EVP_PKEY
 *
X509_gë_pubkey
(
X509
 *
x
);

871 
ASN1_BIT_STRING
 *
X509_gë0_pubkey_bô°r
(c⁄° 
X509
 *
x
);

873 
	#X509_REQ_VERSION_1
 0

	)

875 
X509_REQ_gë_vîsi⁄
(c⁄° 
X509_REQ
 *
ªq
);

876 
X509_REQ_£t_vîsi⁄
(
X509_REQ
 *
x
, 
vîsi⁄
);

877 
X509_NAME
 *
X509_REQ_gë_subje˘_«me
(c⁄° 
X509_REQ
 *
ªq
);

878 
X509_REQ_£t_subje˘_«me
(
X509_REQ
 *
ªq
, c⁄° 
X509_NAME
 *
«me
);

879 
X509_REQ_gë0_sig«tuª
(c⁄° 
X509_REQ
 *
ªq
, c⁄° 
ASN1_BIT_STRING
 **
psig
,

880 c⁄° 
X509_ALGOR
 **
∑lg
);

881 
X509_REQ_£t0_sig«tuª
(
X509_REQ
 *
ªq
, 
ASN1_BIT_STRING
 *
psig
);

882 
X509_REQ_£t1_sig«tuª_Ægo
(
X509_REQ
 *
ªq
, 
X509_ALGOR
 *
∑lg
);

883 
X509_REQ_gë_sig«tuª_nid
(c⁄° 
X509_REQ
 *
ªq
);

884 
i2d_ª_X509_REQ_tbs
(
X509_REQ
 *
ªq
, **
µ
);

885 
X509_REQ_£t_pubkey
(
X509_REQ
 *
x
, 
EVP_PKEY
 *
pkey
);

886 
EVP_PKEY
 *
X509_REQ_gë_pubkey
(
X509_REQ
 *
ªq
);

887 
EVP_PKEY
 *
X509_REQ_gë0_pubkey
(
X509_REQ
 *
ªq
);

888 
X509_PUBKEY
 *
X509_REQ_gë_X509_PUBKEY
(
X509_REQ
 *
ªq
);

889 
X509_REQ_exãnsi⁄_nid
(
nid
);

890 *
X509_REQ_gë_exãnsi⁄_nids
();

891 
X509_REQ_£t_exãnsi⁄_nids
(*
nids
);

892 
STACK_OF
(
X509_EXTENSION
Ë*
X509_REQ_gë_exãnsi⁄s
(
X509_REQ
 *
ªq
);

893 
X509_REQ_add_exãnsi⁄s_nid
(
X509_REQ
 *
ªq
,

894 c⁄° 
STACK_OF
(
X509_EXTENSION
Ë*
exts
, 
nid
);

895 
X509_REQ_add_exãnsi⁄s
(
X509_REQ
 *
ªq
, c⁄° 
STACK_OF
(
X509_EXTENSION
Ë*
ext
);

896 
X509_REQ_gë_©å_cou¡
(c⁄° 
X509_REQ
 *
ªq
);

897 
X509_REQ_gë_©å_by_NID
(c⁄° 
X509_REQ
 *
ªq
, 
nid
, 
œ°pos
);

898 
X509_REQ_gë_©å_by_OBJ
(c⁄° 
X509_REQ
 *
ªq
, c⁄° 
ASN1_OBJECT
 *
obj
,

899 
œ°pos
);

900 
X509_ATTRIBUTE
 *
X509_REQ_gë_©å
(c⁄° 
X509_REQ
 *
ªq
, 
loc
);

901 
X509_ATTRIBUTE
 *
X509_REQ_dñëe_©å
(
X509_REQ
 *
ªq
, 
loc
);

902 
X509_REQ_add1_©å
(
X509_REQ
 *
ªq
, 
X509_ATTRIBUTE
 *
©å
);

903 
X509_REQ_add1_©å_by_OBJ
(
X509_REQ
 *
ªq
,

904 c⁄° 
ASN1_OBJECT
 *
obj
, 
ty≥
,

905 c⁄° *
byãs
, 
Àn
);

906 
X509_REQ_add1_©å_by_NID
(
X509_REQ
 *
ªq
,

907 
nid
, 
ty≥
,

908 c⁄° *
byãs
, 
Àn
);

909 
X509_REQ_add1_©å_by_txt
(
X509_REQ
 *
ªq
,

910 c⁄° *
©å«me
, 
ty≥
,

911 c⁄° *
byãs
, 
Àn
);

913 
	#X509_CRL_VERSION_1
 0

	)

914 
	#X509_CRL_VERSION_2
 1

	)

916 
X509_CRL_£t_vîsi⁄
(
X509_CRL
 *
x
, 
vîsi⁄
);

917 
X509_CRL_£t_issuî_«me
(
X509_CRL
 *
x
, c⁄° 
X509_NAME
 *
«me
);

918 
X509_CRL_£t1_œ°Upd©e
(
X509_CRL
 *
x
, c⁄° 
ASN1_TIME
 *
tm
);

919 
X509_CRL_£t1_√xtUpd©e
(
X509_CRL
 *
x
, c⁄° 
ASN1_TIME
 *
tm
);

920 
X509_CRL_s‹t
(
X509_CRL
 *
¸l
);

921 
X509_CRL_up_ªf
(
X509_CRL
 *
¸l
);

923 #i‚de‡
OPENSSL_NO_DEPRECATED_1_1_0


924 
	#X509_CRL_£t_œ°Upd©e
 
X509_CRL_£t1_œ°Upd©e


	)

925 
	#X509_CRL_£t_√xtUpd©e
 
X509_CRL_£t1_√xtUpd©e


	)

928 
X509_CRL_gë_vîsi⁄
(c⁄° 
X509_CRL
 *
¸l
);

929 c⁄° 
ASN1_TIME
 *
X509_CRL_gë0_œ°Upd©e
(c⁄° 
X509_CRL
 *
¸l
);

930 c⁄° 
ASN1_TIME
 *
X509_CRL_gë0_√xtUpd©e
(c⁄° 
X509_CRL
 *
¸l
);

931 #i‚de‡
OPENSSL_NO_DEPRECATED_1_1_0


932 
OSSL_DEPRECATEDIN_1_1_0
 
ASN1_TIME
 *
X509_CRL_gë_œ°Upd©e
(
X509_CRL
 *
¸l
);

933 
OSSL_DEPRECATEDIN_1_1_0
 
ASN1_TIME
 *
X509_CRL_gë_√xtUpd©e
(
X509_CRL
 *
¸l
);

935 
X509_NAME
 *
X509_CRL_gë_issuî
(c⁄° 
X509_CRL
 *
¸l
);

936 c⁄° 
STACK_OF
(
X509_EXTENSION
Ë*
X509_CRL_gë0_exãnsi⁄s
(c⁄° 
X509_CRL
 *
¸l
);

937 
STACK_OF
(
X509_REVOKED
Ë*
X509_CRL_gë_REVOKED
(
X509_CRL
 *
¸l
);

938 
X509_CRL_gë0_sig«tuª
(c⁄° 
X509_CRL
 *
¸l
, c⁄° 
ASN1_BIT_STRING
 **
psig
,

939 c⁄° 
X509_ALGOR
 **
∑lg
);

940 
X509_CRL_gë_sig«tuª_nid
(c⁄° 
X509_CRL
 *
¸l
);

941 
i2d_ª_X509_CRL_tbs
(
X509_CRL
 *
ªq
, **
µ
);

943 c⁄° 
ASN1_INTEGER
 *
X509_REVOKED_gë0_£rülNumbî
(c⁄° 
X509_REVOKED
 *
x
);

944 
X509_REVOKED_£t_£rülNumbî
(
X509_REVOKED
 *
x
, 
ASN1_INTEGER
 *
£rül
);

945 c⁄° 
ASN1_TIME
 *
X509_REVOKED_gë0_ªvoˇti⁄D©e
(c⁄° 
X509_REVOKED
 *
x
);

946 
X509_REVOKED_£t_ªvoˇti⁄D©e
(
X509_REVOKED
 *
r
, 
ASN1_TIME
 *
tm
);

947 c⁄° 
STACK_OF
(
X509_EXTENSION
) *

948 
X509_REVOKED_gë0_exãnsi⁄s
(c⁄° 
X509_REVOKED
 *
r
);

950 
X509_CRL
 *
X509_CRL_diff
(X509_CRL *
ba£
, X509_CRL *
√wî
,

951 
EVP_PKEY
 *
skey
, c⁄° 
EVP_MD
 *
md
, 
Êags
);

953 
X509_REQ_check_¥iv©e_key
(
X509_REQ
 *
x509
, 
EVP_PKEY
 *
pkey
);

955 
X509_check_¥iv©e_key
(c⁄° 
X509
 *
x509
, c⁄° 
EVP_PKEY
 *
pkey
);

956 
X509_chaö_check_suôeb
(*
≥º‹_dïth
,

957 
X509
 *
x
, 
STACK_OF
(X509Ë*
chaö
,

958 
Êags
);

959 
X509_CRL_check_suôeb
(
X509_CRL
 *
¸l
, 
EVP_PKEY
 *
pk
, 
Êags
);

960 
STACK_OF
(
X509
Ë*
X509_chaö_up_ªf
(STACK_OF(X509Ë*
chaö
);

962 
X509_issuî_™d_£rül_cmp
(c⁄° 
X509
 *
a
, c⁄° X509 *
b
);

963 
X509_issuî_™d_£rül_hash
(
X509
 *
a
);

965 
X509_issuî_«me_cmp
(c⁄° 
X509
 *
a
, c⁄° X509 *
b
);

966 
X509_issuî_«me_hash
(
X509
 *
a
);

968 
X509_subje˘_«me_cmp
(c⁄° 
X509
 *
a
, c⁄° X509 *
b
);

969 
X509_subje˘_«me_hash
(
X509
 *
x
);

971 #i‚de‡
OPENSSL_NO_MD5


972 
X509_issuî_«me_hash_ﬁd
(
X509
 *
a
);

973 
X509_subje˘_«me_hash_ﬁd
(
X509
 *
x
);

976 
	#X509_ADD_FLAG_DEFAULT
 0

	)

977 
	#X509_ADD_FLAG_UP_REF
 0x1

	)

978 
	#X509_ADD_FLAG_PREPEND
 0x2

	)

979 
	#X509_ADD_FLAG_NO_DUP
 0x4

	)

980 
	#X509_ADD_FLAG_NO_SS
 0x8

	)

981 
X509_add_˚π
(
STACK_OF
(
X509
Ë*
sk
, X509 *
˚π
, 
Êags
);

982 
X509_add_˚πs
(
STACK_OF
(
X509
Ë*
sk
, STACK_OF(X509Ë*
˚πs
, 
Êags
);

984 
X509_cmp
(c⁄° 
X509
 *
a
, c⁄° X509 *
b
);

985 
X509_NAME_cmp
(c⁄° 
X509_NAME
 *
a
, c⁄° X509_NAME *
b
);

986 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


987 
	#X509_NAME_hash
(
x
Ë
	`X509_NAME_hash_ex
(x, 
NULL
, NULL, NULL)

	)

988 
OSSL_DEPRECATEDIN_3_0
 
X509_˚πifiˇã_ty≥
(c⁄° 
X509
 *
x
,

989 c⁄° 
EVP_PKEY
 *
pubkey
);

991 
X509_NAME_hash_ex
(c⁄° 
X509_NAME
 *
x
, 
OSSL_LIB_CTX
 *
lib˘x
,

992 c⁄° *
¥›q
, *
ok
);

993 
X509_NAME_hash_ﬁd
(c⁄° 
X509_NAME
 *
x
);

995 
X509_CRL_cmp
(c⁄° 
X509_CRL
 *
a
, c⁄° X509_CRL *
b
);

996 
X509_CRL_m©ch
(c⁄° 
X509_CRL
 *
a
, c⁄° X509_CRL *
b
);

997 
X509_aux_¥öt
(
BIO
 *
out
, 
X509
 *
x
, 
ödít
);

998 #i‚de‡
OPENSSL_NO_STDIO


999 
X509_¥öt_ex_Â
(
FILE
 *
bp
, 
X509
 *
x
, 
nmÊag
,

1000 
cÊag
);

1001 
X509_¥öt_Â
(
FILE
 *
bp
, 
X509
 *
x
);

1002 
X509_CRL_¥öt_Â
(
FILE
 *
bp
, 
X509_CRL
 *
x
);

1003 
X509_REQ_¥öt_Â
(
FILE
 *
bp
, 
X509_REQ
 *
ªq
);

1004 
X509_NAME_¥öt_ex_Â
(
FILE
 *
Â
, c⁄° 
X509_NAME
 *
nm
, 
ödít
,

1005 
Êags
);

1008 
X509_NAME_¥öt
(
BIO
 *
bp
, c⁄° 
X509_NAME
 *
«me
, 
oba£
);

1009 
X509_NAME_¥öt_ex
(
BIO
 *
out
, c⁄° 
X509_NAME
 *
nm
, 
ödít
,

1010 
Êags
);

1011 
X509_¥öt_ex
(
BIO
 *
bp
, 
X509
 *
x
, 
nmÊag
,

1012 
cÊag
);

1013 
X509_¥öt
(
BIO
 *
bp
, 
X509
 *
x
);

1014 
X509_oc•id_¥öt
(
BIO
 *
bp
, 
X509
 *
x
);

1015 
X509_CRL_¥öt_ex
(
BIO
 *
out
, 
X509_CRL
 *
x
, 
nmÊag
);

1016 
X509_CRL_¥öt
(
BIO
 *
bp
, 
X509_CRL
 *
x
);

1017 
X509_REQ_¥öt_ex
(
BIO
 *
bp
, 
X509_REQ
 *
x
, 
nmÊag
,

1018 
cÊag
);

1019 
X509_REQ_¥öt
(
BIO
 *
bp
, 
X509_REQ
 *
ªq
);

1021 
X509_NAME_íåy_cou¡
(c⁄° 
X509_NAME
 *
«me
);

1022 
X509_NAME_gë_ãxt_by_NID
(c⁄° 
X509_NAME
 *
«me
, 
nid
,

1023 *
buf
, 
Àn
);

1024 
X509_NAME_gë_ãxt_by_OBJ
(c⁄° 
X509_NAME
 *
«me
, c⁄° 
ASN1_OBJECT
 *
obj
,

1025 *
buf
, 
Àn
);

1031 
X509_NAME_gë_ödex_by_NID
(c⁄° 
X509_NAME
 *
«me
, 
nid
, 
œ°pos
);

1032 
X509_NAME_gë_ödex_by_OBJ
(c⁄° 
X509_NAME
 *
«me
, c⁄° 
ASN1_OBJECT
 *
obj
,

1033 
œ°pos
);

1034 
X509_NAME_ENTRY
 *
X509_NAME_gë_íåy
(c⁄° 
X509_NAME
 *
«me
, 
loc
);

1035 
X509_NAME_ENTRY
 *
X509_NAME_dñëe_íåy
(
X509_NAME
 *
«me
, 
loc
);

1036 
X509_NAME_add_íåy
(
X509_NAME
 *
«me
, c⁄° 
X509_NAME_ENTRY
 *
√
,

1037 
loc
, 
£t
);

1038 
X509_NAME_add_íåy_by_OBJ
(
X509_NAME
 *
«me
, c⁄° 
ASN1_OBJECT
 *
obj
, 
ty≥
,

1039 c⁄° *
byãs
, 
Àn
, 
loc
,

1040 
£t
);

1041 
X509_NAME_add_íåy_by_NID
(
X509_NAME
 *
«me
, 
nid
, 
ty≥
,

1042 c⁄° *
byãs
, 
Àn
, 
loc
,

1043 
£t
);

1044 
X509_NAME_ENTRY
 *
X509_NAME_ENTRY_¸óã_by_txt
(X509_NAME_ENTRY **
√
,

1045 c⁄° *
fõld
, 
ty≥
,

1046 c⁄° *
byãs
,

1047 
Àn
);

1048 
X509_NAME_ENTRY
 *
X509_NAME_ENTRY_¸óã_by_NID
(X509_NAME_ENTRY **
√
, 
nid
,

1049 
ty≥
,

1050 c⁄° *
byãs
,

1051 
Àn
);

1052 
X509_NAME_add_íåy_by_txt
(
X509_NAME
 *
«me
, c⁄° *
fõld
, 
ty≥
,

1053 c⁄° *
byãs
, 
Àn
, 
loc
,

1054 
£t
);

1055 
X509_NAME_ENTRY
 *
X509_NAME_ENTRY_¸óã_by_OBJ
(X509_NAME_ENTRY **
√
,

1056 c⁄° 
ASN1_OBJECT
 *
obj
, 
ty≥
,

1057 c⁄° *
byãs
,

1058 
Àn
);

1059 
X509_NAME_ENTRY_£t_obje˘
(
X509_NAME_ENTRY
 *
√
, c⁄° 
ASN1_OBJECT
 *
obj
);

1060 
X509_NAME_ENTRY_£t_d©a
(
X509_NAME_ENTRY
 *
√
, 
ty≥
,

1061 c⁄° *
byãs
, 
Àn
);

1062 
ASN1_OBJECT
 *
X509_NAME_ENTRY_gë_obje˘
(c⁄° 
X509_NAME_ENTRY
 *
√
);

1063 
ASN1_STRING
 * 
X509_NAME_ENTRY_gë_d©a
(c⁄° 
X509_NAME_ENTRY
 *
√
);

1064 
X509_NAME_ENTRY_£t
(c⁄° 
X509_NAME_ENTRY
 *
√
);

1066 
X509_NAME_gë0_dî
(c⁄° 
X509_NAME
 *
nm
, c⁄° **
pdî
,

1067 
size_t
 *
pdîÀn
);

1069 
X509v3_gë_ext_cou¡
(c⁄° 
STACK_OF
(
X509_EXTENSION
Ë*
x
);

1070 
X509v3_gë_ext_by_NID
(c⁄° 
STACK_OF
(
X509_EXTENSION
Ë*
x
,

1071 
nid
, 
œ°pos
);

1072 
X509v3_gë_ext_by_OBJ
(c⁄° 
STACK_OF
(
X509_EXTENSION
Ë*
x
,

1073 c⁄° 
ASN1_OBJECT
 *
obj
, 
œ°pos
);

1074 
X509v3_gë_ext_by_¸ôiˇl
(c⁄° 
STACK_OF
(
X509_EXTENSION
Ë*
x
,

1075 
¸ô
, 
œ°pos
);

1076 
X509_EXTENSION
 *
X509v3_gë_ext
(c⁄° 
STACK_OF
(X509_EXTENSIONË*
x
, 
loc
);

1077 
X509_EXTENSION
 *
X509v3_dñëe_ext
(
STACK_OF
(X509_EXTENSIONË*
x
, 
loc
);

1078 
STACK_OF
(
X509_EXTENSION
Ë*
X509v3_add_ext
(STACK_OF(X509_EXTENSIONË**
x
,

1079 
X509_EXTENSION
 *
ex
, 
loc
);

1081 
X509_gë_ext_cou¡
(c⁄° 
X509
 *
x
);

1082 
X509_gë_ext_by_NID
(c⁄° 
X509
 *
x
, 
nid
, 
œ°pos
);

1083 
X509_gë_ext_by_OBJ
(c⁄° 
X509
 *
x
, c⁄° 
ASN1_OBJECT
 *
obj
, 
œ°pos
);

1084 
X509_gë_ext_by_¸ôiˇl
(c⁄° 
X509
 *
x
, 
¸ô
, 
œ°pos
);

1085 
X509_EXTENSION
 *
X509_gë_ext
(c⁄° 
X509
 *
x
, 
loc
);

1086 
X509_EXTENSION
 *
X509_dñëe_ext
(
X509
 *
x
, 
loc
);

1087 
X509_add_ext
(
X509
 *
x
, 
X509_EXTENSION
 *
ex
, 
loc
);

1088 *
X509_gë_ext_d2i
(c⁄° 
X509
 *
x
, 
nid
, *
¸ô
, *
idx
);

1089 
X509_add1_ext_i2d
(
X509
 *
x
, 
nid
, *
vÆue
, 
¸ô
,

1090 
Êags
);

1092 
X509_CRL_gë_ext_cou¡
(c⁄° 
X509_CRL
 *
x
);

1093 
X509_CRL_gë_ext_by_NID
(c⁄° 
X509_CRL
 *
x
, 
nid
, 
œ°pos
);

1094 
X509_CRL_gë_ext_by_OBJ
(c⁄° 
X509_CRL
 *
x
, c⁄° 
ASN1_OBJECT
 *
obj
,

1095 
œ°pos
);

1096 
X509_CRL_gë_ext_by_¸ôiˇl
(c⁄° 
X509_CRL
 *
x
, 
¸ô
, 
œ°pos
);

1097 
X509_EXTENSION
 *
X509_CRL_gë_ext
(c⁄° 
X509_CRL
 *
x
, 
loc
);

1098 
X509_EXTENSION
 *
X509_CRL_dñëe_ext
(
X509_CRL
 *
x
, 
loc
);

1099 
X509_CRL_add_ext
(
X509_CRL
 *
x
, 
X509_EXTENSION
 *
ex
, 
loc
);

1100 *
X509_CRL_gë_ext_d2i
(c⁄° 
X509_CRL
 *
x
, 
nid
, *
¸ô
, *
idx
);

1101 
X509_CRL_add1_ext_i2d
(
X509_CRL
 *
x
, 
nid
, *
vÆue
, 
¸ô
,

1102 
Êags
);

1104 
X509_REVOKED_gë_ext_cou¡
(c⁄° 
X509_REVOKED
 *
x
);

1105 
X509_REVOKED_gë_ext_by_NID
(c⁄° 
X509_REVOKED
 *
x
, 
nid
, 
œ°pos
);

1106 
X509_REVOKED_gë_ext_by_OBJ
(c⁄° 
X509_REVOKED
 *
x
, c⁄° 
ASN1_OBJECT
 *
obj
,

1107 
œ°pos
);

1108 
X509_REVOKED_gë_ext_by_¸ôiˇl
(c⁄° 
X509_REVOKED
 *
x
, 
¸ô
,

1109 
œ°pos
);

1110 
X509_EXTENSION
 *
X509_REVOKED_gë_ext
(c⁄° 
X509_REVOKED
 *
x
, 
loc
);

1111 
X509_EXTENSION
 *
X509_REVOKED_dñëe_ext
(
X509_REVOKED
 *
x
, 
loc
);

1112 
X509_REVOKED_add_ext
(
X509_REVOKED
 *
x
, 
X509_EXTENSION
 *
ex
, 
loc
);

1113 *
X509_REVOKED_gë_ext_d2i
(c⁄° 
X509_REVOKED
 *
x
, 
nid
, *
¸ô
,

1114 *
idx
);

1115 
X509_REVOKED_add1_ext_i2d
(
X509_REVOKED
 *
x
, 
nid
, *
vÆue
, 
¸ô
,

1116 
Êags
);

1118 
X509_EXTENSION
 *
X509_EXTENSION_¸óã_by_NID
(X509_EXTENSION **
ex
,

1119 
nid
, 
¸ô
,

1120 
ASN1_OCTET_STRING
 *
d©a
);

1121 
X509_EXTENSION
 *
X509_EXTENSION_¸óã_by_OBJ
(X509_EXTENSION **
ex
,

1122 c⁄° 
ASN1_OBJECT
 *
obj
, 
¸ô
,

1123 
ASN1_OCTET_STRING
 *
d©a
);

1124 
X509_EXTENSION_£t_obje˘
(
X509_EXTENSION
 *
ex
, c⁄° 
ASN1_OBJECT
 *
obj
);

1125 
X509_EXTENSION_£t_¸ôiˇl
(
X509_EXTENSION
 *
ex
, 
¸ô
);

1126 
X509_EXTENSION_£t_d©a
(
X509_EXTENSION
 *
ex
, 
ASN1_OCTET_STRING
 *
d©a
);

1127 
ASN1_OBJECT
 *
X509_EXTENSION_gë_obje˘
(
X509_EXTENSION
 *
ex
);

1128 
ASN1_OCTET_STRING
 *
X509_EXTENSION_gë_d©a
(
X509_EXTENSION
 *
√
);

1129 
X509_EXTENSION_gë_¸ôiˇl
(c⁄° 
X509_EXTENSION
 *
ex
);

1131 
X509©_gë_©å_cou¡
(c⁄° 
STACK_OF
(
X509_ATTRIBUTE
Ë*
x
);

1132 
X509©_gë_©å_by_NID
(c⁄° 
STACK_OF
(
X509_ATTRIBUTE
Ë*
x
, 
nid
,

1133 
œ°pos
);

1134 
X509©_gë_©å_by_OBJ
(c⁄° 
STACK_OF
(
X509_ATTRIBUTE
Ë*
sk
,

1135 c⁄° 
ASN1_OBJECT
 *
obj
, 
œ°pos
);

1136 
X509_ATTRIBUTE
 *
X509©_gë_©å
(c⁄° 
STACK_OF
(X509_ATTRIBUTEË*
x
, 
loc
);

1137 
X509_ATTRIBUTE
 *
X509©_dñëe_©å
(
STACK_OF
(X509_ATTRIBUTEË*
x
, 
loc
);

1138 
STACK_OF
(
X509_ATTRIBUTE
Ë*
X509©_add1_©å
(STACK_OF(X509_ATTRIBUTEË**
x
,

1139 
X509_ATTRIBUTE
 *
©å
);

1140 
STACK_OF
(
X509_ATTRIBUTE
Ë*
X509©_add1_©å_by_OBJ
(STACK_OF(X509_ATTRIBUTE)

1141 **
x
, c⁄° 
ASN1_OBJECT
 *
obj
,

1142 
ty≥
,

1143 c⁄° *
byãs
,

1144 
Àn
);

1145 
STACK_OF
(
X509_ATTRIBUTE
Ë*
X509©_add1_©å_by_NID
(STACK_OF(X509_ATTRIBUTE)

1146 **
x
, 
nid
, 
ty≥
,

1147 c⁄° *
byãs
,

1148 
Àn
);

1149 
STACK_OF
(
X509_ATTRIBUTE
Ë*
X509©_add1_©å_by_txt
(STACK_OF(X509_ATTRIBUTE)

1150 **
x
, c⁄° *
©å«me
,

1151 
ty≥
,

1152 c⁄° *
byãs
,

1153 
Àn
);

1154 *
X509©_gë0_d©a_by_OBJ
(c⁄° 
STACK_OF
(
X509_ATTRIBUTE
Ë*
x
,

1155 c⁄° 
ASN1_OBJECT
 *
obj
, 
œ°pos
, 
ty≥
);

1156 
X509_ATTRIBUTE
 *
X509_ATTRIBUTE_¸óã_by_NID
(X509_ATTRIBUTE **
©å
, 
nid
,

1157 
©πy≥
, c⁄° *
d©a
,

1158 
Àn
);

1159 
X509_ATTRIBUTE
 *
X509_ATTRIBUTE_¸óã_by_OBJ
(X509_ATTRIBUTE **
©å
,

1160 c⁄° 
ASN1_OBJECT
 *
obj
,

1161 
©πy≥
, c⁄° *
d©a
,

1162 
Àn
);

1163 
X509_ATTRIBUTE
 *
X509_ATTRIBUTE_¸óã_by_txt
(X509_ATTRIBUTE **
©å
,

1164 c⁄° *
©∫ame
, 
ty≥
,

1165 c⁄° *
byãs
,

1166 
Àn
);

1167 
X509_ATTRIBUTE_£t1_obje˘
(
X509_ATTRIBUTE
 *
©å
, c⁄° 
ASN1_OBJECT
 *
obj
);

1168 
X509_ATTRIBUTE_£t1_d©a
(
X509_ATTRIBUTE
 *
©å
, 
©åty≥
,

1169 c⁄° *
d©a
, 
Àn
);

1170 *
X509_ATTRIBUTE_gë0_d©a
(
X509_ATTRIBUTE
 *
©å
, 
idx
, 
©πy≥
,

1171 *
d©a
);

1172 
X509_ATTRIBUTE_cou¡
(c⁄° 
X509_ATTRIBUTE
 *
©å
);

1173 
ASN1_OBJECT
 *
X509_ATTRIBUTE_gë0_obje˘
(
X509_ATTRIBUTE
 *
©å
);

1174 
ASN1_TYPE
 *
X509_ATTRIBUTE_gë0_ty≥
(
X509_ATTRIBUTE
 *
©å
, 
idx
);

1176 
EVP_PKEY_gë_©å_cou¡
(c⁄° 
EVP_PKEY
 *
key
);

1177 
EVP_PKEY_gë_©å_by_NID
(c⁄° 
EVP_PKEY
 *
key
, 
nid
, 
œ°pos
);

1178 
EVP_PKEY_gë_©å_by_OBJ
(c⁄° 
EVP_PKEY
 *
key
, c⁄° 
ASN1_OBJECT
 *
obj
,

1179 
œ°pos
);

1180 
X509_ATTRIBUTE
 *
EVP_PKEY_gë_©å
(c⁄° 
EVP_PKEY
 *
key
, 
loc
);

1181 
X509_ATTRIBUTE
 *
EVP_PKEY_dñëe_©å
(
EVP_PKEY
 *
key
, 
loc
);

1182 
EVP_PKEY_add1_©å
(
EVP_PKEY
 *
key
, 
X509_ATTRIBUTE
 *
©å
);

1183 
EVP_PKEY_add1_©å_by_OBJ
(
EVP_PKEY
 *
key
,

1184 c⁄° 
ASN1_OBJECT
 *
obj
, 
ty≥
,

1185 c⁄° *
byãs
, 
Àn
);

1186 
EVP_PKEY_add1_©å_by_NID
(
EVP_PKEY
 *
key
,

1187 
nid
, 
ty≥
,

1188 c⁄° *
byãs
, 
Àn
);

1189 
EVP_PKEY_add1_©å_by_txt
(
EVP_PKEY
 *
key
,

1190 c⁄° *
©å«me
, 
ty≥
,

1191 c⁄° *
byãs
, 
Àn
);

1194 
X509
 *
X509_föd_by_issuî_™d_£rül
(
STACK_OF
(X509Ë*
sk
, c⁄° 
X509_NAME
 *
«me
,

1195 c⁄° 
ASN1_INTEGER
 *
£rül
);

1196 
X509
 *
X509_föd_by_subje˘
(
STACK_OF
(X509Ë*
sk
, c⁄° 
X509_NAME
 *
«me
);

1198 
DECLARE_ASN1_FUNCTIONS
(
PBEPARAM
)

1199 
DECLARE_ASN1_FUNCTIONS
(
PBE2PARAM
)

1200 
DECLARE_ASN1_FUNCTIONS
(
PBKDF2PARAM
)

1201 #i‚de‡
OPENSSL_NO_SCRYPT


1202 
DECLARE_ASN1_FUNCTIONS
(
SCRYPT_PARAMS
)

1205 
PKCS5_pbe_£t0_Æg‹
(
X509_ALGOR
 *
Æg‹
, 
Æg
, 
ôî
,

1206 c⁄° *
ß…
, 
ß…Àn
);

1207 
PKCS5_pbe_£t0_Æg‹_ex
(
X509_ALGOR
 *
Æg‹
, 
Æg
, 
ôî
,

1208 c⁄° *
ß…
, 
ß…Àn
,

1209 
OSSL_LIB_CTX
 *
lib˘x
);

1211 
X509_ALGOR
 *
PKCS5_pbe_£t
(
Æg
, 
ôî
,

1212 c⁄° *
ß…
, 
ß…Àn
);

1213 
X509_ALGOR
 *
PKCS5_pbe_£t_ex
(
Æg
, 
ôî
,

1214 c⁄° *
ß…
, 
ß…Àn
,

1215 
OSSL_LIB_CTX
 *
lib˘x
);

1217 
X509_ALGOR
 *
PKCS5_pbe2_£t
(c⁄° 
EVP_CIPHER
 *
cùhî
, 
ôî
,

1218 *
ß…
, 
ß…Àn
);

1219 
X509_ALGOR
 *
PKCS5_pbe2_£t_iv
(c⁄° 
EVP_CIPHER
 *
cùhî
, 
ôî
,

1220 *
ß…
, 
ß…Àn
,

1221 *
aiv
, 
¥f_nid
);

1222 
X509_ALGOR
 *
PKCS5_pbe2_£t_iv_ex
(c⁄° 
EVP_CIPHER
 *
cùhî
, 
ôî
,

1223 *
ß…
, 
ß…Àn
,

1224 *
aiv
, 
¥f_nid
,

1225 
OSSL_LIB_CTX
 *
lib˘x
);

1227 #i‚de‡
OPENSSL_NO_SCRYPT


1228 
X509_ALGOR
 *
PKCS5_pbe2_£t_s¸y±
(c⁄° 
EVP_CIPHER
 *
cùhî
,

1229 c⁄° *
ß…
, 
ß…Àn
,

1230 *
aiv
, 
uöt64_t
 
N
, uöt64_à
r
,

1231 
uöt64_t
 
p
);

1234 
X509_ALGOR
 *
PKCS5_pbkdf2_£t
(
ôî
, *
ß…
, 
ß…Àn
,

1235 
¥f_nid
, 
keyÀn
);

1236 
X509_ALGOR
 *
PKCS5_pbkdf2_£t_ex
(
ôî
, *
ß…
, 
ß…Àn
,

1237 
¥f_nid
, 
keyÀn
,

1238 
OSSL_LIB_CTX
 *
lib˘x
);

1242 
DECLARE_ASN1_FUNCTIONS
(
PKCS8_PRIV_KEY_INFO
)

1244 
EVP_PKEY
 *
EVP_PKCS82PKEY
(c⁄° 
PKCS8_PRIV_KEY_INFO
 *
p8
);

1245 
EVP_PKEY
 *
EVP_PKCS82PKEY_ex
(c⁄° 
PKCS8_PRIV_KEY_INFO
 *
p8
, 
OSSL_LIB_CTX
 *
lib˘x
,

1246 c⁄° *
¥›q
);

1247 
PKCS8_PRIV_KEY_INFO
 *
EVP_PKEY2PKCS8
(c⁄° 
EVP_PKEY
 *
pkey
);

1249 
PKCS8_pkey_£t0
(
PKCS8_PRIV_KEY_INFO
 *
¥iv
, 
ASN1_OBJECT
 *
aobj
,

1250 
vîsi⁄
, 
±y≥
, *
pvÆ
,

1251 *
≥nc
, 
≥n˛í
);

1252 
PKCS8_pkey_gë0
(c⁄° 
ASN1_OBJECT
 **
µkÆg
,

1253 c⁄° **
pk
, *
µkÀn
,

1254 c⁄° 
X509_ALGOR
 **
∑
, c⁄° 
PKCS8_PRIV_KEY_INFO
 *
p8
);

1256 c⁄° 
STACK_OF
(
X509_ATTRIBUTE
) *

1257 
PKCS8_pkey_gë0_©ås
(c⁄° 
PKCS8_PRIV_KEY_INFO
 *
p8
);

1258 
PKCS8_pkey_add1_©å
(
PKCS8_PRIV_KEY_INFO
 *
p8
, 
X509_ATTRIBUTE
 *
©å
);

1259 
PKCS8_pkey_add1_©å_by_NID
(
PKCS8_PRIV_KEY_INFO
 *
p8
, 
nid
, 
ty≥
,

1260 c⁄° *
byãs
, 
Àn
);

1261 
PKCS8_pkey_add1_©å_by_OBJ
(
PKCS8_PRIV_KEY_INFO
 *
p8
, c⁄° 
ASN1_OBJECT
 *
obj
,

1262 
ty≥
, c⁄° *
byãs
, 
Àn
);

1265 
X509_PUBKEY_£t0_∑øm
(
X509_PUBKEY
 *
pub
, 
ASN1_OBJECT
 *
aobj
,

1266 
±y≥
, *
pvÆ
,

1267 *
≥nc
, 
≥n˛í
);

1268 
X509_PUBKEY_gë0_∑øm
(
ASN1_OBJECT
 **
µkÆg
,

1269 c⁄° **
pk
, *
µkÀn
,

1270 
X509_ALGOR
 **
∑
, c⁄° 
X509_PUBKEY
 *
pub
);

1271 
X509_PUBKEY_eq
(c⁄° 
X509_PUBKEY
 *
a
, c⁄° X509_PUBKEY *
b
);

1273 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/x509v3.h

15 #i‚de‡
OPENSSL_X509V3_H


16 
	#OPENSSL_X509V3_H


	)

17 #¥agm®
⁄˚


19 
	~<›ís¶/ma¸os.h
>

20 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


21 
	#HEADER_X509V3_H


	)

24 
	~<›ís¶/bio.h
>

25 
	~<›ís¶/x509.h
>

26 
	~<›ís¶/c⁄f.h
>

27 
	~<›ís¶/x509v3îr.h
>

29 #ifde‡
__˝lu•lus


34 
v3_ext_mëhod
;

35 
v3_ext_˘x
;

39 *(*
	tX509V3_EXT_NEW
)();

40 (*
X509V3_EXT_FREE
) (*);

41 *(*
	tX509V3_EXT_D2I
)(*, const **, );

42 (*
X509V3_EXT_I2D
) (const *, **);

43 
STACK_OF
(
	tCONF_VALUE
) *

44 (*
	tX509V3_EXT_I2V
Ë(c⁄° 
	tv3_ext_mëhod
 *
	tmëhod
, *
	text
,

45 
	tSTACK_OF
(
	tCONF_VALUE
Ë*
	texéi°
);

46 *(*
	tX509V3_EXT_V2I
)(c⁄° 
	tv3_ext_mëhod
 *
	tmëhod
,

47 
	tv3_ext_˘x
 *
	t˘x
,

48 
	tSTACK_OF
(
	tCONF_VALUE
Ë*
	tvÆues
);

49 *(*
	tX509V3_EXT_I2S
)(c⁄° 
	tv3_ext_mëhod
 *
	tmëhod
,

50 *
	text
);

51 *(*
	tX509V3_EXT_S2I
)(c⁄° 
	tv3_ext_mëhod
 *
	tmëhod
,

52 
	tv3_ext_˘x
 *
	t˘x
, c⁄° *
	t°r
);

53 (*
X509V3_EXT_I2R
Ë(c⁄° 
	tv3_ext_mëhod
 *
	tmëhod
, *
	text
,

54 
	tBIO
 *
	tout
, 
	tödít
);

55 *(*
	tX509V3_EXT_R2I
)(c⁄° 
	tv3_ext_mëhod
 *
	tmëhod
,

56 
	tv3_ext_˘x
 *
	t˘x
, c⁄° *
	t°r
);

60 
	sv3_ext_mëhod
 {

61 
ext_nid
;

62 
ext_Êags
;

64 
ASN1_ITEM_EXP
 *
ô
;

66 
X509V3_EXT_NEW
 
ext_√w
;

67 
X509V3_EXT_FREE
 
ext_‰ì
;

68 
X509V3_EXT_D2I
 
d2i
;

69 
X509V3_EXT_I2D
 
i2d
;

71 
X509V3_EXT_I2S
 
i2s
;

72 
X509V3_EXT_S2I
 
s2i
;

74 
X509V3_EXT_I2V
 
i2v
;

75 
X509V3_EXT_V2I
 
v2i
;

77 
X509V3_EXT_I2R
 
i2r
;

78 
X509V3_EXT_R2I
 
r2i
;

79 *
u§_d©a
;

82 
	sX509V3_CONF_METHOD_°
 {

83 *(*
gë_°rög
Ë(*
db
, c⁄° *
£˘i⁄
, c⁄° *
vÆue
);

84 
STACK_OF
(
CONF_VALUE
Ë*(*
gë_£˘i⁄
Ë(*
db
, c⁄° *
£˘i⁄
);

85 (*
‰ì_°rög
Ë(*
db
, *
°rög
);

86 (*
‰ì_£˘i⁄
Ë(*
db
, 
STACK_OF
(
CONF_VALUE
Ë*
£˘i⁄
);

87 } 
	tX509V3_CONF_METHOD
;

90 
	sv3_ext_˘x
 {

91 
	#X509V3_CTX_TEST
 0x1

	)

92 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


93 
	#CTX_TEST
 
X509V3_CTX_TEST


	)

95 
	#X509V3_CTX_REPLACE
 0x2

	)

96 
Êags
;

97 
X509
 *
issuî_˚π
;

98 
X509
 *
subje˘_˚π
;

99 
X509_REQ
 *
subje˘_ªq
;

100 
X509_CRL
 *
¸l
;

101 
X509V3_CONF_METHOD
 *
db_mëh
;

102 *
db
;

103 
EVP_PKEY
 *
issuî_pkey
;

107 
v3_ext_mëhod
 
	tX509V3_EXT_METHOD
;

109 
SKM_DEFINE_STACK_OF_INTERNAL
(
X509V3_EXT_METHOD
, X509V3_EXT_METHOD, X509V3_EXT_METHOD)

110 
	#sk_X509V3_EXT_METHOD_num
(
sk
Ë
	`OPENSSL_sk_num
(
	`os¶_check_c⁄°_X509V3_EXT_METHOD_sk_ty≥
(sk))

	)

111 
	#sk_X509V3_EXT_METHOD_vÆue
(
sk
, 
idx
Ë((
X509V3_EXT_METHOD
 *)
	`OPENSSL_sk_vÆue
(
	`os¶_check_c⁄°_X509V3_EXT_METHOD_sk_ty≥
(sk), (idx)))

	)

112 
	#sk_X509V3_EXT_METHOD_√w
(
cmp
Ë((
	`STACK_OF
(
X509V3_EXT_METHOD
Ë*)
	`OPENSSL_sk_√w
(
	`os¶_check_X509V3_EXT_METHOD_compfunc_ty≥
(cmp)))

	)

113 
	#sk_X509V3_EXT_METHOD_√w_nuŒ
(Ë((
	`STACK_OF
(
X509V3_EXT_METHOD
Ë*)
	`OPENSSL_sk_√w_nuŒ
())

	)

114 
	#sk_X509V3_EXT_METHOD_√w_ª£rve
(
cmp
, 
n
Ë((
	`STACK_OF
(
X509V3_EXT_METHOD
Ë*)
	`OPENSSL_sk_√w_ª£rve
(
	`os¶_check_X509V3_EXT_METHOD_compfunc_ty≥
(cmp), (n)))

	)

115 
	#sk_X509V3_EXT_METHOD_ª£rve
(
sk
, 
n
Ë
	`OPENSSL_sk_ª£rve
(
	`os¶_check_X509V3_EXT_METHOD_sk_ty≥
(sk), (n))

	)

116 
	#sk_X509V3_EXT_METHOD_‰ì
(
sk
Ë
	`OPENSSL_sk_‰ì
(
	`os¶_check_X509V3_EXT_METHOD_sk_ty≥
(sk))

	)

117 
	#sk_X509V3_EXT_METHOD_zîo
(
sk
Ë
	`OPENSSL_sk_zîo
(
	`os¶_check_X509V3_EXT_METHOD_sk_ty≥
(sk))

	)

118 
	#sk_X509V3_EXT_METHOD_dñëe
(
sk
, 
i
Ë((
X509V3_EXT_METHOD
 *)
	`OPENSSL_sk_dñëe
(
	`os¶_check_X509V3_EXT_METHOD_sk_ty≥
(sk), (i)))

	)

119 
	#sk_X509V3_EXT_METHOD_dñëe_±r
(
sk
, 
±r
Ë((
X509V3_EXT_METHOD
 *)
	`OPENSSL_sk_dñëe_±r
(
	`os¶_check_X509V3_EXT_METHOD_sk_ty≥
(sk), 
	`os¶_check_X509V3_EXT_METHOD_ty≥
’å)))

	)

120 
	#sk_X509V3_EXT_METHOD_push
(
sk
, 
±r
Ë
	`OPENSSL_sk_push
(
	`os¶_check_X509V3_EXT_METHOD_sk_ty≥
(sk), 
	`os¶_check_X509V3_EXT_METHOD_ty≥
’å))

	)

121 
	#sk_X509V3_EXT_METHOD_unshi·
(
sk
, 
±r
Ë
	`OPENSSL_sk_unshi·
(
	`os¶_check_X509V3_EXT_METHOD_sk_ty≥
(sk), 
	`os¶_check_X509V3_EXT_METHOD_ty≥
’å))

	)

122 
	#sk_X509V3_EXT_METHOD_p›
(
sk
Ë((
X509V3_EXT_METHOD
 *)
	`OPENSSL_sk_p›
(
	`os¶_check_X509V3_EXT_METHOD_sk_ty≥
(sk)))

	)

123 
	#sk_X509V3_EXT_METHOD_shi·
(
sk
Ë((
X509V3_EXT_METHOD
 *)
	`OPENSSL_sk_shi·
(
	`os¶_check_X509V3_EXT_METHOD_sk_ty≥
(sk)))

	)

124 
	#sk_X509V3_EXT_METHOD_p›_‰ì
(
sk
, 
‰ìfunc
Ë
	`OPENSSL_sk_p›_‰ì
(
	`os¶_check_X509V3_EXT_METHOD_sk_ty≥
(sk),
	`os¶_check_X509V3_EXT_METHOD_‰ìfunc_ty≥
(‰ìfunc))

	)

125 
	#sk_X509V3_EXT_METHOD_ö£π
(
sk
, 
±r
, 
idx
Ë
	`OPENSSL_sk_ö£π
(
	`os¶_check_X509V3_EXT_METHOD_sk_ty≥
(sk), 
	`os¶_check_X509V3_EXT_METHOD_ty≥
’å), (idx))

	)

126 
	#sk_X509V3_EXT_METHOD_£t
(
sk
, 
idx
, 
±r
Ë((
X509V3_EXT_METHOD
 *)
	`OPENSSL_sk_£t
(
	`os¶_check_X509V3_EXT_METHOD_sk_ty≥
(sk), (idx), 
	`os¶_check_X509V3_EXT_METHOD_ty≥
’å)))

	)

127 
	#sk_X509V3_EXT_METHOD_föd
(
sk
, 
±r
Ë
	`OPENSSL_sk_föd
(
	`os¶_check_X509V3_EXT_METHOD_sk_ty≥
(sk), 
	`os¶_check_X509V3_EXT_METHOD_ty≥
’å))

	)

128 
	#sk_X509V3_EXT_METHOD_föd_ex
(
sk
, 
±r
Ë
	`OPENSSL_sk_föd_ex
(
	`os¶_check_X509V3_EXT_METHOD_sk_ty≥
(sk), 
	`os¶_check_X509V3_EXT_METHOD_ty≥
’å))

	)

129 
	#sk_X509V3_EXT_METHOD_föd_Æl
(
sk
, 
±r
, 
≤um
Ë
	`OPENSSL_sk_föd_Æl
(
	`os¶_check_X509V3_EXT_METHOD_sk_ty≥
(sk), 
	`os¶_check_X509V3_EXT_METHOD_ty≥
’å),Önum)

	)

130 
	#sk_X509V3_EXT_METHOD_s‹t
(
sk
Ë
	`OPENSSL_sk_s‹t
(
	`os¶_check_X509V3_EXT_METHOD_sk_ty≥
(sk))

	)

131 
	#sk_X509V3_EXT_METHOD_is_s‹ãd
(
sk
Ë
	`OPENSSL_sk_is_s‹ãd
(
	`os¶_check_c⁄°_X509V3_EXT_METHOD_sk_ty≥
(sk))

	)

132 
	#sk_X509V3_EXT_METHOD_dup
(
sk
Ë((
	`STACK_OF
(
X509V3_EXT_METHOD
Ë*)
	`OPENSSL_sk_dup
(
	`os¶_check_c⁄°_X509V3_EXT_METHOD_sk_ty≥
(sk)))

	)

133 
	#sk_X509V3_EXT_METHOD_dìp_c›y
(
sk
, 
c›yfunc
, 
‰ìfunc
Ë((
	`STACK_OF
(
X509V3_EXT_METHOD
Ë*)
	`OPENSSL_sk_dìp_c›y
(
	`os¶_check_c⁄°_X509V3_EXT_METHOD_sk_ty≥
(sk), 
	`os¶_check_X509V3_EXT_METHOD_c›yfunc_ty≥
(c›yfunc), 
	`os¶_check_X509V3_EXT_METHOD_‰ìfunc_ty≥
(‰ìfunc)))

	)

134 
	#sk_X509V3_EXT_METHOD_£t_cmp_func
(
sk
, 
cmp
Ë((
sk_X509V3_EXT_METHOD_compfunc
)
	`OPENSSL_sk_£t_cmp_func
(
	`os¶_check_X509V3_EXT_METHOD_sk_ty≥
(sk), 
	`os¶_check_X509V3_EXT_METHOD_compfunc_ty≥
(cmp)))

	)

138 
	#X509V3_EXT_DYNAMIC
 0x1

	)

139 
	#X509V3_EXT_CTX_DEP
 0x2

	)

140 
	#X509V3_EXT_MULTILINE
 0x4

	)

142 
BIT_STRING_BITNAME
 
	tENUMERATED_NAMES
;

144 
	sBASIC_CONSTRAINTS_°
 {

145 
ˇ
;

146 
ASN1_INTEGER
 *
∑thÀn
;

147 } 
	tBASIC_CONSTRAINTS
;

149 
	sPKEY_USAGE_PERIOD_°
 {

150 
ASN1_GENERALIZEDTIME
 *
nŸBef‹e
;

151 
ASN1_GENERALIZEDTIME
 *
nŸA·î
;

152 } 
	tPKEY_USAGE_PERIOD
;

154 
	sŸhîName_°
 {

155 
ASN1_OBJECT
 *
ty≥_id
;

156 
ASN1_TYPE
 *
vÆue
;

157 } 
	tOTHERNAME
;

159 
	sEDIP¨tyName_°
 {

160 
ASN1_STRING
 *
«meAssig√r
;

161 
ASN1_STRING
 *
∑πyName
;

162 } 
	tEDIPARTYNAME
;

164 
	sGENERAL_NAME_°
 {

165 
	#GEN_OTHERNAME
 0

	)

166 
	#GEN_EMAIL
 1

	)

167 
	#GEN_DNS
 2

	)

168 
	#GEN_X400
 3

	)

169 
	#GEN_DIRNAME
 4

	)

170 
	#GEN_EDIPARTY
 5

	)

171 
	#GEN_URI
 6

	)

172 
	#GEN_IPADD
 7

	)

173 
	#GEN_RID
 8

	)

174 
ty≥
;

176 *
±r
;

177 
OTHERNAME
 *
ŸhîName
;

178 
ASN1_IA5STRING
 *
rfc822Name
;

179 
ASN1_IA5STRING
 *
dNSName
;

180 
ASN1_STRING
 *
x400Addªss
;

181 
X509_NAME
 *
dúe˘‹yName
;

182 
EDIPARTYNAME
 *
ediP¨tyName
;

183 
ASN1_IA5STRING
 *
unif‹mResour˚Idítifõr
;

184 
ASN1_OCTET_STRING
 *
iPAddªss
;

185 
ASN1_OBJECT
 *
ªgi°îedID
;

187 
ASN1_OCTET_STRING
 *
ù
;

188 
X509_NAME
 *
dún
;

189 
ASN1_IA5STRING
 *
ü5
;

191 
ASN1_OBJECT
 *
rid
;

192 
ASN1_TYPE
 *
Ÿhî
;

193 } 
d
;

194 } 
	tGENERAL_NAME
;

196 
	sACCESS_DESCRIPTION_°
 {

197 
ASN1_OBJECT
 *
mëhod
;

198 
GENERAL_NAME
 *
loˇti⁄
;

199 } 
	tACCESS_DESCRIPTION
;

201 
SKM_DEFINE_STACK_OF_INTERNAL
(
ACCESS_DESCRIPTION
, ACCESS_DESCRIPTION, ACCESS_DESCRIPTION)

202 
	#sk_ACCESS_DESCRIPTION_num
(
sk
Ë
	`OPENSSL_sk_num
(
	`os¶_check_c⁄°_ACCESS_DESCRIPTION_sk_ty≥
(sk))

	)

203 
	#sk_ACCESS_DESCRIPTION_vÆue
(
sk
, 
idx
Ë((
ACCESS_DESCRIPTION
 *)
	`OPENSSL_sk_vÆue
(
	`os¶_check_c⁄°_ACCESS_DESCRIPTION_sk_ty≥
(sk), (idx)))

	)

204 
	#sk_ACCESS_DESCRIPTION_√w
(
cmp
Ë((
	`STACK_OF
(
ACCESS_DESCRIPTION
Ë*)
	`OPENSSL_sk_√w
(
	`os¶_check_ACCESS_DESCRIPTION_compfunc_ty≥
(cmp)))

	)

205 
	#sk_ACCESS_DESCRIPTION_√w_nuŒ
(Ë((
	`STACK_OF
(
ACCESS_DESCRIPTION
Ë*)
	`OPENSSL_sk_√w_nuŒ
())

	)

206 
	#sk_ACCESS_DESCRIPTION_√w_ª£rve
(
cmp
, 
n
Ë((
	`STACK_OF
(
ACCESS_DESCRIPTION
Ë*)
	`OPENSSL_sk_√w_ª£rve
(
	`os¶_check_ACCESS_DESCRIPTION_compfunc_ty≥
(cmp), (n)))

	)

207 
	#sk_ACCESS_DESCRIPTION_ª£rve
(
sk
, 
n
Ë
	`OPENSSL_sk_ª£rve
(
	`os¶_check_ACCESS_DESCRIPTION_sk_ty≥
(sk), (n))

	)

208 
	#sk_ACCESS_DESCRIPTION_‰ì
(
sk
Ë
	`OPENSSL_sk_‰ì
(
	`os¶_check_ACCESS_DESCRIPTION_sk_ty≥
(sk))

	)

209 
	#sk_ACCESS_DESCRIPTION_zîo
(
sk
Ë
	`OPENSSL_sk_zîo
(
	`os¶_check_ACCESS_DESCRIPTION_sk_ty≥
(sk))

	)

210 
	#sk_ACCESS_DESCRIPTION_dñëe
(
sk
, 
i
Ë((
ACCESS_DESCRIPTION
 *)
	`OPENSSL_sk_dñëe
(
	`os¶_check_ACCESS_DESCRIPTION_sk_ty≥
(sk), (i)))

	)

211 
	#sk_ACCESS_DESCRIPTION_dñëe_±r
(
sk
, 
±r
Ë((
ACCESS_DESCRIPTION
 *)
	`OPENSSL_sk_dñëe_±r
(
	`os¶_check_ACCESS_DESCRIPTION_sk_ty≥
(sk), 
	`os¶_check_ACCESS_DESCRIPTION_ty≥
’å)))

	)

212 
	#sk_ACCESS_DESCRIPTION_push
(
sk
, 
±r
Ë
	`OPENSSL_sk_push
(
	`os¶_check_ACCESS_DESCRIPTION_sk_ty≥
(sk), 
	`os¶_check_ACCESS_DESCRIPTION_ty≥
’å))

	)

213 
	#sk_ACCESS_DESCRIPTION_unshi·
(
sk
, 
±r
Ë
	`OPENSSL_sk_unshi·
(
	`os¶_check_ACCESS_DESCRIPTION_sk_ty≥
(sk), 
	`os¶_check_ACCESS_DESCRIPTION_ty≥
’å))

	)

214 
	#sk_ACCESS_DESCRIPTION_p›
(
sk
Ë((
ACCESS_DESCRIPTION
 *)
	`OPENSSL_sk_p›
(
	`os¶_check_ACCESS_DESCRIPTION_sk_ty≥
(sk)))

	)

215 
	#sk_ACCESS_DESCRIPTION_shi·
(
sk
Ë((
ACCESS_DESCRIPTION
 *)
	`OPENSSL_sk_shi·
(
	`os¶_check_ACCESS_DESCRIPTION_sk_ty≥
(sk)))

	)

216 
	#sk_ACCESS_DESCRIPTION_p›_‰ì
(
sk
, 
‰ìfunc
Ë
	`OPENSSL_sk_p›_‰ì
(
	`os¶_check_ACCESS_DESCRIPTION_sk_ty≥
(sk),
	`os¶_check_ACCESS_DESCRIPTION_‰ìfunc_ty≥
(‰ìfunc))

	)

217 
	#sk_ACCESS_DESCRIPTION_ö£π
(
sk
, 
±r
, 
idx
Ë
	`OPENSSL_sk_ö£π
(
	`os¶_check_ACCESS_DESCRIPTION_sk_ty≥
(sk), 
	`os¶_check_ACCESS_DESCRIPTION_ty≥
’å), (idx))

	)

218 
	#sk_ACCESS_DESCRIPTION_£t
(
sk
, 
idx
, 
±r
Ë((
ACCESS_DESCRIPTION
 *)
	`OPENSSL_sk_£t
(
	`os¶_check_ACCESS_DESCRIPTION_sk_ty≥
(sk), (idx), 
	`os¶_check_ACCESS_DESCRIPTION_ty≥
’å)))

	)

219 
	#sk_ACCESS_DESCRIPTION_föd
(
sk
, 
±r
Ë
	`OPENSSL_sk_föd
(
	`os¶_check_ACCESS_DESCRIPTION_sk_ty≥
(sk), 
	`os¶_check_ACCESS_DESCRIPTION_ty≥
’å))

	)

220 
	#sk_ACCESS_DESCRIPTION_föd_ex
(
sk
, 
±r
Ë
	`OPENSSL_sk_föd_ex
(
	`os¶_check_ACCESS_DESCRIPTION_sk_ty≥
(sk), 
	`os¶_check_ACCESS_DESCRIPTION_ty≥
’å))

	)

221 
	#sk_ACCESS_DESCRIPTION_föd_Æl
(
sk
, 
±r
, 
≤um
Ë
	`OPENSSL_sk_föd_Æl
(
	`os¶_check_ACCESS_DESCRIPTION_sk_ty≥
(sk), 
	`os¶_check_ACCESS_DESCRIPTION_ty≥
’å),Önum)

	)

222 
	#sk_ACCESS_DESCRIPTION_s‹t
(
sk
Ë
	`OPENSSL_sk_s‹t
(
	`os¶_check_ACCESS_DESCRIPTION_sk_ty≥
(sk))

	)

223 
	#sk_ACCESS_DESCRIPTION_is_s‹ãd
(
sk
Ë
	`OPENSSL_sk_is_s‹ãd
(
	`os¶_check_c⁄°_ACCESS_DESCRIPTION_sk_ty≥
(sk))

	)

224 
	#sk_ACCESS_DESCRIPTION_dup
(
sk
Ë((
	`STACK_OF
(
ACCESS_DESCRIPTION
Ë*)
	`OPENSSL_sk_dup
(
	`os¶_check_c⁄°_ACCESS_DESCRIPTION_sk_ty≥
(sk)))

	)

225 
	#sk_ACCESS_DESCRIPTION_dìp_c›y
(
sk
, 
c›yfunc
, 
‰ìfunc
Ë((
	`STACK_OF
(
ACCESS_DESCRIPTION
Ë*)
	`OPENSSL_sk_dìp_c›y
(
	`os¶_check_c⁄°_ACCESS_DESCRIPTION_sk_ty≥
(sk), 
	`os¶_check_ACCESS_DESCRIPTION_c›yfunc_ty≥
(c›yfunc), 
	`os¶_check_ACCESS_DESCRIPTION_‰ìfunc_ty≥
(‰ìfunc)))

	)

226 
	#sk_ACCESS_DESCRIPTION_£t_cmp_func
(
sk
, 
cmp
Ë((
sk_ACCESS_DESCRIPTION_compfunc
)
	`OPENSSL_sk_£t_cmp_func
(
	`os¶_check_ACCESS_DESCRIPTION_sk_ty≥
(sk), 
	`os¶_check_ACCESS_DESCRIPTION_compfunc_ty≥
(cmp)))

	)

227 
SKM_DEFINE_STACK_OF_INTERNAL
(
GENERAL_NAME
, GENERAL_NAME, GENERAL_NAME)

228 
	#sk_GENERAL_NAME_num
(
sk
Ë
	`OPENSSL_sk_num
(
	`os¶_check_c⁄°_GENERAL_NAME_sk_ty≥
(sk))

	)

229 
	#sk_GENERAL_NAME_vÆue
(
sk
, 
idx
Ë((
GENERAL_NAME
 *)
	`OPENSSL_sk_vÆue
(
	`os¶_check_c⁄°_GENERAL_NAME_sk_ty≥
(sk), (idx)))

	)

230 
	#sk_GENERAL_NAME_√w
(
cmp
Ë((
	`STACK_OF
(
GENERAL_NAME
Ë*)
	`OPENSSL_sk_√w
(
	`os¶_check_GENERAL_NAME_compfunc_ty≥
(cmp)))

	)

231 
	#sk_GENERAL_NAME_√w_nuŒ
(Ë((
	`STACK_OF
(
GENERAL_NAME
Ë*)
	`OPENSSL_sk_√w_nuŒ
())

	)

232 
	#sk_GENERAL_NAME_√w_ª£rve
(
cmp
, 
n
Ë((
	`STACK_OF
(
GENERAL_NAME
Ë*)
	`OPENSSL_sk_√w_ª£rve
(
	`os¶_check_GENERAL_NAME_compfunc_ty≥
(cmp), (n)))

	)

233 
	#sk_GENERAL_NAME_ª£rve
(
sk
, 
n
Ë
	`OPENSSL_sk_ª£rve
(
	`os¶_check_GENERAL_NAME_sk_ty≥
(sk), (n))

	)

234 
	#sk_GENERAL_NAME_‰ì
(
sk
Ë
	`OPENSSL_sk_‰ì
(
	`os¶_check_GENERAL_NAME_sk_ty≥
(sk))

	)

235 
	#sk_GENERAL_NAME_zîo
(
sk
Ë
	`OPENSSL_sk_zîo
(
	`os¶_check_GENERAL_NAME_sk_ty≥
(sk))

	)

236 
	#sk_GENERAL_NAME_dñëe
(
sk
, 
i
Ë((
GENERAL_NAME
 *)
	`OPENSSL_sk_dñëe
(
	`os¶_check_GENERAL_NAME_sk_ty≥
(sk), (i)))

	)

237 
	#sk_GENERAL_NAME_dñëe_±r
(
sk
, 
±r
Ë((
GENERAL_NAME
 *)
	`OPENSSL_sk_dñëe_±r
(
	`os¶_check_GENERAL_NAME_sk_ty≥
(sk), 
	`os¶_check_GENERAL_NAME_ty≥
’å)))

	)

238 
	#sk_GENERAL_NAME_push
(
sk
, 
±r
Ë
	`OPENSSL_sk_push
(
	`os¶_check_GENERAL_NAME_sk_ty≥
(sk), 
	`os¶_check_GENERAL_NAME_ty≥
’å))

	)

239 
	#sk_GENERAL_NAME_unshi·
(
sk
, 
±r
Ë
	`OPENSSL_sk_unshi·
(
	`os¶_check_GENERAL_NAME_sk_ty≥
(sk), 
	`os¶_check_GENERAL_NAME_ty≥
’å))

	)

240 
	#sk_GENERAL_NAME_p›
(
sk
Ë((
GENERAL_NAME
 *)
	`OPENSSL_sk_p›
(
	`os¶_check_GENERAL_NAME_sk_ty≥
(sk)))

	)

241 
	#sk_GENERAL_NAME_shi·
(
sk
Ë((
GENERAL_NAME
 *)
	`OPENSSL_sk_shi·
(
	`os¶_check_GENERAL_NAME_sk_ty≥
(sk)))

	)

242 
	#sk_GENERAL_NAME_p›_‰ì
(
sk
, 
‰ìfunc
Ë
	`OPENSSL_sk_p›_‰ì
(
	`os¶_check_GENERAL_NAME_sk_ty≥
(sk),
	`os¶_check_GENERAL_NAME_‰ìfunc_ty≥
(‰ìfunc))

	)

243 
	#sk_GENERAL_NAME_ö£π
(
sk
, 
±r
, 
idx
Ë
	`OPENSSL_sk_ö£π
(
	`os¶_check_GENERAL_NAME_sk_ty≥
(sk), 
	`os¶_check_GENERAL_NAME_ty≥
’å), (idx))

	)

244 
	#sk_GENERAL_NAME_£t
(
sk
, 
idx
, 
±r
Ë((
GENERAL_NAME
 *)
	`OPENSSL_sk_£t
(
	`os¶_check_GENERAL_NAME_sk_ty≥
(sk), (idx), 
	`os¶_check_GENERAL_NAME_ty≥
’å)))

	)

245 
	#sk_GENERAL_NAME_föd
(
sk
, 
±r
Ë
	`OPENSSL_sk_föd
(
	`os¶_check_GENERAL_NAME_sk_ty≥
(sk), 
	`os¶_check_GENERAL_NAME_ty≥
’å))

	)

246 
	#sk_GENERAL_NAME_föd_ex
(
sk
, 
±r
Ë
	`OPENSSL_sk_föd_ex
(
	`os¶_check_GENERAL_NAME_sk_ty≥
(sk), 
	`os¶_check_GENERAL_NAME_ty≥
’å))

	)

247 
	#sk_GENERAL_NAME_föd_Æl
(
sk
, 
±r
, 
≤um
Ë
	`OPENSSL_sk_föd_Æl
(
	`os¶_check_GENERAL_NAME_sk_ty≥
(sk), 
	`os¶_check_GENERAL_NAME_ty≥
’å),Önum)

	)

248 
	#sk_GENERAL_NAME_s‹t
(
sk
Ë
	`OPENSSL_sk_s‹t
(
	`os¶_check_GENERAL_NAME_sk_ty≥
(sk))

	)

249 
	#sk_GENERAL_NAME_is_s‹ãd
(
sk
Ë
	`OPENSSL_sk_is_s‹ãd
(
	`os¶_check_c⁄°_GENERAL_NAME_sk_ty≥
(sk))

	)

250 
	#sk_GENERAL_NAME_dup
(
sk
Ë((
	`STACK_OF
(
GENERAL_NAME
Ë*)
	`OPENSSL_sk_dup
(
	`os¶_check_c⁄°_GENERAL_NAME_sk_ty≥
(sk)))

	)

251 
	#sk_GENERAL_NAME_dìp_c›y
(
sk
, 
c›yfunc
, 
‰ìfunc
Ë((
	`STACK_OF
(
GENERAL_NAME
Ë*)
	`OPENSSL_sk_dìp_c›y
(
	`os¶_check_c⁄°_GENERAL_NAME_sk_ty≥
(sk), 
	`os¶_check_GENERAL_NAME_c›yfunc_ty≥
(c›yfunc), 
	`os¶_check_GENERAL_NAME_‰ìfunc_ty≥
(‰ìfunc)))

	)

252 
	#sk_GENERAL_NAME_£t_cmp_func
(
sk
, 
cmp
Ë((
sk_GENERAL_NAME_compfunc
)
	`OPENSSL_sk_£t_cmp_func
(
	`os¶_check_GENERAL_NAME_sk_ty≥
(sk), 
	`os¶_check_GENERAL_NAME_compfunc_ty≥
(cmp)))

	)

255 
STACK_OF
(
	tACCESS_DESCRIPTION
Ë
	tAUTHORITY_INFO_ACCESS
;

256 
STACK_OF
(
	tASN1_OBJECT
Ë
	tEXTENDED_KEY_USAGE
;

257 
STACK_OF
(
	tASN1_INTEGER
Ë
	tTLS_FEATURE
;

258 
STACK_OF
(
	tGENERAL_NAME
Ë
	tGENERAL_NAMES
;

260 
SKM_DEFINE_STACK_OF_INTERNAL
(
GENERAL_NAMES
, GENERAL_NAMES, GENERAL_NAMES)

261 
	#sk_GENERAL_NAMES_num
(
sk
Ë
	`OPENSSL_sk_num
(
	`os¶_check_c⁄°_GENERAL_NAMES_sk_ty≥
(sk))

	)

262 
	#sk_GENERAL_NAMES_vÆue
(
sk
, 
idx
Ë((
GENERAL_NAMES
 *)
	`OPENSSL_sk_vÆue
(
	`os¶_check_c⁄°_GENERAL_NAMES_sk_ty≥
(sk), (idx)))

	)

263 
	#sk_GENERAL_NAMES_√w
(
cmp
Ë((
	`STACK_OF
(
GENERAL_NAMES
Ë*)
	`OPENSSL_sk_√w
(
	`os¶_check_GENERAL_NAMES_compfunc_ty≥
(cmp)))

	)

264 
	#sk_GENERAL_NAMES_√w_nuŒ
(Ë((
	`STACK_OF
(
GENERAL_NAMES
Ë*)
	`OPENSSL_sk_√w_nuŒ
())

	)

265 
	#sk_GENERAL_NAMES_√w_ª£rve
(
cmp
, 
n
Ë((
	`STACK_OF
(
GENERAL_NAMES
Ë*)
	`OPENSSL_sk_√w_ª£rve
(
	`os¶_check_GENERAL_NAMES_compfunc_ty≥
(cmp), (n)))

	)

266 
	#sk_GENERAL_NAMES_ª£rve
(
sk
, 
n
Ë
	`OPENSSL_sk_ª£rve
(
	`os¶_check_GENERAL_NAMES_sk_ty≥
(sk), (n))

	)

267 
	#sk_GENERAL_NAMES_‰ì
(
sk
Ë
	`OPENSSL_sk_‰ì
(
	`os¶_check_GENERAL_NAMES_sk_ty≥
(sk))

	)

268 
	#sk_GENERAL_NAMES_zîo
(
sk
Ë
	`OPENSSL_sk_zîo
(
	`os¶_check_GENERAL_NAMES_sk_ty≥
(sk))

	)

269 
	#sk_GENERAL_NAMES_dñëe
(
sk
, 
i
Ë((
GENERAL_NAMES
 *)
	`OPENSSL_sk_dñëe
(
	`os¶_check_GENERAL_NAMES_sk_ty≥
(sk), (i)))

	)

270 
	#sk_GENERAL_NAMES_dñëe_±r
(
sk
, 
±r
Ë((
GENERAL_NAMES
 *)
	`OPENSSL_sk_dñëe_±r
(
	`os¶_check_GENERAL_NAMES_sk_ty≥
(sk), 
	`os¶_check_GENERAL_NAMES_ty≥
’å)))

	)

271 
	#sk_GENERAL_NAMES_push
(
sk
, 
±r
Ë
	`OPENSSL_sk_push
(
	`os¶_check_GENERAL_NAMES_sk_ty≥
(sk), 
	`os¶_check_GENERAL_NAMES_ty≥
’å))

	)

272 
	#sk_GENERAL_NAMES_unshi·
(
sk
, 
±r
Ë
	`OPENSSL_sk_unshi·
(
	`os¶_check_GENERAL_NAMES_sk_ty≥
(sk), 
	`os¶_check_GENERAL_NAMES_ty≥
’å))

	)

273 
	#sk_GENERAL_NAMES_p›
(
sk
Ë((
GENERAL_NAMES
 *)
	`OPENSSL_sk_p›
(
	`os¶_check_GENERAL_NAMES_sk_ty≥
(sk)))

	)

274 
	#sk_GENERAL_NAMES_shi·
(
sk
Ë((
GENERAL_NAMES
 *)
	`OPENSSL_sk_shi·
(
	`os¶_check_GENERAL_NAMES_sk_ty≥
(sk)))

	)

275 
	#sk_GENERAL_NAMES_p›_‰ì
(
sk
, 
‰ìfunc
Ë
	`OPENSSL_sk_p›_‰ì
(
	`os¶_check_GENERAL_NAMES_sk_ty≥
(sk),
	`os¶_check_GENERAL_NAMES_‰ìfunc_ty≥
(‰ìfunc))

	)

276 
	#sk_GENERAL_NAMES_ö£π
(
sk
, 
±r
, 
idx
Ë
	`OPENSSL_sk_ö£π
(
	`os¶_check_GENERAL_NAMES_sk_ty≥
(sk), 
	`os¶_check_GENERAL_NAMES_ty≥
’å), (idx))

	)

277 
	#sk_GENERAL_NAMES_£t
(
sk
, 
idx
, 
±r
Ë((
GENERAL_NAMES
 *)
	`OPENSSL_sk_£t
(
	`os¶_check_GENERAL_NAMES_sk_ty≥
(sk), (idx), 
	`os¶_check_GENERAL_NAMES_ty≥
’å)))

	)

278 
	#sk_GENERAL_NAMES_föd
(
sk
, 
±r
Ë
	`OPENSSL_sk_föd
(
	`os¶_check_GENERAL_NAMES_sk_ty≥
(sk), 
	`os¶_check_GENERAL_NAMES_ty≥
’å))

	)

279 
	#sk_GENERAL_NAMES_föd_ex
(
sk
, 
±r
Ë
	`OPENSSL_sk_föd_ex
(
	`os¶_check_GENERAL_NAMES_sk_ty≥
(sk), 
	`os¶_check_GENERAL_NAMES_ty≥
’å))

	)

280 
	#sk_GENERAL_NAMES_föd_Æl
(
sk
, 
±r
, 
≤um
Ë
	`OPENSSL_sk_föd_Æl
(
	`os¶_check_GENERAL_NAMES_sk_ty≥
(sk), 
	`os¶_check_GENERAL_NAMES_ty≥
’å),Önum)

	)

281 
	#sk_GENERAL_NAMES_s‹t
(
sk
Ë
	`OPENSSL_sk_s‹t
(
	`os¶_check_GENERAL_NAMES_sk_ty≥
(sk))

	)

282 
	#sk_GENERAL_NAMES_is_s‹ãd
(
sk
Ë
	`OPENSSL_sk_is_s‹ãd
(
	`os¶_check_c⁄°_GENERAL_NAMES_sk_ty≥
(sk))

	)

283 
	#sk_GENERAL_NAMES_dup
(
sk
Ë((
	`STACK_OF
(
GENERAL_NAMES
Ë*)
	`OPENSSL_sk_dup
(
	`os¶_check_c⁄°_GENERAL_NAMES_sk_ty≥
(sk)))

	)

284 
	#sk_GENERAL_NAMES_dìp_c›y
(
sk
, 
c›yfunc
, 
‰ìfunc
Ë((
	`STACK_OF
(
GENERAL_NAMES
Ë*)
	`OPENSSL_sk_dìp_c›y
(
	`os¶_check_c⁄°_GENERAL_NAMES_sk_ty≥
(sk), 
	`os¶_check_GENERAL_NAMES_c›yfunc_ty≥
(c›yfunc), 
	`os¶_check_GENERAL_NAMES_‰ìfunc_ty≥
(‰ìfunc)))

	)

285 
	#sk_GENERAL_NAMES_£t_cmp_func
(
sk
, 
cmp
Ë((
sk_GENERAL_NAMES_compfunc
)
	`OPENSSL_sk_£t_cmp_func
(
	`os¶_check_GENERAL_NAMES_sk_ty≥
(sk), 
	`os¶_check_GENERAL_NAMES_compfunc_ty≥
(cmp)))

	)

288 
	sDIST_POINT_NAME_°
 {

289 
ty≥
;

291 
GENERAL_NAMES
 *
fuŒ«me
;

292 
STACK_OF
(
X509_NAME_ENTRY
Ë*
ªœtivíame
;

293 } 
«me
;

295 
X509_NAME
 *
d≤ame
;

296 } 
	tDIST_POINT_NAME
;

298 
	#CRLDP_ALL_REASONS
 0x807f

	)

300 
	#CRL_REASON_NONE
 -1

	)

301 
	#CRL_REASON_UNSPECIFIED
 0

	)

302 
	#CRL_REASON_KEY_COMPROMISE
 1

	)

303 
	#CRL_REASON_CA_COMPROMISE
 2

	)

304 
	#CRL_REASON_AFFILIATION_CHANGED
 3

	)

305 
	#CRL_REASON_SUPERSEDED
 4

	)

306 
	#CRL_REASON_CESSATION_OF_OPERATION
 5

	)

307 
	#CRL_REASON_CERTIFICATE_HOLD
 6

	)

308 
	#CRL_REASON_REMOVE_FROM_CRL
 8

	)

309 
	#CRL_REASON_PRIVILEGE_WITHDRAWN
 9

	)

310 
	#CRL_REASON_AA_COMPROMISE
 10

	)

312 
	sDIST_POINT_°
 {

313 
DIST_POINT_NAME
 *
di°poöt
;

314 
ASN1_BIT_STRING
 *
ªas⁄s
;

315 
GENERAL_NAMES
 *
CRLissuî
;

316 
dp_ªas⁄s
;

319 
SKM_DEFINE_STACK_OF_INTERNAL
(
DIST_POINT
, DIST_POINT, DIST_POINT)

320 
	#sk_DIST_POINT_num
(
sk
Ë
	`OPENSSL_sk_num
(
	`os¶_check_c⁄°_DIST_POINT_sk_ty≥
(sk))

	)

321 
	#sk_DIST_POINT_vÆue
(
sk
, 
idx
Ë((
DIST_POINT
 *)
	`OPENSSL_sk_vÆue
(
	`os¶_check_c⁄°_DIST_POINT_sk_ty≥
(sk), (idx)))

	)

322 
	#sk_DIST_POINT_√w
(
cmp
Ë((
	`STACK_OF
(
DIST_POINT
Ë*)
	`OPENSSL_sk_√w
(
	`os¶_check_DIST_POINT_compfunc_ty≥
(cmp)))

	)

323 
	#sk_DIST_POINT_√w_nuŒ
(Ë((
	`STACK_OF
(
DIST_POINT
Ë*)
	`OPENSSL_sk_√w_nuŒ
())

	)

324 
	#sk_DIST_POINT_√w_ª£rve
(
cmp
, 
n
Ë((
	`STACK_OF
(
DIST_POINT
Ë*)
	`OPENSSL_sk_√w_ª£rve
(
	`os¶_check_DIST_POINT_compfunc_ty≥
(cmp), (n)))

	)

325 
	#sk_DIST_POINT_ª£rve
(
sk
, 
n
Ë
	`OPENSSL_sk_ª£rve
(
	`os¶_check_DIST_POINT_sk_ty≥
(sk), (n))

	)

326 
	#sk_DIST_POINT_‰ì
(
sk
Ë
	`OPENSSL_sk_‰ì
(
	`os¶_check_DIST_POINT_sk_ty≥
(sk))

	)

327 
	#sk_DIST_POINT_zîo
(
sk
Ë
	`OPENSSL_sk_zîo
(
	`os¶_check_DIST_POINT_sk_ty≥
(sk))

	)

328 
	#sk_DIST_POINT_dñëe
(
sk
, 
i
Ë((
DIST_POINT
 *)
	`OPENSSL_sk_dñëe
(
	`os¶_check_DIST_POINT_sk_ty≥
(sk), (i)))

	)

329 
	#sk_DIST_POINT_dñëe_±r
(
sk
, 
±r
Ë((
DIST_POINT
 *)
	`OPENSSL_sk_dñëe_±r
(
	`os¶_check_DIST_POINT_sk_ty≥
(sk), 
	`os¶_check_DIST_POINT_ty≥
’å)))

	)

330 
	#sk_DIST_POINT_push
(
sk
, 
±r
Ë
	`OPENSSL_sk_push
(
	`os¶_check_DIST_POINT_sk_ty≥
(sk), 
	`os¶_check_DIST_POINT_ty≥
’å))

	)

331 
	#sk_DIST_POINT_unshi·
(
sk
, 
±r
Ë
	`OPENSSL_sk_unshi·
(
	`os¶_check_DIST_POINT_sk_ty≥
(sk), 
	`os¶_check_DIST_POINT_ty≥
’å))

	)

332 
	#sk_DIST_POINT_p›
(
sk
Ë((
DIST_POINT
 *)
	`OPENSSL_sk_p›
(
	`os¶_check_DIST_POINT_sk_ty≥
(sk)))

	)

333 
	#sk_DIST_POINT_shi·
(
sk
Ë((
DIST_POINT
 *)
	`OPENSSL_sk_shi·
(
	`os¶_check_DIST_POINT_sk_ty≥
(sk)))

	)

334 
	#sk_DIST_POINT_p›_‰ì
(
sk
, 
‰ìfunc
Ë
	`OPENSSL_sk_p›_‰ì
(
	`os¶_check_DIST_POINT_sk_ty≥
(sk),
	`os¶_check_DIST_POINT_‰ìfunc_ty≥
(‰ìfunc))

	)

335 
	#sk_DIST_POINT_ö£π
(
sk
, 
±r
, 
idx
Ë
	`OPENSSL_sk_ö£π
(
	`os¶_check_DIST_POINT_sk_ty≥
(sk), 
	`os¶_check_DIST_POINT_ty≥
’å), (idx))

	)

336 
	#sk_DIST_POINT_£t
(
sk
, 
idx
, 
±r
Ë((
DIST_POINT
 *)
	`OPENSSL_sk_£t
(
	`os¶_check_DIST_POINT_sk_ty≥
(sk), (idx), 
	`os¶_check_DIST_POINT_ty≥
’å)))

	)

337 
	#sk_DIST_POINT_föd
(
sk
, 
±r
Ë
	`OPENSSL_sk_föd
(
	`os¶_check_DIST_POINT_sk_ty≥
(sk), 
	`os¶_check_DIST_POINT_ty≥
’å))

	)

338 
	#sk_DIST_POINT_föd_ex
(
sk
, 
±r
Ë
	`OPENSSL_sk_föd_ex
(
	`os¶_check_DIST_POINT_sk_ty≥
(sk), 
	`os¶_check_DIST_POINT_ty≥
’å))

	)

339 
	#sk_DIST_POINT_föd_Æl
(
sk
, 
±r
, 
≤um
Ë
	`OPENSSL_sk_föd_Æl
(
	`os¶_check_DIST_POINT_sk_ty≥
(sk), 
	`os¶_check_DIST_POINT_ty≥
’å),Önum)

	)

340 
	#sk_DIST_POINT_s‹t
(
sk
Ë
	`OPENSSL_sk_s‹t
(
	`os¶_check_DIST_POINT_sk_ty≥
(sk))

	)

341 
	#sk_DIST_POINT_is_s‹ãd
(
sk
Ë
	`OPENSSL_sk_is_s‹ãd
(
	`os¶_check_c⁄°_DIST_POINT_sk_ty≥
(sk))

	)

342 
	#sk_DIST_POINT_dup
(
sk
Ë((
	`STACK_OF
(
DIST_POINT
Ë*)
	`OPENSSL_sk_dup
(
	`os¶_check_c⁄°_DIST_POINT_sk_ty≥
(sk)))

	)

343 
	#sk_DIST_POINT_dìp_c›y
(
sk
, 
c›yfunc
, 
‰ìfunc
Ë((
	`STACK_OF
(
DIST_POINT
Ë*)
	`OPENSSL_sk_dìp_c›y
(
	`os¶_check_c⁄°_DIST_POINT_sk_ty≥
(sk), 
	`os¶_check_DIST_POINT_c›yfunc_ty≥
(c›yfunc), 
	`os¶_check_DIST_POINT_‰ìfunc_ty≥
(‰ìfunc)))

	)

344 
	#sk_DIST_POINT_£t_cmp_func
(
sk
, 
cmp
Ë((
sk_DIST_POINT_compfunc
)
	`OPENSSL_sk_£t_cmp_func
(
	`os¶_check_DIST_POINT_sk_ty≥
(sk), 
	`os¶_check_DIST_POINT_compfunc_ty≥
(cmp)))

	)

347 
STACK_OF
(
	tDIST_POINT
Ë
	tCRL_DIST_POINTS
;

349 
	sAUTHORITY_KEYID_°
 {

350 
ASN1_OCTET_STRING
 *
keyid
;

351 
GENERAL_NAMES
 *
issuî
;

352 
ASN1_INTEGER
 *
£rül
;

357 
	sSXNET_ID_°
 {

358 
ASN1_INTEGER
 *
z⁄e
;

359 
ASN1_OCTET_STRING
 *
u£r
;

360 } 
	tSXNETID
;

362 
SKM_DEFINE_STACK_OF_INTERNAL
(
SXNETID
, SXNETID, SXNETID)

363 
	#sk_SXNETID_num
(
sk
Ë
	`OPENSSL_sk_num
(
	`os¶_check_c⁄°_SXNETID_sk_ty≥
(sk))

	)

364 
	#sk_SXNETID_vÆue
(
sk
, 
idx
Ë((
SXNETID
 *)
	`OPENSSL_sk_vÆue
(
	`os¶_check_c⁄°_SXNETID_sk_ty≥
(sk), (idx)))

	)

365 
	#sk_SXNETID_√w
(
cmp
Ë((
	`STACK_OF
(
SXNETID
Ë*)
	`OPENSSL_sk_√w
(
	`os¶_check_SXNETID_compfunc_ty≥
(cmp)))

	)

366 
	#sk_SXNETID_√w_nuŒ
(Ë((
	`STACK_OF
(
SXNETID
Ë*)
	`OPENSSL_sk_√w_nuŒ
())

	)

367 
	#sk_SXNETID_√w_ª£rve
(
cmp
, 
n
Ë((
	`STACK_OF
(
SXNETID
Ë*)
	`OPENSSL_sk_√w_ª£rve
(
	`os¶_check_SXNETID_compfunc_ty≥
(cmp), (n)))

	)

368 
	#sk_SXNETID_ª£rve
(
sk
, 
n
Ë
	`OPENSSL_sk_ª£rve
(
	`os¶_check_SXNETID_sk_ty≥
(sk), (n))

	)

369 
	#sk_SXNETID_‰ì
(
sk
Ë
	`OPENSSL_sk_‰ì
(
	`os¶_check_SXNETID_sk_ty≥
(sk))

	)

370 
	#sk_SXNETID_zîo
(
sk
Ë
	`OPENSSL_sk_zîo
(
	`os¶_check_SXNETID_sk_ty≥
(sk))

	)

371 
	#sk_SXNETID_dñëe
(
sk
, 
i
Ë((
SXNETID
 *)
	`OPENSSL_sk_dñëe
(
	`os¶_check_SXNETID_sk_ty≥
(sk), (i)))

	)

372 
	#sk_SXNETID_dñëe_±r
(
sk
, 
±r
Ë((
SXNETID
 *)
	`OPENSSL_sk_dñëe_±r
(
	`os¶_check_SXNETID_sk_ty≥
(sk), 
	`os¶_check_SXNETID_ty≥
’å)))

	)

373 
	#sk_SXNETID_push
(
sk
, 
±r
Ë
	`OPENSSL_sk_push
(
	`os¶_check_SXNETID_sk_ty≥
(sk), 
	`os¶_check_SXNETID_ty≥
’å))

	)

374 
	#sk_SXNETID_unshi·
(
sk
, 
±r
Ë
	`OPENSSL_sk_unshi·
(
	`os¶_check_SXNETID_sk_ty≥
(sk), 
	`os¶_check_SXNETID_ty≥
’å))

	)

375 
	#sk_SXNETID_p›
(
sk
Ë((
SXNETID
 *)
	`OPENSSL_sk_p›
(
	`os¶_check_SXNETID_sk_ty≥
(sk)))

	)

376 
	#sk_SXNETID_shi·
(
sk
Ë((
SXNETID
 *)
	`OPENSSL_sk_shi·
(
	`os¶_check_SXNETID_sk_ty≥
(sk)))

	)

377 
	#sk_SXNETID_p›_‰ì
(
sk
, 
‰ìfunc
Ë
	`OPENSSL_sk_p›_‰ì
(
	`os¶_check_SXNETID_sk_ty≥
(sk),
	`os¶_check_SXNETID_‰ìfunc_ty≥
(‰ìfunc))

	)

378 
	#sk_SXNETID_ö£π
(
sk
, 
±r
, 
idx
Ë
	`OPENSSL_sk_ö£π
(
	`os¶_check_SXNETID_sk_ty≥
(sk), 
	`os¶_check_SXNETID_ty≥
’å), (idx))

	)

379 
	#sk_SXNETID_£t
(
sk
, 
idx
, 
±r
Ë((
SXNETID
 *)
	`OPENSSL_sk_£t
(
	`os¶_check_SXNETID_sk_ty≥
(sk), (idx), 
	`os¶_check_SXNETID_ty≥
’å)))

	)

380 
	#sk_SXNETID_föd
(
sk
, 
±r
Ë
	`OPENSSL_sk_föd
(
	`os¶_check_SXNETID_sk_ty≥
(sk), 
	`os¶_check_SXNETID_ty≥
’å))

	)

381 
	#sk_SXNETID_föd_ex
(
sk
, 
±r
Ë
	`OPENSSL_sk_föd_ex
(
	`os¶_check_SXNETID_sk_ty≥
(sk), 
	`os¶_check_SXNETID_ty≥
’å))

	)

382 
	#sk_SXNETID_föd_Æl
(
sk
, 
±r
, 
≤um
Ë
	`OPENSSL_sk_föd_Æl
(
	`os¶_check_SXNETID_sk_ty≥
(sk), 
	`os¶_check_SXNETID_ty≥
’å),Önum)

	)

383 
	#sk_SXNETID_s‹t
(
sk
Ë
	`OPENSSL_sk_s‹t
(
	`os¶_check_SXNETID_sk_ty≥
(sk))

	)

384 
	#sk_SXNETID_is_s‹ãd
(
sk
Ë
	`OPENSSL_sk_is_s‹ãd
(
	`os¶_check_c⁄°_SXNETID_sk_ty≥
(sk))

	)

385 
	#sk_SXNETID_dup
(
sk
Ë((
	`STACK_OF
(
SXNETID
Ë*)
	`OPENSSL_sk_dup
(
	`os¶_check_c⁄°_SXNETID_sk_ty≥
(sk)))

	)

386 
	#sk_SXNETID_dìp_c›y
(
sk
, 
c›yfunc
, 
‰ìfunc
Ë((
	`STACK_OF
(
SXNETID
Ë*)
	`OPENSSL_sk_dìp_c›y
(
	`os¶_check_c⁄°_SXNETID_sk_ty≥
(sk), 
	`os¶_check_SXNETID_c›yfunc_ty≥
(c›yfunc), 
	`os¶_check_SXNETID_‰ìfunc_ty≥
(‰ìfunc)))

	)

387 
	#sk_SXNETID_£t_cmp_func
(
sk
, 
cmp
Ë((
sk_SXNETID_compfunc
)
	`OPENSSL_sk_£t_cmp_func
(
	`os¶_check_SXNETID_sk_ty≥
(sk), 
	`os¶_check_SXNETID_compfunc_ty≥
(cmp)))

	)

391 
	sSXNET_°
 {

392 
ASN1_INTEGER
 *
vîsi⁄
;

393 
STACK_OF
(
SXNETID
Ë*
ids
;

394 } 
	tSXNET
;

396 
	sISSUER_SIGN_TOOL_°
 {

397 
ASN1_UTF8STRING
 *
signToﬁ
;

398 
ASN1_UTF8STRING
 *
cAToﬁ
;

399 
ASN1_UTF8STRING
 *
signToﬁCît
;

400 
ASN1_UTF8STRING
 *
cAToﬁCît
;

401 } 
	tISSUER_SIGN_TOOL
;

403 
	sNOTICEREF_°
 {

404 
ASN1_STRING
 *
‹g™iz©i⁄
;

405 
STACK_OF
(
ASN1_INTEGER
Ë*
nŸi˚nos
;

406 } 
	tNOTICEREF
;

408 
	sUSERNOTICE_°
 {

409 
NOTICEREF
 *
nŸi˚ªf
;

410 
ASN1_STRING
 *
ex±ext
;

411 } 
	tUSERNOTICE
;

413 
	sPOLICYQUALINFO_°
 {

414 
ASN1_OBJECT
 *
pquÆid
;

416 
ASN1_IA5STRING
 *
˝suri
;

417 
USERNOTICE
 *
u£∫Ÿi˚
;

418 
ASN1_TYPE
 *
Ÿhî
;

419 } 
d
;

420 } 
	tPOLICYQUALINFO
;

422 
SKM_DEFINE_STACK_OF_INTERNAL
(
POLICYQUALINFO
, POLICYQUALINFO, POLICYQUALINFO)

423 
	#sk_POLICYQUALINFO_num
(
sk
Ë
	`OPENSSL_sk_num
(
	`os¶_check_c⁄°_POLICYQUALINFO_sk_ty≥
(sk))

	)

424 
	#sk_POLICYQUALINFO_vÆue
(
sk
, 
idx
Ë((
POLICYQUALINFO
 *)
	`OPENSSL_sk_vÆue
(
	`os¶_check_c⁄°_POLICYQUALINFO_sk_ty≥
(sk), (idx)))

	)

425 
	#sk_POLICYQUALINFO_√w
(
cmp
Ë((
	`STACK_OF
(
POLICYQUALINFO
Ë*)
	`OPENSSL_sk_√w
(
	`os¶_check_POLICYQUALINFO_compfunc_ty≥
(cmp)))

	)

426 
	#sk_POLICYQUALINFO_√w_nuŒ
(Ë((
	`STACK_OF
(
POLICYQUALINFO
Ë*)
	`OPENSSL_sk_√w_nuŒ
())

	)

427 
	#sk_POLICYQUALINFO_√w_ª£rve
(
cmp
, 
n
Ë((
	`STACK_OF
(
POLICYQUALINFO
Ë*)
	`OPENSSL_sk_√w_ª£rve
(
	`os¶_check_POLICYQUALINFO_compfunc_ty≥
(cmp), (n)))

	)

428 
	#sk_POLICYQUALINFO_ª£rve
(
sk
, 
n
Ë
	`OPENSSL_sk_ª£rve
(
	`os¶_check_POLICYQUALINFO_sk_ty≥
(sk), (n))

	)

429 
	#sk_POLICYQUALINFO_‰ì
(
sk
Ë
	`OPENSSL_sk_‰ì
(
	`os¶_check_POLICYQUALINFO_sk_ty≥
(sk))

	)

430 
	#sk_POLICYQUALINFO_zîo
(
sk
Ë
	`OPENSSL_sk_zîo
(
	`os¶_check_POLICYQUALINFO_sk_ty≥
(sk))

	)

431 
	#sk_POLICYQUALINFO_dñëe
(
sk
, 
i
Ë((
POLICYQUALINFO
 *)
	`OPENSSL_sk_dñëe
(
	`os¶_check_POLICYQUALINFO_sk_ty≥
(sk), (i)))

	)

432 
	#sk_POLICYQUALINFO_dñëe_±r
(
sk
, 
±r
Ë((
POLICYQUALINFO
 *)
	`OPENSSL_sk_dñëe_±r
(
	`os¶_check_POLICYQUALINFO_sk_ty≥
(sk), 
	`os¶_check_POLICYQUALINFO_ty≥
’å)))

	)

433 
	#sk_POLICYQUALINFO_push
(
sk
, 
±r
Ë
	`OPENSSL_sk_push
(
	`os¶_check_POLICYQUALINFO_sk_ty≥
(sk), 
	`os¶_check_POLICYQUALINFO_ty≥
’å))

	)

434 
	#sk_POLICYQUALINFO_unshi·
(
sk
, 
±r
Ë
	`OPENSSL_sk_unshi·
(
	`os¶_check_POLICYQUALINFO_sk_ty≥
(sk), 
	`os¶_check_POLICYQUALINFO_ty≥
’å))

	)

435 
	#sk_POLICYQUALINFO_p›
(
sk
Ë((
POLICYQUALINFO
 *)
	`OPENSSL_sk_p›
(
	`os¶_check_POLICYQUALINFO_sk_ty≥
(sk)))

	)

436 
	#sk_POLICYQUALINFO_shi·
(
sk
Ë((
POLICYQUALINFO
 *)
	`OPENSSL_sk_shi·
(
	`os¶_check_POLICYQUALINFO_sk_ty≥
(sk)))

	)

437 
	#sk_POLICYQUALINFO_p›_‰ì
(
sk
, 
‰ìfunc
Ë
	`OPENSSL_sk_p›_‰ì
(
	`os¶_check_POLICYQUALINFO_sk_ty≥
(sk),
	`os¶_check_POLICYQUALINFO_‰ìfunc_ty≥
(‰ìfunc))

	)

438 
	#sk_POLICYQUALINFO_ö£π
(
sk
, 
±r
, 
idx
Ë
	`OPENSSL_sk_ö£π
(
	`os¶_check_POLICYQUALINFO_sk_ty≥
(sk), 
	`os¶_check_POLICYQUALINFO_ty≥
’å), (idx))

	)

439 
	#sk_POLICYQUALINFO_£t
(
sk
, 
idx
, 
±r
Ë((
POLICYQUALINFO
 *)
	`OPENSSL_sk_£t
(
	`os¶_check_POLICYQUALINFO_sk_ty≥
(sk), (idx), 
	`os¶_check_POLICYQUALINFO_ty≥
’å)))

	)

440 
	#sk_POLICYQUALINFO_föd
(
sk
, 
±r
Ë
	`OPENSSL_sk_föd
(
	`os¶_check_POLICYQUALINFO_sk_ty≥
(sk), 
	`os¶_check_POLICYQUALINFO_ty≥
’å))

	)

441 
	#sk_POLICYQUALINFO_föd_ex
(
sk
, 
±r
Ë
	`OPENSSL_sk_föd_ex
(
	`os¶_check_POLICYQUALINFO_sk_ty≥
(sk), 
	`os¶_check_POLICYQUALINFO_ty≥
’å))

	)

442 
	#sk_POLICYQUALINFO_föd_Æl
(
sk
, 
±r
, 
≤um
Ë
	`OPENSSL_sk_föd_Æl
(
	`os¶_check_POLICYQUALINFO_sk_ty≥
(sk), 
	`os¶_check_POLICYQUALINFO_ty≥
’å),Önum)

	)

443 
	#sk_POLICYQUALINFO_s‹t
(
sk
Ë
	`OPENSSL_sk_s‹t
(
	`os¶_check_POLICYQUALINFO_sk_ty≥
(sk))

	)

444 
	#sk_POLICYQUALINFO_is_s‹ãd
(
sk
Ë
	`OPENSSL_sk_is_s‹ãd
(
	`os¶_check_c⁄°_POLICYQUALINFO_sk_ty≥
(sk))

	)

445 
	#sk_POLICYQUALINFO_dup
(
sk
Ë((
	`STACK_OF
(
POLICYQUALINFO
Ë*)
	`OPENSSL_sk_dup
(
	`os¶_check_c⁄°_POLICYQUALINFO_sk_ty≥
(sk)))

	)

446 
	#sk_POLICYQUALINFO_dìp_c›y
(
sk
, 
c›yfunc
, 
‰ìfunc
Ë((
	`STACK_OF
(
POLICYQUALINFO
Ë*)
	`OPENSSL_sk_dìp_c›y
(
	`os¶_check_c⁄°_POLICYQUALINFO_sk_ty≥
(sk), 
	`os¶_check_POLICYQUALINFO_c›yfunc_ty≥
(c›yfunc), 
	`os¶_check_POLICYQUALINFO_‰ìfunc_ty≥
(‰ìfunc)))

	)

447 
	#sk_POLICYQUALINFO_£t_cmp_func
(
sk
, 
cmp
Ë((
sk_POLICYQUALINFO_compfunc
)
	`OPENSSL_sk_£t_cmp_func
(
	`os¶_check_POLICYQUALINFO_sk_ty≥
(sk), 
	`os¶_check_POLICYQUALINFO_compfunc_ty≥
(cmp)))

	)

451 
	sPOLICYINFO_°
 {

452 
ASN1_OBJECT
 *
pﬁicyid
;

453 
STACK_OF
(
POLICYQUALINFO
Ë*
quÆifõrs
;

454 } 
	tPOLICYINFO
;

456 
SKM_DEFINE_STACK_OF_INTERNAL
(
POLICYINFO
, POLICYINFO, POLICYINFO)

457 
	#sk_POLICYINFO_num
(
sk
Ë
	`OPENSSL_sk_num
(
	`os¶_check_c⁄°_POLICYINFO_sk_ty≥
(sk))

	)

458 
	#sk_POLICYINFO_vÆue
(
sk
, 
idx
Ë((
POLICYINFO
 *)
	`OPENSSL_sk_vÆue
(
	`os¶_check_c⁄°_POLICYINFO_sk_ty≥
(sk), (idx)))

	)

459 
	#sk_POLICYINFO_√w
(
cmp
Ë((
	`STACK_OF
(
POLICYINFO
Ë*)
	`OPENSSL_sk_√w
(
	`os¶_check_POLICYINFO_compfunc_ty≥
(cmp)))

	)

460 
	#sk_POLICYINFO_√w_nuŒ
(Ë((
	`STACK_OF
(
POLICYINFO
Ë*)
	`OPENSSL_sk_√w_nuŒ
())

	)

461 
	#sk_POLICYINFO_√w_ª£rve
(
cmp
, 
n
Ë((
	`STACK_OF
(
POLICYINFO
Ë*)
	`OPENSSL_sk_√w_ª£rve
(
	`os¶_check_POLICYINFO_compfunc_ty≥
(cmp), (n)))

	)

462 
	#sk_POLICYINFO_ª£rve
(
sk
, 
n
Ë
	`OPENSSL_sk_ª£rve
(
	`os¶_check_POLICYINFO_sk_ty≥
(sk), (n))

	)

463 
	#sk_POLICYINFO_‰ì
(
sk
Ë
	`OPENSSL_sk_‰ì
(
	`os¶_check_POLICYINFO_sk_ty≥
(sk))

	)

464 
	#sk_POLICYINFO_zîo
(
sk
Ë
	`OPENSSL_sk_zîo
(
	`os¶_check_POLICYINFO_sk_ty≥
(sk))

	)

465 
	#sk_POLICYINFO_dñëe
(
sk
, 
i
Ë((
POLICYINFO
 *)
	`OPENSSL_sk_dñëe
(
	`os¶_check_POLICYINFO_sk_ty≥
(sk), (i)))

	)

466 
	#sk_POLICYINFO_dñëe_±r
(
sk
, 
±r
Ë((
POLICYINFO
 *)
	`OPENSSL_sk_dñëe_±r
(
	`os¶_check_POLICYINFO_sk_ty≥
(sk), 
	`os¶_check_POLICYINFO_ty≥
’å)))

	)

467 
	#sk_POLICYINFO_push
(
sk
, 
±r
Ë
	`OPENSSL_sk_push
(
	`os¶_check_POLICYINFO_sk_ty≥
(sk), 
	`os¶_check_POLICYINFO_ty≥
’å))

	)

468 
	#sk_POLICYINFO_unshi·
(
sk
, 
±r
Ë
	`OPENSSL_sk_unshi·
(
	`os¶_check_POLICYINFO_sk_ty≥
(sk), 
	`os¶_check_POLICYINFO_ty≥
’å))

	)

469 
	#sk_POLICYINFO_p›
(
sk
Ë((
POLICYINFO
 *)
	`OPENSSL_sk_p›
(
	`os¶_check_POLICYINFO_sk_ty≥
(sk)))

	)

470 
	#sk_POLICYINFO_shi·
(
sk
Ë((
POLICYINFO
 *)
	`OPENSSL_sk_shi·
(
	`os¶_check_POLICYINFO_sk_ty≥
(sk)))

	)

471 
	#sk_POLICYINFO_p›_‰ì
(
sk
, 
‰ìfunc
Ë
	`OPENSSL_sk_p›_‰ì
(
	`os¶_check_POLICYINFO_sk_ty≥
(sk),
	`os¶_check_POLICYINFO_‰ìfunc_ty≥
(‰ìfunc))

	)

472 
	#sk_POLICYINFO_ö£π
(
sk
, 
±r
, 
idx
Ë
	`OPENSSL_sk_ö£π
(
	`os¶_check_POLICYINFO_sk_ty≥
(sk), 
	`os¶_check_POLICYINFO_ty≥
’å), (idx))

	)

473 
	#sk_POLICYINFO_£t
(
sk
, 
idx
, 
±r
Ë((
POLICYINFO
 *)
	`OPENSSL_sk_£t
(
	`os¶_check_POLICYINFO_sk_ty≥
(sk), (idx), 
	`os¶_check_POLICYINFO_ty≥
’å)))

	)

474 
	#sk_POLICYINFO_föd
(
sk
, 
±r
Ë
	`OPENSSL_sk_föd
(
	`os¶_check_POLICYINFO_sk_ty≥
(sk), 
	`os¶_check_POLICYINFO_ty≥
’å))

	)

475 
	#sk_POLICYINFO_föd_ex
(
sk
, 
±r
Ë
	`OPENSSL_sk_föd_ex
(
	`os¶_check_POLICYINFO_sk_ty≥
(sk), 
	`os¶_check_POLICYINFO_ty≥
’å))

	)

476 
	#sk_POLICYINFO_föd_Æl
(
sk
, 
±r
, 
≤um
Ë
	`OPENSSL_sk_föd_Æl
(
	`os¶_check_POLICYINFO_sk_ty≥
(sk), 
	`os¶_check_POLICYINFO_ty≥
’å),Önum)

	)

477 
	#sk_POLICYINFO_s‹t
(
sk
Ë
	`OPENSSL_sk_s‹t
(
	`os¶_check_POLICYINFO_sk_ty≥
(sk))

	)

478 
	#sk_POLICYINFO_is_s‹ãd
(
sk
Ë
	`OPENSSL_sk_is_s‹ãd
(
	`os¶_check_c⁄°_POLICYINFO_sk_ty≥
(sk))

	)

479 
	#sk_POLICYINFO_dup
(
sk
Ë((
	`STACK_OF
(
POLICYINFO
Ë*)
	`OPENSSL_sk_dup
(
	`os¶_check_c⁄°_POLICYINFO_sk_ty≥
(sk)))

	)

480 
	#sk_POLICYINFO_dìp_c›y
(
sk
, 
c›yfunc
, 
‰ìfunc
Ë((
	`STACK_OF
(
POLICYINFO
Ë*)
	`OPENSSL_sk_dìp_c›y
(
	`os¶_check_c⁄°_POLICYINFO_sk_ty≥
(sk), 
	`os¶_check_POLICYINFO_c›yfunc_ty≥
(c›yfunc), 
	`os¶_check_POLICYINFO_‰ìfunc_ty≥
(‰ìfunc)))

	)

481 
	#sk_POLICYINFO_£t_cmp_func
(
sk
, 
cmp
Ë((
sk_POLICYINFO_compfunc
)
	`OPENSSL_sk_£t_cmp_func
(
	`os¶_check_POLICYINFO_sk_ty≥
(sk), 
	`os¶_check_POLICYINFO_compfunc_ty≥
(cmp)))

	)

484 
STACK_OF
(
	tPOLICYINFO
Ë
	tCERTIFICATEPOLICIES
;

486 
	sPOLICY_MAPPING_°
 {

487 
ASN1_OBJECT
 *
issuîDomaöPﬁicy
;

488 
ASN1_OBJECT
 *
subje˘DomaöPﬁicy
;

489 } 
	tPOLICY_MAPPING
;

491 
SKM_DEFINE_STACK_OF_INTERNAL
(
POLICY_MAPPING
, POLICY_MAPPING, POLICY_MAPPING)

492 
	#sk_POLICY_MAPPING_num
(
sk
Ë
	`OPENSSL_sk_num
(
	`os¶_check_c⁄°_POLICY_MAPPING_sk_ty≥
(sk))

	)

493 
	#sk_POLICY_MAPPING_vÆue
(
sk
, 
idx
Ë((
POLICY_MAPPING
 *)
	`OPENSSL_sk_vÆue
(
	`os¶_check_c⁄°_POLICY_MAPPING_sk_ty≥
(sk), (idx)))

	)

494 
	#sk_POLICY_MAPPING_√w
(
cmp
Ë((
	`STACK_OF
(
POLICY_MAPPING
Ë*)
	`OPENSSL_sk_√w
(
	`os¶_check_POLICY_MAPPING_compfunc_ty≥
(cmp)))

	)

495 
	#sk_POLICY_MAPPING_√w_nuŒ
(Ë((
	`STACK_OF
(
POLICY_MAPPING
Ë*)
	`OPENSSL_sk_√w_nuŒ
())

	)

496 
	#sk_POLICY_MAPPING_√w_ª£rve
(
cmp
, 
n
Ë((
	`STACK_OF
(
POLICY_MAPPING
Ë*)
	`OPENSSL_sk_√w_ª£rve
(
	`os¶_check_POLICY_MAPPING_compfunc_ty≥
(cmp), (n)))

	)

497 
	#sk_POLICY_MAPPING_ª£rve
(
sk
, 
n
Ë
	`OPENSSL_sk_ª£rve
(
	`os¶_check_POLICY_MAPPING_sk_ty≥
(sk), (n))

	)

498 
	#sk_POLICY_MAPPING_‰ì
(
sk
Ë
	`OPENSSL_sk_‰ì
(
	`os¶_check_POLICY_MAPPING_sk_ty≥
(sk))

	)

499 
	#sk_POLICY_MAPPING_zîo
(
sk
Ë
	`OPENSSL_sk_zîo
(
	`os¶_check_POLICY_MAPPING_sk_ty≥
(sk))

	)

500 
	#sk_POLICY_MAPPING_dñëe
(
sk
, 
i
Ë((
POLICY_MAPPING
 *)
	`OPENSSL_sk_dñëe
(
	`os¶_check_POLICY_MAPPING_sk_ty≥
(sk), (i)))

	)

501 
	#sk_POLICY_MAPPING_dñëe_±r
(
sk
, 
±r
Ë((
POLICY_MAPPING
 *)
	`OPENSSL_sk_dñëe_±r
(
	`os¶_check_POLICY_MAPPING_sk_ty≥
(sk), 
	`os¶_check_POLICY_MAPPING_ty≥
’å)))

	)

502 
	#sk_POLICY_MAPPING_push
(
sk
, 
±r
Ë
	`OPENSSL_sk_push
(
	`os¶_check_POLICY_MAPPING_sk_ty≥
(sk), 
	`os¶_check_POLICY_MAPPING_ty≥
’å))

	)

503 
	#sk_POLICY_MAPPING_unshi·
(
sk
, 
±r
Ë
	`OPENSSL_sk_unshi·
(
	`os¶_check_POLICY_MAPPING_sk_ty≥
(sk), 
	`os¶_check_POLICY_MAPPING_ty≥
’å))

	)

504 
	#sk_POLICY_MAPPING_p›
(
sk
Ë((
POLICY_MAPPING
 *)
	`OPENSSL_sk_p›
(
	`os¶_check_POLICY_MAPPING_sk_ty≥
(sk)))

	)

505 
	#sk_POLICY_MAPPING_shi·
(
sk
Ë((
POLICY_MAPPING
 *)
	`OPENSSL_sk_shi·
(
	`os¶_check_POLICY_MAPPING_sk_ty≥
(sk)))

	)

506 
	#sk_POLICY_MAPPING_p›_‰ì
(
sk
, 
‰ìfunc
Ë
	`OPENSSL_sk_p›_‰ì
(
	`os¶_check_POLICY_MAPPING_sk_ty≥
(sk),
	`os¶_check_POLICY_MAPPING_‰ìfunc_ty≥
(‰ìfunc))

	)

507 
	#sk_POLICY_MAPPING_ö£π
(
sk
, 
±r
, 
idx
Ë
	`OPENSSL_sk_ö£π
(
	`os¶_check_POLICY_MAPPING_sk_ty≥
(sk), 
	`os¶_check_POLICY_MAPPING_ty≥
’å), (idx))

	)

508 
	#sk_POLICY_MAPPING_£t
(
sk
, 
idx
, 
±r
Ë((
POLICY_MAPPING
 *)
	`OPENSSL_sk_£t
(
	`os¶_check_POLICY_MAPPING_sk_ty≥
(sk), (idx), 
	`os¶_check_POLICY_MAPPING_ty≥
’å)))

	)

509 
	#sk_POLICY_MAPPING_föd
(
sk
, 
±r
Ë
	`OPENSSL_sk_föd
(
	`os¶_check_POLICY_MAPPING_sk_ty≥
(sk), 
	`os¶_check_POLICY_MAPPING_ty≥
’å))

	)

510 
	#sk_POLICY_MAPPING_föd_ex
(
sk
, 
±r
Ë
	`OPENSSL_sk_föd_ex
(
	`os¶_check_POLICY_MAPPING_sk_ty≥
(sk), 
	`os¶_check_POLICY_MAPPING_ty≥
’å))

	)

511 
	#sk_POLICY_MAPPING_föd_Æl
(
sk
, 
±r
, 
≤um
Ë
	`OPENSSL_sk_föd_Æl
(
	`os¶_check_POLICY_MAPPING_sk_ty≥
(sk), 
	`os¶_check_POLICY_MAPPING_ty≥
’å),Önum)

	)

512 
	#sk_POLICY_MAPPING_s‹t
(
sk
Ë
	`OPENSSL_sk_s‹t
(
	`os¶_check_POLICY_MAPPING_sk_ty≥
(sk))

	)

513 
	#sk_POLICY_MAPPING_is_s‹ãd
(
sk
Ë
	`OPENSSL_sk_is_s‹ãd
(
	`os¶_check_c⁄°_POLICY_MAPPING_sk_ty≥
(sk))

	)

514 
	#sk_POLICY_MAPPING_dup
(
sk
Ë((
	`STACK_OF
(
POLICY_MAPPING
Ë*)
	`OPENSSL_sk_dup
(
	`os¶_check_c⁄°_POLICY_MAPPING_sk_ty≥
(sk)))

	)

515 
	#sk_POLICY_MAPPING_dìp_c›y
(
sk
, 
c›yfunc
, 
‰ìfunc
Ë((
	`STACK_OF
(
POLICY_MAPPING
Ë*)
	`OPENSSL_sk_dìp_c›y
(
	`os¶_check_c⁄°_POLICY_MAPPING_sk_ty≥
(sk), 
	`os¶_check_POLICY_MAPPING_c›yfunc_ty≥
(c›yfunc), 
	`os¶_check_POLICY_MAPPING_‰ìfunc_ty≥
(‰ìfunc)))

	)

516 
	#sk_POLICY_MAPPING_£t_cmp_func
(
sk
, 
cmp
Ë((
sk_POLICY_MAPPING_compfunc
)
	`OPENSSL_sk_£t_cmp_func
(
	`os¶_check_POLICY_MAPPING_sk_ty≥
(sk), 
	`os¶_check_POLICY_MAPPING_compfunc_ty≥
(cmp)))

	)

519 
STACK_OF
(
	tPOLICY_MAPPING
Ë
	tPOLICY_MAPPINGS
;

521 
	sGENERAL_SUBTREE_°
 {

522 
GENERAL_NAME
 *
ba£
;

523 
ASN1_INTEGER
 *
möimum
;

524 
ASN1_INTEGER
 *
maximum
;

525 } 
	tGENERAL_SUBTREE
;

527 
SKM_DEFINE_STACK_OF_INTERNAL
(
GENERAL_SUBTREE
, GENERAL_SUBTREE, GENERAL_SUBTREE)

528 
	#sk_GENERAL_SUBTREE_num
(
sk
Ë
	`OPENSSL_sk_num
(
	`os¶_check_c⁄°_GENERAL_SUBTREE_sk_ty≥
(sk))

	)

529 
	#sk_GENERAL_SUBTREE_vÆue
(
sk
, 
idx
Ë((
GENERAL_SUBTREE
 *)
	`OPENSSL_sk_vÆue
(
	`os¶_check_c⁄°_GENERAL_SUBTREE_sk_ty≥
(sk), (idx)))

	)

530 
	#sk_GENERAL_SUBTREE_√w
(
cmp
Ë((
	`STACK_OF
(
GENERAL_SUBTREE
Ë*)
	`OPENSSL_sk_√w
(
	`os¶_check_GENERAL_SUBTREE_compfunc_ty≥
(cmp)))

	)

531 
	#sk_GENERAL_SUBTREE_√w_nuŒ
(Ë((
	`STACK_OF
(
GENERAL_SUBTREE
Ë*)
	`OPENSSL_sk_√w_nuŒ
())

	)

532 
	#sk_GENERAL_SUBTREE_√w_ª£rve
(
cmp
, 
n
Ë((
	`STACK_OF
(
GENERAL_SUBTREE
Ë*)
	`OPENSSL_sk_√w_ª£rve
(
	`os¶_check_GENERAL_SUBTREE_compfunc_ty≥
(cmp), (n)))

	)

533 
	#sk_GENERAL_SUBTREE_ª£rve
(
sk
, 
n
Ë
	`OPENSSL_sk_ª£rve
(
	`os¶_check_GENERAL_SUBTREE_sk_ty≥
(sk), (n))

	)

534 
	#sk_GENERAL_SUBTREE_‰ì
(
sk
Ë
	`OPENSSL_sk_‰ì
(
	`os¶_check_GENERAL_SUBTREE_sk_ty≥
(sk))

	)

535 
	#sk_GENERAL_SUBTREE_zîo
(
sk
Ë
	`OPENSSL_sk_zîo
(
	`os¶_check_GENERAL_SUBTREE_sk_ty≥
(sk))

	)

536 
	#sk_GENERAL_SUBTREE_dñëe
(
sk
, 
i
Ë((
GENERAL_SUBTREE
 *)
	`OPENSSL_sk_dñëe
(
	`os¶_check_GENERAL_SUBTREE_sk_ty≥
(sk), (i)))

	)

537 
	#sk_GENERAL_SUBTREE_dñëe_±r
(
sk
, 
±r
Ë((
GENERAL_SUBTREE
 *)
	`OPENSSL_sk_dñëe_±r
(
	`os¶_check_GENERAL_SUBTREE_sk_ty≥
(sk), 
	`os¶_check_GENERAL_SUBTREE_ty≥
’å)))

	)

538 
	#sk_GENERAL_SUBTREE_push
(
sk
, 
±r
Ë
	`OPENSSL_sk_push
(
	`os¶_check_GENERAL_SUBTREE_sk_ty≥
(sk), 
	`os¶_check_GENERAL_SUBTREE_ty≥
’å))

	)

539 
	#sk_GENERAL_SUBTREE_unshi·
(
sk
, 
±r
Ë
	`OPENSSL_sk_unshi·
(
	`os¶_check_GENERAL_SUBTREE_sk_ty≥
(sk), 
	`os¶_check_GENERAL_SUBTREE_ty≥
’å))

	)

540 
	#sk_GENERAL_SUBTREE_p›
(
sk
Ë((
GENERAL_SUBTREE
 *)
	`OPENSSL_sk_p›
(
	`os¶_check_GENERAL_SUBTREE_sk_ty≥
(sk)))

	)

541 
	#sk_GENERAL_SUBTREE_shi·
(
sk
Ë((
GENERAL_SUBTREE
 *)
	`OPENSSL_sk_shi·
(
	`os¶_check_GENERAL_SUBTREE_sk_ty≥
(sk)))

	)

542 
	#sk_GENERAL_SUBTREE_p›_‰ì
(
sk
, 
‰ìfunc
Ë
	`OPENSSL_sk_p›_‰ì
(
	`os¶_check_GENERAL_SUBTREE_sk_ty≥
(sk),
	`os¶_check_GENERAL_SUBTREE_‰ìfunc_ty≥
(‰ìfunc))

	)

543 
	#sk_GENERAL_SUBTREE_ö£π
(
sk
, 
±r
, 
idx
Ë
	`OPENSSL_sk_ö£π
(
	`os¶_check_GENERAL_SUBTREE_sk_ty≥
(sk), 
	`os¶_check_GENERAL_SUBTREE_ty≥
’å), (idx))

	)

544 
	#sk_GENERAL_SUBTREE_£t
(
sk
, 
idx
, 
±r
Ë((
GENERAL_SUBTREE
 *)
	`OPENSSL_sk_£t
(
	`os¶_check_GENERAL_SUBTREE_sk_ty≥
(sk), (idx), 
	`os¶_check_GENERAL_SUBTREE_ty≥
’å)))

	)

545 
	#sk_GENERAL_SUBTREE_föd
(
sk
, 
±r
Ë
	`OPENSSL_sk_föd
(
	`os¶_check_GENERAL_SUBTREE_sk_ty≥
(sk), 
	`os¶_check_GENERAL_SUBTREE_ty≥
’å))

	)

546 
	#sk_GENERAL_SUBTREE_föd_ex
(
sk
, 
±r
Ë
	`OPENSSL_sk_föd_ex
(
	`os¶_check_GENERAL_SUBTREE_sk_ty≥
(sk), 
	`os¶_check_GENERAL_SUBTREE_ty≥
’å))

	)

547 
	#sk_GENERAL_SUBTREE_föd_Æl
(
sk
, 
±r
, 
≤um
Ë
	`OPENSSL_sk_föd_Æl
(
	`os¶_check_GENERAL_SUBTREE_sk_ty≥
(sk), 
	`os¶_check_GENERAL_SUBTREE_ty≥
’å),Önum)

	)

548 
	#sk_GENERAL_SUBTREE_s‹t
(
sk
Ë
	`OPENSSL_sk_s‹t
(
	`os¶_check_GENERAL_SUBTREE_sk_ty≥
(sk))

	)

549 
	#sk_GENERAL_SUBTREE_is_s‹ãd
(
sk
Ë
	`OPENSSL_sk_is_s‹ãd
(
	`os¶_check_c⁄°_GENERAL_SUBTREE_sk_ty≥
(sk))

	)

550 
	#sk_GENERAL_SUBTREE_dup
(
sk
Ë((
	`STACK_OF
(
GENERAL_SUBTREE
Ë*)
	`OPENSSL_sk_dup
(
	`os¶_check_c⁄°_GENERAL_SUBTREE_sk_ty≥
(sk)))

	)

551 
	#sk_GENERAL_SUBTREE_dìp_c›y
(
sk
, 
c›yfunc
, 
‰ìfunc
Ë((
	`STACK_OF
(
GENERAL_SUBTREE
Ë*)
	`OPENSSL_sk_dìp_c›y
(
	`os¶_check_c⁄°_GENERAL_SUBTREE_sk_ty≥
(sk), 
	`os¶_check_GENERAL_SUBTREE_c›yfunc_ty≥
(c›yfunc), 
	`os¶_check_GENERAL_SUBTREE_‰ìfunc_ty≥
(‰ìfunc)))

	)

552 
	#sk_GENERAL_SUBTREE_£t_cmp_func
(
sk
, 
cmp
Ë((
sk_GENERAL_SUBTREE_compfunc
)
	`OPENSSL_sk_£t_cmp_func
(
	`os¶_check_GENERAL_SUBTREE_sk_ty≥
(sk), 
	`os¶_check_GENERAL_SUBTREE_compfunc_ty≥
(cmp)))

	)

555 
	sNAME_CONSTRAINTS_°
 {

556 
STACK_OF
(
GENERAL_SUBTREE
Ë*
≥rmôãdSubåìs
;

557 
STACK_OF
(
GENERAL_SUBTREE
Ë*
ex˛udedSubåìs
;

560 
	sPOLICY_CONSTRAINTS_°
 {

561 
ASN1_INTEGER
 *
ªquúeEx∂icôPﬁicy
;

562 
ASN1_INTEGER
 *
öhibôPﬁicyM≠pög
;

563 } 
	tPOLICY_CONSTRAINTS
;

566 
	sPROXY_POLICY_°
 {

567 
ASN1_OBJECT
 *
pﬁicyL™guage
;

568 
ASN1_OCTET_STRING
 *
pﬁicy
;

569 } 
	tPROXY_POLICY
;

571 
	sPROXY_CERT_INFO_EXTENSION_°
 {

572 
ASN1_INTEGER
 *
pcP©hLígthC⁄°øöt
;

573 
PROXY_POLICY
 *
¥oxyPﬁicy
;

574 } 
	tPROXY_CERT_INFO_EXTENSION
;

576 
DECLARE_ASN1_FUNCTIONS
(
PROXY_POLICY
)

577 
DECLARE_ASN1_FUNCTIONS
(
PROXY_CERT_INFO_EXTENSION
)

579 
	sISSUING_DIST_POINT_°
 {

580 
DIST_POINT_NAME
 *
di°poöt
;

581 
⁄lyu£r
;

582 
⁄lyCA
;

583 
ASN1_BIT_STRING
 *
⁄lysomîós⁄s
;

584 
ödúe˘CRL
;

585 
⁄ly©å
;

590 
	#IDP_PRESENT
 0x1

	)

592 
	#IDP_INVALID
 0x2

	)

594 
	#IDP_ONLYUSER
 0x4

	)

596 
	#IDP_ONLYCA
 0x8

	)

598 
	#IDP_ONLYATTR
 0x10

	)

600 
	#IDP_INDIRECT
 0x20

	)

602 
	#IDP_REASONS
 0x40

	)

604 
	#X509V3_c⁄f_îr
(
vÆ
Ë
	`ERR_add_îr‹_d©a
(6, \

605 "£˘i⁄:", (
vÆ
)->
£˘i⁄
, \

606 ",«me:", (
vÆ
)->
«me
, ",vÆue:", (vÆ)->
vÆue
)

	)

608 
	#X509V3_£t_˘x_ã°
(
˘x
) \

609 
	`X509V3_£t_˘x
(
˘x
, 
NULL
, NULL, NULL, NULL, 
X509V3_CTX_TEST
)

	)

610 
	#X509V3_£t_˘x_nodb
(
˘x
Ë(˘x)->
db
 = 
NULL
;

	)

612 
	#EXT_BITSTRING
(
nid
, 
èbÀ
Ë{Çid, 0, 
	`ASN1_ITEM_ªf
(
ASN1_BIT_STRING
), \

615 (
X509V3_EXT_I2V
)
i2v_ASN1_BIT_STRING
, \

616 (
X509V3_EXT_V2I
)
v2i_ASN1_BIT_STRING
, \

617 
NULL
, NULL, \

618 
èbÀ
}

	)

620 
	#EXT_IA5STRING
(
nid
Ë{Çid, 0, 
	`ASN1_ITEM_ªf
(
ASN1_IA5STRING
), \

622 (
X509V3_EXT_I2S
)
i2s_ASN1_IA5STRING
, \

623 (
X509V3_EXT_S2I
)
s2i_ASN1_IA5STRING
, \

625 
NULL
}

	)

627 
	#EXT_UTF8STRING
(
nid
Ë{Çid, 0, 
	`ASN1_ITEM_ªf
(
ASN1_UTF8STRING
), \

629 (
X509V3_EXT_I2S
)
i2s_ASN1_UTF8STRING
, \

630 (
X509V3_EXT_S2I
)
s2i_ASN1_UTF8STRING
, \

632 
NULL
}

	)

634 
	#EXT_END
 { -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

	)

638 
	#EXFLAG_BCONS
 0x1

	)

639 
	#EXFLAG_KUSAGE
 0x2

	)

640 
	#EXFLAG_XKUSAGE
 0x4

	)

641 
	#EXFLAG_NSCERT
 0x8

	)

643 
	#EXFLAG_CA
 0x10

	)

644 
	#EXFLAG_SI
 0x20

	)

645 
	#EXFLAG_V1
 0x40

	)

646 
	#EXFLAG_INVALID
 0x80

	)

648 
	#EXFLAG_SET
 0x100

	)

649 
	#EXFLAG_CRITICAL
 0x200

	)

650 
	#EXFLAG_PROXY
 0x400

	)

652 
	#EXFLAG_INVALID_POLICY
 0x800

	)

653 
	#EXFLAG_FRESHEST
 0x1000

	)

654 
	#EXFLAG_SS
 0x2000

	)

656 
	#EXFLAG_BCONS_CRITICAL
 0x10000

	)

657 
	#EXFLAG_AKID_CRITICAL
 0x20000

	)

658 
	#EXFLAG_SKID_CRITICAL
 0x40000

	)

659 
	#EXFLAG_SAN_CRITICAL
 0x80000

	)

660 
	#EXFLAG_NO_FINGERPRINT
 0x100000

	)

662 
	#KU_DIGITAL_SIGNATURE
 0x0080

	)

663 
	#KU_NON_REPUDIATION
 0x0040

	)

664 
	#KU_KEY_ENCIPHERMENT
 0x0020

	)

665 
	#KU_DATA_ENCIPHERMENT
 0x0010

	)

666 
	#KU_KEY_AGREEMENT
 0x0008

	)

667 
	#KU_KEY_CERT_SIGN
 0x0004

	)

668 
	#KU_CRL_SIGN
 0x0002

	)

669 
	#KU_ENCIPHER_ONLY
 0x0001

	)

670 
	#KU_DECIPHER_ONLY
 0x8000

	)

672 
	#NS_SSL_CLIENT
 0x80

	)

673 
	#NS_SSL_SERVER
 0x40

	)

674 
	#NS_SMIME
 0x20

	)

675 
	#NS_OBJSIGN
 0x10

	)

676 
	#NS_SSL_CA
 0x04

	)

677 
	#NS_SMIME_CA
 0x02

	)

678 
	#NS_OBJSIGN_CA
 0x01

	)

679 
	#NS_ANY_CA
 (
NS_SSL_CA
|
NS_SMIME_CA
|
NS_OBJSIGN_CA
)

	)

681 
	#XKU_SSL_SERVER
 0x1

	)

682 
	#XKU_SSL_CLIENT
 0x2

	)

683 
	#XKU_SMIME
 0x4

	)

684 
	#XKU_CODE_SIGN
 0x8

	)

685 
	#XKU_SGC
 0x10

	)

686 
	#XKU_OCSP_SIGN
 0x20

	)

687 
	#XKU_TIMESTAMP
 0x40

	)

688 
	#XKU_DVCS
 0x80

	)

689 
	#XKU_ANYEKU
 0x100

	)

691 
	#X509_PURPOSE_DYNAMIC
 0x1

	)

692 
	#X509_PURPOSE_DYNAMIC_NAME
 0x2

	)

694 
	sx509_puΩo£_°
 {

695 
puΩo£
;

696 
åu°
;

697 
Êags
;

698 (*
check_puΩo£
Ë(c⁄° 
x509_puΩo£_°
 *, c⁄° 
X509
 *, );

699 *
«me
;

700 *
¢ame
;

701 *
u§_d©a
;

702 } 
	tX509_PURPOSE
;

704 
SKM_DEFINE_STACK_OF_INTERNAL
(
X509_PURPOSE
, X509_PURPOSE, X509_PURPOSE)

705 
	#sk_X509_PURPOSE_num
(
sk
Ë
	`OPENSSL_sk_num
(
	`os¶_check_c⁄°_X509_PURPOSE_sk_ty≥
(sk))

	)

706 
	#sk_X509_PURPOSE_vÆue
(
sk
, 
idx
Ë((
X509_PURPOSE
 *)
	`OPENSSL_sk_vÆue
(
	`os¶_check_c⁄°_X509_PURPOSE_sk_ty≥
(sk), (idx)))

	)

707 
	#sk_X509_PURPOSE_√w
(
cmp
Ë((
	`STACK_OF
(
X509_PURPOSE
Ë*)
	`OPENSSL_sk_√w
(
	`os¶_check_X509_PURPOSE_compfunc_ty≥
(cmp)))

	)

708 
	#sk_X509_PURPOSE_√w_nuŒ
(Ë((
	`STACK_OF
(
X509_PURPOSE
Ë*)
	`OPENSSL_sk_√w_nuŒ
())

	)

709 
	#sk_X509_PURPOSE_√w_ª£rve
(
cmp
, 
n
Ë((
	`STACK_OF
(
X509_PURPOSE
Ë*)
	`OPENSSL_sk_√w_ª£rve
(
	`os¶_check_X509_PURPOSE_compfunc_ty≥
(cmp), (n)))

	)

710 
	#sk_X509_PURPOSE_ª£rve
(
sk
, 
n
Ë
	`OPENSSL_sk_ª£rve
(
	`os¶_check_X509_PURPOSE_sk_ty≥
(sk), (n))

	)

711 
	#sk_X509_PURPOSE_‰ì
(
sk
Ë
	`OPENSSL_sk_‰ì
(
	`os¶_check_X509_PURPOSE_sk_ty≥
(sk))

	)

712 
	#sk_X509_PURPOSE_zîo
(
sk
Ë
	`OPENSSL_sk_zîo
(
	`os¶_check_X509_PURPOSE_sk_ty≥
(sk))

	)

713 
	#sk_X509_PURPOSE_dñëe
(
sk
, 
i
Ë((
X509_PURPOSE
 *)
	`OPENSSL_sk_dñëe
(
	`os¶_check_X509_PURPOSE_sk_ty≥
(sk), (i)))

	)

714 
	#sk_X509_PURPOSE_dñëe_±r
(
sk
, 
±r
Ë((
X509_PURPOSE
 *)
	`OPENSSL_sk_dñëe_±r
(
	`os¶_check_X509_PURPOSE_sk_ty≥
(sk), 
	`os¶_check_X509_PURPOSE_ty≥
’å)))

	)

715 
	#sk_X509_PURPOSE_push
(
sk
, 
±r
Ë
	`OPENSSL_sk_push
(
	`os¶_check_X509_PURPOSE_sk_ty≥
(sk), 
	`os¶_check_X509_PURPOSE_ty≥
’å))

	)

716 
	#sk_X509_PURPOSE_unshi·
(
sk
, 
±r
Ë
	`OPENSSL_sk_unshi·
(
	`os¶_check_X509_PURPOSE_sk_ty≥
(sk), 
	`os¶_check_X509_PURPOSE_ty≥
’å))

	)

717 
	#sk_X509_PURPOSE_p›
(
sk
Ë((
X509_PURPOSE
 *)
	`OPENSSL_sk_p›
(
	`os¶_check_X509_PURPOSE_sk_ty≥
(sk)))

	)

718 
	#sk_X509_PURPOSE_shi·
(
sk
Ë((
X509_PURPOSE
 *)
	`OPENSSL_sk_shi·
(
	`os¶_check_X509_PURPOSE_sk_ty≥
(sk)))

	)

719 
	#sk_X509_PURPOSE_p›_‰ì
(
sk
, 
‰ìfunc
Ë
	`OPENSSL_sk_p›_‰ì
(
	`os¶_check_X509_PURPOSE_sk_ty≥
(sk),
	`os¶_check_X509_PURPOSE_‰ìfunc_ty≥
(‰ìfunc))

	)

720 
	#sk_X509_PURPOSE_ö£π
(
sk
, 
±r
, 
idx
Ë
	`OPENSSL_sk_ö£π
(
	`os¶_check_X509_PURPOSE_sk_ty≥
(sk), 
	`os¶_check_X509_PURPOSE_ty≥
’å), (idx))

	)

721 
	#sk_X509_PURPOSE_£t
(
sk
, 
idx
, 
±r
Ë((
X509_PURPOSE
 *)
	`OPENSSL_sk_£t
(
	`os¶_check_X509_PURPOSE_sk_ty≥
(sk), (idx), 
	`os¶_check_X509_PURPOSE_ty≥
’å)))

	)

722 
	#sk_X509_PURPOSE_föd
(
sk
, 
±r
Ë
	`OPENSSL_sk_föd
(
	`os¶_check_X509_PURPOSE_sk_ty≥
(sk), 
	`os¶_check_X509_PURPOSE_ty≥
’å))

	)

723 
	#sk_X509_PURPOSE_föd_ex
(
sk
, 
±r
Ë
	`OPENSSL_sk_föd_ex
(
	`os¶_check_X509_PURPOSE_sk_ty≥
(sk), 
	`os¶_check_X509_PURPOSE_ty≥
’å))

	)

724 
	#sk_X509_PURPOSE_föd_Æl
(
sk
, 
±r
, 
≤um
Ë
	`OPENSSL_sk_föd_Æl
(
	`os¶_check_X509_PURPOSE_sk_ty≥
(sk), 
	`os¶_check_X509_PURPOSE_ty≥
’å),Önum)

	)

725 
	#sk_X509_PURPOSE_s‹t
(
sk
Ë
	`OPENSSL_sk_s‹t
(
	`os¶_check_X509_PURPOSE_sk_ty≥
(sk))

	)

726 
	#sk_X509_PURPOSE_is_s‹ãd
(
sk
Ë
	`OPENSSL_sk_is_s‹ãd
(
	`os¶_check_c⁄°_X509_PURPOSE_sk_ty≥
(sk))

	)

727 
	#sk_X509_PURPOSE_dup
(
sk
Ë((
	`STACK_OF
(
X509_PURPOSE
Ë*)
	`OPENSSL_sk_dup
(
	`os¶_check_c⁄°_X509_PURPOSE_sk_ty≥
(sk)))

	)

728 
	#sk_X509_PURPOSE_dìp_c›y
(
sk
, 
c›yfunc
, 
‰ìfunc
Ë((
	`STACK_OF
(
X509_PURPOSE
Ë*)
	`OPENSSL_sk_dìp_c›y
(
	`os¶_check_c⁄°_X509_PURPOSE_sk_ty≥
(sk), 
	`os¶_check_X509_PURPOSE_c›yfunc_ty≥
(c›yfunc), 
	`os¶_check_X509_PURPOSE_‰ìfunc_ty≥
(‰ìfunc)))

	)

729 
	#sk_X509_PURPOSE_£t_cmp_func
(
sk
, 
cmp
Ë((
sk_X509_PURPOSE_compfunc
)
	`OPENSSL_sk_£t_cmp_func
(
	`os¶_check_X509_PURPOSE_sk_ty≥
(sk), 
	`os¶_check_X509_PURPOSE_compfunc_ty≥
(cmp)))

	)

733 
	#X509_PURPOSE_SSL_CLIENT
 1

	)

734 
	#X509_PURPOSE_SSL_SERVER
 2

	)

735 
	#X509_PURPOSE_NS_SSL_SERVER
 3

	)

736 
	#X509_PURPOSE_SMIME_SIGN
 4

	)

737 
	#X509_PURPOSE_SMIME_ENCRYPT
 5

	)

738 
	#X509_PURPOSE_CRL_SIGN
 6

	)

739 
	#X509_PURPOSE_ANY
 7

	)

740 
	#X509_PURPOSE_OCSP_HELPER
 8

	)

741 
	#X509_PURPOSE_TIMESTAMP_SIGN
 9

	)

743 
	#X509_PURPOSE_MIN
 1

	)

744 
	#X509_PURPOSE_MAX
 9

	)

748 
	#X509V3_EXT_UNKNOWN_MASK
 (0xfL << 16)

	)

750 
	#X509V3_EXT_DEFAULT
 0

	)

752 
	#X509V3_EXT_ERROR_UNKNOWN
 (1L << 16)

	)

754 
	#X509V3_EXT_PARSE_UNKNOWN
 (2L << 16)

	)

756 
	#X509V3_EXT_DUMP_UNKNOWN
 (3L << 16)

	)

760 
	#X509V3_ADD_OP_MASK
 0xfL

	)

761 
	#X509V3_ADD_DEFAULT
 0L

	)

762 
	#X509V3_ADD_APPEND
 1L

	)

763 
	#X509V3_ADD_REPLACE
 2L

	)

764 
	#X509V3_ADD_REPLACE_EXISTING
 3L

	)

765 
	#X509V3_ADD_KEEP_EXISTING
 4L

	)

766 
	#X509V3_ADD_DELETE
 5L

	)

767 
	#X509V3_ADD_SILENT
 0x10

	)

769 
DECLARE_ASN1_FUNCTIONS
(
BASIC_CONSTRAINTS
)

771 
DECLARE_ASN1_FUNCTIONS
(
SXNET
)

772 
DECLARE_ASN1_FUNCTIONS
(
SXNETID
)

774 
DECLARE_ASN1_FUNCTIONS
(
ISSUER_SIGN_TOOL
)

776 
SXNET_add_id_asc
(
SXNET
 **
psx
, c⁄° *
z⁄e
, c⁄° *
u£r
, 
u£æí
);

777 
SXNET_add_id_ul⁄g
(
SXNET
 **
psx
, 
lz⁄e
, c⁄° *
u£r
,

778 
u£æí
);

779 
SXNET_add_id_INTEGER
(
SXNET
 **
psx
, 
ASN1_INTEGER
 *
iz⁄e
, c⁄° *
u£r
,

780 
u£æí
);

782 
ASN1_OCTET_STRING
 *
SXNET_gë_id_asc
(
SXNET
 *
sx
, c⁄° *
z⁄e
);

783 
ASN1_OCTET_STRING
 *
SXNET_gë_id_ul⁄g
(
SXNET
 *
sx
, 
lz⁄e
);

784 
ASN1_OCTET_STRING
 *
SXNET_gë_id_INTEGER
(
SXNET
 *
sx
, 
ASN1_INTEGER
 *
z⁄e
);

786 
DECLARE_ASN1_FUNCTIONS
(
AUTHORITY_KEYID
)

788 
DECLARE_ASN1_FUNCTIONS
(
PKEY_USAGE_PERIOD
)

790 
DECLARE_ASN1_FUNCTIONS
(
GENERAL_NAME
)

791 
DECLARE_ASN1_DUP_FUNCTION
(
GENERAL_NAME
)

792 
GENERAL_NAME_cmp
(
GENERAL_NAME
 *
a
, GENERAL_NAME *
b
);

794 
ASN1_BIT_STRING
 *
v2i_ASN1_BIT_STRING
(
X509V3_EXT_METHOD
 *
mëhod
,

795 
X509V3_CTX
 *
˘x
,

796 
STACK_OF
(
CONF_VALUE
Ë*
nvÆ
);

797 
STACK_OF
(
CONF_VALUE
Ë*
i2v_ASN1_BIT_STRING
(
X509V3_EXT_METHOD
 *
mëhod
,

798 
ASN1_BIT_STRING
 *
bôs
,

799 
STACK_OF
(
CONF_VALUE
Ë*
exéi°
);

800 *
i2s_ASN1_IA5STRING
(
X509V3_EXT_METHOD
 *
mëhod
, 
ASN1_IA5STRING
 *
ü5
);

801 
ASN1_IA5STRING
 *
s2i_ASN1_IA5STRING
(
X509V3_EXT_METHOD
 *
mëhod
,

802 
X509V3_CTX
 *
˘x
, c⁄° *
°r
);

803 *
i2s_ASN1_UTF8STRING
(
X509V3_EXT_METHOD
 *
mëhod
, 
ASN1_UTF8STRING
 *
utf8
);

804 
ASN1_UTF8STRING
 *
s2i_ASN1_UTF8STRING
(
X509V3_EXT_METHOD
 *
mëhod
,

805 
X509V3_CTX
 *
˘x
, c⁄° *
°r
);

807 
STACK_OF
(
CONF_VALUE
Ë*
i2v_GENERAL_NAME
(
X509V3_EXT_METHOD
 *
mëhod
,

808 
GENERAL_NAME
 *
gí
,

809 
STACK_OF
(
CONF_VALUE
Ë*
ªt
);

810 
GENERAL_NAME_¥öt
(
BIO
 *
out
, 
GENERAL_NAME
 *
gí
);

812 
DECLARE_ASN1_FUNCTIONS
(
GENERAL_NAMES
)

814 
STACK_OF
(
CONF_VALUE
Ë*
i2v_GENERAL_NAMES
(
X509V3_EXT_METHOD
 *
mëhod
,

815 
GENERAL_NAMES
 *
gí
,

816 
STACK_OF
(
CONF_VALUE
Ë*
exéi°
);

817 
GENERAL_NAMES
 *
v2i_GENERAL_NAMES
(c⁄° 
X509V3_EXT_METHOD
 *
mëhod
,

818 
X509V3_CTX
 *
˘x
, 
STACK_OF
(
CONF_VALUE
Ë*
nvÆ
);

820 
DECLARE_ASN1_FUNCTIONS
(
OTHERNAME
)

821 
DECLARE_ASN1_FUNCTIONS
(
EDIPARTYNAME
)

822 
OTHERNAME_cmp
(
OTHERNAME
 *
a
, OTHERNAME *
b
);

823 
GENERAL_NAME_£t0_vÆue
(
GENERAL_NAME
 *
a
, 
ty≥
, *
vÆue
);

824 *
GENERAL_NAME_gë0_vÆue
(c⁄° 
GENERAL_NAME
 *
a
, *
±y≥
);

825 
GENERAL_NAME_£t0_Ÿhî«me
(
GENERAL_NAME
 *
gí
,

826 
ASN1_OBJECT
 *
oid
, 
ASN1_TYPE
 *
vÆue
);

827 
GENERAL_NAME_gë0_ŸhîName
(c⁄° 
GENERAL_NAME
 *
gí
,

828 
ASN1_OBJECT
 **
poid
, 
ASN1_TYPE
 **
pvÆue
);

830 *
i2s_ASN1_OCTET_STRING
(
X509V3_EXT_METHOD
 *
mëhod
,

831 c⁄° 
ASN1_OCTET_STRING
 *
ü5
);

832 
ASN1_OCTET_STRING
 *
s2i_ASN1_OCTET_STRING
(
X509V3_EXT_METHOD
 *
mëhod
,

833 
X509V3_CTX
 *
˘x
, c⁄° *
°r
);

835 
DECLARE_ASN1_FUNCTIONS
(
EXTENDED_KEY_USAGE
)

836 
i2a_ACCESS_DESCRIPTION
(
BIO
 *
bp
, c⁄° 
ACCESS_DESCRIPTION
 *
a
);

838 
DECLARE_ASN1_ALLOC_FUNCTIONS
(
TLS_FEATURE
)

840 
DECLARE_ASN1_FUNCTIONS
(
CERTIFICATEPOLICIES
)

841 
DECLARE_ASN1_FUNCTIONS
(
POLICYINFO
)

842 
DECLARE_ASN1_FUNCTIONS
(
POLICYQUALINFO
)

843 
DECLARE_ASN1_FUNCTIONS
(
USERNOTICE
)

844 
DECLARE_ASN1_FUNCTIONS
(
NOTICEREF
)

846 
DECLARE_ASN1_FUNCTIONS
(
CRL_DIST_POINTS
)

847 
DECLARE_ASN1_FUNCTIONS
(
DIST_POINT
)

848 
DECLARE_ASN1_FUNCTIONS
(
DIST_POINT_NAME
)

849 
DECLARE_ASN1_FUNCTIONS
(
ISSUING_DIST_POINT
)

851 
DIST_POINT_£t_d≤ame
(
DIST_POINT_NAME
 *
d≤
, c⁄° 
X509_NAME
 *
öame
);

853 
NAME_CONSTRAINTS_check
(
X509
 *
x
, 
NAME_CONSTRAINTS
 *
nc
);

854 
NAME_CONSTRAINTS_check_CN
(
X509
 *
x
, 
NAME_CONSTRAINTS
 *
nc
);

856 
DECLARE_ASN1_FUNCTIONS
(
ACCESS_DESCRIPTION
)

857 
DECLARE_ASN1_FUNCTIONS
(
AUTHORITY_INFO_ACCESS
)

859 
DECLARE_ASN1_ITEM
(
POLICY_MAPPING
)

860 
DECLARE_ASN1_ALLOC_FUNCTIONS
(
POLICY_MAPPING
)

861 
DECLARE_ASN1_ITEM
(
POLICY_MAPPINGS
)

863 
DECLARE_ASN1_ITEM
(
GENERAL_SUBTREE
)

864 
DECLARE_ASN1_ALLOC_FUNCTIONS
(
GENERAL_SUBTREE
)

866 
DECLARE_ASN1_ITEM
(
NAME_CONSTRAINTS
)

867 
DECLARE_ASN1_ALLOC_FUNCTIONS
(
NAME_CONSTRAINTS
)

869 
DECLARE_ASN1_ALLOC_FUNCTIONS
(
POLICY_CONSTRAINTS
)

870 
DECLARE_ASN1_ITEM
(
POLICY_CONSTRAINTS
)

872 
GENERAL_NAME
 *
a2i_GENERAL_NAME
(GENERAL_NAME *
out
,

873 c⁄° 
X509V3_EXT_METHOD
 *
mëhod
,

874 
X509V3_CTX
 *
˘x
, 
gí_ty≥
,

875 c⁄° *
vÆue
, 
is_nc
);

877 #ifde‡
OPENSSL_CONF_H


878 
GENERAL_NAME
 *
v2i_GENERAL_NAME
(c⁄° 
X509V3_EXT_METHOD
 *
mëhod
,

879 
X509V3_CTX
 *
˘x
, 
CONF_VALUE
 *
˙f
);

880 
GENERAL_NAME
 *
v2i_GENERAL_NAME_ex
(GENERAL_NAME *
out
,

881 c⁄° 
X509V3_EXT_METHOD
 *
mëhod
,

882 
X509V3_CTX
 *
˘x
, 
CONF_VALUE
 *
˙f
,

883 
is_nc
);

885 
X509V3_c⁄f_‰ì
(
CONF_VALUE
 *
vÆ
);

887 
X509_EXTENSION
 *
X509V3_EXT_nc⁄f_nid
(
CONF
 *
c⁄f
, 
X509V3_CTX
 *
˘x
, 
ext_nid
,

888 c⁄° *
vÆue
);

889 
X509_EXTENSION
 *
X509V3_EXT_nc⁄f
(
CONF
 *
c⁄f
, 
X509V3_CTX
 *
˘x
, c⁄° *
«me
,

890 c⁄° *
vÆue
);

891 
X509V3_EXT_add_nc⁄f_sk
(
CONF
 *
c⁄f
, 
X509V3_CTX
 *
˘x
, c⁄° *
£˘i⁄
,

892 
STACK_OF
(
X509_EXTENSION
Ë**
sk
);

893 
X509V3_EXT_add_nc⁄f
(
CONF
 *
c⁄f
, 
X509V3_CTX
 *
˘x
, c⁄° *
£˘i⁄
,

894 
X509
 *
˚π
);

895 
X509V3_EXT_REQ_add_nc⁄f
(
CONF
 *
c⁄f
, 
X509V3_CTX
 *
˘x
, c⁄° *
£˘i⁄
,

896 
X509_REQ
 *
ªq
);

897 
X509V3_EXT_CRL_add_nc⁄f
(
CONF
 *
c⁄f
, 
X509V3_CTX
 *
˘x
, c⁄° *
£˘i⁄
,

898 
X509_CRL
 *
¸l
);

900 
X509_EXTENSION
 *
X509V3_EXT_c⁄f_nid
(
LHASH_OF
(
CONF_VALUE
Ë*
c⁄f
,

901 
X509V3_CTX
 *
˘x
, 
ext_nid
,

902 c⁄° *
vÆue
);

903 
X509_EXTENSION
 *
X509V3_EXT_c⁄f
(
LHASH_OF
(
CONF_VALUE
Ë*
c⁄f
, 
X509V3_CTX
 *
˘x
,

904 c⁄° *
«me
, c⁄° *
vÆue
);

905 
X509V3_EXT_add_c⁄f
(
LHASH_OF
(
CONF_VALUE
Ë*
c⁄f
, 
X509V3_CTX
 *
˘x
,

906 c⁄° *
£˘i⁄
, 
X509
 *
˚π
);

907 
X509V3_EXT_REQ_add_c⁄f
(
LHASH_OF
(
CONF_VALUE
Ë*
c⁄f
, 
X509V3_CTX
 *
˘x
,

908 c⁄° *
£˘i⁄
, 
X509_REQ
 *
ªq
);

909 
X509V3_EXT_CRL_add_c⁄f
(
LHASH_OF
(
CONF_VALUE
Ë*
c⁄f
, 
X509V3_CTX
 *
˘x
,

910 c⁄° *
£˘i⁄
, 
X509_CRL
 *
¸l
);

912 
X509V3_add_vÆue_boﬁ_nf
(c⁄° *
«me
, 
a¢1_boﬁ
,

913 
STACK_OF
(
CONF_VALUE
Ë**
exéi°
);

914 
X509V3_gë_vÆue_boﬁ
(c⁄° 
CONF_VALUE
 *
vÆue
, *
a¢1_boﬁ
);

915 
X509V3_gë_vÆue_öt
(c⁄° 
CONF_VALUE
 *
vÆue
, 
ASN1_INTEGER
 **
aöt
);

916 
X509V3_£t_nc⁄f
(
X509V3_CTX
 *
˘x
, 
CONF
 *
c⁄f
);

917 
X509V3_£t_c⁄f_lhash
(
X509V3_CTX
 *
˘x
, 
LHASH_OF
(
CONF_VALUE
Ë*
lhash
);

920 *
X509V3_gë_°rög
(
X509V3_CTX
 *
˘x
, c⁄° *
«me
, c⁄° *
£˘i⁄
);

921 
STACK_OF
(
CONF_VALUE
Ë*
X509V3_gë_£˘i⁄
(
X509V3_CTX
 *
˘x
, c⁄° *
£˘i⁄
);

922 
X509V3_°rög_‰ì
(
X509V3_CTX
 *
˘x
, *
°r
);

923 
X509V3_£˘i⁄_‰ì
(
X509V3_CTX
 *
˘x
, 
STACK_OF
(
CONF_VALUE
Ë*
£˘i⁄
);

924 
X509V3_£t_˘x
(
X509V3_CTX
 *
˘x
, 
X509
 *
issuî
, X509 *
subje˘
,

925 
X509_REQ
 *
ªq
, 
X509_CRL
 *
¸l
, 
Êags
);

927 
X509V3_£t_issuî_pkey
(
X509V3_CTX
 *
˘x
, 
EVP_PKEY
 *
pkey
);

929 
X509V3_add_vÆue
(c⁄° *
«me
, c⁄° *
vÆue
,

930 
STACK_OF
(
CONF_VALUE
Ë**
exéi°
);

931 
X509V3_add_vÆue_uch¨
(c⁄° *
«me
, c⁄° *
vÆue
,

932 
STACK_OF
(
CONF_VALUE
Ë**
exéi°
);

933 
X509V3_add_vÆue_boﬁ
(c⁄° *
«me
, 
a¢1_boﬁ
,

934 
STACK_OF
(
CONF_VALUE
Ë**
exéi°
);

935 
X509V3_add_vÆue_öt
(c⁄° *
«me
, c⁄° 
ASN1_INTEGER
 *
aöt
,

936 
STACK_OF
(
CONF_VALUE
Ë**
exéi°
);

937 *
i2s_ASN1_INTEGER
(
X509V3_EXT_METHOD
 *
mëh
, c⁄° 
ASN1_INTEGER
 *
aöt
);

938 
ASN1_INTEGER
 *
s2i_ASN1_INTEGER
(
X509V3_EXT_METHOD
 *
mëh
, c⁄° *
vÆue
);

939 *
i2s_ASN1_ENUMERATED
(
X509V3_EXT_METHOD
 *
mëh
, c⁄° 
ASN1_ENUMERATED
 *
aöt
);

940 *
i2s_ASN1_ENUMERATED_TABLE
(
X509V3_EXT_METHOD
 *
mëh
,

941 c⁄° 
ASN1_ENUMERATED
 *
aöt
);

942 
X509V3_EXT_add
(
X509V3_EXT_METHOD
 *
ext
);

943 
X509V3_EXT_add_li°
(
X509V3_EXT_METHOD
 *
exéi°
);

944 
X509V3_EXT_add_Æüs
(
nid_to
, 
nid_‰om
);

945 
X509V3_EXT_˛ónup
();

947 c⁄° 
X509V3_EXT_METHOD
 *
X509V3_EXT_gë
(
X509_EXTENSION
 *
ext
);

948 c⁄° 
X509V3_EXT_METHOD
 *
X509V3_EXT_gë_nid
(
nid
);

949 
X509V3_add_°™d¨d_exãnsi⁄s
();

950 
STACK_OF
(
CONF_VALUE
Ë*
X509V3_∑r£_li°
(c⁄° *
löe
);

951 *
X509V3_EXT_d2i
(
X509_EXTENSION
 *
ext
);

952 *
X509V3_gë_d2i
(c⁄° 
STACK_OF
(
X509_EXTENSION
Ë*
x
, 
nid
, *
¸ô
,

953 *
idx
);

955 
X509_EXTENSION
 *
X509V3_EXT_i2d
(
ext_nid
, 
¸ô
, *
ext_°ruc
);

956 
X509V3_add1_i2d
(
STACK_OF
(
X509_EXTENSION
Ë**
x
, 
nid
, *
vÆue
,

957 
¸ô
, 
Êags
);

959 #i‚de‡
OPENSSL_NO_DEPRECATED_1_1_0


961 
	#hex_to_°rög
 
OPENSSL_buf2hex°r


	)

962 
	#°rög_to_hex
 
OPENSSL_hex°r2buf


	)

965 
X509V3_EXT_vÆ_¥n
(
BIO
 *
out
, 
STACK_OF
(
CONF_VALUE
Ë*
vÆ
, 
ödít
,

966 
ml
);

967 
X509V3_EXT_¥öt
(
BIO
 *
out
, 
X509_EXTENSION
 *
ext
, 
Êag
,

968 
ödít
);

969 #i‚de‡
OPENSSL_NO_STDIO


970 
X509V3_EXT_¥öt_Â
(
FILE
 *
out
, 
X509_EXTENSION
 *
ext
, 
Êag
, 
ödít
);

972 
X509V3_exãnsi⁄s_¥öt
(
BIO
 *
out
, c⁄° *
tôÀ
,

973 c⁄° 
STACK_OF
(
X509_EXTENSION
Ë*
exts
,

974 
Êag
, 
ödít
);

976 
X509_check_ˇ
(
X509
 *
x
);

977 
X509_check_puΩo£
(
X509
 *
x
, 
id
, 
ˇ
);

978 
X509_suµ‹ãd_exãnsi⁄
(
X509_EXTENSION
 *
ex
);

979 
X509_PURPOSE_£t
(*
p
, 
puΩo£
);

980 
X509_check_issued
(
X509
 *
issuî
, X509 *
subje˘
);

981 
X509_check_akid
(c⁄° 
X509
 *
issuî
, c⁄° 
AUTHORITY_KEYID
 *
akid
);

982 
X509_£t_¥oxy_Êag
(
X509
 *
x
);

983 
X509_£t_¥oxy_∑thÀn
(
X509
 *
x
, 
l
);

984 
X509_gë_¥oxy_∑thÀn
(
X509
 *
x
);

986 
uöt32_t
 
X509_gë_exãnsi⁄_Êags
(
X509
 *
x
);

987 
uöt32_t
 
X509_gë_key_ußge
(
X509
 *
x
);

988 
uöt32_t
 
X509_gë_exãnded_key_ußge
(
X509
 *
x
);

989 c⁄° 
ASN1_OCTET_STRING
 *
X509_gë0_subje˘_key_id
(
X509
 *
x
);

990 c⁄° 
ASN1_OCTET_STRING
 *
X509_gë0_auth‹ôy_key_id
(
X509
 *
x
);

991 c⁄° 
GENERAL_NAMES
 *
X509_gë0_auth‹ôy_issuî
(
X509
 *
x
);

992 c⁄° 
ASN1_INTEGER
 *
X509_gë0_auth‹ôy_£rül
(
X509
 *
x
);

994 
X509_PURPOSE_gë_cou¡
();

995 
X509_PURPOSE
 *
X509_PURPOSE_gë0
(
idx
);

996 
X509_PURPOSE_gë_by_¢ame
(c⁄° *
¢ame
);

997 
X509_PURPOSE_gë_by_id
(
id
);

998 
X509_PURPOSE_add
(
id
, 
åu°
, 
Êags
,

999 (*
ck
Ë(c⁄° 
X509_PURPOSE
 *, c⁄° 
X509
 *, ),

1000 c⁄° *
«me
, c⁄° *
¢ame
, *
¨g
);

1001 *
X509_PURPOSE_gë0_«me
(c⁄° 
X509_PURPOSE
 *
xp
);

1002 *
X509_PURPOSE_gë0_¢ame
(c⁄° 
X509_PURPOSE
 *
xp
);

1003 
X509_PURPOSE_gë_åu°
(c⁄° 
X509_PURPOSE
 *
xp
);

1004 
X509_PURPOSE_˛ónup
();

1005 
X509_PURPOSE_gë_id
(c⁄° 
X509_PURPOSE
 *);

1007 
STACK_OF
(
OPENSSL_STRING
Ë*
X509_gë1_emaû
(
X509
 *
x
);

1008 
STACK_OF
(
OPENSSL_STRING
Ë*
X509_REQ_gë1_emaû
(
X509_REQ
 *
x
);

1009 
X509_emaû_‰ì
(
STACK_OF
(
OPENSSL_STRING
Ë*
sk
);

1010 
STACK_OF
(
OPENSSL_STRING
Ë*
X509_gë1_oc•
(
X509
 *
x
);

1016 
	#X509_CHECK_FLAG_ALWAYS_CHECK_SUBJECT
 0x1

	)

1018 
	#X509_CHECK_FLAG_NO_WILDCARDS
 0x2

	)

1020 
	#X509_CHECK_FLAG_NO_PARTIAL_WILDCARDS
 0x4

	)

1022 
	#X509_CHECK_FLAG_MULTI_LABEL_WILDCARDS
 0x8

	)

1024 
	#X509_CHECK_FLAG_SINGLE_LABEL_SUBDOMAINS
 0x10

	)

1026 
	#X509_CHECK_FLAG_NEVER_CHECK_SUBJECT
 0x20

	)

1032 
	#_X509_CHECK_FLAG_DOT_SUBDOMAINS
 0x8000

	)

1034 
X509_check_ho°
(
X509
 *
x
, c⁄° *
chk
, 
size_t
 
chkÀn
,

1035 
Êags
, **
≥î«me
);

1036 
X509_check_emaû
(
X509
 *
x
, c⁄° *
chk
, 
size_t
 
chkÀn
,

1037 
Êags
);

1038 
X509_check_ù
(
X509
 *
x
, c⁄° *
chk
, 
size_t
 
chkÀn
,

1039 
Êags
);

1040 
X509_check_ù_asc
(
X509
 *
x
, c⁄° *
ùasc
, 
Êags
);

1042 
ASN1_OCTET_STRING
 *
a2i_IPADDRESS
(c⁄° *
ùasc
);

1043 
ASN1_OCTET_STRING
 *
a2i_IPADDRESS_NC
(c⁄° *
ùasc
);

1044 
X509V3_NAME_‰om_£˘i⁄
(
X509_NAME
 *
nm
, 
STACK_OF
(
CONF_VALUE
Ë*
dn_sk
,

1045 
chty≥
);

1047 
X509_POLICY_NODE_¥öt
(
BIO
 *
out
, 
X509_POLICY_NODE
 *
node
, 
ödít
);

1048 
SKM_DEFINE_STACK_OF_INTERNAL
(
X509_POLICY_NODE
, X509_POLICY_NODE, X509_POLICY_NODE)

1049 
	#sk_X509_POLICY_NODE_num
(
sk
Ë
	`OPENSSL_sk_num
(
	`os¶_check_c⁄°_X509_POLICY_NODE_sk_ty≥
(sk))

	)

1050 
	#sk_X509_POLICY_NODE_vÆue
(
sk
, 
idx
Ë((
X509_POLICY_NODE
 *)
	`OPENSSL_sk_vÆue
(
	`os¶_check_c⁄°_X509_POLICY_NODE_sk_ty≥
(sk), (idx)))

	)

1051 
	#sk_X509_POLICY_NODE_√w
(
cmp
Ë((
	`STACK_OF
(
X509_POLICY_NODE
Ë*)
	`OPENSSL_sk_√w
(
	`os¶_check_X509_POLICY_NODE_compfunc_ty≥
(cmp)))

	)

1052 
	#sk_X509_POLICY_NODE_√w_nuŒ
(Ë((
	`STACK_OF
(
X509_POLICY_NODE
Ë*)
	`OPENSSL_sk_√w_nuŒ
())

	)

1053 
	#sk_X509_POLICY_NODE_√w_ª£rve
(
cmp
, 
n
Ë((
	`STACK_OF
(
X509_POLICY_NODE
Ë*)
	`OPENSSL_sk_√w_ª£rve
(
	`os¶_check_X509_POLICY_NODE_compfunc_ty≥
(cmp), (n)))

	)

1054 
	#sk_X509_POLICY_NODE_ª£rve
(
sk
, 
n
Ë
	`OPENSSL_sk_ª£rve
(
	`os¶_check_X509_POLICY_NODE_sk_ty≥
(sk), (n))

	)

1055 
	#sk_X509_POLICY_NODE_‰ì
(
sk
Ë
	`OPENSSL_sk_‰ì
(
	`os¶_check_X509_POLICY_NODE_sk_ty≥
(sk))

	)

1056 
	#sk_X509_POLICY_NODE_zîo
(
sk
Ë
	`OPENSSL_sk_zîo
(
	`os¶_check_X509_POLICY_NODE_sk_ty≥
(sk))

	)

1057 
	#sk_X509_POLICY_NODE_dñëe
(
sk
, 
i
Ë((
X509_POLICY_NODE
 *)
	`OPENSSL_sk_dñëe
(
	`os¶_check_X509_POLICY_NODE_sk_ty≥
(sk), (i)))

	)

1058 
	#sk_X509_POLICY_NODE_dñëe_±r
(
sk
, 
±r
Ë((
X509_POLICY_NODE
 *)
	`OPENSSL_sk_dñëe_±r
(
	`os¶_check_X509_POLICY_NODE_sk_ty≥
(sk), 
	`os¶_check_X509_POLICY_NODE_ty≥
’å)))

	)

1059 
	#sk_X509_POLICY_NODE_push
(
sk
, 
±r
Ë
	`OPENSSL_sk_push
(
	`os¶_check_X509_POLICY_NODE_sk_ty≥
(sk), 
	`os¶_check_X509_POLICY_NODE_ty≥
’å))

	)

1060 
	#sk_X509_POLICY_NODE_unshi·
(
sk
, 
±r
Ë
	`OPENSSL_sk_unshi·
(
	`os¶_check_X509_POLICY_NODE_sk_ty≥
(sk), 
	`os¶_check_X509_POLICY_NODE_ty≥
’å))

	)

1061 
	#sk_X509_POLICY_NODE_p›
(
sk
Ë((
X509_POLICY_NODE
 *)
	`OPENSSL_sk_p›
(
	`os¶_check_X509_POLICY_NODE_sk_ty≥
(sk)))

	)

1062 
	#sk_X509_POLICY_NODE_shi·
(
sk
Ë((
X509_POLICY_NODE
 *)
	`OPENSSL_sk_shi·
(
	`os¶_check_X509_POLICY_NODE_sk_ty≥
(sk)))

	)

1063 
	#sk_X509_POLICY_NODE_p›_‰ì
(
sk
, 
‰ìfunc
Ë
	`OPENSSL_sk_p›_‰ì
(
	`os¶_check_X509_POLICY_NODE_sk_ty≥
(sk),
	`os¶_check_X509_POLICY_NODE_‰ìfunc_ty≥
(‰ìfunc))

	)

1064 
	#sk_X509_POLICY_NODE_ö£π
(
sk
, 
±r
, 
idx
Ë
	`OPENSSL_sk_ö£π
(
	`os¶_check_X509_POLICY_NODE_sk_ty≥
(sk), 
	`os¶_check_X509_POLICY_NODE_ty≥
’å), (idx))

	)

1065 
	#sk_X509_POLICY_NODE_£t
(
sk
, 
idx
, 
±r
Ë((
X509_POLICY_NODE
 *)
	`OPENSSL_sk_£t
(
	`os¶_check_X509_POLICY_NODE_sk_ty≥
(sk), (idx), 
	`os¶_check_X509_POLICY_NODE_ty≥
’å)))

	)

1066 
	#sk_X509_POLICY_NODE_föd
(
sk
, 
±r
Ë
	`OPENSSL_sk_föd
(
	`os¶_check_X509_POLICY_NODE_sk_ty≥
(sk), 
	`os¶_check_X509_POLICY_NODE_ty≥
’å))

	)

1067 
	#sk_X509_POLICY_NODE_föd_ex
(
sk
, 
±r
Ë
	`OPENSSL_sk_föd_ex
(
	`os¶_check_X509_POLICY_NODE_sk_ty≥
(sk), 
	`os¶_check_X509_POLICY_NODE_ty≥
’å))

	)

1068 
	#sk_X509_POLICY_NODE_föd_Æl
(
sk
, 
±r
, 
≤um
Ë
	`OPENSSL_sk_föd_Æl
(
	`os¶_check_X509_POLICY_NODE_sk_ty≥
(sk), 
	`os¶_check_X509_POLICY_NODE_ty≥
’å),Önum)

	)

1069 
	#sk_X509_POLICY_NODE_s‹t
(
sk
Ë
	`OPENSSL_sk_s‹t
(
	`os¶_check_X509_POLICY_NODE_sk_ty≥
(sk))

	)

1070 
	#sk_X509_POLICY_NODE_is_s‹ãd
(
sk
Ë
	`OPENSSL_sk_is_s‹ãd
(
	`os¶_check_c⁄°_X509_POLICY_NODE_sk_ty≥
(sk))

	)

1071 
	#sk_X509_POLICY_NODE_dup
(
sk
Ë((
	`STACK_OF
(
X509_POLICY_NODE
Ë*)
	`OPENSSL_sk_dup
(
	`os¶_check_c⁄°_X509_POLICY_NODE_sk_ty≥
(sk)))

	)

1072 
	#sk_X509_POLICY_NODE_dìp_c›y
(
sk
, 
c›yfunc
, 
‰ìfunc
Ë((
	`STACK_OF
(
X509_POLICY_NODE
Ë*)
	`OPENSSL_sk_dìp_c›y
(
	`os¶_check_c⁄°_X509_POLICY_NODE_sk_ty≥
(sk), 
	`os¶_check_X509_POLICY_NODE_c›yfunc_ty≥
(c›yfunc), 
	`os¶_check_X509_POLICY_NODE_‰ìfunc_ty≥
(‰ìfunc)))

	)

1073 
	#sk_X509_POLICY_NODE_£t_cmp_func
(
sk
, 
cmp
Ë((
sk_X509_POLICY_NODE_compfunc
)
	`OPENSSL_sk_£t_cmp_func
(
	`os¶_check_X509_POLICY_NODE_sk_ty≥
(sk), 
	`os¶_check_X509_POLICY_NODE_compfunc_ty≥
(cmp)))

	)

1077 #i‚de‡
OPENSSL_NO_RFC3779


1078 
	sASR™ge_°
 {

1079 
ASN1_INTEGER
 *
mö
, *
max
;

1080 } 
	tASR™ge
;

1082 
	#ASIdOrR™ge_id
 0

	)

1083 
	#ASIdOrR™ge_ønge
 1

	)

1085 
	sASIdOrR™ge_°
 {

1086 
ty≥
;

1088 
ASN1_INTEGER
 *
id
;

1089 
ASR™ge
 *
ønge
;

1090 } 
u
;

1091 } 
	tASIdOrR™ge
;

1093 
SKM_DEFINE_STACK_OF_INTERNAL
(
ASIdOrR™ge
, ASIdOrRange, ASIdOrRange)

1094 
	#sk_ASIdOrR™ge_num
(
sk
Ë
	`OPENSSL_sk_num
(
	`os¶_check_c⁄°_ASIdOrR™ge_sk_ty≥
(sk))

	)

1095 
	#sk_ASIdOrR™ge_vÆue
(
sk
, 
idx
Ë((
ASIdOrR™ge
 *)
	`OPENSSL_sk_vÆue
(
	`os¶_check_c⁄°_ASIdOrR™ge_sk_ty≥
(sk), (idx)))

	)

1096 
	#sk_ASIdOrR™ge_√w
(
cmp
Ë((
	`STACK_OF
(
ASIdOrR™ge
Ë*)
	`OPENSSL_sk_√w
(
	`os¶_check_ASIdOrR™ge_compfunc_ty≥
(cmp)))

	)

1097 
	#sk_ASIdOrR™ge_√w_nuŒ
(Ë((
	`STACK_OF
(
ASIdOrR™ge
Ë*)
	`OPENSSL_sk_√w_nuŒ
())

	)

1098 
	#sk_ASIdOrR™ge_√w_ª£rve
(
cmp
, 
n
Ë((
	`STACK_OF
(
ASIdOrR™ge
Ë*)
	`OPENSSL_sk_√w_ª£rve
(
	`os¶_check_ASIdOrR™ge_compfunc_ty≥
(cmp), (n)))

	)

1099 
	#sk_ASIdOrR™ge_ª£rve
(
sk
, 
n
Ë
	`OPENSSL_sk_ª£rve
(
	`os¶_check_ASIdOrR™ge_sk_ty≥
(sk), (n))

	)

1100 
	#sk_ASIdOrR™ge_‰ì
(
sk
Ë
	`OPENSSL_sk_‰ì
(
	`os¶_check_ASIdOrR™ge_sk_ty≥
(sk))

	)

1101 
	#sk_ASIdOrR™ge_zîo
(
sk
Ë
	`OPENSSL_sk_zîo
(
	`os¶_check_ASIdOrR™ge_sk_ty≥
(sk))

	)

1102 
	#sk_ASIdOrR™ge_dñëe
(
sk
, 
i
Ë((
ASIdOrR™ge
 *)
	`OPENSSL_sk_dñëe
(
	`os¶_check_ASIdOrR™ge_sk_ty≥
(sk), (i)))

	)

1103 
	#sk_ASIdOrR™ge_dñëe_±r
(
sk
, 
±r
Ë((
ASIdOrR™ge
 *)
	`OPENSSL_sk_dñëe_±r
(
	`os¶_check_ASIdOrR™ge_sk_ty≥
(sk), 
	`os¶_check_ASIdOrR™ge_ty≥
’å)))

	)

1104 
	#sk_ASIdOrR™ge_push
(
sk
, 
±r
Ë
	`OPENSSL_sk_push
(
	`os¶_check_ASIdOrR™ge_sk_ty≥
(sk), 
	`os¶_check_ASIdOrR™ge_ty≥
’å))

	)

1105 
	#sk_ASIdOrR™ge_unshi·
(
sk
, 
±r
Ë
	`OPENSSL_sk_unshi·
(
	`os¶_check_ASIdOrR™ge_sk_ty≥
(sk), 
	`os¶_check_ASIdOrR™ge_ty≥
’å))

	)

1106 
	#sk_ASIdOrR™ge_p›
(
sk
Ë((
ASIdOrR™ge
 *)
	`OPENSSL_sk_p›
(
	`os¶_check_ASIdOrR™ge_sk_ty≥
(sk)))

	)

1107 
	#sk_ASIdOrR™ge_shi·
(
sk
Ë((
ASIdOrR™ge
 *)
	`OPENSSL_sk_shi·
(
	`os¶_check_ASIdOrR™ge_sk_ty≥
(sk)))

	)

1108 
	#sk_ASIdOrR™ge_p›_‰ì
(
sk
, 
‰ìfunc
Ë
	`OPENSSL_sk_p›_‰ì
(
	`os¶_check_ASIdOrR™ge_sk_ty≥
(sk),
	`os¶_check_ASIdOrR™ge_‰ìfunc_ty≥
(‰ìfunc))

	)

1109 
	#sk_ASIdOrR™ge_ö£π
(
sk
, 
±r
, 
idx
Ë
	`OPENSSL_sk_ö£π
(
	`os¶_check_ASIdOrR™ge_sk_ty≥
(sk), 
	`os¶_check_ASIdOrR™ge_ty≥
’å), (idx))

	)

1110 
	#sk_ASIdOrR™ge_£t
(
sk
, 
idx
, 
±r
Ë((
ASIdOrR™ge
 *)
	`OPENSSL_sk_£t
(
	`os¶_check_ASIdOrR™ge_sk_ty≥
(sk), (idx), 
	`os¶_check_ASIdOrR™ge_ty≥
’å)))

	)

1111 
	#sk_ASIdOrR™ge_föd
(
sk
, 
±r
Ë
	`OPENSSL_sk_föd
(
	`os¶_check_ASIdOrR™ge_sk_ty≥
(sk), 
	`os¶_check_ASIdOrR™ge_ty≥
’å))

	)

1112 
	#sk_ASIdOrR™ge_föd_ex
(
sk
, 
±r
Ë
	`OPENSSL_sk_föd_ex
(
	`os¶_check_ASIdOrR™ge_sk_ty≥
(sk), 
	`os¶_check_ASIdOrR™ge_ty≥
’å))

	)

1113 
	#sk_ASIdOrR™ge_föd_Æl
(
sk
, 
±r
, 
≤um
Ë
	`OPENSSL_sk_föd_Æl
(
	`os¶_check_ASIdOrR™ge_sk_ty≥
(sk), 
	`os¶_check_ASIdOrR™ge_ty≥
’å),Önum)

	)

1114 
	#sk_ASIdOrR™ge_s‹t
(
sk
Ë
	`OPENSSL_sk_s‹t
(
	`os¶_check_ASIdOrR™ge_sk_ty≥
(sk))

	)

1115 
	#sk_ASIdOrR™ge_is_s‹ãd
(
sk
Ë
	`OPENSSL_sk_is_s‹ãd
(
	`os¶_check_c⁄°_ASIdOrR™ge_sk_ty≥
(sk))

	)

1116 
	#sk_ASIdOrR™ge_dup
(
sk
Ë((
	`STACK_OF
(
ASIdOrR™ge
Ë*)
	`OPENSSL_sk_dup
(
	`os¶_check_c⁄°_ASIdOrR™ge_sk_ty≥
(sk)))

	)

1117 
	#sk_ASIdOrR™ge_dìp_c›y
(
sk
, 
c›yfunc
, 
‰ìfunc
Ë((
	`STACK_OF
(
ASIdOrR™ge
Ë*)
	`OPENSSL_sk_dìp_c›y
(
	`os¶_check_c⁄°_ASIdOrR™ge_sk_ty≥
(sk), 
	`os¶_check_ASIdOrR™ge_c›yfunc_ty≥
(c›yfunc), 
	`os¶_check_ASIdOrR™ge_‰ìfunc_ty≥
(‰ìfunc)))

	)

1118 
	#sk_ASIdOrR™ge_£t_cmp_func
(
sk
, 
cmp
Ë((
sk_ASIdOrR™ge_compfunc
)
	`OPENSSL_sk_£t_cmp_func
(
	`os¶_check_ASIdOrR™ge_sk_ty≥
(sk), 
	`os¶_check_ASIdOrR™ge_compfunc_ty≥
(cmp)))

	)

1121 
STACK_OF
(
	tASIdOrR™ge
Ë
	tASIdOrR™ges
;

1123 
	#ASIdítifõrChoi˚_öhîô
 0

	)

1124 
	#ASIdítifõrChoi˚_asIdsOrR™ges
 1

	)

1126 
	sASIdítifõrChoi˚_°
 {

1127 
ty≥
;

1129 
ASN1_NULL
 *
öhîô
;

1130 
ASIdOrR™ges
 *
asIdsOrR™ges
;

1131 } 
u
;

1132 } 
	tASIdítifõrChoi˚
;

1134 
	sASIdítifõrs_°
 {

1135 
ASIdítifõrChoi˚
 *
a¢um
, *
rdi
;

1136 } 
	tASIdítifõrs
;

1138 
DECLARE_ASN1_FUNCTIONS
(
ASR™ge
)

1139 
DECLARE_ASN1_FUNCTIONS
(
ASIdOrR™ge
)

1140 
DECLARE_ASN1_FUNCTIONS
(
ASIdítifõrChoi˚
)

1141 
DECLARE_ASN1_FUNCTIONS
(
ASIdítifõrs
)

1143 
	sIPAddªssR™ge_°
 {

1144 
ASN1_BIT_STRING
 *
mö
, *
max
;

1145 } 
	tIPAddªssR™ge
;

1147 
	#IPAddªssOrR™ge_addªssPªfix
 0

	)

1148 
	#IPAddªssOrR™ge_addªssR™ge
 1

	)

1150 
	sIPAddªssOrR™ge_°
 {

1151 
ty≥
;

1153 
ASN1_BIT_STRING
 *
addªssPªfix
;

1154 
IPAddªssR™ge
 *
addªssR™ge
;

1155 } 
u
;

1156 } 
	tIPAddªssOrR™ge
;

1158 
SKM_DEFINE_STACK_OF_INTERNAL
(
IPAddªssOrR™ge
, IPAddressOrRange, IPAddressOrRange)

1159 
	#sk_IPAddªssOrR™ge_num
(
sk
Ë
	`OPENSSL_sk_num
(
	`os¶_check_c⁄°_IPAddªssOrR™ge_sk_ty≥
(sk))

	)

1160 
	#sk_IPAddªssOrR™ge_vÆue
(
sk
, 
idx
Ë((
IPAddªssOrR™ge
 *)
	`OPENSSL_sk_vÆue
(
	`os¶_check_c⁄°_IPAddªssOrR™ge_sk_ty≥
(sk), (idx)))

	)

1161 
	#sk_IPAddªssOrR™ge_√w
(
cmp
Ë((
	`STACK_OF
(
IPAddªssOrR™ge
Ë*)
	`OPENSSL_sk_√w
(
	`os¶_check_IPAddªssOrR™ge_compfunc_ty≥
(cmp)))

	)

1162 
	#sk_IPAddªssOrR™ge_√w_nuŒ
(Ë((
	`STACK_OF
(
IPAddªssOrR™ge
Ë*)
	`OPENSSL_sk_√w_nuŒ
())

	)

1163 
	#sk_IPAddªssOrR™ge_√w_ª£rve
(
cmp
, 
n
Ë((
	`STACK_OF
(
IPAddªssOrR™ge
Ë*)
	`OPENSSL_sk_√w_ª£rve
(
	`os¶_check_IPAddªssOrR™ge_compfunc_ty≥
(cmp), (n)))

	)

1164 
	#sk_IPAddªssOrR™ge_ª£rve
(
sk
, 
n
Ë
	`OPENSSL_sk_ª£rve
(
	`os¶_check_IPAddªssOrR™ge_sk_ty≥
(sk), (n))

	)

1165 
	#sk_IPAddªssOrR™ge_‰ì
(
sk
Ë
	`OPENSSL_sk_‰ì
(
	`os¶_check_IPAddªssOrR™ge_sk_ty≥
(sk))

	)

1166 
	#sk_IPAddªssOrR™ge_zîo
(
sk
Ë
	`OPENSSL_sk_zîo
(
	`os¶_check_IPAddªssOrR™ge_sk_ty≥
(sk))

	)

1167 
	#sk_IPAddªssOrR™ge_dñëe
(
sk
, 
i
Ë((
IPAddªssOrR™ge
 *)
	`OPENSSL_sk_dñëe
(
	`os¶_check_IPAddªssOrR™ge_sk_ty≥
(sk), (i)))

	)

1168 
	#sk_IPAddªssOrR™ge_dñëe_±r
(
sk
, 
±r
Ë((
IPAddªssOrR™ge
 *)
	`OPENSSL_sk_dñëe_±r
(
	`os¶_check_IPAddªssOrR™ge_sk_ty≥
(sk), 
	`os¶_check_IPAddªssOrR™ge_ty≥
’å)))

	)

1169 
	#sk_IPAddªssOrR™ge_push
(
sk
, 
±r
Ë
	`OPENSSL_sk_push
(
	`os¶_check_IPAddªssOrR™ge_sk_ty≥
(sk), 
	`os¶_check_IPAddªssOrR™ge_ty≥
’å))

	)

1170 
	#sk_IPAddªssOrR™ge_unshi·
(
sk
, 
±r
Ë
	`OPENSSL_sk_unshi·
(
	`os¶_check_IPAddªssOrR™ge_sk_ty≥
(sk), 
	`os¶_check_IPAddªssOrR™ge_ty≥
’å))

	)

1171 
	#sk_IPAddªssOrR™ge_p›
(
sk
Ë((
IPAddªssOrR™ge
 *)
	`OPENSSL_sk_p›
(
	`os¶_check_IPAddªssOrR™ge_sk_ty≥
(sk)))

	)

1172 
	#sk_IPAddªssOrR™ge_shi·
(
sk
Ë((
IPAddªssOrR™ge
 *)
	`OPENSSL_sk_shi·
(
	`os¶_check_IPAddªssOrR™ge_sk_ty≥
(sk)))

	)

1173 
	#sk_IPAddªssOrR™ge_p›_‰ì
(
sk
, 
‰ìfunc
Ë
	`OPENSSL_sk_p›_‰ì
(
	`os¶_check_IPAddªssOrR™ge_sk_ty≥
(sk),
	`os¶_check_IPAddªssOrR™ge_‰ìfunc_ty≥
(‰ìfunc))

	)

1174 
	#sk_IPAddªssOrR™ge_ö£π
(
sk
, 
±r
, 
idx
Ë
	`OPENSSL_sk_ö£π
(
	`os¶_check_IPAddªssOrR™ge_sk_ty≥
(sk), 
	`os¶_check_IPAddªssOrR™ge_ty≥
’å), (idx))

	)

1175 
	#sk_IPAddªssOrR™ge_£t
(
sk
, 
idx
, 
±r
Ë((
IPAddªssOrR™ge
 *)
	`OPENSSL_sk_£t
(
	`os¶_check_IPAddªssOrR™ge_sk_ty≥
(sk), (idx), 
	`os¶_check_IPAddªssOrR™ge_ty≥
’å)))

	)

1176 
	#sk_IPAddªssOrR™ge_föd
(
sk
, 
±r
Ë
	`OPENSSL_sk_föd
(
	`os¶_check_IPAddªssOrR™ge_sk_ty≥
(sk), 
	`os¶_check_IPAddªssOrR™ge_ty≥
’å))

	)

1177 
	#sk_IPAddªssOrR™ge_föd_ex
(
sk
, 
±r
Ë
	`OPENSSL_sk_föd_ex
(
	`os¶_check_IPAddªssOrR™ge_sk_ty≥
(sk), 
	`os¶_check_IPAddªssOrR™ge_ty≥
’å))

	)

1178 
	#sk_IPAddªssOrR™ge_föd_Æl
(
sk
, 
±r
, 
≤um
Ë
	`OPENSSL_sk_föd_Æl
(
	`os¶_check_IPAddªssOrR™ge_sk_ty≥
(sk), 
	`os¶_check_IPAddªssOrR™ge_ty≥
’å),Önum)

	)

1179 
	#sk_IPAddªssOrR™ge_s‹t
(
sk
Ë
	`OPENSSL_sk_s‹t
(
	`os¶_check_IPAddªssOrR™ge_sk_ty≥
(sk))

	)

1180 
	#sk_IPAddªssOrR™ge_is_s‹ãd
(
sk
Ë
	`OPENSSL_sk_is_s‹ãd
(
	`os¶_check_c⁄°_IPAddªssOrR™ge_sk_ty≥
(sk))

	)

1181 
	#sk_IPAddªssOrR™ge_dup
(
sk
Ë((
	`STACK_OF
(
IPAddªssOrR™ge
Ë*)
	`OPENSSL_sk_dup
(
	`os¶_check_c⁄°_IPAddªssOrR™ge_sk_ty≥
(sk)))

	)

1182 
	#sk_IPAddªssOrR™ge_dìp_c›y
(
sk
, 
c›yfunc
, 
‰ìfunc
Ë((
	`STACK_OF
(
IPAddªssOrR™ge
Ë*)
	`OPENSSL_sk_dìp_c›y
(
	`os¶_check_c⁄°_IPAddªssOrR™ge_sk_ty≥
(sk), 
	`os¶_check_IPAddªssOrR™ge_c›yfunc_ty≥
(c›yfunc), 
	`os¶_check_IPAddªssOrR™ge_‰ìfunc_ty≥
(‰ìfunc)))

	)

1183 
	#sk_IPAddªssOrR™ge_£t_cmp_func
(
sk
, 
cmp
Ë((
sk_IPAddªssOrR™ge_compfunc
)
	`OPENSSL_sk_£t_cmp_func
(
	`os¶_check_IPAddªssOrR™ge_sk_ty≥
(sk), 
	`os¶_check_IPAddªssOrR™ge_compfunc_ty≥
(cmp)))

	)

1186 
STACK_OF
(
	tIPAddªssOrR™ge
Ë
	tIPAddªssOrR™ges
;

1188 
	#IPAddªssChoi˚_öhîô
 0

	)

1189 
	#IPAddªssChoi˚_addªs£sOrR™ges
 1

	)

1191 
	sIPAddªssChoi˚_°
 {

1192 
ty≥
;

1194 
ASN1_NULL
 *
öhîô
;

1195 
IPAddªssOrR™ges
 *
addªs£sOrR™ges
;

1196 } 
u
;

1197 } 
	tIPAddªssChoi˚
;

1199 
	sIPAddªssFamûy_°
 {

1200 
ASN1_OCTET_STRING
 *
addªssFamûy
;

1201 
IPAddªssChoi˚
 *
ùAddªssChoi˚
;

1202 } 
	tIPAddªssFamûy
;

1204 
SKM_DEFINE_STACK_OF_INTERNAL
(
IPAddªssFamûy
, IPAddressFamily, IPAddressFamily)

1205 
	#sk_IPAddªssFamûy_num
(
sk
Ë
	`OPENSSL_sk_num
(
	`os¶_check_c⁄°_IPAddªssFamûy_sk_ty≥
(sk))

	)

1206 
	#sk_IPAddªssFamûy_vÆue
(
sk
, 
idx
Ë((
IPAddªssFamûy
 *)
	`OPENSSL_sk_vÆue
(
	`os¶_check_c⁄°_IPAddªssFamûy_sk_ty≥
(sk), (idx)))

	)

1207 
	#sk_IPAddªssFamûy_√w
(
cmp
Ë((
	`STACK_OF
(
IPAddªssFamûy
Ë*)
	`OPENSSL_sk_√w
(
	`os¶_check_IPAddªssFamûy_compfunc_ty≥
(cmp)))

	)

1208 
	#sk_IPAddªssFamûy_√w_nuŒ
(Ë((
	`STACK_OF
(
IPAddªssFamûy
Ë*)
	`OPENSSL_sk_√w_nuŒ
())

	)

1209 
	#sk_IPAddªssFamûy_√w_ª£rve
(
cmp
, 
n
Ë((
	`STACK_OF
(
IPAddªssFamûy
Ë*)
	`OPENSSL_sk_√w_ª£rve
(
	`os¶_check_IPAddªssFamûy_compfunc_ty≥
(cmp), (n)))

	)

1210 
	#sk_IPAddªssFamûy_ª£rve
(
sk
, 
n
Ë
	`OPENSSL_sk_ª£rve
(
	`os¶_check_IPAddªssFamûy_sk_ty≥
(sk), (n))

	)

1211 
	#sk_IPAddªssFamûy_‰ì
(
sk
Ë
	`OPENSSL_sk_‰ì
(
	`os¶_check_IPAddªssFamûy_sk_ty≥
(sk))

	)

1212 
	#sk_IPAddªssFamûy_zîo
(
sk
Ë
	`OPENSSL_sk_zîo
(
	`os¶_check_IPAddªssFamûy_sk_ty≥
(sk))

	)

1213 
	#sk_IPAddªssFamûy_dñëe
(
sk
, 
i
Ë((
IPAddªssFamûy
 *)
	`OPENSSL_sk_dñëe
(
	`os¶_check_IPAddªssFamûy_sk_ty≥
(sk), (i)))

	)

1214 
	#sk_IPAddªssFamûy_dñëe_±r
(
sk
, 
±r
Ë((
IPAddªssFamûy
 *)
	`OPENSSL_sk_dñëe_±r
(
	`os¶_check_IPAddªssFamûy_sk_ty≥
(sk), 
	`os¶_check_IPAddªssFamûy_ty≥
’å)))

	)

1215 
	#sk_IPAddªssFamûy_push
(
sk
, 
±r
Ë
	`OPENSSL_sk_push
(
	`os¶_check_IPAddªssFamûy_sk_ty≥
(sk), 
	`os¶_check_IPAddªssFamûy_ty≥
’å))

	)

1216 
	#sk_IPAddªssFamûy_unshi·
(
sk
, 
±r
Ë
	`OPENSSL_sk_unshi·
(
	`os¶_check_IPAddªssFamûy_sk_ty≥
(sk), 
	`os¶_check_IPAddªssFamûy_ty≥
’å))

	)

1217 
	#sk_IPAddªssFamûy_p›
(
sk
Ë((
IPAddªssFamûy
 *)
	`OPENSSL_sk_p›
(
	`os¶_check_IPAddªssFamûy_sk_ty≥
(sk)))

	)

1218 
	#sk_IPAddªssFamûy_shi·
(
sk
Ë((
IPAddªssFamûy
 *)
	`OPENSSL_sk_shi·
(
	`os¶_check_IPAddªssFamûy_sk_ty≥
(sk)))

	)

1219 
	#sk_IPAddªssFamûy_p›_‰ì
(
sk
, 
‰ìfunc
Ë
	`OPENSSL_sk_p›_‰ì
(
	`os¶_check_IPAddªssFamûy_sk_ty≥
(sk),
	`os¶_check_IPAddªssFamûy_‰ìfunc_ty≥
(‰ìfunc))

	)

1220 
	#sk_IPAddªssFamûy_ö£π
(
sk
, 
±r
, 
idx
Ë
	`OPENSSL_sk_ö£π
(
	`os¶_check_IPAddªssFamûy_sk_ty≥
(sk), 
	`os¶_check_IPAddªssFamûy_ty≥
’å), (idx))

	)

1221 
	#sk_IPAddªssFamûy_£t
(
sk
, 
idx
, 
±r
Ë((
IPAddªssFamûy
 *)
	`OPENSSL_sk_£t
(
	`os¶_check_IPAddªssFamûy_sk_ty≥
(sk), (idx), 
	`os¶_check_IPAddªssFamûy_ty≥
’å)))

	)

1222 
	#sk_IPAddªssFamûy_föd
(
sk
, 
±r
Ë
	`OPENSSL_sk_föd
(
	`os¶_check_IPAddªssFamûy_sk_ty≥
(sk), 
	`os¶_check_IPAddªssFamûy_ty≥
’å))

	)

1223 
	#sk_IPAddªssFamûy_föd_ex
(
sk
, 
±r
Ë
	`OPENSSL_sk_föd_ex
(
	`os¶_check_IPAddªssFamûy_sk_ty≥
(sk), 
	`os¶_check_IPAddªssFamûy_ty≥
’å))

	)

1224 
	#sk_IPAddªssFamûy_föd_Æl
(
sk
, 
±r
, 
≤um
Ë
	`OPENSSL_sk_föd_Æl
(
	`os¶_check_IPAddªssFamûy_sk_ty≥
(sk), 
	`os¶_check_IPAddªssFamûy_ty≥
’å),Önum)

	)

1225 
	#sk_IPAddªssFamûy_s‹t
(
sk
Ë
	`OPENSSL_sk_s‹t
(
	`os¶_check_IPAddªssFamûy_sk_ty≥
(sk))

	)

1226 
	#sk_IPAddªssFamûy_is_s‹ãd
(
sk
Ë
	`OPENSSL_sk_is_s‹ãd
(
	`os¶_check_c⁄°_IPAddªssFamûy_sk_ty≥
(sk))

	)

1227 
	#sk_IPAddªssFamûy_dup
(
sk
Ë((
	`STACK_OF
(
IPAddªssFamûy
Ë*)
	`OPENSSL_sk_dup
(
	`os¶_check_c⁄°_IPAddªssFamûy_sk_ty≥
(sk)))

	)

1228 
	#sk_IPAddªssFamûy_dìp_c›y
(
sk
, 
c›yfunc
, 
‰ìfunc
Ë((
	`STACK_OF
(
IPAddªssFamûy
Ë*)
	`OPENSSL_sk_dìp_c›y
(
	`os¶_check_c⁄°_IPAddªssFamûy_sk_ty≥
(sk), 
	`os¶_check_IPAddªssFamûy_c›yfunc_ty≥
(c›yfunc), 
	`os¶_check_IPAddªssFamûy_‰ìfunc_ty≥
(‰ìfunc)))

	)

1229 
	#sk_IPAddªssFamûy_£t_cmp_func
(
sk
, 
cmp
Ë((
sk_IPAddªssFamûy_compfunc
)
	`OPENSSL_sk_£t_cmp_func
(
	`os¶_check_IPAddªssFamûy_sk_ty≥
(sk), 
	`os¶_check_IPAddªssFamûy_compfunc_ty≥
(cmp)))

	)

1233 
STACK_OF
(
	tIPAddªssFamûy
Ë
	tIPAddrBlocks
;

1235 
DECLARE_ASN1_FUNCTIONS
(
IPAddªssR™ge
)

1236 
DECLARE_ASN1_FUNCTIONS
(
IPAddªssOrR™ge
)

1237 
DECLARE_ASN1_FUNCTIONS
(
IPAddªssChoi˚
)

1238 
DECLARE_ASN1_FUNCTIONS
(
IPAddªssFamûy
)

1243 
	#V3_ASID_ASNUM
 0

	)

1244 
	#V3_ASID_RDI
 1

	)

1252 
	#IANA_AFI_IPV4
 1

	)

1253 
	#IANA_AFI_IPV6
 2

	)

1260 
X509v3_asid_add_öhîô
(
ASIdítifõrs
 *
asid
, 
which
);

1261 
X509v3_asid_add_id_‹_ønge
(
ASIdítifõrs
 *
asid
, 
which
,

1262 
ASN1_INTEGER
 *
mö
, ASN1_INTEGER *
max
);

1263 
X509v3_addr_add_öhîô
(
IPAddrBlocks
 *
addr
,

1264 c⁄° 
afi
, c⁄° *
ßfi
);

1265 
X509v3_addr_add_¥efix
(
IPAddrBlocks
 *
addr
,

1266 c⁄° 
afi
, c⁄° *
ßfi
,

1267 *
a
, c⁄° 
¥efixÀn
);

1268 
X509v3_addr_add_ønge
(
IPAddrBlocks
 *
addr
,

1269 c⁄° 
afi
, c⁄° *
ßfi
,

1270 *
mö
, *
max
);

1271 
X509v3_addr_gë_afi
(c⁄° 
IPAddªssFamûy
 *
f
);

1272 
X509v3_addr_gë_ønge
(
IPAddªssOrR™ge
 *
a‹
, c⁄° 
afi
,

1273 *
mö
, *
max
,

1274 c⁄° 
Àngth
);

1279 
X509v3_asid_is_ˇn⁄iˇl
(
ASIdítifõrs
 *
asid
);

1280 
X509v3_addr_is_ˇn⁄iˇl
(
IPAddrBlocks
 *
addr
);

1281 
X509v3_asid_ˇn⁄ize
(
ASIdítifõrs
 *
asid
);

1282 
X509v3_addr_ˇn⁄ize
(
IPAddrBlocks
 *
addr
);

1287 
X509v3_asid_öhîôs
(
ASIdítifõrs
 *
asid
);

1288 
X509v3_addr_öhîôs
(
IPAddrBlocks
 *
addr
);

1289 
X509v3_asid_sub£t
(
ASIdítifõrs
 *
a
, ASIdítifõr†*
b
);

1290 
X509v3_addr_sub£t
(
IPAddrBlocks
 *
a
, IPAddrBlock†*
b
);

1295 
X509v3_asid_vÆid©e_∑th
(
X509_STORE_CTX
 *);

1296 
X509v3_addr_vÆid©e_∑th
(
X509_STORE_CTX
 *);

1297 
X509v3_asid_vÆid©e_ªsour˚_£t
(
STACK_OF
(
X509
Ë*
chaö
,

1298 
ASIdítifõrs
 *
ext
,

1299 
Ælow_öhîô™˚
);

1300 
X509v3_addr_vÆid©e_ªsour˚_£t
(
STACK_OF
(
X509
Ë*
chaö
,

1301 
IPAddrBlocks
 *
ext
, 
Ælow_öhîô™˚
);

1305 
SKM_DEFINE_STACK_OF_INTERNAL
(
ASN1_STRING
, ASN1_STRING, ASN1_STRING)

1306 
	#sk_ASN1_STRING_num
(
sk
Ë
	`OPENSSL_sk_num
(
	`os¶_check_c⁄°_ASN1_STRING_sk_ty≥
(sk))

	)

1307 
	#sk_ASN1_STRING_vÆue
(
sk
, 
idx
Ë((
ASN1_STRING
 *)
	`OPENSSL_sk_vÆue
(
	`os¶_check_c⁄°_ASN1_STRING_sk_ty≥
(sk), (idx)))

	)

1308 
	#sk_ASN1_STRING_√w
(
cmp
Ë((
	`STACK_OF
(
ASN1_STRING
Ë*)
	`OPENSSL_sk_√w
(
	`os¶_check_ASN1_STRING_compfunc_ty≥
(cmp)))

	)

1309 
	#sk_ASN1_STRING_√w_nuŒ
(Ë((
	`STACK_OF
(
ASN1_STRING
Ë*)
	`OPENSSL_sk_√w_nuŒ
())

	)

1310 
	#sk_ASN1_STRING_√w_ª£rve
(
cmp
, 
n
Ë((
	`STACK_OF
(
ASN1_STRING
Ë*)
	`OPENSSL_sk_√w_ª£rve
(
	`os¶_check_ASN1_STRING_compfunc_ty≥
(cmp), (n)))

	)

1311 
	#sk_ASN1_STRING_ª£rve
(
sk
, 
n
Ë
	`OPENSSL_sk_ª£rve
(
	`os¶_check_ASN1_STRING_sk_ty≥
(sk), (n))

	)

1312 
	#sk_ASN1_STRING_‰ì
(
sk
Ë
	`OPENSSL_sk_‰ì
(
	`os¶_check_ASN1_STRING_sk_ty≥
(sk))

	)

1313 
	#sk_ASN1_STRING_zîo
(
sk
Ë
	`OPENSSL_sk_zîo
(
	`os¶_check_ASN1_STRING_sk_ty≥
(sk))

	)

1314 
	#sk_ASN1_STRING_dñëe
(
sk
, 
i
Ë((
ASN1_STRING
 *)
	`OPENSSL_sk_dñëe
(
	`os¶_check_ASN1_STRING_sk_ty≥
(sk), (i)))

	)

1315 
	#sk_ASN1_STRING_dñëe_±r
(
sk
, 
±r
Ë((
ASN1_STRING
 *)
	`OPENSSL_sk_dñëe_±r
(
	`os¶_check_ASN1_STRING_sk_ty≥
(sk), 
	`os¶_check_ASN1_STRING_ty≥
’å)))

	)

1316 
	#sk_ASN1_STRING_push
(
sk
, 
±r
Ë
	`OPENSSL_sk_push
(
	`os¶_check_ASN1_STRING_sk_ty≥
(sk), 
	`os¶_check_ASN1_STRING_ty≥
’å))

	)

1317 
	#sk_ASN1_STRING_unshi·
(
sk
, 
±r
Ë
	`OPENSSL_sk_unshi·
(
	`os¶_check_ASN1_STRING_sk_ty≥
(sk), 
	`os¶_check_ASN1_STRING_ty≥
’å))

	)

1318 
	#sk_ASN1_STRING_p›
(
sk
Ë((
ASN1_STRING
 *)
	`OPENSSL_sk_p›
(
	`os¶_check_ASN1_STRING_sk_ty≥
(sk)))

	)

1319 
	#sk_ASN1_STRING_shi·
(
sk
Ë((
ASN1_STRING
 *)
	`OPENSSL_sk_shi·
(
	`os¶_check_ASN1_STRING_sk_ty≥
(sk)))

	)

1320 
	#sk_ASN1_STRING_p›_‰ì
(
sk
, 
‰ìfunc
Ë
	`OPENSSL_sk_p›_‰ì
(
	`os¶_check_ASN1_STRING_sk_ty≥
(sk),
	`os¶_check_ASN1_STRING_‰ìfunc_ty≥
(‰ìfunc))

	)

1321 
	#sk_ASN1_STRING_ö£π
(
sk
, 
±r
, 
idx
Ë
	`OPENSSL_sk_ö£π
(
	`os¶_check_ASN1_STRING_sk_ty≥
(sk), 
	`os¶_check_ASN1_STRING_ty≥
’å), (idx))

	)

1322 
	#sk_ASN1_STRING_£t
(
sk
, 
idx
, 
±r
Ë((
ASN1_STRING
 *)
	`OPENSSL_sk_£t
(
	`os¶_check_ASN1_STRING_sk_ty≥
(sk), (idx), 
	`os¶_check_ASN1_STRING_ty≥
’å)))

	)

1323 
	#sk_ASN1_STRING_föd
(
sk
, 
±r
Ë
	`OPENSSL_sk_föd
(
	`os¶_check_ASN1_STRING_sk_ty≥
(sk), 
	`os¶_check_ASN1_STRING_ty≥
’å))

	)

1324 
	#sk_ASN1_STRING_föd_ex
(
sk
, 
±r
Ë
	`OPENSSL_sk_föd_ex
(
	`os¶_check_ASN1_STRING_sk_ty≥
(sk), 
	`os¶_check_ASN1_STRING_ty≥
’å))

	)

1325 
	#sk_ASN1_STRING_föd_Æl
(
sk
, 
±r
, 
≤um
Ë
	`OPENSSL_sk_föd_Æl
(
	`os¶_check_ASN1_STRING_sk_ty≥
(sk), 
	`os¶_check_ASN1_STRING_ty≥
’å),Önum)

	)

1326 
	#sk_ASN1_STRING_s‹t
(
sk
Ë
	`OPENSSL_sk_s‹t
(
	`os¶_check_ASN1_STRING_sk_ty≥
(sk))

	)

1327 
	#sk_ASN1_STRING_is_s‹ãd
(
sk
Ë
	`OPENSSL_sk_is_s‹ãd
(
	`os¶_check_c⁄°_ASN1_STRING_sk_ty≥
(sk))

	)

1328 
	#sk_ASN1_STRING_dup
(
sk
Ë((
	`STACK_OF
(
ASN1_STRING
Ë*)
	`OPENSSL_sk_dup
(
	`os¶_check_c⁄°_ASN1_STRING_sk_ty≥
(sk)))

	)

1329 
	#sk_ASN1_STRING_dìp_c›y
(
sk
, 
c›yfunc
, 
‰ìfunc
Ë((
	`STACK_OF
(
ASN1_STRING
Ë*)
	`OPENSSL_sk_dìp_c›y
(
	`os¶_check_c⁄°_ASN1_STRING_sk_ty≥
(sk), 
	`os¶_check_ASN1_STRING_c›yfunc_ty≥
(c›yfunc), 
	`os¶_check_ASN1_STRING_‰ìfunc_ty≥
(‰ìfunc)))

	)

1330 
	#sk_ASN1_STRING_£t_cmp_func
(
sk
, 
cmp
Ë((
sk_ASN1_STRING_compfunc
)
	`OPENSSL_sk_£t_cmp_func
(
	`os¶_check_ASN1_STRING_sk_ty≥
(sk), 
	`os¶_check_ASN1_STRING_compfunc_ty≥
(cmp)))

	)

1336 
NamögAuth‹ôy_°
 
	tNAMING_AUTHORITY
;

1337 
Pro„ssi⁄Info_°
 
	tPROFESSION_INFO
;

1338 
Admissi⁄s_°
 
	tADMISSIONS
;

1339 
Admissi⁄Sy¡ax_°
 
	tADMISSION_SYNTAX
;

1340 
DECLARE_ASN1_FUNCTIONS
(
NAMING_AUTHORITY
)

1341 
DECLARE_ASN1_FUNCTIONS
(
PROFESSION_INFO
)

1342 
DECLARE_ASN1_FUNCTIONS
(
ADMISSIONS
)

1343 
DECLARE_ASN1_FUNCTIONS
(
ADMISSION_SYNTAX
)

1344 
SKM_DEFINE_STACK_OF_INTERNAL
(
PROFESSION_INFO
, PROFESSION_INFO, PROFESSION_INFO)

1345 
	#sk_PROFESSION_INFO_num
(
sk
Ë
	`OPENSSL_sk_num
(
	`os¶_check_c⁄°_PROFESSION_INFO_sk_ty≥
(sk))

	)

1346 
	#sk_PROFESSION_INFO_vÆue
(
sk
, 
idx
Ë((
PROFESSION_INFO
 *)
	`OPENSSL_sk_vÆue
(
	`os¶_check_c⁄°_PROFESSION_INFO_sk_ty≥
(sk), (idx)))

	)

1347 
	#sk_PROFESSION_INFO_√w
(
cmp
Ë((
	`STACK_OF
(
PROFESSION_INFO
Ë*)
	`OPENSSL_sk_√w
(
	`os¶_check_PROFESSION_INFO_compfunc_ty≥
(cmp)))

	)

1348 
	#sk_PROFESSION_INFO_√w_nuŒ
(Ë((
	`STACK_OF
(
PROFESSION_INFO
Ë*)
	`OPENSSL_sk_√w_nuŒ
())

	)

1349 
	#sk_PROFESSION_INFO_√w_ª£rve
(
cmp
, 
n
Ë((
	`STACK_OF
(
PROFESSION_INFO
Ë*)
	`OPENSSL_sk_√w_ª£rve
(
	`os¶_check_PROFESSION_INFO_compfunc_ty≥
(cmp), (n)))

	)

1350 
	#sk_PROFESSION_INFO_ª£rve
(
sk
, 
n
Ë
	`OPENSSL_sk_ª£rve
(
	`os¶_check_PROFESSION_INFO_sk_ty≥
(sk), (n))

	)

1351 
	#sk_PROFESSION_INFO_‰ì
(
sk
Ë
	`OPENSSL_sk_‰ì
(
	`os¶_check_PROFESSION_INFO_sk_ty≥
(sk))

	)

1352 
	#sk_PROFESSION_INFO_zîo
(
sk
Ë
	`OPENSSL_sk_zîo
(
	`os¶_check_PROFESSION_INFO_sk_ty≥
(sk))

	)

1353 
	#sk_PROFESSION_INFO_dñëe
(
sk
, 
i
Ë((
PROFESSION_INFO
 *)
	`OPENSSL_sk_dñëe
(
	`os¶_check_PROFESSION_INFO_sk_ty≥
(sk), (i)))

	)

1354 
	#sk_PROFESSION_INFO_dñëe_±r
(
sk
, 
±r
Ë((
PROFESSION_INFO
 *)
	`OPENSSL_sk_dñëe_±r
(
	`os¶_check_PROFESSION_INFO_sk_ty≥
(sk), 
	`os¶_check_PROFESSION_INFO_ty≥
’å)))

	)

1355 
	#sk_PROFESSION_INFO_push
(
sk
, 
±r
Ë
	`OPENSSL_sk_push
(
	`os¶_check_PROFESSION_INFO_sk_ty≥
(sk), 
	`os¶_check_PROFESSION_INFO_ty≥
’å))

	)

1356 
	#sk_PROFESSION_INFO_unshi·
(
sk
, 
±r
Ë
	`OPENSSL_sk_unshi·
(
	`os¶_check_PROFESSION_INFO_sk_ty≥
(sk), 
	`os¶_check_PROFESSION_INFO_ty≥
’å))

	)

1357 
	#sk_PROFESSION_INFO_p›
(
sk
Ë((
PROFESSION_INFO
 *)
	`OPENSSL_sk_p›
(
	`os¶_check_PROFESSION_INFO_sk_ty≥
(sk)))

	)

1358 
	#sk_PROFESSION_INFO_shi·
(
sk
Ë((
PROFESSION_INFO
 *)
	`OPENSSL_sk_shi·
(
	`os¶_check_PROFESSION_INFO_sk_ty≥
(sk)))

	)

1359 
	#sk_PROFESSION_INFO_p›_‰ì
(
sk
, 
‰ìfunc
Ë
	`OPENSSL_sk_p›_‰ì
(
	`os¶_check_PROFESSION_INFO_sk_ty≥
(sk),
	`os¶_check_PROFESSION_INFO_‰ìfunc_ty≥
(‰ìfunc))

	)

1360 
	#sk_PROFESSION_INFO_ö£π
(
sk
, 
±r
, 
idx
Ë
	`OPENSSL_sk_ö£π
(
	`os¶_check_PROFESSION_INFO_sk_ty≥
(sk), 
	`os¶_check_PROFESSION_INFO_ty≥
’å), (idx))

	)

1361 
	#sk_PROFESSION_INFO_£t
(
sk
, 
idx
, 
±r
Ë((
PROFESSION_INFO
 *)
	`OPENSSL_sk_£t
(
	`os¶_check_PROFESSION_INFO_sk_ty≥
(sk), (idx), 
	`os¶_check_PROFESSION_INFO_ty≥
’å)))

	)

1362 
	#sk_PROFESSION_INFO_föd
(
sk
, 
±r
Ë
	`OPENSSL_sk_föd
(
	`os¶_check_PROFESSION_INFO_sk_ty≥
(sk), 
	`os¶_check_PROFESSION_INFO_ty≥
’å))

	)

1363 
	#sk_PROFESSION_INFO_föd_ex
(
sk
, 
±r
Ë
	`OPENSSL_sk_föd_ex
(
	`os¶_check_PROFESSION_INFO_sk_ty≥
(sk), 
	`os¶_check_PROFESSION_INFO_ty≥
’å))

	)

1364 
	#sk_PROFESSION_INFO_föd_Æl
(
sk
, 
±r
, 
≤um
Ë
	`OPENSSL_sk_föd_Æl
(
	`os¶_check_PROFESSION_INFO_sk_ty≥
(sk), 
	`os¶_check_PROFESSION_INFO_ty≥
’å),Önum)

	)

1365 
	#sk_PROFESSION_INFO_s‹t
(
sk
Ë
	`OPENSSL_sk_s‹t
(
	`os¶_check_PROFESSION_INFO_sk_ty≥
(sk))

	)

1366 
	#sk_PROFESSION_INFO_is_s‹ãd
(
sk
Ë
	`OPENSSL_sk_is_s‹ãd
(
	`os¶_check_c⁄°_PROFESSION_INFO_sk_ty≥
(sk))

	)

1367 
	#sk_PROFESSION_INFO_dup
(
sk
Ë((
	`STACK_OF
(
PROFESSION_INFO
Ë*)
	`OPENSSL_sk_dup
(
	`os¶_check_c⁄°_PROFESSION_INFO_sk_ty≥
(sk)))

	)

1368 
	#sk_PROFESSION_INFO_dìp_c›y
(
sk
, 
c›yfunc
, 
‰ìfunc
Ë((
	`STACK_OF
(
PROFESSION_INFO
Ë*)
	`OPENSSL_sk_dìp_c›y
(
	`os¶_check_c⁄°_PROFESSION_INFO_sk_ty≥
(sk), 
	`os¶_check_PROFESSION_INFO_c›yfunc_ty≥
(c›yfunc), 
	`os¶_check_PROFESSION_INFO_‰ìfunc_ty≥
(‰ìfunc)))

	)

1369 
	#sk_PROFESSION_INFO_£t_cmp_func
(
sk
, 
cmp
Ë((
sk_PROFESSION_INFO_compfunc
)
	`OPENSSL_sk_£t_cmp_func
(
	`os¶_check_PROFESSION_INFO_sk_ty≥
(sk), 
	`os¶_check_PROFESSION_INFO_compfunc_ty≥
(cmp)))

	)

1370 
SKM_DEFINE_STACK_OF_INTERNAL
(
ADMISSIONS
, ADMISSIONS, ADMISSIONS)

1371 
	#sk_ADMISSIONS_num
(
sk
Ë
	`OPENSSL_sk_num
(
	`os¶_check_c⁄°_ADMISSIONS_sk_ty≥
(sk))

	)

1372 
	#sk_ADMISSIONS_vÆue
(
sk
, 
idx
Ë((
ADMISSIONS
 *)
	`OPENSSL_sk_vÆue
(
	`os¶_check_c⁄°_ADMISSIONS_sk_ty≥
(sk), (idx)))

	)

1373 
	#sk_ADMISSIONS_√w
(
cmp
Ë((
	`STACK_OF
(
ADMISSIONS
Ë*)
	`OPENSSL_sk_√w
(
	`os¶_check_ADMISSIONS_compfunc_ty≥
(cmp)))

	)

1374 
	#sk_ADMISSIONS_√w_nuŒ
(Ë((
	`STACK_OF
(
ADMISSIONS
Ë*)
	`OPENSSL_sk_√w_nuŒ
())

	)

1375 
	#sk_ADMISSIONS_√w_ª£rve
(
cmp
, 
n
Ë((
	`STACK_OF
(
ADMISSIONS
Ë*)
	`OPENSSL_sk_√w_ª£rve
(
	`os¶_check_ADMISSIONS_compfunc_ty≥
(cmp), (n)))

	)

1376 
	#sk_ADMISSIONS_ª£rve
(
sk
, 
n
Ë
	`OPENSSL_sk_ª£rve
(
	`os¶_check_ADMISSIONS_sk_ty≥
(sk), (n))

	)

1377 
	#sk_ADMISSIONS_‰ì
(
sk
Ë
	`OPENSSL_sk_‰ì
(
	`os¶_check_ADMISSIONS_sk_ty≥
(sk))

	)

1378 
	#sk_ADMISSIONS_zîo
(
sk
Ë
	`OPENSSL_sk_zîo
(
	`os¶_check_ADMISSIONS_sk_ty≥
(sk))

	)

1379 
	#sk_ADMISSIONS_dñëe
(
sk
, 
i
Ë((
ADMISSIONS
 *)
	`OPENSSL_sk_dñëe
(
	`os¶_check_ADMISSIONS_sk_ty≥
(sk), (i)))

	)

1380 
	#sk_ADMISSIONS_dñëe_±r
(
sk
, 
±r
Ë((
ADMISSIONS
 *)
	`OPENSSL_sk_dñëe_±r
(
	`os¶_check_ADMISSIONS_sk_ty≥
(sk), 
	`os¶_check_ADMISSIONS_ty≥
’å)))

	)

1381 
	#sk_ADMISSIONS_push
(
sk
, 
±r
Ë
	`OPENSSL_sk_push
(
	`os¶_check_ADMISSIONS_sk_ty≥
(sk), 
	`os¶_check_ADMISSIONS_ty≥
’å))

	)

1382 
	#sk_ADMISSIONS_unshi·
(
sk
, 
±r
Ë
	`OPENSSL_sk_unshi·
(
	`os¶_check_ADMISSIONS_sk_ty≥
(sk), 
	`os¶_check_ADMISSIONS_ty≥
’å))

	)

1383 
	#sk_ADMISSIONS_p›
(
sk
Ë((
ADMISSIONS
 *)
	`OPENSSL_sk_p›
(
	`os¶_check_ADMISSIONS_sk_ty≥
(sk)))

	)

1384 
	#sk_ADMISSIONS_shi·
(
sk
Ë((
ADMISSIONS
 *)
	`OPENSSL_sk_shi·
(
	`os¶_check_ADMISSIONS_sk_ty≥
(sk)))

	)

1385 
	#sk_ADMISSIONS_p›_‰ì
(
sk
, 
‰ìfunc
Ë
	`OPENSSL_sk_p›_‰ì
(
	`os¶_check_ADMISSIONS_sk_ty≥
(sk),
	`os¶_check_ADMISSIONS_‰ìfunc_ty≥
(‰ìfunc))

	)

1386 
	#sk_ADMISSIONS_ö£π
(
sk
, 
±r
, 
idx
Ë
	`OPENSSL_sk_ö£π
(
	`os¶_check_ADMISSIONS_sk_ty≥
(sk), 
	`os¶_check_ADMISSIONS_ty≥
’å), (idx))

	)

1387 
	#sk_ADMISSIONS_£t
(
sk
, 
idx
, 
±r
Ë((
ADMISSIONS
 *)
	`OPENSSL_sk_£t
(
	`os¶_check_ADMISSIONS_sk_ty≥
(sk), (idx), 
	`os¶_check_ADMISSIONS_ty≥
’å)))

	)

1388 
	#sk_ADMISSIONS_föd
(
sk
, 
±r
Ë
	`OPENSSL_sk_föd
(
	`os¶_check_ADMISSIONS_sk_ty≥
(sk), 
	`os¶_check_ADMISSIONS_ty≥
’å))

	)

1389 
	#sk_ADMISSIONS_föd_ex
(
sk
, 
±r
Ë
	`OPENSSL_sk_föd_ex
(
	`os¶_check_ADMISSIONS_sk_ty≥
(sk), 
	`os¶_check_ADMISSIONS_ty≥
’å))

	)

1390 
	#sk_ADMISSIONS_föd_Æl
(
sk
, 
±r
, 
≤um
Ë
	`OPENSSL_sk_föd_Æl
(
	`os¶_check_ADMISSIONS_sk_ty≥
(sk), 
	`os¶_check_ADMISSIONS_ty≥
’å),Önum)

	)

1391 
	#sk_ADMISSIONS_s‹t
(
sk
Ë
	`OPENSSL_sk_s‹t
(
	`os¶_check_ADMISSIONS_sk_ty≥
(sk))

	)

1392 
	#sk_ADMISSIONS_is_s‹ãd
(
sk
Ë
	`OPENSSL_sk_is_s‹ãd
(
	`os¶_check_c⁄°_ADMISSIONS_sk_ty≥
(sk))

	)

1393 
	#sk_ADMISSIONS_dup
(
sk
Ë((
	`STACK_OF
(
ADMISSIONS
Ë*)
	`OPENSSL_sk_dup
(
	`os¶_check_c⁄°_ADMISSIONS_sk_ty≥
(sk)))

	)

1394 
	#sk_ADMISSIONS_dìp_c›y
(
sk
, 
c›yfunc
, 
‰ìfunc
Ë((
	`STACK_OF
(
ADMISSIONS
Ë*)
	`OPENSSL_sk_dìp_c›y
(
	`os¶_check_c⁄°_ADMISSIONS_sk_ty≥
(sk), 
	`os¶_check_ADMISSIONS_c›yfunc_ty≥
(c›yfunc), 
	`os¶_check_ADMISSIONS_‰ìfunc_ty≥
(‰ìfunc)))

	)

1395 
	#sk_ADMISSIONS_£t_cmp_func
(
sk
, 
cmp
Ë((
sk_ADMISSIONS_compfunc
)
	`OPENSSL_sk_£t_cmp_func
(
	`os¶_check_ADMISSIONS_sk_ty≥
(sk), 
	`os¶_check_ADMISSIONS_compfunc_ty≥
(cmp)))

	)

1397 
STACK_OF
(
	tPROFESSION_INFO
Ë
	tPROFESSION_INFOS
;

1399 c⁄° 
ASN1_OBJECT
 *
NAMING_AUTHORITY_gë0_auth‹ôyId
(

1400 c⁄° 
NAMING_AUTHORITY
 *
n
);

1401 c⁄° 
ASN1_IA5STRING
 *
NAMING_AUTHORITY_gë0_auth‹ôyURL
(

1402 c⁄° 
NAMING_AUTHORITY
 *
n
);

1403 c⁄° 
ASN1_STRING
 *
NAMING_AUTHORITY_gë0_auth‹ôyText
(

1404 c⁄° 
NAMING_AUTHORITY
 *
n
);

1405 
NAMING_AUTHORITY_£t0_auth‹ôyId
(
NAMING_AUTHORITY
 *
n
,

1406 
ASN1_OBJECT
* 
«mögAuth‹ôyId
);

1407 
NAMING_AUTHORITY_£t0_auth‹ôyURL
(
NAMING_AUTHORITY
 *
n
,

1408 
ASN1_IA5STRING
* 
«mögAuth‹ôyUæ
);

1409 
NAMING_AUTHORITY_£t0_auth‹ôyText
(
NAMING_AUTHORITY
 *
n
,

1410 
ASN1_STRING
* 
«mögAuth‹ôyText
);

1412 c⁄° 
GENERAL_NAME
 *
ADMISSION_SYNTAX_gë0_admissi⁄Auth‹ôy
(

1413 c⁄° 
ADMISSION_SYNTAX
 *
as
);

1414 
ADMISSION_SYNTAX_£t0_admissi⁄Auth‹ôy
(

1415 
ADMISSION_SYNTAX
 *
as
, 
GENERAL_NAME
 *
Ø
);

1416 c⁄° 
STACK_OF
(
ADMISSIONS
Ë*
ADMISSION_SYNTAX_gë0_c⁄ã¡sOfAdmissi⁄s
(

1417 c⁄° 
ADMISSION_SYNTAX
 *
as
);

1418 
ADMISSION_SYNTAX_£t0_c⁄ã¡sOfAdmissi⁄s
(

1419 
ADMISSION_SYNTAX
 *
as
, 
STACK_OF
(
ADMISSIONS
Ë*
a
);

1420 c⁄° 
GENERAL_NAME
 *
ADMISSIONS_gë0_admissi⁄Auth‹ôy
(c⁄° 
ADMISSIONS
 *
a
);

1421 
ADMISSIONS_£t0_admissi⁄Auth‹ôy
(
ADMISSIONS
 *
a
, 
GENERAL_NAME
 *
Ø
);

1422 c⁄° 
NAMING_AUTHORITY
 *
ADMISSIONS_gë0_«mögAuth‹ôy
(c⁄° 
ADMISSIONS
 *
a
);

1423 
ADMISSIONS_£t0_«mögAuth‹ôy
(
ADMISSIONS
 *
a
, 
NAMING_AUTHORITY
 *
«
);

1424 c⁄° 
PROFESSION_INFOS
 *
ADMISSIONS_gë0_¥o„ssi⁄Infos
(c⁄° 
ADMISSIONS
 *
a
);

1425 
ADMISSIONS_£t0_¥o„ssi⁄Infos
(
ADMISSIONS
 *
a
, 
PROFESSION_INFOS
 *
pi
);

1426 c⁄° 
ASN1_OCTET_STRING
 *
PROFESSION_INFO_gë0_addPro„ssi⁄Info
(

1427 c⁄° 
PROFESSION_INFO
 *
pi
);

1428 
PROFESSION_INFO_£t0_addPro„ssi⁄Info
(

1429 
PROFESSION_INFO
 *
pi
, 
ASN1_OCTET_STRING
 *
aos
);

1430 c⁄° 
NAMING_AUTHORITY
 *
PROFESSION_INFO_gë0_«mögAuth‹ôy
(

1431 c⁄° 
PROFESSION_INFO
 *
pi
);

1432 
PROFESSION_INFO_£t0_«mögAuth‹ôy
(

1433 
PROFESSION_INFO
 *
pi
, 
NAMING_AUTHORITY
 *
«
);

1434 c⁄° 
STACK_OF
(
ASN1_STRING
Ë*
PROFESSION_INFO_gë0_¥o„ssi⁄Iãms
(

1435 c⁄° 
PROFESSION_INFO
 *
pi
);

1436 
PROFESSION_INFO_£t0_¥o„ssi⁄Iãms
(

1437 
PROFESSION_INFO
 *
pi
, 
STACK_OF
(
ASN1_STRING
Ë*
as
);

1438 c⁄° 
STACK_OF
(
ASN1_OBJECT
Ë*
PROFESSION_INFO_gë0_¥o„ssi⁄OIDs
(

1439 c⁄° 
PROFESSION_INFO
 *
pi
);

1440 
PROFESSION_INFO_£t0_¥o„ssi⁄OIDs
(

1441 
PROFESSION_INFO
 *
pi
, 
STACK_OF
(
ASN1_OBJECT
Ë*
po
);

1442 c⁄° 
ASN1_PRINTABLESTRING
 *
PROFESSION_INFO_gë0_ªgi°øti⁄Numbî
(

1443 c⁄° 
PROFESSION_INFO
 *
pi
);

1444 
PROFESSION_INFO_£t0_ªgi°øti⁄Numbî
(

1445 
PROFESSION_INFO
 *
pi
, 
ASN1_PRINTABLESTRING
 *
∫
);

1447 #ifde‡ 
__˝lu•lus


	@/usr/include/rpc/netdb.h

36 #i‚de‡
_RPC_NETDB_H


37 
	#_RPC_NETDB_H
 1

	)

39 
	~<„©uªs.h
>

41 
	#__√ed_size_t


	)

42 
	~<°ddef.h
>

44 
__BEGIN_DECLS


46 
	sΩ˚¡


48 *
	mr_«me
;

49 **
	mr_Æü£s
;

50 
	mr_numbî
;

53 
	$£åp˚¡
 (
__°ay›í
Ë
__THROW
;

54 
	$ídΩ˚¡
 (Ë
__THROW
;

55 
Ω˚¡
 *
	$gëΩcby«me
 (c⁄° *
__«me
Ë
__THROW
;

56 
Ω˚¡
 *
	$gëΩcbynumbî
 (
__numbî
Ë
__THROW
;

57 
Ω˚¡
 *
	$gëΩ˚¡
 (Ë
__THROW
;

59 #ifde‡
__USE_MISC


60 
	$gëΩcby«me_r
 (c⁄° *
__«me
, 
Ω˚¡
 *
__ªsu…_buf
,

61 *
__buf„r
, 
size_t
 
__buÊí
,

62 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

64 
	$gëΩcbynumbî_r
 (
__numbî
, 
Ω˚¡
 *
__ªsu…_buf
,

65 *
__buf„r
, 
size_t
 
__buÊí
,

66 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

68 
	$gëΩ˚¡_r
 (
Ω˚¡
 *
__ªsu…_buf
, *
__buf„r
,

69 
size_t
 
__buÊí
, 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

72 
__END_DECLS


	@/usr/include/uv/errno.h

22 #i‚de‡
UV_ERRNO_H_


23 
	#UV_ERRNO_H_


	)

25 
	~<î∫o.h
>

26 #i‡
EDOM
 > 0

27 
	#UV__ERR
(
x
Ë(-(x))

	)

29 
	#UV__ERR
(
x
Ë(x)

	)

32 
	#UV__EOF
 (-4095)

	)

33 
	#UV__UNKNOWN
 (-4094)

	)

35 
	#UV__EAI_ADDRFAMILY
 (-3000)

	)

36 
	#UV__EAI_AGAIN
 (-3001)

	)

37 
	#UV__EAI_BADFLAGS
 (-3002)

	)

38 
	#UV__EAI_CANCELED
 (-3003)

	)

39 
	#UV__EAI_FAIL
 (-3004)

	)

40 
	#UV__EAI_FAMILY
 (-3005)

	)

41 
	#UV__EAI_MEMORY
 (-3006)

	)

42 
	#UV__EAI_NODATA
 (-3007)

	)

43 
	#UV__EAI_NONAME
 (-3008)

	)

44 
	#UV__EAI_OVERFLOW
 (-3009)

	)

45 
	#UV__EAI_SERVICE
 (-3010)

	)

46 
	#UV__EAI_SOCKTYPE
 (-3011)

	)

47 
	#UV__EAI_BADHINTS
 (-3013)

	)

48 
	#UV__EAI_PROTOCOL
 (-3014)

	)

53 #i‡
deföed
(
E2BIG
Ë&& !deföed(
_WIN32
)

54 
	#UV__E2BIG
 
	`UV__ERR
(
E2BIG
)

	)

56 
	#UV__E2BIG
 (-4093)

	)

59 #i‡
deföed
(
EACCES
Ë&& !deföed(
_WIN32
)

60 
	#UV__EACCES
 
	`UV__ERR
(
EACCES
)

	)

62 
	#UV__EACCES
 (-4092)

	)

65 #i‡
deföed
(
EADDRINUSE
Ë&& !deföed(
_WIN32
)

66 
	#UV__EADDRINUSE
 
	`UV__ERR
(
EADDRINUSE
)

	)

68 
	#UV__EADDRINUSE
 (-4091)

	)

71 #i‡
deföed
(
EADDRNOTAVAIL
Ë&& !deföed(
_WIN32
)

72 
	#UV__EADDRNOTAVAIL
 
	`UV__ERR
(
EADDRNOTAVAIL
)

	)

74 
	#UV__EADDRNOTAVAIL
 (-4090)

	)

77 #i‡
deföed
(
EAFNOSUPPORT
Ë&& !deföed(
_WIN32
)

78 
	#UV__EAFNOSUPPORT
 
	`UV__ERR
(
EAFNOSUPPORT
)

	)

80 
	#UV__EAFNOSUPPORT
 (-4089)

	)

83 #i‡
deföed
(
EAGAIN
Ë&& !deföed(
_WIN32
)

84 
	#UV__EAGAIN
 
	`UV__ERR
(
EAGAIN
)

	)

86 
	#UV__EAGAIN
 (-4088)

	)

89 #i‡
deföed
(
EALREADY
Ë&& !deföed(
_WIN32
)

90 
	#UV__EALREADY
 
	`UV__ERR
(
EALREADY
)

	)

92 
	#UV__EALREADY
 (-4084)

	)

95 #i‡
deföed
(
EBADF
Ë&& !deföed(
_WIN32
)

96 
	#UV__EBADF
 
	`UV__ERR
(
EBADF
)

	)

98 
	#UV__EBADF
 (-4083)

	)

101 #i‡
deföed
(
EBUSY
Ë&& !deföed(
_WIN32
)

102 
	#UV__EBUSY
 
	`UV__ERR
(
EBUSY
)

	)

104 
	#UV__EBUSY
 (-4082)

	)

107 #i‡
deföed
(
ECANCELED
Ë&& !deföed(
_WIN32
)

108 
	#UV__ECANCELED
 
	`UV__ERR
(
ECANCELED
)

	)

110 
	#UV__ECANCELED
 (-4081)

	)

113 #i‡
deföed
(
ECHARSET
Ë&& !deföed(
_WIN32
)

114 
	#UV__ECHARSET
 
	`UV__ERR
(
ECHARSET
)

	)

116 
	#UV__ECHARSET
 (-4080)

	)

119 #i‡
deföed
(
ECONNABORTED
Ë&& !deföed(
_WIN32
)

120 
	#UV__ECONNABORTED
 
	`UV__ERR
(
ECONNABORTED
)

	)

122 
	#UV__ECONNABORTED
 (-4079)

	)

125 #i‡
deföed
(
ECONNREFUSED
Ë&& !deföed(
_WIN32
)

126 
	#UV__ECONNREFUSED
 
	`UV__ERR
(
ECONNREFUSED
)

	)

128 
	#UV__ECONNREFUSED
 (-4078)

	)

131 #i‡
deföed
(
ECONNRESET
Ë&& !deföed(
_WIN32
)

132 
	#UV__ECONNRESET
 
	`UV__ERR
(
ECONNRESET
)

	)

134 
	#UV__ECONNRESET
 (-4077)

	)

137 #i‡
deföed
(
EDESTADDRREQ
Ë&& !deföed(
_WIN32
)

138 
	#UV__EDESTADDRREQ
 
	`UV__ERR
(
EDESTADDRREQ
)

	)

140 
	#UV__EDESTADDRREQ
 (-4076)

	)

143 #i‡
deföed
(
EEXIST
Ë&& !deföed(
_WIN32
)

144 
	#UV__EEXIST
 
	`UV__ERR
(
EEXIST
)

	)

146 
	#UV__EEXIST
 (-4075)

	)

149 #i‡
deföed
(
EFAULT
Ë&& !deföed(
_WIN32
)

150 
	#UV__EFAULT
 
	`UV__ERR
(
EFAULT
)

	)

152 
	#UV__EFAULT
 (-4074)

	)

155 #i‡
deföed
(
EHOSTUNREACH
Ë&& !deföed(
_WIN32
)

156 
	#UV__EHOSTUNREACH
 
	`UV__ERR
(
EHOSTUNREACH
)

	)

158 
	#UV__EHOSTUNREACH
 (-4073)

	)

161 #i‡
deföed
(
EINTR
Ë&& !deföed(
_WIN32
)

162 
	#UV__EINTR
 
	`UV__ERR
(
EINTR
)

	)

164 
	#UV__EINTR
 (-4072)

	)

167 #i‡
deföed
(
EINVAL
Ë&& !deföed(
_WIN32
)

168 
	#UV__EINVAL
 
	`UV__ERR
(
EINVAL
)

	)

170 
	#UV__EINVAL
 (-4071)

	)

173 #i‡
deföed
(
EIO
Ë&& !deföed(
_WIN32
)

174 
	#UV__EIO
 
	`UV__ERR
(
EIO
)

	)

176 
	#UV__EIO
 (-4070)

	)

179 #i‡
deföed
(
EISCONN
Ë&& !deföed(
_WIN32
)

180 
	#UV__EISCONN
 
	`UV__ERR
(
EISCONN
)

	)

182 
	#UV__EISCONN
 (-4069)

	)

185 #i‡
deföed
(
EISDIR
Ë&& !deföed(
_WIN32
)

186 
	#UV__EISDIR
 
	`UV__ERR
(
EISDIR
)

	)

188 
	#UV__EISDIR
 (-4068)

	)

191 #i‡
deföed
(
ELOOP
Ë&& !deföed(
_WIN32
)

192 
	#UV__ELOOP
 
	`UV__ERR
(
ELOOP
)

	)

194 
	#UV__ELOOP
 (-4067)

	)

197 #i‡
deföed
(
EMFILE
Ë&& !deföed(
_WIN32
)

198 
	#UV__EMFILE
 
	`UV__ERR
(
EMFILE
)

	)

200 
	#UV__EMFILE
 (-4066)

	)

203 #i‡
deföed
(
EMSGSIZE
Ë&& !deföed(
_WIN32
)

204 
	#UV__EMSGSIZE
 
	`UV__ERR
(
EMSGSIZE
)

	)

206 
	#UV__EMSGSIZE
 (-4065)

	)

209 #i‡
deföed
(
ENAMETOOLONG
Ë&& !deföed(
_WIN32
)

210 
	#UV__ENAMETOOLONG
 
	`UV__ERR
(
ENAMETOOLONG
)

	)

212 
	#UV__ENAMETOOLONG
 (-4064)

	)

215 #i‡
deföed
(
ENETDOWN
Ë&& !deföed(
_WIN32
)

216 
	#UV__ENETDOWN
 
	`UV__ERR
(
ENETDOWN
)

	)

218 
	#UV__ENETDOWN
 (-4063)

	)

221 #i‡
deföed
(
ENETUNREACH
Ë&& !deföed(
_WIN32
)

222 
	#UV__ENETUNREACH
 
	`UV__ERR
(
ENETUNREACH
)

	)

224 
	#UV__ENETUNREACH
 (-4062)

	)

227 #i‡
deföed
(
ENFILE
Ë&& !deföed(
_WIN32
)

228 
	#UV__ENFILE
 
	`UV__ERR
(
ENFILE
)

	)

230 
	#UV__ENFILE
 (-4061)

	)

233 #i‡
deföed
(
ENOBUFS
Ë&& !deföed(
_WIN32
)

234 
	#UV__ENOBUFS
 
	`UV__ERR
(
ENOBUFS
)

	)

236 
	#UV__ENOBUFS
 (-4060)

	)

239 #i‡
deföed
(
ENODEV
Ë&& !deföed(
_WIN32
)

240 
	#UV__ENODEV
 
	`UV__ERR
(
ENODEV
)

	)

242 
	#UV__ENODEV
 (-4059)

	)

245 #i‡
deföed
(
ENOENT
Ë&& !deföed(
_WIN32
)

246 
	#UV__ENOENT
 
	`UV__ERR
(
ENOENT
)

	)

248 
	#UV__ENOENT
 (-4058)

	)

251 #i‡
deföed
(
ENOMEM
Ë&& !deföed(
_WIN32
)

252 
	#UV__ENOMEM
 
	`UV__ERR
(
ENOMEM
)

	)

254 
	#UV__ENOMEM
 (-4057)

	)

257 #i‡
deföed
(
ENONET
Ë&& !deföed(
_WIN32
)

258 
	#UV__ENONET
 
	`UV__ERR
(
ENONET
)

	)

260 
	#UV__ENONET
 (-4056)

	)

263 #i‡
deföed
(
ENOSPC
Ë&& !deföed(
_WIN32
)

264 
	#UV__ENOSPC
 
	`UV__ERR
(
ENOSPC
)

	)

266 
	#UV__ENOSPC
 (-4055)

	)

269 #i‡
deföed
(
ENOSYS
Ë&& !deföed(
_WIN32
)

270 
	#UV__ENOSYS
 
	`UV__ERR
(
ENOSYS
)

	)

272 
	#UV__ENOSYS
 (-4054)

	)

275 #i‡
deföed
(
ENOTCONN
Ë&& !deföed(
_WIN32
)

276 
	#UV__ENOTCONN
 
	`UV__ERR
(
ENOTCONN
)

	)

278 
	#UV__ENOTCONN
 (-4053)

	)

281 #i‡
deföed
(
ENOTDIR
Ë&& !deföed(
_WIN32
)

282 
	#UV__ENOTDIR
 
	`UV__ERR
(
ENOTDIR
)

	)

284 
	#UV__ENOTDIR
 (-4052)

	)

287 #i‡
deföed
(
ENOTEMPTY
Ë&& !deföed(
_WIN32
)

288 
	#UV__ENOTEMPTY
 
	`UV__ERR
(
ENOTEMPTY
)

	)

290 
	#UV__ENOTEMPTY
 (-4051)

	)

293 #i‡
deföed
(
ENOTSOCK
Ë&& !deföed(
_WIN32
)

294 
	#UV__ENOTSOCK
 
	`UV__ERR
(
ENOTSOCK
)

	)

296 
	#UV__ENOTSOCK
 (-4050)

	)

299 #i‡
deföed
(
ENOTSUP
Ë&& !deföed(
_WIN32
)

300 
	#UV__ENOTSUP
 
	`UV__ERR
(
ENOTSUP
)

	)

302 
	#UV__ENOTSUP
 (-4049)

	)

305 #i‡
deföed
(
EPERM
Ë&& !deföed(
_WIN32
)

306 
	#UV__EPERM
 
	`UV__ERR
(
EPERM
)

	)

308 
	#UV__EPERM
 (-4048)

	)

311 #i‡
deföed
(
EPIPE
Ë&& !deföed(
_WIN32
)

312 
	#UV__EPIPE
 
	`UV__ERR
(
EPIPE
)

	)

314 
	#UV__EPIPE
 (-4047)

	)

317 #i‡
deföed
(
EPROTO
Ë&& !deföed(
_WIN32
)

318 
	#UV__EPROTO
 
	`UV__ERR
(
EPROTO
)

	)

320 
	#UV__EPROTO
 (-4046)

	)

323 #i‡
deföed
(
EPROTONOSUPPORT
Ë&& !deföed(
_WIN32
)

324 
	#UV__EPROTONOSUPPORT
 
	`UV__ERR
(
EPROTONOSUPPORT
)

	)

326 
	#UV__EPROTONOSUPPORT
 (-4045)

	)

329 #i‡
deföed
(
EPROTOTYPE
Ë&& !deföed(
_WIN32
)

330 
	#UV__EPROTOTYPE
 
	`UV__ERR
(
EPROTOTYPE
)

	)

332 
	#UV__EPROTOTYPE
 (-4044)

	)

335 #i‡
deföed
(
EROFS
Ë&& !deföed(
_WIN32
)

336 
	#UV__EROFS
 
	`UV__ERR
(
EROFS
)

	)

338 
	#UV__EROFS
 (-4043)

	)

341 #i‡
deföed
(
ESHUTDOWN
Ë&& !deföed(
_WIN32
)

342 
	#UV__ESHUTDOWN
 
	`UV__ERR
(
ESHUTDOWN
)

	)

344 
	#UV__ESHUTDOWN
 (-4042)

	)

347 #i‡
deföed
(
ESPIPE
Ë&& !deföed(
_WIN32
)

348 
	#UV__ESPIPE
 
	`UV__ERR
(
ESPIPE
)

	)

350 
	#UV__ESPIPE
 (-4041)

	)

353 #i‡
deföed
(
ESRCH
Ë&& !deföed(
_WIN32
)

354 
	#UV__ESRCH
 
	`UV__ERR
(
ESRCH
)

	)

356 
	#UV__ESRCH
 (-4040)

	)

359 #i‡
deföed
(
ETIMEDOUT
Ë&& !deföed(
_WIN32
)

360 
	#UV__ETIMEDOUT
 
	`UV__ERR
(
ETIMEDOUT
)

	)

362 
	#UV__ETIMEDOUT
 (-4039)

	)

365 #i‡
deföed
(
ETXTBSY
Ë&& !deföed(
_WIN32
)

366 
	#UV__ETXTBSY
 
	`UV__ERR
(
ETXTBSY
)

	)

368 
	#UV__ETXTBSY
 (-4038)

	)

371 #i‡
deföed
(
EXDEV
Ë&& !deföed(
_WIN32
)

372 
	#UV__EXDEV
 
	`UV__ERR
(
EXDEV
)

	)

374 
	#UV__EXDEV
 (-4037)

	)

377 #i‡
deföed
(
EFBIG
Ë&& !deföed(
_WIN32
)

378 
	#UV__EFBIG
 
	`UV__ERR
(
EFBIG
)

	)

380 
	#UV__EFBIG
 (-4036)

	)

383 #i‡
deföed
(
ENOPROTOOPT
Ë&& !deföed(
_WIN32
)

384 
	#UV__ENOPROTOOPT
 
	`UV__ERR
(
ENOPROTOOPT
)

	)

386 
	#UV__ENOPROTOOPT
 (-4035)

	)

389 #i‡
deföed
(
ERANGE
Ë&& !deföed(
_WIN32
)

390 
	#UV__ERANGE
 
	`UV__ERR
(
ERANGE
)

	)

392 
	#UV__ERANGE
 (-4034)

	)

395 #i‡
deföed
(
ENXIO
Ë&& !deföed(
_WIN32
)

396 
	#UV__ENXIO
 
	`UV__ERR
(
ENXIO
)

	)

398 
	#UV__ENXIO
 (-4033)

	)

401 #i‡
deföed
(
EMLINK
Ë&& !deföed(
_WIN32
)

402 
	#UV__EMLINK
 
	`UV__ERR
(
EMLINK
)

	)

404 
	#UV__EMLINK
 (-4032)

	)

411 #i‡
deföed
(
EHOSTDOWN
Ë&& !deföed(
_WIN32
)

412 
	#UV__EHOSTDOWN
 
	`UV__ERR
(
EHOSTDOWN
)

	)

413 #ñi‡
deföed
(
__APPLE__
) || \

414 
deföed
(
__Døg⁄Fly__
) || \

415 
deföed
(
__FªeBSD__
) || \

416 
deföed
(
__FªeBSD_kî√l__
) || \

417 
deföed
(
__NëBSD__
) || \

418 
	$deföed
(
__O≥nBSD__
)

419 
	#UV__EHOSTDOWN
 (-64)

	)

421 
	#UV__EHOSTDOWN
 (-4031)

	)

424 #i‡
	`deföed
(
EREMOTEIO
Ë&& !deföed(
_WIN32
)

425 
	#UV__EREMOTEIO
 
	`UV__ERR
(
EREMOTEIO
)

	)

427 
	#UV__EREMOTEIO
 (-4030)

	)

430 #i‡
	`deföed
(
ENOTTY
Ë&& !deföed(
_WIN32
)

431 
	#UV__ENOTTY
 
	`UV__ERR
(
ENOTTY
)

	)

433 
	#UV__ENOTTY
 (-4029)

	)

436 #i‡
	`deföed
(
EFTYPE
Ë&& !deföed(
_WIN32
)

437 
	#UV__EFTYPE
 
	`UV__ERR
(
EFTYPE
)

	)

439 
	#UV__EFTYPE
 (-4028)

	)

442 #i‡
	`deföed
(
EILSEQ
Ë&& !deföed(
_WIN32
)

443 
	#UV__EILSEQ
 
	`UV__ERR
(
EILSEQ
)

	)

445 
	#UV__EILSEQ
 (-4027)

	)

448 #i‡
	`deföed
(
EOVERFLOW
Ë&& !deföed(
_WIN32
)

449 
	#UV__EOVERFLOW
 
	`UV__ERR
(
EOVERFLOW
)

	)

451 
	#UV__EOVERFLOW
 (-4026)

	)

454 #i‡
	`deföed
(
ESOCKTNOSUPPORT
Ë&& !deföed(
_WIN32
)

455 
	#UV__ESOCKTNOSUPPORT
 
	`UV__ERR
(
ESOCKTNOSUPPORT
)

	)

457 
	#UV__ESOCKTNOSUPPORT
 (-4025)

	)

	@/usr/include/uv/stdint-msvc2008.h

32 #i‚de‡
_MSC_VER


36 #i‚de‡
_MSC_STDINT_H_


37 
	#_MSC_STDINT_H_


	)

39 #i‡
_MSC_VER
 > 1000

40 #¥agm®
⁄˚


43 
	~<limôs.h
>

49 #ifde‡
__˝lu•lus


52 
	~<wch¨.h
>

53 #ifde‡
__˝lu•lus


58 #i‚de‡
_W64


59 #i‡!
deföed
(
__midl
Ë&& (deföed(
_X86_
Ë|| deföed(
_M_IX86
)Ë&& 
_MSC_VER
 >= 1300

60 
	#_W64
 
__w64


	)

62 
	#_W64


	)

74 #i‡(
_MSC_VER
 < 1300)

75 sig√d 
	töt8_t
;

76 sig√d 
	töt16_t
;

77 sig√d 
	töt32_t
;

78 
	tuöt8_t
;

79 
	tuöt16_t
;

80 
	tuöt32_t
;

82 sig√d 
	t__öt8
 
	töt8_t
;

83 sig√d 
	t__öt16
 
	töt16_t
;

84 sig√d 
	t__öt32
 
	töt32_t
;

85 
	t__öt8
 
	tuöt8_t
;

86 
	t__öt16
 
	tuöt16_t
;

87 
	t__öt32
 
	tuöt32_t
;

89 sig√d 
	t__öt64
 
	töt64_t
;

90 
	t__öt64
 
	tuöt64_t
;

94 
öt8_t
 
	töt_Àa°8_t
;

95 
öt16_t
 
	töt_Àa°16_t
;

96 
öt32_t
 
	töt_Àa°32_t
;

97 
öt64_t
 
	töt_Àa°64_t
;

98 
uöt8_t
 
	tuöt_Àa°8_t
;

99 
uöt16_t
 
	tuöt_Àa°16_t
;

100 
uöt32_t
 
	tuöt_Àa°32_t
;

101 
uöt64_t
 
	tuöt_Àa°64_t
;

104 
öt8_t
 
	töt_Á°8_t
;

105 
öt16_t
 
	töt_Á°16_t
;

106 
öt32_t
 
	töt_Á°32_t
;

107 
öt64_t
 
	töt_Á°64_t
;

108 
uöt8_t
 
	tuöt_Á°8_t
;

109 
uöt16_t
 
	tuöt_Á°16_t
;

110 
uöt32_t
 
	tuöt_Á°32_t
;

111 
uöt64_t
 
	tuöt_Á°64_t
;

114 #ifde‡
_WIN64


115 sig√d 
	t__öt64
 
	töçå_t
;

116 
	t__öt64
 
	tuöçå_t
;

118 
_W64
 sig√d 
	töçå_t
;

119 
_W64
 
	tuöçå_t
;

123 
öt64_t
 
	tötmax_t
;

124 
uöt64_t
 
	tuötmax_t
;

129 #i‡!
deföed
(
__˝lu•lus
Ë|| deföed(
__STDC_LIMIT_MACROS
)

132 
	#INT8_MIN
 ((
öt8_t
)
_I8_MIN
)

	)

133 
	#INT8_MAX
 
_I8_MAX


	)

134 
	#INT16_MIN
 ((
öt16_t
)
_I16_MIN
)

	)

135 
	#INT16_MAX
 
_I16_MAX


	)

136 
	#INT32_MIN
 ((
öt32_t
)
_I32_MIN
)

	)

137 
	#INT32_MAX
 
_I32_MAX


	)

138 
	#INT64_MIN
 ((
öt64_t
)
_I64_MIN
)

	)

139 
	#INT64_MAX
 
_I64_MAX


	)

140 
	#UINT8_MAX
 
_UI8_MAX


	)

141 
	#UINT16_MAX
 
_UI16_MAX


	)

142 
	#UINT32_MAX
 
_UI32_MAX


	)

143 
	#UINT64_MAX
 
_UI64_MAX


	)

146 
	#INT_LEAST8_MIN
 
INT8_MIN


	)

147 
	#INT_LEAST8_MAX
 
INT8_MAX


	)

148 
	#INT_LEAST16_MIN
 
INT16_MIN


	)

149 
	#INT_LEAST16_MAX
 
INT16_MAX


	)

150 
	#INT_LEAST32_MIN
 
INT32_MIN


	)

151 
	#INT_LEAST32_MAX
 
INT32_MAX


	)

152 
	#INT_LEAST64_MIN
 
INT64_MIN


	)

153 
	#INT_LEAST64_MAX
 
INT64_MAX


	)

154 
	#UINT_LEAST8_MAX
 
UINT8_MAX


	)

155 
	#UINT_LEAST16_MAX
 
UINT16_MAX


	)

156 
	#UINT_LEAST32_MAX
 
UINT32_MAX


	)

157 
	#UINT_LEAST64_MAX
 
UINT64_MAX


	)

160 
	#INT_FAST8_MIN
 
INT8_MIN


	)

161 
	#INT_FAST8_MAX
 
INT8_MAX


	)

162 
	#INT_FAST16_MIN
 
INT16_MIN


	)

163 
	#INT_FAST16_MAX
 
INT16_MAX


	)

164 
	#INT_FAST32_MIN
 
INT32_MIN


	)

165 
	#INT_FAST32_MAX
 
INT32_MAX


	)

166 
	#INT_FAST64_MIN
 
INT64_MIN


	)

167 
	#INT_FAST64_MAX
 
INT64_MAX


	)

168 
	#UINT_FAST8_MAX
 
UINT8_MAX


	)

169 
	#UINT_FAST16_MAX
 
UINT16_MAX


	)

170 
	#UINT_FAST32_MAX
 
UINT32_MAX


	)

171 
	#UINT_FAST64_MAX
 
UINT64_MAX


	)

174 #ifde‡
_WIN64


175 
	#INTPTR_MIN
 
INT64_MIN


	)

176 
	#INTPTR_MAX
 
INT64_MAX


	)

177 
	#UINTPTR_MAX
 
UINT64_MAX


	)

179 
	#INTPTR_MIN
 
INT32_MIN


	)

180 
	#INTPTR_MAX
 
INT32_MAX


	)

181 
	#UINTPTR_MAX
 
UINT32_MAX


	)

185 
	#INTMAX_MIN
 
INT64_MIN


	)

186 
	#INTMAX_MAX
 
INT64_MAX


	)

187 
	#UINTMAX_MAX
 
UINT64_MAX


	)

191 #ifde‡
_WIN64


192 
	#PTRDIFF_MIN
 
_I64_MIN


	)

193 
	#PTRDIFF_MAX
 
_I64_MAX


	)

195 
	#PTRDIFF_MIN
 
_I32_MIN


	)

196 
	#PTRDIFF_MAX
 
_I32_MAX


	)

199 
	#SIG_ATOMIC_MIN
 
INT_MIN


	)

200 
	#SIG_ATOMIC_MAX
 
INT_MAX


	)

202 #i‚de‡
SIZE_MAX


203 #ifde‡
_WIN64


204 
	#SIZE_MAX
 
_UI64_MAX


	)

206 
	#SIZE_MAX
 
_UI32_MAX


	)

211 #i‚de‡
WCHAR_MIN


212 
	#WCHAR_MIN
 0

	)

214 #i‚de‡
WCHAR_MAX


215 
	#WCHAR_MAX
 
_UI16_MAX


	)

218 
	#WINT_MIN
 0

	)

219 
	#WINT_MAX
 
_UI16_MAX


	)

226 #i‡!
deföed
(
__˝lu•lus
Ë|| deföed(
__STDC_CONSTANT_MACROS
)

230 
	#INT8_C
(
vÆ
ËvÆ##
i8


	)

231 
	#INT16_C
(
vÆ
ËvÆ##
i16


	)

232 
	#INT32_C
(
vÆ
ËvÆ##
i32


	)

233 
	#INT64_C
(
vÆ
ËvÆ##
i64


	)

235 
	#UINT8_C
(
vÆ
ËvÆ##
ui8


	)

236 
	#UINT16_C
(
vÆ
ËvÆ##
ui16


	)

237 
	#UINT32_C
(
vÆ
ËvÆ##
ui32


	)

238 
	#UINT64_C
(
vÆ
ËvÆ##
ui64


	)

241 
	#INTMAX_C
 
INT64_C


	)

242 
	#UINTMAX_C
 
UINT64_C


	)

	@/usr/include/uv/unix.h

22 #i‚de‡
UV_UNIX_H


23 
	#UV_UNIX_H


	)

25 
	~<sys/ty≥s.h
>

26 
	~<sys/°©.h
>

27 
	~<f˙é.h
>

28 
	~<dúít.h
>

30 
	~<sys/sockë.h
>

31 
	~<√töë/ö.h
>

32 
	~<√töë/t˝.h
>

33 
	~<¨∑/öë.h
>

34 
	~<√tdb.h
>

36 
	~<ãrmios.h
>

37 
	~<pwd.h
>

39 #i‡!
deföed
(
__MVS__
)

40 
	~<£m≠h‹e.h
>

41 
	~<sys/∑øm.h
>

43 
	~<±hªad.h
>

44 
	~<sig«l.h
>

46 
	~"uv/thªadpoﬁ.h
"

48 #i‡
deföed
(
__löux__
)

49 
	~"uv/löux.h
"

50 #ñi‡
deföed
 (
__MVS__
)

51 
	~"uv/os390.h
"

52 #ñi‡
deföed
(
__PASE__
)

53 
	~"uv/posix.h
"

54 #ñi‡
deföed
(
_AIX
)

55 
	~"uv/aix.h
"

56 #ñi‡
deföed
(
__sun
)

57 
	~"uv/sunos.h
"

58 #ñi‡
deföed
(
__APPLE__
)

59 
	~"uv/d¨wö.h
"

60 #ñi‡
deföed
(
__Døg⁄Fly__
) || \

61 
deföed
(
__FªeBSD__
) || \

62 
deföed
(
__FªeBSD_kî√l__
) || \

63 
deföed
(
__O≥nBSD__
) || \

64 
	$deföed
(
__NëBSD__
)

65 
	~"uv/bsd.h
"

66 #ñi‡
	`deföed
(
__CYGWIN__
) || \

67 
	`deföed
(
__MSYS__
) || \

68 
	`deföed
(
__HAIKU__
) || \

69 
	`deföed
(
__QNX__
) || \

70 
	$deföed
(
__GNU__
)

71 
	~"uv/posix.h
"

74 #i‚de‡
NI_MAXHOST


75 
	#NI_MAXHOST
 1025

	)

78 #i‚de‡
NI_MAXSERV


79 
	#NI_MAXSERV
 32

	)

82 #i‚de‡
UV_IO_PRIVATE_PLATFORM_FIELDS


83 
	#UV_IO_PRIVATE_PLATFORM_FIELDS


	)

86 
uv__io_s
;

87 
uv_lo›_s
;

89 (*
	tuv__io_cb
)(
	tuv_lo›_s
* 
	tlo›
,

90 
	tuv__io_s
* 
	tw
,

91 
	tevíts
);

92 
uv__io_s
 
	tuv__io_t
;

94 
	suv__io_s
 {

95 
uv__io_cb
 
cb
;

96 * 
≥ndög_queue
[2];

97 * 
w©chî_queue
[2];

98 
≥víts
;

99 
evíts
;

100 
fd
;

101 
UV_IO_PRIVATE_PLATFORM_FIELDS


104 #i‚de‡
UV_PLATFORM_SEM_T


105 
	#UV_PLATFORM_SEM_T
 
£m_t


	)

108 #i‚de‡
UV_PLATFORM_LOOP_FIELDS


109 
	#UV_PLATFORM_LOOP_FIELDS


	)

112 #i‚de‡
UV_PLATFORM_FS_EVENT_FIELDS


113 
	#UV_PLATFORM_FS_EVENT_FIELDS


	)

116 #i‚de‡
UV_STREAM_PRIVATE_PLATFORM_FIELDS


117 
	#UV_STREAM_PRIVATE_PLATFORM_FIELDS


	)

121 
	suv_buf_t
 {

122 * 
ba£
;

123 
size_t
 
Àn
;

124 } 
	tuv_buf_t
;

126 
	tuv_fûe
;

127 
	tuv_os_sock_t
;

128 
	tuv_os_fd_t
;

129 
pid_t
 
	tuv_pid_t
;

131 
	#UV_ONCE_INIT
 
PTHREAD_ONCE_INIT


	)

133 
±hªad_⁄˚_t
 
	tuv_⁄˚_t
;

134 
±hªad_t
 
	tuv_thªad_t
;

135 
±hªad_muãx_t
 
	tuv_muãx_t
;

136 
±hªad_rwlock_t
 
	tuv_rwlock_t
;

137 
UV_PLATFORM_SEM_T
 
	tuv_£m_t
;

138 
±hªad_c⁄d_t
 
	tuv_c⁄d_t
;

139 
±hªad_key_t
 
	tuv_key_t
;

142 #i‡
	`deföed
(
_AIX
) || \

143 
	`deföed
(
__O≥nBSD__
) || \

144 !
	$deföed
(
PTHREAD_BARRIER_SERIAL_THREAD
)

146 
	s_uv_b¨rõr
 {

147 
uv_muãx_t
 
muãx
;

148 
uv_c⁄d_t
 
c⁄d
;

149 
thªshﬁd
;

150 
ö
;

151 
out
;

155 
_uv_b¨rõr
* 
b
;

156 #i‡
	`deföed
(
PTHREAD_BARRIER_SERIAL_THREAD
)

158 
∑d
[(
±hªad_b¨rõr_t
Ë- (
_uv_b¨rõr
*)];

160 } 
	tuv_b¨rõr_t
;

162 
±hªad_b¨rõr_t
 
	tuv_b¨rõr_t
;

166 
gid_t
 
	tuv_gid_t
;

167 
uid_t
 
	tuv_uid_t
;

169 
dúít
 
	tuv__dúít_t
;

171 
	#UV_DIR_PRIVATE_FIELDS
 \

172 
DIR
* 
dú
;

	)

174 #i‡
	`deföed
(
DT_UNKNOWN
)

175 
	#HAVE_DIRENT_TYPES


	)

176 #i‡
	`deföed
(
DT_REG
)

177 
	#UV__DT_FILE
 
DT_REG


	)

179 
	#UV__DT_FILE
 -1

	)

181 #i‡
	`deföed
(
DT_DIR
)

182 
	#UV__DT_DIR
 
DT_DIR


	)

184 
	#UV__DT_DIR
 -2

	)

186 #i‡
	`deföed
(
DT_LNK
)

187 
	#UV__DT_LINK
 
DT_LNK


	)

189 
	#UV__DT_LINK
 -3

	)

191 #i‡
	`deföed
(
DT_FIFO
)

192 
	#UV__DT_FIFO
 
DT_FIFO


	)

194 
	#UV__DT_FIFO
 -4

	)

196 #i‡
	`deföed
(
DT_SOCK
)

197 
	#UV__DT_SOCKET
 
DT_SOCK


	)

199 
	#UV__DT_SOCKET
 -5

	)

201 #i‡
	`deföed
(
DT_CHR
)

202 
	#UV__DT_CHAR
 
DT_CHR


	)

204 
	#UV__DT_CHAR
 -6

	)

206 #i‡
	`deföed
(
DT_BLK
)

207 
	#UV__DT_BLOCK
 
DT_BLK


	)

209 
	#UV__DT_BLOCK
 -7

	)

214 
	#UV_DYNAMIC


	)

217 * 
h™dÀ
;

218 * 
îrmsg
;

219 } 
	tuv_lib_t
;

221 
	#UV_LOOP_PRIVATE_FIELDS
 \

222 
Êags
; \

223 
backíd_fd
; \

224 * 
≥ndög_queue
[2]; \

225 * 
w©chî_queue
[2]; \

226 
uv__io_t
** 
w©chîs
; \

227 
nw©chîs
; \

228 
nfds
; \

229 * 
wq
[2]; \

230 
uv_muãx_t
 
wq_muãx
; \

231 
uv_async_t
 
wq_async
; \

232 
uv_rwlock_t
 
˛€xec_lock
; \

233 
uv_h™dÀ_t
* 
˛osög_h™dÀs
; \

234 * 
¥o˚ss_h™dÀs
[2]; \

235 * 
¥ï¨e_h™dÀs
[2]; \

236 * 
check_h™dÀs
[2]; \

237 * 
idÀ_h™dÀs
[2]; \

238 * 
async_h™dÀs
[2]; \

239 (*
async_unu£d
)(); \

240 
uv__io_t
 
async_io_w©chî
; \

241 
async_wfd
; \

243 * 
mö
; \

244 
√…s
; \

245 } 
timî_hóp
; \

246 
uöt64_t
 
timî_cou¡î
; \

247 
uöt64_t
 
time
; \

248 
sig«l_pùefd
[2]; \

249 
uv__io_t
 
sig«l_io_w©chî
; \

250 
uv_sig«l_t
 
chûd_w©chî
; \

251 
emfûe_fd
; \

252 
UV_PLATFORM_LOOP_FIELDS
 \

253 

	)

254 
	#UV_REQ_TYPE_PRIVATE


	)

256 
	#UV_REQ_PRIVATE_FIELDS


	)

258 
	#UV_PRIVATE_REQ_TYPES


	)

260 
	#UV_WRITE_PRIVATE_FIELDS
 \

261 * 
queue
[2]; \

262 
wrôe_ödex
; \

263 
uv_buf_t
* 
bufs
; \

264 
nbufs
; \

265 
îr‹
; \

266 
uv_buf_t
 
bufsml
[4]; \

267 

	)

268 
	#UV_CONNECT_PRIVATE_FIELDS
 \

269 * 
queue
[2]; \

270 

	)

271 
	#UV_SHUTDOWN_PRIVATE_FIELDS


	)

273 
	#UV_UDP_SEND_PRIVATE_FIELDS
 \

274 * 
queue
[2]; \

275 
sockaddr_°‹age
 
addr
; \

276 
nbufs
; \

277 
uv_buf_t
* 
bufs
; \

278 
ssize_t
 
°©us
; \

279 
uv_udp_£nd_cb
 
£nd_cb
; \

280 
uv_buf_t
 
bufsml
[4]; \

281 

	)

282 
	#UV_HANDLE_PRIVATE_FIELDS
 \

283 
uv_h™dÀ_t
* 
√xt_˛osög
; \

284 
Êags
; \

285 

	)

286 
	#UV_STREAM_PRIVATE_FIELDS
 \

287 
uv_c⁄√˘_t
 *
c⁄√˘_ªq
; \

288 
uv_shutdown_t
 *
shutdown_ªq
; \

289 
uv__io_t
 
io_w©chî
; \

290 * 
wrôe_queue
[2]; \

291 * 
wrôe_com∂ëed_queue
[2]; \

292 
uv_c⁄√˘i⁄_cb
 
c⁄√˘i⁄_cb
; \

293 
dñayed_îr‹
; \

294 
ac˚±ed_fd
; \

295 * 
queued_fds
; \

296 
UV_STREAM_PRIVATE_PLATFORM_FIELDS
 \

297 

	)

298 
	#UV_TCP_PRIVATE_FIELDS


	)

300 
	#UV_UDP_PRIVATE_FIELDS
 \

301 
uv_Æloc_cb
 
Æloc_cb
; \

302 
uv_udp_ªcv_cb
 
ªcv_cb
; \

303 
uv__io_t
 
io_w©chî
; \

304 * 
wrôe_queue
[2]; \

305 * 
wrôe_com∂ëed_queue
[2]; \

306 

	)

307 
	#UV_PIPE_PRIVATE_FIELDS
 \

308 c⁄° * 
pùe_‚ame
;

	)

310 
	#UV_POLL_PRIVATE_FIELDS
 \

311 
uv__io_t
 
io_w©chî
;

	)

313 
	#UV_PREPARE_PRIVATE_FIELDS
 \

314 
uv_¥ï¨e_cb
 
¥ï¨e_cb
; \

315 * 
queue
[2]; \

316 

	)

317 
	#UV_CHECK_PRIVATE_FIELDS
 \

318 
uv_check_cb
 
check_cb
; \

319 * 
queue
[2]; \

320 

	)

321 
	#UV_IDLE_PRIVATE_FIELDS
 \

322 
uv_idÀ_cb
 
idÀ_cb
; \

323 * 
queue
[2]; \

324 

	)

325 
	#UV_ASYNC_PRIVATE_FIELDS
 \

326 
uv_async_cb
 
async_cb
; \

327 * 
queue
[2]; \

328 
≥ndög
; \

329 

	)

330 
	#UV_TIMER_PRIVATE_FIELDS
 \

331 
uv_timî_cb
 
timî_cb
; \

332 * 
hóp_node
[3]; \

333 
uöt64_t
 
timeout
; \

334 
uöt64_t
 
ª≥©
; \

335 
uöt64_t
 
°¨t_id
;

	)

337 
	#UV_GETADDRINFO_PRIVATE_FIELDS
 \

338 
uv__w‹k
 
w‹k_ªq
; \

339 
uv_gëaddröfo_cb
 
cb
; \

340 
addröfo
* 
höts
; \

341 * 
ho°«me
; \

342 * 
£rvi˚
; \

343 
addröfo
*áddrinfo; \

344 
ªtcode
;

	)

346 
	#UV_GETNAMEINFO_PRIVATE_FIELDS
 \

347 
uv__w‹k
 
w‹k_ªq
; \

348 
uv_gë«meöfo_cb
 
gë«meöfo_cb
; \

349 
sockaddr_°‹age
 
°‹age
; \

350 
Êags
; \

351 
ho°
[
NI_MAXHOST
]; \

352 
£rvi˚
[
NI_MAXSERV
]; \

353 
ªtcode
;

	)

355 
	#UV_PROCESS_PRIVATE_FIELDS
 \

356 * 
queue
[2]; \

357 
°©us
; \

358 

	)

359 
	#UV_FS_PRIVATE_FIELDS
 \

360 c⁄° *
√w_∑th
; \

361 
uv_fûe
 
fûe
; \

362 
Êags
; \

363 
mode_t
 
mode
; \

364 
nbufs
; \

365 
uv_buf_t
* 
bufs
; \

366 
off_t
 
off
; \

367 
uv_uid_t
 
uid
; \

368 
uv_gid_t
 
gid
; \

369 
©ime
; \

370 
mtime
; \

371 
uv__w‹k
 
w‹k_ªq
; \

372 
uv_buf_t
 
bufsml
[4]; \

373 

	)

374 
	#UV_WORK_PRIVATE_FIELDS
 \

375 
uv__w‹k
 
w‹k_ªq
;

	)

377 
	#UV_TTY_PRIVATE_FIELDS
 \

378 
ãrmios
 
‹ig_ãrmios
; \

379 
mode
;

	)

381 
	#UV_SIGNAL_PRIVATE_FIELDS
 \

384 
uv_sig«l_s
* 
rbe_À·
; \

385 
uv_sig«l_s
* 
rbe_right
; \

386 
uv_sig«l_s
* 
rbe_∑ª¡
; \

387 
rbe_cﬁ‹
; \

388 } 
åì_íåy
; \

390 
ˇught_sig«ls
; \

391 
di•©ched_sig«ls
;

	)

393 
	#UV_FS_EVENT_PRIVATE_FIELDS
 \

394 
uv_fs_evít_cb
 
cb
; \

395 
UV_PLATFORM_FS_EVENT_FIELDS
 \

396 

	)

398 #i‡
	`deföed
(
O_APPEND
)

399 
	#UV_FS_O_APPEND
 
O_APPEND


	)

401 
	#UV_FS_O_APPEND
 0

	)

403 #i‡
	`deföed
(
O_CREAT
)

404 
	#UV_FS_O_CREAT
 
O_CREAT


	)

406 
	#UV_FS_O_CREAT
 0

	)

409 #i‡
	`deföed
(
__löux__
Ë&& deföed(
__¨m__
)

410 
	#UV_FS_O_DIRECT
 0x10000

	)

411 #ñi‡
	`deföed
(
__löux__
Ë&& deföed(
__m68k__
)

412 
	#UV_FS_O_DIRECT
 0x10000

	)

413 #ñi‡
	`deföed
(
__löux__
Ë&& deföed(
__mùs__
)

414 
	#UV_FS_O_DIRECT
 0x08000

	)

415 #ñi‡
	`deföed
(
__löux__
Ë&& deföed(
__powîpc__
)

416 
	#UV_FS_O_DIRECT
 0x20000

	)

417 #ñi‡
	`deföed
(
__löux__
Ë&& deföed(
__s390x__
)

418 
	#UV_FS_O_DIRECT
 0x04000

	)

419 #ñi‡
	`deföed
(
__löux__
Ë&& deföed(
__x86_64__
)

420 
	#UV_FS_O_DIRECT
 0x04000

	)

421 #ñi‡
	`deföed
(
O_DIRECT
)

422 
	#UV_FS_O_DIRECT
 
O_DIRECT


	)

424 
	#UV_FS_O_DIRECT
 0

	)

427 #i‡
	`deföed
(
O_DIRECTORY
)

428 
	#UV_FS_O_DIRECTORY
 
O_DIRECTORY


	)

430 
	#UV_FS_O_DIRECTORY
 0

	)

432 #i‡
	`deföed
(
O_DSYNC
)

433 
	#UV_FS_O_DSYNC
 
O_DSYNC


	)

435 
	#UV_FS_O_DSYNC
 0

	)

437 #i‡
	`deföed
(
O_EXCL
)

438 
	#UV_FS_O_EXCL
 
O_EXCL


	)

440 
	#UV_FS_O_EXCL
 0

	)

442 #i‡
	`deföed
(
O_EXLOCK
)

443 
	#UV_FS_O_EXLOCK
 
O_EXLOCK


	)

445 
	#UV_FS_O_EXLOCK
 0

	)

447 #i‡
	`deföed
(
O_NOATIME
)

448 
	#UV_FS_O_NOATIME
 
O_NOATIME


	)

450 
	#UV_FS_O_NOATIME
 0

	)

452 #i‡
	`deföed
(
O_NOCTTY
)

453 
	#UV_FS_O_NOCTTY
 
O_NOCTTY


	)

455 
	#UV_FS_O_NOCTTY
 0

	)

457 #i‡
	`deföed
(
O_NOFOLLOW
)

458 
	#UV_FS_O_NOFOLLOW
 
O_NOFOLLOW


	)

460 
	#UV_FS_O_NOFOLLOW
 0

	)

462 #i‡
	`deföed
(
O_NONBLOCK
)

463 
	#UV_FS_O_NONBLOCK
 
O_NONBLOCK


	)

465 
	#UV_FS_O_NONBLOCK
 0

	)

467 #i‡
	`deföed
(
O_RDONLY
)

468 
	#UV_FS_O_RDONLY
 
O_RDONLY


	)

470 
	#UV_FS_O_RDONLY
 0

	)

472 #i‡
	`deföed
(
O_RDWR
)

473 
	#UV_FS_O_RDWR
 
O_RDWR


	)

475 
	#UV_FS_O_RDWR
 0

	)

477 #i‡
	`deföed
(
O_SYMLINK
)

478 
	#UV_FS_O_SYMLINK
 
O_SYMLINK


	)

480 
	#UV_FS_O_SYMLINK
 0

	)

482 #i‡
	`deföed
(
O_SYNC
)

483 
	#UV_FS_O_SYNC
 
O_SYNC


	)

485 
	#UV_FS_O_SYNC
 0

	)

487 #i‡
	`deföed
(
O_TRUNC
)

488 
	#UV_FS_O_TRUNC
 
O_TRUNC


	)

490 
	#UV_FS_O_TRUNC
 0

	)

492 #i‡
	`deföed
(
O_WRONLY
)

493 
	#UV_FS_O_WRONLY
 
O_WRONLY


	)

495 
	#UV_FS_O_WRONLY
 0

	)

499 
	#UV_FS_O_FILEMAP
 0

	)

500 
	#UV_FS_O_RANDOM
 0

	)

501 
	#UV_FS_O_SHORT_LIVED
 0

	)

502 
	#UV_FS_O_SEQUENTIAL
 0

	)

503 
	#UV_FS_O_TEMPORARY
 0

	)

	@/usr/include/uv/version.h

22 #i‚de‡
UV_VERSION_H


23 
	#UV_VERSION_H


	)

33 
	#UV_VERSION_MAJOR
 1

	)

34 
	#UV_VERSION_MINOR
 43

	)

35 
	#UV_VERSION_PATCH
 0

	)

36 
	#UV_VERSION_IS_RELEASE
 1

	)

37 
	#UV_VERSION_SUFFIX
 ""

	)

39 
	#UV_VERSION_HEX
 ((
UV_VERSION_MAJOR
 << 16) | \

40 (
UV_VERSION_MINOR
 << 8) | \

41 (
UV_VERSION_PATCH
))

	)

	@/usr/include/uv/win.h

22 #i‚de‡
_WIN32_WINNT


23 
	#_WIN32_WINNT
 0x0600

	)

26 #i‡!
deföed
(
_SSIZE_T_
Ë&& !deföed(
_SSIZE_T_DEFINED
)

27 
öçå_t
 
	tssize_t
;

28 
	#SSIZE_MAX
 
INTPTR_MAX


	)

29 
	#_SSIZE_T_


	)

30 
	#_SSIZE_T_DEFINED


	)

33 
	~<wösock2.h
>

35 #i‡
deföed
(
__MINGW32__
Ë&& !deföed(
__MINGW64_VERSION_MAJOR
)

36 
	spﬁlfd
 {

37 
SOCKET
 
	mfd
;

38 
	mevíts
;

39 
	mªvíts
;

40 } 
	tWSAPOLLFD
, *
	tPWSAPOLLFD
, *
	tLPWSAPOLLFD
;

43 #i‚de‡
LOCALE_INVARIANT


44 
	#LOCALE_INVARIANT
 0x007f

	)

47 
	~<mswsock.h
>

49 
	#_TCP_INITIAL_RTO_PARAMETERS
 
_TCP_INITIAL_RTO_PARAMETERS__AVOID


	)

50 
	#TCP_INITIAL_RTO_PARAMETERS
 
TCP_INITIAL_RTO_PARAMETERS__AVOID


	)

51 
	#PTCP_INITIAL_RTO_PARAMETERS
 
PTCP_INITIAL_RTO_PARAMETERS__AVOID


	)

52 
	~<ws2t˝ù.h
>

53 #unde‡
_TCP_INITIAL_RTO_PARAMETERS


54 #unde‡
TCP_INITIAL_RTO_PARAMETERS


55 #unde‡
PTCP_INITIAL_RTO_PARAMETERS


56 
	~<wödows.h
>

58 
	~<¥o˚ss.h
>

59 
	~<sig«l.h
>

60 
	~<f˙é.h
>

61 
	~<sys/°©.h
>

63 #i‡
deföed
(
_MSC_VER
) && _MSC_VER < 1600

64 
	~"uv/°döt-msvc2008.h
"

66 
	~<°döt.h
>

69 
	~"uv/åì.h
"

70 
	~"uv/thªadpoﬁ.h
"

72 
	#MAX_PIPENAME_LEN
 256

	)

74 #i‚de‡
S_IFLNK


75 
	#S_IFLNK
 0xA000

	)

93 
	#SIGHUP
 1

	)

94 
	#SIGKILL
 9

	)

95 
	#SIGWINCH
 28

	)

98 #i‡
deföed
(
NSIG
Ë&& NSIG <
SIGWINCH


99 #unde‡
NSIG


101 #i‚de‡
NSIG


102 
	#NSIG
 
SIGWINCH
 + 1

	)

107 #i‚de‡
SIGABRT_COMPAT


108 
	#SIGABRT_COMPAT
 6

	)

115 #i‚de‡
WSAID_ACCEPTEX


116 
	#WSAID_ACCEPTEX
 \

118 {0x95, 0xˇ, 0x00, 0x80, 0x5f, 0x48, 0xa1, 0x92}}

	)

120 
	#WSAID_CONNECTEX
 \

122 {0x8e, 0xe9, 0x76, 0xe5, 0x8c, 0x74, 0x06, 0x3e}}

	)

124 
	#WSAID_GETACCEPTEXSOCKADDRS
 \

126 {0x95, 0xˇ, 0x00, 0x80, 0x5f, 0x48, 0xa1, 0x92}}

	)

128 
	#WSAID_DISCONNECTEX
 \

130 {0xa0, 0x31, 0xf5, 0x36, 0xa6, 0xì, 0xc1, 0x57}}

	)

132 
	#WSAID_TRANSMITFILE
 \

134 {0x95, 0xˇ, 0x00, 0x80, 0x5f, 0x48, 0xa1, 0x92}}

	)

136 
	$BOOL
 (
	tPASCAL
 *
	tLPFN_ACCEPTEX
)

137 (
	tSOCKET
 
	tsLi°íSockë
,

138 
	tSOCKET
 
	tsAc˚±Sockë
,

139 
	tPVOID
 
	tÕOuçutBuf„r
,

140 
	tDWORD
 
	tdwRe˚iveD©aLígth
,

141 
	tDWORD
 
	tdwLoˇlAddªssLígth
,

142 
	tDWORD
 
	tdwRemŸeAddªssLígth
,

143 
	tLPDWORD
 
	tÕdwByãsRe˚ived
,

144 
	tLPOVERLAPPED
 
	tÕOvîœµed
);

146 
	$BOOL
 (
	tPASCAL
 *
	tLPFN_CONNECTEX
)

147 (
	tSOCKET
 
	ts
,

148 c⁄° 
	tsockaddr
* 
	t«me
,

149 
	t«mñí
,

150 
	tPVOID
 
	tÕSídBuf„r
,

151 
	tDWORD
 
	tdwSídD©aLígth
,

152 
	tLPDWORD
 
	tÕdwByãsSít
,

153 
	tLPOVERLAPPED
 
	tÕOvîœµed
);

155 (
	tPASCAL
 *
	tLPFN_GETACCEPTEXSOCKADDRS
)

156 (
	tPVOID
 
	tÕOuçutBuf„r
,

157 
	tDWORD
 
	tdwRe˚iveD©aLígth
,

158 
	tDWORD
 
	tdwLoˇlAddªssLígth
,

159 
	tDWORD
 
	tdwRemŸeAddªssLígth
,

160 
	tLPSOCKADDR
* 
	tLoˇlSockaddr
,

161 
	tLPINT
 
	tLoˇlSockaddrLígth
,

162 
	tLPSOCKADDR
* 
	tRemŸeSockaddr
,

163 
	tLPINT
 
	tRemŸeSockaddrLígth
);

165 
	$BOOL
 (
	tPASCAL
 *
	tLPFN_DISCONNECTEX
)

166 (
	tSOCKET
 
	thSockë
,

167 
	tLPOVERLAPPED
 
	tÕOvîœµed
,

168 
	tDWORD
 
	tdwFœgs
,

169 
	tDWORD
 
	tª£rved
);

171 
	$BOOL
 (
	tPASCAL
 *
	tLPFN_TRANSMITFILE
)

172 (
	tSOCKET
 
	thSockë
,

173 
	tHANDLE
 
	thFûe
,

174 
	tDWORD
 
	tnNumbîOfByãsToWrôe
,

175 
	tDWORD
 
	tnNumbîOfByãsPîSíd
,

176 
	tLPOVERLAPPED
 
	tÕOvîœµed
,

177 
	tLPTRANSMIT_FILE_BUFFERS
 
	tÕTønsmôBuf„rs
,

178 
	tDWORD
 
	tdwFœgs
);

180 
PVOID
 
	tRTL_SRWLOCK
;

181 
RTL_SRWLOCK
 
	tSRWLOCK
, *
	tPSRWLOCK
;

184 (
	tWSAAPI
* 
	tLPFN_WSARECV
)

185 (
	tSOCKET
 
	tsockë
,

186 
	tLPWSABUF
 
	tbuf„rs
,

187 
	tDWORD
 
	tbuf„r_cou¡
,

188 
	tLPDWORD
 
	tbyãs
,

189 
	tLPDWORD
 
	tÊags
,

190 
	tLPWSAOVERLAPPED
 
	tovîœµed
,

191 
	tLPWSAOVERLAPPED_COMPLETION_ROUTINE
 
	tcom∂ëi⁄_routöe
);

193 (
	tWSAAPI
* 
	tLPFN_WSARECVFROM
)

194 (
	tSOCKET
 
	tsockë
,

195 
	tLPWSABUF
 
	tbuf„rs
,

196 
	tDWORD
 
	tbuf„r_cou¡
,

197 
	tLPDWORD
 
	tbyãs
,

198 
	tLPDWORD
 
	tÊags
,

199 
	tsockaddr
* 
	taddr
,

200 
	tLPINT
 
	taddr_Àn
,

201 
	tLPWSAOVERLAPPED
 
	tovîœµed
,

202 
	tLPWSAOVERLAPPED_COMPLETION_ROUTINE
 
	tcom∂ëi⁄_routöe
);

204 #i‚de‡
_NTDEF_


205 
LONG
 
	tNTSTATUS
;

206 
NTSTATUS
 *
	tPNTSTATUS
;

209 #i‚de‡
RTL_CONDITION_VARIABLE_INIT


210 
PVOID
 
	tCONDITION_VARIABLE
, *
	tPCONDITION_VARIABLE
;

213 
	s_AFD_POLL_HANDLE_INFO
 {

214 
HANDLE
 
H™dÀ
;

215 
ULONG
 
Evíts
;

216 
NTSTATUS
 
Sètus
;

217 } 
	tAFD_POLL_HANDLE_INFO
, *
	tPAFD_POLL_HANDLE_INFO
;

219 
	s_AFD_POLL_INFO
 {

220 
LARGE_INTEGER
 
Timeout
;

221 
ULONG
 
NumbîOfH™dÀs
;

222 
ULONG
 
Ex˛usive
;

223 
AFD_POLL_HANDLE_INFO
 
H™dÀs
[1];

224 } 
	tAFD_POLL_INFO
, *
	tPAFD_POLL_INFO
;

226 
	#UV_MSAFD_PROVIDER_COUNT
 3

	)

233 
	suv_buf_t
 {

234 
ULONG
 
Àn
;

235 * 
ba£
;

236 } 
	tuv_buf_t
;

238 
	tuv_fûe
;

239 
SOCKET
 
	tuv_os_sock_t
;

240 
HANDLE
 
	tuv_os_fd_t
;

241 
	tuv_pid_t
;

243 
HANDLE
 
	tuv_thªad_t
;

245 
HANDLE
 
	tuv_£m_t
;

247 
CRITICAL_SECTION
 
	tuv_muãx_t
;

257 
CONDITION_VARIABLE
 
c⁄d_v¨
;

259 
waôîs_cou¡
;

260 
CRITICAL_SECTION
 
waôîs_cou¡_lock
;

261 
HANDLE
 
sig«l_evít
;

262 
HANDLE
 
brﬂdˇ°_evít
;

263 } 
unu£d_
;

264 } 
	tuv_c⁄d_t
;

268 
num_ªadîs_
;

269 
CRITICAL_SECTION
 
num_ªadîs_lock_
;

270 
HANDLE
 
wrôe_£m≠h‹e_
;

271 } 
°©e_
;

274 
SRWLOCK
 
unu£d_
;

275 } 
unu£d1_
;

278 
uv_muãx_t
 
unu£d1_
;

279 
uv_muãx_t
 
unu£d2_
;

280 } 
unu£d2_
;

281 } 
	tuv_rwlock_t
;

284 
n
;

285 
cou¡
;

286 
uv_muãx_t
 
muãx
;

287 
uv_£m_t
 
tu∫°ûe1
;

288 
uv_£m_t
 
tu∫°ûe2
;

289 } 
	tuv_b¨rõr_t
;

292 
DWORD
 
és_ödex
;

293 } 
	tuv_key_t
;

295 
	#UV_ONCE_INIT
 { 0, 
NULL
 
	}

	)
}

297 
	suv_⁄˚_s
 {

298 
	møn
;

299 
HANDLE
 
	mevít
;

300 } 
	tuv_⁄˚_t
;

303 
	tuv_uid_t
;

304 
	tuv_gid_t
;

306 
	suv__dúít_s
 {

307 
	md_ty≥
;

308 
	md_«me
[1];

309 } 
	tuv__dúít_t
;

311 
	#UV_DIR_PRIVATE_FIELDS
 \

312 
HANDLE
 
dú_h™dÀ
; \

313 
WIN32_FIND_DATAW
 
föd_d©a
; \

314 
BOOL
 
√ed_föd_ˇŒ
;

	)

316 
	#HAVE_DIRENT_TYPES


	)

317 
	#UV__DT_DIR
 
UV_DIRENT_DIR


	)

318 
	#UV__DT_FILE
 
UV_DIRENT_FILE


	)

319 
	#UV__DT_LINK
 
UV_DIRENT_LINK


	)

320 
	#UV__DT_FIFO
 
UV_DIRENT_FIFO


	)

321 
	#UV__DT_SOCKET
 
UV_DIRENT_SOCKET


	)

322 
	#UV__DT_CHAR
 
UV_DIRENT_CHAR


	)

323 
	#UV__DT_BLOCK
 
UV_DIRENT_BLOCK


	)

326 
	#UV_DYNAMIC
 
FAR
 
WINAPI


	)

328 
HMODULE
 
	mh™dÀ
;

329 * 
	mîrmsg
;

330 } 
	tuv_lib_t
;

332 
	#UV_LOOP_PRIVATE_FIELDS
 \

334 
HANDLE
 
io˝
; \

336 
uöt64_t
 
time
; \

340 
uv_ªq_t
* 
≥ndög_ªqs_èû
; \

342 
uv_h™dÀ_t
* 
ídgame_h™dÀs
; \

344 * 
timî_hóp
; \

346 
uv_¥ï¨e_t
* 
¥ï¨e_h™dÀs
; \

347 
uv_check_t
* 
check_h™dÀs
; \

348 
uv_idÀ_t
* 
idÀ_h™dÀs
; \

353 
uv_¥ï¨e_t
* 
√xt_¥ï¨e_h™dÀ
; \

354 
uv_check_t
* 
√xt_check_h™dÀ
; \

355 
uv_idÀ_t
* 
√xt_idÀ_h™dÀ
; \

357 
SOCKET
 
pﬁl_≥î_sockës
[
UV_MSAFD_PROVIDER_COUNT
]; \

359 
a˘ive_t˝_°ªams
; \

361 
a˘ive_udp_°ªams
; \

363 
uöt64_t
 
timî_cou¡î
; \

365 * 
wq
[2]; \

366 
uv_muãx_t
 
wq_muãx
; \

367 
uv_async_t
 
wq_async
;

	)

369 
	#UV_REQ_TYPE_PRIVATE
 \

371 
UV_ACCEPT
, \

372 
UV_FS_EVENT_REQ
, \

373 
UV_POLL_REQ
, \

374 
UV_PROCESS_EXIT
, \

375 
UV_READ
, \

376 
UV_UDP_RECV
, \

377 
UV_WAKEUP
, \

378 
UV_SIGNAL_REQ
,

	)

380 
	#UV_REQ_PRIVATE_FIELDS
 \

384 
OVERLAPPED
 
ovîœµed
; \

385 
size_t
 
queued_byãs
; \

386 } 
io
; \

387 } 
u
; \

388 
uv_ªq_s
* 
√xt_ªq
;

	)

390 
	#UV_WRITE_PRIVATE_FIELDS
 \

391 
cﬂÀs˚d
; \

392 
uv_buf_t
 
wrôe_buf„r
; \

393 
HANDLE
 
evít_h™dÀ
; \

394 
HANDLE
 
waô_h™dÀ
;

	)

396 
	#UV_CONNECT_PRIVATE_FIELDS
 \

397 

	)

399 
	#UV_SHUTDOWN_PRIVATE_FIELDS
 \

400 

	)

402 
	#UV_UDP_SEND_PRIVATE_FIELDS
 \

403 

	)

405 
	#UV_PRIVATE_REQ_TYPES
 \

406 
	suv_pùe_ac˚±_s
 { \

407 
UV_REQ_FIELDS
 \

408 
HANDLE
 
pùeH™dÀ
; \

409 
uv_pùe_ac˚±_s
* 
√xt_≥ndög
; \

410 } 
	tuv_pùe_ac˚±_t
; \

412 
	suv_t˝_ac˚±_s
 { \

413 
UV_REQ_FIELDS
 \

414 
SOCKET
 
ac˚±_sockë
; \

415 
ac˚±_buf„r
[(
sockaddr_°‹age
) * 2 + 32]; \

416 
HANDLE
 
evít_h™dÀ
; \

417 
HANDLE
 
waô_h™dÀ
; \

418 
uv_t˝_ac˚±_s
* 
√xt_≥ndög
; \

419 } 
	tuv_t˝_ac˚±_t
; \

421 
	suv_ªad_s
 { \

422 
UV_REQ_FIELDS
 \

423 
HANDLE
 
evít_h™dÀ
; \

424 
HANDLE
 
waô_h™dÀ
; \

425 } 
	tuv_ªad_t
;

	)

427 
	#uv_°ªam_c⁄√˘i⁄_fõlds
 \

428 
wrôe_ªqs_≥ndög
; \

429 
uv_shutdown_t
* 
shutdown_ªq
;

	)

431 
	#uv_°ªam_£rvî_fõlds
 \

432 
uv_c⁄√˘i⁄_cb
 
c⁄√˘i⁄_cb
;

	)

434 
	#UV_STREAM_PRIVATE_FIELDS
 \

435 
ªqs_≥ndög
; \

436 
a˘ive˙t
; \

437 
uv_ªad_t
 
ªad_ªq
; \

439 °ru˘ { 
uv_°ªam_c⁄√˘i⁄_fõlds
 } 
c⁄n
; \

440 °ru˘ { 
uv_°ªam_£rvî_fõlds
 } 
£rv
; \

441 } 
°ªam
;

	)

443 
	#uv_t˝_£rvî_fõlds
 \

444 
uv_t˝_ac˚±_t
* 
ac˚±_ªqs
; \

445 
¥o˚s£d_ac˚±s
; \

446 
uv_t˝_ac˚±_t
* 
≥ndög_ac˚±s
; \

447 
LPFN_ACCEPTEX
 
func_ac˚±ex
;

	)

449 
	#uv_t˝_c⁄√˘i⁄_fõlds
 \

450 
uv_buf_t
 
ªad_buf„r
; \

451 
LPFN_CONNECTEX
 
func_c⁄√˘ex
;

	)

453 
	#UV_TCP_PRIVATE_FIELDS
 \

454 
SOCKET
 
sockë
; \

455 
dñayed_îr‹
; \

457 °ru˘ { 
uv_t˝_£rvî_fõlds
 } 
£rv
; \

458 °ru˘ { 
uv_t˝_c⁄√˘i⁄_fõlds
 } 
c⁄n
; \

459 } 
t˝
;

	)

461 
	#UV_UDP_PRIVATE_FIELDS
 \

462 
SOCKET
 
sockë
; \

463 
ªqs_≥ndög
; \

464 
a˘ive˙t
; \

465 
uv_ªq_t
 
ªcv_ªq
; \

466 
uv_buf_t
 
ªcv_buf„r
; \

467 
sockaddr_°‹age
 
ªcv_‰om
; \

468 
ªcv_‰om_Àn
; \

469 
uv_udp_ªcv_cb
 
ªcv_cb
; \

470 
uv_Æloc_cb
 
Æloc_cb
; \

471 
LPFN_WSARECV
 
func_wßªcv
; \

472 
LPFN_WSARECVFROM
 
func_wßªcv‰om
;

	)

474 
	#uv_pùe_£rvî_fõlds
 \

475 
≥ndög_ö°™˚s
; \

476 
uv_pùe_ac˚±_t
* 
ac˚±_ªqs
; \

477 
uv_pùe_ac˚±_t
* 
≥ndög_ac˚±s
;

	)

479 
	#uv_pùe_c⁄√˘i⁄_fõlds
 \

480 
uv_timî_t
* 
eof_timî
; \

481 
uv_wrôe_t
 
dummy
; \

482 
DWORD
 
ùc_ªmŸe_pid
; \

484 
uöt32_t
 
∑ylﬂd_ªmaöög
; \

485 
uöt64_t
 
dummy
; \

486 } 
ùc_d©a_‰ame
; \

487 * 
ùc_x„r_queue
[2]; \

488 
ùc_x„r_queue_Àngth
; \

489 
uv_wrôe_t
* 
n⁄_ovîœµed_wrôes_èû
; \

490 
CRITICAL_SECTION
 
ªadfûe_thªad_lock
; \

491 vﬁ©ûê
HANDLE
 
ªadfûe_thªad_h™dÀ
;

	)

493 
	#UV_PIPE_PRIVATE_FIELDS
 \

494 
HANDLE
 
h™dÀ
; \

495 
WCHAR
* 
«me
; \

497 °ru˘ { 
uv_pùe_£rvî_fõlds
 } 
£rv
; \

498 °ru˘ { 
uv_pùe_c⁄√˘i⁄_fõlds
 } 
c⁄n
; \

499 } 
pùe
;

	)

503 
	#UV_TTY_PRIVATE_FIELDS
 \

504 
HANDLE
 
h™dÀ
; \

509 
HANDLE
 
unu£d_
; \

510 
uv_buf_t
 
ªad_löe_buf„r
; \

511 
HANDLE
 
ªad_øw_waô
; \

513 
œ°_key
[8]; \

514 
œ°_key_off£t
; \

515 
œ°_key_Àn
; \

516 
WCHAR
 
œ°_utf16_high_suºog©e
; \

517 
INPUT_RECORD
 
œ°_öput_ªc‹d
; \

518 } 
rd
; \

522 
utf8_codïoöt
; \

523 
utf8_byãs_À·
; \

525 
¥evious_eﬁ
; \

527 
™si_∑r£r_°©e
; \

528 
™si_csi_¨gc
; \

529 
™si_csi_¨gv
[4]; \

530 
COORD
 
ßved_posôi⁄
; \

531 
WORD
 
ßved_©åibuãs
; \

532 } 
wr
; \

533 } 
ây
;

	)

535 
	#UV_POLL_PRIVATE_FIELDS
 \

536 
SOCKET
 
sockë
; \

538 
SOCKET
 
≥î_sockë
; \

539 
AFD_POLL_INFO
 
afd_pﬁl_öfo_1
; \

540 
AFD_POLL_INFO
 
afd_pﬁl_öfo_2
; \

542 
uv_ªq_t
 
pﬁl_ªq_1
; \

543 
uv_ªq_t
 
pﬁl_ªq_2
; \

544 
submôãd_evíts_1
; \

545 
submôãd_evíts_2
; \

546 
mask_evíts_1
; \

547 
mask_evíts_2
; \

548 
evíts
;

	)

550 
	#UV_TIMER_PRIVATE_FIELDS
 \

551 * 
hóp_node
[3]; \

552 
unu£d
; \

553 
uöt64_t
 
timeout
; \

554 
uöt64_t
 
ª≥©
; \

555 
uöt64_t
 
°¨t_id
; \

556 
uv_timî_cb
 
timî_cb
;

	)

558 
	#UV_ASYNC_PRIVATE_FIELDS
 \

559 
uv_ªq_s
 
async_ªq
; \

560 
uv_async_cb
 
async_cb
; \

562 vﬁ©ûê
async_£¡
;

	)

564 
	#UV_PREPARE_PRIVATE_FIELDS
 \

565 
uv_¥ï¨e_t
* 
¥ï¨e_¥ev
; \

566 
uv_¥ï¨e_t
* 
¥ï¨e_√xt
; \

567 
uv_¥ï¨e_cb
 
¥ï¨e_cb
;

	)

569 
	#UV_CHECK_PRIVATE_FIELDS
 \

570 
uv_check_t
* 
check_¥ev
; \

571 
uv_check_t
* 
check_√xt
; \

572 
uv_check_cb
 
check_cb
;

	)

574 
	#UV_IDLE_PRIVATE_FIELDS
 \

575 
uv_idÀ_t
* 
idÀ_¥ev
; \

576 
uv_idÀ_t
* 
idÀ_√xt
; \

577 
uv_idÀ_cb
 
idÀ_cb
;

	)

579 
	#UV_HANDLE_PRIVATE_FIELDS
 \

580 
uv_h™dÀ_t
* 
ídgame_√xt
; \

581 
Êags
;

	)

583 
	#UV_GETADDRINFO_PRIVATE_FIELDS
 \

584 
uv__w‹k
 
w‹k_ªq
; \

585 
uv_gëaddröfo_cb
 
gëaddröfo_cb
; \

586 * 
Æloc
; \

587 
WCHAR
* 
node
; \

588 
WCHAR
* 
£rvi˚
; \

592 
addröfoW
* 
addröfow
; \

593 
addröfo
*áddrinfo; \

594 
ªtcode
;

	)

596 
	#UV_GETNAMEINFO_PRIVATE_FIELDS
 \

597 
uv__w‹k
 
w‹k_ªq
; \

598 
uv_gë«meöfo_cb
 
gë«meöfo_cb
; \

599 
sockaddr_°‹age
 
°‹age
; \

600 
Êags
; \

601 
ho°
[
NI_MAXHOST
]; \

602 
£rvi˚
[
NI_MAXSERV
]; \

603 
ªtcode
;

	)

605 
	#UV_PROCESS_PRIVATE_FIELDS
 \

606 
	suv_¥o˚ss_exô_s
 { \

607 
UV_REQ_FIELDS
 \

608 } 
exô_ªq
; \

609 
BYTE
* 
chûd_°dio_buf„r
; \

610 
exô_sig«l
; \

611 
HANDLE
 
waô_h™dÀ
; \

612 
HANDLE
 
¥o˚ss_h™dÀ
; \

613 vﬁ©ûê
exô_cb_≥ndög
;

	)

615 
	#UV_FS_PRIVATE_FIELDS
 \

616 
uv__w‹k
 
w‹k_ªq
; \

617 
Êags
; \

618 
DWORD
 
sys_î∫o_
; \

621 
WCHAR
* 
∑thw
; \

622 
fd
; \

623 } 
fûe
; \

626 
mode
; \

627 
WCHAR
* 
√w_∑thw
; \

628 
fûe_Êags
; \

629 
fd_out
; \

630 
nbufs
; \

631 
uv_buf_t
* 
bufs
; \

632 
öt64_t
 
off£t
; \

633 
uv_buf_t
 
bufsml
[4]; \

634 } 
öfo
; \

636 
©ime
; \

637 
mtime
; \

638 } 
time
; \

639 } 
fs
;

	)

641 
	#UV_WORK_PRIVATE_FIELDS
 \

642 
uv__w‹k
 
w‹k_ªq
;

	)

644 
	#UV_FS_EVENT_PRIVATE_FIELDS
 \

645 
	suv_fs_evít_ªq_s
 { \

646 
UV_REQ_FIELDS
 \

647 } 
ªq
; \

648 
HANDLE
 
dú_h™dÀ
; \

649 
ªq_≥ndög
; \

650 
uv_fs_evít_cb
 
cb
; \

651 
WCHAR
* 
fûew
; \

652 
WCHAR
* 
sh‹t_fûew
; \

653 
WCHAR
* 
dúw
; \

654 * 
buf„r
;

	)

656 
	#UV_SIGNAL_PRIVATE_FIELDS
 \

657 
	`RB_ENTRY
(
uv_sig«l_s
Ë
åì_íåy
; \

658 
uv_ªq_s
 
sig«l_ªq
; \

659 
≥ndög_signum
;

	)

661 #i‚de‡
F_OK


662 
	#F_OK
 0

	)

664 #i‚de‡
R_OK


665 
	#R_OK
 4

	)

667 #i‚de‡
W_OK


668 
	#W_OK
 2

	)

670 #i‚de‡
X_OK


671 
	#X_OK
 1

	)

675 
	#UV_FS_O_APPEND
 
_O_APPEND


	)

676 
	#UV_FS_O_CREAT
 
_O_CREAT


	)

677 
	#UV_FS_O_EXCL
 
_O_EXCL


	)

678 
	#UV_FS_O_FILEMAP
 0x20000000

	)

679 
	#UV_FS_O_RANDOM
 
_O_RANDOM


	)

680 
	#UV_FS_O_RDONLY
 
_O_RDONLY


	)

681 
	#UV_FS_O_RDWR
 
_O_RDWR


	)

682 
	#UV_FS_O_SEQUENTIAL
 
_O_SEQUENTIAL


	)

683 
	#UV_FS_O_SHORT_LIVED
 
_O_SHORT_LIVED


	)

684 
	#UV_FS_O_TEMPORARY
 
_O_TEMPORARY


	)

685 
	#UV_FS_O_TRUNC
 
_O_TRUNC


	)

686 
	#UV_FS_O_WRONLY
 
_O_WRONLY


	)

689 
	#UV_FS_O_DIRECT
 0x02000000

	)

690 
	#UV_FS_O_DIRECTORY
 0

	)

691 
	#UV_FS_O_DSYNC
 0x04000000

	)

692 
	#UV_FS_O_EXLOCK
 0x10000000

	)

693 
	#UV_FS_O_NOATIME
 0

	)

694 
	#UV_FS_O_NOCTTY
 0

	)

695 
	#UV_FS_O_NOFOLLOW
 0

	)

696 
	#UV_FS_O_NONBLOCK
 0

	)

697 
	#UV_FS_O_SYMLINK
 0

	)

698 
	#UV_FS_O_SYNC
 0x08000000

	)

	@/usr/include/video/edid.h

2 #i‚de‡
__löux_video_edid_h__


3 
	#__löux_video_edid_h__


	)

5 
	sedid_öfo
 {

6 
	mdummy
[128];

	@/usr/include/asm-generic/errno-base.h

2 #i‚de‡
_ASM_GENERIC_ERRNO_BASE_H


3 
	#_ASM_GENERIC_ERRNO_BASE_H


	)

5 
	#EPERM
 1

	)

6 
	#ENOENT
 2

	)

7 
	#ESRCH
 3

	)

8 
	#EINTR
 4

	)

9 
	#EIO
 5

	)

10 
	#ENXIO
 6

	)

11 
	#E2BIG
 7

	)

12 
	#ENOEXEC
 8

	)

13 
	#EBADF
 9

	)

14 
	#ECHILD
 10

	)

15 
	#EAGAIN
 11

	)

16 
	#ENOMEM
 12

	)

17 
	#EACCES
 13

	)

18 
	#EFAULT
 14

	)

19 
	#ENOTBLK
 15

	)

20 
	#EBUSY
 16

	)

21 
	#EEXIST
 17

	)

22 
	#EXDEV
 18

	)

23 
	#ENODEV
 19

	)

24 
	#ENOTDIR
 20

	)

25 
	#EISDIR
 21

	)

26 
	#EINVAL
 22

	)

27 
	#ENFILE
 23

	)

28 
	#EMFILE
 24

	)

29 
	#ENOTTY
 25

	)

30 
	#ETXTBSY
 26

	)

31 
	#EFBIG
 27

	)

32 
	#ENOSPC
 28

	)

33 
	#ESPIPE
 29

	)

34 
	#EROFS
 30

	)

35 
	#EMLINK
 31

	)

36 
	#EPIPE
 32

	)

37 
	#EDOM
 33

	)

38 
	#ERANGE
 34

	)

	@/usr/include/asm-generic/int-ll64.h

9 #i‚de‡
_ASM_GENERIC_INT_LL64_H


10 
	#_ASM_GENERIC_INT_LL64_H


	)

12 
	~<asm/bô•îl⁄g.h
>

14 #i‚de‡
__ASSEMBLY__


20 
__sig√d__
 
	t__s8
;

21 
	t__u8
;

23 
__sig√d__
 
	t__s16
;

24 
	t__u16
;

26 
__sig√d__
 
	t__s32
;

27 
	t__u32
;

29 #ifde‡
__GNUC__


30 
__exãnsi⁄__
 
__sig√d__
 
	t__s64
;

31 
__exãnsi⁄__
 
	t__u64
;

33 
__sig√d__
 
	t__s64
;

34 
	t__u64
;

	@/usr/include/asm-generic/mman-common.h

2 #i‚de‡
__ASM_GENERIC_MMAN_COMMON_H


3 
	#__ASM_GENERIC_MMAN_COMMON_H


	)

10 
	#PROT_READ
 0x1

	)

11 
	#PROT_WRITE
 0x2

	)

12 
	#PROT_EXEC
 0x4

	)

13 
	#PROT_SEM
 0x8

	)

16 
	#PROT_NONE
 0x0

	)

17 
	#PROT_GROWSDOWN
 0x01000000

	)

18 
	#PROT_GROWSUP
 0x02000000

	)

21 
	#MAP_TYPE
 0x0‡

	)

22 
	#MAP_FIXED
 0x10

	)

23 
	#MAP_ANONYMOUS
 0x20

	)

26 
	#MAP_POPULATE
 0x008000

	)

27 
	#MAP_NONBLOCK
 0x010000

	)

28 
	#MAP_STACK
 0x020000

	)

29 
	#MAP_HUGETLB
 0x040000

	)

30 
	#MAP_SYNC
 0x080000

	)

31 
	#MAP_FIXED_NOREPLACE
 0x100000

	)

33 
	#MAP_UNINITIALIZED
 0x4000000

	)

39 
	#MLOCK_ONFAULT
 0x01

	)

41 
	#MS_ASYNC
 1

	)

42 
	#MS_INVALIDATE
 2

	)

43 
	#MS_SYNC
 4

	)

45 
	#MADV_NORMAL
 0

	)

46 
	#MADV_RANDOM
 1

	)

47 
	#MADV_SEQUENTIAL
 2

	)

48 
	#MADV_WILLNEED
 3

	)

49 
	#MADV_DONTNEED
 4

	)

52 
	#MADV_FREE
 8

	)

53 
	#MADV_REMOVE
 9

	)

54 
	#MADV_DONTFORK
 10

	)

55 
	#MADV_DOFORK
 11

	)

56 
	#MADV_HWPOISON
 100

	)

57 
	#MADV_SOFT_OFFLINE
 101

	)

59 
	#MADV_MERGEABLE
 12

	)

60 
	#MADV_UNMERGEABLE
 13

	)

62 
	#MADV_HUGEPAGE
 14

	)

63 
	#MADV_NOHUGEPAGE
 15

	)

65 
	#MADV_DONTDUMP
 16

	)

67 
	#MADV_DODUMP
 17

	)

69 
	#MADV_WIPEONFORK
 18

	)

70 
	#MADV_KEEPONFORK
 19

	)

72 
	#MADV_COLD
 20

	)

73 
	#MADV_PAGEOUT
 21

	)

75 
	#MADV_POPULATE_READ
 22

	)

76 
	#MADV_POPULATE_WRITE
 23

	)

79 
	#MAP_FILE
 0

	)

81 
	#PKEY_DISABLE_ACCESS
 0x1

	)

82 
	#PKEY_DISABLE_WRITE
 0x2

	)

83 
	#PKEY_ACCESS_MASK
 (
PKEY_DISABLE_ACCESS
 |\

84 
PKEY_DISABLE_WRITE
)

	)

	@/usr/include/linux/patchkey.h

14 #i‚de‡
_LINUX_PATCHKEY_H_INDIRECT


18 #i‚de‡
_LINUX_PATCHKEY_H


19 
	#_LINUX_PATCHKEY_H


	)

22 
	~<ídün.h
>

24 #i‡
deföed
(
__BYTE_ORDER
)

25 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


26 
	#_PATCHKEY
(
id
Ë(0xfd00|id)

	)

27 #ñi‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


28 
	#_PATCHKEY
(
id
Ë((id<<8)|0x00fd)

	)

	@/usr/include/linux/pci_regs.h

21 #i‚de‡
LINUX_PCI_REGS_H


22 
	#LINUX_PCI_REGS_H


	)

29 
	#PCI_CFG_SPACE_SIZE
 256

	)

30 
	#PCI_CFG_SPACE_EXP_SIZE
 4096

	)

36 
	#PCI_STD_HEADER_SIZEOF
 64

	)

37 
	#PCI_STD_NUM_BARS
 6

	)

38 
	#PCI_VENDOR_ID
 0x00

	)

39 
	#PCI_DEVICE_ID
 0x02

	)

40 
	#PCI_COMMAND
 0x04

	)

41 
	#PCI_COMMAND_IO
 0x1

	)

42 
	#PCI_COMMAND_MEMORY
 0x2

	)

43 
	#PCI_COMMAND_MASTER
 0x4

	)

44 
	#PCI_COMMAND_SPECIAL
 0x8

	)

45 
	#PCI_COMMAND_INVALIDATE
 0x10

	)

46 
	#PCI_COMMAND_VGA_PALETTE
 0x20

	)

47 
	#PCI_COMMAND_PARITY
 0x40

	)

48 
	#PCI_COMMAND_WAIT
 0x80

	)

49 
	#PCI_COMMAND_SERR
 0x100

	)

50 
	#PCI_COMMAND_FAST_BACK
 0x200

	)

51 
	#PCI_COMMAND_INTX_DISABLE
 0x400

	)

53 
	#PCI_STATUS
 0x06

	)

54 
	#PCI_STATUS_IMM_READY
 0x01

	)

55 
	#PCI_STATUS_INTERRUPT
 0x08

	)

56 
	#PCI_STATUS_CAP_LIST
 0x10

	)

57 
	#PCI_STATUS_66MHZ
 0x20

	)

58 
	#PCI_STATUS_UDF
 0x40

	)

59 
	#PCI_STATUS_FAST_BACK
 0x80

	)

60 
	#PCI_STATUS_PARITY
 0x100

	)

61 
	#PCI_STATUS_DEVSEL_MASK
 0x600

	)

62 
	#PCI_STATUS_DEVSEL_FAST
 0x000

	)

63 
	#PCI_STATUS_DEVSEL_MEDIUM
 0x200

	)

64 
	#PCI_STATUS_DEVSEL_SLOW
 0x400

	)

65 
	#PCI_STATUS_SIG_TARGET_ABORT
 0x800

	)

66 
	#PCI_STATUS_REC_TARGET_ABORT
 0x1000

	)

67 
	#PCI_STATUS_REC_MASTER_ABORT
 0x2000

	)

68 
	#PCI_STATUS_SIG_SYSTEM_ERROR
 0x4000

	)

69 
	#PCI_STATUS_DETECTED_PARITY
 0x8000

	)

71 
	#PCI_CLASS_REVISION
 0x08

	)

72 
	#PCI_REVISION_ID
 0x08

	)

73 
	#PCI_CLASS_PROG
 0x09

	)

74 
	#PCI_CLASS_DEVICE
 0x0®

	)

76 
	#PCI_CACHE_LINE_SIZE
 0x0¯

	)

77 
	#PCI_LATENCY_TIMER
 0x0d

	)

78 
	#PCI_HEADER_TYPE
 0x0ê

	)

79 
	#PCI_HEADER_TYPE_MASK
 0x7f

	)

80 
	#PCI_HEADER_TYPE_NORMAL
 0

	)

81 
	#PCI_HEADER_TYPE_BRIDGE
 1

	)

82 
	#PCI_HEADER_TYPE_CARDBUS
 2

	)

84 
	#PCI_BIST
 0x0‡

	)

85 
	#PCI_BIST_CODE_MASK
 0x0‡

	)

86 
	#PCI_BIST_START
 0x40

	)

87 
	#PCI_BIST_CAPABLE
 0x80

	)

95 
	#PCI_BASE_ADDRESS_0
 0x10

	)

96 
	#PCI_BASE_ADDRESS_1
 0x14

	)

97 
	#PCI_BASE_ADDRESS_2
 0x18

	)

98 
	#PCI_BASE_ADDRESS_3
 0x1¯

	)

99 
	#PCI_BASE_ADDRESS_4
 0x20

	)

100 
	#PCI_BASE_ADDRESS_5
 0x24

	)

101 
	#PCI_BASE_ADDRESS_SPACE
 0x01

	)

102 
	#PCI_BASE_ADDRESS_SPACE_IO
 0x01

	)

103 
	#PCI_BASE_ADDRESS_SPACE_MEMORY
 0x00

	)

104 
	#PCI_BASE_ADDRESS_MEM_TYPE_MASK
 0x06

	)

105 
	#PCI_BASE_ADDRESS_MEM_TYPE_32
 0x00

	)

106 
	#PCI_BASE_ADDRESS_MEM_TYPE_1M
 0x02

	)

107 
	#PCI_BASE_ADDRESS_MEM_TYPE_64
 0x04

	)

108 
	#PCI_BASE_ADDRESS_MEM_PREFETCH
 0x08

	)

109 
	#PCI_BASE_ADDRESS_MEM_MASK
 (~0x0fUL)

	)

110 
	#PCI_BASE_ADDRESS_IO_MASK
 (~0x03UL)

	)

114 
	#PCI_CARDBUS_CIS
 0x28

	)

115 
	#PCI_SUBSYSTEM_VENDOR_ID
 0x2c

	)

116 
	#PCI_SUBSYSTEM_ID
 0x2e

	)

117 
	#PCI_ROM_ADDRESS
 0x30

	)

118 
	#PCI_ROM_ADDRESS_ENABLE
 0x01

	)

119 
	#PCI_ROM_ADDRESS_MASK
 (~0x7ffU)

	)

121 
	#PCI_CAPABILITY_LIST
 0x34

	)

124 
	#PCI_INTERRUPT_LINE
 0x3¯

	)

125 
	#PCI_INTERRUPT_PIN
 0x3d

	)

126 
	#PCI_MIN_GNT
 0x3ê

	)

127 
	#PCI_MAX_LAT
 0x3‡

	)

130 
	#PCI_PRIMARY_BUS
 0x18

	)

131 
	#PCI_SECONDARY_BUS
 0x19

	)

132 
	#PCI_SUBORDINATE_BUS
 0x1®

	)

133 
	#PCI_SEC_LATENCY_TIMER
 0x1b

	)

134 
	#PCI_IO_BASE
 0x1¯

	)

135 
	#PCI_IO_LIMIT
 0x1d

	)

136 
	#PCI_IO_RANGE_TYPE_MASK
 0x0fUL

	)

137 
	#PCI_IO_RANGE_TYPE_16
 0x00

	)

138 
	#PCI_IO_RANGE_TYPE_32
 0x01

	)

139 
	#PCI_IO_RANGE_MASK
 (~0x0fULË

	)

140 
	#PCI_IO_1K_RANGE_MASK
 (~0x03ULË

	)

141 
	#PCI_SEC_STATUS
 0x1ê

	)

142 
	#PCI_MEMORY_BASE
 0x20

	)

143 
	#PCI_MEMORY_LIMIT
 0x22

	)

144 
	#PCI_MEMORY_RANGE_TYPE_MASK
 0x0fUL

	)

145 
	#PCI_MEMORY_RANGE_MASK
 (~0x0fUL)

	)

146 
	#PCI_PREF_MEMORY_BASE
 0x24

	)

147 
	#PCI_PREF_MEMORY_LIMIT
 0x26

	)

148 
	#PCI_PREF_RANGE_TYPE_MASK
 0x0fUL

	)

149 
	#PCI_PREF_RANGE_TYPE_32
 0x00

	)

150 
	#PCI_PREF_RANGE_TYPE_64
 0x01

	)

151 
	#PCI_PREF_RANGE_MASK
 (~0x0fUL)

	)

152 
	#PCI_PREF_BASE_UPPER32
 0x28

	)

153 
	#PCI_PREF_LIMIT_UPPER32
 0x2c

	)

154 
	#PCI_IO_BASE_UPPER16
 0x30

	)

155 
	#PCI_IO_LIMIT_UPPER16
 0x32

	)

158 
	#PCI_ROM_ADDRESS1
 0x38

	)

160 
	#PCI_BRIDGE_CONTROL
 0x3e

	)

161 
	#PCI_BRIDGE_CTL_PARITY
 0x01

	)

162 
	#PCI_BRIDGE_CTL_SERR
 0x02

	)

163 
	#PCI_BRIDGE_CTL_ISA
 0x04

	)

164 
	#PCI_BRIDGE_CTL_VGA
 0x08

	)

165 
	#PCI_BRIDGE_CTL_MASTER_ABORT
 0x20

	)

166 
	#PCI_BRIDGE_CTL_BUS_RESET
 0x40

	)

167 
	#PCI_BRIDGE_CTL_FAST_BACK
 0x80

	)

170 
	#PCI_CB_CAPABILITY_LIST
 0x14

	)

172 
	#PCI_CB_SEC_STATUS
 0x16

	)

173 
	#PCI_CB_PRIMARY_BUS
 0x18

	)

174 
	#PCI_CB_CARD_BUS
 0x19

	)

175 
	#PCI_CB_SUBORDINATE_BUS
 0x1®

	)

176 
	#PCI_CB_LATENCY_TIMER
 0x1b

	)

177 
	#PCI_CB_MEMORY_BASE_0
 0x1c

	)

178 
	#PCI_CB_MEMORY_LIMIT_0
 0x20

	)

179 
	#PCI_CB_MEMORY_BASE_1
 0x24

	)

180 
	#PCI_CB_MEMORY_LIMIT_1
 0x28

	)

181 
	#PCI_CB_IO_BASE_0
 0x2c

	)

182 
	#PCI_CB_IO_BASE_0_HI
 0x2e

	)

183 
	#PCI_CB_IO_LIMIT_0
 0x30

	)

184 
	#PCI_CB_IO_LIMIT_0_HI
 0x32

	)

185 
	#PCI_CB_IO_BASE_1
 0x34

	)

186 
	#PCI_CB_IO_BASE_1_HI
 0x36

	)

187 
	#PCI_CB_IO_LIMIT_1
 0x38

	)

188 
	#PCI_CB_IO_LIMIT_1_HI
 0x3a

	)

189 
	#PCI_CB_IO_RANGE_MASK
 (~0x03UL)

	)

191 
	#PCI_CB_BRIDGE_CONTROL
 0x3e

	)

192 
	#PCI_CB_BRIDGE_CTL_PARITY
 0x01

	)

193 
	#PCI_CB_BRIDGE_CTL_SERR
 0x02

	)

194 
	#PCI_CB_BRIDGE_CTL_ISA
 0x04

	)

195 
	#PCI_CB_BRIDGE_CTL_VGA
 0x08

	)

196 
	#PCI_CB_BRIDGE_CTL_MASTER_ABORT
 0x20

	)

197 
	#PCI_CB_BRIDGE_CTL_CB_RESET
 0x40

	)

198 
	#PCI_CB_BRIDGE_CTL_16BIT_INT
 0x80

	)

199 
	#PCI_CB_BRIDGE_CTL_PREFETCH_MEM0
 0x100

	)

200 
	#PCI_CB_BRIDGE_CTL_PREFETCH_MEM1
 0x200

	)

201 
	#PCI_CB_BRIDGE_CTL_POST_WRITES
 0x400

	)

202 
	#PCI_CB_SUBSYSTEM_VENDOR_ID
 0x40

	)

203 
	#PCI_CB_SUBSYSTEM_ID
 0x42

	)

204 
	#PCI_CB_LEGACY_MODE_BASE
 0x44

	)

209 
	#PCI_CAP_LIST_ID
 0

	)

210 
	#PCI_CAP_ID_PM
 0x01

	)

211 
	#PCI_CAP_ID_AGP
 0x02

	)

212 
	#PCI_CAP_ID_VPD
 0x03

	)

213 
	#PCI_CAP_ID_SLOTID
 0x04

	)

214 
	#PCI_CAP_ID_MSI
 0x05

	)

215 
	#PCI_CAP_ID_CHSWP
 0x06

	)

216 
	#PCI_CAP_ID_PCIX
 0x07

	)

217 
	#PCI_CAP_ID_HT
 0x08

	)

218 
	#PCI_CAP_ID_VNDR
 0x09

	)

219 
	#PCI_CAP_ID_DBG
 0x0A

	)

220 
	#PCI_CAP_ID_CCRC
 0x0B

	)

221 
	#PCI_CAP_ID_SHPC
 0x0C

	)

222 
	#PCI_CAP_ID_SSVID
 0x0D

	)

223 
	#PCI_CAP_ID_AGP3
 0x0E

	)

224 
	#PCI_CAP_ID_SECDEV
 0x0F

	)

225 
	#PCI_CAP_ID_EXP
 0x10

	)

226 
	#PCI_CAP_ID_MSIX
 0x11

	)

227 
	#PCI_CAP_ID_SATA
 0x12

	)

228 
	#PCI_CAP_ID_AF
 0x13

	)

229 
	#PCI_CAP_ID_EA
 0x14

	)

230 
	#PCI_CAP_ID_MAX
 
PCI_CAP_ID_EA


	)

231 
	#PCI_CAP_LIST_NEXT
 1

	)

232 
	#PCI_CAP_FLAGS
 2

	)

233 
	#PCI_CAP_SIZEOF
 4

	)

237 
	#PCI_PM_PMC
 2

	)

238 
	#PCI_PM_CAP_VER_MASK
 0x0007

	)

239 
	#PCI_PM_CAP_PME_CLOCK
 0x0008

	)

240 
	#PCI_PM_CAP_RESERVED
 0x0010

	)

241 
	#PCI_PM_CAP_DSI
 0x0020

	)

242 
	#PCI_PM_CAP_AUX_POWER
 0x01C0

	)

243 
	#PCI_PM_CAP_D1
 0x0200

	)

244 
	#PCI_PM_CAP_D2
 0x0400

	)

245 
	#PCI_PM_CAP_PME
 0x0800

	)

246 
	#PCI_PM_CAP_PME_MASK
 0xF800

	)

247 
	#PCI_PM_CAP_PME_D0
 0x0800

	)

248 
	#PCI_PM_CAP_PME_D1
 0x1000

	)

249 
	#PCI_PM_CAP_PME_D2
 0x2000

	)

250 
	#PCI_PM_CAP_PME_D3hŸ
 0x4000

	)

251 
	#PCI_PM_CAP_PME_D3cﬁd
 0x8000

	)

252 
	#PCI_PM_CAP_PME_SHIFT
 11

	)

253 
	#PCI_PM_CTRL
 4

	)

254 
	#PCI_PM_CTRL_STATE_MASK
 0x0003

	)

255 
	#PCI_PM_CTRL_NO_SOFT_RESET
 0x0008

	)

256 
	#PCI_PM_CTRL_PME_ENABLE
 0x0100

	)

257 
	#PCI_PM_CTRL_DATA_SEL_MASK
 0x1e00

	)

258 
	#PCI_PM_CTRL_DATA_SCALE_MASK
 0x6000

	)

259 
	#PCI_PM_CTRL_PME_STATUS
 0x8000

	)

260 
	#PCI_PM_PPB_EXTENSIONS
 6

	)

261 
	#PCI_PM_PPB_B2_B3
 0x40

	)

262 
	#PCI_PM_BPCC_ENABLE
 0x80

	)

263 
	#PCI_PM_DATA_REGISTER
 7

	)

264 
	#PCI_PM_SIZEOF
 8

	)

268 
	#PCI_AGP_VERSION
 2

	)

269 
	#PCI_AGP_RFU
 3

	)

270 
	#PCI_AGP_STATUS
 4

	)

271 
	#PCI_AGP_STATUS_RQ_MASK
 0xff000000

	)

272 
	#PCI_AGP_STATUS_SBA
 0x0200

	)

273 
	#PCI_AGP_STATUS_64BIT
 0x0020

	)

274 
	#PCI_AGP_STATUS_FW
 0x0010

	)

275 
	#PCI_AGP_STATUS_RATE4
 0x0004

	)

276 
	#PCI_AGP_STATUS_RATE2
 0x0002

	)

277 
	#PCI_AGP_STATUS_RATE1
 0x0001

	)

278 
	#PCI_AGP_COMMAND
 8

	)

279 
	#PCI_AGP_COMMAND_RQ_MASK
 0xff000000

	)

280 
	#PCI_AGP_COMMAND_SBA
 0x0200

	)

281 
	#PCI_AGP_COMMAND_AGP
 0x0100

	)

282 
	#PCI_AGP_COMMAND_64BIT
 0x0020

	)

283 
	#PCI_AGP_COMMAND_FW
 0x0010

	)

284 
	#PCI_AGP_COMMAND_RATE4
 0x0004

	)

285 
	#PCI_AGP_COMMAND_RATE2
 0x0002

	)

286 
	#PCI_AGP_COMMAND_RATE1
 0x0001

	)

287 
	#PCI_AGP_SIZEOF
 12

	)

291 
	#PCI_VPD_ADDR
 2

	)

292 
	#PCI_VPD_ADDR_MASK
 0x7ff‡

	)

293 
	#PCI_VPD_ADDR_F
 0x8000

	)

294 
	#PCI_VPD_DATA
 4

	)

295 
	#PCI_CAP_VPD_SIZEOF
 8

	)

299 
	#PCI_SID_ESR
 2

	)

300 
	#PCI_SID_ESR_NSLOTS
 0x1‡

	)

301 
	#PCI_SID_ESR_FIC
 0x20

	)

302 
	#PCI_SID_CHASSIS_NR
 3

	)

306 
	#PCI_MSI_FLAGS
 2

	)

307 
	#PCI_MSI_FLAGS_ENABLE
 0x0001

	)

308 
	#PCI_MSI_FLAGS_QMASK
 0x000ê

	)

309 
	#PCI_MSI_FLAGS_QSIZE
 0x0070

	)

310 
	#PCI_MSI_FLAGS_64BIT
 0x0080

	)

311 
	#PCI_MSI_FLAGS_MASKBIT
 0x0100

	)

312 
	#PCI_MSI_RFU
 3

	)

313 
	#PCI_MSI_ADDRESS_LO
 4

	)

314 
	#PCI_MSI_ADDRESS_HI
 8

	)

315 
	#PCI_MSI_DATA_32
 8

	)

316 
	#PCI_MSI_MASK_32
 12

	)

317 
	#PCI_MSI_PENDING_32
 16

	)

318 
	#PCI_MSI_DATA_64
 12

	)

319 
	#PCI_MSI_MASK_64
 16

	)

320 
	#PCI_MSI_PENDING_64
 20

	)

323 
	#PCI_MSIX_FLAGS
 2

	)

324 
	#PCI_MSIX_FLAGS_QSIZE
 0x07FF

	)

325 
	#PCI_MSIX_FLAGS_MASKALL
 0x4000

	)

326 
	#PCI_MSIX_FLAGS_ENABLE
 0x8000

	)

327 
	#PCI_MSIX_TABLE
 4

	)

328 
	#PCI_MSIX_TABLE_BIR
 0x00000007

	)

329 
	#PCI_MSIX_TABLE_OFFSET
 0xfffffff8

	)

330 
	#PCI_MSIX_PBA
 8

	)

331 
	#PCI_MSIX_PBA_BIR
 0x00000007

	)

332 
	#PCI_MSIX_PBA_OFFSET
 0xfffffff8

	)

333 
	#PCI_MSIX_FLAGS_BIRMASK
 
PCI_MSIX_PBA_BIR


	)

334 
	#PCI_CAP_MSIX_SIZEOF
 12

	)

337 
	#PCI_MSIX_ENTRY_SIZE
 16

	)

338 
	#PCI_MSIX_ENTRY_LOWER_ADDR
 0

	)

339 
	#PCI_MSIX_ENTRY_UPPER_ADDR
 4

	)

340 
	#PCI_MSIX_ENTRY_DATA
 8

	)

341 
	#PCI_MSIX_ENTRY_VECTOR_CTRL
 12

	)

342 
	#PCI_MSIX_ENTRY_CTRL_MASKBIT
 0x00000001

	)

346 
	#PCI_CHSWP_CSR
 2

	)

347 
	#PCI_CHSWP_DHA
 0x01

	)

348 
	#PCI_CHSWP_EIM
 0x02

	)

349 
	#PCI_CHSWP_PIE
 0x04

	)

350 
	#PCI_CHSWP_LOO
 0x08

	)

351 
	#PCI_CHSWP_PI
 0x30

	)

352 
	#PCI_CHSWP_EXT
 0x40

	)

353 
	#PCI_CHSWP_INS
 0x80

	)

357 
	#PCI_AF_LENGTH
 2

	)

358 
	#PCI_AF_CAP
 3

	)

359 
	#PCI_AF_CAP_TP
 0x01

	)

360 
	#PCI_AF_CAP_FLR
 0x02

	)

361 
	#PCI_AF_CTRL
 4

	)

362 
	#PCI_AF_CTRL_FLR
 0x01

	)

363 
	#PCI_AF_STATUS
 5

	)

364 
	#PCI_AF_STATUS_TP
 0x01

	)

365 
	#PCI_CAP_AF_SIZEOF
 6

	)

369 
	#PCI_EA_NUM_ENT
 2

	)

370 
	#PCI_EA_NUM_ENT_MASK
 0x3‡

	)

371 
	#PCI_EA_FIRST_ENT
 4

	)

372 
	#PCI_EA_FIRST_ENT_BRIDGE
 8

	)

373 
	#PCI_EA_ES
 0x00000007

	)

374 
	#PCI_EA_BEI
 0x000000f0

	)

377 
	#PCI_EA_SEC_BUS_MASK
 0xff

	)

378 
	#PCI_EA_SUB_BUS_MASK
 0xff00

	)

379 
	#PCI_EA_SUB_BUS_SHIFT
 8

	)

382 
	#PCI_EA_BEI_BAR0
 0

	)

383 
	#PCI_EA_BEI_BAR5
 5

	)

384 
	#PCI_EA_BEI_BRIDGE
 6

	)

385 
	#PCI_EA_BEI_ENI
 7

	)

386 
	#PCI_EA_BEI_ROM
 8

	)

388 
	#PCI_EA_BEI_VF_BAR0
 9

	)

389 
	#PCI_EA_BEI_VF_BAR5
 14

	)

390 
	#PCI_EA_BEI_RESERVED
 15

	)

391 
	#PCI_EA_PP
 0x0000ff00

	)

392 
	#PCI_EA_SP
 0x00ff0000

	)

393 
	#PCI_EA_P_MEM
 0x00

	)

394 
	#PCI_EA_P_MEM_PREFETCH
 0x01

	)

395 
	#PCI_EA_P_IO
 0x02

	)

396 
	#PCI_EA_P_VF_MEM_PREFETCH
 0x03

	)

397 
	#PCI_EA_P_VF_MEM
 0x04

	)

398 
	#PCI_EA_P_BRIDGE_MEM
 0x05

	)

399 
	#PCI_EA_P_BRIDGE_MEM_PREFETCH
 0x06

	)

400 
	#PCI_EA_P_BRIDGE_IO
 0x07

	)

402 
	#PCI_EA_P_MEM_RESERVED
 0xfd

	)

403 
	#PCI_EA_P_IO_RESERVED
 0x„

	)

404 
	#PCI_EA_P_UNAVAILABLE
 0xf‡

	)

405 
	#PCI_EA_WRITABLE
 0x40000000

	)

406 
	#PCI_EA_ENABLE
 0x80000000

	)

407 
	#PCI_EA_BASE
 4

	)

408 
	#PCI_EA_MAX_OFFSET
 8

	)

410 
	#PCI_EA_IS_64
 0x00000002

	)

411 
	#PCI_EA_FIELD_MASK
 0xfffffff¯

	)

415 
	#PCI_X_CMD
 2

	)

416 
	#PCI_X_CMD_DPERR_E
 0x0001

	)

417 
	#PCI_X_CMD_ERO
 0x0002

	)

418 
	#PCI_X_CMD_READ_512
 0x0000

	)

419 
	#PCI_X_CMD_READ_1K
 0x0004

	)

420 
	#PCI_X_CMD_READ_2K
 0x0008

	)

421 
	#PCI_X_CMD_READ_4K
 0x000¯

	)

422 
	#PCI_X_CMD_MAX_READ
 0x000¯

	)

424 
	#PCI_X_CMD_SPLIT_1
 0x0000

	)

425 
	#PCI_X_CMD_SPLIT_2
 0x0010

	)

426 
	#PCI_X_CMD_SPLIT_3
 0x0020

	)

427 
	#PCI_X_CMD_SPLIT_4
 0x0030

	)

428 
	#PCI_X_CMD_SPLIT_8
 0x0040

	)

429 
	#PCI_X_CMD_SPLIT_12
 0x0050

	)

430 
	#PCI_X_CMD_SPLIT_16
 0x0060

	)

431 
	#PCI_X_CMD_SPLIT_32
 0x0070

	)

432 
	#PCI_X_CMD_MAX_SPLIT
 0x0070

	)

433 
	#PCI_X_CMD_VERSION
(
x
Ë(((xË>> 12Ë& 3Ë

	)

434 
	#PCI_X_STATUS
 4

	)

435 
	#PCI_X_STATUS_DEVFN
 0x000000f‡

	)

436 
	#PCI_X_STATUS_BUS
 0x0000ff00

	)

437 
	#PCI_X_STATUS_64BIT
 0x00010000

	)

438 
	#PCI_X_STATUS_133MHZ
 0x00020000

	)

439 
	#PCI_X_STATUS_SPL_DISC
 0x00040000

	)

440 
	#PCI_X_STATUS_UNX_SPL
 0x00080000

	)

441 
	#PCI_X_STATUS_COMPLEX
 0x00100000

	)

442 
	#PCI_X_STATUS_MAX_READ
 0x00600000

	)

443 
	#PCI_X_STATUS_MAX_SPLIT
 0x03800000

	)

444 
	#PCI_X_STATUS_MAX_CUM
 0x1c000000

	)

445 
	#PCI_X_STATUS_SPL_ERR
 0x20000000

	)

446 
	#PCI_X_STATUS_266MHZ
 0x40000000

	)

447 
	#PCI_X_STATUS_533MHZ
 0x80000000

	)

448 
	#PCI_X_ECC_CSR
 8

	)

449 
	#PCI_CAP_PCIX_SIZEOF_V0
 8

	)

450 
	#PCI_CAP_PCIX_SIZEOF_V1
 24

	)

451 
	#PCI_CAP_PCIX_SIZEOF_V2
 
PCI_CAP_PCIX_SIZEOF_V1


	)

455 
	#PCI_X_BRIDGE_SSTATUS
 2

	)

456 
	#PCI_X_SSTATUS_64BIT
 0x0001

	)

457 
	#PCI_X_SSTATUS_133MHZ
 0x0002

	)

458 
	#PCI_X_SSTATUS_FREQ
 0x03c0

	)

459 
	#PCI_X_SSTATUS_VERS
 0x3000

	)

460 
	#PCI_X_SSTATUS_V1
 0x1000

	)

461 
	#PCI_X_SSTATUS_V2
 0x2000

	)

462 
	#PCI_X_SSTATUS_266MHZ
 0x4000

	)

463 
	#PCI_X_SSTATUS_533MHZ
 0x8000

	)

464 
	#PCI_X_BRIDGE_STATUS
 4

	)

468 
	#PCI_SSVID_VENDOR_ID
 4

	)

469 
	#PCI_SSVID_DEVICE_ID
 6

	)

473 
	#PCI_EXP_FLAGS
 2

	)

474 
	#PCI_EXP_FLAGS_VERS
 0x000‡

	)

475 
	#PCI_EXP_FLAGS_TYPE
 0x00f0

	)

476 
	#PCI_EXP_TYPE_ENDPOINT
 0x0

	)

477 
	#PCI_EXP_TYPE_LEG_END
 0x1

	)

478 
	#PCI_EXP_TYPE_ROOT_PORT
 0x4

	)

479 
	#PCI_EXP_TYPE_UPSTREAM
 0x5

	)

480 
	#PCI_EXP_TYPE_DOWNSTREAM
 0x6

	)

481 
	#PCI_EXP_TYPE_PCI_BRIDGE
 0x7

	)

482 
	#PCI_EXP_TYPE_PCIE_BRIDGE
 0x8

	)

483 
	#PCI_EXP_TYPE_RC_END
 0x9

	)

484 
	#PCI_EXP_TYPE_RC_EC
 0x®

	)

485 
	#PCI_EXP_FLAGS_SLOT
 0x0100

	)

486 
	#PCI_EXP_FLAGS_IRQ
 0x3e00

	)

487 
	#PCI_EXP_DEVCAP
 4

	)

488 
	#PCI_EXP_DEVCAP_PAYLOAD
 0x00000007

	)

489 
	#PCI_EXP_DEVCAP_PHANTOM
 0x00000018

	)

490 
	#PCI_EXP_DEVCAP_EXT_TAG
 0x00000020

	)

491 
	#PCI_EXP_DEVCAP_L0S
 0x000001c0

	)

492 
	#PCI_EXP_DEVCAP_L1
 0x00000e00

	)

493 
	#PCI_EXP_DEVCAP_ATN_BUT
 0x00001000

	)

494 
	#PCI_EXP_DEVCAP_ATN_IND
 0x00002000

	)

495 
	#PCI_EXP_DEVCAP_PWR_IND
 0x00004000

	)

496 
	#PCI_EXP_DEVCAP_RBER
 0x00008000

	)

497 
	#PCI_EXP_DEVCAP_PWR_VAL
 0x03fc0000

	)

498 
	#PCI_EXP_DEVCAP_PWR_SCL
 0x0c000000

	)

499 
	#PCI_EXP_DEVCAP_FLR
 0x10000000

	)

500 
	#PCI_EXP_DEVCTL
 8

	)

501 
	#PCI_EXP_DEVCTL_CERE
 0x0001

	)

502 
	#PCI_EXP_DEVCTL_NFERE
 0x0002

	)

503 
	#PCI_EXP_DEVCTL_FERE
 0x0004

	)

504 
	#PCI_EXP_DEVCTL_URRE
 0x0008

	)

505 
	#PCI_EXP_DEVCTL_RELAX_EN
 0x0010

	)

506 
	#PCI_EXP_DEVCTL_PAYLOAD
 0x00e0

	)

507 
	#PCI_EXP_DEVCTL_PAYLOAD_128B
 0x0000

	)

508 
	#PCI_EXP_DEVCTL_PAYLOAD_256B
 0x0020

	)

509 
	#PCI_EXP_DEVCTL_PAYLOAD_512B
 0x0040

	)

510 
	#PCI_EXP_DEVCTL_PAYLOAD_1024B
 0x0060

	)

511 
	#PCI_EXP_DEVCTL_PAYLOAD_2048B
 0x0080

	)

512 
	#PCI_EXP_DEVCTL_PAYLOAD_4096B
 0x00a0

	)

513 
	#PCI_EXP_DEVCTL_EXT_TAG
 0x0100

	)

514 
	#PCI_EXP_DEVCTL_PHANTOM
 0x0200

	)

515 
	#PCI_EXP_DEVCTL_AUX_PME
 0x0400

	)

516 
	#PCI_EXP_DEVCTL_NOSNOOP_EN
 0x0800

	)

517 
	#PCI_EXP_DEVCTL_READRQ
 0x7000

	)

518 
	#PCI_EXP_DEVCTL_READRQ_128B
 0x0000

	)

519 
	#PCI_EXP_DEVCTL_READRQ_256B
 0x1000

	)

520 
	#PCI_EXP_DEVCTL_READRQ_512B
 0x2000

	)

521 
	#PCI_EXP_DEVCTL_READRQ_1024B
 0x3000

	)

522 
	#PCI_EXP_DEVCTL_READRQ_2048B
 0x4000

	)

523 
	#PCI_EXP_DEVCTL_READRQ_4096B
 0x5000

	)

524 
	#PCI_EXP_DEVCTL_BCR_FLR
 0x8000

	)

525 
	#PCI_EXP_DEVSTA
 10

	)

526 
	#PCI_EXP_DEVSTA_CED
 0x0001

	)

527 
	#PCI_EXP_DEVSTA_NFED
 0x0002

	)

528 
	#PCI_EXP_DEVSTA_FED
 0x0004

	)

529 
	#PCI_EXP_DEVSTA_URD
 0x0008

	)

530 
	#PCI_EXP_DEVSTA_AUXPD
 0x0010

	)

531 
	#PCI_EXP_DEVSTA_TRPND
 0x0020

	)

532 
	#PCI_CAP_EXP_RC_ENDPOINT_SIZEOF_V1
 12

	)

533 
	#PCI_EXP_LNKCAP
 12

	)

534 
	#PCI_EXP_LNKCAP_SLS
 0x0000000‡

	)

535 
	#PCI_EXP_LNKCAP_SLS_2_5GB
 0x00000001

	)

536 
	#PCI_EXP_LNKCAP_SLS_5_0GB
 0x00000002

	)

537 
	#PCI_EXP_LNKCAP_SLS_8_0GB
 0x00000003

	)

538 
	#PCI_EXP_LNKCAP_SLS_16_0GB
 0x00000004

	)

539 
	#PCI_EXP_LNKCAP_SLS_32_0GB
 0x00000005

	)

540 
	#PCI_EXP_LNKCAP_SLS_64_0GB
 0x00000006

	)

541 
	#PCI_EXP_LNKCAP_MLW
 0x000003f0

	)

542 
	#PCI_EXP_LNKCAP_ASPMS
 0x00000c00

	)

543 
	#PCI_EXP_LNKCAP_ASPM_L0S
 0x00000400

	)

544 
	#PCI_EXP_LNKCAP_ASPM_L1
 0x00000800

	)

545 
	#PCI_EXP_LNKCAP_L0SEL
 0x00007000

	)

546 
	#PCI_EXP_LNKCAP_L1EL
 0x00038000

	)

547 
	#PCI_EXP_LNKCAP_CLKPM
 0x00040000

	)

548 
	#PCI_EXP_LNKCAP_SDERC
 0x00080000

	)

549 
	#PCI_EXP_LNKCAP_DLLLARC
 0x00100000

	)

550 
	#PCI_EXP_LNKCAP_LBNC
 0x00200000

	)

551 
	#PCI_EXP_LNKCAP_PN
 0xff000000

	)

552 
	#PCI_EXP_LNKCTL
 16

	)

553 
	#PCI_EXP_LNKCTL_ASPMC
 0x0003

	)

554 
	#PCI_EXP_LNKCTL_ASPM_L0S
 0x0001

	)

555 
	#PCI_EXP_LNKCTL_ASPM_L1
 0x0002

	)

556 
	#PCI_EXP_LNKCTL_RCB
 0x0008

	)

557 
	#PCI_EXP_LNKCTL_LD
 0x0010

	)

558 
	#PCI_EXP_LNKCTL_RL
 0x0020

	)

559 
	#PCI_EXP_LNKCTL_CCC
 0x0040

	)

560 
	#PCI_EXP_LNKCTL_ES
 0x0080

	)

561 
	#PCI_EXP_LNKCTL_CLKREQ_EN
 0x0100

	)

562 
	#PCI_EXP_LNKCTL_HAWD
 0x0200

	)

563 
	#PCI_EXP_LNKCTL_LBMIE
 0x0400

	)

564 
	#PCI_EXP_LNKCTL_LABIE
 0x0800

	)

565 
	#PCI_EXP_LNKSTA
 18

	)

566 
	#PCI_EXP_LNKSTA_CLS
 0x000‡

	)

567 
	#PCI_EXP_LNKSTA_CLS_2_5GB
 0x0001

	)

568 
	#PCI_EXP_LNKSTA_CLS_5_0GB
 0x0002

	)

569 
	#PCI_EXP_LNKSTA_CLS_8_0GB
 0x0003

	)

570 
	#PCI_EXP_LNKSTA_CLS_16_0GB
 0x0004

	)

571 
	#PCI_EXP_LNKSTA_CLS_32_0GB
 0x0005

	)

572 
	#PCI_EXP_LNKSTA_CLS_64_0GB
 0x0006

	)

573 
	#PCI_EXP_LNKSTA_NLW
 0x03f0

	)

574 
	#PCI_EXP_LNKSTA_NLW_X1
 0x0010

	)

575 
	#PCI_EXP_LNKSTA_NLW_X2
 0x0020

	)

576 
	#PCI_EXP_LNKSTA_NLW_X4
 0x0040

	)

577 
	#PCI_EXP_LNKSTA_NLW_X8
 0x0080

	)

578 
	#PCI_EXP_LNKSTA_NLW_SHIFT
 4

	)

579 
	#PCI_EXP_LNKSTA_LT
 0x0800

	)

580 
	#PCI_EXP_LNKSTA_SLC
 0x1000

	)

581 
	#PCI_EXP_LNKSTA_DLLLA
 0x2000

	)

582 
	#PCI_EXP_LNKSTA_LBMS
 0x4000

	)

583 
	#PCI_EXP_LNKSTA_LABS
 0x8000

	)

584 
	#PCI_CAP_EXP_ENDPOINT_SIZEOF_V1
 20

	)

585 
	#PCI_EXP_SLTCAP
 20

	)

586 
	#PCI_EXP_SLTCAP_ABP
 0x00000001

	)

587 
	#PCI_EXP_SLTCAP_PCP
 0x00000002

	)

588 
	#PCI_EXP_SLTCAP_MRLSP
 0x00000004

	)

589 
	#PCI_EXP_SLTCAP_AIP
 0x00000008

	)

590 
	#PCI_EXP_SLTCAP_PIP
 0x00000010

	)

591 
	#PCI_EXP_SLTCAP_HPS
 0x00000020

	)

592 
	#PCI_EXP_SLTCAP_HPC
 0x00000040

	)

593 
	#PCI_EXP_SLTCAP_SPLV
 0x00007f80

	)

594 
	#PCI_EXP_SLTCAP_SPLS
 0x00018000

	)

595 
	#PCI_EXP_SLTCAP_EIP
 0x00020000

	)

596 
	#PCI_EXP_SLTCAP_NCCS
 0x00040000

	)

597 
	#PCI_EXP_SLTCAP_PSN
 0xfff80000

	)

598 
	#PCI_EXP_SLTCTL
 24

	)

599 
	#PCI_EXP_SLTCTL_ABPE
 0x0001

	)

600 
	#PCI_EXP_SLTCTL_PFDE
 0x0002

	)

601 
	#PCI_EXP_SLTCTL_MRLSCE
 0x0004

	)

602 
	#PCI_EXP_SLTCTL_PDCE
 0x0008

	)

603 
	#PCI_EXP_SLTCTL_CCIE
 0x0010

	)

604 
	#PCI_EXP_SLTCTL_HPIE
 0x0020

	)

605 
	#PCI_EXP_SLTCTL_AIC
 0x00c0

	)

606 
	#PCI_EXP_SLTCTL_ATTN_IND_SHIFT
 6

	)

607 
	#PCI_EXP_SLTCTL_ATTN_IND_ON
 0x0040

	)

608 
	#PCI_EXP_SLTCTL_ATTN_IND_BLINK
 0x0080

	)

609 
	#PCI_EXP_SLTCTL_ATTN_IND_OFF
 0x00c0

	)

610 
	#PCI_EXP_SLTCTL_PIC
 0x0300

	)

611 
	#PCI_EXP_SLTCTL_PWR_IND_ON
 0x0100

	)

612 
	#PCI_EXP_SLTCTL_PWR_IND_BLINK
 0x0200

	)

613 
	#PCI_EXP_SLTCTL_PWR_IND_OFF
 0x0300

	)

614 
	#PCI_EXP_SLTCTL_PCC
 0x0400

	)

615 
	#PCI_EXP_SLTCTL_PWR_ON
 0x0000

	)

616 
	#PCI_EXP_SLTCTL_PWR_OFF
 0x0400

	)

617 
	#PCI_EXP_SLTCTL_EIC
 0x0800

	)

618 
	#PCI_EXP_SLTCTL_DLLSCE
 0x1000

	)

619 
	#PCI_EXP_SLTCTL_IBPD_DISABLE
 0x4000

	)

620 
	#PCI_EXP_SLTSTA
 26

	)

621 
	#PCI_EXP_SLTSTA_ABP
 0x0001

	)

622 
	#PCI_EXP_SLTSTA_PFD
 0x0002

	)

623 
	#PCI_EXP_SLTSTA_MRLSC
 0x0004

	)

624 
	#PCI_EXP_SLTSTA_PDC
 0x0008

	)

625 
	#PCI_EXP_SLTSTA_CC
 0x0010

	)

626 
	#PCI_EXP_SLTSTA_MRLSS
 0x0020

	)

627 
	#PCI_EXP_SLTSTA_PDS
 0x0040

	)

628 
	#PCI_EXP_SLTSTA_EIS
 0x0080

	)

629 
	#PCI_EXP_SLTSTA_DLLSC
 0x0100

	)

630 
	#PCI_EXP_RTCTL
 28

	)

631 
	#PCI_EXP_RTCTL_SECEE
 0x0001

	)

632 
	#PCI_EXP_RTCTL_SENFEE
 0x0002

	)

633 
	#PCI_EXP_RTCTL_SEFEE
 0x0004

	)

634 
	#PCI_EXP_RTCTL_PMEIE
 0x0008

	)

635 
	#PCI_EXP_RTCTL_CRSSVE
 0x0010

	)

636 
	#PCI_EXP_RTCAP
 30

	)

637 
	#PCI_EXP_RTCAP_CRSVIS
 0x0001

	)

638 
	#PCI_EXP_RTSTA
 32

	)

639 
	#PCI_EXP_RTSTA_PME
 0x00010000

	)

640 
	#PCI_EXP_RTSTA_PENDING
 0x00020000

	)

649 
	#PCI_EXP_DEVCAP2
 36

	)

650 
	#PCI_EXP_DEVCAP2_COMP_TMOUT_DIS
 0x00000010

	)

651 
	#PCI_EXP_DEVCAP2_ARI
 0x00000020

	)

652 
	#PCI_EXP_DEVCAP2_ATOMIC_ROUTE
 0x00000040

	)

653 
	#PCI_EXP_DEVCAP2_ATOMIC_COMP32
 0x00000080

	)

654 
	#PCI_EXP_DEVCAP2_ATOMIC_COMP64
 0x00000100

	)

655 
	#PCI_EXP_DEVCAP2_ATOMIC_COMP128
 0x00000200

	)

656 
	#PCI_EXP_DEVCAP2_LTR
 0x00000800

	)

657 
	#PCI_EXP_DEVCAP2_OBFF_MASK
 0x000c0000

	)

658 
	#PCI_EXP_DEVCAP2_OBFF_MSG
 0x00040000

	)

659 
	#PCI_EXP_DEVCAP2_OBFF_WAKE
 0x00080000

	)

660 
	#PCI_EXP_DEVCAP2_EE_PREFIX
 0x00200000

	)

661 
	#PCI_EXP_DEVCTL2
 40

	)

662 
	#PCI_EXP_DEVCTL2_COMP_TIMEOUT
 0x000‡

	)

663 
	#PCI_EXP_DEVCTL2_COMP_TMOUT_DIS
 0x0010

	)

664 
	#PCI_EXP_DEVCTL2_ARI
 0x0020

	)

665 
	#PCI_EXP_DEVCTL2_ATOMIC_REQ
 0x0040

	)

666 
	#PCI_EXP_DEVCTL2_ATOMIC_EGRESS_BLOCK
 0x0080

	)

667 
	#PCI_EXP_DEVCTL2_IDO_REQ_EN
 0x0100

	)

668 
	#PCI_EXP_DEVCTL2_IDO_CMP_EN
 0x0200

	)

669 
	#PCI_EXP_DEVCTL2_LTR_EN
 0x0400

	)

670 
	#PCI_EXP_DEVCTL2_OBFF_MSGA_EN
 0x2000

	)

671 
	#PCI_EXP_DEVCTL2_OBFF_MSGB_EN
 0x4000

	)

672 
	#PCI_EXP_DEVCTL2_OBFF_WAKE_EN
 0x6000

	)

673 
	#PCI_EXP_DEVSTA2
 42

	)

674 
	#PCI_CAP_EXP_RC_ENDPOINT_SIZEOF_V2
 44

	)

675 
	#PCI_EXP_LNKCAP2
 44

	)

676 
	#PCI_EXP_LNKCAP2_SLS_2_5GB
 0x00000002

	)

677 
	#PCI_EXP_LNKCAP2_SLS_5_0GB
 0x00000004

	)

678 
	#PCI_EXP_LNKCAP2_SLS_8_0GB
 0x00000008

	)

679 
	#PCI_EXP_LNKCAP2_SLS_16_0GB
 0x00000010

	)

680 
	#PCI_EXP_LNKCAP2_SLS_32_0GB
 0x00000020

	)

681 
	#PCI_EXP_LNKCAP2_SLS_64_0GB
 0x00000040

	)

682 
	#PCI_EXP_LNKCAP2_CROSSLINK
 0x00000100

	)

683 
	#PCI_EXP_LNKCTL2
 48

	)

684 
	#PCI_EXP_LNKCTL2_TLS
 0x000f

	)

685 
	#PCI_EXP_LNKCTL2_TLS_2_5GT
 0x0001

	)

686 
	#PCI_EXP_LNKCTL2_TLS_5_0GT
 0x0002

	)

687 
	#PCI_EXP_LNKCTL2_TLS_8_0GT
 0x0003

	)

688 
	#PCI_EXP_LNKCTL2_TLS_16_0GT
 0x0004

	)

689 
	#PCI_EXP_LNKCTL2_TLS_32_0GT
 0x0005

	)

690 
	#PCI_EXP_LNKCTL2_TLS_64_0GT
 0x0006

	)

691 
	#PCI_EXP_LNKCTL2_ENTER_COMP
 0x0010

	)

692 
	#PCI_EXP_LNKCTL2_TX_MARGIN
 0x0380

	)

693 
	#PCI_EXP_LNKCTL2_HASD
 0x0020

	)

694 
	#PCI_EXP_LNKSTA2
 50

	)

695 
	#PCI_CAP_EXP_ENDPOINT_SIZEOF_V2
 52

	)

696 
	#PCI_EXP_SLTCAP2
 52

	)

697 
	#PCI_EXP_SLTCAP2_IBPD
 0x00000001

	)

698 
	#PCI_EXP_SLTCTL2
 56

	)

699 
	#PCI_EXP_SLTSTA2
 58

	)

702 
	#PCI_EXT_CAP_ID
(
hódî
Ë(hódî & 0x0000ffff)

	)

703 
	#PCI_EXT_CAP_VER
(
hódî
Ë((hódî >> 16Ë& 0xf)

	)

704 
	#PCI_EXT_CAP_NEXT
(
hódî
Ë((hódî >> 20Ë& 0xffc)

	)

706 
	#PCI_EXT_CAP_ID_ERR
 0x01

	)

707 
	#PCI_EXT_CAP_ID_VC
 0x02

	)

708 
	#PCI_EXT_CAP_ID_DSN
 0x03

	)

709 
	#PCI_EXT_CAP_ID_PWR
 0x04

	)

710 
	#PCI_EXT_CAP_ID_RCLD
 0x05

	)

711 
	#PCI_EXT_CAP_ID_RCILC
 0x06

	)

712 
	#PCI_EXT_CAP_ID_RCEC
 0x07

	)

713 
	#PCI_EXT_CAP_ID_MFVC
 0x08

	)

714 
	#PCI_EXT_CAP_ID_VC9
 0x09

	)

715 
	#PCI_EXT_CAP_ID_RCRB
 0x0A

	)

716 
	#PCI_EXT_CAP_ID_VNDR
 0x0B

	)

717 
	#PCI_EXT_CAP_ID_CAC
 0x0C

	)

718 
	#PCI_EXT_CAP_ID_ACS
 0x0D

	)

719 
	#PCI_EXT_CAP_ID_ARI
 0x0E

	)

720 
	#PCI_EXT_CAP_ID_ATS
 0x0F

	)

721 
	#PCI_EXT_CAP_ID_SRIOV
 0x10

	)

722 
	#PCI_EXT_CAP_ID_MRIOV
 0x11

	)

723 
	#PCI_EXT_CAP_ID_MCAST
 0x12

	)

724 
	#PCI_EXT_CAP_ID_PRI
 0x13

	)

725 
	#PCI_EXT_CAP_ID_AMD_XXX
 0x14

	)

726 
	#PCI_EXT_CAP_ID_REBAR
 0x15

	)

727 
	#PCI_EXT_CAP_ID_DPA
 0x16

	)

728 
	#PCI_EXT_CAP_ID_TPH
 0x17

	)

729 
	#PCI_EXT_CAP_ID_LTR
 0x18

	)

730 
	#PCI_EXT_CAP_ID_SECPCI
 0x19

	)

731 
	#PCI_EXT_CAP_ID_PMUX
 0x1A

	)

732 
	#PCI_EXT_CAP_ID_PASID
 0x1B

	)

733 
	#PCI_EXT_CAP_ID_DPC
 0x1D

	)

734 
	#PCI_EXT_CAP_ID_L1SS
 0x1E

	)

735 
	#PCI_EXT_CAP_ID_PTM
 0x1F

	)

736 
	#PCI_EXT_CAP_ID_DVSEC
 0x23

	)

737 
	#PCI_EXT_CAP_ID_DLF
 0x25

	)

738 
	#PCI_EXT_CAP_ID_PL_16GT
 0x26

	)

739 
	#PCI_EXT_CAP_ID_MAX
 
PCI_EXT_CAP_ID_PL_16GT


	)

741 
	#PCI_EXT_CAP_DSN_SIZEOF
 12

	)

742 
	#PCI_EXT_CAP_MCAST_ENDPOINT_SIZEOF
 40

	)

745 
	#PCI_ERR_UNCOR_STATUS
 4

	)

746 
	#PCI_ERR_UNC_UND
 0x00000001

	)

747 
	#PCI_ERR_UNC_DLP
 0x00000010

	)

748 
	#PCI_ERR_UNC_SURPDN
 0x00000020

	)

749 
	#PCI_ERR_UNC_POISON_TLP
 0x00001000

	)

750 
	#PCI_ERR_UNC_FCP
 0x00002000

	)

751 
	#PCI_ERR_UNC_COMP_TIME
 0x00004000

	)

752 
	#PCI_ERR_UNC_COMP_ABORT
 0x00008000

	)

753 
	#PCI_ERR_UNC_UNX_COMP
 0x00010000

	)

754 
	#PCI_ERR_UNC_RX_OVER
 0x00020000

	)

755 
	#PCI_ERR_UNC_MALF_TLP
 0x00040000

	)

756 
	#PCI_ERR_UNC_ECRC
 0x00080000

	)

757 
	#PCI_ERR_UNC_UNSUP
 0x00100000

	)

758 
	#PCI_ERR_UNC_ACSV
 0x00200000

	)

759 
	#PCI_ERR_UNC_INTN
 0x00400000

	)

760 
	#PCI_ERR_UNC_MCBTLP
 0x00800000

	)

761 
	#PCI_ERR_UNC_ATOMEG
 0x01000000

	)

762 
	#PCI_ERR_UNC_TLPPRE
 0x02000000

	)

763 
	#PCI_ERR_UNCOR_MASK
 8

	)

765 
	#PCI_ERR_UNCOR_SEVER
 12

	)

767 
	#PCI_ERR_COR_STATUS
 16

	)

768 
	#PCI_ERR_COR_RCVR
 0x00000001

	)

769 
	#PCI_ERR_COR_BAD_TLP
 0x00000040

	)

770 
	#PCI_ERR_COR_BAD_DLLP
 0x00000080

	)

771 
	#PCI_ERR_COR_REP_ROLL
 0x00000100

	)

772 
	#PCI_ERR_COR_REP_TIMER
 0x00001000

	)

773 
	#PCI_ERR_COR_ADV_NFAT
 0x00002000

	)

774 
	#PCI_ERR_COR_INTERNAL
 0x00004000

	)

775 
	#PCI_ERR_COR_LOG_OVER
 0x00008000

	)

776 
	#PCI_ERR_COR_MASK
 20

	)

778 
	#PCI_ERR_CAP
 24

	)

779 
	#PCI_ERR_CAP_FEP
(
x
Ë((xË& 31Ë

	)

780 
	#PCI_ERR_CAP_ECRC_GENC
 0x00000020

	)

781 
	#PCI_ERR_CAP_ECRC_GENE
 0x00000040

	)

782 
	#PCI_ERR_CAP_ECRC_CHKC
 0x00000080

	)

783 
	#PCI_ERR_CAP_ECRC_CHKE
 0x00000100

	)

784 
	#PCI_ERR_HEADER_LOG
 28

	)

785 
	#PCI_ERR_ROOT_COMMAND
 44

	)

786 
	#PCI_ERR_ROOT_CMD_COR_EN
 0x00000001

	)

787 
	#PCI_ERR_ROOT_CMD_NONFATAL_EN
 0x00000002

	)

788 
	#PCI_ERR_ROOT_CMD_FATAL_EN
 0x00000004

	)

789 
	#PCI_ERR_ROOT_STATUS
 48

	)

790 
	#PCI_ERR_ROOT_COR_RCV
 0x00000001

	)

791 
	#PCI_ERR_ROOT_MULTI_COR_RCV
 0x00000002

	)

792 
	#PCI_ERR_ROOT_UNCOR_RCV
 0x00000004

	)

793 
	#PCI_ERR_ROOT_MULTI_UNCOR_RCV
 0x00000008

	)

794 
	#PCI_ERR_ROOT_FIRST_FATAL
 0x00000010

	)

795 
	#PCI_ERR_ROOT_NONFATAL_RCV
 0x00000020

	)

796 
	#PCI_ERR_ROOT_FATAL_RCV
 0x00000040

	)

797 
	#PCI_ERR_ROOT_AER_IRQ
 0xf8000000

	)

798 
	#PCI_ERR_ROOT_ERR_SRC
 52

	)

801 
	#PCI_VC_PORT_CAP1
 4

	)

802 
	#PCI_VC_CAP1_EVCC
 0x00000007

	)

803 
	#PCI_VC_CAP1_LPEVCC
 0x00000070

	)

804 
	#PCI_VC_CAP1_ARB_SIZE
 0x00000c00

	)

805 
	#PCI_VC_PORT_CAP2
 8

	)

806 
	#PCI_VC_CAP2_32_PHASE
 0x00000002

	)

807 
	#PCI_VC_CAP2_64_PHASE
 0x00000004

	)

808 
	#PCI_VC_CAP2_128_PHASE
 0x00000008

	)

809 
	#PCI_VC_CAP2_ARB_OFF
 0xff000000

	)

810 
	#PCI_VC_PORT_CTRL
 12

	)

811 
	#PCI_VC_PORT_CTRL_LOAD_TABLE
 0x00000001

	)

812 
	#PCI_VC_PORT_STATUS
 14

	)

813 
	#PCI_VC_PORT_STATUS_TABLE
 0x00000001

	)

814 
	#PCI_VC_RES_CAP
 16

	)

815 
	#PCI_VC_RES_CAP_32_PHASE
 0x00000002

	)

816 
	#PCI_VC_RES_CAP_64_PHASE
 0x00000004

	)

817 
	#PCI_VC_RES_CAP_128_PHASE
 0x00000008

	)

818 
	#PCI_VC_RES_CAP_128_PHASE_TB
 0x00000010

	)

819 
	#PCI_VC_RES_CAP_256_PHASE
 0x00000020

	)

820 
	#PCI_VC_RES_CAP_ARB_OFF
 0xff000000

	)

821 
	#PCI_VC_RES_CTRL
 20

	)

822 
	#PCI_VC_RES_CTRL_LOAD_TABLE
 0x00010000

	)

823 
	#PCI_VC_RES_CTRL_ARB_SELECT
 0x000e0000

	)

824 
	#PCI_VC_RES_CTRL_ID
 0x07000000

	)

825 
	#PCI_VC_RES_CTRL_ENABLE
 0x80000000

	)

826 
	#PCI_VC_RES_STATUS
 26

	)

827 
	#PCI_VC_RES_STATUS_TABLE
 0x00000001

	)

828 
	#PCI_VC_RES_STATUS_NEGO
 0x00000002

	)

829 
	#PCI_CAP_VC_BASE_SIZEOF
 0x10

	)

830 
	#PCI_CAP_VC_PER_VC_SIZEOF
 0x0C

	)

833 
	#PCI_PWR_DSR
 4

	)

834 
	#PCI_PWR_DATA
 8

	)

835 
	#PCI_PWR_DATA_BASE
(
x
Ë((xË& 0xffË

	)

836 
	#PCI_PWR_DATA_SCALE
(
x
Ë(((xË>> 8Ë& 3Ë

	)

837 
	#PCI_PWR_DATA_PM_SUB
(
x
Ë(((xË>> 10Ë& 7Ë

	)

838 
	#PCI_PWR_DATA_PM_STATE
(
x
Ë(((xË>> 13Ë& 3Ë

	)

839 
	#PCI_PWR_DATA_TYPE
(
x
Ë(((xË>> 15Ë& 7Ë

	)

840 
	#PCI_PWR_DATA_RAIL
(
x
Ë(((xË>> 18Ë& 7Ë

	)

841 
	#PCI_PWR_CAP
 12

	)

842 
	#PCI_PWR_CAP_BUDGET
(
x
Ë((xË& 1Ë

	)

843 
	#PCI_EXT_CAP_PWR_SIZEOF
 16

	)

846 
	#PCI_RCEC_RCIEP_BITMAP
 4

	)

847 
	#PCI_RCEC_BUSN
 8

	)

848 
	#PCI_RCEC_BUSN_REG_VER
 0x02

	)

849 
	#PCI_RCEC_BUSN_NEXT
(
x
Ë(((xË>> 8Ë& 0xff)

	)

850 
	#PCI_RCEC_BUSN_LAST
(
x
Ë(((xË>> 16Ë& 0xff)

	)

853 
	#PCI_VNDR_HEADER
 4

	)

854 
	#PCI_VNDR_HEADER_ID
(
x
Ë((xË& 0xffff)

	)

855 
	#PCI_VNDR_HEADER_REV
(
x
Ë(((xË>> 16Ë& 0xf)

	)

856 
	#PCI_VNDR_HEADER_LEN
(
x
Ë(((xË>> 20Ë& 0xfff)

	)

866 
	#HT_3BIT_CAP_MASK
 0xE0

	)

867 
	#HT_CAPTYPE_SLAVE
 0x00

	)

868 
	#HT_CAPTYPE_HOST
 0x20

	)

870 
	#HT_5BIT_CAP_MASK
 0xF8

	)

871 
	#HT_CAPTYPE_IRQ
 0x80

	)

872 
	#HT_CAPTYPE_REMAPPING_40
 0xA0

	)

873 
	#HT_CAPTYPE_REMAPPING_64
 0xA2

	)

874 
	#HT_CAPTYPE_UNITID_CLUMP
 0x90

	)

875 
	#HT_CAPTYPE_EXTCONF
 0x98

	)

876 
	#HT_CAPTYPE_MSI_MAPPING
 0xA8

	)

877 
	#HT_MSI_FLAGS
 0x02

	)

878 
	#HT_MSI_FLAGS_ENABLE
 0x1

	)

879 
	#HT_MSI_FLAGS_FIXED
 0x2

	)

880 
	#HT_MSI_FIXED_ADDR
 0x00000000FEE00000ULL

	)

881 
	#HT_MSI_ADDR_LO
 0x04

	)

882 
	#HT_MSI_ADDR_LO_MASK
 0xFFF00000

	)

883 
	#HT_MSI_ADDR_HI
 0x08

	)

884 
	#HT_CAPTYPE_DIRECT_ROUTE
 0xB0

	)

885 
	#HT_CAPTYPE_VCSET
 0xB8

	)

886 
	#HT_CAPTYPE_ERROR_RETRY
 0xC0

	)

887 
	#HT_CAPTYPE_GEN3
 0xD0

	)

888 
	#HT_CAPTYPE_PM
 0xE0

	)

889 
	#HT_CAP_SIZEOF_LONG
 28

	)

890 
	#HT_CAP_SIZEOF_SHORT
 24

	)

893 
	#PCI_ARI_CAP
 0x04

	)

894 
	#PCI_ARI_CAP_MFVC
 0x0001

	)

895 
	#PCI_ARI_CAP_ACS
 0x0002

	)

896 
	#PCI_ARI_CAP_NFN
(
x
Ë(((xË>> 8Ë& 0xffË

	)

897 
	#PCI_ARI_CTRL
 0x06

	)

898 
	#PCI_ARI_CTRL_MFVC
 0x0001

	)

899 
	#PCI_ARI_CTRL_ACS
 0x0002

	)

900 
	#PCI_ARI_CTRL_FG
(
x
Ë(((xË>> 4Ë& 7Ë

	)

901 
	#PCI_EXT_CAP_ARI_SIZEOF
 8

	)

904 
	#PCI_ATS_CAP
 0x04

	)

905 
	#PCI_ATS_CAP_QDEP
(
x
Ë((xË& 0x1fË

	)

906 
	#PCI_ATS_MAX_QDEP
 32

	)

907 
	#PCI_ATS_CAP_PAGE_ALIGNED
 0x0020

	)

908 
	#PCI_ATS_CTRL
 0x06

	)

909 
	#PCI_ATS_CTRL_ENABLE
 0x8000

	)

910 
	#PCI_ATS_CTRL_STU
(
x
Ë((xË& 0x1fË

	)

911 
	#PCI_ATS_MIN_STU
 12

	)

912 
	#PCI_EXT_CAP_ATS_SIZEOF
 8

	)

915 
	#PCI_PRI_CTRL
 0x04

	)

916 
	#PCI_PRI_CTRL_ENABLE
 0x0001

	)

917 
	#PCI_PRI_CTRL_RESET
 0x0002

	)

918 
	#PCI_PRI_STATUS
 0x06

	)

919 
	#PCI_PRI_STATUS_RF
 0x0001

	)

920 
	#PCI_PRI_STATUS_UPRGI
 0x0002

	)

921 
	#PCI_PRI_STATUS_STOPPED
 0x0100

	)

922 
	#PCI_PRI_STATUS_PASID
 0x8000

	)

923 
	#PCI_PRI_MAX_REQ
 0x08

	)

924 
	#PCI_PRI_ALLOC_REQ
 0x0¯

	)

925 
	#PCI_EXT_CAP_PRI_SIZEOF
 16

	)

928 
	#PCI_PASID_CAP
 0x04

	)

929 
	#PCI_PASID_CAP_EXEC
 0x02

	)

930 
	#PCI_PASID_CAP_PRIV
 0x04

	)

931 
	#PCI_PASID_CTRL
 0x06

	)

932 
	#PCI_PASID_CTRL_ENABLE
 0x01

	)

933 
	#PCI_PASID_CTRL_EXEC
 0x02

	)

934 
	#PCI_PASID_CTRL_PRIV
 0x04

	)

935 
	#PCI_EXT_CAP_PASID_SIZEOF
 8

	)

938 
	#PCI_SRIOV_CAP
 0x04

	)

939 
	#PCI_SRIOV_CAP_VFM
 0x00000001

	)

940 
	#PCI_SRIOV_CAP_INTR
(
x
Ë((xË>> 21Ë

	)

941 
	#PCI_SRIOV_CTRL
 0x08

	)

942 
	#PCI_SRIOV_CTRL_VFE
 0x0001

	)

943 
	#PCI_SRIOV_CTRL_VFM
 0x0002

	)

944 
	#PCI_SRIOV_CTRL_INTR
 0x0004

	)

945 
	#PCI_SRIOV_CTRL_MSE
 0x0008

	)

946 
	#PCI_SRIOV_CTRL_ARI
 0x0010

	)

947 
	#PCI_SRIOV_STATUS
 0x0®

	)

948 
	#PCI_SRIOV_STATUS_VFM
 0x0001

	)

949 
	#PCI_SRIOV_INITIAL_VF
 0x0¯

	)

950 
	#PCI_SRIOV_TOTAL_VF
 0x0ê

	)

951 
	#PCI_SRIOV_NUM_VF
 0x10

	)

952 
	#PCI_SRIOV_FUNC_LINK
 0x12

	)

953 
	#PCI_SRIOV_VF_OFFSET
 0x14

	)

954 
	#PCI_SRIOV_VF_STRIDE
 0x16

	)

955 
	#PCI_SRIOV_VF_DID
 0x1®

	)

956 
	#PCI_SRIOV_SUP_PGSIZE
 0x1¯

	)

957 
	#PCI_SRIOV_SYS_PGSIZE
 0x20

	)

958 
	#PCI_SRIOV_BAR
 0x24

	)

959 
	#PCI_SRIOV_NUM_BARS
 6

	)

960 
	#PCI_SRIOV_VFM
 0x3¯

	)

961 
	#PCI_SRIOV_VFM_BIR
(
x
Ë((xË& 7Ë

	)

962 
	#PCI_SRIOV_VFM_OFFSET
(
x
Ë((xË& ~7Ë

	)

963 
	#PCI_SRIOV_VFM_UA
 0x0

	)

964 
	#PCI_SRIOV_VFM_MI
 0x1

	)

965 
	#PCI_SRIOV_VFM_MO
 0x2

	)

966 
	#PCI_SRIOV_VFM_AV
 0x3

	)

967 
	#PCI_EXT_CAP_SRIOV_SIZEOF
 64

	)

969 
	#PCI_LTR_MAX_SNOOP_LAT
 0x4

	)

970 
	#PCI_LTR_MAX_NOSNOOP_LAT
 0x6

	)

971 
	#PCI_LTR_VALUE_MASK
 0x000003ff

	)

972 
	#PCI_LTR_SCALE_MASK
 0x00001c00

	)

973 
	#PCI_LTR_SCALE_SHIFT
 10

	)

974 
	#PCI_EXT_CAP_LTR_SIZEOF
 8

	)

977 
	#PCI_ACS_CAP
 0x04

	)

978 
	#PCI_ACS_SV
 0x0001

	)

979 
	#PCI_ACS_TB
 0x0002

	)

980 
	#PCI_ACS_RR
 0x0004

	)

981 
	#PCI_ACS_CR
 0x0008

	)

982 
	#PCI_ACS_UF
 0x0010

	)

983 
	#PCI_ACS_EC
 0x0020

	)

984 
	#PCI_ACS_DT
 0x0040

	)

985 
	#PCI_ACS_EGRESS_BITS
 0x05

	)

986 
	#PCI_ACS_CTRL
 0x06

	)

987 
	#PCI_ACS_EGRESS_CTL_V
 0x08

	)

989 
	#PCI_VSEC_HDR
 4

	)

990 
	#PCI_VSEC_HDR_LEN_SHIFT
 20

	)

993 
	#PCI_SATA_REGS
 4

	)

994 
	#PCI_SATA_REGS_MASK
 0xF

	)

995 
	#PCI_SATA_REGS_INLINE
 0xF

	)

996 
	#PCI_SATA_SIZEOF_SHORT
 8

	)

997 
	#PCI_SATA_SIZEOF_LONG
 16

	)

1000 
	#PCI_REBAR_CAP
 4

	)

1001 
	#PCI_REBAR_CAP_SIZES
 0x00FFFFF0

	)

1002 
	#PCI_REBAR_CTRL
 8

	)

1003 
	#PCI_REBAR_CTRL_BAR_IDX
 0x00000007

	)

1004 
	#PCI_REBAR_CTRL_NBAR_MASK
 0x000000E0

	)

1005 
	#PCI_REBAR_CTRL_NBAR_SHIFT
 5

	)

1006 
	#PCI_REBAR_CTRL_BAR_SIZE
 0x00001F00

	)

1007 
	#PCI_REBAR_CTRL_BAR_SHIFT
 8

	)

1010 
	#PCI_DPA_CAP
 4

	)

1011 
	#PCI_DPA_CAP_SUBSTATE_MASK
 0x1F

	)

1012 
	#PCI_DPA_BASE_SIZEOF
 16

	)

1015 
	#PCI_TPH_CAP
 4

	)

1016 
	#PCI_TPH_CAP_LOC_MASK
 0x600

	)

1017 
	#PCI_TPH_LOC_NONE
 0x000

	)

1018 
	#PCI_TPH_LOC_CAP
 0x200

	)

1019 
	#PCI_TPH_LOC_MSIX
 0x400

	)

1020 
	#PCI_TPH_CAP_ST_MASK
 0x07FF0000

	)

1021 
	#PCI_TPH_CAP_ST_SHIFT
 16

	)

1022 
	#PCI_TPH_BASE_SIZEOF
 12

	)

1025 
	#PCI_EXP_DPC_CAP
 4

	)

1026 
	#PCI_EXP_DPC_IRQ
 0x001F

	)

1027 
	#PCI_EXP_DPC_CAP_RP_EXT
 0x0020

	)

1028 
	#PCI_EXP_DPC_CAP_POISONED_TLP
 0x0040

	)

1029 
	#PCI_EXP_DPC_CAP_SW_TRIGGER
 0x0080

	)

1030 
	#PCI_EXP_DPC_RP_PIO_LOG_SIZE
 0x0F00

	)

1031 
	#PCI_EXP_DPC_CAP_DL_ACTIVE
 0x1000

	)

1033 
	#PCI_EXP_DPC_CTL
 6

	)

1034 
	#PCI_EXP_DPC_CTL_EN_FATAL
 0x0001

	)

1035 
	#PCI_EXP_DPC_CTL_EN_NONFATAL
 0x0002

	)

1036 
	#PCI_EXP_DPC_CTL_INT_EN
 0x0008

	)

1038 
	#PCI_EXP_DPC_STATUS
 8

	)

1039 
	#PCI_EXP_DPC_STATUS_TRIGGER
 0x0001

	)

1040 
	#PCI_EXP_DPC_STATUS_TRIGGER_RSN
 0x0006

	)

1041 
	#PCI_EXP_DPC_STATUS_INTERRUPT
 0x0008

	)

1042 
	#PCI_EXP_DPC_RP_BUSY
 0x0010

	)

1043 
	#PCI_EXP_DPC_STATUS_TRIGGER_RSN_EXT
 0x0060

	)

1045 
	#PCI_EXP_DPC_SOURCE_ID
 10

	)

1047 
	#PCI_EXP_DPC_RP_PIO_STATUS
 0x0C

	)

1048 
	#PCI_EXP_DPC_RP_PIO_MASK
 0x10

	)

1049 
	#PCI_EXP_DPC_RP_PIO_SEVERITY
 0x14

	)

1050 
	#PCI_EXP_DPC_RP_PIO_SYSERROR
 0x18

	)

1051 
	#PCI_EXP_DPC_RP_PIO_EXCEPTION
 0x1C

	)

1052 
	#PCI_EXP_DPC_RP_PIO_HEADER_LOG
 0x20

	)

1053 
	#PCI_EXP_DPC_RP_PIO_IMPSPEC_LOG
 0x30

	)

1054 
	#PCI_EXP_DPC_RP_PIO_TLPPREFIX_LOG
 0x34

	)

1057 
	#PCI_PTM_CAP
 0x04

	)

1058 
	#PCI_PTM_CAP_REQ
 0x00000001

	)

1059 
	#PCI_PTM_CAP_ROOT
 0x00000004

	)

1060 
	#PCI_PTM_GRANULARITY_MASK
 0x0000FF00

	)

1061 
	#PCI_PTM_CTRL
 0x08

	)

1062 
	#PCI_PTM_CTRL_ENABLE
 0x00000001

	)

1063 
	#PCI_PTM_CTRL_ROOT
 0x00000002

	)

1066 
	#PCI_L1SS_CAP
 0x04

	)

1067 
	#PCI_L1SS_CAP_PCIPM_L1_2
 0x00000001

	)

1068 
	#PCI_L1SS_CAP_PCIPM_L1_1
 0x00000002

	)

1069 
	#PCI_L1SS_CAP_ASPM_L1_2
 0x00000004

	)

1070 
	#PCI_L1SS_CAP_ASPM_L1_1
 0x00000008

	)

1071 
	#PCI_L1SS_CAP_L1_PM_SS
 0x00000010

	)

1072 
	#PCI_L1SS_CAP_CM_RESTORE_TIME
 0x0000ff00

	)

1073 
	#PCI_L1SS_CAP_P_PWR_ON_SCALE
 0x00030000

	)

1074 
	#PCI_L1SS_CAP_P_PWR_ON_VALUE
 0x00f80000

	)

1075 
	#PCI_L1SS_CTL1
 0x08

	)

1076 
	#PCI_L1SS_CTL1_PCIPM_L1_2
 0x00000001

	)

1077 
	#PCI_L1SS_CTL1_PCIPM_L1_1
 0x00000002

	)

1078 
	#PCI_L1SS_CTL1_ASPM_L1_2
 0x00000004

	)

1079 
	#PCI_L1SS_CTL1_ASPM_L1_1
 0x00000008

	)

1080 
	#PCI_L1SS_CTL1_L1_2_MASK
 0x00000005

	)

1081 
	#PCI_L1SS_CTL1_L1SS_MASK
 0x0000000f

	)

1082 
	#PCI_L1SS_CTL1_CM_RESTORE_TIME
 0x0000ff00

	)

1083 
	#PCI_L1SS_CTL1_LTR_L12_TH_VALUE
 0x03ff0000

	)

1084 
	#PCI_L1SS_CTL1_LTR_L12_TH_SCALE
 0xe0000000

	)

1085 
	#PCI_L1SS_CTL2
 0x0¯

	)

1088 
	#PCI_DVSEC_HEADER1
 0x4

	)

1089 
	#PCI_DVSEC_HEADER2
 0x8

	)

1092 
	#PCI_DLF_CAP
 0x04

	)

1093 
	#PCI_DLF_EXCHANGE_ENABLE
 0x80000000

	)

1096 
	#PCI_PL_16GT_LE_CTRL
 0x20

	)

1097 
	#PCI_PL_16GT_LE_CTRL_DSP_TX_PRESET_MASK
 0x0000000F

	)

1098 
	#PCI_PL_16GT_LE_CTRL_USP_TX_PRESET_MASK
 0x000000F0

	)

1099 
	#PCI_PL_16GT_LE_CTRL_USP_TX_PRESET_SHIFT
 4

	)

	@/usr/include/linux/posix_types.h

2 #i‚de‡
_LINUX_POSIX_TYPES_H


3 
	#_LINUX_POSIX_TYPES_H


	)

5 
	~<löux/°ddef.h
>

22 #unde‡
__FD_SETSIZE


23 
	#__FD_SETSIZE
 1024

	)

26 
	mfds_bôs
[
__FD_SETSIZE
 / (8 * ())];

27 } 
	t__kî√l_fd_£t
;

30 (*
	t__kî√l_sigh™dÀr_t
)();

33 
	t__kî√l_key_t
;

34 
	t__kî√l_mqd_t
;

36 
	~<asm/posix_ty≥s.h
>

	@/usr/include/linux/ptrace.h

2 #i‚de‡
_LINUX_PTRACE_H


3 
	#_LINUX_PTRACE_H


	)

9 
	~<löux/ty≥s.h
>

11 
	#PTRACE_TRACEME
 0

	)

12 
	#PTRACE_PEEKTEXT
 1

	)

13 
	#PTRACE_PEEKDATA
 2

	)

14 
	#PTRACE_PEEKUSR
 3

	)

15 
	#PTRACE_POKETEXT
 4

	)

16 
	#PTRACE_POKEDATA
 5

	)

17 
	#PTRACE_POKEUSR
 6

	)

18 
	#PTRACE_CONT
 7

	)

19 
	#PTRACE_KILL
 8

	)

20 
	#PTRACE_SINGLESTEP
 9

	)

22 
	#PTRACE_ATTACH
 16

	)

23 
	#PTRACE_DETACH
 17

	)

25 
	#PTRACE_SYSCALL
 24

	)

28 
	#PTRACE_SETOPTIONS
 0x4200

	)

29 
	#PTRACE_GETEVENTMSG
 0x4201

	)

30 
	#PTRACE_GETSIGINFO
 0x4202

	)

31 
	#PTRACE_SETSIGINFO
 0x4203

	)

50 
	#PTRACE_GETREGSET
 0x4204

	)

51 
	#PTRACE_SETREGSET
 0x4205

	)

53 
	#PTRACE_SEIZE
 0x4206

	)

54 
	#PTRACE_INTERRUPT
 0x4207

	)

55 
	#PTRACE_LISTEN
 0x4208

	)

57 
	#PTRACE_PEEKSIGINFO
 0x4209

	)

59 
	s±ø˚_≥eksigöfo_¨gs
 {

60 
__u64
 
	moff
;

61 
__u32
 
	mÊags
;

62 
__s32
 
	mƒ
;

65 
	#PTRACE_GETSIGMASK
 0x420a

	)

66 
	#PTRACE_SETSIGMASK
 0x420b

	)

68 
	#PTRACE_SECCOMP_GET_FILTER
 0x420c

	)

69 
	#PTRACE_SECCOMP_GET_METADATA
 0x420d

	)

71 
	s£ccomp_mëad©a
 {

72 
__u64
 
	mfûãr_off
;

73 
__u64
 
	mÊags
;

76 
	#PTRACE_GET_SYSCALL_INFO
 0x420e

	)

77 
	#PTRACE_SYSCALL_INFO_NONE
 0

	)

78 
	#PTRACE_SYSCALL_INFO_ENTRY
 1

	)

79 
	#PTRACE_SYSCALL_INFO_EXIT
 2

	)

80 
	#PTRACE_SYSCALL_INFO_SECCOMP
 3

	)

82 
	s±ø˚_sysˇŒ_öfo
 {

83 
__u8
 
	m›
;

84 
__u8
 
	m∑d
[3];

85 
__u32
 
	m¨ch
;

86 
__u64
 
	mö°ru˘i⁄_poöãr
;

87 
__u64
 
	m°ack_poöãr
;

90 
__u64
 
	mƒ
;

91 
__u64
 
	m¨gs
[6];

92 } 
	míåy
;

94 
__s64
 
	mrvÆ
;

95 
__u8
 
	mis_îr‹
;

96 } 
	mexô
;

98 
__u64
 
	mƒ
;

99 
__u64
 
	m¨gs
[6];

100 
__u32
 
	mªt_d©a
;

101 } 
	m£ccomp
;

105 
	#PTRACE_GET_RSEQ_CONFIGURATION
 0x420f

	)

107 
	s±ø˚_r£q_c⁄figuøti⁄
 {

108 
__u64
 
	mr£q_abi_poöãr
;

109 
__u32
 
	mr£q_abi_size
;

110 
__u32
 
	msig«tuª
;

111 
__u32
 
	mÊags
;

112 
__u32
 
	m∑d
;

119 
	#PTRACE_EVENTMSG_SYSCALL_ENTRY
 1

	)

120 
	#PTRACE_EVENTMSG_SYSCALL_EXIT
 2

	)

123 
	#PTRACE_PEEKSIGINFO_SHARED
 (1 << 0)

	)

126 
	#PTRACE_EVENT_FORK
 1

	)

127 
	#PTRACE_EVENT_VFORK
 2

	)

128 
	#PTRACE_EVENT_CLONE
 3

	)

129 
	#PTRACE_EVENT_EXEC
 4

	)

130 
	#PTRACE_EVENT_VFORK_DONE
 5

	)

131 
	#PTRACE_EVENT_EXIT
 6

	)

132 
	#PTRACE_EVENT_SECCOMP
 7

	)

134 
	#PTRACE_EVENT_STOP
 128

	)

137 
	#PTRACE_O_TRACESYSGOOD
 1

	)

138 
	#PTRACE_O_TRACEFORK
 (1 << 
PTRACE_EVENT_FORK
)

	)

139 
	#PTRACE_O_TRACEVFORK
 (1 << 
PTRACE_EVENT_VFORK
)

	)

140 
	#PTRACE_O_TRACECLONE
 (1 << 
PTRACE_EVENT_CLONE
)

	)

141 
	#PTRACE_O_TRACEEXEC
 (1 << 
PTRACE_EVENT_EXEC
)

	)

142 
	#PTRACE_O_TRACEVFORKDONE
 (1 << 
PTRACE_EVENT_VFORK_DONE
)

	)

143 
	#PTRACE_O_TRACEEXIT
 (1 << 
PTRACE_EVENT_EXIT
)

	)

144 
	#PTRACE_O_TRACESECCOMP
 (1 << 
PTRACE_EVENT_SECCOMP
)

	)

147 
	#PTRACE_O_EXITKILL
 (1 << 20)

	)

148 
	#PTRACE_O_SUSPEND_SECCOMP
 (1 << 21)

	)

150 
	#PTRACE_O_MASK
 (\

151 0x000000f‡| 
PTRACE_O_EXITKILL
 | 
PTRACE_O_SUSPEND_SECCOMP
)

	)

153 
	~<asm/±ø˚.h
>

	@/usr/include/linux/stddef.h

2 #i‚de‡
_LINUX_STDDEF_H


3 
	#_LINUX_STDDEF_H


	)

7 #i‚de‡
__Æways_ölöe


8 
	#__Æways_ölöe
 
__ölöe__


	)

26 
	#__°ru˘_group
(
TAG
, 
NAME
, 
ATTRS
, 
MEMBERS
...) \

28 °ru˘ { 
MEMBERS
 } 
ATTRS
; \

29 
	sTAG
 { 
MEMBERS
 } 
ATTRS
 
NAME
; \

30 }

	)

42 
	#__DECLARE_FLEX_ARRAY
(
TYPE
, 
NAME
) \

44 °ru˘ { } 
__em±y_
 ## 
NAME
; \

45 
TYPE
 
NAME
[]; \

46 }

	)

	@/usr/include/linux/swab.h

2 #i‚de‡
_LINUX_SWAB_H


3 
	#_LINUX_SWAB_H


	)

5 
	~<löux/ty≥s.h
>

6 
	~<löux/°ddef.h
>

7 
	~<asm/bô•îl⁄g.h
>

8 
	~<asm/swab.h
>

14 
	#___c⁄°™t_swab16
(
x
Ë((
__u16
)( \

15 (((
__u16
)(
x
) & (__u16)0x00ffU) << 8) | \

16 (((
__u16
)(
x
Ë& (__u16)0xff00UË>> 8)))

	)

18 
	#___c⁄°™t_swab32
(
x
Ë((
__u32
)( \

19 (((
__u32
)(
x
) & (__u32)0x000000ffUL) << 24) | \

20 (((
__u32
)(
x
) & (__u32)0x0000ff00UL) << 8) | \

21 (((
__u32
)(
x
) & (__u32)0x00ff0000UL) >> 8) | \

22 (((
__u32
)(
x
Ë& (__u32)0xff000000ULË>> 24)))

	)

24 
	#___c⁄°™t_swab64
(
x
Ë((
__u64
)( \

25 (((
__u64
)(
x
) & (__u64)0x00000000000000ffULL) << 56) | \

26 (((
__u64
)(
x
) & (__u64)0x000000000000ff00ULL) << 40) | \

27 (((
__u64
)(
x
) & (__u64)0x0000000000ff0000ULL) << 24) | \

28 (((
__u64
)(
x
) & (__u64)0x00000000ff000000ULL) << 8) | \

29 (((
__u64
)(
x
) & (__u64)0x000000ff00000000ULL) >> 8) | \

30 (((
__u64
)(
x
) & (__u64)0x0000ff0000000000ULL) >> 24) | \

31 (((
__u64
)(
x
) & (__u64)0x00ff000000000000ULL) >> 40) | \

32 (((
__u64
)(
x
Ë& (__u64)0xff00000000000000ULLË>> 56)))

	)

34 
	#___c⁄°™t_swahw32
(
x
Ë((
__u32
)( \

35 (((
__u32
)(
x
) & (__u32)0x0000ffffUL) << 16) | \

36 (((
__u32
)(
x
Ë& (__u32)0xffff0000ULË>> 16)))

	)

38 
	#___c⁄°™t_swahb32
(
x
Ë((
__u32
)( \

39 (((
__u32
)(
x
) & (__u32)0x00ff00ffUL) << 8) | \

40 (((
__u32
)(
x
Ë& (__u32)0xff00ff00ULË>> 8)))

	)

48 
__ölöe__
 
__u16
 
	$__fswab16
(
__u16
 
vÆ
)

50 #i‡
	`deföed
 (
__¨ch_swab16
)

51  
	`__¨ch_swab16
(
vÆ
);

53  
	`___c⁄°™t_swab16
(
vÆ
);

55 
	}
}

57 
__ölöe__
 
__u32
 
	$__fswab32
(
__u32
 
vÆ
)

59 #i‡
	`deföed
(
__¨ch_swab32
)

60  
	`__¨ch_swab32
(
vÆ
);

62  
	`___c⁄°™t_swab32
(
vÆ
);

64 
	}
}

66 
__ölöe__
 
__u64
 
	$__fswab64
(
__u64
 
vÆ
)

68 #i‡
	`deföed
 (
__¨ch_swab64
)

69  
	`__¨ch_swab64
(
vÆ
);

70 #ñi‡
	`deföed
(
__SWAB_64_THRU_32__
)

71 
__u32
 
h
 = 
vÆ
 >> 32;

72 
__u32
 
l
 = 
vÆ
 & ((1ULL << 32) - 1);

73  (((
__u64
)
	`__fswab32
(
l
)Ë<< 32Ë| ((__u64)(__fswab32(
h
)));

75  
	`___c⁄°™t_swab64
(
vÆ
);

77 
	}
}

79 
__ölöe__
 
__u32
 
	$__fswahw32
(
__u32
 
vÆ
)

81 #ifde‡
__¨ch_swahw32


82  
	`__¨ch_swahw32
(
vÆ
);

84  
	`___c⁄°™t_swahw32
(
vÆ
);

86 
	}
}

88 
__ölöe__
 
__u32
 
	$__fswahb32
(
__u32
 
vÆ
)

90 #ifde‡
__¨ch_swahb32


91  
	`__¨ch_swahb32
(
vÆ
);

93  
	`___c⁄°™t_swahb32
(
vÆ
);

95 
	}
}

101 #ifde‡
__HAVE_BUILTIN_BSWAP16__


102 
	#__swab16
(
x
Ë(
__u16
)
	`__buûtö_bsw≠16
((__u16)(x))

	)

104 
	#__swab16
(
x
) \

105 (
	`__buûtö_c⁄°™t_p
((
__u16
)(
x
)) ? \

106 
	`___c⁄°™t_swab16
(
x
) : \

107 
	`__fswab16
(
x
))

	)

114 #ifde‡
__HAVE_BUILTIN_BSWAP32__


115 
	#__swab32
(
x
Ë(
__u32
)
	`__buûtö_bsw≠32
((__u32)(x))

	)

117 
	#__swab32
(
x
) \

118 (
	`__buûtö_c⁄°™t_p
((
__u32
)(
x
)) ? \

119 
	`___c⁄°™t_swab32
(
x
) : \

120 
	`__fswab32
(
x
))

	)

127 #ifde‡
__HAVE_BUILTIN_BSWAP64__


128 
	#__swab64
(
x
Ë(
__u64
)
	`__buûtö_bsw≠64
((__u64)(x))

	)

130 
	#__swab64
(
x
) \

131 (
	`__buûtö_c⁄°™t_p
((
__u64
)(
x
)) ? \

132 
	`___c⁄°™t_swab64
(
x
) : \

133 
	`__fswab64
(
x
))

	)

136 
__Æways_ölöe
 
	$__swab
(c⁄° 
y
)

138 #i‡
__BITS_PER_LONG
 == 64

139  
	`__swab64
(
y
);

141  
	`__swab32
(
y
);

143 
	}
}

151 
	#__swahw32
(
x
) \

152 (
	`__buûtö_c⁄°™t_p
((
__u32
)(
x
)) ? \

153 
	`___c⁄°™t_swahw32
(
x
) : \

154 
	`__fswahw32
(
x
))

	)

162 
	#__swahb32
(
x
) \

163 (
	`__buûtö_c⁄°™t_p
((
__u32
)(
x
)) ? \

164 
	`___c⁄°™t_swahb32
(
x
) : \

165 
	`__fswahb32
(
x
))

	)

171 
__Æways_ölöe
 
__u16
 
	$__swab16p
(c⁄° 
__u16
 *
p
)

173 #ifde‡
__¨ch_swab16p


174  
	`__¨ch_swab16p
(
p
);

176  
	`__swab16
(*
p
);

178 
	}
}

184 
__Æways_ölöe
 
__u32
 
	$__swab32p
(c⁄° 
__u32
 *
p
)

186 #ifde‡
__¨ch_swab32p


187  
	`__¨ch_swab32p
(
p
);

189  
	`__swab32
(*
p
);

191 
	}
}

197 
__Æways_ölöe
 
__u64
 
	$__swab64p
(c⁄° 
__u64
 *
p
)

199 #ifde‡
__¨ch_swab64p


200  
	`__¨ch_swab64p
(
p
);

202  
	`__swab64
(*
p
);

204 
	}
}

212 
__ölöe__
 
__u32
 
	$__swahw32p
(c⁄° 
__u32
 *
p
)

214 #ifde‡
__¨ch_swahw32p


215  
	`__¨ch_swahw32p
(
p
);

217  
	`__swahw32
(*
p
);

219 
	}
}

227 
__ölöe__
 
__u32
 
	$__swahb32p
(c⁄° 
__u32
 *
p
)

229 #ifde‡
__¨ch_swahb32p


230  
	`__¨ch_swahb32p
(
p
);

232  
	`__swahb32
(*
p
);

234 
	}
}

240 
__ölöe__
 
	$__swab16s
(
__u16
 *
p
)

242 #ifde‡
__¨ch_swab16s


243 
	`__¨ch_swab16s
(
p
);

245 *
p
 = 
	`__swab16p
(p);

247 
	}
}

252 
__Æways_ölöe
 
	$__swab32s
(
__u32
 *
p
)

254 #ifde‡
__¨ch_swab32s


255 
	`__¨ch_swab32s
(
p
);

257 *
p
 = 
	`__swab32p
(p);

259 
	}
}

265 
__Æways_ölöe
 
	$__swab64s
(
__u64
 *
p
)

267 #ifde‡
__¨ch_swab64s


268 
	`__¨ch_swab64s
(
p
);

270 *
p
 = 
	`__swab64p
(p);

272 
	}
}

280 
__ölöe__
 
	$__swahw32s
(
__u32
 *
p
)

282 #ifde‡
__¨ch_swahw32s


283 
	`__¨ch_swahw32s
(
p
);

285 *
p
 = 
	`__swahw32p
(p);

287 
	}
}

295 
__ölöe__
 
	$__swahb32s
(
__u32
 *
p
)

297 #ifde‡
__¨ch_swahb32s


298 
	`__¨ch_swahb32s
(
p
);

300 *
p
 = 
	`__swahb32p
(p);

302 
	}
}

	@/usr/include/linux/sysinfo.h

2 #i‚de‡
_LINUX_SYSINFO_H


3 
	#_LINUX_SYSINFO_H


	)

5 
	~<löux/ty≥s.h
>

7 
	#SI_LOAD_SHIFT
 16

	)

8 
	ssysöfo
 {

9 
__kî√l_l⁄g_t
 
	mu±ime
;

10 
__kî√l_ul⁄g_t
 
	mlﬂds
[3];

11 
__kî√l_ul⁄g_t
 
	mtŸÆøm
;

12 
__kî√l_ul⁄g_t
 
	m‰ìøm
;

13 
__kî√l_ul⁄g_t
 
	msh¨edøm
;

14 
__kî√l_ul⁄g_t
 
	mbuf„ºam
;

15 
__kî√l_ul⁄g_t
 
	mtŸÆsw≠
;

16 
__kî√l_ul⁄g_t
 
	m‰ìsw≠
;

17 
__u16
 
	m¥ocs
;

18 
__u16
 
	m∑d
;

19 
__kî√l_ul⁄g_t
 
	mtŸÆhigh
;

20 
__kî√l_ul⁄g_t
 
	m‰ìhigh
;

21 
__u32
 
	mmem_unô
;

22 
	m_f
[20-2*(
__kî√l_ul⁄g_t
)-(
__u32
)];

	@/usr/include/linux/time_types.h

2 #i‚de‡
_LINUX_TIME_TYPES_H


3 
	#_LINUX_TIME_TYPES_H


	)

5 
	~<löux/ty≥s.h
>

7 
	s__kî√l_time•ec
 {

8 
__kî√l_time64_t
 
	mtv_£c
;

9 
	mtv_n£c
;

12 
	s__kî√l_ôimî•ec
 {

13 
__kî√l_time•ec
 
	mô_öãrvÆ
;

14 
__kî√l_time•ec
 
	mô_vÆue
;

24 #i‚de‡
__kî√l_ﬁd_timevÆ


25 
	s__kî√l_ﬁd_timevÆ
 {

26 
__kî√l_l⁄g_t
 
	mtv_£c
;

27 
__kî√l_l⁄g_t
 
	mtv_u£c
;

31 
	s__kî√l_ﬁd_time•ec
 {

32 
__kî√l_ﬁd_time_t
 
	mtv_£c
;

33 
	mtv_n£c
;

36 
	s__kî√l_ﬁd_ôimîvÆ
 {

37 
__kî√l_ﬁd_timevÆ
 
	mô_öãrvÆ
;

38 
__kî√l_ﬁd_timevÆ
 
	mô_vÆue
;

41 
	s__kî√l_sock_timevÆ
 {

42 
__s64
 
	mtv_£c
;

43 
__s64
 
	mtv_u£c
;

	@/usr/include/openssl/asn1.h

15 #i‚de‡
OPENSSL_ASN1_H


16 
	#OPENSSL_ASN1_H


	)

17 #¥agm®
⁄˚


19 
	~<›ís¶/ma¸os.h
>

20 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


21 
	#HEADER_ASN1_H


	)

24 
	~<time.h
>

25 
	~<›ís¶/e_os2.h
>

26 
	~<›ís¶/›ís¶c⁄f.h
>

27 
	~<›ís¶/bio.h
>

28 
	~<›ís¶/ß„°ack.h
>

29 
	~<›ís¶/a¢1îr.h
>

30 
	~<›ís¶/symhacks.h
>

32 
	~<›ís¶/ty≥s.h
>

33 
	~<›ís¶/bn.h
>

35 #ifde‡
OPENSSL_BUILD_SHLIBCRYPTO


36 #unde‡
OPENSSL_EXTERN


37 
	#OPENSSL_EXTERN
 
OPENSSL_EXPORT


	)

40 #ifde‡ 
__˝lu•lus


44 
	#V_ASN1_UNIVERSAL
 0x00

	)

45 
	#V_ASN1_APPLICATION
 0x40

	)

46 
	#V_ASN1_CONTEXT_SPECIFIC
 0x80

	)

47 
	#V_ASN1_PRIVATE
 0xc0

	)

49 
	#V_ASN1_CONSTRUCTED
 0x20

	)

50 
	#V_ASN1_PRIMITIVE_TAG
 0x1f

	)

51 
	#V_ASN1_PRIMATIVE_TAG
 
V_ASN1_PRIMITIVE_TAG


	)

53 
	#V_ASN1_APP_CHOOSE
 -2

	)

54 
	#V_ASN1_OTHER
 -3

	)

55 
	#V_ASN1_ANY
 -4

	)

57 
	#V_ASN1_UNDEF
 -1

	)

59 
	#V_ASN1_EOC
 0

	)

60 
	#V_ASN1_BOOLEAN
 1

	)

61 
	#V_ASN1_INTEGER
 2

	)

62 
	#V_ASN1_BIT_STRING
 3

	)

63 
	#V_ASN1_OCTET_STRING
 4

	)

64 
	#V_ASN1_NULL
 5

	)

65 
	#V_ASN1_OBJECT
 6

	)

66 
	#V_ASN1_OBJECT_DESCRIPTOR
 7

	)

67 
	#V_ASN1_EXTERNAL
 8

	)

68 
	#V_ASN1_REAL
 9

	)

69 
	#V_ASN1_ENUMERATED
 10

	)

70 
	#V_ASN1_UTF8STRING
 12

	)

71 
	#V_ASN1_SEQUENCE
 16

	)

72 
	#V_ASN1_SET
 17

	)

73 
	#V_ASN1_NUMERICSTRING
 18

	)

74 
	#V_ASN1_PRINTABLESTRING
 19

	)

75 
	#V_ASN1_T61STRING
 20

	)

76 
	#V_ASN1_TELETEXSTRING
 20

	)

77 
	#V_ASN1_VIDEOTEXSTRING
 21

	)

78 
	#V_ASN1_IA5STRING
 22

	)

79 
	#V_ASN1_UTCTIME
 23

	)

80 
	#V_ASN1_GENERALIZEDTIME
 24

	)

81 
	#V_ASN1_GRAPHICSTRING
 25

	)

82 
	#V_ASN1_ISO64STRING
 26

	)

83 
	#V_ASN1_VISIBLESTRING
 26

	)

84 
	#V_ASN1_GENERALSTRING
 27

	)

85 
	#V_ASN1_UNIVERSALSTRING
 28

	)

86 
	#V_ASN1_BMPSTRING
 30

	)

94 
	#V_ASN1_NEG
 0x100

	)

95 
	#V_ASN1_NEG_INTEGER
 (2 | 
V_ASN1_NEG
)

	)

96 
	#V_ASN1_NEG_ENUMERATED
 (10 | 
V_ASN1_NEG
)

	)

99 
	#B_ASN1_NUMERICSTRING
 0x0001

	)

100 
	#B_ASN1_PRINTABLESTRING
 0x0002

	)

101 
	#B_ASN1_T61STRING
 0x0004

	)

102 
	#B_ASN1_TELETEXSTRING
 0x0004

	)

103 
	#B_ASN1_VIDEOTEXSTRING
 0x0008

	)

104 
	#B_ASN1_IA5STRING
 0x0010

	)

105 
	#B_ASN1_GRAPHICSTRING
 0x0020

	)

106 
	#B_ASN1_ISO64STRING
 0x0040

	)

107 
	#B_ASN1_VISIBLESTRING
 0x0040

	)

108 
	#B_ASN1_GENERALSTRING
 0x0080

	)

109 
	#B_ASN1_UNIVERSALSTRING
 0x0100

	)

110 
	#B_ASN1_OCTET_STRING
 0x0200

	)

111 
	#B_ASN1_BIT_STRING
 0x0400

	)

112 
	#B_ASN1_BMPSTRING
 0x0800

	)

113 
	#B_ASN1_UNKNOWN
 0x1000

	)

114 
	#B_ASN1_UTF8STRING
 0x2000

	)

115 
	#B_ASN1_UTCTIME
 0x4000

	)

116 
	#B_ASN1_GENERALIZEDTIME
 0x8000

	)

117 
	#B_ASN1_SEQUENCE
 0x10000

	)

119 
	#MBSTRING_FLAG
 0x1000

	)

120 
	#MBSTRING_UTF8
 (
MBSTRING_FLAG
)

	)

121 
	#MBSTRING_ASC
 (
MBSTRING_FLAG
|1)

	)

122 
	#MBSTRING_BMP
 (
MBSTRING_FLAG
|2)

	)

123 
	#MBSTRING_UNIV
 (
MBSTRING_FLAG
|4)

	)

124 
	#SMIME_OLDMIME
 0x400

	)

125 
	#SMIME_CRLFEOL
 0x800

	)

126 
	#SMIME_STREAM
 0x1000

	)

129 
SKM_DEFINE_STACK_OF_INTERNAL
(
X509_ALGOR
, X509_ALGOR, X509_ALGOR)

130 
	#sk_X509_ALGOR_num
(
sk
Ë
	`OPENSSL_sk_num
(
	`os¶_check_c⁄°_X509_ALGOR_sk_ty≥
(sk))

	)

131 
	#sk_X509_ALGOR_vÆue
(
sk
, 
idx
Ë((
X509_ALGOR
 *)
	`OPENSSL_sk_vÆue
(
	`os¶_check_c⁄°_X509_ALGOR_sk_ty≥
(sk), (idx)))

	)

132 
	#sk_X509_ALGOR_√w
(
cmp
Ë((
	`STACK_OF
(
X509_ALGOR
Ë*)
	`OPENSSL_sk_√w
(
	`os¶_check_X509_ALGOR_compfunc_ty≥
(cmp)))

	)

133 
	#sk_X509_ALGOR_√w_nuŒ
(Ë((
	`STACK_OF
(
X509_ALGOR
Ë*)
	`OPENSSL_sk_√w_nuŒ
())

	)

134 
	#sk_X509_ALGOR_√w_ª£rve
(
cmp
, 
n
Ë((
	`STACK_OF
(
X509_ALGOR
Ë*)
	`OPENSSL_sk_√w_ª£rve
(
	`os¶_check_X509_ALGOR_compfunc_ty≥
(cmp), (n)))

	)

135 
	#sk_X509_ALGOR_ª£rve
(
sk
, 
n
Ë
	`OPENSSL_sk_ª£rve
(
	`os¶_check_X509_ALGOR_sk_ty≥
(sk), (n))

	)

136 
	#sk_X509_ALGOR_‰ì
(
sk
Ë
	`OPENSSL_sk_‰ì
(
	`os¶_check_X509_ALGOR_sk_ty≥
(sk))

	)

137 
	#sk_X509_ALGOR_zîo
(
sk
Ë
	`OPENSSL_sk_zîo
(
	`os¶_check_X509_ALGOR_sk_ty≥
(sk))

	)

138 
	#sk_X509_ALGOR_dñëe
(
sk
, 
i
Ë((
X509_ALGOR
 *)
	`OPENSSL_sk_dñëe
(
	`os¶_check_X509_ALGOR_sk_ty≥
(sk), (i)))

	)

139 
	#sk_X509_ALGOR_dñëe_±r
(
sk
, 
±r
Ë((
X509_ALGOR
 *)
	`OPENSSL_sk_dñëe_±r
(
	`os¶_check_X509_ALGOR_sk_ty≥
(sk), 
	`os¶_check_X509_ALGOR_ty≥
’å)))

	)

140 
	#sk_X509_ALGOR_push
(
sk
, 
±r
Ë
	`OPENSSL_sk_push
(
	`os¶_check_X509_ALGOR_sk_ty≥
(sk), 
	`os¶_check_X509_ALGOR_ty≥
’å))

	)

141 
	#sk_X509_ALGOR_unshi·
(
sk
, 
±r
Ë
	`OPENSSL_sk_unshi·
(
	`os¶_check_X509_ALGOR_sk_ty≥
(sk), 
	`os¶_check_X509_ALGOR_ty≥
’å))

	)

142 
	#sk_X509_ALGOR_p›
(
sk
Ë((
X509_ALGOR
 *)
	`OPENSSL_sk_p›
(
	`os¶_check_X509_ALGOR_sk_ty≥
(sk)))

	)

143 
	#sk_X509_ALGOR_shi·
(
sk
Ë((
X509_ALGOR
 *)
	`OPENSSL_sk_shi·
(
	`os¶_check_X509_ALGOR_sk_ty≥
(sk)))

	)

144 
	#sk_X509_ALGOR_p›_‰ì
(
sk
, 
‰ìfunc
Ë
	`OPENSSL_sk_p›_‰ì
(
	`os¶_check_X509_ALGOR_sk_ty≥
(sk),
	`os¶_check_X509_ALGOR_‰ìfunc_ty≥
(‰ìfunc))

	)

145 
	#sk_X509_ALGOR_ö£π
(
sk
, 
±r
, 
idx
Ë
	`OPENSSL_sk_ö£π
(
	`os¶_check_X509_ALGOR_sk_ty≥
(sk), 
	`os¶_check_X509_ALGOR_ty≥
’å), (idx))

	)

146 
	#sk_X509_ALGOR_£t
(
sk
, 
idx
, 
±r
Ë((
X509_ALGOR
 *)
	`OPENSSL_sk_£t
(
	`os¶_check_X509_ALGOR_sk_ty≥
(sk), (idx), 
	`os¶_check_X509_ALGOR_ty≥
’å)))

	)

147 
	#sk_X509_ALGOR_föd
(
sk
, 
±r
Ë
	`OPENSSL_sk_föd
(
	`os¶_check_X509_ALGOR_sk_ty≥
(sk), 
	`os¶_check_X509_ALGOR_ty≥
’å))

	)

148 
	#sk_X509_ALGOR_föd_ex
(
sk
, 
±r
Ë
	`OPENSSL_sk_föd_ex
(
	`os¶_check_X509_ALGOR_sk_ty≥
(sk), 
	`os¶_check_X509_ALGOR_ty≥
’å))

	)

149 
	#sk_X509_ALGOR_föd_Æl
(
sk
, 
±r
, 
≤um
Ë
	`OPENSSL_sk_föd_Æl
(
	`os¶_check_X509_ALGOR_sk_ty≥
(sk), 
	`os¶_check_X509_ALGOR_ty≥
’å),Önum)

	)

150 
	#sk_X509_ALGOR_s‹t
(
sk
Ë
	`OPENSSL_sk_s‹t
(
	`os¶_check_X509_ALGOR_sk_ty≥
(sk))

	)

151 
	#sk_X509_ALGOR_is_s‹ãd
(
sk
Ë
	`OPENSSL_sk_is_s‹ãd
(
	`os¶_check_c⁄°_X509_ALGOR_sk_ty≥
(sk))

	)

152 
	#sk_X509_ALGOR_dup
(
sk
Ë((
	`STACK_OF
(
X509_ALGOR
Ë*)
	`OPENSSL_sk_dup
(
	`os¶_check_c⁄°_X509_ALGOR_sk_ty≥
(sk)))

	)

153 
	#sk_X509_ALGOR_dìp_c›y
(
sk
, 
c›yfunc
, 
‰ìfunc
Ë((
	`STACK_OF
(
X509_ALGOR
Ë*)
	`OPENSSL_sk_dìp_c›y
(
	`os¶_check_c⁄°_X509_ALGOR_sk_ty≥
(sk), 
	`os¶_check_X509_ALGOR_c›yfunc_ty≥
(c›yfunc), 
	`os¶_check_X509_ALGOR_‰ìfunc_ty≥
(‰ìfunc)))

	)

154 
	#sk_X509_ALGOR_£t_cmp_func
(
sk
, 
cmp
Ë((
sk_X509_ALGOR_compfunc
)
	`OPENSSL_sk_£t_cmp_func
(
	`os¶_check_X509_ALGOR_sk_ty≥
(sk), 
	`os¶_check_X509_ALGOR_compfunc_ty≥
(cmp)))

	)

158 
	#ASN1_STRING_FLAG_BITS_LEFT
 0x08

	)

164 
	#ASN1_STRING_FLAG_NDEF
 0x010

	)

172 
	#ASN1_STRING_FLAG_CONT
 0x020

	)

177 
	#ASN1_STRING_FLAG_MSTRING
 0x040

	)

179 
	#ASN1_STRING_FLAG_EMBED
 0x080

	)

181 
	#ASN1_STRING_FLAG_X509_TIME
 0x100

	)

183 
	sa¢1_°rög_°
 {

184 
Àngth
;

185 
ty≥
;

186 *
d©a
;

192 
Êags
;

201 
	sASN1_ENCODING_°
 {

202 *
íc
;

203 
Àn
;

204 
modifõd
;

205 } 
	tASN1_ENCODING
;

208 
	#ASN1_LONG_UNDEF
 0x7fffffffL

	)

210 
	#STABLE_FLAGS_MALLOC
 0x01

	)

217 
	#STABLE_FLAGS_CLEAR
 
STABLE_FLAGS_MALLOC


	)

218 
	#STABLE_NO_MASK
 0x02

	)

219 
	#DIRSTRING_TYPE
 \

220 (
B_ASN1_PRINTABLESTRING
|
B_ASN1_T61STRING
|
B_ASN1_BMPSTRING
|
B_ASN1_UTF8STRING
)

	)

221 
	#PKCS9STRING_TYPE
 (
DIRSTRING_TYPE
|
B_ASN1_IA5STRING
)

	)

223 
	sa¢1_°rög_èbÀ_°
 {

224 
nid
;

225 
mösize
;

226 
maxsize
;

227 
mask
;

228 
Êags
;

231 
SKM_DEFINE_STACK_OF_INTERNAL
(
ASN1_STRING_TABLE
, ASN1_STRING_TABLE, ASN1_STRING_TABLE)

232 
	#sk_ASN1_STRING_TABLE_num
(
sk
Ë
	`OPENSSL_sk_num
(
	`os¶_check_c⁄°_ASN1_STRING_TABLE_sk_ty≥
(sk))

	)

233 
	#sk_ASN1_STRING_TABLE_vÆue
(
sk
, 
idx
Ë((
ASN1_STRING_TABLE
 *)
	`OPENSSL_sk_vÆue
(
	`os¶_check_c⁄°_ASN1_STRING_TABLE_sk_ty≥
(sk), (idx)))

	)

234 
	#sk_ASN1_STRING_TABLE_√w
(
cmp
Ë((
	`STACK_OF
(
ASN1_STRING_TABLE
Ë*)
	`OPENSSL_sk_√w
(
	`os¶_check_ASN1_STRING_TABLE_compfunc_ty≥
(cmp)))

	)

235 
	#sk_ASN1_STRING_TABLE_√w_nuŒ
(Ë((
	`STACK_OF
(
ASN1_STRING_TABLE
Ë*)
	`OPENSSL_sk_√w_nuŒ
())

	)

236 
	#sk_ASN1_STRING_TABLE_√w_ª£rve
(
cmp
, 
n
Ë((
	`STACK_OF
(
ASN1_STRING_TABLE
Ë*)
	`OPENSSL_sk_√w_ª£rve
(
	`os¶_check_ASN1_STRING_TABLE_compfunc_ty≥
(cmp), (n)))

	)

237 
	#sk_ASN1_STRING_TABLE_ª£rve
(
sk
, 
n
Ë
	`OPENSSL_sk_ª£rve
(
	`os¶_check_ASN1_STRING_TABLE_sk_ty≥
(sk), (n))

	)

238 
	#sk_ASN1_STRING_TABLE_‰ì
(
sk
Ë
	`OPENSSL_sk_‰ì
(
	`os¶_check_ASN1_STRING_TABLE_sk_ty≥
(sk))

	)

239 
	#sk_ASN1_STRING_TABLE_zîo
(
sk
Ë
	`OPENSSL_sk_zîo
(
	`os¶_check_ASN1_STRING_TABLE_sk_ty≥
(sk))

	)

240 
	#sk_ASN1_STRING_TABLE_dñëe
(
sk
, 
i
Ë((
ASN1_STRING_TABLE
 *)
	`OPENSSL_sk_dñëe
(
	`os¶_check_ASN1_STRING_TABLE_sk_ty≥
(sk), (i)))

	)

241 
	#sk_ASN1_STRING_TABLE_dñëe_±r
(
sk
, 
±r
Ë((
ASN1_STRING_TABLE
 *)
	`OPENSSL_sk_dñëe_±r
(
	`os¶_check_ASN1_STRING_TABLE_sk_ty≥
(sk), 
	`os¶_check_ASN1_STRING_TABLE_ty≥
’å)))

	)

242 
	#sk_ASN1_STRING_TABLE_push
(
sk
, 
±r
Ë
	`OPENSSL_sk_push
(
	`os¶_check_ASN1_STRING_TABLE_sk_ty≥
(sk), 
	`os¶_check_ASN1_STRING_TABLE_ty≥
’å))

	)

243 
	#sk_ASN1_STRING_TABLE_unshi·
(
sk
, 
±r
Ë
	`OPENSSL_sk_unshi·
(
	`os¶_check_ASN1_STRING_TABLE_sk_ty≥
(sk), 
	`os¶_check_ASN1_STRING_TABLE_ty≥
’å))

	)

244 
	#sk_ASN1_STRING_TABLE_p›
(
sk
Ë((
ASN1_STRING_TABLE
 *)
	`OPENSSL_sk_p›
(
	`os¶_check_ASN1_STRING_TABLE_sk_ty≥
(sk)))

	)

245 
	#sk_ASN1_STRING_TABLE_shi·
(
sk
Ë((
ASN1_STRING_TABLE
 *)
	`OPENSSL_sk_shi·
(
	`os¶_check_ASN1_STRING_TABLE_sk_ty≥
(sk)))

	)

246 
	#sk_ASN1_STRING_TABLE_p›_‰ì
(
sk
, 
‰ìfunc
Ë
	`OPENSSL_sk_p›_‰ì
(
	`os¶_check_ASN1_STRING_TABLE_sk_ty≥
(sk),
	`os¶_check_ASN1_STRING_TABLE_‰ìfunc_ty≥
(‰ìfunc))

	)

247 
	#sk_ASN1_STRING_TABLE_ö£π
(
sk
, 
±r
, 
idx
Ë
	`OPENSSL_sk_ö£π
(
	`os¶_check_ASN1_STRING_TABLE_sk_ty≥
(sk), 
	`os¶_check_ASN1_STRING_TABLE_ty≥
’å), (idx))

	)

248 
	#sk_ASN1_STRING_TABLE_£t
(
sk
, 
idx
, 
±r
Ë((
ASN1_STRING_TABLE
 *)
	`OPENSSL_sk_£t
(
	`os¶_check_ASN1_STRING_TABLE_sk_ty≥
(sk), (idx), 
	`os¶_check_ASN1_STRING_TABLE_ty≥
’å)))

	)

249 
	#sk_ASN1_STRING_TABLE_föd
(
sk
, 
±r
Ë
	`OPENSSL_sk_föd
(
	`os¶_check_ASN1_STRING_TABLE_sk_ty≥
(sk), 
	`os¶_check_ASN1_STRING_TABLE_ty≥
’å))

	)

250 
	#sk_ASN1_STRING_TABLE_föd_ex
(
sk
, 
±r
Ë
	`OPENSSL_sk_föd_ex
(
	`os¶_check_ASN1_STRING_TABLE_sk_ty≥
(sk), 
	`os¶_check_ASN1_STRING_TABLE_ty≥
’å))

	)

251 
	#sk_ASN1_STRING_TABLE_föd_Æl
(
sk
, 
±r
, 
≤um
Ë
	`OPENSSL_sk_föd_Æl
(
	`os¶_check_ASN1_STRING_TABLE_sk_ty≥
(sk), 
	`os¶_check_ASN1_STRING_TABLE_ty≥
’å),Önum)

	)

252 
	#sk_ASN1_STRING_TABLE_s‹t
(
sk
Ë
	`OPENSSL_sk_s‹t
(
	`os¶_check_ASN1_STRING_TABLE_sk_ty≥
(sk))

	)

253 
	#sk_ASN1_STRING_TABLE_is_s‹ãd
(
sk
Ë
	`OPENSSL_sk_is_s‹ãd
(
	`os¶_check_c⁄°_ASN1_STRING_TABLE_sk_ty≥
(sk))

	)

254 
	#sk_ASN1_STRING_TABLE_dup
(
sk
Ë((
	`STACK_OF
(
ASN1_STRING_TABLE
Ë*)
	`OPENSSL_sk_dup
(
	`os¶_check_c⁄°_ASN1_STRING_TABLE_sk_ty≥
(sk)))

	)

255 
	#sk_ASN1_STRING_TABLE_dìp_c›y
(
sk
, 
c›yfunc
, 
‰ìfunc
Ë((
	`STACK_OF
(
ASN1_STRING_TABLE
Ë*)
	`OPENSSL_sk_dìp_c›y
(
	`os¶_check_c⁄°_ASN1_STRING_TABLE_sk_ty≥
(sk), 
	`os¶_check_ASN1_STRING_TABLE_c›yfunc_ty≥
(c›yfunc), 
	`os¶_check_ASN1_STRING_TABLE_‰ìfunc_ty≥
(‰ìfunc)))

	)

256 
	#sk_ASN1_STRING_TABLE_£t_cmp_func
(
sk
, 
cmp
Ë((
sk_ASN1_STRING_TABLE_compfunc
)
	`OPENSSL_sk_£t_cmp_func
(
	`os¶_check_ASN1_STRING_TABLE_sk_ty≥
(sk), 
	`os¶_check_ASN1_STRING_TABLE_compfunc_ty≥
(cmp)))

	)

261 
	#ub_«me
 32768

	)

262 
	#ub_comm⁄_«me
 64

	)

263 
	#ub_loˇlôy_«me
 128

	)

264 
	#ub_°©e_«me
 128

	)

265 
	#ub_‹g™iz©i⁄_«me
 64

	)

266 
	#ub_‹g™iz©i⁄_unô_«me
 64

	)

267 
	#ub_tôÀ
 64

	)

268 
	#ub_emaû_addªss
 128

	)

273 
ASN1_TEMPLATE_°
 
	tASN1_TEMPLATE
;

274 
ASN1_TLC_°
 
	tASN1_TLC
;

276 
ASN1_VALUE_°
 
	tASN1_VALUE
;

286 
	#DECLARE_ASN1_FUNCTIONS_©å
(
©å
, 
ty≥
) \

287 
	`DECLARE_ASN1_FUNCTIONS_«me_©å
(
©å
, 
ty≥
,Åy≥)

	)

288 
	#DECLARE_ASN1_FUNCTIONS
(
ty≥
) \

289 
	`DECLARE_ASN1_FUNCTIONS_©å
(, 
ty≥
)

	)

291 
	#DECLARE_ASN1_ALLOC_FUNCTIONS_©å
(
©å
, 
ty≥
) \

292 
	`DECLARE_ASN1_ALLOC_FUNCTIONS_«me_©å
(
©å
, 
ty≥
,Åy≥)

	)

293 
	#DECLARE_ASN1_ALLOC_FUNCTIONS
(
ty≥
) \

294 
	`DECLARE_ASN1_ALLOC_FUNCTIONS_©å
(, 
ty≥
)

	)

296 
	#DECLARE_ASN1_FUNCTIONS_«me_©å
(
©å
, 
ty≥
, 
«me
) \

297 
	`DECLARE_ASN1_ALLOC_FUNCTIONS_«me_©å
(
©å
, 
ty≥
, 
«me
) \

298 
	`DECLARE_ASN1_ENCODE_FUNCTIONS_«me_©å
(
©å
, 
ty≥
, 
«me
)

	)

299 
	#DECLARE_ASN1_FUNCTIONS_«me
(
ty≥
, 
«me
) \

300 
	`DECLARE_ASN1_FUNCTIONS_«me_©å
(, 
ty≥
, 
«me
)

	)

302 
	#DECLARE_ASN1_ENCODE_FUNCTIONS_©å
(
©å
, 
ty≥
, 
ô«me
, 
«me
) \

303 
	`DECLARE_ASN1_ENCODE_FUNCTIONS_⁄ly_©å
(
©å
, 
ty≥
, 
«me
) \

304 
	`DECLARE_ASN1_ITEM_©å
(
©å
, 
ô«me
)

	)

305 
	#DECLARE_ASN1_ENCODE_FUNCTIONS
(
ty≥
, 
ô«me
, 
«me
) \

306 
	`DECLARE_ASN1_ENCODE_FUNCTIONS_©å
(, 
ty≥
, 
ô«me
, 
«me
)

	)

308 
	#DECLARE_ASN1_ENCODE_FUNCTIONS_«me_©å
(
©å
, 
ty≥
, 
«me
) \

309 
	`DECLARE_ASN1_ENCODE_FUNCTIONS_©å
(
©å
, 
ty≥
, 
«me
,Çame)

	)

310 
	#DECLARE_ASN1_ENCODE_FUNCTIONS_«me
(
ty≥
, 
«me
) \

311 
	`DECLARE_ASN1_ENCODE_FUNCTIONS_«me_©å
(, 
ty≥
, 
«me
)

	)

313 
	#DECLARE_ASN1_ENCODE_FUNCTIONS_⁄ly_©å
(
©å
, 
ty≥
, 
«me
) \

314 
©å
 
ty≥
 *
d2i_
##
	`«me
—y≥ **
a
, c⁄° **
ö
, 
Àn
); \

315 
©å
 
i2d_
##
	`«me
(c⁄° 
ty≥
 *
a
, **
out
);

	)

316 
	#DECLARE_ASN1_ENCODE_FUNCTIONS_⁄ly
(
ty≥
, 
«me
) \

317 
	`DECLARE_ASN1_ENCODE_FUNCTIONS_⁄ly_©å
(, 
ty≥
, 
«me
)

	)

319 
	#DECLARE_ASN1_NDEF_FUNCTION_©å
(
©å
, 
«me
) \

320 
©å
 
i2d_
##
«me
##
	`_NDEF
(c⁄°Çamê*
a
, **
out
);

	)

321 
	#DECLARE_ASN1_NDEF_FUNCTION
(
«me
) \

322 
	`DECLARE_ASN1_NDEF_FUNCTION_©å
(, 
«me
)

	)

324 
	#DECLARE_ASN1_ALLOC_FUNCTIONS_«me_©å
(
©å
, 
ty≥
, 
«me
) \

325 
©å
 
ty≥
 *
«me
##
	`_√w
(); \

326 
©å
 
«me
##
	`_‰ì
(
ty≥
 *
a
);

	)

327 
	#DECLARE_ASN1_ALLOC_FUNCTIONS_«me
(
ty≥
, 
«me
) \

328 
	`DECLARE_ASN1_ALLOC_FUNCTIONS_«me_©å
(, 
ty≥
, 
«me
)

	)

330 
	#DECLARE_ASN1_DUP_FUNCTION_©å
(
©å
, 
ty≥
) \

331 
	`DECLARE_ASN1_DUP_FUNCTION_«me_©å
(
©å
, 
ty≥
,Åy≥)

	)

332 
	#DECLARE_ASN1_DUP_FUNCTION
(
ty≥
) \

333 
	`DECLARE_ASN1_DUP_FUNCTION_©å
(, 
ty≥
)

	)

335 
	#DECLARE_ASN1_DUP_FUNCTION_«me_©å
(
©å
, 
ty≥
, 
«me
) \

336 
©å
 
ty≥
 *
«me
##
	`_dup
(c⁄°Åy≥ *
a
);

	)

337 
	#DECLARE_ASN1_DUP_FUNCTION_«me
(
ty≥
, 
«me
) \

338 
	`DECLARE_ASN1_DUP_FUNCTION_«me_©å
(, 
ty≥
, 
«me
)

	)

340 
	#DECLARE_ASN1_PRINT_FUNCTION_©å
(
©å
, 
°«me
) \

341 
	`DECLARE_ASN1_PRINT_FUNCTION_‚ame_©å
(
©å
, 
°«me
, säame)

	)

342 
	#DECLARE_ASN1_PRINT_FUNCTION
(
°«me
) \

343 
	`DECLARE_ASN1_PRINT_FUNCTION_©å
(, 
°«me
)

	)

345 
	#DECLARE_ASN1_PRINT_FUNCTION_‚ame_©å
(
©å
, 
°«me
, 
‚ame
) \

346 
©å
 
‚ame
##
	`_¥öt_˘x
(
BIO
 *
out
, c⁄° 
°«me
 *
x
, 
ödít
, \

347 c⁄° 
ASN1_PCTX
 *
p˘x
);

	)

348 
	#DECLARE_ASN1_PRINT_FUNCTION_‚ame
(
°«me
, 
‚ame
) \

349 
	`DECLARE_ASN1_PRINT_FUNCTION_‚ame_©å
(, 
°«me
, 
‚ame
)

	)

351 
	#D2I_OF
(
ty≥
Ëty≥ *(*)—y≥ **,c⁄° **,)

	)

352 
	#I2D_OF
(
ty≥
Ë(*)(c⁄°Åy≥ *,**)

	)

354 
	#CHECKED_D2I_OF
(
ty≥
, 
d2i
) \

355 ((
d2i_of_void
*Ë(1 ? 
d2i
 : ((
	`D2I_OF
(
ty≥
))0)))

	)

356 
	#CHECKED_I2D_OF
(
ty≥
, 
i2d
) \

357 ((
i2d_of_void
*Ë(1 ? 
i2d
 : ((
	`I2D_OF
(
ty≥
))0)))

	)

358 
	#CHECKED_NEW_OF
(
ty≥
, 
x√w
) \

359 ((*(*)()Ë(1 ? 
x√w
 : ((
ty≥
 *(*)())0)))

	)

360 
	#CHECKED_PTR_OF
(
ty≥
, 
p
) \

361 ((*Ë(1 ? 
p
 : (
ty≥
*)0))

	)

362 
	#CHECKED_PPTR_OF
(
ty≥
, 
p
) \

363 ((**Ë(1 ? 
p
 : (
ty≥
**)0))

	)

365 
	#TYPEDEF_D2I_OF
(
ty≥
Ëty≥ *
	td2i_of_
##
	tty≥
—y≥ **,c⁄° **,)

	)

366 
	tTYPEDEF_I2D_OF
(
	tty≥
Ë
	ti2d_of_
##ty≥(c⁄°Åy≥ *,**)

	)

367 
	tTYPEDEF_D2I2D_OF
(
	tty≥
Ë
	tTYPEDEF_D2I_OF
—y≥); 
	`TYPEDEF_I2D_OF
(
ty≥
)

	)

369 *
	td2i_of_void
(**, const **, );

370 
	ti2d_of_void
(const *, **);

415 c⁄° 
	tASN1_ITEM
 *
	tASN1_ITEM_EXP
 ();

418 
	#ASN1_ITEM_±r
(
ùå
Ë(
	`ùå
())

	)

421 
	#ASN1_ITEM_ªf
(
ùå
Ë(ùå##
_ô
)

	)

423 
	#ASN1_ITEM_Ωå
(
ªf
Ë‘ef##
	`_ô
())

	)

425 
	#DECLARE_ASN1_ITEM_©å
(
©å
, 
«me
) \

426 
©å
 c⁄° 
ASN1_ITEM
 * 
«me
##
	`_ô
();

	)

427 
	#DECLARE_ASN1_ITEM
(
«me
) \

428 
	`DECLARE_ASN1_ITEM_©å
(, 
«me
)

	)

437 
	#ASN1_STRFLGS_ESC_2253
 1

	)

438 
	#ASN1_STRFLGS_ESC_CTRL
 2

	)

439 
	#ASN1_STRFLGS_ESC_MSB
 4

	)

442 
	#ASN1_DTFLGS_TYPE_MASK
 0x0FUL

	)

443 
	#ASN1_DTFLGS_RFC822
 0x00UL

	)

444 
	#ASN1_DTFLGS_ISO8601
 0x01UL

	)

451 
	#ASN1_STRFLGS_ESC_QUOTE
 8

	)

456 
	#CHARTYPE_PRINTABLESTRING
 0x10

	)

458 
	#CHARTYPE_FIRST_ESC_2253
 0x20

	)

460 
	#CHARTYPE_LAST_ESC_2253
 0x40

	)

471 
	#ASN1_STRFLGS_UTF8_CONVERT
 0x10

	)

479 
	#ASN1_STRFLGS_IGNORE_TYPE
 0x20

	)

482 
	#ASN1_STRFLGS_SHOW_TYPE
 0x40

	)

492 
	#ASN1_STRFLGS_DUMP_ALL
 0x80

	)

493 
	#ASN1_STRFLGS_DUMP_UNKNOWN
 0x100

	)

500 
	#ASN1_STRFLGS_DUMP_DER
 0x200

	)

505 
	#ASN1_STRFLGS_ESC_2254
 0x400

	)

512 
	#ASN1_STRFLGS_RFC2253
 (
ASN1_STRFLGS_ESC_2253
 | \

513 
ASN1_STRFLGS_ESC_CTRL
 | \

514 
ASN1_STRFLGS_ESC_MSB
 | \

515 
ASN1_STRFLGS_UTF8_CONVERT
 | \

516 
ASN1_STRFLGS_DUMP_UNKNOWN
 | \

517 
ASN1_STRFLGS_DUMP_DER
)

	)

520 
	sa¢1_ty≥_°
 {

521 
ty≥
;

523 *
±r
;

524 
ASN1_BOOLEAN
 
boﬁón
;

525 
ASN1_STRING
 *
a¢1_°rög
;

526 
ASN1_OBJECT
 *
obje˘
;

527 
ASN1_INTEGER
 *
öãgî
;

528 
ASN1_ENUMERATED
 *
íumî©ed
;

529 
ASN1_BIT_STRING
 *
bô_°rög
;

530 
ASN1_OCTET_STRING
 *
o˘ë_°rög
;

531 
ASN1_PRINTABLESTRING
 *
¥öèbÀ°rög
;

532 
ASN1_T61STRING
 *
t61°rög
;

533 
ASN1_IA5STRING
 *
ü5°rög
;

534 
ASN1_GENERALSTRING
 *
gíîÆ°rög
;

535 
ASN1_BMPSTRING
 *
bmp°rög
;

536 
ASN1_UNIVERSALSTRING
 *
univîßl°rög
;

537 
ASN1_UTCTIME
 *
ut˘ime
;

538 
ASN1_GENERALIZEDTIME
 *
gíîÆizedtime
;

539 
ASN1_VISIBLESTRING
 *
visibÀ°rög
;

540 
ASN1_UTF8STRING
 *
utf8°rög
;

545 
ASN1_STRING
 *
£t
;

546 
ASN1_STRING
 *
£quí˚
;

547 
ASN1_VALUE
 *
a¢1_vÆue
;

548 } 
vÆue
;

551 
SKM_DEFINE_STACK_OF_INTERNAL
(
ASN1_TYPE
, ASN1_TYPE, ASN1_TYPE)

552 
	#sk_ASN1_TYPE_num
(
sk
Ë
	`OPENSSL_sk_num
(
	`os¶_check_c⁄°_ASN1_TYPE_sk_ty≥
(sk))

	)

553 
	#sk_ASN1_TYPE_vÆue
(
sk
, 
idx
Ë((
ASN1_TYPE
 *)
	`OPENSSL_sk_vÆue
(
	`os¶_check_c⁄°_ASN1_TYPE_sk_ty≥
(sk), (idx)))

	)

554 
	#sk_ASN1_TYPE_√w
(
cmp
Ë((
	`STACK_OF
(
ASN1_TYPE
Ë*)
	`OPENSSL_sk_√w
(
	`os¶_check_ASN1_TYPE_compfunc_ty≥
(cmp)))

	)

555 
	#sk_ASN1_TYPE_√w_nuŒ
(Ë((
	`STACK_OF
(
ASN1_TYPE
Ë*)
	`OPENSSL_sk_√w_nuŒ
())

	)

556 
	#sk_ASN1_TYPE_√w_ª£rve
(
cmp
, 
n
Ë((
	`STACK_OF
(
ASN1_TYPE
Ë*)
	`OPENSSL_sk_√w_ª£rve
(
	`os¶_check_ASN1_TYPE_compfunc_ty≥
(cmp), (n)))

	)

557 
	#sk_ASN1_TYPE_ª£rve
(
sk
, 
n
Ë
	`OPENSSL_sk_ª£rve
(
	`os¶_check_ASN1_TYPE_sk_ty≥
(sk), (n))

	)

558 
	#sk_ASN1_TYPE_‰ì
(
sk
Ë
	`OPENSSL_sk_‰ì
(
	`os¶_check_ASN1_TYPE_sk_ty≥
(sk))

	)

559 
	#sk_ASN1_TYPE_zîo
(
sk
Ë
	`OPENSSL_sk_zîo
(
	`os¶_check_ASN1_TYPE_sk_ty≥
(sk))

	)

560 
	#sk_ASN1_TYPE_dñëe
(
sk
, 
i
Ë((
ASN1_TYPE
 *)
	`OPENSSL_sk_dñëe
(
	`os¶_check_ASN1_TYPE_sk_ty≥
(sk), (i)))

	)

561 
	#sk_ASN1_TYPE_dñëe_±r
(
sk
, 
±r
Ë((
ASN1_TYPE
 *)
	`OPENSSL_sk_dñëe_±r
(
	`os¶_check_ASN1_TYPE_sk_ty≥
(sk), 
	`os¶_check_ASN1_TYPE_ty≥
’å)))

	)

562 
	#sk_ASN1_TYPE_push
(
sk
, 
±r
Ë
	`OPENSSL_sk_push
(
	`os¶_check_ASN1_TYPE_sk_ty≥
(sk), 
	`os¶_check_ASN1_TYPE_ty≥
’å))

	)

563 
	#sk_ASN1_TYPE_unshi·
(
sk
, 
±r
Ë
	`OPENSSL_sk_unshi·
(
	`os¶_check_ASN1_TYPE_sk_ty≥
(sk), 
	`os¶_check_ASN1_TYPE_ty≥
’å))

	)

564 
	#sk_ASN1_TYPE_p›
(
sk
Ë((
ASN1_TYPE
 *)
	`OPENSSL_sk_p›
(
	`os¶_check_ASN1_TYPE_sk_ty≥
(sk)))

	)

565 
	#sk_ASN1_TYPE_shi·
(
sk
Ë((
ASN1_TYPE
 *)
	`OPENSSL_sk_shi·
(
	`os¶_check_ASN1_TYPE_sk_ty≥
(sk)))

	)

566 
	#sk_ASN1_TYPE_p›_‰ì
(
sk
, 
‰ìfunc
Ë
	`OPENSSL_sk_p›_‰ì
(
	`os¶_check_ASN1_TYPE_sk_ty≥
(sk),
	`os¶_check_ASN1_TYPE_‰ìfunc_ty≥
(‰ìfunc))

	)

567 
	#sk_ASN1_TYPE_ö£π
(
sk
, 
±r
, 
idx
Ë
	`OPENSSL_sk_ö£π
(
	`os¶_check_ASN1_TYPE_sk_ty≥
(sk), 
	`os¶_check_ASN1_TYPE_ty≥
’å), (idx))

	)

568 
	#sk_ASN1_TYPE_£t
(
sk
, 
idx
, 
±r
Ë((
ASN1_TYPE
 *)
	`OPENSSL_sk_£t
(
	`os¶_check_ASN1_TYPE_sk_ty≥
(sk), (idx), 
	`os¶_check_ASN1_TYPE_ty≥
’å)))

	)

569 
	#sk_ASN1_TYPE_föd
(
sk
, 
±r
Ë
	`OPENSSL_sk_föd
(
	`os¶_check_ASN1_TYPE_sk_ty≥
(sk), 
	`os¶_check_ASN1_TYPE_ty≥
’å))

	)

570 
	#sk_ASN1_TYPE_föd_ex
(
sk
, 
±r
Ë
	`OPENSSL_sk_föd_ex
(
	`os¶_check_ASN1_TYPE_sk_ty≥
(sk), 
	`os¶_check_ASN1_TYPE_ty≥
’å))

	)

571 
	#sk_ASN1_TYPE_föd_Æl
(
sk
, 
±r
, 
≤um
Ë
	`OPENSSL_sk_föd_Æl
(
	`os¶_check_ASN1_TYPE_sk_ty≥
(sk), 
	`os¶_check_ASN1_TYPE_ty≥
’å),Önum)

	)

572 
	#sk_ASN1_TYPE_s‹t
(
sk
Ë
	`OPENSSL_sk_s‹t
(
	`os¶_check_ASN1_TYPE_sk_ty≥
(sk))

	)

573 
	#sk_ASN1_TYPE_is_s‹ãd
(
sk
Ë
	`OPENSSL_sk_is_s‹ãd
(
	`os¶_check_c⁄°_ASN1_TYPE_sk_ty≥
(sk))

	)

574 
	#sk_ASN1_TYPE_dup
(
sk
Ë((
	`STACK_OF
(
ASN1_TYPE
Ë*)
	`OPENSSL_sk_dup
(
	`os¶_check_c⁄°_ASN1_TYPE_sk_ty≥
(sk)))

	)

575 
	#sk_ASN1_TYPE_dìp_c›y
(
sk
, 
c›yfunc
, 
‰ìfunc
Ë((
	`STACK_OF
(
ASN1_TYPE
Ë*)
	`OPENSSL_sk_dìp_c›y
(
	`os¶_check_c⁄°_ASN1_TYPE_sk_ty≥
(sk), 
	`os¶_check_ASN1_TYPE_c›yfunc_ty≥
(c›yfunc), 
	`os¶_check_ASN1_TYPE_‰ìfunc_ty≥
(‰ìfunc)))

	)

576 
	#sk_ASN1_TYPE_£t_cmp_func
(
sk
, 
cmp
Ë((
sk_ASN1_TYPE_compfunc
)
	`OPENSSL_sk_£t_cmp_func
(
	`os¶_check_ASN1_TYPE_sk_ty≥
(sk), 
	`os¶_check_ASN1_TYPE_compfunc_ty≥
(cmp)))

	)

579 
STACK_OF
(
	tASN1_TYPE
Ë
	tASN1_SEQUENCE_ANY
;

581 
DECLARE_ASN1_ENCODE_FUNCTIONS_«me
(
ASN1_SEQUENCE_ANY
, ASN1_SEQUENCE_ANY)

582 
DECLARE_ASN1_ENCODE_FUNCTIONS_«me
(
ASN1_SEQUENCE_ANY
, 
ASN1_SET_ANY
)

585 
	sBIT_STRING_BITNAME_°
 {

586 
	gbônum
;

587 c⁄° *
	g ame
;

588 c⁄° *
	g¢ame
;

589 } 
	tBIT_STRING_BITNAME
;

591 
	#B_ASN1_TIME
 \

592 
B_ASN1_UTCTIME
 | \

593 
B_ASN1_GENERALIZEDTIME


	)

595 
	#B_ASN1_PRINTABLE
 \

596 
B_ASN1_NUMERICSTRING
| \

597 
B_ASN1_PRINTABLESTRING
| \

598 
B_ASN1_T61STRING
| \

599 
B_ASN1_IA5STRING
| \

600 
B_ASN1_BIT_STRING
| \

601 
B_ASN1_UNIVERSALSTRING
|\

602 
B_ASN1_BMPSTRING
|\

603 
B_ASN1_UTF8STRING
|\

604 
B_ASN1_SEQUENCE
|\

605 
B_ASN1_UNKNOWN


	)

607 
	#B_ASN1_DIRECTORYSTRING
 \

608 
B_ASN1_PRINTABLESTRING
| \

609 
B_ASN1_TELETEXSTRING
|\

610 
B_ASN1_BMPSTRING
|\

611 
B_ASN1_UNIVERSALSTRING
|\

612 
B_ASN1_UTF8STRING


	)

614 
	#B_ASN1_DISPLAYTEXT
 \

615 
B_ASN1_IA5STRING
| \

616 
B_ASN1_VISIBLESTRING
| \

617 
B_ASN1_BMPSTRING
|\

618 
B_ASN1_UTF8STRING


	)

620 
DECLARE_ASN1_ALLOC_FUNCTIONS_«me
(
ASN1_TYPE
, ASN1_TYPE)

621 
DECLARE_ASN1_ENCODE_FUNCTIONS
(
ASN1_TYPE
, 
ASN1_ANY
, ASN1_TYPE)

623 
ASN1_TYPE_gë
(c⁄° 
ASN1_TYPE
 *
a
);

624 
ASN1_TYPE_£t
(
ASN1_TYPE
 *
a
, 
ty≥
, *
vÆue
);

625 
ASN1_TYPE_£t1
(
ASN1_TYPE
 *
a
, 
ty≥
, c⁄° *
vÆue
);

626 
ASN1_TYPE_cmp
(c⁄° 
ASN1_TYPE
 *
a
, c⁄° ASN1_TYPE *
b
);

628 
ASN1_TYPE
 *
ASN1_TYPE_∑ck_£quí˚
(c⁄° 
ASN1_ITEM
 *
ô
, *
s
, ASN1_TYPE **
t
);

629 *
ASN1_TYPE_u≈ack_£quí˚
(c⁄° 
ASN1_ITEM
 *
ô
, c⁄° 
ASN1_TYPE
 *
t
);

631 
SKM_DEFINE_STACK_OF_INTERNAL
(
ASN1_OBJECT
, ASN1_OBJECT, ASN1_OBJECT)

632 
	#sk_ASN1_OBJECT_num
(
sk
Ë
	`OPENSSL_sk_num
(
	`os¶_check_c⁄°_ASN1_OBJECT_sk_ty≥
(sk))

	)

633 
	#sk_ASN1_OBJECT_vÆue
(
sk
, 
idx
Ë((
ASN1_OBJECT
 *)
	`OPENSSL_sk_vÆue
(
	`os¶_check_c⁄°_ASN1_OBJECT_sk_ty≥
(sk), (idx)))

	)

634 
	#sk_ASN1_OBJECT_√w
(
cmp
Ë((
	`STACK_OF
(
ASN1_OBJECT
Ë*)
	`OPENSSL_sk_√w
(
	`os¶_check_ASN1_OBJECT_compfunc_ty≥
(cmp)))

	)

635 
	#sk_ASN1_OBJECT_√w_nuŒ
(Ë((
	`STACK_OF
(
ASN1_OBJECT
Ë*)
	`OPENSSL_sk_√w_nuŒ
())

	)

636 
	#sk_ASN1_OBJECT_√w_ª£rve
(
cmp
, 
n
Ë((
	`STACK_OF
(
ASN1_OBJECT
Ë*)
	`OPENSSL_sk_√w_ª£rve
(
	`os¶_check_ASN1_OBJECT_compfunc_ty≥
(cmp), (n)))

	)

637 
	#sk_ASN1_OBJECT_ª£rve
(
sk
, 
n
Ë
	`OPENSSL_sk_ª£rve
(
	`os¶_check_ASN1_OBJECT_sk_ty≥
(sk), (n))

	)

638 
	#sk_ASN1_OBJECT_‰ì
(
sk
Ë
	`OPENSSL_sk_‰ì
(
	`os¶_check_ASN1_OBJECT_sk_ty≥
(sk))

	)

639 
	#sk_ASN1_OBJECT_zîo
(
sk
Ë
	`OPENSSL_sk_zîo
(
	`os¶_check_ASN1_OBJECT_sk_ty≥
(sk))

	)

640 
	#sk_ASN1_OBJECT_dñëe
(
sk
, 
i
Ë((
ASN1_OBJECT
 *)
	`OPENSSL_sk_dñëe
(
	`os¶_check_ASN1_OBJECT_sk_ty≥
(sk), (i)))

	)

641 
	#sk_ASN1_OBJECT_dñëe_±r
(
sk
, 
±r
Ë((
ASN1_OBJECT
 *)
	`OPENSSL_sk_dñëe_±r
(
	`os¶_check_ASN1_OBJECT_sk_ty≥
(sk), 
	`os¶_check_ASN1_OBJECT_ty≥
’å)))

	)

642 
	#sk_ASN1_OBJECT_push
(
sk
, 
±r
Ë
	`OPENSSL_sk_push
(
	`os¶_check_ASN1_OBJECT_sk_ty≥
(sk), 
	`os¶_check_ASN1_OBJECT_ty≥
’å))

	)

643 
	#sk_ASN1_OBJECT_unshi·
(
sk
, 
±r
Ë
	`OPENSSL_sk_unshi·
(
	`os¶_check_ASN1_OBJECT_sk_ty≥
(sk), 
	`os¶_check_ASN1_OBJECT_ty≥
’å))

	)

644 
	#sk_ASN1_OBJECT_p›
(
sk
Ë((
ASN1_OBJECT
 *)
	`OPENSSL_sk_p›
(
	`os¶_check_ASN1_OBJECT_sk_ty≥
(sk)))

	)

645 
	#sk_ASN1_OBJECT_shi·
(
sk
Ë((
ASN1_OBJECT
 *)
	`OPENSSL_sk_shi·
(
	`os¶_check_ASN1_OBJECT_sk_ty≥
(sk)))

	)

646 
	#sk_ASN1_OBJECT_p›_‰ì
(
sk
, 
‰ìfunc
Ë
	`OPENSSL_sk_p›_‰ì
(
	`os¶_check_ASN1_OBJECT_sk_ty≥
(sk),
	`os¶_check_ASN1_OBJECT_‰ìfunc_ty≥
(‰ìfunc))

	)

647 
	#sk_ASN1_OBJECT_ö£π
(
sk
, 
±r
, 
idx
Ë
	`OPENSSL_sk_ö£π
(
	`os¶_check_ASN1_OBJECT_sk_ty≥
(sk), 
	`os¶_check_ASN1_OBJECT_ty≥
’å), (idx))

	)

648 
	#sk_ASN1_OBJECT_£t
(
sk
, 
idx
, 
±r
Ë((
ASN1_OBJECT
 *)
	`OPENSSL_sk_£t
(
	`os¶_check_ASN1_OBJECT_sk_ty≥
(sk), (idx), 
	`os¶_check_ASN1_OBJECT_ty≥
’å)))

	)

649 
	#sk_ASN1_OBJECT_föd
(
sk
, 
±r
Ë
	`OPENSSL_sk_föd
(
	`os¶_check_ASN1_OBJECT_sk_ty≥
(sk), 
	`os¶_check_ASN1_OBJECT_ty≥
’å))

	)

650 
	#sk_ASN1_OBJECT_föd_ex
(
sk
, 
±r
Ë
	`OPENSSL_sk_föd_ex
(
	`os¶_check_ASN1_OBJECT_sk_ty≥
(sk), 
	`os¶_check_ASN1_OBJECT_ty≥
’å))

	)

651 
	#sk_ASN1_OBJECT_föd_Æl
(
sk
, 
±r
, 
≤um
Ë
	`OPENSSL_sk_föd_Æl
(
	`os¶_check_ASN1_OBJECT_sk_ty≥
(sk), 
	`os¶_check_ASN1_OBJECT_ty≥
’å),Önum)

	)

652 
	#sk_ASN1_OBJECT_s‹t
(
sk
Ë
	`OPENSSL_sk_s‹t
(
	`os¶_check_ASN1_OBJECT_sk_ty≥
(sk))

	)

653 
	#sk_ASN1_OBJECT_is_s‹ãd
(
sk
Ë
	`OPENSSL_sk_is_s‹ãd
(
	`os¶_check_c⁄°_ASN1_OBJECT_sk_ty≥
(sk))

	)

654 
	#sk_ASN1_OBJECT_dup
(
sk
Ë((
	`STACK_OF
(
ASN1_OBJECT
Ë*)
	`OPENSSL_sk_dup
(
	`os¶_check_c⁄°_ASN1_OBJECT_sk_ty≥
(sk)))

	)

655 
	#sk_ASN1_OBJECT_dìp_c›y
(
sk
, 
c›yfunc
, 
‰ìfunc
Ë((
	`STACK_OF
(
ASN1_OBJECT
Ë*)
	`OPENSSL_sk_dìp_c›y
(
	`os¶_check_c⁄°_ASN1_OBJECT_sk_ty≥
(sk), 
	`os¶_check_ASN1_OBJECT_c›yfunc_ty≥
(c›yfunc), 
	`os¶_check_ASN1_OBJECT_‰ìfunc_ty≥
(‰ìfunc)))

	)

656 
	#sk_ASN1_OBJECT_£t_cmp_func
(
sk
, 
cmp
Ë((
sk_ASN1_OBJECT_compfunc
)
	`OPENSSL_sk_£t_cmp_func
(
	`os¶_check_ASN1_OBJECT_sk_ty≥
(sk), 
	`os¶_check_ASN1_OBJECT_compfunc_ty≥
(cmp)))

	)

659 
DECLARE_ASN1_FUNCTIONS
(
ASN1_OBJECT
)

661 
ASN1_STRING
 *
ASN1_STRING_√w
();

662 
ASN1_STRING_‰ì
(
ASN1_STRING
 *
a
);

663 
ASN1_STRING_˛ór_‰ì
(
ASN1_STRING
 *
a
);

664 
ASN1_STRING_c›y
(
ASN1_STRING
 *
d°
, c⁄° ASN1_STRING *
°r
);

665 
DECLARE_ASN1_DUP_FUNCTION
(
ASN1_STRING
)

666 
ASN1_STRING
 *
ASN1_STRING_ty≥_√w
(
ty≥
);

667 
ASN1_STRING_cmp
(c⁄° 
ASN1_STRING
 *
a
, c⁄° ASN1_STRING *
b
);

672 
ASN1_STRING_£t
(
ASN1_STRING
 *
°r
, c⁄° *
d©a
, 
Àn
);

673 
ASN1_STRING_£t0
(
ASN1_STRING
 *
°r
, *
d©a
, 
Àn
);

674 
ASN1_STRING_Àngth
(c⁄° 
ASN1_STRING
 *
x
);

675 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


676 
OSSL_DEPRECATEDIN_3_0
 
ASN1_STRING_Àngth_£t
(
ASN1_STRING
 *
x
, 
n
);

678 
ASN1_STRING_ty≥
(c⁄° 
ASN1_STRING
 *
x
);

679 #i‚de‡
OPENSSL_NO_DEPRECATED_1_1_0


680 
OSSL_DEPRECATEDIN_1_1_0
 *
ASN1_STRING_d©a
(
ASN1_STRING
 *
x
);

682 c⁄° *
ASN1_STRING_gë0_d©a
(c⁄° 
ASN1_STRING
 *
x
);

684 
DECLARE_ASN1_FUNCTIONS
(
ASN1_BIT_STRING
)

685 
ASN1_BIT_STRING_£t
(
ASN1_BIT_STRING
 *
a
, *
d
, 
Àngth
);

686 
ASN1_BIT_STRING_£t_bô
(
ASN1_BIT_STRING
 *
a
, 
n
, 
vÆue
);

687 
ASN1_BIT_STRING_gë_bô
(c⁄° 
ASN1_BIT_STRING
 *
a
, 
n
);

688 
ASN1_BIT_STRING_check
(c⁄° 
ASN1_BIT_STRING
 *
a
,

689 c⁄° *
Êags
, 
Êags_Àn
);

691 
ASN1_BIT_STRING_«me_¥öt
(
BIO
 *
out
, 
ASN1_BIT_STRING
 *
bs
,

692 
BIT_STRING_BITNAME
 *
tbl
, 
ödít
);

693 
ASN1_BIT_STRING_num_asc
(c⁄° *
«me
, 
BIT_STRING_BITNAME
 *
tbl
);

694 
ASN1_BIT_STRING_£t_asc
(
ASN1_BIT_STRING
 *
bs
, c⁄° *
«me
, 
vÆue
,

695 
BIT_STRING_BITNAME
 *
tbl
);

697 
SKM_DEFINE_STACK_OF_INTERNAL
(
ASN1_INTEGER
, ASN1_INTEGER, ASN1_INTEGER)

698 
	#sk_ASN1_INTEGER_num
(
sk
Ë
	`OPENSSL_sk_num
(
	`os¶_check_c⁄°_ASN1_INTEGER_sk_ty≥
(sk))

	)

699 
	#sk_ASN1_INTEGER_vÆue
(
sk
, 
idx
Ë((
ASN1_INTEGER
 *)
	`OPENSSL_sk_vÆue
(
	`os¶_check_c⁄°_ASN1_INTEGER_sk_ty≥
(sk), (idx)))

	)

700 
	#sk_ASN1_INTEGER_√w
(
cmp
Ë((
	`STACK_OF
(
ASN1_INTEGER
Ë*)
	`OPENSSL_sk_√w
(
	`os¶_check_ASN1_INTEGER_compfunc_ty≥
(cmp)))

	)

701 
	#sk_ASN1_INTEGER_√w_nuŒ
(Ë((
	`STACK_OF
(
ASN1_INTEGER
Ë*)
	`OPENSSL_sk_√w_nuŒ
())

	)

702 
	#sk_ASN1_INTEGER_√w_ª£rve
(
cmp
, 
n
Ë((
	`STACK_OF
(
ASN1_INTEGER
Ë*)
	`OPENSSL_sk_√w_ª£rve
(
	`os¶_check_ASN1_INTEGER_compfunc_ty≥
(cmp), (n)))

	)

703 
	#sk_ASN1_INTEGER_ª£rve
(
sk
, 
n
Ë
	`OPENSSL_sk_ª£rve
(
	`os¶_check_ASN1_INTEGER_sk_ty≥
(sk), (n))

	)

704 
	#sk_ASN1_INTEGER_‰ì
(
sk
Ë
	`OPENSSL_sk_‰ì
(
	`os¶_check_ASN1_INTEGER_sk_ty≥
(sk))

	)

705 
	#sk_ASN1_INTEGER_zîo
(
sk
Ë
	`OPENSSL_sk_zîo
(
	`os¶_check_ASN1_INTEGER_sk_ty≥
(sk))

	)

706 
	#sk_ASN1_INTEGER_dñëe
(
sk
, 
i
Ë((
ASN1_INTEGER
 *)
	`OPENSSL_sk_dñëe
(
	`os¶_check_ASN1_INTEGER_sk_ty≥
(sk), (i)))

	)

707 
	#sk_ASN1_INTEGER_dñëe_±r
(
sk
, 
±r
Ë((
ASN1_INTEGER
 *)
	`OPENSSL_sk_dñëe_±r
(
	`os¶_check_ASN1_INTEGER_sk_ty≥
(sk), 
	`os¶_check_ASN1_INTEGER_ty≥
’å)))

	)

708 
	#sk_ASN1_INTEGER_push
(
sk
, 
±r
Ë
	`OPENSSL_sk_push
(
	`os¶_check_ASN1_INTEGER_sk_ty≥
(sk), 
	`os¶_check_ASN1_INTEGER_ty≥
’å))

	)

709 
	#sk_ASN1_INTEGER_unshi·
(
sk
, 
±r
Ë
	`OPENSSL_sk_unshi·
(
	`os¶_check_ASN1_INTEGER_sk_ty≥
(sk), 
	`os¶_check_ASN1_INTEGER_ty≥
’å))

	)

710 
	#sk_ASN1_INTEGER_p›
(
sk
Ë((
ASN1_INTEGER
 *)
	`OPENSSL_sk_p›
(
	`os¶_check_ASN1_INTEGER_sk_ty≥
(sk)))

	)

711 
	#sk_ASN1_INTEGER_shi·
(
sk
Ë((
ASN1_INTEGER
 *)
	`OPENSSL_sk_shi·
(
	`os¶_check_ASN1_INTEGER_sk_ty≥
(sk)))

	)

712 
	#sk_ASN1_INTEGER_p›_‰ì
(
sk
, 
‰ìfunc
Ë
	`OPENSSL_sk_p›_‰ì
(
	`os¶_check_ASN1_INTEGER_sk_ty≥
(sk),
	`os¶_check_ASN1_INTEGER_‰ìfunc_ty≥
(‰ìfunc))

	)

713 
	#sk_ASN1_INTEGER_ö£π
(
sk
, 
±r
, 
idx
Ë
	`OPENSSL_sk_ö£π
(
	`os¶_check_ASN1_INTEGER_sk_ty≥
(sk), 
	`os¶_check_ASN1_INTEGER_ty≥
’å), (idx))

	)

714 
	#sk_ASN1_INTEGER_£t
(
sk
, 
idx
, 
±r
Ë((
ASN1_INTEGER
 *)
	`OPENSSL_sk_£t
(
	`os¶_check_ASN1_INTEGER_sk_ty≥
(sk), (idx), 
	`os¶_check_ASN1_INTEGER_ty≥
’å)))

	)

715 
	#sk_ASN1_INTEGER_föd
(
sk
, 
±r
Ë
	`OPENSSL_sk_föd
(
	`os¶_check_ASN1_INTEGER_sk_ty≥
(sk), 
	`os¶_check_ASN1_INTEGER_ty≥
’å))

	)

716 
	#sk_ASN1_INTEGER_föd_ex
(
sk
, 
±r
Ë
	`OPENSSL_sk_föd_ex
(
	`os¶_check_ASN1_INTEGER_sk_ty≥
(sk), 
	`os¶_check_ASN1_INTEGER_ty≥
’å))

	)

717 
	#sk_ASN1_INTEGER_föd_Æl
(
sk
, 
±r
, 
≤um
Ë
	`OPENSSL_sk_föd_Æl
(
	`os¶_check_ASN1_INTEGER_sk_ty≥
(sk), 
	`os¶_check_ASN1_INTEGER_ty≥
’å),Önum)

	)

718 
	#sk_ASN1_INTEGER_s‹t
(
sk
Ë
	`OPENSSL_sk_s‹t
(
	`os¶_check_ASN1_INTEGER_sk_ty≥
(sk))

	)

719 
	#sk_ASN1_INTEGER_is_s‹ãd
(
sk
Ë
	`OPENSSL_sk_is_s‹ãd
(
	`os¶_check_c⁄°_ASN1_INTEGER_sk_ty≥
(sk))

	)

720 
	#sk_ASN1_INTEGER_dup
(
sk
Ë((
	`STACK_OF
(
ASN1_INTEGER
Ë*)
	`OPENSSL_sk_dup
(
	`os¶_check_c⁄°_ASN1_INTEGER_sk_ty≥
(sk)))

	)

721 
	#sk_ASN1_INTEGER_dìp_c›y
(
sk
, 
c›yfunc
, 
‰ìfunc
Ë((
	`STACK_OF
(
ASN1_INTEGER
Ë*)
	`OPENSSL_sk_dìp_c›y
(
	`os¶_check_c⁄°_ASN1_INTEGER_sk_ty≥
(sk), 
	`os¶_check_ASN1_INTEGER_c›yfunc_ty≥
(c›yfunc), 
	`os¶_check_ASN1_INTEGER_‰ìfunc_ty≥
(‰ìfunc)))

	)

722 
	#sk_ASN1_INTEGER_£t_cmp_func
(
sk
, 
cmp
Ë((
sk_ASN1_INTEGER_compfunc
)
	`OPENSSL_sk_£t_cmp_func
(
	`os¶_check_ASN1_INTEGER_sk_ty≥
(sk), 
	`os¶_check_ASN1_INTEGER_compfunc_ty≥
(cmp)))

	)

726 
DECLARE_ASN1_FUNCTIONS
(
ASN1_INTEGER
)

727 
ASN1_INTEGER
 *
d2i_ASN1_UINTEGER
(ASN1_INTEGER **
a
, c⁄° **
µ
,

728 
Àngth
);

729 
DECLARE_ASN1_DUP_FUNCTION
(
ASN1_INTEGER
)

730 
ASN1_INTEGER_cmp
(c⁄° 
ASN1_INTEGER
 *
x
, c⁄° ASN1_INTEGER *
y
);

732 
DECLARE_ASN1_FUNCTIONS
(
ASN1_ENUMERATED
)

734 
ASN1_UTCTIME_check
(c⁄° 
ASN1_UTCTIME
 *
a
);

735 
ASN1_UTCTIME
 *
ASN1_UTCTIME_£t
(ASN1_UTCTIME *
s
, 
time_t
 
t
);

736 
ASN1_UTCTIME
 *
ASN1_UTCTIME_adj
(ASN1_UTCTIME *
s
, 
time_t
 
t
,

737 
off£t_day
, 
off£t_£c
);

738 
ASN1_UTCTIME_£t_°rög
(
ASN1_UTCTIME
 *
s
, c⁄° *
°r
);

739 
ASN1_UTCTIME_cmp_time_t
(c⁄° 
ASN1_UTCTIME
 *
s
, 
time_t
 
t
);

741 
ASN1_GENERALIZEDTIME_check
(c⁄° 
ASN1_GENERALIZEDTIME
 *
a
);

742 
ASN1_GENERALIZEDTIME
 *
ASN1_GENERALIZEDTIME_£t
(ASN1_GENERALIZEDTIME *
s
,

743 
time_t
 
t
);

744 
ASN1_GENERALIZEDTIME
 *
ASN1_GENERALIZEDTIME_adj
(ASN1_GENERALIZEDTIME *
s
,

745 
time_t
 
t
, 
off£t_day
,

746 
off£t_£c
);

747 
ASN1_GENERALIZEDTIME_£t_°rög
(
ASN1_GENERALIZEDTIME
 *
s
, c⁄° *
°r
);

749 
ASN1_TIME_diff
(*
pday
, *
p£c
,

750 c⁄° 
ASN1_TIME
 *
‰om
, c⁄° ASN1_TIME *
to
);

752 
DECLARE_ASN1_FUNCTIONS
(
ASN1_OCTET_STRING
)

753 
DECLARE_ASN1_DUP_FUNCTION
(
ASN1_OCTET_STRING
)

754 
ASN1_OCTET_STRING_cmp
(c⁄° 
ASN1_OCTET_STRING
 *
a
,

755 c⁄° 
ASN1_OCTET_STRING
 *
b
);

756 
ASN1_OCTET_STRING_£t
(
ASN1_OCTET_STRING
 *
°r
, c⁄° *
d©a
,

757 
Àn
);

759 
SKM_DEFINE_STACK_OF_INTERNAL
(
ASN1_UTF8STRING
, ASN1_UTF8STRING, ASN1_UTF8STRING)

760 
	#sk_ASN1_UTF8STRING_num
(
sk
Ë
	`OPENSSL_sk_num
(
	`os¶_check_c⁄°_ASN1_UTF8STRING_sk_ty≥
(sk))

	)

761 
	#sk_ASN1_UTF8STRING_vÆue
(
sk
, 
idx
Ë((
ASN1_UTF8STRING
 *)
	`OPENSSL_sk_vÆue
(
	`os¶_check_c⁄°_ASN1_UTF8STRING_sk_ty≥
(sk), (idx)))

	)

762 
	#sk_ASN1_UTF8STRING_√w
(
cmp
Ë((
	`STACK_OF
(
ASN1_UTF8STRING
Ë*)
	`OPENSSL_sk_√w
(
	`os¶_check_ASN1_UTF8STRING_compfunc_ty≥
(cmp)))

	)

763 
	#sk_ASN1_UTF8STRING_√w_nuŒ
(Ë((
	`STACK_OF
(
ASN1_UTF8STRING
Ë*)
	`OPENSSL_sk_√w_nuŒ
())

	)

764 
	#sk_ASN1_UTF8STRING_√w_ª£rve
(
cmp
, 
n
Ë((
	`STACK_OF
(
ASN1_UTF8STRING
Ë*)
	`OPENSSL_sk_√w_ª£rve
(
	`os¶_check_ASN1_UTF8STRING_compfunc_ty≥
(cmp), (n)))

	)

765 
	#sk_ASN1_UTF8STRING_ª£rve
(
sk
, 
n
Ë
	`OPENSSL_sk_ª£rve
(
	`os¶_check_ASN1_UTF8STRING_sk_ty≥
(sk), (n))

	)

766 
	#sk_ASN1_UTF8STRING_‰ì
(
sk
Ë
	`OPENSSL_sk_‰ì
(
	`os¶_check_ASN1_UTF8STRING_sk_ty≥
(sk))

	)

767 
	#sk_ASN1_UTF8STRING_zîo
(
sk
Ë
	`OPENSSL_sk_zîo
(
	`os¶_check_ASN1_UTF8STRING_sk_ty≥
(sk))

	)

768 
	#sk_ASN1_UTF8STRING_dñëe
(
sk
, 
i
Ë((
ASN1_UTF8STRING
 *)
	`OPENSSL_sk_dñëe
(
	`os¶_check_ASN1_UTF8STRING_sk_ty≥
(sk), (i)))

	)

769 
	#sk_ASN1_UTF8STRING_dñëe_±r
(
sk
, 
±r
Ë((
ASN1_UTF8STRING
 *)
	`OPENSSL_sk_dñëe_±r
(
	`os¶_check_ASN1_UTF8STRING_sk_ty≥
(sk), 
	`os¶_check_ASN1_UTF8STRING_ty≥
’å)))

	)

770 
	#sk_ASN1_UTF8STRING_push
(
sk
, 
±r
Ë
	`OPENSSL_sk_push
(
	`os¶_check_ASN1_UTF8STRING_sk_ty≥
(sk), 
	`os¶_check_ASN1_UTF8STRING_ty≥
’å))

	)

771 
	#sk_ASN1_UTF8STRING_unshi·
(
sk
, 
±r
Ë
	`OPENSSL_sk_unshi·
(
	`os¶_check_ASN1_UTF8STRING_sk_ty≥
(sk), 
	`os¶_check_ASN1_UTF8STRING_ty≥
’å))

	)

772 
	#sk_ASN1_UTF8STRING_p›
(
sk
Ë((
ASN1_UTF8STRING
 *)
	`OPENSSL_sk_p›
(
	`os¶_check_ASN1_UTF8STRING_sk_ty≥
(sk)))

	)

773 
	#sk_ASN1_UTF8STRING_shi·
(
sk
Ë((
ASN1_UTF8STRING
 *)
	`OPENSSL_sk_shi·
(
	`os¶_check_ASN1_UTF8STRING_sk_ty≥
(sk)))

	)

774 
	#sk_ASN1_UTF8STRING_p›_‰ì
(
sk
, 
‰ìfunc
Ë
	`OPENSSL_sk_p›_‰ì
(
	`os¶_check_ASN1_UTF8STRING_sk_ty≥
(sk),
	`os¶_check_ASN1_UTF8STRING_‰ìfunc_ty≥
(‰ìfunc))

	)

775 
	#sk_ASN1_UTF8STRING_ö£π
(
sk
, 
±r
, 
idx
Ë
	`OPENSSL_sk_ö£π
(
	`os¶_check_ASN1_UTF8STRING_sk_ty≥
(sk), 
	`os¶_check_ASN1_UTF8STRING_ty≥
’å), (idx))

	)

776 
	#sk_ASN1_UTF8STRING_£t
(
sk
, 
idx
, 
±r
Ë((
ASN1_UTF8STRING
 *)
	`OPENSSL_sk_£t
(
	`os¶_check_ASN1_UTF8STRING_sk_ty≥
(sk), (idx), 
	`os¶_check_ASN1_UTF8STRING_ty≥
’å)))

	)

777 
	#sk_ASN1_UTF8STRING_föd
(
sk
, 
±r
Ë
	`OPENSSL_sk_föd
(
	`os¶_check_ASN1_UTF8STRING_sk_ty≥
(sk), 
	`os¶_check_ASN1_UTF8STRING_ty≥
’å))

	)

778 
	#sk_ASN1_UTF8STRING_föd_ex
(
sk
, 
±r
Ë
	`OPENSSL_sk_föd_ex
(
	`os¶_check_ASN1_UTF8STRING_sk_ty≥
(sk), 
	`os¶_check_ASN1_UTF8STRING_ty≥
’å))

	)

779 
	#sk_ASN1_UTF8STRING_föd_Æl
(
sk
, 
±r
, 
≤um
Ë
	`OPENSSL_sk_föd_Æl
(
	`os¶_check_ASN1_UTF8STRING_sk_ty≥
(sk), 
	`os¶_check_ASN1_UTF8STRING_ty≥
’å),Önum)

	)

780 
	#sk_ASN1_UTF8STRING_s‹t
(
sk
Ë
	`OPENSSL_sk_s‹t
(
	`os¶_check_ASN1_UTF8STRING_sk_ty≥
(sk))

	)

781 
	#sk_ASN1_UTF8STRING_is_s‹ãd
(
sk
Ë
	`OPENSSL_sk_is_s‹ãd
(
	`os¶_check_c⁄°_ASN1_UTF8STRING_sk_ty≥
(sk))

	)

782 
	#sk_ASN1_UTF8STRING_dup
(
sk
Ë((
	`STACK_OF
(
ASN1_UTF8STRING
Ë*)
	`OPENSSL_sk_dup
(
	`os¶_check_c⁄°_ASN1_UTF8STRING_sk_ty≥
(sk)))

	)

783 
	#sk_ASN1_UTF8STRING_dìp_c›y
(
sk
, 
c›yfunc
, 
‰ìfunc
Ë((
	`STACK_OF
(
ASN1_UTF8STRING
Ë*)
	`OPENSSL_sk_dìp_c›y
(
	`os¶_check_c⁄°_ASN1_UTF8STRING_sk_ty≥
(sk), 
	`os¶_check_ASN1_UTF8STRING_c›yfunc_ty≥
(c›yfunc), 
	`os¶_check_ASN1_UTF8STRING_‰ìfunc_ty≥
(‰ìfunc)))

	)

784 
	#sk_ASN1_UTF8STRING_£t_cmp_func
(
sk
, 
cmp
Ë((
sk_ASN1_UTF8STRING_compfunc
)
	`OPENSSL_sk_£t_cmp_func
(
	`os¶_check_ASN1_UTF8STRING_sk_ty≥
(sk), 
	`os¶_check_ASN1_UTF8STRING_compfunc_ty≥
(cmp)))

	)

787 
DECLARE_ASN1_FUNCTIONS
(
ASN1_VISIBLESTRING
)

788 
DECLARE_ASN1_FUNCTIONS
(
ASN1_UNIVERSALSTRING
)

789 
DECLARE_ASN1_FUNCTIONS
(
ASN1_UTF8STRING
)

790 
DECLARE_ASN1_FUNCTIONS
(
ASN1_NULL
)

791 
DECLARE_ASN1_FUNCTIONS
(
ASN1_BMPSTRING
)

793 
UTF8_gëc
(c⁄° *
°r
, 
Àn
, *
vÆ
);

794 
UTF8_putc
(*
°r
, 
Àn
, 
vÆue
);

796 
SKM_DEFINE_STACK_OF_INTERNAL
(
ASN1_GENERALSTRING
, ASN1_GENERALSTRING, ASN1_GENERALSTRING)

797 
	#sk_ASN1_GENERALSTRING_num
(
sk
Ë
	`OPENSSL_sk_num
(
	`os¶_check_c⁄°_ASN1_GENERALSTRING_sk_ty≥
(sk))

	)

798 
	#sk_ASN1_GENERALSTRING_vÆue
(
sk
, 
idx
Ë((
ASN1_GENERALSTRING
 *)
	`OPENSSL_sk_vÆue
(
	`os¶_check_c⁄°_ASN1_GENERALSTRING_sk_ty≥
(sk), (idx)))

	)

799 
	#sk_ASN1_GENERALSTRING_√w
(
cmp
Ë((
	`STACK_OF
(
ASN1_GENERALSTRING
Ë*)
	`OPENSSL_sk_√w
(
	`os¶_check_ASN1_GENERALSTRING_compfunc_ty≥
(cmp)))

	)

800 
	#sk_ASN1_GENERALSTRING_√w_nuŒ
(Ë((
	`STACK_OF
(
ASN1_GENERALSTRING
Ë*)
	`OPENSSL_sk_√w_nuŒ
())

	)

801 
	#sk_ASN1_GENERALSTRING_√w_ª£rve
(
cmp
, 
n
Ë((
	`STACK_OF
(
ASN1_GENERALSTRING
Ë*)
	`OPENSSL_sk_√w_ª£rve
(
	`os¶_check_ASN1_GENERALSTRING_compfunc_ty≥
(cmp), (n)))

	)

802 
	#sk_ASN1_GENERALSTRING_ª£rve
(
sk
, 
n
Ë
	`OPENSSL_sk_ª£rve
(
	`os¶_check_ASN1_GENERALSTRING_sk_ty≥
(sk), (n))

	)

803 
	#sk_ASN1_GENERALSTRING_‰ì
(
sk
Ë
	`OPENSSL_sk_‰ì
(
	`os¶_check_ASN1_GENERALSTRING_sk_ty≥
(sk))

	)

804 
	#sk_ASN1_GENERALSTRING_zîo
(
sk
Ë
	`OPENSSL_sk_zîo
(
	`os¶_check_ASN1_GENERALSTRING_sk_ty≥
(sk))

	)

805 
	#sk_ASN1_GENERALSTRING_dñëe
(
sk
, 
i
Ë((
ASN1_GENERALSTRING
 *)
	`OPENSSL_sk_dñëe
(
	`os¶_check_ASN1_GENERALSTRING_sk_ty≥
(sk), (i)))

	)

806 
	#sk_ASN1_GENERALSTRING_dñëe_±r
(
sk
, 
±r
Ë((
ASN1_GENERALSTRING
 *)
	`OPENSSL_sk_dñëe_±r
(
	`os¶_check_ASN1_GENERALSTRING_sk_ty≥
(sk), 
	`os¶_check_ASN1_GENERALSTRING_ty≥
’å)))

	)

807 
	#sk_ASN1_GENERALSTRING_push
(
sk
, 
±r
Ë
	`OPENSSL_sk_push
(
	`os¶_check_ASN1_GENERALSTRING_sk_ty≥
(sk), 
	`os¶_check_ASN1_GENERALSTRING_ty≥
’å))

	)

808 
	#sk_ASN1_GENERALSTRING_unshi·
(
sk
, 
±r
Ë
	`OPENSSL_sk_unshi·
(
	`os¶_check_ASN1_GENERALSTRING_sk_ty≥
(sk), 
	`os¶_check_ASN1_GENERALSTRING_ty≥
’å))

	)

809 
	#sk_ASN1_GENERALSTRING_p›
(
sk
Ë((
ASN1_GENERALSTRING
 *)
	`OPENSSL_sk_p›
(
	`os¶_check_ASN1_GENERALSTRING_sk_ty≥
(sk)))

	)

810 
	#sk_ASN1_GENERALSTRING_shi·
(
sk
Ë((
ASN1_GENERALSTRING
 *)
	`OPENSSL_sk_shi·
(
	`os¶_check_ASN1_GENERALSTRING_sk_ty≥
(sk)))

	)

811 
	#sk_ASN1_GENERALSTRING_p›_‰ì
(
sk
, 
‰ìfunc
Ë
	`OPENSSL_sk_p›_‰ì
(
	`os¶_check_ASN1_GENERALSTRING_sk_ty≥
(sk),
	`os¶_check_ASN1_GENERALSTRING_‰ìfunc_ty≥
(‰ìfunc))

	)

812 
	#sk_ASN1_GENERALSTRING_ö£π
(
sk
, 
±r
, 
idx
Ë
	`OPENSSL_sk_ö£π
(
	`os¶_check_ASN1_GENERALSTRING_sk_ty≥
(sk), 
	`os¶_check_ASN1_GENERALSTRING_ty≥
’å), (idx))

	)

813 
	#sk_ASN1_GENERALSTRING_£t
(
sk
, 
idx
, 
±r
Ë((
ASN1_GENERALSTRING
 *)
	`OPENSSL_sk_£t
(
	`os¶_check_ASN1_GENERALSTRING_sk_ty≥
(sk), (idx), 
	`os¶_check_ASN1_GENERALSTRING_ty≥
’å)))

	)

814 
	#sk_ASN1_GENERALSTRING_föd
(
sk
, 
±r
Ë
	`OPENSSL_sk_föd
(
	`os¶_check_ASN1_GENERALSTRING_sk_ty≥
(sk), 
	`os¶_check_ASN1_GENERALSTRING_ty≥
’å))

	)

815 
	#sk_ASN1_GENERALSTRING_föd_ex
(
sk
, 
±r
Ë
	`OPENSSL_sk_föd_ex
(
	`os¶_check_ASN1_GENERALSTRING_sk_ty≥
(sk), 
	`os¶_check_ASN1_GENERALSTRING_ty≥
’å))

	)

816 
	#sk_ASN1_GENERALSTRING_föd_Æl
(
sk
, 
±r
, 
≤um
Ë
	`OPENSSL_sk_föd_Æl
(
	`os¶_check_ASN1_GENERALSTRING_sk_ty≥
(sk), 
	`os¶_check_ASN1_GENERALSTRING_ty≥
’å),Önum)

	)

817 
	#sk_ASN1_GENERALSTRING_s‹t
(
sk
Ë
	`OPENSSL_sk_s‹t
(
	`os¶_check_ASN1_GENERALSTRING_sk_ty≥
(sk))

	)

818 
	#sk_ASN1_GENERALSTRING_is_s‹ãd
(
sk
Ë
	`OPENSSL_sk_is_s‹ãd
(
	`os¶_check_c⁄°_ASN1_GENERALSTRING_sk_ty≥
(sk))

	)

819 
	#sk_ASN1_GENERALSTRING_dup
(
sk
Ë((
	`STACK_OF
(
ASN1_GENERALSTRING
Ë*)
	`OPENSSL_sk_dup
(
	`os¶_check_c⁄°_ASN1_GENERALSTRING_sk_ty≥
(sk)))

	)

820 
	#sk_ASN1_GENERALSTRING_dìp_c›y
(
sk
, 
c›yfunc
, 
‰ìfunc
Ë((
	`STACK_OF
(
ASN1_GENERALSTRING
Ë*)
	`OPENSSL_sk_dìp_c›y
(
	`os¶_check_c⁄°_ASN1_GENERALSTRING_sk_ty≥
(sk), 
	`os¶_check_ASN1_GENERALSTRING_c›yfunc_ty≥
(c›yfunc), 
	`os¶_check_ASN1_GENERALSTRING_‰ìfunc_ty≥
(‰ìfunc)))

	)

821 
	#sk_ASN1_GENERALSTRING_£t_cmp_func
(
sk
, 
cmp
Ë((
sk_ASN1_GENERALSTRING_compfunc
)
	`OPENSSL_sk_£t_cmp_func
(
	`os¶_check_ASN1_GENERALSTRING_sk_ty≥
(sk), 
	`os¶_check_ASN1_GENERALSTRING_compfunc_ty≥
(cmp)))

	)

824 
DECLARE_ASN1_FUNCTIONS_«me
(
ASN1_STRING
, 
ASN1_PRINTABLE
)

826 
DECLARE_ASN1_FUNCTIONS_«me
(
ASN1_STRING
, 
DIRECTORYSTRING
)

827 
DECLARE_ASN1_FUNCTIONS_«me
(
ASN1_STRING
, 
DISPLAYTEXT
)

828 
DECLARE_ASN1_FUNCTIONS
(
ASN1_PRINTABLESTRING
)

829 
DECLARE_ASN1_FUNCTIONS
(
ASN1_T61STRING
)

830 
DECLARE_ASN1_FUNCTIONS
(
ASN1_IA5STRING
)

831 
DECLARE_ASN1_FUNCTIONS
(
ASN1_GENERALSTRING
)

832 
DECLARE_ASN1_FUNCTIONS
(
ASN1_UTCTIME
)

833 
DECLARE_ASN1_FUNCTIONS
(
ASN1_GENERALIZEDTIME
)

834 
DECLARE_ASN1_FUNCTIONS
(
ASN1_TIME
)

836 
DECLARE_ASN1_DUP_FUNCTION
(
ASN1_TIME
)

837 
DECLARE_ASN1_DUP_FUNCTION
(
ASN1_UTCTIME
)

838 
DECLARE_ASN1_DUP_FUNCTION
(
ASN1_GENERALIZEDTIME
)

840 
DECLARE_ASN1_ITEM
(
ASN1_OCTET_STRING_NDEF
)

842 
ASN1_TIME
 *
ASN1_TIME_£t
(ASN1_TIME *
s
, 
time_t
 
t
);

843 
ASN1_TIME
 *
ASN1_TIME_adj
(ASN1_TIME *
s
, 
time_t
 
t
,

844 
off£t_day
, 
off£t_£c
);

845 
ASN1_TIME_check
(c⁄° 
ASN1_TIME
 *
t
);

846 
ASN1_GENERALIZEDTIME
 *
ASN1_TIME_to_gíîÆizedtime
(c⁄° 
ASN1_TIME
 *
t
,

847 
ASN1_GENERALIZEDTIME
 **
out
);

848 
ASN1_TIME_£t_°rög
(
ASN1_TIME
 *
s
, c⁄° *
°r
);

849 
ASN1_TIME_£t_°rög_X509
(
ASN1_TIME
 *
s
, c⁄° *
°r
);

850 
ASN1_TIME_to_tm
(c⁄° 
ASN1_TIME
 *
s
, 
tm
 *tm);

851 
ASN1_TIME_n‹mÆize
(
ASN1_TIME
 *
s
);

852 
ASN1_TIME_cmp_time_t
(c⁄° 
ASN1_TIME
 *
s
, 
time_t
 
t
);

853 
ASN1_TIME_com∑ª
(c⁄° 
ASN1_TIME
 *
a
, c⁄° ASN1_TIME *
b
);

855 
i2a_ASN1_INTEGER
(
BIO
 *
bp
, c⁄° 
ASN1_INTEGER
 *
a
);

856 
a2i_ASN1_INTEGER
(
BIO
 *
bp
, 
ASN1_INTEGER
 *
bs
, *
buf
, 
size
);

857 
i2a_ASN1_ENUMERATED
(
BIO
 *
bp
, c⁄° 
ASN1_ENUMERATED
 *
a
);

858 
a2i_ASN1_ENUMERATED
(
BIO
 *
bp
, 
ASN1_ENUMERATED
 *
bs
, *
buf
, 
size
);

859 
i2a_ASN1_OBJECT
(
BIO
 *
bp
, c⁄° 
ASN1_OBJECT
 *
a
);

860 
a2i_ASN1_STRING
(
BIO
 *
bp
, 
ASN1_STRING
 *
bs
, *
buf
, 
size
);

861 
i2a_ASN1_STRING
(
BIO
 *
bp
, c⁄° 
ASN1_STRING
 *
a
, 
ty≥
);

862 
i2t_ASN1_OBJECT
(*
buf
, 
buf_Àn
, c⁄° 
ASN1_OBJECT
 *
a
);

864 
a2d_ASN1_OBJECT
(*
out
, 
ﬁí
, c⁄° *
buf
, 
num
);

865 
ASN1_OBJECT
 *
ASN1_OBJECT_¸óã
(
nid
, *
d©a
, 
Àn
,

866 c⁄° *
¢
, c⁄° *
 
);

868 
ASN1_INTEGER_gë_öt64
(
öt64_t
 *
¥
, c⁄° 
ASN1_INTEGER
 *
a
);

869 
ASN1_INTEGER_£t_öt64
(
ASN1_INTEGER
 *
a
, 
öt64_t
 
r
);

870 
ASN1_INTEGER_gë_uöt64
(
uöt64_t
 *
¥
, c⁄° 
ASN1_INTEGER
 *
a
);

871 
ASN1_INTEGER_£t_uöt64
(
ASN1_INTEGER
 *
a
, 
uöt64_t
 
r
);

873 
ASN1_INTEGER_£t
(
ASN1_INTEGER
 *
a
, 
v
);

874 
ASN1_INTEGER_gë
(c⁄° 
ASN1_INTEGER
 *
a
);

875 
ASN1_INTEGER
 *
BN_to_ASN1_INTEGER
(c⁄° 
BIGNUM
 *
bn
, ASN1_INTEGER *
ai
);

876 
BIGNUM
 *
ASN1_INTEGER_to_BN
(c⁄° 
ASN1_INTEGER
 *
ai
, BIGNUM *
bn
);

878 
ASN1_ENUMERATED_gë_öt64
(
öt64_t
 *
¥
, c⁄° 
ASN1_ENUMERATED
 *
a
);

879 
ASN1_ENUMERATED_£t_öt64
(
ASN1_ENUMERATED
 *
a
, 
öt64_t
 
r
);

882 
ASN1_ENUMERATED_£t
(
ASN1_ENUMERATED
 *
a
, 
v
);

883 
ASN1_ENUMERATED_gë
(c⁄° 
ASN1_ENUMERATED
 *
a
);

884 
ASN1_ENUMERATED
 *
BN_to_ASN1_ENUMERATED
(c⁄° 
BIGNUM
 *
bn
, ASN1_ENUMERATED *
ai
);

885 
BIGNUM
 *
ASN1_ENUMERATED_to_BN
(c⁄° 
ASN1_ENUMERATED
 *
ai
, BIGNUM *
bn
);

889 
ASN1_PRINTABLE_ty≥
(c⁄° *
s
, 
max
);

891 
ASN1_èg2bô
(
èg
);

894 
ASN1_gë_obje˘
(c⁄° **
µ
, *
∂ígth
, *
±ag
,

895 *
p˛ass
, 
omax
);

896 
ASN1_check_öföôe_íd
(**
p
, 
Àn
);

897 
ASN1_c⁄°_check_öföôe_íd
(c⁄° **
p
, 
Àn
);

898 
ASN1_put_obje˘
(**
µ
, 
c⁄°ru˘ed
, 
Àngth
,

899 
èg
, 
x˛ass
);

900 
ASN1_put_eoc
(**
µ
);

901 
ASN1_obje˘_size
(
c⁄°ru˘ed
, 
Àngth
, 
èg
);

904 *
ASN1_dup
(
i2d_of_void
 *
i2d
, 
d2i_of_void
 *
d2i
, c⁄° *
x
);

906 
	#ASN1_dup_of
(
ty≥
,
i2d
,
d2i
,
x
) \

907 ((
ty≥
*)
	`ASN1_dup
(
	`CHECKED_I2D_OF
—y≥, 
i2d
), \

908 
	`CHECKED_D2I_OF
(
ty≥
, 
d2i
), \

909 
	`CHECKED_PTR_OF
(c⁄° 
ty≥
, 
x
)))

	)

911 *
ASN1_ôem_dup
(c⁄° 
ASN1_ITEM
 *
ô
, c⁄° *
x
);

912 
ASN1_ôem_sign_ex
(c⁄° 
ASN1_ITEM
 *
ô
, 
X509_ALGOR
 *
Æg‹1
,

913 
X509_ALGOR
 *
Æg‹2
, 
ASN1_BIT_STRING
 *
sig«tuª
,

914 c⁄° *
d©a
, c⁄° 
ASN1_OCTET_STRING
 *
id
,

915 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
md
, 
OSSL_LIB_CTX
 *
lib˘x
,

916 c⁄° *
¥›q
);

917 
ASN1_ôem_vîify_ex
(c⁄° 
ASN1_ITEM
 *
ô
, c⁄° 
X509_ALGOR
 *
Æg
,

918 c⁄° 
ASN1_BIT_STRING
 *
sig«tuª
, c⁄° *
d©a
,

919 c⁄° 
ASN1_OCTET_STRING
 *
id
, 
EVP_PKEY
 *
pkey
,

920 
OSSL_LIB_CTX
 *
lib˘x
, c⁄° *
¥›q
);

924 
	#M_ASN1_√w_of
(
ty≥
Ë—y≥ *)
	`ASN1_ôem_√w
(
	`ASN1_ITEM_Ωå
—y≥))

	)

925 
	#M_ASN1_‰ì_of
(
x
, 
ty≥
) \

926 
	`ASN1_ôem_‰ì
(
	`CHECKED_PTR_OF
(
ty≥
, 
x
), 
	`ASN1_ITEM_Ωå
—y≥))

	)

928 #i‚de‡
OPENSSL_NO_STDIO


929 *
ASN1_d2i_Â
(*(*
x√w
Ë(), 
d2i_of_void
 *
d2i
, 
FILE
 *
ö
, **
x
);

931 
	#ASN1_d2i_Â_of
(
ty≥
,
x√w
,
d2i
,
ö
,
x
) \

932 ((
ty≥
*)
	`ASN1_d2i_Â
(
	`CHECKED_NEW_OF
—y≥, 
x√w
), \

933 
	`CHECKED_D2I_OF
(
ty≥
, 
d2i
), \

934 
ö
, \

935 
	`CHECKED_PPTR_OF
(
ty≥
, 
x
)))

	)

937 *
ASN1_ôem_d2i_Â_ex
(c⁄° 
ASN1_ITEM
 *
ô
, 
FILE
 *
ö
, *
x
,

938 
OSSL_LIB_CTX
 *
lib˘x
, c⁄° *
¥›q
);

939 *
ASN1_ôem_d2i_Â
(c⁄° 
ASN1_ITEM
 *
ô
, 
FILE
 *
ö
, *
x
);

940 
ASN1_i2d_Â
(
i2d_of_void
 *
i2d
, 
FILE
 *
out
, c⁄° *
x
);

942 
	#ASN1_i2d_Â_of
(
ty≥
,
i2d
,
out
,
x
) \

943 (
	`ASN1_i2d_Â
(
	`CHECKED_I2D_OF
(
ty≥
, 
i2d
), \

944 
out
, \

945 
	`CHECKED_PTR_OF
(c⁄° 
ty≥
, 
x
)))

	)

947 
ASN1_ôem_i2d_Â
(c⁄° 
ASN1_ITEM
 *
ô
, 
FILE
 *
out
, c⁄° *
x
);

948 
ASN1_STRING_¥öt_ex_Â
(
FILE
 *
Â
, c⁄° 
ASN1_STRING
 *
°r
, 
Êags
);

951 
ASN1_STRING_to_UTF8
(**
out
, c⁄° 
ASN1_STRING
 *
ö
);

953 *
ASN1_d2i_bio
(*(*
x√w
Ë(), 
d2i_of_void
 *
d2i
, 
BIO
 *
ö
, **
x
);

955 
	#ASN1_d2i_bio_of
(
ty≥
,
x√w
,
d2i
,
ö
,
x
) \

956 ((
ty≥
*)
	`ASN1_d2i_bio
–
	`CHECKED_NEW_OF
—y≥, 
x√w
), \

957 
	`CHECKED_D2I_OF
(
ty≥
, 
d2i
), \

958 
ö
, \

959 
	`CHECKED_PPTR_OF
(
ty≥
, 
x
)))

	)

961 *
ASN1_ôem_d2i_bio_ex
(c⁄° 
ASN1_ITEM
 *
ô
, 
BIO
 *
ö
, *
pvÆ
,

962 
OSSL_LIB_CTX
 *
lib˘x
, c⁄° *
¥›q
);

963 *
ASN1_ôem_d2i_bio
(c⁄° 
ASN1_ITEM
 *
ô
, 
BIO
 *
ö
, *
pvÆ
);

964 
ASN1_i2d_bio
(
i2d_of_void
 *
i2d
, 
BIO
 *
out
, c⁄° *
x
);

966 
	#ASN1_i2d_bio_of
(
ty≥
,
i2d
,
out
,
x
) \

967 (
	`ASN1_i2d_bio
(
	`CHECKED_I2D_OF
(
ty≥
, 
i2d
), \

968 
out
, \

969 
	`CHECKED_PTR_OF
(c⁄° 
ty≥
, 
x
)))

	)

971 
ASN1_ôem_i2d_bio
(c⁄° 
ASN1_ITEM
 *
ô
, 
BIO
 *
out
, c⁄° *
x
);

972 
BIO
 *
ASN1_ôem_i2d_mem_bio
(c⁄° 
ASN1_ITEM
 *
ô
, c⁄° 
ASN1_VALUE
 *
vÆ
);

973 
ASN1_UTCTIME_¥öt
(
BIO
 *
Â
, c⁄° 
ASN1_UTCTIME
 *
a
);

974 
ASN1_GENERALIZEDTIME_¥öt
(
BIO
 *
Â
, c⁄° 
ASN1_GENERALIZEDTIME
 *
a
);

975 
ASN1_TIME_¥öt
(
BIO
 *
bp
, c⁄° 
ASN1_TIME
 *
tm
);

976 
ASN1_TIME_¥öt_ex
(
BIO
 *
bp
, c⁄° 
ASN1_TIME
 *
tm
, 
Êags
);

977 
ASN1_STRING_¥öt
(
BIO
 *
bp
, c⁄° 
ASN1_STRING
 *
v
);

978 
ASN1_STRING_¥öt_ex
(
BIO
 *
out
, c⁄° 
ASN1_STRING
 *
°r
, 
Êags
);

979 
ASN1_buf_¥öt
(
BIO
 *
bp
, c⁄° *
buf
, 
size_t
 
buÊí
, 
off
);

980 
ASN1_bn_¥öt
(
BIO
 *
bp
, c⁄° *
numbî
, c⁄° 
BIGNUM
 *
num
,

981 *
buf
, 
off
);

982 
ASN1_∑r£
(
BIO
 *
bp
, c⁄° *
µ
, 
Àn
, 
ödít
);

983 
ASN1_∑r£_dump
(
BIO
 *
bp
, c⁄° *
µ
, 
Àn
, 
ödít
,

984 
dump
);

985 c⁄° *
ASN1_èg2°r
(
èg
);

989 
ASN1_UNIVERSALSTRING_to_°rög
(
ASN1_UNIVERSALSTRING
 *
s
);

991 
ASN1_TYPE_£t_o˘ë°rög
(
ASN1_TYPE
 *
a
, *
d©a
, 
Àn
);

992 
ASN1_TYPE_gë_o˘ë°rög
(c⁄° 
ASN1_TYPE
 *
a
, *
d©a
, 
max_Àn
);

993 
ASN1_TYPE_£t_öt_o˘ë°rög
(
ASN1_TYPE
 *
a
, 
num
,

994 *
d©a
, 
Àn
);

995 
ASN1_TYPE_gë_öt_o˘ë°rög
(c⁄° 
ASN1_TYPE
 *
a
, *
num
,

996 *
d©a
, 
max_Àn
);

998 *
ASN1_ôem_u≈ack
(c⁄° 
ASN1_STRING
 *
o˘
, c⁄° 
ASN1_ITEM
 *
ô
);

1000 
ASN1_STRING
 *
ASN1_ôem_∑ck
(*
obj
, c⁄° 
ASN1_ITEM
 *
ô
,

1001 
ASN1_OCTET_STRING
 **
o˘
);

1003 
ASN1_STRING_£t_deÁu…_mask
(
mask
);

1004 
ASN1_STRING_£t_deÁu…_mask_asc
(c⁄° *
p
);

1005 
ASN1_STRING_gë_deÁu…_mask
();

1006 
ASN1_mb°rög_c›y
(
ASN1_STRING
 **
out
, c⁄° *
ö
, 
Àn
,

1007 
öf‹m
, 
mask
);

1008 
ASN1_mb°rög_nc›y
(
ASN1_STRING
 **
out
, c⁄° *
ö
, 
Àn
,

1009 
öf‹m
, 
mask
,

1010 
mösize
, 
maxsize
);

1012 
ASN1_STRING
 *
ASN1_STRING_£t_by_NID
(ASN1_STRING **
out
,

1013 c⁄° *
ö
, 
öÀn
,

1014 
öf‹m
, 
nid
);

1015 
ASN1_STRING_TABLE
 *
ASN1_STRING_TABLE_gë
(
nid
);

1016 
ASN1_STRING_TABLE_add
(, , , , );

1017 
ASN1_STRING_TABLE_˛ónup
();

1022 
ASN1_VALUE
 *
ASN1_ôem_√w
(c⁄° 
ASN1_ITEM
 *
ô
);

1023 
ASN1_VALUE
 *
ASN1_ôem_√w_ex
(c⁄° 
ASN1_ITEM
 *
ô
, 
OSSL_LIB_CTX
 *
lib˘x
,

1024 c⁄° *
¥›q
);

1025 
ASN1_ôem_‰ì
(
ASN1_VALUE
 *
vÆ
, c⁄° 
ASN1_ITEM
 *
ô
);

1026 
ASN1_VALUE
 *
ASN1_ôem_d2i_ex
(ASN1_VALUE **
vÆ
, c⁄° **
ö
,

1027 
Àn
, c⁄° 
ASN1_ITEM
 *
ô
,

1028 
OSSL_LIB_CTX
 *
lib˘x
, c⁄° *
¥›q
);

1029 
ASN1_VALUE
 *
ASN1_ôem_d2i
(ASN1_VALUE **
vÆ
, c⁄° **
ö
,

1030 
Àn
, c⁄° 
ASN1_ITEM
 *
ô
);

1031 
ASN1_ôem_i2d
(c⁄° 
ASN1_VALUE
 *
vÆ
, **
out
, c⁄° 
ASN1_ITEM
 *
ô
);

1032 
ASN1_ôem_ndef_i2d
(c⁄° 
ASN1_VALUE
 *
vÆ
, **
out
,

1033 c⁄° 
ASN1_ITEM
 *
ô
);

1035 
ASN1_add_oid_moduÀ
();

1036 
ASN1_add_°abÀ_moduÀ
();

1038 
ASN1_TYPE
 *
ASN1_gíî©e_nc⁄f
(c⁄° *
°r
, 
CONF
 *
nc⁄f
);

1039 
ASN1_TYPE
 *
ASN1_gíî©e_v3
(c⁄° *
°r
, 
X509V3_CTX
 *
˙f
);

1040 
ASN1_°r2mask
(c⁄° *
°r
, *
pmask
);

1045 
	#ASN1_PCTX_FLAGS_SHOW_ABSENT
 0x001

	)

1047 
	#ASN1_PCTX_FLAGS_SHOW_SEQUENCE
 0x002

	)

1049 
	#ASN1_PCTX_FLAGS_SHOW_SSOF
 0x004

	)

1051 
	#ASN1_PCTX_FLAGS_SHOW_TYPE
 0x008

	)

1053 
	#ASN1_PCTX_FLAGS_NO_ANY_TYPE
 0x010

	)

1055 
	#ASN1_PCTX_FLAGS_NO_MSTRING_TYPE
 0x020

	)

1057 
	#ASN1_PCTX_FLAGS_NO_FIELD_NAME
 0x040

	)

1059 
	#ASN1_PCTX_FLAGS_SHOW_FIELD_STRUCT_NAME
 0x080

	)

1061 
	#ASN1_PCTX_FLAGS_NO_STRUCT_NAME
 0x100

	)

1063 
ASN1_ôem_¥öt
(
BIO
 *
out
, c⁄° 
ASN1_VALUE
 *
iÊd
, 
ödít
,

1064 c⁄° 
ASN1_ITEM
 *
ô
, c⁄° 
ASN1_PCTX
 *
p˘x
);

1065 
ASN1_PCTX
 *
ASN1_PCTX_√w
();

1066 
ASN1_PCTX_‰ì
(
ASN1_PCTX
 *
p
);

1067 
ASN1_PCTX_gë_Êags
(c⁄° 
ASN1_PCTX
 *
p
);

1068 
ASN1_PCTX_£t_Êags
(
ASN1_PCTX
 *
p
, 
Êags
);

1069 
ASN1_PCTX_gë_nm_Êags
(c⁄° 
ASN1_PCTX
 *
p
);

1070 
ASN1_PCTX_£t_nm_Êags
(
ASN1_PCTX
 *
p
, 
Êags
);

1071 
ASN1_PCTX_gë_˚π_Êags
(c⁄° 
ASN1_PCTX
 *
p
);

1072 
ASN1_PCTX_£t_˚π_Êags
(
ASN1_PCTX
 *
p
, 
Êags
);

1073 
ASN1_PCTX_gë_oid_Êags
(c⁄° 
ASN1_PCTX
 *
p
);

1074 
ASN1_PCTX_£t_oid_Êags
(
ASN1_PCTX
 *
p
, 
Êags
);

1075 
ASN1_PCTX_gë_°r_Êags
(c⁄° 
ASN1_PCTX
 *
p
);

1076 
ASN1_PCTX_£t_°r_Êags
(
ASN1_PCTX
 *
p
, 
Êags
);

1078 
ASN1_SCTX
 *
ASN1_SCTX_√w
((*
sˇn_cb
Ë(ASN1_SCTX *
˘x
));

1079 
ASN1_SCTX_‰ì
(
ASN1_SCTX
 *
p
);

1080 c⁄° 
ASN1_ITEM
 *
ASN1_SCTX_gë_ôem
(
ASN1_SCTX
 *
p
);

1081 c⁄° 
ASN1_TEMPLATE
 *
ASN1_SCTX_gë_ãm∂©e
(
ASN1_SCTX
 *
p
);

1082 
ASN1_SCTX_gë_Êags
(
ASN1_SCTX
 *
p
);

1083 
ASN1_SCTX_£t_≠p_d©a
(
ASN1_SCTX
 *
p
, *
d©a
);

1084 *
ASN1_SCTX_gë_≠p_d©a
(
ASN1_SCTX
 *
p
);

1086 c⁄° 
BIO_METHOD
 *
BIO_f_a¢1
();

1089 
BIO
 *
BIO_√w_NDEF
(BIO *
out
, 
ASN1_VALUE
 *
vÆ
, c⁄° 
ASN1_ITEM
 *
ô
);

1091 
i2d_ASN1_bio_°ªam
(
BIO
 *
out
, 
ASN1_VALUE
 *
vÆ
, BIO *
ö
, 
Êags
,

1092 c⁄° 
ASN1_ITEM
 *
ô
);

1093 
PEM_wrôe_bio_ASN1_°ªam
(
BIO
 *
out
, 
ASN1_VALUE
 *
vÆ
, BIO *
ö
, 
Êags
,

1094 c⁄° *
hdr
, c⁄° 
ASN1_ITEM
 *
ô
);

1096 
SMIME_wrôe_ASN1
(
BIO
 *
bio
, 
ASN1_VALUE
 *
vÆ
, BIO *
d©a
, 
Êags
,

1097 
˘y≥_nid
, 
ec⁄t_nid
,

1098 
STACK_OF
(
X509_ALGOR
Ë*
mdÆgs
, c⁄° 
ASN1_ITEM
 *
ô
);

1099 
SMIME_wrôe_ASN1_ex
(
BIO
 *
bio
, 
ASN1_VALUE
 *
vÆ
, BIO *
d©a
, 
Êags
,

1100 
˘y≥_nid
, 
ec⁄t_nid
,

1101 
STACK_OF
(
X509_ALGOR
Ë*
mdÆgs
, c⁄° 
ASN1_ITEM
 *
ô
,

1102 
OSSL_LIB_CTX
 *
lib˘x
, c⁄° *
¥›q
);

1103 
ASN1_VALUE
 *
SMIME_ªad_ASN1
(
BIO
 *
bio
, BIO **
bc⁄t
, c⁄° 
ASN1_ITEM
 *
ô
);

1104 
ASN1_VALUE
 *
SMIME_ªad_ASN1_ex
(
BIO
 *
bio
, 
Êags
, BIO **
bc⁄t
,

1105 c⁄° 
ASN1_ITEM
 *
ô
, 
ASN1_VALUE
 **
x
,

1106 
OSSL_LIB_CTX
 *
lib˘x
, c⁄° *
¥›q
);

1107 
SMIME_¸lf_c›y
(
BIO
 *
ö
, BIO *
out
, 
Êags
);

1108 
SMIME_ãxt
(
BIO
 *
ö
, BIO *
out
);

1110 c⁄° 
ASN1_ITEM
 *
ASN1_ITEM_lookup
(c⁄° *
«me
);

1111 c⁄° 
ASN1_ITEM
 *
ASN1_ITEM_gë
(
size_t
 
i
);

1114 
	#DECLARE_ASN1_FUNCTIONS_‚ame
(
ty≥
, 
ô«me
, 
«me
) \

1115 
	`DECLARE_ASN1_ALLOC_FUNCTIONS_«me
(
ty≥
, 
«me
) \

1116 
	`DECLARE_ASN1_ENCODE_FUNCTIONS
(
ty≥
, 
ô«me
, 
«me
)

	)

1117 
	#DECLARE_ASN1_FUNCTIONS_c⁄°
(
ty≥
Ë
	`DECLARE_ASN1_FUNCTIONS
—y≥)

	)

1118 
	#DECLARE_ASN1_ENCODE_FUNCTIONS_c⁄°
(
ty≥
, 
«me
) \

1119 
	`DECLARE_ASN1_ENCODE_FUNCTIONS
(
ty≥
, 
«me
)

	)

1120 
	#I2D_OF_c⁄°
(
ty≥
Ë
	`I2D_OF
—y≥)

	)

1121 
	#ASN1_dup_of_c⁄°
(
ty≥
,
i2d
,
d2i
,
x
Ë
	`ASN1_dup_of
—y≥,i2d,d2i,x)

	)

1122 
	#ASN1_i2d_Â_of_c⁄°
(
ty≥
,
i2d
,
out
,
x
Ë
	`ASN1_i2d_Â_of
—y≥,i2d,out,x)

	)

1123 
	#ASN1_i2d_bio_of_c⁄°
(
ty≥
,
i2d
,
out
,
x
Ë
	`ASN1_i2d_bio_of
—y≥,i2d,out,x)

	)

1125 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/async.h

10 
	~<°dlib.h
>

12 #i‚de‡
OPENSSL_ASYNC_H


13 
	#OPENSSL_ASYNC_H


	)

14 #¥agm®
⁄˚


16 
	~<›ís¶/ma¸os.h
>

17 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


18 
	#HEADER_ASYNC_H


	)

21 #i‡
deföed
(
_WIN32
)

22 #i‡
deföed
(
BASETYPES
Ë|| deföed(
_WINDEF_H
)

24 
	#OSSL_ASYNC_FD
 
HANDLE


	)

25 
	#OSSL_BAD_ASYNC_FD
 
INVALID_HANDLE_VALUE


	)

28 
	#OSSL_ASYNC_FD
 

	)

29 
	#OSSL_BAD_ASYNC_FD
 -1

	)

31 
	~<›ís¶/asyn˚º.h
>

34 #ifde‡ 
__˝lu•lus


38 
async_job_°
 
	tASYNC_JOB
;

39 
async_waô_˘x_°
 
	tASYNC_WAIT_CTX
;

40 (*
ASYNC_ˇŒback_‚
)(*
	t¨g
);

42 
	#ASYNC_ERR
 0

	)

43 
	#ASYNC_NO_JOBS
 1

	)

44 
	#ASYNC_PAUSE
 2

	)

45 
	#ASYNC_FINISH
 3

	)

47 
	#ASYNC_STATUS_UNSUPPORTED
 0

	)

48 
	#ASYNC_STATUS_ERR
 1

	)

49 
	#ASYNC_STATUS_OK
 2

	)

50 
	#ASYNC_STATUS_EAGAIN
 3

	)

52 
ASYNC_öô_thªad
(
size_t
 
max_size
, size_à
öô_size
);

53 
ASYNC_˛ónup_thªad
();

55 #ifde‡
OSSL_ASYNC_FD


56 
ASYNC_WAIT_CTX
 *
ASYNC_WAIT_CTX_√w
();

57 
ASYNC_WAIT_CTX_‰ì
(
ASYNC_WAIT_CTX
 *
˘x
);

58 
ASYNC_WAIT_CTX_£t_waô_fd
(
ASYNC_WAIT_CTX
 *
˘x
, c⁄° *
key
,

59 
OSSL_ASYNC_FD
 
fd
,

60 *
cu°om_d©a
,

61 (*
˛ónup
)(
ASYNC_WAIT_CTX
 *, const *,

62 
OSSL_ASYNC_FD
, *));

63 
ASYNC_WAIT_CTX_gë_fd
(
ASYNC_WAIT_CTX
 *
˘x
, c⁄° *
key
,

64 
OSSL_ASYNC_FD
 *
fd
, **
cu°om_d©a
);

65 
ASYNC_WAIT_CTX_gë_Æl_fds
(
ASYNC_WAIT_CTX
 *
˘x
, 
OSSL_ASYNC_FD
 *
fd
,

66 
size_t
 *
numfds
);

67 
ASYNC_WAIT_CTX_gë_ˇŒback
(
ASYNC_WAIT_CTX
 *
˘x
,

68 
ASYNC_ˇŒback_‚
 *
ˇŒback
,

69 **
ˇŒback_¨g
);

70 
ASYNC_WAIT_CTX_£t_ˇŒback
(
ASYNC_WAIT_CTX
 *
˘x
,

71 
ASYNC_ˇŒback_‚
 
ˇŒback
,

72 *
ˇŒback_¨g
);

73 
ASYNC_WAIT_CTX_£t_°©us
(
ASYNC_WAIT_CTX
 *
˘x
, 
°©us
);

74 
ASYNC_WAIT_CTX_gë_°©us
(
ASYNC_WAIT_CTX
 *
˘x
);

75 
ASYNC_WAIT_CTX_gë_ch™ged_fds
(
ASYNC_WAIT_CTX
 *
˘x
, 
OSSL_ASYNC_FD
 *
addfd
,

76 
size_t
 *
numaddfds
, 
OSSL_ASYNC_FD
 *
dñfd
,

77 
size_t
 *
numdñfds
);

78 
ASYNC_WAIT_CTX_˛ór_fd
(
ASYNC_WAIT_CTX
 *
˘x
, c⁄° *
key
);

81 
ASYNC_is_ˇ∑bÀ
();

83 
ASYNC_°¨t_job
(
ASYNC_JOB
 **
job
, 
ASYNC_WAIT_CTX
 *
˘x
, *
ªt
,

84 (*
func
)(*), *
¨gs
, 
size_t
 
size
);

85 
ASYNC_∑u£_job
();

87 
ASYNC_JOB
 *
ASYNC_gë_cuºít_job
();

88 
ASYNC_WAIT_CTX
 *
ASYNC_gë_waô_˘x
(
ASYNC_JOB
 *
job
);

89 
ASYNC_block_∑u£
();

90 
ASYNC_unblock_∑u£
();

93 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/bio.h

14 #i‚de‡
OPENSSL_BIO_H


15 
	#OPENSSL_BIO_H


	)

16 #¥agm®
⁄˚


18 
	~<›ís¶/ma¸os.h
>

19 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


20 
	#HEADER_BIO_H


	)

23 
	~<›ís¶/e_os2.h
>

25 #i‚de‡
OPENSSL_NO_STDIO


26 
	~<°dio.h
>

28 
	~<°d¨g.h
>

30 
	~<›ís¶/¸y±o.h
>

31 
	~<›ís¶/bi€º.h
>

32 
	~<›ís¶/c‹e.h
>

34 #ifde‡ 
__˝lu•lus


39 
	#BIO_TYPE_DESCRIPTOR
 0x0100

	)

40 
	#BIO_TYPE_FILTER
 0x0200

	)

41 
	#BIO_TYPE_SOURCE_SINK
 0x0400

	)

44 
	#BIO_TYPE_NONE
 0

	)

45 
	#BIO_TYPE_MEM
 ( 1|
BIO_TYPE_SOURCE_SINK
)

	)

46 
	#BIO_TYPE_FILE
 ( 2|
BIO_TYPE_SOURCE_SINK
)

	)

48 
	#BIO_TYPE_FD
 ( 4|
BIO_TYPE_SOURCE_SINK
|
BIO_TYPE_DESCRIPTOR
)

	)

49 
	#BIO_TYPE_SOCKET
 ( 5|
BIO_TYPE_SOURCE_SINK
|
BIO_TYPE_DESCRIPTOR
)

	)

50 
	#BIO_TYPE_NULL
 ( 6|
BIO_TYPE_SOURCE_SINK
)

	)

51 
	#BIO_TYPE_SSL
 ( 7|
BIO_TYPE_FILTER
)

	)

52 
	#BIO_TYPE_MD
 ( 8|
BIO_TYPE_FILTER
)

	)

53 
	#BIO_TYPE_BUFFER
 ( 9|
BIO_TYPE_FILTER
)

	)

54 
	#BIO_TYPE_CIPHER
 (10|
BIO_TYPE_FILTER
)

	)

55 
	#BIO_TYPE_BASE64
 (11|
BIO_TYPE_FILTER
)

	)

56 
	#BIO_TYPE_CONNECT
 (12|
BIO_TYPE_SOURCE_SINK
|
BIO_TYPE_DESCRIPTOR
)

	)

57 
	#BIO_TYPE_ACCEPT
 (13|
BIO_TYPE_SOURCE_SINK
|
BIO_TYPE_DESCRIPTOR
)

	)

59 
	#BIO_TYPE_NBIO_TEST
 (16|
BIO_TYPE_FILTER
)

	)

60 
	#BIO_TYPE_NULL_FILTER
 (17|
BIO_TYPE_FILTER
)

	)

61 
	#BIO_TYPE_BIO
 (19|
BIO_TYPE_SOURCE_SINK
)

	)

62 
	#BIO_TYPE_LINEBUFFER
 (20|
BIO_TYPE_FILTER
)

	)

63 
	#BIO_TYPE_DGRAM
 (21|
BIO_TYPE_SOURCE_SINK
|
BIO_TYPE_DESCRIPTOR
)

	)

64 
	#BIO_TYPE_ASN1
 (22|
BIO_TYPE_FILTER
)

	)

65 
	#BIO_TYPE_COMP
 (23|
BIO_TYPE_FILTER
)

	)

66 #i‚de‡
OPENSSL_NO_SCTP


67 
	#BIO_TYPE_DGRAM_SCTP
 (24|
BIO_TYPE_SOURCE_SINK
|
BIO_TYPE_DESCRIPTOR
)

	)

69 
	#BIO_TYPE_CORE_TO_PROV
 (25|
BIO_TYPE_SOURCE_SINK
)

	)

71 
	#BIO_TYPE_START
 128

	)

77 
	#BIO_NOCLOSE
 0x00

	)

78 
	#BIO_CLOSE
 0x01

	)

83 
	#BIO_CTRL_RESET
 1

	)

84 
	#BIO_CTRL_EOF
 2

	)

85 
	#BIO_CTRL_INFO
 3

	)

86 
	#BIO_CTRL_SET
 4

	)

87 
	#BIO_CTRL_GET
 5

	)

88 
	#BIO_CTRL_PUSH
 6

	)

89 
	#BIO_CTRL_POP
 7

	)

90 
	#BIO_CTRL_GET_CLOSE
 8

	)

91 
	#BIO_CTRL_SET_CLOSE
 9

	)

92 
	#BIO_CTRL_PENDING
 10

	)

93 
	#BIO_CTRL_FLUSH
 11

	)

94 
	#BIO_CTRL_DUP
 12

	)

95 
	#BIO_CTRL_WPENDING
 13

	)

96 
	#BIO_CTRL_SET_CALLBACK
 14

	)

97 
	#BIO_CTRL_GET_CALLBACK
 15

	)

99 
	#BIO_CTRL_PEEK
 29

	)

100 
	#BIO_CTRL_SET_FILENAME
 30

	)

103 
	#BIO_CTRL_DGRAM_CONNECT
 31

	)

104 
	#BIO_CTRL_DGRAM_SET_CONNECTED
 32

	)

106 
	#BIO_CTRL_DGRAM_SET_RECV_TIMEOUT
 33

	)

107 
	#BIO_CTRL_DGRAM_GET_RECV_TIMEOUT
 34

	)

108 
	#BIO_CTRL_DGRAM_SET_SEND_TIMEOUT
 35

	)

109 
	#BIO_CTRL_DGRAM_GET_SEND_TIMEOUT
 36

	)

111 
	#BIO_CTRL_DGRAM_GET_RECV_TIMER_EXP
 37

	)

112 
	#BIO_CTRL_DGRAM_GET_SEND_TIMER_EXP
 38

	)

115 
	#BIO_CTRL_DGRAM_MTU_DISCOVER
 39

	)

118 
	#BIO_CTRL_DGRAM_QUERY_MTU
 40

	)

119 
	#BIO_CTRL_DGRAM_GET_FALLBACK_MTU
 47

	)

120 
	#BIO_CTRL_DGRAM_GET_MTU
 41

	)

121 
	#BIO_CTRL_DGRAM_SET_MTU
 42

	)

125 
	#BIO_CTRL_DGRAM_MTU_EXCEEDED
 43

	)

129 
	#BIO_CTRL_DGRAM_GET_PEER
 46

	)

130 
	#BIO_CTRL_DGRAM_SET_PEER
 44

	)

132 
	#BIO_CTRL_DGRAM_SET_NEXT_TIMEOUT
 45

	)

134 
	#BIO_CTRL_DGRAM_SET_DONT_FRAG
 48

	)

136 
	#BIO_CTRL_DGRAM_GET_MTU_OVERHEAD
 49

	)

139 
	#BIO_CTRL_DGRAM_SCTP_SET_IN_HANDSHAKE
 50

	)

140 #i‚de‡
OPENSSL_NO_SCTP


142 
	#BIO_CTRL_DGRAM_SCTP_ADD_AUTH_KEY
 51

	)

143 
	#BIO_CTRL_DGRAM_SCTP_NEXT_AUTH_KEY
 52

	)

144 
	#BIO_CTRL_DGRAM_SCTP_AUTH_CCS_RCVD
 53

	)

145 
	#BIO_CTRL_DGRAM_SCTP_GET_SNDINFO
 60

	)

146 
	#BIO_CTRL_DGRAM_SCTP_SET_SNDINFO
 61

	)

147 
	#BIO_CTRL_DGRAM_SCTP_GET_RCVINFO
 62

	)

148 
	#BIO_CTRL_DGRAM_SCTP_SET_RCVINFO
 63

	)

149 
	#BIO_CTRL_DGRAM_SCTP_GET_PRINFO
 64

	)

150 
	#BIO_CTRL_DGRAM_SCTP_SET_PRINFO
 65

	)

151 
	#BIO_CTRL_DGRAM_SCTP_SAVE_SHUTDOWN
 70

	)

154 
	#BIO_CTRL_DGRAM_SET_PEEK_MODE
 71

	)

163 
	#BIO_CTRL_GET_KTLS_SEND
 73

	)

164 
	#BIO_CTRL_GET_KTLS_RECV
 76

	)

166 
	#BIO_CTRL_DGRAM_SCTP_WAIT_FOR_DRY
 77

	)

167 
	#BIO_CTRL_DGRAM_SCTP_MSG_WAITING
 78

	)

170 
	#BIO_CTRL_SET_PREFIX
 79

	)

171 
	#BIO_CTRL_SET_INDENT
 80

	)

172 
	#BIO_CTRL_GET_INDENT
 81

	)

174 #i‚de‡
OPENSSL_NO_KTLS


175 
	#BIO_gë_kés_£nd
(
b
) \

176 
	`BIO_˘æ
(
b
, 
BIO_CTRL_GET_KTLS_SEND
, 0, 
NULL
)

	)

177 
	#BIO_gë_kés_ªcv
(
b
) \

178 
	`BIO_˘æ
(
b
, 
BIO_CTRL_GET_KTLS_RECV
, 0, 
NULL
)

	)

180 
	#BIO_gë_kés_£nd
(
b
Ë(0)

	)

181 
	#BIO_gë_kés_ªcv
(
b
Ë(0)

	)

185 
	#BIO_FP_READ
 0x02

	)

186 
	#BIO_FP_WRITE
 0x04

	)

187 
	#BIO_FP_APPEND
 0x08

	)

188 
	#BIO_FP_TEXT
 0x10

	)

190 
	#BIO_FLAGS_READ
 0x01

	)

191 
	#BIO_FLAGS_WRITE
 0x02

	)

192 
	#BIO_FLAGS_IO_SPECIAL
 0x04

	)

193 
	#BIO_FLAGS_RWS
 (
BIO_FLAGS_READ
|
BIO_FLAGS_WRITE
|
BIO_FLAGS_IO_SPECIAL
)

	)

194 
	#BIO_FLAGS_SHOULD_RETRY
 0x08

	)

195 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


197 
	#BIO_FLAGS_UPLINK
 0

	)

200 
	#BIO_FLAGS_BASE64_NO_NL
 0x100

	)

207 
	#BIO_FLAGS_MEM_RDONLY
 0x200

	)

208 
	#BIO_FLAGS_NONCLEAR_RST
 0x400

	)

209 
	#BIO_FLAGS_IN_EOF
 0x800

	)

213 
bio_addr_°
 
	tBIO_ADDR
;

214 
bio_addröfo_°
 
	tBIO_ADDRINFO
;

216 
BIO_gë_√w_ödex
();

217 
BIO_£t_Êags
(
BIO
 *
b
, 
Êags
);

218 
BIO_ã°_Êags
(c⁄° 
BIO
 *
b
, 
Êags
);

219 
BIO_˛ór_Êags
(
BIO
 *
b
, 
Êags
);

221 
	#BIO_gë_Êags
(
b
Ë
	`BIO_ã°_Êags
(b, ~(0x0))

	)

222 
	#BIO_£t_ªåy_•ecül
(
b
) \

223 
	`BIO_£t_Êags
(
b
, (
BIO_FLAGS_IO_SPECIAL
|
BIO_FLAGS_SHOULD_RETRY
))

	)

224 
	#BIO_£t_ªåy_ªad
(
b
) \

225 
	`BIO_£t_Êags
(
b
, (
BIO_FLAGS_READ
|
BIO_FLAGS_SHOULD_RETRY
))

	)

226 
	#BIO_£t_ªåy_wrôe
(
b
) \

227 
	`BIO_£t_Êags
(
b
, (
BIO_FLAGS_WRITE
|
BIO_FLAGS_SHOULD_RETRY
))

	)

230 
	#BIO_˛ór_ªåy_Êags
(
b
) \

231 
	`BIO_˛ór_Êags
(
b
, (
BIO_FLAGS_RWS
|
BIO_FLAGS_SHOULD_RETRY
))

	)

232 
	#BIO_gë_ªåy_Êags
(
b
) \

233 
	`BIO_ã°_Êags
(
b
, (
BIO_FLAGS_RWS
|
BIO_FLAGS_SHOULD_RETRY
))

	)

236 
	#BIO_should_ªad
(
a
Ë
	`BIO_ã°_Êags
◊, 
BIO_FLAGS_READ
)

	)

237 
	#BIO_should_wrôe
(
a
Ë
	`BIO_ã°_Êags
◊, 
BIO_FLAGS_WRITE
)

	)

238 
	#BIO_should_io_•ecül
(
a
Ë
	`BIO_ã°_Êags
◊, 
BIO_FLAGS_IO_SPECIAL
)

	)

239 
	#BIO_ªåy_ty≥
(
a
Ë
	`BIO_ã°_Êags
◊, 
BIO_FLAGS_RWS
)

	)

240 
	#BIO_should_ªåy
(
a
Ë
	`BIO_ã°_Êags
◊, 
BIO_FLAGS_SHOULD_RETRY
)

	)

252 
	#BIO_RR_SSL_X509_LOOKUP
 0x01

	)

254 
	#BIO_RR_CONNECT
 0x02

	)

256 
	#BIO_RR_ACCEPT
 0x03

	)

259 
	#BIO_CB_FREE
 0x01

	)

260 
	#BIO_CB_READ
 0x02

	)

261 
	#BIO_CB_WRITE
 0x03

	)

262 
	#BIO_CB_PUTS
 0x04

	)

263 
	#BIO_CB_GETS
 0x05

	)

264 
	#BIO_CB_CTRL
 0x06

	)

270 
	#BIO_CB_RETURN
 0x80

	)

271 
	#BIO_CB_ªtu∫
(
a
Ë(◊)|
BIO_CB_RETURN
)

	)

272 
	#BIO_cb_¥e
(
a
Ë(!(◊)&
BIO_CB_RETURN
))

	)

273 
	#BIO_cb_po°
(
a
Ë(◊)&
BIO_CB_RETURN
)

	)

275 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


276 (*
BIO_ˇŒback_‚
)(
	tBIO
 *
	tb
, 
	t›î
, c⁄° *
	t¨gp
, 
	t¨gi
,

277 
	t¨gl
, 
	tªt
);

278 
OSSL_DEPRECATEDIN_3_0
 
BIO_ˇŒback_‚
 
BIO_gë_ˇŒback
(c⁄° 
BIO
 *
b
);

279 
OSSL_DEPRECATEDIN_3_0
 
BIO_£t_ˇŒback
(
BIO
 *
b
, 
BIO_ˇŒback_‚
 
ˇŒback
);

280 
OSSL_DEPRECATEDIN_3_0
 
BIO_debug_ˇŒback
(
BIO
 *
bio
, 
cmd
,

281 c⁄° *
¨gp
, 
¨gi
,

282 
¨gl
, 
ªt
);

285 (*
BIO_ˇŒback_‚_ex
)(
	tBIO
 *
	tb
, 
	t›î
, c⁄° *
	t¨gp
,

286 
	tsize_t
 
	tÀn
, 
	t¨gi
,

287 
	t¨gl
, 
	tªt
, 
	tsize_t
 *
	t¥o˚s£d
);

288 
BIO_ˇŒback_‚_ex
 
BIO_gë_ˇŒback_ex
(c⁄° 
BIO
 *
b
);

289 
BIO_£t_ˇŒback_ex
(
BIO
 *
b
, 
BIO_ˇŒback_‚_ex
 
ˇŒback
);

290 
BIO_debug_ˇŒback_ex
(
BIO
 *
bio
, 
›î
, c⁄° *
¨gp
, 
size_t
 
Àn
,

291 
¨gi
, 
¨gl
, 
ªt
, 
size_t
 *
¥o˚s£d
);

293 *
BIO_gë_ˇŒback_¨g
(c⁄° 
BIO
 *
b
);

294 
BIO_£t_ˇŒback_¨g
(
BIO
 *
b
, *
¨g
);

296 
bio_mëhod_°
 
	tBIO_METHOD
;

298 c⁄° *
BIO_mëhod_«me
(c⁄° 
BIO
 *
b
);

299 
BIO_mëhod_ty≥
(c⁄° 
BIO
 *
b
);

301 
	tBIO_öfo_cb
(
	tBIO
 *, , );

302 
BIO_öfo_cb
 
	tbio_öfo_cb
;

304 
SKM_DEFINE_STACK_OF_INTERNAL
(
BIO
, BIO, BIO)

305 
	#sk_BIO_num
(
sk
Ë
	`OPENSSL_sk_num
(
	`os¶_check_c⁄°_BIO_sk_ty≥
(sk))

	)

306 
	#sk_BIO_vÆue
(
sk
, 
idx
Ë((
BIO
 *)
	`OPENSSL_sk_vÆue
(
	`os¶_check_c⁄°_BIO_sk_ty≥
(sk), (idx)))

	)

307 
	#sk_BIO_√w
(
cmp
Ë((
	`STACK_OF
(
BIO
Ë*)
	`OPENSSL_sk_√w
(
	`os¶_check_BIO_compfunc_ty≥
(cmp)))

	)

308 
	#sk_BIO_√w_nuŒ
(Ë((
	`STACK_OF
(
BIO
Ë*)
	`OPENSSL_sk_√w_nuŒ
())

	)

309 
	#sk_BIO_√w_ª£rve
(
cmp
, 
n
Ë((
	`STACK_OF
(
BIO
Ë*)
	`OPENSSL_sk_√w_ª£rve
(
	`os¶_check_BIO_compfunc_ty≥
(cmp), (n)))

	)

310 
	#sk_BIO_ª£rve
(
sk
, 
n
Ë
	`OPENSSL_sk_ª£rve
(
	`os¶_check_BIO_sk_ty≥
(sk), (n))

	)

311 
	#sk_BIO_‰ì
(
sk
Ë
	`OPENSSL_sk_‰ì
(
	`os¶_check_BIO_sk_ty≥
(sk))

	)

312 
	#sk_BIO_zîo
(
sk
Ë
	`OPENSSL_sk_zîo
(
	`os¶_check_BIO_sk_ty≥
(sk))

	)

313 
	#sk_BIO_dñëe
(
sk
, 
i
Ë((
BIO
 *)
	`OPENSSL_sk_dñëe
(
	`os¶_check_BIO_sk_ty≥
(sk), (i)))

	)

314 
	#sk_BIO_dñëe_±r
(
sk
, 
±r
Ë((
BIO
 *)
	`OPENSSL_sk_dñëe_±r
(
	`os¶_check_BIO_sk_ty≥
(sk), 
	`os¶_check_BIO_ty≥
’å)))

	)

315 
	#sk_BIO_push
(
sk
, 
±r
Ë
	`OPENSSL_sk_push
(
	`os¶_check_BIO_sk_ty≥
(sk), 
	`os¶_check_BIO_ty≥
’å))

	)

316 
	#sk_BIO_unshi·
(
sk
, 
±r
Ë
	`OPENSSL_sk_unshi·
(
	`os¶_check_BIO_sk_ty≥
(sk), 
	`os¶_check_BIO_ty≥
’å))

	)

317 
	#sk_BIO_p›
(
sk
Ë((
BIO
 *)
	`OPENSSL_sk_p›
(
	`os¶_check_BIO_sk_ty≥
(sk)))

	)

318 
	#sk_BIO_shi·
(
sk
Ë((
BIO
 *)
	`OPENSSL_sk_shi·
(
	`os¶_check_BIO_sk_ty≥
(sk)))

	)

319 
	#sk_BIO_p›_‰ì
(
sk
, 
‰ìfunc
Ë
	`OPENSSL_sk_p›_‰ì
(
	`os¶_check_BIO_sk_ty≥
(sk),
	`os¶_check_BIO_‰ìfunc_ty≥
(‰ìfunc))

	)

320 
	#sk_BIO_ö£π
(
sk
, 
±r
, 
idx
Ë
	`OPENSSL_sk_ö£π
(
	`os¶_check_BIO_sk_ty≥
(sk), 
	`os¶_check_BIO_ty≥
’å), (idx))

	)

321 
	#sk_BIO_£t
(
sk
, 
idx
, 
±r
Ë((
BIO
 *)
	`OPENSSL_sk_£t
(
	`os¶_check_BIO_sk_ty≥
(sk), (idx), 
	`os¶_check_BIO_ty≥
’å)))

	)

322 
	#sk_BIO_föd
(
sk
, 
±r
Ë
	`OPENSSL_sk_föd
(
	`os¶_check_BIO_sk_ty≥
(sk), 
	`os¶_check_BIO_ty≥
’å))

	)

323 
	#sk_BIO_föd_ex
(
sk
, 
±r
Ë
	`OPENSSL_sk_föd_ex
(
	`os¶_check_BIO_sk_ty≥
(sk), 
	`os¶_check_BIO_ty≥
’å))

	)

324 
	#sk_BIO_föd_Æl
(
sk
, 
±r
, 
≤um
Ë
	`OPENSSL_sk_föd_Æl
(
	`os¶_check_BIO_sk_ty≥
(sk), 
	`os¶_check_BIO_ty≥
’å),Önum)

	)

325 
	#sk_BIO_s‹t
(
sk
Ë
	`OPENSSL_sk_s‹t
(
	`os¶_check_BIO_sk_ty≥
(sk))

	)

326 
	#sk_BIO_is_s‹ãd
(
sk
Ë
	`OPENSSL_sk_is_s‹ãd
(
	`os¶_check_c⁄°_BIO_sk_ty≥
(sk))

	)

327 
	#sk_BIO_dup
(
sk
Ë((
	`STACK_OF
(
BIO
Ë*)
	`OPENSSL_sk_dup
(
	`os¶_check_c⁄°_BIO_sk_ty≥
(sk)))

	)

328 
	#sk_BIO_dìp_c›y
(
sk
, 
c›yfunc
, 
‰ìfunc
Ë((
	`STACK_OF
(
BIO
Ë*)
	`OPENSSL_sk_dìp_c›y
(
	`os¶_check_c⁄°_BIO_sk_ty≥
(sk), 
	`os¶_check_BIO_c›yfunc_ty≥
(c›yfunc), 
	`os¶_check_BIO_‰ìfunc_ty≥
(‰ìfunc)))

	)

329 
	#sk_BIO_£t_cmp_func
(
sk
, 
cmp
Ë((
sk_BIO_compfunc
)
	`OPENSSL_sk_£t_cmp_func
(
	`os¶_check_BIO_sk_ty≥
(sk), 
	`os¶_check_BIO_compfunc_ty≥
(cmp)))

	)

334 
	ta¢1_ps_func
 (
	tBIO
 *
	tb
, **
	tpbuf
, *
	t∂í
,

335 *
	t∑rg
);

337 (*
BIO_dgøm_s˘p_nŸifiˇti⁄_h™dÀr_‚
Ë(
	tBIO
 *
	tb
,

338 *
	tc⁄ãxt
,

339 *
	tbuf
);

340 #i‚de‡
OPENSSL_NO_SCTP


342 
	sbio_dgøm_s˘p_¢döfo
 {

343 
uöt16_t
 
¢d_sid
;

344 
uöt16_t
 
¢d_Êags
;

345 
uöt32_t
 
¢d_µid
;

346 
uöt32_t
 
¢d_c⁄ãxt
;

349 
	sbio_dgøm_s˘p_rcvöfo
 {

350 
uöt16_t
 
rcv_sid
;

351 
uöt16_t
 
rcv_s¢
;

352 
uöt16_t
 
rcv_Êags
;

353 
uöt32_t
 
rcv_µid
;

354 
uöt32_t
 
rcv_t¢
;

355 
uöt32_t
 
rcv_cumt¢
;

356 
uöt32_t
 
rcv_c⁄ãxt
;

359 
	sbio_dgøm_s˘p_¥öfo
 {

360 
uöt16_t
 
¥_pﬁicy
;

361 
uöt32_t
 
¥_vÆue
;

369 
	#BIO_C_SET_CONNECT
 100

	)

370 
	#BIO_C_DO_STATE_MACHINE
 101

	)

371 
	#BIO_C_SET_NBIO
 102

	)

373 
	#BIO_C_SET_FD
 104

	)

374 
	#BIO_C_GET_FD
 105

	)

375 
	#BIO_C_SET_FILE_PTR
 106

	)

376 
	#BIO_C_GET_FILE_PTR
 107

	)

377 
	#BIO_C_SET_FILENAME
 108

	)

378 
	#BIO_C_SET_SSL
 109

	)

379 
	#BIO_C_GET_SSL
 110

	)

380 
	#BIO_C_SET_MD
 111

	)

381 
	#BIO_C_GET_MD
 112

	)

382 
	#BIO_C_GET_CIPHER_STATUS
 113

	)

383 
	#BIO_C_SET_BUF_MEM
 114

	)

384 
	#BIO_C_GET_BUF_MEM_PTR
 115

	)

385 
	#BIO_C_GET_BUFF_NUM_LINES
 116

	)

386 
	#BIO_C_SET_BUFF_SIZE
 117

	)

387 
	#BIO_C_SET_ACCEPT
 118

	)

388 
	#BIO_C_SSL_MODE
 119

	)

389 
	#BIO_C_GET_MD_CTX
 120

	)

391 
	#BIO_C_SET_BUFF_READ_DATA
 122

	)

392 
	#BIO_C_GET_CONNECT
 123

	)

393 
	#BIO_C_GET_ACCEPT
 124

	)

394 
	#BIO_C_SET_SSL_RENEGOTIATE_BYTES
 125

	)

395 
	#BIO_C_GET_SSL_NUM_RENEGOTIATES
 126

	)

396 
	#BIO_C_SET_SSL_RENEGOTIATE_TIMEOUT
 127

	)

397 
	#BIO_C_FILE_SEEK
 128

	)

398 
	#BIO_C_GET_CIPHER_CTX
 129

	)

399 
	#BIO_C_SET_BUF_MEM_EOF_RETURN
 130

	)

401 
	#BIO_C_SET_BIND_MODE
 131

	)

402 
	#BIO_C_GET_BIND_MODE
 132

	)

403 
	#BIO_C_FILE_TELL
 133

	)

404 
	#BIO_C_GET_SOCKS
 134

	)

405 
	#BIO_C_SET_SOCKS
 135

	)

407 
	#BIO_C_SET_WRITE_BUF_SIZE
 136

	)

408 
	#BIO_C_GET_WRITE_BUF_SIZE
 137

	)

409 
	#BIO_C_MAKE_BIO_PAIR
 138

	)

410 
	#BIO_C_DESTROY_BIO_PAIR
 139

	)

411 
	#BIO_C_GET_WRITE_GUARANTEE
 140

	)

412 
	#BIO_C_GET_READ_REQUEST
 141

	)

413 
	#BIO_C_SHUTDOWN_WR
 142

	)

414 
	#BIO_C_NREAD0
 143

	)

415 
	#BIO_C_NREAD
 144

	)

416 
	#BIO_C_NWRITE0
 145

	)

417 
	#BIO_C_NWRITE
 146

	)

418 
	#BIO_C_RESET_READ_REQUEST
 147

	)

419 
	#BIO_C_SET_MD_CTX
 148

	)

421 
	#BIO_C_SET_PREFIX
 149

	)

422 
	#BIO_C_GET_PREFIX
 150

	)

423 
	#BIO_C_SET_SUFFIX
 151

	)

424 
	#BIO_C_GET_SUFFIX
 152

	)

426 
	#BIO_C_SET_EX_ARG
 153

	)

427 
	#BIO_C_GET_EX_ARG
 154

	)

429 
	#BIO_C_SET_CONNECT_MODE
 155

	)

431 
	#BIO_£t_≠p_d©a
(
s
,
¨g
Ë
	`BIO_£t_ex_d©a
(s,0,¨g)

	)

432 
	#BIO_gë_≠p_d©a
(
s
Ë
	`BIO_gë_ex_d©a
(s,0)

	)

434 
	#BIO_£t_nbio
(
b
,
n
Ë
	`BIO_˘æ
(b,
BIO_C_SET_NBIO
,“),
NULL
)

	)

436 #i‚de‡
OPENSSL_NO_SOCK


439 
	#BIO_FAMILY_IPV4
 4

	)

440 
	#BIO_FAMILY_IPV6
 6

	)

441 
	#BIO_FAMILY_IPANY
 256

	)

444 
	#BIO_£t_c⁄n_ho°«me
(
b
,
«me
Ë
	`BIO_˘æ
(b,
BIO_C_SET_CONNECT
,0, \

445 (*)(
«me
))

	)

446 
	#BIO_£t_c⁄n_p‹t
(
b
,
p‹t
Ë
	`BIO_˘æ
(b,
BIO_C_SET_CONNECT
,1, \

447 (*)(
p‹t
))

	)

448 
	#BIO_£t_c⁄n_addªss
(
b
,
addr
Ë
	`BIO_˘æ
(b,
BIO_C_SET_CONNECT
,2, \

449 (*)(
addr
))

	)

450 
	#BIO_£t_c⁄n_ù_Ámûy
(
b
,
f
Ë
	`BIO_öt_˘æ
(b,
BIO_C_SET_CONNECT
,3,f)

	)

451 
	#BIO_gë_c⁄n_ho°«me
(
b
Ë((c⁄° *)
	`BIO_±r_˘æ
(b,
BIO_C_GET_CONNECT
,0))

	)

452 
	#BIO_gë_c⁄n_p‹t
(
b
Ë((c⁄° *)
	`BIO_±r_˘æ
(b,
BIO_C_GET_CONNECT
,1))

	)

453 
	#BIO_gë_c⁄n_addªss
(
b
Ë((c⁄° 
BIO_ADDR
 *)
	`BIO_±r_˘æ
(b,
BIO_C_GET_CONNECT
,2))

	)

454 
	#BIO_gë_c⁄n_ù_Ámûy
(
b
Ë
	`BIO_˘æ
(b,
BIO_C_GET_CONNECT
,3,
NULL
)

	)

455 
	#BIO_£t_c⁄n_mode
(
b
,
n
Ë
	`BIO_˘æ
(b,
BIO_C_SET_CONNECT_MODE
,“),
NULL
)

	)

458 
	#BIO_£t_ac˚±_«me
(
b
,
«me
Ë
	`BIO_˘æ
(b,
BIO_C_SET_ACCEPT
,0, \

459 (*)(
«me
))

	)

460 
	#BIO_£t_ac˚±_p‹t
(
b
,
p‹t
Ë
	`BIO_˘æ
(b,
BIO_C_SET_ACCEPT
,1, \

461 (*)(
p‹t
))

	)

462 
	#BIO_gë_ac˚±_«me
(
b
Ë((c⁄° *)
	`BIO_±r_˘æ
(b,
BIO_C_GET_ACCEPT
,0))

	)

463 
	#BIO_gë_ac˚±_p‹t
(
b
Ë((c⁄° *)
	`BIO_±r_˘æ
(b,
BIO_C_GET_ACCEPT
,1))

	)

464 
	#BIO_gë_≥î_«me
(
b
Ë((c⁄° *)
	`BIO_±r_˘æ
(b,
BIO_C_GET_ACCEPT
,2))

	)

465 
	#BIO_gë_≥î_p‹t
(
b
Ë((c⁄° *)
	`BIO_±r_˘æ
(b,
BIO_C_GET_ACCEPT
,3))

	)

467 
	#BIO_£t_nbio_ac˚±
(
b
,
n
Ë
	`BIO_˘æ
(b,
BIO_C_SET_ACCEPT
,2,“)?(*)"a":
NULL
)

	)

468 
	#BIO_£t_ac˚±_bios
(
b
,
bio
Ë
	`BIO_˘æ
(b,
BIO_C_SET_ACCEPT
,3, \

469 (*)(
bio
))

	)

470 
	#BIO_£t_ac˚±_ù_Ámûy
(
b
,
f
Ë
	`BIO_öt_˘æ
(b,
BIO_C_SET_ACCEPT
,4,f)

	)

471 
	#BIO_gë_ac˚±_ù_Ámûy
(
b
Ë
	`BIO_˘æ
(b,
BIO_C_GET_ACCEPT
,4,
NULL
)

	)

474 
	#BIO_BIND_NORMAL
 0

	)

475 
	#BIO_BIND_REUSEADDR
 
BIO_SOCK_REUSEADDR


	)

476 
	#BIO_BIND_REUSEADDR_IF_UNUSED
 
BIO_SOCK_REUSEADDR


	)

477 
	#BIO_£t_böd_mode
(
b
,
mode
Ë
	`BIO_˘æ
(b,
BIO_C_SET_BIND_MODE
,mode,
NULL
)

	)

478 
	#BIO_gë_böd_mode
(
b
Ë
	`BIO_˘æ
(b,
BIO_C_GET_BIND_MODE
,0,
NULL
)

	)

481 
	#BIO_do_c⁄√˘
(
b
Ë
	`BIO_do_h™dshake
(b)

	)

482 
	#BIO_do_ac˚±
(
b
Ë
	`BIO_do_h™dshake
(b)

	)

484 
	#BIO_do_h™dshake
(
b
Ë
	`BIO_˘æ
(b,
BIO_C_DO_STATE_MACHINE
,0,
NULL
)

	)

487 
	#BIO_£t_fd
(
b
,
fd
,
c
Ë
	`BIO_öt_˘æ
(b,
BIO_C_SET_FD
,c,fd)

	)

488 
	#BIO_gë_fd
(
b
,
c
Ë
	`BIO_˘æ
(b,
BIO_C_GET_FD
,0,(*)(c))

	)

491 
	#BIO_£t_Â
(
b
,
Â
,
c
Ë
	`BIO_˘æ
(b,
BIO_C_SET_FILE_PTR
,c,(*)(Â))

	)

492 
	#BIO_gë_Â
(
b
,
Âp
Ë
	`BIO_˘æ
(b,
BIO_C_GET_FILE_PTR
,0,(*)(Âp))

	)

495 
	#BIO_£ek
(
b
,
ofs
Ë()
	`BIO_˘æ
(b,
BIO_C_FILE_SEEK
,ofs,
NULL
)

	)

496 
	#BIO_ãŒ
(
b
Ë()
	`BIO_˘æ
(b,
BIO_C_FILE_TELL
,0,
NULL
)

	)

502 #ifde‡
CONST_STRICT


507 
BIO_ªad_fûíame
(
BIO
 *
b
, c⁄° *
«me
);

509 
	#BIO_ªad_fûíame
(
b
,
«me
Ë()
	`BIO_˘æ
(b,
BIO_C_SET_FILENAME
, \

510 
BIO_CLOSE
|
BIO_FP_READ
,(*)(
«me
))

	)

512 
	#BIO_wrôe_fûíame
(
b
,
«me
Ë()
	`BIO_˘æ
(b,
BIO_C_SET_FILENAME
, \

513 
BIO_CLOSE
|
BIO_FP_WRITE
,
«me
)

	)

514 
	#BIO_≠≥nd_fûíame
(
b
,
«me
Ë()
	`BIO_˘æ
(b,
BIO_C_SET_FILENAME
, \

515 
BIO_CLOSE
|
BIO_FP_APPEND
,
«me
)

	)

516 
	#BIO_rw_fûíame
(
b
,
«me
Ë()
	`BIO_˘æ
(b,
BIO_C_SET_FILENAME
, \

517 
BIO_CLOSE
|
BIO_FP_READ
|
BIO_FP_WRITE
,
«me
)

	)

525 
	#BIO_£t_s¶
(
b
,
s¶
,
c
Ë
	`BIO_˘æ
(b,
BIO_C_SET_SSL
,c,(*)(s¶))

	)

526 
	#BIO_gë_s¶
(
b
,
s¶p
Ë
	`BIO_˘æ
(b,
BIO_C_GET_SSL
,0,(*)(s¶p))

	)

527 
	#BIO_£t_s¶_mode
(
b
,
˛õ¡
Ë
	`BIO_˘æ
(b,
BIO_C_SSL_MODE
,˛õ¡,
NULL
)

	)

528 
	#BIO_£t_s¶_ª√gŸüã_byãs
(
b
,
num
) \

529 
	`BIO_˘æ
(
b
,
BIO_C_SET_SSL_RENEGOTIATE_BYTES
,
num
,
NULL
)

	)

530 
	#BIO_gë_num_ª√gŸüãs
(
b
) \

531 
	`BIO_˘æ
(
b
,
BIO_C_GET_SSL_NUM_RENEGOTIATES
,0,
NULL
)

	)

532 
	#BIO_£t_s¶_ª√gŸüã_timeout
(
b
,
£c⁄ds
) \

533 
	`BIO_˘æ
(
b
,
BIO_C_SET_SSL_RENEGOTIATE_TIMEOUT
,
£c⁄ds
,
NULL
)

	)

538 
	#BIO_gë_mem_d©a
(
b
,
µ
Ë
	`BIO_˘æ
(b,
BIO_CTRL_INFO
,0,(*)’p))

	)

539 
	#BIO_£t_mem_buf
(
b
,
bm
,
c
Ë
	`BIO_˘æ
(b,
BIO_C_SET_BUF_MEM
,c,(*)(bm))

	)

540 
	#BIO_gë_mem_±r
(
b
,
µ
Ë
	`BIO_˘æ
(b,
BIO_C_GET_BUF_MEM_PTR
,0, \

541 (*)(
µ
))

	)

542 
	#BIO_£t_mem_eof_ªtu∫
(
b
,
v
) \

543 
	`BIO_˘æ
(
b
,
BIO_C_SET_BUF_MEM_EOF_RETURN
,
v
,
NULL
)

	)

546 
	#BIO_gë_buf„r_num_löes
(
b
Ë
	`BIO_˘æ
(b,
BIO_C_GET_BUFF_NUM_LINES
,0,
NULL
)

	)

547 
	#BIO_£t_buf„r_size
(
b
,
size
Ë
	`BIO_˘æ
(b,
BIO_C_SET_BUFF_SIZE
,size,
NULL
)

	)

548 
	#BIO_£t_ªad_buf„r_size
(
b
,
size
Ë
	`BIO_öt_˘æ
(b,
BIO_C_SET_BUFF_SIZE
,size,0)

	)

549 
	#BIO_£t_wrôe_buf„r_size
(
b
,
size
Ë
	`BIO_öt_˘æ
(b,
BIO_C_SET_BUFF_SIZE
,size,1)

	)

550 
	#BIO_£t_buf„r_ªad_d©a
(
b
,
buf
,
num
Ë
	`BIO_˘æ
(b,
BIO_C_SET_BUFF_READ_DATA
,num,buf)

	)

553 
	#BIO_dup_°©e
(
b
,
ªt
Ë
	`BIO_˘æ
(b,
BIO_CTRL_DUP
,0,(*)‘ë))

	)

555 
	#BIO_ª£t
(
b
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_RESET
,0,
NULL
)

	)

556 
	#BIO_eof
(
b
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_EOF
,0,
NULL
)

	)

557 
	#BIO_£t_˛o£
(
b
,
c
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_SET_CLOSE
,(c),
NULL
)

	)

558 
	#BIO_gë_˛o£
(
b
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_GET_CLOSE
,0,
NULL
)

	)

559 
	#BIO_≥ndög
(
b
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_PENDING
,0,
NULL
)

	)

560 
	#BIO_w≥ndög
(
b
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_WPENDING
,0,
NULL
)

	)

562 
size_t
 
BIO_˘æ_≥ndög
(
BIO
 *
b
);

563 
size_t
 
BIO_˘æ_w≥ndög
(
BIO
 *
b
);

564 
	#BIO_Êush
(
b
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_FLUSH
,0,
NULL
)

	)

565 
	#BIO_gë_öfo_ˇŒback
(
b
,
cbp
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_GET_CALLBACK
,0, \

566 
cbp
)

	)

567 
	#BIO_£t_öfo_ˇŒback
(
b
,
cb
Ë()
	`BIO_ˇŒback_˘æ
(b,
BIO_CTRL_SET_CALLBACK
,cb)

	)

570 
	#BIO_buf„r_gë_num_löes
(
b
Ë
	`BIO_˘æ
(b,
BIO_CTRL_GET
,0,
NULL
)

	)

571 
	#BIO_buf„r_≥ek
(
b
,
s
,
l
Ë
	`BIO_˘æ
(b,
BIO_CTRL_PEEK
,÷),(s))

	)

574 
	#BIO_£t_wrôe_buf_size
(
b
,
size
Ë()
	`BIO_˘æ
(b,
BIO_C_SET_WRITE_BUF_SIZE
,size,
NULL
)

	)

575 
	#BIO_gë_wrôe_buf_size
(
b
,
size
Ë(
size_t
)
	`BIO_˘æ
(b,
BIO_C_GET_WRITE_BUF_SIZE
,size,
NULL
)

	)

576 
	#BIO_make_bio_∑ú
(
b1
,
b2
Ë()
	`BIO_˘æ
(b1,
BIO_C_MAKE_BIO_PAIR
,0,b2)

	)

577 
	#BIO_de°roy_bio_∑ú
(
b
Ë()
	`BIO_˘æ
(b,
BIO_C_DESTROY_BIO_PAIR
,0,
NULL
)

	)

578 
	#BIO_shutdown_wr
(
b
Ë()
	`BIO_˘æ
(b, 
BIO_C_SHUTDOWN_WR
, 0, 
NULL
)

	)

580 
	#BIO_gë_wrôe_gu¨™ãe
(
b
Ë()
	`BIO_˘æ
(b,
BIO_C_GET_WRITE_GUARANTEE
,0,
NULL
)

	)

581 
	#BIO_gë_ªad_ªque°
(
b
Ë()
	`BIO_˘æ
(b,
BIO_C_GET_READ_REQUEST
,0,
NULL
)

	)

582 
size_t
 
BIO_˘æ_gë_wrôe_gu¨™ãe
(
BIO
 *
b
);

583 
size_t
 
BIO_˘æ_gë_ªad_ªque°
(
BIO
 *
b
);

584 
BIO_˘æ_ª£t_ªad_ªque°
(
BIO
 *
b
);

587 
	#BIO_˘æ_dgøm_c⁄√˘
(
b
,
≥î
) \

588 ()
	`BIO_˘æ
(
b
,
BIO_CTRL_DGRAM_CONNECT
,0, (*)(
≥î
))

	)

589 
	#BIO_˘æ_£t_c⁄√˘ed
(
b
,
≥î
) \

590 ()
	`BIO_˘æ
(
b
, 
BIO_CTRL_DGRAM_SET_CONNECTED
, 0, (*)(
≥î
))

	)

591 
	#BIO_dgøm_ªcv_timedout
(
b
) \

592 ()
	`BIO_˘æ
(
b
, 
BIO_CTRL_DGRAM_GET_RECV_TIMER_EXP
, 0, 
NULL
)

	)

593 
	#BIO_dgøm_£nd_timedout
(
b
) \

594 ()
	`BIO_˘æ
(
b
, 
BIO_CTRL_DGRAM_GET_SEND_TIMER_EXP
, 0, 
NULL
)

	)

595 
	#BIO_dgøm_gë_≥î
(
b
,
≥î
) \

596 ()
	`BIO_˘æ
(
b
, 
BIO_CTRL_DGRAM_GET_PEER
, 0, (*)(
≥î
))

	)

597 
	#BIO_dgøm_£t_≥î
(
b
,
≥î
) \

598 ()
	`BIO_˘æ
(
b
, 
BIO_CTRL_DGRAM_SET_PEER
, 0, (*)(
≥î
))

	)

599 
	#BIO_dgøm_gë_mtu_ovîhód
(
b
) \

600 ()
	`BIO_˘æ
((
b
), 
BIO_CTRL_DGRAM_GET_MTU_OVERHEAD
, 0, 
NULL
)

	)

603 
	#BIO_£t_¥efix
(
b
,
p
Ë
	`BIO_˘æ
((b), 
BIO_CTRL_SET_PREFIX
, 0, (*)’))

	)

604 
	#BIO_£t_ödít
(
b
,
i
Ë
	`BIO_˘æ
((b), 
BIO_CTRL_SET_INDENT
, (i), 
NULL
)

	)

605 
	#BIO_gë_ödít
(
b
Ë
	`BIO_˘æ
((b), 
BIO_CTRL_GET_INDENT
, 0, 
NULL
)

	)

607 
	#BIO_gë_ex_√w_ödex
(
l
, 
p
, 
√wf
, 
dupf
, 
‰ìf
) \

608 
	`CRYPTO_gë_ex_√w_ödex
(
CRYPTO_EX_INDEX_BIO
, 
l
, 
p
, 
√wf
, 
dupf
, 
‰ìf
)

	)

609 
BIO_£t_ex_d©a
(
BIO
 *
bio
, 
idx
, *
d©a
);

610 *
BIO_gë_ex_d©a
(c⁄° 
BIO
 *
bio
, 
idx
);

611 
uöt64_t
 
BIO_numbî_ªad
(
BIO
 *
bio
);

612 
uöt64_t
 
BIO_numbî_wrôãn
(
BIO
 *
bio
);

615 
BIO_a¢1_£t_¥efix
(
BIO
 *
b
, 
a¢1_ps_func
 *
¥efix
,

616 
a¢1_ps_func
 *
¥efix_‰ì
);

617 
BIO_a¢1_gë_¥efix
(
BIO
 *
b
, 
a¢1_ps_func
 **
µªfix
,

618 
a¢1_ps_func
 **
µªfix_‰ì
);

619 
BIO_a¢1_£t_suffix
(
BIO
 *
b
, 
a¢1_ps_func
 *
suffix
,

620 
a¢1_ps_func
 *
suffix_‰ì
);

621 
BIO_a¢1_gë_suffix
(
BIO
 *
b
, 
a¢1_ps_func
 **
psuffix
,

622 
a¢1_ps_func
 **
psuffix_‰ì
);

624 c⁄° 
BIO_METHOD
 *
BIO_s_fûe
();

625 
BIO
 *
BIO_√w_fûe
(c⁄° *
fûíame
, c⁄° *
mode
);

626 
BIO
 *
BIO_√w_‰om_c‹e_bio
(
OSSL_LIB_CTX
 *
lib˘x
, 
OSSL_CORE_BIO
 *
c‹ebio
);

627 #i‚de‡
OPENSSL_NO_STDIO


628 
BIO
 *
BIO_√w_Â
(
FILE
 *
°ªam
, 
˛o£_Êag
);

630 
BIO
 *
BIO_√w_ex
(
OSSL_LIB_CTX
 *
lib˘x
, c⁄° 
BIO_METHOD
 *
mëhod
);

631 
BIO
 *
BIO_√w
(c⁄° 
BIO_METHOD
 *
ty≥
);

632 
BIO_‰ì
(
BIO
 *
a
);

633 
BIO_£t_d©a
(
BIO
 *
a
, *
±r
);

634 *
BIO_gë_d©a
(
BIO
 *
a
);

635 
BIO_£t_öô
(
BIO
 *
a
, 
öô
);

636 
BIO_gë_öô
(
BIO
 *
a
);

637 
BIO_£t_shutdown
(
BIO
 *
a
, 
shut
);

638 
BIO_gë_shutdown
(
BIO
 *
a
);

639 
BIO_v‰ì
(
BIO
 *
a
);

640 
BIO_up_ªf
(
BIO
 *
a
);

641 
BIO_ªad
(
BIO
 *
b
, *
d©a
, 
dÀn
);

642 
BIO_ªad_ex
(
BIO
 *
b
, *
d©a
, 
size_t
 
dÀn
, size_à*
ªadbyãs
);

643 
BIO_gës
(
BIO
 *
bp
, *
buf
, 
size
);

644 
BIO_gë_löe
(
BIO
 *
bio
, *
buf
, 
size
);

645 
BIO_wrôe
(
BIO
 *
b
, c⁄° *
d©a
, 
dÀn
);

646 
BIO_wrôe_ex
(
BIO
 *
b
, c⁄° *
d©a
, 
size_t
 
dÀn
, size_à*
wrôãn
);

647 
BIO_puts
(
BIO
 *
bp
, c⁄° *
buf
);

648 
BIO_ödít
(
BIO
 *
b
, 
ödít
, 
max
);

649 
BIO_˘æ
(
BIO
 *
bp
, 
cmd
, 
œrg
, *
∑rg
);

650 
BIO_ˇŒback_˘æ
(
BIO
 *
b
, 
cmd
, 
BIO_öfo_cb
 *
Â
);

651 *
BIO_±r_˘æ
(
BIO
 *
bp
, 
cmd
, 
œrg
);

652 
BIO_öt_˘æ
(
BIO
 *
bp
, 
cmd
, 
œrg
, 
ürg
);

653 
BIO
 *
BIO_push
(BIO *
b
, BIO *
≠≥nd
);

654 
BIO
 *
BIO_p›
(BIO *
b
);

655 
BIO_‰ì_Æl
(
BIO
 *
a
);

656 
BIO
 *
BIO_föd_ty≥
(BIO *
b
, 
bio_ty≥
);

657 
BIO
 *
BIO_√xt
(BIO *
b
);

658 
BIO_£t_√xt
(
BIO
 *
b
, BIO *
√xt
);

659 
BIO
 *
BIO_gë_ªåy_BIO
(BIO *
bio
, *
ªas⁄
);

660 
BIO_gë_ªåy_ªas⁄
(
BIO
 *
bio
);

661 
BIO_£t_ªåy_ªas⁄
(
BIO
 *
bio
, 
ªas⁄
);

662 
BIO
 *
BIO_dup_chaö
(BIO *
ö
);

664 
BIO_ƒód0
(
BIO
 *
bio
, **
buf
);

665 
BIO_ƒód
(
BIO
 *
bio
, **
buf
, 
num
);

666 
BIO_nwrôe0
(
BIO
 *
bio
, **
buf
);

667 
BIO_nwrôe
(
BIO
 *
bio
, **
buf
, 
num
);

669 c⁄° 
BIO_METHOD
 *
BIO_s_mem
();

670 c⁄° 
BIO_METHOD
 *
BIO_s_£cmem
();

671 
BIO
 *
BIO_√w_mem_buf
(c⁄° *
buf
, 
Àn
);

672 #i‚de‡
OPENSSL_NO_SOCK


673 c⁄° 
BIO_METHOD
 *
BIO_s_sockë
();

674 c⁄° 
BIO_METHOD
 *
BIO_s_c⁄√˘
();

675 c⁄° 
BIO_METHOD
 *
BIO_s_ac˚±
();

677 c⁄° 
BIO_METHOD
 *
BIO_s_fd
();

678 c⁄° 
BIO_METHOD
 *
BIO_s_log
();

679 c⁄° 
BIO_METHOD
 *
BIO_s_bio
();

680 c⁄° 
BIO_METHOD
 *
BIO_s_nuŒ
();

681 c⁄° 
BIO_METHOD
 *
BIO_f_nuŒ
();

682 c⁄° 
BIO_METHOD
 *
BIO_f_buf„r
();

683 c⁄° 
BIO_METHOD
 *
BIO_f_ªadbuf„r
();

684 c⁄° 
BIO_METHOD
 *
BIO_f_löebuf„r
();

685 c⁄° 
BIO_METHOD
 *
BIO_f_nbio_ã°
();

686 c⁄° 
BIO_METHOD
 *
BIO_f_¥efix
();

687 c⁄° 
BIO_METHOD
 *
BIO_s_c‹e
();

688 #i‚de‡
OPENSSL_NO_DGRAM


689 c⁄° 
BIO_METHOD
 *
BIO_s_d©agøm
();

690 
BIO_dgøm_n⁄_Áèl_îr‹
(
îr‹
);

691 
BIO
 *
BIO_√w_dgøm
(
fd
, 
˛o£_Êag
);

692 #i‚de‡
OPENSSL_NO_SCTP


693 c⁄° 
BIO_METHOD
 *
BIO_s_d©agøm_s˘p
();

694 
BIO
 *
BIO_√w_dgøm_s˘p
(
fd
, 
˛o£_Êag
);

695 
BIO_dgøm_is_s˘p
(
BIO
 *
bio
);

696 
BIO_dgøm_s˘p_nŸifiˇti⁄_cb
(
BIO
 *
b
,

697 
BIO_dgøm_s˘p_nŸifiˇti⁄_h™dÀr_‚
 
h™dÀ_nŸifiˇti⁄s
,

698 *
c⁄ãxt
);

699 
BIO_dgøm_s˘p_waô_f‹_dry
(
BIO
 *
b
);

700 
BIO_dgøm_s˘p_msg_waôög
(
BIO
 *
b
);

704 #i‚de‡
OPENSSL_NO_SOCK


705 
BIO_sock_should_ªåy
(
i
);

706 
BIO_sock_n⁄_Áèl_îr‹
(
îr‹
);

707 
BIO_sockë_waô
(
fd
, 
f‹_ªad
, 
time_t
 
max_time
);

709 
BIO_waô
(
BIO
 *
bio
, 
time_t
 
max_time
, 
«p_mûli£c⁄ds
);

710 
BIO_do_c⁄√˘_ªåy
(
BIO
 *
bio
, 
timeout
, 
«p_mûli£c⁄ds
);

712 
BIO_fd_should_ªåy
(
i
);

713 
BIO_fd_n⁄_Áèl_îr‹
(
îr‹
);

714 
BIO_dump_cb
((*
cb
Ë(c⁄° *
d©a
, 
size_t
 
Àn
, *
u
),

715 *
u
, c⁄° *
s
, 
Àn
);

716 
BIO_dump_ödít_cb
((*
cb
Ë(c⁄° *
d©a
, 
size_t
 
Àn
, *
u
),

717 *
u
, c⁄° *
s
, 
Àn
, 
ödít
);

718 
BIO_dump
(
BIO
 *
b
, c⁄° *
byãs
, 
Àn
);

719 
BIO_dump_ödít
(
BIO
 *
b
, c⁄° *
byãs
, 
Àn
, 
ödít
);

720 #i‚de‡
OPENSSL_NO_STDIO


721 
BIO_dump_Â
(
FILE
 *
Â
, c⁄° *
s
, 
Àn
);

722 
BIO_dump_ödít_Â
(
FILE
 *
Â
, c⁄° *
s
, 
Àn
, 
ödít
);

724 
BIO_hex_°rög
(
BIO
 *
out
, 
ödít
, 
width
, c⁄° *
d©a
,

725 
d©Æí
);

727 #i‚de‡
OPENSSL_NO_SOCK


728 
BIO_ADDR
 *
BIO_ADDR_√w
();

729 
BIO_ADDR_øwmake
(
BIO_ADDR
 *
≠
, 
Ámûy
,

730 c⁄° *
whîe
, 
size_t
 
whîñí
, 
p‹t
);

731 
BIO_ADDR_‰ì
(
BIO_ADDR
 *);

732 
BIO_ADDR_˛ór
(
BIO_ADDR
 *
≠
);

733 
BIO_ADDR_Ámûy
(c⁄° 
BIO_ADDR
 *
≠
);

734 
BIO_ADDR_øwaddªss
(c⁄° 
BIO_ADDR
 *
≠
, *
p
, 
size_t
 *
l
);

735 
BIO_ADDR_øwp‹t
(c⁄° 
BIO_ADDR
 *
≠
);

736 *
BIO_ADDR_ho°«me_°rög
(c⁄° 
BIO_ADDR
 *
≠
, 
numîic
);

737 *
BIO_ADDR_£rvi˚_°rög
(c⁄° 
BIO_ADDR
 *
≠
, 
numîic
);

738 *
BIO_ADDR_∑th_°rög
(c⁄° 
BIO_ADDR
 *
≠
);

740 c⁄° 
BIO_ADDRINFO
 *
BIO_ADDRINFO_√xt
(c⁄° BIO_ADDRINFO *
bai
);

741 
BIO_ADDRINFO_Ámûy
(c⁄° 
BIO_ADDRINFO
 *
bai
);

742 
BIO_ADDRINFO_sockty≥
(c⁄° 
BIO_ADDRINFO
 *
bai
);

743 
BIO_ADDRINFO_¥Ÿocﬁ
(c⁄° 
BIO_ADDRINFO
 *
bai
);

744 c⁄° 
BIO_ADDR
 *
BIO_ADDRINFO_addªss
(c⁄° 
BIO_ADDRINFO
 *
bai
);

745 
BIO_ADDRINFO_‰ì
(
BIO_ADDRINFO
 *
bai
);

747 
	eBIO_ho°£rv_¥i‹ôõs
 {

748 
BIO_PARSE_PRIO_HOST
, 
BIO_PARSE_PRIO_SERV


750 
BIO_∑r£_ho°£rv
(c⁄° *
ho°£rv
, **
ho°
, **
£rvi˚
,

751 
BIO_ho°£rv_¥i‹ôõs
 
ho°£rv_¥io
);

752 
	eBIO_lookup_ty≥
 {

753 
BIO_LOOKUP_CLIENT
, 
BIO_LOOKUP_SERVER


755 
BIO_lookup
(c⁄° *
ho°
, c⁄° *
£rvi˚
,

756 
BIO_lookup_ty≥
 
lookup_ty≥
,

757 
Ámûy
, 
sockty≥
, 
BIO_ADDRINFO
 **
ªs
);

758 
BIO_lookup_ex
(c⁄° *
ho°
, c⁄° *
£rvi˚
,

759 
lookup_ty≥
, 
Ámûy
, 
sockty≥
, 
¥Ÿocﬁ
,

760 
BIO_ADDRINFO
 **
ªs
);

761 
BIO_sock_îr‹
(
sock
);

762 
BIO_sockë_io˘l
(
fd
, 
ty≥
, *
¨g
);

763 
BIO_sockë_nbio
(
fd
, 
mode
);

764 
BIO_sock_öô
();

765 #i‚de‡
OPENSSL_NO_DEPRECATED_1_1_0


766 
	#BIO_sock_˛ónup
(Ë0Ë

	)

768 
BIO_£t_t˝_ndñay
(
sock
, 
tu∫_⁄
);

769 #i‚de‡
OPENSSL_NO_DEPRECATED_1_1_0


770 
OSSL_DEPRECATEDIN_1_1_0
 
ho°ít
 *
BIO_gëho°by«me
(c⁄° *
«me
);

771 
OSSL_DEPRECATEDIN_1_1_0
 
BIO_gë_p‹t
(c⁄° *
°r
, *
p‹t_±r
);

772 
OSSL_DEPRECATEDIN_1_1_0
 
BIO_gë_ho°_ù
(c⁄° *
°r
, *
ù
);

773 
OSSL_DEPRECATEDIN_1_1_0
 
BIO_gë_ac˚±_sockë
(*
ho°_p‹t
, 
mode
);

774 
OSSL_DEPRECATEDIN_1_1_0
 
BIO_ac˚±
(
sock
, **
ù_p‹t
);

777 
	uBIO_sock_öfo_u
 {

778 
BIO_ADDR
 *
addr
;

780 
	eBIO_sock_öfo_ty≥
 {

781 
BIO_SOCK_INFO_ADDRESS


783 
BIO_sock_öfo
(
sock
,

784 
BIO_sock_öfo_ty≥
 
ty≥
, 
BIO_sock_öfo_u
 *
öfo
);

786 
	#BIO_SOCK_REUSEADDR
 0x01

	)

787 
	#BIO_SOCK_V6_ONLY
 0x02

	)

788 
	#BIO_SOCK_KEEPALIVE
 0x04

	)

789 
	#BIO_SOCK_NONBLOCK
 0x08

	)

790 
	#BIO_SOCK_NODELAY
 0x10

	)

792 
BIO_sockë
(
domaö
, 
sockty≥
, 
¥Ÿocﬁ
, 
›ti⁄s
);

793 
BIO_c⁄√˘
(
sock
, c⁄° 
BIO_ADDR
 *
addr
, 
›ti⁄s
);

794 
BIO_böd
(
sock
, c⁄° 
BIO_ADDR
 *
addr
, 
›ti⁄s
);

795 
BIO_li°í
(
sock
, c⁄° 
BIO_ADDR
 *
addr
, 
›ti⁄s
);

796 
BIO_ac˚±_ex
(
ac˚±_sock
, 
BIO_ADDR
 *
addr
, 
›ti⁄s
);

797 
BIO_˛o£sockë
(
sock
);

799 
BIO
 *
BIO_√w_sockë
(
sock
, 
˛o£_Êag
);

800 
BIO
 *
BIO_√w_c⁄√˘
(c⁄° *
ho°_p‹t
);

801 
BIO
 *
BIO_√w_ac˚±
(c⁄° *
ho°_p‹t
);

804 
BIO
 *
BIO_√w_fd
(
fd
, 
˛o£_Êag
);

806 
BIO_√w_bio_∑ú
(
BIO
 **
bio1
, 
size_t
 
wrôebuf1
,

807 
BIO
 **
bio2
, 
size_t
 
wrôebuf2
);

814 
BIO_c›y_√xt_ªåy
(
BIO
 *
b
);

820 
	#os¶_bio__©å__
(
x
)

	)

821 #i‡
deföed
(
__GNUC__
Ë&& deföed(
__STDC_VERSION__
) \

822 && !
deföed
(
__APPLE__
)

827 #i‡
__STDC_VERSION__
 >= 199901L

828 #unde‡
os¶_bio__©å__


829 
	#os¶_bio__©å__
 
__©åibuã__


	)

830 #i‡
__GNUC__
*10 + 
__GNUC_MINOR__
 >= 44

831 
	#os¶_bio__¥ötf__
 
__gnu_¥ötf__


	)

833 
	#os¶_bio__¥ötf__
 
__¥ötf__


	)

837 
BIO_¥ötf
(
BIO
 *
bio
, c⁄° *
f‹m©
, ...)

838 
os¶_bio__©å__
((
__f‹m©__
(
os¶_bio__¥ötf__
, 2, 3)));

839 
BIO_v¥ötf
(
BIO
 *
bio
, c⁄° *
f‹m©
, 
va_li°
 
¨gs
)

840 
os¶_bio__©å__
((
__f‹m©__
(
os¶_bio__¥ötf__
, 2, 0)));

841 
BIO_¢¥ötf
(*
buf
, 
size_t
 
n
, c⁄° *
f‹m©
, ...)

842 
os¶_bio__©å__
((
__f‹m©__
(
os¶_bio__¥ötf__
, 3, 4)));

843 
BIO_v¢¥ötf
(*
buf
, 
size_t
 
n
, c⁄° *
f‹m©
, 
va_li°
 
¨gs
)

844 
os¶_bio__©å__
((
__f‹m©__
(
os¶_bio__¥ötf__
, 3, 0)));

845 #unde‡
os¶_bio__©å__


846 #unde‡
os¶_bio__¥ötf__


849 
BIO_METHOD
 *
BIO_mëh_√w
(
ty≥
, c⁄° *
«me
);

850 
BIO_mëh_‰ì
(
BIO_METHOD
 *
biom
);

851 (*
BIO_mëh_gë_wrôe
(c⁄° 
BIO_METHOD
 *
biom
)Ë(
BIO
 *, const *, );

852 (*
BIO_mëh_gë_wrôe_ex
(c⁄° 
BIO_METHOD
 *
biom
)Ë(
BIO
 *, c⁄° *, 
size_t
,

853 
size_t
 *);

854 
BIO_mëh_£t_wrôe
(
BIO_METHOD
 *
biom
,

855 (*
wrôe
Ë(
BIO
 *, const *, ));

856 
BIO_mëh_£t_wrôe_ex
(
BIO_METHOD
 *
biom
,

857 (*
bwrôe
Ë(
BIO
 *, c⁄° *, 
size_t
, size_t *));

858 (*
BIO_mëh_gë_ªad
(c⁄° 
BIO_METHOD
 *
biom
)Ë(
BIO
 *, *, );

859 (*
BIO_mëh_gë_ªad_ex
(c⁄° 
BIO_METHOD
 *
biom
)Ë(
BIO
 *, *, 
size_t
, size_t *);

860 
BIO_mëh_£t_ªad
(
BIO_METHOD
 *
biom
,

861 (*
ªad
Ë(
BIO
 *, *, ));

862 
BIO_mëh_£t_ªad_ex
(
BIO_METHOD
 *
biom
,

863 (*
bªad
Ë(
BIO
 *, *, 
size_t
, size_t *));

864 (*
BIO_mëh_gë_puts
(c⁄° 
BIO_METHOD
 *
biom
)Ë(
BIO
 *, const *);

865 
BIO_mëh_£t_puts
(
BIO_METHOD
 *
biom
,

866 (*
puts
Ë(
BIO
 *, const *));

867 (*
BIO_mëh_gë_gës
(c⁄° 
BIO_METHOD
 *
biom
)Ë(
BIO
 *, *, );

868 
BIO_mëh_£t_gës
(
BIO_METHOD
 *
biom
,

869 (*
gës
Ë(
BIO
 *, *, ));

870 (*
BIO_mëh_gë_˘æ
(c⁄° 
BIO_METHOD
 *
biom
)Ë(
BIO
 *, , , *);

871 
BIO_mëh_£t_˘æ
(
BIO_METHOD
 *
biom
,

872 (*
˘æ
Ë(
BIO
 *, , , *));

873 (*
BIO_mëh_gë_¸óã
(c⁄° 
BIO_METHOD
 *
bi⁄
)Ë(
BIO
 *);

874 
BIO_mëh_£t_¸óã
(
BIO_METHOD
 *
biom
, (*
¸óã
Ë(
BIO
 *));

875 (*
BIO_mëh_gë_de°roy
(c⁄° 
BIO_METHOD
 *
biom
)Ë(
BIO
 *);

876 
BIO_mëh_£t_de°roy
(
BIO_METHOD
 *
biom
, (*
de°roy
Ë(
BIO
 *));

877 (*
BIO_mëh_gë_ˇŒback_˘æ
(c⁄° 
BIO_METHOD
 *
biom
))

878 (
BIO
 *, , 
BIO_öfo_cb
 *);

879 
BIO_mëh_£t_ˇŒback_˘æ
(
BIO_METHOD
 *
biom
,

880 (*
ˇŒback_˘æ
Ë(
BIO
 *, ,

881 
BIO_öfo_cb
 *));

883 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/bnerr.h

11 #i‚de‡
OPENSSL_BNERR_H


12 
	#OPENSSL_BNERR_H


	)

13 #¥agm®
⁄˚


15 
	~<›ís¶/›ís¶c⁄f.h
>

16 
	~<›ís¶/symhacks.h
>

17 
	~<›ís¶/¸y±€º_Àgacy.h
>

24 
	#BN_R_ARG2_LT_ARG3
 100

	)

25 
	#BN_R_BAD_RECIPROCAL
 101

	)

26 
	#BN_R_BIGNUM_TOO_LONG
 114

	)

27 
	#BN_R_BITS_TOO_SMALL
 118

	)

28 
	#BN_R_CALLED_WITH_EVEN_MODULUS
 102

	)

29 
	#BN_R_DIV_BY_ZERO
 103

	)

30 
	#BN_R_ENCODING_ERROR
 104

	)

31 
	#BN_R_EXPAND_ON_STATIC_BIGNUM_DATA
 105

	)

32 
	#BN_R_INPUT_NOT_REDUCED
 110

	)

33 
	#BN_R_INVALID_LENGTH
 106

	)

34 
	#BN_R_INVALID_RANGE
 115

	)

35 
	#BN_R_INVALID_SHIFT
 119

	)

36 
	#BN_R_NOT_A_SQUARE
 111

	)

37 
	#BN_R_NOT_INITIALIZED
 107

	)

38 
	#BN_R_NO_INVERSE
 108

	)

39 
	#BN_R_NO_SOLUTION
 116

	)

40 
	#BN_R_NO_SUITABLE_DIGEST
 120

	)

41 
	#BN_R_PRIVATE_KEY_TOO_LARGE
 117

	)

42 
	#BN_R_P_IS_NOT_PRIME
 112

	)

43 
	#BN_R_TOO_MANY_ITERATIONS
 113

	)

44 
	#BN_R_TOO_MANY_TEMPORARY_VARIABLES
 109

	)

	@/usr/include/openssl/buffer.h

10 #i‚de‡
OPENSSL_BUFFER_H


11 
	#OPENSSL_BUFFER_H


	)

12 #¥agm®
⁄˚


14 
	~<›ís¶/ma¸os.h
>

15 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


16 
	#HEADER_BUFFER_H


	)

19 
	~<›ís¶/ty≥s.h
>

20 #i‚de‡
OPENSSL_CRYPTO_H


21 
	~<›ís¶/¸y±o.h
>

23 
	~<›ís¶/buf„ªº.h
>

26 #ifde‡ 
__˝lu•lus


30 
	~<°ddef.h
>

31 
	~<sys/ty≥s.h
>

33 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


34 
	#BUF_°rdup
(
s
Ë
	`OPENSSL_°rdup
(s)

	)

35 
	#BUF_°∫dup
(
s
, 
size
Ë
	`OPENSSL_°∫dup
(s, size)

	)

36 
	#BUF_memdup
(
d©a
, 
size
Ë
	`OPENSSL_memdup
(d©a, size)

	)

37 
	#BUF_°æ˝y
(
d°
, 
§c
, 
size
Ë
	`OPENSSL_°æ˝y
(d°, src, size)

	)

38 
	#BUF_°æˇt
(
d°
, 
§c
, 
size
Ë
	`OPENSSL_°æˇt
(d°, src, size)

	)

39 
	#BUF_°∫Àn
(
°r
, 
maxÀn
Ë
	`OPENSSL_°∫Àn
(°r, maxÀn)

	)

42 
	sbuf_mem_°
 {

43 
size_t
 
Àngth
;

44 *
d©a
;

45 
size_t
 
max
;

46 
Êags
;

49 
	#BUF_MEM_FLAG_SECURE
 0x01

	)

51 
BUF_MEM
 *
BUF_MEM_√w
();

52 
BUF_MEM
 *
BUF_MEM_√w_ex
(
Êags
);

53 
BUF_MEM_‰ì
(
BUF_MEM
 *
a
);

54 
size_t
 
BUF_MEM_grow
(
BUF_MEM
 *
°r
, size_à
Àn
);

55 
size_t
 
BUF_MEM_grow_˛ón
(
BUF_MEM
 *
°r
, size_à
Àn
);

56 
BUF_ªvî£
(*
out
, c⁄° *
ö
, 
size_t
 
siz
);

59 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/comp.h

10 #i‚de‡
OPENSSL_COMP_H


11 
	#OPENSSL_COMP_H


	)

12 #¥agm®
⁄˚


14 
	~<›ís¶/ma¸os.h
>

15 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


16 
	#HEADER_COMP_H


	)

19 
	~<›ís¶/›ís¶c⁄f.h
>

21 #i‚de‡
OPENSSL_NO_COMP


22 
	~<›ís¶/¸y±o.h
>

23 
	~<›ís¶/com≥º.h
>

24 #ifde‡ 
__˝lu•lus


30 
COMP_CTX
 *
COMP_CTX_√w
(
COMP_METHOD
 *
mëh
);

31 c⁄° 
COMP_METHOD
 *
COMP_CTX_gë_mëhod
(c⁄° 
COMP_CTX
 *
˘x
);

32 
COMP_CTX_gë_ty≥
(c⁄° 
COMP_CTX
* 
comp
);

33 
COMP_gë_ty≥
(c⁄° 
COMP_METHOD
 *
mëh
);

34 c⁄° *
COMP_gë_«me
(c⁄° 
COMP_METHOD
 *
mëh
);

35 
COMP_CTX_‰ì
(
COMP_CTX
 *
˘x
);

37 
COMP_com¥ess_block
(
COMP_CTX
 *
˘x
, *
out
, 
ﬁí
,

38 *
ö
, 
ûí
);

39 
COMP_ex∑nd_block
(
COMP_CTX
 *
˘x
, *
out
, 
ﬁí
,

40 *
ö
, 
ûí
);

42 
COMP_METHOD
 *
COMP_zlib
();

44 #i‚de‡
OPENSSL_NO_DEPRECATED_1_1_0


45 
	#COMP_zlib_˛ónup
(Ë0Ë

	)

48 #ifde‡
OPENSSL_BIO_H


49 #ifde‡
ZLIB


50 c⁄° 
BIO_METHOD
 *
BIO_f_zlib
();

55 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/conf.h

15 #i‚de‡ 
OPENSSL_CONF_H


16 
	#OPENSSL_CONF_H


	)

17 #¥agm®
⁄˚


19 
	~<›ís¶/ma¸os.h
>

20 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


21 
	#HEADER_CONF_H


	)

24 
	~<›ís¶/bio.h
>

25 
	~<›ís¶/lhash.h
>

26 
	~<›ís¶/ß„°ack.h
>

27 
	~<›ís¶/e_os2.h
>

28 
	~<›ís¶/ty≥s.h
>

29 
	~<›ís¶/c⁄„º.h
>

31 #ifde‡ 
__˝lu•lus


36 *
£˘i⁄
;

37 *
«me
;

38 *
vÆue
;

39 } 
	tCONF_VALUE
;

41 
SKM_DEFINE_STACK_OF_INTERNAL
(
CONF_VALUE
, CONF_VALUE, CONF_VALUE)

42 
	#sk_CONF_VALUE_num
(
sk
Ë
	`OPENSSL_sk_num
(
	`os¶_check_c⁄°_CONF_VALUE_sk_ty≥
(sk))

	)

43 
	#sk_CONF_VALUE_vÆue
(
sk
, 
idx
Ë((
CONF_VALUE
 *)
	`OPENSSL_sk_vÆue
(
	`os¶_check_c⁄°_CONF_VALUE_sk_ty≥
(sk), (idx)))

	)

44 
	#sk_CONF_VALUE_√w
(
cmp
Ë((
	`STACK_OF
(
CONF_VALUE
Ë*)
	`OPENSSL_sk_√w
(
	`os¶_check_CONF_VALUE_compfunc_ty≥
(cmp)))

	)

45 
	#sk_CONF_VALUE_√w_nuŒ
(Ë((
	`STACK_OF
(
CONF_VALUE
Ë*)
	`OPENSSL_sk_√w_nuŒ
())

	)

46 
	#sk_CONF_VALUE_√w_ª£rve
(
cmp
, 
n
Ë((
	`STACK_OF
(
CONF_VALUE
Ë*)
	`OPENSSL_sk_√w_ª£rve
(
	`os¶_check_CONF_VALUE_compfunc_ty≥
(cmp), (n)))

	)

47 
	#sk_CONF_VALUE_ª£rve
(
sk
, 
n
Ë
	`OPENSSL_sk_ª£rve
(
	`os¶_check_CONF_VALUE_sk_ty≥
(sk), (n))

	)

48 
	#sk_CONF_VALUE_‰ì
(
sk
Ë
	`OPENSSL_sk_‰ì
(
	`os¶_check_CONF_VALUE_sk_ty≥
(sk))

	)

49 
	#sk_CONF_VALUE_zîo
(
sk
Ë
	`OPENSSL_sk_zîo
(
	`os¶_check_CONF_VALUE_sk_ty≥
(sk))

	)

50 
	#sk_CONF_VALUE_dñëe
(
sk
, 
i
Ë((
CONF_VALUE
 *)
	`OPENSSL_sk_dñëe
(
	`os¶_check_CONF_VALUE_sk_ty≥
(sk), (i)))

	)

51 
	#sk_CONF_VALUE_dñëe_±r
(
sk
, 
±r
Ë((
CONF_VALUE
 *)
	`OPENSSL_sk_dñëe_±r
(
	`os¶_check_CONF_VALUE_sk_ty≥
(sk), 
	`os¶_check_CONF_VALUE_ty≥
’å)))

	)

52 
	#sk_CONF_VALUE_push
(
sk
, 
±r
Ë
	`OPENSSL_sk_push
(
	`os¶_check_CONF_VALUE_sk_ty≥
(sk), 
	`os¶_check_CONF_VALUE_ty≥
’å))

	)

53 
	#sk_CONF_VALUE_unshi·
(
sk
, 
±r
Ë
	`OPENSSL_sk_unshi·
(
	`os¶_check_CONF_VALUE_sk_ty≥
(sk), 
	`os¶_check_CONF_VALUE_ty≥
’å))

	)

54 
	#sk_CONF_VALUE_p›
(
sk
Ë((
CONF_VALUE
 *)
	`OPENSSL_sk_p›
(
	`os¶_check_CONF_VALUE_sk_ty≥
(sk)))

	)

55 
	#sk_CONF_VALUE_shi·
(
sk
Ë((
CONF_VALUE
 *)
	`OPENSSL_sk_shi·
(
	`os¶_check_CONF_VALUE_sk_ty≥
(sk)))

	)

56 
	#sk_CONF_VALUE_p›_‰ì
(
sk
, 
‰ìfunc
Ë
	`OPENSSL_sk_p›_‰ì
(
	`os¶_check_CONF_VALUE_sk_ty≥
(sk),
	`os¶_check_CONF_VALUE_‰ìfunc_ty≥
(‰ìfunc))

	)

57 
	#sk_CONF_VALUE_ö£π
(
sk
, 
±r
, 
idx
Ë
	`OPENSSL_sk_ö£π
(
	`os¶_check_CONF_VALUE_sk_ty≥
(sk), 
	`os¶_check_CONF_VALUE_ty≥
’å), (idx))

	)

58 
	#sk_CONF_VALUE_£t
(
sk
, 
idx
, 
±r
Ë((
CONF_VALUE
 *)
	`OPENSSL_sk_£t
(
	`os¶_check_CONF_VALUE_sk_ty≥
(sk), (idx), 
	`os¶_check_CONF_VALUE_ty≥
’å)))

	)

59 
	#sk_CONF_VALUE_föd
(
sk
, 
±r
Ë
	`OPENSSL_sk_föd
(
	`os¶_check_CONF_VALUE_sk_ty≥
(sk), 
	`os¶_check_CONF_VALUE_ty≥
’å))

	)

60 
	#sk_CONF_VALUE_föd_ex
(
sk
, 
±r
Ë
	`OPENSSL_sk_föd_ex
(
	`os¶_check_CONF_VALUE_sk_ty≥
(sk), 
	`os¶_check_CONF_VALUE_ty≥
’å))

	)

61 
	#sk_CONF_VALUE_föd_Æl
(
sk
, 
±r
, 
≤um
Ë
	`OPENSSL_sk_föd_Æl
(
	`os¶_check_CONF_VALUE_sk_ty≥
(sk), 
	`os¶_check_CONF_VALUE_ty≥
’å),Önum)

	)

62 
	#sk_CONF_VALUE_s‹t
(
sk
Ë
	`OPENSSL_sk_s‹t
(
	`os¶_check_CONF_VALUE_sk_ty≥
(sk))

	)

63 
	#sk_CONF_VALUE_is_s‹ãd
(
sk
Ë
	`OPENSSL_sk_is_s‹ãd
(
	`os¶_check_c⁄°_CONF_VALUE_sk_ty≥
(sk))

	)

64 
	#sk_CONF_VALUE_dup
(
sk
Ë((
	`STACK_OF
(
CONF_VALUE
Ë*)
	`OPENSSL_sk_dup
(
	`os¶_check_c⁄°_CONF_VALUE_sk_ty≥
(sk)))

	)

65 
	#sk_CONF_VALUE_dìp_c›y
(
sk
, 
c›yfunc
, 
‰ìfunc
Ë((
	`STACK_OF
(
CONF_VALUE
Ë*)
	`OPENSSL_sk_dìp_c›y
(
	`os¶_check_c⁄°_CONF_VALUE_sk_ty≥
(sk), 
	`os¶_check_CONF_VALUE_c›yfunc_ty≥
(c›yfunc), 
	`os¶_check_CONF_VALUE_‰ìfunc_ty≥
(‰ìfunc)))

	)

66 
	#sk_CONF_VALUE_£t_cmp_func
(
sk
, 
cmp
Ë((
sk_CONF_VALUE_compfunc
)
	`OPENSSL_sk_£t_cmp_func
(
	`os¶_check_CONF_VALUE_sk_ty≥
(sk), 
	`os¶_check_CONF_VALUE_compfunc_ty≥
(cmp)))

	)

67 
DEFINE_LHASH_OF_INTERNAL
(
CONF_VALUE
);

68 
	#lh_CONF_VALUE_√w
(
h‚
, 
cmp
Ë((
	`LHASH_OF
(
CONF_VALUE
Ë*)
	`OPENSSL_LH_√w
(
	`os¶_check_CONF_VALUE_lh_hashfunc_ty≥
(h‚), 
	`os¶_check_CONF_VALUE_lh_compfunc_ty≥
(cmp)))

	)

69 
	#lh_CONF_VALUE_‰ì
(
lh
Ë
	`OPENSSL_LH_‰ì
(
	`os¶_check_CONF_VALUE_lh_ty≥
÷h))

	)

70 
	#lh_CONF_VALUE_Êush
(
lh
Ë
	`OPENSSL_LH_Êush
(
	`os¶_check_CONF_VALUE_lh_ty≥
÷h))

	)

71 
	#lh_CONF_VALUE_ö£π
(
lh
, 
±r
Ë((
CONF_VALUE
 *)
	`OPENSSL_LH_ö£π
(
	`os¶_check_CONF_VALUE_lh_ty≥
÷h), 
	`os¶_check_CONF_VALUE_lh_∂aö_ty≥
’å)))

	)

72 
	#lh_CONF_VALUE_dñëe
(
lh
, 
±r
Ë((
CONF_VALUE
 *)
	`OPENSSL_LH_dñëe
(
	`os¶_check_CONF_VALUE_lh_ty≥
÷h), 
	`os¶_check_c⁄°_CONF_VALUE_lh_∂aö_ty≥
’å)))

	)

73 
	#lh_CONF_VALUE_ªåõve
(
lh
, 
±r
Ë((
CONF_VALUE
 *)
	`OPENSSL_LH_ªåõve
(
	`os¶_check_CONF_VALUE_lh_ty≥
÷h), 
	`os¶_check_c⁄°_CONF_VALUE_lh_∂aö_ty≥
’å)))

	)

74 
	#lh_CONF_VALUE_îr‹
(
lh
Ë
	`OPENSSL_LH_îr‹
(
	`os¶_check_CONF_VALUE_lh_ty≥
÷h))

	)

75 
	#lh_CONF_VALUE_num_ôems
(
lh
Ë
	`OPENSSL_LH_num_ôems
(
	`os¶_check_CONF_VALUE_lh_ty≥
÷h))

	)

76 
	#lh_CONF_VALUE_node_°©s_bio
(
lh
, 
out
Ë
	`OPENSSL_LH_node_°©s_bio
(
	`os¶_check_c⁄°_CONF_VALUE_lh_ty≥
÷h), out)

	)

77 
	#lh_CONF_VALUE_node_ußge_°©s_bio
(
lh
, 
out
Ë
	`OPENSSL_LH_node_ußge_°©s_bio
(
	`os¶_check_c⁄°_CONF_VALUE_lh_ty≥
÷h), out)

	)

78 
	#lh_CONF_VALUE_°©s_bio
(
lh
, 
out
Ë
	`OPENSSL_LH_°©s_bio
(
	`os¶_check_c⁄°_CONF_VALUE_lh_ty≥
÷h), out)

	)

79 
	#lh_CONF_VALUE_gë_down_lﬂd
(
lh
Ë
	`OPENSSL_LH_gë_down_lﬂd
(
	`os¶_check_CONF_VALUE_lh_ty≥
÷h))

	)

80 
	#lh_CONF_VALUE_£t_down_lﬂd
(
lh
, 
dl
Ë
	`OPENSSL_LH_£t_down_lﬂd
(
	`os¶_check_CONF_VALUE_lh_ty≥
÷h), dl)

	)

81 
	#lh_CONF_VALUE_dﬂŒ
(
lh
, 
d‚
Ë
	`OPENSSL_LH_dﬂŒ
(
	`os¶_check_CONF_VALUE_lh_ty≥
÷h), 
	`os¶_check_CONF_VALUE_lh_dﬂŒfunc_ty≥
(d‚))

	)

84 
c⁄f_°
;

85 
c⁄f_mëhod_°
;

86 
c⁄f_mëhod_°
 
	tCONF_METHOD
;

88 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


89 
	~<›ís¶/c⁄·y≥s.h
>

93 
c⁄f_imoduÀ_°
 
	tCONF_IMODULE
;

94 
c⁄f_moduÀ_°
 
	tCONF_MODULE
;

96 
STACK_OF
(
CONF_MODULE
);

97 
STACK_OF
(
CONF_IMODULE
);

100 
	tc⁄f_öô_func
 (
	tCONF_IMODULE
 *
	tmd
, c⁄° 
	tCONF
 *
	t˙f
);

101 
	tc⁄f_föish_func
 (
	tCONF_IMODULE
 *
	tmd
);

103 
	#CONF_MFLAGS_IGNORE_ERRORS
 0x1

	)

104 
	#CONF_MFLAGS_IGNORE_RETURN_CODES
 0x2

	)

105 
	#CONF_MFLAGS_SILENT
 0x4

	)

106 
	#CONF_MFLAGS_NO_DSO
 0x8

	)

107 
	#CONF_MFLAGS_IGNORE_MISSING_FILE
 0x10

	)

108 
	#CONF_MFLAGS_DEFAULT_SECTION
 0x20

	)

110 
CONF_£t_deÁu…_mëhod
(
CONF_METHOD
 *
mëh
);

111 
CONF_£t_nc⁄f
(
CONF
 *
c⁄f
, 
LHASH_OF
(
CONF_VALUE
Ë*
hash
);

112 
LHASH_OF
(
CONF_VALUE
Ë*
CONF_lﬂd
(LHASH_OF(CONF_VALUEË*
c⁄f
, c⁄° *
fûe
,

113 *
ñöe
);

114 #i‚de‡
OPENSSL_NO_STDIO


115 
LHASH_OF
(
CONF_VALUE
Ë*
CONF_lﬂd_Â
(LHASH_OF(CONF_VALUEË*
c⁄f
, 
FILE
 *
Â
,

116 *
ñöe
);

118 
LHASH_OF
(
CONF_VALUE
Ë*
CONF_lﬂd_bio
(LHASH_OF(CONF_VALUEË*
c⁄f
, 
BIO
 *
bp
,

119 *
ñöe
);

120 
STACK_OF
(
CONF_VALUE
Ë*
CONF_gë_£˘i⁄
(
LHASH_OF
(CONF_VALUEË*
c⁄f
,

121 c⁄° *
£˘i⁄
);

122 *
CONF_gë_°rög
(
LHASH_OF
(
CONF_VALUE
Ë*
c⁄f
, c⁄° *
group
,

123 c⁄° *
«me
);

124 
CONF_gë_numbî
(
LHASH_OF
(
CONF_VALUE
Ë*
c⁄f
, c⁄° *
group
,

125 c⁄° *
«me
);

126 
CONF_‰ì
(
LHASH_OF
(
CONF_VALUE
Ë*
c⁄f
);

127 #i‚de‡
OPENSSL_NO_STDIO


128 
CONF_dump_Â
(
LHASH_OF
(
CONF_VALUE
Ë*
c⁄f
, 
FILE
 *
out
);

130 
CONF_dump_bio
(
LHASH_OF
(
CONF_VALUE
Ë*
c⁄f
, 
BIO
 *
out
);

131 #i‚de‡
OPENSSL_NO_DEPRECATED_1_1_0


132 
OSSL_DEPRECATEDIN_1_1_0
 
OPENSSL_c⁄fig
(c⁄° *
c⁄fig_«me
);

135 #i‚de‡
OPENSSL_NO_DEPRECATED_1_1_0


136 
	#OPENSSL_no_c⁄fig
() \

137 
	`OPENSSL_öô_¸y±o
(
OPENSSL_INIT_NO_LOAD_CONFIG
, 
NULL
)

	)

145 
CONF
 *
NCONF_√w_ex
(
OSSL_LIB_CTX
 *
lib˘x
, 
CONF_METHOD
 *
mëh
);

146 
OSSL_LIB_CTX
 *
NCONF_gë0_lib˘x
(c⁄° 
CONF
 *
c⁄f
);

147 
CONF
 *
NCONF_√w
(
CONF_METHOD
 *
mëh
);

148 
CONF_METHOD
 *
NCONF_deÁu…
();

149 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


150 
OSSL_DEPRECATEDIN_3_0
 
CONF_METHOD
 *
NCONF_WIN32
();

152 
NCONF_‰ì
(
CONF
 *
c⁄f
);

153 
NCONF_‰ì_d©a
(
CONF
 *
c⁄f
);

155 
NCONF_lﬂd
(
CONF
 *
c⁄f
, c⁄° *
fûe
, *
ñöe
);

156 #i‚de‡
OPENSSL_NO_STDIO


157 
NCONF_lﬂd_Â
(
CONF
 *
c⁄f
, 
FILE
 *
Â
, *
ñöe
);

159 
NCONF_lﬂd_bio
(
CONF
 *
c⁄f
, 
BIO
 *
bp
, *
ñöe
);

160 
STACK_OF
(
OPENSSL_CSTRING
Ë*
NCONF_gë_£˘i⁄_«mes
(c⁄° 
CONF
 *
c⁄f
);

161 
STACK_OF
(
CONF_VALUE
Ë*
NCONF_gë_£˘i⁄
(c⁄° 
CONF
 *
c⁄f
,

162 c⁄° *
£˘i⁄
);

163 *
NCONF_gë_°rög
(c⁄° 
CONF
 *
c⁄f
, c⁄° *
group
, c⁄° *
«me
);

164 
NCONF_gë_numbî_e
(c⁄° 
CONF
 *
c⁄f
, c⁄° *
group
, c⁄° *
«me
,

165 *
ªsu…
);

166 #i‚de‡
OPENSSL_NO_STDIO


167 
NCONF_dump_Â
(c⁄° 
CONF
 *
c⁄f
, 
FILE
 *
out
);

169 
NCONF_dump_bio
(c⁄° 
CONF
 *
c⁄f
, 
BIO
 *
out
);

171 
	#NCONF_gë_numbî
(
c
,
g
,
n
,
r
Ë
	`NCONF_gë_numbî_e
(c,g,n,r)

	)

175 
CONF_moduÀs_lﬂd
(c⁄° 
CONF
 *
˙f
, c⁄° *
≠≤ame
,

176 
Êags
);

177 
CONF_moduÀs_lﬂd_fûe_ex
(
OSSL_LIB_CTX
 *
lib˘x
, c⁄° *
fûíame
,

178 c⁄° *
≠≤ame
, 
Êags
);

179 
CONF_moduÀs_lﬂd_fûe
(c⁄° *
fûíame
, c⁄° *
≠≤ame
,

180 
Êags
);

181 
CONF_moduÀs_u∆ﬂd
(
Æl
);

182 
CONF_moduÀs_föish
();

183 #i‚de‡
OPENSSL_NO_DEPRECATED_1_1_0


184 
	#CONF_moduÀs_‰ì
(Ë0Ë

	)

186 
CONF_moduÀ_add
(c⁄° *
«me
, 
c⁄f_öô_func
 *
ifunc
,

187 
c⁄f_föish_func
 *
ffunc
);

189 c⁄° *
CONF_imoduÀ_gë_«me
(c⁄° 
CONF_IMODULE
 *
md
);

190 c⁄° *
CONF_imoduÀ_gë_vÆue
(c⁄° 
CONF_IMODULE
 *
md
);

191 *
CONF_imoduÀ_gë_u§_d©a
(c⁄° 
CONF_IMODULE
 *
md
);

192 
CONF_imoduÀ_£t_u§_d©a
(
CONF_IMODULE
 *
md
, *
u§_d©a
);

193 
CONF_MODULE
 *
CONF_imoduÀ_gë_moduÀ
(c⁄° 
CONF_IMODULE
 *
md
);

194 
CONF_imoduÀ_gë_Êags
(c⁄° 
CONF_IMODULE
 *
md
);

195 
CONF_imoduÀ_£t_Êags
(
CONF_IMODULE
 *
md
, 
Êags
);

196 *
CONF_moduÀ_gë_u§_d©a
(
CONF_MODULE
 *
pmod
);

197 
CONF_moduÀ_£t_u§_d©a
(
CONF_MODULE
 *
pmod
, *
u§_d©a
);

199 *
CONF_gë1_deÁu…_c⁄fig_fûe
();

201 
CONF_∑r£_li°
(c⁄° *
li°
, 
£p
, 
no•c
,

202 (*
li°_cb
Ë(c⁄° *
ñem
, 
Àn
, *
u§
),

203 *
¨g
);

205 
OPENSSL_lﬂd_buûtö_moduÀs
();

208 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/crypto.h

16 #i‚de‡
OPENSSL_CRYPTO_H


17 
	#OPENSSL_CRYPTO_H


	)

18 #¥agm®
⁄˚


20 
	~<›ís¶/ma¸os.h
>

21 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


22 
	#HEADER_CRYPTO_H


	)

25 
	~<°dlib.h
>

26 
	~<time.h
>

28 
	~<›ís¶/e_os2.h
>

30 #i‚de‡
OPENSSL_NO_STDIO


31 
	~<°dio.h
>

34 
	~<›ís¶/ß„°ack.h
>

35 
	~<›ís¶/›ís¶v.h
>

36 
	~<›ís¶/ty≥s.h
>

37 
	~<›ís¶/›ís¶c⁄f.h
>

38 
	~<›ís¶/¸y±€º.h
>

39 
	~<›ís¶/c‹e.h
>

41 #ifde‡
CHARSET_EBCDIC


42 
	~<›ís¶/ebcdic.h
>

49 
	~<›ís¶/symhacks.h
>

51 #i‚de‡
OPENSSL_NO_DEPRECATED_1_1_0


52 
	~<›ís¶/›ís¶v.h
>

55 #ifde‡ 
__˝lu•lus


59 #i‚de‡
OPENSSL_NO_DEPRECATED_1_1_0


60 
	#SSLóy
 
O≥nSSL_vîsi⁄_num


	)

61 
	#SSLóy_vîsi⁄
 
O≥nSSL_vîsi⁄


	)

62 
	#SSLEAY_VERSION_NUMBER
 
OPENSSL_VERSION_NUMBER


	)

63 
	#SSLEAY_VERSION
 
OPENSSL_VERSION


	)

64 
	#SSLEAY_CFLAGS
 
OPENSSL_CFLAGS


	)

65 
	#SSLEAY_BUILT_ON
 
OPENSSL_BUILT_ON


	)

66 
	#SSLEAY_PLATFORM
 
OPENSSL_PLATFORM


	)

67 
	#SSLEAY_DIR
 
OPENSSL_DIR


	)

74 
dummy
;

75 } 
	tCRYPTO_dy∆ock
;

79 
	tCRYPTO_RWLOCK
;

81 
CRYPTO_RWLOCK
 *
CRYPTO_THREAD_lock_√w
();

82 
__owur
 
CRYPTO_THREAD_ªad_lock
(
CRYPTO_RWLOCK
 *
lock
);

83 
__owur
 
CRYPTO_THREAD_wrôe_lock
(
CRYPTO_RWLOCK
 *
lock
);

84 
CRYPTO_THREAD_u∆ock
(
CRYPTO_RWLOCK
 *
lock
);

85 
CRYPTO_THREAD_lock_‰ì
(
CRYPTO_RWLOCK
 *
lock
);

87 
CRYPTO_©omic_add
(*
vÆ
, 
amou¡
, *
ªt
, 
CRYPTO_RWLOCK
 *
lock
);

88 
CRYPTO_©omic_‹
(
uöt64_t
 *
vÆ
, uöt64_à
›
, uöt64_à*
ªt
,

89 
CRYPTO_RWLOCK
 *
lock
);

90 
CRYPTO_©omic_lﬂd
(
uöt64_t
 *
vÆ
, uöt64_à*
ªt
, 
CRYPTO_RWLOCK
 *
lock
);

93 
	#OPENSSL_mÆloc_öô
(Ë0Ë

	)

95 
	#OPENSSL_mÆloc
(
num
) \

96 
	`CRYPTO_mÆloc
(
num
, 
OPENSSL_FILE
, 
OPENSSL_LINE
)

	)

97 
	#OPENSSL_zÆloc
(
num
) \

98 
	`CRYPTO_zÆloc
(
num
, 
OPENSSL_FILE
, 
OPENSSL_LINE
)

	)

99 
	#OPENSSL_ªÆloc
(
addr
, 
num
) \

100 
	`CRYPTO_ªÆloc
(
addr
, 
num
, 
OPENSSL_FILE
, 
OPENSSL_LINE
)

	)

101 
	#OPENSSL_˛ór_ªÆloc
(
addr
, 
ﬁd_num
, 
num
) \

102 
	`CRYPTO_˛ór_ªÆloc
(
addr
, 
ﬁd_num
, 
num
, 
OPENSSL_FILE
, 
OPENSSL_LINE
)

	)

103 
	#OPENSSL_˛ór_‰ì
(
addr
, 
num
) \

104 
	`CRYPTO_˛ór_‰ì
(
addr
, 
num
, 
OPENSSL_FILE
, 
OPENSSL_LINE
)

	)

105 
	#OPENSSL_‰ì
(
addr
) \

106 
	`CRYPTO_‰ì
(
addr
, 
OPENSSL_FILE
, 
OPENSSL_LINE
)

	)

107 
	#OPENSSL_memdup
(
°r
, 
s
) \

108 
	`CRYPTO_memdup
((
°r
), 
s
, 
OPENSSL_FILE
, 
OPENSSL_LINE
)

	)

109 
	#OPENSSL_°rdup
(
°r
) \

110 
	`CRYPTO_°rdup
(
°r
, 
OPENSSL_FILE
, 
OPENSSL_LINE
)

	)

111 
	#OPENSSL_°∫dup
(
°r
, 
n
) \

112 
	`CRYPTO_°∫dup
(
°r
, 
n
, 
OPENSSL_FILE
, 
OPENSSL_LINE
)

	)

113 
	#OPENSSL_£cuª_mÆloc
(
num
) \

114 
	`CRYPTO_£cuª_mÆloc
(
num
, 
OPENSSL_FILE
, 
OPENSSL_LINE
)

	)

115 
	#OPENSSL_£cuª_zÆloc
(
num
) \

116 
	`CRYPTO_£cuª_zÆloc
(
num
, 
OPENSSL_FILE
, 
OPENSSL_LINE
)

	)

117 
	#OPENSSL_£cuª_‰ì
(
addr
) \

118 
	`CRYPTO_£cuª_‰ì
(
addr
, 
OPENSSL_FILE
, 
OPENSSL_LINE
)

	)

119 
	#OPENSSL_£cuª_˛ór_‰ì
(
addr
, 
num
) \

120 
	`CRYPTO_£cuª_˛ór_‰ì
(
addr
, 
num
, 
OPENSSL_FILE
, 
OPENSSL_LINE
)

	)

121 
	#OPENSSL_£cuª_a˘uÆ_size
(
±r
) \

122 
	`CRYPTO_£cuª_a˘uÆ_size
(
±r
)

	)

124 
size_t
 
OPENSSL_°æ˝y
(*
d°
, c⁄° *
§c
, size_à
siz
);

125 
size_t
 
OPENSSL_°æˇt
(*
d°
, c⁄° *
§c
, size_à
siz
);

126 
size_t
 
OPENSSL_°∫Àn
(c⁄° *
°r
, size_à
maxÀn
);

127 
OPENSSL_buf2hex°r_ex
(*
°r
, 
size_t
 
°r_n
, size_à*
°æígth
,

128 c⁄° *
buf
, 
size_t
 
buÊí
,

129 c⁄° 
£p
);

130 *
OPENSSL_buf2hex°r
(c⁄° *
buf
, 
buÊí
);

131 
OPENSSL_hex°r2buf_ex
(*
buf
, 
size_t
 
buf_n
, size_à*
buÊí
,

132 c⁄° *
°r
, c⁄° 
£p
);

133 *
OPENSSL_hex°r2buf
(c⁄° *
°r
, *
buÊí
);

134 
OPENSSL_hexch¨2öt
(
c
);

135 
OPENSSL_°rˇ£cmp
(c⁄° *
s1
, c⁄° *
s2
);

136 
OPENSSL_°∫ˇ£cmp
(c⁄° *
s1
, c⁄° *
s2
, 
size_t
 
n
);

138 
	#OPENSSL_MALLOC_MAX_NELEMS
(
ty≥
Ë(((1U<<(()*8-1))-1)/—y≥))

	)

145 
OPENSSL_vîsi⁄_maj‹
();

146 
OPENSSL_vîsi⁄_mö‹
();

147 
OPENSSL_vîsi⁄_∑tch
();

148 c⁄° *
OPENSSL_vîsi⁄_¥e_ªÀa£
();

149 c⁄° *
OPENSSL_vîsi⁄_buûd_mëad©a
();

151 
O≥nSSL_vîsi⁄_num
();

152 c⁄° *
O≥nSSL_vîsi⁄
(
ty≥
);

153 
	#OPENSSL_VERSION
 0

	)

154 
	#OPENSSL_CFLAGS
 1

	)

155 
	#OPENSSL_BUILT_ON
 2

	)

156 
	#OPENSSL_PLATFORM
 3

	)

157 
	#OPENSSL_DIR
 4

	)

158 
	#OPENSSL_ENGINES_DIR
 5

	)

159 
	#OPENSSL_VERSION_STRING
 6

	)

160 
	#OPENSSL_FULL_VERSION_STRING
 7

	)

161 
	#OPENSSL_MODULES_DIR
 8

	)

162 
	#OPENSSL_CPU_INFO
 9

	)

164 c⁄° *
OPENSSL_öfo
(
ty≥
);

169 
	#OPENSSL_INFO_CONFIG_DIR
 1001

	)

170 
	#OPENSSL_INFO_ENGINES_DIR
 1002

	)

171 
	#OPENSSL_INFO_MODULES_DIR
 1003

	)

172 
	#OPENSSL_INFO_DSO_EXTENSION
 1004

	)

173 
	#OPENSSL_INFO_DIR_FILENAME_SEPARATOR
 1005

	)

174 
	#OPENSSL_INFO_LIST_SEPARATOR
 1006

	)

175 
	#OPENSSL_INFO_SEED_SOURCE
 1007

	)

176 
	#OPENSSL_INFO_CPU_SETTINGS
 1008

	)

178 
OPENSSL_is£tugid
();

180 
	s¸y±o_ex_d©a_°
 {

181 
OSSL_LIB_CTX
 *
	g˘x
;

182 
STACK_OF
(Ë*
	gsk
;

185 
SKM_DEFINE_STACK_OF_INTERNAL
(, , )

186 
	#sk_void_num
(
sk
Ë
	`OPENSSL_sk_num
(
	`os¶_check_c⁄°_void_sk_ty≥
(sk))

	)

187 
	#sk_void_vÆue
(
sk
, 
idx
Ë((*)
	`OPENSSL_sk_vÆue
(
	`os¶_check_c⁄°_void_sk_ty≥
(sk), (idx)))

	)

188 
	#sk_void_√w
(
cmp
Ë((
	`STACK_OF
(Ë*)
	`OPENSSL_sk_√w
(
	`os¶_check_void_compfunc_ty≥
(cmp)))

	)

189 
	#sk_void_√w_nuŒ
(Ë((
	`STACK_OF
(Ë*)
	`OPENSSL_sk_√w_nuŒ
())

	)

190 
	#sk_void_√w_ª£rve
(
cmp
, 
n
Ë((
	`STACK_OF
(Ë*)
	`OPENSSL_sk_√w_ª£rve
(
	`os¶_check_void_compfunc_ty≥
(cmp), (n)))

	)

191 
	#sk_void_ª£rve
(
sk
, 
n
Ë
	`OPENSSL_sk_ª£rve
(
	`os¶_check_void_sk_ty≥
(sk), (n))

	)

192 
	#sk_void_‰ì
(
sk
Ë
	`OPENSSL_sk_‰ì
(
	`os¶_check_void_sk_ty≥
(sk))

	)

193 
	#sk_void_zîo
(
sk
Ë
	`OPENSSL_sk_zîo
(
	`os¶_check_void_sk_ty≥
(sk))

	)

194 
	#sk_void_dñëe
(
sk
, 
i
Ë((*)
	`OPENSSL_sk_dñëe
(
	`os¶_check_void_sk_ty≥
(sk), (i)))

	)

195 
	#sk_void_dñëe_±r
(
sk
, 
±r
Ë((*)
	`OPENSSL_sk_dñëe_±r
(
	`os¶_check_void_sk_ty≥
(sk), 
	`os¶_check_void_ty≥
’å)))

	)

196 
	#sk_void_push
(
sk
, 
±r
Ë
	`OPENSSL_sk_push
(
	`os¶_check_void_sk_ty≥
(sk), 
	`os¶_check_void_ty≥
’å))

	)

197 
	#sk_void_unshi·
(
sk
, 
±r
Ë
	`OPENSSL_sk_unshi·
(
	`os¶_check_void_sk_ty≥
(sk), 
	`os¶_check_void_ty≥
’å))

	)

198 
	#sk_void_p›
(
sk
Ë((*)
	`OPENSSL_sk_p›
(
	`os¶_check_void_sk_ty≥
(sk)))

	)

199 
	#sk_void_shi·
(
sk
Ë((*)
	`OPENSSL_sk_shi·
(
	`os¶_check_void_sk_ty≥
(sk)))

	)

200 
	#sk_void_p›_‰ì
(
sk
, 
‰ìfunc
Ë
	`OPENSSL_sk_p›_‰ì
(
	`os¶_check_void_sk_ty≥
(sk),
	`os¶_check_void_‰ìfunc_ty≥
(‰ìfunc))

	)

201 
	#sk_void_ö£π
(
sk
, 
±r
, 
idx
Ë
	`OPENSSL_sk_ö£π
(
	`os¶_check_void_sk_ty≥
(sk), 
	`os¶_check_void_ty≥
’å), (idx))

	)

202 
	#sk_void_£t
(
sk
, 
idx
, 
±r
Ë((*)
	`OPENSSL_sk_£t
(
	`os¶_check_void_sk_ty≥
(sk), (idx), 
	`os¶_check_void_ty≥
’å)))

	)

203 
	#sk_void_föd
(
sk
, 
±r
Ë
	`OPENSSL_sk_föd
(
	`os¶_check_void_sk_ty≥
(sk), 
	`os¶_check_void_ty≥
’å))

	)

204 
	#sk_void_föd_ex
(
sk
, 
±r
Ë
	`OPENSSL_sk_föd_ex
(
	`os¶_check_void_sk_ty≥
(sk), 
	`os¶_check_void_ty≥
’å))

	)

205 
	#sk_void_föd_Æl
(
sk
, 
±r
, 
≤um
Ë
	`OPENSSL_sk_föd_Æl
(
	`os¶_check_void_sk_ty≥
(sk), 
	`os¶_check_void_ty≥
’å),Önum)

	)

206 
	#sk_void_s‹t
(
sk
Ë
	`OPENSSL_sk_s‹t
(
	`os¶_check_void_sk_ty≥
(sk))

	)

207 
	#sk_void_is_s‹ãd
(
sk
Ë
	`OPENSSL_sk_is_s‹ãd
(
	`os¶_check_c⁄°_void_sk_ty≥
(sk))

	)

208 
	#sk_void_dup
(
sk
Ë((
	`STACK_OF
(Ë*)
	`OPENSSL_sk_dup
(
	`os¶_check_c⁄°_void_sk_ty≥
(sk)))

	)

209 
	#sk_void_dìp_c›y
(
sk
, 
c›yfunc
, 
‰ìfunc
Ë((
	`STACK_OF
(Ë*)
	`OPENSSL_sk_dìp_c›y
(
	`os¶_check_c⁄°_void_sk_ty≥
(sk), 
	`os¶_check_void_c›yfunc_ty≥
(c›yfunc), 
	`os¶_check_void_‰ìfunc_ty≥
(‰ìfunc)))

	)

210 
	#sk_void_£t_cmp_func
(
sk
, 
cmp
Ë((
sk_void_compfunc
)
	`OPENSSL_sk_£t_cmp_func
(
	`os¶_check_void_sk_ty≥
(sk), 
	`os¶_check_void_compfunc_ty≥
(cmp)))

	)

217 
	#CRYPTO_EX_INDEX_SSL
 0

	)

218 
	#CRYPTO_EX_INDEX_SSL_CTX
 1

	)

219 
	#CRYPTO_EX_INDEX_SSL_SESSION
 2

	)

220 
	#CRYPTO_EX_INDEX_X509
 3

	)

221 
	#CRYPTO_EX_INDEX_X509_STORE
 4

	)

222 
	#CRYPTO_EX_INDEX_X509_STORE_CTX
 5

	)

223 
	#CRYPTO_EX_INDEX_DH
 6

	)

224 
	#CRYPTO_EX_INDEX_DSA
 7

	)

225 
	#CRYPTO_EX_INDEX_EC_KEY
 8

	)

226 
	#CRYPTO_EX_INDEX_RSA
 9

	)

227 
	#CRYPTO_EX_INDEX_ENGINE
 10

	)

228 
	#CRYPTO_EX_INDEX_UI
 11

	)

229 
	#CRYPTO_EX_INDEX_BIO
 12

	)

230 
	#CRYPTO_EX_INDEX_APP
 13

	)

231 
	#CRYPTO_EX_INDEX_UI_METHOD
 14

	)

232 
	#CRYPTO_EX_INDEX_RAND_DRBG
 15

	)

233 
	#CRYPTO_EX_INDEX_DRBG
 
CRYPTO_EX_INDEX_RAND_DRBG


	)

234 
	#CRYPTO_EX_INDEX_OSSL_LIB_CTX
 16

	)

235 
	#CRYPTO_EX_INDEX_EVP_PKEY
 17

	)

236 
	#CRYPTO_EX_INDEX__COUNT
 18

	)

238 
	tCRYPTO_EX_√w
 (*
	t∑ª¡
, *
	t±r
, 
	tCRYPTO_EX_DATA
 *
	tad
,

239 
	tidx
, 
	t¨gl
, *
	t¨gp
);

240 
	tCRYPTO_EX_‰ì
 (*
	t∑ª¡
, *
	t±r
, 
	tCRYPTO_EX_DATA
 *
	tad
,

241 
	tidx
, 
	t¨gl
, *
	t¨gp
);

242 
	tCRYPTO_EX_dup
 (
	tCRYPTO_EX_DATA
 *
	tto
, c⁄° CRYPTO_EX_DATA *
	t‰om
,

243 **
	t‰om_d
, 
	tidx
, 
	t¨gl
, *
	t¨gp
);

244 
__owur
 
CRYPTO_gë_ex_√w_ödex
(
˛ass_ödex
, 
¨gl
, *
¨gp
,

245 
CRYPTO_EX_√w
 *
√w_func
,

246 
CRYPTO_EX_dup
 *
dup_func
,

247 
CRYPTO_EX_‰ì
 *
‰ì_func
);

249 
CRYPTO_‰ì_ex_ödex
(
˛ass_ödex
, 
idx
);

255 
CRYPTO_√w_ex_d©a
(
˛ass_ödex
, *
obj
, 
CRYPTO_EX_DATA
 *
ad
);

256 
CRYPTO_dup_ex_d©a
(
˛ass_ödex
, 
CRYPTO_EX_DATA
 *
to
,

257 c⁄° 
CRYPTO_EX_DATA
 *
‰om
);

259 
CRYPTO_‰ì_ex_d©a
(
˛ass_ödex
, *
obj
, 
CRYPTO_EX_DATA
 *
ad
);

262 
CRYPTO_Æloc_ex_d©a
(
˛ass_ödex
, *
obj
, 
CRYPTO_EX_DATA
 *
ad
,

263 
idx
);

269 
CRYPTO_£t_ex_d©a
(
CRYPTO_EX_DATA
 *
ad
, 
idx
, *
vÆ
);

270 *
CRYPTO_gë_ex_d©a
(c⁄° 
CRYPTO_EX_DATA
 *
ad
, 
idx
);

272 #i‚de‡
OPENSSL_NO_DEPRECATED_1_1_0


277 
	#CRYPTO_˛ónup_Æl_ex_d©a
(Ë0Ë

	)

289 
	#CRYPTO_num_locks
(Ë(1)

	)

290 
	#CRYPTO_£t_lockög_ˇŒback
(
func
)

	)

291 
	#CRYPTO_gë_lockög_ˇŒback
(Ë(
NULL
)

	)

292 
	#CRYPTO_£t_add_lock_ˇŒback
(
func
)

	)

293 
	#CRYPTO_gë_add_lock_ˇŒback
(Ë(
NULL
)

	)

300 
	#CRYPTO_LOCK
 1

	)

301 
	#CRYPTO_UNLOCK
 2

	)

302 
	#CRYPTO_READ
 4

	)

303 
	#CRYPTO_WRITE
 8

	)

306 
	s¸y±o_thªadid_°
 {

307 
	gdummy
;

308 } 
	tCRYPTO_THREADID
;

310 
	#CRYPTO_THREADID_£t_numîic
(
id
, 
vÆ
)

	)

311 
	#CRYPTO_THREADID_£t_poöãr
(
id
, 
±r
)

	)

312 
	#CRYPTO_THREADID_£t_ˇŒback
(
thªadid_func
Ë(0)

	)

313 
	#CRYPTO_THREADID_gë_ˇŒback
(Ë(
NULL
)

	)

314 
	#CRYPTO_THREADID_cuºít
(
id
)

	)

315 
	#CRYPTO_THREADID_cmp
(
a
, 
b
Ë(-1)

	)

316 
	#CRYPTO_THREADID_˝y
(
de°
, 
§c
)

	)

317 
	#CRYPTO_THREADID_hash
(
id
Ë(0UL)

	)

319 #i‚de‡
OPENSSL_NO_DEPRECATED_1_0_0


320 
	#CRYPTO_£t_id_ˇŒback
(
func
)

	)

321 
	#CRYPTO_gë_id_ˇŒback
(Ë(
NULL
)

	)

322 
	#CRYPTO_thªad_id
(Ë(0UL)

	)

325 
	#CRYPTO_£t_dy∆ock_¸óã_ˇŒback
(
dyn_¸óã_fun˘i⁄
)

	)

326 
	#CRYPTO_£t_dy∆ock_lock_ˇŒback
(
dyn_lock_fun˘i⁄
)

	)

327 
	#CRYPTO_£t_dy∆ock_de°roy_ˇŒback
(
dyn_de°roy_fun˘i⁄
)

	)

328 
	#CRYPTO_gë_dy∆ock_¸óã_ˇŒback
(Ë(
NULL
)

	)

329 
	#CRYPTO_gë_dy∆ock_lock_ˇŒback
(Ë(
NULL
)

	)

330 
	#CRYPTO_gë_dy∆ock_de°roy_ˇŒback
(Ë(
NULL
)

	)

333 *(*
	tCRYPTO_mÆloc_‚
)(
	tsize_t
 
	tnum
, c⁄° *
	tfûe
, 
	tlöe
);

334 *(*
	tCRYPTO_ªÆloc_‚
)(*
	taddr
, 
	tsize_t
 
	tnum
, c⁄° *
	tfûe
,

335 
	tlöe
);

336 (*
	gCRYPTO_‰ì_‚
)(*
	taddr
, c⁄° *
	tfûe
, 
	tlöe
);

337 
CRYPTO_£t_mem_fun˘i⁄s
(
CRYPTO_mÆloc_‚
 
mÆloc_‚
,

338 
CRYPTO_ªÆloc_‚
 
ªÆloc_‚
,

339 
CRYPTO_‰ì_‚
 
‰ì_‚
);

340 
CRYPTO_gë_mem_fun˘i⁄s
(
CRYPTO_mÆloc_‚
 *
mÆloc_‚
,

341 
CRYPTO_ªÆloc_‚
 *
ªÆloc_‚
,

342 
CRYPTO_‰ì_‚
 *
‰ì_‚
);

344 *
CRYPTO_mÆloc
(
size_t
 
num
, c⁄° *
fûe
, 
löe
);

345 *
CRYPTO_zÆloc
(
size_t
 
num
, c⁄° *
fûe
, 
löe
);

346 *
CRYPTO_memdup
(c⁄° *
°r
, 
size_t
 
siz
, c⁄° *
fûe
, 
löe
);

347 *
CRYPTO_°rdup
(c⁄° *
°r
, c⁄° *
fûe
, 
löe
);

348 *
CRYPTO_°∫dup
(c⁄° *
°r
, 
size_t
 
s
, c⁄° *
fûe
, 
löe
);

349 
CRYPTO_‰ì
(*
±r
, c⁄° *
fûe
, 
löe
);

350 
CRYPTO_˛ór_‰ì
(*
±r
, 
size_t
 
num
, c⁄° *
fûe
, 
löe
);

351 *
CRYPTO_ªÆloc
(*
addr
, 
size_t
 
num
, c⁄° *
fûe
, 
löe
);

352 *
CRYPTO_˛ór_ªÆloc
(*
addr
, 
size_t
 
ﬁd_num
, size_à
num
,

353 c⁄° *
fûe
, 
löe
);

355 
CRYPTO_£cuª_mÆloc_öô
(
size_t
 
sz
, size_à
mösize
);

356 
CRYPTO_£cuª_mÆloc_d⁄e
();

357 *
CRYPTO_£cuª_mÆloc
(
size_t
 
num
, c⁄° *
fûe
, 
löe
);

358 *
CRYPTO_£cuª_zÆloc
(
size_t
 
num
, c⁄° *
fûe
, 
löe
);

359 
CRYPTO_£cuª_‰ì
(*
±r
, c⁄° *
fûe
, 
löe
);

360 
CRYPTO_£cuª_˛ór_‰ì
(*
±r
, 
size_t
 
num
,

361 c⁄° *
fûe
, 
löe
);

362 
CRYPTO_£cuª_Æloˇãd
(c⁄° *
±r
);

363 
CRYPTO_£cuª_mÆloc_öôülized
();

364 
size_t
 
CRYPTO_£cuª_a˘uÆ_size
(*
±r
);

365 
size_t
 
CRYPTO_£cuª_u£d
();

367 
OPENSSL_˛ón£
(*
±r
, 
size_t
 
Àn
);

369 #i‚de‡
OPENSSL_NO_CRYPTO_MDEBUG


374 
	#CRYPTO_MEM_CHECK_OFF
 0x0

	)

375 
	#CRYPTO_MEM_CHECK_ON
 0x1

	)

376 
	#CRYPTO_MEM_CHECK_ENABLE
 0x2

	)

377 
	#CRYPTO_MEM_CHECK_DISABLE
 0x3

	)

379 
CRYPTO_gë_Æloc_cou¡s
(*
mcou¡
, *
rcou¡
, *
fcou¡
);

380 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


381 
	#OPENSSL_mem_debug_push
(
öfo
) \

382 
	`CRYPTO_mem_debug_push
(
öfo
, 
OPENSSL_FILE
, 
OPENSSL_LINE
)

	)

383 
	#OPENSSL_mem_debug_p›
() \

384 
	`CRYPTO_mem_debug_p›
()

	)

386 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


387 
OSSL_DEPRECATEDIN_3_0
 
CRYPTO_£t_mem_debug
(
Êag
);

388 
OSSL_DEPRECATEDIN_3_0
 
CRYPTO_mem_˘æ
(
mode
);

389 
OSSL_DEPRECATEDIN_3_0
 
CRYPTO_mem_debug_push
(c⁄° *
öfo
,

390 c⁄° *
fûe
, 
löe
);

391 
OSSL_DEPRECATEDIN_3_0
 
CRYPTO_mem_debug_p›
();

392 
OSSL_DEPRECATEDIN_3_0
 
CRYPTO_mem_debug_mÆloc
(*
addr
, 
size_t
 
num
,

393 
Êag
,

394 c⁄° *
fûe
, 
löe
);

395 
OSSL_DEPRECATEDIN_3_0
 
CRYPTO_mem_debug_ªÆloc
(*
addr1
, *
addr2
,

396 
size_t
 
num
, 
Êag
,

397 c⁄° *
fûe
, 
löe
);

398 
OSSL_DEPRECATEDIN_3_0
 
CRYPTO_mem_debug_‰ì
(*
addr
, 
Êag
,

399 c⁄° *
fûe
, 
löe
);

400 
OSSL_DEPRECATEDIN_3_0


401 
CRYPTO_mem_Àaks_cb
((*
cb
)(c⁄° *
°r
, 
size_t
 
Àn
, *
u
),

402 *
u
);

404 #i‚de‡
OPENSSL_NO_STDIO


405 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


406 
OSSL_DEPRECATEDIN_3_0
 
CRYPTO_mem_Àaks_Â
(
FILE
 *);

409 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


410 
OSSL_DEPRECATEDIN_3_0
 
CRYPTO_mem_Àaks
(
BIO
 *
bio
);

415 
os¶_n‹ëu∫
 
OPENSSL_dõ
(c⁄° *
as£πi⁄
, c⁄° *
fûe
, 
löe
);

416 #i‚de‡
OPENSSL_NO_DEPRECATED_1_1_0


417 
	#O≥nSSLDõ
(
f
,
l
,
a
Ë
	`OPENSSL_dõ
(◊),(f),÷))

	)

419 
	#OPENSSL_as£π
(
e
) \

420 ()((
e
Ë? 0 : (
	`OPENSSL_dõ
("as£πi⁄ faûed: " #e, 
OPENSSL_FILE
, 
OPENSSL_LINE
), 1))

	)

422 
OPENSSL_is£rvi˚
();

424 
OPENSSL_öô
();

425 #ifde‡
OPENSSL_SYS_UNIX


426 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


427 
OSSL_DEPRECATEDIN_3_0
 
OPENSSL_f‹k_¥ï¨e
();

428 
OSSL_DEPRECATEDIN_3_0
 
OPENSSL_f‹k_∑ª¡
();

429 
OSSL_DEPRECATEDIN_3_0
 
OPENSSL_f‹k_chûd
();

433 
tm
 *
OPENSSL_gmtime
(c⁄° 
time_t
 *
timî
, tm *
ªsu…
);

434 
OPENSSL_gmtime_adj
(
tm
 *tm, 
off£t_day
, 
off£t_£c
);

435 
OPENSSL_gmtime_diff
(*
pday
, *
p£c
,

436 c⁄° 
tm
 *
‰om
, c⁄° tm *
to
);

445 
CRYPTO_memcmp
(c⁄° * 
ö_a
, c⁄° * 
ö_b
, 
size_t
 
Àn
);

448 
	#OPENSSL_INIT_NO_LOAD_CRYPTO_STRINGS
 0x00000001L

	)

449 
	#OPENSSL_INIT_LOAD_CRYPTO_STRINGS
 0x00000002L

	)

450 
	#OPENSSL_INIT_ADD_ALL_CIPHERS
 0x00000004L

	)

451 
	#OPENSSL_INIT_ADD_ALL_DIGESTS
 0x00000008L

	)

452 
	#OPENSSL_INIT_NO_ADD_ALL_CIPHERS
 0x00000010L

	)

453 
	#OPENSSL_INIT_NO_ADD_ALL_DIGESTS
 0x00000020L

	)

454 
	#OPENSSL_INIT_LOAD_CONFIG
 0x00000040L

	)

455 
	#OPENSSL_INIT_NO_LOAD_CONFIG
 0x00000080L

	)

456 
	#OPENSSL_INIT_ASYNC
 0x00000100L

	)

457 
	#OPENSSL_INIT_ENGINE_RDRAND
 0x00000200L

	)

458 
	#OPENSSL_INIT_ENGINE_DYNAMIC
 0x00000400L

	)

459 
	#OPENSSL_INIT_ENGINE_OPENSSL
 0x00000800L

	)

460 
	#OPENSSL_INIT_ENGINE_CRYPTODEV
 0x00001000L

	)

461 
	#OPENSSL_INIT_ENGINE_CAPI
 0x00002000L

	)

462 
	#OPENSSL_INIT_ENGINE_PADLOCK
 0x00004000L

	)

463 
	#OPENSSL_INIT_ENGINE_AFALG
 0x00008000L

	)

465 
	#OPENSSL_INIT_ATFORK
 0x00020000L

	)

467 
	#OPENSSL_INIT_NO_ATEXIT
 0x00080000L

	)

478 
	#OPENSSL_INIT_ENGINE_ALL_BUILTIN
 \

479 (
OPENSSL_INIT_ENGINE_RDRAND
 | 
OPENSSL_INIT_ENGINE_DYNAMIC
 \

480 | 
OPENSSL_INIT_ENGINE_CRYPTODEV
 | 
OPENSSL_INIT_ENGINE_CAPI
 | \

481 
OPENSSL_INIT_ENGINE_PADLOCK
)

	)

484 
OPENSSL_˛ónup
();

485 
OPENSSL_öô_¸y±o
(
uöt64_t
 
›ts
, c⁄° 
OPENSSL_INIT_SETTINGS
 *
£âögs
);

486 
OPENSSL_©exô
((*
h™dÀr
)());

487 
OPENSSL_thªad_°›
();

488 
OPENSSL_thªad_°›_ex
(
OSSL_LIB_CTX
 *
˘x
);

491 
OPENSSL_INIT_SETTINGS
 *
OPENSSL_INIT_√w
();

492 #i‚de‡
OPENSSL_NO_STDIO


493 
OPENSSL_INIT_£t_c⁄fig_fûíame
(
OPENSSL_INIT_SETTINGS
 *
£âögs
,

494 c⁄° *
c⁄fig_fûíame
);

495 
OPENSSL_INIT_£t_c⁄fig_fûe_Êags
(
OPENSSL_INIT_SETTINGS
 *
£âögs
,

496 
Êags
);

497 
OPENSSL_INIT_£t_c⁄fig_≠≤ame
(
OPENSSL_INIT_SETTINGS
 *
£âögs
,

498 c⁄° *
c⁄fig_≠≤ame
);

500 
OPENSSL_INIT_‰ì
(
OPENSSL_INIT_SETTINGS
 *
£âögs
);

502 #i‡
deföed
(
OPENSSL_THREADS
Ë&& !deföed(
CRYPTO_TDEBUG
)

503 #i‡
deföed
(
_WIN32
)

504 #i‡
deföed
(
BASETYPES
Ë|| deföed(
_WINDEF_H
)

506 
DWORD
 
	tCRYPTO_THREAD_LOCAL
;

507 
DWORD
 
	tCRYPTO_THREAD_ID
;

509 
LONG
 
	tCRYPTO_ONCE
;

510 
	#CRYPTO_ONCE_STATIC_INIT
 0

	)

513 #i‡
deföed
(
__TANDEM
Ë&& deföed(
_SPT_MODEL_
)

514 
	#SPT_THREAD_SIGNAL
 1

	)

515 
	#SPT_THREAD_AWARE
 1

	)

516 
	~<•thªad.h
>

518 
	~<±hªad.h
>

520 
±hªad_⁄˚_t
 
	tCRYPTO_ONCE
;

521 
±hªad_key_t
 
	tCRYPTO_THREAD_LOCAL
;

522 
±hªad_t
 
	tCRYPTO_THREAD_ID
;

524 
	#CRYPTO_ONCE_STATIC_INIT
 
PTHREAD_ONCE_INIT


	)

528 #i‡!
deföed
(
CRYPTO_ONCE_STATIC_INIT
)

529 
	tCRYPTO_ONCE
;

530 
	tCRYPTO_THREAD_LOCAL
;

531 
	tCRYPTO_THREAD_ID
;

532 
	#CRYPTO_ONCE_STATIC_INIT
 0

	)

535 
CRYPTO_THREAD_run_⁄˚
(
CRYPTO_ONCE
 *
⁄˚
, (*
öô
)());

537 
CRYPTO_THREAD_öô_loˇl
(
CRYPTO_THREAD_LOCAL
 *
key
, (*
˛ónup
)(*));

538 *
CRYPTO_THREAD_gë_loˇl
(
CRYPTO_THREAD_LOCAL
 *
key
);

539 
CRYPTO_THREAD_£t_loˇl
(
CRYPTO_THREAD_LOCAL
 *
key
, *
vÆ
);

540 
CRYPTO_THREAD_˛ónup_loˇl
(
CRYPTO_THREAD_LOCAL
 *
key
);

542 
CRYPTO_THREAD_ID
 
CRYPTO_THREAD_gë_cuºít_id
();

543 
CRYPTO_THREAD_com∑ª_id
(
CRYPTO_THREAD_ID
 
a
, CRYPTO_THREAD_ID 
b
);

545 
OSSL_LIB_CTX
 *
OSSL_LIB_CTX_√w
();

546 
OSSL_LIB_CTX
 *
OSSL_LIB_CTX_√w_‰om_di•©ch
(c⁄° 
OSSL_CORE_HANDLE
 *
h™dÀ
,

547 c⁄° 
OSSL_DISPATCH
 *
ö
);

548 
OSSL_LIB_CTX
 *
OSSL_LIB_CTX_√w_chûd
(c⁄° 
OSSL_CORE_HANDLE
 *
h™dÀ
,

549 c⁄° 
OSSL_DISPATCH
 *
ö
);

550 
OSSL_LIB_CTX_lﬂd_c⁄fig
(
OSSL_LIB_CTX
 *
˘x
, c⁄° *
c⁄fig_fûe
);

551 
OSSL_LIB_CTX_‰ì
(
OSSL_LIB_CTX
 *);

552 
OSSL_LIB_CTX
 *
OSSL_LIB_CTX_gë0_globÆ_deÁu…
();

553 
OSSL_LIB_CTX
 *
OSSL_LIB_CTX_£t0_deÁu…
(OSSL_LIB_CTX *
lib˘x
);

555 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/cryptoerr_legacy.h

17 #i‚de‡
OPENSSL_CRYPTOERR_LEGACY_H


18 
	#OPENSSL_CRYPTOERR_LEGACY_H


	)

19 #¥agm®
⁄˚


21 
	~<›ís¶/ma¸os.h
>

22 
	~<›ís¶/symhacks.h
>

24 #ifde‡ 
__˝lu•lus


28 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


29 
OSSL_DEPRECATEDIN_3_0
 
ERR_lﬂd_ASN1_°rögs
();

30 
OSSL_DEPRECATEDIN_3_0
 
ERR_lﬂd_ASYNC_°rögs
();

31 
OSSL_DEPRECATEDIN_3_0
 
ERR_lﬂd_BIO_°rögs
();

32 
OSSL_DEPRECATEDIN_3_0
 
ERR_lﬂd_BN_°rögs
();

33 
OSSL_DEPRECATEDIN_3_0
 
ERR_lﬂd_BUF_°rögs
();

34 #i‚de‡
OPENSSL_NO_CMS


35 
OSSL_DEPRECATEDIN_3_0
 
ERR_lﬂd_CMS_°rögs
();

37 #i‚de‡
OPENSSL_NO_COMP


38 
OSSL_DEPRECATEDIN_3_0
 
ERR_lﬂd_COMP_°rögs
();

40 
OSSL_DEPRECATEDIN_3_0
 
ERR_lﬂd_CONF_°rögs
();

41 
OSSL_DEPRECATEDIN_3_0
 
ERR_lﬂd_CRYPTO_°rögs
();

42 #i‚de‡
OPENSSL_NO_CT


43 
OSSL_DEPRECATEDIN_3_0
 
ERR_lﬂd_CT_°rögs
();

45 #i‚de‡
OPENSSL_NO_DH


46 
OSSL_DEPRECATEDIN_3_0
 
ERR_lﬂd_DH_°rögs
();

48 #i‚de‡
OPENSSL_NO_DSA


49 
OSSL_DEPRECATEDIN_3_0
 
ERR_lﬂd_DSA_°rögs
();

51 #i‚de‡
OPENSSL_NO_EC


52 
OSSL_DEPRECATEDIN_3_0
 
ERR_lﬂd_EC_°rögs
();

54 #i‚de‡
OPENSSL_NO_ENGINE


55 
OSSL_DEPRECATEDIN_3_0
 
ERR_lﬂd_ENGINE_°rögs
();

57 
OSSL_DEPRECATEDIN_3_0
 
ERR_lﬂd_ERR_°rögs
();

58 
OSSL_DEPRECATEDIN_3_0
 
ERR_lﬂd_EVP_°rögs
();

59 
OSSL_DEPRECATEDIN_3_0
 
ERR_lﬂd_KDF_°rögs
();

60 
OSSL_DEPRECATEDIN_3_0
 
ERR_lﬂd_OBJ_°rögs
();

61 #i‚de‡
OPENSSL_NO_OCSP


62 
OSSL_DEPRECATEDIN_3_0
 
ERR_lﬂd_OCSP_°rögs
();

64 
OSSL_DEPRECATEDIN_3_0
 
ERR_lﬂd_PEM_°rögs
();

65 
OSSL_DEPRECATEDIN_3_0
 
ERR_lﬂd_PKCS12_°rögs
();

66 
OSSL_DEPRECATEDIN_3_0
 
ERR_lﬂd_PKCS7_°rögs
();

67 
OSSL_DEPRECATEDIN_3_0
 
ERR_lﬂd_RAND_°rögs
();

68 
OSSL_DEPRECATEDIN_3_0
 
ERR_lﬂd_RSA_°rögs
();

69 
OSSL_DEPRECATEDIN_3_0
 
ERR_lﬂd_OSSL_STORE_°rögs
();

70 #i‚de‡
OPENSSL_NO_TS


71 
OSSL_DEPRECATEDIN_3_0
 
ERR_lﬂd_TS_°rögs
();

73 
OSSL_DEPRECATEDIN_3_0
 
ERR_lﬂd_UI_°rögs
();

74 
OSSL_DEPRECATEDIN_3_0
 
ERR_lﬂd_X509_°rögs
();

75 
OSSL_DEPRECATEDIN_3_0
 
ERR_lﬂd_X509V3_°rögs
();

82 
	#ASN1_F_A2D_ASN1_OBJECT
 0

	)

83 
	#ASN1_F_A2I_ASN1_INTEGER
 0

	)

84 
	#ASN1_F_A2I_ASN1_STRING
 0

	)

85 
	#ASN1_F_APPEND_EXP
 0

	)

86 
	#ASN1_F_ASN1_BIO_INIT
 0

	)

87 
	#ASN1_F_ASN1_BIT_STRING_SET_BIT
 0

	)

88 
	#ASN1_F_ASN1_CB
 0

	)

89 
	#ASN1_F_ASN1_CHECK_TLEN
 0

	)

90 
	#ASN1_F_ASN1_COLLECT
 0

	)

91 
	#ASN1_F_ASN1_D2I_EX_PRIMITIVE
 0

	)

92 
	#ASN1_F_ASN1_D2I_FP
 0

	)

93 
	#ASN1_F_ASN1_D2I_READ_BIO
 0

	)

94 
	#ASN1_F_ASN1_DIGEST
 0

	)

95 
	#ASN1_F_ASN1_DO_ADB
 0

	)

96 
	#ASN1_F_ASN1_DO_LOCK
 0

	)

97 
	#ASN1_F_ASN1_DUP
 0

	)

98 
	#ASN1_F_ASN1_ENC_SAVE
 0

	)

99 
	#ASN1_F_ASN1_EX_C2I
 0

	)

100 
	#ASN1_F_ASN1_FIND_END
 0

	)

101 
	#ASN1_F_ASN1_GENERALIZEDTIME_ADJ
 0

	)

102 
	#ASN1_F_ASN1_GENERATE_V3
 0

	)

103 
	#ASN1_F_ASN1_GET_INT64
 0

	)

104 
	#ASN1_F_ASN1_GET_OBJECT
 0

	)

105 
	#ASN1_F_ASN1_GET_UINT64
 0

	)

106 
	#ASN1_F_ASN1_I2D_BIO
 0

	)

107 
	#ASN1_F_ASN1_I2D_FP
 0

	)

108 
	#ASN1_F_ASN1_ITEM_D2I_FP
 0

	)

109 
	#ASN1_F_ASN1_ITEM_DUP
 0

	)

110 
	#ASN1_F_ASN1_ITEM_EMBED_D2I
 0

	)

111 
	#ASN1_F_ASN1_ITEM_EMBED_NEW
 0

	)

112 
	#ASN1_F_ASN1_ITEM_FLAGS_I2D
 0

	)

113 
	#ASN1_F_ASN1_ITEM_I2D_BIO
 0

	)

114 
	#ASN1_F_ASN1_ITEM_I2D_FP
 0

	)

115 
	#ASN1_F_ASN1_ITEM_PACK
 0

	)

116 
	#ASN1_F_ASN1_ITEM_SIGN
 0

	)

117 
	#ASN1_F_ASN1_ITEM_SIGN_CTX
 0

	)

118 
	#ASN1_F_ASN1_ITEM_UNPACK
 0

	)

119 
	#ASN1_F_ASN1_ITEM_VERIFY
 0

	)

120 
	#ASN1_F_ASN1_MBSTRING_NCOPY
 0

	)

121 
	#ASN1_F_ASN1_OBJECT_NEW
 0

	)

122 
	#ASN1_F_ASN1_OUTPUT_DATA
 0

	)

123 
	#ASN1_F_ASN1_PCTX_NEW
 0

	)

124 
	#ASN1_F_ASN1_PRIMITIVE_NEW
 0

	)

125 
	#ASN1_F_ASN1_SCTX_NEW
 0

	)

126 
	#ASN1_F_ASN1_SIGN
 0

	)

127 
	#ASN1_F_ASN1_STR2TYPE
 0

	)

128 
	#ASN1_F_ASN1_STRING_GET_INT64
 0

	)

129 
	#ASN1_F_ASN1_STRING_GET_UINT64
 0

	)

130 
	#ASN1_F_ASN1_STRING_SET
 0

	)

131 
	#ASN1_F_ASN1_STRING_TABLE_ADD
 0

	)

132 
	#ASN1_F_ASN1_STRING_TO_BN
 0

	)

133 
	#ASN1_F_ASN1_STRING_TYPE_NEW
 0

	)

134 
	#ASN1_F_ASN1_TEMPLATE_EX_D2I
 0

	)

135 
	#ASN1_F_ASN1_TEMPLATE_NEW
 0

	)

136 
	#ASN1_F_ASN1_TEMPLATE_NOEXP_D2I
 0

	)

137 
	#ASN1_F_ASN1_TIME_ADJ
 0

	)

138 
	#ASN1_F_ASN1_TYPE_GET_INT_OCTETSTRING
 0

	)

139 
	#ASN1_F_ASN1_TYPE_GET_OCTETSTRING
 0

	)

140 
	#ASN1_F_ASN1_UTCTIME_ADJ
 0

	)

141 
	#ASN1_F_ASN1_VERIFY
 0

	)

142 
	#ASN1_F_B64_READ_ASN1
 0

	)

143 
	#ASN1_F_B64_WRITE_ASN1
 0

	)

144 
	#ASN1_F_BIO_NEW_NDEF
 0

	)

145 
	#ASN1_F_BITSTR_CB
 0

	)

146 
	#ASN1_F_BN_TO_ASN1_STRING
 0

	)

147 
	#ASN1_F_C2I_ASN1_BIT_STRING
 0

	)

148 
	#ASN1_F_C2I_ASN1_INTEGER
 0

	)

149 
	#ASN1_F_C2I_ASN1_OBJECT
 0

	)

150 
	#ASN1_F_C2I_IBUF
 0

	)

151 
	#ASN1_F_C2I_UINT64_INT
 0

	)

152 
	#ASN1_F_COLLECT_DATA
 0

	)

153 
	#ASN1_F_D2I_ASN1_OBJECT
 0

	)

154 
	#ASN1_F_D2I_ASN1_UINTEGER
 0

	)

155 
	#ASN1_F_D2I_AUTOPRIVATEKEY
 0

	)

156 
	#ASN1_F_D2I_PRIVATEKEY
 0

	)

157 
	#ASN1_F_D2I_PUBLICKEY
 0

	)

158 
	#ASN1_F_DO_BUF
 0

	)

159 
	#ASN1_F_DO_CREATE
 0

	)

160 
	#ASN1_F_DO_DUMP
 0

	)

161 
	#ASN1_F_DO_TCREATE
 0

	)

162 
	#ASN1_F_I2A_ASN1_OBJECT
 0

	)

163 
	#ASN1_F_I2D_ASN1_BIO_STREAM
 0

	)

164 
	#ASN1_F_I2D_ASN1_OBJECT
 0

	)

165 
	#ASN1_F_I2D_DSA_PUBKEY
 0

	)

166 
	#ASN1_F_I2D_EC_PUBKEY
 0

	)

167 
	#ASN1_F_I2D_PRIVATEKEY
 0

	)

168 
	#ASN1_F_I2D_PUBLICKEY
 0

	)

169 
	#ASN1_F_I2D_RSA_PUBKEY
 0

	)

170 
	#ASN1_F_LONG_C2I
 0

	)

171 
	#ASN1_F_NDEF_PREFIX
 0

	)

172 
	#ASN1_F_NDEF_SUFFIX
 0

	)

173 
	#ASN1_F_OID_MODULE_INIT
 0

	)

174 
	#ASN1_F_PARSE_TAGGING
 0

	)

175 
	#ASN1_F_PKCS5_PBE2_SET_IV
 0

	)

176 
	#ASN1_F_PKCS5_PBE2_SET_SCRYPT
 0

	)

177 
	#ASN1_F_PKCS5_PBE_SET
 0

	)

178 
	#ASN1_F_PKCS5_PBE_SET0_ALGOR
 0

	)

179 
	#ASN1_F_PKCS5_PBKDF2_SET
 0

	)

180 
	#ASN1_F_PKCS5_SCRYPT_SET
 0

	)

181 
	#ASN1_F_SMIME_READ_ASN1
 0

	)

182 
	#ASN1_F_SMIME_TEXT
 0

	)

183 
	#ASN1_F_STABLE_GET
 0

	)

184 
	#ASN1_F_STBL_MODULE_INIT
 0

	)

185 
	#ASN1_F_UINT32_C2I
 0

	)

186 
	#ASN1_F_UINT32_NEW
 0

	)

187 
	#ASN1_F_UINT64_C2I
 0

	)

188 
	#ASN1_F_UINT64_NEW
 0

	)

189 
	#ASN1_F_X509_CRL_ADD0_REVOKED
 0

	)

190 
	#ASN1_F_X509_INFO_NEW
 0

	)

191 
	#ASN1_F_X509_NAME_ENCODE
 0

	)

192 
	#ASN1_F_X509_NAME_EX_D2I
 0

	)

193 
	#ASN1_F_X509_NAME_EX_NEW
 0

	)

194 
	#ASN1_F_X509_PKEY_NEW
 0

	)

199 
	#ASYNC_F_ASYNC_CTX_NEW
 0

	)

200 
	#ASYNC_F_ASYNC_INIT_THREAD
 0

	)

201 
	#ASYNC_F_ASYNC_JOB_NEW
 0

	)

202 
	#ASYNC_F_ASYNC_PAUSE_JOB
 0

	)

203 
	#ASYNC_F_ASYNC_START_FUNC
 0

	)

204 
	#ASYNC_F_ASYNC_START_JOB
 0

	)

205 
	#ASYNC_F_ASYNC_WAIT_CTX_SET_WAIT_FD
 0

	)

210 
	#BIO_F_ACPT_STATE
 0

	)

211 
	#BIO_F_ADDRINFO_WRAP
 0

	)

212 
	#BIO_F_ADDR_STRINGS
 0

	)

213 
	#BIO_F_BIO_ACCEPT
 0

	)

214 
	#BIO_F_BIO_ACCEPT_EX
 0

	)

215 
	#BIO_F_BIO_ACCEPT_NEW
 0

	)

216 
	#BIO_F_BIO_ADDR_NEW
 0

	)

217 
	#BIO_F_BIO_BIND
 0

	)

218 
	#BIO_F_BIO_CALLBACK_CTRL
 0

	)

219 
	#BIO_F_BIO_CONNECT
 0

	)

220 
	#BIO_F_BIO_CONNECT_NEW
 0

	)

221 
	#BIO_F_BIO_CTRL
 0

	)

222 
	#BIO_F_BIO_GETS
 0

	)

223 
	#BIO_F_BIO_GET_HOST_IP
 0

	)

224 
	#BIO_F_BIO_GET_NEW_INDEX
 0

	)

225 
	#BIO_F_BIO_GET_PORT
 0

	)

226 
	#BIO_F_BIO_LISTEN
 0

	)

227 
	#BIO_F_BIO_LOOKUP
 0

	)

228 
	#BIO_F_BIO_LOOKUP_EX
 0

	)

229 
	#BIO_F_BIO_MAKE_PAIR
 0

	)

230 
	#BIO_F_BIO_METH_NEW
 0

	)

231 
	#BIO_F_BIO_NEW
 0

	)

232 
	#BIO_F_BIO_NEW_DGRAM_SCTP
 0

	)

233 
	#BIO_F_BIO_NEW_FILE
 0

	)

234 
	#BIO_F_BIO_NEW_MEM_BUF
 0

	)

235 
	#BIO_F_BIO_NREAD
 0

	)

236 
	#BIO_F_BIO_NREAD0
 0

	)

237 
	#BIO_F_BIO_NWRITE
 0

	)

238 
	#BIO_F_BIO_NWRITE0
 0

	)

239 
	#BIO_F_BIO_PARSE_HOSTSERV
 0

	)

240 
	#BIO_F_BIO_PUTS
 0

	)

241 
	#BIO_F_BIO_READ
 0

	)

242 
	#BIO_F_BIO_READ_EX
 0

	)

243 
	#BIO_F_BIO_READ_INTERN
 0

	)

244 
	#BIO_F_BIO_SOCKET
 0

	)

245 
	#BIO_F_BIO_SOCKET_NBIO
 0

	)

246 
	#BIO_F_BIO_SOCK_INFO
 0

	)

247 
	#BIO_F_BIO_SOCK_INIT
 0

	)

248 
	#BIO_F_BIO_WRITE
 0

	)

249 
	#BIO_F_BIO_WRITE_EX
 0

	)

250 
	#BIO_F_BIO_WRITE_INTERN
 0

	)

251 
	#BIO_F_BUFFER_CTRL
 0

	)

252 
	#BIO_F_CONN_CTRL
 0

	)

253 
	#BIO_F_CONN_STATE
 0

	)

254 
	#BIO_F_DGRAM_SCTP_NEW
 0

	)

255 
	#BIO_F_DGRAM_SCTP_READ
 0

	)

256 
	#BIO_F_DGRAM_SCTP_WRITE
 0

	)

257 
	#BIO_F_DOAPR_OUTCH
 0

	)

258 
	#BIO_F_FILE_CTRL
 0

	)

259 
	#BIO_F_FILE_READ
 0

	)

260 
	#BIO_F_LINEBUFFER_CTRL
 0

	)

261 
	#BIO_F_LINEBUFFER_NEW
 0

	)

262 
	#BIO_F_MEM_WRITE
 0

	)

263 
	#BIO_F_NBIOF_NEW
 0

	)

264 
	#BIO_F_SLG_WRITE
 0

	)

265 
	#BIO_F_SSL_NEW
 0

	)

270 
	#BN_F_BNRAND
 0

	)

271 
	#BN_F_BNRAND_RANGE
 0

	)

272 
	#BN_F_BN_BLINDING_CONVERT_EX
 0

	)

273 
	#BN_F_BN_BLINDING_CREATE_PARAM
 0

	)

274 
	#BN_F_BN_BLINDING_INVERT_EX
 0

	)

275 
	#BN_F_BN_BLINDING_NEW
 0

	)

276 
	#BN_F_BN_BLINDING_UPDATE
 0

	)

277 
	#BN_F_BN_BN2DEC
 0

	)

278 
	#BN_F_BN_BN2HEX
 0

	)

279 
	#BN_F_BN_COMPUTE_WNAF
 0

	)

280 
	#BN_F_BN_CTX_GET
 0

	)

281 
	#BN_F_BN_CTX_NEW
 0

	)

282 
	#BN_F_BN_CTX_START
 0

	)

283 
	#BN_F_BN_DIV
 0

	)

284 
	#BN_F_BN_DIV_RECP
 0

	)

285 
	#BN_F_BN_EXP
 0

	)

286 
	#BN_F_BN_EXPAND_INTERNAL
 0

	)

287 
	#BN_F_BN_GENCB_NEW
 0

	)

288 
	#BN_F_BN_GENERATE_DSA_NONCE
 0

	)

289 
	#BN_F_BN_GENERATE_PRIME_EX
 0

	)

290 
	#BN_F_BN_GF2M_MOD
 0

	)

291 
	#BN_F_BN_GF2M_MOD_EXP
 0

	)

292 
	#BN_F_BN_GF2M_MOD_MUL
 0

	)

293 
	#BN_F_BN_GF2M_MOD_SOLVE_QUAD
 0

	)

294 
	#BN_F_BN_GF2M_MOD_SOLVE_QUAD_ARR
 0

	)

295 
	#BN_F_BN_GF2M_MOD_SQR
 0

	)

296 
	#BN_F_BN_GF2M_MOD_SQRT
 0

	)

297 
	#BN_F_BN_LSHIFT
 0

	)

298 
	#BN_F_BN_MOD_EXP2_MONT
 0

	)

299 
	#BN_F_BN_MOD_EXP_MONT
 0

	)

300 
	#BN_F_BN_MOD_EXP_MONT_CONSTTIME
 0

	)

301 
	#BN_F_BN_MOD_EXP_MONT_WORD
 0

	)

302 
	#BN_F_BN_MOD_EXP_RECP
 0

	)

303 
	#BN_F_BN_MOD_EXP_SIMPLE
 0

	)

304 
	#BN_F_BN_MOD_INVERSE
 0

	)

305 
	#BN_F_BN_MOD_INVERSE_NO_BRANCH
 0

	)

306 
	#BN_F_BN_MOD_LSHIFT_QUICK
 0

	)

307 
	#BN_F_BN_MOD_SQRT
 0

	)

308 
	#BN_F_BN_MONT_CTX_NEW
 0

	)

309 
	#BN_F_BN_MPI2BN
 0

	)

310 
	#BN_F_BN_NEW
 0

	)

311 
	#BN_F_BN_POOL_GET
 0

	)

312 
	#BN_F_BN_RAND
 0

	)

313 
	#BN_F_BN_RAND_RANGE
 0

	)

314 
	#BN_F_BN_RECP_CTX_NEW
 0

	)

315 
	#BN_F_BN_RSHIFT
 0

	)

316 
	#BN_F_BN_SET_WORDS
 0

	)

317 
	#BN_F_BN_STACK_PUSH
 0

	)

318 
	#BN_F_BN_USUB
 0

	)

323 
	#BUF_F_BUF_MEM_GROW
 0

	)

324 
	#BUF_F_BUF_MEM_GROW_CLEAN
 0

	)

325 
	#BUF_F_BUF_MEM_NEW
 0

	)

327 #i‚de‡
OPENSSL_NO_CMS


331 
	#CMS_F_CHECK_CONTENT
 0

	)

332 
	#CMS_F_CMS_ADD0_CERT
 0

	)

333 
	#CMS_F_CMS_ADD0_RECIPIENT_KEY
 0

	)

334 
	#CMS_F_CMS_ADD0_RECIPIENT_PASSWORD
 0

	)

335 
	#CMS_F_CMS_ADD1_RECEIPTREQUEST
 0

	)

336 
	#CMS_F_CMS_ADD1_RECIPIENT_CERT
 0

	)

337 
	#CMS_F_CMS_ADD1_SIGNER
 0

	)

338 
	#CMS_F_CMS_ADD1_SIGNINGTIME
 0

	)

339 
	#CMS_F_CMS_COMPRESS
 0

	)

340 
	#CMS_F_CMS_COMPRESSEDDATA_CREATE
 0

	)

341 
	#CMS_F_CMS_COMPRESSEDDATA_INIT_BIO
 0

	)

342 
	#CMS_F_CMS_COPY_CONTENT
 0

	)

343 
	#CMS_F_CMS_COPY_MESSAGEDIGEST
 0

	)

344 
	#CMS_F_CMS_DATA
 0

	)

345 
	#CMS_F_CMS_DATAFINAL
 0

	)

346 
	#CMS_F_CMS_DATAINIT
 0

	)

347 
	#CMS_F_CMS_DECRYPT
 0

	)

348 
	#CMS_F_CMS_DECRYPT_SET1_KEY
 0

	)

349 
	#CMS_F_CMS_DECRYPT_SET1_PASSWORD
 0

	)

350 
	#CMS_F_CMS_DECRYPT_SET1_PKEY
 0

	)

351 
	#CMS_F_CMS_DIGESTALGORITHM_FIND_CTX
 0

	)

352 
	#CMS_F_CMS_DIGESTALGORITHM_INIT_BIO
 0

	)

353 
	#CMS_F_CMS_DIGESTEDDATA_DO_FINAL
 0

	)

354 
	#CMS_F_CMS_DIGEST_VERIFY
 0

	)

355 
	#CMS_F_CMS_ENCODE_RECEIPT
 0

	)

356 
	#CMS_F_CMS_ENCRYPT
 0

	)

357 
	#CMS_F_CMS_ENCRYPTEDCONTENT_INIT
 0

	)

358 
	#CMS_F_CMS_ENCRYPTEDCONTENT_INIT_BIO
 0

	)

359 
	#CMS_F_CMS_ENCRYPTEDDATA_DECRYPT
 0

	)

360 
	#CMS_F_CMS_ENCRYPTEDDATA_ENCRYPT
 0

	)

361 
	#CMS_F_CMS_ENCRYPTEDDATA_SET1_KEY
 0

	)

362 
	#CMS_F_CMS_ENVELOPEDDATA_CREATE
 0

	)

363 
	#CMS_F_CMS_ENVELOPEDDATA_INIT_BIO
 0

	)

364 
	#CMS_F_CMS_ENVELOPED_DATA_INIT
 0

	)

365 
	#CMS_F_CMS_ENV_ASN1_CTRL
 0

	)

366 
	#CMS_F_CMS_FINAL
 0

	)

367 
	#CMS_F_CMS_GET0_CERTIFICATE_CHOICES
 0

	)

368 
	#CMS_F_CMS_GET0_CONTENT
 0

	)

369 
	#CMS_F_CMS_GET0_ECONTENT_TYPE
 0

	)

370 
	#CMS_F_CMS_GET0_ENVELOPED
 0

	)

371 
	#CMS_F_CMS_GET0_REVOCATION_CHOICES
 0

	)

372 
	#CMS_F_CMS_GET0_SIGNED
 0

	)

373 
	#CMS_F_CMS_MSGSIGDIGEST_ADD1
 0

	)

374 
	#CMS_F_CMS_RECEIPTREQUEST_CREATE0
 0

	)

375 
	#CMS_F_CMS_RECEIPT_VERIFY
 0

	)

376 
	#CMS_F_CMS_RECIPIENTINFO_DECRYPT
 0

	)

377 
	#CMS_F_CMS_RECIPIENTINFO_ENCRYPT
 0

	)

378 
	#CMS_F_CMS_RECIPIENTINFO_KARI_ENCRYPT
 0

	)

379 
	#CMS_F_CMS_RECIPIENTINFO_KARI_GET0_ALG
 0

	)

380 
	#CMS_F_CMS_RECIPIENTINFO_KARI_GET0_ORIG_ID
 0

	)

381 
	#CMS_F_CMS_RECIPIENTINFO_KARI_GET0_REKS
 0

	)

382 
	#CMS_F_CMS_RECIPIENTINFO_KARI_ORIG_ID_CMP
 0

	)

383 
	#CMS_F_CMS_RECIPIENTINFO_KEKRI_DECRYPT
 0

	)

384 
	#CMS_F_CMS_RECIPIENTINFO_KEKRI_ENCRYPT
 0

	)

385 
	#CMS_F_CMS_RECIPIENTINFO_KEKRI_GET0_ID
 0

	)

386 
	#CMS_F_CMS_RECIPIENTINFO_KEKRI_ID_CMP
 0

	)

387 
	#CMS_F_CMS_RECIPIENTINFO_KTRI_CERT_CMP
 0

	)

388 
	#CMS_F_CMS_RECIPIENTINFO_KTRI_DECRYPT
 0

	)

389 
	#CMS_F_CMS_RECIPIENTINFO_KTRI_ENCRYPT
 0

	)

390 
	#CMS_F_CMS_RECIPIENTINFO_KTRI_GET0_ALGS
 0

	)

391 
	#CMS_F_CMS_RECIPIENTINFO_KTRI_GET0_SIGNER_ID
 0

	)

392 
	#CMS_F_CMS_RECIPIENTINFO_PWRI_CRYPT
 0

	)

393 
	#CMS_F_CMS_RECIPIENTINFO_SET0_KEY
 0

	)

394 
	#CMS_F_CMS_RECIPIENTINFO_SET0_PASSWORD
 0

	)

395 
	#CMS_F_CMS_RECIPIENTINFO_SET0_PKEY
 0

	)

396 
	#CMS_F_CMS_SD_ASN1_CTRL
 0

	)

397 
	#CMS_F_CMS_SET1_IAS
 0

	)

398 
	#CMS_F_CMS_SET1_KEYID
 0

	)

399 
	#CMS_F_CMS_SET1_SIGNERIDENTIFIER
 0

	)

400 
	#CMS_F_CMS_SET_DETACHED
 0

	)

401 
	#CMS_F_CMS_SIGN
 0

	)

402 
	#CMS_F_CMS_SIGNED_DATA_INIT
 0

	)

403 
	#CMS_F_CMS_SIGNERINFO_CONTENT_SIGN
 0

	)

404 
	#CMS_F_CMS_SIGNERINFO_SIGN
 0

	)

405 
	#CMS_F_CMS_SIGNERINFO_VERIFY
 0

	)

406 
	#CMS_F_CMS_SIGNERINFO_VERIFY_CERT
 0

	)

407 
	#CMS_F_CMS_SIGNERINFO_VERIFY_CONTENT
 0

	)

408 
	#CMS_F_CMS_SIGN_RECEIPT
 0

	)

409 
	#CMS_F_CMS_SI_CHECK_ATTRIBUTES
 0

	)

410 
	#CMS_F_CMS_STREAM
 0

	)

411 
	#CMS_F_CMS_UNCOMPRESS
 0

	)

412 
	#CMS_F_CMS_VERIFY
 0

	)

413 
	#CMS_F_KEK_UNWRAP_KEY
 0

	)

416 #i‚de‡
OPENSSL_NO_COMP


420 
	#COMP_F_BIO_ZLIB_FLUSH
 0

	)

421 
	#COMP_F_BIO_ZLIB_NEW
 0

	)

422 
	#COMP_F_BIO_ZLIB_READ
 0

	)

423 
	#COMP_F_BIO_ZLIB_WRITE
 0

	)

424 
	#COMP_F_COMP_CTX_NEW
 0

	)

430 
	#CONF_F_CONF_DUMP_FP
 0

	)

431 
	#CONF_F_CONF_LOAD
 0

	)

432 
	#CONF_F_CONF_LOAD_FP
 0

	)

433 
	#CONF_F_CONF_PARSE_LIST
 0

	)

434 
	#CONF_F_DEF_LOAD
 0

	)

435 
	#CONF_F_DEF_LOAD_BIO
 0

	)

436 
	#CONF_F_GET_NEXT_FILE
 0

	)

437 
	#CONF_F_MODULE_ADD
 0

	)

438 
	#CONF_F_MODULE_INIT
 0

	)

439 
	#CONF_F_MODULE_LOAD_DSO
 0

	)

440 
	#CONF_F_MODULE_RUN
 0

	)

441 
	#CONF_F_NCONF_DUMP_BIO
 0

	)

442 
	#CONF_F_NCONF_DUMP_FP
 0

	)

443 
	#CONF_F_NCONF_GET_NUMBER_E
 0

	)

444 
	#CONF_F_NCONF_GET_SECTION
 0

	)

445 
	#CONF_F_NCONF_GET_STRING
 0

	)

446 
	#CONF_F_NCONF_LOAD
 0

	)

447 
	#CONF_F_NCONF_LOAD_BIO
 0

	)

448 
	#CONF_F_NCONF_LOAD_FP
 0

	)

449 
	#CONF_F_NCONF_NEW
 0

	)

450 
	#CONF_F_PROCESS_INCLUDE
 0

	)

451 
	#CONF_F_SSL_MODULE_INIT
 0

	)

452 
	#CONF_F_STR_COPY
 0

	)

457 
	#CRYPTO_F_CMAC_CTX_NEW
 0

	)

458 
	#CRYPTO_F_CRYPTO_DUP_EX_DATA
 0

	)

459 
	#CRYPTO_F_CRYPTO_FREE_EX_DATA
 0

	)

460 
	#CRYPTO_F_CRYPTO_GET_EX_NEW_INDEX
 0

	)

461 
	#CRYPTO_F_CRYPTO_MEMDUP
 0

	)

462 
	#CRYPTO_F_CRYPTO_NEW_EX_DATA
 0

	)

463 
	#CRYPTO_F_CRYPTO_OCB128_COPY_CTX
 0

	)

464 
	#CRYPTO_F_CRYPTO_OCB128_INIT
 0

	)

465 
	#CRYPTO_F_CRYPTO_SET_EX_DATA
 0

	)

466 
	#CRYPTO_F_GET_AND_LOCK
 0

	)

467 
	#CRYPTO_F_OPENSSL_ATEXIT
 0

	)

468 
	#CRYPTO_F_OPENSSL_BUF2HEXSTR
 0

	)

469 
	#CRYPTO_F_OPENSSL_FOPEN
 0

	)

470 
	#CRYPTO_F_OPENSSL_HEXSTR2BUF
 0

	)

471 
	#CRYPTO_F_OPENSSL_INIT_CRYPTO
 0

	)

472 
	#CRYPTO_F_OPENSSL_LH_NEW
 0

	)

473 
	#CRYPTO_F_OPENSSL_SK_DEEP_COPY
 0

	)

474 
	#CRYPTO_F_OPENSSL_SK_DUP
 0

	)

475 
	#CRYPTO_F_PKEY_HMAC_INIT
 0

	)

476 
	#CRYPTO_F_PKEY_POLY1305_INIT
 0

	)

477 
	#CRYPTO_F_PKEY_SIPHASH_INIT
 0

	)

478 
	#CRYPTO_F_SK_RESERVE
 0

	)

480 #i‚de‡
OPENSSL_NO_CT


484 
	#CT_F_CTLOG_NEW
 0

	)

485 
	#CT_F_CTLOG_NEW_FROM_BASE64
 0

	)

486 
	#CT_F_CTLOG_NEW_FROM_CONF
 0

	)

487 
	#CT_F_CTLOG_STORE_LOAD_CTX_NEW
 0

	)

488 
	#CT_F_CTLOG_STORE_LOAD_FILE
 0

	)

489 
	#CT_F_CTLOG_STORE_LOAD_LOG
 0

	)

490 
	#CT_F_CTLOG_STORE_NEW
 0

	)

491 
	#CT_F_CT_BASE64_DECODE
 0

	)

492 
	#CT_F_CT_POLICY_EVAL_CTX_NEW
 0

	)

493 
	#CT_F_CT_V1_LOG_ID_FROM_PKEY
 0

	)

494 
	#CT_F_I2O_SCT
 0

	)

495 
	#CT_F_I2O_SCT_LIST
 0

	)

496 
	#CT_F_I2O_SCT_SIGNATURE
 0

	)

497 
	#CT_F_O2I_SCT
 0

	)

498 
	#CT_F_O2I_SCT_LIST
 0

	)

499 
	#CT_F_O2I_SCT_SIGNATURE
 0

	)

500 
	#CT_F_SCT_CTX_NEW
 0

	)

501 
	#CT_F_SCT_CTX_VERIFY
 0

	)

502 
	#CT_F_SCT_NEW
 0

	)

503 
	#CT_F_SCT_NEW_FROM_BASE64
 0

	)

504 
	#CT_F_SCT_SET0_LOG_ID
 0

	)

505 
	#CT_F_SCT_SET1_EXTENSIONS
 0

	)

506 
	#CT_F_SCT_SET1_LOG_ID
 0

	)

507 
	#CT_F_SCT_SET1_SIGNATURE
 0

	)

508 
	#CT_F_SCT_SET_LOG_ENTRY_TYPE
 0

	)

509 
	#CT_F_SCT_SET_SIGNATURE_NID
 0

	)

510 
	#CT_F_SCT_SET_VERSION
 0

	)

513 #i‚de‡
OPENSSL_NO_DH


517 
	#DH_F_COMPUTE_KEY
 0

	)

518 
	#DH_F_DHPARAMS_PRINT_FP
 0

	)

519 
	#DH_F_DH_BUILTIN_GENPARAMS
 0

	)

520 
	#DH_F_DH_CHECK_EX
 0

	)

521 
	#DH_F_DH_CHECK_PARAMS_EX
 0

	)

522 
	#DH_F_DH_CHECK_PUB_KEY_EX
 0

	)

523 
	#DH_F_DH_CMS_DECRYPT
 0

	)

524 
	#DH_F_DH_CMS_SET_PEERKEY
 0

	)

525 
	#DH_F_DH_CMS_SET_SHARED_INFO
 0

	)

526 
	#DH_F_DH_METH_DUP
 0

	)

527 
	#DH_F_DH_METH_NEW
 0

	)

528 
	#DH_F_DH_METH_SET1_NAME
 0

	)

529 
	#DH_F_DH_NEW_BY_NID
 0

	)

530 
	#DH_F_DH_NEW_METHOD
 0

	)

531 
	#DH_F_DH_PARAM_DECODE
 0

	)

532 
	#DH_F_DH_PKEY_PUBLIC_CHECK
 0

	)

533 
	#DH_F_DH_PRIV_DECODE
 0

	)

534 
	#DH_F_DH_PRIV_ENCODE
 0

	)

535 
	#DH_F_DH_PUB_DECODE
 0

	)

536 
	#DH_F_DH_PUB_ENCODE
 0

	)

537 
	#DH_F_DO_DH_PRINT
 0

	)

538 
	#DH_F_GENERATE_KEY
 0

	)

539 
	#DH_F_PKEY_DH_CTRL_STR
 0

	)

540 
	#DH_F_PKEY_DH_DERIVE
 0

	)

541 
	#DH_F_PKEY_DH_INIT
 0

	)

542 
	#DH_F_PKEY_DH_KEYGEN
 0

	)

545 #i‚de‡
OPENSSL_NO_DSA


549 
	#DSA_F_DSAPARAMS_PRINT
 0

	)

550 
	#DSA_F_DSAPARAMS_PRINT_FP
 0

	)

551 
	#DSA_F_DSA_BUILTIN_PARAMGEN
 0

	)

552 
	#DSA_F_DSA_BUILTIN_PARAMGEN2
 0

	)

553 
	#DSA_F_DSA_DO_SIGN
 0

	)

554 
	#DSA_F_DSA_DO_VERIFY
 0

	)

555 
	#DSA_F_DSA_METH_DUP
 0

	)

556 
	#DSA_F_DSA_METH_NEW
 0

	)

557 
	#DSA_F_DSA_METH_SET1_NAME
 0

	)

558 
	#DSA_F_DSA_NEW_METHOD
 0

	)

559 
	#DSA_F_DSA_PARAM_DECODE
 0

	)

560 
	#DSA_F_DSA_PRINT_FP
 0

	)

561 
	#DSA_F_DSA_PRIV_DECODE
 0

	)

562 
	#DSA_F_DSA_PRIV_ENCODE
 0

	)

563 
	#DSA_F_DSA_PUB_DECODE
 0

	)

564 
	#DSA_F_DSA_PUB_ENCODE
 0

	)

565 
	#DSA_F_DSA_SIGN
 0

	)

566 
	#DSA_F_DSA_SIGN_SETUP
 0

	)

567 
	#DSA_F_DSA_SIG_NEW
 0

	)

568 
	#DSA_F_OLD_DSA_PRIV_DECODE
 0

	)

569 
	#DSA_F_PKEY_DSA_CTRL
 0

	)

570 
	#DSA_F_PKEY_DSA_CTRL_STR
 0

	)

571 
	#DSA_F_PKEY_DSA_KEYGEN
 0

	)

574 #i‚de‡
OPENSSL_NO_EC


578 
	#EC_F_BN_TO_FELEM
 0

	)

579 
	#EC_F_D2I_ECPARAMETERS
 0

	)

580 
	#EC_F_D2I_ECPKPARAMETERS
 0

	)

581 
	#EC_F_D2I_ECPRIVATEKEY
 0

	)

582 
	#EC_F_DO_EC_KEY_PRINT
 0

	)

583 
	#EC_F_ECDH_CMS_DECRYPT
 0

	)

584 
	#EC_F_ECDH_CMS_SET_SHARED_INFO
 0

	)

585 
	#EC_F_ECDH_COMPUTE_KEY
 0

	)

586 
	#EC_F_ECDH_SIMPLE_COMPUTE_KEY
 0

	)

587 
	#EC_F_ECDSA_DO_SIGN_EX
 0

	)

588 
	#EC_F_ECDSA_DO_VERIFY
 0

	)

589 
	#EC_F_ECDSA_SIGN_EX
 0

	)

590 
	#EC_F_ECDSA_SIGN_SETUP
 0

	)

591 
	#EC_F_ECDSA_SIG_NEW
 0

	)

592 
	#EC_F_ECDSA_VERIFY
 0

	)

593 
	#EC_F_ECD_ITEM_VERIFY
 0

	)

594 
	#EC_F_ECKEY_PARAM2TYPE
 0

	)

595 
	#EC_F_ECKEY_PARAM_DECODE
 0

	)

596 
	#EC_F_ECKEY_PRIV_DECODE
 0

	)

597 
	#EC_F_ECKEY_PRIV_ENCODE
 0

	)

598 
	#EC_F_ECKEY_PUB_DECODE
 0

	)

599 
	#EC_F_ECKEY_PUB_ENCODE
 0

	)

600 
	#EC_F_ECKEY_TYPE2PARAM
 0

	)

601 
	#EC_F_ECPARAMETERS_PRINT
 0

	)

602 
	#EC_F_ECPARAMETERS_PRINT_FP
 0

	)

603 
	#EC_F_ECPKPARAMETERS_PRINT
 0

	)

604 
	#EC_F_ECPKPARAMETERS_PRINT_FP
 0

	)

605 
	#EC_F_ECP_NISTZ256_GET_AFFINE
 0

	)

606 
	#EC_F_ECP_NISTZ256_INV_MOD_ORD
 0

	)

607 
	#EC_F_ECP_NISTZ256_MULT_PRECOMPUTE
 0

	)

608 
	#EC_F_ECP_NISTZ256_POINTS_MUL
 0

	)

609 
	#EC_F_ECP_NISTZ256_PRE_COMP_NEW
 0

	)

610 
	#EC_F_ECP_NISTZ256_WINDOWED_MUL
 0

	)

611 
	#EC_F_ECX_KEY_OP
 0

	)

612 
	#EC_F_ECX_PRIV_ENCODE
 0

	)

613 
	#EC_F_ECX_PUB_ENCODE
 0

	)

614 
	#EC_F_EC_ASN1_GROUP2CURVE
 0

	)

615 
	#EC_F_EC_ASN1_GROUP2FIELDID
 0

	)

616 
	#EC_F_EC_GF2M_MONTGOMERY_POINT_MULTIPLY
 0

	)

617 
	#EC_F_EC_GF2M_SIMPLE_FIELD_INV
 0

	)

618 
	#EC_F_EC_GF2M_SIMPLE_GROUP_CHECK_DISCRIMINANT
 0

	)

619 
	#EC_F_EC_GF2M_SIMPLE_GROUP_SET_CURVE
 0

	)

620 
	#EC_F_EC_GF2M_SIMPLE_LADDER_POST
 0

	)

621 
	#EC_F_EC_GF2M_SIMPLE_LADDER_PRE
 0

	)

622 
	#EC_F_EC_GF2M_SIMPLE_OCT2POINT
 0

	)

623 
	#EC_F_EC_GF2M_SIMPLE_POINT2OCT
 0

	)

624 
	#EC_F_EC_GF2M_SIMPLE_POINTS_MUL
 0

	)

625 
	#EC_F_EC_GF2M_SIMPLE_POINT_GET_AFFINE_COORDINATES
 0

	)

626 
	#EC_F_EC_GF2M_SIMPLE_POINT_SET_AFFINE_COORDINATES
 0

	)

627 
	#EC_F_EC_GF2M_SIMPLE_SET_COMPRESSED_COORDINATES
 0

	)

628 
	#EC_F_EC_GFP_MONT_FIELD_DECODE
 0

	)

629 
	#EC_F_EC_GFP_MONT_FIELD_ENCODE
 0

	)

630 
	#EC_F_EC_GFP_MONT_FIELD_INV
 0

	)

631 
	#EC_F_EC_GFP_MONT_FIELD_MUL
 0

	)

632 
	#EC_F_EC_GFP_MONT_FIELD_SET_TO_ONE
 0

	)

633 
	#EC_F_EC_GFP_MONT_FIELD_SQR
 0

	)

634 
	#EC_F_EC_GFP_MONT_GROUP_SET_CURVE
 0

	)

635 
	#EC_F_EC_GFP_NISTP224_GROUP_SET_CURVE
 0

	)

636 
	#EC_F_EC_GFP_NISTP224_POINTS_MUL
 0

	)

637 
	#EC_F_EC_GFP_NISTP224_POINT_GET_AFFINE_COORDINATES
 0

	)

638 
	#EC_F_EC_GFP_NISTP256_GROUP_SET_CURVE
 0

	)

639 
	#EC_F_EC_GFP_NISTP256_POINTS_MUL
 0

	)

640 
	#EC_F_EC_GFP_NISTP256_POINT_GET_AFFINE_COORDINATES
 0

	)

641 
	#EC_F_EC_GFP_NISTP521_GROUP_SET_CURVE
 0

	)

642 
	#EC_F_EC_GFP_NISTP521_POINTS_MUL
 0

	)

643 
	#EC_F_EC_GFP_NISTP521_POINT_GET_AFFINE_COORDINATES
 0

	)

644 
	#EC_F_EC_GFP_NIST_FIELD_MUL
 0

	)

645 
	#EC_F_EC_GFP_NIST_FIELD_SQR
 0

	)

646 
	#EC_F_EC_GFP_NIST_GROUP_SET_CURVE
 0

	)

647 
	#EC_F_EC_GFP_SIMPLE_BLIND_COORDINATES
 0

	)

648 
	#EC_F_EC_GFP_SIMPLE_FIELD_INV
 0

	)

649 
	#EC_F_EC_GFP_SIMPLE_GROUP_CHECK_DISCRIMINANT
 0

	)

650 
	#EC_F_EC_GFP_SIMPLE_GROUP_SET_CURVE
 0

	)

651 
	#EC_F_EC_GFP_SIMPLE_MAKE_AFFINE
 0

	)

652 
	#EC_F_EC_GFP_SIMPLE_OCT2POINT
 0

	)

653 
	#EC_F_EC_GFP_SIMPLE_POINT2OCT
 0

	)

654 
	#EC_F_EC_GFP_SIMPLE_POINTS_MAKE_AFFINE
 0

	)

655 
	#EC_F_EC_GFP_SIMPLE_POINT_GET_AFFINE_COORDINATES
 0

	)

656 
	#EC_F_EC_GFP_SIMPLE_POINT_SET_AFFINE_COORDINATES
 0

	)

657 
	#EC_F_EC_GFP_SIMPLE_SET_COMPRESSED_COORDINATES
 0

	)

658 
	#EC_F_EC_GROUP_CHECK
 0

	)

659 
	#EC_F_EC_GROUP_CHECK_DISCRIMINANT
 0

	)

660 
	#EC_F_EC_GROUP_COPY
 0

	)

661 
	#EC_F_EC_GROUP_GET_CURVE
 0

	)

662 
	#EC_F_EC_GROUP_GET_CURVE_GF2M
 0

	)

663 
	#EC_F_EC_GROUP_GET_CURVE_GFP
 0

	)

664 
	#EC_F_EC_GROUP_GET_DEGREE
 0

	)

665 
	#EC_F_EC_GROUP_GET_ECPARAMETERS
 0

	)

666 
	#EC_F_EC_GROUP_GET_ECPKPARAMETERS
 0

	)

667 
	#EC_F_EC_GROUP_GET_PENTANOMIAL_BASIS
 0

	)

668 
	#EC_F_EC_GROUP_GET_TRINOMIAL_BASIS
 0

	)

669 
	#EC_F_EC_GROUP_NEW
 0

	)

670 
	#EC_F_EC_GROUP_NEW_BY_CURVE_NAME
 0

	)

671 
	#EC_F_EC_GROUP_NEW_FROM_DATA
 0

	)

672 
	#EC_F_EC_GROUP_NEW_FROM_ECPARAMETERS
 0

	)

673 
	#EC_F_EC_GROUP_NEW_FROM_ECPKPARAMETERS
 0

	)

674 
	#EC_F_EC_GROUP_SET_CURVE
 0

	)

675 
	#EC_F_EC_GROUP_SET_CURVE_GF2M
 0

	)

676 
	#EC_F_EC_GROUP_SET_CURVE_GFP
 0

	)

677 
	#EC_F_EC_GROUP_SET_GENERATOR
 0

	)

678 
	#EC_F_EC_GROUP_SET_SEED
 0

	)

679 
	#EC_F_EC_KEY_CHECK_KEY
 0

	)

680 
	#EC_F_EC_KEY_COPY
 0

	)

681 
	#EC_F_EC_KEY_GENERATE_KEY
 0

	)

682 
	#EC_F_EC_KEY_NEW
 0

	)

683 
	#EC_F_EC_KEY_NEW_METHOD
 0

	)

684 
	#EC_F_EC_KEY_OCT2PRIV
 0

	)

685 
	#EC_F_EC_KEY_PRINT
 0

	)

686 
	#EC_F_EC_KEY_PRINT_FP
 0

	)

687 
	#EC_F_EC_KEY_PRIV2BUF
 0

	)

688 
	#EC_F_EC_KEY_PRIV2OCT
 0

	)

689 
	#EC_F_EC_KEY_SET_PUBLIC_KEY_AFFINE_COORDINATES
 0

	)

690 
	#EC_F_EC_KEY_SIMPLE_CHECK_KEY
 0

	)

691 
	#EC_F_EC_KEY_SIMPLE_OCT2PRIV
 0

	)

692 
	#EC_F_EC_KEY_SIMPLE_PRIV2OCT
 0

	)

693 
	#EC_F_EC_PKEY_CHECK
 0

	)

694 
	#EC_F_EC_PKEY_PARAM_CHECK
 0

	)

695 
	#EC_F_EC_POINTS_MAKE_AFFINE
 0

	)

696 
	#EC_F_EC_POINTS_MUL
 0

	)

697 
	#EC_F_EC_POINT_ADD
 0

	)

698 
	#EC_F_EC_POINT_BN2POINT
 0

	)

699 
	#EC_F_EC_POINT_CMP
 0

	)

700 
	#EC_F_EC_POINT_COPY
 0

	)

701 
	#EC_F_EC_POINT_DBL
 0

	)

702 
	#EC_F_EC_POINT_GET_AFFINE_COORDINATES
 0

	)

703 
	#EC_F_EC_POINT_GET_AFFINE_COORDINATES_GF2M
 0

	)

704 
	#EC_F_EC_POINT_GET_AFFINE_COORDINATES_GFP
 0

	)

705 
	#EC_F_EC_POINT_GET_JPROJECTIVE_COORDINATES_GFP
 0

	)

706 
	#EC_F_EC_POINT_INVERT
 0

	)

707 
	#EC_F_EC_POINT_IS_AT_INFINITY
 0

	)

708 
	#EC_F_EC_POINT_IS_ON_CURVE
 0

	)

709 
	#EC_F_EC_POINT_MAKE_AFFINE
 0

	)

710 
	#EC_F_EC_POINT_NEW
 0

	)

711 
	#EC_F_EC_POINT_OCT2POINT
 0

	)

712 
	#EC_F_EC_POINT_POINT2BUF
 0

	)

713 
	#EC_F_EC_POINT_POINT2OCT
 0

	)

714 
	#EC_F_EC_POINT_SET_AFFINE_COORDINATES
 0

	)

715 
	#EC_F_EC_POINT_SET_AFFINE_COORDINATES_GF2M
 0

	)

716 
	#EC_F_EC_POINT_SET_AFFINE_COORDINATES_GFP
 0

	)

717 
	#EC_F_EC_POINT_SET_COMPRESSED_COORDINATES
 0

	)

718 
	#EC_F_EC_POINT_SET_COMPRESSED_COORDINATES_GF2M
 0

	)

719 
	#EC_F_EC_POINT_SET_COMPRESSED_COORDINATES_GFP
 0

	)

720 
	#EC_F_EC_POINT_SET_JPROJECTIVE_COORDINATES_GFP
 0

	)

721 
	#EC_F_EC_POINT_SET_TO_INFINITY
 0

	)

722 
	#EC_F_EC_PRE_COMP_NEW
 0

	)

723 
	#EC_F_EC_SCALAR_MUL_LADDER
 0

	)

724 
	#EC_F_EC_WNAF_MUL
 0

	)

725 
	#EC_F_EC_WNAF_PRECOMPUTE_MULT
 0

	)

726 
	#EC_F_I2D_ECPARAMETERS
 0

	)

727 
	#EC_F_I2D_ECPKPARAMETERS
 0

	)

728 
	#EC_F_I2D_ECPRIVATEKEY
 0

	)

729 
	#EC_F_I2O_ECPUBLICKEY
 0

	)

730 
	#EC_F_NISTP224_PRE_COMP_NEW
 0

	)

731 
	#EC_F_NISTP256_PRE_COMP_NEW
 0

	)

732 
	#EC_F_NISTP521_PRE_COMP_NEW
 0

	)

733 
	#EC_F_O2I_ECPUBLICKEY
 0

	)

734 
	#EC_F_OLD_EC_PRIV_DECODE
 0

	)

735 
	#EC_F_OSSL_ECDH_COMPUTE_KEY
 0

	)

736 
	#EC_F_OSSL_ECDSA_SIGN_SIG
 0

	)

737 
	#EC_F_OSSL_ECDSA_VERIFY_SIG
 0

	)

738 
	#EC_F_PKEY_ECD_CTRL
 0

	)

739 
	#EC_F_PKEY_ECD_DIGESTSIGN
 0

	)

740 
	#EC_F_PKEY_ECD_DIGESTSIGN25519
 0

	)

741 
	#EC_F_PKEY_ECD_DIGESTSIGN448
 0

	)

742 
	#EC_F_PKEY_ECX_DERIVE
 0

	)

743 
	#EC_F_PKEY_EC_CTRL
 0

	)

744 
	#EC_F_PKEY_EC_CTRL_STR
 0

	)

745 
	#EC_F_PKEY_EC_DERIVE
 0

	)

746 
	#EC_F_PKEY_EC_INIT
 0

	)

747 
	#EC_F_PKEY_EC_KDF_DERIVE
 0

	)

748 
	#EC_F_PKEY_EC_KEYGEN
 0

	)

749 
	#EC_F_PKEY_EC_PARAMGEN
 0

	)

750 
	#EC_F_PKEY_EC_SIGN
 0

	)

751 
	#EC_F_VALIDATE_ECX_DERIVE
 0

	)

754 #i‚de‡
OPENSSL_NO_ENGINE


758 
	#ENGINE_F_DIGEST_UPDATE
 0

	)

759 
	#ENGINE_F_DYNAMIC_CTRL
 0

	)

760 
	#ENGINE_F_DYNAMIC_GET_DATA_CTX
 0

	)

761 
	#ENGINE_F_DYNAMIC_LOAD
 0

	)

762 
	#ENGINE_F_DYNAMIC_SET_DATA_CTX
 0

	)

763 
	#ENGINE_F_ENGINE_ADD
 0

	)

764 
	#ENGINE_F_ENGINE_BY_ID
 0

	)

765 
	#ENGINE_F_ENGINE_CMD_IS_EXECUTABLE
 0

	)

766 
	#ENGINE_F_ENGINE_CTRL
 0

	)

767 
	#ENGINE_F_ENGINE_CTRL_CMD
 0

	)

768 
	#ENGINE_F_ENGINE_CTRL_CMD_STRING
 0

	)

769 
	#ENGINE_F_ENGINE_FINISH
 0

	)

770 
	#ENGINE_F_ENGINE_GET_CIPHER
 0

	)

771 
	#ENGINE_F_ENGINE_GET_DIGEST
 0

	)

772 
	#ENGINE_F_ENGINE_GET_FIRST
 0

	)

773 
	#ENGINE_F_ENGINE_GET_LAST
 0

	)

774 
	#ENGINE_F_ENGINE_GET_NEXT
 0

	)

775 
	#ENGINE_F_ENGINE_GET_PKEY_ASN1_METH
 0

	)

776 
	#ENGINE_F_ENGINE_GET_PKEY_METH
 0

	)

777 
	#ENGINE_F_ENGINE_GET_PREV
 0

	)

778 
	#ENGINE_F_ENGINE_INIT
 0

	)

779 
	#ENGINE_F_ENGINE_LIST_ADD
 0

	)

780 
	#ENGINE_F_ENGINE_LIST_REMOVE
 0

	)

781 
	#ENGINE_F_ENGINE_LOAD_PRIVATE_KEY
 0

	)

782 
	#ENGINE_F_ENGINE_LOAD_PUBLIC_KEY
 0

	)

783 
	#ENGINE_F_ENGINE_LOAD_SSL_CLIENT_CERT
 0

	)

784 
	#ENGINE_F_ENGINE_NEW
 0

	)

785 
	#ENGINE_F_ENGINE_PKEY_ASN1_FIND_STR
 0

	)

786 
	#ENGINE_F_ENGINE_REMOVE
 0

	)

787 
	#ENGINE_F_ENGINE_SET_DEFAULT_STRING
 0

	)

788 
	#ENGINE_F_ENGINE_SET_ID
 0

	)

789 
	#ENGINE_F_ENGINE_SET_NAME
 0

	)

790 
	#ENGINE_F_ENGINE_TABLE_REGISTER
 0

	)

791 
	#ENGINE_F_ENGINE_UNLOCKED_FINISH
 0

	)

792 
	#ENGINE_F_ENGINE_UP_REF
 0

	)

793 
	#ENGINE_F_INT_CLEANUP_ITEM
 0

	)

794 
	#ENGINE_F_INT_CTRL_HELPER
 0

	)

795 
	#ENGINE_F_INT_ENGINE_CONFIGURE
 0

	)

796 
	#ENGINE_F_INT_ENGINE_MODULE_INIT
 0

	)

797 
	#ENGINE_F_OSSL_HMAC_INIT
 0

	)

803 
	#EVP_F_AESNI_INIT_KEY
 0

	)

804 
	#EVP_F_AESNI_XTS_INIT_KEY
 0

	)

805 
	#EVP_F_AES_GCM_CTRL
 0

	)

806 
	#EVP_F_AES_INIT_KEY
 0

	)

807 
	#EVP_F_AES_OCB_CIPHER
 0

	)

808 
	#EVP_F_AES_T4_INIT_KEY
 0

	)

809 
	#EVP_F_AES_T4_XTS_INIT_KEY
 0

	)

810 
	#EVP_F_AES_WRAP_CIPHER
 0

	)

811 
	#EVP_F_AES_XTS_INIT_KEY
 0

	)

812 
	#EVP_F_ALG_MODULE_INIT
 0

	)

813 
	#EVP_F_ARIA_CCM_INIT_KEY
 0

	)

814 
	#EVP_F_ARIA_GCM_CTRL
 0

	)

815 
	#EVP_F_ARIA_GCM_INIT_KEY
 0

	)

816 
	#EVP_F_ARIA_INIT_KEY
 0

	)

817 
	#EVP_F_B64_NEW
 0

	)

818 
	#EVP_F_CAMELLIA_INIT_KEY
 0

	)

819 
	#EVP_F_CHACHA20_POLY1305_CTRL
 0

	)

820 
	#EVP_F_CMLL_T4_INIT_KEY
 0

	)

821 
	#EVP_F_DES_EDE3_WRAP_CIPHER
 0

	)

822 
	#EVP_F_DO_SIGVER_INIT
 0

	)

823 
	#EVP_F_ENC_NEW
 0

	)

824 
	#EVP_F_EVP_CIPHERINIT_EX
 0

	)

825 
	#EVP_F_EVP_CIPHER_ASN1_TO_PARAM
 0

	)

826 
	#EVP_F_EVP_CIPHER_CTX_COPY
 0

	)

827 
	#EVP_F_EVP_CIPHER_CTX_CTRL
 0

	)

828 
	#EVP_F_EVP_CIPHER_CTX_SET_KEY_LENGTH
 0

	)

829 
	#EVP_F_EVP_CIPHER_PARAM_TO_ASN1
 0

	)

830 
	#EVP_F_EVP_DECRYPTFINAL_EX
 0

	)

831 
	#EVP_F_EVP_DECRYPTUPDATE
 0

	)

832 
	#EVP_F_EVP_DIGESTFINALXOF
 0

	)

833 
	#EVP_F_EVP_DIGESTINIT_EX
 0

	)

834 
	#EVP_F_EVP_ENCRYPTDECRYPTUPDATE
 0

	)

835 
	#EVP_F_EVP_ENCRYPTFINAL_EX
 0

	)

836 
	#EVP_F_EVP_ENCRYPTUPDATE
 0

	)

837 
	#EVP_F_EVP_MD_CTX_COPY_EX
 0

	)

838 
	#EVP_F_EVP_MD_SIZE
 0

	)

839 
	#EVP_F_EVP_OPENINIT
 0

	)

840 
	#EVP_F_EVP_PBE_ALG_ADD
 0

	)

841 
	#EVP_F_EVP_PBE_ALG_ADD_TYPE
 0

	)

842 
	#EVP_F_EVP_PBE_CIPHERINIT
 0

	)

843 
	#EVP_F_EVP_PBE_SCRYPT
 0

	)

844 
	#EVP_F_EVP_PKCS82PKEY
 0

	)

845 
	#EVP_F_EVP_PKEY2PKCS8
 0

	)

846 
	#EVP_F_EVP_PKEY_ASN1_ADD0
 0

	)

847 
	#EVP_F_EVP_PKEY_CHECK
 0

	)

848 
	#EVP_F_EVP_PKEY_COPY_PARAMETERS
 0

	)

849 
	#EVP_F_EVP_PKEY_CTX_CTRL
 0

	)

850 
	#EVP_F_EVP_PKEY_CTX_CTRL_STR
 0

	)

851 
	#EVP_F_EVP_PKEY_CTX_DUP
 0

	)

852 
	#EVP_F_EVP_PKEY_CTX_MD
 0

	)

853 
	#EVP_F_EVP_PKEY_DECRYPT
 0

	)

854 
	#EVP_F_EVP_PKEY_DECRYPT_INIT
 0

	)

855 
	#EVP_F_EVP_PKEY_DECRYPT_OLD
 0

	)

856 
	#EVP_F_EVP_PKEY_DERIVE
 0

	)

857 
	#EVP_F_EVP_PKEY_DERIVE_INIT
 0

	)

858 
	#EVP_F_EVP_PKEY_DERIVE_SET_PEER
 0

	)

859 
	#EVP_F_EVP_PKEY_ENCRYPT
 0

	)

860 
	#EVP_F_EVP_PKEY_ENCRYPT_INIT
 0

	)

861 
	#EVP_F_EVP_PKEY_ENCRYPT_OLD
 0

	)

862 
	#EVP_F_EVP_PKEY_GET0_DH
 0

	)

863 
	#EVP_F_EVP_PKEY_GET0_DSA
 0

	)

864 
	#EVP_F_EVP_PKEY_GET0_EC_KEY
 0

	)

865 
	#EVP_F_EVP_PKEY_GET0_HMAC
 0

	)

866 
	#EVP_F_EVP_PKEY_GET0_POLY1305
 0

	)

867 
	#EVP_F_EVP_PKEY_GET0_RSA
 0

	)

868 
	#EVP_F_EVP_PKEY_GET0_SIPHASH
 0

	)

869 
	#EVP_F_EVP_PKEY_GET_RAW_PRIVATE_KEY
 0

	)

870 
	#EVP_F_EVP_PKEY_GET_RAW_PUBLIC_KEY
 0

	)

871 
	#EVP_F_EVP_PKEY_KEYGEN
 0

	)

872 
	#EVP_F_EVP_PKEY_KEYGEN_INIT
 0

	)

873 
	#EVP_F_EVP_PKEY_METH_ADD0
 0

	)

874 
	#EVP_F_EVP_PKEY_METH_NEW
 0

	)

875 
	#EVP_F_EVP_PKEY_NEW
 0

	)

876 
	#EVP_F_EVP_PKEY_NEW_CMAC_KEY
 0

	)

877 
	#EVP_F_EVP_PKEY_NEW_RAW_PRIVATE_KEY
 0

	)

878 
	#EVP_F_EVP_PKEY_NEW_RAW_PUBLIC_KEY
 0

	)

879 
	#EVP_F_EVP_PKEY_PARAMGEN
 0

	)

880 
	#EVP_F_EVP_PKEY_PARAMGEN_INIT
 0

	)

881 
	#EVP_F_EVP_PKEY_PARAM_CHECK
 0

	)

882 
	#EVP_F_EVP_PKEY_PUBLIC_CHECK
 0

	)

883 
	#EVP_F_EVP_PKEY_SET1_ENGINE
 0

	)

884 
	#EVP_F_EVP_PKEY_SET_ALIAS_TYPE
 0

	)

885 
	#EVP_F_EVP_PKEY_SIGN
 0

	)

886 
	#EVP_F_EVP_PKEY_SIGN_INIT
 0

	)

887 
	#EVP_F_EVP_PKEY_VERIFY
 0

	)

888 
	#EVP_F_EVP_PKEY_VERIFY_INIT
 0

	)

889 
	#EVP_F_EVP_PKEY_VERIFY_RECOVER
 0

	)

890 
	#EVP_F_EVP_PKEY_VERIFY_RECOVER_INIT
 0

	)

891 
	#EVP_F_EVP_SIGNFINAL
 0

	)

892 
	#EVP_F_EVP_VERIFYFINAL
 0

	)

893 
	#EVP_F_INT_CTX_NEW
 0

	)

894 
	#EVP_F_OK_NEW
 0

	)

895 
	#EVP_F_PKCS5_PBE_KEYIVGEN
 0

	)

896 
	#EVP_F_PKCS5_V2_PBE_KEYIVGEN
 0

	)

897 
	#EVP_F_PKCS5_V2_PBKDF2_KEYIVGEN
 0

	)

898 
	#EVP_F_PKCS5_V2_SCRYPT_KEYIVGEN
 0

	)

899 
	#EVP_F_PKEY_SET_TYPE
 0

	)

900 
	#EVP_F_RC2_MAGIC_TO_METH
 0

	)

901 
	#EVP_F_RC5_CTRL
 0

	)

902 
	#EVP_F_R_32_12_16_INIT_KEY
 0

	)

903 
	#EVP_F_S390X_AES_GCM_CTRL
 0

	)

904 
	#EVP_F_UPDATE
 0

	)

909 
	#KDF_F_PKEY_HKDF_CTRL_STR
 0

	)

910 
	#KDF_F_PKEY_HKDF_DERIVE
 0

	)

911 
	#KDF_F_PKEY_HKDF_INIT
 0

	)

912 
	#KDF_F_PKEY_SCRYPT_CTRL_STR
 0

	)

913 
	#KDF_F_PKEY_SCRYPT_CTRL_UINT64
 0

	)

914 
	#KDF_F_PKEY_SCRYPT_DERIVE
 0

	)

915 
	#KDF_F_PKEY_SCRYPT_INIT
 0

	)

916 
	#KDF_F_PKEY_SCRYPT_SET_MEMBUF
 0

	)

917 
	#KDF_F_PKEY_TLS1_PRF_CTRL_STR
 0

	)

918 
	#KDF_F_PKEY_TLS1_PRF_DERIVE
 0

	)

919 
	#KDF_F_PKEY_TLS1_PRF_INIT
 0

	)

920 
	#KDF_F_TLS1_PRF_ALG
 0

	)

925 
	#KDF_R_INVALID_DIGEST
 0

	)

926 
	#KDF_R_MISSING_ITERATION_COUNT
 0

	)

927 
	#KDF_R_MISSING_KEY
 0

	)

928 
	#KDF_R_MISSING_MESSAGE_DIGEST
 0

	)

929 
	#KDF_R_MISSING_PARAMETER
 0

	)

930 
	#KDF_R_MISSING_PASS
 0

	)

931 
	#KDF_R_MISSING_SALT
 0

	)

932 
	#KDF_R_MISSING_SECRET
 0

	)

933 
	#KDF_R_MISSING_SEED
 0

	)

934 
	#KDF_R_UNKNOWN_PARAMETER_TYPE
 0

	)

935 
	#KDF_R_VALUE_ERROR
 0

	)

936 
	#KDF_R_VALUE_MISSING
 0

	)

941 
	#OBJ_F_OBJ_ADD_OBJECT
 0

	)

942 
	#OBJ_F_OBJ_ADD_SIGID
 0

	)

943 
	#OBJ_F_OBJ_CREATE
 0

	)

944 
	#OBJ_F_OBJ_DUP
 0

	)

945 
	#OBJ_F_OBJ_NAME_NEW_INDEX
 0

	)

946 
	#OBJ_F_OBJ_NID2LN
 0

	)

947 
	#OBJ_F_OBJ_NID2OBJ
 0

	)

948 
	#OBJ_F_OBJ_NID2SN
 0

	)

949 
	#OBJ_F_OBJ_TXT2OBJ
 0

	)

951 #i‚de‡
OPENSSL_NO_OCSP


955 
	#OCSP_F_D2I_OCSP_NONCE
 0

	)

956 
	#OCSP_F_OCSP_BASIC_ADD1_STATUS
 0

	)

957 
	#OCSP_F_OCSP_BASIC_SIGN
 0

	)

958 
	#OCSP_F_OCSP_BASIC_SIGN_CTX
 0

	)

959 
	#OCSP_F_OCSP_BASIC_VERIFY
 0

	)

960 
	#OCSP_F_OCSP_CERT_ID_NEW
 0

	)

961 
	#OCSP_F_OCSP_CHECK_DELEGATED
 0

	)

962 
	#OCSP_F_OCSP_CHECK_IDS
 0

	)

963 
	#OCSP_F_OCSP_CHECK_ISSUER
 0

	)

964 
	#OCSP_F_OCSP_CHECK_VALIDITY
 0

	)

965 
	#OCSP_F_OCSP_MATCH_ISSUERID
 0

	)

966 
	#OCSP_F_OCSP_PARSE_URL
 0

	)

967 
	#OCSP_F_OCSP_REQUEST_SIGN
 0

	)

968 
	#OCSP_F_OCSP_REQUEST_VERIFY
 0

	)

969 
	#OCSP_F_OCSP_RESPONSE_GET1_BASIC
 0

	)

970 
	#OCSP_F_PARSE_HTTP_LINE1
 0

	)

976 
	#PEM_F_B2I_DSS
 0

	)

977 
	#PEM_F_B2I_PVK_BIO
 0

	)

978 
	#PEM_F_B2I_RSA
 0

	)

979 
	#PEM_F_CHECK_BITLEN_DSA
 0

	)

980 
	#PEM_F_CHECK_BITLEN_RSA
 0

	)

981 
	#PEM_F_D2I_PKCS8PRIVATEKEY_BIO
 0

	)

982 
	#PEM_F_D2I_PKCS8PRIVATEKEY_FP
 0

	)

983 
	#PEM_F_DO_B2I
 0

	)

984 
	#PEM_F_DO_B2I_BIO
 0

	)

985 
	#PEM_F_DO_BLOB_HEADER
 0

	)

986 
	#PEM_F_DO_I2B
 0

	)

987 
	#PEM_F_DO_PK8PKEY
 0

	)

988 
	#PEM_F_DO_PK8PKEY_FP
 0

	)

989 
	#PEM_F_DO_PVK_BODY
 0

	)

990 
	#PEM_F_DO_PVK_HEADER
 0

	)

991 
	#PEM_F_GET_HEADER_AND_DATA
 0

	)

992 
	#PEM_F_GET_NAME
 0

	)

993 
	#PEM_F_I2B_PVK
 0

	)

994 
	#PEM_F_I2B_PVK_BIO
 0

	)

995 
	#PEM_F_LOAD_IV
 0

	)

996 
	#PEM_F_PEM_ASN1_READ
 0

	)

997 
	#PEM_F_PEM_ASN1_READ_BIO
 0

	)

998 
	#PEM_F_PEM_ASN1_WRITE
 0

	)

999 
	#PEM_F_PEM_ASN1_WRITE_BIO
 0

	)

1000 
	#PEM_F_PEM_DEF_CALLBACK
 0

	)

1001 
	#PEM_F_PEM_DO_HEADER
 0

	)

1002 
	#PEM_F_PEM_GET_EVP_CIPHER_INFO
 0

	)

1003 
	#PEM_F_PEM_READ
 0

	)

1004 
	#PEM_F_PEM_READ_BIO
 0

	)

1005 
	#PEM_F_PEM_READ_BIO_DHPARAMS
 0

	)

1006 
	#PEM_F_PEM_READ_BIO_EX
 0

	)

1007 
	#PEM_F_PEM_READ_BIO_PARAMETERS
 0

	)

1008 
	#PEM_F_PEM_READ_BIO_PRIVATEKEY
 0

	)

1009 
	#PEM_F_PEM_READ_DHPARAMS
 0

	)

1010 
	#PEM_F_PEM_READ_PRIVATEKEY
 0

	)

1011 
	#PEM_F_PEM_SIGNFINAL
 0

	)

1012 
	#PEM_F_PEM_WRITE
 0

	)

1013 
	#PEM_F_PEM_WRITE_BIO
 0

	)

1014 
	#PEM_F_PEM_WRITE_BIO_PRIVATEKEY_TRADITIONAL
 0

	)

1015 
	#PEM_F_PEM_WRITE_PRIVATEKEY
 0

	)

1016 
	#PEM_F_PEM_X509_INFO_READ
 0

	)

1017 
	#PEM_F_PEM_X509_INFO_READ_BIO
 0

	)

1018 
	#PEM_F_PEM_X509_INFO_WRITE_BIO
 0

	)

1023 
	#PKCS12_F_OPENSSL_ASC2UNI
 0

	)

1024 
	#PKCS12_F_OPENSSL_UNI2ASC
 0

	)

1025 
	#PKCS12_F_OPENSSL_UNI2UTF8
 0

	)

1026 
	#PKCS12_F_OPENSSL_UTF82UNI
 0

	)

1027 
	#PKCS12_F_PKCS12_CREATE
 0

	)

1028 
	#PKCS12_F_PKCS12_GEN_MAC
 0

	)

1029 
	#PKCS12_F_PKCS12_INIT
 0

	)

1030 
	#PKCS12_F_PKCS12_ITEM_DECRYPT_D2I
 0

	)

1031 
	#PKCS12_F_PKCS12_ITEM_I2D_ENCRYPT
 0

	)

1032 
	#PKCS12_F_PKCS12_ITEM_PACK_SAFEBAG
 0

	)

1033 
	#PKCS12_F_PKCS12_KEY_GEN_ASC
 0

	)

1034 
	#PKCS12_F_PKCS12_KEY_GEN_UNI
 0

	)

1035 
	#PKCS12_F_PKCS12_KEY_GEN_UTF8
 0

	)

1036 
	#PKCS12_F_PKCS12_NEWPASS
 0

	)

1037 
	#PKCS12_F_PKCS12_PACK_P7DATA
 0

	)

1038 
	#PKCS12_F_PKCS12_PACK_P7ENCDATA
 0

	)

1039 
	#PKCS12_F_PKCS12_PARSE
 0

	)

1040 
	#PKCS12_F_PKCS12_PBE_CRYPT
 0

	)

1041 
	#PKCS12_F_PKCS12_PBE_KEYIVGEN
 0

	)

1042 
	#PKCS12_F_PKCS12_SAFEBAG_CREATE0_P8INF
 0

	)

1043 
	#PKCS12_F_PKCS12_SAFEBAG_CREATE0_PKCS8
 0

	)

1044 
	#PKCS12_F_PKCS12_SAFEBAG_CREATE_PKCS8_ENCRYPT
 0

	)

1045 
	#PKCS12_F_PKCS12_SETUP_MAC
 0

	)

1046 
	#PKCS12_F_PKCS12_SET_MAC
 0

	)

1047 
	#PKCS12_F_PKCS12_UNPACK_AUTHSAFES
 0

	)

1048 
	#PKCS12_F_PKCS12_UNPACK_P7DATA
 0

	)

1049 
	#PKCS12_F_PKCS12_VERIFY_MAC
 0

	)

1050 
	#PKCS12_F_PKCS8_ENCRYPT
 0

	)

1051 
	#PKCS12_F_PKCS8_SET0_PBE
 0

	)

1056 
	#PKCS7_F_DO_PKCS7_SIGNED_ATTRIB
 0

	)

1057 
	#PKCS7_F_PKCS7_ADD0_ATTRIB_SIGNING_TIME
 0

	)

1058 
	#PKCS7_F_PKCS7_ADD_ATTRIB_SMIMECAP
 0

	)

1059 
	#PKCS7_F_PKCS7_ADD_CERTIFICATE
 0

	)

1060 
	#PKCS7_F_PKCS7_ADD_CRL
 0

	)

1061 
	#PKCS7_F_PKCS7_ADD_RECIPIENT_INFO
 0

	)

1062 
	#PKCS7_F_PKCS7_ADD_SIGNATURE
 0

	)

1063 
	#PKCS7_F_PKCS7_ADD_SIGNER
 0

	)

1064 
	#PKCS7_F_PKCS7_BIO_ADD_DIGEST
 0

	)

1065 
	#PKCS7_F_PKCS7_COPY_EXISTING_DIGEST
 0

	)

1066 
	#PKCS7_F_PKCS7_CTRL
 0

	)

1067 
	#PKCS7_F_PKCS7_DATADECODE
 0

	)

1068 
	#PKCS7_F_PKCS7_DATAFINAL
 0

	)

1069 
	#PKCS7_F_PKCS7_DATAINIT
 0

	)

1070 
	#PKCS7_F_PKCS7_DATAVERIFY
 0

	)

1071 
	#PKCS7_F_PKCS7_DECRYPT
 0

	)

1072 
	#PKCS7_F_PKCS7_DECRYPT_RINFO
 0

	)

1073 
	#PKCS7_F_PKCS7_ENCODE_RINFO
 0

	)

1074 
	#PKCS7_F_PKCS7_ENCRYPT
 0

	)

1075 
	#PKCS7_F_PKCS7_FINAL
 0

	)

1076 
	#PKCS7_F_PKCS7_FIND_DIGEST
 0

	)

1077 
	#PKCS7_F_PKCS7_GET0_SIGNERS
 0

	)

1078 
	#PKCS7_F_PKCS7_RECIP_INFO_SET
 0

	)

1079 
	#PKCS7_F_PKCS7_SET_CIPHER
 0

	)

1080 
	#PKCS7_F_PKCS7_SET_CONTENT
 0

	)

1081 
	#PKCS7_F_PKCS7_SET_DIGEST
 0

	)

1082 
	#PKCS7_F_PKCS7_SET_TYPE
 0

	)

1083 
	#PKCS7_F_PKCS7_SIGN
 0

	)

1084 
	#PKCS7_F_PKCS7_SIGNATUREVERIFY
 0

	)

1085 
	#PKCS7_F_PKCS7_SIGNER_INFO_SET
 0

	)

1086 
	#PKCS7_F_PKCS7_SIGNER_INFO_SIGN
 0

	)

1087 
	#PKCS7_F_PKCS7_SIGN_ADD_SIGNER
 0

	)

1088 
	#PKCS7_F_PKCS7_SIMPLE_SMIMECAP
 0

	)

1089 
	#PKCS7_F_PKCS7_VERIFY
 0

	)

1094 
	#RAND_F_DATA_COLLECT_METHOD
 0

	)

1095 
	#RAND_F_DRBG_BYTES
 0

	)

1096 
	#RAND_F_DRBG_GET_ENTROPY
 0

	)

1097 
	#RAND_F_DRBG_SETUP
 0

	)

1098 
	#RAND_F_GET_ENTROPY
 0

	)

1099 
	#RAND_F_RAND_BYTES
 0

	)

1100 
	#RAND_F_RAND_DRBG_ENABLE_LOCKING
 0

	)

1101 
	#RAND_F_RAND_DRBG_GENERATE
 0

	)

1102 
	#RAND_F_RAND_DRBG_GET_ENTROPY
 0

	)

1103 
	#RAND_F_RAND_DRBG_GET_NONCE
 0

	)

1104 
	#RAND_F_RAND_DRBG_INSTANTIATE
 0

	)

1105 
	#RAND_F_RAND_DRBG_NEW
 0

	)

1106 
	#RAND_F_RAND_DRBG_RESEED
 0

	)

1107 
	#RAND_F_RAND_DRBG_RESTART
 0

	)

1108 
	#RAND_F_RAND_DRBG_SET
 0

	)

1109 
	#RAND_F_RAND_DRBG_SET_DEFAULTS
 0

	)

1110 
	#RAND_F_RAND_DRBG_UNINSTANTIATE
 0

	)

1111 
	#RAND_F_RAND_LOAD_FILE
 0

	)

1112 
	#RAND_F_RAND_POOL_ACQUIRE_ENTROPY
 0

	)

1113 
	#RAND_F_RAND_POOL_ADD
 0

	)

1114 
	#RAND_F_RAND_POOL_ADD_BEGIN
 0

	)

1115 
	#RAND_F_RAND_POOL_ADD_END
 0

	)

1116 
	#RAND_F_RAND_POOL_ATTACH
 0

	)

1117 
	#RAND_F_RAND_POOL_BYTES_NEEDED
 0

	)

1118 
	#RAND_F_RAND_POOL_GROW
 0

	)

1119 
	#RAND_F_RAND_POOL_NEW
 0

	)

1120 
	#RAND_F_RAND_PSEUDO_BYTES
 0

	)

1121 
	#RAND_F_RAND_WRITE_FILE
 0

	)

1126 
	#RSA_F_CHECK_PADDING_MD
 0

	)

1127 
	#RSA_F_ENCODE_PKCS1
 0

	)

1128 
	#RSA_F_INT_RSA_VERIFY
 0

	)

1129 
	#RSA_F_OLD_RSA_PRIV_DECODE
 0

	)

1130 
	#RSA_F_PKEY_PSS_INIT
 0

	)

1131 
	#RSA_F_PKEY_RSA_CTRL
 0

	)

1132 
	#RSA_F_PKEY_RSA_CTRL_STR
 0

	)

1133 
	#RSA_F_PKEY_RSA_SIGN
 0

	)

1134 
	#RSA_F_PKEY_RSA_VERIFY
 0

	)

1135 
	#RSA_F_PKEY_RSA_VERIFYRECOVER
 0

	)

1136 
	#RSA_F_RSA_ALGOR_TO_MD
 0

	)

1137 
	#RSA_F_RSA_BUILTIN_KEYGEN
 0

	)

1138 
	#RSA_F_RSA_CHECK_KEY
 0

	)

1139 
	#RSA_F_RSA_CHECK_KEY_EX
 0

	)

1140 
	#RSA_F_RSA_CMS_DECRYPT
 0

	)

1141 
	#RSA_F_RSA_CMS_VERIFY
 0

	)

1142 
	#RSA_F_RSA_ITEM_VERIFY
 0

	)

1143 
	#RSA_F_RSA_METH_DUP
 0

	)

1144 
	#RSA_F_RSA_METH_NEW
 0

	)

1145 
	#RSA_F_RSA_METH_SET1_NAME
 0

	)

1146 
	#RSA_F_RSA_MGF1_TO_MD
 0

	)

1147 
	#RSA_F_RSA_MULTIP_INFO_NEW
 0

	)

1148 
	#RSA_F_RSA_NEW_METHOD
 0

	)

1149 
	#RSA_F_RSA_NULL
 0

	)

1150 
	#RSA_F_RSA_NULL_PRIVATE_DECRYPT
 0

	)

1151 
	#RSA_F_RSA_NULL_PRIVATE_ENCRYPT
 0

	)

1152 
	#RSA_F_RSA_NULL_PUBLIC_DECRYPT
 0

	)

1153 
	#RSA_F_RSA_NULL_PUBLIC_ENCRYPT
 0

	)

1154 
	#RSA_F_RSA_OSSL_PRIVATE_DECRYPT
 0

	)

1155 
	#RSA_F_RSA_OSSL_PRIVATE_ENCRYPT
 0

	)

1156 
	#RSA_F_RSA_OSSL_PUBLIC_DECRYPT
 0

	)

1157 
	#RSA_F_RSA_OSSL_PUBLIC_ENCRYPT
 0

	)

1158 
	#RSA_F_RSA_PADDING_ADD_NONE
 0

	)

1159 
	#RSA_F_RSA_PADDING_ADD_PKCS1_OAEP
 0

	)

1160 
	#RSA_F_RSA_PADDING_ADD_PKCS1_OAEP_MGF1
 0

	)

1161 
	#RSA_F_RSA_PADDING_ADD_PKCS1_PSS
 0

	)

1162 
	#RSA_F_RSA_PADDING_ADD_PKCS1_PSS_MGF1
 0

	)

1163 
	#RSA_F_RSA_PADDING_ADD_PKCS1_TYPE_1
 0

	)

1164 
	#RSA_F_RSA_PADDING_ADD_PKCS1_TYPE_2
 0

	)

1165 
	#RSA_F_RSA_PADDING_ADD_SSLV23
 0

	)

1166 
	#RSA_F_RSA_PADDING_ADD_X931
 0

	)

1167 
	#RSA_F_RSA_PADDING_CHECK_NONE
 0

	)

1168 
	#RSA_F_RSA_PADDING_CHECK_PKCS1_OAEP
 0

	)

1169 
	#RSA_F_RSA_PADDING_CHECK_PKCS1_OAEP_MGF1
 0

	)

1170 
	#RSA_F_RSA_PADDING_CHECK_PKCS1_TYPE_1
 0

	)

1171 
	#RSA_F_RSA_PADDING_CHECK_PKCS1_TYPE_2
 0

	)

1172 
	#RSA_F_RSA_PADDING_CHECK_SSLV23
 0

	)

1173 
	#RSA_F_RSA_PADDING_CHECK_X931
 0

	)

1174 
	#RSA_F_RSA_PARAM_DECODE
 0

	)

1175 
	#RSA_F_RSA_PRINT
 0

	)

1176 
	#RSA_F_RSA_PRINT_FP
 0

	)

1177 
	#RSA_F_RSA_PRIV_DECODE
 0

	)

1178 
	#RSA_F_RSA_PRIV_ENCODE
 0

	)

1179 
	#RSA_F_RSA_PSS_GET_PARAM
 0

	)

1180 
	#RSA_F_RSA_PSS_TO_CTX
 0

	)

1181 
	#RSA_F_RSA_PUB_DECODE
 0

	)

1182 
	#RSA_F_RSA_SETUP_BLINDING
 0

	)

1183 
	#RSA_F_RSA_SIGN
 0

	)

1184 
	#RSA_F_RSA_SIGN_ASN1_OCTET_STRING
 0

	)

1185 
	#RSA_F_RSA_VERIFY
 0

	)

1186 
	#RSA_F_RSA_VERIFY_ASN1_OCTET_STRING
 0

	)

1187 
	#RSA_F_RSA_VERIFY_PKCS1_PSS_MGF1
 0

	)

1188 
	#RSA_F_SETUP_TBUF
 0

	)

1193 
	#OSSL_STORE_F_FILE_CTRL
 0

	)

1194 
	#OSSL_STORE_F_FILE_FIND
 0

	)

1195 
	#OSSL_STORE_F_FILE_GET_PASS
 0

	)

1196 
	#OSSL_STORE_F_FILE_LOAD
 0

	)

1197 
	#OSSL_STORE_F_FILE_LOAD_TRY_DECODE
 0

	)

1198 
	#OSSL_STORE_F_FILE_NAME_TO_URI
 0

	)

1199 
	#OSSL_STORE_F_FILE_OPEN
 0

	)

1200 
	#OSSL_STORE_F_OSSL_STORE_ATTACH_PEM_BIO
 0

	)

1201 
	#OSSL_STORE_F_OSSL_STORE_EXPECT
 0

	)

1202 
	#OSSL_STORE_F_OSSL_STORE_FILE_ATTACH_PEM_BIO_INT
 0

	)

1203 
	#OSSL_STORE_F_OSSL_STORE_FIND
 0

	)

1204 
	#OSSL_STORE_F_OSSL_STORE_GET0_LOADER_INT
 0

	)

1205 
	#OSSL_STORE_F_OSSL_STORE_INFO_GET1_CERT
 0

	)

1206 
	#OSSL_STORE_F_OSSL_STORE_INFO_GET1_CRL
 0

	)

1207 
	#OSSL_STORE_F_OSSL_STORE_INFO_GET1_NAME
 0

	)

1208 
	#OSSL_STORE_F_OSSL_STORE_INFO_GET1_NAME_DESCRIPTION
 0

	)

1209 
	#OSSL_STORE_F_OSSL_STORE_INFO_GET1_PARAMS
 0

	)

1210 
	#OSSL_STORE_F_OSSL_STORE_INFO_GET1_PKEY
 0

	)

1211 
	#OSSL_STORE_F_OSSL_STORE_INFO_NEW_CERT
 0

	)

1212 
	#OSSL_STORE_F_OSSL_STORE_INFO_NEW_CRL
 0

	)

1213 
	#OSSL_STORE_F_OSSL_STORE_INFO_NEW_EMBEDDED
 0

	)

1214 
	#OSSL_STORE_F_OSSL_STORE_INFO_NEW_NAME
 0

	)

1215 
	#OSSL_STORE_F_OSSL_STORE_INFO_NEW_PARAMS
 0

	)

1216 
	#OSSL_STORE_F_OSSL_STORE_INFO_NEW_PKEY
 0

	)

1217 
	#OSSL_STORE_F_OSSL_STORE_INFO_SET0_NAME_DESCRIPTION
 0

	)

1218 
	#OSSL_STORE_F_OSSL_STORE_INIT_ONCE
 0

	)

1219 
	#OSSL_STORE_F_OSSL_STORE_LOADER_NEW
 0

	)

1220 
	#OSSL_STORE_F_OSSL_STORE_OPEN
 0

	)

1221 
	#OSSL_STORE_F_OSSL_STORE_OPEN_INT
 0

	)

1222 
	#OSSL_STORE_F_OSSL_STORE_REGISTER_LOADER_INT
 0

	)

1223 
	#OSSL_STORE_F_OSSL_STORE_SEARCH_BY_ALIAS
 0

	)

1224 
	#OSSL_STORE_F_OSSL_STORE_SEARCH_BY_ISSUER_SERIAL
 0

	)

1225 
	#OSSL_STORE_F_OSSL_STORE_SEARCH_BY_KEY_FINGERPRINT
 0

	)

1226 
	#OSSL_STORE_F_OSSL_STORE_SEARCH_BY_NAME
 0

	)

1227 
	#OSSL_STORE_F_OSSL_STORE_UNREGISTER_LOADER_INT
 0

	)

1228 
	#OSSL_STORE_F_TRY_DECODE_PARAMS
 0

	)

1229 
	#OSSL_STORE_F_TRY_DECODE_PKCS12
 0

	)

1230 
	#OSSL_STORE_F_TRY_DECODE_PKCS8ENCRYPTED
 0

	)

1232 #i‚de‡
OPENSSL_NO_TS


1236 
	#TS_F_DEF_SERIAL_CB
 0

	)

1237 
	#TS_F_DEF_TIME_CB
 0

	)

1238 
	#TS_F_ESS_ADD_SIGNING_CERT
 0

	)

1239 
	#TS_F_ESS_ADD_SIGNING_CERT_V2
 0

	)

1240 
	#TS_F_ESS_CERT_ID_NEW_INIT
 0

	)

1241 
	#TS_F_ESS_CERT_ID_V2_NEW_INIT
 0

	)

1242 
	#TS_F_ESS_SIGNING_CERT_NEW_INIT
 0

	)

1243 
	#TS_F_ESS_SIGNING_CERT_V2_NEW_INIT
 0

	)

1244 
	#TS_F_INT_TS_RESP_VERIFY_TOKEN
 0

	)

1245 
	#TS_F_PKCS7_TO_TS_TST_INFO
 0

	)

1246 
	#TS_F_TS_ACCURACY_SET_MICROS
 0

	)

1247 
	#TS_F_TS_ACCURACY_SET_MILLIS
 0

	)

1248 
	#TS_F_TS_ACCURACY_SET_SECONDS
 0

	)

1249 
	#TS_F_TS_CHECK_IMPRINTS
 0

	)

1250 
	#TS_F_TS_CHECK_NONCES
 0

	)

1251 
	#TS_F_TS_CHECK_POLICY
 0

	)

1252 
	#TS_F_TS_CHECK_SIGNING_CERTS
 0

	)

1253 
	#TS_F_TS_CHECK_STATUS_INFO
 0

	)

1254 
	#TS_F_TS_COMPUTE_IMPRINT
 0

	)

1255 
	#TS_F_TS_CONF_INVALID
 0

	)

1256 
	#TS_F_TS_CONF_LOAD_CERT
 0

	)

1257 
	#TS_F_TS_CONF_LOAD_CERTS
 0

	)

1258 
	#TS_F_TS_CONF_LOAD_KEY
 0

	)

1259 
	#TS_F_TS_CONF_LOOKUP_FAIL
 0

	)

1260 
	#TS_F_TS_CONF_SET_DEFAULT_ENGINE
 0

	)

1261 
	#TS_F_TS_GET_STATUS_TEXT
 0

	)

1262 
	#TS_F_TS_MSG_IMPRINT_SET_ALGO
 0

	)

1263 
	#TS_F_TS_REQ_SET_MSG_IMPRINT
 0

	)

1264 
	#TS_F_TS_REQ_SET_NONCE
 0

	)

1265 
	#TS_F_TS_REQ_SET_POLICY_ID
 0

	)

1266 
	#TS_F_TS_RESP_CREATE_RESPONSE
 0

	)

1267 
	#TS_F_TS_RESP_CREATE_TST_INFO
 0

	)

1268 
	#TS_F_TS_RESP_CTX_ADD_FAILURE_INFO
 0

	)

1269 
	#TS_F_TS_RESP_CTX_ADD_MD
 0

	)

1270 
	#TS_F_TS_RESP_CTX_ADD_POLICY
 0

	)

1271 
	#TS_F_TS_RESP_CTX_NEW
 0

	)

1272 
	#TS_F_TS_RESP_CTX_SET_ACCURACY
 0

	)

1273 
	#TS_F_TS_RESP_CTX_SET_CERTS
 0

	)

1274 
	#TS_F_TS_RESP_CTX_SET_DEF_POLICY
 0

	)

1275 
	#TS_F_TS_RESP_CTX_SET_SIGNER_CERT
 0

	)

1276 
	#TS_F_TS_RESP_CTX_SET_STATUS_INFO
 0

	)

1277 
	#TS_F_TS_RESP_GET_POLICY
 0

	)

1278 
	#TS_F_TS_RESP_SET_GENTIME_WITH_PRECISION
 0

	)

1279 
	#TS_F_TS_RESP_SET_STATUS_INFO
 0

	)

1280 
	#TS_F_TS_RESP_SET_TST_INFO
 0

	)

1281 
	#TS_F_TS_RESP_SIGN
 0

	)

1282 
	#TS_F_TS_RESP_VERIFY_SIGNATURE
 0

	)

1283 
	#TS_F_TS_TST_INFO_SET_ACCURACY
 0

	)

1284 
	#TS_F_TS_TST_INFO_SET_MSG_IMPRINT
 0

	)

1285 
	#TS_F_TS_TST_INFO_SET_NONCE
 0

	)

1286 
	#TS_F_TS_TST_INFO_SET_POLICY_ID
 0

	)

1287 
	#TS_F_TS_TST_INFO_SET_SERIAL
 0

	)

1288 
	#TS_F_TS_TST_INFO_SET_TIME
 0

	)

1289 
	#TS_F_TS_TST_INFO_SET_TSA
 0

	)

1290 
	#TS_F_TS_VERIFY
 0

	)

1291 
	#TS_F_TS_VERIFY_CERT
 0

	)

1292 
	#TS_F_TS_VERIFY_CTX_NEW
 0

	)

1298 
	#UI_F_CLOSE_CONSOLE
 0

	)

1299 
	#UI_F_ECHO_CONSOLE
 0

	)

1300 
	#UI_F_GENERAL_ALLOCATE_BOOLEAN
 0

	)

1301 
	#UI_F_GENERAL_ALLOCATE_PROMPT
 0

	)

1302 
	#UI_F_NOECHO_CONSOLE
 0

	)

1303 
	#UI_F_OPEN_CONSOLE
 0

	)

1304 
	#UI_F_UI_CONSTRUCT_PROMPT
 0

	)

1305 
	#UI_F_UI_CREATE_METHOD
 0

	)

1306 
	#UI_F_UI_CTRL
 0

	)

1307 
	#UI_F_UI_DUP_ERROR_STRING
 0

	)

1308 
	#UI_F_UI_DUP_INFO_STRING
 0

	)

1309 
	#UI_F_UI_DUP_INPUT_BOOLEAN
 0

	)

1310 
	#UI_F_UI_DUP_INPUT_STRING
 0

	)

1311 
	#UI_F_UI_DUP_USER_DATA
 0

	)

1312 
	#UI_F_UI_DUP_VERIFY_STRING
 0

	)

1313 
	#UI_F_UI_GET0_RESULT
 0

	)

1314 
	#UI_F_UI_GET_RESULT_LENGTH
 0

	)

1315 
	#UI_F_UI_NEW_METHOD
 0

	)

1316 
	#UI_F_UI_PROCESS
 0

	)

1317 
	#UI_F_UI_SET_RESULT
 0

	)

1318 
	#UI_F_UI_SET_RESULT_EX
 0

	)

1323 
	#X509_F_ADD_CERT_DIR
 0

	)

1324 
	#X509_F_BUILD_CHAIN
 0

	)

1325 
	#X509_F_BY_FILE_CTRL
 0

	)

1326 
	#X509_F_CHECK_NAME_CONSTRAINTS
 0

	)

1327 
	#X509_F_CHECK_POLICY
 0

	)

1328 
	#X509_F_DANE_I2D
 0

	)

1329 
	#X509_F_DIR_CTRL
 0

	)

1330 
	#X509_F_GET_CERT_BY_SUBJECT
 0

	)

1331 
	#X509_F_I2D_X509_AUX
 0

	)

1332 
	#X509_F_LOOKUP_CERTS_SK
 0

	)

1333 
	#X509_F_NETSCAPE_SPKI_B64_DECODE
 0

	)

1334 
	#X509_F_NETSCAPE_SPKI_B64_ENCODE
 0

	)

1335 
	#X509_F_NEW_DIR
 0

	)

1336 
	#X509_F_X509AT_ADD1_ATTR
 0

	)

1337 
	#X509_F_X509V3_ADD_EXT
 0

	)

1338 
	#X509_F_X509_ATTRIBUTE_CREATE_BY_NID
 0

	)

1339 
	#X509_F_X509_ATTRIBUTE_CREATE_BY_OBJ
 0

	)

1340 
	#X509_F_X509_ATTRIBUTE_CREATE_BY_TXT
 0

	)

1341 
	#X509_F_X509_ATTRIBUTE_GET0_DATA
 0

	)

1342 
	#X509_F_X509_ATTRIBUTE_SET1_DATA
 0

	)

1343 
	#X509_F_X509_CHECK_PRIVATE_KEY
 0

	)

1344 
	#X509_F_X509_CRL_DIFF
 0

	)

1345 
	#X509_F_X509_CRL_METHOD_NEW
 0

	)

1346 
	#X509_F_X509_CRL_PRINT_FP
 0

	)

1347 
	#X509_F_X509_EXTENSION_CREATE_BY_NID
 0

	)

1348 
	#X509_F_X509_EXTENSION_CREATE_BY_OBJ
 0

	)

1349 
	#X509_F_X509_GET_PUBKEY_PARAMETERS
 0

	)

1350 
	#X509_F_X509_LOAD_CERT_CRL_FILE
 0

	)

1351 
	#X509_F_X509_LOAD_CERT_FILE
 0

	)

1352 
	#X509_F_X509_LOAD_CRL_FILE
 0

	)

1353 
	#X509_F_X509_LOOKUP_METH_NEW
 0

	)

1354 
	#X509_F_X509_LOOKUP_NEW
 0

	)

1355 
	#X509_F_X509_NAME_ADD_ENTRY
 0

	)

1356 
	#X509_F_X509_NAME_CANON
 0

	)

1357 
	#X509_F_X509_NAME_ENTRY_CREATE_BY_NID
 0

	)

1358 
	#X509_F_X509_NAME_ENTRY_CREATE_BY_TXT
 0

	)

1359 
	#X509_F_X509_NAME_ENTRY_SET_OBJECT
 0

	)

1360 
	#X509_F_X509_NAME_ONELINE
 0

	)

1361 
	#X509_F_X509_NAME_PRINT
 0

	)

1362 
	#X509_F_X509_OBJECT_NEW
 0

	)

1363 
	#X509_F_X509_PRINT_EX_FP
 0

	)

1364 
	#X509_F_X509_PUBKEY_DECODE
 0

	)

1365 
	#X509_F_X509_PUBKEY_GET
 0

	)

1366 
	#X509_F_X509_PUBKEY_GET0
 0

	)

1367 
	#X509_F_X509_PUBKEY_SET
 0

	)

1368 
	#X509_F_X509_REQ_CHECK_PRIVATE_KEY
 0

	)

1369 
	#X509_F_X509_REQ_PRINT_EX
 0

	)

1370 
	#X509_F_X509_REQ_PRINT_FP
 0

	)

1371 
	#X509_F_X509_REQ_TO_X509
 0

	)

1372 
	#X509_F_X509_STORE_ADD_CERT
 0

	)

1373 
	#X509_F_X509_STORE_ADD_CRL
 0

	)

1374 
	#X509_F_X509_STORE_ADD_LOOKUP
 0

	)

1375 
	#X509_F_X509_STORE_CTX_GET1_ISSUER
 0

	)

1376 
	#X509_F_X509_STORE_CTX_INIT
 0

	)

1377 
	#X509_F_X509_STORE_CTX_NEW
 0

	)

1378 
	#X509_F_X509_STORE_CTX_PURPOSE_INHERIT
 0

	)

1379 
	#X509_F_X509_STORE_NEW
 0

	)

1380 
	#X509_F_X509_TO_X509_REQ
 0

	)

1381 
	#X509_F_X509_TRUST_ADD
 0

	)

1382 
	#X509_F_X509_TRUST_SET
 0

	)

1383 
	#X509_F_X509_VERIFY_CERT
 0

	)

1384 
	#X509_F_X509_VERIFY_PARAM_NEW
 0

	)

1389 
	#X509V3_F_A2I_GENERAL_NAME
 0

	)

1390 
	#X509V3_F_ADDR_VALIDATE_PATH_INTERNAL
 0

	)

1391 
	#X509V3_F_ASIDENTIFIERCHOICE_CANONIZE
 0

	)

1392 
	#X509V3_F_ASIDENTIFIERCHOICE_IS_CANONICAL
 0

	)

1393 
	#X509V3_F_BIGNUM_TO_STRING
 0

	)

1394 
	#X509V3_F_COPY_EMAIL
 0

	)

1395 
	#X509V3_F_COPY_ISSUER
 0

	)

1396 
	#X509V3_F_DO_DIRNAME
 0

	)

1397 
	#X509V3_F_DO_EXT_I2D
 0

	)

1398 
	#X509V3_F_DO_EXT_NCONF
 0

	)

1399 
	#X509V3_F_GNAMES_FROM_SECTNAME
 0

	)

1400 
	#X509V3_F_I2S_ASN1_ENUMERATED
 0

	)

1401 
	#X509V3_F_I2S_ASN1_IA5STRING
 0

	)

1402 
	#X509V3_F_I2S_ASN1_INTEGER
 0

	)

1403 
	#X509V3_F_I2V_AUTHORITY_INFO_ACCESS
 0

	)

1404 
	#X509V3_F_LEVEL_ADD_NODE
 0

	)

1405 
	#X509V3_F_NOTICE_SECTION
 0

	)

1406 
	#X509V3_F_NREF_NOS
 0

	)

1407 
	#X509V3_F_POLICY_CACHE_CREATE
 0

	)

1408 
	#X509V3_F_POLICY_CACHE_NEW
 0

	)

1409 
	#X509V3_F_POLICY_DATA_NEW
 0

	)

1410 
	#X509V3_F_POLICY_SECTION
 0

	)

1411 
	#X509V3_F_PROCESS_PCI_VALUE
 0

	)

1412 
	#X509V3_F_R2I_CERTPOL
 0

	)

1413 
	#X509V3_F_R2I_PCI
 0

	)

1414 
	#X509V3_F_S2I_ASN1_IA5STRING
 0

	)

1415 
	#X509V3_F_S2I_ASN1_INTEGER
 0

	)

1416 
	#X509V3_F_S2I_ASN1_OCTET_STRING
 0

	)

1417 
	#X509V3_F_S2I_SKEY_ID
 0

	)

1418 
	#X509V3_F_SET_DIST_POINT_NAME
 0

	)

1419 
	#X509V3_F_SXNET_ADD_ID_ASC
 0

	)

1420 
	#X509V3_F_SXNET_ADD_ID_INTEGER
 0

	)

1421 
	#X509V3_F_SXNET_ADD_ID_ULONG
 0

	)

1422 
	#X509V3_F_SXNET_GET_ID_ASC
 0

	)

1423 
	#X509V3_F_SXNET_GET_ID_ULONG
 0

	)

1424 
	#X509V3_F_TREE_INIT
 0

	)

1425 
	#X509V3_F_V2I_ASIDENTIFIERS
 0

	)

1426 
	#X509V3_F_V2I_ASN1_BIT_STRING
 0

	)

1427 
	#X509V3_F_V2I_AUTHORITY_INFO_ACCESS
 0

	)

1428 
	#X509V3_F_V2I_AUTHORITY_KEYID
 0

	)

1429 
	#X509V3_F_V2I_BASIC_CONSTRAINTS
 0

	)

1430 
	#X509V3_F_V2I_CRLD
 0

	)

1431 
	#X509V3_F_V2I_EXTENDED_KEY_USAGE
 0

	)

1432 
	#X509V3_F_V2I_GENERAL_NAMES
 0

	)

1433 
	#X509V3_F_V2I_GENERAL_NAME_EX
 0

	)

1434 
	#X509V3_F_V2I_IDP
 0

	)

1435 
	#X509V3_F_V2I_IPADDRBLOCKS
 0

	)

1436 
	#X509V3_F_V2I_ISSUER_ALT
 0

	)

1437 
	#X509V3_F_V2I_NAME_CONSTRAINTS
 0

	)

1438 
	#X509V3_F_V2I_POLICY_CONSTRAINTS
 0

	)

1439 
	#X509V3_F_V2I_POLICY_MAPPINGS
 0

	)

1440 
	#X509V3_F_V2I_SUBJECT_ALT
 0

	)

1441 
	#X509V3_F_V2I_TLS_FEATURE
 0

	)

1442 
	#X509V3_F_V3_GENERIC_EXTENSION
 0

	)

1443 
	#X509V3_F_X509V3_ADD1_I2D
 0

	)

1444 
	#X509V3_F_X509V3_ADD_VALUE
 0

	)

1445 
	#X509V3_F_X509V3_EXT_ADD
 0

	)

1446 
	#X509V3_F_X509V3_EXT_ADD_ALIAS
 0

	)

1447 
	#X509V3_F_X509V3_EXT_I2D
 0

	)

1448 
	#X509V3_F_X509V3_EXT_NCONF
 0

	)

1449 
	#X509V3_F_X509V3_GET_SECTION
 0

	)

1450 
	#X509V3_F_X509V3_GET_STRING
 0

	)

1451 
	#X509V3_F_X509V3_GET_VALUE_BOOL
 0

	)

1452 
	#X509V3_F_X509V3_PARSE_LIST
 0

	)

1453 
	#X509V3_F_X509_PURPOSE_ADD
 0

	)

1454 
	#X509V3_F_X509_PURPOSE_SET
 0

	)

1459 
	#EVP_R_OPERATON_NOT_INITIALIZED
 
EVP_R_OPERATION_NOT_INITIALIZED


	)

1463 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/ct.h

15 #i‚de‡
OPENSSL_CT_H


16 
	#OPENSSL_CT_H


	)

17 #¥agm®
⁄˚


19 
	~<›ís¶/ma¸os.h
>

20 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


21 
	#HEADER_CT_H


	)

24 
	~<›ís¶/›ís¶c⁄f.h
>

26 #i‚de‡
OPENSSL_NO_CT


27 
	~<›ís¶/ty≥s.h
>

28 
	~<›ís¶/ß„°ack.h
>

29 
	~<›ís¶/x509.h
>

30 
	~<›ís¶/˘îr.h
>

31 #ifde‡ 
__˝lu•lus


37 
	#SCT_MIN_RSA_BITS
 2048

	)

40 
	#CT_V1_HASHLEN
 
SHA256_DIGEST_LENGTH


	)

42 
SKM_DEFINE_STACK_OF_INTERNAL
(
SCT
, SCT, SCT)

43 
	#sk_SCT_num
(
sk
Ë
	`OPENSSL_sk_num
(
	`os¶_check_c⁄°_SCT_sk_ty≥
(sk))

	)

44 
	#sk_SCT_vÆue
(
sk
, 
idx
Ë((
SCT
 *)
	`OPENSSL_sk_vÆue
(
	`os¶_check_c⁄°_SCT_sk_ty≥
(sk), (idx)))

	)

45 
	#sk_SCT_√w
(
cmp
Ë((
	`STACK_OF
(
SCT
Ë*)
	`OPENSSL_sk_√w
(
	`os¶_check_SCT_compfunc_ty≥
(cmp)))

	)

46 
	#sk_SCT_√w_nuŒ
(Ë((
	`STACK_OF
(
SCT
Ë*)
	`OPENSSL_sk_√w_nuŒ
())

	)

47 
	#sk_SCT_√w_ª£rve
(
cmp
, 
n
Ë((
	`STACK_OF
(
SCT
Ë*)
	`OPENSSL_sk_√w_ª£rve
(
	`os¶_check_SCT_compfunc_ty≥
(cmp), (n)))

	)

48 
	#sk_SCT_ª£rve
(
sk
, 
n
Ë
	`OPENSSL_sk_ª£rve
(
	`os¶_check_SCT_sk_ty≥
(sk), (n))

	)

49 
	#sk_SCT_‰ì
(
sk
Ë
	`OPENSSL_sk_‰ì
(
	`os¶_check_SCT_sk_ty≥
(sk))

	)

50 
	#sk_SCT_zîo
(
sk
Ë
	`OPENSSL_sk_zîo
(
	`os¶_check_SCT_sk_ty≥
(sk))

	)

51 
	#sk_SCT_dñëe
(
sk
, 
i
Ë((
SCT
 *)
	`OPENSSL_sk_dñëe
(
	`os¶_check_SCT_sk_ty≥
(sk), (i)))

	)

52 
	#sk_SCT_dñëe_±r
(
sk
, 
±r
Ë((
SCT
 *)
	`OPENSSL_sk_dñëe_±r
(
	`os¶_check_SCT_sk_ty≥
(sk), 
	`os¶_check_SCT_ty≥
’å)))

	)

53 
	#sk_SCT_push
(
sk
, 
±r
Ë
	`OPENSSL_sk_push
(
	`os¶_check_SCT_sk_ty≥
(sk), 
	`os¶_check_SCT_ty≥
’å))

	)

54 
	#sk_SCT_unshi·
(
sk
, 
±r
Ë
	`OPENSSL_sk_unshi·
(
	`os¶_check_SCT_sk_ty≥
(sk), 
	`os¶_check_SCT_ty≥
’å))

	)

55 
	#sk_SCT_p›
(
sk
Ë((
SCT
 *)
	`OPENSSL_sk_p›
(
	`os¶_check_SCT_sk_ty≥
(sk)))

	)

56 
	#sk_SCT_shi·
(
sk
Ë((
SCT
 *)
	`OPENSSL_sk_shi·
(
	`os¶_check_SCT_sk_ty≥
(sk)))

	)

57 
	#sk_SCT_p›_‰ì
(
sk
, 
‰ìfunc
Ë
	`OPENSSL_sk_p›_‰ì
(
	`os¶_check_SCT_sk_ty≥
(sk),
	`os¶_check_SCT_‰ìfunc_ty≥
(‰ìfunc))

	)

58 
	#sk_SCT_ö£π
(
sk
, 
±r
, 
idx
Ë
	`OPENSSL_sk_ö£π
(
	`os¶_check_SCT_sk_ty≥
(sk), 
	`os¶_check_SCT_ty≥
’å), (idx))

	)

59 
	#sk_SCT_£t
(
sk
, 
idx
, 
±r
Ë((
SCT
 *)
	`OPENSSL_sk_£t
(
	`os¶_check_SCT_sk_ty≥
(sk), (idx), 
	`os¶_check_SCT_ty≥
’å)))

	)

60 
	#sk_SCT_föd
(
sk
, 
±r
Ë
	`OPENSSL_sk_föd
(
	`os¶_check_SCT_sk_ty≥
(sk), 
	`os¶_check_SCT_ty≥
’å))

	)

61 
	#sk_SCT_föd_ex
(
sk
, 
±r
Ë
	`OPENSSL_sk_föd_ex
(
	`os¶_check_SCT_sk_ty≥
(sk), 
	`os¶_check_SCT_ty≥
’å))

	)

62 
	#sk_SCT_föd_Æl
(
sk
, 
±r
, 
≤um
Ë
	`OPENSSL_sk_föd_Æl
(
	`os¶_check_SCT_sk_ty≥
(sk), 
	`os¶_check_SCT_ty≥
’å),Önum)

	)

63 
	#sk_SCT_s‹t
(
sk
Ë
	`OPENSSL_sk_s‹t
(
	`os¶_check_SCT_sk_ty≥
(sk))

	)

64 
	#sk_SCT_is_s‹ãd
(
sk
Ë
	`OPENSSL_sk_is_s‹ãd
(
	`os¶_check_c⁄°_SCT_sk_ty≥
(sk))

	)

65 
	#sk_SCT_dup
(
sk
Ë((
	`STACK_OF
(
SCT
Ë*)
	`OPENSSL_sk_dup
(
	`os¶_check_c⁄°_SCT_sk_ty≥
(sk)))

	)

66 
	#sk_SCT_dìp_c›y
(
sk
, 
c›yfunc
, 
‰ìfunc
Ë((
	`STACK_OF
(
SCT
Ë*)
	`OPENSSL_sk_dìp_c›y
(
	`os¶_check_c⁄°_SCT_sk_ty≥
(sk), 
	`os¶_check_SCT_c›yfunc_ty≥
(c›yfunc), 
	`os¶_check_SCT_‰ìfunc_ty≥
(‰ìfunc)))

	)

67 
	#sk_SCT_£t_cmp_func
(
sk
, 
cmp
Ë((
sk_SCT_compfunc
)
	`OPENSSL_sk_£t_cmp_func
(
	`os¶_check_SCT_sk_ty≥
(sk), 
	`os¶_check_SCT_compfunc_ty≥
(cmp)))

	)

68 
SKM_DEFINE_STACK_OF_INTERNAL
(
CTLOG
, CTLOG, CTLOG)

69 
	#sk_CTLOG_num
(
sk
Ë
	`OPENSSL_sk_num
(
	`os¶_check_c⁄°_CTLOG_sk_ty≥
(sk))

	)

70 
	#sk_CTLOG_vÆue
(
sk
, 
idx
Ë((
CTLOG
 *)
	`OPENSSL_sk_vÆue
(
	`os¶_check_c⁄°_CTLOG_sk_ty≥
(sk), (idx)))

	)

71 
	#sk_CTLOG_√w
(
cmp
Ë((
	`STACK_OF
(
CTLOG
Ë*)
	`OPENSSL_sk_√w
(
	`os¶_check_CTLOG_compfunc_ty≥
(cmp)))

	)

72 
	#sk_CTLOG_√w_nuŒ
(Ë((
	`STACK_OF
(
CTLOG
Ë*)
	`OPENSSL_sk_√w_nuŒ
())

	)

73 
	#sk_CTLOG_√w_ª£rve
(
cmp
, 
n
Ë((
	`STACK_OF
(
CTLOG
Ë*)
	`OPENSSL_sk_√w_ª£rve
(
	`os¶_check_CTLOG_compfunc_ty≥
(cmp), (n)))

	)

74 
	#sk_CTLOG_ª£rve
(
sk
, 
n
Ë
	`OPENSSL_sk_ª£rve
(
	`os¶_check_CTLOG_sk_ty≥
(sk), (n))

	)

75 
	#sk_CTLOG_‰ì
(
sk
Ë
	`OPENSSL_sk_‰ì
(
	`os¶_check_CTLOG_sk_ty≥
(sk))

	)

76 
	#sk_CTLOG_zîo
(
sk
Ë
	`OPENSSL_sk_zîo
(
	`os¶_check_CTLOG_sk_ty≥
(sk))

	)

77 
	#sk_CTLOG_dñëe
(
sk
, 
i
Ë((
CTLOG
 *)
	`OPENSSL_sk_dñëe
(
	`os¶_check_CTLOG_sk_ty≥
(sk), (i)))

	)

78 
	#sk_CTLOG_dñëe_±r
(
sk
, 
±r
Ë((
CTLOG
 *)
	`OPENSSL_sk_dñëe_±r
(
	`os¶_check_CTLOG_sk_ty≥
(sk), 
	`os¶_check_CTLOG_ty≥
’å)))

	)

79 
	#sk_CTLOG_push
(
sk
, 
±r
Ë
	`OPENSSL_sk_push
(
	`os¶_check_CTLOG_sk_ty≥
(sk), 
	`os¶_check_CTLOG_ty≥
’å))

	)

80 
	#sk_CTLOG_unshi·
(
sk
, 
±r
Ë
	`OPENSSL_sk_unshi·
(
	`os¶_check_CTLOG_sk_ty≥
(sk), 
	`os¶_check_CTLOG_ty≥
’å))

	)

81 
	#sk_CTLOG_p›
(
sk
Ë((
CTLOG
 *)
	`OPENSSL_sk_p›
(
	`os¶_check_CTLOG_sk_ty≥
(sk)))

	)

82 
	#sk_CTLOG_shi·
(
sk
Ë((
CTLOG
 *)
	`OPENSSL_sk_shi·
(
	`os¶_check_CTLOG_sk_ty≥
(sk)))

	)

83 
	#sk_CTLOG_p›_‰ì
(
sk
, 
‰ìfunc
Ë
	`OPENSSL_sk_p›_‰ì
(
	`os¶_check_CTLOG_sk_ty≥
(sk),
	`os¶_check_CTLOG_‰ìfunc_ty≥
(‰ìfunc))

	)

84 
	#sk_CTLOG_ö£π
(
sk
, 
±r
, 
idx
Ë
	`OPENSSL_sk_ö£π
(
	`os¶_check_CTLOG_sk_ty≥
(sk), 
	`os¶_check_CTLOG_ty≥
’å), (idx))

	)

85 
	#sk_CTLOG_£t
(
sk
, 
idx
, 
±r
Ë((
CTLOG
 *)
	`OPENSSL_sk_£t
(
	`os¶_check_CTLOG_sk_ty≥
(sk), (idx), 
	`os¶_check_CTLOG_ty≥
’å)))

	)

86 
	#sk_CTLOG_föd
(
sk
, 
±r
Ë
	`OPENSSL_sk_föd
(
	`os¶_check_CTLOG_sk_ty≥
(sk), 
	`os¶_check_CTLOG_ty≥
’å))

	)

87 
	#sk_CTLOG_föd_ex
(
sk
, 
±r
Ë
	`OPENSSL_sk_föd_ex
(
	`os¶_check_CTLOG_sk_ty≥
(sk), 
	`os¶_check_CTLOG_ty≥
’å))

	)

88 
	#sk_CTLOG_föd_Æl
(
sk
, 
±r
, 
≤um
Ë
	`OPENSSL_sk_föd_Æl
(
	`os¶_check_CTLOG_sk_ty≥
(sk), 
	`os¶_check_CTLOG_ty≥
’å),Önum)

	)

89 
	#sk_CTLOG_s‹t
(
sk
Ë
	`OPENSSL_sk_s‹t
(
	`os¶_check_CTLOG_sk_ty≥
(sk))

	)

90 
	#sk_CTLOG_is_s‹ãd
(
sk
Ë
	`OPENSSL_sk_is_s‹ãd
(
	`os¶_check_c⁄°_CTLOG_sk_ty≥
(sk))

	)

91 
	#sk_CTLOG_dup
(
sk
Ë((
	`STACK_OF
(
CTLOG
Ë*)
	`OPENSSL_sk_dup
(
	`os¶_check_c⁄°_CTLOG_sk_ty≥
(sk)))

	)

92 
	#sk_CTLOG_dìp_c›y
(
sk
, 
c›yfunc
, 
‰ìfunc
Ë((
	`STACK_OF
(
CTLOG
Ë*)
	`OPENSSL_sk_dìp_c›y
(
	`os¶_check_c⁄°_CTLOG_sk_ty≥
(sk), 
	`os¶_check_CTLOG_c›yfunc_ty≥
(c›yfunc), 
	`os¶_check_CTLOG_‰ìfunc_ty≥
(‰ìfunc)))

	)

93 
	#sk_CTLOG_£t_cmp_func
(
sk
, 
cmp
Ë((
sk_CTLOG_compfunc
)
	`OPENSSL_sk_£t_cmp_func
(
	`os¶_check_CTLOG_sk_ty≥
(sk), 
	`os¶_check_CTLOG_compfunc_ty≥
(cmp)))

	)

98 
CT_LOG_ENTRY_TYPE_NOT_SET
 = -1,

99 
CT_LOG_ENTRY_TYPE_X509
 = 0,

100 
CT_LOG_ENTRY_TYPE_PRECERT
 = 1

101 } 
	t˘_log_íåy_ty≥_t
;

104 
SCT_VERSION_NOT_SET
 = -1,

105 
SCT_VERSION_V1
 = 0

106 } 
	ts˘_vîsi⁄_t
;

109 
SCT_SOURCE_UNKNOWN
,

110 
SCT_SOURCE_TLS_EXTENSION
,

111 
SCT_SOURCE_X509V3_EXTENSION
,

112 
SCT_SOURCE_OCSP_STAPLED_RESPONSE


113 } 
	ts˘_sour˚_t
;

116 
SCT_VALIDATION_STATUS_NOT_SET
,

117 
SCT_VALIDATION_STATUS_UNKNOWN_LOG
,

118 
SCT_VALIDATION_STATUS_VALID
,

119 
SCT_VALIDATION_STATUS_INVALID
,

120 
SCT_VALIDATION_STATUS_UNVERIFIED
,

121 
SCT_VALIDATION_STATUS_UNKNOWN_VERSION


122 } 
	ts˘_vÆid©i⁄_°©us_t
;

134 
CT_POLICY_EVAL_CTX
 *
CT_POLICY_EVAL_CTX_√w_ex
(
OSSL_LIB_CTX
 *
lib˘x
,

135 c⁄° *
¥›q
);

141 
CT_POLICY_EVAL_CTX
 *
CT_POLICY_EVAL_CTX_√w
();

144 
CT_POLICY_EVAL_CTX_‰ì
(
CT_POLICY_EVAL_CTX
 *
˘x
);

147 
X509
* 
CT_POLICY_EVAL_CTX_gë0_˚π
(c⁄° 
CT_POLICY_EVAL_CTX
 *
˘x
);

154 
CT_POLICY_EVAL_CTX_£t1_˚π
(
CT_POLICY_EVAL_CTX
 *
˘x
, 
X509
 *
˚π
);

157 
X509
* 
CT_POLICY_EVAL_CTX_gë0_issuî
(c⁄° 
CT_POLICY_EVAL_CTX
 *
˘x
);

164 
CT_POLICY_EVAL_CTX_£t1_issuî
(
CT_POLICY_EVAL_CTX
 *
˘x
, 
X509
 *
issuî
);

167 c⁄° 
CTLOG_STORE
 *
CT_POLICY_EVAL_CTX_gë0_log_°‹e
(c⁄° 
CT_POLICY_EVAL_CTX
 *
˘x
);

170 
CT_POLICY_EVAL_CTX_£t_sh¨ed_CTLOG_STORE
(
CT_POLICY_EVAL_CTX
 *
˘x
,

171 
CTLOG_STORE
 *
log_°‹e
);

178 
uöt64_t
 
CT_POLICY_EVAL_CTX_gë_time
(c⁄° 
CT_POLICY_EVAL_CTX
 *
˘x
);

186 
CT_POLICY_EVAL_CTX_£t_time
(
CT_POLICY_EVAL_CTX
 *
˘x
, 
uöt64_t
 
time_ö_ms
);

196 
SCT
 *
SCT_√w
();

202 
SCT
 *
SCT_√w_‰om_ba£64
(
vîsi⁄
,

203 c⁄° *
logid_ba£64
,

204 
˘_log_íåy_ty≥_t
 
íåy_ty≥
,

205 
uöt64_t
 
time°amp
,

206 c⁄° *
exãnsi⁄s_ba£64
,

207 c⁄° *
sig«tuª_ba£64
);

212 
SCT_‰ì
(
SCT
 *
s˘
);

218 
SCT_LIST_‰ì
(
STACK_OF
(
SCT
Ë*
a
);

223 
s˘_vîsi⁄_t
 
SCT_gë_vîsi⁄
(c⁄° 
SCT
 *
s˘
);

229 
__owur
 
SCT_£t_vîsi⁄
(
SCT
 *
s˘
, 
s˘_vîsi⁄_t
 
vîsi⁄
);

234 
˘_log_íåy_ty≥_t
 
SCT_gë_log_íåy_ty≥
(c⁄° 
SCT
 *
s˘
);

240 
__owur
 
SCT_£t_log_íåy_ty≥
(
SCT
 *
s˘
, 
˘_log_íåy_ty≥_t
 
íåy_ty≥
);

247 
size_t
 
SCT_gë0_log_id
(c⁄° 
SCT
 *
s˘
, **
log_id
);

254 
__owur
 
SCT_£t0_log_id
(
SCT
 *
s˘
, *
log_id
, 
size_t
 
log_id_Àn
);

261 
__owur
 
SCT_£t1_log_id
(
SCT
 *
s˘
, c⁄° *
log_id
,

262 
size_t
 
log_id_Àn
);

267 
uöt64_t
 
SCT_gë_time°amp
(c⁄° 
SCT
 *
s˘
);

272 
SCT_£t_time°amp
(
SCT
 *
s˘
, 
uöt64_t
 
time°amp
);

279 
SCT_gë_sig«tuª_nid
(c⁄° 
SCT
 *
s˘
);

287 
__owur
 
SCT_£t_sig«tuª_nid
(
SCT
 *
s˘
, 
nid
);

294 
size_t
 
SCT_gë0_exãnsi⁄s
(c⁄° 
SCT
 *
s˘
, **
ext
);

300 
SCT_£t0_exãnsi⁄s
(
SCT
 *
s˘
, *
ext
, 
size_t
 
ext_Àn
);

307 
__owur
 
SCT_£t1_exãnsi⁄s
(
SCT
 *
s˘
, c⁄° *
ext
,

308 
size_t
 
ext_Àn
);

315 
size_t
 
SCT_gë0_sig«tuª
(c⁄° 
SCT
 *
s˘
, **
sig
);

321 
SCT_£t0_sig«tuª
(
SCT
 *
s˘
, *
sig
, 
size_t
 
sig_Àn
);

327 
__owur
 
SCT_£t1_sig«tuª
(
SCT
 *
s˘
, c⁄° *
sig
,

328 
size_t
 
sig_Àn
);

333 
s˘_sour˚_t
 
SCT_gë_sour˚
(c⁄° 
SCT
 *
s˘
);

339 
__owur
 
SCT_£t_sour˚
(
SCT
 *
s˘
, 
s˘_sour˚_t
 
sour˚
);

344 c⁄° *
SCT_vÆid©i⁄_°©us_°rög
(c⁄° 
SCT
 *
s˘
);

352 
SCT_¥öt
(c⁄° 
SCT
 *
s˘
, 
BIO
 *
out
, 
ödít
, c⁄° 
CTLOG_STORE
 *
logs
);

361 
SCT_LIST_¥öt
(c⁄° 
STACK_OF
(
SCT
Ë*
s˘_li°
, 
BIO
 *
out
, 
ödít
,

362 c⁄° *
£∑øt‹
, c⁄° 
CTLOG_STORE
 *
logs
);

368 
s˘_vÆid©i⁄_°©us_t
 
SCT_gë_vÆid©i⁄_°©us
(c⁄° 
SCT
 *
s˘
);

377 
__owur
 
SCT_vÆid©e
(
SCT
 *
s˘
, c⁄° 
CT_POLICY_EVAL_CTX
 *
˘x
);

386 
__owur
 
SCT_LIST_vÆid©e
(c⁄° 
STACK_OF
(
SCT
Ë*
s˘s
,

387 
CT_POLICY_EVAL_CTX
 *
˘x
);

406 
__owur
 
i2o_SCT_LIST
(c⁄° 
STACK_OF
(
SCT
Ë*
a
, **
µ
);

418 
STACK_OF
(
SCT
Ë*
o2i_SCT_LIST
(STACK_OF(SCTË**
a
, c⁄° **
µ
,

419 
size_t
 
Àn
);

433 
__owur
 
i2d_SCT_LIST
(c⁄° 
STACK_OF
(
SCT
Ë*
a
, **
µ
);

445 
STACK_OF
(
SCT
Ë*
d2i_SCT_LIST
(STACK_OF(SCTË**
a
, c⁄° **
µ
,

446 
Àn
);

457 
__owur
 
i2o_SCT
(c⁄° 
SCT
 *
s˘
, **
out
);

470 
SCT
 *
o2i_SCT
(SCT **
ps˘
, c⁄° **
ö
, 
size_t
 
Àn
);

484 
CTLOG
 *
CTLOG_√w_ex
(
EVP_PKEY
 *
public_key
, c⁄° *
«me
, 
OSSL_LIB_CTX
 *
lib˘x
,

485 c⁄° *
¥›q
);

491 
CTLOG
 *
CTLOG_√w
(
EVP_PKEY
 *
public_key
, c⁄° *
«me
);

501 
CTLOG_√w_‰om_ba£64_ex
(
CTLOG
 **
˘_log
, c⁄° *
pkey_ba£64
,

502 c⁄° *
«me
, 
OSSL_LIB_CTX
 *
lib˘x
,

503 c⁄° *
¥›q
);

510 
CTLOG_√w_‰om_ba£64
(
CTLOG
 ** 
˘_log
,

511 c⁄° *
pkey_ba£64
, c⁄° *
«me
);

516 
CTLOG_‰ì
(
CTLOG
 *
log
);

519 c⁄° *
CTLOG_gë0_«me
(c⁄° 
CTLOG
 *
log
);

521 
CTLOG_gë0_log_id
(c⁄° 
CTLOG
 *
log
, c⁄° 
uöt8_t
 **
log_id
,

522 
size_t
 *
log_id_Àn
);

524 
EVP_PKEY
 *
CTLOG_gë0_public_key
(c⁄° 
CTLOG
 *
log
);

535 
CTLOG_STORE
 *
CTLOG_STORE_√w_ex
(
OSSL_LIB_CTX
 *
lib˘x
, c⁄° *
¥›q
);

542 
CTLOG_STORE
 *
CTLOG_STORE_√w
();

547 
CTLOG_STORE_‰ì
(
CTLOG_STORE
 *
°‹e
);

553 c⁄° 
CTLOG
 *
CTLOG_STORE_gë0_log_by_id
(c⁄° 
CTLOG_STORE
 *
°‹e
,

554 c⁄° 
uöt8_t
 *
log_id
,

555 
size_t
 
log_id_Àn
);

561 
__owur
 
CTLOG_STORE_lﬂd_fûe
(
CTLOG_STORE
 *
°‹e
, c⁄° *
fûe
);

567 
__owur
 
CTLOG_STORE_lﬂd_deÁu…_fûe
(
CTLOG_STORE
 *
°‹e
);

569 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/dherr.h

11 #i‚de‡
OPENSSL_DHERR_H


12 
	#OPENSSL_DHERR_H


	)

13 #¥agm®
⁄˚


15 
	~<›ís¶/›ís¶c⁄f.h
>

16 
	~<›ís¶/symhacks.h
>

17 
	~<›ís¶/¸y±€º_Àgacy.h
>

20 #i‚de‡
OPENSSL_NO_DH


26 
	#DH_R_BAD_FFC_PARAMETERS
 127

	)

27 
	#DH_R_BAD_GENERATOR
 101

	)

28 
	#DH_R_BN_DECODE_ERROR
 109

	)

29 
	#DH_R_BN_ERROR
 106

	)

30 
	#DH_R_CHECK_INVALID_J_VALUE
 115

	)

31 
	#DH_R_CHECK_INVALID_Q_VALUE
 116

	)

32 
	#DH_R_CHECK_PUBKEY_INVALID
 122

	)

33 
	#DH_R_CHECK_PUBKEY_TOO_LARGE
 123

	)

34 
	#DH_R_CHECK_PUBKEY_TOO_SMALL
 124

	)

35 
	#DH_R_CHECK_P_NOT_PRIME
 117

	)

36 
	#DH_R_CHECK_P_NOT_SAFE_PRIME
 118

	)

37 
	#DH_R_CHECK_Q_NOT_PRIME
 119

	)

38 
	#DH_R_DECODE_ERROR
 104

	)

39 
	#DH_R_INVALID_PARAMETER_NAME
 110

	)

40 
	#DH_R_INVALID_PARAMETER_NID
 114

	)

41 
	#DH_R_INVALID_PUBKEY
 102

	)

42 
	#DH_R_INVALID_SECRET
 128

	)

43 
	#DH_R_KDF_PARAMETER_ERROR
 112

	)

44 
	#DH_R_KEYS_NOT_SET
 108

	)

45 
	#DH_R_MISSING_PUBKEY
 125

	)

46 
	#DH_R_MODULUS_TOO_LARGE
 103

	)

47 
	#DH_R_MODULUS_TOO_SMALL
 126

	)

48 
	#DH_R_NOT_SUITABLE_GENERATOR
 120

	)

49 
	#DH_R_NO_PARAMETERS_SET
 107

	)

50 
	#DH_R_NO_PRIVATE_VALUE
 100

	)

51 
	#DH_R_PARAMETER_ENCODING_ERROR
 105

	)

52 
	#DH_R_PEER_KEY_ERROR
 111

	)

53 
	#DH_R_SHARED_INFO_ERROR
 113

	)

54 
	#DH_R_UNABLE_TO_CHECK_GENERATOR
 121

	)

	@/usr/include/openssl/dsa.h

10 #i‚de‡
OPENSSL_DSA_H


11 
	#OPENSSL_DSA_H


	)

12 #¥agm®
⁄˚


14 
	~<›ís¶/ma¸os.h
>

15 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


16 
	#HEADER_DSA_H


	)

19 
	~<›ís¶/›ís¶c⁄f.h
>

20 
	~<›ís¶/ty≥s.h
>

22 #ifde‡ 
__˝lu•lus


26 
	~<°dlib.h
>

28 
EVP_PKEY_CTX_£t_dß_∑ømgí_bôs
(
EVP_PKEY_CTX
 *
˘x
, 
nbôs
);

29 
EVP_PKEY_CTX_£t_dß_∑ømgí_q_bôs
(
EVP_PKEY_CTX
 *
˘x
, 
qbôs
);

30 
EVP_PKEY_CTX_£t_dß_∑ømgí_md_¥›s
(
EVP_PKEY_CTX
 *
˘x
,

31 c⁄° *
md_«me
,

32 c⁄° *
md_¥›îtõs
);

33 
EVP_PKEY_CTX_£t_dß_∑ømgí_gödex
(
EVP_PKEY_CTX
 *
˘x
, 
gödex
);

34 
EVP_PKEY_CTX_£t_dß_∑ømgí_ty≥
(
EVP_PKEY_CTX
 *
˘x
, c⁄° *
«me
);

35 
EVP_PKEY_CTX_£t_dß_∑ømgí_£ed
(
EVP_PKEY_CTX
 *
˘x
,

36 c⁄° *
£ed
,

37 
size_t
 
£edÀn
);

38 
EVP_PKEY_CTX_£t_dß_∑ømgí_md
(
EVP_PKEY_CTX
 *
˘x
, c⁄° 
EVP_MD
 *
md
);

40 
	#EVP_PKEY_CTRL_DSA_PARAMGEN_BITS
 (
EVP_PKEY_ALG_CTRL
 + 1)

	)

41 
	#EVP_PKEY_CTRL_DSA_PARAMGEN_Q_BITS
 (
EVP_PKEY_ALG_CTRL
 + 2)

	)

42 
	#EVP_PKEY_CTRL_DSA_PARAMGEN_MD
 (
EVP_PKEY_ALG_CTRL
 + 3)

	)

44 #i‚de‡
OPENSSL_NO_DSA


45 
	~<›ís¶/e_os2.h
>

46 
	~<›ís¶/a¢1.h
>

47 
	~<›ís¶/bio.h
>

48 
	~<›ís¶/¸y±o.h
>

49 
	~<›ís¶/bn.h
>

50 #i‚de‡
OPENSSL_NO_DEPRECATED_1_1_0


51 
	~<›ís¶/dh.h
>

53 
	~<›ís¶/dßîr.h
>

55 #i‚de‡
OPENSSL_DSA_MAX_MODULUS_BITS


56 
	#OPENSSL_DSA_MAX_MODULUS_BITS
 10000

	)

59 
	#OPENSSL_DSA_FIPS_MIN_MODULUS_BITS
 1024

	)

61 
DSA_SIG_°
 
	tDSA_SIG
;

62 
DSA_SIG
 *
DSA_SIG_√w
();

63 
DSA_SIG_‰ì
(
DSA_SIG
 *
a
);

64 
DECLARE_ASN1_ENCODE_FUNCTIONS_⁄ly
(
DSA_SIG
, DSA_SIG)

65 
DSA_SIG_gë0
(c⁄° 
DSA_SIG
 *
sig
, c⁄° 
BIGNUM
 **
¥
, c⁄° BIGNUM **
ps
);

66 
DSA_SIG_£t0
(
DSA_SIG
 *
sig
, 
BIGNUM
 *
r
, BIGNUM *
s
);

69 #i‚de‡
OPENSSL_NO_DEPRECATED_1_1_0


73 
	#DSA_FLAG_NO_EXP_CONSTTIME
 0x00

	)

76 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


77 
	#DSA_FLAG_CACHE_MONT_P
 0x01

	)

86 
	#DSA_FLAG_FIPS_METHOD
 0x0400

	)

94 
	#DSA_FLAG_NON_FIPS_ALLOW
 0x0400

	)

95 
	#DSA_FLAG_FIPS_CHECKED
 0x0800

	)

101 
	#d2i_DSA∑øms_Â
(
Â
, 
x
) \

102 (
DSA
 *)
	`ASN1_d2i_Â
((*(*)())
DSA_√w
, \

103 (*(*)())
d2i_DSA∑øms
, (
Â
), \

104 (**)(
x
))

	)

105 
	#i2d_DSA∑øms_Â
(
Â
, 
x
) \

106 
	`ASN1_i2d_Â
(
i2d_DSA∑øms
, (
Â
), (*)(
x
))

	)

107 
	#d2i_DSA∑øms_bio
(
bp
, 
x
) \

108 
	`ASN1_d2i_bio_of
(
DSA
, 
DSA_√w
, 
d2i_DSA∑øms
, 
bp
, 
x
)

	)

109 
	#i2d_DSA∑øms_bio
(
bp
, 
x
) \

110 
	`ASN1_i2d_bio_of
(
DSA
, 
i2d_DSA∑øms
, 
bp
, 
x
)

	)

112 
DECLARE_ASN1_DUP_FUNCTION_«me_©å
(
OSSL_DEPRECATEDIN_3_0
, 
DSA
, 
DSA∑øms
)

113 
OSSL_DEPRECATEDIN_3_0
 
DSA_SIG
 *
DSA_do_sign
(c⁄° *
dg°
, 
dÀn
,

114 
DSA
 *
dß
);

115 
OSSL_DEPRECATEDIN_3_0
 
DSA_do_vîify
(c⁄° *
dg°
, 
dg°_Àn
,

116 
DSA_SIG
 *
sig
, 
DSA
 *
dß
);

118 
OSSL_DEPRECATEDIN_3_0
 c⁄° 
DSA_METHOD
 *
DSA_O≥nSSL
();

120 
OSSL_DEPRECATEDIN_3_0
 
DSA_£t_deÁu…_mëhod
(c⁄° 
DSA_METHOD
 *);

121 
OSSL_DEPRECATEDIN_3_0
 c⁄° 
DSA_METHOD
 *
DSA_gë_deÁu…_mëhod
();

122 
OSSL_DEPRECATEDIN_3_0
 
DSA_£t_mëhod
(
DSA
 *
dß
, c⁄° 
DSA_METHOD
 *);

123 
OSSL_DEPRECATEDIN_3_0
 c⁄° 
DSA_METHOD
 *
DSA_gë_mëhod
(
DSA
 *
d
);

125 
OSSL_DEPRECATEDIN_3_0
 
DSA
 *
DSA_√w
();

126 
OSSL_DEPRECATEDIN_3_0
 
DSA
 *
DSA_√w_mëhod
(
ENGINE
 *
ígöe
);

127 
OSSL_DEPRECATEDIN_3_0
 
DSA_‰ì
(
DSA
 *
r
);

129 
OSSL_DEPRECATEDIN_3_0
 
DSA_up_ªf
(
DSA
 *
r
);

130 
OSSL_DEPRECATEDIN_3_0
 
DSA_size
(c⁄° 
DSA
 *);

131 
OSSL_DEPRECATEDIN_3_0
 
DSA_bôs
(c⁄° 
DSA
 *
d
);

132 
OSSL_DEPRECATEDIN_3_0
 
DSA_£curôy_bôs
(c⁄° 
DSA
 *
d
);

134 
OSSL_DEPRECATEDIN_3_0
 
DSA_sign_£tup
(
DSA
 *
dß
, 
BN_CTX
 *
˘x_ö
,

135 
BIGNUM
 **
kövp
, BIGNUM **
Ω
);

136 
OSSL_DEPRECATEDIN_3_0
 
DSA_sign
(
ty≥
, c⁄° *
dg°
,

137 
dÀn
, *
sig
,

138 *
sigÀn
, 
DSA
 *
dß
);

139 
OSSL_DEPRECATEDIN_3_0
 
DSA_vîify
(
ty≥
, c⁄° *
dg°
,

140 
dg°_Àn
, c⁄° *
sigbuf
,

141 
sigÀn
, 
DSA
 *
dß
);

143 
	#DSA_gë_ex_√w_ödex
(
l
, 
p
, 
√wf
, 
dupf
, 
‰ìf
) \

144 
	`CRYPTO_gë_ex_√w_ödex
(
CRYPTO_EX_INDEX_DSA
, 
l
, 
p
, 
√wf
, 
dupf
, 
‰ìf
)

	)

145 
OSSL_DEPRECATEDIN_3_0
 
DSA_£t_ex_d©a
(
DSA
 *
d
, 
idx
, *
¨g
);

146 
OSSL_DEPRECATEDIN_3_0
 *
DSA_gë_ex_d©a
(c⁄° 
DSA
 *
d
, 
idx
);

148 
DECLARE_ASN1_ENCODE_FUNCTIONS_⁄ly_©å
(
OSSL_DEPRECATEDIN_3_0
,

149 
DSA
, 
DSAPublicKey
)

150 
DECLARE_ASN1_ENCODE_FUNCTIONS_⁄ly_©å
(
OSSL_DEPRECATEDIN_3_0
,

151 
DSA
, 
DSAPriv©eKey
)

152 
DECLARE_ASN1_ENCODE_FUNCTIONS_⁄ly_©å
(
OSSL_DEPRECATEDIN_3_0
,

153 
DSA
, 
DSA∑øms
)

156 #i‚de‡
OPENSSL_NO_DEPRECATED_0_9_8


158 
OSSL_DEPRECATEDIN_0_9_8


159 
DSA
 *
DSA_gíî©e_∑ømëîs
(
bôs
, *
£ed
, 
£ed_Àn
,

160 *
cou¡î_ªt
, *
h_ªt
,

161 (*
ˇŒback
) (, , *),

162 *
cb_¨g
);

165 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


167 
OSSL_DEPRECATEDIN_3_0
 
DSA_gíî©e_∑ømëîs_ex
(
DSA
 *
dß
, 
bôs
,

168 c⁄° *
£ed
,

169 
£ed_Àn
,

170 *
cou¡î_ªt
,

171 *
h_ªt
,

172 
BN_GENCB
 *
cb
);

174 
OSSL_DEPRECATEDIN_3_0
 
DSA_gíî©e_key
(
DSA
 *
a
);

176 
OSSL_DEPRECATEDIN_3_0
 
DSA∑øms_¥öt
(
BIO
 *
bp
, c⁄° 
DSA
 *
x
);

177 
OSSL_DEPRECATEDIN_3_0
 
DSA_¥öt
(
BIO
 *
bp
, c⁄° 
DSA
 *
x
, 
off
);

178 #i‚de‡
OPENSSL_NO_STDIO


179 
OSSL_DEPRECATEDIN_3_0
 
DSA∑øms_¥öt_Â
(
FILE
 *
Â
, c⁄° 
DSA
 *
x
);

180 
OSSL_DEPRECATEDIN_3_0
 
DSA_¥öt_Â
(
FILE
 *
bp
, c⁄° 
DSA
 *
x
, 
off
);

183 
	#DSS_¥ime_checks
 64

	)

190 
	#DSA_is_¥ime
(
n
, 
ˇŒback
, 
cb_¨g
) \

191 
	`BN_is_¥ime
(
n
, 
DSS_¥ime_checks
, 
ˇŒback
, 
NULL
, 
cb_¨g
)

	)

193 #i‚de‡
OPENSSL_NO_DH


198 
OSSL_DEPRECATEDIN_3_0
 
DH
 *
DSA_dup_DH
(c⁄° 
DSA
 *
r
);

201 
OSSL_DEPRECATEDIN_3_0
 
DSA_gë0_pqg
(c⁄° 
DSA
 *
d
, c⁄° 
BIGNUM
 **
p
,

202 c⁄° 
BIGNUM
 **
q
, c⁄° BIGNUM **
g
);

203 
OSSL_DEPRECATEDIN_3_0
 
DSA_£t0_pqg
(
DSA
 *
d
, 
BIGNUM
 *
p
, BIGNUM *
q
, BIGNUM *
g
);

204 
OSSL_DEPRECATEDIN_3_0
 
DSA_gë0_key
(c⁄° 
DSA
 *
d
, c⁄° 
BIGNUM
 **
pub_key
,

205 c⁄° 
BIGNUM
 **
¥iv_key
);

206 
OSSL_DEPRECATEDIN_3_0
 
DSA_£t0_key
(
DSA
 *
d
, 
BIGNUM
 *
pub_key
,

207 
BIGNUM
 *
¥iv_key
);

208 
OSSL_DEPRECATEDIN_3_0
 c⁄° 
BIGNUM
 *
DSA_gë0_p
(c⁄° 
DSA
 *
d
);

209 
OSSL_DEPRECATEDIN_3_0
 c⁄° 
BIGNUM
 *
DSA_gë0_q
(c⁄° 
DSA
 *
d
);

210 
OSSL_DEPRECATEDIN_3_0
 c⁄° 
BIGNUM
 *
DSA_gë0_g
(c⁄° 
DSA
 *
d
);

211 
OSSL_DEPRECATEDIN_3_0
 c⁄° 
BIGNUM
 *
DSA_gë0_pub_key
(c⁄° 
DSA
 *
d
);

212 
OSSL_DEPRECATEDIN_3_0
 c⁄° 
BIGNUM
 *
DSA_gë0_¥iv_key
(c⁄° 
DSA
 *
d
);

213 
OSSL_DEPRECATEDIN_3_0
 
DSA_˛ór_Êags
(
DSA
 *
d
, 
Êags
);

214 
OSSL_DEPRECATEDIN_3_0
 
DSA_ã°_Êags
(c⁄° 
DSA
 *
d
, 
Êags
);

215 
OSSL_DEPRECATEDIN_3_0
 
DSA_£t_Êags
(
DSA
 *
d
, 
Êags
);

216 
OSSL_DEPRECATEDIN_3_0
 
ENGINE
 *
DSA_gë0_ígöe
(
DSA
 *
d
);

218 
OSSL_DEPRECATEDIN_3_0
 
DSA_METHOD
 *
DSA_mëh_√w
(c⁄° *
«me
, 
Êags
);

219 
OSSL_DEPRECATEDIN_3_0
 
DSA_mëh_‰ì
(
DSA_METHOD
 *
dßm
);

220 
OSSL_DEPRECATEDIN_3_0
 
DSA_METHOD
 *
DSA_mëh_dup
(c⁄° DSA_METHOD *
dßm
);

221 
OSSL_DEPRECATEDIN_3_0
 c⁄° *
DSA_mëh_gë0_«me
(c⁄° 
DSA_METHOD
 *
dßm
);

222 
OSSL_DEPRECATEDIN_3_0
 
DSA_mëh_£t1_«me
(
DSA_METHOD
 *
dßm
,

223 c⁄° *
«me
);

224 
OSSL_DEPRECATEDIN_3_0
 
DSA_mëh_gë_Êags
(c⁄° 
DSA_METHOD
 *
dßm
);

225 
OSSL_DEPRECATEDIN_3_0
 
DSA_mëh_£t_Êags
(
DSA_METHOD
 *
dßm
, 
Êags
);

226 
OSSL_DEPRECATEDIN_3_0
 *
DSA_mëh_gë0_≠p_d©a
(c⁄° 
DSA_METHOD
 *
dßm
);

227 
OSSL_DEPRECATEDIN_3_0
 
DSA_mëh_£t0_≠p_d©a
(
DSA_METHOD
 *
dßm
,

228 *
≠p_d©a
);

229 
OSSL_DEPRECATEDIN_3_0
 
DSA_SIG
 *(*
DSA_mëh_gë_sign
(c⁄° 
DSA_METHOD
 *
dßm
))

230 (c⁄° *, , 
DSA
 *);

231 
OSSL_DEPRECATEDIN_3_0
 
DSA_mëh_£t_sign
(
DSA_METHOD
 *
dßm
,

232 
DSA_SIG
 *(*
sign
Ë(c⁄° *, , 
DSA
 *));

233 
OSSL_DEPRECATEDIN_3_0
 (*
DSA_mëh_gë_sign_£tup
(c⁄° 
DSA_METHOD
 *
dßm
))

234 (
DSA
 *, 
BN_CTX
 *, 
BIGNUM
 **, BIGNUM **);

235 
OSSL_DEPRECATEDIN_3_0
 
DSA_mëh_£t_sign_£tup
(
DSA_METHOD
 *
dßm
,

236 (*
sign_£tup
Ë(
DSA
 *, 
BN_CTX
 *, 
BIGNUM
 **, BIGNUM **));

237 
OSSL_DEPRECATEDIN_3_0
 (*
DSA_mëh_gë_vîify
(c⁄° 
DSA_METHOD
 *
dßm
))

238 (c⁄° *, , 
DSA_SIG
 *, 
DSA
 *);

239 
OSSL_DEPRECATEDIN_3_0
 
DSA_mëh_£t_vîify
(
DSA_METHOD
 *
dßm
,

240 (*
vîify
Ë(c⁄° *, , 
DSA_SIG
 *, 
DSA
 *));

241 
OSSL_DEPRECATEDIN_3_0
 (*
DSA_mëh_gë_mod_exp
(c⁄° 
DSA_METHOD
 *
dßm
))

242 (
DSA
 *, 
BIGNUM
 *, const BIGNUM *, const BIGNUM *, const BIGNUM *,

243 c⁄° 
BIGNUM
 *, c⁄° BIGNUM *, 
BN_CTX
 *, 
BN_MONT_CTX
 *);

244 
OSSL_DEPRECATEDIN_3_0
 
DSA_mëh_£t_mod_exp
(
DSA_METHOD
 *
dßm
,

245 (*
mod_exp
Ë(
DSA
 *, 
BIGNUM
 *, const BIGNUM *, const BIGNUM *,

246 c⁄° 
BIGNUM
 *, c⁄° BIGNUM *, c⁄° BIGNUM *, 
BN_CTX
 *,

247 
BN_MONT_CTX
 *));

248 
OSSL_DEPRECATEDIN_3_0
 (*
DSA_mëh_gë_bn_mod_exp
(c⁄° 
DSA_METHOD
 *
dßm
))

249 (
DSA
 *, 
BIGNUM
 *, const BIGNUM *, const BIGNUM *, const BIGNUM *,

250 
BN_CTX
 *, 
BN_MONT_CTX
 *);

251 
OSSL_DEPRECATEDIN_3_0
 
DSA_mëh_£t_bn_mod_exp
(
DSA_METHOD
 *
dßm
,

252 (*
bn_mod_exp
Ë(
DSA
 *, 
BIGNUM
 *, const BIGNUM *, const BIGNUM *,

253 c⁄° 
BIGNUM
 *, 
BN_CTX
 *, 
BN_MONT_CTX
 *));

254 
OSSL_DEPRECATEDIN_3_0
 (*
DSA_mëh_gë_öô
(c⁄° 
DSA_METHOD
 *
dßm
))(
DSA
 *);

255 
OSSL_DEPRECATEDIN_3_0
 
DSA_mëh_£t_öô
(
DSA_METHOD
 *
dßm
,

256 (*
öô
)(
DSA
 *));

257 
OSSL_DEPRECATEDIN_3_0
 (*
DSA_mëh_gë_föish
(c⁄° 
DSA_METHOD
 *
dßm
))(
DSA
 *);

258 
OSSL_DEPRECATEDIN_3_0
 
DSA_mëh_£t_föish
(
DSA_METHOD
 *
dßm
,

259 (*
föish
)(
DSA
 *));

260 
OSSL_DEPRECATEDIN_3_0
 (*
DSA_mëh_gë_∑ømgí
(c⁄° 
DSA_METHOD
 *
dßm
))

261 (
DSA
 *, , const *, , *, *,

262 
BN_GENCB
 *);

263 
OSSL_DEPRECATEDIN_3_0
 
DSA_mëh_£t_∑ømgí
(
DSA_METHOD
 *
dßm
,

264 (*
∑ømgí
Ë(
DSA
 *, , const *, , *,

265 *, 
BN_GENCB
 *));

266 
OSSL_DEPRECATEDIN_3_0
 (*
DSA_mëh_gë_keygí
(c⁄° 
DSA_METHOD
 *
dßm
))(
DSA
 *);

267 
OSSL_DEPRECATEDIN_3_0
 
DSA_mëh_£t_keygí
(
DSA_METHOD
 *
dßm
,

268 (*
keygí
Ë(
DSA
 *));

272 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/dtls1.h

10 #i‚de‡
OPENSSL_DTLS1_H


11 
	#OPENSSL_DTLS1_H


	)

12 #¥agm®
⁄˚


14 
	~<›ís¶/ma¸os.h
>

15 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


16 
	#HEADER_DTLS1_H


	)

19 
	~<›ís¶/¥ov_s¶.h
>

21 #ifde‡ 
__˝lu•lus


25 
	~<›ís¶/›ís¶c⁄f.h
>

28 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


29 
	#DTLS_MIN_VERSION
 
DTLS1_VERSION


	)

30 
	#DTLS_MAX_VERSION
 
DTLS1_2_VERSION


	)

32 
	#DTLS1_VERSION_MAJOR
 0xFE

	)

35 
	#DTLS_ANY_VERSION
 0x1FFFF

	)

39 
	#DTLS1_COOKIE_LENGTH
 255

	)

41 
	#DTLS1_RT_HEADER_LENGTH
 13

	)

43 
	#DTLS1_HM_HEADER_LENGTH
 12

	)

45 
	#DTLS1_HM_BAD_FRAGMENT
 -2

	)

46 
	#DTLS1_HM_FRAGMENT_RETRY
 -3

	)

48 
	#DTLS1_CCS_HEADER_LENGTH
 1

	)

50 
	#DTLS1_AL_HEADER_LENGTH
 2

	)

52 
	#DTLS1_TMO_ALERT_COUNT
 12

	)

54 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/e_os2.h

10 #i‚de‡
OPENSSL_E_OS2_H


11 
	#OPENSSL_E_OS2_H


	)

12 #¥agm®
⁄˚


14 
	~<›ís¶/ma¸os.h
>

15 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


16 
	#HEADER_E_OS2_H


	)

19 
	~<›ís¶/›ís¶c⁄f.h
>

21 #ifde‡ 
__˝lu•lus


31 
	#OPENSSL_SYS_UNIX


	)

39 #i‡
deföed
(
OPENSSL_SYS_MSDOS
)

40 #unde‡
OPENSSL_SYS_UNIX


51 #i‡
deföed
(
OPENSSL_SYS_UEFI
)

52 #unde‡
OPENSSL_SYS_UNIX


53 #ñi‡
deföed
(
OPENSSL_SYS_UWIN
)

54 #unde‡
OPENSSL_SYS_UNIX


55 
	#OPENSSL_SYS_WIN32_UWIN


	)

57 #i‡
deföed
(
__CYGWIN__
Ë|| deföed(
OPENSSL_SYS_CYGWIN
)

58 
	#OPENSSL_SYS_WIN32_CYGWIN


	)

60 #i‡
deföed
(
_WIN32
Ë|| deföed(
OPENSSL_SYS_WIN32
)

61 #unde‡
OPENSSL_SYS_UNIX


62 #i‡!
deföed
(
OPENSSL_SYS_WIN32
)

63 
	#OPENSSL_SYS_WIN32


	)

66 #i‡
deföed
(
_WIN64
Ë|| deföed(
OPENSSL_SYS_WIN64
)

67 #unde‡
OPENSSL_SYS_UNIX


68 #i‡!
deföed
(
OPENSSL_SYS_WIN64
)

69 
	#OPENSSL_SYS_WIN64


	)

72 #i‡
deföed
(
OPENSSL_SYS_WINNT
)

73 #unde‡
OPENSSL_SYS_UNIX


75 #i‡
deföed
(
OPENSSL_SYS_WINCE
)

76 #unde‡
OPENSSL_SYS_UNIX


82 #i‡
deföed
(
OPENSSL_SYS_WIN32
Ë|| deföed(
OPENSSL_SYS_WIN64
Ë|| deföed(
OPENSSL_SYS_WINNT
Ë|| deföed(
OPENSSL_SYS_WINCE
)

83 #unde‡
OPENSSL_SYS_UNIX


84 
	#OPENSSL_SYS_WINDOWS


	)

85 #i‚de‡
OPENSSL_SYS_MSDOS


86 
	#OPENSSL_SYS_MSDOS


	)

95 #ifde‡
OPENSSL_SYS_WINDOWS


96 #i‚de‡
OPENSSL_OPT_WINDLL


97 #i‡
deföed
(
_WINDLL
)

99 
	#OPENSSL_OPT_WINDLL


	)

105 #i‡
deföed
(
__VMS
Ë|| deföed(
VMS
)

106 #i‡!
deföed
(
OPENSSL_SYS_VMS
)

107 #unde‡
OPENSSL_SYS_UNIX


108 
	#OPENSSL_SYS_VMS


	)

110 #i‡
deföed
(
__DECC
)

111 
	#OPENSSL_SYS_VMS_DECC


	)

112 #ñi‡
deföed
(
__DECCXX
)

113 
	#OPENSSL_SYS_VMS_DECC


	)

114 
	#OPENSSL_SYS_VMS_DECCXX


	)

116 
	#OPENSSL_SYS_VMS_NODECC


	)

121 #ifde‡
OPENSSL_SYS_UNIX


122 #i‡
deföed
(
löux
Ë|| deföed(
__löux__
Ë&& !deföed(
OPENSSL_SYS_LINUX
)

123 
	#OPENSSL_SYS_LINUX


	)

125 #i‡
deföed
(
_AIX
Ë&& !deföed(
OPENSSL_SYS_AIX
)

126 
	#OPENSSL_SYS_AIX


	)

131 #i‡
deföed
(
__VOS__
Ë&& !deföed(
OPENSSL_SYS_VOS
)

132 
	#OPENSSL_SYS_VOS


	)

133 #ifde‡
__HPPA__


134 
	#OPENSSL_SYS_VOS_HPPA


	)

136 #ifde‡
__IA32__


137 
	#OPENSSL_SYS_VOS_IA32


	)

142 #ifde‡
__TANDEM


143 #ifde‡
_STRING


144 
	~<°rögs.h
>

146 
	#OPENSSL_USE_BUILD_DATE


	)

147 #i‡
deföed
(
OPENSSL_THREADS
Ë&& deföed(
_SPT_MODEL_
)

148 
	#SPT_THREAD_SIGNAL
 1

	)

149 
	#SPT_THREAD_AWARE
 1

	)

150 
	~<•thªad.h
>

151 #ñi‡
deföed
(
OPENSSL_THREADS
Ë&& deföed(
_PUT_MODEL_
)

152 
	~<±hªad.h
>

179 #i‡
deföed
(
OPENSSL_SYS_WINDOWS
Ë&& deföed(
OPENSSL_OPT_WINDLL
)

180 
	#OPENSSL_EXPORT
 
	`__de˛•ec
(
dŒexp‹t
)

	)

181 
	#OPENSSL_EXTERN
 
	`__de˛•ec
(
dŒimp‹t
)

	)

183 
	#OPENSSL_EXPORT
 

	)

184 
	#OPENSSL_EXTERN
 

	)

187 #ifde‡
_WIN32


188 #ifde‡
_WIN64


189 
	#os¶_ssize_t
 
__öt64


	)

190 
	#OSSL_SSIZE_MAX
 
_I64_MAX


	)

192 
	#os¶_ssize_t
 

	)

193 
	#OSSL_SSIZE_MAX
 
INT_MAX


	)

197 #i‡
deföed
(
OPENSSL_SYS_UEFI
Ë&& !deföed(
os¶_ssize_t
)

198 
	#os¶_ssize_t
 
INTN


	)

199 
	#OSSL_SSIZE_MAX
 
MAX_INTN


	)

202 #i‚de‡
os¶_ssize_t


203 
	#os¶_ssize_t
 
ssize_t


	)

204 #i‡
deföed
(
SSIZE_MAX
)

205 
	#OSSL_SSIZE_MAX
 
SSIZE_MAX


	)

206 #ñi‡
deföed
(
_POSIX_SSIZE_MAX
)

207 
	#OSSL_SSIZE_MAX
 
_POSIX_SSIZE_MAX


	)

209 
	#OSSL_SSIZE_MAX
 ((
ssize_t
)(
SIZE_MAX
>>1))

	)

213 #i‡
deföed
(
UNUSEDRESULT_DEBUG
)

214 
	#__owur
 
	`__©åibuã__
((
__w¨n_unu£d_ªsu…__
))

	)

216 
	#__owur


	)

220 
	#OPENSSL_NO_INTTYPES_H


	)

221 
	#OPENSSL_NO_STDINT_H


	)

222 #i‡
deföed
(
OPENSSL_SYS_UEFI
)

223 
INT8
 
	töt8_t
;

224 
UINT8
 
	tuöt8_t
;

225 
INT16
 
	töt16_t
;

226 
UINT16
 
	tuöt16_t
;

227 
INT32
 
	töt32_t
;

228 
UINT32
 
	tuöt32_t
;

229 
INT64
 
	töt64_t
;

230 
UINT64
 
	tuöt64_t
;

231 #ñi‡(
deföed
(
__STDC_VERSION__
) && __STDC_VERSION__ >= 199901L) || \

232 
deföed
(
__osf__
Ë|| deföed(
__sgi
Ë|| deföed(
__hpux
) || \

233 
deföed
(
OPENSSL_SYS_VMS
Ë|| deföed (
__O≥nBSD__
)

234 
	~<öây≥s.h
>

235 #unde‡
OPENSSL_NO_INTTYPES_H


237 #unde‡
OPENSSL_NO_STDINT_H


238 #ñi‡
deföed
(
_MSC_VER
) && _MSC_VER<1600

243 sig√d 
	töt8_t
;

244 
	tuöt8_t
;

245 
	töt16_t
;

246 
	tuöt16_t
;

247 
	töt32_t
;

248 
	tuöt32_t
;

249 
__öt64
 
	töt64_t
;

250 
	t__öt64
 
	tuöt64_t
;

252 
	~<°döt.h
>

253 #unde‡
OPENSSL_NO_STDINT_H


255 #i‡
deföed
(
__STDC_VERSION__
) && __STDC_VERSION__ >= 199901L && \

256 
deföed
(
INTMAX_MAX
Ë&& deföed(
UINTMAX_MAX
)

257 
ötmax_t
 
	tos¶_ötmax_t
;

258 
uötmax_t
 
	tos¶_uötmax_t
;

261 
öt64_t
 
	tos¶_ötmax_t
;

262 
uöt64_t
 
	tos¶_uötmax_t
;

266 #i‡!
deföed
(
ölöe
Ë&& !deföed(
__˝lu•lus
)

267 #i‡
deföed
(
__STDC_VERSION__
) && __STDC_VERSION__>=199901L

269 
	#os¶_ölöe
 
ölöe


	)

270 #ñi‡
deföed
(
__GNUC__
) && __GNUC__>=2

271 
	#os¶_ölöe
 
__ölöe__


	)

272 #ñi‡
deföed
(
_MSC_VER
)

278 
	#os¶_ölöe
 
__ölöe


	)

280 
	#os¶_ölöe


	)

283 
	#os¶_ölöe
 
ölöe


	)

286 #i‡
deföed
(
__STDC_VERSION__
) && __STDC_VERSION__ >= 201112L && \

287 !
deföed
(
__˝lu•lus
)

288 
	#os¶_n‹ëu∫
 
_N‹ëu∫


	)

289 #ñi‡
deföed
(
__GNUC__
) && __GNUC__ >= 2

290 
	#os¶_n‹ëu∫
 
	`__©åibuã__
((
n‹ëu∫
))

	)

292 
	#os¶_n‹ëu∫


	)

296 #i‡
deföed
(
__GNUC__
)

297 
	#os¶_unu£d
 
	`__©åibuã__
((
unu£d
))

	)

299 
	#os¶_unu£d


	)

302 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/ec.h

11 #i‚de‡
OPENSSL_EC_H


12 
	#OPENSSL_EC_H


	)

13 #¥agm®
⁄˚


15 
	~<›ís¶/ma¸os.h
>

16 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


17 
	#HEADER_EC_H


	)

20 
	~<›ís¶/›ís¶c⁄f.h
>

21 
	~<›ís¶/ty≥s.h
>

23 
	~<°rög.h
>

25 #ifde‡ 
__˝lu•lus


30 
	#OPENSSL_EC_EXPLICIT_CURVE
 0x000

	)

31 
	#OPENSSL_EC_NAMED_CURVE
 0x001

	)

33 
EVP_PKEY_CTX_£t_ec_∑ømgí_curve_nid
(
EVP_PKEY_CTX
 *
˘x
, 
nid
);

34 
EVP_PKEY_CTX_£t_ec_∑øm_íc
(
EVP_PKEY_CTX
 *
˘x
, 
∑øm_íc
);

35 
EVP_PKEY_CTX_£t_ecdh_coÁ˘‹_mode
(
EVP_PKEY_CTX
 *
˘x
, 
coÁ˘‹_mode
);

36 
EVP_PKEY_CTX_gë_ecdh_coÁ˘‹_mode
(
EVP_PKEY_CTX
 *
˘x
);

38 
EVP_PKEY_CTX_£t_ecdh_kdf_ty≥
(
EVP_PKEY_CTX
 *
˘x
, 
kdf
);

39 
EVP_PKEY_CTX_gë_ecdh_kdf_ty≥
(
EVP_PKEY_CTX
 *
˘x
);

41 
EVP_PKEY_CTX_£t_ecdh_kdf_md
(
EVP_PKEY_CTX
 *
˘x
, c⁄° 
EVP_MD
 *
md
);

42 
EVP_PKEY_CTX_gë_ecdh_kdf_md
(
EVP_PKEY_CTX
 *
˘x
, c⁄° 
EVP_MD
 **
md
);

44 
EVP_PKEY_CTX_£t_ecdh_kdf_ouéí
(
EVP_PKEY_CTX
 *
˘x
, 
Àn
);

45 
EVP_PKEY_CTX_gë_ecdh_kdf_ouéí
(
EVP_PKEY_CTX
 *
˘x
, *
Àn
);

47 
EVP_PKEY_CTX_£t0_ecdh_kdf_ukm
(
EVP_PKEY_CTX
 *
˘x
, *
ukm
,

48 
Àn
);

49 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


50 
OSSL_DEPRECATEDIN_3_0


51 
EVP_PKEY_CTX_gë0_ecdh_kdf_ukm
(
EVP_PKEY_CTX
 *
˘x
, **
ukm
);

54 
	#EVP_PKEY_CTRL_EC_PARAMGEN_CURVE_NID
 (
EVP_PKEY_ALG_CTRL
 + 1)

	)

55 
	#EVP_PKEY_CTRL_EC_PARAM_ENC
 (
EVP_PKEY_ALG_CTRL
 + 2)

	)

56 
	#EVP_PKEY_CTRL_EC_ECDH_COFACTOR
 (
EVP_PKEY_ALG_CTRL
 + 3)

	)

57 
	#EVP_PKEY_CTRL_EC_KDF_TYPE
 (
EVP_PKEY_ALG_CTRL
 + 4)

	)

58 
	#EVP_PKEY_CTRL_EC_KDF_MD
 (
EVP_PKEY_ALG_CTRL
 + 5)

	)

59 
	#EVP_PKEY_CTRL_GET_EC_KDF_MD
 (
EVP_PKEY_ALG_CTRL
 + 6)

	)

60 
	#EVP_PKEY_CTRL_EC_KDF_OUTLEN
 (
EVP_PKEY_ALG_CTRL
 + 7)

	)

61 
	#EVP_PKEY_CTRL_GET_EC_KDF_OUTLEN
 (
EVP_PKEY_ALG_CTRL
 + 8)

	)

62 
	#EVP_PKEY_CTRL_EC_KDF_UKM
 (
EVP_PKEY_ALG_CTRL
 + 9)

	)

63 
	#EVP_PKEY_CTRL_GET_EC_KDF_UKM
 (
EVP_PKEY_ALG_CTRL
 + 10)

	)

66 
	#EVP_PKEY_ECDH_KDF_NONE
 1

	)

67 
	#EVP_PKEY_ECDH_KDF_X9_63
 2

	)

74 
	#EVP_PKEY_ECDH_KDF_X9_62
 
EVP_PKEY_ECDH_KDF_X9_63


	)

81 
POINT_CONVERSION_COMPRESSED
 = 2,

83 
POINT_CONVERSION_UNCOMPRESSED
 = 4,

86 
POINT_CONVERSION_HYBRID
 = 6

87 } 
	tpoöt_c⁄vîsi⁄_f‹m_t
;

89 c⁄° *
OSSL_EC_curve_nid2«me
(
nid
);

91 #i‚de‡
OPENSSL_NO_EC


92 
	~<›ís¶/a¢1.h
>

93 
	~<›ís¶/symhacks.h
>

94 #i‚de‡
OPENSSL_NO_DEPRECATED_1_1_0


95 
	~<›ís¶/bn.h
>

97 
	~<›ís¶/e˚º.h
>

99 #i‚de‡
OPENSSL_ECC_MAX_FIELD_BITS


100 
	#OPENSSL_ECC_MAX_FIELD_BITS
 661

	)

103 
	~<›ís¶/∑øms.h
>

104 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


105 
ec_mëhod_°
 
	tEC_METHOD
;

107 
ec_group_°
 
	tEC_GROUP
;

108 
ec_poöt_°
 
	tEC_POINT
;

109 
e˝k_∑ømëîs_°
 
	tECPKPARAMETERS
;

110 
ec_∑ømëîs_°
 
	tECPARAMETERS
;

116 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


121 
OSSL_DEPRECATEDIN_3_0
 c⁄° 
EC_METHOD
 *
EC_GFp_sim∂e_mëhod
();

126 
OSSL_DEPRECATEDIN_3_0
 c⁄° 
EC_METHOD
 *
EC_GFp_m⁄t_mëhod
();

131 
OSSL_DEPRECATEDIN_3_0
 c⁄° 
EC_METHOD
 *
EC_GFp_ni°_mëhod
();

133 #i‚de‡
OPENSSL_NO_EC_NISTP_64_GCC_128


137 
OSSL_DEPRECATEDIN_3_0
 c⁄° 
EC_METHOD
 *
EC_GFp_ni°p224_mëhod
();

142 
OSSL_DEPRECATEDIN_3_0
 c⁄° 
EC_METHOD
 *
EC_GFp_ni°p256_mëhod
();

147 
OSSL_DEPRECATEDIN_3_0
 c⁄° 
EC_METHOD
 *
EC_GFp_ni°p521_mëhod
();

150 #i‚de‡
OPENSSL_NO_EC2M


158 
OSSL_DEPRECATEDIN_3_0
 c⁄° 
EC_METHOD
 *
EC_GF2m_sim∂e_mëhod
();

171 
OSSL_DEPRECATEDIN_3_0
 
EC_GROUP
 *
EC_GROUP_√w
(c⁄° 
EC_METHOD
 *
mëh
);

176 
OSSL_DEPRECATEDIN_3_0
 
EC_GROUP_˛ór_‰ì
(
EC_GROUP
 *
group
);

182 
OSSL_DEPRECATEDIN_3_0
 c⁄° 
EC_METHOD
 *
EC_GROUP_mëhod_of
(c⁄° 
EC_GROUP
 *
group
);

188 
OSSL_DEPRECATEDIN_3_0
 
EC_METHOD_gë_fõld_ty≥
(c⁄° 
EC_METHOD
 *
mëh
);

194 
EC_GROUP_‰ì
(
EC_GROUP
 *
group
);

201 
EC_GROUP_c›y
(
EC_GROUP
 *
d°
, c⁄° EC_GROUP *
§c
);

208 
EC_GROUP
 *
EC_GROUP_dup
(c⁄° EC_GROUP *
§c
);

218 
EC_GROUP_£t_gíî©‹
(
EC_GROUP
 *
group
, c⁄° 
EC_POINT
 *
gíî©‹
,

219 c⁄° 
BIGNUM
 *
‹dî
, c⁄° BIGNUM *
coÁ˘‹
);

225 c⁄° 
EC_POINT
 *
EC_GROUP_gë0_gíî©‹
(c⁄° 
EC_GROUP
 *
group
);

231 
BN_MONT_CTX
 *
EC_GROUP_gë_m⁄t_d©a
(c⁄° 
EC_GROUP
 *
group
);

239 
EC_GROUP_gë_‹dî
(c⁄° 
EC_GROUP
 *
group
, 
BIGNUM
 *
‹dî
, 
BN_CTX
 *
˘x
);

245 c⁄° 
BIGNUM
 *
EC_GROUP_gë0_‹dî
(c⁄° 
EC_GROUP
 *
group
);

251 
EC_GROUP_‹dî_bôs
(c⁄° 
EC_GROUP
 *
group
);

259 
EC_GROUP_gë_coÁ˘‹
(c⁄° 
EC_GROUP
 *
group
, 
BIGNUM
 *
coÁ˘‹
,

260 
BN_CTX
 *
˘x
);

266 c⁄° 
BIGNUM
 *
EC_GROUP_gë0_coÁ˘‹
(c⁄° 
EC_GROUP
 *
group
);

272 
EC_GROUP_£t_curve_«me
(
EC_GROUP
 *
group
, 
nid
);

278 
EC_GROUP_gë_curve_«me
(c⁄° 
EC_GROUP
 *
group
);

284 c⁄° 
BIGNUM
 *
EC_GROUP_gë0_fõld
(c⁄° 
EC_GROUP
 *
group
);

290 
EC_GROUP_gë_fõld_ty≥
(c⁄° 
EC_GROUP
 *
group
);

292 
EC_GROUP_£t_a¢1_Êag
(
EC_GROUP
 *
group
, 
Êag
);

293 
EC_GROUP_gë_a¢1_Êag
(c⁄° 
EC_GROUP
 *
group
);

295 
EC_GROUP_£t_poöt_c⁄vîsi⁄_f‹m
(
EC_GROUP
 *
group
,

296 
poöt_c⁄vîsi⁄_f‹m_t
 
f‹m
);

297 
poöt_c⁄vîsi⁄_f‹m_t
 
EC_GROUP_gë_poöt_c⁄vîsi⁄_f‹m
(c⁄° 
EC_GROUP
 *);

299 *
EC_GROUP_gë0_£ed
(c⁄° 
EC_GROUP
 *
x
);

300 
size_t
 
EC_GROUP_gë_£ed_Àn
(c⁄° 
EC_GROUP
 *);

301 
size_t
 
EC_GROUP_£t_£ed
(
EC_GROUP
 *, c⁄° *, size_à
Àn
);

313 
EC_GROUP_£t_curve
(
EC_GROUP
 *
group
, c⁄° 
BIGNUM
 *
p
, c⁄° BIGNUM *
a
,

314 c⁄° 
BIGNUM
 *
b
, 
BN_CTX
 *
˘x
);

326 
EC_GROUP_gë_curve
(c⁄° 
EC_GROUP
 *
group
, 
BIGNUM
 *
p
, BIGNUM *
a
, BIGNUM *
b
,

327 
BN_CTX
 *
˘x
);

329 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


339 
OSSL_DEPRECATEDIN_3_0
 
EC_GROUP_£t_curve_GFp
(
EC_GROUP
 *
group
,

340 c⁄° 
BIGNUM
 *
p
,

341 c⁄° 
BIGNUM
 *
a
,

342 c⁄° 
BIGNUM
 *
b
,

343 
BN_CTX
 *
˘x
);

354 
OSSL_DEPRECATEDIN_3_0
 
EC_GROUP_gë_curve_GFp
(c⁄° 
EC_GROUP
 *
group
,

355 
BIGNUM
 *
p
,

356 
BIGNUM
 *
a
, BIGNUM *
b
,

357 
BN_CTX
 *
˘x
);

359 #i‚de‡
OPENSSL_NO_EC2M


369 
OSSL_DEPRECATEDIN_3_0
 
EC_GROUP_£t_curve_GF2m
(
EC_GROUP
 *
group
,

370 c⁄° 
BIGNUM
 *
p
,

371 c⁄° 
BIGNUM
 *
a
,

372 c⁄° 
BIGNUM
 *
b
,

373 
BN_CTX
 *
˘x
);

384 
OSSL_DEPRECATEDIN_3_0
 
EC_GROUP_gë_curve_GF2m
(c⁄° 
EC_GROUP
 *
group
,

385 
BIGNUM
 *
p
,

386 
BIGNUM
 *
a
, BIGNUM *
b
,

387 
BN_CTX
 *
˘x
);

395 
EC_GROUP_gë_degªe
(c⁄° 
EC_GROUP
 *
group
);

402 
EC_GROUP_check
(c⁄° 
EC_GROUP
 *
group
, 
BN_CTX
 *
˘x
);

409 
EC_GROUP_check_dis¸imö™t
(c⁄° 
EC_GROUP
 *
group
, 
BN_CTX
 *
˘x
);

417 
EC_GROUP_cmp
(c⁄° 
EC_GROUP
 *
a
, c⁄° EC_GROUP *
b
, 
BN_CTX
 *
˘x
);

432 
EC_GROUP
 *
EC_GROUP_√w_curve_GFp
(c⁄° 
BIGNUM
 *
p
, c⁄° BIGNUM *
a
,

433 c⁄° 
BIGNUM
 *
b
, 
BN_CTX
 *
˘x
);

434 #i‚de‡
OPENSSL_NO_EC2M


443 
EC_GROUP
 *
EC_GROUP_√w_curve_GF2m
(c⁄° 
BIGNUM
 *
p
, c⁄° BIGNUM *
a
,

444 c⁄° 
BIGNUM
 *
b
, 
BN_CTX
 *
˘x
);

457 
EC_GROUP
 *
EC_GROUP_√w_‰om_∑øms
(c⁄° 
OSSL_PARAM
 
∑øms
[],

458 
OSSL_LIB_CTX
 *
lib˘x
, c⁄° *
¥›q
);

469 
EC_GROUP
 *
EC_GROUP_√w_by_curve_«me_ex
(
OSSL_LIB_CTX
 *
lib˘x
, c⁄° *
¥›q
,

470 
nid
);

480 
EC_GROUP
 *
EC_GROUP_√w_by_curve_«me
(
nid
);

487 
EC_GROUP
 *
EC_GROUP_√w_‰om_e˝¨amëîs
(c⁄° 
ECPARAMETERS
 *
∑øms
);

495 
ECPARAMETERS
 *
EC_GROUP_gë_e˝¨amëîs
(c⁄° 
EC_GROUP
 *
group
,

496 
ECPARAMETERS
 *
∑øms
);

503 
EC_GROUP
 *
EC_GROUP_√w_‰om_e˝k∑ømëîs
(c⁄° 
ECPKPARAMETERS
 *
∑øms
);

511 
ECPKPARAMETERS
 *
EC_GROUP_gë_e˝k∑ømëîs
(c⁄° 
EC_GROUP
 *
group
,

512 
ECPKPARAMETERS
 *
∑øms
);

519 
nid
;

520 c⁄° *
commít
;

521 } 
	tEC_buûtö_curve
;

529 
size_t
 
EC_gë_buûtö_curves
(
EC_buûtö_curve
 *
r
, size_à
nôems
);

531 c⁄° *
EC_curve_nid2ni°
(
nid
);

532 
EC_curve_ni°2nid
(c⁄° *
«me
);

533 
EC_GROUP_check_«med_curve
(c⁄° 
EC_GROUP
 *
group
, 
ni°_⁄ly
,

534 
BN_CTX
 *
˘x
);

544 
EC_POINT
 *
EC_POINT_√w
(c⁄° 
EC_GROUP
 *
group
);

549 
EC_POINT_‰ì
(
EC_POINT
 *
poöt
);

554 
EC_POINT_˛ór_‰ì
(
EC_POINT
 *
poöt
);

561 
EC_POINT_c›y
(
EC_POINT
 *
d°
, c⁄° EC_POINT *
§c
);

569 
EC_POINT
 *
EC_POINT_dup
(c⁄° EC_POINT *
§c
, c⁄° 
EC_GROUP
 *
group
);

576 
EC_POINT_£t_to_öföôy
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
poöt
);

578 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


583 
OSSL_DEPRECATEDIN_3_0
 c⁄° 
EC_METHOD
 *
EC_POINT_mëhod_of
(c⁄° 
EC_POINT
 *
poöt
);

594 
OSSL_DEPRECATEDIN_3_0
 
EC_POINT_£t_J¥oje˘ive_co‹dö©es_GFp


595 (c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
p
,

596 c⁄° 
BIGNUM
 *
x
, c⁄° BIGNUM *
y
, c⁄° BIGNUM *
z
,

597 
BN_CTX
 *
˘x
);

608 
OSSL_DEPRECATEDIN_3_0
 
EC_POINT_gë_J¥oje˘ive_co‹dö©es_GFp


609 (c⁄° 
EC_GROUP
 *
group
, c⁄° 
EC_POINT
 *
p
,

610 
BIGNUM
 *
x
, BIGNUM *
y
, BIGNUM *
z
, 
BN_CTX
 *
˘x
);

621 
EC_POINT_£t_afföe_co‹dö©es
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
p
,

622 c⁄° 
BIGNUM
 *
x
, c⁄° BIGNUM *
y
,

623 
BN_CTX
 *
˘x
);

633 
EC_POINT_gë_afföe_co‹dö©es
(c⁄° 
EC_GROUP
 *
group
, c⁄° 
EC_POINT
 *
p
,

634 
BIGNUM
 *
x
, BIGNUM *
y
, 
BN_CTX
 *
˘x
);

636 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


646 
OSSL_DEPRECATEDIN_3_0
 
EC_POINT_£t_afföe_co‹dö©es_GFp


647 (c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
p
,

648 c⁄° 
BIGNUM
 *
x
, c⁄° BIGNUM *
y
, 
BN_CTX
 *
˘x
);

659 
OSSL_DEPRECATEDIN_3_0
 
EC_POINT_gë_afföe_co‹dö©es_GFp


660 (c⁄° 
EC_GROUP
 *
group
, c⁄° 
EC_POINT
 *
p
,

661 
BIGNUM
 *
x
, BIGNUM *
y
, 
BN_CTX
 *
˘x
);

672 
EC_POINT_£t_com¥es£d_co‹dö©es
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
p
,

673 c⁄° 
BIGNUM
 *
x
, 
y_bô
,

674 
BN_CTX
 *
˘x
);

676 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


686 
OSSL_DEPRECATEDIN_3_0
 
EC_POINT_£t_com¥es£d_co‹dö©es_GFp


687 (c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
p
,

688 c⁄° 
BIGNUM
 *
x
, 
y_bô
, 
BN_CTX
 *
˘x
);

689 #i‚de‡
OPENSSL_NO_EC2M


699 
OSSL_DEPRECATEDIN_3_0
 
EC_POINT_£t_afföe_co‹dö©es_GF2m


700 (c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
p
,

701 c⁄° 
BIGNUM
 *
x
, c⁄° BIGNUM *
y
, 
BN_CTX
 *
˘x
);

712 
OSSL_DEPRECATEDIN_3_0
 
EC_POINT_gë_afföe_co‹dö©es_GF2m


713 (c⁄° 
EC_GROUP
 *
group
, c⁄° 
EC_POINT
 *
p
,

714 
BIGNUM
 *
x
, BIGNUM *
y
, 
BN_CTX
 *
˘x
);

725 
OSSL_DEPRECATEDIN_3_0
 
EC_POINT_£t_com¥es£d_co‹dö©es_GF2m


726 (c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
p
,

727 c⁄° 
BIGNUM
 *
x
, 
y_bô
, 
BN_CTX
 *
˘x
);

741 
size_t
 
EC_POINT_poöt2o˘
(c⁄° 
EC_GROUP
 *
group
, c⁄° 
EC_POINT
 *
p
,

742 
poöt_c⁄vîsi⁄_f‹m_t
 
f‹m
,

743 *
buf
, 
size_t
 
Àn
, 
BN_CTX
 *
˘x
);

753 
EC_POINT_o˘2poöt
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
p
,

754 c⁄° *
buf
, 
size_t
 
Àn
, 
BN_CTX
 *
˘x
);

764 
size_t
 
EC_POINT_poöt2buf
(c⁄° 
EC_GROUP
 *
group
, c⁄° 
EC_POINT
 *
poöt
,

765 
poöt_c⁄vîsi⁄_f‹m_t
 
f‹m
,

766 **
pbuf
, 
BN_CTX
 *
˘x
);

769 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


770 
OSSL_DEPRECATEDIN_3_0
 
BIGNUM
 *
EC_POINT_poöt2bn
(c⁄° 
EC_GROUP
 *,

771 c⁄° 
EC_POINT
 *,

772 
poöt_c⁄vîsi⁄_f‹m_t
 
f‹m
,

773 
BIGNUM
 *, 
BN_CTX
 *);

774 
OSSL_DEPRECATEDIN_3_0
 
EC_POINT
 *
EC_POINT_bn2poöt
(c⁄° 
EC_GROUP
 *,

775 c⁄° 
BIGNUM
 *,

776 
EC_POINT
 *, 
BN_CTX
 *);

779 *
EC_POINT_poöt2hex
(c⁄° 
EC_GROUP
 *, c⁄° 
EC_POINT
 *,

780 
poöt_c⁄vîsi⁄_f‹m_t
 
f‹m
, 
BN_CTX
 *);

781 
EC_POINT
 *
EC_POINT_hex2poöt
(c⁄° 
EC_GROUP
 *, const *,

782 
EC_POINT
 *, 
BN_CTX
 *);

796 
EC_POINT_add
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
r
, c⁄° EC_POINT *
a
,

797 c⁄° 
EC_POINT
 *
b
, 
BN_CTX
 *
˘x
);

806 
EC_POINT_dbl
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
r
, c⁄° EC_POINT *
a
,

807 
BN_CTX
 *
˘x
);

815 
EC_POINT_övît
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
a
, 
BN_CTX
 *
˘x
);

822 
EC_POINT_is_©_öföôy
(c⁄° 
EC_GROUP
 *
group
, c⁄° 
EC_POINT
 *
p
);

830 
EC_POINT_is_⁄_curve
(c⁄° 
EC_GROUP
 *
group
, c⁄° 
EC_POINT
 *
poöt
,

831 
BN_CTX
 *
˘x
);

840 
EC_POINT_cmp
(c⁄° 
EC_GROUP
 *
group
, c⁄° 
EC_POINT
 *
a
, c⁄° EC_POINT *
b
,

841 
BN_CTX
 *
˘x
);

843 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


844 
OSSL_DEPRECATEDIN_3_0
 
EC_POINT_make_afföe
(c⁄° 
EC_GROUP
 *
group
,

845 
EC_POINT
 *
poöt
, 
BN_CTX
 *
˘x
);

846 
OSSL_DEPRECATEDIN_3_0
 
EC_POINTs_make_afföe
(c⁄° 
EC_GROUP
 *
group
, 
size_t
 
num
,

847 
EC_POINT
 *
poöts
[], 
BN_CTX
 *
˘x
);

859 
OSSL_DEPRECATEDIN_3_0
 
EC_POINTs_mul
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
r
,

860 c⁄° 
BIGNUM
 *
n
, 
size_t
 
num
,

861 c⁄° 
EC_POINT
 *
p
[], c⁄° 
BIGNUM
 *
m
[],

862 
BN_CTX
 *
˘x
);

874 
EC_POINT_mul
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
r
, c⁄° 
BIGNUM
 *
n
,

875 c⁄° 
EC_POINT
 *
q
, c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
);

877 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


883 
OSSL_DEPRECATEDIN_3_0
 
EC_GROUP_¥ecompuã_mu…
(
EC_GROUP
 *
group
, 
BN_CTX
 *
˘x
);

889 
OSSL_DEPRECATEDIN_3_0
 
EC_GROUP_have_¥ecompuã_mu…
(c⁄° 
EC_GROUP
 *
group
);

896 
DECLARE_ASN1_ITEM
(
ECPKPARAMETERS
)

897 
DECLARE_ASN1_ALLOC_FUNCTIONS
(
ECPKPARAMETERS
)

898 
DECLARE_ASN1_ITEM
(
ECPARAMETERS
)

899 
DECLARE_ASN1_ALLOC_FUNCTIONS
(
ECPARAMETERS
)

905 
EC_GROUP_gë_basis_ty≥
(c⁄° 
EC_GROUP
 *);

906 #i‚de‡
OPENSSL_NO_EC2M


907 
EC_GROUP_gë_åöomül_basis
(c⁄° 
EC_GROUP
 *, *
k
);

908 
EC_GROUP_gë_≥¡™omül_basis
(c⁄° 
EC_GROUP
 *, *
k1
,

909 *
k2
, *
k3
);

912 
EC_GROUP
 *
d2i_ECPKP¨amëîs
(EC_GROUP **, c⁄° **
ö
, 
Àn
);

913 
i2d_ECPKP¨amëîs
(c⁄° 
EC_GROUP
 *, **
out
);

915 
	#d2i_ECPKP¨amëîs_bio
(
bp
,
x
) \

916 
	`ASN1_d2i_bio_of
(
EC_GROUP
, 
NULL
, 
d2i_ECPKP¨amëîs
, 
bp
, 
x
)

	)

917 
	#i2d_ECPKP¨amëîs_bio
(
bp
,
x
) \

918 
	`ASN1_i2d_bio_of
(
EC_GROUP
, 
i2d_ECPKP¨amëîs
, 
bp
, 
x
)

	)

919 
	#d2i_ECPKP¨amëîs_Â
(
Â
,
x
) \

920 (
EC_GROUP
 *)
	`ASN1_d2i_Â
(
NULL
, (
d2i_of_void
 *)
d2i_ECPKP¨amëîs
, (
Â
), \

921 (**)(
x
))

	)

922 
	#i2d_ECPKP¨amëîs_Â
(
Â
,
x
) \

923 
	`ASN1_i2d_Â
((
i2d_of_void
 *)
i2d_ECPKP¨amëîs
, (
Â
), (*)(
x
))

	)

925 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


926 
OSSL_DEPRECATEDIN_3_0
 
ECPKP¨amëîs_¥öt
(
BIO
 *
bp
, c⁄° 
EC_GROUP
 *
x
,

927 
off
);

928 #i‚de‡
OPENSSL_NO_STDIO


929 
OSSL_DEPRECATEDIN_3_0
 
ECPKP¨amëîs_¥öt_Â
(
FILE
 *
Â
, c⁄° 
EC_GROUP
 *
x
,

930 
off
);

939 
	#EC_PKEY_NO_PARAMETERS
 0x001

	)

940 
	#EC_PKEY_NO_PUBKEY
 0x002

	)

943 
	#EC_FLAG_SM2_RANGE
 0x0004

	)

944 
	#EC_FLAG_COFACTOR_ECDH
 0x1000

	)

945 
	#EC_FLAG_CHECK_NAMED_GROUP
 0x2000

	)

946 
	#EC_FLAG_CHECK_NAMED_GROUP_NIST
 0x4000

	)

947 
	#EC_FLAG_CHECK_NAMED_GROUP_MASK
 \

948 (
EC_FLAG_CHECK_NAMED_GROUP
 | 
EC_FLAG_CHECK_NAMED_GROUP_NIST
)

	)

951 
	#EC_FLAG_NON_FIPS_ALLOW
 0x0000

	)

952 
	#EC_FLAG_FIPS_CHECKED
 0x0000

	)

954 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


961 
OSSL_DEPRECATEDIN_3_0
 
EC_KEY
 *
EC_KEY_√w_ex
(
OSSL_LIB_CTX
 *
˘x
, c⁄° *
¥›q
);

968 
OSSL_DEPRECATEDIN_3_0
 
EC_KEY
 *
EC_KEY_√w
();

970 
OSSL_DEPRECATEDIN_3_0
 
EC_KEY_gë_Êags
(c⁄° 
EC_KEY
 *
key
);

972 
OSSL_DEPRECATEDIN_3_0
 
EC_KEY_£t_Êags
(
EC_KEY
 *
key
, 
Êags
);

974 
OSSL_DEPRECATEDIN_3_0
 
EC_KEY_˛ór_Êags
(
EC_KEY
 *
key
, 
Êags
);

976 
OSSL_DEPRECATEDIN_3_0
 
EC_KEY_decoded_‰om_ex∂icô_∑øms
(c⁄° 
EC_KEY
 *
key
);

987 
OSSL_DEPRECATEDIN_3_0
 
EC_KEY
 *
EC_KEY_√w_by_curve_«me_ex
(
OSSL_LIB_CTX
 *
˘x
,

988 c⁄° *
¥›q
,

989 
nid
);

998 
OSSL_DEPRECATEDIN_3_0
 
EC_KEY
 *
EC_KEY_√w_by_curve_«me
(
nid
);

1003 
OSSL_DEPRECATEDIN_3_0
 
EC_KEY_‰ì
(
EC_KEY
 *
key
);

1010 
OSSL_DEPRECATEDIN_3_0
 
EC_KEY
 *
EC_KEY_c›y
(EC_KEY *
d°
, c⁄° EC_KEY *
§c
);

1016 
OSSL_DEPRECATEDIN_3_0
 
EC_KEY
 *
EC_KEY_dup
(c⁄° EC_KEY *
§c
);

1022 
OSSL_DEPRECATEDIN_3_0
 
EC_KEY_up_ªf
(
EC_KEY
 *
key
);

1028 
OSSL_DEPRECATEDIN_3_0
 
ENGINE
 *
EC_KEY_gë0_ígöe
(c⁄° 
EC_KEY
 *
eckey
);

1034 
OSSL_DEPRECATEDIN_3_0
 c⁄° 
EC_GROUP
 *
EC_KEY_gë0_group
(c⁄° 
EC_KEY
 *
key
);

1042 
OSSL_DEPRECATEDIN_3_0
 
EC_KEY_£t_group
(
EC_KEY
 *
key
, c⁄° 
EC_GROUP
 *
group
);

1048 
OSSL_DEPRECATEDIN_3_0
 c⁄° 
BIGNUM
 *
EC_KEY_gë0_¥iv©e_key
(c⁄° 
EC_KEY
 *
key
);

1056 
OSSL_DEPRECATEDIN_3_0
 
EC_KEY_£t_¥iv©e_key
(
EC_KEY
 *
key
, c⁄° 
BIGNUM
 *
¥v
);

1062 
OSSL_DEPRECATEDIN_3_0
 c⁄° 
EC_POINT
 *
EC_KEY_gë0_public_key
(c⁄° 
EC_KEY
 *
key
);

1070 
OSSL_DEPRECATEDIN_3_0
 
EC_KEY_£t_public_key
(
EC_KEY
 *
key
, c⁄° 
EC_POINT
 *
pub
);

1072 
OSSL_DEPRECATEDIN_3_0
 
EC_KEY_gë_íc_Êags
(c⁄° 
EC_KEY
 *
key
);

1073 
OSSL_DEPRECATEDIN_3_0
 
EC_KEY_£t_íc_Êags
(
EC_KEY
 *
eckey
, 
Êags
);

1074 
OSSL_DEPRECATEDIN_3_0
 
poöt_c⁄vîsi⁄_f‹m_t
 
EC_KEY_gë_c⁄v_f‹m
(c⁄° 
EC_KEY
 *
key
);

1075 
OSSL_DEPRECATEDIN_3_0
 
EC_KEY_£t_c⁄v_f‹m
(
EC_KEY
 *
eckey
,

1076 
poöt_c⁄vîsi⁄_f‹m_t
 
cf‹m
);

1079 
	#EC_KEY_gë_ex_√w_ödex
(
l
, 
p
, 
√wf
, 
dupf
, 
‰ìf
) \

1080 
	`CRYPTO_gë_ex_√w_ödex
(
CRYPTO_EX_INDEX_EC_KEY
, 
l
, 
p
, 
√wf
, 
dupf
, 
‰ìf
)

	)

1082 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


1083 
OSSL_DEPRECATEDIN_3_0
 
EC_KEY_£t_ex_d©a
(
EC_KEY
 *
key
, 
idx
, *
¨g
);

1084 
OSSL_DEPRECATEDIN_3_0
 *
EC_KEY_gë_ex_d©a
(c⁄° 
EC_KEY
 *
key
, 
idx
);

1087 
OSSL_DEPRECATEDIN_3_0
 
EC_KEY_£t_a¢1_Êag
(
EC_KEY
 *
eckey
, 
a¢1_Êag
);

1095 
OSSL_DEPRECATEDIN_3_0
 
EC_KEY_¥ecompuã_mu…
(
EC_KEY
 *
key
, 
BN_CTX
 *
˘x
);

1101 
OSSL_DEPRECATEDIN_3_0
 
EC_KEY_gíî©e_key
(
EC_KEY
 *
key
);

1107 
OSSL_DEPRECATEDIN_3_0
 
EC_KEY_check_key
(c⁄° 
EC_KEY
 *
key
);

1113 
OSSL_DEPRECATEDIN_3_0
 
EC_KEY_ˇn_sign
(c⁄° 
EC_KEY
 *
eckey
);

1122 
OSSL_DEPRECATEDIN_3_0
 
EC_KEY_£t_public_key_afföe_co‹dö©es
(
EC_KEY
 *
key
,

1123 
BIGNUM
 *
x
,

1124 
BIGNUM
 *
y
);

1133 
OSSL_DEPRECATEDIN_3_0
 
size_t
 
EC_KEY_key2buf
(c⁄° 
EC_KEY
 *
key
,

1134 
poöt_c⁄vîsi⁄_f‹m_t
 
f‹m
,

1135 **
pbuf
, 
BN_CTX
 *
˘x
);

1145 
OSSL_DEPRECATEDIN_3_0
 
EC_KEY_o˘2key
(
EC_KEY
 *
key
, c⁄° *
buf
,

1146 
size_t
 
Àn
, 
BN_CTX
 *
˘x
);

1155 
OSSL_DEPRECATEDIN_3_0
 
EC_KEY_o˘2¥iv
(
EC_KEY
 *
key
, c⁄° *
buf
,

1156 
size_t
 
Àn
);

1166 
OSSL_DEPRECATEDIN_3_0
 
size_t
 
EC_KEY_¥iv2o˘
(c⁄° 
EC_KEY
 *
key
,

1167 *
buf
, 
size_t
 
Àn
);

1174 
OSSL_DEPRECATEDIN_3_0
 
size_t
 
EC_KEY_¥iv2buf
(c⁄° 
EC_KEY
 *
eckey
,

1175 **
pbuf
);

1187 
OSSL_DEPRECATEDIN_3_0
 
EC_KEY
 *
d2i_ECPriv©eKey
(EC_KEY **
key
,

1188 c⁄° **
ö
,

1189 
Àn
);

1197 
OSSL_DEPRECATEDIN_3_0
 
i2d_ECPriv©eKey
(c⁄° 
EC_KEY
 *
key
,

1198 **
out
);

1211 
OSSL_DEPRECATEDIN_3_0
 
EC_KEY
 *
d2i_ECP¨amëîs
(EC_KEY **
key
,

1212 c⁄° **
ö
,

1213 
Àn
);

1221 
OSSL_DEPRECATEDIN_3_0
 
i2d_ECP¨amëîs
(c⁄° 
EC_KEY
 *
key
,

1222 **
out
);

1236 
OSSL_DEPRECATEDIN_3_0
 
EC_KEY
 *
o2i_ECPublicKey
(EC_KEY **
key
,

1237 c⁄° **
ö
, 
Àn
);

1245 
OSSL_DEPRECATEDIN_3_0
 
i2o_ECPublicKey
(c⁄° 
EC_KEY
 *
key
, **
out
);

1252 
OSSL_DEPRECATEDIN_3_0
 
ECP¨amëîs_¥öt
(
BIO
 *
bp
, c⁄° 
EC_KEY
 *
key
);

1260 
OSSL_DEPRECATEDIN_3_0
 
EC_KEY_¥öt
(
BIO
 *
bp
, c⁄° 
EC_KEY
 *
key
, 
off
);

1262 #i‚de‡
OPENSSL_NO_STDIO


1268 
OSSL_DEPRECATEDIN_3_0
 
ECP¨amëîs_¥öt_Â
(
FILE
 *
Â
, c⁄° 
EC_KEY
 *
key
);

1276 
OSSL_DEPRECATEDIN_3_0
 
EC_KEY_¥öt_Â
(
FILE
 *
Â
, c⁄° 
EC_KEY
 *
key
, 
off
);

1279 
OSSL_DEPRECATEDIN_3_0
 c⁄° 
EC_KEY_METHOD
 *
EC_KEY_O≥nSSL
();

1280 
OSSL_DEPRECATEDIN_3_0
 c⁄° 
EC_KEY_METHOD
 *
EC_KEY_gë_deÁu…_mëhod
();

1281 
OSSL_DEPRECATEDIN_3_0
 
EC_KEY_£t_deÁu…_mëhod
(c⁄° 
EC_KEY_METHOD
 *
mëh
);

1282 
OSSL_DEPRECATEDIN_3_0
 c⁄° 
EC_KEY_METHOD
 *
EC_KEY_gë_mëhod
(c⁄° 
EC_KEY
 *
key
);

1283 
OSSL_DEPRECATEDIN_3_0
 
EC_KEY_£t_mëhod
(
EC_KEY
 *
key
, c⁄° 
EC_KEY_METHOD
 *
mëh
);

1284 
OSSL_DEPRECATEDIN_3_0
 
EC_KEY
 *
EC_KEY_√w_mëhod
(
ENGINE
 *
ígöe
);

1291 
OSSL_DEPRECATEDIN_3_0
 
ECDH_KDF_X9_62
(*
out
, 
size_t
 
ouéí
,

1292 c⁄° *
Z
, 
size_t
 
ZÀn
,

1293 c⁄° *
söfo
,

1294 
size_t
 
söfﬁí
, c⁄° 
EVP_MD
 *
md
);

1296 
OSSL_DEPRECATEDIN_3_0
 
ECDH_compuã_key
(*
out
, 
size_t
 
ouéí
,

1297 c⁄° 
EC_POINT
 *
pub_key
,

1298 c⁄° 
EC_KEY
 *
ecdh
,

1299 *(*
KDF
)(c⁄° *
ö
,

1300 
size_t
 
öÀn
, *
out
,

1301 
size_t
 *
ouéí
));

1304 
ECDSA_SIG_°
 
	tECDSA_SIG
;

1309 
ECDSA_SIG
 *
ECDSA_SIG_√w
();

1314 
ECDSA_SIG_‰ì
(
ECDSA_SIG
 *
sig
);

1323 
DECLARE_ASN1_ENCODE_FUNCTIONS_⁄ly
(
ECDSA_SIG
, ECDSA_SIG)

1338 
ECDSA_SIG_gë0
(c⁄° 
ECDSA_SIG
 *
sig
, c⁄° 
BIGNUM
 **
¥
, c⁄° BIGNUM **
ps
);

1343 c⁄° 
BIGNUM
 *
ECDSA_SIG_gë0_r
(c⁄° 
ECDSA_SIG
 *
sig
);

1348 c⁄° 
BIGNUM
 *
ECDSA_SIG_gë0_s
(c⁄° 
ECDSA_SIG
 *
sig
);

1355 
ECDSA_SIG_£t0
(
ECDSA_SIG
 *
sig
, 
BIGNUM
 *
r
, BIGNUM *
s
);

1357 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


1365 
OSSL_DEPRECATEDIN_3_0
 
ECDSA_SIG
 *
ECDSA_do_sign
(c⁄° *
dg°
,

1366 
dg°_Àn
, 
EC_KEY
 *
eckey
);

1378 
OSSL_DEPRECATEDIN_3_0
 
ECDSA_SIG
 *
ECDSA_do_sign_ex
(c⁄° *
dg°
,

1379 
dg°Àn
, c⁄° 
BIGNUM
 *
köv
,

1380 c⁄° 
BIGNUM
 *
Ω
, 
EC_KEY
 *
eckey
);

1391 
OSSL_DEPRECATEDIN_3_0
 
ECDSA_do_vîify
(c⁄° *
dg°
, 
dg°_Àn
,

1392 c⁄° 
ECDSA_SIG
 *
sig
, 
EC_KEY
 *
eckey
);

1401 
OSSL_DEPRECATEDIN_3_0
 
ECDSA_sign_£tup
(
EC_KEY
 *
eckey
, 
BN_CTX
 *
˘x
,

1402 
BIGNUM
 **
köv
, BIGNUM **
Ω
);

1414 
OSSL_DEPRECATEDIN_3_0
 
ECDSA_sign
(
ty≥
, c⁄° *
dg°
,

1415 
dg°Àn
, *
sig
,

1416 *
sigÀn
, 
EC_KEY
 *
eckey
);

1431 
OSSL_DEPRECATEDIN_3_0
 
ECDSA_sign_ex
(
ty≥
, c⁄° *
dg°
,

1432 
dg°Àn
, *
sig
,

1433 *
sigÀn
, c⁄° 
BIGNUM
 *
köv
,

1434 c⁄° 
BIGNUM
 *
Ω
, 
EC_KEY
 *
eckey
);

1447 
OSSL_DEPRECATEDIN_3_0
 
ECDSA_vîify
(
ty≥
, c⁄° *
dg°
,

1448 
dg°Àn
, c⁄° *
sig
,

1449 
sigÀn
, 
EC_KEY
 *
eckey
);

1455 
OSSL_DEPRECATEDIN_3_0
 
ECDSA_size
(c⁄° 
EC_KEY
 *
eckey
);

1461 
OSSL_DEPRECATEDIN_3_0
 
EC_KEY_METHOD
 *
EC_KEY_METHOD_√w
(c⁄° EC_KEY_METHOD *
mëh
);

1462 
OSSL_DEPRECATEDIN_3_0
 
EC_KEY_METHOD_‰ì
(
EC_KEY_METHOD
 *
mëh
);

1463 
OSSL_DEPRECATEDIN_3_0
 
EC_KEY_METHOD_£t_öô


1464 (
EC_KEY_METHOD
 *
mëh
,

1465 (*
öô
)(
EC_KEY
 *
key
),

1466 (*
föish
)(
EC_KEY
 *
key
),

1467 (*
c›y
)(
EC_KEY
 *
de°
, c⁄° EC_KEY *
§c
),

1468 (*
£t_group
)(
EC_KEY
 *
key
, c⁄° 
EC_GROUP
 *
gΩ
),

1469 (*
£t_¥iv©e
)(
EC_KEY
 *
key
, c⁄° 
BIGNUM
 *
¥iv_key
),

1470 (*
£t_public
)(
EC_KEY
 *
key
, c⁄° 
EC_POINT
 *
pub_key
));

1472 
OSSL_DEPRECATEDIN_3_0
 
EC_KEY_METHOD_£t_keygí
(
EC_KEY_METHOD
 *
mëh
,

1473 (*
keygí
)(
EC_KEY
 *
key
));

1475 
OSSL_DEPRECATEDIN_3_0
 
EC_KEY_METHOD_£t_compuã_key


1476 (
EC_KEY_METHOD
 *
mëh
,

1477 (*
ckey
)(**
p£c
, 
size_t
 *
p£˛í
,

1478 c⁄° 
EC_POINT
 *
pub_key
, c⁄° 
EC_KEY
 *
ecdh
));

1480 
OSSL_DEPRECATEDIN_3_0
 
EC_KEY_METHOD_£t_sign


1481 (
EC_KEY_METHOD
 *
mëh
,

1482 (*
sign
)(
ty≥
, c⁄° *
dg°
,

1483 
dÀn
, *
sig
,

1484 *
sigÀn
,

1485 c⁄° 
BIGNUM
 *
köv
, c⁄° BIGNUM *
r
,

1486 
EC_KEY
 *
eckey
),

1487 (*
sign_£tup
)(
EC_KEY
 *
eckey
, 
BN_CTX
 *
˘x_ö
,

1488 
BIGNUM
 **
kövp
, BIGNUM **
Ω
),

1489 
ECDSA_SIG
 *(*
sign_sig
)(c⁄° *
dg°
,

1490 
dg°_Àn
,

1491 c⁄° 
BIGNUM
 *
ö_köv
,

1492 c⁄° 
BIGNUM
 *
ö_r
,

1493 
EC_KEY
 *
eckey
));

1495 
OSSL_DEPRECATEDIN_3_0
 
EC_KEY_METHOD_£t_vîify


1496 (
EC_KEY_METHOD
 *
mëh
,

1497 (*
vîify
)(
ty≥
, const 

1498 *
dg°
, 
dg°_Àn
,

1499 c⁄° *
sigbuf
,

1500 
sig_Àn
, 
EC_KEY
 *
eckey
),

1501 (*
vîify_sig
)(c⁄° *
dg°
,

1502 
dg°_Àn
, c⁄° 
ECDSA_SIG
 *
sig
,

1503 
EC_KEY
 *
eckey
));

1505 
OSSL_DEPRECATEDIN_3_0
 
EC_KEY_METHOD_gë_öô


1506 (c⁄° 
EC_KEY_METHOD
 *
mëh
,

1507 (**
pöô
)(
EC_KEY
 *
key
),

1508 (**
pföish
)(
EC_KEY
 *
key
),

1509 (**
pc›y
)(
EC_KEY
 *
de°
, c⁄° EC_KEY *
§c
),

1510 (**
p£t_group
)(
EC_KEY
 *
key
, c⁄° 
EC_GROUP
 *
gΩ
),

1511 (**
p£t_¥iv©e
)(
EC_KEY
 *
key
, c⁄° 
BIGNUM
 *
¥iv_key
),

1512 (**
p£t_public
)(
EC_KEY
 *
key
, c⁄° 
EC_POINT
 *
pub_key
));

1514 
OSSL_DEPRECATEDIN_3_0
 
EC_KEY_METHOD_gë_keygí


1515 (c⁄° 
EC_KEY_METHOD
 *
mëh
, (**
pkeygí
)(
EC_KEY
 *
key
));

1517 
OSSL_DEPRECATEDIN_3_0
 
EC_KEY_METHOD_gë_compuã_key


1518 (c⁄° 
EC_KEY_METHOD
 *
mëh
,

1519 (**
pck
)(**
p£c
,

1520 
size_t
 *
p£˛í
,

1521 c⁄° 
EC_POINT
 *
pub_key
,

1522 c⁄° 
EC_KEY
 *
ecdh
));

1524 
OSSL_DEPRECATEDIN_3_0
 
EC_KEY_METHOD_gë_sign


1525 (c⁄° 
EC_KEY_METHOD
 *
mëh
,

1526 (**
psign
)(
ty≥
, c⁄° *
dg°
,

1527 
dÀn
, *
sig
,

1528 *
sigÀn
,

1529 c⁄° 
BIGNUM
 *
köv
, c⁄° BIGNUM *
r
,

1530 
EC_KEY
 *
eckey
),

1531 (**
psign_£tup
)(
EC_KEY
 *
eckey
, 
BN_CTX
 *
˘x_ö
,

1532 
BIGNUM
 **
kövp
, BIGNUM **
Ω
),

1533 
ECDSA_SIG
 *(**
psign_sig
)(c⁄° *
dg°
,

1534 
dg°_Àn
,

1535 c⁄° 
BIGNUM
 *
ö_köv
,

1536 c⁄° 
BIGNUM
 *
ö_r
,

1537 
EC_KEY
 *
eckey
));

1539 
OSSL_DEPRECATEDIN_3_0
 
EC_KEY_METHOD_gë_vîify


1540 (c⁄° 
EC_KEY_METHOD
 *
mëh
,

1541 (**
pvîify
)(
ty≥
, const 

1542 *
dg°
, 
dg°_Àn
,

1543 c⁄° *
sigbuf
,

1544 
sig_Àn
, 
EC_KEY
 *
eckey
),

1545 (**
pvîify_sig
)(c⁄° *
dg°
,

1546 
dg°_Àn
,

1547 c⁄° 
ECDSA_SIG
 *
sig
,

1548 
EC_KEY
 *
eckey
));

1551 
	#EVP_EC_gí
(
curve
) \

1552 
	`EVP_PKEY_Q_keygí
(
NULL
, NULL, "EC", (*)(
	`°r°r
(
curve
, "")))

	)

1554 
	#ECP¨amëîs_dup
(
x
Ë
	`ASN1_dup_of
(
EC_KEY
, 
i2d_ECP¨amëîs
, \

1555 
d2i_ECP¨amëîs
, 
x
)

	)

1557 #i‚de‡
__˝lu•lus


1558 #i‡
deföed
(
__SUNPRO_C
)

1559 #i‡
__SUNPRO_C
 >= 0x520

1560 #¥agm®
îr‹_mesßges
 (,
E_ARRAY_OF_INCOMPLETE_NONAME
,
E_ARRAY_OF_INCOMPLETE
)

1566 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/evp.h

10 #i‚de‡
OPENSSL_EVP_H


11 
	#OPENSSL_EVP_H


	)

12 #¥agm®
⁄˚


14 
	~<›ís¶/ma¸os.h
>

15 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


16 
	#HEADER_ENVELOPE_H


	)

19 
	~<°d¨g.h
>

21 #i‚de‡
OPENSSL_NO_STDIO


22 
	~<°dio.h
>

25 
	~<›ís¶/›ís¶c⁄f.h
>

26 
	~<›ís¶/ty≥s.h
>

27 
	~<›ís¶/c‹e.h
>

28 
	~<›ís¶/c‹e_di•©ch.h
>

29 
	~<›ís¶/symhacks.h
>

30 
	~<›ís¶/bio.h
>

31 
	~<›ís¶/ev≥º.h
>

32 
	~<›ís¶/∑øms.h
>

34 
	#EVP_MAX_MD_SIZE
 64

	)

35 
	#EVP_MAX_KEY_LENGTH
 64

	)

36 
	#EVP_MAX_IV_LENGTH
 16

	)

37 
	#EVP_MAX_BLOCK_LENGTH
 32

	)

39 
	#PKCS5_SALT_LEN
 8

	)

41 
	#PKCS5_DEFAULT_ITER
 2048

	)

43 
	~<›ís¶/obje˘s.h
>

45 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


46 
	#EVP_PK_RSA
 0x0001

	)

47 
	#EVP_PK_DSA
 0x0002

	)

48 
	#EVP_PK_DH
 0x0004

	)

49 
	#EVP_PK_EC
 0x0008

	)

50 
	#EVP_PKT_SIGN
 0x0010

	)

51 
	#EVP_PKT_ENC
 0x0020

	)

52 
	#EVP_PKT_EXCH
 0x0040

	)

53 
	#EVP_PKS_RSA
 0x0100

	)

54 
	#EVP_PKS_DSA
 0x0200

	)

55 
	#EVP_PKS_EC
 0x0400

	)

58 
	#EVP_PKEY_NONE
 
NID_undef


	)

59 
	#EVP_PKEY_RSA
 
NID_rßEn¸y±i⁄


	)

60 
	#EVP_PKEY_RSA2
 
NID_rß


	)

61 
	#EVP_PKEY_RSA_PSS
 
NID_rßsßPss


	)

62 
	#EVP_PKEY_DSA
 
NID_dß


	)

63 
	#EVP_PKEY_DSA1
 
NID_dß_2


	)

64 
	#EVP_PKEY_DSA2
 
NID_dßWôhSHA


	)

65 
	#EVP_PKEY_DSA3
 
NID_dßWôhSHA1


	)

66 
	#EVP_PKEY_DSA4
 
NID_dßWôhSHA1_2


	)

67 
	#EVP_PKEY_DH
 
NID_dhKeyAgªemít


	)

68 
	#EVP_PKEY_DHX
 
NID_dhpubli˙umbî


	)

69 
	#EVP_PKEY_EC
 
NID_X9_62_id_ecPublicKey


	)

70 
	#EVP_PKEY_SM2
 
NID_sm2


	)

71 
	#EVP_PKEY_HMAC
 
NID_hmac


	)

72 
	#EVP_PKEY_CMAC
 
NID_cmac


	)

73 
	#EVP_PKEY_SCRYPT
 
NID_id_s¸y±


	)

74 
	#EVP_PKEY_TLS1_PRF
 
NID_és1_¥f


	)

75 
	#EVP_PKEY_HKDF
 
NID_hkdf


	)

76 
	#EVP_PKEY_POLY1305
 
NID_pﬁy1305


	)

77 
	#EVP_PKEY_SIPHASH
 
NID_sùhash


	)

78 
	#EVP_PKEY_X25519
 
NID_X25519


	)

79 
	#EVP_PKEY_ED25519
 
NID_ED25519


	)

80 
	#EVP_PKEY_X448
 
NID_X448


	)

81 
	#EVP_PKEY_ED448
 
NID_ED448


	)

83 
	#EVP_PKEY_KEYMGMT
 -1

	)

86 
	#EVP_PKEY_KEY_PARAMETERS
 \

87 –
OSSL_KEYMGMT_SELECT_ALL_PARAMETERS
 )

	)

88 
	#EVP_PKEY_PUBLIC_KEY
 \

89 –
EVP_PKEY_KEY_PARAMETERS
 | 
OSSL_KEYMGMT_SELECT_PUBLIC_KEY
 )

	)

90 
	#EVP_PKEY_KEYPAIR
 \

91 –
EVP_PKEY_PUBLIC_KEY
 | 
OSSL_KEYMGMT_SELECT_PRIVATE_KEY
 )

	)

93 #ifde‡ 
__˝lu•lus


97 
EVP_£t_deÁu…_¥›îtõs
(
OSSL_LIB_CTX
 *
lib˘x
, c⁄° *
¥›q
);

98 
EVP_deÁu…_¥›îtõs_is_fùs_íabÀd
(
OSSL_LIB_CTX
 *
lib˘x
);

99 
EVP_deÁu…_¥›îtõs_íabÀ_fùs
(
OSSL_LIB_CTX
 *
lib˘x
, 
íabÀ
);

101 
	#EVP_PKEY_MO_SIGN
 0x0001

	)

102 
	#EVP_PKEY_MO_VERIFY
 0x0002

	)

103 
	#EVP_PKEY_MO_ENCRYPT
 0x0004

	)

104 
	#EVP_PKEY_MO_DECRYPT
 0x0008

	)

106 #i‚de‡
EVP_MD


107 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


108 
OSSL_DEPRECATEDIN_3_0
 
EVP_MD
 *
EVP_MD_mëh_√w
(
md_ty≥
, 
pkey_ty≥
);

109 
OSSL_DEPRECATEDIN_3_0
 
EVP_MD
 *
EVP_MD_mëh_dup
(c⁄° EVP_MD *
md
);

110 
OSSL_DEPRECATEDIN_3_0
 
EVP_MD_mëh_‰ì
(
EVP_MD
 *
md
);

111 
OSSL_DEPRECATEDIN_3_0


112 
EVP_MD_mëh_£t_öput_blocksize
(
EVP_MD
 *
md
, 
blocksize
);

113 
OSSL_DEPRECATEDIN_3_0


114 
EVP_MD_mëh_£t_ªsu…_size
(
EVP_MD
 *
md
, 
ªsu…size
);

115 
OSSL_DEPRECATEDIN_3_0


116 
EVP_MD_mëh_£t_≠p_d©asize
(
EVP_MD
 *
md
, 
d©asize
);

117 
OSSL_DEPRECATEDIN_3_0


118 
EVP_MD_mëh_£t_Êags
(
EVP_MD
 *
md
, 
Êags
);

119 
OSSL_DEPRECATEDIN_3_0


120 
EVP_MD_mëh_£t_öô
(
EVP_MD
 *
md
, (*
öô
)(
EVP_MD_CTX
 *
˘x
));

121 
OSSL_DEPRECATEDIN_3_0


122 
EVP_MD_mëh_£t_upd©e
(
EVP_MD
 *
md
, (*
upd©e
)(
EVP_MD_CTX
 *
˘x
,

123 c⁄° *
d©a
,

124 
size_t
 
cou¡
));

125 
OSSL_DEPRECATEDIN_3_0


126 
EVP_MD_mëh_£t_föÆ
(
EVP_MD
 *
md
, (*
föÆ
)(
EVP_MD_CTX
 *
˘x
,

127 *
md
));

128 
OSSL_DEPRECATEDIN_3_0


129 
EVP_MD_mëh_£t_c›y
(
EVP_MD
 *
md
, (*
c›y
)(
EVP_MD_CTX
 *
to
,

130 c⁄° 
EVP_MD_CTX
 *
‰om
));

131 
OSSL_DEPRECATEDIN_3_0


132 
EVP_MD_mëh_£t_˛ónup
(
EVP_MD
 *
md
, (*
˛ónup
)(
EVP_MD_CTX
 *
˘x
));

133 
OSSL_DEPRECATEDIN_3_0


134 
EVP_MD_mëh_£t_˘æ
(
EVP_MD
 *
md
, (*
˘æ
)(
EVP_MD_CTX
 *
˘x
, 
cmd
,

135 
p1
, *
p2
));

136 
OSSL_DEPRECATEDIN_3_0
 
EVP_MD_mëh_gë_öput_blocksize
(c⁄° 
EVP_MD
 *
md
);

137 
OSSL_DEPRECATEDIN_3_0
 
EVP_MD_mëh_gë_ªsu…_size
(c⁄° 
EVP_MD
 *
md
);

138 
OSSL_DEPRECATEDIN_3_0
 
EVP_MD_mëh_gë_≠p_d©asize
(c⁄° 
EVP_MD
 *
md
);

139 
OSSL_DEPRECATEDIN_3_0
 
EVP_MD_mëh_gë_Êags
(c⁄° 
EVP_MD
 *
md
);

140 
OSSL_DEPRECATEDIN_3_0


141 (*
EVP_MD_mëh_gë_öô
(c⁄° 
EVP_MD
 *
md
))(
EVP_MD_CTX
 *
˘x
);

142 
OSSL_DEPRECATEDIN_3_0


143 (*
EVP_MD_mëh_gë_upd©e
(c⁄° 
EVP_MD
 *
md
))(
EVP_MD_CTX
 *
˘x
,

144 c⁄° *
d©a
, 
size_t
 
cou¡
);

145 
OSSL_DEPRECATEDIN_3_0


146 (*
EVP_MD_mëh_gë_föÆ
(c⁄° 
EVP_MD
 *
md
))(
EVP_MD_CTX
 *
˘x
,

147 *
md
);

148 
OSSL_DEPRECATEDIN_3_0


149 (*
EVP_MD_mëh_gë_c›y
(c⁄° 
EVP_MD
 *
md
))(
EVP_MD_CTX
 *
to
,

150 c⁄° 
EVP_MD_CTX
 *
‰om
);

151 
OSSL_DEPRECATEDIN_3_0


152 (*
EVP_MD_mëh_gë_˛ónup
(c⁄° 
EVP_MD
 *
md
))(
EVP_MD_CTX
 *
˘x
);

153 
OSSL_DEPRECATEDIN_3_0


154 (*
EVP_MD_mëh_gë_˘æ
(c⁄° 
EVP_MD
 *
md
))(
EVP_MD_CTX
 *
˘x
, 
cmd
,

155 
p1
, *
p2
);

158 
	#EVP_MD_FLAG_ONESHOT
 0x0001

	)

161 
	#EVP_MD_FLAG_XOF
 0x0002

	)

165 
	#EVP_MD_FLAG_DIGALGID_MASK
 0x0018

	)

169 
	#EVP_MD_FLAG_DIGALGID_NULL
 0x0000

	)

173 
	#EVP_MD_FLAG_DIGALGID_ABSENT
 0x0008

	)

177 
	#EVP_MD_FLAG_DIGALGID_CUSTOM
 0x0018

	)

180 
	#EVP_MD_FLAG_FIPS
 0x0400

	)

184 
	#EVP_MD_CTRL_DIGALGID
 0x1

	)

185 
	#EVP_MD_CTRL_MICALG
 0x2

	)

186 
	#EVP_MD_CTRL_XOF_LEN
 0x3

	)

187 
	#EVP_MD_CTRL_TLSTREE
 0x4

	)

191 
	#EVP_MD_CTRL_ALG_CTRL
 0x1000

	)

197 
	#EVP_MD_CTX_FLAG_ONESHOT
 0x0001

	)

199 
	#EVP_MD_CTX_FLAG_CLEANED
 0x0002

	)

201 
	#EVP_MD_CTX_FLAG_REUSE
 0x0004

	)

209 
	#EVP_MD_CTX_FLAG_NON_FIPS_ALLOW
 0x0008

	)

216 
	#EVP_MD_CTX_FLAG_PAD_MASK
 0xF0

	)

217 
	#EVP_MD_CTX_FLAG_PAD_PKCS1
 0x00

	)

218 
	#EVP_MD_CTX_FLAG_PAD_X931
 0x10

	)

219 
	#EVP_MD_CTX_FLAG_PAD_PSS
 0x20

	)

221 
	#EVP_MD_CTX_FLAG_NO_INIT
 0x0100

	)

228 
	#EVP_MD_CTX_FLAG_FINALISE
 0x0200

	)

230 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


231 
OSSL_DEPRECATEDIN_3_0


232 
EVP_CIPHER
 *
EVP_CIPHER_mëh_√w
(
cùhî_ty≥
, 
block_size
, 
key_Àn
);

233 
OSSL_DEPRECATEDIN_3_0


234 
EVP_CIPHER
 *
EVP_CIPHER_mëh_dup
(c⁄° EVP_CIPHER *
cùhî
);

235 
OSSL_DEPRECATEDIN_3_0


236 
EVP_CIPHER_mëh_‰ì
(
EVP_CIPHER
 *
cùhî
);

237 
OSSL_DEPRECATEDIN_3_0


238 
EVP_CIPHER_mëh_£t_iv_Àngth
(
EVP_CIPHER
 *
cùhî
, 
iv_Àn
);

239 
OSSL_DEPRECATEDIN_3_0


240 
EVP_CIPHER_mëh_£t_Êags
(
EVP_CIPHER
 *
cùhî
, 
Êags
);

241 
OSSL_DEPRECATEDIN_3_0


242 
EVP_CIPHER_mëh_£t_im∂_˘x_size
(
EVP_CIPHER
 *
cùhî
, 
˘x_size
);

243 
OSSL_DEPRECATEDIN_3_0


244 
EVP_CIPHER_mëh_£t_öô
(
EVP_CIPHER
 *
cùhî
,

245 (*
öô
Ë(
EVP_CIPHER_CTX
 *
˘x
,

246 c⁄° *
key
,

247 c⁄° *
iv
,

248 
íc
));

249 
OSSL_DEPRECATEDIN_3_0


250 
EVP_CIPHER_mëh_£t_do_cùhî
(
EVP_CIPHER
 *
cùhî
,

251 (*
do_cùhî
Ë(
EVP_CIPHER_CTX
 *
˘x
,

252 *
out
,

253 c⁄° *
ö
,

254 
size_t
 
öl
));

255 
OSSL_DEPRECATEDIN_3_0


256 
EVP_CIPHER_mëh_£t_˛ónup
(
EVP_CIPHER
 *
cùhî
,

257 (*
˛ónup
Ë(
EVP_CIPHER_CTX
 *));

258 
OSSL_DEPRECATEDIN_3_0


259 
EVP_CIPHER_mëh_£t_£t_a¢1_∑øms
(
EVP_CIPHER
 *
cùhî
,

260 (*
£t_a¢1_∑ømëîs
Ë(
EVP_CIPHER_CTX
 *,

261 
ASN1_TYPE
 *));

262 
OSSL_DEPRECATEDIN_3_0


263 
EVP_CIPHER_mëh_£t_gë_a¢1_∑øms
(
EVP_CIPHER
 *
cùhî
,

264 (*
gë_a¢1_∑ømëîs
Ë(
EVP_CIPHER_CTX
 *,

265 
ASN1_TYPE
 *));

266 
OSSL_DEPRECATEDIN_3_0


267 
EVP_CIPHER_mëh_£t_˘æ
(
EVP_CIPHER
 *
cùhî
,

268 (*
˘æ
Ë(
EVP_CIPHER_CTX
 *, 
ty≥
,

269 
¨g
, *
±r
));

270 
OSSL_DEPRECATEDIN_3_0
 

271 (*
EVP_CIPHER_mëh_gë_öô
(c⁄° 
EVP_CIPHER
 *
cùhî
))(
EVP_CIPHER_CTX
 *
˘x
,

272 c⁄° *
key
,

273 c⁄° *
iv
,

274 
íc
);

275 
OSSL_DEPRECATEDIN_3_0
 

276 (*
EVP_CIPHER_mëh_gë_do_cùhî
(c⁄° 
EVP_CIPHER
 *
cùhî
))(
EVP_CIPHER_CTX
 *
˘x
,

277 *
out
,

278 c⁄° *
ö
,

279 
size_t
 
öl
);

280 
OSSL_DEPRECATEDIN_3_0
 

281 (*
EVP_CIPHER_mëh_gë_˛ónup
(c⁄° 
EVP_CIPHER
 *
cùhî
))(
EVP_CIPHER_CTX
 *);

282 
OSSL_DEPRECATEDIN_3_0
 

283 (*
EVP_CIPHER_mëh_gë_£t_a¢1_∑øms
(c⁄° 
EVP_CIPHER
 *
cùhî
))(
EVP_CIPHER_CTX
 *,

284 
ASN1_TYPE
 *);

285 
OSSL_DEPRECATEDIN_3_0
 

286 (*
EVP_CIPHER_mëh_gë_gë_a¢1_∑øms
(c⁄° 
EVP_CIPHER
 *
cùhî
))(
EVP_CIPHER_CTX
 *,

287 
ASN1_TYPE
 *);

288 
OSSL_DEPRECATEDIN_3_0
 

289 (*
EVP_CIPHER_mëh_gë_˘æ
(c⁄° 
EVP_CIPHER
 *
cùhî
))(
EVP_CIPHER_CTX
 *, 
ty≥
,

290 
¨g
, *
±r
);

297 
	#EVP_CIPH_STREAM_CIPHER
 0x0

	)

298 
	#EVP_CIPH_ECB_MODE
 0x1

	)

299 
	#EVP_CIPH_CBC_MODE
 0x2

	)

300 
	#EVP_CIPH_CFB_MODE
 0x3

	)

301 
	#EVP_CIPH_OFB_MODE
 0x4

	)

302 
	#EVP_CIPH_CTR_MODE
 0x5

	)

303 
	#EVP_CIPH_GCM_MODE
 0x6

	)

304 
	#EVP_CIPH_CCM_MODE
 0x7

	)

305 
	#EVP_CIPH_XTS_MODE
 0x10001

	)

306 
	#EVP_CIPH_WRAP_MODE
 0x10002

	)

307 
	#EVP_CIPH_OCB_MODE
 0x10003

	)

308 
	#EVP_CIPH_SIV_MODE
 0x10004

	)

309 
	#EVP_CIPH_MODE
 0xF0007

	)

311 
	#EVP_CIPH_VARIABLE_LENGTH
 0x8

	)

313 
	#EVP_CIPH_CUSTOM_IV
 0x10

	)

315 
	#EVP_CIPH_ALWAYS_CALL_INIT
 0x20

	)

317 
	#EVP_CIPH_CTRL_INIT
 0x40

	)

319 
	#EVP_CIPH_CUSTOM_KEY_LENGTH
 0x80

	)

321 
	#EVP_CIPH_NO_PADDING
 0x100

	)

323 
	#EVP_CIPH_RAND_KEY
 0x200

	)

325 
	#EVP_CIPH_CUSTOM_COPY
 0x400

	)

327 
	#EVP_CIPH_CUSTOM_IV_LENGTH
 0x800

	)

329 
	#EVP_CIPH_FLAG_DEFAULT_ASN1
 0

	)

332 
	#EVP_CIPH_FLAG_LENGTH_BITS
 0x2000

	)

334 
	#EVP_CIPH_FLAG_FIPS
 0

	)

336 
	#EVP_CIPH_FLAG_NON_FIPS_ALLOW
 0

	)

341 
	#EVP_CIPH_FLAG_CTS
 0x4000

	)

342 
	#EVP_CIPH_FLAG_CUSTOM_CIPHER
 0x100000

	)

343 
	#EVP_CIPH_FLAG_AEAD_CIPHER
 0x200000

	)

344 
	#EVP_CIPH_FLAG_TLS1_1_MULTIBLOCK
 0x400000

	)

346 
	#EVP_CIPH_FLAG_PIPELINE
 0X800000

	)

348 
	#EVP_CIPH_FLAG_CUSTOM_ASN1
 0x1000000

	)

350 
	#EVP_CIPH_FLAG_CIPHER_WITH_MAC
 0x2000000

	)

352 
	#EVP_CIPH_FLAG_GET_WRAP_CIPHER
 0x4000000

	)

353 
	#EVP_CIPH_FLAG_INVERSE_CIPHER
 0x8000000

	)

360 
	#EVP_CIPHER_CTX_FLAG_WRAP_ALLOW
 0x1

	)

364 
	#EVP_CTRL_INIT
 0x0

	)

365 
	#EVP_CTRL_SET_KEY_LENGTH
 0x1

	)

366 
	#EVP_CTRL_GET_RC2_KEY_BITS
 0x2

	)

367 
	#EVP_CTRL_SET_RC2_KEY_BITS
 0x3

	)

368 
	#EVP_CTRL_GET_RC5_ROUNDS
 0x4

	)

369 
	#EVP_CTRL_SET_RC5_ROUNDS
 0x5

	)

370 
	#EVP_CTRL_RAND_KEY
 0x6

	)

371 
	#EVP_CTRL_PBE_PRF_NID
 0x7

	)

372 
	#EVP_CTRL_COPY
 0x8

	)

373 
	#EVP_CTRL_AEAD_SET_IVLEN
 0x9

	)

374 
	#EVP_CTRL_AEAD_GET_TAG
 0x10

	)

375 
	#EVP_CTRL_AEAD_SET_TAG
 0x11

	)

376 
	#EVP_CTRL_AEAD_SET_IV_FIXED
 0x12

	)

377 
	#EVP_CTRL_GCM_SET_IVLEN
 
EVP_CTRL_AEAD_SET_IVLEN


	)

378 
	#EVP_CTRL_GCM_GET_TAG
 
EVP_CTRL_AEAD_GET_TAG


	)

379 
	#EVP_CTRL_GCM_SET_TAG
 
EVP_CTRL_AEAD_SET_TAG


	)

380 
	#EVP_CTRL_GCM_SET_IV_FIXED
 
EVP_CTRL_AEAD_SET_IV_FIXED


	)

381 
	#EVP_CTRL_GCM_IV_GEN
 0x13

	)

382 
	#EVP_CTRL_CCM_SET_IVLEN
 
EVP_CTRL_AEAD_SET_IVLEN


	)

383 
	#EVP_CTRL_CCM_GET_TAG
 
EVP_CTRL_AEAD_GET_TAG


	)

384 
	#EVP_CTRL_CCM_SET_TAG
 
EVP_CTRL_AEAD_SET_TAG


	)

385 
	#EVP_CTRL_CCM_SET_IV_FIXED
 
EVP_CTRL_AEAD_SET_IV_FIXED


	)

386 
	#EVP_CTRL_CCM_SET_L
 0x14

	)

387 
	#EVP_CTRL_CCM_SET_MSGLEN
 0x15

	)

393 
	#EVP_CTRL_AEAD_TLS1_AAD
 0x16

	)

395 
	#EVP_CTRL_AEAD_SET_MAC_KEY
 0x17

	)

397 
	#EVP_CTRL_GCM_SET_IV_INV
 0x18

	)

399 
	#EVP_CTRL_TLS1_1_MULTIBLOCK_AAD
 0x19

	)

400 
	#EVP_CTRL_TLS1_1_MULTIBLOCK_ENCRYPT
 0x1a

	)

401 
	#EVP_CTRL_TLS1_1_MULTIBLOCK_DECRYPT
 0x1b

	)

402 
	#EVP_CTRL_TLS1_1_MULTIBLOCK_MAX_BUFSIZE
 0x1c

	)

404 
	#EVP_CTRL_SSL3_MASTER_SECRET
 0x1d

	)

407 
	#EVP_CTRL_SET_SBOX
 0x1e

	)

412 
	#EVP_CTRL_SBOX_USED
 0x1f

	)

416 
	#EVP_CTRL_KEY_MESH
 0x20

	)

418 
	#EVP_CTRL_BLOCK_PADDING_MODE
 0x21

	)

421 
	#EVP_CTRL_SET_PIPELINE_OUTPUT_BUFS
 0x22

	)

423 
	#EVP_CTRL_SET_PIPELINE_INPUT_BUFS
 0x23

	)

425 
	#EVP_CTRL_SET_PIPELINE_INPUT_LENS
 0x24

	)

427 
	#EVP_CTRL_GET_IVLEN
 0x25

	)

430 
	#EVP_CTRL_SET_SPEED
 0x27

	)

432 
	#EVP_CTRL_PROCESS_UNPROTECTED
 0x28

	)

434 
	#EVP_CTRL_GET_WRAP_CIPHER
 0x29

	)

436 
	#EVP_CTRL_TLSTREE
 0x2A

	)

439 
	#EVP_PADDING_PKCS7
 1

	)

440 
	#EVP_PADDING_ISO7816_4
 2

	)

441 
	#EVP_PADDING_ANSI923
 3

	)

442 
	#EVP_PADDING_ISO10126
 4

	)

443 
	#EVP_PADDING_ZERO
 5

	)

446 
	#EVP_AEAD_TLS1_AAD_LEN
 13

	)

449 *
out
;

450 c⁄° *
öp
;

451 
size_t
 
Àn
;

452 
öãæóve
;

453 } 
	tEVP_CTRL_TLS1_1_MULTIBLOCK_PARAM
;

457 
	#EVP_GCM_TLS_FIXED_IV_LEN
 4

	)

459 
	#EVP_GCM_TLS_EXPLICIT_IV_LEN
 8

	)

461 
	#EVP_GCM_TLS_TAG_LEN
 16

	)

465 
	#EVP_CCM_TLS_FIXED_IV_LEN
 4

	)

467 
	#EVP_CCM_TLS_EXPLICIT_IV_LEN
 8

	)

469 
	#EVP_CCM_TLS_IV_LEN
 12

	)

471 
	#EVP_CCM_TLS_TAG_LEN
 16

	)

473 
	#EVP_CCM8_TLS_TAG_LEN
 8

	)

476 
	#EVP_CHACHAPOLY_TLS_TAG_LEN
 16

	)

478 
	sevp_cùhî_öfo_°
 {

479 c⁄° 
EVP_CIPHER
 *
cùhî
;

480 
iv
[
EVP_MAX_IV_LENGTH
];

481 } 
	tEVP_CIPHER_INFO
;

485 (
EVP_PBE_KEYGEN
Ë(
	tEVP_CIPHER_CTX
 *
	t˘x
, c⁄° *
	t∑ss
,

486 
	t∑s¶í
, 
	tASN1_TYPE
 *
	t∑øm
,

487 c⁄° 
	tEVP_CIPHER
 *
	tcùhî
, c⁄° 
	tEVP_MD
 *
	tmd
,

488 
	tí_de
);

490 (
EVP_PBE_KEYGEN_EX
Ë(
	tEVP_CIPHER_CTX
 *
	t˘x
, c⁄° *
	t∑ss
,

491 
	t∑s¶í
, 
	tASN1_TYPE
 *
	t∑øm
,

492 c⁄° 
	tEVP_CIPHER
 *
	tcùhî
, c⁄° 
	tEVP_MD
 *
	tmd
,

493 
	tí_de
, 
	tOSSL_LIB_CTX
 *
	tlib˘x
, c⁄° *
	t¥›q
);

495 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


496 
	#EVP_PKEY_assign_RSA
(
pkey
,
rß
Ë
	`EVP_PKEY_assign
(’key),
EVP_PKEY_RSA
,\

497 (
rß
))

	)

500 #i‚de‡
OPENSSL_NO_DSA


501 
	#EVP_PKEY_assign_DSA
(
pkey
,
dß
Ë
	`EVP_PKEY_assign
(’key),
EVP_PKEY_DSA
,\

502 (
dß
))

	)

505 #i‡!
deföed
(
OPENSSL_NO_DH
Ë&& !deföed(
OPENSSL_NO_DEPRECATED_3_0
)

506 
	#EVP_PKEY_assign_DH
(
pkey
,
dh
Ë
	`EVP_PKEY_assign
(’key),
EVP_PKEY_DH
,(dh))

	)

509 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


510 #i‚de‡
OPENSSL_NO_EC


511 
	#EVP_PKEY_assign_EC_KEY
(
pkey
,
eckey
) \

512 
	`EVP_PKEY_assign
((
pkey
), 
EVP_PKEY_EC
, (
eckey
))

	)

515 #i‚de‡
OPENSSL_NO_SIPHASH


516 
	#EVP_PKEY_assign_SIPHASH
(
pkey
,
shkey
Ë
	`EVP_PKEY_assign
((pkey),\

517 
EVP_PKEY_SIPHASH
,(
shkey
))

	)

520 #i‚de‡
OPENSSL_NO_POLY1305


521 
	#EVP_PKEY_assign_POLY1305
(
pkey
,
pﬁykey
Ë
	`EVP_PKEY_assign
((pkey),\

522 
EVP_PKEY_POLY1305
,(
pﬁykey
))

	)

526 
	#EVP_gë_dige°bynid
(
a
Ë
	`EVP_gë_dige°by«me
(
	`OBJ_nid2¢
◊))

	)

527 
	#EVP_gë_dige°byobj
(
a
Ë
	`EVP_gë_dige°bynid
(
	`OBJ_obj2nid
◊))

	)

528 
	#EVP_gë_cùhîbynid
(
a
Ë
	`EVP_gë_cùhîby«me
(
	`OBJ_nid2¢
◊))

	)

529 
	#EVP_gë_cùhîbyobj
(
a
Ë
	`EVP_gë_cùhîbynid
(
	`OBJ_obj2nid
◊))

	)

531 
EVP_MD_gë_ty≥
(c⁄° 
EVP_MD
 *
md
);

532 
	#EVP_MD_ty≥
 
EVP_MD_gë_ty≥


	)

533 
	#EVP_MD_nid
 
EVP_MD_gë_ty≥


	)

534 c⁄° *
EVP_MD_gë0_«me
(c⁄° 
EVP_MD
 *
md
);

535 
	#EVP_MD_«me
 
EVP_MD_gë0_«me


	)

536 c⁄° *
EVP_MD_gë0_des¸ùti⁄
(c⁄° 
EVP_MD
 *
md
);

537 
EVP_MD_is_a
(c⁄° 
EVP_MD
 *
md
, c⁄° *
«me
);

538 
EVP_MD_«mes_do_Æl
(c⁄° 
EVP_MD
 *
md
,

539 (*
‚
)(c⁄° *
«me
, *
d©a
),

540 *
d©a
);

541 c⁄° 
OSSL_PROVIDER
 *
EVP_MD_gë0_¥ovidî
(c⁄° 
EVP_MD
 *
md
);

542 
EVP_MD_gë_pkey_ty≥
(c⁄° 
EVP_MD
 *
md
);

543 
	#EVP_MD_pkey_ty≥
 
EVP_MD_gë_pkey_ty≥


	)

544 
EVP_MD_gë_size
(c⁄° 
EVP_MD
 *
md
);

545 
	#EVP_MD_size
 
EVP_MD_gë_size


	)

546 
EVP_MD_gë_block_size
(c⁄° 
EVP_MD
 *
md
);

547 
	#EVP_MD_block_size
 
EVP_MD_gë_block_size


	)

548 
EVP_MD_gë_Êags
(c⁄° 
EVP_MD
 *
md
);

549 
	#EVP_MD_Êags
 
EVP_MD_gë_Êags


	)

551 c⁄° 
EVP_MD
 *
EVP_MD_CTX_gë0_md
(c⁄° 
EVP_MD_CTX
 *
˘x
);

552 
EVP_MD
 *
EVP_MD_CTX_gë1_md
(
EVP_MD_CTX
 *
˘x
);

553 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


554 
OSSL_DEPRECATEDIN_3_0


555 c⁄° 
EVP_MD
 *
EVP_MD_CTX_md
(c⁄° 
EVP_MD_CTX
 *
˘x
);

556 
OSSL_DEPRECATEDIN_3_0


557 (*
EVP_MD_CTX_upd©e_‚
(
EVP_MD_CTX
 *
˘x
))(EVP_MD_CTX *ctx,

558 c⁄° *
d©a
, 
size_t
 
cou¡
);

559 
OSSL_DEPRECATEDIN_3_0


560 
EVP_MD_CTX_£t_upd©e_‚
(
EVP_MD_CTX
 *
˘x
,

561 (*
upd©e
Ë(
EVP_MD_CTX
 *
˘x
,

562 c⁄° *
d©a
, 
size_t
 
cou¡
));

564 
	#EVP_MD_CTX_gë0_«me
(
e
Ë
	`EVP_MD_gë0_«me
(
	`EVP_MD_CTX_gë0_md
”))

	)

565 
	#EVP_MD_CTX_gë_size
(
e
Ë
	`EVP_MD_gë_size
(
	`EVP_MD_CTX_gë0_md
”))

	)

566 
	#EVP_MD_CTX_size
 
EVP_MD_CTX_gë_size


	)

567 
	#EVP_MD_CTX_gë_block_size
(
e
Ë
	`EVP_MD_gë_block_size
(
	`EVP_MD_CTX_gë0_md
”))

	)

568 
	#EVP_MD_CTX_block_size
 
EVP_MD_CTX_gë_block_size


	)

569 
	#EVP_MD_CTX_gë_ty≥
(
e
Ë
	`EVP_MD_gë_ty≥
(
	`EVP_MD_CTX_gë0_md
”))

	)

570 
	#EVP_MD_CTX_ty≥
 
EVP_MD_CTX_gë_ty≥


	)

571 
EVP_PKEY_CTX
 *
EVP_MD_CTX_gë_pkey_˘x
(c⁄° 
EVP_MD_CTX
 *
˘x
);

572 
	#EVP_MD_CTX_pkey_˘x
 
EVP_MD_CTX_gë_pkey_˘x


	)

573 
EVP_MD_CTX_£t_pkey_˘x
(
EVP_MD_CTX
 *
˘x
, 
EVP_PKEY_CTX
 *
p˘x
);

574 *
EVP_MD_CTX_gë0_md_d©a
(c⁄° 
EVP_MD_CTX
 *
˘x
);

575 
	#EVP_MD_CTX_md_d©a
 
EVP_MD_CTX_gë0_md_d©a


	)

577 
EVP_CIPHER_gë_nid
(c⁄° 
EVP_CIPHER
 *
cùhî
);

578 
	#EVP_CIPHER_nid
 
EVP_CIPHER_gë_nid


	)

579 c⁄° *
EVP_CIPHER_gë0_«me
(c⁄° 
EVP_CIPHER
 *
cùhî
);

580 
	#EVP_CIPHER_«me
 
EVP_CIPHER_gë0_«me


	)

581 c⁄° *
EVP_CIPHER_gë0_des¸ùti⁄
(c⁄° 
EVP_CIPHER
 *
cùhî
);

582 
EVP_CIPHER_is_a
(c⁄° 
EVP_CIPHER
 *
cùhî
, c⁄° *
«me
);

583 
EVP_CIPHER_«mes_do_Æl
(c⁄° 
EVP_CIPHER
 *
cùhî
,

584 (*
‚
)(c⁄° *
«me
, *
d©a
),

585 *
d©a
);

586 c⁄° 
OSSL_PROVIDER
 *
EVP_CIPHER_gë0_¥ovidî
(c⁄° 
EVP_CIPHER
 *
cùhî
);

587 
EVP_CIPHER_gë_block_size
(c⁄° 
EVP_CIPHER
 *
cùhî
);

588 
	#EVP_CIPHER_block_size
 
EVP_CIPHER_gë_block_size


	)

589 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


590 
OSSL_DEPRECATEDIN_3_0


591 
EVP_CIPHER_im∂_˘x_size
(c⁄° 
EVP_CIPHER
 *
cùhî
);

593 
EVP_CIPHER_gë_key_Àngth
(c⁄° 
EVP_CIPHER
 *
cùhî
);

594 
	#EVP_CIPHER_key_Àngth
 
EVP_CIPHER_gë_key_Àngth


	)

595 
EVP_CIPHER_gë_iv_Àngth
(c⁄° 
EVP_CIPHER
 *
cùhî
);

596 
	#EVP_CIPHER_iv_Àngth
 
EVP_CIPHER_gë_iv_Àngth


	)

597 
EVP_CIPHER_gë_Êags
(c⁄° 
EVP_CIPHER
 *
cùhî
);

598 
	#EVP_CIPHER_Êags
 
EVP_CIPHER_gë_Êags


	)

599 
EVP_CIPHER_gë_mode
(c⁄° 
EVP_CIPHER
 *
cùhî
);

600 
	#EVP_CIPHER_mode
 
EVP_CIPHER_gë_mode


	)

601 
EVP_CIPHER_gë_ty≥
(c⁄° 
EVP_CIPHER
 *
cùhî
);

602 
	#EVP_CIPHER_ty≥
 
EVP_CIPHER_gë_ty≥


	)

603 
EVP_CIPHER
 *
EVP_CIPHER_„tch
(
OSSL_LIB_CTX
 *
˘x
, c⁄° *
Æg‹ôhm
,

604 c⁄° *
¥›îtõs
);

605 
EVP_CIPHER_up_ªf
(
EVP_CIPHER
 *
cùhî
);

606 
EVP_CIPHER_‰ì
(
EVP_CIPHER
 *
cùhî
);

608 c⁄° 
EVP_CIPHER
 *
EVP_CIPHER_CTX_gë0_cùhî
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

609 
EVP_CIPHER
 *
EVP_CIPHER_CTX_gë1_cùhî
(
EVP_CIPHER_CTX
 *
˘x
);

610 
EVP_CIPHER_CTX_is_í¸y±ög
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

611 
	#EVP_CIPHER_CTX_í¸y±ög
 
EVP_CIPHER_CTX_is_í¸y±ög


	)

612 
EVP_CIPHER_CTX_gë_nid
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

613 
	#EVP_CIPHER_CTX_nid
 
EVP_CIPHER_CTX_gë_nid


	)

614 
EVP_CIPHER_CTX_gë_block_size
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

615 
	#EVP_CIPHER_CTX_block_size
 
EVP_CIPHER_CTX_gë_block_size


	)

616 
EVP_CIPHER_CTX_gë_key_Àngth
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

617 
	#EVP_CIPHER_CTX_key_Àngth
 
EVP_CIPHER_CTX_gë_key_Àngth


	)

618 
EVP_CIPHER_CTX_gë_iv_Àngth
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

619 
	#EVP_CIPHER_CTX_iv_Àngth
 
EVP_CIPHER_CTX_gë_iv_Àngth


	)

620 
EVP_CIPHER_CTX_gë_èg_Àngth
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

621 
	#EVP_CIPHER_CTX_èg_Àngth
 
EVP_CIPHER_CTX_gë_èg_Àngth


	)

622 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


623 c⁄° 
EVP_CIPHER
 *
EVP_CIPHER_CTX_cùhî
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

624 
OSSL_DEPRECATEDIN_3_0
 c⁄° *
EVP_CIPHER_CTX_iv
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

625 
OSSL_DEPRECATEDIN_3_0
 c⁄° *
EVP_CIPHER_CTX_‹igöÆ_iv
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

626 
OSSL_DEPRECATEDIN_3_0
 *
EVP_CIPHER_CTX_iv_noc⁄°
(
EVP_CIPHER_CTX
 *
˘x
);

628 
EVP_CIPHER_CTX_gë_upd©ed_iv
(
EVP_CIPHER_CTX
 *
˘x
, *
buf
, 
size_t
 
Àn
);

629 
EVP_CIPHER_CTX_gë_‹igöÆ_iv
(
EVP_CIPHER_CTX
 *
˘x
, *
buf
, 
size_t
 
Àn
);

630 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


631 
OSSL_DEPRECATEDIN_3_0


632 *
EVP_CIPHER_CTX_buf_noc⁄°
(
EVP_CIPHER_CTX
 *
˘x
);

634 
EVP_CIPHER_CTX_gë_num
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

635 
	#EVP_CIPHER_CTX_num
 
EVP_CIPHER_CTX_gë_num


	)

636 
EVP_CIPHER_CTX_£t_num
(
EVP_CIPHER_CTX
 *
˘x
, 
num
);

637 
EVP_CIPHER_CTX_c›y
(
EVP_CIPHER_CTX
 *
out
, c⁄° EVP_CIPHER_CTX *
ö
);

638 *
EVP_CIPHER_CTX_gë_≠p_d©a
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

639 
EVP_CIPHER_CTX_£t_≠p_d©a
(
EVP_CIPHER_CTX
 *
˘x
, *
d©a
);

640 *
EVP_CIPHER_CTX_gë_cùhî_d©a
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

641 *
EVP_CIPHER_CTX_£t_cùhî_d©a
(
EVP_CIPHER_CTX
 *
˘x
, *
cùhî_d©a
);

642 
	#EVP_CIPHER_CTX_gë0_«me
(
c
Ë
	`EVP_CIPHER_gë0_«me
(
	`EVP_CIPHER_CTX_gë0_cùhî
(c))

	)

643 
	#EVP_CIPHER_CTX_gë_ty≥
(
c
Ë
	`EVP_CIPHER_gë_ty≥
(
	`EVP_CIPHER_CTX_gë0_cùhî
(c))

	)

644 
	#EVP_CIPHER_CTX_ty≥
 
EVP_CIPHER_CTX_gë_ty≥


	)

645 #i‚de‡
OPENSSL_NO_DEPRECATED_1_1_0


646 
	#EVP_CIPHER_CTX_Êags
(
c
Ë
	`EVP_CIPHER_gë_Êags
(
	`EVP_CIPHER_CTX_gë0_cùhî
(c))

	)

648 
	#EVP_CIPHER_CTX_gë_mode
(
c
Ë
	`EVP_CIPHER_gë_mode
(
	`EVP_CIPHER_CTX_gë0_cùhî
(c))

	)

649 
	#EVP_CIPHER_CTX_mode
 
EVP_CIPHER_CTX_gë_mode


	)

651 
	#EVP_ENCODE_LENGTH
(
l
Ë(((÷)+2)/3*4)+(÷)/48+1)*2+80)

	)

652 
	#EVP_DECODE_LENGTH
(
l
Ë((÷)+3)/4*3+80)

	)

654 
	#EVP_SignInô_ex
(
a
,
b
,
c
Ë
	`EVP_Dige°Inô_ex
◊,b,c)

	)

655 
	#EVP_SignInô
(
a
,
b
Ë
	`EVP_Dige°Inô
◊,b)

	)

656 
	#EVP_SignUpd©e
(
a
,
b
,
c
Ë
	`EVP_Dige°Upd©e
◊,b,c)

	)

657 
	#EVP_VîifyInô_ex
(
a
,
b
,
c
Ë
	`EVP_Dige°Inô_ex
◊,b,c)

	)

658 
	#EVP_VîifyInô
(
a
,
b
Ë
	`EVP_Dige°Inô
◊,b)

	)

659 
	#EVP_VîifyUpd©e
(
a
,
b
,
c
Ë
	`EVP_Dige°Upd©e
◊,b,c)

	)

660 
	#EVP_O≥nUpd©e
(
a
,
b
,
c
,
d
,
e
Ë
	`EVP_De¸y±Upd©e
◊,b,c,d,e)

	)

661 
	#EVP_SólUpd©e
(
a
,
b
,
c
,
d
,
e
Ë
	`EVP_En¸y±Upd©e
◊,b,c,d,e)

	)

663 #ifde‡
CONST_STRICT


664 
BIO_£t_md
(
BIO
 *, c⁄° 
EVP_MD
 *
md
);

666 
	#BIO_£t_md
(
b
,
md
Ë
	`BIO_˘æ
(b,
BIO_C_SET_MD
,0,(*)(md))

	)

668 
	#BIO_gë_md
(
b
,
mdp
Ë
	`BIO_˘æ
(b,
BIO_C_GET_MD
,0,(mdp))

	)

669 
	#BIO_gë_md_˘x
(
b
,
md˝
Ë
	`BIO_˘æ
(b,
BIO_C_GET_MD_CTX
,0,(md˝))

	)

670 
	#BIO_£t_md_˘x
(
b
,
md˝
Ë
	`BIO_˘æ
(b,
BIO_C_SET_MD_CTX
,0,(md˝))

	)

671 
	#BIO_gë_cùhî_°©us
(
b
Ë
	`BIO_˘æ
(b,
BIO_C_GET_CIPHER_STATUS
,0,
NULL
)

	)

672 
	#BIO_gë_cùhî_˘x
(
b
,
c_µ
Ë
	`BIO_˘æ
(b,
BIO_C_GET_CIPHER_CTX
,0,(c_µ))

	)

674  
EVP_Cùhî
(
EVP_CIPHER_CTX
 *
c
,

675 *
out
,

676 c⁄° *
ö
, 
öl
);

678 
	#EVP_add_cùhî_Æüs
(
n
,
Æüs
) \

679 
	`OBJ_NAME_add
((
Æüs
),
OBJ_NAME_TYPE_CIPHER_METH
|
OBJ_NAME_ALIAS
,(
n
))

	)

680 
	#EVP_add_dige°_Æüs
(
n
,
Æüs
) \

681 
	`OBJ_NAME_add
((
Æüs
),
OBJ_NAME_TYPE_MD_METH
|
OBJ_NAME_ALIAS
,(
n
))

	)

682 
	#EVP_dñëe_cùhî_Æüs
(
Æüs
) \

683 
	`OBJ_NAME_ªmove
(
Æüs
,
OBJ_NAME_TYPE_CIPHER_METH
|
OBJ_NAME_ALIAS
);

	)

684 
	#EVP_dñëe_dige°_Æüs
(
Æüs
) \

685 
	`OBJ_NAME_ªmove
(
Æüs
,
OBJ_NAME_TYPE_MD_METH
|
OBJ_NAME_ALIAS
);

	)

687 
EVP_MD_gë_∑øms
(c⁄° 
EVP_MD
 *
dige°
, 
OSSL_PARAM
 
∑øms
[]);

688 
EVP_MD_CTX_£t_∑øms
(
EVP_MD_CTX
 *
˘x
, c⁄° 
OSSL_PARAM
 
∑øms
[]);

689 
EVP_MD_CTX_gë_∑øms
(
EVP_MD_CTX
 *
˘x
, 
OSSL_PARAM
 
∑øms
[]);

690 c⁄° 
OSSL_PARAM
 *
EVP_MD_gëèbÀ_∑øms
(c⁄° 
EVP_MD
 *
dige°
);

691 c⁄° 
OSSL_PARAM
 *
EVP_MD_£âabÀ_˘x_∑øms
(c⁄° 
EVP_MD
 *
md
);

692 c⁄° 
OSSL_PARAM
 *
EVP_MD_gëèbÀ_˘x_∑øms
(c⁄° 
EVP_MD
 *
md
);

693 c⁄° 
OSSL_PARAM
 *
EVP_MD_CTX_£âabÀ_∑øms
(
EVP_MD_CTX
 *
˘x
);

694 c⁄° 
OSSL_PARAM
 *
EVP_MD_CTX_gëèbÀ_∑øms
(
EVP_MD_CTX
 *
˘x
);

695 
EVP_MD_CTX_˘æ
(
EVP_MD_CTX
 *
˘x
, 
cmd
, 
p1
, *
p2
);

696 
EVP_MD_CTX
 *
EVP_MD_CTX_√w
();

697 
EVP_MD_CTX_ª£t
(
EVP_MD_CTX
 *
˘x
);

698 
EVP_MD_CTX_‰ì
(
EVP_MD_CTX
 *
˘x
);

699 
	#EVP_MD_CTX_¸óã
(Ë
	`EVP_MD_CTX_√w
()

	)

700 
	#EVP_MD_CTX_öô
(
˘x
Ë
	`EVP_MD_CTX_ª£t
((˘x))

	)

701 
	#EVP_MD_CTX_de°roy
(
˘x
Ë
	`EVP_MD_CTX_‰ì
((˘x))

	)

702 
__owur
 
EVP_MD_CTX_c›y_ex
(
EVP_MD_CTX
 *
out
, c⁄° EVP_MD_CTX *
ö
);

703 
EVP_MD_CTX_£t_Êags
(
EVP_MD_CTX
 *
˘x
, 
Êags
);

704 
EVP_MD_CTX_˛ór_Êags
(
EVP_MD_CTX
 *
˘x
, 
Êags
);

705 
EVP_MD_CTX_ã°_Êags
(c⁄° 
EVP_MD_CTX
 *
˘x
, 
Êags
);

706 
__owur
 
EVP_Dige°Inô_ex2
(
EVP_MD_CTX
 *
˘x
, c⁄° 
EVP_MD
 *
ty≥
,

707 c⁄° 
OSSL_PARAM
 
∑øms
[]);

708 
__owur
 
EVP_Dige°Inô_ex
(
EVP_MD_CTX
 *
˘x
, c⁄° 
EVP_MD
 *
ty≥
,

709 
ENGINE
 *
im∂
);

710 
__owur
 
EVP_Dige°Upd©e
(
EVP_MD_CTX
 *
˘x
, c⁄° *
d
,

711 
size_t
 
˙t
);

712 
__owur
 
EVP_Dige°FöÆ_ex
(
EVP_MD_CTX
 *
˘x
, *
md
,

713 *
s
);

714 
__owur
 
EVP_Dige°
(c⁄° *
d©a
, 
size_t
 
cou¡
,

715 *
md
, *
size
,

716 c⁄° 
EVP_MD
 *
ty≥
, 
ENGINE
 *
im∂
);

717 
__owur
 
EVP_Q_dige°
(
OSSL_LIB_CTX
 *
lib˘x
, c⁄° *
«me
,

718 c⁄° *
¥›q
, c⁄° *
d©a
, 
size_t
 
d©Æí
,

719 *
md
, 
size_t
 *
mdÀn
);

721 
__owur
 
EVP_MD_CTX_c›y
(
EVP_MD_CTX
 *
out
, c⁄° EVP_MD_CTX *
ö
);

722 
__owur
 
EVP_Dige°Inô
(
EVP_MD_CTX
 *
˘x
, c⁄° 
EVP_MD
 *
ty≥
);

723 
__owur
 
EVP_Dige°FöÆ
(
EVP_MD_CTX
 *
˘x
, *
md
,

724 *
s
);

725 
__owur
 
EVP_Dige°FöÆXOF
(
EVP_MD_CTX
 *
˘x
, *
md
,

726 
size_t
 
Àn
);

728 
__owur
 
EVP_MD
 *
EVP_MD_„tch
(
OSSL_LIB_CTX
 *
˘x
, c⁄° *
Æg‹ôhm
,

729 c⁄° *
¥›îtõs
);

731 
EVP_MD_up_ªf
(
EVP_MD
 *
md
);

732 
EVP_MD_‰ì
(
EVP_MD
 *
md
);

734 
EVP_ªad_pw_°rög
(*
buf
, 
Àngth
, c⁄° *
¥om±
, 
vîify
);

735 
EVP_ªad_pw_°rög_mö
(*
buf
, 
möÀn
, 
maxÀn
,

736 c⁄° *
¥om±
, 
vîify
);

737 
EVP_£t_pw_¥om±
(c⁄° *
¥om±
);

738 *
EVP_gë_pw_¥om±
();

740 
__owur
 
EVP_ByãsToKey
(c⁄° 
EVP_CIPHER
 *
ty≥
, c⁄° 
EVP_MD
 *
md
,

741 c⁄° *
ß…
,

742 c⁄° *
d©a
, 
d©Æ
, 
cou¡
,

743 *
key
, *
iv
);

745 
EVP_CIPHER_CTX_£t_Êags
(
EVP_CIPHER_CTX
 *
˘x
, 
Êags
);

746 
EVP_CIPHER_CTX_˛ór_Êags
(
EVP_CIPHER_CTX
 *
˘x
, 
Êags
);

747 
EVP_CIPHER_CTX_ã°_Êags
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
, 
Êags
);

749 
__owur
 
EVP_En¸y±Inô
(
EVP_CIPHER_CTX
 *
˘x
, c⁄° 
EVP_CIPHER
 *
cùhî
,

750 c⁄° *
key
, c⁄° *
iv
);

751  
EVP_En¸y±Inô_ex
(
EVP_CIPHER_CTX
 *
˘x
,

752 c⁄° 
EVP_CIPHER
 *
cùhî
, 
ENGINE
 *
im∂
,

753 c⁄° *
key
,

754 c⁄° *
iv
);

755 
__owur
 
EVP_En¸y±Inô_ex2
(
EVP_CIPHER_CTX
 *
˘x
, c⁄° 
EVP_CIPHER
 *
cùhî
,

756 c⁄° *
key
,

757 c⁄° *
iv
,

758 c⁄° 
OSSL_PARAM
 
∑øms
[]);

759  
EVP_En¸y±Upd©e
(
EVP_CIPHER_CTX
 *
˘x
, *
out
,

760 *
oué
, c⁄° *
ö
, 
öl
);

761  
EVP_En¸y±FöÆ_ex
(
EVP_CIPHER_CTX
 *
˘x
, *
out
,

762 *
oué
);

763  
EVP_En¸y±FöÆ
(
EVP_CIPHER_CTX
 *
˘x
, *
out
,

764 *
oué
);

766 
__owur
 
EVP_De¸y±Inô
(
EVP_CIPHER_CTX
 *
˘x
, c⁄° 
EVP_CIPHER
 *
cùhî
,

767 c⁄° *
key
, c⁄° *
iv
);

768  
EVP_De¸y±Inô_ex
(
EVP_CIPHER_CTX
 *
˘x
,

769 c⁄° 
EVP_CIPHER
 *
cùhî
, 
ENGINE
 *
im∂
,

770 c⁄° *
key
,

771 c⁄° *
iv
);

772 
__owur
 
EVP_De¸y±Inô_ex2
(
EVP_CIPHER_CTX
 *
˘x
, c⁄° 
EVP_CIPHER
 *
cùhî
,

773 c⁄° *
key
,

774 c⁄° *
iv
,

775 c⁄° 
OSSL_PARAM
 
∑øms
[]);

776  
EVP_De¸y±Upd©e
(
EVP_CIPHER_CTX
 *
˘x
, *
out
,

777 *
oué
, c⁄° *
ö
, 
öl
);

778 
__owur
 
EVP_De¸y±FöÆ
(
EVP_CIPHER_CTX
 *
˘x
, *
outm
,

779 *
oué
);

780  
EVP_De¸y±FöÆ_ex
(
EVP_CIPHER_CTX
 *
˘x
, *
outm
,

781 *
oué
);

783 
__owur
 
EVP_CùhîInô
(
EVP_CIPHER_CTX
 *
˘x
, c⁄° 
EVP_CIPHER
 *
cùhî
,

784 c⁄° *
key
, c⁄° *
iv
,

785 
íc
);

786  
EVP_CùhîInô_ex
(
EVP_CIPHER_CTX
 *
˘x
,

787 c⁄° 
EVP_CIPHER
 *
cùhî
, 
ENGINE
 *
im∂
,

788 c⁄° *
key
,

789 c⁄° *
iv
, 
íc
);

790 
__owur
 
EVP_CùhîInô_ex2
(
EVP_CIPHER_CTX
 *
˘x
, c⁄° 
EVP_CIPHER
 *
cùhî
,

791 c⁄° *
key
, c⁄° *
iv
,

792 
íc
, c⁄° 
OSSL_PARAM
 
∑øms
[]);

793 
__owur
 
EVP_CùhîUpd©e
(
EVP_CIPHER_CTX
 *
˘x
, *
out
,

794 *
oué
, c⁄° *
ö
, 
öl
);

795 
__owur
 
EVP_CùhîFöÆ
(
EVP_CIPHER_CTX
 *
˘x
, *
outm
,

796 *
oué
);

797 
__owur
 
EVP_CùhîFöÆ_ex
(
EVP_CIPHER_CTX
 *
˘x
, *
outm
,

798 *
oué
);

800 
__owur
 
EVP_SignFöÆ
(
EVP_MD_CTX
 *
˘x
, *
md
, *
s
,

801 
EVP_PKEY
 *
pkey
);

802 
__owur
 
EVP_SignFöÆ_ex
(
EVP_MD_CTX
 *
˘x
, *
md
, *
s
,

803 
EVP_PKEY
 *
pkey
, 
OSSL_LIB_CTX
 *
lib˘x
,

804 c⁄° *
¥›q
);

806 
__owur
 
EVP_Dige°Sign
(
EVP_MD_CTX
 *
˘x
, *
sigªt
,

807 
size_t
 *
sigÀn
, c⁄° *
tbs
,

808 
size_t
 
tb¶í
);

810 
__owur
 
EVP_VîifyFöÆ
(
EVP_MD_CTX
 *
˘x
, c⁄° *
sigbuf
,

811 
sigÀn
, 
EVP_PKEY
 *
pkey
);

812 
__owur
 
EVP_VîifyFöÆ_ex
(
EVP_MD_CTX
 *
˘x
, c⁄° *
sigbuf
,

813 
sigÀn
, 
EVP_PKEY
 *
pkey
,

814 
OSSL_LIB_CTX
 *
lib˘x
, c⁄° *
¥›q
);

816 
__owur
 
EVP_Dige°Vîify
(
EVP_MD_CTX
 *
˘x
, c⁄° *
sigªt
,

817 
size_t
 
sigÀn
, c⁄° *
tbs
,

818 
size_t
 
tb¶í
);

820 
EVP_Dige°SignInô_ex
(
EVP_MD_CTX
 *
˘x
, 
EVP_PKEY_CTX
 **
p˘x
,

821 c⁄° *
md«me
, 
OSSL_LIB_CTX
 *
lib˘x
,

822 c⁄° *
¥›s
, 
EVP_PKEY
 *
pkey
,

823 c⁄° 
OSSL_PARAM
 
∑øms
[]);

824  
EVP_Dige°SignInô
(
EVP_MD_CTX
 *
˘x
, 
EVP_PKEY_CTX
 **
p˘x
,

825 c⁄° 
EVP_MD
 *
ty≥
, 
ENGINE
 *
e
,

826 
EVP_PKEY
 *
pkey
);

827 
EVP_Dige°SignUpd©e
(
EVP_MD_CTX
 *
˘x
, c⁄° *
d©a
, 
size_t
 
dsize
);

828 
__owur
 
EVP_Dige°SignFöÆ
(
EVP_MD_CTX
 *
˘x
, *
sigªt
,

829 
size_t
 *
sigÀn
);

831 
EVP_Dige°VîifyInô_ex
(
EVP_MD_CTX
 *
˘x
, 
EVP_PKEY_CTX
 **
p˘x
,

832 c⁄° *
md«me
, 
OSSL_LIB_CTX
 *
lib˘x
,

833 c⁄° *
¥›s
, 
EVP_PKEY
 *
pkey
,

834 c⁄° 
OSSL_PARAM
 
∑øms
[]);

835 
__owur
 
EVP_Dige°VîifyInô
(
EVP_MD_CTX
 *
˘x
, 
EVP_PKEY_CTX
 **
p˘x
,

836 c⁄° 
EVP_MD
 *
ty≥
, 
ENGINE
 *
e
,

837 
EVP_PKEY
 *
pkey
);

838 
EVP_Dige°VîifyUpd©e
(
EVP_MD_CTX
 *
˘x
, c⁄° *
d©a
, 
size_t
 
dsize
);

839 
__owur
 
EVP_Dige°VîifyFöÆ
(
EVP_MD_CTX
 *
˘x
, c⁄° *
sig
,

840 
size_t
 
sigÀn
);

842 
__owur
 
EVP_O≥nInô
(
EVP_CIPHER_CTX
 *
˘x
, c⁄° 
EVP_CIPHER
 *
ty≥
,

843 c⁄° *
ek
, 
ekl
,

844 c⁄° *
iv
, 
EVP_PKEY
 *
¥iv
);

845 
__owur
 
EVP_O≥nFöÆ
(
EVP_CIPHER_CTX
 *
˘x
, *
out
, *
oué
);

847 
__owur
 
EVP_SólInô
(
EVP_CIPHER_CTX
 *
˘x
, c⁄° 
EVP_CIPHER
 *
ty≥
,

848 **
ek
, *
ekl
, *
iv
,

849 
EVP_PKEY
 **
pubk
, 
≈ubk
);

850 
__owur
 
EVP_SólFöÆ
(
EVP_CIPHER_CTX
 *
˘x
, *
out
, *
oué
);

852 
EVP_ENCODE_CTX
 *
EVP_ENCODE_CTX_√w
();

853 
EVP_ENCODE_CTX_‰ì
(
EVP_ENCODE_CTX
 *
˘x
);

854 
EVP_ENCODE_CTX_c›y
(
EVP_ENCODE_CTX
 *
d˘x
, c⁄° EVP_ENCODE_CTX *
s˘x
);

855 
EVP_ENCODE_CTX_num
(
EVP_ENCODE_CTX
 *
˘x
);

856 
EVP_EncodeInô
(
EVP_ENCODE_CTX
 *
˘x
);

857 
EVP_EncodeUpd©e
(
EVP_ENCODE_CTX
 *
˘x
, *
out
, *
oué
,

858 c⁄° *
ö
, 
öl
);

859 
EVP_EncodeFöÆ
(
EVP_ENCODE_CTX
 *
˘x
, *
out
, *
oué
);

860 
EVP_EncodeBlock
(*
t
, c⁄° *
f
, 
n
);

862 
EVP_DecodeInô
(
EVP_ENCODE_CTX
 *
˘x
);

863 
EVP_DecodeUpd©e
(
EVP_ENCODE_CTX
 *
˘x
, *
out
, *
oué
,

864 c⁄° *
ö
, 
öl
);

865 
EVP_DecodeFöÆ
(
EVP_ENCODE_CTX
 *
˘x
, 

866 *
out
, *
oué
);

867 
EVP_DecodeBlock
(*
t
, c⁄° *
f
, 
n
);

869 #i‚de‡
OPENSSL_NO_DEPRECATED_1_1_0


870 
	#EVP_CIPHER_CTX_öô
(
c
Ë
	`EVP_CIPHER_CTX_ª£t
(c)

	)

871 
	#EVP_CIPHER_CTX_˛ónup
(
c
Ë
	`EVP_CIPHER_CTX_ª£t
(c)

	)

873 
EVP_CIPHER_CTX
 *
EVP_CIPHER_CTX_√w
();

874 
EVP_CIPHER_CTX_ª£t
(
EVP_CIPHER_CTX
 *
c
);

875 
EVP_CIPHER_CTX_‰ì
(
EVP_CIPHER_CTX
 *
c
);

876 
EVP_CIPHER_CTX_£t_key_Àngth
(
EVP_CIPHER_CTX
 *
x
, 
keyÀn
);

877 
EVP_CIPHER_CTX_£t_∑ddög
(
EVP_CIPHER_CTX
 *
c
, 
∑d
);

878 
EVP_CIPHER_CTX_˘æ
(
EVP_CIPHER_CTX
 *
˘x
, 
ty≥
, 
¨g
, *
±r
);

879 
EVP_CIPHER_CTX_ønd_key
(
EVP_CIPHER_CTX
 *
˘x
, *
key
);

880 
EVP_CIPHER_gë_∑øms
(
EVP_CIPHER
 *
cùhî
, 
OSSL_PARAM
 
∑øms
[]);

881 
EVP_CIPHER_CTX_£t_∑øms
(
EVP_CIPHER_CTX
 *
˘x
, c⁄° 
OSSL_PARAM
 
∑øms
[]);

882 
EVP_CIPHER_CTX_gë_∑øms
(
EVP_CIPHER_CTX
 *
˘x
, 
OSSL_PARAM
 
∑øms
[]);

883 c⁄° 
OSSL_PARAM
 *
EVP_CIPHER_gëèbÀ_∑øms
(c⁄° 
EVP_CIPHER
 *
cùhî
);

884 c⁄° 
OSSL_PARAM
 *
EVP_CIPHER_£âabÀ_˘x_∑øms
(c⁄° 
EVP_CIPHER
 *
cùhî
);

885 c⁄° 
OSSL_PARAM
 *
EVP_CIPHER_gëèbÀ_˘x_∑øms
(c⁄° 
EVP_CIPHER
 *
cùhî
);

886 c⁄° 
OSSL_PARAM
 *
EVP_CIPHER_CTX_£âabÀ_∑øms
(
EVP_CIPHER_CTX
 *
˘x
);

887 c⁄° 
OSSL_PARAM
 *
EVP_CIPHER_CTX_gëèbÀ_∑øms
(
EVP_CIPHER_CTX
 *
˘x
);

889 c⁄° 
BIO_METHOD
 *
BIO_f_md
();

890 c⁄° 
BIO_METHOD
 *
BIO_f_ba£64
();

891 c⁄° 
BIO_METHOD
 *
BIO_f_cùhî
();

892 c⁄° 
BIO_METHOD
 *
BIO_f_ªlübÀ
();

893 
__owur
 
BIO_£t_cùhî
(
BIO
 *
b
, c⁄° 
EVP_CIPHER
 *
c
, c⁄° *
k
,

894 c⁄° *
i
, 
íc
);

896 c⁄° 
EVP_MD
 *
EVP_md_nuŒ
();

897 #i‚de‡
OPENSSL_NO_MD2


898 c⁄° 
EVP_MD
 *
EVP_md2
();

900 #i‚de‡
OPENSSL_NO_MD4


901 c⁄° 
EVP_MD
 *
EVP_md4
();

903 #i‚de‡
OPENSSL_NO_MD5


904 c⁄° 
EVP_MD
 *
EVP_md5
();

905 c⁄° 
EVP_MD
 *
EVP_md5_sha1
();

907 #i‚de‡
OPENSSL_NO_BLAKE2


908 c⁄° 
EVP_MD
 *
EVP_bœke2b512
();

909 c⁄° 
EVP_MD
 *
EVP_bœke2s256
();

911 c⁄° 
EVP_MD
 *
EVP_sha1
();

912 c⁄° 
EVP_MD
 *
EVP_sha224
();

913 c⁄° 
EVP_MD
 *
EVP_sha256
();

914 c⁄° 
EVP_MD
 *
EVP_sha384
();

915 c⁄° 
EVP_MD
 *
EVP_sha512
();

916 c⁄° 
EVP_MD
 *
EVP_sha512_224
();

917 c⁄° 
EVP_MD
 *
EVP_sha512_256
();

918 c⁄° 
EVP_MD
 *
EVP_sha3_224
();

919 c⁄° 
EVP_MD
 *
EVP_sha3_256
();

920 c⁄° 
EVP_MD
 *
EVP_sha3_384
();

921 c⁄° 
EVP_MD
 *
EVP_sha3_512
();

922 c⁄° 
EVP_MD
 *
EVP_shake128
();

923 c⁄° 
EVP_MD
 *
EVP_shake256
();

925 #i‚de‡
OPENSSL_NO_MDC2


926 c⁄° 
EVP_MD
 *
EVP_mdc2
();

928 #i‚de‡
OPENSSL_NO_RMD160


929 c⁄° 
EVP_MD
 *
EVP_rùemd160
();

931 #i‚de‡
OPENSSL_NO_WHIRLPOOL


932 c⁄° 
EVP_MD
 *
EVP_whúÕoﬁ
();

934 #i‚de‡
OPENSSL_NO_SM3


935 c⁄° 
EVP_MD
 *
EVP_sm3
();

937 c⁄° 
EVP_CIPHER
 *
EVP_íc_nuŒ
();

938 #i‚de‡
OPENSSL_NO_DES


939 c⁄° 
EVP_CIPHER
 *
EVP_des_ecb
();

940 c⁄° 
EVP_CIPHER
 *
EVP_des_ede
();

941 c⁄° 
EVP_CIPHER
 *
EVP_des_ede3
();

942 c⁄° 
EVP_CIPHER
 *
EVP_des_ede_ecb
();

943 c⁄° 
EVP_CIPHER
 *
EVP_des_ede3_ecb
();

944 c⁄° 
EVP_CIPHER
 *
EVP_des_cfb64
();

945 
	#EVP_des_cfb
 
EVP_des_cfb64


	)

946 c⁄° 
EVP_CIPHER
 *
EVP_des_cfb1
();

947 c⁄° 
EVP_CIPHER
 *
EVP_des_cfb8
();

948 c⁄° 
EVP_CIPHER
 *
EVP_des_ede_cfb64
();

949 
	#EVP_des_ede_cfb
 
EVP_des_ede_cfb64


	)

950 c⁄° 
EVP_CIPHER
 *
EVP_des_ede3_cfb64
();

951 
	#EVP_des_ede3_cfb
 
EVP_des_ede3_cfb64


	)

952 c⁄° 
EVP_CIPHER
 *
EVP_des_ede3_cfb1
();

953 c⁄° 
EVP_CIPHER
 *
EVP_des_ede3_cfb8
();

954 c⁄° 
EVP_CIPHER
 *
EVP_des_ofb
();

955 c⁄° 
EVP_CIPHER
 *
EVP_des_ede_ofb
();

956 c⁄° 
EVP_CIPHER
 *
EVP_des_ede3_ofb
();

957 c⁄° 
EVP_CIPHER
 *
EVP_des_cbc
();

958 c⁄° 
EVP_CIPHER
 *
EVP_des_ede_cbc
();

959 c⁄° 
EVP_CIPHER
 *
EVP_des_ede3_cbc
();

960 c⁄° 
EVP_CIPHER
 *
EVP_desx_cbc
();

961 c⁄° 
EVP_CIPHER
 *
EVP_des_ede3_wøp
();

968 #i‚de‡
OPENSSL_NO_RC4


969 c⁄° 
EVP_CIPHER
 *
EVP_rc4
();

970 c⁄° 
EVP_CIPHER
 *
EVP_rc4_40
();

971 #i‚de‡
OPENSSL_NO_MD5


972 c⁄° 
EVP_CIPHER
 *
EVP_rc4_hmac_md5
();

975 #i‚de‡
OPENSSL_NO_IDEA


976 c⁄° 
EVP_CIPHER
 *
EVP_idó_ecb
();

977 c⁄° 
EVP_CIPHER
 *
EVP_idó_cfb64
();

978 
	#EVP_idó_cfb
 
EVP_idó_cfb64


	)

979 c⁄° 
EVP_CIPHER
 *
EVP_idó_ofb
();

980 c⁄° 
EVP_CIPHER
 *
EVP_idó_cbc
();

982 #i‚de‡
OPENSSL_NO_RC2


983 c⁄° 
EVP_CIPHER
 *
EVP_rc2_ecb
();

984 c⁄° 
EVP_CIPHER
 *
EVP_rc2_cbc
();

985 c⁄° 
EVP_CIPHER
 *
EVP_rc2_40_cbc
();

986 c⁄° 
EVP_CIPHER
 *
EVP_rc2_64_cbc
();

987 c⁄° 
EVP_CIPHER
 *
EVP_rc2_cfb64
();

988 
	#EVP_rc2_cfb
 
EVP_rc2_cfb64


	)

989 c⁄° 
EVP_CIPHER
 *
EVP_rc2_ofb
();

991 #i‚de‡
OPENSSL_NO_BF


992 c⁄° 
EVP_CIPHER
 *
EVP_bf_ecb
();

993 c⁄° 
EVP_CIPHER
 *
EVP_bf_cbc
();

994 c⁄° 
EVP_CIPHER
 *
EVP_bf_cfb64
();

995 
	#EVP_bf_cfb
 
EVP_bf_cfb64


	)

996 c⁄° 
EVP_CIPHER
 *
EVP_bf_ofb
();

998 #i‚de‡
OPENSSL_NO_CAST


999 c⁄° 
EVP_CIPHER
 *
EVP_ˇ°5_ecb
();

1000 c⁄° 
EVP_CIPHER
 *
EVP_ˇ°5_cbc
();

1001 c⁄° 
EVP_CIPHER
 *
EVP_ˇ°5_cfb64
();

1002 
	#EVP_ˇ°5_cfb
 
EVP_ˇ°5_cfb64


	)

1003 c⁄° 
EVP_CIPHER
 *
EVP_ˇ°5_ofb
();

1005 #i‚de‡
OPENSSL_NO_RC5


1006 c⁄° 
EVP_CIPHER
 *
EVP_rc5_32_12_16_cbc
();

1007 c⁄° 
EVP_CIPHER
 *
EVP_rc5_32_12_16_ecb
();

1008 c⁄° 
EVP_CIPHER
 *
EVP_rc5_32_12_16_cfb64
();

1009 
	#EVP_rc5_32_12_16_cfb
 
EVP_rc5_32_12_16_cfb64


	)

1010 c⁄° 
EVP_CIPHER
 *
EVP_rc5_32_12_16_ofb
();

1012 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_ecb
();

1013 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_cbc
();

1014 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_cfb1
();

1015 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_cfb8
();

1016 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_cfb128
();

1017 
	#EVP_´s_128_cfb
 
EVP_´s_128_cfb128


	)

1018 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_ofb
();

1019 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_˘r
();

1020 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_ccm
();

1021 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_gcm
();

1022 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_xts
();

1023 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_wøp
();

1024 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_wøp_∑d
();

1025 #i‚de‡
OPENSSL_NO_OCB


1026 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_ocb
();

1028 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_ecb
();

1029 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_cbc
();

1030 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_cfb1
();

1031 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_cfb8
();

1032 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_cfb128
();

1033 
	#EVP_´s_192_cfb
 
EVP_´s_192_cfb128


	)

1034 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_ofb
();

1035 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_˘r
();

1036 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_ccm
();

1037 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_gcm
();

1038 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_wøp
();

1039 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_wøp_∑d
();

1040 #i‚de‡
OPENSSL_NO_OCB


1041 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_ocb
();

1043 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_ecb
();

1044 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_cbc
();

1045 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_cfb1
();

1046 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_cfb8
();

1047 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_cfb128
();

1048 
	#EVP_´s_256_cfb
 
EVP_´s_256_cfb128


	)

1049 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_ofb
();

1050 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_˘r
();

1051 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_ccm
();

1052 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_gcm
();

1053 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_xts
();

1054 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_wøp
();

1055 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_wøp_∑d
();

1056 #i‚de‡
OPENSSL_NO_OCB


1057 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_ocb
();

1059 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_cbc_hmac_sha1
();

1060 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_cbc_hmac_sha1
();

1061 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_cbc_hmac_sha256
();

1062 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_cbc_hmac_sha256
();

1063 #i‚de‡
OPENSSL_NO_ARIA


1064 c⁄° 
EVP_CIPHER
 *
EVP_¨ü_128_ecb
();

1065 c⁄° 
EVP_CIPHER
 *
EVP_¨ü_128_cbc
();

1066 c⁄° 
EVP_CIPHER
 *
EVP_¨ü_128_cfb1
();

1067 c⁄° 
EVP_CIPHER
 *
EVP_¨ü_128_cfb8
();

1068 c⁄° 
EVP_CIPHER
 *
EVP_¨ü_128_cfb128
();

1069 
	#EVP_¨ü_128_cfb
 
EVP_¨ü_128_cfb128


	)

1070 c⁄° 
EVP_CIPHER
 *
EVP_¨ü_128_˘r
();

1071 c⁄° 
EVP_CIPHER
 *
EVP_¨ü_128_ofb
();

1072 c⁄° 
EVP_CIPHER
 *
EVP_¨ü_128_gcm
();

1073 c⁄° 
EVP_CIPHER
 *
EVP_¨ü_128_ccm
();

1074 c⁄° 
EVP_CIPHER
 *
EVP_¨ü_192_ecb
();

1075 c⁄° 
EVP_CIPHER
 *
EVP_¨ü_192_cbc
();

1076 c⁄° 
EVP_CIPHER
 *
EVP_¨ü_192_cfb1
();

1077 c⁄° 
EVP_CIPHER
 *
EVP_¨ü_192_cfb8
();

1078 c⁄° 
EVP_CIPHER
 *
EVP_¨ü_192_cfb128
();

1079 
	#EVP_¨ü_192_cfb
 
EVP_¨ü_192_cfb128


	)

1080 c⁄° 
EVP_CIPHER
 *
EVP_¨ü_192_˘r
();

1081 c⁄° 
EVP_CIPHER
 *
EVP_¨ü_192_ofb
();

1082 c⁄° 
EVP_CIPHER
 *
EVP_¨ü_192_gcm
();

1083 c⁄° 
EVP_CIPHER
 *
EVP_¨ü_192_ccm
();

1084 c⁄° 
EVP_CIPHER
 *
EVP_¨ü_256_ecb
();

1085 c⁄° 
EVP_CIPHER
 *
EVP_¨ü_256_cbc
();

1086 c⁄° 
EVP_CIPHER
 *
EVP_¨ü_256_cfb1
();

1087 c⁄° 
EVP_CIPHER
 *
EVP_¨ü_256_cfb8
();

1088 c⁄° 
EVP_CIPHER
 *
EVP_¨ü_256_cfb128
();

1089 
	#EVP_¨ü_256_cfb
 
EVP_¨ü_256_cfb128


	)

1090 c⁄° 
EVP_CIPHER
 *
EVP_¨ü_256_˘r
();

1091 c⁄° 
EVP_CIPHER
 *
EVP_¨ü_256_ofb
();

1092 c⁄° 
EVP_CIPHER
 *
EVP_¨ü_256_gcm
();

1093 c⁄° 
EVP_CIPHER
 *
EVP_¨ü_256_ccm
();

1095 #i‚de‡
OPENSSL_NO_CAMELLIA


1096 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_128_ecb
();

1097 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_128_cbc
();

1098 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_128_cfb1
();

1099 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_128_cfb8
();

1100 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_128_cfb128
();

1101 
	#EVP_ˇmñlü_128_cfb
 
EVP_ˇmñlü_128_cfb128


	)

1102 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_128_ofb
();

1103 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_128_˘r
();

1104 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_192_ecb
();

1105 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_192_cbc
();

1106 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_192_cfb1
();

1107 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_192_cfb8
();

1108 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_192_cfb128
();

1109 
	#EVP_ˇmñlü_192_cfb
 
EVP_ˇmñlü_192_cfb128


	)

1110 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_192_ofb
();

1111 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_192_˘r
();

1112 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_256_ecb
();

1113 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_256_cbc
();

1114 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_256_cfb1
();

1115 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_256_cfb8
();

1116 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_256_cfb128
();

1117 
	#EVP_ˇmñlü_256_cfb
 
EVP_ˇmñlü_256_cfb128


	)

1118 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_256_ofb
();

1119 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_256_˘r
();

1121 #i‚de‡
OPENSSL_NO_CHACHA


1122 c⁄° 
EVP_CIPHER
 *
EVP_chacha20
();

1123 #i‚de‡
OPENSSL_NO_POLY1305


1124 c⁄° 
EVP_CIPHER
 *
EVP_chacha20_pﬁy1305
();

1128 #i‚de‡
OPENSSL_NO_SEED


1129 c⁄° 
EVP_CIPHER
 *
EVP_£ed_ecb
();

1130 c⁄° 
EVP_CIPHER
 *
EVP_£ed_cbc
();

1131 c⁄° 
EVP_CIPHER
 *
EVP_£ed_cfb128
();

1132 
	#EVP_£ed_cfb
 
EVP_£ed_cfb128


	)

1133 c⁄° 
EVP_CIPHER
 *
EVP_£ed_ofb
();

1136 #i‚de‡
OPENSSL_NO_SM4


1137 c⁄° 
EVP_CIPHER
 *
EVP_sm4_ecb
();

1138 c⁄° 
EVP_CIPHER
 *
EVP_sm4_cbc
();

1139 c⁄° 
EVP_CIPHER
 *
EVP_sm4_cfb128
();

1140 
	#EVP_sm4_cfb
 
EVP_sm4_cfb128


	)

1141 c⁄° 
EVP_CIPHER
 *
EVP_sm4_ofb
();

1142 c⁄° 
EVP_CIPHER
 *
EVP_sm4_˘r
();

1145 #i‚de‡
OPENSSL_NO_DEPRECATED_1_1_0


1146 
	#OPENSSL_add_Æl_Æg‹ôhms_c⁄f
() \

1147 
	`OPENSSL_öô_¸y±o
(
OPENSSL_INIT_ADD_ALL_CIPHERS
 \

1148 | 
OPENSSL_INIT_ADD_ALL_DIGESTS
 \

1149 | 
OPENSSL_INIT_LOAD_CONFIG
, 
NULL
)

	)

1150 
	#OPENSSL_add_Æl_Æg‹ôhms_noc⁄f
() \

1151 
	`OPENSSL_öô_¸y±o
(
OPENSSL_INIT_ADD_ALL_CIPHERS
 \

1152 | 
OPENSSL_INIT_ADD_ALL_DIGESTS
, 
NULL
)

	)

1154 #ifde‡
OPENSSL_LOAD_CONF


1155 
	#O≥nSSL_add_Æl_Æg‹ôhms
(Ë
	`OPENSSL_add_Æl_Æg‹ôhms_c⁄f
()

	)

1157 
	#O≥nSSL_add_Æl_Æg‹ôhms
(Ë
	`OPENSSL_add_Æl_Æg‹ôhms_noc⁄f
()

	)

1160 
	#O≥nSSL_add_Æl_cùhîs
() \

1161 
	`OPENSSL_öô_¸y±o
(
OPENSSL_INIT_ADD_ALL_CIPHERS
, 
NULL
)

	)

1162 
	#O≥nSSL_add_Æl_dige°s
() \

1163 
	`OPENSSL_öô_¸y±o
(
OPENSSL_INIT_ADD_ALL_DIGESTS
, 
NULL
)

	)

1165 
	#EVP_˛ónup
(Ë0Ë

	)

1168 
EVP_add_cùhî
(c⁄° 
EVP_CIPHER
 *
cùhî
);

1169 
EVP_add_dige°
(c⁄° 
EVP_MD
 *
dige°
);

1171 c⁄° 
EVP_CIPHER
 *
EVP_gë_cùhîby«me
(c⁄° *
«me
);

1172 c⁄° 
EVP_MD
 *
EVP_gë_dige°by«me
(c⁄° *
«me
);

1174 
EVP_CIPHER_do_Æl
((*
‚
Ë(c⁄° 
EVP_CIPHER
 *
cùh
,

1175 c⁄° *
‰om
, c⁄° *
to
, *
x
),

1176 *
¨g
);

1177 
EVP_CIPHER_do_Æl_s‹ãd
((*
‚
)

1178 (c⁄° 
EVP_CIPHER
 *
cùh
, c⁄° *
‰om
,

1179 c⁄° *
to
, *
x
), *
¨g
);

1180 
EVP_CIPHER_do_Æl_¥ovided
(
OSSL_LIB_CTX
 *
lib˘x
,

1181 (*
‚
)(
EVP_CIPHER
 *
cùhî
, *
¨g
),

1182 *
¨g
);

1184 
EVP_MD_do_Æl
((*
‚
Ë(c⁄° 
EVP_MD
 *
cùh
,

1185 c⁄° *
‰om
, c⁄° *
to
, *
x
),

1186 *
¨g
);

1187 
EVP_MD_do_Æl_s‹ãd
((*
‚
)

1188 (c⁄° 
EVP_MD
 *
cùh
, c⁄° *
‰om
,

1189 c⁄° *
to
, *
x
), *
¨g
);

1190 
EVP_MD_do_Æl_¥ovided
(
OSSL_LIB_CTX
 *
lib˘x
,

1191 (*
‚
)(
EVP_MD
 *
md
, *
¨g
),

1192 *
¨g
);

1196 
EVP_MAC
 *
EVP_MAC_„tch
(
OSSL_LIB_CTX
 *
lib˘x
, c⁄° *
Æg‹ôhm
,

1197 c⁄° *
¥›îtõs
);

1198 
EVP_MAC_up_ªf
(
EVP_MAC
 *
mac
);

1199 
EVP_MAC_‰ì
(
EVP_MAC
 *
mac
);

1200 c⁄° *
EVP_MAC_gë0_«me
(c⁄° 
EVP_MAC
 *
mac
);

1201 c⁄° *
EVP_MAC_gë0_des¸ùti⁄
(c⁄° 
EVP_MAC
 *
mac
);

1202 
EVP_MAC_is_a
(c⁄° 
EVP_MAC
 *
mac
, c⁄° *
«me
);

1203 c⁄° 
OSSL_PROVIDER
 *
EVP_MAC_gë0_¥ovidî
(c⁄° 
EVP_MAC
 *
mac
);

1204 
EVP_MAC_gë_∑øms
(
EVP_MAC
 *
mac
, 
OSSL_PARAM
 
∑øms
[]);

1206 
EVP_MAC_CTX
 *
EVP_MAC_CTX_√w
(
EVP_MAC
 *
mac
);

1207 
EVP_MAC_CTX_‰ì
(
EVP_MAC_CTX
 *
˘x
);

1208 
EVP_MAC_CTX
 *
EVP_MAC_CTX_dup
(c⁄° EVP_MAC_CTX *
§c
);

1209 
EVP_MAC
 *
EVP_MAC_CTX_gë0_mac
(
EVP_MAC_CTX
 *
˘x
);

1210 
EVP_MAC_CTX_gë_∑øms
(
EVP_MAC_CTX
 *
˘x
, 
OSSL_PARAM
 
∑øms
[]);

1211 
EVP_MAC_CTX_£t_∑øms
(
EVP_MAC_CTX
 *
˘x
, c⁄° 
OSSL_PARAM
 
∑øms
[]);

1213 
size_t
 
EVP_MAC_CTX_gë_mac_size
(
EVP_MAC_CTX
 *
˘x
);

1214 
size_t
 
EVP_MAC_CTX_gë_block_size
(
EVP_MAC_CTX
 *
˘x
);

1215 *
EVP_Q_mac
(
OSSL_LIB_CTX
 *
lib˘x
, c⁄° *
«me
, c⁄° *
¥›q
,

1216 c⁄° *
subÆg
, c⁄° 
OSSL_PARAM
 *
∑øms
,

1217 c⁄° *
key
, 
size_t
 
keyÀn
,

1218 c⁄° *
d©a
, 
size_t
 
d©Æí
,

1219 *
out
, 
size_t
 
outsize
, size_à*
ouéí
);

1220 
EVP_MAC_öô
(
EVP_MAC_CTX
 *
˘x
, c⁄° *
key
, 
size_t
 
keyÀn
,

1221 c⁄° 
OSSL_PARAM
 
∑øms
[]);

1222 
EVP_MAC_upd©e
(
EVP_MAC_CTX
 *
˘x
, c⁄° *
d©a
, 
size_t
 
d©Æí
);

1223 
EVP_MAC_föÆ
(
EVP_MAC_CTX
 *
˘x
,

1224 *
out
, 
size_t
 *
oué
, size_à
outsize
);

1225 
EVP_MAC_föÆXOF
(
EVP_MAC_CTX
 *
˘x
, *
out
, 
size_t
 
outsize
);

1226 c⁄° 
OSSL_PARAM
 *
EVP_MAC_gëèbÀ_∑øms
(c⁄° 
EVP_MAC
 *
mac
);

1227 c⁄° 
OSSL_PARAM
 *
EVP_MAC_gëèbÀ_˘x_∑øms
(c⁄° 
EVP_MAC
 *
mac
);

1228 c⁄° 
OSSL_PARAM
 *
EVP_MAC_£âabÀ_˘x_∑øms
(c⁄° 
EVP_MAC
 *
mac
);

1229 c⁄° 
OSSL_PARAM
 *
EVP_MAC_CTX_gëèbÀ_∑øms
(
EVP_MAC_CTX
 *
˘x
);

1230 c⁄° 
OSSL_PARAM
 *
EVP_MAC_CTX_£âabÀ_∑øms
(
EVP_MAC_CTX
 *
˘x
);

1232 
EVP_MAC_do_Æl_¥ovided
(
OSSL_LIB_CTX
 *
lib˘x
,

1233 (*
‚
)(
EVP_MAC
 *
mac
, *
¨g
),

1234 *
¨g
);

1235 
EVP_MAC_«mes_do_Æl
(c⁄° 
EVP_MAC
 *
mac
,

1236 (*
‚
)(c⁄° *
«me
, *
d©a
),

1237 *
d©a
);

1240 
EVP_RAND
 *
EVP_RAND_„tch
(
OSSL_LIB_CTX
 *
lib˘x
, c⁄° *
Æg‹ôhm
,

1241 c⁄° *
¥›îtõs
);

1242 
EVP_RAND_up_ªf
(
EVP_RAND
 *
ønd
);

1243 
EVP_RAND_‰ì
(
EVP_RAND
 *
ønd
);

1244 c⁄° *
EVP_RAND_gë0_«me
(c⁄° 
EVP_RAND
 *
ønd
);

1245 c⁄° *
EVP_RAND_gë0_des¸ùti⁄
(c⁄° 
EVP_RAND
 *
md
);

1246 
EVP_RAND_is_a
(c⁄° 
EVP_RAND
 *
ønd
, c⁄° *
«me
);

1247 c⁄° 
OSSL_PROVIDER
 *
EVP_RAND_gë0_¥ovidî
(c⁄° 
EVP_RAND
 *
ønd
);

1248 
EVP_RAND_gë_∑øms
(
EVP_RAND
 *
ønd
, 
OSSL_PARAM
 
∑øms
[]);

1250 
EVP_RAND_CTX
 *
EVP_RAND_CTX_√w
(
EVP_RAND
 *
ønd
, EVP_RAND_CTX *
∑ª¡
);

1251 
EVP_RAND_CTX_‰ì
(
EVP_RAND_CTX
 *
˘x
);

1252 
EVP_RAND
 *
EVP_RAND_CTX_gë0_ønd
(
EVP_RAND_CTX
 *
˘x
);

1253 
EVP_RAND_CTX_gë_∑øms
(
EVP_RAND_CTX
 *
˘x
, 
OSSL_PARAM
 
∑øms
[]);

1254 
EVP_RAND_CTX_£t_∑øms
(
EVP_RAND_CTX
 *
˘x
, c⁄° 
OSSL_PARAM
 
∑øms
[]);

1255 c⁄° 
OSSL_PARAM
 *
EVP_RAND_gëèbÀ_∑øms
(c⁄° 
EVP_RAND
 *
ønd
);

1256 c⁄° 
OSSL_PARAM
 *
EVP_RAND_gëèbÀ_˘x_∑øms
(c⁄° 
EVP_RAND
 *
ønd
);

1257 c⁄° 
OSSL_PARAM
 *
EVP_RAND_£âabÀ_˘x_∑øms
(c⁄° 
EVP_RAND
 *
ønd
);

1258 c⁄° 
OSSL_PARAM
 *
EVP_RAND_CTX_gëèbÀ_∑øms
(
EVP_RAND_CTX
 *
˘x
);

1259 c⁄° 
OSSL_PARAM
 *
EVP_RAND_CTX_£âabÀ_∑øms
(
EVP_RAND_CTX
 *
˘x
);

1261 
EVP_RAND_do_Æl_¥ovided
(
OSSL_LIB_CTX
 *
lib˘x
,

1262 (*
‚
)(
EVP_RAND
 *
ønd
, *
¨g
),

1263 *
¨g
);

1264 
EVP_RAND_«mes_do_Æl
(c⁄° 
EVP_RAND
 *
ønd
,

1265 (*
‚
)(c⁄° *
«me
, *
d©a
),

1266 *
d©a
);

1268 
__owur
 
EVP_RAND_ö°™tüã
(
EVP_RAND_CTX
 *
˘x
, 
°ªngth
,

1269 
¥edi˘i⁄_ªsi°™˚
,

1270 c⁄° *
p°r
, 
size_t
 
p°r_Àn
,

1271 c⁄° 
OSSL_PARAM
 
∑øms
[]);

1272 
EVP_RAND_unö°™tüã
(
EVP_RAND_CTX
 *
˘x
);

1273 
__owur
 
EVP_RAND_gíî©e
(
EVP_RAND_CTX
 *
˘x
, *
out
,

1274 
size_t
 
ouéí
, 
°ªngth
,

1275 
¥edi˘i⁄_ªsi°™˚
,

1276 c⁄° *
addö
, 
size_t
 
addö_Àn
);

1277 
EVP_RAND_ª£ed
(
EVP_RAND_CTX
 *
˘x
, 
¥edi˘i⁄_ªsi°™˚
,

1278 c⁄° *
ít
, 
size_t
 
ít_Àn
,

1279 c⁄° *
addö
, 
size_t
 
addö_Àn
);

1280 
__owur
 
EVP_RAND_n⁄˚
(
EVP_RAND_CTX
 *
˘x
, *
out
, 
size_t
 
ouéí
);

1281 
__owur
 
EVP_RAND_íabÀ_lockög
(
EVP_RAND_CTX
 *
˘x
);

1283 
EVP_RAND_vîify_zîoiz©i⁄
(
EVP_RAND_CTX
 *
˘x
);

1284 
EVP_RAND_gë_°ªngth
(
EVP_RAND_CTX
 *
˘x
);

1285 
EVP_RAND_gë_°©e
(
EVP_RAND_CTX
 *
˘x
);

1287 
	#EVP_RAND_STATE_UNINITIALISED
 0

	)

1288 
	#EVP_RAND_STATE_READY
 1

	)

1289 
	#EVP_RAND_STATE_ERROR
 2

	)

1292 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


1293 
OSSL_DEPRECATEDIN_3_0
 
EVP_PKEY_de¸y±_ﬁd
(*
dec_key
,

1294 c⁄° *
íc_key
,

1295 
íc_key_Àn
,

1296 
EVP_PKEY
 *
¥iv©e_key
);

1297 
OSSL_DEPRECATEDIN_3_0
 
EVP_PKEY_í¸y±_ﬁd
(*
íc_key
,

1298 c⁄° *
key
,

1299 
key_Àn
, 
EVP_PKEY
 *
pub_key
);

1301 
EVP_PKEY_is_a
(c⁄° 
EVP_PKEY
 *
pkey
, c⁄° *
«me
);

1302 
EVP_PKEY_ty≥_«mes_do_Æl
(c⁄° 
EVP_PKEY
 *
pkey
,

1303 (*
‚
)(c⁄° *
«me
, *
d©a
),

1304 *
d©a
);

1305 
EVP_PKEY_ty≥
(
ty≥
);

1306 
EVP_PKEY_gë_id
(c⁄° 
EVP_PKEY
 *
pkey
);

1307 
	#EVP_PKEY_id
 
EVP_PKEY_gë_id


	)

1308 
EVP_PKEY_gë_ba£_id
(c⁄° 
EVP_PKEY
 *
pkey
);

1309 
	#EVP_PKEY_ba£_id
 
EVP_PKEY_gë_ba£_id


	)

1310 
EVP_PKEY_gë_bôs
(c⁄° 
EVP_PKEY
 *
pkey
);

1311 
	#EVP_PKEY_bôs
 
EVP_PKEY_gë_bôs


	)

1312 
EVP_PKEY_gë_£curôy_bôs
(c⁄° 
EVP_PKEY
 *
pkey
);

1313 
	#EVP_PKEY_£curôy_bôs
 
EVP_PKEY_gë_£curôy_bôs


	)

1314 
EVP_PKEY_gë_size
(c⁄° 
EVP_PKEY
 *
pkey
);

1315 
	#EVP_PKEY_size
 
EVP_PKEY_gë_size


	)

1316 
EVP_PKEY_ˇn_sign
(c⁄° 
EVP_PKEY
 *
pkey
);

1317 
EVP_PKEY_£t_ty≥
(
EVP_PKEY
 *
pkey
, 
ty≥
);

1318 
EVP_PKEY_£t_ty≥_°r
(
EVP_PKEY
 *
pkey
, c⁄° *
°r
, 
Àn
);

1319 
EVP_PKEY_£t_ty≥_by_keymgmt
(
EVP_PKEY
 *
pkey
, 
EVP_KEYMGMT
 *
keymgmt
);

1320 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


1321 #i‚de‡
OPENSSL_NO_ENGINE


1322 
OSSL_DEPRECATEDIN_3_0


1323 
EVP_PKEY_£t1_ígöe
(
EVP_PKEY
 *
pkey
, 
ENGINE
 *
e
);

1324 
OSSL_DEPRECATEDIN_3_0


1325 
ENGINE
 *
EVP_PKEY_gë0_ígöe
(c⁄° 
EVP_PKEY
 *
pkey
);

1327 
OSSL_DEPRECATEDIN_3_0


1328 
EVP_PKEY_assign
(
EVP_PKEY
 *
pkey
, 
ty≥
, *
key
);

1329 
OSSL_DEPRECATEDIN_3_0


1330 *
EVP_PKEY_gë0
(c⁄° 
EVP_PKEY
 *
pkey
);

1331 
OSSL_DEPRECATEDIN_3_0


1332 c⁄° *
EVP_PKEY_gë0_hmac
(c⁄° 
EVP_PKEY
 *
pkey
, 
size_t
 *
Àn
);

1333 #i‚de‡
OPENSSL_NO_POLY1305


1334 
OSSL_DEPRECATEDIN_3_0


1335 c⁄° *
EVP_PKEY_gë0_pﬁy1305
(c⁄° 
EVP_PKEY
 *
pkey
, 
size_t
 *
Àn
);

1337 #i‚de‡
OPENSSL_NO_SIPHASH


1338 
OSSL_DEPRECATEDIN_3_0


1339 c⁄° *
EVP_PKEY_gë0_sùhash
(c⁄° 
EVP_PKEY
 *
pkey
, 
size_t
 *
Àn
);

1342 
rß_°
;

1343 
OSSL_DEPRECATEDIN_3_0


1344 
EVP_PKEY_£t1_RSA
(
EVP_PKEY
 *
pkey
, 
rß_°
 *
key
);

1345 
OSSL_DEPRECATEDIN_3_0


1346 c⁄° 
rß_°
 *
EVP_PKEY_gë0_RSA
(c⁄° 
EVP_PKEY
 *
pkey
);

1347 
OSSL_DEPRECATEDIN_3_0


1348 
rß_°
 *
EVP_PKEY_gë1_RSA
(
EVP_PKEY
 *
pkey
);

1350 #i‚de‡
OPENSSL_NO_DSA


1351 
dß_°
;

1352 
OSSL_DEPRECATEDIN_3_0


1353 
EVP_PKEY_£t1_DSA
(
EVP_PKEY
 *
pkey
, 
dß_°
 *
key
);

1354 
OSSL_DEPRECATEDIN_3_0


1355 c⁄° 
dß_°
 *
EVP_PKEY_gë0_DSA
(c⁄° 
EVP_PKEY
 *
pkey
);

1356 
OSSL_DEPRECATEDIN_3_0


1357 
dß_°
 *
EVP_PKEY_gë1_DSA
(
EVP_PKEY
 *
pkey
);

1360 #i‚de‡
OPENSSL_NO_DH


1361 
dh_°
;

1362 
OSSL_DEPRECATEDIN_3_0
 
EVP_PKEY_£t1_DH
(
EVP_PKEY
 *
pkey
, 
dh_°
 *
key
);

1363 
OSSL_DEPRECATEDIN_3_0
 c⁄° 
dh_°
 *
EVP_PKEY_gë0_DH
(c⁄° 
EVP_PKEY
 *
pkey
);

1364 
OSSL_DEPRECATEDIN_3_0
 
dh_°
 *
EVP_PKEY_gë1_DH
(
EVP_PKEY
 *
pkey
);

1367 #i‚de‡
OPENSSL_NO_EC


1368 
ec_key_°
;

1369 
OSSL_DEPRECATEDIN_3_0


1370 
EVP_PKEY_£t1_EC_KEY
(
EVP_PKEY
 *
pkey
, 
ec_key_°
 *
key
);

1371 
OSSL_DEPRECATEDIN_3_0


1372 c⁄° 
ec_key_°
 *
EVP_PKEY_gë0_EC_KEY
(c⁄° 
EVP_PKEY
 *
pkey
);

1373 
OSSL_DEPRECATEDIN_3_0


1374 
ec_key_°
 *
EVP_PKEY_gë1_EC_KEY
(
EVP_PKEY
 *
pkey
);

1378 
EVP_PKEY
 *
EVP_PKEY_√w
();

1379 
EVP_PKEY_up_ªf
(
EVP_PKEY
 *
pkey
);

1380 
EVP_PKEY
 *
EVP_PKEY_dup
(EVP_PKEY *
pkey
);

1381 
EVP_PKEY_‰ì
(
EVP_PKEY
 *
pkey
);

1382 c⁄° *
EVP_PKEY_gë0_des¸ùti⁄
(c⁄° 
EVP_PKEY
 *
pkey
);

1383 c⁄° 
OSSL_PROVIDER
 *
EVP_PKEY_gë0_¥ovidî
(c⁄° 
EVP_PKEY
 *
key
);

1385 
EVP_PKEY
 *
d2i_PublicKey
(
ty≥
, EVP_PKEY **
a
, c⁄° **
µ
,

1386 
Àngth
);

1387 
i2d_PublicKey
(c⁄° 
EVP_PKEY
 *
a
, **
µ
);

1390 
EVP_PKEY
 *
d2i_Priv©eKey_ex
(
ty≥
, EVP_PKEY **
a
, c⁄° **
µ
,

1391 
Àngth
, 
OSSL_LIB_CTX
 *
lib˘x
,

1392 c⁄° *
¥›q
);

1393 
EVP_PKEY
 *
d2i_Priv©eKey
(
ty≥
, EVP_PKEY **
a
, c⁄° **
µ
,

1394 
Àngth
);

1395 
EVP_PKEY
 *
d2i_AutoPriv©eKey_ex
(EVP_PKEY **
a
, c⁄° **
µ
,

1396 
Àngth
, 
OSSL_LIB_CTX
 *
lib˘x
,

1397 c⁄° *
¥›q
);

1398 
EVP_PKEY
 *
d2i_AutoPriv©eKey
(EVP_PKEY **
a
, c⁄° **
µ
,

1399 
Àngth
);

1400 
i2d_Priv©eKey
(c⁄° 
EVP_PKEY
 *
a
, **
µ
);

1402 
i2d_KeyP¨ams
(c⁄° 
EVP_PKEY
 *
a
, **
µ
);

1403 
EVP_PKEY
 *
d2i_KeyP¨ams
(
ty≥
, EVP_PKEY **
a
, c⁄° **
µ
,

1404 
Àngth
);

1405 
i2d_KeyP¨ams_bio
(
BIO
 *
bp
, c⁄° 
EVP_PKEY
 *
pkey
);

1406 
EVP_PKEY
 *
d2i_KeyP¨ams_bio
(
ty≥
, EVP_PKEY **
a
, 
BIO
 *
ö
);

1408 
EVP_PKEY_c›y_∑ømëîs
(
EVP_PKEY
 *
to
, c⁄° EVP_PKEY *
‰om
);

1409 
EVP_PKEY_missög_∑ømëîs
(c⁄° 
EVP_PKEY
 *
pkey
);

1410 
EVP_PKEY_ßve_∑ømëîs
(
EVP_PKEY
 *
pkey
, 
mode
);

1411 
EVP_PKEY_∑ømëîs_eq
(c⁄° 
EVP_PKEY
 *
a
, c⁄° EVP_PKEY *
b
);

1412 
EVP_PKEY_eq
(c⁄° 
EVP_PKEY
 *
a
, c⁄° EVP_PKEY *
b
);

1414 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


1415 
OSSL_DEPRECATEDIN_3_0


1416 
EVP_PKEY_cmp_∑ømëîs
(c⁄° 
EVP_PKEY
 *
a
, c⁄° EVP_PKEY *
b
);

1417 
OSSL_DEPRECATEDIN_3_0


1418 
EVP_PKEY_cmp
(c⁄° 
EVP_PKEY
 *
a
, c⁄° EVP_PKEY *
b
);

1421 
EVP_PKEY_¥öt_public
(
BIO
 *
out
, c⁄° 
EVP_PKEY
 *
pkey
,

1422 
ödít
, 
ASN1_PCTX
 *
p˘x
);

1423 
EVP_PKEY_¥öt_¥iv©e
(
BIO
 *
out
, c⁄° 
EVP_PKEY
 *
pkey
,

1424 
ödít
, 
ASN1_PCTX
 *
p˘x
);

1425 
EVP_PKEY_¥öt_∑øms
(
BIO
 *
out
, c⁄° 
EVP_PKEY
 *
pkey
,

1426 
ödít
, 
ASN1_PCTX
 *
p˘x
);

1427 #i‚de‡
OPENSSL_NO_STDIO


1428 
EVP_PKEY_¥öt_public_Â
(
FILE
 *
Â
, c⁄° 
EVP_PKEY
 *
pkey
,

1429 
ödít
, 
ASN1_PCTX
 *
p˘x
);

1430 
EVP_PKEY_¥öt_¥iv©e_Â
(
FILE
 *
Â
, c⁄° 
EVP_PKEY
 *
pkey
,

1431 
ödít
, 
ASN1_PCTX
 *
p˘x
);

1432 
EVP_PKEY_¥öt_∑øms_Â
(
FILE
 *
Â
, c⁄° 
EVP_PKEY
 *
pkey
,

1433 
ödít
, 
ASN1_PCTX
 *
p˘x
);

1436 
EVP_PKEY_gë_deÁu…_dige°_nid
(
EVP_PKEY
 *
pkey
, *
≤id
);

1437 
EVP_PKEY_gë_deÁu…_dige°_«me
(
EVP_PKEY
 *
pkey
,

1438 *
md«me
, 
size_t
 
md«me_sz
);

1439 
EVP_PKEY_dige°sign_suµ‹ts_dige°
(
EVP_PKEY
 *
pkey
, 
OSSL_LIB_CTX
 *
lib˘x
,

1440 c⁄° *
«me
, c⁄° *
¥›q
);

1442 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


1447 
	#EVP_PKEY_£t1_és_ícodedpoöt
(
pkey
, 
±
, 
±Àn
) \

1448 
	`EVP_PKEY_£t1_ícoded_public_key
((
pkey
), (
±
), (
±Àn
))

	)

1451 
EVP_PKEY_£t1_ícoded_public_key
(
EVP_PKEY
 *
pkey
,

1452 c⁄° *
pub
, 
size_t
 
pubÀn
);

1454 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


1459 
	#EVP_PKEY_gë1_és_ícodedpoöt
(
pkey
, 
µt
) \

1460 
	`EVP_PKEY_gë1_ícoded_public_key
((
pkey
), (
µt
))

	)

1463 
size_t
 
EVP_PKEY_gë1_ícoded_public_key
(
EVP_PKEY
 *
pkey
, **
µub
);

1466 
EVP_CIPHER_∑øm_to_a¢1
(
EVP_CIPHER_CTX
 *
c
, 
ASN1_TYPE
 *
ty≥
);

1467 
EVP_CIPHER_a¢1_to_∑øm
(
EVP_CIPHER_CTX
 *
c
, 
ASN1_TYPE
 *
ty≥
);

1470 
EVP_CIPHER_£t_a¢1_iv
(
EVP_CIPHER_CTX
 *
c
, 
ASN1_TYPE
 *
ty≥
);

1471 
EVP_CIPHER_gë_a¢1_iv
(
EVP_CIPHER_CTX
 *
c
, 
ASN1_TYPE
 *
ty≥
);

1474 
PKCS5_PBE_keyivgí
(
EVP_CIPHER_CTX
 *
˘x
, c⁄° *
∑ss
, 
∑s¶í
,

1475 
ASN1_TYPE
 *
∑øm
, c⁄° 
EVP_CIPHER
 *
cùhî
,

1476 c⁄° 
EVP_MD
 *
md
, 
í_de
);

1477 
PKCS5_PBE_keyivgí_ex
(
EVP_CIPHER_CTX
 *
c˘x
, c⁄° *
∑ss
, 
∑s¶í
,

1478 
ASN1_TYPE
 *
∑øm
, c⁄° 
EVP_CIPHER
 *
cùhî
,

1479 c⁄° 
EVP_MD
 *
md
, 
í_de
, 
OSSL_LIB_CTX
 *
lib˘x
,

1480 c⁄° *
¥›q
);

1481 
PKCS5_PBKDF2_HMAC_SHA1
(c⁄° *
∑ss
, 
∑s¶í
,

1482 c⁄° *
ß…
, 
ß…Àn
, 
ôî
,

1483 
keyÀn
, *
out
);

1484 
PKCS5_PBKDF2_HMAC
(c⁄° *
∑ss
, 
∑s¶í
,

1485 c⁄° *
ß…
, 
ß…Àn
, 
ôî
,

1486 c⁄° 
EVP_MD
 *
dige°
, 
keyÀn
, *
out
);

1487 
PKCS5_v2_PBE_keyivgí
(
EVP_CIPHER_CTX
 *
˘x
, c⁄° *
∑ss
, 
∑s¶í
,

1488 
ASN1_TYPE
 *
∑øm
, c⁄° 
EVP_CIPHER
 *
cùhî
,

1489 c⁄° 
EVP_MD
 *
md
, 
í_de
);

1490 
PKCS5_v2_PBE_keyivgí_ex
(
EVP_CIPHER_CTX
 *
˘x
, c⁄° *
∑ss
, 
∑s¶í
,

1491 
ASN1_TYPE
 *
∑øm
, c⁄° 
EVP_CIPHER
 *
cùhî
,

1492 c⁄° 
EVP_MD
 *
md
, 
í_de
,

1493 
OSSL_LIB_CTX
 *
lib˘x
, c⁄° *
¥›q
);

1495 #i‚de‡
OPENSSL_NO_SCRYPT


1496 
EVP_PBE_s¸y±
(c⁄° *
∑ss
, 
size_t
 
∑s¶í
,

1497 c⁄° *
ß…
, 
size_t
 
ß…Àn
,

1498 
uöt64_t
 
N
, uöt64_à
r
, uöt64_à
p
, uöt64_à
maxmem
,

1499 *
key
, 
size_t
 
keyÀn
);

1500 
EVP_PBE_s¸y±_ex
(c⁄° *
∑ss
, 
size_t
 
∑s¶í
,

1501 c⁄° *
ß…
, 
size_t
 
ß…Àn
,

1502 
uöt64_t
 
N
, uöt64_à
r
, uöt64_à
p
, uöt64_à
maxmem
,

1503 *
key
, 
size_t
 
keyÀn
,

1504 
OSSL_LIB_CTX
 *
˘x
, c⁄° *
¥›q
);

1506 
PKCS5_v2_s¸y±_keyivgí
(
EVP_CIPHER_CTX
 *
˘x
, c⁄° *
∑ss
,

1507 
∑s¶í
, 
ASN1_TYPE
 *
∑øm
,

1508 c⁄° 
EVP_CIPHER
 *
c
, c⁄° 
EVP_MD
 *
md
, 
í_de
);

1509 
PKCS5_v2_s¸y±_keyivgí_ex
(
EVP_CIPHER_CTX
 *
˘x
, c⁄° *
∑ss
,

1510 
∑s¶í
, 
ASN1_TYPE
 *
∑øm
,

1511 c⁄° 
EVP_CIPHER
 *
c
, c⁄° 
EVP_MD
 *
md
, 
í_de
,

1512 
OSSL_LIB_CTX
 *
lib˘x
, c⁄° *
¥›q
);

1515 
PKCS5_PBE_add
();

1517 
EVP_PBE_CùhîInô
(
ASN1_OBJECT
 *
pbe_obj
, c⁄° *
∑ss
, 
∑s¶í
,

1518 
ASN1_TYPE
 *
∑øm
, 
EVP_CIPHER_CTX
 *
˘x
, 
í_de
);

1520 
EVP_PBE_CùhîInô_ex
(
ASN1_OBJECT
 *
pbe_obj
, c⁄° *
∑ss
, 
∑s¶í
,

1521 
ASN1_TYPE
 *
∑øm
, 
EVP_CIPHER_CTX
 *
˘x
, 
í_de
,

1522 
OSSL_LIB_CTX
 *
lib˘x
, c⁄° *
¥›q
);

1527 
	#EVP_PBE_TYPE_OUTER
 0x0

	)

1529 
	#EVP_PBE_TYPE_PRF
 0x1

	)

1531 
	#EVP_PBE_TYPE_KDF
 0x2

	)

1533 
EVP_PBE_Æg_add_ty≥
(
pbe_ty≥
, 
pbe_nid
, 
cùhî_nid
,

1534 
md_nid
, 
EVP_PBE_KEYGEN
 *
keygí
);

1535 
EVP_PBE_Æg_add
(
nid
, c⁄° 
EVP_CIPHER
 *
cùhî
, c⁄° 
EVP_MD
 *
md
,

1536 
EVP_PBE_KEYGEN
 *
keygí
);

1537 
EVP_PBE_föd
(
ty≥
, 
pbe_nid
, *
p˙id
, *
pmnid
,

1538 
EVP_PBE_KEYGEN
 **
pkeygí
);

1539 
EVP_PBE_föd_ex
(
ty≥
, 
pbe_nid
, *
p˙id
, *
pmnid
,

1540 
EVP_PBE_KEYGEN
 **
pkeygí
, 
EVP_PBE_KEYGEN_EX
 **
pkeygí_ex
);

1541 
EVP_PBE_˛ónup
();

1542 
EVP_PBE_gë
(*
±y≥
, *
µbe_nid
, 
size_t
 
num
);

1544 
	#ASN1_PKEY_ALIAS
 0x1

	)

1545 
	#ASN1_PKEY_DYNAMIC
 0x2

	)

1546 
	#ASN1_PKEY_SIGPARAM_NULL
 0x4

	)

1548 
	#ASN1_PKEY_CTRL_PKCS7_SIGN
 0x1

	)

1549 
	#ASN1_PKEY_CTRL_PKCS7_ENCRYPT
 0x2

	)

1550 
	#ASN1_PKEY_CTRL_DEFAULT_MD_NID
 0x3

	)

1551 
	#ASN1_PKEY_CTRL_CMS_SIGN
 0x5

	)

1552 
	#ASN1_PKEY_CTRL_CMS_ENVELOPE
 0x7

	)

1553 
	#ASN1_PKEY_CTRL_CMS_RI_TYPE
 0x8

	)

1555 
	#ASN1_PKEY_CTRL_SET1_TLS_ENCPT
 0x9

	)

1556 
	#ASN1_PKEY_CTRL_GET1_TLS_ENCPT
 0xa

	)

1557 
	#ASN1_PKEY_CTRL_CMS_IS_RI_TYPE_SUPPORTED
 0xb

	)

1559 
EVP_PKEY_a¢1_gë_cou¡
();

1560 c⁄° 
EVP_PKEY_ASN1_METHOD
 *
EVP_PKEY_a¢1_gë0
(
idx
);

1561 c⁄° 
EVP_PKEY_ASN1_METHOD
 *
EVP_PKEY_a¢1_föd
(
ENGINE
 **
≥
, 
ty≥
);

1562 c⁄° 
EVP_PKEY_ASN1_METHOD
 *
EVP_PKEY_a¢1_föd_°r
(
ENGINE
 **
≥
,

1563 c⁄° *
°r
, 
Àn
);

1564 
EVP_PKEY_a¢1_add0
(c⁄° 
EVP_PKEY_ASN1_METHOD
 *
amëh
);

1565 
EVP_PKEY_a¢1_add_Æüs
(
to
, 
‰om
);

1566 
EVP_PKEY_a¢1_gë0_öfo
(*
µkey_id
, *
pkey_ba£_id
,

1567 *
µkey_Êags
, c⁄° **
pöfo
,

1568 c⁄° **
µem_°r
,

1569 c⁄° 
EVP_PKEY_ASN1_METHOD
 *
amëh
);

1571 c⁄° 
EVP_PKEY_ASN1_METHOD
 *
EVP_PKEY_gë0_a¢1
(c⁄° 
EVP_PKEY
 *
pkey
);

1572 
EVP_PKEY_ASN1_METHOD
 *
EVP_PKEY_a¢1_√w
(
id
, 
Êags
,

1573 c⁄° *
≥m_°r
,

1574 c⁄° *
öfo
);

1575 
EVP_PKEY_a¢1_c›y
(
EVP_PKEY_ASN1_METHOD
 *
d°
,

1576 c⁄° 
EVP_PKEY_ASN1_METHOD
 *
§c
);

1577 
EVP_PKEY_a¢1_‰ì
(
EVP_PKEY_ASN1_METHOD
 *
amëh
);

1578 
EVP_PKEY_a¢1_£t_public
(
EVP_PKEY_ASN1_METHOD
 *
amëh
,

1579 (*
pub_decode
Ë(
EVP_PKEY
 *
pk
,

1580 c⁄° 
X509_PUBKEY
 *
pub
),

1581 (*
pub_ícode
Ë(
X509_PUBKEY
 *
pub
,

1582 c⁄° 
EVP_PKEY
 *
pk
),

1583 (*
pub_cmp
Ë(c⁄° 
EVP_PKEY
 *
a
,

1584 c⁄° 
EVP_PKEY
 *
b
),

1585 (*
pub_¥öt
Ë(
BIO
 *
out
,

1586 c⁄° 
EVP_PKEY
 *
pkey
,

1587 
ödít
, 
ASN1_PCTX
 *
p˘x
),

1588 (*
pkey_size
Ë(c⁄° 
EVP_PKEY
 *
pk
),

1589 (*
pkey_bôs
Ë(c⁄° 
EVP_PKEY
 *
pk
));

1590 
EVP_PKEY_a¢1_£t_¥iv©e
(
EVP_PKEY_ASN1_METHOD
 *
amëh
,

1591 (*
¥iv_decode
Ë(
EVP_PKEY
 *
pk
,

1592 c⁄° 
PKCS8_PRIV_KEY_INFO


1593 *
p8öf
),

1594 (*
¥iv_ícode
Ë(
PKCS8_PRIV_KEY_INFO
 *
p8
,

1595 c⁄° 
EVP_PKEY
 *
pk
),

1596 (*
¥iv_¥öt
Ë(
BIO
 *
out
,

1597 c⁄° 
EVP_PKEY
 *
pkey
,

1598 
ödít
,

1599 
ASN1_PCTX
 *
p˘x
));

1600 
EVP_PKEY_a¢1_£t_∑øm
(
EVP_PKEY_ASN1_METHOD
 *
amëh
,

1601 (*
∑øm_decode
Ë(
EVP_PKEY
 *
pkey
,

1602 c⁄° **
pdî
,

1603 
dîÀn
),

1604 (*
∑øm_ícode
Ë(c⁄° 
EVP_PKEY
 *
pkey
,

1605 **
pdî
),

1606 (*
∑øm_missög
Ë(c⁄° 
EVP_PKEY
 *
pk
),

1607 (*
∑øm_c›y
Ë(
EVP_PKEY
 *
to
,

1608 c⁄° 
EVP_PKEY
 *
‰om
),

1609 (*
∑øm_cmp
Ë(c⁄° 
EVP_PKEY
 *
a
,

1610 c⁄° 
EVP_PKEY
 *
b
),

1611 (*
∑øm_¥öt
Ë(
BIO
 *
out
,

1612 c⁄° 
EVP_PKEY
 *
pkey
,

1613 
ödít
,

1614 
ASN1_PCTX
 *
p˘x
));

1616 
EVP_PKEY_a¢1_£t_‰ì
(
EVP_PKEY_ASN1_METHOD
 *
amëh
,

1617 (*
pkey_‰ì
Ë(
EVP_PKEY
 *
pkey
));

1618 
EVP_PKEY_a¢1_£t_˘æ
(
EVP_PKEY_ASN1_METHOD
 *
amëh
,

1619 (*
pkey_˘æ
Ë(
EVP_PKEY
 *
pkey
, 
›
,

1620 
¨g1
, *
¨g2
));

1621 
EVP_PKEY_a¢1_£t_ôem
(
EVP_PKEY_ASN1_METHOD
 *
amëh
,

1622 (*
ôem_vîify
Ë(
EVP_MD_CTX
 *
˘x
,

1623 c⁄° 
ASN1_ITEM
 *
ô
,

1624 c⁄° *
d©a
,

1625 c⁄° 
X509_ALGOR
 *
a
,

1626 c⁄° 
ASN1_BIT_STRING
 *
sig
,

1627 
EVP_PKEY
 *
pkey
),

1628 (*
ôem_sign
Ë(
EVP_MD_CTX
 *
˘x
,

1629 c⁄° 
ASN1_ITEM
 *
ô
,

1630 c⁄° *
d©a
,

1631 
X509_ALGOR
 *
Æg1
,

1632 
X509_ALGOR
 *
Æg2
,

1633 
ASN1_BIT_STRING
 *
sig
));

1635 
EVP_PKEY_a¢1_£t_sigöf
(
EVP_PKEY_ASN1_METHOD
 *
amëh
,

1636 (*
sigöf_£t
Ë(
X509_SIG_INFO
 *
sigöf
,

1637 c⁄° 
X509_ALGOR
 *
Æg
,

1638 c⁄° 
ASN1_STRING
 *
sig
));

1640 
EVP_PKEY_a¢1_£t_check
(
EVP_PKEY_ASN1_METHOD
 *
amëh
,

1641 (*
pkey_check
Ë(c⁄° 
EVP_PKEY
 *
pk
));

1643 
EVP_PKEY_a¢1_£t_public_check
(
EVP_PKEY_ASN1_METHOD
 *
amëh
,

1644 (*
pkey_pub_check
Ë(c⁄° 
EVP_PKEY
 *
pk
));

1646 
EVP_PKEY_a¢1_£t_∑øm_check
(
EVP_PKEY_ASN1_METHOD
 *
amëh
,

1647 (*
pkey_∑øm_check
Ë(c⁄° 
EVP_PKEY
 *
pk
));

1649 
EVP_PKEY_a¢1_£t_£t_¥iv_key
(
EVP_PKEY_ASN1_METHOD
 *
amëh
,

1650 (*
£t_¥iv_key
Ë(
EVP_PKEY
 *
pk
,

1652 *
¥iv
,

1653 
size_t
 
Àn
));

1654 
EVP_PKEY_a¢1_£t_£t_pub_key
(
EVP_PKEY_ASN1_METHOD
 *
amëh
,

1655 (*
£t_pub_key
Ë(
EVP_PKEY
 *
pk
,

1656 c⁄° *
pub
,

1657 
size_t
 
Àn
));

1658 
EVP_PKEY_a¢1_£t_gë_¥iv_key
(
EVP_PKEY_ASN1_METHOD
 *
amëh
,

1659 (*
gë_¥iv_key
Ë(c⁄° 
EVP_PKEY
 *
pk
,

1660 *
¥iv
,

1661 
size_t
 *
Àn
));

1662 
EVP_PKEY_a¢1_£t_gë_pub_key
(
EVP_PKEY_ASN1_METHOD
 *
amëh
,

1663 (*
gë_pub_key
Ë(c⁄° 
EVP_PKEY
 *
pk
,

1664 *
pub
,

1665 
size_t
 *
Àn
));

1667 
EVP_PKEY_a¢1_£t_£curôy_bôs
(
EVP_PKEY_ASN1_METHOD
 *
amëh
,

1668 (*
pkey_£curôy_bôs
Ë(c⁄° 
EVP_PKEY


1669 *
pk
));

1671 
EVP_PKEY_CTX_gë_sig«tuª_md
(
EVP_PKEY_CTX
 *
˘x
, c⁄° 
EVP_MD
 **
md
);

1672 
EVP_PKEY_CTX_£t_sig«tuª_md
(
EVP_PKEY_CTX
 *
˘x
, c⁄° 
EVP_MD
 *
md
);

1674 
EVP_PKEY_CTX_£t1_id
(
EVP_PKEY_CTX
 *
˘x
, c⁄° *
id
, 
Àn
);

1675 
EVP_PKEY_CTX_gë1_id
(
EVP_PKEY_CTX
 *
˘x
, *
id
);

1676 
EVP_PKEY_CTX_gë1_id_Àn
(
EVP_PKEY_CTX
 *
˘x
, 
size_t
 *
id_Àn
);

1678 
EVP_PKEY_CTX_£t_kem_›
(
EVP_PKEY_CTX
 *
˘x
, c⁄° *
›
);

1680 c⁄° *
EVP_PKEY_gë0_ty≥_«me
(c⁄° 
EVP_PKEY
 *
key
);

1682 
	#EVP_PKEY_OP_UNDEFINED
 0

	)

1683 
	#EVP_PKEY_OP_PARAMGEN
 (1<<1)

	)

1684 
	#EVP_PKEY_OP_KEYGEN
 (1<<2)

	)

1685 
	#EVP_PKEY_OP_FROMDATA
 (1<<3)

	)

1686 
	#EVP_PKEY_OP_SIGN
 (1<<4)

	)

1687 
	#EVP_PKEY_OP_VERIFY
 (1<<5)

	)

1688 
	#EVP_PKEY_OP_VERIFYRECOVER
 (1<<6)

	)

1689 
	#EVP_PKEY_OP_SIGNCTX
 (1<<7)

	)

1690 
	#EVP_PKEY_OP_VERIFYCTX
 (1<<8)

	)

1691 
	#EVP_PKEY_OP_ENCRYPT
 (1<<9)

	)

1692 
	#EVP_PKEY_OP_DECRYPT
 (1<<10)

	)

1693 
	#EVP_PKEY_OP_DERIVE
 (1<<11)

	)

1694 
	#EVP_PKEY_OP_ENCAPSULATE
 (1<<12)

	)

1695 
	#EVP_PKEY_OP_DECAPSULATE
 (1<<13)

	)

1697 
	#EVP_PKEY_OP_TYPE_SIG
 \

1698 (
EVP_PKEY_OP_SIGN
 | 
EVP_PKEY_OP_VERIFY
 | 
EVP_PKEY_OP_VERIFYRECOVER
 \

1699 | 
EVP_PKEY_OP_SIGNCTX
 | 
EVP_PKEY_OP_VERIFYCTX
)

	)

1701 
	#EVP_PKEY_OP_TYPE_CRYPT
 \

1702 (
EVP_PKEY_OP_ENCRYPT
 | 
EVP_PKEY_OP_DECRYPT
)

	)

1704 
	#EVP_PKEY_OP_TYPE_NOGEN
 \

1705 (
EVP_PKEY_OP_TYPE_SIG
 | 
EVP_PKEY_OP_TYPE_CRYPT
 | 
EVP_PKEY_OP_DERIVE
)

	)

1707 
	#EVP_PKEY_OP_TYPE_GEN
 \

1708 (
EVP_PKEY_OP_PARAMGEN
 | 
EVP_PKEY_OP_KEYGEN
)

	)

1711 
EVP_PKEY_CTX_£t_mac_key
(
EVP_PKEY_CTX
 *
˘x
, c⁄° *
key
,

1712 
keyÀn
);

1714 
	#EVP_PKEY_CTRL_MD
 1

	)

1715 
	#EVP_PKEY_CTRL_PEER_KEY
 2

	)

1716 
	#EVP_PKEY_CTRL_SET_MAC_KEY
 6

	)

1717 
	#EVP_PKEY_CTRL_DIGESTINIT
 7

	)

1719 
	#EVP_PKEY_CTRL_SET_IV
 8

	)

1720 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


1721 
	#EVP_PKEY_CTRL_PKCS7_ENCRYPT
 3

	)

1722 
	#EVP_PKEY_CTRL_PKCS7_DECRYPT
 4

	)

1723 
	#EVP_PKEY_CTRL_PKCS7_SIGN
 5

	)

1724 
	#EVP_PKEY_CTRL_CMS_ENCRYPT
 9

	)

1725 
	#EVP_PKEY_CTRL_CMS_DECRYPT
 10

	)

1726 
	#EVP_PKEY_CTRL_CMS_SIGN
 11

	)

1728 
	#EVP_PKEY_CTRL_CIPHER
 12

	)

1729 
	#EVP_PKEY_CTRL_GET_MD
 13

	)

1730 
	#EVP_PKEY_CTRL_SET_DIGEST_SIZE
 14

	)

1731 
	#EVP_PKEY_CTRL_SET1_ID
 15

	)

1732 
	#EVP_PKEY_CTRL_GET1_ID
 16

	)

1733 
	#EVP_PKEY_CTRL_GET1_ID_LEN
 17

	)

1735 
	#EVP_PKEY_ALG_CTRL
 0x1000

	)

1737 
	#EVP_PKEY_FLAG_AUTOARGLEN
 2

	)

1741 
	#EVP_PKEY_FLAG_SIGCTX_CUSTOM
 4

	)

1742 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


1743 
OSSL_DEPRECATEDIN_3_0
 c⁄° 
EVP_PKEY_METHOD
 *
EVP_PKEY_mëh_föd
(
ty≥
);

1744 
OSSL_DEPRECATEDIN_3_0
 
EVP_PKEY_METHOD
 *
EVP_PKEY_mëh_√w
(
id
, 
Êags
);

1745 
OSSL_DEPRECATEDIN_3_0
 
EVP_PKEY_mëh_gë0_öfo
(*
µkey_id
, *
pÊags
,

1746 c⁄° 
EVP_PKEY_METHOD
 *
mëh
);

1747 
OSSL_DEPRECATEDIN_3_0
 
EVP_PKEY_mëh_c›y
(
EVP_PKEY_METHOD
 *
d°
,

1748 c⁄° 
EVP_PKEY_METHOD
 *
§c
);

1749 
OSSL_DEPRECATEDIN_3_0
 
EVP_PKEY_mëh_‰ì
(
EVP_PKEY_METHOD
 *
pmëh
);

1750 
OSSL_DEPRECATEDIN_3_0
 
EVP_PKEY_mëh_add0
(c⁄° 
EVP_PKEY_METHOD
 *
pmëh
);

1751 
OSSL_DEPRECATEDIN_3_0
 
EVP_PKEY_mëh_ªmove
(c⁄° 
EVP_PKEY_METHOD
 *
pmëh
);

1752 
OSSL_DEPRECATEDIN_3_0
 
size_t
 
EVP_PKEY_mëh_gë_cou¡
();

1753 
OSSL_DEPRECATEDIN_3_0
 c⁄° 
EVP_PKEY_METHOD
 *
EVP_PKEY_mëh_gë0
(
size_t
 
idx
);

1756 
EVP_KEYMGMT
 *
EVP_KEYMGMT_„tch
(
OSSL_LIB_CTX
 *
˘x
, c⁄° *
Æg‹ôhm
,

1757 c⁄° *
¥›îtõs
);

1758 
EVP_KEYMGMT_up_ªf
(
EVP_KEYMGMT
 *
keymgmt
);

1759 
EVP_KEYMGMT_‰ì
(
EVP_KEYMGMT
 *
keymgmt
);

1760 c⁄° 
OSSL_PROVIDER
 *
EVP_KEYMGMT_gë0_¥ovidî
(c⁄° 
EVP_KEYMGMT
 *
keymgmt
);

1761 c⁄° *
EVP_KEYMGMT_gë0_«me
(c⁄° 
EVP_KEYMGMT
 *
keymgmt
);

1762 c⁄° *
EVP_KEYMGMT_gë0_des¸ùti⁄
(c⁄° 
EVP_KEYMGMT
 *
keymgmt
);

1763 
EVP_KEYMGMT_is_a
(c⁄° 
EVP_KEYMGMT
 *
keymgmt
, c⁄° *
«me
);

1764 
EVP_KEYMGMT_do_Æl_¥ovided
(
OSSL_LIB_CTX
 *
lib˘x
,

1765 (*
‚
)(
EVP_KEYMGMT
 *
keymgmt
, *
¨g
),

1766 *
¨g
);

1767 
EVP_KEYMGMT_«mes_do_Æl
(c⁄° 
EVP_KEYMGMT
 *
keymgmt
,

1768 (*
‚
)(c⁄° *
«me
, *
d©a
),

1769 *
d©a
);

1770 c⁄° 
OSSL_PARAM
 *
EVP_KEYMGMT_gëèbÀ_∑øms
(c⁄° 
EVP_KEYMGMT
 *
keymgmt
);

1771 c⁄° 
OSSL_PARAM
 *
EVP_KEYMGMT_£âabÀ_∑øms
(c⁄° 
EVP_KEYMGMT
 *
keymgmt
);

1772 c⁄° 
OSSL_PARAM
 *
EVP_KEYMGMT_gí_£âabÀ_∑øms
(c⁄° 
EVP_KEYMGMT
 *
keymgmt
);

1774 
EVP_PKEY_CTX
 *
EVP_PKEY_CTX_√w
(
EVP_PKEY
 *
pkey
, 
ENGINE
 *
e
);

1775 
EVP_PKEY_CTX
 *
EVP_PKEY_CTX_√w_id
(
id
, 
ENGINE
 *
e
);

1776 
EVP_PKEY_CTX
 *
EVP_PKEY_CTX_√w_‰om_«me
(
OSSL_LIB_CTX
 *
lib˘x
,

1777 c⁄° *
«me
,

1778 c⁄° *
¥›quîy
);

1779 
EVP_PKEY_CTX
 *
EVP_PKEY_CTX_√w_‰om_pkey
(
OSSL_LIB_CTX
 *
lib˘x
,

1780 
EVP_PKEY
 *
pkey
, c⁄° *
¥›quîy
);

1781 
EVP_PKEY_CTX
 *
EVP_PKEY_CTX_dup
(c⁄° EVP_PKEY_CTX *
˘x
);

1782 
EVP_PKEY_CTX_‰ì
(
EVP_PKEY_CTX
 *
˘x
);

1783 
EVP_PKEY_CTX_is_a
(
EVP_PKEY_CTX
 *
˘x
, c⁄° *
keyty≥
);

1785 
EVP_PKEY_CTX_gë_∑øms
(
EVP_PKEY_CTX
 *
˘x
, 
OSSL_PARAM
 *
∑øms
);

1786 c⁄° 
OSSL_PARAM
 *
EVP_PKEY_CTX_gëèbÀ_∑øms
(c⁄° 
EVP_PKEY_CTX
 *
˘x
);

1787 
EVP_PKEY_CTX_£t_∑øms
(
EVP_PKEY_CTX
 *
˘x
, c⁄° 
OSSL_PARAM
 *
∑øms
);

1788 c⁄° 
OSSL_PARAM
 *
EVP_PKEY_CTX_£âabÀ_∑øms
(c⁄° 
EVP_PKEY_CTX
 *
˘x
);

1789 
EVP_PKEY_CTX_˘æ
(
EVP_PKEY_CTX
 *
˘x
, 
keyty≥
, 
›ty≥
,

1790 
cmd
, 
p1
, *
p2
);

1791 
EVP_PKEY_CTX_˘æ_°r
(
EVP_PKEY_CTX
 *
˘x
, c⁄° *
ty≥
,

1792 c⁄° *
vÆue
);

1793 
EVP_PKEY_CTX_˘æ_uöt64
(
EVP_PKEY_CTX
 *
˘x
, 
keyty≥
, 
›ty≥
,

1794 
cmd
, 
uöt64_t
 
vÆue
);

1796 
EVP_PKEY_CTX_°r2˘æ
(
EVP_PKEY_CTX
 *
˘x
, 
cmd
, c⁄° *
°r
);

1797 
EVP_PKEY_CTX_hex2˘æ
(
EVP_PKEY_CTX
 *
˘x
, 
cmd
, c⁄° *
hex
);

1799 
EVP_PKEY_CTX_md
(
EVP_PKEY_CTX
 *
˘x
, 
›ty≥
, 
cmd
, c⁄° *
md
);

1801 
EVP_PKEY_CTX_gë_›î©i⁄
(
EVP_PKEY_CTX
 *
˘x
);

1802 
EVP_PKEY_CTX_£t0_keygí_öfo
(
EVP_PKEY_CTX
 *
˘x
, *
d©
, 
d©Àn
);

1804 
EVP_PKEY
 *
EVP_PKEY_√w_mac_key
(
ty≥
, 
ENGINE
 *
e
,

1805 c⁄° *
key
, 
keyÀn
);

1806 
EVP_PKEY
 *
EVP_PKEY_√w_øw_¥iv©e_key_ex
(
OSSL_LIB_CTX
 *
lib˘x
,

1807 c⁄° *
keyty≥
,

1808 c⁄° *
¥›q
,

1809 c⁄° *
¥iv
, 
size_t
 
Àn
);

1810 
EVP_PKEY
 *
EVP_PKEY_√w_øw_¥iv©e_key
(
ty≥
, 
ENGINE
 *
e
,

1811 c⁄° *
¥iv
,

1812 
size_t
 
Àn
);

1813 
EVP_PKEY
 *
EVP_PKEY_√w_øw_public_key_ex
(
OSSL_LIB_CTX
 *
lib˘x
,

1814 c⁄° *
keyty≥
, c⁄° *
¥›q
,

1815 c⁄° *
pub
, 
size_t
 
Àn
);

1816 
EVP_PKEY
 *
EVP_PKEY_√w_øw_public_key
(
ty≥
, 
ENGINE
 *
e
,

1817 c⁄° *
pub
,

1818 
size_t
 
Àn
);

1819 
EVP_PKEY_gë_øw_¥iv©e_key
(c⁄° 
EVP_PKEY
 *
pkey
, *
¥iv
,

1820 
size_t
 *
Àn
);

1821 
EVP_PKEY_gë_øw_public_key
(c⁄° 
EVP_PKEY
 *
pkey
, *
pub
,

1822 
size_t
 *
Àn
);

1824 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


1825 
OSSL_DEPRECATEDIN_3_0


1826 
EVP_PKEY
 *
EVP_PKEY_√w_CMAC_key
(
ENGINE
 *
e
, c⁄° *
¥iv
,

1827 
size_t
 
Àn
, c⁄° 
EVP_CIPHER
 *
cùhî
);

1830 
EVP_PKEY_CTX_£t_d©a
(
EVP_PKEY_CTX
 *
˘x
, *
d©a
);

1831 *
EVP_PKEY_CTX_gë_d©a
(c⁄° 
EVP_PKEY_CTX
 *
˘x
);

1832 
EVP_PKEY
 *
EVP_PKEY_CTX_gë0_pkey
(
EVP_PKEY_CTX
 *
˘x
);

1834 
EVP_PKEY
 *
EVP_PKEY_CTX_gë0_≥îkey
(
EVP_PKEY_CTX
 *
˘x
);

1836 
EVP_PKEY_CTX_£t_≠p_d©a
(
EVP_PKEY_CTX
 *
˘x
, *
d©a
);

1837 *
EVP_PKEY_CTX_gë_≠p_d©a
(
EVP_PKEY_CTX
 *
˘x
);

1839 
EVP_SIGNATURE_‰ì
(
EVP_SIGNATURE
 *
sig«tuª
);

1840 
EVP_SIGNATURE_up_ªf
(
EVP_SIGNATURE
 *
sig«tuª
);

1841 
OSSL_PROVIDER
 *
EVP_SIGNATURE_gë0_¥ovidî
(c⁄° 
EVP_SIGNATURE
 *
sig«tuª
);

1842 
EVP_SIGNATURE
 *
EVP_SIGNATURE_„tch
(
OSSL_LIB_CTX
 *
˘x
, c⁄° *
Æg‹ôhm
,

1843 c⁄° *
¥›îtõs
);

1844 
EVP_SIGNATURE_is_a
(c⁄° 
EVP_SIGNATURE
 *
sig«tuª
, c⁄° *
«me
);

1845 c⁄° *
EVP_SIGNATURE_gë0_«me
(c⁄° 
EVP_SIGNATURE
 *
sig«tuª
);

1846 c⁄° *
EVP_SIGNATURE_gë0_des¸ùti⁄
(c⁄° 
EVP_SIGNATURE
 *
sig«tuª
);

1847 
EVP_SIGNATURE_do_Æl_¥ovided
(
OSSL_LIB_CTX
 *
lib˘x
,

1848 (*
‚
)(
EVP_SIGNATURE
 *
sig«tuª
,

1849 *
d©a
),

1850 *
d©a
);

1851 
EVP_SIGNATURE_«mes_do_Æl
(c⁄° 
EVP_SIGNATURE
 *
sig«tuª
,

1852 (*
‚
)(c⁄° *
«me
, *
d©a
),

1853 *
d©a
);

1854 c⁄° 
OSSL_PARAM
 *
EVP_SIGNATURE_gëèbÀ_˘x_∑øms
(c⁄° 
EVP_SIGNATURE
 *
sig
);

1855 c⁄° 
OSSL_PARAM
 *
EVP_SIGNATURE_£âabÀ_˘x_∑øms
(c⁄° 
EVP_SIGNATURE
 *
sig
);

1857 
EVP_ASYM_CIPHER_‰ì
(
EVP_ASYM_CIPHER
 *
cùhî
);

1858 
EVP_ASYM_CIPHER_up_ªf
(
EVP_ASYM_CIPHER
 *
cùhî
);

1859 
OSSL_PROVIDER
 *
EVP_ASYM_CIPHER_gë0_¥ovidî
(c⁄° 
EVP_ASYM_CIPHER
 *
cùhî
);

1860 
EVP_ASYM_CIPHER
 *
EVP_ASYM_CIPHER_„tch
(
OSSL_LIB_CTX
 *
˘x
, c⁄° *
Æg‹ôhm
,

1861 c⁄° *
¥›îtõs
);

1862 
EVP_ASYM_CIPHER_is_a
(c⁄° 
EVP_ASYM_CIPHER
 *
cùhî
, c⁄° *
«me
);

1863 c⁄° *
EVP_ASYM_CIPHER_gë0_«me
(c⁄° 
EVP_ASYM_CIPHER
 *
cùhî
);

1864 c⁄° *
EVP_ASYM_CIPHER_gë0_des¸ùti⁄
(c⁄° 
EVP_ASYM_CIPHER
 *
cùhî
);

1865 
EVP_ASYM_CIPHER_do_Æl_¥ovided
(
OSSL_LIB_CTX
 *
lib˘x
,

1866 (*
‚
)(
EVP_ASYM_CIPHER
 *
cùhî
,

1867 *
¨g
),

1868 *
¨g
);

1869 
EVP_ASYM_CIPHER_«mes_do_Æl
(c⁄° 
EVP_ASYM_CIPHER
 *
cùhî
,

1870 (*
‚
)(c⁄° *
«me
, *
d©a
),

1871 *
d©a
);

1872 c⁄° 
OSSL_PARAM
 *
EVP_ASYM_CIPHER_gëèbÀ_˘x_∑øms
(c⁄° 
EVP_ASYM_CIPHER
 *
cùh
);

1873 c⁄° 
OSSL_PARAM
 *
EVP_ASYM_CIPHER_£âabÀ_˘x_∑øms
(c⁄° 
EVP_ASYM_CIPHER
 *
cùh
);

1875 
EVP_KEM_‰ì
(
EVP_KEM
 *
wøp
);

1876 
EVP_KEM_up_ªf
(
EVP_KEM
 *
wøp
);

1877 
OSSL_PROVIDER
 *
EVP_KEM_gë0_¥ovidî
(c⁄° 
EVP_KEM
 *
wøp
);

1878 
EVP_KEM
 *
EVP_KEM_„tch
(
OSSL_LIB_CTX
 *
˘x
, c⁄° *
Æg‹ôhm
,

1879 c⁄° *
¥›îtõs
);

1880 
EVP_KEM_is_a
(c⁄° 
EVP_KEM
 *
wøp
, c⁄° *
«me
);

1881 c⁄° *
EVP_KEM_gë0_«me
(c⁄° 
EVP_KEM
 *
wøp
);

1882 c⁄° *
EVP_KEM_gë0_des¸ùti⁄
(c⁄° 
EVP_KEM
 *
wøp
);

1883 
EVP_KEM_do_Æl_¥ovided
(
OSSL_LIB_CTX
 *
lib˘x
,

1884 (*
‚
)(
EVP_KEM
 *
wøp
, *
¨g
), *arg);

1885 
EVP_KEM_«mes_do_Æl
(c⁄° 
EVP_KEM
 *
wøp
,

1886 (*
‚
)(c⁄° *
«me
, *
d©a
), *data);

1887 c⁄° 
OSSL_PARAM
 *
EVP_KEM_gëèbÀ_˘x_∑øms
(c⁄° 
EVP_KEM
 *
kem
);

1888 c⁄° 
OSSL_PARAM
 *
EVP_KEM_£âabÀ_˘x_∑øms
(c⁄° 
EVP_KEM
 *
kem
);

1890 
EVP_PKEY_sign_öô
(
EVP_PKEY_CTX
 *
˘x
);

1891 
EVP_PKEY_sign_öô_ex
(
EVP_PKEY_CTX
 *
˘x
, c⁄° 
OSSL_PARAM
 
∑øms
[]);

1892 
EVP_PKEY_sign
(
EVP_PKEY_CTX
 *
˘x
,

1893 *
sig
, 
size_t
 *
sigÀn
,

1894 c⁄° *
tbs
, 
size_t
 
tb¶í
);

1895 
EVP_PKEY_vîify_öô
(
EVP_PKEY_CTX
 *
˘x
);

1896 
EVP_PKEY_vîify_öô_ex
(
EVP_PKEY_CTX
 *
˘x
, c⁄° 
OSSL_PARAM
 
∑øms
[]);

1897 
EVP_PKEY_vîify
(
EVP_PKEY_CTX
 *
˘x
,

1898 c⁄° *
sig
, 
size_t
 
sigÀn
,

1899 c⁄° *
tbs
, 
size_t
 
tb¶í
);

1900 
EVP_PKEY_vîify_ªcovî_öô
(
EVP_PKEY_CTX
 *
˘x
);

1901 
EVP_PKEY_vîify_ªcovî_öô_ex
(
EVP_PKEY_CTX
 *
˘x
,

1902 c⁄° 
OSSL_PARAM
 
∑øms
[]);

1903 
EVP_PKEY_vîify_ªcovî
(
EVP_PKEY_CTX
 *
˘x
,

1904 *
rout
, 
size_t
 *
rouéí
,

1905 c⁄° *
sig
, 
size_t
 
sigÀn
);

1906 
EVP_PKEY_í¸y±_öô
(
EVP_PKEY_CTX
 *
˘x
);

1907 
EVP_PKEY_í¸y±_öô_ex
(
EVP_PKEY_CTX
 *
˘x
, c⁄° 
OSSL_PARAM
 
∑øms
[]);

1908 
EVP_PKEY_í¸y±
(
EVP_PKEY_CTX
 *
˘x
,

1909 *
out
, 
size_t
 *
ouéí
,

1910 c⁄° *
ö
, 
size_t
 
öÀn
);

1911 
EVP_PKEY_de¸y±_öô
(
EVP_PKEY_CTX
 *
˘x
);

1912 
EVP_PKEY_de¸y±_öô_ex
(
EVP_PKEY_CTX
 *
˘x
, c⁄° 
OSSL_PARAM
 
∑øms
[]);

1913 
EVP_PKEY_de¸y±
(
EVP_PKEY_CTX
 *
˘x
,

1914 *
out
, 
size_t
 *
ouéí
,

1915 c⁄° *
ö
, 
size_t
 
öÀn
);

1917 
EVP_PKEY_dîive_öô
(
EVP_PKEY_CTX
 *
˘x
);

1918 
EVP_PKEY_dîive_öô_ex
(
EVP_PKEY_CTX
 *
˘x
, c⁄° 
OSSL_PARAM
 
∑øms
[]);

1919 
EVP_PKEY_dîive_£t_≥î_ex
(
EVP_PKEY_CTX
 *
˘x
, 
EVP_PKEY
 *
≥î
,

1920 
vÆid©e_≥î
);

1921 
EVP_PKEY_dîive_£t_≥î
(
EVP_PKEY_CTX
 *
˘x
, 
EVP_PKEY
 *
≥î
);

1922 
EVP_PKEY_dîive
(
EVP_PKEY_CTX
 *
˘x
, *
key
, 
size_t
 *
keyÀn
);

1924 
EVP_PKEY_íˇpsuœã_öô
(
EVP_PKEY_CTX
 *
˘x
, c⁄° 
OSSL_PARAM
 
∑øms
[]);

1925 
EVP_PKEY_íˇpsuœã
(
EVP_PKEY_CTX
 *
˘x
,

1926 *
wøµedkey
, 
size_t
 *
wøµedkeyÀn
,

1927 *
gíkey
, 
size_t
 *
gíkeyÀn
);

1928 
EVP_PKEY_deˇpsuœã_öô
(
EVP_PKEY_CTX
 *
˘x
, c⁄° 
OSSL_PARAM
 
∑øms
[]);

1929 
EVP_PKEY_deˇpsuœã
(
EVP_PKEY_CTX
 *
˘x
,

1930 *
unwøµed
, 
size_t
 *
unwøµedÀn
,

1931 c⁄° *
wøµed
, 
size_t
 
wøµedÀn
);

1933 
	tEVP_PKEY_gí_cb
(
	tEVP_PKEY_CTX
 *
	t˘x
);

1935 
EVP_PKEY_‰omd©a_öô
(
EVP_PKEY_CTX
 *
˘x
);

1936 
EVP_PKEY_‰omd©a
(
EVP_PKEY_CTX
 *
˘x
, 
EVP_PKEY
 **
µkey
, 
£À˘i⁄
,

1937 
OSSL_PARAM
 
∑øm
[]);

1938 c⁄° 
OSSL_PARAM
 *
EVP_PKEY_‰omd©a_£âabÀ
(
EVP_PKEY_CTX
 *
˘x
, 
£À˘i⁄
);

1940 
EVP_PKEY_tod©a
(c⁄° 
EVP_PKEY
 *
pkey
, 
£À˘i⁄
, 
OSSL_PARAM
 **
∑øms
);

1941 
EVP_PKEY_exp‹t
(c⁄° 
EVP_PKEY
 *
pkey
, 
£À˘i⁄
,

1942 
OSSL_CALLBACK
 *
exp‹t_cb
, *
exp‹t_cb¨g
);

1944 c⁄° 
OSSL_PARAM
 *
EVP_PKEY_gëèbÀ_∑øms
(c⁄° 
EVP_PKEY
 *
pkey
);

1945 
EVP_PKEY_gë_∑øms
(c⁄° 
EVP_PKEY
 *
pkey
, 
OSSL_PARAM
 
∑øms
[]);

1946 
EVP_PKEY_gë_öt_∑øm
(c⁄° 
EVP_PKEY
 *
pkey
, c⁄° *
key_«me
,

1947 *
out
);

1948 
EVP_PKEY_gë_size_t_∑øm
(c⁄° 
EVP_PKEY
 *
pkey
, c⁄° *
key_«me
,

1949 
size_t
 *
out
);

1950 
EVP_PKEY_gë_bn_∑øm
(c⁄° 
EVP_PKEY
 *
pkey
, c⁄° *
key_«me
,

1951 
BIGNUM
 **
bn
);

1952 
EVP_PKEY_gë_utf8_°rög_∑øm
(c⁄° 
EVP_PKEY
 *
pkey
, c⁄° *
key_«me
,

1953 *
°r
, 
size_t
 
max_buf_sz
, size_à*
out_sz
);

1954 
EVP_PKEY_gë_o˘ë_°rög_∑øm
(c⁄° 
EVP_PKEY
 *
pkey
, c⁄° *
key_«me
,

1955 *
buf
, 
size_t
 
max_buf_sz
,

1956 
size_t
 *
out_sz
);

1958 c⁄° 
OSSL_PARAM
 *
EVP_PKEY_£âabÀ_∑øms
(c⁄° 
EVP_PKEY
 *
pkey
);

1959 
EVP_PKEY_£t_∑øms
(
EVP_PKEY
 *
pkey
, 
OSSL_PARAM
 
∑øms
[]);

1960 
EVP_PKEY_£t_öt_∑øm
(
EVP_PKEY
 *
pkey
, c⁄° *
key_«me
, 
ö
);

1961 
EVP_PKEY_£t_size_t_∑øm
(
EVP_PKEY
 *
pkey
, c⁄° *
key_«me
, 
size_t
 
ö
);

1962 
EVP_PKEY_£t_bn_∑øm
(
EVP_PKEY
 *
pkey
, c⁄° *
key_«me
,

1963 c⁄° 
BIGNUM
 *
bn
);

1964 
EVP_PKEY_£t_utf8_°rög_∑øm
(
EVP_PKEY
 *
pkey
, c⁄° *
key_«me
,

1965 c⁄° *
°r
);

1966 
EVP_PKEY_£t_o˘ë_°rög_∑øm
(
EVP_PKEY
 *
pkey
, c⁄° *
key_«me
,

1967 c⁄° *
buf
, 
size_t
 
bsize
);

1969 
EVP_PKEY_gë_ec_poöt_c⁄v_f‹m
(c⁄° 
EVP_PKEY
 *
pkey
);

1970 
EVP_PKEY_gë_fõld_ty≥
(c⁄° 
EVP_PKEY
 *
pkey
);

1972 
EVP_PKEY
 *
EVP_PKEY_Q_keygí
(
OSSL_LIB_CTX
 *
lib˘x
, c⁄° *
¥›q
,

1973 c⁄° *
ty≥
, ...);

1974 
EVP_PKEY_∑ømgí_öô
(
EVP_PKEY_CTX
 *
˘x
);

1975 
EVP_PKEY_∑ømgí
(
EVP_PKEY_CTX
 *
˘x
, 
EVP_PKEY
 **
µkey
);

1976 
EVP_PKEY_keygí_öô
(
EVP_PKEY_CTX
 *
˘x
);

1977 
EVP_PKEY_keygí
(
EVP_PKEY_CTX
 *
˘x
, 
EVP_PKEY
 **
µkey
);

1978 
EVP_PKEY_gíî©e
(
EVP_PKEY_CTX
 *
˘x
, 
EVP_PKEY
 **
µkey
);

1979 
EVP_PKEY_check
(
EVP_PKEY_CTX
 *
˘x
);

1980 
EVP_PKEY_public_check
(
EVP_PKEY_CTX
 *
˘x
);

1981 
EVP_PKEY_public_check_quick
(
EVP_PKEY_CTX
 *
˘x
);

1982 
EVP_PKEY_∑øm_check
(
EVP_PKEY_CTX
 *
˘x
);

1983 
EVP_PKEY_∑øm_check_quick
(
EVP_PKEY_CTX
 *
˘x
);

1984 
EVP_PKEY_¥iv©e_check
(
EVP_PKEY_CTX
 *
˘x
);

1985 
EVP_PKEY_∑úwi£_check
(
EVP_PKEY_CTX
 *
˘x
);

1987 
	#EVP_PKEY_gë_ex_√w_ödex
(
l
, 
p
, 
√wf
, 
dupf
, 
‰ìf
) \

1988 
	`CRYPTO_gë_ex_√w_ödex
(
CRYPTO_EX_INDEX_EVP_PKEY
, 
l
, 
p
, 
√wf
, 
dupf
, 
‰ìf
)

	)

1989 
EVP_PKEY_£t_ex_d©a
(
EVP_PKEY
 *
key
, 
idx
, *
¨g
);

1990 *
EVP_PKEY_gë_ex_d©a
(c⁄° 
EVP_PKEY
 *
key
, 
idx
);

1992 
EVP_PKEY_CTX_£t_cb
(
EVP_PKEY_CTX
 *
˘x
, 
EVP_PKEY_gí_cb
 *
cb
);

1993 
EVP_PKEY_gí_cb
 *
EVP_PKEY_CTX_gë_cb
(
EVP_PKEY_CTX
 *
˘x
);

1995 
EVP_PKEY_CTX_gë_keygí_öfo
(
EVP_PKEY_CTX
 *
˘x
, 
idx
);

1996 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


1997 
OSSL_DEPRECATEDIN_3_0
 
EVP_PKEY_mëh_£t_öô
(
EVP_PKEY_METHOD
 *
pmëh
,

1998 (*
öô
Ë(
EVP_PKEY_CTX
 *
˘x
));

1999 
OSSL_DEPRECATEDIN_3_0
 
EVP_PKEY_mëh_£t_c›y


2000 (
EVP_PKEY_METHOD
 *
pmëh
, (*
c›y
Ë(
EVP_PKEY_CTX
 *
d°
,

2001 c⁄° 
EVP_PKEY_CTX
 *
§c
));

2002 
OSSL_DEPRECATEDIN_3_0
 
EVP_PKEY_mëh_£t_˛ónup


2003 (
EVP_PKEY_METHOD
 *
pmëh
, (*
˛ónup
Ë(
EVP_PKEY_CTX
 *
˘x
));

2004 
OSSL_DEPRECATEDIN_3_0
 
EVP_PKEY_mëh_£t_∑ømgí


2005 (
EVP_PKEY_METHOD
 *
pmëh
, (*
∑ømgí_öô
Ë(
EVP_PKEY_CTX
 *
˘x
),

2006 (*
∑ømgí
Ë(
EVP_PKEY_CTX
 *
˘x
, 
EVP_PKEY
 *
pkey
));

2007 
OSSL_DEPRECATEDIN_3_0
 
EVP_PKEY_mëh_£t_keygí


2008 (
EVP_PKEY_METHOD
 *
pmëh
, (*
keygí_öô
Ë(
EVP_PKEY_CTX
 *
˘x
),

2009 (*
keygí
Ë(
EVP_PKEY_CTX
 *
˘x
, 
EVP_PKEY
 *
pkey
));

2010 
OSSL_DEPRECATEDIN_3_0
 
EVP_PKEY_mëh_£t_sign


2011 (
EVP_PKEY_METHOD
 *
pmëh
, (*
sign_öô
Ë(
EVP_PKEY_CTX
 *
˘x
),

2012 (*
sign
Ë(
EVP_PKEY_CTX
 *
˘x
, *
sig
, 
size_t
 *
sigÀn
,

2013 c⁄° *
tbs
, 
size_t
 
tb¶í
));

2014 
OSSL_DEPRECATEDIN_3_0
 
EVP_PKEY_mëh_£t_vîify


2015 (
EVP_PKEY_METHOD
 *
pmëh
, (*
vîify_öô
Ë(
EVP_PKEY_CTX
 *
˘x
),

2016 (*
vîify
Ë(
EVP_PKEY_CTX
 *
˘x
, c⁄° *
sig
, 
size_t
 
sigÀn
,

2017 c⁄° *
tbs
, 
size_t
 
tb¶í
));

2018 
OSSL_DEPRECATEDIN_3_0
 
EVP_PKEY_mëh_£t_vîify_ªcovî


2019 (
EVP_PKEY_METHOD
 *
pmëh
, (*
vîify_ªcovî_öô
Ë(
EVP_PKEY_CTX
 *
˘x
),

2020 (*
vîify_ªcovî
Ë(
EVP_PKEY_CTX
 *
˘x
, *
sig
,

2021 
size_t
 *
sigÀn
, c⁄° *
tbs
,

2022 
size_t
 
tb¶í
));

2023 
OSSL_DEPRECATEDIN_3_0
 
EVP_PKEY_mëh_£t_sign˘x


2024 (
EVP_PKEY_METHOD
 *
pmëh
, (*
sign˘x_öô
Ë(
EVP_PKEY_CTX
 *
˘x
,

2025 
EVP_MD_CTX
 *
m˘x
),

2026 (*
sign˘x
Ë(
EVP_PKEY_CTX
 *
˘x
, *
sig
, 
size_t
 *
sigÀn
,

2027 
EVP_MD_CTX
 *
m˘x
));

2028 
OSSL_DEPRECATEDIN_3_0
 
EVP_PKEY_mëh_£t_vîify˘x


2029 (
EVP_PKEY_METHOD
 *
pmëh
, (*
vîify˘x_öô
Ë(
EVP_PKEY_CTX
 *
˘x
,

2030 
EVP_MD_CTX
 *
m˘x
),

2031 (*
vîify˘x
Ë(
EVP_PKEY_CTX
 *
˘x
, c⁄° *
sig
, 
sigÀn
,

2032 
EVP_MD_CTX
 *
m˘x
));

2033 
OSSL_DEPRECATEDIN_3_0
 
EVP_PKEY_mëh_£t_í¸y±


2034 (
EVP_PKEY_METHOD
 *
pmëh
, (*
í¸y±_öô
Ë(
EVP_PKEY_CTX
 *
˘x
),

2035 (*
í¸y±‚
Ë(
EVP_PKEY_CTX
 *
˘x
, *
out
, 
size_t
 *
ouéí
,

2036 c⁄° *
ö
, 
size_t
 
öÀn
));

2037 
OSSL_DEPRECATEDIN_3_0
 
EVP_PKEY_mëh_£t_de¸y±


2038 (
EVP_PKEY_METHOD
 *
pmëh
, (*
de¸y±_öô
Ë(
EVP_PKEY_CTX
 *
˘x
),

2039 (*
de¸y±
Ë(
EVP_PKEY_CTX
 *
˘x
, *
out
, 
size_t
 *
ouéí
,

2040 c⁄° *
ö
, 
size_t
 
öÀn
));

2041 
OSSL_DEPRECATEDIN_3_0
 
EVP_PKEY_mëh_£t_dîive


2042 (
EVP_PKEY_METHOD
 *
pmëh
, (*
dîive_öô
Ë(
EVP_PKEY_CTX
 *
˘x
),

2043 (*
dîive
Ë(
EVP_PKEY_CTX
 *
˘x
, *
key
, 
size_t
 *
keyÀn
));

2044 
OSSL_DEPRECATEDIN_3_0
 
EVP_PKEY_mëh_£t_˘æ


2045 (
EVP_PKEY_METHOD
 *
pmëh
, (*
˘æ
Ë(
EVP_PKEY_CTX
 *
˘x
, 
ty≥
, 
p1
,

2046 *
p2
),

2047 (*
˘æ_°r
Ë(
EVP_PKEY_CTX
 *
˘x
, c⁄° *
ty≥
, c⁄° *
vÆue
));

2048 
OSSL_DEPRECATEDIN_3_0
 
EVP_PKEY_mëh_£t_dige°sign


2049 (
EVP_PKEY_METHOD
 *
pmëh
,

2050 (*
dige°sign
Ë(
EVP_MD_CTX
 *
˘x
, *
sig
, 
size_t
 *
sigÀn
,

2051 c⁄° *
tbs
, 
size_t
 
tb¶í
));

2052 
OSSL_DEPRECATEDIN_3_0
 
EVP_PKEY_mëh_£t_dige°vîify


2053 (
EVP_PKEY_METHOD
 *
pmëh
,

2054 (*
dige°vîify
Ë(
EVP_MD_CTX
 *
˘x
, c⁄° *
sig
,

2055 
size_t
 
sigÀn
, c⁄° *
tbs
,

2056 
size_t
 
tb¶í
));

2057 
OSSL_DEPRECATEDIN_3_0
 
EVP_PKEY_mëh_£t_check


2058 (
EVP_PKEY_METHOD
 *
pmëh
, (*
check
Ë(
EVP_PKEY
 *
pkey
));

2059 
OSSL_DEPRECATEDIN_3_0
 
EVP_PKEY_mëh_£t_public_check


2060 (
EVP_PKEY_METHOD
 *
pmëh
, (*
check
Ë(
EVP_PKEY
 *
pkey
));

2061 
OSSL_DEPRECATEDIN_3_0
 
EVP_PKEY_mëh_£t_∑øm_check


2062 (
EVP_PKEY_METHOD
 *
pmëh
, (*
check
Ë(
EVP_PKEY
 *
pkey
));

2063 
OSSL_DEPRECATEDIN_3_0
 
EVP_PKEY_mëh_£t_dige°_cu°om


2064 (
EVP_PKEY_METHOD
 *
pmëh
, (*
dige°_cu°om
Ë(
EVP_PKEY_CTX
 *
˘x
,

2065 
EVP_MD_CTX
 *
m˘x
));

2066 
OSSL_DEPRECATEDIN_3_0
 
EVP_PKEY_mëh_gë_öô


2067 (c⁄° 
EVP_PKEY_METHOD
 *
pmëh
, (**
pöô
Ë(
EVP_PKEY_CTX
 *
˘x
));

2068 
OSSL_DEPRECATEDIN_3_0
 
EVP_PKEY_mëh_gë_c›y


2069 (c⁄° 
EVP_PKEY_METHOD
 *
pmëh
, (**
pc›y
Ë(
EVP_PKEY_CTX
 *
d°
,

2070 c⁄° 
EVP_PKEY_CTX
 *
§c
));

2071 
OSSL_DEPRECATEDIN_3_0
 
EVP_PKEY_mëh_gë_˛ónup


2072 (c⁄° 
EVP_PKEY_METHOD
 *
pmëh
, (**
p˛ónup
Ë(
EVP_PKEY_CTX
 *
˘x
));

2073 
OSSL_DEPRECATEDIN_3_0
 
EVP_PKEY_mëh_gë_∑ømgí


2074 (c⁄° 
EVP_PKEY_METHOD
 *
pmëh
, (**
µ¨amgí_öô
Ë(
EVP_PKEY_CTX
 *
˘x
),

2075 (**
µ¨amgí
Ë(
EVP_PKEY_CTX
 *
˘x
, 
EVP_PKEY
 *
pkey
));

2076 
OSSL_DEPRECATEDIN_3_0
 
EVP_PKEY_mëh_gë_keygí


2077 (c⁄° 
EVP_PKEY_METHOD
 *
pmëh
, (**
pkeygí_öô
Ë(
EVP_PKEY_CTX
 *
˘x
),

2078 (**
pkeygí
Ë(
EVP_PKEY_CTX
 *
˘x
, 
EVP_PKEY
 *
pkey
));

2079 
OSSL_DEPRECATEDIN_3_0
 
EVP_PKEY_mëh_gë_sign


2080 (c⁄° 
EVP_PKEY_METHOD
 *
pmëh
, (**
psign_öô
Ë(
EVP_PKEY_CTX
 *
˘x
),

2081 (**
psign
Ë(
EVP_PKEY_CTX
 *
˘x
, *
sig
, 
size_t
 *
sigÀn
,

2082 c⁄° *
tbs
, 
size_t
 
tb¶í
));

2083 
OSSL_DEPRECATEDIN_3_0
 
EVP_PKEY_mëh_gë_vîify


2084 (c⁄° 
EVP_PKEY_METHOD
 *
pmëh
, (**
pvîify_öô
Ë(
EVP_PKEY_CTX
 *
˘x
),

2085 (**
pvîify
Ë(
EVP_PKEY_CTX
 *
˘x
, c⁄° *
sig
,

2086 
size_t
 
sigÀn
, c⁄° *
tbs
, size_à
tb¶í
));

2087 
OSSL_DEPRECATEDIN_3_0
 
EVP_PKEY_mëh_gë_vîify_ªcovî


2088 (c⁄° 
EVP_PKEY_METHOD
 *
pmëh
,

2089 (**
pvîify_ªcovî_öô
Ë(
EVP_PKEY_CTX
 *
˘x
),

2090 (**
pvîify_ªcovî
Ë(
EVP_PKEY_CTX
 *
˘x
, *
sig
,

2091 
size_t
 *
sigÀn
, c⁄° *
tbs
,

2092 
size_t
 
tb¶í
));

2093 
OSSL_DEPRECATEDIN_3_0
 
EVP_PKEY_mëh_gë_sign˘x


2094 (c⁄° 
EVP_PKEY_METHOD
 *
pmëh
,

2095 (**
psign˘x_öô
Ë(
EVP_PKEY_CTX
 *
˘x
, 
EVP_MD_CTX
 *
m˘x
),

2096 (**
psign˘x
Ë(
EVP_PKEY_CTX
 *
˘x
, *
sig
, 
size_t
 *
sigÀn
,

2097 
EVP_MD_CTX
 *
m˘x
));

2098 
OSSL_DEPRECATEDIN_3_0
 
EVP_PKEY_mëh_gë_vîify˘x


2099 (c⁄° 
EVP_PKEY_METHOD
 *
pmëh
,

2100 (**
pvîify˘x_öô
Ë(
EVP_PKEY_CTX
 *
˘x
, 
EVP_MD_CTX
 *
m˘x
),

2101 (**
pvîify˘x
Ë(
EVP_PKEY_CTX
 *
˘x
, c⁄° *
sig
,

2102 
sigÀn
, 
EVP_MD_CTX
 *
m˘x
));

2103 
OSSL_DEPRECATEDIN_3_0
 
EVP_PKEY_mëh_gë_í¸y±


2104 (c⁄° 
EVP_PKEY_METHOD
 *
pmëh
, (**
≥n¸y±_öô
Ë(
EVP_PKEY_CTX
 *
˘x
),

2105 (**
≥n¸y±‚
Ë(
EVP_PKEY_CTX
 *
˘x
, *
out
, 
size_t
 *
ouéí
,

2106 c⁄° *
ö
, 
size_t
 
öÀn
));

2107 
OSSL_DEPRECATEDIN_3_0
 
EVP_PKEY_mëh_gë_de¸y±


2108 (c⁄° 
EVP_PKEY_METHOD
 *
pmëh
, (**
pde¸y±_öô
Ë(
EVP_PKEY_CTX
 *
˘x
),

2109 (**
pde¸y±
Ë(
EVP_PKEY_CTX
 *
˘x
, *
out
, 
size_t
 *
ouéí
,

2110 c⁄° *
ö
, 
size_t
 
öÀn
));

2111 
OSSL_DEPRECATEDIN_3_0
 
EVP_PKEY_mëh_gë_dîive


2112 (c⁄° 
EVP_PKEY_METHOD
 *
pmëh
, (**
pdîive_öô
Ë(
EVP_PKEY_CTX
 *
˘x
),

2113 (**
pdîive
Ë(
EVP_PKEY_CTX
 *
˘x
, *
key
, 
size_t
 *
keyÀn
));

2114 
OSSL_DEPRECATEDIN_3_0
 
EVP_PKEY_mëh_gë_˘æ


2115 (c⁄° 
EVP_PKEY_METHOD
 *
pmëh
,

2116 (**
p˘æ
Ë(
EVP_PKEY_CTX
 *
˘x
, 
ty≥
, 
p1
, *
p2
),

2117 (**
p˘æ_°r
Ë(
EVP_PKEY_CTX
 *
˘x
, c⁄° *
ty≥
,

2118 c⁄° *
vÆue
));

2119 
OSSL_DEPRECATEDIN_3_0
 
EVP_PKEY_mëh_gë_dige°sign


2120 (c⁄° 
EVP_PKEY_METHOD
 *
pmëh
,

2121 (**
dige°sign
Ë(
EVP_MD_CTX
 *
˘x
, *
sig
, 
size_t
 *
sigÀn
,

2122 c⁄° *
tbs
, 
size_t
 
tb¶í
));

2123 
OSSL_DEPRECATEDIN_3_0
 
EVP_PKEY_mëh_gë_dige°vîify


2124 (c⁄° 
EVP_PKEY_METHOD
 *
pmëh
,

2125 (**
dige°vîify
Ë(
EVP_MD_CTX
 *
˘x
, c⁄° *
sig
,

2126 
size_t
 
sigÀn
, c⁄° *
tbs
,

2127 
size_t
 
tb¶í
));

2128 
OSSL_DEPRECATEDIN_3_0
 
EVP_PKEY_mëh_gë_check


2129 (c⁄° 
EVP_PKEY_METHOD
 *
pmëh
, (**
pcheck
Ë(
EVP_PKEY
 *
pkey
));

2130 
OSSL_DEPRECATEDIN_3_0
 
EVP_PKEY_mëh_gë_public_check


2131 (c⁄° 
EVP_PKEY_METHOD
 *
pmëh
, (**
pcheck
Ë(
EVP_PKEY
 *
pkey
));

2132 
OSSL_DEPRECATEDIN_3_0
 
EVP_PKEY_mëh_gë_∑øm_check


2133 (c⁄° 
EVP_PKEY_METHOD
 *
pmëh
, (**
pcheck
Ë(
EVP_PKEY
 *
pkey
));

2134 
OSSL_DEPRECATEDIN_3_0
 
EVP_PKEY_mëh_gë_dige°_cu°om


2135 (c⁄° 
EVP_PKEY_METHOD
 *
pmëh
,

2136 (**
pdige°_cu°om
Ë(
EVP_PKEY_CTX
 *
˘x
, 
EVP_MD_CTX
 *
m˘x
));

2139 
EVP_KEYEXCH_‰ì
(
EVP_KEYEXCH
 *
exch™ge
);

2140 
EVP_KEYEXCH_up_ªf
(
EVP_KEYEXCH
 *
exch™ge
);

2141 
EVP_KEYEXCH
 *
EVP_KEYEXCH_„tch
(
OSSL_LIB_CTX
 *
˘x
, c⁄° *
Æg‹ôhm
,

2142 c⁄° *
¥›îtõs
);

2143 
OSSL_PROVIDER
 *
EVP_KEYEXCH_gë0_¥ovidî
(c⁄° 
EVP_KEYEXCH
 *
exch™ge
);

2144 
EVP_KEYEXCH_is_a
(c⁄° 
EVP_KEYEXCH
 *
keyexch
, c⁄° *
«me
);

2145 c⁄° *
EVP_KEYEXCH_gë0_«me
(c⁄° 
EVP_KEYEXCH
 *
keyexch
);

2146 c⁄° *
EVP_KEYEXCH_gë0_des¸ùti⁄
(c⁄° 
EVP_KEYEXCH
 *
keyexch
);

2147 
EVP_KEYEXCH_do_Æl_¥ovided
(
OSSL_LIB_CTX
 *
lib˘x
,

2148 (*
‚
)(
EVP_KEYEXCH
 *
keyexch
, *
d©a
),

2149 *
d©a
);

2150 
EVP_KEYEXCH_«mes_do_Æl
(c⁄° 
EVP_KEYEXCH
 *
keyexch
,

2151 (*
‚
)(c⁄° *
«me
, *
d©a
),

2152 *
d©a
);

2153 c⁄° 
OSSL_PARAM
 *
EVP_KEYEXCH_gëèbÀ_˘x_∑øms
(c⁄° 
EVP_KEYEXCH
 *
keyexch
);

2154 c⁄° 
OSSL_PARAM
 *
EVP_KEYEXCH_£âabÀ_˘x_∑øms
(c⁄° 
EVP_KEYEXCH
 *
keyexch
);

2156 
EVP_add_Æg_moduÀ
();

2158 
EVP_PKEY_CTX_£t_group_«me
(
EVP_PKEY_CTX
 *
˘x
, c⁄° *
«me
);

2159 
EVP_PKEY_CTX_gë_group_«me
(
EVP_PKEY_CTX
 *
˘x
, *
«me
, 
size_t
 
«mñí
);

2160 
EVP_PKEY_gë_group_«me
(c⁄° 
EVP_PKEY
 *
pkey
, *
«me
, 
size_t
 
«me_sz
,

2161 
size_t
 *
g«me_Àn
);

2163 
OSSL_LIB_CTX
 *
EVP_PKEY_CTX_gë0_lib˘x
(
EVP_PKEY_CTX
 *
˘x
);

2164 c⁄° *
EVP_PKEY_CTX_gë0_¥›q
(c⁄° 
EVP_PKEY_CTX
 *
˘x
);

2165 c⁄° 
OSSL_PROVIDER
 *
EVP_PKEY_CTX_gë0_¥ovidî
(c⁄° 
EVP_PKEY_CTX
 *
˘x
);

2167 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/hmac.h

10 #i‚de‡
OPENSSL_HMAC_H


11 
	#OPENSSL_HMAC_H


	)

12 #¥agm®
⁄˚


14 
	~<›ís¶/ma¸os.h
>

15 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


16 
	#HEADER_HMAC_H


	)

19 
	~<›ís¶/›ís¶c⁄f.h
>

21 
	~<›ís¶/evp.h
>

23 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


24 
	#HMAC_MAX_MD_CBLOCK
 200

	)

27 #ifde‡ 
__˝lu•lus


31 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


32 
OSSL_DEPRECATEDIN_3_0
 
size_t
 
HMAC_size
(c⁄° 
HMAC_CTX
 *
e
);

33 
OSSL_DEPRECATEDIN_3_0
 
HMAC_CTX
 *
HMAC_CTX_√w
();

34 
OSSL_DEPRECATEDIN_3_0
 
HMAC_CTX_ª£t
(
HMAC_CTX
 *
˘x
);

35 
OSSL_DEPRECATEDIN_3_0
 
HMAC_CTX_‰ì
(
HMAC_CTX
 *
˘x
);

37 #i‚de‡
OPENSSL_NO_DEPRECATED_1_1_0


38 
OSSL_DEPRECATEDIN_1_1_0
 
__owur
 
HMAC_Inô
(
HMAC_CTX
 *
˘x
,

39 c⁄° *
key
, 
Àn
,

40 c⁄° 
EVP_MD
 *
md
);

42 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


43 
OSSL_DEPRECATEDIN_3_0
 
HMAC_Inô_ex
(
HMAC_CTX
 *
˘x
, c⁄° *
key
, 
Àn
,

44 c⁄° 
EVP_MD
 *
md
, 
ENGINE
 *
im∂
);

45 
OSSL_DEPRECATEDIN_3_0
 
HMAC_Upd©e
(
HMAC_CTX
 *
˘x
, c⁄° *
d©a
,

46 
size_t
 
Àn
);

47 
OSSL_DEPRECATEDIN_3_0
 
HMAC_FöÆ
(
HMAC_CTX
 *
˘x
, *
md
,

48 *
Àn
);

49 
OSSL_DEPRECATEDIN_3_0
 
__owur
 
HMAC_CTX_c›y
(
HMAC_CTX
 *
d˘x
, HMAC_CTX *
s˘x
);

50 
OSSL_DEPRECATEDIN_3_0
 
HMAC_CTX_£t_Êags
(
HMAC_CTX
 *
˘x
, 
Êags
);

51 
OSSL_DEPRECATEDIN_3_0
 c⁄° 
EVP_MD
 *
HMAC_CTX_gë_md
(c⁄° 
HMAC_CTX
 *
˘x
);

54 *
HMAC
(c⁄° 
EVP_MD
 *
evp_md
, c⁄° *
key
, 
key_Àn
,

55 c⁄° *
d©a
, 
size_t
 
d©a_Àn
,

56 *
md
, *
md_Àn
);

58 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/lhash.h

16 #i‚de‡
OPENSSL_LHASH_H


17 
	#OPENSSL_LHASH_H


	)

18 #¥agm®
⁄˚


20 
	~<›ís¶/ma¸os.h
>

21 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


22 
	#HEADER_LHASH_H


	)

25 
	~<›ís¶/e_os2.h
>

26 
	~<›ís¶/bio.h
>

28 #ifde‡ 
__˝lu•lus


32 
lhash_node_°
 
	tOPENSSL_LH_NODE
;

33 (*
OPENSSL_LH_COMPFUNC
) (const *, const *);

34 (*
	tOPENSSL_LH_HASHFUNC
) (const *);

35 (*
OPENSSL_LH_DOALL_FUNC
) (*);

36 (*
OPENSSL_LH_DOALL_FUNCARG
) (*, *);

37 
lhash_°
 
	tOPENSSL_LHASH
;

49 
	#DECLARE_LHASH_HASH_FN
(
«me
, 
o_ty≥
) \

50 
«me
##
	`_LHASH_HASH
(c⁄° *);

	)

51 
	#IMPLEMENT_LHASH_HASH_FN
(
«me
, 
o_ty≥
) \

52 
«me
##
	`_LHASH_HASH
(c⁄° *
¨g
) { \

53 c⁄° 
o_ty≥
 *
a
 = 
¨g
; \

54  
«me
##
	`_hash
(
a
); }

	)

55 
	#LHASH_HASH_FN
(
«me
Ë«me##
_LHASH_HASH


	)

58 
	#DECLARE_LHASH_COMP_FN
(
«me
, 
o_ty≥
) \

59 
«me
##
	`_LHASH_COMP
(c⁄° *, c⁄° *);

	)

60 
	#IMPLEMENT_LHASH_COMP_FN
(
«me
, 
o_ty≥
) \

61 
«me
##
	`_LHASH_COMP
(c⁄° *
¨g1
, c⁄° *
¨g2
) { \

62 c⁄° 
o_ty≥
 *
a
 = 
¨g1
; \

63 c⁄° 
o_ty≥
 *
b
 = 
¨g2
; \

64  
«me
##
	`_cmp
(
a
,
b
); }

	)

65 
	#LHASH_COMP_FN
(
«me
Ë«me##
_LHASH_COMP


	)

68 
	#DECLARE_LHASH_DOALL_ARG_FN
(
«me
, 
o_ty≥
, 
a_ty≥
) \

69 
«me
##
	`_LHASH_DOALL_ARG
(*, *);

	)

70 
	#IMPLEMENT_LHASH_DOALL_ARG_FN
(
«me
, 
o_ty≥
, 
a_ty≥
) \

71 
«me
##
	`_LHASH_DOALL_ARG
(*
¨g1
, *
¨g2
) { \

72 
o_ty≥
 *
a
 = 
¨g1
; \

73 
a_ty≥
 *
b
 = 
¨g2
; \

74 
«me
##
	`_dﬂŒ_¨g
(
a
, 
b
); }

	)

75 
	#LHASH_DOALL_ARG_FN
(
«me
Ë«me##
_LHASH_DOALL_ARG


	)

78 
	#LH_LOAD_MULT
 256

	)

80 
OPENSSL_LH_îr‹
(
OPENSSL_LHASH
 *
lh
);

81 
OPENSSL_LHASH
 *
OPENSSL_LH_√w
(
OPENSSL_LH_HASHFUNC
 
h
, 
OPENSSL_LH_COMPFUNC
 
c
);

82 
OPENSSL_LH_‰ì
(
OPENSSL_LHASH
 *
lh
);

83 
OPENSSL_LH_Êush
(
OPENSSL_LHASH
 *
lh
);

84 *
OPENSSL_LH_ö£π
(
OPENSSL_LHASH
 *
lh
, *
d©a
);

85 *
OPENSSL_LH_dñëe
(
OPENSSL_LHASH
 *
lh
, c⁄° *
d©a
);

86 *
OPENSSL_LH_ªåõve
(
OPENSSL_LHASH
 *
lh
, c⁄° *
d©a
);

87 
OPENSSL_LH_dﬂŒ
(
OPENSSL_LHASH
 *
lh
, 
OPENSSL_LH_DOALL_FUNC
 
func
);

88 
OPENSSL_LH_dﬂŒ_¨g
(
OPENSSL_LHASH
 *
lh
, 
OPENSSL_LH_DOALL_FUNCARG
 
func
, *
¨g
);

89 
OPENSSL_LH_°rhash
(c⁄° *
c
);

90 
OPENSSL_LH_num_ôems
(c⁄° 
OPENSSL_LHASH
 *
lh
);

91 
OPENSSL_LH_gë_down_lﬂd
(c⁄° 
OPENSSL_LHASH
 *
lh
);

92 
OPENSSL_LH_£t_down_lﬂd
(
OPENSSL_LHASH
 *
lh
, 
down_lﬂd
);

94 #i‚de‡
OPENSSL_NO_STDIO


95 
OPENSSL_LH_°©s
(c⁄° 
OPENSSL_LHASH
 *
lh
, 
FILE
 *
Â
);

96 
OPENSSL_LH_node_°©s
(c⁄° 
OPENSSL_LHASH
 *
lh
, 
FILE
 *
Â
);

97 
OPENSSL_LH_node_ußge_°©s
(c⁄° 
OPENSSL_LHASH
 *
lh
, 
FILE
 *
Â
);

99 
OPENSSL_LH_°©s_bio
(c⁄° 
OPENSSL_LHASH
 *
lh
, 
BIO
 *
out
);

100 
OPENSSL_LH_node_°©s_bio
(c⁄° 
OPENSSL_LHASH
 *
lh
, 
BIO
 *
out
);

101 
OPENSSL_LH_node_ußge_°©s_bio
(c⁄° 
OPENSSL_LHASH
 *
lh
, 
BIO
 *
out
);

103 #i‚de‡
OPENSSL_NO_DEPRECATED_1_1_0


104 
	#_LHASH
 
OPENSSL_LHASH


	)

105 
	#LHASH_NODE
 
OPENSSL_LH_NODE


	)

106 
	#lh_îr‹
 
OPENSSL_LH_îr‹


	)

107 
	#lh_√w
 
OPENSSL_LH_√w


	)

108 
	#lh_‰ì
 
OPENSSL_LH_‰ì


	)

109 
	#lh_ö£π
 
OPENSSL_LH_ö£π


	)

110 
	#lh_dñëe
 
OPENSSL_LH_dñëe


	)

111 
	#lh_ªåõve
 
OPENSSL_LH_ªåõve


	)

112 
	#lh_dﬂŒ
 
OPENSSL_LH_dﬂŒ


	)

113 
	#lh_dﬂŒ_¨g
 
OPENSSL_LH_dﬂŒ_¨g


	)

114 
	#lh_°rhash
 
OPENSSL_LH_°rhash


	)

115 
	#lh_num_ôems
 
OPENSSL_LH_num_ôems


	)

116 #i‚de‡
OPENSSL_NO_STDIO


117 
	#lh_°©s
 
OPENSSL_LH_°©s


	)

118 
	#lh_node_°©s
 
OPENSSL_LH_node_°©s


	)

119 
	#lh_node_ußge_°©s
 
OPENSSL_LH_node_ußge_°©s


	)

121 
	#lh_°©s_bio
 
OPENSSL_LH_°©s_bio


	)

122 
	#lh_node_°©s_bio
 
OPENSSL_LH_node_°©s_bio


	)

123 
	#lh_node_ußge_°©s_bio
 
OPENSSL_LH_node_ußge_°©s_bio


	)

128 
	#LHASH_OF
(
ty≥
Ë
lhash_°_
##
	)
type

131 
	#DEFINE_LHASH_OF_INTERNAL
(
ty≥
) \

132 
	`LHASH_OF
(
ty≥
Ë{ 
lh_
##ty≥##
_dummy
 { * 
d1
; 
d2
; 
d3
; } 
dummy
; }; \

133 (*
	tlh_
##
	tty≥
##
	t_compfunc
)(c⁄°Åy≥ *
	ta
, c⁄°Åy≥ *
	tb
); \

134 (*
	tlh_
##
	tty≥
##
	t_hashfunc
)(c⁄°Åy≥ *
	ta
); \

135 (*
	tlh_
##
	tty≥
##
	t_dﬂŒfunc
)—y≥ *
	ta
); \

136 
os¶_unu£d
 
os¶_ölöe
 
ty≥
 *
os¶_check_
##ty≥##
	`_lh_∂aö_ty≥
—y≥ *
±r
) \

138  
±r
; \

140 
os¶_unu£d
 
os¶_ölöe
 c⁄° 
ty≥
 *
os¶_check_c⁄°_
##ty≥##
	`_lh_∂aö_ty≥
(c⁄°Åy≥ *
±r
) \

142  
±r
; \

144 
os¶_unu£d
 
os¶_ölöe
 c⁄° 
OPENSSL_LHASH
 *
os¶_check_c⁄°_
##
ty≥
##
	`_lh_ty≥
(c⁄° 
	`LHASH_OF
—y≥Ë*
lh
) \

146  (c⁄° 
OPENSSL_LHASH
 *)
lh
; \

148 
os¶_unu£d
 
os¶_ölöe
 
OPENSSL_LHASH
 *
os¶_check_
##
ty≥
##
	`_lh_ty≥
(
	`LHASH_OF
—y≥Ë*
lh
) \

150  (
OPENSSL_LHASH
 *)
lh
; \

152 
os¶_unu£d
 
os¶_ölöe
 
OPENSSL_LH_COMPFUNC
 
os¶_check_
##
ty≥
##
	`_lh_compfunc_ty≥
(
lh_
##ty≥##
_compfunc
 
cmp
) \

154  (
OPENSSL_LH_COMPFUNC
)
cmp
; \

156 
os¶_unu£d
 
os¶_ölöe
 
OPENSSL_LH_HASHFUNC
 
os¶_check_
##
ty≥
##
	`_lh_hashfunc_ty≥
(
lh_
##ty≥##
_hashfunc
 
h‚
) \

158  (
OPENSSL_LH_HASHFUNC
)
h‚
; \

160 
os¶_unu£d
 
os¶_ölöe
 
OPENSSL_LH_DOALL_FUNC
 
os¶_check_
##
ty≥
##
	`_lh_dﬂŒfunc_ty≥
(
lh_
##ty≥##
_dﬂŒfunc
 
d‚
) \

162  (
OPENSSL_LH_DOALL_FUNC
)
d‚
; \

164 
	`LHASH_OF
(
ty≥
)

	)

166 
	#DEFINE_LHASH_OF
(
ty≥
) \

167 
	`LHASH_OF
(
ty≥
Ë{ 
lh_
##ty≥##
_dummy
 { * 
d1
; 
d2
; 
d3
; } 
dummy
; }; \

168 
os¶_unu£d
 
os¶_ölöe
 
	`LHASH_OF
(
ty≥
Ë*
lh_
##ty≥##
	`_√w
((*
h‚
)(constÅype *), \

169 (*
c‚
)(c⁄° 
ty≥
 *, constÅype *)) \

171  (
	`LHASH_OF
(
ty≥
) *) \

172 
	`OPENSSL_LH_√w
((
OPENSSL_LH_HASHFUNC
)
h‚
, (
OPENSSL_LH_COMPFUNC
)
c‚
); \

174 
os¶_unu£d
 
os¶_ölöe
 
lh_
##
ty≥
##
	`_‰ì
(
	`LHASH_OF
—y≥Ë*
lh
) \

176 
	`OPENSSL_LH_‰ì
((
OPENSSL_LHASH
 *)
lh
); \

178 
os¶_unu£d
 
os¶_ölöe
 
lh_
##
ty≥
##
	`_Êush
(
	`LHASH_OF
—y≥Ë*
lh
) \

180 
	`OPENSSL_LH_Êush
((
OPENSSL_LHASH
 *)
lh
); \

182 
os¶_unu£d
 
os¶_ölöe
 
ty≥
 *
lh_
##ty≥##
	`_ö£π
(
	`LHASH_OF
—y≥Ë*
lh
,Åy≥ *
d
) \

184  (
ty≥
 *)
	`OPENSSL_LH_ö£π
((
OPENSSL_LHASH
 *)
lh
, 
d
); \

186 
os¶_unu£d
 
os¶_ölöe
 
ty≥
 *
lh_
##ty≥##
	`_dñëe
(
	`LHASH_OF
—y≥Ë*
lh
, c⁄°Åy≥ *
d
) \

188  (
ty≥
 *)
	`OPENSSL_LH_dñëe
((
OPENSSL_LHASH
 *)
lh
, 
d
); \

190 
os¶_unu£d
 
os¶_ölöe
 
ty≥
 *
lh_
##ty≥##
	`_ªåõve
(
	`LHASH_OF
—y≥Ë*
lh
, c⁄°Åy≥ *
d
) \

192  (
ty≥
 *)
	`OPENSSL_LH_ªåõve
((
OPENSSL_LHASH
 *)
lh
, 
d
); \

194 
os¶_unu£d
 
os¶_ölöe
 
lh_
##
ty≥
##
	`_îr‹
(
	`LHASH_OF
—y≥Ë*
lh
) \

196  
	`OPENSSL_LH_îr‹
((
OPENSSL_LHASH
 *)
lh
); \

198 
os¶_unu£d
 
os¶_ölöe
 
lh_
##
ty≥
##
	`_num_ôems
(
	`LHASH_OF
—y≥Ë*
lh
) \

200  
	`OPENSSL_LH_num_ôems
((
OPENSSL_LHASH
 *)
lh
); \

202 
os¶_unu£d
 
os¶_ölöe
 
lh_
##
ty≥
##
	`_node_°©s_bio
(c⁄° 
	`LHASH_OF
—y≥Ë*
lh
, 
BIO
 *
out
) \

204 
	`OPENSSL_LH_node_°©s_bio
((c⁄° 
OPENSSL_LHASH
 *)
lh
, 
out
); \

206 
os¶_unu£d
 
os¶_ölöe
 
lh_
##
ty≥
##
	`_node_ußge_°©s_bio
(c⁄° 
	`LHASH_OF
—y≥Ë*
lh
, 
BIO
 *
out
) \

208 
	`OPENSSL_LH_node_ußge_°©s_bio
((c⁄° 
OPENSSL_LHASH
 *)
lh
, 
out
); \

210 
os¶_unu£d
 
os¶_ölöe
 
lh_
##
ty≥
##
	`_°©s_bio
(c⁄° 
	`LHASH_OF
—y≥Ë*
lh
, 
BIO
 *
out
) \

212 
	`OPENSSL_LH_°©s_bio
((c⁄° 
OPENSSL_LHASH
 *)
lh
, 
out
); \

214 
os¶_unu£d
 
os¶_ölöe
 
lh_
##
ty≥
##
	`_gë_down_lﬂd
(
	`LHASH_OF
—y≥Ë*
lh
) \

216  
	`OPENSSL_LH_gë_down_lﬂd
((
OPENSSL_LHASH
 *)
lh
); \

218 
os¶_unu£d
 
os¶_ölöe
 
lh_
##
ty≥
##
	`_£t_down_lﬂd
(
	`LHASH_OF
—y≥Ë*
lh
, 
dl
) \

220 
	`OPENSSL_LH_£t_down_lﬂd
((
OPENSSL_LHASH
 *)
lh
, 
dl
); \

222 
os¶_unu£d
 
os¶_ölöe
 
lh_
##
ty≥
##
	`_dﬂŒ
(
	`LHASH_OF
—y≥Ë*
lh
, \

223 (*
dﬂŒ
)(
ty≥
 *)) \

225 
	`OPENSSL_LH_dﬂŒ
((
OPENSSL_LHASH
 *)
lh
, (
OPENSSL_LH_DOALL_FUNC
)
dﬂŒ
); \

227 
os¶_unu£d
 
os¶_ölöe
 
lh_
##
ty≥
##
	`_dﬂŒ_¨g
(
	`LHASH_OF
—y≥Ë*
lh
, \

228 (*
dﬂŒ¨g
)(
ty≥
 *, *), \

229 *
¨g
) \

231 
	`OPENSSL_LH_dﬂŒ_¨g
((
OPENSSL_LHASH
 *)
lh
, \

232 (
OPENSSL_LH_DOALL_FUNCARG
)
dﬂŒ¨g
, 
¨g
); \

234 
	`LHASH_OF
(
ty≥
)

	)

236 
	#IMPLEMENT_LHASH_DOALL_ARG_CONST
(
ty≥
, 
¨gty≥
) \

237 
	`öt_im∂emít_lhash_dﬂŒ
(
ty≥
, 
¨gty≥
, c⁄°Åy≥)

	)

239 
	#IMPLEMENT_LHASH_DOALL_ARG
(
ty≥
, 
¨gty≥
) \

240 
	`öt_im∂emít_lhash_dﬂŒ
(
ty≥
, 
¨gty≥
,Åy≥)

	)

242 
	#öt_im∂emít_lhash_dﬂŒ
(
ty≥
, 
¨gty≥
, 
cb¨gty≥
) \

243 
os¶_unu£d
 
os¶_ölöe
 \

244 
lh_
##
ty≥
##
_dﬂŒ_
##
	`¨gty≥
(
	`LHASH_OF
—y≥Ë*
lh
, \

245 (*
‚
)(
cb¨gty≥
 *, 
¨gty≥
 *), \

246 
¨gty≥
 *
¨g
) \

248 
	`OPENSSL_LH_dﬂŒ_¨g
((
OPENSSL_LHASH
 *)
lh
, (
OPENSSL_LH_DOALL_FUNCARG
)
‚
, (*)
¨g
); \

250 
	`LHASH_OF
(
ty≥
)

	)

252 
DEFINE_LHASH_OF_INTERNAL
(
OPENSSL_STRING
);

253 
	#lh_OPENSSL_STRING_√w
(
h‚
, 
cmp
Ë((
	`LHASH_OF
(
OPENSSL_STRING
Ë*)
	`OPENSSL_LH_√w
(
	`os¶_check_OPENSSL_STRING_lh_hashfunc_ty≥
(h‚), 
	`os¶_check_OPENSSL_STRING_lh_compfunc_ty≥
(cmp)))

	)

254 
	#lh_OPENSSL_STRING_‰ì
(
lh
Ë
	`OPENSSL_LH_‰ì
(
	`os¶_check_OPENSSL_STRING_lh_ty≥
÷h))

	)

255 
	#lh_OPENSSL_STRING_Êush
(
lh
Ë
	`OPENSSL_LH_Êush
(
	`os¶_check_OPENSSL_STRING_lh_ty≥
÷h))

	)

256 
	#lh_OPENSSL_STRING_ö£π
(
lh
, 
±r
Ë((
OPENSSL_STRING
 *)
	`OPENSSL_LH_ö£π
(
	`os¶_check_OPENSSL_STRING_lh_ty≥
÷h), 
	`os¶_check_OPENSSL_STRING_lh_∂aö_ty≥
’å)))

	)

257 
	#lh_OPENSSL_STRING_dñëe
(
lh
, 
±r
Ë((
OPENSSL_STRING
 *)
	`OPENSSL_LH_dñëe
(
	`os¶_check_OPENSSL_STRING_lh_ty≥
÷h), 
	`os¶_check_c⁄°_OPENSSL_STRING_lh_∂aö_ty≥
’å)))

	)

258 
	#lh_OPENSSL_STRING_ªåõve
(
lh
, 
±r
Ë((
OPENSSL_STRING
 *)
	`OPENSSL_LH_ªåõve
(
	`os¶_check_OPENSSL_STRING_lh_ty≥
÷h), 
	`os¶_check_c⁄°_OPENSSL_STRING_lh_∂aö_ty≥
’å)))

	)

259 
	#lh_OPENSSL_STRING_îr‹
(
lh
Ë
	`OPENSSL_LH_îr‹
(
	`os¶_check_OPENSSL_STRING_lh_ty≥
÷h))

	)

260 
	#lh_OPENSSL_STRING_num_ôems
(
lh
Ë
	`OPENSSL_LH_num_ôems
(
	`os¶_check_OPENSSL_STRING_lh_ty≥
÷h))

	)

261 
	#lh_OPENSSL_STRING_node_°©s_bio
(
lh
, 
out
Ë
	`OPENSSL_LH_node_°©s_bio
(
	`os¶_check_c⁄°_OPENSSL_STRING_lh_ty≥
÷h), out)

	)

262 
	#lh_OPENSSL_STRING_node_ußge_°©s_bio
(
lh
, 
out
Ë
	`OPENSSL_LH_node_ußge_°©s_bio
(
	`os¶_check_c⁄°_OPENSSL_STRING_lh_ty≥
÷h), out)

	)

263 
	#lh_OPENSSL_STRING_°©s_bio
(
lh
, 
out
Ë
	`OPENSSL_LH_°©s_bio
(
	`os¶_check_c⁄°_OPENSSL_STRING_lh_ty≥
÷h), out)

	)

264 
	#lh_OPENSSL_STRING_gë_down_lﬂd
(
lh
Ë
	`OPENSSL_LH_gë_down_lﬂd
(
	`os¶_check_OPENSSL_STRING_lh_ty≥
÷h))

	)

265 
	#lh_OPENSSL_STRING_£t_down_lﬂd
(
lh
, 
dl
Ë
	`OPENSSL_LH_£t_down_lﬂd
(
	`os¶_check_OPENSSL_STRING_lh_ty≥
÷h), dl)

	)

266 
	#lh_OPENSSL_STRING_dﬂŒ
(
lh
, 
d‚
Ë
	`OPENSSL_LH_dﬂŒ
(
	`os¶_check_OPENSSL_STRING_lh_ty≥
÷h), 
	`os¶_check_OPENSSL_STRING_lh_dﬂŒfunc_ty≥
(d‚))

	)

267 
DEFINE_LHASH_OF_INTERNAL
(
OPENSSL_CSTRING
);

268 
	#lh_OPENSSL_CSTRING_√w
(
h‚
, 
cmp
Ë((
	`LHASH_OF
(
OPENSSL_CSTRING
Ë*)
	`OPENSSL_LH_√w
(
	`os¶_check_OPENSSL_CSTRING_lh_hashfunc_ty≥
(h‚), 
	`os¶_check_OPENSSL_CSTRING_lh_compfunc_ty≥
(cmp)))

	)

269 
	#lh_OPENSSL_CSTRING_‰ì
(
lh
Ë
	`OPENSSL_LH_‰ì
(
	`os¶_check_OPENSSL_CSTRING_lh_ty≥
÷h))

	)

270 
	#lh_OPENSSL_CSTRING_Êush
(
lh
Ë
	`OPENSSL_LH_Êush
(
	`os¶_check_OPENSSL_CSTRING_lh_ty≥
÷h))

	)

271 
	#lh_OPENSSL_CSTRING_ö£π
(
lh
, 
±r
Ë((
OPENSSL_CSTRING
 *)
	`OPENSSL_LH_ö£π
(
	`os¶_check_OPENSSL_CSTRING_lh_ty≥
÷h), 
	`os¶_check_OPENSSL_CSTRING_lh_∂aö_ty≥
’å)))

	)

272 
	#lh_OPENSSL_CSTRING_dñëe
(
lh
, 
±r
Ë((
OPENSSL_CSTRING
 *)
	`OPENSSL_LH_dñëe
(
	`os¶_check_OPENSSL_CSTRING_lh_ty≥
÷h), 
	`os¶_check_c⁄°_OPENSSL_CSTRING_lh_∂aö_ty≥
’å)))

	)

273 
	#lh_OPENSSL_CSTRING_ªåõve
(
lh
, 
±r
Ë((
OPENSSL_CSTRING
 *)
	`OPENSSL_LH_ªåõve
(
	`os¶_check_OPENSSL_CSTRING_lh_ty≥
÷h), 
	`os¶_check_c⁄°_OPENSSL_CSTRING_lh_∂aö_ty≥
’å)))

	)

274 
	#lh_OPENSSL_CSTRING_îr‹
(
lh
Ë
	`OPENSSL_LH_îr‹
(
	`os¶_check_OPENSSL_CSTRING_lh_ty≥
÷h))

	)

275 
	#lh_OPENSSL_CSTRING_num_ôems
(
lh
Ë
	`OPENSSL_LH_num_ôems
(
	`os¶_check_OPENSSL_CSTRING_lh_ty≥
÷h))

	)

276 
	#lh_OPENSSL_CSTRING_node_°©s_bio
(
lh
, 
out
Ë
	`OPENSSL_LH_node_°©s_bio
(
	`os¶_check_c⁄°_OPENSSL_CSTRING_lh_ty≥
÷h), out)

	)

277 
	#lh_OPENSSL_CSTRING_node_ußge_°©s_bio
(
lh
, 
out
Ë
	`OPENSSL_LH_node_ußge_°©s_bio
(
	`os¶_check_c⁄°_OPENSSL_CSTRING_lh_ty≥
÷h), out)

	)

278 
	#lh_OPENSSL_CSTRING_°©s_bio
(
lh
, 
out
Ë
	`OPENSSL_LH_°©s_bio
(
	`os¶_check_c⁄°_OPENSSL_CSTRING_lh_ty≥
÷h), out)

	)

279 
	#lh_OPENSSL_CSTRING_gë_down_lﬂd
(
lh
Ë
	`OPENSSL_LH_gë_down_lﬂd
(
	`os¶_check_OPENSSL_CSTRING_lh_ty≥
÷h))

	)

280 
	#lh_OPENSSL_CSTRING_£t_down_lﬂd
(
lh
, 
dl
Ë
	`OPENSSL_LH_£t_down_lﬂd
(
	`os¶_check_OPENSSL_CSTRING_lh_ty≥
÷h), dl)

	)

281 
	#lh_OPENSSL_CSTRING_dﬂŒ
(
lh
, 
d‚
Ë
	`OPENSSL_LH_dﬂŒ
(
	`os¶_check_OPENSSL_CSTRING_lh_ty≥
÷h), 
	`os¶_check_OPENSSL_CSTRING_lh_dﬂŒfunc_ty≥
(d‚))

	)

284 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/ocsp.h

15 #i‚de‡
OPENSSL_OCSP_H


16 
	#OPENSSL_OCSP_H


	)

17 #¥agm®
⁄˚


19 
	~<›ís¶/ma¸os.h
>

20 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


21 
	#HEADER_OCSP_H


	)

24 
	~<›ís¶/›ís¶c⁄f.h
>

25 
	~<›ís¶/hâp.h
>

26 
	~<›ís¶/a¢1.h
>

47 
	#OCSP_REVOKED_STATUS_NOSTATUS
 -1

	)

48 
	#OCSP_REVOKED_STATUS_UNSPECIFIED
 0

	)

49 
	#OCSP_REVOKED_STATUS_KEYCOMPROMISE
 1

	)

50 
	#OCSP_REVOKED_STATUS_CACOMPROMISE
 2

	)

51 
	#OCSP_REVOKED_STATUS_AFFILIATIONCHANGED
 3

	)

52 
	#OCSP_REVOKED_STATUS_SUPERSEDED
 4

	)

53 
	#OCSP_REVOKED_STATUS_CESSATIONOFOPERATION
 5

	)

54 
	#OCSP_REVOKED_STATUS_CERTIFICATEHOLD
 6

	)

55 
	#OCSP_REVOKED_STATUS_REMOVEFROMCRL
 8

	)

56 
	#OCSP_REVOKED_STATUS_PRIVILEGEWITHDRAWN
 9

	)

57 
	#OCSP_REVOKED_STATUS_AACOMPROMISE
 10

	)

60 #i‚de‡
OPENSSL_NO_OCSP


62 
	~<›ís¶/x509.h
>

63 
	~<›ís¶/x509v3.h
>

64 
	~<›ís¶/ß„°ack.h
>

65 
	~<›ís¶/oc•îr.h
>

67 #ifde‡
__˝lu•lus


73 
	#OCSP_DEFAULT_NONCE_LENGTH
 16

	)

75 
	#OCSP_NOCERTS
 0x1

	)

76 
	#OCSP_NOINTERN
 0x2

	)

77 
	#OCSP_NOSIGS
 0x4

	)

78 
	#OCSP_NOCHAIN
 0x8

	)

79 
	#OCSP_NOVERIFY
 0x10

	)

80 
	#OCSP_NOEXPLICIT
 0x20

	)

81 
	#OCSP_NOCASIGN
 0x40

	)

82 
	#OCSP_NODELEGATED
 0x80

	)

83 
	#OCSP_NOCHECKS
 0x100

	)

84 
	#OCSP_TRUSTOTHER
 0x200

	)

85 
	#OCSP_RESPID_KEY
 0x400

	)

86 
	#OCSP_NOTIME
 0x800

	)

87 
	#OCSP_PARTIAL_CHAIN
 0x1000

	)

89 
oc•_˚π_id_°
 
	tOCSP_CERTID
;

90 
oc•_⁄e_ªque°_°
 
	tOCSP_ONEREQ
;

91 
oc•_ªq_öfo_°
 
	tOCSP_REQINFO
;

92 
oc•_sig«tuª_°
 
	tOCSP_SIGNATURE
;

93 
oc•_ªque°_°
 
	tOCSP_REQUEST
;

95 
SKM_DEFINE_STACK_OF_INTERNAL
(
OCSP_CERTID
, OCSP_CERTID, OCSP_CERTID)

96 
	#sk_OCSP_CERTID_num
(
sk
Ë
	`OPENSSL_sk_num
(
	`os¶_check_c⁄°_OCSP_CERTID_sk_ty≥
(sk))

	)

97 
	#sk_OCSP_CERTID_vÆue
(
sk
, 
idx
Ë((
OCSP_CERTID
 *)
	`OPENSSL_sk_vÆue
(
	`os¶_check_c⁄°_OCSP_CERTID_sk_ty≥
(sk), (idx)))

	)

98 
	#sk_OCSP_CERTID_√w
(
cmp
Ë((
	`STACK_OF
(
OCSP_CERTID
Ë*)
	`OPENSSL_sk_√w
(
	`os¶_check_OCSP_CERTID_compfunc_ty≥
(cmp)))

	)

99 
	#sk_OCSP_CERTID_√w_nuŒ
(Ë((
	`STACK_OF
(
OCSP_CERTID
Ë*)
	`OPENSSL_sk_√w_nuŒ
())

	)

100 
	#sk_OCSP_CERTID_√w_ª£rve
(
cmp
, 
n
Ë((
	`STACK_OF
(
OCSP_CERTID
Ë*)
	`OPENSSL_sk_√w_ª£rve
(
	`os¶_check_OCSP_CERTID_compfunc_ty≥
(cmp), (n)))

	)

101 
	#sk_OCSP_CERTID_ª£rve
(
sk
, 
n
Ë
	`OPENSSL_sk_ª£rve
(
	`os¶_check_OCSP_CERTID_sk_ty≥
(sk), (n))

	)

102 
	#sk_OCSP_CERTID_‰ì
(
sk
Ë
	`OPENSSL_sk_‰ì
(
	`os¶_check_OCSP_CERTID_sk_ty≥
(sk))

	)

103 
	#sk_OCSP_CERTID_zîo
(
sk
Ë
	`OPENSSL_sk_zîo
(
	`os¶_check_OCSP_CERTID_sk_ty≥
(sk))

	)

104 
	#sk_OCSP_CERTID_dñëe
(
sk
, 
i
Ë((
OCSP_CERTID
 *)
	`OPENSSL_sk_dñëe
(
	`os¶_check_OCSP_CERTID_sk_ty≥
(sk), (i)))

	)

105 
	#sk_OCSP_CERTID_dñëe_±r
(
sk
, 
±r
Ë((
OCSP_CERTID
 *)
	`OPENSSL_sk_dñëe_±r
(
	`os¶_check_OCSP_CERTID_sk_ty≥
(sk), 
	`os¶_check_OCSP_CERTID_ty≥
’å)))

	)

106 
	#sk_OCSP_CERTID_push
(
sk
, 
±r
Ë
	`OPENSSL_sk_push
(
	`os¶_check_OCSP_CERTID_sk_ty≥
(sk), 
	`os¶_check_OCSP_CERTID_ty≥
’å))

	)

107 
	#sk_OCSP_CERTID_unshi·
(
sk
, 
±r
Ë
	`OPENSSL_sk_unshi·
(
	`os¶_check_OCSP_CERTID_sk_ty≥
(sk), 
	`os¶_check_OCSP_CERTID_ty≥
’å))

	)

108 
	#sk_OCSP_CERTID_p›
(
sk
Ë((
OCSP_CERTID
 *)
	`OPENSSL_sk_p›
(
	`os¶_check_OCSP_CERTID_sk_ty≥
(sk)))

	)

109 
	#sk_OCSP_CERTID_shi·
(
sk
Ë((
OCSP_CERTID
 *)
	`OPENSSL_sk_shi·
(
	`os¶_check_OCSP_CERTID_sk_ty≥
(sk)))

	)

110 
	#sk_OCSP_CERTID_p›_‰ì
(
sk
, 
‰ìfunc
Ë
	`OPENSSL_sk_p›_‰ì
(
	`os¶_check_OCSP_CERTID_sk_ty≥
(sk),
	`os¶_check_OCSP_CERTID_‰ìfunc_ty≥
(‰ìfunc))

	)

111 
	#sk_OCSP_CERTID_ö£π
(
sk
, 
±r
, 
idx
Ë
	`OPENSSL_sk_ö£π
(
	`os¶_check_OCSP_CERTID_sk_ty≥
(sk), 
	`os¶_check_OCSP_CERTID_ty≥
’å), (idx))

	)

112 
	#sk_OCSP_CERTID_£t
(
sk
, 
idx
, 
±r
Ë((
OCSP_CERTID
 *)
	`OPENSSL_sk_£t
(
	`os¶_check_OCSP_CERTID_sk_ty≥
(sk), (idx), 
	`os¶_check_OCSP_CERTID_ty≥
’å)))

	)

113 
	#sk_OCSP_CERTID_föd
(
sk
, 
±r
Ë
	`OPENSSL_sk_föd
(
	`os¶_check_OCSP_CERTID_sk_ty≥
(sk), 
	`os¶_check_OCSP_CERTID_ty≥
’å))

	)

114 
	#sk_OCSP_CERTID_föd_ex
(
sk
, 
±r
Ë
	`OPENSSL_sk_föd_ex
(
	`os¶_check_OCSP_CERTID_sk_ty≥
(sk), 
	`os¶_check_OCSP_CERTID_ty≥
’å))

	)

115 
	#sk_OCSP_CERTID_föd_Æl
(
sk
, 
±r
, 
≤um
Ë
	`OPENSSL_sk_föd_Æl
(
	`os¶_check_OCSP_CERTID_sk_ty≥
(sk), 
	`os¶_check_OCSP_CERTID_ty≥
’å),Önum)

	)

116 
	#sk_OCSP_CERTID_s‹t
(
sk
Ë
	`OPENSSL_sk_s‹t
(
	`os¶_check_OCSP_CERTID_sk_ty≥
(sk))

	)

117 
	#sk_OCSP_CERTID_is_s‹ãd
(
sk
Ë
	`OPENSSL_sk_is_s‹ãd
(
	`os¶_check_c⁄°_OCSP_CERTID_sk_ty≥
(sk))

	)

118 
	#sk_OCSP_CERTID_dup
(
sk
Ë((
	`STACK_OF
(
OCSP_CERTID
Ë*)
	`OPENSSL_sk_dup
(
	`os¶_check_c⁄°_OCSP_CERTID_sk_ty≥
(sk)))

	)

119 
	#sk_OCSP_CERTID_dìp_c›y
(
sk
, 
c›yfunc
, 
‰ìfunc
Ë((
	`STACK_OF
(
OCSP_CERTID
Ë*)
	`OPENSSL_sk_dìp_c›y
(
	`os¶_check_c⁄°_OCSP_CERTID_sk_ty≥
(sk), 
	`os¶_check_OCSP_CERTID_c›yfunc_ty≥
(c›yfunc), 
	`os¶_check_OCSP_CERTID_‰ìfunc_ty≥
(‰ìfunc)))

	)

120 
	#sk_OCSP_CERTID_£t_cmp_func
(
sk
, 
cmp
Ë((
sk_OCSP_CERTID_compfunc
)
	`OPENSSL_sk_£t_cmp_func
(
	`os¶_check_OCSP_CERTID_sk_ty≥
(sk), 
	`os¶_check_OCSP_CERTID_compfunc_ty≥
(cmp)))

	)

121 
SKM_DEFINE_STACK_OF_INTERNAL
(
OCSP_ONEREQ
, OCSP_ONEREQ, OCSP_ONEREQ)

122 
	#sk_OCSP_ONEREQ_num
(
sk
Ë
	`OPENSSL_sk_num
(
	`os¶_check_c⁄°_OCSP_ONEREQ_sk_ty≥
(sk))

	)

123 
	#sk_OCSP_ONEREQ_vÆue
(
sk
, 
idx
Ë((
OCSP_ONEREQ
 *)
	`OPENSSL_sk_vÆue
(
	`os¶_check_c⁄°_OCSP_ONEREQ_sk_ty≥
(sk), (idx)))

	)

124 
	#sk_OCSP_ONEREQ_√w
(
cmp
Ë((
	`STACK_OF
(
OCSP_ONEREQ
Ë*)
	`OPENSSL_sk_√w
(
	`os¶_check_OCSP_ONEREQ_compfunc_ty≥
(cmp)))

	)

125 
	#sk_OCSP_ONEREQ_√w_nuŒ
(Ë((
	`STACK_OF
(
OCSP_ONEREQ
Ë*)
	`OPENSSL_sk_√w_nuŒ
())

	)

126 
	#sk_OCSP_ONEREQ_√w_ª£rve
(
cmp
, 
n
Ë((
	`STACK_OF
(
OCSP_ONEREQ
Ë*)
	`OPENSSL_sk_√w_ª£rve
(
	`os¶_check_OCSP_ONEREQ_compfunc_ty≥
(cmp), (n)))

	)

127 
	#sk_OCSP_ONEREQ_ª£rve
(
sk
, 
n
Ë
	`OPENSSL_sk_ª£rve
(
	`os¶_check_OCSP_ONEREQ_sk_ty≥
(sk), (n))

	)

128 
	#sk_OCSP_ONEREQ_‰ì
(
sk
Ë
	`OPENSSL_sk_‰ì
(
	`os¶_check_OCSP_ONEREQ_sk_ty≥
(sk))

	)

129 
	#sk_OCSP_ONEREQ_zîo
(
sk
Ë
	`OPENSSL_sk_zîo
(
	`os¶_check_OCSP_ONEREQ_sk_ty≥
(sk))

	)

130 
	#sk_OCSP_ONEREQ_dñëe
(
sk
, 
i
Ë((
OCSP_ONEREQ
 *)
	`OPENSSL_sk_dñëe
(
	`os¶_check_OCSP_ONEREQ_sk_ty≥
(sk), (i)))

	)

131 
	#sk_OCSP_ONEREQ_dñëe_±r
(
sk
, 
±r
Ë((
OCSP_ONEREQ
 *)
	`OPENSSL_sk_dñëe_±r
(
	`os¶_check_OCSP_ONEREQ_sk_ty≥
(sk), 
	`os¶_check_OCSP_ONEREQ_ty≥
’å)))

	)

132 
	#sk_OCSP_ONEREQ_push
(
sk
, 
±r
Ë
	`OPENSSL_sk_push
(
	`os¶_check_OCSP_ONEREQ_sk_ty≥
(sk), 
	`os¶_check_OCSP_ONEREQ_ty≥
’å))

	)

133 
	#sk_OCSP_ONEREQ_unshi·
(
sk
, 
±r
Ë
	`OPENSSL_sk_unshi·
(
	`os¶_check_OCSP_ONEREQ_sk_ty≥
(sk), 
	`os¶_check_OCSP_ONEREQ_ty≥
’å))

	)

134 
	#sk_OCSP_ONEREQ_p›
(
sk
Ë((
OCSP_ONEREQ
 *)
	`OPENSSL_sk_p›
(
	`os¶_check_OCSP_ONEREQ_sk_ty≥
(sk)))

	)

135 
	#sk_OCSP_ONEREQ_shi·
(
sk
Ë((
OCSP_ONEREQ
 *)
	`OPENSSL_sk_shi·
(
	`os¶_check_OCSP_ONEREQ_sk_ty≥
(sk)))

	)

136 
	#sk_OCSP_ONEREQ_p›_‰ì
(
sk
, 
‰ìfunc
Ë
	`OPENSSL_sk_p›_‰ì
(
	`os¶_check_OCSP_ONEREQ_sk_ty≥
(sk),
	`os¶_check_OCSP_ONEREQ_‰ìfunc_ty≥
(‰ìfunc))

	)

137 
	#sk_OCSP_ONEREQ_ö£π
(
sk
, 
±r
, 
idx
Ë
	`OPENSSL_sk_ö£π
(
	`os¶_check_OCSP_ONEREQ_sk_ty≥
(sk), 
	`os¶_check_OCSP_ONEREQ_ty≥
’å), (idx))

	)

138 
	#sk_OCSP_ONEREQ_£t
(
sk
, 
idx
, 
±r
Ë((
OCSP_ONEREQ
 *)
	`OPENSSL_sk_£t
(
	`os¶_check_OCSP_ONEREQ_sk_ty≥
(sk), (idx), 
	`os¶_check_OCSP_ONEREQ_ty≥
’å)))

	)

139 
	#sk_OCSP_ONEREQ_föd
(
sk
, 
±r
Ë
	`OPENSSL_sk_föd
(
	`os¶_check_OCSP_ONEREQ_sk_ty≥
(sk), 
	`os¶_check_OCSP_ONEREQ_ty≥
’å))

	)

140 
	#sk_OCSP_ONEREQ_föd_ex
(
sk
, 
±r
Ë
	`OPENSSL_sk_föd_ex
(
	`os¶_check_OCSP_ONEREQ_sk_ty≥
(sk), 
	`os¶_check_OCSP_ONEREQ_ty≥
’å))

	)

141 
	#sk_OCSP_ONEREQ_föd_Æl
(
sk
, 
±r
, 
≤um
Ë
	`OPENSSL_sk_föd_Æl
(
	`os¶_check_OCSP_ONEREQ_sk_ty≥
(sk), 
	`os¶_check_OCSP_ONEREQ_ty≥
’å),Önum)

	)

142 
	#sk_OCSP_ONEREQ_s‹t
(
sk
Ë
	`OPENSSL_sk_s‹t
(
	`os¶_check_OCSP_ONEREQ_sk_ty≥
(sk))

	)

143 
	#sk_OCSP_ONEREQ_is_s‹ãd
(
sk
Ë
	`OPENSSL_sk_is_s‹ãd
(
	`os¶_check_c⁄°_OCSP_ONEREQ_sk_ty≥
(sk))

	)

144 
	#sk_OCSP_ONEREQ_dup
(
sk
Ë((
	`STACK_OF
(
OCSP_ONEREQ
Ë*)
	`OPENSSL_sk_dup
(
	`os¶_check_c⁄°_OCSP_ONEREQ_sk_ty≥
(sk)))

	)

145 
	#sk_OCSP_ONEREQ_dìp_c›y
(
sk
, 
c›yfunc
, 
‰ìfunc
Ë((
	`STACK_OF
(
OCSP_ONEREQ
Ë*)
	`OPENSSL_sk_dìp_c›y
(
	`os¶_check_c⁄°_OCSP_ONEREQ_sk_ty≥
(sk), 
	`os¶_check_OCSP_ONEREQ_c›yfunc_ty≥
(c›yfunc), 
	`os¶_check_OCSP_ONEREQ_‰ìfunc_ty≥
(‰ìfunc)))

	)

146 
	#sk_OCSP_ONEREQ_£t_cmp_func
(
sk
, 
cmp
Ë((
sk_OCSP_ONEREQ_compfunc
)
	`OPENSSL_sk_£t_cmp_func
(
	`os¶_check_OCSP_ONEREQ_sk_ty≥
(sk), 
	`os¶_check_OCSP_ONEREQ_compfunc_ty≥
(cmp)))

	)

149 
	#OCSP_RESPONSE_STATUS_SUCCESSFUL
 0

	)

150 
	#OCSP_RESPONSE_STATUS_MALFORMEDREQUEST
 1

	)

151 
	#OCSP_RESPONSE_STATUS_INTERNALERROR
 2

	)

152 
	#OCSP_RESPONSE_STATUS_TRYLATER
 3

	)

153 
	#OCSP_RESPONSE_STATUS_SIGREQUIRED
 5

	)

154 
	#OCSP_RESPONSE_STATUS_UNAUTHORIZED
 6

	)

156 
oc•_ª•_byãs_°
 
	tOCSP_RESPBYTES
;

158 
	#V_OCSP_RESPID_NAME
 0

	)

159 
	#V_OCSP_RESPID_KEY
 1

	)

161 
SKM_DEFINE_STACK_OF_INTERNAL
(
OCSP_RESPID
, OCSP_RESPID, OCSP_RESPID)

162 
	#sk_OCSP_RESPID_num
(
sk
Ë
	`OPENSSL_sk_num
(
	`os¶_check_c⁄°_OCSP_RESPID_sk_ty≥
(sk))

	)

163 
	#sk_OCSP_RESPID_vÆue
(
sk
, 
idx
Ë((
OCSP_RESPID
 *)
	`OPENSSL_sk_vÆue
(
	`os¶_check_c⁄°_OCSP_RESPID_sk_ty≥
(sk), (idx)))

	)

164 
	#sk_OCSP_RESPID_√w
(
cmp
Ë((
	`STACK_OF
(
OCSP_RESPID
Ë*)
	`OPENSSL_sk_√w
(
	`os¶_check_OCSP_RESPID_compfunc_ty≥
(cmp)))

	)

165 
	#sk_OCSP_RESPID_√w_nuŒ
(Ë((
	`STACK_OF
(
OCSP_RESPID
Ë*)
	`OPENSSL_sk_√w_nuŒ
())

	)

166 
	#sk_OCSP_RESPID_√w_ª£rve
(
cmp
, 
n
Ë((
	`STACK_OF
(
OCSP_RESPID
Ë*)
	`OPENSSL_sk_√w_ª£rve
(
	`os¶_check_OCSP_RESPID_compfunc_ty≥
(cmp), (n)))

	)

167 
	#sk_OCSP_RESPID_ª£rve
(
sk
, 
n
Ë
	`OPENSSL_sk_ª£rve
(
	`os¶_check_OCSP_RESPID_sk_ty≥
(sk), (n))

	)

168 
	#sk_OCSP_RESPID_‰ì
(
sk
Ë
	`OPENSSL_sk_‰ì
(
	`os¶_check_OCSP_RESPID_sk_ty≥
(sk))

	)

169 
	#sk_OCSP_RESPID_zîo
(
sk
Ë
	`OPENSSL_sk_zîo
(
	`os¶_check_OCSP_RESPID_sk_ty≥
(sk))

	)

170 
	#sk_OCSP_RESPID_dñëe
(
sk
, 
i
Ë((
OCSP_RESPID
 *)
	`OPENSSL_sk_dñëe
(
	`os¶_check_OCSP_RESPID_sk_ty≥
(sk), (i)))

	)

171 
	#sk_OCSP_RESPID_dñëe_±r
(
sk
, 
±r
Ë((
OCSP_RESPID
 *)
	`OPENSSL_sk_dñëe_±r
(
	`os¶_check_OCSP_RESPID_sk_ty≥
(sk), 
	`os¶_check_OCSP_RESPID_ty≥
’å)))

	)

172 
	#sk_OCSP_RESPID_push
(
sk
, 
±r
Ë
	`OPENSSL_sk_push
(
	`os¶_check_OCSP_RESPID_sk_ty≥
(sk), 
	`os¶_check_OCSP_RESPID_ty≥
’å))

	)

173 
	#sk_OCSP_RESPID_unshi·
(
sk
, 
±r
Ë
	`OPENSSL_sk_unshi·
(
	`os¶_check_OCSP_RESPID_sk_ty≥
(sk), 
	`os¶_check_OCSP_RESPID_ty≥
’å))

	)

174 
	#sk_OCSP_RESPID_p›
(
sk
Ë((
OCSP_RESPID
 *)
	`OPENSSL_sk_p›
(
	`os¶_check_OCSP_RESPID_sk_ty≥
(sk)))

	)

175 
	#sk_OCSP_RESPID_shi·
(
sk
Ë((
OCSP_RESPID
 *)
	`OPENSSL_sk_shi·
(
	`os¶_check_OCSP_RESPID_sk_ty≥
(sk)))

	)

176 
	#sk_OCSP_RESPID_p›_‰ì
(
sk
, 
‰ìfunc
Ë
	`OPENSSL_sk_p›_‰ì
(
	`os¶_check_OCSP_RESPID_sk_ty≥
(sk),
	`os¶_check_OCSP_RESPID_‰ìfunc_ty≥
(‰ìfunc))

	)

177 
	#sk_OCSP_RESPID_ö£π
(
sk
, 
±r
, 
idx
Ë
	`OPENSSL_sk_ö£π
(
	`os¶_check_OCSP_RESPID_sk_ty≥
(sk), 
	`os¶_check_OCSP_RESPID_ty≥
’å), (idx))

	)

178 
	#sk_OCSP_RESPID_£t
(
sk
, 
idx
, 
±r
Ë((
OCSP_RESPID
 *)
	`OPENSSL_sk_£t
(
	`os¶_check_OCSP_RESPID_sk_ty≥
(sk), (idx), 
	`os¶_check_OCSP_RESPID_ty≥
’å)))

	)

179 
	#sk_OCSP_RESPID_föd
(
sk
, 
±r
Ë
	`OPENSSL_sk_föd
(
	`os¶_check_OCSP_RESPID_sk_ty≥
(sk), 
	`os¶_check_OCSP_RESPID_ty≥
’å))

	)

180 
	#sk_OCSP_RESPID_föd_ex
(
sk
, 
±r
Ë
	`OPENSSL_sk_föd_ex
(
	`os¶_check_OCSP_RESPID_sk_ty≥
(sk), 
	`os¶_check_OCSP_RESPID_ty≥
’å))

	)

181 
	#sk_OCSP_RESPID_föd_Æl
(
sk
, 
±r
, 
≤um
Ë
	`OPENSSL_sk_föd_Æl
(
	`os¶_check_OCSP_RESPID_sk_ty≥
(sk), 
	`os¶_check_OCSP_RESPID_ty≥
’å),Önum)

	)

182 
	#sk_OCSP_RESPID_s‹t
(
sk
Ë
	`OPENSSL_sk_s‹t
(
	`os¶_check_OCSP_RESPID_sk_ty≥
(sk))

	)

183 
	#sk_OCSP_RESPID_is_s‹ãd
(
sk
Ë
	`OPENSSL_sk_is_s‹ãd
(
	`os¶_check_c⁄°_OCSP_RESPID_sk_ty≥
(sk))

	)

184 
	#sk_OCSP_RESPID_dup
(
sk
Ë((
	`STACK_OF
(
OCSP_RESPID
Ë*)
	`OPENSSL_sk_dup
(
	`os¶_check_c⁄°_OCSP_RESPID_sk_ty≥
(sk)))

	)

185 
	#sk_OCSP_RESPID_dìp_c›y
(
sk
, 
c›yfunc
, 
‰ìfunc
Ë((
	`STACK_OF
(
OCSP_RESPID
Ë*)
	`OPENSSL_sk_dìp_c›y
(
	`os¶_check_c⁄°_OCSP_RESPID_sk_ty≥
(sk), 
	`os¶_check_OCSP_RESPID_c›yfunc_ty≥
(c›yfunc), 
	`os¶_check_OCSP_RESPID_‰ìfunc_ty≥
(‰ìfunc)))

	)

186 
	#sk_OCSP_RESPID_£t_cmp_func
(
sk
, 
cmp
Ë((
sk_OCSP_RESPID_compfunc
)
	`OPENSSL_sk_£t_cmp_func
(
	`os¶_check_OCSP_RESPID_sk_ty≥
(sk), 
	`os¶_check_OCSP_RESPID_compfunc_ty≥
(cmp)))

	)

189 
oc•_ªvoked_öfo_°
 
	tOCSP_REVOKEDINFO
;

191 
	#V_OCSP_CERTSTATUS_GOOD
 0

	)

192 
	#V_OCSP_CERTSTATUS_REVOKED
 1

	)

193 
	#V_OCSP_CERTSTATUS_UNKNOWN
 2

	)

195 
oc•_˚π_°©us_°
 
	tOCSP_CERTSTATUS
;

196 
oc•_sögÀ_ª•⁄£_°
 
	tOCSP_SINGLERESP
;

198 
SKM_DEFINE_STACK_OF_INTERNAL
(
OCSP_SINGLERESP
, OCSP_SINGLERESP, OCSP_SINGLERESP)

199 
	#sk_OCSP_SINGLERESP_num
(
sk
Ë
	`OPENSSL_sk_num
(
	`os¶_check_c⁄°_OCSP_SINGLERESP_sk_ty≥
(sk))

	)

200 
	#sk_OCSP_SINGLERESP_vÆue
(
sk
, 
idx
Ë((
OCSP_SINGLERESP
 *)
	`OPENSSL_sk_vÆue
(
	`os¶_check_c⁄°_OCSP_SINGLERESP_sk_ty≥
(sk), (idx)))

	)

201 
	#sk_OCSP_SINGLERESP_√w
(
cmp
Ë((
	`STACK_OF
(
OCSP_SINGLERESP
Ë*)
	`OPENSSL_sk_√w
(
	`os¶_check_OCSP_SINGLERESP_compfunc_ty≥
(cmp)))

	)

202 
	#sk_OCSP_SINGLERESP_√w_nuŒ
(Ë((
	`STACK_OF
(
OCSP_SINGLERESP
Ë*)
	`OPENSSL_sk_√w_nuŒ
())

	)

203 
	#sk_OCSP_SINGLERESP_√w_ª£rve
(
cmp
, 
n
Ë((
	`STACK_OF
(
OCSP_SINGLERESP
Ë*)
	`OPENSSL_sk_√w_ª£rve
(
	`os¶_check_OCSP_SINGLERESP_compfunc_ty≥
(cmp), (n)))

	)

204 
	#sk_OCSP_SINGLERESP_ª£rve
(
sk
, 
n
Ë
	`OPENSSL_sk_ª£rve
(
	`os¶_check_OCSP_SINGLERESP_sk_ty≥
(sk), (n))

	)

205 
	#sk_OCSP_SINGLERESP_‰ì
(
sk
Ë
	`OPENSSL_sk_‰ì
(
	`os¶_check_OCSP_SINGLERESP_sk_ty≥
(sk))

	)

206 
	#sk_OCSP_SINGLERESP_zîo
(
sk
Ë
	`OPENSSL_sk_zîo
(
	`os¶_check_OCSP_SINGLERESP_sk_ty≥
(sk))

	)

207 
	#sk_OCSP_SINGLERESP_dñëe
(
sk
, 
i
Ë((
OCSP_SINGLERESP
 *)
	`OPENSSL_sk_dñëe
(
	`os¶_check_OCSP_SINGLERESP_sk_ty≥
(sk), (i)))

	)

208 
	#sk_OCSP_SINGLERESP_dñëe_±r
(
sk
, 
±r
Ë((
OCSP_SINGLERESP
 *)
	`OPENSSL_sk_dñëe_±r
(
	`os¶_check_OCSP_SINGLERESP_sk_ty≥
(sk), 
	`os¶_check_OCSP_SINGLERESP_ty≥
’å)))

	)

209 
	#sk_OCSP_SINGLERESP_push
(
sk
, 
±r
Ë
	`OPENSSL_sk_push
(
	`os¶_check_OCSP_SINGLERESP_sk_ty≥
(sk), 
	`os¶_check_OCSP_SINGLERESP_ty≥
’å))

	)

210 
	#sk_OCSP_SINGLERESP_unshi·
(
sk
, 
±r
Ë
	`OPENSSL_sk_unshi·
(
	`os¶_check_OCSP_SINGLERESP_sk_ty≥
(sk), 
	`os¶_check_OCSP_SINGLERESP_ty≥
’å))

	)

211 
	#sk_OCSP_SINGLERESP_p›
(
sk
Ë((
OCSP_SINGLERESP
 *)
	`OPENSSL_sk_p›
(
	`os¶_check_OCSP_SINGLERESP_sk_ty≥
(sk)))

	)

212 
	#sk_OCSP_SINGLERESP_shi·
(
sk
Ë((
OCSP_SINGLERESP
 *)
	`OPENSSL_sk_shi·
(
	`os¶_check_OCSP_SINGLERESP_sk_ty≥
(sk)))

	)

213 
	#sk_OCSP_SINGLERESP_p›_‰ì
(
sk
, 
‰ìfunc
Ë
	`OPENSSL_sk_p›_‰ì
(
	`os¶_check_OCSP_SINGLERESP_sk_ty≥
(sk),
	`os¶_check_OCSP_SINGLERESP_‰ìfunc_ty≥
(‰ìfunc))

	)

214 
	#sk_OCSP_SINGLERESP_ö£π
(
sk
, 
±r
, 
idx
Ë
	`OPENSSL_sk_ö£π
(
	`os¶_check_OCSP_SINGLERESP_sk_ty≥
(sk), 
	`os¶_check_OCSP_SINGLERESP_ty≥
’å), (idx))

	)

215 
	#sk_OCSP_SINGLERESP_£t
(
sk
, 
idx
, 
±r
Ë((
OCSP_SINGLERESP
 *)
	`OPENSSL_sk_£t
(
	`os¶_check_OCSP_SINGLERESP_sk_ty≥
(sk), (idx), 
	`os¶_check_OCSP_SINGLERESP_ty≥
’å)))

	)

216 
	#sk_OCSP_SINGLERESP_föd
(
sk
, 
±r
Ë
	`OPENSSL_sk_föd
(
	`os¶_check_OCSP_SINGLERESP_sk_ty≥
(sk), 
	`os¶_check_OCSP_SINGLERESP_ty≥
’å))

	)

217 
	#sk_OCSP_SINGLERESP_föd_ex
(
sk
, 
±r
Ë
	`OPENSSL_sk_föd_ex
(
	`os¶_check_OCSP_SINGLERESP_sk_ty≥
(sk), 
	`os¶_check_OCSP_SINGLERESP_ty≥
’å))

	)

218 
	#sk_OCSP_SINGLERESP_föd_Æl
(
sk
, 
±r
, 
≤um
Ë
	`OPENSSL_sk_föd_Æl
(
	`os¶_check_OCSP_SINGLERESP_sk_ty≥
(sk), 
	`os¶_check_OCSP_SINGLERESP_ty≥
’å),Önum)

	)

219 
	#sk_OCSP_SINGLERESP_s‹t
(
sk
Ë
	`OPENSSL_sk_s‹t
(
	`os¶_check_OCSP_SINGLERESP_sk_ty≥
(sk))

	)

220 
	#sk_OCSP_SINGLERESP_is_s‹ãd
(
sk
Ë
	`OPENSSL_sk_is_s‹ãd
(
	`os¶_check_c⁄°_OCSP_SINGLERESP_sk_ty≥
(sk))

	)

221 
	#sk_OCSP_SINGLERESP_dup
(
sk
Ë((
	`STACK_OF
(
OCSP_SINGLERESP
Ë*)
	`OPENSSL_sk_dup
(
	`os¶_check_c⁄°_OCSP_SINGLERESP_sk_ty≥
(sk)))

	)

222 
	#sk_OCSP_SINGLERESP_dìp_c›y
(
sk
, 
c›yfunc
, 
‰ìfunc
Ë((
	`STACK_OF
(
OCSP_SINGLERESP
Ë*)
	`OPENSSL_sk_dìp_c›y
(
	`os¶_check_c⁄°_OCSP_SINGLERESP_sk_ty≥
(sk), 
	`os¶_check_OCSP_SINGLERESP_c›yfunc_ty≥
(c›yfunc), 
	`os¶_check_OCSP_SINGLERESP_‰ìfunc_ty≥
(‰ìfunc)))

	)

223 
	#sk_OCSP_SINGLERESP_£t_cmp_func
(
sk
, 
cmp
Ë((
sk_OCSP_SINGLERESP_compfunc
)
	`OPENSSL_sk_£t_cmp_func
(
	`os¶_check_OCSP_SINGLERESP_sk_ty≥
(sk), 
	`os¶_check_OCSP_SINGLERESP_compfunc_ty≥
(cmp)))

	)

226 
oc•_ª•⁄£_d©a_°
 
	tOCSP_RESPDATA
;

228 
oc•_basic_ª•⁄£_°
 
	tOCSP_BASICRESP
;

230 
oc•_¸l_id_°
 
	tOCSP_CRLID
;

231 
oc•_£rvi˚_loˇt‹_°
 
	tOCSP_SERVICELOC
;

233 
	#PEM_STRING_OCSP_REQUEST
 "OCSP REQUEST"

	)

234 
	#PEM_STRING_OCSP_RESPONSE
 "OCSP RESPONSE"

	)

236 
	#d2i_OCSP_REQUEST_bio
(
bp
,
p
Ë
	`ASN1_d2i_bio_of
(
OCSP_REQUEST
,
OCSP_REQUEST_√w
,
d2i_OCSP_REQUEST
,bp,p)

	)

238 
	#d2i_OCSP_RESPONSE_bio
(
bp
,
p
Ë
	`ASN1_d2i_bio_of
(
OCSP_RESPONSE
,
OCSP_RESPONSE_√w
,
d2i_OCSP_RESPONSE
,bp,p)

	)

240 
	#PEM_ªad_bio_OCSP_REQUEST
(
bp
,
x
,
cb
Ë(
OCSP_REQUEST
 *)
	`PEM_ASN1_ªad_bio
( \

241 (*(*)())
d2i_OCSP_REQUEST
,
PEM_STRING_OCSP_REQUEST
, \

242 
bp
,(**)(
x
),
cb
,
NULL
)

	)

244 
	#PEM_ªad_bio_OCSP_RESPONSE
(
bp
,
x
,
cb
Ë(
OCSP_RESPONSE
 *)
	`PEM_ASN1_ªad_bio
(\

245 (*(*)())
d2i_OCSP_RESPONSE
,
PEM_STRING_OCSP_RESPONSE
, \

246 
bp
,(**)(
x
),
cb
,
NULL
)

	)

248 
	#PEM_wrôe_bio_OCSP_REQUEST
(
bp
,
o
) \

249 
	`PEM_ASN1_wrôe_bio
(((*)())
i2d_OCSP_REQUEST
,
PEM_STRING_OCSP_REQUEST
,\

250 
bp
,(*)(
o
), 
NULL
,NULL,0,NULL,NULL)

	)

252 
	#PEM_wrôe_bio_OCSP_RESPONSE
(
bp
,
o
) \

253 
	`PEM_ASN1_wrôe_bio
(((*)())
i2d_OCSP_RESPONSE
,
PEM_STRING_OCSP_RESPONSE
,\

254 
bp
,(*)(
o
), 
NULL
,NULL,0,NULL,NULL)

	)

256 
	#i2d_OCSP_RESPONSE_bio
(
bp
,
o
Ë
	`ASN1_i2d_bio_of
(
OCSP_RESPONSE
,
i2d_OCSP_RESPONSE
,bp,o)

	)

258 
	#i2d_OCSP_REQUEST_bio
(
bp
,
o
Ë
	`ASN1_i2d_bio_of
(
OCSP_REQUEST
,
i2d_OCSP_REQUEST
,bp,o)

	)

260 
	#ASN1_BIT_STRING_dige°
(
d©a
,
ty≥
,
md
,
Àn
) \

261 
	`ASN1_ôem_dige°
(
	`ASN1_ITEM_Ωå
(
ASN1_BIT_STRING
),
ty≥
,
d©a
,
md
,
Àn
)

	)

263 
	#OCSP_CERTSTATUS_dup
(
cs
)\

264 (
OCSP_CERTSTATUS
*)
	`ASN1_dup
((
i2d_of_void
 *)
i2d_OCSP_CERTSTATUS
,\

265 (
d2i_of_void
 *)
d2i_OCSP_CERTSTATUS
,(*)(
cs
))

	)

267 
DECLARE_ASN1_DUP_FUNCTION
(
OCSP_CERTID
)

269 
OSSL_HTTP_REQ_CTX
 *
OCSP_£ndªq_√w
(
BIO
 *
io
, c⁄° *
∑th
,

270 c⁄° 
OCSP_REQUEST
 *
ªq
, 
buf_size
);

271 
OCSP_RESPONSE
 *
OCSP_£ndªq_bio
(
BIO
 *
b
, c⁄° *
∑th
, 
OCSP_REQUEST
 *
ªq
);

273 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


274 
OSSL_HTTP_REQ_CTX
 
	tOCSP_REQ_CTX
;

275 
	#OCSP_REQ_CTX_√w
(
io
, 
buf_size
) \

276 
	`OSSL_HTTP_REQ_CTX_√w
(
io
, io, 
buf_size
)

	)

277 
	#OCSP_REQ_CTX_‰ì
 
OSSL_HTTP_REQ_CTX_‰ì


	)

278 
	#OCSP_REQ_CTX_hâp
(
r˘x
, 
›
, 
∑th
) \

279 (
	`OSSL_HTTP_REQ_CTX_£t_ex≥˘ed
(
r˘x
, 
NULL
, 1 , 0, 0) && \

280 
	`OSSL_HTTP_REQ_CTX_£t_ªque°_löe
(
r˘x
, 
	`°rcmp
(
›
, "POST") == 0, \

281 
NULL
, NULL, 
∑th
))

	)

282 
	#OCSP_REQ_CTX_add1_hódî
 
OSSL_HTTP_REQ_CTX_add1_hódî


	)

283 
	#OCSP_REQ_CTX_i2d
(
r
, 
ô
, 
ªq
) \

284 
	`OSSL_HTTP_REQ_CTX_£t1_ªq
(
r
, "≠∂iˇti⁄/oc•-ªque°", 
ô
, 
ªq
)

	)

285 
	#OCSP_REQ_CTX_£t1_ªq
(
r
, 
ªq
) \

286 
	`OCSP_REQ_CTX_i2d
(
r
, 
	`ASN1_ITEM_Ωå
(
OCSP_REQUEST
), (
ASN1_VALUE
 *)(
ªq
))

	)

287 
	#OCSP_REQ_CTX_nbio
 
OSSL_HTTP_REQ_CTX_nbio


	)

288 
	#OCSP_REQ_CTX_nbio_d2i
 
OSSL_HTTP_REQ_CTX_nbio_d2i


	)

289 
	#OCSP_£ndªq_nbio
(
p
, 
r
) \

290 
	`OSSL_HTTP_REQ_CTX_nbio_d2i
(
r
, (
ASN1_VALUE
 **)(
p
), \

291 
	`ASN1_ITEM_Ωå
(
OCSP_RESPONSE
))

	)

292 
	#OCSP_REQ_CTX_gë0_mem_bio
 
OSSL_HTTP_REQ_CTX_gë0_mem_bio


	)

293 
	#OCSP_£t_max_ª•⁄£_Àngth
 
OSSL_HTTP_REQ_CTX_£t_max_ª•⁄£_Àngth


	)

296 
OCSP_CERTID
 *
OCSP_˚π_to_id
(c⁄° 
EVP_MD
 *
dg°
, c⁄° 
X509
 *
subje˘
,

297 c⁄° 
X509
 *
issuî
);

299 
OCSP_CERTID
 *
OCSP_˚π_id_√w
(c⁄° 
EVP_MD
 *
dg°
,

300 c⁄° 
X509_NAME
 *
issuîName
,

301 c⁄° 
ASN1_BIT_STRING
 *
issuîKey
,

302 c⁄° 
ASN1_INTEGER
 *
£rülNumbî
);

304 
OCSP_ONEREQ
 *
OCSP_ªque°_add0_id
(
OCSP_REQUEST
 *
ªq
, 
OCSP_CERTID
 *
cid
);

306 
OCSP_ªque°_add1_n⁄˚
(
OCSP_REQUEST
 *
ªq
, *
vÆ
, 
Àn
);

307 
OCSP_basic_add1_n⁄˚
(
OCSP_BASICRESP
 *
ª•
, *
vÆ
, 
Àn
);

308 
OCSP_check_n⁄˚
(
OCSP_REQUEST
 *
ªq
, 
OCSP_BASICRESP
 *
bs
);

309 
OCSP_c›y_n⁄˚
(
OCSP_BASICRESP
 *
ª•
, 
OCSP_REQUEST
 *
ªq
);

311 
OCSP_ªque°_£t1_«me
(
OCSP_REQUEST
 *
ªq
, c⁄° 
X509_NAME
 *
nm
);

312 
OCSP_ªque°_add1_˚π
(
OCSP_REQUEST
 *
ªq
, 
X509
 *
˚π
);

314 
OCSP_ªque°_sign
(
OCSP_REQUEST
 *
ªq
,

315 
X509
 *
sig√r
,

316 
EVP_PKEY
 *
key
,

317 c⁄° 
EVP_MD
 *
dg°
,

318 
STACK_OF
(
X509
Ë*
˚πs
, 
Êags
);

320 
OCSP_ª•⁄£_°©us
(
OCSP_RESPONSE
 *
ª•
);

321 
OCSP_BASICRESP
 *
OCSP_ª•⁄£_gë1_basic
(
OCSP_RESPONSE
 *
ª•
);

323 c⁄° 
ASN1_OCTET_STRING
 *
OCSP_ª•_gë0_sig«tuª
(c⁄° 
OCSP_BASICRESP
 *
bs
);

324 c⁄° 
X509_ALGOR
 *
OCSP_ª•_gë0_tbs_sigÆg
(c⁄° 
OCSP_BASICRESP
 *
bs
);

325 c⁄° 
OCSP_RESPDATA
 *
OCSP_ª•_gë0_ª•d©a
(c⁄° 
OCSP_BASICRESP
 *
bs
);

326 
OCSP_ª•_gë0_sig√r
(
OCSP_BASICRESP
 *
bs
, 
X509
 **
sig√r
,

327 
STACK_OF
(
X509
Ë*
exåa_˚πs
);

329 
OCSP_ª•_cou¡
(
OCSP_BASICRESP
 *
bs
);

330 
OCSP_SINGLERESP
 *
OCSP_ª•_gë0
(
OCSP_BASICRESP
 *
bs
, 
idx
);

331 c⁄° 
ASN1_GENERALIZEDTIME
 *
OCSP_ª•_gë0_¥odu˚d_©
(c⁄° 
OCSP_BASICRESP
* 
bs
);

332 c⁄° 
STACK_OF
(
X509
Ë*
OCSP_ª•_gë0_˚πs
(c⁄° 
OCSP_BASICRESP
 *
bs
);

333 
OCSP_ª•_gë0_id
(c⁄° 
OCSP_BASICRESP
 *
bs
,

334 c⁄° 
ASN1_OCTET_STRING
 **
pid
,

335 c⁄° 
X509_NAME
 **
≤ame
);

336 
OCSP_ª•_gë1_id
(c⁄° 
OCSP_BASICRESP
 *
bs
,

337 
ASN1_OCTET_STRING
 **
pid
,

338 
X509_NAME
 **
≤ame
);

340 
OCSP_ª•_föd
(
OCSP_BASICRESP
 *
bs
, 
OCSP_CERTID
 *
id
, 
œ°
);

341 
OCSP_sögÀ_gë0_°©us
(
OCSP_SINGLERESP
 *
sögÀ
, *
ªas⁄
,

342 
ASN1_GENERALIZEDTIME
 **
ªvtime
,

343 
ASN1_GENERALIZEDTIME
 **
thisupd
,

344 
ASN1_GENERALIZEDTIME
 **
√xtupd
);

345 
OCSP_ª•_föd_°©us
(
OCSP_BASICRESP
 *
bs
, 
OCSP_CERTID
 *
id
, *
°©us
,

346 *
ªas⁄
,

347 
ASN1_GENERALIZEDTIME
 **
ªvtime
,

348 
ASN1_GENERALIZEDTIME
 **
thisupd
,

349 
ASN1_GENERALIZEDTIME
 **
√xtupd
);

350 
OCSP_check_vÆidôy
(
ASN1_GENERALIZEDTIME
 *
thisupd
,

351 
ASN1_GENERALIZEDTIME
 *
√xtupd
, 
£c
, 
max£c
);

353 
OCSP_ªque°_vîify
(
OCSP_REQUEST
 *
ªq
, 
STACK_OF
(
X509
Ë*
˚πs
,

354 
X509_STORE
 *
°‹e
, 
Êags
);

356 
	#OCSP_∑r£_uæ
(
uæ
, 
ho°
, 
p‹t
, 
∑th
, 
s¶
) \

357 
	`OSSL_HTTP_∑r£_uæ
(
uæ
, 
s¶
, 
NULL
, 
ho°
, 
p‹t
, NULL, 
∑th
, NULL, NULL)

	)

359 
OCSP_id_issuî_cmp
(c⁄° 
OCSP_CERTID
 *
a
, c⁄° OCSP_CERTID *
b
);

360 
OCSP_id_cmp
(c⁄° 
OCSP_CERTID
 *
a
, c⁄° OCSP_CERTID *
b
);

362 
OCSP_ªque°_⁄îeq_cou¡
(
OCSP_REQUEST
 *
ªq
);

363 
OCSP_ONEREQ
 *
OCSP_ªque°_⁄îeq_gë0
(
OCSP_REQUEST
 *
ªq
, 
i
);

364 
OCSP_CERTID
 *
OCSP_⁄îeq_gë0_id
(
OCSP_ONEREQ
 *
⁄e
);

365 
OCSP_id_gë0_öfo
(
ASN1_OCTET_STRING
 **
piNameHash
, 
ASN1_OBJECT
 **
pmd
,

366 
ASN1_OCTET_STRING
 **
pikeyHash
,

367 
ASN1_INTEGER
 **
p£rül
, 
OCSP_CERTID
 *
cid
);

368 
OCSP_ªque°_is_sig√d
(
OCSP_REQUEST
 *
ªq
);

369 
OCSP_RESPONSE
 *
OCSP_ª•⁄£_¸óã
(
°©us
, 
OCSP_BASICRESP
 *
bs
);

370 
OCSP_SINGLERESP
 *
OCSP_basic_add1_°©us
(
OCSP_BASICRESP
 *
r•
,

371 
OCSP_CERTID
 *
cid
,

372 
°©us
, 
ªas⁄
,

373 
ASN1_TIME
 *
ªvtime
,

374 
ASN1_TIME
 *
thisupd
,

375 
ASN1_TIME
 *
√xtupd
);

376 
OCSP_basic_add1_˚π
(
OCSP_BASICRESP
 *
ª•
, 
X509
 *
˚π
);

377 
OCSP_basic_sign
(
OCSP_BASICRESP
 *
br•
,

378 
X509
 *
sig√r
, 
EVP_PKEY
 *
key
, c⁄° 
EVP_MD
 *
dg°
,

379 
STACK_OF
(
X509
Ë*
˚πs
, 
Êags
);

380 
OCSP_basic_sign_˘x
(
OCSP_BASICRESP
 *
br•
,

381 
X509
 *
sig√r
, 
EVP_MD_CTX
 *
˘x
,

382 
STACK_OF
(
X509
Ë*
˚πs
, 
Êags
);

383 
OCSP_RESPID_£t_by_«me
(
OCSP_RESPID
 *
ª•id
, 
X509
 *
˚π
);

384 
OCSP_RESPID_£t_by_key_ex
(
OCSP_RESPID
 *
ª•id
, 
X509
 *
˚π
,

385 
OSSL_LIB_CTX
 *
lib˘x
, c⁄° *
¥›q
);

386 
OCSP_RESPID_£t_by_key
(
OCSP_RESPID
 *
ª•id
, 
X509
 *
˚π
);

387 
OCSP_RESPID_m©ch_ex
(
OCSP_RESPID
 *
ª•id
, 
X509
 *
˚π
, 
OSSL_LIB_CTX
 *
lib˘x
,

388 c⁄° *
¥›q
);

389 
OCSP_RESPID_m©ch
(
OCSP_RESPID
 *
ª•id
, 
X509
 *
˚π
);

391 
X509_EXTENSION
 *
OCSP_¸lID_√w
(c⁄° *
uæ
, *
n
, *
tim
);

393 
X509_EXTENSION
 *
OCSP_ac˚±_ª•⁄£s_√w
(**
oids
);

395 
X509_EXTENSION
 *
OCSP_¨chive_cutoff_√w
(*
tim
);

397 
X509_EXTENSION
 *
OCSP_uæ_sv˛oc_√w
(c⁄° 
X509_NAME
 *
issuî
, c⁄° **
uæs
);

399 
OCSP_REQUEST_gë_ext_cou¡
(
OCSP_REQUEST
 *
x
);

400 
OCSP_REQUEST_gë_ext_by_NID
(
OCSP_REQUEST
 *
x
, 
nid
, 
œ°pos
);

401 
OCSP_REQUEST_gë_ext_by_OBJ
(
OCSP_REQUEST
 *
x
, c⁄° 
ASN1_OBJECT
 *
obj
,

402 
œ°pos
);

403 
OCSP_REQUEST_gë_ext_by_¸ôiˇl
(
OCSP_REQUEST
 *
x
, 
¸ô
, 
œ°pos
);

404 
X509_EXTENSION
 *
OCSP_REQUEST_gë_ext
(
OCSP_REQUEST
 *
x
, 
loc
);

405 
X509_EXTENSION
 *
OCSP_REQUEST_dñëe_ext
(
OCSP_REQUEST
 *
x
, 
loc
);

406 *
OCSP_REQUEST_gë1_ext_d2i
(
OCSP_REQUEST
 *
x
, 
nid
, *
¸ô
,

407 *
idx
);

408 
OCSP_REQUEST_add1_ext_i2d
(
OCSP_REQUEST
 *
x
, 
nid
, *
vÆue
, 
¸ô
,

409 
Êags
);

410 
OCSP_REQUEST_add_ext
(
OCSP_REQUEST
 *
x
, 
X509_EXTENSION
 *
ex
, 
loc
);

412 
OCSP_ONEREQ_gë_ext_cou¡
(
OCSP_ONEREQ
 *
x
);

413 
OCSP_ONEREQ_gë_ext_by_NID
(
OCSP_ONEREQ
 *
x
, 
nid
, 
œ°pos
);

414 
OCSP_ONEREQ_gë_ext_by_OBJ
(
OCSP_ONEREQ
 *
x
, c⁄° 
ASN1_OBJECT
 *
obj
, 
œ°pos
);

415 
OCSP_ONEREQ_gë_ext_by_¸ôiˇl
(
OCSP_ONEREQ
 *
x
, 
¸ô
, 
œ°pos
);

416 
X509_EXTENSION
 *
OCSP_ONEREQ_gë_ext
(
OCSP_ONEREQ
 *
x
, 
loc
);

417 
X509_EXTENSION
 *
OCSP_ONEREQ_dñëe_ext
(
OCSP_ONEREQ
 *
x
, 
loc
);

418 *
OCSP_ONEREQ_gë1_ext_d2i
(
OCSP_ONEREQ
 *
x
, 
nid
, *
¸ô
, *
idx
);

419 
OCSP_ONEREQ_add1_ext_i2d
(
OCSP_ONEREQ
 *
x
, 
nid
, *
vÆue
, 
¸ô
,

420 
Êags
);

421 
OCSP_ONEREQ_add_ext
(
OCSP_ONEREQ
 *
x
, 
X509_EXTENSION
 *
ex
, 
loc
);

423 
OCSP_BASICRESP_gë_ext_cou¡
(
OCSP_BASICRESP
 *
x
);

424 
OCSP_BASICRESP_gë_ext_by_NID
(
OCSP_BASICRESP
 *
x
, 
nid
, 
œ°pos
);

425 
OCSP_BASICRESP_gë_ext_by_OBJ
(
OCSP_BASICRESP
 *
x
, c⁄° 
ASN1_OBJECT
 *
obj
,

426 
œ°pos
);

427 
OCSP_BASICRESP_gë_ext_by_¸ôiˇl
(
OCSP_BASICRESP
 *
x
, 
¸ô
,

428 
œ°pos
);

429 
X509_EXTENSION
 *
OCSP_BASICRESP_gë_ext
(
OCSP_BASICRESP
 *
x
, 
loc
);

430 
X509_EXTENSION
 *
OCSP_BASICRESP_dñëe_ext
(
OCSP_BASICRESP
 *
x
, 
loc
);

431 *
OCSP_BASICRESP_gë1_ext_d2i
(
OCSP_BASICRESP
 *
x
, 
nid
, *
¸ô
,

432 *
idx
);

433 
OCSP_BASICRESP_add1_ext_i2d
(
OCSP_BASICRESP
 *
x
, 
nid
, *
vÆue
,

434 
¸ô
, 
Êags
);

435 
OCSP_BASICRESP_add_ext
(
OCSP_BASICRESP
 *
x
, 
X509_EXTENSION
 *
ex
, 
loc
);

437 
OCSP_SINGLERESP_gë_ext_cou¡
(
OCSP_SINGLERESP
 *
x
);

438 
OCSP_SINGLERESP_gë_ext_by_NID
(
OCSP_SINGLERESP
 *
x
, 
nid
, 
œ°pos
);

439 
OCSP_SINGLERESP_gë_ext_by_OBJ
(
OCSP_SINGLERESP
 *
x
, c⁄° 
ASN1_OBJECT
 *
obj
,

440 
œ°pos
);

441 
OCSP_SINGLERESP_gë_ext_by_¸ôiˇl
(
OCSP_SINGLERESP
 *
x
, 
¸ô
,

442 
œ°pos
);

443 
X509_EXTENSION
 *
OCSP_SINGLERESP_gë_ext
(
OCSP_SINGLERESP
 *
x
, 
loc
);

444 
X509_EXTENSION
 *
OCSP_SINGLERESP_dñëe_ext
(
OCSP_SINGLERESP
 *
x
, 
loc
);

445 *
OCSP_SINGLERESP_gë1_ext_d2i
(
OCSP_SINGLERESP
 *
x
, 
nid
, *
¸ô
,

446 *
idx
);

447 
OCSP_SINGLERESP_add1_ext_i2d
(
OCSP_SINGLERESP
 *
x
, 
nid
, *
vÆue
,

448 
¸ô
, 
Êags
);

449 
OCSP_SINGLERESP_add_ext
(
OCSP_SINGLERESP
 *
x
, 
X509_EXTENSION
 *
ex
, 
loc
);

450 c⁄° 
OCSP_CERTID
 *
OCSP_SINGLERESP_gë0_id
(c⁄° 
OCSP_SINGLERESP
 *
x
);

452 
DECLARE_ASN1_FUNCTIONS
(
OCSP_SINGLERESP
)

453 
DECLARE_ASN1_FUNCTIONS
(
OCSP_CERTSTATUS
)

454 
DECLARE_ASN1_FUNCTIONS
(
OCSP_REVOKEDINFO
)

455 
DECLARE_ASN1_FUNCTIONS
(
OCSP_BASICRESP
)

456 
DECLARE_ASN1_FUNCTIONS
(
OCSP_RESPDATA
)

457 
DECLARE_ASN1_FUNCTIONS
(
OCSP_RESPID
)

458 
DECLARE_ASN1_FUNCTIONS
(
OCSP_RESPONSE
)

459 
DECLARE_ASN1_FUNCTIONS
(
OCSP_RESPBYTES
)

460 
DECLARE_ASN1_FUNCTIONS
(
OCSP_ONEREQ
)

461 
DECLARE_ASN1_FUNCTIONS
(
OCSP_CERTID
)

462 
DECLARE_ASN1_FUNCTIONS
(
OCSP_REQUEST
)

463 
DECLARE_ASN1_FUNCTIONS
(
OCSP_SIGNATURE
)

464 
DECLARE_ASN1_FUNCTIONS
(
OCSP_REQINFO
)

465 
DECLARE_ASN1_FUNCTIONS
(
OCSP_CRLID
)

466 
DECLARE_ASN1_FUNCTIONS
(
OCSP_SERVICELOC
)

468 c⁄° *
OCSP_ª•⁄£_°©us_°r
(
s
);

469 c⁄° *
OCSP_˚π_°©us_°r
(
s
);

470 c⁄° *
OCSP_¸l_ªas⁄_°r
(
s
);

472 
OCSP_REQUEST_¥öt
(
BIO
 *
bp
, 
OCSP_REQUEST
 *
a
, 
Êags
);

473 
OCSP_RESPONSE_¥öt
(
BIO
 *
bp
, 
OCSP_RESPONSE
 *
o
, 
Êags
);

475 
OCSP_basic_vîify
(
OCSP_BASICRESP
 *
bs
, 
STACK_OF
(
X509
Ë*
˚πs
,

476 
X509_STORE
 *
°
, 
Êags
);

479 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/pemerr.h

11 #i‚de‡
OPENSSL_PEMERR_H


12 
	#OPENSSL_PEMERR_H


	)

13 #¥agm®
⁄˚


15 
	~<›ís¶/›ís¶c⁄f.h
>

16 
	~<›ís¶/symhacks.h
>

17 
	~<›ís¶/¸y±€º_Àgacy.h
>

24 
	#PEM_R_BAD_BASE64_DECODE
 100

	)

25 
	#PEM_R_BAD_DECRYPT
 101

	)

26 
	#PEM_R_BAD_END_LINE
 102

	)

27 
	#PEM_R_BAD_IV_CHARS
 103

	)

28 
	#PEM_R_BAD_MAGIC_NUMBER
 116

	)

29 
	#PEM_R_BAD_PASSWORD_READ
 104

	)

30 
	#PEM_R_BAD_VERSION_NUMBER
 117

	)

31 
	#PEM_R_BIO_WRITE_FAILURE
 118

	)

32 
	#PEM_R_CIPHER_IS_NULL
 127

	)

33 
	#PEM_R_ERROR_CONVERTING_PRIVATE_KEY
 115

	)

34 
	#PEM_R_EXPECTING_DSS_KEY_BLOB
 131

	)

35 
	#PEM_R_EXPECTING_PRIVATE_KEY_BLOB
 119

	)

36 
	#PEM_R_EXPECTING_PUBLIC_KEY_BLOB
 120

	)

37 
	#PEM_R_EXPECTING_RSA_KEY_BLOB
 132

	)

38 
	#PEM_R_HEADER_TOO_LONG
 128

	)

39 
	#PEM_R_INCONSISTENT_HEADER
 121

	)

40 
	#PEM_R_KEYBLOB_HEADER_PARSE_ERROR
 122

	)

41 
	#PEM_R_KEYBLOB_TOO_SHORT
 123

	)

42 
	#PEM_R_MISSING_DEK_IV
 129

	)

43 
	#PEM_R_NOT_DEK_INFO
 105

	)

44 
	#PEM_R_NOT_ENCRYPTED
 106

	)

45 
	#PEM_R_NOT_PROC_TYPE
 107

	)

46 
	#PEM_R_NO_START_LINE
 108

	)

47 
	#PEM_R_PROBLEMS_GETTING_PASSWORD
 109

	)

48 
	#PEM_R_PVK_DATA_TOO_SHORT
 124

	)

49 
	#PEM_R_PVK_TOO_SHORT
 125

	)

50 
	#PEM_R_READ_KEY
 111

	)

51 
	#PEM_R_SHORT_HEADER
 112

	)

52 
	#PEM_R_UNEXPECTED_DEK_IV
 130

	)

53 
	#PEM_R_UNSUPPORTED_CIPHER
 113

	)

54 
	#PEM_R_UNSUPPORTED_ENCRYPTION
 114

	)

55 
	#PEM_R_UNSUPPORTED_KEY_COMPONENTS
 126

	)

56 
	#PEM_R_UNSUPPORTED_PUBLIC_KEY_TYPE
 110

	)

	@/usr/include/openssl/pkcs7.h

15 #i‚de‡
OPENSSL_PKCS7_H


16 
	#OPENSSL_PKCS7_H


	)

17 #¥agm®
⁄˚


19 
	~<›ís¶/ma¸os.h
>

20 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


21 
	#HEADER_PKCS7_H


	)

24 
	~<›ís¶/a¢1.h
>

25 
	~<›ís¶/bio.h
>

26 
	~<›ís¶/e_os2.h
>

28 
	~<›ís¶/symhacks.h
>

29 
	~<›ís¶/ty≥s.h
>

30 
	~<›ís¶/pkcs7îr.h
>

32 #ifde‡ 
__˝lu•lus


44 
	sPKCS7_CTX_°
 {

45 
OSSL_LIB_CTX
 *
lib˘x
;

46 *
¥›q
;

47 } 
	tPKCS7_CTX
;

49 
	spkcs7_issuî_™d_£rül_°
 {

50 
X509_NAME
 *
issuî
;

51 
ASN1_INTEGER
 *
£rül
;

52 } 
	tPKCS7_ISSUER_AND_SERIAL
;

54 
	spkcs7_sig√r_öfo_°
 {

55 
ASN1_INTEGER
 *
vîsi⁄
;

56 
PKCS7_ISSUER_AND_SERIAL
 *
issuî_™d_£rül
;

57 
X509_ALGOR
 *
dige°_Æg
;

58 
STACK_OF
(
X509_ATTRIBUTE
Ë*
auth_©å
;

59 
X509_ALGOR
 *
dige°_íc_Æg
;

60 
ASN1_OCTET_STRING
 *
íc_dige°
;

61 
STACK_OF
(
X509_ATTRIBUTE
Ë*
u«uth_©å
;

63 
EVP_PKEY
 *
pkey
;

64 c⁄° 
PKCS7_CTX
 *
˘x
;

65 } 
	tPKCS7_SIGNER_INFO
;

66 
SKM_DEFINE_STACK_OF_INTERNAL
(
PKCS7_SIGNER_INFO
, PKCS7_SIGNER_INFO, PKCS7_SIGNER_INFO)

67 
	#sk_PKCS7_SIGNER_INFO_num
(
sk
Ë
	`OPENSSL_sk_num
(
	`os¶_check_c⁄°_PKCS7_SIGNER_INFO_sk_ty≥
(sk))

	)

68 
	#sk_PKCS7_SIGNER_INFO_vÆue
(
sk
, 
idx
Ë((
PKCS7_SIGNER_INFO
 *)
	`OPENSSL_sk_vÆue
(
	`os¶_check_c⁄°_PKCS7_SIGNER_INFO_sk_ty≥
(sk), (idx)))

	)

69 
	#sk_PKCS7_SIGNER_INFO_√w
(
cmp
Ë((
	`STACK_OF
(
PKCS7_SIGNER_INFO
Ë*)
	`OPENSSL_sk_√w
(
	`os¶_check_PKCS7_SIGNER_INFO_compfunc_ty≥
(cmp)))

	)

70 
	#sk_PKCS7_SIGNER_INFO_√w_nuŒ
(Ë((
	`STACK_OF
(
PKCS7_SIGNER_INFO
Ë*)
	`OPENSSL_sk_√w_nuŒ
())

	)

71 
	#sk_PKCS7_SIGNER_INFO_√w_ª£rve
(
cmp
, 
n
Ë((
	`STACK_OF
(
PKCS7_SIGNER_INFO
Ë*)
	`OPENSSL_sk_√w_ª£rve
(
	`os¶_check_PKCS7_SIGNER_INFO_compfunc_ty≥
(cmp), (n)))

	)

72 
	#sk_PKCS7_SIGNER_INFO_ª£rve
(
sk
, 
n
Ë
	`OPENSSL_sk_ª£rve
(
	`os¶_check_PKCS7_SIGNER_INFO_sk_ty≥
(sk), (n))

	)

73 
	#sk_PKCS7_SIGNER_INFO_‰ì
(
sk
Ë
	`OPENSSL_sk_‰ì
(
	`os¶_check_PKCS7_SIGNER_INFO_sk_ty≥
(sk))

	)

74 
	#sk_PKCS7_SIGNER_INFO_zîo
(
sk
Ë
	`OPENSSL_sk_zîo
(
	`os¶_check_PKCS7_SIGNER_INFO_sk_ty≥
(sk))

	)

75 
	#sk_PKCS7_SIGNER_INFO_dñëe
(
sk
, 
i
Ë((
PKCS7_SIGNER_INFO
 *)
	`OPENSSL_sk_dñëe
(
	`os¶_check_PKCS7_SIGNER_INFO_sk_ty≥
(sk), (i)))

	)

76 
	#sk_PKCS7_SIGNER_INFO_dñëe_±r
(
sk
, 
±r
Ë((
PKCS7_SIGNER_INFO
 *)
	`OPENSSL_sk_dñëe_±r
(
	`os¶_check_PKCS7_SIGNER_INFO_sk_ty≥
(sk), 
	`os¶_check_PKCS7_SIGNER_INFO_ty≥
’å)))

	)

77 
	#sk_PKCS7_SIGNER_INFO_push
(
sk
, 
±r
Ë
	`OPENSSL_sk_push
(
	`os¶_check_PKCS7_SIGNER_INFO_sk_ty≥
(sk), 
	`os¶_check_PKCS7_SIGNER_INFO_ty≥
’å))

	)

78 
	#sk_PKCS7_SIGNER_INFO_unshi·
(
sk
, 
±r
Ë
	`OPENSSL_sk_unshi·
(
	`os¶_check_PKCS7_SIGNER_INFO_sk_ty≥
(sk), 
	`os¶_check_PKCS7_SIGNER_INFO_ty≥
’å))

	)

79 
	#sk_PKCS7_SIGNER_INFO_p›
(
sk
Ë((
PKCS7_SIGNER_INFO
 *)
	`OPENSSL_sk_p›
(
	`os¶_check_PKCS7_SIGNER_INFO_sk_ty≥
(sk)))

	)

80 
	#sk_PKCS7_SIGNER_INFO_shi·
(
sk
Ë((
PKCS7_SIGNER_INFO
 *)
	`OPENSSL_sk_shi·
(
	`os¶_check_PKCS7_SIGNER_INFO_sk_ty≥
(sk)))

	)

81 
	#sk_PKCS7_SIGNER_INFO_p›_‰ì
(
sk
, 
‰ìfunc
Ë
	`OPENSSL_sk_p›_‰ì
(
	`os¶_check_PKCS7_SIGNER_INFO_sk_ty≥
(sk),
	`os¶_check_PKCS7_SIGNER_INFO_‰ìfunc_ty≥
(‰ìfunc))

	)

82 
	#sk_PKCS7_SIGNER_INFO_ö£π
(
sk
, 
±r
, 
idx
Ë
	`OPENSSL_sk_ö£π
(
	`os¶_check_PKCS7_SIGNER_INFO_sk_ty≥
(sk), 
	`os¶_check_PKCS7_SIGNER_INFO_ty≥
’å), (idx))

	)

83 
	#sk_PKCS7_SIGNER_INFO_£t
(
sk
, 
idx
, 
±r
Ë((
PKCS7_SIGNER_INFO
 *)
	`OPENSSL_sk_£t
(
	`os¶_check_PKCS7_SIGNER_INFO_sk_ty≥
(sk), (idx), 
	`os¶_check_PKCS7_SIGNER_INFO_ty≥
’å)))

	)

84 
	#sk_PKCS7_SIGNER_INFO_föd
(
sk
, 
±r
Ë
	`OPENSSL_sk_föd
(
	`os¶_check_PKCS7_SIGNER_INFO_sk_ty≥
(sk), 
	`os¶_check_PKCS7_SIGNER_INFO_ty≥
’å))

	)

85 
	#sk_PKCS7_SIGNER_INFO_föd_ex
(
sk
, 
±r
Ë
	`OPENSSL_sk_föd_ex
(
	`os¶_check_PKCS7_SIGNER_INFO_sk_ty≥
(sk), 
	`os¶_check_PKCS7_SIGNER_INFO_ty≥
’å))

	)

86 
	#sk_PKCS7_SIGNER_INFO_föd_Æl
(
sk
, 
±r
, 
≤um
Ë
	`OPENSSL_sk_föd_Æl
(
	`os¶_check_PKCS7_SIGNER_INFO_sk_ty≥
(sk), 
	`os¶_check_PKCS7_SIGNER_INFO_ty≥
’å),Önum)

	)

87 
	#sk_PKCS7_SIGNER_INFO_s‹t
(
sk
Ë
	`OPENSSL_sk_s‹t
(
	`os¶_check_PKCS7_SIGNER_INFO_sk_ty≥
(sk))

	)

88 
	#sk_PKCS7_SIGNER_INFO_is_s‹ãd
(
sk
Ë
	`OPENSSL_sk_is_s‹ãd
(
	`os¶_check_c⁄°_PKCS7_SIGNER_INFO_sk_ty≥
(sk))

	)

89 
	#sk_PKCS7_SIGNER_INFO_dup
(
sk
Ë((
	`STACK_OF
(
PKCS7_SIGNER_INFO
Ë*)
	`OPENSSL_sk_dup
(
	`os¶_check_c⁄°_PKCS7_SIGNER_INFO_sk_ty≥
(sk)))

	)

90 
	#sk_PKCS7_SIGNER_INFO_dìp_c›y
(
sk
, 
c›yfunc
, 
‰ìfunc
Ë((
	`STACK_OF
(
PKCS7_SIGNER_INFO
Ë*)
	`OPENSSL_sk_dìp_c›y
(
	`os¶_check_c⁄°_PKCS7_SIGNER_INFO_sk_ty≥
(sk), 
	`os¶_check_PKCS7_SIGNER_INFO_c›yfunc_ty≥
(c›yfunc), 
	`os¶_check_PKCS7_SIGNER_INFO_‰ìfunc_ty≥
(‰ìfunc)))

	)

91 
	#sk_PKCS7_SIGNER_INFO_£t_cmp_func
(
sk
, 
cmp
Ë((
sk_PKCS7_SIGNER_INFO_compfunc
)
	`OPENSSL_sk_£t_cmp_func
(
	`os¶_check_PKCS7_SIGNER_INFO_sk_ty≥
(sk), 
	`os¶_check_PKCS7_SIGNER_INFO_compfunc_ty≥
(cmp)))

	)

94 
	spkcs7_ªcù_öfo_°
 {

95 
ASN1_INTEGER
 *
vîsi⁄
;

96 
PKCS7_ISSUER_AND_SERIAL
 *
issuî_™d_£rül
;

97 
X509_ALGOR
 *
key_íc_Æg‹
;

98 
ASN1_OCTET_STRING
 *
íc_key
;

99 
X509
 *
˚π
;

100 c⁄° 
PKCS7_CTX
 *
˘x
;

101 } 
	tPKCS7_RECIP_INFO
;

102 
SKM_DEFINE_STACK_OF_INTERNAL
(
PKCS7_RECIP_INFO
, PKCS7_RECIP_INFO, PKCS7_RECIP_INFO)

103 
	#sk_PKCS7_RECIP_INFO_num
(
sk
Ë
	`OPENSSL_sk_num
(
	`os¶_check_c⁄°_PKCS7_RECIP_INFO_sk_ty≥
(sk))

	)

104 
	#sk_PKCS7_RECIP_INFO_vÆue
(
sk
, 
idx
Ë((
PKCS7_RECIP_INFO
 *)
	`OPENSSL_sk_vÆue
(
	`os¶_check_c⁄°_PKCS7_RECIP_INFO_sk_ty≥
(sk), (idx)))

	)

105 
	#sk_PKCS7_RECIP_INFO_√w
(
cmp
Ë((
	`STACK_OF
(
PKCS7_RECIP_INFO
Ë*)
	`OPENSSL_sk_√w
(
	`os¶_check_PKCS7_RECIP_INFO_compfunc_ty≥
(cmp)))

	)

106 
	#sk_PKCS7_RECIP_INFO_√w_nuŒ
(Ë((
	`STACK_OF
(
PKCS7_RECIP_INFO
Ë*)
	`OPENSSL_sk_√w_nuŒ
())

	)

107 
	#sk_PKCS7_RECIP_INFO_√w_ª£rve
(
cmp
, 
n
Ë((
	`STACK_OF
(
PKCS7_RECIP_INFO
Ë*)
	`OPENSSL_sk_√w_ª£rve
(
	`os¶_check_PKCS7_RECIP_INFO_compfunc_ty≥
(cmp), (n)))

	)

108 
	#sk_PKCS7_RECIP_INFO_ª£rve
(
sk
, 
n
Ë
	`OPENSSL_sk_ª£rve
(
	`os¶_check_PKCS7_RECIP_INFO_sk_ty≥
(sk), (n))

	)

109 
	#sk_PKCS7_RECIP_INFO_‰ì
(
sk
Ë
	`OPENSSL_sk_‰ì
(
	`os¶_check_PKCS7_RECIP_INFO_sk_ty≥
(sk))

	)

110 
	#sk_PKCS7_RECIP_INFO_zîo
(
sk
Ë
	`OPENSSL_sk_zîo
(
	`os¶_check_PKCS7_RECIP_INFO_sk_ty≥
(sk))

	)

111 
	#sk_PKCS7_RECIP_INFO_dñëe
(
sk
, 
i
Ë((
PKCS7_RECIP_INFO
 *)
	`OPENSSL_sk_dñëe
(
	`os¶_check_PKCS7_RECIP_INFO_sk_ty≥
(sk), (i)))

	)

112 
	#sk_PKCS7_RECIP_INFO_dñëe_±r
(
sk
, 
±r
Ë((
PKCS7_RECIP_INFO
 *)
	`OPENSSL_sk_dñëe_±r
(
	`os¶_check_PKCS7_RECIP_INFO_sk_ty≥
(sk), 
	`os¶_check_PKCS7_RECIP_INFO_ty≥
’å)))

	)

113 
	#sk_PKCS7_RECIP_INFO_push
(
sk
, 
±r
Ë
	`OPENSSL_sk_push
(
	`os¶_check_PKCS7_RECIP_INFO_sk_ty≥
(sk), 
	`os¶_check_PKCS7_RECIP_INFO_ty≥
’å))

	)

114 
	#sk_PKCS7_RECIP_INFO_unshi·
(
sk
, 
±r
Ë
	`OPENSSL_sk_unshi·
(
	`os¶_check_PKCS7_RECIP_INFO_sk_ty≥
(sk), 
	`os¶_check_PKCS7_RECIP_INFO_ty≥
’å))

	)

115 
	#sk_PKCS7_RECIP_INFO_p›
(
sk
Ë((
PKCS7_RECIP_INFO
 *)
	`OPENSSL_sk_p›
(
	`os¶_check_PKCS7_RECIP_INFO_sk_ty≥
(sk)))

	)

116 
	#sk_PKCS7_RECIP_INFO_shi·
(
sk
Ë((
PKCS7_RECIP_INFO
 *)
	`OPENSSL_sk_shi·
(
	`os¶_check_PKCS7_RECIP_INFO_sk_ty≥
(sk)))

	)

117 
	#sk_PKCS7_RECIP_INFO_p›_‰ì
(
sk
, 
‰ìfunc
Ë
	`OPENSSL_sk_p›_‰ì
(
	`os¶_check_PKCS7_RECIP_INFO_sk_ty≥
(sk),
	`os¶_check_PKCS7_RECIP_INFO_‰ìfunc_ty≥
(‰ìfunc))

	)

118 
	#sk_PKCS7_RECIP_INFO_ö£π
(
sk
, 
±r
, 
idx
Ë
	`OPENSSL_sk_ö£π
(
	`os¶_check_PKCS7_RECIP_INFO_sk_ty≥
(sk), 
	`os¶_check_PKCS7_RECIP_INFO_ty≥
’å), (idx))

	)

119 
	#sk_PKCS7_RECIP_INFO_£t
(
sk
, 
idx
, 
±r
Ë((
PKCS7_RECIP_INFO
 *)
	`OPENSSL_sk_£t
(
	`os¶_check_PKCS7_RECIP_INFO_sk_ty≥
(sk), (idx), 
	`os¶_check_PKCS7_RECIP_INFO_ty≥
’å)))

	)

120 
	#sk_PKCS7_RECIP_INFO_föd
(
sk
, 
±r
Ë
	`OPENSSL_sk_föd
(
	`os¶_check_PKCS7_RECIP_INFO_sk_ty≥
(sk), 
	`os¶_check_PKCS7_RECIP_INFO_ty≥
’å))

	)

121 
	#sk_PKCS7_RECIP_INFO_föd_ex
(
sk
, 
±r
Ë
	`OPENSSL_sk_föd_ex
(
	`os¶_check_PKCS7_RECIP_INFO_sk_ty≥
(sk), 
	`os¶_check_PKCS7_RECIP_INFO_ty≥
’å))

	)

122 
	#sk_PKCS7_RECIP_INFO_föd_Æl
(
sk
, 
±r
, 
≤um
Ë
	`OPENSSL_sk_föd_Æl
(
	`os¶_check_PKCS7_RECIP_INFO_sk_ty≥
(sk), 
	`os¶_check_PKCS7_RECIP_INFO_ty≥
’å),Önum)

	)

123 
	#sk_PKCS7_RECIP_INFO_s‹t
(
sk
Ë
	`OPENSSL_sk_s‹t
(
	`os¶_check_PKCS7_RECIP_INFO_sk_ty≥
(sk))

	)

124 
	#sk_PKCS7_RECIP_INFO_is_s‹ãd
(
sk
Ë
	`OPENSSL_sk_is_s‹ãd
(
	`os¶_check_c⁄°_PKCS7_RECIP_INFO_sk_ty≥
(sk))

	)

125 
	#sk_PKCS7_RECIP_INFO_dup
(
sk
Ë((
	`STACK_OF
(
PKCS7_RECIP_INFO
Ë*)
	`OPENSSL_sk_dup
(
	`os¶_check_c⁄°_PKCS7_RECIP_INFO_sk_ty≥
(sk)))

	)

126 
	#sk_PKCS7_RECIP_INFO_dìp_c›y
(
sk
, 
c›yfunc
, 
‰ìfunc
Ë((
	`STACK_OF
(
PKCS7_RECIP_INFO
Ë*)
	`OPENSSL_sk_dìp_c›y
(
	`os¶_check_c⁄°_PKCS7_RECIP_INFO_sk_ty≥
(sk), 
	`os¶_check_PKCS7_RECIP_INFO_c›yfunc_ty≥
(c›yfunc), 
	`os¶_check_PKCS7_RECIP_INFO_‰ìfunc_ty≥
(‰ìfunc)))

	)

127 
	#sk_PKCS7_RECIP_INFO_£t_cmp_func
(
sk
, 
cmp
Ë((
sk_PKCS7_RECIP_INFO_compfunc
)
	`OPENSSL_sk_£t_cmp_func
(
	`os¶_check_PKCS7_RECIP_INFO_sk_ty≥
(sk), 
	`os¶_check_PKCS7_RECIP_INFO_compfunc_ty≥
(cmp)))

	)

131 
	spkcs7_sig√d_°
 {

132 
ASN1_INTEGER
 *
vîsi⁄
;

133 
STACK_OF
(
X509_ALGOR
Ë*
md_Ægs
;

134 
STACK_OF
(
X509
Ë*
˚π
;

135 
STACK_OF
(
X509_CRL
Ë*
¸l
;

136 
STACK_OF
(
PKCS7_SIGNER_INFO
Ë*
sig√r_öfo
;

137 
pkcs7_°
 *
c⁄ã¡s
;

138 } 
	tPKCS7_SIGNED
;

144 
	spkcs7_íc_c⁄ã¡_°
 {

145 
ASN1_OBJECT
 *
c⁄ã¡_ty≥
;

146 
X509_ALGOR
 *
Æg‹ôhm
;

147 
ASN1_OCTET_STRING
 *
íc_d©a
;

148 c⁄° 
EVP_CIPHER
 *
cùhî
;

149 c⁄° 
PKCS7_CTX
 *
˘x
;

150 } 
	tPKCS7_ENC_CONTENT
;

152 
	spkcs7_ívñ›ed_°
 {

153 
ASN1_INTEGER
 *
vîsi⁄
;

154 
STACK_OF
(
PKCS7_RECIP_INFO
Ë*
ªcùõ¡öfo
;

155 
PKCS7_ENC_CONTENT
 *
íc_d©a
;

156 } 
	tPKCS7_ENVELOPE
;

158 
	spkcs7_sig√d™dívñ›ed_°
 {

159 
ASN1_INTEGER
 *
vîsi⁄
;

160 
STACK_OF
(
X509_ALGOR
Ë*
md_Ægs
;

161 
STACK_OF
(
X509
Ë*
˚π
;

162 
STACK_OF
(
X509_CRL
Ë*
¸l
;

163 
STACK_OF
(
PKCS7_SIGNER_INFO
Ë*
sig√r_öfo
;

164 
PKCS7_ENC_CONTENT
 *
íc_d©a
;

165 
STACK_OF
(
PKCS7_RECIP_INFO
Ë*
ªcùõ¡öfo
;

166 } 
	tPKCS7_SIGN_ENVELOPE
;

168 
	spkcs7_dige°_°
 {

169 
ASN1_INTEGER
 *
vîsi⁄
;

170 
X509_ALGOR
 *
md
;

171 
pkcs7_°
 *
c⁄ã¡s
;

172 
ASN1_OCTET_STRING
 *
dige°
;

173 } 
	tPKCS7_DIGEST
;

175 
	spkcs7_í¸y±ed_°
 {

176 
ASN1_INTEGER
 *
vîsi⁄
;

177 
PKCS7_ENC_CONTENT
 *
íc_d©a
;

178 } 
	tPKCS7_ENCRYPT
;

180 
	spkcs7_°
 {

185 *
a¢1
;

186 
Àngth
;

187 
	#PKCS7_S_HEADER
 0

	)

188 
	#PKCS7_S_BODY
 1

	)

189 
	#PKCS7_S_TAIL
 2

	)

190 
°©e
;

191 
dëached
;

192 
ASN1_OBJECT
 *
ty≥
;

199 *
±r
;

201 
ASN1_OCTET_STRING
 *
d©a
;

203 
PKCS7_SIGNED
 *
sign
;

205 
PKCS7_ENVELOPE
 *
ívñ›ed
;

207 
PKCS7_SIGN_ENVELOPE
 *
sig√d_™d_ívñ›ed
;

209 
PKCS7_DIGEST
 *
dige°
;

211 
PKCS7_ENCRYPT
 *
í¸y±ed
;

213 
ASN1_TYPE
 *
Ÿhî
;

214 } 
d
;

215 
PKCS7_CTX
 
˘x
;

216 } 
	tPKCS7
;

217 
SKM_DEFINE_STACK_OF_INTERNAL
(
PKCS7
, PKCS7, PKCS7)

218 
	#sk_PKCS7_num
(
sk
Ë
	`OPENSSL_sk_num
(
	`os¶_check_c⁄°_PKCS7_sk_ty≥
(sk))

	)

219 
	#sk_PKCS7_vÆue
(
sk
, 
idx
Ë((
PKCS7
 *)
	`OPENSSL_sk_vÆue
(
	`os¶_check_c⁄°_PKCS7_sk_ty≥
(sk), (idx)))

	)

220 
	#sk_PKCS7_√w
(
cmp
Ë((
	`STACK_OF
(
PKCS7
Ë*)
	`OPENSSL_sk_√w
(
	`os¶_check_PKCS7_compfunc_ty≥
(cmp)))

	)

221 
	#sk_PKCS7_√w_nuŒ
(Ë((
	`STACK_OF
(
PKCS7
Ë*)
	`OPENSSL_sk_√w_nuŒ
())

	)

222 
	#sk_PKCS7_√w_ª£rve
(
cmp
, 
n
Ë((
	`STACK_OF
(
PKCS7
Ë*)
	`OPENSSL_sk_√w_ª£rve
(
	`os¶_check_PKCS7_compfunc_ty≥
(cmp), (n)))

	)

223 
	#sk_PKCS7_ª£rve
(
sk
, 
n
Ë
	`OPENSSL_sk_ª£rve
(
	`os¶_check_PKCS7_sk_ty≥
(sk), (n))

	)

224 
	#sk_PKCS7_‰ì
(
sk
Ë
	`OPENSSL_sk_‰ì
(
	`os¶_check_PKCS7_sk_ty≥
(sk))

	)

225 
	#sk_PKCS7_zîo
(
sk
Ë
	`OPENSSL_sk_zîo
(
	`os¶_check_PKCS7_sk_ty≥
(sk))

	)

226 
	#sk_PKCS7_dñëe
(
sk
, 
i
Ë((
PKCS7
 *)
	`OPENSSL_sk_dñëe
(
	`os¶_check_PKCS7_sk_ty≥
(sk), (i)))

	)

227 
	#sk_PKCS7_dñëe_±r
(
sk
, 
±r
Ë((
PKCS7
 *)
	`OPENSSL_sk_dñëe_±r
(
	`os¶_check_PKCS7_sk_ty≥
(sk), 
	`os¶_check_PKCS7_ty≥
’å)))

	)

228 
	#sk_PKCS7_push
(
sk
, 
±r
Ë
	`OPENSSL_sk_push
(
	`os¶_check_PKCS7_sk_ty≥
(sk), 
	`os¶_check_PKCS7_ty≥
’å))

	)

229 
	#sk_PKCS7_unshi·
(
sk
, 
±r
Ë
	`OPENSSL_sk_unshi·
(
	`os¶_check_PKCS7_sk_ty≥
(sk), 
	`os¶_check_PKCS7_ty≥
’å))

	)

230 
	#sk_PKCS7_p›
(
sk
Ë((
PKCS7
 *)
	`OPENSSL_sk_p›
(
	`os¶_check_PKCS7_sk_ty≥
(sk)))

	)

231 
	#sk_PKCS7_shi·
(
sk
Ë((
PKCS7
 *)
	`OPENSSL_sk_shi·
(
	`os¶_check_PKCS7_sk_ty≥
(sk)))

	)

232 
	#sk_PKCS7_p›_‰ì
(
sk
, 
‰ìfunc
Ë
	`OPENSSL_sk_p›_‰ì
(
	`os¶_check_PKCS7_sk_ty≥
(sk),
	`os¶_check_PKCS7_‰ìfunc_ty≥
(‰ìfunc))

	)

233 
	#sk_PKCS7_ö£π
(
sk
, 
±r
, 
idx
Ë
	`OPENSSL_sk_ö£π
(
	`os¶_check_PKCS7_sk_ty≥
(sk), 
	`os¶_check_PKCS7_ty≥
’å), (idx))

	)

234 
	#sk_PKCS7_£t
(
sk
, 
idx
, 
±r
Ë((
PKCS7
 *)
	`OPENSSL_sk_£t
(
	`os¶_check_PKCS7_sk_ty≥
(sk), (idx), 
	`os¶_check_PKCS7_ty≥
’å)))

	)

235 
	#sk_PKCS7_föd
(
sk
, 
±r
Ë
	`OPENSSL_sk_föd
(
	`os¶_check_PKCS7_sk_ty≥
(sk), 
	`os¶_check_PKCS7_ty≥
’å))

	)

236 
	#sk_PKCS7_föd_ex
(
sk
, 
±r
Ë
	`OPENSSL_sk_föd_ex
(
	`os¶_check_PKCS7_sk_ty≥
(sk), 
	`os¶_check_PKCS7_ty≥
’å))

	)

237 
	#sk_PKCS7_föd_Æl
(
sk
, 
±r
, 
≤um
Ë
	`OPENSSL_sk_föd_Æl
(
	`os¶_check_PKCS7_sk_ty≥
(sk), 
	`os¶_check_PKCS7_ty≥
’å),Önum)

	)

238 
	#sk_PKCS7_s‹t
(
sk
Ë
	`OPENSSL_sk_s‹t
(
	`os¶_check_PKCS7_sk_ty≥
(sk))

	)

239 
	#sk_PKCS7_is_s‹ãd
(
sk
Ë
	`OPENSSL_sk_is_s‹ãd
(
	`os¶_check_c⁄°_PKCS7_sk_ty≥
(sk))

	)

240 
	#sk_PKCS7_dup
(
sk
Ë((
	`STACK_OF
(
PKCS7
Ë*)
	`OPENSSL_sk_dup
(
	`os¶_check_c⁄°_PKCS7_sk_ty≥
(sk)))

	)

241 
	#sk_PKCS7_dìp_c›y
(
sk
, 
c›yfunc
, 
‰ìfunc
Ë((
	`STACK_OF
(
PKCS7
Ë*)
	`OPENSSL_sk_dìp_c›y
(
	`os¶_check_c⁄°_PKCS7_sk_ty≥
(sk), 
	`os¶_check_PKCS7_c›yfunc_ty≥
(c›yfunc), 
	`os¶_check_PKCS7_‰ìfunc_ty≥
(‰ìfunc)))

	)

242 
	#sk_PKCS7_£t_cmp_func
(
sk
, 
cmp
Ë((
sk_PKCS7_compfunc
)
	`OPENSSL_sk_£t_cmp_func
(
	`os¶_check_PKCS7_sk_ty≥
(sk), 
	`os¶_check_PKCS7_compfunc_ty≥
(cmp)))

	)

246 
	#PKCS7_OP_SET_DETACHED_SIGNATURE
 1

	)

247 
	#PKCS7_OP_GET_DETACHED_SIGNATURE
 2

	)

249 
	#PKCS7_gë_sig√d_©åibuãs
(
si
Ë((si)->
auth_©å
)

	)

250 
	#PKCS7_gë_©åibuãs
(
si
Ë((si)->
u«uth_©å
)

	)

252 
	#PKCS7_ty≥_is_sig√d
(
a
Ë(
	`OBJ_obj2nid
(◊)->
ty≥
Ë=
NID_pkcs7_sig√d
)

	)

253 
	#PKCS7_ty≥_is_í¸y±ed
(
a
Ë(
	`OBJ_obj2nid
(◊)->
ty≥
Ë=
NID_pkcs7_í¸y±ed
)

	)

254 
	#PKCS7_ty≥_is_ívñ›ed
(
a
Ë(
	`OBJ_obj2nid
(◊)->
ty≥
Ë=
NID_pkcs7_ívñ›ed
)

	)

255 
	#PKCS7_ty≥_is_sig√dAndEnvñ›ed
(
a
) \

256 (
	`OBJ_obj2nid
((
a
)->
ty≥
Ë=
NID_pkcs7_sig√dAndEnvñ›ed
)

	)

257 
	#PKCS7_ty≥_is_d©a
(
a
Ë(
	`OBJ_obj2nid
(◊)->
ty≥
Ë=
NID_pkcs7_d©a
)

	)

258 
	#PKCS7_ty≥_is_dige°
(
a
Ë(
	`OBJ_obj2nid
(◊)->
ty≥
Ë=
NID_pkcs7_dige°
)

	)

260 
	#PKCS7_£t_dëached
(
p
,
v
) \

261 
	`PKCS7_˘æ
(
p
,
PKCS7_OP_SET_DETACHED_SIGNATURE
,
v
,
NULL
)

	)

262 
	#PKCS7_gë_dëached
(
p
) \

263 
	`PKCS7_˘æ
(
p
,
PKCS7_OP_GET_DETACHED_SIGNATURE
,0,
NULL
)

	)

265 
	#PKCS7_is_dëached
(
p7
Ë(
	`PKCS7_ty≥_is_sig√d
’7Ë&& 
	`PKCS7_gë_dëached
’7))

	)

269 
	#PKCS7_TEXT
 0x1

	)

270 
	#PKCS7_NOCERTS
 0x2

	)

271 
	#PKCS7_NOSIGS
 0x4

	)

272 
	#PKCS7_NOCHAIN
 0x8

	)

273 
	#PKCS7_NOINTERN
 0x10

	)

274 
	#PKCS7_NOVERIFY
 0x20

	)

275 
	#PKCS7_DETACHED
 0x40

	)

276 
	#PKCS7_BINARY
 0x80

	)

277 
	#PKCS7_NOATTR
 0x100

	)

278 
	#PKCS7_NOSMIMECAP
 0x200

	)

279 
	#PKCS7_NOOLDMIMETYPE
 0x400

	)

280 
	#PKCS7_CRLFEOL
 0x800

	)

281 
	#PKCS7_STREAM
 0x1000

	)

282 
	#PKCS7_NOCRL
 0x2000

	)

283 
	#PKCS7_PARTIAL
 0x4000

	)

284 
	#PKCS7_REUSE_DIGEST
 0x8000

	)

285 
	#PKCS7_NO_DUAL_CONTENT
 0x10000

	)

289 
	#SMIME_TEXT
 
PKCS7_TEXT


	)

290 
	#SMIME_NOCERTS
 
PKCS7_NOCERTS


	)

291 
	#SMIME_NOSIGS
 
PKCS7_NOSIGS


	)

292 
	#SMIME_NOCHAIN
 
PKCS7_NOCHAIN


	)

293 
	#SMIME_NOINTERN
 
PKCS7_NOINTERN


	)

294 
	#SMIME_NOVERIFY
 
PKCS7_NOVERIFY


	)

295 
	#SMIME_DETACHED
 
PKCS7_DETACHED


	)

296 
	#SMIME_BINARY
 
PKCS7_BINARY


	)

297 
	#SMIME_NOATTR
 
PKCS7_NOATTR


	)

300 
	#SMIME_ASCIICRLF
 0x80000

	)

302 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_ISSUER_AND_SERIAL
)

304 
PKCS7_ISSUER_AND_SERIAL_dige°
(
PKCS7_ISSUER_AND_SERIAL
 *
d©a
,

305 c⁄° 
EVP_MD
 *
ty≥
, *
md
,

306 *
Àn
);

307 #i‚de‡
OPENSSL_NO_STDIO


308 
PKCS7
 *
d2i_PKCS7_Â
(
FILE
 *
Â
, PKCS7 **
p7
);

309 
i2d_PKCS7_Â
(
FILE
 *
Â
, c⁄° 
PKCS7
 *
p7
);

311 
DECLARE_ASN1_DUP_FUNCTION
(
PKCS7
)

312 
PKCS7
 *
d2i_PKCS7_bio
(
BIO
 *
bp
, PKCS7 **
p7
);

313 
i2d_PKCS7_bio
(
BIO
 *
bp
, c⁄° 
PKCS7
 *
p7
);

314 
i2d_PKCS7_bio_°ªam
(
BIO
 *
out
, 
PKCS7
 *
p7
, BIO *
ö
, 
Êags
);

315 
PEM_wrôe_bio_PKCS7_°ªam
(
BIO
 *
out
, 
PKCS7
 *
p7
, BIO *
ö
, 
Êags
);

317 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_SIGNER_INFO
)

318 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_RECIP_INFO
)

319 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_SIGNED
)

320 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_ENC_CONTENT
)

321 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_ENVELOPE
)

322 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_SIGN_ENVELOPE
)

323 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_DIGEST
)

324 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_ENCRYPT
)

325 
DECLARE_ASN1_FUNCTIONS
(
PKCS7
)

326 
PKCS7
 *
PKCS7_√w_ex
(
OSSL_LIB_CTX
 *
lib˘x
, c⁄° *
¥›q
);

328 
DECLARE_ASN1_ITEM
(
PKCS7_ATTR_SIGN
)

329 
DECLARE_ASN1_ITEM
(
PKCS7_ATTR_VERIFY
)

331 
DECLARE_ASN1_NDEF_FUNCTION
(
PKCS7
)

332 
DECLARE_ASN1_PRINT_FUNCTION
(
PKCS7
)

334 
PKCS7_˘æ
(
PKCS7
 *
p7
, 
cmd
, 
œrg
, *
∑rg
);

336 
PKCS7_ty≥_is_Ÿhî
(
PKCS7
 *
p7
);

337 
PKCS7_£t_ty≥
(
PKCS7
 *
p7
, 
ty≥
);

338 
PKCS7_£t0_ty≥_Ÿhî
(
PKCS7
 *
p7
, 
ty≥
, 
ASN1_TYPE
 *
Ÿhî
);

339 
PKCS7_£t_c⁄ã¡
(
PKCS7
 *
p7
, PKCS7 *
p7_d©a
);

340 
PKCS7_SIGNER_INFO_£t
(
PKCS7_SIGNER_INFO
 *
p7i
, 
X509
 *
x509
, 
EVP_PKEY
 *
pkey
,

341 c⁄° 
EVP_MD
 *
dg°
);

342 
PKCS7_SIGNER_INFO_sign
(
PKCS7_SIGNER_INFO
 *
si
);

343 
PKCS7_add_sig√r
(
PKCS7
 *
p7
, 
PKCS7_SIGNER_INFO
 *
p7i
);

344 
PKCS7_add_˚πifiˇã
(
PKCS7
 *
p7
, 
X509
 *
x509
);

345 
PKCS7_add_¸l
(
PKCS7
 *
p7
, 
X509_CRL
 *
x509
);

346 
PKCS7_c⁄ã¡_√w
(
PKCS7
 *
p7
, 
nid
);

347 
PKCS7_d©aVîify
(
X509_STORE
 *
˚π_°‹e
, 
X509_STORE_CTX
 *
˘x
,

348 
BIO
 *
bio
, 
PKCS7
 *
p7
, 
PKCS7_SIGNER_INFO
 *
si
);

349 
PKCS7_sig«tuªVîify
(
BIO
 *
bio
, 
PKCS7
 *
p7
, 
PKCS7_SIGNER_INFO
 *
si
,

350 
X509
 *
x509
);

352 
BIO
 *
PKCS7_d©aInô
(
PKCS7
 *
p7
, BIO *
bio
);

353 
PKCS7_d©aFöÆ
(
PKCS7
 *
p7
, 
BIO
 *
bio
);

354 
BIO
 *
PKCS7_d©aDecode
(
PKCS7
 *
p7
, 
EVP_PKEY
 *
pkey
, BIO *
ö_bio
, 
X509
 *
p˚π
);

356 
PKCS7_SIGNER_INFO
 *
PKCS7_add_sig«tuª
(
PKCS7
 *
p7
, 
X509
 *
x509
,

357 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
dg°
);

358 
X509
 *
PKCS7_˚π_‰om_sig√r_öfo
(
PKCS7
 *
p7
, 
PKCS7_SIGNER_INFO
 *
si
);

359 
PKCS7_£t_dige°
(
PKCS7
 *
p7
, c⁄° 
EVP_MD
 *
md
);

360 
STACK_OF
(
PKCS7_SIGNER_INFO
Ë*
PKCS7_gë_sig√r_öfo
(
PKCS7
 *
p7
);

362 
PKCS7_RECIP_INFO
 *
PKCS7_add_ªcùõ¡
(
PKCS7
 *
p7
, 
X509
 *
x509
);

363 
PKCS7_SIGNER_INFO_gë0_Ægs
(
PKCS7_SIGNER_INFO
 *
si
, 
EVP_PKEY
 **
pk
,

364 
X509_ALGOR
 **
pdig
, X509_ALGOR **
psig
);

365 
PKCS7_RECIP_INFO_gë0_Æg
(
PKCS7_RECIP_INFO
 *
ri
, 
X509_ALGOR
 **
≥nc
);

366 
PKCS7_add_ªcùõ¡_öfo
(
PKCS7
 *
p7
, 
PKCS7_RECIP_INFO
 *
ri
);

367 
PKCS7_RECIP_INFO_£t
(
PKCS7_RECIP_INFO
 *
p7i
, 
X509
 *
x509
);

368 
PKCS7_£t_cùhî
(
PKCS7
 *
p7
, c⁄° 
EVP_CIPHER
 *
cùhî
);

369 
PKCS7_°ªam
(***
bound¨y
, 
PKCS7
 *
p7
);

371 
PKCS7_ISSUER_AND_SERIAL
 *
PKCS7_gë_issuî_™d_£rül
(
PKCS7
 *
p7
, 
idx
);

372 
ASN1_OCTET_STRING
 *
PKCS7_gë_o˘ë_°rög
(
PKCS7
 *
p7
);

373 
ASN1_OCTET_STRING
 *
PKCS7_dige°_‰om_©åibuãs
(
STACK_OF
(
X509_ATTRIBUTE
Ë*
sk
);

374 
PKCS7_add_sig√d_©åibuã
(
PKCS7_SIGNER_INFO
 *
p7si
, 
nid
, 
ty≥
,

375 *
d©a
);

376 
PKCS7_add_©åibuã
(
PKCS7_SIGNER_INFO
 *
p7si
, 
nid
, 
©πy≥
,

377 *
vÆue
);

378 
ASN1_TYPE
 *
PKCS7_gë_©åibuã
(c⁄° 
PKCS7_SIGNER_INFO
 *
si
, 
nid
);

379 
ASN1_TYPE
 *
PKCS7_gë_sig√d_©åibuã
(c⁄° 
PKCS7_SIGNER_INFO
 *
si
, 
nid
);

380 
PKCS7_£t_sig√d_©åibuãs
(
PKCS7_SIGNER_INFO
 *
p7si
,

381 
STACK_OF
(
X509_ATTRIBUTE
Ë*
sk
);

382 
PKCS7_£t_©åibuãs
(
PKCS7_SIGNER_INFO
 *
p7si
,

383 
STACK_OF
(
X509_ATTRIBUTE
Ë*
sk
);

385 
PKCS7
 *
PKCS7_sign
(
X509
 *
sign˚π
, 
EVP_PKEY
 *
pkey
, 
STACK_OF
(X509Ë*
˚πs
,

386 
BIO
 *
d©a
, 
Êags
);

387 
PKCS7
 *
PKCS7_sign_ex
(
X509
 *
sign˚π
, 
EVP_PKEY
 *
pkey
, 
STACK_OF
(X509Ë*
˚πs
,

388 
BIO
 *
d©a
, 
Êags
, 
OSSL_LIB_CTX
 *
lib˘x
,

389 c⁄° *
¥›q
);

391 
PKCS7_SIGNER_INFO
 *
PKCS7_sign_add_sig√r
(
PKCS7
 *
p7
,

392 
X509
 *
sign˚π
, 
EVP_PKEY
 *
pkey
,

393 c⁄° 
EVP_MD
 *
md
, 
Êags
);

395 
PKCS7_föÆ
(
PKCS7
 *
p7
, 
BIO
 *
d©a
, 
Êags
);

396 
PKCS7_vîify
(
PKCS7
 *
p7
, 
STACK_OF
(
X509
Ë*
˚πs
, 
X509_STORE
 *
°‹e
,

397 
BIO
 *
öd©a
, BIO *
out
, 
Êags
);

398 
STACK_OF
(
X509
Ë*
PKCS7_gë0_sig√rs
(
PKCS7
 *
p7
, STACK_OF(X509Ë*
˚πs
,

399 
Êags
);

400 
PKCS7
 *
PKCS7_í¸y±
(
STACK_OF
(
X509
Ë*
˚πs
, 
BIO
 *
ö
, c⁄° 
EVP_CIPHER
 *
cùhî
,

401 
Êags
);

402 
PKCS7
 *
PKCS7_í¸y±_ex
(
STACK_OF
(
X509
Ë*
˚πs
, 
BIO
 *
ö
,

403 c⁄° 
EVP_CIPHER
 *
cùhî
, 
Êags
,

404 
OSSL_LIB_CTX
 *
lib˘x
, c⁄° *
¥›q
);

405 
PKCS7_de¸y±
(
PKCS7
 *
p7
, 
EVP_PKEY
 *
pkey
, 
X509
 *
˚π
, 
BIO
 *
d©a
,

406 
Êags
);

408 
PKCS7_add_©åib_smimeˇp
(
PKCS7_SIGNER_INFO
 *
si
,

409 
STACK_OF
(
X509_ALGOR
Ë*
ˇp
);

410 
STACK_OF
(
X509_ALGOR
Ë*
PKCS7_gë_smimeˇp
(
PKCS7_SIGNER_INFO
 *
si
);

411 
PKCS7_sim∂e_smimeˇp
(
STACK_OF
(
X509_ALGOR
Ë*
sk
, 
nid
, 
¨g
);

413 
PKCS7_add_©åib_c⁄ã¡_ty≥
(
PKCS7_SIGNER_INFO
 *
si
, 
ASN1_OBJECT
 *
coid
);

414 
PKCS7_add0_©åib_signög_time
(
PKCS7_SIGNER_INFO
 *
si
, 
ASN1_TIME
 *
t
);

415 
PKCS7_add1_©åib_dige°
(
PKCS7_SIGNER_INFO
 *
si
,

416 c⁄° *
md
, 
mdÀn
);

418 
SMIME_wrôe_PKCS7
(
BIO
 *
bio
, 
PKCS7
 *
p7
, BIO *
d©a
, 
Êags
);

419 
PKCS7
 *
SMIME_ªad_PKCS7_ex
(
BIO
 *
bio
, BIO **
bc⁄t
, PKCS7 **
p7
);

420 
PKCS7
 *
SMIME_ªad_PKCS7
(
BIO
 *
bio
, BIO **
bc⁄t
);

422 
BIO
 *
BIO_√w_PKCS7
(BIO *
out
, 
PKCS7
 *
p7
);

424 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/prov_ssl.h

10 #i‚de‡
OPENSSL_PROV_SSL_H


11 
	#OPENSSL_PROV_SSL_H


	)

12 #¥agm®
⁄˚


14 #ifde‡
__˝lu•lus


20 
	#SSL_MAX_MASTER_KEY_LENGTH
 48

	)

22 
	#SSL3_VERSION
 0x0300

	)

23 
	#TLS1_VERSION
 0x0301

	)

24 
	#TLS1_1_VERSION
 0x0302

	)

25 
	#TLS1_2_VERSION
 0x0303

	)

26 
	#TLS1_3_VERSION
 0x0304

	)

27 
	#DTLS1_VERSION
 0xFEFF

	)

28 
	#DTLS1_2_VERSION
 0xFEFD

	)

29 
	#DTLS1_BAD_VER
 0x0100

	)

31 #ifde‡
__˝lu•lus


	@/usr/include/openssl/randerr.h

11 #i‚de‡
OPENSSL_RANDERR_H


12 
	#OPENSSL_RANDERR_H


	)

13 #¥agm®
⁄˚


15 
	~<›ís¶/›ís¶c⁄f.h
>

16 
	~<›ís¶/symhacks.h
>

17 
	~<›ís¶/¸y±€º_Àgacy.h
>

24 
	#RAND_R_ADDITIONAL_INPUT_TOO_LONG
 102

	)

25 
	#RAND_R_ALREADY_INSTANTIATED
 103

	)

26 
	#RAND_R_ARGUMENT_OUT_OF_RANGE
 105

	)

27 
	#RAND_R_CANNOT_OPEN_FILE
 121

	)

28 
	#RAND_R_DRBG_ALREADY_INITIALIZED
 129

	)

29 
	#RAND_R_DRBG_NOT_INITIALISED
 104

	)

30 
	#RAND_R_ENTROPY_INPUT_TOO_LONG
 106

	)

31 
	#RAND_R_ENTROPY_OUT_OF_RANGE
 124

	)

32 
	#RAND_R_ERROR_ENTROPY_POOL_WAS_IGNORED
 127

	)

33 
	#RAND_R_ERROR_INITIALISING_DRBG
 107

	)

34 
	#RAND_R_ERROR_INSTANTIATING_DRBG
 108

	)

35 
	#RAND_R_ERROR_RETRIEVING_ADDITIONAL_INPUT
 109

	)

36 
	#RAND_R_ERROR_RETRIEVING_ENTROPY
 110

	)

37 
	#RAND_R_ERROR_RETRIEVING_NONCE
 111

	)

38 
	#RAND_R_FAILED_TO_CREATE_LOCK
 126

	)

39 
	#RAND_R_FUNC_NOT_IMPLEMENTED
 101

	)

40 
	#RAND_R_FWRITE_ERROR
 123

	)

41 
	#RAND_R_GENERATE_ERROR
 112

	)

42 
	#RAND_R_INSUFFICIENT_DRBG_STRENGTH
 139

	)

43 
	#RAND_R_INTERNAL_ERROR
 113

	)

44 
	#RAND_R_IN_ERROR_STATE
 114

	)

45 
	#RAND_R_NOT_A_REGULAR_FILE
 122

	)

46 
	#RAND_R_NOT_INSTANTIATED
 115

	)

47 
	#RAND_R_NO_DRBG_IMPLEMENTATION_SELECTED
 128

	)

48 
	#RAND_R_PARENT_LOCKING_NOT_ENABLED
 130

	)

49 
	#RAND_R_PARENT_STRENGTH_TOO_WEAK
 131

	)

50 
	#RAND_R_PERSONALISATION_STRING_TOO_LONG
 116

	)

51 
	#RAND_R_PREDICTION_RESISTANCE_NOT_SUPPORTED
 133

	)

52 
	#RAND_R_PRNG_NOT_SEEDED
 100

	)

53 
	#RAND_R_RANDOM_POOL_OVERFLOW
 125

	)

54 
	#RAND_R_RANDOM_POOL_UNDERFLOW
 134

	)

55 
	#RAND_R_REQUEST_TOO_LARGE_FOR_DRBG
 117

	)

56 
	#RAND_R_RESEED_ERROR
 118

	)

57 
	#RAND_R_SELFTEST_FAILURE
 119

	)

58 
	#RAND_R_TOO_LITTLE_NONCE_REQUESTED
 135

	)

59 
	#RAND_R_TOO_MUCH_NONCE_REQUESTED
 136

	)

60 
	#RAND_R_UNABLE_TO_CREATE_DRBG
 143

	)

61 
	#RAND_R_UNABLE_TO_FETCH_DRBG
 144

	)

62 
	#RAND_R_UNABLE_TO_GET_PARENT_RESEED_PROP_COUNTER
 141

	)

63 
	#RAND_R_UNABLE_TO_GET_PARENT_STRENGTH
 138

	)

64 
	#RAND_R_UNABLE_TO_LOCK_PARENT
 140

	)

65 
	#RAND_R_UNSUPPORTED_DRBG_FLAGS
 132

	)

66 
	#RAND_R_UNSUPPORTED_DRBG_TYPE
 120

	)

	@/usr/include/openssl/rsaerr.h

11 #i‚de‡
OPENSSL_RSAERR_H


12 
	#OPENSSL_RSAERR_H


	)

13 #¥agm®
⁄˚


15 
	~<›ís¶/›ís¶c⁄f.h
>

16 
	~<›ís¶/symhacks.h
>

17 
	~<›ís¶/¸y±€º_Àgacy.h
>

24 
	#RSA_R_ALGORITHM_MISMATCH
 100

	)

25 
	#RSA_R_BAD_E_VALUE
 101

	)

26 
	#RSA_R_BAD_FIXED_HEADER_DECRYPT
 102

	)

27 
	#RSA_R_BAD_PAD_BYTE_COUNT
 103

	)

28 
	#RSA_R_BAD_SIGNATURE
 104

	)

29 
	#RSA_R_BLOCK_TYPE_IS_NOT_01
 106

	)

30 
	#RSA_R_BLOCK_TYPE_IS_NOT_02
 107

	)

31 
	#RSA_R_DATA_GREATER_THAN_MOD_LEN
 108

	)

32 
	#RSA_R_DATA_TOO_LARGE
 109

	)

33 
	#RSA_R_DATA_TOO_LARGE_FOR_KEY_SIZE
 110

	)

34 
	#RSA_R_DATA_TOO_LARGE_FOR_MODULUS
 132

	)

35 
	#RSA_R_DATA_TOO_SMALL
 111

	)

36 
	#RSA_R_DATA_TOO_SMALL_FOR_KEY_SIZE
 122

	)

37 
	#RSA_R_DIGEST_DOES_NOT_MATCH
 158

	)

38 
	#RSA_R_DIGEST_NOT_ALLOWED
 145

	)

39 
	#RSA_R_DIGEST_TOO_BIG_FOR_RSA_KEY
 112

	)

40 
	#RSA_R_DMP1_NOT_CONGRUENT_TO_D
 124

	)

41 
	#RSA_R_DMQ1_NOT_CONGRUENT_TO_D
 125

	)

42 
	#RSA_R_D_E_NOT_CONGRUENT_TO_1
 123

	)

43 
	#RSA_R_FIRST_OCTET_INVALID
 133

	)

44 
	#RSA_R_ILLEGAL_OR_UNSUPPORTED_PADDING_MODE
 144

	)

45 
	#RSA_R_INVALID_DIGEST
 157

	)

46 
	#RSA_R_INVALID_DIGEST_LENGTH
 143

	)

47 
	#RSA_R_INVALID_HEADER
 137

	)

48 
	#RSA_R_INVALID_KEYPAIR
 171

	)

49 
	#RSA_R_INVALID_KEY_LENGTH
 173

	)

50 
	#RSA_R_INVALID_LABEL
 160

	)

51 
	#RSA_R_INVALID_LENGTH
 181

	)

52 
	#RSA_R_INVALID_MESSAGE_LENGTH
 131

	)

53 
	#RSA_R_INVALID_MGF1_MD
 156

	)

54 
	#RSA_R_INVALID_MODULUS
 174

	)

55 
	#RSA_R_INVALID_MULTI_PRIME_KEY
 167

	)

56 
	#RSA_R_INVALID_OAEP_PARAMETERS
 161

	)

57 
	#RSA_R_INVALID_PADDING
 138

	)

58 
	#RSA_R_INVALID_PADDING_MODE
 141

	)

59 
	#RSA_R_INVALID_PSS_PARAMETERS
 149

	)

60 
	#RSA_R_INVALID_PSS_SALTLEN
 146

	)

61 
	#RSA_R_INVALID_REQUEST
 175

	)

62 
	#RSA_R_INVALID_SALT_LENGTH
 150

	)

63 
	#RSA_R_INVALID_STRENGTH
 176

	)

64 
	#RSA_R_INVALID_TRAILER
 139

	)

65 
	#RSA_R_INVALID_X931_DIGEST
 142

	)

66 
	#RSA_R_IQMP_NOT_INVERSE_OF_Q
 126

	)

67 
	#RSA_R_KEY_PRIME_NUM_INVALID
 165

	)

68 
	#RSA_R_KEY_SIZE_TOO_SMALL
 120

	)

69 
	#RSA_R_LAST_OCTET_INVALID
 134

	)

70 
	#RSA_R_MGF1_DIGEST_NOT_ALLOWED
 152

	)

71 
	#RSA_R_MISSING_PRIVATE_KEY
 179

	)

72 
	#RSA_R_MODULUS_TOO_LARGE
 105

	)

73 
	#RSA_R_MP_COEFFICIENT_NOT_INVERSE_OF_R
 168

	)

74 
	#RSA_R_MP_EXPONENT_NOT_CONGRUENT_TO_D
 169

	)

75 
	#RSA_R_MP_R_NOT_PRIME
 170

	)

76 
	#RSA_R_NO_PUBLIC_EXPONENT
 140

	)

77 
	#RSA_R_NULL_BEFORE_BLOCK_MISSING
 113

	)

78 
	#RSA_R_N_DOES_NOT_EQUAL_PRODUCT_OF_PRIMES
 172

	)

79 
	#RSA_R_N_DOES_NOT_EQUAL_P_Q
 127

	)

80 
	#RSA_R_OAEP_DECODING_ERROR
 121

	)

81 
	#RSA_R_OPERATION_NOT_SUPPORTED_FOR_THIS_KEYTYPE
 148

	)

82 
	#RSA_R_PADDING_CHECK_FAILED
 114

	)

83 
	#RSA_R_PAIRWISE_TEST_FAILURE
 177

	)

84 
	#RSA_R_PKCS_DECODING_ERROR
 159

	)

85 
	#RSA_R_PSS_SALTLEN_TOO_SMALL
 164

	)

86 
	#RSA_R_PUB_EXPONENT_OUT_OF_RANGE
 178

	)

87 
	#RSA_R_P_NOT_PRIME
 128

	)

88 
	#RSA_R_Q_NOT_PRIME
 129

	)

89 
	#RSA_R_RANDOMNESS_SOURCE_STRENGTH_INSUFFICIENT
 180

	)

90 
	#RSA_R_RSA_OPERATIONS_NOT_SUPPORTED
 130

	)

91 
	#RSA_R_SLEN_CHECK_FAILED
 136

	)

92 
	#RSA_R_SLEN_RECOVERY_FAILED
 135

	)

93 
	#RSA_R_SSLV3_ROLLBACK_ATTACK
 115

	)

94 
	#RSA_R_THE_ASN1_OBJECT_IDENTIFIER_IS_NOT_KNOWN_FOR_THIS_MD
 116

	)

95 
	#RSA_R_UNKNOWN_ALGORITHM_TYPE
 117

	)

96 
	#RSA_R_UNKNOWN_DIGEST
 166

	)

97 
	#RSA_R_UNKNOWN_MASK_DIGEST
 151

	)

98 
	#RSA_R_UNKNOWN_PADDING_TYPE
 118

	)

99 
	#RSA_R_UNSUPPORTED_ENCRYPTION_TYPE
 162

	)

100 
	#RSA_R_UNSUPPORTED_LABEL_SOURCE
 163

	)

101 
	#RSA_R_UNSUPPORTED_MASK_ALGORITHM
 153

	)

102 
	#RSA_R_UNSUPPORTED_MASK_PARAMETER
 154

	)

103 
	#RSA_R_UNSUPPORTED_SIGNATURE_TYPE
 155

	)

104 
	#RSA_R_VALUE_MISSING
 147

	)

105 
	#RSA_R_WRONG_SIGNATURE_LENGTH
 119

	)

	@/usr/include/openssl/safestack.h

15 #i‚de‡
OPENSSL_SAFESTACK_H


16 
	#OPENSSL_SAFESTACK_H


	)

17 #¥agm®
⁄˚


19 
	~<›ís¶/ma¸os.h
>

20 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


21 
	#HEADER_SAFESTACK_H


	)

24 
	~<›ís¶/°ack.h
>

25 
	~<›ís¶/e_os2.h
>

27 #ifde‡
__˝lu•lus


31 
	#STACK_OF
(
ty≥
Ë
°ack_°_
##
	)
type

34 
	#SKM_DEFINE_STACK_OF_INTERNAL
(
t1
, 
t2
, 
t3
) \

35 
	`STACK_OF
(
t1
); \

36 (*
	tsk_
##
	tt1
##
	t_compfunc
)(c⁄° 
	tt3
 * c⁄° *
	ta
, c⁄°Å3 *c⁄° *
	tb
); \

37 (*
	tsk_
##
	tt1
##
	t_‰ìfunc
)(
	tt3
 *
	ta
); \

38 
t3
 * (*
	tsk_
##
	tt1
##
	t_c›yfunc
)(c⁄° 
	tt3
 *
	ta
); \

39 
os¶_unu£d
 
os¶_ölöe
 
t2
 *
os¶_check_
##
t1
##
	`_ty≥
—2 *
±r
) \

41  
±r
; \

43 
os¶_unu£d
 
os¶_ölöe
 c⁄° 
OPENSSL_STACK
 *
os¶_check_c⁄°_
##
t1
##
	`_sk_ty≥
(c⁄° 
	`STACK_OF
—1Ë*
sk
) \

45  (c⁄° 
OPENSSL_STACK
 *)
sk
; \

47 
os¶_unu£d
 
os¶_ölöe
 
OPENSSL_STACK
 *
os¶_check_
##
t1
##
	`_sk_ty≥
(
	`STACK_OF
—1Ë*
sk
) \

49  (
OPENSSL_STACK
 *)
sk
; \

51 
os¶_unu£d
 
os¶_ölöe
 
OPENSSL_sk_compfunc
 
os¶_check_
##
t1
##
	`_compfunc_ty≥
(
sk_
##t1##
_compfunc
 
cmp
) \

53  (
OPENSSL_sk_compfunc
)
cmp
; \

55 
os¶_unu£d
 
os¶_ölöe
 
OPENSSL_sk_c›yfunc
 
os¶_check_
##
t1
##
	`_c›yfunc_ty≥
(
sk_
##t1##
_c›yfunc
 
˝y
) \

57  (
OPENSSL_sk_c›yfunc
)
˝y
; \

59 
os¶_unu£d
 
os¶_ölöe
 
OPENSSL_sk_‰ìfunc
 
os¶_check_
##
t1
##
	`_‰ìfunc_ty≥
(
sk_
##t1##
_‰ìfunc
 
‰
) \

61  (
OPENSSL_sk_‰ìfunc
)
‰
; \

62 }

	)

64 
	#SKM_DEFINE_STACK_OF
(
t1
, 
t2
, 
t3
) \

65 
	`STACK_OF
(
t1
); \

66 (*
	tsk_
##
	tt1
##
	t_compfunc
)(c⁄° 
	tt3
 * c⁄° *
	ta
, c⁄°Å3 *c⁄° *
	tb
); \

67 (*
	tsk_
##
	tt1
##
	t_‰ìfunc
)(
	tt3
 *
	ta
); \

68 
t3
 * (*
	tsk_
##
	tt1
##
	t_c›yfunc
)(c⁄° 
	tt3
 *
	ta
); \

69 
os¶_unu£d
 
os¶_ölöe
 
sk_
##
t1
##
	`_num
(c⁄° 
	`STACK_OF
—1Ë*
sk
) \

71  
	`OPENSSL_sk_num
((c⁄° 
OPENSSL_STACK
 *)
sk
); \

73 
os¶_unu£d
 
os¶_ölöe
 
t2
 *
sk_
##
t1
##
	`_vÆue
(c⁄° 
	`STACK_OF
—1Ë*
sk
, 
idx
) \

75  (
t2
 *)
	`OPENSSL_sk_vÆue
((c⁄° 
OPENSSL_STACK
 *)
sk
, 
idx
); \

77 
os¶_unu£d
 
os¶_ölöe
 
	`STACK_OF
(
t1
Ë*
sk_
##t1##
	`_√w
(sk_##t1##
_compfunc
 
com∑ª
) \

79  (
	`STACK_OF
(
t1
Ë*)
	`OPENSSL_sk_√w
((
OPENSSL_sk_compfunc
)
com∑ª
); \

81 
os¶_unu£d
 
os¶_ölöe
 
	`STACK_OF
(
t1
Ë*
sk_
##t1##
	`_√w_nuŒ
() \

83  (
	`STACK_OF
(
t1
Ë*)
	`OPENSSL_sk_√w_nuŒ
(); \

85 
os¶_unu£d
 
os¶_ölöe
 
	`STACK_OF
(
t1
Ë*
sk_
##t1##
	`_√w_ª£rve
(sk_##t1##
_compfunc
 
com∑ª
, 
n
) \

87  (
	`STACK_OF
(
t1
Ë*)
	`OPENSSL_sk_√w_ª£rve
((
OPENSSL_sk_compfunc
)
com∑ª
, 
n
); \

89 
os¶_unu£d
 
os¶_ölöe
 
sk_
##
t1
##
	`_ª£rve
(
	`STACK_OF
—1Ë*
sk
, 
n
) \

91  
	`OPENSSL_sk_ª£rve
((
OPENSSL_STACK
 *)
sk
, 
n
); \

93 
os¶_unu£d
 
os¶_ölöe
 
sk_
##
t1
##
	`_‰ì
(
	`STACK_OF
—1Ë*
sk
) \

95 
	`OPENSSL_sk_‰ì
((
OPENSSL_STACK
 *)
sk
); \

97 
os¶_unu£d
 
os¶_ölöe
 
sk_
##
t1
##
	`_zîo
(
	`STACK_OF
—1Ë*
sk
) \

99 
	`OPENSSL_sk_zîo
((
OPENSSL_STACK
 *)
sk
); \

101 
os¶_unu£d
 
os¶_ölöe
 
t2
 *
sk_
##
t1
##
	`_dñëe
(
	`STACK_OF
—1Ë*
sk
, 
i
) \

103  (
t2
 *)
	`OPENSSL_sk_dñëe
((
OPENSSL_STACK
 *)
sk
, 
i
); \

105 
os¶_unu£d
 
os¶_ölöe
 
t2
 *
sk_
##
t1
##
	`_dñëe_±r
(
	`STACK_OF
—1Ë*
sk
,Å2 *
±r
) \

107  (
t2
 *)
	`OPENSSL_sk_dñëe_±r
((
OPENSSL_STACK
 *)
sk
, \

108 (c⁄° *)
±r
); \

110 
os¶_unu£d
 
os¶_ölöe
 
sk_
##
t1
##
	`_push
(
	`STACK_OF
—1Ë*
sk
, 
t2
 *
±r
) \

112  
	`OPENSSL_sk_push
((
OPENSSL_STACK
 *)
sk
, (c⁄° *)
±r
); \

114 
os¶_unu£d
 
os¶_ölöe
 
sk_
##
t1
##
	`_unshi·
(
	`STACK_OF
—1Ë*
sk
, 
t2
 *
±r
) \

116  
	`OPENSSL_sk_unshi·
((
OPENSSL_STACK
 *)
sk
, (c⁄° *)
±r
); \

118 
os¶_unu£d
 
os¶_ölöe
 
t2
 *
sk_
##
t1
##
	`_p›
(
	`STACK_OF
—1Ë*
sk
) \

120  (
t2
 *)
	`OPENSSL_sk_p›
((
OPENSSL_STACK
 *)
sk
); \

122 
os¶_unu£d
 
os¶_ölöe
 
t2
 *
sk_
##
t1
##
	`_shi·
(
	`STACK_OF
—1Ë*
sk
) \

124  (
t2
 *)
	`OPENSSL_sk_shi·
((
OPENSSL_STACK
 *)
sk
); \

126 
os¶_unu£d
 
os¶_ölöe
 
sk_
##
t1
##
	`_p›_‰ì
(
	`STACK_OF
—1Ë*
sk
, sk_##t1##
_‰ìfunc
 
‰ìfunc
) \

128 
	`OPENSSL_sk_p›_‰ì
((
OPENSSL_STACK
 *)
sk
, (
OPENSSL_sk_‰ìfunc
)
‰ìfunc
); \

130 
os¶_unu£d
 
os¶_ölöe
 
sk_
##
t1
##
	`_ö£π
(
	`STACK_OF
—1Ë*
sk
, 
t2
 *
±r
, 
idx
) \

132  
	`OPENSSL_sk_ö£π
((
OPENSSL_STACK
 *)
sk
, (c⁄° *)
±r
, 
idx
); \

134 
os¶_unu£d
 
os¶_ölöe
 
t2
 *
sk_
##
t1
##
	`_£t
(
	`STACK_OF
—1Ë*
sk
, 
idx
,Å2 *
±r
) \

136  (
t2
 *)
	`OPENSSL_sk_£t
((
OPENSSL_STACK
 *)
sk
, 
idx
, (c⁄° *)
±r
); \

138 
os¶_unu£d
 
os¶_ölöe
 
sk_
##
t1
##
	`_föd
(
	`STACK_OF
—1Ë*
sk
, 
t2
 *
±r
) \

140  
	`OPENSSL_sk_föd
((
OPENSSL_STACK
 *)
sk
, (c⁄° *)
±r
); \

142 
os¶_unu£d
 
os¶_ölöe
 
sk_
##
t1
##
	`_föd_ex
(
	`STACK_OF
—1Ë*
sk
, 
t2
 *
±r
) \

144  
	`OPENSSL_sk_föd_ex
((
OPENSSL_STACK
 *)
sk
, (c⁄° *)
±r
); \

146 
os¶_unu£d
 
os¶_ölöe
 
sk_
##
t1
##
	`_föd_Æl
(
	`STACK_OF
—1Ë*
sk
, 
t2
 *
±r
, *
≤um
) \

148  
	`OPENSSL_sk_föd_Æl
((
OPENSSL_STACK
 *)
sk
, (c⁄° *)
±r
, 
≤um
); \

150 
os¶_unu£d
 
os¶_ölöe
 
sk_
##
t1
##
	`_s‹t
(
	`STACK_OF
—1Ë*
sk
) \

152 
	`OPENSSL_sk_s‹t
((
OPENSSL_STACK
 *)
sk
); \

154 
os¶_unu£d
 
os¶_ölöe
 
sk_
##
t1
##
	`_is_s‹ãd
(c⁄° 
	`STACK_OF
—1Ë*
sk
) \

156  
	`OPENSSL_sk_is_s‹ãd
((c⁄° 
OPENSSL_STACK
 *)
sk
); \

158 
os¶_unu£d
 
os¶_ölöe
 
	`STACK_OF
(
t1
Ë* 
sk_
##t1##
	`_dup
(c⁄° STACK_OF—1Ë*
sk
) \

160  (
	`STACK_OF
(
t1
Ë*)
	`OPENSSL_sk_dup
((c⁄° 
OPENSSL_STACK
 *)
sk
); \

162 
os¶_unu£d
 
os¶_ölöe
 
	`STACK_OF
(
t1
Ë*
sk_
##t1##
	`_dìp_c›y
(c⁄° STACK_OF—1Ë*
sk
, \

163 
sk_
##
t1
##
_c›yfunc
 
c›yfunc
, \

164 
sk_
##
t1
##
_‰ìfunc
 
‰ìfunc
) \

166  (
	`STACK_OF
(
t1
Ë*)
	`OPENSSL_sk_dìp_c›y
((c⁄° 
OPENSSL_STACK
 *)
sk
, \

167 (
OPENSSL_sk_c›yfunc
)
c›yfunc
, \

168 (
OPENSSL_sk_‰ìfunc
)
‰ìfunc
); \

170 
os¶_unu£d
 
os¶_ölöe
 
sk_
##
t1
##
_compfunc
 sk_##t1##
	`_£t_cmp_func
(
	`STACK_OF
—1Ë*
sk
, sk_##t1##_compfun¯
com∑ª
) \

172  (
sk_
##
t1
##
_compfunc
)
	`OPENSSL_sk_£t_cmp_func
((
OPENSSL_STACK
 *)
sk
, (
OPENSSL_sk_compfunc
)
com∑ª
); \

173 }

	)

175 
	#DEFINE_STACK_OF
(
t
Ë
	`SKM_DEFINE_STACK_OF
—,Å,Å)

	)

176 
	#DEFINE_STACK_OF_CONST
(
t
Ë
	`SKM_DEFINE_STACK_OF
—, c⁄°Å,Å)

	)

177 
	#DEFINE_SPECIAL_STACK_OF
(
t1
, 
t2
Ë
	`SKM_DEFINE_STACK_OF
—1,Å2,Å2)

	)

178 
	#DEFINE_SPECIAL_STACK_OF_CONST
(
t1
, 
t2
) \

179 
	`SKM_DEFINE_STACK_OF
(
t1
, c⁄° 
t2
,Å2)

	)

195 *
	tOPENSSL_STRING
;

196 c⁄° *
	tOPENSSL_CSTRING
;

205 
SKM_DEFINE_STACK_OF_INTERNAL
(
OPENSSL_STRING
, , )

206 
	#sk_OPENSSL_STRING_num
(
sk
Ë
	`OPENSSL_sk_num
(
	`os¶_check_c⁄°_OPENSSL_STRING_sk_ty≥
(sk))

	)

207 
	#sk_OPENSSL_STRING_vÆue
(
sk
, 
idx
Ë((*)
	`OPENSSL_sk_vÆue
(
	`os¶_check_c⁄°_OPENSSL_STRING_sk_ty≥
(sk), (idx)))

	)

208 
	#sk_OPENSSL_STRING_√w
(
cmp
Ë((
	`STACK_OF
(
OPENSSL_STRING
Ë*)
	`OPENSSL_sk_√w
(
	`os¶_check_OPENSSL_STRING_compfunc_ty≥
(cmp)))

	)

209 
	#sk_OPENSSL_STRING_√w_nuŒ
(Ë((
	`STACK_OF
(
OPENSSL_STRING
Ë*)
	`OPENSSL_sk_√w_nuŒ
())

	)

210 
	#sk_OPENSSL_STRING_√w_ª£rve
(
cmp
, 
n
Ë((
	`STACK_OF
(
OPENSSL_STRING
Ë*)
	`OPENSSL_sk_√w_ª£rve
(
	`os¶_check_OPENSSL_STRING_compfunc_ty≥
(cmp), (n)))

	)

211 
	#sk_OPENSSL_STRING_ª£rve
(
sk
, 
n
Ë
	`OPENSSL_sk_ª£rve
(
	`os¶_check_OPENSSL_STRING_sk_ty≥
(sk), (n))

	)

212 
	#sk_OPENSSL_STRING_‰ì
(
sk
Ë
	`OPENSSL_sk_‰ì
(
	`os¶_check_OPENSSL_STRING_sk_ty≥
(sk))

	)

213 
	#sk_OPENSSL_STRING_zîo
(
sk
Ë
	`OPENSSL_sk_zîo
(
	`os¶_check_OPENSSL_STRING_sk_ty≥
(sk))

	)

214 
	#sk_OPENSSL_STRING_dñëe
(
sk
, 
i
Ë((*)
	`OPENSSL_sk_dñëe
(
	`os¶_check_OPENSSL_STRING_sk_ty≥
(sk), (i)))

	)

215 
	#sk_OPENSSL_STRING_dñëe_±r
(
sk
, 
±r
Ë((*)
	`OPENSSL_sk_dñëe_±r
(
	`os¶_check_OPENSSL_STRING_sk_ty≥
(sk), 
	`os¶_check_OPENSSL_STRING_ty≥
’å)))

	)

216 
	#sk_OPENSSL_STRING_push
(
sk
, 
±r
Ë
	`OPENSSL_sk_push
(
	`os¶_check_OPENSSL_STRING_sk_ty≥
(sk), 
	`os¶_check_OPENSSL_STRING_ty≥
’å))

	)

217 
	#sk_OPENSSL_STRING_unshi·
(
sk
, 
±r
Ë
	`OPENSSL_sk_unshi·
(
	`os¶_check_OPENSSL_STRING_sk_ty≥
(sk), 
	`os¶_check_OPENSSL_STRING_ty≥
’å))

	)

218 
	#sk_OPENSSL_STRING_p›
(
sk
Ë((*)
	`OPENSSL_sk_p›
(
	`os¶_check_OPENSSL_STRING_sk_ty≥
(sk)))

	)

219 
	#sk_OPENSSL_STRING_shi·
(
sk
Ë((*)
	`OPENSSL_sk_shi·
(
	`os¶_check_OPENSSL_STRING_sk_ty≥
(sk)))

	)

220 
	#sk_OPENSSL_STRING_p›_‰ì
(
sk
, 
‰ìfunc
Ë
	`OPENSSL_sk_p›_‰ì
(
	`os¶_check_OPENSSL_STRING_sk_ty≥
(sk),
	`os¶_check_OPENSSL_STRING_‰ìfunc_ty≥
(‰ìfunc))

	)

221 
	#sk_OPENSSL_STRING_ö£π
(
sk
, 
±r
, 
idx
Ë
	`OPENSSL_sk_ö£π
(
	`os¶_check_OPENSSL_STRING_sk_ty≥
(sk), 
	`os¶_check_OPENSSL_STRING_ty≥
’å), (idx))

	)

222 
	#sk_OPENSSL_STRING_£t
(
sk
, 
idx
, 
±r
Ë((*)
	`OPENSSL_sk_£t
(
	`os¶_check_OPENSSL_STRING_sk_ty≥
(sk), (idx), 
	`os¶_check_OPENSSL_STRING_ty≥
’å)))

	)

223 
	#sk_OPENSSL_STRING_föd
(
sk
, 
±r
Ë
	`OPENSSL_sk_föd
(
	`os¶_check_OPENSSL_STRING_sk_ty≥
(sk), 
	`os¶_check_OPENSSL_STRING_ty≥
’å))

	)

224 
	#sk_OPENSSL_STRING_föd_ex
(
sk
, 
±r
Ë
	`OPENSSL_sk_föd_ex
(
	`os¶_check_OPENSSL_STRING_sk_ty≥
(sk), 
	`os¶_check_OPENSSL_STRING_ty≥
’å))

	)

225 
	#sk_OPENSSL_STRING_föd_Æl
(
sk
, 
±r
, 
≤um
Ë
	`OPENSSL_sk_föd_Æl
(
	`os¶_check_OPENSSL_STRING_sk_ty≥
(sk), 
	`os¶_check_OPENSSL_STRING_ty≥
’å),Önum)

	)

226 
	#sk_OPENSSL_STRING_s‹t
(
sk
Ë
	`OPENSSL_sk_s‹t
(
	`os¶_check_OPENSSL_STRING_sk_ty≥
(sk))

	)

227 
	#sk_OPENSSL_STRING_is_s‹ãd
(
sk
Ë
	`OPENSSL_sk_is_s‹ãd
(
	`os¶_check_c⁄°_OPENSSL_STRING_sk_ty≥
(sk))

	)

228 
	#sk_OPENSSL_STRING_dup
(
sk
Ë((
	`STACK_OF
(
OPENSSL_STRING
Ë*)
	`OPENSSL_sk_dup
(
	`os¶_check_c⁄°_OPENSSL_STRING_sk_ty≥
(sk)))

	)

229 
	#sk_OPENSSL_STRING_dìp_c›y
(
sk
, 
c›yfunc
, 
‰ìfunc
Ë((
	`STACK_OF
(
OPENSSL_STRING
Ë*)
	`OPENSSL_sk_dìp_c›y
(
	`os¶_check_c⁄°_OPENSSL_STRING_sk_ty≥
(sk), 
	`os¶_check_OPENSSL_STRING_c›yfunc_ty≥
(c›yfunc), 
	`os¶_check_OPENSSL_STRING_‰ìfunc_ty≥
(‰ìfunc)))

	)

230 
	#sk_OPENSSL_STRING_£t_cmp_func
(
sk
, 
cmp
Ë((
sk_OPENSSL_STRING_compfunc
)
	`OPENSSL_sk_£t_cmp_func
(
	`os¶_check_OPENSSL_STRING_sk_ty≥
(sk), 
	`os¶_check_OPENSSL_STRING_compfunc_ty≥
(cmp)))

	)

231 
SKM_DEFINE_STACK_OF_INTERNAL
(
OPENSSL_CSTRING
, const , )

232 
	#sk_OPENSSL_CSTRING_num
(
sk
Ë
	`OPENSSL_sk_num
(
	`os¶_check_c⁄°_OPENSSL_CSTRING_sk_ty≥
(sk))

	)

233 
	#sk_OPENSSL_CSTRING_vÆue
(
sk
, 
idx
Ë((c⁄° *)
	`OPENSSL_sk_vÆue
(
	`os¶_check_c⁄°_OPENSSL_CSTRING_sk_ty≥
(sk), (idx)))

	)

234 
	#sk_OPENSSL_CSTRING_√w
(
cmp
Ë((
	`STACK_OF
(
OPENSSL_CSTRING
Ë*)
	`OPENSSL_sk_√w
(
	`os¶_check_OPENSSL_CSTRING_compfunc_ty≥
(cmp)))

	)

235 
	#sk_OPENSSL_CSTRING_√w_nuŒ
(Ë((
	`STACK_OF
(
OPENSSL_CSTRING
Ë*)
	`OPENSSL_sk_√w_nuŒ
())

	)

236 
	#sk_OPENSSL_CSTRING_√w_ª£rve
(
cmp
, 
n
Ë((
	`STACK_OF
(
OPENSSL_CSTRING
Ë*)
	`OPENSSL_sk_√w_ª£rve
(
	`os¶_check_OPENSSL_CSTRING_compfunc_ty≥
(cmp), (n)))

	)

237 
	#sk_OPENSSL_CSTRING_ª£rve
(
sk
, 
n
Ë
	`OPENSSL_sk_ª£rve
(
	`os¶_check_OPENSSL_CSTRING_sk_ty≥
(sk), (n))

	)

238 
	#sk_OPENSSL_CSTRING_‰ì
(
sk
Ë
	`OPENSSL_sk_‰ì
(
	`os¶_check_OPENSSL_CSTRING_sk_ty≥
(sk))

	)

239 
	#sk_OPENSSL_CSTRING_zîo
(
sk
Ë
	`OPENSSL_sk_zîo
(
	`os¶_check_OPENSSL_CSTRING_sk_ty≥
(sk))

	)

240 
	#sk_OPENSSL_CSTRING_dñëe
(
sk
, 
i
Ë((c⁄° *)
	`OPENSSL_sk_dñëe
(
	`os¶_check_OPENSSL_CSTRING_sk_ty≥
(sk), (i)))

	)

241 
	#sk_OPENSSL_CSTRING_dñëe_±r
(
sk
, 
±r
Ë((c⁄° *)
	`OPENSSL_sk_dñëe_±r
(
	`os¶_check_OPENSSL_CSTRING_sk_ty≥
(sk), 
	`os¶_check_OPENSSL_CSTRING_ty≥
’å)))

	)

242 
	#sk_OPENSSL_CSTRING_push
(
sk
, 
±r
Ë
	`OPENSSL_sk_push
(
	`os¶_check_OPENSSL_CSTRING_sk_ty≥
(sk), 
	`os¶_check_OPENSSL_CSTRING_ty≥
’å))

	)

243 
	#sk_OPENSSL_CSTRING_unshi·
(
sk
, 
±r
Ë
	`OPENSSL_sk_unshi·
(
	`os¶_check_OPENSSL_CSTRING_sk_ty≥
(sk), 
	`os¶_check_OPENSSL_CSTRING_ty≥
’å))

	)

244 
	#sk_OPENSSL_CSTRING_p›
(
sk
Ë((c⁄° *)
	`OPENSSL_sk_p›
(
	`os¶_check_OPENSSL_CSTRING_sk_ty≥
(sk)))

	)

245 
	#sk_OPENSSL_CSTRING_shi·
(
sk
Ë((c⁄° *)
	`OPENSSL_sk_shi·
(
	`os¶_check_OPENSSL_CSTRING_sk_ty≥
(sk)))

	)

246 
	#sk_OPENSSL_CSTRING_p›_‰ì
(
sk
, 
‰ìfunc
Ë
	`OPENSSL_sk_p›_‰ì
(
	`os¶_check_OPENSSL_CSTRING_sk_ty≥
(sk),
	`os¶_check_OPENSSL_CSTRING_‰ìfunc_ty≥
(‰ìfunc))

	)

247 
	#sk_OPENSSL_CSTRING_ö£π
(
sk
, 
±r
, 
idx
Ë
	`OPENSSL_sk_ö£π
(
	`os¶_check_OPENSSL_CSTRING_sk_ty≥
(sk), 
	`os¶_check_OPENSSL_CSTRING_ty≥
’å), (idx))

	)

248 
	#sk_OPENSSL_CSTRING_£t
(
sk
, 
idx
, 
±r
Ë((c⁄° *)
	`OPENSSL_sk_£t
(
	`os¶_check_OPENSSL_CSTRING_sk_ty≥
(sk), (idx), 
	`os¶_check_OPENSSL_CSTRING_ty≥
’å)))

	)

249 
	#sk_OPENSSL_CSTRING_föd
(
sk
, 
±r
Ë
	`OPENSSL_sk_föd
(
	`os¶_check_OPENSSL_CSTRING_sk_ty≥
(sk), 
	`os¶_check_OPENSSL_CSTRING_ty≥
’å))

	)

250 
	#sk_OPENSSL_CSTRING_föd_ex
(
sk
, 
±r
Ë
	`OPENSSL_sk_föd_ex
(
	`os¶_check_OPENSSL_CSTRING_sk_ty≥
(sk), 
	`os¶_check_OPENSSL_CSTRING_ty≥
’å))

	)

251 
	#sk_OPENSSL_CSTRING_föd_Æl
(
sk
, 
±r
, 
≤um
Ë
	`OPENSSL_sk_föd_Æl
(
	`os¶_check_OPENSSL_CSTRING_sk_ty≥
(sk), 
	`os¶_check_OPENSSL_CSTRING_ty≥
’å),Önum)

	)

252 
	#sk_OPENSSL_CSTRING_s‹t
(
sk
Ë
	`OPENSSL_sk_s‹t
(
	`os¶_check_OPENSSL_CSTRING_sk_ty≥
(sk))

	)

253 
	#sk_OPENSSL_CSTRING_is_s‹ãd
(
sk
Ë
	`OPENSSL_sk_is_s‹ãd
(
	`os¶_check_c⁄°_OPENSSL_CSTRING_sk_ty≥
(sk))

	)

254 
	#sk_OPENSSL_CSTRING_dup
(
sk
Ë((
	`STACK_OF
(
OPENSSL_CSTRING
Ë*)
	`OPENSSL_sk_dup
(
	`os¶_check_c⁄°_OPENSSL_CSTRING_sk_ty≥
(sk)))

	)

255 
	#sk_OPENSSL_CSTRING_dìp_c›y
(
sk
, 
c›yfunc
, 
‰ìfunc
Ë((
	`STACK_OF
(
OPENSSL_CSTRING
Ë*)
	`OPENSSL_sk_dìp_c›y
(
	`os¶_check_c⁄°_OPENSSL_CSTRING_sk_ty≥
(sk), 
	`os¶_check_OPENSSL_CSTRING_c›yfunc_ty≥
(c›yfunc), 
	`os¶_check_OPENSSL_CSTRING_‰ìfunc_ty≥
(‰ìfunc)))

	)

256 
	#sk_OPENSSL_CSTRING_£t_cmp_func
(
sk
, 
cmp
Ë((
sk_OPENSSL_CSTRING_compfunc
)
	`OPENSSL_sk_£t_cmp_func
(
	`os¶_check_OPENSSL_CSTRING_sk_ty≥
(sk), 
	`os¶_check_OPENSSL_CSTRING_compfunc_ty≥
(cmp)))

	)

259 #i‡!
deföed
(
OPENSSL_NO_DEPRECATED_3_0
)

264 *
	tOPENSSL_BLOCK
;

265 
SKM_DEFINE_STACK_OF_INTERNAL
(
OPENSSL_BLOCK
, , )

266 
	#sk_OPENSSL_BLOCK_num
(
sk
Ë
	`OPENSSL_sk_num
(
	`os¶_check_c⁄°_OPENSSL_BLOCK_sk_ty≥
(sk))

	)

267 
	#sk_OPENSSL_BLOCK_vÆue
(
sk
, 
idx
Ë((*)
	`OPENSSL_sk_vÆue
(
	`os¶_check_c⁄°_OPENSSL_BLOCK_sk_ty≥
(sk), (idx)))

	)

268 
	#sk_OPENSSL_BLOCK_√w
(
cmp
Ë((
	`STACK_OF
(
OPENSSL_BLOCK
Ë*)
	`OPENSSL_sk_√w
(
	`os¶_check_OPENSSL_BLOCK_compfunc_ty≥
(cmp)))

	)

269 
	#sk_OPENSSL_BLOCK_√w_nuŒ
(Ë((
	`STACK_OF
(
OPENSSL_BLOCK
Ë*)
	`OPENSSL_sk_√w_nuŒ
())

	)

270 
	#sk_OPENSSL_BLOCK_√w_ª£rve
(
cmp
, 
n
Ë((
	`STACK_OF
(
OPENSSL_BLOCK
Ë*)
	`OPENSSL_sk_√w_ª£rve
(
	`os¶_check_OPENSSL_BLOCK_compfunc_ty≥
(cmp), (n)))

	)

271 
	#sk_OPENSSL_BLOCK_ª£rve
(
sk
, 
n
Ë
	`OPENSSL_sk_ª£rve
(
	`os¶_check_OPENSSL_BLOCK_sk_ty≥
(sk), (n))

	)

272 
	#sk_OPENSSL_BLOCK_‰ì
(
sk
Ë
	`OPENSSL_sk_‰ì
(
	`os¶_check_OPENSSL_BLOCK_sk_ty≥
(sk))

	)

273 
	#sk_OPENSSL_BLOCK_zîo
(
sk
Ë
	`OPENSSL_sk_zîo
(
	`os¶_check_OPENSSL_BLOCK_sk_ty≥
(sk))

	)

274 
	#sk_OPENSSL_BLOCK_dñëe
(
sk
, 
i
Ë((*)
	`OPENSSL_sk_dñëe
(
	`os¶_check_OPENSSL_BLOCK_sk_ty≥
(sk), (i)))

	)

275 
	#sk_OPENSSL_BLOCK_dñëe_±r
(
sk
, 
±r
Ë((*)
	`OPENSSL_sk_dñëe_±r
(
	`os¶_check_OPENSSL_BLOCK_sk_ty≥
(sk), 
	`os¶_check_OPENSSL_BLOCK_ty≥
’å)))

	)

276 
	#sk_OPENSSL_BLOCK_push
(
sk
, 
±r
Ë
	`OPENSSL_sk_push
(
	`os¶_check_OPENSSL_BLOCK_sk_ty≥
(sk), 
	`os¶_check_OPENSSL_BLOCK_ty≥
’å))

	)

277 
	#sk_OPENSSL_BLOCK_unshi·
(
sk
, 
±r
Ë
	`OPENSSL_sk_unshi·
(
	`os¶_check_OPENSSL_BLOCK_sk_ty≥
(sk), 
	`os¶_check_OPENSSL_BLOCK_ty≥
’å))

	)

278 
	#sk_OPENSSL_BLOCK_p›
(
sk
Ë((*)
	`OPENSSL_sk_p›
(
	`os¶_check_OPENSSL_BLOCK_sk_ty≥
(sk)))

	)

279 
	#sk_OPENSSL_BLOCK_shi·
(
sk
Ë((*)
	`OPENSSL_sk_shi·
(
	`os¶_check_OPENSSL_BLOCK_sk_ty≥
(sk)))

	)

280 
	#sk_OPENSSL_BLOCK_p›_‰ì
(
sk
, 
‰ìfunc
Ë
	`OPENSSL_sk_p›_‰ì
(
	`os¶_check_OPENSSL_BLOCK_sk_ty≥
(sk),
	`os¶_check_OPENSSL_BLOCK_‰ìfunc_ty≥
(‰ìfunc))

	)

281 
	#sk_OPENSSL_BLOCK_ö£π
(
sk
, 
±r
, 
idx
Ë
	`OPENSSL_sk_ö£π
(
	`os¶_check_OPENSSL_BLOCK_sk_ty≥
(sk), 
	`os¶_check_OPENSSL_BLOCK_ty≥
’å), (idx))

	)

282 
	#sk_OPENSSL_BLOCK_£t
(
sk
, 
idx
, 
±r
Ë((*)
	`OPENSSL_sk_£t
(
	`os¶_check_OPENSSL_BLOCK_sk_ty≥
(sk), (idx), 
	`os¶_check_OPENSSL_BLOCK_ty≥
’å)))

	)

283 
	#sk_OPENSSL_BLOCK_föd
(
sk
, 
±r
Ë
	`OPENSSL_sk_föd
(
	`os¶_check_OPENSSL_BLOCK_sk_ty≥
(sk), 
	`os¶_check_OPENSSL_BLOCK_ty≥
’å))

	)

284 
	#sk_OPENSSL_BLOCK_föd_ex
(
sk
, 
±r
Ë
	`OPENSSL_sk_föd_ex
(
	`os¶_check_OPENSSL_BLOCK_sk_ty≥
(sk), 
	`os¶_check_OPENSSL_BLOCK_ty≥
’å))

	)

285 
	#sk_OPENSSL_BLOCK_föd_Æl
(
sk
, 
±r
, 
≤um
Ë
	`OPENSSL_sk_föd_Æl
(
	`os¶_check_OPENSSL_BLOCK_sk_ty≥
(sk), 
	`os¶_check_OPENSSL_BLOCK_ty≥
’å),Önum)

	)

286 
	#sk_OPENSSL_BLOCK_s‹t
(
sk
Ë
	`OPENSSL_sk_s‹t
(
	`os¶_check_OPENSSL_BLOCK_sk_ty≥
(sk))

	)

287 
	#sk_OPENSSL_BLOCK_is_s‹ãd
(
sk
Ë
	`OPENSSL_sk_is_s‹ãd
(
	`os¶_check_c⁄°_OPENSSL_BLOCK_sk_ty≥
(sk))

	)

288 
	#sk_OPENSSL_BLOCK_dup
(
sk
Ë((
	`STACK_OF
(
OPENSSL_BLOCK
Ë*)
	`OPENSSL_sk_dup
(
	`os¶_check_c⁄°_OPENSSL_BLOCK_sk_ty≥
(sk)))

	)

289 
	#sk_OPENSSL_BLOCK_dìp_c›y
(
sk
, 
c›yfunc
, 
‰ìfunc
Ë((
	`STACK_OF
(
OPENSSL_BLOCK
Ë*)
	`OPENSSL_sk_dìp_c›y
(
	`os¶_check_c⁄°_OPENSSL_BLOCK_sk_ty≥
(sk), 
	`os¶_check_OPENSSL_BLOCK_c›yfunc_ty≥
(c›yfunc), 
	`os¶_check_OPENSSL_BLOCK_‰ìfunc_ty≥
(‰ìfunc)))

	)

290 
	#sk_OPENSSL_BLOCK_£t_cmp_func
(
sk
, 
cmp
Ë((
sk_OPENSSL_BLOCK_compfunc
)
	`OPENSSL_sk_£t_cmp_func
(
	`os¶_check_OPENSSL_BLOCK_sk_ty≥
(sk), 
	`os¶_check_OPENSSL_BLOCK_compfunc_ty≥
(cmp)))

	)

294 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/srtp.h

16 #i‚de‡
OPENSSL_SRTP_H


17 
	#OPENSSL_SRTP_H


	)

18 #¥agm®
⁄˚


20 
	~<›ís¶/ma¸os.h
>

21 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


22 
	#HEADER_D1_SRTP_H


	)

25 
	~<›ís¶/s¶.h
>

27 #ifde‡ 
__˝lu•lus


31 
	#SRTP_AES128_CM_SHA1_80
 0x0001

	)

32 
	#SRTP_AES128_CM_SHA1_32
 0x0002

	)

33 
	#SRTP_AES128_F8_SHA1_80
 0x0003

	)

34 
	#SRTP_AES128_F8_SHA1_32
 0x0004

	)

35 
	#SRTP_NULL_SHA1_80
 0x0005

	)

36 
	#SRTP_NULL_SHA1_32
 0x0006

	)

39 
	#SRTP_AEAD_AES_128_GCM
 0x0007

	)

40 
	#SRTP_AEAD_AES_256_GCM
 0x0008

	)

42 #i‚de‡
OPENSSL_NO_SRTP


44 
__owur
 
SSL_CTX_£t_é£xt_u£_§ç
(
SSL_CTX
 *
˘x
, c⁄° *
¥ofûes
);

45 
__owur
 
SSL_£t_é£xt_u£_§ç
(
SSL
 *
s¶
, c⁄° *
¥ofûes
);

47 
__owur
 
STACK_OF
(
SRTP_PROTECTION_PROFILE
Ë*
SSL_gë_§ç_¥ofûes
(
SSL
 *
s¶
);

48 
__owur
 
SRTP_PROTECTION_PROFILE
 *
SSL_gë_£À˘ed_§ç_¥ofûe
(
SSL
 *
s
);

52 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/ssl2.h

10 #i‚de‡
OPENSSL_SSL2_H


11 
	#OPENSSL_SSL2_H


	)

12 #¥agm®
⁄˚


14 
	~<›ís¶/ma¸os.h
>

15 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


16 
	#HEADER_SSL2_H


	)

19 #ifde‡ 
__˝lu•lus


23 
	#SSL2_VERSION
 0x0002

	)

25 
	#SSL2_MT_CLIENT_HELLO
 1

	)

27 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/ssl3.h

11 #i‚de‡
OPENSSL_SSL3_H


12 
	#OPENSSL_SSL3_H


	)

13 #¥agm®
⁄˚


15 
	~<›ís¶/ma¸os.h
>

16 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


17 
	#HEADER_SSL3_H


	)

20 
	~<›ís¶/comp.h
>

21 
	~<›ís¶/buf„r.h
>

22 
	~<›ís¶/evp.h
>

23 
	~<›ís¶/s¶.h
>

25 #ifde‡ 
__˝lu•lus


33 
	#SSL3_CK_SCSV
 0x030000FF

	)

39 
	#SSL3_CK_FALLBACK_SCSV
 0x03005600

	)

41 
	#SSL3_CK_RSA_NULL_MD5
 0x03000001

	)

42 
	#SSL3_CK_RSA_NULL_SHA
 0x03000002

	)

43 
	#SSL3_CK_RSA_RC4_40_MD5
 0x03000003

	)

44 
	#SSL3_CK_RSA_RC4_128_MD5
 0x03000004

	)

45 
	#SSL3_CK_RSA_RC4_128_SHA
 0x03000005

	)

46 
	#SSL3_CK_RSA_RC2_40_MD5
 0x03000006

	)

47 
	#SSL3_CK_RSA_IDEA_128_SHA
 0x03000007

	)

48 
	#SSL3_CK_RSA_DES_40_CBC_SHA
 0x03000008

	)

49 
	#SSL3_CK_RSA_DES_64_CBC_SHA
 0x03000009

	)

50 
	#SSL3_CK_RSA_DES_192_CBC3_SHA
 0x0300000A

	)

52 
	#SSL3_CK_DH_DSS_DES_40_CBC_SHA
 0x0300000B

	)

53 
	#SSL3_CK_DH_DSS_DES_64_CBC_SHA
 0x0300000C

	)

54 
	#SSL3_CK_DH_DSS_DES_192_CBC3_SHA
 0x0300000D

	)

55 
	#SSL3_CK_DH_RSA_DES_40_CBC_SHA
 0x0300000E

	)

56 
	#SSL3_CK_DH_RSA_DES_64_CBC_SHA
 0x0300000F

	)

57 
	#SSL3_CK_DH_RSA_DES_192_CBC3_SHA
 0x03000010

	)

59 
	#SSL3_CK_DHE_DSS_DES_40_CBC_SHA
 0x03000011

	)

60 
	#SSL3_CK_EDH_DSS_DES_40_CBC_SHA
 
SSL3_CK_DHE_DSS_DES_40_CBC_SHA


	)

61 
	#SSL3_CK_DHE_DSS_DES_64_CBC_SHA
 0x03000012

	)

62 
	#SSL3_CK_EDH_DSS_DES_64_CBC_SHA
 
SSL3_CK_DHE_DSS_DES_64_CBC_SHA


	)

63 
	#SSL3_CK_DHE_DSS_DES_192_CBC3_SHA
 0x03000013

	)

64 
	#SSL3_CK_EDH_DSS_DES_192_CBC3_SHA
 
SSL3_CK_DHE_DSS_DES_192_CBC3_SHA


	)

65 
	#SSL3_CK_DHE_RSA_DES_40_CBC_SHA
 0x03000014

	)

66 
	#SSL3_CK_EDH_RSA_DES_40_CBC_SHA
 
SSL3_CK_DHE_RSA_DES_40_CBC_SHA


	)

67 
	#SSL3_CK_DHE_RSA_DES_64_CBC_SHA
 0x03000015

	)

68 
	#SSL3_CK_EDH_RSA_DES_64_CBC_SHA
 
SSL3_CK_DHE_RSA_DES_64_CBC_SHA


	)

69 
	#SSL3_CK_DHE_RSA_DES_192_CBC3_SHA
 0x03000016

	)

70 
	#SSL3_CK_EDH_RSA_DES_192_CBC3_SHA
 
SSL3_CK_DHE_RSA_DES_192_CBC3_SHA


	)

72 
	#SSL3_CK_ADH_RC4_40_MD5
 0x03000017

	)

73 
	#SSL3_CK_ADH_RC4_128_MD5
 0x03000018

	)

74 
	#SSL3_CK_ADH_DES_40_CBC_SHA
 0x03000019

	)

75 
	#SSL3_CK_ADH_DES_64_CBC_SHA
 0x0300001A

	)

76 
	#SSL3_CK_ADH_DES_192_CBC_SHA
 0x0300001B

	)

79 
	#SSL3_RFC_RSA_NULL_MD5
 "TLS_RSA_WITH_NULL_MD5"

	)

80 
	#SSL3_RFC_RSA_NULL_SHA
 "TLS_RSA_WITH_NULL_SHA"

	)

81 
	#SSL3_RFC_RSA_DES_192_CBC3_SHA
 "TLS_RSA_WITH_3DES_EDE_CBC_SHA"

	)

82 
	#SSL3_RFC_DHE_DSS_DES_192_CBC3_SHA
 "TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA"

	)

83 
	#SSL3_RFC_DHE_RSA_DES_192_CBC3_SHA
 "TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA"

	)

84 
	#SSL3_RFC_ADH_DES_192_CBC_SHA
 "TLS_DH_™⁄_WITH_3DES_EDE_CBC_SHA"

	)

85 
	#SSL3_RFC_RSA_IDEA_128_SHA
 "TLS_RSA_WITH_IDEA_CBC_SHA"

	)

86 
	#SSL3_RFC_RSA_RC4_128_MD5
 "TLS_RSA_WITH_RC4_128_MD5"

	)

87 
	#SSL3_RFC_RSA_RC4_128_SHA
 "TLS_RSA_WITH_RC4_128_SHA"

	)

88 
	#SSL3_RFC_ADH_RC4_128_MD5
 "TLS_DH_™⁄_WITH_RC4_128_MD5"

	)

90 
	#SSL3_TXT_RSA_NULL_MD5
 "NULL-MD5"

	)

91 
	#SSL3_TXT_RSA_NULL_SHA
 "NULL-SHA"

	)

92 
	#SSL3_TXT_RSA_RC4_40_MD5
 "EXP-RC4-MD5"

	)

93 
	#SSL3_TXT_RSA_RC4_128_MD5
 "RC4-MD5"

	)

94 
	#SSL3_TXT_RSA_RC4_128_SHA
 "RC4-SHA"

	)

95 
	#SSL3_TXT_RSA_RC2_40_MD5
 "EXP-RC2-CBC-MD5"

	)

96 
	#SSL3_TXT_RSA_IDEA_128_SHA
 "IDEA-CBC-SHA"

	)

97 
	#SSL3_TXT_RSA_DES_40_CBC_SHA
 "EXP-DES-CBC-SHA"

	)

98 
	#SSL3_TXT_RSA_DES_64_CBC_SHA
 "DES-CBC-SHA"

	)

99 
	#SSL3_TXT_RSA_DES_192_CBC3_SHA
 "DES-CBC3-SHA"

	)

101 
	#SSL3_TXT_DH_DSS_DES_40_CBC_SHA
 "EXP-DH-DSS-DES-CBC-SHA"

	)

102 
	#SSL3_TXT_DH_DSS_DES_64_CBC_SHA
 "DH-DSS-DES-CBC-SHA"

	)

103 
	#SSL3_TXT_DH_DSS_DES_192_CBC3_SHA
 "DH-DSS-DES-CBC3-SHA"

	)

104 
	#SSL3_TXT_DH_RSA_DES_40_CBC_SHA
 "EXP-DH-RSA-DES-CBC-SHA"

	)

105 
	#SSL3_TXT_DH_RSA_DES_64_CBC_SHA
 "DH-RSA-DES-CBC-SHA"

	)

106 
	#SSL3_TXT_DH_RSA_DES_192_CBC3_SHA
 "DH-RSA-DES-CBC3-SHA"

	)

108 
	#SSL3_TXT_DHE_DSS_DES_40_CBC_SHA
 "EXP-DHE-DSS-DES-CBC-SHA"

	)

109 
	#SSL3_TXT_DHE_DSS_DES_64_CBC_SHA
 "DHE-DSS-DES-CBC-SHA"

	)

110 
	#SSL3_TXT_DHE_DSS_DES_192_CBC3_SHA
 "DHE-DSS-DES-CBC3-SHA"

	)

111 
	#SSL3_TXT_DHE_RSA_DES_40_CBC_SHA
 "EXP-DHE-RSA-DES-CBC-SHA"

	)

112 
	#SSL3_TXT_DHE_RSA_DES_64_CBC_SHA
 "DHE-RSA-DES-CBC-SHA"

	)

113 
	#SSL3_TXT_DHE_RSA_DES_192_CBC3_SHA
 "DHE-RSA-DES-CBC3-SHA"

	)

120 
	#SSL3_TXT_EDH_DSS_DES_40_CBC_SHA
 "EXP-EDH-DSS-DES-CBC-SHA"

	)

121 
	#SSL3_TXT_EDH_DSS_DES_64_CBC_SHA
 "EDH-DSS-DES-CBC-SHA"

	)

122 
	#SSL3_TXT_EDH_DSS_DES_192_CBC3_SHA
 "EDH-DSS-DES-CBC3-SHA"

	)

123 
	#SSL3_TXT_EDH_RSA_DES_40_CBC_SHA
 "EXP-EDH-RSA-DES-CBC-SHA"

	)

124 
	#SSL3_TXT_EDH_RSA_DES_64_CBC_SHA
 "EDH-RSA-DES-CBC-SHA"

	)

125 
	#SSL3_TXT_EDH_RSA_DES_192_CBC3_SHA
 "EDH-RSA-DES-CBC3-SHA"

	)

127 
	#SSL3_TXT_ADH_RC4_40_MD5
 "EXP-ADH-RC4-MD5"

	)

128 
	#SSL3_TXT_ADH_RC4_128_MD5
 "ADH-RC4-MD5"

	)

129 
	#SSL3_TXT_ADH_DES_40_CBC_SHA
 "EXP-ADH-DES-CBC-SHA"

	)

130 
	#SSL3_TXT_ADH_DES_64_CBC_SHA
 "ADH-DES-CBC-SHA"

	)

131 
	#SSL3_TXT_ADH_DES_192_CBC_SHA
 "ADH-DES-CBC3-SHA"

	)

133 
	#SSL3_SSL_SESSION_ID_LENGTH
 32

	)

134 
	#SSL3_MAX_SSL_SESSION_ID_LENGTH
 32

	)

136 
	#SSL3_MASTER_SECRET_SIZE
 48

	)

137 
	#SSL3_RANDOM_SIZE
 32

	)

138 
	#SSL3_SESSION_ID_SIZE
 32

	)

139 
	#SSL3_RT_HEADER_LENGTH
 5

	)

141 
	#SSL3_HM_HEADER_LENGTH
 4

	)

143 #i‚de‡
SSL3_ALIGN_PAYLOAD


152 
	#SSL3_ALIGN_PAYLOAD
 8

	)

154 #i‡(
SSL3_ALIGN_PAYLOAD
&(SSL3_ALIGN_PAYLOAD-1))!=0

156 #unde‡
SSL3_ALIGN_PAYLOAD


166 
	#SSL3_RT_MAX_MD_SIZE
 64

	)

172 
	#SSL_RT_MAX_CIPHER_BLOCK_SIZE
 16

	)

174 
	#SSL3_RT_MAX_EXTRA
 (16384)

	)

177 
	#SSL3_RT_MAX_PLAIN_LENGTH
 16384

	)

179 
	#SSL3_RT_MAX_COMPRESSED_OVERHEAD
 1024

	)

186 
	#SSL3_RT_MAX_ENCRYPTED_OVERHEAD
 (256 + 
SSL3_RT_MAX_MD_SIZE
)

	)

187 
	#SSL3_RT_MAX_TLS13_ENCRYPTED_OVERHEAD
 256

	)

194 
	#SSL3_RT_SEND_MAX_ENCRYPTED_OVERHEAD
 \

195 (
SSL_RT_MAX_CIPHER_BLOCK_SIZE
 + 
SSL3_RT_MAX_MD_SIZE
)

	)

199 #ifde‡
OPENSSL_NO_COMP


200 
	#SSL3_RT_MAX_COMPRESSED_LENGTH
 
SSL3_RT_MAX_PLAIN_LENGTH


	)

202 
	#SSL3_RT_MAX_COMPRESSED_LENGTH
 \

203 (
SSL3_RT_MAX_PLAIN_LENGTH
+
SSL3_RT_MAX_COMPRESSED_OVERHEAD
)

	)

205 
	#SSL3_RT_MAX_ENCRYPTED_LENGTH
 \

206 (
SSL3_RT_MAX_ENCRYPTED_OVERHEAD
+
SSL3_RT_MAX_COMPRESSED_LENGTH
)

	)

207 
	#SSL3_RT_MAX_TLS13_ENCRYPTED_LENGTH
 \

208 (
SSL3_RT_MAX_PLAIN_LENGTH
 + 
SSL3_RT_MAX_TLS13_ENCRYPTED_OVERHEAD
)

	)

209 
	#SSL3_RT_MAX_PACKET_SIZE
 \

210 (
SSL3_RT_MAX_ENCRYPTED_LENGTH
+
SSL3_RT_HEADER_LENGTH
)

	)

212 
	#SSL3_MD_CLIENT_FINISHED_CONST
 "\x43\x4C\x4E\x54"

	)

213 
	#SSL3_MD_SERVER_FINISHED_CONST
 "\x53\x52\x56\x52"

	)

216 
	#SSL3_VERSION_MAJOR
 0x03

	)

217 
	#SSL3_VERSION_MINOR
 0x00

	)

219 
	#SSL3_RT_CHANGE_CIPHER_SPEC
 20

	)

220 
	#SSL3_RT_ALERT
 21

	)

221 
	#SSL3_RT_HANDSHAKE
 22

	)

222 
	#SSL3_RT_APPLICATION_DATA
 23

	)

225 
	#TLS1_RT_CRYPTO
 0x1000

	)

226 
	#TLS1_RT_CRYPTO_PREMASTER
 (
TLS1_RT_CRYPTO
 | 0x1)

	)

227 
	#TLS1_RT_CRYPTO_CLIENT_RANDOM
 (
TLS1_RT_CRYPTO
 | 0x2)

	)

228 
	#TLS1_RT_CRYPTO_SERVER_RANDOM
 (
TLS1_RT_CRYPTO
 | 0x3)

	)

229 
	#TLS1_RT_CRYPTO_MASTER
 (
TLS1_RT_CRYPTO
 | 0x4)

	)

231 
	#TLS1_RT_CRYPTO_READ
 0x0000

	)

232 
	#TLS1_RT_CRYPTO_WRITE
 0x0100

	)

233 
	#TLS1_RT_CRYPTO_MAC
 (
TLS1_RT_CRYPTO
 | 0x5)

	)

234 
	#TLS1_RT_CRYPTO_KEY
 (
TLS1_RT_CRYPTO
 | 0x6)

	)

235 
	#TLS1_RT_CRYPTO_IV
 (
TLS1_RT_CRYPTO
 | 0x7)

	)

236 
	#TLS1_RT_CRYPTO_FIXED_IV
 (
TLS1_RT_CRYPTO
 | 0x8)

	)

239 
	#SSL3_RT_HEADER
 0x100

	)

240 
	#SSL3_RT_INNER_CONTENT_TYPE
 0x101

	)

242 
	#SSL3_AL_WARNING
 1

	)

243 
	#SSL3_AL_FATAL
 2

	)

245 
	#SSL3_AD_CLOSE_NOTIFY
 0

	)

246 
	#SSL3_AD_UNEXPECTED_MESSAGE
 10

	)

247 
	#SSL3_AD_BAD_RECORD_MAC
 20

	)

248 
	#SSL3_AD_DECOMPRESSION_FAILURE
 30

	)

249 
	#SSL3_AD_HANDSHAKE_FAILURE
 40

	)

250 
	#SSL3_AD_NO_CERTIFICATE
 41

	)

251 
	#SSL3_AD_BAD_CERTIFICATE
 42

	)

252 
	#SSL3_AD_UNSUPPORTED_CERTIFICATE
 43

	)

253 
	#SSL3_AD_CERTIFICATE_REVOKED
 44

	)

254 
	#SSL3_AD_CERTIFICATE_EXPIRED
 45

	)

255 
	#SSL3_AD_CERTIFICATE_UNKNOWN
 46

	)

256 
	#SSL3_AD_ILLEGAL_PARAMETER
 47

	)

258 
	#TLS1_HB_REQUEST
 1

	)

259 
	#TLS1_HB_RESPONSE
 2

	)

262 
	#SSL3_CT_RSA_SIGN
 1

	)

263 
	#SSL3_CT_DSS_SIGN
 2

	)

264 
	#SSL3_CT_RSA_FIXED_DH
 3

	)

265 
	#SSL3_CT_DSS_FIXED_DH
 4

	)

266 
	#SSL3_CT_RSA_EPHEMERAL_DH
 5

	)

267 
	#SSL3_CT_DSS_EPHEMERAL_DH
 6

	)

268 
	#SSL3_CT_FORTEZZA_DMS
 20

	)

273 
	#SSL3_CT_NUMBER
 12

	)

275 #i‡
deföed
(
TLS_CT_NUMBER
)

276 #i‡
TLS_CT_NUMBER
 !
SSL3_CT_NUMBER


282 
	#SSL3_FLAGS_NO_RENEGOTIATE_CIPHERS
 0x0001

	)

285 
	#TLS1_FLAGS_TLS_PADDING_BUG
 0x0

	)

287 
	#TLS1_FLAGS_SKIP_CERT_VERIFY
 0x0010

	)

290 
	#TLS1_FLAGS_ENCRYPT_THEN_MAC_READ
 0x0100

	)

291 
	#TLS1_FLAGS_ENCRYPT_THEN_MAC
 
TLS1_FLAGS_ENCRYPT_THEN_MAC_READ


	)

294 
	#TLS1_FLAGS_RECEIVED_EXTMS
 0x0200

	)

296 
	#TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE
 0x0400

	)

298 
	#TLS1_FLAGS_STATELESS
 0x0800

	)

301 
	#TLS1_FLAGS_REQUIRED_EXTMS
 0x1000

	)

303 
	#SSL3_MT_HELLO_REQUEST
 0

	)

304 
	#SSL3_MT_CLIENT_HELLO
 1

	)

305 
	#SSL3_MT_SERVER_HELLO
 2

	)

306 
	#SSL3_MT_NEWSESSION_TICKET
 4

	)

307 
	#SSL3_MT_END_OF_EARLY_DATA
 5

	)

308 
	#SSL3_MT_ENCRYPTED_EXTENSIONS
 8

	)

309 
	#SSL3_MT_CERTIFICATE
 11

	)

310 
	#SSL3_MT_SERVER_KEY_EXCHANGE
 12

	)

311 
	#SSL3_MT_CERTIFICATE_REQUEST
 13

	)

312 
	#SSL3_MT_SERVER_DONE
 14

	)

313 
	#SSL3_MT_CERTIFICATE_VERIFY
 15

	)

314 
	#SSL3_MT_CLIENT_KEY_EXCHANGE
 16

	)

315 
	#SSL3_MT_FINISHED
 20

	)

316 
	#SSL3_MT_CERTIFICATE_URL
 21

	)

317 
	#SSL3_MT_CERTIFICATE_STATUS
 22

	)

318 
	#SSL3_MT_SUPPLEMENTAL_DATA
 23

	)

319 
	#SSL3_MT_KEY_UPDATE
 24

	)

320 #i‚de‡
OPENSSL_NO_NEXTPROTONEG


321 
	#SSL3_MT_NEXT_PROTO
 67

	)

323 
	#SSL3_MT_MESSAGE_HASH
 254

	)

324 
	#DTLS1_MT_HELLO_VERIFY_REQUEST
 3

	)

327 
	#SSL3_MT_CHANGE_CIPHER_SPEC
 0x0101

	)

329 
	#SSL3_MT_CCS
 1

	)

332 
	#SSL3_CC_READ
 0x001

	)

333 
	#SSL3_CC_WRITE
 0x002

	)

334 
	#SSL3_CC_CLIENT
 0x010

	)

335 
	#SSL3_CC_SERVER
 0x020

	)

336 
	#SSL3_CC_EARLY
 0x040

	)

337 
	#SSL3_CC_HANDSHAKE
 0x080

	)

338 
	#SSL3_CC_APPLICATION
 0x100

	)

339 
	#SSL3_CHANGE_CIPHER_CLIENT_WRITE
 (
SSL3_CC_CLIENT
|
SSL3_CC_WRITE
)

	)

340 
	#SSL3_CHANGE_CIPHER_SERVER_READ
 (
SSL3_CC_SERVER
|
SSL3_CC_READ
)

	)

341 
	#SSL3_CHANGE_CIPHER_CLIENT_READ
 (
SSL3_CC_CLIENT
|
SSL3_CC_READ
)

	)

342 
	#SSL3_CHANGE_CIPHER_SERVER_WRITE
 (
SSL3_CC_SERVER
|
SSL3_CC_WRITE
)

	)

344 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/sslerr.h

11 #i‚de‡
OPENSSL_SSLERR_H


12 
	#OPENSSL_SSLERR_H


	)

13 #¥agm®
⁄˚


15 
	~<›ís¶/›ís¶c⁄f.h
>

16 
	~<›ís¶/symhacks.h
>

17 
	~<›ís¶/s¶îr_Àgacy.h
>

24 
	#SSL_R_APPLICATION_DATA_AFTER_CLOSE_NOTIFY
 291

	)

25 
	#SSL_R_APP_DATA_IN_HANDSHAKE
 100

	)

26 
	#SSL_R_ATTEMPT_TO_REUSE_SESSION_IN_DIFFERENT_CONTEXT
 272

	)

27 
	#SSL_R_AT_LEAST_TLS_1_2_NEEDED_IN_SUITEB_MODE
 158

	)

28 
	#SSL_R_BAD_CHANGE_CIPHER_SPEC
 103

	)

29 
	#SSL_R_BAD_CIPHER
 186

	)

30 
	#SSL_R_BAD_DATA
 390

	)

31 
	#SSL_R_BAD_DATA_RETURNED_BY_CALLBACK
 106

	)

32 
	#SSL_R_BAD_DECOMPRESSION
 107

	)

33 
	#SSL_R_BAD_DH_VALUE
 102

	)

34 
	#SSL_R_BAD_DIGEST_LENGTH
 111

	)

35 
	#SSL_R_BAD_EARLY_DATA
 233

	)

36 
	#SSL_R_BAD_ECC_CERT
 304

	)

37 
	#SSL_R_BAD_ECPOINT
 306

	)

38 
	#SSL_R_BAD_EXTENSION
 110

	)

39 
	#SSL_R_BAD_HANDSHAKE_LENGTH
 332

	)

40 
	#SSL_R_BAD_HANDSHAKE_STATE
 236

	)

41 
	#SSL_R_BAD_HELLO_REQUEST
 105

	)

42 
	#SSL_R_BAD_HRR_VERSION
 263

	)

43 
	#SSL_R_BAD_KEY_SHARE
 108

	)

44 
	#SSL_R_BAD_KEY_UPDATE
 122

	)

45 
	#SSL_R_BAD_LEGACY_VERSION
 292

	)

46 
	#SSL_R_BAD_LENGTH
 271

	)

47 
	#SSL_R_BAD_PACKET
 240

	)

48 
	#SSL_R_BAD_PACKET_LENGTH
 115

	)

49 
	#SSL_R_BAD_PROTOCOL_VERSION_NUMBER
 116

	)

50 
	#SSL_R_BAD_PSK
 219

	)

51 
	#SSL_R_BAD_PSK_IDENTITY
 114

	)

52 
	#SSL_R_BAD_RECORD_TYPE
 443

	)

53 
	#SSL_R_BAD_RSA_ENCRYPT
 119

	)

54 
	#SSL_R_BAD_SIGNATURE
 123

	)

55 
	#SSL_R_BAD_SRP_A_LENGTH
 347

	)

56 
	#SSL_R_BAD_SRP_PARAMETERS
 371

	)

57 
	#SSL_R_BAD_SRTP_MKI_VALUE
 352

	)

58 
	#SSL_R_BAD_SRTP_PROTECTION_PROFILE_LIST
 353

	)

59 
	#SSL_R_BAD_SSL_FILETYPE
 124

	)

60 
	#SSL_R_BAD_VALUE
 384

	)

61 
	#SSL_R_BAD_WRITE_RETRY
 127

	)

62 
	#SSL_R_BINDER_DOES_NOT_VERIFY
 253

	)

63 
	#SSL_R_BIO_NOT_SET
 128

	)

64 
	#SSL_R_BLOCK_CIPHER_PAD_IS_WRONG
 129

	)

65 
	#SSL_R_BN_LIB
 130

	)

66 
	#SSL_R_CALLBACK_FAILED
 234

	)

67 
	#SSL_R_CANNOT_CHANGE_CIPHER
 109

	)

68 
	#SSL_R_CANNOT_GET_GROUP_NAME
 299

	)

69 
	#SSL_R_CA_DN_LENGTH_MISMATCH
 131

	)

70 
	#SSL_R_CA_KEY_TOO_SMALL
 397

	)

71 
	#SSL_R_CA_MD_TOO_WEAK
 398

	)

72 
	#SSL_R_CCS_RECEIVED_EARLY
 133

	)

73 
	#SSL_R_CERTIFICATE_VERIFY_FAILED
 134

	)

74 
	#SSL_R_CERT_CB_ERROR
 377

	)

75 
	#SSL_R_CERT_LENGTH_MISMATCH
 135

	)

76 
	#SSL_R_CIPHERSUITE_DIGEST_HAS_CHANGED
 218

	)

77 
	#SSL_R_CIPHER_CODE_WRONG_LENGTH
 137

	)

78 
	#SSL_R_CLIENTHELLO_TLSEXT
 226

	)

79 
	#SSL_R_COMPRESSED_LENGTH_TOO_LONG
 140

	)

80 
	#SSL_R_COMPRESSION_DISABLED
 343

	)

81 
	#SSL_R_COMPRESSION_FAILURE
 141

	)

82 
	#SSL_R_COMPRESSION_ID_NOT_WITHIN_PRIVATE_RANGE
 307

	)

83 
	#SSL_R_COMPRESSION_LIBRARY_ERROR
 142

	)

84 
	#SSL_R_CONNECTION_TYPE_NOT_SET
 144

	)

85 
	#SSL_R_CONTEXT_NOT_DANE_ENABLED
 167

	)

86 
	#SSL_R_COOKIE_GEN_CALLBACK_FAILURE
 400

	)

87 
	#SSL_R_COOKIE_MISMATCH
 308

	)

88 
	#SSL_R_COPY_PARAMETERS_FAILED
 296

	)

89 
	#SSL_R_CUSTOM_EXT_HANDLER_ALREADY_INSTALLED
 206

	)

90 
	#SSL_R_DANE_ALREADY_ENABLED
 172

	)

91 
	#SSL_R_DANE_CANNOT_OVERRIDE_MTYPE_FULL
 173

	)

92 
	#SSL_R_DANE_NOT_ENABLED
 175

	)

93 
	#SSL_R_DANE_TLSA_BAD_CERTIFICATE
 180

	)

94 
	#SSL_R_DANE_TLSA_BAD_CERTIFICATE_USAGE
 184

	)

95 
	#SSL_R_DANE_TLSA_BAD_DATA_LENGTH
 189

	)

96 
	#SSL_R_DANE_TLSA_BAD_DIGEST_LENGTH
 192

	)

97 
	#SSL_R_DANE_TLSA_BAD_MATCHING_TYPE
 200

	)

98 
	#SSL_R_DANE_TLSA_BAD_PUBLIC_KEY
 201

	)

99 
	#SSL_R_DANE_TLSA_BAD_SELECTOR
 202

	)

100 
	#SSL_R_DANE_TLSA_NULL_DATA
 203

	)

101 
	#SSL_R_DATA_BETWEEN_CCS_AND_FINISHED
 145

	)

102 
	#SSL_R_DATA_LENGTH_TOO_LONG
 146

	)

103 
	#SSL_R_DECRYPTION_FAILED
 147

	)

104 
	#SSL_R_DECRYPTION_FAILED_OR_BAD_RECORD_MAC
 281

	)

105 
	#SSL_R_DH_KEY_TOO_SMALL
 394

	)

106 
	#SSL_R_DH_PUBLIC_VALUE_LENGTH_IS_WRONG
 148

	)

107 
	#SSL_R_DIGEST_CHECK_FAILED
 149

	)

108 
	#SSL_R_DTLS_MESSAGE_TOO_BIG
 334

	)

109 
	#SSL_R_DUPLICATE_COMPRESSION_ID
 309

	)

110 
	#SSL_R_ECC_CERT_NOT_FOR_SIGNING
 318

	)

111 
	#SSL_R_ECDH_REQUIRED_FOR_SUITEB_MODE
 374

	)

112 
	#SSL_R_EE_KEY_TOO_SMALL
 399

	)

113 
	#SSL_R_EMPTY_SRTP_PROTECTION_PROFILE_LIST
 354

	)

114 
	#SSL_R_ENCRYPTED_LENGTH_TOO_LONG
 150

	)

115 
	#SSL_R_ERROR_IN_RECEIVED_CIPHER_LIST
 151

	)

116 
	#SSL_R_ERROR_SETTING_TLSA_BASE_DOMAIN
 204

	)

117 
	#SSL_R_EXCEEDS_MAX_FRAGMENT_SIZE
 194

	)

118 
	#SSL_R_EXCESSIVE_MESSAGE_SIZE
 152

	)

119 
	#SSL_R_EXTENSION_NOT_RECEIVED
 279

	)

120 
	#SSL_R_EXTRA_DATA_IN_MESSAGE
 153

	)

121 
	#SSL_R_EXT_LENGTH_MISMATCH
 163

	)

122 
	#SSL_R_FAILED_TO_INIT_ASYNC
 405

	)

123 
	#SSL_R_FRAGMENTED_CLIENT_HELLO
 401

	)

124 
	#SSL_R_GOT_A_FIN_BEFORE_A_CCS
 154

	)

125 
	#SSL_R_HTTPS_PROXY_REQUEST
 155

	)

126 
	#SSL_R_HTTP_REQUEST
 156

	)

127 
	#SSL_R_ILLEGAL_POINT_COMPRESSION
 162

	)

128 
	#SSL_R_ILLEGAL_SUITEB_DIGEST
 380

	)

129 
	#SSL_R_INAPPROPRIATE_FALLBACK
 373

	)

130 
	#SSL_R_INCONSISTENT_COMPRESSION
 340

	)

131 
	#SSL_R_INCONSISTENT_EARLY_DATA_ALPN
 222

	)

132 
	#SSL_R_INCONSISTENT_EARLY_DATA_SNI
 231

	)

133 
	#SSL_R_INCONSISTENT_EXTMS
 104

	)

134 
	#SSL_R_INSUFFICIENT_SECURITY
 241

	)

135 
	#SSL_R_INVALID_ALERT
 205

	)

136 
	#SSL_R_INVALID_CCS_MESSAGE
 260

	)

137 
	#SSL_R_INVALID_CERTIFICATE_OR_ALG
 238

	)

138 
	#SSL_R_INVALID_COMMAND
 280

	)

139 
	#SSL_R_INVALID_COMPRESSION_ALGORITHM
 341

	)

140 
	#SSL_R_INVALID_CONFIG
 283

	)

141 
	#SSL_R_INVALID_CONFIGURATION_NAME
 113

	)

142 
	#SSL_R_INVALID_CONTEXT
 282

	)

143 
	#SSL_R_INVALID_CT_VALIDATION_TYPE
 212

	)

144 
	#SSL_R_INVALID_KEY_UPDATE_TYPE
 120

	)

145 
	#SSL_R_INVALID_MAX_EARLY_DATA
 174

	)

146 
	#SSL_R_INVALID_NULL_CMD_NAME
 385

	)

147 
	#SSL_R_INVALID_SEQUENCE_NUMBER
 402

	)

148 
	#SSL_R_INVALID_SERVERINFO_DATA
 388

	)

149 
	#SSL_R_INVALID_SESSION_ID
 999

	)

150 
	#SSL_R_INVALID_SRP_USERNAME
 357

	)

151 
	#SSL_R_INVALID_STATUS_RESPONSE
 328

	)

152 
	#SSL_R_INVALID_TICKET_KEYS_LENGTH
 325

	)

153 
	#SSL_R_LENGTH_MISMATCH
 159

	)

154 
	#SSL_R_LENGTH_TOO_LONG
 404

	)

155 
	#SSL_R_LENGTH_TOO_SHORT
 160

	)

156 
	#SSL_R_LIBRARY_BUG
 274

	)

157 
	#SSL_R_LIBRARY_HAS_NO_CIPHERS
 161

	)

158 
	#SSL_R_MISSING_DSA_SIGNING_CERT
 165

	)

159 
	#SSL_R_MISSING_ECDSA_SIGNING_CERT
 381

	)

160 
	#SSL_R_MISSING_FATAL
 256

	)

161 
	#SSL_R_MISSING_PARAMETERS
 290

	)

162 
	#SSL_R_MISSING_PSK_KEX_MODES_EXTENSION
 310

	)

163 
	#SSL_R_MISSING_RSA_CERTIFICATE
 168

	)

164 
	#SSL_R_MISSING_RSA_ENCRYPTING_CERT
 169

	)

165 
	#SSL_R_MISSING_RSA_SIGNING_CERT
 170

	)

166 
	#SSL_R_MISSING_SIGALGS_EXTENSION
 112

	)

167 
	#SSL_R_MISSING_SIGNING_CERT
 221

	)

168 
	#SSL_R_MISSING_SRP_PARAM
 358

	)

169 
	#SSL_R_MISSING_SUPPORTED_GROUPS_EXTENSION
 209

	)

170 
	#SSL_R_MISSING_TMP_DH_KEY
 171

	)

171 
	#SSL_R_MISSING_TMP_ECDH_KEY
 311

	)

172 
	#SSL_R_MIXED_HANDSHAKE_AND_NON_HANDSHAKE_DATA
 293

	)

173 
	#SSL_R_NOT_ON_RECORD_BOUNDARY
 182

	)

174 
	#SSL_R_NOT_REPLACING_CERTIFICATE
 289

	)

175 
	#SSL_R_NOT_SERVER
 284

	)

176 
	#SSL_R_NO_APPLICATION_PROTOCOL
 235

	)

177 
	#SSL_R_NO_CERTIFICATES_RETURNED
 176

	)

178 
	#SSL_R_NO_CERTIFICATE_ASSIGNED
 177

	)

179 
	#SSL_R_NO_CERTIFICATE_SET
 179

	)

180 
	#SSL_R_NO_CHANGE_FOLLOWING_HRR
 214

	)

181 
	#SSL_R_NO_CIPHERS_AVAILABLE
 181

	)

182 
	#SSL_R_NO_CIPHERS_SPECIFIED
 183

	)

183 
	#SSL_R_NO_CIPHER_MATCH
 185

	)

184 
	#SSL_R_NO_CLIENT_CERT_METHOD
 331

	)

185 
	#SSL_R_NO_COMPRESSION_SPECIFIED
 187

	)

186 
	#SSL_R_NO_COOKIE_CALLBACK_SET
 287

	)

187 
	#SSL_R_NO_GOST_CERTIFICATE_SENT_BY_PEER
 330

	)

188 
	#SSL_R_NO_METHOD_SPECIFIED
 188

	)

189 
	#SSL_R_NO_PEM_EXTENSIONS
 389

	)

190 
	#SSL_R_NO_PRIVATE_KEY_ASSIGNED
 190

	)

191 
	#SSL_R_NO_PROTOCOLS_AVAILABLE
 191

	)

192 
	#SSL_R_NO_RENEGOTIATION
 339

	)

193 
	#SSL_R_NO_REQUIRED_DIGEST
 324

	)

194 
	#SSL_R_NO_SHARED_CIPHER
 193

	)

195 
	#SSL_R_NO_SHARED_GROUPS
 410

	)

196 
	#SSL_R_NO_SHARED_SIGNATURE_ALGORITHMS
 376

	)

197 
	#SSL_R_NO_SRTP_PROFILES
 359

	)

198 
	#SSL_R_NO_SUITABLE_DIGEST_ALGORITHM
 297

	)

199 
	#SSL_R_NO_SUITABLE_GROUPS
 295

	)

200 
	#SSL_R_NO_SUITABLE_KEY_SHARE
 101

	)

201 
	#SSL_R_NO_SUITABLE_SIGNATURE_ALGORITHM
 118

	)

202 
	#SSL_R_NO_VALID_SCTS
 216

	)

203 
	#SSL_R_NO_VERIFY_COOKIE_CALLBACK
 403

	)

204 
	#SSL_R_NULL_SSL_CTX
 195

	)

205 
	#SSL_R_NULL_SSL_METHOD_PASSED
 196

	)

206 
	#SSL_R_OCSP_CALLBACK_FAILURE
 305

	)

207 
	#SSL_R_OLD_SESSION_CIPHER_NOT_RETURNED
 197

	)

208 
	#SSL_R_OLD_SESSION_COMPRESSION_ALGORITHM_NOT_RETURNED
 344

	)

209 
	#SSL_R_OVERFLOW_ERROR
 237

	)

210 
	#SSL_R_PACKET_LENGTH_TOO_LONG
 198

	)

211 
	#SSL_R_PARSE_TLSEXT
 227

	)

212 
	#SSL_R_PATH_TOO_LONG
 270

	)

213 
	#SSL_R_PEER_DID_NOT_RETURN_A_CERTIFICATE
 199

	)

214 
	#SSL_R_PEM_NAME_BAD_PREFIX
 391

	)

215 
	#SSL_R_PEM_NAME_TOO_SHORT
 392

	)

216 
	#SSL_R_PIPELINE_FAILURE
 406

	)

217 
	#SSL_R_POST_HANDSHAKE_AUTH_ENCODING_ERR
 278

	)

218 
	#SSL_R_PRIVATE_KEY_MISMATCH
 288

	)

219 
	#SSL_R_PROTOCOL_IS_SHUTDOWN
 207

	)

220 
	#SSL_R_PSK_IDENTITY_NOT_FOUND
 223

	)

221 
	#SSL_R_PSK_NO_CLIENT_CB
 224

	)

222 
	#SSL_R_PSK_NO_SERVER_CB
 225

	)

223 
	#SSL_R_READ_BIO_NOT_SET
 211

	)

224 
	#SSL_R_READ_TIMEOUT_EXPIRED
 312

	)

225 
	#SSL_R_RECORD_LENGTH_MISMATCH
 213

	)

226 
	#SSL_R_RECORD_TOO_SMALL
 298

	)

227 
	#SSL_R_RENEGOTIATE_EXT_TOO_LONG
 335

	)

228 
	#SSL_R_RENEGOTIATION_ENCODING_ERR
 336

	)

229 
	#SSL_R_RENEGOTIATION_MISMATCH
 337

	)

230 
	#SSL_R_REQUEST_PENDING
 285

	)

231 
	#SSL_R_REQUEST_SENT
 286

	)

232 
	#SSL_R_REQUIRED_CIPHER_MISSING
 215

	)

233 
	#SSL_R_REQUIRED_COMPRESSION_ALGORITHM_MISSING
 342

	)

234 
	#SSL_R_SCSV_RECEIVED_WHEN_RENEGOTIATING
 345

	)

235 
	#SSL_R_SCT_VERIFICATION_FAILED
 208

	)

236 
	#SSL_R_SERVERHELLO_TLSEXT
 275

	)

237 
	#SSL_R_SESSION_ID_CONTEXT_UNINITIALIZED
 277

	)

238 
	#SSL_R_SHUTDOWN_WHILE_IN_INIT
 407

	)

239 
	#SSL_R_SIGNATURE_ALGORITHMS_ERROR
 360

	)

240 
	#SSL_R_SIGNATURE_FOR_NON_SIGNING_CERTIFICATE
 220

	)

241 
	#SSL_R_SRP_A_CALC
 361

	)

242 
	#SSL_R_SRTP_COULD_NOT_ALLOCATE_PROFILES
 362

	)

243 
	#SSL_R_SRTP_PROTECTION_PROFILE_LIST_TOO_LONG
 363

	)

244 
	#SSL_R_SRTP_UNKNOWN_PROTECTION_PROFILE
 364

	)

245 
	#SSL_R_SSL3_EXT_INVALID_MAX_FRAGMENT_LENGTH
 232

	)

246 
	#SSL_R_SSL3_EXT_INVALID_SERVERNAME
 319

	)

247 
	#SSL_R_SSL3_EXT_INVALID_SERVERNAME_TYPE
 320

	)

248 
	#SSL_R_SSL3_SESSION_ID_TOO_LONG
 300

	)

249 
	#SSL_R_SSLV3_ALERT_BAD_CERTIFICATE
 1042

	)

250 
	#SSL_R_SSLV3_ALERT_BAD_RECORD_MAC
 1020

	)

251 
	#SSL_R_SSLV3_ALERT_CERTIFICATE_EXPIRED
 1045

	)

252 
	#SSL_R_SSLV3_ALERT_CERTIFICATE_REVOKED
 1044

	)

253 
	#SSL_R_SSLV3_ALERT_CERTIFICATE_UNKNOWN
 1046

	)

254 
	#SSL_R_SSLV3_ALERT_DECOMPRESSION_FAILURE
 1030

	)

255 
	#SSL_R_SSLV3_ALERT_HANDSHAKE_FAILURE
 1040

	)

256 
	#SSL_R_SSLV3_ALERT_ILLEGAL_PARAMETER
 1047

	)

257 
	#SSL_R_SSLV3_ALERT_NO_CERTIFICATE
 1041

	)

258 
	#SSL_R_SSLV3_ALERT_UNEXPECTED_MESSAGE
 1010

	)

259 
	#SSL_R_SSLV3_ALERT_UNSUPPORTED_CERTIFICATE
 1043

	)

260 
	#SSL_R_SSL_COMMAND_SECTION_EMPTY
 117

	)

261 
	#SSL_R_SSL_COMMAND_SECTION_NOT_FOUND
 125

	)

262 
	#SSL_R_SSL_CTX_HAS_NO_DEFAULT_SSL_VERSION
 228

	)

263 
	#SSL_R_SSL_HANDSHAKE_FAILURE
 229

	)

264 
	#SSL_R_SSL_LIBRARY_HAS_NO_CIPHERS
 230

	)

265 
	#SSL_R_SSL_NEGATIVE_LENGTH
 372

	)

266 
	#SSL_R_SSL_SECTION_EMPTY
 126

	)

267 
	#SSL_R_SSL_SECTION_NOT_FOUND
 136

	)

268 
	#SSL_R_SSL_SESSION_ID_CALLBACK_FAILED
 301

	)

269 
	#SSL_R_SSL_SESSION_ID_CONFLICT
 302

	)

270 
	#SSL_R_SSL_SESSION_ID_CONTEXT_TOO_LONG
 273

	)

271 
	#SSL_R_SSL_SESSION_ID_HAS_BAD_LENGTH
 303

	)

272 
	#SSL_R_SSL_SESSION_ID_TOO_LONG
 408

	)

273 
	#SSL_R_SSL_SESSION_VERSION_MISMATCH
 210

	)

274 
	#SSL_R_STILL_IN_INIT
 121

	)

275 
	#SSL_R_TLSV13_ALERT_CERTIFICATE_REQUIRED
 1116

	)

276 
	#SSL_R_TLSV13_ALERT_MISSING_EXTENSION
 1109

	)

277 
	#SSL_R_TLSV1_ALERT_ACCESS_DENIED
 1049

	)

278 
	#SSL_R_TLSV1_ALERT_DECODE_ERROR
 1050

	)

279 
	#SSL_R_TLSV1_ALERT_DECRYPTION_FAILED
 1021

	)

280 
	#SSL_R_TLSV1_ALERT_DECRYPT_ERROR
 1051

	)

281 
	#SSL_R_TLSV1_ALERT_EXPORT_RESTRICTION
 1060

	)

282 
	#SSL_R_TLSV1_ALERT_INAPPROPRIATE_FALLBACK
 1086

	)

283 
	#SSL_R_TLSV1_ALERT_INSUFFICIENT_SECURITY
 1071

	)

284 
	#SSL_R_TLSV1_ALERT_INTERNAL_ERROR
 1080

	)

285 
	#SSL_R_TLSV1_ALERT_NO_RENEGOTIATION
 1100

	)

286 
	#SSL_R_TLSV1_ALERT_PROTOCOL_VERSION
 1070

	)

287 
	#SSL_R_TLSV1_ALERT_RECORD_OVERFLOW
 1022

	)

288 
	#SSL_R_TLSV1_ALERT_UNKNOWN_CA
 1048

	)

289 
	#SSL_R_TLSV1_ALERT_USER_CANCELLED
 1090

	)

290 
	#SSL_R_TLSV1_BAD_CERTIFICATE_HASH_VALUE
 1114

	)

291 
	#SSL_R_TLSV1_BAD_CERTIFICATE_STATUS_RESPONSE
 1113

	)

292 
	#SSL_R_TLSV1_CERTIFICATE_UNOBTAINABLE
 1111

	)

293 
	#SSL_R_TLSV1_UNRECOGNIZED_NAME
 1112

	)

294 
	#SSL_R_TLSV1_UNSUPPORTED_EXTENSION
 1110

	)

295 
	#SSL_R_TLS_ILLEGAL_EXPORTER_LABEL
 367

	)

296 
	#SSL_R_TLS_INVALID_ECPOINTFORMAT_LIST
 157

	)

297 
	#SSL_R_TOO_MANY_KEY_UPDATES
 132

	)

298 
	#SSL_R_TOO_MANY_WARN_ALERTS
 409

	)

299 
	#SSL_R_TOO_MUCH_EARLY_DATA
 164

	)

300 
	#SSL_R_UNABLE_TO_FIND_ECDH_PARAMETERS
 314

	)

301 
	#SSL_R_UNABLE_TO_FIND_PUBLIC_KEY_PARAMETERS
 239

	)

302 
	#SSL_R_UNABLE_TO_LOAD_SSL3_MD5_ROUTINES
 242

	)

303 
	#SSL_R_UNABLE_TO_LOAD_SSL3_SHA1_ROUTINES
 243

	)

304 
	#SSL_R_UNEXPECTED_CCS_MESSAGE
 262

	)

305 
	#SSL_R_UNEXPECTED_END_OF_EARLY_DATA
 178

	)

306 
	#SSL_R_UNEXPECTED_EOF_WHILE_READING
 294

	)

307 
	#SSL_R_UNEXPECTED_MESSAGE
 244

	)

308 
	#SSL_R_UNEXPECTED_RECORD
 245

	)

309 
	#SSL_R_UNINITIALIZED
 276

	)

310 
	#SSL_R_UNKNOWN_ALERT_TYPE
 246

	)

311 
	#SSL_R_UNKNOWN_CERTIFICATE_TYPE
 247

	)

312 
	#SSL_R_UNKNOWN_CIPHER_RETURNED
 248

	)

313 
	#SSL_R_UNKNOWN_CIPHER_TYPE
 249

	)

314 
	#SSL_R_UNKNOWN_CMD_NAME
 386

	)

315 
	#SSL_R_UNKNOWN_COMMAND
 139

	)

316 
	#SSL_R_UNKNOWN_DIGEST
 368

	)

317 
	#SSL_R_UNKNOWN_KEY_EXCHANGE_TYPE
 250

	)

318 
	#SSL_R_UNKNOWN_PKEY_TYPE
 251

	)

319 
	#SSL_R_UNKNOWN_PROTOCOL
 252

	)

320 
	#SSL_R_UNKNOWN_SSL_VERSION
 254

	)

321 
	#SSL_R_UNKNOWN_STATE
 255

	)

322 
	#SSL_R_UNSAFE_LEGACY_RENEGOTIATION_DISABLED
 338

	)

323 
	#SSL_R_UNSOLICITED_EXTENSION
 217

	)

324 
	#SSL_R_UNSUPPORTED_COMPRESSION_ALGORITHM
 257

	)

325 
	#SSL_R_UNSUPPORTED_ELLIPTIC_CURVE
 315

	)

326 
	#SSL_R_UNSUPPORTED_PROTOCOL
 258

	)

327 
	#SSL_R_UNSUPPORTED_SSL_VERSION
 259

	)

328 
	#SSL_R_UNSUPPORTED_STATUS_TYPE
 329

	)

329 
	#SSL_R_USE_SRTP_NOT_NEGOTIATED
 369

	)

330 
	#SSL_R_VERSION_TOO_HIGH
 166

	)

331 
	#SSL_R_VERSION_TOO_LOW
 396

	)

332 
	#SSL_R_WRONG_CERTIFICATE_TYPE
 383

	)

333 
	#SSL_R_WRONG_CIPHER_RETURNED
 261

	)

334 
	#SSL_R_WRONG_CURVE
 378

	)

335 
	#SSL_R_WRONG_SIGNATURE_LENGTH
 264

	)

336 
	#SSL_R_WRONG_SIGNATURE_SIZE
 265

	)

337 
	#SSL_R_WRONG_SIGNATURE_TYPE
 370

	)

338 
	#SSL_R_WRONG_SSL_VERSION
 266

	)

339 
	#SSL_R_WRONG_VERSION_NUMBER
 267

	)

340 
	#SSL_R_X509_LIB
 268

	)

341 
	#SSL_R_X509_VERIFICATION_SETUP_PROBLEMS
 269

	)

	@/usr/include/openssl/symhacks.h

10 #i‚de‡
OPENSSL_SYMHACKS_H


11 
	#OPENSSL_SYMHACKS_H


	)

12 #¥agm®
⁄˚


14 
	~<›ís¶/ma¸os.h
>

15 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


16 
	#HEADER_SYMHACKS_H


	)

19 
	~<›ís¶/e_os2.h
>

22 #i‡
deföed
(
OPENSSL_SYS_VMS
)

23 #unde‡
ERR_lﬂd_CRYPTO_°rögs


24 
	#ERR_lﬂd_CRYPTO_°rögs
 
ERR_lﬂd_CRYPTOlib_°rögs


	)

25 #unde‡
OCSP_¸lID_√w


26 
	#OCSP_¸lID_√w
 
OCSP_¸lID2_√w


	)

28 #unde‡
d2i_ECPARAMETERS


29 
	#d2i_ECPARAMETERS
 
d2i_UC_ECPARAMETERS


	)

30 #unde‡
i2d_ECPARAMETERS


31 
	#i2d_ECPARAMETERS
 
i2d_UC_ECPARAMETERS


	)

32 #unde‡
d2i_ECPKPARAMETERS


33 
	#d2i_ECPKPARAMETERS
 
d2i_UC_ECPKPARAMETERS


	)

34 #unde‡
i2d_ECPKPARAMETERS


35 
	#i2d_ECPKPARAMETERS
 
i2d_UC_ECPKPARAMETERS


	)

	@/usr/include/openssl/types.h

10 #i‚de‡
OPENSSL_TYPES_H


11 
	#OPENSSL_TYPES_H


	)

12 #¥agm®
⁄˚


14 
	~<limôs.h
>

16 #ifde‡ 
__˝lu•lus


20 
	~<›ís¶/e_os2.h
>

21 
	~<›ís¶/ß„°ack.h
>

22 
	~<›ís¶/ma¸os.h
>

24 
os¶_¥ovidî_°
 
	tOSSL_PROVIDER
;

26 #ifde‡
NO_ASN1_TYPEDEFS


27 
	#ASN1_INTEGER
 
ASN1_STRING


	)

28 
	#ASN1_ENUMERATED
 
ASN1_STRING


	)

29 
	#ASN1_BIT_STRING
 
ASN1_STRING


	)

30 
	#ASN1_OCTET_STRING
 
ASN1_STRING


	)

31 
	#ASN1_PRINTABLESTRING
 
ASN1_STRING


	)

32 
	#ASN1_T61STRING
 
ASN1_STRING


	)

33 
	#ASN1_IA5STRING
 
ASN1_STRING


	)

34 
	#ASN1_UTCTIME
 
ASN1_STRING


	)

35 
	#ASN1_GENERALIZEDTIME
 
ASN1_STRING


	)

36 
	#ASN1_TIME
 
ASN1_STRING


	)

37 
	#ASN1_GENERALSTRING
 
ASN1_STRING


	)

38 
	#ASN1_UNIVERSALSTRING
 
ASN1_STRING


	)

39 
	#ASN1_BMPSTRING
 
ASN1_STRING


	)

40 
	#ASN1_VISIBLESTRING
 
ASN1_STRING


	)

41 
	#ASN1_UTF8STRING
 
ASN1_STRING


	)

42 
	#ASN1_BOOLEAN
 

	)

43 
	#ASN1_NULL
 

	)

45 
a¢1_°rög_°
 
	tASN1_INTEGER
;

46 
a¢1_°rög_°
 
	tASN1_ENUMERATED
;

47 
a¢1_°rög_°
 
	tASN1_BIT_STRING
;

48 
a¢1_°rög_°
 
	tASN1_OCTET_STRING
;

49 
a¢1_°rög_°
 
	tASN1_PRINTABLESTRING
;

50 
a¢1_°rög_°
 
	tASN1_T61STRING
;

51 
a¢1_°rög_°
 
	tASN1_IA5STRING
;

52 
a¢1_°rög_°
 
	tASN1_GENERALSTRING
;

53 
a¢1_°rög_°
 
	tASN1_UNIVERSALSTRING
;

54 
a¢1_°rög_°
 
	tASN1_BMPSTRING
;

55 
a¢1_°rög_°
 
	tASN1_UTCTIME
;

56 
a¢1_°rög_°
 
	tASN1_TIME
;

57 
a¢1_°rög_°
 
	tASN1_GENERALIZEDTIME
;

58 
a¢1_°rög_°
 
	tASN1_VISIBLESTRING
;

59 
a¢1_°rög_°
 
	tASN1_UTF8STRING
;

60 
a¢1_°rög_°
 
	tASN1_STRING
;

61 
	tASN1_BOOLEAN
;

62 
	tASN1_NULL
;

65 
a¢1_ty≥_°
 
	tASN1_TYPE
;

66 
a¢1_obje˘_°
 
	tASN1_OBJECT
;

67 
a¢1_°rög_èbÀ_°
 
	tASN1_STRING_TABLE
;

69 
ASN1_ITEM_°
 
	tASN1_ITEM
;

70 
a¢1_p˘x_°
 
	tASN1_PCTX
;

71 
a¢1_s˘x_°
 
	tASN1_SCTX
;

73 #ifde‡
_WIN32


74 #unde‡
X509_NAME


75 #unde‡
X509_EXTENSIONS


76 #unde‡
PKCS7_ISSUER_AND_SERIAL


77 #unde‡
PKCS7_SIGNER_INFO


78 #unde‡
OCSP_REQUEST


79 #unde‡
OCSP_RESPONSE


82 #ifde‡
BIGNUM


83 #unde‡
BIGNUM


86 
bio_°
 
	tBIO
;

87 
bignum_°
 
	tBIGNUM
;

88 
bignum_˘x
 
	tBN_CTX
;

89 
bn_blödög_°
 
	tBN_BLINDING
;

90 
bn_m⁄t_˘x_°
 
	tBN_MONT_CTX
;

91 
bn_ª˝_˘x_°
 
	tBN_RECP_CTX
;

92 
bn_gícb_°
 
	tBN_GENCB
;

94 
buf_mem_°
 
	tBUF_MEM
;

96 
STACK_OF
(
BIGNUM
);

97 
STACK_OF
(
BIGNUM_c⁄°
);

99 
îr_°©e_°
 
	tERR_STATE
;

101 
evp_cùhî_°
 
	tEVP_CIPHER
;

102 
evp_cùhî_˘x_°
 
	tEVP_CIPHER_CTX
;

103 
evp_md_°
 
	tEVP_MD
;

104 
evp_md_˘x_°
 
	tEVP_MD_CTX
;

105 
evp_mac_°
 
	tEVP_MAC
;

106 
evp_mac_˘x_°
 
	tEVP_MAC_CTX
;

107 
evp_pkey_°
 
	tEVP_PKEY
;

109 
evp_pkey_a¢1_mëhod_°
 
	tEVP_PKEY_ASN1_METHOD
;

111 
evp_pkey_mëhod_°
 
	tEVP_PKEY_METHOD
;

112 
evp_pkey_˘x_°
 
	tEVP_PKEY_CTX
;

114 
evp_keymgmt_°
 
	tEVP_KEYMGMT
;

116 
evp_kdf_°
 
	tEVP_KDF
;

117 
evp_kdf_˘x_°
 
	tEVP_KDF_CTX
;

119 
evp_ønd_°
 
	tEVP_RAND
;

120 
evp_ønd_˘x_°
 
	tEVP_RAND_CTX
;

122 
evp_keyexch_°
 
	tEVP_KEYEXCH
;

124 
evp_sig«tuª_°
 
	tEVP_SIGNATURE
;

126 
evp_asym_cùhî_°
 
	tEVP_ASYM_CIPHER
;

128 
evp_kem_°
 
	tEVP_KEM
;

130 
evp_Encode_Ctx_°
 
	tEVP_ENCODE_CTX
;

132 
hmac_˘x_°
 
	tHMAC_CTX
;

134 
dh_°
 
	tDH
;

135 
dh_mëhod
 
	tDH_METHOD
;

137 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


138 
dß_°
 
	tDSA
;

139 
dß_mëhod
 
	tDSA_METHOD
;

142 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


143 
rß_°
 
	tRSA
;

144 
rß_mëh_°
 
	tRSA_METHOD
;

146 
rß_pss_∑øms_°
 
	tRSA_PSS_PARAMS
;

148 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


149 
ec_key_°
 
	tEC_KEY
;

150 
ec_key_mëhod_°
 
	tEC_KEY_METHOD
;

153 
ønd_mëh_°
 
	tRAND_METHOD
;

154 
ønd_drbg_°
 
	tRAND_DRBG
;

156 
s¶_d™e_°
 
	tSSL_DANE
;

157 
x509_°
 
	tX509
;

158 
X509_Æg‹_°
 
	tX509_ALGOR
;

159 
X509_¸l_°
 
	tX509_CRL
;

160 
x509_¸l_mëhod_°
 
	tX509_CRL_METHOD
;

161 
x509_ªvoked_°
 
	tX509_REVOKED
;

162 
X509_«me_°
 
	tX509_NAME
;

163 
X509_pubkey_°
 
	tX509_PUBKEY
;

164 
x509_°‹e_°
 
	tX509_STORE
;

165 
x509_°‹e_˘x_°
 
	tX509_STORE_CTX
;

167 
x509_obje˘_°
 
	tX509_OBJECT
;

168 
x509_lookup_°
 
	tX509_LOOKUP
;

169 
x509_lookup_mëhod_°
 
	tX509_LOOKUP_METHOD
;

170 
X509_VERIFY_PARAM_°
 
	tX509_VERIFY_PARAM
;

172 
x509_sig_öfo_°
 
	tX509_SIG_INFO
;

174 
pkcs8_¥iv_key_öfo_°
 
	tPKCS8_PRIV_KEY_INFO
;

176 
v3_ext_˘x
 
	tX509V3_CTX
;

177 
c⁄f_°
 
	tCONF
;

178 
os¶_öô_£âögs_°
 
	tOPENSSL_INIT_SETTINGS
;

180 
ui_°
 
	tUI
;

181 
ui_mëhod_°
 
	tUI_METHOD
;

183 
ígöe_°
 
	tENGINE
;

184 
s¶_°
 
	tSSL
;

185 
s¶_˘x_°
 
	tSSL_CTX
;

187 
comp_˘x_°
 
	tCOMP_CTX
;

188 
comp_mëhod_°
 
	tCOMP_METHOD
;

190 
X509_POLICY_NODE_°
 
	tX509_POLICY_NODE
;

191 
X509_POLICY_LEVEL_°
 
	tX509_POLICY_LEVEL
;

192 
X509_POLICY_TREE_°
 
	tX509_POLICY_TREE
;

193 
X509_POLICY_CACHE_°
 
	tX509_POLICY_CACHE
;

195 
AUTHORITY_KEYID_°
 
	tAUTHORITY_KEYID
;

196 
DIST_POINT_°
 
	tDIST_POINT
;

197 
ISSUING_DIST_POINT_°
 
	tISSUING_DIST_POINT
;

198 
NAME_CONSTRAINTS_°
 
	tNAME_CONSTRAINTS
;

200 
¸y±o_ex_d©a_°
 
	tCRYPTO_EX_DATA
;

202 
os¶_hâp_ªq_˘x_°
 
	tOSSL_HTTP_REQ_CTX
;

203 
oc•_ª•⁄£_°
 
	tOCSP_RESPONSE
;

204 
oc•_ª•⁄dî_id_°
 
	tOCSP_RESPID
;

206 
s˘_°
 
	tSCT
;

207 
s˘_˘x_°
 
	tSCT_CTX
;

208 
˘log_°
 
	tCTLOG
;

209 
˘log_°‹e_°
 
	tCTLOG_STORE
;

210 
˘_pﬁicy_evÆ_˘x_°
 
	tCT_POLICY_EVAL_CTX
;

212 
os¶_°‹e_öfo_°
 
	tOSSL_STORE_INFO
;

213 
os¶_°‹e_£¨ch_°
 
	tOSSL_STORE_SEARCH
;

215 
os¶_lib_˘x_°
 
	tOSSL_LIB_CTX
;

217 
os¶_di•©ch_°
 
	tOSSL_DISPATCH
;

218 
os¶_ôem_°
 
	tOSSL_ITEM
;

219 
os¶_Æg‹ôhm_°
 
	tOSSL_ALGORITHM
;

220 
os¶_∑øm_°
 
	tOSSL_PARAM
;

221 
os¶_∑øm_bld_°
 
	tOSSL_PARAM_BLD
;

223 
	t≥m_∑ssw‹d_cb
 (*
	tbuf
, 
	tsize
, 
	trwÊag
, *
	tu£rd©a
);

225 
os¶_ícodî_°
 
	tOSSL_ENCODER
;

226 
os¶_ícodî_˘x_°
 
	tOSSL_ENCODER_CTX
;

227 
os¶_decodî_°
 
	tOSSL_DECODER
;

228 
os¶_decodî_˘x_°
 
	tOSSL_DECODER_CTX
;

230 
os¶_£lf_ã°_°
 
	tOSSL_SELF_TEST
;

232 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/x509_vfy.h

15 #i‚de‡
OPENSSL_X509_VFY_H


16 
	#OPENSSL_X509_VFY_H


	)

17 #¥agm®
⁄˚


19 
	~<›ís¶/ma¸os.h
>

20 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


21 
	#HEADER_X509_VFY_H


	)

27 #i‚de‡
OPENSSL_X509_H


28 
	~<›ís¶/x509.h
>

31 
	~<›ís¶/›ís¶c⁄f.h
>

32 
	~<›ís¶/lhash.h
>

33 
	~<›ís¶/bio.h
>

34 
	~<›ís¶/¸y±o.h
>

35 
	~<›ís¶/symhacks.h
>

37 #ifde‡ 
__˝lu•lus


59 
X509_LU_NONE
 = 0,

60 
X509_LU_X509
, 
X509_LU_CRL


61 } 
	tX509_LOOKUP_TYPE
;

63 #i‚de‡
OPENSSL_NO_DEPRECATED_1_1_0


64 
	#X509_LU_RETRY
 -1

	)

65 
	#X509_LU_FAIL
 0

	)

68 
SKM_DEFINE_STACK_OF_INTERNAL
(
X509_LOOKUP
, X509_LOOKUP, X509_LOOKUP)

69 
	#sk_X509_LOOKUP_num
(
sk
Ë
	`OPENSSL_sk_num
(
	`os¶_check_c⁄°_X509_LOOKUP_sk_ty≥
(sk))

	)

70 
	#sk_X509_LOOKUP_vÆue
(
sk
, 
idx
Ë((
X509_LOOKUP
 *)
	`OPENSSL_sk_vÆue
(
	`os¶_check_c⁄°_X509_LOOKUP_sk_ty≥
(sk), (idx)))

	)

71 
	#sk_X509_LOOKUP_√w
(
cmp
Ë((
	`STACK_OF
(
X509_LOOKUP
Ë*)
	`OPENSSL_sk_√w
(
	`os¶_check_X509_LOOKUP_compfunc_ty≥
(cmp)))

	)

72 
	#sk_X509_LOOKUP_√w_nuŒ
(Ë((
	`STACK_OF
(
X509_LOOKUP
Ë*)
	`OPENSSL_sk_√w_nuŒ
())

	)

73 
	#sk_X509_LOOKUP_√w_ª£rve
(
cmp
, 
n
Ë((
	`STACK_OF
(
X509_LOOKUP
Ë*)
	`OPENSSL_sk_√w_ª£rve
(
	`os¶_check_X509_LOOKUP_compfunc_ty≥
(cmp), (n)))

	)

74 
	#sk_X509_LOOKUP_ª£rve
(
sk
, 
n
Ë
	`OPENSSL_sk_ª£rve
(
	`os¶_check_X509_LOOKUP_sk_ty≥
(sk), (n))

	)

75 
	#sk_X509_LOOKUP_‰ì
(
sk
Ë
	`OPENSSL_sk_‰ì
(
	`os¶_check_X509_LOOKUP_sk_ty≥
(sk))

	)

76 
	#sk_X509_LOOKUP_zîo
(
sk
Ë
	`OPENSSL_sk_zîo
(
	`os¶_check_X509_LOOKUP_sk_ty≥
(sk))

	)

77 
	#sk_X509_LOOKUP_dñëe
(
sk
, 
i
Ë((
X509_LOOKUP
 *)
	`OPENSSL_sk_dñëe
(
	`os¶_check_X509_LOOKUP_sk_ty≥
(sk), (i)))

	)

78 
	#sk_X509_LOOKUP_dñëe_±r
(
sk
, 
±r
Ë((
X509_LOOKUP
 *)
	`OPENSSL_sk_dñëe_±r
(
	`os¶_check_X509_LOOKUP_sk_ty≥
(sk), 
	`os¶_check_X509_LOOKUP_ty≥
’å)))

	)

79 
	#sk_X509_LOOKUP_push
(
sk
, 
±r
Ë
	`OPENSSL_sk_push
(
	`os¶_check_X509_LOOKUP_sk_ty≥
(sk), 
	`os¶_check_X509_LOOKUP_ty≥
’å))

	)

80 
	#sk_X509_LOOKUP_unshi·
(
sk
, 
±r
Ë
	`OPENSSL_sk_unshi·
(
	`os¶_check_X509_LOOKUP_sk_ty≥
(sk), 
	`os¶_check_X509_LOOKUP_ty≥
’å))

	)

81 
	#sk_X509_LOOKUP_p›
(
sk
Ë((
X509_LOOKUP
 *)
	`OPENSSL_sk_p›
(
	`os¶_check_X509_LOOKUP_sk_ty≥
(sk)))

	)

82 
	#sk_X509_LOOKUP_shi·
(
sk
Ë((
X509_LOOKUP
 *)
	`OPENSSL_sk_shi·
(
	`os¶_check_X509_LOOKUP_sk_ty≥
(sk)))

	)

83 
	#sk_X509_LOOKUP_p›_‰ì
(
sk
, 
‰ìfunc
Ë
	`OPENSSL_sk_p›_‰ì
(
	`os¶_check_X509_LOOKUP_sk_ty≥
(sk),
	`os¶_check_X509_LOOKUP_‰ìfunc_ty≥
(‰ìfunc))

	)

84 
	#sk_X509_LOOKUP_ö£π
(
sk
, 
±r
, 
idx
Ë
	`OPENSSL_sk_ö£π
(
	`os¶_check_X509_LOOKUP_sk_ty≥
(sk), 
	`os¶_check_X509_LOOKUP_ty≥
’å), (idx))

	)

85 
	#sk_X509_LOOKUP_£t
(
sk
, 
idx
, 
±r
Ë((
X509_LOOKUP
 *)
	`OPENSSL_sk_£t
(
	`os¶_check_X509_LOOKUP_sk_ty≥
(sk), (idx), 
	`os¶_check_X509_LOOKUP_ty≥
’å)))

	)

86 
	#sk_X509_LOOKUP_föd
(
sk
, 
±r
Ë
	`OPENSSL_sk_föd
(
	`os¶_check_X509_LOOKUP_sk_ty≥
(sk), 
	`os¶_check_X509_LOOKUP_ty≥
’å))

	)

87 
	#sk_X509_LOOKUP_föd_ex
(
sk
, 
±r
Ë
	`OPENSSL_sk_föd_ex
(
	`os¶_check_X509_LOOKUP_sk_ty≥
(sk), 
	`os¶_check_X509_LOOKUP_ty≥
’å))

	)

88 
	#sk_X509_LOOKUP_föd_Æl
(
sk
, 
±r
, 
≤um
Ë
	`OPENSSL_sk_föd_Æl
(
	`os¶_check_X509_LOOKUP_sk_ty≥
(sk), 
	`os¶_check_X509_LOOKUP_ty≥
’å),Önum)

	)

89 
	#sk_X509_LOOKUP_s‹t
(
sk
Ë
	`OPENSSL_sk_s‹t
(
	`os¶_check_X509_LOOKUP_sk_ty≥
(sk))

	)

90 
	#sk_X509_LOOKUP_is_s‹ãd
(
sk
Ë
	`OPENSSL_sk_is_s‹ãd
(
	`os¶_check_c⁄°_X509_LOOKUP_sk_ty≥
(sk))

	)

91 
	#sk_X509_LOOKUP_dup
(
sk
Ë((
	`STACK_OF
(
X509_LOOKUP
Ë*)
	`OPENSSL_sk_dup
(
	`os¶_check_c⁄°_X509_LOOKUP_sk_ty≥
(sk)))

	)

92 
	#sk_X509_LOOKUP_dìp_c›y
(
sk
, 
c›yfunc
, 
‰ìfunc
Ë((
	`STACK_OF
(
X509_LOOKUP
Ë*)
	`OPENSSL_sk_dìp_c›y
(
	`os¶_check_c⁄°_X509_LOOKUP_sk_ty≥
(sk), 
	`os¶_check_X509_LOOKUP_c›yfunc_ty≥
(c›yfunc), 
	`os¶_check_X509_LOOKUP_‰ìfunc_ty≥
(‰ìfunc)))

	)

93 
	#sk_X509_LOOKUP_£t_cmp_func
(
sk
, 
cmp
Ë((
sk_X509_LOOKUP_compfunc
)
	`OPENSSL_sk_£t_cmp_func
(
	`os¶_check_X509_LOOKUP_sk_ty≥
(sk), 
	`os¶_check_X509_LOOKUP_compfunc_ty≥
(cmp)))

	)

94 
SKM_DEFINE_STACK_OF_INTERNAL
(
X509_OBJECT
, X509_OBJECT, X509_OBJECT)

95 
	#sk_X509_OBJECT_num
(
sk
Ë
	`OPENSSL_sk_num
(
	`os¶_check_c⁄°_X509_OBJECT_sk_ty≥
(sk))

	)

96 
	#sk_X509_OBJECT_vÆue
(
sk
, 
idx
Ë((
X509_OBJECT
 *)
	`OPENSSL_sk_vÆue
(
	`os¶_check_c⁄°_X509_OBJECT_sk_ty≥
(sk), (idx)))

	)

97 
	#sk_X509_OBJECT_√w
(
cmp
Ë((
	`STACK_OF
(
X509_OBJECT
Ë*)
	`OPENSSL_sk_√w
(
	`os¶_check_X509_OBJECT_compfunc_ty≥
(cmp)))

	)

98 
	#sk_X509_OBJECT_√w_nuŒ
(Ë((
	`STACK_OF
(
X509_OBJECT
Ë*)
	`OPENSSL_sk_√w_nuŒ
())

	)

99 
	#sk_X509_OBJECT_√w_ª£rve
(
cmp
, 
n
Ë((
	`STACK_OF
(
X509_OBJECT
Ë*)
	`OPENSSL_sk_√w_ª£rve
(
	`os¶_check_X509_OBJECT_compfunc_ty≥
(cmp), (n)))

	)

100 
	#sk_X509_OBJECT_ª£rve
(
sk
, 
n
Ë
	`OPENSSL_sk_ª£rve
(
	`os¶_check_X509_OBJECT_sk_ty≥
(sk), (n))

	)

101 
	#sk_X509_OBJECT_‰ì
(
sk
Ë
	`OPENSSL_sk_‰ì
(
	`os¶_check_X509_OBJECT_sk_ty≥
(sk))

	)

102 
	#sk_X509_OBJECT_zîo
(
sk
Ë
	`OPENSSL_sk_zîo
(
	`os¶_check_X509_OBJECT_sk_ty≥
(sk))

	)

103 
	#sk_X509_OBJECT_dñëe
(
sk
, 
i
Ë((
X509_OBJECT
 *)
	`OPENSSL_sk_dñëe
(
	`os¶_check_X509_OBJECT_sk_ty≥
(sk), (i)))

	)

104 
	#sk_X509_OBJECT_dñëe_±r
(
sk
, 
±r
Ë((
X509_OBJECT
 *)
	`OPENSSL_sk_dñëe_±r
(
	`os¶_check_X509_OBJECT_sk_ty≥
(sk), 
	`os¶_check_X509_OBJECT_ty≥
’å)))

	)

105 
	#sk_X509_OBJECT_push
(
sk
, 
±r
Ë
	`OPENSSL_sk_push
(
	`os¶_check_X509_OBJECT_sk_ty≥
(sk), 
	`os¶_check_X509_OBJECT_ty≥
’å))

	)

106 
	#sk_X509_OBJECT_unshi·
(
sk
, 
±r
Ë
	`OPENSSL_sk_unshi·
(
	`os¶_check_X509_OBJECT_sk_ty≥
(sk), 
	`os¶_check_X509_OBJECT_ty≥
’å))

	)

107 
	#sk_X509_OBJECT_p›
(
sk
Ë((
X509_OBJECT
 *)
	`OPENSSL_sk_p›
(
	`os¶_check_X509_OBJECT_sk_ty≥
(sk)))

	)

108 
	#sk_X509_OBJECT_shi·
(
sk
Ë((
X509_OBJECT
 *)
	`OPENSSL_sk_shi·
(
	`os¶_check_X509_OBJECT_sk_ty≥
(sk)))

	)

109 
	#sk_X509_OBJECT_p›_‰ì
(
sk
, 
‰ìfunc
Ë
	`OPENSSL_sk_p›_‰ì
(
	`os¶_check_X509_OBJECT_sk_ty≥
(sk),
	`os¶_check_X509_OBJECT_‰ìfunc_ty≥
(‰ìfunc))

	)

110 
	#sk_X509_OBJECT_ö£π
(
sk
, 
±r
, 
idx
Ë
	`OPENSSL_sk_ö£π
(
	`os¶_check_X509_OBJECT_sk_ty≥
(sk), 
	`os¶_check_X509_OBJECT_ty≥
’å), (idx))

	)

111 
	#sk_X509_OBJECT_£t
(
sk
, 
idx
, 
±r
Ë((
X509_OBJECT
 *)
	`OPENSSL_sk_£t
(
	`os¶_check_X509_OBJECT_sk_ty≥
(sk), (idx), 
	`os¶_check_X509_OBJECT_ty≥
’å)))

	)

112 
	#sk_X509_OBJECT_föd
(
sk
, 
±r
Ë
	`OPENSSL_sk_föd
(
	`os¶_check_X509_OBJECT_sk_ty≥
(sk), 
	`os¶_check_X509_OBJECT_ty≥
’å))

	)

113 
	#sk_X509_OBJECT_föd_ex
(
sk
, 
±r
Ë
	`OPENSSL_sk_föd_ex
(
	`os¶_check_X509_OBJECT_sk_ty≥
(sk), 
	`os¶_check_X509_OBJECT_ty≥
’å))

	)

114 
	#sk_X509_OBJECT_föd_Æl
(
sk
, 
±r
, 
≤um
Ë
	`OPENSSL_sk_föd_Æl
(
	`os¶_check_X509_OBJECT_sk_ty≥
(sk), 
	`os¶_check_X509_OBJECT_ty≥
’å),Önum)

	)

115 
	#sk_X509_OBJECT_s‹t
(
sk
Ë
	`OPENSSL_sk_s‹t
(
	`os¶_check_X509_OBJECT_sk_ty≥
(sk))

	)

116 
	#sk_X509_OBJECT_is_s‹ãd
(
sk
Ë
	`OPENSSL_sk_is_s‹ãd
(
	`os¶_check_c⁄°_X509_OBJECT_sk_ty≥
(sk))

	)

117 
	#sk_X509_OBJECT_dup
(
sk
Ë((
	`STACK_OF
(
X509_OBJECT
Ë*)
	`OPENSSL_sk_dup
(
	`os¶_check_c⁄°_X509_OBJECT_sk_ty≥
(sk)))

	)

118 
	#sk_X509_OBJECT_dìp_c›y
(
sk
, 
c›yfunc
, 
‰ìfunc
Ë((
	`STACK_OF
(
X509_OBJECT
Ë*)
	`OPENSSL_sk_dìp_c›y
(
	`os¶_check_c⁄°_X509_OBJECT_sk_ty≥
(sk), 
	`os¶_check_X509_OBJECT_c›yfunc_ty≥
(c›yfunc), 
	`os¶_check_X509_OBJECT_‰ìfunc_ty≥
(‰ìfunc)))

	)

119 
	#sk_X509_OBJECT_£t_cmp_func
(
sk
, 
cmp
Ë((
sk_X509_OBJECT_compfunc
)
	`OPENSSL_sk_£t_cmp_func
(
	`os¶_check_X509_OBJECT_sk_ty≥
(sk), 
	`os¶_check_X509_OBJECT_compfunc_ty≥
(cmp)))

	)

120 
SKM_DEFINE_STACK_OF_INTERNAL
(
X509_VERIFY_PARAM
, X509_VERIFY_PARAM, X509_VERIFY_PARAM)

121 
	#sk_X509_VERIFY_PARAM_num
(
sk
Ë
	`OPENSSL_sk_num
(
	`os¶_check_c⁄°_X509_VERIFY_PARAM_sk_ty≥
(sk))

	)

122 
	#sk_X509_VERIFY_PARAM_vÆue
(
sk
, 
idx
Ë((
X509_VERIFY_PARAM
 *)
	`OPENSSL_sk_vÆue
(
	`os¶_check_c⁄°_X509_VERIFY_PARAM_sk_ty≥
(sk), (idx)))

	)

123 
	#sk_X509_VERIFY_PARAM_√w
(
cmp
Ë((
	`STACK_OF
(
X509_VERIFY_PARAM
Ë*)
	`OPENSSL_sk_√w
(
	`os¶_check_X509_VERIFY_PARAM_compfunc_ty≥
(cmp)))

	)

124 
	#sk_X509_VERIFY_PARAM_√w_nuŒ
(Ë((
	`STACK_OF
(
X509_VERIFY_PARAM
Ë*)
	`OPENSSL_sk_√w_nuŒ
())

	)

125 
	#sk_X509_VERIFY_PARAM_√w_ª£rve
(
cmp
, 
n
Ë((
	`STACK_OF
(
X509_VERIFY_PARAM
Ë*)
	`OPENSSL_sk_√w_ª£rve
(
	`os¶_check_X509_VERIFY_PARAM_compfunc_ty≥
(cmp), (n)))

	)

126 
	#sk_X509_VERIFY_PARAM_ª£rve
(
sk
, 
n
Ë
	`OPENSSL_sk_ª£rve
(
	`os¶_check_X509_VERIFY_PARAM_sk_ty≥
(sk), (n))

	)

127 
	#sk_X509_VERIFY_PARAM_‰ì
(
sk
Ë
	`OPENSSL_sk_‰ì
(
	`os¶_check_X509_VERIFY_PARAM_sk_ty≥
(sk))

	)

128 
	#sk_X509_VERIFY_PARAM_zîo
(
sk
Ë
	`OPENSSL_sk_zîo
(
	`os¶_check_X509_VERIFY_PARAM_sk_ty≥
(sk))

	)

129 
	#sk_X509_VERIFY_PARAM_dñëe
(
sk
, 
i
Ë((
X509_VERIFY_PARAM
 *)
	`OPENSSL_sk_dñëe
(
	`os¶_check_X509_VERIFY_PARAM_sk_ty≥
(sk), (i)))

	)

130 
	#sk_X509_VERIFY_PARAM_dñëe_±r
(
sk
, 
±r
Ë((
X509_VERIFY_PARAM
 *)
	`OPENSSL_sk_dñëe_±r
(
	`os¶_check_X509_VERIFY_PARAM_sk_ty≥
(sk), 
	`os¶_check_X509_VERIFY_PARAM_ty≥
’å)))

	)

131 
	#sk_X509_VERIFY_PARAM_push
(
sk
, 
±r
Ë
	`OPENSSL_sk_push
(
	`os¶_check_X509_VERIFY_PARAM_sk_ty≥
(sk), 
	`os¶_check_X509_VERIFY_PARAM_ty≥
’å))

	)

132 
	#sk_X509_VERIFY_PARAM_unshi·
(
sk
, 
±r
Ë
	`OPENSSL_sk_unshi·
(
	`os¶_check_X509_VERIFY_PARAM_sk_ty≥
(sk), 
	`os¶_check_X509_VERIFY_PARAM_ty≥
’å))

	)

133 
	#sk_X509_VERIFY_PARAM_p›
(
sk
Ë((
X509_VERIFY_PARAM
 *)
	`OPENSSL_sk_p›
(
	`os¶_check_X509_VERIFY_PARAM_sk_ty≥
(sk)))

	)

134 
	#sk_X509_VERIFY_PARAM_shi·
(
sk
Ë((
X509_VERIFY_PARAM
 *)
	`OPENSSL_sk_shi·
(
	`os¶_check_X509_VERIFY_PARAM_sk_ty≥
(sk)))

	)

135 
	#sk_X509_VERIFY_PARAM_p›_‰ì
(
sk
, 
‰ìfunc
Ë
	`OPENSSL_sk_p›_‰ì
(
	`os¶_check_X509_VERIFY_PARAM_sk_ty≥
(sk),
	`os¶_check_X509_VERIFY_PARAM_‰ìfunc_ty≥
(‰ìfunc))

	)

136 
	#sk_X509_VERIFY_PARAM_ö£π
(
sk
, 
±r
, 
idx
Ë
	`OPENSSL_sk_ö£π
(
	`os¶_check_X509_VERIFY_PARAM_sk_ty≥
(sk), 
	`os¶_check_X509_VERIFY_PARAM_ty≥
’å), (idx))

	)

137 
	#sk_X509_VERIFY_PARAM_£t
(
sk
, 
idx
, 
±r
Ë((
X509_VERIFY_PARAM
 *)
	`OPENSSL_sk_£t
(
	`os¶_check_X509_VERIFY_PARAM_sk_ty≥
(sk), (idx), 
	`os¶_check_X509_VERIFY_PARAM_ty≥
’å)))

	)

138 
	#sk_X509_VERIFY_PARAM_föd
(
sk
, 
±r
Ë
	`OPENSSL_sk_föd
(
	`os¶_check_X509_VERIFY_PARAM_sk_ty≥
(sk), 
	`os¶_check_X509_VERIFY_PARAM_ty≥
’å))

	)

139 
	#sk_X509_VERIFY_PARAM_föd_ex
(
sk
, 
±r
Ë
	`OPENSSL_sk_föd_ex
(
	`os¶_check_X509_VERIFY_PARAM_sk_ty≥
(sk), 
	`os¶_check_X509_VERIFY_PARAM_ty≥
’å))

	)

140 
	#sk_X509_VERIFY_PARAM_föd_Æl
(
sk
, 
±r
, 
≤um
Ë
	`OPENSSL_sk_föd_Æl
(
	`os¶_check_X509_VERIFY_PARAM_sk_ty≥
(sk), 
	`os¶_check_X509_VERIFY_PARAM_ty≥
’å),Önum)

	)

141 
	#sk_X509_VERIFY_PARAM_s‹t
(
sk
Ë
	`OPENSSL_sk_s‹t
(
	`os¶_check_X509_VERIFY_PARAM_sk_ty≥
(sk))

	)

142 
	#sk_X509_VERIFY_PARAM_is_s‹ãd
(
sk
Ë
	`OPENSSL_sk_is_s‹ãd
(
	`os¶_check_c⁄°_X509_VERIFY_PARAM_sk_ty≥
(sk))

	)

143 
	#sk_X509_VERIFY_PARAM_dup
(
sk
Ë((
	`STACK_OF
(
X509_VERIFY_PARAM
Ë*)
	`OPENSSL_sk_dup
(
	`os¶_check_c⁄°_X509_VERIFY_PARAM_sk_ty≥
(sk)))

	)

144 
	#sk_X509_VERIFY_PARAM_dìp_c›y
(
sk
, 
c›yfunc
, 
‰ìfunc
Ë((
	`STACK_OF
(
X509_VERIFY_PARAM
Ë*)
	`OPENSSL_sk_dìp_c›y
(
	`os¶_check_c⁄°_X509_VERIFY_PARAM_sk_ty≥
(sk), 
	`os¶_check_X509_VERIFY_PARAM_c›yfunc_ty≥
(c›yfunc), 
	`os¶_check_X509_VERIFY_PARAM_‰ìfunc_ty≥
(‰ìfunc)))

	)

145 
	#sk_X509_VERIFY_PARAM_£t_cmp_func
(
sk
, 
cmp
Ë((
sk_X509_VERIFY_PARAM_compfunc
)
	`OPENSSL_sk_£t_cmp_func
(
	`os¶_check_X509_VERIFY_PARAM_sk_ty≥
(sk), 
	`os¶_check_X509_VERIFY_PARAM_compfunc_ty≥
(cmp)))

	)

149 
	sx509_åu°_°
 {

150 
åu°
;

151 
Êags
;

152 (*
check_åu°
Ë(
x509_åu°_°
 *, 
X509
 *, );

153 *
«me
;

154 
¨g1
;

155 *
¨g2
;

156 } 
	tX509_TRUST
;

157 
SKM_DEFINE_STACK_OF_INTERNAL
(
X509_TRUST
, X509_TRUST, X509_TRUST)

158 
	#sk_X509_TRUST_num
(
sk
Ë
	`OPENSSL_sk_num
(
	`os¶_check_c⁄°_X509_TRUST_sk_ty≥
(sk))

	)

159 
	#sk_X509_TRUST_vÆue
(
sk
, 
idx
Ë((
X509_TRUST
 *)
	`OPENSSL_sk_vÆue
(
	`os¶_check_c⁄°_X509_TRUST_sk_ty≥
(sk), (idx)))

	)

160 
	#sk_X509_TRUST_√w
(
cmp
Ë((
	`STACK_OF
(
X509_TRUST
Ë*)
	`OPENSSL_sk_√w
(
	`os¶_check_X509_TRUST_compfunc_ty≥
(cmp)))

	)

161 
	#sk_X509_TRUST_√w_nuŒ
(Ë((
	`STACK_OF
(
X509_TRUST
Ë*)
	`OPENSSL_sk_√w_nuŒ
())

	)

162 
	#sk_X509_TRUST_√w_ª£rve
(
cmp
, 
n
Ë((
	`STACK_OF
(
X509_TRUST
Ë*)
	`OPENSSL_sk_√w_ª£rve
(
	`os¶_check_X509_TRUST_compfunc_ty≥
(cmp), (n)))

	)

163 
	#sk_X509_TRUST_ª£rve
(
sk
, 
n
Ë
	`OPENSSL_sk_ª£rve
(
	`os¶_check_X509_TRUST_sk_ty≥
(sk), (n))

	)

164 
	#sk_X509_TRUST_‰ì
(
sk
Ë
	`OPENSSL_sk_‰ì
(
	`os¶_check_X509_TRUST_sk_ty≥
(sk))

	)

165 
	#sk_X509_TRUST_zîo
(
sk
Ë
	`OPENSSL_sk_zîo
(
	`os¶_check_X509_TRUST_sk_ty≥
(sk))

	)

166 
	#sk_X509_TRUST_dñëe
(
sk
, 
i
Ë((
X509_TRUST
 *)
	`OPENSSL_sk_dñëe
(
	`os¶_check_X509_TRUST_sk_ty≥
(sk), (i)))

	)

167 
	#sk_X509_TRUST_dñëe_±r
(
sk
, 
±r
Ë((
X509_TRUST
 *)
	`OPENSSL_sk_dñëe_±r
(
	`os¶_check_X509_TRUST_sk_ty≥
(sk), 
	`os¶_check_X509_TRUST_ty≥
’å)))

	)

168 
	#sk_X509_TRUST_push
(
sk
, 
±r
Ë
	`OPENSSL_sk_push
(
	`os¶_check_X509_TRUST_sk_ty≥
(sk), 
	`os¶_check_X509_TRUST_ty≥
’å))

	)

169 
	#sk_X509_TRUST_unshi·
(
sk
, 
±r
Ë
	`OPENSSL_sk_unshi·
(
	`os¶_check_X509_TRUST_sk_ty≥
(sk), 
	`os¶_check_X509_TRUST_ty≥
’å))

	)

170 
	#sk_X509_TRUST_p›
(
sk
Ë((
X509_TRUST
 *)
	`OPENSSL_sk_p›
(
	`os¶_check_X509_TRUST_sk_ty≥
(sk)))

	)

171 
	#sk_X509_TRUST_shi·
(
sk
Ë((
X509_TRUST
 *)
	`OPENSSL_sk_shi·
(
	`os¶_check_X509_TRUST_sk_ty≥
(sk)))

	)

172 
	#sk_X509_TRUST_p›_‰ì
(
sk
, 
‰ìfunc
Ë
	`OPENSSL_sk_p›_‰ì
(
	`os¶_check_X509_TRUST_sk_ty≥
(sk),
	`os¶_check_X509_TRUST_‰ìfunc_ty≥
(‰ìfunc))

	)

173 
	#sk_X509_TRUST_ö£π
(
sk
, 
±r
, 
idx
Ë
	`OPENSSL_sk_ö£π
(
	`os¶_check_X509_TRUST_sk_ty≥
(sk), 
	`os¶_check_X509_TRUST_ty≥
’å), (idx))

	)

174 
	#sk_X509_TRUST_£t
(
sk
, 
idx
, 
±r
Ë((
X509_TRUST
 *)
	`OPENSSL_sk_£t
(
	`os¶_check_X509_TRUST_sk_ty≥
(sk), (idx), 
	`os¶_check_X509_TRUST_ty≥
’å)))

	)

175 
	#sk_X509_TRUST_föd
(
sk
, 
±r
Ë
	`OPENSSL_sk_föd
(
	`os¶_check_X509_TRUST_sk_ty≥
(sk), 
	`os¶_check_X509_TRUST_ty≥
’å))

	)

176 
	#sk_X509_TRUST_föd_ex
(
sk
, 
±r
Ë
	`OPENSSL_sk_föd_ex
(
	`os¶_check_X509_TRUST_sk_ty≥
(sk), 
	`os¶_check_X509_TRUST_ty≥
’å))

	)

177 
	#sk_X509_TRUST_föd_Æl
(
sk
, 
±r
, 
≤um
Ë
	`OPENSSL_sk_föd_Æl
(
	`os¶_check_X509_TRUST_sk_ty≥
(sk), 
	`os¶_check_X509_TRUST_ty≥
’å),Önum)

	)

178 
	#sk_X509_TRUST_s‹t
(
sk
Ë
	`OPENSSL_sk_s‹t
(
	`os¶_check_X509_TRUST_sk_ty≥
(sk))

	)

179 
	#sk_X509_TRUST_is_s‹ãd
(
sk
Ë
	`OPENSSL_sk_is_s‹ãd
(
	`os¶_check_c⁄°_X509_TRUST_sk_ty≥
(sk))

	)

180 
	#sk_X509_TRUST_dup
(
sk
Ë((
	`STACK_OF
(
X509_TRUST
Ë*)
	`OPENSSL_sk_dup
(
	`os¶_check_c⁄°_X509_TRUST_sk_ty≥
(sk)))

	)

181 
	#sk_X509_TRUST_dìp_c›y
(
sk
, 
c›yfunc
, 
‰ìfunc
Ë((
	`STACK_OF
(
X509_TRUST
Ë*)
	`OPENSSL_sk_dìp_c›y
(
	`os¶_check_c⁄°_X509_TRUST_sk_ty≥
(sk), 
	`os¶_check_X509_TRUST_c›yfunc_ty≥
(c›yfunc), 
	`os¶_check_X509_TRUST_‰ìfunc_ty≥
(‰ìfunc)))

	)

182 
	#sk_X509_TRUST_£t_cmp_func
(
sk
, 
cmp
Ë((
sk_X509_TRUST_compfunc
)
	`OPENSSL_sk_£t_cmp_func
(
	`os¶_check_X509_TRUST_sk_ty≥
(sk), 
	`os¶_check_X509_TRUST_compfunc_ty≥
(cmp)))

	)

186 
	#X509_TRUST_DEFAULT
 0

	)

187 
	#X509_TRUST_COMPAT
 1

	)

188 
	#X509_TRUST_SSL_CLIENT
 2

	)

189 
	#X509_TRUST_SSL_SERVER
 3

	)

190 
	#X509_TRUST_EMAIL
 4

	)

191 
	#X509_TRUST_OBJECT_SIGN
 5

	)

192 
	#X509_TRUST_OCSP_SIGN
 6

	)

193 
	#X509_TRUST_OCSP_REQUEST
 7

	)

194 
	#X509_TRUST_TSA
 8

	)

196 
	#X509_TRUST_MIN
 1

	)

197 
	#X509_TRUST_MAX
 8

	)

200 
	#X509_TRUST_DYNAMIC
 (1U << 0)

	)

201 
	#X509_TRUST_DYNAMIC_NAME
 (1U << 1)

	)

203 
	#X509_TRUST_NO_SS_COMPAT
 (1U << 2)

	)

205 
	#X509_TRUST_DO_SS_COMPAT
 (1U << 3)

	)

207 
	#X509_TRUST_OK_ANY_EKU
 (1U << 4)

	)

210 
	#X509_TRUST_TRUSTED
 1

	)

211 
	#X509_TRUST_REJECTED
 2

	)

212 
	#X509_TRUST_UNTRUSTED
 3

	)

214 
X509_TRUST_£t
(*
t
, 
åu°
);

215 
X509_TRUST_gë_cou¡
();

216 
X509_TRUST
 *
X509_TRUST_gë0
(
idx
);

217 
X509_TRUST_gë_by_id
(
id
);

218 
X509_TRUST_add
(
id
, 
Êags
, (*
ck
Ë(
X509_TRUST
 *, 
X509
 *, ),

219 c⁄° *
«me
, 
¨g1
, *
¨g2
);

220 
X509_TRUST_˛ónup
();

221 
X509_TRUST_gë_Êags
(c⁄° 
X509_TRUST
 *
xp
);

222 *
X509_TRUST_gë0_«me
(c⁄° 
X509_TRUST
 *
xp
);

223 
X509_TRUST_gë_åu°
(c⁄° 
X509_TRUST
 *
xp
);

225 
X509_åu°ed
(c⁄° 
X509
 *
x
);

226 
X509_add1_åu°_obje˘
(
X509
 *
x
, c⁄° 
ASN1_OBJECT
 *
obj
);

227 
X509_add1_ªje˘_obje˘
(
X509
 *
x
, c⁄° 
ASN1_OBJECT
 *
obj
);

228 
X509_åu°_˛ór
(
X509
 *
x
);

229 
X509_ªje˘_˛ór
(
X509
 *
x
);

230 
STACK_OF
(
ASN1_OBJECT
Ë*
X509_gë0_åu°_obje˘s
(
X509
 *
x
);

231 
STACK_OF
(
ASN1_OBJECT
Ë*
X509_gë0_ªje˘_obje˘s
(
X509
 *
x
);

233 (*
X509_TRUST_£t_deÁu…
((*
åu°
Ë(, 
X509
 *, ))) (, X509 *,

235 
X509_check_åu°
(
X509
 *
x
, 
id
, 
Êags
);

237 
X509_vîify_˚π
(
X509_STORE_CTX
 *
˘x
);

238 
X509_STORE_CTX_vîify
(
X509_STORE_CTX
 *
˘x
);

239 
STACK_OF
(
X509
Ë*
X509_buûd_chaö
(X509 *
èrgë
, STACK_OF(X509Ë*
˚πs
,

240 
X509_STORE
 *
°‹e
, 
wôh_£lf_sig√d
,

241 
OSSL_LIB_CTX
 *
lib˘x
, c⁄° *
¥›q
);

243 
X509_STORE_£t_dïth
(
X509_STORE
 *
°‹e
, 
dïth
);

245 (*
X509_STORE_CTX_vîify_cb
)(, 
	tX509_STORE_CTX
 *);

246 
X509_STORE_CTX_¥öt_vîify_cb
(
ok
, 
X509_STORE_CTX
 *
˘x
);

247 (*
X509_STORE_CTX_vîify_‚
)(
	tX509_STORE_CTX
 *);

248 (*
X509_STORE_CTX_gë_issuî_‚
)(
	tX509
 **
	tissuî
,

249 
	tX509_STORE_CTX
 *
	t˘x
, 
	tX509
 *
	tx
);

250 (*
X509_STORE_CTX_check_issued_‚
)(
	tX509_STORE_CTX
 *
	t˘x
,

251 
	tX509
 *
	tx
, X509 *
	tissuî
);

252 (*
X509_STORE_CTX_check_ªvoˇti⁄_‚
)(
	tX509_STORE_CTX
 *
	t˘x
);

253 (*
X509_STORE_CTX_gë_¸l_‚
)(
	tX509_STORE_CTX
 *
	t˘x
,

254 
	tX509_CRL
 **
	t¸l
, 
	tX509
 *
	tx
);

255 (*
X509_STORE_CTX_check_¸l_‚
)(
	tX509_STORE_CTX
 *
	t˘x
, 
	tX509_CRL
 *
	t¸l
);

256 (*
X509_STORE_CTX_˚π_¸l_‚
)(
	tX509_STORE_CTX
 *
	t˘x
,

257 
	tX509_CRL
 *
	t¸l
, 
	tX509
 *
	tx
);

258 (*
X509_STORE_CTX_check_pﬁicy_‚
)(
	tX509_STORE_CTX
 *
	t˘x
);

259 
STACK_OF
(
	tX509
)

260 *(*
	tX509_STORE_CTX_lookup_˚πs_‚
)(
	tX509_STORE_CTX
 *
	t˘x
,

261 c⁄° 
	tX509_NAME
 *
	tnm
);

262 
STACK_OF
(
	tX509_CRL
)

263 *(*
	tX509_STORE_CTX_lookup_¸ls_‚
)(c⁄° 
	tX509_STORE_CTX
 *
	t˘x
,

264 c⁄° 
	tX509_NAME
 *
	tnm
);

265 (*
X509_STORE_CTX_˛ónup_‚
)(
	tX509_STORE_CTX
 *
	t˘x
);

267 
X509_STORE_CTX_£t_dïth
(
X509_STORE_CTX
 *
˘x
, 
dïth
);

269 
	#X509_STORE_CTX_£t_≠p_d©a
(
˘x
,
d©a
) \

270 
	`X509_STORE_CTX_£t_ex_d©a
(
˘x
,0,
d©a
)

	)

271 
	#X509_STORE_CTX_gë_≠p_d©a
(
˘x
) \

272 
	`X509_STORE_CTX_gë_ex_d©a
(
˘x
,0)

	)

274 
	#X509_L_FILE_LOAD
 1

	)

275 
	#X509_L_ADD_DIR
 2

	)

276 
	#X509_L_ADD_STORE
 3

	)

277 
	#X509_L_LOAD_STORE
 4

	)

279 
	#X509_LOOKUP_lﬂd_fûe
(
x
,
«me
,
ty≥
) \

280 
	`X509_LOOKUP_˘æ
((
x
),
X509_L_FILE_LOAD
,(
«me
),()(
ty≥
),
NULL
)

	)

282 
	#X509_LOOKUP_add_dú
(
x
,
«me
,
ty≥
) \

283 
	`X509_LOOKUP_˘æ
((
x
),
X509_L_ADD_DIR
,(
«me
),()(
ty≥
),
NULL
)

	)

285 
	#X509_LOOKUP_add_°‹e
(
x
,
«me
) \

286 
	`X509_LOOKUP_˘æ
((
x
),
X509_L_ADD_STORE
,(
«me
),0,
NULL
)

	)

288 
	#X509_LOOKUP_lﬂd_°‹e
(
x
,
«me
) \

289 
	`X509_LOOKUP_˘æ
((
x
),
X509_L_LOAD_STORE
,(
«me
),0,
NULL
)

	)

291 
	#X509_LOOKUP_lﬂd_fûe_ex
(
x
, 
«me
, 
ty≥
, 
lib˘x
, 
¥›q
) \

292 
	`X509_LOOKUP_˘æ_ex
((
x
), 
X509_L_FILE_LOAD
, (
«me
), ()(
ty≥
), 
NULL
,\

293 (
lib˘x
), (
¥›q
))

	)

295 
	#X509_LOOKUP_lﬂd_°‹e_ex
(
x
, 
«me
, 
lib˘x
, 
¥›q
) \

296 
	`X509_LOOKUP_˘æ_ex
((
x
), 
X509_L_LOAD_STORE
, (
«me
), 0, 
NULL
, \

297 (
lib˘x
), (
¥›q
))

	)

299 
	#X509_LOOKUP_add_°‹e_ex
(
x
, 
«me
, 
lib˘x
, 
¥›q
) \

300 
	`X509_LOOKUP_˘æ_ex
((
x
), 
X509_L_ADD_STORE
, (
«me
), 0, 
NULL
, \

301 (
lib˘x
), (
¥›q
))

	)

303 
	#X509_V_OK
 0

	)

304 
	#X509_V_ERR_UNSPECIFIED
 1

	)

305 
	#X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT
 2

	)

306 
	#X509_V_ERR_UNABLE_TO_GET_CRL
 3

	)

307 
	#X509_V_ERR_UNABLE_TO_DECRYPT_CERT_SIGNATURE
 4

	)

308 
	#X509_V_ERR_UNABLE_TO_DECRYPT_CRL_SIGNATURE
 5

	)

309 
	#X509_V_ERR_UNABLE_TO_DECODE_ISSUER_PUBLIC_KEY
 6

	)

310 
	#X509_V_ERR_CERT_SIGNATURE_FAILURE
 7

	)

311 
	#X509_V_ERR_CRL_SIGNATURE_FAILURE
 8

	)

312 
	#X509_V_ERR_CERT_NOT_YET_VALID
 9

	)

313 
	#X509_V_ERR_CERT_HAS_EXPIRED
 10

	)

314 
	#X509_V_ERR_CRL_NOT_YET_VALID
 11

	)

315 
	#X509_V_ERR_CRL_HAS_EXPIRED
 12

	)

316 
	#X509_V_ERR_ERROR_IN_CERT_NOT_BEFORE_FIELD
 13

	)

317 
	#X509_V_ERR_ERROR_IN_CERT_NOT_AFTER_FIELD
 14

	)

318 
	#X509_V_ERR_ERROR_IN_CRL_LAST_UPDATE_FIELD
 15

	)

319 
	#X509_V_ERR_ERROR_IN_CRL_NEXT_UPDATE_FIELD
 16

	)

320 
	#X509_V_ERR_OUT_OF_MEM
 17

	)

321 
	#X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT
 18

	)

322 
	#X509_V_ERR_SELF_SIGNED_CERT_IN_CHAIN
 19

	)

323 
	#X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY
 20

	)

324 
	#X509_V_ERR_UNABLE_TO_VERIFY_LEAF_SIGNATURE
 21

	)

325 
	#X509_V_ERR_CERT_CHAIN_TOO_LONG
 22

	)

326 
	#X509_V_ERR_CERT_REVOKED
 23

	)

327 
	#X509_V_ERR_NO_ISSUER_PUBLIC_KEY
 24

	)

328 
	#X509_V_ERR_PATH_LENGTH_EXCEEDED
 25

	)

329 
	#X509_V_ERR_INVALID_PURPOSE
 26

	)

330 
	#X509_V_ERR_CERT_UNTRUSTED
 27

	)

331 
	#X509_V_ERR_CERT_REJECTED
 28

	)

334 
	#X509_V_ERR_SUBJECT_ISSUER_MISMATCH
 29

	)

335 
	#X509_V_ERR_AKID_SKID_MISMATCH
 30

	)

336 
	#X509_V_ERR_AKID_ISSUER_SERIAL_MISMATCH
 31

	)

337 
	#X509_V_ERR_KEYUSAGE_NO_CERTSIGN
 32

	)

338 
	#X509_V_ERR_UNABLE_TO_GET_CRL_ISSUER
 33

	)

339 
	#X509_V_ERR_UNHANDLED_CRITICAL_EXTENSION
 34

	)

340 
	#X509_V_ERR_KEYUSAGE_NO_CRL_SIGN
 35

	)

341 
	#X509_V_ERR_UNHANDLED_CRITICAL_CRL_EXTENSION
 36

	)

342 
	#X509_V_ERR_INVALID_NON_CA
 37

	)

343 
	#X509_V_ERR_PROXY_PATH_LENGTH_EXCEEDED
 38

	)

344 
	#X509_V_ERR_KEYUSAGE_NO_DIGITAL_SIGNATURE
 39

	)

345 
	#X509_V_ERR_PROXY_CERTIFICATES_NOT_ALLOWED
 40

	)

346 
	#X509_V_ERR_INVALID_EXTENSION
 41

	)

347 
	#X509_V_ERR_INVALID_POLICY_EXTENSION
 42

	)

348 
	#X509_V_ERR_NO_EXPLICIT_POLICY
 43

	)

349 
	#X509_V_ERR_DIFFERENT_CRL_SCOPE
 44

	)

350 
	#X509_V_ERR_UNSUPPORTED_EXTENSION_FEATURE
 45

	)

351 
	#X509_V_ERR_UNNESTED_RESOURCE
 46

	)

352 
	#X509_V_ERR_PERMITTED_VIOLATION
 47

	)

353 
	#X509_V_ERR_EXCLUDED_VIOLATION
 48

	)

354 
	#X509_V_ERR_SUBTREE_MINMAX
 49

	)

356 
	#X509_V_ERR_APPLICATION_VERIFICATION
 50

	)

357 
	#X509_V_ERR_UNSUPPORTED_CONSTRAINT_TYPE
 51

	)

358 
	#X509_V_ERR_UNSUPPORTED_CONSTRAINT_SYNTAX
 52

	)

359 
	#X509_V_ERR_UNSUPPORTED_NAME_SYNTAX
 53

	)

360 
	#X509_V_ERR_CRL_PATH_VALIDATION_ERROR
 54

	)

362 
	#X509_V_ERR_PATH_LOOP
 55

	)

364 
	#X509_V_ERR_SUITE_B_INVALID_VERSION
 56

	)

365 
	#X509_V_ERR_SUITE_B_INVALID_ALGORITHM
 57

	)

366 
	#X509_V_ERR_SUITE_B_INVALID_CURVE
 58

	)

367 
	#X509_V_ERR_SUITE_B_INVALID_SIGNATURE_ALGORITHM
 59

	)

368 
	#X509_V_ERR_SUITE_B_LOS_NOT_ALLOWED
 60

	)

369 
	#X509_V_ERR_SUITE_B_CANNOT_SIGN_P_384_WITH_P_256
 61

	)

371 
	#X509_V_ERR_HOSTNAME_MISMATCH
 62

	)

372 
	#X509_V_ERR_EMAIL_MISMATCH
 63

	)

373 
	#X509_V_ERR_IP_ADDRESS_MISMATCH
 64

	)

375 
	#X509_V_ERR_DANE_NO_MATCH
 65

	)

377 
	#X509_V_ERR_EE_KEY_TOO_SMALL
 66

	)

378 
	#X509_V_ERR_CA_KEY_TOO_SMALL
 67

	)

379 
	#X509_V_ERR_CA_MD_TOO_WEAK
 68

	)

381 
	#X509_V_ERR_INVALID_CALL
 69

	)

383 
	#X509_V_ERR_STORE_LOOKUP
 70

	)

385 
	#X509_V_ERR_NO_VALID_SCTS
 71

	)

387 
	#X509_V_ERR_PROXY_SUBJECT_NAME_VIOLATION
 72

	)

389 
	#X509_V_ERR_OCSP_VERIFY_NEEDED
 73

	)

390 
	#X509_V_ERR_OCSP_VERIFY_FAILED
 74

	)

391 
	#X509_V_ERR_OCSP_CERT_UNKNOWN
 75

	)

393 
	#X509_V_ERR_UNSUPPORTED_SIGNATURE_ALGORITHM
 76

	)

394 
	#X509_V_ERR_SIGNATURE_ALGORITHM_MISMATCH
 77

	)

397 
	#X509_V_ERR_SIGNATURE_ALGORITHM_INCONSISTENCY
 78

	)

398 
	#X509_V_ERR_INVALID_CA
 79

	)

399 
	#X509_V_ERR_PATHLEN_INVALID_FOR_NON_CA
 80

	)

400 
	#X509_V_ERR_PATHLEN_WITHOUT_KU_KEY_CERT_SIGN
 81

	)

401 
	#X509_V_ERR_KU_KEY_CERT_SIGN_INVALID_FOR_NON_CA
 82

	)

402 
	#X509_V_ERR_ISSUER_NAME_EMPTY
 83

	)

403 
	#X509_V_ERR_SUBJECT_NAME_EMPTY
 84

	)

404 
	#X509_V_ERR_MISSING_AUTHORITY_KEY_IDENTIFIER
 85

	)

405 
	#X509_V_ERR_MISSING_SUBJECT_KEY_IDENTIFIER
 86

	)

406 
	#X509_V_ERR_EMPTY_SUBJECT_ALT_NAME
 87

	)

407 
	#X509_V_ERR_EMPTY_SUBJECT_SAN_NOT_CRITICAL
 88

	)

408 
	#X509_V_ERR_CA_BCONS_NOT_CRITICAL
 89

	)

409 
	#X509_V_ERR_AUTHORITY_KEY_IDENTIFIER_CRITICAL
 90

	)

410 
	#X509_V_ERR_SUBJECT_KEY_IDENTIFIER_CRITICAL
 91

	)

411 
	#X509_V_ERR_CA_CERT_MISSING_KEY_USAGE
 92

	)

412 
	#X509_V_ERR_EXTENSIONS_REQUIRE_VERSION_3
 93

	)

413 
	#X509_V_ERR_EC_KEY_EXPLICIT_PARAMS
 94

	)

416 #i‚de‡
OPENSSL_NO_DEPRECATED_1_1_0


417 
	#X509_V_FLAG_CB_ISSUER_CHECK
 0x0

	)

420 
	#X509_V_FLAG_USE_CHECK_TIME
 0x2

	)

422 
	#X509_V_FLAG_CRL_CHECK
 0x4

	)

424 
	#X509_V_FLAG_CRL_CHECK_ALL
 0x8

	)

426 
	#X509_V_FLAG_IGNORE_CRITICAL
 0x10

	)

428 
	#X509_V_FLAG_X509_STRICT
 0x20

	)

430 
	#X509_V_FLAG_ALLOW_PROXY_CERTS
 0x40

	)

432 
	#X509_V_FLAG_POLICY_CHECK
 0x80

	)

434 
	#X509_V_FLAG_EXPLICIT_POLICY
 0x100

	)

436 
	#X509_V_FLAG_INHIBIT_ANY
 0x200

	)

438 
	#X509_V_FLAG_INHIBIT_MAP
 0x400

	)

440 
	#X509_V_FLAG_NOTIFY_POLICY
 0x800

	)

442 
	#X509_V_FLAG_EXTENDED_CRL_SUPPORT
 0x1000

	)

444 
	#X509_V_FLAG_USE_DELTAS
 0x2000

	)

446 
	#X509_V_FLAG_CHECK_SS_SIGNATURE
 0x4000

	)

448 
	#X509_V_FLAG_TRUSTED_FIRST
 0x8000

	)

450 
	#X509_V_FLAG_SUITEB_128_LOS_ONLY
 0x10000

	)

452 
	#X509_V_FLAG_SUITEB_192_LOS
 0x20000

	)

454 
	#X509_V_FLAG_SUITEB_128_LOS
 0x30000

	)

456 
	#X509_V_FLAG_PARTIAL_CHAIN
 0x80000

	)

462 
	#X509_V_FLAG_NO_ALT_CHAINS
 0x100000

	)

464 
	#X509_V_FLAG_NO_CHECK_TIME
 0x200000

	)

466 
	#X509_VP_FLAG_DEFAULT
 0x1

	)

467 
	#X509_VP_FLAG_OVERWRITE
 0x2

	)

468 
	#X509_VP_FLAG_RESET_FLAGS
 0x4

	)

469 
	#X509_VP_FLAG_LOCKED
 0x8

	)

470 
	#X509_VP_FLAG_ONCE
 0x10

	)

473 
	#X509_V_FLAG_POLICY_MASK
 (
X509_V_FLAG_POLICY_CHECK
 \

474 | 
X509_V_FLAG_EXPLICIT_POLICY
 \

475 | 
X509_V_FLAG_INHIBIT_ANY
 \

476 | 
X509_V_FLAG_INHIBIT_MAP
)

	)

478 
X509_OBJECT_idx_by_subje˘
(
STACK_OF
(
X509_OBJECT
Ë*
h
, 
X509_LOOKUP_TYPE
 
ty≥
,

479 c⁄° 
X509_NAME
 *
«me
);

480 
X509_OBJECT
 *
X509_OBJECT_ªåõve_by_subje˘
(
STACK_OF
(X509_OBJECTË*
h
,

481 
X509_LOOKUP_TYPE
 
ty≥
,

482 c⁄° 
X509_NAME
 *
«me
);

483 
X509_OBJECT
 *
X509_OBJECT_ªåõve_m©ch
(
STACK_OF
(X509_OBJECTË*
h
,

484 
X509_OBJECT
 *
x
);

485 
X509_OBJECT_up_ªf_cou¡
(
X509_OBJECT
 *
a
);

486 
X509_OBJECT
 *
X509_OBJECT_√w
();

487 
X509_OBJECT_‰ì
(
X509_OBJECT
 *
a
);

488 
X509_LOOKUP_TYPE
 
X509_OBJECT_gë_ty≥
(c⁄° 
X509_OBJECT
 *
a
);

489 
X509
 *
X509_OBJECT_gë0_X509
(c⁄° 
X509_OBJECT
 *
a
);

490 
X509_OBJECT_£t1_X509
(
X509_OBJECT
 *
a
, 
X509
 *
obj
);

491 
X509_CRL
 *
X509_OBJECT_gë0_X509_CRL
(c⁄° 
X509_OBJECT
 *
a
);

492 
X509_OBJECT_£t1_X509_CRL
(
X509_OBJECT
 *
a
, 
X509_CRL
 *
obj
);

493 
X509_STORE
 *
X509_STORE_√w
();

494 
X509_STORE_‰ì
(
X509_STORE
 *
v
);

495 
X509_STORE_lock
(
X509_STORE
 *
˘x
);

496 
X509_STORE_u∆ock
(
X509_STORE
 *
˘x
);

497 
X509_STORE_up_ªf
(
X509_STORE
 *
v
);

498 
STACK_OF
(
X509_OBJECT
Ë*
X509_STORE_gë0_obje˘s
(c⁄° 
X509_STORE
 *
v
);

499 
STACK_OF
(
X509
Ë*
X509_STORE_gë1_Æl_˚πs
(
X509_STORE
 *
°
);

500 
STACK_OF
(
X509
Ë*
X509_STORE_CTX_gë1_˚πs
(
X509_STORE_CTX
 *
°
,

501 c⁄° 
X509_NAME
 *
nm
);

502 
STACK_OF
(
X509_CRL
Ë*
X509_STORE_CTX_gë1_¸ls
(c⁄° 
X509_STORE_CTX
 *
°
,

503 c⁄° 
X509_NAME
 *
nm
);

504 
X509_STORE_£t_Êags
(
X509_STORE
 *
˘x
, 
Êags
);

505 
X509_STORE_£t_puΩo£
(
X509_STORE
 *
˘x
, 
puΩo£
);

506 
X509_STORE_£t_åu°
(
X509_STORE
 *
˘x
, 
åu°
);

507 
X509_STORE_£t1_∑øm
(
X509_STORE
 *
˘x
, c⁄° 
X509_VERIFY_PARAM
 *
pm
);

508 
X509_VERIFY_PARAM
 *
X509_STORE_gë0_∑øm
(c⁄° 
X509_STORE
 *
˘x
);

510 
X509_STORE_£t_vîify
(
X509_STORE
 *
˘x
, 
X509_STORE_CTX_vîify_‚
 
vîify
);

511 
	#X509_STORE_£t_vîify_func
(
˘x
, 
func
) \

512 
	`X509_STORE_£t_vîify
((
˘x
),(
func
))

	)

513 
X509_STORE_CTX_£t_vîify
(
X509_STORE_CTX
 *
˘x
,

514 
X509_STORE_CTX_vîify_‚
 
vîify
);

515 
X509_STORE_CTX_vîify_‚
 
X509_STORE_gë_vîify
(c⁄° 
X509_STORE
 *
˘x
);

516 
X509_STORE_£t_vîify_cb
(
X509_STORE
 *
˘x
,

517 
X509_STORE_CTX_vîify_cb
 
vîify_cb
);

518 
	#X509_STORE_£t_vîify_cb_func
(
˘x
,
func
) \

519 
	`X509_STORE_£t_vîify_cb
((
˘x
),(
func
))

	)

520 
X509_STORE_CTX_vîify_cb
 
X509_STORE_gë_vîify_cb
(c⁄° 
X509_STORE
 *
˘x
);

521 
X509_STORE_£t_gë_issuî
(
X509_STORE
 *
˘x
,

522 
X509_STORE_CTX_gë_issuî_‚
 
gë_issuî
);

523 
X509_STORE_CTX_gë_issuî_‚
 
X509_STORE_gë_gë_issuî
(c⁄° 
X509_STORE
 *
˘x
);

524 
X509_STORE_£t_check_issued
(
X509_STORE
 *
˘x
,

525 
X509_STORE_CTX_check_issued_‚
 
check_issued
);

526 
X509_STORE_CTX_check_issued_‚
 
X509_STORE_gë_check_issued
(c⁄° 
X509_STORE
 *
˘x
);

527 
X509_STORE_£t_check_ªvoˇti⁄
(
X509_STORE
 *
˘x
,

528 
X509_STORE_CTX_check_ªvoˇti⁄_‚
 
check_ªvoˇti⁄
);

529 
X509_STORE_CTX_check_ªvoˇti⁄_‚


530 
X509_STORE_gë_check_ªvoˇti⁄
(c⁄° 
X509_STORE
 *
˘x
);

531 
X509_STORE_£t_gë_¸l
(
X509_STORE
 *
˘x
,

532 
X509_STORE_CTX_gë_¸l_‚
 
gë_¸l
);

533 
X509_STORE_CTX_gë_¸l_‚
 
X509_STORE_gë_gë_¸l
(c⁄° 
X509_STORE
 *
˘x
);

534 
X509_STORE_£t_check_¸l
(
X509_STORE
 *
˘x
,

535 
X509_STORE_CTX_check_¸l_‚
 
check_¸l
);

536 
X509_STORE_CTX_check_¸l_‚
 
X509_STORE_gë_check_¸l
(c⁄° 
X509_STORE
 *
˘x
);

537 
X509_STORE_£t_˚π_¸l
(
X509_STORE
 *
˘x
,

538 
X509_STORE_CTX_˚π_¸l_‚
 
˚π_¸l
);

539 
X509_STORE_CTX_˚π_¸l_‚
 
X509_STORE_gë_˚π_¸l
(c⁄° 
X509_STORE
 *
˘x
);

540 
X509_STORE_£t_check_pﬁicy
(
X509_STORE
 *
˘x
,

541 
X509_STORE_CTX_check_pﬁicy_‚
 
check_pﬁicy
);

542 
X509_STORE_CTX_check_pﬁicy_‚
 
X509_STORE_gë_check_pﬁicy
(c⁄° 
X509_STORE
 *
˘x
);

543 
X509_STORE_£t_lookup_˚πs
(
X509_STORE
 *
˘x
,

544 
X509_STORE_CTX_lookup_˚πs_‚
 
lookup_˚πs
);

545 
X509_STORE_CTX_lookup_˚πs_‚
 
X509_STORE_gë_lookup_˚πs
(c⁄° 
X509_STORE
 *
˘x
);

546 
X509_STORE_£t_lookup_¸ls
(
X509_STORE
 *
˘x
,

547 
X509_STORE_CTX_lookup_¸ls_‚
 
lookup_¸ls
);

548 
	#X509_STORE_£t_lookup_¸ls_cb
(
˘x
, 
func
) \

549 
	`X509_STORE_£t_lookup_¸ls
((
˘x
), (
func
))

	)

550 
X509_STORE_CTX_lookup_¸ls_‚
 
X509_STORE_gë_lookup_¸ls
(c⁄° 
X509_STORE
 *
˘x
);

551 
X509_STORE_£t_˛ónup
(
X509_STORE
 *
˘x
,

552 
X509_STORE_CTX_˛ónup_‚
 
˛ónup
);

553 
X509_STORE_CTX_˛ónup_‚
 
X509_STORE_gë_˛ónup
(c⁄° 
X509_STORE
 *
˘x
);

555 
	#X509_STORE_gë_ex_√w_ödex
(
l
, 
p
, 
√wf
, 
dupf
, 
‰ìf
) \

556 
	`CRYPTO_gë_ex_√w_ödex
(
CRYPTO_EX_INDEX_X509_STORE
, 
l
, 
p
, 
√wf
, 
dupf
, 
‰ìf
)

	)

557 
X509_STORE_£t_ex_d©a
(
X509_STORE
 *
˘x
, 
idx
, *
d©a
);

558 *
X509_STORE_gë_ex_d©a
(c⁄° 
X509_STORE
 *
˘x
, 
idx
);

560 
X509_STORE_CTX
 *
X509_STORE_CTX_√w_ex
(
OSSL_LIB_CTX
 *
lib˘x
, c⁄° *
¥›q
);

561 
X509_STORE_CTX
 *
X509_STORE_CTX_√w
();

563 
X509_STORE_CTX_gë1_issuî
(
X509
 **
issuî
, 
X509_STORE_CTX
 *
˘x
, X509 *
x
);

565 
X509_STORE_CTX_‰ì
(
X509_STORE_CTX
 *
˘x
);

566 
X509_STORE_CTX_öô
(
X509_STORE_CTX
 *
˘x
, 
X509_STORE
 *
åu°_°‹e
,

567 
X509
 *
èrgë
, 
STACK_OF
(X509Ë*
u¡ru°ed
);

568 
X509_STORE_CTX_£t0_åu°ed_°ack
(
X509_STORE_CTX
 *
˘x
, 
STACK_OF
(
X509
Ë*
sk
);

569 
X509_STORE_CTX_˛ónup
(
X509_STORE_CTX
 *
˘x
);

571 
X509_STORE
 *
X509_STORE_CTX_gë0_°‹e
(c⁄° 
X509_STORE_CTX
 *
˘x
);

572 
X509
 *
X509_STORE_CTX_gë0_˚π
(c⁄° 
X509_STORE_CTX
 *
˘x
);

573 
STACK_OF
(
X509
)* 
X509_STORE_CTX_gë0_u¡ru°ed
(c⁄° 
X509_STORE_CTX
 *
˘x
);

574 
X509_STORE_CTX_£t0_u¡ru°ed
(
X509_STORE_CTX
 *
˘x
, 
STACK_OF
(
X509
Ë*
sk
);

575 
X509_STORE_CTX_£t_vîify_cb
(
X509_STORE_CTX
 *
˘x
,

576 
X509_STORE_CTX_vîify_cb
 
vîify
);

577 
X509_STORE_CTX_vîify_cb
 
X509_STORE_CTX_gë_vîify_cb
(c⁄° 
X509_STORE_CTX
 *
˘x
);

578 
X509_STORE_CTX_vîify_‚
 
X509_STORE_CTX_gë_vîify
(c⁄° 
X509_STORE_CTX
 *
˘x
);

579 
X509_STORE_CTX_gë_issuî_‚
 
X509_STORE_CTX_gë_gë_issuî
(c⁄° 
X509_STORE_CTX
 *
˘x
);

580 
X509_STORE_CTX_check_issued_‚
 
X509_STORE_CTX_gë_check_issued
(c⁄° 
X509_STORE_CTX
 *
˘x
);

581 
X509_STORE_CTX_check_ªvoˇti⁄_‚
 
X509_STORE_CTX_gë_check_ªvoˇti⁄
(c⁄° 
X509_STORE_CTX
 *
˘x
);

582 
X509_STORE_CTX_gë_¸l_‚
 
X509_STORE_CTX_gë_gë_¸l
(c⁄° 
X509_STORE_CTX
 *
˘x
);

583 
X509_STORE_CTX_check_¸l_‚
 
X509_STORE_CTX_gë_check_¸l
(c⁄° 
X509_STORE_CTX
 *
˘x
);

584 
X509_STORE_CTX_˚π_¸l_‚
 
X509_STORE_CTX_gë_˚π_¸l
(c⁄° 
X509_STORE_CTX
 *
˘x
);

585 
X509_STORE_CTX_check_pﬁicy_‚
 
X509_STORE_CTX_gë_check_pﬁicy
(c⁄° 
X509_STORE_CTX
 *
˘x
);

586 
X509_STORE_CTX_lookup_˚πs_‚
 
X509_STORE_CTX_gë_lookup_˚πs
(c⁄° 
X509_STORE_CTX
 *
˘x
);

587 
X509_STORE_CTX_lookup_¸ls_‚
 
X509_STORE_CTX_gë_lookup_¸ls
(c⁄° 
X509_STORE_CTX
 *
˘x
);

588 
X509_STORE_CTX_˛ónup_‚
 
X509_STORE_CTX_gë_˛ónup
(c⁄° 
X509_STORE_CTX
 *
˘x
);

590 #i‚de‡
OPENSSL_NO_DEPRECATED_1_1_0


591 
	#X509_STORE_CTX_gë_chaö
 
X509_STORE_CTX_gë0_chaö


	)

592 
	#X509_STORE_CTX_£t_chaö
 
X509_STORE_CTX_£t0_u¡ru°ed


	)

593 
	#X509_STORE_CTX_åu°ed_°ack
 
X509_STORE_CTX_£t0_åu°ed_°ack


	)

594 
	#X509_STORE_gë_by_subje˘
 
X509_STORE_CTX_gë_by_subje˘


	)

595 
	#X509_STORE_gë1_˚πs
 
X509_STORE_CTX_gë1_˚πs


	)

596 
	#X509_STORE_gë1_¸ls
 
X509_STORE_CTX_gë1_¸ls


	)

598 
	#X509_STORE_gë1_˚π
 
X509_STORE_CTX_gë1_˚πs


	)

600 
	#X509_STORE_gë1_¸l
 
X509_STORE_CTX_gë1_¸ls


	)

603 
X509_LOOKUP
 *
X509_STORE_add_lookup
(
X509_STORE
 *
v
, 
X509_LOOKUP_METHOD
 *
m
);

604 
X509_LOOKUP_METHOD
 *
X509_LOOKUP_hash_dú
();

605 
X509_LOOKUP_METHOD
 *
X509_LOOKUP_fûe
();

606 
X509_LOOKUP_METHOD
 *
X509_LOOKUP_°‹e
();

608 (*
X509_LOOKUP_˘æ_‚
)(
	tX509_LOOKUP
 *
	t˘x
, 
	tcmd
, c⁄° *
	t¨gc
,

609 
	t¨gl
, **
	tªt
);

610 (*
X509_LOOKUP_˘æ_ex_‚
)(

611 
	tX509_LOOKUP
 *
	t˘x
, 
	tcmd
, c⁄° *
	t¨gc
, 
	t¨gl
, **
	tªt
,

612 
	tOSSL_LIB_CTX
 *
	tlib˘x
, c⁄° *
	t¥›q
);

614 (*
X509_LOOKUP_gë_by_subje˘_‚
)(
	tX509_LOOKUP
 *
	t˘x
,

615 
	tX509_LOOKUP_TYPE
 
	tty≥
,

616 c⁄° 
	tX509_NAME
 *
	t«me
,

617 
	tX509_OBJECT
 *
	tªt
);

618 (*
X509_LOOKUP_gë_by_subje˘_ex_‚
)(
	tX509_LOOKUP
 *
	t˘x
,

619 
	tX509_LOOKUP_TYPE
 
	tty≥
,

620 c⁄° 
	tX509_NAME
 *
	t«me
,

621 
	tX509_OBJECT
 *
	tªt
,

622 
	tOSSL_LIB_CTX
 *
	tlib˘x
,

623 c⁄° *
	t¥›q
);

624 (*
X509_LOOKUP_gë_by_issuî_£rül_‚
)(
	tX509_LOOKUP
 *
	t˘x
,

625 
	tX509_LOOKUP_TYPE
 
	tty≥
,

626 c⁄° 
	tX509_NAME
 *
	t«me
,

627 c⁄° 
	tASN1_INTEGER
 *
	t£rül
,

628 
	tX509_OBJECT
 *
	tªt
);

629 (*
X509_LOOKUP_gë_by_fögî¥öt_‚
)(
	tX509_LOOKUP
 *
	t˘x
,

630 
	tX509_LOOKUP_TYPE
 
	tty≥
,

631 c⁄° * 
	tbyãs
,

632 
	tÀn
,

633 
	tX509_OBJECT
 *
	tªt
);

634 (*
X509_LOOKUP_gë_by_Æüs_‚
)(
	tX509_LOOKUP
 *
	t˘x
,

635 
	tX509_LOOKUP_TYPE
 
	tty≥
,

636 c⁄° *
	t°r
,

637 
	tÀn
,

638 
	tX509_OBJECT
 *
	tªt
);

640 
X509_LOOKUP_METHOD
 *
X509_LOOKUP_mëh_√w
(c⁄° *
«me
);

641 
X509_LOOKUP_mëh_‰ì
(
X509_LOOKUP_METHOD
 *
mëhod
);

643 
X509_LOOKUP_mëh_£t_√w_ôem
(
X509_LOOKUP_METHOD
 *
mëhod
,

644 (*
√w_ôem
Ë(
X509_LOOKUP
 *
˘x
));

645 (*
X509_LOOKUP_mëh_gë_√w_ôem
(c⁄° 
X509_LOOKUP_METHOD
* 
mëhod
))

646 (
X509_LOOKUP
 *
˘x
);

648 
X509_LOOKUP_mëh_£t_‰ì
(
X509_LOOKUP_METHOD
 *
mëhod
,

649 (*
‰ì_‚
Ë(
X509_LOOKUP
 *
˘x
));

650 (*
X509_LOOKUP_mëh_gë_‰ì
(c⁄° 
X509_LOOKUP_METHOD
* 
mëhod
))

651 (
X509_LOOKUP
 *
˘x
);

653 
X509_LOOKUP_mëh_£t_öô
(
X509_LOOKUP_METHOD
 *
mëhod
,

654 (*
öô
Ë(
X509_LOOKUP
 *
˘x
));

655 (*
X509_LOOKUP_mëh_gë_öô
(c⁄° 
X509_LOOKUP_METHOD
* 
mëhod
))

656 (
X509_LOOKUP
 *
˘x
);

658 
X509_LOOKUP_mëh_£t_shutdown
(
X509_LOOKUP_METHOD
 *
mëhod
,

659 (*
shutdown
Ë(
X509_LOOKUP
 *
˘x
));

660 (*
X509_LOOKUP_mëh_gë_shutdown
(c⁄° 
X509_LOOKUP_METHOD
* 
mëhod
))

661 (
X509_LOOKUP
 *
˘x
);

663 
X509_LOOKUP_mëh_£t_˘æ
(
X509_LOOKUP_METHOD
 *
mëhod
,

664 
X509_LOOKUP_˘æ_‚
 
˘æ_‚
);

665 
X509_LOOKUP_˘æ_‚
 
X509_LOOKUP_mëh_gë_˘æ
(c⁄° 
X509_LOOKUP_METHOD
 *
mëhod
);

667 
X509_LOOKUP_mëh_£t_gë_by_subje˘
(
X509_LOOKUP_METHOD
 *
mëhod
,

668 
X509_LOOKUP_gë_by_subje˘_‚
 
‚
);

669 
X509_LOOKUP_gë_by_subje˘_‚
 
X509_LOOKUP_mëh_gë_gë_by_subje˘
(

670 c⁄° 
X509_LOOKUP_METHOD
 *
mëhod
);

672 
X509_LOOKUP_mëh_£t_gë_by_issuî_£rül
(
X509_LOOKUP_METHOD
 *
mëhod
,

673 
X509_LOOKUP_gë_by_issuî_£rül_‚
 
‚
);

674 
X509_LOOKUP_gë_by_issuî_£rül_‚
 
X509_LOOKUP_mëh_gë_gë_by_issuî_£rül
(

675 c⁄° 
X509_LOOKUP_METHOD
 *
mëhod
);

677 
X509_LOOKUP_mëh_£t_gë_by_fögî¥öt
(
X509_LOOKUP_METHOD
 *
mëhod
,

678 
X509_LOOKUP_gë_by_fögî¥öt_‚
 
‚
);

679 
X509_LOOKUP_gë_by_fögî¥öt_‚
 
X509_LOOKUP_mëh_gë_gë_by_fögî¥öt
(

680 c⁄° 
X509_LOOKUP_METHOD
 *
mëhod
);

682 
X509_LOOKUP_mëh_£t_gë_by_Æüs
(
X509_LOOKUP_METHOD
 *
mëhod
,

683 
X509_LOOKUP_gë_by_Æüs_‚
 
‚
);

684 
X509_LOOKUP_gë_by_Æüs_‚
 
X509_LOOKUP_mëh_gë_gë_by_Æüs
(

685 c⁄° 
X509_LOOKUP_METHOD
 *
mëhod
);

688 
X509_STORE_add_˚π
(
X509_STORE
 *
˘x
, 
X509
 *
x
);

689 
X509_STORE_add_¸l
(
X509_STORE
 *
˘x
, 
X509_CRL
 *
x
);

691 
X509_STORE_CTX_gë_by_subje˘
(c⁄° 
X509_STORE_CTX
 *
vs
,

692 
X509_LOOKUP_TYPE
 
ty≥
,

693 c⁄° 
X509_NAME
 *
«me
, 
X509_OBJECT
 *
ªt
);

694 
X509_OBJECT
 *
X509_STORE_CTX_gë_obj_by_subje˘
(
X509_STORE_CTX
 *
vs
,

695 
X509_LOOKUP_TYPE
 
ty≥
,

696 c⁄° 
X509_NAME
 *
«me
);

698 
X509_LOOKUP_˘æ
(
X509_LOOKUP
 *
˘x
, 
cmd
, c⁄° *
¨gc
,

699 
¨gl
, **
ªt
);

700 
X509_LOOKUP_˘æ_ex
(
X509_LOOKUP
 *
˘x
, 
cmd
, c⁄° *
¨gc
, 
¨gl
,

701 **
ªt
, 
OSSL_LIB_CTX
 *
lib˘x
, c⁄° *
¥›q
);

703 
X509_lﬂd_˚π_fûe
(
X509_LOOKUP
 *
˘x
, c⁄° *
fûe
, 
ty≥
);

704 
X509_lﬂd_˚π_fûe_ex
(
X509_LOOKUP
 *
˘x
, c⁄° *
fûe
, 
ty≥
,

705 
OSSL_LIB_CTX
 *
lib˘x
, c⁄° *
¥›q
);

706 
X509_lﬂd_¸l_fûe
(
X509_LOOKUP
 *
˘x
, c⁄° *
fûe
, 
ty≥
);

707 
X509_lﬂd_˚π_¸l_fûe
(
X509_LOOKUP
 *
˘x
, c⁄° *
fûe
, 
ty≥
);

708 
X509_lﬂd_˚π_¸l_fûe_ex
(
X509_LOOKUP
 *
˘x
, c⁄° *
fûe
, 
ty≥
,

709 
OSSL_LIB_CTX
 *
lib˘x
, c⁄° *
¥›q
);

711 
X509_LOOKUP
 *
X509_LOOKUP_√w
(
X509_LOOKUP_METHOD
 *
mëhod
);

712 
X509_LOOKUP_‰ì
(
X509_LOOKUP
 *
˘x
);

713 
X509_LOOKUP_öô
(
X509_LOOKUP
 *
˘x
);

714 
X509_LOOKUP_by_subje˘
(
X509_LOOKUP
 *
˘x
, 
X509_LOOKUP_TYPE
 
ty≥
,

715 c⁄° 
X509_NAME
 *
«me
, 
X509_OBJECT
 *
ªt
);

716 
X509_LOOKUP_by_subje˘_ex
(
X509_LOOKUP
 *
˘x
, 
X509_LOOKUP_TYPE
 
ty≥
,

717 c⁄° 
X509_NAME
 *
«me
, 
X509_OBJECT
 *
ªt
,

718 
OSSL_LIB_CTX
 *
lib˘x
, c⁄° *
¥›q
);

719 
X509_LOOKUP_by_issuî_£rül
(
X509_LOOKUP
 *
˘x
, 
X509_LOOKUP_TYPE
 
ty≥
,

720 c⁄° 
X509_NAME
 *
«me
,

721 c⁄° 
ASN1_INTEGER
 *
£rül
,

722 
X509_OBJECT
 *
ªt
);

723 
X509_LOOKUP_by_fögî¥öt
(
X509_LOOKUP
 *
˘x
, 
X509_LOOKUP_TYPE
 
ty≥
,

724 c⁄° *
byãs
, 
Àn
,

725 
X509_OBJECT
 *
ªt
);

726 
X509_LOOKUP_by_Æüs
(
X509_LOOKUP
 *
˘x
, 
X509_LOOKUP_TYPE
 
ty≥
,

727 c⁄° *
°r
, 
Àn
, 
X509_OBJECT
 *
ªt
);

728 
X509_LOOKUP_£t_mëhod_d©a
(
X509_LOOKUP
 *
˘x
, *
d©a
);

729 *
X509_LOOKUP_gë_mëhod_d©a
(c⁄° 
X509_LOOKUP
 *
˘x
);

730 
X509_STORE
 *
X509_LOOKUP_gë_°‹e
(c⁄° 
X509_LOOKUP
 *
˘x
);

731 
X509_LOOKUP_shutdown
(
X509_LOOKUP
 *
˘x
);

733 
X509_STORE_lﬂd_fûe
(
X509_STORE
 *
˘x
, c⁄° *
fûe
);

734 
X509_STORE_lﬂd_∑th
(
X509_STORE
 *
˘x
, c⁄° *
∑th
);

735 
X509_STORE_lﬂd_°‹e
(
X509_STORE
 *
˘x
, c⁄° *
°‹e
);

736 
X509_STORE_lﬂd_loˇti⁄s
(
X509_STORE
 *
˘x
,

737 c⁄° *
fûe
,

738 c⁄° *
dú
);

739 
X509_STORE_£t_deÁu…_∑ths
(
X509_STORE
 *
˘x
);

741 
X509_STORE_lﬂd_fûe_ex
(
X509_STORE
 *
˘x
, c⁄° *
fûe
,

742 
OSSL_LIB_CTX
 *
lib˘x
, c⁄° *
¥›q
);

743 
X509_STORE_lﬂd_°‹e_ex
(
X509_STORE
 *
˘x
, c⁄° *
°‹e
,

744 
OSSL_LIB_CTX
 *
lib˘x
, c⁄° *
¥›q
);

745 
X509_STORE_lﬂd_loˇti⁄s_ex
(
X509_STORE
 *
˘x
, c⁄° *
fûe
,

746 c⁄° *
dú
, 
OSSL_LIB_CTX
 *
lib˘x
,

747 c⁄° *
¥›q
);

748 
X509_STORE_£t_deÁu…_∑ths_ex
(
X509_STORE
 *
˘x
, 
OSSL_LIB_CTX
 *
lib˘x
,

749 c⁄° *
¥›q
);

751 
	#X509_STORE_CTX_gë_ex_√w_ödex
(
l
, 
p
, 
√wf
, 
dupf
, 
‰ìf
) \

752 
	`CRYPTO_gë_ex_√w_ödex
(
CRYPTO_EX_INDEX_X509_STORE_CTX
, 
l
, 
p
, 
√wf
, 
dupf
, 
‰ìf
)

	)

753 
X509_STORE_CTX_£t_ex_d©a
(
X509_STORE_CTX
 *
˘x
, 
idx
, *
d©a
);

754 *
X509_STORE_CTX_gë_ex_d©a
(c⁄° 
X509_STORE_CTX
 *
˘x
, 
idx
);

755 
X509_STORE_CTX_gë_îr‹
(c⁄° 
X509_STORE_CTX
 *
˘x
);

756 
X509_STORE_CTX_£t_îr‹
(
X509_STORE_CTX
 *
˘x
, 
s
);

757 
X509_STORE_CTX_gë_îr‹_dïth
(c⁄° 
X509_STORE_CTX
 *
˘x
);

758 
X509_STORE_CTX_£t_îr‹_dïth
(
X509_STORE_CTX
 *
˘x
, 
dïth
);

759 
X509
 *
X509_STORE_CTX_gë_cuºít_˚π
(c⁄° 
X509_STORE_CTX
 *
˘x
);

760 
X509_STORE_CTX_£t_cuºít_˚π
(
X509_STORE_CTX
 *
˘x
, 
X509
 *
x
);

761 
X509
 *
X509_STORE_CTX_gë0_cuºít_issuî
(c⁄° 
X509_STORE_CTX
 *
˘x
);

762 
X509_CRL
 *
X509_STORE_CTX_gë0_cuºít_¸l
(c⁄° 
X509_STORE_CTX
 *
˘x
);

763 
X509_STORE_CTX
 *
X509_STORE_CTX_gë0_∑ª¡_˘x
(c⁄° X509_STORE_CTX *
˘x
);

764 
STACK_OF
(
X509
Ë*
X509_STORE_CTX_gë0_chaö
(c⁄° 
X509_STORE_CTX
 *
˘x
);

765 
STACK_OF
(
X509
Ë*
X509_STORE_CTX_gë1_chaö
(c⁄° 
X509_STORE_CTX
 *
˘x
);

766 
X509_STORE_CTX_£t_˚π
(
X509_STORE_CTX
 *
˘x
, 
X509
 *
èrgë
);

767 
X509_STORE_CTX_£t0_vîifõd_chaö
(
X509_STORE_CTX
 *
c
, 
STACK_OF
(
X509
Ë*
sk
);

768 
X509_STORE_CTX_£t0_¸ls
(
X509_STORE_CTX
 *
˘x
, 
STACK_OF
(
X509_CRL
Ë*
sk
);

769 
X509_STORE_CTX_£t_puΩo£
(
X509_STORE_CTX
 *
˘x
, 
puΩo£
);

770 
X509_STORE_CTX_£t_åu°
(
X509_STORE_CTX
 *
˘x
, 
åu°
);

771 
X509_STORE_CTX_puΩo£_öhîô
(
X509_STORE_CTX
 *
˘x
, 
def_puΩo£
,

772 
puΩo£
, 
åu°
);

773 
X509_STORE_CTX_£t_Êags
(
X509_STORE_CTX
 *
˘x
, 
Êags
);

774 
X509_STORE_CTX_£t_time
(
X509_STORE_CTX
 *
˘x
, 
Êags
,

775 
time_t
 
t
);

777 
X509_POLICY_TREE
 *
X509_STORE_CTX_gë0_pﬁicy_åì
(c⁄° 
X509_STORE_CTX
 *
˘x
);

778 
X509_STORE_CTX_gë_ex∂icô_pﬁicy
(c⁄° 
X509_STORE_CTX
 *
˘x
);

779 
X509_STORE_CTX_gë_num_u¡ru°ed
(c⁄° 
X509_STORE_CTX
 *
˘x
);

781 
X509_VERIFY_PARAM
 *
X509_STORE_CTX_gë0_∑øm
(c⁄° 
X509_STORE_CTX
 *
˘x
);

782 
X509_STORE_CTX_£t0_∑øm
(
X509_STORE_CTX
 *
˘x
, 
X509_VERIFY_PARAM
 *
∑øm
);

783 
X509_STORE_CTX_£t_deÁu…
(
X509_STORE_CTX
 *
˘x
, c⁄° *
«me
);

789 
X509_STORE_CTX_£t0_d™e
(
X509_STORE_CTX
 *
˘x
, 
SSL_DANE
 *
d™e
);

790 
	#DANE_FLAG_NO_DANE_EE_NAMECHECKS
 (1L << 0)

	)

794 
X509_VERIFY_PARAM
 *
X509_VERIFY_PARAM_√w
();

795 
X509_VERIFY_PARAM_‰ì
(
X509_VERIFY_PARAM
 *
∑øm
);

796 
X509_VERIFY_PARAM_öhîô
(
X509_VERIFY_PARAM
 *
to
,

797 c⁄° 
X509_VERIFY_PARAM
 *
‰om
);

798 
X509_VERIFY_PARAM_£t1
(
X509_VERIFY_PARAM
 *
to
,

799 c⁄° 
X509_VERIFY_PARAM
 *
‰om
);

800 
X509_VERIFY_PARAM_£t1_«me
(
X509_VERIFY_PARAM
 *
∑øm
, c⁄° *
«me
);

801 
X509_VERIFY_PARAM_£t_Êags
(
X509_VERIFY_PARAM
 *
∑øm
,

802 
Êags
);

803 
X509_VERIFY_PARAM_˛ór_Êags
(
X509_VERIFY_PARAM
 *
∑øm
,

804 
Êags
);

805 
X509_VERIFY_PARAM_gë_Êags
(c⁄° 
X509_VERIFY_PARAM
 *
∑øm
);

806 
X509_VERIFY_PARAM_£t_puΩo£
(
X509_VERIFY_PARAM
 *
∑øm
, 
puΩo£
);

807 
X509_VERIFY_PARAM_£t_åu°
(
X509_VERIFY_PARAM
 *
∑øm
, 
åu°
);

808 
X509_VERIFY_PARAM_£t_dïth
(
X509_VERIFY_PARAM
 *
∑øm
, 
dïth
);

809 
X509_VERIFY_PARAM_£t_auth_Àvñ
(
X509_VERIFY_PARAM
 *
∑øm
, 
auth_Àvñ
);

810 
time_t
 
X509_VERIFY_PARAM_gë_time
(c⁄° 
X509_VERIFY_PARAM
 *
∑øm
);

811 
X509_VERIFY_PARAM_£t_time
(
X509_VERIFY_PARAM
 *
∑øm
, 
time_t
 
t
);

812 
X509_VERIFY_PARAM_add0_pﬁicy
(
X509_VERIFY_PARAM
 *
∑øm
,

813 
ASN1_OBJECT
 *
pﬁicy
);

814 
X509_VERIFY_PARAM_£t1_pﬁicõs
(
X509_VERIFY_PARAM
 *
∑øm
,

815 
STACK_OF
(
ASN1_OBJECT
Ë*
pﬁicõs
);

817 
X509_VERIFY_PARAM_£t_öh_Êags
(
X509_VERIFY_PARAM
 *
∑øm
,

818 
uöt32_t
 
Êags
);

819 
uöt32_t
 
X509_VERIFY_PARAM_gë_öh_Êags
(c⁄° 
X509_VERIFY_PARAM
 *
∑øm
);

821 *
X509_VERIFY_PARAM_gë0_ho°
(
X509_VERIFY_PARAM
 *
∑øm
, 
idx
);

822 
X509_VERIFY_PARAM_£t1_ho°
(
X509_VERIFY_PARAM
 *
∑øm
,

823 c⁄° *
«me
, 
size_t
 
«mñí
);

824 
X509_VERIFY_PARAM_add1_ho°
(
X509_VERIFY_PARAM
 *
∑øm
,

825 c⁄° *
«me
, 
size_t
 
«mñí
);

826 
X509_VERIFY_PARAM_£t_ho°Êags
(
X509_VERIFY_PARAM
 *
∑øm
,

827 
Êags
);

828 
X509_VERIFY_PARAM_gë_ho°Êags
(c⁄° 
X509_VERIFY_PARAM
 *
∑øm
);

829 *
X509_VERIFY_PARAM_gë0_≥î«me
(c⁄° 
X509_VERIFY_PARAM
 *
∑øm
);

830 
X509_VERIFY_PARAM_move_≥î«me
(
X509_VERIFY_PARAM
 *, X509_VERIFY_PARAM *);

831 *
X509_VERIFY_PARAM_gë0_emaû
(
X509_VERIFY_PARAM
 *
∑øm
);

832 
X509_VERIFY_PARAM_£t1_emaû
(
X509_VERIFY_PARAM
 *
∑øm
,

833 c⁄° *
emaû
, 
size_t
 
emaûÀn
);

834 *
X509_VERIFY_PARAM_gë1_ù_asc
(
X509_VERIFY_PARAM
 *
∑øm
);

835 
X509_VERIFY_PARAM_£t1_ù
(
X509_VERIFY_PARAM
 *
∑øm
,

836 c⁄° *
ù
, 
size_t
 
ùÀn
);

837 
X509_VERIFY_PARAM_£t1_ù_asc
(
X509_VERIFY_PARAM
 *
∑øm
,

838 c⁄° *
ùasc
);

840 
X509_VERIFY_PARAM_gë_dïth
(c⁄° 
X509_VERIFY_PARAM
 *
∑øm
);

841 
X509_VERIFY_PARAM_gë_auth_Àvñ
(c⁄° 
X509_VERIFY_PARAM
 *
∑øm
);

842 c⁄° *
X509_VERIFY_PARAM_gë0_«me
(c⁄° 
X509_VERIFY_PARAM
 *
∑øm
);

844 
X509_VERIFY_PARAM_add0_èbÀ
(
X509_VERIFY_PARAM
 *
∑øm
);

845 
X509_VERIFY_PARAM_gë_cou¡
();

846 c⁄° 
X509_VERIFY_PARAM
 *
X509_VERIFY_PARAM_gë0
(
id
);

847 c⁄° 
X509_VERIFY_PARAM
 *
X509_VERIFY_PARAM_lookup
(c⁄° *
«me
);

848 
X509_VERIFY_PARAM_èbÀ_˛ónup
();

851 
	#X509_PCY_TREE_FAILURE
 -2

	)

852 
	#X509_PCY_TREE_INVALID
 -1

	)

853 
	#X509_PCY_TREE_INTERNAL
 0

	)

859 
	#X509_PCY_TREE_VALID
 1

	)

860 
	#X509_PCY_TREE_EMPTY
 2

	)

861 
	#X509_PCY_TREE_EXPLICIT
 4

	)

863 
X509_pﬁicy_check
(
X509_POLICY_TREE
 **
±ªe
, *
≥x∂icô_pﬁicy
,

864 
STACK_OF
(
X509
Ë*
˚πs
,

865 
STACK_OF
(
ASN1_OBJECT
Ë*
pﬁicy_oids
, 
Êags
);

867 
X509_pﬁicy_åì_‰ì
(
X509_POLICY_TREE
 *
åì
);

869 
X509_pﬁicy_åì_Àvñ_cou¡
(c⁄° 
X509_POLICY_TREE
 *
åì
);

870 
X509_POLICY_LEVEL
 *
X509_pﬁicy_åì_gë0_Àvñ
(c⁄° 
X509_POLICY_TREE
 *
åì
,

871 
i
);

873 
STACK_OF
(
X509_POLICY_NODE
)

874 *
X509_pﬁicy_åì_gë0_pﬁicõs
(c⁄° 
X509_POLICY_TREE
 *
åì
);

876 
STACK_OF
(
X509_POLICY_NODE
)

877 *
X509_pﬁicy_åì_gë0_u£r_pﬁicõs
(c⁄° 
X509_POLICY_TREE
 *
åì
);

879 
X509_pﬁicy_Àvñ_node_cou¡
(
X509_POLICY_LEVEL
 *
Àvñ
);

881 
X509_POLICY_NODE
 *
X509_pﬁicy_Àvñ_gë0_node
(c⁄° 
X509_POLICY_LEVEL
 *
Àvñ
,

882 
i
);

884 c⁄° 
ASN1_OBJECT
 *
X509_pﬁicy_node_gë0_pﬁicy
(c⁄° 
X509_POLICY_NODE
 *
node
);

886 
STACK_OF
(
POLICYQUALINFO
)

887 *
X509_pﬁicy_node_gë0_quÆifõrs
(c⁄° 
X509_POLICY_NODE
 *
node
);

888 c⁄° 
X509_POLICY_NODE


889 *
X509_pﬁicy_node_gë0_∑ª¡
(c⁄° 
X509_POLICY_NODE
 *
node
);

891 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/x509err.h

11 #i‚de‡
OPENSSL_X509ERR_H


12 
	#OPENSSL_X509ERR_H


	)

13 #¥agm®
⁄˚


15 
	~<›ís¶/›ís¶c⁄f.h
>

16 
	~<›ís¶/symhacks.h
>

17 
	~<›ís¶/¸y±€º_Àgacy.h
>

24 
	#X509_R_AKID_MISMATCH
 110

	)

25 
	#X509_R_BAD_SELECTOR
 133

	)

26 
	#X509_R_BAD_X509_FILETYPE
 100

	)

27 
	#X509_R_BASE64_DECODE_ERROR
 118

	)

28 
	#X509_R_CANT_CHECK_DH_KEY
 114

	)

29 
	#X509_R_CERTIFICATE_VERIFICATION_FAILED
 139

	)

30 
	#X509_R_CERT_ALREADY_IN_HASH_TABLE
 101

	)

31 
	#X509_R_CRL_ALREADY_DELTA
 127

	)

32 
	#X509_R_CRL_VERIFY_FAILURE
 131

	)

33 
	#X509_R_ERROR_GETTING_MD_BY_NID
 141

	)

34 
	#X509_R_ERROR_USING_SIGINF_SET
 142

	)

35 
	#X509_R_IDP_MISMATCH
 128

	)

36 
	#X509_R_INVALID_ATTRIBUTES
 138

	)

37 
	#X509_R_INVALID_DIRECTORY
 113

	)

38 
	#X509_R_INVALID_DISTPOINT
 143

	)

39 
	#X509_R_INVALID_FIELD_NAME
 119

	)

40 
	#X509_R_INVALID_TRUST
 123

	)

41 
	#X509_R_ISSUER_MISMATCH
 129

	)

42 
	#X509_R_KEY_TYPE_MISMATCH
 115

	)

43 
	#X509_R_KEY_VALUES_MISMATCH
 116

	)

44 
	#X509_R_LOADING_CERT_DIR
 103

	)

45 
	#X509_R_LOADING_DEFAULTS
 104

	)

46 
	#X509_R_METHOD_NOT_SUPPORTED
 124

	)

47 
	#X509_R_NAME_TOO_LONG
 134

	)

48 
	#X509_R_NEWER_CRL_NOT_NEWER
 132

	)

49 
	#X509_R_NO_CERTIFICATE_FOUND
 135

	)

50 
	#X509_R_NO_CERTIFICATE_OR_CRL_FOUND
 136

	)

51 
	#X509_R_NO_CERT_SET_FOR_US_TO_VERIFY
 105

	)

52 
	#X509_R_NO_CRL_FOUND
 137

	)

53 
	#X509_R_NO_CRL_NUMBER
 130

	)

54 
	#X509_R_PUBLIC_KEY_DECODE_ERROR
 125

	)

55 
	#X509_R_PUBLIC_KEY_ENCODE_ERROR
 126

	)

56 
	#X509_R_SHOULD_RETRY
 106

	)

57 
	#X509_R_UNABLE_TO_FIND_PARAMETERS_IN_CHAIN
 107

	)

58 
	#X509_R_UNABLE_TO_GET_CERTS_PUBLIC_KEY
 108

	)

59 
	#X509_R_UNKNOWN_KEY_TYPE
 117

	)

60 
	#X509_R_UNKNOWN_NID
 109

	)

61 
	#X509_R_UNKNOWN_PURPOSE_ID
 121

	)

62 
	#X509_R_UNKNOWN_SIGID_ALGS
 144

	)

63 
	#X509_R_UNKNOWN_TRUST_ID
 120

	)

64 
	#X509_R_UNSUPPORTED_ALGORITHM
 111

	)

65 
	#X509_R_WRONG_LOOKUP_TYPE
 112

	)

66 
	#X509_R_WRONG_TYPE
 122

	)

	@/usr/include/openssl/x509v3err.h

11 #i‚de‡
OPENSSL_X509V3ERR_H


12 
	#OPENSSL_X509V3ERR_H


	)

13 #¥agm®
⁄˚


15 
	~<›ís¶/›ís¶c⁄f.h
>

16 
	~<›ís¶/symhacks.h
>

17 
	~<›ís¶/¸y±€º_Àgacy.h
>

24 
	#X509V3_R_BAD_IP_ADDRESS
 118

	)

25 
	#X509V3_R_BAD_OBJECT
 119

	)

26 
	#X509V3_R_BN_DEC2BN_ERROR
 100

	)

27 
	#X509V3_R_BN_TO_ASN1_INTEGER_ERROR
 101

	)

28 
	#X509V3_R_DIRNAME_ERROR
 149

	)

29 
	#X509V3_R_DISTPOINT_ALREADY_SET
 160

	)

30 
	#X509V3_R_DUPLICATE_ZONE_ID
 133

	)

31 
	#X509V3_R_EMPTY_KEY_USAGE
 169

	)

32 
	#X509V3_R_ERROR_CONVERTING_ZONE
 131

	)

33 
	#X509V3_R_ERROR_CREATING_EXTENSION
 144

	)

34 
	#X509V3_R_ERROR_IN_EXTENSION
 128

	)

35 
	#X509V3_R_EXPECTED_A_SECTION_NAME
 137

	)

36 
	#X509V3_R_EXTENSION_EXISTS
 145

	)

37 
	#X509V3_R_EXTENSION_NAME_ERROR
 115

	)

38 
	#X509V3_R_EXTENSION_NOT_FOUND
 102

	)

39 
	#X509V3_R_EXTENSION_SETTING_NOT_SUPPORTED
 103

	)

40 
	#X509V3_R_EXTENSION_VALUE_ERROR
 116

	)

41 
	#X509V3_R_ILLEGAL_EMPTY_EXTENSION
 151

	)

42 
	#X509V3_R_INCORRECT_POLICY_SYNTAX_TAG
 152

	)

43 
	#X509V3_R_INVALID_ASNUMBER
 162

	)

44 
	#X509V3_R_INVALID_ASRANGE
 163

	)

45 
	#X509V3_R_INVALID_BOOLEAN_STRING
 104

	)

46 
	#X509V3_R_INVALID_CERTIFICATE
 158

	)

47 
	#X509V3_R_INVALID_EMPTY_NAME
 108

	)

48 
	#X509V3_R_INVALID_EXTENSION_STRING
 105

	)

49 
	#X509V3_R_INVALID_INHERITANCE
 165

	)

50 
	#X509V3_R_INVALID_IPADDRESS
 166

	)

51 
	#X509V3_R_INVALID_MULTIPLE_RDNS
 161

	)

52 
	#X509V3_R_INVALID_NAME
 106

	)

53 
	#X509V3_R_INVALID_NULL_ARGUMENT
 107

	)

54 
	#X509V3_R_INVALID_NULL_VALUE
 109

	)

55 
	#X509V3_R_INVALID_NUMBER
 140

	)

56 
	#X509V3_R_INVALID_NUMBERS
 141

	)

57 
	#X509V3_R_INVALID_OBJECT_IDENTIFIER
 110

	)

58 
	#X509V3_R_INVALID_OPTION
 138

	)

59 
	#X509V3_R_INVALID_POLICY_IDENTIFIER
 134

	)

60 
	#X509V3_R_INVALID_PROXY_POLICY_SETTING
 153

	)

61 
	#X509V3_R_INVALID_PURPOSE
 146

	)

62 
	#X509V3_R_INVALID_SAFI
 164

	)

63 
	#X509V3_R_INVALID_SECTION
 135

	)

64 
	#X509V3_R_INVALID_SYNTAX
 143

	)

65 
	#X509V3_R_ISSUER_DECODE_ERROR
 126

	)

66 
	#X509V3_R_MISSING_VALUE
 124

	)

67 
	#X509V3_R_NEED_ORGANIZATION_AND_NUMBERS
 142

	)

68 
	#X509V3_R_NEGATIVE_PATHLEN
 168

	)

69 
	#X509V3_R_NO_CONFIG_DATABASE
 136

	)

70 
	#X509V3_R_NO_ISSUER_CERTIFICATE
 121

	)

71 
	#X509V3_R_NO_ISSUER_DETAILS
 127

	)

72 
	#X509V3_R_NO_POLICY_IDENTIFIER
 139

	)

73 
	#X509V3_R_NO_PROXY_CERT_POLICY_LANGUAGE_DEFINED
 154

	)

74 
	#X509V3_R_NO_PUBLIC_KEY
 114

	)

75 
	#X509V3_R_NO_SUBJECT_DETAILS
 125

	)

76 
	#X509V3_R_OPERATION_NOT_DEFINED
 148

	)

77 
	#X509V3_R_OTHERNAME_ERROR
 147

	)

78 
	#X509V3_R_POLICY_LANGUAGE_ALREADY_DEFINED
 155

	)

79 
	#X509V3_R_POLICY_PATH_LENGTH
 156

	)

80 
	#X509V3_R_POLICY_PATH_LENGTH_ALREADY_DEFINED
 157

	)

81 
	#X509V3_R_POLICY_WHEN_PROXY_LANGUAGE_REQUIRES_NO_POLICY
 159

	)

82 
	#X509V3_R_SECTION_NOT_FOUND
 150

	)

83 
	#X509V3_R_UNABLE_TO_GET_ISSUER_DETAILS
 122

	)

84 
	#X509V3_R_UNABLE_TO_GET_ISSUER_KEYID
 123

	)

85 
	#X509V3_R_UNKNOWN_BIT_STRING_ARGUMENT
 111

	)

86 
	#X509V3_R_UNKNOWN_EXTENSION
 129

	)

87 
	#X509V3_R_UNKNOWN_EXTENSION_NAME
 130

	)

88 
	#X509V3_R_UNKNOWN_OPTION
 120

	)

89 
	#X509V3_R_UNSUPPORTED_OPTION
 117

	)

90 
	#X509V3_R_UNSUPPORTED_TYPE
 167

	)

91 
	#X509V3_R_USER_TOO_LONG
 132

	)

	@/usr/include/uv/aix.h

22 #i‚de‡
UV_AIX_H


23 
	#UV_AIX_H


	)

25 
	#UV_PLATFORM_LOOP_FIELDS
 \

26 
fs_fd
; \

27 

	)

28 
	#UV_PLATFORM_FS_EVENT_FIELDS
 \

29 
uv__io_t
 
evít_w©chî
; \

30 *
dú_fûíame
; \

31 

	)

	@/usr/include/uv/bsd.h

22 #i‚de‡
UV_BSD_H


23 
	#UV_BSD_H


	)

25 
	#UV_PLATFORM_FS_EVENT_FIELDS
 \

26 
uv__io_t
 
evít_w©chî
; \

27 

	)

28 
	#UV_IO_PRIVATE_PLATFORM_FIELDS
 \

29 
rcou¡
; \

30 
wcou¡
; \

31 

	)

32 
	#UV_HAVE_KQUEUE
 1

	)

	@/usr/include/uv/darwin.h

22 #i‚de‡
UV_DARWIN_H


23 
	#UV_DARWIN_H


	)

25 #i‡
deföed
(
__APPLE__
Ë&& deföed(
__MACH__
)

26 
	~<mach/mach.h
>

27 
	~<mach/èsk.h
>

28 
	~<mach/£m≠h‹e.h
>

29 
	~<T¨gëC⁄dôi⁄Æs.h
>

30 
	#UV_PLATFORM_SEM_T
 
£m≠h‹e_t


	)

33 
	#UV_IO_PRIVATE_PLATFORM_FIELDS
 \

34 
rcou¡
; \

35 
wcou¡
; \

36 

	)

37 
	#UV_PLATFORM_LOOP_FIELDS
 \

38 
uv_thªad_t
 
cf_thªad
; \

39 * 
_cf_ª£rved
; \

40 * 
cf_°©e
; \

41 
uv_muãx_t
 
cf_muãx
; \

42 
uv_£m_t
 
cf_£m
; \

43 * 
cf_sig«ls
[2]; \

44 

	)

45 
	#UV_PLATFORM_FS_EVENT_FIELDS
 \

46 
uv__io_t
 
evít_w©chî
; \

47 * 
ªÆ∑th
; \

48 
ªÆ∑th_Àn
; \

49 
cf_Êags
; \

50 
uv_async_t
* 
cf_cb
; \

51 * 
cf_evíts
[2]; \

52 * 
cf_membî
[2]; \

53 
cf_îr‹
; \

54 
uv_muãx_t
 
cf_muãx
; \

55 

	)

56 
	#UV_STREAM_PRIVATE_PLATFORM_FIELDS
 \

57 * 
£À˘
; \

58 

	)

59 
	#UV_HAVE_KQUEUE
 1

	)

	@/usr/include/uv/linux.h

22 #i‚de‡
UV_LINUX_H


23 
	#UV_LINUX_H


	)

25 
	#UV_PLATFORM_LOOP_FIELDS
 \

26 
uv__io_t
 
öŸify_ªad_w©chî
; \

27 * 
öŸify_w©chîs
; \

28 
öŸify_fd
; \

29 

	)

30 
	#UV_PLATFORM_FS_EVENT_FIELDS
 \

31 * 
w©chîs
[2]; \

32 
wd
; \

33 

	)

	@/usr/include/uv/os390.h

22 #i‚de‡
UV_MVS_H


23 
	#UV_MVS_H


	)

25 
	#UV_PLATFORM_SEM_T
 

	)

27 
	#UV_PLATFORM_LOOP_FIELDS
 \

28 * 
ï
; \

29 

	)

30 
	#UV_PLATFORM_FS_EVENT_FIELDS
 \

31 
rfis_r·ok
[8]; \

32 

	)

	@/usr/include/uv/posix.h

22 #i‚de‡
UV_POSIX_H


23 
	#UV_POSIX_H


	)

25 
	#UV_PLATFORM_LOOP_FIELDS
 \

26 
pﬁlfd
* 
pﬁl_fds
; \

27 
size_t
 
pﬁl_fds_u£d
; \

28 
size_t
 
pﬁl_fds_size
; \

29 
pﬁl_fds_ôî©ög
; \

30 

	)

	@/usr/include/uv/sunos.h

22 #i‚de‡
UV_SUNOS_H


23 
	#UV_SUNOS_H


	)

25 
	~<sys/p‹t.h
>

26 
	~<p‹t.h
>

32 
	#UV_PLATFORM_LOOP_FIELDS
 \

33 
uv__io_t
 
fs_evít_w©chî
; \

34 
fs_fd
; \

35 

	)

36 #i‡
deföed
(
PORT_SOURCE_FILE
)

38 
	#UV_PLATFORM_FS_EVENT_FIELDS
 \

39 
fûe_obj_t
 
fo
; \

40 
fd
; \

41 

	)

	@/usr/include/uv/threadpool.h

27 #i‚de‡
UV_THREADPOOL_H_


28 
	#UV_THREADPOOL_H_


	)

30 
	suv__w‹k
 {

31 (*
	mw‹k
)(
uv__w‹k
 *
	mw
);

32 (*
	md⁄e
)(
uv__w‹k
 *
	mw
, 
	m°©us
);

33 
uv_lo›_s
* 
	mlo›
;

34 * 
	mwq
[2];

	@/usr/include/uv/tree.h

26 #i‚de‡ 
UV_TREE_H_


27 
	#UV_TREE_H_


	)

29 #i‚de‡
UV__UNUSED


30 #i‡
__GNUC__


31 
	#UV__UNUSED
 
	`__©åibuã__
((
unu£d
))

	)

33 
	#UV__UNUSED


	)

64 
	#SPLAY_HEAD
(
«me
, 
ty≥
) \

65 
	s«me
 { \

66 
ty≥
 *
•h_roŸ
; \

67 }

	)

69 
	#SPLAY_INITIALIZER
(
roŸ
) \

70 { 
NULL
 }

	)

72 
	#SPLAY_INIT
(
roŸ
) do { \

73 (
roŸ
)->
•h_roŸ
 = 
NULL
; \

74 }  0)

	)

76 
	#SPLAY_ENTRY
(
ty≥
) \

78 
ty≥
 *
•e_À·
; \

79 
ty≥
 *
•e_right
; \

80 }

	)

82 
	#SPLAY_LEFT
(
ñm
, 
fõld
Ë”lm)->fõld.
•e_À·


	)

83 
	#SPLAY_RIGHT
(
ñm
, 
fõld
Ë”lm)->fõld.
•e_right


	)

84 
	#SPLAY_ROOT
(
hód
Ë(hód)->
•h_roŸ


	)

85 
	#SPLAY_EMPTY
(
hód
Ë(
	`SPLAY_ROOT
(hódË=
NULL
)

	)

88 
	#SPLAY_ROTATE_RIGHT
(
hód
, 
tmp
, 
fõld
) do { \

89 
	`SPLAY_LEFT
((
hód
)->
•h_roŸ
, 
fõld
Ë
	`SPLAY_RIGHT
(
tmp
, field); \

90 
	`SPLAY_RIGHT
(
tmp
, 
fõld
Ë(
hód
)->
•h_roŸ
; \

91 (
hód
)->
•h_roŸ
 = 
tmp
; \

92 }  0)

	)

94 
	#SPLAY_ROTATE_LEFT
(
hód
, 
tmp
, 
fõld
) do { \

95 
	`SPLAY_RIGHT
((
hód
)->
•h_roŸ
, 
fõld
Ë
	`SPLAY_LEFT
(
tmp
, field); \

96 
	`SPLAY_LEFT
(
tmp
, 
fõld
Ë(
hód
)->
•h_roŸ
; \

97 (
hód
)->
•h_roŸ
 = 
tmp
; \

98 }  0)

	)

100 
	#SPLAY_LINKLEFT
(
hód
, 
tmp
, 
fõld
) do { \

101 
	`SPLAY_LEFT
(
tmp
, 
fõld
Ë(
hód
)->
•h_roŸ
; \

102 
tmp
 = (
hód
)->
•h_roŸ
; \

103 (
hód
)->
•h_roŸ
 = 
	`SPLAY_LEFT
((hód)->•h_roŸ, 
fõld
); \

104 }  0)

	)

106 
	#SPLAY_LINKRIGHT
(
hód
, 
tmp
, 
fõld
) do { \

107 
	`SPLAY_RIGHT
(
tmp
, 
fõld
Ë(
hód
)->
•h_roŸ
; \

108 
tmp
 = (
hód
)->
•h_roŸ
; \

109 (
hód
)->
•h_roŸ
 = 
	`SPLAY_RIGHT
((hód)->•h_roŸ, 
fõld
); \

110 }  0)

	)

112 
	#SPLAY_ASSEMBLE
(
hód
, 
node
, 
À·
, 
right
, 
fõld
) do { \

113 
	`SPLAY_RIGHT
(
À·
, 
fõld
Ë
	`SPLAY_LEFT
((
hód
)->
•h_roŸ
, field); \

114 
	`SPLAY_LEFT
(
right
, 
fõld
Ë
	`SPLAY_RIGHT
((
hód
)->
•h_roŸ
, field); \

115 
	`SPLAY_LEFT
((
hód
)->
•h_roŸ
, 
fõld
Ë
	`SPLAY_RIGHT
(
node
, field); \

116 
	`SPLAY_RIGHT
((
hód
)->
•h_roŸ
, 
fõld
Ë
	`SPLAY_LEFT
(
node
, field); \

117 }  0)

	)

121 
	#SPLAY_PROTOTYPE
(
«me
, 
ty≥
, 
fõld
, 
cmp
) \

122 
«me
##
	`_SPLAY
(«mê*, 
ty≥
 *); \

123 
«me
##
	`_SPLAY_MINMAX
(name *, ); \

124 
ty≥
 *
«me
##
	`_SPLAY_INSERT
(name *, type *); \

125 
ty≥
 *
«me
##
	`_SPLAY_REMOVE
(name *, type *); \

128 
__ölöe
 
ty≥
 * \

129 
«me
##
	`_SPLAY_FIND
(«mê*
hód
, 
ty≥
 *
ñm
) \

131 i‡(
	`SPLAY_EMPTY
(
hód
)) \

132 (
NULL
); \

133 
«me
##
	`_SPLAY
(
hód
, 
ñm
); \

134 i‡((
cmp
)(
ñm
, (
hód
)->
•h_roŸ
) == 0) \

135  (
hód
->
•h_roŸ
); \

136  (
NULL
); \

139 
__ölöe
 
ty≥
 * \

140 
«me
##
	`_SPLAY_NEXT
(«mê*
hód
, 
ty≥
 *
ñm
) \

142 
«me
##
	`_SPLAY
(
hód
, 
ñm
); \

143 i‡(
	`SPLAY_RIGHT
(
ñm
, 
fõld
Ë!
NULL
) { \

144 
ñm
 = 
	`SPLAY_RIGHT
”lm, 
fõld
); \

145 
	`SPLAY_LEFT
(
ñm
, 
fõld
Ë!
NULL
) { \

146 
ñm
 = 
	`SPLAY_LEFT
”lm, 
fõld
); \

149 
ñm
 = 
NULL
; \

150  (
ñm
); \

153 
__ölöe
 
ty≥
 * \

154 
«me
##
	`_SPLAY_MIN_MAX
(«mê*
hód
, 
vÆ
) \

156 
«me
##
	`_SPLAY_MINMAX
(
hód
, 
vÆ
); \

157  (
	`SPLAY_ROOT
(
hód
)); \

158 }

	)

163 
	#SPLAY_GENERATE
(
«me
, 
ty≥
, 
fõld
, 
cmp
) \

164 
ty≥
 * \

165 
«me
##
	`_SPLAY_INSERT
(«mê*
hód
, 
ty≥
 *
ñm
) \

167 i‡(
	`SPLAY_EMPTY
(
hód
)) { \

168 
	`SPLAY_LEFT
(
ñm
, 
fõld
Ë
	`SPLAY_RIGHT
”lm, fõldË
NULL
; \

170 
__comp
; \

171 
«me
##
	`_SPLAY
(
hód
, 
ñm
); \

172 
__comp
 = (
cmp
)(
ñm
, (
hód
)->
•h_roŸ
); \

173 if(
__comp
 < 0) { \

174 
	`SPLAY_LEFT
(
ñm
, 
fõld
ËSPLAY_LEFT((
hód
)->
•h_roŸ
, field); \

175 
	`SPLAY_RIGHT
(
ñm
, 
fõld
Ë(
hód
)->
•h_roŸ
; \

176 
	`SPLAY_LEFT
((
hód
)->
•h_roŸ
, 
fõld
Ë
NULL
; \

177 } i‡(
__comp
 > 0) { \

178 
	`SPLAY_RIGHT
(
ñm
, 
fõld
ËSPLAY_RIGHT((
hód
)->
•h_roŸ
, field); \

179 
	`SPLAY_LEFT
(
ñm
, 
fõld
Ë(
hód
)->
•h_roŸ
; \

180 
	`SPLAY_RIGHT
((
hód
)->
•h_roŸ
, 
fõld
Ë
NULL
; \

182  ((
hód
)->
•h_roŸ
); \

184 (
hód
)->
•h_roŸ
 = (
ñm
); \

185  (
NULL
); \

188 
ty≥
 * \

189 
«me
##
	`_SPLAY_REMOVE
(«mê*
hód
, 
ty≥
 *
ñm
) \

191 
ty≥
 *
__tmp
; \

192 i‡(
	`SPLAY_EMPTY
(
hód
)) \

193  (
NULL
); \

194 
«me
##
	`_SPLAY
(
hód
, 
ñm
); \

195 i‡((
cmp
)(
ñm
, (
hód
)->
•h_roŸ
) == 0) { \

196 i‡(
	`SPLAY_LEFT
((
hód
)->
•h_roŸ
, 
fõld
Ë=
NULL
) { \

197 (
hód
)->
•h_roŸ
 = 
	`SPLAY_RIGHT
((hód)->•h_roŸ, 
fõld
); \

199 
__tmp
 = 
	`SPLAY_RIGHT
((
hód
)->
•h_roŸ
, 
fõld
); \

200 (
hód
)->
•h_roŸ
 = 
	`SPLAY_LEFT
((hód)->•h_roŸ, 
fõld
); \

201 
«me
##
	`_SPLAY
(
hód
, 
ñm
); \

202 
	`SPLAY_RIGHT
((
hód
)->
•h_roŸ
, 
fõld
Ë
__tmp
; \

204  (
ñm
); \

206  (
NULL
); \

210 
«me
##
	`_SPLAY
(«mê*
hód
, 
ty≥
 *
ñm
) \

212 
ty≥
 
__node
, *
__À·
, *
__right
, *
__tmp
; \

213 
__comp
; \

215 
	`SPLAY_LEFT
(&
__node
, 
fõld
Ë
	`SPLAY_RIGHT
(&__node, fõldË
NULL
; \

216 
__À·
 = 
__right
 = &
__node
; \

218 (
__comp
 = (
cmp
)(
ñm
, (
hód
)->
•h_roŸ
)) != 0) { \

219 i‡(
__comp
 < 0) { \

220 
__tmp
 = 
	`SPLAY_LEFT
((
hód
)->
•h_roŸ
, 
fõld
); \

221 i‡(
__tmp
 =
NULL
) \

223 i‡((
cmp
)(
ñm
, 
__tmp
) < 0){ \

224 
	`SPLAY_ROTATE_RIGHT
(
hód
, 
__tmp
, 
fõld
); \

225 i‡(
	`SPLAY_LEFT
((
hód
)->
•h_roŸ
, 
fõld
Ë=
NULL
) \

228 
	`SPLAY_LINKLEFT
(
hód
, 
__right
, 
fõld
); \

229 } i‡(
__comp
 > 0) { \

230 
__tmp
 = 
	`SPLAY_RIGHT
((
hód
)->
•h_roŸ
, 
fõld
); \

231 i‡(
__tmp
 =
NULL
) \

233 i‡((
cmp
)(
ñm
, 
__tmp
) > 0){ \

234 
	`SPLAY_ROTATE_LEFT
(
hód
, 
__tmp
, 
fõld
); \

235 i‡(
	`SPLAY_RIGHT
((
hód
)->
•h_roŸ
, 
fõld
Ë=
NULL
) \

238 
	`SPLAY_LINKRIGHT
(
hód
, 
__À·
, 
fõld
); \

241 
	`SPLAY_ASSEMBLE
(
hód
, &
__node
, 
__À·
, 
__right
, 
fõld
); \

247 
«me
##
	`_SPLAY_MINMAX
(«mê*
hód
, 
__comp
) \

249 
ty≥
 
__node
, *
__À·
, *
__right
, *
__tmp
; \

251 
	`SPLAY_LEFT
(&
__node
, 
fõld
Ë
	`SPLAY_RIGHT
(&__node, fõldË
NULL
; \

252 
__À·
 = 
__right
 = &
__node
; \

255 i‡(
__comp
 < 0) { \

256 
__tmp
 = 
	`SPLAY_LEFT
((
hód
)->
•h_roŸ
, 
fõld
); \

257 i‡(
__tmp
 =
NULL
) \

259 i‡(
__comp
 < 0){ \

260 
	`SPLAY_ROTATE_RIGHT
(
hód
, 
__tmp
, 
fõld
); \

261 i‡(
	`SPLAY_LEFT
((
hód
)->
•h_roŸ
, 
fõld
Ë=
NULL
) \

264 
	`SPLAY_LINKLEFT
(
hód
, 
__right
, 
fõld
); \

265 } i‡(
__comp
 > 0) { \

266 
__tmp
 = 
	`SPLAY_RIGHT
((
hód
)->
•h_roŸ
, 
fõld
); \

267 i‡(
__tmp
 =
NULL
) \

269 i‡(
__comp
 > 0) { \

270 
	`SPLAY_ROTATE_LEFT
(
hód
, 
__tmp
, 
fõld
); \

271 i‡(
	`SPLAY_RIGHT
((
hód
)->
•h_roŸ
, 
fõld
Ë=
NULL
) \

274 
	`SPLAY_LINKRIGHT
(
hód
, 
__À·
, 
fõld
); \

277 
	`SPLAY_ASSEMBLE
(
hód
, &
__node
, 
__À·
, 
__right
, 
fõld
); \

278 }

	)

280 
	#SPLAY_NEGINF
 -1

	)

281 
	#SPLAY_INF
 1

	)

283 
	#SPLAY_INSERT
(
«me
, 
x
, 
y
Ë«me##
	`_SPLAY_INSERT
(x, y)

	)

284 
	#SPLAY_REMOVE
(
«me
, 
x
, 
y
Ë«me##
	`_SPLAY_REMOVE
(x, y)

	)

285 
	#SPLAY_FIND
(
«me
, 
x
, 
y
Ë«me##
	`_SPLAY_FIND
(x, y)

	)

286 
	#SPLAY_NEXT
(
«me
, 
x
, 
y
Ë«me##
	`_SPLAY_NEXT
(x, y)

	)

287 
	#SPLAY_MIN
(
«me
, 
x
Ë(
	`SPLAY_EMPTY
(xË? 
NULL
 \

288 : 
«me
##
	`_SPLAY_MIN_MAX
(
x
, 
SPLAY_NEGINF
))

	)

289 
	#SPLAY_MAX
(
«me
, 
x
Ë(
	`SPLAY_EMPTY
(xË? 
NULL
 \

290 : 
«me
##
	`_SPLAY_MIN_MAX
(
x
, 
SPLAY_INF
))

	)

292 
	#SPLAY_FOREACH
(
x
, 
«me
, 
hód
) \

293 (
x
Ë
	`SPLAY_MIN
(
«me
, 
hód
); \

294 (
x
Ë!
NULL
; \

295 (
x
Ë
	`SPLAY_NEXT
(
«me
, 
hód
, x))

	)

298 
	#RB_HEAD
(
«me
, 
ty≥
) \

299 
	s«me
 { \

300 
ty≥
 *
rbh_roŸ
; \

301 }

	)

303 
	#RB_INITIALIZER
(
roŸ
) \

304 { 
NULL
 }

	)

306 
	#RB_INIT
(
roŸ
) do { \

307 (
roŸ
)->
rbh_roŸ
 = 
NULL
; \

308 }  0)

	)

310 
	#RB_BLACK
 0

	)

311 
	#RB_RED
 1

	)

312 
	#RB_ENTRY
(
ty≥
) \

314 
ty≥
 *
rbe_À·
; \

315 
ty≥
 *
rbe_right
; \

316 
ty≥
 *
rbe_∑ª¡
; \

317 
rbe_cﬁ‹
; \

318 }

	)

320 
	#RB_LEFT
(
ñm
, 
fõld
Ë”lm)->fõld.
rbe_À·


	)

321 
	#RB_RIGHT
(
ñm
, 
fõld
Ë”lm)->fõld.
rbe_right


	)

322 
	#RB_PARENT
(
ñm
, 
fõld
Ë”lm)->fõld.
rbe_∑ª¡


	)

323 
	#RB_COLOR
(
ñm
, 
fõld
Ë”lm)->fõld.
rbe_cﬁ‹


	)

324 
	#RB_ROOT
(
hód
Ë(hód)->
rbh_roŸ


	)

325 
	#RB_EMPTY
(
hód
Ë(
	`RB_ROOT
(hódË=
NULL
)

	)

327 
	#RB_SET
(
ñm
, 
∑ª¡
, 
fõld
) do { \

328 
	`RB_PARENT
(
ñm
, 
fõld
Ë
∑ª¡
; \

329 
	`RB_LEFT
(
ñm
, 
fõld
Ë
	`RB_RIGHT
”lm, fõldË
NULL
; \

330 
	`RB_COLOR
(
ñm
, 
fõld
Ë
RB_RED
; \

331 }  0)

	)

333 
	#RB_SET_BLACKRED
(
bœck
, 
ªd
, 
fõld
) do { \

334 
	`RB_COLOR
(
bœck
, 
fõld
Ë
RB_BLACK
; \

335 
	`RB_COLOR
(
ªd
, 
fõld
Ë
RB_RED
; \

336 }  0)

	)

338 #i‚de‡
RB_AUGMENT


339 
	#RB_AUGMENT
(
x
Ëdÿ{} 0)

	)

342 
	#RB_ROTATE_LEFT
(
hód
, 
ñm
, 
tmp
, 
fõld
) do { \

343 (
tmp
Ë
	`RB_RIGHT
(
ñm
, 
fõld
); \

344 i‡((
	`RB_RIGHT
(
ñm
, 
fõld
Ë
	`RB_LEFT
(
tmp
, fõld)Ë!
NULL
) { \

345 
	`RB_PARENT
(
	`RB_LEFT
(
tmp
, 
fõld
), fõldË(
ñm
); \

347 
	`RB_AUGMENT
(
ñm
); \

348 i‡((
	`RB_PARENT
(
tmp
, 
fõld
ËRB_PARENT(
ñm
, fõld)Ë!
NULL
) { \

349 i‡((
ñm
Ë=
	`RB_LEFT
(
	`RB_PARENT
”lm, 
fõld
), field)) \

350 
	`RB_LEFT
(
	`RB_PARENT
(
ñm
, 
fõld
), fõldË(
tmp
); \

352 
	`RB_RIGHT
(
	`RB_PARENT
(
ñm
, 
fõld
), fõldË(
tmp
); \

354 (
hód
)->
rbh_roŸ
 = (
tmp
); \

355 
	`RB_LEFT
(
tmp
, 
fõld
Ë(
ñm
); \

356 
	`RB_PARENT
(
ñm
, 
fõld
Ë(
tmp
); \

357 
	`RB_AUGMENT
(
tmp
); \

358 i‡((
	`RB_PARENT
(
tmp
, 
fõld
))) \

359 
	`RB_AUGMENT
(
	`RB_PARENT
(
tmp
, 
fõld
)); \

360 }  0)

	)

362 
	#RB_ROTATE_RIGHT
(
hód
, 
ñm
, 
tmp
, 
fõld
) do { \

363 (
tmp
Ë
	`RB_LEFT
(
ñm
, 
fõld
); \

364 i‡((
	`RB_LEFT
(
ñm
, 
fõld
Ë
	`RB_RIGHT
(
tmp
, fõld)Ë!
NULL
) { \

365 
	`RB_PARENT
(
	`RB_RIGHT
(
tmp
, 
fõld
), fõldË(
ñm
); \

367 
	`RB_AUGMENT
(
ñm
); \

368 i‡((
	`RB_PARENT
(
tmp
, 
fõld
ËRB_PARENT(
ñm
, fõld)Ë!
NULL
) { \

369 i‡((
ñm
Ë=
	`RB_LEFT
(
	`RB_PARENT
”lm, 
fõld
), field)) \

370 
	`RB_LEFT
(
	`RB_PARENT
(
ñm
, 
fõld
), fõldË(
tmp
); \

372 
	`RB_RIGHT
(
	`RB_PARENT
(
ñm
, 
fõld
), fõldË(
tmp
); \

374 (
hód
)->
rbh_roŸ
 = (
tmp
); \

375 
	`RB_RIGHT
(
tmp
, 
fõld
Ë(
ñm
); \

376 
	`RB_PARENT
(
ñm
, 
fõld
Ë(
tmp
); \

377 
	`RB_AUGMENT
(
tmp
); \

378 i‡((
	`RB_PARENT
(
tmp
, 
fõld
))) \

379 
	`RB_AUGMENT
(
	`RB_PARENT
(
tmp
, 
fõld
)); \

380 }  0)

	)

383 
	#RB_PROTOTYPE
(
«me
, 
ty≥
, 
fõld
, 
cmp
) \

384 
	`RB_PROTOTYPE_INTERNAL
(
«me
, 
ty≥
, 
fõld
, 
cmp
,)

	)

385 
	#RB_PROTOTYPE_STATIC
(
«me
, 
ty≥
, 
fõld
, 
cmp
) \

386 
	`RB_PROTOTYPE_INTERNAL
(
«me
, 
ty≥
, 
fõld
, 
cmp
, 
UV__UNUSED
 )

	)

387 
	#RB_PROTOTYPE_INTERNAL
(
«me
, 
ty≥
, 
fõld
, 
cmp
, 
©å
) \

388 
©å
 
«me
##
	`_RB_INSERT_COLOR
(«mê*, 
ty≥
 *); \

389 
©å
 
«me
##
	`_RB_REMOVE_COLOR
(«mê*, 
ty≥
 *, type *);\

390 
©å
 
ty≥
 *
«me
##
	`_RB_REMOVE
(name *, type *); \

391 
©å
 
ty≥
 *
«me
##
	`_RB_INSERT
(name *, type *); \

392 
©å
 
ty≥
 *
«me
##
	`_RB_FIND
(name *, type *); \

393 
©å
 
ty≥
 *
«me
##
	`_RB_NFIND
(name *, type *); \

394 
©å
 
ty≥
 *
«me
##
	`_RB_NEXT
(type *); \

395 
©å
 
ty≥
 *
«me
##
	`_RB_PREV
(type *); \

396 
©å
 
ty≥
 *
«me
##
	`_RB_MINMAX
(name *, ); \

398 

	)

402 
	#RB_GENERATE
(
«me
, 
ty≥
, 
fõld
, 
cmp
) \

403 
	`RB_GENERATE_INTERNAL
(
«me
, 
ty≥
, 
fõld
, 
cmp
,)

	)

404 
	#RB_GENERATE_STATIC
(
«me
, 
ty≥
, 
fõld
, 
cmp
) \

405 
	`RB_GENERATE_INTERNAL
(
«me
, 
ty≥
, 
fõld
, 
cmp
, 
UV__UNUSED
 )

	)

406 
	#RB_GENERATE_INTERNAL
(
«me
, 
ty≥
, 
fõld
, 
cmp
, 
©å
) \

407 
©å
 \

408 
«me
##
	`_RB_INSERT_COLOR
(«mê*
hód
, 
ty≥
 *
ñm
) \

410 
ty≥
 *
∑ª¡
, *
g∑ª¡
, *
tmp
; \

411 (
∑ª¡
 = 
	`RB_PARENT
(
ñm
, 
fõld
)Ë!
NULL
 && \

412 
	`RB_COLOR
(
∑ª¡
, 
fõld
Ë=
RB_RED
) { \

413 
g∑ª¡
 = 
	`RB_PARENT
(
∑ª¡
, 
fõld
); \

414 i‡(
∑ª¡
 =
	`RB_LEFT
(
g∑ª¡
, 
fõld
)) { \

415 
tmp
 = 
	`RB_RIGHT
(
g∑ª¡
, 
fõld
); \

416 i‡(
tmp
 && 
	`RB_COLOR
—mp, 
fõld
Ë=
RB_RED
) { \

417 
	`RB_COLOR
(
tmp
, 
fõld
Ë
RB_BLACK
; \

418 
	`RB_SET_BLACKRED
(
∑ª¡
, 
g∑ª¡
, 
fõld
); \

419 
ñm
 = 
g∑ª¡
; \

422 i‡(
	`RB_RIGHT
(
∑ª¡
, 
fõld
Ë=
ñm
) { \

423 
	`RB_ROTATE_LEFT
(
hód
, 
∑ª¡
, 
tmp
, 
fõld
); \

424 
tmp
 = 
∑ª¡
; \

425 
∑ª¡
 = 
ñm
; \

426 
ñm
 = 
tmp
; \

428 
	`RB_SET_BLACKRED
(
∑ª¡
, 
g∑ª¡
, 
fõld
); \

429 
	`RB_ROTATE_RIGHT
(
hód
, 
g∑ª¡
, 
tmp
, 
fõld
); \

431 
tmp
 = 
	`RB_LEFT
(
g∑ª¡
, 
fõld
); \

432 i‡(
tmp
 && 
	`RB_COLOR
—mp, 
fõld
Ë=
RB_RED
) { \

433 
	`RB_COLOR
(
tmp
, 
fõld
Ë
RB_BLACK
; \

434 
	`RB_SET_BLACKRED
(
∑ª¡
, 
g∑ª¡
, 
fõld
); \

435 
ñm
 = 
g∑ª¡
; \

438 i‡(
	`RB_LEFT
(
∑ª¡
, 
fõld
Ë=
ñm
) { \

439 
	`RB_ROTATE_RIGHT
(
hód
, 
∑ª¡
, 
tmp
, 
fõld
); \

440 
tmp
 = 
∑ª¡
; \

441 
∑ª¡
 = 
ñm
; \

442 
ñm
 = 
tmp
; \

444 
	`RB_SET_BLACKRED
(
∑ª¡
, 
g∑ª¡
, 
fõld
); \

445 
	`RB_ROTATE_LEFT
(
hód
, 
g∑ª¡
, 
tmp
, 
fõld
); \

448 
	`RB_COLOR
(
hód
->
rbh_roŸ
, 
fõld
Ë
RB_BLACK
; \

451 
©å
 \

452 
«me
##
	`_RB_REMOVE_COLOR
(«mê*
hód
, 
ty≥
 *
∑ª¡
, \

453 
ty≥
 *
ñm
) \

455 
ty≥
 *
tmp
; \

456 (
ñm
 =
NULL
 || 
	`RB_COLOR
”lm, 
fõld
Ë=
RB_BLACK
) && \

457 
ñm
 !
	`RB_ROOT
(
hód
)) { \

458 i‡(
	`RB_LEFT
(
∑ª¡
, 
fõld
Ë=
ñm
) { \

459 
tmp
 = 
	`RB_RIGHT
(
∑ª¡
, 
fõld
); \

460 i‡(
	`RB_COLOR
(
tmp
, 
fõld
Ë=
RB_RED
) { \

461 
	`RB_SET_BLACKRED
(
tmp
, 
∑ª¡
, 
fõld
); \

462 
	`RB_ROTATE_LEFT
(
hód
, 
∑ª¡
, 
tmp
, 
fõld
); \

463 
tmp
 = 
	`RB_RIGHT
(
∑ª¡
, 
fõld
); \

465 i‡((
	`RB_LEFT
(
tmp
, 
fõld
Ë=
NULL
 || \

466 
	`RB_COLOR
(
	`RB_LEFT
(
tmp
, 
fõld
), fõldË=
RB_BLACK
) && \

467 (
	`RB_RIGHT
(
tmp
, 
fõld
Ë=
NULL
 || \

468 
	`RB_COLOR
(
	`RB_RIGHT
(
tmp
, 
fõld
), fõldË=
RB_BLACK
)) { \

469 
	`RB_COLOR
(
tmp
, 
fõld
Ë
RB_RED
; \

470 
ñm
 = 
∑ª¡
; \

471 
∑ª¡
 = 
	`RB_PARENT
(
ñm
, 
fõld
); \

473 i‡(
	`RB_RIGHT
(
tmp
, 
fõld
Ë=
NULL
 || \

474 
	`RB_COLOR
(
	`RB_RIGHT
(
tmp
, 
fõld
), fõldË=
RB_BLACK
) { \

475 
ty≥
 *
ﬁe·
; \

476 i‡((
ﬁe·
 = 
	`RB_LEFT
(
tmp
, 
fõld
)) \

477 !
NULL
) \

478 
	`RB_COLOR
(
ﬁe·
, 
fõld
Ë
RB_BLACK
; \

479 
	`RB_COLOR
(
tmp
, 
fõld
Ë
RB_RED
; \

480 
	`RB_ROTATE_RIGHT
(
hód
, 
tmp
, 
ﬁe·
, 
fõld
); \

481 
tmp
 = 
	`RB_RIGHT
(
∑ª¡
, 
fõld
); \

483 
	`RB_COLOR
(
tmp
, 
fõld
ËRB_COLOR(
∑ª¡
, field); \

484 
	`RB_COLOR
(
∑ª¡
, 
fõld
Ë
RB_BLACK
; \

485 i‡(
	`RB_RIGHT
(
tmp
, 
fõld
)) \

486 
	`RB_COLOR
(
	`RB_RIGHT
(
tmp
, 
fõld
), fõldË
RB_BLACK
; \

487 
	`RB_ROTATE_LEFT
(
hód
, 
∑ª¡
, 
tmp
, 
fõld
); \

488 
ñm
 = 
	`RB_ROOT
(
hód
); \

492 
tmp
 = 
	`RB_LEFT
(
∑ª¡
, 
fõld
); \

493 i‡(
	`RB_COLOR
(
tmp
, 
fõld
Ë=
RB_RED
) { \

494 
	`RB_SET_BLACKRED
(
tmp
, 
∑ª¡
, 
fõld
); \

495 
	`RB_ROTATE_RIGHT
(
hód
, 
∑ª¡
, 
tmp
, 
fõld
); \

496 
tmp
 = 
	`RB_LEFT
(
∑ª¡
, 
fõld
); \

498 i‡((
	`RB_LEFT
(
tmp
, 
fõld
Ë=
NULL
 || \

499 
	`RB_COLOR
(
	`RB_LEFT
(
tmp
, 
fõld
), fõldË=
RB_BLACK
) && \

500 (
	`RB_RIGHT
(
tmp
, 
fõld
Ë=
NULL
 || \

501 
	`RB_COLOR
(
	`RB_RIGHT
(
tmp
, 
fõld
), fõldË=
RB_BLACK
)) { \

502 
	`RB_COLOR
(
tmp
, 
fõld
Ë
RB_RED
; \

503 
ñm
 = 
∑ª¡
; \

504 
∑ª¡
 = 
	`RB_PARENT
(
ñm
, 
fõld
); \

506 i‡(
	`RB_LEFT
(
tmp
, 
fõld
Ë=
NULL
 || \

507 
	`RB_COLOR
(
	`RB_LEFT
(
tmp
, 
fõld
), fõldË=
RB_BLACK
) { \

508 
ty≥
 *
‹ight
; \

509 i‡((
‹ight
 = 
	`RB_RIGHT
(
tmp
, 
fõld
)) \

510 !
NULL
) \

511 
	`RB_COLOR
(
‹ight
, 
fõld
Ë
RB_BLACK
; \

512 
	`RB_COLOR
(
tmp
, 
fõld
Ë
RB_RED
; \

513 
	`RB_ROTATE_LEFT
(
hód
, 
tmp
, 
‹ight
, 
fõld
); \

514 
tmp
 = 
	`RB_LEFT
(
∑ª¡
, 
fõld
); \

516 
	`RB_COLOR
(
tmp
, 
fõld
ËRB_COLOR(
∑ª¡
, field); \

517 
	`RB_COLOR
(
∑ª¡
, 
fõld
Ë
RB_BLACK
; \

518 i‡(
	`RB_LEFT
(
tmp
, 
fõld
)) \

519 
	`RB_COLOR
(
	`RB_LEFT
(
tmp
, 
fõld
), fõldË
RB_BLACK
; \

520 
	`RB_ROTATE_RIGHT
(
hód
, 
∑ª¡
, 
tmp
, 
fõld
); \

521 
ñm
 = 
	`RB_ROOT
(
hód
); \

526 i‡(
ñm
) \

527 
	`RB_COLOR
(
ñm
, 
fõld
Ë
RB_BLACK
; \

530 
©å
 
ty≥
 * \

531 
«me
##
	`_RB_REMOVE
(«mê*
hód
, 
ty≥
 *
ñm
) \

533 
ty≥
 *
chûd
, *
∑ª¡
, *
ﬁd
 = 
ñm
; \

534 
cﬁ‹
; \

535 i‡(
	`RB_LEFT
(
ñm
, 
fõld
Ë=
NULL
) \

536 
chûd
 = 
	`RB_RIGHT
(
ñm
, 
fõld
); \

537 i‡(
	`RB_RIGHT
(
ñm
, 
fõld
Ë=
NULL
) \

538 
chûd
 = 
	`RB_LEFT
(
ñm
, 
fõld
); \

540 
ty≥
 *
À·
; \

541 
ñm
 = 
	`RB_RIGHT
”lm, 
fõld
); \

542 (
À·
 = 
	`RB_LEFT
(
ñm
, 
fõld
)Ë!
NULL
) \

543 
ñm
 = 
À·
; \

544 
chûd
 = 
	`RB_RIGHT
(
ñm
, 
fõld
); \

545 
∑ª¡
 = 
	`RB_PARENT
(
ñm
, 
fõld
); \

546 
cﬁ‹
 = 
	`RB_COLOR
(
ñm
, 
fõld
); \

547 i‡(
chûd
) \

548 
	`RB_PARENT
(
chûd
, 
fõld
Ë
∑ª¡
; \

549 i‡(
∑ª¡
) { \

550 i‡(
	`RB_LEFT
(
∑ª¡
, 
fõld
Ë=
ñm
) \

551 
	`RB_LEFT
(
∑ª¡
, 
fõld
Ë
chûd
; \

553 
	`RB_RIGHT
(
∑ª¡
, 
fõld
Ë
chûd
; \

554 
	`RB_AUGMENT
(
∑ª¡
); \

556 
	`RB_ROOT
(
hód
Ë
chûd
; \

557 i‡(
	`RB_PARENT
(
ñm
, 
fõld
Ë=
ﬁd
) \

558 
∑ª¡
 = 
ñm
; \

559 (
ñm
)->
fõld
 = (
ﬁd
)->field; \

560 i‡(
	`RB_PARENT
(
ﬁd
, 
fõld
)) { \

561 i‡(
	`RB_LEFT
(
	`RB_PARENT
(
ﬁd
, 
fõld
), field) == old) \

562 
	`RB_LEFT
(
	`RB_PARENT
(
ﬁd
, 
fõld
), fõldË
ñm
; \

564 
	`RB_RIGHT
(
	`RB_PARENT
(
ﬁd
, 
fõld
), fõldË
ñm
; \

565 
	`RB_AUGMENT
(
	`RB_PARENT
(
ﬁd
, 
fõld
)); \

567 
	`RB_ROOT
(
hód
Ë
ñm
; \

568 
	`RB_PARENT
(
	`RB_LEFT
(
ﬁd
, 
fõld
), fõldË
ñm
; \

569 i‡(
	`RB_RIGHT
(
ﬁd
, 
fõld
)) \

570 
	`RB_PARENT
(
	`RB_RIGHT
(
ﬁd
, 
fõld
), fõldË
ñm
; \

571 i‡(
∑ª¡
) { \

572 
À·
 = 
∑ª¡
; \

574 
	`RB_AUGMENT
(
À·
); \

575 } (
À·
 = 
	`RB_PARENT
÷e·, 
fõld
)Ë!
NULL
); \

577 
cﬁ‹
; \

579 
∑ª¡
 = 
	`RB_PARENT
(
ñm
, 
fõld
); \

580 
cﬁ‹
 = 
	`RB_COLOR
(
ñm
, 
fõld
); \

581 i‡(
chûd
) \

582 
	`RB_PARENT
(
chûd
, 
fõld
Ë
∑ª¡
; \

583 i‡(
∑ª¡
) { \

584 i‡(
	`RB_LEFT
(
∑ª¡
, 
fõld
Ë=
ñm
) \

585 
	`RB_LEFT
(
∑ª¡
, 
fõld
Ë
chûd
; \

587 
	`RB_RIGHT
(
∑ª¡
, 
fõld
Ë
chûd
; \

588 
	`RB_AUGMENT
(
∑ª¡
); \

590 
	`RB_ROOT
(
hód
Ë
chûd
; \

591 
cﬁ‹
: \

592 i‡(
cﬁ‹
 =
RB_BLACK
) \

593 
«me
##
	`_RB_REMOVE_COLOR
(
hód
, 
∑ª¡
, 
chûd
); \

594  (
ﬁd
); \

598 
©å
 
ty≥
 * \

599 
«me
##
	`_RB_INSERT
(«mê*
hód
, 
ty≥
 *
ñm
) \

601 
ty≥
 *
tmp
; \

602 
ty≥
 *
∑ª¡
 = 
NULL
; \

603 
comp
 = 0; \

604 
tmp
 = 
	`RB_ROOT
(
hód
); \

605 
tmp
) { \

606 
∑ª¡
 = 
tmp
; \

607 
comp
 = (
cmp
)(
ñm
, 
∑ª¡
); \

608 i‡(
comp
 < 0) \

609 
tmp
 = 
	`RB_LEFT
—mp, 
fõld
); \

610 i‡(
comp
 > 0) \

611 
tmp
 = 
	`RB_RIGHT
—mp, 
fõld
); \

613  (
tmp
); \

615 
	`RB_SET
(
ñm
, 
∑ª¡
, 
fõld
); \

616 i‡(
∑ª¡
 !
NULL
) { \

617 i‡(
comp
 < 0) \

618 
	`RB_LEFT
(
∑ª¡
, 
fõld
Ë
ñm
; \

620 
	`RB_RIGHT
(
∑ª¡
, 
fõld
Ë
ñm
; \

621 
	`RB_AUGMENT
(
∑ª¡
); \

623 
	`RB_ROOT
(
hód
Ë
ñm
; \

624 
«me
##
	`_RB_INSERT_COLOR
(
hód
, 
ñm
); \

625  (
NULL
); \

629 
©å
 
ty≥
 * \

630 
«me
##
	`_RB_FIND
(«mê*
hód
, 
ty≥
 *
ñm
) \

632 
ty≥
 *
tmp
 = 
	`RB_ROOT
(
hód
); \

633 
comp
; \

634 
tmp
) { \

635 
comp
 = 
	`cmp
(
ñm
, 
tmp
); \

636 i‡(
comp
 < 0) \

637 
tmp
 = 
	`RB_LEFT
—mp, 
fõld
); \

638 i‡(
comp
 > 0) \

639 
tmp
 = 
	`RB_RIGHT
—mp, 
fõld
); \

641  (
tmp
); \

643  (
NULL
); \

647 
©å
 
ty≥
 * \

648 
«me
##
	`_RB_NFIND
(«mê*
hód
, 
ty≥
 *
ñm
) \

650 
ty≥
 *
tmp
 = 
	`RB_ROOT
(
hód
); \

651 
ty≥
 *
ªs
 = 
NULL
; \

652 
comp
; \

653 
tmp
) { \

654 
comp
 = 
	`cmp
(
ñm
, 
tmp
); \

655 i‡(
comp
 < 0) { \

656 
ªs
 = 
tmp
; \

657 
tmp
 = 
	`RB_LEFT
—mp, 
fõld
); \

659 i‡(
comp
 > 0) \

660 
tmp
 = 
	`RB_RIGHT
—mp, 
fõld
); \

662  (
tmp
); \

664  (
ªs
); \

668 
©å
 
ty≥
 * \

669 
«me
##
	`_RB_NEXT
(
ty≥
 *
ñm
) \

671 i‡(
	`RB_RIGHT
(
ñm
, 
fõld
)) { \

672 
ñm
 = 
	`RB_RIGHT
”lm, 
fõld
); \

673 
	`RB_LEFT
(
ñm
, 
fõld
)) \

674 
ñm
 = 
	`RB_LEFT
”lm, 
fõld
); \

676 i‡(
	`RB_PARENT
(
ñm
, 
fõld
) && \

677 (
ñm
 =
	`RB_LEFT
(
	`RB_PARENT
”lm, 
fõld
), field))) \

678 
ñm
 = 
	`RB_PARENT
”lm, 
fõld
); \

680 
	`RB_PARENT
(
ñm
, 
fõld
) && \

681 (
ñm
 =
	`RB_RIGHT
(
	`RB_PARENT
”lm, 
fõld
), field))) \

682 
ñm
 = 
	`RB_PARENT
”lm, 
fõld
); \

683 
ñm
 = 
	`RB_PARENT
”lm, 
fõld
); \

686  (
ñm
); \

690 
©å
 
ty≥
 * \

691 
«me
##
	`_RB_PREV
(
ty≥
 *
ñm
) \

693 i‡(
	`RB_LEFT
(
ñm
, 
fõld
)) { \

694 
ñm
 = 
	`RB_LEFT
”lm, 
fõld
); \

695 
	`RB_RIGHT
(
ñm
, 
fõld
)) \

696 
ñm
 = 
	`RB_RIGHT
”lm, 
fõld
); \

698 i‡(
	`RB_PARENT
(
ñm
, 
fõld
) && \

699 (
ñm
 =
	`RB_RIGHT
(
	`RB_PARENT
”lm, 
fõld
), field))) \

700 
ñm
 = 
	`RB_PARENT
”lm, 
fõld
); \

702 
	`RB_PARENT
(
ñm
, 
fõld
) && \

703 (
ñm
 =
	`RB_LEFT
(
	`RB_PARENT
”lm, 
fõld
), field))) \

704 
ñm
 = 
	`RB_PARENT
”lm, 
fõld
); \

705 
ñm
 = 
	`RB_PARENT
”lm, 
fõld
); \

708  (
ñm
); \

711 
©å
 
ty≥
 * \

712 
«me
##
	`_RB_MINMAX
(«mê*
hód
, 
vÆ
) \

714 
ty≥
 *
tmp
 = 
	`RB_ROOT
(
hód
); \

715 
ty≥
 *
∑ª¡
 = 
NULL
; \

716 
tmp
) { \

717 
∑ª¡
 = 
tmp
; \

718 i‡(
vÆ
 < 0) \

719 
tmp
 = 
	`RB_LEFT
—mp, 
fõld
); \

721 
tmp
 = 
	`RB_RIGHT
—mp, 
fõld
); \

723  (
∑ª¡
); \

724 }

	)

726 
	#RB_NEGINF
 -1

	)

727 
	#RB_INF
 1

	)

729 
	#RB_INSERT
(
«me
, 
x
, 
y
Ë«me##
	`_RB_INSERT
(x, y)

	)

730 
	#RB_REMOVE
(
«me
, 
x
, 
y
Ë«me##
	`_RB_REMOVE
(x, y)

	)

731 
	#RB_FIND
(
«me
, 
x
, 
y
Ë«me##
	`_RB_FIND
(x, y)

	)

732 
	#RB_NFIND
(
«me
, 
x
, 
y
Ë«me##
	`_RB_NFIND
(x, y)

	)

733 
	#RB_NEXT
(
«me
, 
x
, 
y
Ë«me##
	`_RB_NEXT
(y)

	)

734 
	#RB_PREV
(
«me
, 
x
, 
y
Ë«me##
	`_RB_PREV
(y)

	)

735 
	#RB_MIN
(
«me
, 
x
Ë«me##
	`_RB_MINMAX
(x, 
RB_NEGINF
)

	)

736 
	#RB_MAX
(
«me
, 
x
Ë«me##
	`_RB_MINMAX
(x, 
RB_INF
)

	)

738 
	#RB_FOREACH
(
x
, 
«me
, 
hód
) \

739 (
x
Ë
	`RB_MIN
(
«me
, 
hód
); \

740 (
x
Ë!
NULL
; \

741 (
x
Ë
«me
##
	`_RB_NEXT
(x))

	)

743 
	#RB_FOREACH_FROM
(
x
, 
«me
, 
y
) \

744 (
x
Ë(
y
); \

745 ((
x
Ë!
NULL
Ë&& ((
y
Ë
«me
##
	`_RB_NEXT
(x), (x) != NULL); \

746 (
x
Ë(
y
))

	)

748 
	#RB_FOREACH_SAFE
(
x
, 
«me
, 
hód
, 
y
) \

749 (
x
Ë
	`RB_MIN
(
«me
, 
hód
); \

750 ((
x
Ë!
NULL
Ë&& ((
y
Ë
«me
##
	`_RB_NEXT
(x), (x) != NULL); \

751 (
x
Ë(
y
))

	)

753 
	#RB_FOREACH_REVERSE
(
x
, 
«me
, 
hód
) \

754 (
x
Ë
	`RB_MAX
(
«me
, 
hód
); \

755 (
x
Ë!
NULL
; \

756 (
x
Ë
«me
##
	`_RB_PREV
(x))

	)

758 
	#RB_FOREACH_REVERSE_FROM
(
x
, 
«me
, 
y
) \

759 (
x
Ë(
y
); \

760 ((
x
Ë!
NULL
Ë&& ((
y
Ë
«me
##
	`_RB_PREV
(x), (x) != NULL); \

761 (
x
Ë(
y
))

	)

763 
	#RB_FOREACH_REVERSE_SAFE
(
x
, 
«me
, 
hód
, 
y
) \

764 (
x
Ë
	`RB_MAX
(
«me
, 
hód
); \

765 ((
x
Ë!
NULL
Ë&& ((
y
Ë
«me
##
	`_RB_PREV
(x), (x) != NULL); \

766 (
x
Ë(
y
))

	)

	@/usr/include/openssl/asn1err.h

11 #i‚de‡
OPENSSL_ASN1ERR_H


12 
	#OPENSSL_ASN1ERR_H


	)

13 #¥agm®
⁄˚


15 
	~<›ís¶/›ís¶c⁄f.h
>

16 
	~<›ís¶/symhacks.h
>

17 
	~<›ís¶/¸y±€º_Àgacy.h
>

24 
	#ASN1_R_ADDING_OBJECT
 171

	)

25 
	#ASN1_R_ASN1_PARSE_ERROR
 203

	)

26 
	#ASN1_R_ASN1_SIG_PARSE_ERROR
 204

	)

27 
	#ASN1_R_AUX_ERROR
 100

	)

28 
	#ASN1_R_BAD_OBJECT_HEADER
 102

	)

29 
	#ASN1_R_BAD_TEMPLATE
 230

	)

30 
	#ASN1_R_BMPSTRING_IS_WRONG_LENGTH
 214

	)

31 
	#ASN1_R_BN_LIB
 105

	)

32 
	#ASN1_R_BOOLEAN_IS_WRONG_LENGTH
 106

	)

33 
	#ASN1_R_BUFFER_TOO_SMALL
 107

	)

34 
	#ASN1_R_CIPHER_HAS_NO_OBJECT_IDENTIFIER
 108

	)

35 
	#ASN1_R_CONTEXT_NOT_INITIALISED
 217

	)

36 
	#ASN1_R_DATA_IS_WRONG
 109

	)

37 
	#ASN1_R_DECODE_ERROR
 110

	)

38 
	#ASN1_R_DEPTH_EXCEEDED
 174

	)

39 
	#ASN1_R_DIGEST_AND_KEY_TYPE_NOT_SUPPORTED
 198

	)

40 
	#ASN1_R_ENCODE_ERROR
 112

	)

41 
	#ASN1_R_ERROR_GETTING_TIME
 173

	)

42 
	#ASN1_R_ERROR_LOADING_SECTION
 172

	)

43 
	#ASN1_R_ERROR_SETTING_CIPHER_PARAMS
 114

	)

44 
	#ASN1_R_EXPECTING_AN_INTEGER
 115

	)

45 
	#ASN1_R_EXPECTING_AN_OBJECT
 116

	)

46 
	#ASN1_R_EXPLICIT_LENGTH_MISMATCH
 119

	)

47 
	#ASN1_R_EXPLICIT_TAG_NOT_CONSTRUCTED
 120

	)

48 
	#ASN1_R_FIELD_MISSING
 121

	)

49 
	#ASN1_R_FIRST_NUM_TOO_LARGE
 122

	)

50 
	#ASN1_R_HEADER_TOO_LONG
 123

	)

51 
	#ASN1_R_ILLEGAL_BITSTRING_FORMAT
 175

	)

52 
	#ASN1_R_ILLEGAL_BOOLEAN
 176

	)

53 
	#ASN1_R_ILLEGAL_CHARACTERS
 124

	)

54 
	#ASN1_R_ILLEGAL_FORMAT
 177

	)

55 
	#ASN1_R_ILLEGAL_HEX
 178

	)

56 
	#ASN1_R_ILLEGAL_IMPLICIT_TAG
 179

	)

57 
	#ASN1_R_ILLEGAL_INTEGER
 180

	)

58 
	#ASN1_R_ILLEGAL_NEGATIVE_VALUE
 226

	)

59 
	#ASN1_R_ILLEGAL_NESTED_TAGGING
 181

	)

60 
	#ASN1_R_ILLEGAL_NULL
 125

	)

61 
	#ASN1_R_ILLEGAL_NULL_VALUE
 182

	)

62 
	#ASN1_R_ILLEGAL_OBJECT
 183

	)

63 
	#ASN1_R_ILLEGAL_OPTIONAL_ANY
 126

	)

64 
	#ASN1_R_ILLEGAL_OPTIONS_ON_ITEM_TEMPLATE
 170

	)

65 
	#ASN1_R_ILLEGAL_PADDING
 221

	)

66 
	#ASN1_R_ILLEGAL_TAGGED_ANY
 127

	)

67 
	#ASN1_R_ILLEGAL_TIME_VALUE
 184

	)

68 
	#ASN1_R_ILLEGAL_ZERO_CONTENT
 222

	)

69 
	#ASN1_R_INTEGER_NOT_ASCII_FORMAT
 185

	)

70 
	#ASN1_R_INTEGER_TOO_LARGE_FOR_LONG
 128

	)

71 
	#ASN1_R_INVALID_BIT_STRING_BITS_LEFT
 220

	)

72 
	#ASN1_R_INVALID_BMPSTRING_LENGTH
 129

	)

73 
	#ASN1_R_INVALID_DIGIT
 130

	)

74 
	#ASN1_R_INVALID_MIME_TYPE
 205

	)

75 
	#ASN1_R_INVALID_MODIFIER
 186

	)

76 
	#ASN1_R_INVALID_NUMBER
 187

	)

77 
	#ASN1_R_INVALID_OBJECT_ENCODING
 216

	)

78 
	#ASN1_R_INVALID_SCRYPT_PARAMETERS
 227

	)

79 
	#ASN1_R_INVALID_SEPARATOR
 131

	)

80 
	#ASN1_R_INVALID_STRING_TABLE_VALUE
 218

	)

81 
	#ASN1_R_INVALID_UNIVERSALSTRING_LENGTH
 133

	)

82 
	#ASN1_R_INVALID_UTF8STRING
 134

	)

83 
	#ASN1_R_INVALID_VALUE
 219

	)

84 
	#ASN1_R_LENGTH_TOO_LONG
 231

	)

85 
	#ASN1_R_LIST_ERROR
 188

	)

86 
	#ASN1_R_MIME_NO_CONTENT_TYPE
 206

	)

87 
	#ASN1_R_MIME_PARSE_ERROR
 207

	)

88 
	#ASN1_R_MIME_SIG_PARSE_ERROR
 208

	)

89 
	#ASN1_R_MISSING_EOC
 137

	)

90 
	#ASN1_R_MISSING_SECOND_NUMBER
 138

	)

91 
	#ASN1_R_MISSING_VALUE
 189

	)

92 
	#ASN1_R_MSTRING_NOT_UNIVERSAL
 139

	)

93 
	#ASN1_R_MSTRING_WRONG_TAG
 140

	)

94 
	#ASN1_R_NESTED_ASN1_STRING
 197

	)

95 
	#ASN1_R_NESTED_TOO_DEEP
 201

	)

96 
	#ASN1_R_NON_HEX_CHARACTERS
 141

	)

97 
	#ASN1_R_NOT_ASCII_FORMAT
 190

	)

98 
	#ASN1_R_NOT_ENOUGH_DATA
 142

	)

99 
	#ASN1_R_NO_CONTENT_TYPE
 209

	)

100 
	#ASN1_R_NO_MATCHING_CHOICE_TYPE
 143

	)

101 
	#ASN1_R_NO_MULTIPART_BODY_FAILURE
 210

	)

102 
	#ASN1_R_NO_MULTIPART_BOUNDARY
 211

	)

103 
	#ASN1_R_NO_SIG_CONTENT_TYPE
 212

	)

104 
	#ASN1_R_NULL_IS_WRONG_LENGTH
 144

	)

105 
	#ASN1_R_OBJECT_NOT_ASCII_FORMAT
 191

	)

106 
	#ASN1_R_ODD_NUMBER_OF_CHARS
 145

	)

107 
	#ASN1_R_SECOND_NUMBER_TOO_LARGE
 147

	)

108 
	#ASN1_R_SEQUENCE_LENGTH_MISMATCH
 148

	)

109 
	#ASN1_R_SEQUENCE_NOT_CONSTRUCTED
 149

	)

110 
	#ASN1_R_SEQUENCE_OR_SET_NEEDS_CONFIG
 192

	)

111 
	#ASN1_R_SHORT_LINE
 150

	)

112 
	#ASN1_R_SIG_INVALID_MIME_TYPE
 213

	)

113 
	#ASN1_R_STREAMING_NOT_SUPPORTED
 202

	)

114 
	#ASN1_R_STRING_TOO_LONG
 151

	)

115 
	#ASN1_R_STRING_TOO_SHORT
 152

	)

116 
	#ASN1_R_THE_ASN1_OBJECT_IDENTIFIER_IS_NOT_KNOWN_FOR_THIS_MD
 154

	)

117 
	#ASN1_R_TIME_NOT_ASCII_FORMAT
 193

	)

118 
	#ASN1_R_TOO_LARGE
 223

	)

119 
	#ASN1_R_TOO_LONG
 155

	)

120 
	#ASN1_R_TOO_SMALL
 224

	)

121 
	#ASN1_R_TYPE_NOT_CONSTRUCTED
 156

	)

122 
	#ASN1_R_TYPE_NOT_PRIMITIVE
 195

	)

123 
	#ASN1_R_UNEXPECTED_EOC
 159

	)

124 
	#ASN1_R_UNIVERSALSTRING_IS_WRONG_LENGTH
 215

	)

125 
	#ASN1_R_UNKNOWN_DIGEST
 229

	)

126 
	#ASN1_R_UNKNOWN_FORMAT
 160

	)

127 
	#ASN1_R_UNKNOWN_MESSAGE_DIGEST_ALGORITHM
 161

	)

128 
	#ASN1_R_UNKNOWN_OBJECT_TYPE
 162

	)

129 
	#ASN1_R_UNKNOWN_PUBLIC_KEY_TYPE
 163

	)

130 
	#ASN1_R_UNKNOWN_SIGNATURE_ALGORITHM
 199

	)

131 
	#ASN1_R_UNKNOWN_TAG
 194

	)

132 
	#ASN1_R_UNSUPPORTED_ANY_DEFINED_BY_TYPE
 164

	)

133 
	#ASN1_R_UNSUPPORTED_CIPHER
 228

	)

134 
	#ASN1_R_UNSUPPORTED_PUBLIC_KEY_TYPE
 167

	)

135 
	#ASN1_R_UNSUPPORTED_TYPE
 196

	)

136 
	#ASN1_R_WRONG_INTEGER_TYPE
 225

	)

137 
	#ASN1_R_WRONG_PUBLIC_KEY_TYPE
 200

	)

138 
	#ASN1_R_WRONG_TAG
 168

	)

	@/usr/include/openssl/asyncerr.h

11 #i‚de‡
OPENSSL_ASYNCERR_H


12 
	#OPENSSL_ASYNCERR_H


	)

13 #¥agm®
⁄˚


15 
	~<›ís¶/›ís¶c⁄f.h
>

16 
	~<›ís¶/symhacks.h
>

17 
	~<›ís¶/¸y±€º_Àgacy.h
>

24 
	#ASYNC_R_FAILED_TO_SET_POOL
 101

	)

25 
	#ASYNC_R_FAILED_TO_SWAP_CONTEXT
 102

	)

26 
	#ASYNC_R_INIT_FAILED
 105

	)

27 
	#ASYNC_R_INVALID_POOL_SIZE
 103

	)

	@/usr/include/openssl/bioerr.h

11 #i‚de‡
OPENSSL_BIOERR_H


12 
	#OPENSSL_BIOERR_H


	)

13 #¥agm®
⁄˚


15 
	~<›ís¶/›ís¶c⁄f.h
>

16 
	~<›ís¶/symhacks.h
>

17 
	~<›ís¶/¸y±€º_Àgacy.h
>

24 
	#BIO_R_ACCEPT_ERROR
 100

	)

25 
	#BIO_R_ADDRINFO_ADDR_IS_NOT_AF_INET
 141

	)

26 
	#BIO_R_AMBIGUOUS_HOST_OR_SERVICE
 129

	)

27 
	#BIO_R_BAD_FOPEN_MODE
 101

	)

28 
	#BIO_R_BROKEN_PIPE
 124

	)

29 
	#BIO_R_CONNECT_ERROR
 103

	)

30 
	#BIO_R_CONNECT_TIMEOUT
 147

	)

31 
	#BIO_R_GETHOSTBYNAME_ADDR_IS_NOT_AF_INET
 107

	)

32 
	#BIO_R_GETSOCKNAME_ERROR
 132

	)

33 
	#BIO_R_GETSOCKNAME_TRUNCATED_ADDRESS
 133

	)

34 
	#BIO_R_GETTING_SOCKTYPE
 134

	)

35 
	#BIO_R_INVALID_ARGUMENT
 125

	)

36 
	#BIO_R_INVALID_SOCKET
 135

	)

37 
	#BIO_R_IN_USE
 123

	)

38 
	#BIO_R_LENGTH_TOO_LONG
 102

	)

39 
	#BIO_R_LISTEN_V6_ONLY
 136

	)

40 
	#BIO_R_LOOKUP_RETURNED_NOTHING
 142

	)

41 
	#BIO_R_MALFORMED_HOST_OR_SERVICE
 130

	)

42 
	#BIO_R_NBIO_CONNECT_ERROR
 110

	)

43 
	#BIO_R_NO_ACCEPT_ADDR_OR_SERVICE_SPECIFIED
 143

	)

44 
	#BIO_R_NO_HOSTNAME_OR_SERVICE_SPECIFIED
 144

	)

45 
	#BIO_R_NO_PORT_DEFINED
 113

	)

46 
	#BIO_R_NO_SUCH_FILE
 128

	)

47 
	#BIO_R_NULL_PARAMETER
 115

	)

48 
	#BIO_R_TRANSFER_ERROR
 104

	)

49 
	#BIO_R_TRANSFER_TIMEOUT
 105

	)

50 
	#BIO_R_UNABLE_TO_BIND_SOCKET
 117

	)

51 
	#BIO_R_UNABLE_TO_CREATE_SOCKET
 118

	)

52 
	#BIO_R_UNABLE_TO_KEEPALIVE
 137

	)

53 
	#BIO_R_UNABLE_TO_LISTEN_SOCKET
 119

	)

54 
	#BIO_R_UNABLE_TO_NODELAY
 138

	)

55 
	#BIO_R_UNABLE_TO_REUSEADDR
 139

	)

56 
	#BIO_R_UNAVAILABLE_IP_FAMILY
 145

	)

57 
	#BIO_R_UNINITIALIZED
 120

	)

58 
	#BIO_R_UNKNOWN_INFO_TYPE
 140

	)

59 
	#BIO_R_UNSUPPORTED_IP_FAMILY
 146

	)

60 
	#BIO_R_UNSUPPORTED_METHOD
 121

	)

61 
	#BIO_R_UNSUPPORTED_PROTOCOL_FAMILY
 131

	)

62 
	#BIO_R_WRITE_TO_READ_ONLY_BIO
 126

	)

63 
	#BIO_R_WSASTARTUP
 122

	)

	@/usr/include/openssl/buffererr.h

11 #i‚de‡
OPENSSL_BUFFERERR_H


12 
	#OPENSSL_BUFFERERR_H


	)

13 #¥agm®
⁄˚


15 
	~<›ís¶/›ís¶c⁄f.h
>

16 
	~<›ís¶/symhacks.h
>

17 
	~<›ís¶/¸y±€º_Àgacy.h
>

	@/usr/include/openssl/comperr.h

11 #i‚de‡
OPENSSL_COMPERR_H


12 
	#OPENSSL_COMPERR_H


	)

13 #¥agm®
⁄˚


15 
	~<›ís¶/›ís¶c⁄f.h
>

16 
	~<›ís¶/symhacks.h
>

17 
	~<›ís¶/¸y±€º_Àgacy.h
>

20 #i‚de‡
OPENSSL_NO_COMP


26 
	#COMP_R_ZLIB_DEFLATE_ERROR
 99

	)

27 
	#COMP_R_ZLIB_INFLATE_ERROR
 100

	)

28 
	#COMP_R_ZLIB_NOT_SUPPORTED
 101

	)

	@/usr/include/openssl/conferr.h

11 #i‚de‡
OPENSSL_CONFERR_H


12 
	#OPENSSL_CONFERR_H


	)

13 #¥agm®
⁄˚


15 
	~<›ís¶/›ís¶c⁄f.h
>

16 
	~<›ís¶/symhacks.h
>

17 
	~<›ís¶/¸y±€º_Àgacy.h
>

24 
	#CONF_R_ERROR_LOADING_DSO
 110

	)

25 
	#CONF_R_INVALID_PRAGMA
 122

	)

26 
	#CONF_R_LIST_CANNOT_BE_NULL
 115

	)

27 
	#CONF_R_MANDATORY_BRACES_IN_VARIABLE_EXPANSION
 123

	)

28 
	#CONF_R_MISSING_CLOSE_SQUARE_BRACKET
 100

	)

29 
	#CONF_R_MISSING_EQUAL_SIGN
 101

	)

30 
	#CONF_R_MISSING_INIT_FUNCTION
 112

	)

31 
	#CONF_R_MODULE_INITIALIZATION_ERROR
 109

	)

32 
	#CONF_R_NO_CLOSE_BRACE
 102

	)

33 
	#CONF_R_NO_CONF
 105

	)

34 
	#CONF_R_NO_CONF_OR_ENVIRONMENT_VARIABLE
 106

	)

35 
	#CONF_R_NO_SECTION
 107

	)

36 
	#CONF_R_NO_SUCH_FILE
 114

	)

37 
	#CONF_R_NO_VALUE
 108

	)

38 
	#CONF_R_NUMBER_TOO_LARGE
 121

	)

39 
	#CONF_R_OPENSSL_CONF_REFERENCES_MISSING_SECTION
 124

	)

40 
	#CONF_R_RECURSIVE_DIRECTORY_INCLUDE
 111

	)

41 
	#CONF_R_RELATIVE_PATH
 125

	)

42 
	#CONF_R_SSL_COMMAND_SECTION_EMPTY
 117

	)

43 
	#CONF_R_SSL_COMMAND_SECTION_NOT_FOUND
 118

	)

44 
	#CONF_R_SSL_SECTION_EMPTY
 119

	)

45 
	#CONF_R_SSL_SECTION_NOT_FOUND
 120

	)

46 
	#CONF_R_UNABLE_TO_CREATE_NEW_SECTION
 103

	)

47 
	#CONF_R_UNKNOWN_MODULE_NAME
 113

	)

48 
	#CONF_R_VARIABLE_EXPANSION_TOO_LONG
 116

	)

49 
	#CONF_R_VARIABLE_HAS_NO_VALUE
 104

	)

	@/usr/include/openssl/conftypes.h

10 #i‚de‡ 
OPENSSL_CONFTYPES_H


11 
	#OPENSSL_CONFTYPES_H


	)

12 #¥agm®
⁄˚


14 #i‚de‡ 
OPENSSL_CONF_H


15 
	~<›ís¶/c⁄f.h
>

21 
	sc⁄f_mëhod_°
 {

22 c⁄° *
	m«me
;

23 
	mCONF
 *(*
	m¸óã
Ë(
CONF_METHOD
 *
	mmëh
);

24 (*
	möô
Ë(
CONF
 *
	mc⁄f
);

25 (*
	mde°roy
Ë(
CONF
 *
	mc⁄f
);

26 (*
	mde°roy_d©a
Ë(
CONF
 *
	mc⁄f
);

27 (*
	mlﬂd_bio
Ë(
CONF
 *
	mc⁄f
, 
BIO
 *
	mbp
, *
	mñöe
);

28 (*
	mdump
Ë(c⁄° 
CONF
 *
	mc⁄f
, 
BIO
 *
	mbp
);

29 (*
	mis_numbî
Ë(c⁄° 
CONF
 *
	mc⁄f
, 
	mc
);

30 (*
	mto_öt
Ë(c⁄° 
CONF
 *
	mc⁄f
, 
	mc
);

31 (*
	mlﬂd
Ë(
CONF
 *
	mc⁄f
, c⁄° *
	m«me
, *
	mñöe
);

34 
	sc⁄f_°
 {

35 
CONF_METHOD
 *
	mmëh
;

36 *
	mmëh_d©a
;

37 
LHASH_OF
(
CONF_VALUE
Ë*
	md©a
;

38 
	mÊag_dﬁœrid
;

39 
	mÊag_ab•©h
;

40 *
	mö˛udedú
;

41 
OSSL_LIB_CTX
 *
	mlib˘x
;

	@/usr/include/openssl/core.h

10 #i‚de‡
OPENSSL_CORE_H


11 
	#OPENSSL_CORE_H


	)

12 #¥agm®
⁄˚


14 
	~<°ddef.h
>

15 
	~<›ís¶/ty≥s.h
>

17 #ifde‡
__˝lu•lus


30 
os¶_c‹e_h™dÀ_°
 
	tOSSL_CORE_HANDLE
;

31 
›ís¶_c‹e_˘x_°
 
	tOPENSSL_CORE_CTX
;

32 
os¶_c‹e_bio_°
 
	tOSSL_CORE_BIO
;

40 
	sos¶_di•©ch_°
 {

41 
fun˘i⁄_id
;

42 (*
fun˘i⁄
)();

58 
	sos¶_ôem_°
 {

59 
id
;

60 *
±r
;

69 
	sos¶_Æg‹ôhm_°
 {

70 c⁄° *
Æg‹ôhm_«mes
;

71 c⁄° *
¥›îty_deföôi⁄
;

72 c⁄° 
OSSL_DISPATCH
 *
im∂emíèti⁄
;

73 c⁄° *
Æg‹ôhm_des¸ùti⁄
;

82 
	sos¶_∑øm_°
 {

83 c⁄° *
key
;

84 
d©a_ty≥
;

85 *
d©a
;

86 
size_t
 
d©a_size
;

87 
size_t
 
ªtu∫_size
;

103 
	#OSSL_PARAM_INTEGER
 1

	)

104 
	#OSSL_PARAM_UNSIGNED_INTEGER
 2

	)

109 
	#OSSL_PARAM_REAL
 3

	)

114 
	#OSSL_PARAM_UTF8_STRING
 4

	)

120 
	#OSSL_PARAM_OCTET_STRING
 5

	)

138 
	#OSSL_PARAM_UTF8_PTR
 6

	)

157 
	#OSSL_PARAM_OCTET_PTR
 7

	)

169 (*
OSSL_thªad_°›_h™dÀr_‚
)(*
	t¨g
);

190 (
OSSL_¥ovidî_öô_‚
)(c⁄° 
	tOSSL_CORE_HANDLE
 *
	th™dÀ
,

191 c⁄° 
	tOSSL_DISPATCH
 *
	tö
,

192 c⁄° 
	tOSSL_DISPATCH
 **
	tout
,

193 **
	t¥ov˘x
);

194 #ifde‡
__VMS


195 #¥agm®
«mes
 
ßve


196 #¥agm®
«mes
 
uµîˇ£
,
åunˇãd


198 
OPENSSL_EXPORT
 
OSSL_¥ovidî_öô_‚
 
OSSL_¥ovidî_öô
;

199 #ifde‡
__VMS


200 #¥agm®
«mes
 
ª°‹e


216 (
OSSL_CALLBACK
)(c⁄° 
	tOSSL_PARAM
 
	t∑øms
[], *
	t¨g
);

217 (
OSSL_INOUT_CALLBACK
)(c⁄° 
	tOSSL_PARAM
 
	tö_∑øms
[],

218 
	tOSSL_PARAM
 
	tout_∑øms
[], *
	t¨g
);

225 (
OSSL_PASSPHRASE_CALLBACK
)(*
	t∑ss
, 
	tsize_t
 
	t∑ss_size
,

226 
	tsize_t
 *
	t∑ss_Àn
,

227 c⁄° 
	tOSSL_PARAM
 
	t∑øms
[], *
	t¨g
);

229 #ifde‡
__˝lu•lus


	@/usr/include/openssl/core_dispatch.h

10 #i‚de‡
OPENSSL_CORE_NUMBERS_H


11 
	#OPENSSL_CORE_NUMBERS_H


	)

12 #¥agm®
⁄˚


14 
	~<°d¨g.h
>

15 
	~<›ís¶/c‹e.h
>

17 #ifde‡
__˝lu•lus


47 
	#OSSL_CORE_MAKE_FUNC
(
ty≥
,
«me
,
¨gs
) \

48 
	`ty≥
 (
	tOSSL_FUNC_
##
	t«me
##
	t_‚
)
	t¨gs
; \

49 
os¶_unu£d
 
os¶_ölöe
 \

50 
OSSL_FUNC_
##
«me
##
_‚
 *OSSL_FUNC_##
	`«me
(c⁄° 
OSSL_DISPATCH
 *
›f
) \

52  (
OSSL_FUNC_
##
«me
##
_‚
 *)
›f
->
fun˘i⁄
; \

53 }

	)

63 
	#OSSL_FUNC_CORE_GETTABLE_PARAMS
 1

	)

64 
OSSL_CORE_MAKE_FUNC
(c⁄° 
OSSL_PARAM
 *,

65 
c‹e_gëèbÀ_∑øms
,(c⁄° 
OSSL_CORE_HANDLE
 *
¥ov
))

66 
	#OSSL_FUNC_CORE_GET_PARAMS
 2

	)

67 
OSSL_CORE_MAKE_FUNC
(,
c‹e_gë_∑øms
,(c⁄° 
OSSL_CORE_HANDLE
 *
¥ov
,

68 
OSSL_PARAM
 
∑øms
[]))

69 
	#OSSL_FUNC_CORE_THREAD_START
 3

	)

70 
OSSL_CORE_MAKE_FUNC
(,
c‹e_thªad_°¨t
,(c⁄° 
OSSL_CORE_HANDLE
 *
¥ov
,

71 
OSSL_thªad_°›_h™dÀr_‚
 
h™d‚
,

72 *
¨g
))

73 
	#OSSL_FUNC_CORE_GET_LIBCTX
 4

	)

74 
OSSL_CORE_MAKE_FUNC
(
OPENSSL_CORE_CTX
 *,
c‹e_gë_lib˘x
,

75 (c⁄° 
OSSL_CORE_HANDLE
 *
¥ov
))

76 
	#OSSL_FUNC_CORE_NEW_ERROR
 5

	)

77 
OSSL_CORE_MAKE_FUNC
(,
c‹e_√w_îr‹
,(c⁄° 
OSSL_CORE_HANDLE
 *
¥ov
))

78 
	#OSSL_FUNC_CORE_SET_ERROR_DEBUG
 6

	)

79 
OSSL_CORE_MAKE_FUNC
(,
c‹e_£t_îr‹_debug
,

80 (c⁄° 
OSSL_CORE_HANDLE
 *
¥ov
,

81 c⁄° *
fûe
, 
löe
, c⁄° *
func
))

82 
	#OSSL_FUNC_CORE_VSET_ERROR
 7

	)

83 
OSSL_CORE_MAKE_FUNC
(,
c‹e_v£t_îr‹
,

84 (c⁄° 
OSSL_CORE_HANDLE
 *
¥ov
,

85 
uöt32_t
 
ªas⁄
, c⁄° *
fmt
, 
va_li°
 
¨gs
))

86 
	#OSSL_FUNC_CORE_SET_ERROR_MARK
 8

	)

87 
OSSL_CORE_MAKE_FUNC
(, 
c‹e_£t_îr‹_m¨k
, (c⁄° 
OSSL_CORE_HANDLE
 *
¥ov
))

88 
	#OSSL_FUNC_CORE_CLEAR_LAST_ERROR_MARK
 9

	)

89 
OSSL_CORE_MAKE_FUNC
(, 
c‹e_˛ór_œ°_îr‹_m¨k
,

90 (c⁄° 
OSSL_CORE_HANDLE
 *
¥ov
))

91 
	#OSSL_FUNC_CORE_POP_ERROR_TO_MARK
 10

	)

92 
OSSL_CORE_MAKE_FUNC
(, 
c‹e_p›_îr‹_to_m¨k
, (c⁄° 
OSSL_CORE_HANDLE
 *
¥ov
))

97 
	#OSSL_FUNC_CORE_OBJ_ADD_SIGID
 11

	)

98 
	#OSSL_FUNC_CORE_OBJ_CREATE
 12

	)

100 
OSSL_CORE_MAKE_FUNC
(, 
c‹e_obj_add_sigid
,

101 (c⁄° 
OSSL_CORE_HANDLE
 *
¥ov
, c⁄° *
sign_«me
,

102 c⁄° *
dige°_«me
, c⁄° *
pkey_«me
))

103 
OSSL_CORE_MAKE_FUNC
(, 
c‹e_obj_¸óã
,

104 (c⁄° 
OSSL_CORE_HANDLE
 *
¥ov
, c⁄° *
oid
,

105 c⁄° *
¢
, c⁄° *
 
))

108 
	#OSSL_FUNC_CRYPTO_MALLOC
 20

	)

109 
OSSL_CORE_MAKE_FUNC
(*,

110 
CRYPTO_mÆloc
, (
size_t
 
num
, c⁄° *
fûe
, 
löe
))

111 
	#OSSL_FUNC_CRYPTO_ZALLOC
 21

	)

112 
OSSL_CORE_MAKE_FUNC
(*,

113 
CRYPTO_zÆloc
, (
size_t
 
num
, c⁄° *
fûe
, 
löe
))

114 
	#OSSL_FUNC_CRYPTO_FREE
 22

	)

115 
OSSL_CORE_MAKE_FUNC
(,

116 
CRYPTO_‰ì
, (*
±r
, c⁄° *
fûe
, 
löe
))

117 
	#OSSL_FUNC_CRYPTO_CLEAR_FREE
 23

	)

118 
OSSL_CORE_MAKE_FUNC
(,

119 
CRYPTO_˛ór_‰ì
, (*
±r
, 
size_t
 
num
, c⁄° *
fûe
, 
löe
))

120 
	#OSSL_FUNC_CRYPTO_REALLOC
 24

	)

121 
OSSL_CORE_MAKE_FUNC
(*,

122 
CRYPTO_ªÆloc
, (*
addr
, 
size_t
 
num
, c⁄° *
fûe
, 
löe
))

123 
	#OSSL_FUNC_CRYPTO_CLEAR_REALLOC
 25

	)

124 
OSSL_CORE_MAKE_FUNC
(*,

125 
CRYPTO_˛ór_ªÆloc
, (*
addr
, 
size_t
 
ﬁd_num
, size_à
num
,

126 c⁄° *
fûe
, 
löe
))

127 
	#OSSL_FUNC_CRYPTO_SECURE_MALLOC
 26

	)

128 
OSSL_CORE_MAKE_FUNC
(*,

129 
CRYPTO_£cuª_mÆloc
, (
size_t
 
num
, c⁄° *
fûe
, 
löe
))

130 
	#OSSL_FUNC_CRYPTO_SECURE_ZALLOC
 27

	)

131 
OSSL_CORE_MAKE_FUNC
(*,

132 
CRYPTO_£cuª_zÆloc
, (
size_t
 
num
, c⁄° *
fûe
, 
löe
))

133 
	#OSSL_FUNC_CRYPTO_SECURE_FREE
 28

	)

134 
OSSL_CORE_MAKE_FUNC
(,

135 
CRYPTO_£cuª_‰ì
, (*
±r
, c⁄° *
fûe
, 
löe
))

136 
	#OSSL_FUNC_CRYPTO_SECURE_CLEAR_FREE
 29

	)

137 
OSSL_CORE_MAKE_FUNC
(,

138 
CRYPTO_£cuª_˛ór_‰ì
, (*
±r
, 
size_t
 
num
, c⁄° *
fûe
,

139 
löe
))

140 
	#OSSL_FUNC_CRYPTO_SECURE_ALLOCATED
 30

	)

141 
OSSL_CORE_MAKE_FUNC
(,

142 
CRYPTO_£cuª_Æloˇãd
, (c⁄° *
±r
))

143 
	#OSSL_FUNC_OPENSSL_CLEANSE
 31

	)

144 
OSSL_CORE_MAKE_FUNC
(,

145 
OPENSSL_˛ón£
, (*
±r
, 
size_t
 
Àn
))

148 
	#OSSL_FUNC_BIO_NEW_FILE
 40

	)

149 
	#OSSL_FUNC_BIO_NEW_MEMBUF
 41

	)

150 
	#OSSL_FUNC_BIO_READ_EX
 42

	)

151 
	#OSSL_FUNC_BIO_WRITE_EX
 43

	)

152 
	#OSSL_FUNC_BIO_UP_REF
 44

	)

153 
	#OSSL_FUNC_BIO_FREE
 45

	)

154 
	#OSSL_FUNC_BIO_VPRINTF
 46

	)

155 
	#OSSL_FUNC_BIO_VSNPRINTF
 47

	)

156 
	#OSSL_FUNC_BIO_PUTS
 48

	)

157 
	#OSSL_FUNC_BIO_GETS
 49

	)

158 
	#OSSL_FUNC_BIO_CTRL
 50

	)

161 
OSSL_CORE_MAKE_FUNC
(
OSSL_CORE_BIO
 *, 
BIO_√w_fûe
, (c⁄° *
fûíame
,

162 c⁄° *
mode
))

163 
OSSL_CORE_MAKE_FUNC
(
OSSL_CORE_BIO
 *, 
BIO_√w_membuf
, (c⁄° *
buf
, 
Àn
))

164 
OSSL_CORE_MAKE_FUNC
(, 
BIO_ªad_ex
, (
OSSL_CORE_BIO
 *
bio
, *
d©a
,

165 
size_t
 
d©a_Àn
, size_à*
byãs_ªad
))

166 
OSSL_CORE_MAKE_FUNC
(, 
BIO_wrôe_ex
, (
OSSL_CORE_BIO
 *
bio
, c⁄° *
d©a
,

167 
size_t
 
d©a_Àn
, size_à*
wrôãn
))

168 
OSSL_CORE_MAKE_FUNC
(, 
BIO_gës
, (
OSSL_CORE_BIO
 *
bio
, *
buf
, 
size
))

169 
OSSL_CORE_MAKE_FUNC
(, 
BIO_puts
, (
OSSL_CORE_BIO
 *
bio
, c⁄° *
°r
))

170 
OSSL_CORE_MAKE_FUNC
(, 
BIO_up_ªf
, (
OSSL_CORE_BIO
 *
bio
))

171 
OSSL_CORE_MAKE_FUNC
(, 
BIO_‰ì
, (
OSSL_CORE_BIO
 *
bio
))

172 
OSSL_CORE_MAKE_FUNC
(, 
BIO_v¥ötf
, (
OSSL_CORE_BIO
 *
bio
, c⁄° *
f‹m©
,

173 
va_li°
 
¨gs
))

174 
OSSL_CORE_MAKE_FUNC
(, 
BIO_v¢¥ötf
,

175 (*
buf
, 
size_t
 
n
, c⁄° *
fmt
, 
va_li°
 
¨gs
))

176 
OSSL_CORE_MAKE_FUNC
(, 
BIO_˘æ
, (
OSSL_CORE_BIO
 *
bio
,

177 
cmd
, 
num
, *
±r
))

179 
	#OSSL_FUNC_SELF_TEST_CB
 100

	)

180 
OSSL_CORE_MAKE_FUNC
(, 
£lf_ã°_cb
, (
OPENSSL_CORE_CTX
 *
˘x
, 
OSSL_CALLBACK
 **
cb
,

181 **
cb¨g
))

184 
	#OSSL_FUNC_GET_ENTROPY
 101

	)

185 
	#OSSL_FUNC_CLEANUP_ENTROPY
 102

	)

186 
	#OSSL_FUNC_GET_NONCE
 103

	)

187 
	#OSSL_FUNC_CLEANUP_NONCE
 104

	)

188 
OSSL_CORE_MAKE_FUNC
(
size_t
, 
gë_íå›y
, (c⁄° 
OSSL_CORE_HANDLE
 *
h™dÀ
,

189 **
pout
, 
íå›y
,

190 
size_t
 
mö_Àn
, size_à
max_Àn
))

191 
OSSL_CORE_MAKE_FUNC
(, 
˛ónup_íå›y
, (c⁄° 
OSSL_CORE_HANDLE
 *
h™dÀ
,

192 *
buf
, 
size_t
 
Àn
))

193 
OSSL_CORE_MAKE_FUNC
(
size_t
, 
gë_n⁄˚
, (c⁄° 
OSSL_CORE_HANDLE
 *
h™dÀ
,

194 **
pout
, 
size_t
 
mö_Àn
,

195 
size_t
 
max_Àn
, c⁄° *
ß…
,

196 
size_t
 
ß…_Àn
))

197 
OSSL_CORE_MAKE_FUNC
(, 
˛ónup_n⁄˚
, (c⁄° 
OSSL_CORE_HANDLE
 *
h™dÀ
,

198 *
buf
, 
size_t
 
Àn
))

201 
	#OSSL_FUNC_PROVIDER_REGISTER_CHILD_CB
 105

	)

202 
	#OSSL_FUNC_PROVIDER_DEREGISTER_CHILD_CB
 106

	)

203 
	#OSSL_FUNC_PROVIDER_NAME
 107

	)

204 
	#OSSL_FUNC_PROVIDER_GET0_PROVIDER_CTX
 108

	)

205 
	#OSSL_FUNC_PROVIDER_GET0_DISPATCH
 109

	)

206 
	#OSSL_FUNC_PROVIDER_UP_REF
 110

	)

207 
	#OSSL_FUNC_PROVIDER_FREE
 111

	)

209 
OSSL_CORE_MAKE_FUNC
(, 
¥ovidî_ªgi°î_chûd_cb
,

210 (c⁄° 
OSSL_CORE_HANDLE
 *
h™dÀ
,

211 (*
¸óã_cb
)(c⁄° 
OSSL_CORE_HANDLE
 *
¥ovidî
, *
cbd©a
),

212 (*
ªmove_cb
)(c⁄° 
OSSL_CORE_HANDLE
 *
¥ovidî
, *
cbd©a
),

213 (*
globÆ_¥›s_cb
)(c⁄° *
¥›s
, *
cbd©a
),

214 *
cbd©a
))

215 
OSSL_CORE_MAKE_FUNC
(, 
¥ovidî_dîegi°î_chûd_cb
,

216 (c⁄° 
OSSL_CORE_HANDLE
 *
h™dÀ
))

217 
OSSL_CORE_MAKE_FUNC
(c⁄° *, 
¥ovidî_«me
,

218 (c⁄° 
OSSL_CORE_HANDLE
 *
¥ov
))

219 
OSSL_CORE_MAKE_FUNC
(*, 
¥ovidî_gë0_¥ovidî_˘x
,

220 (c⁄° 
OSSL_CORE_HANDLE
 *
¥ov
))

221 
OSSL_CORE_MAKE_FUNC
(c⁄° 
OSSL_DISPATCH
 *, 
¥ovidî_gë0_di•©ch
,

222 (c⁄° 
OSSL_CORE_HANDLE
 *
¥ov
))

223 
OSSL_CORE_MAKE_FUNC
(, 
¥ovidî_up_ªf
,

224 (c⁄° 
OSSL_CORE_HANDLE
 *
¥ov
, 
a˘iv©e
))

225 
OSSL_CORE_MAKE_FUNC
(, 
¥ovidî_‰ì
,

226 (c⁄° 
OSSL_CORE_HANDLE
 *
¥ov
, 
dó˘iv©e
))

229 
	#OSSL_FUNC_PROVIDER_TEARDOWN
 1024

	)

230 
OSSL_CORE_MAKE_FUNC
(,
¥ovidî_ã¨down
,(*
¥ov˘x
))

231 
	#OSSL_FUNC_PROVIDER_GETTABLE_PARAMS
 1025

	)

232 
OSSL_CORE_MAKE_FUNC
(c⁄° 
OSSL_PARAM
 *,

233 
¥ovidî_gëèbÀ_∑øms
,(*
¥ov˘x
))

234 
	#OSSL_FUNC_PROVIDER_GET_PARAMS
 1026

	)

235 
OSSL_CORE_MAKE_FUNC
(,
¥ovidî_gë_∑øms
,(*
¥ov˘x
,

236 
OSSL_PARAM
 
∑øms
[]))

237 
	#OSSL_FUNC_PROVIDER_QUERY_OPERATION
 1027

	)

238 
OSSL_CORE_MAKE_FUNC
(c⁄° 
OSSL_ALGORITHM
 *,
¥ovidî_quîy_›î©i⁄
,

239 (*
¥ov˘x
, 
›î©i⁄_id
, *
no_°‹e
))

240 
	#OSSL_FUNC_PROVIDER_UNQUERY_OPERATION
 1028

	)

241 
OSSL_CORE_MAKE_FUNC
(, 
¥ovidî_unquîy_›î©i⁄
,

242 (*
¥ov˘x
, 
›î©i⁄_id
, c⁄° 
OSSL_ALGORITHM
 *))

243 
	#OSSL_FUNC_PROVIDER_GET_REASON_STRINGS
 1029

	)

244 
OSSL_CORE_MAKE_FUNC
(c⁄° 
OSSL_ITEM
 *,
¥ovidî_gë_ªas⁄_°rögs
,

245 (*
¥ov˘x
))

246 
	#OSSL_FUNC_PROVIDER_GET_CAPABILITIES
 1030

	)

247 
OSSL_CORE_MAKE_FUNC
(, 
¥ovidî_gë_ˇ∑bûôõs
, (*
¥ov˘x
,

248 c⁄° *
ˇ∑bûôy
, 
OSSL_CALLBACK
 *
cb
, *
¨g
))

249 
	#OSSL_FUNC_PROVIDER_SELF_TEST
 1031

	)

250 
OSSL_CORE_MAKE_FUNC
(, 
¥ovidî_£lf_ã°
, (*
¥ov˘x
))

254 
	#OSSL_OP_DIGEST
 1

	)

255 
	#OSSL_OP_CIPHER
 2

	)

256 
	#OSSL_OP_MAC
 3

	)

257 
	#OSSL_OP_KDF
 4

	)

258 
	#OSSL_OP_RAND
 5

	)

259 
	#OSSL_OP_KEYMGMT
 10

	)

260 
	#OSSL_OP_KEYEXCH
 11

	)

261 
	#OSSL_OP_SIGNATURE
 12

	)

262 
	#OSSL_OP_ASYM_CIPHER
 13

	)

263 
	#OSSL_OP_KEM
 14

	)

265 
	#OSSL_OP_ENCODER
 20

	)

266 
	#OSSL_OP_DECODER
 21

	)

267 
	#OSSL_OP_STORE
 22

	)

269 
	#OSSL_OP__HIGHEST
 22

	)

273 
	#OSSL_FUNC_DIGEST_NEWCTX
 1

	)

274 
	#OSSL_FUNC_DIGEST_INIT
 2

	)

275 
	#OSSL_FUNC_DIGEST_UPDATE
 3

	)

276 
	#OSSL_FUNC_DIGEST_FINAL
 4

	)

277 
	#OSSL_FUNC_DIGEST_DIGEST
 5

	)

278 
	#OSSL_FUNC_DIGEST_FREECTX
 6

	)

279 
	#OSSL_FUNC_DIGEST_DUPCTX
 7

	)

280 
	#OSSL_FUNC_DIGEST_GET_PARAMS
 8

	)

281 
	#OSSL_FUNC_DIGEST_SET_CTX_PARAMS
 9

	)

282 
	#OSSL_FUNC_DIGEST_GET_CTX_PARAMS
 10

	)

283 
	#OSSL_FUNC_DIGEST_GETTABLE_PARAMS
 11

	)

284 
	#OSSL_FUNC_DIGEST_SETTABLE_CTX_PARAMS
 12

	)

285 
	#OSSL_FUNC_DIGEST_GETTABLE_CTX_PARAMS
 13

	)

287 
OSSL_CORE_MAKE_FUNC
(*, 
dige°_√w˘x
, (*
¥ov˘x
))

288 
OSSL_CORE_MAKE_FUNC
(, 
dige°_öô
, (*
d˘x
, c⁄° 
OSSL_PARAM
 
∑øms
[]))

289 
OSSL_CORE_MAKE_FUNC
(, 
dige°_upd©e
,

290 (*
d˘x
, c⁄° *
ö
, 
size_t
 
öl
))

291 
OSSL_CORE_MAKE_FUNC
(, 
dige°_föÆ
,

292 (*
d˘x
,

293 *
out
, 
size_t
 *
oué
, size_à
outsz
))

294 
OSSL_CORE_MAKE_FUNC
(, 
dige°_dige°
,

295 (*
¥ov˘x
, c⁄° *
ö
, 
size_t
 
öl
,

296 *
out
, 
size_t
 *
oué
, size_à
outsz
))

298 
OSSL_CORE_MAKE_FUNC
(, 
dige°_‰ì˘x
, (*
d˘x
))

299 
OSSL_CORE_MAKE_FUNC
(*, 
dige°_dup˘x
, (*
d˘x
))

301 
OSSL_CORE_MAKE_FUNC
(, 
dige°_gë_∑øms
, (
OSSL_PARAM
 
∑øms
[]))

302 
OSSL_CORE_MAKE_FUNC
(, 
dige°_£t_˘x_∑øms
,

303 (*
v˘x
, c⁄° 
OSSL_PARAM
 
∑øms
[]))

304 
OSSL_CORE_MAKE_FUNC
(, 
dige°_gë_˘x_∑øms
,

305 (*
v˘x
, 
OSSL_PARAM
 
∑øms
[]))

306 
OSSL_CORE_MAKE_FUNC
(c⁄° 
OSSL_PARAM
 *, 
dige°_gëèbÀ_∑øms
,

307 (*
¥ov˘x
))

308 
OSSL_CORE_MAKE_FUNC
(c⁄° 
OSSL_PARAM
 *, 
dige°_£âabÀ_˘x_∑øms
,

309 (*
d˘x
, *
¥ov˘x
))

310 
OSSL_CORE_MAKE_FUNC
(c⁄° 
OSSL_PARAM
 *, 
dige°_gëèbÀ_˘x_∑øms
,

311 (*
d˘x
, *
¥ov˘x
))

315 
	#OSSL_FUNC_CIPHER_NEWCTX
 1

	)

316 
	#OSSL_FUNC_CIPHER_ENCRYPT_INIT
 2

	)

317 
	#OSSL_FUNC_CIPHER_DECRYPT_INIT
 3

	)

318 
	#OSSL_FUNC_CIPHER_UPDATE
 4

	)

319 
	#OSSL_FUNC_CIPHER_FINAL
 5

	)

320 
	#OSSL_FUNC_CIPHER_CIPHER
 6

	)

321 
	#OSSL_FUNC_CIPHER_FREECTX
 7

	)

322 
	#OSSL_FUNC_CIPHER_DUPCTX
 8

	)

323 
	#OSSL_FUNC_CIPHER_GET_PARAMS
 9

	)

324 
	#OSSL_FUNC_CIPHER_GET_CTX_PARAMS
 10

	)

325 
	#OSSL_FUNC_CIPHER_SET_CTX_PARAMS
 11

	)

326 
	#OSSL_FUNC_CIPHER_GETTABLE_PARAMS
 12

	)

327 
	#OSSL_FUNC_CIPHER_GETTABLE_CTX_PARAMS
 13

	)

328 
	#OSSL_FUNC_CIPHER_SETTABLE_CTX_PARAMS
 14

	)

330 
OSSL_CORE_MAKE_FUNC
(*, 
cùhî_√w˘x
, (*
¥ov˘x
))

331 
OSSL_CORE_MAKE_FUNC
(, 
cùhî_í¸y±_öô
, (*
c˘x
,

332 c⁄° *
key
,

333 
size_t
 
keyÀn
,

334 c⁄° *
iv
,

335 
size_t
 
ivÀn
,

336 c⁄° 
OSSL_PARAM
 
∑øms
[]))

337 
OSSL_CORE_MAKE_FUNC
(, 
cùhî_de¸y±_öô
, (*
c˘x
,

338 c⁄° *
key
,

339 
size_t
 
keyÀn
,

340 c⁄° *
iv
,

341 
size_t
 
ivÀn
,

342 c⁄° 
OSSL_PARAM
 
∑øms
[]))

343 
OSSL_CORE_MAKE_FUNC
(, 
cùhî_upd©e
,

344 (*
c˘x
,

345 *
out
, 
size_t
 *
oué
, size_à
outsize
,

346 c⁄° *
ö
, 
size_t
 
öl
))

347 
OSSL_CORE_MAKE_FUNC
(, 
cùhî_föÆ
,

348 (*
c˘x
,

349 *
out
, 
size_t
 *
oué
, size_à
outsize
))

350 
OSSL_CORE_MAKE_FUNC
(, 
cùhî_cùhî
,

351 (*
c˘x
,

352 *
out
, 
size_t
 *
oué
, size_à
outsize
,

353 c⁄° *
ö
, 
size_t
 
öl
))

354 
OSSL_CORE_MAKE_FUNC
(, 
cùhî_‰ì˘x
, (*
c˘x
))

355 
OSSL_CORE_MAKE_FUNC
(*, 
cùhî_dup˘x
, (*
c˘x
))

356 
OSSL_CORE_MAKE_FUNC
(, 
cùhî_gë_∑øms
, (
OSSL_PARAM
 
∑øms
[]))

357 
OSSL_CORE_MAKE_FUNC
(, 
cùhî_gë_˘x_∑øms
, (*
c˘x
,

358 
OSSL_PARAM
 
∑øms
[]))

359 
OSSL_CORE_MAKE_FUNC
(, 
cùhî_£t_˘x_∑øms
, (*
c˘x
,

360 c⁄° 
OSSL_PARAM
 
∑øms
[]))

361 
OSSL_CORE_MAKE_FUNC
(c⁄° 
OSSL_PARAM
 *, 
cùhî_gëèbÀ_∑øms
,

362 (*
¥ov˘x
))

363 
OSSL_CORE_MAKE_FUNC
(c⁄° 
OSSL_PARAM
 *, 
cùhî_£âabÀ_˘x_∑øms
,

364 (*
c˘x
, *
¥ov˘x
))

365 
OSSL_CORE_MAKE_FUNC
(c⁄° 
OSSL_PARAM
 *, 
cùhî_gëèbÀ_˘x_∑øms
,

366 (*
c˘x
, *
¥ov˘x
))

370 
	#OSSL_FUNC_MAC_NEWCTX
 1

	)

371 
	#OSSL_FUNC_MAC_DUPCTX
 2

	)

372 
	#OSSL_FUNC_MAC_FREECTX
 3

	)

373 
	#OSSL_FUNC_MAC_INIT
 4

	)

374 
	#OSSL_FUNC_MAC_UPDATE
 5

	)

375 
	#OSSL_FUNC_MAC_FINAL
 6

	)

376 
	#OSSL_FUNC_MAC_GET_PARAMS
 7

	)

377 
	#OSSL_FUNC_MAC_GET_CTX_PARAMS
 8

	)

378 
	#OSSL_FUNC_MAC_SET_CTX_PARAMS
 9

	)

379 
	#OSSL_FUNC_MAC_GETTABLE_PARAMS
 10

	)

380 
	#OSSL_FUNC_MAC_GETTABLE_CTX_PARAMS
 11

	)

381 
	#OSSL_FUNC_MAC_SETTABLE_CTX_PARAMS
 12

	)

383 
OSSL_CORE_MAKE_FUNC
(*, 
mac_√w˘x
, (*
¥ov˘x
))

384 
OSSL_CORE_MAKE_FUNC
(*, 
mac_dup˘x
, (*
§c
))

385 
OSSL_CORE_MAKE_FUNC
(, 
mac_‰ì˘x
, (*
m˘x
))

386 
OSSL_CORE_MAKE_FUNC
(, 
mac_öô
, (*
m˘x
, c⁄° *
key
,

387 
size_t
 
keyÀn
, c⁄° 
OSSL_PARAM
 
∑øms
[]))

388 
OSSL_CORE_MAKE_FUNC
(, 
mac_upd©e
,

389 (*
m˘x
, c⁄° *
ö
, 
size_t
 
öl
))

390 
OSSL_CORE_MAKE_FUNC
(, 
mac_föÆ
,

391 (*
m˘x
,

392 *
out
, 
size_t
 *
oué
, size_à
outsize
))

393 
OSSL_CORE_MAKE_FUNC
(c⁄° 
OSSL_PARAM
 *, 
mac_gëèbÀ_∑øms
, (*
¥ov˘x
))

394 
OSSL_CORE_MAKE_FUNC
(c⁄° 
OSSL_PARAM
 *, 
mac_gëèbÀ_˘x_∑øms
,

395 (*
m˘x
, *
¥ov˘x
))

396 
OSSL_CORE_MAKE_FUNC
(c⁄° 
OSSL_PARAM
 *, 
mac_£âabÀ_˘x_∑øms
,

397 (*
m˘x
, *
¥ov˘x
))

398 
OSSL_CORE_MAKE_FUNC
(, 
mac_gë_∑øms
, (
OSSL_PARAM
 
∑øms
[]))

399 
OSSL_CORE_MAKE_FUNC
(, 
mac_gë_˘x_∑øms
,

400 (*
m˘x
, 
OSSL_PARAM
 
∑øms
[]))

401 
OSSL_CORE_MAKE_FUNC
(, 
mac_£t_˘x_∑øms
,

402 (*
m˘x
, c⁄° 
OSSL_PARAM
 
∑øms
[]))

406 
	#OSSL_FUNC_KDF_NEWCTX
 1

	)

407 
	#OSSL_FUNC_KDF_DUPCTX
 2

	)

408 
	#OSSL_FUNC_KDF_FREECTX
 3

	)

409 
	#OSSL_FUNC_KDF_RESET
 4

	)

410 
	#OSSL_FUNC_KDF_DERIVE
 5

	)

411 
	#OSSL_FUNC_KDF_GETTABLE_PARAMS
 6

	)

412 
	#OSSL_FUNC_KDF_GETTABLE_CTX_PARAMS
 7

	)

413 
	#OSSL_FUNC_KDF_SETTABLE_CTX_PARAMS
 8

	)

414 
	#OSSL_FUNC_KDF_GET_PARAMS
 9

	)

415 
	#OSSL_FUNC_KDF_GET_CTX_PARAMS
 10

	)

416 
	#OSSL_FUNC_KDF_SET_CTX_PARAMS
 11

	)

418 
OSSL_CORE_MAKE_FUNC
(*, 
kdf_√w˘x
, (*
¥ov˘x
))

419 
OSSL_CORE_MAKE_FUNC
(*, 
kdf_dup˘x
, (*
§c
))

420 
OSSL_CORE_MAKE_FUNC
(, 
kdf_‰ì˘x
, (*
k˘x
))

421 
OSSL_CORE_MAKE_FUNC
(, 
kdf_ª£t
, (*
k˘x
))

422 
OSSL_CORE_MAKE_FUNC
(, 
kdf_dîive
, (*
k˘x
, *
key
,

423 
size_t
 
keyÀn
, c⁄° 
OSSL_PARAM
 
∑øms
[]))

424 
OSSL_CORE_MAKE_FUNC
(c⁄° 
OSSL_PARAM
 *, 
kdf_gëèbÀ_∑øms
, (*
¥ov˘x
))

425 
OSSL_CORE_MAKE_FUNC
(c⁄° 
OSSL_PARAM
 *, 
kdf_gëèbÀ_˘x_∑øms
,

426 (*
k˘x
, *
¥ov˘x
))

427 
OSSL_CORE_MAKE_FUNC
(c⁄° 
OSSL_PARAM
 *, 
kdf_£âabÀ_˘x_∑øms
,

428 (*
k˘x
, *
¥ov˘x
))

429 
OSSL_CORE_MAKE_FUNC
(, 
kdf_gë_∑øms
, (
OSSL_PARAM
 
∑øms
[]))

430 
OSSL_CORE_MAKE_FUNC
(, 
kdf_gë_˘x_∑øms
,

431 (*
k˘x
, 
OSSL_PARAM
 
∑øms
[]))

432 
OSSL_CORE_MAKE_FUNC
(, 
kdf_£t_˘x_∑øms
,

433 (*
k˘x
, c⁄° 
OSSL_PARAM
 
∑øms
[]))

437 
	#OSSL_FUNC_RAND_NEWCTX
 1

	)

438 
	#OSSL_FUNC_RAND_FREECTX
 2

	)

439 
	#OSSL_FUNC_RAND_INSTANTIATE
 3

	)

440 
	#OSSL_FUNC_RAND_UNINSTANTIATE
 4

	)

441 
	#OSSL_FUNC_RAND_GENERATE
 5

	)

442 
	#OSSL_FUNC_RAND_RESEED
 6

	)

443 
	#OSSL_FUNC_RAND_NONCE
 7

	)

444 
	#OSSL_FUNC_RAND_ENABLE_LOCKING
 8

	)

445 
	#OSSL_FUNC_RAND_LOCK
 9

	)

446 
	#OSSL_FUNC_RAND_UNLOCK
 10

	)

447 
	#OSSL_FUNC_RAND_GETTABLE_PARAMS
 11

	)

448 
	#OSSL_FUNC_RAND_GETTABLE_CTX_PARAMS
 12

	)

449 
	#OSSL_FUNC_RAND_SETTABLE_CTX_PARAMS
 13

	)

450 
	#OSSL_FUNC_RAND_GET_PARAMS
 14

	)

451 
	#OSSL_FUNC_RAND_GET_CTX_PARAMS
 15

	)

452 
	#OSSL_FUNC_RAND_SET_CTX_PARAMS
 16

	)

453 
	#OSSL_FUNC_RAND_VERIFY_ZEROIZATION
 17

	)

454 
	#OSSL_FUNC_RAND_GET_SEED
 18

	)

455 
	#OSSL_FUNC_RAND_CLEAR_SEED
 19

	)

457 
OSSL_CORE_MAKE_FUNC
(*,
ønd_√w˘x
,

458 (*
¥ov˘x
, *
∑ª¡
,

459 c⁄° 
OSSL_DISPATCH
 *
∑ª¡_ˇŒs
))

460 
OSSL_CORE_MAKE_FUNC
(,
ønd_‰ì˘x
, (*
v˘x
))

461 
OSSL_CORE_MAKE_FUNC
(,
ønd_ö°™tüã
,

462 (*
vdrbg
, 
°ªngth
,

463 
¥edi˘i⁄_ªsi°™˚
,

464 c⁄° *
p°r
, 
size_t
 
p°r_Àn
,

465 c⁄° 
OSSL_PARAM
 
∑øms
[]))

466 
OSSL_CORE_MAKE_FUNC
(,
ønd_unö°™tüã
, (*
vdrbg
))

467 
OSSL_CORE_MAKE_FUNC
(,
ønd_gíî©e
,

468 (*
v˘x
, *
out
, 
size_t
 
ouéí
,

469 
°ªngth
, 
¥edi˘i⁄_ªsi°™˚
,

470 c⁄° *
addö
, 
size_t
 
addö_Àn
))

471 
OSSL_CORE_MAKE_FUNC
(,
ønd_ª£ed
,

472 (*
v˘x
, 
¥edi˘i⁄_ªsi°™˚
,

473 c⁄° *
ít
, 
size_t
 
ít_Àn
,

474 c⁄° *
addö
, 
size_t
 
addö_Àn
))

475 
OSSL_CORE_MAKE_FUNC
(
size_t
,
ønd_n⁄˚
,

476 (*
v˘x
, *
out
, 
°ªngth
,

477 
size_t
 
mö_n⁄˚Àn
, size_à
max_n⁄˚Àn
))

478 
OSSL_CORE_MAKE_FUNC
(,
ønd_íabÀ_lockög
, (*
v˘x
))

479 
OSSL_CORE_MAKE_FUNC
(,
ønd_lock
, (*
v˘x
))

480 
OSSL_CORE_MAKE_FUNC
(,
ønd_u∆ock
, (*
v˘x
))

481 
OSSL_CORE_MAKE_FUNC
(c⁄° 
OSSL_PARAM
 *,
ønd_gëèbÀ_∑øms
, (*
¥ov˘x
))

482 
OSSL_CORE_MAKE_FUNC
(c⁄° 
OSSL_PARAM
 *,
ønd_gëèbÀ_˘x_∑øms
,

483 (*
v˘x
, *
¥ov˘x
))

484 
OSSL_CORE_MAKE_FUNC
(c⁄° 
OSSL_PARAM
 *,
ønd_£âabÀ_˘x_∑øms
,

485 (*
v˘x
, *
¥ov˘x
))

486 
OSSL_CORE_MAKE_FUNC
(,
ønd_gë_∑øms
, (
OSSL_PARAM
 
∑øms
[]))

487 
OSSL_CORE_MAKE_FUNC
(,
ønd_gë_˘x_∑øms
,

488 (*
v˘x
, 
OSSL_PARAM
 
∑øms
[]))

489 
OSSL_CORE_MAKE_FUNC
(,
ønd_£t_˘x_∑øms
,

490 (*
v˘x
, c⁄° 
OSSL_PARAM
 
∑øms
[]))

491 
OSSL_CORE_MAKE_FUNC
(,
ønd_£t_ˇŒbacks
,

492 (*
v˘x
, 
OSSL_INOUT_CALLBACK
 *
gë_íå›y
,

493 
OSSL_CALLBACK
 *
˛ónup_íå›y
,

494 
OSSL_INOUT_CALLBACK
 *
gë_n⁄˚
,

495 
OSSL_CALLBACK
 *
˛ónup_n⁄˚
, *
¨g
))

496 
OSSL_CORE_MAKE_FUNC
(,
ønd_vîify_zîoiz©i⁄
,

497 (*
v˘x
))

498 
OSSL_CORE_MAKE_FUNC
(
size_t
,
ønd_gë_£ed
,

499 (*
v˘x
, **
buf„r
,

500 
íå›y
, 
size_t
 
mö_Àn
, size_à
max_Àn
,

501 
¥edi˘i⁄_ªsi°™˚
,

502 c⁄° *
adö
, 
size_t
 
adö_Àn
))

503 
OSSL_CORE_MAKE_FUNC
(,
ønd_˛ór_£ed
,

504 (*
v˘x
, *
buf„r
, 
size_t
 
b_Àn
))

542 
	#OSSL_KEYMGMT_SELECT_PRIVATE_KEY
 0x01

	)

543 
	#OSSL_KEYMGMT_SELECT_PUBLIC_KEY
 0x02

	)

544 
	#OSSL_KEYMGMT_SELECT_DOMAIN_PARAMETERS
 0x04

	)

545 
	#OSSL_KEYMGMT_SELECT_OTHER_PARAMETERS
 0x80

	)

548 
	#OSSL_KEYMGMT_SELECT_ALL_PARAMETERS
 \

549 –
OSSL_KEYMGMT_SELECT_DOMAIN_PARAMETERS
 \

550 | 
OSSL_KEYMGMT_SELECT_OTHER_PARAMETERS
)

	)

551 
	#OSSL_KEYMGMT_SELECT_KEYPAIR
 \

552 –
OSSL_KEYMGMT_SELECT_PRIVATE_KEY
 | 
OSSL_KEYMGMT_SELECT_PUBLIC_KEY
 )

	)

553 
	#OSSL_KEYMGMT_SELECT_ALL
 \

554 –
OSSL_KEYMGMT_SELECT_KEYPAIR
 | 
OSSL_KEYMGMT_SELECT_ALL_PARAMETERS
 )

	)

556 
	#OSSL_KEYMGMT_VALIDATE_FULL_CHECK
 0

	)

557 
	#OSSL_KEYMGMT_VALIDATE_QUICK_CHECK
 1

	)

560 
	#OSSL_FUNC_KEYMGMT_NEW
 1

	)

561 
OSSL_CORE_MAKE_FUNC
(*, 
keymgmt_√w
, (*
¥ov˘x
))

564 
	#OSSL_FUNC_KEYMGMT_GEN_INIT
 2

	)

565 
	#OSSL_FUNC_KEYMGMT_GEN_SET_TEMPLATE
 3

	)

566 
	#OSSL_FUNC_KEYMGMT_GEN_SET_PARAMS
 4

	)

567 
	#OSSL_FUNC_KEYMGMT_GEN_SETTABLE_PARAMS
 5

	)

568 
	#OSSL_FUNC_KEYMGMT_GEN
 6

	)

569 
	#OSSL_FUNC_KEYMGMT_GEN_CLEANUP
 7

	)

570 
OSSL_CORE_MAKE_FUNC
(*, 
keymgmt_gí_öô
,

571 (*
¥ov˘x
, 
£À˘i⁄
, c⁄° 
OSSL_PARAM
 
∑øms
[]))

572 
OSSL_CORE_MAKE_FUNC
(, 
keymgmt_gí_£t_ãm∂©e
,

573 (*
gí˘x
, *
ãm∂
))

574 
OSSL_CORE_MAKE_FUNC
(, 
keymgmt_gí_£t_∑øms
,

575 (*
gí˘x
, c⁄° 
OSSL_PARAM
 
∑øms
[]))

576 
OSSL_CORE_MAKE_FUNC
(c⁄° 
OSSL_PARAM
 *,

577 
keymgmt_gí_£âabÀ_∑øms
,

578 (*
gí˘x
, *
¥ov˘x
))

579 
OSSL_CORE_MAKE_FUNC
(*, 
keymgmt_gí
,

580 (*
gí˘x
, 
OSSL_CALLBACK
 *
cb
, *
cb¨g
))

581 
OSSL_CORE_MAKE_FUNC
(, 
keymgmt_gí_˛ónup
, (*
gí˘x
))

584 
	#OSSL_FUNC_KEYMGMT_LOAD
 8

	)

585 
OSSL_CORE_MAKE_FUNC
(*, 
keymgmt_lﬂd
,

586 (c⁄° *
ª„ªn˚
, 
size_t
 
ª„ªn˚_sz
))

589 
	#OSSL_FUNC_KEYMGMT_FREE
 10

	)

590 
OSSL_CORE_MAKE_FUNC
(, 
keymgmt_‰ì
, (*
keyd©a
))

593 
	#OSSL_FUNC_KEYMGMT_GET_PARAMS
 11

	)

594 
	#OSSL_FUNC_KEYMGMT_GETTABLE_PARAMS
 12

	)

595 
OSSL_CORE_MAKE_FUNC
(, 
keymgmt_gë_∑øms
,

596 (*
keyd©a
, 
OSSL_PARAM
 
∑øms
[]))

597 
OSSL_CORE_MAKE_FUNC
(c⁄° 
OSSL_PARAM
 *, 
keymgmt_gëèbÀ_∑øms
,

598 (*
¥ov˘x
))

600 
	#OSSL_FUNC_KEYMGMT_SET_PARAMS
 13

	)

601 
	#OSSL_FUNC_KEYMGMT_SETTABLE_PARAMS
 14

	)

602 
OSSL_CORE_MAKE_FUNC
(, 
keymgmt_£t_∑øms
,

603 (*
keyd©a
, c⁄° 
OSSL_PARAM
 
∑øms
[]))

604 
OSSL_CORE_MAKE_FUNC
(c⁄° 
OSSL_PARAM
 *, 
keymgmt_£âabÀ_∑øms
,

605 (*
¥ov˘x
))

608 
	#OSSL_FUNC_KEYMGMT_QUERY_OPERATION_NAME
 20

	)

609 
OSSL_CORE_MAKE_FUNC
(c⁄° *, 
keymgmt_quîy_›î©i⁄_«me
,

610 (
›î©i⁄_id
))

613 
	#OSSL_FUNC_KEYMGMT_HAS
 21

	)

614 
OSSL_CORE_MAKE_FUNC
(, 
keymgmt_has
, (c⁄° *
keyd©a
, 
£À˘i⁄
))

617 
	#OSSL_FUNC_KEYMGMT_VALIDATE
 22

	)

618 
OSSL_CORE_MAKE_FUNC
(, 
keymgmt_vÆid©e
, (c⁄° *
keyd©a
, 
£À˘i⁄
,

619 
checkty≥
))

622 
	#OSSL_FUNC_KEYMGMT_MATCH
 23

	)

623 
OSSL_CORE_MAKE_FUNC
(, 
keymgmt_m©ch
,

624 (c⁄° *
keyd©a1
, c⁄° *
keyd©a2
,

625 
£À˘i⁄
))

628 
	#OSSL_FUNC_KEYMGMT_IMPORT
 40

	)

629 
	#OSSL_FUNC_KEYMGMT_IMPORT_TYPES
 41

	)

630 
	#OSSL_FUNC_KEYMGMT_EXPORT
 42

	)

631 
	#OSSL_FUNC_KEYMGMT_EXPORT_TYPES
 43

	)

632 
OSSL_CORE_MAKE_FUNC
(, 
keymgmt_imp‹t
,

633 (*
keyd©a
, 
£À˘i⁄
, c⁄° 
OSSL_PARAM
 
∑øms
[]))

634 
OSSL_CORE_MAKE_FUNC
(c⁄° 
OSSL_PARAM
 *, 
keymgmt_imp‹t_ty≥s
,

635 (
£À˘i⁄
))

636 
OSSL_CORE_MAKE_FUNC
(, 
keymgmt_exp‹t
,

637 (*
keyd©a
, 
£À˘i⁄
,

638 
OSSL_CALLBACK
 *
∑øm_cb
, *
cb¨g
))

639 
OSSL_CORE_MAKE_FUNC
(c⁄° 
OSSL_PARAM
 *, 
keymgmt_exp‹t_ty≥s
,

640 (
£À˘i⁄
))

643 
	#OSSL_FUNC_KEYMGMT_DUP
 44

	)

644 
OSSL_CORE_MAKE_FUNC
(*, 
keymgmt_dup
,

645 (c⁄° *
keyd©a_‰om
, 
£À˘i⁄
))

649 
	#OSSL_FUNC_KEYEXCH_NEWCTX
 1

	)

650 
	#OSSL_FUNC_KEYEXCH_INIT
 2

	)

651 
	#OSSL_FUNC_KEYEXCH_DERIVE
 3

	)

652 
	#OSSL_FUNC_KEYEXCH_SET_PEER
 4

	)

653 
	#OSSL_FUNC_KEYEXCH_FREECTX
 5

	)

654 
	#OSSL_FUNC_KEYEXCH_DUPCTX
 6

	)

655 
	#OSSL_FUNC_KEYEXCH_SET_CTX_PARAMS
 7

	)

656 
	#OSSL_FUNC_KEYEXCH_SETTABLE_CTX_PARAMS
 8

	)

657 
	#OSSL_FUNC_KEYEXCH_GET_CTX_PARAMS
 9

	)

658 
	#OSSL_FUNC_KEYEXCH_GETTABLE_CTX_PARAMS
 10

	)

660 
OSSL_CORE_MAKE_FUNC
(*, 
keyexch_√w˘x
, (*
¥ov˘x
))

661 
OSSL_CORE_MAKE_FUNC
(, 
keyexch_öô
, (*
˘x
, *
¥ovkey
,

662 c⁄° 
OSSL_PARAM
 
∑øms
[]))

663 
OSSL_CORE_MAKE_FUNC
(, 
keyexch_dîive
, (*
˘x
, *
£¸ë
,

664 
size_t
 *
£¸ëÀn
, size_à
ouéí
))

665 
OSSL_CORE_MAKE_FUNC
(, 
keyexch_£t_≥î
, (*
˘x
, *
¥ovkey
))

666 
OSSL_CORE_MAKE_FUNC
(, 
keyexch_‰ì˘x
, (*
˘x
))

667 
OSSL_CORE_MAKE_FUNC
(*, 
keyexch_dup˘x
, (*
˘x
))

668 
OSSL_CORE_MAKE_FUNC
(, 
keyexch_£t_˘x_∑øms
, (*
˘x
,

669 c⁄° 
OSSL_PARAM
 
∑øms
[]))

670 
OSSL_CORE_MAKE_FUNC
(c⁄° 
OSSL_PARAM
 *, 
keyexch_£âabÀ_˘x_∑øms
,

671 (*
˘x
, *
¥ov˘x
))

672 
OSSL_CORE_MAKE_FUNC
(, 
keyexch_gë_˘x_∑øms
, (*
˘x
,

673 
OSSL_PARAM
 
∑øms
[]))

674 
OSSL_CORE_MAKE_FUNC
(c⁄° 
OSSL_PARAM
 *, 
keyexch_gëèbÀ_˘x_∑øms
,

675 (*
˘x
, *
¥ov˘x
))

679 
	#OSSL_FUNC_SIGNATURE_NEWCTX
 1

	)

680 
	#OSSL_FUNC_SIGNATURE_SIGN_INIT
 2

	)

681 
	#OSSL_FUNC_SIGNATURE_SIGN
 3

	)

682 
	#OSSL_FUNC_SIGNATURE_VERIFY_INIT
 4

	)

683 
	#OSSL_FUNC_SIGNATURE_VERIFY
 5

	)

684 
	#OSSL_FUNC_SIGNATURE_VERIFY_RECOVER_INIT
 6

	)

685 
	#OSSL_FUNC_SIGNATURE_VERIFY_RECOVER
 7

	)

686 
	#OSSL_FUNC_SIGNATURE_DIGEST_SIGN_INIT
 8

	)

687 
	#OSSL_FUNC_SIGNATURE_DIGEST_SIGN_UPDATE
 9

	)

688 
	#OSSL_FUNC_SIGNATURE_DIGEST_SIGN_FINAL
 10

	)

689 
	#OSSL_FUNC_SIGNATURE_DIGEST_SIGN
 11

	)

690 
	#OSSL_FUNC_SIGNATURE_DIGEST_VERIFY_INIT
 12

	)

691 
	#OSSL_FUNC_SIGNATURE_DIGEST_VERIFY_UPDATE
 13

	)

692 
	#OSSL_FUNC_SIGNATURE_DIGEST_VERIFY_FINAL
 14

	)

693 
	#OSSL_FUNC_SIGNATURE_DIGEST_VERIFY
 15

	)

694 
	#OSSL_FUNC_SIGNATURE_FREECTX
 16

	)

695 
	#OSSL_FUNC_SIGNATURE_DUPCTX
 17

	)

696 
	#OSSL_FUNC_SIGNATURE_GET_CTX_PARAMS
 18

	)

697 
	#OSSL_FUNC_SIGNATURE_GETTABLE_CTX_PARAMS
 19

	)

698 
	#OSSL_FUNC_SIGNATURE_SET_CTX_PARAMS
 20

	)

699 
	#OSSL_FUNC_SIGNATURE_SETTABLE_CTX_PARAMS
 21

	)

700 
	#OSSL_FUNC_SIGNATURE_GET_CTX_MD_PARAMS
 22

	)

701 
	#OSSL_FUNC_SIGNATURE_GETTABLE_CTX_MD_PARAMS
 23

	)

702 
	#OSSL_FUNC_SIGNATURE_SET_CTX_MD_PARAMS
 24

	)

703 
	#OSSL_FUNC_SIGNATURE_SETTABLE_CTX_MD_PARAMS
 25

	)

705 
OSSL_CORE_MAKE_FUNC
(*, 
sig«tuª_√w˘x
, (*
¥ov˘x
,

706 c⁄° *
¥›q
))

707 
OSSL_CORE_MAKE_FUNC
(, 
sig«tuª_sign_öô
, (*
˘x
, *
¥ovkey
,

708 c⁄° 
OSSL_PARAM
 
∑øms
[]))

709 
OSSL_CORE_MAKE_FUNC
(, 
sig«tuª_sign
, (*
˘x
, *
sig
,

710 
size_t
 *
sigÀn
, size_à
sigsize
,

711 c⁄° *
tbs
,

712 
size_t
 
tb¶í
))

713 
OSSL_CORE_MAKE_FUNC
(, 
sig«tuª_vîify_öô
, (*
˘x
, *
¥ovkey
,

714 c⁄° 
OSSL_PARAM
 
∑øms
[]))

715 
OSSL_CORE_MAKE_FUNC
(, 
sig«tuª_vîify
, (*
˘x
,

716 c⁄° *
sig
,

717 
size_t
 
sigÀn
,

718 c⁄° *
tbs
,

719 
size_t
 
tb¶í
))

720 
OSSL_CORE_MAKE_FUNC
(, 
sig«tuª_vîify_ªcovî_öô
,

721 (*
˘x
, *
¥ovkey
, c⁄° 
OSSL_PARAM
 
∑øms
[]))

722 
OSSL_CORE_MAKE_FUNC
(, 
sig«tuª_vîify_ªcovî
,

723 (*
˘x
, *
rout
, 
size_t
 *
rouéí
,

724 
size_t
 
routsize
, c⁄° *
sig
, size_à
sigÀn
))

725 
OSSL_CORE_MAKE_FUNC
(, 
sig«tuª_dige°_sign_öô
,

726 (*
˘x
, c⁄° *
md«me
, *
¥ovkey
,

727 c⁄° 
OSSL_PARAM
 
∑øms
[]))

728 
OSSL_CORE_MAKE_FUNC
(, 
sig«tuª_dige°_sign_upd©e
,

729 (*
˘x
, c⁄° *
d©a
, 
size_t
 
d©Æí
))

730 
OSSL_CORE_MAKE_FUNC
(, 
sig«tuª_dige°_sign_föÆ
,

731 (*
˘x
, *
sig
, 
size_t
 *
sigÀn
,

732 
size_t
 
sigsize
))

733 
OSSL_CORE_MAKE_FUNC
(, 
sig«tuª_dige°_sign
,

734 (*
˘x
, *
sigªt
, 
size_t
 *
sigÀn
,

735 
size_t
 
sigsize
, c⁄° *
tbs
, size_à
tb¶í
))

736 
OSSL_CORE_MAKE_FUNC
(, 
sig«tuª_dige°_vîify_öô
,

737 (*
˘x
, c⁄° *
md«me
, *
¥ovkey
,

738 c⁄° 
OSSL_PARAM
 
∑øms
[]))

739 
OSSL_CORE_MAKE_FUNC
(, 
sig«tuª_dige°_vîify_upd©e
,

740 (*
˘x
, c⁄° *
d©a
, 
size_t
 
d©Æí
))

741 
OSSL_CORE_MAKE_FUNC
(, 
sig«tuª_dige°_vîify_föÆ
,

742 (*
˘x
, c⁄° *
sig
, 
size_t
 
sigÀn
))

743 
OSSL_CORE_MAKE_FUNC
(, 
sig«tuª_dige°_vîify
,

744 (*
˘x
, c⁄° *
sig
, 
size_t
 
sigÀn
,

745 c⁄° *
tbs
, 
size_t
 
tb¶í
))

746 
OSSL_CORE_MAKE_FUNC
(, 
sig«tuª_‰ì˘x
, (*
˘x
))

747 
OSSL_CORE_MAKE_FUNC
(*, 
sig«tuª_dup˘x
, (*
˘x
))

748 
OSSL_CORE_MAKE_FUNC
(, 
sig«tuª_gë_˘x_∑øms
,

749 (*
˘x
, 
OSSL_PARAM
 
∑øms
[]))

750 
OSSL_CORE_MAKE_FUNC
(c⁄° 
OSSL_PARAM
 *, 
sig«tuª_gëèbÀ_˘x_∑øms
,

751 (*
˘x
, *
¥ov˘x
))

752 
OSSL_CORE_MAKE_FUNC
(, 
sig«tuª_£t_˘x_∑øms
,

753 (*
˘x
, c⁄° 
OSSL_PARAM
 
∑øms
[]))

754 
OSSL_CORE_MAKE_FUNC
(c⁄° 
OSSL_PARAM
 *, 
sig«tuª_£âabÀ_˘x_∑øms
,

755 (*
˘x
, *
¥ov˘x
))

756 
OSSL_CORE_MAKE_FUNC
(, 
sig«tuª_gë_˘x_md_∑øms
,

757 (*
˘x
, 
OSSL_PARAM
 
∑øms
[]))

758 
OSSL_CORE_MAKE_FUNC
(c⁄° 
OSSL_PARAM
 *, 
sig«tuª_gëèbÀ_˘x_md_∑øms
,

759 (*
˘x
))

760 
OSSL_CORE_MAKE_FUNC
(, 
sig«tuª_£t_˘x_md_∑øms
,

761 (*
˘x
, c⁄° 
OSSL_PARAM
 
∑øms
[]))

762 
OSSL_CORE_MAKE_FUNC
(c⁄° 
OSSL_PARAM
 *, 
sig«tuª_£âabÀ_˘x_md_∑øms
,

763 (*
˘x
))

768 
	#OSSL_FUNC_ASYM_CIPHER_NEWCTX
 1

	)

769 
	#OSSL_FUNC_ASYM_CIPHER_ENCRYPT_INIT
 2

	)

770 
	#OSSL_FUNC_ASYM_CIPHER_ENCRYPT
 3

	)

771 
	#OSSL_FUNC_ASYM_CIPHER_DECRYPT_INIT
 4

	)

772 
	#OSSL_FUNC_ASYM_CIPHER_DECRYPT
 5

	)

773 
	#OSSL_FUNC_ASYM_CIPHER_FREECTX
 6

	)

774 
	#OSSL_FUNC_ASYM_CIPHER_DUPCTX
 7

	)

775 
	#OSSL_FUNC_ASYM_CIPHER_GET_CTX_PARAMS
 8

	)

776 
	#OSSL_FUNC_ASYM_CIPHER_GETTABLE_CTX_PARAMS
 9

	)

777 
	#OSSL_FUNC_ASYM_CIPHER_SET_CTX_PARAMS
 10

	)

778 
	#OSSL_FUNC_ASYM_CIPHER_SETTABLE_CTX_PARAMS
 11

	)

780 
OSSL_CORE_MAKE_FUNC
(*, 
asym_cùhî_√w˘x
, (*
¥ov˘x
))

781 
OSSL_CORE_MAKE_FUNC
(, 
asym_cùhî_í¸y±_öô
, (*
˘x
, *
¥ovkey
,

782 c⁄° 
OSSL_PARAM
 
∑øms
[]))

783 
OSSL_CORE_MAKE_FUNC
(, 
asym_cùhî_í¸y±
, (*
˘x
, *
out
,

784 
size_t
 *
ouéí
,

785 
size_t
 
outsize
,

786 c⁄° *
ö
,

787 
size_t
 
öÀn
))

788 
OSSL_CORE_MAKE_FUNC
(, 
asym_cùhî_de¸y±_öô
, (*
˘x
, *
¥ovkey
,

789 c⁄° 
OSSL_PARAM
 
∑øms
[]))

790 
OSSL_CORE_MAKE_FUNC
(, 
asym_cùhî_de¸y±
, (*
˘x
, *
out
,

791 
size_t
 *
ouéí
,

792 
size_t
 
outsize
,

793 c⁄° *
ö
,

794 
size_t
 
öÀn
))

795 
OSSL_CORE_MAKE_FUNC
(, 
asym_cùhî_‰ì˘x
, (*
˘x
))

796 
OSSL_CORE_MAKE_FUNC
(*, 
asym_cùhî_dup˘x
, (*
˘x
))

797 
OSSL_CORE_MAKE_FUNC
(, 
asym_cùhî_gë_˘x_∑øms
,

798 (*
˘x
, 
OSSL_PARAM
 
∑øms
[]))

799 
OSSL_CORE_MAKE_FUNC
(c⁄° 
OSSL_PARAM
 *, 
asym_cùhî_gëèbÀ_˘x_∑øms
,

800 (*
˘x
, *
¥ov˘x
))

801 
OSSL_CORE_MAKE_FUNC
(, 
asym_cùhî_£t_˘x_∑øms
,

802 (*
˘x
, c⁄° 
OSSL_PARAM
 
∑øms
[]))

803 
OSSL_CORE_MAKE_FUNC
(c⁄° 
OSSL_PARAM
 *, 
asym_cùhî_£âabÀ_˘x_∑øms
,

804 (*
˘x
, *
¥ov˘x
))

807 
	#OSSL_FUNC_KEM_NEWCTX
 1

	)

808 
	#OSSL_FUNC_KEM_ENCAPSULATE_INIT
 2

	)

809 
	#OSSL_FUNC_KEM_ENCAPSULATE
 3

	)

810 
	#OSSL_FUNC_KEM_DECAPSULATE_INIT
 4

	)

811 
	#OSSL_FUNC_KEM_DECAPSULATE
 5

	)

812 
	#OSSL_FUNC_KEM_FREECTX
 6

	)

813 
	#OSSL_FUNC_KEM_DUPCTX
 7

	)

814 
	#OSSL_FUNC_KEM_GET_CTX_PARAMS
 8

	)

815 
	#OSSL_FUNC_KEM_GETTABLE_CTX_PARAMS
 9

	)

816 
	#OSSL_FUNC_KEM_SET_CTX_PARAMS
 10

	)

817 
	#OSSL_FUNC_KEM_SETTABLE_CTX_PARAMS
 11

	)

819 
OSSL_CORE_MAKE_FUNC
(*, 
kem_√w˘x
, (*
¥ov˘x
))

820 
OSSL_CORE_MAKE_FUNC
(, 
kem_íˇpsuœã_öô
, (*
˘x
, *
¥ovkey
,

821 c⁄° 
OSSL_PARAM
 
∑øms
[]))

822 
OSSL_CORE_MAKE_FUNC
(, 
kem_íˇpsuœã
, (*
˘x
,

823 *
out
, 
size_t
 *
ouéí
,

824 *
£¸ë
,

825 
size_t
 *
£¸ëÀn
))

826 
OSSL_CORE_MAKE_FUNC
(, 
kem_deˇpsuœã_öô
, (*
˘x
, *
¥ovkey
,

827 c⁄° 
OSSL_PARAM
 
∑øms
[]))

828 
OSSL_CORE_MAKE_FUNC
(, 
kem_deˇpsuœã
, (*
˘x
,

829 *
out
, 
size_t
 *
ouéí
,

830 c⁄° *
ö
, 
size_t
 
öÀn
))

831 
OSSL_CORE_MAKE_FUNC
(, 
kem_‰ì˘x
, (*
˘x
))

832 
OSSL_CORE_MAKE_FUNC
(*, 
kem_dup˘x
, (*
˘x
))

833 
OSSL_CORE_MAKE_FUNC
(, 
kem_gë_˘x_∑øms
, (*
˘x
, 
OSSL_PARAM
 
∑øms
[]))

834 
OSSL_CORE_MAKE_FUNC
(c⁄° 
OSSL_PARAM
 *, 
kem_gëèbÀ_˘x_∑øms
,

835 (*
˘x
, *
¥ov˘x
))

836 
OSSL_CORE_MAKE_FUNC
(, 
kem_£t_˘x_∑øms
,

837 (*
˘x
, c⁄° 
OSSL_PARAM
 
∑øms
[]))

838 
OSSL_CORE_MAKE_FUNC
(c⁄° 
OSSL_PARAM
 *, 
kem_£âabÀ_˘x_∑øms
,

839 (*
˘x
, *
¥ov˘x
))

842 
	#OSSL_FUNC_ENCODER_NEWCTX
 1

	)

843 
	#OSSL_FUNC_ENCODER_FREECTX
 2

	)

844 
	#OSSL_FUNC_ENCODER_GET_PARAMS
 3

	)

845 
	#OSSL_FUNC_ENCODER_GETTABLE_PARAMS
 4

	)

846 
	#OSSL_FUNC_ENCODER_SET_CTX_PARAMS
 5

	)

847 
	#OSSL_FUNC_ENCODER_SETTABLE_CTX_PARAMS
 6

	)

848 
	#OSSL_FUNC_ENCODER_DOES_SELECTION
 10

	)

849 
	#OSSL_FUNC_ENCODER_ENCODE
 11

	)

850 
	#OSSL_FUNC_ENCODER_IMPORT_OBJECT
 20

	)

851 
	#OSSL_FUNC_ENCODER_FREE_OBJECT
 21

	)

852 
OSSL_CORE_MAKE_FUNC
(*, 
ícodî_√w˘x
, (*
¥ov˘x
))

853 
OSSL_CORE_MAKE_FUNC
(, 
ícodî_‰ì˘x
, (*
˘x
))

854 
OSSL_CORE_MAKE_FUNC
(, 
ícodî_gë_∑øms
, (
OSSL_PARAM
 
∑øms
[]))

855 
OSSL_CORE_MAKE_FUNC
(c⁄° 
OSSL_PARAM
 *, 
ícodî_gëèbÀ_∑øms
,

856 (*
¥ov˘x
))

857 
OSSL_CORE_MAKE_FUNC
(, 
ícodî_£t_˘x_∑øms
,

858 (*
˘x
, c⁄° 
OSSL_PARAM
 
∑øms
[]))

859 
OSSL_CORE_MAKE_FUNC
(c⁄° 
OSSL_PARAM
 *, 
ícodî_£âabÀ_˘x_∑øms
,

860 (*
¥ov˘x
))

862 
OSSL_CORE_MAKE_FUNC
(, 
ícodî_d€s_£À˘i⁄
,

863 (*
¥ov˘x
, 
£À˘i⁄
))

864 
OSSL_CORE_MAKE_FUNC
(, 
ícodî_ícode
,

865 (*
˘x
, 
OSSL_CORE_BIO
 *
out
,

866 c⁄° *
obj_øw
, c⁄° 
OSSL_PARAM
 
obj_ab°ø˘
[],

867 
£À˘i⁄
,

868 
OSSL_PASSPHRASE_CALLBACK
 *
cb
, *
cb¨g
))

870 
OSSL_CORE_MAKE_FUNC
(*, 
ícodî_imp‹t_obje˘
,

871 (*
˘x
, 
£À˘i⁄
, c⁄° 
OSSL_PARAM
 
∑øms
[]))

872 
OSSL_CORE_MAKE_FUNC
(, 
ícodî_‰ì_obje˘
, (*
obj
))

874 
	#OSSL_FUNC_DECODER_NEWCTX
 1

	)

875 
	#OSSL_FUNC_DECODER_FREECTX
 2

	)

876 
	#OSSL_FUNC_DECODER_GET_PARAMS
 3

	)

877 
	#OSSL_FUNC_DECODER_GETTABLE_PARAMS
 4

	)

878 
	#OSSL_FUNC_DECODER_SET_CTX_PARAMS
 5

	)

879 
	#OSSL_FUNC_DECODER_SETTABLE_CTX_PARAMS
 6

	)

880 
	#OSSL_FUNC_DECODER_DOES_SELECTION
 10

	)

881 
	#OSSL_FUNC_DECODER_DECODE
 11

	)

882 
	#OSSL_FUNC_DECODER_EXPORT_OBJECT
 20

	)

883 
OSSL_CORE_MAKE_FUNC
(*, 
decodî_√w˘x
, (*
¥ov˘x
))

884 
OSSL_CORE_MAKE_FUNC
(, 
decodî_‰ì˘x
, (*
˘x
))

885 
OSSL_CORE_MAKE_FUNC
(, 
decodî_gë_∑øms
, (
OSSL_PARAM
 
∑øms
[]))

886 
OSSL_CORE_MAKE_FUNC
(c⁄° 
OSSL_PARAM
 *, 
decodî_gëèbÀ_∑øms
,

887 (*
¥ov˘x
))

888 
OSSL_CORE_MAKE_FUNC
(, 
decodî_£t_˘x_∑øms
,

889 (*
˘x
, c⁄° 
OSSL_PARAM
 
∑øms
[]))

890 
OSSL_CORE_MAKE_FUNC
(c⁄° 
OSSL_PARAM
 *, 
decodî_£âabÀ_˘x_∑øms
,

891 (*
¥ov˘x
))

893 
OSSL_CORE_MAKE_FUNC
(, 
decodî_d€s_£À˘i⁄
,

894 (*
¥ov˘x
, 
£À˘i⁄
))

895 
OSSL_CORE_MAKE_FUNC
(, 
decodî_decode
,

896 (*
˘x
, 
OSSL_CORE_BIO
 *
ö
, 
£À˘i⁄
,

897 
OSSL_CALLBACK
 *
d©a_cb
, *
d©a_cb¨g
,

898 
OSSL_PASSPHRASE_CALLBACK
 *
pw_cb
, *
pw_cb¨g
))

899 
OSSL_CORE_MAKE_FUNC
(, 
decodî_exp‹t_obje˘
,

900 (*
˘x
, c⁄° *
objªf
, 
size_t
 
objªf_sz
,

901 
OSSL_CALLBACK
 *
exp‹t_cb
, *
exp‹t_cb¨g
))

915 
	#OSSL_FUNC_STORE_OPEN
 1

	)

916 
	#OSSL_FUNC_STORE_ATTACH
 2

	)

917 
	#OSSL_FUNC_STORE_SETTABLE_CTX_PARAMS
 3

	)

918 
	#OSSL_FUNC_STORE_SET_CTX_PARAMS
 4

	)

919 
	#OSSL_FUNC_STORE_LOAD
 5

	)

920 
	#OSSL_FUNC_STORE_EOF
 6

	)

921 
	#OSSL_FUNC_STORE_CLOSE
 7

	)

922 
	#OSSL_FUNC_STORE_EXPORT_OBJECT
 8

	)

923 
OSSL_CORE_MAKE_FUNC
(*, 
°‹e_›í
, (*
¥ov˘x
, c⁄° *
uri
))

924 
OSSL_CORE_MAKE_FUNC
(*, 
°‹e_©èch
, (*
¥ov˘x
, 
OSSL_CORE_BIO
 *
ö
))

925 
OSSL_CORE_MAKE_FUNC
(c⁄° 
OSSL_PARAM
 *, 
°‹e_£âabÀ_˘x_∑øms
,

926 (*
¥ov˘x
))

927 
OSSL_CORE_MAKE_FUNC
(, 
°‹e_£t_˘x_∑øms
,

928 (*
lﬂdî˘x
, c⁄° 
OSSL_PARAM
 
∑øms
[]))

929 
OSSL_CORE_MAKE_FUNC
(, 
°‹e_lﬂd
,

930 (*
lﬂdî˘x
,

931 
OSSL_CALLBACK
 *
obje˘_cb
, *
obje˘_cb¨g
,

932 
OSSL_PASSPHRASE_CALLBACK
 *
pw_cb
, *
pw_cb¨g
))

933 
OSSL_CORE_MAKE_FUNC
(, 
°‹e_eof
, (*
lﬂdî˘x
))

934 
OSSL_CORE_MAKE_FUNC
(, 
°‹e_˛o£
, (*
lﬂdî˘x
))

935 
OSSL_CORE_MAKE_FUNC
(, 
°‹e_exp‹t_obje˘
,

936 (*
lﬂdî˘x
, c⁄° *
objªf
, 
size_t
 
objªf_sz
,

937 
OSSL_CALLBACK
 *
exp‹t_cb
, *
exp‹t_cb¨g
))

939 #ifde‡
__˝lu•lus


	@/usr/include/openssl/cryptoerr.h

11 #i‚de‡
OPENSSL_CRYPTOERR_H


12 
	#OPENSSL_CRYPTOERR_H


	)

13 #¥agm®
⁄˚


15 
	~<›ís¶/›ís¶c⁄f.h
>

16 
	~<›ís¶/symhacks.h
>

17 
	~<›ís¶/¸y±€º_Àgacy.h
>

24 
	#CRYPTO_R_BAD_ALGORITHM_NAME
 117

	)

25 
	#CRYPTO_R_CONFLICTING_NAMES
 118

	)

26 
	#CRYPTO_R_HEX_STRING_TOO_SHORT
 121

	)

27 
	#CRYPTO_R_ILLEGAL_HEX_DIGIT
 102

	)

28 
	#CRYPTO_R_INSUFFICIENT_DATA_SPACE
 106

	)

29 
	#CRYPTO_R_INSUFFICIENT_PARAM_SIZE
 107

	)

30 
	#CRYPTO_R_INSUFFICIENT_SECURE_DATA_SPACE
 108

	)

31 
	#CRYPTO_R_INVALID_NEGATIVE_VALUE
 122

	)

32 
	#CRYPTO_R_INVALID_NULL_ARGUMENT
 109

	)

33 
	#CRYPTO_R_INVALID_OSSL_PARAM_TYPE
 110

	)

34 
	#CRYPTO_R_ODD_NUMBER_OF_DIGITS
 103

	)

35 
	#CRYPTO_R_PROVIDER_ALREADY_EXISTS
 104

	)

36 
	#CRYPTO_R_PROVIDER_SECTION_ERROR
 105

	)

37 
	#CRYPTO_R_RANDOM_SECTION_ERROR
 119

	)

38 
	#CRYPTO_R_SECURE_MALLOC_FAILURE
 111

	)

39 
	#CRYPTO_R_STRING_TOO_LONG
 112

	)

40 
	#CRYPTO_R_TOO_MANY_BYTES
 113

	)

41 
	#CRYPTO_R_TOO_MANY_RECORDS
 114

	)

42 
	#CRYPTO_R_TOO_SMALL_BUFFER
 116

	)

43 
	#CRYPTO_R_UNKNOWN_NAME_IN_RANDOM_SECTION
 120

	)

44 
	#CRYPTO_R_ZERO_LENGTH_NUMBER
 115

	)

	@/usr/include/openssl/cterr.h

11 #i‚de‡
OPENSSL_CTERR_H


12 
	#OPENSSL_CTERR_H


	)

13 #¥agm®
⁄˚


15 
	~<›ís¶/›ís¶c⁄f.h
>

16 
	~<›ís¶/symhacks.h
>

17 
	~<›ís¶/¸y±€º_Àgacy.h
>

20 #i‚de‡
OPENSSL_NO_CT


26 
	#CT_R_BASE64_DECODE_ERROR
 108

	)

27 
	#CT_R_INVALID_LOG_ID_LENGTH
 100

	)

28 
	#CT_R_LOG_CONF_INVALID
 109

	)

29 
	#CT_R_LOG_CONF_INVALID_KEY
 110

	)

30 
	#CT_R_LOG_CONF_MISSING_DESCRIPTION
 111

	)

31 
	#CT_R_LOG_CONF_MISSING_KEY
 112

	)

32 
	#CT_R_LOG_KEY_INVALID
 113

	)

33 
	#CT_R_SCT_FUTURE_TIMESTAMP
 116

	)

34 
	#CT_R_SCT_INVALID
 104

	)

35 
	#CT_R_SCT_INVALID_SIGNATURE
 107

	)

36 
	#CT_R_SCT_LIST_INVALID
 105

	)

37 
	#CT_R_SCT_LOG_ID_MISMATCH
 114

	)

38 
	#CT_R_SCT_NOT_SET
 106

	)

39 
	#CT_R_SCT_UNSUPPORTED_VERSION
 115

	)

40 
	#CT_R_UNRECOGNIZED_SIGNATURE_NID
 101

	)

41 
	#CT_R_UNSUPPORTED_ENTRY_TYPE
 102

	)

42 
	#CT_R_UNSUPPORTED_VERSION
 103

	)

	@/usr/include/openssl/dsaerr.h

11 #i‚de‡
OPENSSL_DSAERR_H


12 
	#OPENSSL_DSAERR_H


	)

13 #¥agm®
⁄˚


15 
	~<›ís¶/›ís¶c⁄f.h
>

16 
	~<›ís¶/symhacks.h
>

17 
	~<›ís¶/¸y±€º_Àgacy.h
>

20 #i‚de‡
OPENSSL_NO_DSA


26 
	#DSA_R_BAD_FFC_PARAMETERS
 114

	)

27 
	#DSA_R_BAD_Q_VALUE
 102

	)

28 
	#DSA_R_BN_DECODE_ERROR
 108

	)

29 
	#DSA_R_BN_ERROR
 109

	)

30 
	#DSA_R_DECODE_ERROR
 104

	)

31 
	#DSA_R_INVALID_DIGEST_TYPE
 106

	)

32 
	#DSA_R_INVALID_PARAMETERS
 112

	)

33 
	#DSA_R_MISSING_PARAMETERS
 101

	)

34 
	#DSA_R_MISSING_PRIVATE_KEY
 111

	)

35 
	#DSA_R_MODULUS_TOO_LARGE
 103

	)

36 
	#DSA_R_NO_PARAMETERS_SET
 107

	)

37 
	#DSA_R_PARAMETER_ENCODING_ERROR
 105

	)

38 
	#DSA_R_P_NOT_PRIME
 115

	)

39 
	#DSA_R_Q_NOT_PRIME
 113

	)

40 
	#DSA_R_SEED_LEN_SMALL
 110

	)

	@/usr/include/openssl/ebcdic.h

10 #i‚de‡
OPENSSL_EBCDIC_H


11 
	#OPENSSL_EBCDIC_H


	)

12 #¥agm®
⁄˚


14 
	~<›ís¶/ma¸os.h
>

15 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


16 
	#HEADER_EBCDIC_H


	)

19 
	~<°dlib.h
>

21 #ifde‡ 
__˝lu•lus


26 
	#os_tﬂscii
 
_›ís¶_os_tﬂscii


	)

27 
	#os_t€bcdic
 
_›ís¶_os_t€bcdic


	)

28 
	#ebcdic2ascii
 
_›ís¶_ebcdic2ascii


	)

29 
	#ascii2ebcdic
 
_›ís¶_ascii2ebcdic


	)

31 c⁄° 
os_tﬂscii
[256];

32 c⁄° 
os_t€bcdic
[256];

33 *
ebcdic2ascii
(*
de°
, c⁄° *
§˚
, 
size_t
 
cou¡
);

34 *
ascii2ebcdic
(*
de°
, c⁄° *
§˚
, 
size_t
 
cou¡
);

36 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/ecerr.h

11 #i‚de‡
OPENSSL_ECERR_H


12 
	#OPENSSL_ECERR_H


	)

13 #¥agm®
⁄˚


15 
	~<›ís¶/›ís¶c⁄f.h
>

16 
	~<›ís¶/symhacks.h
>

17 
	~<›ís¶/¸y±€º_Àgacy.h
>

20 #i‚de‡
OPENSSL_NO_EC


26 
	#EC_R_ASN1_ERROR
 115

	)

27 
	#EC_R_BAD_SIGNATURE
 156

	)

28 
	#EC_R_BIGNUM_OUT_OF_RANGE
 144

	)

29 
	#EC_R_BUFFER_TOO_SMALL
 100

	)

30 
	#EC_R_CANNOT_INVERT
 165

	)

31 
	#EC_R_COORDINATES_OUT_OF_RANGE
 146

	)

32 
	#EC_R_CURVE_DOES_NOT_SUPPORT_ECDH
 160

	)

33 
	#EC_R_CURVE_DOES_NOT_SUPPORT_ECDSA
 170

	)

34 
	#EC_R_CURVE_DOES_NOT_SUPPORT_SIGNING
 159

	)

35 
	#EC_R_DECODE_ERROR
 142

	)

36 
	#EC_R_DISCRIMINANT_IS_ZERO
 118

	)

37 
	#EC_R_EC_GROUP_NEW_BY_NAME_FAILURE
 119

	)

38 
	#EC_R_FAILED_MAKING_PUBLIC_KEY
 166

	)

39 
	#EC_R_FIELD_TOO_LARGE
 143

	)

40 
	#EC_R_GF2M_NOT_SUPPORTED
 147

	)

41 
	#EC_R_GROUP2PKPARAMETERS_FAILURE
 120

	)

42 
	#EC_R_I2D_ECPKPARAMETERS_FAILURE
 121

	)

43 
	#EC_R_INCOMPATIBLE_OBJECTS
 101

	)

44 
	#EC_R_INVALID_A
 168

	)

45 
	#EC_R_INVALID_ARGUMENT
 112

	)

46 
	#EC_R_INVALID_B
 169

	)

47 
	#EC_R_INVALID_COFACTOR
 171

	)

48 
	#EC_R_INVALID_COMPRESSED_POINT
 110

	)

49 
	#EC_R_INVALID_COMPRESSION_BIT
 109

	)

50 
	#EC_R_INVALID_CURVE
 141

	)

51 
	#EC_R_INVALID_DIGEST
 151

	)

52 
	#EC_R_INVALID_DIGEST_TYPE
 138

	)

53 
	#EC_R_INVALID_ENCODING
 102

	)

54 
	#EC_R_INVALID_FIELD
 103

	)

55 
	#EC_R_INVALID_FORM
 104

	)

56 
	#EC_R_INVALID_GENERATOR
 173

	)

57 
	#EC_R_INVALID_GROUP_ORDER
 122

	)

58 
	#EC_R_INVALID_KEY
 116

	)

59 
	#EC_R_INVALID_LENGTH
 117

	)

60 
	#EC_R_INVALID_NAMED_GROUP_CONVERSION
 174

	)

61 
	#EC_R_INVALID_OUTPUT_LENGTH
 161

	)

62 
	#EC_R_INVALID_P
 172

	)

63 
	#EC_R_INVALID_PEER_KEY
 133

	)

64 
	#EC_R_INVALID_PENTANOMIAL_BASIS
 132

	)

65 
	#EC_R_INVALID_PRIVATE_KEY
 123

	)

66 
	#EC_R_INVALID_SEED
 175

	)

67 
	#EC_R_INVALID_TRINOMIAL_BASIS
 137

	)

68 
	#EC_R_KDF_PARAMETER_ERROR
 148

	)

69 
	#EC_R_KEYS_NOT_SET
 140

	)

70 
	#EC_R_LADDER_POST_FAILURE
 136

	)

71 
	#EC_R_LADDER_PRE_FAILURE
 153

	)

72 
	#EC_R_LADDER_STEP_FAILURE
 162

	)

73 
	#EC_R_MISSING_OID
 167

	)

74 
	#EC_R_MISSING_PARAMETERS
 124

	)

75 
	#EC_R_MISSING_PRIVATE_KEY
 125

	)

76 
	#EC_R_NEED_NEW_SETUP_VALUES
 157

	)

77 
	#EC_R_NOT_A_NIST_PRIME
 135

	)

78 
	#EC_R_NOT_IMPLEMENTED
 126

	)

79 
	#EC_R_NOT_INITIALIZED
 111

	)

80 
	#EC_R_NO_PARAMETERS_SET
 139

	)

81 
	#EC_R_NO_PRIVATE_VALUE
 154

	)

82 
	#EC_R_OPERATION_NOT_SUPPORTED
 152

	)

83 
	#EC_R_PASSED_NULL_PARAMETER
 134

	)

84 
	#EC_R_PEER_KEY_ERROR
 149

	)

85 
	#EC_R_POINT_ARITHMETIC_FAILURE
 155

	)

86 
	#EC_R_POINT_AT_INFINITY
 106

	)

87 
	#EC_R_POINT_COORDINATES_BLIND_FAILURE
 163

	)

88 
	#EC_R_POINT_IS_NOT_ON_CURVE
 107

	)

89 
	#EC_R_RANDOM_NUMBER_GENERATION_FAILED
 158

	)

90 
	#EC_R_SHARED_INFO_ERROR
 150

	)

91 
	#EC_R_SLOT_FULL
 108

	)

92 
	#EC_R_UNDEFINED_GENERATOR
 113

	)

93 
	#EC_R_UNDEFINED_ORDER
 128

	)

94 
	#EC_R_UNKNOWN_COFACTOR
 164

	)

95 
	#EC_R_UNKNOWN_GROUP
 129

	)

96 
	#EC_R_UNKNOWN_ORDER
 114

	)

97 
	#EC_R_UNSUPPORTED_FIELD
 131

	)

98 
	#EC_R_WRONG_CURVE_PARAMETERS
 145

	)

99 
	#EC_R_WRONG_ORDER
 130

	)

	@/usr/include/openssl/evperr.h

11 #i‚de‡
OPENSSL_EVPERR_H


12 
	#OPENSSL_EVPERR_H


	)

13 #¥agm®
⁄˚


15 
	~<›ís¶/›ís¶c⁄f.h
>

16 
	~<›ís¶/symhacks.h
>

17 
	~<›ís¶/¸y±€º_Àgacy.h
>

24 
	#EVP_R_AES_KEY_SETUP_FAILED
 143

	)

25 
	#EVP_R_ARIA_KEY_SETUP_FAILED
 176

	)

26 
	#EVP_R_BAD_ALGORITHM_NAME
 200

	)

27 
	#EVP_R_BAD_DECRYPT
 100

	)

28 
	#EVP_R_BAD_KEY_LENGTH
 195

	)

29 
	#EVP_R_BUFFER_TOO_SMALL
 155

	)

30 
	#EVP_R_CACHE_CONSTANTS_FAILED
 225

	)

31 
	#EVP_R_CAMELLIA_KEY_SETUP_FAILED
 157

	)

32 
	#EVP_R_CANNOT_GET_PARAMETERS
 197

	)

33 
	#EVP_R_CANNOT_SET_PARAMETERS
 198

	)

34 
	#EVP_R_CIPHER_NOT_GCM_MODE
 184

	)

35 
	#EVP_R_CIPHER_PARAMETER_ERROR
 122

	)

36 
	#EVP_R_COMMAND_NOT_SUPPORTED
 147

	)

37 
	#EVP_R_CONFLICTING_ALGORITHM_NAME
 201

	)

38 
	#EVP_R_COPY_ERROR
 173

	)

39 
	#EVP_R_CTRL_NOT_IMPLEMENTED
 132

	)

40 
	#EVP_R_CTRL_OPERATION_NOT_IMPLEMENTED
 133

	)

41 
	#EVP_R_DATA_NOT_MULTIPLE_OF_BLOCK_LENGTH
 138

	)

42 
	#EVP_R_DECODE_ERROR
 114

	)

43 
	#EVP_R_DEFAULT_QUERY_PARSE_ERROR
 210

	)

44 
	#EVP_R_DIFFERENT_KEY_TYPES
 101

	)

45 
	#EVP_R_DIFFERENT_PARAMETERS
 153

	)

46 
	#EVP_R_ERROR_LOADING_SECTION
 165

	)

47 
	#EVP_R_EXPECTING_AN_HMAC_KEY
 174

	)

48 
	#EVP_R_EXPECTING_AN_RSA_KEY
 127

	)

49 
	#EVP_R_EXPECTING_A_DH_KEY
 128

	)

50 
	#EVP_R_EXPECTING_A_DSA_KEY
 129

	)

51 
	#EVP_R_EXPECTING_A_ECX_KEY
 219

	)

52 
	#EVP_R_EXPECTING_A_EC_KEY
 142

	)

53 
	#EVP_R_EXPECTING_A_POLY1305_KEY
 164

	)

54 
	#EVP_R_EXPECTING_A_SIPHASH_KEY
 175

	)

55 
	#EVP_R_FINAL_ERROR
 188

	)

56 
	#EVP_R_GENERATE_ERROR
 214

	)

57 
	#EVP_R_GET_RAW_KEY_FAILED
 182

	)

58 
	#EVP_R_ILLEGAL_SCRYPT_PARAMETERS
 171

	)

59 
	#EVP_R_INACCESSIBLE_DOMAIN_PARAMETERS
 204

	)

60 
	#EVP_R_INACCESSIBLE_KEY
 203

	)

61 
	#EVP_R_INITIALIZATION_ERROR
 134

	)

62 
	#EVP_R_INPUT_NOT_INITIALIZED
 111

	)

63 
	#EVP_R_INVALID_CUSTOM_LENGTH
 185

	)

64 
	#EVP_R_INVALID_DIGEST
 152

	)

65 
	#EVP_R_INVALID_IV_LENGTH
 194

	)

66 
	#EVP_R_INVALID_KEY
 163

	)

67 
	#EVP_R_INVALID_KEY_LENGTH
 130

	)

68 
	#EVP_R_INVALID_LENGTH
 221

	)

69 
	#EVP_R_INVALID_NULL_ALGORITHM
 218

	)

70 
	#EVP_R_INVALID_OPERATION
 148

	)

71 
	#EVP_R_INVALID_PROVIDER_FUNCTIONS
 193

	)

72 
	#EVP_R_INVALID_SALT_LENGTH
 186

	)

73 
	#EVP_R_INVALID_SECRET_LENGTH
 223

	)

74 
	#EVP_R_INVALID_SEED_LENGTH
 220

	)

75 
	#EVP_R_INVALID_VALUE
 222

	)

76 
	#EVP_R_KEYMGMT_EXPORT_FAILURE
 205

	)

77 
	#EVP_R_KEY_SETUP_FAILED
 180

	)

78 
	#EVP_R_LOCKING_NOT_SUPPORTED
 213

	)

79 
	#EVP_R_MEMORY_LIMIT_EXCEEDED
 172

	)

80 
	#EVP_R_MESSAGE_DIGEST_IS_NULL
 159

	)

81 
	#EVP_R_METHOD_NOT_SUPPORTED
 144

	)

82 
	#EVP_R_MISSING_PARAMETERS
 103

	)

83 
	#EVP_R_NOT_ABLE_TO_COPY_CTX
 190

	)

84 
	#EVP_R_NOT_XOF_OR_INVALID_LENGTH
 178

	)

85 
	#EVP_R_NO_CIPHER_SET
 131

	)

86 
	#EVP_R_NO_DEFAULT_DIGEST
 158

	)

87 
	#EVP_R_NO_DIGEST_SET
 139

	)

88 
	#EVP_R_NO_IMPORT_FUNCTION
 206

	)

89 
	#EVP_R_NO_KEYMGMT_AVAILABLE
 199

	)

90 
	#EVP_R_NO_KEYMGMT_PRESENT
 196

	)

91 
	#EVP_R_NO_KEY_SET
 154

	)

92 
	#EVP_R_NO_OPERATION_SET
 149

	)

93 
	#EVP_R_NULL_MAC_PKEY_CTX
 208

	)

94 
	#EVP_R_ONLY_ONESHOT_SUPPORTED
 177

	)

95 
	#EVP_R_OPERATION_NOT_INITIALIZED
 151

	)

96 
	#EVP_R_OPERATION_NOT_SUPPORTED_FOR_THIS_KEYTYPE
 150

	)

97 
	#EVP_R_OUTPUT_WOULD_OVERFLOW
 202

	)

98 
	#EVP_R_PARAMETER_TOO_LARGE
 187

	)

99 
	#EVP_R_PARTIALLY_OVERLAPPING
 162

	)

100 
	#EVP_R_PBKDF2_ERROR
 181

	)

101 
	#EVP_R_PKEY_APPLICATION_ASN1_METHOD_ALREADY_REGISTERED
 179

	)

102 
	#EVP_R_PRIVATE_KEY_DECODE_ERROR
 145

	)

103 
	#EVP_R_PRIVATE_KEY_ENCODE_ERROR
 146

	)

104 
	#EVP_R_PUBLIC_KEY_NOT_RSA
 106

	)

105 
	#EVP_R_SETTING_XOF_FAILED
 227

	)

106 
	#EVP_R_SET_DEFAULT_PROPERTY_FAILURE
 209

	)

107 
	#EVP_R_TOO_MANY_RECORDS
 183

	)

108 
	#EVP_R_UNABLE_TO_ENABLE_LOCKING
 212

	)

109 
	#EVP_R_UNABLE_TO_GET_MAXIMUM_REQUEST_SIZE
 215

	)

110 
	#EVP_R_UNABLE_TO_GET_RANDOM_STRENGTH
 216

	)

111 
	#EVP_R_UNABLE_TO_LOCK_CONTEXT
 211

	)

112 
	#EVP_R_UNABLE_TO_SET_CALLBACKS
 217

	)

113 
	#EVP_R_UNKNOWN_CIPHER
 160

	)

114 
	#EVP_R_UNKNOWN_DIGEST
 161

	)

115 
	#EVP_R_UNKNOWN_KEY_TYPE
 207

	)

116 
	#EVP_R_UNKNOWN_OPTION
 169

	)

117 
	#EVP_R_UNKNOWN_PBE_ALGORITHM
 121

	)

118 
	#EVP_R_UNSUPPORTED_ALGORITHM
 156

	)

119 
	#EVP_R_UNSUPPORTED_CIPHER
 107

	)

120 
	#EVP_R_UNSUPPORTED_KEYLENGTH
 123

	)

121 
	#EVP_R_UNSUPPORTED_KEY_DERIVATION_FUNCTION
 124

	)

122 
	#EVP_R_UNSUPPORTED_KEY_SIZE
 108

	)

123 
	#EVP_R_UNSUPPORTED_KEY_TYPE
 224

	)

124 
	#EVP_R_UNSUPPORTED_NUMBER_OF_ROUNDS
 135

	)

125 
	#EVP_R_UNSUPPORTED_PRF
 125

	)

126 
	#EVP_R_UNSUPPORTED_PRIVATE_KEY_ALGORITHM
 118

	)

127 
	#EVP_R_UNSUPPORTED_SALT_TYPE
 126

	)

128 
	#EVP_R_UPDATE_ERROR
 189

	)

129 
	#EVP_R_WRAP_MODE_NOT_ALLOWED
 170

	)

130 
	#EVP_R_WRONG_FINAL_BLOCK_LENGTH
 109

	)

131 
	#EVP_R_XTS_DATA_UNIT_IS_TOO_LARGE
 191

	)

132 
	#EVP_R_XTS_DUPLICATED_KEYS
 192

	)

	@/usr/include/openssl/http.h

11 #i‚de‡
OPENSSL_HTTP_H


12 
	#OPENSSL_HTTP_H


	)

13 #¥agm®
⁄˚


15 
	~<›ís¶/›ís¶c⁄f.h
>

17 
	~<›ís¶/bio.h
>

18 
	~<›ís¶/a¢1.h
>

19 
	~<›ís¶/c⁄f.h
>

22 #ifde‡
__˝lu•lus


26 
	#OSSL_HTTP_NAME
 "hâp"

	)

27 
	#OSSL_HTTPS_NAME
 "hâps"

	)

28 
	#OSSL_HTTP_PREFIX
 
OSSL_HTTP_NAME
"://"

	)

29 
	#OSSL_HTTPS_PREFIX
 
OSSL_HTTPS_NAME
"://"

	)

30 
	#OSSL_HTTP_PORT
 "80"

	)

31 
	#OSSL_HTTPS_PORT
 "443"

	)

32 
	#OPENSSL_NO_PROXY
 "NO_PROXY"

	)

33 
	#OPENSSL_HTTP_PROXY
 "HTTP_PROXY"

	)

34 
	#OPENSSL_HTTPS_PROXY
 "HTTPS_PROXY"

	)

36 
	#OSSL_HTTP_DEFAULT_MAX_LINE_LEN
 (4 * 1024)

	)

37 
	#OSSL_HTTP_DEFAULT_MAX_RESP_LEN
 (100 * 1024)

	)

40 
OSSL_HTTP_REQ_CTX
 *
OSSL_HTTP_REQ_CTX_√w
(
BIO
 *
wbio
, BIO *
rbio
, 
buf_size
);

41 
OSSL_HTTP_REQ_CTX_‰ì
(
OSSL_HTTP_REQ_CTX
 *
r˘x
);

42 
OSSL_HTTP_REQ_CTX_£t_ªque°_löe
(
OSSL_HTTP_REQ_CTX
 *
r˘x
, 
mëhod_POST
,

43 c⁄° *
£rvî
, c⁄° *
p‹t
,

44 c⁄° *
∑th
);

45 
OSSL_HTTP_REQ_CTX_add1_hódî
(
OSSL_HTTP_REQ_CTX
 *
r˘x
,

46 c⁄° *
«me
, c⁄° *
vÆue
);

47 
OSSL_HTTP_REQ_CTX_£t_ex≥˘ed
(
OSSL_HTTP_REQ_CTX
 *
r˘x
,

48 c⁄° *
c⁄ã¡_ty≥
, 
a¢1
,

49 
timeout
, 
kìp_Æive
);

50 
OSSL_HTTP_REQ_CTX_£t1_ªq
(
OSSL_HTTP_REQ_CTX
 *
r˘x
, c⁄° *
c⁄ã¡_ty≥
,

51 c⁄° 
ASN1_ITEM
 *
ô
, c⁄° 
ASN1_VALUE
 *
ªq
);

52 
OSSL_HTTP_REQ_CTX_nbio
(
OSSL_HTTP_REQ_CTX
 *
r˘x
);

53 
OSSL_HTTP_REQ_CTX_nbio_d2i
(
OSSL_HTTP_REQ_CTX
 *
r˘x
,

54 
ASN1_VALUE
 **
pvÆ
, c⁄° 
ASN1_ITEM
 *
ô
);

55 
BIO
 *
OSSL_HTTP_REQ_CTX_exch™ge
(
OSSL_HTTP_REQ_CTX
 *
r˘x
);

56 
BIO
 *
OSSL_HTTP_REQ_CTX_gë0_mem_bio
(c⁄° 
OSSL_HTTP_REQ_CTX
 *
r˘x
);

57 
size_t
 
OSSL_HTTP_REQ_CTX_gë_ª•_Àn
(c⁄° 
OSSL_HTTP_REQ_CTX
 *
r˘x
);

58 
OSSL_HTTP_REQ_CTX_£t_max_ª•⁄£_Àngth
(
OSSL_HTTP_REQ_CTX
 *
r˘x
,

59 
Àn
);

60 
OSSL_HTTP_is_Æive
(c⁄° 
OSSL_HTTP_REQ_CTX
 *
r˘x
);

63 
BIO
 *(*
	tOSSL_HTTP_bio_cb_t
)(
	tBIO
 *
	tbio
, *
	t¨g
, 
	tc⁄√˘
, 
	tdëaû
);

64 
OSSL_HTTP_REQ_CTX
 *
OSSL_HTTP_›í
(c⁄° *
£rvî
, c⁄° *
p‹t
,

65 c⁄° *
¥oxy
, c⁄° *
no_¥oxy
,

66 
u£_s¶
, 
BIO
 *
bio
, BIO *
rbio
,

67 
OSSL_HTTP_bio_cb_t
 
bio_upd©e_‚
, *
¨g
,

68 
buf_size
, 
ovîÆl_timeout
);

69 
OSSL_HTTP_¥oxy_c⁄√˘
(
BIO
 *
bio
, c⁄° *
£rvî
, c⁄° *
p‹t
,

70 c⁄° *
¥oxyu£r
, c⁄° *
¥oxy∑ss
,

71 
timeout
, 
BIO
 *
bio_îr
, c⁄° *
¥og
);

72 
OSSL_HTTP_£t1_ªque°
(
OSSL_HTTP_REQ_CTX
 *
r˘x
, c⁄° *
∑th
,

73 c⁄° 
STACK_OF
(
CONF_VALUE
Ë*
hódîs
,

74 c⁄° *
c⁄ã¡_ty≥
, 
BIO
 *
ªq
,

75 c⁄° *
ex≥˘ed_c⁄ã¡_ty≥
, 
ex≥˘_a¢1
,

76 
size_t
 
max_ª•_Àn
, 
timeout
, 
kìp_Æive
);

77 
BIO
 *
OSSL_HTTP_exch™ge
(
OSSL_HTTP_REQ_CTX
 *
r˘x
, **
ªdúe˘i⁄_uæ
);

78 
BIO
 *
OSSL_HTTP_gë
(c⁄° *
uæ
, c⁄° *
¥oxy
, c⁄° *
no_¥oxy
,

79 
BIO
 *
bio
, BIO *
rbio
,

80 
OSSL_HTTP_bio_cb_t
 
bio_upd©e_‚
, *
¨g
,

81 
buf_size
, c⁄° 
STACK_OF
(
CONF_VALUE
Ë*
hódîs
,

82 c⁄° *
ex≥˘ed_c⁄ã¡_ty≥
, 
ex≥˘_a¢1
,

83 
size_t
 
max_ª•_Àn
, 
timeout
);

84 
BIO
 *
OSSL_HTTP_å™s„r
(
OSSL_HTTP_REQ_CTX
 **
¥˘x
,

85 c⁄° *
£rvî
, c⁄° *
p‹t
,

86 c⁄° *
∑th
, 
u£_s¶
,

87 c⁄° *
¥oxy
, c⁄° *
no_¥oxy
,

88 
BIO
 *
bio
, BIO *
rbio
,

89 
OSSL_HTTP_bio_cb_t
 
bio_upd©e_‚
, *
¨g
,

90 
buf_size
, c⁄° 
STACK_OF
(
CONF_VALUE
Ë*
hódîs
,

91 c⁄° *
c⁄ã¡_ty≥
, 
BIO
 *
ªq
,

92 c⁄° *
ex≥˘ed_c⁄ã¡_ty≥
, 
ex≥˘_a¢1
,

93 
size_t
 
max_ª•_Àn
, 
timeout
, 
kìp_Æive
);

94 
OSSL_HTTP_˛o£
(
OSSL_HTTP_REQ_CTX
 *
r˘x
, 
ok
);

97 
OSSL_∑r£_uæ
(c⁄° *
uæ
, **
pscheme
, **
pu£r
, **
pho°
,

98 **
µ‹t
, *
µ‹t_num
,

99 **
µ©h
, **
pquîy
, **
p‰ag
);

100 
OSSL_HTTP_∑r£_uæ
(c⁄° *
uæ
, *
ps¶
, **
pu£r
, **
pho°
,

101 **
µ‹t
, *
µ‹t_num
,

102 **
µ©h
, **
pquîy
, **
p‰ag
);

103 c⁄° *
OSSL_HTTP_ad≠t_¥oxy
(c⁄° *
¥oxy
, c⁄° *
no_¥oxy
,

104 c⁄° *
£rvî
, 
u£_s¶
);

106 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/objects.h

10 #i‚de‡
OPENSSL_OBJECTS_H


11 
	#OPENSSL_OBJECTS_H


	)

12 #¥agm®
⁄˚


14 
	~<›ís¶/ma¸os.h
>

15 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


16 
	#HEADER_OBJECTS_H


	)

19 
	~<›ís¶/obj_mac.h
>

20 
	~<›ís¶/bio.h
>

21 
	~<›ís¶/a¢1.h
>

22 
	~<›ís¶/obje˘£º.h
>

24 
	#OBJ_NAME_TYPE_UNDEF
 0x00

	)

25 
	#OBJ_NAME_TYPE_MD_METH
 0x01

	)

26 
	#OBJ_NAME_TYPE_CIPHER_METH
 0x02

	)

27 
	#OBJ_NAME_TYPE_PKEY_METH
 0x03

	)

28 
	#OBJ_NAME_TYPE_COMP_METH
 0x04

	)

29 
	#OBJ_NAME_TYPE_MAC_METH
 0x05

	)

30 
	#OBJ_NAME_TYPE_KDF_METH
 0x06

	)

31 
	#OBJ_NAME_TYPE_NUM
 0x07

	)

33 
	#OBJ_NAME_ALIAS
 0x8000

	)

35 
	#OBJ_BSEARCH_VALUE_ON_NOMATCH
 0x01

	)

36 
	#OBJ_BSEARCH_FIRST_VALUE_ON_MATCH
 0x02

	)

39 #ifde‡ 
__˝lu•lus


43 
	sobj_«me_°
 {

44 
ty≥
;

45 
Æüs
;

46 c⁄° *
«me
;

47 c⁄° *
d©a
;

48 } 
	tOBJ_NAME
;

50 
	#OBJ_¸óã_™d_add_obje˘
(
a
,
b
,
c
Ë
	`OBJ_¸óã
◊,b,c)

	)

52 
OBJ_NAME_öô
();

53 
OBJ_NAME_√w_ödex
((*
hash_func
) (const *),

54 (*
cmp_func
) (const *, const *),

55 (*
‰ì_func
) (const *, , const *));

56 c⁄° *
OBJ_NAME_gë
(c⁄° *
«me
, 
ty≥
);

57 
OBJ_NAME_add
(c⁄° *
«me
, 
ty≥
, c⁄° *
d©a
);

58 
OBJ_NAME_ªmove
(c⁄° *
«me
, 
ty≥
);

59 
OBJ_NAME_˛ónup
(
ty≥
);

60 
OBJ_NAME_do_Æl
(
ty≥
, (*
‚
Ë(c⁄° 
OBJ_NAME
 *, *
¨g
),

61 *
¨g
);

62 
OBJ_NAME_do_Æl_s‹ãd
(
ty≥
,

63 (*
‚
Ë(c⁄° 
OBJ_NAME
 *, *
¨g
),

64 *
¨g
);

66 
DECLARE_ASN1_DUP_FUNCTION_«me
(
ASN1_OBJECT
, 
OBJ
)

67 
ASN1_OBJECT
 *
OBJ_nid2obj
(
n
);

68 c⁄° *
OBJ_nid2 
(
n
);

69 c⁄° *
OBJ_nid2¢
(
n
);

70 
OBJ_obj2nid
(c⁄° 
ASN1_OBJECT
 *
o
);

71 
ASN1_OBJECT
 *
OBJ_txt2obj
(c⁄° *
s
, 
no_«me
);

72 
OBJ_obj2txt
(*
buf
, 
buf_Àn
, c⁄° 
ASN1_OBJECT
 *
a
, 
no_«me
);

73 
OBJ_txt2nid
(c⁄° *
s
);

74 
OBJ_ 2nid
(c⁄° *
s
);

75 
OBJ_¢2nid
(c⁄° *
s
);

76 
OBJ_cmp
(c⁄° 
ASN1_OBJECT
 *
a
, c⁄° ASN1_OBJECT *
b
);

77 c⁄° *
OBJ_b£¨ch_
(c⁄° *
key
, c⁄° *
ba£
, 
num
, 
size
,

78 (*
cmp
) (const *, const *));

79 c⁄° *
OBJ_b£¨ch_ex_
(c⁄° *
key
, c⁄° *
ba£
, 
num
,

80 
size
,

81 (*
cmp
) (const *, const *),

82 
Êags
);

84 
	#_DECLARE_OBJ_BSEARCH_CMP_FN
(
sc›e
, 
ty≥1
, 
ty≥2
, 
nm
) \

85 
nm
##
	`_cmp_BSEARCH_CMP_FN
(const *, const *); \

86 
nm
##
	`_cmp
(
ty≥1
 c⁄° *, 
ty≥2
 const *); \

87 
sc›e
 
ty≥2
 * 
OBJ_b£¨ch_
##
	`nm
(
ty≥1
 *
key
,Åy≥2 c⁄° *
ba£
, 
num
)

	)

89 
	#DECLARE_OBJ_BSEARCH_CMP_FN
(
ty≥1
, 
ty≥2
, 
cmp
) \

90 
	`_DECLARE_OBJ_BSEARCH_CMP_FN
(, 
ty≥1
, 
ty≥2
, 
cmp
)

	)

91 
	#DECLARE_OBJ_BSEARCH_GLOBAL_CMP_FN
(
ty≥1
, 
ty≥2
, 
nm
) \

92 
ty≥2
 * 
OBJ_b£¨ch_
##
	`nm
(
ty≥1
 *
key
,Åy≥2 c⁄° *
ba£
, 
num
)

	)

121 
	#IMPLEMENT_OBJ_BSEARCH_CMP_FN
(
ty≥1
, 
ty≥2
, 
nm
) \

122 
nm
##
	`_cmp_BSEARCH_CMP_FN
(c⁄° *
a_
, c⁄° *
b_
) \

124 
ty≥1
 c⁄° *
a
 = 
a_
; \

125 
ty≥2
 c⁄° *
b
 = 
b_
; \

126  
nm
##
	`_cmp
(
a
,
b
); \

128 
ty≥2
 *
OBJ_b£¨ch_
##
	`nm
(
ty≥1
 *
key
,Åy≥2 c⁄° *
ba£
, 
num
) \

130  (
ty≥2
 *)
	`OBJ_b£¨ch_
(
key
, 
ba£
, 
num
, (type2), \

131 
nm
##
_cmp_BSEARCH_CMP_FN
); \

133 
	`dummy_¥ŸŸy≥
()

	)

135 
	#IMPLEMENT_OBJ_BSEARCH_GLOBAL_CMP_FN
(
ty≥1
, 
ty≥2
, 
nm
) \

136 
nm
##
	`_cmp_BSEARCH_CMP_FN
(c⁄° *
a_
, c⁄° *
b_
) \

138 
ty≥1
 c⁄° *
a
 = 
a_
; \

139 
ty≥2
 c⁄° *
b
 = 
b_
; \

140  
nm
##
	`_cmp
(
a
,
b
); \

142 
ty≥2
 *
OBJ_b£¨ch_
##
	`nm
(
ty≥1
 *
key
,Åy≥2 c⁄° *
ba£
, 
num
) \

144  (
ty≥2
 *)
	`OBJ_b£¨ch_
(
key
, 
ba£
, 
num
, (type2), \

145 
nm
##
_cmp_BSEARCH_CMP_FN
); \

147 
	`dummy_¥ŸŸy≥
()

	)

149 
	#OBJ_b£¨ch
(
ty≥1
,
key
,
ty≥2
,
ba£
,
num
,
cmp
) \

150 ((
ty≥2
 *)
	`OBJ_b£¨ch_
(
	`CHECKED_PTR_OF
(
ty≥1
,
key
),CHECKED_PTR_OF—y≥2,
ba£
), \

151 
num
,(
ty≥2
), \

152 (()
	`CHECKED_PTR_OF
(
ty≥1
,
cmp
##
_ty≥_1
), \

153 ()
	`CHECKED_PTR_OF
(
ty≥2
,
cmp
##
_ty≥_2
), \

154 
cmp
##
_BSEARCH_CMP_FN
)))

	)

156 
	#OBJ_b£¨ch_ex
(
ty≥1
,
key
,
ty≥2
,
ba£
,
num
,
cmp
,
Êags
) \

157 ((
ty≥2
 *)
	`OBJ_b£¨ch_ex_
(
	`CHECKED_PTR_OF
(
ty≥1
,
key
),CHECKED_PTR_OF—y≥2,
ba£
), \

158 
num
,(
ty≥2
), \

159 (()
	`CHECKED_PTR_OF
(
ty≥1
,
cmp
##
_ty≥_1
), \

160 ()
ty≥_2
=
	`CHECKED_PTR_OF
(
ty≥2
,
cmp
##
_ty≥_2
), \

161 
cmp
##
_BSEARCH_CMP_FN
)),
Êags
)

	)

163 
OBJ_√w_nid
(
num
);

164 
OBJ_add_obje˘
(c⁄° 
ASN1_OBJECT
 *
obj
);

165 
OBJ_¸óã
(c⁄° *
oid
, c⁄° *
¢
, c⁄° *
 
);

166 #i‚de‡
OPENSSL_NO_DEPRECATED_1_1_0


167 
	#OBJ_˛ónup
(Ë0Ë

	)

169 
OBJ_¸óã_obje˘s
(
BIO
 *
ö
);

171 
size_t
 
OBJ_Àngth
(c⁄° 
ASN1_OBJECT
 *
obj
);

172 c⁄° *
OBJ_gë0_d©a
(c⁄° 
ASN1_OBJECT
 *
obj
);

174 
OBJ_föd_sigid_Ægs
(
signid
, *
pdig_nid
, *
µkey_nid
);

175 
OBJ_föd_sigid_by_Ægs
(*
psignid
, 
dig_nid
, 
pkey_nid
);

176 
OBJ_add_sigid
(
signid
, 
dig_id
, 
pkey_id
);

177 
OBJ_sigid_‰ì
();

180 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/ocsperr.h

11 #i‚de‡
OPENSSL_OCSPERR_H


12 
	#OPENSSL_OCSPERR_H


	)

13 #¥agm®
⁄˚


15 
	~<›ís¶/›ís¶c⁄f.h
>

16 
	~<›ís¶/symhacks.h
>

17 
	~<›ís¶/¸y±€º_Àgacy.h
>

20 #i‚de‡
OPENSSL_NO_OCSP


26 
	#OCSP_R_CERTIFICATE_VERIFY_ERROR
 101

	)

27 
	#OCSP_R_DIGEST_ERR
 102

	)

28 
	#OCSP_R_DIGEST_NAME_ERR
 106

	)

29 
	#OCSP_R_DIGEST_SIZE_ERR
 107

	)

30 
	#OCSP_R_ERROR_IN_NEXTUPDATE_FIELD
 122

	)

31 
	#OCSP_R_ERROR_IN_THISUPDATE_FIELD
 123

	)

32 
	#OCSP_R_MISSING_OCSPSIGNING_USAGE
 103

	)

33 
	#OCSP_R_NEXTUPDATE_BEFORE_THISUPDATE
 124

	)

34 
	#OCSP_R_NOT_BASIC_RESPONSE
 104

	)

35 
	#OCSP_R_NO_CERTIFICATES_IN_CHAIN
 105

	)

36 
	#OCSP_R_NO_RESPONSE_DATA
 108

	)

37 
	#OCSP_R_NO_REVOKED_TIME
 109

	)

38 
	#OCSP_R_NO_SIGNER_KEY
 130

	)

39 
	#OCSP_R_PRIVATE_KEY_DOES_NOT_MATCH_CERTIFICATE
 110

	)

40 
	#OCSP_R_REQUEST_NOT_SIGNED
 128

	)

41 
	#OCSP_R_RESPONSE_CONTAINS_NO_REVOCATION_DATA
 111

	)

42 
	#OCSP_R_ROOT_CA_NOT_TRUSTED
 112

	)

43 
	#OCSP_R_SIGNATURE_FAILURE
 117

	)

44 
	#OCSP_R_SIGNER_CERTIFICATE_NOT_FOUND
 118

	)

45 
	#OCSP_R_STATUS_EXPIRED
 125

	)

46 
	#OCSP_R_STATUS_NOT_YET_VALID
 126

	)

47 
	#OCSP_R_STATUS_TOO_OLD
 127

	)

48 
	#OCSP_R_UNKNOWN_MESSAGE_DIGEST
 119

	)

49 
	#OCSP_R_UNKNOWN_NID
 120

	)

50 
	#OCSP_R_UNSUPPORTED_REQUESTORNAME_TYPE
 129

	)

	@/usr/include/openssl/params.h

11 #i‚de‡
OPENSSL_PARAMS_H


12 
	#OPENSSL_PARAMS_H


	)

13 #¥agm®
⁄˚


15 
	~<›ís¶/c‹e.h
>

16 
	~<›ís¶/bn.h
>

18 #ifde‡ 
__˝lu•lus


22 
	#OSSL_PARAM_UNMODIFIED
 ((
size_t
)-1)

	)

24 
	#OSSL_PARAM_END
 \

25 { 
NULL
, 0, NULL, 0, 0 }

	)

27 
	#OSSL_PARAM_DEFN
(
key
, 
ty≥
, 
addr
, 
sz
) \

28 { (
key
), (
ty≥
), (
addr
), (
sz
), 
OSSL_PARAM_UNMODIFIED
 }

	)

31 
	#OSSL_PARAM_öt
(
key
, 
addr
) \

32 
	`OSSL_PARAM_DEFN
((
key
), 
OSSL_PARAM_INTEGER
, (
addr
), ())

	)

33 
	#OSSL_PARAM_uöt
(
key
, 
addr
) \

34 
	`OSSL_PARAM_DEFN
((
key
), 
OSSL_PARAM_UNSIGNED_INTEGER
, (
addr
), \

35 ())

	)

36 
	#OSSL_PARAM_l⁄g
(
key
, 
addr
) \

37 
	`OSSL_PARAM_DEFN
((
key
), 
OSSL_PARAM_INTEGER
, (
addr
), ())

	)

38 
	#OSSL_PARAM_ul⁄g
(
key
, 
addr
) \

39 
	`OSSL_PARAM_DEFN
((
key
), 
OSSL_PARAM_UNSIGNED_INTEGER
, (
addr
), \

40 ())

	)

41 
	#OSSL_PARAM_öt32
(
key
, 
addr
) \

42 
	`OSSL_PARAM_DEFN
((
key
), 
OSSL_PARAM_INTEGER
, (
addr
), (
öt32_t
))

	)

43 
	#OSSL_PARAM_uöt32
(
key
, 
addr
) \

44 
	`OSSL_PARAM_DEFN
((
key
), 
OSSL_PARAM_UNSIGNED_INTEGER
, (
addr
), \

45 (
uöt32_t
))

	)

46 
	#OSSL_PARAM_öt64
(
key
, 
addr
) \

47 
	`OSSL_PARAM_DEFN
((
key
), 
OSSL_PARAM_INTEGER
, (
addr
), (
öt64_t
))

	)

48 
	#OSSL_PARAM_uöt64
(
key
, 
addr
) \

49 
	`OSSL_PARAM_DEFN
((
key
), 
OSSL_PARAM_UNSIGNED_INTEGER
, (
addr
), \

50 (
uöt64_t
))

	)

51 
	#OSSL_PARAM_size_t
(
key
, 
addr
) \

52 
	`OSSL_PARAM_DEFN
((
key
), 
OSSL_PARAM_UNSIGNED_INTEGER
, (
addr
), (
size_t
))

	)

53 
	#OSSL_PARAM_time_t
(
key
, 
addr
) \

54 
	`OSSL_PARAM_DEFN
((
key
), 
OSSL_PARAM_INTEGER
, (
addr
), (
time_t
))

	)

55 
	#OSSL_PARAM_doubÀ
(
key
, 
addr
) \

56 
	`OSSL_PARAM_DEFN
((
key
), 
OSSL_PARAM_REAL
, (
addr
), ())

	)

58 
	#OSSL_PARAM_BN
(
key
, 
bn
, 
sz
) \

59 
	`OSSL_PARAM_DEFN
((
key
), 
OSSL_PARAM_UNSIGNED_INTEGER
, (
bn
), (
sz
))

	)

60 
	#OSSL_PARAM_utf8_°rög
(
key
, 
addr
, 
sz
) \

61 
	`OSSL_PARAM_DEFN
((
key
), 
OSSL_PARAM_UTF8_STRING
, (
addr
), 
sz
)

	)

62 
	#OSSL_PARAM_o˘ë_°rög
(
key
, 
addr
, 
sz
) \

63 
	`OSSL_PARAM_DEFN
((
key
), 
OSSL_PARAM_OCTET_STRING
, (
addr
), 
sz
)

	)

65 
	#OSSL_PARAM_utf8_±r
(
key
, 
addr
, 
sz
) \

66 
	`OSSL_PARAM_DEFN
((
key
), 
OSSL_PARAM_UTF8_PTR
, (
addr
), 
sz
)

	)

67 
	#OSSL_PARAM_o˘ë_±r
(
key
, 
addr
, 
sz
) \

68 
	`OSSL_PARAM_DEFN
((
key
), 
OSSL_PARAM_OCTET_PTR
, (
addr
), 
sz
)

	)

71 
OSSL_PARAM
 *
OSSL_PARAM_loˇã
(OSSL_PARAM *
p
, c⁄° *
key
);

72 c⁄° 
OSSL_PARAM
 *
OSSL_PARAM_loˇã_c⁄°
(c⁄° OSSL_PARAM *
p
, c⁄° *
key
);

75 
OSSL_PARAM
 
OSSL_PARAM_c⁄°ru˘_öt
(c⁄° *
key
, *
buf
);

76 
OSSL_PARAM
 
OSSL_PARAM_c⁄°ru˘_uöt
(c⁄° *
key
, *
buf
);

77 
OSSL_PARAM
 
OSSL_PARAM_c⁄°ru˘_l⁄g
(c⁄° *
key
, *
buf
);

78 
OSSL_PARAM
 
OSSL_PARAM_c⁄°ru˘_ul⁄g
(c⁄° *
key
, *
buf
);

79 
OSSL_PARAM
 
OSSL_PARAM_c⁄°ru˘_öt32
(c⁄° *
key
, 
öt32_t
 *
buf
);

80 
OSSL_PARAM
 
OSSL_PARAM_c⁄°ru˘_uöt32
(c⁄° *
key
, 
uöt32_t
 *
buf
);

81 
OSSL_PARAM
 
OSSL_PARAM_c⁄°ru˘_öt64
(c⁄° *
key
, 
öt64_t
 *
buf
);

82 
OSSL_PARAM
 
OSSL_PARAM_c⁄°ru˘_uöt64
(c⁄° *
key
, 
uöt64_t
 *
buf
);

83 
OSSL_PARAM
 
OSSL_PARAM_c⁄°ru˘_size_t
(c⁄° *
key
, 
size_t
 *
buf
);

84 
OSSL_PARAM
 
OSSL_PARAM_c⁄°ru˘_time_t
(c⁄° *
key
, 
time_t
 *
buf
);

85 
OSSL_PARAM
 
OSSL_PARAM_c⁄°ru˘_BN
(c⁄° *
key
, *
buf
,

86 
size_t
 
bsize
);

87 
OSSL_PARAM
 
OSSL_PARAM_c⁄°ru˘_doubÀ
(c⁄° *
key
, *
buf
);

88 
OSSL_PARAM
 
OSSL_PARAM_c⁄°ru˘_utf8_°rög
(c⁄° *
key
, *
buf
,

89 
size_t
 
bsize
);

90 
OSSL_PARAM
 
OSSL_PARAM_c⁄°ru˘_utf8_±r
(c⁄° *
key
, **
buf
,

91 
size_t
 
bsize
);

92 
OSSL_PARAM
 
OSSL_PARAM_c⁄°ru˘_o˘ë_°rög
(c⁄° *
key
, *
buf
,

93 
size_t
 
bsize
);

94 
OSSL_PARAM
 
OSSL_PARAM_c⁄°ru˘_o˘ë_±r
(c⁄° *
key
, **
buf
,

95 
size_t
 
bsize
);

96 
OSSL_PARAM
 
OSSL_PARAM_c⁄°ru˘_íd
();

98 
OSSL_PARAM_Æloˇã_‰om_ãxt
(
OSSL_PARAM
 *
to
,

99 c⁄° 
OSSL_PARAM
 *
∑ømdefs
,

100 c⁄° *
key
, c⁄° *
vÆue
,

101 
size_t
 
vÆue_n
, *
found
);

103 
OSSL_PARAM_gë_öt
(c⁄° 
OSSL_PARAM
 *
p
, *
vÆ
);

104 
OSSL_PARAM_gë_uöt
(c⁄° 
OSSL_PARAM
 *
p
, *
vÆ
);

105 
OSSL_PARAM_gë_l⁄g
(c⁄° 
OSSL_PARAM
 *
p
, *
vÆ
);

106 
OSSL_PARAM_gë_ul⁄g
(c⁄° 
OSSL_PARAM
 *
p
, *
vÆ
);

107 
OSSL_PARAM_gë_öt32
(c⁄° 
OSSL_PARAM
 *
p
, 
öt32_t
 *
vÆ
);

108 
OSSL_PARAM_gë_uöt32
(c⁄° 
OSSL_PARAM
 *
p
, 
uöt32_t
 *
vÆ
);

109 
OSSL_PARAM_gë_öt64
(c⁄° 
OSSL_PARAM
 *
p
, 
öt64_t
 *
vÆ
);

110 
OSSL_PARAM_gë_uöt64
(c⁄° 
OSSL_PARAM
 *
p
, 
uöt64_t
 *
vÆ
);

111 
OSSL_PARAM_gë_size_t
(c⁄° 
OSSL_PARAM
 *
p
, 
size_t
 *
vÆ
);

112 
OSSL_PARAM_gë_time_t
(c⁄° 
OSSL_PARAM
 *
p
, 
time_t
 *
vÆ
);

114 
OSSL_PARAM_£t_öt
(
OSSL_PARAM
 *
p
, 
vÆ
);

115 
OSSL_PARAM_£t_uöt
(
OSSL_PARAM
 *
p
, 
vÆ
);

116 
OSSL_PARAM_£t_l⁄g
(
OSSL_PARAM
 *
p
, 
vÆ
);

117 
OSSL_PARAM_£t_ul⁄g
(
OSSL_PARAM
 *
p
, 
vÆ
);

118 
OSSL_PARAM_£t_öt32
(
OSSL_PARAM
 *
p
, 
öt32_t
 
vÆ
);

119 
OSSL_PARAM_£t_uöt32
(
OSSL_PARAM
 *
p
, 
uöt32_t
 
vÆ
);

120 
OSSL_PARAM_£t_öt64
(
OSSL_PARAM
 *
p
, 
öt64_t
 
vÆ
);

121 
OSSL_PARAM_£t_uöt64
(
OSSL_PARAM
 *
p
, 
uöt64_t
 
vÆ
);

122 
OSSL_PARAM_£t_size_t
(
OSSL_PARAM
 *
p
, 
size_t
 
vÆ
);

123 
OSSL_PARAM_£t_time_t
(
OSSL_PARAM
 *
p
, 
time_t
 
vÆ
);

125 
OSSL_PARAM_gë_doubÀ
(c⁄° 
OSSL_PARAM
 *
p
, *
vÆ
);

126 
OSSL_PARAM_£t_doubÀ
(
OSSL_PARAM
 *
p
, 
vÆ
);

128 
OSSL_PARAM_gë_BN
(c⁄° 
OSSL_PARAM
 *
p
, 
BIGNUM
 **
vÆ
);

129 
OSSL_PARAM_£t_BN
(
OSSL_PARAM
 *
p
, c⁄° 
BIGNUM
 *
vÆ
);

131 
OSSL_PARAM_gë_utf8_°rög
(c⁄° 
OSSL_PARAM
 *
p
, **
vÆ
, 
size_t
 
max_Àn
);

132 
OSSL_PARAM_£t_utf8_°rög
(
OSSL_PARAM
 *
p
, c⁄° *
vÆ
);

134 
OSSL_PARAM_gë_o˘ë_°rög
(c⁄° 
OSSL_PARAM
 *
p
, **
vÆ
, 
size_t
 
max_Àn
,

135 
size_t
 *
u£d_Àn
);

136 
OSSL_PARAM_£t_o˘ë_°rög
(
OSSL_PARAM
 *
p
, c⁄° *
vÆ
, 
size_t
 
Àn
);

138 
OSSL_PARAM_gë_utf8_±r
(c⁄° 
OSSL_PARAM
 *
p
, c⁄° **
vÆ
);

139 
OSSL_PARAM_£t_utf8_±r
(
OSSL_PARAM
 *
p
, c⁄° *
vÆ
);

141 
OSSL_PARAM_gë_o˘ë_±r
(c⁄° 
OSSL_PARAM
 *
p
, c⁄° **
vÆ
,

142 
size_t
 *
u£d_Àn
);

143 
OSSL_PARAM_£t_o˘ë_±r
(
OSSL_PARAM
 *
p
, c⁄° *
vÆ
,

144 
size_t
 
u£d_Àn
);

146 
OSSL_PARAM_gë_utf8_°rög_±r
(c⁄° 
OSSL_PARAM
 *
p
, c⁄° **
vÆ
);

147 
OSSL_PARAM_gë_o˘ë_°rög_±r
(c⁄° 
OSSL_PARAM
 *
p
, c⁄° **
vÆ
,

148 
size_t
 *
u£d_Àn
);

150 
OSSL_PARAM_modifõd
(c⁄° 
OSSL_PARAM
 *
p
);

151 
OSSL_PARAM_£t_Æl_unmodifõd
(
OSSL_PARAM
 *
p
);

153 
OSSL_PARAM
 *
OSSL_PARAM_dup
(c⁄° OSSL_PARAM *
p
);

154 
OSSL_PARAM
 *
OSSL_PARAM_mîge
(c⁄° OSSL_PARAM *
p1
, c⁄° OSSL_PARAM *
p2
);

155 
OSSL_PARAM_‰ì
(
OSSL_PARAM
 *
p
);

157 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/pkcs7err.h

11 #i‚de‡
OPENSSL_PKCS7ERR_H


12 
	#OPENSSL_PKCS7ERR_H


	)

13 #¥agm®
⁄˚


15 
	~<›ís¶/›ís¶c⁄f.h
>

16 
	~<›ís¶/symhacks.h
>

17 
	~<›ís¶/¸y±€º_Àgacy.h
>

24 
	#PKCS7_R_CERTIFICATE_VERIFY_ERROR
 117

	)

25 
	#PKCS7_R_CIPHER_HAS_NO_OBJECT_IDENTIFIER
 144

	)

26 
	#PKCS7_R_CIPHER_NOT_INITIALIZED
 116

	)

27 
	#PKCS7_R_CONTENT_AND_DATA_PRESENT
 118

	)

28 
	#PKCS7_R_CTRL_ERROR
 152

	)

29 
	#PKCS7_R_DECRYPT_ERROR
 119

	)

30 
	#PKCS7_R_DIGEST_FAILURE
 101

	)

31 
	#PKCS7_R_ENCRYPTION_CTRL_FAILURE
 149

	)

32 
	#PKCS7_R_ENCRYPTION_NOT_SUPPORTED_FOR_THIS_KEY_TYPE
 150

	)

33 
	#PKCS7_R_ERROR_ADDING_RECIPIENT
 120

	)

34 
	#PKCS7_R_ERROR_SETTING_CIPHER
 121

	)

35 
	#PKCS7_R_INVALID_NULL_POINTER
 143

	)

36 
	#PKCS7_R_INVALID_SIGNED_DATA_TYPE
 155

	)

37 
	#PKCS7_R_NO_CONTENT
 122

	)

38 
	#PKCS7_R_NO_DEFAULT_DIGEST
 151

	)

39 
	#PKCS7_R_NO_MATCHING_DIGEST_TYPE_FOUND
 154

	)

40 
	#PKCS7_R_NO_RECIPIENT_MATCHES_CERTIFICATE
 115

	)

41 
	#PKCS7_R_NO_SIGNATURES_ON_DATA
 123

	)

42 
	#PKCS7_R_NO_SIGNERS
 142

	)

43 
	#PKCS7_R_OPERATION_NOT_SUPPORTED_ON_THIS_TYPE
 104

	)

44 
	#PKCS7_R_PKCS7_ADD_SIGNATURE_ERROR
 124

	)

45 
	#PKCS7_R_PKCS7_ADD_SIGNER_ERROR
 153

	)

46 
	#PKCS7_R_PKCS7_DATASIGN
 145

	)

47 
	#PKCS7_R_PRIVATE_KEY_DOES_NOT_MATCH_CERTIFICATE
 127

	)

48 
	#PKCS7_R_SIGNATURE_FAILURE
 105

	)

49 
	#PKCS7_R_SIGNER_CERTIFICATE_NOT_FOUND
 128

	)

50 
	#PKCS7_R_SIGNING_CTRL_FAILURE
 147

	)

51 
	#PKCS7_R_SIGNING_NOT_SUPPORTED_FOR_THIS_KEY_TYPE
 148

	)

52 
	#PKCS7_R_SMIME_TEXT_ERROR
 129

	)

53 
	#PKCS7_R_UNABLE_TO_FIND_CERTIFICATE
 106

	)

54 
	#PKCS7_R_UNABLE_TO_FIND_MEM_BIO
 107

	)

55 
	#PKCS7_R_UNABLE_TO_FIND_MESSAGE_DIGEST
 108

	)

56 
	#PKCS7_R_UNKNOWN_DIGEST_TYPE
 109

	)

57 
	#PKCS7_R_UNKNOWN_OPERATION
 110

	)

58 
	#PKCS7_R_UNSUPPORTED_CIPHER_TYPE
 111

	)

59 
	#PKCS7_R_UNSUPPORTED_CONTENT_TYPE
 112

	)

60 
	#PKCS7_R_WRONG_CONTENT_TYPE
 113

	)

61 
	#PKCS7_R_WRONG_PKCS7_TYPE
 114

	)

	@/usr/include/openssl/sslerr_legacy.h

17 #i‚de‡
OPENSSL_SSLERR_LEGACY_H


18 
	#OPENSSL_SSLERR_LEGACY_H


	)

19 #¥agm®
⁄˚


21 
	~<›ís¶/ma¸os.h
>

22 
	~<›ís¶/symhacks.h
>

24 #ifde‡ 
__˝lu•lus


28 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


29 
OSSL_DEPRECATEDIN_3_0
 
ERR_lﬂd_SSL_°rögs
();

36 
	#SSL_F_ADD_CLIENT_KEY_SHARE_EXT
 0

	)

37 
	#SSL_F_ADD_KEY_SHARE
 0

	)

38 
	#SSL_F_BYTES_TO_CIPHER_LIST
 0

	)

39 
	#SSL_F_CHECK_SUITEB_CIPHER_LIST
 0

	)

40 
	#SSL_F_CIPHERSUITE_CB
 0

	)

41 
	#SSL_F_CONSTRUCT_CA_NAMES
 0

	)

42 
	#SSL_F_CONSTRUCT_KEY_EXCHANGE_TBS
 0

	)

43 
	#SSL_F_CONSTRUCT_STATEFUL_TICKET
 0

	)

44 
	#SSL_F_CONSTRUCT_STATELESS_TICKET
 0

	)

45 
	#SSL_F_CREATE_SYNTHETIC_MESSAGE_HASH
 0

	)

46 
	#SSL_F_CREATE_TICKET_PREQUEL
 0

	)

47 
	#SSL_F_CT_MOVE_SCTS
 0

	)

48 
	#SSL_F_CT_STRICT
 0

	)

49 
	#SSL_F_CUSTOM_EXT_ADD
 0

	)

50 
	#SSL_F_CUSTOM_EXT_PARSE
 0

	)

51 
	#SSL_F_D2I_SSL_SESSION
 0

	)

52 
	#SSL_F_DANE_CTX_ENABLE
 0

	)

53 
	#SSL_F_DANE_MTYPE_SET
 0

	)

54 
	#SSL_F_DANE_TLSA_ADD
 0

	)

55 
	#SSL_F_DERIVE_SECRET_KEY_AND_IV
 0

	)

56 
	#SSL_F_DO_DTLS1_WRITE
 0

	)

57 
	#SSL_F_DO_SSL3_WRITE
 0

	)

58 
	#SSL_F_DTLS1_BUFFER_RECORD
 0

	)

59 
	#SSL_F_DTLS1_CHECK_TIMEOUT_NUM
 0

	)

60 
	#SSL_F_DTLS1_HEARTBEAT
 0

	)

61 
	#SSL_F_DTLS1_HM_FRAGMENT_NEW
 0

	)

62 
	#SSL_F_DTLS1_PREPROCESS_FRAGMENT
 0

	)

63 
	#SSL_F_DTLS1_PROCESS_BUFFERED_RECORDS
 0

	)

64 
	#SSL_F_DTLS1_PROCESS_RECORD
 0

	)

65 
	#SSL_F_DTLS1_READ_BYTES
 0

	)

66 
	#SSL_F_DTLS1_READ_FAILED
 0

	)

67 
	#SSL_F_DTLS1_RETRANSMIT_MESSAGE
 0

	)

68 
	#SSL_F_DTLS1_WRITE_APP_DATA_BYTES
 0

	)

69 
	#SSL_F_DTLS1_WRITE_BYTES
 0

	)

70 
	#SSL_F_DTLSV1_LISTEN
 0

	)

71 
	#SSL_F_DTLS_CONSTRUCT_CHANGE_CIPHER_SPEC
 0

	)

72 
	#SSL_F_DTLS_CONSTRUCT_HELLO_VERIFY_REQUEST
 0

	)

73 
	#SSL_F_DTLS_GET_REASSEMBLED_MESSAGE
 0

	)

74 
	#SSL_F_DTLS_PROCESS_HELLO_VERIFY
 0

	)

75 
	#SSL_F_DTLS_RECORD_LAYER_NEW
 0

	)

76 
	#SSL_F_DTLS_WAIT_FOR_DRY
 0

	)

77 
	#SSL_F_EARLY_DATA_COUNT_OK
 0

	)

78 
	#SSL_F_FINAL_EARLY_DATA
 0

	)

79 
	#SSL_F_FINAL_EC_PT_FORMATS
 0

	)

80 
	#SSL_F_FINAL_EMS
 0

	)

81 
	#SSL_F_FINAL_KEY_SHARE
 0

	)

82 
	#SSL_F_FINAL_MAXFRAGMENTLEN
 0

	)

83 
	#SSL_F_FINAL_RENEGOTIATE
 0

	)

84 
	#SSL_F_FINAL_SERVER_NAME
 0

	)

85 
	#SSL_F_FINAL_SIG_ALGS
 0

	)

86 
	#SSL_F_GET_CERT_VERIFY_TBS_DATA
 0

	)

87 
	#SSL_F_NSS_KEYLOG_INT
 0

	)

88 
	#SSL_F_OPENSSL_INIT_SSL
 0

	)

89 
	#SSL_F_OSSL_STATEM_CLIENT13_READ_TRANSITION
 0

	)

90 
	#SSL_F_OSSL_STATEM_CLIENT13_WRITE_TRANSITION
 0

	)

91 
	#SSL_F_OSSL_STATEM_CLIENT_CONSTRUCT_MESSAGE
 0

	)

92 
	#SSL_F_OSSL_STATEM_CLIENT_POST_PROCESS_MESSAGE
 0

	)

93 
	#SSL_F_OSSL_STATEM_CLIENT_PROCESS_MESSAGE
 0

	)

94 
	#SSL_F_OSSL_STATEM_CLIENT_READ_TRANSITION
 0

	)

95 
	#SSL_F_OSSL_STATEM_CLIENT_WRITE_TRANSITION
 0

	)

96 
	#SSL_F_OSSL_STATEM_SERVER13_READ_TRANSITION
 0

	)

97 
	#SSL_F_OSSL_STATEM_SERVER13_WRITE_TRANSITION
 0

	)

98 
	#SSL_F_OSSL_STATEM_SERVER_CONSTRUCT_MESSAGE
 0

	)

99 
	#SSL_F_OSSL_STATEM_SERVER_POST_PROCESS_MESSAGE
 0

	)

100 
	#SSL_F_OSSL_STATEM_SERVER_POST_WORK
 0

	)

101 
	#SSL_F_OSSL_STATEM_SERVER_PRE_WORK
 0

	)

102 
	#SSL_F_OSSL_STATEM_SERVER_PROCESS_MESSAGE
 0

	)

103 
	#SSL_F_OSSL_STATEM_SERVER_READ_TRANSITION
 0

	)

104 
	#SSL_F_OSSL_STATEM_SERVER_WRITE_TRANSITION
 0

	)

105 
	#SSL_F_PARSE_CA_NAMES
 0

	)

106 
	#SSL_F_PITEM_NEW
 0

	)

107 
	#SSL_F_PQUEUE_NEW
 0

	)

108 
	#SSL_F_PROCESS_KEY_SHARE_EXT
 0

	)

109 
	#SSL_F_READ_STATE_MACHINE
 0

	)

110 
	#SSL_F_SET_CLIENT_CIPHERSUITE
 0

	)

111 
	#SSL_F_SRP_GENERATE_CLIENT_MASTER_SECRET
 0

	)

112 
	#SSL_F_SRP_GENERATE_SERVER_MASTER_SECRET
 0

	)

113 
	#SSL_F_SRP_VERIFY_SERVER_PARAM
 0

	)

114 
	#SSL_F_SSL3_CHANGE_CIPHER_STATE
 0

	)

115 
	#SSL_F_SSL3_CHECK_CERT_AND_ALGORITHM
 0

	)

116 
	#SSL_F_SSL3_CTRL
 0

	)

117 
	#SSL_F_SSL3_CTX_CTRL
 0

	)

118 
	#SSL_F_SSL3_DIGEST_CACHED_RECORDS
 0

	)

119 
	#SSL_F_SSL3_DO_CHANGE_CIPHER_SPEC
 0

	)

120 
	#SSL_F_SSL3_ENC
 0

	)

121 
	#SSL_F_SSL3_FINAL_FINISH_MAC
 0

	)

122 
	#SSL_F_SSL3_FINISH_MAC
 0

	)

123 
	#SSL_F_SSL3_GENERATE_KEY_BLOCK
 0

	)

124 
	#SSL_F_SSL3_GENERATE_MASTER_SECRET
 0

	)

125 
	#SSL_F_SSL3_GET_RECORD
 0

	)

126 
	#SSL_F_SSL3_INIT_FINISHED_MAC
 0

	)

127 
	#SSL_F_SSL3_OUTPUT_CERT_CHAIN
 0

	)

128 
	#SSL_F_SSL3_READ_BYTES
 0

	)

129 
	#SSL_F_SSL3_READ_N
 0

	)

130 
	#SSL_F_SSL3_SETUP_KEY_BLOCK
 0

	)

131 
	#SSL_F_SSL3_SETUP_READ_BUFFER
 0

	)

132 
	#SSL_F_SSL3_SETUP_WRITE_BUFFER
 0

	)

133 
	#SSL_F_SSL3_WRITE_BYTES
 0

	)

134 
	#SSL_F_SSL3_WRITE_PENDING
 0

	)

135 
	#SSL_F_SSL_ADD_CERT_CHAIN
 0

	)

136 
	#SSL_F_SSL_ADD_CERT_TO_BUF
 0

	)

137 
	#SSL_F_SSL_ADD_CERT_TO_WPACKET
 0

	)

138 
	#SSL_F_SSL_ADD_CLIENTHELLO_RENEGOTIATE_EXT
 0

	)

139 
	#SSL_F_SSL_ADD_CLIENTHELLO_TLSEXT
 0

	)

140 
	#SSL_F_SSL_ADD_CLIENTHELLO_USE_SRTP_EXT
 0

	)

141 
	#SSL_F_SSL_ADD_DIR_CERT_SUBJECTS_TO_STACK
 0

	)

142 
	#SSL_F_SSL_ADD_FILE_CERT_SUBJECTS_TO_STACK
 0

	)

143 
	#SSL_F_SSL_ADD_SERVERHELLO_RENEGOTIATE_EXT
 0

	)

144 
	#SSL_F_SSL_ADD_SERVERHELLO_TLSEXT
 0

	)

145 
	#SSL_F_SSL_ADD_SERVERHELLO_USE_SRTP_EXT
 0

	)

146 
	#SSL_F_SSL_BAD_METHOD
 0

	)

147 
	#SSL_F_SSL_BUILD_CERT_CHAIN
 0

	)

148 
	#SSL_F_SSL_BYTES_TO_CIPHER_LIST
 0

	)

149 
	#SSL_F_SSL_CACHE_CIPHERLIST
 0

	)

150 
	#SSL_F_SSL_CERT_ADD0_CHAIN_CERT
 0

	)

151 
	#SSL_F_SSL_CERT_DUP
 0

	)

152 
	#SSL_F_SSL_CERT_NEW
 0

	)

153 
	#SSL_F_SSL_CERT_SET0_CHAIN
 0

	)

154 
	#SSL_F_SSL_CHECK_PRIVATE_KEY
 0

	)

155 
	#SSL_F_SSL_CHECK_SERVERHELLO_TLSEXT
 0

	)

156 
	#SSL_F_SSL_CHECK_SRP_EXT_CLIENTHELLO
 0

	)

157 
	#SSL_F_SSL_CHECK_SRVR_ECC_CERT_AND_ALG
 0

	)

158 
	#SSL_F_SSL_CHOOSE_CLIENT_VERSION
 0

	)

159 
	#SSL_F_SSL_CIPHER_DESCRIPTION
 0

	)

160 
	#SSL_F_SSL_CIPHER_LIST_TO_BYTES
 0

	)

161 
	#SSL_F_SSL_CIPHER_PROCESS_RULESTR
 0

	)

162 
	#SSL_F_SSL_CIPHER_STRENGTH_SORT
 0

	)

163 
	#SSL_F_SSL_CLEAR
 0

	)

164 
	#SSL_F_SSL_CLIENT_HELLO_GET1_EXTENSIONS_PRESENT
 0

	)

165 
	#SSL_F_SSL_COMP_ADD_COMPRESSION_METHOD
 0

	)

166 
	#SSL_F_SSL_CONF_CMD
 0

	)

167 
	#SSL_F_SSL_CREATE_CIPHER_LIST
 0

	)

168 
	#SSL_F_SSL_CTRL
 0

	)

169 
	#SSL_F_SSL_CTX_CHECK_PRIVATE_KEY
 0

	)

170 
	#SSL_F_SSL_CTX_ENABLE_CT
 0

	)

171 
	#SSL_F_SSL_CTX_MAKE_PROFILES
 0

	)

172 
	#SSL_F_SSL_CTX_NEW
 0

	)

173 
	#SSL_F_SSL_CTX_SET_ALPN_PROTOS
 0

	)

174 
	#SSL_F_SSL_CTX_SET_CIPHER_LIST
 0

	)

175 
	#SSL_F_SSL_CTX_SET_CLIENT_CERT_ENGINE
 0

	)

176 
	#SSL_F_SSL_CTX_SET_CT_VALIDATION_CALLBACK
 0

	)

177 
	#SSL_F_SSL_CTX_SET_SESSION_ID_CONTEXT
 0

	)

178 
	#SSL_F_SSL_CTX_SET_SSL_VERSION
 0

	)

179 
	#SSL_F_SSL_CTX_SET_TLSEXT_MAX_FRAGMENT_LENGTH
 0

	)

180 
	#SSL_F_SSL_CTX_USE_CERTIFICATE
 0

	)

181 
	#SSL_F_SSL_CTX_USE_CERTIFICATE_ASN1
 0

	)

182 
	#SSL_F_SSL_CTX_USE_CERTIFICATE_FILE
 0

	)

183 
	#SSL_F_SSL_CTX_USE_PRIVATEKEY
 0

	)

184 
	#SSL_F_SSL_CTX_USE_PRIVATEKEY_ASN1
 0

	)

185 
	#SSL_F_SSL_CTX_USE_PRIVATEKEY_FILE
 0

	)

186 
	#SSL_F_SSL_CTX_USE_PSK_IDENTITY_HINT
 0

	)

187 
	#SSL_F_SSL_CTX_USE_RSAPRIVATEKEY
 0

	)

188 
	#SSL_F_SSL_CTX_USE_RSAPRIVATEKEY_ASN1
 0

	)

189 
	#SSL_F_SSL_CTX_USE_RSAPRIVATEKEY_FILE
 0

	)

190 
	#SSL_F_SSL_CTX_USE_SERVERINFO
 0

	)

191 
	#SSL_F_SSL_CTX_USE_SERVERINFO_EX
 0

	)

192 
	#SSL_F_SSL_CTX_USE_SERVERINFO_FILE
 0

	)

193 
	#SSL_F_SSL_DANE_DUP
 0

	)

194 
	#SSL_F_SSL_DANE_ENABLE
 0

	)

195 
	#SSL_F_SSL_DERIVE
 0

	)

196 
	#SSL_F_SSL_DO_CONFIG
 0

	)

197 
	#SSL_F_SSL_DO_HANDSHAKE
 0

	)

198 
	#SSL_F_SSL_DUP_CA_LIST
 0

	)

199 
	#SSL_F_SSL_ENABLE_CT
 0

	)

200 
	#SSL_F_SSL_GENERATE_PKEY_GROUP
 0

	)

201 
	#SSL_F_SSL_GENERATE_SESSION_ID
 0

	)

202 
	#SSL_F_SSL_GET_NEW_SESSION
 0

	)

203 
	#SSL_F_SSL_GET_PREV_SESSION
 0

	)

204 
	#SSL_F_SSL_GET_SERVER_CERT_INDEX
 0

	)

205 
	#SSL_F_SSL_GET_SIGN_PKEY
 0

	)

206 
	#SSL_F_SSL_HANDSHAKE_HASH
 0

	)

207 
	#SSL_F_SSL_INIT_WBIO_BUFFER
 0

	)

208 
	#SSL_F_SSL_KEY_UPDATE
 0

	)

209 
	#SSL_F_SSL_LOAD_CLIENT_CA_FILE
 0

	)

210 
	#SSL_F_SSL_LOG_MASTER_SECRET
 0

	)

211 
	#SSL_F_SSL_LOG_RSA_CLIENT_KEY_EXCHANGE
 0

	)

212 
	#SSL_F_SSL_MODULE_INIT
 0

	)

213 
	#SSL_F_SSL_NEW
 0

	)

214 
	#SSL_F_SSL_NEXT_PROTO_VALIDATE
 0

	)

215 
	#SSL_F_SSL_PARSE_CLIENTHELLO_RENEGOTIATE_EXT
 0

	)

216 
	#SSL_F_SSL_PARSE_CLIENTHELLO_TLSEXT
 0

	)

217 
	#SSL_F_SSL_PARSE_CLIENTHELLO_USE_SRTP_EXT
 0

	)

218 
	#SSL_F_SSL_PARSE_SERVERHELLO_RENEGOTIATE_EXT
 0

	)

219 
	#SSL_F_SSL_PARSE_SERVERHELLO_TLSEXT
 0

	)

220 
	#SSL_F_SSL_PARSE_SERVERHELLO_USE_SRTP_EXT
 0

	)

221 
	#SSL_F_SSL_PEEK
 0

	)

222 
	#SSL_F_SSL_PEEK_EX
 0

	)

223 
	#SSL_F_SSL_PEEK_INTERNAL
 0

	)

224 
	#SSL_F_SSL_READ
 0

	)

225 
	#SSL_F_SSL_READ_EARLY_DATA
 0

	)

226 
	#SSL_F_SSL_READ_EX
 0

	)

227 
	#SSL_F_SSL_READ_INTERNAL
 0

	)

228 
	#SSL_F_SSL_RENEGOTIATE
 0

	)

229 
	#SSL_F_SSL_RENEGOTIATE_ABBREVIATED
 0

	)

230 
	#SSL_F_SSL_SCAN_CLIENTHELLO_TLSEXT
 0

	)

231 
	#SSL_F_SSL_SCAN_SERVERHELLO_TLSEXT
 0

	)

232 
	#SSL_F_SSL_SESSION_DUP
 0

	)

233 
	#SSL_F_SSL_SESSION_NEW
 0

	)

234 
	#SSL_F_SSL_SESSION_PRINT_FP
 0

	)

235 
	#SSL_F_SSL_SESSION_SET1_ID
 0

	)

236 
	#SSL_F_SSL_SESSION_SET1_ID_CONTEXT
 0

	)

237 
	#SSL_F_SSL_SET_ALPN_PROTOS
 0

	)

238 
	#SSL_F_SSL_SET_CERT
 0

	)

239 
	#SSL_F_SSL_SET_CERT_AND_KEY
 0

	)

240 
	#SSL_F_SSL_SET_CIPHER_LIST
 0

	)

241 
	#SSL_F_SSL_SET_CT_VALIDATION_CALLBACK
 0

	)

242 
	#SSL_F_SSL_SET_FD
 0

	)

243 
	#SSL_F_SSL_SET_PKEY
 0

	)

244 
	#SSL_F_SSL_SET_RFD
 0

	)

245 
	#SSL_F_SSL_SET_SESSION
 0

	)

246 
	#SSL_F_SSL_SET_SESSION_ID_CONTEXT
 0

	)

247 
	#SSL_F_SSL_SET_SESSION_TICKET_EXT
 0

	)

248 
	#SSL_F_SSL_SET_TLSEXT_MAX_FRAGMENT_LENGTH
 0

	)

249 
	#SSL_F_SSL_SET_WFD
 0

	)

250 
	#SSL_F_SSL_SHUTDOWN
 0

	)

251 
	#SSL_F_SSL_SRP_CTX_INIT
 0

	)

252 
	#SSL_F_SSL_START_ASYNC_JOB
 0

	)

253 
	#SSL_F_SSL_UNDEFINED_FUNCTION
 0

	)

254 
	#SSL_F_SSL_UNDEFINED_VOID_FUNCTION
 0

	)

255 
	#SSL_F_SSL_USE_CERTIFICATE
 0

	)

256 
	#SSL_F_SSL_USE_CERTIFICATE_ASN1
 0

	)

257 
	#SSL_F_SSL_USE_CERTIFICATE_FILE
 0

	)

258 
	#SSL_F_SSL_USE_PRIVATEKEY
 0

	)

259 
	#SSL_F_SSL_USE_PRIVATEKEY_ASN1
 0

	)

260 
	#SSL_F_SSL_USE_PRIVATEKEY_FILE
 0

	)

261 
	#SSL_F_SSL_USE_PSK_IDENTITY_HINT
 0

	)

262 
	#SSL_F_SSL_USE_RSAPRIVATEKEY
 0

	)

263 
	#SSL_F_SSL_USE_RSAPRIVATEKEY_ASN1
 0

	)

264 
	#SSL_F_SSL_USE_RSAPRIVATEKEY_FILE
 0

	)

265 
	#SSL_F_SSL_VALIDATE_CT
 0

	)

266 
	#SSL_F_SSL_VERIFY_CERT_CHAIN
 0

	)

267 
	#SSL_F_SSL_VERIFY_CLIENT_POST_HANDSHAKE
 0

	)

268 
	#SSL_F_SSL_WRITE
 0

	)

269 
	#SSL_F_SSL_WRITE_EARLY_DATA
 0

	)

270 
	#SSL_F_SSL_WRITE_EARLY_FINISH
 0

	)

271 
	#SSL_F_SSL_WRITE_EX
 0

	)

272 
	#SSL_F_SSL_WRITE_INTERNAL
 0

	)

273 
	#SSL_F_STATE_MACHINE
 0

	)

274 
	#SSL_F_TLS12_CHECK_PEER_SIGALG
 0

	)

275 
	#SSL_F_TLS12_COPY_SIGALGS
 0

	)

276 
	#SSL_F_TLS13_CHANGE_CIPHER_STATE
 0

	)

277 
	#SSL_F_TLS13_ENC
 0

	)

278 
	#SSL_F_TLS13_FINAL_FINISH_MAC
 0

	)

279 
	#SSL_F_TLS13_GENERATE_SECRET
 0

	)

280 
	#SSL_F_TLS13_HKDF_EXPAND
 0

	)

281 
	#SSL_F_TLS13_RESTORE_HANDSHAKE_DIGEST_FOR_PHA
 0

	)

282 
	#SSL_F_TLS13_SAVE_HANDSHAKE_DIGEST_FOR_PHA
 0

	)

283 
	#SSL_F_TLS13_SETUP_KEY_BLOCK
 0

	)

284 
	#SSL_F_TLS1_CHANGE_CIPHER_STATE
 0

	)

285 
	#SSL_F_TLS1_CHECK_DUPLICATE_EXTENSIONS
 0

	)

286 
	#SSL_F_TLS1_ENC
 0

	)

287 
	#SSL_F_TLS1_EXPORT_KEYING_MATERIAL
 0

	)

288 
	#SSL_F_TLS1_GET_CURVELIST
 0

	)

289 
	#SSL_F_TLS1_PRF
 0

	)

290 
	#SSL_F_TLS1_SAVE_U16
 0

	)

291 
	#SSL_F_TLS1_SETUP_KEY_BLOCK
 0

	)

292 
	#SSL_F_TLS1_SET_GROUPS
 0

	)

293 
	#SSL_F_TLS1_SET_RAW_SIGALGS
 0

	)

294 
	#SSL_F_TLS1_SET_SERVER_SIGALGS
 0

	)

295 
	#SSL_F_TLS1_SET_SHARED_SIGALGS
 0

	)

296 
	#SSL_F_TLS1_SET_SIGALGS
 0

	)

297 
	#SSL_F_TLS_CHOOSE_SIGALG
 0

	)

298 
	#SSL_F_TLS_CLIENT_KEY_EXCHANGE_POST_WORK
 0

	)

299 
	#SSL_F_TLS_COLLECT_EXTENSIONS
 0

	)

300 
	#SSL_F_TLS_CONSTRUCT_CERTIFICATE_AUTHORITIES
 0

	)

301 
	#SSL_F_TLS_CONSTRUCT_CERTIFICATE_REQUEST
 0

	)

302 
	#SSL_F_TLS_CONSTRUCT_CERT_STATUS
 0

	)

303 
	#SSL_F_TLS_CONSTRUCT_CERT_STATUS_BODY
 0

	)

304 
	#SSL_F_TLS_CONSTRUCT_CERT_VERIFY
 0

	)

305 
	#SSL_F_TLS_CONSTRUCT_CHANGE_CIPHER_SPEC
 0

	)

306 
	#SSL_F_TLS_CONSTRUCT_CKE_DHE
 0

	)

307 
	#SSL_F_TLS_CONSTRUCT_CKE_ECDHE
 0

	)

308 
	#SSL_F_TLS_CONSTRUCT_CKE_GOST
 0

	)

309 
	#SSL_F_TLS_CONSTRUCT_CKE_PSK_PREAMBLE
 0

	)

310 
	#SSL_F_TLS_CONSTRUCT_CKE_RSA
 0

	)

311 
	#SSL_F_TLS_CONSTRUCT_CKE_SRP
 0

	)

312 
	#SSL_F_TLS_CONSTRUCT_CLIENT_CERTIFICATE
 0

	)

313 
	#SSL_F_TLS_CONSTRUCT_CLIENT_HELLO
 0

	)

314 
	#SSL_F_TLS_CONSTRUCT_CLIENT_KEY_EXCHANGE
 0

	)

315 
	#SSL_F_TLS_CONSTRUCT_CLIENT_VERIFY
 0

	)

316 
	#SSL_F_TLS_CONSTRUCT_CTOS_ALPN
 0

	)

317 
	#SSL_F_TLS_CONSTRUCT_CTOS_CERTIFICATE
 0

	)

318 
	#SSL_F_TLS_CONSTRUCT_CTOS_COOKIE
 0

	)

319 
	#SSL_F_TLS_CONSTRUCT_CTOS_EARLY_DATA
 0

	)

320 
	#SSL_F_TLS_CONSTRUCT_CTOS_EC_PT_FORMATS
 0

	)

321 
	#SSL_F_TLS_CONSTRUCT_CTOS_EMS
 0

	)

322 
	#SSL_F_TLS_CONSTRUCT_CTOS_ETM
 0

	)

323 
	#SSL_F_TLS_CONSTRUCT_CTOS_HELLO
 0

	)

324 
	#SSL_F_TLS_CONSTRUCT_CTOS_KEY_EXCHANGE
 0

	)

325 
	#SSL_F_TLS_CONSTRUCT_CTOS_KEY_SHARE
 0

	)

326 
	#SSL_F_TLS_CONSTRUCT_CTOS_MAXFRAGMENTLEN
 0

	)

327 
	#SSL_F_TLS_CONSTRUCT_CTOS_NPN
 0

	)

328 
	#SSL_F_TLS_CONSTRUCT_CTOS_PADDING
 0

	)

329 
	#SSL_F_TLS_CONSTRUCT_CTOS_POST_HANDSHAKE_AUTH
 0

	)

330 
	#SSL_F_TLS_CONSTRUCT_CTOS_PSK
 0

	)

331 
	#SSL_F_TLS_CONSTRUCT_CTOS_PSK_KEX_MODES
 0

	)

332 
	#SSL_F_TLS_CONSTRUCT_CTOS_RENEGOTIATE
 0

	)

333 
	#SSL_F_TLS_CONSTRUCT_CTOS_SCT
 0

	)

334 
	#SSL_F_TLS_CONSTRUCT_CTOS_SERVER_NAME
 0

	)

335 
	#SSL_F_TLS_CONSTRUCT_CTOS_SESSION_TICKET
 0

	)

336 
	#SSL_F_TLS_CONSTRUCT_CTOS_SIG_ALGS
 0

	)

337 
	#SSL_F_TLS_CONSTRUCT_CTOS_SRP
 0

	)

338 
	#SSL_F_TLS_CONSTRUCT_CTOS_STATUS_REQUEST
 0

	)

339 
	#SSL_F_TLS_CONSTRUCT_CTOS_SUPPORTED_GROUPS
 0

	)

340 
	#SSL_F_TLS_CONSTRUCT_CTOS_SUPPORTED_VERSIONS
 0

	)

341 
	#SSL_F_TLS_CONSTRUCT_CTOS_USE_SRTP
 0

	)

342 
	#SSL_F_TLS_CONSTRUCT_CTOS_VERIFY
 0

	)

343 
	#SSL_F_TLS_CONSTRUCT_ENCRYPTED_EXTENSIONS
 0

	)

344 
	#SSL_F_TLS_CONSTRUCT_END_OF_EARLY_DATA
 0

	)

345 
	#SSL_F_TLS_CONSTRUCT_EXTENSIONS
 0

	)

346 
	#SSL_F_TLS_CONSTRUCT_FINISHED
 0

	)

347 
	#SSL_F_TLS_CONSTRUCT_HELLO_REQUEST
 0

	)

348 
	#SSL_F_TLS_CONSTRUCT_HELLO_RETRY_REQUEST
 0

	)

349 
	#SSL_F_TLS_CONSTRUCT_KEY_UPDATE
 0

	)

350 
	#SSL_F_TLS_CONSTRUCT_NEW_SESSION_TICKET
 0

	)

351 
	#SSL_F_TLS_CONSTRUCT_NEXT_PROTO
 0

	)

352 
	#SSL_F_TLS_CONSTRUCT_SERVER_CERTIFICATE
 0

	)

353 
	#SSL_F_TLS_CONSTRUCT_SERVER_HELLO
 0

	)

354 
	#SSL_F_TLS_CONSTRUCT_SERVER_KEY_EXCHANGE
 0

	)

355 
	#SSL_F_TLS_CONSTRUCT_STOC_ALPN
 0

	)

356 
	#SSL_F_TLS_CONSTRUCT_STOC_CERTIFICATE
 0

	)

357 
	#SSL_F_TLS_CONSTRUCT_STOC_COOKIE
 0

	)

358 
	#SSL_F_TLS_CONSTRUCT_STOC_CRYPTOPRO_BUG
 0

	)

359 
	#SSL_F_TLS_CONSTRUCT_STOC_DONE
 0

	)

360 
	#SSL_F_TLS_CONSTRUCT_STOC_EARLY_DATA
 0

	)

361 
	#SSL_F_TLS_CONSTRUCT_STOC_EARLY_DATA_INFO
 0

	)

362 
	#SSL_F_TLS_CONSTRUCT_STOC_EC_PT_FORMATS
 0

	)

363 
	#SSL_F_TLS_CONSTRUCT_STOC_EMS
 0

	)

364 
	#SSL_F_TLS_CONSTRUCT_STOC_ETM
 0

	)

365 
	#SSL_F_TLS_CONSTRUCT_STOC_HELLO
 0

	)

366 
	#SSL_F_TLS_CONSTRUCT_STOC_KEY_EXCHANGE
 0

	)

367 
	#SSL_F_TLS_CONSTRUCT_STOC_KEY_SHARE
 0

	)

368 
	#SSL_F_TLS_CONSTRUCT_STOC_MAXFRAGMENTLEN
 0

	)

369 
	#SSL_F_TLS_CONSTRUCT_STOC_NEXT_PROTO_NEG
 0

	)

370 
	#SSL_F_TLS_CONSTRUCT_STOC_PSK
 0

	)

371 
	#SSL_F_TLS_CONSTRUCT_STOC_RENEGOTIATE
 0

	)

372 
	#SSL_F_TLS_CONSTRUCT_STOC_SERVER_NAME
 0

	)

373 
	#SSL_F_TLS_CONSTRUCT_STOC_SESSION_TICKET
 0

	)

374 
	#SSL_F_TLS_CONSTRUCT_STOC_STATUS_REQUEST
 0

	)

375 
	#SSL_F_TLS_CONSTRUCT_STOC_SUPPORTED_GROUPS
 0

	)

376 
	#SSL_F_TLS_CONSTRUCT_STOC_SUPPORTED_VERSIONS
 0

	)

377 
	#SSL_F_TLS_CONSTRUCT_STOC_USE_SRTP
 0

	)

378 
	#SSL_F_TLS_EARLY_POST_PROCESS_CLIENT_HELLO
 0

	)

379 
	#SSL_F_TLS_FINISH_HANDSHAKE
 0

	)

380 
	#SSL_F_TLS_GET_MESSAGE_BODY
 0

	)

381 
	#SSL_F_TLS_GET_MESSAGE_HEADER
 0

	)

382 
	#SSL_F_TLS_HANDLE_ALPN
 0

	)

383 
	#SSL_F_TLS_HANDLE_STATUS_REQUEST
 0

	)

384 
	#SSL_F_TLS_PARSE_CERTIFICATE_AUTHORITIES
 0

	)

385 
	#SSL_F_TLS_PARSE_CLIENTHELLO_TLSEXT
 0

	)

386 
	#SSL_F_TLS_PARSE_CTOS_ALPN
 0

	)

387 
	#SSL_F_TLS_PARSE_CTOS_COOKIE
 0

	)

388 
	#SSL_F_TLS_PARSE_CTOS_EARLY_DATA
 0

	)

389 
	#SSL_F_TLS_PARSE_CTOS_EC_PT_FORMATS
 0

	)

390 
	#SSL_F_TLS_PARSE_CTOS_EMS
 0

	)

391 
	#SSL_F_TLS_PARSE_CTOS_KEY_SHARE
 0

	)

392 
	#SSL_F_TLS_PARSE_CTOS_MAXFRAGMENTLEN
 0

	)

393 
	#SSL_F_TLS_PARSE_CTOS_POST_HANDSHAKE_AUTH
 0

	)

394 
	#SSL_F_TLS_PARSE_CTOS_PSK
 0

	)

395 
	#SSL_F_TLS_PARSE_CTOS_PSK_KEX_MODES
 0

	)

396 
	#SSL_F_TLS_PARSE_CTOS_RENEGOTIATE
 0

	)

397 
	#SSL_F_TLS_PARSE_CTOS_SERVER_NAME
 0

	)

398 
	#SSL_F_TLS_PARSE_CTOS_SESSION_TICKET
 0

	)

399 
	#SSL_F_TLS_PARSE_CTOS_SIG_ALGS
 0

	)

400 
	#SSL_F_TLS_PARSE_CTOS_SIG_ALGS_CERT
 0

	)

401 
	#SSL_F_TLS_PARSE_CTOS_SRP
 0

	)

402 
	#SSL_F_TLS_PARSE_CTOS_STATUS_REQUEST
 0

	)

403 
	#SSL_F_TLS_PARSE_CTOS_SUPPORTED_GROUPS
 0

	)

404 
	#SSL_F_TLS_PARSE_CTOS_USE_SRTP
 0

	)

405 
	#SSL_F_TLS_PARSE_STOC_ALPN
 0

	)

406 
	#SSL_F_TLS_PARSE_STOC_COOKIE
 0

	)

407 
	#SSL_F_TLS_PARSE_STOC_EARLY_DATA
 0

	)

408 
	#SSL_F_TLS_PARSE_STOC_EARLY_DATA_INFO
 0

	)

409 
	#SSL_F_TLS_PARSE_STOC_EC_PT_FORMATS
 0

	)

410 
	#SSL_F_TLS_PARSE_STOC_KEY_SHARE
 0

	)

411 
	#SSL_F_TLS_PARSE_STOC_MAXFRAGMENTLEN
 0

	)

412 
	#SSL_F_TLS_PARSE_STOC_NPN
 0

	)

413 
	#SSL_F_TLS_PARSE_STOC_PSK
 0

	)

414 
	#SSL_F_TLS_PARSE_STOC_RENEGOTIATE
 0

	)

415 
	#SSL_F_TLS_PARSE_STOC_SCT
 0

	)

416 
	#SSL_F_TLS_PARSE_STOC_SERVER_NAME
 0

	)

417 
	#SSL_F_TLS_PARSE_STOC_SESSION_TICKET
 0

	)

418 
	#SSL_F_TLS_PARSE_STOC_STATUS_REQUEST
 0

	)

419 
	#SSL_F_TLS_PARSE_STOC_SUPPORTED_VERSIONS
 0

	)

420 
	#SSL_F_TLS_PARSE_STOC_USE_SRTP
 0

	)

421 
	#SSL_F_TLS_POST_PROCESS_CLIENT_HELLO
 0

	)

422 
	#SSL_F_TLS_POST_PROCESS_CLIENT_KEY_EXCHANGE
 0

	)

423 
	#SSL_F_TLS_PREPARE_CLIENT_CERTIFICATE
 0

	)

424 
	#SSL_F_TLS_PROCESS_AS_HELLO_RETRY_REQUEST
 0

	)

425 
	#SSL_F_TLS_PROCESS_CERTIFICATE_REQUEST
 0

	)

426 
	#SSL_F_TLS_PROCESS_CERT_STATUS
 0

	)

427 
	#SSL_F_TLS_PROCESS_CERT_STATUS_BODY
 0

	)

428 
	#SSL_F_TLS_PROCESS_CERT_VERIFY
 0

	)

429 
	#SSL_F_TLS_PROCESS_CHANGE_CIPHER_SPEC
 0

	)

430 
	#SSL_F_TLS_PROCESS_CKE_DHE
 0

	)

431 
	#SSL_F_TLS_PROCESS_CKE_ECDHE
 0

	)

432 
	#SSL_F_TLS_PROCESS_CKE_GOST
 0

	)

433 
	#SSL_F_TLS_PROCESS_CKE_PSK_PREAMBLE
 0

	)

434 
	#SSL_F_TLS_PROCESS_CKE_RSA
 0

	)

435 
	#SSL_F_TLS_PROCESS_CKE_SRP
 0

	)

436 
	#SSL_F_TLS_PROCESS_CLIENT_CERTIFICATE
 0

	)

437 
	#SSL_F_TLS_PROCESS_CLIENT_HELLO
 0

	)

438 
	#SSL_F_TLS_PROCESS_CLIENT_KEY_EXCHANGE
 0

	)

439 
	#SSL_F_TLS_PROCESS_ENCRYPTED_EXTENSIONS
 0

	)

440 
	#SSL_F_TLS_PROCESS_END_OF_EARLY_DATA
 0

	)

441 
	#SSL_F_TLS_PROCESS_FINISHED
 0

	)

442 
	#SSL_F_TLS_PROCESS_HELLO_REQ
 0

	)

443 
	#SSL_F_TLS_PROCESS_HELLO_RETRY_REQUEST
 0

	)

444 
	#SSL_F_TLS_PROCESS_INITIAL_SERVER_FLIGHT
 0

	)

445 
	#SSL_F_TLS_PROCESS_KEY_EXCHANGE
 0

	)

446 
	#SSL_F_TLS_PROCESS_KEY_UPDATE
 0

	)

447 
	#SSL_F_TLS_PROCESS_NEW_SESSION_TICKET
 0

	)

448 
	#SSL_F_TLS_PROCESS_NEXT_PROTO
 0

	)

449 
	#SSL_F_TLS_PROCESS_SERVER_CERTIFICATE
 0

	)

450 
	#SSL_F_TLS_PROCESS_SERVER_DONE
 0

	)

451 
	#SSL_F_TLS_PROCESS_SERVER_HELLO
 0

	)

452 
	#SSL_F_TLS_PROCESS_SKE_DHE
 0

	)

453 
	#SSL_F_TLS_PROCESS_SKE_ECDHE
 0

	)

454 
	#SSL_F_TLS_PROCESS_SKE_PSK_PREAMBLE
 0

	)

455 
	#SSL_F_TLS_PROCESS_SKE_SRP
 0

	)

456 
	#SSL_F_TLS_PSK_DO_BINDER
 0

	)

457 
	#SSL_F_TLS_SCAN_CLIENTHELLO_TLSEXT
 0

	)

458 
	#SSL_F_TLS_SETUP_HANDSHAKE
 0

	)

459 
	#SSL_F_USE_CERTIFICATE_CHAIN_FILE
 0

	)

460 
	#SSL_F_WPACKET_INTERN_INIT_LEN
 0

	)

461 
	#SSL_F_WPACKET_START_SUB_PACKET_LEN__
 0

	)

462 
	#SSL_F_WRITE_STATE_MACHINE
 0

	)

465 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/stack.h

10 #i‚de‡
OPENSSL_STACK_H


11 
	#OPENSSL_STACK_H


	)

12 #¥agm®
⁄˚


14 
	~<›ís¶/ma¸os.h
>

15 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


16 
	#HEADER_STACK_H


	)

19 #ifde‡ 
__˝lu•lus


23 
°ack_°
 
	tOPENSSL_STACK
;

25 (*
OPENSSL_sk_compfunc
)(const *, const *);

26 (*
OPENSSL_sk_‰ìfunc
)(*);

27 *(*
	tOPENSSL_sk_c›yfunc
)(const *);

29 
OPENSSL_sk_num
(c⁄° 
OPENSSL_STACK
 *);

30 *
OPENSSL_sk_vÆue
(c⁄° 
OPENSSL_STACK
 *, );

32 *
OPENSSL_sk_£t
(
OPENSSL_STACK
 *
°
, 
i
, c⁄° *
d©a
);

34 
OPENSSL_STACK
 *
OPENSSL_sk_√w
(
OPENSSL_sk_compfunc
 
cmp
);

35 
OPENSSL_STACK
 *
OPENSSL_sk_√w_nuŒ
();

36 
OPENSSL_STACK
 *
OPENSSL_sk_√w_ª£rve
(
OPENSSL_sk_compfunc
 
c
, 
n
);

37 
OPENSSL_sk_ª£rve
(
OPENSSL_STACK
 *
°
, 
n
);

38 
OPENSSL_sk_‰ì
(
OPENSSL_STACK
 *);

39 
OPENSSL_sk_p›_‰ì
(
OPENSSL_STACK
 *
°
, (*
func
) (*));

40 
OPENSSL_STACK
 *
OPENSSL_sk_dìp_c›y
(const OPENSSL_STACK *,

41 
OPENSSL_sk_c›yfunc
 
c
,

42 
OPENSSL_sk_‰ìfunc
 
f
);

43 
OPENSSL_sk_ö£π
(
OPENSSL_STACK
 *
sk
, c⁄° *
d©a
, 
whîe
);

44 *
OPENSSL_sk_dñëe
(
OPENSSL_STACK
 *
°
, 
loc
);

45 *
OPENSSL_sk_dñëe_±r
(
OPENSSL_STACK
 *
°
, c⁄° *
p
);

46 
OPENSSL_sk_föd
(
OPENSSL_STACK
 *
°
, c⁄° *
d©a
);

47 
OPENSSL_sk_föd_ex
(
OPENSSL_STACK
 *
°
, c⁄° *
d©a
);

48 
OPENSSL_sk_föd_Æl
(
OPENSSL_STACK
 *
°
, c⁄° *
d©a
, *
≤um
);

49 
OPENSSL_sk_push
(
OPENSSL_STACK
 *
°
, c⁄° *
d©a
);

50 
OPENSSL_sk_unshi·
(
OPENSSL_STACK
 *
°
, c⁄° *
d©a
);

51 *
OPENSSL_sk_shi·
(
OPENSSL_STACK
 *
°
);

52 *
OPENSSL_sk_p›
(
OPENSSL_STACK
 *
°
);

53 
OPENSSL_sk_zîo
(
OPENSSL_STACK
 *
°
);

54 
OPENSSL_sk_compfunc
 
OPENSSL_sk_£t_cmp_func
(
OPENSSL_STACK
 *
sk
,

55 
OPENSSL_sk_compfunc
 
cmp
);

56 
OPENSSL_STACK
 *
OPENSSL_sk_dup
(c⁄° OPENSSL_STACK *
°
);

57 
OPENSSL_sk_s‹t
(
OPENSSL_STACK
 *
°
);

58 
OPENSSL_sk_is_s‹ãd
(c⁄° 
OPENSSL_STACK
 *
°
);

60 #i‚de‡
OPENSSL_NO_DEPRECATED_1_1_0


61 
	#_STACK
 
OPENSSL_STACK


	)

62 
	#sk_num
 
OPENSSL_sk_num


	)

63 
	#sk_vÆue
 
OPENSSL_sk_vÆue


	)

64 
	#sk_£t
 
OPENSSL_sk_£t


	)

65 
	#sk_√w
 
OPENSSL_sk_√w


	)

66 
	#sk_√w_nuŒ
 
OPENSSL_sk_√w_nuŒ


	)

67 
	#sk_‰ì
 
OPENSSL_sk_‰ì


	)

68 
	#sk_p›_‰ì
 
OPENSSL_sk_p›_‰ì


	)

69 
	#sk_dìp_c›y
 
OPENSSL_sk_dìp_c›y


	)

70 
	#sk_ö£π
 
OPENSSL_sk_ö£π


	)

71 
	#sk_dñëe
 
OPENSSL_sk_dñëe


	)

72 
	#sk_dñëe_±r
 
OPENSSL_sk_dñëe_±r


	)

73 
	#sk_föd
 
OPENSSL_sk_föd


	)

74 
	#sk_föd_ex
 
OPENSSL_sk_föd_ex


	)

75 
	#sk_push
 
OPENSSL_sk_push


	)

76 
	#sk_unshi·
 
OPENSSL_sk_unshi·


	)

77 
	#sk_shi·
 
OPENSSL_sk_shi·


	)

78 
	#sk_p›
 
OPENSSL_sk_p›


	)

79 
	#sk_zîo
 
OPENSSL_sk_zîo


	)

80 
	#sk_£t_cmp_func
 
OPENSSL_sk_£t_cmp_func


	)

81 
	#sk_dup
 
OPENSSL_sk_dup


	)

82 
	#sk_s‹t
 
OPENSSL_sk_s‹t


	)

83 
	#sk_is_s‹ãd
 
OPENSSL_sk_is_s‹ãd


	)

86 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/obj_mac.h

12 #i‚de‡
OPENSSL_OBJ_MAC_H


13 
	#OPENSSL_OBJ_MAC_H


	)

14 #¥agm®
⁄˚


16 
	#SN_undef
 "UNDEF"

	)

17 
	#LN_undef
 "undeföed"

	)

18 
	#NID_undef
 0

	)

19 
	#OBJ_undef
 0L

	)

21 
	#SN_ôu_t
 "ITU-T"

	)

22 
	#LN_ôu_t
 "ôu-t"

	)

23 
	#NID_ôu_t
 645

	)

24 
	#OBJ_ôu_t
 0L

	)

26 
	#NID_ccôt
 404

	)

27 
	#OBJ_ccôt
 
OBJ_ôu_t


	)

29 
	#SN_iso
 "ISO"

	)

30 
	#LN_iso
 "iso"

	)

31 
	#NID_iso
 181

	)

32 
	#OBJ_iso
 1L

	)

34 
	#SN_joöt_iso_ôu_t
 "JOINT-ISO-ITU-T"

	)

35 
	#LN_joöt_iso_ôu_t
 "joöt-iso-ôu-t"

	)

36 
	#NID_joöt_iso_ôu_t
 646

	)

37 
	#OBJ_joöt_iso_ôu_t
 2L

	)

39 
	#NID_joöt_iso_ccôt
 393

	)

40 
	#OBJ_joöt_iso_ccôt
 
OBJ_joöt_iso_ôu_t


	)

42 
	#SN_membî_body
 "membî-body"

	)

43 
	#LN_membî_body
 "ISO Membî Body"

	)

44 
	#NID_membî_body
 182

	)

45 
	#OBJ_membî_body
 
OBJ_iso
,2L

	)

47 
	#SN_idítifõd_‹g™iz©i⁄
 "idítifõd-‹g™iz©i⁄"

	)

48 
	#NID_idítifõd_‹g™iz©i⁄
 676

	)

49 
	#OBJ_idítifõd_‹g™iz©i⁄
 
OBJ_iso
,3L

	)

51 
	#SN_gmac
 "GMAC"

	)

52 
	#LN_gmac
 "gmac"

	)

53 
	#NID_gmac
 1195

	)

54 
	#OBJ_gmac
 
OBJ_iso
,0L,9797L,3L,4L

	)

56 
	#SN_hmac_md5
 "HMAC-MD5"

	)

57 
	#LN_hmac_md5
 "hmac-md5"

	)

58 
	#NID_hmac_md5
 780

	)

59 
	#OBJ_hmac_md5
 
OBJ_idítifõd_‹g™iz©i⁄
,6L,1L,5L,5L,8L,1L,1L

	)

61 
	#SN_hmac_sha1
 "HMAC-SHA1"

	)

62 
	#LN_hmac_sha1
 "hmac-sha1"

	)

63 
	#NID_hmac_sha1
 781

	)

64 
	#OBJ_hmac_sha1
 
OBJ_idítifõd_‹g™iz©i⁄
,6L,1L,5L,5L,8L,1L,2L

	)

66 
	#SN_x509ExtAdmissi⁄
 "x509ExtAdmissi⁄"

	)

67 
	#LN_x509ExtAdmissi⁄
 "Pro„ssi⁄Æ Inf‹m©i⁄ o∏basi†f‹ Admissi⁄"

	)

68 
	#NID_x509ExtAdmissi⁄
 1093

	)

69 
	#OBJ_x509ExtAdmissi⁄
 
OBJ_idítifõd_‹g™iz©i⁄
,36L,8L,3L,3L

	)

71 
	#SN_˚πicom_¨c
 "˚πicom-¨c"

	)

72 
	#NID_˚πicom_¨c
 677

	)

73 
	#OBJ_˚πicom_¨c
 
OBJ_idítifõd_‹g™iz©i⁄
,132L

	)

75 
	#SN_õì
 "õì"

	)

76 
	#NID_õì
 1170

	)

77 
	#OBJ_õì
 
OBJ_idítifõd_‹g™iz©i⁄
,111L

	)

79 
	#SN_õì_siswg
 "õì-siswg"

	)

80 
	#LN_õì_siswg
 "IEEE Securôy i¿St‹agêW‹kög Group"

	)

81 
	#NID_õì_siswg
 1171

	)

82 
	#OBJ_õì_siswg
 
OBJ_õì
,2L,1619L

	)

84 
	#SN_öã∫©i⁄Æ_‹g™iz©i⁄s
 "öã∫©i⁄Æ-‹g™iz©i⁄s"

	)

85 
	#LN_öã∫©i⁄Æ_‹g™iz©i⁄s
 "I¡î«ti⁄Æ Org™iz©i⁄s"

	)

86 
	#NID_öã∫©i⁄Æ_‹g™iz©i⁄s
 647

	)

87 
	#OBJ_öã∫©i⁄Æ_‹g™iz©i⁄s
 
OBJ_joöt_iso_ôu_t
,23L

	)

89 
	#SN_w≠
 "w≠"

	)

90 
	#NID_w≠
 678

	)

91 
	#OBJ_w≠
 
OBJ_öã∫©i⁄Æ_‹g™iz©i⁄s
,43L

	)

93 
	#SN_w≠_wsg
 "w≠-wsg"

	)

94 
	#NID_w≠_wsg
 679

	)

95 
	#OBJ_w≠_wsg
 
OBJ_w≠
,1L

	)

97 
	#SN_£À˘ed_©åibuã_ty≥s
 "£À˘ed-©åibuã-ty≥s"

	)

98 
	#LN_£À˘ed_©åibuã_ty≥s
 "Sñe˘ed Aâribuã Ty≥s"

	)

99 
	#NID_£À˘ed_©åibuã_ty≥s
 394

	)

100 
	#OBJ_£À˘ed_©åibuã_ty≥s
 
OBJ_joöt_iso_ôu_t
,5L,1L,5L

	)

102 
	#SN_˛óøn˚
 "˛óøn˚"

	)

103 
	#NID_˛óøn˚
 395

	)

104 
	#OBJ_˛óøn˚
 
OBJ_£À˘ed_©åibuã_ty≥s
,55L

	)

106 
	#SN_ISO_US
 "ISO-US"

	)

107 
	#LN_ISO_US
 "ISO US Membî Body"

	)

108 
	#NID_ISO_US
 183

	)

109 
	#OBJ_ISO_US
 
OBJ_membî_body
,840L

	)

111 
	#SN_X9_57
 "X9-57"

	)

112 
	#LN_X9_57
 "X9.57"

	)

113 
	#NID_X9_57
 184

	)

114 
	#OBJ_X9_57
 
OBJ_ISO_US
,10040L

	)

116 
	#SN_X9cm
 "X9cm"

	)

117 
	#LN_X9cm
 "X9.57 CM ?"

	)

118 
	#NID_X9cm
 185

	)

119 
	#OBJ_X9cm
 
OBJ_X9_57
,4L

	)

121 
	#SN_ISO_CN
 "ISO-CN"

	)

122 
	#LN_ISO_CN
 "ISO CN Membî Body"

	)

123 
	#NID_ISO_CN
 1140

	)

124 
	#OBJ_ISO_CN
 
OBJ_membî_body
,156L

	)

126 
	#SN_oscˇ
 "oscˇ"

	)

127 
	#NID_oscˇ
 1141

	)

128 
	#OBJ_oscˇ
 
OBJ_ISO_CN
,10197L

	)

130 
	#SN_sm_scheme
 "sm-scheme"

	)

131 
	#NID_sm_scheme
 1142

	)

132 
	#OBJ_sm_scheme
 
OBJ_oscˇ
,1L

	)

134 
	#SN_dß
 "DSA"

	)

135 
	#LN_dß
 "dßEn¸y±i⁄"

	)

136 
	#NID_dß
 116

	)

137 
	#OBJ_dß
 
OBJ_X9cm
,1L

	)

139 
	#SN_dßWôhSHA1
 "DSA-SHA1"

	)

140 
	#LN_dßWôhSHA1
 "dßWôhSHA1"

	)

141 
	#NID_dßWôhSHA1
 113

	)

142 
	#OBJ_dßWôhSHA1
 
OBJ_X9cm
,3L

	)

144 
	#SN_™si_X9_62
 "™si-X9-62"

	)

145 
	#LN_™si_X9_62
 "ANSI X9.62"

	)

146 
	#NID_™si_X9_62
 405

	)

147 
	#OBJ_™si_X9_62
 
OBJ_ISO_US
,10045L

	)

149 
	#OBJ_X9_62_id_fõldTy≥
 
OBJ_™si_X9_62
,1L

	)

151 
	#SN_X9_62_¥ime_fõld
 "¥ime-fõld"

	)

152 
	#NID_X9_62_¥ime_fõld
 406

	)

153 
	#OBJ_X9_62_¥ime_fõld
 
OBJ_X9_62_id_fõldTy≥
,1L

	)

155 
	#SN_X9_62_ch¨a˘îi°ic_two_fõld
 "ch¨a˘îi°ic-two-fõld"

	)

156 
	#NID_X9_62_ch¨a˘îi°ic_two_fõld
 407

	)

157 
	#OBJ_X9_62_ch¨a˘îi°ic_two_fõld
 
OBJ_X9_62_id_fõldTy≥
,2L

	)

159 
	#SN_X9_62_id_ch¨a˘îi°ic_two_basis
 "id-ch¨a˘îi°ic-two-basis"

	)

160 
	#NID_X9_62_id_ch¨a˘îi°ic_two_basis
 680

	)

161 
	#OBJ_X9_62_id_ch¨a˘îi°ic_two_basis
 
OBJ_X9_62_ch¨a˘îi°ic_two_fõld
,3L

	)

163 
	#SN_X9_62_⁄Basis
 "⁄Basis"

	)

164 
	#NID_X9_62_⁄Basis
 681

	)

165 
	#OBJ_X9_62_⁄Basis
 
OBJ_X9_62_id_ch¨a˘îi°ic_two_basis
,1L

	)

167 
	#SN_X9_62_çBasis
 "çBasis"

	)

168 
	#NID_X9_62_çBasis
 682

	)

169 
	#OBJ_X9_62_çBasis
 
OBJ_X9_62_id_ch¨a˘îi°ic_two_basis
,2L

	)

171 
	#SN_X9_62_µBasis
 "µBasis"

	)

172 
	#NID_X9_62_µBasis
 683

	)

173 
	#OBJ_X9_62_µBasis
 
OBJ_X9_62_id_ch¨a˘îi°ic_two_basis
,3L

	)

175 
	#OBJ_X9_62_id_publicKeyTy≥
 
OBJ_™si_X9_62
,2L

	)

177 
	#SN_X9_62_id_ecPublicKey
 "id-ecPublicKey"

	)

178 
	#NID_X9_62_id_ecPublicKey
 408

	)

179 
	#OBJ_X9_62_id_ecPublicKey
 
OBJ_X9_62_id_publicKeyTy≥
,1L

	)

181 
	#OBJ_X9_62_ñlùticCurve
 
OBJ_™si_X9_62
,3L

	)

183 
	#OBJ_X9_62_c_TwoCurve
 
OBJ_X9_62_ñlùticCurve
,0L

	)

185 
	#SN_X9_62_c2≤b163v1
 "c2≤b163v1"

	)

186 
	#NID_X9_62_c2≤b163v1
 684

	)

187 
	#OBJ_X9_62_c2≤b163v1
 
OBJ_X9_62_c_TwoCurve
,1L

	)

189 
	#SN_X9_62_c2≤b163v2
 "c2≤b163v2"

	)

190 
	#NID_X9_62_c2≤b163v2
 685

	)

191 
	#OBJ_X9_62_c2≤b163v2
 
OBJ_X9_62_c_TwoCurve
,2L

	)

193 
	#SN_X9_62_c2≤b163v3
 "c2≤b163v3"

	)

194 
	#NID_X9_62_c2≤b163v3
 686

	)

195 
	#OBJ_X9_62_c2≤b163v3
 
OBJ_X9_62_c_TwoCurve
,3L

	)

197 
	#SN_X9_62_c2≤b176v1
 "c2≤b176v1"

	)

198 
	#NID_X9_62_c2≤b176v1
 687

	)

199 
	#OBJ_X9_62_c2≤b176v1
 
OBJ_X9_62_c_TwoCurve
,4L

	)

201 
	#SN_X9_62_c2äb191v1
 "c2äb191v1"

	)

202 
	#NID_X9_62_c2äb191v1
 688

	)

203 
	#OBJ_X9_62_c2äb191v1
 
OBJ_X9_62_c_TwoCurve
,5L

	)

205 
	#SN_X9_62_c2äb191v2
 "c2äb191v2"

	)

206 
	#NID_X9_62_c2äb191v2
 689

	)

207 
	#OBJ_X9_62_c2äb191v2
 
OBJ_X9_62_c_TwoCurve
,6L

	)

209 
	#SN_X9_62_c2äb191v3
 "c2äb191v3"

	)

210 
	#NID_X9_62_c2äb191v3
 690

	)

211 
	#OBJ_X9_62_c2äb191v3
 
OBJ_X9_62_c_TwoCurve
,7L

	)

213 
	#SN_X9_62_c2⁄b191v4
 "c2⁄b191v4"

	)

214 
	#NID_X9_62_c2⁄b191v4
 691

	)

215 
	#OBJ_X9_62_c2⁄b191v4
 
OBJ_X9_62_c_TwoCurve
,8L

	)

217 
	#SN_X9_62_c2⁄b191v5
 "c2⁄b191v5"

	)

218 
	#NID_X9_62_c2⁄b191v5
 692

	)

219 
	#OBJ_X9_62_c2⁄b191v5
 
OBJ_X9_62_c_TwoCurve
,9L

	)

221 
	#SN_X9_62_c2≤b208w1
 "c2≤b208w1"

	)

222 
	#NID_X9_62_c2≤b208w1
 693

	)

223 
	#OBJ_X9_62_c2≤b208w1
 
OBJ_X9_62_c_TwoCurve
,10L

	)

225 
	#SN_X9_62_c2äb239v1
 "c2äb239v1"

	)

226 
	#NID_X9_62_c2äb239v1
 694

	)

227 
	#OBJ_X9_62_c2äb239v1
 
OBJ_X9_62_c_TwoCurve
,11L

	)

229 
	#SN_X9_62_c2äb239v2
 "c2äb239v2"

	)

230 
	#NID_X9_62_c2äb239v2
 695

	)

231 
	#OBJ_X9_62_c2äb239v2
 
OBJ_X9_62_c_TwoCurve
,12L

	)

233 
	#SN_X9_62_c2äb239v3
 "c2äb239v3"

	)

234 
	#NID_X9_62_c2äb239v3
 696

	)

235 
	#OBJ_X9_62_c2äb239v3
 
OBJ_X9_62_c_TwoCurve
,13L

	)

237 
	#SN_X9_62_c2⁄b239v4
 "c2⁄b239v4"

	)

238 
	#NID_X9_62_c2⁄b239v4
 697

	)

239 
	#OBJ_X9_62_c2⁄b239v4
 
OBJ_X9_62_c_TwoCurve
,14L

	)

241 
	#SN_X9_62_c2⁄b239v5
 "c2⁄b239v5"

	)

242 
	#NID_X9_62_c2⁄b239v5
 698

	)

243 
	#OBJ_X9_62_c2⁄b239v5
 
OBJ_X9_62_c_TwoCurve
,15L

	)

245 
	#SN_X9_62_c2≤b272w1
 "c2≤b272w1"

	)

246 
	#NID_X9_62_c2≤b272w1
 699

	)

247 
	#OBJ_X9_62_c2≤b272w1
 
OBJ_X9_62_c_TwoCurve
,16L

	)

249 
	#SN_X9_62_c2≤b304w1
 "c2≤b304w1"

	)

250 
	#NID_X9_62_c2≤b304w1
 700

	)

251 
	#OBJ_X9_62_c2≤b304w1
 
OBJ_X9_62_c_TwoCurve
,17L

	)

253 
	#SN_X9_62_c2äb359v1
 "c2äb359v1"

	)

254 
	#NID_X9_62_c2äb359v1
 701

	)

255 
	#OBJ_X9_62_c2äb359v1
 
OBJ_X9_62_c_TwoCurve
,18L

	)

257 
	#SN_X9_62_c2≤b368w1
 "c2≤b368w1"

	)

258 
	#NID_X9_62_c2≤b368w1
 702

	)

259 
	#OBJ_X9_62_c2≤b368w1
 
OBJ_X9_62_c_TwoCurve
,19L

	)

261 
	#SN_X9_62_c2äb431r1
 "c2äb431r1"

	)

262 
	#NID_X9_62_c2äb431r1
 703

	)

263 
	#OBJ_X9_62_c2äb431r1
 
OBJ_X9_62_c_TwoCurve
,20L

	)

265 
	#OBJ_X9_62_¥imeCurve
 
OBJ_X9_62_ñlùticCurve
,1L

	)

267 
	#SN_X9_62_¥ime192v1
 "¥ime192v1"

	)

268 
	#NID_X9_62_¥ime192v1
 409

	)

269 
	#OBJ_X9_62_¥ime192v1
 
OBJ_X9_62_¥imeCurve
,1L

	)

271 
	#SN_X9_62_¥ime192v2
 "¥ime192v2"

	)

272 
	#NID_X9_62_¥ime192v2
 410

	)

273 
	#OBJ_X9_62_¥ime192v2
 
OBJ_X9_62_¥imeCurve
,2L

	)

275 
	#SN_X9_62_¥ime192v3
 "¥ime192v3"

	)

276 
	#NID_X9_62_¥ime192v3
 411

	)

277 
	#OBJ_X9_62_¥ime192v3
 
OBJ_X9_62_¥imeCurve
,3L

	)

279 
	#SN_X9_62_¥ime239v1
 "¥ime239v1"

	)

280 
	#NID_X9_62_¥ime239v1
 412

	)

281 
	#OBJ_X9_62_¥ime239v1
 
OBJ_X9_62_¥imeCurve
,4L

	)

283 
	#SN_X9_62_¥ime239v2
 "¥ime239v2"

	)

284 
	#NID_X9_62_¥ime239v2
 413

	)

285 
	#OBJ_X9_62_¥ime239v2
 
OBJ_X9_62_¥imeCurve
,5L

	)

287 
	#SN_X9_62_¥ime239v3
 "¥ime239v3"

	)

288 
	#NID_X9_62_¥ime239v3
 414

	)

289 
	#OBJ_X9_62_¥ime239v3
 
OBJ_X9_62_¥imeCurve
,6L

	)

291 
	#SN_X9_62_¥ime256v1
 "¥ime256v1"

	)

292 
	#NID_X9_62_¥ime256v1
 415

	)

293 
	#OBJ_X9_62_¥ime256v1
 
OBJ_X9_62_¥imeCurve
,7L

	)

295 
	#OBJ_X9_62_id_ecSigTy≥
 
OBJ_™si_X9_62
,4L

	)

297 
	#SN_ecdß_wôh_SHA1
 "ecdß-wôh-SHA1"

	)

298 
	#NID_ecdß_wôh_SHA1
 416

	)

299 
	#OBJ_ecdß_wôh_SHA1
 
OBJ_X9_62_id_ecSigTy≥
,1L

	)

301 
	#SN_ecdß_wôh_Recommíded
 "ecdß-wôh-Recommíded"

	)

302 
	#NID_ecdß_wôh_Recommíded
 791

	)

303 
	#OBJ_ecdß_wôh_Recommíded
 
OBJ_X9_62_id_ecSigTy≥
,2L

	)

305 
	#SN_ecdß_wôh_S≥cifõd
 "ecdß-wôh-S≥cifõd"

	)

306 
	#NID_ecdß_wôh_S≥cifõd
 792

	)

307 
	#OBJ_ecdß_wôh_S≥cifõd
 
OBJ_X9_62_id_ecSigTy≥
,3L

	)

309 
	#SN_ecdß_wôh_SHA224
 "ecdß-wôh-SHA224"

	)

310 
	#NID_ecdß_wôh_SHA224
 793

	)

311 
	#OBJ_ecdß_wôh_SHA224
 
OBJ_ecdß_wôh_S≥cifõd
,1L

	)

313 
	#SN_ecdß_wôh_SHA256
 "ecdß-wôh-SHA256"

	)

314 
	#NID_ecdß_wôh_SHA256
 794

	)

315 
	#OBJ_ecdß_wôh_SHA256
 
OBJ_ecdß_wôh_S≥cifõd
,2L

	)

317 
	#SN_ecdß_wôh_SHA384
 "ecdß-wôh-SHA384"

	)

318 
	#NID_ecdß_wôh_SHA384
 795

	)

319 
	#OBJ_ecdß_wôh_SHA384
 
OBJ_ecdß_wôh_S≥cifõd
,3L

	)

321 
	#SN_ecdß_wôh_SHA512
 "ecdß-wôh-SHA512"

	)

322 
	#NID_ecdß_wôh_SHA512
 796

	)

323 
	#OBJ_ecdß_wôh_SHA512
 
OBJ_ecdß_wôh_S≥cifõd
,4L

	)

325 
	#OBJ_£cg_ñlùticCurve
 
OBJ_˚πicom_¨c
,0L

	)

327 
	#SN_£˝112r1
 "£˝112r1"

	)

328 
	#NID_£˝112r1
 704

	)

329 
	#OBJ_£˝112r1
 
OBJ_£cg_ñlùticCurve
,6L

	)

331 
	#SN_£˝112r2
 "£˝112r2"

	)

332 
	#NID_£˝112r2
 705

	)

333 
	#OBJ_£˝112r2
 
OBJ_£cg_ñlùticCurve
,7L

	)

335 
	#SN_£˝128r1
 "£˝128r1"

	)

336 
	#NID_£˝128r1
 706

	)

337 
	#OBJ_£˝128r1
 
OBJ_£cg_ñlùticCurve
,28L

	)

339 
	#SN_£˝128r2
 "£˝128r2"

	)

340 
	#NID_£˝128r2
 707

	)

341 
	#OBJ_£˝128r2
 
OBJ_£cg_ñlùticCurve
,29L

	)

343 
	#SN_£˝160k1
 "£˝160k1"

	)

344 
	#NID_£˝160k1
 708

	)

345 
	#OBJ_£˝160k1
 
OBJ_£cg_ñlùticCurve
,9L

	)

347 
	#SN_£˝160r1
 "£˝160r1"

	)

348 
	#NID_£˝160r1
 709

	)

349 
	#OBJ_£˝160r1
 
OBJ_£cg_ñlùticCurve
,8L

	)

351 
	#SN_£˝160r2
 "£˝160r2"

	)

352 
	#NID_£˝160r2
 710

	)

353 
	#OBJ_£˝160r2
 
OBJ_£cg_ñlùticCurve
,30L

	)

355 
	#SN_£˝192k1
 "£˝192k1"

	)

356 
	#NID_£˝192k1
 711

	)

357 
	#OBJ_£˝192k1
 
OBJ_£cg_ñlùticCurve
,31L

	)

359 
	#SN_£˝224k1
 "£˝224k1"

	)

360 
	#NID_£˝224k1
 712

	)

361 
	#OBJ_£˝224k1
 
OBJ_£cg_ñlùticCurve
,32L

	)

363 
	#SN_£˝224r1
 "£˝224r1"

	)

364 
	#NID_£˝224r1
 713

	)

365 
	#OBJ_£˝224r1
 
OBJ_£cg_ñlùticCurve
,33L

	)

367 
	#SN_£˝256k1
 "£˝256k1"

	)

368 
	#NID_£˝256k1
 714

	)

369 
	#OBJ_£˝256k1
 
OBJ_£cg_ñlùticCurve
,10L

	)

371 
	#SN_£˝384r1
 "£˝384r1"

	)

372 
	#NID_£˝384r1
 715

	)

373 
	#OBJ_£˝384r1
 
OBJ_£cg_ñlùticCurve
,34L

	)

375 
	#SN_£˝521r1
 "£˝521r1"

	)

376 
	#NID_£˝521r1
 716

	)

377 
	#OBJ_£˝521r1
 
OBJ_£cg_ñlùticCurve
,35L

	)

379 
	#SN_£˘113r1
 "£˘113r1"

	)

380 
	#NID_£˘113r1
 717

	)

381 
	#OBJ_£˘113r1
 
OBJ_£cg_ñlùticCurve
,4L

	)

383 
	#SN_£˘113r2
 "£˘113r2"

	)

384 
	#NID_£˘113r2
 718

	)

385 
	#OBJ_£˘113r2
 
OBJ_£cg_ñlùticCurve
,5L

	)

387 
	#SN_£˘131r1
 "£˘131r1"

	)

388 
	#NID_£˘131r1
 719

	)

389 
	#OBJ_£˘131r1
 
OBJ_£cg_ñlùticCurve
,22L

	)

391 
	#SN_£˘131r2
 "£˘131r2"

	)

392 
	#NID_£˘131r2
 720

	)

393 
	#OBJ_£˘131r2
 
OBJ_£cg_ñlùticCurve
,23L

	)

395 
	#SN_£˘163k1
 "£˘163k1"

	)

396 
	#NID_£˘163k1
 721

	)

397 
	#OBJ_£˘163k1
 
OBJ_£cg_ñlùticCurve
,1L

	)

399 
	#SN_£˘163r1
 "£˘163r1"

	)

400 
	#NID_£˘163r1
 722

	)

401 
	#OBJ_£˘163r1
 
OBJ_£cg_ñlùticCurve
,2L

	)

403 
	#SN_£˘163r2
 "£˘163r2"

	)

404 
	#NID_£˘163r2
 723

	)

405 
	#OBJ_£˘163r2
 
OBJ_£cg_ñlùticCurve
,15L

	)

407 
	#SN_£˘193r1
 "£˘193r1"

	)

408 
	#NID_£˘193r1
 724

	)

409 
	#OBJ_£˘193r1
 
OBJ_£cg_ñlùticCurve
,24L

	)

411 
	#SN_£˘193r2
 "£˘193r2"

	)

412 
	#NID_£˘193r2
 725

	)

413 
	#OBJ_£˘193r2
 
OBJ_£cg_ñlùticCurve
,25L

	)

415 
	#SN_£˘233k1
 "£˘233k1"

	)

416 
	#NID_£˘233k1
 726

	)

417 
	#OBJ_£˘233k1
 
OBJ_£cg_ñlùticCurve
,26L

	)

419 
	#SN_£˘233r1
 "£˘233r1"

	)

420 
	#NID_£˘233r1
 727

	)

421 
	#OBJ_£˘233r1
 
OBJ_£cg_ñlùticCurve
,27L

	)

423 
	#SN_£˘239k1
 "£˘239k1"

	)

424 
	#NID_£˘239k1
 728

	)

425 
	#OBJ_£˘239k1
 
OBJ_£cg_ñlùticCurve
,3L

	)

427 
	#SN_£˘283k1
 "£˘283k1"

	)

428 
	#NID_£˘283k1
 729

	)

429 
	#OBJ_£˘283k1
 
OBJ_£cg_ñlùticCurve
,16L

	)

431 
	#SN_£˘283r1
 "£˘283r1"

	)

432 
	#NID_£˘283r1
 730

	)

433 
	#OBJ_£˘283r1
 
OBJ_£cg_ñlùticCurve
,17L

	)

435 
	#SN_£˘409k1
 "£˘409k1"

	)

436 
	#NID_£˘409k1
 731

	)

437 
	#OBJ_£˘409k1
 
OBJ_£cg_ñlùticCurve
,36L

	)

439 
	#SN_£˘409r1
 "£˘409r1"

	)

440 
	#NID_£˘409r1
 732

	)

441 
	#OBJ_£˘409r1
 
OBJ_£cg_ñlùticCurve
,37L

	)

443 
	#SN_£˘571k1
 "£˘571k1"

	)

444 
	#NID_£˘571k1
 733

	)

445 
	#OBJ_£˘571k1
 
OBJ_£cg_ñlùticCurve
,38L

	)

447 
	#SN_£˘571r1
 "£˘571r1"

	)

448 
	#NID_£˘571r1
 734

	)

449 
	#OBJ_£˘571r1
 
OBJ_£cg_ñlùticCurve
,39L

	)

451 
	#OBJ_w≠_wsg_idm_ecid
 
OBJ_w≠_wsg
,4L

	)

453 
	#SN_w≠_wsg_idm_ecid_wés1
 "w≠-wsg-idm-ecid-wés1"

	)

454 
	#NID_w≠_wsg_idm_ecid_wés1
 735

	)

455 
	#OBJ_w≠_wsg_idm_ecid_wés1
 
OBJ_w≠_wsg_idm_ecid
,1L

	)

457 
	#SN_w≠_wsg_idm_ecid_wés3
 "w≠-wsg-idm-ecid-wés3"

	)

458 
	#NID_w≠_wsg_idm_ecid_wés3
 736

	)

459 
	#OBJ_w≠_wsg_idm_ecid_wés3
 
OBJ_w≠_wsg_idm_ecid
,3L

	)

461 
	#SN_w≠_wsg_idm_ecid_wés4
 "w≠-wsg-idm-ecid-wés4"

	)

462 
	#NID_w≠_wsg_idm_ecid_wés4
 737

	)

463 
	#OBJ_w≠_wsg_idm_ecid_wés4
 
OBJ_w≠_wsg_idm_ecid
,4L

	)

465 
	#SN_w≠_wsg_idm_ecid_wés5
 "w≠-wsg-idm-ecid-wés5"

	)

466 
	#NID_w≠_wsg_idm_ecid_wés5
 738

	)

467 
	#OBJ_w≠_wsg_idm_ecid_wés5
 
OBJ_w≠_wsg_idm_ecid
,5L

	)

469 
	#SN_w≠_wsg_idm_ecid_wés6
 "w≠-wsg-idm-ecid-wés6"

	)

470 
	#NID_w≠_wsg_idm_ecid_wés6
 739

	)

471 
	#OBJ_w≠_wsg_idm_ecid_wés6
 
OBJ_w≠_wsg_idm_ecid
,6L

	)

473 
	#SN_w≠_wsg_idm_ecid_wés7
 "w≠-wsg-idm-ecid-wés7"

	)

474 
	#NID_w≠_wsg_idm_ecid_wés7
 740

	)

475 
	#OBJ_w≠_wsg_idm_ecid_wés7
 
OBJ_w≠_wsg_idm_ecid
,7L

	)

477 
	#SN_w≠_wsg_idm_ecid_wés8
 "w≠-wsg-idm-ecid-wés8"

	)

478 
	#NID_w≠_wsg_idm_ecid_wés8
 741

	)

479 
	#OBJ_w≠_wsg_idm_ecid_wés8
 
OBJ_w≠_wsg_idm_ecid
,8L

	)

481 
	#SN_w≠_wsg_idm_ecid_wés9
 "w≠-wsg-idm-ecid-wés9"

	)

482 
	#NID_w≠_wsg_idm_ecid_wés9
 742

	)

483 
	#OBJ_w≠_wsg_idm_ecid_wés9
 
OBJ_w≠_wsg_idm_ecid
,9L

	)

485 
	#SN_w≠_wsg_idm_ecid_wés10
 "w≠-wsg-idm-ecid-wés10"

	)

486 
	#NID_w≠_wsg_idm_ecid_wés10
 743

	)

487 
	#OBJ_w≠_wsg_idm_ecid_wés10
 
OBJ_w≠_wsg_idm_ecid
,10L

	)

489 
	#SN_w≠_wsg_idm_ecid_wés11
 "w≠-wsg-idm-ecid-wés11"

	)

490 
	#NID_w≠_wsg_idm_ecid_wés11
 744

	)

491 
	#OBJ_w≠_wsg_idm_ecid_wés11
 
OBJ_w≠_wsg_idm_ecid
,11L

	)

493 
	#SN_w≠_wsg_idm_ecid_wés12
 "w≠-wsg-idm-ecid-wés12"

	)

494 
	#NID_w≠_wsg_idm_ecid_wés12
 745

	)

495 
	#OBJ_w≠_wsg_idm_ecid_wés12
 
OBJ_w≠_wsg_idm_ecid
,12L

	)

497 
	#SN_ˇ°5_cbc
 "CAST5-CBC"

	)

498 
	#LN_ˇ°5_cbc
 "ˇ°5-cbc"

	)

499 
	#NID_ˇ°5_cbc
 108

	)

500 
	#OBJ_ˇ°5_cbc
 
OBJ_ISO_US
,113533L,7L,66L,10L

	)

502 
	#SN_ˇ°5_ecb
 "CAST5-ECB"

	)

503 
	#LN_ˇ°5_ecb
 "ˇ°5-ecb"

	)

504 
	#NID_ˇ°5_ecb
 109

	)

506 
	#SN_ˇ°5_cfb64
 "CAST5-CFB"

	)

507 
	#LN_ˇ°5_cfb64
 "ˇ°5-cfb"

	)

508 
	#NID_ˇ°5_cfb64
 110

	)

510 
	#SN_ˇ°5_ofb64
 "CAST5-OFB"

	)

511 
	#LN_ˇ°5_ofb64
 "ˇ°5-ofb"

	)

512 
	#NID_ˇ°5_ofb64
 111

	)

514 
	#LN_pbeWôhMD5AndCa°5_CBC
 "pbeWôhMD5AndCa°5CBC"

	)

515 
	#NID_pbeWôhMD5AndCa°5_CBC
 112

	)

516 
	#OBJ_pbeWôhMD5AndCa°5_CBC
 
OBJ_ISO_US
,113533L,7L,66L,12L

	)

518 
	#SN_id_Passw‹dBa£dMAC
 "id-Passw‹dBa£dMAC"

	)

519 
	#LN_id_Passw‹dBa£dMAC
 "∑ssw‹d ba£d MAC"

	)

520 
	#NID_id_Passw‹dBa£dMAC
 782

	)

521 
	#OBJ_id_Passw‹dBa£dMAC
 
OBJ_ISO_US
,113533L,7L,66L,13L

	)

523 
	#SN_id_DHBa£dMac
 "id-DHBa£dMac"

	)

524 
	#LN_id_DHBa£dMac
 "Diffõ-Hñlm™ ba£d MAC"

	)

525 
	#NID_id_DHBa£dMac
 783

	)

526 
	#OBJ_id_DHBa£dMac
 
OBJ_ISO_US
,113533L,7L,66L,30L

	)

528 
	#SN_rßdsi
 "rßdsi"

	)

529 
	#LN_rßdsi
 "RSA D©®Securôy, Inc."

	)

530 
	#NID_rßdsi
 1

	)

531 
	#OBJ_rßdsi
 
OBJ_ISO_US
,113549L

	)

533 
	#SN_pkcs
 "pkcs"

	)

534 
	#LN_pkcs
 "RSA D©®Securôy, Inc. PKCS"

	)

535 
	#NID_pkcs
 2

	)

536 
	#OBJ_pkcs
 
OBJ_rßdsi
,1L

	)

538 
	#SN_pkcs1
 "pkcs1"

	)

539 
	#NID_pkcs1
 186

	)

540 
	#OBJ_pkcs1
 
OBJ_pkcs
,1L

	)

542 
	#LN_rßEn¸y±i⁄
 "rßEn¸y±i⁄"

	)

543 
	#NID_rßEn¸y±i⁄
 6

	)

544 
	#OBJ_rßEn¸y±i⁄
 
OBJ_pkcs1
,1L

	)

546 
	#SN_md2WôhRSAEn¸y±i⁄
 "RSA-MD2"

	)

547 
	#LN_md2WôhRSAEn¸y±i⁄
 "md2WôhRSAEn¸y±i⁄"

	)

548 
	#NID_md2WôhRSAEn¸y±i⁄
 7

	)

549 
	#OBJ_md2WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,2L

	)

551 
	#SN_md4WôhRSAEn¸y±i⁄
 "RSA-MD4"

	)

552 
	#LN_md4WôhRSAEn¸y±i⁄
 "md4WôhRSAEn¸y±i⁄"

	)

553 
	#NID_md4WôhRSAEn¸y±i⁄
 396

	)

554 
	#OBJ_md4WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,3L

	)

556 
	#SN_md5WôhRSAEn¸y±i⁄
 "RSA-MD5"

	)

557 
	#LN_md5WôhRSAEn¸y±i⁄
 "md5WôhRSAEn¸y±i⁄"

	)

558 
	#NID_md5WôhRSAEn¸y±i⁄
 8

	)

559 
	#OBJ_md5WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,4L

	)

561 
	#SN_sha1WôhRSAEn¸y±i⁄
 "RSA-SHA1"

	)

562 
	#LN_sha1WôhRSAEn¸y±i⁄
 "sha1WôhRSAEn¸y±i⁄"

	)

563 
	#NID_sha1WôhRSAEn¸y±i⁄
 65

	)

564 
	#OBJ_sha1WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,5L

	)

566 
	#SN_rßesO´p
 "RSAES-OAEP"

	)

567 
	#LN_rßesO´p
 "rßesO´p"

	)

568 
	#NID_rßesO´p
 919

	)

569 
	#OBJ_rßesO´p
 
OBJ_pkcs1
,7L

	)

571 
	#SN_mgf1
 "MGF1"

	)

572 
	#LN_mgf1
 "mgf1"

	)

573 
	#NID_mgf1
 911

	)

574 
	#OBJ_mgf1
 
OBJ_pkcs1
,8L

	)

576 
	#SN_pS≥cifõd
 "PSPECIFIED"

	)

577 
	#LN_pS≥cifõd
 "pS≥cifõd"

	)

578 
	#NID_pS≥cifõd
 935

	)

579 
	#OBJ_pS≥cifõd
 
OBJ_pkcs1
,9L

	)

581 
	#SN_rßsßPss
 "RSASSA-PSS"

	)

582 
	#LN_rßsßPss
 "rßsßPss"

	)

583 
	#NID_rßsßPss
 912

	)

584 
	#OBJ_rßsßPss
 
OBJ_pkcs1
,10L

	)

586 
	#SN_sha256WôhRSAEn¸y±i⁄
 "RSA-SHA256"

	)

587 
	#LN_sha256WôhRSAEn¸y±i⁄
 "sha256WôhRSAEn¸y±i⁄"

	)

588 
	#NID_sha256WôhRSAEn¸y±i⁄
 668

	)

589 
	#OBJ_sha256WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,11L

	)

591 
	#SN_sha384WôhRSAEn¸y±i⁄
 "RSA-SHA384"

	)

592 
	#LN_sha384WôhRSAEn¸y±i⁄
 "sha384WôhRSAEn¸y±i⁄"

	)

593 
	#NID_sha384WôhRSAEn¸y±i⁄
 669

	)

594 
	#OBJ_sha384WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,12L

	)

596 
	#SN_sha512WôhRSAEn¸y±i⁄
 "RSA-SHA512"

	)

597 
	#LN_sha512WôhRSAEn¸y±i⁄
 "sha512WôhRSAEn¸y±i⁄"

	)

598 
	#NID_sha512WôhRSAEn¸y±i⁄
 670

	)

599 
	#OBJ_sha512WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,13L

	)

601 
	#SN_sha224WôhRSAEn¸y±i⁄
 "RSA-SHA224"

	)

602 
	#LN_sha224WôhRSAEn¸y±i⁄
 "sha224WôhRSAEn¸y±i⁄"

	)

603 
	#NID_sha224WôhRSAEn¸y±i⁄
 671

	)

604 
	#OBJ_sha224WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,14L

	)

606 
	#SN_sha512_224WôhRSAEn¸y±i⁄
 "RSA-SHA512/224"

	)

607 
	#LN_sha512_224WôhRSAEn¸y±i⁄
 "sha512-224WôhRSAEn¸y±i⁄"

	)

608 
	#NID_sha512_224WôhRSAEn¸y±i⁄
 1145

	)

609 
	#OBJ_sha512_224WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,15L

	)

611 
	#SN_sha512_256WôhRSAEn¸y±i⁄
 "RSA-SHA512/256"

	)

612 
	#LN_sha512_256WôhRSAEn¸y±i⁄
 "sha512-256WôhRSAEn¸y±i⁄"

	)

613 
	#NID_sha512_256WôhRSAEn¸y±i⁄
 1146

	)

614 
	#OBJ_sha512_256WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,16L

	)

616 
	#SN_pkcs3
 "pkcs3"

	)

617 
	#NID_pkcs3
 27

	)

618 
	#OBJ_pkcs3
 
OBJ_pkcs
,3L

	)

620 
	#LN_dhKeyAgªemít
 "dhKeyAgªemít"

	)

621 
	#NID_dhKeyAgªemít
 28

	)

622 
	#OBJ_dhKeyAgªemít
 
OBJ_pkcs3
,1L

	)

624 
	#SN_pkcs5
 "pkcs5"

	)

625 
	#NID_pkcs5
 187

	)

626 
	#OBJ_pkcs5
 
OBJ_pkcs
,5L

	)

628 
	#SN_pbeWôhMD2AndDES_CBC
 "PBE-MD2-DES"

	)

629 
	#LN_pbeWôhMD2AndDES_CBC
 "pbeWôhMD2AndDES-CBC"

	)

630 
	#NID_pbeWôhMD2AndDES_CBC
 9

	)

631 
	#OBJ_pbeWôhMD2AndDES_CBC
 
OBJ_pkcs5
,1L

	)

633 
	#SN_pbeWôhMD5AndDES_CBC
 "PBE-MD5-DES"

	)

634 
	#LN_pbeWôhMD5AndDES_CBC
 "pbeWôhMD5AndDES-CBC"

	)

635 
	#NID_pbeWôhMD5AndDES_CBC
 10

	)

636 
	#OBJ_pbeWôhMD5AndDES_CBC
 
OBJ_pkcs5
,3L

	)

638 
	#SN_pbeWôhMD2AndRC2_CBC
 "PBE-MD2-RC2-64"

	)

639 
	#LN_pbeWôhMD2AndRC2_CBC
 "pbeWôhMD2AndRC2-CBC"

	)

640 
	#NID_pbeWôhMD2AndRC2_CBC
 168

	)

641 
	#OBJ_pbeWôhMD2AndRC2_CBC
 
OBJ_pkcs5
,4L

	)

643 
	#SN_pbeWôhMD5AndRC2_CBC
 "PBE-MD5-RC2-64"

	)

644 
	#LN_pbeWôhMD5AndRC2_CBC
 "pbeWôhMD5AndRC2-CBC"

	)

645 
	#NID_pbeWôhMD5AndRC2_CBC
 169

	)

646 
	#OBJ_pbeWôhMD5AndRC2_CBC
 
OBJ_pkcs5
,6L

	)

648 
	#SN_pbeWôhSHA1AndDES_CBC
 "PBE-SHA1-DES"

	)

649 
	#LN_pbeWôhSHA1AndDES_CBC
 "pbeWôhSHA1AndDES-CBC"

	)

650 
	#NID_pbeWôhSHA1AndDES_CBC
 170

	)

651 
	#OBJ_pbeWôhSHA1AndDES_CBC
 
OBJ_pkcs5
,10L

	)

653 
	#SN_pbeWôhSHA1AndRC2_CBC
 "PBE-SHA1-RC2-64"

	)

654 
	#LN_pbeWôhSHA1AndRC2_CBC
 "pbeWôhSHA1AndRC2-CBC"

	)

655 
	#NID_pbeWôhSHA1AndRC2_CBC
 68

	)

656 
	#OBJ_pbeWôhSHA1AndRC2_CBC
 
OBJ_pkcs5
,11L

	)

658 
	#LN_id_pbkdf2
 "PBKDF2"

	)

659 
	#NID_id_pbkdf2
 69

	)

660 
	#OBJ_id_pbkdf2
 
OBJ_pkcs5
,12L

	)

662 
	#LN_pbes2
 "PBES2"

	)

663 
	#NID_pbes2
 161

	)

664 
	#OBJ_pbes2
 
OBJ_pkcs5
,13L

	)

666 
	#LN_pbmac1
 "PBMAC1"

	)

667 
	#NID_pbmac1
 162

	)

668 
	#OBJ_pbmac1
 
OBJ_pkcs5
,14L

	)

670 
	#SN_pkcs7
 "pkcs7"

	)

671 
	#NID_pkcs7
 20

	)

672 
	#OBJ_pkcs7
 
OBJ_pkcs
,7L

	)

674 
	#LN_pkcs7_d©a
 "pkcs7-d©a"

	)

675 
	#NID_pkcs7_d©a
 21

	)

676 
	#OBJ_pkcs7_d©a
 
OBJ_pkcs7
,1L

	)

678 
	#LN_pkcs7_sig√d
 "pkcs7-sig√dD©a"

	)

679 
	#NID_pkcs7_sig√d
 22

	)

680 
	#OBJ_pkcs7_sig√d
 
OBJ_pkcs7
,2L

	)

682 
	#LN_pkcs7_ívñ›ed
 "pkcs7-ívñ›edD©a"

	)

683 
	#NID_pkcs7_ívñ›ed
 23

	)

684 
	#OBJ_pkcs7_ívñ›ed
 
OBJ_pkcs7
,3L

	)

686 
	#LN_pkcs7_sig√dAndEnvñ›ed
 "pkcs7-sig√dAndEnvñ›edD©a"

	)

687 
	#NID_pkcs7_sig√dAndEnvñ›ed
 24

	)

688 
	#OBJ_pkcs7_sig√dAndEnvñ›ed
 
OBJ_pkcs7
,4L

	)

690 
	#LN_pkcs7_dige°
 "pkcs7-dige°D©a"

	)

691 
	#NID_pkcs7_dige°
 25

	)

692 
	#OBJ_pkcs7_dige°
 
OBJ_pkcs7
,5L

	)

694 
	#LN_pkcs7_í¸y±ed
 "pkcs7-í¸y±edD©a"

	)

695 
	#NID_pkcs7_í¸y±ed
 26

	)

696 
	#OBJ_pkcs7_í¸y±ed
 
OBJ_pkcs7
,6L

	)

698 
	#SN_pkcs9
 "pkcs9"

	)

699 
	#NID_pkcs9
 47

	)

700 
	#OBJ_pkcs9
 
OBJ_pkcs
,9L

	)

702 
	#LN_pkcs9_emaûAddªss
 "emaûAddªss"

	)

703 
	#NID_pkcs9_emaûAddªss
 48

	)

704 
	#OBJ_pkcs9_emaûAddªss
 
OBJ_pkcs9
,1L

	)

706 
	#LN_pkcs9_un°ru˘uªdName
 "un°ru˘uªdName"

	)

707 
	#NID_pkcs9_un°ru˘uªdName
 49

	)

708 
	#OBJ_pkcs9_un°ru˘uªdName
 
OBJ_pkcs9
,2L

	)

710 
	#LN_pkcs9_c⁄ã¡Ty≥
 "c⁄ã¡Ty≥"

	)

711 
	#NID_pkcs9_c⁄ã¡Ty≥
 50

	)

712 
	#OBJ_pkcs9_c⁄ã¡Ty≥
 
OBJ_pkcs9
,3L

	)

714 
	#LN_pkcs9_mesßgeDige°
 "mesßgeDige°"

	)

715 
	#NID_pkcs9_mesßgeDige°
 51

	)

716 
	#OBJ_pkcs9_mesßgeDige°
 
OBJ_pkcs9
,4L

	)

718 
	#LN_pkcs9_signögTime
 "signögTime"

	)

719 
	#NID_pkcs9_signögTime
 52

	)

720 
	#OBJ_pkcs9_signögTime
 
OBJ_pkcs9
,5L

	)

722 
	#LN_pkcs9_cou¡îsig«tuª
 "cou¡îsig«tuª"

	)

723 
	#NID_pkcs9_cou¡îsig«tuª
 53

	)

724 
	#OBJ_pkcs9_cou¡îsig«tuª
 
OBJ_pkcs9
,6L

	)

726 
	#LN_pkcs9_chÆÀngePassw‹d
 "chÆÀngePassw‹d"

	)

727 
	#NID_pkcs9_chÆÀngePassw‹d
 54

	)

728 
	#OBJ_pkcs9_chÆÀngePassw‹d
 
OBJ_pkcs9
,7L

	)

730 
	#LN_pkcs9_un°ru˘uªdAddªss
 "un°ru˘uªdAddªss"

	)

731 
	#NID_pkcs9_un°ru˘uªdAddªss
 55

	)

732 
	#OBJ_pkcs9_un°ru˘uªdAddªss
 
OBJ_pkcs9
,8L

	)

734 
	#LN_pkcs9_extCîtAâribuãs
 "exãndedCîtifiˇãAâribuãs"

	)

735 
	#NID_pkcs9_extCîtAâribuãs
 56

	)

736 
	#OBJ_pkcs9_extCîtAâribuãs
 
OBJ_pkcs9
,9L

	)

738 
	#SN_ext_ªq
 "extReq"

	)

739 
	#LN_ext_ªq
 "Exãnsi⁄ Reque°"

	)

740 
	#NID_ext_ªq
 172

	)

741 
	#OBJ_ext_ªq
 
OBJ_pkcs9
,14L

	)

743 
	#SN_SMIMEC≠abûôõs
 "SMIME-CAPS"

	)

744 
	#LN_SMIMEC≠abûôõs
 "S/MIME C≠abûôõs"

	)

745 
	#NID_SMIMEC≠abûôõs
 167

	)

746 
	#OBJ_SMIMEC≠abûôõs
 
OBJ_pkcs9
,15L

	)

748 
	#SN_SMIME
 "SMIME"

	)

749 
	#LN_SMIME
 "S/MIME"

	)

750 
	#NID_SMIME
 188

	)

751 
	#OBJ_SMIME
 
OBJ_pkcs9
,16L

	)

753 
	#SN_id_smime_mod
 "id-smime-mod"

	)

754 
	#NID_id_smime_mod
 189

	)

755 
	#OBJ_id_smime_mod
 
OBJ_SMIME
,0L

	)

757 
	#SN_id_smime_˘
 "id-smime-˘"

	)

758 
	#NID_id_smime_˘
 190

	)

759 
	#OBJ_id_smime_˘
 
OBJ_SMIME
,1L

	)

761 
	#SN_id_smime_Ø
 "id-smime-Ø"

	)

762 
	#NID_id_smime_Ø
 191

	)

763 
	#OBJ_id_smime_Ø
 
OBJ_SMIME
,2L

	)

765 
	#SN_id_smime_Æg
 "id-smime-Æg"

	)

766 
	#NID_id_smime_Æg
 192

	)

767 
	#OBJ_id_smime_Æg
 
OBJ_SMIME
,3L

	)

769 
	#SN_id_smime_cd
 "id-smime-cd"

	)

770 
	#NID_id_smime_cd
 193

	)

771 
	#OBJ_id_smime_cd
 
OBJ_SMIME
,4L

	)

773 
	#SN_id_smime_•q
 "id-smime-•q"

	)

774 
	#NID_id_smime_•q
 194

	)

775 
	#OBJ_id_smime_•q
 
OBJ_SMIME
,5L

	)

777 
	#SN_id_smime_˘i
 "id-smime-˘i"

	)

778 
	#NID_id_smime_˘i
 195

	)

779 
	#OBJ_id_smime_˘i
 
OBJ_SMIME
,6L

	)

781 
	#SN_id_smime_mod_cms
 "id-smime-mod-cms"

	)

782 
	#NID_id_smime_mod_cms
 196

	)

783 
	#OBJ_id_smime_mod_cms
 
OBJ_id_smime_mod
,1L

	)

785 
	#SN_id_smime_mod_ess
 "id-smime-mod-ess"

	)

786 
	#NID_id_smime_mod_ess
 197

	)

787 
	#OBJ_id_smime_mod_ess
 
OBJ_id_smime_mod
,2L

	)

789 
	#SN_id_smime_mod_oid
 "id-smime-mod-oid"

	)

790 
	#NID_id_smime_mod_oid
 198

	)

791 
	#OBJ_id_smime_mod_oid
 
OBJ_id_smime_mod
,3L

	)

793 
	#SN_id_smime_mod_msg_v3
 "id-smime-mod-msg-v3"

	)

794 
	#NID_id_smime_mod_msg_v3
 199

	)

795 
	#OBJ_id_smime_mod_msg_v3
 
OBJ_id_smime_mod
,4L

	)

797 
	#SN_id_smime_mod_ës_eSig«tuª_88
 "id-smime-mod-ës-eSig«tuª-88"

	)

798 
	#NID_id_smime_mod_ës_eSig«tuª_88
 200

	)

799 
	#OBJ_id_smime_mod_ës_eSig«tuª_88
 
OBJ_id_smime_mod
,5L

	)

801 
	#SN_id_smime_mod_ës_eSig«tuª_97
 "id-smime-mod-ës-eSig«tuª-97"

	)

802 
	#NID_id_smime_mod_ës_eSig«tuª_97
 201

	)

803 
	#OBJ_id_smime_mod_ës_eSig«tuª_97
 
OBJ_id_smime_mod
,6L

	)

805 
	#SN_id_smime_mod_ës_eSigPﬁicy_88
 "id-smime-mod-ës-eSigPﬁicy-88"

	)

806 
	#NID_id_smime_mod_ës_eSigPﬁicy_88
 202

	)

807 
	#OBJ_id_smime_mod_ës_eSigPﬁicy_88
 
OBJ_id_smime_mod
,7L

	)

809 
	#SN_id_smime_mod_ës_eSigPﬁicy_97
 "id-smime-mod-ës-eSigPﬁicy-97"

	)

810 
	#NID_id_smime_mod_ës_eSigPﬁicy_97
 203

	)

811 
	#OBJ_id_smime_mod_ës_eSigPﬁicy_97
 
OBJ_id_smime_mod
,8L

	)

813 
	#SN_id_smime_˘_ª˚ùt
 "id-smime-˘-ª˚ùt"

	)

814 
	#NID_id_smime_˘_ª˚ùt
 204

	)

815 
	#OBJ_id_smime_˘_ª˚ùt
 
OBJ_id_smime_˘
,1L

	)

817 
	#SN_id_smime_˘_authD©a
 "id-smime-˘-authD©a"

	)

818 
	#NID_id_smime_˘_authD©a
 205

	)

819 
	#OBJ_id_smime_˘_authD©a
 
OBJ_id_smime_˘
,2L

	)

821 
	#SN_id_smime_˘_publishCît
 "id-smime-˘-publishCît"

	)

822 
	#NID_id_smime_˘_publishCît
 206

	)

823 
	#OBJ_id_smime_˘_publishCît
 
OBJ_id_smime_˘
,3L

	)

825 
	#SN_id_smime_˘_TSTInfo
 "id-smime-˘-TSTInfo"

	)

826 
	#NID_id_smime_˘_TSTInfo
 207

	)

827 
	#OBJ_id_smime_˘_TSTInfo
 
OBJ_id_smime_˘
,4L

	)

829 
	#SN_id_smime_˘_TDTInfo
 "id-smime-˘-TDTInfo"

	)

830 
	#NID_id_smime_˘_TDTInfo
 208

	)

831 
	#OBJ_id_smime_˘_TDTInfo
 
OBJ_id_smime_˘
,5L

	)

833 
	#SN_id_smime_˘_c⁄ã¡Info
 "id-smime-˘-c⁄ã¡Info"

	)

834 
	#NID_id_smime_˘_c⁄ã¡Info
 209

	)

835 
	#OBJ_id_smime_˘_c⁄ã¡Info
 
OBJ_id_smime_˘
,6L

	)

837 
	#SN_id_smime_˘_DVCSReque°D©a
 "id-smime-˘-DVCSReque°D©a"

	)

838 
	#NID_id_smime_˘_DVCSReque°D©a
 210

	)

839 
	#OBJ_id_smime_˘_DVCSReque°D©a
 
OBJ_id_smime_˘
,7L

	)

841 
	#SN_id_smime_˘_DVCSRe•⁄£D©a
 "id-smime-˘-DVCSRe•⁄£D©a"

	)

842 
	#NID_id_smime_˘_DVCSRe•⁄£D©a
 211

	)

843 
	#OBJ_id_smime_˘_DVCSRe•⁄£D©a
 
OBJ_id_smime_˘
,8L

	)

845 
	#SN_id_smime_˘_com¥es£dD©a
 "id-smime-˘-com¥es£dD©a"

	)

846 
	#NID_id_smime_˘_com¥es£dD©a
 786

	)

847 
	#OBJ_id_smime_˘_com¥es£dD©a
 
OBJ_id_smime_˘
,9L

	)

849 
	#SN_id_smime_˘_c⁄ã¡CﬁÀ˘i⁄
 "id-smime-˘-c⁄ã¡CﬁÀ˘i⁄"

	)

850 
	#NID_id_smime_˘_c⁄ã¡CﬁÀ˘i⁄
 1058

	)

851 
	#OBJ_id_smime_˘_c⁄ã¡CﬁÀ˘i⁄
 
OBJ_id_smime_˘
,19L

	)

853 
	#SN_id_smime_˘_authEnvñ›edD©a
 "id-smime-˘-authEnvñ›edD©a"

	)

854 
	#NID_id_smime_˘_authEnvñ›edD©a
 1059

	)

855 
	#OBJ_id_smime_˘_authEnvñ›edD©a
 
OBJ_id_smime_˘
,23L

	)

857 
	#SN_id_˘_rouãOrigöAuthz
 "id-˘-rouãOrigöAuthz"

	)

858 
	#NID_id_˘_rouãOrigöAuthz
 1234

	)

859 
	#OBJ_id_˘_rouãOrigöAuthz
 
OBJ_id_smime_˘
,24L

	)

861 
	#SN_id_˘_ΩkiM™i„°
 "id-˘-ΩkiM™i„°"

	)

862 
	#NID_id_˘_ΩkiM™i„°
 1235

	)

863 
	#OBJ_id_˘_ΩkiM™i„°
 
OBJ_id_smime_˘
,26L

	)

865 
	#SN_id_˘_asciiTextWôhCRLF
 "id-˘-asciiTextWôhCRLF"

	)

866 
	#NID_id_˘_asciiTextWôhCRLF
 787

	)

867 
	#OBJ_id_˘_asciiTextWôhCRLF
 
OBJ_id_smime_˘
,27L

	)

869 
	#SN_id_˘_xml
 "id-˘-xml"

	)

870 
	#NID_id_˘_xml
 1060

	)

871 
	#OBJ_id_˘_xml
 
OBJ_id_smime_˘
,28L

	)

873 
	#SN_id_˘_ΩkiGho°bu°îs
 "id-˘-ΩkiGho°bu°îs"

	)

874 
	#NID_id_˘_ΩkiGho°bu°îs
 1236

	)

875 
	#OBJ_id_˘_ΩkiGho°bu°îs
 
OBJ_id_smime_˘
,35L

	)

877 
	#SN_id_˘_ªsour˚TaggedAâe°
 "id-˘-ªsour˚TaggedAâe°"

	)

878 
	#NID_id_˘_ªsour˚TaggedAâe°
 1237

	)

879 
	#OBJ_id_˘_ªsour˚TaggedAâe°
 
OBJ_id_smime_˘
,36L

	)

881 
	#SN_id_˘_geo„edCSVwôhCRLF
 "id-˘-geo„edCSVwôhCRLF"

	)

882 
	#NID_id_˘_geo„edCSVwôhCRLF
 1246

	)

883 
	#OBJ_id_˘_geo„edCSVwôhCRLF
 
OBJ_id_smime_˘
,47L

	)

885 
	#SN_id_˘_sig√dCheckli°
 "id-˘-sig√dCheckli°"

	)

886 
	#NID_id_˘_sig√dCheckli°
 1247

	)

887 
	#OBJ_id_˘_sig√dCheckli°
 
OBJ_id_smime_˘
,48L

	)

889 
	#SN_id_smime_Ø_ª˚ùtReque°
 "id-smime-Ø-ª˚ùtReque°"

	)

890 
	#NID_id_smime_Ø_ª˚ùtReque°
 212

	)

891 
	#OBJ_id_smime_Ø_ª˚ùtReque°
 
OBJ_id_smime_Ø
,1L

	)

893 
	#SN_id_smime_Ø_£curôyLabñ
 "id-smime-Ø-£curôyLabñ"

	)

894 
	#NID_id_smime_Ø_£curôyLabñ
 213

	)

895 
	#OBJ_id_smime_Ø_£curôyLabñ
 
OBJ_id_smime_Ø
,2L

	)

897 
	#SN_id_smime_Ø_mlEx∑ndHi°‹y
 "id-smime-Ø-mlEx∑ndHi°‹y"

	)

898 
	#NID_id_smime_Ø_mlEx∑ndHi°‹y
 214

	)

899 
	#OBJ_id_smime_Ø_mlEx∑ndHi°‹y
 
OBJ_id_smime_Ø
,3L

	)

901 
	#SN_id_smime_Ø_c⁄ã¡Höt
 "id-smime-Ø-c⁄ã¡Höt"

	)

902 
	#NID_id_smime_Ø_c⁄ã¡Höt
 215

	)

903 
	#OBJ_id_smime_Ø_c⁄ã¡Höt
 
OBJ_id_smime_Ø
,4L

	)

905 
	#SN_id_smime_Ø_msgSigDige°
 "id-smime-Ø-msgSigDige°"

	)

906 
	#NID_id_smime_Ø_msgSigDige°
 216

	)

907 
	#OBJ_id_smime_Ø_msgSigDige°
 
OBJ_id_smime_Ø
,5L

	)

909 
	#SN_id_smime_Ø_íˇpC⁄ã¡Ty≥
 "id-smime-Ø-íˇpC⁄ã¡Ty≥"

	)

910 
	#NID_id_smime_Ø_íˇpC⁄ã¡Ty≥
 217

	)

911 
	#OBJ_id_smime_Ø_íˇpC⁄ã¡Ty≥
 
OBJ_id_smime_Ø
,6L

	)

913 
	#SN_id_smime_Ø_c⁄ã¡Idítifõr
 "id-smime-Ø-c⁄ã¡Idítifõr"

	)

914 
	#NID_id_smime_Ø_c⁄ã¡Idítifõr
 218

	)

915 
	#OBJ_id_smime_Ø_c⁄ã¡Idítifõr
 
OBJ_id_smime_Ø
,7L

	)

917 
	#SN_id_smime_Ø_macVÆue
 "id-smime-Ø-macVÆue"

	)

918 
	#NID_id_smime_Ø_macVÆue
 219

	)

919 
	#OBJ_id_smime_Ø_macVÆue
 
OBJ_id_smime_Ø
,8L

	)

921 
	#SN_id_smime_Ø_equivÆítLabñs
 "id-smime-Ø-equivÆítLabñs"

	)

922 
	#NID_id_smime_Ø_equivÆítLabñs
 220

	)

923 
	#OBJ_id_smime_Ø_equivÆítLabñs
 
OBJ_id_smime_Ø
,9L

	)

925 
	#SN_id_smime_Ø_c⁄ã¡Re„ªn˚
 "id-smime-Ø-c⁄ã¡Re„ªn˚"

	)

926 
	#NID_id_smime_Ø_c⁄ã¡Re„ªn˚
 221

	)

927 
	#OBJ_id_smime_Ø_c⁄ã¡Re„ªn˚
 
OBJ_id_smime_Ø
,10L

	)

929 
	#SN_id_smime_Ø_í¸ypKeyPªf
 "id-smime-Ø-í¸ypKeyPªf"

	)

930 
	#NID_id_smime_Ø_í¸ypKeyPªf
 222

	)

931 
	#OBJ_id_smime_Ø_í¸ypKeyPªf
 
OBJ_id_smime_Ø
,11L

	)

933 
	#SN_id_smime_Ø_signögCîtifiˇã
 "id-smime-Ø-signögCîtifiˇã"

	)

934 
	#NID_id_smime_Ø_signögCîtifiˇã
 223

	)

935 
	#OBJ_id_smime_Ø_signögCîtifiˇã
 
OBJ_id_smime_Ø
,12L

	)

937 
	#SN_id_smime_Ø_smimeEn¸y±Cîts
 "id-smime-Ø-smimeEn¸y±Cîts"

	)

938 
	#NID_id_smime_Ø_smimeEn¸y±Cîts
 224

	)

939 
	#OBJ_id_smime_Ø_smimeEn¸y±Cîts
 
OBJ_id_smime_Ø
,13L

	)

941 
	#SN_id_smime_Ø_timeSèmpTokí
 "id-smime-Ø-timeSèmpTokí"

	)

942 
	#NID_id_smime_Ø_timeSèmpTokí
 225

	)

943 
	#OBJ_id_smime_Ø_timeSèmpTokí
 
OBJ_id_smime_Ø
,14L

	)

945 
	#SN_id_smime_Ø_ës_sigPﬁicyId
 "id-smime-Ø-ës-sigPﬁicyId"

	)

946 
	#NID_id_smime_Ø_ës_sigPﬁicyId
 226

	)

947 
	#OBJ_id_smime_Ø_ës_sigPﬁicyId
 
OBJ_id_smime_Ø
,15L

	)

949 
	#SN_id_smime_Ø_ës_commômítTy≥
 "id-smime-Ø-ës-commômítTy≥"

	)

950 
	#NID_id_smime_Ø_ës_commômítTy≥
 227

	)

951 
	#OBJ_id_smime_Ø_ës_commômítTy≥
 
OBJ_id_smime_Ø
,16L

	)

953 
	#SN_id_smime_Ø_ës_sig√rLoˇti⁄
 "id-smime-Ø-ës-sig√rLoˇti⁄"

	)

954 
	#NID_id_smime_Ø_ës_sig√rLoˇti⁄
 228

	)

955 
	#OBJ_id_smime_Ø_ës_sig√rLoˇti⁄
 
OBJ_id_smime_Ø
,17L

	)

957 
	#SN_id_smime_Ø_ës_sig√rAâr
 "id-smime-Ø-ës-sig√rAâr"

	)

958 
	#NID_id_smime_Ø_ës_sig√rAâr
 229

	)

959 
	#OBJ_id_smime_Ø_ës_sig√rAâr
 
OBJ_id_smime_Ø
,18L

	)

961 
	#SN_id_smime_Ø_ës_ŸhîSigCît
 "id-smime-Ø-ës-ŸhîSigCît"

	)

962 
	#NID_id_smime_Ø_ës_ŸhîSigCît
 230

	)

963 
	#OBJ_id_smime_Ø_ës_ŸhîSigCît
 
OBJ_id_smime_Ø
,19L

	)

965 
	#SN_id_smime_Ø_ës_c⁄ã¡Time°amp
 "id-smime-Ø-ës-c⁄ã¡Time°amp"

	)

966 
	#NID_id_smime_Ø_ës_c⁄ã¡Time°amp
 231

	)

967 
	#OBJ_id_smime_Ø_ës_c⁄ã¡Time°amp
 
OBJ_id_smime_Ø
,20L

	)

969 
	#SN_id_smime_Ø_ës_CîtifiˇãRefs
 "id-smime-Ø-ës-CîtifiˇãRefs"

	)

970 
	#NID_id_smime_Ø_ës_CîtifiˇãRefs
 232

	)

971 
	#OBJ_id_smime_Ø_ës_CîtifiˇãRefs
 
OBJ_id_smime_Ø
,21L

	)

973 
	#SN_id_smime_Ø_ës_Revoˇti⁄Refs
 "id-smime-Ø-ës-Revoˇti⁄Refs"

	)

974 
	#NID_id_smime_Ø_ës_Revoˇti⁄Refs
 233

	)

975 
	#OBJ_id_smime_Ø_ës_Revoˇti⁄Refs
 
OBJ_id_smime_Ø
,22L

	)

977 
	#SN_id_smime_Ø_ës_˚πVÆues
 "id-smime-Ø-ës-˚πVÆues"

	)

978 
	#NID_id_smime_Ø_ës_˚πVÆues
 234

	)

979 
	#OBJ_id_smime_Ø_ës_˚πVÆues
 
OBJ_id_smime_Ø
,23L

	)

981 
	#SN_id_smime_Ø_ës_ªvoˇti⁄VÆues
 "id-smime-Ø-ës-ªvoˇti⁄VÆues"

	)

982 
	#NID_id_smime_Ø_ës_ªvoˇti⁄VÆues
 235

	)

983 
	#OBJ_id_smime_Ø_ës_ªvoˇti⁄VÆues
 
OBJ_id_smime_Ø
,24L

	)

985 
	#SN_id_smime_Ø_ës_escTimeSèmp
 "id-smime-Ø-ës-escTimeSèmp"

	)

986 
	#NID_id_smime_Ø_ës_escTimeSèmp
 236

	)

987 
	#OBJ_id_smime_Ø_ës_escTimeSèmp
 
OBJ_id_smime_Ø
,25L

	)

989 
	#SN_id_smime_Ø_ës_˚πCRLTime°amp
 "id-smime-Ø-ës-˚πCRLTime°amp"

	)

990 
	#NID_id_smime_Ø_ës_˚πCRLTime°amp
 237

	)

991 
	#OBJ_id_smime_Ø_ës_˚πCRLTime°amp
 
OBJ_id_smime_Ø
,26L

	)

993 
	#SN_id_smime_Ø_ës_¨chiveTimeSèmp
 "id-smime-Ø-ës-¨chiveTimeSèmp"

	)

994 
	#NID_id_smime_Ø_ës_¨chiveTimeSèmp
 238

	)

995 
	#OBJ_id_smime_Ø_ës_¨chiveTimeSèmp
 
OBJ_id_smime_Ø
,27L

	)

997 
	#SN_id_smime_Ø_sig«tuªTy≥
 "id-smime-Ø-sig«tuªTy≥"

	)

998 
	#NID_id_smime_Ø_sig«tuªTy≥
 239

	)

999 
	#OBJ_id_smime_Ø_sig«tuªTy≥
 
OBJ_id_smime_Ø
,28L

	)

1001 
	#SN_id_smime_Ø_dvcs_dvc
 "id-smime-Ø-dvcs-dvc"

	)

1002 
	#NID_id_smime_Ø_dvcs_dvc
 240

	)

1003 
	#OBJ_id_smime_Ø_dvcs_dvc
 
OBJ_id_smime_Ø
,29L

	)

1005 
	#SN_id_smime_Ø_signögCîtifiˇãV2
 "id-smime-Ø-signögCîtifiˇãV2"

	)

1006 
	#NID_id_smime_Ø_signögCîtifiˇãV2
 1086

	)

1007 
	#OBJ_id_smime_Ø_signögCîtifiˇãV2
 
OBJ_id_smime_Ø
,47L

	)

1009 
	#SN_id_smime_Æg_ESDHwôh3DES
 "id-smime-Æg-ESDHwôh3DES"

	)

1010 
	#NID_id_smime_Æg_ESDHwôh3DES
 241

	)

1011 
	#OBJ_id_smime_Æg_ESDHwôh3DES
 
OBJ_id_smime_Æg
,1L

	)

1013 
	#SN_id_smime_Æg_ESDHwôhRC2
 "id-smime-Æg-ESDHwôhRC2"

	)

1014 
	#NID_id_smime_Æg_ESDHwôhRC2
 242

	)

1015 
	#OBJ_id_smime_Æg_ESDHwôhRC2
 
OBJ_id_smime_Æg
,2L

	)

1017 
	#SN_id_smime_Æg_3DESwøp
 "id-smime-Æg-3DESwøp"

	)

1018 
	#NID_id_smime_Æg_3DESwøp
 243

	)

1019 
	#OBJ_id_smime_Æg_3DESwøp
 
OBJ_id_smime_Æg
,3L

	)

1021 
	#SN_id_smime_Æg_RC2wøp
 "id-smime-Æg-RC2wøp"

	)

1022 
	#NID_id_smime_Æg_RC2wøp
 244

	)

1023 
	#OBJ_id_smime_Æg_RC2wøp
 
OBJ_id_smime_Æg
,4L

	)

1025 
	#SN_id_smime_Æg_ESDH
 "id-smime-Æg-ESDH"

	)

1026 
	#NID_id_smime_Æg_ESDH
 245

	)

1027 
	#OBJ_id_smime_Æg_ESDH
 
OBJ_id_smime_Æg
,5L

	)

1029 
	#SN_id_smime_Æg_CMS3DESwøp
 "id-smime-Æg-CMS3DESwøp"

	)

1030 
	#NID_id_smime_Æg_CMS3DESwøp
 246

	)

1031 
	#OBJ_id_smime_Æg_CMS3DESwøp
 
OBJ_id_smime_Æg
,6L

	)

1033 
	#SN_id_smime_Æg_CMSRC2wøp
 "id-smime-Æg-CMSRC2wøp"

	)

1034 
	#NID_id_smime_Æg_CMSRC2wøp
 247

	)

1035 
	#OBJ_id_smime_Æg_CMSRC2wøp
 
OBJ_id_smime_Æg
,7L

	)

1037 
	#SN_id_Æg_PWRI_KEK
 "id-Æg-PWRI-KEK"

	)

1038 
	#NID_id_Æg_PWRI_KEK
 893

	)

1039 
	#OBJ_id_Æg_PWRI_KEK
 
OBJ_id_smime_Æg
,9L

	)

1041 
	#SN_id_smime_cd_ld≠
 "id-smime-cd-ld≠"

	)

1042 
	#NID_id_smime_cd_ld≠
 248

	)

1043 
	#OBJ_id_smime_cd_ld≠
 
OBJ_id_smime_cd
,1L

	)

1045 
	#SN_id_smime_•q_ës_sqt_uri
 "id-smime-•q-ës-sqt-uri"

	)

1046 
	#NID_id_smime_•q_ës_sqt_uri
 249

	)

1047 
	#OBJ_id_smime_•q_ës_sqt_uri
 
OBJ_id_smime_•q
,1L

	)

1049 
	#SN_id_smime_•q_ës_sqt_unŸi˚
 "id-smime-•q-ës-sqt-unŸi˚"

	)

1050 
	#NID_id_smime_•q_ës_sqt_unŸi˚
 250

	)

1051 
	#OBJ_id_smime_•q_ës_sqt_unŸi˚
 
OBJ_id_smime_•q
,2L

	)

1053 
	#SN_id_smime_˘i_ës_¥oofOfOrigö
 "id-smime-˘i-ës-¥oofOfOrigö"

	)

1054 
	#NID_id_smime_˘i_ës_¥oofOfOrigö
 251

	)

1055 
	#OBJ_id_smime_˘i_ës_¥oofOfOrigö
 
OBJ_id_smime_˘i
,1L

	)

1057 
	#SN_id_smime_˘i_ës_¥oofOfRe˚ùt
 "id-smime-˘i-ës-¥oofOfRe˚ùt"

	)

1058 
	#NID_id_smime_˘i_ës_¥oofOfRe˚ùt
 252

	)

1059 
	#OBJ_id_smime_˘i_ës_¥oofOfRe˚ùt
 
OBJ_id_smime_˘i
,2L

	)

1061 
	#SN_id_smime_˘i_ës_¥oofOfDñivîy
 "id-smime-˘i-ës-¥oofOfDñivîy"

	)

1062 
	#NID_id_smime_˘i_ës_¥oofOfDñivîy
 253

	)

1063 
	#OBJ_id_smime_˘i_ës_¥oofOfDñivîy
 
OBJ_id_smime_˘i
,3L

	)

1065 
	#SN_id_smime_˘i_ës_¥oofOfSídî
 "id-smime-˘i-ës-¥oofOfSídî"

	)

1066 
	#NID_id_smime_˘i_ës_¥oofOfSídî
 254

	)

1067 
	#OBJ_id_smime_˘i_ës_¥oofOfSídî
 
OBJ_id_smime_˘i
,4L

	)

1069 
	#SN_id_smime_˘i_ës_¥oofOfAµrovÆ
 "id-smime-˘i-ës-¥oofOfAµrovÆ"

	)

1070 
	#NID_id_smime_˘i_ës_¥oofOfAµrovÆ
 255

	)

1071 
	#OBJ_id_smime_˘i_ës_¥oofOfAµrovÆ
 
OBJ_id_smime_˘i
,5L

	)

1073 
	#SN_id_smime_˘i_ës_¥oofOfCª©i⁄
 "id-smime-˘i-ës-¥oofOfCª©i⁄"

	)

1074 
	#NID_id_smime_˘i_ës_¥oofOfCª©i⁄
 256

	)

1075 
	#OBJ_id_smime_˘i_ës_¥oofOfCª©i⁄
 
OBJ_id_smime_˘i
,6L

	)

1077 
	#LN_‰õndlyName
 "‰õndlyName"

	)

1078 
	#NID_‰õndlyName
 156

	)

1079 
	#OBJ_‰õndlyName
 
OBJ_pkcs9
,20L

	)

1081 
	#LN_loˇlKeyID
 "loˇlKeyID"

	)

1082 
	#NID_loˇlKeyID
 157

	)

1083 
	#OBJ_loˇlKeyID
 
OBJ_pkcs9
,21L

	)

1085 
	#SN_ms_c•_«me
 "CSPName"

	)

1086 
	#LN_ms_c•_«me
 "Mi¸oso· CSP Name"

	)

1087 
	#NID_ms_c•_«me
 417

	)

1088 
	#OBJ_ms_c•_«me
 1L,3L,6L,1L,4L,1L,311L,17L,1L

	)

1090 
	#SN_LoˇlKeySë
 "LoˇlKeySë"

	)

1091 
	#LN_LoˇlKeySë
 "Mi¸oso· Loˇ»Key së"

	)

1092 
	#NID_LoˇlKeySë
 856

	)

1093 
	#OBJ_LoˇlKeySë
 1L,3L,6L,1L,4L,1L,311L,17L,2L

	)

1095 
	#OBJ_˚πTy≥s
 
OBJ_pkcs9
,22L

	)

1097 
	#LN_x509Cîtifiˇã
 "x509Cîtifiˇã"

	)

1098 
	#NID_x509Cîtifiˇã
 158

	)

1099 
	#OBJ_x509Cîtifiˇã
 
OBJ_˚πTy≥s
,1L

	)

1101 
	#LN_sdsiCîtifiˇã
 "sdsiCîtifiˇã"

	)

1102 
	#NID_sdsiCîtifiˇã
 159

	)

1103 
	#OBJ_sdsiCîtifiˇã
 
OBJ_˚πTy≥s
,2L

	)

1105 
	#OBJ_¸lTy≥s
 
OBJ_pkcs9
,23L

	)

1107 
	#LN_x509Cæ
 "x509Cæ"

	)

1108 
	#NID_x509Cæ
 160

	)

1109 
	#OBJ_x509Cæ
 
OBJ_¸lTy≥s
,1L

	)

1111 
	#OBJ_pkcs12
 
OBJ_pkcs
,12L

	)

1113 
	#OBJ_pkcs12_pbeids
 
OBJ_pkcs12
,1L

	)

1115 
	#SN_pbe_WôhSHA1And128BôRC4
 "PBE-SHA1-RC4-128"

	)

1116 
	#LN_pbe_WôhSHA1And128BôRC4
 "pbeWôhSHA1And128BôRC4"

	)

1117 
	#NID_pbe_WôhSHA1And128BôRC4
 144

	)

1118 
	#OBJ_pbe_WôhSHA1And128BôRC4
 
OBJ_pkcs12_pbeids
,1L

	)

1120 
	#SN_pbe_WôhSHA1And40BôRC4
 "PBE-SHA1-RC4-40"

	)

1121 
	#LN_pbe_WôhSHA1And40BôRC4
 "pbeWôhSHA1And40BôRC4"

	)

1122 
	#NID_pbe_WôhSHA1And40BôRC4
 145

	)

1123 
	#OBJ_pbe_WôhSHA1And40BôRC4
 
OBJ_pkcs12_pbeids
,2L

	)

1125 
	#SN_pbe_WôhSHA1And3_Key_TrùÀDES_CBC
 "PBE-SHA1-3DES"

	)

1126 
	#LN_pbe_WôhSHA1And3_Key_TrùÀDES_CBC
 "pbeWôhSHA1And3-KeyTrùÀDES-CBC"

	)

1127 
	#NID_pbe_WôhSHA1And3_Key_TrùÀDES_CBC
 146

	)

1128 
	#OBJ_pbe_WôhSHA1And3_Key_TrùÀDES_CBC
 
OBJ_pkcs12_pbeids
,3L

	)

1130 
	#SN_pbe_WôhSHA1And2_Key_TrùÀDES_CBC
 "PBE-SHA1-2DES"

	)

1131 
	#LN_pbe_WôhSHA1And2_Key_TrùÀDES_CBC
 "pbeWôhSHA1And2-KeyTrùÀDES-CBC"

	)

1132 
	#NID_pbe_WôhSHA1And2_Key_TrùÀDES_CBC
 147

	)

1133 
	#OBJ_pbe_WôhSHA1And2_Key_TrùÀDES_CBC
 
OBJ_pkcs12_pbeids
,4L

	)

1135 
	#SN_pbe_WôhSHA1And128BôRC2_CBC
 "PBE-SHA1-RC2-128"

	)

1136 
	#LN_pbe_WôhSHA1And128BôRC2_CBC
 "pbeWôhSHA1And128BôRC2-CBC"

	)

1137 
	#NID_pbe_WôhSHA1And128BôRC2_CBC
 148

	)

1138 
	#OBJ_pbe_WôhSHA1And128BôRC2_CBC
 
OBJ_pkcs12_pbeids
,5L

	)

1140 
	#SN_pbe_WôhSHA1And40BôRC2_CBC
 "PBE-SHA1-RC2-40"

	)

1141 
	#LN_pbe_WôhSHA1And40BôRC2_CBC
 "pbeWôhSHA1And40BôRC2-CBC"

	)

1142 
	#NID_pbe_WôhSHA1And40BôRC2_CBC
 149

	)

1143 
	#OBJ_pbe_WôhSHA1And40BôRC2_CBC
 
OBJ_pkcs12_pbeids
,6L

	)

1145 
	#OBJ_pkcs12_Vîsi⁄1
 
OBJ_pkcs12
,10L

	)

1147 
	#OBJ_pkcs12_BagIds
 
OBJ_pkcs12_Vîsi⁄1
,1L

	)

1149 
	#LN_keyBag
 "keyBag"

	)

1150 
	#NID_keyBag
 150

	)

1151 
	#OBJ_keyBag
 
OBJ_pkcs12_BagIds
,1L

	)

1153 
	#LN_pkcs8ShroudedKeyBag
 "pkcs8ShroudedKeyBag"

	)

1154 
	#NID_pkcs8ShroudedKeyBag
 151

	)

1155 
	#OBJ_pkcs8ShroudedKeyBag
 
OBJ_pkcs12_BagIds
,2L

	)

1157 
	#LN_˚πBag
 "˚πBag"

	)

1158 
	#NID_˚πBag
 152

	)

1159 
	#OBJ_˚πBag
 
OBJ_pkcs12_BagIds
,3L

	)

1161 
	#LN_¸lBag
 "¸lBag"

	)

1162 
	#NID_¸lBag
 153

	)

1163 
	#OBJ_¸lBag
 
OBJ_pkcs12_BagIds
,4L

	)

1165 
	#LN_£¸ëBag
 "£¸ëBag"

	)

1166 
	#NID_£¸ëBag
 154

	)

1167 
	#OBJ_£¸ëBag
 
OBJ_pkcs12_BagIds
,5L

	)

1169 
	#LN_ß„C⁄ã¡sBag
 "ß„C⁄ã¡sBag"

	)

1170 
	#NID_ß„C⁄ã¡sBag
 155

	)

1171 
	#OBJ_ß„C⁄ã¡sBag
 
OBJ_pkcs12_BagIds
,6L

	)

1173 
	#SN_md2
 "MD2"

	)

1174 
	#LN_md2
 "md2"

	)

1175 
	#NID_md2
 3

	)

1176 
	#OBJ_md2
 
OBJ_rßdsi
,2L,2L

	)

1178 
	#SN_md4
 "MD4"

	)

1179 
	#LN_md4
 "md4"

	)

1180 
	#NID_md4
 257

	)

1181 
	#OBJ_md4
 
OBJ_rßdsi
,2L,4L

	)

1183 
	#SN_md5
 "MD5"

	)

1184 
	#LN_md5
 "md5"

	)

1185 
	#NID_md5
 4

	)

1186 
	#OBJ_md5
 
OBJ_rßdsi
,2L,5L

	)

1188 
	#SN_md5_sha1
 "MD5-SHA1"

	)

1189 
	#LN_md5_sha1
 "md5-sha1"

	)

1190 
	#NID_md5_sha1
 114

	)

1192 
	#LN_hmacWôhMD5
 "hmacWôhMD5"

	)

1193 
	#NID_hmacWôhMD5
 797

	)

1194 
	#OBJ_hmacWôhMD5
 
OBJ_rßdsi
,2L,6L

	)

1196 
	#LN_hmacWôhSHA1
 "hmacWôhSHA1"

	)

1197 
	#NID_hmacWôhSHA1
 163

	)

1198 
	#OBJ_hmacWôhSHA1
 
OBJ_rßdsi
,2L,7L

	)

1200 
	#SN_sm2
 "SM2"

	)

1201 
	#LN_sm2
 "sm2"

	)

1202 
	#NID_sm2
 1172

	)

1203 
	#OBJ_sm2
 
OBJ_sm_scheme
,301L

	)

1205 
	#SN_sm3
 "SM3"

	)

1206 
	#LN_sm3
 "sm3"

	)

1207 
	#NID_sm3
 1143

	)

1208 
	#OBJ_sm3
 
OBJ_sm_scheme
,401L

	)

1210 
	#SN_sm3WôhRSAEn¸y±i⁄
 "RSA-SM3"

	)

1211 
	#LN_sm3WôhRSAEn¸y±i⁄
 "sm3WôhRSAEn¸y±i⁄"

	)

1212 
	#NID_sm3WôhRSAEn¸y±i⁄
 1144

	)

1213 
	#OBJ_sm3WôhRSAEn¸y±i⁄
 
OBJ_sm_scheme
,504L

	)

1215 
	#SN_SM2_wôh_SM3
 "SM2-SM3"

	)

1216 
	#LN_SM2_wôh_SM3
 "SM2-wôh-SM3"

	)

1217 
	#NID_SM2_wôh_SM3
 1204

	)

1218 
	#OBJ_SM2_wôh_SM3
 
OBJ_sm_scheme
,501L

	)

1220 
	#LN_hmacWôhSHA224
 "hmacWôhSHA224"

	)

1221 
	#NID_hmacWôhSHA224
 798

	)

1222 
	#OBJ_hmacWôhSHA224
 
OBJ_rßdsi
,2L,8L

	)

1224 
	#LN_hmacWôhSHA256
 "hmacWôhSHA256"

	)

1225 
	#NID_hmacWôhSHA256
 799

	)

1226 
	#OBJ_hmacWôhSHA256
 
OBJ_rßdsi
,2L,9L

	)

1228 
	#LN_hmacWôhSHA384
 "hmacWôhSHA384"

	)

1229 
	#NID_hmacWôhSHA384
 800

	)

1230 
	#OBJ_hmacWôhSHA384
 
OBJ_rßdsi
,2L,10L

	)

1232 
	#LN_hmacWôhSHA512
 "hmacWôhSHA512"

	)

1233 
	#NID_hmacWôhSHA512
 801

	)

1234 
	#OBJ_hmacWôhSHA512
 
OBJ_rßdsi
,2L,11L

	)

1236 
	#LN_hmacWôhSHA512_224
 "hmacWôhSHA512-224"

	)

1237 
	#NID_hmacWôhSHA512_224
 1193

	)

1238 
	#OBJ_hmacWôhSHA512_224
 
OBJ_rßdsi
,2L,12L

	)

1240 
	#LN_hmacWôhSHA512_256
 "hmacWôhSHA512-256"

	)

1241 
	#NID_hmacWôhSHA512_256
 1194

	)

1242 
	#OBJ_hmacWôhSHA512_256
 
OBJ_rßdsi
,2L,13L

	)

1244 
	#SN_rc2_cbc
 "RC2-CBC"

	)

1245 
	#LN_rc2_cbc
 "rc2-cbc"

	)

1246 
	#NID_rc2_cbc
 37

	)

1247 
	#OBJ_rc2_cbc
 
OBJ_rßdsi
,3L,2L

	)

1249 
	#SN_rc2_ecb
 "RC2-ECB"

	)

1250 
	#LN_rc2_ecb
 "rc2-ecb"

	)

1251 
	#NID_rc2_ecb
 38

	)

1253 
	#SN_rc2_cfb64
 "RC2-CFB"

	)

1254 
	#LN_rc2_cfb64
 "rc2-cfb"

	)

1255 
	#NID_rc2_cfb64
 39

	)

1257 
	#SN_rc2_ofb64
 "RC2-OFB"

	)

1258 
	#LN_rc2_ofb64
 "rc2-ofb"

	)

1259 
	#NID_rc2_ofb64
 40

	)

1261 
	#SN_rc2_40_cbc
 "RC2-40-CBC"

	)

1262 
	#LN_rc2_40_cbc
 "rc2-40-cbc"

	)

1263 
	#NID_rc2_40_cbc
 98

	)

1265 
	#SN_rc2_64_cbc
 "RC2-64-CBC"

	)

1266 
	#LN_rc2_64_cbc
 "rc2-64-cbc"

	)

1267 
	#NID_rc2_64_cbc
 166

	)

1269 
	#SN_rc4
 "RC4"

	)

1270 
	#LN_rc4
 "rc4"

	)

1271 
	#NID_rc4
 5

	)

1272 
	#OBJ_rc4
 
OBJ_rßdsi
,3L,4L

	)

1274 
	#SN_rc4_40
 "RC4-40"

	)

1275 
	#LN_rc4_40
 "rc4-40"

	)

1276 
	#NID_rc4_40
 97

	)

1278 
	#SN_des_ede3_cbc
 "DES-EDE3-CBC"

	)

1279 
	#LN_des_ede3_cbc
 "des-ede3-cbc"

	)

1280 
	#NID_des_ede3_cbc
 44

	)

1281 
	#OBJ_des_ede3_cbc
 
OBJ_rßdsi
,3L,7L

	)

1283 
	#SN_rc5_cbc
 "RC5-CBC"

	)

1284 
	#LN_rc5_cbc
 "rc5-cbc"

	)

1285 
	#NID_rc5_cbc
 120

	)

1286 
	#OBJ_rc5_cbc
 
OBJ_rßdsi
,3L,8L

	)

1288 
	#SN_rc5_ecb
 "RC5-ECB"

	)

1289 
	#LN_rc5_ecb
 "rc5-ecb"

	)

1290 
	#NID_rc5_ecb
 121

	)

1292 
	#SN_rc5_cfb64
 "RC5-CFB"

	)

1293 
	#LN_rc5_cfb64
 "rc5-cfb"

	)

1294 
	#NID_rc5_cfb64
 122

	)

1296 
	#SN_rc5_ofb64
 "RC5-OFB"

	)

1297 
	#LN_rc5_ofb64
 "rc5-ofb"

	)

1298 
	#NID_rc5_ofb64
 123

	)

1300 
	#SN_ms_ext_ªq
 "msExtReq"

	)

1301 
	#LN_ms_ext_ªq
 "Mi¸oso· Exãnsi⁄ Reque°"

	)

1302 
	#NID_ms_ext_ªq
 171

	)

1303 
	#OBJ_ms_ext_ªq
 1L,3L,6L,1L,4L,1L,311L,2L,1L,14L

	)

1305 
	#SN_ms_code_öd
 "msCodeInd"

	)

1306 
	#LN_ms_code_öd
 "Mi¸oso· IndividuÆ CodêSignög"

	)

1307 
	#NID_ms_code_öd
 134

	)

1308 
	#OBJ_ms_code_öd
 1L,3L,6L,1L,4L,1L,311L,2L,1L,21L

	)

1310 
	#SN_ms_code_com
 "msCodeCom"

	)

1311 
	#LN_ms_code_com
 "Mi¸oso· Commîcü»CodêSignög"

	)

1312 
	#NID_ms_code_com
 135

	)

1313 
	#OBJ_ms_code_com
 1L,3L,6L,1L,4L,1L,311L,2L,1L,22L

	)

1315 
	#SN_ms_˘l_sign
 "msCTLSign"

	)

1316 
	#LN_ms_˘l_sign
 "Mi¸oso· Tru° Li° Signög"

	)

1317 
	#NID_ms_˘l_sign
 136

	)

1318 
	#OBJ_ms_˘l_sign
 1L,3L,6L,1L,4L,1L,311L,10L,3L,1L

	)

1320 
	#SN_ms_sgc
 "msSGC"

	)

1321 
	#LN_ms_sgc
 "Mi¸oso· Sîvî G©ed Cry±o"

	)

1322 
	#NID_ms_sgc
 137

	)

1323 
	#OBJ_ms_sgc
 1L,3L,6L,1L,4L,1L,311L,10L,3L,3L

	)

1325 
	#SN_ms_efs
 "msEFS"

	)

1326 
	#LN_ms_efs
 "Mi¸oso· En¸y±ed FûêSy°em"

	)

1327 
	#NID_ms_efs
 138

	)

1328 
	#OBJ_ms_efs
 1L,3L,6L,1L,4L,1L,311L,10L,3L,4L

	)

1330 
	#SN_ms_sm¨tˇrd_logö
 "msSm¨tˇrdLogö"

	)

1331 
	#LN_ms_sm¨tˇrd_logö
 "Mi¸oso· Sm¨tˇrd Logö"

	)

1332 
	#NID_ms_sm¨tˇrd_logö
 648

	)

1333 
	#OBJ_ms_sm¨tˇrd_logö
 1L,3L,6L,1L,4L,1L,311L,20L,2L,2L

	)

1335 
	#SN_ms_u≤
 "msUPN"

	)

1336 
	#LN_ms_u≤
 "Mi¸oso· U£∏PröcùÆ Name"

	)

1337 
	#NID_ms_u≤
 649

	)

1338 
	#OBJ_ms_u≤
 1L,3L,6L,1L,4L,1L,311L,20L,2L,3L

	)

1340 
	#SN_idó_cbc
 "IDEA-CBC"

	)

1341 
	#LN_idó_cbc
 "idó-cbc"

	)

1342 
	#NID_idó_cbc
 34

	)

1343 
	#OBJ_idó_cbc
 1L,3L,6L,1L,4L,1L,188L,7L,1L,1L,2L

	)

1345 
	#SN_idó_ecb
 "IDEA-ECB"

	)

1346 
	#LN_idó_ecb
 "idó-ecb"

	)

1347 
	#NID_idó_ecb
 36

	)

1349 
	#SN_idó_cfb64
 "IDEA-CFB"

	)

1350 
	#LN_idó_cfb64
 "idó-cfb"

	)

1351 
	#NID_idó_cfb64
 35

	)

1353 
	#SN_idó_ofb64
 "IDEA-OFB"

	)

1354 
	#LN_idó_ofb64
 "idó-ofb"

	)

1355 
	#NID_idó_ofb64
 46

	)

1357 
	#SN_bf_cbc
 "BF-CBC"

	)

1358 
	#LN_bf_cbc
 "bf-cbc"

	)

1359 
	#NID_bf_cbc
 91

	)

1360 
	#OBJ_bf_cbc
 1L,3L,6L,1L,4L,1L,3029L,1L,2L

	)

1362 
	#SN_bf_ecb
 "BF-ECB"

	)

1363 
	#LN_bf_ecb
 "bf-ecb"

	)

1364 
	#NID_bf_ecb
 92

	)

1366 
	#SN_bf_cfb64
 "BF-CFB"

	)

1367 
	#LN_bf_cfb64
 "bf-cfb"

	)

1368 
	#NID_bf_cfb64
 93

	)

1370 
	#SN_bf_ofb64
 "BF-OFB"

	)

1371 
	#LN_bf_ofb64
 "bf-ofb"

	)

1372 
	#NID_bf_ofb64
 94

	)

1374 
	#SN_id_pkix
 "PKIX"

	)

1375 
	#NID_id_pkix
 127

	)

1376 
	#OBJ_id_pkix
 1L,3L,6L,1L,5L,5L,7L

	)

1378 
	#SN_id_pkix_mod
 "id-pkix-mod"

	)

1379 
	#NID_id_pkix_mod
 258

	)

1380 
	#OBJ_id_pkix_mod
 
OBJ_id_pkix
,0L

	)

1382 
	#SN_id_≥
 "id-≥"

	)

1383 
	#NID_id_≥
 175

	)

1384 
	#OBJ_id_≥
 
OBJ_id_pkix
,1L

	)

1386 
	#SN_id_qt
 "id-qt"

	)

1387 
	#NID_id_qt
 259

	)

1388 
	#OBJ_id_qt
 
OBJ_id_pkix
,2L

	)

1390 
	#SN_id_kp
 "id-kp"

	)

1391 
	#NID_id_kp
 128

	)

1392 
	#OBJ_id_kp
 
OBJ_id_pkix
,3L

	)

1394 
	#SN_id_ô
 "id-ô"

	)

1395 
	#NID_id_ô
 260

	)

1396 
	#OBJ_id_ô
 
OBJ_id_pkix
,4L

	)

1398 
	#SN_id_pkù
 "id-pkù"

	)

1399 
	#NID_id_pkù
 261

	)

1400 
	#OBJ_id_pkù
 
OBJ_id_pkix
,5L

	)

1402 
	#SN_id_Æg
 "id-Æg"

	)

1403 
	#NID_id_Æg
 262

	)

1404 
	#OBJ_id_Æg
 
OBJ_id_pkix
,6L

	)

1406 
	#SN_id_cmc
 "id-cmc"

	)

1407 
	#NID_id_cmc
 263

	)

1408 
	#OBJ_id_cmc
 
OBJ_id_pkix
,7L

	)

1410 
	#SN_id_⁄
 "id-⁄"

	)

1411 
	#NID_id_⁄
 264

	)

1412 
	#OBJ_id_⁄
 
OBJ_id_pkix
,8L

	)

1414 
	#SN_id_pda
 "id-pda"

	)

1415 
	#NID_id_pda
 265

	)

1416 
	#OBJ_id_pda
 
OBJ_id_pkix
,9L

	)

1418 
	#SN_id_aˇ
 "id-aˇ"

	)

1419 
	#NID_id_aˇ
 266

	)

1420 
	#OBJ_id_aˇ
 
OBJ_id_pkix
,10L

	)

1422 
	#SN_id_qcs
 "id-qcs"

	)

1423 
	#NID_id_qcs
 267

	)

1424 
	#OBJ_id_qcs
 
OBJ_id_pkix
,11L

	)

1426 
	#SN_id_˝
 "id-˝"

	)

1427 
	#NID_id_˝
 1238

	)

1428 
	#OBJ_id_˝
 
OBJ_id_pkix
,14L

	)

1430 
	#SN_id_c˘
 "id-c˘"

	)

1431 
	#NID_id_c˘
 268

	)

1432 
	#OBJ_id_c˘
 
OBJ_id_pkix
,12L

	)

1434 
	#SN_id_µl
 "id-µl"

	)

1435 
	#NID_id_µl
 662

	)

1436 
	#OBJ_id_µl
 
OBJ_id_pkix
,21L

	)

1438 
	#SN_id_ad
 "id-ad"

	)

1439 
	#NID_id_ad
 176

	)

1440 
	#OBJ_id_ad
 
OBJ_id_pkix
,48L

	)

1442 
	#SN_id_pkix1_ex∂icô_88
 "id-pkix1-ex∂icô-88"

	)

1443 
	#NID_id_pkix1_ex∂icô_88
 269

	)

1444 
	#OBJ_id_pkix1_ex∂icô_88
 
OBJ_id_pkix_mod
,1L

	)

1446 
	#SN_id_pkix1_im∂icô_88
 "id-pkix1-im∂icô-88"

	)

1447 
	#NID_id_pkix1_im∂icô_88
 270

	)

1448 
	#OBJ_id_pkix1_im∂icô_88
 
OBJ_id_pkix_mod
,2L

	)

1450 
	#SN_id_pkix1_ex∂icô_93
 "id-pkix1-ex∂icô-93"

	)

1451 
	#NID_id_pkix1_ex∂icô_93
 271

	)

1452 
	#OBJ_id_pkix1_ex∂icô_93
 
OBJ_id_pkix_mod
,3L

	)

1454 
	#SN_id_pkix1_im∂icô_93
 "id-pkix1-im∂icô-93"

	)

1455 
	#NID_id_pkix1_im∂icô_93
 272

	)

1456 
	#OBJ_id_pkix1_im∂icô_93
 
OBJ_id_pkix_mod
,4L

	)

1458 
	#SN_id_mod_¸mf
 "id-mod-¸mf"

	)

1459 
	#NID_id_mod_¸mf
 273

	)

1460 
	#OBJ_id_mod_¸mf
 
OBJ_id_pkix_mod
,5L

	)

1462 
	#SN_id_mod_cmc
 "id-mod-cmc"

	)

1463 
	#NID_id_mod_cmc
 274

	)

1464 
	#OBJ_id_mod_cmc
 
OBJ_id_pkix_mod
,6L

	)

1466 
	#SN_id_mod_kó_¥ofûe_88
 "id-mod-kó-¥ofûe-88"

	)

1467 
	#NID_id_mod_kó_¥ofûe_88
 275

	)

1468 
	#OBJ_id_mod_kó_¥ofûe_88
 
OBJ_id_pkix_mod
,7L

	)

1470 
	#SN_id_mod_kó_¥ofûe_93
 "id-mod-kó-¥ofûe-93"

	)

1471 
	#NID_id_mod_kó_¥ofûe_93
 276

	)

1472 
	#OBJ_id_mod_kó_¥ofûe_93
 
OBJ_id_pkix_mod
,8L

	)

1474 
	#SN_id_mod_cmp
 "id-mod-cmp"

	)

1475 
	#NID_id_mod_cmp
 277

	)

1476 
	#OBJ_id_mod_cmp
 
OBJ_id_pkix_mod
,9L

	)

1478 
	#SN_id_mod_quÆifõd_˚π_88
 "id-mod-quÆifõd-˚π-88"

	)

1479 
	#NID_id_mod_quÆifõd_˚π_88
 278

	)

1480 
	#OBJ_id_mod_quÆifõd_˚π_88
 
OBJ_id_pkix_mod
,10L

	)

1482 
	#SN_id_mod_quÆifõd_˚π_93
 "id-mod-quÆifõd-˚π-93"

	)

1483 
	#NID_id_mod_quÆifõd_˚π_93
 279

	)

1484 
	#OBJ_id_mod_quÆifõd_˚π_93
 
OBJ_id_pkix_mod
,11L

	)

1486 
	#SN_id_mod_©åibuã_˚π
 "id-mod-©åibuã-˚π"

	)

1487 
	#NID_id_mod_©åibuã_˚π
 280

	)

1488 
	#OBJ_id_mod_©åibuã_˚π
 
OBJ_id_pkix_mod
,12L

	)

1490 
	#SN_id_mod_time°amp_¥Ÿocﬁ
 "id-mod-time°amp-¥Ÿocﬁ"

	)

1491 
	#NID_id_mod_time°amp_¥Ÿocﬁ
 281

	)

1492 
	#OBJ_id_mod_time°amp_¥Ÿocﬁ
 
OBJ_id_pkix_mod
,13L

	)

1494 
	#SN_id_mod_oc•
 "id-mod-oc•"

	)

1495 
	#NID_id_mod_oc•
 282

	)

1496 
	#OBJ_id_mod_oc•
 
OBJ_id_pkix_mod
,14L

	)

1498 
	#SN_id_mod_dvcs
 "id-mod-dvcs"

	)

1499 
	#NID_id_mod_dvcs
 283

	)

1500 
	#OBJ_id_mod_dvcs
 
OBJ_id_pkix_mod
,15L

	)

1502 
	#SN_id_mod_cmp2000
 "id-mod-cmp2000"

	)

1503 
	#NID_id_mod_cmp2000
 284

	)

1504 
	#OBJ_id_mod_cmp2000
 
OBJ_id_pkix_mod
,16L

	)

1506 
	#SN_öfo_ac˚ss
 "auth‹ôyInfoAc˚ss"

	)

1507 
	#LN_öfo_ac˚ss
 "Auth‹ôy Inf‹m©i⁄ Ac˚ss"

	)

1508 
	#NID_öfo_ac˚ss
 177

	)

1509 
	#OBJ_öfo_ac˚ss
 
OBJ_id_≥
,1L

	)

1511 
	#SN_biomëricInfo
 "biomëricInfo"

	)

1512 
	#LN_biomëricInfo
 "Biomëri¯Info"

	)

1513 
	#NID_biomëricInfo
 285

	)

1514 
	#OBJ_biomëricInfo
 
OBJ_id_≥
,2L

	)

1516 
	#SN_qcSèãmíts
 "qcSèãmíts"

	)

1517 
	#NID_qcSèãmíts
 286

	)

1518 
	#OBJ_qcSèãmíts
 
OBJ_id_≥
,3L

	)

1520 
	#SN_ac_audôE¡ôy
 "ac-audôE¡ôy"

	)

1521 
	#NID_ac_audôE¡ôy
 287

	)

1522 
	#OBJ_ac_audôE¡ôy
 
OBJ_id_≥
,4L

	)

1524 
	#SN_ac_èrgëög
 "ac-èrgëög"

	)

1525 
	#NID_ac_èrgëög
 288

	)

1526 
	#OBJ_ac_èrgëög
 
OBJ_id_≥
,5L

	)

1528 
	#SN_ØC⁄åﬁs
 "ØC⁄åﬁs"

	)

1529 
	#NID_ØC⁄åﬁs
 289

	)

1530 
	#OBJ_ØC⁄åﬁs
 
OBJ_id_≥
,6L

	)

1532 
	#SN_sbgp_ùAddrBlock
 "sbgp-ùAddrBlock"

	)

1533 
	#NID_sbgp_ùAddrBlock
 290

	)

1534 
	#OBJ_sbgp_ùAddrBlock
 
OBJ_id_≥
,7L

	)

1536 
	#SN_sbgp_aut⁄omousSysNum
 "sbgp-aut⁄omousSysNum"

	)

1537 
	#NID_sbgp_aut⁄omousSysNum
 291

	)

1538 
	#OBJ_sbgp_aut⁄omousSysNum
 
OBJ_id_≥
,8L

	)

1540 
	#SN_sbgp_rouãrIdítifõr
 "sbgp-rouãrIdítifõr"

	)

1541 
	#NID_sbgp_rouãrIdítifõr
 292

	)

1542 
	#OBJ_sbgp_rouãrIdítifõr
 
OBJ_id_≥
,9L

	)

1544 
	#SN_ac_¥oxyög
 "ac-¥oxyög"

	)

1545 
	#NID_ac_¥oxyög
 397

	)

1546 
	#OBJ_ac_¥oxyög
 
OBJ_id_≥
,10L

	)

1548 
	#SN_söfo_ac˚ss
 "subje˘InfoAc˚ss"

	)

1549 
	#LN_söfo_ac˚ss
 "Subje˘ Inf‹m©i⁄ Ac˚ss"

	)

1550 
	#NID_söfo_ac˚ss
 398

	)

1551 
	#OBJ_söfo_ac˚ss
 
OBJ_id_≥
,11L

	)

1553 
	#SN_¥oxyCîtInfo
 "¥oxyCîtInfo"

	)

1554 
	#LN_¥oxyCîtInfo
 "Proxy Cîtifiˇã Inf‹m©i⁄"

	)

1555 
	#NID_¥oxyCîtInfo
 663

	)

1556 
	#OBJ_¥oxyCîtInfo
 
OBJ_id_≥
,14L

	)

1558 
	#SN_és„©uª
 "és„©uª"

	)

1559 
	#LN_és„©uª
 "TLS Fótuª"

	)

1560 
	#NID_és„©uª
 1020

	)

1561 
	#OBJ_és„©uª
 
OBJ_id_≥
,24L

	)

1563 
	#SN_sbgp_ùAddrBlockv2
 "sbgp-ùAddrBlockv2"

	)

1564 
	#NID_sbgp_ùAddrBlockv2
 1239

	)

1565 
	#OBJ_sbgp_ùAddrBlockv2
 
OBJ_id_≥
,28L

	)

1567 
	#SN_sbgp_aut⁄omousSysNumv2
 "sbgp-aut⁄omousSysNumv2"

	)

1568 
	#NID_sbgp_aut⁄omousSysNumv2
 1240

	)

1569 
	#OBJ_sbgp_aut⁄omousSysNumv2
 
OBJ_id_≥
,29L

	)

1571 
	#SN_id_qt_˝s
 "id-qt-˝s"

	)

1572 
	#LN_id_qt_˝s
 "Pﬁicy QuÆifõ∏CPS"

	)

1573 
	#NID_id_qt_˝s
 164

	)

1574 
	#OBJ_id_qt_˝s
 
OBJ_id_qt
,1L

	)

1576 
	#SN_id_qt_unŸi˚
 "id-qt-unŸi˚"

	)

1577 
	#LN_id_qt_unŸi˚
 "Pﬁicy QuÆifõ∏U£∏NŸi˚"

	)

1578 
	#NID_id_qt_unŸi˚
 165

	)

1579 
	#OBJ_id_qt_unŸi˚
 
OBJ_id_qt
,2L

	)

1581 
	#SN_ãxtNŸi˚
 "ãxtNŸi˚"

	)

1582 
	#NID_ãxtNŸi˚
 293

	)

1583 
	#OBJ_ãxtNŸi˚
 
OBJ_id_qt
,3L

	)

1585 
	#SN_£rvî_auth
 "£rvîAuth"

	)

1586 
	#LN_£rvî_auth
 "TLS Web Sîvî Authítiˇti⁄"

	)

1587 
	#NID_£rvî_auth
 129

	)

1588 
	#OBJ_£rvî_auth
 
OBJ_id_kp
,1L

	)

1590 
	#SN_˛õ¡_auth
 "˛õ¡Auth"

	)

1591 
	#LN_˛õ¡_auth
 "TLS Web Clõ¡ Authítiˇti⁄"

	)

1592 
	#NID_˛õ¡_auth
 130

	)

1593 
	#OBJ_˛õ¡_auth
 
OBJ_id_kp
,2L

	)

1595 
	#SN_code_sign
 "codeSignög"

	)

1596 
	#LN_code_sign
 "CodêSignög"

	)

1597 
	#NID_code_sign
 131

	)

1598 
	#OBJ_code_sign
 
OBJ_id_kp
,3L

	)

1600 
	#SN_emaû_¥Ÿe˘
 "emaûPrŸe˘i⁄"

	)

1601 
	#LN_emaû_¥Ÿe˘
 "E-maû PrŸe˘i⁄"

	)

1602 
	#NID_emaû_¥Ÿe˘
 132

	)

1603 
	#OBJ_emaû_¥Ÿe˘
 
OBJ_id_kp
,4L

	)

1605 
	#SN_ù£cEndSy°em
 "ù£cEndSy°em"

	)

1606 
	#LN_ù£cEndSy°em
 "IPSe¯End Sy°em"

	)

1607 
	#NID_ù£cEndSy°em
 294

	)

1608 
	#OBJ_ù£cEndSy°em
 
OBJ_id_kp
,5L

	)

1610 
	#SN_ù£cTu¬ñ
 "ù£cTu¬ñ"

	)

1611 
	#LN_ù£cTu¬ñ
 "IPSe¯Tu¬ñ"

	)

1612 
	#NID_ù£cTu¬ñ
 295

	)

1613 
	#OBJ_ù£cTu¬ñ
 
OBJ_id_kp
,6L

	)

1615 
	#SN_ù£cU£r
 "ù£cU£r"

	)

1616 
	#LN_ù£cU£r
 "IPSe¯U£r"

	)

1617 
	#NID_ù£cU£r
 296

	)

1618 
	#OBJ_ù£cU£r
 
OBJ_id_kp
,7L

	)

1620 
	#SN_time_°amp
 "timeSèmpög"

	)

1621 
	#LN_time_°amp
 "TimêSèmpög"

	)

1622 
	#NID_time_°amp
 133

	)

1623 
	#OBJ_time_°amp
 
OBJ_id_kp
,8L

	)

1625 
	#SN_OCSP_sign
 "OCSPSignög"

	)

1626 
	#LN_OCSP_sign
 "OCSP Signög"

	)

1627 
	#NID_OCSP_sign
 180

	)

1628 
	#OBJ_OCSP_sign
 
OBJ_id_kp
,9L

	)

1630 
	#SN_dvcs
 "DVCS"

	)

1631 
	#LN_dvcs
 "dvcs"

	)

1632 
	#NID_dvcs
 297

	)

1633 
	#OBJ_dvcs
 
OBJ_id_kp
,10L

	)

1635 
	#SN_ù£c_IKE
 "ù£cIKE"

	)

1636 
	#LN_ù£c_IKE
 "ù£¯I¡î√àKey Exch™ge"

	)

1637 
	#NID_ù£c_IKE
 1022

	)

1638 
	#OBJ_ù£c_IKE
 
OBJ_id_kp
,17L

	)

1640 
	#SN_ˇpw≠AC
 "ˇpw≠AC"

	)

1641 
	#LN_ˇpw≠AC
 "Cål/¥ovisi⁄ WAP Ac˚ss"

	)

1642 
	#NID_ˇpw≠AC
 1023

	)

1643 
	#OBJ_ˇpw≠AC
 
OBJ_id_kp
,18L

	)

1645 
	#SN_ˇpw≠WTP
 "ˇpw≠WTP"

	)

1646 
	#LN_ˇpw≠WTP
 "Cål/Provisi⁄ WAP Tîmö©i⁄"

	)

1647 
	#NID_ˇpw≠WTP
 1024

	)

1648 
	#OBJ_ˇpw≠WTP
 
OBJ_id_kp
,19L

	)

1650 
	#SN_sshClõ¡
 "£cuªShñlClõ¡"

	)

1651 
	#LN_sshClõ¡
 "SSH Clõ¡"

	)

1652 
	#NID_sshClõ¡
 1025

	)

1653 
	#OBJ_sshClõ¡
 
OBJ_id_kp
,21L

	)

1655 
	#SN_sshSîvî
 "£cuªShñlSîvî"

	)

1656 
	#LN_sshSîvî
 "SSH Sîvî"

	)

1657 
	#NID_sshSîvî
 1026

	)

1658 
	#OBJ_sshSîvî
 
OBJ_id_kp
,22L

	)

1660 
	#SN_£ndRouãr
 "£ndRouãr"

	)

1661 
	#LN_£ndRouãr
 "Síd Rouãr"

	)

1662 
	#NID_£ndRouãr
 1027

	)

1663 
	#OBJ_£ndRouãr
 
OBJ_id_kp
,23L

	)

1665 
	#SN_£ndProxõdRouãr
 "£ndProxõdRouãr"

	)

1666 
	#LN_£ndProxõdRouãr
 "Síd Proxõd Rouãr"

	)

1667 
	#NID_£ndProxõdRouãr
 1028

	)

1668 
	#OBJ_£ndProxõdRouãr
 
OBJ_id_kp
,24L

	)

1670 
	#SN_£ndOw√r
 "£ndOw√r"

	)

1671 
	#LN_£ndOw√r
 "Síd Ow√r"

	)

1672 
	#NID_£ndOw√r
 1029

	)

1673 
	#OBJ_£ndOw√r
 
OBJ_id_kp
,25L

	)

1675 
	#SN_£ndProxõdOw√r
 "£ndProxõdOw√r"

	)

1676 
	#LN_£ndProxõdOw√r
 "Síd Proxõd Ow√r"

	)

1677 
	#NID_£ndProxõdOw√r
 1030

	)

1678 
	#OBJ_£ndProxõdOw√r
 
OBJ_id_kp
,26L

	)

1680 
	#SN_cmcCA
 "cmcCA"

	)

1681 
	#LN_cmcCA
 "CMC Cîtifiˇã Auth‹ôy"

	)

1682 
	#NID_cmcCA
 1131

	)

1683 
	#OBJ_cmcCA
 
OBJ_id_kp
,27L

	)

1685 
	#SN_cmcRA
 "cmcRA"

	)

1686 
	#LN_cmcRA
 "CMC Regi°øti⁄ Auth‹ôy"

	)

1687 
	#NID_cmcRA
 1132

	)

1688 
	#OBJ_cmcRA
 
OBJ_id_kp
,28L

	)

1690 
	#SN_cmcArchive
 "cmcArchive"

	)

1691 
	#LN_cmcArchive
 "CMC ArchivêSîvî"

	)

1692 
	#NID_cmcArchive
 1219

	)

1693 
	#OBJ_cmcArchive
 
OBJ_id_kp
,29L

	)

1695 
	#SN_id_kp_bgp£c_rouãr
 "id-kp-bgp£c-rouãr"

	)

1696 
	#LN_id_kp_bgp£c_rouãr
 "BGP£¯Rouãr"

	)

1697 
	#NID_id_kp_bgp£c_rouãr
 1220

	)

1698 
	#OBJ_id_kp_bgp£c_rouãr
 
OBJ_id_kp
,30L

	)

1700 
	#SN_id_kp_BøndIndiˇt‹f‹MesßgeIdítifiˇti⁄
 "id-kp-BøndIndiˇt‹f‹MesßgeIdítifiˇti⁄"

	)

1701 
	#LN_id_kp_BøndIndiˇt‹f‹MesßgeIdítifiˇti⁄
 "Bønd Indiˇt‹ f‹ MesßgêIdítifiˇti⁄"

	)

1702 
	#NID_id_kp_BøndIndiˇt‹f‹MesßgeIdítifiˇti⁄
 1221

	)

1703 
	#OBJ_id_kp_BøndIndiˇt‹f‹MesßgeIdítifiˇti⁄
 
OBJ_id_kp
,31L

	)

1705 
	#SN_cmKGA
 "cmKGA"

	)

1706 
	#LN_cmKGA
 "Cîtifiˇã M™agemíàKey Gíî©i⁄ Auth‹ôy"

	)

1707 
	#NID_cmKGA
 1222

	)

1708 
	#OBJ_cmKGA
 
OBJ_id_kp
,32L

	)

1710 
	#SN_id_ô_ˇPrŸEncCît
 "id-ô-ˇPrŸEncCît"

	)

1711 
	#NID_id_ô_ˇPrŸEncCît
 298

	)

1712 
	#OBJ_id_ô_ˇPrŸEncCît
 
OBJ_id_ô
,1L

	)

1714 
	#SN_id_ô_signKeyPaúTy≥s
 "id-ô-signKeyPaúTy≥s"

	)

1715 
	#NID_id_ô_signKeyPaúTy≥s
 299

	)

1716 
	#OBJ_id_ô_signKeyPaúTy≥s
 
OBJ_id_ô
,2L

	)

1718 
	#SN_id_ô_ícKeyPaúTy≥s
 "id-ô-ícKeyPaúTy≥s"

	)

1719 
	#NID_id_ô_ícKeyPaúTy≥s
 300

	)

1720 
	#OBJ_id_ô_ícKeyPaúTy≥s
 
OBJ_id_ô
,3L

	)

1722 
	#SN_id_ô_¥e„ºedSymmAlg
 "id-ô-¥e„ºedSymmAlg"

	)

1723 
	#NID_id_ô_¥e„ºedSymmAlg
 301

	)

1724 
	#OBJ_id_ô_¥e„ºedSymmAlg
 
OBJ_id_ô
,4L

	)

1726 
	#SN_id_ô_ˇKeyUpd©eInfo
 "id-ô-ˇKeyUpd©eInfo"

	)

1727 
	#NID_id_ô_ˇKeyUpd©eInfo
 302

	)

1728 
	#OBJ_id_ô_ˇKeyUpd©eInfo
 
OBJ_id_ô
,5L

	)

1730 
	#SN_id_ô_cuºítCRL
 "id-ô-cuºítCRL"

	)

1731 
	#NID_id_ô_cuºítCRL
 303

	)

1732 
	#OBJ_id_ô_cuºítCRL
 
OBJ_id_ô
,6L

	)

1734 
	#SN_id_ô_unsuµ‹ãdOIDs
 "id-ô-unsuµ‹ãdOIDs"

	)

1735 
	#NID_id_ô_unsuµ‹ãdOIDs
 304

	)

1736 
	#OBJ_id_ô_unsuµ‹ãdOIDs
 
OBJ_id_ô
,7L

	)

1738 
	#SN_id_ô_subs¸ùti⁄Reque°
 "id-ô-subs¸ùti⁄Reque°"

	)

1739 
	#NID_id_ô_subs¸ùti⁄Reque°
 305

	)

1740 
	#OBJ_id_ô_subs¸ùti⁄Reque°
 
OBJ_id_ô
,8L

	)

1742 
	#SN_id_ô_subs¸ùti⁄Re•⁄£
 "id-ô-subs¸ùti⁄Re•⁄£"

	)

1743 
	#NID_id_ô_subs¸ùti⁄Re•⁄£
 306

	)

1744 
	#OBJ_id_ô_subs¸ùti⁄Re•⁄£
 
OBJ_id_ô
,9L

	)

1746 
	#SN_id_ô_keyPaúP¨amReq
 "id-ô-keyPaúP¨amReq"

	)

1747 
	#NID_id_ô_keyPaúP¨amReq
 307

	)

1748 
	#OBJ_id_ô_keyPaúP¨amReq
 
OBJ_id_ô
,10L

	)

1750 
	#SN_id_ô_keyPaúP¨amRï
 "id-ô-keyPaúP¨amRï"

	)

1751 
	#NID_id_ô_keyPaúP¨amRï
 308

	)

1752 
	#OBJ_id_ô_keyPaúP¨amRï
 
OBJ_id_ô
,11L

	)

1754 
	#SN_id_ô_ªvPas•hø£
 "id-ô-ªvPas•hø£"

	)

1755 
	#NID_id_ô_ªvPas•hø£
 309

	)

1756 
	#OBJ_id_ô_ªvPas•hø£
 
OBJ_id_ô
,12L

	)

1758 
	#SN_id_ô_im∂icôC⁄fúm
 "id-ô-im∂icôC⁄fúm"

	)

1759 
	#NID_id_ô_im∂icôC⁄fúm
 310

	)

1760 
	#OBJ_id_ô_im∂icôC⁄fúm
 
OBJ_id_ô
,13L

	)

1762 
	#SN_id_ô_c⁄fúmWaôTime
 "id-ô-c⁄fúmWaôTime"

	)

1763 
	#NID_id_ô_c⁄fúmWaôTime
 311

	)

1764 
	#OBJ_id_ô_c⁄fúmWaôTime
 
OBJ_id_ô
,14L

	)

1766 
	#SN_id_ô_‹igPKIMesßge
 "id-ô-‹igPKIMesßge"

	)

1767 
	#NID_id_ô_‹igPKIMesßge
 312

	)

1768 
	#OBJ_id_ô_‹igPKIMesßge
 
OBJ_id_ô
,15L

	)

1770 
	#SN_id_ô_suµL™gTags
 "id-ô-suµL™gTags"

	)

1771 
	#NID_id_ô_suµL™gTags
 784

	)

1772 
	#OBJ_id_ô_suµL™gTags
 
OBJ_id_ô
,16L

	)

1774 
	#SN_id_ô_ˇCîts
 "id-ô-ˇCîts"

	)

1775 
	#NID_id_ô_ˇCîts
 1223

	)

1776 
	#OBJ_id_ô_ˇCîts
 
OBJ_id_ô
,17L

	)

1778 
	#SN_id_ô_roŸCaKeyUpd©e
 "id-ô-roŸCaKeyUpd©e"

	)

1779 
	#NID_id_ô_roŸCaKeyUpd©e
 1224

	)

1780 
	#OBJ_id_ô_roŸCaKeyUpd©e
 
OBJ_id_ô
,18L

	)

1782 
	#SN_id_ô_˚πReqTem∂©e
 "id-ô-˚πReqTem∂©e"

	)

1783 
	#NID_id_ô_˚πReqTem∂©e
 1225

	)

1784 
	#OBJ_id_ô_˚πReqTem∂©e
 
OBJ_id_ô
,19L

	)

1786 
	#SN_id_ªgCål
 "id-ªgCål"

	)

1787 
	#NID_id_ªgCål
 313

	)

1788 
	#OBJ_id_ªgCål
 
OBJ_id_pkù
,1L

	)

1790 
	#SN_id_ªgInfo
 "id-ªgInfo"

	)

1791 
	#NID_id_ªgInfo
 314

	)

1792 
	#OBJ_id_ªgInfo
 
OBJ_id_pkù
,2L

	)

1794 
	#SN_id_ªgCål_ªgTokí
 "id-ªgCål-ªgTokí"

	)

1795 
	#NID_id_ªgCål_ªgTokí
 315

	)

1796 
	#OBJ_id_ªgCål_ªgTokí
 
OBJ_id_ªgCål
,1L

	)

1798 
	#SN_id_ªgCål_authítiˇt‹
 "id-ªgCål-authítiˇt‹"

	)

1799 
	#NID_id_ªgCål_authítiˇt‹
 316

	)

1800 
	#OBJ_id_ªgCål_authítiˇt‹
 
OBJ_id_ªgCål
,2L

	)

1802 
	#SN_id_ªgCål_pkiPubliˇti⁄Info
 "id-ªgCål-pkiPubliˇti⁄Info"

	)

1803 
	#NID_id_ªgCål_pkiPubliˇti⁄Info
 317

	)

1804 
	#OBJ_id_ªgCål_pkiPubliˇti⁄Info
 
OBJ_id_ªgCål
,3L

	)

1806 
	#SN_id_ªgCål_pkiArchiveO±i⁄s
 "id-ªgCål-pkiArchiveO±i⁄s"

	)

1807 
	#NID_id_ªgCål_pkiArchiveO±i⁄s
 318

	)

1808 
	#OBJ_id_ªgCål_pkiArchiveO±i⁄s
 
OBJ_id_ªgCål
,4L

	)

1810 
	#SN_id_ªgCål_ﬁdCîtID
 "id-ªgCål-ﬁdCîtID"

	)

1811 
	#NID_id_ªgCål_ﬁdCîtID
 319

	)

1812 
	#OBJ_id_ªgCål_ﬁdCîtID
 
OBJ_id_ªgCål
,5L

	)

1814 
	#SN_id_ªgCål_¥ŸocﬁEn¸Key
 "id-ªgCål-¥ŸocﬁEn¸Key"

	)

1815 
	#NID_id_ªgCål_¥ŸocﬁEn¸Key
 320

	)

1816 
	#OBJ_id_ªgCål_¥ŸocﬁEn¸Key
 
OBJ_id_ªgCål
,6L

	)

1818 
	#SN_id_ªgInfo_utf8Paús
 "id-ªgInfo-utf8Paús"

	)

1819 
	#NID_id_ªgInfo_utf8Paús
 321

	)

1820 
	#OBJ_id_ªgInfo_utf8Paús
 
OBJ_id_ªgInfo
,1L

	)

1822 
	#SN_id_ªgInfo_˚πReq
 "id-ªgInfo-˚πReq"

	)

1823 
	#NID_id_ªgInfo_˚πReq
 322

	)

1824 
	#OBJ_id_ªgInfo_˚πReq
 
OBJ_id_ªgInfo
,2L

	)

1826 
	#SN_id_Æg_des40
 "id-Æg-des40"

	)

1827 
	#NID_id_Æg_des40
 323

	)

1828 
	#OBJ_id_Æg_des40
 
OBJ_id_Æg
,1L

	)

1830 
	#SN_id_Æg_noSig«tuª
 "id-Æg-noSig«tuª"

	)

1831 
	#NID_id_Æg_noSig«tuª
 324

	)

1832 
	#OBJ_id_Æg_noSig«tuª
 
OBJ_id_Æg
,2L

	)

1834 
	#SN_id_Æg_dh_sig_hmac_sha1
 "id-Æg-dh-sig-hmac-sha1"

	)

1835 
	#NID_id_Æg_dh_sig_hmac_sha1
 325

	)

1836 
	#OBJ_id_Æg_dh_sig_hmac_sha1
 
OBJ_id_Æg
,3L

	)

1838 
	#SN_id_Æg_dh_p›
 "id-Æg-dh-p›"

	)

1839 
	#NID_id_Æg_dh_p›
 326

	)

1840 
	#OBJ_id_Æg_dh_p›
 
OBJ_id_Æg
,4L

	)

1842 
	#SN_id_cmc_°©usInfo
 "id-cmc-°©usInfo"

	)

1843 
	#NID_id_cmc_°©usInfo
 327

	)

1844 
	#OBJ_id_cmc_°©usInfo
 
OBJ_id_cmc
,1L

	)

1846 
	#SN_id_cmc_idítifiˇti⁄
 "id-cmc-idítifiˇti⁄"

	)

1847 
	#NID_id_cmc_idítifiˇti⁄
 328

	)

1848 
	#OBJ_id_cmc_idítifiˇti⁄
 
OBJ_id_cmc
,2L

	)

1850 
	#SN_id_cmc_idítôyProof
 "id-cmc-idítôyProof"

	)

1851 
	#NID_id_cmc_idítôyProof
 329

	)

1852 
	#OBJ_id_cmc_idítôyProof
 
OBJ_id_cmc
,3L

	)

1854 
	#SN_id_cmc_d©aRëu∫
 "id-cmc-d©aRëu∫"

	)

1855 
	#NID_id_cmc_d©aRëu∫
 330

	)

1856 
	#OBJ_id_cmc_d©aRëu∫
 
OBJ_id_cmc
,4L

	)

1858 
	#SN_id_cmc_å™ß˘i⁄Id
 "id-cmc-å™ß˘i⁄Id"

	)

1859 
	#NID_id_cmc_å™ß˘i⁄Id
 331

	)

1860 
	#OBJ_id_cmc_å™ß˘i⁄Id
 
OBJ_id_cmc
,5L

	)

1862 
	#SN_id_cmc_£ndîN⁄˚
 "id-cmc-£ndîN⁄˚"

	)

1863 
	#NID_id_cmc_£ndîN⁄˚
 332

	)

1864 
	#OBJ_id_cmc_£ndîN⁄˚
 
OBJ_id_cmc
,6L

	)

1866 
	#SN_id_cmc_ªcùõ¡N⁄˚
 "id-cmc-ªcùõ¡N⁄˚"

	)

1867 
	#NID_id_cmc_ªcùõ¡N⁄˚
 333

	)

1868 
	#OBJ_id_cmc_ªcùõ¡N⁄˚
 
OBJ_id_cmc
,7L

	)

1870 
	#SN_id_cmc_addExãnsi⁄s
 "id-cmc-addExãnsi⁄s"

	)

1871 
	#NID_id_cmc_addExãnsi⁄s
 334

	)

1872 
	#OBJ_id_cmc_addExãnsi⁄s
 
OBJ_id_cmc
,8L

	)

1874 
	#SN_id_cmc_í¸y±edPOP
 "id-cmc-í¸y±edPOP"

	)

1875 
	#NID_id_cmc_í¸y±edPOP
 335

	)

1876 
	#OBJ_id_cmc_í¸y±edPOP
 
OBJ_id_cmc
,9L

	)

1878 
	#SN_id_cmc_de¸y±edPOP
 "id-cmc-de¸y±edPOP"

	)

1879 
	#NID_id_cmc_de¸y±edPOP
 336

	)

1880 
	#OBJ_id_cmc_de¸y±edPOP
 
OBJ_id_cmc
,10L

	)

1882 
	#SN_id_cmc_ÃaPOPWô√ss
 "id-cmc-ÃaPOPWô√ss"

	)

1883 
	#NID_id_cmc_ÃaPOPWô√ss
 337

	)

1884 
	#OBJ_id_cmc_ÃaPOPWô√ss
 
OBJ_id_cmc
,11L

	)

1886 
	#SN_id_cmc_gëCît
 "id-cmc-gëCît"

	)

1887 
	#NID_id_cmc_gëCît
 338

	)

1888 
	#OBJ_id_cmc_gëCît
 
OBJ_id_cmc
,15L

	)

1890 
	#SN_id_cmc_gëCRL
 "id-cmc-gëCRL"

	)

1891 
	#NID_id_cmc_gëCRL
 339

	)

1892 
	#OBJ_id_cmc_gëCRL
 
OBJ_id_cmc
,16L

	)

1894 
	#SN_id_cmc_ªvokeReque°
 "id-cmc-ªvokeReque°"

	)

1895 
	#NID_id_cmc_ªvokeReque°
 340

	)

1896 
	#OBJ_id_cmc_ªvokeReque°
 
OBJ_id_cmc
,17L

	)

1898 
	#SN_id_cmc_ªgInfo
 "id-cmc-ªgInfo"

	)

1899 
	#NID_id_cmc_ªgInfo
 341

	)

1900 
	#OBJ_id_cmc_ªgInfo
 
OBJ_id_cmc
,18L

	)

1902 
	#SN_id_cmc_ª•⁄£Info
 "id-cmc-ª•⁄£Info"

	)

1903 
	#NID_id_cmc_ª•⁄£Info
 342

	)

1904 
	#OBJ_id_cmc_ª•⁄£Info
 
OBJ_id_cmc
,19L

	)

1906 
	#SN_id_cmc_quîyPídög
 "id-cmc-quîyPídög"

	)

1907 
	#NID_id_cmc_quîyPídög
 343

	)

1908 
	#OBJ_id_cmc_quîyPídög
 
OBJ_id_cmc
,21L

	)

1910 
	#SN_id_cmc_p›LökR™dom
 "id-cmc-p›LökR™dom"

	)

1911 
	#NID_id_cmc_p›LökR™dom
 344

	)

1912 
	#OBJ_id_cmc_p›LökR™dom
 
OBJ_id_cmc
,22L

	)

1914 
	#SN_id_cmc_p›LökWô√ss
 "id-cmc-p›LökWô√ss"

	)

1915 
	#NID_id_cmc_p›LökWô√ss
 345

	)

1916 
	#OBJ_id_cmc_p›LökWô√ss
 
OBJ_id_cmc
,23L

	)

1918 
	#SN_id_cmc_c⁄fúmCîtAc˚±™˚
 "id-cmc-c⁄fúmCîtAc˚±™˚"

	)

1919 
	#NID_id_cmc_c⁄fúmCîtAc˚±™˚
 346

	)

1920 
	#OBJ_id_cmc_c⁄fúmCîtAc˚±™˚
 
OBJ_id_cmc
,24L

	)

1922 
	#SN_id_⁄_≥rs⁄ÆD©a
 "id-⁄-≥rs⁄ÆD©a"

	)

1923 
	#NID_id_⁄_≥rs⁄ÆD©a
 347

	)

1924 
	#OBJ_id_⁄_≥rs⁄ÆD©a
 
OBJ_id_⁄
,1L

	)

1926 
	#SN_id_⁄_≥rm™ítIdítifõr
 "id-⁄-≥rm™ítIdítifõr"

	)

1927 
	#LN_id_⁄_≥rm™ítIdítifõr
 "Pîm™íàIdítifõr"

	)

1928 
	#NID_id_⁄_≥rm™ítIdítifõr
 858

	)

1929 
	#OBJ_id_⁄_≥rm™ítIdítifõr
 
OBJ_id_⁄
,3L

	)

1931 
	#SN_XmµAddr
 "id-⁄-xmµAddr"

	)

1932 
	#LN_XmµAddr
 "XmµAddr"

	)

1933 
	#NID_XmµAddr
 1209

	)

1934 
	#OBJ_XmµAddr
 
OBJ_id_⁄
,5L

	)

1936 
	#SN_SRVName
 "id-⁄-dnsSRV"

	)

1937 
	#LN_SRVName
 "SRVName"

	)

1938 
	#NID_SRVName
 1210

	)

1939 
	#OBJ_SRVName
 
OBJ_id_⁄
,7L

	)

1941 
	#SN_NAIRólm
 "id-⁄-NAIRólm"

	)

1942 
	#LN_NAIRólm
 "NAIRólm"

	)

1943 
	#NID_NAIRólm
 1211

	)

1944 
	#OBJ_NAIRólm
 
OBJ_id_⁄
,8L

	)

1946 
	#SN_id_⁄_SmçUTF8Maûbox
 "id-⁄-SmçUTF8Maûbox"

	)

1947 
	#LN_id_⁄_SmçUTF8Maûbox
 "Smç UTF8 Maûbox"

	)

1948 
	#NID_id_⁄_SmçUTF8Maûbox
 1208

	)

1949 
	#OBJ_id_⁄_SmçUTF8Maûbox
 
OBJ_id_⁄
,9L

	)

1951 
	#SN_id_pda_d©eOfBúth
 "id-pda-d©eOfBúth"

	)

1952 
	#NID_id_pda_d©eOfBúth
 348

	)

1953 
	#OBJ_id_pda_d©eOfBúth
 
OBJ_id_pda
,1L

	)

1955 
	#SN_id_pda_∂a˚OfBúth
 "id-pda-∂a˚OfBúth"

	)

1956 
	#NID_id_pda_∂a˚OfBúth
 349

	)

1957 
	#OBJ_id_pda_∂a˚OfBúth
 
OBJ_id_pda
,2L

	)

1959 
	#SN_id_pda_gídî
 "id-pda-gídî"

	)

1960 
	#NID_id_pda_gídî
 351

	)

1961 
	#OBJ_id_pda_gídî
 
OBJ_id_pda
,3L

	)

1963 
	#SN_id_pda_cou¡ryOfCôizíshù
 "id-pda-cou¡ryOfCôizíshù"

	)

1964 
	#NID_id_pda_cou¡ryOfCôizíshù
 352

	)

1965 
	#OBJ_id_pda_cou¡ryOfCôizíshù
 
OBJ_id_pda
,4L

	)

1967 
	#SN_id_pda_cou¡ryOfResidí˚
 "id-pda-cou¡ryOfResidí˚"

	)

1968 
	#NID_id_pda_cou¡ryOfResidí˚
 353

	)

1969 
	#OBJ_id_pda_cou¡ryOfResidí˚
 
OBJ_id_pda
,5L

	)

1971 
	#SN_id_aˇ_authítiˇti⁄Info
 "id-aˇ-authítiˇti⁄Info"

	)

1972 
	#NID_id_aˇ_authítiˇti⁄Info
 354

	)

1973 
	#OBJ_id_aˇ_authítiˇti⁄Info
 
OBJ_id_aˇ
,1L

	)

1975 
	#SN_id_aˇ_ac˚ssIdítôy
 "id-aˇ-ac˚ssIdítôy"

	)

1976 
	#NID_id_aˇ_ac˚ssIdítôy
 355

	)

1977 
	#OBJ_id_aˇ_ac˚ssIdítôy
 
OBJ_id_aˇ
,2L

	)

1979 
	#SN_id_aˇ_ch¨gögIdítôy
 "id-aˇ-ch¨gögIdítôy"

	)

1980 
	#NID_id_aˇ_ch¨gögIdítôy
 356

	)

1981 
	#OBJ_id_aˇ_ch¨gögIdítôy
 
OBJ_id_aˇ
,3L

	)

1983 
	#SN_id_aˇ_group
 "id-aˇ-group"

	)

1984 
	#NID_id_aˇ_group
 357

	)

1985 
	#OBJ_id_aˇ_group
 
OBJ_id_aˇ
,4L

	)

1987 
	#SN_id_aˇ_rﬁe
 "id-aˇ-rﬁe"

	)

1988 
	#NID_id_aˇ_rﬁe
 358

	)

1989 
	#OBJ_id_aˇ_rﬁe
 
OBJ_id_aˇ
,5L

	)

1991 
	#SN_id_aˇ_ícAârs
 "id-aˇ-ícAârs"

	)

1992 
	#NID_id_aˇ_ícAârs
 399

	)

1993 
	#OBJ_id_aˇ_ícAârs
 
OBJ_id_aˇ
,6L

	)

1995 
	#SN_id_qcs_pkixQCSy¡ax_v1
 "id-qcs-pkixQCSy¡ax-v1"

	)

1996 
	#NID_id_qcs_pkixQCSy¡ax_v1
 359

	)

1997 
	#OBJ_id_qcs_pkixQCSy¡ax_v1
 
OBJ_id_qcs
,1L

	)

1999 
	#SN_ùAddr_asNumbî
 "ùAddr-asNumbî"

	)

2000 
	#NID_ùAddr_asNumbî
 1241

	)

2001 
	#OBJ_ùAddr_asNumbî
 
OBJ_id_˝
,2L

	)

2003 
	#SN_ùAddr_asNumbîv2
 "ùAddr-asNumbîv2"

	)

2004 
	#NID_ùAddr_asNumbîv2
 1242

	)

2005 
	#OBJ_ùAddr_asNumbîv2
 
OBJ_id_˝
,3L

	)

2007 
	#SN_id_c˘_¸s
 "id-c˘-¸s"

	)

2008 
	#NID_id_c˘_¸s
 360

	)

2009 
	#OBJ_id_c˘_¸s
 
OBJ_id_c˘
,1L

	)

2011 
	#SN_id_c˘_PKID©a
 "id-c˘-PKID©a"

	)

2012 
	#NID_id_c˘_PKID©a
 361

	)

2013 
	#OBJ_id_c˘_PKID©a
 
OBJ_id_c˘
,2L

	)

2015 
	#SN_id_c˘_PKIRe•⁄£
 "id-c˘-PKIRe•⁄£"

	)

2016 
	#NID_id_c˘_PKIRe•⁄£
 362

	)

2017 
	#OBJ_id_c˘_PKIRe•⁄£
 
OBJ_id_c˘
,3L

	)

2019 
	#SN_id_µl_™yL™guage
 "id-µl-™yL™guage"

	)

2020 
	#LN_id_µl_™yL™guage
 "AnyÜ™guage"

	)

2021 
	#NID_id_µl_™yL™guage
 664

	)

2022 
	#OBJ_id_µl_™yL™guage
 
OBJ_id_µl
,0L

	)

2024 
	#SN_id_µl_öhîôAŒ
 "id-µl-öhîôAŒ"

	)

2025 
	#LN_id_µl_öhîôAŒ
 "InhîôáŒ"

	)

2026 
	#NID_id_µl_öhîôAŒ
 665

	)

2027 
	#OBJ_id_µl_öhîôAŒ
 
OBJ_id_µl
,1L

	)

2029 
	#SN_Indïídít
 "id-µl-ödïídít"

	)

2030 
	#LN_Indïídít
 "Indïídít"

	)

2031 
	#NID_Indïídít
 667

	)

2032 
	#OBJ_Indïídít
 
OBJ_id_µl
,2L

	)

2034 
	#SN_ad_OCSP
 "OCSP"

	)

2035 
	#LN_ad_OCSP
 "OCSP"

	)

2036 
	#NID_ad_OCSP
 178

	)

2037 
	#OBJ_ad_OCSP
 
OBJ_id_ad
,1L

	)

2039 
	#SN_ad_ˇ_issuîs
 "ˇIssuîs"

	)

2040 
	#LN_ad_ˇ_issuîs
 "CA Issuîs"

	)

2041 
	#NID_ad_ˇ_issuîs
 179

	)

2042 
	#OBJ_ad_ˇ_issuîs
 
OBJ_id_ad
,2L

	)

2044 
	#SN_ad_timeSèmpög
 "ad_time°ampög"

	)

2045 
	#LN_ad_timeSèmpög
 "AD TimêSèmpög"

	)

2046 
	#NID_ad_timeSèmpög
 363

	)

2047 
	#OBJ_ad_timeSèmpög
 
OBJ_id_ad
,3L

	)

2049 
	#SN_ad_dvcs
 "AD_DVCS"

	)

2050 
	#LN_ad_dvcs
 "ad dvcs"

	)

2051 
	#NID_ad_dvcs
 364

	)

2052 
	#OBJ_ad_dvcs
 
OBJ_id_ad
,4L

	)

2054 
	#SN_ˇRïosô‹y
 "ˇRïosô‹y"

	)

2055 
	#LN_ˇRïosô‹y
 "CA Rïosô‹y"

	)

2056 
	#NID_ˇRïosô‹y
 785

	)

2057 
	#OBJ_ˇRïosô‹y
 
OBJ_id_ad
,5L

	)

2059 
	#SN_ΩkiM™i„°
 "ΩkiM™i„°"

	)

2060 
	#LN_ΩkiM™i„°
 "RPKI M™i„°"

	)

2061 
	#NID_ΩkiM™i„°
 1243

	)

2062 
	#OBJ_ΩkiM™i„°
 
OBJ_id_ad
,10L

	)

2064 
	#SN_sig√dObje˘
 "sig√dObje˘"

	)

2065 
	#LN_sig√dObje˘
 "Sig√d Obje˘"

	)

2066 
	#NID_sig√dObje˘
 1244

	)

2067 
	#OBJ_sig√dObje˘
 
OBJ_id_ad
,11L

	)

2069 
	#SN_ΩkiNŸify
 "ΩkiNŸify"

	)

2070 
	#LN_ΩkiNŸify
 "RPKI NŸify"

	)

2071 
	#NID_ΩkiNŸify
 1245

	)

2072 
	#OBJ_ΩkiNŸify
 
OBJ_id_ad
,13L

	)

2074 
	#OBJ_id_pkix_OCSP
 
OBJ_ad_OCSP


	)

2076 
	#SN_id_pkix_OCSP_basic
 "basicOCSPRe•⁄£"

	)

2077 
	#LN_id_pkix_OCSP_basic
 "Basi¯OCSP Re•⁄£"

	)

2078 
	#NID_id_pkix_OCSP_basic
 365

	)

2079 
	#OBJ_id_pkix_OCSP_basic
 
OBJ_id_pkix_OCSP
,1L

	)

2081 
	#SN_id_pkix_OCSP_N⁄˚
 "N⁄˚"

	)

2082 
	#LN_id_pkix_OCSP_N⁄˚
 "OCSP N⁄˚"

	)

2083 
	#NID_id_pkix_OCSP_N⁄˚
 366

	)

2084 
	#OBJ_id_pkix_OCSP_N⁄˚
 
OBJ_id_pkix_OCSP
,2L

	)

2086 
	#SN_id_pkix_OCSP_CæID
 "CæID"

	)

2087 
	#LN_id_pkix_OCSP_CæID
 "OCSP CRL ID"

	)

2088 
	#NID_id_pkix_OCSP_CæID
 367

	)

2089 
	#OBJ_id_pkix_OCSP_CæID
 
OBJ_id_pkix_OCSP
,3L

	)

2091 
	#SN_id_pkix_OCSP_ac˚±abÀRe•⁄£s
 "ac˚±abÀRe•⁄£s"

	)

2092 
	#LN_id_pkix_OCSP_ac˚±abÀRe•⁄£s
 "Ac˚±abÀ OCSP Re•⁄£s"

	)

2093 
	#NID_id_pkix_OCSP_ac˚±abÀRe•⁄£s
 368

	)

2094 
	#OBJ_id_pkix_OCSP_ac˚±abÀRe•⁄£s
 
OBJ_id_pkix_OCSP
,4L

	)

2096 
	#SN_id_pkix_OCSP_noCheck
 "noCheck"

	)

2097 
	#LN_id_pkix_OCSP_noCheck
 "OCSP NÿCheck"

	)

2098 
	#NID_id_pkix_OCSP_noCheck
 369

	)

2099 
	#OBJ_id_pkix_OCSP_noCheck
 
OBJ_id_pkix_OCSP
,5L

	)

2101 
	#SN_id_pkix_OCSP_¨chiveCutoff
 "¨chiveCutoff"

	)

2102 
	#LN_id_pkix_OCSP_¨chiveCutoff
 "OCSP ArchivêCutoff"

	)

2103 
	#NID_id_pkix_OCSP_¨chiveCutoff
 370

	)

2104 
	#OBJ_id_pkix_OCSP_¨chiveCutoff
 
OBJ_id_pkix_OCSP
,6L

	)

2106 
	#SN_id_pkix_OCSP_£rvi˚Loˇt‹
 "£rvi˚Loˇt‹"

	)

2107 
	#LN_id_pkix_OCSP_£rvi˚Loˇt‹
 "OCSP Sîvi˚ Loˇt‹"

	)

2108 
	#NID_id_pkix_OCSP_£rvi˚Loˇt‹
 371

	)

2109 
	#OBJ_id_pkix_OCSP_£rvi˚Loˇt‹
 
OBJ_id_pkix_OCSP
,7L

	)

2111 
	#SN_id_pkix_OCSP_exãndedSètus
 "exãndedSètus"

	)

2112 
	#LN_id_pkix_OCSP_exãndedSètus
 "Exãnded OCSP Sètus"

	)

2113 
	#NID_id_pkix_OCSP_exãndedSètus
 372

	)

2114 
	#OBJ_id_pkix_OCSP_exãndedSètus
 
OBJ_id_pkix_OCSP
,8L

	)

2116 
	#SN_id_pkix_OCSP_vÆid
 "vÆid"

	)

2117 
	#NID_id_pkix_OCSP_vÆid
 373

	)

2118 
	#OBJ_id_pkix_OCSP_vÆid
 
OBJ_id_pkix_OCSP
,9L

	)

2120 
	#SN_id_pkix_OCSP_∑th
 "∑th"

	)

2121 
	#NID_id_pkix_OCSP_∑th
 374

	)

2122 
	#OBJ_id_pkix_OCSP_∑th
 
OBJ_id_pkix_OCSP
,10L

	)

2124 
	#SN_id_pkix_OCSP_åu°RoŸ
 "åu°RoŸ"

	)

2125 
	#LN_id_pkix_OCSP_åu°RoŸ
 "Tru° RoŸ"

	)

2126 
	#NID_id_pkix_OCSP_åu°RoŸ
 375

	)

2127 
	#OBJ_id_pkix_OCSP_åu°RoŸ
 
OBJ_id_pkix_OCSP
,11L

	)

2129 
	#SN_Æg‹ôhm
 "Æg‹ôhm"

	)

2130 
	#LN_Æg‹ôhm
 "Æg‹ôhm"

	)

2131 
	#NID_Æg‹ôhm
 376

	)

2132 
	#OBJ_Æg‹ôhm
 1L,3L,14L,3L,2L

	)

2134 
	#SN_md5WôhRSA
 "RSA-NP-MD5"

	)

2135 
	#LN_md5WôhRSA
 "md5WôhRSA"

	)

2136 
	#NID_md5WôhRSA
 104

	)

2137 
	#OBJ_md5WôhRSA
 
OBJ_Æg‹ôhm
,3L

	)

2139 
	#SN_des_ecb
 "DES-ECB"

	)

2140 
	#LN_des_ecb
 "des-ecb"

	)

2141 
	#NID_des_ecb
 29

	)

2142 
	#OBJ_des_ecb
 
OBJ_Æg‹ôhm
,6L

	)

2144 
	#SN_des_cbc
 "DES-CBC"

	)

2145 
	#LN_des_cbc
 "des-cbc"

	)

2146 
	#NID_des_cbc
 31

	)

2147 
	#OBJ_des_cbc
 
OBJ_Æg‹ôhm
,7L

	)

2149 
	#SN_des_ofb64
 "DES-OFB"

	)

2150 
	#LN_des_ofb64
 "des-ofb"

	)

2151 
	#NID_des_ofb64
 45

	)

2152 
	#OBJ_des_ofb64
 
OBJ_Æg‹ôhm
,8L

	)

2154 
	#SN_des_cfb64
 "DES-CFB"

	)

2155 
	#LN_des_cfb64
 "des-cfb"

	)

2156 
	#NID_des_cfb64
 30

	)

2157 
	#OBJ_des_cfb64
 
OBJ_Æg‹ôhm
,9L

	)

2159 
	#SN_rßSig«tuª
 "rßSig«tuª"

	)

2160 
	#NID_rßSig«tuª
 377

	)

2161 
	#OBJ_rßSig«tuª
 
OBJ_Æg‹ôhm
,11L

	)

2163 
	#SN_dß_2
 "DSA-ﬁd"

	)

2164 
	#LN_dß_2
 "dßEn¸y±i⁄-ﬁd"

	)

2165 
	#NID_dß_2
 67

	)

2166 
	#OBJ_dß_2
 
OBJ_Æg‹ôhm
,12L

	)

2168 
	#SN_dßWôhSHA
 "DSA-SHA"

	)

2169 
	#LN_dßWôhSHA
 "dßWôhSHA"

	)

2170 
	#NID_dßWôhSHA
 66

	)

2171 
	#OBJ_dßWôhSHA
 
OBJ_Æg‹ôhm
,13L

	)

2173 
	#SN_shaWôhRSAEn¸y±i⁄
 "RSA-SHA"

	)

2174 
	#LN_shaWôhRSAEn¸y±i⁄
 "shaWôhRSAEn¸y±i⁄"

	)

2175 
	#NID_shaWôhRSAEn¸y±i⁄
 42

	)

2176 
	#OBJ_shaWôhRSAEn¸y±i⁄
 
OBJ_Æg‹ôhm
,15L

	)

2178 
	#SN_des_ede_ecb
 "DES-EDE"

	)

2179 
	#LN_des_ede_ecb
 "des-ede"

	)

2180 
	#NID_des_ede_ecb
 32

	)

2181 
	#OBJ_des_ede_ecb
 
OBJ_Æg‹ôhm
,17L

	)

2183 
	#SN_des_ede3_ecb
 "DES-EDE3"

	)

2184 
	#LN_des_ede3_ecb
 "des-ede3"

	)

2185 
	#NID_des_ede3_ecb
 33

	)

2187 
	#SN_des_ede_cbc
 "DES-EDE-CBC"

	)

2188 
	#LN_des_ede_cbc
 "des-ede-cbc"

	)

2189 
	#NID_des_ede_cbc
 43

	)

2191 
	#SN_des_ede_cfb64
 "DES-EDE-CFB"

	)

2192 
	#LN_des_ede_cfb64
 "des-ede-cfb"

	)

2193 
	#NID_des_ede_cfb64
 60

	)

2195 
	#SN_des_ede3_cfb64
 "DES-EDE3-CFB"

	)

2196 
	#LN_des_ede3_cfb64
 "des-ede3-cfb"

	)

2197 
	#NID_des_ede3_cfb64
 61

	)

2199 
	#SN_des_ede_ofb64
 "DES-EDE-OFB"

	)

2200 
	#LN_des_ede_ofb64
 "des-ede-ofb"

	)

2201 
	#NID_des_ede_ofb64
 62

	)

2203 
	#SN_des_ede3_ofb64
 "DES-EDE3-OFB"

	)

2204 
	#LN_des_ede3_ofb64
 "des-ede3-ofb"

	)

2205 
	#NID_des_ede3_ofb64
 63

	)

2207 
	#SN_desx_cbc
 "DESX-CBC"

	)

2208 
	#LN_desx_cbc
 "desx-cbc"

	)

2209 
	#NID_desx_cbc
 80

	)

2211 
	#SN_sha
 "SHA"

	)

2212 
	#LN_sha
 "sha"

	)

2213 
	#NID_sha
 41

	)

2214 
	#OBJ_sha
 
OBJ_Æg‹ôhm
,18L

	)

2216 
	#SN_sha1
 "SHA1"

	)

2217 
	#LN_sha1
 "sha1"

	)

2218 
	#NID_sha1
 64

	)

2219 
	#OBJ_sha1
 
OBJ_Æg‹ôhm
,26L

	)

2221 
	#SN_dßWôhSHA1_2
 "DSA-SHA1-ﬁd"

	)

2222 
	#LN_dßWôhSHA1_2
 "dßWôhSHA1-ﬁd"

	)

2223 
	#NID_dßWôhSHA1_2
 70

	)

2224 
	#OBJ_dßWôhSHA1_2
 
OBJ_Æg‹ôhm
,27L

	)

2226 
	#SN_sha1WôhRSA
 "RSA-SHA1-2"

	)

2227 
	#LN_sha1WôhRSA
 "sha1WôhRSA"

	)

2228 
	#NID_sha1WôhRSA
 115

	)

2229 
	#OBJ_sha1WôhRSA
 
OBJ_Æg‹ôhm
,29L

	)

2231 
	#SN_rùemd160
 "RIPEMD160"

	)

2232 
	#LN_rùemd160
 "rùemd160"

	)

2233 
	#NID_rùemd160
 117

	)

2234 
	#OBJ_rùemd160
 1L,3L,36L,3L,2L,1L

	)

2236 
	#SN_rùemd160WôhRSA
 "RSA-RIPEMD160"

	)

2237 
	#LN_rùemd160WôhRSA
 "rùemd160WôhRSA"

	)

2238 
	#NID_rùemd160WôhRSA
 119

	)

2239 
	#OBJ_rùemd160WôhRSA
 1L,3L,36L,3L,3L,1L,2L

	)

2241 
	#SN_bœke2bmac
 "BLAKE2BMAC"

	)

2242 
	#LN_bœke2bmac
 "bœke2bmac"

	)

2243 
	#NID_bœke2bmac
 1201

	)

2244 
	#OBJ_bœke2bmac
 1L,3L,6L,1L,4L,1L,1722L,12L,2L,1L

	)

2246 
	#SN_bœke2smac
 "BLAKE2SMAC"

	)

2247 
	#LN_bœke2smac
 "bœke2smac"

	)

2248 
	#NID_bœke2smac
 1202

	)

2249 
	#OBJ_bœke2smac
 1L,3L,6L,1L,4L,1L,1722L,12L,2L,2L

	)

2251 
	#SN_bœke2b512
 "BLAKE2b512"

	)

2252 
	#LN_bœke2b512
 "bœke2b512"

	)

2253 
	#NID_bœke2b512
 1056

	)

2254 
	#OBJ_bœke2b512
 
OBJ_bœke2bmac
,16L

	)

2256 
	#SN_bœke2s256
 "BLAKE2s256"

	)

2257 
	#LN_bœke2s256
 "bœke2s256"

	)

2258 
	#NID_bœke2s256
 1057

	)

2259 
	#OBJ_bœke2s256
 
OBJ_bœke2smac
,8L

	)

2261 
	#SN_sx√t
 "SXNëID"

	)

2262 
	#LN_sx√t
 "Så⁄g Exå™ë ID"

	)

2263 
	#NID_sx√t
 143

	)

2264 
	#OBJ_sx√t
 1L,3L,101L,1L,4L,1L

	)

2266 
	#SN_X500
 "X500"

	)

2267 
	#LN_X500
 "dúe˘‹y sîvi˚†(X.500)"

	)

2268 
	#NID_X500
 11

	)

2269 
	#OBJ_X500
 2L,5L

	)

2271 
	#SN_X509
 "X509"

	)

2272 
	#NID_X509
 12

	)

2273 
	#OBJ_X509
 
OBJ_X500
,4L

	)

2275 
	#SN_comm⁄Name
 "CN"

	)

2276 
	#LN_comm⁄Name
 "comm⁄Name"

	)

2277 
	#NID_comm⁄Name
 13

	)

2278 
	#OBJ_comm⁄Name
 
OBJ_X509
,3L

	)

2280 
	#SN_su∫ame
 "SN"

	)

2281 
	#LN_su∫ame
 "su∫ame"

	)

2282 
	#NID_su∫ame
 100

	)

2283 
	#OBJ_su∫ame
 
OBJ_X509
,4L

	)

2285 
	#LN_£rülNumbî
 "£rülNumbî"

	)

2286 
	#NID_£rülNumbî
 105

	)

2287 
	#OBJ_£rülNumbî
 
OBJ_X509
,5L

	)

2289 
	#SN_cou¡ryName
 "C"

	)

2290 
	#LN_cou¡ryName
 "cou¡ryName"

	)

2291 
	#NID_cou¡ryName
 14

	)

2292 
	#OBJ_cou¡ryName
 
OBJ_X509
,6L

	)

2294 
	#SN_loˇlôyName
 "L"

	)

2295 
	#LN_loˇlôyName
 "loˇlôyName"

	)

2296 
	#NID_loˇlôyName
 15

	)

2297 
	#OBJ_loˇlôyName
 
OBJ_X509
,7L

	)

2299 
	#SN_°©eOrProvö˚Name
 "ST"

	)

2300 
	#LN_°©eOrProvö˚Name
 "°©eOrProvö˚Name"

	)

2301 
	#NID_°©eOrProvö˚Name
 16

	)

2302 
	#OBJ_°©eOrProvö˚Name
 
OBJ_X509
,8L

	)

2304 
	#SN_°ªëAddªss
 "°ªë"

	)

2305 
	#LN_°ªëAddªss
 "°ªëAddªss"

	)

2306 
	#NID_°ªëAddªss
 660

	)

2307 
	#OBJ_°ªëAddªss
 
OBJ_X509
,9L

	)

2309 
	#SN_‹g™iz©i⁄Name
 "O"

	)

2310 
	#LN_‹g™iz©i⁄Name
 "‹g™iz©i⁄Name"

	)

2311 
	#NID_‹g™iz©i⁄Name
 17

	)

2312 
	#OBJ_‹g™iz©i⁄Name
 
OBJ_X509
,10L

	)

2314 
	#SN_‹g™iz©i⁄ÆUnôName
 "OU"

	)

2315 
	#LN_‹g™iz©i⁄ÆUnôName
 "‹g™iz©i⁄ÆUnôName"

	)

2316 
	#NID_‹g™iz©i⁄ÆUnôName
 18

	)

2317 
	#OBJ_‹g™iz©i⁄ÆUnôName
 
OBJ_X509
,11L

	)

2319 
	#SN_tôÀ
 "tôÀ"

	)

2320 
	#LN_tôÀ
 "tôÀ"

	)

2321 
	#NID_tôÀ
 106

	)

2322 
	#OBJ_tôÀ
 
OBJ_X509
,12L

	)

2324 
	#LN_des¸ùti⁄
 "des¸ùti⁄"

	)

2325 
	#NID_des¸ùti⁄
 107

	)

2326 
	#OBJ_des¸ùti⁄
 
OBJ_X509
,13L

	)

2328 
	#LN_£¨chGuide
 "£¨chGuide"

	)

2329 
	#NID_£¨chGuide
 859

	)

2330 
	#OBJ_£¨chGuide
 
OBJ_X509
,14L

	)

2332 
	#LN_busöessC©eg‹y
 "busöessC©eg‹y"

	)

2333 
	#NID_busöessC©eg‹y
 860

	)

2334 
	#OBJ_busöessC©eg‹y
 
OBJ_X509
,15L

	)

2336 
	#LN_po°ÆAddªss
 "po°ÆAddªss"

	)

2337 
	#NID_po°ÆAddªss
 861

	)

2338 
	#OBJ_po°ÆAddªss
 
OBJ_X509
,16L

	)

2340 
	#LN_po°ÆCode
 "po°ÆCode"

	)

2341 
	#NID_po°ÆCode
 661

	)

2342 
	#OBJ_po°ÆCode
 
OBJ_X509
,17L

	)

2344 
	#LN_po°Offi˚Box
 "po°Offi˚Box"

	)

2345 
	#NID_po°Offi˚Box
 862

	)

2346 
	#OBJ_po°Offi˚Box
 
OBJ_X509
,18L

	)

2348 
	#LN_physiˇlDñivîyOffi˚Name
 "physiˇlDñivîyOffi˚Name"

	)

2349 
	#NID_physiˇlDñivîyOffi˚Name
 863

	)

2350 
	#OBJ_physiˇlDñivîyOffi˚Name
 
OBJ_X509
,19L

	)

2352 
	#LN_ãÀph⁄eNumbî
 "ãÀph⁄eNumbî"

	)

2353 
	#NID_ãÀph⁄eNumbî
 864

	)

2354 
	#OBJ_ãÀph⁄eNumbî
 
OBJ_X509
,20L

	)

2356 
	#LN_ãÀxNumbî
 "ãÀxNumbî"

	)

2357 
	#NID_ãÀxNumbî
 865

	)

2358 
	#OBJ_ãÀxNumbî
 
OBJ_X509
,21L

	)

2360 
	#LN_ãÀãxTîmöÆIdítifõr
 "ãÀãxTîmöÆIdítifõr"

	)

2361 
	#NID_ãÀãxTîmöÆIdítifõr
 866

	)

2362 
	#OBJ_ãÀãxTîmöÆIdítifõr
 
OBJ_X509
,22L

	)

2364 
	#LN_ÁcsimûeTñïh⁄eNumbî
 "ÁcsimûeTñïh⁄eNumbî"

	)

2365 
	#NID_ÁcsimûeTñïh⁄eNumbî
 867

	)

2366 
	#OBJ_ÁcsimûeTñïh⁄eNumbî
 
OBJ_X509
,23L

	)

2368 
	#LN_x121Addªss
 "x121Addªss"

	)

2369 
	#NID_x121Addªss
 868

	)

2370 
	#OBJ_x121Addªss
 
OBJ_X509
,24L

	)

2372 
	#LN_öã∫©i⁄ÆiSDNNumbî
 "öã∫©i⁄ÆiSDNNumbî"

	)

2373 
	#NID_öã∫©i⁄ÆiSDNNumbî
 869

	)

2374 
	#OBJ_öã∫©i⁄ÆiSDNNumbî
 
OBJ_X509
,25L

	)

2376 
	#LN_ªgi°îedAddªss
 "ªgi°îedAddªss"

	)

2377 
	#NID_ªgi°îedAddªss
 870

	)

2378 
	#OBJ_ªgi°îedAddªss
 
OBJ_X509
,26L

	)

2380 
	#LN_de°ö©i⁄Indiˇt‹
 "de°ö©i⁄Indiˇt‹"

	)

2381 
	#NID_de°ö©i⁄Indiˇt‹
 871

	)

2382 
	#OBJ_de°ö©i⁄Indiˇt‹
 
OBJ_X509
,27L

	)

2384 
	#LN_¥e„ºedDñivîyMëhod
 "¥e„ºedDñivîyMëhod"

	)

2385 
	#NID_¥e„ºedDñivîyMëhod
 872

	)

2386 
	#OBJ_¥e„ºedDñivîyMëhod
 
OBJ_X509
,28L

	)

2388 
	#LN_¥e£¡©i⁄Addªss
 "¥e£¡©i⁄Addªss"

	)

2389 
	#NID_¥e£¡©i⁄Addªss
 873

	)

2390 
	#OBJ_¥e£¡©i⁄Addªss
 
OBJ_X509
,29L

	)

2392 
	#LN_suµ‹ãdAµliˇti⁄C⁄ãxt
 "suµ‹ãdAµliˇti⁄C⁄ãxt"

	)

2393 
	#NID_suµ‹ãdAµliˇti⁄C⁄ãxt
 874

	)

2394 
	#OBJ_suµ‹ãdAµliˇti⁄C⁄ãxt
 
OBJ_X509
,30L

	)

2396 
	#SN_membî
 "membî"

	)

2397 
	#NID_membî
 875

	)

2398 
	#OBJ_membî
 
OBJ_X509
,31L

	)

2400 
	#SN_ow√r
 "ow√r"

	)

2401 
	#NID_ow√r
 876

	)

2402 
	#OBJ_ow√r
 
OBJ_X509
,32L

	)

2404 
	#LN_rﬁeOccu∑¡
 "rﬁeOccu∑¡"

	)

2405 
	#NID_rﬁeOccu∑¡
 877

	)

2406 
	#OBJ_rﬁeOccu∑¡
 
OBJ_X509
,33L

	)

2408 
	#SN_£eAlso
 "£eAlso"

	)

2409 
	#NID_£eAlso
 878

	)

2410 
	#OBJ_£eAlso
 
OBJ_X509
,34L

	)

2412 
	#LN_u£rPassw‹d
 "u£rPassw‹d"

	)

2413 
	#NID_u£rPassw‹d
 879

	)

2414 
	#OBJ_u£rPassw‹d
 
OBJ_X509
,35L

	)

2416 
	#LN_u£rCîtifiˇã
 "u£rCîtifiˇã"

	)

2417 
	#NID_u£rCîtifiˇã
 880

	)

2418 
	#OBJ_u£rCîtifiˇã
 
OBJ_X509
,36L

	)

2420 
	#LN_cACîtifiˇã
 "cACîtifiˇã"

	)

2421 
	#NID_cACîtifiˇã
 881

	)

2422 
	#OBJ_cACîtifiˇã
 
OBJ_X509
,37L

	)

2424 
	#LN_auth‹ôyRevoˇti⁄Li°
 "auth‹ôyRevoˇti⁄Li°"

	)

2425 
	#NID_auth‹ôyRevoˇti⁄Li°
 882

	)

2426 
	#OBJ_auth‹ôyRevoˇti⁄Li°
 
OBJ_X509
,38L

	)

2428 
	#LN_˚πifiˇãRevoˇti⁄Li°
 "˚πifiˇãRevoˇti⁄Li°"

	)

2429 
	#NID_˚πifiˇãRevoˇti⁄Li°
 883

	)

2430 
	#OBJ_˚πifiˇãRevoˇti⁄Li°
 
OBJ_X509
,39L

	)

2432 
	#LN_¸ossCîtifiˇãPaú
 "¸ossCîtifiˇãPaú"

	)

2433 
	#NID_¸ossCîtifiˇãPaú
 884

	)

2434 
	#OBJ_¸ossCîtifiˇãPaú
 
OBJ_X509
,40L

	)

2436 
	#SN_«me
 "«me"

	)

2437 
	#LN_«me
 "«me"

	)

2438 
	#NID_«me
 173

	)

2439 
	#OBJ_«me
 
OBJ_X509
,41L

	)

2441 
	#SN_givíName
 "GN"

	)

2442 
	#LN_givíName
 "givíName"

	)

2443 
	#NID_givíName
 99

	)

2444 
	#OBJ_givíName
 
OBJ_X509
,42L

	)

2446 
	#SN_öôüls
 "öôüls"

	)

2447 
	#LN_öôüls
 "öôüls"

	)

2448 
	#NID_öôüls
 101

	)

2449 
	#OBJ_öôüls
 
OBJ_X509
,43L

	)

2451 
	#LN_gíî©i⁄QuÆifõr
 "gíî©i⁄QuÆifõr"

	)

2452 
	#NID_gíî©i⁄QuÆifõr
 509

	)

2453 
	#OBJ_gíî©i⁄QuÆifõr
 
OBJ_X509
,44L

	)

2455 
	#LN_x500UniqueIdítifõr
 "x500UniqueIdítifõr"

	)

2456 
	#NID_x500UniqueIdítifõr
 503

	)

2457 
	#OBJ_x500UniqueIdítifõr
 
OBJ_X509
,45L

	)

2459 
	#SN_dnQuÆifõr
 "dnQuÆifõr"

	)

2460 
	#LN_dnQuÆifõr
 "dnQuÆifõr"

	)

2461 
	#NID_dnQuÆifõr
 174

	)

2462 
	#OBJ_dnQuÆifõr
 
OBJ_X509
,46L

	)

2464 
	#LN_íh™˚dSórchGuide
 "íh™˚dSórchGuide"

	)

2465 
	#NID_íh™˚dSórchGuide
 885

	)

2466 
	#OBJ_íh™˚dSórchGuide
 
OBJ_X509
,47L

	)

2468 
	#LN_¥ŸocﬁInf‹m©i⁄
 "¥ŸocﬁInf‹m©i⁄"

	)

2469 
	#NID_¥ŸocﬁInf‹m©i⁄
 886

	)

2470 
	#OBJ_¥ŸocﬁInf‹m©i⁄
 
OBJ_X509
,48L

	)

2472 
	#LN_di°öguishedName
 "di°öguishedName"

	)

2473 
	#NID_di°öguishedName
 887

	)

2474 
	#OBJ_di°öguishedName
 
OBJ_X509
,49L

	)

2476 
	#LN_uniqueMembî
 "uniqueMembî"

	)

2477 
	#NID_uniqueMembî
 888

	)

2478 
	#OBJ_uniqueMembî
 
OBJ_X509
,50L

	)

2480 
	#LN_hou£Idítifõr
 "hou£Idítifõr"

	)

2481 
	#NID_hou£Idítifõr
 889

	)

2482 
	#OBJ_hou£Idítifõr
 
OBJ_X509
,51L

	)

2484 
	#LN_suµ‹ãdAlg‹ôhms
 "suµ‹ãdAlg‹ôhms"

	)

2485 
	#NID_suµ‹ãdAlg‹ôhms
 890

	)

2486 
	#OBJ_suµ‹ãdAlg‹ôhms
 
OBJ_X509
,52L

	)

2488 
	#LN_dñèRevoˇti⁄Li°
 "dñèRevoˇti⁄Li°"

	)

2489 
	#NID_dñèRevoˇti⁄Li°
 891

	)

2490 
	#OBJ_dñèRevoˇti⁄Li°
 
OBJ_X509
,53L

	)

2492 
	#SN_dmdName
 "dmdName"

	)

2493 
	#NID_dmdName
 892

	)

2494 
	#OBJ_dmdName
 
OBJ_X509
,54L

	)

2496 
	#LN_p£ud⁄ym
 "p£ud⁄ym"

	)

2497 
	#NID_p£ud⁄ym
 510

	)

2498 
	#OBJ_p£ud⁄ym
 
OBJ_X509
,65L

	)

2500 
	#SN_rﬁe
 "rﬁe"

	)

2501 
	#LN_rﬁe
 "rﬁe"

	)

2502 
	#NID_rﬁe
 400

	)

2503 
	#OBJ_rﬁe
 
OBJ_X509
,72L

	)

2505 
	#LN_‹g™iz©i⁄Idítifõr
 "‹g™iz©i⁄Idítifõr"

	)

2506 
	#NID_‹g™iz©i⁄Idítifõr
 1089

	)

2507 
	#OBJ_‹g™iz©i⁄Idítifõr
 
OBJ_X509
,97L

	)

2509 
	#SN_cou¡ryCode3c
 "c3"

	)

2510 
	#LN_cou¡ryCode3c
 "cou¡ryCode3c"

	)

2511 
	#NID_cou¡ryCode3c
 1090

	)

2512 
	#OBJ_cou¡ryCode3c
 
OBJ_X509
,98L

	)

2514 
	#SN_cou¡ryCode3n
 "n3"

	)

2515 
	#LN_cou¡ryCode3n
 "cou¡ryCode3n"

	)

2516 
	#NID_cou¡ryCode3n
 1091

	)

2517 
	#OBJ_cou¡ryCode3n
 
OBJ_X509
,99L

	)

2519 
	#LN_dnsName
 "dnsName"

	)

2520 
	#NID_dnsName
 1092

	)

2521 
	#OBJ_dnsName
 
OBJ_X509
,100L

	)

2523 
	#SN_X500Æg‹ôhms
 "X500Æg‹ôhms"

	)

2524 
	#LN_X500Æg‹ôhms
 "dúe˘‹y sîvi˚†-álg‹ôhms"

	)

2525 
	#NID_X500Æg‹ôhms
 378

	)

2526 
	#OBJ_X500Æg‹ôhms
 
OBJ_X500
,8L

	)

2528 
	#SN_rß
 "RSA"

	)

2529 
	#LN_rß
 "rß"

	)

2530 
	#NID_rß
 19

	)

2531 
	#OBJ_rß
 
OBJ_X500Æg‹ôhms
,1L,1L

	)

2533 
	#SN_mdc2WôhRSA
 "RSA-MDC2"

	)

2534 
	#LN_mdc2WôhRSA
 "mdc2WôhRSA"

	)

2535 
	#NID_mdc2WôhRSA
 96

	)

2536 
	#OBJ_mdc2WôhRSA
 
OBJ_X500Æg‹ôhms
,3L,100L

	)

2538 
	#SN_mdc2
 "MDC2"

	)

2539 
	#LN_mdc2
 "mdc2"

	)

2540 
	#NID_mdc2
 95

	)

2541 
	#OBJ_mdc2
 
OBJ_X500Æg‹ôhms
,3L,101L

	)

2543 
	#SN_id_˚
 "id-˚"

	)

2544 
	#NID_id_˚
 81

	)

2545 
	#OBJ_id_˚
 
OBJ_X500
,29L

	)

2547 
	#SN_subje˘_dúe˘‹y_©åibuãs
 "subje˘Dúe˘‹yAâribuãs"

	)

2548 
	#LN_subje˘_dúe˘‹y_©åibuãs
 "X509v3 Subje˘ Dúe˘‹y Aâribuãs"

	)

2549 
	#NID_subje˘_dúe˘‹y_©åibuãs
 769

	)

2550 
	#OBJ_subje˘_dúe˘‹y_©åibuãs
 
OBJ_id_˚
,9L

	)

2552 
	#SN_subje˘_key_idítifõr
 "subje˘KeyIdítifõr"

	)

2553 
	#LN_subje˘_key_idítifõr
 "X509v3 Subje˘ Key Idítifõr"

	)

2554 
	#NID_subje˘_key_idítifõr
 82

	)

2555 
	#OBJ_subje˘_key_idítifõr
 
OBJ_id_˚
,14L

	)

2557 
	#SN_key_ußge
 "keyUßge"

	)

2558 
	#LN_key_ußge
 "X509v3 Key Ußge"

	)

2559 
	#NID_key_ußge
 83

	)

2560 
	#OBJ_key_ußge
 
OBJ_id_˚
,15L

	)

2562 
	#SN_¥iv©e_key_ußge_≥riod
 "¥iv©eKeyUßgePîiod"

	)

2563 
	#LN_¥iv©e_key_ußge_≥riod
 "X509v3 Priv©êKey UßgêPîiod"

	)

2564 
	#NID_¥iv©e_key_ußge_≥riod
 84

	)

2565 
	#OBJ_¥iv©e_key_ußge_≥riod
 
OBJ_id_˚
,16L

	)

2567 
	#SN_subje˘_Æt_«me
 "subje˘A…Name"

	)

2568 
	#LN_subje˘_Æt_«me
 "X509v3 Subje˘ A…î«tivêName"

	)

2569 
	#NID_subje˘_Æt_«me
 85

	)

2570 
	#OBJ_subje˘_Æt_«me
 
OBJ_id_˚
,17L

	)

2572 
	#SN_issuî_Æt_«me
 "issuîA…Name"

	)

2573 
	#LN_issuî_Æt_«me
 "X509v3 Issuî A…î«tivêName"

	)

2574 
	#NID_issuî_Æt_«me
 86

	)

2575 
	#OBJ_issuî_Æt_«me
 
OBJ_id_˚
,18L

	)

2577 
	#SN_basic_c⁄°øöts
 "basicC⁄°øöts"

	)

2578 
	#LN_basic_c⁄°øöts
 "X509v3 Basi¯C⁄°øöts"

	)

2579 
	#NID_basic_c⁄°øöts
 87

	)

2580 
	#OBJ_basic_c⁄°øöts
 
OBJ_id_˚
,19L

	)

2582 
	#SN_¸l_numbî
 "¸lNumbî"

	)

2583 
	#LN_¸l_numbî
 "X509v3 CRL Numbî"

	)

2584 
	#NID_¸l_numbî
 88

	)

2585 
	#OBJ_¸l_numbî
 
OBJ_id_˚
,20L

	)

2587 
	#SN_¸l_ªas⁄
 "CRLRós⁄"

	)

2588 
	#LN_¸l_ªas⁄
 "X509v3 CRL Rós⁄ Code"

	)

2589 
	#NID_¸l_ªas⁄
 141

	)

2590 
	#OBJ_¸l_ªas⁄
 
OBJ_id_˚
,21L

	)

2592 
	#SN_övÆidôy_d©e
 "övÆidôyD©e"

	)

2593 
	#LN_övÆidôy_d©e
 "InvÆidôy D©e"

	)

2594 
	#NID_övÆidôy_d©e
 142

	)

2595 
	#OBJ_övÆidôy_d©e
 
OBJ_id_˚
,24L

	)

2597 
	#SN_dñè_¸l
 "dñèCRL"

	)

2598 
	#LN_dñè_¸l
 "X509v3 Dñè CRL Indiˇt‹"

	)

2599 
	#NID_dñè_¸l
 140

	)

2600 
	#OBJ_dñè_¸l
 
OBJ_id_˚
,27L

	)

2602 
	#SN_issuög_di°ributi⁄_poöt
 "issuögDi°ributi⁄Poöt"

	)

2603 
	#LN_issuög_di°ributi⁄_poöt
 "X509v3 Issuög Di°ributi⁄ Poöt"

	)

2604 
	#NID_issuög_di°ributi⁄_poöt
 770

	)

2605 
	#OBJ_issuög_di°ributi⁄_poöt
 
OBJ_id_˚
,28L

	)

2607 
	#SN_˚πifiˇã_issuî
 "˚πifiˇãIssuî"

	)

2608 
	#LN_˚πifiˇã_issuî
 "X509v3 Cîtifiˇã Issuî"

	)

2609 
	#NID_˚πifiˇã_issuî
 771

	)

2610 
	#OBJ_˚πifiˇã_issuî
 
OBJ_id_˚
,29L

	)

2612 
	#SN_«me_c⁄°øöts
 "«meC⁄°øöts"

	)

2613 
	#LN_«me_c⁄°øöts
 "X509v3 NamêC⁄°øöts"

	)

2614 
	#NID_«me_c⁄°øöts
 666

	)

2615 
	#OBJ_«me_c⁄°øöts
 
OBJ_id_˚
,30L

	)

2617 
	#SN_¸l_di°ributi⁄_poöts
 "¸lDi°ributi⁄Poöts"

	)

2618 
	#LN_¸l_di°ributi⁄_poöts
 "X509v3 CRL Di°ributi⁄ Poöts"

	)

2619 
	#NID_¸l_di°ributi⁄_poöts
 103

	)

2620 
	#OBJ_¸l_di°ributi⁄_poöts
 
OBJ_id_˚
,31L

	)

2622 
	#SN_˚πifiˇã_pﬁicõs
 "˚πifiˇãPﬁicõs"

	)

2623 
	#LN_˚πifiˇã_pﬁicõs
 "X509v3 Cîtifiˇã Pﬁicõs"

	)

2624 
	#NID_˚πifiˇã_pﬁicõs
 89

	)

2625 
	#OBJ_˚πifiˇã_pﬁicõs
 
OBJ_id_˚
,32L

	)

2627 
	#SN_™y_pﬁicy
 "™yPﬁicy"

	)

2628 
	#LN_™y_pﬁicy
 "X509v3 Any Pﬁicy"

	)

2629 
	#NID_™y_pﬁicy
 746

	)

2630 
	#OBJ_™y_pﬁicy
 
OBJ_˚πifiˇã_pﬁicõs
,0L

	)

2632 
	#SN_pﬁicy_m≠pögs
 "pﬁicyM≠pögs"

	)

2633 
	#LN_pﬁicy_m≠pögs
 "X509v3 Pﬁicy M≠pögs"

	)

2634 
	#NID_pﬁicy_m≠pögs
 747

	)

2635 
	#OBJ_pﬁicy_m≠pögs
 
OBJ_id_˚
,33L

	)

2637 
	#SN_auth‹ôy_key_idítifõr
 "auth‹ôyKeyIdítifõr"

	)

2638 
	#LN_auth‹ôy_key_idítifõr
 "X509v3 Auth‹ôy Key Idítifõr"

	)

2639 
	#NID_auth‹ôy_key_idítifõr
 90

	)

2640 
	#OBJ_auth‹ôy_key_idítifõr
 
OBJ_id_˚
,35L

	)

2642 
	#SN_pﬁicy_c⁄°øöts
 "pﬁicyC⁄°øöts"

	)

2643 
	#LN_pﬁicy_c⁄°øöts
 "X509v3 Pﬁicy C⁄°øöts"

	)

2644 
	#NID_pﬁicy_c⁄°øöts
 401

	)

2645 
	#OBJ_pﬁicy_c⁄°øöts
 
OBJ_id_˚
,36L

	)

2647 
	#SN_ext_key_ußge
 "exãndedKeyUßge"

	)

2648 
	#LN_ext_key_ußge
 "X509v3 Exãnded Key Ußge"

	)

2649 
	#NID_ext_key_ußge
 126

	)

2650 
	#OBJ_ext_key_ußge
 
OBJ_id_˚
,37L

	)

2652 
	#SN_‰eshe°_¸l
 "‰eshe°CRL"

	)

2653 
	#LN_‰eshe°_¸l
 "X509v3 Fªshe° CRL"

	)

2654 
	#NID_‰eshe°_¸l
 857

	)

2655 
	#OBJ_‰eshe°_¸l
 
OBJ_id_˚
,46L

	)

2657 
	#SN_öhibô_™y_pﬁicy
 "öhibôAnyPﬁicy"

	)

2658 
	#LN_öhibô_™y_pﬁicy
 "X509v3 Inhibô Any Pﬁicy"

	)

2659 
	#NID_öhibô_™y_pﬁicy
 748

	)

2660 
	#OBJ_öhibô_™y_pﬁicy
 
OBJ_id_˚
,54L

	)

2662 
	#SN_èrgë_öf‹m©i⁄
 "èrgëInf‹m©i⁄"

	)

2663 
	#LN_èrgë_öf‹m©i⁄
 "X509v3 AC T¨gëög"

	)

2664 
	#NID_èrgë_öf‹m©i⁄
 402

	)

2665 
	#OBJ_èrgë_öf‹m©i⁄
 
OBJ_id_˚
,55L

	)

2667 
	#SN_no_ªv_avaû
 "noRevAvaû"

	)

2668 
	#LN_no_ªv_avaû
 "X509v3 NÿRevoˇti⁄ AvaûabÀ"

	)

2669 
	#NID_no_ªv_avaû
 403

	)

2670 
	#OBJ_no_ªv_avaû
 
OBJ_id_˚
,56L

	)

2672 
	#SN_™yExãndedKeyUßge
 "™yExãndedKeyUßge"

	)

2673 
	#LN_™yExãndedKeyUßge
 "Any Exãnded Key Ußge"

	)

2674 
	#NID_™yExãndedKeyUßge
 910

	)

2675 
	#OBJ_™yExãndedKeyUßge
 
OBJ_ext_key_ußge
,0L

	)

2677 
	#SN_√tsˇ≥
 "Nësˇ≥"

	)

2678 
	#LN_√tsˇ≥
 "Nësˇ≥ Communiˇti⁄†C‹p."

	)

2679 
	#NID_√tsˇ≥
 57

	)

2680 
	#OBJ_√tsˇ≥
 2L,16L,840L,1L,113730L

	)

2682 
	#SN_√tsˇ≥_˚π_exãnsi⁄
 "nsCîtExt"

	)

2683 
	#LN_√tsˇ≥_˚π_exãnsi⁄
 "Nësˇ≥ Cîtifiˇã Exãnsi⁄"

	)

2684 
	#NID_√tsˇ≥_˚π_exãnsi⁄
 58

	)

2685 
	#OBJ_√tsˇ≥_˚π_exãnsi⁄
 
OBJ_√tsˇ≥
,1L

	)

2687 
	#SN_√tsˇ≥_d©a_ty≥
 "nsD©aTy≥"

	)

2688 
	#LN_√tsˇ≥_d©a_ty≥
 "Nësˇ≥ D©®Ty≥"

	)

2689 
	#NID_√tsˇ≥_d©a_ty≥
 59

	)

2690 
	#OBJ_√tsˇ≥_d©a_ty≥
 
OBJ_√tsˇ≥
,2L

	)

2692 
	#SN_√tsˇ≥_˚π_ty≥
 "nsCîtTy≥"

	)

2693 
	#LN_√tsˇ≥_˚π_ty≥
 "Nësˇ≥ CîàTy≥"

	)

2694 
	#NID_√tsˇ≥_˚π_ty≥
 71

	)

2695 
	#OBJ_√tsˇ≥_˚π_ty≥
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,1L

	)

2697 
	#SN_√tsˇ≥_ba£_uæ
 "nsBa£Uæ"

	)

2698 
	#LN_√tsˇ≥_ba£_uæ
 "Nësˇ≥ Ba£ Uæ"

	)

2699 
	#NID_√tsˇ≥_ba£_uæ
 72

	)

2700 
	#OBJ_√tsˇ≥_ba£_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,2L

	)

2702 
	#SN_√tsˇ≥_ªvoˇti⁄_uæ
 "nsRevoˇti⁄Uæ"

	)

2703 
	#LN_√tsˇ≥_ªvoˇti⁄_uæ
 "Nësˇ≥ Revoˇti⁄ Uæ"

	)

2704 
	#NID_√tsˇ≥_ªvoˇti⁄_uæ
 73

	)

2705 
	#OBJ_√tsˇ≥_ªvoˇti⁄_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,3L

	)

2707 
	#SN_√tsˇ≥_ˇ_ªvoˇti⁄_uæ
 "nsCaRevoˇti⁄Uæ"

	)

2708 
	#LN_√tsˇ≥_ˇ_ªvoˇti⁄_uæ
 "Nësˇ≥ CA Revoˇti⁄ Uæ"

	)

2709 
	#NID_√tsˇ≥_ˇ_ªvoˇti⁄_uæ
 74

	)

2710 
	#OBJ_√tsˇ≥_ˇ_ªvoˇti⁄_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,4L

	)

2712 
	#SN_√tsˇ≥_ª√wÆ_uæ
 "nsRíewÆUæ"

	)

2713 
	#LN_√tsˇ≥_ª√wÆ_uæ
 "Nësˇ≥ RíewÆ Uæ"

	)

2714 
	#NID_√tsˇ≥_ª√wÆ_uæ
 75

	)

2715 
	#OBJ_√tsˇ≥_ª√wÆ_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,7L

	)

2717 
	#SN_√tsˇ≥_ˇ_pﬁicy_uæ
 "nsCaPﬁicyUæ"

	)

2718 
	#LN_√tsˇ≥_ˇ_pﬁicy_uæ
 "Nësˇ≥ CA Pﬁicy Uæ"

	)

2719 
	#NID_√tsˇ≥_ˇ_pﬁicy_uæ
 76

	)

2720 
	#OBJ_√tsˇ≥_ˇ_pﬁicy_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,8L

	)

2722 
	#SN_√tsˇ≥_s¶_£rvî_«me
 "nsS¶SîvîName"

	)

2723 
	#LN_√tsˇ≥_s¶_£rvî_«me
 "Nësˇ≥ SSL Sîvî Name"

	)

2724 
	#NID_√tsˇ≥_s¶_£rvî_«me
 77

	)

2725 
	#OBJ_√tsˇ≥_s¶_£rvî_«me
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,12L

	)

2727 
	#SN_√tsˇ≥_commít
 "nsCommít"

	)

2728 
	#LN_√tsˇ≥_commít
 "Nësˇ≥ Commít"

	)

2729 
	#NID_√tsˇ≥_commít
 78

	)

2730 
	#OBJ_√tsˇ≥_commít
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,13L

	)

2732 
	#SN_√tsˇ≥_˚π_£quí˚
 "nsCîtSequí˚"

	)

2733 
	#LN_√tsˇ≥_˚π_£quí˚
 "Nësˇ≥ Cîtifiˇã Sequí˚"

	)

2734 
	#NID_√tsˇ≥_˚π_£quí˚
 79

	)

2735 
	#OBJ_√tsˇ≥_˚π_£quí˚
 
OBJ_√tsˇ≥_d©a_ty≥
,5L

	)

2737 
	#SN_ns_sgc
 "nsSGC"

	)

2738 
	#LN_ns_sgc
 "Nësˇ≥ Sîvî G©ed Cry±o"

	)

2739 
	#NID_ns_sgc
 139

	)

2740 
	#OBJ_ns_sgc
 
OBJ_√tsˇ≥
,4L,1L

	)

2742 
	#SN_‹g
 "ORG"

	)

2743 
	#LN_‹g
 "‹g"

	)

2744 
	#NID_‹g
 379

	)

2745 
	#OBJ_‹g
 
OBJ_iso
,3L

	)

2747 
	#SN_dod
 "DOD"

	)

2748 
	#LN_dod
 "dod"

	)

2749 
	#NID_dod
 380

	)

2750 
	#OBJ_dod
 
OBJ_‹g
,6L

	)

2752 
	#SN_ü«
 "IANA"

	)

2753 
	#LN_ü«
 "ü«"

	)

2754 
	#NID_ü«
 381

	)

2755 
	#OBJ_ü«
 
OBJ_dod
,1L

	)

2757 
	#OBJ_öã∫ë
 
OBJ_ü«


	)

2759 
	#SN_Dúe˘‹y
 "dúe˘‹y"

	)

2760 
	#LN_Dúe˘‹y
 "Dúe˘‹y"

	)

2761 
	#NID_Dúe˘‹y
 382

	)

2762 
	#OBJ_Dúe˘‹y
 
OBJ_öã∫ë
,1L

	)

2764 
	#SN_M™agemít
 "mgmt"

	)

2765 
	#LN_M™agemít
 "M™agemít"

	)

2766 
	#NID_M™agemít
 383

	)

2767 
	#OBJ_M™agemít
 
OBJ_öã∫ë
,2L

	)

2769 
	#SN_Ex≥rimíèl
 "ex≥rimíèl"

	)

2770 
	#LN_Ex≥rimíèl
 "Ex≥rimíèl"

	)

2771 
	#NID_Ex≥rimíèl
 384

	)

2772 
	#OBJ_Ex≥rimíèl
 
OBJ_öã∫ë
,3L

	)

2774 
	#SN_Priv©e
 "¥iv©e"

	)

2775 
	#LN_Priv©e
 "Priv©e"

	)

2776 
	#NID_Priv©e
 385

	)

2777 
	#OBJ_Priv©e
 
OBJ_öã∫ë
,4L

	)

2779 
	#SN_Securôy
 "£curôy"

	)

2780 
	#LN_Securôy
 "Securôy"

	)

2781 
	#NID_Securôy
 386

	)

2782 
	#OBJ_Securôy
 
OBJ_öã∫ë
,5L

	)

2784 
	#SN_SNMPv2
 "¢mpv2"

	)

2785 
	#LN_SNMPv2
 "SNMPv2"

	)

2786 
	#NID_SNMPv2
 387

	)

2787 
	#OBJ_SNMPv2
 
OBJ_öã∫ë
,6L

	)

2789 
	#LN_Maû
 "Maû"

	)

2790 
	#NID_Maû
 388

	)

2791 
	#OBJ_Maû
 
OBJ_öã∫ë
,7L

	)

2793 
	#SN_E¡î¥i£s
 "íãΩri£s"

	)

2794 
	#LN_E¡î¥i£s
 "E¡î¥i£s"

	)

2795 
	#NID_E¡î¥i£s
 389

	)

2796 
	#OBJ_E¡î¥i£s
 
OBJ_Priv©e
,1L

	)

2798 
	#SN_dcObje˘
 "dcobje˘"

	)

2799 
	#LN_dcObje˘
 "dcObje˘"

	)

2800 
	#NID_dcObje˘
 390

	)

2801 
	#OBJ_dcObje˘
 
OBJ_E¡î¥i£s
,1466L,344L

	)

2803 
	#SN_mime_mhs
 "mime-mhs"

	)

2804 
	#LN_mime_mhs
 "MIME MHS"

	)

2805 
	#NID_mime_mhs
 504

	)

2806 
	#OBJ_mime_mhs
 
OBJ_Maû
,1L

	)

2808 
	#SN_mime_mhs_hódögs
 "mime-mhs-hódögs"

	)

2809 
	#LN_mime_mhs_hódögs
 "mime-mhs-hódögs"

	)

2810 
	#NID_mime_mhs_hódögs
 505

	)

2811 
	#OBJ_mime_mhs_hódögs
 
OBJ_mime_mhs
,1L

	)

2813 
	#SN_mime_mhs_bodõs
 "mime-mhs-bodõs"

	)

2814 
	#LN_mime_mhs_bodõs
 "mime-mhs-bodõs"

	)

2815 
	#NID_mime_mhs_bodõs
 506

	)

2816 
	#OBJ_mime_mhs_bodõs
 
OBJ_mime_mhs
,2L

	)

2818 
	#SN_id_hex_∑πül_mesßge
 "id-hex-∑πül-mesßge"

	)

2819 
	#LN_id_hex_∑πül_mesßge
 "id-hex-∑πül-mesßge"

	)

2820 
	#NID_id_hex_∑πül_mesßge
 507

	)

2821 
	#OBJ_id_hex_∑πül_mesßge
 
OBJ_mime_mhs_hódögs
,1L

	)

2823 
	#SN_id_hex_mu…ù¨t_mesßge
 "id-hex-mu…ù¨t-mesßge"

	)

2824 
	#LN_id_hex_mu…ù¨t_mesßge
 "id-hex-mu…ù¨t-mesßge"

	)

2825 
	#NID_id_hex_mu…ù¨t_mesßge
 508

	)

2826 
	#OBJ_id_hex_mu…ù¨t_mesßge
 
OBJ_mime_mhs_hódögs
,2L

	)

2828 
	#SN_zlib_com¥essi⁄
 "ZLIB"

	)

2829 
	#LN_zlib_com¥essi⁄
 "zlib com¥essi⁄"

	)

2830 
	#NID_zlib_com¥essi⁄
 125

	)

2831 
	#OBJ_zlib_com¥essi⁄
 
OBJ_id_smime_Æg
,8L

	)

2833 
	#OBJ_cs‹
 2L,16L,840L,1L,101L,3L

	)

2835 
	#OBJ_ni°Alg‹ôhms
 
OBJ_cs‹
,4L

	)

2837 
	#OBJ_´s
 
OBJ_ni°Alg‹ôhms
,1L

	)

2839 
	#SN_´s_128_ecb
 "AES-128-ECB"

	)

2840 
	#LN_´s_128_ecb
 "´s-128-ecb"

	)

2841 
	#NID_´s_128_ecb
 418

	)

2842 
	#OBJ_´s_128_ecb
 
OBJ_´s
,1L

	)

2844 
	#SN_´s_128_cbc
 "AES-128-CBC"

	)

2845 
	#LN_´s_128_cbc
 "´s-128-cbc"

	)

2846 
	#NID_´s_128_cbc
 419

	)

2847 
	#OBJ_´s_128_cbc
 
OBJ_´s
,2L

	)

2849 
	#SN_´s_128_ofb128
 "AES-128-OFB"

	)

2850 
	#LN_´s_128_ofb128
 "´s-128-ofb"

	)

2851 
	#NID_´s_128_ofb128
 420

	)

2852 
	#OBJ_´s_128_ofb128
 
OBJ_´s
,3L

	)

2854 
	#SN_´s_128_cfb128
 "AES-128-CFB"

	)

2855 
	#LN_´s_128_cfb128
 "´s-128-cfb"

	)

2856 
	#NID_´s_128_cfb128
 421

	)

2857 
	#OBJ_´s_128_cfb128
 
OBJ_´s
,4L

	)

2859 
	#SN_id_´s128_wøp
 "id-´s128-wøp"

	)

2860 
	#NID_id_´s128_wøp
 788

	)

2861 
	#OBJ_id_´s128_wøp
 
OBJ_´s
,5L

	)

2863 
	#SN_´s_128_gcm
 "id-´s128-GCM"

	)

2864 
	#LN_´s_128_gcm
 "´s-128-gcm"

	)

2865 
	#NID_´s_128_gcm
 895

	)

2866 
	#OBJ_´s_128_gcm
 
OBJ_´s
,6L

	)

2868 
	#SN_´s_128_ccm
 "id-´s128-CCM"

	)

2869 
	#LN_´s_128_ccm
 "´s-128-ccm"

	)

2870 
	#NID_´s_128_ccm
 896

	)

2871 
	#OBJ_´s_128_ccm
 
OBJ_´s
,7L

	)

2873 
	#SN_id_´s128_wøp_∑d
 "id-´s128-wøp-∑d"

	)

2874 
	#NID_id_´s128_wøp_∑d
 897

	)

2875 
	#OBJ_id_´s128_wøp_∑d
 
OBJ_´s
,8L

	)

2877 
	#SN_´s_192_ecb
 "AES-192-ECB"

	)

2878 
	#LN_´s_192_ecb
 "´s-192-ecb"

	)

2879 
	#NID_´s_192_ecb
 422

	)

2880 
	#OBJ_´s_192_ecb
 
OBJ_´s
,21L

	)

2882 
	#SN_´s_192_cbc
 "AES-192-CBC"

	)

2883 
	#LN_´s_192_cbc
 "´s-192-cbc"

	)

2884 
	#NID_´s_192_cbc
 423

	)

2885 
	#OBJ_´s_192_cbc
 
OBJ_´s
,22L

	)

2887 
	#SN_´s_192_ofb128
 "AES-192-OFB"

	)

2888 
	#LN_´s_192_ofb128
 "´s-192-ofb"

	)

2889 
	#NID_´s_192_ofb128
 424

	)

2890 
	#OBJ_´s_192_ofb128
 
OBJ_´s
,23L

	)

2892 
	#SN_´s_192_cfb128
 "AES-192-CFB"

	)

2893 
	#LN_´s_192_cfb128
 "´s-192-cfb"

	)

2894 
	#NID_´s_192_cfb128
 425

	)

2895 
	#OBJ_´s_192_cfb128
 
OBJ_´s
,24L

	)

2897 
	#SN_id_´s192_wøp
 "id-´s192-wøp"

	)

2898 
	#NID_id_´s192_wøp
 789

	)

2899 
	#OBJ_id_´s192_wøp
 
OBJ_´s
,25L

	)

2901 
	#SN_´s_192_gcm
 "id-´s192-GCM"

	)

2902 
	#LN_´s_192_gcm
 "´s-192-gcm"

	)

2903 
	#NID_´s_192_gcm
 898

	)

2904 
	#OBJ_´s_192_gcm
 
OBJ_´s
,26L

	)

2906 
	#SN_´s_192_ccm
 "id-´s192-CCM"

	)

2907 
	#LN_´s_192_ccm
 "´s-192-ccm"

	)

2908 
	#NID_´s_192_ccm
 899

	)

2909 
	#OBJ_´s_192_ccm
 
OBJ_´s
,27L

	)

2911 
	#SN_id_´s192_wøp_∑d
 "id-´s192-wøp-∑d"

	)

2912 
	#NID_id_´s192_wøp_∑d
 900

	)

2913 
	#OBJ_id_´s192_wøp_∑d
 
OBJ_´s
,28L

	)

2915 
	#SN_´s_256_ecb
 "AES-256-ECB"

	)

2916 
	#LN_´s_256_ecb
 "´s-256-ecb"

	)

2917 
	#NID_´s_256_ecb
 426

	)

2918 
	#OBJ_´s_256_ecb
 
OBJ_´s
,41L

	)

2920 
	#SN_´s_256_cbc
 "AES-256-CBC"

	)

2921 
	#LN_´s_256_cbc
 "´s-256-cbc"

	)

2922 
	#NID_´s_256_cbc
 427

	)

2923 
	#OBJ_´s_256_cbc
 
OBJ_´s
,42L

	)

2925 
	#SN_´s_256_ofb128
 "AES-256-OFB"

	)

2926 
	#LN_´s_256_ofb128
 "´s-256-ofb"

	)

2927 
	#NID_´s_256_ofb128
 428

	)

2928 
	#OBJ_´s_256_ofb128
 
OBJ_´s
,43L

	)

2930 
	#SN_´s_256_cfb128
 "AES-256-CFB"

	)

2931 
	#LN_´s_256_cfb128
 "´s-256-cfb"

	)

2932 
	#NID_´s_256_cfb128
 429

	)

2933 
	#OBJ_´s_256_cfb128
 
OBJ_´s
,44L

	)

2935 
	#SN_id_´s256_wøp
 "id-´s256-wøp"

	)

2936 
	#NID_id_´s256_wøp
 790

	)

2937 
	#OBJ_id_´s256_wøp
 
OBJ_´s
,45L

	)

2939 
	#SN_´s_256_gcm
 "id-´s256-GCM"

	)

2940 
	#LN_´s_256_gcm
 "´s-256-gcm"

	)

2941 
	#NID_´s_256_gcm
 901

	)

2942 
	#OBJ_´s_256_gcm
 
OBJ_´s
,46L

	)

2944 
	#SN_´s_256_ccm
 "id-´s256-CCM"

	)

2945 
	#LN_´s_256_ccm
 "´s-256-ccm"

	)

2946 
	#NID_´s_256_ccm
 902

	)

2947 
	#OBJ_´s_256_ccm
 
OBJ_´s
,47L

	)

2949 
	#SN_id_´s256_wøp_∑d
 "id-´s256-wøp-∑d"

	)

2950 
	#NID_id_´s256_wøp_∑d
 903

	)

2951 
	#OBJ_id_´s256_wøp_∑d
 
OBJ_´s
,48L

	)

2953 
	#SN_´s_128_xts
 "AES-128-XTS"

	)

2954 
	#LN_´s_128_xts
 "´s-128-xts"

	)

2955 
	#NID_´s_128_xts
 913

	)

2956 
	#OBJ_´s_128_xts
 
OBJ_õì_siswg
,0L,1L,1L

	)

2958 
	#SN_´s_256_xts
 "AES-256-XTS"

	)

2959 
	#LN_´s_256_xts
 "´s-256-xts"

	)

2960 
	#NID_´s_256_xts
 914

	)

2961 
	#OBJ_´s_256_xts
 
OBJ_õì_siswg
,0L,1L,2L

	)

2963 
	#SN_´s_128_cfb1
 "AES-128-CFB1"

	)

2964 
	#LN_´s_128_cfb1
 "´s-128-cfb1"

	)

2965 
	#NID_´s_128_cfb1
 650

	)

2967 
	#SN_´s_192_cfb1
 "AES-192-CFB1"

	)

2968 
	#LN_´s_192_cfb1
 "´s-192-cfb1"

	)

2969 
	#NID_´s_192_cfb1
 651

	)

2971 
	#SN_´s_256_cfb1
 "AES-256-CFB1"

	)

2972 
	#LN_´s_256_cfb1
 "´s-256-cfb1"

	)

2973 
	#NID_´s_256_cfb1
 652

	)

2975 
	#SN_´s_128_cfb8
 "AES-128-CFB8"

	)

2976 
	#LN_´s_128_cfb8
 "´s-128-cfb8"

	)

2977 
	#NID_´s_128_cfb8
 653

	)

2979 
	#SN_´s_192_cfb8
 "AES-192-CFB8"

	)

2980 
	#LN_´s_192_cfb8
 "´s-192-cfb8"

	)

2981 
	#NID_´s_192_cfb8
 654

	)

2983 
	#SN_´s_256_cfb8
 "AES-256-CFB8"

	)

2984 
	#LN_´s_256_cfb8
 "´s-256-cfb8"

	)

2985 
	#NID_´s_256_cfb8
 655

	)

2987 
	#SN_´s_128_˘r
 "AES-128-CTR"

	)

2988 
	#LN_´s_128_˘r
 "´s-128-˘r"

	)

2989 
	#NID_´s_128_˘r
 904

	)

2991 
	#SN_´s_192_˘r
 "AES-192-CTR"

	)

2992 
	#LN_´s_192_˘r
 "´s-192-˘r"

	)

2993 
	#NID_´s_192_˘r
 905

	)

2995 
	#SN_´s_256_˘r
 "AES-256-CTR"

	)

2996 
	#LN_´s_256_˘r
 "´s-256-˘r"

	)

2997 
	#NID_´s_256_˘r
 906

	)

2999 
	#SN_´s_128_ocb
 "AES-128-OCB"

	)

3000 
	#LN_´s_128_ocb
 "´s-128-ocb"

	)

3001 
	#NID_´s_128_ocb
 958

	)

3003 
	#SN_´s_192_ocb
 "AES-192-OCB"

	)

3004 
	#LN_´s_192_ocb
 "´s-192-ocb"

	)

3005 
	#NID_´s_192_ocb
 959

	)

3007 
	#SN_´s_256_ocb
 "AES-256-OCB"

	)

3008 
	#LN_´s_256_ocb
 "´s-256-ocb"

	)

3009 
	#NID_´s_256_ocb
 960

	)

3011 
	#SN_des_cfb1
 "DES-CFB1"

	)

3012 
	#LN_des_cfb1
 "des-cfb1"

	)

3013 
	#NID_des_cfb1
 656

	)

3015 
	#SN_des_cfb8
 "DES-CFB8"

	)

3016 
	#LN_des_cfb8
 "des-cfb8"

	)

3017 
	#NID_des_cfb8
 657

	)

3019 
	#SN_des_ede3_cfb1
 "DES-EDE3-CFB1"

	)

3020 
	#LN_des_ede3_cfb1
 "des-ede3-cfb1"

	)

3021 
	#NID_des_ede3_cfb1
 658

	)

3023 
	#SN_des_ede3_cfb8
 "DES-EDE3-CFB8"

	)

3024 
	#LN_des_ede3_cfb8
 "des-ede3-cfb8"

	)

3025 
	#NID_des_ede3_cfb8
 659

	)

3027 
	#OBJ_ni°_hashÆgs
 
OBJ_ni°Alg‹ôhms
,2L

	)

3029 
	#SN_sha256
 "SHA256"

	)

3030 
	#LN_sha256
 "sha256"

	)

3031 
	#NID_sha256
 672

	)

3032 
	#OBJ_sha256
 
OBJ_ni°_hashÆgs
,1L

	)

3034 
	#SN_sha384
 "SHA384"

	)

3035 
	#LN_sha384
 "sha384"

	)

3036 
	#NID_sha384
 673

	)

3037 
	#OBJ_sha384
 
OBJ_ni°_hashÆgs
,2L

	)

3039 
	#SN_sha512
 "SHA512"

	)

3040 
	#LN_sha512
 "sha512"

	)

3041 
	#NID_sha512
 674

	)

3042 
	#OBJ_sha512
 
OBJ_ni°_hashÆgs
,3L

	)

3044 
	#SN_sha224
 "SHA224"

	)

3045 
	#LN_sha224
 "sha224"

	)

3046 
	#NID_sha224
 675

	)

3047 
	#OBJ_sha224
 
OBJ_ni°_hashÆgs
,4L

	)

3049 
	#SN_sha512_224
 "SHA512-224"

	)

3050 
	#LN_sha512_224
 "sha512-224"

	)

3051 
	#NID_sha512_224
 1094

	)

3052 
	#OBJ_sha512_224
 
OBJ_ni°_hashÆgs
,5L

	)

3054 
	#SN_sha512_256
 "SHA512-256"

	)

3055 
	#LN_sha512_256
 "sha512-256"

	)

3056 
	#NID_sha512_256
 1095

	)

3057 
	#OBJ_sha512_256
 
OBJ_ni°_hashÆgs
,6L

	)

3059 
	#SN_sha3_224
 "SHA3-224"

	)

3060 
	#LN_sha3_224
 "sha3-224"

	)

3061 
	#NID_sha3_224
 1096

	)

3062 
	#OBJ_sha3_224
 
OBJ_ni°_hashÆgs
,7L

	)

3064 
	#SN_sha3_256
 "SHA3-256"

	)

3065 
	#LN_sha3_256
 "sha3-256"

	)

3066 
	#NID_sha3_256
 1097

	)

3067 
	#OBJ_sha3_256
 
OBJ_ni°_hashÆgs
,8L

	)

3069 
	#SN_sha3_384
 "SHA3-384"

	)

3070 
	#LN_sha3_384
 "sha3-384"

	)

3071 
	#NID_sha3_384
 1098

	)

3072 
	#OBJ_sha3_384
 
OBJ_ni°_hashÆgs
,9L

	)

3074 
	#SN_sha3_512
 "SHA3-512"

	)

3075 
	#LN_sha3_512
 "sha3-512"

	)

3076 
	#NID_sha3_512
 1099

	)

3077 
	#OBJ_sha3_512
 
OBJ_ni°_hashÆgs
,10L

	)

3079 
	#SN_shake128
 "SHAKE128"

	)

3080 
	#LN_shake128
 "shake128"

	)

3081 
	#NID_shake128
 1100

	)

3082 
	#OBJ_shake128
 
OBJ_ni°_hashÆgs
,11L

	)

3084 
	#SN_shake256
 "SHAKE256"

	)

3085 
	#LN_shake256
 "shake256"

	)

3086 
	#NID_shake256
 1101

	)

3087 
	#OBJ_shake256
 
OBJ_ni°_hashÆgs
,12L

	)

3089 
	#SN_hmac_sha3_224
 "id-hmacWôhSHA3-224"

	)

3090 
	#LN_hmac_sha3_224
 "hmac-sha3-224"

	)

3091 
	#NID_hmac_sha3_224
 1102

	)

3092 
	#OBJ_hmac_sha3_224
 
OBJ_ni°_hashÆgs
,13L

	)

3094 
	#SN_hmac_sha3_256
 "id-hmacWôhSHA3-256"

	)

3095 
	#LN_hmac_sha3_256
 "hmac-sha3-256"

	)

3096 
	#NID_hmac_sha3_256
 1103

	)

3097 
	#OBJ_hmac_sha3_256
 
OBJ_ni°_hashÆgs
,14L

	)

3099 
	#SN_hmac_sha3_384
 "id-hmacWôhSHA3-384"

	)

3100 
	#LN_hmac_sha3_384
 "hmac-sha3-384"

	)

3101 
	#NID_hmac_sha3_384
 1104

	)

3102 
	#OBJ_hmac_sha3_384
 
OBJ_ni°_hashÆgs
,15L

	)

3104 
	#SN_hmac_sha3_512
 "id-hmacWôhSHA3-512"

	)

3105 
	#LN_hmac_sha3_512
 "hmac-sha3-512"

	)

3106 
	#NID_hmac_sha3_512
 1105

	)

3107 
	#OBJ_hmac_sha3_512
 
OBJ_ni°_hashÆgs
,16L

	)

3109 
	#SN_kmac128
 "KMAC128"

	)

3110 
	#LN_kmac128
 "kmac128"

	)

3111 
	#NID_kmac128
 1196

	)

3112 
	#OBJ_kmac128
 
OBJ_ni°_hashÆgs
,19L

	)

3114 
	#SN_kmac256
 "KMAC256"

	)

3115 
	#LN_kmac256
 "kmac256"

	)

3116 
	#NID_kmac256
 1197

	)

3117 
	#OBJ_kmac256
 
OBJ_ni°_hashÆgs
,20L

	)

3119 
	#OBJ_dß_wôh_sha2
 
OBJ_ni°Alg‹ôhms
,3L

	)

3121 
	#SN_dß_wôh_SHA224
 "dß_wôh_SHA224"

	)

3122 
	#NID_dß_wôh_SHA224
 802

	)

3123 
	#OBJ_dß_wôh_SHA224
 
OBJ_dß_wôh_sha2
,1L

	)

3125 
	#SN_dß_wôh_SHA256
 "dß_wôh_SHA256"

	)

3126 
	#NID_dß_wôh_SHA256
 803

	)

3127 
	#OBJ_dß_wôh_SHA256
 
OBJ_dß_wôh_sha2
,2L

	)

3129 
	#OBJ_sigAlgs
 
OBJ_ni°Alg‹ôhms
,3L

	)

3131 
	#SN_dß_wôh_SHA384
 "id-dß-wôh-sha384"

	)

3132 
	#LN_dß_wôh_SHA384
 "dß_wôh_SHA384"

	)

3133 
	#NID_dß_wôh_SHA384
 1106

	)

3134 
	#OBJ_dß_wôh_SHA384
 
OBJ_sigAlgs
,3L

	)

3136 
	#SN_dß_wôh_SHA512
 "id-dß-wôh-sha512"

	)

3137 
	#LN_dß_wôh_SHA512
 "dß_wôh_SHA512"

	)

3138 
	#NID_dß_wôh_SHA512
 1107

	)

3139 
	#OBJ_dß_wôh_SHA512
 
OBJ_sigAlgs
,4L

	)

3141 
	#SN_dß_wôh_SHA3_224
 "id-dß-wôh-sha3-224"

	)

3142 
	#LN_dß_wôh_SHA3_224
 "dß_wôh_SHA3-224"

	)

3143 
	#NID_dß_wôh_SHA3_224
 1108

	)

3144 
	#OBJ_dß_wôh_SHA3_224
 
OBJ_sigAlgs
,5L

	)

3146 
	#SN_dß_wôh_SHA3_256
 "id-dß-wôh-sha3-256"

	)

3147 
	#LN_dß_wôh_SHA3_256
 "dß_wôh_SHA3-256"

	)

3148 
	#NID_dß_wôh_SHA3_256
 1109

	)

3149 
	#OBJ_dß_wôh_SHA3_256
 
OBJ_sigAlgs
,6L

	)

3151 
	#SN_dß_wôh_SHA3_384
 "id-dß-wôh-sha3-384"

	)

3152 
	#LN_dß_wôh_SHA3_384
 "dß_wôh_SHA3-384"

	)

3153 
	#NID_dß_wôh_SHA3_384
 1110

	)

3154 
	#OBJ_dß_wôh_SHA3_384
 
OBJ_sigAlgs
,7L

	)

3156 
	#SN_dß_wôh_SHA3_512
 "id-dß-wôh-sha3-512"

	)

3157 
	#LN_dß_wôh_SHA3_512
 "dß_wôh_SHA3-512"

	)

3158 
	#NID_dß_wôh_SHA3_512
 1111

	)

3159 
	#OBJ_dß_wôh_SHA3_512
 
OBJ_sigAlgs
,8L

	)

3161 
	#SN_ecdß_wôh_SHA3_224
 "id-ecdß-wôh-sha3-224"

	)

3162 
	#LN_ecdß_wôh_SHA3_224
 "ecdß_wôh_SHA3-224"

	)

3163 
	#NID_ecdß_wôh_SHA3_224
 1112

	)

3164 
	#OBJ_ecdß_wôh_SHA3_224
 
OBJ_sigAlgs
,9L

	)

3166 
	#SN_ecdß_wôh_SHA3_256
 "id-ecdß-wôh-sha3-256"

	)

3167 
	#LN_ecdß_wôh_SHA3_256
 "ecdß_wôh_SHA3-256"

	)

3168 
	#NID_ecdß_wôh_SHA3_256
 1113

	)

3169 
	#OBJ_ecdß_wôh_SHA3_256
 
OBJ_sigAlgs
,10L

	)

3171 
	#SN_ecdß_wôh_SHA3_384
 "id-ecdß-wôh-sha3-384"

	)

3172 
	#LN_ecdß_wôh_SHA3_384
 "ecdß_wôh_SHA3-384"

	)

3173 
	#NID_ecdß_wôh_SHA3_384
 1114

	)

3174 
	#OBJ_ecdß_wôh_SHA3_384
 
OBJ_sigAlgs
,11L

	)

3176 
	#SN_ecdß_wôh_SHA3_512
 "id-ecdß-wôh-sha3-512"

	)

3177 
	#LN_ecdß_wôh_SHA3_512
 "ecdß_wôh_SHA3-512"

	)

3178 
	#NID_ecdß_wôh_SHA3_512
 1115

	)

3179 
	#OBJ_ecdß_wôh_SHA3_512
 
OBJ_sigAlgs
,12L

	)

3181 
	#SN_RSA_SHA3_224
 "id-rßsß-pkcs1-v1_5-wôh-sha3-224"

	)

3182 
	#LN_RSA_SHA3_224
 "RSA-SHA3-224"

	)

3183 
	#NID_RSA_SHA3_224
 1116

	)

3184 
	#OBJ_RSA_SHA3_224
 
OBJ_sigAlgs
,13L

	)

3186 
	#SN_RSA_SHA3_256
 "id-rßsß-pkcs1-v1_5-wôh-sha3-256"

	)

3187 
	#LN_RSA_SHA3_256
 "RSA-SHA3-256"

	)

3188 
	#NID_RSA_SHA3_256
 1117

	)

3189 
	#OBJ_RSA_SHA3_256
 
OBJ_sigAlgs
,14L

	)

3191 
	#SN_RSA_SHA3_384
 "id-rßsß-pkcs1-v1_5-wôh-sha3-384"

	)

3192 
	#LN_RSA_SHA3_384
 "RSA-SHA3-384"

	)

3193 
	#NID_RSA_SHA3_384
 1118

	)

3194 
	#OBJ_RSA_SHA3_384
 
OBJ_sigAlgs
,15L

	)

3196 
	#SN_RSA_SHA3_512
 "id-rßsß-pkcs1-v1_5-wôh-sha3-512"

	)

3197 
	#LN_RSA_SHA3_512
 "RSA-SHA3-512"

	)

3198 
	#NID_RSA_SHA3_512
 1119

	)

3199 
	#OBJ_RSA_SHA3_512
 
OBJ_sigAlgs
,16L

	)

3201 
	#SN_hﬁd_ö°ru˘i⁄_code
 "hﬁdIn°ru˘i⁄Code"

	)

3202 
	#LN_hﬁd_ö°ru˘i⁄_code
 "Hﬁd In°ru˘i⁄ Code"

	)

3203 
	#NID_hﬁd_ö°ru˘i⁄_code
 430

	)

3204 
	#OBJ_hﬁd_ö°ru˘i⁄_code
 
OBJ_id_˚
,23L

	)

3206 
	#OBJ_hﬁdIn°ru˘i⁄
 
OBJ_X9_57
,2L

	)

3208 
	#SN_hﬁd_ö°ru˘i⁄_n⁄e
 "hﬁdIn°ru˘i⁄N⁄e"

	)

3209 
	#LN_hﬁd_ö°ru˘i⁄_n⁄e
 "Hﬁd In°ru˘i⁄ N⁄e"

	)

3210 
	#NID_hﬁd_ö°ru˘i⁄_n⁄e
 431

	)

3211 
	#OBJ_hﬁd_ö°ru˘i⁄_n⁄e
 
OBJ_hﬁdIn°ru˘i⁄
,1L

	)

3213 
	#SN_hﬁd_ö°ru˘i⁄_ˇŒ_issuî
 "hﬁdIn°ru˘i⁄CÆlIssuî"

	)

3214 
	#LN_hﬁd_ö°ru˘i⁄_ˇŒ_issuî
 "Hﬁd In°ru˘i⁄ CÆ»Issuî"

	)

3215 
	#NID_hﬁd_ö°ru˘i⁄_ˇŒ_issuî
 432

	)

3216 
	#OBJ_hﬁd_ö°ru˘i⁄_ˇŒ_issuî
 
OBJ_hﬁdIn°ru˘i⁄
,2L

	)

3218 
	#SN_hﬁd_ö°ru˘i⁄_ªje˘
 "hﬁdIn°ru˘i⁄Reje˘"

	)

3219 
	#LN_hﬁd_ö°ru˘i⁄_ªje˘
 "Hﬁd In°ru˘i⁄ Reje˘"

	)

3220 
	#NID_hﬁd_ö°ru˘i⁄_ªje˘
 433

	)

3221 
	#OBJ_hﬁd_ö°ru˘i⁄_ªje˘
 
OBJ_hﬁdIn°ru˘i⁄
,3L

	)

3223 
	#SN_d©a
 "d©a"

	)

3224 
	#NID_d©a
 434

	)

3225 
	#OBJ_d©a
 
OBJ_ôu_t
,9L

	)

3227 
	#SN_pss
 "pss"

	)

3228 
	#NID_pss
 435

	)

3229 
	#OBJ_pss
 
OBJ_d©a
,2342L

	)

3231 
	#SN_u˛
 "u˛"

	)

3232 
	#NID_u˛
 436

	)

3233 
	#OBJ_u˛
 
OBJ_pss
,19200300L

	)

3235 
	#SN_pûŸ
 "pûŸ"

	)

3236 
	#NID_pûŸ
 437

	)

3237 
	#OBJ_pûŸ
 
OBJ_u˛
,100L

	)

3239 
	#LN_pûŸAâribuãTy≥
 "pûŸAâribuãTy≥"

	)

3240 
	#NID_pûŸAâribuãTy≥
 438

	)

3241 
	#OBJ_pûŸAâribuãTy≥
 
OBJ_pûŸ
,1L

	)

3243 
	#LN_pûŸAâribuãSy¡ax
 "pûŸAâribuãSy¡ax"

	)

3244 
	#NID_pûŸAâribuãSy¡ax
 439

	)

3245 
	#OBJ_pûŸAâribuãSy¡ax
 
OBJ_pûŸ
,3L

	)

3247 
	#LN_pûŸObje˘Cœss
 "pûŸObje˘Cœss"

	)

3248 
	#NID_pûŸObje˘Cœss
 440

	)

3249 
	#OBJ_pûŸObje˘Cœss
 
OBJ_pûŸ
,4L

	)

3251 
	#LN_pûŸGroups
 "pûŸGroups"

	)

3252 
	#NID_pûŸGroups
 441

	)

3253 
	#OBJ_pûŸGroups
 
OBJ_pûŸ
,10L

	)

3255 
	#LN_iA5SåögSy¡ax
 "iA5SåögSy¡ax"

	)

3256 
	#NID_iA5SåögSy¡ax
 442

	)

3257 
	#OBJ_iA5SåögSy¡ax
 
OBJ_pûŸAâribuãSy¡ax
,4L

	)

3259 
	#LN_ˇ£Ign‹eIA5SåögSy¡ax
 "ˇ£Ign‹eIA5SåögSy¡ax"

	)

3260 
	#NID_ˇ£Ign‹eIA5SåögSy¡ax
 443

	)

3261 
	#OBJ_ˇ£Ign‹eIA5SåögSy¡ax
 
OBJ_pûŸAâribuãSy¡ax
,5L

	)

3263 
	#LN_pûŸObje˘
 "pûŸObje˘"

	)

3264 
	#NID_pûŸObje˘
 444

	)

3265 
	#OBJ_pûŸObje˘
 
OBJ_pûŸObje˘Cœss
,3L

	)

3267 
	#LN_pûŸPîs⁄
 "pûŸPîs⁄"

	)

3268 
	#NID_pûŸPîs⁄
 445

	)

3269 
	#OBJ_pûŸPîs⁄
 
OBJ_pûŸObje˘Cœss
,4L

	)

3271 
	#SN_accou¡
 "accou¡"

	)

3272 
	#NID_accou¡
 446

	)

3273 
	#OBJ_accou¡
 
OBJ_pûŸObje˘Cœss
,5L

	)

3275 
	#SN_documít
 "documít"

	)

3276 
	#NID_documít
 447

	)

3277 
	#OBJ_documít
 
OBJ_pûŸObje˘Cœss
,6L

	)

3279 
	#SN_room
 "room"

	)

3280 
	#NID_room
 448

	)

3281 
	#OBJ_room
 
OBJ_pûŸObje˘Cœss
,7L

	)

3283 
	#LN_documítSîõs
 "documítSîõs"

	)

3284 
	#NID_documítSîõs
 449

	)

3285 
	#OBJ_documítSîõs
 
OBJ_pûŸObje˘Cœss
,9L

	)

3287 
	#SN_Domaö
 "domaö"

	)

3288 
	#LN_Domaö
 "Domaö"

	)

3289 
	#NID_Domaö
 392

	)

3290 
	#OBJ_Domaö
 
OBJ_pûŸObje˘Cœss
,13L

	)

3292 
	#LN_rFC822loˇlP¨t
 "rFC822loˇlP¨t"

	)

3293 
	#NID_rFC822loˇlP¨t
 450

	)

3294 
	#OBJ_rFC822loˇlP¨t
 
OBJ_pûŸObje˘Cœss
,14L

	)

3296 
	#LN_dNSDomaö
 "dNSDomaö"

	)

3297 
	#NID_dNSDomaö
 451

	)

3298 
	#OBJ_dNSDomaö
 
OBJ_pûŸObje˘Cœss
,15L

	)

3300 
	#LN_domaöRñ©edObje˘
 "domaöRñ©edObje˘"

	)

3301 
	#NID_domaöRñ©edObje˘
 452

	)

3302 
	#OBJ_domaöRñ©edObje˘
 
OBJ_pûŸObje˘Cœss
,17L

	)

3304 
	#LN_‰õndlyCou¡ry
 "‰õndlyCou¡ry"

	)

3305 
	#NID_‰õndlyCou¡ry
 453

	)

3306 
	#OBJ_‰õndlyCou¡ry
 
OBJ_pûŸObje˘Cœss
,18L

	)

3308 
	#LN_sim∂eSecurôyObje˘
 "sim∂eSecurôyObje˘"

	)

3309 
	#NID_sim∂eSecurôyObje˘
 454

	)

3310 
	#OBJ_sim∂eSecurôyObje˘
 
OBJ_pûŸObje˘Cœss
,19L

	)

3312 
	#LN_pûŸOrg™iz©i⁄
 "pûŸOrg™iz©i⁄"

	)

3313 
	#NID_pûŸOrg™iz©i⁄
 455

	)

3314 
	#OBJ_pûŸOrg™iz©i⁄
 
OBJ_pûŸObje˘Cœss
,20L

	)

3316 
	#LN_pûŸDSA
 "pûŸDSA"

	)

3317 
	#NID_pûŸDSA
 456

	)

3318 
	#OBJ_pûŸDSA
 
OBJ_pûŸObje˘Cœss
,21L

	)

3320 
	#LN_quÆôyLabñÀdD©a
 "quÆôyLabñÀdD©a"

	)

3321 
	#NID_quÆôyLabñÀdD©a
 457

	)

3322 
	#OBJ_quÆôyLabñÀdD©a
 
OBJ_pûŸObje˘Cœss
,22L

	)

3324 
	#SN_u£rId
 "UID"

	)

3325 
	#LN_u£rId
 "u£rId"

	)

3326 
	#NID_u£rId
 458

	)

3327 
	#OBJ_u£rId
 
OBJ_pûŸAâribuãTy≥
,1L

	)

3329 
	#LN_ãxtEncodedORAddªss
 "ãxtEncodedORAddªss"

	)

3330 
	#NID_ãxtEncodedORAddªss
 459

	)

3331 
	#OBJ_ãxtEncodedORAddªss
 
OBJ_pûŸAâribuãTy≥
,2L

	)

3333 
	#SN_rfc822Maûbox
 "maû"

	)

3334 
	#LN_rfc822Maûbox
 "rfc822Maûbox"

	)

3335 
	#NID_rfc822Maûbox
 460

	)

3336 
	#OBJ_rfc822Maûbox
 
OBJ_pûŸAâribuãTy≥
,3L

	)

3338 
	#SN_öfo
 "öfo"

	)

3339 
	#NID_öfo
 461

	)

3340 
	#OBJ_öfo
 
OBJ_pûŸAâribuãTy≥
,4L

	)

3342 
	#LN_ÁvourôeDrök
 "ÁvourôeDrök"

	)

3343 
	#NID_ÁvourôeDrök
 462

	)

3344 
	#OBJ_ÁvourôeDrök
 
OBJ_pûŸAâribuãTy≥
,5L

	)

3346 
	#LN_roomNumbî
 "roomNumbî"

	)

3347 
	#NID_roomNumbî
 463

	)

3348 
	#OBJ_roomNumbî
 
OBJ_pûŸAâribuãTy≥
,6L

	)

3350 
	#SN_phŸo
 "phŸo"

	)

3351 
	#NID_phŸo
 464

	)

3352 
	#OBJ_phŸo
 
OBJ_pûŸAâribuãTy≥
,7L

	)

3354 
	#LN_u£rCœss
 "u£rCœss"

	)

3355 
	#NID_u£rCœss
 465

	)

3356 
	#OBJ_u£rCœss
 
OBJ_pûŸAâribuãTy≥
,8L

	)

3358 
	#SN_ho°
 "ho°"

	)

3359 
	#NID_ho°
 466

	)

3360 
	#OBJ_ho°
 
OBJ_pûŸAâribuãTy≥
,9L

	)

3362 
	#SN_m™agî
 "m™agî"

	)

3363 
	#NID_m™agî
 467

	)

3364 
	#OBJ_m™agî
 
OBJ_pûŸAâribuãTy≥
,10L

	)

3366 
	#LN_documítIdítifõr
 "documítIdítifõr"

	)

3367 
	#NID_documítIdítifõr
 468

	)

3368 
	#OBJ_documítIdítifõr
 
OBJ_pûŸAâribuãTy≥
,11L

	)

3370 
	#LN_documítTôÀ
 "documítTôÀ"

	)

3371 
	#NID_documítTôÀ
 469

	)

3372 
	#OBJ_documítTôÀ
 
OBJ_pûŸAâribuãTy≥
,12L

	)

3374 
	#LN_documítVîsi⁄
 "documítVîsi⁄"

	)

3375 
	#NID_documítVîsi⁄
 470

	)

3376 
	#OBJ_documítVîsi⁄
 
OBJ_pûŸAâribuãTy≥
,13L

	)

3378 
	#LN_documítAuth‹
 "documítAuth‹"

	)

3379 
	#NID_documítAuth‹
 471

	)

3380 
	#OBJ_documítAuth‹
 
OBJ_pûŸAâribuãTy≥
,14L

	)

3382 
	#LN_documítLoˇti⁄
 "documítLoˇti⁄"

	)

3383 
	#NID_documítLoˇti⁄
 472

	)

3384 
	#OBJ_documítLoˇti⁄
 
OBJ_pûŸAâribuãTy≥
,15L

	)

3386 
	#LN_homeTñïh⁄eNumbî
 "homeTñïh⁄eNumbî"

	)

3387 
	#NID_homeTñïh⁄eNumbî
 473

	)

3388 
	#OBJ_homeTñïh⁄eNumbî
 
OBJ_pûŸAâribuãTy≥
,20L

	)

3390 
	#SN_£¸ë¨y
 "£¸ë¨y"

	)

3391 
	#NID_£¸ë¨y
 474

	)

3392 
	#OBJ_£¸ë¨y
 
OBJ_pûŸAâribuãTy≥
,21L

	)

3394 
	#LN_ŸhîMaûbox
 "ŸhîMaûbox"

	)

3395 
	#NID_ŸhîMaûbox
 475

	)

3396 
	#OBJ_ŸhîMaûbox
 
OBJ_pûŸAâribuãTy≥
,22L

	)

3398 
	#LN_œ°ModifõdTime
 "œ°ModifõdTime"

	)

3399 
	#NID_œ°ModifõdTime
 476

	)

3400 
	#OBJ_œ°ModifõdTime
 
OBJ_pûŸAâribuãTy≥
,23L

	)

3402 
	#LN_œ°ModifõdBy
 "œ°ModifõdBy"

	)

3403 
	#NID_œ°ModifõdBy
 477

	)

3404 
	#OBJ_œ°ModifõdBy
 
OBJ_pûŸAâribuãTy≥
,24L

	)

3406 
	#SN_domaöComp⁄ít
 "DC"

	)

3407 
	#LN_domaöComp⁄ít
 "domaöComp⁄ít"

	)

3408 
	#NID_domaöComp⁄ít
 391

	)

3409 
	#OBJ_domaöComp⁄ít
 
OBJ_pûŸAâribuãTy≥
,25L

	)

3411 
	#LN_aRec‹d
 "aRec‹d"

	)

3412 
	#NID_aRec‹d
 478

	)

3413 
	#OBJ_aRec‹d
 
OBJ_pûŸAâribuãTy≥
,26L

	)

3415 
	#LN_pûŸAâribuãTy≥27
 "pûŸAâribuãTy≥27"

	)

3416 
	#NID_pûŸAâribuãTy≥27
 479

	)

3417 
	#OBJ_pûŸAâribuãTy≥27
 
OBJ_pûŸAâribuãTy≥
,27L

	)

3419 
	#LN_mXRec‹d
 "mXRec‹d"

	)

3420 
	#NID_mXRec‹d
 480

	)

3421 
	#OBJ_mXRec‹d
 
OBJ_pûŸAâribuãTy≥
,28L

	)

3423 
	#LN_nSRec‹d
 "nSRec‹d"

	)

3424 
	#NID_nSRec‹d
 481

	)

3425 
	#OBJ_nSRec‹d
 
OBJ_pûŸAâribuãTy≥
,29L

	)

3427 
	#LN_sOARec‹d
 "sOARec‹d"

	)

3428 
	#NID_sOARec‹d
 482

	)

3429 
	#OBJ_sOARec‹d
 
OBJ_pûŸAâribuãTy≥
,30L

	)

3431 
	#LN_cNAMERec‹d
 "cNAMERec‹d"

	)

3432 
	#NID_cNAMERec‹d
 483

	)

3433 
	#OBJ_cNAMERec‹d
 
OBJ_pûŸAâribuãTy≥
,31L

	)

3435 
	#LN_assocüãdDomaö
 "assocüãdDomaö"

	)

3436 
	#NID_assocüãdDomaö
 484

	)

3437 
	#OBJ_assocüãdDomaö
 
OBJ_pûŸAâribuãTy≥
,37L

	)

3439 
	#LN_assocüãdName
 "assocüãdName"

	)

3440 
	#NID_assocüãdName
 485

	)

3441 
	#OBJ_assocüãdName
 
OBJ_pûŸAâribuãTy≥
,38L

	)

3443 
	#LN_homePo°ÆAddªss
 "homePo°ÆAddªss"

	)

3444 
	#NID_homePo°ÆAddªss
 486

	)

3445 
	#OBJ_homePo°ÆAddªss
 
OBJ_pûŸAâribuãTy≥
,39L

	)

3447 
	#LN_≥rs⁄ÆTôÀ
 "≥rs⁄ÆTôÀ"

	)

3448 
	#NID_≥rs⁄ÆTôÀ
 487

	)

3449 
	#OBJ_≥rs⁄ÆTôÀ
 
OBJ_pûŸAâribuãTy≥
,40L

	)

3451 
	#LN_mobûeTñïh⁄eNumbî
 "mobûeTñïh⁄eNumbî"

	)

3452 
	#NID_mobûeTñïh⁄eNumbî
 488

	)

3453 
	#OBJ_mobûeTñïh⁄eNumbî
 
OBJ_pûŸAâribuãTy≥
,41L

	)

3455 
	#LN_∑gîTñïh⁄eNumbî
 "∑gîTñïh⁄eNumbî"

	)

3456 
	#NID_∑gîTñïh⁄eNumbî
 489

	)

3457 
	#OBJ_∑gîTñïh⁄eNumbî
 
OBJ_pûŸAâribuãTy≥
,42L

	)

3459 
	#LN_‰õndlyCou¡ryName
 "‰õndlyCou¡ryName"

	)

3460 
	#NID_‰õndlyCou¡ryName
 490

	)

3461 
	#OBJ_‰õndlyCou¡ryName
 
OBJ_pûŸAâribuãTy≥
,43L

	)

3463 
	#SN_uniqueIdítifõr
 "uid"

	)

3464 
	#LN_uniqueIdítifõr
 "uniqueIdítifõr"

	)

3465 
	#NID_uniqueIdítifõr
 102

	)

3466 
	#OBJ_uniqueIdítifõr
 
OBJ_pûŸAâribuãTy≥
,44L

	)

3468 
	#LN_‹g™iz©i⁄ÆSètus
 "‹g™iz©i⁄ÆSètus"

	)

3469 
	#NID_‹g™iz©i⁄ÆSètus
 491

	)

3470 
	#OBJ_‹g™iz©i⁄ÆSètus
 
OBJ_pûŸAâribuãTy≥
,45L

	)

3472 
	#LN_j™ëMaûbox
 "j™ëMaûbox"

	)

3473 
	#NID_j™ëMaûbox
 492

	)

3474 
	#OBJ_j™ëMaûbox
 
OBJ_pûŸAâribuãTy≥
,46L

	)

3476 
	#LN_maûPª„ªn˚O±i⁄
 "maûPª„ªn˚O±i⁄"

	)

3477 
	#NID_maûPª„ªn˚O±i⁄
 493

	)

3478 
	#OBJ_maûPª„ªn˚O±i⁄
 
OBJ_pûŸAâribuãTy≥
,47L

	)

3480 
	#LN_buûdögName
 "buûdögName"

	)

3481 
	#NID_buûdögName
 494

	)

3482 
	#OBJ_buûdögName
 
OBJ_pûŸAâribuãTy≥
,48L

	)

3484 
	#LN_dSAQuÆôy
 "dSAQuÆôy"

	)

3485 
	#NID_dSAQuÆôy
 495

	)

3486 
	#OBJ_dSAQuÆôy
 
OBJ_pûŸAâribuãTy≥
,49L

	)

3488 
	#LN_sögÀLevñQuÆôy
 "sögÀLevñQuÆôy"

	)

3489 
	#NID_sögÀLevñQuÆôy
 496

	)

3490 
	#OBJ_sögÀLevñQuÆôy
 
OBJ_pûŸAâribuãTy≥
,50L

	)

3492 
	#LN_subåìMöimumQuÆôy
 "subåìMöimumQuÆôy"

	)

3493 
	#NID_subåìMöimumQuÆôy
 497

	)

3494 
	#OBJ_subåìMöimumQuÆôy
 
OBJ_pûŸAâribuãTy≥
,51L

	)

3496 
	#LN_subåìMaximumQuÆôy
 "subåìMaximumQuÆôy"

	)

3497 
	#NID_subåìMaximumQuÆôy
 498

	)

3498 
	#OBJ_subåìMaximumQuÆôy
 
OBJ_pûŸAâribuãTy≥
,52L

	)

3500 
	#LN_≥rs⁄ÆSig«tuª
 "≥rs⁄ÆSig«tuª"

	)

3501 
	#NID_≥rs⁄ÆSig«tuª
 499

	)

3502 
	#OBJ_≥rs⁄ÆSig«tuª
 
OBJ_pûŸAâribuãTy≥
,53L

	)

3504 
	#LN_dITRedúe˘
 "dITRedúe˘"

	)

3505 
	#NID_dITRedúe˘
 500

	)

3506 
	#OBJ_dITRedúe˘
 
OBJ_pûŸAâribuãTy≥
,54L

	)

3508 
	#SN_audio
 "audio"

	)

3509 
	#NID_audio
 501

	)

3510 
	#OBJ_audio
 
OBJ_pûŸAâribuãTy≥
,55L

	)

3512 
	#LN_documítPublishî
 "documítPublishî"

	)

3513 
	#NID_documítPublishî
 502

	)

3514 
	#OBJ_documítPublishî
 
OBJ_pûŸAâribuãTy≥
,56L

	)

3516 
	#SN_id_£t
 "id-£t"

	)

3517 
	#LN_id_£t
 "Secuª EÀ˘r⁄i¯Tønß˘i⁄s"

	)

3518 
	#NID_id_£t
 512

	)

3519 
	#OBJ_id_£t
 
OBJ_öã∫©i⁄Æ_‹g™iz©i⁄s
,42L

	)

3521 
	#SN_£t_˘y≥
 "£t-˘y≥"

	)

3522 
	#LN_£t_˘y≥
 "c⁄ã¡Åy≥s"

	)

3523 
	#NID_£t_˘y≥
 513

	)

3524 
	#OBJ_£t_˘y≥
 
OBJ_id_£t
,0L

	)

3526 
	#SN_£t_msgExt
 "£t-msgExt"

	)

3527 
	#LN_£t_msgExt
 "mesßgêexãnsi⁄s"

	)

3528 
	#NID_£t_msgExt
 514

	)

3529 
	#OBJ_£t_msgExt
 
OBJ_id_£t
,1L

	)

3531 
	#SN_£t_©å
 "£t-©å"

	)

3532 
	#NID_£t_©å
 515

	)

3533 
	#OBJ_£t_©å
 
OBJ_id_£t
,3L

	)

3535 
	#SN_£t_pﬁicy
 "£t-pﬁicy"

	)

3536 
	#NID_£t_pﬁicy
 516

	)

3537 
	#OBJ_£t_pﬁicy
 
OBJ_id_£t
,5L

	)

3539 
	#SN_£t_˚πExt
 "£t-˚πExt"

	)

3540 
	#LN_£t_˚πExt
 "˚πifiˇãÉxãnsi⁄s"

	)

3541 
	#NID_£t_˚πExt
 517

	)

3542 
	#OBJ_£t_˚πExt
 
OBJ_id_£t
,7L

	)

3544 
	#SN_£t_bønd
 "£t-bønd"

	)

3545 
	#NID_£t_bønd
 518

	)

3546 
	#OBJ_£t_bønd
 
OBJ_id_£t
,8L

	)

3548 
	#SN_£t˘_PAND©a
 "£t˘-PAND©a"

	)

3549 
	#NID_£t˘_PAND©a
 519

	)

3550 
	#OBJ_£t˘_PAND©a
 
OBJ_£t_˘y≥
,0L

	)

3552 
	#SN_£t˘_PANTokí
 "£t˘-PANTokí"

	)

3553 
	#NID_£t˘_PANTokí
 520

	)

3554 
	#OBJ_£t˘_PANTokí
 
OBJ_£t_˘y≥
,1L

	)

3556 
	#SN_£t˘_PANO∆y
 "£t˘-PANO∆y"

	)

3557 
	#NID_£t˘_PANO∆y
 521

	)

3558 
	#OBJ_£t˘_PANO∆y
 
OBJ_£t_˘y≥
,2L

	)

3560 
	#SN_£t˘_OID©a
 "£t˘-OID©a"

	)

3561 
	#NID_£t˘_OID©a
 522

	)

3562 
	#OBJ_£t˘_OID©a
 
OBJ_£t_˘y≥
,3L

	)

3564 
	#SN_£t˘_PI
 "£t˘-PI"

	)

3565 
	#NID_£t˘_PI
 523

	)

3566 
	#OBJ_£t˘_PI
 
OBJ_£t_˘y≥
,4L

	)

3568 
	#SN_£t˘_PID©a
 "£t˘-PID©a"

	)

3569 
	#NID_£t˘_PID©a
 524

	)

3570 
	#OBJ_£t˘_PID©a
 
OBJ_£t_˘y≥
,5L

	)

3572 
	#SN_£t˘_PID©aUnsig√d
 "£t˘-PID©aUnsig√d"

	)

3573 
	#NID_£t˘_PID©aUnsig√d
 525

	)

3574 
	#OBJ_£t˘_PID©aUnsig√d
 
OBJ_£t_˘y≥
,6L

	)

3576 
	#SN_£t˘_HODI≈ut
 "£t˘-HODI≈ut"

	)

3577 
	#NID_£t˘_HODI≈ut
 526

	)

3578 
	#OBJ_£t˘_HODI≈ut
 
OBJ_£t_˘y≥
,7L

	)

3580 
	#SN_£t˘_AuthResBaggage
 "£t˘-AuthResBaggage"

	)

3581 
	#NID_£t˘_AuthResBaggage
 527

	)

3582 
	#OBJ_£t˘_AuthResBaggage
 
OBJ_£t_˘y≥
,8L

	)

3584 
	#SN_£t˘_AuthRevReqBaggage
 "£t˘-AuthRevReqBaggage"

	)

3585 
	#NID_£t˘_AuthRevReqBaggage
 528

	)

3586 
	#OBJ_£t˘_AuthRevReqBaggage
 
OBJ_£t_˘y≥
,9L

	)

3588 
	#SN_£t˘_AuthRevResBaggage
 "£t˘-AuthRevResBaggage"

	)

3589 
	#NID_£t˘_AuthRevResBaggage
 529

	)

3590 
	#OBJ_£t˘_AuthRevResBaggage
 
OBJ_£t_˘y≥
,10L

	)

3592 
	#SN_£t˘_C≠TokíSeq
 "£t˘-C≠TokíSeq"

	)

3593 
	#NID_£t˘_C≠TokíSeq
 530

	)

3594 
	#OBJ_£t˘_C≠TokíSeq
 
OBJ_£t_˘y≥
,11L

	)

3596 
	#SN_£t˘_PInôResD©a
 "£t˘-PInôResD©a"

	)

3597 
	#NID_£t˘_PInôResD©a
 531

	)

3598 
	#OBJ_£t˘_PInôResD©a
 
OBJ_£t_˘y≥
,12L

	)

3600 
	#SN_£t˘_PI_TBS
 "£t˘-PI-TBS"

	)

3601 
	#NID_£t˘_PI_TBS
 532

	)

3602 
	#OBJ_£t˘_PI_TBS
 
OBJ_£t_˘y≥
,13L

	)

3604 
	#SN_£t˘_PResD©a
 "£t˘-PResD©a"

	)

3605 
	#NID_£t˘_PResD©a
 533

	)

3606 
	#OBJ_£t˘_PResD©a
 
OBJ_£t_˘y≥
,14L

	)

3608 
	#SN_£t˘_AuthReqTBS
 "£t˘-AuthReqTBS"

	)

3609 
	#NID_£t˘_AuthReqTBS
 534

	)

3610 
	#OBJ_£t˘_AuthReqTBS
 
OBJ_£t_˘y≥
,16L

	)

3612 
	#SN_£t˘_AuthResTBS
 "£t˘-AuthResTBS"

	)

3613 
	#NID_£t˘_AuthResTBS
 535

	)

3614 
	#OBJ_£t˘_AuthResTBS
 
OBJ_£t_˘y≥
,17L

	)

3616 
	#SN_£t˘_AuthResTBSX
 "£t˘-AuthResTBSX"

	)

3617 
	#NID_£t˘_AuthResTBSX
 536

	)

3618 
	#OBJ_£t˘_AuthResTBSX
 
OBJ_£t_˘y≥
,18L

	)

3620 
	#SN_£t˘_AuthTokíTBS
 "£t˘-AuthTokíTBS"

	)

3621 
	#NID_£t˘_AuthTokíTBS
 537

	)

3622 
	#OBJ_£t˘_AuthTokíTBS
 
OBJ_£t_˘y≥
,19L

	)

3624 
	#SN_£t˘_C≠TokíD©a
 "£t˘-C≠TokíD©a"

	)

3625 
	#NID_£t˘_C≠TokíD©a
 538

	)

3626 
	#OBJ_£t˘_C≠TokíD©a
 
OBJ_£t_˘y≥
,20L

	)

3628 
	#SN_£t˘_C≠TokíTBS
 "£t˘-C≠TokíTBS"

	)

3629 
	#NID_£t˘_C≠TokíTBS
 539

	)

3630 
	#OBJ_£t˘_C≠TokíTBS
 
OBJ_£t_˘y≥
,21L

	)

3632 
	#SN_£t˘_AcqC¨dCodeMsg
 "£t˘-AcqC¨dCodeMsg"

	)

3633 
	#NID_£t˘_AcqC¨dCodeMsg
 540

	)

3634 
	#OBJ_£t˘_AcqC¨dCodeMsg
 
OBJ_£t_˘y≥
,22L

	)

3636 
	#SN_£t˘_AuthRevReqTBS
 "£t˘-AuthRevReqTBS"

	)

3637 
	#NID_£t˘_AuthRevReqTBS
 541

	)

3638 
	#OBJ_£t˘_AuthRevReqTBS
 
OBJ_£t_˘y≥
,23L

	)

3640 
	#SN_£t˘_AuthRevResD©a
 "£t˘-AuthRevResD©a"

	)

3641 
	#NID_£t˘_AuthRevResD©a
 542

	)

3642 
	#OBJ_£t˘_AuthRevResD©a
 
OBJ_£t_˘y≥
,24L

	)

3644 
	#SN_£t˘_AuthRevResTBS
 "£t˘-AuthRevResTBS"

	)

3645 
	#NID_£t˘_AuthRevResTBS
 543

	)

3646 
	#OBJ_£t˘_AuthRevResTBS
 
OBJ_£t_˘y≥
,25L

	)

3648 
	#SN_£t˘_C≠ReqTBS
 "£t˘-C≠ReqTBS"

	)

3649 
	#NID_£t˘_C≠ReqTBS
 544

	)

3650 
	#OBJ_£t˘_C≠ReqTBS
 
OBJ_£t_˘y≥
,26L

	)

3652 
	#SN_£t˘_C≠ReqTBSX
 "£t˘-C≠ReqTBSX"

	)

3653 
	#NID_£t˘_C≠ReqTBSX
 545

	)

3654 
	#OBJ_£t˘_C≠ReqTBSX
 
OBJ_£t_˘y≥
,27L

	)

3656 
	#SN_£t˘_C≠ResD©a
 "£t˘-C≠ResD©a"

	)

3657 
	#NID_£t˘_C≠ResD©a
 546

	)

3658 
	#OBJ_£t˘_C≠ResD©a
 
OBJ_£t_˘y≥
,28L

	)

3660 
	#SN_£t˘_C≠RevReqTBS
 "£t˘-C≠RevReqTBS"

	)

3661 
	#NID_£t˘_C≠RevReqTBS
 547

	)

3662 
	#OBJ_£t˘_C≠RevReqTBS
 
OBJ_£t_˘y≥
,29L

	)

3664 
	#SN_£t˘_C≠RevReqTBSX
 "£t˘-C≠RevReqTBSX"

	)

3665 
	#NID_£t˘_C≠RevReqTBSX
 548

	)

3666 
	#OBJ_£t˘_C≠RevReqTBSX
 
OBJ_£t_˘y≥
,30L

	)

3668 
	#SN_£t˘_C≠RevResD©a
 "£t˘-C≠RevResD©a"

	)

3669 
	#NID_£t˘_C≠RevResD©a
 549

	)

3670 
	#OBJ_£t˘_C≠RevResD©a
 
OBJ_£t_˘y≥
,31L

	)

3672 
	#SN_£t˘_CªdReqTBS
 "£t˘-CªdReqTBS"

	)

3673 
	#NID_£t˘_CªdReqTBS
 550

	)

3674 
	#OBJ_£t˘_CªdReqTBS
 
OBJ_£t_˘y≥
,32L

	)

3676 
	#SN_£t˘_CªdReqTBSX
 "£t˘-CªdReqTBSX"

	)

3677 
	#NID_£t˘_CªdReqTBSX
 551

	)

3678 
	#OBJ_£t˘_CªdReqTBSX
 
OBJ_£t_˘y≥
,33L

	)

3680 
	#SN_£t˘_CªdResD©a
 "£t˘-CªdResD©a"

	)

3681 
	#NID_£t˘_CªdResD©a
 552

	)

3682 
	#OBJ_£t˘_CªdResD©a
 
OBJ_£t_˘y≥
,34L

	)

3684 
	#SN_£t˘_CªdRevReqTBS
 "£t˘-CªdRevReqTBS"

	)

3685 
	#NID_£t˘_CªdRevReqTBS
 553

	)

3686 
	#OBJ_£t˘_CªdRevReqTBS
 
OBJ_£t_˘y≥
,35L

	)

3688 
	#SN_£t˘_CªdRevReqTBSX
 "£t˘-CªdRevReqTBSX"

	)

3689 
	#NID_£t˘_CªdRevReqTBSX
 554

	)

3690 
	#OBJ_£t˘_CªdRevReqTBSX
 
OBJ_£t_˘y≥
,36L

	)

3692 
	#SN_£t˘_CªdRevResD©a
 "£t˘-CªdRevResD©a"

	)

3693 
	#NID_£t˘_CªdRevResD©a
 555

	)

3694 
	#OBJ_£t˘_CªdRevResD©a
 
OBJ_£t_˘y≥
,37L

	)

3696 
	#SN_£t˘_PCîtReqD©a
 "£t˘-PCîtReqD©a"

	)

3697 
	#NID_£t˘_PCîtReqD©a
 556

	)

3698 
	#OBJ_£t˘_PCîtReqD©a
 
OBJ_£t_˘y≥
,38L

	)

3700 
	#SN_£t˘_PCîtResTBS
 "£t˘-PCîtResTBS"

	)

3701 
	#NID_£t˘_PCîtResTBS
 557

	)

3702 
	#OBJ_£t˘_PCîtResTBS
 
OBJ_£t_˘y≥
,39L

	)

3704 
	#SN_£t˘_B©chAdmöReqD©a
 "£t˘-B©chAdmöReqD©a"

	)

3705 
	#NID_£t˘_B©chAdmöReqD©a
 558

	)

3706 
	#OBJ_£t˘_B©chAdmöReqD©a
 
OBJ_£t_˘y≥
,40L

	)

3708 
	#SN_£t˘_B©chAdmöResD©a
 "£t˘-B©chAdmöResD©a"

	)

3709 
	#NID_£t˘_B©chAdmöResD©a
 559

	)

3710 
	#OBJ_£t˘_B©chAdmöResD©a
 
OBJ_£t_˘y≥
,41L

	)

3712 
	#SN_£t˘_C¨dCInôResTBS
 "£t˘-C¨dCInôResTBS"

	)

3713 
	#NID_£t˘_C¨dCInôResTBS
 560

	)

3714 
	#OBJ_£t˘_C¨dCInôResTBS
 
OBJ_£t_˘y≥
,42L

	)

3716 
	#SN_£t˘_MeAqCInôResTBS
 "£t˘-MeAqCInôResTBS"

	)

3717 
	#NID_£t˘_MeAqCInôResTBS
 561

	)

3718 
	#OBJ_£t˘_MeAqCInôResTBS
 
OBJ_£t_˘y≥
,43L

	)

3720 
	#SN_£t˘_RegF‹mResTBS
 "£t˘-RegF‹mResTBS"

	)

3721 
	#NID_£t˘_RegF‹mResTBS
 562

	)

3722 
	#OBJ_£t˘_RegF‹mResTBS
 
OBJ_£t_˘y≥
,44L

	)

3724 
	#SN_£t˘_CîtReqD©a
 "£t˘-CîtReqD©a"

	)

3725 
	#NID_£t˘_CîtReqD©a
 563

	)

3726 
	#OBJ_£t˘_CîtReqD©a
 
OBJ_£t_˘y≥
,45L

	)

3728 
	#SN_£t˘_CîtReqTBS
 "£t˘-CîtReqTBS"

	)

3729 
	#NID_£t˘_CîtReqTBS
 564

	)

3730 
	#OBJ_£t˘_CîtReqTBS
 
OBJ_£t_˘y≥
,46L

	)

3732 
	#SN_£t˘_CîtResD©a
 "£t˘-CîtResD©a"

	)

3733 
	#NID_£t˘_CîtResD©a
 565

	)

3734 
	#OBJ_£t˘_CîtResD©a
 
OBJ_£t_˘y≥
,47L

	)

3736 
	#SN_£t˘_CîtInqReqTBS
 "£t˘-CîtInqReqTBS"

	)

3737 
	#NID_£t˘_CîtInqReqTBS
 566

	)

3738 
	#OBJ_£t˘_CîtInqReqTBS
 
OBJ_£t_˘y≥
,48L

	)

3740 
	#SN_£t˘_Eº‹TBS
 "£t˘-Eº‹TBS"

	)

3741 
	#NID_£t˘_Eº‹TBS
 567

	)

3742 
	#OBJ_£t˘_Eº‹TBS
 
OBJ_£t_˘y≥
,49L

	)

3744 
	#SN_£t˘_PIDuÆSig√dTBE
 "£t˘-PIDuÆSig√dTBE"

	)

3745 
	#NID_£t˘_PIDuÆSig√dTBE
 568

	)

3746 
	#OBJ_£t˘_PIDuÆSig√dTBE
 
OBJ_£t_˘y≥
,50L

	)

3748 
	#SN_£t˘_PIUnsig√dTBE
 "£t˘-PIUnsig√dTBE"

	)

3749 
	#NID_£t˘_PIUnsig√dTBE
 569

	)

3750 
	#OBJ_£t˘_PIUnsig√dTBE
 
OBJ_£t_˘y≥
,51L

	)

3752 
	#SN_£t˘_AuthReqTBE
 "£t˘-AuthReqTBE"

	)

3753 
	#NID_£t˘_AuthReqTBE
 570

	)

3754 
	#OBJ_£t˘_AuthReqTBE
 
OBJ_£t_˘y≥
,52L

	)

3756 
	#SN_£t˘_AuthResTBE
 "£t˘-AuthResTBE"

	)

3757 
	#NID_£t˘_AuthResTBE
 571

	)

3758 
	#OBJ_£t˘_AuthResTBE
 
OBJ_£t_˘y≥
,53L

	)

3760 
	#SN_£t˘_AuthResTBEX
 "£t˘-AuthResTBEX"

	)

3761 
	#NID_£t˘_AuthResTBEX
 572

	)

3762 
	#OBJ_£t˘_AuthResTBEX
 
OBJ_£t_˘y≥
,54L

	)

3764 
	#SN_£t˘_AuthTokíTBE
 "£t˘-AuthTokíTBE"

	)

3765 
	#NID_£t˘_AuthTokíTBE
 573

	)

3766 
	#OBJ_£t˘_AuthTokíTBE
 
OBJ_£t_˘y≥
,55L

	)

3768 
	#SN_£t˘_C≠TokíTBE
 "£t˘-C≠TokíTBE"

	)

3769 
	#NID_£t˘_C≠TokíTBE
 574

	)

3770 
	#OBJ_£t˘_C≠TokíTBE
 
OBJ_£t_˘y≥
,56L

	)

3772 
	#SN_£t˘_C≠TokíTBEX
 "£t˘-C≠TokíTBEX"

	)

3773 
	#NID_£t˘_C≠TokíTBEX
 575

	)

3774 
	#OBJ_£t˘_C≠TokíTBEX
 
OBJ_£t_˘y≥
,57L

	)

3776 
	#SN_£t˘_AcqC¨dCodeMsgTBE
 "£t˘-AcqC¨dCodeMsgTBE"

	)

3777 
	#NID_£t˘_AcqC¨dCodeMsgTBE
 576

	)

3778 
	#OBJ_£t˘_AcqC¨dCodeMsgTBE
 
OBJ_£t_˘y≥
,58L

	)

3780 
	#SN_£t˘_AuthRevReqTBE
 "£t˘-AuthRevReqTBE"

	)

3781 
	#NID_£t˘_AuthRevReqTBE
 577

	)

3782 
	#OBJ_£t˘_AuthRevReqTBE
 
OBJ_£t_˘y≥
,59L

	)

3784 
	#SN_£t˘_AuthRevResTBE
 "£t˘-AuthRevResTBE"

	)

3785 
	#NID_£t˘_AuthRevResTBE
 578

	)

3786 
	#OBJ_£t˘_AuthRevResTBE
 
OBJ_£t_˘y≥
,60L

	)

3788 
	#SN_£t˘_AuthRevResTBEB
 "£t˘-AuthRevResTBEB"

	)

3789 
	#NID_£t˘_AuthRevResTBEB
 579

	)

3790 
	#OBJ_£t˘_AuthRevResTBEB
 
OBJ_£t_˘y≥
,61L

	)

3792 
	#SN_£t˘_C≠ReqTBE
 "£t˘-C≠ReqTBE"

	)

3793 
	#NID_£t˘_C≠ReqTBE
 580

	)

3794 
	#OBJ_£t˘_C≠ReqTBE
 
OBJ_£t_˘y≥
,62L

	)

3796 
	#SN_£t˘_C≠ReqTBEX
 "£t˘-C≠ReqTBEX"

	)

3797 
	#NID_£t˘_C≠ReqTBEX
 581

	)

3798 
	#OBJ_£t˘_C≠ReqTBEX
 
OBJ_£t_˘y≥
,63L

	)

3800 
	#SN_£t˘_C≠ResTBE
 "£t˘-C≠ResTBE"

	)

3801 
	#NID_£t˘_C≠ResTBE
 582

	)

3802 
	#OBJ_£t˘_C≠ResTBE
 
OBJ_£t_˘y≥
,64L

	)

3804 
	#SN_£t˘_C≠RevReqTBE
 "£t˘-C≠RevReqTBE"

	)

3805 
	#NID_£t˘_C≠RevReqTBE
 583

	)

3806 
	#OBJ_£t˘_C≠RevReqTBE
 
OBJ_£t_˘y≥
,65L

	)

3808 
	#SN_£t˘_C≠RevReqTBEX
 "£t˘-C≠RevReqTBEX"

	)

3809 
	#NID_£t˘_C≠RevReqTBEX
 584

	)

3810 
	#OBJ_£t˘_C≠RevReqTBEX
 
OBJ_£t_˘y≥
,66L

	)

3812 
	#SN_£t˘_C≠RevResTBE
 "£t˘-C≠RevResTBE"

	)

3813 
	#NID_£t˘_C≠RevResTBE
 585

	)

3814 
	#OBJ_£t˘_C≠RevResTBE
 
OBJ_£t_˘y≥
,67L

	)

3816 
	#SN_£t˘_CªdReqTBE
 "£t˘-CªdReqTBE"

	)

3817 
	#NID_£t˘_CªdReqTBE
 586

	)

3818 
	#OBJ_£t˘_CªdReqTBE
 
OBJ_£t_˘y≥
,68L

	)

3820 
	#SN_£t˘_CªdReqTBEX
 "£t˘-CªdReqTBEX"

	)

3821 
	#NID_£t˘_CªdReqTBEX
 587

	)

3822 
	#OBJ_£t˘_CªdReqTBEX
 
OBJ_£t_˘y≥
,69L

	)

3824 
	#SN_£t˘_CªdResTBE
 "£t˘-CªdResTBE"

	)

3825 
	#NID_£t˘_CªdResTBE
 588

	)

3826 
	#OBJ_£t˘_CªdResTBE
 
OBJ_£t_˘y≥
,70L

	)

3828 
	#SN_£t˘_CªdRevReqTBE
 "£t˘-CªdRevReqTBE"

	)

3829 
	#NID_£t˘_CªdRevReqTBE
 589

	)

3830 
	#OBJ_£t˘_CªdRevReqTBE
 
OBJ_£t_˘y≥
,71L

	)

3832 
	#SN_£t˘_CªdRevReqTBEX
 "£t˘-CªdRevReqTBEX"

	)

3833 
	#NID_£t˘_CªdRevReqTBEX
 590

	)

3834 
	#OBJ_£t˘_CªdRevReqTBEX
 
OBJ_£t_˘y≥
,72L

	)

3836 
	#SN_£t˘_CªdRevResTBE
 "£t˘-CªdRevResTBE"

	)

3837 
	#NID_£t˘_CªdRevResTBE
 591

	)

3838 
	#OBJ_£t˘_CªdRevResTBE
 
OBJ_£t_˘y≥
,73L

	)

3840 
	#SN_£t˘_B©chAdmöReqTBE
 "£t˘-B©chAdmöReqTBE"

	)

3841 
	#NID_£t˘_B©chAdmöReqTBE
 592

	)

3842 
	#OBJ_£t˘_B©chAdmöReqTBE
 
OBJ_£t_˘y≥
,74L

	)

3844 
	#SN_£t˘_B©chAdmöResTBE
 "£t˘-B©chAdmöResTBE"

	)

3845 
	#NID_£t˘_B©chAdmöResTBE
 593

	)

3846 
	#OBJ_£t˘_B©chAdmöResTBE
 
OBJ_£t_˘y≥
,75L

	)

3848 
	#SN_£t˘_RegF‹mReqTBE
 "£t˘-RegF‹mReqTBE"

	)

3849 
	#NID_£t˘_RegF‹mReqTBE
 594

	)

3850 
	#OBJ_£t˘_RegF‹mReqTBE
 
OBJ_£t_˘y≥
,76L

	)

3852 
	#SN_£t˘_CîtReqTBE
 "£t˘-CîtReqTBE"

	)

3853 
	#NID_£t˘_CîtReqTBE
 595

	)

3854 
	#OBJ_£t˘_CîtReqTBE
 
OBJ_£t_˘y≥
,77L

	)

3856 
	#SN_£t˘_CîtReqTBEX
 "£t˘-CîtReqTBEX"

	)

3857 
	#NID_£t˘_CîtReqTBEX
 596

	)

3858 
	#OBJ_£t˘_CîtReqTBEX
 
OBJ_£t_˘y≥
,78L

	)

3860 
	#SN_£t˘_CîtResTBE
 "£t˘-CîtResTBE"

	)

3861 
	#NID_£t˘_CîtResTBE
 597

	)

3862 
	#OBJ_£t˘_CîtResTBE
 
OBJ_£t_˘y≥
,79L

	)

3864 
	#SN_£t˘_CRLNŸifiˇti⁄TBS
 "£t˘-CRLNŸifiˇti⁄TBS"

	)

3865 
	#NID_£t˘_CRLNŸifiˇti⁄TBS
 598

	)

3866 
	#OBJ_£t˘_CRLNŸifiˇti⁄TBS
 
OBJ_£t_˘y≥
,80L

	)

3868 
	#SN_£t˘_CRLNŸifiˇti⁄ResTBS
 "£t˘-CRLNŸifiˇti⁄ResTBS"

	)

3869 
	#NID_£t˘_CRLNŸifiˇti⁄ResTBS
 599

	)

3870 
	#OBJ_£t˘_CRLNŸifiˇti⁄ResTBS
 
OBJ_£t_˘y≥
,81L

	)

3872 
	#SN_£t˘_BCIDi°ributi⁄TBS
 "£t˘-BCIDi°ributi⁄TBS"

	)

3873 
	#NID_£t˘_BCIDi°ributi⁄TBS
 600

	)

3874 
	#OBJ_£t˘_BCIDi°ributi⁄TBS
 
OBJ_£t_˘y≥
,82L

	)

3876 
	#SN_£ãxt_gíCry±
 "£ãxt-gíCry±"

	)

3877 
	#LN_£ãxt_gíCry±
 "gíîi¯¸y±ogøm"

	)

3878 
	#NID_£ãxt_gíCry±
 601

	)

3879 
	#OBJ_£ãxt_gíCry±
 
OBJ_£t_msgExt
,1L

	)

3881 
	#SN_£ãxt_miAuth
 "£ãxt-miAuth"

	)

3882 
	#LN_£ãxt_miAuth
 "mîch™àöôüãdáuth"

	)

3883 
	#NID_£ãxt_miAuth
 602

	)

3884 
	#OBJ_£ãxt_miAuth
 
OBJ_£t_msgExt
,3L

	)

3886 
	#SN_£ãxt_pöSecuª
 "£ãxt-pöSecuª"

	)

3887 
	#NID_£ãxt_pöSecuª
 603

	)

3888 
	#OBJ_£ãxt_pöSecuª
 
OBJ_£t_msgExt
,4L

	)

3890 
	#SN_£ãxt_pöAny
 "£ãxt-pöAny"

	)

3891 
	#NID_£ãxt_pöAny
 604

	)

3892 
	#OBJ_£ãxt_pöAny
 
OBJ_£t_msgExt
,5L

	)

3894 
	#SN_£ãxt_åack2
 "£ãxt-åack2"

	)

3895 
	#NID_£ãxt_åack2
 605

	)

3896 
	#OBJ_£ãxt_åack2
 
OBJ_£t_msgExt
,7L

	)

3898 
	#SN_£ãxt_cv
 "£ãxt-cv"

	)

3899 
	#LN_£ãxt_cv
 "addôi⁄Æ vîifiˇti⁄"

	)

3900 
	#NID_£ãxt_cv
 606

	)

3901 
	#OBJ_£ãxt_cv
 
OBJ_£t_msgExt
,8L

	)

3903 
	#SN_£t_pﬁicy_roŸ
 "£t-pﬁicy-roŸ"

	)

3904 
	#NID_£t_pﬁicy_roŸ
 607

	)

3905 
	#OBJ_£t_pﬁicy_roŸ
 
OBJ_£t_pﬁicy
,0L

	)

3907 
	#SN_£tCext_hashedRoŸ
 "£tCext-hashedRoŸ"

	)

3908 
	#NID_£tCext_hashedRoŸ
 608

	)

3909 
	#OBJ_£tCext_hashedRoŸ
 
OBJ_£t_˚πExt
,0L

	)

3911 
	#SN_£tCext_˚πTy≥
 "£tCext-˚πTy≥"

	)

3912 
	#NID_£tCext_˚πTy≥
 609

	)

3913 
	#OBJ_£tCext_˚πTy≥
 
OBJ_£t_˚πExt
,1L

	)

3915 
	#SN_£tCext_mîchD©a
 "£tCext-mîchD©a"

	)

3916 
	#NID_£tCext_mîchD©a
 610

	)

3917 
	#OBJ_£tCext_mîchD©a
 
OBJ_£t_˚πExt
,2L

	)

3919 
	#SN_£tCext_cCîtRequúed
 "£tCext-cCîtRequúed"

	)

3920 
	#NID_£tCext_cCîtRequúed
 611

	)

3921 
	#OBJ_£tCext_cCîtRequúed
 
OBJ_£t_˚πExt
,3L

	)

3923 
	#SN_£tCext_tu¬ñög
 "£tCext-tu¬ñög"

	)

3924 
	#NID_£tCext_tu¬ñög
 612

	)

3925 
	#OBJ_£tCext_tu¬ñög
 
OBJ_£t_˚πExt
,4L

	)

3927 
	#SN_£tCext_£tExt
 "£tCext-£tExt"

	)

3928 
	#NID_£tCext_£tExt
 613

	)

3929 
	#OBJ_£tCext_£tExt
 
OBJ_£t_˚πExt
,5L

	)

3931 
	#SN_£tCext_£tQuÆf
 "£tCext-£tQuÆf"

	)

3932 
	#NID_£tCext_£tQuÆf
 614

	)

3933 
	#OBJ_£tCext_£tQuÆf
 
OBJ_£t_˚πExt
,6L

	)

3935 
	#SN_£tCext_PGWYˇ∑bûôõs
 "£tCext-PGWYˇ∑bûôõs"

	)

3936 
	#NID_£tCext_PGWYˇ∑bûôõs
 615

	)

3937 
	#OBJ_£tCext_PGWYˇ∑bûôõs
 
OBJ_£t_˚πExt
,7L

	)

3939 
	#SN_£tCext_TokíIdítifõr
 "£tCext-TokíIdítifõr"

	)

3940 
	#NID_£tCext_TokíIdítifõr
 616

	)

3941 
	#OBJ_£tCext_TokíIdítifõr
 
OBJ_£t_˚πExt
,8L

	)

3943 
	#SN_£tCext_Tøck2D©a
 "£tCext-Tøck2D©a"

	)

3944 
	#NID_£tCext_Tøck2D©a
 617

	)

3945 
	#OBJ_£tCext_Tøck2D©a
 
OBJ_£t_˚πExt
,9L

	)

3947 
	#SN_£tCext_TokíTy≥
 "£tCext-TokíTy≥"

	)

3948 
	#NID_£tCext_TokíTy≥
 618

	)

3949 
	#OBJ_£tCext_TokíTy≥
 
OBJ_£t_˚πExt
,10L

	)

3951 
	#SN_£tCext_IssuîC≠abûôõs
 "£tCext-IssuîC≠abûôõs"

	)

3952 
	#NID_£tCext_IssuîC≠abûôõs
 619

	)

3953 
	#OBJ_£tCext_IssuîC≠abûôõs
 
OBJ_£t_˚πExt
,11L

	)

3955 
	#SN_£tAâr_Cît
 "£tAâr-Cît"

	)

3956 
	#NID_£tAâr_Cît
 620

	)

3957 
	#OBJ_£tAâr_Cît
 
OBJ_£t_©å
,0L

	)

3959 
	#SN_£tAâr_PGWYˇp
 "£tAâr-PGWYˇp"

	)

3960 
	#LN_£tAâr_PGWYˇp
 "∑ymíàg©eway c≠abûôõs"

	)

3961 
	#NID_£tAâr_PGWYˇp
 621

	)

3962 
	#OBJ_£tAâr_PGWYˇp
 
OBJ_£t_©å
,1L

	)

3964 
	#SN_£tAâr_TokíTy≥
 "£tAâr-TokíTy≥"

	)

3965 
	#NID_£tAâr_TokíTy≥
 622

	)

3966 
	#OBJ_£tAâr_TokíTy≥
 
OBJ_£t_©å
,2L

	)

3968 
	#SN_£tAâr_IssC≠
 "£tAâr-IssC≠"

	)

3969 
	#LN_£tAâr_IssC≠
 "issuî c≠abûôõs"

	)

3970 
	#NID_£tAâr_IssC≠
 623

	)

3971 
	#OBJ_£tAâr_IssC≠
 
OBJ_£t_©å
,3L

	)

3973 
	#SN_£t_roŸKeyThumb
 "£t-roŸKeyThumb"

	)

3974 
	#NID_£t_roŸKeyThumb
 624

	)

3975 
	#OBJ_£t_roŸKeyThumb
 
OBJ_£tAâr_Cît
,0L

	)

3977 
	#SN_£t_addPﬁicy
 "£t-addPﬁicy"

	)

3978 
	#NID_£t_addPﬁicy
 625

	)

3979 
	#OBJ_£t_addPﬁicy
 
OBJ_£tAâr_Cît
,1L

	)

3981 
	#SN_£tAâr_Tokí_EMV
 "£tAâr-Tokí-EMV"

	)

3982 
	#NID_£tAâr_Tokí_EMV
 626

	)

3983 
	#OBJ_£tAâr_Tokí_EMV
 
OBJ_£tAâr_TokíTy≥
,1L

	)

3985 
	#SN_£tAâr_Tokí_B0Prime
 "£tAâr-Tokí-B0Prime"

	)

3986 
	#NID_£tAâr_Tokí_B0Prime
 627

	)

3987 
	#OBJ_£tAâr_Tokí_B0Prime
 
OBJ_£tAâr_TokíTy≥
,2L

	)

3989 
	#SN_£tAâr_IssC≠_CVM
 "£tAâr-IssC≠-CVM"

	)

3990 
	#NID_£tAâr_IssC≠_CVM
 628

	)

3991 
	#OBJ_£tAâr_IssC≠_CVM
 
OBJ_£tAâr_IssC≠
,3L

	)

3993 
	#SN_£tAâr_IssC≠_T2
 "£tAâr-IssC≠-T2"

	)

3994 
	#NID_£tAâr_IssC≠_T2
 629

	)

3995 
	#OBJ_£tAâr_IssC≠_T2
 
OBJ_£tAâr_IssC≠
,4L

	)

3997 
	#SN_£tAâr_IssC≠_Sig
 "£tAâr-IssC≠-Sig"

	)

3998 
	#NID_£tAâr_IssC≠_Sig
 630

	)

3999 
	#OBJ_£tAâr_IssC≠_Sig
 
OBJ_£tAâr_IssC≠
,5L

	)

4001 
	#SN_£tAâr_GíCry±grm
 "£tAâr-GíCry±grm"

	)

4002 
	#LN_£tAâr_GíCry±grm
 "gíî©ê¸y±ogøm"

	)

4003 
	#NID_£tAâr_GíCry±grm
 631

	)

4004 
	#OBJ_£tAâr_GíCry±grm
 
OBJ_£tAâr_IssC≠_CVM
,1L

	)

4006 
	#SN_£tAâr_T2Enc
 "£tAâr-T2Enc"

	)

4007 
	#LN_£tAâr_T2Enc
 "í¸y±edÅøck 2"

	)

4008 
	#NID_£tAâr_T2Enc
 632

	)

4009 
	#OBJ_£tAâr_T2Enc
 
OBJ_£tAâr_IssC≠_T2
,1L

	)

4011 
	#SN_£tAâr_T2˛óπxt
 "£tAâr-T2˛óπxt"

	)

4012 
	#LN_£tAâr_T2˛óπxt
 "˛óπexàåack 2"

	)

4013 
	#NID_£tAâr_T2˛óπxt
 633

	)

4014 
	#OBJ_£tAâr_T2˛óπxt
 
OBJ_£tAâr_IssC≠_T2
,2L

	)

4016 
	#SN_£tAâr_TokICCsig
 "£tAâr-TokICCsig"

	)

4017 
	#LN_£tAâr_TokICCsig
 "ICC o∏tokí sig«tuª"

	)

4018 
	#NID_£tAâr_TokICCsig
 634

	)

4019 
	#OBJ_£tAâr_TokICCsig
 
OBJ_£tAâr_IssC≠_Sig
,1L

	)

4021 
	#SN_£tAâr_SecDevSig
 "£tAâr-SecDevSig"

	)

4022 
	#LN_£tAâr_SecDevSig
 "£cuª devi˚ sig«tuª"

	)

4023 
	#NID_£tAâr_SecDevSig
 635

	)

4024 
	#OBJ_£tAâr_SecDevSig
 
OBJ_£tAâr_IssC≠_Sig
,2L

	)

4026 
	#SN_£t_bønd_IATA_ATA
 "£t-bønd-IATA-ATA"

	)

4027 
	#NID_£t_bønd_IATA_ATA
 636

	)

4028 
	#OBJ_£t_bønd_IATA_ATA
 
OBJ_£t_bønd
,1L

	)

4030 
	#SN_£t_bønd_Döîs
 "£t-bønd-Döîs"

	)

4031 
	#NID_£t_bønd_Döîs
 637

	)

4032 
	#OBJ_£t_bønd_Döîs
 
OBJ_£t_bønd
,30L

	)

4034 
	#SN_£t_bønd_AmîiˇnEx¥ess
 "£t-bønd-AmîiˇnEx¥ess"

	)

4035 
	#NID_£t_bønd_AmîiˇnEx¥ess
 638

	)

4036 
	#OBJ_£t_bønd_AmîiˇnEx¥ess
 
OBJ_£t_bønd
,34L

	)

4038 
	#SN_£t_bønd_JCB
 "£t-bønd-JCB"

	)

4039 
	#NID_£t_bønd_JCB
 639

	)

4040 
	#OBJ_£t_bønd_JCB
 
OBJ_£t_bønd
,35L

	)

4042 
	#SN_£t_bønd_Viß
 "£t-bønd-Viß"

	)

4043 
	#NID_£t_bønd_Viß
 640

	)

4044 
	#OBJ_£t_bønd_Viß
 
OBJ_£t_bønd
,4L

	)

4046 
	#SN_£t_bønd_Ma°îC¨d
 "£t-bønd-Ma°îC¨d"

	)

4047 
	#NID_£t_bønd_Ma°îC¨d
 641

	)

4048 
	#OBJ_£t_bønd_Ma°îC¨d
 
OBJ_£t_bønd
,5L

	)

4050 
	#SN_£t_bønd_Novus
 "£t-bønd-Novus"

	)

4051 
	#NID_£t_bønd_Novus
 642

	)

4052 
	#OBJ_£t_bønd_Novus
 
OBJ_£t_bønd
,6011L

	)

4054 
	#SN_des_cdmf
 "DES-CDMF"

	)

4055 
	#LN_des_cdmf
 "des-cdmf"

	)

4056 
	#NID_des_cdmf
 643

	)

4057 
	#OBJ_des_cdmf
 
OBJ_rßdsi
,3L,10L

	)

4059 
	#SN_rßOAEPEn¸y±i⁄SET
 "rßOAEPEn¸y±i⁄SET"

	)

4060 
	#NID_rßOAEPEn¸y±i⁄SET
 644

	)

4061 
	#OBJ_rßOAEPEn¸y±i⁄SET
 
OBJ_rßdsi
,1L,1L,6L

	)

4063 
	#SN_ù£c3
 "OakÀy-EC2N-3"

	)

4064 
	#LN_ù£c3
 "ù£c3"

	)

4065 
	#NID_ù£c3
 749

	)

4067 
	#SN_ù£c4
 "OakÀy-EC2N-4"

	)

4068 
	#LN_ù£c4
 "ù£c4"

	)

4069 
	#NID_ù£c4
 750

	)

4071 
	#SN_whúÕoﬁ
 "whúÕoﬁ"

	)

4072 
	#NID_whúÕoﬁ
 804

	)

4073 
	#OBJ_whúÕoﬁ
 
OBJ_iso
,0L,10118L,3L,0L,55L

	)

4075 
	#SN_¸y±›ro
 "¸y±›ro"

	)

4076 
	#NID_¸y±›ro
 805

	)

4077 
	#OBJ_¸y±›ro
 
OBJ_membî_body
,643L,2L,2L

	)

4079 
	#SN_¸y±ocom
 "¸y±ocom"

	)

4080 
	#NID_¸y±ocom
 806

	)

4081 
	#OBJ_¸y±ocom
 
OBJ_membî_body
,643L,2L,9L

	)

4083 
	#SN_id_tc26
 "id-tc26"

	)

4084 
	#NID_id_tc26
 974

	)

4085 
	#OBJ_id_tc26
 
OBJ_membî_body
,643L,7L,1L

	)

4087 
	#SN_id_Go°R3411_94_wôh_Go°R3410_2001
 "id-Go°R3411-94-wôh-Go°R3410-2001"

	)

4088 
	#LN_id_Go°R3411_94_wôh_Go°R3410_2001
 "GOST R 34.11-94 wôh GOST R 34.10-2001"

	)

4089 
	#NID_id_Go°R3411_94_wôh_Go°R3410_2001
 807

	)

4090 
	#OBJ_id_Go°R3411_94_wôh_Go°R3410_2001
 
OBJ_¸y±›ro
,3L

	)

4092 
	#SN_id_Go°R3411_94_wôh_Go°R3410_94
 "id-Go°R3411-94-wôh-Go°R3410-94"

	)

4093 
	#LN_id_Go°R3411_94_wôh_Go°R3410_94
 "GOST R 34.11-94 wôh GOST R 34.10-94"

	)

4094 
	#NID_id_Go°R3411_94_wôh_Go°R3410_94
 808

	)

4095 
	#OBJ_id_Go°R3411_94_wôh_Go°R3410_94
 
OBJ_¸y±›ro
,4L

	)

4097 
	#SN_id_Go°R3411_94
 "md_go°94"

	)

4098 
	#LN_id_Go°R3411_94
 "GOST R 34.11-94"

	)

4099 
	#NID_id_Go°R3411_94
 809

	)

4100 
	#OBJ_id_Go°R3411_94
 
OBJ_¸y±›ro
,9L

	)

4102 
	#SN_id_HMACGo°R3411_94
 "id-HMACGo°R3411-94"

	)

4103 
	#LN_id_HMACGo°R3411_94
 "HMAC GOST 34.11-94"

	)

4104 
	#NID_id_HMACGo°R3411_94
 810

	)

4105 
	#OBJ_id_HMACGo°R3411_94
 
OBJ_¸y±›ro
,10L

	)

4107 
	#SN_id_Go°R3410_2001
 "go°2001"

	)

4108 
	#LN_id_Go°R3410_2001
 "GOST R 34.10-2001"

	)

4109 
	#NID_id_Go°R3410_2001
 811

	)

4110 
	#OBJ_id_Go°R3410_2001
 
OBJ_¸y±›ro
,19L

	)

4112 
	#SN_id_Go°R3410_94
 "go°94"

	)

4113 
	#LN_id_Go°R3410_94
 "GOST R 34.10-94"

	)

4114 
	#NID_id_Go°R3410_94
 812

	)

4115 
	#OBJ_id_Go°R3410_94
 
OBJ_¸y±›ro
,20L

	)

4117 
	#SN_id_Go°28147_89
 "go°89"

	)

4118 
	#LN_id_Go°28147_89
 "GOST 28147-89"

	)

4119 
	#NID_id_Go°28147_89
 813

	)

4120 
	#OBJ_id_Go°28147_89
 
OBJ_¸y±›ro
,21L

	)

4122 
	#SN_go°89_˙t
 "go°89-˙t"

	)

4123 
	#NID_go°89_˙t
 814

	)

4125 
	#SN_go°89_˙t_12
 "go°89-˙t-12"

	)

4126 
	#NID_go°89_˙t_12
 975

	)

4128 
	#SN_go°89_cbc
 "go°89-cbc"

	)

4129 
	#NID_go°89_cbc
 1009

	)

4131 
	#SN_go°89_ecb
 "go°89-ecb"

	)

4132 
	#NID_go°89_ecb
 1010

	)

4134 
	#SN_go°89_˘r
 "go°89-˘r"

	)

4135 
	#NID_go°89_˘r
 1011

	)

4137 
	#SN_id_Go°28147_89_MAC
 "go°-mac"

	)

4138 
	#LN_id_Go°28147_89_MAC
 "GOST 28147-89 MAC"

	)

4139 
	#NID_id_Go°28147_89_MAC
 815

	)

4140 
	#OBJ_id_Go°28147_89_MAC
 
OBJ_¸y±›ro
,22L

	)

4142 
	#SN_go°_mac_12
 "go°-mac-12"

	)

4143 
	#NID_go°_mac_12
 976

	)

4145 
	#SN_id_Go°R3411_94_¥f
 "¥f-go°r3411-94"

	)

4146 
	#LN_id_Go°R3411_94_¥f
 "GOST R 34.11-94 PRF"

	)

4147 
	#NID_id_Go°R3411_94_¥f
 816

	)

4148 
	#OBJ_id_Go°R3411_94_¥f
 
OBJ_¸y±›ro
,23L

	)

4150 
	#SN_id_Go°R3410_2001DH
 "id-Go°R3410-2001DH"

	)

4151 
	#LN_id_Go°R3410_2001DH
 "GOST R 34.10-2001 DH"

	)

4152 
	#NID_id_Go°R3410_2001DH
 817

	)

4153 
	#OBJ_id_Go°R3410_2001DH
 
OBJ_¸y±›ro
,98L

	)

4155 
	#SN_id_Go°R3410_94DH
 "id-Go°R3410-94DH"

	)

4156 
	#LN_id_Go°R3410_94DH
 "GOST R 34.10-94 DH"

	)

4157 
	#NID_id_Go°R3410_94DH
 818

	)

4158 
	#OBJ_id_Go°R3410_94DH
 
OBJ_¸y±›ro
,99L

	)

4160 
	#SN_id_Go°28147_89_Cry±oPro_KeyMeshög
 "id-Go°28147-89-Cry±oPro-KeyMeshög"

	)

4161 
	#NID_id_Go°28147_89_Cry±oPro_KeyMeshög
 819

	)

4162 
	#OBJ_id_Go°28147_89_Cry±oPro_KeyMeshög
 
OBJ_¸y±›ro
,14L,1L

	)

4164 
	#SN_id_Go°28147_89_N⁄e_KeyMeshög
 "id-Go°28147-89-N⁄e-KeyMeshög"

	)

4165 
	#NID_id_Go°28147_89_N⁄e_KeyMeshög
 820

	)

4166 
	#OBJ_id_Go°28147_89_N⁄e_KeyMeshög
 
OBJ_¸y±›ro
,14L,0L

	)

4168 
	#SN_id_Go°R3411_94_Te°P¨amSë
 "id-Go°R3411-94-Te°P¨amSë"

	)

4169 
	#NID_id_Go°R3411_94_Te°P¨amSë
 821

	)

4170 
	#OBJ_id_Go°R3411_94_Te°P¨amSë
 
OBJ_¸y±›ro
,30L,0L

	)

4172 
	#SN_id_Go°R3411_94_Cry±oProP¨amSë
 "id-Go°R3411-94-Cry±oProP¨amSë"

	)

4173 
	#NID_id_Go°R3411_94_Cry±oProP¨amSë
 822

	)

4174 
	#OBJ_id_Go°R3411_94_Cry±oProP¨amSë
 
OBJ_¸y±›ro
,30L,1L

	)

4176 
	#SN_id_Go°28147_89_Te°P¨amSë
 "id-Go°28147-89-Te°P¨amSë"

	)

4177 
	#NID_id_Go°28147_89_Te°P¨amSë
 823

	)

4178 
	#OBJ_id_Go°28147_89_Te°P¨amSë
 
OBJ_¸y±›ro
,31L,0L

	)

4180 
	#SN_id_Go°28147_89_Cry±oPro_A_P¨amSë
 "id-Go°28147-89-Cry±oPro-A-P¨amSë"

	)

4181 
	#NID_id_Go°28147_89_Cry±oPro_A_P¨amSë
 824

	)

4182 
	#OBJ_id_Go°28147_89_Cry±oPro_A_P¨amSë
 
OBJ_¸y±›ro
,31L,1L

	)

4184 
	#SN_id_Go°28147_89_Cry±oPro_B_P¨amSë
 "id-Go°28147-89-Cry±oPro-B-P¨amSë"

	)

4185 
	#NID_id_Go°28147_89_Cry±oPro_B_P¨amSë
 825

	)

4186 
	#OBJ_id_Go°28147_89_Cry±oPro_B_P¨amSë
 
OBJ_¸y±›ro
,31L,2L

	)

4188 
	#SN_id_Go°28147_89_Cry±oPro_C_P¨amSë
 "id-Go°28147-89-Cry±oPro-C-P¨amSë"

	)

4189 
	#NID_id_Go°28147_89_Cry±oPro_C_P¨amSë
 826

	)

4190 
	#OBJ_id_Go°28147_89_Cry±oPro_C_P¨amSë
 
OBJ_¸y±›ro
,31L,3L

	)

4192 
	#SN_id_Go°28147_89_Cry±oPro_D_P¨amSë
 "id-Go°28147-89-Cry±oPro-D-P¨amSë"

	)

4193 
	#NID_id_Go°28147_89_Cry±oPro_D_P¨amSë
 827

	)

4194 
	#OBJ_id_Go°28147_89_Cry±oPro_D_P¨amSë
 
OBJ_¸y±›ro
,31L,4L

	)

4196 
	#SN_id_Go°28147_89_Cry±oPro_Osˇr_1_1_P¨amSë
 "id-Go°28147-89-Cry±oPro-Osˇr-1-1-P¨amSë"

	)

4197 
	#NID_id_Go°28147_89_Cry±oPro_Osˇr_1_1_P¨amSë
 828

	)

4198 
	#OBJ_id_Go°28147_89_Cry±oPro_Osˇr_1_1_P¨amSë
 
OBJ_¸y±›ro
,31L,5L

	)

4200 
	#SN_id_Go°28147_89_Cry±oPro_Osˇr_1_0_P¨amSë
 "id-Go°28147-89-Cry±oPro-Osˇr-1-0-P¨amSë"

	)

4201 
	#NID_id_Go°28147_89_Cry±oPro_Osˇr_1_0_P¨amSë
 829

	)

4202 
	#OBJ_id_Go°28147_89_Cry±oPro_Osˇr_1_0_P¨amSë
 
OBJ_¸y±›ro
,31L,6L

	)

4204 
	#SN_id_Go°28147_89_Cry±oPro_RIC_1_P¨amSë
 "id-Go°28147-89-Cry±oPro-RIC-1-P¨amSë"

	)

4205 
	#NID_id_Go°28147_89_Cry±oPro_RIC_1_P¨amSë
 830

	)

4206 
	#OBJ_id_Go°28147_89_Cry±oPro_RIC_1_P¨amSë
 
OBJ_¸y±›ro
,31L,7L

	)

4208 
	#SN_id_Go°R3410_94_Te°P¨amSë
 "id-Go°R3410-94-Te°P¨amSë"

	)

4209 
	#NID_id_Go°R3410_94_Te°P¨amSë
 831

	)

4210 
	#OBJ_id_Go°R3410_94_Te°P¨amSë
 
OBJ_¸y±›ro
,32L,0L

	)

4212 
	#SN_id_Go°R3410_94_Cry±oPro_A_P¨amSë
 "id-Go°R3410-94-Cry±oPro-A-P¨amSë"

	)

4213 
	#NID_id_Go°R3410_94_Cry±oPro_A_P¨amSë
 832

	)

4214 
	#OBJ_id_Go°R3410_94_Cry±oPro_A_P¨amSë
 
OBJ_¸y±›ro
,32L,2L

	)

4216 
	#SN_id_Go°R3410_94_Cry±oPro_B_P¨amSë
 "id-Go°R3410-94-Cry±oPro-B-P¨amSë"

	)

4217 
	#NID_id_Go°R3410_94_Cry±oPro_B_P¨amSë
 833

	)

4218 
	#OBJ_id_Go°R3410_94_Cry±oPro_B_P¨amSë
 
OBJ_¸y±›ro
,32L,3L

	)

4220 
	#SN_id_Go°R3410_94_Cry±oPro_C_P¨amSë
 "id-Go°R3410-94-Cry±oPro-C-P¨amSë"

	)

4221 
	#NID_id_Go°R3410_94_Cry±oPro_C_P¨amSë
 834

	)

4222 
	#OBJ_id_Go°R3410_94_Cry±oPro_C_P¨amSë
 
OBJ_¸y±›ro
,32L,4L

	)

4224 
	#SN_id_Go°R3410_94_Cry±oPro_D_P¨amSë
 "id-Go°R3410-94-Cry±oPro-D-P¨amSë"

	)

4225 
	#NID_id_Go°R3410_94_Cry±oPro_D_P¨amSë
 835

	)

4226 
	#OBJ_id_Go°R3410_94_Cry±oPro_D_P¨amSë
 
OBJ_¸y±›ro
,32L,5L

	)

4228 
	#SN_id_Go°R3410_94_Cry±oPro_XchA_P¨amSë
 "id-Go°R3410-94-Cry±oPro-XchA-P¨amSë"

	)

4229 
	#NID_id_Go°R3410_94_Cry±oPro_XchA_P¨amSë
 836

	)

4230 
	#OBJ_id_Go°R3410_94_Cry±oPro_XchA_P¨amSë
 
OBJ_¸y±›ro
,33L,1L

	)

4232 
	#SN_id_Go°R3410_94_Cry±oPro_XchB_P¨amSë
 "id-Go°R3410-94-Cry±oPro-XchB-P¨amSë"

	)

4233 
	#NID_id_Go°R3410_94_Cry±oPro_XchB_P¨amSë
 837

	)

4234 
	#OBJ_id_Go°R3410_94_Cry±oPro_XchB_P¨amSë
 
OBJ_¸y±›ro
,33L,2L

	)

4236 
	#SN_id_Go°R3410_94_Cry±oPro_XchC_P¨amSë
 "id-Go°R3410-94-Cry±oPro-XchC-P¨amSë"

	)

4237 
	#NID_id_Go°R3410_94_Cry±oPro_XchC_P¨amSë
 838

	)

4238 
	#OBJ_id_Go°R3410_94_Cry±oPro_XchC_P¨amSë
 
OBJ_¸y±›ro
,33L,3L

	)

4240 
	#SN_id_Go°R3410_2001_Te°P¨amSë
 "id-Go°R3410-2001-Te°P¨amSë"

	)

4241 
	#NID_id_Go°R3410_2001_Te°P¨amSë
 839

	)

4242 
	#OBJ_id_Go°R3410_2001_Te°P¨amSë
 
OBJ_¸y±›ro
,35L,0L

	)

4244 
	#SN_id_Go°R3410_2001_Cry±oPro_A_P¨amSë
 "id-Go°R3410-2001-Cry±oPro-A-P¨amSë"

	)

4245 
	#NID_id_Go°R3410_2001_Cry±oPro_A_P¨amSë
 840

	)

4246 
	#OBJ_id_Go°R3410_2001_Cry±oPro_A_P¨amSë
 
OBJ_¸y±›ro
,35L,1L

	)

4248 
	#SN_id_Go°R3410_2001_Cry±oPro_B_P¨amSë
 "id-Go°R3410-2001-Cry±oPro-B-P¨amSë"

	)

4249 
	#NID_id_Go°R3410_2001_Cry±oPro_B_P¨amSë
 841

	)

4250 
	#OBJ_id_Go°R3410_2001_Cry±oPro_B_P¨amSë
 
OBJ_¸y±›ro
,35L,2L

	)

4252 
	#SN_id_Go°R3410_2001_Cry±oPro_C_P¨amSë
 "id-Go°R3410-2001-Cry±oPro-C-P¨amSë"

	)

4253 
	#NID_id_Go°R3410_2001_Cry±oPro_C_P¨amSë
 842

	)

4254 
	#OBJ_id_Go°R3410_2001_Cry±oPro_C_P¨amSë
 
OBJ_¸y±›ro
,35L,3L

	)

4256 
	#SN_id_Go°R3410_2001_Cry±oPro_XchA_P¨amSë
 "id-Go°R3410-2001-Cry±oPro-XchA-P¨amSë"

	)

4257 
	#NID_id_Go°R3410_2001_Cry±oPro_XchA_P¨amSë
 843

	)

4258 
	#OBJ_id_Go°R3410_2001_Cry±oPro_XchA_P¨amSë
 
OBJ_¸y±›ro
,36L,0L

	)

4260 
	#SN_id_Go°R3410_2001_Cry±oPro_XchB_P¨amSë
 "id-Go°R3410-2001-Cry±oPro-XchB-P¨amSë"

	)

4261 
	#NID_id_Go°R3410_2001_Cry±oPro_XchB_P¨amSë
 844

	)

4262 
	#OBJ_id_Go°R3410_2001_Cry±oPro_XchB_P¨amSë
 
OBJ_¸y±›ro
,36L,1L

	)

4264 
	#SN_id_Go°R3410_94_a
 "id-Go°R3410-94-a"

	)

4265 
	#NID_id_Go°R3410_94_a
 845

	)

4266 
	#OBJ_id_Go°R3410_94_a
 
OBJ_id_Go°R3410_94
,1L

	)

4268 
	#SN_id_Go°R3410_94_aBis
 "id-Go°R3410-94-aBis"

	)

4269 
	#NID_id_Go°R3410_94_aBis
 846

	)

4270 
	#OBJ_id_Go°R3410_94_aBis
 
OBJ_id_Go°R3410_94
,2L

	)

4272 
	#SN_id_Go°R3410_94_b
 "id-Go°R3410-94-b"

	)

4273 
	#NID_id_Go°R3410_94_b
 847

	)

4274 
	#OBJ_id_Go°R3410_94_b
 
OBJ_id_Go°R3410_94
,3L

	)

4276 
	#SN_id_Go°R3410_94_bBis
 "id-Go°R3410-94-bBis"

	)

4277 
	#NID_id_Go°R3410_94_bBis
 848

	)

4278 
	#OBJ_id_Go°R3410_94_bBis
 
OBJ_id_Go°R3410_94
,4L

	)

4280 
	#SN_id_Go°28147_89_cc
 "id-Go°28147-89-cc"

	)

4281 
	#LN_id_Go°28147_89_cc
 "GOST 28147-89 Cry±ocom P¨amSë"

	)

4282 
	#NID_id_Go°28147_89_cc
 849

	)

4283 
	#OBJ_id_Go°28147_89_cc
 
OBJ_¸y±ocom
,1L,6L,1L

	)

4285 
	#SN_id_Go°R3410_94_cc
 "go°94cc"

	)

4286 
	#LN_id_Go°R3410_94_cc
 "GOST 34.10-94 Cry±ocom"

	)

4287 
	#NID_id_Go°R3410_94_cc
 850

	)

4288 
	#OBJ_id_Go°R3410_94_cc
 
OBJ_¸y±ocom
,1L,5L,3L

	)

4290 
	#SN_id_Go°R3410_2001_cc
 "go°2001cc"

	)

4291 
	#LN_id_Go°R3410_2001_cc
 "GOST 34.10-2001 Cry±ocom"

	)

4292 
	#NID_id_Go°R3410_2001_cc
 851

	)

4293 
	#OBJ_id_Go°R3410_2001_cc
 
OBJ_¸y±ocom
,1L,5L,4L

	)

4295 
	#SN_id_Go°R3411_94_wôh_Go°R3410_94_cc
 "id-Go°R3411-94-wôh-Go°R3410-94-cc"

	)

4296 
	#LN_id_Go°R3411_94_wôh_Go°R3410_94_cc
 "GOST R 34.11-94 wôh GOST R 34.10-94 Cry±ocom"

	)

4297 
	#NID_id_Go°R3411_94_wôh_Go°R3410_94_cc
 852

	)

4298 
	#OBJ_id_Go°R3411_94_wôh_Go°R3410_94_cc
 
OBJ_¸y±ocom
,1L,3L,3L

	)

4300 
	#SN_id_Go°R3411_94_wôh_Go°R3410_2001_cc
 "id-Go°R3411-94-wôh-Go°R3410-2001-cc"

	)

4301 
	#LN_id_Go°R3411_94_wôh_Go°R3410_2001_cc
 "GOST R 34.11-94 wôh GOST R 34.10-2001 Cry±ocom"

	)

4302 
	#NID_id_Go°R3411_94_wôh_Go°R3410_2001_cc
 853

	)

4303 
	#OBJ_id_Go°R3411_94_wôh_Go°R3410_2001_cc
 
OBJ_¸y±ocom
,1L,3L,4L

	)

4305 
	#SN_id_Go°R3410_2001_P¨amSë_cc
 "id-Go°R3410-2001-P¨amSë-cc"

	)

4306 
	#LN_id_Go°R3410_2001_P¨amSë_cc
 "GOST R 3410-2001 P¨amëî Së Cry±ocom"

	)

4307 
	#NID_id_Go°R3410_2001_P¨amSë_cc
 854

	)

4308 
	#OBJ_id_Go°R3410_2001_P¨amSë_cc
 
OBJ_¸y±ocom
,1L,8L,1L

	)

4310 
	#SN_id_tc26_Æg‹ôhms
 "id-tc26-Æg‹ôhms"

	)

4311 
	#NID_id_tc26_Æg‹ôhms
 977

	)

4312 
	#OBJ_id_tc26_Æg‹ôhms
 
OBJ_id_tc26
,1L

	)

4314 
	#SN_id_tc26_sign
 "id-tc26-sign"

	)

4315 
	#NID_id_tc26_sign
 978

	)

4316 
	#OBJ_id_tc26_sign
 
OBJ_id_tc26_Æg‹ôhms
,1L

	)

4318 
	#SN_id_Go°R3410_2012_256
 "go°2012_256"

	)

4319 
	#LN_id_Go°R3410_2012_256
 "GOST R 34.10-2012 wôh 256 bô modulus"

	)

4320 
	#NID_id_Go°R3410_2012_256
 979

	)

4321 
	#OBJ_id_Go°R3410_2012_256
 
OBJ_id_tc26_sign
,1L

	)

4323 
	#SN_id_Go°R3410_2012_512
 "go°2012_512"

	)

4324 
	#LN_id_Go°R3410_2012_512
 "GOST R 34.10-2012 wôh 512 bô modulus"

	)

4325 
	#NID_id_Go°R3410_2012_512
 980

	)

4326 
	#OBJ_id_Go°R3410_2012_512
 
OBJ_id_tc26_sign
,2L

	)

4328 
	#SN_id_tc26_dige°
 "id-tc26-dige°"

	)

4329 
	#NID_id_tc26_dige°
 981

	)

4330 
	#OBJ_id_tc26_dige°
 
OBJ_id_tc26_Æg‹ôhms
,2L

	)

4332 
	#SN_id_Go°R3411_2012_256
 "md_go°12_256"

	)

4333 
	#LN_id_Go°R3411_2012_256
 "GOST R 34.11-2012 wôh 256 bô hash"

	)

4334 
	#NID_id_Go°R3411_2012_256
 982

	)

4335 
	#OBJ_id_Go°R3411_2012_256
 
OBJ_id_tc26_dige°
,2L

	)

4337 
	#SN_id_Go°R3411_2012_512
 "md_go°12_512"

	)

4338 
	#LN_id_Go°R3411_2012_512
 "GOST R 34.11-2012 wôh 512 bô hash"

	)

4339 
	#NID_id_Go°R3411_2012_512
 983

	)

4340 
	#OBJ_id_Go°R3411_2012_512
 
OBJ_id_tc26_dige°
,3L

	)

4342 
	#SN_id_tc26_signwôhdige°
 "id-tc26-signwôhdige°"

	)

4343 
	#NID_id_tc26_signwôhdige°
 984

	)

4344 
	#OBJ_id_tc26_signwôhdige°
 
OBJ_id_tc26_Æg‹ôhms
,3L

	)

4346 
	#SN_id_tc26_signwôhdige°_go°3410_2012_256
 "id-tc26-signwôhdige°-go°3410-2012-256"

	)

4347 
	#LN_id_tc26_signwôhdige°_go°3410_2012_256
 "GOST R 34.10-2012 wôh GOST R 34.11-2012 (256 bô)"

	)

4348 
	#NID_id_tc26_signwôhdige°_go°3410_2012_256
 985

	)

4349 
	#OBJ_id_tc26_signwôhdige°_go°3410_2012_256
 
OBJ_id_tc26_signwôhdige°
,2L

	)

4351 
	#SN_id_tc26_signwôhdige°_go°3410_2012_512
 "id-tc26-signwôhdige°-go°3410-2012-512"

	)

4352 
	#LN_id_tc26_signwôhdige°_go°3410_2012_512
 "GOST R 34.10-2012 wôh GOST R 34.11-2012 (512 bô)"

	)

4353 
	#NID_id_tc26_signwôhdige°_go°3410_2012_512
 986

	)

4354 
	#OBJ_id_tc26_signwôhdige°_go°3410_2012_512
 
OBJ_id_tc26_signwôhdige°
,3L

	)

4356 
	#SN_id_tc26_mac
 "id-tc26-mac"

	)

4357 
	#NID_id_tc26_mac
 987

	)

4358 
	#OBJ_id_tc26_mac
 
OBJ_id_tc26_Æg‹ôhms
,4L

	)

4360 
	#SN_id_tc26_hmac_go°_3411_2012_256
 "id-tc26-hmac-go°-3411-2012-256"

	)

4361 
	#LN_id_tc26_hmac_go°_3411_2012_256
 "HMAC GOST 34.11-2012 256 bô"

	)

4362 
	#NID_id_tc26_hmac_go°_3411_2012_256
 988

	)

4363 
	#OBJ_id_tc26_hmac_go°_3411_2012_256
 
OBJ_id_tc26_mac
,1L

	)

4365 
	#SN_id_tc26_hmac_go°_3411_2012_512
 "id-tc26-hmac-go°-3411-2012-512"

	)

4366 
	#LN_id_tc26_hmac_go°_3411_2012_512
 "HMAC GOST 34.11-2012 512 bô"

	)

4367 
	#NID_id_tc26_hmac_go°_3411_2012_512
 989

	)

4368 
	#OBJ_id_tc26_hmac_go°_3411_2012_512
 
OBJ_id_tc26_mac
,2L

	)

4370 
	#SN_id_tc26_cùhî
 "id-tc26-cùhî"

	)

4371 
	#NID_id_tc26_cùhî
 990

	)

4372 
	#OBJ_id_tc26_cùhî
 
OBJ_id_tc26_Æg‹ôhms
,5L

	)

4374 
	#SN_id_tc26_cùhî_go°r3412_2015_magma
 "id-tc26-cùhî-go°r3412-2015-magma"

	)

4375 
	#NID_id_tc26_cùhî_go°r3412_2015_magma
 1173

	)

4376 
	#OBJ_id_tc26_cùhî_go°r3412_2015_magma
 
OBJ_id_tc26_cùhî
,1L

	)

4378 
	#SN_magma_˘r_a˝km
 "magma-˘r-a˝km"

	)

4379 
	#NID_magma_˘r_a˝km
 1174

	)

4380 
	#OBJ_magma_˘r_a˝km
 
OBJ_id_tc26_cùhî_go°r3412_2015_magma
,1L

	)

4382 
	#SN_magma_˘r_a˝km_omac
 "magma-˘r-a˝km-omac"

	)

4383 
	#NID_magma_˘r_a˝km_omac
 1175

	)

4384 
	#OBJ_magma_˘r_a˝km_omac
 
OBJ_id_tc26_cùhî_go°r3412_2015_magma
,2L

	)

4386 
	#SN_id_tc26_cùhî_go°r3412_2015_kuznyechik
 "id-tc26-cùhî-go°r3412-2015-kuznyechik"

	)

4387 
	#NID_id_tc26_cùhî_go°r3412_2015_kuznyechik
 1176

	)

4388 
	#OBJ_id_tc26_cùhî_go°r3412_2015_kuznyechik
 
OBJ_id_tc26_cùhî
,2L

	)

4390 
	#SN_kuznyechik_˘r_a˝km
 "kuznyechik-˘r-a˝km"

	)

4391 
	#NID_kuznyechik_˘r_a˝km
 1177

	)

4392 
	#OBJ_kuznyechik_˘r_a˝km
 
OBJ_id_tc26_cùhî_go°r3412_2015_kuznyechik
,1L

	)

4394 
	#SN_kuznyechik_˘r_a˝km_omac
 "kuznyechik-˘r-a˝km-omac"

	)

4395 
	#NID_kuznyechik_˘r_a˝km_omac
 1178

	)

4396 
	#OBJ_kuznyechik_˘r_a˝km_omac
 
OBJ_id_tc26_cùhî_go°r3412_2015_kuznyechik
,2L

	)

4398 
	#SN_id_tc26_agªemít
 "id-tc26-agªemít"

	)

4399 
	#NID_id_tc26_agªemít
 991

	)

4400 
	#OBJ_id_tc26_agªemít
 
OBJ_id_tc26_Æg‹ôhms
,6L

	)

4402 
	#SN_id_tc26_agªemít_go°_3410_2012_256
 "id-tc26-agªemít-go°-3410-2012-256"

	)

4403 
	#NID_id_tc26_agªemít_go°_3410_2012_256
 992

	)

4404 
	#OBJ_id_tc26_agªemít_go°_3410_2012_256
 
OBJ_id_tc26_agªemít
,1L

	)

4406 
	#SN_id_tc26_agªemít_go°_3410_2012_512
 "id-tc26-agªemít-go°-3410-2012-512"

	)

4407 
	#NID_id_tc26_agªemít_go°_3410_2012_512
 993

	)

4408 
	#OBJ_id_tc26_agªemít_go°_3410_2012_512
 
OBJ_id_tc26_agªemít
,2L

	)

4410 
	#SN_id_tc26_wøp
 "id-tc26-wøp"

	)

4411 
	#NID_id_tc26_wøp
 1179

	)

4412 
	#OBJ_id_tc26_wøp
 
OBJ_id_tc26_Æg‹ôhms
,7L

	)

4414 
	#SN_id_tc26_wøp_go°r3412_2015_magma
 "id-tc26-wøp-go°r3412-2015-magma"

	)

4415 
	#NID_id_tc26_wøp_go°r3412_2015_magma
 1180

	)

4416 
	#OBJ_id_tc26_wøp_go°r3412_2015_magma
 
OBJ_id_tc26_wøp
,1L

	)

4418 
	#SN_magma_kexp15
 "magma-kexp15"

	)

4419 
	#NID_magma_kexp15
 1181

	)

4420 
	#OBJ_magma_kexp15
 
OBJ_id_tc26_wøp_go°r3412_2015_magma
,1L

	)

4422 
	#SN_id_tc26_wøp_go°r3412_2015_kuznyechik
 "id-tc26-wøp-go°r3412-2015-kuznyechik"

	)

4423 
	#NID_id_tc26_wøp_go°r3412_2015_kuznyechik
 1182

	)

4424 
	#OBJ_id_tc26_wøp_go°r3412_2015_kuznyechik
 
OBJ_id_tc26_wøp
,2L

	)

4426 
	#SN_kuznyechik_kexp15
 "kuznyechik-kexp15"

	)

4427 
	#NID_kuznyechik_kexp15
 1183

	)

4428 
	#OBJ_kuznyechik_kexp15
 
OBJ_id_tc26_wøp_go°r3412_2015_kuznyechik
,1L

	)

4430 
	#SN_id_tc26_c⁄°™ts
 "id-tc26-c⁄°™ts"

	)

4431 
	#NID_id_tc26_c⁄°™ts
 994

	)

4432 
	#OBJ_id_tc26_c⁄°™ts
 
OBJ_id_tc26
,2L

	)

4434 
	#SN_id_tc26_sign_c⁄°™ts
 "id-tc26-sign-c⁄°™ts"

	)

4435 
	#NID_id_tc26_sign_c⁄°™ts
 995

	)

4436 
	#OBJ_id_tc26_sign_c⁄°™ts
 
OBJ_id_tc26_c⁄°™ts
,1L

	)

4438 
	#SN_id_tc26_go°_3410_2012_256_c⁄°™ts
 "id-tc26-go°-3410-2012-256-c⁄°™ts"

	)

4439 
	#NID_id_tc26_go°_3410_2012_256_c⁄°™ts
 1147

	)

4440 
	#OBJ_id_tc26_go°_3410_2012_256_c⁄°™ts
 
OBJ_id_tc26_sign_c⁄°™ts
,1L

	)

4442 
	#SN_id_tc26_go°_3410_2012_256_∑ømSëA
 "id-tc26-go°-3410-2012-256-∑ømSëA"

	)

4443 
	#LN_id_tc26_go°_3410_2012_256_∑ømSëA
 "GOST R 34.10-2012 (256 bôËP¨amSë A"

	)

4444 
	#NID_id_tc26_go°_3410_2012_256_∑ømSëA
 1148

	)

4445 
	#OBJ_id_tc26_go°_3410_2012_256_∑ømSëA
 
OBJ_id_tc26_go°_3410_2012_256_c⁄°™ts
,1L

	)

4447 
	#SN_id_tc26_go°_3410_2012_256_∑ømSëB
 "id-tc26-go°-3410-2012-256-∑ømSëB"

	)

4448 
	#LN_id_tc26_go°_3410_2012_256_∑ømSëB
 "GOST R 34.10-2012 (256 bôËP¨amSë B"

	)

4449 
	#NID_id_tc26_go°_3410_2012_256_∑ømSëB
 1184

	)

4450 
	#OBJ_id_tc26_go°_3410_2012_256_∑ømSëB
 
OBJ_id_tc26_go°_3410_2012_256_c⁄°™ts
,2L

	)

4452 
	#SN_id_tc26_go°_3410_2012_256_∑ømSëC
 "id-tc26-go°-3410-2012-256-∑ømSëC"

	)

4453 
	#LN_id_tc26_go°_3410_2012_256_∑ømSëC
 "GOST R 34.10-2012 (256 bôËP¨amSë C"

	)

4454 
	#NID_id_tc26_go°_3410_2012_256_∑ømSëC
 1185

	)

4455 
	#OBJ_id_tc26_go°_3410_2012_256_∑ømSëC
 
OBJ_id_tc26_go°_3410_2012_256_c⁄°™ts
,3L

	)

4457 
	#SN_id_tc26_go°_3410_2012_256_∑ømSëD
 "id-tc26-go°-3410-2012-256-∑ømSëD"

	)

4458 
	#LN_id_tc26_go°_3410_2012_256_∑ømSëD
 "GOST R 34.10-2012 (256 bôËP¨amSë D"

	)

4459 
	#NID_id_tc26_go°_3410_2012_256_∑ømSëD
 1186

	)

4460 
	#OBJ_id_tc26_go°_3410_2012_256_∑ømSëD
 
OBJ_id_tc26_go°_3410_2012_256_c⁄°™ts
,4L

	)

4462 
	#SN_id_tc26_go°_3410_2012_512_c⁄°™ts
 "id-tc26-go°-3410-2012-512-c⁄°™ts"

	)

4463 
	#NID_id_tc26_go°_3410_2012_512_c⁄°™ts
 996

	)

4464 
	#OBJ_id_tc26_go°_3410_2012_512_c⁄°™ts
 
OBJ_id_tc26_sign_c⁄°™ts
,2L

	)

4466 
	#SN_id_tc26_go°_3410_2012_512_∑ømSëTe°
 "id-tc26-go°-3410-2012-512-∑ømSëTe°"

	)

4467 
	#LN_id_tc26_go°_3410_2012_512_∑ømSëTe°
 "GOST R 34.10-2012 (512 bôËã°ögÖ¨amëî së"

	)

4468 
	#NID_id_tc26_go°_3410_2012_512_∑ømSëTe°
 997

	)

4469 
	#OBJ_id_tc26_go°_3410_2012_512_∑ømSëTe°
 
OBJ_id_tc26_go°_3410_2012_512_c⁄°™ts
,0L

	)

4471 
	#SN_id_tc26_go°_3410_2012_512_∑ømSëA
 "id-tc26-go°-3410-2012-512-∑ømSëA"

	)

4472 
	#LN_id_tc26_go°_3410_2012_512_∑ømSëA
 "GOST R 34.10-2012 (512 bôËP¨amSë A"

	)

4473 
	#NID_id_tc26_go°_3410_2012_512_∑ømSëA
 998

	)

4474 
	#OBJ_id_tc26_go°_3410_2012_512_∑ømSëA
 
OBJ_id_tc26_go°_3410_2012_512_c⁄°™ts
,1L

	)

4476 
	#SN_id_tc26_go°_3410_2012_512_∑ømSëB
 "id-tc26-go°-3410-2012-512-∑ømSëB"

	)

4477 
	#LN_id_tc26_go°_3410_2012_512_∑ømSëB
 "GOST R 34.10-2012 (512 bôËP¨amSë B"

	)

4478 
	#NID_id_tc26_go°_3410_2012_512_∑ømSëB
 999

	)

4479 
	#OBJ_id_tc26_go°_3410_2012_512_∑ømSëB
 
OBJ_id_tc26_go°_3410_2012_512_c⁄°™ts
,2L

	)

4481 
	#SN_id_tc26_go°_3410_2012_512_∑ømSëC
 "id-tc26-go°-3410-2012-512-∑ømSëC"

	)

4482 
	#LN_id_tc26_go°_3410_2012_512_∑ømSëC
 "GOST R 34.10-2012 (512 bôËP¨amSë C"

	)

4483 
	#NID_id_tc26_go°_3410_2012_512_∑ømSëC
 1149

	)

4484 
	#OBJ_id_tc26_go°_3410_2012_512_∑ømSëC
 
OBJ_id_tc26_go°_3410_2012_512_c⁄°™ts
,3L

	)

4486 
	#SN_id_tc26_dige°_c⁄°™ts
 "id-tc26-dige°-c⁄°™ts"

	)

4487 
	#NID_id_tc26_dige°_c⁄°™ts
 1000

	)

4488 
	#OBJ_id_tc26_dige°_c⁄°™ts
 
OBJ_id_tc26_c⁄°™ts
,2L

	)

4490 
	#SN_id_tc26_cùhî_c⁄°™ts
 "id-tc26-cùhî-c⁄°™ts"

	)

4491 
	#NID_id_tc26_cùhî_c⁄°™ts
 1001

	)

4492 
	#OBJ_id_tc26_cùhî_c⁄°™ts
 
OBJ_id_tc26_c⁄°™ts
,5L

	)

4494 
	#SN_id_tc26_go°_28147_c⁄°™ts
 "id-tc26-go°-28147-c⁄°™ts"

	)

4495 
	#NID_id_tc26_go°_28147_c⁄°™ts
 1002

	)

4496 
	#OBJ_id_tc26_go°_28147_c⁄°™ts
 
OBJ_id_tc26_cùhî_c⁄°™ts
,1L

	)

4498 
	#SN_id_tc26_go°_28147_∑øm_Z
 "id-tc26-go°-28147-∑øm-Z"

	)

4499 
	#LN_id_tc26_go°_28147_∑øm_Z
 "GOST 28147-89 TC26Ö¨amëî së"

	)

4500 
	#NID_id_tc26_go°_28147_∑øm_Z
 1003

	)

4501 
	#OBJ_id_tc26_go°_28147_∑øm_Z
 
OBJ_id_tc26_go°_28147_c⁄°™ts
,1L

	)

4503 
	#SN_INN
 "INN"

	)

4504 
	#LN_INN
 "INN"

	)

4505 
	#NID_INN
 1004

	)

4506 
	#OBJ_INN
 
OBJ_membî_body
,643L,3L,131L,1L,1L

	)

4508 
	#SN_OGRN
 "OGRN"

	)

4509 
	#LN_OGRN
 "OGRN"

	)

4510 
	#NID_OGRN
 1005

	)

4511 
	#OBJ_OGRN
 
OBJ_membî_body
,643L,100L,1L

	)

4513 
	#SN_SNILS
 "SNILS"

	)

4514 
	#LN_SNILS
 "SNILS"

	)

4515 
	#NID_SNILS
 1006

	)

4516 
	#OBJ_SNILS
 
OBJ_membî_body
,643L,100L,3L

	)

4518 
	#SN_OGRNIP
 "OGRNIP"

	)

4519 
	#LN_OGRNIP
 "OGRNIP"

	)

4520 
	#NID_OGRNIP
 1226

	)

4521 
	#OBJ_OGRNIP
 
OBJ_membî_body
,643L,100L,5L

	)

4523 
	#SN_subje˘SignToﬁ
 "subje˘SignToﬁ"

	)

4524 
	#LN_subje˘SignToﬁ
 "Signög Toﬁ o‡Subje˘"

	)

4525 
	#NID_subje˘SignToﬁ
 1007

	)

4526 
	#OBJ_subje˘SignToﬁ
 
OBJ_membî_body
,643L,100L,111L

	)

4528 
	#SN_issuîSignToﬁ
 "issuîSignToﬁ"

	)

4529 
	#LN_issuîSignToﬁ
 "Signög Toﬁ o‡Issuî"

	)

4530 
	#NID_issuîSignToﬁ
 1008

	)

4531 
	#OBJ_issuîSignToﬁ
 
OBJ_membî_body
,643L,100L,112L

	)

4533 
	#SN_˛assSignToﬁ
 "˛assSignToﬁ"

	)

4534 
	#LN_˛assSignToﬁ
 "Cœs†o‡Signög Toﬁ"

	)

4535 
	#NID_˛assSignToﬁ
 1227

	)

4536 
	#OBJ_˛assSignToﬁ
 
OBJ_membî_body
,643L,100L,113L

	)

4538 
	#SN_˛assSignToﬁKC1
 "˛assSignToﬁKC1"

	)

4539 
	#LN_˛assSignToﬁKC1
 "Cœs†o‡Signög Toﬁ KC1"

	)

4540 
	#NID_˛assSignToﬁKC1
 1228

	)

4541 
	#OBJ_˛assSignToﬁKC1
 
OBJ_membî_body
,643L,100L,113L,1L

	)

4543 
	#SN_˛assSignToﬁKC2
 "˛assSignToﬁKC2"

	)

4544 
	#LN_˛assSignToﬁKC2
 "Cœs†o‡Signög Toﬁ KC2"

	)

4545 
	#NID_˛assSignToﬁKC2
 1229

	)

4546 
	#OBJ_˛assSignToﬁKC2
 
OBJ_membî_body
,643L,100L,113L,2L

	)

4548 
	#SN_˛assSignToﬁKC3
 "˛assSignToﬁKC3"

	)

4549 
	#LN_˛assSignToﬁKC3
 "Cœs†o‡Signög Toﬁ KC3"

	)

4550 
	#NID_˛assSignToﬁKC3
 1230

	)

4551 
	#OBJ_˛assSignToﬁKC3
 
OBJ_membî_body
,643L,100L,113L,3L

	)

4553 
	#SN_˛assSignToﬁKB1
 "˛assSignToﬁKB1"

	)

4554 
	#LN_˛assSignToﬁKB1
 "Cœs†o‡Signög Toﬁ KB1"

	)

4555 
	#NID_˛assSignToﬁKB1
 1231

	)

4556 
	#OBJ_˛assSignToﬁKB1
 
OBJ_membî_body
,643L,100L,113L,4L

	)

4558 
	#SN_˛assSignToﬁKB2
 "˛assSignToﬁKB2"

	)

4559 
	#LN_˛assSignToﬁKB2
 "Cœs†o‡Signög Toﬁ KB2"

	)

4560 
	#NID_˛assSignToﬁKB2
 1232

	)

4561 
	#OBJ_˛assSignToﬁKB2
 
OBJ_membî_body
,643L,100L,113L,5L

	)

4563 
	#SN_˛assSignToﬁKA1
 "˛assSignToﬁKA1"

	)

4564 
	#LN_˛assSignToﬁKA1
 "Cœs†o‡Signög Toﬁ KA1"

	)

4565 
	#NID_˛assSignToﬁKA1
 1233

	)

4566 
	#OBJ_˛assSignToﬁKA1
 
OBJ_membî_body
,643L,100L,113L,6L

	)

4568 
	#SN_kuznyechik_ecb
 "kuznyechik-ecb"

	)

4569 
	#NID_kuznyechik_ecb
 1012

	)

4571 
	#SN_kuznyechik_˘r
 "kuznyechik-˘r"

	)

4572 
	#NID_kuznyechik_˘r
 1013

	)

4574 
	#SN_kuznyechik_ofb
 "kuznyechik-ofb"

	)

4575 
	#NID_kuznyechik_ofb
 1014

	)

4577 
	#SN_kuznyechik_cbc
 "kuznyechik-cbc"

	)

4578 
	#NID_kuznyechik_cbc
 1015

	)

4580 
	#SN_kuznyechik_cfb
 "kuznyechik-cfb"

	)

4581 
	#NID_kuznyechik_cfb
 1016

	)

4583 
	#SN_kuznyechik_mac
 "kuznyechik-mac"

	)

4584 
	#NID_kuznyechik_mac
 1017

	)

4586 
	#SN_magma_ecb
 "magma-ecb"

	)

4587 
	#NID_magma_ecb
 1187

	)

4589 
	#SN_magma_˘r
 "magma-˘r"

	)

4590 
	#NID_magma_˘r
 1188

	)

4592 
	#SN_magma_ofb
 "magma-ofb"

	)

4593 
	#NID_magma_ofb
 1189

	)

4595 
	#SN_magma_cbc
 "magma-cbc"

	)

4596 
	#NID_magma_cbc
 1190

	)

4598 
	#SN_magma_cfb
 "magma-cfb"

	)

4599 
	#NID_magma_cfb
 1191

	)

4601 
	#SN_magma_mac
 "magma-mac"

	)

4602 
	#NID_magma_mac
 1192

	)

4604 
	#SN_ˇmñlü_128_cbc
 "CAMELLIA-128-CBC"

	)

4605 
	#LN_ˇmñlü_128_cbc
 "ˇmñlü-128-cbc"

	)

4606 
	#NID_ˇmñlü_128_cbc
 751

	)

4607 
	#OBJ_ˇmñlü_128_cbc
 1L,2L,392L,200011L,61L,1L,1L,1L,2L

	)

4609 
	#SN_ˇmñlü_192_cbc
 "CAMELLIA-192-CBC"

	)

4610 
	#LN_ˇmñlü_192_cbc
 "ˇmñlü-192-cbc"

	)

4611 
	#NID_ˇmñlü_192_cbc
 752

	)

4612 
	#OBJ_ˇmñlü_192_cbc
 1L,2L,392L,200011L,61L,1L,1L,1L,3L

	)

4614 
	#SN_ˇmñlü_256_cbc
 "CAMELLIA-256-CBC"

	)

4615 
	#LN_ˇmñlü_256_cbc
 "ˇmñlü-256-cbc"

	)

4616 
	#NID_ˇmñlü_256_cbc
 753

	)

4617 
	#OBJ_ˇmñlü_256_cbc
 1L,2L,392L,200011L,61L,1L,1L,1L,4L

	)

4619 
	#SN_id_ˇmñlü128_wøp
 "id-ˇmñlü128-wøp"

	)

4620 
	#NID_id_ˇmñlü128_wøp
 907

	)

4621 
	#OBJ_id_ˇmñlü128_wøp
 1L,2L,392L,200011L,61L,1L,1L,3L,2L

	)

4623 
	#SN_id_ˇmñlü192_wøp
 "id-ˇmñlü192-wøp"

	)

4624 
	#NID_id_ˇmñlü192_wøp
 908

	)

4625 
	#OBJ_id_ˇmñlü192_wøp
 1L,2L,392L,200011L,61L,1L,1L,3L,3L

	)

4627 
	#SN_id_ˇmñlü256_wøp
 "id-ˇmñlü256-wøp"

	)

4628 
	#NID_id_ˇmñlü256_wøp
 909

	)

4629 
	#OBJ_id_ˇmñlü256_wøp
 1L,2L,392L,200011L,61L,1L,1L,3L,4L

	)

4631 
	#OBJ_¡t_ds
 0L,3L,4401L,5L

	)

4633 
	#OBJ_ˇmñlü
 
OBJ_¡t_ds
,3L,1L,9L

	)

4635 
	#SN_ˇmñlü_128_ecb
 "CAMELLIA-128-ECB"

	)

4636 
	#LN_ˇmñlü_128_ecb
 "ˇmñlü-128-ecb"

	)

4637 
	#NID_ˇmñlü_128_ecb
 754

	)

4638 
	#OBJ_ˇmñlü_128_ecb
 
OBJ_ˇmñlü
,1L

	)

4640 
	#SN_ˇmñlü_128_ofb128
 "CAMELLIA-128-OFB"

	)

4641 
	#LN_ˇmñlü_128_ofb128
 "ˇmñlü-128-ofb"

	)

4642 
	#NID_ˇmñlü_128_ofb128
 766

	)

4643 
	#OBJ_ˇmñlü_128_ofb128
 
OBJ_ˇmñlü
,3L

	)

4645 
	#SN_ˇmñlü_128_cfb128
 "CAMELLIA-128-CFB"

	)

4646 
	#LN_ˇmñlü_128_cfb128
 "ˇmñlü-128-cfb"

	)

4647 
	#NID_ˇmñlü_128_cfb128
 757

	)

4648 
	#OBJ_ˇmñlü_128_cfb128
 
OBJ_ˇmñlü
,4L

	)

4650 
	#SN_ˇmñlü_128_gcm
 "CAMELLIA-128-GCM"

	)

4651 
	#LN_ˇmñlü_128_gcm
 "ˇmñlü-128-gcm"

	)

4652 
	#NID_ˇmñlü_128_gcm
 961

	)

4653 
	#OBJ_ˇmñlü_128_gcm
 
OBJ_ˇmñlü
,6L

	)

4655 
	#SN_ˇmñlü_128_ccm
 "CAMELLIA-128-CCM"

	)

4656 
	#LN_ˇmñlü_128_ccm
 "ˇmñlü-128-ccm"

	)

4657 
	#NID_ˇmñlü_128_ccm
 962

	)

4658 
	#OBJ_ˇmñlü_128_ccm
 
OBJ_ˇmñlü
,7L

	)

4660 
	#SN_ˇmñlü_128_˘r
 "CAMELLIA-128-CTR"

	)

4661 
	#LN_ˇmñlü_128_˘r
 "ˇmñlü-128-˘r"

	)

4662 
	#NID_ˇmñlü_128_˘r
 963

	)

4663 
	#OBJ_ˇmñlü_128_˘r
 
OBJ_ˇmñlü
,9L

	)

4665 
	#SN_ˇmñlü_128_cmac
 "CAMELLIA-128-CMAC"

	)

4666 
	#LN_ˇmñlü_128_cmac
 "ˇmñlü-128-cmac"

	)

4667 
	#NID_ˇmñlü_128_cmac
 964

	)

4668 
	#OBJ_ˇmñlü_128_cmac
 
OBJ_ˇmñlü
,10L

	)

4670 
	#SN_ˇmñlü_192_ecb
 "CAMELLIA-192-ECB"

	)

4671 
	#LN_ˇmñlü_192_ecb
 "ˇmñlü-192-ecb"

	)

4672 
	#NID_ˇmñlü_192_ecb
 755

	)

4673 
	#OBJ_ˇmñlü_192_ecb
 
OBJ_ˇmñlü
,21L

	)

4675 
	#SN_ˇmñlü_192_ofb128
 "CAMELLIA-192-OFB"

	)

4676 
	#LN_ˇmñlü_192_ofb128
 "ˇmñlü-192-ofb"

	)

4677 
	#NID_ˇmñlü_192_ofb128
 767

	)

4678 
	#OBJ_ˇmñlü_192_ofb128
 
OBJ_ˇmñlü
,23L

	)

4680 
	#SN_ˇmñlü_192_cfb128
 "CAMELLIA-192-CFB"

	)

4681 
	#LN_ˇmñlü_192_cfb128
 "ˇmñlü-192-cfb"

	)

4682 
	#NID_ˇmñlü_192_cfb128
 758

	)

4683 
	#OBJ_ˇmñlü_192_cfb128
 
OBJ_ˇmñlü
,24L

	)

4685 
	#SN_ˇmñlü_192_gcm
 "CAMELLIA-192-GCM"

	)

4686 
	#LN_ˇmñlü_192_gcm
 "ˇmñlü-192-gcm"

	)

4687 
	#NID_ˇmñlü_192_gcm
 965

	)

4688 
	#OBJ_ˇmñlü_192_gcm
 
OBJ_ˇmñlü
,26L

	)

4690 
	#SN_ˇmñlü_192_ccm
 "CAMELLIA-192-CCM"

	)

4691 
	#LN_ˇmñlü_192_ccm
 "ˇmñlü-192-ccm"

	)

4692 
	#NID_ˇmñlü_192_ccm
 966

	)

4693 
	#OBJ_ˇmñlü_192_ccm
 
OBJ_ˇmñlü
,27L

	)

4695 
	#SN_ˇmñlü_192_˘r
 "CAMELLIA-192-CTR"

	)

4696 
	#LN_ˇmñlü_192_˘r
 "ˇmñlü-192-˘r"

	)

4697 
	#NID_ˇmñlü_192_˘r
 967

	)

4698 
	#OBJ_ˇmñlü_192_˘r
 
OBJ_ˇmñlü
,29L

	)

4700 
	#SN_ˇmñlü_192_cmac
 "CAMELLIA-192-CMAC"

	)

4701 
	#LN_ˇmñlü_192_cmac
 "ˇmñlü-192-cmac"

	)

4702 
	#NID_ˇmñlü_192_cmac
 968

	)

4703 
	#OBJ_ˇmñlü_192_cmac
 
OBJ_ˇmñlü
,30L

	)

4705 
	#SN_ˇmñlü_256_ecb
 "CAMELLIA-256-ECB"

	)

4706 
	#LN_ˇmñlü_256_ecb
 "ˇmñlü-256-ecb"

	)

4707 
	#NID_ˇmñlü_256_ecb
 756

	)

4708 
	#OBJ_ˇmñlü_256_ecb
 
OBJ_ˇmñlü
,41L

	)

4710 
	#SN_ˇmñlü_256_ofb128
 "CAMELLIA-256-OFB"

	)

4711 
	#LN_ˇmñlü_256_ofb128
 "ˇmñlü-256-ofb"

	)

4712 
	#NID_ˇmñlü_256_ofb128
 768

	)

4713 
	#OBJ_ˇmñlü_256_ofb128
 
OBJ_ˇmñlü
,43L

	)

4715 
	#SN_ˇmñlü_256_cfb128
 "CAMELLIA-256-CFB"

	)

4716 
	#LN_ˇmñlü_256_cfb128
 "ˇmñlü-256-cfb"

	)

4717 
	#NID_ˇmñlü_256_cfb128
 759

	)

4718 
	#OBJ_ˇmñlü_256_cfb128
 
OBJ_ˇmñlü
,44L

	)

4720 
	#SN_ˇmñlü_256_gcm
 "CAMELLIA-256-GCM"

	)

4721 
	#LN_ˇmñlü_256_gcm
 "ˇmñlü-256-gcm"

	)

4722 
	#NID_ˇmñlü_256_gcm
 969

	)

4723 
	#OBJ_ˇmñlü_256_gcm
 
OBJ_ˇmñlü
,46L

	)

4725 
	#SN_ˇmñlü_256_ccm
 "CAMELLIA-256-CCM"

	)

4726 
	#LN_ˇmñlü_256_ccm
 "ˇmñlü-256-ccm"

	)

4727 
	#NID_ˇmñlü_256_ccm
 970

	)

4728 
	#OBJ_ˇmñlü_256_ccm
 
OBJ_ˇmñlü
,47L

	)

4730 
	#SN_ˇmñlü_256_˘r
 "CAMELLIA-256-CTR"

	)

4731 
	#LN_ˇmñlü_256_˘r
 "ˇmñlü-256-˘r"

	)

4732 
	#NID_ˇmñlü_256_˘r
 971

	)

4733 
	#OBJ_ˇmñlü_256_˘r
 
OBJ_ˇmñlü
,49L

	)

4735 
	#SN_ˇmñlü_256_cmac
 "CAMELLIA-256-CMAC"

	)

4736 
	#LN_ˇmñlü_256_cmac
 "ˇmñlü-256-cmac"

	)

4737 
	#NID_ˇmñlü_256_cmac
 972

	)

4738 
	#OBJ_ˇmñlü_256_cmac
 
OBJ_ˇmñlü
,50L

	)

4740 
	#SN_ˇmñlü_128_cfb1
 "CAMELLIA-128-CFB1"

	)

4741 
	#LN_ˇmñlü_128_cfb1
 "ˇmñlü-128-cfb1"

	)

4742 
	#NID_ˇmñlü_128_cfb1
 760

	)

4744 
	#SN_ˇmñlü_192_cfb1
 "CAMELLIA-192-CFB1"

	)

4745 
	#LN_ˇmñlü_192_cfb1
 "ˇmñlü-192-cfb1"

	)

4746 
	#NID_ˇmñlü_192_cfb1
 761

	)

4748 
	#SN_ˇmñlü_256_cfb1
 "CAMELLIA-256-CFB1"

	)

4749 
	#LN_ˇmñlü_256_cfb1
 "ˇmñlü-256-cfb1"

	)

4750 
	#NID_ˇmñlü_256_cfb1
 762

	)

4752 
	#SN_ˇmñlü_128_cfb8
 "CAMELLIA-128-CFB8"

	)

4753 
	#LN_ˇmñlü_128_cfb8
 "ˇmñlü-128-cfb8"

	)

4754 
	#NID_ˇmñlü_128_cfb8
 763

	)

4756 
	#SN_ˇmñlü_192_cfb8
 "CAMELLIA-192-CFB8"

	)

4757 
	#LN_ˇmñlü_192_cfb8
 "ˇmñlü-192-cfb8"

	)

4758 
	#NID_ˇmñlü_192_cfb8
 764

	)

4760 
	#SN_ˇmñlü_256_cfb8
 "CAMELLIA-256-CFB8"

	)

4761 
	#LN_ˇmñlü_256_cfb8
 "ˇmñlü-256-cfb8"

	)

4762 
	#NID_ˇmñlü_256_cfb8
 765

	)

4764 
	#OBJ_¨ü
 1L,2L,410L,200046L,1L,1L

	)

4766 
	#SN_¨ü_128_ecb
 "ARIA-128-ECB"

	)

4767 
	#LN_¨ü_128_ecb
 "¨ü-128-ecb"

	)

4768 
	#NID_¨ü_128_ecb
 1065

	)

4769 
	#OBJ_¨ü_128_ecb
 
OBJ_¨ü
,1L

	)

4771 
	#SN_¨ü_128_cbc
 "ARIA-128-CBC"

	)

4772 
	#LN_¨ü_128_cbc
 "¨ü-128-cbc"

	)

4773 
	#NID_¨ü_128_cbc
 1066

	)

4774 
	#OBJ_¨ü_128_cbc
 
OBJ_¨ü
,2L

	)

4776 
	#SN_¨ü_128_cfb128
 "ARIA-128-CFB"

	)

4777 
	#LN_¨ü_128_cfb128
 "¨ü-128-cfb"

	)

4778 
	#NID_¨ü_128_cfb128
 1067

	)

4779 
	#OBJ_¨ü_128_cfb128
 
OBJ_¨ü
,3L

	)

4781 
	#SN_¨ü_128_ofb128
 "ARIA-128-OFB"

	)

4782 
	#LN_¨ü_128_ofb128
 "¨ü-128-ofb"

	)

4783 
	#NID_¨ü_128_ofb128
 1068

	)

4784 
	#OBJ_¨ü_128_ofb128
 
OBJ_¨ü
,4L

	)

4786 
	#SN_¨ü_128_˘r
 "ARIA-128-CTR"

	)

4787 
	#LN_¨ü_128_˘r
 "¨ü-128-˘r"

	)

4788 
	#NID_¨ü_128_˘r
 1069

	)

4789 
	#OBJ_¨ü_128_˘r
 
OBJ_¨ü
,5L

	)

4791 
	#SN_¨ü_192_ecb
 "ARIA-192-ECB"

	)

4792 
	#LN_¨ü_192_ecb
 "¨ü-192-ecb"

	)

4793 
	#NID_¨ü_192_ecb
 1070

	)

4794 
	#OBJ_¨ü_192_ecb
 
OBJ_¨ü
,6L

	)

4796 
	#SN_¨ü_192_cbc
 "ARIA-192-CBC"

	)

4797 
	#LN_¨ü_192_cbc
 "¨ü-192-cbc"

	)

4798 
	#NID_¨ü_192_cbc
 1071

	)

4799 
	#OBJ_¨ü_192_cbc
 
OBJ_¨ü
,7L

	)

4801 
	#SN_¨ü_192_cfb128
 "ARIA-192-CFB"

	)

4802 
	#LN_¨ü_192_cfb128
 "¨ü-192-cfb"

	)

4803 
	#NID_¨ü_192_cfb128
 1072

	)

4804 
	#OBJ_¨ü_192_cfb128
 
OBJ_¨ü
,8L

	)

4806 
	#SN_¨ü_192_ofb128
 "ARIA-192-OFB"

	)

4807 
	#LN_¨ü_192_ofb128
 "¨ü-192-ofb"

	)

4808 
	#NID_¨ü_192_ofb128
 1073

	)

4809 
	#OBJ_¨ü_192_ofb128
 
OBJ_¨ü
,9L

	)

4811 
	#SN_¨ü_192_˘r
 "ARIA-192-CTR"

	)

4812 
	#LN_¨ü_192_˘r
 "¨ü-192-˘r"

	)

4813 
	#NID_¨ü_192_˘r
 1074

	)

4814 
	#OBJ_¨ü_192_˘r
 
OBJ_¨ü
,10L

	)

4816 
	#SN_¨ü_256_ecb
 "ARIA-256-ECB"

	)

4817 
	#LN_¨ü_256_ecb
 "¨ü-256-ecb"

	)

4818 
	#NID_¨ü_256_ecb
 1075

	)

4819 
	#OBJ_¨ü_256_ecb
 
OBJ_¨ü
,11L

	)

4821 
	#SN_¨ü_256_cbc
 "ARIA-256-CBC"

	)

4822 
	#LN_¨ü_256_cbc
 "¨ü-256-cbc"

	)

4823 
	#NID_¨ü_256_cbc
 1076

	)

4824 
	#OBJ_¨ü_256_cbc
 
OBJ_¨ü
,12L

	)

4826 
	#SN_¨ü_256_cfb128
 "ARIA-256-CFB"

	)

4827 
	#LN_¨ü_256_cfb128
 "¨ü-256-cfb"

	)

4828 
	#NID_¨ü_256_cfb128
 1077

	)

4829 
	#OBJ_¨ü_256_cfb128
 
OBJ_¨ü
,13L

	)

4831 
	#SN_¨ü_256_ofb128
 "ARIA-256-OFB"

	)

4832 
	#LN_¨ü_256_ofb128
 "¨ü-256-ofb"

	)

4833 
	#NID_¨ü_256_ofb128
 1078

	)

4834 
	#OBJ_¨ü_256_ofb128
 
OBJ_¨ü
,14L

	)

4836 
	#SN_¨ü_256_˘r
 "ARIA-256-CTR"

	)

4837 
	#LN_¨ü_256_˘r
 "¨ü-256-˘r"

	)

4838 
	#NID_¨ü_256_˘r
 1079

	)

4839 
	#OBJ_¨ü_256_˘r
 
OBJ_¨ü
,15L

	)

4841 
	#SN_¨ü_128_cfb1
 "ARIA-128-CFB1"

	)

4842 
	#LN_¨ü_128_cfb1
 "¨ü-128-cfb1"

	)

4843 
	#NID_¨ü_128_cfb1
 1080

	)

4845 
	#SN_¨ü_192_cfb1
 "ARIA-192-CFB1"

	)

4846 
	#LN_¨ü_192_cfb1
 "¨ü-192-cfb1"

	)

4847 
	#NID_¨ü_192_cfb1
 1081

	)

4849 
	#SN_¨ü_256_cfb1
 "ARIA-256-CFB1"

	)

4850 
	#LN_¨ü_256_cfb1
 "¨ü-256-cfb1"

	)

4851 
	#NID_¨ü_256_cfb1
 1082

	)

4853 
	#SN_¨ü_128_cfb8
 "ARIA-128-CFB8"

	)

4854 
	#LN_¨ü_128_cfb8
 "¨ü-128-cfb8"

	)

4855 
	#NID_¨ü_128_cfb8
 1083

	)

4857 
	#SN_¨ü_192_cfb8
 "ARIA-192-CFB8"

	)

4858 
	#LN_¨ü_192_cfb8
 "¨ü-192-cfb8"

	)

4859 
	#NID_¨ü_192_cfb8
 1084

	)

4861 
	#SN_¨ü_256_cfb8
 "ARIA-256-CFB8"

	)

4862 
	#LN_¨ü_256_cfb8
 "¨ü-256-cfb8"

	)

4863 
	#NID_¨ü_256_cfb8
 1085

	)

4865 
	#SN_¨ü_128_ccm
 "ARIA-128-CCM"

	)

4866 
	#LN_¨ü_128_ccm
 "¨ü-128-ccm"

	)

4867 
	#NID_¨ü_128_ccm
 1120

	)

4868 
	#OBJ_¨ü_128_ccm
 
OBJ_¨ü
,37L

	)

4870 
	#SN_¨ü_192_ccm
 "ARIA-192-CCM"

	)

4871 
	#LN_¨ü_192_ccm
 "¨ü-192-ccm"

	)

4872 
	#NID_¨ü_192_ccm
 1121

	)

4873 
	#OBJ_¨ü_192_ccm
 
OBJ_¨ü
,38L

	)

4875 
	#SN_¨ü_256_ccm
 "ARIA-256-CCM"

	)

4876 
	#LN_¨ü_256_ccm
 "¨ü-256-ccm"

	)

4877 
	#NID_¨ü_256_ccm
 1122

	)

4878 
	#OBJ_¨ü_256_ccm
 
OBJ_¨ü
,39L

	)

4880 
	#SN_¨ü_128_gcm
 "ARIA-128-GCM"

	)

4881 
	#LN_¨ü_128_gcm
 "¨ü-128-gcm"

	)

4882 
	#NID_¨ü_128_gcm
 1123

	)

4883 
	#OBJ_¨ü_128_gcm
 
OBJ_¨ü
,34L

	)

4885 
	#SN_¨ü_192_gcm
 "ARIA-192-GCM"

	)

4886 
	#LN_¨ü_192_gcm
 "¨ü-192-gcm"

	)

4887 
	#NID_¨ü_192_gcm
 1124

	)

4888 
	#OBJ_¨ü_192_gcm
 
OBJ_¨ü
,35L

	)

4890 
	#SN_¨ü_256_gcm
 "ARIA-256-GCM"

	)

4891 
	#LN_¨ü_256_gcm
 "¨ü-256-gcm"

	)

4892 
	#NID_¨ü_256_gcm
 1125

	)

4893 
	#OBJ_¨ü_256_gcm
 
OBJ_¨ü
,36L

	)

4895 
	#SN_kiß
 "KISA"

	)

4896 
	#LN_kiß
 "kiß"

	)

4897 
	#NID_kiß
 773

	)

4898 
	#OBJ_kiß
 
OBJ_membî_body
,410L,200004L

	)

4900 
	#SN_£ed_ecb
 "SEED-ECB"

	)

4901 
	#LN_£ed_ecb
 "£ed-ecb"

	)

4902 
	#NID_£ed_ecb
 776

	)

4903 
	#OBJ_£ed_ecb
 
OBJ_kiß
,1L,3L

	)

4905 
	#SN_£ed_cbc
 "SEED-CBC"

	)

4906 
	#LN_£ed_cbc
 "£ed-cbc"

	)

4907 
	#NID_£ed_cbc
 777

	)

4908 
	#OBJ_£ed_cbc
 
OBJ_kiß
,1L,4L

	)

4910 
	#SN_£ed_cfb128
 "SEED-CFB"

	)

4911 
	#LN_£ed_cfb128
 "£ed-cfb"

	)

4912 
	#NID_£ed_cfb128
 779

	)

4913 
	#OBJ_£ed_cfb128
 
OBJ_kiß
,1L,5L

	)

4915 
	#SN_£ed_ofb128
 "SEED-OFB"

	)

4916 
	#LN_£ed_ofb128
 "£ed-ofb"

	)

4917 
	#NID_£ed_ofb128
 778

	)

4918 
	#OBJ_£ed_ofb128
 
OBJ_kiß
,1L,6L

	)

4920 
	#SN_sm4_ecb
 "SM4-ECB"

	)

4921 
	#LN_sm4_ecb
 "sm4-ecb"

	)

4922 
	#NID_sm4_ecb
 1133

	)

4923 
	#OBJ_sm4_ecb
 
OBJ_sm_scheme
,104L,1L

	)

4925 
	#SN_sm4_cbc
 "SM4-CBC"

	)

4926 
	#LN_sm4_cbc
 "sm4-cbc"

	)

4927 
	#NID_sm4_cbc
 1134

	)

4928 
	#OBJ_sm4_cbc
 
OBJ_sm_scheme
,104L,2L

	)

4930 
	#SN_sm4_ofb128
 "SM4-OFB"

	)

4931 
	#LN_sm4_ofb128
 "sm4-ofb"

	)

4932 
	#NID_sm4_ofb128
 1135

	)

4933 
	#OBJ_sm4_ofb128
 
OBJ_sm_scheme
,104L,3L

	)

4935 
	#SN_sm4_cfb128
 "SM4-CFB"

	)

4936 
	#LN_sm4_cfb128
 "sm4-cfb"

	)

4937 
	#NID_sm4_cfb128
 1137

	)

4938 
	#OBJ_sm4_cfb128
 
OBJ_sm_scheme
,104L,4L

	)

4940 
	#SN_sm4_cfb1
 "SM4-CFB1"

	)

4941 
	#LN_sm4_cfb1
 "sm4-cfb1"

	)

4942 
	#NID_sm4_cfb1
 1136

	)

4943 
	#OBJ_sm4_cfb1
 
OBJ_sm_scheme
,104L,5L

	)

4945 
	#SN_sm4_cfb8
 "SM4-CFB8"

	)

4946 
	#LN_sm4_cfb8
 "sm4-cfb8"

	)

4947 
	#NID_sm4_cfb8
 1138

	)

4948 
	#OBJ_sm4_cfb8
 
OBJ_sm_scheme
,104L,6L

	)

4950 
	#SN_sm4_˘r
 "SM4-CTR"

	)

4951 
	#LN_sm4_˘r
 "sm4-˘r"

	)

4952 
	#NID_sm4_˘r
 1139

	)

4953 
	#OBJ_sm4_˘r
 
OBJ_sm_scheme
,104L,7L

	)

4955 
	#SN_hmac
 "HMAC"

	)

4956 
	#LN_hmac
 "hmac"

	)

4957 
	#NID_hmac
 855

	)

4959 
	#SN_cmac
 "CMAC"

	)

4960 
	#LN_cmac
 "cmac"

	)

4961 
	#NID_cmac
 894

	)

4963 
	#SN_rc4_hmac_md5
 "RC4-HMAC-MD5"

	)

4964 
	#LN_rc4_hmac_md5
 "rc4-hmac-md5"

	)

4965 
	#NID_rc4_hmac_md5
 915

	)

4967 
	#SN_´s_128_cbc_hmac_sha1
 "AES-128-CBC-HMAC-SHA1"

	)

4968 
	#LN_´s_128_cbc_hmac_sha1
 "´s-128-cbc-hmac-sha1"

	)

4969 
	#NID_´s_128_cbc_hmac_sha1
 916

	)

4971 
	#SN_´s_192_cbc_hmac_sha1
 "AES-192-CBC-HMAC-SHA1"

	)

4972 
	#LN_´s_192_cbc_hmac_sha1
 "´s-192-cbc-hmac-sha1"

	)

4973 
	#NID_´s_192_cbc_hmac_sha1
 917

	)

4975 
	#SN_´s_256_cbc_hmac_sha1
 "AES-256-CBC-HMAC-SHA1"

	)

4976 
	#LN_´s_256_cbc_hmac_sha1
 "´s-256-cbc-hmac-sha1"

	)

4977 
	#NID_´s_256_cbc_hmac_sha1
 918

	)

4979 
	#SN_´s_128_cbc_hmac_sha256
 "AES-128-CBC-HMAC-SHA256"

	)

4980 
	#LN_´s_128_cbc_hmac_sha256
 "´s-128-cbc-hmac-sha256"

	)

4981 
	#NID_´s_128_cbc_hmac_sha256
 948

	)

4983 
	#SN_´s_192_cbc_hmac_sha256
 "AES-192-CBC-HMAC-SHA256"

	)

4984 
	#LN_´s_192_cbc_hmac_sha256
 "´s-192-cbc-hmac-sha256"

	)

4985 
	#NID_´s_192_cbc_hmac_sha256
 949

	)

4987 
	#SN_´s_256_cbc_hmac_sha256
 "AES-256-CBC-HMAC-SHA256"

	)

4988 
	#LN_´s_256_cbc_hmac_sha256
 "´s-256-cbc-hmac-sha256"

	)

4989 
	#NID_´s_256_cbc_hmac_sha256
 950

	)

4991 
	#SN_chacha20_pﬁy1305
 "ChaCha20-Pﬁy1305"

	)

4992 
	#LN_chacha20_pﬁy1305
 "chacha20-pﬁy1305"

	)

4993 
	#NID_chacha20_pﬁy1305
 1018

	)

4995 
	#SN_chacha20
 "ChaCha20"

	)

4996 
	#LN_chacha20
 "chacha20"

	)

4997 
	#NID_chacha20
 1019

	)

4999 
	#SN_dhpubli˙umbî
 "dhpubli˙umbî"

	)

5000 
	#LN_dhpubli˙umbî
 "X9.42 DH"

	)

5001 
	#NID_dhpubli˙umbî
 920

	)

5002 
	#OBJ_dhpubli˙umbî
 
OBJ_ISO_US
,10046L,2L,1L

	)

5004 
	#SN_bøöpoﬁP160r1
 "bøöpoﬁP160r1"

	)

5005 
	#NID_bøöpoﬁP160r1
 921

	)

5006 
	#OBJ_bøöpoﬁP160r1
 1L,3L,36L,3L,3L,2L,8L,1L,1L,1L

	)

5008 
	#SN_bøöpoﬁP160t1
 "bøöpoﬁP160t1"

	)

5009 
	#NID_bøöpoﬁP160t1
 922

	)

5010 
	#OBJ_bøöpoﬁP160t1
 1L,3L,36L,3L,3L,2L,8L,1L,1L,2L

	)

5012 
	#SN_bøöpoﬁP192r1
 "bøöpoﬁP192r1"

	)

5013 
	#NID_bøöpoﬁP192r1
 923

	)

5014 
	#OBJ_bøöpoﬁP192r1
 1L,3L,36L,3L,3L,2L,8L,1L,1L,3L

	)

5016 
	#SN_bøöpoﬁP192t1
 "bøöpoﬁP192t1"

	)

5017 
	#NID_bøöpoﬁP192t1
 924

	)

5018 
	#OBJ_bøöpoﬁP192t1
 1L,3L,36L,3L,3L,2L,8L,1L,1L,4L

	)

5020 
	#SN_bøöpoﬁP224r1
 "bøöpoﬁP224r1"

	)

5021 
	#NID_bøöpoﬁP224r1
 925

	)

5022 
	#OBJ_bøöpoﬁP224r1
 1L,3L,36L,3L,3L,2L,8L,1L,1L,5L

	)

5024 
	#SN_bøöpoﬁP224t1
 "bøöpoﬁP224t1"

	)

5025 
	#NID_bøöpoﬁP224t1
 926

	)

5026 
	#OBJ_bøöpoﬁP224t1
 1L,3L,36L,3L,3L,2L,8L,1L,1L,6L

	)

5028 
	#SN_bøöpoﬁP256r1
 "bøöpoﬁP256r1"

	)

5029 
	#NID_bøöpoﬁP256r1
 927

	)

5030 
	#OBJ_bøöpoﬁP256r1
 1L,3L,36L,3L,3L,2L,8L,1L,1L,7L

	)

5032 
	#SN_bøöpoﬁP256t1
 "bøöpoﬁP256t1"

	)

5033 
	#NID_bøöpoﬁP256t1
 928

	)

5034 
	#OBJ_bøöpoﬁP256t1
 1L,3L,36L,3L,3L,2L,8L,1L,1L,8L

	)

5036 
	#SN_bøöpoﬁP320r1
 "bøöpoﬁP320r1"

	)

5037 
	#NID_bøöpoﬁP320r1
 929

	)

5038 
	#OBJ_bøöpoﬁP320r1
 1L,3L,36L,3L,3L,2L,8L,1L,1L,9L

	)

5040 
	#SN_bøöpoﬁP320t1
 "bøöpoﬁP320t1"

	)

5041 
	#NID_bøöpoﬁP320t1
 930

	)

5042 
	#OBJ_bøöpoﬁP320t1
 1L,3L,36L,3L,3L,2L,8L,1L,1L,10L

	)

5044 
	#SN_bøöpoﬁP384r1
 "bøöpoﬁP384r1"

	)

5045 
	#NID_bøöpoﬁP384r1
 931

	)

5046 
	#OBJ_bøöpoﬁP384r1
 1L,3L,36L,3L,3L,2L,8L,1L,1L,11L

	)

5048 
	#SN_bøöpoﬁP384t1
 "bøöpoﬁP384t1"

	)

5049 
	#NID_bøöpoﬁP384t1
 932

	)

5050 
	#OBJ_bøöpoﬁP384t1
 1L,3L,36L,3L,3L,2L,8L,1L,1L,12L

	)

5052 
	#SN_bøöpoﬁP512r1
 "bøöpoﬁP512r1"

	)

5053 
	#NID_bøöpoﬁP512r1
 933

	)

5054 
	#OBJ_bøöpoﬁP512r1
 1L,3L,36L,3L,3L,2L,8L,1L,1L,13L

	)

5056 
	#SN_bøöpoﬁP512t1
 "bøöpoﬁP512t1"

	)

5057 
	#NID_bøöpoﬁP512t1
 934

	)

5058 
	#OBJ_bøöpoﬁP512t1
 1L,3L,36L,3L,3L,2L,8L,1L,1L,14L

	)

5060 
	#OBJ_x9_63_scheme
 1L,3L,133L,16L,840L,63L,0L

	)

5062 
	#OBJ_£cg_scheme
 
OBJ_˚πicom_¨c
,1L

	)

5064 
	#SN_dhSögÀPass_°dDH_sha1kdf_scheme
 "dhSögÀPass-°dDH-sha1kdf-scheme"

	)

5065 
	#NID_dhSögÀPass_°dDH_sha1kdf_scheme
 936

	)

5066 
	#OBJ_dhSögÀPass_°dDH_sha1kdf_scheme
 
OBJ_x9_63_scheme
,2L

	)

5068 
	#SN_dhSögÀPass_°dDH_sha224kdf_scheme
 "dhSögÀPass-°dDH-sha224kdf-scheme"

	)

5069 
	#NID_dhSögÀPass_°dDH_sha224kdf_scheme
 937

	)

5070 
	#OBJ_dhSögÀPass_°dDH_sha224kdf_scheme
 
OBJ_£cg_scheme
,11L,0L

	)

5072 
	#SN_dhSögÀPass_°dDH_sha256kdf_scheme
 "dhSögÀPass-°dDH-sha256kdf-scheme"

	)

5073 
	#NID_dhSögÀPass_°dDH_sha256kdf_scheme
 938

	)

5074 
	#OBJ_dhSögÀPass_°dDH_sha256kdf_scheme
 
OBJ_£cg_scheme
,11L,1L

	)

5076 
	#SN_dhSögÀPass_°dDH_sha384kdf_scheme
 "dhSögÀPass-°dDH-sha384kdf-scheme"

	)

5077 
	#NID_dhSögÀPass_°dDH_sha384kdf_scheme
 939

	)

5078 
	#OBJ_dhSögÀPass_°dDH_sha384kdf_scheme
 
OBJ_£cg_scheme
,11L,2L

	)

5080 
	#SN_dhSögÀPass_°dDH_sha512kdf_scheme
 "dhSögÀPass-°dDH-sha512kdf-scheme"

	)

5081 
	#NID_dhSögÀPass_°dDH_sha512kdf_scheme
 940

	)

5082 
	#OBJ_dhSögÀPass_°dDH_sha512kdf_scheme
 
OBJ_£cg_scheme
,11L,3L

	)

5084 
	#SN_dhSögÀPass_coÁ˘‹DH_sha1kdf_scheme
 "dhSögÀPass-coÁ˘‹DH-sha1kdf-scheme"

	)

5085 
	#NID_dhSögÀPass_coÁ˘‹DH_sha1kdf_scheme
 941

	)

5086 
	#OBJ_dhSögÀPass_coÁ˘‹DH_sha1kdf_scheme
 
OBJ_x9_63_scheme
,3L

	)

5088 
	#SN_dhSögÀPass_coÁ˘‹DH_sha224kdf_scheme
 "dhSögÀPass-coÁ˘‹DH-sha224kdf-scheme"

	)

5089 
	#NID_dhSögÀPass_coÁ˘‹DH_sha224kdf_scheme
 942

	)

5090 
	#OBJ_dhSögÀPass_coÁ˘‹DH_sha224kdf_scheme
 
OBJ_£cg_scheme
,14L,0L

	)

5092 
	#SN_dhSögÀPass_coÁ˘‹DH_sha256kdf_scheme
 "dhSögÀPass-coÁ˘‹DH-sha256kdf-scheme"

	)

5093 
	#NID_dhSögÀPass_coÁ˘‹DH_sha256kdf_scheme
 943

	)

5094 
	#OBJ_dhSögÀPass_coÁ˘‹DH_sha256kdf_scheme
 
OBJ_£cg_scheme
,14L,1L

	)

5096 
	#SN_dhSögÀPass_coÁ˘‹DH_sha384kdf_scheme
 "dhSögÀPass-coÁ˘‹DH-sha384kdf-scheme"

	)

5097 
	#NID_dhSögÀPass_coÁ˘‹DH_sha384kdf_scheme
 944

	)

5098 
	#OBJ_dhSögÀPass_coÁ˘‹DH_sha384kdf_scheme
 
OBJ_£cg_scheme
,14L,2L

	)

5100 
	#SN_dhSögÀPass_coÁ˘‹DH_sha512kdf_scheme
 "dhSögÀPass-coÁ˘‹DH-sha512kdf-scheme"

	)

5101 
	#NID_dhSögÀPass_coÁ˘‹DH_sha512kdf_scheme
 945

	)

5102 
	#OBJ_dhSögÀPass_coÁ˘‹DH_sha512kdf_scheme
 
OBJ_£cg_scheme
,14L,3L

	)

5104 
	#SN_dh_°d_kdf
 "dh-°d-kdf"

	)

5105 
	#NID_dh_°d_kdf
 946

	)

5107 
	#SN_dh_coÁ˘‹_kdf
 "dh-coÁ˘‹-kdf"

	)

5108 
	#NID_dh_coÁ˘‹_kdf
 947

	)

5110 
	#SN_˘_¥e˚π_s˘s
 "˘_¥e˚π_s˘s"

	)

5111 
	#LN_˘_¥e˚π_s˘s
 "CT Pª˚πifiˇã SCTs"

	)

5112 
	#NID_˘_¥e˚π_s˘s
 951

	)

5113 
	#OBJ_˘_¥e˚π_s˘s
 1L,3L,6L,1L,4L,1L,11129L,2L,4L,2L

	)

5115 
	#SN_˘_¥e˚π_pois⁄
 "˘_¥e˚π_pois⁄"

	)

5116 
	#LN_˘_¥e˚π_pois⁄
 "CT Pª˚πifiˇã Pois⁄"

	)

5117 
	#NID_˘_¥e˚π_pois⁄
 952

	)

5118 
	#OBJ_˘_¥e˚π_pois⁄
 1L,3L,6L,1L,4L,1L,11129L,2L,4L,3L

	)

5120 
	#SN_˘_¥e˚π_sig√r
 "˘_¥e˚π_sig√r"

	)

5121 
	#LN_˘_¥e˚π_sig√r
 "CT Pª˚πifiˇã Sig√r"

	)

5122 
	#NID_˘_¥e˚π_sig√r
 953

	)

5123 
	#OBJ_˘_¥e˚π_sig√r
 1L,3L,6L,1L,4L,1L,11129L,2L,4L,4L

	)

5125 
	#SN_˘_˚π_s˘s
 "˘_˚π_s˘s"

	)

5126 
	#LN_˘_˚π_s˘s
 "CT Cîtifiˇã SCTs"

	)

5127 
	#NID_˘_˚π_s˘s
 954

	)

5128 
	#OBJ_˘_˚π_s˘s
 1L,3L,6L,1L,4L,1L,11129L,2L,4L,5L

	)

5130 
	#SN_jurisdi˘i⁄LoˇlôyName
 "jurisdi˘i⁄L"

	)

5131 
	#LN_jurisdi˘i⁄LoˇlôyName
 "jurisdi˘i⁄LoˇlôyName"

	)

5132 
	#NID_jurisdi˘i⁄LoˇlôyName
 955

	)

5133 
	#OBJ_jurisdi˘i⁄LoˇlôyName
 1L,3L,6L,1L,4L,1L,311L,60L,2L,1L,1L

	)

5135 
	#SN_jurisdi˘i⁄SèãOrProvö˚Name
 "jurisdi˘i⁄ST"

	)

5136 
	#LN_jurisdi˘i⁄SèãOrProvö˚Name
 "jurisdi˘i⁄SèãOrProvö˚Name"

	)

5137 
	#NID_jurisdi˘i⁄SèãOrProvö˚Name
 956

	)

5138 
	#OBJ_jurisdi˘i⁄SèãOrProvö˚Name
 1L,3L,6L,1L,4L,1L,311L,60L,2L,1L,2L

	)

5140 
	#SN_jurisdi˘i⁄Cou¡ryName
 "jurisdi˘i⁄C"

	)

5141 
	#LN_jurisdi˘i⁄Cou¡ryName
 "jurisdi˘i⁄Cou¡ryName"

	)

5142 
	#NID_jurisdi˘i⁄Cou¡ryName
 957

	)

5143 
	#OBJ_jurisdi˘i⁄Cou¡ryName
 1L,3L,6L,1L,4L,1L,311L,60L,2L,1L,3L

	)

5145 
	#SN_id_s¸y±
 "id-s¸y±"

	)

5146 
	#LN_id_s¸y±
 "s¸y±"

	)

5147 
	#NID_id_s¸y±
 973

	)

5148 
	#OBJ_id_s¸y±
 1L,3L,6L,1L,4L,1L,11591L,4L,11L

	)

5150 
	#SN_és1_¥f
 "TLS1-PRF"

	)

5151 
	#LN_és1_¥f
 "és1-¥f"

	)

5152 
	#NID_és1_¥f
 1021

	)

5154 
	#SN_hkdf
 "HKDF"

	)

5155 
	#LN_hkdf
 "hkdf"

	)

5156 
	#NID_hkdf
 1036

	)

5158 
	#SN_sshkdf
 "SSHKDF"

	)

5159 
	#LN_sshkdf
 "sshkdf"

	)

5160 
	#NID_sshkdf
 1203

	)

5162 
	#SN_sskdf
 "SSKDF"

	)

5163 
	#LN_sskdf
 "sskdf"

	)

5164 
	#NID_sskdf
 1205

	)

5166 
	#SN_x942kdf
 "X942KDF"

	)

5167 
	#LN_x942kdf
 "x942kdf"

	)

5168 
	#NID_x942kdf
 1207

	)

5170 
	#SN_x963kdf
 "X963KDF"

	)

5171 
	#LN_x963kdf
 "x963kdf"

	)

5172 
	#NID_x963kdf
 1206

	)

5174 
	#SN_id_pköô
 "id-pköô"

	)

5175 
	#NID_id_pköô
 1031

	)

5176 
	#OBJ_id_pköô
 1L,3L,6L,1L,5L,2L,3L

	)

5178 
	#SN_pkInôClõ¡Auth
 "pkInôClõ¡Auth"

	)

5179 
	#LN_pkInôClõ¡Auth
 "PKINIT Clõ¡ Auth"

	)

5180 
	#NID_pkInôClõ¡Auth
 1032

	)

5181 
	#OBJ_pkInôClõ¡Auth
 
OBJ_id_pköô
,4L

	)

5183 
	#SN_pkInôKDC
 "pkInôKDC"

	)

5184 
	#LN_pkInôKDC
 "Signög KDC Re•⁄£"

	)

5185 
	#NID_pkInôKDC
 1033

	)

5186 
	#OBJ_pkInôKDC
 
OBJ_id_pköô
,5L

	)

5188 
	#SN_X25519
 "X25519"

	)

5189 
	#NID_X25519
 1034

	)

5190 
	#OBJ_X25519
 1L,3L,101L,110L

	)

5192 
	#SN_X448
 "X448"

	)

5193 
	#NID_X448
 1035

	)

5194 
	#OBJ_X448
 1L,3L,101L,111L

	)

5196 
	#SN_ED25519
 "ED25519"

	)

5197 
	#NID_ED25519
 1087

	)

5198 
	#OBJ_ED25519
 1L,3L,101L,112L

	)

5200 
	#SN_ED448
 "ED448"

	)

5201 
	#NID_ED448
 1088

	)

5202 
	#OBJ_ED448
 1L,3L,101L,113L

	)

5204 
	#SN_kx_rß
 "KxRSA"

	)

5205 
	#LN_kx_rß
 "kx-rß"

	)

5206 
	#NID_kx_rß
 1037

	)

5208 
	#SN_kx_ecdhe
 "KxECDHE"

	)

5209 
	#LN_kx_ecdhe
 "kx-ecdhe"

	)

5210 
	#NID_kx_ecdhe
 1038

	)

5212 
	#SN_kx_dhe
 "KxDHE"

	)

5213 
	#LN_kx_dhe
 "kx-dhe"

	)

5214 
	#NID_kx_dhe
 1039

	)

5216 
	#SN_kx_ecdhe_psk
 "KxECDHE-PSK"

	)

5217 
	#LN_kx_ecdhe_psk
 "kx-ecdhe-psk"

	)

5218 
	#NID_kx_ecdhe_psk
 1040

	)

5220 
	#SN_kx_dhe_psk
 "KxDHE-PSK"

	)

5221 
	#LN_kx_dhe_psk
 "kx-dhe-psk"

	)

5222 
	#NID_kx_dhe_psk
 1041

	)

5224 
	#SN_kx_rß_psk
 "KxRSA_PSK"

	)

5225 
	#LN_kx_rß_psk
 "kx-rß-psk"

	)

5226 
	#NID_kx_rß_psk
 1042

	)

5228 
	#SN_kx_psk
 "KxPSK"

	)

5229 
	#LN_kx_psk
 "kx-psk"

	)

5230 
	#NID_kx_psk
 1043

	)

5232 
	#SN_kx_§p
 "KxSRP"

	)

5233 
	#LN_kx_§p
 "kx-§p"

	)

5234 
	#NID_kx_§p
 1044

	)

5236 
	#SN_kx_go°
 "KxGOST"

	)

5237 
	#LN_kx_go°
 "kx-go°"

	)

5238 
	#NID_kx_go°
 1045

	)

5240 
	#SN_kx_go°18
 "KxGOST18"

	)

5241 
	#LN_kx_go°18
 "kx-go°18"

	)

5242 
	#NID_kx_go°18
 1218

	)

5244 
	#SN_kx_™y
 "KxANY"

	)

5245 
	#LN_kx_™y
 "kx-™y"

	)

5246 
	#NID_kx_™y
 1063

	)

5248 
	#SN_auth_rß
 "AuthRSA"

	)

5249 
	#LN_auth_rß
 "auth-rß"

	)

5250 
	#NID_auth_rß
 1046

	)

5252 
	#SN_auth_ecdß
 "AuthECDSA"

	)

5253 
	#LN_auth_ecdß
 "auth-ecdß"

	)

5254 
	#NID_auth_ecdß
 1047

	)

5256 
	#SN_auth_psk
 "AuthPSK"

	)

5257 
	#LN_auth_psk
 "auth-psk"

	)

5258 
	#NID_auth_psk
 1048

	)

5260 
	#SN_auth_dss
 "AuthDSS"

	)

5261 
	#LN_auth_dss
 "auth-dss"

	)

5262 
	#NID_auth_dss
 1049

	)

5264 
	#SN_auth_go°01
 "AuthGOST01"

	)

5265 
	#LN_auth_go°01
 "auth-go°01"

	)

5266 
	#NID_auth_go°01
 1050

	)

5268 
	#SN_auth_go°12
 "AuthGOST12"

	)

5269 
	#LN_auth_go°12
 "auth-go°12"

	)

5270 
	#NID_auth_go°12
 1051

	)

5272 
	#SN_auth_§p
 "AuthSRP"

	)

5273 
	#LN_auth_§p
 "auth-§p"

	)

5274 
	#NID_auth_§p
 1052

	)

5276 
	#SN_auth_nuŒ
 "AuthNULL"

	)

5277 
	#LN_auth_nuŒ
 "auth-nuŒ"

	)

5278 
	#NID_auth_nuŒ
 1053

	)

5280 
	#SN_auth_™y
 "AuthANY"

	)

5281 
	#LN_auth_™y
 "auth-™y"

	)

5282 
	#NID_auth_™y
 1064

	)

5284 
	#SN_pﬁy1305
 "Pﬁy1305"

	)

5285 
	#LN_pﬁy1305
 "pﬁy1305"

	)

5286 
	#NID_pﬁy1305
 1061

	)

5288 
	#SN_sùhash
 "SùHash"

	)

5289 
	#LN_sùhash
 "sùhash"

	)

5290 
	#NID_sùhash
 1062

	)

5292 
	#SN_ffdhe2048
 "ffdhe2048"

	)

5293 
	#NID_ffdhe2048
 1126

	)

5295 
	#SN_ffdhe3072
 "ffdhe3072"

	)

5296 
	#NID_ffdhe3072
 1127

	)

5298 
	#SN_ffdhe4096
 "ffdhe4096"

	)

5299 
	#NID_ffdhe4096
 1128

	)

5301 
	#SN_ffdhe6144
 "ffdhe6144"

	)

5302 
	#NID_ffdhe6144
 1129

	)

5304 
	#SN_ffdhe8192
 "ffdhe8192"

	)

5305 
	#NID_ffdhe8192
 1130

	)

5307 
	#SN_modp_1536
 "modp_1536"

	)

5308 
	#NID_modp_1536
 1212

	)

5310 
	#SN_modp_2048
 "modp_2048"

	)

5311 
	#NID_modp_2048
 1213

	)

5313 
	#SN_modp_3072
 "modp_3072"

	)

5314 
	#NID_modp_3072
 1214

	)

5316 
	#SN_modp_4096
 "modp_4096"

	)

5317 
	#NID_modp_4096
 1215

	)

5319 
	#SN_modp_6144
 "modp_6144"

	)

5320 
	#NID_modp_6144
 1216

	)

5322 
	#SN_modp_8192
 "modp_8192"

	)

5323 
	#NID_modp_8192
 1217

	)

5325 
	#SN_ISO_UA
 "ISO-UA"

	)

5326 
	#NID_ISO_UA
 1150

	)

5327 
	#OBJ_ISO_UA
 
OBJ_membî_body
,804L

	)

5329 
	#SN_ua_pki
 "ua-pki"

	)

5330 
	#NID_ua_pki
 1151

	)

5331 
	#OBJ_ua_pki
 
OBJ_ISO_UA
,2L,1L,1L,1L

	)

5333 
	#SN_d°u28147
 "d°u28147"

	)

5334 
	#LN_d°u28147
 "DSTU Go° 28147-2009"

	)

5335 
	#NID_d°u28147
 1152

	)

5336 
	#OBJ_d°u28147
 
OBJ_ua_pki
,1L,1L,1L

	)

5338 
	#SN_d°u28147_ofb
 "d°u28147-ofb"

	)

5339 
	#LN_d°u28147_ofb
 "DSTU Go° 28147-2009 OFB mode"

	)

5340 
	#NID_d°u28147_ofb
 1153

	)

5341 
	#OBJ_d°u28147_ofb
 
OBJ_d°u28147
,2L

	)

5343 
	#SN_d°u28147_cfb
 "d°u28147-cfb"

	)

5344 
	#LN_d°u28147_cfb
 "DSTU Go° 28147-2009 CFB mode"

	)

5345 
	#NID_d°u28147_cfb
 1154

	)

5346 
	#OBJ_d°u28147_cfb
 
OBJ_d°u28147
,3L

	)

5348 
	#SN_d°u28147_wøp
 "d°u28147-wøp"

	)

5349 
	#LN_d°u28147_wøp
 "DSTU Go° 28147-2009 key wøp"

	)

5350 
	#NID_d°u28147_wøp
 1155

	)

5351 
	#OBJ_d°u28147_wøp
 
OBJ_d°u28147
,5L

	)

5353 
	#SN_hmacWôhD°u34311
 "hmacWôhD°u34311"

	)

5354 
	#LN_hmacWôhD°u34311
 "HMAC DSTU Go° 34311-95"

	)

5355 
	#NID_hmacWôhD°u34311
 1156

	)

5356 
	#OBJ_hmacWôhD°u34311
 
OBJ_ua_pki
,1L,1L,2L

	)

5358 
	#SN_d°u34311
 "d°u34311"

	)

5359 
	#LN_d°u34311
 "DSTU Go° 34311-95"

	)

5360 
	#NID_d°u34311
 1157

	)

5361 
	#OBJ_d°u34311
 
OBJ_ua_pki
,1L,2L,1L

	)

5363 
	#SN_d°u4145À
 "d°u4145À"

	)

5364 
	#LN_d°u4145À
 "DSTU 4145-2002Üôéêídün"

	)

5365 
	#NID_d°u4145À
 1158

	)

5366 
	#OBJ_d°u4145À
 
OBJ_ua_pki
,1L,3L,1L,1L

	)

5368 
	#SN_d°u4145be
 "d°u4145be"

	)

5369 
	#LN_d°u4145be
 "DSTU 4145-2002 bigÉndün"

	)

5370 
	#NID_d°u4145be
 1159

	)

5371 
	#OBJ_d°u4145be
 
OBJ_d°u4145À
,1L,1L

	)

5373 
	#SN_uacurve0
 "uacurve0"

	)

5374 
	#LN_uacurve0
 "DSTU curvê0"

	)

5375 
	#NID_uacurve0
 1160

	)

5376 
	#OBJ_uacurve0
 
OBJ_d°u4145À
,2L,0L

	)

5378 
	#SN_uacurve1
 "uacurve1"

	)

5379 
	#LN_uacurve1
 "DSTU curvê1"

	)

5380 
	#NID_uacurve1
 1161

	)

5381 
	#OBJ_uacurve1
 
OBJ_d°u4145À
,2L,1L

	)

5383 
	#SN_uacurve2
 "uacurve2"

	)

5384 
	#LN_uacurve2
 "DSTU curvê2"

	)

5385 
	#NID_uacurve2
 1162

	)

5386 
	#OBJ_uacurve2
 
OBJ_d°u4145À
,2L,2L

	)

5388 
	#SN_uacurve3
 "uacurve3"

	)

5389 
	#LN_uacurve3
 "DSTU curvê3"

	)

5390 
	#NID_uacurve3
 1163

	)

5391 
	#OBJ_uacurve3
 
OBJ_d°u4145À
,2L,3L

	)

5393 
	#SN_uacurve4
 "uacurve4"

	)

5394 
	#LN_uacurve4
 "DSTU curvê4"

	)

5395 
	#NID_uacurve4
 1164

	)

5396 
	#OBJ_uacurve4
 
OBJ_d°u4145À
,2L,4L

	)

5398 
	#SN_uacurve5
 "uacurve5"

	)

5399 
	#LN_uacurve5
 "DSTU curvê5"

	)

5400 
	#NID_uacurve5
 1165

	)

5401 
	#OBJ_uacurve5
 
OBJ_d°u4145À
,2L,5L

	)

5403 
	#SN_uacurve6
 "uacurve6"

	)

5404 
	#LN_uacurve6
 "DSTU curvê6"

	)

5405 
	#NID_uacurve6
 1166

	)

5406 
	#OBJ_uacurve6
 
OBJ_d°u4145À
,2L,6L

	)

5408 
	#SN_uacurve7
 "uacurve7"

	)

5409 
	#LN_uacurve7
 "DSTU curvê7"

	)

5410 
	#NID_uacurve7
 1167

	)

5411 
	#OBJ_uacurve7
 
OBJ_d°u4145À
,2L,7L

	)

5413 
	#SN_uacurve8
 "uacurve8"

	)

5414 
	#LN_uacurve8
 "DSTU curvê8"

	)

5415 
	#NID_uacurve8
 1168

	)

5416 
	#OBJ_uacurve8
 
OBJ_d°u4145À
,2L,8L

	)

5418 
	#SN_uacurve9
 "uacurve9"

	)

5419 
	#LN_uacurve9
 "DSTU curvê9"

	)

5420 
	#NID_uacurve9
 1169

	)

5421 
	#OBJ_uacurve9
 
OBJ_d°u4145À
,2L,9L

	)

5423 
	#SN_´s_128_siv
 "AES-128-SIV"

	)

5424 
	#LN_´s_128_siv
 "´s-128-siv"

	)

5425 
	#NID_´s_128_siv
 1198

	)

5427 
	#SN_´s_192_siv
 "AES-192-SIV"

	)

5428 
	#LN_´s_192_siv
 "´s-192-siv"

	)

5429 
	#NID_´s_192_siv
 1199

	)

5431 
	#SN_´s_256_siv
 "AES-256-SIV"

	)

5432 
	#LN_´s_256_siv
 "´s-256-siv"

	)

5433 
	#NID_´s_256_siv
 1200

	)

5437 #i‚de‡
OPENSSL_NO_DEPRECATED_3_0


5439 
	#SN_id_tc26_cùhî_go°r3412_2015_magma_˘ø˝km
 
SN_magma_˘r_a˝km


	)

5440 
	#NID_id_tc26_cùhî_go°r3412_2015_magma_˘ø˝km
 
NID_magma_˘r_a˝km


	)

5441 
	#OBJ_id_tc26_cùhî_go°r3412_2015_magma_˘ø˝km
 
OBJ_magma_˘r_a˝km


	)

5443 
	#SN_id_tc26_cùhî_go°r3412_2015_magma_˘ø˝km_omac
 
SN_magma_˘r_a˝km_omac


	)

5444 
	#NID_id_tc26_cùhî_go°r3412_2015_magma_˘ø˝km_omac
 
NID_magma_˘r_a˝km_omac


	)

5445 
	#OBJ_id_tc26_cùhî_go°r3412_2015_magma_˘ø˝km_omac
 
OBJ_magma_˘r_a˝km_omac


	)

5447 
	#SN_id_tc26_cùhî_go°r3412_2015_kuznyechik_˘ø˝km
 
SN_kuznyechik_˘r_a˝km


	)

5448 
	#NID_id_tc26_cùhî_go°r3412_2015_kuznyechik_˘ø˝km
 
NID_kuznyechik_˘r_a˝km


	)

5449 
	#OBJ_id_tc26_cùhî_go°r3412_2015_kuznyechik_˘ø˝km
 
OBJ_kuznyechik_˘r_a˝km


	)

5451 
	#SN_id_tc26_cùhî_go°r3412_2015_kuznyechik_˘ø˝km_omac
 
SN_kuznyechik_˘r_a˝km_omac


	)

5452 
	#NID_id_tc26_cùhî_go°r3412_2015_kuznyechik_˘ø˝km_omac
 
NID_kuznyechik_˘r_a˝km_omac


	)

5453 
	#OBJ_id_tc26_cùhî_go°r3412_2015_kuznyechik_˘ø˝km_omac
 
OBJ_kuznyechik_˘r_a˝km_omac


	)

5455 
	#SN_id_tc26_wøp_go°r3412_2015_magma_kexp15
 
SN_magma_kexp15


	)

5456 
	#NID_id_tc26_wøp_go°r3412_2015_magma_kexp15
 
NID_magma_kexp15


	)

5457 
	#OBJ_id_tc26_wøp_go°r3412_2015_magma_kexp15
 
OBJ_magma_kexp15


	)

5459 
	#SN_id_tc26_wøp_go°r3412_2015_kuznyechik_kexp15
 
SN_kuznyechik_kexp15


	)

5460 
	#NID_id_tc26_wøp_go°r3412_2015_kuznyechik_kexp15
 
NID_kuznyechik_kexp15


	)

5461 
	#OBJ_id_tc26_wøp_go°r3412_2015_kuznyechik_kexp15
 
OBJ_kuznyechik_kexp15


	)

5463 
	#SN_gøssh›≥r_ecb
 
SN_kuznyechik_ecb


	)

5464 
	#NID_gøssh›≥r_ecb
 
NID_kuznyechik_ecb


	)

5466 
	#SN_gøssh›≥r_˘r
 
SN_kuznyechik_˘r


	)

5467 
	#NID_gøssh›≥r_˘r
 
NID_kuznyechik_˘r


	)

5469 
	#SN_gøssh›≥r_ofb
 
SN_kuznyechik_ofb


	)

5470 
	#NID_gøssh›≥r_ofb
 
NID_kuznyechik_ofb


	)

5472 
	#SN_gøssh›≥r_cbc
 
SN_kuznyechik_cbc


	)

5473 
	#NID_gøssh›≥r_cbc
 
NID_kuznyechik_cbc


	)

5475 
	#SN_gøssh›≥r_cfb
 
SN_kuznyechik_cfb


	)

5476 
	#NID_gøssh›≥r_cfb
 
NID_kuznyechik_cfb


	)

5478 
	#SN_gøssh›≥r_mac
 
SN_kuznyechik_mac


	)

5479 
	#NID_gøssh›≥r_mac
 
NID_kuznyechik_mac


	)

	@/usr/include/openssl/objectserr.h

11 #i‚de‡
OPENSSL_OBJECTSERR_H


12 
	#OPENSSL_OBJECTSERR_H


	)

13 #¥agm®
⁄˚


15 
	~<›ís¶/›ís¶c⁄f.h
>

16 
	~<›ís¶/symhacks.h
>

17 
	~<›ís¶/¸y±€º_Àgacy.h
>

24 
	#OBJ_R_OID_EXISTS
 102

	)

25 
	#OBJ_R_UNKNOWN_NID
 101

	)

26 
	#OBJ_R_UNKNOWN_OBJECT_NAME
 103

	)

	@
1
.
1
/usr/include
748
29832
/home/unasaw/sip_project/libexosip2-5.3.0/exosip-config.h
/home/unasaw/sip_project/libexosip2-5.3.0/include/eXosip2/eX_call.h
/home/unasaw/sip_project/libexosip2-5.3.0/include/eXosip2/eX_message.h
/home/unasaw/sip_project/libexosip2-5.3.0/include/eXosip2/eX_options.h
/home/unasaw/sip_project/libexosip2-5.3.0/include/eXosip2/eX_publish.h
/home/unasaw/sip_project/libexosip2-5.3.0/include/eXosip2/eX_register.h
/home/unasaw/sip_project/libexosip2-5.3.0/include/eXosip2/eX_setup.h
/home/unasaw/sip_project/libexosip2-5.3.0/include/eXosip2/eX_subscribe.h
/home/unasaw/sip_project/libexosip2-5.3.0/include/eXosip2/eXosip.h
/home/unasaw/sip_project/libexosip2-5.3.0/src/eXcall_api.c
/home/unasaw/sip_project/libexosip2-5.3.0/src/eXconf.c
/home/unasaw/sip_project/libexosip2-5.3.0/src/eXinsubscription_api.c
/home/unasaw/sip_project/libexosip2-5.3.0/src/eXmessage_api.c
/home/unasaw/sip_project/libexosip2-5.3.0/src/eXoptions_api.c
/home/unasaw/sip_project/libexosip2-5.3.0/src/eXosip.c
/home/unasaw/sip_project/libexosip2-5.3.0/src/eXosip2.h
/home/unasaw/sip_project/libexosip2-5.3.0/src/eXpublish_api.c
/home/unasaw/sip_project/libexosip2-5.3.0/src/eXregister_api.c
/home/unasaw/sip_project/libexosip2-5.3.0/src/eXsubscription_api.c
/home/unasaw/sip_project/libexosip2-5.3.0/src/eXtl_dtls.c
/home/unasaw/sip_project/libexosip2-5.3.0/src/eXtl_tcp.c
/home/unasaw/sip_project/libexosip2-5.3.0/src/eXtl_tls.c
/home/unasaw/sip_project/libexosip2-5.3.0/src/eXtl_udp.c
/home/unasaw/sip_project/libexosip2-5.3.0/src/eXtransport.c
/home/unasaw/sip_project/libexosip2-5.3.0/src/eXtransport.h
/home/unasaw/sip_project/libexosip2-5.3.0/src/eXutils.c
/home/unasaw/sip_project/libexosip2-5.3.0/src/inet_ntop.c
/home/unasaw/sip_project/libexosip2-5.3.0/src/inet_ntop.h
/home/unasaw/sip_project/libexosip2-5.3.0/src/jauth.c
/home/unasaw/sip_project/libexosip2-5.3.0/src/jcall.c
/home/unasaw/sip_project/libexosip2-5.3.0/src/jcallback.c
/home/unasaw/sip_project/libexosip2-5.3.0/src/jdialog.c
/home/unasaw/sip_project/libexosip2-5.3.0/src/jevents.c
/home/unasaw/sip_project/libexosip2-5.3.0/src/jnotify.c
/home/unasaw/sip_project/libexosip2-5.3.0/src/jpipe.c
/home/unasaw/sip_project/libexosip2-5.3.0/src/jpipe.h
/home/unasaw/sip_project/libexosip2-5.3.0/src/jpublish.c
/home/unasaw/sip_project/libexosip2-5.3.0/src/jreg.c
/home/unasaw/sip_project/libexosip2-5.3.0/src/jrequest.c
/home/unasaw/sip_project/libexosip2-5.3.0/src/jresponse.c
/home/unasaw/sip_project/libexosip2-5.3.0/src/jsubscribe.c
/home/unasaw/sip_project/libexosip2-5.3.0/src/milenage.c
/home/unasaw/sip_project/libexosip2-5.3.0/src/milenage.h
/home/unasaw/sip_project/libexosip2-5.3.0/src/misc.c
/home/unasaw/sip_project/libexosip2-5.3.0/src/rijndael.c
/home/unasaw/sip_project/libexosip2-5.3.0/src/rijndael.h
/home/unasaw/sip_project/libexosip2-5.3.0/src/sdp_offans.c
/home/unasaw/sip_project/libexosip2-5.3.0/src/udp.c
/home/unasaw/sip_project/libexosip2-5.3.0/tools/sip_monitor.c
/home/unasaw/sip_project/libexosip2-5.3.0/tools/sip_reg.c
/home/unasaw/sip_project/libexosip2-5.3.0/tools/sip_storm.c
/usr/include/MQTTAsync.h
/usr/include/MQTTClient.h
/usr/include/MQTTClientPersistence.h
/usr/include/MQTTExportDeclarations.h
/usr/include/MQTTProperties.h
/usr/include/MQTTReasonCodes.h
/usr/include/MQTTSubscribeOpts.h
/usr/include/aio.h
/usr/include/aliases.h
/usr/include/alloca.h
/usr/include/ar.h
/usr/include/argp.h
/usr/include/argz.h
/usr/include/assert.h
/usr/include/byteswap.h
/usr/include/clif.h
/usr/include/complex.h
/usr/include/cpio.h
/usr/include/crypt.h
/usr/include/ctype.h
/usr/include/curses.h
/usr/include/cursesapp.h
/usr/include/cursesf.h
/usr/include/cursesm.h
/usr/include/cursesp.h
/usr/include/cursesw.h
/usr/include/cursslk.h
/usr/include/dirent.h
/usr/include/dlfcn.h
/usr/include/elf.h
/usr/include/endian.h
/usr/include/envz.h
/usr/include/err.h
/usr/include/errno.h
/usr/include/error.h
/usr/include/eti.h
/usr/include/etip.h
/usr/include/execinfo.h
/usr/include/expat.h
/usr/include/expat_external.h
/usr/include/fcntl.h
/usr/include/features-time64.h
/usr/include/features.h
/usr/include/fenv.h
/usr/include/fmtmsg.h
/usr/include/fnmatch.h
/usr/include/form.h
/usr/include/fstab.h
/usr/include/fts.h
/usr/include/ftw.h
/usr/include/gawkapi.h
/usr/include/gconv.h
/usr/include/getopt.h
/usr/include/glob.h
/usr/include/gnu-versions.h
/usr/include/gnumake.h
/usr/include/grp.h
/usr/include/gshadow.h
/usr/include/iconv.h
/usr/include/ifaddrs.h
/usr/include/inttypes.h
/usr/include/langinfo.h
/usr/include/lastlog.h
/usr/include/libgen.h
/usr/include/libintl.h
/usr/include/limits.h
/usr/include/link.h
/usr/include/locale.h
/usr/include/ltdl.h
/usr/include/malloc.h
/usr/include/math.h
/usr/include/mcheck.h
/usr/include/memory.h
/usr/include/menu.h
/usr/include/mntent.h
/usr/include/monetary.h
/usr/include/mqueue.h
/usr/include/nc_tparm.h
/usr/include/ncurses_dll.h
/usr/include/netdb.h
/usr/include/nl_types.h
/usr/include/nss.h
/usr/include/obstack.h
/usr/include/panel.h
/usr/include/paths.h
/usr/include/poll.h
/usr/include/printf.h
/usr/include/proc_service.h
/usr/include/pthread.h
/usr/include/pty.h
/usr/include/pwd.h
/usr/include/re_comp.h
/usr/include/regex.h
/usr/include/regexp.h
/usr/include/resolv.h
/usr/include/sched.h
/usr/include/search.h
/usr/include/semaphore.h
/usr/include/setjmp.h
/usr/include/sgtty.h
/usr/include/shadow.h
/usr/include/signal.h
/usr/include/spawn.h
/usr/include/stab.h
/usr/include/stdc-predef.h
/usr/include/stdint.h
/usr/include/stdio.h
/usr/include/stdio_ext.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/strings.h
/usr/include/sudo_plugin.h
/usr/include/syscall.h
/usr/include/sysexits.h
/usr/include/syslog.h
/usr/include/tar.h
/usr/include/term.h
/usr/include/term_entry.h
/usr/include/termcap.h
/usr/include/termio.h
/usr/include/termios.h
/usr/include/tgmath.h
/usr/include/thread_db.h
/usr/include/threads.h
/usr/include/tic.h
/usr/include/time.h
/usr/include/ttyent.h
/usr/include/uchar.h
/usr/include/ucontext.h
/usr/include/ulimit.h
/usr/include/unctrl.h
/usr/include/unistd.h
/usr/include/utime.h
/usr/include/utmp.h
/usr/include/utmpx.h
/usr/include/uv.h
/usr/include/values.h
/usr/include/wait.h
/usr/include/wchar.h
/usr/include/wctype.h
/usr/include/wordexp.h
/usr/include/x86_64-linux-gnu/a.out.h
/usr/include/x86_64-linux-gnu/asm/a.out.h
/usr/include/x86_64-linux-gnu/asm/auxvec.h
/usr/include/x86_64-linux-gnu/asm/bitsperlong.h
/usr/include/x86_64-linux-gnu/asm/boot.h
/usr/include/x86_64-linux-gnu/asm/bootparam.h
/usr/include/x86_64-linux-gnu/asm/bpf_perf_event.h
/usr/include/x86_64-linux-gnu/asm/byteorder.h
/usr/include/x86_64-linux-gnu/asm/debugreg.h
/usr/include/x86_64-linux-gnu/asm/e820.h
/usr/include/x86_64-linux-gnu/asm/errno.h
/usr/include/x86_64-linux-gnu/asm/fcntl.h
/usr/include/x86_64-linux-gnu/asm/hw_breakpoint.h
/usr/include/x86_64-linux-gnu/asm/hwcap2.h
/usr/include/x86_64-linux-gnu/asm/ioctl.h
/usr/include/x86_64-linux-gnu/asm/ioctls.h
/usr/include/x86_64-linux-gnu/asm/ipcbuf.h
/usr/include/x86_64-linux-gnu/asm/ist.h
/usr/include/x86_64-linux-gnu/asm/kvm.h
/usr/include/x86_64-linux-gnu/asm/kvm_para.h
/usr/include/x86_64-linux-gnu/asm/kvm_perf.h
/usr/include/x86_64-linux-gnu/asm/ldt.h
/usr/include/x86_64-linux-gnu/asm/mce.h
/usr/include/x86_64-linux-gnu/asm/mman.h
/usr/include/x86_64-linux-gnu/asm/msgbuf.h
/usr/include/x86_64-linux-gnu/asm/msr.h
/usr/include/x86_64-linux-gnu/asm/mtrr.h
/usr/include/x86_64-linux-gnu/asm/param.h
/usr/include/x86_64-linux-gnu/asm/perf_regs.h
/usr/include/x86_64-linux-gnu/asm/poll.h
/usr/include/x86_64-linux-gnu/asm/posix_types.h
/usr/include/x86_64-linux-gnu/asm/posix_types_32.h
/usr/include/x86_64-linux-gnu/asm/posix_types_64.h
/usr/include/x86_64-linux-gnu/asm/posix_types_x32.h
/usr/include/x86_64-linux-gnu/asm/prctl.h
/usr/include/x86_64-linux-gnu/asm/processor-flags.h
/usr/include/x86_64-linux-gnu/asm/ptrace-abi.h
/usr/include/x86_64-linux-gnu/asm/ptrace.h
/usr/include/x86_64-linux-gnu/asm/resource.h
/usr/include/x86_64-linux-gnu/asm/sembuf.h
/usr/include/x86_64-linux-gnu/asm/setup.h
/usr/include/x86_64-linux-gnu/asm/sgx.h
/usr/include/x86_64-linux-gnu/asm/shmbuf.h
/usr/include/x86_64-linux-gnu/asm/sigcontext.h
/usr/include/x86_64-linux-gnu/asm/sigcontext32.h
/usr/include/x86_64-linux-gnu/asm/siginfo.h
/usr/include/x86_64-linux-gnu/asm/signal.h
/usr/include/x86_64-linux-gnu/asm/socket.h
/usr/include/x86_64-linux-gnu/asm/sockios.h
/usr/include/x86_64-linux-gnu/asm/stat.h
/usr/include/x86_64-linux-gnu/asm/statfs.h
/usr/include/x86_64-linux-gnu/asm/svm.h
/usr/include/x86_64-linux-gnu/asm/swab.h
/usr/include/x86_64-linux-gnu/asm/termbits.h
/usr/include/x86_64-linux-gnu/asm/termios.h
/usr/include/x86_64-linux-gnu/asm/types.h
/usr/include/x86_64-linux-gnu/asm/ucontext.h
/usr/include/x86_64-linux-gnu/asm/unistd.h
/usr/include/x86_64-linux-gnu/asm/unistd_32.h
/usr/include/x86_64-linux-gnu/asm/unistd_64.h
/usr/include/x86_64-linux-gnu/asm/unistd_x32.h
/usr/include/x86_64-linux-gnu/asm/vm86.h
/usr/include/x86_64-linux-gnu/asm/vmx.h
/usr/include/x86_64-linux-gnu/asm/vsyscall.h
/usr/include/x86_64-linux-gnu/bits/a.out.h
/usr/include/x86_64-linux-gnu/bits/argp-ldbl.h
/usr/include/x86_64-linux-gnu/bits/atomic_wide_counter.h
/usr/include/x86_64-linux-gnu/bits/byteswap.h
/usr/include/x86_64-linux-gnu/bits/cmathcalls.h
/usr/include/x86_64-linux-gnu/bits/confname.h
/usr/include/x86_64-linux-gnu/bits/cpu-set.h
/usr/include/x86_64-linux-gnu/bits/dirent.h
/usr/include/x86_64-linux-gnu/bits/dirent_ext.h
/usr/include/x86_64-linux-gnu/bits/dl_find_object.h
/usr/include/x86_64-linux-gnu/bits/dlfcn.h
/usr/include/x86_64-linux-gnu/bits/elfclass.h
/usr/include/x86_64-linux-gnu/bits/endian.h
/usr/include/x86_64-linux-gnu/bits/endianness.h
/usr/include/x86_64-linux-gnu/bits/environments.h
/usr/include/x86_64-linux-gnu/bits/epoll.h
/usr/include/x86_64-linux-gnu/bits/err-ldbl.h
/usr/include/x86_64-linux-gnu/bits/errno.h
/usr/include/x86_64-linux-gnu/bits/error-ldbl.h
/usr/include/x86_64-linux-gnu/bits/error.h
/usr/include/x86_64-linux-gnu/bits/eventfd.h
/usr/include/x86_64-linux-gnu/bits/fcntl-linux.h
/usr/include/x86_64-linux-gnu/bits/fcntl.h
/usr/include/x86_64-linux-gnu/bits/fcntl2.h
/usr/include/x86_64-linux-gnu/bits/fenv.h
/usr/include/x86_64-linux-gnu/bits/floatn-common.h
/usr/include/x86_64-linux-gnu/bits/floatn.h
/usr/include/x86_64-linux-gnu/bits/flt-eval-method.h
/usr/include/x86_64-linux-gnu/bits/fp-fast.h
/usr/include/x86_64-linux-gnu/bits/fp-logb.h
/usr/include/x86_64-linux-gnu/bits/getopt_core.h
/usr/include/x86_64-linux-gnu/bits/getopt_ext.h
/usr/include/x86_64-linux-gnu/bits/getopt_posix.h
/usr/include/x86_64-linux-gnu/bits/hwcap.h
/usr/include/x86_64-linux-gnu/bits/in.h
/usr/include/x86_64-linux-gnu/bits/indirect-return.h
/usr/include/x86_64-linux-gnu/bits/initspin.h
/usr/include/x86_64-linux-gnu/bits/inotify.h
/usr/include/x86_64-linux-gnu/bits/ioctl-types.h
/usr/include/x86_64-linux-gnu/bits/ioctls.h
/usr/include/x86_64-linux-gnu/bits/ipc-perm.h
/usr/include/x86_64-linux-gnu/bits/ipc.h
/usr/include/x86_64-linux-gnu/bits/ipctypes.h
/usr/include/x86_64-linux-gnu/bits/iscanonical.h
/usr/include/x86_64-linux-gnu/bits/libc-header-start.h
/usr/include/x86_64-linux-gnu/bits/libm-simd-decl-stubs.h
/usr/include/x86_64-linux-gnu/bits/link.h
/usr/include/x86_64-linux-gnu/bits/link_lavcurrent.h
/usr/include/x86_64-linux-gnu/bits/local_lim.h
/usr/include/x86_64-linux-gnu/bits/locale.h
/usr/include/x86_64-linux-gnu/bits/long-double.h
/usr/include/x86_64-linux-gnu/bits/math-vector.h
/usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h
/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h
/usr/include/x86_64-linux-gnu/bits/mathcalls.h
/usr/include/x86_64-linux-gnu/bits/mathdef.h
/usr/include/x86_64-linux-gnu/bits/mman-linux.h
/usr/include/x86_64-linux-gnu/bits/mman-map-flags-generic.h
/usr/include/x86_64-linux-gnu/bits/mman-shared.h
/usr/include/x86_64-linux-gnu/bits/mman.h
/usr/include/x86_64-linux-gnu/bits/monetary-ldbl.h
/usr/include/x86_64-linux-gnu/bits/mqueue.h
/usr/include/x86_64-linux-gnu/bits/mqueue2.h
/usr/include/x86_64-linux-gnu/bits/msq.h
/usr/include/x86_64-linux-gnu/bits/netdb.h
/usr/include/x86_64-linux-gnu/bits/param.h
/usr/include/x86_64-linux-gnu/bits/platform/x86.h
/usr/include/x86_64-linux-gnu/bits/poll.h
/usr/include/x86_64-linux-gnu/bits/poll2.h
/usr/include/x86_64-linux-gnu/bits/posix1_lim.h
/usr/include/x86_64-linux-gnu/bits/posix2_lim.h
/usr/include/x86_64-linux-gnu/bits/posix_opt.h
/usr/include/x86_64-linux-gnu/bits/printf-ldbl.h
/usr/include/x86_64-linux-gnu/bits/procfs-extra.h
/usr/include/x86_64-linux-gnu/bits/procfs-id.h
/usr/include/x86_64-linux-gnu/bits/procfs-prregset.h
/usr/include/x86_64-linux-gnu/bits/procfs.h
/usr/include/x86_64-linux-gnu/bits/pthread_stack_min-dynamic.h
/usr/include/x86_64-linux-gnu/bits/pthread_stack_min.h
/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h
/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h
/usr/include/x86_64-linux-gnu/bits/ptrace-shared.h
/usr/include/x86_64-linux-gnu/bits/resource.h
/usr/include/x86_64-linux-gnu/bits/rseq.h
/usr/include/x86_64-linux-gnu/bits/sched.h
/usr/include/x86_64-linux-gnu/bits/select.h
/usr/include/x86_64-linux-gnu/bits/select2.h
/usr/include/x86_64-linux-gnu/bits/sem.h
/usr/include/x86_64-linux-gnu/bits/semaphore.h
/usr/include/x86_64-linux-gnu/bits/setjmp.h
/usr/include/x86_64-linux-gnu/bits/setjmp2.h
/usr/include/x86_64-linux-gnu/bits/shm.h
/usr/include/x86_64-linux-gnu/bits/shmlba.h
/usr/include/x86_64-linux-gnu/bits/sigaction.h
/usr/include/x86_64-linux-gnu/bits/sigcontext.h
/usr/include/x86_64-linux-gnu/bits/sigevent-consts.h
/usr/include/x86_64-linux-gnu/bits/siginfo-arch.h
/usr/include/x86_64-linux-gnu/bits/siginfo-consts-arch.h
/usr/include/x86_64-linux-gnu/bits/siginfo-consts.h
/usr/include/x86_64-linux-gnu/bits/signal_ext.h
/usr/include/x86_64-linux-gnu/bits/signalfd.h
/usr/include/x86_64-linux-gnu/bits/signum-arch.h
/usr/include/x86_64-linux-gnu/bits/signum-generic.h
/usr/include/x86_64-linux-gnu/bits/sigstack.h
/usr/include/x86_64-linux-gnu/bits/sigstksz.h
/usr/include/x86_64-linux-gnu/bits/sigthread.h
/usr/include/x86_64-linux-gnu/bits/sockaddr.h
/usr/include/x86_64-linux-gnu/bits/socket-constants.h
/usr/include/x86_64-linux-gnu/bits/socket.h
/usr/include/x86_64-linux-gnu/bits/socket2.h
/usr/include/x86_64-linux-gnu/bits/socket_type.h
/usr/include/x86_64-linux-gnu/bits/ss_flags.h
/usr/include/x86_64-linux-gnu/bits/stat.h
/usr/include/x86_64-linux-gnu/bits/statfs.h
/usr/include/x86_64-linux-gnu/bits/statvfs.h
/usr/include/x86_64-linux-gnu/bits/statx-generic.h
/usr/include/x86_64-linux-gnu/bits/statx.h
/usr/include/x86_64-linux-gnu/bits/stdint-intn.h
/usr/include/x86_64-linux-gnu/bits/stdint-uintn.h
/usr/include/x86_64-linux-gnu/bits/stdio-ldbl.h
/usr/include/x86_64-linux-gnu/bits/stdio.h
/usr/include/x86_64-linux-gnu/bits/stdio2.h
/usr/include/x86_64-linux-gnu/bits/stdio_lim.h
/usr/include/x86_64-linux-gnu/bits/stdlib-bsearch.h
/usr/include/x86_64-linux-gnu/bits/stdlib-float.h
/usr/include/x86_64-linux-gnu/bits/stdlib-ldbl.h
/usr/include/x86_64-linux-gnu/bits/stdlib.h
/usr/include/x86_64-linux-gnu/bits/string_fortified.h
/usr/include/x86_64-linux-gnu/bits/strings_fortified.h
/usr/include/x86_64-linux-gnu/bits/struct_mutex.h
/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h
/usr/include/x86_64-linux-gnu/bits/struct_stat.h
/usr/include/x86_64-linux-gnu/bits/struct_stat_time64_helper.h
/usr/include/x86_64-linux-gnu/bits/syscall.h
/usr/include/x86_64-linux-gnu/bits/syslog-ldbl.h
/usr/include/x86_64-linux-gnu/bits/syslog-path.h
/usr/include/x86_64-linux-gnu/bits/syslog.h
/usr/include/x86_64-linux-gnu/bits/sysmacros.h
/usr/include/x86_64-linux-gnu/bits/termios-baud.h
/usr/include/x86_64-linux-gnu/bits/termios-c_cc.h
/usr/include/x86_64-linux-gnu/bits/termios-c_cflag.h
/usr/include/x86_64-linux-gnu/bits/termios-c_iflag.h
/usr/include/x86_64-linux-gnu/bits/termios-c_lflag.h
/usr/include/x86_64-linux-gnu/bits/termios-c_oflag.h
/usr/include/x86_64-linux-gnu/bits/termios-misc.h
/usr/include/x86_64-linux-gnu/bits/termios-struct.h
/usr/include/x86_64-linux-gnu/bits/termios-tcflow.h
/usr/include/x86_64-linux-gnu/bits/termios.h
/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h
/usr/include/x86_64-linux-gnu/bits/time.h
/usr/include/x86_64-linux-gnu/bits/time64.h
/usr/include/x86_64-linux-gnu/bits/timerfd.h
/usr/include/x86_64-linux-gnu/bits/timesize.h
/usr/include/x86_64-linux-gnu/bits/timex.h
/usr/include/x86_64-linux-gnu/bits/types.h
/usr/include/x86_64-linux-gnu/bits/types/FILE.h
/usr/include/x86_64-linux-gnu/bits/types/__FILE.h
/usr/include/x86_64-linux-gnu/bits/types/__fpos64_t.h
/usr/include/x86_64-linux-gnu/bits/types/__fpos_t.h
/usr/include/x86_64-linux-gnu/bits/types/__locale_t.h
/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h
/usr/include/x86_64-linux-gnu/bits/types/__sigset_t.h
/usr/include/x86_64-linux-gnu/bits/types/__sigval_t.h
/usr/include/x86_64-linux-gnu/bits/types/clock_t.h
/usr/include/x86_64-linux-gnu/bits/types/clockid_t.h
/usr/include/x86_64-linux-gnu/bits/types/cookie_io_functions_t.h
/usr/include/x86_64-linux-gnu/bits/types/error_t.h
/usr/include/x86_64-linux-gnu/bits/types/locale_t.h
/usr/include/x86_64-linux-gnu/bits/types/mbstate_t.h
/usr/include/x86_64-linux-gnu/bits/types/res_state.h
/usr/include/x86_64-linux-gnu/bits/types/sig_atomic_t.h
/usr/include/x86_64-linux-gnu/bits/types/sigevent_t.h
/usr/include/x86_64-linux-gnu/bits/types/siginfo_t.h
/usr/include/x86_64-linux-gnu/bits/types/sigset_t.h
/usr/include/x86_64-linux-gnu/bits/types/sigval_t.h
/usr/include/x86_64-linux-gnu/bits/types/stack_t.h
/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h
/usr/include/x86_64-linux-gnu/bits/types/struct___jmp_buf_tag.h
/usr/include/x86_64-linux-gnu/bits/types/struct_iovec.h
/usr/include/x86_64-linux-gnu/bits/types/struct_itimerspec.h
/usr/include/x86_64-linux-gnu/bits/types/struct_msqid64_ds.h
/usr/include/x86_64-linux-gnu/bits/types/struct_msqid64_ds_helper.h
/usr/include/x86_64-linux-gnu/bits/types/struct_msqid_ds.h
/usr/include/x86_64-linux-gnu/bits/types/struct_osockaddr.h
/usr/include/x86_64-linux-gnu/bits/types/struct_rusage.h
/usr/include/x86_64-linux-gnu/bits/types/struct_sched_param.h
/usr/include/x86_64-linux-gnu/bits/types/struct_semid64_ds.h
/usr/include/x86_64-linux-gnu/bits/types/struct_semid64_ds_helper.h
/usr/include/x86_64-linux-gnu/bits/types/struct_semid_ds.h
/usr/include/x86_64-linux-gnu/bits/types/struct_shmid64_ds.h
/usr/include/x86_64-linux-gnu/bits/types/struct_shmid64_ds_helper.h
/usr/include/x86_64-linux-gnu/bits/types/struct_shmid_ds.h
/usr/include/x86_64-linux-gnu/bits/types/struct_sigstack.h
/usr/include/x86_64-linux-gnu/bits/types/struct_statx.h
/usr/include/x86_64-linux-gnu/bits/types/struct_statx_timestamp.h
/usr/include/x86_64-linux-gnu/bits/types/struct_timeb.h
/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h
/usr/include/x86_64-linux-gnu/bits/types/struct_timeval.h
/usr/include/x86_64-linux-gnu/bits/types/struct_tm.h
/usr/include/x86_64-linux-gnu/bits/types/time_t.h
/usr/include/x86_64-linux-gnu/bits/types/timer_t.h
/usr/include/x86_64-linux-gnu/bits/types/wint_t.h
/usr/include/x86_64-linux-gnu/bits/typesizes.h
/usr/include/x86_64-linux-gnu/bits/uintn-identity.h
/usr/include/x86_64-linux-gnu/bits/uio-ext.h
/usr/include/x86_64-linux-gnu/bits/uio_lim.h
/usr/include/x86_64-linux-gnu/bits/unistd.h
/usr/include/x86_64-linux-gnu/bits/unistd_ext.h
/usr/include/x86_64-linux-gnu/bits/utmp.h
/usr/include/x86_64-linux-gnu/bits/utmpx.h
/usr/include/x86_64-linux-gnu/bits/utsname.h
/usr/include/x86_64-linux-gnu/bits/waitflags.h
/usr/include/x86_64-linux-gnu/bits/waitstatus.h
/usr/include/x86_64-linux-gnu/bits/wchar-ldbl.h
/usr/include/x86_64-linux-gnu/bits/wchar.h
/usr/include/x86_64-linux-gnu/bits/wchar2.h
/usr/include/x86_64-linux-gnu/bits/wctype-wchar.h
/usr/include/x86_64-linux-gnu/bits/wordsize.h
/usr/include/x86_64-linux-gnu/bits/xopen_lim.h
/usr/include/x86_64-linux-gnu/c++/11/bits/atomic_word.h
/usr/include/x86_64-linux-gnu/c++/11/bits/basic_file.h
/usr/include/x86_64-linux-gnu/c++/11/bits/c++allocator.h
/usr/include/x86_64-linux-gnu/c++/11/bits/c++config.h
/usr/include/x86_64-linux-gnu/c++/11/bits/c++io.h
/usr/include/x86_64-linux-gnu/c++/11/bits/c++locale.h
/usr/include/x86_64-linux-gnu/c++/11/bits/cpu_defines.h
/usr/include/x86_64-linux-gnu/c++/11/bits/ctype_base.h
/usr/include/x86_64-linux-gnu/c++/11/bits/ctype_inline.h
/usr/include/x86_64-linux-gnu/c++/11/bits/cxxabi_tweaks.h
/usr/include/x86_64-linux-gnu/c++/11/bits/error_constants.h
/usr/include/x86_64-linux-gnu/c++/11/bits/extc++.h
/usr/include/x86_64-linux-gnu/c++/11/bits/gthr-default.h
/usr/include/x86_64-linux-gnu/c++/11/bits/gthr-posix.h
/usr/include/x86_64-linux-gnu/c++/11/bits/gthr-single.h
/usr/include/x86_64-linux-gnu/c++/11/bits/gthr.h
/usr/include/x86_64-linux-gnu/c++/11/bits/messages_members.h
/usr/include/x86_64-linux-gnu/c++/11/bits/opt_random.h
/usr/include/x86_64-linux-gnu/c++/11/bits/os_defines.h
/usr/include/x86_64-linux-gnu/c++/11/bits/stdc++.h
/usr/include/x86_64-linux-gnu/c++/11/bits/stdtr1c++.h
/usr/include/x86_64-linux-gnu/c++/11/bits/time_members.h
/usr/include/x86_64-linux-gnu/c++/11/ext/opt_random.h
/usr/include/x86_64-linux-gnu/expat_config.h
/usr/include/x86_64-linux-gnu/fpu_control.h
/usr/include/x86_64-linux-gnu/gnu/lib-names-64.h
/usr/include/x86_64-linux-gnu/gnu/lib-names.h
/usr/include/x86_64-linux-gnu/gnu/libc-version.h
/usr/include/x86_64-linux-gnu/gnu/stubs-64.h
/usr/include/x86_64-linux-gnu/gnu/stubs.h
/usr/include/x86_64-linux-gnu/ieee754.h
/usr/include/x86_64-linux-gnu/openssl/configuration.h
/usr/include/x86_64-linux-gnu/openssl/opensslconf.h
/usr/include/x86_64-linux-gnu/python3.10/pyconfig.h
/usr/include/x86_64-linux-gnu/sys/acct.h
/usr/include/x86_64-linux-gnu/sys/auxv.h
/usr/include/x86_64-linux-gnu/sys/bitypes.h
/usr/include/x86_64-linux-gnu/sys/cdefs.h
/usr/include/x86_64-linux-gnu/sys/debugreg.h
/usr/include/x86_64-linux-gnu/sys/dir.h
/usr/include/x86_64-linux-gnu/sys/elf.h
/usr/include/x86_64-linux-gnu/sys/epoll.h
/usr/include/x86_64-linux-gnu/sys/errno.h
/usr/include/x86_64-linux-gnu/sys/eventfd.h
/usr/include/x86_64-linux-gnu/sys/fanotify.h
/usr/include/x86_64-linux-gnu/sys/fcntl.h
/usr/include/x86_64-linux-gnu/sys/file.h
/usr/include/x86_64-linux-gnu/sys/fsuid.h
/usr/include/x86_64-linux-gnu/sys/gmon.h
/usr/include/x86_64-linux-gnu/sys/gmon_out.h
/usr/include/x86_64-linux-gnu/sys/inotify.h
/usr/include/x86_64-linux-gnu/sys/io.h
/usr/include/x86_64-linux-gnu/sys/ioctl.h
/usr/include/x86_64-linux-gnu/sys/ipc.h
/usr/include/x86_64-linux-gnu/sys/kd.h
/usr/include/x86_64-linux-gnu/sys/klog.h
/usr/include/x86_64-linux-gnu/sys/mman.h
/usr/include/x86_64-linux-gnu/sys/mount.h
/usr/include/x86_64-linux-gnu/sys/msg.h
/usr/include/x86_64-linux-gnu/sys/mtio.h
/usr/include/x86_64-linux-gnu/sys/param.h
/usr/include/x86_64-linux-gnu/sys/pci.h
/usr/include/x86_64-linux-gnu/sys/perm.h
/usr/include/x86_64-linux-gnu/sys/personality.h
/usr/include/x86_64-linux-gnu/sys/platform/x86.h
/usr/include/x86_64-linux-gnu/sys/poll.h
/usr/include/x86_64-linux-gnu/sys/prctl.h
/usr/include/x86_64-linux-gnu/sys/procfs.h
/usr/include/x86_64-linux-gnu/sys/profil.h
/usr/include/x86_64-linux-gnu/sys/ptrace.h
/usr/include/x86_64-linux-gnu/sys/queue.h
/usr/include/x86_64-linux-gnu/sys/quota.h
/usr/include/x86_64-linux-gnu/sys/random.h
/usr/include/x86_64-linux-gnu/sys/raw.h
/usr/include/x86_64-linux-gnu/sys/reboot.h
/usr/include/x86_64-linux-gnu/sys/reg.h
/usr/include/x86_64-linux-gnu/sys/resource.h
/usr/include/x86_64-linux-gnu/sys/rseq.h
/usr/include/x86_64-linux-gnu/sys/select.h
/usr/include/x86_64-linux-gnu/sys/sem.h
/usr/include/x86_64-linux-gnu/sys/sendfile.h
/usr/include/x86_64-linux-gnu/sys/shm.h
/usr/include/x86_64-linux-gnu/sys/signal.h
/usr/include/x86_64-linux-gnu/sys/signalfd.h
/usr/include/x86_64-linux-gnu/sys/single_threaded.h
/usr/include/x86_64-linux-gnu/sys/socket.h
/usr/include/x86_64-linux-gnu/sys/socketvar.h
/usr/include/x86_64-linux-gnu/sys/soundcard.h
/usr/include/x86_64-linux-gnu/sys/stat.h
/usr/include/x86_64-linux-gnu/sys/statfs.h
/usr/include/x86_64-linux-gnu/sys/statvfs.h
/usr/include/x86_64-linux-gnu/sys/swap.h
/usr/include/x86_64-linux-gnu/sys/syscall.h
/usr/include/x86_64-linux-gnu/sys/sysinfo.h
/usr/include/x86_64-linux-gnu/sys/syslog.h
/usr/include/x86_64-linux-gnu/sys/sysmacros.h
/usr/include/x86_64-linux-gnu/sys/termios.h
/usr/include/x86_64-linux-gnu/sys/time.h
/usr/include/x86_64-linux-gnu/sys/timeb.h
/usr/include/x86_64-linux-gnu/sys/timerfd.h
/usr/include/x86_64-linux-gnu/sys/times.h
/usr/include/x86_64-linux-gnu/sys/timex.h
/usr/include/x86_64-linux-gnu/sys/ttychars.h
/usr/include/x86_64-linux-gnu/sys/ttydefaults.h
/usr/include/x86_64-linux-gnu/sys/types.h
/usr/include/x86_64-linux-gnu/sys/ucontext.h
/usr/include/x86_64-linux-gnu/sys/uio.h
/usr/include/x86_64-linux-gnu/sys/un.h
/usr/include/x86_64-linux-gnu/sys/unistd.h
/usr/include/x86_64-linux-gnu/sys/user.h
/usr/include/x86_64-linux-gnu/sys/utsname.h
/usr/include/x86_64-linux-gnu/sys/vfs.h
/usr/include/x86_64-linux-gnu/sys/vlimit.h
/usr/include/x86_64-linux-gnu/sys/vm86.h
/usr/include/x86_64-linux-gnu/sys/vt.h
/usr/include/x86_64-linux-gnu/sys/wait.h
/usr/include/x86_64-linux-gnu/sys/xattr.h
/usr/include/zconf.h
/usr/include/zlib.h
/usr/include/arpa/inet.h
/usr/include/arpa/nameser.h
/usr/include/arpa/nameser_compat.h
/usr/include/asm-generic/bitsperlong.h
/usr/include/asm-generic/bpf_perf_event.h
/usr/include/asm-generic/errno.h
/usr/include/asm-generic/fcntl.h
/usr/include/asm-generic/ioctl.h
/usr/include/asm-generic/ioctls.h
/usr/include/asm-generic/ipcbuf.h
/usr/include/asm-generic/mman.h
/usr/include/asm-generic/msgbuf.h
/usr/include/asm-generic/param.h
/usr/include/asm-generic/poll.h
/usr/include/asm-generic/posix_types.h
/usr/include/asm-generic/resource.h
/usr/include/asm-generic/shmbuf.h
/usr/include/asm-generic/siginfo.h
/usr/include/asm-generic/signal-defs.h
/usr/include/asm-generic/socket.h
/usr/include/asm-generic/sockios.h
/usr/include/asm-generic/statfs.h
/usr/include/asm-generic/termbits.h
/usr/include/asm-generic/termios.h
/usr/include/asm-generic/types.h
/usr/include/asm-generic/ucontext.h
/usr/include/libltdl/lt_dlloader.h
/usr/include/libltdl/lt_error.h
/usr/include/libltdl/lt_system.h
/usr/include/linux/apm_bios.h
/usr/include/linux/byteorder/little_endian.h
/usr/include/linux/close_range.h
/usr/include/linux/const.h
/usr/include/linux/edd.h
/usr/include/linux/errno.h
/usr/include/linux/falloc.h
/usr/include/linux/fanotify.h
/usr/include/linux/ioctl.h
/usr/include/linux/kd.h
/usr/include/linux/kernel.h
/usr/include/linux/limits.h
/usr/include/linux/param.h
/usr/include/linux/pci.h
/usr/include/linux/prctl.h
/usr/include/linux/quota.h
/usr/include/linux/rseq.h
/usr/include/linux/screen_info.h
/usr/include/linux/soundcard.h
/usr/include/linux/stat.h
/usr/include/linux/time.h
/usr/include/linux/types.h
/usr/include/linux/version.h
/usr/include/linux/vt.h
/usr/include/net/if.h
/usr/include/netinet/in.h
/usr/include/netinet/tcp.h
/usr/include/openssl/bn.h
/usr/include/openssl/dh.h
/usr/include/openssl/err.h
/usr/include/openssl/macros.h
/usr/include/openssl/opensslv.h
/usr/include/openssl/pem.h
/usr/include/openssl/rand.h
/usr/include/openssl/rsa.h
/usr/include/openssl/sha.h
/usr/include/openssl/ssl.h
/usr/include/openssl/tls1.h
/usr/include/openssl/x509.h
/usr/include/openssl/x509v3.h
/usr/include/rpc/netdb.h
/usr/include/uv/errno.h
/usr/include/uv/stdint-msvc2008.h
/usr/include/uv/unix.h
/usr/include/uv/version.h
/usr/include/uv/win.h
/usr/include/video/edid.h
/usr/include/asm-generic/errno-base.h
/usr/include/asm-generic/int-ll64.h
/usr/include/asm-generic/mman-common.h
/usr/include/linux/patchkey.h
/usr/include/linux/pci_regs.h
/usr/include/linux/posix_types.h
/usr/include/linux/ptrace.h
/usr/include/linux/stddef.h
/usr/include/linux/swab.h
/usr/include/linux/sysinfo.h
/usr/include/linux/time_types.h
/usr/include/openssl/asn1.h
/usr/include/openssl/async.h
/usr/include/openssl/bio.h
/usr/include/openssl/bnerr.h
/usr/include/openssl/buffer.h
/usr/include/openssl/comp.h
/usr/include/openssl/conf.h
/usr/include/openssl/crypto.h
/usr/include/openssl/cryptoerr_legacy.h
/usr/include/openssl/ct.h
/usr/include/openssl/dherr.h
/usr/include/openssl/dsa.h
/usr/include/openssl/dtls1.h
/usr/include/openssl/e_os2.h
/usr/include/openssl/ec.h
/usr/include/openssl/evp.h
/usr/include/openssl/hmac.h
/usr/include/openssl/lhash.h
/usr/include/openssl/ocsp.h
/usr/include/openssl/pemerr.h
/usr/include/openssl/pkcs7.h
/usr/include/openssl/prov_ssl.h
/usr/include/openssl/randerr.h
/usr/include/openssl/rsaerr.h
/usr/include/openssl/safestack.h
/usr/include/openssl/srtp.h
/usr/include/openssl/ssl2.h
/usr/include/openssl/ssl3.h
/usr/include/openssl/sslerr.h
/usr/include/openssl/symhacks.h
/usr/include/openssl/types.h
/usr/include/openssl/x509_vfy.h
/usr/include/openssl/x509err.h
/usr/include/openssl/x509v3err.h
/usr/include/uv/aix.h
/usr/include/uv/bsd.h
/usr/include/uv/darwin.h
/usr/include/uv/linux.h
/usr/include/uv/os390.h
/usr/include/uv/posix.h
/usr/include/uv/sunos.h
/usr/include/uv/threadpool.h
/usr/include/uv/tree.h
/usr/include/openssl/asn1err.h
/usr/include/openssl/asyncerr.h
/usr/include/openssl/bioerr.h
/usr/include/openssl/buffererr.h
/usr/include/openssl/comperr.h
/usr/include/openssl/conferr.h
/usr/include/openssl/conftypes.h
/usr/include/openssl/core.h
/usr/include/openssl/core_dispatch.h
/usr/include/openssl/cryptoerr.h
/usr/include/openssl/cterr.h
/usr/include/openssl/dsaerr.h
/usr/include/openssl/ebcdic.h
/usr/include/openssl/ecerr.h
/usr/include/openssl/evperr.h
/usr/include/openssl/http.h
/usr/include/openssl/objects.h
/usr/include/openssl/ocsperr.h
/usr/include/openssl/params.h
/usr/include/openssl/pkcs7err.h
/usr/include/openssl/sslerr_legacy.h
/usr/include/openssl/stack.h
/usr/include/openssl/obj_mac.h
/usr/include/openssl/objectserr.h
